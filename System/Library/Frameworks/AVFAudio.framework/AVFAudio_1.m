uint64_t __destroy_helper_block_ea8_64c42_ZTSNSt3__110shared_ptrI14ControllerImplEE80c47_ZTSNSt3__110shared_ptrI19AVVCRecordingEngineEE(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 + 64;
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](a1 + 80);
  return std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v1);
}

void ___ZN14ControllerImpl36_createRecordingEngineWithParametersENSt3__110shared_ptrIS_EEP17AVVoiceControllerN19AVVCRecordingEngine10EngineTypeEP8NSStringlU13block_pointerFvNS1_IS5_EEE_block_invoke_2(uint64_t a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD v16[4];
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  int v25;

  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 3321888768;
  v16[2] = ___ZN14ControllerImpl36_createRecordingEngineWithParametersENSt3__110shared_ptrIS_EEP17AVVoiceControllerN19AVVCRecordingEngine10EngineTypeEP8NSStringlU13block_pointerFvNS1_IS5_EEE_block_invoke_3;
  v16[3] = &unk_1E3BE9E68;
  v3 = *(_QWORD *)(a1 + 56);
  v2 = *(std::__shared_weak_count **)(a1 + 64);
  v20 = v3;
  v21 = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v7 = *(_QWORD *)(a1 + 72);
  v6 = *(std::__shared_weak_count **)(a1 + 80);
  v19 = *(_QWORD *)(a1 + 48);
  v22 = v7;
  v23 = v6;
  if (v6)
  {
    v8 = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v25 = *(_DWORD *)(a1 + 96);
  v24 = *(_QWORD *)(a1 + 88);
  v17 = *(id *)(a1 + 32);
  v18 = *(id *)(a1 + 40);
  ControllerImpl::safeWork(v3, v16, (uint64_t)"_createRecordingEngineWithParameters_block_invoke");

  v10 = v23;
  if (v23)
  {
    v11 = (unint64_t *)&v23->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = v21;
  if (v21)
  {
    v14 = (unint64_t *)&v21->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_19B7E6FA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  uint64_t v15;
  uint64_t v16;

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v16);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

_QWORD *__copy_helper_block_ea8_56c42_ZTSNSt3__110shared_ptrI14ControllerImplEE72c47_ZTSNSt3__110shared_ptrI19AVVCRecordingEngineEE(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = a2[8];
  result[7] = a2[7];
  result[8] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  v5 = a2[10];
  result[9] = a2[9];
  result[10] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return result;
}

uint64_t __destroy_helper_block_ea8_56c42_ZTSNSt3__110shared_ptrI14ControllerImplEE72c47_ZTSNSt3__110shared_ptrI19AVVCRecordingEngineEE(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 + 56;
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](a1 + 72);
  return std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v1);
}

void ___ZN14ControllerImpl36_createRecordingEngineWithParametersENSt3__110shared_ptrIS_EEP17AVVoiceControllerN19AVVCRecordingEngine10EngineTypeEP8NSStringlU13block_pointerFvNS1_IS5_EEE_block_invoke_3(uint64_t a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  id v15;
  _QWORD *v16;
  _QWORD **v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  NSObject *v25;
  id v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  __int128 v38;
  _QWORD v39[2];
  void (*v40)(uint64_t);
  void *v41;
  id v42;
  __int128 v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  _QWORD **v52;
  std::__shared_weak_count *v53;
  _BYTE buf[18];
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 56);
  v2 = *(std::__shared_weak_count **)(a1 + 64);
  v50 = v3;
  v51 = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
  v8 = *(_QWORD *)(a1 + 72);
  v7 = *(std::__shared_weak_count **)(a1 + 80);
  v48 = v8;
  v49 = v7;
  if (v7)
  {
    v9 = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    v12 = *(_QWORD *)(a1 + 72);
    v11 = *(std::__shared_weak_count **)(a1 + 80);
  }
  else
  {
    v11 = 0;
    v12 = v8;
  }
  v39[0] = MEMORY[0x1E0C809B0];
  v39[1] = 3321888768;
  v40 = ___ZN14ControllerImpl36_createRecordingEngineWithParametersENSt3__110shared_ptrIS_EEP17AVVoiceControllerN19AVVCRecordingEngine10EngineTypeEP8NSStringlU13block_pointerFvNS1_IS5_EEE_block_invoke_4;
  v41 = &unk_1E3BEAE90;
  v47 = *(_DWORD *)(a1 + 96);
  v44 = v12;
  v45 = v11;
  if (v11)
  {
    v13 = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v46 = *(_QWORD *)(a1 + 88);
  v42 = *(id *)(a1 + 32);
  v38 = *(_OWORD *)(a1 + 40);
  v15 = (id)v38;
  v43 = v38;
  v16 = v39;
  v17 = *(_QWORD ***)(v3 + 576);
  v18 = *(std::__shared_weak_count **)(v3 + 584);
  v52 = v17;
  v53 = v18;
  if (v18)
  {
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  if (v17)
  {
    *(_QWORD *)buf = v8;
    *(_QWORD *)&buf[8] = v7;
    if (v7)
    {
      v21 = (unint64_t *)&v7->__shared_owners_;
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
    }
    AVVCRecordingEngineMap::insertEngine(v17, v6, (uint64_t *)buf);
    if (v7)
    {
      v23 = (unint64_t *)&v7->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  else
  {
    if (kAVVCScope)
    {
      v25 = *(id *)kAVVCScope;
      if (!v25)
        goto LABEL_31;
    }
    else
    {
      v25 = MEMORY[0x1E0C81028];
      v26 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "ControllerImpl.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 4030;
      _os_log_impl(&dword_19B733000, v25, OS_LOG_TYPE_ERROR, "%25s:%-5d Engine Map does not exist", buf, 0x12u);
    }

  }
LABEL_31:
  v40((uint64_t)v16);
  v27 = v53;
  if (v53)
  {
    v28 = (unint64_t *)&v53->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }

  if (v7)
  {
    v30 = (unint64_t *)&v7->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v32 = v51;
  if (v51)
  {
    v33 = (unint64_t *)&v51->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }

  v35 = v45;
  if (v45)
  {
    v36 = (unint64_t *)&v45->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
}

void sub_19B7E73A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, ...)
{
  void *v11;
  uint64_t v12;
  uint64_t v14;
  va_list va;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v14 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v12 - 80);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v12 - 96);

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v12 - 112);
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl36_createRecordingEngineWithParametersENSt3__110shared_ptrIS_EEP17AVVoiceControllerN19AVVCRecordingEngine10EngineTypeEP8NSStringlU13block_pointerFvNS1_IS5_EEE_block_invoke_4(uint64_t a1)
{
  id v2;
  id v3;
  NSObject *v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  __CFString *v14;
  __CFString *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  uint8_t buf[4];
  const char *v33;
  __int16 v34;
  int v35;
  __int16 v36;
  const char *v37;
  __int16 v38;
  __CFString *v39;
  __int16 v40;
  void *v41;
  __int16 v42;
  uint64_t v43;
  __int16 v44;
  uint64_t v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  if (!kAVVCScope)
  {
    v2 = (id)MEMORY[0x1E0C81028];
    v3 = MEMORY[0x1E0C81028];
LABEL_5:
    v4 = v2;
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
LABEL_24:

      goto LABEL_25;
    }
    v5 = *(unsigned int *)(a1 + 80);
    if (v5 > 4)
      v6 = "ILLEGAL";
    else
      v6 = off_1E3BEC7A8[v5];
    v7 = *(_QWORD *)(a1 + 56);
    v8 = *(std::__shared_weak_count **)(a1 + 64);
    v30 = v7;
    v31 = v8;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      if (v7)
      {
        v11 = (void *)MEMORY[0x1E0CB3940];
        v12 = *(_QWORD *)(v7 + 272);
        v13 = *p_shared_owners + 1;
LABEL_16:
        objc_msgSend(v11, "stringWithFormat:", CFSTR("(%p) streamID: %d, use_count:%ld"), v7, v12, v13);
        v14 = (__CFString *)objc_claimAutoreleasedReturnValue();
        goto LABEL_18;
      }
    }
    else if (v7)
    {
      v13 = 0;
      v11 = (void *)MEMORY[0x1E0CB3940];
      v12 = *(_QWORD *)(v7 + 272);
      goto LABEL_16;
    }
    v14 = CFSTR("(0x0) use_count:0");
LABEL_18:
    v15 = v14;
    Get4CCFromInt(*(_DWORD *)(a1 + 72));
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = *(_QWORD *)(a1 + 32);
    v18 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
    *(_DWORD *)buf = 136316674;
    v33 = "ControllerImpl.mm";
    v34 = 1024;
    v35 = 3847;
    v36 = 2080;
    v37 = v6;
    v38 = 2112;
    v39 = v15;
    v40 = 2112;
    v41 = v16;
    v42 = 2112;
    v43 = v17;
    v44 = 2048;
    v45 = v18;
    _os_log_impl(&dword_19B733000, v4, OS_LOG_TYPE_DEFAULT, "%25s:%-5d setContext: Created new (%s) engine[%@] for activation mode(%@) and deviceUID(%@) with streamHandle(%lu)", buf, 0x44u);

    if (v8)
    {
      v19 = (unint64_t *)&v8->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }

    goto LABEL_24;
  }
  v2 = *(id *)kAVVCScope;
  if (v2)
    goto LABEL_5;
LABEL_25:
  v21 = *(_QWORD *)(a1 + 40);
  if (v21)
  {
    v22 = *(std::__shared_weak_count **)(a1 + 64);
    v28 = *(_QWORD *)(a1 + 56);
    v29 = v22;
    if (v22)
    {
      v23 = (unint64_t *)&v22->__shared_owners_;
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
    }
    (*(void (**)(uint64_t, uint64_t *))(v21 + 16))(v21, &v28);
    v25 = v29;
    if (v29)
    {
      v26 = (unint64_t *)&v29->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
  }
}

void sub_19B7E76A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)va);

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl32_configureEngineCompletionBlocksEP17AVVoiceControllerNSt3__110shared_ptrI19AVVCRecordingEngineEE_block_invoke(uint64_t a1, uint64_t a2, void *a3, int a4, int a5)
{
  id v9;
  id WeakRetained;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  id *v14;
  id v15;
  id v16;
  int v17;
  NSObject *v18;
  NSObject *v19;
  id v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  id v23;
  id v24;
  id v25;
  int v26;
  NSObject *v27;
  id v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  uint8_t buf[4];
  const char *v32;
  __int16 v33;
  int v34;
  __int16 v35;
  id v36;
  __int16 v37;
  uint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v9 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v30 = 0;
  v11 = *(std::__shared_weak_count **)(a1 + 48);
  if (!v11)
  {
    v12 = 0;
    goto LABEL_11;
  }
  v12 = std::__shared_weak_count::lock(v11);
  v30 = v12;
  if (!v12)
  {
LABEL_11:
    v13 = 0;
    goto LABEL_12;
  }
  v13 = *(_QWORD *)(a1 + 40);
  v29 = v13;
  if (!WeakRetained || !v13)
  {
LABEL_12:
    if (kAVVCScope)
    {
      v19 = *(id *)kAVVCScope;
      if (!v19)
      {
        if (!v12)
          goto LABEL_24;
        goto LABEL_20;
      }
    }
    else
    {
      v19 = MEMORY[0x1E0C81028];
      v20 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315906;
      v32 = "ControllerImpl.mm";
      v33 = 1024;
      v34 = 3869;
      v35 = 2048;
      v36 = WeakRetained;
      v37 = 2048;
      v38 = v13;
      _os_log_impl(&dword_19B733000, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d nil object encountered (avvc: %p, impl: %p). Bailing", buf, 0x26u);
    }
LABEL_19:

    v12 = v30;
    if (!v30)
      goto LABEL_24;
    goto LABEL_20;
  }
  v14 = (id *)(v13 + 168);
  v15 = objc_loadWeakRetained((id *)(v13 + 168));

  if (!v15)
    goto LABEL_20;
  v16 = objc_loadWeakRetained(v14);
  v17 = objc_opt_respondsToSelector() & a4;

  if (v17 == 1)
  {
    if (kAVVCScope)
    {
      v18 = *(id *)kAVVCScope;
      if (!v18)
      {
LABEL_29:
        v24 = objc_loadWeakRetained(v14);
        objc_msgSend(v24, "voiceControllerLPCMAudioCallback:forStream:buffer:", WeakRetained, a2, v9, v29);

        goto LABEL_30;
      }
    }
    else
    {
      v18 = MEMORY[0x1E0C81028];
      v23 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315394;
      v32 = "ControllerImpl.mm";
      v33 = 1024;
      v34 = 3873;
      _os_log_impl(&dword_19B733000, v18, OS_LOG_TYPE_DEBUG, "%25s:%-5d calling (v2) voiceControllerLPCMAudioCallback:forStream:buffer:", buf, 0x12u);
    }

    goto LABEL_29;
  }
LABEL_30:
  v25 = objc_loadWeakRetained(v14);
  v26 = objc_opt_respondsToSelector();

  if ((v26 & a5) != 0)
  {
    if (kAVVCScope)
    {
      v27 = *(id *)kAVVCScope;
      if (!v27)
      {
LABEL_38:
        v19 = objc_loadWeakRetained(v14);
        -[NSObject voiceControllerAudioCallback:forStream:buffer:](v19, "voiceControllerAudioCallback:forStream:buffer:", WeakRetained, a2, v9);
        goto LABEL_19;
      }
    }
    else
    {
      v27 = MEMORY[0x1E0C81028];
      v28 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315394;
      v32 = "ControllerImpl.mm";
      v33 = 1024;
      v34 = 3877;
      _os_log_impl(&dword_19B733000, v27, OS_LOG_TYPE_DEBUG, "%25s:%-5d calling (v2) voiceControllerAudioCallback:forStream:buffer:", buf, 0x12u);
    }

    goto LABEL_38;
  }
LABEL_20:
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v22 = __ldaxr(p_shared_owners);
  while (__stlxr(v22 - 1, p_shared_owners));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
LABEL_24:

}

void sub_19B7E7A44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;
  void *v11;

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl32_configureEngineCompletionBlocksEP17AVVoiceControllerNSt3__110shared_ptrI19AVVCRecordingEngineEE_block_invoke_238(uint64_t a1)
{
  id *v2;
  id WeakRetained;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  AVVCRecordingEngine *v9;
  void *v10;
  int v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  NSObject *v17;
  id v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  _QWORD v21[4];
  id v22[2];
  int v23;
  AVVCRecordingEngine *v24[2];
  uint64_t v25;
  std::__shared_weak_count *v26;
  uint8_t buf[4];
  _DWORD v28[11];

  *(_QWORD *)&v28[9] = *MEMORY[0x1E0C80C00];
  v2 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v25 = 0;
  v26 = 0;
  v4 = *(std::__shared_weak_count **)(a1 + 48);
  if (!v4)
  {
    v5 = 0;
    goto LABEL_15;
  }
  v5 = std::__shared_weak_count::lock(v4);
  v26 = v5;
  if (!v5)
  {
LABEL_15:
    v6 = 0;
    goto LABEL_16;
  }
  v6 = *(_QWORD *)(a1 + 40);
  v25 = v6;
  if (WeakRetained && v6)
  {
    v7 = (void *)MEMORY[0x1A1AC6084]();
    v8 = *(_QWORD *)(a1 + 56);
    v9 = *(AVVCRecordingEngine **)(a1 + 64);
    v10 = *(void **)(v8 + 272);
    v11 = *(_DWORD *)(v8 + 232);
    v24[0] = (AVVCRecordingEngine *)v8;
    v24[1] = v9;
    if (v9)
    {
      v12 = (unint64_t *)((char *)v9 + 8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    ControllerImpl::startKeepAliveQueue(*(_QWORD *)(v6 + 8), *(std::__shared_weak_count **)(v6 + 16), v24);
    if (v9)
    {
      v14 = (unint64_t *)((char *)v9 + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        (*(void (**)(AVVCRecordingEngine *))(*(_QWORD *)v9 + 16))(v9);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v9);
      }
    }
    v16 = v25;
    v21[0] = MEMORY[0x1E0C809B0];
    v21[1] = 3221225472;
    v21[2] = ___ZN14ControllerImpl32_configureEngineCompletionBlocksEP17AVVoiceControllerNSt3__110shared_ptrI19AVVCRecordingEngineEE_block_invoke_240;
    v21[3] = &unk_1E3BEC0F0;
    objc_copyWeak(v22, v2);
    v22[1] = v10;
    v23 = v11;
    ControllerImpl::safeNotify(v16, (uint64_t)"beganRecording", v21);
    objc_destroyWeak(v22);
    objc_autoreleasePoolPop(v7);
    *(_DWORD *)buf = 4115;
    LOBYTE(v28[0]) = 0;
    memset(&v28[1], 0, 32);
    kdebug_trace();
    TraceWrapper::~TraceWrapper((TraceWrapper *)buf);
    v5 = v26;
    goto LABEL_23;
  }
LABEL_16:
  if (kAVVCScope)
  {
    v17 = *(id *)kAVVCScope;
    if (!v17)
      goto LABEL_23;
  }
  else
  {
    v17 = MEMORY[0x1E0C81028];
    v18 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)v28 = "ControllerImpl.mm";
    LOWORD(v28[2]) = 1024;
    *(_DWORD *)((char *)&v28[2] + 2) = 3885;
    HIWORD(v28[3]) = 2048;
    *(_QWORD *)&v28[4] = WeakRetained;
    LOWORD(v28[6]) = 2048;
    *(_QWORD *)((char *)&v28[6] + 2) = v6;
    _os_log_impl(&dword_19B733000, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d nil object encountered (avvc: %p, impl: %p). Bailing", buf, 0x26u);
  }

LABEL_23:
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }

}

void sub_19B7E7D38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  void *v11;
  va_list va;

  va_start(va, a11);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)va);

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl32_configureEngineCompletionBlocksEP17AVVoiceControllerNSt3__110shared_ptrI19AVVCRecordingEngineEE_block_invoke_242(uint64_t a1)
{
  id *v2;
  id WeakRetained;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  int v10;
  NSObject *v11;
  id v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  _QWORD v15[4];
  id v16[2];
  int v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  uint8_t buf[4];
  _DWORD v21[11];

  *(_QWORD *)&v21[9] = *MEMORY[0x1E0C80C00];
  v2 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v18 = 0;
  v19 = 0;
  v4 = *(std::__shared_weak_count **)(a1 + 48);
  if (!v4)
  {
    v5 = 0;
    goto LABEL_7;
  }
  v5 = std::__shared_weak_count::lock(v4);
  v19 = v5;
  if (!v5)
  {
LABEL_7:
    v6 = 0;
    goto LABEL_8;
  }
  v6 = *(_QWORD *)(a1 + 40);
  v18 = v6;
  if (!WeakRetained || !v6)
  {
LABEL_8:
    if (kAVVCScope)
    {
      v11 = *(id *)kAVVCScope;
      if (!v11)
        goto LABEL_15;
    }
    else
    {
      v11 = MEMORY[0x1E0C81028];
      v12 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)v21 = "ControllerImpl.mm";
      LOWORD(v21[2]) = 1024;
      *(_DWORD *)((char *)&v21[2] + 2) = 3911;
      HIWORD(v21[3]) = 2048;
      *(_QWORD *)&v21[4] = WeakRetained;
      LOWORD(v21[6]) = 2048;
      *(_QWORD *)((char *)&v21[6] + 2) = v6;
      _os_log_impl(&dword_19B733000, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d nil object encountered (avvc: %p, impl: %p). Bailing", buf, 0x26u);
    }

LABEL_15:
    if (!v5)
      goto LABEL_20;
    goto LABEL_16;
  }
  v7 = (void *)MEMORY[0x1A1AC6084]();
  v8 = *(_QWORD *)(a1 + 56);
  v9 = *(void **)(v8 + 272);
  v10 = *(_DWORD *)(v8 + 232);
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 3221225472;
  v15[2] = ___ZN14ControllerImpl32_configureEngineCompletionBlocksEP17AVVoiceControllerNSt3__110shared_ptrI19AVVCRecordingEngineEE_block_invoke_244;
  v15[3] = &unk_1E3BEC0F0;
  objc_copyWeak(v16, v2);
  v16[1] = v9;
  v17 = v10;
  ControllerImpl::safeNotify(v6, (uint64_t)"finishedRecording", v15);
  objc_destroyWeak(v16);
  objc_autoreleasePoolPop(v7);
  *(_DWORD *)buf = 4116;
  LOBYTE(v21[0]) = 0;
  memset(&v21[1], 0, 32);
  kdebug_trace();
  TraceWrapper::~TraceWrapper((TraceWrapper *)buf);
LABEL_16:
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_20:

}

void sub_19B7E7FC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  va_list va;

  va_start(va, a9);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)va);

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl32_configureEngineCompletionBlocksEP17AVVoiceControllerNSt3__110shared_ptrI19AVVCRecordingEngineEE_block_invoke_245(uint64_t a1, int a2)
{
  id WeakRetained;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  NSObject *v8;
  id v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD v12[4];
  id v13;
  int v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  int v20;
  __int16 v21;
  id v22;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v15 = 0;
  v16 = 0;
  v5 = *(std::__shared_weak_count **)(a1 + 48);
  if (!v5)
  {
    v6 = 0;
    goto LABEL_7;
  }
  v6 = std::__shared_weak_count::lock(v5);
  v16 = v6;
  if (!v6)
  {
LABEL_7:
    v7 = 0;
    goto LABEL_8;
  }
  v7 = *(_QWORD *)(a1 + 40);
  v15 = v7;
  if (!WeakRetained || !v7)
  {
LABEL_8:
    if (kAVVCScope)
    {
      v8 = *(id *)kAVVCScope;
      if (!v8)
        goto LABEL_15;
    }
    else
    {
      v8 = MEMORY[0x1E0C81028];
      v9 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315906;
      v18 = "ControllerImpl.mm";
      v19 = 1024;
      v20 = 3937;
      v21 = 2048;
      v22 = WeakRetained;
      v23 = 2048;
      v24 = v7;
      _os_log_impl(&dword_19B733000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d nil object encountered (avvc: %p, impl: %p). Bailing", buf, 0x26u);
    }

LABEL_15:
    if (!v6)
      goto LABEL_20;
    goto LABEL_16;
  }
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = ___ZN14ControllerImpl32_configureEngineCompletionBlocksEP17AVVoiceControllerNSt3__110shared_ptrI19AVVCRecordingEngineEE_block_invoke_247;
  v12[3] = &unk_1E3BEC118;
  v13 = WeakRetained;
  v14 = a2;
  ControllerImpl::safeNotify(v7, (uint64_t)"encodeError", v12);

LABEL_16:
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_20:

}

void sub_19B7E81CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl32_configureEngineCompletionBlocksEP17AVVoiceControllerNSt3__110shared_ptrI19AVVCRecordingEngineEE_block_invoke_248(uint64_t a1, unint64_t a2, int a3)
{
  id WeakRetained;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  id v10;
  SpeexEndpointer *v11;
  NSObject *v12;
  id v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  int v19;
  __int16 v20;
  id v21;
  __int16 v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v7 = *(std::__shared_weak_count **)(a1 + 48);
  if (!v7)
  {
    v8 = 0;
    goto LABEL_9;
  }
  v8 = std::__shared_weak_count::lock(v7);
  if (!v8)
  {
LABEL_9:
    v9 = 0;
    goto LABEL_10;
  }
  v9 = *(_QWORD *)(a1 + 40);
  if (!WeakRetained || !v9)
  {
LABEL_10:
    if (kAVVCScope)
    {
      v12 = *(id *)kAVVCScope;
      if (!v12)
        goto LABEL_17;
    }
    else
    {
      v12 = MEMORY[0x1E0C81028];
      v13 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315906;
      v17 = "ControllerImpl.mm";
      v18 = 1024;
      v19 = 3947;
      v20 = 2048;
      v21 = WeakRetained;
      v22 = 2048;
      v23 = v9;
      _os_log_impl(&dword_19B733000, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d nil object encountered (avvc: %p, impl: %p). Bailing", buf, 0x26u);
    }

LABEL_17:
    if (!v8)
      goto LABEL_22;
    goto LABEL_18;
  }
  v10 = objc_loadWeakRetained((id *)(v9 + 416));

  if (a3 == 1936745848 && !v10)
  {
    v11 = objc_alloc_init(SpeexEndpointer);
    ControllerImpl::setEndpointerDelegate(v9, WeakRetained, v11, a2);

  }
LABEL_18:
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
LABEL_22:

}

void sub_19B7E83C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl32_configureEngineCompletionBlocksEP17AVVoiceControllerNSt3__110shared_ptrI19AVVCRecordingEngineEE_block_invoke_251(uint64_t a1, unint64_t a2)
{
  id WeakRetained;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  ControllerImpl *v7;
  NSObject *v8;
  id v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  int v15;
  __int16 v16;
  id v17;
  __int16 v18;
  ControllerImpl *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v5 = *(std::__shared_weak_count **)(a1 + 48);
  if (!v5)
  {
    v6 = 0;
    goto LABEL_7;
  }
  v6 = std::__shared_weak_count::lock(v5);
  if (!v6)
  {
LABEL_7:
    v7 = 0;
    goto LABEL_8;
  }
  v7 = *(ControllerImpl **)(a1 + 40);
  if (!WeakRetained || !v7)
  {
LABEL_8:
    if (kAVVCScope)
    {
      v8 = *(id *)kAVVCScope;
      if (!v8)
        goto LABEL_15;
    }
    else
    {
      v8 = MEMORY[0x1E0C81028];
      v9 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315906;
      v13 = "ControllerImpl.mm";
      v14 = 1024;
      v15 = 3955;
      v16 = 2048;
      v17 = WeakRetained;
      v18 = 2048;
      v19 = v7;
      _os_log_impl(&dword_19B733000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d nil object encountered (avvc: %p, impl: %p). Bailing", buf, 0x26u);
    }

LABEL_15:
    if (!v6)
      goto LABEL_20;
    goto LABEL_16;
  }
  ControllerImpl::setupEndpointer(v7, a2);
LABEL_16:
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_20:

}

void sub_19B7E8574(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a9);

  _Unwind_Resume(a1);
}

BOOL ___ZN14ControllerImpl32_configureEngineCompletionBlocksEP17AVVoiceControllerNSt3__110shared_ptrI19AVVCRecordingEngineEE_block_invoke_252(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  id WeakRetained;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  id v14;
  NSObject *v15;
  NSObject *v16;
  id v17;
  BOOL v18;
  id v19;
  id v20;
  int v21;
  NSObject *v22;
  NSObject *v23;
  id v24;
  _BOOL8 v25;
  NSObject *v26;
  NSObject *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  id v31;
  NSObject *v32;
  id v33;
  _BYTE location[12];
  __int16 v35;
  int v36;
  _BYTE buf[38];
  double v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v11 = *(std::__shared_weak_count **)(a1 + 48);
  if (!v11)
  {
    v12 = 0;
    goto LABEL_23;
  }
  v12 = std::__shared_weak_count::lock(v11);
  if (!v12)
  {
LABEL_23:
    v13 = 0;
    goto LABEL_24;
  }
  v13 = *(_QWORD *)(a1 + 40);
  if (!WeakRetained || !v13)
  {
LABEL_24:
    if (kAVVCScope)
    {
      v23 = *(id *)kAVVCScope;
      if (!v23)
        goto LABEL_31;
    }
    else
    {
      v23 = MEMORY[0x1E0C81028];
      v24 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "ControllerImpl.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 3961;
      *(_WORD *)&buf[18] = 2048;
      *(_QWORD *)&buf[20] = WeakRetained;
      *(_WORD *)&buf[28] = 2048;
      *(_QWORD *)&buf[30] = v13;
      _os_log_impl(&dword_19B733000, v23, OS_LOG_TYPE_ERROR, "%25s:%-5d nil object encountered (avvc: %p, impl: %p). Bailing", buf, 0x26u);
    }

LABEL_31:
    v25 = 0;
    if (!v12)
      goto LABEL_50;
    goto LABEL_46;
  }
  v14 = WeakRetained;
  if (kAVVCScope)
  {
    if ((*(_BYTE *)(kAVVCScope + 12) & 0x20) != 0)
    {
      v15 = *(id *)kAVVCScope;
      if (v15)
      {
        v16 = v15;
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "ControllerImpl.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2848;
          *(_WORD *)&buf[18] = 2048;
          *(_QWORD *)&buf[20] = a2;
          _os_log_impl(&dword_19B733000, v16, OS_LOG_TYPE_DEBUG, "%25s:%-5d checkForEndpoint entered: inBuffer %p", buf, 0x1Cu);
        }

      }
    }
  }
  v17 = objc_loadWeakRetained((id *)(v13 + 416));
  v18 = v17 == 0;

  if (v18)
    goto LABEL_38;
  if (*(_BYTE *)(v13 + 424))
  {
    v19 = objc_loadWeakRetained((id *)(v13 + 416));
    objc_msgSend(v19, "getStatus:count:", a3, a4, v13, v12);

  }
  v20 = objc_loadWeakRetained((id *)(v13 + 416));
  v21 = objc_msgSend(v20, "getStatus:", a2);

  if (v21 == 1)
  {
    if (!*(_BYTE *)(v13 + 425) || *(_DWORD *)(v13 + 428) == 2)
    {
      *(_BYTE *)(v13 + 425) = 1;
      objc_initWeak((id *)location, v14);
      *(_QWORD *)buf = MEMORY[0x1E0C809B0];
      *(_QWORD *)&buf[8] = 3221225472;
      *(_QWORD *)&buf[16] = ___ZN14ControllerImpl16checkForEndpointEP17AVVoiceControllerP16AudioQueueBufferPfjd_block_invoke;
      *(_QWORD *)&buf[24] = &unk_1E3BECC30;
      objc_copyWeak((id *)&buf[32], (id *)location);
      ControllerImpl::safeNotify(v13, (uint64_t)"startpointDetected", buf);
      objc_destroyWeak((id *)&buf[32]);
      objc_destroyWeak((id *)location);
    }
    goto LABEL_38;
  }
  if (v21 == 2)
  {
    if (*(_DWORD *)(v13 + 428) == 2)
    {
      objc_initWeak((id *)location, v14);
      *(_QWORD *)buf = MEMORY[0x1E0C809B0];
      *(_QWORD *)&buf[8] = 3221225472;
      *(_QWORD *)&buf[16] = ___ZN14ControllerImpl16checkForEndpointEP17AVVoiceControllerP16AudioQueueBufferPfjd_block_invoke_200;
      *(_QWORD *)&buf[24] = &unk_1E3BEC028;
      objc_copyWeak((id *)&buf[32], (id *)location);
      v38 = a5;
      ControllerImpl::safeNotify(v13, (uint64_t)"interspeechPointDetected", buf);
      objc_destroyWeak((id *)&buf[32]);
      objc_destroyWeak((id *)location);
    }
    goto LABEL_38;
  }
  if (v21 != 3 || *(_BYTE *)(v13 + 426))
  {
LABEL_38:
    v25 = 0;
    goto LABEL_39;
  }
  if (*(_BYTE *)(v13 + 425))
    goto LABEL_55;
  if (kAVVCScope)
  {
    v22 = *(id *)kAVVCScope;
    if (!v22)
      goto LABEL_55;
  }
  else
  {
    v22 = MEMORY[0x1E0C81028];
    v31 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "ControllerImpl.mm";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 2880;
    _os_log_impl(&dword_19B733000, v22, OS_LOG_TYPE_DEFAULT, "%25s:%-5d #### AVVoiceController: Detected end point but NO START POINT ####", buf, 0x12u);
  }

LABEL_55:
  *(_BYTE *)(v13 + 426) = 1;
  v25 = *(_BYTE *)(v13 + 427) != 0;
  if (*(_BYTE *)(v13 + 427))
  {
    if (kAVVCScope)
    {
      v32 = *(id *)kAVVCScope;
      if (!v32)
        goto LABEL_63;
    }
    else
    {
      v32 = MEMORY[0x1E0C81028];
      v33 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "ControllerImpl.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2884;
      _os_log_impl(&dword_19B733000, v32, OS_LOG_TYPE_DEBUG, "%25s:%-5d checkForEndpoint: auto-stopping record", buf, 0x12u);
    }

  }
LABEL_63:
  objc_initWeak((id *)location, v14);
  *(_QWORD *)buf = MEMORY[0x1E0C809B0];
  *(_QWORD *)&buf[8] = 3221225472;
  *(_QWORD *)&buf[16] = ___ZN14ControllerImpl16checkForEndpointEP17AVVoiceControllerP16AudioQueueBufferPfjd_block_invoke_202;
  *(_QWORD *)&buf[24] = &unk_1E3BEC028;
  objc_copyWeak((id *)&buf[32], (id *)location);
  v38 = a5;
  ControllerImpl::safeNotify(v13, (uint64_t)"endpointDetected", buf);
  objc_destroyWeak((id *)&buf[32]);
  objc_destroyWeak((id *)location);
LABEL_39:
  if (kAVVCScope)
  {
    if ((*(_BYTE *)(kAVVCScope + 12) & 0x20) != 0)
    {
      v26 = *(id *)kAVVCScope;
      if (v26)
      {
        v27 = v26;
        if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)location = 136315394;
          *(_QWORD *)&location[4] = "ControllerImpl.mm";
          v35 = 1024;
          v36 = 2899;
          _os_log_impl(&dword_19B733000, v27, OS_LOG_TYPE_DEBUG, "%25s:%-5d checkForEndpoint exiting", location, 0x12u);
        }

      }
    }
  }

LABEL_46:
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v29 = __ldaxr(p_shared_owners);
  while (__stlxr(v29 - 1, p_shared_owners));
  if (!v29)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
LABEL_50:

  return v25;
}

void sub_19B7E8B88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id location)
{
  void *v11;
  id *v12;

  objc_destroyWeak(v12);
  objc_destroyWeak(&location);

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19B7E8E00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  VCLocker::~VCLocker((VCLocker *)va1);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)va);

  _Unwind_Resume(a1);
}

uint64_t ___ZN14ControllerImpl32_configureEngineCompletionBlocksEP17AVVoiceControllerNSt3__110shared_ptrI19AVVCRecordingEngineEE_block_invoke_256(uint64_t a1, uint64_t a2)
{
  id WeakRetained;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  NSObject *v13;
  id v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v18;
  uint8_t buf[4];
  const char *v20;
  __int16 v21;
  int v22;
  __int16 v23;
  id v24;
  __int16 v25;
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v5 = *(std::__shared_weak_count **)(a1 + 48);
  if (!v5)
  {
    v7 = 0;
    goto LABEL_14;
  }
  v6 = std::__shared_weak_count::lock(v5);
  v7 = v6;
  v18 = v6;
  if (!v6)
  {
LABEL_14:
    v8 = 0;
    goto LABEL_15;
  }
  v8 = *(_QWORD *)(a1 + 40);
  if (!WeakRetained || !v8)
  {
LABEL_15:
    if (kAVVCScope)
    {
      v13 = *(id *)kAVVCScope;
      if (!v13)
        goto LABEL_22;
    }
    else
    {
      v13 = MEMORY[0x1E0C81028];
      v14 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315906;
      v20 = "ControllerImpl.mm";
      v21 = 1024;
      v22 = 3973;
      v23 = 2048;
      v24 = WeakRetained;
      v25 = 2048;
      v26 = v8;
      _os_log_impl(&dword_19B733000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d nil object encountered (avvc: %p, impl: %p). Bailing", buf, 0x26u);
    }

LABEL_22:
    v12 = 0;
    if (!v7)
      goto LABEL_27;
    goto LABEL_23;
  }
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  RecordLock::RecordLock(buf, v8, v6);
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  v12 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 56) + 112))(*(_QWORD *)(a1 + 56), a2);
  VCLocker::~VCLocker((VCLocker *)buf);
  v7 = v18;
  if (v18)
  {
LABEL_23:
    v15 = (unint64_t *)&v7->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
LABEL_27:

  return v12;
}

void sub_19B7E903C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  VCLocker::~VCLocker((VCLocker *)va1);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)va);

  _Unwind_Resume(a1);
}

uint64_t ___ZN14ControllerImpl32_configureEngineCompletionBlocksEP17AVVoiceControllerNSt3__110shared_ptrI19AVVCRecordingEngineEE_block_invoke_257(uint64_t a1)
{
  id WeakRetained;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  NSObject *v11;
  id v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v16;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  int v20;
  __int16 v21;
  id v22;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (!v3)
  {
    v5 = 0;
    goto LABEL_14;
  }
  v4 = std::__shared_weak_count::lock(v3);
  v5 = v4;
  v16 = v4;
  if (!v4)
  {
LABEL_14:
    v6 = 0;
    goto LABEL_15;
  }
  v6 = *(_QWORD *)(a1 + 40);
  if (!WeakRetained || !v6)
  {
LABEL_15:
    if (kAVVCScope)
    {
      v11 = *(id *)kAVVCScope;
      if (!v11)
        goto LABEL_22;
    }
    else
    {
      v11 = MEMORY[0x1E0C81028];
      v12 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315906;
      v18 = "ControllerImpl.mm";
      v19 = 1024;
      v20 = 3980;
      v21 = 2048;
      v22 = WeakRetained;
      v23 = 2048;
      v24 = v6;
      _os_log_impl(&dword_19B733000, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d nil object encountered (avvc: %p, impl: %p). Bailing", buf, 0x26u);
    }

LABEL_22:
    v10 = 0;
    if (!v5)
      goto LABEL_27;
    goto LABEL_23;
  }
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  RecordLock::RecordLock(buf, v6, v4);
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 80))(*(_QWORD *)(a1 + 56));
  VCLocker::~VCLocker((VCLocker *)buf);
  v5 = v16;
  if (v16)
  {
LABEL_23:
    v13 = (unint64_t *)&v5->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
LABEL_27:

  return v10;
}

void sub_19B7E9270(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  VCLocker::~VCLocker((VCLocker *)va1);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)va);

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl32_configureEngineCompletionBlocksEP17AVVoiceControllerNSt3__110shared_ptrI19AVVCRecordingEngineEE_block_invoke_258(uint64_t a1, void *a2)
{
  id *v4;
  id WeakRetained;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  NSObject *v9;
  id v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _QWORD v13[4];
  id v14[2];
  uint64_t v15;
  std::__shared_weak_count *v16;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  int v20;
  __int16 v21;
  id v22;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v4 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v15 = 0;
  v16 = 0;
  v6 = *(std::__shared_weak_count **)(a1 + 48);
  if (!v6)
  {
    v7 = 0;
    goto LABEL_7;
  }
  v7 = std::__shared_weak_count::lock(v6);
  v16 = v7;
  if (!v7)
  {
LABEL_7:
    v8 = 0;
    goto LABEL_8;
  }
  v8 = *(_QWORD *)(a1 + 40);
  v15 = v8;
  if (!WeakRetained || !v8)
  {
LABEL_8:
    if (kAVVCScope)
    {
      v9 = *(id *)kAVVCScope;
      if (!v9)
        goto LABEL_15;
    }
    else
    {
      v9 = MEMORY[0x1E0C81028];
      v10 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315906;
      v18 = "ControllerImpl.mm";
      v19 = 1024;
      v20 = 3987;
      v21 = 2048;
      v22 = WeakRetained;
      v23 = 2048;
      v24 = v8;
      _os_log_impl(&dword_19B733000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d nil object encountered (avvc: %p, impl: %p). Bailing", buf, 0x26u);
    }

LABEL_15:
    if (!v7)
      goto LABEL_20;
    goto LABEL_16;
  }
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 3221225472;
  v13[2] = ___ZN14ControllerImpl32_configureEngineCompletionBlocksEP17AVVoiceControllerNSt3__110shared_ptrI19AVVCRecordingEngineEE_block_invoke_260;
  v13[3] = &unk_1E3BEC028;
  objc_copyWeak(v14, v4);
  v14[1] = a2;
  ControllerImpl::safeNotify(v8, (uint64_t)"streamInvalidated", v13);
  objc_destroyWeak(v14);
LABEL_16:
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
LABEL_20:

}

void sub_19B7E948C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  void *v15;
  id *v16;

  objc_destroyWeak(v16);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a15);

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl32_configureEngineCompletionBlocksEP17AVVoiceControllerNSt3__110shared_ptrI19AVVCRecordingEngineEE_block_invoke_262(uint64_t a1, int a2)
{
  id *v4;
  id WeakRetained;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  NSObject *v9;
  id v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _QWORD v13[4];
  id v14;
  int v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  int v21;
  __int16 v22;
  id v23;
  __int16 v24;
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v4 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v16 = 0;
  v17 = 0;
  v6 = *(std::__shared_weak_count **)(a1 + 48);
  if (!v6)
  {
    v7 = 0;
    goto LABEL_7;
  }
  v7 = std::__shared_weak_count::lock(v6);
  v17 = v7;
  if (!v7)
  {
LABEL_7:
    v8 = 0;
    goto LABEL_8;
  }
  v8 = *(_QWORD *)(a1 + 40);
  v16 = v8;
  if (!WeakRetained || !v8)
  {
LABEL_8:
    if (kAVVCScope)
    {
      v9 = *(id *)kAVVCScope;
      if (!v9)
        goto LABEL_15;
    }
    else
    {
      v9 = MEMORY[0x1E0C81028];
      v10 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315906;
      v19 = "ControllerImpl.mm";
      v20 = 1024;
      v21 = 3996;
      v22 = 2048;
      v23 = WeakRetained;
      v24 = 2048;
      v25 = v8;
      _os_log_impl(&dword_19B733000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d nil object encountered (avvc: %p, impl: %p). Bailing", buf, 0x26u);
    }

LABEL_15:
    if (!v7)
      goto LABEL_20;
    goto LABEL_16;
  }
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 3221225472;
  v13[2] = ___ZN14ControllerImpl32_configureEngineCompletionBlocksEP17AVVoiceControllerNSt3__110shared_ptrI19AVVCRecordingEngineEE_block_invoke_264;
  v13[3] = &unk_1E3BEC140;
  objc_copyWeak(&v14, v4);
  v15 = a2;
  ControllerImpl::safeNotify(v8, (uint64_t)"hardwareConfigChanged", v13);
  objc_destroyWeak(&v14);
LABEL_16:
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
LABEL_20:

}

void sub_19B7E9698(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  void *v15;
  id *v16;

  objc_destroyWeak(v16);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a15);

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl32_configureEngineCompletionBlocksEP17AVVoiceControllerNSt3__110shared_ptrI19AVVCRecordingEngineEE_block_invoke_265(uint64_t a1, char a2)
{
  id *v4;
  id WeakRetained;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  NSObject *v9;
  id v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _QWORD v13[4];
  id v14;
  char v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  int v21;
  __int16 v22;
  id v23;
  __int16 v24;
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v4 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v16 = 0;
  v17 = 0;
  v6 = *(std::__shared_weak_count **)(a1 + 48);
  if (!v6)
  {
    v7 = 0;
    goto LABEL_7;
  }
  v7 = std::__shared_weak_count::lock(v6);
  v17 = v7;
  if (!v7)
  {
LABEL_7:
    v8 = 0;
    goto LABEL_8;
  }
  v8 = *(_QWORD *)(a1 + 40);
  v16 = v8;
  if (!WeakRetained || !v8)
  {
LABEL_8:
    if (kAVVCScope)
    {
      v9 = *(id *)kAVVCScope;
      if (!v9)
        goto LABEL_15;
    }
    else
    {
      v9 = MEMORY[0x1E0C81028];
      v10 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315906;
      v19 = "ControllerImpl.mm";
      v20 = 1024;
      v21 = 4004;
      v22 = 2048;
      v23 = WeakRetained;
      v24 = 2048;
      v25 = v8;
      _os_log_impl(&dword_19B733000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d nil object encountered (avvc: %p, impl: %p). Bailing", buf, 0x26u);
    }

LABEL_15:
    if (!v7)
      goto LABEL_20;
    goto LABEL_16;
  }
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 3221225472;
  v13[2] = ___ZN14ControllerImpl32_configureEngineCompletionBlocksEP17AVVoiceControllerNSt3__110shared_ptrI19AVVCRecordingEngineEE_block_invoke_266;
  v13[3] = &unk_1E3BEC168;
  objc_copyWeak(&v14, v4);
  v15 = a2;
  ControllerImpl::safeNotify(v8, (uint64_t)"beginAudioSessionActivate", v13);
  objc_destroyWeak(&v14);
LABEL_16:
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
LABEL_20:

}

void sub_19B7E98A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  void *v15;
  id *v16;

  objc_destroyWeak(v16);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a15);

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl32_configureEngineCompletionBlocksEP17AVVoiceControllerNSt3__110shared_ptrI19AVVCRecordingEngineEE_block_invoke_268(uint64_t a1, char a2)
{
  id *v4;
  id WeakRetained;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  NSObject *v9;
  id v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _QWORD v13[4];
  id v14;
  char v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  int v21;
  __int16 v22;
  id v23;
  __int16 v24;
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v4 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v16 = 0;
  v17 = 0;
  v6 = *(std::__shared_weak_count **)(a1 + 48);
  if (!v6)
  {
    v7 = 0;
    goto LABEL_7;
  }
  v7 = std::__shared_weak_count::lock(v6);
  v17 = v7;
  if (!v7)
  {
LABEL_7:
    v8 = 0;
    goto LABEL_8;
  }
  v8 = *(_QWORD *)(a1 + 40);
  v16 = v8;
  if (!WeakRetained || !v8)
  {
LABEL_8:
    if (kAVVCScope)
    {
      v9 = *(id *)kAVVCScope;
      if (!v9)
        goto LABEL_15;
    }
    else
    {
      v9 = MEMORY[0x1E0C81028];
      v10 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315906;
      v19 = "ControllerImpl.mm";
      v20 = 1024;
      v21 = 4012;
      v22 = 2048;
      v23 = WeakRetained;
      v24 = 2048;
      v25 = v8;
      _os_log_impl(&dword_19B733000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d nil object encountered (avvc: %p, impl: %p). Bailing", buf, 0x26u);
    }

LABEL_15:
    if (!v7)
      goto LABEL_20;
    goto LABEL_16;
  }
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 3221225472;
  v13[2] = ___ZN14ControllerImpl32_configureEngineCompletionBlocksEP17AVVoiceControllerNSt3__110shared_ptrI19AVVCRecordingEngineEE_block_invoke_269;
  v13[3] = &unk_1E3BEC168;
  objc_copyWeak(&v14, v4);
  v15 = a2;
  ControllerImpl::safeNotify(v8, (uint64_t)"endAudioSessionActivate", v13);
  objc_destroyWeak(&v14);
LABEL_16:
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
LABEL_20:

}

void sub_19B7E9AB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  void *v15;
  id *v16;

  objc_destroyWeak(v16);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a15);

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl32_configureEngineCompletionBlocksEP17AVVoiceControllerNSt3__110shared_ptrI19AVVCRecordingEngineEE_block_invoke_269(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  NSObject *v4;
  id v5;
  int v6;
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v3 = WeakRetained;
  if (WeakRetained)
  {
    objc_msgSend(WeakRetained, "endAudioSessionActivate:", *(unsigned __int8 *)(a1 + 40));
  }
  else
  {
    if (kAVVCScope)
    {
      v4 = *(id *)kAVVCScope;
      if (!v4)
        goto LABEL_10;
    }
    else
    {
      v4 = MEMORY[0x1E0C81028];
      v5 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v6 = 136315650;
      v7 = "ControllerImpl.mm";
      v8 = 1024;
      v9 = 4014;
      v10 = 2048;
      v11 = 0;
      _os_log_impl(&dword_19B733000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d nil object encountered (avvc: %p). Bailing", (uint8_t *)&v6, 0x1Cu);
    }

  }
LABEL_10:

}

void sub_19B7E9BE4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl32_configureEngineCompletionBlocksEP17AVVoiceControllerNSt3__110shared_ptrI19AVVCRecordingEngineEE_block_invoke_266(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  NSObject *v4;
  id v5;
  int v6;
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v3 = WeakRetained;
  if (WeakRetained)
  {
    objc_msgSend(WeakRetained, "beginAudioSessionActivate:", *(unsigned __int8 *)(a1 + 40));
  }
  else
  {
    if (kAVVCScope)
    {
      v4 = *(id *)kAVVCScope;
      if (!v4)
        goto LABEL_10;
    }
    else
    {
      v4 = MEMORY[0x1E0C81028];
      v5 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v6 = 136315650;
      v7 = "ControllerImpl.mm";
      v8 = 1024;
      v9 = 4006;
      v10 = 2048;
      v11 = 0;
      _os_log_impl(&dword_19B733000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d nil object encountered (avvc: %p). Bailing", (uint8_t *)&v6, 0x1Cu);
    }

  }
LABEL_10:

}

void sub_19B7E9D08(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl32_configureEngineCompletionBlocksEP17AVVoiceControllerNSt3__110shared_ptrI19AVVCRecordingEngineEE_block_invoke_264(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  NSObject *v4;
  id v5;
  int v6;
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v3 = WeakRetained;
  if (WeakRetained)
  {
    objc_msgSend(WeakRetained, "hardwareConfigChanged:", *(unsigned int *)(a1 + 40));
  }
  else
  {
    if (kAVVCScope)
    {
      v4 = *(id *)kAVVCScope;
      if (!v4)
        goto LABEL_10;
    }
    else
    {
      v4 = MEMORY[0x1E0C81028];
      v5 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v6 = 136315650;
      v7 = "ControllerImpl.mm";
      v8 = 1024;
      v9 = 3998;
      v10 = 2048;
      v11 = 0;
      _os_log_impl(&dword_19B733000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d nil object encountered (avvc: %p). Bailing", (uint8_t *)&v6, 0x1Cu);
    }

  }
LABEL_10:

}

void sub_19B7E9E2C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl32_configureEngineCompletionBlocksEP17AVVoiceControllerNSt3__110shared_ptrI19AVVCRecordingEngineEE_block_invoke_260(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  NSObject *v4;
  id v5;
  int v6;
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v3 = WeakRetained;
  if (WeakRetained)
  {
    objc_msgSend(WeakRetained, "notifyStreamInvalidated:", *(_QWORD *)(a1 + 40));
  }
  else
  {
    if (kAVVCScope)
    {
      v4 = *(id *)kAVVCScope;
      if (!v4)
        goto LABEL_10;
    }
    else
    {
      v4 = MEMORY[0x1E0C81028];
      v5 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v6 = 136315650;
      v7 = "ControllerImpl.mm";
      v8 = 1024;
      v9 = 3989;
      v10 = 2048;
      v11 = 0;
      _os_log_impl(&dword_19B733000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d nil object encountered (avvc: %p). Bailing", (uint8_t *)&v6, 0x1Cu);
    }

  }
LABEL_10:

}

void sub_19B7E9F50(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *__copy_helper_block_ea8_40c39_ZTSNSt3__18weak_ptrI14ControllerImplEE56c47_ZTSNSt3__110shared_ptrI19AVVCRecordingEngineEE(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = a2[6];
  result[5] = a2[5];
  result[6] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  v5 = a2[8];
  result[7] = a2[7];
  result[8] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return result;
}

void __destroy_helper_block_ea8_40c39_ZTSNSt3__18weak_ptrI14ControllerImplEE56c47_ZTSNSt3__110shared_ptrI19AVVCRecordingEngineEE(uint64_t a1)
{
  std::__shared_weak_count *v2;

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](a1 + 56);
  v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

uint64_t ___ZN14ControllerImpl32_configureEngineCompletionBlocksEP17AVVoiceControllerNSt3__110shared_ptrI19AVVCRecordingEngineEE_block_invoke_247(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "encodeError:", *(unsigned int *)(a1 + 40));
}

void ___ZN14ControllerImpl32_configureEngineCompletionBlocksEP17AVVoiceControllerNSt3__110shared_ptrI19AVVCRecordingEngineEE_block_invoke_244(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  NSObject *v4;
  id v5;
  int v6;
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v3 = WeakRetained;
  if (WeakRetained)
  {
    objc_msgSend(WeakRetained, "finishedRecording:status:", *(_QWORD *)(a1 + 40), *(unsigned int *)(a1 + 48));
  }
  else
  {
    if (kAVVCScope)
    {
      v4 = *(id *)kAVVCScope;
      if (!v4)
        goto LABEL_10;
    }
    else
    {
      v4 = MEMORY[0x1E0C81028];
      v5 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v6 = 136315650;
      v7 = "ControllerImpl.mm";
      v8 = 1024;
      v9 = 3916;
      v10 = 2048;
      v11 = 0;
      _os_log_impl(&dword_19B733000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d nil object encountered (avvc: %p). Bailing", (uint8_t *)&v6, 0x1Cu);
    }

  }
LABEL_10:

}

void sub_19B7EA104(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl32_configureEngineCompletionBlocksEP17AVVoiceControllerNSt3__110shared_ptrI19AVVCRecordingEngineEE_block_invoke_240(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  NSObject *v4;
  id v5;
  int v6;
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v3 = WeakRetained;
  if (WeakRetained)
  {
    objc_msgSend(WeakRetained, "beganRecording:status:", *(_QWORD *)(a1 + 40), *(unsigned int *)(a1 + 48));
  }
  else
  {
    if (kAVVCScope)
    {
      v4 = *(id *)kAVVCScope;
      if (!v4)
        goto LABEL_10;
    }
    else
    {
      v4 = MEMORY[0x1E0C81028];
      v5 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v6 = 136315650;
      v7 = "ControllerImpl.mm";
      v8 = 1024;
      v9 = 3894;
      v10 = 2048;
      v11 = 0;
      _os_log_impl(&dword_19B733000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d nil object encountered (avvc: %p). Bailing", (uint8_t *)&v6, 0x1Cu);
    }

  }
LABEL_10:

}

void sub_19B7EA22C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<AVVCAudioQueueRecordingEngine>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3BE9D90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AVVCAudioQueueRecordingEngine>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3BE9D90;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AC5BD4);
}

uint64_t std::__shared_ptr_emplace<AVVCAudioQueueRecordingEngine>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<AVVCHACRecordingEngine>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3BE5D70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AVVCHACRecordingEngine>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3BE5D70;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AC5BD4);
}

uint64_t std::__shared_ptr_emplace<AVVCHACRecordingEngine>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<AVVCExternalDeviceRecordingEngine>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3BE9DC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AVVCExternalDeviceRecordingEngine>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3BE9DC8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AC5BD4);
}

uint64_t std::__shared_ptr_emplace<AVVCExternalDeviceRecordingEngine>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<AVVCPluginRecordingEngine>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3BE9D58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AVVCPluginRecordingEngine>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3BE9D58;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AC5BD4);
}

uint64_t std::__shared_ptr_emplace<AVVCPluginRecordingEngine>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void ___ZN14ControllerImpl10setContextEP17AVVoiceControllerP19AVVCContextSettingsU13block_pointerFvm14AVVCStreamTypeP7NSErrorE_block_invoke_2_224(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 32);
  objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2F90], -11780, 0);
  v2 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, _QWORD, _QWORD))(v1 + 16))(v1, 0, 0);

}

void sub_19B7EA3EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl10setContextEP17AVVoiceControllerP19AVVCContextSettingsU13block_pointerFvm14AVVCStreamTypeP7NSErrorE_block_invoke_3(uint64_t a1)
{
  uint64_t v2;
  id v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD v11[4];
  id v12;
  uint64_t v13;
  std::__shared_weak_count *v14;

  AVVCRecordingEngine::setActivationContextSettings(*(AVVCRecordingEngine **)(a1 + 48), *(AVVCContextSettings **)(a1 + 32));
  v2 = *(_QWORD *)(a1 + 64);
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3321888768;
  v11[2] = ___ZN14ControllerImpl10setContextEP17AVVoiceControllerP19AVVCContextSettingsU13block_pointerFvm14AVVCStreamTypeP7NSErrorE_block_invoke_4;
  v11[3] = &unk_1E3BEA198;
  v3 = *(id *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 48);
  v4 = *(std::__shared_weak_count **)(a1 + 56);
  v12 = v3;
  v13 = v5;
  v14 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  ControllerImpl::safeWork(v2, v11, (uint64_t)"setContext_block_invoke");
  v8 = v14;
  if (v14)
  {
    v9 = (unint64_t *)&v14->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }

}

void sub_19B7EA4F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  uint64_t v14;

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v14);

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl10setContextEP17AVVoiceControllerP19AVVCContextSettingsU13block_pointerFvm14AVVCStreamTypeP7NSErrorE_block_invoke_4(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v2 = a1[4];
  v4 = a1[5];
  v3 = (std::__shared_weak_count *)a1[6];
  v10 = v4;
  v11 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  (*(void (**)(uint64_t, uint64_t *))(v2 + 16))(v2, &v10);
  v7 = v11;
  if (v11)
  {
    v8 = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_19B7EA598(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl10setContextEP17AVVoiceControllerP19AVVCContextSettingsU13block_pointerFvm14AVVCStreamTypeP7NSErrorE_block_invoke_221(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;

  v1 = a1[6];
  v2 = a1[7];
  v3 = a1[4];
  objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2F90], *(int *)(*(_QWORD *)(a1[5] + 8) + 24), 0);
  v4 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v3, v1, v2);

}

void sub_19B7EA628(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t ControllerImpl::setContext(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  id v9;
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  _QWORD v15[4];
  id v16;
  id v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  int v25;

  v9 = a2;
  v10 = a3;
  v22 = 0;
  v23 = &v22;
  v24 = 0x2020000000;
  v25 = 0;
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 3221225472;
  v15[2] = ___ZN14ControllerImpl10setContextEP17AVVoiceControllerP19AVVCContextSettingsPmP14AVVCStreamType_block_invoke;
  v15[3] = &unk_1E3BEC0C8;
  v19 = a1;
  v11 = v9;
  v16 = v11;
  v12 = v10;
  v20 = a4;
  v21 = a5;
  v17 = v12;
  v18 = &v22;
  makeSynchronous(v15);
  v13 = *((unsigned int *)v23 + 6);

  _Block_object_dispose(&v22, 8);
  return v13;
}

void sub_19B7EA730(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  void *v11;
  void *v12;
  va_list va;

  va_start(va, a11);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl10setContextEP17AVVoiceControllerP19AVVCContextSettingsPmP14AVVCStreamType_block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  _QWORD v9[4];
  id v10;
  uint64_t v11;
  __int128 v12;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v5 = *(void **)(a1 + 40);
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = ___ZN14ControllerImpl10setContextEP17AVVoiceControllerP19AVVCContextSettingsPmP14AVVCStreamType_block_invoke_2;
  v9[3] = &unk_1E3BEC0A0;
  v12 = *(_OWORD *)(a1 + 64);
  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(_QWORD *)(a1 + 56);
  v10 = v3;
  v11 = v6;
  v8 = v3;
  ControllerImpl::setContext(v7, v4, v5, v9);

}

void sub_19B7EA7F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl10setContextEP17AVVoiceControllerP19AVVCContextSettingsPmP14AVVCStreamType_block_invoke_2(_QWORD *a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v7;
  _QWORD *v8;
  _QWORD *v9;
  NSObject *v10;
  id v11;

  v7 = a4;
  v8 = (_QWORD *)a1[6];
  if (v8)
    *v8 = a2;
  v9 = (_QWORD *)a1[7];
  if (v9)
    *v9 = a3;
  v11 = v7;
  if (v7)
    LODWORD(v7) = objc_msgSend(v7, "code");
  *(_DWORD *)(*(_QWORD *)(a1[5] + 8) + 24) = (_DWORD)v7;
  v10 = a1[4];
  if (v10)
    dispatch_semaphore_signal(v10);

}

void sub_19B7EA888(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void ControllerImpl::safeWorkSync(uint64_t a1, void *a2)
{
  void (**v3)(void);
  std::recursive_mutex *v4;
  void (**v5)(void);

  v3 = a2;
  if (v3)
  {
    v5 = v3;
    if (IsSerializationEnabled(void)::onceToken != -1)
      dispatch_once(&IsSerializationEnabled(void)::onceToken, &__block_literal_global_132);
    if (IsSerializationEnabled(void)::enable)
    {
      v4 = (std::recursive_mutex *)(a1 + 104);
      std::recursive_mutex::lock(v4);
      v5[2]();
      std::recursive_mutex::unlock(v4);
    }
    else
    {
      v5[2]();
    }
    v3 = v5;
  }

}

void sub_19B7EA938(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void ControllerImpl::safeAllQueuesBarrier(ControllerImpl *this)
{
  NSObject *v2;
  id v3;
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;
  uint64_t v7;
  NSObject *v8;
  void *v9;
  NSObject *v10;
  NSObject *v11;
  id v12;
  NSObject *v13;
  NSObject *v14;
  NSObject *v15;
  id v16;
  NSObject *v17;
  NSObject *v18;
  _QWORD v19[4];
  dispatch_queue_t v20;
  _QWORD v21[5];
  _QWORD block[5];
  uint8_t buf[4];
  const char *v24;
  __int16 v25;
  int v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  if (kAVVCScope)
  {
    v2 = *(id *)kAVVCScope;
    if (!v2)
      goto LABEL_8;
  }
  else
  {
    v2 = MEMORY[0x1E0C81028];
    v3 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    v24 = "ControllerImpl.mm";
    v25 = 1024;
    v26 = 4478;
    _os_log_impl(&dword_19B733000, v2, OS_LOG_TYPE_DEFAULT, "%25s:%-5d before barrier", buf, 0x12u);
  }

LABEL_8:
  v4 = dispatch_group_create();
  v5 = v4;
  v6 = *((_QWORD *)this + 4);
  v7 = MEMORY[0x1E0C809B0];
  if (v6)
  {
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = ___ZN14ControllerImpl20safeAllQueuesBarrierEv_block_invoke;
    block[3] = &__block_descriptor_40_e5_v8__0l;
    block[4] = this;
    dispatch_group_async(v4, v6, block);
  }
  v8 = *((_QWORD *)this + 3);
  if (v8)
  {
    v21[0] = v7;
    v21[1] = 3221225472;
    v21[2] = ___ZN14ControllerImpl20safeAllQueuesBarrierEv_block_invoke_280;
    v21[3] = &__block_descriptor_40_e5_v8__0l;
    v21[4] = this;
    dispatch_group_async(v5, v8, v21);
  }
  +[AVVCKeepAliveManager sharedManager](AVVCKeepAliveManager, "sharedManager");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "getDispatchQueue");
  v10 = objc_claimAutoreleasedReturnValue();

  if (v10)
  {
    v19[0] = v7;
    v19[1] = 3221225472;
    v19[2] = ___ZN14ControllerImpl20safeAllQueuesBarrierEv_block_invoke_281;
    v19[3] = &unk_1E3BECBE0;
    v20 = v10;
    dispatch_group_async(v5, v20, v19);

  }
  if (dispatch_group_wait(v5, 0xFFFFFFFFFFFFFFFFLL))
  {
    CALog::LogObjIfEnabled(1, kAVVCScope);
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = v17;
    if (v17 && os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v24 = "ControllerImpl.mm";
      v25 = 1024;
      v26 = 4506;
      _os_log_impl(&dword_19B733000, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d AVVC_TIMEOUT occurred : safeAllQueuesBarrier timed out!", buf, 0x12u);
    }

    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_19B733000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, " ASSERTION FAILURE: AVVC_TIMEOUT occurred : safeAllQueuesBarrier timed out!", buf, 2u);
    }
    __break(1u);
  }
  if (kAVVCScope)
  {
    v11 = *(id *)kAVVCScope;
    if (!v11)
      goto LABEL_22;
  }
  else
  {
    v11 = MEMORY[0x1E0C81028];
    v12 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    v24 = "ControllerImpl.mm";
    v25 = 1024;
    v26 = 4510;
    _os_log_impl(&dword_19B733000, v11, OS_LOG_TYPE_DEFAULT, "%25s:%-5d after barrier", buf, 0x12u);
  }

LABEL_22:
  v13 = *((_QWORD *)this + 4);
  if (v13)
    dispatch_resume(v13);
  v14 = *((_QWORD *)this + 3);
  if (v14)
    dispatch_resume(v14);
  if (v10)
    dispatch_resume(v10);
  if (kAVVCScope)
  {
    v15 = *(id *)kAVVCScope;
    if (!v15)
      goto LABEL_35;
  }
  else
  {
    v15 = MEMORY[0x1E0C81028];
    v16 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    v24 = "ControllerImpl.mm";
    v25 = 1024;
    v26 = 4526;
    _os_log_impl(&dword_19B733000, v15, OS_LOG_TYPE_DEFAULT, "%25s:%-5d after resume", buf, 0x12u);
  }

LABEL_35:
}

void sub_19B7EAD40(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl20safeAllQueuesBarrierEv_block_invoke(uint64_t a1)
{
  NSObject *v1;
  id v2;
  int v3;
  const char *v4;
  __int16 v5;
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  dispatch_suspend(*(dispatch_object_t *)(*(_QWORD *)(a1 + 32) + 32));
  if (kAVVCScope)
  {
    v1 = *(id *)kAVVCScope;
    if (!v1)
      return;
  }
  else
  {
    v1 = MEMORY[0x1E0C81028];
    v2 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    v3 = 136315394;
    v4 = "ControllerImpl.mm";
    v5 = 1024;
    v6 = 4484;
    _os_log_impl(&dword_19B733000, v1, OS_LOG_TYPE_DEFAULT, "%25s:%-5d mWorkQueue barrier", (uint8_t *)&v3, 0x12u);
  }

}

void ___ZN14ControllerImpl20safeAllQueuesBarrierEv_block_invoke_280(uint64_t a1)
{
  NSObject *v1;
  id v2;
  int v3;
  const char *v4;
  __int16 v5;
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  dispatch_suspend(*(dispatch_object_t *)(*(_QWORD *)(a1 + 32) + 24));
  if (kAVVCScope)
  {
    v1 = *(id *)kAVVCScope;
    if (!v1)
      return;
  }
  else
  {
    v1 = MEMORY[0x1E0C81028];
    v2 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    v3 = 136315394;
    v4 = "ControllerImpl.mm";
    v5 = 1024;
    v6 = 4491;
    _os_log_impl(&dword_19B733000, v1, OS_LOG_TYPE_DEFAULT, "%25s:%-5d mClientNotificationQueue barrier", (uint8_t *)&v3, 0x12u);
  }

}

void ___ZN14ControllerImpl20safeAllQueuesBarrierEv_block_invoke_281(uint64_t a1)
{
  NSObject *v1;
  id v2;
  int v3;
  const char *v4;
  __int16 v5;
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  dispatch_suspend(*(dispatch_object_t *)(a1 + 32));
  if (kAVVCScope)
  {
    v1 = *(id *)kAVVCScope;
    if (!v1)
      return;
  }
  else
  {
    v1 = MEMORY[0x1E0C81028];
    v2 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    v3 = 136315394;
    v4 = "ControllerImpl.mm";
    v5 = 1024;
    v6 = 4500;
    _os_log_impl(&dword_19B733000, v1, OS_LOG_TYPE_DEFAULT, "%25s:%-5d keepAliveDispatchQueue barrier", (uint8_t *)&v3, 0x12u);
  }

}

void ControllerImpl::prepareRecordForStream(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  id v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD v19[4];
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;

  v5 = a2;
  v6 = a3;
  mach_absolute_time();
  v7 = __udivti3();
  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v26, *(_QWORD *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16));
  v8 = v26;
  v19[0] = MEMORY[0x1E0C809B0];
  v19[1] = 3321888768;
  v19[2] = ___ZN14ControllerImpl22prepareRecordForStreamEP17AVVoiceControllerP25AVVCPrepareRecordSettingsU13block_pointerFvmbP7NSErrorE_block_invoke;
  v19[3] = &unk_1E3BEAC60;
  v22 = a1;
  v9 = v5;
  v20 = v9;
  v23 = v8;
  v24 = v27;
  if (v27)
  {
    p_shared_owners = (unint64_t *)&v27->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  v12 = v6;
  v21 = v12;
  v25 = v7;
  ControllerImpl::safeWork(v8, v19, (uint64_t)"prepareRecordForStream");

  v13 = v24;
  if (v24)
  {
    v14 = (unint64_t *)&v24->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }

  v16 = v27;
  if (v27)
  {
    v17 = (unint64_t *)&v27->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }

}

void sub_19B7EB1A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  void *v11;
  void *v12;
  uint64_t v13;
  va_list va;

  va_start(va, a11);

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v13);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)va);

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl22prepareRecordForStreamEP17AVVoiceControllerP25AVVCPrepareRecordSettingsU13block_pointerFvmbP7NSErrorE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  id v4;
  id v5;
  id v6;
  NSObject *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  _BOOL4 v19;
  void *v20;
  uint64_t v21;
  id v22;
  unsigned int v23;
  const char *v24;
  uint64_t v25;
  void *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  id v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  id v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD v47[4];
  id v48;
  id v49;
  uint64_t v50;
  _QWORD *v51;
  std::__shared_weak_count *v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  uint64_t v55;
  _QWORD *v56;
  std::__shared_weak_count *v57;
  _QWORD v58[4];
  id v59;
  id v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  uint8_t buf[4];
  const char *v64;
  __int16 v65;
  int v66;
  __int16 v67;
  uint64_t v68;
  __int16 v69;
  const char *v70;
  __int16 v71;
  uint64_t v72;
  __int16 v73;
  void *v74;
  uint64_t v75;

  v75 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 48);
  ControllerImpl::_lookupEngineForStreamID((ControllerImpl *)&v61, *(_QWORD *)(v2 + 576), *(std::__shared_weak_count **)(v2 + 584), objc_msgSend(*(id *)(a1 + 32), "streamID"));
  v3 = (_QWORD *)v61;
  if (!v61)
  {
    if (kAVVCScope)
    {
      v5 = *(id *)kAVVCScope;
      if (!v5)
      {
LABEL_18:
        v17 = *(_QWORD *)(a1 + 56);
        v18 = *(void **)(a1 + 40);
        v19 = v18 != 0;
        v58[0] = MEMORY[0x1E0C809B0];
        v58[1] = 3221225472;
        v58[2] = ___ZN14ControllerImpl22prepareRecordForStreamEP17AVVoiceControllerP25AVVCPrepareRecordSettingsU13block_pointerFvmbP7NSErrorE_block_invoke_282;
        v58[3] = &unk_1E3BECD08;
        v60 = v18;
        v59 = *(id *)(a1 + 32);
        ControllerImpl::safeNotifyAlwaysAsync(v17, v19, v58);

        goto LABEL_46;
      }
    }
    else
    {
      v5 = (id)MEMORY[0x1E0C81028];
      v14 = MEMORY[0x1E0C81028];
    }
    v15 = v5;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      v16 = objc_msgSend(*(id *)(a1 + 32), "streamID");
      *(_DWORD *)buf = 136315650;
      v64 = "ControllerImpl.mm";
      v65 = 1024;
      v66 = 4543;
      v67 = 2048;
      v68 = v16;
      _os_log_impl(&dword_19B733000, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d prepareRecordForStream: Cannot find recording engine for streamID(%lu). Returning.", buf, 0x1Cu);
    }

    goto LABEL_18;
  }
  if (!kAVVCScope)
  {
    v4 = (id)MEMORY[0x1E0C81028];
    v6 = MEMORY[0x1E0C81028];
    goto LABEL_9;
  }
  v4 = *(id *)kAVVCScope;
  if (v4)
  {
LABEL_9:
    v7 = v4;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      v8 = v62;
      v56 = v3;
      v57 = v62;
      if (v62)
      {
        p_shared_owners = (unint64_t *)&v62->__shared_owners_;
        do
          v10 = __ldxr(p_shared_owners);
        while (__stxr(v10 + 1, p_shared_owners));
        v11 = (void *)MEMORY[0x1E0CB3940];
        v12 = v3[34];
        v13 = *p_shared_owners + 1;
      }
      else
      {
        v13 = 0;
        v11 = (void *)MEMORY[0x1E0CB3940];
        v12 = v3[34];
      }
      objc_msgSend(v11, "stringWithFormat:", CFSTR("(%p) streamID: %d, use_count:%ld"), v3, v12, v13);
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      v21 = v61;
      v22 = v20;
      v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 320))(v21);
      if (v23 > 4)
        v24 = "ILLEGAL";
      else
        v24 = off_1E3BEC7A8[v23];
      v25 = objc_msgSend(*(id *)(a1 + 32), "streamID");
      Get4CCFromInt(*(_DWORD *)(v61 + 280));
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136316418;
      v64 = "ControllerImpl.mm";
      v65 = 1024;
      v66 = 4550;
      v67 = 2112;
      v68 = (uint64_t)v22;
      v69 = 2080;
      v70 = v24;
      v71 = 2048;
      v72 = v25;
      v73 = 2112;
      v74 = v26;
      _os_log_impl(&dword_19B733000, v7, OS_LOG_TYPE_DEFAULT, "%25s:%-5d prepareRecordForStream: Found engine[%@] of type(%s) for streamID(%lu), with activation mode(%@)", buf, 0x3Au);

      if (v8)
      {
        v27 = (unint64_t *)&v8->__shared_owners_;
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }

    }
    v3 = (_QWORD *)v61;
  }
  v47[0] = MEMORY[0x1E0C809B0];
  v47[1] = 3321888768;
  v47[2] = ___ZN14ControllerImpl22prepareRecordForStreamEP17AVVoiceControllerP25AVVCPrepareRecordSettingsU13block_pointerFvmbP7NSErrorE_block_invoke_283;
  v47[3] = &unk_1E3BE60E0;
  v50 = v2;
  v51 = v3;
  v52 = v62;
  if (v62)
  {
    v29 = (unint64_t *)&v62->__shared_owners_;
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
  }
  v31 = *(id *)(a1 + 32);
  v33 = *(_QWORD *)(a1 + 56);
  v32 = *(std::__shared_weak_count **)(a1 + 64);
  v48 = v31;
  v53 = v33;
  v54 = v32;
  if (v32)
  {
    v34 = (unint64_t *)&v32->__shared_owners_;
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
  }
  v36 = *(id *)(a1 + 40);
  v37 = *(_QWORD *)(a1 + 72);
  v49 = v36;
  v55 = v37;
  (*(void (**)(_QWORD *, _QWORD *, const char *))(*v3 + 360))(v3, v47, "prepareRecordForStream_block_invoke");

  v38 = v54;
  if (v54)
  {
    v39 = (unint64_t *)&v54->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }

  v41 = v52;
  if (v52)
  {
    v42 = (unint64_t *)&v52->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
LABEL_46:
  v44 = v62;
  if (v62)
  {
    v45 = (unint64_t *)&v62->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
}

void sub_19B7EB6C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  void *v33;

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl22prepareRecordForStreamEP17AVVoiceControllerP25AVVCPrepareRecordSettingsU13block_pointerFvmbP7NSErrorE_block_invoke_282(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  id v3;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = objc_msgSend(*(id *)(a1 + 32), "streamID");
  objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2F90], -11793, 0);
  v3 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v1 + 16))(v1, v2, 0);

}

void sub_19B7EB7C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl22prepareRecordForStreamEP17AVVoiceControllerP25AVVCPrepareRecordSettingsU13block_pointerFvmbP7NSErrorE_block_invoke_283(uint64_t a1)
{
  AVVCRecordingEngine *v2;
  uint64_t v3;
  double v4;
  int v5;
  int v6;
  NSObject *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  int v16;
  NSObject *v17;
  id v18;
  uint64_t v19;
  void *v20;
  _BOOL4 v21;
  int v22;
  BOOL v23;
  int v24;
  int v25;
  NSObject *v26;
  id v27;
  uint64_t v28;
  void *v29;
  _BOOL4 v30;
  int v31;
  uint64_t ReporterID;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  uint64_t v43;
  void *v44;
  id v45;
  uint64_t v46;
  void *v47;
  _BOOL4 v48;
  _QWORD v49[4];
  id v50;
  id v51;
  int v52;
  _OWORD v53[2];
  uint64_t v54;
  _QWORD v55[4];
  id v56;
  id v57;
  int v58;
  _QWORD v59[4];
  id v60;
  id v61;
  int v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  _BYTE v65[16];
  _QWORD v66[4];
  id v67;
  id v68;
  int v69;
  _BYTE buf[32];
  uint64_t v71;
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 48);
  v2 = *(AVVCRecordingEngine **)(a1 + 56);
  objc_msgSend(*(id *)(a1 + 32), "recordBufferDuration");
  v5 = AVVCRecordingEngine::setRecordBufferDuration(v2, v4);
  if (v5)
  {
    v6 = v5;
    if (kAVVCScope)
    {
      v7 = *(id *)kAVVCScope;
      if (!v7)
      {
LABEL_21:
        v19 = *(_QWORD *)(a1 + 72);
        v20 = *(void **)(a1 + 40);
        v21 = v20 != 0;
        v66[0] = MEMORY[0x1E0C809B0];
        v66[1] = 3221225472;
        v66[2] = ___ZN14ControllerImpl22prepareRecordForStreamEP17AVVoiceControllerP25AVVCPrepareRecordSettingsU13block_pointerFvmbP7NSErrorE_block_invoke_284;
        v66[3] = &unk_1E3BEC1D0;
        v68 = v20;
        v67 = *(id *)(a1 + 32);
        v69 = v6;
        ControllerImpl::safeNotifyAlwaysAsync(v19, v21, v66);

        return;
      }
    }
    else
    {
      v7 = MEMORY[0x1E0C81028];
      v18 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "ControllerImpl.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 4555;
      _os_log_impl(&dword_19B733000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d prepareRecordForStream: Failed to setRecordBufferDuration", buf, 0x12u);
    }

    goto LABEL_21;
  }
  v8 = *(_QWORD *)(a1 + 72);
  v9 = *(std::__shared_weak_count **)(a1 + 80);
  v63 = v8;
  v64 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  RecordLock::RecordLock(v65, v8, v9);
  if (v9)
  {
    v12 = (unint64_t *)&v9->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v14 = *(_QWORD *)(a1 + 56);
  objc_msgSend(*(id *)(a1 + 32), "avAudioSettings");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v14 + 88))(v14, v15);

  if (v16)
  {
    if (kAVVCScope)
    {
      v17 = *(id *)kAVVCScope;
      if (!v17)
      {
LABEL_38:
        v28 = *(_QWORD *)(a1 + 72);
        v29 = *(void **)(a1 + 40);
        v30 = v29 != 0;
        v59[0] = MEMORY[0x1E0C809B0];
        v59[1] = 3221225472;
        v59[2] = ___ZN14ControllerImpl22prepareRecordForStreamEP17AVVoiceControllerP25AVVCPrepareRecordSettingsU13block_pointerFvmbP7NSErrorE_block_invoke_285;
        v59[3] = &unk_1E3BEC1D0;
        v61 = v29;
        v60 = *(id *)(a1 + 32);
        v62 = v16;
        ControllerImpl::safeNotifyAlwaysAsync(v28, v30, v59);

        VCLocker::~VCLocker((VCLocker *)v65);
        return;
      }
    }
    else
    {
      v17 = MEMORY[0x1E0C81028];
      v27 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "ControllerImpl.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 4567;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v16;
      _os_log_impl(&dword_19B733000, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d prepareRecordForStream: Error in prepareRecording: %d", buf, 0x18u);
    }

    goto LABEL_38;
  }
  VCLocker::~VCLocker((VCLocker *)v65);
  v22 = objc_msgSend(*(id *)(a1 + 32), "deviceBufferFrameSize");
  if (v22)
    v23 = 0;
  else
    v23 = *(_QWORD *)(v3 + 184) == 1;
  if (v23)
    v24 = 512;
  else
    v24 = v22;
  if (v24)
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 352))(*(_QWORD *)(a1 + 56));
  v25 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 56) + 152))(*(_QWORD *)(a1 + 56), objc_msgSend(*(id *)(a1 + 32), "meteringEnabled"));
  if (!v25)
  {
    v31 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 72))(*(_QWORD *)(a1 + 56));
    ReporterID = AVVCRecordingEngine::getReporterID(*(AVVCRecordingEngine **)(a1 + 56));
    v33 = *(_QWORD *)(a1 + 56);
    v34 = *(_QWORD *)(v33 + 280);
    v35 = *(_OWORD *)(v33 + 40);
    *(_OWORD *)buf = *(_OWORD *)(v33 + 24);
    *(_OWORD *)&buf[16] = v35;
    v71 = *(_QWORD *)(v33 + 56);
    mach_absolute_time();
    v36 = __udivti3();
    v37 = *(_QWORD *)(a1 + 88);
    +[AVVCMetricsManager sharedManager](AVVCMetricsManager, "sharedManager");
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", (float)((float)(unint64_t)(v36 - v37) / 1000000.0));
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v38, "logSingleMetric:value:category:type:reporterID:", CFSTR("avvcPrepareRecordTime"), v39, 8, 5, ReporterID);

    +[AVVCMetricsManager sharedManager](AVVCMetricsManager, "sharedManager");
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", v34);
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v40, "logSingleMetric:value:category:type:reporterID:", CFSTR("avvcActivationContext"), v41, 8, 5, ReporterID);

    +[AVVCMetricsManager sharedManager](AVVCMetricsManager, "sharedManager");
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    v53[0] = *(_OWORD *)buf;
    v53[1] = *(_OWORD *)&buf[16];
    v54 = v71;
    objc_msgSend(v42, "logRecordAudioFormat:reporterID:", v53, ReporterID);

    v43 = *(_QWORD *)(a1 + 72);
    v44 = *(void **)(a1 + 40);
    LODWORD(ReporterID) = v44 != 0;
    v49[0] = MEMORY[0x1E0C809B0];
    v49[1] = 3221225472;
    v49[2] = ___ZN14ControllerImpl22prepareRecordForStreamEP17AVVoiceControllerP25AVVCPrepareRecordSettingsU13block_pointerFvmbP7NSErrorE_block_invoke_2;
    v49[3] = &unk_1E3BEC1D0;
    v51 = v44;
    v50 = *(id *)(a1 + 32);
    v52 = v31;
    ControllerImpl::safeNotifyAlwaysAsync(v43, ReporterID, v49);

    return;
  }
  if (!kAVVCScope)
  {
    v26 = MEMORY[0x1E0C81028];
    v45 = MEMORY[0x1E0C81028];
    goto LABEL_41;
  }
  v26 = *(id *)kAVVCScope;
  if (v26)
  {
LABEL_41:
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "ControllerImpl.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 4587;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v25;
      _os_log_impl(&dword_19B733000, v26, OS_LOG_TYPE_ERROR, "%25s:%-5d prepareRecordForStream: Error in enableMetering: %d", buf, 0x18u);
    }

  }
  v46 = *(_QWORD *)(a1 + 72);
  v47 = *(void **)(a1 + 40);
  v48 = v47 != 0;
  v55[0] = MEMORY[0x1E0C809B0];
  v55[1] = 3221225472;
  v55[2] = ___ZN14ControllerImpl22prepareRecordForStreamEP17AVVoiceControllerP25AVVCPrepareRecordSettingsU13block_pointerFvmbP7NSErrorE_block_invoke_286;
  v55[3] = &unk_1E3BEC1D0;
  v57 = v47;
  v56 = *(id *)(a1 + 32);
  v58 = v25;
  ControllerImpl::safeNotifyAlwaysAsync(v46, v48, v55);

}

void sub_19B7EBE40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{

  _Unwind_Resume(a1);
}

_QWORD *__copy_helper_block_ea8_56c47_ZTSNSt3__110shared_ptrI19AVVCRecordingEngineEE72c42_ZTSNSt3__110shared_ptrI14ControllerImplEE(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = a2[8];
  result[7] = a2[7];
  result[8] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  v5 = a2[10];
  result[9] = a2[9];
  result[10] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return result;
}

uint64_t __destroy_helper_block_ea8_56c47_ZTSNSt3__110shared_ptrI19AVVCRecordingEngineEE72c42_ZTSNSt3__110shared_ptrI14ControllerImplEE(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 + 56;
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](a1 + 72);
  return std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v1);
}

void ___ZN14ControllerImpl22prepareRecordForStreamEP17AVVoiceControllerP25AVVCPrepareRecordSettingsU13block_pointerFvmbP7NSErrorE_block_invoke_284(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  id v4;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = objc_msgSend(*(id *)(a1 + 32), "streamID");
  objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2F90], *(int *)(a1 + 48), 0);
  v4 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v2 + 16))(v2, v3, 0);

}

void sub_19B7EBFE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl22prepareRecordForStreamEP17AVVoiceControllerP25AVVCPrepareRecordSettingsU13block_pointerFvmbP7NSErrorE_block_invoke_285(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  id v4;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = objc_msgSend(*(id *)(a1 + 32), "streamID");
  objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2F90], *(int *)(a1 + 48), 0);
  v4 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v2 + 16))(v2, v3, 0);

}

void sub_19B7EC078(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl22prepareRecordForStreamEP17AVVoiceControllerP25AVVCPrepareRecordSettingsU13block_pointerFvmbP7NSErrorE_block_invoke_286(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  id v4;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = objc_msgSend(*(id *)(a1 + 32), "streamID");
  objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2F90], *(int *)(a1 + 48), 0);
  v4 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v2 + 16))(v2, v3, 0);

}

void sub_19B7EC108(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl22prepareRecordForStreamEP17AVVoiceControllerP25AVVCPrepareRecordSettingsU13block_pointerFvmbP7NSErrorE_block_invoke_2(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = objc_msgSend(*(id *)(a1 + 32), "streamID");
  v4 = *(int *)(a1 + 48);
  if ((_DWORD)v4)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2F90], v4, 0);
    v5 = objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v5 = 0;
  }
  v6 = (id)v5;
  (*(void (**)(uint64_t, uint64_t, BOOL))(v2 + 16))(v2, v3, (_DWORD)v4 == 0);
  if ((_DWORD)v4)

}

void sub_19B7EC1C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  int v10;

  if (v10)

  _Unwind_Resume(exception_object);
}

uint64_t ControllerImpl::prepareRecordForStream(ControllerImpl *this, AVVoiceController *a2, AVVCPrepareRecordSettings *a3)
{
  AVVoiceController *v5;
  AVVCPrepareRecordSettings *v6;
  AVVoiceController *v7;
  AVVCPrepareRecordSettings *v8;
  uint64_t v9;
  _QWORD v11[4];
  AVVoiceController *v12;
  AVVCPrepareRecordSettings *v13;
  uint64_t *v14;
  ControllerImpl *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  int v19;

  v5 = a2;
  v6 = a3;
  v16 = 0;
  v17 = &v16;
  v18 = 0x2020000000;
  v19 = 0;
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = ___ZN14ControllerImpl22prepareRecordForStreamEP17AVVoiceControllerP25AVVCPrepareRecordSettings_block_invoke;
  v11[3] = &unk_1E3BEC220;
  v15 = this;
  v7 = v5;
  v12 = v7;
  v8 = v6;
  v13 = v8;
  v14 = &v16;
  makeSynchronous(v11);
  v9 = *((unsigned int *)v17 + 6);

  _Block_object_dispose(&v16, 8);
  return v9;
}

void sub_19B7EC2BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void *a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  void *v10;
  va_list va;

  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl22prepareRecordForStreamEP17AVVoiceControllerP25AVVCPrepareRecordSettings_block_invoke(_QWORD *a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  _QWORD v8[4];
  id v9;
  uint64_t v10;

  v3 = a2;
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = ___ZN14ControllerImpl22prepareRecordForStreamEP17AVVoiceControllerP25AVVCPrepareRecordSettings_block_invoke_2;
  v8[3] = &unk_1E3BEC1F8;
  v4 = (void *)a1[5];
  v5 = a1[6];
  v6 = a1[7];
  v9 = v3;
  v10 = v5;
  v7 = v3;
  ControllerImpl::prepareRecordForStream(v6, v4, v8);

}

void sub_19B7EC378(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl22prepareRecordForStreamEP17AVVoiceControllerP25AVVCPrepareRecordSettings_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5;
  NSObject *v6;
  id v7;

  v5 = a4;
  v7 = v5;
  if (v5)
    LODWORD(v5) = objc_msgSend(v5, "code");
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = (_DWORD)v5;
  v6 = *(NSObject **)(a1 + 32);
  if (v6)
    dispatch_semaphore_signal(v6);

}

void sub_19B7EC3E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void ControllerImpl::startRecordForStream(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  NSObject *v16;
  void *v17;
  AVVCRecordingEngine *v18;
  uint64_t v19;
  id v20;
  id v21;
  id v22;
  AVVCRecordingEngine *v23;
  void *v24;
  _BOOL4 v25;
  AVVCRecordingEngine *v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  AVVCRecordingEngine *v38;
  BOOL v39;
  id v40;
  id v41;
  int v42;
  NSObject *v43;
  id v44;
  NSObject *v45;
  uint64_t v46;
  NSObject *v47;
  id *v48;
  id *v49;
  id v50;
  NSObject *v51;
  uint64_t v52;
  NSObject *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  id v59;
  NSObject *v60;
  uint64_t v61;
  unint64_t v62;
  const char *v63;
  NSObject *v64;
  unint64_t *p_shared_owners;
  unint64_t v66;
  unint64_t *v67;
  id v68;
  NSObject *v69;
  unint64_t *v70;
  unint64_t v71;
  AVVCRecordingEngine *v72;
  std::__shared_weak_count *v73;
  uint64_t *v74;
  unint64_t v75;
  id v76;
  id v77;
  NSObject *v78;
  uint64_t v79;
  NSObject *v80;
  unint64_t *v81;
  unint64_t v82;
  unint64_t *v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  id v87;
  _QWORD v88[4];
  id v89;
  _QWORD v90[2];
  std::__shared_weak_count *v91;
  int v92;
  uint64_t v93;
  std::__shared_weak_count *v94;
  _QWORD v95[4];
  id v96;
  id v97;
  _QWORD v98[2];
  int v99;
  AVVCRecordingEngine *v100;
  std::__shared_weak_count *v101;
  _QWORD v102[4];
  id v103;
  _QWORD v104[2];
  std::__shared_weak_count *v105;
  _QWORD v106[4];
  id v107;
  _QWORD v108[2];
  std::__shared_weak_count *v109;
  _QWORD block[4];
  id v111;
  id v112;
  AVVCRecordingEngine *v113;
  std::__shared_weak_count *v114;
  uint64_t v115;
  uint64_t *v116;
  uint64_t v117;
  int v118;
  _BYTE buf[40];
  uint64_t *v120;
  uint64_t v121;
  AVVCRecordingEngine *v122;
  std::__shared_weak_count *v123;
  uint64_t v124;

  v124 = *MEMORY[0x1E0C80C00];
  v11 = a2;
  v12 = a3;
  v13 = a4;
  v87 = a5;
  v14 = a6;
  if (kAVVCScope)
  {
    if ((*(_BYTE *)(kAVVCScope + 8) & 1) != 0)
    {
      v15 = *(id *)kAVVCScope;
      if (v15)
      {
        v16 = v15;
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "ControllerImpl.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 4640;
          *(_WORD *)&buf[18] = 2048;
          *(_QWORD *)&buf[20] = objc_msgSend(v12, "streamID");
          _os_log_impl(&dword_19B733000, v16, OS_LOG_TYPE_DEBUG, "%25s:%-5d startRecordForStream streamID(%lu)", buf, 0x1Cu);
        }

      }
    }
  }
  +[AVVCMetricsManager sharedManager](AVVCMetricsManager, "sharedManager");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  mach_absolute_time();
  objc_msgSend(v17, "setCallToStartRecordHostTime:", __udivti3());

  ControllerImpl::_lookupEngineForStreamID((ControllerImpl *)&v113, *(_QWORD *)(a1 + 576), *(std::__shared_weak_count **)(a1 + 584), objc_msgSend(v12, "streamID"));
  v18 = v113;
  if (!v113)
  {
    if (kAVVCScope)
    {
      v21 = *(id *)kAVVCScope;
      if (!v21)
        goto LABEL_44;
    }
    else
    {
      v21 = (id)MEMORY[0x1E0C81028];
      v44 = MEMORY[0x1E0C81028];
    }
    v45 = v21;
    if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
    {
      v46 = objc_msgSend(v12, "streamID");
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "ControllerImpl.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 4649;
      *(_WORD *)&buf[18] = 2048;
      *(_QWORD *)&buf[20] = v46;
      _os_log_impl(&dword_19B733000, v45, OS_LOG_TYPE_ERROR, "%25s:%-5d startRecordForStream: Cannot find recording engine for streamID(%lu). Returning.", buf, 0x1Cu);
    }

LABEL_44:
    if (v13)
    {
      v47 = *(NSObject **)(a1 + 24);
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = ___ZN14ControllerImpl20startRecordForStreamEP17AVVoiceControllerP23AVVCStartRecordSettingsU13block_pointerFvmb15AVVCStreamStateP7NSErrorEU13block_pointerFv16AVVoiceAlertType14AVVCAlertStateS6_EU13block_pointerFvmP15AVVCAudioBufferE_block_invoke;
      block[3] = &unk_1E3BECD08;
      v48 = &v112;
      v112 = v13;
      v49 = &v111;
      v111 = v12;
      dispatch_async(v47, block);
LABEL_108:

      goto LABEL_109;
    }
    goto LABEL_109;
  }
  v19 = *((_QWORD *)v113 + 28);
  if (v19 > 1)
  {
    if ((v19 & 0xFFFFFFFFFFFFFFFELL) == 4)
    {
      if (kAVVCScope)
      {
        v22 = *(id *)kAVVCScope;
        if (!v22)
        {
LABEL_66:
          if (!v13)
            goto LABEL_109;
          v64 = *(NSObject **)(a1 + 24);
          v102[0] = MEMORY[0x1E0C809B0];
          v102[1] = 3321888768;
          v102[2] = ___ZN14ControllerImpl20startRecordForStreamEP17AVVoiceControllerP23AVVCStartRecordSettingsU13block_pointerFvmb15AVVCStreamStateP7NSErrorEU13block_pointerFv16AVVoiceAlertType14AVVCAlertStateS6_EU13block_pointerFvmP15AVVCAudioBufferE_block_invoke_291;
          v102[3] = &unk_1E3BEA608;
          v48 = (id *)v104;
          v104[0] = v13;
          v49 = &v103;
          v103 = v12;
          v104[1] = v113;
          v105 = v114;
          if (v114)
          {
            p_shared_owners = (unint64_t *)&v114->__shared_owners_;
            do
              v66 = __ldxr(p_shared_owners);
            while (__stxr(v66 + 1, p_shared_owners));
          }
          dispatch_async(v64, v102);
          v56 = v105;
          if (!v105)
            goto LABEL_108;
          v67 = (unint64_t *)&v105->__shared_owners_;
          do
            v58 = __ldaxr(v67);
          while (__stlxr(v58 - 1, v67));
LABEL_106:
          if (!v58)
          {
            ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
            std::__shared_weak_count::__release_weak(v56);
          }
          goto LABEL_108;
        }
      }
      else
      {
        v22 = (id)MEMORY[0x1E0C81028];
        v59 = MEMORY[0x1E0C81028];
      }
      v60 = v22;
      if (os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT))
      {
        v61 = objc_msgSend(v12, "streamID");
        v62 = *((_QWORD *)v113 + 28);
        if (v62 > 6)
          v63 = "ILLEGAL";
        else
          v63 = off_1E3BEC7D0[v62];
        *(_DWORD *)buf = 136315906;
        *(_QWORD *)&buf[4] = "ControllerImpl.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 4669;
        *(_WORD *)&buf[18] = 2048;
        *(_QWORD *)&buf[20] = v61;
        *(_WORD *)&buf[28] = 2080;
        *(_QWORD *)&buf[30] = v63;
        _os_log_impl(&dword_19B733000, v60, OS_LOG_TYPE_DEFAULT, "%25s:%-5d startRecordForStream: Attempt to start stream(%ld) while stream is already %s. No-op.", buf, 0x26u);
      }

      goto LABEL_66;
    }
    *((_QWORD *)v18 + 30) = objc_msgSend(v12, "startHostTime");
    v23 = v113;
    *((_DWORD *)v23 + 62) = objc_msgSend(v12, "startAnchorPoint");
    *(_QWORD *)(a1 + 344) = -1;
    *(_QWORD *)(a1 + 352) = -1;
    *(_QWORD *)(a1 + 336) = -1;
    *(_QWORD *)(a1 + 336) = objc_msgSend(v12, "startAlert");
    *(_QWORD *)(a1 + 344) = objc_msgSend(v12, "stopAlert");
    *(_QWORD *)(a1 + 352) = objc_msgSend(v12, "stopOnErrorAlert");
    *(_BYTE *)(a1 + 592) = 1;
    AVVCRecordingEngine::setStreamState((uint64_t)v113, 4);
    (*(void (**)(AVVCRecordingEngine *, _QWORD))(*(_QWORD *)v113 + 64))(v113, 0);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    v25 = objc_msgSend(v24, "sessionState") == 7;

    if (!v25)
    {
      v42 = 0;
      goto LABEL_84;
    }
    v26 = v113;
    v27 = v114;
    v28 = *((_QWORD *)v113 + 35);
    v100 = v113;
    v101 = v114;
    if (v114)
    {
      v29 = (unint64_t *)&v114->__shared_owners_;
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
    }
    v115 = 0;
    v116 = &v115;
    v117 = 0x2020000000;
    v118 = 0;
    *(_QWORD *)buf = MEMORY[0x1E0C809B0];
    *(_QWORD *)&buf[8] = 3321888768;
    *(_QWORD *)&buf[16] = ___ZN14ControllerImpl35configureAlertModeFromModeAndEngineElNSt3__110shared_ptrI19AVVCRecordingEngineEE_block_invoke;
    *(_QWORD *)&buf[24] = &unk_1E3BEA8A8;
    v120 = (uint64_t *)a1;
    v121 = v28;
    v122 = v26;
    v123 = v27;
    if (v27)
    {
      v31 = (unint64_t *)&v27->__shared_owners_;
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
    }
    *(_QWORD *)&buf[32] = &v115;
    makeSynchronous(buf);
    v33 = v123;
    if (v123)
    {
      v34 = (unint64_t *)&v123->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    _Block_object_dispose(&v115, 8);
    if (v27)
    {
      v36 = (unint64_t *)&v27->__shared_owners_;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
    *(_BYTE *)(a1 + 409) = 0;
    v38 = (AVVCRecordingEngine *)*((_QWORD *)v113 + 34);
    v39 = *(_DWORD *)(a1 + 360) != 201;
    v40 = v11;
    v115 = 0;
    v116 = &v115;
    v117 = 0x2020000000;
    v118 = 0;
    *(_QWORD *)buf = MEMORY[0x1E0C809B0];
    *(_QWORD *)&buf[8] = 3221225472;
    *(_QWORD *)&buf[16] = ___ZN14ControllerImpl9playAlertEP17AVVoiceController16AVVoiceAlertTypebm_block_invoke;
    *(_QWORD *)&buf[24] = &unk_1E3BEBFD8;
    v121 = a1;
    v41 = v40;
    LODWORD(v123) = 1;
    BYTE4(v123) = v39;
    v122 = v38;
    *(_QWORD *)&buf[32] = v41;
    v120 = &v115;
    makeSynchronous(buf);
    v42 = *((_DWORD *)v116 + 6);

    _Block_object_dispose(&v115, 8);
    if (!v42)
    {
      LOBYTE(v25) = 1;
      goto LABEL_84;
    }
    if (kAVVCScope)
    {
      v43 = *(id *)kAVVCScope;
      if (!v43)
      {
LABEL_78:

        if (v13)
        {
          AVVCRecordingEngine::setStreamState((uint64_t)v113, 3);
          v69 = *(NSObject **)(a1 + 24);
          v95[0] = MEMORY[0x1E0C809B0];
          v95[1] = 3321888768;
          v95[2] = ___ZN14ControllerImpl20startRecordForStreamEP17AVVoiceControllerP23AVVCStartRecordSettingsU13block_pointerFvmb15AVVCStreamStateP7NSErrorEU13block_pointerFv16AVVoiceAlertType14AVVCAlertStateS6_EU13block_pointerFvmP15AVVCAudioBufferE_block_invoke_292;
          v95[3] = &unk_1E3BEA790;
          v97 = v13;
          v96 = v12;
          v98[0] = v113;
          v98[1] = v114;
          if (v114)
          {
            v70 = (unint64_t *)&v114->__shared_owners_;
            do
              v71 = __ldxr(v70);
            while (__stxr(v71 + 1, v70));
          }
          v99 = v42;
          dispatch_async(v69, v95);
          std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)v98);

        }
        LOBYTE(v25) = 0;
LABEL_84:
        AVVCRecordingEngine::setRecordErrorStatus(v113, v42, "startRecordForStream");
        (*(void (**)(AVVCRecordingEngine *))(*(_QWORD *)v113 + 264))(v113);
        v72 = v113;
        *((_BYTE *)v113 + 200) = *(_BYTE *)(a1 + 424);
        (*(void (**)(AVVCRecordingEngine *))(*(_QWORD *)v72 + 288))(v72);
        if (!v25)
        {
          std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v93, *(_QWORD *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16));
          RecordLock::RecordLock(buf, v93, v94);
          v73 = v94;
          if (v94)
          {
            v74 = &v94->__shared_owners_;
            do
              v75 = __ldaxr((unint64_t *)v74);
            while (__stlxr(v75 - 1, (unint64_t *)v74));
            if (!v75)
            {
              ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
              std::__shared_weak_count::__release_weak(v73);
            }
          }
          v42 = (*(uint64_t (**)(AVVCRecordingEngine *))(*(_QWORD *)v113 + 96))(v113);
          VCLocker::~VCLocker((VCLocker *)buf);
        }
        if (!v42)
          goto LABEL_109;
        if (kAVVCScope)
        {
          v76 = *(id *)kAVVCScope;
          if (!v76)
          {
LABEL_99:
            if (!v13)
              goto LABEL_109;
            v80 = *(NSObject **)(a1 + 24);
            v88[0] = MEMORY[0x1E0C809B0];
            v88[1] = 3321888768;
            v88[2] = ___ZN14ControllerImpl20startRecordForStreamEP17AVVoiceControllerP23AVVCStartRecordSettingsU13block_pointerFvmb15AVVCStreamStateP7NSErrorEU13block_pointerFv16AVVoiceAlertType14AVVCAlertStateS6_EU13block_pointerFvmP15AVVCAudioBufferE_block_invoke_294;
            v88[3] = &unk_1E3BEA790;
            v48 = (id *)v90;
            v90[0] = v13;
            v49 = &v89;
            v89 = v12;
            v90[1] = v113;
            v91 = v114;
            if (v114)
            {
              v81 = (unint64_t *)&v114->__shared_owners_;
              do
                v82 = __ldxr(v81);
              while (__stxr(v82 + 1, v81));
            }
            v92 = v42;
            dispatch_async(v80, v88);
            v56 = v91;
            if (!v91)
              goto LABEL_108;
            v83 = (unint64_t *)&v91->__shared_owners_;
            do
              v58 = __ldaxr(v83);
            while (__stlxr(v58 - 1, v83));
            goto LABEL_106;
          }
        }
        else
        {
          v76 = (id)MEMORY[0x1E0C81028];
          v77 = MEMORY[0x1E0C81028];
        }
        v78 = v76;
        if (os_log_type_enabled(v78, OS_LOG_TYPE_ERROR))
        {
          v79 = objc_msgSend(v12, "streamID");
          *(_DWORD *)buf = 136315906;
          *(_QWORD *)&buf[4] = "ControllerImpl.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 4756;
          *(_WORD *)&buf[18] = 2048;
          *(_QWORD *)&buf[20] = v79;
          *(_WORD *)&buf[28] = 1024;
          *(_DWORD *)&buf[30] = v42;
          _os_log_impl(&dword_19B733000, v78, OS_LOG_TYPE_ERROR, "%25s:%-5d startRecordForStream: Error in startRecording for stream(%lu): %d", buf, 0x22u);
        }

        goto LABEL_99;
      }
    }
    else
    {
      v43 = MEMORY[0x1E0C81028];
      v68 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "ControllerImpl.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 4719;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v42;
      _os_log_impl(&dword_19B733000, v43, OS_LOG_TYPE_ERROR, "%25s:%-5d ERROR in startRecordForStream, failed at playAlert: %d", buf, 0x18u);
    }
    goto LABEL_78;
  }
  if (kAVVCScope)
  {
    v20 = *(id *)kAVVCScope;
    if (!v20)
      goto LABEL_50;
  }
  else
  {
    v20 = (id)MEMORY[0x1E0C81028];
    v50 = MEMORY[0x1E0C81028];
  }
  v51 = v20;
  if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
  {
    v52 = objc_msgSend(v12, "streamID");
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "ControllerImpl.mm";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 4659;
    *(_WORD *)&buf[18] = 2048;
    *(_QWORD *)&buf[20] = v52;
    _os_log_impl(&dword_19B733000, v51, OS_LOG_TYPE_ERROR, "%25s:%-5d startRecordForStream: Attempt to start stream(%ld) without calling prepare.", buf, 0x1Cu);
  }

LABEL_50:
  if (v13)
  {
    v53 = *(NSObject **)(a1 + 24);
    v106[0] = MEMORY[0x1E0C809B0];
    v106[1] = 3321888768;
    v106[2] = ___ZN14ControllerImpl20startRecordForStreamEP17AVVoiceControllerP23AVVCStartRecordSettingsU13block_pointerFvmb15AVVCStreamStateP7NSErrorEU13block_pointerFv16AVVoiceAlertType14AVVCAlertStateS6_EU13block_pointerFvmP15AVVCAudioBufferE_block_invoke_290;
    v106[3] = &unk_1E3BEA608;
    v48 = (id *)v108;
    v108[0] = v13;
    v49 = &v107;
    v107 = v12;
    v108[1] = v113;
    v109 = v114;
    if (v114)
    {
      v54 = (unint64_t *)&v114->__shared_owners_;
      do
        v55 = __ldxr(v54);
      while (__stxr(v55 + 1, v54));
    }
    dispatch_async(v53, v106);
    v56 = v109;
    if (!v109)
      goto LABEL_108;
    v57 = (unint64_t *)&v109->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    goto LABEL_106;
  }
LABEL_109:
  v84 = v114;
  if (v114)
  {
    v85 = (unint64_t *)&v114->__shared_owners_;
    do
      v86 = __ldaxr(v85);
    while (__stlxr(v86 - 1, v85));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v84);
    }
  }

}

void sub_19B7ECF88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v15 - 240);
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl20startRecordForStreamEP17AVVoiceControllerP23AVVCStartRecordSettingsU13block_pointerFvmb15AVVCStreamStateP7NSErrorEU13block_pointerFv16AVVoiceAlertType14AVVCAlertStateS6_EU13block_pointerFvmP15AVVCAudioBufferE_block_invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  id v3;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = objc_msgSend(*(id *)(a1 + 32), "streamID");
  objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2F90], -11793, 0);
  v3 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(v1 + 16))(v1, v2, 0, 0);

}

void sub_19B7ED134(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl20startRecordForStreamEP17AVVoiceControllerP23AVVCStartRecordSettingsU13block_pointerFvmb15AVVCStreamStateP7NSErrorEU13block_pointerFv16AVVoiceAlertType14AVVCAlertStateS6_EU13block_pointerFvmP15AVVCAudioBufferE_block_invoke_290(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = objc_msgSend(*(id *)(a1 + 32), "streamID");
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 224);
  objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2F90], -11781, 0);
  v5 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(v2 + 16))(v2, v3, 0, v4);

}

void sub_19B7ED1D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t ___ZN14ControllerImpl20startRecordForStreamEP17AVVoiceControllerP23AVVCStartRecordSettingsU13block_pointerFvmb15AVVCStreamStateP7NSErrorEU13block_pointerFv16AVVoiceAlertType14AVVCAlertStateS6_EU13block_pointerFvmP15AVVCAudioBufferE_block_invoke_291(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), objc_msgSend(*(id *)(a1 + 32), "streamID"), 1, *(_QWORD *)(*(_QWORD *)(a1 + 48) + 224), 0);
}

void ___ZN14ControllerImpl20startRecordForStreamEP17AVVoiceControllerP23AVVCStartRecordSettingsU13block_pointerFvmb15AVVCStreamStateP7NSErrorEU13block_pointerFv16AVVoiceAlertType14AVVCAlertStateS6_EU13block_pointerFvmP15AVVCAudioBufferE_block_invoke_292(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = objc_msgSend(*(id *)(a1 + 32), "streamID");
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 224);
  objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2F90], *(int *)(a1 + 64), 0);
  v5 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(v2 + 16))(v2, v3, 0, v4);

}

void sub_19B7ED2AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl20startRecordForStreamEP17AVVoiceControllerP23AVVCStartRecordSettingsU13block_pointerFvmb15AVVCStreamStateP7NSErrorEU13block_pointerFv16AVVoiceAlertType14AVVCAlertStateS6_EU13block_pointerFvmP15AVVCAudioBufferE_block_invoke_294(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = objc_msgSend(*(id *)(a1 + 32), "streamID");
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 224);
  objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2F90], *(int *)(a1 + 64), 0);
  v5 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(v2 + 16))(v2, v3, 0, v4);

}

void sub_19B7ED348(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void ControllerImpl::startRecordForStream(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id v10;
  NSObject *v11;
  void *v12;
  uint64_t v13;
  id v14;
  unint64_t *v15;
  unint64_t v16;
  id v17;
  id v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD v25[4];
  id v26;
  id v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  _BYTE buf[18];
  __int16 v33;
  uint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a3;
  v9 = a4;
  if (kAVVCScope)
  {
    if ((*(_BYTE *)(kAVVCScope + 8) & 1) != 0)
    {
      v10 = *(id *)kAVVCScope;
      if (v10)
      {
        v11 = v10;
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "ControllerImpl.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 4776;
          v33 = 2048;
          v34 = objc_msgSend(v8, "streamID");
          _os_log_impl(&dword_19B733000, v11, OS_LOG_TYPE_DEBUG, "%25s:%-5d startRecordForStream streamID(%lu)", buf, 0x1Cu);
        }

      }
    }
  }
  +[AVVCMetricsManager sharedManager](AVVCMetricsManager, "sharedManager");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  mach_absolute_time();
  objc_msgSend(v12, "setCallToStartRecordHostTime:", __udivti3());

  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(buf, *(_QWORD *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16));
  v13 = *(_QWORD *)buf;
  v25[0] = MEMORY[0x1E0C809B0];
  v25[1] = 3321888768;
  v25[2] = ___ZN14ControllerImpl20startRecordForStreamEP17AVVoiceControllerP23AVVCStartRecordSettingsU13block_pointerFvmb15AVVCStreamStateP7NSErrorE_block_invoke;
  v25[3] = &unk_1E3BEACD0;
  v29 = a1;
  v14 = v8;
  v26 = v14;
  v30 = v13;
  v31 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v15 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v17 = v9;
  v28 = v17;
  v18 = v7;
  v27 = v18;
  ControllerImpl::safeWork(v13, v25, (uint64_t)"startRecordForStream");

  v19 = v31;
  if (v31)
  {
    p_shared_owners = (unint64_t *)&v31->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }

  v22 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v23 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }

}

void sub_19B7ED5F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl20startRecordForStreamEP17AVVoiceControllerP23AVVCStartRecordSettingsU13block_pointerFvmb15AVVCStreamStateP7NSErrorE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  id v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  id v16;
  id v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  _BOOL4 v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  _QWORD v26[4];
  id v27;
  id v28;
  id v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  _QWORD v34[4];
  id v35;
  id v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  uint8_t buf[4];
  const char *v40;
  __int16 v41;
  int v42;
  __int16 v43;
  uint64_t v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  ControllerImpl::_lookupEngineForStreamID((ControllerImpl *)&v37, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 576), *(std::__shared_weak_count **)(*(_QWORD *)(a1 + 56) + 584), objc_msgSend(*(id *)(a1 + 32), "streamID"));
  v2 = v37;
  if (!v37)
  {
    if (kAVVCScope)
    {
      v16 = *(id *)kAVVCScope;
      if (!v16)
      {
LABEL_25:
        v20 = *(_QWORD *)(a1 + 64);
        v21 = *(void **)(a1 + 48);
        v22 = v21 != 0;
        v34[0] = MEMORY[0x1E0C809B0];
        v34[1] = 3221225472;
        v34[2] = ___ZN14ControllerImpl20startRecordForStreamEP17AVVoiceControllerP23AVVCStartRecordSettingsU13block_pointerFvmb15AVVCStreamStateP7NSErrorE_block_invoke_295;
        v34[3] = &unk_1E3BECD08;
        v36 = v21;
        v35 = *(id *)(a1 + 32);
        ControllerImpl::safeNotifyAlwaysAsync(v20, v22, v34);

        goto LABEL_26;
      }
    }
    else
    {
      v16 = (id)MEMORY[0x1E0C81028];
      v17 = MEMORY[0x1E0C81028];
    }
    v18 = v16;
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      v19 = objc_msgSend(*(id *)(a1 + 32), "streamID");
      *(_DWORD *)buf = 136315650;
      v40 = "ControllerImpl.mm";
      v41 = 1024;
      v42 = 4787;
      v43 = 2048;
      v44 = v19;
      _os_log_impl(&dword_19B733000, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d startRecordForStream: Cannot find recording engine for streamID(%lu). Returning.", buf, 0x1Cu);
    }

    goto LABEL_25;
  }
  v26[0] = MEMORY[0x1E0C809B0];
  v26[1] = 3321888768;
  v26[2] = ___ZN14ControllerImpl20startRecordForStreamEP17AVVoiceControllerP23AVVCStartRecordSettingsU13block_pointerFvmb15AVVCStreamStateP7NSErrorE_block_invoke_2;
  v26[3] = &unk_1E3BEB018;
  v30 = v37;
  v31 = v38;
  if (v38)
  {
    p_shared_owners = (unint64_t *)&v38->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = *(id *)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 64);
  v6 = *(std::__shared_weak_count **)(a1 + 72);
  v27 = v5;
  v32 = v7;
  v33 = v6;
  if (v6)
  {
    v8 = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v29 = *(id *)(a1 + 48);
  v28 = *(id *)(a1 + 40);
  (*(void (**)(uint64_t, _QWORD *, const char *))(*(_QWORD *)v2 + 360))(v2, v26, "startRecordForStream_block_invoke");

  v10 = v33;
  if (v33)
  {
    v11 = (unint64_t *)&v33->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }

  v13 = v31;
  if (v31)
  {
    v14 = (unint64_t *)&v31->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
LABEL_26:
  v23 = v38;
  if (v38)
  {
    v24 = (unint64_t *)&v38->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
}

void sub_19B7ED988(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v2 - 112);
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl20startRecordForStreamEP17AVVoiceControllerP23AVVCStartRecordSettingsU13block_pointerFvmb15AVVCStreamStateP7NSErrorE_block_invoke_295(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  id v3;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = objc_msgSend(*(id *)(a1 + 32), "streamID");
  objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2F90], -11793, 0);
  v3 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(v1 + 16))(v1, v2, 0, 0);

}

void sub_19B7EDA68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl20startRecordForStreamEP17AVVoiceControllerP23AVVCStartRecordSettingsU13block_pointerFvmb15AVVCStreamStateP7NSErrorE_block_invoke_2(uint64_t a1)
{
  uint64_t v2;
  id v3;
  id v4;
  id v5;
  id v6;
  NSObject *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL4 v12;
  id v13;
  NSObject *v14;
  uint64_t v15;
  unint64_t v16;
  const char *v17;
  id v18;
  NSObject *v19;
  id v20;
  char *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  id v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  _BOOL4 v45;
  _QWORD v46[4];
  id v47;
  id v48;
  id v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  _QWORD v54[4];
  id v55;
  id v56;
  uint64_t v57;
  _QWORD v58[4];
  id v59;
  id v60;
  uint64_t v61;
  uint8_t v62[16];
  uint8_t buf[4];
  const char *v64;
  __int16 v65;
  int v66;
  __int16 v67;
  uint64_t v68;
  __int16 v69;
  const char *v70;
  __int16 v71;
  uint64_t v72;
  __int16 v73;
  uint8_t *v74;
  __int16 v75;
  void *v76;
  uint64_t v77;

  v77 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 224);
  if (v2 <= 1)
  {
    if (kAVVCScope)
    {
      v3 = *(id *)kAVVCScope;
      if (!v3)
      {
LABEL_16:
        v9 = *(void **)(a1 + 48);
        v10 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 224);
        v11 = *(_QWORD *)(a1 + 72);
        v12 = v9 != 0;
        v58[0] = MEMORY[0x1E0C809B0];
        v58[1] = 3221225472;
        v58[2] = ___ZN14ControllerImpl20startRecordForStreamEP17AVVoiceControllerP23AVVCStartRecordSettingsU13block_pointerFvmb15AVVCStreamStateP7NSErrorE_block_invoke_296;
        v58[3] = &unk_1E3BEC248;
        v60 = v9;
        v59 = *(id *)(a1 + 32);
        v61 = v10;
        ControllerImpl::safeNotifyAlwaysAsync(v11, v12, v58);

        return;
      }
    }
    else
    {
      v3 = (id)MEMORY[0x1E0C81028];
      v6 = MEMORY[0x1E0C81028];
    }
    v7 = v3;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v8 = objc_msgSend(*(id *)(a1 + 32), "streamID");
      *(_DWORD *)buf = 136315650;
      v64 = "ControllerImpl.mm";
      v65 = 1024;
      v66 = 4796;
      v67 = 2048;
      v68 = v8;
      _os_log_impl(&dword_19B733000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d startRecordForStream: Attempt to start stream(%ld) without calling prepare.", buf, 0x1Cu);
    }

    goto LABEL_16;
  }
  if ((v2 & 0xFFFFFFFFFFFFFFFELL) == 4)
  {
    if (kAVVCScope)
    {
      v4 = *(id *)kAVVCScope;
      if (!v4)
      {
LABEL_44:
        v42 = *(void **)(a1 + 48);
        v43 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 224);
        v44 = *(_QWORD *)(a1 + 72);
        v45 = v42 != 0;
        v54[0] = MEMORY[0x1E0C809B0];
        v54[1] = 3221225472;
        v54[2] = ___ZN14ControllerImpl20startRecordForStreamEP17AVVoiceControllerP23AVVCStartRecordSettingsU13block_pointerFvmb15AVVCStreamStateP7NSErrorE_block_invoke_297;
        v54[3] = &unk_1E3BEC248;
        v56 = v42;
        v55 = *(id *)(a1 + 32);
        v57 = v43;
        ControllerImpl::safeNotifyAlwaysAsync(v44, v45, v54);

        return;
      }
    }
    else
    {
      v4 = (id)MEMORY[0x1E0C81028];
      v13 = MEMORY[0x1E0C81028];
    }
    v14 = v4;
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      v15 = objc_msgSend(*(id *)(a1 + 32), "streamID");
      v16 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 224);
      if (v16 > 6)
        v17 = "ILLEGAL";
      else
        v17 = off_1E3BEC7D0[v16];
      *(_DWORD *)buf = 136315906;
      v64 = "ControllerImpl.mm";
      v65 = 1024;
      v66 = 4805;
      v67 = 2048;
      v68 = v15;
      v69 = 2080;
      v70 = v17;
      _os_log_impl(&dword_19B733000, v14, OS_LOG_TYPE_DEFAULT, "%25s:%-5d startRecordForStream: Attempt to start stream(%ld) while stream is already %s. No-op.", buf, 0x26u);
    }

    goto LABEL_44;
  }
  if (!kAVVCScope)
  {
    v5 = (id)MEMORY[0x1E0C81028];
    v18 = MEMORY[0x1E0C81028];
    goto LABEL_22;
  }
  v5 = *(id *)kAVVCScope;
  if (v5)
  {
LABEL_22:
    v19 = v5;
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 56) + 56))(*(_QWORD *)(a1 + 56), 0);
      v20 = (id)objc_claimAutoreleasedReturnValue();
      (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 56) + 64))(*(_QWORD *)(a1 + 56), 0);
      v21 = (char *)(id)objc_claimAutoreleasedReturnValue();
      v22 = *(_QWORD *)(a1 + 56);
      CAX4CCString::CAX4CCString((CAX4CCString *)v62, *(_DWORD *)(v22 + 280));
      AVVCRouteManager::getRecordDeviceUID(*(id **)(*(_QWORD *)(a1 + 56) + 376));
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136316674;
      v64 = "ControllerImpl.mm";
      v65 = 1024;
      v66 = 4819;
      v67 = 2048;
      v68 = (uint64_t)v20;
      v69 = 2048;
      v70 = v21;
      v71 = 2048;
      v72 = v22;
      v73 = 2080;
      v74 = v62;
      v75 = 2112;
      v76 = v23;
      _os_log_impl(&dword_19B733000, v19, OS_LOG_TYPE_DEFAULT, "%25s:%-5d session (%p) and session mananger (%p) used for engine (%p) with context(%s, %@)", buf, 0x44u);

    }
  }
  v24 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(v24 + 240) = objc_msgSend(*(id *)(a1 + 32), "startHostTime");
  v25 = *(_QWORD *)(a1 + 56);
  *(_DWORD *)(v25 + 248) = objc_msgSend(*(id *)(a1 + 32), "startAnchorPoint");
  v26 = *(_QWORD *)(a1 + 56);
  *(_BYTE *)(v26 + 253) = 0;
  AVVCRecordingEngine::setStreamState(v26, 4);
  v46[0] = MEMORY[0x1E0C809B0];
  v46[1] = 3321888768;
  v46[2] = ___ZN14ControllerImpl20startRecordForStreamEP17AVVoiceControllerP23AVVCStartRecordSettingsU13block_pointerFvmb15AVVCStreamStateP7NSErrorE_block_invoke_298;
  v46[3] = &unk_1E3BEAFE0;
  v28 = *(_QWORD *)(a1 + 72);
  v27 = *(std::__shared_weak_count **)(a1 + 80);
  v50 = v28;
  v51 = v27;
  if (v27)
  {
    p_shared_owners = (unint64_t *)&v27->__shared_owners_;
    do
      v30 = __ldxr(p_shared_owners);
    while (__stxr(v30 + 1, p_shared_owners));
  }
  v31 = *(id *)(a1 + 32);
  v33 = *(_QWORD *)(a1 + 56);
  v32 = *(std::__shared_weak_count **)(a1 + 64);
  v47 = v31;
  v52 = v33;
  v53 = v32;
  if (v32)
  {
    v34 = (unint64_t *)&v32->__shared_owners_;
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
  }
  v49 = *(id *)(a1 + 48);
  v48 = *(id *)(a1 + 40);
  ControllerImpl::safeWork(v28, v46, (uint64_t)"startRecordForStream_block_invoke");

  v36 = v53;
  if (v53)
  {
    v37 = (unint64_t *)&v53->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }

  v39 = v51;
  if (v51)
  {
    v40 = (unint64_t *)&v51->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
}

void sub_19B7EE028(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl20startRecordForStreamEP17AVVoiceControllerP23AVVCStartRecordSettingsU13block_pointerFvmb15AVVCStreamStateP7NSErrorE_block_invoke_296(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = objc_msgSend(*(id *)(a1 + 32), "streamID");
  v4 = *(_QWORD *)(a1 + 48);
  objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2F90], -11781, 0);
  v5 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(v2 + 16))(v2, v3, 0, v4);

}

void sub_19B7EE15C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t ___ZN14ControllerImpl20startRecordForStreamEP17AVVoiceControllerP23AVVCStartRecordSettingsU13block_pointerFvmb15AVVCStreamStateP7NSErrorE_block_invoke_297(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), objc_msgSend(*(id *)(a1 + 32), "streamID"), 1, *(_QWORD *)(a1 + 48), 0);
}

void ___ZN14ControllerImpl20startRecordForStreamEP17AVVoiceControllerP23AVVCStartRecordSettingsU13block_pointerFvmb15AVVCStreamStateP7NSErrorE_block_invoke_298(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD v21[4];
  id v22;
  id v23;
  id v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  char v29;

  *(_BYTE *)(*(_QWORD *)(a1 + 56) + 592) = 0;
  if ((objc_msgSend(*(id *)(a1 + 32), "skipAlert") & 1) == 0)
  {
    v2 = *(_QWORD **)(a1 + 56);
    v2[43] = -1;
    v2[44] = -1;
    v2[42] = -1;
    v3 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(v3 + 336) = objc_msgSend(*(id *)(a1 + 32), "startAlert");
    v4 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(v4 + 344) = objc_msgSend(*(id *)(a1 + 32), "stopAlert");
    v5 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(v5 + 352) = objc_msgSend(*(id *)(a1 + 32), "stopOnErrorAlert");
  }
  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(_BYTE *)(v6 + 424);
  v21[0] = MEMORY[0x1E0C809B0];
  v21[1] = 3321888768;
  v21[2] = ___ZN14ControllerImpl20startRecordForStreamEP17AVVoiceControllerP23AVVCStartRecordSettingsU13block_pointerFvmb15AVVCStreamStateP7NSErrorE_block_invoke_2_299;
  v21[3] = &unk_1E3BEB088;
  v9 = *(_QWORD *)(a1 + 72);
  v8 = *(std::__shared_weak_count **)(a1 + 80);
  v25 = v9;
  v26 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    v6 = *(_QWORD *)(a1 + 56);
  }
  v29 = v7;
  v12 = *(std::__shared_weak_count **)(a1 + 64);
  v27 = v6;
  v28 = v12;
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v22 = *(id *)(a1 + 32);
  v24 = *(id *)(a1 + 48);
  v23 = *(id *)(a1 + 40);
  (*(void (**)(uint64_t, _QWORD *, const char *))(*(_QWORD *)v9 + 360))(v9, v21, "startRecordForStream_block_invoke");

  v15 = v28;
  if (v28)
  {
    v16 = (unint64_t *)&v28->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = v26;
  if (v26)
  {
    v19 = (unint64_t *)&v26->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_19B7EE37C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15)
{
  uint64_t v15;
  uint64_t v16;

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v16);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl20startRecordForStreamEP17AVVoiceControllerP23AVVCStartRecordSettingsU13block_pointerFvmb15AVVCStreamStateP7NSErrorE_block_invoke_2_299(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  id *v9;
  void (**v10)(void *, _QWORD);
  NSObject *v11;
  void *v12;
  _BOOL4 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  id v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  _QWORD v37[4];
  id v38;
  id v39;
  id v40;
  void (**v41)(void *, _QWORD);
  uint64_t v42;
  std::__shared_weak_count *v43;
  uint64_t v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  uint64_t v47;
  _QWORD aBlock[4];
  id v49;
  id v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  char v55;
  uint8_t buf[4];
  const char *v57;
  __int16 v58;
  int v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  v2 = MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3321888768;
  aBlock[2] = ___ZN14ControllerImpl20startRecordForStreamEP17AVVoiceControllerP23AVVCStartRecordSettingsU13block_pointerFvmb15AVVCStreamStateP7NSErrorE_block_invoke_3;
  aBlock[3] = &unk_1E3BEAD40;
  v3 = *(std::__shared_weak_count **)(a1 + 64);
  v51 = *(_QWORD *)(a1 + 56);
  v52 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v55 = *(_BYTE *)(a1 + 88);
  v6 = *(std::__shared_weak_count **)(a1 + 80);
  v53 = *(_QWORD *)(a1 + 72);
  v54 = v6;
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = (id *)(a1 + 32);
  v49 = *(id *)(a1 + 32);
  v50 = *(id *)(a1 + 48);
  v10 = (void (**)(void *, _QWORD))_Block_copy(aBlock);
  if ((objc_msgSend(*v9, "skipAlert") & 1) != 0)
  {
    if (kAVVCScope)
    {
      v11 = *(id *)kAVVCScope;
      if (!v11)
        goto LABEL_33;
    }
    else
    {
      v11 = MEMORY[0x1E0C81028];
      v30 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      v57 = "ControllerImpl.mm";
      v58 = 1024;
      v59 = 4942;
      _os_log_impl(&dword_19B733000, v11, OS_LOG_TYPE_DEFAULT, "%25s:%-5d startRecordForStream: Skipping alert playback and continuing to startRecord", buf, 0x12u);
    }

    goto LABEL_33;
  }
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 56) + 64))(*(_QWORD *)(a1 + 56), 0);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = objc_msgSend(v12, "sessionState") == 7;

  if (!v13)
  {
LABEL_33:
    v10[2](v10, 0);
    goto LABEL_34;
  }
  v14 = *(_QWORD *)(a1 + 56);
  v16 = *(_QWORD *)(v14 + 272);
  v15 = *(_QWORD *)(v14 + 280);
  v37[0] = v2;
  v37[1] = 3321888768;
  v37[2] = ___ZN14ControllerImpl20startRecordForStreamEP17AVVoiceControllerP23AVVCStartRecordSettingsU13block_pointerFvmb15AVVCStreamStateP7NSErrorE_block_invoke_303;
  v37[3] = &unk_1E3BE9FF0;
  v18 = *(_QWORD *)(a1 + 72);
  v17 = *(std::__shared_weak_count **)(a1 + 80);
  v42 = v18;
  v43 = v17;
  if (v17)
  {
    v19 = (unint64_t *)&v17->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    v14 = *(_QWORD *)(a1 + 56);
  }
  v44 = v15;
  v45 = v14;
  v21 = *(std::__shared_weak_count **)(a1 + 64);
  v46 = v21;
  if (v21)
  {
    v22 = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  v38 = *(id *)(a1 + 40);
  v47 = v16;
  v40 = *(id *)(a1 + 48);
  v39 = *(id *)(a1 + 32);
  v41 = v10;
  ControllerImpl::safeWork(v18, v37, (uint64_t)"startRecordForStream_block_invoke");

  v24 = v46;
  if (v46)
  {
    v25 = (unint64_t *)&v46->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = v43;
  if (v43)
  {
    v28 = (unint64_t *)&v43->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
LABEL_34:

  v31 = v54;
  if (v54)
  {
    v32 = (unint64_t *)&v54->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v34 = v52;
  if (v52)
  {
    v35 = (unint64_t *)&v52->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
}

void sub_19B7EE76C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  void *v32;
  uint64_t v33;
  uint64_t v34;

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v34);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v33);

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a32);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a30);
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl20startRecordForStreamEP17AVVoiceControllerP23AVVCStartRecordSettingsU13block_pointerFvmb15AVVCStreamStateP7NSErrorE_block_invoke_3(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  int v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  _BOOL4 v16;
  id *v17;
  id *v18;
  id v19;
  NSObject *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  _BOOL4 v25;
  _QWORD v26[4];
  id v27;
  _QWORD v28[2];
  _QWORD v29[4];
  id v30;
  _QWORD v31[2];
  int v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  uint8_t buf[4];
  const char *v36;
  __int16 v37;
  int v38;
  __int16 v39;
  uint64_t v40;
  __int16 v41;
  int v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  AVVCRecordingEngine::setRecordErrorStatus(*(AVVCRecordingEngine **)(a1 + 48), 0, "startRecordForStream_block_invoke");
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 264))(*(_QWORD *)(a1 + 48));
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 288))(*(_QWORD *)(a1 + 48));
  v4 = *(_QWORD *)(a1 + 48);
  *(_BYTE *)(v4 + 200) = *(_BYTE *)(a1 + 80);
  if ((a2 & 1) == 0)
  {
    v5 = *(_QWORD *)(a1 + 64);
    v6 = *(std::__shared_weak_count **)(a1 + 72);
    v33 = v5;
    v34 = v6;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    RecordLock::RecordLock(buf, v5, v6);
    if (v6)
    {
      v9 = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 96))(*(_QWORD *)(a1 + 48));
    VCLocker::~VCLocker((VCLocker *)buf);
    if (v11)
    {
      if (kAVVCScope)
      {
        v12 = *(id *)kAVVCScope;
        if (!v12)
        {
LABEL_20:
          v22 = *(void **)(a1 + 40);
          v23 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 224);
          v24 = *(_QWORD *)(a1 + 64);
          v25 = v22 != 0;
          v29[0] = MEMORY[0x1E0C809B0];
          v29[1] = 3221225472;
          v29[2] = ___ZN14ControllerImpl20startRecordForStreamEP17AVVoiceControllerP23AVVCStartRecordSettingsU13block_pointerFvmb15AVVCStreamStateP7NSErrorE_block_invoke_301;
          v29[3] = &unk_1E3BEC270;
          v31[0] = v22;
          v30 = *(id *)(a1 + 32);
          v31[1] = v23;
          v32 = v11;
          ControllerImpl::safeNotifyAlwaysAsync(v24, v25, v29);
          v17 = (id *)v31;
          v18 = &v30;
          goto LABEL_21;
        }
      }
      else
      {
        v12 = (id)MEMORY[0x1E0C81028];
        v19 = MEMORY[0x1E0C81028];
      }
      v20 = v12;
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        v21 = objc_msgSend(*(id *)(a1 + 32), "streamID");
        *(_DWORD *)buf = 136315906;
        v36 = "ControllerImpl.mm";
        v37 = 1024;
        v38 = 4880;
        v39 = 2048;
        v40 = v21;
        v41 = 1024;
        v42 = v11;
        _os_log_impl(&dword_19B733000, v20, OS_LOG_TYPE_ERROR, "%25s:%-5d startRecordForStream: Error in startRecording for stream(%lu): %d", buf, 0x22u);
      }

      goto LABEL_20;
    }
    v4 = *(_QWORD *)(a1 + 48);
  }
  v13 = *(_QWORD *)(v4 + 224);
  v14 = *(_QWORD *)(a1 + 64);
  v15 = *(void **)(a1 + 40);
  v16 = v15 != 0;
  v26[0] = MEMORY[0x1E0C809B0];
  v26[1] = 3221225472;
  v26[2] = ___ZN14ControllerImpl20startRecordForStreamEP17AVVoiceControllerP23AVVCStartRecordSettingsU13block_pointerFvmb15AVVCStreamStateP7NSErrorE_block_invoke_2_302;
  v26[3] = &unk_1E3BEC248;
  v28[0] = v15;
  v27 = *(id *)(a1 + 32);
  v28[1] = v13;
  ControllerImpl::safeNotifyAlwaysAsync(v14, v16, v26);
  v17 = (id *)v28;
  v18 = &v27;
LABEL_21:

}

void sub_19B7EEADC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl20startRecordForStreamEP17AVVoiceControllerP23AVVCStartRecordSettingsU13block_pointerFvmb15AVVCStreamStateP7NSErrorE_block_invoke_303(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  id v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD v25[4];
  id v26;
  id v27;
  id v28;
  id v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  uint64_t v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  uint64_t v35[2];

  v2 = *(_QWORD *)(a1 + 64);
  v3 = *(_QWORD *)(a1 + 80);
  v4 = *(std::__shared_weak_count **)(a1 + 96);
  v35[0] = *(_QWORD *)(a1 + 88);
  v35[1] = (uint64_t)v4;
  v5 = v2;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v5 = *(_QWORD *)(a1 + 64);
  }
  v25[0] = MEMORY[0x1E0C809B0];
  v25[1] = 3321888768;
  v25[2] = ___ZN14ControllerImpl20startRecordForStreamEP17AVVoiceControllerP23AVVCStartRecordSettingsU13block_pointerFvmb15AVVCStreamStateP7NSErrorE_block_invoke_2_304;
  v25[3] = &unk_1E3BE9F10;
  v8 = *(std::__shared_weak_count **)(a1 + 72);
  v30 = v5;
  v31 = v8;
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v11 = *(id *)(a1 + 32);
  v12 = *(_QWORD *)(a1 + 104);
  v26 = v11;
  v14 = *(_QWORD *)(a1 + 88);
  v13 = *(std::__shared_weak_count **)(a1 + 96);
  v32 = v12;
  v33 = v14;
  v34 = v13;
  if (v13)
  {
    v15 = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v28 = *(id *)(a1 + 48);
  v27 = *(id *)(a1 + 40);
  v29 = *(id *)(a1 + 56);
  ControllerImpl::configureAlertModeFromModeAndEngine(v2, v3, v35, v25);
  if (v4)
  {
    v17 = (unint64_t *)&v4->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

  v19 = v34;
  if (v34)
  {
    v20 = (unint64_t *)&v34->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }

  v22 = v31;
  if (v31)
  {
    v23 = (unint64_t *)&v31->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
}

void sub_19B7EED34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, void *a17)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v18);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v17);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v19 - 64);
  _Unwind_Resume(a1);
}

_QWORD *__copy_helper_block_ea8_64c42_ZTSNSt3__110shared_ptrI14ControllerImplEE88c47_ZTSNSt3__110shared_ptrI19AVVCRecordingEngineEE(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = a2[9];
  result[8] = a2[8];
  result[9] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  v5 = a2[12];
  result[11] = a2[11];
  result[12] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return result;
}

uint64_t __destroy_helper_block_ea8_64c42_ZTSNSt3__110shared_ptrI14ControllerImplEE88c47_ZTSNSt3__110shared_ptrI19AVVCRecordingEngineEE(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 + 64;
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](a1 + 88);
  return std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v1);
}

void ___ZN14ControllerImpl20startRecordForStreamEP17AVVoiceControllerP23AVVCStartRecordSettingsU13block_pointerFvmb15AVVCStreamStateP7NSErrorE_block_invoke_2_304(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  AVVoiceController *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD v18[4];
  id v19;
  id v20;
  id v21;
  _QWORD *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  _QWORD v27[3];
  char v28;

  v27[0] = 0;
  v27[1] = v27;
  v27[2] = 0x2020000000;
  v28 = 0;
  v2 = *(_QWORD *)(a1 + 64);
  *(_BYTE *)(v2 + 409) = 0;
  v3 = *(void **)(a1 + 32);
  v18[0] = MEMORY[0x1E0C809B0];
  v18[1] = 3321888768;
  v18[2] = ___ZN14ControllerImpl20startRecordForStreamEP17AVVoiceControllerP23AVVCStartRecordSettingsU13block_pointerFvmb15AVVCStreamStateP7NSErrorE_block_invoke_3_305;
  v18[3] = &unk_1E3BEB160;
  v4 = *(AVVoiceController **)(a1 + 80);
  v5 = *(std::__shared_weak_count **)(a1 + 96);
  v23 = *(_QWORD *)(a1 + 88);
  v24 = v5;
  v6 = v2;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v6 = *(_QWORD *)(a1 + 64);
  }
  v9 = *(std::__shared_weak_count **)(a1 + 72);
  v25 = v6;
  v26 = v9;
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  v20 = *(id *)(a1 + 48);
  v19 = *(id *)(a1 + 40);
  v22 = v27;
  v21 = *(id *)(a1 + 56);
  ControllerImpl::playAlert(v2, v3, 1, v4, v18);

  v12 = v26;
  if (v26)
  {
    v13 = (unint64_t *)&v26->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = v24;
  if (v24)
  {
    v16 = (unint64_t *)&v24->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  _Block_object_dispose(v27, 8);
}

void sub_19B7EEF98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v16);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v15);
  _Block_object_dispose((const void *)(v17 - 80), 8);
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl20startRecordForStreamEP17AVVoiceControllerP23AVVCStartRecordSettingsU13block_pointerFvmb15AVVCStreamStateP7NSErrorE_block_invoke_3_305(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  id v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD v22[4];
  id v23;
  uint64_t v24;
  _QWORD v25[4];
  id v26;
  id v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  int v32;
  uint8_t buf[4];
  const char *v34;
  __int16 v35;
  int v36;
  __int16 v37;
  int v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  if (!a2)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = 1;
    v5 = *(_QWORD *)(a1 + 64);
    v22[0] = MEMORY[0x1E0C809B0];
    v22[1] = 3221225472;
    v22[2] = ___ZN14ControllerImpl20startRecordForStreamEP17AVVoiceControllerP23AVVCStartRecordSettingsU13block_pointerFvmb15AVVCStreamStateP7NSErrorE_block_invoke_308;
    v22[3] = &unk_1E3BEBEE8;
    v6 = *(id *)(a1 + 48);
    v7 = *(_QWORD *)(a1 + 56);
    v23 = v6;
    v24 = v7;
    (*(void (**)(uint64_t, _QWORD *, const char *))(*(_QWORD *)v5 + 360))(v5, v22, "startRecordForStream_block_invoke");

    return;
  }
  if (!kAVVCScope)
  {
    v4 = MEMORY[0x1E0C81028];
    v8 = MEMORY[0x1E0C81028];
    goto LABEL_7;
  }
  v4 = *(id *)kAVVCScope;
  if (v4)
  {
LABEL_7:
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v34 = "ControllerImpl.mm";
      v35 = 1024;
      v36 = 4919;
      v37 = 1024;
      v38 = a2;
      _os_log_impl(&dword_19B733000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d ERROR in startRecordForStream, failed at playAlert: %d", buf, 0x18u);
    }

  }
  v25[0] = MEMORY[0x1E0C809B0];
  v25[1] = 3321888768;
  v25[2] = ___ZN14ControllerImpl20startRecordForStreamEP17AVVoiceControllerP23AVVCStartRecordSettingsU13block_pointerFvmb15AVVCStreamStateP7NSErrorE_block_invoke_306;
  v25[3] = &unk_1E3BEAE58;
  v10 = *(_QWORD *)(a1 + 64);
  v9 = *(std::__shared_weak_count **)(a1 + 72);
  v28 = v10;
  v29 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v13 = *(std::__shared_weak_count **)(a1 + 88);
  v30 = *(_QWORD *)(a1 + 80);
  v31 = v13;
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v27 = *(id *)(a1 + 40);
  v26 = *(id *)(a1 + 32);
  v32 = a2;
  (*(void (**)(uint64_t, _QWORD *, const char *))(*(_QWORD *)v10 + 360))(v10, v25, "startRecordForStream_block_invoke");

  v16 = v31;
  if (v31)
  {
    v17 = (unint64_t *)&v31->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = v29;
  if (v29)
  {
    v20 = (unint64_t *)&v29->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_19B7EF280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl20startRecordForStreamEP17AVVoiceControllerP23AVVCStartRecordSettingsU13block_pointerFvmb15AVVCStreamStateP7NSErrorE_block_invoke_306(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  _BOOL4 v5;
  _QWORD v6[4];
  id v7;
  id v8;
  uint64_t v9;
  int v10;

  AVVCRecordingEngine::setStreamState(*(_QWORD *)(a1 + 48), 3);
  v2 = *(void **)(a1 + 40);
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 224);
  v4 = *(_QWORD *)(a1 + 64);
  v5 = v2 != 0;
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = ___ZN14ControllerImpl20startRecordForStreamEP17AVVoiceControllerP23AVVCStartRecordSettingsU13block_pointerFvmb15AVVCStreamStateP7NSErrorE_block_invoke_2_307;
  v6[3] = &unk_1E3BEC270;
  v8 = v2;
  v7 = *(id *)(a1 + 32);
  v9 = v3;
  v10 = *(_DWORD *)(a1 + 80);
  ControllerImpl::safeNotifyAlwaysAsync(v4, v5, v6);

}

void sub_19B7EF37C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{

  _Unwind_Resume(a1);
}

uint64_t ___ZN14ControllerImpl20startRecordForStreamEP17AVVoiceControllerP23AVVCStartRecordSettingsU13block_pointerFvmb15AVVCStreamStateP7NSErrorE_block_invoke_308(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24));
}

void ___ZN14ControllerImpl20startRecordForStreamEP17AVVoiceControllerP23AVVCStartRecordSettingsU13block_pointerFvmb15AVVCStreamStateP7NSErrorE_block_invoke_2_307(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = objc_msgSend(*(id *)(a1 + 32), "streamID");
  v4 = *(_QWORD *)(a1 + 48);
  objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2F90], *(int *)(a1 + 56), 0);
  v5 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(v2 + 16))(v2, v3, 0, v4);

}

void sub_19B7EF434(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl20startRecordForStreamEP17AVVoiceControllerP23AVVCStartRecordSettingsU13block_pointerFvmb15AVVCStreamStateP7NSErrorE_block_invoke_301(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = objc_msgSend(*(id *)(a1 + 32), "streamID");
  v4 = *(_QWORD *)(a1 + 48);
  objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2F90], *(int *)(a1 + 56), 0);
  v5 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(v2 + 16))(v2, v3, 0, v4);

}

void sub_19B7EF4CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t ___ZN14ControllerImpl20startRecordForStreamEP17AVVoiceControllerP23AVVCStartRecordSettingsU13block_pointerFvmb15AVVCStreamStateP7NSErrorE_block_invoke_2_302(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), objc_msgSend(*(id *)(a1 + 32), "streamID"), 1, *(_QWORD *)(a1 + 48), 0);
}

uint64_t ControllerImpl::startRecordForStream(ControllerImpl *this, AVVoiceController *a2, AVVCStartRecordSettings *a3)
{
  AVVoiceController *v5;
  AVVCStartRecordSettings *v6;
  AVVoiceController *v7;
  AVVCStartRecordSettings *v8;
  uint64_t v9;
  _QWORD v11[4];
  AVVoiceController *v12;
  AVVCStartRecordSettings *v13;
  uint64_t *v14;
  ControllerImpl *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  int v19;

  v5 = a2;
  v6 = a3;
  v16 = 0;
  v17 = &v16;
  v18 = 0x2020000000;
  v19 = 0;
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = ___ZN14ControllerImpl20startRecordForStreamEP17AVVoiceControllerP23AVVCStartRecordSettings_block_invoke;
  v11[3] = &unk_1E3BEC220;
  v15 = this;
  v7 = v5;
  v12 = v7;
  v8 = v6;
  v13 = v8;
  v14 = &v16;
  makeSynchronous(v11);
  v9 = *((unsigned int *)v17 + 6);

  _Block_object_dispose(&v16, 8);
  return v9;
}

void sub_19B7EF5FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void *a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  void *v10;
  va_list va;

  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl20startRecordForStreamEP17AVVoiceControllerP23AVVCStartRecordSettings_block_invoke(_QWORD *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  _QWORD v9[4];
  id v10;
  uint64_t v11;

  v3 = a2;
  v4 = (void *)a1[4];
  v5 = (void *)a1[5];
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = ___ZN14ControllerImpl20startRecordForStreamEP17AVVoiceControllerP23AVVCStartRecordSettings_block_invoke_2;
  v9[3] = &unk_1E3BEC298;
  v6 = a1[6];
  v7 = a1[7];
  v10 = v3;
  v11 = v6;
  v8 = v3;
  ControllerImpl::startRecordForStream(v7, v4, v5, v9);

}

void sub_19B7EF6BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl20startRecordForStreamEP17AVVoiceControllerP23AVVCStartRecordSettings_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v6;
  NSObject *v7;
  id v8;

  v6 = a5;
  v8 = v6;
  if (v6)
    LODWORD(v6) = objc_msgSend(v6, "code");
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = (_DWORD)v6;
  v7 = *(NSObject **)(a1 + 32);
  if (v7)
    dispatch_semaphore_signal(v7);

}

void sub_19B7EF724(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void ControllerImpl::stopRecordForStream(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v7;
  id v8;
  NSObject *v9;
  NSObject *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  id v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD v21[4];
  id v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  _BYTE buf[18];
  __int16 v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a4;
  if (kAVVCScope)
  {
    if ((*(_BYTE *)(kAVVCScope + 8) & 1) != 0)
    {
      v9 = *(id *)kAVVCScope;
      if (v9)
      {
        v10 = v9;
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "ControllerImpl.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 4971;
          v27 = 2048;
          v28 = a3;
          _os_log_impl(&dword_19B733000, v10, OS_LOG_TYPE_DEBUG, "%25s:%-5d stopRecordForStream streamID(%lu)", buf, 0x1Cu);
        }

      }
    }
  }
  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(buf, *(_QWORD *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16));
  v21[0] = MEMORY[0x1E0C809B0];
  v21[1] = 3321888768;
  v21[2] = ___ZN14ControllerImpl19stopRecordForStreamEP17AVVoiceControllermU13block_pointerFvmb15AVVCStreamStateP7NSErrorE_block_invoke;
  v21[3] = &unk_1E3BEA488;
  v11 = *(_QWORD *)buf;
  v23 = *(_QWORD *)buf;
  v24 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v12 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v25 = a3;
  v14 = v8;
  v22 = v14;
  ControllerImpl::safeWork(v11, v21, (uint64_t)"stopRecordForStream");

  v15 = v24;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v19 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }

}

void sub_19B7EF940(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  void *v10;
  uint64_t v11;
  va_list va;

  va_start(va, a9);

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v11);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)va);

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl19stopRecordForStreamEP17AVVoiceControllermU13block_pointerFvmb15AVVCStreamStateP7NSErrorE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  id v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  NSObject *v16;
  id v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  _BOOL4 v21;
  id v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  _QWORD v27[4];
  id v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  _QWORD v34[4];
  id v35;
  uint64_t v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  uint8_t buf[4];
  const char *v40;
  __int16 v41;
  int v42;
  __int16 v43;
  uint64_t v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  ControllerImpl::_lookupEngineForStreamID((ControllerImpl *)&v37, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 576), *(std::__shared_weak_count **)(*(_QWORD *)(a1 + 40) + 584), *(_QWORD *)(a1 + 56));
  v2 = v37;
  if (!v37)
  {
    if (kAVVCScope)
    {
      v16 = *(id *)kAVVCScope;
      if (!v16)
      {
LABEL_25:
        v19 = *(void **)(a1 + 32);
        v20 = *(_QWORD *)(a1 + 40);
        v21 = v19 != 0;
        v34[0] = MEMORY[0x1E0C809B0];
        v34[1] = 3221225472;
        v34[2] = ___ZN14ControllerImpl19stopRecordForStreamEP17AVVoiceControllermU13block_pointerFvmb15AVVCStreamStateP7NSErrorE_block_invoke_309;
        v34[3] = &unk_1E3BECB48;
        v22 = v19;
        v23 = *(_QWORD *)(a1 + 56);
        v35 = v22;
        v36 = v23;
        ControllerImpl::safeNotifyAlwaysAsync(v20, v21, v34);

        goto LABEL_26;
      }
    }
    else
    {
      v16 = MEMORY[0x1E0C81028];
      v17 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      v18 = *(_QWORD *)(a1 + 56);
      *(_DWORD *)buf = 136315650;
      v40 = "ControllerImpl.mm";
      v41 = 1024;
      v42 = 4978;
      v43 = 2048;
      v44 = v18;
      _os_log_impl(&dword_19B733000, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d stopRecordForStream: Cannot find recording engine for streamID(%lu). Failing.", buf, 0x1Cu);
    }

    goto LABEL_25;
  }
  v27[0] = MEMORY[0x1E0C809B0];
  v27[1] = 3321888768;
  v27[2] = ___ZN14ControllerImpl19stopRecordForStreamEP17AVVoiceControllermU13block_pointerFvmb15AVVCStreamStateP7NSErrorE_block_invoke_2;
  v27[3] = &unk_1E3BEAB48;
  v3 = *(std::__shared_weak_count **)(a1 + 48);
  v29 = *(_QWORD *)(a1 + 40);
  v30 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v31 = v2;
  v32 = v38;
  if (v38)
  {
    v6 = (unint64_t *)&v38->__shared_owners_;
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = *(id *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 56);
  v28 = v8;
  v33 = v9;
  (*(void (**)(uint64_t, _QWORD *, const char *))(*(_QWORD *)v2 + 360))(v2, v27, "stopRecordForStream_block_invoke");

  v10 = v32;
  if (v32)
  {
    v11 = (unint64_t *)&v32->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = v30;
  if (v30)
  {
    v14 = (unint64_t *)&v30->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
LABEL_26:
  v24 = v38;
  if (v38)
  {
    v25 = (unint64_t *)&v38->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
}

void sub_19B7EFC4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  uint64_t v23;

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v23 - 96);
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl19stopRecordForStreamEP17AVVoiceControllermU13block_pointerFvmb15AVVCStreamStateP7NSErrorE_block_invoke_309(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  id v3;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2F90], -11793, 0);
  v3 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(v1 + 16))(v1, v2, 0, 0);

}

void sub_19B7EFCFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl19stopRecordForStreamEP17AVVoiceControllermU13block_pointerFvmb15AVVCStreamStateP7NSErrorE_block_invoke_2(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  NSObject *v11;
  id v12;
  char *v13;
  void *v14;
  uint64_t v15;
  _BOOL4 v16;
  _QWORD *v17;
  id v18;
  uint64_t v19;
  NSObject *v20;
  id v21;
  int v22;
  id v23;
  const char *v24;
  void *v25;
  uint64_t v26;
  _BOOL4 v27;
  id v28;
  uint64_t v29;
  id v30;
  id v31;
  NSObject *v32;
  int v33;
  _BYTE *v34;
  int v35;
  NSObject *v36;
  id v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  _BOOL4 v41;
  id v42;
  uint64_t v43;
  _QWORD v44[4];
  id v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  _QWORD v49[7];
  _QWORD v50[9];
  uint8_t v51[16];
  uint8_t buf[4];
  const char *v53;
  __int16 v54;
  int v55;
  __int16 v56;
  void *v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(std::__shared_weak_count **)(a1 + 48);
  v50[7] = v2;
  v50[8] = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  RecordLock::RecordLock(v51, v2, v3);
  if (v3)
  {
    v6 = (unint64_t *)&v3->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v8 = *(_QWORD *)(a1 + 56);
  v9 = *(_QWORD *)(v8 + 224);
  switch(v9)
  {
    case 0:
    case 1:
      if (kAVVCScope)
      {
        v11 = *(id *)kAVVCScope;
        if (!v11)
        {
LABEL_37:
          v25 = *(void **)(a1 + 32);
          v26 = *(_QWORD *)(a1 + 40);
          v27 = v25 != 0;
          v50[0] = MEMORY[0x1E0C809B0];
          v50[1] = 3221225472;
          v50[2] = ___ZN14ControllerImpl19stopRecordForStreamEP17AVVoiceControllermU13block_pointerFvmb15AVVCStreamStateP7NSErrorE_block_invoke_310;
          v50[3] = &unk_1E3BEC2C0;
          v17 = v50;
          v28 = v25;
          v29 = *(_QWORD *)(a1 + 72);
          v50[4] = v28;
          v50[5] = v29;
          v50[6] = v9;
          ControllerImpl::safeNotifyAlwaysAsync(v26, v27, v50);
          goto LABEL_38;
        }
      }
      else
      {
        v11 = MEMORY[0x1E0C81028];
        v23 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        v24 = "ILLEGAL";
        if (v9 == 1)
          v24 = "Uninitialized";
        v53 = "ControllerImpl.mm";
        *(_DWORD *)buf = 136315650;
        if (!v9)
          v24 = "Invalid";
        v54 = 1024;
        v55 = 4996;
        v56 = 2080;
        v57 = (void *)v24;
        _os_log_impl(&dword_19B733000, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d stopRecordForStream: Attempt to stop on an %s stream.", buf, 0x1Cu);
      }

      goto LABEL_37;
    case 2:
    case 3:
    case 6:
      if (kAVVCScope)
      {
        v10 = *(id *)kAVVCScope;
        if (!v10)
          goto LABEL_20;
      }
      else
      {
        v10 = MEMORY[0x1E0C81028];
        v12 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        v13 = off_1E3BEC808[v9 - 2];
        *(_DWORD *)buf = 136315650;
        v53 = "ControllerImpl.mm";
        v54 = 1024;
        v55 = 5006;
        v56 = 2080;
        v57 = v13;
        _os_log_impl(&dword_19B733000, v10, OS_LOG_TYPE_DEFAULT, "%25s:%-5d stopRecordForStream: Attempt to stop while stream is already %s. No-op.", buf, 0x1Cu);
      }

LABEL_20:
      v14 = *(void **)(a1 + 32);
      v15 = *(_QWORD *)(a1 + 40);
      v16 = v14 != 0;
      v49[0] = MEMORY[0x1E0C809B0];
      v49[1] = 3221225472;
      v49[2] = ___ZN14ControllerImpl19stopRecordForStreamEP17AVVoiceControllermU13block_pointerFvmb15AVVCStreamStateP7NSErrorE_block_invoke_311;
      v49[3] = &unk_1E3BEC2C0;
      v17 = v49;
      v18 = v14;
      v19 = *(_QWORD *)(a1 + 72);
      v49[4] = v18;
      v49[5] = v19;
      v49[6] = v9;
      ControllerImpl::safeNotifyAlwaysAsync(v15, v16, v49);
LABEL_38:

      VCLocker::~VCLocker((VCLocker *)v51);
      return;
    case 4:
      if (kAVVCScope)
      {
        v20 = *(id *)kAVVCScope;
        if (!v20)
          goto LABEL_43;
      }
      else
      {
        v20 = MEMORY[0x1E0C81028];
        v30 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315394;
        v53 = "ControllerImpl.mm";
        v54 = 1024;
        v55 = 5023;
        _os_log_impl(&dword_19B733000, v20, OS_LOG_TYPE_DEFAULT, "%25s:%-5d stopRecordForStream: Attempt to stop while stream is about to start. NotifyStartBeforeStop", buf, 0x12u);
      }

LABEL_43:
      v22 = 1;
      *(_BYTE *)(*(_QWORD *)(a1 + 56) + 80) = 1;
      goto LABEL_49;
    case 5:
      if (!*(_DWORD *)(v8 + 232))
        goto LABEL_28;
      if (kAVVCScope)
      {
        v21 = *(id *)kAVVCScope;
        if (!v21)
          goto LABEL_48;
      }
      else
      {
        v21 = (id)MEMORY[0x1E0C81028];
        v31 = MEMORY[0x1E0C81028];
      }
      v32 = v21;
      if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
      {
        v33 = *(_DWORD *)(*(_QWORD *)(a1 + 56) + 232);
        *(_DWORD *)buf = 136315650;
        v53 = "ControllerImpl.mm";
        v54 = 1024;
        v55 = 5016;
        v56 = 1024;
        LODWORD(v57) = v33;
        _os_log_impl(&dword_19B733000, v32, OS_LOG_TYPE_DEFAULT, "%25s:%-5d stopRecordForStream: an error : %d  occurred while recording and we need to synthesize doneRecording", buf, 0x18u);
      }

LABEL_48:
      v22 = 1;
LABEL_49:
      v34 = *(_BYTE **)(a1 + 56);
      v34[253] = 1;
      v35 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v34 + 104))(v34);
      if (v35)
      {
        if (kAVVCScope)
        {
          v36 = *(id *)kAVVCScope;
          if (!v36)
          {
LABEL_59:
            AVVCRecordingEngine::setRecordErrorStatus(*(AVVCRecordingEngine **)(a1 + 56), v35, "stopRecordForStream_block_invoke");
            goto LABEL_60;
          }
        }
        else
        {
          v36 = MEMORY[0x1E0C81028];
          v37 = MEMORY[0x1E0C81028];
        }
        if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315650;
          v53 = "ControllerImpl.mm";
          v54 = 1024;
          v55 = 5038;
          v56 = 1024;
          LODWORD(v57) = v35;
          _os_log_impl(&dword_19B733000, v36, OS_LOG_TYPE_ERROR, "%25s:%-5d stopRecordForStream: Error stopping record engine: %d", buf, 0x18u);
        }

        goto LABEL_59;
      }
      if (!v22)
        goto LABEL_61;
LABEL_60:
      AVVCRecordingEngine::doneRecording(*(AVVCRecordingEngine **)(a1 + 56));
LABEL_61:
      VCLocker::~VCLocker((VCLocker *)v51);
      v38 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 224);
      v39 = *(void **)(a1 + 32);
      v40 = *(_QWORD *)(a1 + 40);
      v41 = v39 != 0;
      v44[0] = MEMORY[0x1E0C809B0];
      v44[1] = 3221225472;
      v44[2] = ___ZN14ControllerImpl19stopRecordForStreamEP17AVVoiceControllermU13block_pointerFvmb15AVVCStreamStateP7NSErrorE_block_invoke_313;
      v44[3] = &unk_1E3BEC2E8;
      v42 = v39;
      v43 = *(_QWORD *)(a1 + 72);
      v45 = v42;
      v46 = v43;
      v48 = v35;
      v47 = v38;
      ControllerImpl::safeNotifyAlwaysAsync(v40, v41, v44);

      return;
    default:
LABEL_28:
      v22 = 0;
      goto LABEL_49;
  }
}

void sub_19B7F02D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28)
{
  uint64_t v28;

  VCLocker::~VCLocker((VCLocker *)(v28 - 112));
  _Unwind_Resume(a1);
}

_QWORD *__copy_helper_block_ea8_40c42_ZTSNSt3__110shared_ptrI14ControllerImplEE56c47_ZTSNSt3__110shared_ptrI19AVVCRecordingEngineEE(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = a2[6];
  result[5] = a2[5];
  result[6] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  v5 = a2[8];
  result[7] = a2[7];
  result[8] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return result;
}

uint64_t __destroy_helper_block_ea8_40c42_ZTSNSt3__110shared_ptrI14ControllerImplEE56c47_ZTSNSt3__110shared_ptrI19AVVCRecordingEngineEE(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 + 40;
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](a1 + 56);
  return std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v1);
}

void ___ZN14ControllerImpl19stopRecordForStreamEP17AVVoiceControllermU13block_pointerFvmb15AVVCStreamStateP7NSErrorE_block_invoke_310(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;

  v1 = a1[4];
  v2 = a1[5];
  v3 = a1[6];
  objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2F90], -11781, 0);
  v4 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(v1 + 16))(v1, v2, 0, v3);

}

void sub_19B7F0418(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t ___ZN14ControllerImpl19stopRecordForStreamEP17AVVoiceControllermU13block_pointerFvmb15AVVCStreamStateP7NSErrorE_block_invoke_311(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, _QWORD, _QWORD))(a1[4] + 16))(a1[4], a1[5], 1, a1[6], 0);
}

void ___ZN14ControllerImpl19stopRecordForStreamEP17AVVoiceControllermU13block_pointerFvmb15AVVCStreamStateP7NSErrorE_block_invoke_313(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _BOOL8 v3;
  uint64_t v4;
  id v5;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_DWORD *)(a1 + 56) == 0;
  v4 = *(_QWORD *)(a1 + 48);
  objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2F90]);
  v5 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, uint64_t, _BOOL8, uint64_t))(v1 + 16))(v1, v2, v3, v4);

}

void sub_19B7F04C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t ControllerImpl::stopRecordForStream(ControllerImpl *this, AVVoiceController *a2, uint64_t a3)
{
  AVVoiceController *v5;
  AVVoiceController *v6;
  uint64_t v7;
  _QWORD v9[4];
  AVVoiceController *v10;
  uint64_t *v11;
  ControllerImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;

  v5 = a2;
  v14 = 0;
  v15 = &v14;
  v16 = 0x2020000000;
  v17 = 0;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = ___ZN14ControllerImpl19stopRecordForStreamEP17AVVoiceControllerm_block_invoke;
  v9[3] = &unk_1E3BEC310;
  v12 = this;
  v6 = v5;
  v13 = a3;
  v10 = v6;
  v11 = &v14;
  makeSynchronous(v9);
  v7 = *((unsigned int *)v15 + 6);

  _Block_object_dispose(&v14, 8);
  return v7;
}

void sub_19B7F0594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  va_list va;

  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl19stopRecordForStreamEP17AVVoiceControllerm_block_invoke(_QWORD *a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  _QWORD v9[4];
  id v10;
  uint64_t v11;

  v3 = a2;
  v4 = a1[6];
  v5 = a1[7];
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = ___ZN14ControllerImpl19stopRecordForStreamEP17AVVoiceControllerm_block_invoke_2;
  v9[3] = &unk_1E3BEC298;
  v7 = (void *)a1[4];
  v6 = a1[5];
  v10 = v3;
  v11 = v6;
  v8 = v3;
  ControllerImpl::stopRecordForStream(v4, v7, v5, v9);

}

void sub_19B7F0648(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl19stopRecordForStreamEP17AVVoiceControllerm_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  NSObject *v6;
  id v7;

  v7 = a5;
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = objc_msgSend(v7, "code");
  v6 = *(NSObject **)(a1 + 32);
  if (v6)
    dispatch_semaphore_signal(v6);

}

void sub_19B7F06AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl30getCurrentStreamStateForStreamEP17AVVoiceControllermU13block_pointerFvmb15AVVCStreamStateP7NSErrorE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  id v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  NSObject *v16;
  id v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  _BOOL4 v21;
  id v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  _QWORD v27[4];
  id v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  _QWORD v34[4];
  id v35;
  uint64_t v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  uint8_t buf[4];
  const char *v40;
  __int16 v41;
  int v42;
  __int16 v43;
  uint64_t v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  ControllerImpl::_lookupEngineForStreamID((ControllerImpl *)&v37, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 576), *(std::__shared_weak_count **)(*(_QWORD *)(a1 + 40) + 584), *(_QWORD *)(a1 + 56));
  v2 = v37;
  if (!v37)
  {
    if (kAVVCScope)
    {
      v16 = *(id *)kAVVCScope;
      if (!v16)
      {
LABEL_25:
        v19 = *(void **)(a1 + 32);
        v20 = *(_QWORD *)(a1 + 40);
        v21 = v19 != 0;
        v34[0] = MEMORY[0x1E0C809B0];
        v34[1] = 3221225472;
        v34[2] = ___ZN14ControllerImpl30getCurrentStreamStateForStreamEP17AVVoiceControllermU13block_pointerFvmb15AVVCStreamStateP7NSErrorE_block_invoke_315;
        v34[3] = &unk_1E3BECB48;
        v22 = v19;
        v23 = *(_QWORD *)(a1 + 56);
        v35 = v22;
        v36 = v23;
        ControllerImpl::safeNotifyAlwaysAsync(v20, v21, v34);

        goto LABEL_26;
      }
    }
    else
    {
      v16 = MEMORY[0x1E0C81028];
      v17 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      v18 = *(_QWORD *)(a1 + 56);
      *(_DWORD *)buf = 136315650;
      v40 = "ControllerImpl.mm";
      v41 = 1024;
      v42 = 5083;
      v43 = 2048;
      v44 = v18;
      _os_log_impl(&dword_19B733000, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d getCurrentStreamState: Cannot find recording engine for streamID(%lu).", buf, 0x1Cu);
    }

    goto LABEL_25;
  }
  v27[0] = MEMORY[0x1E0C809B0];
  v27[1] = 3321888768;
  v27[2] = ___ZN14ControllerImpl30getCurrentStreamStateForStreamEP17AVVoiceControllermU13block_pointerFvmb15AVVCStreamStateP7NSErrorE_block_invoke_2;
  v27[3] = &unk_1E3BEAB80;
  v29 = v37;
  v30 = v38;
  if (v38)
  {
    p_shared_owners = (unint64_t *)&v38->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = *(std::__shared_weak_count **)(a1 + 48);
  v31 = *(_QWORD *)(a1 + 40);
  v32 = v5;
  if (v5)
  {
    v6 = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = *(id *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 56);
  v28 = v8;
  v33 = v9;
  (*(void (**)(uint64_t, _QWORD *, const char *))(*(_QWORD *)v2 + 360))(v2, v27, "getCurrentStreamStateForStream_block_invoke");

  v10 = v32;
  if (v32)
  {
    v11 = (unint64_t *)&v32->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = v30;
  if (v30)
  {
    v14 = (unint64_t *)&v30->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
LABEL_26:
  v24 = v38;
  if (v38)
  {
    v25 = (unint64_t *)&v38->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
}

void sub_19B7F0990(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  uint64_t v23;

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v23 - 96);
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl30getCurrentStreamStateForStreamEP17AVVoiceControllermU13block_pointerFvmb15AVVCStreamStateP7NSErrorE_block_invoke_315(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  id v3;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2F90], -11793, 0);
  v3 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(v1 + 16))(v1, v2, 0, 0);

}

void sub_19B7F0A40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl30getCurrentStreamStateForStreamEP17AVVoiceControllermU13block_pointerFvmb15AVVCStreamStateP7NSErrorE_block_invoke_2(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  _BOOL4 v5;
  id v6;
  uint64_t v7;
  _QWORD v8[4];
  id v9;
  uint64_t v10;
  uint64_t v11;

  v2 = (void *)a1[4];
  v3 = *(_QWORD *)(a1[5] + 224);
  v4 = a1[7];
  v5 = v2 != 0;
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = ___ZN14ControllerImpl30getCurrentStreamStateForStreamEP17AVVoiceControllermU13block_pointerFvmb15AVVCStreamStateP7NSErrorE_block_invoke_3;
  v8[3] = &unk_1E3BEC2C0;
  v6 = v2;
  v7 = a1[9];
  v9 = v6;
  v10 = v7;
  v11 = v3;
  ControllerImpl::safeNotifyAlwaysAsync(v4, v5, v8);

}

void sub_19B7F0AE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{

  _Unwind_Resume(a1);
}

_QWORD *__copy_helper_block_ea8_40c47_ZTSNSt3__110shared_ptrI19AVVCRecordingEngineEE56c42_ZTSNSt3__110shared_ptrI14ControllerImplEE(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = a2[6];
  result[5] = a2[5];
  result[6] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  v5 = a2[8];
  result[7] = a2[7];
  result[8] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return result;
}

uint64_t __destroy_helper_block_ea8_40c47_ZTSNSt3__110shared_ptrI19AVVCRecordingEngineEE56c42_ZTSNSt3__110shared_ptrI14ControllerImplEE(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 + 40;
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](a1 + 56);
  return std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v1);
}

uint64_t ___ZN14ControllerImpl30getCurrentStreamStateForStreamEP17AVVoiceControllermU13block_pointerFvmb15AVVCStreamStateP7NSErrorE_block_invoke_3(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, _QWORD, _QWORD))(a1[4] + 16))(a1[4], a1[5], 1, a1[6], 0);
}

uint64_t ControllerImpl::getCurrentStreamStateForStream(ControllerImpl *this, AVVoiceController *a2, uint64_t a3)
{
  AVVoiceController *v5;
  AVVoiceController *v6;
  uint64_t v7;
  _QWORD v9[4];
  AVVoiceController *v10;
  uint64_t *v11;
  ControllerImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;

  v5 = a2;
  v14 = 0;
  v15 = &v14;
  v16 = 0x2020000000;
  v17 = 0;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = ___ZN14ControllerImpl30getCurrentStreamStateForStreamEP17AVVoiceControllerm_block_invoke;
  v9[3] = &unk_1E3BEC310;
  v12 = this;
  v13 = a3;
  v10 = v5;
  v11 = &v14;
  v6 = v5;
  makeSynchronous(v9);
  v7 = v15[3];

  _Block_object_dispose(&v14, 8);
  return v7;
}

void sub_19B7F0C30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;
  uint64_t v14;

  _Block_object_dispose((const void *)(v14 - 48), 8);
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl30getCurrentStreamStateForStreamEP17AVVoiceControllerm_block_invoke(_QWORD *a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _QWORD *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD v20[4];
  id v21;
  uint64_t v22;
  _QWORD v23[4];
  id v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;

  v3 = a2;
  v5 = a1[6];
  v4 = a1[7];
  v6 = MEMORY[0x1E0C809B0];
  v20[0] = MEMORY[0x1E0C809B0];
  v20[1] = 3221225472;
  v20[2] = ___ZN14ControllerImpl30getCurrentStreamStateForStreamEP17AVVoiceControllerm_block_invoke_2;
  v20[3] = &unk_1E3BEC298;
  v7 = a1[5];
  v21 = v3;
  v22 = v7;
  v8 = v3;
  v9 = v20;
  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v28, *(_QWORD *)(v5 + 8), *(std::__shared_weak_count **)(v5 + 16));
  v23[0] = v6;
  v23[1] = 3321888768;
  v23[2] = ___ZN14ControllerImpl30getCurrentStreamStateForStreamEP17AVVoiceControllermU13block_pointerFvmb15AVVCStreamStateP7NSErrorE_block_invoke;
  v23[3] = &unk_1E3BEA488;
  v10 = v28;
  v25 = v28;
  v26 = v29;
  if (v29)
  {
    p_shared_owners = (unint64_t *)&v29->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v27 = v4;
  v13 = v9;
  v24 = v13;
  ControllerImpl::safeWork(v10, v23, (uint64_t)"getCurrentStreamStateForStream");

  v14 = v26;
  if (v26)
  {
    v15 = (unint64_t *)&v26->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = v29;
  if (v29)
  {
    v18 = (unint64_t *)&v29->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }

}

void sub_19B7F0DDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v21);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v22 - 64);

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl32getRecordBufferDurationForStreamEmU13block_pointerFvmdP7NSErrorE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  id v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  NSObject *v16;
  id v17;
  void *v18;
  uint64_t v19;
  _BOOL4 v20;
  id v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  _QWORD v26[4];
  id v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  uint64_t v32;
  _QWORD v33[4];
  id v34;
  uint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  uint8_t buf[4];
  const char *v39;
  __int16 v40;
  int v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  ControllerImpl::_lookupEngineForStreamID((ControllerImpl *)&v36, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 576), *(std::__shared_weak_count **)(*(_QWORD *)(a1 + 40) + 584), *(_QWORD *)(a1 + 56));
  v2 = v36;
  if (!v36)
  {
    if (kAVVCScope)
    {
      v16 = *(id *)kAVVCScope;
      if (!v16)
      {
LABEL_25:
        v18 = *(void **)(a1 + 32);
        v19 = *(_QWORD *)(a1 + 40);
        v20 = v18 != 0;
        v33[0] = MEMORY[0x1E0C809B0];
        v33[1] = 3221225472;
        v33[2] = ___ZN14ControllerImpl32getRecordBufferDurationForStreamEmU13block_pointerFvmdP7NSErrorE_block_invoke_318;
        v33[3] = &unk_1E3BECB48;
        v21 = v18;
        v22 = *(_QWORD *)(a1 + 56);
        v34 = v21;
        v35 = v22;
        ControllerImpl::safeNotifyAlwaysAsync(v19, v20, v33);

        goto LABEL_26;
      }
    }
    else
    {
      v16 = MEMORY[0x1E0C81028];
      v17 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v39 = "ControllerImpl.mm";
      v40 = 1024;
      v41 = 5118;
      _os_log_impl(&dword_19B733000, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d getRecordBufferDurationForStream: Nil recording engine", buf, 0x12u);
    }

    goto LABEL_25;
  }
  v26[0] = MEMORY[0x1E0C809B0];
  v26[1] = 3321888768;
  v26[2] = ___ZN14ControllerImpl32getRecordBufferDurationForStreamEmU13block_pointerFvmdP7NSErrorE_block_invoke_2;
  v26[3] = &unk_1E3BEAB80;
  v28 = v36;
  v29 = v37;
  if (v37)
  {
    p_shared_owners = (unint64_t *)&v37->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = *(std::__shared_weak_count **)(a1 + 48);
  v30 = *(_QWORD *)(a1 + 40);
  v31 = v5;
  if (v5)
  {
    v6 = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = *(id *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 56);
  v27 = v8;
  v32 = v9;
  (*(void (**)(uint64_t, _QWORD *, const char *))(*(_QWORD *)v2 + 360))(v2, v26, "getRecordBufferDurationForStream_block_invoke");

  v10 = v31;
  if (v31)
  {
    v11 = (unint64_t *)&v31->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = v29;
  if (v29)
  {
    v14 = (unint64_t *)&v29->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
LABEL_26:
  v23 = v37;
  if (v37)
  {
    v24 = (unint64_t *)&v37->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
}

void sub_19B7F10F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  uint64_t v23;

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v23 - 80);
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl32getRecordBufferDurationForStreamEmU13block_pointerFvmdP7NSErrorE_block_invoke_318(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  id v3;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2F90], -11793, 0);
  v3 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, uint64_t, double))(v1 + 16))(v1, v2, 0.0);

}

void sub_19B7F11A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl32getRecordBufferDurationForStreamEmU13block_pointerFvmdP7NSErrorE_block_invoke_2(_QWORD *a1)
{
  uint64_t v2;
  double v3;
  unsigned int v4;
  int v5;
  double v6;
  NSObject *v7;
  id v8;
  double v9;
  NSObject *v10;
  id v11;
  uint64_t v12;
  void *v13;
  _BOOL4 v14;
  id v15;
  uint64_t v16;
  id v17;
  double v18;
  _QWORD v19[4];
  id v20;
  uint64_t v21;
  double v22;
  uint8_t buf[4];
  const char *v24;
  __int16 v25;
  int v26;
  __int16 v27;
  double v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v2 = a1[5];
  v3 = *(double *)(v2 + 24);
  if (v3 == 0.0 || (v4 = *(_DWORD *)(v2 + 256)) == 0)
  {
    v6 = *(double *)(v2 + 264);
    goto LABEL_14;
  }
  if (*(_DWORD *)(v2 + 32) != 1936745848 || (v5 = *(_DWORD *)(v2 + 44), v5 == 1600) || v5 == 3200)
  {
    v6 = (float)(1.0 / (float)v4);
    if (kAVVCScope)
    {
      v7 = *(id *)kAVVCScope;
      if (!v7)
        goto LABEL_14;
    }
    else
    {
      v7 = MEMORY[0x1E0C81028];
      v8 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_QWORD *)&v9 = *(unsigned int *)(v2 + 256);
      *(_DWORD *)buf = 136315650;
      v24 = "AVVCRecordingEngine.mm";
      v25 = 1024;
      v26 = 462;
      v27 = 2048;
      v28 = v9;
      _os_log_impl(&dword_19B733000, v7, OS_LOG_TYPE_DEFAULT, "%25s:%-5d getRecordBufferDuration: choice 2 mRecordBasePacketsPerSecond (%lu)", buf, 0x1Cu);
    }
LABEL_13:

    goto LABEL_14;
  }
  v6 = (double)(2 * v5) / v3;
  if (!kAVVCScope)
  {
    v7 = MEMORY[0x1E0C81028];
    v17 = MEMORY[0x1E0C81028];
LABEL_26:
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_QWORD *)&v18 = *(unsigned int *)(v2 + 256);
      *(_DWORD *)buf = 136315650;
      v24 = "AVVCRecordingEngine.mm";
      v25 = 1024;
      v26 = 458;
      v27 = 2048;
      v28 = v18;
      _os_log_impl(&dword_19B733000, v7, OS_LOG_TYPE_DEFAULT, "%25s:%-5d getRecordBufferDuration: choice 1 mRecordBasePacketsPerSecond (%lu)", buf, 0x1Cu);
    }
    goto LABEL_13;
  }
  v7 = *(id *)kAVVCScope;
  if (v7)
    goto LABEL_26;
LABEL_14:
  if (kAVVCScope)
  {
    v10 = *(id *)kAVVCScope;
    if (!v10)
      goto LABEL_21;
  }
  else
  {
    v10 = MEMORY[0x1E0C81028];
    v11 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315650;
    v24 = "AVVCRecordingEngine.mm";
    v25 = 1024;
    v26 = 469;
    v27 = 2048;
    v28 = v6;
    _os_log_impl(&dword_19B733000, v10, OS_LOG_TYPE_DEBUG, "%25s:%-5d getRecordBufferDuration: returning %.3f seconds", buf, 0x1Cu);
  }

LABEL_21:
  v12 = a1[7];
  v13 = (void *)a1[4];
  v14 = v13 != 0;
  v19[0] = MEMORY[0x1E0C809B0];
  v19[1] = 3221225472;
  v19[2] = ___ZN14ControllerImpl32getRecordBufferDurationForStreamEmU13block_pointerFvmdP7NSErrorE_block_invoke_3;
  v19[3] = &unk_1E3BEC2C0;
  v15 = v13;
  v16 = a1[9];
  v20 = v15;
  v21 = v16;
  v22 = v6;
  ControllerImpl::safeNotifyAlwaysAsync(v12, v14, v19);

}

void sub_19B7F14A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl32getRecordBufferDurationForStreamEmU13block_pointerFvmdP7NSErrorE_block_invoke_3(double *a1)
{
  uint64_t v1;
  uint64_t v2;
  double v3;
  id v4;

  v1 = *((_QWORD *)a1 + 4);
  v2 = *((_QWORD *)a1 + 5);
  v3 = a1[6];
  objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2F90], 0, 0);
  v4 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, uint64_t, double))(v1 + 16))(v1, v2, v3);

}

void sub_19B7F1538(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

double ControllerImpl::getRecordBufferDurationForStream(ControllerImpl *this, uint64_t a2)
{
  double v2;
  _QWORD v4[7];
  uint64_t v5;
  double *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = 0;
  v6 = (double *)&v5;
  v7 = 0x2020000000;
  v8 = 0;
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = ___ZN14ControllerImpl32getRecordBufferDurationForStreamEm_block_invoke;
  v4[3] = &unk_1E3BEC360;
  v4[5] = this;
  v4[6] = a2;
  v4[4] = &v5;
  makeSynchronous(v4);
  v2 = v6[3];
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_19B7F15E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl32getRecordBufferDurationForStreamEm_block_invoke(_QWORD *a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _QWORD *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD v20[4];
  id v21;
  uint64_t v22;
  _QWORD v23[4];
  id v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;

  v3 = a2;
  v5 = a1[5];
  v4 = a1[6];
  v6 = MEMORY[0x1E0C809B0];
  v20[0] = MEMORY[0x1E0C809B0];
  v20[1] = 3221225472;
  v20[2] = ___ZN14ControllerImpl32getRecordBufferDurationForStreamEm_block_invoke_2;
  v20[3] = &unk_1E3BEC338;
  v7 = a1[4];
  v21 = v3;
  v22 = v7;
  v8 = v3;
  v9 = v20;
  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v28, *(_QWORD *)(v5 + 8), *(std::__shared_weak_count **)(v5 + 16));
  v23[0] = v6;
  v23[1] = 3321888768;
  v23[2] = ___ZN14ControllerImpl32getRecordBufferDurationForStreamEmU13block_pointerFvmdP7NSErrorE_block_invoke;
  v23[3] = &unk_1E3BEA488;
  v10 = v28;
  v25 = v28;
  v26 = v29;
  if (v29)
  {
    p_shared_owners = (unint64_t *)&v29->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v27 = v4;
  v13 = v9;
  v24 = v13;
  ControllerImpl::safeWork(v10, v23, (uint64_t)"getRecordBufferDurationForStream");

  v14 = v26;
  if (v26)
  {
    v15 = (unint64_t *)&v26->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = v29;
  if (v29)
  {
    v18 = (unint64_t *)&v29->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }

}

void sub_19B7F1780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v21);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v22 - 64);

  _Unwind_Resume(a1);
}

void ControllerImpl::configureAlertBehaviorForStream(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id v10;
  NSObject *v11;
  uint64_t v12;
  id v13;
  unint64_t *v14;
  unint64_t v15;
  id v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD v23[4];
  id v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  _BYTE buf[18];
  __int16 v30;
  uint64_t v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a3;
  v9 = a4;
  if (kAVVCScope)
  {
    if ((*(_BYTE *)(kAVVCScope + 8) & 1) != 0)
    {
      v10 = *(id *)kAVVCScope;
      if (v10)
      {
        v11 = v10;
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "ControllerImpl.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 5152;
          v30 = 2048;
          v31 = objc_msgSend(v8, "streamID");
          _os_log_impl(&dword_19B733000, v11, OS_LOG_TYPE_DEBUG, "%25s:%-5d configureAlertBehaviorForStream completion streamID(%lu)", buf, 0x1Cu);
        }

      }
    }
  }
  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(buf, *(_QWORD *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16));
  v12 = *(_QWORD *)buf;
  v23[0] = MEMORY[0x1E0C809B0];
  v23[1] = 3321888768;
  v23[2] = ___ZN14ControllerImpl31configureAlertBehaviorForStreamEP17AVVoiceControllerP34AVVCConfigureAlertBehaviorSettingsU13block_pointerFvP7NSErrorE_block_invoke;
  v23[3] = &unk_1E3BEA950;
  v26 = a1;
  v13 = v8;
  v24 = v13;
  v27 = v12;
  v28 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v14 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v16 = v9;
  v25 = v16;
  ControllerImpl::safeWork(v12, v23, (uint64_t)"configureAlertBehaviorForStream");

  v17 = v28;
  if (v28)
  {
    p_shared_owners = (unint64_t *)&v28->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }

  v20 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v21 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }

}

void sub_19B7F1A1C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl31configureAlertBehaviorForStreamEP17AVVoiceControllerP34AVVCConfigureAlertBehaviorSettingsU13block_pointerFvP7NSErrorE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  id v19;
  id v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  _BOOL4 v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  _QWORD v29[4];
  id v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  _QWORD v37[4];
  id v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  uint8_t buf[4];
  const char *v42;
  __int16 v43;
  int v44;
  __int16 v45;
  uint64_t v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 48);
  ControllerImpl::_lookupEngineForStreamID((ControllerImpl *)&v39, *(_QWORD *)(v2 + 576), *(std::__shared_weak_count **)(v2 + 584), objc_msgSend(*(id *)(a1 + 32), "streamID"));
  if (!v39)
  {
    if (kAVVCScope)
    {
      v19 = *(id *)kAVVCScope;
      if (!v19)
      {
LABEL_25:
        v23 = *(_QWORD *)(a1 + 56);
        v24 = *(void **)(a1 + 40);
        v25 = v24 != 0;
        v37[0] = MEMORY[0x1E0C809B0];
        v37[1] = 3221225472;
        v37[2] = ___ZN14ControllerImpl31configureAlertBehaviorForStreamEP17AVVoiceControllerP34AVVCConfigureAlertBehaviorSettingsU13block_pointerFvP7NSErrorE_block_invoke_322;
        v37[3] = &unk_1E3BECB00;
        v38 = v24;
        ControllerImpl::safeNotifyAlwaysAsync(v23, v25, v37);

        goto LABEL_26;
      }
    }
    else
    {
      v19 = (id)MEMORY[0x1E0C81028];
      v20 = MEMORY[0x1E0C81028];
    }
    v21 = v19;
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      v22 = objc_msgSend(*(id *)(a1 + 32), "streamID");
      *(_DWORD *)buf = 136315650;
      v42 = "ControllerImpl.mm";
      v43 = 1024;
      v44 = 5159;
      v45 = 2048;
      v46 = v22;
      _os_log_impl(&dword_19B733000, v21, OS_LOG_TYPE_ERROR, "%25s:%-5d startRecordForStream: Cannot find recording engine for streamID(%lu). Failing.", buf, 0x1Cu);
    }

    goto LABEL_25;
  }
  v3 = *(_QWORD **)(a1 + 56);
  v3[43] = -1;
  v3[44] = -1;
  v3[42] = -1;
  v4 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(v4 + 336) = objc_msgSend(*(id *)(a1 + 32), "startAlert");
  v5 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(v5 + 344) = objc_msgSend(*(id *)(a1 + 32), "stopAlert");
  v6 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(v6 + 352) = objc_msgSend(*(id *)(a1 + 32), "stopOnErrorAlert");
  v29[0] = MEMORY[0x1E0C809B0];
  v29[1] = 3321888768;
  v29[2] = ___ZN14ControllerImpl31configureAlertBehaviorForStreamEP17AVVoiceControllerP34AVVCConfigureAlertBehaviorSettingsU13block_pointerFvP7NSErrorE_block_invoke_2;
  v29[3] = &unk_1E3BEAFA8;
  v7 = v39;
  v32 = v2;
  v33 = v39;
  v34 = v40;
  if (v40)
  {
    p_shared_owners = (unint64_t *)&v40->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v10 = *(std::__shared_weak_count **)(a1 + 64);
  v35 = *(_QWORD *)(a1 + 56);
  v36 = v10;
  if (v10)
  {
    v11 = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v31 = *(id *)(a1 + 40);
  v30 = *(id *)(a1 + 32);
  (*(void (**)(uint64_t, _QWORD *, const char *))(*(_QWORD *)v7 + 360))(v7, v29, "configureAlertBehaviorForStream_block_invoke");

  v13 = v36;
  if (v36)
  {
    v14 = (unint64_t *)&v36->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = v34;
  if (v34)
  {
    v17 = (unint64_t *)&v34->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
LABEL_26:
  v26 = v40;
  if (v40)
  {
    v27 = (unint64_t *)&v40->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
}

void sub_19B7F1DA8(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v2 - 96);
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl31configureAlertBehaviorForStreamEP17AVVoiceControllerP34AVVCConfigureAlertBehaviorSettingsU13block_pointerFvP7NSErrorE_block_invoke_322(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 32);
  objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2F90], -11793, 0);
  v2 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t))(v1 + 16))(v1);

}

void sub_19B7F1E6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl31configureAlertBehaviorForStreamEP17AVVoiceControllerP34AVVCConfigureAlertBehaviorSettingsU13block_pointerFvP7NSErrorE_block_invoke_2(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  BOOL v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD v21[4];
  id v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  BOOL v30;

  v2 = *(_QWORD *)(a1 + 48);
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 56) + 64))(*(_QWORD *)(a1 + 56), 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "sessionState") == 7;

  v21[0] = MEMORY[0x1E0C809B0];
  v6 = *(_QWORD *)(a1 + 56);
  v5 = *(std::__shared_weak_count **)(a1 + 64);
  v7 = *(_QWORD *)(v6 + 280);
  v21[2] = ___ZN14ControllerImpl31configureAlertBehaviorForStreamEP17AVVoiceControllerP34AVVCConfigureAlertBehaviorSettingsU13block_pointerFvP7NSErrorE_block_invoke_3;
  v21[3] = &unk_1E3BEB208;
  v8 = *(_QWORD *)(a1 + 72);
  v21[1] = 3321888768;
  v30 = v4;
  v24 = v2;
  v25 = v7;
  v26 = v6;
  v27 = v5;
  v9 = v8;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    v9 = *(_QWORD *)(a1 + 72);
  }
  v12 = *(std::__shared_weak_count **)(a1 + 80);
  v28 = v9;
  v29 = v12;
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v23 = *(id *)(a1 + 40);
  v22 = *(id *)(a1 + 32);
  ControllerImpl::safeWork(v8, v21, (uint64_t)"configureAlertBehaviorForStream_block_invoke");

  v15 = v29;
  if (v29)
  {
    v16 = (unint64_t *)&v29->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = v27;
  if (v27)
  {
    v19 = (unint64_t *)&v27->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_19B7F201C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  uint64_t v15;
  uint64_t v16;

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v16);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl31configureAlertBehaviorForStreamEP17AVVoiceControllerP34AVVCConfigureAlertBehaviorSettingsU13block_pointerFvP7NSErrorE_block_invoke_3(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  id v15;
  id v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  _BOOL4 v21;
  _QWORD v22[4];
  id v23;
  _QWORD v24[4];
  id v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  uint64_t v28[2];
  uint8_t buf[4];
  const char *v30;
  __int16 v31;
  int v32;
  __int16 v33;
  uint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(a1 + 96))
  {
    if (kAVVCScope)
    {
      v15 = *(id *)kAVVCScope;
      if (!v15)
      {
LABEL_25:
        v19 = *(_QWORD *)(a1 + 80);
        v20 = *(void **)(a1 + 40);
        v21 = v20 != 0;
        v22[0] = MEMORY[0x1E0C809B0];
        v22[1] = 3221225472;
        v22[2] = ___ZN14ControllerImpl31configureAlertBehaviorForStreamEP17AVVoiceControllerP34AVVCConfigureAlertBehaviorSettingsU13block_pointerFvP7NSErrorE_block_invoke_323;
        v22[3] = &unk_1E3BECB00;
        v23 = v20;
        ControllerImpl::safeNotifyAlwaysAsync(v19, v21, v22);

        return;
      }
    }
    else
    {
      v15 = (id)MEMORY[0x1E0C81028];
      v16 = MEMORY[0x1E0C81028];
    }
    v17 = v15;
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      v18 = objc_msgSend(*(id *)(a1 + 32), "streamID");
      *(_DWORD *)buf = 136315650;
      v30 = "ControllerImpl.mm";
      v31 = 1024;
      v32 = 5196;
      v33 = 2048;
      v34 = v18;
      _os_log_impl(&dword_19B733000, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d configureAlertBehaviorForStream: session not active so can't config alerts for streamID(%lu)", buf, 0x1Cu);
    }

    goto LABEL_25;
  }
  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 56);
  v4 = *(std::__shared_weak_count **)(a1 + 72);
  v28[0] = *(_QWORD *)(a1 + 64);
  v28[1] = (uint64_t)v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v24[0] = MEMORY[0x1E0C809B0];
  v24[1] = 3321888768;
  v24[2] = ___ZN14ControllerImpl31configureAlertBehaviorForStreamEP17AVVoiceControllerP34AVVCConfigureAlertBehaviorSettingsU13block_pointerFvP7NSErrorE_block_invoke_4;
  v24[3] = &unk_1E3BEA160;
  v7 = *(std::__shared_weak_count **)(a1 + 88);
  v26 = *(_QWORD *)(a1 + 80);
  v27 = v7;
  if (v7)
  {
    v8 = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v25 = *(id *)(a1 + 40);
  ControllerImpl::configureAlertModeFromModeAndEngine(v2, v3, v28, v24);
  if (v4)
  {
    v10 = (unint64_t *)&v4->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

  v12 = v27;
  if (v27)
  {
    v13 = (unint64_t *)&v27->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_19B7F22D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl31configureAlertBehaviorForStreamEP17AVVoiceControllerP34AVVCConfigureAlertBehaviorSettingsU13block_pointerFvP7NSErrorE_block_invoke_4(uint64_t a1, int a2)
{
  void *v3;
  uint64_t v4;
  _BOOL4 v5;
  _QWORD v6[4];
  id v7;
  int v8;

  v3 = *(void **)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = v3 != 0;
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = ___ZN14ControllerImpl31configureAlertBehaviorForStreamEP17AVVoiceControllerP34AVVCConfigureAlertBehaviorSettingsU13block_pointerFvP7NSErrorE_block_invoke_5;
  v6[3] = &unk_1E3BEBE50;
  v7 = v3;
  v8 = a2;
  ControllerImpl::safeNotifyAlwaysAsync(v4, v5, v6);

}

void sub_19B7F23A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl31configureAlertBehaviorForStreamEP17AVVoiceControllerP34AVVCConfigureAlertBehaviorSettingsU13block_pointerFvP7NSErrorE_block_invoke_323(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 32);
  objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2F90], -11782, 0);
  v2 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t))(v1 + 16))(v1);

}

void sub_19B7F2418(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl31configureAlertBehaviorForStreamEP17AVVoiceControllerP34AVVCConfigureAlertBehaviorSettingsU13block_pointerFvP7NSErrorE_block_invoke_5(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 32);
  objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2F90], *(int *)(a1 + 40), 0);
  v2 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t))(v1 + 16))(v1);

}

void sub_19B7F2490(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t ControllerImpl::configureAlertBehaviorForStream(ControllerImpl *this, AVVoiceController *a2, AVVCConfigureAlertBehaviorSettings *a3)
{
  AVVoiceController *v5;
  AVVCConfigureAlertBehaviorSettings *v6;
  AVVoiceController *v7;
  AVVCConfigureAlertBehaviorSettings *v8;
  uint64_t v9;
  _QWORD v11[4];
  AVVoiceController *v12;
  AVVCConfigureAlertBehaviorSettings *v13;
  uint64_t *v14;
  ControllerImpl *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  int v19;

  v5 = a2;
  v6 = a3;
  v16 = 0;
  v17 = &v16;
  v18 = 0x2020000000;
  v19 = 0;
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = ___ZN14ControllerImpl31configureAlertBehaviorForStreamEP17AVVoiceControllerP34AVVCConfigureAlertBehaviorSettings_block_invoke;
  v11[3] = &unk_1E3BEC220;
  v15 = this;
  v7 = v5;
  v12 = v7;
  v8 = v6;
  v13 = v8;
  v14 = &v16;
  makeSynchronous(v11);
  v9 = *((unsigned int *)v17 + 6);

  _Block_object_dispose(&v16, 8);
  return v9;
}

void sub_19B7F2584(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void *a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  void *v10;
  va_list va;

  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl31configureAlertBehaviorForStreamEP17AVVoiceControllerP34AVVCConfigureAlertBehaviorSettings_block_invoke(_QWORD *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  _QWORD v9[4];
  id v10;
  uint64_t v11;

  v3 = a2;
  v4 = (void *)a1[4];
  v5 = (void *)a1[5];
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = ___ZN14ControllerImpl31configureAlertBehaviorForStreamEP17AVVoiceControllerP34AVVCConfigureAlertBehaviorSettings_block_invoke_2;
  v9[3] = &unk_1E3BEBE78;
  v6 = a1[6];
  v7 = a1[7];
  v10 = v3;
  v11 = v6;
  v8 = v3;
  ControllerImpl::configureAlertBehaviorForStream(v7, v4, v5, v9);

}

void sub_19B7F2644(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl31configureAlertBehaviorForStreamEP17AVVoiceControllerP34AVVCConfigureAlertBehaviorSettings_block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  id v5;

  v3 = a2;
  v5 = v3;
  if (v3)
    LODWORD(v3) = objc_msgSend(v3, "code");
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = (_DWORD)v3;
  v4 = *(NSObject **)(a1 + 32);
  if (v4)
    dispatch_semaphore_signal(v4);

}

void sub_19B7F26AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl19getAVVCSessionStateEmU13block_pointerFvm16AVVCSessionStateP7NSErrorE_block_invoke(_QWORD *a1)
{
  void *v2;
  void *v3;
  unsigned int v4;
  void *v5;
  uint64_t v6;
  NSObject *v7;
  id v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _BOOL4 v12;
  id v13;
  id v14;
  _QWORD v15[4];
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint8_t buf[4];
  const char *v21;
  __int16 v22;
  int v23;
  __int16 v24;
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  ControllerImpl::sessionManagerForStreamID(a1[5], a1[7], 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if (!v2)
  {
    if (kAVVCScope)
    {
      v7 = *(id *)kAVVCScope;
      if (!v7)
      {
LABEL_12:
        objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2F90], -11793, 0);
        v5 = (void *)objc_claimAutoreleasedReturnValue();
        v6 = 0;
        goto LABEL_13;
      }
    }
    else
    {
      v7 = MEMORY[0x1E0C81028];
      v8 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v9 = a1[7];
      *(_DWORD *)buf = 136315650;
      v21 = "ControllerImpl.mm";
      v22 = 1024;
      v23 = 5278;
      v24 = 2048;
      v25 = v9;
      _os_log_impl(&dword_19B733000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d ERROR: Cannot find sessionManager for streamID(%lu). Returning.", buf, 0x1Cu);
    }

    goto LABEL_12;
  }
  v4 = objc_msgSend(v2, "sessionState") - 1;
  if (v4 > 6)
  {
    v6 = 0;
    v5 = 0;
  }
  else
  {
    v5 = 0;
    v6 = qword_19B85A5F8[v4];
  }
LABEL_13:
  v10 = (void *)a1[4];
  v11 = a1[5];
  v12 = v10 != 0;
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 3221225472;
  v15[2] = ___ZN14ControllerImpl19getAVVCSessionStateEmU13block_pointerFvm16AVVCSessionStateP7NSErrorE_block_invoke_326;
  v15[3] = &unk_1E3BEC388;
  v13 = v10;
  v18 = a1[7];
  v19 = v6;
  v16 = v5;
  v17 = v13;
  v14 = v5;
  ControllerImpl::safeNotifyAlwaysAsync(v11, v12, v15);

}

void sub_19B7F28B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

uint64_t ___ZN14ControllerImpl19getAVVCSessionStateEmU13block_pointerFvm16AVVCSessionStateP7NSErrorE_block_invoke_326(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(a1[5] + 16))(a1[5], a1[6], a1[7], a1[4]);
}

uint64_t ControllerImpl::getAVVCSessionState(ControllerImpl *this, uint64_t a2)
{
  uint64_t v2;
  _QWORD v4[7];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v8 = 0;
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = ___ZN14ControllerImpl19getAVVCSessionStateEm_block_invoke;
  v4[3] = &unk_1E3BEC360;
  v4[5] = this;
  v4[6] = a2;
  v4[4] = &v5;
  makeSynchronous(v4);
  v2 = v6[3];
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_19B7F2984(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl19getAVVCSessionStateEm_block_invoke(_QWORD *a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _QWORD *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD v20[4];
  id v21;
  uint64_t v22;
  _QWORD v23[4];
  id v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;

  v3 = a2;
  v5 = a1[5];
  v4 = a1[6];
  v6 = MEMORY[0x1E0C809B0];
  v20[0] = MEMORY[0x1E0C809B0];
  v20[1] = 3221225472;
  v20[2] = ___ZN14ControllerImpl19getAVVCSessionStateEm_block_invoke_2;
  v20[3] = &unk_1E3BEC3B0;
  v7 = a1[4];
  v21 = v3;
  v22 = v7;
  v8 = v3;
  v9 = v20;
  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v28, *(_QWORD *)(v5 + 8), *(std::__shared_weak_count **)(v5 + 16));
  v23[0] = v6;
  v23[1] = 3321888768;
  v23[2] = ___ZN14ControllerImpl19getAVVCSessionStateEmU13block_pointerFvm16AVVCSessionStateP7NSErrorE_block_invoke;
  v23[3] = &unk_1E3BEA488;
  v10 = v28;
  v25 = v28;
  v26 = v29;
  if (v29)
  {
    p_shared_owners = (unint64_t *)&v29->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v27 = v4;
  v13 = v9;
  v24 = v13;
  ControllerImpl::safeWork(v10, v23, (uint64_t)"getAVVCSessionState");

  v14 = v26;
  if (v26)
  {
    v15 = (unint64_t *)&v26->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = v29;
  if (v29)
  {
    v18 = (unint64_t *)&v29->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }

}

void sub_19B7F2B24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v21);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v22 - 64);

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl12checkSessionEP17AVVoiceControllermb_block_invoke(uint64_t a1)
{
  void *v2;

  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 56) + 64))(*(_QWORD *)(a1 + 56), 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = (int)objc_msgSend(v2, "sessionState") < 5;

  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = AVVCRecordingEngine::setSessionActive(*(AVVCRecordingEngine **)(a1 + 56), *(unsigned __int8 *)(a1 + 72), (BOOL *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8)+ 24));
}

void sub_19B7F2C00(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl29activateAudioSessionForStreamEP17AVVoiceControllermbbU13block_pointerFvmbP7NSErrorE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  NSObject *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  _BOOL4 v20;
  id v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  _QWORD v26[4];
  id v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  char v35;
  char v36;
  _QWORD v37[4];
  id v38;
  uint64_t v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  uint8_t buf[4];
  const char *v43;
  __int16 v44;
  int v45;
  __int16 v46;
  uint64_t v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 48);
  ControllerImpl::_lookupEngineForStreamID((ControllerImpl *)&v40, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 576), *(std::__shared_weak_count **)(*(_QWORD *)(a1 + 56) + 584), *(_QWORD *)(a1 + 72));
  v3 = v40;
  if (!v40)
  {
    if (kAVVCScope)
    {
      v15 = *(id *)kAVVCScope;
      if (!v15)
      {
LABEL_25:
        v18 = *(_QWORD *)(a1 + 56);
        v19 = *(void **)(a1 + 40);
        v20 = v19 != 0;
        v37[0] = MEMORY[0x1E0C809B0];
        v37[1] = 3221225472;
        v37[2] = ___ZN14ControllerImpl29activateAudioSessionForStreamEP17AVVoiceControllermbbU13block_pointerFvmbP7NSErrorE_block_invoke_329;
        v37[3] = &unk_1E3BECB48;
        v21 = v19;
        v22 = *(_QWORD *)(a1 + 72);
        v38 = v21;
        v39 = v22;
        ControllerImpl::safeNotifyAlwaysAsync(v18, v20, v37);

        goto LABEL_26;
      }
    }
    else
    {
      v15 = MEMORY[0x1E0C81028];
      v16 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      v17 = *(_QWORD *)(a1 + 72);
      *(_DWORD *)buf = 136315650;
      v43 = "ControllerImpl.mm";
      v44 = 1024;
      v45 = 5389;
      v46 = 2048;
      v47 = v17;
      _os_log_impl(&dword_19B733000, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d activateAudioSessionForStream ERROR: Cannot find recording engine for streamID(%lu). Bailing.", buf, 0x1Cu);
    }

    goto LABEL_25;
  }
  v26[0] = MEMORY[0x1E0C809B0];
  v26[1] = 3321888768;
  v26[2] = ___ZN14ControllerImpl29activateAudioSessionForStreamEP17AVVoiceControllermbbU13block_pointerFvmbP7NSErrorE_block_invoke_2;
  v26[3] = &unk_1E3BEB278;
  v29 = v2;
  v30 = v40;
  v31 = v41;
  if (v41)
  {
    p_shared_owners = (unint64_t *)&v41->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v6 = *(std::__shared_weak_count **)(a1 + 64);
  v32 = *(_QWORD *)(a1 + 56);
  v33 = v6;
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v34 = *(_QWORD *)(a1 + 72);
  v35 = *(_BYTE *)(a1 + 80);
  v28 = *(id *)(a1 + 40);
  v27 = *(id *)(a1 + 32);
  v36 = *(_BYTE *)(a1 + 81);
  (*(void (**)(uint64_t, _QWORD *, const char *))(*(_QWORD *)v3 + 360))(v3, v26, "activateAudioSessionForStream_block_invoke");

  v9 = v33;
  if (v33)
  {
    v10 = (unint64_t *)&v33->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = v31;
  if (v31)
  {
    v13 = (unint64_t *)&v31->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
LABEL_26:
  v23 = v41;
  if (v41)
  {
    v24 = (unint64_t *)&v41->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
}

void sub_19B7F2F14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27)
{
  uint64_t v27;

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v27 - 112);
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl29activateAudioSessionForStreamEP17AVVoiceControllermbbU13block_pointerFvmbP7NSErrorE_block_invoke_329(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  id v3;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2F90], -11793, 0);
  v3 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v1 + 16))(v1, v2, 0);

}

void sub_19B7F2FC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl29activateAudioSessionForStreamEP17AVVoiceControllermbbU13block_pointerFvmbP7NSErrorE_block_invoke_2(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  BOOL v6;
  id v7;
  uint64_t v8;
  id v9;
  NSObject *v10;
  uint64_t v11;
  id v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  _QWORD v27[4];
  id v28;
  id v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  uint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  char v39;
  char v40;
  uint8_t v41[16];
  uint8_t buf[4];
  const char *v43;
  __int16 v44;
  int v45;
  __int16 v46;
  uint8_t *v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 48);
  AVVCRecordingEngine::getActivationContextSettings(*(AVVCRecordingEngine **)(a1 + 56));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "activationMode");
  objc_msgSend(v3, "activationDeviceUID");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
    v6 = 0;
  else
    v6 = v4 == 1986357346;
  if (v6)
  {
    AVVCRouteManager::getRecordDeviceUID(*(id **)(*(_QWORD *)(a1 + 56) + 376));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
  }
  if (!objc_msgSend(v3, "announceCallsEnabled"))
  {
    v8 = 0;
    goto LABEL_17;
  }
  if (!kAVVCScope)
  {
    v7 = (id)MEMORY[0x1E0C81028];
    v9 = MEMORY[0x1E0C81028];
    goto LABEL_13;
  }
  v7 = *(id *)kAVVCScope;
  if (v7)
  {
LABEL_13:
    v10 = v7;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)v41, v4);
      *(_DWORD *)buf = 136315650;
      v43 = "ControllerImpl.mm";
      v44 = 1024;
      v45 = 5423;
      v46 = 2080;
      v47 = v41;
      _os_log_impl(&dword_19B733000, v10, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Announce option set for %s activation mode", buf, 0x1Cu);
    }

  }
  v8 = 1;
LABEL_17:
  v11 = *(_QWORD *)(a1 + 72);
  v27[0] = MEMORY[0x1E0C809B0];
  v27[1] = 3321888768;
  v27[2] = ___ZN14ControllerImpl29activateAudioSessionForStreamEP17AVVoiceControllermbbU13block_pointerFvmbP7NSErrorE_block_invoke_330;
  v27[3] = &unk_1E3BEA060;
  v31 = v2;
  v12 = v5;
  v28 = v12;
  v14 = *(_QWORD *)(a1 + 72);
  v13 = *(std::__shared_weak_count **)(a1 + 80);
  v32 = v4;
  v33 = v14;
  v34 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }
  v18 = *(_QWORD *)(a1 + 56);
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  v35 = *(_QWORD *)(a1 + 88);
  v36 = v18;
  v37 = v17;
  if (v17)
  {
    v19 = (unint64_t *)&v17->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v39 = *(_BYTE *)(a1 + 96);
  v30 = *(id *)(a1 + 40);
  v38 = v8;
  v29 = *(id *)(a1 + 32);
  v40 = *(_BYTE *)(a1 + 97);
  ControllerImpl::safeWork(v11, v27, (uint64_t)"activateAudioSessionForStream_block_invoke");

  v21 = v37;
  if (v37)
  {
    v22 = (unint64_t *)&v37->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = v34;
  if (v34)
  {
    v25 = (unint64_t *)&v34->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }

}

void sub_19B7F32C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl29activateAudioSessionForStreamEP17AVVoiceControllermbbU13block_pointerFvmbP7NSErrorE_block_invoke_330(uint64_t a1)
{
  uint64_t v2;
  BOOL v3;
  id v4;
  void *v5;
  uint64_t v6;
  void *v7;
  NSObject *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  id v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  AVVoiceController *v38;
  ControllerImpl *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  AVVCRecordingEngine *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  int v52;
  NSObject *v53;
  void *v54;
  BOOL v55;
  id v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t *v63;
  NSObject *v64;
  char v65;
  BOOL v66;
  id v67;
  int v68;
  uint64_t v69;
  void *v70;
  _BOOL4 v71;
  id v72;
  uint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  uint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  uint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  id v88;
  uint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  ControllerImpl *v98;
  int8x8_t v99;
  uint8x8_t v100;
  _QWORD *v101;
  _QWORD *i;
  unint64_t v103;
  _QWORD *v104;
  float v105;
  float v106;
  unint64_t v107;
  _BOOL8 v108;
  unint64_t v109;
  unint64_t v110;
  int8x8_t prime;
  void *v112;
  void *v113;
  uint64_t v114;
  _QWORD *v115;
  unint64_t v116;
  uint8x8_t v117;
  unint64_t v118;
  uint8x8_t v119;
  uint64_t v120;
  _QWORD *v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  _QWORD *v126;
  unint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  unint64_t *v131;
  unint64_t v132;
  void *v133;
  _QWORD *v134;
  unint64_t v135;
  int8x8_t v136;
  _QWORD v137[4];
  id v138;
  uint64_t *v139;
  uint64_t v140;
  std::__shared_weak_count *v141;
  uint64_t v142;
  std::__shared_weak_count *v143;
  uint64_t v144;
  char v145;
  BOOL v146;
  _QWORD v147[4];
  id v148;
  uint64_t *v149;
  uint64_t v150;
  uint64_t v151;
  std::__shared_weak_count *v152;
  _BYTE v153[16];
  _QWORD v154[4];
  id v155;
  id v156;
  uint64_t *v157;
  uint64_t *v158;
  uint64_t v159;
  uint64_t v160;
  std::__shared_weak_count *v161;
  uint64_t v162;
  std::__shared_weak_count *v163;
  uint64_t v164;
  uint64_t v165;
  char v166;
  uint64_t v167;
  uint64_t *v168;
  uint64_t v169;
  char v170;
  uint64_t v171;
  std::__shared_weak_count *v172;
  _BYTE v173[16];
  uint64_t v174;
  uint64_t *v175;
  uint64_t v176;
  int v177;
  AVVCRecordingEngine *v178[4];
  _BYTE v179[16];
  AVVCRecordingEngine *v180;
  AVVCRecordingEngine *v181;
  uint64_t v182;
  uint64_t *v183;
  uint64_t v184;
  char v185;
  uint64_t v186;
  uint64_t *v187;
  uint64_t v188;
  char v189;
  uint64_t v190;
  uint64_t *v191;
  uint64_t v192;
  int v193;
  ControllerImpl *v194;
  AVVCRecordingEngine *v195;
  char v196[8];
  _BYTE buf[40];
  uint64_t *v198;
  uint64_t *v199;
  AVVCRecordingEngine *v200;
  AVVCRecordingEngine *v201;
  char v202;
  uint64_t v203;

  v203 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(a1 + 32) == 0;
  v4 = objc_alloc(MEMORY[0x1E0C99D80]);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", *(_QWORD *)(a1 + 64));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3)
    v6 = objc_msgSend(v4, "initWithObjectsAndKeys:", v5, CFSTR("activation trigger"), 0);
  else
    v6 = objc_msgSend(v4, "initWithObjectsAndKeys:", v5, CFSTR("activation trigger"), *(_QWORD *)(a1 + 32), CFSTR("activation device uid"), 0);
  v7 = (void *)v6;

  objc_storeStrong((id *)(*(_QWORD *)(a1 + 72) + 456), v7);
  if (kAVVCScope)
  {
    v8 = *(id *)kAVVCScope;
    if (!v8)
      goto LABEL_11;
  }
  else
  {
    v8 = MEMORY[0x1E0C81028];
    v9 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    v10 = *(_QWORD *)(a1 + 88);
    v11 = *(_QWORD *)(v2 + 456);
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = "ControllerImpl.mm";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 5444;
    *(_WORD *)&buf[18] = 2048;
    *(_QWORD *)&buf[20] = v10;
    *(_WORD *)&buf[28] = 2112;
    *(_QWORD *)&buf[30] = v11;
    _os_log_impl(&dword_19B733000, v8, OS_LOG_TYPE_DEFAULT, "%25s:%-5d About to activate audio session for stream(%lu). Current context: %@", buf, 0x26u);
  }

LABEL_11:
  v174 = 0;
  v175 = &v174;
  v176 = 0x2020000000;
  v177 = 0;
  v12 = *(_QWORD *)(a1 + 72);
  v13 = *(std::__shared_weak_count **)(a1 + 80);
  v171 = v12;
  v172 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  SessionLock::SessionLock(v173, v12, v13);
  if (v13)
  {
    v16 = (unint64_t *)&v13->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v167 = 0;
  v168 = &v167;
  v169 = 0x2020000000;
  v170 = 0;
  v18 = MEMORY[0x1E0C809B0];
  v154[0] = MEMORY[0x1E0C809B0];
  v154[1] = 3321888768;
  v154[2] = ___ZN14ControllerImpl29activateAudioSessionForStreamEP17AVVoiceControllermbbU13block_pointerFvmbP7NSErrorE_block_invoke_331;
  v154[3] = &unk_1E3BEA028;
  v166 = *(_BYTE *)(a1 + 120);
  v19 = *(_QWORD *)(a1 + 96);
  v159 = *(_QWORD *)(a1 + 88);
  v160 = v19;
  v20 = *(std::__shared_weak_count **)(a1 + 104);
  v161 = v20;
  if (v20)
  {
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  v157 = &v174;
  v23 = v7;
  v25 = *(_QWORD *)(a1 + 72);
  v24 = *(std::__shared_weak_count **)(a1 + 80);
  v155 = v23;
  v162 = v25;
  v163 = v24;
  if (v24)
  {
    v26 = (unint64_t *)&v24->__shared_owners_;
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  v156 = *(id *)(a1 + 48);
  v158 = &v167;
  v28 = *(_QWORD *)(a1 + 112);
  v164 = *(_QWORD *)(a1 + 64);
  v165 = v28;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v19 + 376))(v19, v154);
  if (!*((_BYTE *)v168 + 24))
  {
    v29 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(v29 + 528) = *(_QWORD *)(a1 + 64);
    v30 = *(std::__shared_weak_count **)(a1 + 80);
    v151 = v29;
    v152 = v30;
    if (v30)
    {
      v31 = (unint64_t *)&v30->__shared_owners_;
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
    }
    SessionUnlocker::SessionUnlocker(v153, v29, v30);
    if (v30)
    {
      v33 = (unint64_t *)&v30->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    v35 = *(_QWORD *)(a1 + 72);
    v36 = *(_QWORD *)(a1 + 88);
    v37 = *(_BYTE *)(a1 + 120);
    v38 = (AVVoiceController *)*(id *)(a1 + 40);
    TraceMethod::TraceMethod((TraceMethod *)v196, "checkSession");
    std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v194, *(_QWORD *)(v35 + 8), *(std::__shared_weak_count **)(v35 + 16));
    v190 = 0;
    v191 = &v190;
    v192 = 0x2020000000;
    v193 = 0;
    v186 = 0;
    v187 = &v186;
    v188 = 0x2020000000;
    v189 = 0;
    v182 = 0;
    v183 = &v182;
    v184 = 0x2020000000;
    v185 = 0;
    ControllerImpl::_lookupEngineForStreamID((ControllerImpl *)&v180, *((_QWORD *)v194 + 72), *((std::__shared_weak_count **)v194 + 73), v36);
    if (v180)
    {
      v39 = v194;
      v40 = (std::__shared_weak_count *)v195;
      v178[2] = (AVVCRecordingEngine *)v194;
      v178[3] = v195;
      if (v195)
      {
        v41 = (unint64_t *)((char *)v195 + 8);
        do
          v42 = __ldxr(v41);
        while (__stxr(v42 + 1, v41));
      }
      SessionLock::SessionLock(v179, (uint64_t)v39, v40);
      if (v40)
      {
        v43 = (unint64_t *)&v40->__shared_owners_;
        do
          v44 = __ldaxr(v43);
        while (__stlxr(v44 - 1, v43));
        if (!v44)
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }
      v45 = *((_QWORD *)v194 + 59);
      *((_QWORD *)v194 + 59) = v36;
      *(_QWORD *)buf = v18;
      *(_QWORD *)&buf[8] = 3321888768;
      *(_QWORD *)&buf[16] = ___ZN14ControllerImpl12checkSessionEP17AVVoiceControllermb_block_invoke;
      *(_QWORD *)&buf[24] = &unk_1E3BE5180;
      v46 = v180;
      *(_QWORD *)&buf[32] = &v182;
      v200 = v180;
      v201 = v181;
      if (v181)
      {
        v47 = (unint64_t *)((char *)v181 + 8);
        do
          v48 = __ldxr(v47);
        while (__stxr(v48 + 1, v47));
      }
      v202 = v37;
      v198 = &v190;
      v199 = &v186;
      (*(void (**)(AVVCRecordingEngine *, _BYTE *))(*(_QWORD *)v46 + 376))(v46, buf);
      if (*((_BYTE *)v187 + 24) || *((_DWORD *)v191 + 6) || !*((_BYTE *)v183 + 24))
      {
        *((_QWORD *)v194 + 59) = v45;
LABEL_49:
        if (*((_DWORD *)v191 + 6) == -11795)
          *((_QWORD *)v194 + 59) = 0;
        v49 = (std::__shared_weak_count *)v201;
        if (v201)
        {
          v50 = (unint64_t *)((char *)v201 + 8);
          do
            v51 = __ldaxr(v50);
          while (__stlxr(v51 - 1, v50));
          if (!v51)
          {
            ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
            std::__shared_weak_count::__release_weak(v49);
          }
        }
        VCLocker::~VCLocker((VCLocker *)v179);
        if (*((_DWORD *)v191 + 6)
          || (+[AVVCKeepAliveManager sharedManager](AVVCKeepAliveManager, "sharedManager"),
              v54 = (void *)objc_claimAutoreleasedReturnValue(),
              v55 = v54 == 0,
              v54,
              v55)
          || *((_DWORD *)v194 + 90)
          || (v52 = ControllerImpl::configureAlerts(v194, v38), (*((_DWORD *)v191 + 6) = v52) == 0))
        {
          v52 = *((_DWORD *)v191 + 6);
        }
LABEL_70:
        v57 = (std::__shared_weak_count *)v181;
        if (v181)
        {
          v58 = (unint64_t *)((char *)v181 + 8);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        _Block_object_dispose(&v182, 8);
        _Block_object_dispose(&v186, 8);
        _Block_object_dispose(&v190, 8);
        v60 = (std::__shared_weak_count *)v195;
        if (v195)
        {
          v61 = (unint64_t *)((char *)v195 + 8);
          do
            v62 = __ldaxr(v61);
          while (__stlxr(v62 - 1, v61));
          if (!v62)
          {
            ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
            std::__shared_weak_count::__release_weak(v60);
          }
        }
        TraceMethod::~TraceMethod((TraceMethod *)v196);

        v63 = v175;
        *((_DWORD *)v175 + 6) = v52;
        if (!v52)
        {
          v65 = *(_BYTE *)(a1 + 121);
          if (v65)
            v66 = *(_BYTE *)(a1 + 120) == 0;
          else
            v66 = 0;
          v137[0] = v18;
          v137[1] = 3321888768;
          v137[2] = ___ZN14ControllerImpl29activateAudioSessionForStreamEP17AVVoiceControllermbbU13block_pointerFvmbP7NSErrorE_block_invoke_2_338;
          v137[3] = &unk_1E3BEB0C0;
          v81 = *(_QWORD *)(a1 + 96);
          v80 = *(std::__shared_weak_count **)(a1 + 104);
          v140 = v81;
          v141 = v80;
          if (v80)
          {
            v82 = (unint64_t *)&v80->__shared_owners_;
            do
              v83 = __ldxr(v82);
            while (__stxr(v83 + 1, v82));
            v65 = *(_BYTE *)(a1 + 121);
          }
          v145 = v65;
          v146 = v66;
          v85 = *(_QWORD *)(a1 + 72);
          v84 = *(std::__shared_weak_count **)(a1 + 80);
          v139 = &v174;
          v142 = v85;
          v143 = v84;
          if (v84)
          {
            v86 = (unint64_t *)&v84->__shared_owners_;
            do
              v87 = __ldxr(v86);
            while (__stxr(v87 + 1, v86));
          }
          v88 = *(id *)(a1 + 48);
          v89 = *(_QWORD *)(a1 + 88);
          v138 = v88;
          v144 = v89;
          (*(void (**)(uint64_t, _QWORD *, const char *))(*(_QWORD *)v81 + 360))(v81, v137, "activateAudioSessionForStream_block_invoke");

          v90 = v143;
          if (v143)
          {
            v91 = (unint64_t *)&v143->__shared_owners_;
            do
              v92 = __ldaxr(v91);
            while (__stlxr(v92 - 1, v91));
            if (!v92)
            {
              ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
              std::__shared_weak_count::__release_weak(v90);
            }
          }
          v93 = v141;
          if (v141)
          {
            v94 = (unint64_t *)&v141->__shared_owners_;
            do
              v95 = __ldaxr(v94);
            while (__stlxr(v95 - 1, v94));
            if (!v95)
            {
              ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
              std::__shared_weak_count::__release_weak(v93);
            }
          }
          goto LABEL_91;
        }
        if (kAVVCScope)
        {
          v64 = *(id *)kAVVCScope;
          if (!v64)
          {
LABEL_90:
            v69 = *(_QWORD *)(a1 + 72);
            v70 = *(void **)(a1 + 48);
            v71 = v70 != 0;
            v147[0] = v18;
            v147[1] = 3221225472;
            v147[2] = ___ZN14ControllerImpl29activateAudioSessionForStreamEP17AVVoiceControllermbbU13block_pointerFvmbP7NSErrorE_block_invoke_337;
            v147[3] = &unk_1E3BEC3D8;
            v72 = v70;
            v73 = *(_QWORD *)(a1 + 88);
            v148 = v72;
            v149 = &v174;
            v150 = v73;
            ControllerImpl::safeNotifyAlwaysAsync(v69, v71, v147);

LABEL_91:
            VCUnlocker::~VCUnlocker((VCUnlocker *)v153);
            goto LABEL_92;
          }
        }
        else
        {
          v64 = MEMORY[0x1E0C81028];
          v67 = MEMORY[0x1E0C81028];
        }
        if (os_log_type_enabled(v64, OS_LOG_TYPE_ERROR))
        {
          v68 = *((_DWORD *)v63 + 6);
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "ControllerImpl.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 5534;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = v68;
          _os_log_impl(&dword_19B733000, v64, OS_LOG_TYPE_ERROR, "%25s:%-5d activateAudioSessionForStream ERROR: Failed checkSession at setAudioSessionActive OSStatus(%d).", buf, 0x18u);
        }

        goto LABEL_90;
      }
      (*(void (**)(AVVCRecordingEngine *, _QWORD))(*(_QWORD *)v180 + 64))(v180, 0);
      v96 = (void *)objc_claimAutoreleasedReturnValue();
      v97 = objc_msgSend(v96, "isPrimary");

      v98 = v194;
      if (!(_DWORD)v97)
      {
LABEL_197:
        v128 = (std::__shared_weak_count *)v181;
        v178[0] = v180;
        v178[1] = v181;
        if (v181)
        {
          v129 = (unint64_t *)((char *)v181 + 8);
          do
            v130 = __ldxr(v129);
          while (__stxr(v130 + 1, v129));
        }
        ControllerImpl::startKeepAliveQueue(*((_QWORD *)v98 + 1), *((std::__shared_weak_count **)v98 + 2), v178);
        if (v128)
        {
          v131 = (unint64_t *)&v128->__shared_owners_;
          do
            v132 = __ldaxr(v131);
          while (__stlxr(v132 - 1, v131));
          if (!v132)
          {
            ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
            std::__shared_weak_count::__release_weak(v128);
          }
        }
        goto LABEL_49;
      }
      v99 = *(int8x8_t *)((char *)v194 + 488);
      v135 = (unint64_t)v99;
      if (v99)
      {
        v100 = (uint8x8_t)vcnt_s8(v99);
        v100.i16[0] = vaddlv_u8(v100);
        if (v100.u32[0] > 1uLL)
        {
          v97 = v36;
          if (v36 >= *(_QWORD *)&v99)
            v97 = v36 % *(_QWORD *)&v99;
        }
        else
        {
          v97 = (*(_QWORD *)&v99 - 1) & v36;
        }
        v101 = *(_QWORD **)(*((_QWORD *)v194 + 60) + 8 * v97);
        if (v101)
        {
          for (i = (_QWORD *)*v101; i; i = (_QWORD *)*i)
          {
            v103 = i[1];
            if (v103 == v36)
            {
              if (i[2] == v36)
                goto LABEL_197;
            }
            else
            {
              if (v100.u32[0] > 1uLL)
              {
                if (v103 >= v135)
                  v103 %= v135;
              }
              else
              {
                v103 &= v135 - 1;
              }
              if (v103 != v97)
                break;
            }
          }
        }
      }
      v104 = operator new(0x18uLL);
      *v104 = 0;
      v104[1] = v36;
      v134 = v104;
      v104[2] = v36;
      v105 = (float)(unint64_t)(*((_QWORD *)v98 + 63) + 1);
      v106 = *((float *)v98 + 128);
      v107 = v135;
      if (v135 && (float)(v106 * (float)v135) >= v105)
      {
LABEL_187:
        v124 = *((_QWORD *)v98 + 60);
        v125 = *(_QWORD **)(v124 + 8 * v97);
        if (v125)
        {
          *v134 = *v125;
          v126 = v134;
        }
        else
        {
          *v134 = *((_QWORD *)v98 + 62);
          *((_QWORD *)v98 + 62) = v134;
          *(_QWORD *)(v124 + 8 * v97) = (char *)v98 + 496;
          if (!*v134)
          {
LABEL_196:
            ++*((_QWORD *)v98 + 63);
            v98 = v194;
            goto LABEL_197;
          }
          v127 = *(_QWORD *)(*v134 + 8);
          if ((v107 & (v107 - 1)) != 0)
          {
            if (v127 >= v107)
              v127 %= v107;
          }
          else
          {
            v127 &= v107 - 1;
          }
          v125 = (_QWORD *)(*((_QWORD *)v98 + 60) + 8 * v127);
          v126 = v134;
        }
        *v125 = v126;
        goto LABEL_196;
      }
      v108 = 1;
      if (v135 >= 3)
        v108 = (v135 & (v135 - 1)) != 0;
      v109 = v108 | (2 * v135);
      v110 = vcvtps_u32_f32(v105 / v106);
      if (v109 <= v110)
        prime = (int8x8_t)v110;
      else
        prime = (int8x8_t)v109;
      if (*(_QWORD *)&prime == 1)
      {
        prime = (int8x8_t)2;
      }
      else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
      {
        prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      }
      v136 = *(int8x8_t *)((char *)v98 + 488);
      if (*(_QWORD *)&prime > *(_QWORD *)&v136)
        goto LABEL_152;
      if (*(_QWORD *)&prime >= *(_QWORD *)&v136)
      {
        v107 = *((_QWORD *)v98 + 61);
      }
      else
      {
        v118 = vcvtps_u32_f32((float)*((unint64_t *)v98 + 63) / *((float *)v98 + 128));
        if (*(_QWORD *)&v136 < 3uLL
          || (v119 = (uint8x8_t)vcnt_s8(v136), v119.i16[0] = vaddlv_u8(v119), v119.u32[0] > 1uLL))
        {
          v118 = std::__next_prime(v118);
        }
        else
        {
          v120 = 1 << -(char)__clz(v118 - 1);
          if (v118 >= 2)
            v118 = v120;
        }
        if (*(_QWORD *)&prime <= v118)
          prime = (int8x8_t)v118;
        if (*(_QWORD *)&prime >= *(_QWORD *)&v136)
        {
          v107 = *((_QWORD *)v98 + 61);
        }
        else
        {
          if (prime)
          {
LABEL_152:
            if (*(_QWORD *)&prime >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v112 = operator new(8 * *(_QWORD *)&prime);
            v113 = (void *)*((_QWORD *)v98 + 60);
            *((_QWORD *)v98 + 60) = v112;
            if (v113)
              operator delete(v113);
            v114 = 0;
            *((int8x8_t *)v98 + 61) = prime;
            do
              *(_QWORD *)(*((_QWORD *)v98 + 60) + 8 * v114++) = 0;
            while (*(_QWORD *)&prime != v114);
            v115 = (_QWORD *)*((_QWORD *)v98 + 62);
            if (v115)
            {
              v116 = v115[1];
              v117 = (uint8x8_t)vcnt_s8(prime);
              v117.i16[0] = vaddlv_u8(v117);
              if (v117.u32[0] > 1uLL)
              {
                if (v116 >= *(_QWORD *)&prime)
                  v116 %= *(_QWORD *)&prime;
              }
              else
              {
                v116 &= *(_QWORD *)&prime - 1;
              }
              *(_QWORD *)(*((_QWORD *)v98 + 60) + 8 * v116) = (char *)v98 + 496;
              v121 = (_QWORD *)*v115;
              if (*v115)
              {
                do
                {
                  v122 = v121[1];
                  if (v117.u32[0] > 1uLL)
                  {
                    if (v122 >= *(_QWORD *)&prime)
                      v122 %= *(_QWORD *)&prime;
                  }
                  else
                  {
                    v122 &= *(_QWORD *)&prime - 1;
                  }
                  if (v122 != v116)
                  {
                    v123 = *((_QWORD *)v98 + 60);
                    if (!*(_QWORD *)(v123 + 8 * v122))
                    {
                      *(_QWORD *)(v123 + 8 * v122) = v115;
                      goto LABEL_178;
                    }
                    *v115 = *v121;
                    *v121 = **(_QWORD **)(*((_QWORD *)v98 + 60) + 8 * v122);
                    **(_QWORD **)(*((_QWORD *)v98 + 60) + 8 * v122) = v121;
                    v121 = v115;
                  }
                  v122 = v116;
LABEL_178:
                  v115 = v121;
                  v121 = (_QWORD *)*v121;
                  v116 = v122;
                }
                while (v121);
              }
            }
            v107 = (unint64_t)prime;
            goto LABEL_182;
          }
          v133 = (void *)*((_QWORD *)v98 + 60);
          *((_QWORD *)v98 + 60) = 0;
          if (v133)
            operator delete(v133);
          v107 = 0;
          *((_QWORD *)v98 + 61) = 0;
        }
      }
LABEL_182:
      if ((v107 & (v107 - 1)) != 0)
      {
        if (v36 >= v107)
          v97 = v36 % v107;
        else
          v97 = v36;
      }
      else
      {
        v97 = (v107 - 1) & v36;
      }
      goto LABEL_187;
    }
    if (kAVVCScope)
    {
      v53 = *(id *)kAVVCScope;
      if (!v53)
      {
LABEL_69:
        v52 = -11793;
        goto LABEL_70;
      }
    }
    else
    {
      v53 = MEMORY[0x1E0C81028];
      v56 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "ControllerImpl.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 5321;
      *(_WORD *)&buf[18] = 2048;
      *(_QWORD *)&buf[20] = v36;
      _os_log_impl(&dword_19B733000, v53, OS_LOG_TYPE_ERROR, "%25s:%-5d checkSession: Cannot find recording engine for streamID(%lu). Returning.", buf, 0x1Cu);
    }

    goto LABEL_69;
  }
LABEL_92:

  v74 = v163;
  if (v163)
  {
    v75 = (unint64_t *)&v163->__shared_owners_;
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }

  v77 = v161;
  if (v161)
  {
    v78 = (unint64_t *)&v161->__shared_owners_;
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 - 1, v78));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }
  _Block_object_dispose(&v167, 8);
  VCLocker::~VCLocker((VCLocker *)v173);
  _Block_object_dispose(&v174, 8);

}

void sub_19B7F4194(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60,uint64_t a61,char a62,uint64_t a63)
{
  char a70;
  char a72;
  void *v72;
  void *v73;
  uint64_t v74;

  operator delete(__p);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v74 - 152);
  VCLocker::~VCLocker((VCLocker *)&a70);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a72);
  _Block_object_dispose(&STACK[0x208], 8);
  _Block_object_dispose(&STACK[0x228], 8);
  _Block_object_dispose(&STACK[0x248], 8);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v74 - 232);
  TraceMethod::~TraceMethod((TraceMethod *)(v74 - 216));

  VCUnlocker::~VCUnlocker((VCUnlocker *)&a36);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a49);

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a47);
  _Block_object_dispose(&a54, 8);
  VCLocker::~VCLocker((VCLocker *)&a60);
  _Block_object_dispose(&a62, 8);

  _Unwind_Resume(a1);
}

_QWORD *__copy_helper_block_ea8_72c42_ZTSNSt3__110shared_ptrI14ControllerImplEE96c47_ZTSNSt3__110shared_ptrI19AVVCRecordingEngineEE(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = a2[10];
  result[9] = a2[9];
  result[10] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  v5 = a2[13];
  result[12] = a2[12];
  result[13] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return result;
}

uint64_t __destroy_helper_block_ea8_72c42_ZTSNSt3__110shared_ptrI14ControllerImplEE96c47_ZTSNSt3__110shared_ptrI19AVVCRecordingEngineEE(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 + 72;
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](a1 + 96);
  return std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v1);
}

void ___ZN14ControllerImpl29activateAudioSessionForStreamEP17AVVoiceControllermbbU13block_pointerFvmbP7NSErrorE_block_invoke_331(uint64_t a1)
{
  id v2;
  id v3;
  NSObject *v4;
  int v5;
  void *v6;
  void *v7;
  unsigned int v8;
  const char *v9;
  id v10;
  id v11;
  NSObject *v12;
  id v13;
  id v14;
  uint64_t v15;
  void *v16;
  void *v17;
  NSObject *v18;
  void *v19;
  NSObject *v20;
  id v21;
  int v22;
  uint64_t v23;
  void *v24;
  _BOOL4 v25;
  _QWORD *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  NSObject *v31;
  id v32;
  int v33;
  uint64_t v34;
  void *v35;
  _BOOL4 v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  int v44;
  uint64_t v45;
  void *v46;
  _BOOL4 v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  void *v52;
  NSObject *v53;
  NSObject *v54;
  int v55;
  uint64_t v56;
  void *v57;
  _BOOL4 v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  id v62;
  int v63;
  uint64_t v64;
  void *v65;
  _BOOL4 v66;
  id v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  _QWORD v71[7];
  _QWORD v72[7];
  _QWORD v73[7];
  _QWORD v74[7];
  _QWORD v75[7];
  uint8_t v76[16];
  uint8_t buf[4];
  const char *v78;
  __int16 v79;
  int v80;
  __int16 v81;
  id v82;
  __int16 v83;
  _BYTE v84[18];
  __int16 v85;
  uint8_t *v86;
  __int16 v87;
  void *v88;
  uint64_t v89;

  v89 = *MEMORY[0x1E0C80C00];
  if (kAVVCScope)
  {
    v2 = *(id *)kAVVCScope;
    if (!v2)
      goto LABEL_11;
  }
  else
  {
    v2 = (id)MEMORY[0x1E0C81028];
    v3 = MEMORY[0x1E0C81028];
  }
  v4 = v2;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    v5 = *(unsigned __int8 *)(a1 + 120);
    v6 = *(void **)(a1 + 64);
    (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 72) + 64))(*(_QWORD *)(a1 + 72), 0);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v7, "sessionState");
    if (v8 > 7)
      v9 = "ILLEGAL";
    else
      v9 = off_1E3BEC8F0[v8];
    *(_DWORD *)buf = 136316162;
    v78 = "ControllerImpl.mm";
    v79 = 1024;
    v80 = 5454;
    v81 = 2048;
    v82 = v6;
    v83 = 1024;
    *(_DWORD *)v84 = v5;
    *(_WORD *)&v84[4] = 2080;
    *(_QWORD *)&v84[6] = v9;
    _os_log_impl(&dword_19B733000, v4, OS_LOG_TYPE_DEBUG, "%25s:%-5d activateAudioSessionForStream for stream(%lu). isPrewarm(%d). CurrentState(%s).", buf, 0x2Cu);

  }
LABEL_11:
  if (kAVVCScope)
  {
    v10 = *(id *)kAVVCScope;
    if (!v10)
      goto LABEL_18;
  }
  else
  {
    v10 = (id)MEMORY[0x1E0C81028];
    v11 = MEMORY[0x1E0C81028];
  }
  v12 = v10;
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 72) + 56))(*(_QWORD *)(a1 + 72), 0);
    v13 = (id)objc_claimAutoreleasedReturnValue();
    (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 72) + 64))(*(_QWORD *)(a1 + 72), 0);
    v14 = (id)objc_claimAutoreleasedReturnValue();
    v15 = *(_QWORD *)(a1 + 72);
    CAX4CCString::CAX4CCString((CAX4CCString *)v76, *(_DWORD *)(v15 + 280));
    AVVCRouteManager::getRecordDeviceUID(*(id **)(*(_QWORD *)(a1 + 72) + 376));
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136316674;
    v78 = "ControllerImpl.mm";
    v79 = 1024;
    v80 = 5456;
    v81 = 2048;
    v82 = v13;
    v83 = 2048;
    *(_QWORD *)v84 = v14;
    *(_WORD *)&v84[8] = 2048;
    *(_QWORD *)&v84[10] = v15;
    v85 = 2080;
    v86 = v76;
    v87 = 2112;
    v88 = v16;
    _os_log_impl(&dword_19B733000, v12, OS_LOG_TYPE_DEFAULT, "%25s:%-5d session (%p) and session mananger (%p) used for engine (%p) with context(%s, %@)", buf, 0x44u);

  }
LABEL_18:
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 72) + 64))(*(_QWORD *)(a1 + 72), 0);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = objc_msgSend(v17, "setSessionActivationContext:", *(_QWORD *)(a1 + 32));

  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24))
  {
    if (kAVVCScope)
    {
      v18 = *(id *)kAVVCScope;
      if (!v18)
      {
LABEL_30:
        v23 = *(_QWORD *)(a1 + 88);
        v24 = *(void **)(a1 + 40);
        v25 = v24 != 0;
        v75[0] = MEMORY[0x1E0C809B0];
        v75[1] = 3221225472;
        v75[2] = ___ZN14ControllerImpl29activateAudioSessionForStreamEP17AVVoiceControllermbbU13block_pointerFvmbP7NSErrorE_block_invoke_332;
        v75[3] = &unk_1E3BEC3D8;
        v26 = v75;
        v27 = v24;
        v28 = *(_QWORD *)(a1 + 64);
        v29 = *(_QWORD *)(a1 + 48);
        v75[4] = v27;
        v75[5] = v29;
        v75[6] = v28;
        ControllerImpl::safeNotifyAlwaysAsync(v23, v25, v75);
        goto LABEL_64;
      }
    }
    else
    {
      v18 = MEMORY[0x1E0C81028];
      v21 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      v22 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
      *(_DWORD *)buf = 136315650;
      v78 = "ControllerImpl.mm";
      v79 = 1024;
      v80 = 5462;
      v81 = 1024;
      LODWORD(v82) = v22;
      _os_log_impl(&dword_19B733000, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d activateAudioSessionForStream ERROR: Failed at setSessionActivationContext: %d", buf, 0x18u);
    }

    goto LABEL_30;
  }
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 72) + 64))(*(_QWORD *)(a1 + 72), 0);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = objc_msgSend(v19, "setSessionCategoryModeOptionsForActivationMode:withOptions:", *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112));

  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24))
  {
    if (kAVVCScope)
    {
      v20 = *(id *)kAVVCScope;
      if (!v20)
      {
LABEL_39:
        v34 = *(_QWORD *)(a1 + 88);
        v35 = *(void **)(a1 + 40);
        v36 = v35 != 0;
        v74[0] = MEMORY[0x1E0C809B0];
        v74[1] = 3221225472;
        v74[2] = ___ZN14ControllerImpl29activateAudioSessionForStreamEP17AVVoiceControllermbbU13block_pointerFvmbP7NSErrorE_block_invoke_333;
        v74[3] = &unk_1E3BEC3D8;
        v26 = v74;
        v37 = v35;
        v38 = *(_QWORD *)(a1 + 64);
        v39 = *(_QWORD *)(a1 + 48);
        v74[4] = v37;
        v74[5] = v39;
        v74[6] = v38;
        ControllerImpl::safeNotifyAlwaysAsync(v34, v36, v74);
        goto LABEL_64;
      }
    }
    else
    {
      v20 = MEMORY[0x1E0C81028];
      v32 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      v33 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
      *(_DWORD *)buf = 136315650;
      v78 = "ControllerImpl.mm";
      v79 = 1024;
      v80 = 5474;
      v81 = 1024;
      LODWORD(v82) = v33;
      _os_log_impl(&dword_19B733000, v20, OS_LOG_TYPE_ERROR, "%25s:%-5d activateAudioSessionForStream ERROR: Failed at setSessionCategoryModeOptionsForActivationMode: %d", buf, 0x18u);
    }

    goto LABEL_39;
  }
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 72) + 64))(*(_QWORD *)(a1 + 72), 0);
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = objc_msgSend(v30, "setSessionSampleRateForActivationMode:", *(_QWORD *)(a1 + 104));

  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24))
  {
    if (kAVVCScope)
    {
      v31 = *(id *)kAVVCScope;
      if (!v31)
      {
LABEL_47:
        v45 = *(_QWORD *)(a1 + 88);
        v46 = *(void **)(a1 + 40);
        v47 = v46 != 0;
        v73[0] = MEMORY[0x1E0C809B0];
        v73[1] = 3221225472;
        v73[2] = ___ZN14ControllerImpl29activateAudioSessionForStreamEP17AVVoiceControllermbbU13block_pointerFvmbP7NSErrorE_block_invoke_334;
        v73[3] = &unk_1E3BEC3D8;
        v26 = v73;
        v48 = v46;
        v49 = *(_QWORD *)(a1 + 64);
        v50 = *(_QWORD *)(a1 + 48);
        v73[4] = v48;
        v73[5] = v50;
        v73[6] = v49;
        ControllerImpl::safeNotifyAlwaysAsync(v45, v47, v73);
        goto LABEL_64;
      }
    }
    else
    {
      v31 = MEMORY[0x1E0C81028];
      v43 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
    {
      v44 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
      *(_DWORD *)buf = 136315650;
      v78 = "ControllerImpl.mm";
      v79 = 1024;
      v80 = 5485;
      v81 = 1024;
      LODWORD(v82) = v44;
      _os_log_impl(&dword_19B733000, v31, OS_LOG_TYPE_ERROR, "%25s:%-5d activateAudioSessionForStream ERROR: Failed at setSessionSampleRateForActivationMode: %d", buf, 0x18u);
    }

    goto LABEL_47;
  }
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 72) + 64))(*(_QWORD *)(a1 + 72), 0);
  v40 = (void *)objc_claimAutoreleasedReturnValue();
  v41 = *(_QWORD *)(a1 + 72);
  if (MGGetSInt32Answer() != 4)
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v41 + 320))(v41) == 1)
    {
      v42 = 1440;
      goto LABEL_50;
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v41 + 320))(v41);
  }
  v42 = 256;
LABEL_50:
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = objc_msgSend(v40, "setSessionBufferSize:", v42);

  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24))
  {
    if (kAVVCScope)
    {
      v51 = *(id *)kAVVCScope;
      if (!v51)
      {
LABEL_63:
        v64 = *(_QWORD *)(a1 + 88);
        v65 = *(void **)(a1 + 40);
        v66 = v65 != 0;
        v72[0] = MEMORY[0x1E0C809B0];
        v72[1] = 3221225472;
        v72[2] = ___ZN14ControllerImpl29activateAudioSessionForStreamEP17AVVoiceControllermbbU13block_pointerFvmbP7NSErrorE_block_invoke_335;
        v72[3] = &unk_1E3BEC3D8;
        v26 = v72;
        v67 = v65;
        v68 = *(_QWORD *)(a1 + 64);
        v69 = *(_QWORD *)(a1 + 48);
        v72[4] = v67;
        v72[5] = v69;
        v72[6] = v68;
        ControllerImpl::safeNotifyAlwaysAsync(v64, v66, v72);
        goto LABEL_64;
      }
    }
    else
    {
      v51 = MEMORY[0x1E0C81028];
      v62 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
    {
      v63 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
      *(_DWORD *)buf = 136315650;
      v78 = "ControllerImpl.mm";
      v79 = 1024;
      v80 = 5496;
      v81 = 1024;
      LODWORD(v82) = v63;
      _os_log_impl(&dword_19B733000, v51, OS_LOG_TYPE_ERROR, "%25s:%-5d activateAudioSessionForStream ERROR: Failed at setSessionBufferSize: %d", buf, 0x18u);
    }

    goto LABEL_63;
  }
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 72) + 64))(*(_QWORD *)(a1 + 72), 0);
  v52 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = objc_msgSend(v52, "setSessionAudioHWControlFlagsForActivationMode:withOptions:", *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112));

  if (!*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24))
  {
    (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 72) + 64))(*(_QWORD *)(a1 + 72), 0);
    v70 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v70, "setSessionState:", 1);
    goto LABEL_65;
  }
  CALog::LogObjIfEnabled(1, kAVVCScope);
  v53 = objc_claimAutoreleasedReturnValue();
  v54 = v53;
  if (v53 && os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
  {
    v55 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
    *(_DWORD *)buf = 136315650;
    v78 = "ControllerImpl.mm";
    v79 = 1024;
    v80 = 5507;
    v81 = 1024;
    LODWORD(v82) = v55;
    _os_log_impl(&dword_19B733000, v54, OS_LOG_TYPE_ERROR, "%25s:%-5d activateAudioSessionForStream ERROR: Failed at setSessionAudioHWControlFlagsForActivationMode: %d", buf, 0x18u);
  }

  v56 = *(_QWORD *)(a1 + 88);
  v57 = *(void **)(a1 + 40);
  v58 = v57 != 0;
  v71[0] = MEMORY[0x1E0C809B0];
  v71[1] = 3221225472;
  v71[2] = ___ZN14ControllerImpl29activateAudioSessionForStreamEP17AVVoiceControllermbbU13block_pointerFvmbP7NSErrorE_block_invoke_336;
  v71[3] = &unk_1E3BEC3D8;
  v26 = v71;
  v59 = v57;
  v60 = *(_QWORD *)(a1 + 64);
  v61 = *(_QWORD *)(a1 + 48);
  v71[4] = v59;
  v71[5] = v61;
  v71[6] = v60;
  ControllerImpl::safeNotifyAlwaysAsync(v56, v58, v71);
LABEL_64:
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = 1;
  v70 = (void *)v26[4];
LABEL_65:

}

void sub_19B7F4D28(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl29activateAudioSessionForStreamEP17AVVoiceControllermbbU13block_pointerFvmbP7NSErrorE_block_invoke_337(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  id v3;

  v1 = a1[4];
  v2 = a1[6];
  objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2F90], *(int *)(*(_QWORD *)(a1[5] + 8) + 24), 0);
  v3 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v1 + 16))(v1, v2, 0);

}

void sub_19B7F4E8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl29activateAudioSessionForStreamEP17AVVoiceControllermbbU13block_pointerFvmbP7NSErrorE_block_invoke_2_338(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  _BOOL4 v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[4];
  id v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *(unsigned __int8 *)(a1 + 88);
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 48) + 64))(*(_QWORD *)(a1 + 48), 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setClientRequestsRecording:", v2);

  if (*(_BYTE *)(a1 + 89))
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 288))(*(_QWORD *)(a1 + 48));
  v4 = *(_QWORD *)(a1 + 64);
  v5 = *(void **)(a1 + 32);
  v6 = v5 != 0;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = ___ZN14ControllerImpl29activateAudioSessionForStreamEP17AVVoiceControllermbbU13block_pointerFvmbP7NSErrorE_block_invoke_3;
  v10[3] = &unk_1E3BEC3D8;
  v7 = v5;
  v8 = *(_QWORD *)(a1 + 80);
  v9 = *(_QWORD *)(a1 + 40);
  v11 = v7;
  v12 = v9;
  v13 = v8;
  ControllerImpl::safeNotifyAlwaysAsync(v4, v6, v10);

}

void sub_19B7F4F84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl29activateAudioSessionForStreamEP17AVVoiceControllermbbU13block_pointerFvmbP7NSErrorE_block_invoke_3(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  _BOOL8 v3;
  id v4;

  v1 = a1[6];
  v2 = a1[4];
  v3 = *(_DWORD *)(*(_QWORD *)(a1[5] + 8) + 24) == 0;
  objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2F90]);
  v4 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, uint64_t, _BOOL8))(v2 + 16))(v2, v1, v3);

}

void sub_19B7F5024(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

_QWORD *__copy_helper_block_ea8_72c47_ZTSNSt3__110shared_ptrI19AVVCRecordingEngineEE88c42_ZTSNSt3__110shared_ptrI14ControllerImplEE(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = a2[10];
  result[9] = a2[9];
  result[10] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  v5 = a2[12];
  result[11] = a2[11];
  result[12] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return result;
}

uint64_t __destroy_helper_block_ea8_72c47_ZTSNSt3__110shared_ptrI19AVVCRecordingEngineEE88c42_ZTSNSt3__110shared_ptrI14ControllerImplEE(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 + 72;
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](a1 + 88);
  return std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v1);
}

void ___ZN14ControllerImpl29activateAudioSessionForStreamEP17AVVoiceControllermbbU13block_pointerFvmbP7NSErrorE_block_invoke_332(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  id v3;

  v1 = a1[4];
  v2 = a1[6];
  objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2F90], *(int *)(*(_QWORD *)(a1[5] + 8) + 24), 0);
  v3 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v1 + 16))(v1, v2, 0);

}

void sub_19B7F5118(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl29activateAudioSessionForStreamEP17AVVoiceControllermbbU13block_pointerFvmbP7NSErrorE_block_invoke_333(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  id v3;

  v1 = a1[4];
  v2 = a1[6];
  objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2F90], *(int *)(*(_QWORD *)(a1[5] + 8) + 24), 0);
  v3 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v1 + 16))(v1, v2, 0);

}

void sub_19B7F51A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl29activateAudioSessionForStreamEP17AVVoiceControllermbbU13block_pointerFvmbP7NSErrorE_block_invoke_334(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  id v3;

  v1 = a1[4];
  v2 = a1[6];
  objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2F90], *(int *)(*(_QWORD *)(a1[5] + 8) + 24), 0);
  v3 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v1 + 16))(v1, v2, 0);

}

void sub_19B7F5228(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl29activateAudioSessionForStreamEP17AVVoiceControllermbbU13block_pointerFvmbP7NSErrorE_block_invoke_335(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  id v3;

  v1 = a1[4];
  v2 = a1[6];
  objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2F90], *(int *)(*(_QWORD *)(a1[5] + 8) + 24), 0);
  v3 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v1 + 16))(v1, v2, 0);

}

void sub_19B7F52B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl29activateAudioSessionForStreamEP17AVVoiceControllermbbU13block_pointerFvmbP7NSErrorE_block_invoke_336(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  id v3;

  v1 = a1[4];
  v2 = a1[6];
  objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2F90], *(int *)(*(_QWORD *)(a1[5] + 8) + 24), 0);
  v3 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v1 + 16))(v1, v2, 0);

}

void sub_19B7F5338(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t ControllerImpl::activateAudioSessionForStream(ControllerImpl *this, AVVoiceController *a2, uint64_t a3, char a4, char a5)
{
  AVVoiceController *v9;
  AVVoiceController *v10;
  uint64_t v11;
  _QWORD v13[4];
  AVVoiceController *v14;
  uint64_t *v15;
  ControllerImpl *v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  int v23;

  v9 = a2;
  v20 = 0;
  v21 = &v20;
  v22 = 0x2020000000;
  v23 = 0;
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 3221225472;
  v13[2] = ___ZN14ControllerImpl29activateAudioSessionForStreamEP17AVVoiceControllermbb_block_invoke;
  v13[3] = &unk_1E3BEC400;
  v16 = this;
  v10 = v9;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v14 = v10;
  v15 = &v20;
  makeSynchronous(v13);
  v11 = *((unsigned int *)v21 + 6);

  _Block_object_dispose(&v20, 8);
  return v11;
}

void sub_19B7F541C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  void *v11;
  va_list va;

  va_start(va, a11);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl29activateAudioSessionForStreamEP17AVVoiceControllermbb_block_invoke(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  id v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  id v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD v25[4];
  id v26;
  uint64_t v27;
  _QWORD v28[4];
  id v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  char v35;
  char v36;
  uint64_t v37;
  std::__shared_weak_count *v38;

  v3 = a2;
  v5 = *(_QWORD *)(a1 + 48);
  v4 = *(_QWORD *)(a1 + 56);
  v6 = *(_BYTE *)(a1 + 64);
  v7 = *(_BYTE *)(a1 + 65);
  v8 = MEMORY[0x1E0C809B0];
  v25[0] = MEMORY[0x1E0C809B0];
  v25[1] = 3221225472;
  v25[2] = ___ZN14ControllerImpl29activateAudioSessionForStreamEP17AVVoiceControllermbb_block_invoke_2;
  v25[3] = &unk_1E3BEC1F8;
  v10 = *(void **)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  v26 = v3;
  v27 = v9;
  v11 = v3;
  v12 = v10;
  v13 = v25;
  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v37, *(_QWORD *)(v5 + 8), *(std::__shared_weak_count **)(v5 + 16));
  v28[0] = v8;
  v28[1] = 3321888768;
  v28[2] = ___ZN14ControllerImpl29activateAudioSessionForStreamEP17AVVoiceControllermbbU13block_pointerFvmbP7NSErrorE_block_invoke;
  v28[3] = &unk_1E3BEADE8;
  v14 = v37;
  v31 = v5;
  v32 = v37;
  v33 = v38;
  if (v38)
  {
    p_shared_owners = (unint64_t *)&v38->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }
  v34 = v4;
  v17 = v13;
  v30 = v17;
  v35 = v6;
  v18 = v12;
  v29 = v18;
  v36 = v7;
  ControllerImpl::safeWork(v14, v28, (uint64_t)"activateAudioSessionForStream");

  v19 = v33;
  if (v33)
  {
    v20 = (unint64_t *)&v33->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = v38;
  if (v38)
  {
    v23 = (unint64_t *)&v38->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }

}

void sub_19B7F560C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21)
{
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v24);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v25 - 96);

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl29activateAudioSessionForStreamEP17AVVoiceControllermbb_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  NSObject *v5;
  id v6;

  v6 = a4;
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = objc_msgSend(v6, "code");
  v5 = *(NSObject **)(a1 + 32);
  if (v5)
    dispatch_semaphore_signal(v5);

}

void sub_19B7F56A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void ControllerImpl::deactivateAudioSessionWithOptions(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  ControllerImpl::deactivateSessionForListening(a1, a2, a4, 1, a3, 3, a5);
}

void ControllerImpl::deactivateAudioSessionWithOptions(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  id v9;
  uint64_t v10;
  void *v11;
  id v12;
  _QWORD v13[4];
  id v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  char v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  int v24;

  v9 = a2;
  v21 = 0;
  v22 = &v21;
  v23 = 0x2020000000;
  v24 = 0;
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 3221225472;
  v13[2] = ___ZN14ControllerImpl29deactivateSessionForListeningEP17AVVoiceControllermbm23AVVCDeactivationOptions_block_invoke;
  v13[3] = &unk_1E3BEBEA0;
  v16 = a1;
  v20 = 1;
  v17 = a4;
  v18 = a3;
  v19 = 3;
  v12 = v9;
  v14 = v12;
  v15 = &v21;
  makeSynchronous(v13);
  v10 = *((int *)v22 + 6);

  _Block_object_dispose(&v21, 8);
  if (!(_DWORD)v10)
  {
    v11 = 0;
    if (!a5)
      goto LABEL_4;
    goto LABEL_3;
  }
  objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2F90], v10, 0);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  if (a5)
LABEL_3:
    *a5 = objc_retainAutorelease(v11);
LABEL_4:

}

void sub_19B7F57F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl19setContextForStreamEP17AVVoiceControllerP19AVVCContextSettingsmU13block_pointerFvmbP7NSErrorE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  id v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  NSObject *v18;
  NSObject *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  _BOOL4 v25;
  id v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  _BOOL4 v32;
  id v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  __int128 v38;
  _QWORD v39[4];
  id v40;
  __int128 v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  uint64_t v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  uint64_t v47;
  _QWORD v48[4];
  id v49;
  uint64_t v50;
  _QWORD v51[4];
  id v52;
  uint64_t v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  uint8_t buf[4];
  const char *v57;
  __int16 v58;
  int v59;
  __int16 v60;
  uint64_t v61;
  __int16 v62;
  uint64_t v63;
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  ControllerImpl::_lookupEngineForStreamID((ControllerImpl *)&v54, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 576), *(std::__shared_weak_count **)(*(_QWORD *)(a1 + 56) + 584), *(_QWORD *)(a1 + 72));
  v2 = objc_msgSend(*(id *)(a1 + 32), "activationMode");
  v3 = v54;
  if (!v54)
  {
    if (kAVVCScope)
    {
      v19 = *(id *)kAVVCScope;
      if (!v19)
      {
LABEL_35:
        v30 = *(_QWORD *)(a1 + 56);
        v31 = *(void **)(a1 + 40);
        v32 = v31 != 0;
        v51[0] = MEMORY[0x1E0C809B0];
        v51[1] = 3221225472;
        v51[2] = ___ZN14ControllerImpl19setContextForStreamEP17AVVoiceControllerP19AVVCContextSettingsmU13block_pointerFvmbP7NSErrorE_block_invoke_342;
        v51[3] = &unk_1E3BECB48;
        v33 = v31;
        v34 = *(_QWORD *)(a1 + 72);
        v52 = v33;
        v53 = v34;
        ControllerImpl::safeNotifyAlwaysAsync(v30, v32, v51);

        goto LABEL_36;
      }
    }
    else
    {
      v19 = MEMORY[0x1E0C81028];
      v28 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      v29 = *(_QWORD *)(a1 + 72);
      *(_DWORD *)buf = 136315650;
      v57 = "ControllerImpl.mm";
      v58 = 1024;
      v59 = 5654;
      v60 = 2048;
      v61 = v29;
      _os_log_impl(&dword_19B733000, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d ERROR: Cannot find recording engine for streamID(%lu). Returning.", buf, 0x1Cu);
    }

    goto LABEL_35;
  }
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 472);
  if (!v4 || v4 != *(_QWORD *)(a1 + 72))
  {
    if (kAVVCScope)
    {
      v18 = *(id *)kAVVCScope;
      if (!v18)
      {
LABEL_30:
        v23 = *(_QWORD *)(a1 + 56);
        v24 = *(void **)(a1 + 40);
        v25 = v24 != 0;
        v48[0] = MEMORY[0x1E0C809B0];
        v48[1] = 3221225472;
        v48[2] = ___ZN14ControllerImpl19setContextForStreamEP17AVVoiceControllerP19AVVCContextSettingsmU13block_pointerFvmbP7NSErrorE_block_invoke_343;
        v48[3] = &unk_1E3BECB48;
        v26 = v24;
        v27 = *(_QWORD *)(a1 + 72);
        v49 = v26;
        v50 = v27;
        ControllerImpl::safeNotifyAlwaysAsync(v23, v25, v48);

        goto LABEL_36;
      }
    }
    else
    {
      v18 = MEMORY[0x1E0C81028];
      v20 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      v21 = *(_QWORD *)(a1 + 72);
      v22 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 472);
      *(_DWORD *)buf = 136315906;
      v57 = "ControllerImpl.mm";
      v58 = 1024;
      v59 = 5663;
      v60 = 2048;
      v61 = v21;
      v62 = 2048;
      v63 = v22;
      _os_log_impl(&dword_19B733000, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d setContextForStream: Error! Incoming engine with streamID(%llu) is different from engine that was used to activate the session, streamID(%llu)", buf, 0x26u);
    }

    goto LABEL_30;
  }
  v5 = v2;
  v39[0] = MEMORY[0x1E0C809B0];
  v39[1] = 3321888768;
  v39[2] = ___ZN14ControllerImpl19setContextForStreamEP17AVVoiceControllerP19AVVCContextSettingsmU13block_pointerFvmbP7NSErrorE_block_invoke_2;
  v39[3] = &unk_1E3BE9EA0;
  v42 = v54;
  v43 = v55;
  if (v55)
  {
    p_shared_owners = (unint64_t *)&v55->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v40 = *(id *)(a1 + 32);
  v44 = v5;
  v8 = *(std::__shared_weak_count **)(a1 + 64);
  v45 = *(_QWORD *)(a1 + 56);
  v46 = v8;
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v38 = *(_OWORD *)(a1 + 40);
  v11 = (id)v38;
  v41 = v38;
  v47 = *(_QWORD *)(a1 + 72);
  (*(void (**)(uint64_t, _QWORD *, const char *))(*(_QWORD *)v3 + 360))(v3, v39, "setContextForStream_block_invoke");

  v12 = v46;
  if (v46)
  {
    v13 = (unint64_t *)&v46->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }

  v15 = v43;
  if (v43)
  {
    v16 = (unint64_t *)&v43->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
LABEL_36:
  v35 = v55;
  if (v55)
  {
    v36 = (unint64_t *)&v55->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
}

void sub_19B7F5C64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v18);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v17);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v19 - 112);
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl19setContextForStreamEP17AVVoiceControllerP19AVVCContextSettingsmU13block_pointerFvmbP7NSErrorE_block_invoke_342(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  id v3;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2F90], -11793, 0);
  v3 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v1 + 16))(v1, v2, 0);

}

void sub_19B7F5D30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl19setContextForStreamEP17AVVoiceControllerP19AVVCContextSettingsmU13block_pointerFvmbP7NSErrorE_block_invoke_343(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  id v3;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2F90], -11793, 0);
  v3 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v1 + 16))(v1, v2, 0);

}

void sub_19B7F5DAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl19setContextForStreamEP17AVVoiceControllerP19AVVCContextSettingsmU13block_pointerFvmbP7NSErrorE_block_invoke_2(uint64_t a1)
{
  id v2;
  uint64_t v3;
  id v4;
  NSObject *v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  id v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  __int128 v23;
  _QWORD v24[4];
  id v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  uint64_t v32;
  uint64_t v33;
  uint8_t v34[16];
  uint8_t buf[4];
  const char *v36;
  __int16 v37;
  int v38;
  __int16 v39;
  uint8_t *v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  AVVCRecordingEngine::setActivationContextSettings(*(AVVCRecordingEngine **)(a1 + 56), *(AVVCContextSettings **)(a1 + 32));
  *(_QWORD *)(*(_QWORD *)(a1 + 56) + 280) = *(_QWORD *)(a1 + 72);
  if (!objc_msgSend(*(id *)(a1 + 32), "announceCallsEnabled"))
  {
    v3 = 0;
    goto LABEL_11;
  }
  if (!kAVVCScope)
  {
    v2 = (id)MEMORY[0x1E0C81028];
    v4 = MEMORY[0x1E0C81028];
    goto LABEL_7;
  }
  v2 = *(id *)kAVVCScope;
  if (v2)
  {
LABEL_7:
    v5 = v2;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)v34, *(_DWORD *)(a1 + 72));
      *(_DWORD *)buf = 136315650;
      v36 = "ControllerImpl.mm";
      v37 = 1024;
      v38 = 5689;
      v39 = 2080;
      v40 = v34;
      _os_log_impl(&dword_19B733000, v5, OS_LOG_TYPE_DEFAULT, "%25s:%-5d setContextForStream: Announce option set for %s activation mode", buf, 0x1Cu);
    }

  }
  v3 = 1;
LABEL_11:
  v6 = *(_QWORD *)(a1 + 80);
  v24[0] = MEMORY[0x1E0C809B0];
  v24[1] = 3321888768;
  v24[2] = ___ZN14ControllerImpl19setContextForStreamEP17AVVoiceControllerP19AVVCContextSettingsmU13block_pointerFvmbP7NSErrorE_block_invoke_344;
  v24[3] = &unk_1E3BE9FB8;
  v7 = *(id *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 72);
  v9 = *(_QWORD *)(a1 + 80);
  v25 = v7;
  v27 = v8;
  v28 = v9;
  v10 = *(std::__shared_weak_count **)(a1 + 88);
  v29 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v13 = *(std::__shared_weak_count **)(a1 + 64);
  v30 = *(_QWORD *)(a1 + 56);
  v31 = v13;
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v23 = *(_OWORD *)(a1 + 40);
  v16 = (id)v23;
  v26 = v23;
  v32 = *(_QWORD *)(a1 + 96);
  v33 = v3;
  ControllerImpl::safeWork(v6, v24, (uint64_t)"setContextForStream_block_invoke");

  v17 = v31;
  if (v31)
  {
    v18 = (unint64_t *)&v31->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = v29;
  if (v29)
  {
    v21 = (unint64_t *)&v29->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }

}

void sub_19B7F6048(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl19setContextForStreamEP17AVVoiceControllerP19AVVCContextSettingsmU13block_pointerFvmbP7NSErrorE_block_invoke_344(uint64_t a1)
{
  void *v2;
  id v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  id v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  _BOOL4 v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  _QWORD v38[4];
  id v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD v42[4];
  id v43;
  id v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  _BYTE v61[16];

  objc_msgSend(*(id *)(a1 + 32), "activationDeviceUID");
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  v3 = objc_alloc(MEMORY[0x1E0C99D80]);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", *(_QWORD *)(a1 + 56));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (v2)
  {
    objc_msgSend(*(id *)(a1 + 32), "activationDeviceUID");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = (void *)objc_msgSend(v3, "initWithObjectsAndKeys:", v4, CFSTR("activation trigger"), v5, CFSTR("activation device uid"), 0);

  }
  else
  {
    v6 = (void *)objc_msgSend(v3, "initWithObjectsAndKeys:", v4, CFSTR("activation trigger"), 0);
  }

  objc_storeStrong((id *)(*(_QWORD *)(a1 + 64) + 456), v6);
  v7 = *(_QWORD *)(a1 + 64);
  v8 = *(std::__shared_weak_count **)(a1 + 72);
  v59 = v7;
  v60 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  SessionLock::SessionLock(v61, v7, v8);
  if (v8)
  {
    v11 = (unint64_t *)&v8->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v55 = 0;
  v56 = &v55;
  v57 = 0x2020000000;
  v58 = 0;
  v13 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 528);
  v14 = MEMORY[0x1E0C809B0];
  v42[0] = MEMORY[0x1E0C809B0];
  v42[1] = 3321888768;
  v42[2] = ___ZN14ControllerImpl19setContextForStreamEP17AVVoiceControllerP19AVVCContextSettingsmU13block_pointerFvmbP7NSErrorE_block_invoke_2_345;
  v42[3] = &unk_1E3BEA098;
  v16 = *(_QWORD *)(a1 + 80);
  v15 = *(std::__shared_weak_count **)(a1 + 88);
  v45 = *(_QWORD *)(a1 + 48);
  v47 = v16;
  v48 = v15;
  if (v15)
  {
    v17 = (unint64_t *)&v15->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v19 = v6;
  v21 = *(_QWORD *)(a1 + 64);
  v20 = *(std::__shared_weak_count **)(a1 + 72);
  v43 = v19;
  v49 = v21;
  v50 = v20;
  if (v20)
  {
    v22 = (unint64_t *)&v20->__shared_owners_;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  v44 = *(id *)(a1 + 40);
  v46 = &v55;
  v24 = *(_QWORD *)(a1 + 56);
  v25 = *(_QWORD *)(a1 + 104);
  v51 = *(_QWORD *)(a1 + 96);
  v52 = v24;
  v53 = v25;
  v54 = v13;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v16 + 376))(v16, v42);
  if (!*((_BYTE *)v56 + 24))
  {
    v26 = *(_QWORD *)(a1 + 64);
    *(_QWORD *)(v26 + 528) = *(_QWORD *)(a1 + 56);
    v27 = *(void **)(a1 + 40);
    v28 = v27 != 0;
    v38[0] = v14;
    v38[1] = 3221225472;
    v38[2] = ___ZN14ControllerImpl19setContextForStreamEP17AVVoiceControllerP19AVVCContextSettingsmU13block_pointerFvmbP7NSErrorE_block_invoke_351;
    v38[3] = &unk_1E3BEC3D8;
    v29 = v27;
    v30 = *(_QWORD *)(a1 + 96);
    v31 = *(_QWORD *)(a1 + 48);
    v39 = v29;
    v40 = v31;
    v41 = v30;
    ControllerImpl::safeNotifyAlwaysAsync(v26, v28, v38);

  }
  v32 = v50;
  if (v50)
  {
    v33 = (unint64_t *)&v50->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }

  v35 = v48;
  if (v48)
  {
    v36 = (unint64_t *)&v48->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  _Block_object_dispose(&v55, 8);
  VCLocker::~VCLocker((VCLocker *)v61);

}

void sub_19B7F63B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  void *v31;
  uint64_t v32;

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a31);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
  _Block_object_dispose((const void *)(v32 - 128), 8);
  VCLocker::~VCLocker((VCLocker *)(v32 - 80));

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl19setContextForStreamEP17AVVoiceControllerP19AVVCContextSettingsmU13block_pointerFvmbP7NSErrorE_block_invoke_2_345(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  void *v4;
  NSObject *v5;
  id v6;
  unsigned int v7;
  uint64_t v8;
  void *v9;
  _BOOL4 v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  NSObject *v15;
  id v16;
  unsigned int v17;
  uint64_t v18;
  void *v19;
  _BOOL4 v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  NSObject *v25;
  id v26;
  unsigned int v27;
  uint64_t v28;
  void *v29;
  _BOOL4 v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  unsigned int v37;
  uint64_t v38;
  void *v39;
  _BOOL4 v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  unsigned int v46;
  NSObject *v47;
  NSObject *v48;
  void *v49;
  char v50;
  id v51;
  void *v52;
  NSObject *v53;
  NSObject *v54;
  void *v55;
  void *v56;
  NSObject *v57;
  unsigned int v58;
  uint64_t v59;
  void *v60;
  _BOOL4 v61;
  id v62;
  uint64_t v63;
  id v64;
  _QWORD v65[4];
  id v66;
  id v67;
  uint64_t v68;
  id v69;
  _QWORD v70[4];
  id v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD v74[4];
  id v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD v78[4];
  id v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD v82[4];
  id v83;
  uint64_t v84;
  uint64_t v85;
  uint8_t buf[4];
  const char *v87;
  __int16 v88;
  int v89;
  __int16 v90;
  unsigned int v91;
  uint64_t v92;

  v92 = *MEMORY[0x1E0C80C00];
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 64) + 64))(*(_QWORD *)(a1 + 64), 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = objc_msgSend(v2, "setSessionActivationContext:", *(_QWORD *)(a1 + 32));

  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24))
  {
    if (kAVVCScope)
    {
      v3 = *(id *)kAVVCScope;
      if (!v3)
      {
LABEL_13:
        v8 = *(_QWORD *)(a1 + 80);
        v9 = *(void **)(a1 + 40);
        v10 = v9 != 0;
        v82[0] = MEMORY[0x1E0C809B0];
        v82[1] = 3221225472;
        v82[2] = ___ZN14ControllerImpl19setContextForStreamEP17AVVoiceControllerP19AVVCContextSettingsmU13block_pointerFvmbP7NSErrorE_block_invoke_346;
        v82[3] = &unk_1E3BEC3D8;
        v11 = v9;
        v12 = *(_QWORD *)(a1 + 96);
        v13 = *(_QWORD *)(a1 + 48);
        v83 = v11;
        v84 = v13;
        v85 = v12;
        ControllerImpl::safeNotifyAlwaysAsync(v8, v10, v82);
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = 1;

        return;
      }
    }
    else
    {
      v3 = MEMORY[0x1E0C81028];
      v6 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      v7 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
      *(_DWORD *)buf = 136315650;
      v87 = "ControllerImpl.mm";
      v88 = 1024;
      v89 = 5721;
      v90 = 1024;
      v91 = v7;
      _os_log_impl(&dword_19B733000, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d setContextForStream ERROR: Failed at setSessionActivationContext: %d", buf, 0x18u);
    }

    goto LABEL_13;
  }
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 64) + 64))(*(_QWORD *)(a1 + 64), 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = objc_msgSend(v4, "setSessionCategoryModeOptionsForActivationMode:withOptions:", *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112));

  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24))
  {
    if (kAVVCScope)
    {
      v5 = *(id *)kAVVCScope;
      if (!v5)
      {
LABEL_22:
        v18 = *(_QWORD *)(a1 + 80);
        v19 = *(void **)(a1 + 40);
        v20 = v19 != 0;
        v78[0] = MEMORY[0x1E0C809B0];
        v78[1] = 3221225472;
        v78[2] = ___ZN14ControllerImpl19setContextForStreamEP17AVVoiceControllerP19AVVCContextSettingsmU13block_pointerFvmbP7NSErrorE_block_invoke_347;
        v78[3] = &unk_1E3BEC3D8;
        v21 = v19;
        v22 = *(_QWORD *)(a1 + 96);
        v23 = *(_QWORD *)(a1 + 48);
        v79 = v21;
        v80 = v23;
        v81 = v22;
        ControllerImpl::safeNotifyAlwaysAsync(v18, v20, v78);
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = 1;

        return;
      }
    }
    else
    {
      v5 = MEMORY[0x1E0C81028];
      v16 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v17 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
      *(_DWORD *)buf = 136315650;
      v87 = "ControllerImpl.mm";
      v88 = 1024;
      v89 = 5732;
      v90 = 1024;
      v91 = v17;
      _os_log_impl(&dword_19B733000, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d setContextForStream ERROR: Failed at setSessionCategoryModeOptionsForActivationMode: %d", buf, 0x18u);
    }

    goto LABEL_22;
  }
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 64) + 64))(*(_QWORD *)(a1 + 64), 0);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = objc_msgSend(v14, "setSessionSampleRateForActivationMode:", *(_QWORD *)(a1 + 104));

  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24))
  {
    if (kAVVCScope)
    {
      v15 = *(id *)kAVVCScope;
      if (!v15)
      {
LABEL_31:
        v28 = *(_QWORD *)(a1 + 80);
        v29 = *(void **)(a1 + 40);
        v30 = v29 != 0;
        v74[0] = MEMORY[0x1E0C809B0];
        v74[1] = 3221225472;
        v74[2] = ___ZN14ControllerImpl19setContextForStreamEP17AVVoiceControllerP19AVVCContextSettingsmU13block_pointerFvmbP7NSErrorE_block_invoke_348;
        v74[3] = &unk_1E3BEC3D8;
        v31 = v29;
        v32 = *(_QWORD *)(a1 + 96);
        v33 = *(_QWORD *)(a1 + 48);
        v75 = v31;
        v76 = v33;
        v77 = v32;
        ControllerImpl::safeNotifyAlwaysAsync(v28, v30, v74);
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = 1;

        return;
      }
    }
    else
    {
      v15 = MEMORY[0x1E0C81028];
      v26 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      v27 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
      *(_DWORD *)buf = 136315650;
      v87 = "ControllerImpl.mm";
      v88 = 1024;
      v89 = 5743;
      v90 = 1024;
      v91 = v27;
      _os_log_impl(&dword_19B733000, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d setContextForStream ERROR: Failed at setSessionSampleRateForActivationMode: %d", buf, 0x18u);
    }

    goto LABEL_31;
  }
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 64) + 64))(*(_QWORD *)(a1 + 64), 0);
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = objc_msgSend(v24, "setSessionAudioHWControlFlagsForActivationMode:withOptions:", *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112));

  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24))
  {
    if (kAVVCScope)
    {
      v25 = *(id *)kAVVCScope;
      if (!v25)
      {
LABEL_39:
        v38 = *(_QWORD *)(a1 + 80);
        v39 = *(void **)(a1 + 40);
        v40 = v39 != 0;
        v70[0] = MEMORY[0x1E0C809B0];
        v70[1] = 3221225472;
        v70[2] = ___ZN14ControllerImpl19setContextForStreamEP17AVVoiceControllerP19AVVCContextSettingsmU13block_pointerFvmbP7NSErrorE_block_invoke_349;
        v70[3] = &unk_1E3BEC3D8;
        v41 = v39;
        v42 = *(_QWORD *)(a1 + 96);
        v43 = *(_QWORD *)(a1 + 48);
        v71 = v41;
        v72 = v43;
        v73 = v42;
        ControllerImpl::safeNotifyAlwaysAsync(v38, v40, v70);
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = 1;

        return;
      }
    }
    else
    {
      v25 = MEMORY[0x1E0C81028];
      v36 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      v37 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
      *(_DWORD *)buf = 136315650;
      v87 = "ControllerImpl.mm";
      v88 = 1024;
      v89 = 5754;
      v90 = 1024;
      v91 = v37;
      _os_log_impl(&dword_19B733000, v25, OS_LOG_TYPE_ERROR, "%25s:%-5d setContextForStream ERROR: Failed at setSessionAudioHWControlFlagsForActivationMode: %d", buf, 0x18u);
    }

    goto LABEL_39;
  }
  v34 = *(_QWORD *)(a1 + 120);
  if (v34 > 1918986610)
  {
    if (v34 != 1987012963)
    {
      v35 = 1918986611;
LABEL_43:
      if (v34 != v35)
        return;
    }
  }
  else if (v34 != 1668314723)
  {
    v35 = 1751414371;
    goto LABEL_43;
  }
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 64) + 64))(*(_QWORD *)(a1 + 64), 0);
  v64 = (id)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v64, "isSessionActive"))
  {
    v44 = *(_QWORD *)(a1 + 104);

    if (v44 == 1886352244)
    {
      (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 64) + 64))(*(_QWORD *)(a1 + 64), 0);
      v45 = (void *)objc_claimAutoreleasedReturnValue();
      v46 = objc_msgSend(v45, "getSessionActivationOptions");

      CALog::LogObjIfEnabled(3, kAVVCScope);
      v47 = objc_claimAutoreleasedReturnValue();
      v48 = v47;
      if (v47 && os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315650;
        v87 = "ControllerImpl.mm";
        v88 = 1024;
        v89 = 5773;
        v90 = 1024;
        v91 = v46;
        _os_log_impl(&dword_19B733000, v48, OS_LOG_TYPE_DEFAULT, "%25s:%-5d setContextForStream: finish 'live' switch by re-activating active session setActive:TRUE, session options : %d", buf, 0x18u);
      }

      (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 64) + 56))(*(_QWORD *)(a1 + 64), 0);
      v49 = (void *)objc_claimAutoreleasedReturnValue();
      v69 = 0;
      v50 = objc_msgSend(v49, "setActive:withOptions:error:", 1, v46, &v69);
      v51 = v69;

      if ((v50 & 1) != 0)
      {
        (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 64) + 64))(*(_QWORD *)(a1 + 64), 0);
        v52 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v52, "setSessionState:", 7);

        CALog::LogObjIfEnabled(3, kAVVCScope);
        v53 = objc_claimAutoreleasedReturnValue();
        v54 = v53;
        if (v53 && os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315394;
          v87 = "ControllerImpl.mm";
          v88 = 1024;
          v89 = 5783;
          _os_log_impl(&dword_19B733000, v54, OS_LOG_TYPE_DEFAULT, "%25s:%-5d setContextForStream: session re-activated -- calling getSessionProperties", buf, 0x12u);
        }

        *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = AVVCRecordingEngine::getSessionProperties(*(AVVCRecordingEngine **)(a1 + 64));
      }
      else
      {
        CALog::LogObjIfEnabled(1, kAVVCScope);
        v55 = (void *)objc_claimAutoreleasedReturnValue();
        v56 = v55;
        if (v55)
        {
          v57 = v55;
          if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR))
          {
            v58 = objc_msgSend(v51, "code");
            *(_DWORD *)buf = 136315650;
            v87 = "ControllerImpl.mm";
            v88 = 1024;
            v89 = 5775;
            v90 = 1024;
            v91 = v58;
            _os_log_impl(&dword_19B733000, v57, OS_LOG_TYPE_ERROR, "%25s:%-5d setContextForStream : Session re-activation failed with error : %d", buf, 0x18u);
          }

        }
        v59 = *(_QWORD *)(a1 + 80);
        v60 = *(void **)(a1 + 40);
        v61 = v60 != 0;
        v65[0] = MEMORY[0x1E0C809B0];
        v65[1] = 3221225472;
        v65[2] = ___ZN14ControllerImpl19setContextForStreamEP17AVVoiceControllerP19AVVCContextSettingsmU13block_pointerFvmbP7NSErrorE_block_invoke_350;
        v65[3] = &unk_1E3BEC248;
        v62 = v60;
        v63 = *(_QWORD *)(a1 + 96);
        v67 = v62;
        v68 = v63;
        v66 = v51;
        ControllerImpl::safeNotifyAlwaysAsync(v59, v61, v65);
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = 1;

      }
    }
  }
  else
  {

  }
}

void sub_19B7F6DC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  void *v37;
  void *v38;

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl19setContextForStreamEP17AVVoiceControllerP19AVVCContextSettingsmU13block_pointerFvmbP7NSErrorE_block_invoke_351(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  _BOOL8 v3;
  id v4;

  v1 = a1[6];
  v2 = a1[4];
  v3 = *(_DWORD *)(*(_QWORD *)(a1[5] + 8) + 24) == 0;
  objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2F90]);
  v4 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, uint64_t, _BOOL8))(v2 + 16))(v2, v1, v3);

}

void sub_19B7F6F18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl19setContextForStreamEP17AVVoiceControllerP19AVVCContextSettingsmU13block_pointerFvmbP7NSErrorE_block_invoke_346(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  id v3;

  v1 = a1[4];
  v2 = a1[6];
  objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2F90], *(int *)(*(_QWORD *)(a1[5] + 8) + 24), 0);
  v3 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v1 + 16))(v1, v2, 0);

}

void sub_19B7F6FA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl19setContextForStreamEP17AVVoiceControllerP19AVVCContextSettingsmU13block_pointerFvmbP7NSErrorE_block_invoke_347(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  id v3;

  v1 = a1[4];
  v2 = a1[6];
  objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2F90], *(int *)(*(_QWORD *)(a1[5] + 8) + 24), 0);
  v3 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v1 + 16))(v1, v2, 0);

}

void sub_19B7F7028(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl19setContextForStreamEP17AVVoiceControllerP19AVVCContextSettingsmU13block_pointerFvmbP7NSErrorE_block_invoke_348(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  id v3;

  v1 = a1[4];
  v2 = a1[6];
  objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2F90], *(int *)(*(_QWORD *)(a1[5] + 8) + 24), 0);
  v3 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v1 + 16))(v1, v2, 0);

}

void sub_19B7F70B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl19setContextForStreamEP17AVVoiceControllerP19AVVCContextSettingsmU13block_pointerFvmbP7NSErrorE_block_invoke_349(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  id v3;

  v1 = a1[4];
  v2 = a1[6];
  objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2F90], *(int *)(*(_QWORD *)(a1[5] + 8) + 24), 0);
  v3 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v1 + 16))(v1, v2, 0);

}

void sub_19B7F7138(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t ___ZN14ControllerImpl19setContextForStreamEP17AVVoiceControllerP19AVVCContextSettingsmU13block_pointerFvmbP7NSErrorE_block_invoke_350(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(a1[5] + 16))(a1[5], a1[6], 0, a1[4]);
}

uint64_t ControllerImpl::setContextForStream(ControllerImpl *this, AVVoiceController *a2, AVVCContextSettings *a3, uint64_t a4)
{
  AVVoiceController *v7;
  AVVCContextSettings *v8;
  AVVoiceController *v9;
  AVVCContextSettings *v10;
  uint64_t v11;
  _QWORD v13[4];
  AVVoiceController *v14;
  AVVCContextSettings *v15;
  uint64_t *v16;
  ControllerImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;

  v7 = a2;
  v8 = a3;
  v19 = 0;
  v20 = &v19;
  v21 = 0x2020000000;
  v22 = 0;
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 3221225472;
  v13[2] = ___ZN14ControllerImpl19setContextForStreamEP17AVVoiceControllerP19AVVCContextSettingsm_block_invoke;
  v13[3] = &unk_1E3BEC428;
  v17 = this;
  v9 = v7;
  v14 = v9;
  v10 = v8;
  v18 = a4;
  v15 = v10;
  v16 = &v19;
  makeSynchronous(v13);
  v11 = *((unsigned int *)v20 + 6);

  _Block_object_dispose(&v19, 8);
  return v11;
}

void sub_19B7F724C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, void *a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  void *v11;
  void *v12;
  va_list va;

  va_start(va, a11);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl19setContextForStreamEP17AVVoiceControllerP19AVVCContextSettingsm_block_invoke(_QWORD *a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  id v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  id v15;
  _QWORD *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD v23[4];
  id v24;
  uint64_t v25;
  _QWORD v26[4];
  id v27;
  id v28;
  _QWORD *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  uint64_t v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  _QWORD v35[3];
  int v36;

  v3 = a2;
  v5 = a1[7];
  v4 = a1[8];
  v6 = MEMORY[0x1E0C809B0];
  v23[0] = MEMORY[0x1E0C809B0];
  v23[1] = 3221225472;
  v23[2] = ___ZN14ControllerImpl19setContextForStreamEP17AVVoiceControllerP19AVVCContextSettingsm_block_invoke_2;
  v23[3] = &unk_1E3BEC1F8;
  v8 = (void *)a1[5];
  v7 = a1[6];
  v24 = v3;
  v25 = v7;
  v9 = v3;
  v10 = v8;
  v11 = v23;
  v35[0] = 0;
  v35[1] = v35;
  v35[2] = 0x2020000000;
  v36 = 0;
  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v33, *(_QWORD *)(v5 + 8), *(std::__shared_weak_count **)(v5 + 16));
  v26[0] = v6;
  v26[1] = 3321888768;
  v26[2] = ___ZN14ControllerImpl19setContextForStreamEP17AVVoiceControllerP19AVVCContextSettingsmU13block_pointerFvmbP7NSErrorE_block_invoke;
  v26[3] = &unk_1E3BEAC28;
  v12 = v33;
  v30 = v33;
  v31 = v34;
  if (v34)
  {
    p_shared_owners = (unint64_t *)&v34->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  v32 = v4;
  v15 = v10;
  v27 = v15;
  v16 = v11;
  v28 = v16;
  v29 = v35;
  ControllerImpl::safeWork(v12, v26, (uint64_t)"setContextForStream");

  v17 = v31;
  if (v31)
  {
    v18 = (unint64_t *)&v31->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = v34;
  if (v34)
  {
    v21 = (unint64_t *)&v34->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  _Block_object_dispose(v35, 8);

}

void sub_19B7F7454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20)
{
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v23);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v24 - 112);
  _Block_object_dispose((const void *)(v24 - 96), 8);

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl19setContextForStreamEP17AVVoiceControllerP19AVVCContextSettingsm_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  NSObject *v5;
  id v6;

  v6 = a4;
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = objc_msgSend(v6, "code");
  v5 = *(NSObject **)(a1 + 32);
  if (v5)
    dispatch_semaphore_signal(v5);

}

void sub_19B7F74F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void ControllerImpl::playAlertWithCompletion(uint64_t a1, void *a2, int a3, uint64_t a4, void *a5)
{
  id v9;
  id v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  id v14;
  id v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD v22[4];
  id v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  std::__shared_weak_count *v31;

  v9 = a2;
  v10 = a5;
  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v30, *(_QWORD *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16));
  v22[0] = MEMORY[0x1E0C809B0];
  v22[1] = 3321888768;
  v22[2] = ___ZN14ControllerImpl23playAlertWithCompletionEP17AVVoiceController16AVVoiceAlertType20AVVoiceAlertOverrideU13block_pointerFvS2_14AVVCAlertStateP7NSErrorE_block_invoke;
  v22[3] = &unk_1E3BEAEC8;
  v11 = v30;
  v25 = a1;
  v26 = v30;
  v27 = v31;
  if (v31)
  {
    p_shared_owners = (unint64_t *)&v31->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  v14 = v10;
  v24 = v14;
  v29 = a3;
  v15 = v9;
  v23 = v15;
  v28 = a4;
  ControllerImpl::safeWork(v11, v22, (uint64_t)"playAlertWithCompletion");

  v16 = v27;
  if (v27)
  {
    v17 = (unint64_t *)&v27->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = v31;
  if (v31)
  {
    v20 = (unint64_t *)&v31->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }

}

void sub_19B7F7680(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v17);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v18 - 80);

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl23playAlertWithCompletionEP17AVVoiceController16AVVoiceAlertType20AVVoiceAlertOverrideU13block_pointerFvS2_14AVVCAlertStateP7NSErrorE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  char v4;
  void *v5;
  void *v6;
  void *v7;
  NSObject *v8;
  NSObject *v9;
  id v10;
  uint64_t v11;
  void *v12;
  _BOOL4 v13;
  id v14;
  id v15;
  int v16;
  int v17;
  unsigned int v18;
  int v19;
  NSObject *v20;
  unint64_t v21;
  BOOL v22;
  int v23;
  uint64_t v24;
  void *v25;
  _BOOL4 v26;
  NSObject *v27;
  id v28;
  std::__shared_weak_count *v29;
  void *v30;
  unint64_t *p_shared_weak_owners;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  id v35;
  uint64_t v36;
  void *v37;
  _BOOL4 v38;
  id v39;
  BOOL v40;
  uint64_t v41;
  void *v42;
  int v43;
  AVVoiceController *v44;
  std::__shared_weak_count *v45;
  unint64_t *p_shared_owners;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  _QWORD v51[4];
  id v52;
  uint64_t *v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  int v56;
  int v57;
  BOOL v58;
  _QWORD v59[4];
  id v60;
  uint64_t *v61;
  int v62;
  _QWORD v63[4];
  id v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(uint64_t);
  void *v69;
  id v70;
  uint64_t *v71;
  id v72[2];
  std::__shared_weak_count *v73;
  int v74;
  id location;
  _QWORD v76[4];
  id v77;
  uint64_t *v78;
  int v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  int v83;
  _BYTE buf[12];
  __int16 v85;
  int v86;
  __int16 v87;
  void *v88;
  uint64_t v89;

  v89 = *MEMORY[0x1E0C80C00];
  v80 = 0;
  v81 = &v80;
  v82 = 0x2020000000;
  v83 = 0;
  v2 = *(_QWORD *)(a1 + 48);
  ControllerImpl::sessionManagerForStreamID(*(_QWORD *)(a1 + 56), 0, 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "isSessionActive");

  if ((v4 & 1) == 0)
  {
    if (kAVVCScope)
    {
      v9 = *(id *)kAVVCScope;
      if (!v9)
      {
LABEL_12:
        *((_DWORD *)v81 + 6) = -11782;
        v11 = *(_QWORD *)(a1 + 56);
        v12 = *(void **)(a1 + 40);
        v13 = v12 != 0;
        v76[0] = MEMORY[0x1E0C809B0];
        v76[1] = 3221225472;
        v76[2] = ___ZN14ControllerImpl23playAlertWithCompletionEP17AVVoiceController16AVVoiceAlertType20AVVoiceAlertOverrideU13block_pointerFvS2_14AVVCAlertStateP7NSErrorE_block_invoke_354;
        v76[3] = &unk_1E3BEC450;
        v14 = v12;
        v79 = *(_DWORD *)(a1 + 80);
        v77 = v14;
        v78 = &v80;
        ControllerImpl::safeNotifyAlwaysAsync(v11, v13, v76);
        v7 = v77;
        goto LABEL_13;
      }
    }
    else
    {
      v9 = MEMORY[0x1E0C81028];
      v10 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "ControllerImpl.mm";
      v85 = 1024;
      v86 = 5833;
      _os_log_impl(&dword_19B733000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d playAlertWithCompletion: called when session inactive--do nothing and return error", buf, 0x12u);
    }

    goto LABEL_12;
  }
  ControllerImpl::sessionManagerForStreamID(*(_QWORD *)(a1 + 56), 0, 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "playbackRoute");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = (void *)objc_msgSend(v6, "copy");

  if (kAVVCScope)
  {
    v8 = *(id *)kAVVCScope;
    if (!v8)
      goto LABEL_18;
  }
  else
  {
    v8 = MEMORY[0x1E0C81028];
    v15 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "ControllerImpl.mm";
    v85 = 1024;
    v86 = 5848;
    v87 = 2112;
    v88 = v7;
    _os_log_impl(&dword_19B733000, v8, OS_LOG_TYPE_DEBUG, "%25s:%-5d Current Playback Route %@", buf, 0x1Cu);
  }

LABEL_18:
  v16 = objc_msgSend(v7, "isEqualToString:", *MEMORY[0x1E0CFF100]);
  v17 = *(_DWORD *)(a1 + 80);
  v18 = v17 - 1;
  if (v16)
  {
    if (v18 > 2)
    {
      v24 = *(_QWORD *)(a1 + 56);
      v25 = *(void **)(a1 + 40);
      v26 = v25 != 0;
      v63[0] = MEMORY[0x1E0C809B0];
      v63[1] = 3221225472;
      v63[2] = ___ZN14ControllerImpl23playAlertWithCompletionEP17AVVoiceController16AVVoiceAlertType20AVVoiceAlertOverrideU13block_pointerFvS2_14AVVCAlertStateP7NSErrorE_block_invoke_359;
      v63[3] = &unk_1E3BEBE50;
      v64 = v25;
      v65 = *(_DWORD *)(a1 + 80);
      ControllerImpl::safeNotifyAlwaysAsync(v24, v26, v63);

      goto LABEL_13;
    }
    v19 = v17 + 1109;
    if (kAVVCScope)
    {
      v20 = *(id *)kAVVCScope;
      if (!v20)
      {
LABEL_36:
        *(_QWORD *)buf = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        *(_WORD *)&buf[8] = 257;
        CACFDictionary::AddBool((__CFDictionary **)buf, (const __CFString *)*MEMORY[0x1E0C92528]);
        objc_initWeak(&location, *(id *)(a1 + 32));
        v30 = *(void **)(a1 + 56);
        v29 = *(std::__shared_weak_count **)(a1 + 64);
        if (v29)
        {
          p_shared_weak_owners = (unint64_t *)&v29->__shared_weak_owners_;
          do
            v32 = __ldxr(p_shared_weak_owners);
          while (__stxr(v32 + 1, p_shared_weak_owners));
        }
        v66 = MEMORY[0x1E0C809B0];
        v67 = 3321888768;
        v68 = ___ZN14ControllerImpl23playAlertWithCompletionEP17AVVoiceController16AVVoiceAlertType20AVVoiceAlertOverrideU13block_pointerFvS2_14AVVCAlertStateP7NSErrorE_block_invoke_355;
        v69 = &unk_1E3BE6070;
        objc_copyWeak(v72, &location);
        v72[1] = v30;
        v73 = v29;
        if (v29)
        {
          v33 = (unint64_t *)&v29->__shared_weak_owners_;
          do
            v34 = __ldxr(v33);
          while (__stxr(v34 + 1, v33));
        }
        v74 = *(_DWORD *)(a1 + 80);
        v70 = *(id *)(a1 + 40);
        v71 = &v80;
        AudioServicesPlaySystemSoundWithOptions();

        if (v73)
          std::__shared_weak_count::__release_weak(v73);
        objc_destroyWeak(v72);
        if (v29)
          std::__shared_weak_count::__release_weak(v29);
        objc_destroyWeak(&location);
        CACFDictionary::~CACFDictionary((CACFDictionary *)buf);
        goto LABEL_13;
      }
    }
    else
    {
      v20 = MEMORY[0x1E0C81028];
      v28 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "ControllerImpl.mm";
      v85 = 1024;
      v86 = 5854;
      v87 = 1024;
      LODWORD(v88) = v19;
      _os_log_impl(&dword_19B733000, v20, OS_LOG_TYPE_DEFAULT, "%25s:%-5d playAlertWithOverride: calling AudioServicesPlaySystemSoundWithOptions with sound ID %d", buf, 0x18u);
    }

    goto LABEL_36;
  }
  if (v18 >= 3)
  {
    if (kAVVCScope)
    {
      v27 = *(id *)kAVVCScope;
      if (!v27)
      {
LABEL_51:
        *((_DWORD *)v81 + 6) = -11780;
        v36 = *(_QWORD *)(a1 + 56);
        v37 = *(void **)(a1 + 40);
        v38 = v37 != 0;
        v59[0] = MEMORY[0x1E0C809B0];
        v59[1] = 3221225472;
        v59[2] = ___ZN14ControllerImpl23playAlertWithCompletionEP17AVVoiceController16AVVoiceAlertType20AVVoiceAlertOverrideU13block_pointerFvS2_14AVVCAlertStateP7NSErrorE_block_invoke_360;
        v59[3] = &unk_1E3BEC450;
        v39 = v37;
        v62 = *(_DWORD *)(a1 + 80);
        v60 = v39;
        v61 = &v80;
        ControllerImpl::safeNotifyAlwaysAsync(v36, v38, v59);

        goto LABEL_13;
      }
    }
    else
    {
      v27 = MEMORY[0x1E0C81028];
      v35 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "ControllerImpl.mm";
      v85 = 1024;
      v86 = 5886;
      _os_log_impl(&dword_19B733000, v27, OS_LOG_TYPE_ERROR, "%25s:%-5d playAlertWithCompletion: Illegal alertType", buf, 0x12u);
    }

    goto LABEL_51;
  }
  v21 = *(_QWORD *)(a1 + 72);
  v22 = v21 != -1;
  switch(v17)
  {
    case 3:
      v23 = *(_DWORD *)(*(_QWORD *)(a1 + 56) + 328);
      break;
    case 2:
      v23 = *(_DWORD *)(*(_QWORD *)(a1 + 56) + 324);
      break;
    case 1:
      v23 = *(_DWORD *)(*(_QWORD *)(a1 + 56) + 320);
      break;
    default:
      v23 = 0;
      break;
  }
  if (v21 < 5 || (v40 = v21 == -1, LODWORD(v21) = v23, !v40))
  {
    switch(v17)
    {
      case 3:
        ControllerImpl::setStopWithErrorAlertMode(*(_QWORD *)(a1 + 56), v21);
        break;
      case 2:
        ControllerImpl::setStopAlertMode(*(_QWORD *)(a1 + 56), v21);
        break;
      case 1:
        ControllerImpl::setStartAlertMode(*(_QWORD *)(a1 + 56), v21);
        break;
    }
  }
  v41 = *(_QWORD *)(a1 + 56);
  *(_BYTE *)(v41 + 409) = 1;
  v42 = *(void **)(a1 + 32);
  v43 = *(_DWORD *)(a1 + 80);
  v44 = *(AVVoiceController **)(v2 + 472);
  v51[0] = MEMORY[0x1E0C809B0];
  v51[1] = 3321888768;
  v51[2] = ___ZN14ControllerImpl23playAlertWithCompletionEP17AVVoiceController16AVVoiceAlertType20AVVoiceAlertOverrideU13block_pointerFvS2_14AVVCAlertStateP7NSErrorE_block_invoke_2;
  v51[3] = &unk_1E3BEAAA0;
  v58 = v22;
  v56 = v43;
  v53 = &v80;
  v54 = v41;
  v45 = *(std::__shared_weak_count **)(a1 + 64);
  v55 = v45;
  if (v45)
  {
    p_shared_owners = (unint64_t *)&v45->__shared_owners_;
    do
      v47 = __ldxr(p_shared_owners);
    while (__stxr(v47 + 1, p_shared_owners));
  }
  v57 = v23;
  v52 = *(id *)(a1 + 40);
  ControllerImpl::playAlert(v41, v42, v43, v44, v51);

  v48 = v55;
  if (v55)
  {
    v49 = (unint64_t *)&v55->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
LABEL_13:

  _Block_object_dispose(&v80, 8);
}

void sub_19B7F7E2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,std::__shared_weak_count *a41)
{
  void *v41;
  std::__shared_weak_count *v42;
  id *v43;
  uint64_t v44;

  if (a41)
    std::__shared_weak_count::__release_weak(a41);
  objc_destroyWeak(v43);
  if (v42)
    std::__shared_weak_count::__release_weak(v42);
  objc_destroyWeak((id *)(v44 - 224));
  CACFDictionary::~CACFDictionary((CACFDictionary *)(v44 - 128));

  _Block_object_dispose((const void *)(v44 - 160), 8);
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl23playAlertWithCompletionEP17AVVoiceController16AVVoiceAlertType20AVVoiceAlertOverrideU13block_pointerFvS2_14AVVCAlertStateP7NSErrorE_block_invoke_354(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  id v3;

  v1 = *(unsigned int *)(a1 + 48);
  v2 = *(_QWORD *)(a1 + 32);
  objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2F90], *(int *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24), 0);
  v3 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v2, v1, 1);

}

void sub_19B7F7F90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl23playAlertWithCompletionEP17AVVoiceController16AVVoiceAlertType20AVVoiceAlertOverrideU13block_pointerFvS2_14AVVCAlertStateP7NSErrorE_block_invoke_355(uint64_t a1)
{
  NSObject *v2;
  id v3;
  id WeakRetained;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  _BOOL4 v11;
  id v12;
  uint64_t v13;
  NSObject *v14;
  id v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  _QWORD v18[4];
  id v19;
  uint64_t v20;
  int v21;
  _QWORD v22[4];
  id v23[3];
  int v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  uint8_t buf[4];
  const char *v28;
  __int16 v29;
  int v30;
  __int16 v31;
  id v32;
  __int16 v33;
  uint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  if (kAVVCScope)
  {
    v2 = *(id *)kAVVCScope;
    if (!v2)
      goto LABEL_8;
  }
  else
  {
    v2 = MEMORY[0x1E0C81028];
    v3 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315394;
    v28 = "ControllerImpl.mm";
    v29 = 1024;
    v30 = 5861;
    _os_log_impl(&dword_19B733000, v2, OS_LOG_TYPE_DEBUG, "%25s:%-5d playAlertWithOverride: Finished playing the alert beep", buf, 0x12u);
  }

LABEL_8:
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v25 = 0;
  v26 = 0;
  v5 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v5)
  {
    v6 = 0;
    goto LABEL_14;
  }
  v6 = std::__shared_weak_count::lock(v5);
  v26 = v6;
  if (!v6)
  {
LABEL_14:
    v7 = 0;
    goto LABEL_15;
  }
  v7 = *(_QWORD *)(a1 + 56);
  v25 = v7;
  if (!WeakRetained || !v7)
  {
LABEL_15:
    if (kAVVCScope)
    {
      v14 = *(id *)kAVVCScope;
      if (!v14)
        goto LABEL_22;
    }
    else
    {
      v14 = MEMORY[0x1E0C81028];
      v15 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315906;
      v28 = "ControllerImpl.mm";
      v29 = 1024;
      v30 = 5862;
      v31 = 2048;
      v32 = WeakRetained;
      v33 = 2048;
      v34 = v7;
      _os_log_impl(&dword_19B733000, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d nil object encountered (avvc: %p, impl: %p). Bailing", buf, 0x26u);
    }

LABEL_22:
    if (!v6)
      goto LABEL_27;
    goto LABEL_23;
  }
  *(_QWORD *)(v7 + 208) = 2;
  v8 = *(void **)(v7 + 392);
  v9 = MEMORY[0x1E0C809B0];
  v22[0] = MEMORY[0x1E0C809B0];
  v22[1] = 3221225472;
  v22[2] = ___ZN14ControllerImpl23playAlertWithCompletionEP17AVVoiceController16AVVoiceAlertType20AVVoiceAlertOverrideU13block_pointerFvS2_14AVVCAlertStateP7NSErrorE_block_invoke_357;
  v22[3] = &unk_1E3BEC000;
  objc_copyWeak(v23, (id *)(a1 + 48));
  v24 = *(_DWORD *)(a1 + 72);
  v23[1] = (id)2;
  v23[2] = v8;
  ControllerImpl::safeNotify(v7, (uint64_t)"playAlertWithCompletion: alertPlaybackFinishedWithSettings", v22);
  v10 = *(void **)(a1 + 32);
  v11 = v10 != 0;
  v18[0] = v9;
  v18[1] = 3221225472;
  v18[2] = ___ZN14ControllerImpl23playAlertWithCompletionEP17AVVoiceController16AVVoiceAlertType20AVVoiceAlertOverrideU13block_pointerFvS2_14AVVCAlertStateP7NSErrorE_block_invoke_358;
  v18[3] = &unk_1E3BEC450;
  v12 = v10;
  v21 = *(_DWORD *)(a1 + 72);
  v13 = *(_QWORD *)(a1 + 40);
  v19 = v12;
  v20 = v13;
  ControllerImpl::safeNotifyAlwaysAsync(v7, v11, v18);

  objc_destroyWeak(v23);
LABEL_23:
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_27:

}

void sub_19B7F8294(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  void *v17;
  id *v18;
  va_list va;

  va_start(va, a17);

  objc_destroyWeak(v18);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)va);

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl23playAlertWithCompletionEP17AVVoiceController16AVVoiceAlertType20AVVoiceAlertOverrideU13block_pointerFvS2_14AVVCAlertStateP7NSErrorE_block_invoke_359(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  id v3;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(unsigned int *)(a1 + 40);
  objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2F90], -11780, 0);
  v3 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 16))(v1, v2, 1);

}

void sub_19B7F8338(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl23playAlertWithCompletionEP17AVVoiceController16AVVoiceAlertType20AVVoiceAlertOverrideU13block_pointerFvS2_14AVVCAlertStateP7NSErrorE_block_invoke_360(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  id v3;

  v1 = *(unsigned int *)(a1 + 48);
  v2 = *(_QWORD *)(a1 + 32);
  objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2F90], *(int *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24), 0);
  v3 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v2, v1, 1);

}

void sub_19B7F83C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl23playAlertWithCompletionEP17AVVoiceController16AVVoiceAlertType20AVVoiceAlertOverrideU13block_pointerFvS2_14AVVCAlertStateP7NSErrorE_block_invoke_2(uint64_t a1, int a2)
{
  int v3;
  uint64_t v4;
  void *v5;
  _BOOL4 v6;
  id v7;
  uint64_t v8;
  _QWORD v9[4];
  id v10;
  uint64_t v11;
  int v12;

  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = a2;
  if (*(_BYTE *)(a1 + 72))
  {
    v3 = *(_DWORD *)(a1 + 64);
    switch(v3)
    {
      case 3:
        ControllerImpl::setStopWithErrorAlertMode(*(_QWORD *)(a1 + 48), *(_DWORD *)(a1 + 68));
        break;
      case 2:
        ControllerImpl::setStopAlertMode(*(_QWORD *)(a1 + 48), *(_DWORD *)(a1 + 68));
        break;
      case 1:
        ControllerImpl::setStartAlertMode(*(_QWORD *)(a1 + 48), *(_DWORD *)(a1 + 68));
        break;
    }
  }
  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(void **)(a1 + 32);
  v6 = v5 != 0;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = ___ZN14ControllerImpl23playAlertWithCompletionEP17AVVoiceController16AVVoiceAlertType20AVVoiceAlertOverrideU13block_pointerFvS2_14AVVCAlertStateP7NSErrorE_block_invoke_3;
  v9[3] = &unk_1E3BEC450;
  v7 = v5;
  v12 = *(_DWORD *)(a1 + 64);
  v8 = *(_QWORD *)(a1 + 40);
  v10 = v7;
  v11 = v8;
  ControllerImpl::safeNotifyAlwaysAsync(v4, v6, v9);

}

void sub_19B7F84C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl23playAlertWithCompletionEP17AVVoiceController16AVVoiceAlertType20AVVoiceAlertOverrideU13block_pointerFvS2_14AVVCAlertStateP7NSErrorE_block_invoke_3(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  id v3;

  v1 = *(unsigned int *)(a1 + 48);
  v2 = *(_QWORD *)(a1 + 32);
  objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2F90], *(int *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24), 0);
  v3 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v2, v1, 1);

}

void sub_19B7F854C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_56c39_ZTSNSt3__18weak_ptrI14ControllerImplEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(result + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(result + 64) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_ea8_56c39_ZTSNSt3__18weak_ptrI14ControllerImplEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 64);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void ___ZN14ControllerImpl23playAlertWithCompletionEP17AVVoiceController16AVVoiceAlertType20AVVoiceAlertOverrideU13block_pointerFvS2_14AVVCAlertStateP7NSErrorE_block_invoke_357(uint64_t a1)
{
  id WeakRetained;
  AVVCAlertInformation *v3;
  NSObject *v4;
  id v5;
  int v6;
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v3 = -[AVVCAlertInformation initWithAlertType:mode:endTime:]([AVVCAlertInformation alloc], "initWithAlertType:mode:endTime:", *(unsigned int *)(a1 + 56), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
    objc_msgSend(WeakRetained, "alertPlaybackFinishedWithSettings:", v3);

  }
  else
  {
    if (kAVVCScope)
    {
      v4 = *(id *)kAVVCScope;
      if (!v4)
        goto LABEL_10;
    }
    else
    {
      v4 = MEMORY[0x1E0C81028];
      v5 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v6 = 136315650;
      v7 = "ControllerImpl.mm";
      v8 = 1024;
      v9 = 5867;
      v10 = 2048;
      v11 = 0;
      _os_log_impl(&dword_19B733000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d nil object encountered (avvc: %p). Bailing", (uint8_t *)&v6, 0x1Cu);
    }

  }
LABEL_10:

}

void sub_19B7F86C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl23playAlertWithCompletionEP17AVVoiceController16AVVoiceAlertType20AVVoiceAlertOverrideU13block_pointerFvS2_14AVVCAlertStateP7NSErrorE_block_invoke_358(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  id v3;

  v1 = *(unsigned int *)(a1 + 48);
  v2 = *(_QWORD *)(a1 + 32);
  objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2F90], *(int *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24), 0);
  v3 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v2, v1, 1);

}

void sub_19B7F875C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t ControllerImpl::playAlertWithOverride(uint64_t a1, void *a2, int a3, uint64_t a4)
{
  id v7;
  id v8;
  uint64_t v9;
  _QWORD v11[4];
  id v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  int v20;

  v7 = a2;
  v17 = 0;
  v18 = &v17;
  v19 = 0x2020000000;
  v20 = 0;
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = ___ZN14ControllerImpl21playAlertWithOverrideEP17AVVoiceController16AVVoiceAlertType20AVVoiceAlertOverride_block_invoke;
  v11[3] = &unk_1E3BEC4A0;
  v14 = a1;
  v8 = v7;
  v16 = a3;
  v15 = a4;
  v12 = v8;
  v13 = &v17;
  makeSynchronous(v11);
  v9 = *((unsigned int *)v18 + 6);

  _Block_object_dispose(&v17, 8);
  return v9;
}

void sub_19B7F8830(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  uint64_t v15;

  _Block_object_dispose((const void *)(v15 - 64), 8);
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl21playAlertWithOverrideEP17AVVoiceController16AVVoiceAlertType20AVVoiceAlertOverride_block_invoke(uint64_t a1, void *a2)
{
  id v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  _QWORD v10[4];
  id v11;
  uint64_t v12;

  v3 = a2;
  v4 = *(_DWORD *)(a1 + 64);
  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 56);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = ___ZN14ControllerImpl21playAlertWithOverrideEP17AVVoiceController16AVVoiceAlertType20AVVoiceAlertOverride_block_invoke_2;
  v10[3] = &unk_1E3BEC478;
  v8 = *(void **)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 40);
  v11 = v3;
  v12 = v7;
  v9 = v3;
  ControllerImpl::playAlertWithCompletion(v5, v8, v4, v6, v10);

}

void sub_19B7F88F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl21playAlertWithOverrideEP17AVVoiceController16AVVoiceAlertType20AVVoiceAlertOverride_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  NSObject *v5;
  id v6;

  v6 = a4;
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = objc_msgSend(v6, "code");
  v5 = *(NSObject **)(a1 + 32);
  if (v5)
    dispatch_semaphore_signal(v5);

}

void sub_19B7F8958(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl28getRecordDeviceInfoForStreamEP17AVVoiceControllermU13block_pointerFvmP20AVVCRecordDeviceInfoP7NSErrorE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  NSObject *v15;
  id v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  _BOOL4 v20;
  id v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  _QWORD v26[4];
  id v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  _QWORD v33[4];
  id v34;
  uint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  uint8_t buf[4];
  const char *v39;
  __int16 v40;
  int v41;
  __int16 v42;
  uint64_t v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  ControllerImpl::_lookupEngineForStreamID((ControllerImpl *)&v36, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 576), *(std::__shared_weak_count **)(*(_QWORD *)(a1 + 40) + 584), *(_QWORD *)(a1 + 56));
  v2 = v36;
  if (!v36)
  {
    if (kAVVCScope)
    {
      v15 = *(id *)kAVVCScope;
      if (!v15)
      {
LABEL_25:
        v18 = *(void **)(a1 + 32);
        v19 = *(_QWORD *)(a1 + 40);
        v20 = v18 != 0;
        v33[0] = MEMORY[0x1E0C809B0];
        v33[1] = 3221225472;
        v33[2] = ___ZN14ControllerImpl28getRecordDeviceInfoForStreamEP17AVVoiceControllermU13block_pointerFvmP20AVVCRecordDeviceInfoP7NSErrorE_block_invoke_364;
        v33[3] = &unk_1E3BECB48;
        v21 = v18;
        v22 = *(_QWORD *)(a1 + 56);
        v34 = v21;
        v35 = v22;
        ControllerImpl::safeNotifyAlwaysAsync(v19, v20, v33);

        goto LABEL_26;
      }
    }
    else
    {
      v15 = MEMORY[0x1E0C81028];
      v16 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      v17 = *(_QWORD *)(a1 + 56);
      *(_DWORD *)buf = 136315650;
      v39 = "ControllerImpl.mm";
      v40 = 1024;
      v41 = 5962;
      v42 = 2048;
      v43 = v17;
      _os_log_impl(&dword_19B733000, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d getRecordDeviceInfoForStream: Nil recording engine for streamID(%llu)", buf, 0x1Cu);
    }

    goto LABEL_25;
  }
  v26[0] = MEMORY[0x1E0C809B0];
  v26[1] = 3321888768;
  v26[2] = ___ZN14ControllerImpl28getRecordDeviceInfoForStreamEP17AVVoiceControllermU13block_pointerFvmP20AVVCRecordDeviceInfoP7NSErrorE_block_invoke_2;
  v26[3] = &unk_1E3BEABB8;
  v28 = v36;
  v29 = v37;
  if (v37)
  {
    p_shared_owners = (unint64_t *)&v37->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(std::__shared_weak_count **)(a1 + 48);
  v30 = *(_QWORD *)(a1 + 56);
  v31 = v5;
  v32 = v6;
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v27 = *(id *)(a1 + 32);
  (*(void (**)(uint64_t, _QWORD *, const char *))(*(_QWORD *)v2 + 360))(v2, v26, "getRecordDeviceInfoForStream_block_invoke");

  v9 = v32;
  if (v32)
  {
    v10 = (unint64_t *)&v32->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = v29;
  if (v29)
  {
    v13 = (unint64_t *)&v29->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
LABEL_26:
  v23 = v37;
  if (v37)
  {
    v24 = (unint64_t *)&v37->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
}

void sub_19B7F8C3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  uint64_t v23;

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v23 - 96);
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl28getRecordDeviceInfoForStreamEP17AVVoiceControllermU13block_pointerFvmP20AVVCRecordDeviceInfoP7NSErrorE_block_invoke_364(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  id v3;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2F90], -11793, 0);
  v3 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v1 + 16))(v1, v2, 0);

}

void sub_19B7F8CE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl28getRecordDeviceInfoForStreamEP17AVVoiceControllermU13block_pointerFvmP20AVVCRecordDeviceInfoP7NSErrorE_block_invoke_2(_QWORD *a1)
{
  AVVCRecordDeviceInfo *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  AVVCRecordDeviceInfo *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  id v10;
  id v11;
  NSObject *v12;
  uint64_t v13;
  void *v14;
  _BOOL4 v15;
  void *v16;
  void *v17;
  unsigned int v18;
  uint64_t v19;
  void *v20;
  _BOOL4 v21;
  id v22;
  uint64_t v23;
  AVVCRecordDeviceInfo *v24;
  _QWORD v25[4];
  AVVCRecordDeviceInfo *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  uint8_t buf[4];
  const char *v32;
  __int16 v33;
  int v34;
  __int16 v35;
  uint64_t v36;
  __int16 v37;
  void *v38;
  __int16 v39;
  _BOOL4 v40;
  __int16 v41;
  void *v42;
  __int16 v43;
  void *v44;
  __int16 v45;
  unsigned int v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v2 = [AVVCRecordDeviceInfo alloc];
  v3 = (std::__shared_weak_count *)a1[6];
  v29 = a1[5];
  v30 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v6 = -[AVVCRecordDeviceInfo initWithRecordingEngine:](v2, "initWithRecordingEngine:", &v29);
  v7 = v30;
  if (v30)
  {
    v8 = (unint64_t *)&v30->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (kAVVCScope)
  {
    v10 = *(id *)kAVVCScope;
    if (!v10)
      goto LABEL_16;
  }
  else
  {
    v10 = (id)MEMORY[0x1E0C81028];
    v11 = MEMORY[0x1E0C81028];
  }
  v12 = v10;
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    v13 = a1[7];
    -[AVVCRecordDeviceInfo recordRoute](v6, "recordRoute");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = -[AVVCRecordDeviceInfo isRemoteDevice](v6, "isRemoteDevice");
    -[AVVCRecordDeviceInfo remoteProductIdentifier](v6, "remoteProductIdentifier");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    -[AVVCRecordDeviceInfo remoteDeviceUID](v6, "remoteDeviceUID");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = -[AVVCRecordDeviceInfo remoteDeviceCategory](v6, "remoteDeviceCategory");
    *(_DWORD *)buf = 136316930;
    v32 = "ControllerImpl.mm";
    v33 = 1024;
    v34 = 5970;
    v35 = 2048;
    v36 = v13;
    v37 = 2112;
    v38 = v14;
    v39 = 1024;
    v40 = v15;
    v41 = 2112;
    v42 = v16;
    v43 = 2112;
    v44 = v17;
    v45 = 1024;
    v46 = v18;
    _os_log_impl(&dword_19B733000, v12, OS_LOG_TYPE_DEFAULT, "%25s:%-5d StreamID(%llu). RecordRoute: %@, isRemoteDevice: %d, productID: %@, uuid: %@, category: %d", buf, 0x46u);

  }
LABEL_16:
  v19 = a1[8];
  v20 = (void *)a1[4];
  v21 = v20 != 0;
  v25[0] = MEMORY[0x1E0C809B0];
  v25[1] = 3221225472;
  v25[2] = ___ZN14ControllerImpl28getRecordDeviceInfoForStreamEP17AVVoiceControllermU13block_pointerFvmP20AVVCRecordDeviceInfoP7NSErrorE_block_invoke_366;
  v25[3] = &unk_1E3BEC248;
  v22 = v20;
  v23 = a1[7];
  v27 = v22;
  v28 = v23;
  v24 = v6;
  v26 = v24;
  ControllerImpl::safeNotifyAlwaysAsync(v19, v21, v25);

}

void sub_19B7F8F6C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

_QWORD *__copy_helper_block_ea8_40c47_ZTSNSt3__110shared_ptrI19AVVCRecordingEngineEE64c42_ZTSNSt3__110shared_ptrI14ControllerImplEE(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = a2[6];
  result[5] = a2[5];
  result[6] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  v5 = a2[9];
  result[8] = a2[8];
  result[9] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return result;
}

uint64_t __destroy_helper_block_ea8_40c47_ZTSNSt3__110shared_ptrI19AVVCRecordingEngineEE64c42_ZTSNSt3__110shared_ptrI14ControllerImplEE(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 + 40;
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](a1 + 64);
  return std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v1);
}

uint64_t ___ZN14ControllerImpl28getRecordDeviceInfoForStreamEP17AVVoiceControllermU13block_pointerFvmP20AVVCRecordDeviceInfoP7NSErrorE_block_invoke_366(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(a1[5] + 16))(a1[5], a1[6], a1[4], 0);
}

id ControllerImpl::getRecordDeviceInfoForStream(ControllerImpl *this, AVVoiceController *a2, uint64_t a3)
{
  AVVoiceController *v5;
  AVVoiceController *v6;
  id v7;
  _QWORD v9[4];
  AVVoiceController *v10;
  uint64_t *v11;
  ControllerImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t);
  void (*v18)(uint64_t);
  id v19;

  v5 = a2;
  v14 = 0;
  v15 = &v14;
  v16 = 0x3032000000;
  v17 = __Block_byref_object_copy__4869;
  v18 = __Block_byref_object_dispose__4870;
  v19 = 0;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = ___ZN14ControllerImpl28getRecordDeviceInfoForStreamEP17AVVoiceControllerm_block_invoke;
  v9[3] = &unk_1E3BEC310;
  v12 = this;
  v13 = a3;
  v10 = v5;
  v11 = &v14;
  v6 = v5;
  makeSynchronous(v9);
  v7 = (id)v15[5];

  _Block_object_dispose(&v14, 8);
  return v7;
}

void sub_19B7F9128(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  void *v22;

  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl28getRecordDeviceInfoForStreamEP17AVVoiceControllerm_block_invoke(_QWORD *a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _QWORD *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD v20[4];
  id v21;
  uint64_t v22;
  _QWORD v23[4];
  id v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;

  v3 = a2;
  v5 = a1[6];
  v4 = a1[7];
  v6 = MEMORY[0x1E0C809B0];
  v20[0] = MEMORY[0x1E0C809B0];
  v20[1] = 3221225472;
  v20[2] = ___ZN14ControllerImpl28getRecordDeviceInfoForStreamEP17AVVoiceControllerm_block_invoke_2;
  v20[3] = &unk_1E3BEC4C8;
  v7 = a1[5];
  v21 = v3;
  v22 = v7;
  v8 = v3;
  v9 = v20;
  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v28, *(_QWORD *)(v5 + 8), *(std::__shared_weak_count **)(v5 + 16));
  v23[0] = v6;
  v23[1] = 3321888768;
  v23[2] = ___ZN14ControllerImpl28getRecordDeviceInfoForStreamEP17AVVoiceControllermU13block_pointerFvmP20AVVCRecordDeviceInfoP7NSErrorE_block_invoke;
  v23[3] = &unk_1E3BEA488;
  v10 = v28;
  v25 = v28;
  v26 = v29;
  if (v29)
  {
    p_shared_owners = (unint64_t *)&v29->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v27 = v4;
  v13 = v9;
  v24 = v13;
  ControllerImpl::safeWork(v10, v23, (uint64_t)"getRecordDeviceInfoForStream");

  v14 = v26;
  if (v26)
  {
    v15 = (unint64_t *)&v26->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = v29;
  if (v29)
  {
    v18 = (unint64_t *)&v29->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }

}

void sub_19B7F92DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v21);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v22 - 64);

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl28getRecordDeviceInfoForStreamEP17AVVoiceControllerm_block_invoke_2(uint64_t a1, uint64_t a2, void *a3)
{
  NSObject *v5;
  id v6;

  v6 = a3;
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a3);
  v5 = *(NSObject **)(a1 + 32);
  if (v5)
    dispatch_semaphore_signal(v5);

}

void ___ZN14ControllerImpl26getRecordSettingsForStreamEP17AVVoiceControllermU13block_pointerFvmP12NSDictionaryP7NSErrorE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  id v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  NSObject *v16;
  id v17;
  void *v18;
  uint64_t v19;
  _BOOL4 v20;
  id v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  _QWORD v26[4];
  id v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  uint64_t v32;
  _QWORD v33[4];
  id v34;
  uint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  uint8_t buf[4];
  const char *v39;
  __int16 v40;
  int v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  ControllerImpl::_lookupEngineForStreamID((ControllerImpl *)&v36, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 576), *(std::__shared_weak_count **)(*(_QWORD *)(a1 + 40) + 584), *(_QWORD *)(a1 + 56));
  v2 = v36;
  if (!v36)
  {
    if (kAVVCScope)
    {
      v16 = *(id *)kAVVCScope;
      if (!v16)
      {
LABEL_25:
        v18 = *(void **)(a1 + 32);
        v19 = *(_QWORD *)(a1 + 40);
        v20 = v18 != 0;
        v33[0] = MEMORY[0x1E0C809B0];
        v33[1] = 3221225472;
        v33[2] = ___ZN14ControllerImpl26getRecordSettingsForStreamEP17AVVoiceControllermU13block_pointerFvmP12NSDictionaryP7NSErrorE_block_invoke_370;
        v33[3] = &unk_1E3BECB48;
        v21 = v18;
        v22 = *(_QWORD *)(a1 + 56);
        v34 = v21;
        v35 = v22;
        ControllerImpl::safeNotifyAlwaysAsync(v19, v20, v33);

        goto LABEL_26;
      }
    }
    else
    {
      v16 = MEMORY[0x1E0C81028];
      v17 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v39 = "ControllerImpl.mm";
      v40 = 1024;
      v41 = 5999;
      _os_log_impl(&dword_19B733000, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d getRecordSettingsForStream: Nil recording engine", buf, 0x12u);
    }

    goto LABEL_25;
  }
  v26[0] = MEMORY[0x1E0C809B0];
  v26[1] = 3321888768;
  v26[2] = ___ZN14ControllerImpl26getRecordSettingsForStreamEP17AVVoiceControllermU13block_pointerFvmP12NSDictionaryP7NSErrorE_block_invoke_2;
  v26[3] = &unk_1E3BEAB80;
  v28 = v36;
  v29 = v37;
  if (v37)
  {
    p_shared_owners = (unint64_t *)&v37->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = *(std::__shared_weak_count **)(a1 + 48);
  v30 = *(_QWORD *)(a1 + 40);
  v31 = v5;
  if (v5)
  {
    v6 = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = *(id *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 56);
  v27 = v8;
  v32 = v9;
  (*(void (**)(uint64_t, _QWORD *, const char *))(*(_QWORD *)v2 + 360))(v2, v26, "getRecordSettingsForStream_block_invoke");

  v10 = v31;
  if (v31)
  {
    v11 = (unint64_t *)&v31->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = v29;
  if (v29)
  {
    v14 = (unint64_t *)&v29->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
LABEL_26:
  v23 = v37;
  if (v37)
  {
    v24 = (unint64_t *)&v37->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
}

void sub_19B7F962C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  uint64_t v23;

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v23 - 80);
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl26getRecordSettingsForStreamEP17AVVoiceControllermU13block_pointerFvmP12NSDictionaryP7NSErrorE_block_invoke_370(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  id v3;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2F90], -11793, 0);
  v3 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v1 + 16))(v1, v2, 0);

}

void sub_19B7F96D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl26getRecordSettingsForStreamEP17AVVoiceControllermU13block_pointerFvmP12NSDictionaryP7NSErrorE_block_invoke_2(_QWORD *a1)
{
  id v2;
  uint64_t v3;
  void *v4;
  _BOOL4 v5;
  id v6;
  uint64_t v7;
  id v8;
  _QWORD v9[4];
  id v10;
  id v11;
  uint64_t v12;

  v2 = *(id *)(a1[5] + 64);
  v3 = a1[7];
  v4 = (void *)a1[4];
  v5 = v4 != 0;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = ___ZN14ControllerImpl26getRecordSettingsForStreamEP17AVVoiceControllermU13block_pointerFvmP12NSDictionaryP7NSErrorE_block_invoke_3;
  v9[3] = &unk_1E3BEC248;
  v6 = v4;
  v7 = a1[9];
  v11 = v6;
  v12 = v7;
  v10 = v2;
  v8 = v2;
  ControllerImpl::safeNotifyAlwaysAsync(v3, v5, v9);

}

void sub_19B7F97A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

uint64_t ___ZN14ControllerImpl26getRecordSettingsForStreamEP17AVVoiceControllermU13block_pointerFvmP12NSDictionaryP7NSErrorE_block_invoke_3(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(a1[5] + 16))(a1[5], a1[6], a1[4], 0);
}

id ControllerImpl::getRecordSettingsForStream(ControllerImpl *this, AVVoiceController *a2, uint64_t a3)
{
  AVVoiceController *v5;
  AVVoiceController *v6;
  id v7;
  _QWORD v9[4];
  AVVoiceController *v10;
  uint64_t *v11;
  ControllerImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t);
  void (*v18)(uint64_t);
  id v19;

  v5 = a2;
  v14 = 0;
  v15 = &v14;
  v16 = 0x3032000000;
  v17 = __Block_byref_object_copy__4869;
  v18 = __Block_byref_object_dispose__4870;
  v19 = 0;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = ___ZN14ControllerImpl26getRecordSettingsForStreamEP17AVVoiceControllerm_block_invoke;
  v9[3] = &unk_1E3BEC310;
  v12 = this;
  v13 = a3;
  v10 = v5;
  v11 = &v14;
  v6 = v5;
  makeSynchronous(v9);
  v7 = (id)v15[5];

  _Block_object_dispose(&v14, 8);
  return v7;
}

void sub_19B7F98A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  void *v22;

  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl26getRecordSettingsForStreamEP17AVVoiceControllerm_block_invoke(_QWORD *a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _QWORD *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD v20[4];
  id v21;
  uint64_t v22;
  _QWORD v23[4];
  id v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;

  v3 = a2;
  v5 = a1[6];
  v4 = a1[7];
  v6 = MEMORY[0x1E0C809B0];
  v20[0] = MEMORY[0x1E0C809B0];
  v20[1] = 3221225472;
  v20[2] = ___ZN14ControllerImpl26getRecordSettingsForStreamEP17AVVoiceControllerm_block_invoke_2;
  v20[3] = &unk_1E3BEC4F0;
  v7 = a1[5];
  v21 = v3;
  v22 = v7;
  v8 = v3;
  v9 = v20;
  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v28, *(_QWORD *)(v5 + 8), *(std::__shared_weak_count **)(v5 + 16));
  v23[0] = v6;
  v23[1] = 3321888768;
  v23[2] = ___ZN14ControllerImpl26getRecordSettingsForStreamEP17AVVoiceControllermU13block_pointerFvmP12NSDictionaryP7NSErrorE_block_invoke;
  v23[3] = &unk_1E3BEA488;
  v10 = v28;
  v25 = v28;
  v26 = v29;
  if (v29)
  {
    p_shared_owners = (unint64_t *)&v29->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v27 = v4;
  v13 = v9;
  v24 = v13;
  ControllerImpl::safeWork(v10, v23, (uint64_t)"getRecordSettingsForStream");

  v14 = v26;
  if (v26)
  {
    v15 = (unint64_t *)&v26->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = v29;
  if (v29)
  {
    v18 = (unint64_t *)&v29->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }

}

void sub_19B7F9A5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v21);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v22 - 64);

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl26getRecordSettingsForStreamEP17AVVoiceControllerm_block_invoke_2(uint64_t a1, uint64_t a2, void *a3)
{
  NSObject *v5;
  id v6;

  v6 = a3;
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a3);
  v5 = *(NSObject **)(a1 + 32);
  if (v5)
    dispatch_semaphore_signal(v5);

}

void ___ZN14ControllerImpl26isMeteringEnabledForStreamEmU13block_pointerFvmbP7NSErrorE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  id v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  NSObject *v16;
  id v17;
  void *v18;
  uint64_t v19;
  _BOOL4 v20;
  id v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  _QWORD v26[4];
  id v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  uint64_t v32;
  _QWORD v33[4];
  id v34;
  uint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  uint8_t buf[4];
  const char *v39;
  __int16 v40;
  int v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  ControllerImpl::_lookupEngineForStreamID((ControllerImpl *)&v36, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 576), *(std::__shared_weak_count **)(*(_QWORD *)(a1 + 40) + 584), *(_QWORD *)(a1 + 56));
  v2 = v36;
  if (!v36)
  {
    if (kAVVCScope)
    {
      v16 = *(id *)kAVVCScope;
      if (!v16)
      {
LABEL_25:
        v18 = *(void **)(a1 + 32);
        v19 = *(_QWORD *)(a1 + 40);
        v20 = v18 != 0;
        v33[0] = MEMORY[0x1E0C809B0];
        v33[1] = 3221225472;
        v33[2] = ___ZN14ControllerImpl26isMeteringEnabledForStreamEmU13block_pointerFvmbP7NSErrorE_block_invoke_374;
        v33[3] = &unk_1E3BECB48;
        v21 = v18;
        v22 = *(_QWORD *)(a1 + 56);
        v34 = v21;
        v35 = v22;
        ControllerImpl::safeNotifyAlwaysAsync(v19, v20, v33);

        goto LABEL_26;
      }
    }
    else
    {
      v16 = MEMORY[0x1E0C81028];
      v17 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v39 = "ControllerImpl.mm";
      v40 = 1024;
      v41 = 6036;
      _os_log_impl(&dword_19B733000, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d isMeteringEnabledForStream: Nil recording engine", buf, 0x12u);
    }

    goto LABEL_25;
  }
  v26[0] = MEMORY[0x1E0C809B0];
  v26[1] = 3321888768;
  v26[2] = ___ZN14ControllerImpl26isMeteringEnabledForStreamEmU13block_pointerFvmbP7NSErrorE_block_invoke_2;
  v26[3] = &unk_1E3BEAB80;
  v28 = v36;
  v29 = v37;
  if (v37)
  {
    p_shared_owners = (unint64_t *)&v37->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = *(std::__shared_weak_count **)(a1 + 48);
  v30 = *(_QWORD *)(a1 + 40);
  v31 = v5;
  if (v5)
  {
    v6 = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = *(id *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 56);
  v27 = v8;
  v32 = v9;
  (*(void (**)(uint64_t, _QWORD *, const char *))(*(_QWORD *)v2 + 360))(v2, v26, "isMeteringEnabledForStream_block_invoke");

  v10 = v31;
  if (v31)
  {
    v11 = (unint64_t *)&v31->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = v29;
  if (v29)
  {
    v14 = (unint64_t *)&v29->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
LABEL_26:
  v23 = v37;
  if (v37)
  {
    v24 = (unint64_t *)&v37->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
}

void sub_19B7F9DAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  uint64_t v23;

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v23 - 80);
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl26isMeteringEnabledForStreamEmU13block_pointerFvmbP7NSErrorE_block_invoke_374(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  id v3;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2F90], -11793, 0);
  v3 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v1 + 16))(v1, v2, 0);

}

void sub_19B7F9E58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl26isMeteringEnabledForStreamEmU13block_pointerFvmbP7NSErrorE_block_invoke_2(_QWORD *a1)
{
  void *v2;
  char v3;
  uint64_t v4;
  _BOOL4 v5;
  id v6;
  uint64_t v7;
  _QWORD v8[4];
  id v9;
  uint64_t v10;
  char v11;

  v2 = (void *)a1[4];
  v3 = *(_BYTE *)(a1[5] + 296);
  v4 = a1[7];
  v5 = v2 != 0;
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = ___ZN14ControllerImpl26isMeteringEnabledForStreamEmU13block_pointerFvmbP7NSErrorE_block_invoke_3;
  v8[3] = &unk_1E3BEC518;
  v6 = v2;
  v7 = a1[9];
  v9 = v6;
  v10 = v7;
  v11 = v3;
  ControllerImpl::safeNotifyAlwaysAsync(v4, v5, v8);

}

void sub_19B7F9F00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{

  _Unwind_Resume(a1);
}

uint64_t ___ZN14ControllerImpl26isMeteringEnabledForStreamEmU13block_pointerFvmbP7NSErrorE_block_invoke_3(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 48), 0);
}

uint64_t ControllerImpl::isMeteringEnabledForStream(ControllerImpl *this, uint64_t a2)
{
  uint64_t v2;
  _QWORD v4[7];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  char v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v8 = 0;
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = ___ZN14ControllerImpl26isMeteringEnabledForStreamEm_block_invoke;
  v4[3] = &unk_1E3BEC360;
  v4[5] = this;
  v4[6] = a2;
  v4[4] = &v5;
  makeSynchronous(v4);
  v2 = *((unsigned __int8 *)v6 + 24);
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_19B7F9FB8(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl26isMeteringEnabledForStreamEm_block_invoke(_QWORD *a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _QWORD *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD v20[4];
  id v21;
  uint64_t v22;
  _QWORD v23[4];
  id v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;

  v3 = a2;
  v5 = a1[5];
  v4 = a1[6];
  v6 = MEMORY[0x1E0C809B0];
  v20[0] = MEMORY[0x1E0C809B0];
  v20[1] = 3221225472;
  v20[2] = ___ZN14ControllerImpl26isMeteringEnabledForStreamEm_block_invoke_2;
  v20[3] = &unk_1E3BEC1F8;
  v7 = a1[4];
  v21 = v3;
  v22 = v7;
  v8 = v3;
  v9 = v20;
  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v28, *(_QWORD *)(v5 + 8), *(std::__shared_weak_count **)(v5 + 16));
  v23[0] = v6;
  v23[1] = 3321888768;
  v23[2] = ___ZN14ControllerImpl26isMeteringEnabledForStreamEmU13block_pointerFvmbP7NSErrorE_block_invoke;
  v23[3] = &unk_1E3BEA488;
  v10 = v28;
  v25 = v28;
  v26 = v29;
  if (v29)
  {
    p_shared_owners = (unint64_t *)&v29->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v27 = v4;
  v13 = v9;
  v24 = v13;
  ControllerImpl::safeWork(v10, v23, (uint64_t)"isMeteringEnabledForStream");

  v14 = v26;
  if (v26)
  {
    v15 = (unint64_t *)&v26->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = v29;
  if (v29)
  {
    v18 = (unint64_t *)&v29->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }

}

void sub_19B7FA158(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v21);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v22 - 64);

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl25updateMeterLevelForStreamEmU13block_pointerFvmbP7NSErrorE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  id v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  NSObject *v16;
  id v17;
  void *v18;
  uint64_t v19;
  _BOOL4 v20;
  id v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  _QWORD v26[4];
  id v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  uint64_t v32;
  _QWORD v33[4];
  id v34;
  uint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  uint8_t buf[4];
  const char *v39;
  __int16 v40;
  int v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  ControllerImpl::_lookupEngineForStreamID((ControllerImpl *)&v36, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 576), *(std::__shared_weak_count **)(*(_QWORD *)(a1 + 40) + 584), *(_QWORD *)(a1 + 56));
  v2 = v36;
  if (!v36)
  {
    if (kAVVCScope)
    {
      v16 = *(id *)kAVVCScope;
      if (!v16)
      {
LABEL_25:
        v18 = *(void **)(a1 + 32);
        v19 = *(_QWORD *)(a1 + 40);
        v20 = v18 != 0;
        v33[0] = MEMORY[0x1E0C809B0];
        v33[1] = 3221225472;
        v33[2] = ___ZN14ControllerImpl25updateMeterLevelForStreamEmU13block_pointerFvmbP7NSErrorE_block_invoke_377;
        v33[3] = &unk_1E3BECB48;
        v21 = v18;
        v22 = *(_QWORD *)(a1 + 56);
        v34 = v21;
        v35 = v22;
        ControllerImpl::safeNotifyAlwaysAsync(v19, v20, v33);

        goto LABEL_26;
      }
    }
    else
    {
      v16 = MEMORY[0x1E0C81028];
      v17 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v39 = "ControllerImpl.mm";
      v40 = 1024;
      v41 = 6072;
      _os_log_impl(&dword_19B733000, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d updateMeterLevelForStream: Nil recording engine", buf, 0x12u);
    }

    goto LABEL_25;
  }
  v26[0] = MEMORY[0x1E0C809B0];
  v26[1] = 3321888768;
  v26[2] = ___ZN14ControllerImpl25updateMeterLevelForStreamEmU13block_pointerFvmbP7NSErrorE_block_invoke_2;
  v26[3] = &unk_1E3BEAB80;
  v28 = v36;
  v29 = v37;
  if (v37)
  {
    p_shared_owners = (unint64_t *)&v37->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = *(std::__shared_weak_count **)(a1 + 48);
  v30 = *(_QWORD *)(a1 + 40);
  v31 = v5;
  if (v5)
  {
    v6 = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = *(id *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 56);
  v27 = v8;
  v32 = v9;
  (*(void (**)(uint64_t, _QWORD *, const char *))(*(_QWORD *)v2 + 360))(v2, v26, "updateMeterLevelForStream_block_invoke");

  v10 = v31;
  if (v31)
  {
    v11 = (unint64_t *)&v31->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = v29;
  if (v29)
  {
    v14 = (unint64_t *)&v29->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
LABEL_26:
  v23 = v37;
  if (v37)
  {
    v24 = (unint64_t *)&v37->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
}

void sub_19B7FA470(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  uint64_t v23;

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v23 - 80);
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl25updateMeterLevelForStreamEmU13block_pointerFvmbP7NSErrorE_block_invoke_377(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  id v3;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2F90], -11793, 0);
  v3 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v1 + 16))(v1, v2, 0);

}

void sub_19B7FA51C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl25updateMeterLevelForStreamEmU13block_pointerFvmbP7NSErrorE_block_invoke_2(uint64_t a1)
{
  int v2;
  NSObject *v3;
  id v4;
  uint64_t v5;
  void *v6;
  _BOOL4 v7;
  id v8;
  uint64_t v9;
  _QWORD v10[4];
  id v11;
  uint64_t v12;
  int v13;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  int v17;
  __int16 v18;
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 160))(*(_QWORD *)(a1 + 40));
  if (v2)
  {
    if (kAVVCScope)
    {
      v3 = *(id *)kAVVCScope;
      if (!v3)
        goto LABEL_9;
    }
    else
    {
      v3 = MEMORY[0x1E0C81028];
      v4 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v15 = "ControllerImpl.mm";
      v16 = 1024;
      v17 = 6082;
      v18 = 1024;
      v19 = v2;
      _os_log_impl(&dword_19B733000, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d updateMeterLevelForStream: Error updating meter levels: %d", buf, 0x18u);
    }

  }
LABEL_9:
  v5 = *(_QWORD *)(a1 + 56);
  v6 = *(void **)(a1 + 32);
  v7 = v6 != 0;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = ___ZN14ControllerImpl25updateMeterLevelForStreamEmU13block_pointerFvmbP7NSErrorE_block_invoke_378;
  v10[3] = &unk_1E3BEC540;
  v8 = v6;
  v9 = *(_QWORD *)(a1 + 72);
  v11 = v8;
  v12 = v9;
  v13 = v2;
  ControllerImpl::safeNotifyAlwaysAsync(v5, v7, v10);

}

void sub_19B7FA698(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl25updateMeterLevelForStreamEmU13block_pointerFvmbP7NSErrorE_block_invoke_378(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _BOOL8 v3;
  id v4;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_DWORD *)(a1 + 48) == 0;
  objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2F90]);
  v4 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, uint64_t, _BOOL8))(v1 + 16))(v1, v2, v3);

}

void sub_19B7FA72C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t ControllerImpl::updateMeterLevelForStream(ControllerImpl *this, uint64_t a2)
{
  uint64_t v2;
  _QWORD v4[7];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  char v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v8 = 0;
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = ___ZN14ControllerImpl25updateMeterLevelForStreamEm_block_invoke;
  v4[3] = &unk_1E3BEC360;
  v4[5] = this;
  v4[6] = a2;
  v4[4] = &v5;
  makeSynchronous(v4);
  v2 = *((unsigned __int8 *)v6 + 24);
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_19B7FA7CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl25updateMeterLevelForStreamEm_block_invoke(_QWORD *a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _QWORD *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD v20[4];
  id v21;
  uint64_t v22;
  _QWORD v23[4];
  id v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;

  v3 = a2;
  v5 = a1[5];
  v4 = a1[6];
  v6 = MEMORY[0x1E0C809B0];
  v20[0] = MEMORY[0x1E0C809B0];
  v20[1] = 3221225472;
  v20[2] = ___ZN14ControllerImpl25updateMeterLevelForStreamEm_block_invoke_2;
  v20[3] = &unk_1E3BEC1F8;
  v7 = a1[4];
  v21 = v3;
  v22 = v7;
  v8 = v3;
  v9 = v20;
  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v28, *(_QWORD *)(v5 + 8), *(std::__shared_weak_count **)(v5 + 16));
  v23[0] = v6;
  v23[1] = 3321888768;
  v23[2] = ___ZN14ControllerImpl25updateMeterLevelForStreamEmU13block_pointerFvmbP7NSErrorE_block_invoke;
  v23[3] = &unk_1E3BEA488;
  v10 = v28;
  v25 = v28;
  v26 = v29;
  if (v29)
  {
    p_shared_owners = (unint64_t *)&v29->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v27 = v4;
  v13 = v9;
  v24 = v13;
  ControllerImpl::safeWork(v10, v23, (uint64_t)"updateMeterLevelForStream");

  v14 = v26;
  if (v26)
  {
    v15 = (unint64_t *)&v26->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = v29;
  if (v29)
  {
    v18 = (unint64_t *)&v29->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }

}

void sub_19B7FA96C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v21);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v22 - 64);

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl31getPeakPowerForStreamAndChannelEmiU13block_pointerFvmfP7NSErrorE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  id v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  NSObject *v16;
  id v17;
  void *v18;
  uint64_t v19;
  _BOOL4 v20;
  id v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  _QWORD v26[4];
  id v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  uint64_t v32;
  int v33;
  _QWORD v34[4];
  id v35;
  uint64_t v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  uint8_t buf[4];
  const char *v40;
  __int16 v41;
  int v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  ControllerImpl::_lookupEngineForStreamID((ControllerImpl *)&v37, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 576), *(std::__shared_weak_count **)(*(_QWORD *)(a1 + 40) + 584), *(_QWORD *)(a1 + 56));
  v2 = v37;
  if (!v37)
  {
    if (kAVVCScope)
    {
      v16 = *(id *)kAVVCScope;
      if (!v16)
      {
LABEL_25:
        v18 = *(void **)(a1 + 32);
        v19 = *(_QWORD *)(a1 + 40);
        v20 = v18 != 0;
        v34[0] = MEMORY[0x1E0C809B0];
        v34[1] = 3221225472;
        v34[2] = ___ZN14ControllerImpl31getPeakPowerForStreamAndChannelEmiU13block_pointerFvmfP7NSErrorE_block_invoke_381;
        v34[3] = &unk_1E3BECB48;
        v21 = v18;
        v22 = *(_QWORD *)(a1 + 56);
        v35 = v21;
        v36 = v22;
        ControllerImpl::safeNotifyAlwaysAsync(v19, v20, v34);

        goto LABEL_26;
      }
    }
    else
    {
      v16 = MEMORY[0x1E0C81028];
      v17 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v40 = "ControllerImpl.mm";
      v41 = 1024;
      v42 = 6112;
      _os_log_impl(&dword_19B733000, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d getRecordSettingsForStream: Nil recording engine", buf, 0x12u);
    }

    goto LABEL_25;
  }
  v26[0] = MEMORY[0x1E0C809B0];
  v26[1] = 3321888768;
  v26[2] = ___ZN14ControllerImpl31getPeakPowerForStreamAndChannelEmiU13block_pointerFvmfP7NSErrorE_block_invoke_2;
  v26[3] = &unk_1E3BEAE20;
  v28 = v37;
  v29 = v38;
  if (v38)
  {
    p_shared_owners = (unint64_t *)&v38->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v33 = *(_DWORD *)(a1 + 64);
  v5 = *(std::__shared_weak_count **)(a1 + 48);
  v30 = *(_QWORD *)(a1 + 40);
  v31 = v5;
  if (v5)
  {
    v6 = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = *(id *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 56);
  v27 = v8;
  v32 = v9;
  (*(void (**)(uint64_t, _QWORD *, const char *))(*(_QWORD *)v2 + 360))(v2, v26, "getPeakPowerForStreamAndChannel_block_invoke");

  v10 = v31;
  if (v31)
  {
    v11 = (unint64_t *)&v31->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = v29;
  if (v29)
  {
    v14 = (unint64_t *)&v29->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
LABEL_26:
  v23 = v38;
  if (v38)
  {
    v24 = (unint64_t *)&v38->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
}

void sub_19B7FAC8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25)
{
  uint64_t v25;

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v25 - 80);
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl31getPeakPowerForStreamAndChannelEmiU13block_pointerFvmfP7NSErrorE_block_invoke_381(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  id v3;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2F90], -11793, 0);
  v3 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, uint64_t, float))(v1 + 16))(v1, v2, -160.0);

}

void sub_19B7FAD3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl31getPeakPowerForStreamAndChannelEmiU13block_pointerFvmfP7NSErrorE_block_invoke_2(uint64_t a1)
{
  uint64_t v2;
  unsigned int v3;
  float v4;
  NSObject *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  _BOOL4 v10;
  id v11;
  uint64_t v12;
  _QWORD v13[4];
  id v14;
  uint64_t v15;
  float v16;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  double v24;
  __int16 v25;
  unsigned int v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_DWORD *)(a1 + 80);
  if (*(_DWORD *)(v2 + 52) <= v3)
    v4 = -160.0;
  else
    v4 = *(float *)(*(_QWORD *)(v2 + 304) + 8 * (int)v3 + 4);
  if (kAVVCScope)
  {
    v5 = *(id *)kAVVCScope;
    if (!v5)
      goto LABEL_11;
  }
  else
  {
    v5 = MEMORY[0x1E0C81028];
    v6 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    v7 = *(_QWORD *)(v2 + 272);
    *(_DWORD *)buf = 136316162;
    v18 = "AVVCRecordingEngine.mm";
    v19 = 1024;
    v20 = 532;
    v21 = 2048;
    v22 = v7;
    v23 = 2048;
    v24 = v4;
    v25 = 1024;
    v26 = v3;
    _os_log_impl(&dword_19B733000, v5, OS_LOG_TYPE_DEBUG, "%25s:%-5d getPeakPowerForChannel on stream(%llu): returning %f for channel %d", buf, 0x2Cu);
  }

LABEL_11:
  v8 = *(_QWORD *)(a1 + 56);
  v9 = *(void **)(a1 + 32);
  v10 = v9 != 0;
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 3221225472;
  v13[2] = ___ZN14ControllerImpl31getPeakPowerForStreamAndChannelEmiU13block_pointerFvmfP7NSErrorE_block_invoke_3;
  v13[3] = &unk_1E3BEC540;
  v11 = v9;
  v12 = *(_QWORD *)(a1 + 72);
  v14 = v11;
  v15 = v12;
  v16 = v4;
  ControllerImpl::safeNotifyAlwaysAsync(v8, v10, v13);

}

void sub_19B7FAEF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{

  _Unwind_Resume(a1);
}

uint64_t ___ZN14ControllerImpl31getPeakPowerForStreamAndChannelEmiU13block_pointerFvmfP7NSErrorE_block_invoke_3(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, float))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), 0, *(float *)(a1 + 48));
}

float ControllerImpl::getPeakPowerForStreamAndChannel(ControllerImpl *this, uint64_t a2, int a3)
{
  float v3;
  _QWORD v5[7];
  int v6;
  uint64_t v7;
  float *v8;
  uint64_t v9;
  int v10;

  v7 = 0;
  v8 = (float *)&v7;
  v9 = 0x2020000000;
  v10 = -1021313024;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = ___ZN14ControllerImpl31getPeakPowerForStreamAndChannelEmi_block_invoke;
  v5[3] = &unk_1E3BEC590;
  v5[5] = this;
  v5[6] = a2;
  v6 = a3;
  v5[4] = &v7;
  makeSynchronous(v5);
  v3 = v8[6];
  _Block_object_dispose(&v7, 8);
  return v3;
}

void sub_19B7FAFC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl31getPeakPowerForStreamAndChannelEmi_block_invoke(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  _QWORD *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD v21[4];
  id v22;
  uint64_t v23;
  _QWORD v24[4];
  id v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  std::__shared_weak_count *v31;

  v3 = a2;
  v5 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 48);
  v6 = *(_DWORD *)(a1 + 56);
  v7 = MEMORY[0x1E0C809B0];
  v21[0] = MEMORY[0x1E0C809B0];
  v21[1] = 3221225472;
  v21[2] = ___ZN14ControllerImpl31getPeakPowerForStreamAndChannelEmi_block_invoke_2;
  v21[3] = &unk_1E3BEC568;
  v8 = *(_QWORD *)(a1 + 32);
  v22 = v3;
  v23 = v8;
  v9 = v3;
  v10 = v21;
  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v30, *(_QWORD *)(v5 + 8), *(std::__shared_weak_count **)(v5 + 16));
  v24[0] = v7;
  v24[1] = 3321888768;
  v24[2] = ___ZN14ControllerImpl31getPeakPowerForStreamAndChannelEmiU13block_pointerFvmfP7NSErrorE_block_invoke;
  v24[3] = &unk_1E3BEA720;
  v11 = v30;
  v26 = v30;
  v27 = v31;
  if (v31)
  {
    p_shared_owners = (unint64_t *)&v31->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  v28 = v4;
  v14 = v10;
  v25 = v14;
  v29 = v6;
  ControllerImpl::safeWork(v11, v24, (uint64_t)"getPeakPowerForStreamAndChannel");

  v15 = v27;
  if (v27)
  {
    v16 = (unint64_t *)&v27->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = v31;
  if (v31)
  {
    v19 = (unint64_t *)&v31->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }

}

void sub_19B7FB16C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v22);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v23 - 64);

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl34getAveragePowerForStreamAndChannelEmiU13block_pointerFvmfP7NSErrorE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  id v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  NSObject *v16;
  id v17;
  void *v18;
  uint64_t v19;
  _BOOL4 v20;
  id v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  _QWORD v26[4];
  id v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  uint64_t v32;
  int v33;
  _QWORD v34[4];
  id v35;
  uint64_t v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  uint8_t buf[4];
  const char *v40;
  __int16 v41;
  int v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  ControllerImpl::_lookupEngineForStreamID((ControllerImpl *)&v37, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 576), *(std::__shared_weak_count **)(*(_QWORD *)(a1 + 40) + 584), *(_QWORD *)(a1 + 56));
  v2 = v37;
  if (!v37)
  {
    if (kAVVCScope)
    {
      v16 = *(id *)kAVVCScope;
      if (!v16)
      {
LABEL_25:
        v18 = *(void **)(a1 + 32);
        v19 = *(_QWORD *)(a1 + 40);
        v20 = v18 != 0;
        v34[0] = MEMORY[0x1E0C809B0];
        v34[1] = 3221225472;
        v34[2] = ___ZN14ControllerImpl34getAveragePowerForStreamAndChannelEmiU13block_pointerFvmfP7NSErrorE_block_invoke_385;
        v34[3] = &unk_1E3BECB48;
        v21 = v18;
        v22 = *(_QWORD *)(a1 + 56);
        v35 = v21;
        v36 = v22;
        ControllerImpl::safeNotifyAlwaysAsync(v19, v20, v34);

        goto LABEL_26;
      }
    }
    else
    {
      v16 = MEMORY[0x1E0C81028];
      v17 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v40 = "ControllerImpl.mm";
      v41 = 1024;
      v42 = 6148;
      _os_log_impl(&dword_19B733000, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d getAveragePowerForStreamAndChannel: Nil recording engine", buf, 0x12u);
    }

    goto LABEL_25;
  }
  v26[0] = MEMORY[0x1E0C809B0];
  v26[1] = 3321888768;
  v26[2] = ___ZN14ControllerImpl34getAveragePowerForStreamAndChannelEmiU13block_pointerFvmfP7NSErrorE_block_invoke_2;
  v26[3] = &unk_1E3BEAE20;
  v28 = v37;
  v29 = v38;
  if (v38)
  {
    p_shared_owners = (unint64_t *)&v38->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v33 = *(_DWORD *)(a1 + 64);
  v5 = *(std::__shared_weak_count **)(a1 + 48);
  v30 = *(_QWORD *)(a1 + 40);
  v31 = v5;
  if (v5)
  {
    v6 = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = *(id *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 56);
  v27 = v8;
  v32 = v9;
  (*(void (**)(uint64_t, _QWORD *, const char *))(*(_QWORD *)v2 + 360))(v2, v26, "getAveragePowerForStreamAndChannel_block_invoke");

  v10 = v31;
  if (v31)
  {
    v11 = (unint64_t *)&v31->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = v29;
  if (v29)
  {
    v14 = (unint64_t *)&v29->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
LABEL_26:
  v23 = v38;
  if (v38)
  {
    v24 = (unint64_t *)&v38->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
}

void sub_19B7FB48C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25)
{
  uint64_t v25;

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v25 - 80);
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl34getAveragePowerForStreamAndChannelEmiU13block_pointerFvmfP7NSErrorE_block_invoke_385(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  id v3;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2F90], -11793, 0);
  v3 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, uint64_t, float))(v1 + 16))(v1, v2, -160.0);

}

void sub_19B7FB53C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl34getAveragePowerForStreamAndChannelEmiU13block_pointerFvmfP7NSErrorE_block_invoke_2(uint64_t a1)
{
  uint64_t v2;
  unsigned int v3;
  float v4;
  NSObject *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  _BOOL4 v10;
  id v11;
  uint64_t v12;
  _QWORD v13[4];
  id v14;
  uint64_t v15;
  float v16;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  double v24;
  __int16 v25;
  unsigned int v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_DWORD *)(a1 + 80);
  if (*(_DWORD *)(v2 + 52) <= v3)
    v4 = -160.0;
  else
    v4 = *(float *)(*(_QWORD *)(v2 + 304) + 8 * (int)v3);
  if (kAVVCScope)
  {
    v5 = *(id *)kAVVCScope;
    if (!v5)
      goto LABEL_11;
  }
  else
  {
    v5 = MEMORY[0x1E0C81028];
    v6 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    v7 = *(_QWORD *)(v2 + 272);
    *(_DWORD *)buf = 136316162;
    v18 = "AVVCRecordingEngine.mm";
    v19 = 1024;
    v20 = 543;
    v21 = 2048;
    v22 = v7;
    v23 = 2048;
    v24 = v4;
    v25 = 1024;
    v26 = v3;
    _os_log_impl(&dword_19B733000, v5, OS_LOG_TYPE_DEBUG, "%25s:%-5d getAveragePowerForChannel on stream(%llu): returning %f for channel %d", buf, 0x2Cu);
  }

LABEL_11:
  v8 = *(_QWORD *)(a1 + 56);
  v9 = *(void **)(a1 + 32);
  v10 = v9 != 0;
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 3221225472;
  v13[2] = ___ZN14ControllerImpl34getAveragePowerForStreamAndChannelEmiU13block_pointerFvmfP7NSErrorE_block_invoke_3;
  v13[3] = &unk_1E3BEC540;
  v11 = v9;
  v12 = *(_QWORD *)(a1 + 72);
  v14 = v11;
  v15 = v12;
  v16 = v4;
  ControllerImpl::safeNotifyAlwaysAsync(v8, v10, v13);

}

void sub_19B7FB6F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{

  _Unwind_Resume(a1);
}

uint64_t ___ZN14ControllerImpl34getAveragePowerForStreamAndChannelEmiU13block_pointerFvmfP7NSErrorE_block_invoke_3(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, float))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), 0, *(float *)(a1 + 48));
}

float ControllerImpl::getAveragePowerForStreamAndChannel(ControllerImpl *this, uint64_t a2, int a3)
{
  float v3;
  _QWORD v5[7];
  int v6;
  uint64_t v7;
  float *v8;
  uint64_t v9;
  int v10;

  v7 = 0;
  v8 = (float *)&v7;
  v9 = 0x2020000000;
  v10 = -1021313024;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = ___ZN14ControllerImpl34getAveragePowerForStreamAndChannelEmi_block_invoke;
  v5[3] = &unk_1E3BEC590;
  v5[5] = this;
  v5[6] = a2;
  v6 = a3;
  v5[4] = &v7;
  makeSynchronous(v5);
  v3 = v8[6];
  _Block_object_dispose(&v7, 8);
  return v3;
}

void sub_19B7FB7C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl34getAveragePowerForStreamAndChannelEmi_block_invoke(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  _QWORD *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD v21[4];
  id v22;
  uint64_t v23;
  _QWORD v24[4];
  id v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  std::__shared_weak_count *v31;

  v3 = a2;
  v5 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 48);
  v6 = *(_DWORD *)(a1 + 56);
  v7 = MEMORY[0x1E0C809B0];
  v21[0] = MEMORY[0x1E0C809B0];
  v21[1] = 3221225472;
  v21[2] = ___ZN14ControllerImpl34getAveragePowerForStreamAndChannelEmi_block_invoke_2;
  v21[3] = &unk_1E3BEC568;
  v8 = *(_QWORD *)(a1 + 32);
  v22 = v3;
  v23 = v8;
  v9 = v3;
  v10 = v21;
  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v30, *(_QWORD *)(v5 + 8), *(std::__shared_weak_count **)(v5 + 16));
  v24[0] = v7;
  v24[1] = 3321888768;
  v24[2] = ___ZN14ControllerImpl34getAveragePowerForStreamAndChannelEmiU13block_pointerFvmfP7NSErrorE_block_invoke;
  v24[3] = &unk_1E3BEA720;
  v11 = v30;
  v26 = v30;
  v27 = v31;
  if (v31)
  {
    p_shared_owners = (unint64_t *)&v31->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  v28 = v4;
  v14 = v10;
  v25 = v14;
  v29 = v6;
  ControllerImpl::safeWork(v11, v24, (uint64_t)"getAveragePowerForStreamAndChannel");

  v15 = v27;
  if (v27)
  {
    v16 = (unint64_t *)&v27->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = v31;
  if (v31)
  {
    v19 = (unint64_t *)&v31->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }

}

void sub_19B7FB96C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v22);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v23 - 64);

  _Unwind_Resume(a1);
}

void ControllerImpl::setRecordStatusChangeBlock(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  id v5;

  v5 = a2;
  v3 = objc_msgSend(v5, "copy");
  v4 = *(void **)(a1 + 600);
  *(_QWORD *)(a1 + 600) = v3;

}

void sub_19B7FBA04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl31enableSmartRoutingConsiderationEmbU13block_pointerFvmbP7NSErrorE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  id v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  NSObject *v16;
  id v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  _BOOL4 v21;
  id v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  _QWORD v27[4];
  id v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  char v34;
  _QWORD v35[4];
  id v36;
  uint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  uint8_t buf[4];
  const char *v41;
  __int16 v42;
  int v43;
  __int16 v44;
  uint64_t v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  ControllerImpl::_lookupEngineForStreamID((ControllerImpl *)&v38, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 576), *(std::__shared_weak_count **)(*(_QWORD *)(a1 + 40) + 584), *(_QWORD *)(a1 + 56));
  v2 = v38;
  if (!v38)
  {
    if (kAVVCScope)
    {
      v16 = *(id *)kAVVCScope;
      if (!v16)
      {
LABEL_25:
        v19 = *(void **)(a1 + 32);
        v20 = *(_QWORD *)(a1 + 40);
        v21 = v19 != 0;
        v35[0] = MEMORY[0x1E0C809B0];
        v35[1] = 3221225472;
        v35[2] = ___ZN14ControllerImpl31enableSmartRoutingConsiderationEmbU13block_pointerFvmbP7NSErrorE_block_invoke_389;
        v35[3] = &unk_1E3BECB48;
        v22 = v19;
        v23 = *(_QWORD *)(a1 + 56);
        v36 = v22;
        v37 = v23;
        ControllerImpl::safeNotifyAlwaysAsync(v20, v21, v35);

        goto LABEL_26;
      }
    }
    else
    {
      v16 = MEMORY[0x1E0C81028];
      v17 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      v18 = *(_QWORD *)(a1 + 56);
      *(_DWORD *)buf = 136315650;
      v41 = "ControllerImpl.mm";
      v42 = 1024;
      v43 = 6196;
      v44 = 2048;
      v45 = v18;
      _os_log_impl(&dword_19B733000, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d enableSmartRoutingConsideration: Cannot find recording engine for streamID(%lu). Returning.", buf, 0x1Cu);
    }

    goto LABEL_25;
  }
  v27[0] = MEMORY[0x1E0C809B0];
  v27[1] = 3321888768;
  v27[2] = ___ZN14ControllerImpl31enableSmartRoutingConsiderationEmbU13block_pointerFvmbP7NSErrorE_block_invoke_2;
  v27[3] = &unk_1E3BEAD08;
  v29 = v38;
  v30 = v39;
  if (v39)
  {
    p_shared_owners = (unint64_t *)&v39->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v34 = *(_BYTE *)(a1 + 64);
  v5 = *(std::__shared_weak_count **)(a1 + 48);
  v31 = *(_QWORD *)(a1 + 40);
  v32 = v5;
  if (v5)
  {
    v6 = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = *(id *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 56);
  v28 = v8;
  v33 = v9;
  (*(void (**)(uint64_t, _QWORD *, const char *))(*(_QWORD *)v2 + 360))(v2, v27, "enableSmartRoutingConsideration_block_invoke");

  v10 = v32;
  if (v32)
  {
    v11 = (unint64_t *)&v32->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = v30;
  if (v30)
  {
    v14 = (unint64_t *)&v30->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
LABEL_26:
  v24 = v39;
  if (v39)
  {
    v25 = (unint64_t *)&v39->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
}

void sub_19B7FBCF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25)
{
  uint64_t v25;

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v25 - 112);
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl31enableSmartRoutingConsiderationEmbU13block_pointerFvmbP7NSErrorE_block_invoke_389(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  id v3;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2F90], -11793, 0);
  v3 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v1 + 16))(v1, v2, 0);

}

void sub_19B7FBDA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl31enableSmartRoutingConsiderationEmbU13block_pointerFvmbP7NSErrorE_block_invoke_2(uint64_t a1)
{
  void *v2;
  int v3;
  uint64_t v4;
  void *v5;
  _BOOL4 v6;
  id v7;
  uint64_t v8;
  _QWORD v9[4];
  id v10;
  uint64_t v11;
  int v12;

  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 40) + 64))(*(_QWORD *)(a1 + 40), 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "enableSmartRoutingConsideration:", *(unsigned __int8 *)(a1 + 80));
  v4 = *(_QWORD *)(a1 + 56);
  v5 = *(void **)(a1 + 32);
  v6 = v5 != 0;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = ___ZN14ControllerImpl31enableSmartRoutingConsiderationEmbU13block_pointerFvmbP7NSErrorE_block_invoke_3;
  v9[3] = &unk_1E3BEC540;
  v7 = v5;
  v8 = *(_QWORD *)(a1 + 72);
  v10 = v7;
  v11 = v8;
  v12 = v3;
  ControllerImpl::safeNotifyAlwaysAsync(v4, v6, v9);

}

void sub_19B7FBE7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl31enableSmartRoutingConsiderationEmbU13block_pointerFvmbP7NSErrorE_block_invoke_3(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _BOOL8 v3;
  id v4;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_DWORD *)(a1 + 48) == 0;
  objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2F90]);
  v4 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, uint64_t, _BOOL8))(v1 + 16))(v1, v2, v3);

}

void sub_19B7FBF14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t ControllerImpl::enableSmartRoutingConsideration(ControllerImpl *this, uint64_t a2, char a3)
{
  uint64_t v3;
  _QWORD v5[7];
  char v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;

  v7 = 0;
  v8 = &v7;
  v9 = 0x2020000000;
  v10 = 0;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = ___ZN14ControllerImpl31enableSmartRoutingConsiderationEmb_block_invoke;
  v5[3] = &unk_1E3BEC5B8;
  v5[5] = this;
  v5[6] = a2;
  v6 = a3;
  v5[4] = &v7;
  makeSynchronous(v5);
  v3 = *((unsigned int *)v8 + 6);
  _Block_object_dispose(&v7, 8);
  return v3;
}

void sub_19B7FBFB8(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl31enableSmartRoutingConsiderationEmb_block_invoke(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  _QWORD *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD v21[4];
  id v22;
  uint64_t v23;
  _QWORD v24[4];
  id v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  char v32[8];

  v3 = a2;
  v5 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 48);
  v6 = *(_BYTE *)(a1 + 56);
  v7 = MEMORY[0x1E0C809B0];
  v21[0] = MEMORY[0x1E0C809B0];
  v21[1] = 3221225472;
  v21[2] = ___ZN14ControllerImpl31enableSmartRoutingConsiderationEmb_block_invoke_2;
  v21[3] = &unk_1E3BEC1F8;
  v8 = *(_QWORD *)(a1 + 32);
  v22 = v3;
  v23 = v8;
  v9 = v3;
  v10 = v21;
  TraceMethod::TraceMethod((TraceMethod *)v32, "enableSmartRoutingConsideration");
  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v30, *(_QWORD *)(v5 + 8), *(std::__shared_weak_count **)(v5 + 16));
  v24[0] = v7;
  v24[1] = 3321888768;
  v24[2] = ___ZN14ControllerImpl31enableSmartRoutingConsiderationEmbU13block_pointerFvmbP7NSErrorE_block_invoke;
  v24[3] = &unk_1E3BEA6E8;
  v11 = v30;
  v26 = v30;
  v27 = v31;
  if (v31)
  {
    p_shared_owners = (unint64_t *)&v31->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  v28 = v4;
  v14 = v10;
  v25 = v14;
  v29 = v6;
  ControllerImpl::safeWork(v11, v24, (uint64_t)"enableSmartRoutingConsideration");

  v15 = v27;
  if (v27)
  {
    v16 = (unint64_t *)&v27->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = v31;
  if (v31)
  {
    v19 = (unint64_t *)&v31->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  TraceMethod::~TraceMethod((TraceMethod *)v32);

}

void sub_19B7FC178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v21);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v22 - 72);
  TraceMethod::~TraceMethod((TraceMethod *)(v22 - 56));

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl31enableSmartRoutingConsiderationEmb_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  NSObject *v5;
  id v6;

  v6 = a4;
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = objc_msgSend(v6, "code");
  v5 = *(NSObject **)(a1 + 32);
  if (v5)
    dispatch_semaphore_signal(v5);

}

void sub_19B7FC208(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl22setRecordModeForStreamEm27AVVoiceControllerRecordModeU13block_pointerFvmbP7NSErrorE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  NSObject *v14;
  id v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  _BOOL4 v19;
  id v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD v25[4];
  id v26;
  __int128 v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  _QWORD v32[4];
  id v33;
  uint64_t v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  uint8_t buf[4];
  const char *v38;
  __int16 v39;
  int v40;
  __int16 v41;
  uint64_t v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  ControllerImpl::_lookupEngineForStreamID((ControllerImpl *)&v35, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 576), *(std::__shared_weak_count **)(*(_QWORD *)(a1 + 40) + 584), *(_QWORD *)(a1 + 56));
  v2 = v35;
  if (!v35)
  {
    if (kAVVCScope)
    {
      v14 = *(id *)kAVVCScope;
      if (!v14)
      {
LABEL_25:
        v17 = *(void **)(a1 + 32);
        v18 = *(_QWORD *)(a1 + 40);
        v19 = v17 != 0;
        v32[0] = MEMORY[0x1E0C809B0];
        v32[1] = 3221225472;
        v32[2] = ___ZN14ControllerImpl22setRecordModeForStreamEm27AVVoiceControllerRecordModeU13block_pointerFvmbP7NSErrorE_block_invoke_391;
        v32[3] = &unk_1E3BECB48;
        v20 = v17;
        v21 = *(_QWORD *)(a1 + 56);
        v33 = v20;
        v34 = v21;
        ControllerImpl::safeNotifyAlwaysAsync(v18, v19, v32);

        goto LABEL_26;
      }
    }
    else
    {
      v14 = MEMORY[0x1E0C81028];
      v15 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      v16 = *(_QWORD *)(a1 + 56);
      *(_DWORD *)buf = 136315650;
      v38 = "ControllerImpl.mm";
      v39 = 1024;
      v40 = 6235;
      v41 = 2048;
      v42 = v16;
      _os_log_impl(&dword_19B733000, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d setRecordModeForStream: Cannot find recording engine for streamID(%lu). Returning.", buf, 0x1Cu);
    }

    goto LABEL_25;
  }
  v25[0] = MEMORY[0x1E0C809B0];
  v25[1] = 3321888768;
  v25[2] = ___ZN14ControllerImpl22setRecordModeForStreamEm27AVVoiceControllerRecordModeU13block_pointerFvmbP7NSErrorE_block_invoke_2;
  v25[3] = &unk_1E3BE51B8;
  v27 = *(_OWORD *)(a1 + 56);
  v28 = v35;
  v29 = v36;
  if (v36)
  {
    p_shared_owners = (unint64_t *)&v36->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = *(std::__shared_weak_count **)(a1 + 48);
  v30 = *(_QWORD *)(a1 + 40);
  v31 = v5;
  if (v5)
  {
    v6 = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v26 = *(id *)(a1 + 32);
  (*(void (**)(uint64_t, _QWORD *, const char *))(*(_QWORD *)v2 + 360))(v2, v25, "setRecordModeForStream_block_invoke");

  v8 = v31;
  if (v31)
  {
    v9 = (unint64_t *)&v31->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = v29;
  if (v29)
  {
    v12 = (unint64_t *)&v29->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
LABEL_26:
  v22 = v36;
  if (v36)
  {
    v23 = (unint64_t *)&v36->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
}

void sub_19B7FC4F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25)
{
  uint64_t v25;

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v25 - 112);
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl22setRecordModeForStreamEm27AVVoiceControllerRecordModeU13block_pointerFvmbP7NSErrorE_block_invoke_391(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  id v3;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2F90], -11793, 0);
  v3 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v1 + 16))(v1, v2, 0);

}

void sub_19B7FC5A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl22setRecordModeForStreamEm27AVVoiceControllerRecordModeU13block_pointerFvmbP7NSErrorE_block_invoke_2(_QWORD *a1)
{
  uint64_t v2;
  void *v3;
  char v4;
  id v5;
  char v6;
  _QWORD *v7;
  uint64_t v8;
  void *v9;
  int v10;
  void *v11;
  int v12;
  uint64_t v13;
  char v14;
  NSObject *v15;
  NSObject *v16;
  NSObject *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  _BOOL4 v22;
  id v23;
  uint64_t v24;
  id v25;
  _QWORD v26[4];
  id v27;
  id v28;
  uint64_t v29;
  char v30;
  id v31;
  uint8_t buf[4];
  _BYTE v33[14];
  __int16 v34;
  int v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  if (!isHACProduct() || a1[5] != 32769)
  {
    v8 = a1[6];
    v7 = (_QWORD *)a1[7];
    if (v8 == v7[42])
      goto LABEL_14;
    if (v8 != 1)
    {
LABEL_12:
      (*(void (**)(_QWORD *, _QWORD))(*v7 + 64))(v7, 0);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "setClientRequestsRecording:", v8 == 1);

      v12 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)a1[7] + 288))(a1[7]);
      if (v12)
      {
        objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2F90], v12, 0);
        v13 = objc_claimAutoreleasedReturnValue();
LABEL_27:
        v5 = (id)v13;
LABEL_28:
        v14 = 0;
        goto LABEL_29;
      }
LABEL_14:
      v5 = 0;
      goto LABEL_15;
    }
    (*(void (**)(_QWORD *, _QWORD))(*v7 + 64))(v7, 0);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = objc_msgSend(v9, "isSessionActive");

    if (v10)
    {
      v8 = a1[6];
      v7 = (_QWORD *)a1[7];
      goto LABEL_12;
    }
    if (kAVVCScope)
    {
      v17 = *(id *)kAVVCScope;
      if (!v17)
      {
LABEL_26:
        objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2F90], -11780, 0);
        v13 = objc_claimAutoreleasedReturnValue();
        goto LABEL_27;
      }
    }
    else
    {
      v17 = MEMORY[0x1E0C81028];
      v18 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      v19 = a1[5];
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)v33 = "ControllerImpl.mm";
      *(_WORD *)&v33[8] = 1024;
      *(_DWORD *)&v33[10] = 6273;
      v34 = 1024;
      v35 = v19;
      _os_log_impl(&dword_19B733000, v17, OS_LOG_TYPE_DEFAULT, "%25s:%-5d setRecordModeForStream: Switching to Recording mode when session is not active !! streamID(%d)", buf, 0x18u);
    }

    goto LABEL_26;
  }
  v2 = a1[6];
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)a1[7] + 64))(a1[7], 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v31 = 0;
  v4 = objc_msgSend(v3, "setIsUsingBuiltInMicForRecording:error:", v2 == 1, &v31);
  v5 = v31;

  if (v5)
    v6 = v4;
  else
    v6 = 1;
  if ((v6 & 1) == 0)
  {
    v15 = *(NSObject **)kAVVCScope;
    CALog::Scope::oslog(*(id *)kAVVCScope);
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67109378;
      *(_DWORD *)v33 = 0;
      *(_WORD *)&v33[4] = 2112;
      *(_QWORD *)&v33[6] = v5;
      _os_log_fault_impl(&dword_19B733000, v15, OS_LOG_TYPE_FAULT, "setIsUsingBuiltInMicForRecording failed: return (%d), error (%@)", buf, 0x12u);
    }

    goto LABEL_28;
  }
  AVVCRecordingEngine::setRecordMode(a1[7], a1[6]);
LABEL_15:
  v14 = 1;
LABEL_29:
  v20 = a1[9];
  v21 = (void *)a1[4];
  v22 = v21 != 0;
  v26[0] = MEMORY[0x1E0C809B0];
  v26[1] = 3221225472;
  v26[2] = ___ZN14ControllerImpl22setRecordModeForStreamEm27AVVoiceControllerRecordModeU13block_pointerFvmbP7NSErrorE_block_invoke_392;
  v26[3] = &unk_1E3BEC5E0;
  v23 = v21;
  v24 = a1[5];
  v28 = v23;
  v29 = v24;
  v30 = v14;
  v27 = v5;
  v25 = v5;
  ControllerImpl::safeNotifyAlwaysAsync(v20, v22, v26);

}

void sub_19B7FC8F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZN14ControllerImpl22setRecordModeForStreamEm27AVVoiceControllerRecordModeU13block_pointerFvmbP7NSErrorE_block_invoke_392(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(unsigned __int8 *)(a1 + 56), *(_QWORD *)(a1 + 32));
}

uint64_t ControllerImpl::setRecordModeForStream(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD v5[8];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;

  v6 = 0;
  v7 = &v6;
  v8 = 0x2020000000;
  v9 = 0;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = ___ZN14ControllerImpl22setRecordModeForStreamEm27AVVoiceControllerRecordMode_block_invoke;
  v5[3] = &unk_1E3BEC608;
  v5[6] = a2;
  v5[7] = a3;
  v5[4] = &v6;
  v5[5] = a1;
  makeSynchronous(v5);
  v3 = *((unsigned int *)v7 + 6);
  _Block_object_dispose(&v6, 8);
  return v3;
}

void sub_19B7FC9DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl22setRecordModeForStreamEm27AVVoiceControllerRecordMode_block_invoke(_QWORD *a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  _QWORD *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD v21[4];
  id v22;
  uint64_t v23;
  _QWORD v24[4];
  id v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  std::__shared_weak_count *v31;

  v3 = a2;
  v4 = a1[6];
  v5 = a1[7];
  v6 = MEMORY[0x1E0C809B0];
  v21[0] = MEMORY[0x1E0C809B0];
  v21[1] = 3221225472;
  v21[2] = ___ZN14ControllerImpl22setRecordModeForStreamEm27AVVoiceControllerRecordMode_block_invoke_2;
  v21[3] = &unk_1E3BEC1F8;
  v7 = a1[4];
  v8 = a1[5];
  v22 = v3;
  v23 = v7;
  v9 = v3;
  v10 = v21;
  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v30, *(_QWORD *)(v8 + 8), *(std::__shared_weak_count **)(v8 + 16));
  v24[0] = v6;
  v24[1] = 3321888768;
  v24[2] = ___ZN14ControllerImpl22setRecordModeForStreamEm27AVVoiceControllerRecordModeU13block_pointerFvmbP7NSErrorE_block_invoke;
  v24[3] = &unk_1E3BEA800;
  v11 = v30;
  v26 = v30;
  v27 = v31;
  if (v31)
  {
    p_shared_owners = (unint64_t *)&v31->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  v28 = v4;
  v14 = v10;
  v25 = v14;
  v29 = v5;
  ControllerImpl::safeWork(v11, v24, (uint64_t)"setRecordModeForStream");

  v15 = v27;
  if (v27)
  {
    v16 = (unint64_t *)&v27->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = v31;
  if (v31)
  {
    v19 = (unint64_t *)&v31->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }

}

void sub_19B7FCB80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v22);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v23 - 64);

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl22setRecordModeForStreamEm27AVVoiceControllerRecordMode_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  NSObject *v5;
  id v6;

  v6 = a4;
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = objc_msgSend(v6, "code");
  v5 = *(NSObject **)(a1 + 32);
  if (v5)
    dispatch_semaphore_signal(v5);

}

void sub_19B7FCC08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl22getRecordModeForStreamEmU13block_pointerFvm27AVVoiceControllerRecordModeP7NSErrorE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  id v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  NSObject *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  _BOOL4 v22;
  id v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD v28[4];
  id v29;
  _QWORD *v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  uint64_t v35;
  _QWORD v36[4];
  id v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD v40[4];
  uint64_t v41;
  std::__shared_weak_count *v42;
  uint8_t buf[4];
  const char *v44;
  __int16 v45;
  int v46;
  __int16 v47;
  uint64_t v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  ControllerImpl::_lookupEngineForStreamID((ControllerImpl *)&v41, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 576), *(std::__shared_weak_count **)(*(_QWORD *)(a1 + 40) + 584), *(_QWORD *)(a1 + 48));
  v40[0] = 0;
  v40[1] = v40;
  v40[2] = 0x2020000000;
  v40[3] = 0;
  v2 = v41;
  if (!v41)
  {
    if (kAVVCScope)
    {
      v17 = *(id *)kAVVCScope;
      if (!v17)
      {
LABEL_25:
        v20 = *(_QWORD *)(a1 + 56);
        v21 = *(void **)(a1 + 32);
        v22 = v21 != 0;
        v36[0] = MEMORY[0x1E0C809B0];
        v36[1] = 3221225472;
        v36[2] = ___ZN14ControllerImpl22getRecordModeForStreamEmU13block_pointerFvm27AVVoiceControllerRecordModeP7NSErrorE_block_invoke_395;
        v36[3] = &unk_1E3BEC3D8;
        v23 = v21;
        v24 = *(_QWORD *)(a1 + 48);
        v37 = v23;
        v38 = v40;
        v39 = v24;
        ControllerImpl::safeNotifyAlwaysAsync(v20, v22, v36);

        goto LABEL_26;
      }
    }
    else
    {
      v17 = MEMORY[0x1E0C81028];
      v18 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      v19 = *(_QWORD *)(a1 + 48);
      *(_DWORD *)buf = 136315650;
      v44 = "ControllerImpl.mm";
      v45 = 1024;
      v46 = 6319;
      v47 = 2048;
      v48 = v19;
      _os_log_impl(&dword_19B733000, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d getRecordModeForStream: Cannot find recording engine for streamID(%lu). Returning.", buf, 0x1Cu);
    }

    goto LABEL_25;
  }
  v28[0] = MEMORY[0x1E0C809B0];
  v28[1] = 3321888768;
  v28[2] = ___ZN14ControllerImpl22getRecordModeForStreamEmU13block_pointerFvm27AVVoiceControllerRecordModeP7NSErrorE_block_invoke_2;
  v28[3] = &unk_1E3BEAF00;
  v31 = v41;
  v32 = v42;
  if (v42)
  {
    p_shared_owners = (unint64_t *)&v42->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v6 = *(_QWORD *)(a1 + 56);
  v5 = *(std::__shared_weak_count **)(a1 + 64);
  v30 = v40;
  v33 = v6;
  v34 = v5;
  if (v5)
  {
    v7 = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = *(id *)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 48);
  v29 = v9;
  v35 = v10;
  (*(void (**)(uint64_t, _QWORD *, const char *))(*(_QWORD *)v2 + 360))(v2, v28, "getRecordModeForStream_block_invoke");

  v11 = v34;
  if (v34)
  {
    v12 = (unint64_t *)&v34->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = v32;
  if (v32)
  {
    v15 = (unint64_t *)&v32->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
LABEL_26:
  _Block_object_dispose(v40, 8);
  v25 = v42;
  if (v42)
  {
    v26 = (unint64_t *)&v42->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
}

void sub_19B7FCF28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;

  _Block_object_dispose(&a27, 8);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v27 - 112);
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl22getRecordModeForStreamEmU13block_pointerFvm27AVVoiceControllerRecordModeP7NSErrorE_block_invoke_395(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;

  v1 = a1[6];
  v2 = a1[4];
  v3 = *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24);
  objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2F90], -11793, 0);
  v4 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v2, v1, v3);

}

void sub_19B7FCFF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl22getRecordModeForStreamEmU13block_pointerFvm27AVVoiceControllerRecordModeP7NSErrorE_block_invoke_2(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  _BOOL4 v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[4];
  id v10;
  uint64_t v11;
  uint64_t v12;

  v2 = a1[6];
  if (*(_QWORD *)(v2 + 224) == 5)
    *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) = *(_QWORD *)(v2 + 336);
  v3 = a1[8];
  v4 = (void *)a1[4];
  v5 = v4 != 0;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = ___ZN14ControllerImpl22getRecordModeForStreamEmU13block_pointerFvm27AVVoiceControllerRecordModeP7NSErrorE_block_invoke_3;
  v9[3] = &unk_1E3BEC3D8;
  v6 = v4;
  v7 = a1[10];
  v8 = a1[5];
  v10 = v6;
  v11 = v8;
  v12 = v7;
  ControllerImpl::safeNotifyAlwaysAsync(v3, v5, v9);

}

void sub_19B7FD0BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{

  _Unwind_Resume(a1);
}

uint64_t ___ZN14ControllerImpl22getRecordModeForStreamEmU13block_pointerFvm27AVVoiceControllerRecordModeP7NSErrorE_block_invoke_3(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(a1[4] + 16))(a1[4], a1[6], *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24), 0);
}

uint64_t ControllerImpl::getRecordModeForStream(ControllerImpl *this, uint64_t a2)
{
  uint64_t v2;
  _QWORD v4[7];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v8 = 0;
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = ___ZN14ControllerImpl22getRecordModeForStreamEm_block_invoke;
  v4[3] = &unk_1E3BEC360;
  v4[5] = this;
  v4[6] = a2;
  v4[4] = &v5;
  makeSynchronous(v4);
  v2 = v6[3];
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_19B7FD17C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl22getRecordModeForStreamEm_block_invoke(_QWORD *a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _QWORD *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD v20[4];
  id v21;
  uint64_t v22;
  _QWORD v23[4];
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;

  v3 = a2;
  v5 = a1[5];
  v4 = a1[6];
  v6 = MEMORY[0x1E0C809B0];
  v20[0] = MEMORY[0x1E0C809B0];
  v20[1] = 3221225472;
  v20[2] = ___ZN14ControllerImpl22getRecordModeForStreamEm_block_invoke_2;
  v20[3] = &unk_1E3BEC3B0;
  v7 = a1[4];
  v21 = v3;
  v22 = v7;
  v8 = v3;
  v9 = v20;
  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v29, *(_QWORD *)(v5 + 8), *(std::__shared_weak_count **)(v5 + 16));
  v23[0] = v6;
  v23[1] = 3321888768;
  v23[2] = ___ZN14ControllerImpl22getRecordModeForStreamEmU13block_pointerFvm27AVVoiceControllerRecordModeP7NSErrorE_block_invoke;
  v23[3] = &unk_1E3BEA870;
  v25 = v5;
  v26 = v4;
  v10 = v29;
  v27 = v29;
  v28 = v30;
  if (v30)
  {
    p_shared_owners = (unint64_t *)&v30->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v13 = v9;
  v24 = v13;
  ControllerImpl::safeWork(v10, v23, (uint64_t)"getRecordModeForStream");

  v14 = v28;
  if (v28)
  {
    v15 = (unint64_t *)&v28->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = v30;
  if (v30)
  {
    v18 = (unint64_t *)&v30->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }

}

void sub_19B7FD31C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v22);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v23 - 64);

  _Unwind_Resume(a1);
}

uint64_t ControllerImpl::setAnnounceCallsEnabledForStream(ControllerImpl *this, uint64_t a2, char a3)
{
  uint64_t v3;
  _QWORD v5[7];
  char v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;

  v7 = 0;
  v8 = &v7;
  v9 = 0x2020000000;
  v10 = 0;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = ___ZN14ControllerImpl32setAnnounceCallsEnabledForStreamEmb_block_invoke;
  v5[3] = &unk_1E3BEC5B8;
  v5[5] = this;
  v5[6] = a2;
  v6 = a3;
  v5[4] = &v7;
  makeSynchronous(v5);
  v3 = *((unsigned int *)v8 + 6);
  _Block_object_dispose(&v7, 8);
  return v3;
}

void sub_19B7FD404(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl32setAnnounceCallsEnabledForStreamEmb_block_invoke(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  _QWORD *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD v21[4];
  id v22;
  uint64_t v23;
  _QWORD v24[4];
  id v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  std::__shared_weak_count *v31;

  v3 = a2;
  v5 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 48);
  v6 = *(_BYTE *)(a1 + 56);
  v7 = MEMORY[0x1E0C809B0];
  v21[0] = MEMORY[0x1E0C809B0];
  v21[1] = 3221225472;
  v21[2] = ___ZN14ControllerImpl32setAnnounceCallsEnabledForStreamEmb_block_invoke_2;
  v21[3] = &unk_1E3BEC1F8;
  v8 = *(_QWORD *)(a1 + 32);
  v22 = v3;
  v23 = v8;
  v9 = v3;
  v10 = v21;
  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v30, *(_QWORD *)(v5 + 8), *(std::__shared_weak_count **)(v5 + 16));
  v24[0] = v7;
  v24[1] = 3321888768;
  v24[2] = ___ZN14ControllerImpl32setAnnounceCallsEnabledForStreamEmbU13block_pointerFvmbP7NSErrorE_block_invoke;
  v24[3] = &unk_1E3BEA6E8;
  v11 = v30;
  v26 = v30;
  v27 = v31;
  if (v31)
  {
    p_shared_owners = (unint64_t *)&v31->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  v28 = v4;
  v14 = v10;
  v25 = v14;
  v29 = v6;
  ControllerImpl::safeWork(v11, v24, (uint64_t)"setAnnounceCallsEnabledForStream");

  v15 = v27;
  if (v27)
  {
    v16 = (unint64_t *)&v27->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = v31;
  if (v31)
  {
    v19 = (unint64_t *)&v31->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }

}

void sub_19B7FD5AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v22);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v23 - 64);

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl32setAnnounceCallsEnabledForStreamEmb_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  NSObject *v5;
  id v6;

  v6 = a4;
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = objc_msgSend(v6, "code");
  v5 = *(NSObject **)(a1 + 32);
  if (v5)
    dispatch_semaphore_signal(v5);

}

void sub_19B7FD634(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl32setAnnounceCallsEnabledForStreamEmbU13block_pointerFvmbP7NSErrorE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  id v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  NSObject *v16;
  id v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  _BOOL4 v21;
  id v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  _QWORD v27[4];
  id v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  char v34;
  _QWORD v35[4];
  id v36;
  uint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  uint8_t buf[4];
  const char *v41;
  __int16 v42;
  int v43;
  __int16 v44;
  uint64_t v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  ControllerImpl::_lookupEngineForStreamID((ControllerImpl *)&v38, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 576), *(std::__shared_weak_count **)(*(_QWORD *)(a1 + 40) + 584), *(_QWORD *)(a1 + 56));
  v2 = v38;
  if (!v38)
  {
    if (kAVVCScope)
    {
      v16 = *(id *)kAVVCScope;
      if (!v16)
      {
LABEL_25:
        v19 = *(void **)(a1 + 32);
        v20 = *(_QWORD *)(a1 + 40);
        v21 = v19 != 0;
        v35[0] = MEMORY[0x1E0C809B0];
        v35[1] = 3221225472;
        v35[2] = ___ZN14ControllerImpl32setAnnounceCallsEnabledForStreamEmbU13block_pointerFvmbP7NSErrorE_block_invoke_399;
        v35[3] = &unk_1E3BECB48;
        v22 = v19;
        v23 = *(_QWORD *)(a1 + 56);
        v36 = v22;
        v37 = v23;
        ControllerImpl::safeNotifyAlwaysAsync(v20, v21, v35);

        goto LABEL_26;
      }
    }
    else
    {
      v16 = MEMORY[0x1E0C81028];
      v17 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      v18 = *(_QWORD *)(a1 + 56);
      *(_DWORD *)buf = 136315650;
      v41 = "ControllerImpl.mm";
      v42 = 1024;
      v43 = 6373;
      v44 = 2048;
      v45 = v18;
      _os_log_impl(&dword_19B733000, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d setAnnounceCallsEnabledForStream: Cannot find recording engine for streamID(%lu). Returning.", buf, 0x1Cu);
    }

    goto LABEL_25;
  }
  v27[0] = MEMORY[0x1E0C809B0];
  v27[1] = 3321888768;
  v27[2] = ___ZN14ControllerImpl32setAnnounceCallsEnabledForStreamEmbU13block_pointerFvmbP7NSErrorE_block_invoke_2;
  v27[3] = &unk_1E3BEAD08;
  v29 = v38;
  v30 = v39;
  if (v39)
  {
    p_shared_owners = (unint64_t *)&v39->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v34 = *(_BYTE *)(a1 + 64);
  v5 = *(std::__shared_weak_count **)(a1 + 48);
  v31 = *(_QWORD *)(a1 + 40);
  v32 = v5;
  if (v5)
  {
    v6 = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = *(id *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 56);
  v28 = v8;
  v33 = v9;
  (*(void (**)(uint64_t, _QWORD *, const char *))(*(_QWORD *)v2 + 360))(v2, v27, "setAnnounceCallsEnabledForStream_block_invoke");

  v10 = v32;
  if (v32)
  {
    v11 = (unint64_t *)&v32->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = v30;
  if (v30)
  {
    v14 = (unint64_t *)&v30->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
LABEL_26:
  v24 = v39;
  if (v39)
  {
    v25 = (unint64_t *)&v39->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
}

void sub_19B7FD928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25)
{
  uint64_t v25;

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v25 - 112);
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl32setAnnounceCallsEnabledForStreamEmbU13block_pointerFvmbP7NSErrorE_block_invoke_399(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  id v3;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2F90], -11793, 0);
  v3 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v1 + 16))(v1, v2, 0);

}

void sub_19B7FD9D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl32setAnnounceCallsEnabledForStreamEmbU13block_pointerFvmbP7NSErrorE_block_invoke_2(uint64_t a1)
{
  AVVCContextSettings *v2;
  AVVCContextSettings *v3;
  uint64_t v4;
  void *v5;
  _BOOL4 v6;
  id v7;
  uint64_t v8;
  _QWORD v9[4];
  id v10;
  uint64_t v11;

  AVVCRecordingEngine::getActivationContextSettings(*(AVVCRecordingEngine **)(a1 + 40));
  v2 = (AVVCContextSettings *)objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if (v2)
  {
    -[AVVCContextSettings setAnnounceCallsEnabled:](v2, "setAnnounceCallsEnabled:", *(unsigned __int8 *)(a1 + 80));
    AVVCRecordingEngine::setActivationContextSettings(*(AVVCRecordingEngine **)(a1 + 40), v3);
  }
  v4 = *(_QWORD *)(a1 + 56);
  v5 = *(void **)(a1 + 32);
  v6 = v5 != 0;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = ___ZN14ControllerImpl32setAnnounceCallsEnabledForStreamEmbU13block_pointerFvmbP7NSErrorE_block_invoke_3;
  v9[3] = &unk_1E3BECB48;
  v7 = v5;
  v8 = *(_QWORD *)(a1 + 72);
  v10 = v7;
  v11 = v8;
  ControllerImpl::safeNotifyAlwaysAsync(v4, v6, v9);

}

void sub_19B7FDAA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;

  _Unwind_Resume(a1);
}

uint64_t ___ZN14ControllerImpl32setAnnounceCallsEnabledForStreamEmbU13block_pointerFvmbP7NSErrorE_block_invoke_3(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), 1, 0);
}

void ControllerImpl::getInputChannelInfoForStream(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v9[4];
  id v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  _BYTE v13[8];

  v3 = a2;
  TraceMethod::TraceMethod((TraceMethod *)v13, "getInputChannelInfoCompletion");
  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v11, *(_QWORD *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16));
  v4 = v11;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = ___ZN14ControllerImpl28getInputChannelInfoForStreamEmU13block_pointerFvP12NSDictionaryP7NSErrorE_block_invoke;
  v9[3] = &unk_1E3BECB00;
  v5 = v3;
  v10 = v5;
  ControllerImpl::safeNotifyAlwaysAsync(v4, v3 != 0, v9);

  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  TraceMethod::~TraceMethod((TraceMethod *)v13);

}

void sub_19B7FDBCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, ...)
{
  void *v6;
  uint64_t v7;
  va_list va;

  va_start(va, a6);

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)va);
  TraceMethod::~TraceMethod((TraceMethod *)(v7 - 40));

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl28getInputChannelInfoForStreamEmU13block_pointerFvP12NSDictionaryP7NSErrorE_block_invoke(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 32);
  objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2F90], -11794, 0);
  v2 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, _QWORD))(v1 + 16))(v1, 0);

}

void sub_19B7FDC60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl22setDuckOthersForStreamEmP16AVVCDuckSettingsU13block_pointerFvmbP7NSErrorE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  id v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  id v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  NSObject *v18;
  id v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  _BOOL4 v23;
  id v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  _QWORD v29[4];
  id v30;
  id v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  uint64_t v36;
  _QWORD v37[4];
  id v38;
  uint64_t v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  uint8_t buf[4];
  const char *v43;
  __int16 v44;
  int v45;
  __int16 v46;
  uint64_t v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 32))
    return;
  ControllerImpl::_lookupEngineForStreamID((ControllerImpl *)&v40, *(_QWORD *)(*(_QWORD *)(a1 + 48) + 576), *(std::__shared_weak_count **)(*(_QWORD *)(a1 + 48) + 584), *(_QWORD *)(a1 + 64));
  v2 = v40;
  if (v40)
  {
    v29[0] = MEMORY[0x1E0C809B0];
    v29[1] = 3321888768;
    v29[2] = ___ZN14ControllerImpl22setDuckOthersForStreamEmP16AVVCDuckSettingsU13block_pointerFvmbP7NSErrorE_block_invoke_2;
    v29[3] = &unk_1E3BEAF70;
    v32 = v40;
    v33 = v41;
    if (v41)
    {
      p_shared_owners = (unint64_t *)&v41->__shared_owners_;
      do
        v4 = __ldxr(p_shared_owners);
      while (__stxr(v4 + 1, p_shared_owners));
    }
    v5 = *(id *)(a1 + 32);
    v7 = *(_QWORD *)(a1 + 48);
    v6 = *(std::__shared_weak_count **)(a1 + 56);
    v30 = v5;
    v34 = v7;
    v35 = v6;
    if (v6)
    {
      v8 = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }
    v10 = *(id *)(a1 + 40);
    v11 = *(_QWORD *)(a1 + 64);
    v31 = v10;
    v36 = v11;
    (*(void (**)(uint64_t, _QWORD *, const char *))(*(_QWORD *)v2 + 360))(v2, v29, "setDuckOthersForStream_block_invoke");

    v12 = v35;
    if (v35)
    {
      v13 = (unint64_t *)&v35->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }

    v15 = v33;
    if (v33)
    {
      v16 = (unint64_t *)&v33->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    goto LABEL_27;
  }
  if (!kAVVCScope)
  {
    v18 = MEMORY[0x1E0C81028];
    v19 = MEMORY[0x1E0C81028];
    goto LABEL_23;
  }
  v18 = *(id *)kAVVCScope;
  if (v18)
  {
LABEL_23:
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      v20 = *(_QWORD *)(a1 + 64);
      *(_DWORD *)buf = 136315650;
      v43 = "ControllerImpl.mm";
      v44 = 1024;
      v45 = 6494;
      v46 = 2048;
      v47 = v20;
      _os_log_impl(&dword_19B733000, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d setDuckOthersForStream: Cannot find recording engine for streamID(%lu). Returning.", buf, 0x1Cu);
    }

  }
  v21 = *(void **)(a1 + 40);
  v22 = *(_QWORD *)(a1 + 48);
  v23 = v21 != 0;
  v37[0] = MEMORY[0x1E0C809B0];
  v37[1] = 3221225472;
  v37[2] = ___ZN14ControllerImpl22setDuckOthersForStreamEmP16AVVCDuckSettingsU13block_pointerFvmbP7NSErrorE_block_invoke_402;
  v37[3] = &unk_1E3BECB48;
  v24 = v21;
  v25 = *(_QWORD *)(a1 + 64);
  v38 = v24;
  v39 = v25;
  ControllerImpl::safeNotifyAlwaysAsync(v22, v23, v37);

LABEL_27:
  v26 = v41;
  if (v41)
  {
    v27 = (unint64_t *)&v41->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
}

void sub_19B7FDF68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25)
{
  uint64_t v25;

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v25 - 112);
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl22setDuckOthersForStreamEmP16AVVCDuckSettingsU13block_pointerFvmbP7NSErrorE_block_invoke_402(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  id v3;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2F90], -11793, 0);
  v3 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v1 + 16))(v1, v2, 0);

}

void sub_19B7FE01C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl22setDuckOthersForStreamEmP16AVVCDuckSettingsU13block_pointerFvmbP7NSErrorE_block_invoke_2(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  char v7;
  id v8;
  void *v9;
  void *v10;
  id *v11;
  id v12;
  void *v13;
  void *v14;
  void *v15;
  id *v16;
  id v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  uint64_t v23;
  void *v24;
  _BOOL4 v25;
  id v26;
  uint64_t v27;
  id v28;
  _QWORD v29[4];
  id v30;
  id v31;
  uint64_t v32;
  char v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;

  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 48) + 64))(*(_QWORD *)(a1 + 48), 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "duckOverride");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3;
  if (v3)
  {
    objc_msgSend(v3, "duckOthers");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "mixWithOthers");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v39 = 0;
    v7 = objc_msgSend(v2, "setDuckOthers:mixWithOthers:error:", v5, v6, &v39);
    v8 = v39;

    objc_msgSend(v4, "duckToLevel");
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    if (v9)
    {
      if (objc_msgSend(v4, "isBlur"))
      {
        objc_msgSend(v4, "duckToLevel");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        v38 = v8;
        v11 = &v38;
        objc_msgSend(v2, "setDuckToLevelDB:error:", v10, &v38);
      }
      else
      {
        objc_msgSend(v4, "duckToLevel");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        v37 = v8;
        v11 = &v37;
        objc_msgSend(v2, "setDuckToLevelScalar:error:", v10, &v37);
      }
      v12 = *v11;

      v8 = v12;
    }
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  objc_msgSend(*(id *)(a1 + 32), "duckLevel");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = v13;
  if (v13)
  {
    if (objc_msgSend(v13, "isBlur"))
    {
      objc_msgSend(v14, "value");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v36 = v8;
      v16 = &v36;
      objc_msgSend(v2, "setDuckToLevelDB:error:", v15, &v36);
    }
    else
    {
      objc_msgSend(v14, "value");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v35 = v8;
      v16 = &v35;
      objc_msgSend(v2, "setDuckToLevelScalar:error:", v15, &v35);
    }
    v17 = *v16;

    v8 = v17;
  }
  objc_msgSend(*(id *)(a1 + 32), "fadeDuration");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v19 = v18;
  if (v18)
  {
    objc_msgSend(v18, "fadeOut");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "fadeIn");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    v34 = v8;
    v7 = objc_msgSend(v2, "setDuckingFadeOutDuration:fadeInDuration:error:", v20, v21, &v34);
    v22 = v34;

    v8 = v22;
  }
  v23 = *(_QWORD *)(a1 + 64);
  v24 = *(void **)(a1 + 40);
  v25 = v24 != 0;
  v29[0] = MEMORY[0x1E0C809B0];
  v29[1] = 3221225472;
  v29[2] = ___ZN14ControllerImpl22setDuckOthersForStreamEmP16AVVCDuckSettingsU13block_pointerFvmbP7NSErrorE_block_invoke_3;
  v29[3] = &unk_1E3BEC5E0;
  v26 = v24;
  v27 = *(_QWORD *)(a1 + 80);
  v31 = v26;
  v32 = v27;
  v33 = v7;
  v28 = v8;
  v30 = v28;
  ControllerImpl::safeNotifyAlwaysAsync(v23, v25, v29);

}

void sub_19B7FE318(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

uint64_t ___ZN14ControllerImpl22setDuckOthersForStreamEmP16AVVCDuckSettingsU13block_pointerFvmbP7NSErrorE_block_invoke_3(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(unsigned __int8 *)(a1 + 56), *(_QWORD *)(a1 + 32));
}

uint64_t ControllerImpl::setDuckOthersForStream(uint64_t a1, uint64_t a2, void *a3, _QWORD *a4)
{
  id v7;
  id v8;
  uint64_t v9;
  _QWORD v11[4];
  id v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t);
  void (*v21)(uint64_t);
  id v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  char v26;

  v7 = a3;
  v23 = 0;
  v24 = &v23;
  v25 = 0x2020000000;
  v26 = 1;
  v17 = 0;
  v18 = &v17;
  v19 = 0x3032000000;
  v20 = __Block_byref_object_copy__4869;
  v21 = __Block_byref_object_dispose__4870;
  v22 = 0;
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = ___ZN14ControllerImpl22setDuckOthersForStreamEmP16AVVCDuckSettingsPU15__autoreleasingP7NSError_block_invoke;
  v11[3] = &unk_1E3BEC658;
  v15 = a1;
  v16 = a2;
  v8 = v7;
  v12 = v8;
  v13 = &v23;
  v14 = &v17;
  makeSynchronous(v11);
  if (a4)
    *a4 = objc_retainAutorelease((id)v18[5]);
  v9 = *((unsigned __int8 *)v24 + 24);

  _Block_object_dispose(&v17, 8);
  _Block_object_dispose(&v23, 8);

  return v9;
}

void sub_19B7FE4EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  void *v24;
  uint64_t v25;

  _Block_object_dispose(&a19, 8);
  _Block_object_dispose((const void *)(v25 - 80), 8);

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl22setDuckOthersForStreamEmP16AVVCDuckSettingsPU15__autoreleasingP7NSError_block_invoke(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  id v8;
  id v9;
  _QWORD *v10;
  uint64_t v11;
  id v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  _QWORD *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD v22[4];
  id v23;
  __int128 v24;
  _QWORD v25[4];
  id v26;
  id v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;

  v3 = a2;
  v5 = *(_QWORD *)(a1 + 56);
  v4 = *(_QWORD *)(a1 + 64);
  v6 = *(void **)(a1 + 32);
  v7 = MEMORY[0x1E0C809B0];
  v22[0] = MEMORY[0x1E0C809B0];
  v22[1] = 3221225472;
  v22[2] = ___ZN14ControllerImpl22setDuckOthersForStreamEmP16AVVCDuckSettingsPU15__autoreleasingP7NSError_block_invoke_2;
  v22[3] = &unk_1E3BEC630;
  v24 = *(_OWORD *)(a1 + 40);
  v23 = v3;
  v8 = v3;
  v9 = v6;
  v10 = v22;
  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v31, *(_QWORD *)(v5 + 8), *(std::__shared_weak_count **)(v5 + 16));
  v11 = v31;
  v25[0] = v7;
  v25[1] = 3321888768;
  v25[2] = ___ZN14ControllerImpl22setDuckOthersForStreamEmP16AVVCDuckSettingsU13block_pointerFvmbP7NSErrorE_block_invoke;
  v25[3] = &unk_1E3BEA8E0;
  v12 = v9;
  v26 = v12;
  v28 = v31;
  v29 = v32;
  if (v32)
  {
    p_shared_owners = (unint64_t *)&v32->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  v30 = v4;
  v15 = v10;
  v27 = v15;
  ControllerImpl::safeWork(v11, v25, (uint64_t)"setDuckOthersForStream");

  v16 = v29;
  if (v29)
  {
    v17 = (unint64_t *)&v29->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }

  v19 = v32;
  if (v32)
  {
    v20 = (unint64_t *)&v32->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }

}

void sub_19B7FE6E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21)
{
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v24);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v25 - 80);

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl22setDuckOthersForStreamEmP16AVVCDuckSettingsPU15__autoreleasingP7NSError_block_invoke_2(_QWORD *a1, uint64_t a2, char a3, void *a4)
{
  NSObject *v7;
  id v8;

  v8 = a4;
  *(_BYTE *)(*(_QWORD *)(a1[5] + 8) + 24) = a3;
  objc_storeStrong((id *)(*(_QWORD *)(a1[6] + 8) + 40), a4);
  v7 = a1[4];
  if (v7)
    dispatch_semaphore_signal(v7);

}

void ___ZN14ControllerImpl40isDuckingSupportedOnPickedRouteForStreamEmU13block_pointerFvmbP7NSErrorE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  id v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  NSObject *v16;
  id v17;
  void *v18;
  uint64_t v19;
  _BOOL4 v20;
  id v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  _QWORD v26[4];
  id v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  uint64_t v32;
  _QWORD v33[4];
  id v34;
  uint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  uint8_t buf[4];
  const char *v39;
  __int16 v40;
  int v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  ControllerImpl::_lookupEngineForStreamID((ControllerImpl *)&v36, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 576), *(std::__shared_weak_count **)(*(_QWORD *)(a1 + 40) + 584), *(_QWORD *)(a1 + 56));
  v2 = v36;
  if (!v36)
  {
    if (kAVVCScope)
    {
      v16 = *(id *)kAVVCScope;
      if (!v16)
      {
LABEL_25:
        v18 = *(void **)(a1 + 32);
        v19 = *(_QWORD *)(a1 + 40);
        v20 = v18 != 0;
        v33[0] = MEMORY[0x1E0C809B0];
        v33[1] = 3221225472;
        v33[2] = ___ZN14ControllerImpl40isDuckingSupportedOnPickedRouteForStreamEmU13block_pointerFvmbP7NSErrorE_block_invoke_407;
        v33[3] = &unk_1E3BECB48;
        v21 = v18;
        v22 = *(_QWORD *)(a1 + 56);
        v34 = v21;
        v35 = v22;
        ControllerImpl::safeNotifyAlwaysAsync(v19, v20, v33);

        goto LABEL_26;
      }
    }
    else
    {
      v16 = MEMORY[0x1E0C81028];
      v17 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v39 = "ControllerImpl.mm";
      v40 = 1024;
      v41 = 6596;
      _os_log_impl(&dword_19B733000, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d isDuckingSupportedOnPickedRouteForStream: Nil recording engine", buf, 0x12u);
    }

    goto LABEL_25;
  }
  v26[0] = MEMORY[0x1E0C809B0];
  v26[1] = 3321888768;
  v26[2] = ___ZN14ControllerImpl40isDuckingSupportedOnPickedRouteForStreamEmU13block_pointerFvmbP7NSErrorE_block_invoke_2;
  v26[3] = &unk_1E3BEAB80;
  v28 = v36;
  v29 = v37;
  if (v37)
  {
    p_shared_owners = (unint64_t *)&v37->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = *(std::__shared_weak_count **)(a1 + 48);
  v30 = *(_QWORD *)(a1 + 40);
  v31 = v5;
  if (v5)
  {
    v6 = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = *(id *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 56);
  v27 = v8;
  v32 = v9;
  (*(void (**)(uint64_t, _QWORD *, const char *))(*(_QWORD *)v2 + 360))(v2, v26, "isDuckingSupportedOnPickedRouteForStream_block_invoke");

  v10 = v31;
  if (v31)
  {
    v11 = (unint64_t *)&v31->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = v29;
  if (v29)
  {
    v14 = (unint64_t *)&v29->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
LABEL_26:
  v23 = v37;
  if (v37)
  {
    v24 = (unint64_t *)&v37->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
}

void sub_19B7FEA54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  uint64_t v23;

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v23 - 80);
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl40isDuckingSupportedOnPickedRouteForStreamEmU13block_pointerFvmbP7NSErrorE_block_invoke_407(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  id v3;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2F90], -11793, 0);
  v3 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v1 + 16))(v1, v2, 0);

}

void sub_19B7FEB00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl40isDuckingSupportedOnPickedRouteForStreamEmU13block_pointerFvmbP7NSErrorE_block_invoke_2(uint64_t a1)
{
  void *v2;
  char v3;
  uint64_t v4;
  void *v5;
  _BOOL4 v6;
  id v7;
  uint64_t v8;
  _QWORD v9[4];
  id v10;
  uint64_t v11;
  char v12;

  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 40) + 64))(*(_QWORD *)(a1 + 40), 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "isSWVolumeSupportedOnPickedRoute");
  v4 = *(_QWORD *)(a1 + 56);
  v5 = *(void **)(a1 + 32);
  v6 = v5 != 0;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = ___ZN14ControllerImpl40isDuckingSupportedOnPickedRouteForStreamEmU13block_pointerFvmbP7NSErrorE_block_invoke_3;
  v9[3] = &unk_1E3BEC518;
  v7 = v5;
  v8 = *(_QWORD *)(a1 + 72);
  v10 = v7;
  v11 = v8;
  v12 = v3;
  ControllerImpl::safeNotifyAlwaysAsync(v4, v6, v9);

}

void sub_19B7FEBD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

uint64_t ___ZN14ControllerImpl40isDuckingSupportedOnPickedRouteForStreamEmU13block_pointerFvmbP7NSErrorE_block_invoke_3(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 48), 0);
}

uint64_t ControllerImpl::isDuckingSupportedOnPickedRouteForStream(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  _QWORD v6[8];
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t);
  void (*v11)(uint64_t);
  id v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  char v16;

  v13 = 0;
  v14 = &v13;
  v15 = 0x2020000000;
  v16 = 0;
  v7 = 0;
  v8 = &v7;
  v9 = 0x3032000000;
  v10 = __Block_byref_object_copy__4869;
  v11 = __Block_byref_object_dispose__4870;
  v12 = 0;
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = ___ZN14ControllerImpl40isDuckingSupportedOnPickedRouteForStreamEmPU15__autoreleasingP7NSError_block_invoke;
  v6[3] = &unk_1E3BEC680;
  v6[6] = a1;
  v6[7] = a2;
  v6[4] = &v13;
  v6[5] = &v7;
  makeSynchronous(v6);
  if (a3)
    *a3 = objc_retainAutorelease((id)v8[5]);
  v4 = *((unsigned __int8 *)v14 + 24);
  _Block_object_dispose(&v7, 8);

  _Block_object_dispose(&v13, 8);
  return v4;
}

void sub_19B7FECF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  uint64_t v22;

  _Block_object_dispose(&a17, 8);

  _Block_object_dispose((const void *)(v22 - 48), 8);
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl40isDuckingSupportedOnPickedRouteForStreamEmPU15__autoreleasingP7NSError_block_invoke(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD v19[4];
  id v20;
  __int128 v21;
  _QWORD v22[4];
  id v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;

  v3 = a2;
  v5 = *(_QWORD *)(a1 + 48);
  v4 = *(_QWORD *)(a1 + 56);
  v6 = MEMORY[0x1E0C809B0];
  v19[0] = MEMORY[0x1E0C809B0];
  v19[1] = 3221225472;
  v19[2] = ___ZN14ControllerImpl40isDuckingSupportedOnPickedRouteForStreamEmPU15__autoreleasingP7NSError_block_invoke_2;
  v19[3] = &unk_1E3BEC630;
  v21 = *(_OWORD *)(a1 + 32);
  v20 = v3;
  v7 = v3;
  v8 = v19;
  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v27, *(_QWORD *)(v5 + 8), *(std::__shared_weak_count **)(v5 + 16));
  v22[0] = v6;
  v22[1] = 3321888768;
  v22[2] = ___ZN14ControllerImpl40isDuckingSupportedOnPickedRouteForStreamEmU13block_pointerFvmbP7NSErrorE_block_invoke;
  v22[3] = &unk_1E3BEA488;
  v9 = v27;
  v24 = v27;
  v25 = v28;
  if (v28)
  {
    p_shared_owners = (unint64_t *)&v28->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  v26 = v4;
  v12 = v8;
  v23 = v12;
  ControllerImpl::safeWork(v9, v22, (uint64_t)"isDuckingSupportedOnPickedRouteForStream");

  v13 = v25;
  if (v25)
  {
    v14 = (unint64_t *)&v25->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = v28;
  if (v28)
  {
    v17 = (unint64_t *)&v28->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }

}

void sub_19B7FEEA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v23);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v24 - 64);

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl40isDuckingSupportedOnPickedRouteForStreamEmPU15__autoreleasingP7NSError_block_invoke_2(_QWORD *a1, uint64_t a2, char a3, void *a4)
{
  NSObject *v7;
  id v8;

  v8 = a4;
  *(_BYTE *)(*(_QWORD *)(a1[5] + 8) + 24) = a3;
  objc_storeStrong((id *)(*(_QWORD *)(a1[6] + 8) + 40), a4);
  v7 = a1[4];
  if (v7)
    dispatch_semaphore_signal(v7);

}

void ControllerImpl::enableTriangleModeForStream(uint64_t a1, uint64_t a2, char a3, void *a4)
{
  id v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  id v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD v18[4];
  id v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  std::__shared_weak_count *v25;

  v7 = a4;
  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v24, *(_QWORD *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16));
  v18[0] = MEMORY[0x1E0C809B0];
  v18[1] = 3321888768;
  v18[2] = ___ZN14ControllerImpl27enableTriangleModeForStreamEmbU13block_pointerFvmbP7NSErrorE_block_invoke;
  v18[3] = &unk_1E3BEA6E8;
  v8 = v24;
  v20 = v24;
  v21 = v25;
  if (v25)
  {
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v22 = a2;
  v11 = v7;
  v19 = v11;
  v23 = a3;
  ControllerImpl::safeWork(v8, v18, (uint64_t)"enableTriangleModeForStream");

  v12 = v21;
  if (v21)
  {
    v13 = (unint64_t *)&v21->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = v25;
  if (v25)
  {
    v16 = (unint64_t *)&v25->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }

}

void sub_19B7FF098(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  uint64_t v15;
  uint64_t v16;

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v15);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v16 - 64);

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl27enableTriangleModeForStreamEmbU13block_pointerFvmbP7NSErrorE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  id v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  NSObject *v16;
  id v17;
  void *v18;
  uint64_t v19;
  _BOOL4 v20;
  id v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  _QWORD v26[4];
  id v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  uint64_t v32;
  char v33;
  _QWORD v34[4];
  id v35;
  uint64_t v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  uint8_t buf[4];
  const char *v40;
  __int16 v41;
  int v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  ControllerImpl::_lookupEngineForStreamID((ControllerImpl *)&v37, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 576), *(std::__shared_weak_count **)(*(_QWORD *)(a1 + 40) + 584), *(_QWORD *)(a1 + 56));
  v2 = v37;
  if (!v37)
  {
    if (kAVVCScope)
    {
      v16 = *(id *)kAVVCScope;
      if (!v16)
      {
LABEL_25:
        v18 = *(void **)(a1 + 32);
        v19 = *(_QWORD *)(a1 + 40);
        v20 = v18 != 0;
        v34[0] = MEMORY[0x1E0C809B0];
        v34[1] = 3221225472;
        v34[2] = ___ZN14ControllerImpl27enableTriangleModeForStreamEmbU13block_pointerFvmbP7NSErrorE_block_invoke_410;
        v34[3] = &unk_1E3BECB48;
        v21 = v18;
        v22 = *(_QWORD *)(a1 + 56);
        v35 = v21;
        v36 = v22;
        ControllerImpl::safeNotifyAlwaysAsync(v19, v20, v34);

        goto LABEL_26;
      }
    }
    else
    {
      v16 = MEMORY[0x1E0C81028];
      v17 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v40 = "ControllerImpl.mm";
      v41 = 1024;
      v42 = 6649;
      _os_log_impl(&dword_19B733000, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d enableTriangleModeForStream: Nil recording engine", buf, 0x12u);
    }

    goto LABEL_25;
  }
  v26[0] = MEMORY[0x1E0C809B0];
  v26[1] = 3321888768;
  v26[2] = ___ZN14ControllerImpl27enableTriangleModeForStreamEmbU13block_pointerFvmbP7NSErrorE_block_invoke_2;
  v26[3] = &unk_1E3BEAD08;
  v28 = v37;
  v29 = v38;
  if (v38)
  {
    p_shared_owners = (unint64_t *)&v38->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v33 = *(_BYTE *)(a1 + 64);
  v5 = *(std::__shared_weak_count **)(a1 + 48);
  v30 = *(_QWORD *)(a1 + 40);
  v31 = v5;
  if (v5)
  {
    v6 = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = *(id *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 56);
  v27 = v8;
  v32 = v9;
  (*(void (**)(uint64_t, _QWORD *, const char *))(*(_QWORD *)v2 + 360))(v2, v26, "enableTriangleModeForStream_block_invoke");

  v10 = v31;
  if (v31)
  {
    v11 = (unint64_t *)&v31->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = v29;
  if (v29)
  {
    v14 = (unint64_t *)&v29->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
LABEL_26:
  v23 = v38;
  if (v38)
  {
    v24 = (unint64_t *)&v38->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
}

void sub_19B7FF390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25)
{
  uint64_t v25;

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v25 - 80);
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl27enableTriangleModeForStreamEmbU13block_pointerFvmbP7NSErrorE_block_invoke_410(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  id v3;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2F90], -11793, 0);
  v3 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v1 + 16))(v1, v2, 0);

}

void sub_19B7FF43C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl27enableTriangleModeForStreamEmbU13block_pointerFvmbP7NSErrorE_block_invoke_2(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  char v4;
  id v5;
  uint64_t v6;
  void *v7;
  _BOOL4 v8;
  id v9;
  uint64_t v10;
  id v11;
  _QWORD v12[4];
  id v13;
  id v14;
  uint64_t v15;
  char v16;
  id v17;

  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 40) + 64))(*(_QWORD *)(a1 + 40), 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = *(unsigned __int8 *)(a1 + 80);
  v17 = 0;
  v4 = objc_msgSend(v2, "setEnableBTTriangleMode:error:", v3, &v17);
  v5 = v17;
  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(void **)(a1 + 32);
  v8 = v7 != 0;
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = ___ZN14ControllerImpl27enableTriangleModeForStreamEmbU13block_pointerFvmbP7NSErrorE_block_invoke_3;
  v12[3] = &unk_1E3BEC5E0;
  v9 = v7;
  v10 = *(_QWORD *)(a1 + 72);
  v14 = v9;
  v15 = v10;
  v16 = v4;
  v11 = v5;
  v13 = v11;
  ControllerImpl::safeNotifyAlwaysAsync(v6, v8, v12);

}

void sub_19B7FF540(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

uint64_t ___ZN14ControllerImpl27enableTriangleModeForStreamEmbU13block_pointerFvmbP7NSErrorE_block_invoke_3(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(unsigned __int8 *)(a1 + 56), *(_QWORD *)(a1 + 32));
}

void ControllerImpl::startKeepAliveQueueForStream(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  id v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD v16[4];
  id v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;

  v5 = a3;
  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v21, *(_QWORD *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16));
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 3321888768;
  v16[2] = ___ZN14ControllerImpl28startKeepAliveQueueForStreamEmU13block_pointerFvmbP7NSErrorE_block_invoke;
  v16[3] = &unk_1E3BEA488;
  v6 = v21;
  v18 = v21;
  v19 = v22;
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v20 = a2;
  v9 = v5;
  v17 = v9;
  ControllerImpl::safeWork(v6, v16, (uint64_t)"startKeepAliveQueueForStream");

  v10 = v19;
  if (v19)
  {
    v11 = (unint64_t *)&v19->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = v22;
  if (v22)
  {
    v14 = (unint64_t *)&v22->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }

}

void sub_19B7FF6C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;
  uint64_t v14;
  uint64_t v15;

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v14);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v15 - 48);

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl28startKeepAliveQueueForStreamEmU13block_pointerFvmbP7NSErrorE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  id v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  NSObject *v16;
  id v17;
  void *v18;
  uint64_t v19;
  _BOOL4 v20;
  id v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  _QWORD v26[4];
  id v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  uint64_t v32;
  _QWORD v33[4];
  id v34;
  uint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  uint8_t buf[4];
  const char *v39;
  __int16 v40;
  int v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  ControllerImpl::_lookupEngineForStreamID((ControllerImpl *)&v36, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 576), *(std::__shared_weak_count **)(*(_QWORD *)(a1 + 40) + 584), *(_QWORD *)(a1 + 56));
  v2 = v36;
  if (!v36)
  {
    if (kAVVCScope)
    {
      v16 = *(id *)kAVVCScope;
      if (!v16)
      {
LABEL_25:
        v18 = *(void **)(a1 + 32);
        v19 = *(_QWORD *)(a1 + 40);
        v20 = v18 != 0;
        v33[0] = MEMORY[0x1E0C809B0];
        v33[1] = 3221225472;
        v33[2] = ___ZN14ControllerImpl28startKeepAliveQueueForStreamEmU13block_pointerFvmbP7NSErrorE_block_invoke_413;
        v33[3] = &unk_1E3BECB48;
        v21 = v18;
        v22 = *(_QWORD *)(a1 + 56);
        v34 = v21;
        v35 = v22;
        ControllerImpl::safeNotifyAlwaysAsync(v19, v20, v33);

        goto LABEL_26;
      }
    }
    else
    {
      v16 = MEMORY[0x1E0C81028];
      v17 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v39 = "ControllerImpl.mm";
      v40 = 1024;
      v41 = 6679;
      _os_log_impl(&dword_19B733000, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d startKeepAliveQueueForStream: Nil recording engine", buf, 0x12u);
    }

    goto LABEL_25;
  }
  v26[0] = MEMORY[0x1E0C809B0];
  v26[1] = 3321888768;
  v26[2] = ___ZN14ControllerImpl28startKeepAliveQueueForStreamEmU13block_pointerFvmbP7NSErrorE_block_invoke_2;
  v26[3] = &unk_1E3BEAB80;
  v28 = v36;
  v29 = v37;
  if (v37)
  {
    p_shared_owners = (unint64_t *)&v37->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = *(std::__shared_weak_count **)(a1 + 48);
  v30 = *(_QWORD *)(a1 + 40);
  v31 = v5;
  if (v5)
  {
    v6 = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = *(id *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 56);
  v27 = v8;
  v32 = v9;
  (*(void (**)(uint64_t, _QWORD *, const char *))(*(_QWORD *)v2 + 360))(v2, v26, "startKeepAliveQueueForStream_block_invoke");

  v10 = v31;
  if (v31)
  {
    v11 = (unint64_t *)&v31->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = v29;
  if (v29)
  {
    v14 = (unint64_t *)&v29->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
LABEL_26:
  v23 = v37;
  if (v37)
  {
    v24 = (unint64_t *)&v37->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
}

void sub_19B7FF9B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  uint64_t v23;

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v23 - 80);
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl28startKeepAliveQueueForStreamEmU13block_pointerFvmbP7NSErrorE_block_invoke_413(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  id v3;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2F90], -11793, 0);
  v3 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v1 + 16))(v1, v2, 0);

}

void sub_19B7FFA5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl28startKeepAliveQueueForStreamEmU13block_pointerFvmbP7NSErrorE_block_invoke_2(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  id v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD v23[4];
  id v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  _QWORD v28[4];
  id v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  uint64_t v32;

  if (AVVCRouteManager::isOutputHandsFree(*(id **)(*(_QWORD *)(a1 + 40) + 376)))
  {
    +[AVVCKeepAliveManager sharedManager](AVVCKeepAliveManager, "sharedManager");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = MEMORY[0x1E0C809B0];
    v28[0] = MEMORY[0x1E0C809B0];
    v28[1] = 3321888768;
    v28[2] = ___ZN14ControllerImpl28startKeepAliveQueueForStreamEmU13block_pointerFvmbP7NSErrorE_block_invoke_3;
    v28[3] = &unk_1E3BEA450;
    v4 = *(std::__shared_weak_count **)(a1 + 64);
    v30 = *(_QWORD *)(a1 + 56);
    v31 = v4;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
    }
    v7 = *(id *)(a1 + 32);
    v8 = *(_QWORD *)(a1 + 72);
    v29 = v7;
    v32 = v8;
    objc_msgSend(v2, "createWithCompletion:", v28);

    (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 40) + 64))(*(_QWORD *)(a1 + 40), 0);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = v9;
    if (v9 && (int)objc_msgSend(v9, "sessionState") >= 5)
    {
      +[AVVCKeepAliveManager sharedManager](AVVCKeepAliveManager, "sharedManager");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v23[0] = v3;
      v23[1] = 3321888768;
      v23[2] = ___ZN14ControllerImpl28startKeepAliveQueueForStreamEmU13block_pointerFvmbP7NSErrorE_block_invoke_414;
      v23[3] = &unk_1E3BEA450;
      v12 = *(std::__shared_weak_count **)(a1 + 64);
      v25 = *(_QWORD *)(a1 + 56);
      v26 = v12;
      if (v12)
      {
        v13 = (unint64_t *)&v12->__shared_owners_;
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
      }
      v15 = *(id *)(a1 + 32);
      v16 = *(_QWORD *)(a1 + 72);
      v24 = v15;
      v27 = v16;
      objc_msgSend(v11, "startWithCompletion:", v23);

      v17 = v26;
      if (v26)
      {
        v18 = (unint64_t *)&v26->__shared_owners_;
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
    }

    v20 = v31;
    if (v31)
    {
      v21 = (unint64_t *)&v31->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
  }
}

void sub_19B7FFC6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v24);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v21);
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl28startKeepAliveQueueForStreamEmU13block_pointerFvmbP7NSErrorE_block_invoke_3(_QWORD *a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  _BOOL4 v6;
  id v7;
  uint64_t v8;
  _QWORD v9[4];
  id v10;
  id v11;
  uint64_t v12;

  v3 = a2;
  if (objc_msgSend(v3, "code"))
  {
    v4 = (void *)a1[4];
    v5 = a1[5];
    v6 = v4 != 0;
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 3221225472;
    v9[2] = ___ZN14ControllerImpl28startKeepAliveQueueForStreamEmU13block_pointerFvmbP7NSErrorE_block_invoke_4;
    v9[3] = &unk_1E3BEC248;
    v7 = v4;
    v8 = a1[7];
    v11 = v7;
    v12 = v8;
    v10 = v3;
    ControllerImpl::safeNotifyAlwaysAsync(v5, v6, v9);

  }
}

void sub_19B7FFD78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl28startKeepAliveQueueForStreamEmU13block_pointerFvmbP7NSErrorE_block_invoke_414(_QWORD *a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  _BOOL4 v6;
  id v7;
  uint64_t v8;
  id v9;
  _QWORD v10[4];
  id v11;
  id v12;
  uint64_t v13;

  v3 = a2;
  v4 = (void *)a1[4];
  v5 = a1[5];
  v6 = v4 != 0;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = ___ZN14ControllerImpl28startKeepAliveQueueForStreamEmU13block_pointerFvmbP7NSErrorE_block_invoke_2_415;
  v10[3] = &unk_1E3BEC248;
  v7 = v4;
  v8 = a1[7];
  v12 = v7;
  v13 = v8;
  v11 = v3;
  v9 = v3;
  ControllerImpl::safeNotifyAlwaysAsync(v5, v6, v10);

}

void sub_19B7FFE48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

uint64_t ___ZN14ControllerImpl28startKeepAliveQueueForStreamEmU13block_pointerFvmbP7NSErrorE_block_invoke_2_415(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, BOOL, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), objc_msgSend(*(id *)(a1 + 32), "code") == 0, *(_QWORD *)(a1 + 32));
}

uint64_t ___ZN14ControllerImpl28startKeepAliveQueueForStreamEmU13block_pointerFvmbP7NSErrorE_block_invoke_4(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, BOOL, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), objc_msgSend(*(id *)(a1 + 32), "code") == 0, *(_QWORD *)(a1 + 32));
}

void ControllerImpl::stopKeepAliveQueueForStream(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  id v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD v16[4];
  id v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;

  v5 = a3;
  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v21, *(_QWORD *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16));
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 3321888768;
  v16[2] = ___ZN14ControllerImpl27stopKeepAliveQueueForStreamEmU13block_pointerFvmbP7NSErrorE_block_invoke;
  v16[3] = &unk_1E3BEA488;
  v6 = v21;
  v18 = v21;
  v19 = v22;
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v20 = a2;
  v9 = v5;
  v17 = v9;
  ControllerImpl::safeWork(v6, v16, (uint64_t)"stopKeepAliveQueueForStream");

  v10 = v19;
  if (v19)
  {
    v11 = (unint64_t *)&v19->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = v22;
  if (v22)
  {
    v14 = (unint64_t *)&v22->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }

}

void sub_19B800030(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;
  uint64_t v14;
  uint64_t v15;

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v14);
  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v15 - 48);

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl27stopKeepAliveQueueForStreamEmU13block_pointerFvmbP7NSErrorE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  id v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  NSObject *v16;
  id v17;
  void *v18;
  uint64_t v19;
  _BOOL4 v20;
  id v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  _QWORD v26[4];
  id v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  uint64_t v32;
  _QWORD v33[4];
  id v34;
  uint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  uint8_t buf[4];
  const char *v39;
  __int16 v40;
  int v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  ControllerImpl::_lookupEngineForStreamID((ControllerImpl *)&v36, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 576), *(std::__shared_weak_count **)(*(_QWORD *)(a1 + 40) + 584), *(_QWORD *)(a1 + 56));
  v2 = v36;
  if (!v36)
  {
    if (kAVVCScope)
    {
      v16 = *(id *)kAVVCScope;
      if (!v16)
      {
LABEL_25:
        v18 = *(void **)(a1 + 32);
        v19 = *(_QWORD *)(a1 + 40);
        v20 = v18 != 0;
        v33[0] = MEMORY[0x1E0C809B0];
        v33[1] = 3221225472;
        v33[2] = ___ZN14ControllerImpl27stopKeepAliveQueueForStreamEmU13block_pointerFvmbP7NSErrorE_block_invoke_418;
        v33[3] = &unk_1E3BECB48;
        v21 = v18;
        v22 = *(_QWORD *)(a1 + 56);
        v34 = v21;
        v35 = v22;
        ControllerImpl::safeNotifyAlwaysAsync(v19, v20, v33);

        goto LABEL_26;
      }
    }
    else
    {
      v16 = MEMORY[0x1E0C81028];
      v17 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v39 = "ControllerImpl.mm";
      v40 = 1024;
      v41 = 6718;
      _os_log_impl(&dword_19B733000, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d stopKeepAliveQueueForStream: Nil recording engine", buf, 0x12u);
    }

    goto LABEL_25;
  }
  v26[0] = MEMORY[0x1E0C809B0];
  v26[1] = 3321888768;
  v26[2] = ___ZN14ControllerImpl27stopKeepAliveQueueForStreamEmU13block_pointerFvmbP7NSErrorE_block_invoke_2;
  v26[3] = &unk_1E3BEAB80;
  v28 = v36;
  v29 = v37;
  if (v37)
  {
    p_shared_owners = (unint64_t *)&v37->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = *(std::__shared_weak_count **)(a1 + 48);
  v30 = *(_QWORD *)(a1 + 40);
  v31 = v5;
  if (v5)
  {
    v6 = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = *(id *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 56);
  v27 = v8;
  v32 = v9;
  (*(void (**)(uint64_t, _QWORD *, const char *))(*(_QWORD *)v2 + 360))(v2, v26, "stopKeepAliveQueueForStream_block_invoke");

  v10 = v31;
  if (v31)
  {
    v11 = (unint64_t *)&v31->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = v29;
  if (v29)
  {
    v14 = (unint64_t *)&v29->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
LABEL_26:
  v23 = v37;
  if (v37)
  {
    v24 = (unint64_t *)&v37->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
}

void sub_19B800320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  uint64_t v23;

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100](v23 - 80);
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl27stopKeepAliveQueueForStreamEmU13block_pointerFvmbP7NSErrorE_block_invoke_418(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  id v3;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2F90], -11793, 0);
  v3 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v1 + 16))(v1, v2, 0);

}

void sub_19B8003CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl27stopKeepAliveQueueForStreamEmU13block_pointerFvmbP7NSErrorE_block_invoke_2(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  id v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  _QWORD v14[4];
  id v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  uint64_t v18;

  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 40) + 64))(*(_QWORD *)(a1 + 40), 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if (v2 && (int)objc_msgSend(v2, "sessionState") >= 4)
  {
    +[AVVCKeepAliveManager sharedManager](AVVCKeepAliveManager, "sharedManager");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "stopWithCompletion:", 0);

  }
  +[AVVCKeepAliveManager sharedManager](AVVCKeepAliveManager, "sharedManager");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 3321888768;
  v14[2] = ___ZN14ControllerImpl27stopKeepAliveQueueForStreamEmU13block_pointerFvmbP7NSErrorE_block_invoke_3;
  v14[3] = &unk_1E3BEA450;
  v6 = *(std::__shared_weak_count **)(a1 + 64);
  v16 = *(_QWORD *)(a1 + 56);
  v17 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v9 = *(id *)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 72);
  v15 = v9;
  v18 = v10;
  objc_msgSend(v5, "destroyWithCompletion:", v14);

  v11 = v17;
  if (v17)
  {
    v12 = (unint64_t *)&v17->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }

}

void sub_19B800528(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl27stopKeepAliveQueueForStreamEmU13block_pointerFvmbP7NSErrorE_block_invoke_3(_QWORD *a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  _BOOL4 v6;
  id v7;
  uint64_t v8;
  id v9;
  _QWORD v10[4];
  id v11;
  id v12;
  uint64_t v13;

  v3 = a2;
  v4 = (void *)a1[4];
  v5 = a1[5];
  v6 = v4 != 0;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = ___ZN14ControllerImpl27stopKeepAliveQueueForStreamEmU13block_pointerFvmbP7NSErrorE_block_invoke_4;
  v10[3] = &unk_1E3BEC248;
  v7 = v4;
  v8 = a1[7];
  v12 = v7;
  v13 = v8;
  v11 = v3;
  v9 = v3;
  ControllerImpl::safeNotifyAlwaysAsync(v5, v6, v10);

}

void sub_19B800604(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

uint64_t ___ZN14ControllerImpl27stopKeepAliveQueueForStreamEmU13block_pointerFvmbP7NSErrorE_block_invoke_4(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, BOOL, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), objc_msgSend(*(id *)(a1 + 32), "code") == 0, *(_QWORD *)(a1 + 32));
}

uint64_t ___ZN14ControllerImpl18getDeviceLatenciesEmU13block_pointerFvP12NSDictionaryP7NSErrorE_block_invoke(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

void ___ZN14ControllerImpl48setEnableInterruptionByRecordingClientsForStreamEmb_block_invoke(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  id v4;
  id v5;

  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 40) + 64))(*(_QWORD *)(a1 + 40), 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = *(unsigned __int8 *)(a1 + 56);
  v5 = 0;
  objc_msgSend(v2, "setPrefersBeingInterruptedByNextActiveRecordingClient:error:", v3, &v5);
  v4 = v5;

  if (v4)
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_msgSend(v4, "code");

}

void sub_19B800708(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void Initialize_Logging(void)
{
  unsigned int AppIntegerValue;
  char v1;
  unsigned int v2;
  NSObject *v3;
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  NSObject *v8;
  NSObject *v9;
  NSObject *v10;
  NSObject *v11;
  NSObject *v12;
  NSObject *v13;
  int AppBooleanValue;
  NSObject **v15;
  NSObject *v16;
  NSObject *v17;
  char v18;
  NSObject *v19;
  NSObject *v20;
  int v21;
  const char *v22;
  __int16 v23;
  int v24;
  __int16 v25;
  unsigned int v26;
  __int16 v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (Initialize_Logging(void)::once != -1)
    dispatch_once(&Initialize_Logging(void)::once, &__block_literal_global_5321);
  AppIntegerValue = CFPreferencesGetAppIntegerValue(CFSTR("debug_level"), CFSTR("com.apple.avfoundation.avvc"), 0);
  switch(AppIntegerValue)
  {
    case 0xFFFFFFFF:
      v1 = 1;
      v2 = 1;
      break;
    case 0u:
      if (kAVVCScope)
      {
        v3 = *(NSObject **)kAVVCScope;
        if (!*(_QWORD *)kAVVCScope)
          goto LABEL_14;
      }
      else
      {
        v3 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
      {
        v21 = 136315394;
        v22 = "AVVC_Log.cpp";
        v23 = 1024;
        v24 = 45;
        _os_log_impl(&dword_19B733000, v3, OS_LOG_TYPE_DEFAULT, "%25s:%-5d NOTE: AVVC Details logging is turned on by default for development", (uint8_t *)&v21, 0x12u);
      }
      goto LABEL_14;
    case 1u:
      v1 = 0;
      v2 = 4;
      break;
    case 2u:
LABEL_14:
      v1 = 0;
      v2 = 5;
      break;
    case 3u:
      v1 = 0;
      v2 = 6;
      break;
    default:
      v1 = 0;
      v2 = 7;
      break;
  }
  if (!CFPreferencesGetAppBooleanValue(CFSTR("debug_encoding"), CFSTR("com.apple.avfoundation.avvc"), 0))
  {
    v5 = 0;
    goto LABEL_24;
  }
  if (!kAVVCScope)
  {
    v4 = MEMORY[0x1E0C81028];
LABEL_21:
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      v21 = 136315394;
      v22 = "AVVC_Log.cpp";
      v23 = 1024;
      v24 = 53;
      _os_log_impl(&dword_19B733000, v4, OS_LOG_TYPE_INFO, "%25s:%-5d debug_encoding on", (uint8_t *)&v21, 0x12u);
    }
    goto LABEL_23;
  }
  v4 = *(NSObject **)kAVVCScope;
  if (*(_QWORD *)kAVVCScope)
    goto LABEL_21;
LABEL_23:
  v5 = 0x800000000;
LABEL_24:
  if (!CFPreferencesGetAppBooleanValue(CFSTR("debug_endpoint"), CFSTR("com.apple.avfoundation.avvc"), 0))
    goto LABEL_32;
  if (!kAVVCScope)
  {
    v6 = MEMORY[0x1E0C81028];
LABEL_29:
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      v21 = 136315394;
      v22 = "AVVC_Log.cpp";
      v23 = 1024;
      v24 = 54;
      _os_log_impl(&dword_19B733000, v6, OS_LOG_TYPE_INFO, "%25s:%-5d debug_endpoint on", (uint8_t *)&v21, 0x12u);
    }
    goto LABEL_31;
  }
  v6 = *(NSObject **)kAVVCScope;
  if (*(_QWORD *)kAVVCScope)
    goto LABEL_29;
LABEL_31:
  v5 |= 0x1000000000uLL;
LABEL_32:
  if (!CFPreferencesGetAppBooleanValue(CFSTR("debug_callbacks"), CFSTR("com.apple.avfoundation.avvc"), 0))
    goto LABEL_40;
  if (!kAVVCScope)
  {
    v7 = MEMORY[0x1E0C81028];
LABEL_37:
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      v21 = 136315394;
      v22 = "AVVC_Log.cpp";
      v23 = 1024;
      v24 = 55;
      _os_log_impl(&dword_19B733000, v7, OS_LOG_TYPE_INFO, "%25s:%-5d debug_callbacks on", (uint8_t *)&v21, 0x12u);
    }
    goto LABEL_39;
  }
  v7 = *(NSObject **)kAVVCScope;
  if (*(_QWORD *)kAVVCScope)
    goto LABEL_37;
LABEL_39:
  v5 |= 0x2000000000uLL;
LABEL_40:
  if (!CFPreferencesGetAppBooleanValue(CFSTR("debug_locking"), CFSTR("com.apple.avfoundation.avvc"), 0))
    goto LABEL_48;
  if (!kAVVCScope)
  {
    v8 = MEMORY[0x1E0C81028];
LABEL_45:
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      v21 = 136315394;
      v22 = "AVVC_Log.cpp";
      v23 = 1024;
      v24 = 56;
      _os_log_impl(&dword_19B733000, v8, OS_LOG_TYPE_INFO, "%25s:%-5d debug_locking on", (uint8_t *)&v21, 0x12u);
    }
    goto LABEL_47;
  }
  v8 = *(NSObject **)kAVVCScope;
  if (*(_QWORD *)kAVVCScope)
    goto LABEL_45;
LABEL_47:
  v5 |= 0x8000000000uLL;
LABEL_48:
  if (!CFPreferencesGetAppBooleanValue(CFSTR("debug_state"), CFSTR("com.apple.avfoundation.avvc"), 0))
    goto LABEL_56;
  if (!kAVVCScope)
  {
    v9 = MEMORY[0x1E0C81028];
LABEL_53:
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      v21 = 136315394;
      v22 = "AVVC_Log.cpp";
      v23 = 1024;
      v24 = 57;
      _os_log_impl(&dword_19B733000, v9, OS_LOG_TYPE_INFO, "%25s:%-5d debug_state on", (uint8_t *)&v21, 0x12u);
    }
    goto LABEL_55;
  }
  v9 = *(NSObject **)kAVVCScope;
  if (*(_QWORD *)kAVVCScope)
    goto LABEL_53;
LABEL_55:
  v5 |= 0x4000000000uLL;
LABEL_56:
  if (!CFPreferencesGetAppBooleanValue(CFSTR("debug_trace"), CFSTR("com.apple.avfoundation.avvc"), 0))
    goto LABEL_64;
  if (!kAVVCScope)
  {
    v10 = MEMORY[0x1E0C81028];
LABEL_61:
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      v21 = 136315394;
      v22 = "AVVC_Log.cpp";
      v23 = 1024;
      v24 = 58;
      _os_log_impl(&dword_19B733000, v10, OS_LOG_TYPE_INFO, "%25s:%-5d debug_trace on", (uint8_t *)&v21, 0x12u);
    }
    goto LABEL_63;
  }
  v10 = *(NSObject **)kAVVCScope;
  if (*(_QWORD *)kAVVCScope)
    goto LABEL_61;
LABEL_63:
  v5 |= 0x10000000000uLL;
LABEL_64:
  if (!CFPreferencesGetAppBooleanValue(CFSTR("debug_timing"), CFSTR("com.apple.avfoundation.avvc"), 0))
    goto LABEL_72;
  if (!kAVVCScope)
  {
    v11 = MEMORY[0x1E0C81028];
LABEL_69:
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      v21 = 136315394;
      v22 = "AVVC_Log.cpp";
      v23 = 1024;
      v24 = 59;
      _os_log_impl(&dword_19B733000, v11, OS_LOG_TYPE_INFO, "%25s:%-5d debug_timing on", (uint8_t *)&v21, 0x12u);
    }
    goto LABEL_71;
  }
  v11 = *(NSObject **)kAVVCScope;
  if (*(_QWORD *)kAVVCScope)
    goto LABEL_69;
LABEL_71:
  v5 |= 0x40000000000uLL;
LABEL_72:
  if (!CFPreferencesGetAppBooleanValue(CFSTR("debug_delegate"), CFSTR("com.apple.avfoundation.avvc"), 0))
    goto LABEL_80;
  if (!kAVVCScope)
  {
    v12 = MEMORY[0x1E0C81028];
LABEL_77:
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      v21 = 136315394;
      v22 = "AVVC_Log.cpp";
      v23 = 1024;
      v24 = 60;
      _os_log_impl(&dword_19B733000, v12, OS_LOG_TYPE_INFO, "%25s:%-5d debug_delegate on", (uint8_t *)&v21, 0x12u);
    }
    goto LABEL_79;
  }
  v12 = *(NSObject **)kAVVCScope;
  if (*(_QWORD *)kAVVCScope)
    goto LABEL_77;
LABEL_79:
  v5 |= 0x20000000000uLL;
LABEL_80:
  if (!CFPreferencesGetAppBooleanValue(CFSTR("debug_playback"), CFSTR("com.apple.avfoundation.avvc"), 0))
    goto LABEL_88;
  if (!kAVVCScope)
  {
    v13 = MEMORY[0x1E0C81028];
LABEL_85:
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      v21 = 136315394;
      v22 = "AVVC_Log.cpp";
      v23 = 1024;
      v24 = 61;
      _os_log_impl(&dword_19B733000, v13, OS_LOG_TYPE_INFO, "%25s:%-5d debug_playback on", (uint8_t *)&v21, 0x12u);
    }
    goto LABEL_87;
  }
  v13 = *(NSObject **)kAVVCScope;
  if (*(_QWORD *)kAVVCScope)
    goto LABEL_85;
LABEL_87:
  v5 |= 0x400000000uLL;
LABEL_88:
  AppBooleanValue = CFPreferencesGetAppBooleanValue(CFSTR("debug_deviceselect"), CFSTR("com.apple.avfoundation.avvc"), 0);
  v15 = (NSObject **)kAVVCScope;
  if (!AppBooleanValue)
    goto LABEL_96;
  if (!kAVVCScope)
  {
    v16 = MEMORY[0x1E0C81028];
LABEL_93:
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      v21 = 136315394;
      v22 = "AVVC_Log.cpp";
      v23 = 1024;
      v24 = 62;
      _os_log_impl(&dword_19B733000, v16, OS_LOG_TYPE_INFO, "%25s:%-5d debug_deviceselect on", (uint8_t *)&v21, 0x12u);
      v15 = (NSObject **)kAVVCScope;
    }
    goto LABEL_95;
  }
  v16 = *(NSObject **)kAVVCScope;
  if (*(_QWORD *)kAVVCScope)
    goto LABEL_93;
LABEL_95:
  v5 |= 0x80000000000uLL;
LABEL_96:
  if (v15)
  {
    v17 = *v15;
    if (!*v15)
      goto LABEL_102;
  }
  else
  {
    v17 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
  {
    v21 = 136315650;
    v22 = "AVVC_Log.cpp";
    v23 = 1024;
    v24 = 85;
    v25 = 1024;
    v26 = AppIntegerValue;
    _os_log_impl(&dword_19B733000, v17, OS_LOG_TYPE_INFO, "%25s:%-5d debug_level = %d", (uint8_t *)&v21, 0x18u);
    v15 = (NSObject **)kAVVCScope;
  }
LABEL_102:
  v18 = v1 ^ 1;
  if (!v5)
    v18 = 1;
  if ((v18 & 1) == 0)
  {
    if (v15)
    {
      v19 = *v15;
      if (!*v15)
        return;
    }
    else
    {
      v19 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      v21 = 136315394;
      v22 = "AVVC_Log.cpp";
      v23 = 1024;
      v24 = 87;
      _os_log_impl(&dword_19B733000, v19, OS_LOG_TYPE_DEFAULT, "%25s:%-5d resetting debug_level to Notify to allow scoped logging", (uint8_t *)&v21, 0x12u);
      v15 = (NSObject **)kAVVCScope;
    }
    v2 = 3;
  }
  if (!v15)
  {
    v20 = MEMORY[0x1E0C81028];
LABEL_116:
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
    {
      v21 = 136315906;
      v22 = "AVVC_Log.cpp";
      v23 = 1024;
      v24 = 90;
      v25 = 1024;
      v26 = v2;
      v27 = 2048;
      v28 = v5;
      _os_log_impl(&dword_19B733000, v20, OS_LOG_TYPE_DEBUG, "%25s:%-5d debug priority: %u scopes: 0x%llx", (uint8_t *)&v21, 0x22u);
    }
    goto LABEL_118;
  }
  v20 = *v15;
  if (*v15)
    goto LABEL_116;
LABEL_118:
  if (v2 >= 6)
    *(_QWORD *)(kAVVCScope + 8) = v5;
}

os_log_t ___Z18Initialize_Loggingv_block_invoke()
{
  _QWORD *v0;
  os_log_t result;

  v0 = (_QWORD *)operator new();
  v0[1] = 0;
  result = os_log_create("com.apple.avfaudio", "avvc");
  *v0 = result;
  kAVVCScope = (uint64_t)v0;
  return result;
}

void sub_19B801254(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19B8012FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19B801420(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19B8014C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19B80169C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void ___Z11GetImplTypev_block_invoke()
{
  void *v0;
  void *v1;
  NSObject *v2;
  id v3;
  int v4;
  const char *v5;
  __int16 v6;
  int v7;
  __int16 v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v0 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99EA0]), "initWithSuiteName:", CFSTR("com.apple.avfoundation.avvc"));
  objc_msgSend(v0, "objectForKey:", CFSTR("keepAliveType"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  if (v1)
    GetImplType(void)::type = objc_msgSend(v0, "integerForKey:", CFSTR("keepAliveType"));
  if (kAVVCScope)
  {
    v2 = *(id *)kAVVCScope;
    if (!v2)
      goto LABEL_10;
  }
  else
  {
    v2 = MEMORY[0x1E0C81028];
    v3 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    v4 = 136315650;
    v5 = "AVVCKeepAliveManager.mm";
    v6 = 1024;
    v7 = 40;
    v8 = 1024;
    v9 = GetImplType(void)::type;
    _os_log_impl(&dword_19B733000, v2, OS_LOG_TYPE_DEBUG, "%25s:%-5d Using AVVCKeepAliveImpl of type %d", (uint8_t *)&v4, 0x18u);
  }

LABEL_10:
}

void sub_19B8017F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19B801D10(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19B802858(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::recursive_mutex *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  int v23;
  void *v24;
  void *v25;

  if (v23)
    std::recursive_mutex::unlock(a9);
  ElapsedTime::~ElapsedTime((ElapsedTime *)&a23);
  _Unwind_Resume(a1);
}

void sub_19B802E5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  void *v15;
  std::recursive_mutex *v16;
  void *v17;
  void *v18;
  void *v19;
  int v20;
  va_list va;

  va_start(va, a15);

  if (v20)
    std::recursive_mutex::unlock(v16);
  ElapsedTime::~ElapsedTime((ElapsedTime *)va);

  _Unwind_Resume(a1);
}

void sub_19B80324C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  std::recursive_mutex *v13;
  int v14;

  if (v14)
    std::recursive_mutex::unlock(v13);
  ElapsedTime::~ElapsedTime((ElapsedTime *)&a13);
  _Unwind_Resume(a1);
}

void sub_19B803728(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  void *v6;
  void *v7;
  va_list va;

  va_start(va, a6);

  ElapsedTime::~ElapsedTime((ElapsedTime *)va);
  _Unwind_Resume(a1);
}

void sub_19B8044BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::recursive_mutex *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  int v27;

  if (v27)
    std::recursive_mutex::unlock(a9);
  ElapsedTime::~ElapsedTime((ElapsedTime *)&a27);
  _Unwind_Resume(a1);
}

void sub_19B8055E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  std::recursive_mutex *v15;
  void *v16;
  void *v17;
  int v18;
  va_list va;

  va_start(va, a15);

  if (v18)
    std::recursive_mutex::unlock(v15);
  ElapsedTime::~ElapsedTime((ElapsedTime *)va);
  _Unwind_Resume(a1);
}

void sub_19B805C98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  std::recursive_mutex *v9;
  void *v10;
  int v11;
  va_list va;

  va_start(va, a9);

  if (v11)
    std::recursive_mutex::unlock(v9);
  ElapsedTime::~ElapsedTime((ElapsedTime *)va);
  _Unwind_Resume(a1);
}

void sub_19B8060E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  std::recursive_mutex *v7;
  void *v8;
  void *v9;
  int v10;
  va_list va;

  va_start(va, a7);

  if (v10)
    std::recursive_mutex::unlock(v7);
  ElapsedTime::~ElapsedTime((ElapsedTime *)va);
  _Unwind_Resume(a1);
}

void sub_19B80661C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  void *v8;
  std::recursive_mutex *v9;
  void *v10;
  int v11;
  va_list va;

  va_start(va, a7);

  if (v11)
    std::recursive_mutex::unlock(v9);
  ElapsedTime::~ElapsedTime((ElapsedTime *)va);

  _Unwind_Resume(a1);
}

void sub_19B806940(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  void *v6;
  void *v7;
  std::recursive_mutex *v8;
  void *v9;
  int v10;
  va_list va;

  va_start(va, a6);

  if (v10)
    std::recursive_mutex::unlock(v8);
  ElapsedTime::~ElapsedTime((ElapsedTime *)va);

  _Unwind_Resume(a1);
}

void sub_19B806E38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, std::recursive_mutex *a11, int a12, int a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  void *v24;

  ElapsedTime::~ElapsedTime((ElapsedTime *)&a24);
  if (a13)
    std::recursive_mutex::unlock(a11);
  _Unwind_Resume(a1);
}

void sub_19B8072F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  std::recursive_mutex *v7;
  void *v8;
  void *v9;
  int v10;
  va_list va;

  va_start(va, a7);

  ElapsedTime::~ElapsedTime((ElapsedTime *)va);
  if (v10)
    std::recursive_mutex::unlock(v7);
  _Unwind_Resume(a1);
}

void sub_19B807548(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{

  _Unwind_Resume(a1);
}

void sub_19B807B64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, std::recursive_mutex *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,char a27)
{
  void *v27;
  int v28;

  _Block_object_dispose(&a19, 8);
  if (v28)
    std::recursive_mutex::unlock(a11);
  _Unwind_Resume(a1);
}

void sub_19B808048(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;
  void *v2;
  void *v3;
  void *v4;
  int v5;

  if (v5)
    std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19B808764(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19B808AA4(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_19B808C68(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_19B808E2C(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_19B808FF0(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_19B8091B4(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_19B809378(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_19B809540(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_19B80973C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19B809950(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19B809B20(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_19B809DF0(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;
  void *v2;
  void *v3;
  int v4;

  if (v4)
    std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19B809FC4(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_19B80A194(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_19B80A368(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  ElapsedTime::~ElapsedTime((ElapsedTime *)va);
  _Unwind_Resume(a1);
}

void sub_19B80A538(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_19B80A70C(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_19B80A7EC(_Unwind_Exception *exception_object)
{
  std::recursive_mutex *v1;
  int v2;

  if (v2)
    std::recursive_mutex::unlock(v1);
  _Unwind_Resume(exception_object);
}

void sub_19B80A8E0(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;
  void *v2;
  int v3;

  if (v3)
    std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19B80A9E0(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;
  void *v2;
  int v3;

  if (v3)
    std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19B80ABB8(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_19B80ACC0(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;
  void *v2;
  int v3;

  if (v3)
    std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19B80AF08(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19B80B650(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, std::recursive_mutex *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19)
{

  if (a10)
    std::recursive_mutex::unlock(a11);
  _Unwind_Resume(a1);
}

void sub_19B80B8B0(_Unwind_Exception *exception_object)
{
  std::recursive_mutex *v1;
  int v2;

  if (v2)
    std::recursive_mutex::unlock(v1);
  _Unwind_Resume(exception_object);
}

void sub_19B80BA8C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19B80BC74(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_19B80BE2C(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_19B80BF34(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;
  void *v2;
  int v3;

  if (v3)
    std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19B80C0AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19B80C210(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  std::recursive_mutex *v10;
  void *v11;
  int v12;

  if (v12)
    std::recursive_mutex::unlock(v10);

  _Unwind_Resume(a1);
}

void sub_19B80C588(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;
  void *v2;
  int v3;

  if (v3)
    std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19B80C764(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_19B80C8EC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19B80CA6C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19B80CDB8(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;
  void *v2;
  void *v3;
  int v4;

  if (v4)
    std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19B80D044(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::recursive_mutex *v9;
  int v10;

  ElapsedTime::~ElapsedTime((ElapsedTime *)&a9);
  if (v10)
    std::recursive_mutex::unlock(v9);
  _Unwind_Resume(a1);
}

void sub_19B80D3B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  std::recursive_mutex *v5;
  void *v6;
  int v7;
  va_list va;

  va_start(va, a5);

  ElapsedTime::~ElapsedTime((ElapsedTime *)va);
  if (v7)
    std::recursive_mutex::unlock(v5);
  _Unwind_Resume(a1);
}

void sub_19B80D73C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  std::recursive_mutex *v5;
  void *v6;
  int v7;
  va_list va;

  va_start(va, a5);

  ElapsedTime::~ElapsedTime((ElapsedTime *)va);
  if (v7)
    std::recursive_mutex::unlock(v5);
  _Unwind_Resume(a1);
}

void sub_19B80DAC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  std::recursive_mutex *v5;
  void *v6;
  int v7;
  va_list va;

  va_start(va, a5);

  ElapsedTime::~ElapsedTime((ElapsedTime *)va);
  if (v7)
    std::recursive_mutex::unlock(v5);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__5668(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__5669(uint64_t a1)
{

}

void AVVCAudioCapturer_AudioDiagnostics::~AVVCAudioCapturer_AudioDiagnostics(AVVCAudioCapturer_AudioDiagnostics *this)
{
  AVVCAudioCapturer_AudioDiagnostics::~AVVCAudioCapturer_AudioDiagnostics(this);
  JUMPOUT(0x1A1AC5BD4);
}

{
  uint64_t v2;
  NSObject *v3;
  id v4;
  NSObject *v5;
  id v6;
  uint64_t v7;
  NSObject *v8;
  id v9;
  int v10;
  const char *v11;
  __int16 v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = &off_1E3BE9928;
  v2 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (kAVVCScope)
  {
    v3 = *(id *)kAVVCScope;
    if (!v3)
      goto LABEL_10;
  }
  else
  {
    v3 = MEMORY[0x1E0C81028];
    v4 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v10 = 136315394;
    v11 = "AVVCAudioCapturer.mm";
    v12 = 1024;
    v13 = 168;
    _os_log_impl(&dword_19B733000, v3, OS_LOG_TYPE_DEFAULT, "%25s:%-5d ~AVVCAudioCapturer_AudioDiagnostics(): mCapturer is reset to NULL", (uint8_t *)&v10, 0x12u);
  }

LABEL_10:
  if (kAVVCScope)
  {
    v5 = *(id *)kAVVCScope;
    if (!v5)
      goto LABEL_17;
  }
  else
  {
    v5 = MEMORY[0x1E0C81028];
    v6 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    v10 = 136315394;
    v11 = "AVVCAudioCapturer.mm";
    v12 = 1024;
    v13 = 169;
    _os_log_impl(&dword_19B733000, v5, OS_LOG_TYPE_DEBUG, "%25s:%-5d ~AVVCAudioCapturer_AudioDiagnostics(): destroyed", (uint8_t *)&v10, 0x12u);
  }

LABEL_17:
  v7 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  *(_QWORD *)this = off_1E3BE78F8;
  if (kAVVCScope)
  {
    v8 = *(id *)kAVVCScope;
    if (!v8)
      goto LABEL_26;
  }
  else
  {
    v8 = MEMORY[0x1E0C81028];
    v9 = MEMORY[0x1E0C81028];
  }
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    v10 = 136315394;
    v11 = "AVVCAudioCapturer.mm";
    v12 = 1024;
    v13 = 31;
    _os_log_impl(&dword_19B733000, v8, OS_LOG_TYPE_DEBUG, "%25s:%-5d ~AVVCAudioCapturer(): destroyed", (uint8_t *)&v10, 0x12u);
  }

LABEL_26:
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

void AVVCAudioCapturer_AudioDiagnostics::setup(AVVCAudioCapturer_AudioDiagnostics *this, unint64_t a2, AudioStreamBasicDescription *a3, AudioStreamBasicDescription *a4)
{
  id v8;
  int v9;
  size_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  std::string *v16;
  std::string::size_type size;
  std::string *v18;
  __int128 v19;
  std::string *v20;
  __int128 v21;
  void *v22;
  std::string *v23;
  std::string::size_type v24;
  std::string *v25;
  __int128 v26;
  void **v27;
  void **v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  NSObject *v32;
  id v33;
  uint64_t v34;
  id v35;
  std::string v36;
  std::string v37;
  std::string v38;
  std::string v39;
  void *__p[2];
  int64_t v41;
  void *v42[2];
  char v43;
  _BYTE __str[28];
  __int16 v45;
  uint64_t v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  if (!*((_BYTE *)this + 32))
    return;
  NSHomeDirectory();
  v8 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  snprintf(__str, 0x400uLL, "%s/Library/Logs/CrashReporter/Assistant/AVVCCapture/", (const char *)objc_msgSend(v8, "UTF8String"));

  std::string::basic_string[abi:ne180100]<0>(v42, __str);
  v9 = *((char *)this + 31);
  if (v9 >= 0)
    v10 = *((unsigned __int8 *)this + 31);
  else
    v10 = *((_QWORD *)this + 2);
  v11 = v10 + 1;
  if (v10 + 1 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v11 >= 0x17)
  {
    v13 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v13 = v11 | 7;
    v14 = v13 + 1;
    v12 = (char *)operator new(v13 + 1);
    v38.__r_.__value_.__l.__size_ = v10 + 1;
    v38.__r_.__value_.__r.__words[2] = v14 | 0x8000000000000000;
    v38.__r_.__value_.__r.__words[0] = (std::string::size_type)v12;
    goto LABEL_15;
  }
  memset(&v38, 0, sizeof(v38));
  *((_BYTE *)&v38.__r_.__value_.__s + 23) = v10 + 1;
  if ((v11 & 0x80u) == 0)
    v12 = (char *)&v38;
  else
    v12 = 0;
  if (v10)
  {
LABEL_15:
    if (v9 >= 0)
      v15 = (char *)this + 8;
    else
      v15 = (char *)*((_QWORD *)this + 1);
    memmove(v12, v15, v10);
  }
  *(_WORD *)&v12[v10] = 45;
  std::to_string(&v37, a2);
  if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v16 = &v37;
  else
    v16 = (std::string *)v37.__r_.__value_.__r.__words[0];
  if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v37.__r_.__value_.__r.__words[2]);
  else
    size = v37.__r_.__value_.__l.__size_;
  v18 = std::string::append(&v38, (const std::string::value_type *)v16, size);
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v39.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  v20 = std::string::append(&v39, "-", 1uLL);
  v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  *(_QWORD *)&__str[16] = *((_QWORD *)&v20->__r_.__value_.__l + 2);
  *(_OWORD *)__str = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  objc_msgSend(MEMORY[0x1E0CB3898], "processInfo");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  std::to_string(&v36, objc_msgSend(v22, "processIdentifier"));
  if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v23 = &v36;
  else
    v23 = (std::string *)v36.__r_.__value_.__r.__words[0];
  if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v24 = HIBYTE(v36.__r_.__value_.__r.__words[2]);
  else
    v24 = v36.__r_.__value_.__l.__size_;
  v25 = std::string::append((std::string *)__str, (const std::string::value_type *)v23, v24);
  v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  v41 = v25->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v26;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);

  if ((__str[23] & 0x80000000) != 0)
    operator delete(*(void **)__str);
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v39.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (a3->mFormatID == 1869641075)
    a3->mFramesPerPacket = 320;
  if (v43 >= 0)
    v27 = v42;
  else
    v27 = (void **)v42[0];
  if (v41 >= 0)
    v28 = __p;
  else
    v28 = (void **)__p[0];
  if (NewAudioCapturer(AudioCapturerOptions,char const*,char const*,unsigned int,AudioStreamBasicDescription const*,AudioStreamBasicDescription const&)::once != -1)
    dispatch_once(&NewAudioCapturer(AudioCapturerOptions,char const*,char const*,unsigned int,AudioStreamBasicDescription const*,AudioStreamBasicDescription const&)::once, &__block_literal_global_5798);
  if (NewAudioCapturer(AudioCapturerOptions,char const*,char const*,unsigned int,AudioStreamBasicDescription const*,AudioStreamBasicDescription const&)::sImplFunction)
    v29 = NewAudioCapturer(AudioCapturerOptions,char const*,char const*,unsigned int,AudioStreamBasicDescription const*,AudioStreamBasicDescription const&)::sImplFunction(278802, v27, v28, 1667327590, a4, a3);
  else
    v29 = 0;
  v30 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = v29;
  if (v30)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
    v29 = *((_QWORD *)this + 5);
  }
  if (v29)
  {
    if (kAVVCScope)
    {
      v31 = *(id *)kAVVCScope;
      if (!v31)
        goto LABEL_71;
    }
    else
    {
      v31 = (id)MEMORY[0x1E0C81028];
      v33 = MEMORY[0x1E0C81028];
    }
    v32 = v31;
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
    {
      v34 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 56))(*((_QWORD *)this + 5));
      *(_DWORD *)__str = 136315906;
      *(_QWORD *)&__str[4] = "AVVCAudioCapturer.mm";
      *(_WORD *)&__str[12] = 1024;
      *(_DWORD *)&__str[14] = 185;
      *(_WORD *)&__str[18] = 2048;
      *(_QWORD *)&__str[20] = a2;
      v45 = 2080;
      v46 = v34;
      _os_log_impl(&dword_19B733000, v32, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Dumping Audio for stream(%lu) at %s", __str, 0x26u);
    }

  }
  else
  {
    if (kAVVCScope)
    {
      v32 = *(id *)kAVVCScope;
      if (!v32)
        goto LABEL_71;
    }
    else
    {
      v32 = MEMORY[0x1E0C81028];
      v35 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__str = 136315394;
      *(_QWORD *)&__str[4] = "AVVCAudioCapturer.mm";
      *(_WORD *)&__str[12] = 1024;
      *(_DWORD *)&__str[14] = 188;
      _os_log_impl(&dword_19B733000, v32, OS_LOG_TYPE_ERROR, "%25s:%-5d Error setting up audio captures", __str, 0x12u);
    }
  }

LABEL_71:
  if (SHIBYTE(v41) < 0)
    operator delete(__p[0]);
  if (v43 < 0)
    operator delete(v42[0]);
}

void sub_19B80E118(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  void *v52;

  if (a40 < 0)
    operator delete(__p);
  if (a46 < 0)
    operator delete(a41);
  _Unwind_Resume(a1);
}

void AVVCAudioCapturer_AudioDiagnostics::logCaptures(AVVCAudioCapturer_AudioDiagnostics *this, AVAudioBuffer *a2, uint64_t a3)
{
  AVAudioBuffer *v5;
  AVAudioBuffer *v6;
  void *v7;
  int v8;
  NSObject *v10;
  NSObject *v11;
  AVAudioBuffer *v12;
  int v13;
  NSObject *v14;
  NSObject *v15;
  AVAudioBuffer *v16;
  int v17;
  NSObject *v18;
  id v19;
  int v20;
  const char *v21;
  __int16 v22;
  int v23;
  __int16 v24;
  int v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = v5;
  if (*((_BYTE *)this + 32) && v5 && *((_QWORD *)this + 5))
  {
    -[AVAudioBuffer format](v5, "format");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = *(_DWORD *)(objc_msgSend(v7, "streamDescription") + 8);

    if (v8 == 1936745848 || v8 == 1869641075)
    {
      if (kAVVCScope)
      {
        if ((*(_BYTE *)(kAVVCScope + 8) & 1) != 0)
        {
          v10 = *(id *)kAVVCScope;
          if (v10)
          {
            v11 = v10;
            if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
            {
              v20 = 136315394;
              v21 = "AVVCAudioCapturer.mm";
              v22 = 1024;
              v23 = 206;
              _os_log_impl(&dword_19B733000, v11, OS_LOG_TYPE_DEBUG, "%25s:%-5d AVVCAudioCapturer:logCapture: logging non-lpcm audio", (uint8_t *)&v20, 0x12u);
            }

          }
        }
      }
      v12 = v6;
      v13 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(**((_QWORD **)this + 5) + 16))(*((_QWORD *)this + 5), -[AVAudioBuffer data](v12, "data"), a3, -[AVAudioBuffer packetDescriptions](v12, "packetDescriptions"), -[AVAudioBuffer packetCount](v12, "packetCount"));
    }
    else
    {
      if (v8 != 1819304813)
        goto LABEL_32;
      if (kAVVCScope)
      {
        if ((*(_BYTE *)(kAVVCScope + 8) & 1) != 0)
        {
          v14 = *(id *)kAVVCScope;
          if (v14)
          {
            v15 = v14;
            if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
            {
              v20 = 136315394;
              v21 = "AVVCAudioCapturer.mm";
              v22 = 1024;
              v23 = 201;
              _os_log_impl(&dword_19B733000, v15, OS_LOG_TYPE_DEBUG, "%25s:%-5d AVVCAudioCapturer:logCapture: logging lpcm audio", (uint8_t *)&v20, 0x12u);
            }

          }
        }
      }
      v16 = v6;
      v13 = (*(uint64_t (**)(_QWORD, uint64_t, const AudioBufferList *, uint64_t))(**((_QWORD **)this + 5) + 24))(*((_QWORD *)this + 5), -[AVAudioBuffer frameLength](v16, "frameLength"), -[AVAudioBuffer audioBufferList](v16, "audioBufferList"), 1);
    }
    v17 = v13;

    if (v17)
    {
      if (kAVVCScope)
      {
        v18 = *(id *)kAVVCScope;
        if (!v18)
          goto LABEL_32;
      }
      else
      {
        v18 = MEMORY[0x1E0C81028];
        v19 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        v20 = 136315650;
        v21 = "AVVCAudioCapturer.mm";
        v22 = 1024;
        v23 = 211;
        v24 = 1024;
        v25 = v17;
        _os_log_impl(&dword_19B733000, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d Error while logging audio: %d", (uint8_t *)&v20, 0x18u);
      }

    }
  }
LABEL_32:

}

void sub_19B80E4E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void AVVCAudioCapturer_AudioDiagnostics::dispose(AVVCAudioCapturer_AudioDiagnostics *this)
{
  uint64_t v2;
  NSObject *v3;
  id v4;
  int v5;
  const char *v6;
  __int16 v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 32))
  {
    v2 = *((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = 0;
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    if (kAVVCScope)
    {
      v3 = *(id *)kAVVCScope;
      if (!v3)
        return;
    }
    else
    {
      v3 = MEMORY[0x1E0C81028];
      v4 = MEMORY[0x1E0C81028];
    }
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      v5 = 136315394;
      v6 = "AVVCAudioCapturer.mm";
      v7 = 1024;
      v8 = 220;
      _os_log_impl(&dword_19B733000, v3, OS_LOG_TYPE_DEFAULT, "%25s:%-5d mCapturer is reset to NULL", (uint8_t *)&v5, 0x12u);
    }

  }
}

uint64_t NewAVVCAudioCapturer(uint64_t a1)
{
  uint64_t v2;
  int v3;
  NSObject *v4;
  id v5;
  std::string __p;
  std::string __str;
  uint8_t buf[4];
  const char *v10;
  __int16 v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (!CFPreferencesGetAppBooleanValue(CFSTR("dump_input"), CFSTR("com.apple.avfoundation.avvc"), 0))
    return 0;
  v2 = operator new();
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  v3 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__str, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    __str = __p;
  *(_QWORD *)v2 = off_1E3BE78F8;
  *(_QWORD *)(v2 + 8) = 0;
  *(_QWORD *)(v2 + 16) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  std::string::operator=((std::string *)(v2 + 8), &__str);
  *(_BYTE *)(v2 + 32) = CFPreferencesGetAppBooleanValue(CFSTR("dump_input"), CFSTR("com.apple.avfoundation.avvc"), 0) != 0;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  *(_QWORD *)v2 = &off_1E3BE9928;
  *(_QWORD *)(v2 + 40) = 0;
  if (!kAVVCScope)
  {
    v4 = MEMORY[0x1E0C81028];
    v5 = MEMORY[0x1E0C81028];
    goto LABEL_15;
  }
  v4 = *(id *)kAVVCScope;
  if (v4)
  {
LABEL_15:
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      v10 = "AVVCAudioCapturer.mm";
      v11 = 1024;
      v12 = 162;
      _os_log_impl(&dword_19B733000, v4, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AVVCAudioCapturer_AudioDiagnostics(): mCapturer is reset to NULL", buf, 0x12u);
    }

  }
  if (v3 < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v2;
}

void sub_19B80EA94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;

  operator delete(__p);
  MEMORY[0x1A1AC5BD4](v18, 0x10B3C40D5544858);
  _Unwind_Resume(a1);
}

void sub_19B80F28C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19B80F390(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_19B80F4A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19B80F57C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19B80F694(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19B80F790(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19B80F88C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19B80F958(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19B80FACC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19B80FD44(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19B80FE3C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19B80FEA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)AVAUPresetEvent;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_19B8100FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19B810288(_Unwind_Exception *a1)
{
  void *v1;
  id *v2;

  MEMORY[0x1A1AC5BD4](v2, 0x10A0C400E62B68ELL);
  _Unwind_Resume(a1);
}

void sub_19B810814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, void *a13, void *a14)
{
  void *v14;
  void *v15;
  id *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  MEMORY[0x1A1AC5BD4](v16, 0x10A0C400E62B68ELL);
  _Unwind_Resume(a1);
}

void sub_19B810B60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13)
{
  void *v13;

  _Unwind_Resume(a1);
}

void sub_19B810C34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)AVAudioFile;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_19B810CF8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19B810E8C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19B8110D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<AVAudioFileImpl>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  OpaqueExtAudioFile *v3;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = *(OpaqueExtAudioFile **)(v2 + 8);
    if (v3)
    {
      ExtAudioFileDispose(v3);
      *(_QWORD *)(v2 + 8) = 0;
    }

    JUMPOUT(0x1A1AC5BD4);
  }
  return result;
}

uint64_t AVAudioFileImpl::CheckClientFormatSet(AVAudioFileImpl *this)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  _OWORD v6[2];
  uint64_t v7;

  if (*((_BYTE *)this + 16))
    return *((unsigned int *)this + 5);
  *((_BYTE *)this + 16) = 1;
  v3 = objc_msgSend(*((id *)this + 3), "streamDescription");
  v4 = *(_QWORD *)(v3 + 32);
  v5 = *(_OWORD *)(v3 + 16);
  v6[0] = *(_OWORD *)v3;
  v6[1] = v5;
  v7 = v4;
  result = ExtAudioFileSetProperty(*((ExtAudioFileRef *)this + 1), 0x63666D74u, 0x28u, v6);
  *((_DWORD *)this + 5) = result;
  return result;
}

uint64_t _AVAE_CheckAndReturnErr(int a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, _QWORD *a6)
{
  uint64_t v6;
  NSObject *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  int v20;
  __int16 v21;
  char *v22;
  __int16 v23;
  int v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if ((a4 & 1) != 0)
    return 0;
  v6 = a5;
  if (AVAudioEngineLogCategory(void)::once != -1)
    dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
  v11 = objc_retainAutorelease(*(id *)AVAudioEngineLogCategory(void)::category);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136316418;
    v18 = "AVAEInternal.h";
    v19 = 1024;
    v20 = 83;
    v21 = 2080;
    v22 = "AVAudioFile.mm";
    v23 = 1024;
    v24 = a1;
    v25 = 2080;
    v26 = a2;
    v27 = 2080;
    v28 = a3;
    _os_log_impl(&dword_19B733000, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
  }
  if (a6)
  {
    v12 = (void *)MEMORY[0x1E0CB35C8];
    v13 = (void *)MEMORY[0x1E0C99D80];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", a3);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "dictionaryWithObjectsAndKeys:", v14, CFSTR("false condition"), 0);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "errorWithDomain:code:userInfo:", CFSTR("com.apple.coreaudio.avfaudio"), (int)v6, v15);
    *a6 = (id)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), a3);
  }
  return v6;
}

void sub_19B8115D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t fileTypeFromExtension(NSString *a1)
{
  _DWORD *v1;
  uint64_t v2;
  unsigned int v4;
  UInt32 outDataSize;
  NSString *inSpecifier;

  inSpecifier = a1;
  outDataSize = 0;
  if (AudioFileGetGlobalInfoSize(0x74657874u, 8u, &inSpecifier, &outDataSize))
    goto LABEL_4;
  v1 = malloc_type_malloc(outDataSize, 0xA01074FAuLL);
  if (AudioFileGetGlobalInfo(0x74657874u, 8u, &inSpecifier, &outDataSize, v1))
  {
    free(v1);
LABEL_4:
    v2 = 0;
    goto LABEL_5;
  }
  if (outDataSize > 3)
  {
    v4 = *v1;
    free(v1);
    if (v4 == 1095321158)
      v2 = 1095321155;
    else
      v2 = v4;
  }
  else
  {
    free(v1);
    v2 = 1667327590;
  }
LABEL_5:

  return v2;
}

void sub_19B8116D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

uint64_t asbdFromSettingsAndFileType2(NSDictionary *a1, NSArray *a2, int a3, AudioStreamBasicDescription *a4)
{
  NSDictionary *v7;
  NSArray *v8;
  id v9;
  AudioFormatID v10;
  AudioFormatID v11;
  id v12;
  double v13;
  double v14;
  double v15;
  id v16;
  UInt32 v17;
  AudioFormatID mFormatID;
  int *v19;
  id v20;
  AudioFormatFlags mFormatFlags;
  AudioFormatFlags v22;
  int v23;
  id v24;
  unsigned int v25;
  unint64_t v26;
  AudioFormatFlags v27;
  unsigned int v28;
  UInt32 v29;
  AudioFormatFlags v30;
  id v31;
  int v32;
  UInt32 v33;
  id v34;
  uint64_t v35;
  int v36;
  UInt32 v37;
  char *v38;
  uint64_t v39;
  char *v41;
  uint64_t v42;
  NSString outDataSize;

  v7 = a1;
  v8 = a2;
  *(_QWORD *)&a4->mBitsPerChannel = 0;
  *(_OWORD *)&a4->mSampleRate = 0u;
  *(_OWORD *)&a4->mBytesPerPacket = 0u;
  LODWORD(outDataSize) = 0;
  v9 = -[NSDictionary objectForKey:](v7, "objectForKey:", CFSTR("AVFormatIDKey"));
  v10 = 1819304813;
  v11 = 1819304813;
  if (v9)
  {
    if ((objc_opt_respondsToSelector() & 1) == 0)
      goto LABEL_83;
    v11 = objc_msgSend(v9, "unsignedIntegerValue");
    LODWORD(outDataSize) = v11;
  }
  a4->mFormatID = v11;
  v12 = -[NSDictionary objectForKey:](v7, "objectForKey:", CFSTR("AVSampleRateKey"));
  if (v12)
  {
    if ((objc_opt_respondsToSelector() & 1) == 0)
      goto LABEL_83;
    objc_msgSend(v12, "doubleValue");
    v14 = v13;
    v15 = 8000.0;
    if (v14 >= 8000.0)
    {
      v15 = v14;
      if (v14 > 192000.0)
        v15 = 192000.0;
    }
  }
  else if (a4->mFormatID == 1768710755)
  {
    v15 = 8000.0;
  }
  else
  {
    if (AudioSessionClass(void)::once != -1)
      dispatch_once(&AudioSessionClass(void)::once, &__block_literal_global_146);
    objc_msgSend((id)objc_msgSend((id)AudioSessionClass(void)::gAudioSessionClass, "sharedInstance"), "setActive:error:", 1, 0);
    if (AudioSessionClass(void)::once != -1)
      dispatch_once(&AudioSessionClass(void)::once, &__block_literal_global_146);
    objc_msgSend((id)objc_msgSend((id)AudioSessionClass(void)::gAudioSessionClass, "sharedInstance"), "sampleRate");
    if (v15 == 0.0)
      v15 = 44100.0;
  }
  a4->mSampleRate = v15;
  v16 = -[NSDictionary objectForKey:](v7, "objectForKey:", CFSTR("AVNumberOfChannelsKey"));
  if (v16)
  {
    if ((objc_opt_respondsToSelector() & 1) == 0)
      goto LABEL_83;
    v17 = objc_msgSend(v16, "unsignedIntegerValue");
    LODWORD(outDataSize) = v17;
    if (v17)
    {
      if (v17 > 0x400)
        goto LABEL_104;
    }
    else
    {
      v17 = 1;
      LODWORD(outDataSize) = 1;
    }
    goto LABEL_27;
  }
  mFormatID = a4->mFormatID;
  if (mFormatID != 1768710755)
  {
    if (!v8)
    {
      if (AudioSessionClass(void)::once != -1)
        dispatch_once(&AudioSessionClass(void)::once, &__block_literal_global_146);
      objc_msgSend((id)objc_msgSend((id)AudioSessionClass(void)::gAudioSessionClass, "sharedInstance"), "setActive:error:", 1, 0);
      if (AudioSessionClass(void)::once != -1)
        dispatch_once(&AudioSessionClass(void)::once, &__block_literal_global_146);
      v28 = objc_msgSend((id)objc_msgSend((id)AudioSessionClass(void)::gAudioSessionClass, "sharedInstance"), "inputNumberOfChannels");
      if (v28 <= 1)
        v29 = 1;
      else
        v29 = v28;
      a4->mChannelsPerFrame = v29;
LABEL_28:
      mFormatID = a4->mFormatID;
      if (mFormatID == 1634492771)
      {
        v24 = -[NSDictionary objectForKey:](v7, "objectForKey:", CFSTR("AVEncoderBitDepthHintKey"));
        if (v24 && (objc_opt_respondsToSelector() & 1) != 0)
        {
          v25 = objc_msgSend(v24, "unsignedIntegerValue");
          HIDWORD(v26) = v25;
          LODWORD(v26) = v25 - 16;
          switch((v26 >> 2))
          {
            case 0u:
              v27 = 1;
              goto LABEL_64;
            case 1u:
              v27 = 2;
              goto LABEL_64;
            case 2u:
              v27 = 3;
              goto LABEL_64;
            case 4u:
              v27 = 4;
LABEL_64:
              a4->mFormatFlags = v27;
              break;
            default:
              NSLog(CFSTR("ALAC does not support %@ bit depth."), objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", v25));
              break;
          }
        }
        goto LABEL_94;
      }
      if (mFormatID != 1819304813)
        goto LABEL_95;
      v20 = -[NSDictionary objectForKey:](v7, "objectForKey:", CFSTR("AVLinearPCMIsNonInterleaved"));
      if (v20)
      {
        if ((objc_opt_respondsToSelector() & 1) != 0)
        {
          LODWORD(outDataSize) = objc_msgSend(v20, "unsignedIntegerValue");
          if ((_DWORD)outDataSize)
          {
            if (a4->mChannelsPerFrame != 1)
              NSLog(CFSTR("Audio files cannot be non-interleaved. Ignoring setting AVLinearPCMIsNonInterleaved YES."));
          }
        }
      }
      mFormatFlags = a4->mFormatFlags;
      v22 = mFormatFlags | 8;
      a4->mFormatFlags = mFormatFlags | 8;
      if (a3 > 1380333107)
      {
        if (a3 == 1667327590)
        {
          if (getUInt32ForKey(v7, &outDataSize, (unsigned int *)&outDataSize + 1, v19))
          {
            v22 = a4->mFormatFlags;
            if ((_DWORD)outDataSize)
            {
              v30 = v22 | 2;
              goto LABEL_67;
            }
          }
          else
          {
            v22 = a4->mFormatFlags;
          }
        }
      }
      else
      {
        if (a3 <= 1113011763)
        {
          if (a3 == 1095321155)
          {
LABEL_56:
            v30 = mFormatFlags | 0xA;
            goto LABEL_67;
          }
          v23 = 1095321158;
          goto LABEL_55;
        }
        if (a3 != 1113011764)
        {
          v23 = 1315264596;
LABEL_55:
          if (a3 == v23)
            goto LABEL_56;
        }
      }
      v30 = v22 & 0xFFFFFFFD;
LABEL_67:
      a4->mFormatFlags = v30;
      v31 = -[NSDictionary objectForKey:](v7, "objectForKey:", CFSTR("AVLinearPCMIsFloatKey"));
      if (v31 && (objc_opt_respondsToSelector() & 1) != 0 && objc_msgSend(v31, "unsignedIntegerValue"))
      {
        if (a3 > 1463170149)
        {
          if (a3 == 1463170150 || a3 == 1667327590)
            goto LABEL_78;
          v32 = 1463899717;
        }
        else
        {
          if (a3 == 1095321155 || a3 == 1113011764)
            goto LABEL_78;
          v32 = 1380333108;
        }
        if (a3 == v32)
        {
LABEL_78:
          a4->mFormatFlags |= 1u;
          v33 = 32;
          a4->mBitsPerChannel = 32;
LABEL_93:
          v37 = (v33 >> 3) * a4->mChannelsPerFrame;
          a4->mBytesPerPacket = v37;
          a4->mFramesPerPacket = 1;
          a4->mBytesPerFrame = v37;
LABEL_94:
          mFormatID = a4->mFormatID;
LABEL_95:
          if (mFormatID == 1819304813)
            goto LABEL_96;
          goto LABEL_103;
        }
      }
      v34 = -[NSDictionary objectForKey:](v7, "objectForKey:", CFSTR("AVLinearPCMBitDepthKey"));
      if (!v34)
      {
        v33 = 16;
        a4->mBitsPerChannel = 16;
        goto LABEL_85;
      }
      if ((objc_opt_respondsToSelector() & 1) != 0)
      {
        v33 = (objc_msgSend(v34, "unsignedIntegerValue") + 7) & 0xFFFFFFF8;
        a4->mBitsPerChannel = v33;
        if (v33 - 33 < 0xFFFFFFE0)
          goto LABEL_104;
LABEL_85:
        if (a3 > 1463170149)
        {
          if (a3 != 1463899717)
          {
            v36 = 1463170150;
LABEL_90:
            if (a3 != v36)
              goto LABEL_92;
          }
        }
        else if (a3 != 1113011764)
        {
          v36 = 1380333108;
          goto LABEL_90;
        }
        if (v33 == 8)
          goto LABEL_93;
LABEL_92:
        a4->mFormatFlags |= 4u;
        goto LABEL_93;
      }
LABEL_83:
      v35 = 4294967246;
      goto LABEL_105;
    }
    v17 = -[NSArray count](v8, "count");
LABEL_27:
    a4->mChannelsPerFrame = v17;
    goto LABEL_28;
  }
  a4->mChannelsPerFrame = 1;
LABEL_103:
  HIDWORD(outDataSize) = 0;
  if (AudioFormatGetPropertyInfo(0x61636F66u, 0, 0, (UInt32 *)&outDataSize + 1))
    goto LABEL_104;
  v41 = (char *)malloc_type_malloc(HIDWORD(outDataSize), 0xC8C8A89DuLL);
  if (AudioFormatGetProperty(0x61636F66u, 0, 0, (UInt32 *)&outDataSize + 1, v41) || HIDWORD(outDataSize) < 4)
  {
LABEL_111:
    v35 = 1718449215;
    free(v41);
    goto LABEL_105;
  }
  v42 = 0;
  while (*(_DWORD *)&v41[v42] != mFormatID)
  {
    v42 += 4;
    if ((HIDWORD(outDataSize) & 0xFFFFFFFC) == v42)
      goto LABEL_111;
  }
  free(v41);
  v10 = a4->mFormatID;
LABEL_96:
  LODWORD(outDataSize) = 0;
  HIDWORD(outDataSize) = a3;
  if (AudioFileGetGlobalInfoSize(0x666D6964u, 4u, (char *)&outDataSize + 4, (UInt32 *)&outDataSize))
  {
LABEL_104:
    v35 = 1718449215;
    goto LABEL_105;
  }
  v38 = (char *)malloc_type_malloc(outDataSize, 0x2F800E29uLL);
  if (AudioFileGetGlobalInfo(0x666D6964u, 4u, (char *)&outDataSize + 4, (UInt32 *)&outDataSize, v38)
    || outDataSize < 4)
  {
LABEL_102:
    free(v38);
    goto LABEL_104;
  }
  v39 = 0;
  while (*(_DWORD *)&v38[v39] != v10)
  {
    v39 += 4;
    if ((outDataSize & 0xFFFFFFFC) == v39)
      goto LABEL_102;
  }
  free(v38);
  v35 = 0;
LABEL_105:

  return v35;
}

void sub_19B811E9C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t AVAudioFileImpl::SetFormats(AVAudioFileImpl *this, AVAudioCommonFormat a2, uint64_t a3, const AudioStreamBasicDescription *a4, AVAudioChannelLayout *a5)
{
  AVAudioChannelLayout *v9;
  AVAudioFormat *v10;
  uint64_t v11;
  void *v12;
  AVAudioFormat *v13;
  void *v14;

  v9 = a5;
  v10 = -[AVAudioFormat initWithStreamDescription:channelLayout:]([AVAudioFormat alloc], "initWithStreamDescription:channelLayout:", a4, v9);
  v11 = 1718449215;
  v12 = (void *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = v10;

  if (*((_QWORD *)this + 5))
  {
    if (v9)
      v13 = -[AVAudioFormat initWithCommonFormat:sampleRate:interleaved:channelLayout:]([AVAudioFormat alloc], "initWithCommonFormat:sampleRate:interleaved:channelLayout:", a2, a3, v9, a4->mSampleRate);
    else
      v13 = -[AVAudioFormat initWithCommonFormat:sampleRate:channels:interleaved:]([AVAudioFormat alloc], "initWithCommonFormat:sampleRate:channels:interleaved:", a2, a4->mChannelsPerFrame, a3, a4->mSampleRate);
    v14 = (void *)*((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = v13;

    if (*((_QWORD *)this + 3))
      v11 = 0;
    else
      v11 = 1718449215;
  }

  return v11;
}

void sub_19B811F9C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void AVAudioFileImpl::ReadMagicCookie(AVAudioFileImpl *this)
{
  uint64_t Property;
  size_t v3;
  void *v4;
  id v5;
  void *v6;
  UInt32 __sz;
  UInt32 __sz_4;
  AudioFileID outPropertyData;

  _AVAE_Check("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAudioFile.mm", 252, "ReadMagicCookie", "_fileFormat", *((_QWORD *)this + 5) != 0);
  if (!*((_DWORD *)this + 14))
  {
    _AVAE_Check("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAudioFile.mm", 256, "ReadMagicCookie", "_processingFormat", *((_QWORD *)this + 3) != 0);
    AVAudioFileImpl::CheckClientFormatSet(this);
  }
  outPropertyData = 0;
  __sz_4 = 8;
  Property = ExtAudioFileGetProperty(*((ExtAudioFileRef *)this + 1), 0x6166696Cu, &__sz_4, &outPropertyData);
  if (_AVAE_CheckNoErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAudioFile.mm", 263, (uint64_t)"ReadMagicCookie", (uint64_t)"ExtAudioFileGetProperty(_extAudioFile, kExtAudioFileProperty_AudioFile, &propSize, &fileID)", Property, 0))
  {
    __sz = 0;
    if (!AudioFileGetPropertyInfo(outPropertyData, 0x6D676963u, &__sz, 0))
    {
      v3 = __sz;
      if (__sz)
      {
        v4 = operator new(__sz);
        bzero(v4, v3);
        if (!AudioFileGetProperty(outPropertyData, 0x6D676963u, &__sz, v4))
        {
          v5 = objc_alloc(MEMORY[0x1E0C99D50]);
          v6 = (void *)objc_msgSend(v5, "initWithBytes:length:", v4, __sz);
          objc_msgSend(*((id *)this + 5), "setMagicCookie:", v6);

        }
        operator delete(v4);
      }
    }
  }
}

void sub_19B81211C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t AVAudioFileImpl::GetAudioConverter(OpaqueExtAudioFile *a1, _QWORD *a2)
{
  uint64_t Property;
  UInt32 ioPropertyDataSize;
  uint64_t outPropertyData;

  outPropertyData = 0;
  ioPropertyDataSize = 8;
  Property = ExtAudioFileGetProperty(a1, 0x61636E76u, &ioPropertyDataSize, &outPropertyData);
  if (_AVAE_CheckNoErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAudioFile.mm", 286, (uint64_t)"GetAudioConverter", (uint64_t)"ExtAudioFileGetProperty(_extAudioFile, kExtAudioFileProperty_AudioConverter, &size, &converter)", Property, a2))
  {
    return outPropertyData;
  }
  else
  {
    return 0;
  }
}

void AVAudioFileImpl::setBitRate(uint64_t a1, void *a2, _QWORD *a3)
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  OpaqueAudioConverter *AudioConverter;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  int inPropertyData;

  v5 = a2;
  objc_msgSend(v5, "objectForKey:", CFSTR("AVEncoderBitRateKey"));
  v6 = objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "objectForKey:", CFSTR("AVEncoderBitRatePerChannelKey"));
  v7 = objc_claimAutoreleasedReturnValue();
  if (v6 | v7)
  {
    AudioConverter = (OpaqueAudioConverter *)AVAudioFileImpl::GetAudioConverter(*(OpaqueExtAudioFile **)(a1 + 8), a3);
    if (AudioConverter)
    {
      if (v6)
      {
        inPropertyData = objc_msgSend((id)v6, "intValue");
        v9 = AudioConverterSetProperty(AudioConverter, 0x62726174u, 4u, &inPropertyData);
        _AVAE_CheckNoErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAudioFile.mm", 413, (uint64_t)"setBitRate", (uint64_t)"AudioConverterSetProperty(converter, kAudioConverterEncodeBitRate, sizeof(UInt32), &bitRate)", v9, a3);
      }
      else if (v7)
      {
        v10 = objc_msgSend(0, "intValue");
        v12 = objc_msgSend(*(id *)(a1 + 40), "channelCount") * v10;
        v11 = AudioConverterSetProperty(AudioConverter, 0x62726174u, 4u, &v12);
        _AVAE_CheckNoErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAudioFile.mm", 416, (uint64_t)"setBitRate", (uint64_t)"AudioConverterSetProperty(converter, kAudioConverterEncodeBitRate, sizeof(UInt32), &bitRatePerChannel)", v11, a3);
      }
    }
  }

}

void sub_19B812304(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void AVAudioFileImpl::_initCommonReading(uint64_t a1, AVAudioCommonFormat a2, uint64_t a3, _QWORD *a4)
{
  uint64_t Property;
  _DWORD *v9;
  AVAudioChannelLayout *v10;
  uint64_t v11;
  unsigned int v12;
  UInt32 ioPropertyDataSize;
  AudioStreamBasicDescription outPropertyData;

  ioPropertyDataSize = 40;
  Property = ExtAudioFileGetProperty(*(ExtAudioFileRef *)(a1 + 8), 0x66666D74u, &ioPropertyDataSize, &outPropertyData);
  if (!_AVAE_CheckNoErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAudioFile.mm", 160, (uint64_t)"_initCommonReading", (uint64_t)"ExtAudioFileGetProperty(_extAudioFile, kExtAudioFileProperty_FileDataFormat, &propSize, &fileASBD)", Property, a4))return;
  v9 = 0;
  if (!ExtAudioFileGetPropertyInfo(*(ExtAudioFileRef *)(a1 + 8), 0x66636C6Fu, &ioPropertyDataSize, 0))
  {
    v9 = malloc_type_malloc(ioPropertyDataSize, 0xD1017A3uLL);
    if (!ExtAudioFileGetProperty(*(ExtAudioFileRef *)(a1 + 8), 0x66636C6Fu, &ioPropertyDataSize, v9))
    {
      v12 = *v9 & 0xFFFF0000;
      if (v12 == -65536 || v12 == 9633792)
      {
        if (outPropertyData.mChannelsPerFrame == (unsigned __int16)*v9)
          goto LABEL_6;
      }
      else if (v12 || v9[2])
      {
        goto LABEL_6;
      }
    }
  }
  free(v9);
  if (outPropertyData.mChannelsPerFrame < 3)
  {
    v10 = 0;
    v9 = 0;
    goto LABEL_8;
  }
  v9 = malloc_type_calloc(1uLL, 0x20uLL, 0x1000040E0EAB150uLL);
  *v9 = outPropertyData.mChannelsPerFrame | 0x930000;
LABEL_6:
  v10 = -[AVAudioChannelLayout initWithLayout:]([AVAudioChannelLayout alloc], "initWithLayout:", v9);
LABEL_8:
  free(v9);
  v11 = AVAudioFileImpl::SetFormats((AVAudioFileImpl *)a1, a2, a3, &outPropertyData, v10);
  if (_AVAE_CheckNoErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAudioFile.mm", 200, (uint64_t)"_initCommonReading", (uint64_t)"SetFormats(format, interleaved, fileASBD, avacl)", v11, a4))
  {
    AVAudioFileImpl::ReadMagicCookie((AVAudioFileImpl *)a1);
  }

}

void sub_19B81250C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19B8126A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19B812734(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19B8127B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19B81284C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19B8128E0(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;
  std::recursive_mutex *v2;

  std::recursive_mutex::unlock(v2);
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19B8129AC(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;
  std::recursive_mutex *v2;

  std::recursive_mutex::unlock(v2);
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19B812A44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19B812AC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19B812B3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19B812BC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19B812C44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19B812CDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19B812D58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19B812DE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19B812E68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19B813134(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  _Unwind_Resume(exception_object);
}

void sub_19B8132F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  _Unwind_Resume(exception_object);
}

void sub_19B813380(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19B8133FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19B8135CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  _Unwind_Resume(exception_object);
}

void sub_19B8136C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19B813748(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19B81383C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19B8138BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19B8139B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19B813A28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19B813B1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19B813B94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19B813C88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19B813D00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19B813DF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19B813E74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19B813F68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19B813FE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19B814100(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19B814194(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19B814288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19B814308(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19B8143FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19B81447C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void AVAudioNodeImplBase::GetAttachAndEngineLock(AVAudioNodeImplBase *this, uint64_t a2)
{
  std::recursive_mutex *v4;
  uint64_t v5;
  uint64_t v6;
  std::chrono::nanoseconds __ns;

  v4 = (std::recursive_mutex *)(a2 + 104);
  while (1)
  {
    std::recursive_mutex::lock(v4);
    v5 = *(_QWORD *)(a2 + 8);
    if (!v5)
    {
      v6 = 0;
      goto LABEL_7;
    }
    v6 = v5 + 112;
    if (std::recursive_mutex::try_lock((std::recursive_mutex *)(v5 + 112)))
      break;
    std::recursive_mutex::unlock(v4);
    __ns.__rep_ = 5000000;
    std::this_thread::sleep_for (&__ns);
  }
  LOBYTE(v5) = 1;
LABEL_7:
  *(_QWORD *)this = v4;
  *((_BYTE *)this + 8) = 1;
  *((_QWORD *)this + 2) = v6;
  *((_BYTE *)this + 24) = v5;
}

uint64_t AVAudioNodeImplBase::GetMixingImpl(AVAudioNodeImplBase *this)
{
  uint64_t result;
  uint64_t v3;

  result = *((_QWORD *)this + 7);
  if (!result)
  {
    result = operator new();
    *(_QWORD *)result = &off_1E3BE7698;
    *(_QWORD *)(result + 8) = this;
    *(_DWORD *)(result + 16) = 1065353216;
    *(_QWORD *)(result + 28) = 0;
    *(_QWORD *)(result + 20) = 0;
    *(_DWORD *)(result + 36) = 1065353216;
    *(_QWORD *)(result + 48) = 0;
    *(_QWORD *)(result + 56) = 0;
    *(_QWORD *)(result + 40) = 0;
    v3 = *((_QWORD *)this + 7);
    *((_QWORD *)this + 7) = result;
    if (v3)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
      return *((_QWORD *)this + 7);
    }
  }
  return result;
}

uint64_t AVAudioNodeImplBase::GetMixingDestination(AVAudioNodeImplBase *this, AVAudioNode *a2, unsigned int a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t buf[4];
  const char *v11;
  __int16 v12;
  int v13;
  __int16 v14;
  char *v15;
  __int16 v16;
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  const char *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (!a2)
  {
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v6 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316418;
      v11 = "AVAEInternal.h";
      v12 = 1024;
      v13 = 71;
      v14 = 2080;
      v15 = "AVAudioNode.mm";
      v16 = 1024;
      v17 = 887;
      v18 = 2080;
      v19 = "GetMixingDestination";
      v20 = 2080;
      v21 = "inMixerAVNode";
      _os_log_impl(&dword_19B733000, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "inMixerAVNode");
  }
  v7 = *((_QWORD *)this + 8);
  if (v7
    && *(_QWORD *)(v7 + 16)
    && (v8 = std::__tree<std::__value_type<std::pair<AVAudioNode *,unsigned int>,AVAudioMixingDestination *>,std::__map_value_compare<std::pair<AVAudioNode *,unsigned int>,std::__value_type<std::pair<AVAudioNode *,unsigned int>,AVAudioMixingDestination *>,std::less<std::pair<AVAudioNode *,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<AVAudioNode *,unsigned int>,AVAudioMixingDestination *>>>::find<std::pair<AVAudioNode *,unsigned int>>(v7, (unint64_t)a2, a3), v7 + 8 != v8))
  {
    return *(_QWORD *)(v8 + 48);
  }
  else
  {
    return 0;
  }
}

uint64_t std::__tree<std::__value_type<std::pair<AVAudioNode *,unsigned int>,AVAudioMixingDestination *>,std::__map_value_compare<std::pair<AVAudioNode *,unsigned int>,std::__value_type<std::pair<AVAudioNode *,unsigned int>,AVAudioMixingDestination *>,std::less<std::pair<AVAudioNode *,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<AVAudioNode *,unsigned int>,AVAudioMixingDestination *>>>::find<std::pair<AVAudioNode *,unsigned int>>(uint64_t a1, unint64_t a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _BOOL4 v8;
  BOOL v9;
  uint64_t *v10;
  unint64_t v11;
  _BOOL4 v12;

  v5 = *(_QWORD *)(a1 + 8);
  v3 = a1 + 8;
  v4 = v5;
  if (!v5)
    return v3;
  v6 = v3;
  do
  {
    v7 = *(_QWORD *)(v4 + 32);
    v9 = v7 == a2;
    v8 = v7 < a2;
    if (v9)
      v8 = *(_DWORD *)(v4 + 40) < a3;
    v9 = !v8;
    if (v8)
      v10 = (uint64_t *)(v4 + 8);
    else
      v10 = (uint64_t *)v4;
    if (v9)
      v6 = v4;
    v4 = *v10;
  }
  while (*v10);
  if (v6 == v3)
    return v3;
  v11 = *(_QWORD *)(v6 + 32);
  v9 = v11 == a2;
  v12 = v11 > a2;
  if (v9)
    v12 = *(_DWORD *)(v6 + 40) > a3;
  if (v12)
    return v3;
  return v6;
}

void sub_19B814A64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  _Unwind_Resume(exception_object);
}

void sub_19B814AEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19B814B84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19B814C84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19B814D78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19B814E64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19B814F50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19B815048(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19B815148(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19B815264(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19B815378(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19B815478(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void AVAudioNodeImplBase::DidAttachToEngine(AVAudioNodeImplBase *this, AVAudioEngine *a2)
{
  std::recursive_mutex *v4;

  v4 = (std::recursive_mutex *)((char *)this + 104);
  std::recursive_mutex::lock((std::recursive_mutex *)((char *)this + 104));
  *((_QWORD *)this + 1) = -[AVAudioEngine implementation](a2, "implementation");
  std::recursive_mutex::unlock(v4);
}

void sub_19B815540(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void AVAudioNodeImplBase::DidDetachFromEngine(AVAudioNodeImplBase *this, AVAudioEngine *a2)
{
  std::recursive_mutex *v3;

  v3 = (std::recursive_mutex *)((char *)this + 104);
  std::recursive_mutex::lock((std::recursive_mutex *)((char *)this + 104));
  *((_QWORD *)this + 1) = 0;
  std::recursive_mutex::unlock(v3);
}

AVAudioNodeImplBase *AVAudioNodeImplBase::AVAE_CheckNodeHasEngine(AVAudioNodeImplBase *this)
{
  NSObject *v1;
  uint8_t buf[4];
  const char *v3;
  __int16 v4;
  int v5;
  __int16 v6;
  char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  const char *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (!*((_QWORD *)this + 1))
  {
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v1 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316418;
      v3 = "AVAEInternal.h";
      v4 = 1024;
      v5 = 71;
      v6 = 2080;
      v7 = "AVAudioNodeImpl.h";
      v8 = 1024;
      v9 = 78;
      v10 = 2080;
      v11 = "AVAE_CheckNodeHasEngine";
      v12 = 2080;
      v13 = "_engine != nil";
      _os_log_impl(&dword_19B733000, v1, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    return (AVAudioNodeImplBase *)objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "_engine != nil");
  }
  return this;
}

uint64_t AVAudioNodeImplBase::GetOutputFormat(AVAudioNodeImplBase *this, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = (*(uint64_t (**)(AVAudioNodeImplBase *))(*(_QWORD *)this + 40))(this);
  v5 = (*(uint64_t (**)(AVAudioNodeImplBase *, uint64_t))(*(_QWORD *)this + 240))(this, a2);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v4 + 40))(v4, 0, v5);
}

uint64_t AVAudioNodeImplBase::GetOutputFormat(AVAudioNodeImplBase *this)
{
  return (*(uint64_t (**)(AVAudioNodeImplBase *))(*(_QWORD *)this + 48))(this);
}

uint64_t AVAudioNodeImplBase::SetOutputFormat(AVAudioNodeImplBase *this, uint64_t a2, AVAudioFormat *a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = (*(uint64_t (**)(AVAudioNodeImplBase *))(*(_QWORD *)this + 40))(this);
  v7 = (*(uint64_t (**)(AVAudioNodeImplBase *, uint64_t))(*(_QWORD *)this + 240))(this, a2);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, AVAudioFormat *))(*(_QWORD *)v6 + 48))(v6, 0, v7, a3);
}

uint64_t AVAudioNodeImplBase::GetInputFormat(AVAudioNodeImplBase *this, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = (*(uint64_t (**)(AVAudioNodeImplBase *))(*(_QWORD *)this + 40))(this);
  v5 = (*(uint64_t (**)(AVAudioNodeImplBase *, uint64_t))(*(_QWORD *)this + 240))(this, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 40))(v4, 1, v5);
}

uint64_t AVAudioNodeImplBase::SetInputFormat(AVAudioNodeImplBase *this, uint64_t a2, AVAudioFormat *a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = (*(uint64_t (**)(AVAudioNodeImplBase *))(*(_QWORD *)this + 40))(this);
  v7 = (*(uint64_t (**)(AVAudioNodeImplBase *, uint64_t))(*(_QWORD *)this + 240))(this, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, AVAudioFormat *))(*(_QWORD *)v6 + 48))(v6, 1, v7, a3);
}

uint64_t AVAudioNodeImplBase::Reset(AVAudioNodeImplBase *this)
{
  uint64_t v1;

  v1 = (*(uint64_t (**)(AVAudioNodeImplBase *))(*(_QWORD *)this + 40))(this);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 56))(v1);
}

uint64_t AVAudioNodeImplBase::SetParameter(AVAudioNodeImplBase *this, uint64_t a2, uint64_t a3, uint64_t a4, float a5)
{
  uint64_t v9;

  v9 = (*(uint64_t (**)(AVAudioNodeImplBase *))(*(_QWORD *)this + 40))(this);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, float))(*(_QWORD *)v9 + 120))(v9, a2, a3, a4, a5);
}

uint64_t AVAudioNodeImplBase::GetParameter(AVAudioNodeImplBase *this, uint64_t a2, uint64_t a3, uint64_t a4, float *a5)
{
  uint64_t v9;

  v9 = (*(uint64_t (**)(AVAudioNodeImplBase *))(*(_QWORD *)this + 40))(this);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, float *))(*(_QWORD *)v9 + 128))(v9, a2, a3, a4, a5);
}

BOOL AVAudioNodeImplBase::SetProperty(AVAudioNodeImplBase *this, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5, uint64_t a6)
{
  uint64_t v11;

  v11 = (*(uint64_t (**)(AVAudioNodeImplBase *))(*(_QWORD *)this + 40))(this);
  return (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t, const void *, uint64_t))(*(_QWORD *)v11 + 232))(v11, a2, a3, a4, a5, a6) == 0;
}

BOOL AVAudioNodeImplBase::GetProperty(AVAudioNodeImplBase *this, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, int a6)
{
  uint64_t v10;
  int v12;

  v12 = a6;
  v10 = (*(uint64_t (**)(AVAudioNodeImplBase *))(*(_QWORD *)this + 40))(this);
  return (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t, void *, int *))(*(_QWORD *)v10 + 240))(v10, a2, a3, a4, a5, &v12) == 0;
}

uint64_t AVAudioNodeImplBase::SetPropertyAndReturnError(AVAudioNodeImplBase *this, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5, uint64_t a6)
{
  uint64_t v11;

  v11 = (*(uint64_t (**)(AVAudioNodeImplBase *))(*(_QWORD *)this + 40))(this);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, const void *, uint64_t))(*(_QWORD *)v11 + 232))(v11, a2, a3, a4, a5, a6);
}

uint64_t AVAudioNodeImplBase::AddStreamFormatObserver(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  NSObject *v6;
  uint8_t buf[4];
  const char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  char *v12;
  __int16 v13;
  int v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  int v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v3 + 256))(v3, 8, *a2, a2[1]);
  if ((_DWORD)result)
  {
    v5 = result;
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v6 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316674;
      v8 = "AVAEInternal.h";
      v9 = 1024;
      v10 = 104;
      v11 = 2080;
      v12 = "AVAudioNode.mm";
      v13 = 1024;
      v14 = 976;
      v15 = 2080;
      v16 = "AddStreamFormatObserver";
      v17 = 2080;
      v18 = "AUI().AddV2PropertyListener(kAudioUnitProperty_StreamFormat, observer.mProc, observer.mUserData)";
      v19 = 1024;
      v20 = v5;
      _os_log_impl(&dword_19B733000, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d [%s:%d:%s: (%s): error %d", buf, 0x3Cu);
    }
    return objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("error %d"), v5);
  }
  return result;
}

uint64_t AVAudioNodeImplBase::RemoveStreamFormatObserver(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  NSObject *v6;
  uint8_t buf[4];
  const char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  char *v12;
  __int16 v13;
  int v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  int v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v3 + 264))(v3, 8, *a2, a2[1]);
  if ((_DWORD)result)
  {
    v5 = result;
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v6 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316674;
      v8 = "AVAEInternal.h";
      v9 = 1024;
      v10 = 104;
      v11 = 2080;
      v12 = "AVAudioNode.mm";
      v13 = 1024;
      v14 = 981;
      v15 = 2080;
      v16 = "RemoveStreamFormatObserver";
      v17 = 2080;
      v18 = "AUI().RemoveV2PropertyListener(kAudioUnitProperty_StreamFormat, observer.mProc, observer.mUserData)";
      v19 = 1024;
      v20 = v5;
      _os_log_impl(&dword_19B733000, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d [%s:%d:%s: (%s): error %d", buf, 0x3Cu);
    }
    return objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("error %d"), v5);
  }
  return result;
}

uint64_t AVAudioNodeImplBase::ConnectInput(AVAudioNodeImplBase *this, uint64_t a2, AVAudioNodeImplBase *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  _QWORD *v16;
  unint64_t v17;
  int v18;
  int v19;
  uint64_t *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;

  (*(void (**)(AVAudioNodeImplBase *))(*(_QWORD *)this + 32))(this);
  v8 = (*(uint64_t (**)(AVAudioNodeImplBase *))(*(_QWORD *)this + 40))(this);
  if (a3)
    v9 = (*(uint64_t (**)(AVAudioNodeImplBase *))(*(_QWORD *)a3 + 40))(a3);
  else
    v9 = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 224))(v8, 1, a2, v9, a4);
  v10 = *((_QWORD *)this + 4);
  if ((int)v10 <= (int)a2)
  {
    while (1)
    {
      v12 = *((_QWORD *)this + 5);
      if (v10 == v12 << 6)
        break;
LABEL_34:
      *((_QWORD *)this + 4) = v10 + 1;
      v11 = *((_QWORD *)this + 3);
      *(_QWORD *)(v11 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v10);
      v10 = *((_QWORD *)this + 4);
      if ((int)v10 > (int)a2)
        goto LABEL_35;
    }
    if ((uint64_t)(v10 + 1) < 0)
      goto LABEL_38;
    if (v10 > 0x3FFFFFFFFFFFFFFELL)
    {
      v13 = 0x7FFFFFFFFFFFFFFFLL;
      if (v10 >= 0x7FFFFFFFFFFFFFFFLL)
      {
LABEL_33:
        v10 = *((_QWORD *)this + 4);
        goto LABEL_34;
      }
    }
    else
    {
      v13 = v12 << 7;
      if (v13 <= v10 + 64)
        v13 = v10 + 64;
      if (v10 >= v13)
        goto LABEL_33;
      if ((v13 & 0x8000000000000000) != 0)
LABEL_38:
        std::vector<EExtAudioGraphNodeState>::__throw_length_error[abi:ne180100]();
    }
    v14 = ((v13 - 1) >> 6) + 1;
    v15 = (uint64_t *)operator new(8 * v14);
    v16 = (_QWORD *)*((_QWORD *)this + 3);
    v17 = (v10 - 1) >> 6;
    if (v10 < 0x41)
      v17 = 0;
    v15[v17] = 0;
    if (v10 > 0x3F || (v10 & 0x3F) != 0)
    {
      v18 = 0;
      v19 = 0;
      v20 = v15;
      v21 = v16;
      do
      {
        v22 = 1 << v18;
        if (((*v21 >> v19) & 1) != 0)
          v23 = *v20 | v22;
        else
          v23 = *v20 & ~v22;
        *v20 = v23;
        v21 += v19 == 63;
        if (v19 == 63)
          v19 = 0;
        else
          ++v19;
        v20 += v18 == 63;
        if (v18 == 63)
          v18 = 0;
        else
          ++v18;
      }
      while (v21 != &v16[v10 >> 6] || v19 != (v10 & 0x3F));
    }
    *(_QWORD *)&v24 = v10;
    *((_QWORD *)&v24 + 1) = v14;
    *((_QWORD *)this + 3) = v15;
    *((_OWORD *)this + 2) = v24;
    if (v16)
      operator delete(v16);
    goto LABEL_33;
  }
  v11 = *((_QWORD *)this + 3);
LABEL_35:
  *(_QWORD *)(v11 + (((unint64_t)a2 >> 3) & 0x1FFFFFF8)) |= 1 << a2;
  v25 = (*(uint64_t (**)(AVAudioNodeImplBase *))(*(_QWORD *)this + 40))(this);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v25 + 64))(v25, 1, a2, 1);
  if (a3)
  {
    v26 = (*(uint64_t (**)(AVAudioNodeImplBase *))(*(_QWORD *)a3 + 40))(a3);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v26 + 64))(v26, 0, a4, 1);
  }
  return 1;
}

uint64_t AVAudioNodeImplBase::DisconnectInput(AVAudioNodeImplBase *this, uint64_t a2, AVAudioNodeImplBase *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  (*(void (**)(AVAudioNodeImplBase *))(*(_QWORD *)this + 32))(this);
  v8 = (*(uint64_t (**)(AVAudioNodeImplBase *))(*(_QWORD *)this + 40))(this);
  if (a3)
    v9 = (*(uint64_t (**)(AVAudioNodeImplBase *))(*(_QWORD *)a3 + 40))(a3);
  else
    v9 = 0;
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 224))(v8, 0, a2, v9, a4);
  if (*((_QWORD *)this + 4) > (unint64_t)a2)
    *(_QWORD *)(*((_QWORD *)this + 3) + (((unint64_t)a2 >> 3) & 0x1FFFFFF8)) &= ~(1 << a2);
  v10 = (*(uint64_t (**)(AVAudioNodeImplBase *))(*(_QWORD *)this + 40))(this);
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v10 + 64))(v10, 1, a2, 0);
  if (a3)
  {
    v11 = (*(uint64_t (**)(AVAudioNodeImplBase *))(*(_QWORD *)a3 + 40))(a3);
    (*(void (**)(uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v11 + 64))(v11, 0, a4, 0);
  }
  return 1;
}

double AVAudioNodeImplBase::NodeDidInitialize(AVAudioNodeImplBase *this)
{
  uint64_t v2;
  double result;

  *((_BYTE *)this + 48) = 1;
  v2 = (*(uint64_t (**)(AVAudioNodeImplBase *))(*(_QWORD *)this + 40))(this);
  result = fmax((*(double (**)(uint64_t))(*(_QWORD *)v2 + 168))(v2), 0.0);
  *((double *)this + 11) = result;
  return result;
}

AVAudioNodeImplBase *AVAudioNodeImplBase::NodeWillUninitialize(AVAudioNodeImplBase *this)
{
  *((_BYTE *)this + 48) = 0;
  *((_QWORD *)this + 11) = 0;
  return this;
}

void AVAudioNodeImplBase::AudioUnitWillBeDisposed(AVAudioNodeImplBase *this)
{

  *((_QWORD *)this + 2) = 0;
}

uint64_t AVAudioNodeImplBase::CurrentTime(AVAudioNodeImplBase *this)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  _BYTE *v5;
  _BYTE *v6;
  void *v7;
  int v9;

  (*(void (**)(AVAudioNodeImplBase *))(*(_QWORD *)this + 32))(this);
  v2 = *((_QWORD *)this + 1);
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3)
    return 0;
  v4 = *(unsigned __int8 *)(v3 + 208);
  v5 = (_BYTE *)(v3 + 184);
  v6 = (_BYTE *)(v2 + 64);
  if (!v4)
    v6 = v5;
  if (!*v6 || !*((_BYTE *)this + 48))
    return 0;
  v7 = (void *)*((_QWORD *)this + 2);
  if (!v7)
  {
    v9 = 0;
    (*(void (**)(AVAudioNodeImplBase *))(*(_QWORD *)this + 352))(this);
    objc_msgSend(*((id *)this + 2), "awaitIOCycle:", &v9);
    v7 = (void *)*((_QWORD *)this + 2);
  }
  return objc_msgSend(v7, "currentTime");
}

uint64_t *AVAudioNodeImplBase::DidConnectToMixer(AVAudioNodeImplBase *this, AVAudioNode *a2, uint64_t a3)
{
  void *v6;
  unsigned int *v7;
  uint64_t *result;
  unsigned int *v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  float v16;
  void *v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  uint64_t MixingImpl;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _QWORD *v25;
  AVAudioEnvironmentNodeImpl *v26;
  _QWORD *v27;
  _QWORD *v28;
  unint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  float v41;
  float v42;
  uint64_t v43;
  uint64_t v44;
  float v45;
  uint64_t v46;
  uint64_t v47;
  float v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  AVAudioNode *v57;
  unsigned int v58;
  _BOOL4 v59;
  uint64_t **v60;
  _BOOL4 v61;
  BOOL v62;
  _BOOL4 v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t *v66;
  _BOOL4 v67;
  int v68;
  uint64_t v69;
  int v70;

  v6 = -[AVAudioNode impl](a2, "impl");
  if (((*(uint64_t (**)(AVAudioNodeImplBase *))(*(_QWORD *)this + 408))(this) & 1) != 0
    || (v7 = (unsigned int *)(*(uint64_t (**)(AVAudioNodeImplBase *))(*(_QWORD *)this + 256))(this),
        result = (uint64_t *)ValidSourceComponentTypeForMixingProtocol((const AudioComponentDescription *)*v7, v7[1]),
        (_DWORD)result))
  {
    v9 = (unsigned int *)(*(uint64_t (**)(void *))(*(_QWORD *)v6 + 256))(v6);
    result = (uint64_t *)ValidSourceComponentTypeForMixingProtocol((const AudioComponentDescription *)*v9, v9[1]);
    if ((_DWORD)result)
    {
      result = (uint64_t *)AVAudioNodeImplBase::GetMixingDestination(this, a2, a3);
      if (!result)
      {
        result = (uint64_t *)(*(uint64_t (**)(void *))(*(_QWORD *)v6 + 256))(v6);
        v10 = *((_DWORD *)result + 1);
        if (v10 == 862217581)
        {
          v11 = operator new();
          MixingImpl = AVAudioNodeImplBase::GetMixingImpl(this);
          *(_QWORD *)v11 = &off_1E3BE7698;
          v22 = *(_OWORD *)(MixingImpl + 8);
          v23 = *(_OWORD *)(MixingImpl + 24);
          v24 = *(_OWORD *)(MixingImpl + 40);
          *(_QWORD *)(v11 + 56) = *(_QWORD *)(MixingImpl + 56);
          *(_OWORD *)(v11 + 40) = v24;
          *(_OWORD *)(v11 + 24) = v23;
          *(_OWORD *)(v11 + 8) = v22;
          *(_QWORD *)v11 = &off_1E3BE7C60;
          *(_DWORD *)(v11 + 64) = a3;
          *(_QWORD *)(v11 + 72) = a2;
          v25 = -[AVAudioNode impl](a2, "impl");
          v26 = (AVAudioEnvironmentNodeImpl *)v25;
          v27 = (_QWORD *)v25[40];
          if (v27)
          {
            while (1)
            {
              while (1)
              {
                v28 = v27;
                v29 = v27[4];
                if (v11 >= v29)
                  break;
                v27 = (_QWORD *)*v28;
                v30 = v28;
                if (!*v28)
                  goto LABEL_16;
              }
              if (v29 >= v11)
                break;
              v27 = (_QWORD *)v28[1];
              if (!v27)
              {
                v30 = v28 + 1;
                goto LABEL_16;
              }
            }
          }
          else
          {
            v30 = v25 + 40;
            v28 = v25 + 40;
LABEL_16:
            v31 = operator new(0x30uLL);
            v31[4] = v11;
            *((_DWORD *)v31 + 10) = a3;
            *v31 = 0;
            v31[1] = 0;
            v31[2] = v28;
            *v30 = v31;
            v32 = **((_QWORD **)v26 + 39);
            if (v32)
            {
              *((_QWORD *)v26 + 39) = v32;
              v31 = (_QWORD *)*v30;
            }
            std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)v26 + 40), v31);
            ++*((_QWORD *)v26 + 41);
          }
          (*(void (**)(AVAudioEnvironmentNodeImpl *, uint64_t, uint64_t, uint64_t, float))(*(_QWORD *)v26 + 128))(v26, 5, 1, a3, 1.0);
          v33 = *((_DWORD *)v26 + 87);
          LODWORD(v69) = *((_DWORD *)v26 + 88);
          HIDWORD(v69) = v33;
          AVAudioEnvironmentNodeImpl::GetMaxAttenuation(v26);
          v70 = v34;
          (*(void (**)(AVAudioEnvironmentNodeImpl *, uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v26 + 144))(v26, 3010, 1, a3, &v69, 12);
          AVAudioEnvironmentNodeImpl::ResetRenderingFlags(v26);
          LODWORD(v69) = *(_DWORD *)(v11 + 24);
          v35 = objc_msgSend(*(id *)(v11 + 72), "impl");
          (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t *, uint64_t))(*(_QWORD *)v35 + 144))(v35, 3000, 1, *(unsigned int *)(v11 + 64), &v69, 4);
          v36 = *(_DWORD *)(v11 + 28);
          if ((v36 - 1) >= 3)
            v36 = 0;
          v68 = v36;
          v37 = objc_msgSend(*(id *)(v11 + 72), "impl");
          (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, int *, uint64_t))(*(_QWORD *)v37 + 144))(v37, 3005, 1, *(unsigned int *)(v11 + 64), &v68, 4);
          v67 = *(_DWORD *)(v11 + 32) == 1;
          v38 = objc_msgSend(*(id *)(v11 + 72), "impl");
          (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, _BOOL4 *, uint64_t))(*(_QWORD *)v38 + 144))(v38, 3103, 1, *(unsigned int *)(v11 + 64), &v67, 4);
          v39 = *(void **)(v11 + 72);
          v40 = *(unsigned int *)(v11 + 64);
          v41 = *(float *)(v11 + 16);
          if (v41 <= 0.0)
            v42 = -120.0;
          else
            v42 = log10f(v41) * 20.0;
          v43 = objc_msgSend(v39, "impl");
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, float))(*(_QWORD *)v43 + 128))(v43, 3, 1, v40, v42);
          v44 = *(unsigned int *)(v11 + 64);
          v45 = *(float *)(v11 + 36);
          v46 = objc_msgSend(*(id *)(v11 + 72), "impl");
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, float))(*(_QWORD *)v46 + 128))(v46, 4, 1, v44, v45);
          v47 = *(unsigned int *)(v11 + 64);
          v48 = *(float *)(v11 + 40);
          v49 = objc_msgSend(*(id *)(v11 + 72), "impl");
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, float))(*(_QWORD *)v49 + 128))(v49, 8, 1, v47, v48 * 100.0);
          AVAudio3DMixingImpl::RecalculateAndSetSphericalCoordsOnMixer((AVAudio3DMixingImpl *)v11);
        }
        else
        {
          if (v10 != 1835232632)
            return result;
          v11 = operator new();
          v12 = AVAudioNodeImplBase::GetMixingImpl(this);
          *(_QWORD *)v11 = &off_1E3BE7698;
          v13 = *(_OWORD *)(v12 + 24);
          v14 = *(_OWORD *)(v12 + 40);
          v15 = *(_QWORD *)(v12 + 56);
          *(_OWORD *)(v11 + 8) = *(_OWORD *)(v12 + 8);
          *(_QWORD *)(v11 + 56) = v15;
          *(_OWORD *)(v11 + 40) = v14;
          *(_OWORD *)(v11 + 24) = v13;
          *(_QWORD *)v11 = &off_1E3BE8CE8;
          *(_DWORD *)(v11 + 64) = a3;
          *(_QWORD *)(v11 + 72) = a2;
          v16 = *(float *)(v11 + 16);
          v17 = -[AVAudioNode impl](a2, "impl");
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t, float))(*(_QWORD *)v17 + 128))(v17, 0, 1, a3, v16);
          v18 = *(unsigned int *)(v11 + 64);
          v19 = *(float *)(v11 + 20);
          v20 = objc_msgSend(*(id *)(v11 + 72), "impl");
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, float))(*(_QWORD *)v20 + 128))(v20, 2, 1, v18, v19);
        }
        result = -[AVAudioMixingDestination initWithImpl:]([AVAudioMixingDestination alloc], "initWithImpl:", v11);
        v50 = result;
        v53 = *((_QWORD *)this + 8);
        v51 = (uint64_t *)((char *)this + 64);
        v52 = v53;
        if (!v53)
        {
          v54 = (_QWORD *)operator new();
          v54[2] = 0;
          v54[1] = 0;
          *v54 = v54 + 1;
          v69 = 0;
          std::unique_ptr<std::map<std::pair<AVAudioNode *,unsigned int>,AVAudioMixingDestination *>>::reset[abi:ne180100](v51, (uint64_t)v54);
          result = std::unique_ptr<std::map<std::pair<AVAudioNode *,unsigned int>,AVAudioMixingDestination *>>::reset[abi:ne180100](&v69, 0);
          v52 = *v51;
        }
        v56 = v52 + 8;
        v55 = *(_QWORD *)(v52 + 8);
        if (v55)
        {
          while (1)
          {
            while (1)
            {
              v56 = v55;
              v57 = *(AVAudioNode **)(v55 + 32);
              v58 = *(_DWORD *)(v56 + 40);
              v59 = v58 > a3;
              if (v57 != a2)
                v59 = v57 > a2;
              if (!v59)
                break;
              v55 = *(_QWORD *)v56;
              v60 = (uint64_t **)v56;
              if (!*(_QWORD *)v56)
                goto LABEL_39;
            }
            v61 = v58 < a3;
            v62 = v57 == a2;
            v63 = v57 < a2;
            if (v62)
              v63 = v61;
            if (!v63)
              break;
            v60 = (uint64_t **)(v56 + 8);
            v55 = *(_QWORD *)(v56 + 8);
            if (!v55)
              goto LABEL_39;
          }
        }
        else
        {
          v60 = (uint64_t **)(v52 + 8);
LABEL_39:
          v64 = operator new(0x38uLL);
          v64[4] = a2;
          *((_DWORD *)v64 + 10) = a3;
          v64[6] = v50;
          *v64 = 0;
          v64[1] = 0;
          v64[2] = v56;
          *v60 = v64;
          v65 = **(_QWORD **)v52;
          if (v65)
          {
            *(_QWORD *)v52 = v65;
            v66 = *v60;
          }
          else
          {
            v66 = v64;
          }
          result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v52 + 8), v66);
          ++*(_QWORD *)(v52 + 16);
        }
      }
    }
  }
  return result;
}

void sub_19B8167A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AC5BD4](v1, 0x10E1C40661BC0D6);
  _Unwind_Resume(a1);
}

void AVAudioNodeImplBase::WillDisconnectFromMixer(AVAudioNodeImplBase *this, AVAudioNode *a2, unsigned int a3, int a4)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;
  void *MixingDestination;
  NSObject *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t *v20;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  int v24;
  __int16 v25;
  char *v26;
  __int16 v27;
  int v28;
  __int16 v29;
  const char *v30;
  __int16 v31;
  const char *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if (*((_QWORD *)this + 7))
  {
    v5 = (_QWORD *)*((_QWORD *)this + 8);
    if (v5)
    {
      if (v5[2])
      {
        if (a4)
        {
          v6 = (_QWORD *)*v5;
          if ((_QWORD *)*v5 != v5 + 1)
          {
            do
            {

              v7 = (_QWORD *)v6[1];
              if (v7)
              {
                do
                {
                  v8 = v7;
                  v7 = (_QWORD *)*v7;
                }
                while (v7);
              }
              else
              {
                do
                {
                  v8 = (_QWORD *)v6[2];
                  v9 = *v8 == (_QWORD)v6;
                  v6 = v8;
                }
                while (!v9);
              }
              v6 = v8;
            }
            while (v8 != v5 + 1);
            v5 = (_QWORD *)*((_QWORD *)this + 8);
          }
          std::__tree<std::__value_type<AUGraphNodeBaseV3 *,std::pair<AUGraphNodeBaseV3 *,unsigned int>>,std::__map_value_compare<AUGraphNodeBaseV3 *,std::__value_type<AUGraphNodeBaseV3 *,std::pair<AUGraphNodeBaseV3 *,unsigned int>>,std::less<AUGraphNodeBaseV3 *>,true>,std::allocator<std::__value_type<AUGraphNodeBaseV3 *,std::pair<AUGraphNodeBaseV3 *,unsigned int>>>>::destroy((_QWORD *)v5[1]);
          *v5 = v5 + 1;
          v5[2] = 0;
          v5[1] = 0;
        }
        else
        {
          MixingDestination = (void *)AVAudioNodeImplBase::GetMixingDestination(this, a2, a3);
          if (!MixingDestination)
          {
            if (AVAudioEngineLogCategory(void)::once != -1)
              dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
            v13 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
            if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136316418;
              v22 = "AVAEInternal.h";
              v23 = 1024;
              v24 = 71;
              v25 = 2080;
              v26 = "AVAudioNode.mm";
              v27 = 1024;
              v28 = 951;
              v29 = 2080;
              v30 = "WillDisconnectFromMixer";
              v31 = 2080;
              v32 = "mixingDest";
              _os_log_impl(&dword_19B733000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
            }
            objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "mixingDest");
          }
          v14 = (_QWORD *)*((_QWORD *)this + 8);
          v15 = std::__tree<std::__value_type<std::pair<AVAudioNode *,unsigned int>,AVAudioMixingDestination *>,std::__map_value_compare<std::pair<AVAudioNode *,unsigned int>,std::__value_type<std::pair<AVAudioNode *,unsigned int>,AVAudioMixingDestination *>,std::less<std::pair<AVAudioNode *,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<AVAudioNode *,unsigned int>,AVAudioMixingDestination *>>>::find<std::pair<AVAudioNode *,unsigned int>>((uint64_t)v14, (unint64_t)a2, a3);
          if (v14 + 1 != (_QWORD *)v15)
          {
            v16 = (uint64_t *)v15;
            v17 = *(_QWORD **)(v15 + 8);
            if (v17)
            {
              do
              {
                v18 = v17;
                v17 = (_QWORD *)*v17;
              }
              while (v17);
            }
            else
            {
              v19 = (_QWORD *)v15;
              do
              {
                v18 = (_QWORD *)v19[2];
                v9 = *v18 == (_QWORD)v19;
                v19 = v18;
              }
              while (!v9);
            }
            if (*v14 == v15)
              *v14 = v18;
            v20 = (uint64_t *)v14[1];
            --v14[2];
            std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v20, v16);
            operator delete(v16);
          }

        }
      }
    }
  }
}

double AVAudioNodeImplBase::GetOutputPresentationLatency(AVAudioNodeImplBase *this)
{
  double v1;
  uint64_t v2;
  uint64_t v4;
  std::recursive_mutex *v5;
  NSObject *v6;
  double v7;
  uint64_t NodeFromMap;
  uint8_t buf[4];
  const char *v11;
  __int16 v12;
  int v13;
  __int16 v14;
  char *v15;
  __int16 v16;
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  const char *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v1 = COERCE_DOUBLE(atomic_load((unint64_t *)this + 12));
  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    v4 = *(_QWORD *)(v2 + 8);
    v5 = (std::recursive_mutex *)(*(_QWORD *)v4 + 112);
    if (std::recursive_mutex::try_lock(v5))
    {
      if (!AVAudioEngineGraph::IsNodeInGraph((AVAudioEngineGraph *)v4, this))
      {
        if (AVAudioEngineLogCategory(void)::once != -1)
          dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
        v6 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
        if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136316418;
          v11 = "AVAEInternal.h";
          v12 = 1024;
          v13 = 71;
          v14 = 2080;
          v15 = "AVAudioEngineGraph.mm";
          v16 = 1024;
          v17 = 3240;
          v18 = 2080;
          v19 = "GetOutputDeviceLatencyForNode";
          v20 = 2080;
          v21 = "IsNodeInGraph(inImpl)";
          _os_log_impl(&dword_19B733000, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
        }
        objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "IsNodeInGraph(inImpl)");
      }
      v7 = 0.0;
      if ((*(_BYTE *)(AVAudioEngineGraph::GetNodeFromMap((AVAudioEngineGraph *)v4, this) + 32) & 2) != 0)
      {
        NodeFromMap = AVAudioEngineGraph::GetNodeFromMap((AVAudioEngineGraph *)v4, *(AVAudioNodeImplBase **)(v4 + 24));
        if (NodeFromMap)
        {
          v7 = (*(double (**)(_QWORD))(**(_QWORD **)(NodeFromMap + 24) + 216))(*(_QWORD *)(NodeFromMap + 24));
          *(double *)(v4 + 224) = v7;
        }
      }
      std::recursive_mutex::unlock(v5);
    }
    else
    {
      v7 = *(double *)(v4 + 224);
    }
  }
  else
  {
    v7 = 0.0;
  }
  return v7 + v1;
}

void sub_19B816C38(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

AVAudioClock *AVAudioNodeImplBase::CreateClock(AVAudioNodeImplBase *this)
{
  return -[AVAudioClock initWithNode:]([AVAudioClock alloc], "initWithNode:", this);
}

BOOL ValidSourceComponentTypeForMixingProtocol(const AudioComponentDescription *a1, int a2)
{
  int v2;
  _BOOL8 result;

  v2 = (int)a1;
  result = 1;
  if (v2 <= 1635085687)
  {
    if (v2 == 1635084142 || v2 == 1635085685)
      return result;
    return 0;
  }
  if (v2 == 1635086953 || v2 == 1635086197)
    return result;
  if (v2 != 1635085688)
    return 0;
  return a2 == 1835232632 || a2 == 862217581;
}

uint64_t *std::unique_ptr<std::map<std::pair<AVAudioNode *,unsigned int>,AVAudioMixingDestination *>>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    std::__tree<std::__value_type<AUGraphNodeBaseV3 *,std::pair<AUGraphNodeBaseV3 *,unsigned int>>,std::__map_value_compare<AUGraphNodeBaseV3 *,std::__value_type<AUGraphNodeBaseV3 *,std::pair<AUGraphNodeBaseV3 *,unsigned int>>,std::less<AUGraphNodeBaseV3 *>,true>,std::allocator<std::__value_type<AUGraphNodeBaseV3 *,std::pair<AUGraphNodeBaseV3 *,unsigned int>>>>::destroy(*(_QWORD **)(v2 + 8));
    JUMPOUT(0x1A1AC5BD4);
  }
  return result;
}

void AVAudioNodeImpl::~AVAudioNodeImpl(id *this)
{
  AVAudioNodeImpl::~AVAudioNodeImpl(this);
  JUMPOUT(0x1A1AC5BD4);
}

{
  id v2;

  *this = &off_1E3BE6AB8;

  this[2] = 0;
  v2 = this[22];
  this[22] = 0;
  if (v2)
    (*(void (**)(id))(*(_QWORD *)v2 + 8))(v2);
  AVAudioNodeImplBase::~AVAudioNodeImplBase((AVAudioNodeImplBase *)this);
}

void AVAudioNodeImpl::GetConverterNodes(uint64_t a1, char **a2)
{
  unint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;

  if (*(_DWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 256))(a1) == 1635083875)
  {
    v5 = a2[1];
    v4 = (unint64_t)a2[2];
    if ((unint64_t)v5 >= v4)
    {
      v7 = *a2;
      v8 = (v5 - *a2) >> 3;
      v9 = v8 + 1;
      if ((unint64_t)(v8 + 1) >> 61)
        std::vector<EExtAudioGraphNodeState>::__throw_length_error[abi:ne180100]();
      v10 = v4 - (_QWORD)v7;
      if (v10 >> 2 > v9)
        v9 = v10 >> 2;
      if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
        v11 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v11 = v9;
      if (v11)
      {
        if (v11 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v12 = (char *)operator new(8 * v11);
      }
      else
      {
        v12 = 0;
      }
      v13 = &v12[8 * v8];
      *(_QWORD *)v13 = a1;
      v6 = v13 + 8;
      if (v5 != v7)
      {
        do
        {
          v14 = *((_QWORD *)v5 - 1);
          v5 -= 8;
          *((_QWORD *)v13 - 1) = v14;
          v13 -= 8;
        }
        while (v5 != v7);
        v5 = *a2;
      }
      *a2 = v13;
      a2[1] = v6;
      a2[2] = &v12[8 * v11];
      if (v5)
        operator delete(v5);
    }
    else
    {
      *(_QWORD *)v5 = a1;
      v6 = v5 + 8;
    }
    a2[1] = v6;
  }
}

uint64_t AVAudioNodeImpl::CurrentTime(AVAudioNodeImplBase *this)
{
  void *v2;
  uint64_t result;
  int v4;

  if (!*((_DWORD *)this + 42))
    return AVAudioNodeImplBase::CurrentTime(this);
  if (!*((_BYTE *)this + 48))
    return 0;
  v2 = (void *)*((_QWORD *)this + 2);
  if (!v2)
  {
    v4 = 0;
    (*(void (**)(AVAudioNodeImplBase *))(*(_QWORD *)this + 352))(this);
    result = objc_msgSend(*((id *)this + 2), "awaitIOCycle:", &v4);
    if (!result)
      return result;
    v2 = (void *)*((_QWORD *)this + 2);
  }
  return objc_msgSend(v2, "currentTime");
}

void AVAudioNodeImplBase::~AVAudioNodeImplBase(AVAudioNodeImplBase *this)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;
  uint64_t v9;
  void *v10;

  *(_QWORD *)this = off_1E3BE7CE0;

  v2 = (_QWORD *)*((_QWORD *)this + 8);
  if (v2)
  {
    v5 = (_QWORD *)*v2;
    v3 = v2 + 1;
    v4 = v5;
    if (v5 != v3)
    {
      do
      {

        v6 = (_QWORD *)v4[1];
        if (v6)
        {
          do
          {
            v7 = v6;
            v6 = (_QWORD *)*v6;
          }
          while (v6);
        }
        else
        {
          do
          {
            v7 = (_QWORD *)v4[2];
            v8 = *v7 == (_QWORD)v4;
            v4 = v7;
          }
          while (!v8);
        }
        v4 = v7;
      }
      while (v7 != v3);
    }
  }
  std::recursive_mutex::~recursive_mutex((std::recursive_mutex *)((char *)this + 104));
  std::unique_ptr<std::map<std::pair<AVAudioNode *,unsigned int>,AVAudioMixingDestination *>>::reset[abi:ne180100]((uint64_t *)this + 8, 0);
  v9 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = (void *)*((_QWORD *)this + 3);
  if (v10)
    operator delete(v10);
}

void AVAudioNodeImplBase::AVAudioNodeImplBase(AVAudioNodeImplBase *this)
{
  *(_QWORD *)this = off_1E3BE7CE0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 34) = 0u;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_BYTE *)this + 72) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 10) = 1;
  MEMORY[0x1A1AC5AE4]((char *)this + 104);
}

void sub_19B817090(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v3;
  void *v4;

  std::unique_ptr<std::map<std::pair<AVAudioNode *,unsigned int>,AVAudioMixingDestination *>>::reset[abi:ne180100](v1 + 8, 0);
  v3 = v1[7];
  v1[7] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (void *)v1[3];
  if (v4)
    operator delete(v4);
  _Unwind_Resume(a1);
}

uint64_t AVAudioNodeImpl::AVAudioNodeImpl(uint64_t a1, OpaqueAudioComponentInstance *a2, const AudioComponentDescription *a3, int a4)
{
  uint64_t v8;
  AUInterfaceBaseV3 *v9;
  uint64_t v10;

  AVAudioNodeImplBase::AVAudioNodeImplBase((AVAudioNodeImplBase *)a1);
  *(_QWORD *)v8 = &off_1E3BE6AB8;
  *(_DWORD *)(v8 + 168) = a4;
  *(_QWORD *)(v8 + 176) = 0;
  v9 = (AUInterfaceBaseV3 *)operator new();
  AUInterfaceBaseV3::AUInterfaceBaseV3(v9, a3, a2);
  *(_QWORD *)v9 = &off_1E3BE6430;
  v10 = *(_QWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 176) = v9;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  return a1;
}

void sub_19B817164(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  MEMORY[0x1A1AC5BD4](v2, 0x10A1C4060B6163ELL);
  v4 = *(_QWORD *)(v1 + 176);
  *(_QWORD *)(v1 + 176) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  AVAudioNodeImplBase::~AVAudioNodeImplBase((AVAudioNodeImplBase *)v1);
  _Unwind_Resume(a1);
}

void AUInterfaceV3::~AUInterfaceV3(const void ***this)
{
  AUInterfaceBaseV3::~AUInterfaceBaseV3(this);
  JUMPOUT(0x1A1AC5BD4);
}

uint64_t AUInterfaceBaseV3::GetComponentDescription(AUInterfaceBaseV3 *this)
{
  return (uint64_t)this + 8;
}

uint64_t AUInterfaceV3::CanPerformIO(AUInterfaceV3 *this)
{
  return 0;
}

uint64_t AUInterfaceBaseV3::auv2(AUInterfaceBaseV3 *this)
{
  return *((_QWORD *)this + 4);
}

uint64_t AUInterfaceV3::StartIO(AUInterfaceV3 *this)
{
  return 0;
}

uint64_t AUInterfaceV3::StopIO(AUInterfaceV3 *this)
{
  return 0;
}

uint64_t AUInterfaceBaseV3::auv3(AUInterfaceBaseV3 *this)
{
  return *((_QWORD *)this + 5);
}

uint64_t AUInterfaceBaseV3::ParameterTree(AUInterfaceBaseV3 *this)
{
  return objc_msgSend((id)(*(uint64_t (**)(AUInterfaceBaseV3 *))(*(_QWORD *)this + 304))(this), "parameterTree");
}

uint64_t AUInterfaceBaseV3::ScheduleMIDIEventBlock(AUInterfaceBaseV3 *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 9);
  if (v1)
    return *(_QWORD *)v1;
  else
    return 0;
}

uint64_t AUInterfaceBaseV3::ScheduleMIDIEventListBlock(AUInterfaceBaseV3 *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 10);
  if (v1)
    return *(_QWORD *)v1;
  else
    return 0;
}

uint64_t AUInterfaceV3::IsRunning(AUInterfaceV3 *this)
{
  return 0;
}

void sub_19B817318(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AC5BD4](v1, 0x10F1C40CA7A8F2DLL);
  _Unwind_Resume(a1);
}

void sub_19B8174D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19B8175E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19B8176B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

void AVAudioUnitSamplerImpl::SetSoundBankURL(AVAudioUnitSamplerImpl *this, CFTypeRef cf)
{
  const void *v4;
  const void *v5;

  if (cf)
  {
    *((_BYTE *)this + 184) = 1;
    v4 = (const void *)*((_QWORD *)this + 24);
    if (v4)
      CFRelease(v4);
    *((_QWORD *)this + 24) = cf;
    CFRetain(cf);
  }
  else
  {
    v5 = (const void *)*((_QWORD *)this + 24);
    if (v5)
    {
      CFRelease(v5);
      *((_QWORD *)this + 24) = 0;
    }
    *((_BYTE *)this + 184) = 0;
  }
}

void AVAudioUnitSamplerImpl::~AVAudioUnitSamplerImpl(AVAudioUnitSamplerImpl *this)
{
  AVAudioUnitSamplerImpl::~AVAudioUnitSamplerImpl(this);
  JUMPOUT(0x1A1AC5BD4);
}

{
  const void *v2;

  *(_QWORD *)this = &off_1E3BE8B00;
  if (*((_BYTE *)this + 184))
  {
    v2 = (const void *)*((_QWORD *)this + 24);
    if (v2)
      CFRelease(v2);
  }
  AVAudioUnitImpl::~AVAudioUnitImpl((id *)this);
}

void AVAudioIOUnit::~AVAudioIOUnit(dispatch_queue_t *this)
{
  AVAudioIOUnit::~AVAudioIOUnit(this);
  JUMPOUT(0x1A1AC5BD4);
}

{
  uint64_t v2;
  unsigned int *v3;
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  dispatch_queue_t v8;

  *this = (dispatch_queue_t)&off_1E3BE65A8;
  v2 = IOUnitPropertyList();
  v3 = *(unsigned int **)v2;
  v4 = *(unsigned int **)(v2 + 8);
  if (*(unsigned int **)v2 != v4)
  {
    do
    {
      v5 = *v3;
      v6 = ((uint64_t (*)(dispatch_queue_t *))(*this)[2].isa)(this);
      (*(void (**)(uint64_t, uint64_t, void (*)(NSObject **, void *, OpaqueAudioComponentInstance *, int, int), dispatch_queue_t *))(*(_QWORD *)v6 + 264))(v6, v5, AVAudioIOUnit::IOUnitPropertyListener, this);
      ++v3;
    }
    while (v3 != v4);
  }
  dispatch_sync(this[1], &__block_literal_global_6416);
  dispatch_release(this[1]);

  v7 = this[9];
  if (v7)
  {
    this[10] = v7;
    operator delete(v7);
  }
  v8 = this[3];
  this[3] = 0;
  if (v8)
    (*((void (**)(dispatch_queue_t))v8->isa + 1))(v8);
}

uint64_t AVAudioIOUnit::AUI(AVAudioIOUnit *this)
{
  return *((_QWORD *)this + 3);
}

uint64_t AVAudioIOUnit::GetHWFormat(AVAudioIOUnit *this, int a2, unsigned int *a3)
{
  NSObject *v3;
  uint64_t v4;
  _QWORD v6[7];
  int v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  void (*v12)(uint64_t);
  uint64_t v13;

  v8 = 0;
  v9 = &v8;
  v10 = 0x3052000000;
  v11 = __Block_byref_object_copy__6414;
  v12 = __Block_byref_object_dispose__6415;
  v13 = 0;
  v3 = *((_QWORD *)this + 1);
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = ___ZN13AVAudioIOUnit11GetHWFormatEjPj_block_invoke;
  v6[3] = &unk_1E3BEC998;
  v6[4] = &v8;
  v6[5] = this;
  v7 = a2;
  v6[6] = a3;
  dispatch_sync(v3, v6);
  v4 = v9[5];
  _Block_object_dispose(&v8, 8);
  return v4;
}

uint64_t AVAudioIOUnit::GetClientFormat(AVAudioIOUnit *this, int a2)
{
  NSObject *v2;
  uint64_t v3;
  _QWORD block[6];
  int v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  void (*v11)(uint64_t);
  uint64_t v12;

  v7 = 0;
  v8 = &v7;
  v9 = 0x3052000000;
  v10 = __Block_byref_object_copy__6414;
  v11 = __Block_byref_object_dispose__6415;
  v12 = 0;
  v2 = *((_QWORD *)this + 1);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN13AVAudioIOUnit15GetClientFormatEj_block_invoke;
  block[3] = &unk_1E3BEC9C0;
  v6 = a2;
  block[4] = &v7;
  block[5] = this;
  dispatch_sync(v2, block);
  v3 = v8[5];
  _Block_object_dispose(&v7, 8);
  return v3;
}

uint64_t AVAudioIOUnit::GetDeviceLatency(AVAudioIOUnit *this, int a2)
{
  void *v3;

  v3 = (void *)objc_msgSend(MEMORY[0x1E0CFF1C0], "sharedInstance");
  if (a2)
    return objc_msgSend(v3, "inputLatency");
  else
    return objc_msgSend(v3, "outputLatency");
}

uint64_t AVAudioIOUnit::IsRunning(AVAudioIOUnit *this)
{
  NSObject *v1;
  uint64_t v2;
  _QWORD v4[6];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  char v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v8 = 0;
  v1 = *((_QWORD *)this + 1);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = ___ZNK13AVAudioIOUnit9IsRunningEv_block_invoke;
  v4[3] = &unk_1E3BEC9E8;
  v4[4] = &v5;
  v4[5] = this;
  dispatch_sync(v1, v4);
  v2 = *((unsigned __int8 *)v6 + 24);
  _Block_object_dispose(&v5, 8);
  return v2;
}

AVAudioFormat *AVAudioIOUnit::_GetHWFormat(AVAudioIOUnit *this, int a2, unsigned int *a3)
{
  int v5;
  uint64_t v6;
  void **v7;
  void *v8;
  double v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  char v13;
  char v14;
  id *v15;
  id v16;
  double v17;
  int v18;
  uint64_t v19;
  AVAudioFormat *v20;
  AVAudioFormat *v21;
  double v22;
  void *v23;
  NSObject *v24;
  id v25;
  AVAudioFormat *v26;
  void **v28;
  uint8_t buf[4];
  const char *v30;
  __int16 v31;
  int v32;
  __int16 v33;
  char *v34;
  __int16 v35;
  int v36;
  __int16 v37;
  const char *v38;
  __int16 v39;
  const char *v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  if (a3)
    v5 = *(_BYTE *)a3 & 1;
  else
    v5 = 0;
  v6 = 32;
  if (a2)
  {
    v7 = (void **)((char *)this + 32);
  }
  else
  {
    v6 = 40;
    v7 = (void **)((char *)this + 40);
  }
  v8 = *(void **)((char *)this + v6);
  if (!v8
    || (objc_msgSend(*(id *)((char *)this + v6), "sampleRate"), v9 <= 0.0)
    || (!objc_msgSend(v8, "channelCount") ? (v10 = 1) : (v10 = v5), v10 == 1))
  {
    v28 = v7;
    v11 = 0;
    v12 = 0;
    v13 = 1;
    while (1)
    {
      v14 = v13;
      if ((v12 & 1) != 0)
        v15 = (id *)((char *)this + 32);
      else
        v15 = (id *)((char *)this + 40);
      v16 = *v15;
      if (*v15)
      {
        objc_msgSend(*v15, "sampleRate");
        if (v17 > 0.0)
        {
          v18 = objc_msgSend(v16, "channelCount") ? v5 : 1;
          if (v18 != 1)
            goto LABEL_38;
        }
      }
      v19 = (*(uint64_t (**)(AVAudioIOUnit *))(*(_QWORD *)this + 16))(this);
      v20 = (AVAudioFormat *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v19 + 40))(v19, v12 & 1, v12);
      if (v20)
      {
        v21 = v20;
        -[AVAudioFormat sampleRate](v20, "sampleRate");
        if (v22 > 0.0
          && -[AVAudioFormat channelCount](v21, "channelCount")
          && -[AVAudioFormat isInterleaved](v21, "isInterleaved"))
        {
          v23 = (void *)-[NSDictionary mutableCopy](-[AVAudioFormat settings](v21, "settings"), "mutableCopy");
          objc_msgSend(v23, "setValue:forKey:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", 1), CFSTR("AVLinearPCMIsNonInterleaved"));
          v21 = -[AVAudioFormat initWithSettings:]([AVAudioFormat alloc], "initWithSettings:", v23);

        }
      }
      else
      {
        if (AVAudioEngineLogCategory(void)::once != -1)
          dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
        v24 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
        if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136316418;
          v30 = "AVAEInternal.h";
          v31 = 1024;
          v32 = 71;
          v33 = 2080;
          v34 = "AVAudioIONodeImpl.mm";
          v35 = 1024;
          v36 = 430;
          v37 = 2080;
          v38 = "_GetHWFormat";
          v39 = 2080;
          v40 = "hwFormat";
          _os_log_impl(&dword_19B733000, v24, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
        }
        objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "hwFormat");
        v21 = 0;
      }
      if (!*v15)
        break;
      if (!-[AVAudioFormat isEqual:](v21, "isEqual:"))
      {
        v25 = *v15;
LABEL_37:

        *v15 = v21;
        v26 = v21;
        v11 |= 2u;
      }
LABEL_38:
      v13 = 0;
      v12 = 1;
      if ((v14 & 1) == 0)
      {
        v8 = *v28;
        if (a3)
          goto LABEL_40;
        goto LABEL_41;
      }
    }
    v25 = 0;
    goto LABEL_37;
  }
  v11 = 0;
  if (a3)
LABEL_40:
    *a3 = v11;
LABEL_41:
  if (!v8)
    return +[AVAudioFormat formatWithInvalidSampleRateAndChannelCount](AVAudioFormat, "formatWithInvalidSampleRateAndChannelCount");
  return (AVAudioFormat *)v8;
}

uint64_t ___ZNK13AVAudioIOUnit9IsRunningEv_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 336))(v2);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void __Block_byref_object_copy__6414(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_dispose__6415(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

uint64_t ___ZN13AVAudioIOUnit15GetClientFormatEj_block_invoke(uint64_t a1)
{
  _BOOL8 v2;
  uint64_t v3;
  uint64_t result;

  v2 = *(_DWORD *)(a1 + 48) == 0;
  v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40));
  result = (*(uint64_t (**)(uint64_t, _BOOL8, _QWORD))(*(_QWORD *)v3 + 40))(v3, v2, *(unsigned int *)(a1 + 48));
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  return result;
}

id ___ZN13AVAudioIOUnit11GetHWFormatEjPj_block_invoke(uint64_t a1)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 40) + 72))(*(_QWORD *)(a1 + 40), *(unsigned int *)(a1 + 56), *(_QWORD *)(a1 + 48));
  return *(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
}

uint64_t IOUnitPropertyList(void)
{
  unsigned __int8 v0;
  _QWORD *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  {
    v2 = (_QWORD *)operator new();
    v3 = 0x13000007D1;
    v4 = 8;
    std::vector<unsigned int>::vector[abi:ne180100](v2, &v3, 3uLL);
    IOUnitPropertyList(void)::sPropList = (uint64_t)v2;
  }
  return IOUnitPropertyList(void)::sPropList;
}

void sub_19B818190(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AC5BD4](v1, 0x10C402FEFCB83);
  _Unwind_Resume(a1);
}

void AVAudioIOUnit::IOUnitPropertyListener(NSObject **this, void *a2, OpaqueAudioComponentInstance *a3, int a4, int a5)
{
  uint64_t v6;
  NSObject *v7;
  _QWORD *v8;
  _QWORD block[6];
  int v10;
  int v11;
  int v12;
  _QWORD v13[5];

  if ((_DWORD)a3 == 2001)
  {
    v6 = ((uint64_t (*)(NSObject **, void *))(*this)[2].isa)(this, a2);
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 336))(v6) & 1) != 0)
      return;
    v7 = this[1];
    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 3221225472;
    v13[2] = ___ZN13AVAudioIOUnit24Listener_IsRunningChangeEv_block_invoke;
    v13[3] = &__block_descriptor_40_e5_v8__0l;
    v13[4] = this;
    v8 = v13;
  }
  else
  {
    v7 = this[1];
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = ___ZN13AVAudioIOUnit22IOUnitPropertyListenerEPvP28OpaqueAudioComponentInstancejjj_block_invoke;
    block[3] = &__block_descriptor_60_e5_v8__0l;
    v10 = (int)a3;
    v11 = a5;
    v12 = a4;
    block[4] = this;
    block[5] = a2;
    v8 = block;
  }
  dispatch_async(v7, v8);
}

void ___ZN13AVAudioIOUnit22IOUnitPropertyListenerEPvP28OpaqueAudioComponentInstancejjj_block_invoke(uint64_t a1)
{
  int v1;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  void *v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD);
  int v17;
  _QWORD v18[5];
  _QWORD block[5];

  v1 = *(_DWORD *)(a1 + 48);
  if (v1 != 19 && v1 != 8)
    return;
  v4 = *(unsigned int *)(a1 + 52);
  if (!(_DWORD)v4)
  {
    if (*(_DWORD *)(a1 + 56) != 2)
      goto LABEL_23;
LABEL_11:
    v5 = *(_QWORD **)(a1 + 32);
    v6 = 4;
    if (!(_DWORD)v4)
      v6 = 5;
    v7 = (void *)v5[v6];
    if (v7)
    {
      objc_msgSend((id)v5[v6], "sampleRate");
      LODWORD(v7) = v8 > 0.0 && objc_msgSend(v7, "channelCount") != 0;
    }
    v17 = 1;
    (*(void (**)(_QWORD *, uint64_t, int *))(*v5 + 72))(v5, v4, &v17);
    if ((v17 & 2) != 0 && (_DWORD)v7)
    {
      v9 = v5[2];
      v10 = MEMORY[0x1E0C809B0];
      if (!*(_QWORD *)(v9 + 88))
      {
        block[0] = MEMORY[0x1E0C809B0];
        block[1] = 3221225472;
        block[2] = ___ZN17AVAudioEngineImpl26IOUnitConfigurationChangedEv_block_invoke;
        block[3] = &__block_descriptor_40_e5_v8__0l;
        block[4] = v9;
        *(_QWORD *)(v9 + 88) = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS, block);
      }
      v11 = *(NSObject **)(v9 + 72);
      v18[0] = v10;
      v18[1] = 3221225472;
      v18[2] = ___ZN17AVAudioEngineImpl26IOUnitConfigurationChangedEv_block_invoke_2;
      v18[3] = &__block_descriptor_40_e5_v8__0l;
      v18[4] = v9;
      dispatch_async(v11, v18);
    }
    v1 = *(_DWORD *)(a1 + 48);
    goto LABEL_23;
  }
  if ((_DWORD)v4 == 1 && *(_DWORD *)(a1 + 56) == 1)
    goto LABEL_11;
LABEL_23:
  if (v1 == 8)
  {
    v12 = *(_QWORD *)(a1 + 32);
    v13 = *(_QWORD *)(v12 + 72);
    v14 = *(_QWORD *)(v12 + 80);
    while (v13 != v14)
    {
      v16 = *(void (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))v13;
      v15 = *(_QWORD *)(v13 + 8);
      v13 += 16;
      v16(v15, *(_QWORD *)(a1 + 40), *(unsigned int *)(a1 + 48), *(unsigned int *)(a1 + 56), *(unsigned int *)(a1 + 52));
    }
  }
}

void ___ZN13AVAudioIOUnit24Listener_IsRunningChangeEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  _QWORD block[5];

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16);
  v2 = *(NSObject **)(v1 + 72);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN17AVAudioEngineImpl13IOUnitStoppedEv_block_invoke;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = v1;
  dispatch_async(v2, block);
}

_QWORD *std::vector<unsigned int>::vector[abi:ne180100](_QWORD *a1, const void *a2, unint64_t a3)
{
  char *v6;
  uint64_t v7;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    if (a3 >> 62)
      std::vector<EExtAudioGraphNodeState>::__throw_length_error[abi:ne180100]();
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<EExtAudioGraphNodeState>>(a3);
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[4 * v7];
    memmove(v6, a2, 4 * a3);
    a1[1] = &v6[4 * a3];
  }
  return a1;
}

void sub_19B8184F4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void AVAudioIONodeImpl::~AVAudioIONodeImpl(id *this)
{
  AVAudioIONodeImpl::~AVAudioIONodeImpl(this);
  JUMPOUT(0x1A1AC5BD4);
}

{
  *this = &off_1E3BE74B8;

  this[2] = 0;
  AVAudioNodeImplBase::~AVAudioNodeImplBase((AVAudioNodeImplBase *)this);
}

uint64_t AVAudioIONodeImpl::AUI(AVAudioIONodeImpl *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 21) + 16))(*((_QWORD *)this + 21));
}

AVAudioFormat *AVAudioIONodeImpl::GetOutputFormat(AVAudioIONodeImpl *this)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  if (*((_BYTE *)this + 176))
  {
    v2 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 21) + 32))(*((_QWORD *)this + 21), 1);
    if (!v2)
      return +[AVAudioFormat formatWithInvalidSampleRateAndChannelCount](AVAudioFormat, "formatWithInvalidSampleRateAndChannelCount");
    return (AVAudioFormat *)v2;
  }
  v3 = *((unsigned __int8 *)this + 48);
  if (!*((_BYTE *)this + 48))
  {
    v6 = (*(uint64_t (**)(AVAudioIONodeImpl *))(*(_QWORD *)this + 40))(this);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6))
      return +[AVAudioFormat formatWithInvalidSampleRateAndChannelCount](AVAudioFormat, "formatWithInvalidSampleRateAndChannelCount");
  }
  v4 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 21) + 24))(*((_QWORD *)this + 21), 0, 0);
  v2 = v4;
  if (v3)
  {
    if (v4)
      return (AVAudioFormat *)v2;
  }
  else
  {
    v7 = (*(uint64_t (**)(AVAudioIONodeImpl *))(*(_QWORD *)this + 40))(this);
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
    if (v2)
      return (AVAudioFormat *)v2;
  }
  return +[AVAudioFormat formatWithInvalidSampleRateAndChannelCount](AVAudioFormat, "formatWithInvalidSampleRateAndChannelCount");
}

AVAudioFormat *AVAudioIONodeImpl::GetOutputFormat(AVAudioIONodeImpl *this, unint64_t a2, char a3)
{
  int v3;
  _BOOL8 v4;
  dispatch_queue_t *v5;
  uint64_t v6;
  dispatch_queue_t v7;
  NSObject *v8;
  uint64_t v10;

  if ((a3 & 1) == 0)
    return (AVAudioFormat *)(*(uint64_t (**)(AVAudioIONodeImpl *))(*(_QWORD *)this + 48))(this);
  v3 = *((unsigned __int8 *)this + 176);
  v4 = *((_BYTE *)this + 176) == 0;
  v5 = (dispatch_queue_t *)*((_QWORD *)this + 21);
  dispatch_assert_queue_V2(v5[1]);
  if (v3 == v4)
  {
    v6 = 5;
    if (v3)
      v6 = 4;
    v7 = v5[v6];
    v8 = v7;
    if (v7)
      return (AVAudioFormat *)v7;
  }
  else
  {
    v10 = ((uint64_t (*)(dispatch_queue_t *))(*v5)[2].isa)(v5);
    v7 = (dispatch_queue_t)(*(uint64_t (**)(uint64_t, BOOL, _BOOL8))(*(_QWORD *)v10 + 40))(v10, v3 != 0, v4);
    if (v7)
      return (AVAudioFormat *)v7;
  }
  return +[AVAudioFormat formatWithInvalidSampleRateAndChannelCount](AVAudioFormat, "formatWithInvalidSampleRateAndChannelCount");
}

uint64_t AVAudioIONodeImpl::SetOutputFormat(AVAudioIONodeImpl *this, uint64_t a2, AVAudioFormat *a3)
{
  NSObject *v6;
  double v7;
  NSObject *v8;
  _DWORD *v9;
  void *v12;
  void *v13;
  double v14;
  NSObject *v15;
  double v16;
  double v17;
  double v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  uint8_t buf[4];
  const char *v24;
  __int16 v25;
  int v26;
  __int16 v27;
  char *v28;
  __int16 v29;
  int v30;
  __int16 v31;
  const char *v32;
  __int16 v33;
  const char *v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  if (!*((_BYTE *)this + 176))
  {
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v6 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316418;
      v24 = "AVAEInternal.h";
      v25 = 1024;
      v26 = 71;
      v27 = 2080;
      v28 = "AVAudioIONodeImpl.mm";
      v29 = 1024;
      v30 = 1310;
      v31 = 2080;
      v32 = "SetOutputFormat";
      v33 = 2080;
      v34 = "_isInput";
      _os_log_impl(&dword_19B733000, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "_isInput");
    if (!a3)
      goto LABEL_11;
LABEL_9:
    -[AVAudioFormat sampleRate](a3, "sampleRate");
    if (v7 > 0.0 && -[AVAudioFormat channelCount](a3, "channelCount"))
      goto LABEL_16;
    goto LABEL_11;
  }
  if (a3)
    goto LABEL_9;
LABEL_11:
  if (AVAudioEngineLogCategory(void)::once != -1)
    dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
  v8 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
  if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136316418;
    v24 = "AVAEInternal.h";
    v25 = 1024;
    v26 = 71;
    v27 = 2080;
    v28 = "AVAudioIONodeImpl.mm";
    v29 = 1024;
    v30 = 1311;
    v31 = 2080;
    v32 = "SetOutputFormat";
    v33 = 2080;
    v34 = "IsFormatSampleRateAndChannelCountValid(format)";
    _os_log_impl(&dword_19B733000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
  }
  objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "IsFormatSampleRateAndChannelCountValid(format)");
LABEL_16:
  v9 = (_DWORD *)(*(uint64_t (**)(AVAudioIONodeImpl *))(*(_QWORD *)this + 256))(this);
  if (*v9 != 1635086197 || v9[1] != 1987078511 || v9[2] != 1634758764)
  {
    v12 = (void *)(*(uint64_t (**)(AVAudioIONodeImpl *, uint64_t))(*(_QWORD *)this + 72))(this, a2);
    v13 = v12;
    if (!v12 || (objc_msgSend(v12, "sampleRate"), v14 <= 0.0) || !objc_msgSend(v13, "channelCount"))
    {
      if (AVAudioEngineLogCategory(void)::once != -1)
        dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
      v15 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
      if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136316418;
        v24 = "AVAEInternal.h";
        v25 = 1024;
        v26 = 71;
        v27 = 2080;
        v28 = "AVAudioIONodeImpl.mm";
        v29 = 1024;
        v30 = 1316;
        v31 = 2080;
        v32 = "SetOutputFormat";
        v33 = 2080;
        v34 = "IsFormatSampleRateAndChannelCountValid(hwFormat)";
        _os_log_impl(&dword_19B733000, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
      }
      objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "IsFormatSampleRateAndChannelCountValid(hwFormat)");
    }
    -[AVAudioFormat sampleRate](a3, "sampleRate");
    v17 = v16;
    objc_msgSend(v13, "sampleRate");
    if (v17 != v18)
    {
      if (AVAudioEngineLogCategory(void)::once != -1)
        dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
      v19 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
      if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136316418;
        v24 = "AVAEInternal.h";
        v25 = 1024;
        v26 = 71;
        v27 = 2080;
        v28 = "AVAudioIONodeImpl.mm";
        v29 = 1024;
        v30 = 1317;
        v31 = 2080;
        v32 = "SetOutputFormat";
        v33 = 2080;
        v34 = "format.sampleRate == hwFormat.sampleRate";
        _os_log_impl(&dword_19B733000, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
      }
      objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "format.sampleRate == hwFormat.sampleRate");
    }
  }
  v20 = (*(uint64_t (**)(AVAudioIONodeImpl *))(*(_QWORD *)this + 40))(this);
  v21 = (*(uint64_t (**)(AVAudioIONodeImpl *, uint64_t))(*(_QWORD *)this + 240))(this, a2);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, AVAudioFormat *))(*(_QWORD *)v20 + 48))(v20, 0, v21, a3);
}

AVAudioFormat *AVAudioIONodeImpl::GetInputFormat(AVAudioIONodeImpl *this)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  if (*((_BYTE *)this + 176))
  {
    v2 = *((unsigned __int8 *)this + 48);
    if (!*((_BYTE *)this + 48))
    {
      v6 = (*(uint64_t (**)(AVAudioIONodeImpl *))(*(_QWORD *)this + 40))(this);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6))
        return +[AVAudioFormat formatWithInvalidSampleRateAndChannelCount](AVAudioFormat, "formatWithInvalidSampleRateAndChannelCount");
    }
    v3 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)this + 21) + 24))(*((_QWORD *)this + 21), 1, 0);
    if (!v2)
    {
      v4 = (*(uint64_t (**)(AVAudioIONodeImpl *))(*(_QWORD *)this + 40))(this);
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
    }
    if (!v3)
      return +[AVAudioFormat formatWithInvalidSampleRateAndChannelCount](AVAudioFormat, "formatWithInvalidSampleRateAndChannelCount");
    return (AVAudioFormat *)v3;
  }
  v3 = (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)this + 21) + 32))(*((_QWORD *)this + 21), 0);
  if (v3)
    return (AVAudioFormat *)v3;
  return +[AVAudioFormat formatWithInvalidSampleRateAndChannelCount](AVAudioFormat, "formatWithInvalidSampleRateAndChannelCount");
}

uint64_t AVAudioIONodeImpl::SetInputFormat(AVAudioIONodeImpl *this, uint64_t a2, AVAudioFormat *a3)
{
  NSObject *v6;
  double v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  int v15;
  __int16 v16;
  char *v17;
  __int16 v18;
  int v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  const char *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 176))
  {
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v6 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316418;
      v13 = "AVAEInternal.h";
      v14 = 1024;
      v15 = 71;
      v16 = 2080;
      v17 = "AVAudioIONodeImpl.mm";
      v18 = 1024;
      v19 = 1325;
      v20 = 2080;
      v21 = "SetInputFormat";
      v22 = 2080;
      v23 = "!_isInput";
      _os_log_impl(&dword_19B733000, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "!_isInput");
  }
  if (!a3
    || (-[AVAudioFormat sampleRate](a3, "sampleRate"), v7 <= 0.0)
    || !-[AVAudioFormat channelCount](a3, "channelCount"))
  {
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v8 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316418;
      v13 = "AVAEInternal.h";
      v14 = 1024;
      v15 = 71;
      v16 = 2080;
      v17 = "AVAudioIONodeImpl.mm";
      v18 = 1024;
      v19 = 1326;
      v20 = 2080;
      v21 = "SetInputFormat";
      v22 = 2080;
      v23 = "IsFormatSampleRateAndChannelCountValid(format)";
      _os_log_impl(&dword_19B733000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "IsFormatSampleRateAndChannelCountValid(format)");
  }
  v9 = (*(uint64_t (**)(AVAudioIONodeImpl *))(*(_QWORD *)this + 40))(this);
  v10 = (*(uint64_t (**)(AVAudioIONodeImpl *, uint64_t))(*(_QWORD *)this + 240))(this, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, AVAudioFormat *))(*(_QWORD *)v9 + 48))(v9, 1, v10, a3);
}

uint64_t AVAudioIONodeImpl::NumberInputs(AVAudioIONodeImpl *this)
{
  return 1;
}

uint64_t AVAudioIONodeImpl::NumberOutputs(AVAudioIONodeImpl *this)
{
  return 1;
}

void AVAudioIONodeImpl::AddStreamFormatObserver(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  NSObject *v3;
  _QWORD v4[6];

  v2 = *(_QWORD *)(a1 + 168);
  v3 = *(NSObject **)(v2 + 8);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = ___ZN13AVAudioIOUnit23AddStreamFormatObserverERK30AVAEStreamFormatObserverStruct_block_invoke;
  v4[3] = &__block_descriptor_48_e5_v8__0l;
  v4[4] = v2;
  v4[5] = a2;
  dispatch_sync(v3, v4);
}

void AVAudioIONodeImpl::RemoveStreamFormatObserver(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  NSObject *v3;
  _QWORD v4[6];

  v2 = *(_QWORD *)(a1 + 168);
  v3 = *(NSObject **)(v2 + 8);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = ___ZN13AVAudioIOUnit26RemoveStreamFormatObserverERK30AVAEStreamFormatObserverStruct_block_invoke;
  v4[3] = &__block_descriptor_48_e5_v8__0l;
  v4[4] = v2;
  v4[5] = a2;
  dispatch_sync(v3, v4);
}

uint64_t AVAudioIONodeImpl::GetDeviceLatency(AVAudioIONodeImpl *this)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)this + 21) + 40))(*((_QWORD *)this + 21), *((unsigned __int8 *)this + 176));
}

uint64_t AVAudioIONodeImpl::GetAudioUnitV2(AVAudioIONodeImpl *this)
{
  uint64_t v1;

  v1 = (*(uint64_t (**)(AVAudioIONodeImpl *))(*(_QWORD *)this + 40))(this);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 272))(v1);
}

uint64_t AVAudioIONodeImpl::GetAudioUnitV3(AVAudioIONodeImpl *this)
{
  uint64_t v1;

  v1 = (*(uint64_t (**)(AVAudioIONodeImpl *))(*(_QWORD *)this + 40))(this);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 304))(v1);
}

uint64_t AVAudioIONodeImpl::ElementForBus(AVAudioIONodeImpl *this)
{
  return *((unsigned __int8 *)this + 176);
}

uint64_t AVAudioIONodeImpl::BusForElement(AVAudioIONodeImpl *this)
{
  return 0;
}

uint64_t AVAudioIONodeImpl::GetComponentDescription(AVAudioIONodeImpl *this)
{
  return *((_QWORD *)this + 21) + 48;
}

uint64_t ___ZN13AVAudioIOUnit26RemoveStreamFormatObserverERK30AVAEStreamFormatObserverStruct_block_invoke(uint64_t result)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;

  v1 = *(_QWORD *)(result + 32);
  v3 = *(_QWORD **)(v1 + 72);
  v2 = *(_QWORD **)(v1 + 80);
  if (v3 != v2)
  {
    v4 = *(_QWORD **)(result + 40);
    v5 = *(_QWORD **)(v1 + 72);
    while (*v5 != *v4 || v5[1] != v4[1])
    {
      v5 += 2;
      if (v5 == v2)
      {
        v5 = *(_QWORD **)(v1 + 80);
        break;
      }
    }
    if (v5 != v2)
    {
      if (v3 == v2)
      {
        v6 = *(_QWORD **)(v1 + 72);
      }
      else
      {
        v6 = *(_QWORD **)(v1 + 72);
        while (*v6 != *v4 || v6[1] != v4[1])
        {
          v6 += 2;
          if (v6 == v2)
          {
            v6 = *(_QWORD **)(v1 + 80);
            break;
          }
        }
      }
      if (v6 != v2)
      {
        v7 = v6 + 2;
        if (v6 + 2 != v2)
        {
          do
          {
            if (*v7 != *v4 || v7[1] != v4[1])
            {
              *(_OWORD *)v6 = *(_OWORD *)v7;
              v6 += 2;
            }
            v7 += 2;
          }
          while (v7 != v2);
          v2 = *(_QWORD **)(v1 + 80);
        }
        if (v2 != v6)
          *(_QWORD *)(v1 + 80) = v6;
      }
    }
  }
  return result;
}

void ___ZN13AVAudioIOUnit23AddStreamFormatObserverERK30AVAEStreamFormatObserverStruct_block_invoke(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  char *v3;
  char *v4;
  char *v5;
  unint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;

  v1 = *(_QWORD **)(a1 + 32);
  v2 = *(_QWORD **)(a1 + 40);
  v3 = (char *)v1[9];
  v4 = (char *)v1[10];
  if (v3 == v4)
  {
    v5 = (char *)v1[9];
  }
  else
  {
    v5 = (char *)v1[9];
    while (*(_QWORD *)v5 != *v2 || *((_QWORD *)v5 + 1) != v2[1])
    {
      v5 += 16;
      if (v5 == v4)
      {
        v5 = (char *)v1[10];
        break;
      }
    }
  }
  if (v5 == v4)
  {
    v6 = v1[11];
    if ((unint64_t)v4 >= v6)
    {
      v8 = (v4 - v3) >> 4;
      v9 = v8 + 1;
      if ((unint64_t)(v8 + 1) >> 60)
        std::vector<EExtAudioGraphNodeState>::__throw_length_error[abi:ne180100]();
      v10 = v6 - (_QWORD)v3;
      if (v10 >> 3 > v9)
        v9 = v10 >> 3;
      if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0)
        v11 = 0xFFFFFFFFFFFFFFFLL;
      else
        v11 = v9;
      if (v11)
      {
        if (v11 >> 60)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v12 = (char *)operator new(16 * v11);
      }
      else
      {
        v12 = 0;
      }
      v13 = &v12[16 * v8];
      *(_OWORD *)v13 = *(_OWORD *)v2;
      v7 = v13 + 16;
      if (v3 != v4)
      {
        do
        {
          *((_OWORD *)v13 - 1) = *((_OWORD *)v4 - 1);
          v13 -= 16;
          v4 -= 16;
        }
        while (v4 != v3);
        v3 = (char *)v1[9];
      }
      v1[9] = v13;
      v1[10] = v7;
      v1[11] = &v12[16 * v11];
      if (v3)
        operator delete(v3);
    }
    else
    {
      *(_OWORD *)v4 = *(_OWORD *)v2;
      v7 = v4 + 16;
    }
    v1[10] = v7;
  }
}

unsigned int **AVAudioIOUnit::Create(AVAudioIOUnit *this, AVAudioEngineImpl *a2, int a3, AVAudioSession *a4, AVAudioSession *a5)
{
  const char *v8;
  AVAudioIOUnit *v9;
  UInt32 v10;
  AUInterfaceBaseV3 **v11;
  NSObject *v12;
  NSObject *global_queue;
  AUInterfaceBaseV3 *v14;
  void (**v15)(AUInterfaceIOV3 *__hidden);
  AUInterfaceBaseV3 *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int **result;
  unsigned int *v20;
  unsigned int *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  char *v26;
  char *v27;
  __int128 v28;
  AudioComponentDescription v29;
  uint8_t buf[4];
  const char *v31;
  __int16 v32;
  int v33;
  __int16 v34;
  char *v35;
  __int16 v36;
  int v37;
  __int16 v38;
  const char *v39;
  __int16 v40;
  const char *v41;
  __int16 v42;
  int v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  if (a3)
    v8 = "uouaoipvlppa";
  else
    v8 = "uouacoirlppa";
  v9 = (AVAudioIOUnit *)operator new();
  v28 = *(_OWORD *)v8;
  *(_OWORD *)&v29.componentType = *(_OWORD *)v8;
  v10 = *((_DWORD *)v8 + 4);
  v29.componentFlagsMask = v10;
  *(_QWORD *)v9 = &off_1E3BE65A8;
  *((_QWORD *)v9 + 2) = a2;
  *((_QWORD *)v9 + 3) = 0;
  v11 = (AUInterfaceBaseV3 **)((char *)v9 + 24);
  *((_QWORD *)v9 + 9) = 0;
  *((_QWORD *)v9 + 10) = 0;
  *((_QWORD *)v9 + 11) = 0;
  *((_QWORD *)v9 + 4) = 0;
  *((_QWORD *)v9 + 5) = 0;
  v12 = dispatch_queue_create("AVAudioIOUnit", 0);
  *((_QWORD *)v9 + 1) = v12;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_set_target_queue(v12, global_queue);
  v26 = (char *)v9 + 72;
  v27 = (char *)v9 + 24;
  if (v29.componentType == 1635086197 && v29.componentSubType == 1987078511 && v29.componentManufacturer == 1634758764)
  {
    v14 = (AUInterfaceBaseV3 *)operator new();
    AUInterfaceBaseV3::AUInterfaceBaseV3(v14, &v29, 0);
    v15 = &off_1E3BE8230;
  }
  else
  {
    v14 = (AUInterfaceBaseV3 *)operator new();
    AUInterfaceBaseV3::AUInterfaceBaseV3(v14, &v29, 0);
    v15 = &off_1E3BE6940;
  }
  *(_QWORD *)v14 = v15;
  v16 = *v11;
  *v11 = v14;
  if (v16)
    (*(void (**)(AUInterfaceBaseV3 *))(*(_QWORD *)v16 + 8))(v16);
  *((_OWORD *)v9 + 3) = v28;
  *((_DWORD *)v9 + 16) = v10;
  v17 = (*(uint64_t (**)(AVAudioIOUnit *))(*(_QWORD *)v9 + 16))(v9);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v17 + 280))(v17, 1, 0);
  v18 = (*(uint64_t (**)(AVAudioIOUnit *))(*(_QWORD *)v9 + 16))(v9);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v18 + 280))(v18, 0, 0);
  AVAudioIOUnit::OverrideAudioSession(v9, a4);
  result = (unsigned int **)IOUnitPropertyList();
  v20 = *result;
  v21 = result[1];
  if (*result != v21)
  {
    do
    {
      v22 = *v20;
      v23 = (*(uint64_t (**)(AVAudioIOUnit *))(*(_QWORD *)v9 + 16))(v9);
      result = (unsigned int **)(*(uint64_t (**)(uint64_t, uint64_t, void (*)(NSObject **, void *, OpaqueAudioComponentInstance *, int, int), AVAudioIOUnit *))(*(_QWORD *)v23 + 256))(v23, v22, AVAudioIOUnit::IOUnitPropertyListener, v9);
      v24 = (uint64_t)result;
      if ((_DWORD)result)
      {
        if (AVAudioEngineLogCategory(void)::once != -1)
          dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
        v25 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
        if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136316674;
          v31 = "AVAEInternal.h";
          v32 = 1024;
          v33 = 104;
          v34 = 2080;
          v35 = "AVAudioIONodeImpl.mm";
          v36 = 1024;
          v37 = 207;
          v38 = 2080;
          v39 = "AVAudioIOUnit";
          v40 = 2080;
          v41 = "AUI().AddV2PropertyListener(propID, IOUnitPropertyListener, this)";
          v42 = 1024;
          v43 = v24;
          _os_log_impl(&dword_19B733000, v25, OS_LOG_TYPE_ERROR, "%25s:%-5d [%s:%d:%s: (%s): error %d", buf, 0x3Cu);
        }
        result = (unsigned int **)objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("error %d"), v24, v26, v27);
      }
      ++v20;
    }
    while (v20 != v21);
  }
  *(_QWORD *)this = v9;
  return result;
}

void sub_19B81971C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t *a11)
{
  uint64_t v11;
  uint64_t v12;
  void *v14;
  uint64_t v15;

  MEMORY[0x1A1AC5BD4](v12, 0x10A1C4060B6163ELL);
  v14 = *a10;
  if (*a10)
  {
    *(_QWORD *)(v11 + 80) = v14;
    operator delete(v14);
  }
  v15 = *a11;
  *a11 = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  MEMORY[0x1A1AC5BD4](v11, 0x10A1C402E4ADA58);
  _Unwind_Resume(a1);
}

uint64_t AVAudioIOUnit::OverrideAudioSession(AVAudioIOUnit *this, AVAudioSession *a2)
{
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  int v8;
  uint8_t buf[4];
  const char *v10;
  __int16 v11;
  int v12;
  __int16 v13;
  uint64_t v14;
  __int16 v15;
  int v16;
  __int16 v17;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (!a2)
    return 0;
  v8 = -[AVAudioSession opaqueSessionID](a2, "opaqueSessionID");
  v3 = (*(uint64_t (**)(AVAudioIOUnit *))(*(_QWORD *)this + 16))(this);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, int *, uint64_t))(*(_QWORD *)v3 + 232))(v3, 2023, 0, 0, &v8, 4);
  if (AVAudioEngineLogCategory(void)::once != -1)
    dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
  v5 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
  if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *((_QWORD *)this + 2);
    *(_DWORD *)buf = 136316162;
    v10 = "AVAudioIONodeImpl.mm";
    v11 = 1024;
    v12 = 235;
    v13 = 2048;
    v14 = v6;
    v15 = 1024;
    v16 = v8;
    v17 = 1024;
    v18 = v4;
    _os_log_impl(&dword_19B733000, v5, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Engine@%p: associating with audio session (0x%x), error %d", buf, 0x28u);
  }
  return v4;
}

void AUInterfaceVoiceIOV3::~AUInterfaceVoiceIOV3(const void ***this)
{
  AUInterfaceBaseV3::~AUInterfaceBaseV3(this);
  JUMPOUT(0x1A1AC5BD4);
}

uint64_t ___ZN13AVAudioIOUnit9EnableBusEj_block_invoke(uint64_t a1)
{
  _BOOL8 v1;
  uint64_t v2;

  v1 = *(_DWORD *)(a1 + 40) != 0;
  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
  return (*(uint64_t (**)(uint64_t, _BOOL8, uint64_t))(*(_QWORD *)v2 + 280))(v2, v1, 1);
}

uint64_t AVAudioIOUnit::CanPerformIO(AVAudioIOUnit *this, int a2)
{
  NSObject *v2;
  uint64_t v3;
  _QWORD block[6];
  int v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  char v10;

  v7 = 0;
  v8 = &v7;
  v9 = 0x2020000000;
  v10 = 0;
  v2 = *((_QWORD *)this + 1);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZNK13AVAudioIOUnit12CanPerformIOEj_block_invoke;
  block[3] = &unk_1E3BEC9C0;
  v6 = a2;
  block[4] = &v7;
  block[5] = this;
  dispatch_sync(v2, block);
  v3 = *((unsigned __int8 *)v8 + 24);
  _Block_object_dispose(&v7, 8);
  return v3;
}

uint64_t ___ZNK13AVAudioIOUnit12CanPerformIOEj_block_invoke(uint64_t a1)
{
  _BOOL8 v2;
  uint64_t v3;
  uint64_t result;

  v2 = *(_DWORD *)(a1 + 48) != 0;
  v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40));
  result = (*(uint64_t (**)(uint64_t, _BOOL8))(*(_QWORD *)v3 + 80))(v3, v2);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_19B819EB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{

  _Unwind_Resume(a1);
}

void sub_19B81A280(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19B81A614(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, void *a18)
{

  _Unwind_Resume(a1);
}

void sub_19B81AB18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19B81AE28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{

  _Unwind_Resume(a1);
}

void sub_19B81B2F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19B81B680(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  std::shared_ptr<AVVCRecordingEngine>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19B81B9E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19B81BCD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{

  _Unwind_Resume(a1);
}

void sub_19B81C020(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, CallbackMessenger *a9)
{
  void *v9;
  id *v10;

  std::unique_ptr<CallbackMessenger>::reset[abi:ne180100](&a9);

  MEMORY[0x1A1AC5BD4](v10, 0xA0C40B908FCF4);
  _Unwind_Resume(a1);
}

void sub_19B81C3D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, CallbackMessenger *a9)
{
  void *v9;
  void *v10;
  id *v11;
  void *v12;

  std::unique_ptr<CallbackMessenger>::reset[abi:ne180100](&a9);

  MEMORY[0x1A1AC5BD4](v11, 0xA0C40B908FCF4);
  _Unwind_Resume(a1);
}

void sub_19B81C574(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19B81C618(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)AVAudioSequencer;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_19B81C730(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19B81C8BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{

  _Unwind_Resume(a1);
}

void sub_19B81C9B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19B81CA5C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19B81CB00(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19B81CC58(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19B81CCF4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19B81CE28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19B81D0AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19B81E134(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19B81E1C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19B81E254(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19B81E2E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19B81E374(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19B81E404(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19B81E494(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19B81E524(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19B81E5B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19B81E7D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19B81E9A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19B81EA5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19B81EDCC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19B81EEB0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AC5BD4](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

void sub_19B81FA80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19B81FB70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19B81FD04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

void sub_19B81FEA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

void sub_19B820040(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&_ZGVZZ42__AVAudioUnitDSPGraph_loadAudioDSPManager_EUb_E8instance);
  _Unwind_Resume(a1);
}

void sub_19B8202AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19B82033C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19B8204A0(_Unwind_Exception *a1)
{
  id *v1;
  _QWORD *v2;
  id *v3;

  AVAudioBufferCache::~AVAudioBufferCache(v3);
  std::__list_imp<AUGraphConnection>::clear(v2);
  AVAudioUnitImpl::~AVAudioUnitImpl(v1);
  MEMORY[0x1A1AC5BD4](v1, 0x10B1C40FB79B7E4);
  _Unwind_Resume(a1);
}

void sub_19B8208AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  MEMORY[0x1A1AC5BD4](v3, 0x10A1C404C1B6C09);
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19B820C00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19B82112C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19B8211D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19B821274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19B82130C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19B8213A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19B8216DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  _Unwind_Resume(exception_object);
}

void sub_19B8218A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19B821924(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19B8219E4(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;
  std::recursive_mutex *v2;

  std::recursive_mutex::unlock(v2);
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

AVAudioTime *AVAudioPlayerNodeImpl::PlayerTimeForNodeTime(AVAudioPlayerNodeImpl *this, AVAudioTime *a2)
{
  __int128 v3;
  int v4;
  void *v5;
  double v7;
  double v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  if (*((_DWORD *)this + 48) != 1)
    return 0;
  v3 = 0uLL;
  v15 = 0u;
  v16 = 0u;
  v13 = 0u;
  v14 = 0u;
  if (!a2
    || (-[AVAudioTime audioTimeStamp](a2, "audioTimeStamp"), v3 = 0uLL, LOBYTE(v4) = BYTE8(v16), (~DWORD2(v16) & 3) != 0))
  {
    v11 = v3;
    v12 = v3;
    v9 = v3;
    v10 = v3;
    v5 = (void *)(*(uint64_t (**)(AVAudioPlayerNodeImpl *))(*(_QWORD *)this + 352))(this);
    if (v5)
    {
      objc_msgSend(v5, "currentAudioTimeStamp");
    }
    else
    {
      v11 = 0u;
      v12 = 0u;
      v9 = 0u;
      v10 = 0u;
    }
    objc_msgSend(*((id *)this + 23), "sampleRate", v9);
    v4 = DWORD2(v16);
    if ((~DWORD2(v16) & 7) != 0 && (BYTE8(v16) & 3) != 0 && (BYTE8(v12) & 3) == 3)
    {
      if ((BYTE8(v16) & 4) != 0)
      {
        v8 = *(double *)&v14;
        if ((BYTE8(v16) & 2) == 0)
          goto LABEL_22;
      }
      else
      {
        v8 = 1.0;
        if ((BYTE8(v12) & 4) == 0)
        {
          if ((BYTE8(v16) & 2) != 0)
            goto LABEL_14;
LABEL_22:
          *((_QWORD *)&v13 + 1) = (unint64_t)((double)*((uint64_t *)&v9 + 1)
                                                   + (*(double *)&v13 - *(double *)&v9) * (v8 * 24000000.0 / v7));
          if ((v4 & 1) != 0)
            goto LABEL_16;
          goto LABEL_15;
        }
        v4 = DWORD2(v16) | 4;
        v8 = *(double *)&v10;
        *(_QWORD *)&v14 = v10;
        if ((BYTE8(v16) & 2) == 0)
          goto LABEL_22;
      }
LABEL_14:
      if ((v4 & 1) != 0)
      {
LABEL_16:
        v4 |= 3u;
        DWORD2(v16) = v4;
        goto LABEL_17;
      }
LABEL_15:
      *(double *)&v13 = *(double *)&v9
                      + round(v7 / (v8 * 24000000.0) * (double)(uint64_t)(*((_QWORD *)&v13 + 1) - *((_QWORD *)&v9 + 1)));
      goto LABEL_16;
    }
  }
LABEL_17:
  DWORD2(v12) = v4 & 7;
  *(_QWORD *)&v10 = v14;
  *((_QWORD *)&v9 + 1) = *((_QWORD *)&v13 + 1);
  *(double *)&v9 = *(double *)&v13 - *((double *)this + 25);
  objc_msgSend(*((id *)this + 23), "sampleRate", (_QWORD)v9, *((_QWORD *)&v13 + 1), __PAIR128__(*((unint64_t *)&v10 + 1), v14), v11, v12);
  return +[AVAudioTime timeWithAudioTimeStamp:sampleRate:](AVAudioTime, "timeWithAudioTimeStamp:sampleRate:", &v9);
}

void AVAudioPlayerNodeImpl::ScheduleSegment(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, const void *a7)
{
  double v14;
  void *v15;
  double v16;
  double v17;
  double v18;
  uint64_t v19;
  id v20;

  objc_opt_class();
  v14 = 1.0;
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v15 = a2;
    goto LABEL_7;
  }
  v15 = (void *)objc_msgSend(*(id *)(a1 + 264), "objectForKey:", a2);
  if (v15)
  {
    if ((a4 & 0x8000000000000000) == 0)
    {
LABEL_5:
      objc_msgSend(*(id *)(a1 + 184), "sampleRate");
      v17 = v16;
      objc_msgSend((id)objc_msgSend(v15, "fileFormat"), "sampleRate");
      v14 = v17 / v18;
LABEL_7:
      v19 = operator new();
      AVAudioPlayerNodeImpl::Command::Command(v19, a1, 2, a5, a6, a7);
      *(_QWORD *)v19 = &off_1E3BE9B48;
      *(_QWORD *)(v19 + 88) = v15;
      *(double *)(v19 + 96) = v14;
      *(_QWORD *)(v19 + 104) = a3;
      *(_QWORD *)(v19 + 112) = a4 + a3;
      *(_BYTE *)(v19 + 128) = 0;
      *(_DWORD *)(v19 + 132) = 0;
      *(_QWORD *)(v19 + 136) = a6;
      *(_QWORD *)(v19 + 120) = a3;
LABEL_8:
      AVAudioPlayerNodeImpl::CommandQueue::AddCommand((unint64_t *)(a1 + 216), v19);
      return;
    }
LABEL_4:
    a4 = objc_msgSend(v15, "length");
    goto LABEL_5;
  }
  v20 = -[AVAudioFile initSecondaryReader:format:error:]([AVAudioFile alloc], "initSecondaryReader:format:error:", a2, *(_QWORD *)(a1 + 184), 0);
  if (v20)
  {
    v15 = v20;
    objc_msgSend(*(id *)(a1 + 264), "setObject:forKey:", v20, a2);

    if ((a4 & 0x8000000000000000) == 0)
      goto LABEL_5;
    goto LABEL_4;
  }
  if (a7)
  {
    v19 = operator new();
    AVAudioPlayerNodeImpl::Command::Command(v19, a1, 3, 0, a6, a7);
    *(_QWORD *)v19 = &off_1E3BE9B18;
    goto LABEL_8;
  }
}

void sub_19B821D84(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AC5BD4](v1, 0x10A1C402D66DAB1);
  _Unwind_Resume(a1);
}

uint64_t AVAudioPlayerNodeImpl::Command::Command(uint64_t a1, uint64_t a2, int a3, void *a4, uint64_t a5, const void *a6)
{
  id v10;
  const void **v11;

  *(_QWORD *)a1 = off_1E3BE9BD0;
  *(_QWORD *)(a1 + 8) = a2;
  v10 = a4;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = a3;
  *(_BYTE *)(a1 + 36) = 0;
  *(_QWORD *)(a1 + 40) = a5;
  *(_BYTE *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 80) = 0;
  if (a6)
  {
    v11 = (const void **)operator new();
    *v11 = 0;
    *v11 = _Block_copy(a6);
    std::unique_ptr<AVAEBlock<void({block_pointer})(AVAudioPlayerNodeCompletionCallbackType)>>::reset[abi:ne180100]((const void ***)(a1 + 48), v11);
  }
  return a1;
}

void sub_19B821E74(_Unwind_Exception *a1)
{
  uint64_t v1;
  const void ***v2;
  uint64_t v3;

  MEMORY[0x1A1AC5BD4](v3, 0x80C40B8603338);
  if (*(_BYTE *)(v1 + 80))
    std::unique_ptr<AVAEBlock<void({block_pointer})(AVAudioPlayerNodeCompletionCallbackType)>>::reset[abi:ne180100]((const void ***)(v1 + 72), 0);
  std::unique_ptr<AVAEBlock<void({block_pointer})(AVAudioPlayerNodeCompletionCallbackType)>>::reset[abi:ne180100](v2, 0);
  _Unwind_Resume(a1);
}

void AVAudioPlayerNodeImpl::CommandQueue::AddCommand(unint64_t *a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  NSObject *v4;
  _QWORD block[5];

LABEL_1:
  v2 = *a1;
  *(_QWORD *)(a2 + 24) = *a1;
  do
  {
    v3 = __ldaxr(a1);
    if (v3 != v2)
    {
      __clrex();
      goto LABEL_1;
    }
  }
  while (__stlxr(a2, a1));
  v4 = a1[1];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN21AVAudioPlayerNodeImpl12CommandQueue10WakeWorkerEv_block_invoke;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = a1;
  dispatch_async(v4, block);
}

  v4 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    do
    {
      v5 = __ldaxr((unint64_t *)this);
      if (v5 != v4)
      {
        __clrex();
        goto LABEL_1;
      }
    }
    while (__stlxr(0, (unint64_t *)this));
    v6 = 0;
    do
    {
      v7 = v6;
      v6 = v4;
      v4 = *(_QWORD *)(v4 + 24);
      *(_QWORD *)(v6 + 24) = v7;
    }
    while (v4);
    do
    {
      v8 = operator new(0x18uLL);
      v8[1] = (char *)this + 16;
      v8[2] = v6;
      v9 = *((_QWORD *)this + 2);
      *v8 = v9;
      *(_QWORD *)(v9 + 8) = v8;
      *((_QWORD *)this + 2) = v8;
      v10 = *((_QWORD *)this + 4) + 1;
      *((_QWORD *)this + 4) = v10;
      v6 = *(_QWORD *)(v6 + 24);
    }
    while (v6);
    if (v10)
    {
      while (1)
      {
LABEL_9:
        v11 = (uint64_t *)*((_QWORD *)this + 3);
        v12 = v11[2];
        if (a2)
        {
          if (v12)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v11[2]);
            v11 = (uint64_t *)*((_QWORD *)this + 3);
            v10 = *((_QWORD *)this + 4);
          }
          v13 = *v11;
          *(_QWORD *)(v13 + 8) = v11[1];
          *(_QWORD *)v11[1] = v13;
          *((_QWORD *)this + 4) = v10 - 1;
          operator delete(v11);
LABEL_19:
          v10 = *((_QWORD *)this + 4);
          if (!v10)
            return;
        }
        else
        {
          if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v12 + 16))(v11[2]))
            return;
          v14 = (*(uint64_t (**)(uint64_t, AVAudioPlayerNodeImpl::CommandQueue *))(*(_QWORD *)v12 + 24))(v12, this);
          v16 = v15;
          if ((v14 & 1) != 0)
          {
            v17 = (uint64_t *)*((_QWORD *)this + 3);
            v18 = *((_QWORD *)this + 4);
            v19 = *v17;
            *(_QWORD *)(v19 + 8) = v17[1];
            *(_QWORD *)v17[1] = v19;
            *((_QWORD *)this + 4) = v18 - 1;
            operator delete(v17);
          }
          if (!v16)
            goto LABEL_19;
          v20 = operator new(0x18uLL);
          v21 = (_QWORD *)*((_QWORD *)this + 3);
          v22 = *((_QWORD *)this + 4);
          *v20 = (char *)this + 16;
          v20[1] = v21;
          v20[2] = v16;
          *v21 = v20;
          v10 = v22 + 1;
          *((_QWORD *)this + 3) = v20;
          *((_QWORD *)this + 4) = v22 + 1;
          if (v22 == -1)
            return;
        }
      }
    }
  }
  else
  {
    v10 = *((_QWORD *)this + 4);
    if (v10)
      goto LABEL_9;
  }
}

void ___ZN21AVAudioPlayerNodeImpl12CommandQueue10WakeWorkerEv_block_invoke(uint64_t a1)
{
  AVAudioPlayerNodeImpl::CommandQueue::PerformWork(*(AVAudioPlayerNodeImpl::CommandQueue **)(a1 + 32), 0);
}

void AVAudioPlayerNodeImpl::CommandQueue::PerformWork(AVAudioPlayerNodeImpl::CommandQueue *this, int a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;

void AVAudioPlayerNodeImpl::Command::~Command(AVAudioPlayerNodeImpl::Command *this)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  const void ***v6;
  const void **v7;
  const void *v8;
  NSObject *v9;
  const void **v10;
  NSObject *v11;
  BOOL v13;
  NSObject *v14;
  uint64_t *v15;
  uint64_t *v16;
  NSObject *v17;
  double v18;
  double v19;
  double v20;
  uint64_t v21;
  double v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  const void **v30;
  unint64_t v31;
  uint64_t *v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  uint64_t *v40;
  uint64_t v41;
  _BYTE buf[44];
  __int16 v43;
  const char *v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = off_1E3BE9BD0;
  v2 = *((_QWORD *)this + 1);
  v3 = *((_DWORD *)this + 8);
  v4 = *((unsigned __int8 *)this + 36);
  v5 = *((_QWORD *)this + 5);
  v6 = (const void ***)((char *)this + 48);
  v7 = (const void **)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3 || *(_BYTE *)(v2 + 49))
  {
    if (!v7)
      goto LABEL_17;
  }
  else
  {
    v11 = *(NSObject **)(v2 + 224);
    *(_QWORD *)buf = MEMORY[0x1E0C809B0];
    *(_QWORD *)&buf[8] = 3221225472;
    *(_QWORD *)&buf[16] = ___ZN21AVAudioPlayerNodeImpl12CommandQueue10WakeWorkerEv_block_invoke;
    *(_QWORD *)&buf[24] = &__block_descriptor_40_e5_v8__0l;
    *(_QWORD *)&buf[32] = v2 + 216;
    dispatch_async(v11, buf);
    if (!v7)
      goto LABEL_17;
  }
  v8 = *v7;
  if (!*v7)
  {
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v9 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316418;
      *(_QWORD *)&buf[4] = "AVAEInternal.h";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 71;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = "AVAudioPlayerNode.mm";
      *(_WORD *)&buf[28] = 1024;
      *(_DWORD *)&buf[30] = 895;
      *(_WORD *)&buf[34] = 2080;
      *(_QWORD *)&buf[36] = "HandleCompletionOfCommand";
      v43 = 2080;
      v44 = "completionHandler != nil";
      _os_log_impl(&dword_19B733000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "completionHandler != nil");
    goto LABEL_16;
  }
  if (v3 == 3 || !v5)
  {
    CallCompletionHandler(*(dispatch_queue_t *)(v2 + 272), v5, (uint64_t)v8);
    goto LABEL_16;
  }
  if (v5 == 1)
  {
    if (v3 == 1)
    {
      CallCompletionHandler(*(dispatch_queue_t *)(v2 + 272), 0, (uint64_t)v8);
      goto LABEL_35;
    }
LABEL_32:
    if (v3 && v3 != 2)
      goto LABEL_16;
    v16 = (uint64_t *)v7;
    v7 = 0;
LABEL_45:
    if (!*v16)
    {
      if (AVAudioEngineLogCategory(void)::once != -1)
        dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
      v17 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
      if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136316418;
        *(_QWORD *)&buf[4] = "AVAEInternal.h";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 71;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = "AVAudioPlayerNode.mm";
        *(_WORD *)&buf[28] = 1024;
        *(_DWORD *)&buf[30] = 1004;
        *(_WORD *)&buf[34] = 2080;
        *(_QWORD *)&buf[36] = "SignalEndOfRender";
        v43 = 2080;
        v44 = "completionHandlerWrapperPtr && completionHandlerWrapperPtr->Block()";
        _os_log_impl(&dword_19B733000, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
      }
      objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "completionHandlerWrapperPtr && completionHandlerWrapperPtr->Block()", v16);
    }
    if (v5 == 1 || !v4)
      goto LABEL_59;
    v18 = (*(double (**)(uint64_t))(*(_QWORD *)v2 + 400))(v2);
    objc_msgSend(*(id *)(v2 + 184), "sampleRate");
    v19 = 0.0;
    if (v20 > 0.0)
    {
      v21 = objc_msgSend((id)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 352))(v2), "currentIONumberFrames");
      objc_msgSend(*(id *)(v2 + 184), "sampleRate");
      v19 = (double)v21 / v22;
    }
    v23 = v18 + v19;
    if (v23 <= 0.0)
    {
LABEL_59:
      CallCompletionHandler(*(dispatch_queue_t *)(v2 + 272), v5, *v16);
      v30 = AVAEBlock<void({block_pointer})(AVAudioPlayerNodeCompletionCallbackType)>::~AVAEBlock((const void **)v16);
      MEMORY[0x1A1AC5BD4](v30, 0x80C40B8603338);
      goto LABEL_60;
    }
    v24 = operator new();
    v25 = *(_QWORD *)(v2 + 272);
    *(_QWORD *)v24 = 0;
    *(_QWORD *)(v24 + 8) = v25;
    *(_QWORD *)(v24 + 16) = v16;
    v26 = operator new();
    *(_QWORD *)v26 = v25;
    *(_QWORD *)(v26 + 8) = 0;
    *(_BYTE *)(v26 + 16) = 0;
    *(_QWORD *)(v26 + 48) = 0;
    *(_BYTE *)(v26 + 56) = 0;
    std::unique_ptr<AVAEDispatchQueueTimer>::reset[abi:ne180100]((_QWORD **)v24, (_QWORD *)v26);
    v27 = *(_QWORD **)v24;
    *(_QWORD *)buf = &off_1E3BE9C78;
    *(_QWORD *)&buf[8] = v24;
    *(_QWORD *)&buf[24] = buf;
    AVAEDispatchQueueTimer::StartTimer((uint64_t)v27, 1, buf, v23, 0.0);
    v28 = *(_QWORD **)&buf[24];
    if (*(_BYTE **)&buf[24] == buf)
    {
      v29 = 4;
      v28 = buf;
    }
    else
    {
      if (!*(_QWORD *)&buf[24])
      {
LABEL_64:
        v32 = *(uint64_t **)(v2 + 288);
        v31 = *(_QWORD *)(v2 + 296);
        if ((unint64_t)v32 >= v31)
        {
          v34 = *(_QWORD **)(v2 + 280);
          v35 = v32 - v34;
          v36 = v35 + 1;
          if ((unint64_t)(v35 + 1) >> 61)
            std::vector<EExtAudioGraphNodeState>::__throw_length_error[abi:ne180100]();
          v37 = v31 - (_QWORD)v34;
          if (v37 >> 2 > v36)
            v36 = v37 >> 2;
          if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8)
            v38 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v38 = v36;
          if (v38)
          {
            if (v38 >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v39 = (char *)operator new(8 * v38);
          }
          else
          {
            v39 = 0;
          }
          v40 = (uint64_t *)&v39[8 * v35];
          *v40 = v24;
          v33 = v40 + 1;
          if (v32 != v34)
          {
            do
            {
              v41 = *--v32;
              *--v40 = v41;
            }
            while (v32 != v34);
            v32 = *(uint64_t **)(v2 + 280);
          }
          *(_QWORD *)(v2 + 280) = v40;
          *(_QWORD *)(v2 + 288) = v33;
          *(_QWORD *)(v2 + 296) = &v39[8 * v38];
          if (v32)
            operator delete(v32);
        }
        else
        {
          *v32 = v24;
          v33 = v32 + 1;
        }
        *(_QWORD *)(v2 + 288) = v33;
        goto LABEL_60;
      }
      v29 = 5;
    }
    (*(void (**)(void))(*v28 + 8 * v29))();
    goto LABEL_64;
  }
  v13 = v5 == 2 && *(_BYTE *)(v2 + 72) == 0;
  if (v3 != 1)
  {
    if (!v13)
      goto LABEL_16;
    goto LABEL_32;
  }
  CallCompletionHandler(*(dispatch_queue_t *)(v2 + 272), 0, (uint64_t)v8);
  if (!v13)
    goto LABEL_16;
LABEL_35:
  if (!*((_BYTE *)this + 80))
  {
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v14 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316418;
      *(_QWORD *)&buf[4] = "AVAEInternal.h";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 71;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = "AVAudioPlayerNode.mm";
      *(_WORD *)&buf[28] = 1024;
      *(_DWORD *)&buf[30] = 927;
      *(_WORD *)&buf[34] = 2080;
      *(_QWORD *)&buf[36] = "HandleCompletionOfCommand";
      v43 = 2080;
      v44 = "bufferFromFileInfo.has_value()";
      _os_log_impl(&dword_19B733000, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "bufferFromFileInfo.has_value()");
  }
  if (*((_BYTE *)this + 56))
  {
    v15 = (uint64_t *)*((_QWORD *)this + 9);
    *((_QWORD *)this + 9) = 0;
    if (v15)
    {
      v16 = v15;
      goto LABEL_45;
    }
LABEL_16:
    v10 = AVAEBlock<void({block_pointer})(AVAudioPlayerNodeCompletionCallbackType)>::~AVAEBlock(v7);
    MEMORY[0x1A1AC5BD4](v10, 0x80C40B8603338);
    goto LABEL_17;
  }
LABEL_60:
  if (v7)
    goto LABEL_16;
LABEL_17:

  if (*((_BYTE *)this + 80))
    std::unique_ptr<AVAEBlock<void({block_pointer})(AVAudioPlayerNodeCompletionCallbackType)>>::reset[abi:ne180100]((const void ***)this + 9, 0);
  std::unique_ptr<AVAEBlock<void({block_pointer})(AVAudioPlayerNodeCompletionCallbackType)>>::reset[abi:ne180100](v6, 0);
}

void sub_19B822818(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void **a10, const void **a11, const void **a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, __int16 *a18)
{
  _QWORD **v18;
  const void ***v19;
  __int16 *v21;
  uint64_t v22;

  if (!a2)
    _Unwind_Resume(exception_object);
  v21 = a18;
  if (a18 == &a13)
  {
    v22 = 4;
    v21 = &a13;
  }
  else
  {
    if (!a18)
      goto LABEL_7;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_7:
  std::unique_ptr<AVAEBlock<void({block_pointer})(AVAudioPlayerNodeCompletionCallbackType)>>::reset[abi:ne180100](v19, 0);
  std::unique_ptr<AVAEDispatchQueueTimer>::reset[abi:ne180100](v18, 0);
  std::unique_ptr<AVAEBlock<void({block_pointer})(AVAudioPlayerNodeCompletionCallbackType)>>::reset[abi:ne180100](&a12, 0);
  MEMORY[0x1A1AC5BD4](v18, 0xA0C40A8488062);
  std::unique_ptr<AVAEBlock<void({block_pointer})(AVAudioPlayerNodeCompletionCallbackType)>>::reset[abi:ne180100](&a10, 0);
  std::unique_ptr<AVAEBlock<void({block_pointer})(AVAudioPlayerNodeCompletionCallbackType)>>::reset[abi:ne180100](&a11, 0);
  __clang_call_terminate(exception_object);
}

const void **AVAEBlock<void({block_pointer})(AVAudioPlayerNodeCompletionCallbackType)>::~AVAEBlock(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
  {
    _Block_release(v2);
    *a1 = 0;
  }
  return a1;
}

const void **std::unique_ptr<AVAEBlock<void({block_pointer})(AVAudioPlayerNodeCompletionCallbackType)>>::reset[abi:ne180100](const void ***a1, const void **a2)
{
  const void **result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    AVAEBlock<void({block_pointer})(AVAudioPlayerNodeCompletionCallbackType)>::~AVAEBlock(result);
    JUMPOUT(0x1A1AC5BD4);
  }
  return result;
}

void CallCompletionHandler(dispatch_queue_t queue, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  _QWORD block[6];
  uint8_t buf[4];
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  char *v13;
  __int16 v14;
  int v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  const char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    if (queue)
    {
LABEL_3:
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = ___ZL21CallCompletionHandlerPU28objcproto17OS_dispatch_queue8NSObject39AVAudioPlayerNodeCompletionCallbackTypeU13block_pointerFvS2_E_block_invoke;
      block[3] = &unk_1E3BECB48;
      block[4] = a3;
      block[5] = a2;
      dispatch_sync(queue, block);
      return;
    }
  }
  else
  {
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v6 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316418;
      v9 = "AVAEInternal.h";
      v10 = 1024;
      v11 = 71;
      v12 = 2080;
      v13 = "AVAudioPlayerNode.mm";
      v14 = 1024;
      v15 = 66;
      v16 = 2080;
      v17 = "CallCompletionHandler";
      v18 = 2080;
      v19 = "completionHandler";
      _os_log_impl(&dword_19B733000, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "completionHandler");
    if (queue)
      goto LABEL_3;
  }
  (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a3, a2);
}

void std::__function::__func<CompletionHandlerTimer::CompletionHandlerTimer(double,NSObject  {objcproto17OS_dispatch_queue}*,std::unique_ptr<AVAEBlock<void({block_pointer})(AVAudioPlayerNodeCompletionCallbackType)>>)::{lambda(BOOL)#1},std::allocator<CompletionHandlerTimer::CompletionHandlerTimer(double,NSObject  {objcproto17OS_dispatch_queue}*,std::unique_ptr<AVAEBlock<void({block_pointer})(AVAudioPlayerNodeCompletionCallbackType)>>)::{lambda(BOOL)#1}>,void ()(BOOL)>::~__func()
{
  JUMPOUT(0x1A1AC5BD4);
}

_QWORD *std::__function::__func<CompletionHandlerTimer::CompletionHandlerTimer(double,NSObject  {objcproto17OS_dispatch_queue}*,std::unique_ptr<AVAEBlock<void({block_pointer})(AVAudioPlayerNodeCompletionCallbackType)>>)::{lambda(BOOL)#1},std::allocator<CompletionHandlerTimer::CompletionHandlerTimer(double,NSObject  {objcproto17OS_dispatch_queue}*,std::unique_ptr<AVAEBlock<void({block_pointer})(AVAudioPlayerNodeCompletionCallbackType)>>)::{lambda(BOOL)#1}>,void ()(BOOL)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E3BE9C78;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<CompletionHandlerTimer::CompletionHandlerTimer(double,NSObject  {objcproto17OS_dispatch_queue}*,std::unique_ptr<AVAEBlock<void({block_pointer})(AVAudioPlayerNodeCompletionCallbackType)>>)::{lambda(BOOL)#1},std::allocator<CompletionHandlerTimer::CompletionHandlerTimer(double,NSObject  {objcproto17OS_dispatch_queue}*,std::unique_ptr<AVAEBlock<void({block_pointer})(AVAudioPlayerNodeCompletionCallbackType)>>)::{lambda(BOOL)#1}>,void ()(BOOL)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E3BE9C78;
  a2[1] = v2;
  return result;
}

void std::__function::__func<CompletionHandlerTimer::CompletionHandlerTimer(double,NSObject  {objcproto17OS_dispatch_queue}*,std::unique_ptr<AVAEBlock<void({block_pointer})(AVAudioPlayerNodeCompletionCallbackType)>>)::{lambda(BOOL)#1},std::allocator<CompletionHandlerTimer::CompletionHandlerTimer(double,NSObject  {objcproto17OS_dispatch_queue}*,std::unique_ptr<AVAEBlock<void({block_pointer})(AVAudioPlayerNodeCompletionCallbackType)>>)::{lambda(BOOL)#1}>,void ()(BOOL)>::operator()(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;
  NSObject *v3;

  v2 = *(_QWORD *)(a1 + 8);
  if (*a2)
    v3 = 0;
  else
    v3 = *(NSObject **)(v2 + 8);
  CallCompletionHandler(v3, 2, **(_QWORD **)(v2 + 16));
}

uint64_t ___ZL21CallCompletionHandlerPU28objcproto17OS_dispatch_queue8NSObject39AVAudioPlayerNodeCompletionCallbackTypeU13block_pointerFvS2_E_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

void AVAudioPlayerNodeImpl::FileCommand::~FileCommand(id *this)
{
  AVAudioPlayerNodeImpl::FileCommand::~FileCommand(this);
  JUMPOUT(0x1A1AC5BD4);
}

{
  *this = &off_1E3BE9B48;

  AVAudioPlayerNodeImpl::Command::~Command((AVAudioPlayerNodeImpl::Command *)this);
}

BOOL AVAudioPlayerNodeImpl::FileCommand::ShouldPerform(AVAudioPlayerNodeImpl::FileCommand *this)
{
  uint64_t v1;
  double v2;
  unsigned int v3;
  double v4;
  unsigned int v5;

  v1 = *((_QWORD *)this + 1);
  objc_msgSend(*(id *)(v1 + 184), "sampleRate");
  v3 = (v2 * 1.5);
  objc_msgSend(*(id *)(v1 + 184), "sampleRate");
  v5 = (((v4 * 1.5) >> 2) + 1023) & 0x7FFFFC00;
  return *(_DWORD *)(v1 + 196) <= v3 - v5 && v5 != 0;
}

BOOL AVAudioPlayerNodeImpl::FileCommand::Perform(id *this, id *a2)
{
  int v4;
  id *v5;
  double v6;
  unsigned int v7;
  double v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  AVAudioPCMBuffer *v13;
  AVAudioPCMBuffer *v14;
  AVAudioPCMBuffer *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  _BOOL8 v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  const void **v25;
  int v26;
  __int128 v28;
  _QWORD v29[7];
  _QWORD v30[3];
  char v31;
  uint64_t v32;

  v4 = *((unsigned __int8 *)this + 128);
  if (!*((_BYTE *)this + 128))
  {
    objc_msgSend(this[11], "setFramePosition:", this[13]);
    *((_BYTE *)this + 128) = 1;
  }
  v5 = (id *)this[1];
  objc_msgSend(v5[23], "sampleRate");
  v7 = (v6 * 1.5);
  objc_msgSend(v5[23], "sampleRate");
  LODWORD(v9) = (((v8 * 1.5) >> 2) + 1023) & 0x7FFFFC00;
  v10 = (double)((_BYTE *)this[14] - (_BYTE *)this[15]) * *((double *)this + 12) + 0.5;
  if (*((_DWORD *)v5 + 49) <= v7 - v9)
    v9 = v9;
  else
    v9 = 0;
  if ((uint64_t)v10 >= v9)
    v11 = v9;
  else
    v11 = (uint64_t)v10;
  v12 = *((_QWORD *)this[1] + 23);
  v13 = (AVAudioPCMBuffer *)objc_msgSend(a2[5], "anyObject");
  if (v13)
  {
    v14 = v13;
    if (-[AVAudioPCMBuffer frameCapacity](v13, "frameCapacity") >= v11
      && -[AVAudioFormat isEqual:](-[AVAudioBuffer format](v14, "format"), "isEqual:", v12))
    {
      v15 = v14;
      objc_msgSend(a2[5], "removeObject:", v14);
      goto LABEL_15;
    }
    objc_msgSend(a2[5], "removeObject:", v14);
  }
  v14 = -[AVAudioPCMBuffer initWithPCMFormat:frameCapacity:]([AVAudioPCMBuffer alloc], "initWithPCMFormat:frameCapacity:", v12, v11);
  if (!v14)
  {
LABEL_20:
    (*((void (**)(id *))*this + 1))(this);
    return 1;
  }
LABEL_15:
  v32 = 0;
  if ((objc_msgSend(this[11], "readIntoBuffer:frameCount:error:", v14, v11, &v32) & 1) == 0)
    goto LABEL_20;
  if (!*((_BYTE *)this + 36))
    *((_BYTE *)this + 36) = 1;
  v30[0] = 0;
  v30[1] = v30;
  v30[2] = 0x2020000000;
  v31 = 0;
  v16 = operator new();
  v17 = v16;
  v18 = (uint64_t)this[1];
  if (v4)
    v19 = 0;
  else
    v19 = this[2];
  v21 = (uint64_t)this[17];
  v29[0] = MEMORY[0x1E0C809B0];
  v29[1] = 3221225472;
  v29[2] = ___ZN21AVAudioPlayerNodeImpl11FileCommand7PerformERNS_12CommandQueueE_block_invoke;
  v29[3] = &unk_1E3BECB70;
  v29[5] = v30;
  v29[6] = a2;
  v29[4] = v14;
  AVAudioPlayerNodeImpl::BufferCommand::BufferCommand(v16, v18, 1, v19, 0, v21, v29, v14);
  LOBYTE(v28) = 0;
  v22 = *((_DWORD *)this + 33) + 1;
  *((_DWORD *)this + 33) = v22;
  DWORD1(v28) = v22;
  *((_QWORD *)&v28 + 1) = this;
  v23 = objc_msgSend(this[11], "framePosition");
  this[15] = (id)v23;
  v24 = (uint64_t)this[14] - 2;
  if (v23 < v24)
  {
    v25 = 0;
  }
  else
  {
    LOBYTE(v28) = 1;
    if ((char *)this[17] - 1 > (char *)1)
    {
      v25 = 0;
    }
    else
    {
      v25 = (const void **)this[6];
      this[6] = 0;
    }
    (*((void (**)(id *))*this + 1))(this);
  }
  v26 = *(unsigned __int8 *)(v17 + 80);
  *(_OWORD *)(v17 + 56) = v28;
  if (v26)
  {
    std::unique_ptr<AVAEBlock<void({block_pointer})(AVAudioPlayerNodeCompletionCallbackType)>>::reset[abi:ne180100]((const void ***)(v17 + 72), v25);
  }
  else
  {
    *(_QWORD *)(v17 + 72) = v25;
    *(_BYTE *)(v17 + 80) = 1;
  }
  v20 = v23 >= v24;
  _Block_object_dispose(v30, 8);
  return v20;
}

void sub_19B822F6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  const void ***v12;
  va_list va;

  va_start(va, a12);
  std::unique_ptr<AVAEBlock<void({block_pointer})(AVAudioPlayerNodeCompletionCallbackType)>>::reset[abi:ne180100](v12, 0);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ___ZN21AVAudioPlayerNodeImpl11FileCommand7PerformERNS_12CommandQueueE_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  _QWORD v5[6];

  if (!*(_BYTE *)(*(_QWORD *)(a1[5] + 8) + 24))
  {
    v2 = a1[6];
    v3 = a1[4];
    v4 = *(NSObject **)(v2 + 8);
    v5[0] = MEMORY[0x1E0C809B0];
    v5[1] = 3221225472;
    v5[2] = ___ZN21AVAudioPlayerNodeImpl12CommandQueue14BufferCompleteEP16AVAudioPCMBuffer_block_invoke;
    v5[3] = &unk_1E3BECB98;
    v5[4] = v3;
    v5[5] = v2;
    dispatch_async(v4, v5);
    *(_BYTE *)(*(_QWORD *)(a1[5] + 8) + 24) = 1;
  }
}

uint64_t AVAudioPlayerNodeImpl::BufferCommand::BufferCommand(uint64_t a1, uint64_t a2, int a3, void *a4, uint64_t a5, uint64_t a6, const void *a7, void *a8)
{
  uint64_t v11;

  v11 = AVAudioPlayerNodeImpl::Command::Command(a1, a2, a3, a4, a6, a7);
  *(_BYTE *)(v11 + 104) = 0;
  *(_QWORD *)v11 = &off_1E3BE9B78;
  *(_QWORD *)(v11 + 88) = &unk_1E3BE9BA8;
  *(_QWORD *)(v11 + 96) = 0;
  *(_QWORD *)(a1 + 112) = a8;
  *(_QWORD *)(a1 + 120) = a5;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  CADeprecated::TSingleton<CADeprecated::RealtimeDeallocator>::instance();
  return a1;
}

void sub_19B8230B4(_Unwind_Exception *a1)
{
  AVAudioPlayerNodeImpl::Command *v1;

  AVAudioPlayerNodeImpl::Command::~Command(v1);
  _Unwind_Resume(a1);
}

uint64_t CADeprecated::TSingleton<CADeprecated::RealtimeDeallocator>::instance()
{
  unint64_t v0;
  char v2;
  char **v3;
  char *v4;

  v0 = atomic_load(&CADeprecated::TSingleton<CADeprecated::RealtimeDeallocator>::sOnce);
  if (v0 != -1)
  {
    v4 = &v2;
    v3 = &v4;
    std::__call_once(&CADeprecated::TSingleton<CADeprecated::RealtimeDeallocator>::sOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<CADeprecated::TSingleton<CADeprecated::RealtimeDeallocator>::instance(void)::{lambda(void)#1} &&>>);
  }
  return CADeprecated::TSingleton<CADeprecated::RealtimeDeallocator>::sInstance;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<CADeprecated::TSingleton<CADeprecated::RealtimeDeallocator>::instance(void)::{lambda(void)#1} &&>>()
{
  uint64_t v0;
  dispatch_object_t object;

  v0 = operator new();
  object = 0;
  CADeprecated::RealtimeMessenger::RealtimeMessenger(v0, &object);
  if (object)
    dispatch_release(object);
  __dmb(0xBu);
  CADeprecated::TSingleton<CADeprecated::RealtimeDeallocator>::sInstance = v0;
}

void sub_19B823184(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object)
{
  uint64_t v10;

  if (object)
    dispatch_release(object);
  MEMORY[0x1A1AC5BD4](v10, 0x10A0C404FA34CF3);
  _Unwind_Resume(a1);
}

void AVAudioPlayerNodeImpl::BufferCommand::~BufferCommand(AVAudioPlayerNodeImpl::BufferCommand *this)
{
  AVAudioPlayerNodeImpl::BufferCommand::~BufferCommand(this);
  JUMPOUT(0x1A1AC5BD4);
}

{
  *(_QWORD *)this = &off_1E3BE9B78;
  *((_QWORD *)this + 11) = &unk_1E3BE9BA8;

  AVAudioPlayerNodeImpl::Command::~Command(this);
}

BOOL AVAudioPlayerNodeImpl::BufferCommand::ShouldPerform(AVAudioPlayerNodeImpl::BufferCommand *this)
{
  void *v2;

  v2 = (void *)*((_QWORD *)this + 2);
  return !v2 || (objc_msgSend(v2, "isSampleTimeValid") & 1) != 0 || *(_DWORD *)(*((_QWORD *)this + 1) + 192) == 1;
}

uint64_t AVAudioPlayerNodeImpl::BufferCommand::Perform(AVAudioPlayerNodeImpl::BufferCommand *this, AVAudioPlayerNodeImpl::CommandQueue *a2)
{
  unsigned int *v3;
  int v4;
  _DWORD *v5;
  void *v6;
  uint64_t v7;
  AVAudioTime *v8;
  NSObject *v9;
  AVAudioTime *v10;
  NSObject *v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  int v19;
  __int16 v20;
  char *v21;
  __int16 v22;
  int v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  const char *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v3 = (unsigned int *)*((_QWORD *)this + 1);
  v4 = objc_msgSend(*((id *)this + 14), "frameLength");
  *((_DWORD *)this + 46) = 0;
  *((_QWORD *)this + 24) = AVAudioPlayerNodeImpl::BufferCommand::SliceComplete;
  *((_QWORD *)this + 25) = this;
  *((_QWORD *)this + 26) = 0;
  v5 = (_DWORD *)((char *)this + 208);
  *((_QWORD *)this + 27) = 0;
  *((_DWORD *)this + 56) = objc_msgSend(*((id *)this + 14), "frameLength");
  *((_QWORD *)this + 29) = objc_msgSend(*((id *)this + 14), "mutableAudioBufferList");
  if (*((_BYTE *)v3 + 72))
  {
    v6 = (void *)*((_QWORD *)this + 2);
    if (!v6)
      goto LABEL_23;
    if (objc_msgSend(v6, "isSampleTimeValid"))
    {
      *((_DWORD *)this + 46) = 1;
      v7 = objc_msgSend(*((id *)this + 2), "sampleTime");
      goto LABEL_22;
    }
    if (*((_BYTE *)v3 + 72))
      goto LABEL_23;
  }
  v8 = (AVAudioTime *)*((_QWORD *)this + 2);
  if (!v8)
    goto LABEL_23;
  if ((objc_msgSend(*((id *)this + 2), "isSampleTimeValid") & 1) == 0)
  {
    if (!-[AVAudioTime isHostTimeValid](v8, "isHostTimeValid"))
    {
      if (AVAudioEngineLogCategory(void)::once != -1)
        dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
      v9 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
      if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136316418;
        v17 = "AVAEInternal.h";
        v18 = 1024;
        v19 = 71;
        v20 = 2080;
        v21 = "AVAudioPlayerNode.mm";
        v22 = 1024;
        v23 = 989;
        v24 = 2080;
        v25 = "ResolveToPlayerSampleTime";
        v26 = 2080;
        v27 = "when.hostTimeValid";
        _os_log_impl(&dword_19B733000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
      }
      objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "when.hostTimeValid");
    }
    v10 = AVAudioPlayerNodeImpl::PlayerTimeForNodeTime((AVAudioPlayerNodeImpl *)v3, v8);
    v8 = v10;
    if (!v10 || !-[AVAudioTime isSampleTimeValid](v10, "isSampleTimeValid"))
    {
      if (AVAudioEngineLogCategory(void)::once != -1)
        dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
      v11 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
      if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136316418;
        v17 = "AVAEInternal.h";
        v18 = 1024;
        v19 = 71;
        v20 = 2080;
        v21 = "AVAudioPlayerNode.mm";
        v22 = 1024;
        v23 = 992;
        v24 = 2080;
        v25 = "ResolveToPlayerSampleTime";
        v26 = 2080;
        v27 = "playerTime && playerTime.sampleTimeValid";
        _os_log_impl(&dword_19B733000, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
      }
      objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "playerTime && playerTime.sampleTimeValid");
    }
  }
  v7 = -[AVAudioTime sampleTime](v8, "sampleTime");
  *((_DWORD *)this + 46) = 1;
LABEL_22:
  *((double *)this + 16) = (double)v7;
LABEL_23:
  v12 = *((_QWORD *)this + 15);
  if ((v12 & 1) != 0)
  {
    *v5 |= 8u;
    if ((v12 & 2) == 0)
    {
LABEL_25:
      if ((v12 & 4) == 0)
        goto LABEL_27;
      goto LABEL_26;
    }
  }
  else if ((v12 & 2) == 0)
  {
    goto LABEL_25;
  }
  *v5 |= 0x10u;
  if ((v12 & 4) != 0)
LABEL_26:
    *v5 |= 0x20u;
LABEL_27:
  if (((*(uint64_t (**)(unsigned int *, uint64_t, _QWORD, _QWORD, char *, uint64_t))(*(_QWORD *)v3 + 144))(v3, 3300, 0, 0, (char *)this + 128, 112) & 1) != 0)
  {
    v13 = v3 + 49;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + v4, v13));
  }
  else
  {
    (*(void (**)(AVAudioPlayerNodeImpl::BufferCommand *))(*(_QWORD *)this + 8))(this);
  }
  return 1;
}

void sub_19B8235D4(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void `non-virtual thunk to'AVAudioPlayerNodeImpl::BufferCommand::~BufferCommand(AVAudioPlayerNodeImpl::BufferCommand *this)
{
  AVAudioPlayerNodeImpl::BufferCommand::~BufferCommand((AVAudioPlayerNodeImpl::BufferCommand *)((char *)this - 88));
}

{
  AVAudioPlayerNodeImpl::BufferCommand::~BufferCommand((AVAudioPlayerNodeImpl::BufferCommand *)((char *)this - 88));
  JUMPOUT(0x1A1AC5BD4);
}

uint64_t CADeprecated::RealtimeDeallocator::Object::RealtimeMessenger_Perform(uint64_t this)
{
  if (this)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
  return this;
}

void AVAudioPlayerNodeImpl::BufferCommand::SliceComplete(AVAudioPlayerNodeImpl::BufferCommand *this, void *a2, ScheduledAudioSlice *a3)
{
  int v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  _QWORD block[5];

  v4 = -*((_DWORD *)this + 56);
  v5 = (unsigned int *)(*((_QWORD *)this + 1) + 196);
  do
    v6 = __ldxr(v5);
  while (__stxr(v6 + v4, v5));
  *((_BYTE *)this + 36) = (*((_DWORD *)this + 52) & 6) != 0;
  v7 = *((_QWORD *)this + 1);
  if (*(_BYTE *)(v7 + 49))
  {
    v8 = *(NSObject **)(v7 + 224);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = ___ZN21AVAudioPlayerNodeImpl12CommandQueue14WakeWorkerSyncEv_block_invoke;
    block[3] = &__block_descriptor_40_e5_v8__0l;
    block[4] = v7 + 216;
    dispatch_sync(v8, block);
  }
  v9 = CADeprecated::TSingleton<CADeprecated::RealtimeDeallocator>::instance();
  CADeprecated::RealtimeMessenger::PerformAsync(v9, (_BYTE *)this + 88);
}

void ___ZN21AVAudioPlayerNodeImpl12CommandQueue14WakeWorkerSyncEv_block_invoke(uint64_t a1)
{
  AVAudioPlayerNodeImpl::CommandQueue::PerformWork(*(AVAudioPlayerNodeImpl::CommandQueue **)(a1 + 32), 0);
}

void ___ZN21AVAudioPlayerNodeImpl12CommandQueue14BufferCompleteEP16AVAudioPCMBuffer_block_invoke(uint64_t a1)
{
  id *v1;

  v1 = *(id **)(a1 + 40);
  if (*(_QWORD *)(a1 + 32))
    objc_msgSend(v1[5], "addObject:");
  AVAudioPlayerNodeImpl::CommandQueue::PerformWork((AVAudioPlayerNodeImpl::CommandQueue *)v1, 0);
}

void AVAudioPlayerNodeImpl::NilCommand::~NilCommand(AVAudioPlayerNodeImpl::NilCommand *this)
{
  AVAudioPlayerNodeImpl::Command::~Command(this);
  JUMPOUT(0x1A1AC5BD4);
}

uint64_t AVAudioPlayerNodeImpl::NilCommand::ShouldPerform(AVAudioPlayerNodeImpl::NilCommand *this)
{
  return 1;
}

uint64_t AVAudioPlayerNodeImpl::NilCommand::Perform(AVAudioPlayerNodeImpl::NilCommand *this, AVAudioPlayerNodeImpl::CommandQueue *a2)
{
  if (this)
    (*(void (**)(AVAudioPlayerNodeImpl::NilCommand *, AVAudioPlayerNodeImpl::CommandQueue *))(*(_QWORD *)this + 8))(this, a2);
  return 1;
}

void AVAudioPlayerNodeImpl::CommandQueue::~CommandQueue(AVAudioPlayerNodeImpl::CommandQueue *this)
{
  NSObject *v2;
  _QWORD block[5];

  v2 = *((_QWORD *)this + 1);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN21AVAudioPlayerNodeImpl12CommandQueue5ResetEv_block_invoke;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = this;
  dispatch_sync(v2, block);
  dispatch_release(*((dispatch_object_t *)this + 1));

  std::__list_imp<AUGraphConnection>::clear((_QWORD *)this + 2);
}

void ___ZN21AVAudioPlayerNodeImpl12CommandQueue5ResetEv_block_invoke(uint64_t a1)
{
  AVAudioPlayerNodeImpl::CommandQueue::PerformWork(*(AVAudioPlayerNodeImpl::CommandQueue **)(a1 + 32), 1);
}

void AVAudioBufferCache::~AVAudioBufferCache(id *this)
{

}

void AVAudioPlayerNodeImpl::~AVAudioPlayerNodeImpl(AVAudioPlayerNodeImpl *this)
{
  AVAudioPlayerNodeImpl::~AVAudioPlayerNodeImpl(this);
  JUMPOUT(0x1A1AC5BD4);
}

{
  uint64_t v2;
  void *v3;

  *(_QWORD *)this = &off_1E3BE8588;
  AVAudioPlayerNodeImpl::StopImpl(this);
  v2 = *((_QWORD *)this + 1);
  if (v2)
    AVAudioEngineImpl::NodeRenderingStateChanged(*(AVAudioEngineImpl **)(v2 + 8), (AVAudioNodeImplBase *)this);
  dispatch_sync(*((dispatch_queue_t *)this + 34), &__block_literal_global_7004);
  dispatch_release(*((dispatch_object_t *)this + 34));

  v3 = (void *)*((_QWORD *)this + 35);
  if (v3)
  {
    *((_QWORD *)this + 36) = v3;
    operator delete(v3);
  }
  AVAudioPlayerNodeImpl::CommandQueue::~CommandQueue((AVAudioPlayerNodeImpl *)((char *)this + 216));
  AVAudioUnitImpl::~AVAudioUnitImpl((id *)this);
}

uint64_t AVAudioPlayerNodeImpl::GetOutputFormat(AVAudioPlayerNodeImpl *this, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v2 = a2;
  if (a2)
    goto LABEL_2;
  result = *((_QWORD *)this + 23);
  if (!result)
  {
    v2 = 0;
LABEL_2:
    v4 = (*(uint64_t (**)(AVAudioPlayerNodeImpl *))(*(_QWORD *)this + 40))(this);
    v5 = (*(uint64_t (**)(AVAudioPlayerNodeImpl *, uint64_t))(*(_QWORD *)this + 240))(this, v2);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v4 + 40))(v4, 0, v5);
  }
  return result;
}

uint64_t AVAudioPlayerNodeImpl::SetOutputFormat(id *this, uint64_t a2, AVAudioFormat *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  AVAudioFormat *v10;

  v6 = (*((uint64_t (**)(id *))*this + 5))(this);
  v7 = (*((uint64_t (**)(id *, uint64_t))*this + 30))(this, a2);
  v8 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, AVAudioFormat *))(*(_QWORD *)v6 + 48))(v6, 0, v7, a3);
  v9 = v8;
  if (!a2 && (_DWORD)v8)
  {

    this[23] = a3;
    v10 = a3;
  }
  return v9;
}

uint64_t AVAudioPlayerNodeImpl::Reset(AVAudioPlayerNodeImpl *this)
{
  uint64_t v2;
  uint64_t result;

  v2 = (*(uint64_t (**)(AVAudioPlayerNodeImpl *))(*(_QWORD *)this + 40))(this);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 56))(v2);
  if (*((_BYTE *)this + 72))
  {
    *((_QWORD *)this + 25) = 0;
    *((_QWORD *)this + 26) = 0;
  }
  return result;
}

void AVAudioPlayerNodeImpl::WillDisconnectFromMixer(AVAudioNodeImplBase *this, AVAudioNode *a2, unsigned int a3, int a4)
{
  uint64_t v5;

  AVAudioNodeImplBase::WillDisconnectFromMixer(this, a2, a3, a4);
  (*(void (**)(AVAudioNodeImplBase *))(*(_QWORD *)this + 456))(this);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    AVAudioEngineImpl::NodeRenderingStateChanged(*(AVAudioEngineImpl **)(v5 + 8), this);
}

BOOL AVAudioPlayerNodeImpl::IsPlayingImpl(AVAudioPlayerNodeImpl *this)
{
  return *((_DWORD *)this + 48) == 1;
}

void AVAudioPlayerNodeImpl::StartImpl(AVAudioPlayerNodeImpl *this, AVAudioTime *a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  _BYTE *v8;
  AVAudioNodeImplBase **v9;
  std::recursive_mutex *v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  unsigned __int8 v14;
  NSObject *v15;
  const char *v16;
  uint8_t *v17;
  NSObject *v18;
  os_log_type_t v19;
  NSObject *v20;
  uint32_t v21;
  uint64_t v22;
  double v23;
  double v24;
  double v25;
  double v26;
  NSObject *v27;
  unsigned __int8 v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  const AudioComponentDescription *v32;
  int16x8_t v33;
  NSObject *v34;
  NSObject *v35;
  NSObject *v36;
  _BOOL4 v37;
  NSError *v38;
  void *v39;
  void *v40;
  int v41;
  unint64_t v42;
  double v43;
  double v44;
  uint64_t v45;
  AVAudioTime *v46;
  AVAudioTime *v47;
  NSError *v48;
  id v49;
  char v50;
  _BYTE block[40];
  id v52;
  __int16 v53;
  uint8_t *v54;
  uint8_t buf[136];
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  if (a2
    && !-[AVAudioTime isSampleTimeValid](a2, "isSampleTimeValid")
    && !-[AVAudioTime isHostTimeValid](a2, "isHostTimeValid"))
  {
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v4 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316418;
      *(_QWORD *)&buf[4] = "AVAEInternal.h";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 71;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = "AVAudioPlayerNode.mm";
      *(_WORD *)&buf[28] = 1024;
      *(_DWORD *)&buf[30] = 580;
      *(_WORD *)&buf[34] = 2080;
      *(_QWORD *)&buf[36] = "StartImpl";
      *(_WORD *)&buf[44] = 2080;
      *(_QWORD *)&buf[46] = "when == nil || when.sampleTimeValid || when.hostTimeValid";
      _os_log_impl(&dword_19B733000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "when == nil || when.sampleTimeValid || when.hostTimeValid");
  }
  (*(void (**)(AVAudioPlayerNodeImpl *))(*(_QWORD *)this + 32))(this);
  v5 = *((_QWORD *)this + 1);
  v6 = *(_QWORD *)(v5 + 8);
  if (!v6)
    goto LABEL_24;
  v7 = *(unsigned __int8 *)(v6 + 208);
  v8 = (_BYTE *)(v6 + 184);
  if (v7)
    v8 = (_BYTE *)(v5 + 64);
  if (!*v8)
  {
LABEL_24:
    v14 = atomic_load((unsigned __int8 *)(v5 + 96));
    if ((v14 & 1) != 0)
    {
      if (AVAudioPlayerNodeLogCategory(void)::once != -1)
        dispatch_once(&AVAudioPlayerNodeLogCategory(void)::once, &__block_literal_global_148);
      v20 = *(NSObject **)AVAudioPlayerNodeLogCategory(void)::category;
      if (!os_log_type_enabled(*(os_log_t *)AVAudioPlayerNodeLogCategory(void)::category, OS_LOG_TYPE_INFO))
        return;
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "AVAudioPlayerNode.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 588;
      *(_WORD *)&buf[18] = 2048;
      *(_QWORD *)&buf[20] = this;
      v16 = "%25s:%-5d Player@%p: Engine is in the middle of a config change, cannot play yet!";
      goto LABEL_34;
    }
    if (AVAudioPlayerNodeLogCategory(void)::once != -1)
      dispatch_once(&AVAudioPlayerNodeLogCategory(void)::once, &__block_literal_global_148);
    v15 = *(NSObject **)AVAudioPlayerNodeLogCategory(void)::category;
    if (!os_log_type_enabled(*(os_log_t *)AVAudioPlayerNodeLogCategory(void)::category, OS_LOG_TYPE_ERROR))
      return;
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "AVAudioPlayerNode.mm";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 594;
    *(_WORD *)&buf[18] = 2048;
    *(_QWORD *)&buf[20] = this;
    v16 = "%25s:%-5d Player@%p: Engine is not running because it was not explicilty started or may have stopped because o"
          "f an interruption. Cannot play yet!";
LABEL_29:
    v17 = buf;
    v18 = v15;
    v19 = OS_LOG_TYPE_ERROR;
LABEL_35:
    v21 = 28;
LABEL_36:
    _os_log_impl(&dword_19B733000, v18, v19, v16, v17, v21);
    return;
  }
  if (!*((_BYTE *)this + 48))
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("player started when in a disconnected state"));
  if (*((_DWORD *)this + 48) == 1)
    return;
  v9 = *(AVAudioNodeImplBase ***)(*((_QWORD *)this + 1) + 8);
  v10 = (std::recursive_mutex *)((char *)*v9 + 112);
  std::recursive_mutex::lock(v10);
  if (*((_BYTE *)v9 + 184))
    goto LABEL_17;
  if (*((_BYTE *)v9 + 187) || !*((_BYTE *)v9 + 208))
  {
    std::recursive_mutex::unlock(v10);
LABEL_40:
    if (AVAudioPlayerNodeLogCategory(void)::once != -1)
      dispatch_once(&AVAudioPlayerNodeLogCategory(void)::once, &__block_literal_global_148);
    v15 = *(NSObject **)AVAudioPlayerNodeLogCategory(void)::category;
    if (!os_log_type_enabled(*(os_log_t *)AVAudioPlayerNodeLogCategory(void)::category, OS_LOG_TYPE_ERROR))
      return;
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "AVAudioPlayerNode.mm";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 608;
    *(_WORD *)&buf[18] = 2048;
    *(_QWORD *)&buf[20] = this;
    v16 = "%25s:%-5d Player@%p: Engine could not start the audio hardware dynamically, cannot play!";
    goto LABEL_29;
  }
  if (AVAudioEngineLogCategory(void)::once != -1)
    dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
  v35 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
  if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "AVAudioEngineGraph.mm";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1512;
    _os_log_impl(&dword_19B733000, v35, OS_LOG_TYPE_DEBUG, "%25s:%-5d AVAudioEngine (auto shutdown mode): starting IO dynamically", buf, 0x12u);
  }
  v48 = 0;
  AVAudioEngineGraph::Start(v9, &v48);
  if (!v48)
  {
LABEL_17:
    std::recursive_mutex::unlock(v10);
    goto LABEL_18;
  }
  if (AVAudioEngineLogCategory(void)::once != -1)
    dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
  v36 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
  v37 = os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR);
  v38 = v48;
  if (v37)
  {
    CAX4CCString::CAX4CCString((CAX4CCString *)block, -[NSError code](v48, "code"));
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "AVAudioEngineGraph.mm";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1517;
    *(_WORD *)&buf[18] = 2080;
    *(_QWORD *)&buf[20] = block;
    _os_log_impl(&dword_19B733000, v36, OS_LOG_TYPE_ERROR, "%25s:%-5d AVAudioEngine (auto shutdown mode): could not dynamically start the audio hardware, err = %s", buf, 0x1Cu);
    v38 = v48;
  }
  std::recursive_mutex::unlock(v10);
  if (v38)
    goto LABEL_40;
LABEL_18:
  (*(void (**)(AVAudioPlayerNodeImpl *))(*(_QWORD *)this + 352))(this);
  if (!a2)
  {
    v11 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
    if (!*(_BYTE *)(v11 + 187))
      goto LABEL_52;
LABEL_45:
    v22 = *(_QWORD *)(v11 + 200);
    objc_msgSend(*((id *)this + 23), "sampleRate");
    v24 = v23;
    -[AVAudioFormat sampleRate](AVAudioEngineImpl::GetManualRenderingFormat(*((AVAudioEngineImpl **)this + 1)), "sampleRate");
    v13 = ceil(v24 * (double)v22 / v25);
    goto LABEL_46;
  }
  if (!-[AVAudioTime isSampleTimeValid](a2, "isSampleTimeValid"))
  {
    v11 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
    if (*(_BYTE *)(v11 + 187))
      goto LABEL_45;
  }
  if (-[AVAudioTime isSampleTimeValid](a2, "isSampleTimeValid"))
  {
    v12 = -[AVAudioTime sampleTime](a2, "sampleTime");
LABEL_23:
    v13 = (double)v12;
LABEL_46:
    v26 = *((double *)this + 25) + v13 - *((double *)this + 26);
    *((double *)this + 25) = v26;
    goto LABEL_47;
  }
  if (*(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) + 187))
  {
    v26 = *((double *)this + 25);
LABEL_47:
    *(_DWORD *)&buf[56] = 1;
    *(double *)buf = v26;
    (*(void (**)(AVAudioPlayerNodeImpl *, uint64_t, _QWORD, _QWORD, uint8_t *, uint64_t))(*(_QWORD *)this
                                                                                                 + 144))(this, 3301, 0, 0, buf, 64);
    *((_DWORD *)this + 48) = 1;
    v27 = *((_QWORD *)this + 28);
    if (*((_BYTE *)this + 49))
    {
      *(_QWORD *)block = MEMORY[0x1E0C809B0];
      *(_QWORD *)&block[8] = 3221225472;
      *(_QWORD *)&block[16] = ___ZN21AVAudioPlayerNodeImpl12CommandQueue14WakeWorkerSyncEv_block_invoke;
      *(_QWORD *)&block[24] = &__block_descriptor_40_e5_v8__0l;
      *(_QWORD *)&block[32] = (char *)this + 216;
      dispatch_sync(v27, block);
    }
    else
    {
      *(_QWORD *)block = MEMORY[0x1E0C809B0];
      *(_QWORD *)&block[8] = 3221225472;
      *(_QWORD *)&block[16] = ___ZN21AVAudioPlayerNodeImpl12CommandQueue10WakeWorkerEv_block_invoke;
      *(_QWORD *)&block[24] = &__block_descriptor_40_e5_v8__0l;
      *(_QWORD *)&block[32] = (char *)this + 216;
      dispatch_async(v27, block);
    }
    return;
  }
LABEL_52:
  if (!*((_BYTE *)this + 72))
  {
    *(_DWORD *)buf = 0;
    v39 = (void *)objc_msgSend((id)(*(uint64_t (**)(AVAudioPlayerNodeImpl *))(*(_QWORD *)this + 352))(this), "awaitIOCycle:", buf);
    v40 = v39;
    if (v39)
    {
      v41 = *(_DWORD *)buf;
      v42 = objc_msgSend(v39, "hostTime");
      objc_msgSend(v40, "sampleRate");
      v44 = v43;
      v45 = objc_msgSend(v40, "sampleTime");
      objc_msgSend(v40, "sampleRate");
      v46 = +[AVAudioTime timeWithHostTime:sampleTime:atRate:](AVAudioTime, "timeWithHostTime:sampleTime:atRate:", (unint64_t)((double)v42 + (double)(2 * v41) / v44 * 24000000.0), (uint64_t)((double)(2 * v41) + (double)v45));
      if (v46)
        goto LABEL_84;
    }
  }
  v28 = atomic_load((unsigned __int8 *)(*((_QWORD *)this + 1) + 96));
  if ((v28 & 1) != 0)
  {
    if (AVAudioPlayerNodeLogCategory(void)::once != -1)
      dispatch_once(&AVAudioPlayerNodeLogCategory(void)::once, &__block_literal_global_148);
    v20 = *(NSObject **)AVAudioPlayerNodeLogCategory(void)::category;
    if (!os_log_type_enabled(*(os_log_t *)AVAudioPlayerNodeLogCategory(void)::category, OS_LOG_TYPE_INFO))
      return;
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "AVAudioPlayerNode.mm";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 650;
    *(_WORD *)&buf[18] = 2048;
    *(_QWORD *)&buf[20] = this;
    v16 = "%25s:%-5d Player@%p: Engine config changed when waiting for playback to begin, cannot play yet!";
    goto LABEL_34;
  }
  if ((AVAudioEngineImpl::IsIOUnitRunning(*((AVAudioEngineImpl **)this + 1)) & 1) == 0)
  {
    if (AVAudioPlayerNodeLogCategory(void)::once != -1)
      dispatch_once(&AVAudioPlayerNodeLogCategory(void)::once, &__block_literal_global_148);
    v20 = *(NSObject **)AVAudioPlayerNodeLogCategory(void)::category;
    if (!os_log_type_enabled(*(os_log_t *)AVAudioPlayerNodeLogCategory(void)::category, OS_LOG_TYPE_INFO))
      return;
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "AVAudioPlayerNode.mm";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 654;
    *(_WORD *)&buf[18] = 2048;
    *(_QWORD *)&buf[20] = this;
    v16 = "%25s:%-5d Player@%p: IOUnit stopped when waiting for playback to begin, cannot play yet!";
LABEL_34:
    v17 = buf;
    v18 = v20;
    v19 = OS_LOG_TYPE_INFO;
    goto LABEL_35;
  }
  AVAudioEngineImpl::LastRenderErrorInChain((AVAudioEngineImpl *)&v48, *(AVAudioNodeImplBase **)(*((_QWORD *)this + 1) + 8), (AVAudioNodeImplBase *)this);
  if (!v50)
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("player did not see an IO cycle."));
    v46 = 0;
LABEL_84:
    if (a2)
    {
      _AVAE_Check("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAudioPlayerNode.mm", 682, "StartImpl", "when.hostTimeValid", -[AVAudioTime isHostTimeValid](a2, "isHostTimeValid"));
      memset(buf, 0, 64);
      -[AVAudioTime audioTimeStamp](a2, "audioTimeStamp");
      objc_msgSend(*((id *)this + 23), "sampleRate");
      v47 = -[AVAudioTime extrapolateTimeFromAnchor:](+[AVAudioTime timeWithAudioTimeStamp:sampleRate:](AVAudioTime, "timeWithAudioTimeStamp:sampleRate:", buf), "extrapolateTimeFromAnchor:", v46);
      _AVAE_Check("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAudioPlayerNode.mm", 687, "StartImpl", "inTimeFull.sampleTimeValid", -[AVAudioTime isSampleTimeValid](v47, "isSampleTimeValid"));
      v12 = -[AVAudioTime sampleTime](v47, "sampleTime");
    }
    else
    {
      _AVAE_Check("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAudioPlayerNode.mm", 673, "StartImpl", "nearFutureTime.sampleTimeValid", -[AVAudioTime isSampleTimeValid](v46, "isSampleTimeValid"));
      v12 = -[AVAudioTime sampleTime](v46, "sampleTime");
    }
    goto LABEL_23;
  }
  v29 = (int)v48;
  v30 = v49;
  v31 = objc_msgSend(v49, "impl");
  v32 = (const AudioComponentDescription *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 256))(v31);
  AudioComponentDescriptionAsString(v32, (char *)buf, v33);
  if (AVAudioPlayerNodeLogCategory(void)::once != -1)
    dispatch_once(&AVAudioPlayerNodeLogCategory(void)::once, &__block_literal_global_148);
  v34 = *(NSObject **)AVAudioPlayerNodeLogCategory(void)::category;
  if (os_log_type_enabled(*(os_log_t *)AVAudioPlayerNodeLogCategory(void)::category, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)block = 136316418;
    *(_QWORD *)&block[4] = "AVAudioPlayerNode.mm";
    *(_WORD *)&block[12] = 1024;
    *(_DWORD *)&block[14] = 662;
    *(_WORD *)&block[18] = 2048;
    *(_QWORD *)&block[20] = this;
    *(_WORD *)&block[28] = 2048;
    *(_QWORD *)&block[30] = v29;
    *(_WORD *)&block[38] = 2048;
    v52 = v30;
    v53 = 2080;
    v54 = buf;
    v16 = "%25s:%-5d Player@%p: Engine returned render error: %ld, node: %p {%s}, cannot play!";
    v17 = block;
    v18 = v34;
    v19 = OS_LOG_TYPE_ERROR;
    v21 = 58;
    goto LABEL_36;
  }
}

void sub_19B82458C(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t AVAudioPlayerNodeImpl::PauseImpl(uint64_t this)
{
  _DWORD *v1;
  _DWORD v2[16];

  if ((*(_DWORD *)(this + 192) | 2) != 2)
  {
    v1 = (_DWORD *)this;
    *(double *)(this + 208) = (double)objc_msgSend((id)objc_msgSend((id)(*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 352))(this), "currentTime"), "sampleTime");
    v1[48] = 2;
    v2[14] = 0;
    return (*(uint64_t (**)(_DWORD *, uint64_t, _QWORD, _QWORD, _DWORD *, uint64_t))(*(_QWORD *)v1 + 144))(v1, 3301, 0, 0, v2, 64);
  }
  return this;
}

uint64_t AVAudioPlayerNodeImpl::StopImpl(AVAudioPlayerNodeImpl *this)
{
  char *v2;
  NSObject *v3;
  CADeprecated::RealtimeMessenger *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  _QWORD block[5];

  v2 = (char *)this + 216;
  v3 = *((_QWORD *)this + 28);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN21AVAudioPlayerNodeImpl12CommandQueue5ResetEv_block_invoke;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = v2;
  dispatch_sync(v3, block);
  (*(void (**)(AVAudioPlayerNodeImpl *))(*(_QWORD *)this + 88))(this);
  (*(void (**)(AVAudioPlayerNodeImpl *))(*(_QWORD *)this + 400))(this);
  v4 = (CADeprecated::RealtimeMessenger *)CADeprecated::TSingleton<CADeprecated::RealtimeDeallocator>::instance();
  CADeprecated::RealtimeMessenger::_PerformPendingMessages(v4);
  v5 = (uint64_t *)*((_QWORD *)this + 35);
  v6 = (uint64_t *)*((_QWORD *)this + 36);
  if (v5 != v6)
  {
    do
    {
      v7 = *v5;
      if (*v5)
      {
        AVAEDispatchQueueTimer::CancelTimer(*(AVAEDispatchQueueTimer **)v7);
        std::unique_ptr<AVAEBlock<void({block_pointer})(AVAudioPlayerNodeCompletionCallbackType)>>::reset[abi:ne180100]((const void ***)(v7 + 16), 0);
        std::unique_ptr<AVAEDispatchQueueTimer>::reset[abi:ne180100]((_QWORD **)v7, 0);
        MEMORY[0x1A1AC5BD4](v7, 0xA0C40A8488062);
      }
      ++v5;
    }
    while (v5 != v6);
    v5 = (uint64_t *)*((_QWORD *)this + 35);
  }
  *((_QWORD *)this + 36) = v5;
  dispatch_sync(*((dispatch_queue_t *)this + 34), &__block_literal_global_155);
  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 25) = 0;
  *((_QWORD *)this + 26) = 0;
  return objc_msgSend(*((id *)this + 33), "removeAllObjects");
}

CFIndex ___ZL28AVAudioPlayerNodeLogCategoryv_block_invoke()
{
  _QWORD *v0;
  CFIndex result;

  v0 = (_QWORD *)operator new();
  v0[1] = 0;
  *v0 = os_log_create("com.apple.avfaudio", "avpln");
  AVAudioPlayerNodeLogCategory(void)::category = (uint64_t)v0;
  result = CFPreferencesGetAppIntegerValue(CFSTR("avpln_verbose"), CFSTR("com.apple.avfaudio"), 0);
  if ((int)result >= 1)
    *(_QWORD *)(AVAudioPlayerNodeLogCategory(void)::category + 8) = 1;
  return result;
}

void sub_19B82489C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_19B8248F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19B824948(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19B824C9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  va_list va;

  va_start(va, a8);
  v11 = v9;

  TraceMethod::~TraceMethod((TraceMethod *)va);
  _Unwind_Resume(a1);
}

void sub_19B824F0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, objc_super a10, uint64_t a11, uint64_t a12, char a13)
{
  void *v13;
  void *v14;

  v14 = v13;

  TraceMethod::~TraceMethod((TraceMethod *)&a13);
  a10.super_class = (Class)AVVoiceTriggerClient;
  -[_Unwind_Exception dealloc](&a10, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_19B825110(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  void *v15;
  id *v16;

  objc_destroyWeak(v16);

  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19B82536C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19B825500(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v1;

  _Unwind_Resume(a1);
}

void sub_19B825778(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  void *v15;
  id *v16;
  void *v17;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

void sub_19B8258B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;
  void *v4;

  v4 = v2;

  TraceMethod::~TraceMethod((TraceMethod *)(v3 - 40));
  _Unwind_Resume(a1);
}

void sub_19B8259DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;
  void *v4;

  v4 = v2;

  TraceMethod::~TraceMethod((TraceMethod *)(v3 - 40));
  _Unwind_Resume(a1);
}

void sub_19B825A48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19B825A9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19B825B8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  va_list va;

  va_start(va, a6);
  v9 = v7;

  _Block_object_dispose(va, 8);
  TraceMethod::~TraceMethod((TraceMethod *)(v8 - 24));
  _Unwind_Resume(a1);
}

void sub_19B825D44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, ...)
{
  void *v6;
  va_list va;

  va_start(va, a6);

  TraceMethod::~TraceMethod((TraceMethod *)va);
  _Unwind_Resume(a1);
}

void sub_19B825F44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  void *v8;
  void *v9;
  va_list va;

  va_start(va, a8);

  TraceMethod::~TraceMethod((TraceMethod *)va);
  _Unwind_Resume(a1);
}

void sub_19B826020(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  void *v3;
  void *v4;
  va_list va;

  va_start(va, a2);
  v4 = v3;

  TraceMethod::~TraceMethod((TraceMethod *)va);
  _Unwind_Resume(a1);
}

void sub_19B826148(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;

  TraceMethod::~TraceMethod((TraceMethod *)(v3 - 40));
  _Unwind_Resume(a1);
}

void sub_19B8262EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, ...)
{
  void *v6;
  va_list va;

  va_start(va, a6);

  TraceMethod::~TraceMethod((TraceMethod *)va);
  _Unwind_Resume(a1);
}

void sub_19B82640C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;
  void *v4;

  v4 = v2;

  TraceMethod::~TraceMethod((TraceMethod *)(v3 - 40));
  _Unwind_Resume(a1);
}

void sub_19B8265E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, ...)
{
  void *v8;
  uint64_t v9;
  va_list va;

  va_start(va, a8);

  _Block_object_dispose(va, 8);
  TraceMethod::~TraceMethod((TraceMethod *)(v9 - 56));
  _Unwind_Resume(a1);
}

void sub_19B82670C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;
  void *v4;

  v4 = v2;

  TraceMethod::~TraceMethod((TraceMethod *)(v3 - 40));
  _Unwind_Resume(a1);
}

void sub_19B8268E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, ...)
{
  void *v8;
  uint64_t v9;
  va_list va;

  va_start(va, a8);

  _Block_object_dispose(va, 8);
  TraceMethod::~TraceMethod((TraceMethod *)(v9 - 56));
  _Unwind_Resume(a1);
}

void sub_19B826A28(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;

  v5 = v3;

  TraceMethod::~TraceMethod((TraceMethod *)(v4 - 40));
  _Unwind_Resume(a1);
}

void sub_19B826B50(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;
  void *v4;

  v4 = v2;

  TraceMethod::~TraceMethod((TraceMethod *)(v3 - 40));
  _Unwind_Resume(a1);
}

void sub_19B826C78(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;

  TraceMethod::~TraceMethod((TraceMethod *)(v3 - 40));
  _Unwind_Resume(a1);
}

void sub_19B826DBC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;

  v5 = v3;

  TraceMethod::~TraceMethod((TraceMethod *)(v4 - 40));
  _Unwind_Resume(a1);
}

void sub_19B826EE4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;
  void *v4;

  v4 = v2;

  TraceMethod::~TraceMethod((TraceMethod *)(v3 - 40));
  _Unwind_Resume(a1);
}

void sub_19B827008(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;
  void *v4;

  v4 = v2;

  TraceMethod::~TraceMethod((TraceMethod *)(v3 - 40));
  _Unwind_Resume(a1);
}

void sub_19B827130(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;

  TraceMethod::~TraceMethod((TraceMethod *)(v3 - 40));
  _Unwind_Resume(a1);
}

void sub_19B8271D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ElapsedTime::~ElapsedTime((ElapsedTime *)va);
  _Unwind_Resume(a1);
}

void sub_19B8273A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  _Block_object_dispose(&a17, 8);

  _Unwind_Resume(a1);
}

void sub_19B827604(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__7222(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__7223(uint64_t a1)
{

}

void sub_19B827D50(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19B827EBC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19B828028(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19B8282E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19B8284A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19B8286F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19B8288F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19B828A90(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19B828C94(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19B828E9C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19B829034(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19B829238(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19B82954C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19B8296E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19B8298DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19B829BA4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19B829D60(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19B829FAC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19B82A1B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19B82A34C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19B82A55C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19B82A82C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19B82A9DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19B82ABE4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19B82AE00(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19B82AF98(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19B82B19C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19B82B3B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19B82B550(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19B82B754(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19B82BA24(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19B82BBE0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19B82BE2C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19B82C044(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19B82C200(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19B82C44C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19B82C5C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19B82C714(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19B82C914(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19B82CAAC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19B82CC98(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void `anonymous namespace'::addKeyIfExists(_anonymous_namespace_ *this, NSDictionary *a2, NSString *a3, NSMutableDictionary *a4, NSString *a5)
{
  NSMutableDictionary *v8;
  void *v9;
  NSString *v10;

  v10 = a3;
  v8 = a4;
  -[_anonymous_namespace_ objectForKey:](this, "objectForKey:", a2);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (v9)
    -[NSString setObject:forKeyedSubscript:](v10, "setObject:forKeyedSubscript:", v9, v8);

}

void sub_19B82CD48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_19B82CF4C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19B82D0E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19B82D264(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19B82D3B0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19B82D5EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19B82D674(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void CADeprecated::CAGuard::~CAGuard(CADeprecated::CAGuard *this)
{
  CADeprecated::CAGuard::~CAGuard(this);
  JUMPOUT(0x1A1AC5BD4);
}

{
  *(_QWORD *)this = &off_1E3BE9A10;
  pthread_cond_destroy((pthread_cond_t *)((char *)this + 88));
  *(_QWORD *)this = &off_1E3BE9A80;
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 24));
}

pthread_t CADeprecated::CAGuard::Wait(CADeprecated::CAGuard *this)
{
  _opaque_pthread_t *v2;
  _opaque_pthread_t *v3;
  int v4;
  pthread_t result;
  _DWORD *exception;
  int v7;
  uint8_t v8[16];
  uint8_t buf[16];

  v2 = pthread_self();
  v3 = (_opaque_pthread_t *)atomic_load((unint64_t *)this + 2);
  if (!pthread_equal(v2, v3))
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_19B733000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, " CAGuard::Wait: A thread has to have locked a guard before it can wait", buf, 2u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E3BE6270;
    exception[2] = 1;
LABEL_10:
  }
  atomic_store(0, (unint64_t *)this + 2);
  v4 = pthread_cond_wait((pthread_cond_t *)((char *)this + 88), (pthread_mutex_t *)((char *)this + 24));
  if (v4)
  {
    v7 = v4;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v8 = 0;
      _os_log_error_impl(&dword_19B733000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, " CAGuard::Wait: Could not wait for a signal", v8, 2u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E3BE6270;
    exception[2] = v7;
    goto LABEL_10;
  }
  result = pthread_self();
  atomic_store((unint64_t)result, (unint64_t *)this + 2);
  return result;
}

BOOL CADeprecated::CAGuard::WaitFor(CADeprecated::CAGuard *this, unint64_t a2)
{
  _opaque_pthread_t *v4;
  _opaque_pthread_t *v5;
  __darwin_time_t v6;
  unint64_t *v7;
  int v8;
  int v9;
  _DWORD *exception;
  uint8_t v12[16];
  timespec v13;

  v4 = pthread_self();
  v5 = (_opaque_pthread_t *)atomic_load((unint64_t *)this + 2);
  if (!pthread_equal(v4, v5))
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      LOWORD(v13.tv_sec) = 0;
      _os_log_error_impl(&dword_19B733000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, " CAGuard::WaitFor: A thread has to have locked a guard be for it can wait", (uint8_t *)&v13, 2u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E3BE6270;
    exception[2] = 1;
LABEL_14:
  }
  if (a2 <= 0x3B9AC9FF)
  {
    v6 = 0;
  }
  else
  {
    v6 = a2 / 0x3B9ACA00;
    a2 %= 0x3B9ACA00uLL;
  }
  v13.tv_sec = v6;
  v13.tv_nsec = a2;
  v7 = (unint64_t *)((char *)this + 16);
  atomic_store(0, (unint64_t *)this + 2);
  v8 = pthread_cond_timedwait_relative_np((pthread_cond_t *)((char *)this + 88), (pthread_mutex_t *)((char *)this + 24), &v13);
  v9 = v8;
  if (v8 && v8 != 60)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v12 = 0;
      _os_log_error_impl(&dword_19B733000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, " CAGuard::WaitFor: Wait got an error", v12, 2u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E3BE6270;
    exception[2] = v9;
    goto LABEL_14;
  }
  atomic_store((unint64_t)pthread_self(), v7);
  return v9 == 60;
}

uint64_t CADeprecated::CAGuard::WaitUntil(CADeprecated::CAGuard *this, unint64_t a2)
{
  unint64_t v4;

  mach_absolute_time();
  v4 = __udivti3();
  if (a2 <= v4)
    return 1;
  else
    return (*(uint64_t (**)(CADeprecated::CAGuard *, unint64_t))(*(_QWORD *)this + 64))(this, a2 - v4);
}

uint64_t CADeprecated::CAGuard::Notify(CADeprecated::CAGuard *this)
{
  uint64_t result;
  _DWORD *exception;
  int v3;
  uint8_t buf[16];

  result = pthread_cond_signal((pthread_cond_t *)((char *)this + 88));
  if ((_DWORD)result)
  {
    v3 = result;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_19B733000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, " CAGuard::Notify: failed", buf, 2u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E3BE6270;
    exception[2] = v3;
  }
  return result;
}

uint64_t CADeprecated::CAGuard::NotifyAll(CADeprecated::CAGuard *this)
{
  uint64_t result;
  _DWORD *exception;
  int v3;
  uint8_t buf[16];

  result = pthread_cond_broadcast((pthread_cond_t *)((char *)this + 88));
  if ((_DWORD)result)
  {
    v3 = result;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_19B733000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, " CAGuard::NotifyAll: failed", buf, 2u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_1E3BE6270;
    exception[2] = v3;
  }
  return result;
}

NSObject *AVAE_GetHighPriorityWorkloop(void)
{
  unsigned __int8 v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *inactive;
  _QWORD *v5;
  void **v6;
  unint64_t v7;
  char *v8;
  _QWORD *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v19;
  void *__p[2];
  char v21;
  _QWORD v22[2];
  uint64_t v23;
  _QWORD v24[10];
  char v25;
  uint64_t v26;

  {
    v19 = operator new();
    *(_DWORD *)v19 = 0;
    *(_QWORD *)(v19 + 16) = 0;
    *(_QWORD *)(v19 + 24) = 0;
    *(_QWORD *)(v19 + 8) = 0;
    GetTargetWorkloopWithPriority(int,BOOL)::workloops = v19;
  }
  v1 = GetTargetWorkloopWithPriority(int,BOOL)::workloops;
  os_unfair_lock_lock((os_unfair_lock_t)GetTargetWorkloopWithPriority(int,BOOL)::workloops);
  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_QWORD *)(v1 + 16);
  if (v2 != v3)
  {
    while (*(_DWORD *)v2 != 56 || *(_BYTE *)(v2 + 4))
    {
      v2 += 16;
      if (v2 == v3)
        goto LABEL_11;
    }
  }
  if (v2 == v3 || (inactive = *(NSObject **)(v2 + 8)) == 0)
  {
LABEL_11:
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v23, (uint64_t)"com.apple.coreaudio.avfaudio.workloop(", 38);
    v5 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)")", 1);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>(__p, (uint64_t)v24);
    if (v21 >= 0)
      v6 = __p;
    else
      v6 = (void **)__p[0];
    inactive = dispatch_workloop_create_inactive((const char *)v6);
    if (v21 < 0)
      operator delete(__p[0]);
    dispatch_workloop_set_scheduler_priority();
    dispatch_activate(inactive);
    v8 = *(char **)(v1 + 16);
    v7 = *(_QWORD *)(v1 + 24);
    if ((unint64_t)v8 >= v7)
    {
      v10 = *(char **)(v1 + 8);
      v11 = (v8 - v10) >> 4;
      v12 = v11 + 1;
      if ((unint64_t)(v11 + 1) >> 60)
        std::vector<EExtAudioGraphNodeState>::__throw_length_error[abi:ne180100]();
      v13 = v7 - (_QWORD)v10;
      if (v13 >> 3 > v12)
        v12 = v13 >> 3;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0)
        v14 = 0xFFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 60)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = (char *)operator new(16 * v14);
      }
      else
      {
        v15 = 0;
      }
      v16 = &v15[16 * v11];
      *(_QWORD *)v16 = 56;
      *((_QWORD *)v16 + 1) = inactive;
      v9 = v16 + 16;
      if (v8 != v10)
      {
        do
        {
          *((_OWORD *)v16 - 1) = *((_OWORD *)v8 - 1);
          v16 -= 16;
          v8 -= 16;
        }
        while (v8 != v10);
        v8 = *(char **)(v1 + 8);
      }
      *(_QWORD *)(v1 + 8) = v16;
      *(_QWORD *)(v1 + 16) = v9;
      *(_QWORD *)(v1 + 24) = &v15[16 * v14];
      if (v8)
        operator delete(v8);
    }
    else
    {
      *(_QWORD *)v8 = 56;
      *((_QWORD *)v8 + 1) = inactive;
      v9 = v8 + 16;
    }
    *(_QWORD *)(v1 + 16) = v9;
    v22[0] = *MEMORY[0x1E0DE4F50];
    v17 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
    *(_QWORD *)((char *)v22 + *(_QWORD *)(v22[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
    v23 = v17;
    v24[0] = MEMORY[0x1E0DE4FB8] + 16;
    if (v25 < 0)
      operator delete((void *)v24[8]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x1A1AC5B74](&v26);
  }
  else if (!v1)
  {
    return inactive;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)v1);
  return inactive;
}

void sub_19B82E0A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  _Unwind_Resume(a1);
}

char *AudioComponentDescriptionAsString(const AudioComponentDescription *a1, char *a2, int16x8_t a3)
{
  int16x8_t v5;
  int16x8_t v6;
  char v8[24];
  char v9[24];
  char __dst[24];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    CAStringForOSType(a1->componentType, __dst, a3);
    CAStringForOSType(a1->componentSubType, v9, v5);
    CAStringForOSType(a1->componentManufacturer, v8, v6);
    snprintf(a2, 0x80uLL, "%s %s %s", __dst, v9, v8);
  }
  return a2;
}

void sub_19B82E258(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AC5BD4](v1, 0x10B1C4016FEDC95);
  _Unwind_Resume(a1);
}

void sub_19B82E3D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19B82E46C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19B82E54C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19B82E638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19B82E6F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19B82E794(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19B82E830(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19B82EAAC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AC5BD4](v1, 0x10B1C4016FEDC95);
  _Unwind_Resume(a1);
}

void sub_19B82ECE0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;
  const void ***v3;
  uint64_t v5;

  std::unique_ptr<AVAEBlock<AVAudioEngineManualRenderingStatus({block_pointer})(unsigned int,AudioBufferList *,int *)>>::reset[abi:ne180100](v3, 0);
  v5 = *(_QWORD *)(v1 + 56);
  *(_QWORD *)(v1 + 56) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::unique_ptr<AVAudioEngineGraph>::reset[abi:ne180100](v2);
  MEMORY[0x1A1AC5BD4](v1, 0x10A0C40461284F8);
  _Unwind_Resume(a1);
}

void sub_19B82EFE0(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19B82F044(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19B82F09C(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19B82F280(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19B82F424(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19B82F4B0(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19B82F558(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19B82F5D4(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19B82FC08(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19B83039C(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;
  std::recursive_mutex *v2;

  std::recursive_mutex::unlock(v2);
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19B830C7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::recursive_mutex *a11, std::recursive_mutex *a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  std::recursive_mutex::unlock(a11);
  std::recursive_mutex::unlock(a12);
  _Unwind_Resume(a1);
}

void sub_19B83156C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::recursive_mutex *a11, std::recursive_mutex *a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  std::recursive_mutex::unlock(a11);
  std::recursive_mutex::unlock(a12);
  _Unwind_Resume(a1);
}

void sub_19B8317D8(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19B831920(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19B831974(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19B8319C0(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19B831A10(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19B831A80(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19B831AF0(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19B832360(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::recursive_mutex *a13, std::recursive_mutex *a14, FILE *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  fclose(a15);
  free(a16);
  std::recursive_mutex::unlock(a13);
  std::recursive_mutex::unlock(a14);
  _Unwind_Resume(a1);
}

void sub_19B8327A4(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19B83283C(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19B832990(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;
  std::recursive_mutex *v2;

  std::recursive_mutex::unlock(v2);
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19B832A80(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19B832AF0(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19B832D08(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;
  std::recursive_mutex *v2;
  uint64_t v3;

  caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::unlock(v3);
  std::recursive_mutex::unlock(v2);
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19B832ECC(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void sub_19B832FD8(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;
  uint64_t v2;

  MEMORY[0x1A1AC5BD4](v2, 0x80C40B8603338);
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19B83318C(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19B8331F4(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19B8334C0(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19B833540(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19B8335C0(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19B833640(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19B8336C0(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19B833924(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19B833D48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::recursive_mutex *a12)
{
  std::recursive_mutex::unlock(a12);
  _Unwind_Resume(a1);
}

void sub_19B833F90(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19B8341D0(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19B834230(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

CFIndex ___Z24AVAudioEngineLogCategoryv_block_invoke()
{
  _QWORD *v0;
  CFIndex result;
  uint64_t v2;

  v0 = (_QWORD *)operator new();
  v0[1] = 0;
  *v0 = os_log_create("com.apple.avfaudio", "avae");
  AVAudioEngineLogCategory(void)::category = (uint64_t)v0;
  result = CFPreferencesGetAppIntegerValue(CFSTR("avae_verbose"), CFSTR("com.apple.avfaudio"), 0);
  v2 = (int)result > 0;
  if ((int)result > 1)
    v2 |= 2uLL;
  *(_QWORD *)(AVAudioEngineLogCategory(void)::category + 8) = v2;
  return result;
}

uint64_t AVAudioEngineImpl::ConnectMIDI(uint64_t a1, void *a2, void *a3, void *a4, uint64_t a5, uint64_t a6)
{
  NSObject *v9;
  char *v10;
  NSObject *v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v19;
  void *v20;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint8_t v28[128];
  uint8_t buf[4];
  const char *v30;
  __int16 v31;
  int v32;
  __int16 v33;
  char *v34;
  __int16 v35;
  _BYTE v36[28];
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  if (AVAudioEngineLogCategory(void)::once != -1)
    dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
  v9 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
  if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_DEBUG))
  {
    v10 = *(char **)a1;
    *(_DWORD *)buf = 136316418;
    v30 = "AVAudioEngine.mm";
    v31 = 1024;
    v32 = 1071;
    v33 = 2048;
    v34 = v10;
    v35 = 2048;
    *(_QWORD *)v36 = a2;
    *(_WORD *)&v36[8] = 2080;
    *(_QWORD *)&v36[10] = objc_msgSend((id)objc_msgSend(a3, "description"), "UTF8String");
    *(_WORD *)&v36[18] = 2080;
    *(_QWORD *)&v36[20] = objc_msgSend((id)objc_msgSend(a4, "description"), "UTF8String");
    _os_log_impl(&dword_19B733000, v9, OS_LOG_TYPE_DEBUG, "%25s:%-5d Engine@%p: connect MIDI node: %p -> %s, format: %s", buf, 0x3Au);
  }
  if (!a2 || !a3 || !objc_msgSend(a3, "count"))
  {
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v11 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316418;
      v30 = "AVAEInternal.h";
      v31 = 1024;
      v32 = 71;
      v33 = 2080;
      v34 = "AVAudioEngine.mm";
      v35 = 1024;
      *(_DWORD *)v36 = 1073;
      *(_WORD *)&v36[4] = 2080;
      *(_QWORD *)&v36[6] = "ConnectMIDI";
      *(_WORD *)&v36[14] = 2080;
      *(_QWORD *)&v36[16] = "nil != sourceNode && nil != destNodes && [destNodes count] > 0";
      _os_log_impl(&dword_19B733000, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "nil != sourceNode && nil != destNodes && [destNodes count] > 0");
  }
  if ((objc_msgSend(*(id *)(a1 + 24), "containsObject:", a2) & 1) == 0)
  {
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v12 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316418;
      v30 = "AVAEInternal.h";
      v31 = 1024;
      v32 = 71;
      v33 = 2080;
      v34 = "AVAudioEngine.mm";
      v35 = 1024;
      *(_DWORD *)v36 = 1074;
      *(_WORD *)&v36[4] = 2080;
      *(_QWORD *)&v36[6] = "ConnectMIDI";
      *(_WORD *)&v36[14] = 2080;
      *(_QWORD *)&v36[16] = "[_nodes containsObject: sourceNode]";
      _os_log_impl(&dword_19B733000, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "[_nodes containsObject: sourceNode]");
  }
  v19 = a1;
  v20 = a2;
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  v13 = objc_msgSend(a3, "countByEnumeratingWithState:objects:count:", &v24, v28, 16);
  if (v13)
  {
    v14 = v13;
    v15 = *(_QWORD *)v25;
    do
    {
      v16 = 0;
      do
      {
        if (*(_QWORD *)v25 != v15)
          objc_enumerationMutation(a3);
        if (!*(_QWORD *)(*((_QWORD *)&v24 + 1) + 8 * v16) || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
        {
          if (AVAudioEngineLogCategory(void)::once != -1)
            dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
          v17 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
          if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136316418;
            v30 = "AVAEInternal.h";
            v31 = 1024;
            v32 = 71;
            v33 = 2080;
            v34 = "AVAudioEngine.mm";
            v35 = 1024;
            *(_DWORD *)v36 = 1076;
            *(_WORD *)&v36[4] = 2080;
            *(_QWORD *)&v36[6] = "ConnectMIDI";
            *(_WORD *)&v36[14] = 2080;
            *(_QWORD *)&v36[16] = "object && [object isKindOfClass: [AVAudioNode class]]";
            _os_log_impl(&dword_19B733000, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
          }
          objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "object && [object isKindOfClass: [AVAudioNode class]]");
        }
        ++v16;
      }
      while (v14 != v16);
      v14 = objc_msgSend(a3, "countByEnumeratingWithState:objects:count:", &v24, v28, 16);
    }
    while (v14);
  }
  return AVAudioEngineGraph::ConnectMIDI(*(AVAudioEngineGraph **)(v19 + 8), v20, a3, a4, a5, a6);
}

{
  NSObject *v12;
  char *v13;
  NSObject *v14;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  int v19;
  __int16 v20;
  char *v21;
  __int16 v22;
  _BYTE v23[28];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (AVAudioEngineLogCategory(void)::once != -1)
    dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
  v12 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
  if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_DEBUG))
  {
    v13 = *(char **)a1;
    *(_DWORD *)buf = 136316418;
    v17 = "AVAudioEngine.mm";
    v18 = 1024;
    v19 = 1057;
    v20 = 2048;
    v21 = v13;
    v22 = 2048;
    *(_QWORD *)v23 = a2;
    *(_WORD *)&v23[8] = 2048;
    *(_QWORD *)&v23[10] = a3;
    *(_WORD *)&v23[18] = 2080;
    *(_QWORD *)&v23[20] = objc_msgSend((id)objc_msgSend(a4, "description"), "UTF8String");
    _os_log_impl(&dword_19B733000, v12, OS_LOG_TYPE_DEBUG, "%25s:%-5d Engine@%p: connect MIDI node: %p -> node: %p, format: %s", buf, 0x3Au);
  }
  if (a2 == a3 || !a2 || !a3)
  {
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v14 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316418;
      v17 = "AVAEInternal.h";
      v18 = 1024;
      v19 = 71;
      v20 = 2080;
      v21 = "AVAudioEngine.mm";
      v22 = 1024;
      *(_DWORD *)v23 = 1059;
      *(_WORD *)&v23[4] = 2080;
      *(_QWORD *)&v23[6] = "ConnectMIDI";
      *(_WORD *)&v23[14] = 2080;
      *(_QWORD *)&v23[16] = "node1 != nil && node2 != nil && node1 != node2";
      _os_log_impl(&dword_19B733000, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "node1 != nil && node2 != nil && node1 != node2");
  }
  return AVAudioEngineGraph::ConnectMIDI(*(AVAudioEngineGraph **)(a1 + 8), a2, (void *)objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:", a3, 0), a4, a5, a6);
}

uint64_t AVAudioEngineImpl::GetIOUnit(AVAudioEngineImpl *this, AVAudioSession *a2, AVAudioSession *a3, uint64_t a4, AVAudioSession *a5)
{
  NSObject *v7;
  uint64_t result;
  uint64_t v9;
  _BYTE buf[12];
  __int16 v11;
  int v12;
  __int16 v13;
  char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  const char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(*((_QWORD *)this + 1) + 187))
  {
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v7 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316418;
      *(_QWORD *)&buf[4] = "AVAEInternal.h";
      v11 = 1024;
      v12 = 71;
      v13 = 2080;
      v14 = "AVAudioEngine.mm";
      v15 = 1024;
      v16 = 641;
      v17 = 2080;
      v18 = "GetIOUnit";
      v19 = 2080;
      v20 = "!IsInManualRenderingMode()";
      _os_log_impl(&dword_19B733000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "!IsInManualRenderingMode()");
  }
  result = *((_QWORD *)this + 7);
  if (!result)
  {
    AVAudioIOUnit::Create((AVAudioIOUnit *)buf, this, 0, a2, a5);
    result = *(_QWORD *)buf;
    v9 = *((_QWORD *)this + 7);
    *((_QWORD *)this + 7) = *(_QWORD *)buf;
    if (v9)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      return *((_QWORD *)this + 7);
    }
  }
  return result;
}

id AVAudioEngineImpl::GetAudioSession(AVAudioEngineImpl *this)
{
  void *v2;

  if (*(_BYTE *)(*((_QWORD *)this + 1) + 187))
    return 0;
  v2 = (void *)*((_QWORD *)this + 2);
  if (v2)
    return v2;
  else
    return (id)objc_msgSend(MEMORY[0x1E0CFF1C0], "sharedInstance");
}

uint64_t ___ZN17AVAudioEngineImpl23GetManualRenderingBlockEv_block_invoke(uint64_t a1, uint64_t a2, AudioBufferList *a3, int *a4)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  std::recursive_mutex *v16;
  uint64_t v17;
  uint64_t mNumberBuffers;
  UInt32 *p_mDataByteSize;
  uint64_t v20;
  char v21;

  v8 = *(_QWORD *)(a1 + 32);
  if (a4)
    *a4 = 0;
  if (!a3 || !a3->mNumberBuffers)
  {
    v9 = -50;
    goto LABEL_15;
  }
  v9 = -80800;
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_QWORD *)(v10 + 8);
  if (!*(_BYTE *)(v11 + 187))
    goto LABEL_15;
  if (*(_BYTE *)(v11 + 208))
    v12 = (_BYTE *)(v10 + 64);
  else
    v12 = (_BYTE *)(v11 + 184);
  if (!*v12)
  {
    v9 = -80802;
    if (!a4)
      return -1;
    goto LABEL_16;
  }
  v13 = *(_QWORD *)(v11 + 192);
  if (!v13)
  {
    v16 = (std::recursive_mutex *)(v8 + 112);
    v17 = v8 + 176;
    std::lock[abi:ne180100]<std::recursive_mutex,caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>((std::recursive_mutex *)(v8 + 112), v8 + 176);
    v14 = AVAudioEngineGraph::RenderToABL(*(AVAudioNodeImplBase ***)(*(_QWORD *)(a1 + 40) + 8), a2, a3, a4);
    caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::unlock(v17);
    std::recursive_mutex::unlock(v16);
    return v14;
  }
  if (v13 != 1)
  {
LABEL_15:
    if (!a4)
      return -1;
LABEL_16:
    *a4 = v9;
    return -1;
  }
  v20 = v10 + 176;
  v21 = caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::try_lock(v10 + 176);
  if ((v21 & 1) != 0)
  {
    v14 = AVAudioEngineGraph::RenderToABL(*(AVAudioNodeImplBase ***)(*(_QWORD *)(a1 + 40) + 8), a2, a3, a4);
  }
  else
  {
    mNumberBuffers = a3->mNumberBuffers;
    if ((_DWORD)mNumberBuffers)
    {
      p_mDataByteSize = &a3->mBuffers[0].mDataByteSize;
      v14 = 2;
      do
      {
        *p_mDataByteSize = 0;
        p_mDataByteSize += 4;
        --mNumberBuffers;
      }
      while (mNumberBuffers);
    }
    else
    {
      v14 = 2;
    }
  }
  std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)&v20);
  return v14;
}

void sub_19B834DAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

const void ***std::unique_ptr<AVAEBlock<AVAudioEngineManualRenderingStatus({block_pointer})(unsigned int,AudioBufferList *,int *)>>::reset[abi:ne180100](const void ***result, const void **a2)
{
  const void **v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    if (*v2)
    {
      _Block_release(*v2);
      *v2 = 0;
    }
    JUMPOUT(0x1A1AC5BD4);
  }
  return result;
}

uint64_t std::lock[abi:ne180100]<std::recursive_mutex,caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>(std::recursive_mutex *this, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  char v6;

  while (1)
  {
    std::recursive_mutex::lock(this);
    result = caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::try_lock(a2);
    if ((result & 1) != 0)
      break;
    std::recursive_mutex::unlock(this);
    sched_yield();
    v5 = a2;
    v6 = 1;
    caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::lock(a2);
    if (std::recursive_mutex::try_lock(this))
    {
      v5 = 0;
      v6 = 0;
      return std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)&v5);
    }
    std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)&v5);
    sched_yield();
  }
  return result;
}

void sub_19B834EC8(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void AVAudioEngineImpl::Stop(AVAudioEngineImpl *this, NSError **a2)
{
  std::recursive_mutex *v4;
  char *v5;
  NSObject *v6;
  uint64_t v7;
  unsigned __int8 *v8;
  int v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  std::recursive_mutex *v13;
  uint64_t v14;
  int v15;
  const char *v16;
  __int16 v17;
  int v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  int v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v4 = (std::recursive_mutex *)((char *)this + 112);
  v5 = (char *)this + 176;
  std::lock[abi:ne180100]<std::recursive_mutex,caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>((std::recursive_mutex *)((char *)this + 112), (uint64_t)this + 176);
  if (AVAudioEngineLogCategory(void)::once != -1)
    dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
  v6 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
  if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *(_QWORD *)this;
    v8 = (unsigned __int8 *)*((_QWORD *)this + 1);
    if (v8)
    {
      v9 = v8[208];
      v8 += 184;
      if (v9)
        v8 = (unsigned __int8 *)this + 64;
      LODWORD(v8) = *v8;
    }
    v15 = 136315906;
    v16 = "AVAudioEngine.mm";
    v17 = 1024;
    v18 = 1222;
    v19 = 2048;
    v20 = v7;
    v21 = 1024;
    v22 = (int)v8;
    _os_log_impl(&dword_19B733000, v6, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Engine@%p: stop, was running %d", (uint8_t *)&v15, 0x22u);
  }
  AVAudioEngineImpl::Pause(this, a2);
  if (AVAudioEngineLogCategory(void)::once != -1)
    dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
  v10 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
  if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_DEBUG))
  {
    v11 = *(_QWORD *)this;
    v15 = 136315650;
    v16 = "AVAudioEngine.mm";
    v17 = 1024;
    v18 = 1148;
    v19 = 2048;
    v20 = v11;
    _os_log_impl(&dword_19B733000, v10, OS_LOG_TYPE_DEBUG, "%25s:%-5d Engine@%p: uninitialize", (uint8_t *)&v15, 0x1Cu);
  }
  v12 = *((_QWORD *)this + 1);
  if (v12)
  {
    v13 = (std::recursive_mutex *)(*(_QWORD *)v12 + 112);
    std::recursive_mutex::lock(v13);
    if (*(_BYTE *)(v12 + 185))
      v14 = AVAudioEngineGraph::_Uninitialize((AVAudioNodeImplBase **)v12, a2);
    else
      v14 = 0;
    std::recursive_mutex::unlock(v13);
    _AVAE_CheckNoErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAudioEngine.mm", 1150, "Uninitialize", "_graph->Uninitialize(outErr)", v14, a2);
  }
  caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::unlock((uint64_t)v5);
  std::recursive_mutex::unlock(v4);
}

void sub_19B83513C(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;
  uint64_t v2;
  std::recursive_mutex *v3;

  std::recursive_mutex::unlock(v3);
  caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::unlock(v2);
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void AVAudioEngineImpl::Reset(AVAudioEngineImpl *this)
{
  std::recursive_mutex *v2;
  char *v3;
  _QWORD *v4;
  std::recursive_mutex *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;

  v2 = (std::recursive_mutex *)((char *)this + 112);
  v3 = (char *)this + 176;
  std::lock[abi:ne180100]<std::recursive_mutex,caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>((std::recursive_mutex *)((char *)this + 112), (uint64_t)this + 176);
  v4 = (_QWORD *)*((_QWORD *)this + 1);
  v5 = (std::recursive_mutex *)(*v4 + 112);
  std::recursive_mutex::lock(v5);
  v6 = (_QWORD *)v4[1];
  if (v6)
  {
    v9 = (_QWORD *)*v6;
    v7 = v6 + 1;
    v8 = v9;
    if (v9 != v7)
    {
      do
      {
        (*(void (**)(_QWORD))(**(_QWORD **)(v8[5] + 24) + 88))(*(_QWORD *)(v8[5] + 24));
        v10 = (_QWORD *)v8[1];
        if (v10)
        {
          do
          {
            v11 = v10;
            v10 = (_QWORD *)*v10;
          }
          while (v10);
        }
        else
        {
          do
          {
            v11 = (_QWORD *)v8[2];
            v12 = *v11 == (_QWORD)v8;
            v8 = v11;
          }
          while (!v12);
        }
        v8 = v11;
      }
      while (v11 != v7);
    }
  }
  v4[25] = 0;
  std::recursive_mutex::unlock(v5);
  caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::unlock((uint64_t)v3);
  std::recursive_mutex::unlock(v2);
}

void sub_19B835250(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;
  uint64_t v2;

  caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::unlock(v2);
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t AVAudioEngineImpl::UpdateIONodes(AVAudioEngineImpl *this)
{
  uint64_t result;

  AVAudioEngineImpl::UpdateOutputNode((uint64_t)this, 0);
  result = AVAudioEngineImpl::UpdateInputNode((uint64_t)this, 0);
  if (*(_BYTE *)(*((_QWORD *)this + 1) + 187))
  {
    result = *((_QWORD *)this + 7);
    *((_QWORD *)this + 7) = 0;
    if (result)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    *((_QWORD *)this + 2) = 0;
  }
  return result;
}

uint64_t AVAudioEngineImpl::UpdateOutputNode(uint64_t this, char a2)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  int v5;
  BOOL v6;
  AVAudioSession *AudioSession;
  AVAudioSession *v8;
  uint64_t v9;
  AVAudioSession *v10;
  uint64_t IOUnit;
  int v12;
  AVAudioNode *v13;
  AVAudioConnectionPoint *InputConnectionPointForNode;
  id v15;
  AVAudioOutputNode *v16;
  NSObject *v17;
  NSObject *v18;
  NSObject *v19;
  void *v20;
  void *v21;
  double v22;
  NSObject *v23;
  _BYTE buf[44];
  __int16 v25;
  const char *v26;
  uint64_t v27;

  v2 = this;
  v27 = *MEMORY[0x1E0C80C00];
  v3 = *(void **)(this + 40);
  if ((a2 & 1) != 0)
  {
    v4 = this + 8;
    v5 = *(_BYTE *)(*(_QWORD *)(this + 8) + 187) != 0;
    if (!v3)
      goto LABEL_12;
  }
  else
  {
    if (!v3)
      return this;
    v4 = this + 8;
    v5 = *(_BYTE *)(*(_QWORD *)(this + 8) + 187) != 0;
  }
  this = objc_msgSend(*(id *)(this + 40), "isInManualRenderingMode");
  if (v5)
    v6 = (_DWORD)this == 0;
  else
    v6 = 1;
  if (!v6)
  {
    this = objc_msgSend(v3, "manualRenderingMode");
    if (this == *(_QWORD *)(*(_QWORD *)v4 + 192))
      return this;
    goto LABEL_15;
  }
  if (v5 == (_DWORD)this)
    return this;
LABEL_12:
  if ((v5 & 1) == 0)
  {
    AudioSession = (AVAudioSession *)AVAudioEngineImpl::GetAudioSession((AVAudioEngineImpl *)v2);
    IOUnit = AVAudioEngineImpl::GetIOUnit((AVAudioEngineImpl *)v2, AudioSession, v8, v9, v10);
    v12 = 0;
    goto LABEL_16;
  }
LABEL_15:
  IOUnit = 0;
  v12 = 1;
LABEL_16:
  v13 = *(AVAudioNode **)(v2 + 40);
  if (v13)
  {
    InputConnectionPointForNode = AVAudioEngineImpl::GetInputConnectionPointForNode((AVAudioEngineImpl *)v2, v13, 0);
    v15 = *(id *)(v2 + 40);
    AVAudioEngineGraph::RemoveIONode(*(AVAudioEngineGraph **)(v2 + 8), *(AVAudioNode **)(v2 + 40), 0, 0);
    AVAudioEngineImpl::DetachNode((id *)v2, *(AVAudioNode **)(v2 + 40), 1, 0);
    v16 = *(AVAudioOutputNode **)(v2 + 40);
    if (v12)
      goto LABEL_18;
LABEL_25:
    if (!-[AVAudioIONode enableRealtimeRenderingModeWithIOUnit:isInput:forceIOUnitReset:](v16, "enableRealtimeRenderingModeWithIOUnit:isInput:forceIOUnitReset:", IOUnit, 0, 0))
    {
      if (AVAudioEngineLogCategory(void)::once != -1)
        dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
      v18 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
      if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136316418;
        *(_QWORD *)&buf[4] = "AVAEInternal.h";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 71;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = "AVAudioEngine.mm";
        *(_WORD *)&buf[28] = 1024;
        *(_DWORD *)&buf[30] = 756;
        *(_WORD *)&buf[34] = 2080;
        *(_QWORD *)&buf[36] = "UpdateOutputNode";
        v25 = 2080;
        v26 = "[_outputNode enableRealtimeRenderingModeWithIOUnit:ioUnit isInput:isInputNode forceIOUnitReset:false]";
        _os_log_impl(&dword_19B733000, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
      }
      objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "[_outputNode enableRealtimeRenderingModeWithIOUnit:ioUnit isInput:isInputNode forceIOUnitReset:false]");
    }
    v19 = *(NSObject **)(IOUnit + 8);
    *(_QWORD *)buf = MEMORY[0x1E0C809B0];
    *(_QWORD *)&buf[8] = 3221225472;
    *(_QWORD *)&buf[16] = ___ZN13AVAudioIOUnit9EnableBusEj_block_invoke;
    *(_QWORD *)&buf[24] = &__block_descriptor_44_e5_v8__0l;
    *(_QWORD *)&buf[32] = IOUnit;
    *(_DWORD *)&buf[40] = 0;
    dispatch_sync(v19, buf);
    goto LABEL_32;
  }
  v16 = -[AVAudioIONode initWithIOUnit:isInput:]([AVAudioOutputNode alloc], "initWithIOUnit:isInput:", IOUnit, 0);
  InputConnectionPointForNode = 0;
  *(_QWORD *)(v2 + 40) = v16;
  if (!v12)
    goto LABEL_25;
LABEL_18:
  if (!-[AVAudioIONode enableManualRenderingMode:isInput:](v16, "enableManualRenderingMode:isInput:", *(_QWORD *)(*(_QWORD *)v4 + 192), 0))
  {
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v17 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316418;
      *(_QWORD *)&buf[4] = "AVAEInternal.h";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 71;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = "AVAudioEngine.mm";
      *(_WORD *)&buf[28] = 1024;
      *(_DWORD *)&buf[30] = 753;
      *(_WORD *)&buf[34] = 2080;
      *(_QWORD *)&buf[36] = "UpdateOutputNode";
      v25 = 2080;
      v26 = "[_outputNode enableManualRenderingMode:GetManualRenderingMode() isInput:isInputNode]";
      _os_log_impl(&dword_19B733000, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "[_outputNode enableManualRenderingMode:GetManualRenderingMode() isInput:isInputNode]");
  }
LABEL_32:
  AVAudioEngineImpl::AttachNode((AVAudioEngineImpl *)v2, *(AVAudioNode **)(v2 + 40), 1);

  AVAudioEngineGraph::AddIONode(*(uint64_t ***)(v2 + 8), *(AVAudioNode **)(v2 + 40), 0);
  v20 = (void *)objc_msgSend(*(id *)(v2 + 40), "outputFormatForBus:", 0);
  if (v20)
  {
    v21 = v20;
    objc_msgSend(v20, "sampleRate");
    if (v22 > 0.0)
    {
      if (objc_msgSend(v21, "channelCount"))
        objc_msgSend(*(id *)(v2 + 40), "setInputFormat:forBus:", v21, 0);
    }
  }
  if (InputConnectionPointForNode)
    AVAudioEngineImpl::Connect((id *)v2, -[AVAudioConnectionPoint node](InputConnectionPointForNode, "node"), *(AVAudioNode **)(v2 + 40), -[AVAudioConnectionPoint bus](InputConnectionPointForNode, "bus"), 0, 0);
  this = AVAudioEngineImpl::AreRenderingModesIdentical((AVAudioEngineImpl *)v2, *(AVAudioIONode **)(v2 + 40));
  if ((this & 1) == 0)
  {
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v23 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316418;
      *(_QWORD *)&buf[4] = "AVAEInternal.h";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 71;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = "AVAudioEngine.mm";
      *(_WORD *)&buf[28] = 1024;
      *(_DWORD *)&buf[30] = 777;
      *(_WORD *)&buf[34] = 2080;
      *(_QWORD *)&buf[36] = "UpdateOutputNode";
      v25 = 2080;
      v26 = "AreRenderingModesIdentical(_outputNode)";
      _os_log_impl(&dword_19B733000, v23, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    return objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "AreRenderingModesIdentical(_outputNode)");
  }
  return this;
}

uint64_t AVAudioEngineImpl::UpdateInputNode(uint64_t this, char a2)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  int v5;
  BOOL v6;
  AVAudioSession *AudioSession;
  AVAudioSession *v8;
  uint64_t v9;
  AVAudioSession *v10;
  _QWORD *IOUnit;
  int v12;
  AVAudioNode *v13;
  NSArray *OutputConnectionPointsForNode;
  id v15;
  AVAudioInputNode *v16;
  NSObject *v17;
  NSObject *v18;
  NSObject *v19;
  void *v20;
  void *v21;
  double v22;
  NSObject *v23;
  _BYTE buf[44];
  __int16 v25;
  const char *v26;
  uint64_t v27;

  v2 = this;
  v27 = *MEMORY[0x1E0C80C00];
  v3 = *(void **)(this + 32);
  if ((a2 & 1) != 0)
  {
    v4 = this + 8;
    v5 = *(_BYTE *)(*(_QWORD *)(this + 8) + 187) != 0;
    if (!v3)
      goto LABEL_12;
  }
  else
  {
    if (!v3)
      return this;
    v4 = this + 8;
    v5 = *(_BYTE *)(*(_QWORD *)(this + 8) + 187) != 0;
  }
  this = objc_msgSend(*(id *)(this + 32), "isInManualRenderingMode");
  if (v5)
    v6 = (_DWORD)this == 0;
  else
    v6 = 1;
  if (!v6)
  {
    this = objc_msgSend(v3, "manualRenderingMode");
    if (this == *(_QWORD *)(*(_QWORD *)v4 + 192))
      return this;
    goto LABEL_15;
  }
  if (v5 == (_DWORD)this)
    return this;
LABEL_12:
  if ((v5 & 1) != 0)
  {
LABEL_15:
    IOUnit = 0;
    v12 = 1;
    goto LABEL_16;
  }
  AudioSession = (AVAudioSession *)AVAudioEngineImpl::GetAudioSession((AVAudioEngineImpl *)v2);
  IOUnit = (_QWORD *)AVAudioEngineImpl::GetIOUnit((AVAudioEngineImpl *)v2, AudioSession, v8, v9, v10);
  v12 = 0;
LABEL_16:
  v13 = *(AVAudioNode **)(v2 + 32);
  if (v13)
  {
    OutputConnectionPointsForNode = (NSArray *)AVAudioEngineImpl::GetOutputConnectionPointsForNode((AVAudioEngineImpl *)v2, v13, 0);
    v15 = *(id *)(v2 + 32);
    AVAudioEngineGraph::RemoveIONode(*(AVAudioEngineGraph **)(v2 + 8), *(AVAudioNode **)(v2 + 32), 1, 0);
    AVAudioEngineImpl::DetachNode((id *)v2, *(AVAudioNode **)(v2 + 32), 1, 0);
    v16 = *(AVAudioInputNode **)(v2 + 32);
  }
  else
  {
    v16 = -[AVAudioIONode initWithIOUnit:isInput:]([AVAudioInputNode alloc], "initWithIOUnit:isInput:", IOUnit, 1);
    OutputConnectionPointsForNode = 0;
    *(_QWORD *)(v2 + 32) = v16;
  }
  if (v12)
  {
    if (!-[AVAudioIONode enableManualRenderingMode:isInput:](v16, "enableManualRenderingMode:isInput:", *(_QWORD *)(*(_QWORD *)v4 + 192), 1))
    {
      if (AVAudioEngineLogCategory(void)::once != -1)
        dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
      v17 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
      if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136316418;
        *(_QWORD *)&buf[4] = "AVAEInternal.h";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 71;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = "AVAudioEngine.mm";
        *(_WORD *)&buf[28] = 1024;
        *(_DWORD *)&buf[30] = 812;
        *(_WORD *)&buf[34] = 2080;
        *(_QWORD *)&buf[36] = "UpdateInputNode";
        v25 = 2080;
        v26 = "[_inputNode enableManualRenderingMode:GetManualRenderingMode() isInput:isInputNode]";
        _os_log_impl(&dword_19B733000, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
      }
      objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "[_inputNode enableManualRenderingMode:GetManualRenderingMode() isInput:isInputNode]");
    }
  }
  else
  {
    if (!-[AVAudioIONode enableRealtimeRenderingModeWithIOUnit:isInput:forceIOUnitReset:](v16, "enableRealtimeRenderingModeWithIOUnit:isInput:forceIOUnitReset:", IOUnit, 1, 0))
    {
      if (AVAudioEngineLogCategory(void)::once != -1)
        dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
      v18 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
      if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136316418;
        *(_QWORD *)&buf[4] = "AVAEInternal.h";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 71;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = "AVAudioEngine.mm";
        *(_WORD *)&buf[28] = 1024;
        *(_DWORD *)&buf[30] = 815;
        *(_WORD *)&buf[34] = 2080;
        *(_QWORD *)&buf[36] = "UpdateInputNode";
        v25 = 2080;
        v26 = "[_inputNode enableRealtimeRenderingModeWithIOUnit:ioUnit isInput:isInputNode forceIOUnitReset:false]";
        _os_log_impl(&dword_19B733000, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
      }
      objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "[_inputNode enableRealtimeRenderingModeWithIOUnit:ioUnit isInput:isInputNode forceIOUnitReset:false]");
    }
    (*(void (**)(_QWORD *))(*IOUnit + 64))(IOUnit);
    v19 = IOUnit[1];
    *(_QWORD *)buf = MEMORY[0x1E0C809B0];
    *(_QWORD *)&buf[8] = 3221225472;
    *(_QWORD *)&buf[16] = ___ZN13AVAudioIOUnit9EnableBusEj_block_invoke;
    *(_QWORD *)&buf[24] = &__block_descriptor_44_e5_v8__0l;
    *(_QWORD *)&buf[32] = IOUnit;
    *(_DWORD *)&buf[40] = 1;
    dispatch_sync(v19, buf);
  }
  AVAudioEngineImpl::AttachNode((AVAudioEngineImpl *)v2, *(AVAudioNode **)(v2 + 32), 1);

  AVAudioEngineGraph::AddIONode(*(uint64_t ***)(v2 + 8), *(AVAudioNode **)(v2 + 32), 1);
  v20 = (void *)objc_msgSend(*(id *)(v2 + 32), "inputFormatForBus:", 0);
  v21 = v20;
  if (v20)
  {
    objc_msgSend(v20, "sampleRate");
    if (v22 > 0.0)
    {
      if (objc_msgSend(v21, "channelCount"))
        objc_msgSend(*(id *)(v2 + 32), "setOutputFormat:forBus:", v21, 0);
    }
  }
  if (-[NSArray count](OutputConnectionPointsForNode, "count"))
    AVAudioEngineImpl::ConnectMultipleOutputs((id *)v2, *(AVAudioNode **)(v2 + 32), OutputConnectionPointsForNode, 0, 0);
  this = AVAudioEngineImpl::AreRenderingModesIdentical((AVAudioEngineImpl *)v2, *(AVAudioIONode **)(v2 + 32));
  if ((this & 1) == 0)
  {
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v23 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316418;
      *(_QWORD *)&buf[4] = "AVAEInternal.h";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 71;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = "AVAudioEngine.mm";
      *(_WORD *)&buf[28] = 1024;
      *(_DWORD *)&buf[30] = 864;
      *(_WORD *)&buf[34] = 2080;
      *(_QWORD *)&buf[36] = "UpdateInputNode";
      v25 = 2080;
      v26 = "AreRenderingModesIdentical(_inputNode)";
      _os_log_impl(&dword_19B733000, v23, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    return objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "AreRenderingModesIdentical(_inputNode)");
  }
  return this;
}

void sub_19B835FAC(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

uint64_t AVAudioEngineImpl::GetOutputConnectionPointsForNode(AVAudioEngineImpl *this, AVAudioNode *a2, uint64_t a3)
{
  NSObject *v7;
  uint8_t buf[4];
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  char *v13;
  __int16 v14;
  int v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  const char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (a2 && objc_msgSend(*((id *)this + 3), "containsObject:", a2))
    return AVAudioEngineGraph::GetOutputConnectionPointsForNode(*((AVAudioEngineGraph **)this + 1), a2, a3);
  if (AVAudioEngineLogCategory(void)::once != -1)
    dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
  v7 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
  if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136316418;
    v9 = "AVAEInternal.h";
    v10 = 1024;
    v11 = 71;
    v12 = 2080;
    v13 = "AVAudioEngine.mm";
    v14 = 1024;
    v15 = 1134;
    v16 = 2080;
    v17 = "GetOutputConnectionPointsForNode";
    v18 = 2080;
    v19 = "node != nil && [_nodes containsObject: node]";
    _os_log_impl(&dword_19B733000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
  }
  objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "node != nil && [_nodes containsObject: node]");
  return AVAudioEngineGraph::GetOutputConnectionPointsForNode(*((AVAudioEngineGraph **)this + 1), a2, a3);
}

_QWORD *AVAudioEngineImpl::DetachNode(id *this, AVAudioNode *a2, char a3, NSError **a4)
{
  _QWORD *result;
  char v9;
  void **v10;
  id v11;
  _QWORD *v12;

  result = (_QWORD *)_AVAE_CheckAndReturnErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAudioEngine.mm", 592, "DetachNode", "node != nil", a2 != 0, 4294967246, a4);
  if (!(_DWORD)result)
  {
    if ((a3 & 1) != 0
      || (!a2 ? (v9 = 1) : this[6] == a2 || this[5] == a2 ? (v9 = 0) : (v9 = this[4] != a2),
          result = (_QWORD *)_AVAE_CheckAndReturnErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAudioEngine.mm", 596, "DetachNode", "!IsInternalNode(node)", v9, 4294967246, a4), !(_DWORD)result))
    {
      result = -[AVAudioNode impl](a2, "impl");
      v10 = (void **)result[1];
      if (v10)
      {
        v11 = *v10;
        if (v11)
        {
          v12 = result;
          _AVAE_CheckAndReturnErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAudioEngine.mm", 601, "DetachNode", "nil == owningEngine || GetEngine() == owningEngine", *this == v11, 4294967246, a4);
          -[AVAudioNode didDetachFromEngine:error:](a2, "didDetachFromEngine:error:", *this, a4);
          _AVAE_CheckAndReturnErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAudioEngine.mm", 610, "DetachNode", "!nodeimpl->HasEngineImpl()", v12[1] == 0, 4294967246, a4);
          return (_QWORD *)objc_msgSend(this[3], "removeObject:", a2);
        }
      }
    }
  }
  return result;
}

_QWORD *AVAudioEngineImpl::AttachNode(AVAudioEngineImpl *this, AVAudioNode *a2, char a3)
{
  NSObject *v5;
  const char *v6;
  int v7;
  _QWORD *result;
  _QWORD *v9;
  AVAudioNode **v10;
  AVAudioNode *v11;
  AVAudioNode *v12;
  NSObject *v13;
  NSObject *v14;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  int v18;
  __int16 v19;
  char *v20;
  __int16 v21;
  int v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  const char *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  if (!a2)
  {
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v5 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    v6 = "node != nil";
    if (!os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
      goto LABEL_15;
    *(_DWORD *)buf = 136316418;
    v16 = "AVAEInternal.h";
    v17 = 1024;
    v18 = 71;
    v19 = 2080;
    v20 = "AVAudioEngine.mm";
    v21 = 1024;
    v7 = 568;
    goto LABEL_14;
  }
  if ((a3 & 1) == 0
    && (*((AVAudioNode **)this + 6) == a2 || *((AVAudioNode **)this + 5) == a2 || *((AVAudioNode **)this + 4) == a2))
  {
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v5 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    v6 = "!IsInternalNode(node)";
    if (!os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
      goto LABEL_15;
    *(_DWORD *)buf = 136316418;
    v16 = "AVAEInternal.h";
    v17 = 1024;
    v18 = 71;
    v19 = 2080;
    v20 = "AVAudioEngine.mm";
    v21 = 1024;
    v7 = 572;
LABEL_14:
    v22 = v7;
    v23 = 2080;
    v24 = "AttachNode";
    v25 = 2080;
    v26 = v6;
    _os_log_impl(&dword_19B733000, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
LABEL_15:
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), v6);
  }
  result = -[AVAudioNode impl](a2, "impl");
  v9 = result;
  v10 = (AVAudioNode **)result[1];
  if (v10)
  {
    v11 = *v10;
    v12 = *(AVAudioNode **)this;
    if (v11)
    {
      if (v12 != v11)
      {
        if (AVAudioEngineLogCategory(void)::once != -1)
          dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
        v13 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
        if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136316418;
          v16 = "AVAEInternal.h";
          v17 = 1024;
          v18 = 71;
          v19 = 2080;
          v20 = "AVAudioEngine.mm";
          v21 = 1024;
          v22 = 576;
          v23 = 2080;
          v24 = "AttachNode";
          v25 = 2080;
          v26 = "nil == owningEngine || GetEngine() == owningEngine";
          _os_log_impl(&dword_19B733000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
        }
        return (_QWORD *)objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "nil == owningEngine || GetEngine() == owningEngine");
      }
      return result;
    }
  }
  else
  {
    v12 = *(AVAudioNode **)this;
  }
  -[AVAudioNode didAttachToEngine:](a2, "didAttachToEngine:", v12);
  if (!v9[1])
  {
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v14 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316418;
      v16 = "AVAEInternal.h";
      v17 = 1024;
      v18 = 71;
      v19 = 2080;
      v20 = "AVAudioEngine.mm";
      v21 = 1024;
      v22 = 585;
      v23 = 2080;
      v24 = "AttachNode";
      v25 = 2080;
      v26 = "nodeimpl->HasEngineImpl()";
      _os_log_impl(&dword_19B733000, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "nodeimpl->HasEngineImpl()");
  }
  return (_QWORD *)objc_msgSend(*((id *)this + 3), "addObject:", a2);
}

void AVAudioEngineImpl::ConnectMultipleOutputs(id *this, AVAudioNode *a2, NSArray *a3, uint64_t a4, AVAudioFormat *a5)
{
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  void *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  BOOL v15;
  int v16;
  NSObject *v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t j;
  void *v22;
  NSObject *v23;
  NSObject *v24;
  NSObject *v25;
  uint64_t v26;
  NSObject *v27;
  AVAudioNodeImplBase *v28;
  NSObject *v29;
  double v30;
  NSObject *v31;
  _QWORD *NodeFromMap;
  NSObject *v33;
  char v34;
  unint64_t v35;
  NSObject *v36;
  uint64_t v37;
  NSObject *v38;
  unsigned int v39;
  NSError **v40;
  unint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  _OWORD *v45;
  uint64_t *k;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  NSObject *v52;
  uint64_t v53;
  _OWORD *v54;
  _OWORD *v55;
  BOOL v56;
  int v57;
  NSObject *v58;
  int v59;
  uint64_t *m;
  uint64_t Disconnection;
  NSObject *v62;
  unsigned int v63;
  NSError **v64;
  uint64_t v65;
  NSObject *v66;
  _QWORD *n;
  uint64_t v68;
  NSObject *v69;
  uint64_t *ii;
  uint64_t v71;
  int v72;
  uint64_t *jj;
  AVAudioUnitSplitter *v74;
  AVAudioNode *p_super;
  unint64_t v76;
  AVAudioUnitSplitter **v77;
  _QWORD *v78;
  AVAudioNode *v79;
  uint64_t v80;
  NSObject *v81;
  AVAudioNode *v82;
  AVAudioNode **v83;
  AVAudioNode **v84;
  int64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  char *v91;
  AVAudioNode **v92;
  char *v93;
  char *v94;
  char *v95;
  AVAudioNode *v96;
  uint64_t v97;
  NSObject *v98;
  uint64_t v99;
  NSObject *v100;
  AVAudioFormat *v101;
  uint64_t v102;
  uint64_t v103;
  void *v104;
  NSObject *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  void *v110;
  NSObject *v111;
  AVAudioNodeImplBase *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  NSObject *v116;
  uint64_t *kk;
  uint64_t *mm;
  uint64_t v119;
  uint64_t *nn;
  uint64_t updated;
  NSObject *v122;
  AVAudioNodeImplBase *v123;
  uint64_t v124;
  int v125;
  unsigned int v126;
  NSObject *v127;
  int v128;
  std::recursive_mutex *v129;
  _QWORD *v131;
  id v133;
  NSUInteger v134;
  AVAudioEngineGraph *v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  void *v143;
  void *v144;
  uint64_t v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  uint64_t v150;
  uint64_t *v151;
  uint64_t v152;
  _OWORD *v153;
  _QWORD *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t *v157;
  unint64_t v158;
  _BYTE v159[128];
  uint8_t buf[48];
  _OWORD v161[2];
  uint8_t v162[12];
  __int16 v163;
  _BYTE v164[20];
  __int16 v165;
  const char *v166;
  __int16 v167;
  const char *v168;
  void *__p;
  char v170;
  uint64_t v171;
  _BYTE v172[28];
  __int16 v173;
  int v174;
  __int16 v175;
  const char *v176;
  __int16 v177;
  const char *v178;
  __int16 v179;
  int v180;
  _BYTE __dst[28];
  __int16 v182;
  int v183;
  __int16 v184;
  const char *v185;
  __int16 v186;
  const char *v187;
  __int16 v188;
  int v189;
  uint64_t v190;

  v190 = *MEMORY[0x1E0C80C00];
  if (AVAudioEngineLogCategory(void)::once != -1)
    dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
  v5 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
  if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_DEBUG))
  {
    v133 = *this;
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v162);
    v127 = v5;
    v148 = 0u;
    v149 = 0u;
    v146 = 0u;
    v147 = 0u;
    v6 = -[NSArray countByEnumeratingWithState:objects:count:](a3, "countByEnumeratingWithState:objects:count:", &v146, v172, 16);
    if (v6)
    {
      v7 = *(_QWORD *)v147;
      do
      {
        for (i = 0; i != v6; ++i)
        {
          if (*(_QWORD *)v147 != v7)
            objc_enumerationMutation(a3);
          v9 = *(void **)(*((_QWORD *)&v146 + 1) + 8 * i);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v164[2], (uint64_t)" node: ", 7);
          objc_msgSend(v9, "node");
          v10 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" (bus: ", 7);
          objc_msgSend(v9, "bus");
          v11 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)")", 1);
        }
        v6 = -[NSArray countByEnumeratingWithState:objects:count:](a3, "countByEnumeratingWithState:objects:count:", &v146, v172, 16);
      }
      while (v6);
    }
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>(__dst, (uint64_t)&v164[10]);
    *(_QWORD *)v162 = *MEMORY[0x1E0DE4F50];
    v12 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
    *(_QWORD *)&v162[*(_QWORD *)(*(_QWORD *)v162 - 24)] = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
    *(_QWORD *)&v164[2] = v12;
    *(_QWORD *)&v164[10] = MEMORY[0x1E0DE4FB8] + 16;
    if (v170 < 0)
      operator delete(__p);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x1A1AC5B74](&v171);
    if (__dst[23] >= 0)
      v13 = __dst;
    else
      v13 = *(_BYTE **)__dst;
    v14 = objc_msgSend(-[AVAudioFormat description](a5, "description"), "UTF8String");
    *(_DWORD *)buf = 136316674;
    *(_QWORD *)&buf[4] = "AVAudioEngine.mm";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 994;
    *(_WORD *)&buf[18] = 2048;
    *(_QWORD *)&buf[20] = v133;
    *(_WORD *)&buf[28] = 2048;
    *(_QWORD *)&buf[30] = a2;
    *(_WORD *)&buf[38] = 2048;
    *(_QWORD *)&buf[40] = a4;
    LOWORD(v161[0]) = 2080;
    *(_QWORD *)((char *)v161 + 2) = v13;
    WORD5(v161[0]) = 2080;
    *(_QWORD *)((char *)v161 + 12) = v14;
    _os_log_impl(&dword_19B733000, v127, OS_LOG_TYPE_DEBUG, "%25s:%-5d Engine@%p: connect node: %p (from bus: %lu) ->%s, format: %s", buf, 0x44u);
    if ((__dst[23] & 0x80000000) != 0)
      operator delete(*(void **)__dst);
  }
  if (a2)
    v15 = a3 == 0;
  else
    v15 = 1;
  v16 = !v15;
  v128 = v16;
  if (v15 || !-[NSArray count](a3, "count"))
  {
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v17 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v162 = 136316418;
      *(_QWORD *)&v162[4] = "AVAEInternal.h";
      v163 = 1024;
      *(_DWORD *)v164 = 71;
      *(_WORD *)&v164[4] = 2080;
      *(_QWORD *)&v164[6] = "AVAudioEngine.mm";
      *(_WORD *)&v164[14] = 1024;
      *(_DWORD *)&v164[16] = 996;
      v165 = 2080;
      v166 = "ConnectMultipleOutputs";
      v167 = 2080;
      v168 = "nil != sourceNode && nil != destNodes && [destNodes count] > 0";
      _os_log_impl(&dword_19B733000, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", v162, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "nil != sourceNode && nil != destNodes && [destNodes count] > 0");
  }
  if ((objc_msgSend(this[3], "containsObject:", a2) & 1) == 0)
  {
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v18 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v162 = 136316418;
      *(_QWORD *)&v162[4] = "AVAEInternal.h";
      v163 = 1024;
      *(_DWORD *)v164 = 71;
      *(_WORD *)&v164[4] = 2080;
      *(_QWORD *)&v164[6] = "AVAudioEngine.mm";
      *(_WORD *)&v164[14] = 1024;
      *(_DWORD *)&v164[16] = 997;
      v165 = 2080;
      v166 = "ConnectMultipleOutputs";
      v167 = 2080;
      v168 = "[_nodes containsObject: sourceNode]";
      _os_log_impl(&dword_19B733000, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", v162, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "[_nodes containsObject: sourceNode]");
  }
  v141 = 0u;
  v142 = 0u;
  v139 = 0u;
  v140 = 0u;
  v19 = -[NSArray countByEnumeratingWithState:objects:count:](a3, "countByEnumeratingWithState:objects:count:", &v139, v159, 16);
  if (v19)
  {
    v20 = *(_QWORD *)v140;
    do
    {
      for (j = 0; j != v19; ++j)
      {
        if (*(_QWORD *)v140 != v20)
          objc_enumerationMutation(a3);
        v22 = *(void **)(*((_QWORD *)&v139 + 1) + 8 * j);
        if (!v22 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
        {
          if (AVAudioEngineLogCategory(void)::once != -1)
            dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
          v23 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
          if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v162 = 136316418;
            *(_QWORD *)&v162[4] = "AVAEInternal.h";
            v163 = 1024;
            *(_DWORD *)v164 = 71;
            *(_WORD *)&v164[4] = 2080;
            *(_QWORD *)&v164[6] = "AVAudioEngine.mm";
            *(_WORD *)&v164[14] = 1024;
            *(_DWORD *)&v164[16] = 999;
            v165 = 2080;
            v166 = "ConnectMultipleOutputs";
            v167 = 2080;
            v168 = "object && [object isKindOfClass: [AVAudioConnectionPoint class]]";
            _os_log_impl(&dword_19B733000, v23, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", v162, 0x36u);
          }
          objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "object && [object isKindOfClass: [AVAudioConnectionPoint class]]");
        }
        if ((objc_msgSend(this[3], "containsObject:", objc_msgSend(v22, "node")) & 1) == 0)
        {
          if (AVAudioEngineLogCategory(void)::once != -1)
            dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
          v24 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
          if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v162 = 136316418;
            *(_QWORD *)&v162[4] = "AVAEInternal.h";
            v163 = 1024;
            *(_DWORD *)v164 = 71;
            *(_WORD *)&v164[4] = 2080;
            *(_QWORD *)&v164[6] = "AVAudioEngine.mm";
            *(_WORD *)&v164[14] = 1024;
            *(_DWORD *)&v164[16] = 1002;
            v165 = 2080;
            v166 = "ConnectMultipleOutputs";
            v167 = 2080;
            v168 = "[_nodes containsObject: connPoint.node]";
            _os_log_impl(&dword_19B733000, v24, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", v162, 0x36u);
          }
          objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "[_nodes containsObject: connPoint.node]");
        }
        if ((AVAudioNode *)objc_msgSend(v22, "node") == a2)
        {
          if (AVAudioEngineLogCategory(void)::once != -1)
            dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
          v25 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
          if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v162 = 136316418;
            *(_QWORD *)&v162[4] = "AVAEInternal.h";
            v163 = 1024;
            *(_DWORD *)v164 = 71;
            *(_WORD *)&v164[4] = 2080;
            *(_QWORD *)&v164[6] = "AVAudioEngine.mm";
            *(_WORD *)&v164[14] = 1024;
            *(_DWORD *)&v164[16] = 1003;
            v165 = 2080;
            v166 = "ConnectMultipleOutputs";
            v167 = 2080;
            v168 = "sourceNode != connPoint.node";
            _os_log_impl(&dword_19B733000, v25, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", v162, 0x36u);
          }
          objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "sourceNode != connPoint.node");
        }
      }
      v19 = -[NSArray countByEnumeratingWithState:objects:count:](a3, "countByEnumeratingWithState:objects:count:", &v139, v159, 16);
    }
    while (v19);
  }
  v26 = (uint64_t)this[1];
  if (!v128 || !-[NSArray count](a3, "count"))
  {
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v27 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v162 = 136316418;
      *(_QWORD *)&v162[4] = "AVAEInternal.h";
      v163 = 1024;
      *(_DWORD *)v164 = 71;
      *(_WORD *)&v164[4] = 2080;
      *(_QWORD *)&v164[6] = "AVAudioEngineGraph.mm";
      *(_WORD *)&v164[14] = 1024;
      *(_DWORD *)&v164[16] = 2412;
      v165 = 2080;
      v166 = "ConnectMultipleOutputs";
      v167 = 2080;
      v168 = "inSrcAVNode && inDestAVConnectionPoints && inDestAVConnectionPoints.count > 0";
      _os_log_impl(&dword_19B733000, v27, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", v162, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "inSrcAVNode && inDestAVConnectionPoints && inDestAVConnectionPoints.count > 0");
  }
  v129 = (std::recursive_mutex *)(*(_QWORD *)v26 + 112);
  std::recursive_mutex::lock(v129);
  v28 = -[AVAudioNode impl](a2, "impl");
  v126 = (*(uint64_t (**)(AVAudioNodeImplBase *, uint64_t))(*(_QWORD *)v28 + 240))(v28, a4);
  if (!AVAudioEngineGraph::IsNodeInGraph((AVAudioEngineGraph *)v26, v28))
  {
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v29 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v162 = 136316418;
      *(_QWORD *)&v162[4] = "AVAEInternal.h";
      v163 = 1024;
      *(_DWORD *)v164 = 71;
      *(_WORD *)&v164[4] = 2080;
      *(_QWORD *)&v164[6] = "AVAudioEngineGraph.mm";
      *(_WORD *)&v164[14] = 1024;
      *(_DWORD *)&v164[16] = 2423;
      v165 = 2080;
      v166 = "ConnectMultipleOutputs";
      v167 = 2080;
      v168 = "IsNodeInGraph(inSrcImpl)";
      _os_log_impl(&dword_19B733000, v29, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", v162, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "IsNodeInGraph(inSrcImpl)");
  }
  if (a5)
  {
    -[AVAudioFormat sampleRate](a5, "sampleRate");
    if (v30 <= 0.0 || !-[AVAudioFormat channelCount](a5, "channelCount"))
    {
      if (AVAudioEngineLogCategory(void)::once != -1)
        dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
      v31 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
      if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v162 = 136316418;
        *(_QWORD *)&v162[4] = "AVAEInternal.h";
        v163 = 1024;
        *(_DWORD *)v164 = 71;
        *(_WORD *)&v164[4] = 2080;
        *(_QWORD *)&v164[6] = "AVAudioEngineGraph.mm";
        *(_WORD *)&v164[14] = 1024;
        *(_DWORD *)&v164[16] = 2426;
        v165 = 2080;
        v166 = "ConnectMultipleOutputs";
        v167 = 2080;
        v168 = "IsFormatSampleRateAndChannelCountValid(format)";
        _os_log_impl(&dword_19B733000, v31, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", v162, 0x36u);
      }
      objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "IsFormatSampleRateAndChannelCountValid(format)");
    }
  }
  NodeFromMap = (_QWORD *)AVAudioEngineGraph::GetNodeFromMap((AVAudioEngineGraph *)v26, v28);
  if ((*(unsigned int (**)(_QWORD *))(*NodeFromMap + 112))(NodeFromMap))
  {
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v33 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v162 = 136316418;
      *(_QWORD *)&v162[4] = "AVAEInternal.h";
      v163 = 1024;
      *(_DWORD *)v164 = 71;
      *(_WORD *)&v164[4] = 2080;
      *(_QWORD *)&v164[6] = "AVAudioEngineGraph.mm";
      *(_WORD *)&v164[14] = 1024;
      *(_DWORD *)&v164[16] = 2433;
      v165 = 2080;
      v166 = "ConnectMultipleOutputs";
      v167 = 2080;
      v168 = "!inSrcNode->IsSplitterNode()";
      _os_log_impl(&dword_19B733000, v33, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", v162, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "!inSrcNode->IsSplitterNode()");
  }
  v124 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)NodeFromMap[3] + 48))(NodeFromMap[3], a4);
  if (a5)
    v34 = !-[AVAudioFormat isEqual:](a5, "isEqual:");
  else
    v34 = 0;
  v156 = (uint64_t)&v156;
  v157 = &v156;
  v158 = 0;
  AUGraphNodeBase::GetValidConnectionPoints(NodeFromMap, &v156);
  v35 = v158;
  v131 = NodeFromMap;
  if (v158 >= 2)
  {
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v36 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v162 = 136316418;
      *(_QWORD *)&v162[4] = "AVAEInternal.h";
      v163 = 1024;
      *(_DWORD *)v164 = 71;
      *(_WORD *)&v164[4] = 2080;
      *(_QWORD *)&v164[6] = "AVAudioEngineGraph.mm";
      *(_WORD *)&v164[14] = 1024;
      *(_DWORD *)&v164[16] = 2442;
      v165 = 2080;
      v166 = "ConnectMultipleOutputs";
      v167 = 2080;
      v168 = "currentConnPoints.size() <= 1";
      _os_log_impl(&dword_19B733000, v36, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", v162, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "currentConnPoints.size() <= 1");
    v35 = v158;
  }
  v123 = v28;
  v37 = (uint64_t)NodeFromMap;
  if (v35)
  {
    v37 = (uint64_t)NodeFromMap;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v157[2] + 112))(v157[2]))
    {
      v37 = v157[2];
      AUGraphNodeBase::GetValidConnectionPoints((_QWORD *)v37, &v156);
      if (v158 <= 1)
      {
        if (AVAudioEngineLogCategory(void)::once != -1)
          dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
        v38 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
        if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v162 = 136316418;
          *(_QWORD *)&v162[4] = "AVAEInternal.h";
          v163 = 1024;
          *(_DWORD *)v164 = 71;
          *(_WORD *)&v164[4] = 2080;
          *(_QWORD *)&v164[6] = "AVAudioEngineGraph.mm";
          *(_WORD *)&v164[14] = 1024;
          *(_DWORD *)&v164[16] = 2448;
          v165 = 2080;
          v166 = "ConnectMultipleOutputs";
          v167 = 2080;
          v168 = "currentConnPoints.size() > 1";
          _os_log_impl(&dword_19B733000, v38, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", v162, 0x36u);
        }
        objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "currentConnPoints.size() > 1");
      }
    }
  }
  v153 = &v153;
  v154 = &v153;
  v155 = 0;
  v134 = -[NSArray count](a3, "count");
  v138 = (AVAudioEngineGraph *)v26;
  if ((v34 & 1) != 0)
  {
    std::__list_imp<AUGraphConnection>::clear(&v153);
    v41 = v158;
    if (v158)
    {
      v43 = v156;
      v42 = v157;
      v44 = *v157;
      *(_QWORD *)(v44 + 8) = *(_QWORD *)(v156 + 8);
      **(_QWORD **)(v43 + 8) = v44;
      v45 = v153;
      *((_QWORD *)v153 + 1) = v42;
      *v42 = (uint64_t)v45;
      *(_QWORD *)(v43 + 8) = &v153;
      v153 = (_OWORD *)v43;
      v155 += v41;
      v158 = 0;
    }
    goto LABEL_130;
  }
  for (k = v157; k != &v156; k = (uint64_t *)k[1])
  {
    v161[0] = 0u;
    memset(buf, 0, sizeof(buf));
    v47 = -[NSArray countByEnumeratingWithState:objects:count:](a3, "countByEnumeratingWithState:objects:count:", buf, v162, 16);
    v48 = k + 2;
    if (v47)
    {
      v49 = **(_QWORD **)&buf[16];
LABEL_113:
      v50 = 0;
      while (1)
      {
        if (**(_QWORD **)&buf[16] != v49)
          objc_enumerationMutation(a3);
        v51 = *(void **)(*(_QWORD *)&buf[8] + 8 * v50);
        if (!v51)
        {
          if (AVAudioEngineLogCategory(void)::once != -1)
            dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
          v52 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
          if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v172 = 136316418;
            *(_QWORD *)&v172[4] = "AVAEInternal.h";
            *(_WORD *)&v172[12] = 1024;
            *(_DWORD *)&v172[14] = 71;
            *(_WORD *)&v172[18] = 2080;
            *(_QWORD *)&v172[20] = "AVAudioEngineGraph.mm";
            v173 = 1024;
            v174 = 2466;
            v175 = 2080;
            v176 = "ConnectMultipleOutputs";
            v177 = 2080;
            v178 = "avConnPoint";
            _os_log_impl(&dword_19B733000, v52, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", v172, 0x36u);
          }
          objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "avConnPoint");
        }
        if (objc_msgSend(v51, "node") == *(_QWORD *)(*v48 + 16))
        {
          v53 = objc_msgSend(v51, "bus");
          if (v53 == (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(k[2] + 24) + 248))(*(_QWORD *)(k[2] + 24), *((unsigned int *)k + 6)))break;
        }
        if (v47 == ++v50)
        {
          v47 = -[NSArray countByEnumeratingWithState:objects:count:](a3, "countByEnumeratingWithState:objects:count:", buf, v162, 16);
          if (v47)
            goto LABEL_113;
          goto LABEL_126;
        }
      }
    }
    else
    {
LABEL_126:
      v54 = operator new(0x20uLL);
      v54[1] = *(_OWORD *)v48;
      v55 = v153;
      *(_QWORD *)v54 = v153;
      *((_QWORD *)v54 + 1) = &v153;
      *((_QWORD *)v55 + 1) = v54;
      v153 = v54;
      ++v155;
    }
  }
  v26 = (uint64_t)v138;
  if (v155 || v134 > v158)
  {
LABEL_130:
    v150 = (uint64_t)&v150;
    v151 = &v150;
    v152 = 0;
    if (!*(_BYTE *)(v26 + 185) || !*(_BYTE *)(*(_QWORD *)(v37 + 24) + 48))
    {
      v125 = 2;
LABEL_150:
      for (m = v151; m != &v150; m = (uint64_t *)m[1])
      {
        AUGraphParser::PrepareForDisconnection(v138, (const AVAudioEngineGraph *)m[4], 0, v39, v40);
        Disconnection = AVAudioEngineGraph::MakeDisconnection(v138, *(AVAudioNodeImplBase **)(m[4] + 24), *((unsigned int *)m + 10), 0);
        if ((_DWORD)Disconnection)
        {
          if (AVAudioEngineLogCategory(void)::once != -1)
            dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
          v62 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
          if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v172 = 136316674;
            *(_QWORD *)&v172[4] = "AVAEInternal.h";
            *(_WORD *)&v172[12] = 1024;
            *(_DWORD *)&v172[14] = 104;
            *(_WORD *)&v172[18] = 2080;
            *(_QWORD *)&v172[20] = "AVAudioEngineGraph.mm";
            v173 = 1024;
            v174 = 2537;
            v175 = 2080;
            v176 = "ConnectMultipleOutputs";
            v177 = 2080;
            v178 = "MakeDisconnection(conn.destNode->NodeImpl(), conn.destBus)";
            v179 = 1024;
            v180 = Disconnection;
            _os_log_impl(&dword_19B733000, v62, OS_LOG_TYPE_ERROR, "%25s:%-5d [%s:%d:%s: (%s): error %d", v172, 0x3Cu);
          }
          objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("error %d"), Disconnection);
        }
      }
      v65 = AVAudioEngineGraph::PerformCommand((uint64_t)v138, (_QWORD *)v37, 4, 0, 0);
      if ((_DWORD)v65)
      {
        if (AVAudioEngineLogCategory(void)::once != -1)
          dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
        v66 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
        if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v172 = 136316674;
          *(_QWORD *)&v172[4] = "AVAEInternal.h";
          *(_WORD *)&v172[12] = 1024;
          *(_DWORD *)&v172[14] = 104;
          *(_WORD *)&v172[18] = 2080;
          *(_QWORD *)&v172[20] = "AVAudioEngineGraph.mm";
          v173 = 1024;
          v174 = 2543;
          v175 = 2080;
          v176 = "ConnectMultipleOutputs";
          v177 = 2080;
          v178 = "PerformCommand(*finalSrcNode, kAUUninitialize, NULL, 0)";
          v179 = 1024;
          v180 = v65;
          _os_log_impl(&dword_19B733000, v66, OS_LOG_TYPE_ERROR, "%25s:%-5d [%s:%d:%s: (%s): error %d", v172, 0x3Cu);
        }
        objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("error %d"), v65);
      }
      for (n = v154; n != &v153; n = (_QWORD *)n[1])
      {
        AUGraphParser::PrepareForDisconnection(v138, (const AVAudioEngineGraph *)n[2], 0, v63, v64);
        v68 = AVAudioEngineGraph::_DisconnectInput(v138, *(AVAudioNodeImplBase **)(n[2] + 24), *((unsigned int *)n + 6));
        if ((_DWORD)v68)
        {
          if (AVAudioEngineLogCategory(void)::once != -1)
            dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
          v69 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
          if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v172 = 136316674;
            *(_QWORD *)&v172[4] = "AVAEInternal.h";
            *(_WORD *)&v172[12] = 1024;
            *(_DWORD *)&v172[14] = 104;
            *(_WORD *)&v172[18] = 2080;
            *(_QWORD *)&v172[20] = "AVAudioEngineGraph.mm";
            v173 = 1024;
            v174 = 2553;
            v175 = 2080;
            v176 = "ConnectMultipleOutputs";
            v177 = 2080;
            v178 = "_DisconnectInput(connPoint.node->NodeImpl(), connPoint.bus)";
            v179 = 1024;
            v180 = v68;
            _os_log_impl(&dword_19B733000, v69, OS_LOG_TYPE_ERROR, "%25s:%-5d [%s:%d:%s: (%s): error %d", v172, 0x3Cu);
          }
          objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("error %d"), v68);
        }
        if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)n[2] + 120))(n[2]))
        {
          *(_QWORD *)v172 = v172;
          *(_QWORD *)&v172[8] = v172;
          *(_QWORD *)&v172[16] = 0;
          for (ii = v151; ii != &v150; ii = (uint64_t *)jj[1])
          {
            v71 = ii[4];
            if (v71 == n[2])
            {
              v72 = *((_DWORD *)ii + 10);
              if (v72 == *((_DWORD *)n + 6))
              {
                for (jj = (uint64_t *)ii[1]; jj != &v150; jj = (uint64_t *)jj[1])
                {
                  if (jj[4] != v71 || *((_DWORD *)jj + 10) != v72)
                  {
                    std::list<AUGraphConnection>::splice((uint64_t)v172, (uint64_t *)v172, (uint64_t)&v150, ii, jj);
                    goto LABEL_182;
                  }
                }
                std::list<AUGraphConnection>::splice((uint64_t)v172, (uint64_t *)v172, (uint64_t)&v150, ii, &v150);
                break;
              }
            }
            jj = ii;
LABEL_182:
            ;
          }
          std::__list_imp<AUGraphConnection>::clear(v172);
        }
      }
      if (v134 <= 1)
      {
        if ((_DWORD)v134 == 1 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v37 + 112))(v37))
        {
          v79 = *(AVAudioNode **)(v37 + 16);
          v80 = AVAudioEngineGraph::RemoveNode((uint64_t ***)v138, v79, 0);
          if ((_DWORD)v80)
          {
            if (AVAudioEngineLogCategory(void)::once != -1)
              dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
            v81 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
            if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)v172 = 136316674;
              *(_QWORD *)&v172[4] = "AVAEInternal.h";
              *(_WORD *)&v172[12] = 1024;
              *(_DWORD *)&v172[14] = 104;
              *(_WORD *)&v172[18] = 2080;
              *(_QWORD *)&v172[20] = "AVAudioEngineGraph.mm";
              v173 = 1024;
              v174 = 2580;
              v175 = 2080;
              v176 = "ConnectMultipleOutputs";
              v177 = 2080;
              v178 = "RemoveNode(avNode)";
              v179 = 1024;
              v180 = v80;
              _os_log_impl(&dword_19B733000, v81, OS_LOG_TYPE_ERROR, "%25s:%-5d [%s:%d:%s: (%s): error %d", v172, 0x3Cu);
            }
            objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("error %d"), v80);
          }
          v82 = v79;
          v84 = (AVAudioNode **)*((_QWORD *)v138 + 4);
          v83 = (AVAudioNode **)*((_QWORD *)v138 + 5);
          if (v84 != v83)
          {
            while (*v84 != v79)
            {
              if (++v84 == v83)
              {
                v84 = (AVAudioNode **)*((_QWORD *)v138 + 5);
                break;
              }
            }
          }
          v85 = (char *)v83 - (char *)(v84 + 1);
          if (v83 != v84 + 1)
            memmove(v84, v84 + 1, (char *)v83 - (char *)(v84 + 1));
          *((_QWORD *)v138 + 5) = (char *)v84 + v85;
          v37 = (uint64_t)v131;
        }
      }
      else if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v37 + 112))(v37) & 1) == 0)
      {
        v74 = objc_alloc_init(AVAudioUnitSplitter);
        p_super = &v74->super.super;
        v77 = (AVAudioUnitSplitter **)*((_QWORD *)v138 + 5);
        v76 = *((_QWORD *)v138 + 6);
        if ((unint64_t)v77 >= v76)
        {
          v86 = *((_QWORD *)v138 + 4);
          v87 = ((uint64_t)v77 - v86) >> 3;
          if ((unint64_t)(v87 + 1) >> 61)
            std::vector<EExtAudioGraphNodeState>::__throw_length_error[abi:ne180100]();
          v88 = v76 - v86;
          v89 = v88 >> 2;
          if (v88 >> 2 <= (unint64_t)(v87 + 1))
            v89 = v87 + 1;
          if ((unint64_t)v88 >= 0x7FFFFFFFFFFFFFF8)
            v90 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v90 = v89;
          if (v90)
          {
            if (v90 >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v91 = (char *)operator new(8 * v90);
          }
          else
          {
            v91 = 0;
          }
          v92 = (AVAudioNode **)&v91[8 * v87];
          v93 = &v91[8 * v90];
          *v92 = p_super;
          v78 = v92 + 1;
          v95 = (char *)*((_QWORD *)v138 + 4);
          v94 = (char *)*((_QWORD *)v138 + 5);
          if (v94 != v95)
          {
            do
            {
              v96 = (AVAudioNode *)*((_QWORD *)v94 - 1);
              v94 -= 8;
              *--v92 = v96;
            }
            while (v94 != v95);
            v94 = (char *)*((_QWORD *)v138 + 4);
          }
          *((_QWORD *)v138 + 4) = v92;
          *((_QWORD *)v138 + 5) = v78;
          *((_QWORD *)v138 + 6) = v93;
          if (v94)
            operator delete(v94);
        }
        else
        {
          *v77 = v74;
          v78 = v77 + 1;
        }
        *((_QWORD *)v138 + 5) = v78;
        AVAudioEngineGraph::AddNode((uint64_t **)v138, p_super);
        v97 = AVAudioEngineGraph::_Connect(v138, v123, (AVAudioNodeImplBase *)-[AVAudioNode impl](p_super, "impl"), v126, 0, a5);
        if ((_DWORD)v97)
        {
          if (AVAudioEngineLogCategory(void)::once != -1)
            dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
          v98 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
          if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v172 = 136316674;
            *(_QWORD *)&v172[4] = "AVAEInternal.h";
            *(_WORD *)&v172[12] = 1024;
            *(_DWORD *)&v172[14] = 104;
            *(_WORD *)&v172[18] = 2080;
            *(_QWORD *)&v172[20] = "AVAudioEngineGraph.mm";
            v173 = 1024;
            v174 = 2570;
            v175 = 2080;
            v176 = "ConnectMultipleOutputs";
            v177 = 2080;
            v178 = "_Connect(inSrcImpl, [splitter impl], inSrcBus, kAudioUnitElement_Default, format)";
            v179 = 1024;
            v180 = v97;
            _os_log_impl(&dword_19B733000, v98, OS_LOG_TYPE_ERROR, "%25s:%-5d [%s:%d:%s: (%s): error %d", v172, 0x3Cu);
          }
          objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("error %d"), v97);
        }
        v37 = AVAudioEngineGraph::GetNodeFromMap(v138, (AVAudioNodeImplBase *)-[AVAudioNode impl](p_super, "impl"));
      }
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v37 + 104))(v37))
      {
        v99 = AVAudioEngineGraph::PerformCommand((uint64_t)v138, (_QWORD *)v37, 4, 0, 0);
        if ((_DWORD)v99)
        {
          if (AVAudioEngineLogCategory(void)::once != -1)
            dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
          v100 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
          if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v172 = 136316674;
            *(_QWORD *)&v172[4] = "AVAEInternal.h";
            *(_WORD *)&v172[12] = 1024;
            *(_DWORD *)&v172[14] = 104;
            *(_WORD *)&v172[18] = 2080;
            *(_QWORD *)&v172[20] = "AVAudioEngineGraph.mm";
            v173 = 1024;
            v174 = 2590;
            v175 = 2080;
            v176 = "ConnectMultipleOutputs";
            v177 = 2080;
            v178 = "PerformCommand(*finalSrcNode, AVAudioEngineGraph::kAUUninitialize, NULL, 0)";
            v179 = 1024;
            v180 = v99;
            _os_log_impl(&dword_19B733000, v100, OS_LOG_TYPE_ERROR, "%25s:%-5d [%s:%d:%s: (%s): error %d", v172, 0x3Cu);
          }
          objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("error %d"), v99);
        }
        (*(void (**)(_QWORD, NSUInteger))(**(_QWORD **)(v37 + 24) + 120))(*(_QWORD *)(v37 + 24), v134);
        if (a5)
          v101 = a5;
        else
          v101 = (AVAudioFormat *)v124;
        if (v101 && (_DWORD)v134)
        {
          v102 = 0;
          do
          {
            (*(void (**)(_QWORD, uint64_t, AVAudioFormat *))(**(_QWORD **)(v37 + 24) + 64))(*(_QWORD *)(v37 + 24), v102, v101);
            v103 = *(_QWORD *)(v37 + 112);
            if (v103)
            {
              v104 = (void *)(*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v103 + 24) + 48))(*(_QWORD *)(v103 + 24), 0);
              if ((objc_msgSend(v104, "isEqual:", (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v37 + 24) + 48))(*(_QWORD *)(v37 + 24), 0)) & 1) == 0)
              {
                if (AVAudioEngineLogCategory(void)::once != -1)
                  dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
                v105 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
                if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)v172 = 136316418;
                  *(_QWORD *)&v172[4] = "AVAEInternal.h";
                  *(_WORD *)&v172[12] = 1024;
                  *(_DWORD *)&v172[14] = 71;
                  *(_WORD *)&v172[18] = 2080;
                  *(_QWORD *)&v172[20] = "AVAudioEngineGraph.mm";
                  v173 = 1024;
                  v174 = 2601;
                  v175 = 2080;
                  v176 = "ConnectMultipleOutputs";
                  v177 = 2080;
                  v178 = "[midiInputImpl->GetOutputFormat(0) isEqual:finalSrcNode->NodeImpl()->GetOutputFormat(0)]";
                  _os_log_impl(&dword_19B733000, v105, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", v172, 0x36u);
                }
                objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "[midiInputImpl->GetOutputFormat(0) isEqual:finalSrcNode->NodeImpl()->GetOutputFormat(0)]");
              }
            }
            ++v102;
          }
          while (v134 != v102);
        }
      }
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v37 + 112))(v37))
        v106 = 0;
      else
        v106 = v126;
      v148 = 0u;
      v149 = 0u;
      v146 = 0u;
      v147 = 0u;
      v107 = -[NSArray countByEnumeratingWithState:objects:count:](a3, "countByEnumeratingWithState:objects:count:", &v146, v172, 16);
      if (v107)
      {
        v108 = *(_QWORD *)v147;
        do
        {
          v109 = 0;
          do
          {
            if (*(_QWORD *)v147 != v108)
              objc_enumerationMutation(a3);
            v110 = *(void **)(*((_QWORD *)&v146 + 1) + 8 * v109);
            if (!v110)
            {
              if (AVAudioEngineLogCategory(void)::once != -1)
                dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
              v111 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
              if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)__dst = 136316418;
                *(_QWORD *)&__dst[4] = "AVAEInternal.h";
                *(_WORD *)&__dst[12] = 1024;
                *(_DWORD *)&__dst[14] = 71;
                *(_WORD *)&__dst[18] = 2080;
                *(_QWORD *)&__dst[20] = "AVAudioEngineGraph.mm";
                v182 = 1024;
                v183 = 2613;
                v184 = 2080;
                v185 = "ConnectMultipleOutputs";
                v186 = 2080;
                v187 = "avConnPoint";
                _os_log_impl(&dword_19B733000, v111, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", __dst, 0x36u);
              }
              objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "avConnPoint");
            }
            v112 = (AVAudioNodeImplBase *)objc_msgSend((id)objc_msgSend(v110, "node"), "impl");
            v113 = AVAudioEngineGraph::GetNodeFromMap(v138, v112);
            v114 = (*(uint64_t (**)(AVAudioNodeImplBase *, uint64_t))(*(_QWORD *)v112 + 240))(v112, objc_msgSend(v110, "bus"));
            if (*((_BYTE *)v138 + 185)
              && *(_BYTE *)(*(_QWORD *)(v113 + 24) + 48)
              && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v113 + 120))(v113)
              && (*(_BYTE *)(v113 + 32) & 2) != 0)
            {
              *(_QWORD *)__dst = v37;
              *(_DWORD *)&__dst[8] = v106;
              *(_QWORD *)&__dst[16] = v113;
              *(_DWORD *)&__dst[24] = v114;
              AVAudioEngineGraph::AddPendingConnection((uint64_t)v138, 0, (uint64_t)__dst, 0);
            }
            else
            {
              v115 = AVAudioEngineGraph::_Connect(v138, *(AVAudioNodeImplBase **)(v37 + 24), v112, v106, v114, a5);
              if ((_DWORD)v115)
              {
                if (AVAudioEngineLogCategory(void)::once != -1)
                  dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
                v116 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
                if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)__dst = 136316674;
                  *(_QWORD *)&__dst[4] = "AVAEInternal.h";
                  *(_WORD *)&__dst[12] = 1024;
                  *(_DWORD *)&__dst[14] = 104;
                  *(_WORD *)&__dst[18] = 2080;
                  *(_QWORD *)&__dst[20] = "AVAudioEngineGraph.mm";
                  v182 = 1024;
                  v183 = 2627;
                  v184 = 2080;
                  v185 = "ConnectMultipleOutputs";
                  v186 = 2080;
                  v187 = "_Connect(finalSrcNode->NodeImpl(), destImpl, srcBus, destBus, format)";
                  v188 = 1024;
                  v189 = v115;
                  _os_log_impl(&dword_19B733000, v116, OS_LOG_TYPE_ERROR, "%25s:%-5d [%s:%d:%s: (%s): error %d", __dst, 0x3Cu);
                }
                objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("error %d"), v115);
              }
            }
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v113 + 120))(v113))
            {
              *(_QWORD *)__dst = __dst;
              *(_QWORD *)&__dst[8] = __dst;
              *(_QWORD *)&__dst[16] = 0;
              for (kk = v151; kk != &v150; kk = (uint64_t *)mm[1])
              {
                if (kk[4] == v113 && *((_DWORD *)kk + 10) == (_DWORD)v114)
                {
                  for (mm = (uint64_t *)kk[1]; mm != &v150; mm = (uint64_t *)mm[1])
                  {
                    if (mm[4] != v113 || *((_DWORD *)mm + 10) != (_DWORD)v114)
                    {
                      std::list<AUGraphConnection>::splice((uint64_t)__dst, (uint64_t *)__dst, (uint64_t)&v150, kk, mm);
                      goto LABEL_287;
                    }
                  }
                  std::list<AUGraphConnection>::splice((uint64_t)__dst, (uint64_t *)__dst, (uint64_t)&v150, kk, &v150);
                  break;
                }
                mm = kk;
LABEL_287:
                ;
              }
              std::__list_imp<AUGraphConnection>::clear(__dst);
            }
            v106 = v106 + (*(unsigned int (**)(uint64_t))(*(_QWORD *)v37 + 112))(v37);
            ++v109;
          }
          while (v109 != v107);
          v119 = -[NSArray countByEnumeratingWithState:objects:count:](a3, "countByEnumeratingWithState:objects:count:", &v146, v172, 16);
          v107 = v119;
        }
        while (v119);
      }
      for (nn = v151; nn != &v150; nn = (uint64_t *)nn[1])
        AVAudioEngineGraph::AddPendingConnection((uint64_t)v138, 0, (uint64_t)(nn + 2), 0);
      v143 = 0;
      v144 = 0;
      v145 = 0;
      updated = AVAudioEngineGraph::UpdateGraphAfterReconfig(v138, (uint64_t)&v143, v125);
      if ((_DWORD)updated)
      {
        if (AVAudioEngineLogCategory(void)::once != -1)
          dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
        v122 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
        if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)__dst = 136316674;
          *(_QWORD *)&__dst[4] = "AVAEInternal.h";
          *(_WORD *)&__dst[12] = 1024;
          *(_DWORD *)&__dst[14] = 104;
          *(_WORD *)&__dst[18] = 2080;
          *(_QWORD *)&__dst[20] = "AVAudioEngineGraph.mm";
          v182 = 1024;
          v183 = 2649;
          v184 = 2080;
          v185 = "ConnectMultipleOutputs";
          v186 = 2080;
          v187 = "UpdateGraphAfterReconfig(&disjointNodes, graphTraversalMode)";
          v188 = 1024;
          v189 = updated;
          _os_log_impl(&dword_19B733000, v122, OS_LOG_TYPE_ERROR, "%25s:%-5d [%s:%d:%s: (%s): error %d", __dst, 0x3Cu);
        }
        objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("error %d"), updated);
      }
      if (v143)
      {
        v144 = v143;
        operator delete(v143);
      }
      std::__list_imp<AUGraphConnection>::clear(&v150);
      goto LABEL_306;
    }
    if ((*(_BYTE *)(v37 + 32) & 2) != 0)
    {
      LOBYTE(v146) = 0;
      AUGraphParser::GetNodeConnectionsToMixer((_QWORD *)v37, &v150, &v146);
      if (v152)
        v56 = v146 == 0;
      else
        v56 = 0;
      v57 = v56;
      if (!*(_BYTE *)(v26 + 184))
      {
        if (v57)
          v59 = 2;
        else
          v59 = 1;
LABEL_147:
        v125 = v59;
        if (AUGraphParser::IsNodeConnectedToTarget(0, (_QWORD *)v37, (_QWORD *)(v26 + 88)))
          AVAudioEngineGraph::SetNodesToPullEnabled(v26, 0);
        goto LABEL_150;
      }
      if ((v57 & 1) == 0)
      {
        if (AVAudioEngineLogCategory(void)::once != -1)
          dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
        v58 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
        if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v172 = 136316418;
          *(_QWORD *)&v172[4] = "AVAEInternal.h";
          *(_WORD *)&v172[12] = 1024;
          *(_DWORD *)&v172[14] = 71;
          *(_WORD *)&v172[18] = 2080;
          *(_QWORD *)&v172[20] = "AVAudioEngineGraph.mm";
          v173 = 1024;
          v174 = 2520;
          v175 = 2080;
          v176 = "ConnectMultipleOutputs";
          v177 = 2080;
          v178 = "!srcNodeMixerConns.empty() && !isSrcNodeConnectedToIONode";
          _os_log_impl(&dword_19B733000, v58, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", v172, 0x36u);
        }
        objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "!srcNodeMixerConns.empty() && !isSrcNodeConnectedToIONode");
      }
    }
    v59 = 2;
    goto LABEL_147;
  }
LABEL_306:
  std::__list_imp<AUGraphConnection>::clear(&v153);
  std::__list_imp<AUGraphConnection>::clear(&v156);
  std::recursive_mutex::unlock(v129);
}

void sub_19B838C04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::recursive_mutex *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
  std::__list_imp<AUGraphConnection>::clear(&a44);
  std::__list_imp<AUGraphConnection>::clear(&a47);
  std::__list_imp<AUGraphConnection>::clear(&a50);
  std::recursive_mutex::unlock(a14);
  _Unwind_Resume(a1);
}

BOOL AVAudioEngineImpl::AreRenderingModesIdentical(AVAudioEngineImpl *this, AVAudioIONode *a2)
{
  uint64_t v4;
  int v5;
  _BOOL4 v6;
  _BOOL4 v7;
  _BOOL8 result;

  if (!a2)
    return 0;
  v4 = *((_QWORD *)this + 1);
  v5 = *(unsigned __int8 *)(v4 + 187);
  v6 = *(_BYTE *)(v4 + 187) != 0;
  v7 = -[AVAudioIONode isInManualRenderingMode](a2, "isInManualRenderingMode");
  result = v7 ^ v6 ^ 1u;
  if (v7)
  {
    if (v5)
      return -[AVAudioIONode manualRenderingMode](a2, "manualRenderingMode") == *(_QWORD *)(*((_QWORD *)this + 1) + 192);
  }
  return result;
}

AVAudioConnectionPoint *AVAudioEngineImpl::GetInputConnectionPointForNode(AVAudioEngineImpl *this, AVAudioNode *a2, uint64_t a3)
{
  NSObject *v7;
  uint8_t buf[4];
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  char *v13;
  __int16 v14;
  int v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  const char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (a2 && objc_msgSend(*((id *)this + 3), "containsObject:", a2))
    return AVAudioEngineGraph::GetInputConnectionPointForNode(*((AVAudioEngineGraph **)this + 1), a2, a3);
  if (AVAudioEngineLogCategory(void)::once != -1)
    dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
  v7 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
  if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136316418;
    v9 = "AVAEInternal.h";
    v10 = 1024;
    v11 = 71;
    v12 = 2080;
    v13 = "AVAudioEngine.mm";
    v14 = 1024;
    v15 = 1128;
    v16 = 2080;
    v17 = "GetInputConnectionPointForNode";
    v18 = 2080;
    v19 = "node != nil && [_nodes containsObject: node]";
    _os_log_impl(&dword_19B733000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
  }
  objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "node != nil && [_nodes containsObject: node]");
  return AVAudioEngineGraph::GetInputConnectionPointForNode(*((AVAudioEngineGraph **)this + 1), a2, a3);
}

BOOL AVAudioEngineImpl::Connect(id *this, AVAudioNode *a2, AVAudioNode *a3, uint64_t a4, uint64_t a5, AVAudioFormat *a6)
{
  NSObject *v12;
  char *v13;
  BOOL v14;
  char v15;
  NSObject *v16;
  NSObject *v17;
  NSObject *v18;
  AVAudioEngineGraph *v19;
  NSObject *v20;
  AVAudioNodeImplBase *v21;
  AVAudioNodeImplBase *v22;
  AVAudioNodeImplBase *v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint8_t buf[4];
  const char *v31;
  __int16 v32;
  int v33;
  __int16 v34;
  char *v35;
  __int16 v36;
  _BYTE v37[28];
  __int16 v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  if (AVAudioEngineLogCategory(void)::once != -1)
    dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
  v12 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
  if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_DEBUG))
  {
    v13 = (char *)*this;
    *(_DWORD *)buf = 136316930;
    v31 = "AVAudioEngine.mm";
    v32 = 1024;
    v33 = 960;
    v34 = 2048;
    v35 = v13;
    v36 = 2048;
    *(_QWORD *)v37 = a2;
    *(_WORD *)&v37[8] = 2048;
    *(_QWORD *)&v37[10] = a4;
    *(_WORD *)&v37[18] = 2048;
    *(_QWORD *)&v37[20] = a3;
    v38 = 2048;
    v39 = a5;
    v40 = 2080;
    v41 = objc_msgSend(-[AVAudioFormat description](a6, "description"), "UTF8String");
    _os_log_impl(&dword_19B733000, v12, OS_LOG_TYPE_DEBUG, "%25s:%-5d Engine@%p: connect node1: %p (from bus: %lu) -> node2: %p (to bus: %lu), format: %s", buf, 0x4Eu);
  }
  v28 = a4;
  v29 = a5;
  if (a2)
    v14 = a3 == 0;
  else
    v14 = 1;
  v15 = !v14;
  if (v14)
  {
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v16 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316418;
      v31 = "AVAEInternal.h";
      v32 = 1024;
      v33 = 71;
      v34 = 2080;
      v35 = "AVAudioEngine.mm";
      v36 = 1024;
      *(_DWORD *)v37 = 962;
      *(_WORD *)&v37[4] = 2080;
      *(_QWORD *)&v37[6] = "Connect";
      *(_WORD *)&v37[14] = 2080;
      *(_QWORD *)&v37[16] = "node1 != nil && node2 != nil";
      _os_log_impl(&dword_19B733000, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "node1 != nil && node2 != nil");
  }
  if (a2 == a3)
  {
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v17 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316418;
      v31 = "AVAEInternal.h";
      v32 = 1024;
      v33 = 71;
      v34 = 2080;
      v35 = "AVAudioEngine.mm";
      v36 = 1024;
      *(_DWORD *)v37 = 963;
      *(_WORD *)&v37[4] = 2080;
      *(_QWORD *)&v37[6] = "Connect";
      *(_WORD *)&v37[14] = 2080;
      *(_QWORD *)&v37[16] = "node1 != node2";
      _os_log_impl(&dword_19B733000, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "node1 != node2");
  }
  if (!objc_msgSend(this[3], "containsObject:", a2)
    || (objc_msgSend(this[3], "containsObject:", a3) & 1) == 0)
  {
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v18 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316418;
      v31 = "AVAEInternal.h";
      v32 = 1024;
      v33 = 71;
      v34 = 2080;
      v35 = "AVAudioEngine.mm";
      v36 = 1024;
      *(_DWORD *)v37 = 964;
      *(_WORD *)&v37[4] = 2080;
      *(_QWORD *)&v37[6] = "Connect";
      *(_WORD *)&v37[14] = 2080;
      *(_QWORD *)&v37[16] = "[_nodes containsObject: node1] && [_nodes containsObject: node2]";
      _os_log_impl(&dword_19B733000, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "[_nodes containsObject: node1] && [_nodes containsObject: node2]");
  }
  v19 = (AVAudioEngineGraph *)this[1];
  if ((v15 & 1) == 0)
  {
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v20 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316418;
      v31 = "AVAEInternal.h";
      v32 = 1024;
      v33 = 71;
      v34 = 2080;
      v35 = "AVAudioEngineGraph.mm";
      v36 = 1024;
      *(_DWORD *)v37 = 2138;
      *(_WORD *)&v37[4] = 2080;
      *(_QWORD *)&v37[6] = "Connect";
      *(_WORD *)&v37[14] = 2080;
      *(_QWORD *)&v37[16] = "inSrcAVNode && inDestAVNode";
      _os_log_impl(&dword_19B733000, v20, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "inSrcAVNode && inDestAVNode");
  }
  v21 = -[AVAudioNode impl](a2, "impl");
  v22 = -[AVAudioNode impl](a3, "impl");
  v23 = v22;
  if (!v21 || !v22)
  {
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v24 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316418;
      v31 = "AVAEInternal.h";
      v32 = 1024;
      v33 = 71;
      v34 = 2080;
      v35 = "AVAudioEngineGraph.mm";
      v36 = 1024;
      *(_DWORD *)v37 = 2142;
      *(_WORD *)&v37[4] = 2080;
      *(_QWORD *)&v37[6] = "Connect";
      *(_WORD *)&v37[14] = 2080;
      *(_QWORD *)&v37[16] = "inSrcImpl && inDestImpl";
      _os_log_impl(&dword_19B733000, v24, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "inSrcImpl && inDestImpl");
  }
  v25 = (*(uint64_t (**)(AVAudioNodeImplBase *, uint64_t))(*(_QWORD *)v21 + 240))(v21, v28);
  v26 = (*(uint64_t (**)(AVAudioNodeImplBase *, uint64_t))(*(_QWORD *)v23 + 240))(v23, v29);
  return AVAudioEngineGraph::_Connect(v19, v21, v23, v25, v26, a6) == 0;
}

void AVAudioEngineImpl::Pause(AVAudioEngineImpl *this, NSError **a2)
{
  std::recursive_mutex *v4;
  char *v5;
  NSObject *v6;
  uint64_t v7;
  unsigned __int8 *v8;
  int v9;
  AVAudioNodeImplBase **v10;
  uint64_t v11;
  int v12;
  const char *v13;
  __int16 v14;
  int v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v4 = (std::recursive_mutex *)((char *)this + 112);
  v5 = (char *)this + 176;
  std::lock[abi:ne180100]<std::recursive_mutex,caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>((std::recursive_mutex *)((char *)this + 112), (uint64_t)this + 176);
  if (AVAudioEngineLogCategory(void)::once != -1)
    dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
  v6 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
  if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *(_QWORD *)this;
    v8 = (unsigned __int8 *)*((_QWORD *)this + 1);
    if (v8)
    {
      v9 = v8[208];
      v8 += 184;
      if (v9)
        v8 = (unsigned __int8 *)this + 64;
      LODWORD(v8) = *v8;
    }
    v12 = 136315906;
    v13 = "AVAudioEngine.mm";
    v14 = 1024;
    v15 = 1205;
    v16 = 2048;
    v17 = v7;
    v18 = 1024;
    v19 = (int)v8;
    _os_log_impl(&dword_19B733000, v6, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Engine@%p: pause, was running %d", (uint8_t *)&v12, 0x22u);
  }
  v10 = (AVAudioNodeImplBase **)*((_QWORD *)this + 1);
  if (v10)
  {
    v11 = AVAudioEngineGraph::Stop(v10, a2);
    _AVAE_CheckNoErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAudioEngine.mm", 1207, "Pause", "_graph->Stop(outErr)", v11, a2);
  }
  *((_BYTE *)this + 64) = 0;
  caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::unlock((uint64_t)v5);
  std::recursive_mutex::unlock(v4);
}

void sub_19B839750(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t AVAudioEngineImpl::GetOutputNode(AVAudioEngineImpl *this)
{
  void *v2;
  int v3;
  int v4;
  BOOL v5;
  NSObject *v6;
  uint8_t buf[4];
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  char *v13;
  __int16 v14;
  int v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  const char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v2 = (void *)*((_QWORD *)this + 5);
  if (v2)
  {
    v3 = *(unsigned __int8 *)(*((_QWORD *)this + 1) + 187);
    v4 = objc_msgSend(*((id *)this + 5), "isInManualRenderingMode");
    if (v4)
      v5 = v3 == 0;
    else
      v5 = 1;
    if (v5)
    {
      if (v4 == (v3 != 0))
        return *((_QWORD *)this + 5);
    }
    else if (objc_msgSend(v2, "manualRenderingMode") == *(_QWORD *)(*((_QWORD *)this + 1) + 192))
    {
      return *((_QWORD *)this + 5);
    }
  }
  AVAudioEngineImpl::UpdateOutputNode((uint64_t)this, 1);
  if (!*((_QWORD *)this + 5))
  {
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v6 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316418;
      v9 = "AVAEInternal.h";
      v10 = 1024;
      v11 = 71;
      v12 = 2080;
      v13 = "AVAudioEngine.mm";
      v14 = 1024;
      v15 = 654;
      v16 = 2080;
      v17 = "GetOutputNode";
      v18 = 2080;
      v19 = "_outputNode != nil";
      _os_log_impl(&dword_19B733000, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "_outputNode != nil");
  }
  return *((_QWORD *)this + 5);
}

AVAudioFormat *AVAudioEngineImpl::GetManualRenderingFormat(AVAudioEngineImpl *this)
{
  if (*(_BYTE *)(*((_QWORD *)this + 1) + 187))
    return (AVAudioFormat *)objc_msgSend((id)AVAudioEngineImpl::GetOutputNode(this), "outputFormatForBus:", 0);
  else
    return +[AVAudioFormat formatWithInvalidSampleRateAndChannelCount](AVAudioFormat, "formatWithInvalidSampleRateAndChannelCount");
}

uint64_t AVAudioEngineImpl::Initialize(AVAudioEngineImpl *this, NSError **a2)
{
  NSObject *v4;
  uint64_t v5;
  AVAudioEngineGraph *v6;
  uint64_t v7;
  int v9;
  const char *v10;
  __int16 v11;
  int v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (AVAudioEngineLogCategory(void)::once != -1)
    dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
  v4 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
  if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_DEBUG))
  {
    v5 = *(_QWORD *)this;
    v9 = 136315650;
    v10 = "AVAudioEngine.mm";
    v11 = 1024;
    v12 = 1140;
    v13 = 2048;
    v14 = v5;
    _os_log_impl(&dword_19B733000, v4, OS_LOG_TYPE_DEBUG, "%25s:%-5d Engine@%p: initialize", (uint8_t *)&v9, 0x1Cu);
  }
  v6 = (AVAudioEngineGraph *)*((_QWORD *)this + 1);
  if (!*((_BYTE *)v6 + 187))
  {
    v7 = *((_QWORD *)this + 7);
    if (v7)
    {
      (*(void (**)(_QWORD))(*(_QWORD *)v7 + 56))(*((_QWORD *)this + 7));
      v6 = (AVAudioEngineGraph *)*((_QWORD *)this + 1);
    }
  }
  return AVAudioEngineGraph::Initialize(v6, a2);
}

uint64_t *std::unique_ptr<AVAudioEngineGraph>::reset[abi:ne180100](uint64_t *result)
{
  uint64_t v1;
  std::recursive_mutex *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;
  id *v14;
  id *v15;
  id v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  NSError *v21;

  v1 = *result;
  *result = 0;
  if (v1)
  {
    v2 = (std::recursive_mutex *)(*(_QWORD *)v1 + 112);
    std::recursive_mutex::lock(v2);
    v21 = 0;
    AVAudioEngineGraph::Stop((AVAudioNodeImplBase **)v1, &v21);
    std::unique_ptr<AVAEGraphStateTracker>::reset[abi:ne180100]((uint64_t *)(v1 + 216), 0);
    v3 = *(_QWORD **)(v1 + 80);
    if (v3)
    {
      if (v3[1] && v3[2])
      {
        MusicSequenceSetAudioGraph();
        v3[1] = 0;
      }
      v4 = v3[2];
      if (v4)
        MEMORY[0x1A1AC5BD4](v4, 0x80C40C96DFCA5);
      v3[2] = 0;
      v5 = v3[3];
      if (v5)
        MEMORY[0x1A1AC5BD4](v5, 0x80C40803F642BLL);
      v3[3] = 0;
      MEMORY[0x1A1AC5BD4](v3, 0x20C40769AC3DALL);
    }
    *(_QWORD *)(v1 + 80) = 0;
    v6 = *(_QWORD **)(v1 + 8);
    if (v6)
    {
      v9 = (_QWORD *)*v6;
      v7 = v6 + 1;
      v8 = v9;
      if (v9 != v7)
      {
        do
        {
          v10 = v8[5];
          if (v10)
            (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
          v11 = (_QWORD *)v8[1];
          if (v11)
          {
            do
            {
              v12 = v11;
              v11 = (_QWORD *)*v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              v12 = (_QWORD *)v8[2];
              v13 = *v12 == (_QWORD)v8;
              v8 = v12;
            }
            while (!v13);
          }
          v8 = v12;
        }
        while (v12 != v7);
      }
    }
    v14 = *(id **)(v1 + 32);
    v15 = *(id **)(v1 + 40);
    while (v14 != v15)
      v16 = *v14++;
    v17 = *(_QWORD *)(v1 + 8);
    if (v17)
    {
      std::__tree<std::__value_type<AUGraphNodeBaseV3 *,std::pair<AUGraphNodeBaseV3 *,unsigned int>>,std::__map_value_compare<AUGraphNodeBaseV3 *,std::__value_type<AUGraphNodeBaseV3 *,std::pair<AUGraphNodeBaseV3 *,unsigned int>>,std::less<AUGraphNodeBaseV3 *>,true>,std::allocator<std::__value_type<AUGraphNodeBaseV3 *,std::pair<AUGraphNodeBaseV3 *,unsigned int>>>>::destroy(*(_QWORD **)(v17 + 8));
      MEMORY[0x1A1AC5BD4](v17, 0x1020C4062D53EE8);
    }
    std::recursive_mutex::unlock(v2);
    std::unique_ptr<AVAEGraphStateTracker>::reset[abi:ne180100]((uint64_t *)(v1 + 216), 0);
    std::__list_imp<AUGraphConnection>::clear((_QWORD *)(v1 + 160));
    std::__list_imp<AUGraphConnection>::clear((_QWORD *)(v1 + 136));
    v18 = *(void **)(v1 + 88);
    if (v18)
    {
      *(_QWORD *)(v1 + 96) = v18;
      operator delete(v18);
    }
    v19 = *(void **)(v1 + 56);
    if (v19)
    {
      *(_QWORD *)(v1 + 64) = v19;
      operator delete(v19);
    }
    v20 = *(void **)(v1 + 32);
    if (v20)
    {
      *(_QWORD *)(v1 + 40) = v20;
      operator delete(v20);
    }
    JUMPOUT(0x1A1AC5BD4);
  }
  return result;
}

void ___ZN17AVAudioEngineImplC2EP13AVAudioEngine_block_invoke()
{
  uint64_t v0;
  NSObject *HighPriorityWorkloop;
  NSObject *v2;
  dispatch_object_t object;

  v0 = operator new();
  HighPriorityWorkloop = AVAE_GetHighPriorityWorkloop();
  v2 = HighPriorityWorkloop;
  if (HighPriorityWorkloop)
    dispatch_retain(HighPriorityWorkloop);
  object = v2;
  CADeprecated::RealtimeMessenger::RealtimeMessenger(v0, &object);
  AVAudioEngineImpl::sMessenger = v0;
  if (object)
    dispatch_release(object);
}

void sub_19B839D34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object)
{
  uint64_t v10;

  if (object)
    dispatch_release(object);
  MEMORY[0x1A1AC5BD4](v10, 0x10A0C404FA34CF3);
  _Unwind_Resume(a1);
}

uint64_t AVAudioEngineImpl::SetInputNodeRenderCallback(AVAudioNodeImplBase **a1, uint64_t a2, uint64_t a3)
{
  std::recursive_mutex *v6;
  uint64_t v7;
  uint64_t NodeFromMap;

  v6 = (std::recursive_mutex *)((char *)*a1 + 112);
  std::recursive_mutex::lock(v6);
  if (*((_BYTE *)a1 + 187)
    && !*((_BYTE *)a1 + 185)
    && (NodeFromMap = AVAudioEngineGraph::GetNodeFromMap((AVAudioEngineGraph *)a1, a1[2])) != 0)
  {
    v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)NodeFromMap + 160))(NodeFromMap, a2, a3);
  }
  else
  {
    v7 = 0;
  }
  std::recursive_mutex::unlock(v6);
  return v7;
}

void sub_19B839DF4(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void ___ZN17AVAudioEngineImpl26IOUnitConfigurationChangedEv_block_invoke(uint64_t a1)
{
  _QWORD *v1;
  int v2;
  id v3;
  NSObject *v4;
  id v5;
  NSObject *v6;
  id v7;
  NSObject *global_queue;
  _QWORD block[5];
  _BYTE buf[32];
  void (*v11)(uint64_t);
  id v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD **)(a1 + 32);
  v2 = *((_DWORD *)v1 + 20) - 1;
  *((_DWORD *)v1 + 20) = v2;
  if (!v2)
  {
    v3 = (id)*v1;
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v4 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_DEFAULT))
    {
      v5 = (id)*v1;
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "AVAudioEngine.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1423;
      *(_WORD *)&buf[18] = 2048;
      *(_QWORD *)&buf[20] = v5;
      _os_log_impl(&dword_19B733000, v4, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Engine@%p: iounit configuration changed > posting notification", buf, 0x1Cu);
    }
    objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter"), "postNotificationName:object:", CFSTR("AVAudioEngineConfigurationChangeNotification"), *v1);
    atomic_store(0, (unsigned __int8 *)v1 + 96);
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v6 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_DEBUG))
    {
      v7 = (id)*v1;
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "AVAudioEngine.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1428;
      *(_WORD *)&buf[18] = 2048;
      *(_QWORD *)&buf[20] = v7;
      _os_log_impl(&dword_19B733000, v6, OS_LOG_TYPE_DEBUG, "%25s:%-5d Engine@%p: iounit configuration changed < posted notification", buf, 0x1Cu);
    }
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x3052000000;
    *(_QWORD *)&buf[24] = __Block_byref_object_copy__7687;
    v11 = __Block_byref_object_dispose__7688;
    v12 = (id)*v1;
    global_queue = dispatch_get_global_queue(0, 0);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = ___ZN17AVAudioEngineImpl26IOUnitConfigurationChangedEv_block_invoke_168;
    block[3] = &unk_1E3BECFE0;
    block[4] = buf;
    dispatch_async(global_queue, block);
    _Block_object_dispose(buf, 8);
  }
}

void ___ZN17AVAudioEngineImpl26IOUnitConfigurationChangedEv_block_invoke_2(uint64_t a1)
{
  uint64_t *v1;
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  _BYTE *v6;
  NSObject *v7;
  uint64_t v8;
  dispatch_time_t v9;
  int v10;
  const char *v11;
  __int16 v12;
  int v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = *(uint64_t **)(a1 + 32);
  if (AVAudioEngineLogCategory(void)::once != -1)
    dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
  v2 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
  if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_DEBUG))
  {
    v3 = *v1;
    v10 = 136315650;
    v11 = "AVAudioEngine.mm";
    v12 = 1024;
    v13 = 1442;
    v14 = 2048;
    v15 = v3;
    _os_log_impl(&dword_19B733000, v2, OS_LOG_TYPE_DEBUG, "%25s:%-5d Engine@%p: iounit configuration changed > setting flag", (uint8_t *)&v10, 0x1Cu);
  }
  atomic_store(1u, (unsigned __int8 *)v1 + 96);
  std::recursive_mutex::lock((std::recursive_mutex *)(v1 + 14));
  v4 = v1[1];
  if (v4)
  {
    v5 = *(unsigned __int8 *)(v4 + 208);
    v6 = (_BYTE *)(v4 + 184);
    if (v5)
      v6 = v1 + 8;
    if (*v6)
    {
      if (AVAudioEngineLogCategory(void)::once != -1)
        dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
      v7 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
      if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_DEFAULT))
      {
        v8 = *v1;
        v10 = 136315650;
        v11 = "AVAudioEngine.mm";
        v12 = 1024;
        v13 = 1447;
        v14 = 2048;
        v15 = v8;
        _os_log_impl(&dword_19B733000, v7, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Engine@%p: iounit configuration changed > stopping the engine", (uint8_t *)&v10, 0x1Cu);
      }
      AVAudioEngineImpl::Stop((AVAudioEngineImpl *)v1, 0);
    }
  }
  std::recursive_mutex::unlock((std::recursive_mutex *)(v1 + 14));
  ++*((_DWORD *)v1 + 20);
  v9 = dispatch_time(0, 100000000);
  dispatch_after(v9, (dispatch_queue_t)v1[9], (dispatch_block_t)v1[11]);
}

void sub_19B83A258(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void __Block_byref_object_copy__7687(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_dispose__7688(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void ___ZN17AVAudioEngineImpl26IOUnitConfigurationChangedEv_block_invoke_168(uint64_t a1)
{

}

void ___ZN17AVAudioEngineImpl13IOUnitStoppedEv_block_invoke(uint64_t a1)
{
  uint64_t *v1;
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  int v4;
  BOOL v5;
  NSObject *v6;
  uint64_t v7;
  int v8;
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = *(uint64_t **)(a1 + 32);
  std::recursive_mutex::lock((std::recursive_mutex *)(v1 + 14));
  v2 = (unsigned __int8 *)v1[1];
  if (v2)
  {
    if (v2[208])
      v3 = (unsigned __int8 *)(v1 + 8);
    else
      v3 = v2 + 184;
    v4 = *v3;
    if (v2[232])
      v5 = 1;
    else
      v5 = v4 == 0;
    if (!v5)
    {
      if (AVAudioEngineLogCategory(void)::once != -1)
        dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
      v6 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
      if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_DEFAULT))
      {
        v7 = *v1;
        v8 = 136315650;
        v9 = "AVAudioEngine.mm";
        v10 = 1024;
        v11 = 1470;
        v12 = 2048;
        v13 = v7;
        _os_log_impl(&dword_19B733000, v6, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Engine@%p: iounit stopped unexpectedly > pausing the engine", (uint8_t *)&v8, 0x1Cu);
      }
      AVAudioEngineImpl::Pause((AVAudioEngineImpl *)v1, 0);
      v2 = (unsigned __int8 *)v1[1];
    }
    v2[232] = 0;
  }
  std::recursive_mutex::unlock((std::recursive_mutex *)(v1 + 14));
}

void sub_19B83A3F0(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t AVAudioEngineImpl::IsIOUnitRunning(AVAudioEngineImpl *this)
{
  unsigned __int8 *v1;
  int v2;
  unsigned __int8 *v3;
  uint64_t result;

  v1 = (unsigned __int8 *)*((_QWORD *)this + 1);
  if (v1[187])
  {
    v2 = v1[208];
    v3 = v1 + 184;
    if (v2)
      v3 = (unsigned __int8 *)this + 64;
    return *v3 != 0;
  }
  else
  {
    result = *((_QWORD *)this + 7);
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result);
  }
  return result;
}

_QWORD *AVAudioEngineImpl::LastRenderErrorInChain(AVAudioEngineImpl *this, AVAudioNodeImplBase *a2, AVAudioNodeImplBase *a3)
{
  AVAudioEngineGraph *v5;
  AVAudioNodeImplBase *v6;
  NSObject *v7;
  uint64_t NodeFromMap;
  _QWORD *v9;
  uint64_t v10;
  NSObject *v11;
  _BOOL8 v12;
  _QWORD *result;
  uint64_t v14;
  _BYTE buf[18];
  __int16 v16;
  _BYTE v17[14];
  __int16 v18;
  const char *v19;
  __int16 v20;
  const char *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    *(_BYTE *)this = 0;
    *((_BYTE *)this + 16) = 0;
    v5 = (AVAudioEngineGraph *)a2;
    v6 = a3;
  }
  else
  {
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v7 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316418;
      *(_QWORD *)&buf[4] = "AVAEInternal.h";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 71;
      v16 = 2080;
      *(_QWORD *)v17 = "AVAudioEngineGraph.mm";
      *(_WORD *)&v17[8] = 1024;
      *(_DWORD *)&v17[10] = 4278;
      v18 = 2080;
      v19 = "LastRenderErrorInChain";
      v20 = 2080;
      v21 = "startNodeImpl";
      _os_log_impl(&dword_19B733000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "startNodeImpl");
    *(_BYTE *)this = 0;
    *((_BYTE *)this + 16) = 0;
    v5 = (AVAudioEngineGraph *)a2;
    v6 = 0;
  }
  NodeFromMap = AVAudioEngineGraph::GetNodeFromMap(v5, v6);
  v9 = (_QWORD *)NodeFromMap;
  if (NodeFromMap)
  {
    v10 = NodeFromMap + 32;
  }
  else
  {
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v11 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316418;
      *(_QWORD *)&buf[4] = "AVAEInternal.h";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 71;
      v16 = 2080;
      *(_QWORD *)v17 = "AVAudioEngineGraph.mm";
      *(_WORD *)&v17[8] = 1024;
      *(_DWORD *)&v17[10] = 4283;
      v18 = 2080;
      v19 = "LastRenderErrorInChain";
      v20 = 2080;
      v21 = "startNode";
      _os_log_impl(&dword_19B733000, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "startNode");
    v10 = 32;
  }
  v12 = ((*(_DWORD *)v10 >> 1) & 1) == 0;
  *(_QWORD *)buf = &off_1E3BE5C98;
  *(_QWORD *)&buf[8] = this;
  *(_QWORD *)&v17[4] = buf;
  AUGraphParser::TraverseGraphNodes(v12, 1, v9, 0, (uint64_t)buf);
  result = *(_QWORD **)&v17[4];
  if (*(_BYTE **)&v17[4] == buf)
  {
    v14 = 4;
    result = buf;
  }
  else
  {
    if (!*(_QWORD *)&v17[4])
      return result;
    v14 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v14))();
}

void sub_19B83A728(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  _Unwind_Resume(exception_object);
}

void AVAudioEngineImpl::InstallTapOnNode(char **a1, void *a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6)
{
  NSObject *v12;
  char *v13;
  AVAudioEngineGraph *v14;
  NSObject *v15;
  AVAudioNodeImplBase *v16;
  std::recursive_mutex *v17;
  NSObject *v18;
  AVAudioEngineGraph *NodeFromMap;
  _QWORD *v20;
  char v21;
  char v22;
  void *v23;
  double v24;
  double v25;
  double v26;
  NSObject *v27;
  _QWORD *v28;
  _QWORD *v29;
  int v30;
  AUGraphNodeBaseV3 *v33;
  uint64_t active;
  void *v35;
  unsigned __int8 v36;
  NSObject *v37;
  uint64_t v38;
  NSObject *v39;
  uint64_t v40;
  NSObject *v41;
  _QWORD v42[2];
  uint64_t v43;
  uint8_t buf[4];
  const char *v45;
  __int16 v46;
  int v47;
  __int16 v48;
  char *v49;
  __int16 v50;
  _BYTE v51[24];
  __int16 v52;
  uint64_t v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  if (AVAudioEngineLogCategory(void)::once != -1)
    dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
  v12 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
  if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_DEBUG))
  {
    v13 = *a1;
    *(_DWORD *)buf = 136316674;
    v45 = "AVAudioEngine.mm";
    v46 = 1024;
    v47 = 1522;
    v48 = 2048;
    v49 = v13;
    v50 = 2048;
    *(_QWORD *)v51 = a2;
    *(_WORD *)&v51[8] = 2048;
    *(_QWORD *)&v51[10] = a3;
    *(_WORD *)&v51[18] = 1024;
    *(_DWORD *)&v51[20] = a4;
    v52 = 2080;
    v53 = objc_msgSend((id)objc_msgSend(a5, "description"), "UTF8String");
    _os_log_impl(&dword_19B733000, v12, OS_LOG_TYPE_DEBUG, "%25s:%-5d Engine@%p: install tap on node %p, bus%lu, bufferSize %d, format: %s", buf, 0x40u);
  }
  v14 = (AVAudioEngineGraph *)a1[1];
  if (!a2)
  {
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v15 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316418;
      v45 = "AVAEInternal.h";
      v46 = 1024;
      v47 = 71;
      v48 = 2080;
      v49 = "AVAudioEngineGraph.mm";
      v50 = 1024;
      *(_DWORD *)v51 = 2012;
      *(_WORD *)&v51[4] = 2080;
      *(_QWORD *)&v51[6] = "InstallTapOnNode";
      *(_WORD *)&v51[14] = 2080;
      *(_QWORD *)&v51[16] = "inAVNode";
      _os_log_impl(&dword_19B733000, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "inAVNode");
  }
  v16 = (AVAudioNodeImplBase *)objc_msgSend(a2, "impl");
  v17 = (std::recursive_mutex *)(*(_QWORD *)v14 + 112);
  std::recursive_mutex::lock(v17);
  if (!AVAudioEngineGraph::IsNodeInGraph(v14, v16))
  {
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v18 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316418;
      v45 = "AVAEInternal.h";
      v46 = 1024;
      v47 = 71;
      v48 = 2080;
      v49 = "AVAudioEngineGraph.mm";
      v50 = 1024;
      *(_DWORD *)v51 = 2017;
      *(_WORD *)&v51[4] = 2080;
      *(_QWORD *)&v51[6] = "InstallTapOnNode";
      *(_WORD *)&v51[14] = 2080;
      *(_QWORD *)&v51[16] = "IsNodeInGraph(inImpl)";
      _os_log_impl(&dword_19B733000, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "IsNodeInGraph(inImpl)");
  }
  NodeFromMap = (AVAudioEngineGraph *)AVAudioEngineGraph::GetNodeFromMap(v14, *((AVAudioNodeImplBase **)v14 + 2));
  v20 = (_QWORD *)AVAudioEngineGraph::GetNodeFromMap(v14, v16);
  if (*((_BYTE *)v14 + 185) && NodeFromMap)
  {
    v21 = (*(uint64_t (**)(AVAudioEngineGraph *))(*(_QWORD *)NodeFromMap + 136))(NodeFromMap);
    v22 = a5 ? v21 : 1;
    if ((v22 & 1) == 0 && (v20[4] & 1) != 0)
    {
      v23 = (void *)(*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)NodeFromMap + 3) + 72))(*((_QWORD *)NodeFromMap + 3), 0);
      objc_msgSend(a5, "sampleRate");
      v25 = v24;
      objc_msgSend(v23, "sampleRate");
      if (v25 != v26)
      {
        if (AVAudioEngineLogCategory(void)::once != -1)
          dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
        v27 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
        if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136316418;
          v45 = "AVAEInternal.h";
          v46 = 1024;
          v47 = 71;
          v48 = 2080;
          v49 = "AVAudioEngineGraph.mm";
          v50 = 1024;
          *(_DWORD *)v51 = 2031;
          *(_WORD *)&v51[4] = 2080;
          *(_QWORD *)&v51[6] = "InstallTapOnNode";
          *(_WORD *)&v51[14] = 2080;
          *(_QWORD *)&v51[16] = "format.sampleRate == inputHWFormat.sampleRate";
          _os_log_impl(&dword_19B733000, v27, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
        }
        objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "format.sampleRate == inputHWFormat.sampleRate");
      }
    }
  }
  (*(void (**)(_QWORD *, uint64_t, uint64_t, void *, uint64_t))(*v20 + 80))(v20, a3, a4, a5, a6);
  if (!*((_BYTE *)v14 + 185)
    || !NodeFromMap
    || (v20[4] & 2) != 0
    || AUGraphParser::IsNodeConnectedToTarget(0, v20, (_QWORD *)v14 + 11))
  {
    std::recursive_mutex::unlock(v17);
    return;
  }
  v42[0] = v42;
  v42[1] = v42;
  v43 = 0;
  AVAudioEngineGraph::GetPendingConnection((uint64_t)v14, 1, (uint64_t)v20, v42);
  if (*(_BYTE *)(v20[3] + 48))
    goto LABEL_48;
  v28 = (_QWORD *)v20[6];
  v29 = (_QWORD *)v20[7];
  if (v28 == v29)
  {
    v30 = 0;
  }
  else
  {
    v30 = 0;
    do
    {
      if (*v28++)
        ++v30;
    }
    while (v28 != v29);
  }
  if (v30 || v43 != 0)
  {
LABEL_48:
    AVAudioEngineGraph::SetNodesToPullEnabled((uint64_t)v14, 0);
    active = AUGraphParser::InitializeActiveNodesInInputChain((AVAudioNodeImplBase **)v14, NodeFromMap, v33);
    if (!(_DWORD)active)
      goto LABEL_60;
    (*(void (**)(_QWORD *, uint64_t))(*v20 + 88))(v20, a3);
    v35 = (void *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Failed to initialize active nodes in input chain! Engine@%p, err = %d"), **(_QWORD **)v14, active);
    v36 = atomic_load((unsigned __int8 *)(*(_QWORD *)v14 + 96));
    if ((v36 & 1) == 0)
    {
      if (AVAudioEngineLogCategory(void)::once != -1)
        dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
      v37 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
      if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
      {
        v38 = objc_msgSend(v35, "UTF8String");
        *(_DWORD *)buf = 136315650;
        v45 = "AVAudioEngineGraph.mm";
        v46 = 1024;
        v47 = 2078;
        v48 = 2080;
        v49 = (char *)v38;
        _os_log_impl(&dword_19B733000, v37, OS_LOG_TYPE_ERROR, "%25s:%-5d %s", buf, 0x1Cu);
      }
      objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("%s"), objc_msgSend(v35, "UTF8String"));
      goto LABEL_60;
    }
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v39 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      v40 = objc_msgSend(v35, "UTF8String");
      *(_DWORD *)buf = 136315650;
      v45 = "AVAudioEngineGraph.mm";
      v46 = 1024;
      v47 = 2075;
      v48 = 2080;
      v49 = (char *)v40;
      _os_log_impl(&dword_19B733000, v39, OS_LOG_TYPE_ERROR, "%25s:%-5d %s, config change pending", buf, 0x1Cu);
    }
  }
  active = 0;
LABEL_60:
  std::__list_imp<AUGraphConnection>::clear(v42);
  std::recursive_mutex::unlock(v17);
  if ((_DWORD)active)
  {
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v41 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316674;
      v45 = "AVAEInternal.h";
      v46 = 1024;
      v47 = 104;
      v48 = 2080;
      v49 = "AVAudioEngine.mm";
      v50 = 1024;
      *(_DWORD *)v51 = 1523;
      *(_WORD *)&v51[4] = 2080;
      *(_QWORD *)&v51[6] = "InstallTapOnNode";
      *(_WORD *)&v51[14] = 2080;
      *(_QWORD *)&v51[16] = "_graph->InstallTapOnNode(inNode, bus, bufferSize, format, tapBlock)";
      v52 = 1024;
      LODWORD(v53) = active;
      _os_log_impl(&dword_19B733000, v41, OS_LOG_TYPE_ERROR, "%25s:%-5d [%s:%d:%s: (%s): error %d", buf, 0x3Cu);
    }
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("error %d"), active);
  }
}

void sub_19B83AFE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  std::recursive_mutex *v4;
  va_list va;

  va_start(va, a4);
  std::__list_imp<AUGraphConnection>::clear((uint64_t *)va);
  std::recursive_mutex::unlock(v4);
  _Unwind_Resume(a1);
}

void AVAudioEngineImpl::RemoveTapOnNode(AVAudioEngineImpl *this, AVAudioNode *a2, uint64_t a3)
{
  NSObject *v6;
  char *v7;
  uint64_t v8;
  NSObject *v9;
  AVAudioNodeImplBase *v10;
  std::recursive_mutex *v11;
  NSObject *v12;
  AVAudioEngineGraph *NodeFromMap;
  _BYTE *v14;
  _BYTE *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;
  AUGraphNodeBaseV3 *v20;
  uint64_t active;
  NSObject *v22;
  NSObject *v23;
  uint8_t buf[4];
  const char *v25;
  __int16 v26;
  int v27;
  __int16 v28;
  char *v29;
  __int16 v30;
  _BYTE v31[24];
  __int16 v32;
  int v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if (AVAudioEngineLogCategory(void)::once != -1)
    dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
  v6 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
  if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_DEBUG))
  {
    v7 = *(char **)this;
    *(_DWORD *)buf = 136316162;
    v25 = "AVAudioEngine.mm";
    v26 = 1024;
    v27 = 1527;
    v28 = 2048;
    v29 = v7;
    v30 = 2048;
    *(_QWORD *)v31 = a2;
    *(_WORD *)&v31[8] = 2048;
    *(_QWORD *)&v31[10] = a3;
    _os_log_impl(&dword_19B733000, v6, OS_LOG_TYPE_DEBUG, "%25s:%-5d Engine@%p: remove tap from node %p, bus%lu", buf, 0x30u);
  }
  v8 = *((_QWORD *)this + 1);
  if (!a2)
  {
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v9 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316418;
      v25 = "AVAEInternal.h";
      v26 = 1024;
      v27 = 71;
      v28 = 2080;
      v29 = "AVAudioEngineGraph.mm";
      v30 = 1024;
      *(_DWORD *)v31 = 2091;
      *(_WORD *)&v31[4] = 2080;
      *(_QWORD *)&v31[6] = "RemoveTapOnNode";
      *(_WORD *)&v31[14] = 2080;
      *(_QWORD *)&v31[16] = "inAVNode";
      _os_log_impl(&dword_19B733000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "inAVNode");
  }
  v10 = -[AVAudioNode impl](a2, "impl");
  v11 = (std::recursive_mutex *)(*(_QWORD *)v8 + 112);
  std::recursive_mutex::lock(v11);
  if (!AVAudioEngineGraph::IsNodeInGraph((AVAudioEngineGraph *)v8, v10))
  {
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v12 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316418;
      v25 = "AVAEInternal.h";
      v26 = 1024;
      v27 = 71;
      v28 = 2080;
      v29 = "AVAudioEngineGraph.mm";
      v30 = 1024;
      *(_DWORD *)v31 = 2096;
      *(_WORD *)&v31[4] = 2080;
      *(_QWORD *)&v31[6] = "RemoveTapOnNode";
      *(_WORD *)&v31[14] = 2080;
      *(_QWORD *)&v31[16] = "IsNodeInGraph(inImpl)";
      _os_log_impl(&dword_19B733000, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "IsNodeInGraph(inImpl)");
  }
  NodeFromMap = (AVAudioEngineGraph *)AVAudioEngineGraph::GetNodeFromMap((AVAudioEngineGraph *)v8, *(AVAudioNodeImplBase **)(v8 + 16));
  v14 = (_BYTE *)AVAudioEngineGraph::GetNodeFromMap((AVAudioEngineGraph *)v8, v10);
  v15 = v14;
  v17 = *(_QWORD **)(v8 + 88);
  v16 = *(_QWORD **)(v8 + 96);
  if (v17 == v16)
  {
LABEL_21:
    v18 = *(_QWORD **)(v8 + 96);
  }
  else
  {
    v18 = *(_QWORD **)(v8 + 88);
    while ((_BYTE *)*v18 != v14)
    {
      if (++v18 == v16)
        goto LABEL_21;
    }
  }
  if (*(_BYTE *)(v8 + 185))
    v19 = NodeFromMap == 0;
  else
    v19 = 1;
  if (v19 || (v14[32] & 2) != 0 || v17 == v16 || v16 == v18)
  {
    (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)v14 + 88))(v14, a3);
    goto LABEL_40;
  }
  AVAudioEngineGraph::SetNodesToPullEnabled(v8, 0);
  (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)v15 + 88))(v15, a3);
  active = AUGraphParser::InitializeActiveNodesInInputChain((AVAudioNodeImplBase **)v8, NodeFromMap, v20);
  if (!(_DWORD)active)
  {
LABEL_40:
    std::recursive_mutex::unlock(v11);
    return;
  }
  if (AVAudioEngineLogCategory(void)::once != -1)
    dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
  v22 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
  if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136316674;
    v25 = "AVAEInternal.h";
    v26 = 1024;
    v27 = 104;
    v28 = 2080;
    v29 = "AVAudioEngineGraph.mm";
    v30 = 1024;
    *(_DWORD *)v31 = 2125;
    *(_WORD *)&v31[4] = 2080;
    *(_QWORD *)&v31[6] = "RemoveTapOnNode";
    *(_WORD *)&v31[14] = 2080;
    *(_QWORD *)&v31[16] = "err = AUGraphParser::InitializeActiveNodesInInputChain(ThisGraph, *inputNode)";
    v32 = 1024;
    v33 = active;
    _os_log_impl(&dword_19B733000, v22, OS_LOG_TYPE_ERROR, "%25s:%-5d [%s:%d:%s: (%s): error %d", buf, 0x3Cu);
  }
  objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("error %d"), active);
  std::recursive_mutex::unlock(v11);
  if (AVAudioEngineLogCategory(void)::once != -1)
    dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
  v23 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
  if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136316674;
    v25 = "AVAEInternal.h";
    v26 = 1024;
    v27 = 104;
    v28 = 2080;
    v29 = "AVAudioEngine.mm";
    v30 = 1024;
    *(_DWORD *)v31 = 1528;
    *(_WORD *)&v31[4] = 2080;
    *(_QWORD *)&v31[6] = "RemoveTapOnNode";
    *(_WORD *)&v31[14] = 2080;
    *(_QWORD *)&v31[16] = "_graph->RemoveTapOnNode(inNode, bus)";
    v32 = 1024;
    v33 = active;
    _os_log_impl(&dword_19B733000, v23, OS_LOG_TYPE_ERROR, "%25s:%-5d [%s:%d:%s: (%s): error %d", buf, 0x3Cu);
  }
  objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("error %d"), active);
}

void sub_19B83B630(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void AVAudioEngineImpl::NodeRenderingStateChanged(AVAudioEngineImpl *this, AVAudioNodeImplBase *a2)
{
  std::recursive_mutex *v4;
  NSObject *v5;
  uint64_t NodeFromMap;
  _QWORD *v7;
  _QWORD *v8;
  uint8_t buf[4];
  const char *v10;
  __int16 v11;
  int v12;
  __int16 v13;
  char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  const char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v4 = (std::recursive_mutex *)(*(_QWORD *)this + 112);
  std::recursive_mutex::lock(v4);
  if (!AVAudioEngineGraph::IsNodeInGraph(this, a2))
  {
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v5 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316418;
      v10 = "AVAEInternal.h";
      v11 = 1024;
      v12 = 71;
      v13 = 2080;
      v14 = "AVAudioEngineGraph.mm";
      v15 = 1024;
      v16 = 3222;
      v17 = 2080;
      v18 = "NodeRenderingStateChanged";
      v19 = 2080;
      v20 = "IsNodeInGraph(inImpl)";
      _os_log_impl(&dword_19B733000, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "IsNodeInGraph(inImpl)");
  }
  NodeFromMap = AVAudioEngineGraph::GetNodeFromMap(this, a2);
  v8 = (_QWORD *)*((_QWORD *)this + 7);
  v7 = (_QWORD *)*((_QWORD *)this + 8);
  if (v8 != v7)
  {
    while (*v8 != NodeFromMap)
    {
      if (++v8 == v7)
      {
        v8 = (_QWORD *)*((_QWORD *)this + 8);
        break;
      }
    }
  }
  if (v8 != v7)
    AVAudioEngineGraph::MonitorState(this);
  std::recursive_mutex::unlock(v4);
}

void sub_19B83B814(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void AVAudio3DMixingImpl::~AVAudio3DMixingImpl(id *this)
{
  AVAudio3DMixingImpl::~AVAudio3DMixingImpl(this);
  JUMPOUT(0x1A1AC5BD4);
}

{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t *v5;
  unint64_t v6;
  BOOL v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  BOOL v12;
  uint64_t *v13;

  *this = &off_1E3BE7C60;
  v2 = (_QWORD *)objc_msgSend(this[9], "impl");
  v3 = v2;
  v4 = (_QWORD *)v2[40];
  if (v4)
  {
    v5 = v2 + 40;
    do
    {
      v6 = v4[4];
      v7 = v6 >= (unint64_t)this;
      if (v6 >= (unint64_t)this)
        v8 = v4;
      else
        v8 = v4 + 1;
      if (v7)
        v5 = v4;
      v4 = (_QWORD *)*v8;
    }
    while (*v8);
    if (v5 != v2 + 40 && v5[4] <= (unint64_t)this)
    {
      (*(void (**)(_QWORD *, uint64_t, uint64_t, _QWORD, float))(*v2 + 128))(v2, 5, 1, *((unsigned int *)this + 16), 0.0);
      v9 = (uint64_t *)v5[1];
      if (v9)
      {
        do
        {
          v10 = v9;
          v9 = (uint64_t *)*v9;
        }
        while (v9);
      }
      else
      {
        v11 = v5;
        do
        {
          v10 = (uint64_t *)v11[2];
          v12 = *v10 == (_QWORD)v11;
          v11 = v10;
        }
        while (!v12);
      }
      if ((uint64_t *)v3[39] == v5)
        v3[39] = v10;
      v13 = (uint64_t *)v3[40];
      --v3[41];
      std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v13, v5);
      operator delete(v5);
    }
  }
  *((_DWORD *)this + 16) = 0;
  this[9] = 0;
}

BOOL AVAudio3DMixingImpl::IsConnectedToMixer(AVAudioNode **this, AVAudioNode *a2, int a3)
{
  return this[9] == a2 && *((_DWORD *)this + 16) == a3;
}

AVAudioConnectionPoint *AVAudio3DMixingImpl::GetMixerConnectionPoint(id *this)
{
  uint64_t v2;

  v2 = objc_msgSend(this[9], "impl");
  return +[AVAudioConnectionPoint connectionPointWithNode:bus:](AVAudioConnectionPoint, "connectionPointWithNode:bus:", this[9], (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 248))(v2, *((unsigned int *)this + 16)));
}

uint64_t AVAudio3DMixingImpl::SetGain(AVAudio3DMixingImpl *this, float a2)
{
  float v2;
  BOOL v3;
  float v4;
  void *v5;
  uint64_t v6;
  float v7;
  uint64_t v9;

  if (fabsf(a2) == INFINITY)
    a2 = 0.0;
  if (*((float *)this + 4) == a2)
    return 0;
  v2 = 100000.0;
  if (a2 < 100000.0)
    v2 = a2;
  v3 = a2 > 0.0;
  v4 = 0.0;
  if (v3)
    v4 = v2;
  *((float *)this + 4) = v4;
  v5 = (void *)*((_QWORD *)this + 9);
  v6 = *((unsigned int *)this + 16);
  if (v4 <= 0.0)
    v7 = -120.0;
  else
    v7 = log10f(v4) * 20.0;
  v9 = objc_msgSend(v5, "impl");
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, float))(*(_QWORD *)v9 + 128))(v9, 3, 1, v6, v7);
}

uint64_t AVAudio3DMixingImpl::SetRenderingAlgorithm(AVAudio3DMixingImpl *this, unsigned int a2)
{
  uint64_t result;
  uint64_t v4;
  unsigned int v5;

  result = 0;
  v5 = a2;
  if (a2 <= 7 && *((_DWORD *)this + 6) != a2)
  {
    *((_DWORD *)this + 6) = a2;
    v4 = objc_msgSend(*((id *)this + 9), "impl");
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, unsigned int *, uint64_t))(*(_QWORD *)v4 + 144))(v4, 3000, 1, *((unsigned int *)this + 16), &v5, 4);
  }
  return result;
}

uint64_t AVAudio3DMixingImpl::SetSourceMode(AVAudio3DMixingImpl *this, unsigned int a2)
{
  uint64_t result;
  unsigned int v4;
  uint64_t v5;
  int v6;
  unsigned int v7;

  result = 0;
  if (a2 <= 3 && *((_DWORD *)this + 7) != a2)
  {
    *((_DWORD *)this + 7) = a2;
    if (a2 - 1 >= 3)
      v4 = 0;
    else
      v4 = a2;
    v7 = v4;
    v5 = objc_msgSend(*((id *)this + 9), "impl");
    v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, unsigned int *, uint64_t))(*(_QWORD *)v5 + 144))(v5, 3005, 1, *((unsigned int *)this + 16), &v7, 4);
    return v6 & AVAudio3DMixingImpl::RecalculateAndSetSphericalCoordsOnMixer(this);
  }
  return result;
}

uint64_t AVAudio3DMixingImpl::SetPointSourceInHeadMode(AVAudio3DMixingImpl *this, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  _BOOL4 v7;
  uint64_t v8;
  uint64_t v9;

  if (a2 <= 1)
  {
    v8 = v2;
    v9 = v3;
    if (*((_DWORD *)this + 8) != a2)
    {
      *((_DWORD *)this + 8) = a2;
      v7 = a2 == 1;
      v5 = objc_msgSend(*((id *)this + 9), "impl");
      (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, _BOOL4 *, uint64_t))(*(_QWORD *)v5 + 144))(v5, 3103, 1, *((unsigned int *)this + 16), &v7, 4);
    }
  }
  return 0;
}

uint64_t AVAudio3DMixingImpl::SetRate(AVAudio3DMixingImpl *this, float a2)
{
  float v2;
  float v3;
  uint64_t v4;
  uint64_t v5;

  if (fabsf(a2) == INFINITY)
    a2 = 0.5;
  if (*((float *)this + 9) == a2)
    return 0;
  v2 = 2.0;
  if (a2 < 2.0)
    v2 = a2;
  if (a2 <= 0.5)
    v3 = 0.5;
  else
    v3 = v2;
  *((float *)this + 9) = v3;
  v4 = *((unsigned int *)this + 16);
  v5 = objc_msgSend(*((id *)this + 9), "impl");
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, float))(*(_QWORD *)v5 + 128))(v5, 4, 1, v4, v3);
}

uint64_t AVAudio3DMixingImpl::SetReverbBlend(AVAudio3DMixingImpl *this, float a2)
{
  float v2;
  BOOL v3;
  float v4;
  uint64_t v5;
  float v6;
  uint64_t v7;

  if (fabsf(a2) == INFINITY)
    a2 = 0.0;
  if (*((float *)this + 10) == a2)
    return 0;
  v2 = 1.0;
  if (a2 < 1.0)
    v2 = a2;
  v3 = a2 > 0.0;
  v4 = 0.0;
  if (v3)
    v4 = v2;
  *((float *)this + 10) = v4;
  v5 = *((unsigned int *)this + 16);
  v6 = v4 * 100.0;
  v7 = objc_msgSend(*((id *)this + 9), "impl");
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, float))(*(_QWORD *)v7 + 128))(v7, 8, 1, v5, v6);
}

uint64_t AVAudio3DMixingImpl::SetPosition(AVAudio3DMixingImpl *this, AVAudio3DPoint a2)
{
  if (*((float *)this + 11) == a2.x && *((float *)this + 12) == a2.y && *((float *)this + 13) == a2.z)
    return 0;
  *(AVAudio3DPoint *)((char *)this + 44) = a2;
  return AVAudio3DMixingImpl::RecalculateAndSetSphericalCoordsOnMixer(this);
}

uint64_t AVAudio3DMixingImpl::SetObstruction(AVAudio3DMixingImpl *this, float a2)
{
  float v2;
  float v3;
  uint64_t v4;
  uint64_t v5;

  if (fabsf(a2) == INFINITY)
    a2 = -100.0;
  if (*((float *)this + 14) == a2)
    return 0;
  v2 = 0.0;
  if (a2 < 0.0)
    v2 = a2;
  if (a2 <= -100.0)
    v3 = -100.0;
  else
    v3 = v2;
  *((float *)this + 14) = v3;
  v4 = *((unsigned int *)this + 16);
  v5 = objc_msgSend(*((id *)this + 9), "impl");
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, float))(*(_QWORD *)v5 + 128))(v5, 11, 1, v4, v3);
}

uint64_t AVAudio3DMixingImpl::SetOcclusion(AVAudio3DMixingImpl *this, float a2)
{
  float v2;
  float v3;
  uint64_t v4;
  uint64_t v5;

  if (fabsf(a2) == INFINITY)
    a2 = -100.0;
  if (*((float *)this + 15) == a2)
    return 0;
  v2 = 0.0;
  if (a2 < 0.0)
    v2 = a2;
  if (a2 <= -100.0)
    v3 = -100.0;
  else
    v3 = v2;
  *((float *)this + 15) = v3;
  v4 = *((unsigned int *)this + 16);
  v5 = objc_msgSend(*((id *)this + 9), "impl");
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, float))(*(_QWORD *)v5 + 128))(v5, 10, 1, v4, v3);
}

uint64_t AVAudio3DMixingImpl::RecalculateAndSetSphericalCoordsOnMixer(AVAudio3DMixingImpl *this)
{
  float v2;
  float v3;
  float v4;
  float *v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;

  v3 = *((float *)this + 11);
  v2 = *((float *)this + 12);
  v4 = *((float *)this + 13);
  if (*((_DWORD *)this + 7) != 3)
  {
    v5 = (float *)objc_msgSend(*((id *)this + 9), "impl");
    v3 = v3 - v5[66];
    v2 = v2 - v5[67];
    v4 = v4 - v5[68];
  }
  v6 = sqrtf((float)((float)(v2 * v2) + (float)(v3 * v3)) + (float)(v4 * v4));
  v7 = 0.0;
  v8 = 0.0;
  if (v6 > 0.0)
  {
    v7 = atan2f(v3, -v4) * 180.0 * 0.318309873;
    v9 = hypotf(v3, v4);
    v10 = atan2f(v2, v9) * 180.0 * 0.318309873;
    if (v10 <= 90.0)
      v8 = v10;
    else
      v8 = 180.0 - v10;
    if (v8 < -90.0)
      v8 = -180.0 - v8;
  }
  v11 = *((unsigned int *)this + 16);
  v12 = objc_msgSend(*((id *)this + 9), "impl");
  LODWORD(v11) = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t, float))(*(_QWORD *)v12 + 128))(v12, 0, 1, v11, v7);
  v13 = *((unsigned int *)this + 16);
  v14 = objc_msgSend(*((id *)this + 9), "impl");
  LODWORD(v11) = v11 & (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, float))(*(_QWORD *)v14 + 128))(v14, 1, 1, v13, v8);
  v15 = (void *)*((_QWORD *)this + 9);
  v16 = *((unsigned int *)this + 16);
  v17 = objc_msgSend(v15, "impl");
  return v11 & (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t, float))(*(_QWORD *)v17 + 128))(v17, 2, 1, v16, v6);
}

uint64_t AUInterfaceBaseV3::Initialize(AUInterfaceBaseV3 *this)
{
  BOOL v1;
  id v3;

  v3 = 0;
  if (objc_msgSend((id)(*(uint64_t (**)(AUInterfaceBaseV3 *))(*(_QWORD *)this + 304))(this), "allocateRenderResourcesAndReturnError:", &v3))v1 = v3 == 0;
  else
    v1 = 0;
  if (v1)
    return 0;
  if (objc_msgSend(v3, "code"))
    return objc_msgSend(v3, "code");
  return 4294967246;
}

uint64_t AUInterfaceBaseV3::Uninitialize(AUInterfaceBaseV3 *this)
{
  objc_msgSend((id)(*(uint64_t (**)(AUInterfaceBaseV3 *))(*(_QWORD *)this + 304))(this), "deallocateRenderResources");
  return 0;
}

uint64_t AUInterfaceBaseV3::GetFormat(AUInterfaceBaseV3 *this, int a2, unsigned int a3)
{
  void *v5;
  void *v6;

  v5 = (void *)(*(uint64_t (**)(AUInterfaceBaseV3 *))(*(_QWORD *)this + 304))(this);
  if (a2)
    v6 = (void *)objc_msgSend(v5, "inputBusses");
  else
    v6 = (void *)objc_msgSend(v5, "outputBusses");
  return objc_msgSend((id)objc_msgSend(v6, "objectAtIndexedSubscript:", a3), "format");
}

uint64_t AUInterfaceBaseV3::SetFormat(AUInterfaceBaseV3 *this, int a2, unsigned int a3, AVAudioFormat *a4)
{
  void *v7;
  void *v8;
  const char *v9;
  NSError *v10;
  BOOL v12[8];

  v7 = (void *)(*(uint64_t (**)(AUInterfaceBaseV3 *))(*(_QWORD *)this + 304))(this);
  if (a2)
    v8 = (void *)objc_msgSend(v7, "inputBusses");
  else
    v8 = (void *)objc_msgSend(v7, "outputBusses");
  *(_QWORD *)v12 = 0;
  v9 = (const char *)objc_msgSend((id)objc_msgSend(v8, "objectAtIndexedSubscript:", a3), "setFormat:error:", a4, v12);
  _AVAE_CheckSuccessAndNoNSError(539, (uint64_t)"SetFormat", "[[busArray objectAtIndexedSubscript:(NSUInteger)element] setFormat:format error:&nsErr]", v9, *(void **)v12, v10);
  return 1;
}

uint64_t AUInterfaceBaseV3::Reset(AUInterfaceBaseV3 *this)
{
  return objc_msgSend((id)(*(uint64_t (**)(AUInterfaceBaseV3 *))(*(_QWORD *)this + 304))(this), "reset");
}

uint64_t AUInterfaceBaseV3::EnableBus(AUInterfaceBaseV3 *this, int a2, unsigned int a3, uint64_t a4)
{
  void *v7;
  void *v8;
  void *v9;
  uint64_t result;

  v7 = (void *)(*(uint64_t (**)(AUInterfaceBaseV3 *))(*(_QWORD *)this + 304))(this);
  if (a2)
    v8 = (void *)objc_msgSend(v7, "inputBusses");
  else
    v8 = (void *)objc_msgSend(v7, "outputBusses");
  v9 = v8;
  result = objc_msgSend(v8, "count");
  if (result > a3)
    return objc_msgSend((id)objc_msgSend(v9, "objectAtIndexedSubscript:", a3), "setEnabled:", a4);
  return result;
}

uint64_t AUInterfaceBaseV3::IsBusEnabled(AUInterfaceBaseV3 *this, int a2, unsigned int a3)
{
  void *v5;
  void *v6;
  void *v7;

  v5 = (void *)(*(uint64_t (**)(AUInterfaceBaseV3 *))(*(_QWORD *)this + 304))(this);
  if (a2)
    v6 = (void *)objc_msgSend(v5, "inputBusses");
  else
    v6 = (void *)objc_msgSend(v5, "outputBusses");
  v7 = v6;
  if (objc_msgSend(v6, "count") <= a3)
    return 0;
  else
    return objc_msgSend((id)objc_msgSend(v7, "objectAtIndexedSubscript:", a3), "isEnabled");
}

uint64_t AUInterfaceBaseV3::NumberInputs(AUInterfaceBaseV3 *this)
{
  return objc_msgSend((id)objc_msgSend((id)(*(uint64_t (**)(AUInterfaceBaseV3 *))(*(_QWORD *)this + 304))(this), "inputBusses"), "count");
}

uint64_t AUInterfaceBaseV3::NumberOutputs(AUInterfaceBaseV3 *this)
{
  return objc_msgSend((id)objc_msgSend((id)(*(uint64_t (**)(AUInterfaceBaseV3 *))(*(_QWORD *)this + 304))(this), "outputBusses"), "count");
}

uint64_t AUInterfaceBaseV3::SetNumberInputs(AUInterfaceBaseV3 *this, unsigned int a2)
{
  const char *v2;
  NSError *v3;
  BOOL v5[8];

  *(_QWORD *)v5 = 0;
  v2 = (const char *)objc_msgSend((id)objc_msgSend((id)(*(uint64_t (**)(AUInterfaceBaseV3 *))(*(_QWORD *)this + 304))(this), "inputBusses"), "setBusCount:error:", a2, v5);
  return _AVAE_CheckSuccessAndNoNSError(581, (uint64_t)"SetNumberInputs", "[[auv3() inputBusses] setBusCount:(NSUInteger)numberInputs error:&nsErr]", v2, *(void **)v5, v3);
}

uint64_t AUInterfaceBaseV3::SetNumberOutputs(AUInterfaceBaseV3 *this, unsigned int a2)
{
  const char *v2;
  NSError *v3;
  BOOL v5[8];

  *(_QWORD *)v5 = 0;
  v2 = (const char *)objc_msgSend((id)objc_msgSend((id)(*(uint64_t (**)(AUInterfaceBaseV3 *))(*(_QWORD *)this + 304))(this), "outputBusses"), "setBusCount:error:", a2, v5);
  return _AVAE_CheckSuccessAndNoNSError(587, (uint64_t)"SetNumberOutputs", "[[auv3() outputBusses] setBusCount:(NSUInteger)numberOutputs error:&nsErr]", v2, *(void **)v5, v3);
}

uint64_t AUInterfaceBaseV3::SetParameter(AUInterfaceBaseV3 *this, uint64_t a2, uint64_t a3, uint64_t a4, float a5)
{
  uint64_t result;
  double v11;

  result = (*(uint64_t (**)(AUInterfaceBaseV3 *))(*(_QWORD *)this + 312))(this);
  if (result)
  {
    result = objc_msgSend((id)(*(uint64_t (**)(AUInterfaceBaseV3 *))(*(_QWORD *)this + 312))(this), "parameterWithID:scope:element:", a2, a3, a4);
    if (result
      || (result = objc_msgSend((id)(*(uint64_t (**)(AUInterfaceBaseV3 *))(*(_QWORD *)this + 312))(this), "parameterWithAddress:", a2)) != 0)
    {
      *(float *)&v11 = a5;
      objc_msgSend((id)result, "setValue:", v11);
      return 1;
    }
  }
  return result;
}

uint64_t AUInterfaceBaseV3::GetParameter(AUInterfaceBaseV3 *this, uint64_t a2, uint64_t a3, uint64_t a4, float *a5)
{
  uint64_t result;
  int v11;

  result = (*(uint64_t (**)(AUInterfaceBaseV3 *))(*(_QWORD *)this + 312))(this);
  if (result)
  {
    result = objc_msgSend((id)(*(uint64_t (**)(AUInterfaceBaseV3 *))(*(_QWORD *)this + 312))(this), "parameterWithID:scope:element:", a2, a3, a4);
    if (result
      || (result = objc_msgSend((id)(*(uint64_t (**)(AUInterfaceBaseV3 *))(*(_QWORD *)this + 312))(this), "parameterWithAddress:", a2)) != 0)
    {
      objc_msgSend((id)result, "value");
      *(_DWORD *)a5 = v11;
      return 1;
    }
  }
  return result;
}

uint64_t AUInterfaceBaseV3::SendMIDIEvent(AUInterfaceBaseV3 *this, BOOL a2, int a3, uint64_t a4, unsigned int a5, const unsigned __int8 *a6)
{
  NSObject *v11;
  NSObject *v12;
  uint64_t v13;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  int v18;
  __int16 v19;
  char *v20;
  __int16 v21;
  int v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  const char *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  if ((*(uint64_t (**)(AUInterfaceBaseV3 *))(*(_QWORD *)this + 320))(this))
  {
    if (a6)
      goto LABEL_14;
    goto LABEL_9;
  }
  if (AVAudioEngineLogCategory(void)::once != -1)
    dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
  v11 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
  if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136316418;
    v16 = "AVAEInternal.h";
    v17 = 1024;
    v18 = 71;
    v19 = 2080;
    v20 = "AUInterface.mm";
    v21 = 1024;
    v22 = 637;
    v23 = 2080;
    v24 = "SendMIDIEvent";
    v25 = 2080;
    v26 = "nil != ScheduleMIDIEventBlock()";
    _os_log_impl(&dword_19B733000, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
  }
  objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "nil != ScheduleMIDIEventBlock()");
  if (!a6)
  {
LABEL_9:
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v12 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316418;
      v16 = "AVAEInternal.h";
      v17 = 1024;
      v18 = 71;
      v19 = 2080;
      v20 = "AUInterface.mm";
      v21 = 1024;
      v22 = 638;
      v23 = 2080;
      v24 = "SendMIDIEvent";
      v25 = 2080;
      v26 = "nullptr != midiBytes";
      _os_log_impl(&dword_19B733000, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "nullptr != midiBytes");
  }
LABEL_14:
  v13 = (*(uint64_t (**)(AUInterfaceBaseV3 *))(*(_QWORD *)this + 320))(this);
  (*(void (**)(uint64_t, unint64_t, uint64_t, _QWORD, const unsigned __int8 *))(v13 + 16))(v13, *(_QWORD *)&a3 | 0xFFFFFFFF00000000, a4, a5, a6);
  return 1;
}

uint64_t AUInterfaceBaseV3::SendMIDIEventList(AUInterfaceBaseV3 *this, int a2, uint64_t a3, const MIDIEventList *a4)
{
  NSObject *v8;
  NSObject *v9;
  uint64_t v10;
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  int v15;
  __int16 v16;
  char *v17;
  __int16 v18;
  int v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  const char *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if ((*(uint64_t (**)(AUInterfaceBaseV3 *))(*(_QWORD *)this + 328))(this))
  {
    if (a4)
      goto LABEL_14;
    goto LABEL_9;
  }
  if (AVAudioEngineLogCategory(void)::once != -1)
    dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
  v8 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
  if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136316418;
    v13 = "AVAEInternal.h";
    v14 = 1024;
    v15 = 71;
    v16 = 2080;
    v17 = "AUInterface.mm";
    v18 = 1024;
    v19 = 647;
    v20 = 2080;
    v21 = "SendMIDIEventList";
    v22 = 2080;
    v23 = "nil != ScheduleMIDIEventListBlock()";
    _os_log_impl(&dword_19B733000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
  }
  objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "nil != ScheduleMIDIEventListBlock()");
  if (!a4)
  {
LABEL_9:
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v9 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316418;
      v13 = "AVAEInternal.h";
      v14 = 1024;
      v15 = 71;
      v16 = 2080;
      v17 = "AUInterface.mm";
      v18 = 1024;
      v19 = 648;
      v20 = 2080;
      v21 = "SendMIDIEventList";
      v22 = 2080;
      v23 = "nullptr != eventList";
      _os_log_impl(&dword_19B733000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "nullptr != eventList");
  }
LABEL_14:
  v10 = (*(uint64_t (**)(AUInterfaceBaseV3 *))(*(_QWORD *)this + 328))(this);
  (*(void (**)(uint64_t, unint64_t, uint64_t, const MIDIEventList *))(v10 + 16))(v10, *(_QWORD *)&a2 | 0xFFFFFFFF00000000, a3, a4);
  return 1;
}

uint64_t AUInterfaceBaseV3::GetMaxFramesPerSlice(AUInterfaceBaseV3 *this)
{
  return objc_msgSend((id)(*(uint64_t (**)(AUInterfaceBaseV3 *))(*(_QWORD *)this + 304))(this), "maximumFramesToRender");
}

uint64_t AUInterfaceBaseV3::SetMaxFramesPerSlice(AUInterfaceBaseV3 *this, uint64_t a2)
{
  return objc_msgSend((id)(*(uint64_t (**)(AUInterfaceBaseV3 *))(*(_QWORD *)this + 304))(this), "setMaximumFramesToRender:", a2);
}

double AUInterfaceBaseV3::GetProcessingLatency(AUInterfaceBaseV3 *this)
{
  double v1;

  objc_msgSend((id)(*(uint64_t (**)(AUInterfaceBaseV3 *))(*(_QWORD *)this + 304))(this), "latency");
  return fmax(v1, 0.0);
}

uint64_t AUInterfaceBaseV3::IsOffline(AUInterfaceBaseV3 *this)
{
  return objc_msgSend((id)(*(uint64_t (**)(AUInterfaceBaseV3 *))(*(_QWORD *)this + 304))(this), "isRenderingOffline");
}

uint64_t AUInterfaceBaseV3::SetOfflineMode(AUInterfaceBaseV3 *this, uint64_t a2)
{
  return objc_msgSend((id)(*(uint64_t (**)(AUInterfaceBaseV3 *))(*(_QWORD *)this + 304))(this), "setRenderingOffline:", a2);
}

const void **AUInterfaceBaseV3::AddRenderObserver(AUInterfaceBaseV3 *this, const AURenderCallbackStruct *a2)
{
  NSObject *v4;
  _QWORD *v5;
  uint64_t (*v6)(AUInterfaceBaseV3 *);
  const void **result;
  const void **v8;
  unint64_t v9;
  char *v10;
  _BYTE *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  const void **v23;
  _QWORD aBlock[4];
  __int128 v25;
  __int128 v26;
  _BYTE buf[34];
  __int16 v28;
  const char *v29;
  __int16 v30;
  const char *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  if (!a2->inputProc)
  {
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v4 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316418;
      *(_QWORD *)&buf[4] = "AVAEInternal.h";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 71;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = "AUInterface.mm";
      *(_WORD *)&buf[28] = 1024;
      *(_DWORD *)&buf[30] = 682;
      v28 = 2080;
      v29 = "AddRenderObserver";
      v30 = 2080;
      v31 = "inRenderCallback.inputProc";
      _os_log_impl(&dword_19B733000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "inRenderCallback.inputProc");
  }
  v26 = (__int128)*a2;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = ___ZN17AUInterfaceBaseV317AddRenderObserverERK22AURenderCallbackStruct_block_invoke;
  aBlock[3] = &__block_descriptor_48_e62_v32__0I8r__AudioTimeStamp_dQdQ_SMPTETime_ssIIIssss_II_12I20q24l;
  v25 = v26;
  *(_QWORD *)&buf[8] = 0;
  v5 = (_QWORD *)operator new();
  *v5 = 0;
  *v5 = _Block_copy(aBlock);
  *(_QWORD *)&buf[8] = v5;
  v6 = *(uint64_t (**)(AUInterfaceBaseV3 *))(*(_QWORD *)this + 304);
  *(_OWORD *)&buf[16] = v26;
  result = (const void **)objc_msgSend((id)v6(this), "tokenByAddingRenderObserver:", *v5);
  v8 = result;
  *(_QWORD *)buf = result;
  v10 = (char *)*((_QWORD *)this + 7);
  v9 = *((_QWORD *)this + 8);
  if ((unint64_t)v10 < v9)
  {
    *(_QWORD *)v10 = result;
    *((_QWORD *)v10 + 1) = v5;
    *((_OWORD *)v10 + 1) = v26;
    *((_QWORD *)this + 7) = v10 + 32;
    return result;
  }
  v11 = (_BYTE *)*((_QWORD *)this + 6);
  v12 = (v10 - v11) >> 5;
  v13 = v12 + 1;
  if ((unint64_t)(v12 + 1) >> 59)
    std::vector<EExtAudioGraphNodeState>::__throw_length_error[abi:ne180100]();
  v14 = v9 - (_QWORD)v11;
  if (v14 >> 4 > v13)
    v13 = v14 >> 4;
  if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFE0)
    v15 = 0x7FFFFFFFFFFFFFFLL;
  else
    v15 = v13;
  if (v15)
  {
    if (v15 >> 59)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v16 = (char *)operator new(32 * v15);
  }
  else
  {
    v16 = 0;
  }
  v17 = &v16[32 * v12];
  v18 = &v16[32 * v15];
  *(_QWORD *)&buf[8] = 0;
  *(_QWORD *)v17 = v8;
  *((_QWORD *)v17 + 1) = v5;
  *((_OWORD *)v17 + 1) = v26;
  v19 = v17 + 32;
  if (v10 != v11)
  {
    do
    {
      v20 = *((_QWORD *)v10 - 4);
      v10 -= 32;
      *((_QWORD *)v17 - 4) = v20;
      v17 -= 32;
      v21 = *((_QWORD *)v10 + 1);
      *((_QWORD *)v10 + 1) = 0;
      *((_QWORD *)v17 + 1) = v21;
      *((_OWORD *)v17 + 1) = *((_OWORD *)v10 + 1);
    }
    while (v10 != v11);
    v22 = (char *)*((_QWORD *)this + 6);
    v10 = (char *)*((_QWORD *)this + 7);
    *((_QWORD *)this + 6) = v17;
    *((_QWORD *)this + 7) = v19;
    *((_QWORD *)this + 8) = v18;
    if (v10 != v22)
    {
      do
      {
        std::unique_ptr<AVAEBlock<void({block_pointer})(unsigned int,AudioTimeStamp const*,unsigned int,long)>>::reset[abi:ne180100]((const void ***)v10 - 3, 0);
        v10 -= 32;
      }
      while (v10 != v22);
      v10 = v22;
    }
    if (!v10)
      goto LABEL_26;
    goto LABEL_25;
  }
  *((_QWORD *)this + 6) = v17;
  *((_QWORD *)this + 7) = v19;
  *((_QWORD *)this + 8) = v18;
  if (v10)
LABEL_25:
    operator delete(v10);
LABEL_26:
  result = *(const void ***)&buf[8];
  *((_QWORD *)this + 7) = v19;
  if (result)
  {
    v23 = AVAEBlock<void({block_pointer})(unsigned int,AudioTimeStamp const*,unsigned int,long)>::~AVAEBlock(result);
    return (const void **)MEMORY[0x1A1AC5BD4](v23, 0x80C40B8603338);
  }
  return result;
}

void sub_19B83CE2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  _Unwind_Resume(exception_object);
}

const void **AUInterfaceBaseV3::RemoveRenderObserver(const void **this, const AURenderCallbackStruct *a2)
{
  const void ***v2;
  const void ***v3;
  const void **v4;
  const void ***v5;
  const void ***v6;
  const void **v7;

  v3 = (const void ***)this[6];
  v2 = (const void ***)this[7];
  if (v3 != v2)
  {
    v4 = this;
    while (v3[2] != (const void **)a2->inputProc || v3[3] != a2->inputProcRefCon)
    {
      v3 += 4;
      if (v3 == v2)
        return this;
    }
    if (v3 != v2)
    {
      v5 = v3 + 4;
      this = (const void **)objc_msgSend((id)(*((uint64_t (**)(const void **))*this + 38))(this), "removeRenderObserver:", *v3);
      v6 = (const void ***)v4[7];
      if (v3 + 4 != v6)
      {
        do
        {
          v3 = v5;
          v7 = v5[1];
          *(v5 - 4) = *v5;
          v5[1] = 0;
          this = std::unique_ptr<AVAEBlock<void({block_pointer})(unsigned int,AudioTimeStamp const*,unsigned int,long)>>::reset[abi:ne180100](v5 - 3, v7);
          *((_OWORD *)v5 - 1) = *((_OWORD *)v5 + 1);
          v5 += 4;
        }
        while (v5 != v6);
        v5 = (const void ***)v4[7];
      }
      for (; v5 != v3; v5 -= 4)
        this = std::unique_ptr<AVAEBlock<void({block_pointer})(unsigned int,AudioTimeStamp const*,unsigned int,long)>>::reset[abi:ne180100](v5 - 3, 0);
      v4[7] = v3;
    }
  }
  return this;
}

uint64_t AUInterfaceBase::AddRenderCallback(AUInterfaceBase *this, uint64_t a2, const AURenderCallbackStruct *a3)
{
  uint64_t result;
  uint64_t v4;
  NSObject *v5;
  uint8_t buf[4];
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  char *v11;
  __int16 v12;
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  result = (*(uint64_t (**)(AUInterfaceBase *, uint64_t, uint64_t, uint64_t, const AURenderCallbackStruct *, uint64_t))(*(_QWORD *)this + 232))(this, 23, 1, a2, a3, 16);
  if ((_DWORD)result)
  {
    v4 = result;
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v5 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316674;
      v7 = "AVAEInternal.h";
      v8 = 1024;
      v9 = 104;
      v10 = 2080;
      v11 = "AUInterface.mm";
      v12 = 1024;
      v13 = 53;
      v14 = 2080;
      v15 = "AddRenderCallback";
      v16 = 2080;
      v17 = "SetV2Property(kAudioUnitProperty_SetRenderCallback, kAudioUnitScope_Input, element, &inRenderCallback, sizeo"
            "f(inRenderCallback))";
      v18 = 1024;
      v19 = v4;
      _os_log_impl(&dword_19B733000, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d [%s:%d:%s: (%s): error %d", buf, 0x3Cu);
    }
    return objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("error %d"), v4);
  }
  return result;
}

uint64_t AUInterfaceBase::RemoveRenderCallback(AUInterfaceBase *this, uint64_t a2, const AURenderCallbackStruct *a3)
{
  void *inputProcRefCon;
  uint64_t result;
  uint64_t v5;
  NSObject *v6;
  _QWORD v7[2];
  uint8_t buf[4];
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  char *v13;
  __int16 v14;
  int v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  int v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  inputProcRefCon = a3->inputProcRefCon;
  v7[0] = 0;
  v7[1] = inputProcRefCon;
  result = (*(uint64_t (**)(AUInterfaceBase *, uint64_t, uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)this + 232))(this, 23, 1, a2, v7, 16);
  if ((_DWORD)result)
  {
    v5 = result;
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v6 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316674;
      v9 = "AVAEInternal.h";
      v10 = 1024;
      v11 = 104;
      v12 = 2080;
      v13 = "AUInterface.mm";
      v14 = 1024;
      v15 = 59;
      v16 = 2080;
      v17 = "RemoveRenderCallback";
      v18 = 2080;
      v19 = "SetV2Property(kAudioUnitProperty_SetRenderCallback, kAudioUnitScope_Input, element, &rcb, sizeof(rcb))";
      v20 = 1024;
      v21 = v5;
      _os_log_impl(&dword_19B733000, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d [%s:%d:%s: (%s): error %d", buf, 0x3Cu);
    }
    return objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("error %d"), v5);
  }
  return result;
}

uint64_t AUInterfaceBase::SetV2Property(AUInterfaceBase *this, AudioUnitPropertyID a2, AudioUnitScope a3, AudioUnitElement a4, const void *a5, UInt32 a6)
{
  OpaqueAudioComponentInstance *v11;

  v11 = (OpaqueAudioComponentInstance *)(*(uint64_t (**)(AUInterfaceBase *))(*(_QWORD *)this + 272))(this);
  return AudioUnitSetProperty(v11, a2, a3, a4, a5, a6);
}

uint64_t AUInterfaceBase::GetV2Property(AUInterfaceBase *this, AudioUnitPropertyID a2, AudioUnitScope a3, AudioUnitElement a4, void *a5, unsigned int *a6)
{
  OpaqueAudioComponentInstance *v11;

  v11 = (OpaqueAudioComponentInstance *)(*(uint64_t (**)(AUInterfaceBase *))(*(_QWORD *)this + 272))(this);
  return AudioUnitGetProperty(v11, a2, a3, a4, a5, a6);
}

uint64_t AUInterfaceBase::GetV2PropertyInfo(AUInterfaceBase *this, AudioUnitPropertyID a2, AudioUnitScope a3, AudioUnitElement a4, unsigned int *a5, unsigned __int8 *a6)
{
  OpaqueAudioComponentInstance *v11;

  v11 = (OpaqueAudioComponentInstance *)(*(uint64_t (**)(AUInterfaceBase *))(*(_QWORD *)this + 272))(this);
  return AudioUnitGetPropertyInfo(v11, a2, a3, a4, a5, a6);
}

uint64_t AUInterfaceBase::AddV2PropertyListener(AUInterfaceBase *this, AudioUnitPropertyID a2, void (__cdecl *a3)(void *, AudioUnit, AudioUnitPropertyID, AudioUnitScope, AudioUnitElement), void *a4)
{
  OpaqueAudioComponentInstance *v7;

  v7 = (OpaqueAudioComponentInstance *)(*(uint64_t (**)(AUInterfaceBase *))(*(_QWORD *)this + 272))(this);
  return AudioUnitAddPropertyListener(v7, a2, a3, a4);
}

uint64_t AUInterfaceBase::RemoveV2PropertyListener(AUInterfaceBase *this, AudioUnitPropertyID a2, void (__cdecl *a3)(void *, AudioUnit, AudioUnitPropertyID, AudioUnitScope, AudioUnitElement), void *a4)
{
  OpaqueAudioComponentInstance *v7;

  v7 = (OpaqueAudioComponentInstance *)(*(uint64_t (**)(AUInterfaceBase *))(*(_QWORD *)this + 272))(this);
  return AudioUnitRemovePropertyListenerWithUserData(v7, a2, a3, a4);
}

const void **std::unique_ptr<AVAEBlock<void({block_pointer})(unsigned int,AudioTimeStamp const*,unsigned int,long)>>::reset[abi:ne180100](const void ***a1, const void **a2)
{
  const void **result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    AVAEBlock<void({block_pointer})(unsigned int,AudioTimeStamp const*,unsigned int,long)>::~AVAEBlock(result);
    JUMPOUT(0x1A1AC5BD4);
  }
  return result;
}

const void **AVAEBlock<void({block_pointer})(unsigned int,AudioTimeStamp const*,unsigned int,long)>::~AVAEBlock(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
  {
    _Block_release(v2);
    *a1 = 0;
  }
  return a1;
}

uint64_t ___ZN17AUInterfaceBaseV317AddRenderObserverERK22AURenderCallbackStruct_block_invoke(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v6;

  v6 = a2;
  return (*(uint64_t (**)(_QWORD, int *, uint64_t, uint64_t, uint64_t, _QWORD))(a1 + 32))(*(_QWORD *)(a1 + 40), &v6, a3, a5, a4, 0);
}

uint64_t _AVAE_CheckSuccessAndNoNSError(uint64_t result, uint64_t a2, const char *a3, const char *a4, void *a5, NSError *a6)
{
  int v7;
  int v10;
  NSObject *v11;
  const char *v12;
  const char *v13;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  int v17;
  __int16 v18;
  char *v19;
  __int16 v20;
  int v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  const char *v27;
  __int16 v28;
  uint64_t v29;
  uint64_t v30;

  v7 = (int)a4;
  v10 = result;
  v30 = *MEMORY[0x1E0C80C00];
  if (a5 || (a4 & 1) == 0)
  {
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v11 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      if (v7)
        v12 = "true";
      else
        v12 = "false";
      *(_DWORD *)buf = 136316930;
      v15 = "AVAEInternal.h";
      v16 = 1024;
      v17 = 125;
      v18 = 2080;
      v19 = "AUInterface.mm";
      v20 = 1024;
      v21 = v10;
      v22 = 2080;
      v23 = a2;
      v24 = 2080;
      v25 = a3;
      v26 = 2080;
      v27 = v12;
      v28 = 2112;
      v29 = objc_msgSend(a5, "description");
      _os_log_impl(&dword_19B733000, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d [%s:%d:%s: (%s)] returned %s, error %@", buf, 0x4Au);
    }
    if (v7)
      v13 = "true";
    else
      v13 = "false";
    return objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("%s: returned %s, error %@"), a3, v13, objc_msgSend(a5, "description"));
  }
  return result;
}

void AUInterfaceIOV3::~AUInterfaceIOV3(const void ***this)
{
  AUInterfaceBaseV3::~AUInterfaceBaseV3(this);
  JUMPOUT(0x1A1AC5BD4);
}

uint64_t AUInterfaceIOV3::CanPerformIO(AUInterfaceIOV3 *this, int a2)
{
  void *v3;

  v3 = (void *)(*(uint64_t (**)(AUInterfaceIOV3 *))(*(_QWORD *)this + 304))(this);
  if (a2)
    return objc_msgSend(v3, "canPerformInput");
  else
    return objc_msgSend(v3, "canPerformOutput");
}

uint64_t AUInterfaceIOV3::EnableIO(AUInterfaceIOV3 *this, uint64_t a2, uint64_t a3)
{
  int v4;
  uint64_t result;
  void *v7;

  v4 = a2;
  if (!(_DWORD)a3
    || (result = (*(uint64_t (**)(AUInterfaceIOV3 *, uint64_t))(*(_QWORD *)this + 80))(this, a2),
        (_DWORD)result))
  {
    v7 = (void *)(*(uint64_t (**)(AUInterfaceIOV3 *))(*(_QWORD *)this + 304))(this);
    if (v4)
      return objc_msgSend(v7, "setInputEnabled:", a3);
    else
      return objc_msgSend(v7, "setOutputEnabled:", a3);
  }
  return result;
}

uint64_t AUInterfaceIOV3::StartIO(AUInterfaceIOV3 *this)
{
  BOOL v1;
  id v3;

  v3 = 0;
  if (objc_msgSend((id)(*(uint64_t (**)(AUInterfaceIOV3 *))(*(_QWORD *)this + 304))(this), "startHardwareAndReturnError:", &v3))v1 = v3 == 0;
  else
    v1 = 0;
  if (v1)
    return 0;
  if (objc_msgSend(v3, "code"))
    return objc_msgSend(v3, "code");
  return 4294967246;
}

uint64_t AUInterfaceIOV3::StopIO(AUInterfaceIOV3 *this)
{
  objc_msgSend((id)(*(uint64_t (**)(AUInterfaceIOV3 *))(*(_QWORD *)this + 304))(this), "stopHardware");
  return 0;
}

uint64_t AUInterfaceIOV3::IsRunning(AUInterfaceIOV3 *this)
{
  return objc_msgSend((id)(*(uint64_t (**)(AUInterfaceIOV3 *))(*(_QWORD *)this + 304))(this), "isRunning");
}

uint64_t AUInterfaceIOV3::SetOutputProvider(uint64_t a1, uint64_t a2)
{
  return objc_msgSend((id)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 304))(a1), "setOutputProvider:", a2);
}

uint64_t AUInterfaceIOV3::SetInputHandler(uint64_t a1, uint64_t a2)
{
  return objc_msgSend((id)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 304))(a1), "setInputHandler:", a2);
}

void AUInterfaceBaseV3::~AUInterfaceBaseV3(const void ***this)
{
  const void ***v2;
  const void **v3;
  const void **v4;
  const void **v5;
  OpaqueAudioComponentInstance *v6;
  void **v7;

  *this = (const void **)off_1E3BE7340;
  v2 = this + 9;
  std::unique_ptr<AVAEBlock<void({block_pointer})(long long,unsigned char,long,unsigned char const*)>>::reset[abi:ne180100](this + 9, 0);
  v3 = this[6];
  v4 = this[7];
  if (v3 != v4)
  {
    do
    {
      objc_msgSend((id)((uint64_t (*)(const void ***))(*this)[38])(this), "removeRenderObserver:", *v3);
      v3 += 4;
    }
    while (v3 != v4);
    v5 = this[6];
    v3 = this[7];
    if (v3 != v5)
    {
      do
      {
        std::unique_ptr<AVAEBlock<void({block_pointer})(unsigned int,AudioTimeStamp const*,unsigned int,long)>>::reset[abi:ne180100]((const void ***)v3 - 3, 0);
        v3 -= 4;
      }
      while (v3 != v5);
      v3 = v5;
    }
  }
  this[7] = v3;
  objc_msgSend((id)((uint64_t (*)(const void ***))(*this)[38])(this), "invalidateAudioUnit");

  this[5] = 0;
  if (((uint64_t (*)(const void ***))(*this)[34])(this))
  {
    v6 = (OpaqueAudioComponentInstance *)((uint64_t (*)(const void ***))(*this)[34])(this);
    AudioComponentInstanceDispose(v6);
    this[4] = 0;
  }
  std::unique_ptr<AVAEBlock<int({block_pointer})(long long,unsigned char,MIDIEventList const*)>>::reset[abi:ne180100](this + 10, 0);
  std::unique_ptr<AVAEBlock<void({block_pointer})(long long,unsigned char,long,unsigned char const*)>>::reset[abi:ne180100](v2, 0);
  v7 = (void **)(this + 6);
  std::vector<AUInterfaceBaseV3::RenderObserver>::__destroy_vector::operator()[abi:ne180100](&v7);
}

const void ***std::unique_ptr<AVAEBlock<void({block_pointer})(long long,unsigned char,long,unsigned char const*)>>::reset[abi:ne180100](const void ***result, const void **a2)
{
  const void **v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    if (*v2)
    {
      _Block_release(*v2);
      *v2 = 0;
    }
    JUMPOUT(0x1A1AC5BD4);
  }
  return result;
}

void std::vector<AUInterfaceBaseV3::RenderObserver>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  const void ***v2;
  const void ***v4;
  void *v5;
  const void ***v6;

  v1 = *a1;
  v2 = (const void ***)**a1;
  if (v2)
  {
    v4 = (const void ***)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 4;
        std::unique_ptr<AVAEBlock<void({block_pointer})(unsigned int,AudioTimeStamp const*,unsigned int,long)>>::reset[abi:ne180100](v4 - 3, 0);
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void AUInterfaceBaseV3::AUInterfaceBaseV3(AUInterfaceBaseV3 *this, const AudioComponentDescription *a2, OpaqueAudioComponentInstance *a3)
{
  __int128 v4;
  UInt32 componentFlagsMask;
  const void ***v6;
  AudioComponentInstance *v7;
  void **v8;
  const void ***v9;
  OpaqueAudioComponent *Next;
  NSObject *v11;
  uint64_t v12;
  NSObject *v13;
  NSObject *v14;
  NSObject *v15;
  void *v16;
  NSObject *v17;
  id v18;
  const void *v19;
  NSObject *v20;
  const void **v21;
  void *v22;
  NSObject *v23;
  const void **v24;
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  int v28;
  __int16 v29;
  char *v30;
  __int16 v31;
  int v32;
  __int16 v33;
  const char *v34;
  __int16 v35;
  const char *v36;
  __int16 v37;
  int v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = off_1E3BE7340;
  v4 = *(_OWORD *)&a2->componentType;
  componentFlagsMask = a2->componentFlagsMask;
  *(_OWORD *)((char *)this + 72) = 0u;
  v6 = (const void ***)((char *)this + 72);
  *((_DWORD *)this + 6) = componentFlagsMask;
  *((_QWORD *)this + 4) = a3;
  v7 = (AudioComponentInstance *)((char *)this + 32);
  *(_OWORD *)((char *)this + 8) = v4;
  *(_OWORD *)((char *)this + 40) = 0u;
  v8 = (void **)((char *)this + 40);
  v9 = (const void ***)((char *)this + 80);
  *(_OWORD *)((char *)this + 56) = 0u;
  if (!a3)
  {
    Next = AudioComponentFindNext(0, (const AudioComponentDescription *)((char *)this + 8));
    if (!Next)
    {
      if (AVAudioEngineLogCategory(void)::once != -1)
        dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
      v11 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
      if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136316418;
        v26 = "AVAEInternal.h";
        v27 = 1024;
        v28 = 71;
        v29 = 2080;
        v30 = "AUInterface.mm";
        v31 = 1024;
        v32 = 466;
        v33 = 2080;
        v34 = "AUInterfaceBaseV3";
        v35 = 2080;
        v36 = "comp != nullptr";
        _os_log_impl(&dword_19B733000, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
      }
      objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "comp != nullptr");
    }
    v12 = AudioComponentInstanceNew(Next, v7);
    if ((_DWORD)v12)
    {
      if (AVAudioEngineLogCategory(void)::once != -1)
        dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
      v13 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
      if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136316674;
        v26 = "AVAEInternal.h";
        v27 = 1024;
        v28 = 104;
        v29 = 2080;
        v30 = "AUInterface.mm";
        v31 = 1024;
        v32 = 468;
        v33 = 2080;
        v34 = "AUInterfaceBaseV3";
        v35 = 2080;
        v36 = "AudioComponentInstanceNew(comp, &_auv2)";
        v37 = 1024;
        v38 = v12;
        _os_log_impl(&dword_19B733000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d [%s:%d:%s: (%s): error %d", buf, 0x3Cu);
      }
      objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("error %d"), v12);
    }
    if (!*v7)
    {
      if (AVAudioEngineLogCategory(void)::once != -1)
        dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
      v14 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
      if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136316418;
        v26 = "AVAEInternal.h";
        v27 = 1024;
        v28 = 71;
        v29 = 2080;
        v30 = "AUInterface.mm";
        v31 = 1024;
        v32 = 469;
        v33 = 2080;
        v34 = "AUInterfaceBaseV3";
        v35 = 2080;
        v36 = "_auv2 != nullptr";
        _os_log_impl(&dword_19B733000, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
      }
      objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "_auv2 != nullptr");
    }
    if (*v8)
    {
      if (AVAudioEngineLogCategory(void)::once != -1)
        dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
      v15 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
      if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136316418;
        v26 = "AVAEInternal.h";
        v27 = 1024;
        v28 = 71;
        v29 = 2080;
        v30 = "AUInterface.mm";
        v31 = 1024;
        v32 = 473;
        v33 = 2080;
        v34 = "AUInterfaceBaseV3";
        v35 = 2080;
        v36 = "_auv3 == nil";
        _os_log_impl(&dword_19B733000, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
      }
      objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "_auv3 == nil");
    }
  }
  v16 = (void *)objc_msgSend(MEMORY[0x1E0CFF710], "auAudioUnitForAudioUnit:", *v7);
  *v8 = v16;
  if (!v16)
  {
    if (AVAudioEngineLogCategory(void)::once != -1)
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
    v17 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316418;
      v26 = "AVAEInternal.h";
      v27 = 1024;
      v28 = 71;
      v29 = 2080;
      v30 = "AUInterface.mm";
      v31 = 1024;
      v32 = 475;
      v33 = 2080;
      v34 = "AUInterfaceBaseV3";
      v35 = 2080;
      v36 = "_auv3 != nil";
      _os_log_impl(&dword_19B733000, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "_auv3 != nil");
    v16 = *v8;
  }
  v18 = v16;
  if (objc_msgSend((id)(*(uint64_t (**)(AUInterfaceBaseV3 *))(*(_QWORD *)this + 304))(this), "isMusicDeviceOrEffect"))
  {
    v19 = (const void *)objc_msgSend((id)(*(uint64_t (**)(AUInterfaceBaseV3 *))(*(_QWORD *)this + 304))(this), "scheduleMIDIEventBlock");
    if (!v19)
    {
      if (AVAudioEngineLogCategory(void)::once != -1)
        dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
      v20 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
      if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136316418;
        v26 = "AVAEInternal.h";
        v27 = 1024;
        v28 = 71;
        v29 = 2080;
        v30 = "AUInterface.mm";
        v31 = 1024;
        v32 = 482;
        v33 = 2080;
        v34 = "AUInterfaceBaseV3";
        v35 = 2080;
        v36 = "nil != midiEventBlock";
        _os_log_impl(&dword_19B733000, v20, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
      }
      objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "nil != midiEventBlock");
    }
    v21 = (const void **)operator new();
    *v21 = 0;
    if (v19)
      *v21 = _Block_copy(v19);
    std::unique_ptr<AVAEBlock<void({block_pointer})(long long,unsigned char,long,unsigned char const*)>>::reset[abi:ne180100](v6, v21);
    v22 = (void *)objc_msgSend((id)(*(uint64_t (**)(AUInterfaceBaseV3 *))(*(_QWORD *)this + 304))(this), "scheduleMIDIEventListBlock");
    if (!v22)
    {
      if (AVAudioEngineLogCategory(void)::once != -1)
        dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_7560);
      v23 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
      if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136316418;
        v26 = "AVAEInternal.h";
        v27 = 1024;
        v28 = 71;
        v29 = 2080;
        v30 = "AUInterface.mm";
        v31 = 1024;
        v32 = 485;
        v33 = 2080;
        v34 = "AUInterfaceBaseV3";
        v35 = 2080;
        v36 = "nil != midiEventListBlock";
        _os_log_impl(&dword_19B733000, v23, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
      }
      objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("com.apple.coreaudio.avfaudio"), CFSTR("required condition is false: %s"), "nil != midiEventListBlock");
    }
    v24 = (const void **)operator new();
    *v24 = 0;
    AVAEBlock<int({block_pointer})(unsigned int *,AudioTimeStamp const*,unsigned int,long,AudioBufferList *)>::Set(v24, v22);
    std::unique_ptr<AVAEBlock<int({block_pointer})(long long,unsigned char,MIDIEventList const*)>>::reset[abi:ne180100](v9, v24);
  }
}

void sub_19B83E274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11)
{
  uint64_t v11;
  const void ***v12;
  const void ***v13;
  uint64_t v14;

  MEMORY[0x1A1AC5BD4](v14, 0x80C40B8603338);
  std::unique_ptr<AVAEBlock<int({block_pointer})(long long,unsigned char,MIDIEventList const*)>>::reset[abi:ne180100](v13, 0);
  std::unique_ptr<AVAEBlock<void({block_pointer})(long long,unsigned char,long,unsigned char const*)>>::reset[abi:ne180100](v12, 0);
  a11 = (void **)(v11 + 48);
  std::vector<AUInterfaceBaseV3::RenderObserver>::__destroy_vector::operator()[abi:ne180100](&a11);
  _Unwind_Resume(a1);
}

OSStatus AUGraphAddNode(AUGraph inGraph, const AudioComponentDescription *inDescription, AUNode *outNode)
{
  return MEMORY[0x1E0C91E38](inGraph, inDescription, outNode);
}

OSStatus AUGraphConnectNodeInput(AUGraph inGraph, AUNode inSourceNode, UInt32 inSourceOutputNumber, AUNode inDestNode, UInt32 inDestInputNumber)
{
  return MEMORY[0x1E0C91E40](inGraph, *(_QWORD *)&inSourceNode, *(_QWORD *)&inSourceOutputNumber, *(_QWORD *)&inDestNode, *(_QWORD *)&inDestInputNumber);
}

OSStatus AUGraphGetIndNode(AUGraph inGraph, UInt32 inIndex, AUNode *outNode)
{
  return MEMORY[0x1E0C91E48](inGraph, *(_QWORD *)&inIndex, outNode);
}

OSStatus AUGraphGetNodeCount(AUGraph inGraph, UInt32 *outNumberOfNodes)
{
  return MEMORY[0x1E0C91E50](inGraph, outNumberOfNodes);
}

OSStatus AUGraphInitialize(AUGraph inGraph)
{
  return MEMORY[0x1E0C91E58](inGraph);
}

OSStatus AUGraphNodeInfo(AUGraph inGraph, AUNode inNode, AudioComponentDescription *outDescription, AudioUnit *outAudioUnit)
{
  return MEMORY[0x1E0C91E60](inGraph, *(_QWORD *)&inNode, outDescription, outAudioUnit);
}

OSStatus AUGraphOpen(AUGraph inGraph)
{
  return MEMORY[0x1E0C91E68](inGraph);
}

OSStatus AUParameterListenerNotify(AUParameterListenerRef inSendingListener, void *inSendingObject, const AudioUnitParameter *inParameter)
{
  return MEMORY[0x1E0CFF360](inSendingListener, inSendingObject, inParameter);
}

OSStatus AudioComponentCopyConfigurationInfo(AudioComponent inComponent, CFDictionaryRef *outConfigurationInfo)
{
  return MEMORY[0x1E0CFF3C0](inComponent, outConfigurationInfo);
}

UIImage *__cdecl AudioComponentCopyIcon(AudioComponent comp)
{
  return (UIImage *)MEMORY[0x1E0CFF3C8](comp);
}

OSStatus AudioComponentCopyName(AudioComponent inComponent, CFStringRef *outName)
{
  return MEMORY[0x1E0CFF3D0](inComponent, outName);
}

uint64_t AudioComponentCopyTagsInfo()
{
  return MEMORY[0x1E0CFF3D8]();
}

AudioComponent AudioComponentFindNext(AudioComponent inComponent, const AudioComponentDescription *inDesc)
{
  return (AudioComponent)MEMORY[0x1E0CFF3E8](inComponent, inDesc);
}

OSStatus AudioComponentGetDescription(AudioComponent inComponent, AudioComponentDescription *outDesc)
{
  return MEMORY[0x1E0CFF3F0](inComponent, outDesc);
}

OSStatus AudioComponentGetVersion(AudioComponent inComponent, UInt32 *outVersion)
{
  return MEMORY[0x1E0CFF3F8](inComponent, outVersion);
}

OSStatus AudioComponentInstanceDispose(AudioComponentInstance inInstance)
{
  return MEMORY[0x1E0CFF408](inInstance);
}

OSStatus AudioComponentInstanceNew(AudioComponent inComponent, AudioComponentInstance *outInstance)
{
  return MEMORY[0x1E0CFF418](inComponent, outInstance);
}

void AudioComponentInstantiate(AudioComponent inComponent, AudioComponentInstantiationOptions inOptions, void *inCompletionHandler)
{
  MEMORY[0x1E0CFF420](inComponent, *(_QWORD *)&inOptions, inCompletionHandler);
}

OSStatus AudioComponentValidate(AudioComponent inComponent, CFDictionaryRef inValidationParameters, AudioComponentValidationResult *outValidationResult)
{
  return MEMORY[0x1E0CFF430](inComponent, inValidationParameters, outValidationResult);
}

OSStatus AudioComponentValidateWithResults(AudioComponent inComponent, CFDictionaryRef inValidationParameters, void *inCompletionHandler)
{
  return MEMORY[0x1E0CFF438](inComponent, inValidationParameters, inCompletionHandler);
}

OSStatus AudioConverterConvertComplexBuffer(AudioConverterRef inAudioConverter, UInt32 inNumberPCMFrames, const AudioBufferList *inInputData, AudioBufferList *outOutputData)
{
  return MEMORY[0x1E0CFF448](inAudioConverter, *(_QWORD *)&inNumberPCMFrames, inInputData, outOutputData);
}

OSStatus AudioConverterDispose(AudioConverterRef inAudioConverter)
{
  return MEMORY[0x1E0CFF450](inAudioConverter);
}

OSStatus AudioConverterFillComplexBuffer(AudioConverterRef inAudioConverter, AudioConverterComplexInputDataProc inInputDataProc, void *inInputDataProcUserData, UInt32 *ioOutputDataPacketSize, AudioBufferList *outOutputData, AudioStreamPacketDescription *outPacketDescription)
{
  return MEMORY[0x1E0CFF458](inAudioConverter, inInputDataProc, inInputDataProcUserData, ioOutputDataPacketSize, outOutputData, outPacketDescription);
}

OSStatus AudioConverterGetProperty(AudioConverterRef inAudioConverter, AudioConverterPropertyID inPropertyID, UInt32 *ioPropertyDataSize, void *outPropertyData)
{
  return MEMORY[0x1E0CFF468](inAudioConverter, *(_QWORD *)&inPropertyID, ioPropertyDataSize, outPropertyData);
}

OSStatus AudioConverterGetPropertyInfo(AudioConverterRef inAudioConverter, AudioConverterPropertyID inPropertyID, UInt32 *outSize, Boolean *outWritable)
{
  return MEMORY[0x1E0CFF470](inAudioConverter, *(_QWORD *)&inPropertyID, outSize, outWritable);
}

OSStatus AudioConverterNew(const AudioStreamBasicDescription *inSourceFormat, const AudioStreamBasicDescription *inDestinationFormat, AudioConverterRef *outAudioConverter)
{
  return MEMORY[0x1E0CFF478](inSourceFormat, inDestinationFormat, outAudioConverter);
}

OSStatus AudioConverterReset(AudioConverterRef inAudioConverter)
{
  return MEMORY[0x1E0CFF498](inAudioConverter);
}

OSStatus AudioConverterSetProperty(AudioConverterRef inAudioConverter, AudioConverterPropertyID inPropertyID, UInt32 inPropertyDataSize, const void *inPropertyData)
{
  return MEMORY[0x1E0CFF4A0](inAudioConverter, *(_QWORD *)&inPropertyID, *(_QWORD *)&inPropertyDataSize, inPropertyData);
}

OSStatus AudioFileClose(AudioFileID inAudioFile)
{
  return MEMORY[0x1E0CFF4A8](inAudioFile);
}

OSStatus AudioFileCreateWithURL(CFURLRef inFileRef, AudioFileTypeID inFileType, const AudioStreamBasicDescription *inFormat, AudioFileFlags inFlags, AudioFileID *outAudioFile)
{
  return MEMORY[0x1E0CFF4B0](inFileRef, *(_QWORD *)&inFileType, inFormat, *(_QWORD *)&inFlags, outAudioFile);
}

OSStatus AudioFileGetGlobalInfo(AudioFilePropertyID inPropertyID, UInt32 inSpecifierSize, void *inSpecifier, UInt32 *ioDataSize, void *outPropertyData)
{
  return MEMORY[0x1E0CFF4B8](*(_QWORD *)&inPropertyID, *(_QWORD *)&inSpecifierSize, inSpecifier, ioDataSize, outPropertyData);
}

OSStatus AudioFileGetGlobalInfoSize(AudioFilePropertyID inPropertyID, UInt32 inSpecifierSize, void *inSpecifier, UInt32 *outDataSize)
{
  return MEMORY[0x1E0CFF4C0](*(_QWORD *)&inPropertyID, *(_QWORD *)&inSpecifierSize, inSpecifier, outDataSize);
}

OSStatus AudioFileGetProperty(AudioFileID inAudioFile, AudioFilePropertyID inPropertyID, UInt32 *ioDataSize, void *outPropertyData)
{
  return MEMORY[0x1E0CFF4C8](inAudioFile, *(_QWORD *)&inPropertyID, ioDataSize, outPropertyData);
}

OSStatus AudioFileGetPropertyInfo(AudioFileID inAudioFile, AudioFilePropertyID inPropertyID, UInt32 *outDataSize, UInt32 *isWritable)
{
  return MEMORY[0x1E0CFF4D0](inAudioFile, *(_QWORD *)&inPropertyID, outDataSize, isWritable);
}

OSStatus AudioFileOpenURL(CFURLRef inFileRef, AudioFilePermissions inPermissions, AudioFileTypeID inFileTypeHint, AudioFileID *outAudioFile)
{
  return MEMORY[0x1E0CFF4D8](inFileRef, inPermissions, *(_QWORD *)&inFileTypeHint, outAudioFile);
}

OSStatus AudioFileOpenWithCallbacks(void *inClientData, AudioFile_ReadProc inReadFunc, AudioFile_WriteProc inWriteFunc, AudioFile_GetSizeProc inGetSizeFunc, AudioFile_SetSizeProc inSetSizeFunc, AudioFileTypeID inFileTypeHint, AudioFileID *outAudioFile)
{
  return MEMORY[0x1E0CFF4E0](inClientData, inReadFunc, inWriteFunc, inGetSizeFunc, inSetSizeFunc, *(_QWORD *)&inFileTypeHint, outAudioFile);
}

OSStatus AudioFileReadPacketData(AudioFileID inAudioFile, Boolean inUseCache, UInt32 *ioNumBytes, AudioStreamPacketDescription *outPacketDescriptions, SInt64 inStartingPacket, UInt32 *ioNumPackets, void *outBuffer)
{
  return MEMORY[0x1E0CFF4F0](inAudioFile, inUseCache, ioNumBytes, outPacketDescriptions, inStartingPacket, ioNumPackets, outBuffer);
}

OSStatus AudioFileSetProperty(AudioFileID inAudioFile, AudioFilePropertyID inPropertyID, UInt32 inDataSize, const void *inPropertyData)
{
  return MEMORY[0x1E0CFF500](inAudioFile, *(_QWORD *)&inPropertyID, *(_QWORD *)&inDataSize, inPropertyData);
}

OSStatus AudioFileWritePackets(AudioFileID inAudioFile, Boolean inUseCache, UInt32 inNumBytes, const AudioStreamPacketDescription *inPacketDescriptions, SInt64 inStartingPacket, UInt32 *ioNumPackets, const void *inBuffer)
{
  return MEMORY[0x1E0CFF508](inAudioFile, inUseCache, *(_QWORD *)&inNumBytes, inPacketDescriptions, inStartingPacket, ioNumPackets, inBuffer);
}

OSStatus AudioFormatGetProperty(AudioFormatPropertyID inPropertyID, UInt32 inSpecifierSize, const void *inSpecifier, UInt32 *ioPropertyDataSize, void *outPropertyData)
{
  return MEMORY[0x1E0CFF510](*(_QWORD *)&inPropertyID, *(_QWORD *)&inSpecifierSize, inSpecifier, ioPropertyDataSize, outPropertyData);
}

OSStatus AudioFormatGetPropertyInfo(AudioFormatPropertyID inPropertyID, UInt32 inSpecifierSize, const void *inSpecifier, UInt32 *outPropertyDataSize)
{
  return MEMORY[0x1E0CFF518](*(_QWORD *)&inPropertyID, *(_QWORD *)&inSpecifierSize, inSpecifier, outPropertyDataSize);
}

OSStatus AudioQueueAddPropertyListener(AudioQueueRef inAQ, AudioQueuePropertyID inID, AudioQueuePropertyListenerProc inProc, void *inUserData)
{
  return MEMORY[0x1E0C91FF0](inAQ, *(_QWORD *)&inID, inProc, inUserData);
}

OSStatus AudioQueueAllocateBuffer(AudioQueueRef inAQ, UInt32 inBufferByteSize, AudioQueueBufferRef *outBuffer)
{
  return MEMORY[0x1E0C91FF8](inAQ, *(_QWORD *)&inBufferByteSize, outBuffer);
}

OSStatus AudioQueueAllocateBufferWithPacketDescriptions(AudioQueueRef inAQ, UInt32 inBufferByteSize, UInt32 inNumberPacketDescriptions, AudioQueueBufferRef *outBuffer)
{
  return MEMORY[0x1E0C92008](inAQ, *(_QWORD *)&inBufferByteSize, *(_QWORD *)&inNumberPacketDescriptions, outBuffer);
}

OSStatus AudioQueueDispose(AudioQueueRef inAQ, Boolean inImmediate)
{
  return MEMORY[0x1E0C92030](inAQ, inImmediate);
}

OSStatus AudioQueueEnqueueBuffer(AudioQueueRef inAQ, AudioQueueBufferRef inBuffer, UInt32 inNumPacketDescs, const AudioStreamPacketDescription *inPacketDescs)
{
  return MEMORY[0x1E0C92038](inAQ, inBuffer, *(_QWORD *)&inNumPacketDescs, inPacketDescs);
}

OSStatus AudioQueueEnqueueBufferWithParameters(AudioQueueRef inAQ, AudioQueueBufferRef inBuffer, UInt32 inNumPacketDescs, const AudioStreamPacketDescription *inPacketDescs, UInt32 inTrimFramesAtStart, UInt32 inTrimFramesAtEnd, UInt32 inNumParamValues, const AudioQueueParameterEvent *inParamValues, const AudioTimeStamp *inStartTime, AudioTimeStamp *outActualStartTime)
{
  return MEMORY[0x1E0C92040](inAQ, inBuffer, *(_QWORD *)&inNumPacketDescs, inPacketDescs, *(_QWORD *)&inTrimFramesAtStart, *(_QWORD *)&inTrimFramesAtEnd, *(_QWORD *)&inNumParamValues, inParamValues);
}

OSStatus AudioQueueFlush(AudioQueueRef inAQ)
{
  return MEMORY[0x1E0C92050](inAQ);
}

OSStatus AudioQueueFreeBuffer(AudioQueueRef inAQ, AudioQueueBufferRef inBuffer)
{
  return MEMORY[0x1E0C92058](inAQ, inBuffer);
}

OSStatus AudioQueueGetCurrentTime(AudioQueueRef inAQ, AudioQueueTimelineRef inTimeline, AudioTimeStamp *outTimeStamp, Boolean *outTimelineDiscontinuity)
{
  return MEMORY[0x1E0C92060](inAQ, inTimeline, outTimeStamp, outTimelineDiscontinuity);
}

OSStatus AudioQueueGetProperty(AudioQueueRef inAQ, AudioQueuePropertyID inID, void *outData, UInt32 *ioDataSize)
{
  return MEMORY[0x1E0C92070](inAQ, *(_QWORD *)&inID, outData, ioDataSize);
}

OSStatus AudioQueueGetPropertySize(AudioQueueRef inAQ, AudioQueuePropertyID inID, UInt32 *outDataSize)
{
  return MEMORY[0x1E0C92078](inAQ, *(_QWORD *)&inID, outDataSize);
}

OSStatus AudioQueueNewInput(const AudioStreamBasicDescription *inFormat, AudioQueueInputCallback inCallbackProc, void *inUserData, CFRunLoopRef inCallbackRunLoop, CFStringRef inCallbackRunLoopMode, UInt32 inFlags, AudioQueueRef *outAQ)
{
  return MEMORY[0x1E0C92080](inFormat, inCallbackProc, inUserData, inCallbackRunLoop, inCallbackRunLoopMode, *(_QWORD *)&inFlags, outAQ);
}

uint64_t AudioQueueNewInputWithAudioSession()
{
  return MEMORY[0x1E0C92088]();
}

OSStatus AudioQueueNewOutput(const AudioStreamBasicDescription *inFormat, AudioQueueOutputCallback inCallbackProc, void *inUserData, CFRunLoopRef inCallbackRunLoop, CFStringRef inCallbackRunLoopMode, UInt32 inFlags, AudioQueueRef *outAQ)
{
  return MEMORY[0x1E0C92098](inFormat, inCallbackProc, inUserData, inCallbackRunLoop, inCallbackRunLoopMode, *(_QWORD *)&inFlags, outAQ);
}

uint64_t AudioQueueNewOutputWithAudioSession()
{
  return MEMORY[0x1E0C920A0]();
}

OSStatus AudioQueuePause(AudioQueueRef inAQ)
{
  return MEMORY[0x1E0C920A8](inAQ);
}

OSStatus AudioQueuePrime(AudioQueueRef inAQ, UInt32 inNumberOfFramesToPrepare, UInt32 *outNumberOfFramesPrepared)
{
  return MEMORY[0x1E0C920B0](inAQ, *(_QWORD *)&inNumberOfFramesToPrepare, outNumberOfFramesPrepared);
}

OSStatus AudioQueueRemovePropertyListener(AudioQueueRef inAQ, AudioQueuePropertyID inID, AudioQueuePropertyListenerProc inProc, void *inUserData)
{
  return MEMORY[0x1E0C920E0](inAQ, *(_QWORD *)&inID, inProc, inUserData);
}

OSStatus AudioQueueReset(AudioQueueRef inAQ)
{
  return MEMORY[0x1E0C920E8](inAQ);
}

OSStatus AudioQueueSetParameter(AudioQueueRef inAQ, AudioQueueParameterID inParamID, AudioQueueParameterValue inValue)
{
  return MEMORY[0x1E0C920F8](inAQ, *(_QWORD *)&inParamID, inValue);
}

OSStatus AudioQueueSetProperty(AudioQueueRef inAQ, AudioQueuePropertyID inID, const void *inData, UInt32 inDataSize)
{
  return MEMORY[0x1E0C92100](inAQ, *(_QWORD *)&inID, inData, *(_QWORD *)&inDataSize);
}

OSStatus AudioQueueStart(AudioQueueRef inAQ, const AudioTimeStamp *inStartTime)
{
  return MEMORY[0x1E0C92108](inAQ, inStartTime);
}

OSStatus AudioQueueStop(AudioQueueRef inAQ, Boolean inImmediate)
{
  return MEMORY[0x1E0C92118](inAQ, inImmediate);
}

uint64_t AudioServicesCreateSystemSoundIDWithOptions()
{
  return MEMORY[0x1E0C92130]();
}

OSStatus AudioServicesDisposeSystemSoundID(SystemSoundID inSystemSoundID)
{
  return MEMORY[0x1E0C92140](*(_QWORD *)&inSystemSoundID);
}

uint64_t AudioServicesPlaySystemSoundWithOptions()
{
  return MEMORY[0x1E0C92160]();
}

uint64_t AudioServicesStopSystemSound()
{
  return MEMORY[0x1E0C92188]();
}

uint64_t AudioSessionCreatePrimarySession_Priv()
{
  return MEMORY[0x1E0C921A0]();
}

uint64_t AudioSessionSetActive_Priv()
{
  return MEMORY[0x1E0C921B8]();
}

OSStatus AudioUnitAddPropertyListener(AudioUnit inUnit, AudioUnitPropertyID inID, AudioUnitPropertyListenerProc inProc, void *inProcUserData)
{
  return MEMORY[0x1E0CFF588](inUnit, *(_QWORD *)&inID, inProc, inProcUserData);
}

OSStatus AudioUnitGetProperty(AudioUnit inUnit, AudioUnitPropertyID inID, AudioUnitScope inScope, AudioUnitElement inElement, void *outData, UInt32 *ioDataSize)
{
  return MEMORY[0x1E0CFF5A8](inUnit, *(_QWORD *)&inID, *(_QWORD *)&inScope, *(_QWORD *)&inElement, outData, ioDataSize);
}

OSStatus AudioUnitGetPropertyInfo(AudioUnit inUnit, AudioUnitPropertyID inID, AudioUnitScope inScope, AudioUnitElement inElement, UInt32 *outDataSize, Boolean *outWritable)
{
  return MEMORY[0x1E0CFF5B0](inUnit, *(_QWORD *)&inID, *(_QWORD *)&inScope, *(_QWORD *)&inElement, outDataSize, outWritable);
}

OSStatus AudioUnitRemovePropertyListenerWithUserData(AudioUnit inUnit, AudioUnitPropertyID inID, AudioUnitPropertyListenerProc inProc, void *inProcUserData)
{
  return MEMORY[0x1E0CFF5D0](inUnit, *(_QWORD *)&inID, inProc, inProcUserData);
}

OSStatus AudioUnitSetParameter(AudioUnit inUnit, AudioUnitParameterID inID, AudioUnitScope inScope, AudioUnitElement inElement, AudioUnitParameterValue inValue, UInt32 inBufferOffsetInFrames)
{
  return MEMORY[0x1E0CFF5F8](inUnit, *(_QWORD *)&inID, *(_QWORD *)&inScope, *(_QWORD *)&inElement, *(_QWORD *)&inBufferOffsetInFrames, inValue);
}

OSStatus AudioUnitSetProperty(AudioUnit inUnit, AudioUnitPropertyID inID, AudioUnitScope inScope, AudioUnitElement inElement, const void *inData, UInt32 inDataSize)
{
  return MEMORY[0x1E0CFF600](inUnit, *(_QWORD *)&inID, *(_QWORD *)&inScope, *(_QWORD *)&inElement, inData, *(_QWORD *)&inDataSize);
}

CFAbsoluteTime CFAbsoluteTimeGetCurrent(void)
{
  CFAbsoluteTime result;

  MEMORY[0x1E0C97C58]();
  return result;
}

CFGregorianDate CFAbsoluteTimeGetGregorianDate(CFAbsoluteTime at, CFTimeZoneRef tz)
{
  uint64_t v2;
  double v3;
  CFGregorianDate result;

  v2 = MEMORY[0x1E0C97C88](tz, at);
  result.second = v3;
  result.year = v2;
  result.month = BYTE4(v2);
  result.day = BYTE5(v2);
  result.hour = BYTE6(v2);
  result.minute = HIBYTE(v2);
  return result;
}

CFTypeID CFArrayGetTypeID(void)
{
  return MEMORY[0x1E0C97D90]();
}

CFTypeRef CFAutorelease(CFTypeRef arg)
{
  return (CFTypeRef)MEMORY[0x1E0C97E90](arg);
}

CFTypeID CFBooleanGetTypeID(void)
{
  return MEMORY[0x1E0C97FC8]();
}

Boolean CFBooleanGetValue(CFBooleanRef BOOLean)
{
  return MEMORY[0x1E0C97FE0](BOOLean);
}

CFArrayRef CFBundleCopyExecutableArchitecturesForURL(CFURLRef url)
{
  return (CFArrayRef)MEMORY[0x1E0C98018](url);
}

CFStringRef CFBundleCopyLocalizedString(CFBundleRef bundle, CFStringRef key, CFStringRef value, CFStringRef tableName)
{
  return (CFStringRef)MEMORY[0x1E0C98050](bundle, key, value, tableName);
}

CFBundleRef CFBundleGetBundleWithIdentifier(CFStringRef bundleID)
{
  return (CFBundleRef)MEMORY[0x1E0C980E8](bundleID);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x1E0C983E0](theData);
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return MEMORY[0x1E0C983F8](theData);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x1E0C98550](allocator, capacity, keyCallBacks, valueCallBacks);
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x1E0C985B8](theDict, key);
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  MEMORY[0x1E0C98610](theDict, key, value);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x1E0C98738](cf);
}

CFTypeRef CFMakeCollectable(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1E0C98858](cf);
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x1E0C98928](allocator, theType, valuePtr);
}

CFPropertyListRef CFPreferencesCopyAppValue(CFStringRef key, CFStringRef applicationID)
{
  return (CFPropertyListRef)MEMORY[0x1E0C98A40](key, applicationID);
}

Boolean CFPreferencesGetAppBooleanValue(CFStringRef key, CFStringRef applicationID, Boolean *keyExistsAndHasValidFormat)
{
  return MEMORY[0x1E0C98A70](key, applicationID, keyExistsAndHasValidFormat);
}

CFIndex CFPreferencesGetAppIntegerValue(CFStringRef key, CFStringRef applicationID, Boolean *keyExistsAndHasValidFormat)
{
  return MEMORY[0x1E0C98A78](key, applicationID, keyExistsAndHasValidFormat);
}

CFDataRef CFPropertyListCreateData(CFAllocatorRef allocator, CFPropertyListRef propertyList, CFPropertyListFormat format, CFOptionFlags options, CFErrorRef *error)
{
  return (CFDataRef)MEMORY[0x1E0C98AA0](allocator, propertyList, format, options, error);
}

void CFRelease(CFTypeRef cf)
{
  MEMORY[0x1E0C98BC0](cf);
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1E0C98BD0](cf);
}

void CFRunLoopAddSource(CFRunLoopRef rl, CFRunLoopSourceRef source, CFRunLoopMode mode)
{
  MEMORY[0x1E0C98BF8](rl, source, mode);
}

CFRunLoopRef CFRunLoopGetCurrent(void)
{
  return (CFRunLoopRef)MEMORY[0x1E0C98C30]();
}

void CFRunLoopPerformBlock(CFRunLoopRef rl, CFTypeRef mode, void *block)
{
  MEMORY[0x1E0C98C80](rl, mode, block);
}

CFRunLoopRunResult CFRunLoopRunInMode(CFRunLoopMode mode, CFTimeInterval seconds, Boolean returnAfterSourceHandled)
{
  return MEMORY[0x1E0C98CB0](mode, returnAfterSourceHandled, seconds);
}

CFRunLoopSourceRef CFRunLoopSourceCreate(CFAllocatorRef allocator, CFIndex order, CFRunLoopSourceContext *context)
{
  return (CFRunLoopSourceRef)MEMORY[0x1E0C98CC8](allocator, order, context);
}

void CFRunLoopSourceSignal(CFRunLoopSourceRef source)
{
  MEMORY[0x1E0C98CF0](source);
}

void CFRunLoopWakeUp(CFRunLoopRef rl)
{
  MEMORY[0x1E0C98D68](rl);
}

CFStringRef CFStringCreateWithFormat(CFAllocatorRef alloc, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
  return (CFStringRef)MEMORY[0x1E0C99018](alloc, formatOptions, format);
}

Boolean CFStringGetCString(CFStringRef theString, char *buffer, CFIndex bufferSize, CFStringEncoding encoding)
{
  return MEMORY[0x1E0C99098](theString, buffer, bufferSize, *(_QWORD *)&encoding);
}

CFTypeID CFStringGetTypeID(void)
{
  return MEMORY[0x1E0C99170]();
}

CFTimeZoneRef CFTimeZoneCopySystem(void)
{
  return (CFTimeZoneRef)MEMORY[0x1E0C99280]();
}

CFURLRef CFURLCreateWithFileSystemPath(CFAllocatorRef allocator, CFStringRef filePath, CFURLPathStyle pathStyle, Boolean isDirectory)
{
  return (CFURLRef)MEMORY[0x1E0C99420](allocator, filePath, pathStyle, isDirectory);
}

CFStringRef CFURLGetString(CFURLRef anURL)
{
  return (CFStringRef)MEMORY[0x1E0C994A0](anURL);
}

OSStatus DisposeAUGraph(AUGraph inGraph)
{
  return MEMORY[0x1E0C92258](inGraph);
}

OSStatus DisposeMusicEventIterator(MusicEventIterator inIterator)
{
  return MEMORY[0x1E0C92260](inIterator);
}

OSStatus DisposeMusicPlayer(MusicPlayer inPlayer)
{
  return MEMORY[0x1E0C92268](inPlayer);
}

OSStatus DisposeMusicSequence(MusicSequence inSequence)
{
  return MEMORY[0x1E0C92270](inSequence);
}

OSStatus ExtAudioFileCreateWithURL(CFURLRef inURL, AudioFileTypeID inFileType, const AudioStreamBasicDescription *inStreamDesc, const AudioChannelLayout *inChannelLayout, UInt32 inFlags, ExtAudioFileRef *outExtAudioFile)
{
  return MEMORY[0x1E0CFF630](inURL, *(_QWORD *)&inFileType, inStreamDesc, inChannelLayout, *(_QWORD *)&inFlags, outExtAudioFile);
}

OSStatus ExtAudioFileDispose(ExtAudioFileRef inExtAudioFile)
{
  return MEMORY[0x1E0CFF638](inExtAudioFile);
}

OSStatus ExtAudioFileGetProperty(ExtAudioFileRef inExtAudioFile, ExtAudioFilePropertyID inPropertyID, UInt32 *ioPropertyDataSize, void *outPropertyData)
{
  return MEMORY[0x1E0CFF640](inExtAudioFile, *(_QWORD *)&inPropertyID, ioPropertyDataSize, outPropertyData);
}

OSStatus ExtAudioFileGetPropertyInfo(ExtAudioFileRef inExtAudioFile, ExtAudioFilePropertyID inPropertyID, UInt32 *outSize, Boolean *outWritable)
{
  return MEMORY[0x1E0CFF648](inExtAudioFile, *(_QWORD *)&inPropertyID, outSize, outWritable);
}

OSStatus ExtAudioFileOpenURL(CFURLRef inURL, ExtAudioFileRef *outExtAudioFile)
{
  return MEMORY[0x1E0CFF650](inURL, outExtAudioFile);
}

OSStatus ExtAudioFileRead(ExtAudioFileRef inExtAudioFile, UInt32 *ioNumberFrames, AudioBufferList *ioData)
{
  return MEMORY[0x1E0CFF658](inExtAudioFile, ioNumberFrames, ioData);
}

OSStatus ExtAudioFileSeek(ExtAudioFileRef inExtAudioFile, SInt64 inFrameOffset)
{
  return MEMORY[0x1E0CFF660](inExtAudioFile, inFrameOffset);
}

OSStatus ExtAudioFileSetProperty(ExtAudioFileRef inExtAudioFile, ExtAudioFilePropertyID inPropertyID, UInt32 inPropertyDataSize, const void *inPropertyData)
{
  return MEMORY[0x1E0CFF668](inExtAudioFile, *(_QWORD *)&inPropertyID, *(_QWORD *)&inPropertyDataSize, inPropertyData);
}

OSStatus ExtAudioFileTell(ExtAudioFileRef inExtAudioFile, SInt64 *outFrameOffset)
{
  return MEMORY[0x1E0CFF670](inExtAudioFile, outFrameOffset);
}

OSStatus ExtAudioFileWrapAudioFileID(AudioFileID inFileID, Boolean inForWriting, ExtAudioFileRef *outExtAudioFile)
{
  return MEMORY[0x1E0CFF678](inFileID, inForWriting, outExtAudioFile);
}

OSStatus ExtAudioFileWrite(ExtAudioFileRef inExtAudioFile, UInt32 inNumberFrames, const AudioBufferList *ioData)
{
  return MEMORY[0x1E0CFF680](inExtAudioFile, *(_QWORD *)&inNumberFrames, ioData);
}

uint64_t ExtendedAudioBufferList_Create()
{
  return MEMORY[0x1E0CFF690]();
}

uint64_t ExtendedAudioBufferList_Destroy()
{
  return MEMORY[0x1E0CFF6A0]();
}

uint64_t ExtendedAudioBufferList_Prepare()
{
  return MEMORY[0x1E0CFF6A8]();
}

uint64_t MGCopyAnswer()
{
  return MEMORY[0x1E0DE2B20]();
}

uint64_t MGGetBoolAnswer()
{
  return MEMORY[0x1E0DE2B50]();
}

uint64_t MGGetProductType()
{
  return MEMORY[0x1E0DE2B68]();
}

uint64_t MGGetSInt32Answer()
{
  return MEMORY[0x1E0DE2B70]();
}

uint64_t MGIsQuestionValid()
{
  return MEMORY[0x1E0DE2BA0]();
}

OSStatus MusicEventIteratorDeleteEvent(MusicEventIterator inIterator)
{
  return MEMORY[0x1E0C922E0](inIterator);
}

OSStatus MusicEventIteratorGetEventInfo(MusicEventIterator inIterator, MusicTimeStamp *outTimeStamp, MusicEventType *outEventType, const void **outEventData, UInt32 *outEventDataSize)
{
  return MEMORY[0x1E0C922E8](inIterator, outTimeStamp, outEventType, outEventData, outEventDataSize);
}

OSStatus MusicEventIteratorHasCurrentEvent(MusicEventIterator inIterator, Boolean *outHasCurEvent)
{
  return MEMORY[0x1E0C922F0](inIterator, outHasCurEvent);
}

OSStatus MusicEventIteratorHasNextEvent(MusicEventIterator inIterator, Boolean *outHasNextEvent)
{
  return MEMORY[0x1E0C922F8](inIterator, outHasNextEvent);
}

OSStatus MusicEventIteratorHasPreviousEvent(MusicEventIterator inIterator, Boolean *outHasPrevEvent)
{
  return MEMORY[0x1E0C92300](inIterator, outHasPrevEvent);
}

OSStatus MusicEventIteratorNextEvent(MusicEventIterator inIterator)
{
  return MEMORY[0x1E0C92308](inIterator);
}

OSStatus MusicEventIteratorPreviousEvent(MusicEventIterator inIterator)
{
  return MEMORY[0x1E0C92310](inIterator);
}

OSStatus MusicEventIteratorSeek(MusicEventIterator inIterator, MusicTimeStamp inTimeStamp)
{
  return MEMORY[0x1E0C92318](inIterator, inTimeStamp);
}

OSStatus MusicEventIteratorSetEventInfo(MusicEventIterator inIterator, MusicEventType inEventType, const void *inEventData)
{
  return MEMORY[0x1E0C92320](inIterator, *(_QWORD *)&inEventType, inEventData);
}

OSStatus MusicEventIteratorSetEventTime(MusicEventIterator inIterator, MusicTimeStamp inTimeStamp)
{
  return MEMORY[0x1E0C92328](inIterator, inTimeStamp);
}

OSStatus MusicPlayerGetBeatsForHostTime(MusicPlayer inPlayer, UInt64 inHostTime, MusicTimeStamp *outBeats)
{
  return MEMORY[0x1E0C92330](inPlayer, inHostTime, outBeats);
}

OSStatus MusicPlayerGetHostTimeForBeats(MusicPlayer inPlayer, MusicTimeStamp inBeats, UInt64 *outHostTime)
{
  return MEMORY[0x1E0C92338](inPlayer, outHostTime, inBeats);
}

OSStatus MusicPlayerGetPlayRateScalar(MusicPlayer inPlayer, Float64 *outScaleRate)
{
  return MEMORY[0x1E0C92340](inPlayer, outScaleRate);
}

OSStatus MusicPlayerGetTime(MusicPlayer inPlayer, MusicTimeStamp *outTime)
{
  return MEMORY[0x1E0C92348](inPlayer, outTime);
}

OSStatus MusicPlayerIsPlaying(MusicPlayer inPlayer, Boolean *outIsPlaying)
{
  return MEMORY[0x1E0C92350](inPlayer, outIsPlaying);
}

OSStatus MusicPlayerPreroll(MusicPlayer inPlayer)
{
  return MEMORY[0x1E0C92358](inPlayer);
}

OSStatus MusicPlayerSetPlayRateScalar(MusicPlayer inPlayer, Float64 inScaleRate)
{
  return MEMORY[0x1E0C92360](inPlayer, inScaleRate);
}

OSStatus MusicPlayerSetSequence(MusicPlayer inPlayer, MusicSequence inSequence)
{
  return MEMORY[0x1E0C92368](inPlayer, inSequence);
}

OSStatus MusicPlayerSetTime(MusicPlayer inPlayer, MusicTimeStamp inTime)
{
  return MEMORY[0x1E0C92370](inPlayer, inTime);
}

OSStatus MusicPlayerStart(MusicPlayer inPlayer)
{
  return MEMORY[0x1E0C92378](inPlayer);
}

OSStatus MusicPlayerStop(MusicPlayer inPlayer)
{
  return MEMORY[0x1E0C92380](inPlayer);
}

OSStatus MusicSequenceDisposeTrack(MusicSequence inSequence, MusicTrack inTrack)
{
  return MEMORY[0x1E0C92388](inSequence, inTrack);
}

OSStatus MusicSequenceFileCreate(MusicSequence inSequence, CFURLRef inFileRef, MusicSequenceFileTypeID inFileType, MusicSequenceFileFlags inFlags, SInt16 inResolution)
{
  return MEMORY[0x1E0C92390](inSequence, inFileRef, *(_QWORD *)&inFileType, *(_QWORD *)&inFlags, inResolution);
}

OSStatus MusicSequenceFileCreateData(MusicSequence inSequence, MusicSequenceFileTypeID inFileType, MusicSequenceFileFlags inFlags, SInt16 inResolution, CFDataRef *outData)
{
  return MEMORY[0x1E0C92398](inSequence, *(_QWORD *)&inFileType, *(_QWORD *)&inFlags, inResolution, outData);
}

OSStatus MusicSequenceFileLoad(MusicSequence inSequence, CFURLRef inFileRef, MusicSequenceFileTypeID inFileTypeHint, MusicSequenceLoadFlags inFlags)
{
  return MEMORY[0x1E0C923A0](inSequence, inFileRef, *(_QWORD *)&inFileTypeHint, *(_QWORD *)&inFlags);
}

OSStatus MusicSequenceFileLoadData(MusicSequence inSequence, CFDataRef inData, MusicSequenceFileTypeID inFileTypeHint, MusicSequenceLoadFlags inFlags)
{
  return MEMORY[0x1E0C923A8](inSequence, inData, *(_QWORD *)&inFileTypeHint, *(_QWORD *)&inFlags);
}

OSStatus MusicSequenceGetAUGraph(MusicSequence inSequence, AUGraph *outGraph)
{
  return MEMORY[0x1E0C923B0](inSequence, outGraph);
}

OSStatus MusicSequenceGetBeatsForSeconds(MusicSequence inSequence, Float64 inSeconds, MusicTimeStamp *outBeats)
{
  return MEMORY[0x1E0C923B8](inSequence, outBeats, inSeconds);
}

OSStatus MusicSequenceGetIndTrack(MusicSequence inSequence, UInt32 inTrackIndex, MusicTrack *outTrack)
{
  return MEMORY[0x1E0C923C0](inSequence, *(_QWORD *)&inTrackIndex, outTrack);
}

CFDictionaryRef MusicSequenceGetInfoDictionary(MusicSequence inSequence)
{
  return (CFDictionaryRef)MEMORY[0x1E0C923C8](inSequence);
}

OSStatus MusicSequenceGetSecondsForBeats(MusicSequence inSequence, MusicTimeStamp inBeats, Float64 *outSeconds)
{
  return MEMORY[0x1E0C923D0](inSequence, outSeconds, inBeats);
}

OSStatus MusicSequenceGetTempoTrack(MusicSequence inSequence, MusicTrack *outTrack)
{
  return MEMORY[0x1E0C923D8](inSequence, outTrack);
}

OSStatus MusicSequenceGetTrackCount(MusicSequence inSequence, UInt32 *outNumberOfTracks)
{
  return MEMORY[0x1E0C923E0](inSequence, outNumberOfTracks);
}

OSStatus MusicSequenceGetTrackIndex(MusicSequence inSequence, MusicTrack inTrack, UInt32 *outTrackIndex)
{
  return MEMORY[0x1E0C923E8](inSequence, inTrack, outTrackIndex);
}

OSStatus MusicSequenceNewTrack(MusicSequence inSequence, MusicTrack *outTrack)
{
  return MEMORY[0x1E0C923F0](inSequence, outTrack);
}

OSStatus MusicSequenceReverse(MusicSequence inSequence)
{
  return MEMORY[0x1E0C923F8](inSequence);
}

OSStatus MusicSequenceSetAUGraph(MusicSequence inSequence, AUGraph inGraph)
{
  return MEMORY[0x1E0C92400](inSequence, inGraph);
}

uint64_t MusicSequenceSetAudioGraph()
{
  return MEMORY[0x1E0C92408]();
}

OSStatus MusicSequenceSetUserCallback(MusicSequence inSequence, MusicSequenceUserCallback inCallback, void *inClientData)
{
  return MEMORY[0x1E0C92410](inSequence, inCallback, inClientData);
}

OSStatus MusicTrackClear(MusicTrack inTrack, MusicTimeStamp inStartTime, MusicTimeStamp inEndTime)
{
  return MEMORY[0x1E0C92418](inTrack, inStartTime, inEndTime);
}

OSStatus MusicTrackCopyInsert(MusicTrack inSourceTrack, MusicTimeStamp inSourceStartTime, MusicTimeStamp inSourceEndTime, MusicTrack inDestTrack, MusicTimeStamp inDestInsertTime)
{
  return MEMORY[0x1E0C92420](inSourceTrack, inDestTrack, inSourceStartTime, inSourceEndTime, inDestInsertTime);
}

OSStatus MusicTrackCut(MusicTrack inTrack, MusicTimeStamp inStartTime, MusicTimeStamp inEndTime)
{
  return MEMORY[0x1E0C92428](inTrack, inStartTime, inEndTime);
}

OSStatus MusicTrackGetDestMIDIEndpoint(MusicTrack inTrack, MIDIEndpointRef *outEndpoint)
{
  return MEMORY[0x1E0C92430](inTrack, outEndpoint);
}

OSStatus MusicTrackGetProperty(MusicTrack inTrack, UInt32 inPropertyID, void *outData, UInt32 *ioLength)
{
  return MEMORY[0x1E0C92438](inTrack, *(_QWORD *)&inPropertyID, outData, ioLength);
}

OSStatus MusicTrackGetSequence(MusicTrack inTrack, MusicSequence *outSequence)
{
  return MEMORY[0x1E0C92440](inTrack, outSequence);
}

uint64_t MusicTrackIsValid()
{
  return MEMORY[0x1E0C92448]();
}

OSStatus MusicTrackMerge(MusicTrack inSourceTrack, MusicTimeStamp inSourceStartTime, MusicTimeStamp inSourceEndTime, MusicTrack inDestTrack, MusicTimeStamp inDestInsertTime)
{
  return MEMORY[0x1E0C92450](inSourceTrack, inDestTrack, inSourceStartTime, inSourceEndTime, inDestInsertTime);
}

OSStatus MusicTrackMoveEvents(MusicTrack inTrack, MusicTimeStamp inStartTime, MusicTimeStamp inEndTime, MusicTimeStamp inMoveTime)
{
  return MEMORY[0x1E0C92458](inTrack, inStartTime, inEndTime, inMoveTime);
}

OSStatus MusicTrackNewAUPresetEvent(MusicTrack inTrack, MusicTimeStamp inTimeStamp, const AUPresetEvent *inPresetEvent)
{
  return MEMORY[0x1E0C92460](inTrack, inPresetEvent, inTimeStamp);
}

OSStatus MusicTrackNewExtendedNoteEvent(MusicTrack inTrack, MusicTimeStamp inTimeStamp, const ExtendedNoteOnEvent *inInfo)
{
  return MEMORY[0x1E0C92468](inTrack, inInfo, inTimeStamp);
}

OSStatus MusicTrackNewExtendedTempoEvent(MusicTrack inTrack, MusicTimeStamp inTimeStamp, Float64 inBPM)
{
  return MEMORY[0x1E0C92470](inTrack, inTimeStamp, inBPM);
}

OSStatus MusicTrackNewMIDIChannelEvent(MusicTrack inTrack, MusicTimeStamp inTimeStamp, const MIDIChannelMessage *inMessage)
{
  return MEMORY[0x1E0C92478](inTrack, inMessage, inTimeStamp);
}

OSStatus MusicTrackNewMIDINoteEvent(MusicTrack inTrack, MusicTimeStamp inTimeStamp, const MIDINoteMessage *inMessage)
{
  return MEMORY[0x1E0C92480](inTrack, inMessage, inTimeStamp);
}

OSStatus MusicTrackNewMIDIRawDataEvent(MusicTrack inTrack, MusicTimeStamp inTimeStamp, const MIDIRawData *inRawData)
{
  return MEMORY[0x1E0C92488](inTrack, inRawData, inTimeStamp);
}

OSStatus MusicTrackNewMetaEvent(MusicTrack inTrack, MusicTimeStamp inTimeStamp, const MIDIMetaEvent *inMetaEvent)
{
  return MEMORY[0x1E0C92490](inTrack, inMetaEvent, inTimeStamp);
}

OSStatus MusicTrackNewParameterEvent(MusicTrack inTrack, MusicTimeStamp inTimeStamp, const ParameterEvent *inInfo)
{
  return MEMORY[0x1E0C92498](inTrack, inInfo, inTimeStamp);
}

OSStatus MusicTrackNewUserEvent(MusicTrack inTrack, MusicTimeStamp inTimeStamp, const MusicEventUserData *inUserData)
{
  return MEMORY[0x1E0C924A0](inTrack, inUserData, inTimeStamp);
}

OSStatus MusicTrackSetDestMIDIEndpoint(MusicTrack inTrack, MIDIEndpointRef inEndpoint)
{
  return MEMORY[0x1E0C924A8](inTrack, *(_QWORD *)&inEndpoint);
}

uint64_t MusicTrackSetDestinationAU()
{
  return MEMORY[0x1E0C924B0]();
}

OSStatus MusicTrackSetProperty(MusicTrack inTrack, UInt32 inPropertyID, void *inData, UInt32 inLength)
{
  return MEMORY[0x1E0C924B8](inTrack, *(_QWORD *)&inPropertyID, inData, *(_QWORD *)&inLength);
}

Class NSClassFromString(NSString *aClassName)
{
  return (Class)MEMORY[0x1E0CB28A0](aClassName);
}

NSString *NSHomeDirectory(void)
{
  return (NSString *)MEMORY[0x1E0CB2C00]();
}

void NSLog(NSString *format, ...)
{
  MEMORY[0x1E0CB2D88](format);
}

SEL NSSelectorFromString(NSString *aSelectorName)
{
  return (SEL)MEMORY[0x1E0CB3190](aSelectorName);
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return (NSString *)MEMORY[0x1E0CB3200](aClass);
}

OSStatus NewAUGraph(AUGraph *outGraph)
{
  return MEMORY[0x1E0C924C0](outGraph);
}

OSStatus NewMusicEventIterator(MusicTrack inTrack, MusicEventIterator *outIterator)
{
  return MEMORY[0x1E0C924C8](inTrack, outIterator);
}

OSStatus NewMusicPlayer(MusicPlayer *outPlayer)
{
  return MEMORY[0x1E0C924D0](outPlayer);
}

OSStatus NewMusicSequence(MusicSequence *outSequence)
{
  return MEMORY[0x1E0C924D8](outSequence);
}

void *__cdecl OSAtomicDequeue(OSQueueHead *__list, size_t a2)
{
  return (void *)MEMORY[0x1E0C80658](__list, a2);
}

void OSAtomicEnqueue(OSQueueHead *__list, void *__new, size_t a3)
{
  MEMORY[0x1E0C80660](__list, __new, a3);
}

uint64_t RegisterForIsolatedAudio()
{
  return MEMORY[0x1E0D3EFC0]();
}

uint64_t RequestIsolatedAudio()
{
  return MEMORY[0x1E0D3EFC8]();
}

uint64_t SetAudioLapseHandler()
{
  return MEMORY[0x1E0D3EFD8]();
}

uint64_t StartIsolatedAudio()
{
  return MEMORY[0x1E0D3EFE8]();
}

uint64_t StartIsolatedAudioAtTime()
{
  return MEMORY[0x1E0D3EFF8]();
}

uint64_t StopIsolatedAudio()
{
  return MEMORY[0x1E0D3F008]();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x1E0C80928](aBlock);
}

void _Block_object_assign(void *a1, const void *a2, const int a3)
{
  MEMORY[0x1E0C80940](a1, a2, *(_QWORD *)&a3);
}

void _Block_object_dispose(const void *a1, const int a2)
{
  MEMORY[0x1E0C80948](a1, *(_QWORD *)&a2);
}

void _Block_release(const void *aBlock)
{
  MEMORY[0x1E0C80958](aBlock);
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
  MEMORY[0x1E0C80A20](exception_object);
}

uint64_t MIDI::LegacyPacketList::create()
{
  return MEMORY[0x1E0C9E600]();
}

uint64_t MIDI::LegacyPacketListDeleter::operator()()
{
  return MEMORY[0x1E0C9E608]();
}

void caulk::concurrent::message::~message(caulk::concurrent::message *this)
{
  MEMORY[0x1E0DDB450](this);
}

uint64_t caulk::concurrent::messenger::drain(caulk::concurrent::messenger *this)
{
  return MEMORY[0x1E0DDB468](this);
}

uint64_t caulk::concurrent::messenger::enqueue(caulk::concurrent::messenger *this, caulk::concurrent::message *a2)
{
  return MEMORY[0x1E0DDB470](this, a2);
}

uint64_t caulk::concurrent::messenger::messenger()
{
  return MEMORY[0x1E0DDB478]();
}

void caulk::concurrent::messenger::~messenger(caulk::concurrent::messenger *this)
{
  MEMORY[0x1E0DDB488](this);
}

uint64_t caulk::pooled_semaphore_mutex::_lock(caulk::pooled_semaphore_mutex *this)
{
  return MEMORY[0x1E0DDB4C0](this);
}

uint64_t caulk::pooled_semaphore_mutex::_unlock(caulk::pooled_semaphore_mutex *this)
{
  return MEMORY[0x1E0DDB4C8](this);
}

uint64_t caulk::pooled_semaphore_mutex::try_lock(caulk::pooled_semaphore_mutex *this)
{
  return MEMORY[0x1E0DDB4D0](this);
}

uint64_t caulk::pooled_semaphore_mutex::pooled_semaphore_mutex(caulk::pooled_semaphore_mutex *this)
{
  return MEMORY[0x1E0DDB4D8](this);
}

uint64_t caulk::semaphore::timed_wait(caulk::semaphore *this, double a2)
{
  return MEMORY[0x1E0DDB6F8](this, a2);
}

uint64_t caulk::semaphore::signal(caulk::semaphore *this)
{
  return MEMORY[0x1E0DDB700](this);
}

uint64_t caulk::semaphore::semaphore(caulk::semaphore *this)
{
  return MEMORY[0x1E0DDB708](this);
}

void caulk::semaphore::~semaphore(caulk::semaphore *this)
{
  MEMORY[0x1E0DDB710](this);
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x1E0DE4248](this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return (std::locale)MEMORY[0x1E0DE4258](this);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x1E0DE4278](this, a2);
}

{
  return (std::logic_error *)MEMORY[0x1E0DE4288](this, a2);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x1E0DE4388](this);
}

void std::__call_once(std::once_flag::_State_type *a1, void *a2, void (__cdecl *a3)(void *))
{
  MEMORY[0x1E0DE43A8](a1, a2, a3);
}

void std::this_thread::sleep_for (const std::chrono::nanoseconds *__ns)
{
  MEMORY[0x1E0DE43C0](__ns);
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x1E0DE43E8](__n);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1E0DE4428](this, __s, __n);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1E0DE4470](this, __pos, __s, __n);
}

void std::string::resize(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
  MEMORY[0x1E0DE4480](this, __n, __c);
}

std::string *__cdecl std::string::operator=(std::string *this, const std::string *__str)
{
  return (std::string *)MEMORY[0x1E0DE44D8](this, __str);
}

uint64_t std::ostream::sentry::sentry()
{
  return MEMORY[0x1E0DE46B0]();
}

uint64_t std::ostream::sentry::~sentry()
{
  return MEMORY[0x1E0DE46B8]();
}

uint64_t std::ostream::operator<<()
{
  return MEMORY[0x1E0DE46D0]();
}

{
  return MEMORY[0x1E0DE4700]();
}

{
  return MEMORY[0x1E0DE4718]();
}

uint64_t std::iostream::~basic_iostream()
{
  return MEMORY[0x1E0DE47A8]();
}

uint64_t std::streambuf::basic_streambuf()
{
  return MEMORY[0x1E0DE47E0]();
}

uint64_t std::streambuf::~streambuf()
{
  return MEMORY[0x1E0DE47E8]();
}

void std::recursive_mutex::lock(std::recursive_mutex *this)
{
  MEMORY[0x1E0DE4820](this);
}

void std::recursive_mutex::unlock(std::recursive_mutex *this)
{
  MEMORY[0x1E0DE4828](this);
}

BOOL std::recursive_mutex::try_lock(std::recursive_mutex *this)
{
  return MEMORY[0x1E0DE4830](this);
}

std::recursive_mutex *__cdecl std::recursive_mutex::recursive_mutex(std::recursive_mutex *this)
{
  return (std::recursive_mutex *)MEMORY[0x1E0DE4838](this);
}

void std::recursive_mutex::~recursive_mutex(std::recursive_mutex *this)
{
  MEMORY[0x1E0DE4840](this);
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
  MEMORY[0x1E0DE48F0](this);
}

std::__shared_weak_count *__cdecl std::__shared_weak_count::lock(std::__shared_weak_count *this)
{
  return (std::__shared_weak_count *)MEMORY[0x1E0DE48F8](this);
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
  MEMORY[0x1E0DE4900](this);
}

void std::mutex::lock(std::mutex *this)
{
  MEMORY[0x1E0DE4AA0](this);
}

void std::mutex::unlock(std::mutex *this)
{
  MEMORY[0x1E0DE4AA8](this);
}

void std::mutex::~mutex(std::mutex *this)
{
  MEMORY[0x1E0DE4AB8](this);
}

void std::locale::~locale(std::locale *this)
{
  MEMORY[0x1E0DE4B98](this);
}

void std::ios_base::__set_badbit_and_consider_rethrow(std::ios_base *this)
{
  MEMORY[0x1E0DE4C50](this);
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
  MEMORY[0x1E0DE4C68](this, __sb);
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
  MEMORY[0x1E0DE4C80](this, *(_QWORD *)&__state);
}

uint64_t std::ios::~ios()
{
  return MEMORY[0x1E0DE4D28]();
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, int __val)
{
  return (std::string *)MEMORY[0x1E0DE4D58](retstr, *(_QWORD *)&__val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unint64_t __val)
{
  return (std::string *)MEMORY[0x1E0DE4D70](retstr, __val);
}

std::bad_alloc *__cdecl std::bad_alloc::bad_alloc(std::bad_alloc *this)
{
  return (std::bad_alloc *)MEMORY[0x1E0DE4DB0](this);
}

void std::exception::~exception(std::exception *this)
{
  MEMORY[0x1E0DE4DD8](this);
}

void std::terminate(void)
{
  MEMORY[0x1E0DE4E18]();
}

uint64_t operator delete[]()
{
  return off_1E3BE4848();
}

void operator delete(void *__p)
{
  off_1E3BE4850(__p);
}

uint64_t operator delete()
{
  return off_1E3BE4858();
}

uint64_t operator new[]()
{
  return off_1E3BE4860();
}

void *__cdecl operator new(size_t __sz)
{
  return (void *)off_1E3BE4868(__sz);
}

uint64_t operator new()
{
  return off_1E3BE4870();
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
  MEMORY[0x1E0C80A58](a1, a2, *(_QWORD *)&a3, a4);
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x1E0DE5068](thrown_size);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x1E0DE5080](a1);
}

void __cxa_end_catch(void)
{
  MEMORY[0x1E0DE5098]();
}

void __cxa_free_exception(void *a1)
{
  MEMORY[0x1E0DE50A0](a1);
}

void __cxa_guard_abort(__guard *a1)
{
  MEMORY[0x1E0DE50B0](a1);
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x1E0DE50B8](a1);
}

void __cxa_guard_release(__guard *a1)
{
  MEMORY[0x1E0DE50C0](a1);
}

void __cxa_rethrow(void)
{
  MEMORY[0x1E0DE50D0]();
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
  MEMORY[0x1E0DE50D8](a1, lptinfo, a3);
}

int *__error(void)
{
  return (int *)MEMORY[0x1E0C80AC0]();
}

float __exp10f(float a1)
{
  float result;

  MEMORY[0x1E0C80AD0](a1);
  return result;
}

int __maskrune(__darwin_ct_rune_t a1, unint64_t a2)
{
  return MEMORY[0x1E0C80B50](*(_QWORD *)&a1, a2);
}

__float2 __sincosf_stret(float a1)
{
  float v1;
  float v2;
  __float2 result;

  MEMORY[0x1E0C80BD0](a1);
  result.__cosval = v2;
  result.__sinval = v1;
  return result;
}

uint64_t __udivti3()
{
  return MEMORY[0x1E0C80C80]();
}

uint64_t _os_assert_log()
{
  return MEMORY[0x1E0C80FF0]();
}

uint64_t _os_crash()
{
  return MEMORY[0x1E0C81000]();
}

uint64_t _os_feature_enabled_impl()
{
  return MEMORY[0x1E0C81010]();
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81038](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81040](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81048](dso, log, type, format, buf, *(_QWORD *)&size);
}

uint64_t _sl_dlopen()
{
  return MEMORY[0x1E0DA88F0]();
}

float acosf(float a1)
{
  float result;

  MEMORY[0x1E0C81508](a1);
  return result;
}

float atan2f(float a1, float a2)
{
  float result;

  MEMORY[0x1E0C81628](a1, a2);
  return result;
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x1E0C81758](a1, a2);
}

void dispatch_activate(dispatch_object_t object)
{
  MEMORY[0x1E0C82BC0](object);
}

void dispatch_after(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82BC8](when, queue, block);
}

void dispatch_assert_queue_V2(dispatch_queue_t queue)
{
  MEMORY[0x1E0C82BE8](queue);
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82C00](queue, block);
}

void dispatch_async_f(dispatch_queue_t queue, void *context, dispatch_function_t work)
{
  MEMORY[0x1E0C82C18](queue, context, work);
}

void dispatch_block_cancel(dispatch_block_t block)
{
  MEMORY[0x1E0C82C58](block);
}

dispatch_block_t dispatch_block_create(dispatch_block_flags_t flags, dispatch_block_t block)
{
  return (dispatch_block_t)MEMORY[0x1E0C82C60](flags, block);
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x1E0C82D00](identifier, flags);
}

void dispatch_group_async(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82D10](group, queue, block);
}

dispatch_group_t dispatch_group_create(void)
{
  return (dispatch_group_t)MEMORY[0x1E0C82D20]();
}

void dispatch_group_enter(dispatch_group_t group)
{
  MEMORY[0x1E0C82D28](group);
}

void dispatch_group_leave(dispatch_group_t group)
{
  MEMORY[0x1E0C82D30](group);
}

intptr_t dispatch_group_wait(dispatch_group_t group, dispatch_time_t timeout)
{
  return MEMORY[0x1E0C82D48](group, timeout);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
  MEMORY[0x1E0C82E08](predicate, block);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_autorelease_frequency(dispatch_queue_attr_t attr, dispatch_autorelease_frequency_t frequency)
{
  return (dispatch_queue_attr_t)MEMORY[0x1E0C82E28](attr, frequency);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class(dispatch_queue_attr_t attr, dispatch_qos_class_t qos_class, int relative_priority)
{
  return (dispatch_queue_attr_t)MEMORY[0x1E0C82E38](attr, *(_QWORD *)&qos_class, *(_QWORD *)&relative_priority);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x1E0C82E48](label, attr);
}

void dispatch_release(dispatch_object_t object)
{
  MEMORY[0x1E0C82E98](object);
}

void dispatch_resume(dispatch_object_t object)
{
  MEMORY[0x1E0C82EA0](object);
}

void dispatch_retain(dispatch_object_t object)
{
  MEMORY[0x1E0C82EA8](object);
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x1E0C82EB8](value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return MEMORY[0x1E0C82EC8](dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return MEMORY[0x1E0C82ED8](dsema, timeout);
}

void dispatch_set_target_queue(dispatch_object_t object, dispatch_queue_t queue)
{
  MEMORY[0x1E0C82F08](object, queue);
}

void dispatch_source_cancel(dispatch_source_t source)
{
  MEMORY[0x1E0C82F10](source);
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return (dispatch_source_t)MEMORY[0x1E0C82F20](type, handle, mask, queue);
}

void dispatch_source_set_cancel_handler(dispatch_source_t source, dispatch_block_t handler)
{
  MEMORY[0x1E0C82F48](source, handler);
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
  MEMORY[0x1E0C82F58](source, handler);
}

void dispatch_source_set_timer(dispatch_source_t source, dispatch_time_t start, uint64_t interval, uint64_t leeway)
{
  MEMORY[0x1E0C82F78](source, start, interval, leeway);
}

void dispatch_suspend(dispatch_object_t object)
{
  MEMORY[0x1E0C82F88](object);
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82F90](queue, block);
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x1E0C82FB8](when, delta);
}

dispatch_workloop_t dispatch_workloop_create_inactive(const char *label)
{
  return (dispatch_workloop_t)MEMORY[0x1E0C82FE0](label);
}

uint64_t dispatch_workloop_set_scheduler_priority()
{
  return MEMORY[0x1E0C83010]();
}

char *dlerror(void)
{
  return (char *)MEMORY[0x1E0C83038]();
}

void *__cdecl dlopen(const char *__path, int __mode)
{
  return (void *)MEMORY[0x1E0C83040](__path, *(_QWORD *)&__mode);
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x1E0C83050](__handle, __symbol);
}

void exit(int a1)
{
  MEMORY[0x1E0C83278](*(_QWORD *)&a1);
}

int fclose(FILE *a1)
{
  return MEMORY[0x1E0C832F8](a1);
}

int fflush(FILE *a1)
{
  return MEMORY[0x1E0C83370](a1);
}

long double fmod(long double __x, long double __y)
{
  long double result;

  MEMORY[0x1E0C83440](__x, __y);
  return result;
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x1E0C83478](a1, a2);
}

void free(void *a1)
{
  MEMORY[0x1E0C834A8](a1);
}

FILE *__cdecl funopen(const void *a1, int (__cdecl *a2)(void *, char *, int), int (__cdecl *a3)(void *, const char *, int), fpos_t (__cdecl *a4)(void *, fpos_t, int), int (__cdecl *a5)(void *))
{
  return (FILE *)MEMORY[0x1E0C835C8](a1, a2, a3, a4, a5);
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x1E0C835E0](__ptr, __size, __nitems, __stream);
}

pid_t getpid(void)
{
  return MEMORY[0x1E0C83760]();
}

float hypotf(float a1, float a2)
{
  float result;

  MEMORY[0x1E0C838F0](a1, a2);
  return result;
}

uint64_t kdebug_trace()
{
  return MEMORY[0x1E0C83A20]();
}

float log10f(float a1)
{
  float result;

  MEMORY[0x1E0C83BC8](a1);
  return result;
}

uint64_t mach_absolute_time(void)
{
  return MEMORY[0x1E0C83C50]();
}

mach_msg_return_t mach_msg(mach_msg_header_t *msg, mach_msg_option_t option, mach_msg_size_t send_size, mach_msg_size_t rcv_size, mach_port_name_t rcv_name, mach_msg_timeout_t timeout, mach_port_name_t notify)
{
  return MEMORY[0x1E0C83CB0](msg, *(_QWORD *)&option, *(_QWORD *)&send_size, *(_QWORD *)&rcv_size, *(_QWORD *)&rcv_name, *(_QWORD *)&timeout, *(_QWORD *)&notify);
}

kern_return_t mach_port_allocate(ipc_space_t task, mach_port_right_t right, mach_port_name_t *name)
{
  return MEMORY[0x1E0C83CE0](*(_QWORD *)&task, *(_QWORD *)&right, name);
}

kern_return_t mach_port_deallocate(ipc_space_t task, mach_port_name_t name)
{
  return MEMORY[0x1E0C83CF8](*(_QWORD *)&task, *(_QWORD *)&name);
}

kern_return_t mach_port_insert_right(ipc_space_t task, mach_port_name_t name, mach_port_t poly, mach_msg_type_name_t polyPoly)
{
  return MEMORY[0x1E0C83D48](*(_QWORD *)&task, *(_QWORD *)&name, *(_QWORD *)&poly, *(_QWORD *)&polyPoly);
}

kern_return_t mach_port_mod_refs(ipc_space_t task, mach_port_name_t name, mach_port_right_t right, mach_port_delta_t delta)
{
  return MEMORY[0x1E0C83D58](*(_QWORD *)&task, *(_QWORD *)&name, *(_QWORD *)&right, *(_QWORD *)&delta);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83EF8](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83F00](size, type_id);
}

void *__cdecl malloc_type_realloc(void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83F10](ptr, size, type_id);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x1E0C84078](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1E0C84088](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1E0C84098](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x1E0C840B0](__b, *(_QWORD *)&__c, __len);
}

void memset_pattern16(void *__b, const void *__pattern16, size_t __len)
{
  MEMORY[0x1E0C840B8](__b, __pattern16, __len);
}

uint32_t notify_cancel(int token)
{
  return MEMORY[0x1E0C843D8](*(_QWORD *)&token);
}

BOOL notify_is_valid_token(int val)
{
  return MEMORY[0x1E0C843F0](*(_QWORD *)&val);
}

uint32_t notify_register_dispatch(const char *name, int *out_token, dispatch_queue_t queue, notify_handler_t handler)
{
  return MEMORY[0x1E0C84408](name, out_token, queue, handler);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1E0DE7BA8](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x1E0DE7BB8]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x1E0DE7BD0](a1);
}

void objc_autoreleasePoolPop(void *context)
{
  MEMORY[0x1E0DE7BD8](context);
}

void *objc_autoreleasePoolPush(void)
{
  return (void *)MEMORY[0x1E0DE7BE0]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7BE8](a1);
}

id objc_begin_catch(void *exc_buf)
{
  return (id)MEMORY[0x1E0DE7BF0](exc_buf);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x1E0DE7BF8]();
}

void objc_copyWeak(id *to, id *from)
{
  MEMORY[0x1E0DE7C38](to, from);
}

void objc_destroyWeak(id *location)
{
  MEMORY[0x1E0DE7C60](location);
}

void objc_end_catch(void)
{
  MEMORY[0x1E0DE7C80]();
}

void objc_enumerationMutation(id obj)
{
  MEMORY[0x1E0DE7C90](obj);
}

void objc_exception_rethrow(void)
{
  MEMORY[0x1E0DE7C98]();
}

Class objc_getClass(const char *name)
{
  return (Class)MEMORY[0x1E0DE7CB0](name);
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return (id)MEMORY[0x1E0DE7CD0](self, _cmd, offset, atomic);
}

id objc_initWeak(id *location, id val)
{
  return (id)MEMORY[0x1E0DE7CE0](location, val);
}

id objc_loadWeak(id *location)
{
  return (id)MEMORY[0x1E0DE7D00](location);
}

id objc_loadWeakRetained(id *location)
{
  return (id)MEMORY[0x1E0DE7D08](location);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1E0DE7D30](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x1E0DE7D38]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x1E0DE7D40]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x1E0DE7D48]();
}

uint64_t objc_opt_respondsToSelector()
{
  return MEMORY[0x1E0DE7D50]();
}

uint64_t objc_opt_self()
{
  return MEMORY[0x1E0DE7D58]();
}

void objc_release(id a1)
{
  MEMORY[0x1E0DE7D78](a1);
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1E0DE7E50](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x1E0DE7E58](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7E60](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7E68](a1);
}

id objc_retainBlock(id a1)
{
  return (id)MEMORY[0x1E0DE7E70](a1);
}

void objc_setProperty_atomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x1E0DE7F88](self, _cmd, newValue, offset);
}

void objc_setProperty_atomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x1E0DE7F90](self, _cmd, newValue, offset);
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x1E0DE7FA0](self, _cmd, newValue, offset);
}

void objc_storeStrong(id *location, id obj)
{
  MEMORY[0x1E0DE7FB0](location, obj);
}

id objc_storeWeak(id *location, id obj)
{
  return (id)MEMORY[0x1E0DE7FB8](location, obj);
}

int objc_sync_enter(id obj)
{
  return MEMORY[0x1E0DE7FC8](obj);
}

int objc_sync_exit(id obj)
{
  return MEMORY[0x1E0DE7FD0](obj);
}

id objc_unsafeClaimAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7FE0](a1);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x1E0C84728](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1E0C84780](oslog, type);
}

uint64_t os_transaction_create()
{
  return MEMORY[0x1E0C84970]();
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
  MEMORY[0x1E0C84998](lock);
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
  MEMORY[0x1E0C849B0](lock);
}

uint64_t os_variant_is_darwinos()
{
  return MEMORY[0x1E0C84A08]();
}

int pthread_attr_destroy(pthread_attr_t *a1)
{
  return MEMORY[0x1E0C84CB0](a1);
}

int pthread_attr_getschedparam(const pthread_attr_t *a1, sched_param *a2)
{
  return MEMORY[0x1E0C84CB8](a1, a2);
}

int pthread_attr_init(pthread_attr_t *a1)
{
  return MEMORY[0x1E0C84CC8](a1);
}

int pthread_attr_setdetachstate(pthread_attr_t *a1, int a2)
{
  return MEMORY[0x1E0C84CD8](a1, *(_QWORD *)&a2);
}

int pthread_attr_setschedparam(pthread_attr_t *a1, const sched_param *a2)
{
  return MEMORY[0x1E0C84CE8](a1, a2);
}

int pthread_attr_setschedpolicy(pthread_attr_t *a1, int a2)
{
  return MEMORY[0x1E0C84CF0](a1, *(_QWORD *)&a2);
}

int pthread_cond_broadcast(pthread_cond_t *a1)
{
  return MEMORY[0x1E0C84D18](a1);
}

int pthread_cond_destroy(pthread_cond_t *a1)
{
  return MEMORY[0x1E0C84D20](a1);
}

int pthread_cond_init(pthread_cond_t *a1, const pthread_condattr_t *a2)
{
  return MEMORY[0x1E0C84D28](a1, a2);
}

int pthread_cond_signal(pthread_cond_t *a1)
{
  return MEMORY[0x1E0C84D30](a1);
}

int pthread_cond_timedwait_relative_np(pthread_cond_t *a1, pthread_mutex_t *a2, const timespec *a3)
{
  return MEMORY[0x1E0C84D40](a1, a2, a3);
}

int pthread_cond_wait(pthread_cond_t *a1, pthread_mutex_t *a2)
{
  return MEMORY[0x1E0C84D48](a1, a2);
}

int pthread_create(pthread_t *a1, const pthread_attr_t *a2, void *(__cdecl *a3)(void *), void *a4)
{
  return MEMORY[0x1E0C84D50](a1, a2, a3, a4);
}

int pthread_equal(pthread_t a1, pthread_t a2)
{
  return MEMORY[0x1E0C84D80](a1, a2);
}

mach_port_t pthread_mach_thread_np(pthread_t a1)
{
  return MEMORY[0x1E0C84E00](a1);
}

int pthread_mutex_destroy(pthread_mutex_t *a1)
{
  return MEMORY[0x1E0C84E18](a1);
}

int pthread_mutex_init(pthread_mutex_t *a1, const pthread_mutexattr_t *a2)
{
  return MEMORY[0x1E0C84E20](a1, a2);
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return MEMORY[0x1E0C84E28](a1);
}

int pthread_mutex_trylock(pthread_mutex_t *a1)
{
  return MEMORY[0x1E0C84E30](a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return MEMORY[0x1E0C84E38](a1);
}

int pthread_once(pthread_once_t *a1, void (*a2)(void))
{
  return MEMORY[0x1E0C84E68](a1, a2);
}

pthread_t pthread_self(void)
{
  return (pthread_t)MEMORY[0x1E0C84ED8]();
}

int pthread_setname_np(const char *a1)
{
  return MEMORY[0x1E0C84F08](a1);
}

void qsort(void *__base, size_t __nel, size_t __width, int (__cdecl *__compar)(const void *, const void *))
{
  MEMORY[0x1E0C84F88](__base, __nel, __width, __compar);
}

uint64_t sandbox_extension_consume()
{
  return MEMORY[0x1E0C851A0]();
}

uint64_t sandbox_extension_issue_file()
{
  return MEMORY[0x1E0C851A8]();
}

uint64_t sandbox_extension_issue_generic()
{
  return MEMORY[0x1E0C851C8]();
}

uint64_t sandbox_extension_release()
{
  return MEMORY[0x1E0C851F8]();
}

int sched_yield(void)
{
  return MEMORY[0x1E0C85270]();
}

long double sin(long double __x)
{
  long double result;

  MEMORY[0x1E0C85418](__x);
  return result;
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x1E0C85440](__str, __size, __format);
}

size_t strlcpy(char *__dst, const char *__source, size_t __size)
{
  return MEMORY[0x1E0C85570](__dst, __source, __size);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1E0C85578](__s);
}

char *__cdecl strrchr(char *__s, int __c)
{
  return (char *)MEMORY[0x1E0C855E8](__s, *(_QWORD *)&__c);
}

int sysctl(int *a1, u_int a2, void *a3, size_t *a4, void *a5, size_t a6)
{
  return MEMORY[0x1E0C85798](a1, *(_QWORD *)&a2, a3, a4, a5, a6);
}

kern_return_t thread_info(thread_inspect_t target_act, thread_flavor_t flavor, thread_info_t thread_info_out, mach_msg_type_number_t *thread_info_outCnt)
{
  return MEMORY[0x1E0C858F8](*(_QWORD *)&target_act, *(_QWORD *)&flavor, thread_info_out, thread_info_outCnt);
}

kern_return_t thread_policy_set(thread_act_t thread, thread_policy_flavor_t flavor, thread_policy_t policy_info, mach_msg_type_number_t policy_infoCnt)
{
  return MEMORY[0x1E0C85908](*(_QWORD *)&thread, *(_QWORD *)&flavor, policy_info, *(_QWORD *)&policy_infoCnt);
}

int usleep(useconds_t a1)
{
  return MEMORY[0x1E0C859E0](*(_QWORD *)&a1);
}

void vDSP_conv(const float *__A, vDSP_Stride __IA, const float *__F, vDSP_Stride __IF, float *__C, vDSP_Stride __IC, vDSP_Length __N, vDSP_Length __P)
{
  MEMORY[0x1E0C8C050](__A, __IA, __F, __IF, __C, __IC, __N, __P);
}

void vDSP_maxv(const float *__A, vDSP_Stride __IA, float *__C, vDSP_Length __N)
{
  MEMORY[0x1E0C8C1B0](__A, __IA, __C, __N);
}

void vDSP_rmsqv(const float *__A, vDSP_Stride __IA, float *__C, vDSP_Length __N)
{
  MEMORY[0x1E0C8C2C0](__A, __IA, __C, __N);
}

void vDSP_vflt16(const __int16 *__A, vDSP_Stride __IA, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x1E0C8C598](__A, __IA, __C, __IC, __N);
}

void vDSP_vflt32(const int *__A, vDSP_Stride __IA, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x1E0C8C5B8](__A, __IA, __C, __IC, __N);
}

void vDSP_vsdiv(const float *__A, vDSP_Stride __IA, const float *__B, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x1E0C8C860](__A, __IA, __B, __C, __IC, __N);
}

int vsnprintf(char *__str, size_t __size, const char *__format, va_list a4)
{
  return MEMORY[0x1E0C85B98](__str, __size, __format, a4);
}

xpc_connection_t xpc_connection_create(const char *name, dispatch_queue_t targetq)
{
  return (xpc_connection_t)MEMORY[0x1E0C85F90](name, targetq);
}

void xpc_connection_resume(xpc_connection_t connection)
{
  MEMORY[0x1E0C86018](connection);
}

void xpc_connection_send_message(xpc_connection_t connection, xpc_object_t message)
{
  MEMORY[0x1E0C86030](connection, message);
}

void xpc_connection_set_context(xpc_connection_t connection, void *context)
{
  MEMORY[0x1E0C86070](connection, context);
}

void xpc_connection_set_event_handler(xpc_connection_t connection, xpc_handler_t handler)
{
  MEMORY[0x1E0C86080](connection, handler);
}

void xpc_connection_set_finalizer_f(xpc_connection_t connection, xpc_finalizer_t finalizer)
{
  MEMORY[0x1E0C86088](connection, finalizer);
}

xpc_object_t xpc_dictionary_create(const char *const *keys, xpc_object_t *values, size_t count)
{
  return (xpc_object_t)MEMORY[0x1E0C86208](keys, values, count);
}

void xpc_dictionary_set_data(xpc_object_t xdict, const char *key, const void *bytes, size_t length)
{
  MEMORY[0x1E0C86330](xdict, key, bytes, length);
}

void xpc_dictionary_set_uint64(xpc_object_t xdict, const char *key, uint64_t value)
{
  MEMORY[0x1E0C86398](xdict, key, value);
}

xpc_type_t xpc_get_type(xpc_object_t object)
{
  return (xpc_type_t)MEMORY[0x1E0C86520](object);
}

void xpc_release(xpc_object_t object)
{
  MEMORY[0x1E0C86658](object);
}

