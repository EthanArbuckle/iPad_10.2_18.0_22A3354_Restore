_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  return sub_233B03518(a2 + 32, a1 + 32);
}

uint64_t block_copy_helper_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_2(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_3(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_5(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_6(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_7(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_9(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_10(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_11(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_12(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_13(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_14(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_15(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_16(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

uint64_t block_destroy_helper_0(uint64_t a1)
{
  return __swift_destroy_boxed_opaque_existential_0(a1 + 32);
}

uint64_t block_destroy_helper_1()
{
  return swift_release();
}

uint64_t block_destroy_helper_2()
{
  return swift_release();
}

uint64_t block_destroy_helper_3()
{
  return swift_release();
}

uint64_t block_destroy_helper_4()
{
  return swift_release();
}

uint64_t block_destroy_helper_5()
{
  return swift_release();
}

uint64_t block_destroy_helper_6()
{
  return swift_release();
}

uint64_t block_destroy_helper_7()
{
  return swift_release();
}

uint64_t block_destroy_helper_8()
{
  return swift_release();
}

uint64_t block_destroy_helper_9()
{
  return swift_release();
}

uint64_t block_destroy_helper_10()
{
  return swift_release();
}

uint64_t block_destroy_helper_11()
{
  return swift_release();
}

uint64_t block_destroy_helper_12()
{
  return swift_release();
}

uint64_t block_destroy_helper_13()
{
  return swift_release();
}

uint64_t block_destroy_helper_14()
{
  return swift_release();
}

uint64_t block_destroy_helper_15()
{
  return swift_release();
}

uint64_t block_destroy_helper_16()
{
  return swift_release();
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x23493D3E8]((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

_QWORD *__swift_project_boxed_opaque_existential_1(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

uint64_t __swift_destroy_boxed_opaque_existential_0(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t __swift_instantiateGenericMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return MEMORY[0x23493D3AC](a1, v6, a5);
}

uint64_t __swift_mutable_project_boxed_opaque_existential_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x23493D3F4](255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

__n128 __swift_memcpy33_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  if ((*(_DWORD *)(*(_QWORD *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t CellularSettings.Prompt.init(rawValue:)@<X0>(char *a1@<X8>)
{
  unint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_233B5835C();
  result = swift_bridgeObjectRelease();
  v4 = 3;
  if (v2 < 3)
    v4 = v2;
  *a1 = v4;
  return result;
}

uint64_t CellularSettings.Prompt.rawValue.getter()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x696D694C7265764FLL;
  if (*v0 != 1)
    v1 = 0x726576654ELL;
  if (*v0)
    return v1;
  else
    return 0x737961776C41;
}

uint64_t sub_233B01E48(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_233B25B8C(*a1, *a2);
}

uint64_t sub_233B01E54()
{
  sub_233B58590();
  sub_233B57FCC();
  swift_bridgeObjectRelease();
  return sub_233B585C0();
}

uint64_t sub_233B01EF0()
{
  sub_233B57FCC();
  return swift_bridgeObjectRelease();
}

uint64_t sub_233B01F68()
{
  sub_233B58590();
  sub_233B57FCC();
  swift_bridgeObjectRelease();
  return sub_233B585C0();
}

uint64_t sub_233B02000@<X0>(char *a1@<X8>)
{
  return CellularSettings.Prompt.init(rawValue:)(a1);
}

void sub_233B0200C(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE600000000000000;
  v4 = 0xE900000000000074;
  v5 = 0x696D694C7265764FLL;
  if (v2 != 1)
  {
    v5 = 0x726576654ELL;
    v4 = 0xE500000000000000;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x737961776C41;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t CellularSettings.init(for:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  result = swift_bridgeObjectRelease();
  *a2 = v3;
  a2[1] = v4;
  return result;
}

id CellularSettings.allowAutomaticDownloads.getter()
{
  id v0;
  void *v1;
  id v2;
  void *v3;
  id v4;

  v0 = objc_allocWithZone(MEMORY[0x24BDBCF50]);
  v1 = (void *)sub_233B57F6C();
  v2 = objc_msgSend(v0, sel_initWithSuiteName_, v1);

  if (!v2)
    return 0;
  v3 = (void *)sub_233B57F6C();
  v4 = objc_msgSend(v2, sel_BOOLForKey_, v3);

  return v4;
}

void sub_233B0215C(unsigned __int8 *a1@<X8>)
{
  id v2;
  void *v3;
  id v4;
  void *v5;
  unsigned __int8 v6;

  v2 = objc_allocWithZone(MEMORY[0x24BDBCF50]);
  swift_bridgeObjectRetain();
  v3 = (void *)sub_233B57F6C();
  v4 = objc_msgSend(v2, sel_initWithSuiteName_, v3);

  if (v4)
  {
    v5 = (void *)sub_233B57F6C();
    v6 = objc_msgSend(v4, sel_BOOLForKey_, v5);
    swift_bridgeObjectRelease();

  }
  else
  {
    swift_bridgeObjectRelease();
    v6 = 0;
  }
  *a1 = v6;
}

void sub_233B02244(unsigned __int8 *a1)
{
  uint64_t v1;
  id v2;
  void *v3;
  id v4;
  id v5;

  v1 = *a1;
  v2 = objc_allocWithZone(MEMORY[0x24BDBCF50]);
  v3 = (void *)sub_233B57F6C();
  v4 = objc_msgSend(v2, sel_initWithSuiteName_, v3);

  if (v4)
  {
    v5 = (id)sub_233B57F6C();
    objc_msgSend(v4, sel_setBool_forKey_, v1, v5);

  }
}

void CellularSettings.allowAutomaticDownloads.setter(char a1)
{
  id v2;
  void *v3;
  id v4;
  id v5;

  v2 = objc_allocWithZone(MEMORY[0x24BDBCF50]);
  v3 = (void *)sub_233B57F6C();
  v4 = objc_msgSend(v2, sel_initWithSuiteName_, v3);

  if (v4)
  {
    v5 = (id)sub_233B57F6C();
    objc_msgSend(v4, sel_setBool_forKey_, a1 & 1, v5);

  }
}

void (*CellularSettings.allowAutomaticDownloads.modify(unsigned __int8 *a1))(unsigned __int8 *a1)
{
  id v2;
  void *v3;
  id v4;
  void *v5;
  unsigned __int8 v6;

  v2 = objc_allocWithZone(MEMORY[0x24BDBCF50]);
  v3 = (void *)sub_233B57F6C();
  v4 = objc_msgSend(v2, sel_initWithSuiteName_, v3);

  if (v4)
  {
    v5 = (void *)sub_233B57F6C();
    v6 = objc_msgSend(v4, sel_BOOLForKey_, v5);

  }
  else
  {
    v6 = 0;
  }
  *a1 = v6;
  return sub_233B024BC;
}

void sub_233B024BC(unsigned __int8 *a1)
{
  uint64_t v1;
  id v2;
  void *v3;
  void *v4;
  id v5;

  v1 = *a1;
  v2 = objc_allocWithZone(MEMORY[0x24BDBCF50]);
  v3 = (void *)sub_233B57F6C();
  v5 = objc_msgSend(v2, sel_initWithSuiteName_, v3);

  if (v5)
  {
    v4 = (void *)sub_233B57F6C();
    objc_msgSend(v5, sel_setBool_forKey_, v1, v4);

  }
}

uint64_t CellularSettings.cellularData.getter@<X0>(char *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t result;
  unint64_t v8;
  char v9;
  char v10;
  char v11[40];
  __int128 v12;
  __int128 v13;

  v3 = *v1;
  v4 = sub_233B02A4C();
  swift_bridgeObjectRetain();
  sub_233B58260();
  if (*(_QWORD *)(v4 + 16) && (v5 = sub_233B03474((uint64_t)v11), (v6 & 1) != 0))
  {
    sub_233B03518(*(_QWORD *)(v4 + 56) + 32 * v5, (uint64_t)&v12);
  }
  else
  {
    v12 = 0u;
    v13 = 0u;
  }
  swift_bridgeObjectRelease();
  sub_233B034A4((uint64_t)v11);
  if (!*((_QWORD *)&v13 + 1))
    goto LABEL_15;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256112BB0);
  result = swift_dynamicCast();
  if ((result & 1) == 0)
  {
LABEL_16:
    v10 = 1;
    goto LABEL_17;
  }
  sub_233B58260();
  if (*(_QWORD *)(v3 + 16) && (v8 = sub_233B03474((uint64_t)v11), (v9 & 1) != 0))
  {
    sub_233B03518(*(_QWORD *)(v3 + 56) + 32 * v8, (uint64_t)&v12);
  }
  else
  {
    v12 = 0u;
    v13 = 0u;
  }
  swift_bridgeObjectRelease();
  sub_233B034A4((uint64_t)v11);
  if (!*((_QWORD *)&v13 + 1))
  {
LABEL_15:
    result = sub_233B034D8((uint64_t)&v12);
    goto LABEL_16;
  }
  result = swift_dynamicCast();
  if ((result & 1) == 0)
    goto LABEL_16;
  result = CellularSettings.Prompt.init(rawValue:)(v11);
  v10 = v11[0];
  if (v11[0] == 3)
    v10 = 1;
LABEL_17:
  *a1 = v10;
  return result;
}

uint64_t sub_233B02740@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;
  char v3;

  result = CellularSettings.cellularData.getter(&v3);
  *a1 = v3;
  return result;
}

void sub_233B02780(unsigned __int8 *a1)
{
  unsigned __int8 v1;

  v1 = *a1;
  CellularSettings.cellularData.setter(&v1);
}

void CellularSettings.cellularData.setter(unsigned __int8 *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v13;
  uint64_t v14;
  char v15;
  _OWORD v16[2];
  _BYTE v17[40];
  __int128 v18;
  __int128 v19;

  v2 = v1;
  v3 = *a1;
  v4 = v1[1];
  *(_QWORD *)&v16[0] = *v1;
  *((_QWORD *)&v16[0] + 1) = v4;
  swift_bridgeObjectRetain();
  sub_233B58260();
  v5 = sub_233B02A4C();
  if (*(_QWORD *)(v5 + 16) && (v6 = sub_233B03474((uint64_t)v17), (v7 & 1) != 0))
  {
    sub_233B03518(*(_QWORD *)(v5 + 56) + 32 * v6, (uint64_t)&v18);
  }
  else
  {
    v18 = 0u;
    v19 = 0u;
  }
  swift_bridgeObjectRelease();
  sub_233B034A4((uint64_t)v17);
  if (*((_QWORD *)&v19 + 1))
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_256112BB0);
    if (swift_dynamicCast())
    {
      v8 = *(_QWORD *)&v16[0];
      goto LABEL_10;
    }
  }
  else
  {
    sub_233B034D8((uint64_t)&v18);
  }
  v8 = sub_233B02C98(MEMORY[0x24BEE4AF8]);
LABEL_10:
  *(_QWORD *)&v18 = 0xD000000000000012;
  *((_QWORD *)&v18 + 1) = 0x8000000233B61010;
  v9 = MEMORY[0x24BEE0D00];
  sub_233B58260();
  if (v3)
  {
    if (v3 == 1)
    {
      v10 = 0xE900000000000074;
      v11 = 0x696D694C7265764FLL;
    }
    else
    {
      v10 = 0xE500000000000000;
      v11 = 0x726576654ELL;
    }
  }
  else
  {
    v10 = 0xE600000000000000;
    v11 = 0x737961776C41;
  }
  *((_QWORD *)&v19 + 1) = v9;
  *(_QWORD *)&v18 = v11;
  *((_QWORD *)&v18 + 1) = v10;
  sub_233B03554(&v18, v16);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  sub_233B043E4(v16, (uint64_t)v17, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  sub_233B034A4((uint64_t)v17);
  v13 = v2[1];
  *(_QWORD *)&v18 = *v2;
  *((_QWORD *)&v18 + 1) = v13;
  swift_bridgeObjectRetain();
  sub_233B58260();
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_256112BB0);
  *((_QWORD *)&v19 + 1) = v14;
  *(_QWORD *)&v18 = v8;
  sub_233B02A4C();
  if (v14)
  {
    sub_233B03554(&v18, v16);
    v15 = swift_isUniquelyReferenced_nonNull_native();
    sub_233B043E4(v16, (uint64_t)v17, v15);
    swift_bridgeObjectRelease();
    sub_233B034A4((uint64_t)v17);
  }
  else
  {
    sub_233B034D8((uint64_t)&v18);
    sub_233B03A74((uint64_t)v17, v16);
    sub_233B034A4((uint64_t)v17);
    sub_233B034D8((uint64_t)v16);
  }
  sub_233B02F18();
}

uint64_t sub_233B02A4C()
{
  id v0;
  void *v1;
  id v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;

  v0 = objc_allocWithZone(MEMORY[0x24BDBCF50]);
  v1 = (void *)sub_233B57F6C();
  v2 = objc_msgSend(v0, sel_initWithSuiteName_, v1);

  if (v2
    && (v3 = (void *)sub_233B57F6C(),
        v4 = objc_msgSend(v2, sel_dictionaryForKey_, v3),
        v2,
        v3,
        v4))
  {
    v5 = sub_233B57F24();

  }
  else
  {
    v5 = sub_233B02B64(MEMORY[0x24BEE4AF8]);
  }
  v6 = sub_233B030B0(v5);
  swift_bridgeObjectRelease();
  return v6;
}

unint64_t sub_233B02B64(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_256112BD8);
  v2 = sub_233B58344();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_233B04BE8(v6, (uint64_t)&v15, &qword_256112BE0);
    v7 = v15;
    v8 = v16;
    result = sub_233B03564(v15, v16);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v11 = (uint64_t *)(v3[6] + 16 * result);
    *v11 = v7;
    v11[1] = v8;
    result = (unint64_t)sub_233B03554(&v17, (_OWORD *)(v3[7] + 32 * result));
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_233B02C98(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  _OWORD v15[2];
  uint64_t v16;
  __int128 v17;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_256112BC8);
  v2 = sub_233B58344();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_233B04BE8(v6, (uint64_t)v15, &qword_256112BD0);
    result = sub_233B03474((uint64_t)v15);
    if ((v8 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v9 = v3[6] + 40 * result;
    v10 = v15[0];
    v11 = v15[1];
    *(_QWORD *)(v9 + 32) = v16;
    *(_OWORD *)v9 = v10;
    *(_OWORD *)(v9 + 16) = v11;
    result = (unint64_t)sub_233B03554(&v17, (_OWORD *)(v3[7] + 32 * result));
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v3[2] = v14;
    v6 += 72;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_233B02DD8(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  unint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  unint64_t v8;
  unint64_t result;
  char v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_256112BC0);
  v2 = (_QWORD *)sub_233B58344();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (unint64_t *)(a1 + 56);
  while (1)
  {
    v5 = *(v4 - 3);
    v6 = *(v4 - 2);
    v7 = *((_BYTE *)v4 - 8);
    v8 = *v4;
    sub_233B0486C(v5, v6, v7);
    sub_233B0487C(v8);
    result = sub_233B03618(v5, v6, v7);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = v2[6] + 24 * result;
    *(_QWORD *)v11 = v5;
    *(_QWORD *)(v11 + 8) = v6;
    *(_BYTE *)(v11 + 16) = v7;
    *(_QWORD *)(v2[7] + 8 * result) = v8;
    v12 = v2[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v4 += 4;
    v2[2] = v14;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

void sub_233B02F18()
{
  id v0;
  void *v1;
  id v2;
  void *v3;
  id v4;

  v0 = objc_allocWithZone(MEMORY[0x24BDBCF50]);
  v1 = (void *)sub_233B57F6C();
  v2 = objc_msgSend(v0, sel_initWithSuiteName_, v1);

  if (v2)
  {
    v3 = (void *)sub_233B57F18();
    swift_bridgeObjectRelease();
    v4 = (id)sub_233B57F6C();
    objc_msgSend(v2, sel_setObject_forKey_, v3, v4);

  }
  else
  {
    swift_bridgeObjectRelease();
  }
}

void (*CellularSettings.cellularData.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  CellularSettings.cellularData.getter((char *)(a1 + 8));
  return sub_233B0306C;
}

void sub_233B0306C(uint64_t a1, char a2)
{
  unsigned __int8 *v2;
  char v3;
  char v4;

  if ((a2 & 1) != 0)
  {
    v3 = *(_BYTE *)(a1 + 8);
    v2 = (unsigned __int8 *)&v3;
  }
  else
  {
    v4 = *(_BYTE *)(a1 + 8);
    v2 = (unsigned __int8 *)&v4;
  }
  CellularSettings.cellularData.setter(v2);
}

uint64_t sub_233B030B0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t result;
  int64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  int64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  int64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  _OWORD v32[2];
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  _OWORD v36[2];
  _OWORD v37[3];
  _OWORD v38[2];
  __int128 v39;
  _OWORD v40[2];

  if (*(_QWORD *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_256112BC8);
    v2 = sub_233B58344();
  }
  else
  {
    v2 = MEMORY[0x24BEE4B00];
  }
  v28 = a1 + 64;
  v3 = -1 << *(_BYTE *)(a1 + 32);
  if (-v3 < 64)
    v4 = ~(-1 << -(char)v3);
  else
    v4 = -1;
  v5 = v4 & *(_QWORD *)(a1 + 64);
  v27 = (unint64_t)(63 - v3) >> 6;
  v6 = v2 + 64;
  swift_bridgeObjectRetain();
  result = swift_retain();
  v8 = 0;
  while (1)
  {
    if (v5)
    {
      v11 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v12 = v11 | (v8 << 6);
      goto LABEL_28;
    }
    v13 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v13 >= v27)
      goto LABEL_37;
    v14 = *(_QWORD *)(v28 + 8 * v13);
    v15 = v8 + 1;
    if (!v14)
    {
      v15 = v8 + 2;
      if (v8 + 2 >= v27)
        goto LABEL_37;
      v14 = *(_QWORD *)(v28 + 8 * v15);
      if (!v14)
      {
        v15 = v8 + 3;
        if (v8 + 3 >= v27)
          goto LABEL_37;
        v14 = *(_QWORD *)(v28 + 8 * v15);
        if (!v14)
        {
          v15 = v8 + 4;
          if (v8 + 4 >= v27)
            goto LABEL_37;
          v14 = *(_QWORD *)(v28 + 8 * v15);
          if (!v14)
            break;
        }
      }
    }
LABEL_27:
    v5 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v15 << 6);
    v8 = v15;
LABEL_28:
    v17 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v12);
    v19 = *v17;
    v18 = v17[1];
    sub_233B03518(*(_QWORD *)(a1 + 56) + 32 * v12, (uint64_t)v40);
    *(_QWORD *)&v39 = v19;
    *((_QWORD *)&v39 + 1) = v18;
    v37[2] = v39;
    v38[0] = v40[0];
    v38[1] = v40[1];
    *(_QWORD *)&v37[0] = v19;
    *((_QWORD *)&v37[0] + 1) = v18;
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    sub_233B03554(v38, v32);
    v33 = v29;
    v34 = v30;
    v35 = v31;
    sub_233B03554(v32, v36);
    v29 = v33;
    v30 = v34;
    v31 = v35;
    sub_233B03554(v36, v37);
    sub_233B03554(v37, &v33);
    result = sub_233B58248();
    v20 = -1 << *(_BYTE *)(v2 + 32);
    v21 = result & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v6 + 8 * (v21 >> 6))) != 0)
    {
      v9 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v6 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v23 = 0;
      v24 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v25 = v22 == v24;
        if (v22 == v24)
          v22 = 0;
        v23 |= v25;
        v26 = *(_QWORD *)(v6 + 8 * v22);
      }
      while (v26 == -1);
      v9 = __clz(__rbit64(~v26)) + (v22 << 6);
    }
    *(_QWORD *)(v6 + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v9;
    v10 = *(_QWORD *)(v2 + 48) + 40 * v9;
    *(_OWORD *)v10 = v29;
    *(_OWORD *)(v10 + 16) = v30;
    *(_QWORD *)(v10 + 32) = v31;
    result = (uint64_t)sub_233B03554(&v33, (_OWORD *)(*(_QWORD *)(v2 + 56) + 32 * v9));
    ++*(_QWORD *)(v2 + 16);
  }
  v16 = v8 + 5;
  if (v8 + 5 >= v27)
  {
LABEL_37:
    swift_release();
    sub_233B04BE0();
    return v2;
  }
  v14 = *(_QWORD *)(v28 + 8 * v16);
  if (v14)
  {
    v15 = v8 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    v15 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v15 >= v27)
      goto LABEL_37;
    v14 = *(_QWORD *)(v28 + 8 * v15);
    ++v16;
    if (v14)
      goto LABEL_27;
  }
LABEL_39:
  __break(1u);
  return result;
}

unint64_t sub_233B03474(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_233B58248();
  return sub_233B036BC(a1, v2);
}

uint64_t sub_233B034A4(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x24BEE23D0] - 8) + 8))();
  return a1;
}

uint64_t sub_233B034D8(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_256112BA8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_233B03518(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

_OWORD *sub_233B03554(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

unint64_t sub_233B03564(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_233B58590();
  sub_233B57FCC();
  v4 = sub_233B585C0();
  return sub_233B03780(a1, a2, v4);
}

unint64_t sub_233B035C8(uint64_t a1)
{
  uint64_t v2;

  sub_233B582FC();
  v2 = sub_233B57F30();
  return sub_233B03860(a1, v2);
}

unint64_t sub_233B03618(uint64_t a1, uint64_t a2, char a3)
{
  char v6;
  uint64_t v7;

  v6 = a3 & 1;
  sub_233B58590();
  sub_233B5859C();
  if ((a3 & 1) != 0)
    sub_233B57FCC();
  else
    sub_233B585B4();
  v7 = sub_233B585C0();
  return sub_233B03988(a1, a2, v6, v7);
}

unint64_t sub_233B036BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  char v7;
  _BYTE v9[40];

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v6 = ~v3;
    do
    {
      sub_233B04BA4(*(_QWORD *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      v7 = MEMORY[0x23493CC2C](v9, a1);
      sub_233B034A4((uint64_t)v9);
      if ((v7 & 1) != 0)
        break;
      v4 = (v4 + 1) & v6;
    }
    while (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

unint64_t sub_233B03780(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (sub_233B584D0() & 1) == 0)
    {
      v12 = ~v5;
      do
      {
        v6 = (v6 + 1) & v12;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v13 = (_QWORD *)(v9 + 16 * v6);
        v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (sub_233B584D0() & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_233B03860(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, unint64_t, uint64_t);
  char v14;
  _QWORD v16[2];

  v3 = v2;
  v16[1] = a1;
  v5 = sub_233B582FC();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = -1 << *(_BYTE *)(v3 + 32);
  v10 = a2 & ~v9;
  if (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = ~v9;
    v12 = *(_QWORD *)(v6 + 72);
    v13 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    do
    {
      v13(v8, *(_QWORD *)(v3 + 48) + v12 * v10, v5);
      v14 = sub_233B57F48();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      if ((v14 & 1) != 0)
        break;
      v10 = (v10 + 1) & v11;
    }
    while (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
  }
  return v10;
}

unint64_t sub_233B03988(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  BOOL v15;

  v5 = v4 + 64;
  v6 = -1 << *(_BYTE *)(v4 + 32);
  v7 = a4 & ~v6;
  if (((*(_QWORD *)(v4 + 64 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) != 0)
  {
    v11 = ~v6;
    v12 = *(_QWORD *)(v4 + 48);
    do
    {
      v13 = (uint64_t *)(v12 + 24 * v7);
      v14 = *v13;
      if (*((_BYTE *)v13 + 16) == 1)
      {
        if ((a3 & 1) != 0)
        {
          v15 = v14 == a1 && v13[1] == a2;
          if (v15 || (sub_233B584D0() & 1) != 0)
            return v7;
        }
      }
      else if ((a3 & 1) == 0 && v14 == a1)
      {
        return v7;
      }
      v7 = (v7 + 1) & v11;
    }
    while (((*(_QWORD *)(v5 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) != 0);
  }
  return v7;
}

double sub_233B03A74@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v6;
  char v7;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  double result;
  uint64_t v11;

  v3 = v2;
  swift_bridgeObjectRetain();
  v6 = sub_233B03474(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if ((a1 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v9 = *v3;
    v11 = *v3;
    *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_233B49764();
      v9 = v11;
    }
    sub_233B034A4(*(_QWORD *)(v9 + 48) + 40 * v6);
    sub_233B03554((_OWORD *)(*(_QWORD *)(v9 + 56) + 32 * v6), a2);
    sub_233B03D44(v6, v9);
    *v3 = v9;
    swift_bridgeObjectRelease();
  }
  else
  {
    result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }
  return result;
}

double sub_233B03B5C@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v6;
  char v7;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double result;
  uint64_t v13;

  v3 = v2;
  swift_bridgeObjectRetain();
  v6 = sub_233B035C8(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if ((a1 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v9 = *v3;
    v13 = *v3;
    *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_233B49948();
      v9 = v13;
    }
    v10 = *(_QWORD *)(v9 + 48);
    v11 = sub_233B582FC();
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * v6, v11);
    sub_233B03554((_OWORD *)(*(_QWORD *)(v9 + 56) + 32 * v6), a2);
    sub_233B03F0C(v6, v9);
    *v3 = v9;
    swift_bridgeObjectRelease();
  }
  else
  {
    result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }
  return result;
}

uint64_t sub_233B03C58@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, _QWORD *a4@<X8>)
{
  uint64_t *v4;
  uint64_t *v5;
  char v9;
  unint64_t v10;
  char v11;
  uint64_t result;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v14;
  uint64_t v15;

  v5 = v4;
  v9 = a3 & 1;
  swift_bridgeObjectRetain();
  v10 = sub_233B03618(a1, a2, v9);
  LOBYTE(a2) = v11;
  result = swift_bridgeObjectRelease();
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v14 = *v5;
    v15 = *v5;
    *v5 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_233B49D44();
      v14 = v15;
    }
    sub_233B04B94(*(_QWORD *)(*(_QWORD *)(v14 + 48) + 24 * v10), *(_QWORD *)(*(_QWORD *)(v14 + 48) + 24 * v10 + 8), *(_BYTE *)(*(_QWORD *)(v14 + 48) + 24 * v10 + 16));
    *a4 = *(_QWORD *)(*(_QWORD *)(v14 + 56) + 8 * v10);
    sub_233B04190(v10, v14);
    *v5 = v14;
    return swift_bridgeObjectRelease();
  }
  else
  {
    *a4 = 0xF000000000000007;
  }
  return result;
}

unint64_t sub_233B03D44(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v14;
  unint64_t v15;
  __int128 *v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  _OWORD *v20;
  _OWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  _BYTE v28[40];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_233B5823C();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        sub_233B04BA4(*(_QWORD *)(a2 + 48) + 40 * v6, (uint64_t)v28);
        v10 = sub_233B58248();
        result = sub_233B034A4((uint64_t)v28);
        v11 = v10 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 >= v8 && v3 >= (uint64_t)v11)
          {
LABEL_16:
            v14 = *(_QWORD *)(a2 + 48);
            v15 = v14 + 40 * v3;
            v16 = (__int128 *)(v14 + 40 * v6);
            if (v3 != v6 || v15 >= (unint64_t)v16 + 40)
            {
              v17 = *v16;
              v18 = v16[1];
              *(_QWORD *)(v15 + 32) = *((_QWORD *)v16 + 4);
              *(_OWORD *)v15 = v17;
              *(_OWORD *)(v15 + 16) = v18;
            }
            v19 = *(_QWORD *)(a2 + 56);
            v20 = (_OWORD *)(v19 + 32 * v3);
            v21 = (_OWORD *)(v19 + 32 * v6);
            if (v3 != v6 || (v3 = v6, v20 >= v21 + 2))
            {
              v9 = v21[1];
              *v20 = *v21;
              v20[1] = v9;
              v3 = v6;
            }
          }
        }
        else if (v11 >= v8 || v3 >= (uint64_t)v11)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v22 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v23 = *v22;
    v24 = (-1 << v3) - 1;
  }
  else
  {
    v22 = (uint64_t *)(v4 + 8 * (result >> 6));
    v24 = *v22;
    v23 = (-1 << result) - 1;
  }
  *v22 = v24 & v23;
  v25 = *(_QWORD *)(a2 + 16);
  v26 = __OFSUB__(v25, 1);
  v27 = v25 - 1;
  if (v26)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v27;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_233B03F0C(int64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  _OWORD *v25;
  __int128 v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, unint64_t, uint64_t);
  unint64_t v35;
  uint64_t v36;

  v4 = sub_233B582FC();
  v36 = *(_QWORD *)(v4 - 8);
  result = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a2 + 64;
  v9 = -1 << *(_BYTE *)(a2 + 32);
  v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(_QWORD *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    v11 = ~v9;
    result = sub_233B5823C();
    if ((*(_QWORD *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      v35 = (result + 1) & v11;
      v12 = *(_QWORD *)(v36 + 72);
      v34 = *(void (**)(char *, unint64_t, uint64_t))(v36 + 16);
      v13 = v11;
      do
      {
        v14 = v8;
        v15 = v12;
        v16 = v12 * v10;
        v17 = v13;
        v34(v7, *(_QWORD *)(a2 + 48) + v12 * v10, v4);
        v18 = sub_233B57F30();
        result = (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v7, v4);
        v13 = v17;
        v19 = v18 & v17;
        if (a1 >= (uint64_t)v35)
        {
          if (v19 >= v35 && a1 >= (uint64_t)v19)
          {
LABEL_16:
            v22 = *(_QWORD *)(a2 + 48);
            result = v22 + v15 * a1;
            v8 = v14;
            if (v15 * a1 < v16 || (v12 = v15, result >= v22 + v16 + v15))
            {
              result = swift_arrayInitWithTakeFrontToBack();
LABEL_21:
              v12 = v15;
              v13 = v17;
            }
            else if (v15 * a1 != v16)
            {
              result = swift_arrayInitWithTakeBackToFront();
              goto LABEL_21;
            }
            v23 = *(_QWORD *)(a2 + 56);
            v24 = (_OWORD *)(v23 + 32 * a1);
            v25 = (_OWORD *)(v23 + 32 * v10);
            if (a1 != v10 || (a1 = v10, v24 >= v25 + 2))
            {
              v26 = v25[1];
              *v24 = *v25;
              v24[1] = v26;
              a1 = v10;
            }
            goto LABEL_5;
          }
        }
        else if (v19 >= v35 || a1 >= (uint64_t)v19)
        {
          goto LABEL_16;
        }
        v8 = v14;
        v12 = v15;
LABEL_5:
        v10 = (v10 + 1) & v13;
      }
      while (((*(_QWORD *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    v27 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v28 = *v27;
    v29 = (-1 << a1) - 1;
  }
  else
  {
    v27 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v29 = *v27;
    v28 = (-1 << a1) - 1;
  }
  *v27 = v29 & v28;
  v30 = *(_QWORD *)(a2 + 16);
  v31 = __OFSUB__(v30, 1);
  v32 = v30 - 1;
  if (v31)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v32;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_233B04190(unint64_t result, uint64_t a2)
{
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  __int128 *v20;
  __int128 v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;

  v2 = a2;
  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_233B5823C();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      v31 = v4;
      do
      {
        v9 = v8;
        v10 = 24 * v6;
        v11 = v2;
        v12 = *(_QWORD *)(v2 + 48) + 24 * v6;
        v14 = *(_QWORD *)v12;
        v13 = *(_QWORD *)(v12 + 8);
        v15 = *(unsigned __int8 *)(v12 + 16);
        sub_233B58590();
        sub_233B5859C();
        if (v15 == 1)
        {
          swift_bridgeObjectRetain();
          sub_233B57FCC();
        }
        else
        {
          sub_233B585B4();
        }
        v16 = sub_233B585C0();
        result = sub_233B04B94(v14, v13, v15);
        v17 = v16 & v7;
        v8 = v9;
        if (v3 >= v9)
        {
          v4 = v31;
          v2 = v11;
          if (v17 < v8)
            goto LABEL_5;
        }
        else
        {
          v4 = v31;
          v2 = v11;
          if (v17 >= v8)
            goto LABEL_14;
        }
        if (v3 >= (uint64_t)v17)
        {
LABEL_14:
          v18 = *(_QWORD *)(v2 + 48);
          v19 = v18 + 24 * v3;
          v20 = (__int128 *)(v18 + v10);
          if (24 * v3 < v10 || v19 >= (unint64_t)v20 + 24 || v3 != v6)
          {
            v21 = *v20;
            *(_QWORD *)(v19 + 16) = *((_QWORD *)v20 + 2);
            *(_OWORD *)v19 = v21;
          }
          v22 = *(_QWORD *)(v2 + 56);
          v23 = (_QWORD *)(v22 + 8 * v3);
          v24 = (_QWORD *)(v22 + 8 * v6);
          if (v3 != v6 || (v3 = v6, v23 >= v24 + 1))
          {
            *v23 = *v24;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v25 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v26 = *v25;
    v27 = (-1 << v3) - 1;
  }
  else
  {
    v25 = (uint64_t *)(v4 + 8 * (result >> 6));
    v27 = *v25;
    v26 = (-1 << result) - 1;
  }
  *v25 = v27 & v26;
  v28 = *(_QWORD *)(v2 + 16);
  v29 = __OFSUB__(v28, 1);
  v30 = v28 - 1;
  if (v29)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v2 + 16) = v30;
    ++*(_DWORD *)(v2 + 36);
  }
  return result;
}

_OWORD *sub_233B043E4(_OWORD *a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  _OWORD *v17;
  _OWORD *result;
  unint64_t v19;
  char v20;
  _BYTE v21[40];

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = sub_233B03474(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        v17 = (_OWORD *)(v16[7] + 32 * v10);
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v17);
        return sub_233B03554(a1, v17);
      }
      goto LABEL_11;
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_233B49764();
      goto LABEL_7;
    }
    sub_233B48A2C(v13, a3 & 1);
    v19 = sub_233B03474(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      v10 = v19;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_233B04BA4(a2, (uint64_t)v21);
      return sub_233B04A28(v10, (uint64_t)v21, a1, v16);
    }
  }
  result = (_OWORD *)sub_233B58548();
  __break(1u);
  return result;
}

unint64_t sub_233B04520()
{
  unint64_t result;

  result = qword_256112BB8;
  if (!qword_256112BB8)
  {
    result = MEMORY[0x23493D400](&protocol conformance descriptor for CellularSettings.Prompt, &type metadata for CellularSettings.Prompt);
    atomic_store(result, (unint64_t *)&qword_256112BB8);
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for CellularSettings(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for CellularSettings()
{
  return swift_bridgeObjectRelease();
}

_QWORD *assignWithCopy for CellularSettings(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

_QWORD *assignWithTake for CellularSettings(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for CellularSettings(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CellularSettings(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for CellularSettings()
{
  return &type metadata for CellularSettings;
}

uint64_t getEnumTagSinglePayload for CellularSettings.Prompt(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for CellularSettings.Prompt(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_233B04784 + 4 * byte_233B58CB5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_233B047B8 + 4 * byte_233B58CB0[v4]))();
}

uint64_t sub_233B047B8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_233B047C0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x233B047C8);
  return result;
}

uint64_t sub_233B047D4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x233B047DCLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_233B047E0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_233B047E8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_233B047F4(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_233B04800(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for CellularSettings.Prompt()
{
  return &type metadata for CellularSettings.Prompt;
}

void type metadata accessor for os_unfair_lock_s()
{
  unint64_t ForeignTypeMetadata;
  uint64_t v1;

  if (!qword_25424D640)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v1)
      atomic_store(ForeignTypeMetadata, (unint64_t *)&qword_25424D640);
  }
}

uint64_t sub_233B0486C(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if ((a3 & 1) != 0)
    return swift_bridgeObjectRetain();
  return result;
}

unint64_t sub_233B0487C(unint64_t result)
{
  switch(result >> 61)
  {
    case 0uLL:
    case 1uLL:
    case 2uLL:
    case 3uLL:
      result = swift_retain();
      break;
    default:
      return result;
  }
  return result;
}

_OWORD *sub_233B048AC(_OWORD *a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  _OWORD *v21;
  _OWORD *result;
  unint64_t v23;
  char v24;
  uint64_t v25;

  v4 = (_QWORD **)v3;
  v8 = sub_233B582FC();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)*v3;
  v14 = sub_233B035C8(a2);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
  }
  else
  {
    v18 = v13;
    v19 = v12[3];
    if (v19 >= v17 && (a3 & 1) != 0)
    {
LABEL_7:
      v20 = *v4;
      if ((v18 & 1) != 0)
      {
LABEL_8:
        v21 = (_OWORD *)(v20[7] + 32 * v14);
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v21);
        return sub_233B03554(a1, v21);
      }
      goto LABEL_11;
    }
    if (v19 >= v17 && (a3 & 1) == 0)
    {
      sub_233B49948();
      goto LABEL_7;
    }
    sub_233B48D40(v17, a3 & 1);
    v23 = sub_233B035C8(a2);
    if ((v18 & 1) == (v24 & 1))
    {
      v14 = v23;
      v20 = *v4;
      if ((v18 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
      return sub_233B04AA0(v14, (uint64_t)v11, a1, v20);
    }
  }
  result = (_OWORD *)sub_233B58548();
  __break(1u);
  return result;
}

_OWORD *sub_233B04A28(unint64_t a1, uint64_t a2, _OWORD *a3, _QWORD *a4)
{
  uint64_t v5;
  __int128 v6;
  _OWORD *result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v5 = a4[6] + 40 * a1;
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v5 = *(_OWORD *)a2;
  *(_OWORD *)(v5 + 16) = v6;
  *(_QWORD *)(v5 + 32) = *(_QWORD *)(a2 + 32);
  result = sub_233B03554(a3, (_OWORD *)(a4[7] + 32 * a1));
  v8 = a4[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a4[2] = v10;
  return result;
}

_OWORD *sub_233B04AA0(unint64_t a1, uint64_t a2, _OWORD *a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  _OWORD *result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = sub_233B582FC();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, a2, v9);
  result = sub_233B03554(a3, (_OWORD *)(a4[7] + 32 * a1));
  v11 = a4[2];
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  if (v12)
    __break(1u);
  else
    a4[2] = v13;
  return result;
}

unint64_t sub_233B04B40(unint64_t result, uint64_t a2, uint64_t a3, char a4, uint64_t a5, _QWORD *a6)
{
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;

  a6[(result >> 6) + 8] |= 1 << result;
  v6 = a6[6] + 24 * result;
  *(_QWORD *)v6 = a2;
  *(_QWORD *)(v6 + 8) = a3;
  *(_BYTE *)(v6 + 16) = a4 & 1;
  *(_QWORD *)(a6[7] + 8 * result) = a5;
  v7 = a6[2];
  v8 = __OFADD__(v7, 1);
  v9 = v7 + 1;
  if (v8)
    __break(1u);
  else
    a6[2] = v9;
  return result;
}

uint64_t sub_233B04B94(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if ((a3 & 1) != 0)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t sub_233B04BA4(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(MEMORY[0x24BEE23D0] - 8) + 16))(a2, a1);
  return a2;
}

uint64_t sub_233B04BE0()
{
  return swift_release();
}

uint64_t sub_233B04BE8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t ManagedApp.declarationIdentifier.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ManagedApp.itemID.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

uint64_t ManagedApp.externalVersionID.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 48);
}

void ManagedApp.platform.getter(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 64);
}

uint64_t ManagedApp.fileSize.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for ManagedApp();
  return sub_233B04BE8(v1 + *(int *)(v3 + 36), a1, &qword_256112BE8);
}

uint64_t type metadata accessor for ManagedApp()
{
  uint64_t result;

  result = qword_256112D58;
  if (!qword_256112D58)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t ManagedApp.metadataLanguage.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for ManagedApp();
  return sub_233B04BE8(v1 + *(int *)(v3 + 40), a1, &qword_256112BF0);
}

uint64_t ManagedApp.name.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for ManagedApp() + 44));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ManagedApp.subtitle.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for ManagedApp() + 48));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ManagedApp.seller.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for ManagedApp() + 52));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ManagedApp.genres.getter()
{
  type metadata accessor for ManagedApp();
  return swift_bridgeObjectRetain();
}

uint64_t ManagedApp.description.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for ManagedApp() + 60));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ManagedApp.languages.getter()
{
  type metadata accessor for ManagedApp();
  return swift_bridgeObjectRetain();
}

uint64_t ManagedApp.requirements.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for ManagedApp() + 68));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ManagedApp.version.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for ManagedApp() + 72));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ManagedApp.releaseDate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for ManagedApp();
  return sub_233B04BE8(v1 + *(int *)(v3 + 76), a1, &qword_256112BF8);
}

uint64_t ManagedApp.releaseNotes.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for ManagedApp() + 80));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ManagedApp.iconURL(fitting:)@<X0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[2];
  __int128 v20;

  v7 = type metadata accessor for ManagedApp();
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_25424D2A0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = v3 + *(int *)(v7 + 84);
  v14 = *(_QWORD *)(v13 + 8);
  if (v14)
  {
    v19[0] = *(_QWORD *)v13;
    v19[1] = v14;
    v20 = *(_OWORD *)(v13 + 16);
    swift_bridgeObjectRetain();
    sub_233B051B4(25719, 0xE200000000000000, 6778480, 0xE300000000000000, (uint64_t)v12, a2, a3);
    swift_bridgeObjectRelease();
  }
  else
  {
    v15 = sub_233B57DF8();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v12, 1, 1, v15);
  }
  sub_233B05134(v3, (uint64_t)v9);
  v16 = sub_233B57DF8();
  v17 = *(_QWORD *)(v16 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v12, 1, v16) == 1)
  {
    sub_233B04BE8((uint64_t)&v9[*(int *)(v7 + 88)], a1, &qword_25424D2A0);
    sub_233B05178((uint64_t)v9);
    return sub_233B08348((uint64_t)v12, &qword_25424D2A0);
  }
  else
  {
    sub_233B05178((uint64_t)v9);
    (*(void (**)(uint64_t, char *, uint64_t))(v17 + 32))(a1, v12, v16);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v17 + 56))(a1, 0, 1, v16);
  }
}

uint64_t sub_233B05134(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ManagedApp();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_233B05178(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ManagedApp();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_233B051B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, double a6@<D0>, double a7@<D1>)
{
  uint64_t *v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  void *v19;
  double v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD v28[8];
  double v29;
  uint64_t v30;

  v28[2] = a3;
  v28[3] = a4;
  v28[0] = a1;
  v28[1] = a2;
  v28[4] = a5;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_256112C00);
  v11 = *(_QWORD *)(v10 - 8);
  ((void (*)(void))MEMORY[0x24BDAC7A8])();
  v13 = (char *)v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *v7;
  v15 = v7[1];
  v17 = v7[2];
  v16 = v7[3];
  v18 = objc_msgSend((id)objc_opt_self(), sel_screenScale);
  if (v18)
  {
    v19 = v18;
    v29 = 0.0;
    LOBYTE(v30) = 1;
    MEMORY[0x23493C854](v18, &v29);

    if ((_BYTE)v30)
      v20 = 1.0;
    else
      v20 = v29;
  }
  else
  {
    v20 = 1.0;
  }
  v28[6] = v14;
  v28[7] = v15;
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_256112C08);
  v21 = sub_233B57E94();
  MEMORY[0x24BDAC7A8](v21);
  *(double *)&v28[-12] = a6;
  *(double *)&v28[-11] = a7;
  *(double *)&v28[-10] = v20;
  v28[-9] = v14;
  v28[-8] = v15;
  v28[-7] = v17;
  v28[-6] = v16;
  v28[-5] = v28[0];
  v22 = sub_233B0601C();
  v23 = sub_233B06060();
  v27 = sub_233B083C8(&qword_256112C20, &qword_256112C00, MEMORY[0x24BEE7460]);
  v25 = v22;
  v26 = v23;
  sub_233B581A0();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  swift_bridgeObjectRelease();
  sub_233B57DE0();
  return swift_bridgeObjectRelease();
}

unint64_t ManagedApp.screenshotURLs(fitting:)(double a1, double a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  double v25;
  void *v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t, uint64_t);
  char *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  _QWORD v44[2];
  char *v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  double v59;
  uint64_t v60;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256112C00);
  v52 = *(_QWORD *)(v5 - 8);
  v53 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v51 = (char *)v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_25424D2A0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_233B57DF8();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v50 = (char *)v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v45 = (char *)v44 - v14;
  v15 = *(_QWORD *)(v2 + *(int *)(type metadata accessor for ManagedApp() + 92));
  v16 = *(_QWORD *)(v15 + 16);
  if (!v16)
    return MEMORY[0x24BEE4AF8];
  v46 = (id)objc_opt_self();
  swift_bridgeObjectRetain_n();
  v17 = 0;
  v44[1] = v15;
  v18 = (uint64_t *)(v15 + 56);
  v19 = MEMORY[0x24BEE4AF8];
  v48 = v10;
  v49 = v9;
  v47 = v11;
  do
  {
    v54 = v17;
    v55 = v19;
    v56 = v16;
    v20 = *(v18 - 3);
    v21 = *(v18 - 2);
    v23 = *(v18 - 1);
    v22 = *v18;
    swift_bridgeObjectRetain();
    v24 = objc_msgSend(v46, sel_screenScale);
    v25 = 1.0;
    if (v24)
    {
      v26 = v24;
      v59 = 0.0;
      LOBYTE(v60) = 1;
      MEMORY[0x23493C854](v24, &v59);

      if ((_BYTE)v60)
        v25 = 1.0;
      else
        v25 = v59;
    }
    v57 = v20;
    v58 = v21;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&qword_256112C08);
    v27 = v51;
    v28 = sub_233B57E94();
    MEMORY[0x24BDAC7A8](v28);
    *(double *)&v44[-12] = a1;
    *(double *)&v44[-11] = a2;
    *(double *)&v44[-10] = v25;
    v44[-9] = v20;
    v44[-8] = v21;
    v44[-7] = v23;
    v44[-6] = v22;
    v44[-5] = 25186;
    v29 = sub_233B0601C();
    v30 = sub_233B06060();
    v31 = sub_233B083C8(&qword_256112C20, &qword_256112C00, MEMORY[0x24BEE7460]);
    v42 = v30;
    v43 = v31;
    v41 = v29;
    v32 = v53;
    v17 = v54;
    sub_233B581A0();
    (*(void (**)(char *, uint64_t))(v52 + 8))(v27, v32);
    swift_bridgeObjectRelease();
    v33 = (uint64_t)v49;
    sub_233B57DE0();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v35 = v47;
    v34 = v48;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v47 + 48))(v33, 1, v48) == 1)
    {
      sub_233B08348(v33, &qword_25424D2A0);
      v19 = v55;
    }
    else
    {
      v36 = *(void (**)(char *, uint64_t, uint64_t))(v35 + 32);
      v37 = v45;
      v36(v45, v33, v34);
      v36(v50, (uint64_t)v37, v34);
      v19 = v55;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v19 = sub_233B07F84(0, *(_QWORD *)(v19 + 16) + 1, 1, v19);
      v39 = *(_QWORD *)(v19 + 16);
      v38 = *(_QWORD *)(v19 + 24);
      if (v39 >= v38 >> 1)
        v19 = sub_233B07F84(v38 > 1, v39 + 1, 1, v19);
      *(_QWORD *)(v19 + 16) = v39 + 1;
      v36((char *)(v19+ ((*(unsigned __int8 *)(v35 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80))+ *(_QWORD *)(v35 + 72) * v39), (uint64_t)v50, v34);
    }
    v18 += 4;
    v16 = v56 - 1;
  }
  while (v56 != 1);
  swift_bridgeObjectRelease_n();
  return v19;
}

uint64_t ManagedApp.contentRating.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for ManagedApp() + 96));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ManagedApp.developerWebsite.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for ManagedApp();
  return sub_233B04BE8(v1 + *(int *)(v3 + 100), a1, &qword_25424D2A0);
}

uint64_t ManagedApp.privacyPolicy.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for ManagedApp();
  return sub_233B04BE8(v1 + *(int *)(v3 + 104), a1, &qword_25424D2A0);
}

uint64_t ManagedApp.licenseAgreement.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  if (*(_BYTE *)(v1 + *(int *)(type metadata accessor for ManagedApp() + 108)) == 1 && (*(_BYTE *)(v1 + 40) & 1) == 0)
  {
    sub_233B5829C();
    sub_233B57FD8();
    sub_233B584AC();
    sub_233B57FD8();
    swift_bridgeObjectRelease();
    sub_233B57DE0();
    return swift_bridgeObjectRelease();
  }
  else
  {
    v3 = sub_233B57DF8();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(a1, 1, 1, v3);
  }
}

uint64_t ManagedApp.copyright.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for ManagedApp() + 112));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ManagedApp.buyParams.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for ManagedApp() + 116));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ManagedApp.init(declarationIdentifier:bundleID:itemID:externalVersionID:platform:fileSize:metadataLanguage:name:subtitle:seller:genres:description:languages:requirements:version:releaseDate:releaseNotes:icon:iconURL:screenshots:contentRating:developerWebsite:privacyPolicy:hasLicenseAgreement:copyright:buyParams:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, _QWORD *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,__int128 *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41)
{
  int *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t result;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;

  *(_QWORD *)a9 = a1;
  *(_QWORD *)(a9 + 8) = a2;
  *(_QWORD *)(a9 + 16) = a3;
  *(_QWORD *)(a9 + 24) = a4;
  *(_QWORD *)(a9 + 32) = a5;
  *(_BYTE *)(a9 + 40) = a6 & 1;
  *(_QWORD *)(a9 + 48) = a7;
  *(_BYTE *)(a9 + 56) = a8 & 1;
  v56 = *a30;
  *(_QWORD *)(a9 + 64) = *a10;
  v55 = *((_QWORD *)a30 + 2);
  v57 = *((_QWORD *)a30 + 3);
  v42 = (int *)type metadata accessor for ManagedApp();
  sub_233B0818C(a11, a9 + v42[9], &qword_256112BE8);
  sub_233B0818C(a12, a9 + v42[10], &qword_256112BF0);
  v43 = (_QWORD *)(a9 + v42[11]);
  *v43 = a13;
  v43[1] = a14;
  v44 = (_QWORD *)(a9 + v42[12]);
  *v44 = a15;
  v44[1] = a16;
  v45 = (_QWORD *)(a9 + v42[13]);
  *v45 = a17;
  v45[1] = a18;
  *(_QWORD *)(a9 + v42[14]) = a19;
  v46 = (_QWORD *)(a9 + v42[15]);
  *v46 = a20;
  v46[1] = a21;
  *(_QWORD *)(a9 + v42[16]) = a22;
  v47 = (_QWORD *)(a9 + v42[17]);
  *v47 = a23;
  v47[1] = a24;
  v48 = (_QWORD *)(a9 + v42[18]);
  *v48 = a25;
  v48[1] = a26;
  sub_233B0818C(a27, a9 + v42[19], &qword_256112BF8);
  v49 = (_QWORD *)(a9 + v42[20]);
  *v49 = a28;
  v49[1] = a29;
  v50 = a9 + v42[21];
  *(_OWORD *)v50 = v56;
  *(_QWORD *)(v50 + 16) = v55;
  *(_QWORD *)(v50 + 24) = v57;
  sub_233B0818C(a31, a9 + v42[22], &qword_25424D2A0);
  *(_QWORD *)(a9 + v42[23]) = a32;
  v51 = (_QWORD *)(a9 + v42[24]);
  *v51 = a33;
  v51[1] = a34;
  sub_233B0818C(a35, a9 + v42[25], &qword_25424D2A0);
  result = sub_233B0818C(a36, a9 + v42[26], &qword_25424D2A0);
  *(_BYTE *)(a9 + v42[27]) = a37;
  v53 = (_QWORD *)(a9 + v42[28]);
  *v53 = a38;
  v53[1] = a39;
  v54 = (_QWORD *)(a9 + v42[29]);
  *v54 = a40;
  v54[1] = a41;
  return result;
}

uint64_t ManagedApp.Artwork.init(urlTemplate:maxWidth:maxHeight:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  *a5 = result;
  a5[1] = a2;
  a5[2] = a3;
  a5[3] = a4;
  return result;
}

uint64_t sub_233B05D54@<X0>(uint64_t a1@<X5>, unint64_t a2@<X6>, uint64_t a3@<X7>, _QWORD *a4@<X8>, double a5@<D0>, double a6@<D1>, double a7@<D2>, unint64_t a8)
{
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  uint64_t result;
  char v21;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;

  __swift_instantiateConcreteTypeFromMangledName(&qword_256112E48);
  sub_233B57EA0();
  swift_bridgeObjectRelease();
  if ((sub_233B0B054(119, 0xE100000000000000, v23, v24, v25, v26) & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v14 = floor(a5 * a7);
    v15 = ceil(a5 * a7);
    if (COERCE__INT64(a5 * a7) >= 0)
      v16 = v15;
    else
      v16 = v14;
    if ((~*(_QWORD *)&v16 & 0x7FF0000000000000) != 0)
    {
      if (v16 > -9.22337204e18)
      {
        if (v16 < 9.22337204e18)
          goto LABEL_16;
        goto LABEL_24;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if ((sub_233B0B054(104, 0xE100000000000000, v23, v24, v25, v26) & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v17 = floor(a6 * a7);
    v18 = ceil(a6 * a7);
    if (COERCE__INT64(a6 * a7) >= 0)
      v19 = v18;
    else
      v19 = v17;
    if ((~*(_QWORD *)&v19 & 0x7FF0000000000000) != 0)
    {
      if (v19 > -9.22337204e18)
      {
        if (v19 < 9.22337204e18)
        {
LABEL_16:
          sub_233B584AC();
          sub_233B57FD8();
          result = swift_bridgeObjectRelease();
          a1 = 0;
          a2 = 0xE000000000000000;
LABEL_17:
          *a4 = a1;
          a4[1] = a2;
          return result;
        }
        goto LABEL_27;
      }
LABEL_26:
      __break(1u);
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  if ((sub_233B0B054(99, 0xE100000000000000, v23, v24, v25, v26) & 1) != 0)
  {
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRetain();
    goto LABEL_17;
  }
  v21 = sub_233B0B054(102, 0xE100000000000000, v23, v24, v25, v26);
  swift_bridgeObjectRelease();
  if ((v21 & 1) != 0)
  {
    a2 = a8;
    result = swift_bridgeObjectRetain();
    a1 = a3;
    goto LABEL_17;
  }
LABEL_28:
  result = sub_233B58314();
  __break(1u);
  return result;
}

uint64_t sub_233B06008@<X0>(_QWORD *a1@<X8>)
{
  return sub_233B0BDD8(a1);
}

unint64_t sub_233B0601C()
{
  unint64_t result;

  result = qword_256112C10;
  if (!qword_256112C10)
  {
    result = MEMORY[0x23493D400](MEMORY[0x24BEE0D48], MEMORY[0x24BEE0D00]);
    atomic_store(result, (unint64_t *)&qword_256112C10);
  }
  return result;
}

unint64_t sub_233B06060()
{
  unint64_t result;

  result = qword_256112C18;
  if (!qword_256112C18)
  {
    result = MEMORY[0x23493D400](MEMORY[0x24BEE0D40], MEMORY[0x24BEE0D00]);
    atomic_store(result, (unint64_t *)&qword_256112C18);
  }
  return result;
}

uint64_t sub_233B060AC()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x687464695778616DLL;
  if (*v0 != 1)
    v1 = 0x686769654878616DLL;
  if (*v0)
    return v1;
  else
    return 0x6C706D65546C7275;
}

uint64_t sub_233B06114@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_233B0B0BC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_233B06138()
{
  return 0;
}

void sub_233B06144(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_233B06150()
{
  sub_233B081D0();
  return sub_233B58638();
}

uint64_t sub_233B06178()
{
  sub_233B081D0();
  return sub_233B58644();
}

uint64_t ManagedApp.Artwork.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[4];
  char v11;
  char v12;
  char v13;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256112C28);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(v1 + 16);
  v10[1] = *(_QWORD *)(v1 + 24);
  v10[2] = v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_233B081D0();
  sub_233B5862C();
  v13 = 0;
  v8 = v10[3];
  sub_233B5844C();
  if (!v8)
  {
    v12 = 1;
    sub_233B58470();
    v11 = 2;
    sub_233B58470();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t ManagedApp.Artwork.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  char v18;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256112C38);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_233B081D0();
  sub_233B58608();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  v18 = 0;
  v9 = sub_233B583B0();
  v11 = v10;
  v17 = 1;
  swift_bridgeObjectRetain();
  v15 = sub_233B583D4();
  v16 = 2;
  v13 = sub_233B583D4();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  *a2 = v9;
  a2[1] = v11;
  a2[2] = v15;
  a2[3] = v13;
  __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  return swift_bridgeObjectRelease();
}

uint64_t sub_233B064A8(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_233B064E8 + 4 * byte_233B58DE0[a1]))(0xD000000000000015, 0x8000000233B611C0);
}

uint64_t sub_233B064E8()
{
  return 0x4449656C646E7562;
}

uint64_t sub_233B06500()
{
  return 0x44496D657469;
}

uint64_t sub_233B06514()
{
  uint64_t v0;

  return v0 + 1;
}

uint64_t sub_233B06720()
{
  return 0x6867697279706F63;
}

uint64_t sub_233B0675C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return ManagedApp.Artwork.init(from:)(a1, a2);
}

uint64_t sub_233B06770(_QWORD *a1)
{
  return ManagedApp.Artwork.encode(to:)(a1);
}

BOOL sub_233B06784(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t _s22ManagedAppDistribution0aB11DeclarationV15InstallBehaviorV0E10TimingEnumO9hashValueSivg_0()
{
  sub_233B58590();
  sub_233B5859C();
  return sub_233B585C0();
}

uint64_t sub_233B067DC()
{
  return sub_233B5859C();
}

uint64_t sub_233B06804()
{
  sub_233B58590();
  sub_233B5859C();
  return sub_233B585C0();
}

uint64_t sub_233B06844()
{
  unsigned __int8 *v0;

  return sub_233B064A8(*v0);
}

uint64_t sub_233B0684C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_233B0B234(a1, a2);
  *a3 = result;
  return result;
}

void sub_233B06870(_BYTE *a1@<X8>)
{
  *a1 = 26;
}

uint64_t sub_233B0687C()
{
  sub_233B08214();
  return sub_233B58638();
}

uint64_t sub_233B068A4()
{
  sub_233B08214();
  return sub_233B58644();
}

uint64_t ManagedApp.id.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_233B068F8@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 24);
  *a1 = *(_QWORD *)(v1 + 16);
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t ManagedApp.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int *v9;
  _OWORD *v10;
  __int128 v11;
  _OWORD v13[2];
  char v14;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256112C40);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_233B08214();
  sub_233B5862C();
  LOBYTE(v13[0]) = 0;
  sub_233B5844C();
  if (!v2)
  {
    LOBYTE(v13[0]) = 1;
    sub_233B5844C();
    LOBYTE(v13[0]) = 2;
    sub_233B58440();
    LOBYTE(v13[0]) = 3;
    sub_233B58440();
    *(_QWORD *)&v13[0] = *(_QWORD *)(v3 + 64);
    v14 = 4;
    sub_233B08258();
    sub_233B5847C();
    v9 = (int *)type metadata accessor for ManagedApp();
    LOBYTE(v13[0]) = 5;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256112C58);
    sub_233B083C8(&qword_256112C60, &qword_256112C58, MEMORY[0x24BDCB5A8]);
    sub_233B58434();
    LOBYTE(v13[0]) = 6;
    sub_233B57E64();
    sub_233B08530(&qword_256112C68, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEE28], MEMORY[0x24BDCEE38]);
    sub_233B58434();
    LOBYTE(v13[0]) = 7;
    sub_233B5844C();
    LOBYTE(v13[0]) = 8;
    sub_233B5841C();
    LOBYTE(v13[0]) = 9;
    sub_233B5841C();
    *(_QWORD *)&v13[0] = *(_QWORD *)(v3 + v9[14]);
    v14 = 10;
    __swift_instantiateConcreteTypeFromMangledName(&qword_25424CF18);
    sub_233B08408(&qword_256112C70, MEMORY[0x24BEE0D08], MEMORY[0x24BEE12A0]);
    sub_233B5847C();
    LOBYTE(v13[0]) = 11;
    sub_233B5841C();
    *(_QWORD *)&v13[0] = *(_QWORD *)(v3 + v9[16]);
    v14 = 12;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256112C78);
    sub_233B08468(&qword_256112C80, &qword_256112C68, MEMORY[0x24BDCEE38], MEMORY[0x24BEE12A0]);
    sub_233B5847C();
    LOBYTE(v13[0]) = 13;
    sub_233B5841C();
    LOBYTE(v13[0]) = 14;
    sub_233B5841C();
    LOBYTE(v13[0]) = 15;
    sub_233B57E28();
    sub_233B08530(&qword_256112C88, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE920]);
    sub_233B58434();
    LOBYTE(v13[0]) = 16;
    sub_233B5841C();
    v10 = (_OWORD *)(v3 + v9[21]);
    v11 = v10[1];
    v13[0] = *v10;
    v13[1] = v11;
    v14 = 17;
    sub_233B0829C();
    sub_233B58434();
    LOBYTE(v13[0]) = 18;
    sub_233B57DF8();
    sub_233B08530(&qword_256112C98, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDAE0]);
    sub_233B58434();
    *(_QWORD *)&v13[0] = *(_QWORD *)(v3 + v9[23]);
    v14 = 19;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256112CA0);
    sub_233B082E0(&qword_256112CA8, (uint64_t (*)(void))sub_233B0829C, MEMORY[0x24BEE12A0]);
    sub_233B5847C();
    LOBYTE(v13[0]) = 20;
    sub_233B5841C();
    LOBYTE(v13[0]) = 21;
    sub_233B58434();
    LOBYTE(v13[0]) = 22;
    sub_233B58434();
    LOBYTE(v13[0]) = 23;
    sub_233B58458();
    LOBYTE(v13[0]) = 24;
    sub_233B5841C();
    LOBYTE(v13[0]) = 25;
    sub_233B5841C();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t ManagedApp.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char v32;
  uint64_t v33;
  int *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  _OWORD *v56;
  __int128 v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  char *v74;
  char *v75;
  _QWORD *v76;
  uint64_t *v77;
  int *v78;
  __int128 v79;
  __int128 v80;
  char v81;

  v70 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_25424D2A0);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v71 = (uint64_t)&v69 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v72 = (char *)&v69 - v7;
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v69 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_256112BF8);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v69 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_256112BF0);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v69 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_256112BE8);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v69 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = __swift_instantiateConcreteTypeFromMangledName(&qword_256112CB0);
  v19 = *(_QWORD *)(v73 - 8);
  MEMORY[0x24BDAC7A8](v73);
  v21 = (char *)&v69 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = (int *)type metadata accessor for ManagedApp();
  MEMORY[0x24BDAC7A8](v78);
  v76 = a1;
  v77 = (uint64_t *)((char *)&v69 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_233B08214();
  v74 = v21;
  v23 = (uint64_t)v75;
  sub_233B58608();
  if (v23)
    return __swift_destroy_boxed_opaque_existential_0((uint64_t)v76);
  v25 = v15;
  v75 = v12;
  LOBYTE(v79) = 0;
  v26 = (uint64_t)v72;
  v27 = sub_233B583B0();
  v28 = v77;
  *v77 = v27;
  v28[1] = v29;
  LOBYTE(v79) = 1;
  v28[2] = sub_233B583B0();
  v28[3] = v30;
  LOBYTE(v79) = 2;
  v28[4] = sub_233B583A4();
  *((_BYTE *)v28 + 40) = v31 & 1;
  LOBYTE(v79) = 3;
  v28[6] = sub_233B583A4();
  *((_BYTE *)v28 + 56) = v32 & 1;
  v81 = 4;
  sub_233B08384();
  sub_233B583E0();
  v28[8] = v79;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256112C58);
  LOBYTE(v79) = 5;
  sub_233B083C8(&qword_256112CC0, &qword_256112C58, MEMORY[0x24BDCB5D8]);
  sub_233B58398();
  sub_233B0818C((uint64_t)v18, (uint64_t)v28 + v78[9], &qword_256112BE8);
  sub_233B57E64();
  LOBYTE(v79) = 6;
  sub_233B08530(&qword_256112CC8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEE28], MEMORY[0x24BDCEE48]);
  v33 = (uint64_t)v25;
  sub_233B58398();
  v34 = v78;
  sub_233B0818C(v33, (uint64_t)v28 + v78[10], &qword_256112BF0);
  LOBYTE(v79) = 7;
  v35 = sub_233B583B0();
  v69 = v19;
  v36 = (uint64_t *)((char *)v28 + v34[11]);
  *v36 = v35;
  v36[1] = v37;
  LOBYTE(v79) = 8;
  v38 = sub_233B58380();
  v39 = (uint64_t *)((char *)v28 + v78[12]);
  *v39 = v38;
  v39[1] = v40;
  LOBYTE(v79) = 9;
  v41 = sub_233B58380();
  v42 = (uint64_t *)((char *)v77 + v78[13]);
  *v42 = v41;
  v42[1] = v43;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25424CF18);
  v81 = 10;
  sub_233B08408(&qword_256112CD0, MEMORY[0x24BEE0D38], MEMORY[0x24BEE12D0]);
  sub_233B583E0();
  *(uint64_t *)((char *)v77 + v78[14]) = v79;
  LOBYTE(v79) = 11;
  v44 = sub_233B58380();
  v45 = (uint64_t *)((char *)v77 + v78[15]);
  *v45 = v44;
  v45[1] = v46;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256112C78);
  v81 = 12;
  sub_233B08468(&qword_256112CD8, &qword_256112CC8, MEMORY[0x24BDCEE48], MEMORY[0x24BEE12D0]);
  sub_233B583E0();
  *(uint64_t *)((char *)v77 + v78[16]) = v79;
  LOBYTE(v79) = 13;
  v47 = sub_233B58380();
  v48 = (uint64_t *)((char *)v77 + v78[17]);
  *v48 = v47;
  v48[1] = v49;
  LOBYTE(v79) = 14;
  v50 = sub_233B58380();
  v51 = (uint64_t *)((char *)v77 + v78[18]);
  *v51 = v50;
  v51[1] = v52;
  sub_233B57E28();
  LOBYTE(v79) = 15;
  sub_233B08530(&qword_256112CE0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE960]);
  sub_233B58398();
  sub_233B0818C((uint64_t)v75, (uint64_t)v77 + v78[19], &qword_256112BF8);
  LOBYTE(v79) = 16;
  v53 = sub_233B58380();
  v54 = (uint64_t *)((char *)v77 + v78[20]);
  *v54 = v53;
  v54[1] = v55;
  v81 = 17;
  sub_233B084EC();
  sub_233B58398();
  v56 = (_OWORD *)((char *)v77 + v78[21]);
  v57 = v80;
  *v56 = v79;
  v56[1] = v57;
  sub_233B57DF8();
  LOBYTE(v79) = 18;
  sub_233B08530(&qword_256112CF0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDB10]);
  sub_233B58398();
  sub_233B0818C((uint64_t)v9, (uint64_t)v77 + v78[22], &qword_25424D2A0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256112CA0);
  v81 = 19;
  sub_233B082E0(&qword_256112CF8, (uint64_t (*)(void))sub_233B084EC, MEMORY[0x24BEE12D0]);
  sub_233B583E0();
  *(uint64_t *)((char *)v77 + v78[23]) = v79;
  LOBYTE(v79) = 20;
  v58 = sub_233B58380();
  v59 = (uint64_t *)((char *)v77 + v78[24]);
  *v59 = v58;
  v59[1] = v60;
  LOBYTE(v79) = 21;
  sub_233B58398();
  sub_233B0818C(v26, (uint64_t)v77 + v78[25], &qword_25424D2A0);
  LOBYTE(v79) = 22;
  sub_233B58398();
  sub_233B0818C(v71, (uint64_t)v77 + v78[26], &qword_25424D2A0);
  LOBYTE(v79) = 23;
  *((_BYTE *)v77 + v78[27]) = sub_233B583BC() & 1;
  LOBYTE(v79) = 24;
  v61 = sub_233B58380();
  v62 = (uint64_t *)((char *)v77 + v78[28]);
  *v62 = v61;
  v62[1] = v63;
  LOBYTE(v79) = 25;
  v64 = sub_233B58380();
  v66 = v65;
  (*(void (**)(char *, uint64_t))(v19 + 8))(v74, v73);
  v67 = (uint64_t)v77;
  v68 = (uint64_t *)((char *)v77 + v78[29]);
  *v68 = v64;
  v68[1] = v66;
  sub_233B05134(v67, v70);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v76);
  return sub_233B05178(v67);
}

uint64_t sub_233B07F5C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ManagedApp.init(from:)(a1, a2);
}

uint64_t sub_233B07F70(_QWORD *a1)
{
  return ManagedApp.encode(to:)(a1);
}

uint64_t sub_233B07F84(char a1, int64_t a2, char a3, unint64_t a4)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  size_t v14;
  BOOL v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (!v9)
  {
    v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_256112E40);
  v10 = *(_QWORD *)(sub_233B57DF8() - 8);
  v11 = *(_QWORD *)(v10 + 72);
  v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v13 = (_QWORD *)swift_allocObject();
  v14 = _swift_stdlib_malloc_size(v13);
  if (!v11 || (v14 - v12 == 0x8000000000000000 ? (v15 = v11 == -1) : (v15 = 0), v15))
  {
LABEL_29:
    result = sub_233B58308();
    __break(1u);
    return result;
  }
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  v16 = *(_QWORD *)(sub_233B57DF8() - 8);
  v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  v18 = (unint64_t)v13 + v17;
  if ((a1 & 1) != 0)
  {
    if ((unint64_t)v13 < a4 || v18 >= a4 + v17 + *(_QWORD *)(v16 + 72) * v8)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_233B0AF3C(0, v8, v18, a4);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v13;
}

uint64_t sub_233B0818C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

unint64_t sub_233B081D0()
{
  unint64_t result;

  result = qword_256112C30;
  if (!qword_256112C30)
  {
    result = MEMORY[0x23493D400](&unk_233B591F4, &type metadata for ManagedApp.Artwork.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256112C30);
  }
  return result;
}

unint64_t sub_233B08214()
{
  unint64_t result;

  result = qword_256112C48;
  if (!qword_256112C48)
  {
    result = MEMORY[0x23493D400](&unk_233B591A4, &type metadata for ManagedApp.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256112C48);
  }
  return result;
}

unint64_t sub_233B08258()
{
  unint64_t result;

  result = qword_256112C50;
  if (!qword_256112C50)
  {
    result = MEMORY[0x23493D400](&protocol conformance descriptor for Platform, &type metadata for Platform);
    atomic_store(result, (unint64_t *)&qword_256112C50);
  }
  return result;
}

unint64_t sub_233B0829C()
{
  unint64_t result;

  result = qword_256112C90;
  if (!qword_256112C90)
  {
    result = MEMORY[0x23493D400](&protocol conformance descriptor for ManagedApp.Artwork, &type metadata for ManagedApp.Artwork);
    atomic_store(result, (unint64_t *)&qword_256112C90);
  }
  return result;
}

uint64_t sub_233B082E0(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256112CA0);
    v8 = a2();
    result = MEMORY[0x23493D400](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_233B08348(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t sub_233B08384()
{
  unint64_t result;

  result = qword_256112CB8;
  if (!qword_256112CB8)
  {
    result = MEMORY[0x23493D400](&protocol conformance descriptor for Platform, &type metadata for Platform);
    atomic_store(result, (unint64_t *)&qword_256112CB8);
  }
  return result;
}

uint64_t sub_233B083C8(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x23493D400](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_233B08408(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25424CF18);
    v8 = a2;
    result = MEMORY[0x23493D400](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_233B08468(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  result = *a1;
  if (!result)
  {
    v9 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256112C78);
    v10 = sub_233B08530(a2, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEE28], a3);
    result = MEMORY[0x23493D400](a4, v9, &v10);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_233B084EC()
{
  unint64_t result;

  result = qword_256112CE8;
  if (!qword_256112CE8)
  {
    result = MEMORY[0x23493D400](&protocol conformance descriptor for ManagedApp.Artwork, &type metadata for ManagedApp.Artwork);
    atomic_store(result, (unint64_t *)&qword_256112CE8);
  }
  return result;
}

uint64_t sub_233B08530(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = MEMORY[0x23493D400](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_233B08570()
{
  return MEMORY[0x24BEE0D10];
}

uint64_t initializeBufferWithCopyOfBuffer for ManagedApp(uint64_t a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int (*v63)(const void *, uint64_t, uint64_t);
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v86;
  char *v87;
  unsigned int (*v88)(const void *, uint64_t, uint64_t);
  uint64_t v89;
  uint64_t v90;
  void *__dst;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v16 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    v8 = a2[2];
    v9 = a2[4];
    *(_QWORD *)(a1 + 24) = a2[3];
    *(_QWORD *)(a1 + 32) = v9;
    *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
    *(_QWORD *)(a1 + 48) = a2[6];
    *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
    *(_QWORD *)(a1 + 64) = a2[8];
    v10 = a3[9];
    v11 = (void *)(a1 + v10);
    v12 = (char *)a2 + v10;
    *(_QWORD *)(a1 + 16) = v8;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_256112C58);
    v14 = *(_QWORD *)(v13 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
    {
      v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_256112BE8);
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v14 + 16))(v11, v12, v13);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
    }
    v17 = a3[10];
    v18 = (void *)(a1 + v17);
    v19 = (char *)a2 + v17;
    v20 = sub_233B57E64();
    v21 = *(_QWORD *)(v20 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
    {
      v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_256112BF0);
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v21 + 16))(v18, v19, v20);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
    }
    v23 = a3[11];
    v24 = a3[12];
    v25 = (_QWORD *)(a1 + v23);
    v26 = (uint64_t *)((char *)a2 + v23);
    v89 = v26[1];
    *v25 = *v26;
    v25[1] = v89;
    v27 = (_QWORD *)(a1 + v24);
    v28 = (uint64_t *)((char *)a2 + v24);
    v90 = v28[1];
    *v27 = *v28;
    v27[1] = v90;
    v29 = a3[13];
    v30 = a3[14];
    v31 = (_QWORD *)(a1 + v29);
    v32 = (uint64_t *)((char *)a2 + v29);
    v33 = v32[1];
    *v31 = *v32;
    v31[1] = v33;
    *(_QWORD *)(a1 + v30) = *(uint64_t *)((char *)a2 + v30);
    v34 = a3[15];
    v35 = a3[16];
    v36 = (_QWORD *)(a1 + v34);
    v37 = (uint64_t *)((char *)a2 + v34);
    v38 = v37[1];
    *v36 = *v37;
    v36[1] = v38;
    *(_QWORD *)(a1 + v35) = *(uint64_t *)((char *)a2 + v35);
    v39 = a3[17];
    v40 = a3[18];
    v41 = (_QWORD *)(a1 + v39);
    v42 = (uint64_t *)((char *)a2 + v39);
    v43 = v42[1];
    *v41 = *v42;
    v41[1] = v43;
    v44 = (_QWORD *)(a1 + v40);
    v45 = (uint64_t *)((char *)a2 + v40);
    v46 = v45[1];
    *v44 = *v45;
    v44[1] = v46;
    v47 = a3[19];
    __dst = (void *)(a1 + v47);
    v87 = (char *)a2 + v47;
    v48 = sub_233B57E28();
    v86 = *(_QWORD *)(v48 - 8);
    v88 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v86 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v88(v87, 1, v48))
    {
      v49 = __swift_instantiateConcreteTypeFromMangledName(&qword_256112BF8);
      memcpy(__dst, v87, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v86 + 16))(__dst, v87, v48);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v86 + 56))(__dst, 0, 1, v48);
    }
    v50 = a3[20];
    v51 = a3[21];
    v52 = (_QWORD *)(a1 + v50);
    v53 = (uint64_t *)((char *)a2 + v50);
    v54 = v53[1];
    *v52 = *v53;
    v52[1] = v54;
    v55 = a1 + v51;
    v56 = (uint64_t)a2 + v51;
    v57 = *(_QWORD *)(v56 + 8);
    *(_QWORD *)v55 = *(_QWORD *)v56;
    *(_QWORD *)(v55 + 8) = v57;
    *(_OWORD *)(v55 + 16) = *(_OWORD *)(v56 + 16);
    v58 = a3[22];
    v59 = (void *)(a1 + v58);
    v60 = (char *)a2 + v58;
    v61 = sub_233B57DF8();
    v62 = *(_QWORD *)(v61 - 8);
    v63 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v62 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v63(v60, 1, v61))
    {
      v64 = __swift_instantiateConcreteTypeFromMangledName(&qword_25424D2A0);
      memcpy(v59, v60, *(_QWORD *)(*(_QWORD *)(v64 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v62 + 16))(v59, v60, v61);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v62 + 56))(v59, 0, 1, v61);
    }
    v65 = a3[24];
    *(_QWORD *)(a1 + a3[23]) = *(uint64_t *)((char *)a2 + a3[23]);
    v66 = (_QWORD *)(a1 + v65);
    v67 = (uint64_t *)((char *)a2 + v65);
    v68 = v67[1];
    *v66 = *v67;
    v66[1] = v68;
    v69 = a3[25];
    v70 = (void *)(a1 + v69);
    v71 = (char *)a2 + v69;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v63(v71, 1, v61))
    {
      v72 = __swift_instantiateConcreteTypeFromMangledName(&qword_25424D2A0);
      memcpy(v70, v71, *(_QWORD *)(*(_QWORD *)(v72 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v62 + 16))(v70, v71, v61);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v62 + 56))(v70, 0, 1, v61);
    }
    v73 = a3[26];
    v74 = (void *)(a1 + v73);
    v75 = (char *)a2 + v73;
    if (v63((char *)a2 + v73, 1, v61))
    {
      v76 = __swift_instantiateConcreteTypeFromMangledName(&qword_25424D2A0);
      memcpy(v74, v75, *(_QWORD *)(*(_QWORD *)(v76 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v62 + 16))(v74, v75, v61);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v62 + 56))(v74, 0, 1, v61);
    }
    v77 = a3[28];
    *(_BYTE *)(a1 + a3[27]) = *((_BYTE *)a2 + a3[27]);
    v78 = (_QWORD *)(a1 + v77);
    v79 = (uint64_t *)((char *)a2 + v77);
    v80 = v79[1];
    *v78 = *v79;
    v78[1] = v80;
    v81 = a3[29];
    v82 = (_QWORD *)(a1 + v81);
    v83 = (uint64_t *)((char *)a2 + v81);
    v84 = v83[1];
    *v82 = *v83;
    v82[1] = v84;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for ManagedApp(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + a2[9];
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256112C58);
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  v7 = a1 + a2[10];
  v8 = sub_233B57E64();
  v9 = *(_QWORD *)(v8 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v10 = a1 + a2[19];
  v11 = sub_233B57E28();
  v12 = *(_QWORD *)(v11 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v13 = a1 + a2[22];
  v14 = sub_233B57DF8();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  if (!v16(v13, 1, v14))
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v13, v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v17 = a1 + a2[25];
  if (!v16(v17, 1, v14))
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v17, v14);
  v18 = a1 + a2[26];
  if (!v16(v18, 1, v14))
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v18, v14);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ManagedApp(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  const void *v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int (*v61)(const void *, uint64_t, uint64_t);
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  const void *v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  const void *v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v84;
  const void *v85;
  unsigned int (*v86)(const void *, uint64_t, uint64_t);
  uint64_t v87;
  uint64_t v88;
  void *__dst;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v8;
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v9 = a3[9];
  v10 = (void *)(a1 + v9);
  v11 = (const void *)(a2 + v9);
  *(_QWORD *)(a1 + 16) = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_256112C58);
  v13 = *(_QWORD *)(v12 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
  {
    v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_256112BE8);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v13 + 16))(v10, v11, v12);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  }
  v15 = a3[10];
  v16 = (void *)(a1 + v15);
  v17 = (const void *)(a2 + v15);
  v18 = sub_233B57E64();
  v19 = *(_QWORD *)(v18 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
  {
    v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_256112BF0);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v19 + 16))(v16, v17, v18);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
  }
  v21 = a3[11];
  v22 = a3[12];
  v23 = (_QWORD *)(a1 + v21);
  v24 = (_QWORD *)(a2 + v21);
  v87 = v24[1];
  *v23 = *v24;
  v23[1] = v87;
  v25 = (_QWORD *)(a1 + v22);
  v26 = (_QWORD *)(a2 + v22);
  v88 = v26[1];
  *v25 = *v26;
  v25[1] = v88;
  v27 = a3[13];
  v28 = a3[14];
  v29 = (_QWORD *)(a1 + v27);
  v30 = (_QWORD *)(a2 + v27);
  v31 = v30[1];
  *v29 = *v30;
  v29[1] = v31;
  *(_QWORD *)(a1 + v28) = *(_QWORD *)(a2 + v28);
  v32 = a3[15];
  v33 = a3[16];
  v34 = (_QWORD *)(a1 + v32);
  v35 = (_QWORD *)(a2 + v32);
  v36 = v35[1];
  *v34 = *v35;
  v34[1] = v36;
  *(_QWORD *)(a1 + v33) = *(_QWORD *)(a2 + v33);
  v37 = a3[17];
  v38 = a3[18];
  v39 = (_QWORD *)(a1 + v37);
  v40 = (_QWORD *)(a2 + v37);
  v41 = v40[1];
  *v39 = *v40;
  v39[1] = v41;
  v42 = (_QWORD *)(a1 + v38);
  v43 = (_QWORD *)(a2 + v38);
  v44 = v43[1];
  *v42 = *v43;
  v42[1] = v44;
  v45 = a3[19];
  __dst = (void *)(a1 + v45);
  v85 = (const void *)(a2 + v45);
  v46 = sub_233B57E28();
  v84 = *(_QWORD *)(v46 - 8);
  v86 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v84 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v86(v85, 1, v46))
  {
    v47 = __swift_instantiateConcreteTypeFromMangledName(&qword_256112BF8);
    memcpy(__dst, v85, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v84 + 16))(__dst, v85, v46);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v84 + 56))(__dst, 0, 1, v46);
  }
  v48 = a3[20];
  v49 = a3[21];
  v50 = (_QWORD *)(a1 + v48);
  v51 = (_QWORD *)(a2 + v48);
  v52 = v51[1];
  *v50 = *v51;
  v50[1] = v52;
  v53 = a1 + v49;
  v54 = a2 + v49;
  v55 = *(_QWORD *)(v54 + 8);
  *(_QWORD *)v53 = *(_QWORD *)v54;
  *(_QWORD *)(v53 + 8) = v55;
  *(_OWORD *)(v53 + 16) = *(_OWORD *)(v54 + 16);
  v56 = a3[22];
  v57 = (void *)(a1 + v56);
  v58 = (const void *)(a2 + v56);
  v59 = sub_233B57DF8();
  v60 = *(_QWORD *)(v59 - 8);
  v61 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v60 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v61(v58, 1, v59))
  {
    v62 = __swift_instantiateConcreteTypeFromMangledName(&qword_25424D2A0);
    memcpy(v57, v58, *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v60 + 16))(v57, v58, v59);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v60 + 56))(v57, 0, 1, v59);
  }
  v63 = a3[24];
  *(_QWORD *)(a1 + a3[23]) = *(_QWORD *)(a2 + a3[23]);
  v64 = (_QWORD *)(a1 + v63);
  v65 = (_QWORD *)(a2 + v63);
  v66 = v65[1];
  *v64 = *v65;
  v64[1] = v66;
  v67 = a3[25];
  v68 = (void *)(a1 + v67);
  v69 = (const void *)(a2 + v67);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v61(v69, 1, v59))
  {
    v70 = __swift_instantiateConcreteTypeFromMangledName(&qword_25424D2A0);
    memcpy(v68, v69, *(_QWORD *)(*(_QWORD *)(v70 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v60 + 16))(v68, v69, v59);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v60 + 56))(v68, 0, 1, v59);
  }
  v71 = a3[26];
  v72 = (void *)(a1 + v71);
  v73 = (const void *)(a2 + v71);
  if (v61((const void *)(a2 + v71), 1, v59))
  {
    v74 = __swift_instantiateConcreteTypeFromMangledName(&qword_25424D2A0);
    memcpy(v72, v73, *(_QWORD *)(*(_QWORD *)(v74 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v60 + 16))(v72, v73, v59);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v60 + 56))(v72, 0, 1, v59);
  }
  v75 = a3[28];
  *(_BYTE *)(a1 + a3[27]) = *(_BYTE *)(a2 + a3[27]);
  v76 = (_QWORD *)(a1 + v75);
  v77 = (_QWORD *)(a2 + v75);
  v78 = v77[1];
  *v76 = *v77;
  v76[1] = v78;
  v79 = a3[29];
  v80 = (_QWORD *)(a1 + v79);
  v81 = (_QWORD *)(a2 + v79);
  v82 = v81[1];
  *v80 = *v81;
  v80[1] = v82;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ManagedApp(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(void *, uint64_t, uint64_t);
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(void *, uint64_t, uint64_t);
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  void *v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t (*v49)(void *, uint64_t, uint64_t);
  int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t (*v64)(void *, uint64_t, uint64_t);
  int v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  void *v72;
  void *v73;
  int v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  void *v79;
  int v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  uint64_t v86;
  _QWORD *v87;
  _QWORD *v88;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v6;
  v7 = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v7;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v8 = a3[9];
  v9 = (void *)(a1 + v8);
  v10 = (void *)(a2 + v8);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_256112C58);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(void *, void *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v15)
  {
    (*(void (**)(void *, uint64_t))(v12 + 8))(v9, v11);
LABEL_6:
    v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_256112BE8);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v12 + 24))(v9, v10, v11);
LABEL_7:
  v17 = a3[10];
  v18 = (void *)(a1 + v17);
  v19 = (void *)(a2 + v17);
  v20 = sub_233B57E64();
  v21 = *(_QWORD *)(v20 - 8);
  v22 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v21 + 48);
  v23 = v22(v18, 1, v20);
  v24 = v22(v19, 1, v20);
  if (v23)
  {
    if (!v24)
    {
      (*(void (**)(void *, void *, uint64_t))(v21 + 16))(v18, v19, v20);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v24)
  {
    (*(void (**)(void *, uint64_t))(v21 + 8))(v18, v20);
LABEL_12:
    v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_256112BF0);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, void *, uint64_t))(v21 + 24))(v18, v19, v20);
LABEL_13:
  v26 = a3[11];
  v27 = (_QWORD *)(a1 + v26);
  v28 = (_QWORD *)(a2 + v26);
  *v27 = *v28;
  v27[1] = v28[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v29 = a3[12];
  v30 = (_QWORD *)(a1 + v29);
  v31 = (_QWORD *)(a2 + v29);
  *v30 = *v31;
  v30[1] = v31[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v32 = a3[13];
  v33 = (_QWORD *)(a1 + v32);
  v34 = (_QWORD *)(a2 + v32);
  *v33 = *v34;
  v33[1] = v34[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + a3[14]) = *(_QWORD *)(a2 + a3[14]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v35 = a3[15];
  v36 = (_QWORD *)(a1 + v35);
  v37 = (_QWORD *)(a2 + v35);
  *v36 = *v37;
  v36[1] = v37[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + a3[16]) = *(_QWORD *)(a2 + a3[16]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v38 = a3[17];
  v39 = (_QWORD *)(a1 + v38);
  v40 = (_QWORD *)(a2 + v38);
  *v39 = *v40;
  v39[1] = v40[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v41 = a3[18];
  v42 = (_QWORD *)(a1 + v41);
  v43 = (_QWORD *)(a2 + v41);
  *v42 = *v43;
  v42[1] = v43[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v44 = a3[19];
  v45 = (void *)(a1 + v44);
  v46 = (void *)(a2 + v44);
  v47 = sub_233B57E28();
  v48 = *(_QWORD *)(v47 - 8);
  v49 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v48 + 48);
  v50 = v49(v45, 1, v47);
  v51 = v49(v46, 1, v47);
  if (v50)
  {
    if (!v51)
    {
      (*(void (**)(void *, void *, uint64_t))(v48 + 16))(v45, v46, v47);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v48 + 56))(v45, 0, 1, v47);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v51)
  {
    (*(void (**)(void *, uint64_t))(v48 + 8))(v45, v47);
LABEL_18:
    v52 = __swift_instantiateConcreteTypeFromMangledName(&qword_256112BF8);
    memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(void *, void *, uint64_t))(v48 + 24))(v45, v46, v47);
LABEL_19:
  v53 = a3[20];
  v54 = (_QWORD *)(a1 + v53);
  v55 = (_QWORD *)(a2 + v53);
  *v54 = *v55;
  v54[1] = v55[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v56 = a3[21];
  v57 = (_QWORD *)(a1 + v56);
  v58 = a2 + v56;
  *v57 = *(_QWORD *)(a2 + v56);
  v57[1] = *(_QWORD *)(a2 + v56 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v57[2] = *(_QWORD *)(v58 + 16);
  v57[3] = *(_QWORD *)(v58 + 24);
  v59 = a3[22];
  v60 = (void *)(a1 + v59);
  v61 = (void *)(a2 + v59);
  v62 = sub_233B57DF8();
  v63 = *(_QWORD *)(v62 - 8);
  v64 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v63 + 48);
  v65 = v64(v60, 1, v62);
  v66 = v64(v61, 1, v62);
  if (v65)
  {
    if (!v66)
    {
      (*(void (**)(void *, void *, uint64_t))(v63 + 16))(v60, v61, v62);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v63 + 56))(v60, 0, 1, v62);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v66)
  {
    (*(void (**)(void *, uint64_t))(v63 + 8))(v60, v62);
LABEL_24:
    v67 = __swift_instantiateConcreteTypeFromMangledName(&qword_25424D2A0);
    memcpy(v60, v61, *(_QWORD *)(*(_QWORD *)(v67 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(void *, void *, uint64_t))(v63 + 24))(v60, v61, v62);
LABEL_25:
  *(_QWORD *)(a1 + a3[23]) = *(_QWORD *)(a2 + a3[23]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v68 = a3[24];
  v69 = (_QWORD *)(a1 + v68);
  v70 = (_QWORD *)(a2 + v68);
  *v69 = *v70;
  v69[1] = v70[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v71 = a3[25];
  v72 = (void *)(a1 + v71);
  v73 = (void *)(a2 + v71);
  v74 = v64((void *)(a1 + v71), 1, v62);
  v75 = v64(v73, 1, v62);
  if (v74)
  {
    if (!v75)
    {
      (*(void (**)(void *, void *, uint64_t))(v63 + 16))(v72, v73, v62);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v63 + 56))(v72, 0, 1, v62);
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  if (v75)
  {
    (*(void (**)(void *, uint64_t))(v63 + 8))(v72, v62);
LABEL_30:
    v76 = __swift_instantiateConcreteTypeFromMangledName(&qword_25424D2A0);
    memcpy(v72, v73, *(_QWORD *)(*(_QWORD *)(v76 - 8) + 64));
    goto LABEL_31;
  }
  (*(void (**)(void *, void *, uint64_t))(v63 + 24))(v72, v73, v62);
LABEL_31:
  v77 = a3[26];
  v78 = (void *)(a1 + v77);
  v79 = (void *)(a2 + v77);
  v80 = v64((void *)(a1 + v77), 1, v62);
  v81 = v64(v79, 1, v62);
  if (!v80)
  {
    if (!v81)
    {
      (*(void (**)(void *, void *, uint64_t))(v63 + 24))(v78, v79, v62);
      goto LABEL_37;
    }
    (*(void (**)(void *, uint64_t))(v63 + 8))(v78, v62);
    goto LABEL_36;
  }
  if (v81)
  {
LABEL_36:
    v82 = __swift_instantiateConcreteTypeFromMangledName(&qword_25424D2A0);
    memcpy(v78, v79, *(_QWORD *)(*(_QWORD *)(v82 - 8) + 64));
    goto LABEL_37;
  }
  (*(void (**)(void *, void *, uint64_t))(v63 + 16))(v78, v79, v62);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v63 + 56))(v78, 0, 1, v62);
LABEL_37:
  *(_BYTE *)(a1 + a3[27]) = *(_BYTE *)(a2 + a3[27]);
  v83 = a3[28];
  v84 = (_QWORD *)(a1 + v83);
  v85 = (_QWORD *)(a2 + v83);
  *v84 = *v85;
  v84[1] = v85[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v86 = a3[29];
  v87 = (_QWORD *)(a1 + v86);
  v88 = (_QWORD *)(a2 + v86);
  *v87 = *v88;
  v87[1] = v88[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for ManagedApp(uint64_t a1, __int128 *a2, int *a3)
{
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  void *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _OWORD *v31;
  _OWORD *v32;
  __int128 v33;
  uint64_t v34;
  void *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int (*v39)(const void *, uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;

  v6 = *a2;
  v7 = a2[1];
  *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
  *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
  *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 6);
  *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
  *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
  v8 = a3[9];
  v9 = (void *)(a1 + v8);
  v10 = (char *)a2 + v8;
  *(_OWORD *)a1 = v6;
  *(_OWORD *)(a1 + 16) = v7;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_256112C58);
  v12 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_256112BE8);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v12 + 32))(v9, v10, v11);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  v14 = a3[10];
  v15 = (void *)(a1 + v14);
  v16 = (char *)a2 + v14;
  v17 = sub_233B57E64();
  v18 = *(_QWORD *)(v17 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
  {
    v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_256112BF0);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v18 + 32))(v15, v16, v17);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
  }
  v20 = a3[12];
  *(_OWORD *)(a1 + a3[11]) = *(__int128 *)((char *)a2 + a3[11]);
  *(_OWORD *)(a1 + v20) = *(__int128 *)((char *)a2 + v20);
  v21 = a3[14];
  *(_OWORD *)(a1 + a3[13]) = *(__int128 *)((char *)a2 + a3[13]);
  *(_QWORD *)(a1 + v21) = *(_QWORD *)((char *)a2 + v21);
  v22 = a3[16];
  *(_OWORD *)(a1 + a3[15]) = *(__int128 *)((char *)a2 + a3[15]);
  *(_QWORD *)(a1 + v22) = *(_QWORD *)((char *)a2 + v22);
  v23 = a3[18];
  *(_OWORD *)(a1 + a3[17]) = *(__int128 *)((char *)a2 + a3[17]);
  *(_OWORD *)(a1 + v23) = *(__int128 *)((char *)a2 + v23);
  v24 = a3[19];
  v25 = (void *)(a1 + v24);
  v26 = (char *)a2 + v24;
  v27 = sub_233B57E28();
  v28 = *(_QWORD *)(v27 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
  {
    v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_256112BF8);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v28 + 32))(v25, v26, v27);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
  }
  v30 = a3[21];
  *(_OWORD *)(a1 + a3[20]) = *(__int128 *)((char *)a2 + a3[20]);
  v31 = (_OWORD *)(a1 + v30);
  v32 = (__int128 *)((char *)a2 + v30);
  v33 = v32[1];
  *v31 = *v32;
  v31[1] = v33;
  v34 = a3[22];
  v35 = (void *)(a1 + v34);
  v36 = (char *)a2 + v34;
  v37 = sub_233B57DF8();
  v38 = *(_QWORD *)(v37 - 8);
  v39 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v38 + 48);
  if (v39(v36, 1, v37))
  {
    v40 = __swift_instantiateConcreteTypeFromMangledName(&qword_25424D2A0);
    memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v38 + 32))(v35, v36, v37);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v37);
  }
  v41 = a3[24];
  *(_QWORD *)(a1 + a3[23]) = *(_QWORD *)((char *)a2 + a3[23]);
  *(_OWORD *)(a1 + v41) = *(__int128 *)((char *)a2 + v41);
  v42 = a3[25];
  v43 = (void *)(a1 + v42);
  v44 = (char *)a2 + v42;
  if (v39((char *)a2 + v42, 1, v37))
  {
    v45 = __swift_instantiateConcreteTypeFromMangledName(&qword_25424D2A0);
    memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v38 + 32))(v43, v44, v37);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v38 + 56))(v43, 0, 1, v37);
  }
  v46 = a3[26];
  v47 = (void *)(a1 + v46);
  v48 = (char *)a2 + v46;
  if (v39((char *)a2 + v46, 1, v37))
  {
    v49 = __swift_instantiateConcreteTypeFromMangledName(&qword_25424D2A0);
    memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v38 + 32))(v47, v48, v37);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v38 + 56))(v47, 0, 1, v37);
  }
  v50 = a3[28];
  *(_BYTE *)(a1 + a3[27]) = *((_BYTE *)a2 + a3[27]);
  *(_OWORD *)(a1 + v50) = *(__int128 *)((char *)a2 + v50);
  *(_OWORD *)(a1 + a3[29]) = *(__int128 *)((char *)a2 + a3[29]);
  return a1;
}

uint64_t assignWithTake for ManagedApp(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(void *, uint64_t, uint64_t);
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(void *, uint64_t, uint64_t);
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t (*v61)(void *, uint64_t, uint64_t);
  int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t (*v79)(void *, uint64_t, uint64_t);
  int v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  void *v90;
  int v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  void *v96;
  int v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v7;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v8 = a3[9];
  v9 = (void *)(a1 + v8);
  v10 = (void *)(a2 + v8);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_256112C58);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(void *, void *, uint64_t))(v12 + 32))(v9, v10, v11);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v15)
  {
    (*(void (**)(void *, uint64_t))(v12 + 8))(v9, v11);
LABEL_6:
    v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_256112BE8);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v12 + 40))(v9, v10, v11);
LABEL_7:
  v17 = a3[10];
  v18 = (void *)(a1 + v17);
  v19 = (void *)(a2 + v17);
  v20 = sub_233B57E64();
  v21 = *(_QWORD *)(v20 - 8);
  v22 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v21 + 48);
  v23 = v22(v18, 1, v20);
  v24 = v22(v19, 1, v20);
  if (v23)
  {
    if (!v24)
    {
      (*(void (**)(void *, void *, uint64_t))(v21 + 32))(v18, v19, v20);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v24)
  {
    (*(void (**)(void *, uint64_t))(v21 + 8))(v18, v20);
LABEL_12:
    v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_256112BF0);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, void *, uint64_t))(v21 + 40))(v18, v19, v20);
LABEL_13:
  v26 = a3[11];
  v27 = (_QWORD *)(a1 + v26);
  v28 = (uint64_t *)(a2 + v26);
  v30 = *v28;
  v29 = v28[1];
  *v27 = v30;
  v27[1] = v29;
  swift_bridgeObjectRelease();
  v31 = a3[12];
  v32 = (_QWORD *)(a1 + v31);
  v33 = (uint64_t *)(a2 + v31);
  v35 = *v33;
  v34 = v33[1];
  *v32 = v35;
  v32[1] = v34;
  swift_bridgeObjectRelease();
  v36 = a3[13];
  v37 = (_QWORD *)(a1 + v36);
  v38 = (uint64_t *)(a2 + v36);
  v40 = *v38;
  v39 = v38[1];
  *v37 = v40;
  v37[1] = v39;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + a3[14]) = *(_QWORD *)(a2 + a3[14]);
  swift_bridgeObjectRelease();
  v41 = a3[15];
  v42 = (_QWORD *)(a1 + v41);
  v43 = (uint64_t *)(a2 + v41);
  v45 = *v43;
  v44 = v43[1];
  *v42 = v45;
  v42[1] = v44;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + a3[16]) = *(_QWORD *)(a2 + a3[16]);
  swift_bridgeObjectRelease();
  v46 = a3[17];
  v47 = (_QWORD *)(a1 + v46);
  v48 = (uint64_t *)(a2 + v46);
  v50 = *v48;
  v49 = v48[1];
  *v47 = v50;
  v47[1] = v49;
  swift_bridgeObjectRelease();
  v51 = a3[18];
  v52 = (_QWORD *)(a1 + v51);
  v53 = (uint64_t *)(a2 + v51);
  v55 = *v53;
  v54 = v53[1];
  *v52 = v55;
  v52[1] = v54;
  swift_bridgeObjectRelease();
  v56 = a3[19];
  v57 = (void *)(a1 + v56);
  v58 = (void *)(a2 + v56);
  v59 = sub_233B57E28();
  v60 = *(_QWORD *)(v59 - 8);
  v61 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v60 + 48);
  v62 = v61(v57, 1, v59);
  v63 = v61(v58, 1, v59);
  if (v62)
  {
    if (!v63)
    {
      (*(void (**)(void *, void *, uint64_t))(v60 + 32))(v57, v58, v59);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v60 + 56))(v57, 0, 1, v59);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v63)
  {
    (*(void (**)(void *, uint64_t))(v60 + 8))(v57, v59);
LABEL_18:
    v64 = __swift_instantiateConcreteTypeFromMangledName(&qword_256112BF8);
    memcpy(v57, v58, *(_QWORD *)(*(_QWORD *)(v64 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(void *, void *, uint64_t))(v60 + 40))(v57, v58, v59);
LABEL_19:
  v65 = a3[20];
  v66 = (_QWORD *)(a1 + v65);
  v67 = (uint64_t *)(a2 + v65);
  v69 = *v67;
  v68 = v67[1];
  *v66 = v69;
  v66[1] = v68;
  swift_bridgeObjectRelease();
  v70 = a3[21];
  v71 = a1 + v70;
  v72 = a2 + v70;
  v73 = *(_QWORD *)(a2 + v70 + 8);
  *(_QWORD *)v71 = *(_QWORD *)(a2 + v70);
  *(_QWORD *)(v71 + 8) = v73;
  swift_bridgeObjectRelease();
  *(_OWORD *)(v71 + 16) = *(_OWORD *)(v72 + 16);
  v74 = a3[22];
  v75 = (void *)(a1 + v74);
  v76 = (void *)(a2 + v74);
  v77 = sub_233B57DF8();
  v78 = *(_QWORD *)(v77 - 8);
  v79 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v78 + 48);
  v80 = v79(v75, 1, v77);
  v81 = v79(v76, 1, v77);
  if (v80)
  {
    if (!v81)
    {
      (*(void (**)(void *, void *, uint64_t))(v78 + 32))(v75, v76, v77);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v78 + 56))(v75, 0, 1, v77);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v81)
  {
    (*(void (**)(void *, uint64_t))(v78 + 8))(v75, v77);
LABEL_24:
    v82 = __swift_instantiateConcreteTypeFromMangledName(&qword_25424D2A0);
    memcpy(v75, v76, *(_QWORD *)(*(_QWORD *)(v82 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(void *, void *, uint64_t))(v78 + 40))(v75, v76, v77);
LABEL_25:
  *(_QWORD *)(a1 + a3[23]) = *(_QWORD *)(a2 + a3[23]);
  swift_bridgeObjectRelease();
  v83 = a3[24];
  v84 = (_QWORD *)(a1 + v83);
  v85 = (uint64_t *)(a2 + v83);
  v87 = *v85;
  v86 = v85[1];
  *v84 = v87;
  v84[1] = v86;
  swift_bridgeObjectRelease();
  v88 = a3[25];
  v89 = (void *)(a1 + v88);
  v90 = (void *)(a2 + v88);
  v91 = v79((void *)(a1 + v88), 1, v77);
  v92 = v79(v90, 1, v77);
  if (v91)
  {
    if (!v92)
    {
      (*(void (**)(void *, void *, uint64_t))(v78 + 32))(v89, v90, v77);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v78 + 56))(v89, 0, 1, v77);
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  if (v92)
  {
    (*(void (**)(void *, uint64_t))(v78 + 8))(v89, v77);
LABEL_30:
    v93 = __swift_instantiateConcreteTypeFromMangledName(&qword_25424D2A0);
    memcpy(v89, v90, *(_QWORD *)(*(_QWORD *)(v93 - 8) + 64));
    goto LABEL_31;
  }
  (*(void (**)(void *, void *, uint64_t))(v78 + 40))(v89, v90, v77);
LABEL_31:
  v94 = a3[26];
  v95 = (void *)(a1 + v94);
  v96 = (void *)(a2 + v94);
  v97 = v79((void *)(a1 + v94), 1, v77);
  v98 = v79(v96, 1, v77);
  if (!v97)
  {
    if (!v98)
    {
      (*(void (**)(void *, void *, uint64_t))(v78 + 40))(v95, v96, v77);
      goto LABEL_37;
    }
    (*(void (**)(void *, uint64_t))(v78 + 8))(v95, v77);
    goto LABEL_36;
  }
  if (v98)
  {
LABEL_36:
    v99 = __swift_instantiateConcreteTypeFromMangledName(&qword_25424D2A0);
    memcpy(v95, v96, *(_QWORD *)(*(_QWORD *)(v99 - 8) + 64));
    goto LABEL_37;
  }
  (*(void (**)(void *, void *, uint64_t))(v78 + 32))(v95, v96, v77);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v78 + 56))(v95, 0, 1, v77);
LABEL_37:
  v100 = a3[28];
  *(_BYTE *)(a1 + a3[27]) = *(_BYTE *)(a2 + a3[27]);
  v101 = (_QWORD *)(a1 + v100);
  v102 = (uint64_t *)(a2 + v100);
  v104 = *v102;
  v103 = v102[1];
  *v101 = v104;
  v101[1] = v103;
  swift_bridgeObjectRelease();
  v105 = a3[29];
  v106 = (_QWORD *)(a1 + v105);
  v107 = (uint64_t *)(a2 + v105);
  v109 = *v107;
  v108 = v107[1];
  *v106 = v109;
  v106[1] = v108;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ManagedApp()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_233B0A470(uint64_t a1, uint64_t a2, int *a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256112BE8);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = a3[9];
    }
    else
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_256112BF0);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
      {
        v10 = v12;
        v11 = a3[10];
      }
      else
      {
        v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_256112BF8);
        v9 = *(_QWORD *)(v13 - 8);
        if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
        {
          v10 = v13;
          v11 = a3[19];
        }
        else
        {
          v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_25424D2A0);
          v9 = *(_QWORD *)(v10 - 8);
          v11 = a3[22];
        }
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for ManagedApp()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_233B0A574(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256112BE8);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = a4[9];
    }
    else
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_256112BF0);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        v10 = v12;
        v11 = a4[10];
      }
      else
      {
        v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_256112BF8);
        v9 = *(_QWORD *)(v13 - 8);
        if (*(_DWORD *)(v9 + 84) == a3)
        {
          v10 = v13;
          v11 = a4[19];
        }
        else
        {
          v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_25424D2A0);
          v9 = *(_QWORD *)(v10 - 8);
          v11 = a4[22];
        }
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

void sub_233B0A668()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  sub_233B0A7CC();
  if (v0 <= 0x3F)
  {
    sub_233B0A824(319, &qword_256112D70, (void (*)(uint64_t))MEMORY[0x24BDCEE28]);
    if (v1 <= 0x3F)
    {
      sub_233B0A824(319, &qword_256112D78, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
      if (v2 <= 0x3F)
      {
        sub_233B0A824(319, qword_256112D80, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
        if (v3 <= 0x3F)
          swift_initStructMetadata();
      }
    }
  }
}

void sub_233B0A7CC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256112D68)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256112C58);
    v0 = sub_233B581E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256112D68);
  }
}

void sub_233B0A824(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    v4 = sub_233B581E8();
    if (!v5)
      atomic_store(v4, a2);
  }
}

uint64_t initializeBufferWithCopyOfBuffer for ManagedApp.Artwork(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t initializeWithCopy for ManagedApp.Artwork(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for ManagedApp.Artwork(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  return a1;
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t assignWithTake for ManagedApp.Artwork(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for ManagedApp.Artwork(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ManagedApp.Artwork(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ManagedApp.Artwork()
{
  return &type metadata for ManagedApp.Artwork;
}

uint64_t getEnumTagSinglePayload for ManagedApp.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xE7)
    goto LABEL_17;
  if (a2 + 25 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 25) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 25;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 25;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 25;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x1A;
  v8 = v6 - 26;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ManagedApp.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 25 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 25) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xE7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xE6)
    return ((uint64_t (*)(void))((char *)&loc_233B0AAEC + 4 * byte_233B58DFF[v4]))();
  *a1 = a2 + 25;
  return ((uint64_t (*)(void))((char *)sub_233B0AB20 + 4 * byte_233B58DFA[v4]))();
}

uint64_t sub_233B0AB20(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_233B0AB28(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x233B0AB30);
  return result;
}

uint64_t sub_233B0AB3C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x233B0AB44);
  *(_BYTE *)result = a2 + 25;
  return result;
}

uint64_t sub_233B0AB48(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_233B0AB50(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ManagedApp.CodingKeys()
{
  return &type metadata for ManagedApp.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for ManagedApp.Artwork.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_233B0ABB8 + 4 * byte_233B58E09[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_233B0ABEC + 4 * byte_233B58E04[v4]))();
}

uint64_t sub_233B0ABEC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_233B0ABF4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x233B0ABFCLL);
  return result;
}

uint64_t sub_233B0AC08(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x233B0AC10);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_233B0AC14(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_233B0AC1C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ManagedApp.Artwork.CodingKeys()
{
  return &type metadata for ManagedApp.Artwork.CodingKeys;
}

unint64_t sub_233B0AC3C()
{
  unint64_t result;

  result = qword_256112E10;
  if (!qword_256112E10)
  {
    result = MEMORY[0x23493D400](&unk_233B590C4, &type metadata for ManagedApp.Artwork.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256112E10);
  }
  return result;
}

unint64_t sub_233B0AC84()
{
  unint64_t result;

  result = qword_256112E18;
  if (!qword_256112E18)
  {
    result = MEMORY[0x23493D400](&unk_233B5917C, &type metadata for ManagedApp.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256112E18);
  }
  return result;
}

unint64_t sub_233B0ACCC()
{
  unint64_t result;

  result = qword_256112E20;
  if (!qword_256112E20)
  {
    result = MEMORY[0x23493D400](&unk_233B590EC, &type metadata for ManagedApp.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256112E20);
  }
  return result;
}

unint64_t sub_233B0AD14()
{
  unint64_t result;

  result = qword_256112E28;
  if (!qword_256112E28)
  {
    result = MEMORY[0x23493D400](&unk_233B59114, &type metadata for ManagedApp.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256112E28);
  }
  return result;
}

unint64_t sub_233B0AD5C()
{
  unint64_t result;

  result = qword_256112E30;
  if (!qword_256112E30)
  {
    result = MEMORY[0x23493D400](&unk_233B59034, &type metadata for ManagedApp.Artwork.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256112E30);
  }
  return result;
}

unint64_t sub_233B0ADA4()
{
  unint64_t result;

  result = qword_256112E38;
  if (!qword_256112E38)
  {
    result = MEMORY[0x23493D400](&unk_233B5905C, &type metadata for ManagedApp.Artwork.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256112E38);
  }
  return result;
}

_QWORD *sub_233B0ADE8(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_233B0AE10(a1, a2, a3, a4, &qword_25424D590);
}

_QWORD *sub_233B0ADFC(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_233B0AE10(a1, a2, a3, a4, &qword_25424CED8);
}

_QWORD *sub_233B0AE10(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5)
{
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    v8 = a2;
    goto LABEL_8;
  }
  v7 = a4[3];
  v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2)
    goto LABEL_8;
  if (v8 + 0x4000000000000000 >= 0)
  {
    v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v8 = a2;
LABEL_8:
    v9 = a4[2];
    if (v8 <= v9)
      v10 = a4[2];
    else
      v10 = v8;
    if (v10)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      v11 = (_QWORD *)swift_allocObject();
      v12 = _swift_stdlib_malloc_size(v11);
      v11[2] = v9;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 24);
      v13 = v11 + 4;
      if ((v6 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[3 * v9 + 4])
          memmove(v13, a4 + 4, 24 * v9);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_233B0BCE8(0, v9, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_233B0AF3C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v8 = *(_QWORD *)(sub_233B57DF8() - 8);
    v9 = *(unsigned __int8 *)(v8 + 80);
    v10 = *(_QWORD *)(v8 + 72);
    v11 = a4 + ((v9 + 32) & ~v9) + v10 * a1;
    v12 = v10 * v4;
    v13 = a3 + v12;
    v14 = v11 + v12;
    if (v11 >= v13 || v14 <= a3)
    {
      swift_arrayInitWithCopy();
      return v13;
    }
  }
  result = sub_233B58350();
  __break(1u);
  return result;
}

uint64_t sub_233B0B054(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;

  if ((a2 & 0x2000000000000000) != 0)
    v7 = HIBYTE(a2) & 0xF;
  else
    v7 = a1 & 0xFFFFFFFFFFFFLL;
  if (a1 == a5 && a2 == a6 && !(a3 >> 16) && v7 == a4 >> 16)
    return 1;
  else
    return sub_233B584A0() & 1;
}

uint64_t sub_233B0B0BC(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6C706D65546C7275 && a2 == 0xEB00000000657461;
  if (v2 || (sub_233B584D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x687464695778616DLL && a2 == 0xE800000000000000 || (sub_233B584D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x686769654878616DLL && a2 == 0xE900000000000074)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_233B584D0();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_233B0B234(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000015 && a2 == 0x8000000233B611C0 || (sub_233B584D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x4449656C646E7562 && a2 == 0xE800000000000000 || (sub_233B584D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x44496D657469 && a2 == 0xE600000000000000 || (sub_233B584D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x8000000233B611E0 || (sub_233B584D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6D726F6674616C70 && a2 == 0xE800000000000000 || (sub_233B584D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x657A6953656C6966 && a2 == 0xE800000000000000 || (sub_233B584D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x8000000233B61200 || (sub_233B584D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 1701667182 && a2 == 0xE400000000000000 || (sub_233B584D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x656C746974627573 && a2 == 0xE800000000000000 || (sub_233B584D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0x72656C6C6573 && a2 == 0xE600000000000000 || (sub_233B584D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0x7365726E6567 && a2 == 0xE600000000000000 || (sub_233B584D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0x7470697263736564 && a2 == 0xEB000000006E6F69 || (sub_233B584D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0x65676175676E616CLL && a2 == 0xE900000000000073 || (sub_233B584D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else if (a1 == 0x6D65726975716572 && a2 == 0xEC00000073746E65 || (sub_233B584D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 13;
  }
  else if (a1 == 0x6E6F6973726576 && a2 == 0xE700000000000000 || (sub_233B584D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 14;
  }
  else if (a1 == 0x44657361656C6572 && a2 == 0xEB00000000657461 || (sub_233B584D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 15;
  }
  else if (a1 == 0x4E657361656C6572 && a2 == 0xEC0000007365746FLL || (sub_233B584D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 16;
  }
  else if (a1 == 1852793705 && a2 == 0xE400000000000000 || (sub_233B584D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 17;
  }
  else if (a1 == 0x4C52556E6F6369 && a2 == 0xE700000000000000 || (sub_233B584D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 18;
  }
  else if (a1 == 0x68736E6565726373 && a2 == 0xEB0000000073746FLL || (sub_233B584D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 19;
  }
  else if (a1 == 0x52746E65746E6F63 && a2 == 0xED0000676E697461 || (sub_233B584D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 20;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x8000000233B61220 || (sub_233B584D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 21;
  }
  else if (a1 == 0x5079636176697270 && a2 == 0xED00007963696C6FLL || (sub_233B584D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 22;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x8000000233B61240 || (sub_233B584D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 23;
  }
  else if (a1 == 0x6867697279706F63 && a2 == 0xE900000000000074 || (sub_233B584D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 24;
  }
  else if (a1 == 0x6D61726150797562 && a2 == 0xE900000000000073)
  {
    swift_bridgeObjectRelease();
    return 25;
  }
  else
  {
    v5 = sub_233B584D0();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 25;
    else
      return 26;
  }
}

uint64_t sub_233B0BCE8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 24 * a1 + 32;
    v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_233B58350();
  __break(1u);
  return result;
}

uint64_t sub_233B0BDD8@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_233B05D54(*(_QWORD *)(v1 + 72), *(_QWORD *)(v1 + 80), *(_QWORD *)(v1 + 88), a1, *(double *)(v1 + 16), *(double *)(v1 + 24), *(double *)(v1 + 32), *(_QWORD *)(v1 + 96));
}

uint64_t ManagedAppInstallRequest.declarationIdentifier.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ManagedAppInstallRequest.buyParams.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ManagedAppInstallRequest.userInitiated.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 32);
}

uint64_t ManagedAppInstallRequest.userInitiated.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 32) = result;
  return result;
}

uint64_t (*ManagedAppInstallRequest.userInitiated.modify())()
{
  return nullsub_1;
}

uint64_t ManagedAppInstallRequest.init(declarationIdentifier:buyParams:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  *(_QWORD *)a5 = result;
  *(_QWORD *)(a5 + 8) = a2;
  *(_QWORD *)(a5 + 16) = a3;
  *(_QWORD *)(a5 + 24) = a4;
  *(_BYTE *)(a5 + 32) = 1;
  return result;
}

uint64_t ManagedAppInstallRequest.request()()
{
  uint64_t v0;
  uint64_t v1;
  __int128 v2;

  v2 = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v1 + 64) = *(_OWORD *)v0;
  *(_OWORD *)(v1 + 80) = v2;
  *(_BYTE *)(v1 + 49) = *(_BYTE *)(v0 + 32);
  return swift_task_switch();
}

uint64_t sub_233B0BED4()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  char *v8;

  if (qword_25424D4B0 != -1)
    swift_once();
  v1 = *(_BYTE *)(v0 + 49);
  v3 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 88);
  v5 = *(_QWORD *)(v0 + 64);
  v4 = *(_QWORD *)(v0 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_233B1017C();
  sub_233B101C0();
  *(_QWORD *)(v0 + 16) = v5;
  *(_QWORD *)(v0 + 24) = v4;
  *(_QWORD *)(v0 + 32) = v3;
  *(_QWORD *)(v0 + 40) = v2;
  *(_QWORD *)(v0 + 56) = v0 + 16;
  *(_BYTE *)(v0 + 48) = v1;
  v8 = (char *)&dword_256112E68 + dword_256112E68;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 96) = v6;
  *v6 = v0;
  v6[1] = sub_233B0BFD4;
  return ((uint64_t (*)(uint64_t, void (*)(void *, uint64_t, uint64_t, uint64_t, uint64_t), _QWORD))v8)(v0 + 56, sub_233B0C0EC, 0);
}

uint64_t sub_233B0BFD4()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 104) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return swift_task_switch();
}

uint64_t sub_233B0C04C()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_233B0C08C()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_233B0C0EC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v8;
  void *v9;
  _QWORD v10[6];

  v8 = (void *)sub_233B57E04();
  v10[4] = a4;
  v10[5] = a5;
  v10[0] = MEMORY[0x24BDAC760];
  v10[1] = 1107296256;
  v10[2] = sub_233B42240;
  v10[3] = &block_descriptor_172;
  v9 = _Block_copy(v10);
  swift_retain();
  swift_release();
  objc_msgSend(a1, sel_installManagedApp_reply_, v8, v9);
  _Block_release(v9);

}

unint64_t sub_233B0C1AC()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x6D61726150797562;
  if (*v0 != 1)
    v1 = 0x74696E4972657375;
  if (*v0)
    return v1;
  else
    return 0xD000000000000015;
}

uint64_t sub_233B0C21C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_233B1386C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_233B0C240()
{
  sub_233B10204();
  return sub_233B58638();
}

uint64_t sub_233B0C268()
{
  sub_233B10204();
  return sub_233B58644();
}

uint64_t ManagedAppInstallRequest.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[4];
  int v11;
  char v12;
  char v13;
  char v14;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256112E70);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(v1 + 16);
  v10[1] = *(_QWORD *)(v1 + 24);
  v10[2] = v7;
  v11 = *(unsigned __int8 *)(v1 + 32);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_233B10204();
  sub_233B5862C();
  v14 = 0;
  v8 = v10[3];
  sub_233B5841C();
  if (!v8)
  {
    v13 = 1;
    sub_233B5841C();
    v12 = 2;
    sub_233B58458();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t ManagedAppInstallRequest.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  char v24;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256112E80);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_233B10204();
  sub_233B58608();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  v24 = 0;
  v9 = sub_233B58380();
  v11 = v10;
  v21 = v9;
  v23 = 1;
  swift_bridgeObjectRetain();
  v12 = sub_233B58380();
  v14 = v13;
  v19 = v12;
  v22 = 2;
  swift_bridgeObjectRetain();
  v20 = v14;
  LOBYTE(v14) = sub_233B583BC();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v15 = v14 & 1;
  v16 = v20;
  *(_QWORD *)a2 = v21;
  *(_QWORD *)(a2 + 8) = v11;
  *(_QWORD *)(a2 + 16) = v19;
  *(_QWORD *)(a2 + 24) = v16;
  *(_BYTE *)(a2 + 32) = v15;
  __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_233B0C5FC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ManagedAppInstallRequest.init(from:)(a1, a2);
}

uint64_t sub_233B0C610(_QWORD *a1)
{
  return ManagedAppInstallRequest.encode(to:)(a1);
}

uint64_t sub_233B0C624(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  _QWORD v10[6];
  char v11;
  _BYTE v12[24];
  uint64_t v13;
  _QWORD *v14;

  v4 = *a2;
  v3 = a2[1];
  v6 = a2[2];
  v5 = a2[3];
  v7 = *((_BYTE *)a2 + 32);
  sub_233B101C0();
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_233B58614();
  v14 = v10;
  v10[2] = v4;
  v10[3] = v3;
  v10[4] = v6;
  v10[5] = v5;
  v11 = v7;
  v8 = v13;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v12, v8);
  sub_233B584C4();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)v12);
}

uint64_t sub_233B0C724(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE v10[24];
  uint64_t v11;
  _QWORD v12[2];

  v12[0] = a2;
  v12[1] = a3;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v3 = sub_233B58614();
  v4 = MEMORY[0x24BEE0D00];
  v5 = *(_QWORD *)(MEMORY[0x24BEE0D00] - 8);
  MEMORY[0x24BDAC7A8](v3);
  v7 = &v10[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  (*(void (**)(_BYTE *, _QWORD *, uint64_t))(v5 + 16))(v7, v12, v4);
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v10, v11);
  sub_233B584C4();
  (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)v10);
}

uint64_t sub_233B0C828(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_233B0C850(a1, a2, a3, (void (*)(void))sub_233B14834, (uint64_t *)&off_2504DD800, (uint64_t)&type metadata for DDMDeclarationStatusRequest);
}

uint64_t sub_233B0C850(_QWORD *a1, uint64_t a2, uint64_t a3, void (*a4)(void), uint64_t *a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE v15[24];
  uint64_t v16;
  _QWORD v17[2];

  v17[0] = a2;
  v17[1] = a3;
  a4();
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v9 = sub_233B58614();
  v10 = *a5;
  MEMORY[0x24BDAC7A8](v9);
  v12 = &v15[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  (*(void (**)(_BYTE *, _QWORD *, uint64_t))(v10 + 16))(v12, v17, a6);
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v15, v16);
  sub_233B584C4();
  (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v12, a6);
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)v15);
}

uint64_t sub_233B0C968(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE v10[24];
  uint64_t v11;
  _QWORD v12[4];

  v12[0] = a2;
  v12[1] = a3;
  v12[2] = a4;
  v12[3] = a5;
  sub_233B14488();
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v6 = sub_233B58614();
  MEMORY[0x24BDAC7A8](v6);
  initializeWithCopy for OAuthInvalidateRequest(&v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8], v12);
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v10, v11);
  sub_233B584C4();
  destroy for ManagedAppInstallRequest();
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)v10);
}

uint64_t sub_233B0CA84(_QWORD *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  _BYTE v8[24];
  uint64_t v9;
  char v10;

  v10 = a2;
  sub_233B143B4();
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v3 = sub_233B58614();
  MEMORY[0x24BDAC7A8](v3);
  v5 = &v8[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __swift_memcpy1_1(v5, &v10);
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v8, v9);
  sub_233B584C4();
  __swift_noop_void_return(v5, &type metadata for DDMPollForUpdatesRequest);
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)v8);
}

uint64_t sub_233B0CB9C(_QWORD *a1, char a2, void (*a3)(void), uint64_t *a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE v14[24];
  uint64_t v15;
  char v16;

  v16 = a2 & 1;
  a3();
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v8 = sub_233B58614();
  v9 = *a4;
  MEMORY[0x24BDAC7A8](v8);
  v11 = &v14[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  (*(void (**)(_BYTE *, char *, uint64_t))(v9 + 16))(v11, &v16, a5);
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v14, v15);
  sub_233B584C4();
  (*(void (**)(_BYTE *, uint64_t))(v9 + 8))(v11, a5);
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)v14);
}

uint64_t sub_233B0CCB8(_QWORD *a1, uint64_t a2, uint64_t (*a3)(uint64_t), unint64_t *a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  _BYTE v17[24];
  uint64_t v18;

  v10 = a3(0);
  sub_233B08530(a4, a3, a5);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v11 = sub_233B58614();
  v12 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = &v17[-v13 - 8];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v12 + 16))(&v17[-v13 - 8], a2, v10);
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v17, v18);
  sub_233B584C4();
  (*(void (**)(_BYTE *, uint64_t))(v12 + 8))(v14, v10);
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)v17);
}

uint64_t sub_233B0CDE8(_QWORD *a1, uint64_t a2)
{
  return sub_233B0CE1C(a1, a2, &qword_256112EF8, &qword_256112F00, MEMORY[0x24BEE12A0], &qword_256112F08);
}

uint64_t sub_233B0CE1C(_QWORD *a1, uint64_t a2, uint64_t *a3, unint64_t *a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  _QWORD v25[2];
  uint64_t v26;
  _BYTE v27[24];
  uint64_t v28;
  uint64_t v29;

  v12 = __swift_instantiateConcreteTypeFromMangledName(a3);
  sub_233B14140(a4, a3, (uint64_t (*)(void))sub_233B13AB8, a5);
  v26 = sub_233B57E40();
  v25[1] = sub_233B08530(&qword_25424D470, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA70]);
  v25[0] = *(int *)(__swift_instantiateConcreteTypeFromMangledName(a6) + 48);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v13 = sub_233B58614();
  v14 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, a2, v12);
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v27, v28);
  v17 = v29;
  sub_233B584C4();
  if (v17)
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v12);
  }
  else
  {
    v18 = a2 + v25[0];
    v19 = (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v12);
    v20 = v26;
    v21 = *(_QWORD *)(v26 - 8);
    MEMORY[0x24BDAC7A8](v19);
    v23 = (char *)v25 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v23, v18, v20);
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v27, v28);
    sub_233B584C4();
    (*(void (**)(char *, uint64_t))(v21 + 8))(v23, v20);
  }
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)v27);
}

uint64_t sub_233B0D04C(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE v10[24];
  uint64_t v11;
  uint64_t v12;

  v12 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_25424D900);
  sub_233B14140(&qword_25424D1E8, &qword_25424D900, (uint64_t (*)(void))sub_233B140B0, MEMORY[0x24BEE12A0]);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v4 = sub_233B58614();
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = &v10[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  (*(void (**)(_BYTE *, uint64_t *, uint64_t))(v5 + 16))(v7, &v12, v3);
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v10, v11);
  sub_233B584C4();
  (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v3);
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)v10);
}

uint64_t sub_233B0D18C(_QWORD *a1, uint64_t a2)
{
  return sub_233B0CCB8(a1, a2, (uint64_t (*)(uint64_t))type metadata accessor for DDMAppOrUpdateManagedAppRequest, &qword_256112EB0, (uint64_t)&protocol conformance descriptor for DDMAppOrUpdateManagedAppRequest);
}

uint64_t sub_233B0D1B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;

  v4[11] = a3;
  v4[12] = v3;
  v4[9] = a1;
  v4[10] = a2;
  v4[13] = *v3;
  return swift_task_switch();
}

uint64_t sub_233B0D1DC()
{
  uint64_t v0;
  char v1;
  uint64_t **v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  __int128 v21;

  *(_QWORD *)(v0 + 40) = &type metadata for FeatureFlag;
  *(_QWORD *)(v0 + 48) = sub_233B139EC();
  v1 = sub_233B57E88();
  __swift_destroy_boxed_opaque_existential_0(v0 + 16);
  if ((v1 & 1) != 0)
  {
    v2 = *(uint64_t ***)(v0 + 72);
    sub_233B1017C();
    sub_233B101C0();
    v3 = *v2;
    v4 = **v2;
    v5 = v3[1];
    v7 = v3[2];
    v6 = v3[3];
    v8 = *((_BYTE *)v3 + 32);
    v9 = swift_allocObject();
    *(_QWORD *)(v9 + 16) = v4;
    *(_QWORD *)(v9 + 24) = v5;
    *(_QWORD *)(v9 + 32) = v7;
    *(_QWORD *)(v9 + 40) = v6;
    *(_BYTE *)(v9 + 48) = v8;
    sub_233B57D98();
    swift_allocObject();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    sub_233B57D8C();
    *(_QWORD *)(v0 + 56) = sub_233B14B14;
    *(_QWORD *)(v0 + 64) = v9;
    sub_233B13C48();
    v10 = sub_233B57D80();
    *(_QWORD *)(v0 + 112) = v10;
    *(_QWORD *)(v0 + 120) = v11;
    v13 = v10;
    v14 = v11;
    v16 = *(_QWORD *)(v0 + 96);
    v15 = *(_QWORD *)(v0 + 104);
    v21 = *(_OWORD *)(v0 + 80);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v17 = *(_QWORD *)(v16 + 16);
    v18 = swift_task_alloc();
    *(_QWORD *)(v0 + 128) = v18;
    *(_QWORD *)(v18 + 16) = v17;
    *(_OWORD *)(v18 + 24) = v21;
    *(_QWORD *)(v18 + 40) = v13;
    *(_QWORD *)(v18 + 48) = v14;
    *(_QWORD *)(v18 + 56) = v15;
    v19 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 136) = v19;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256112EC8);
    *v19 = v0;
    v19[1] = sub_233B0D440;
    return sub_233B58530();
  }
  else
  {
    sub_233B13A30();
    swift_allocError();
    *v12 = 0;
    swift_willThrow();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_233B0D440()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 144) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_233B0D4AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;

  v4[11] = a3;
  v4[12] = v3;
  v4[9] = a1;
  v4[10] = a2;
  v4[13] = *v3;
  return swift_task_switch();
}

uint64_t sub_233B0D4D0()
{
  uint64_t v0;
  char v1;
  uint64_t **v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  __int128 v18;

  *(_QWORD *)(v0 + 40) = &type metadata for FeatureFlag;
  *(_QWORD *)(v0 + 48) = sub_233B139EC();
  v1 = sub_233B57E88();
  __swift_destroy_boxed_opaque_existential_0(v0 + 16);
  if ((v1 & 1) != 0)
  {
    v2 = *(uint64_t ***)(v0 + 72);
    sub_233B149FC();
    sub_233B14A40();
    v3 = *v2;
    v5 = **v2;
    v4 = v3[1];
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v5;
    *(_QWORD *)(v6 + 24) = v4;
    sub_233B57D98();
    swift_allocObject();
    swift_bridgeObjectRetain_n();
    sub_233B57D8C();
    *(_QWORD *)(v0 + 56) = sub_233B14A84;
    *(_QWORD *)(v0 + 64) = v6;
    sub_233B13C48();
    v7 = sub_233B57D80();
    *(_QWORD *)(v0 + 112) = v7;
    *(_QWORD *)(v0 + 120) = v8;
    v10 = v7;
    v11 = v8;
    v13 = *(_QWORD *)(v0 + 96);
    v12 = *(_QWORD *)(v0 + 104);
    v18 = *(_OWORD *)(v0 + 80);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    v14 = *(_QWORD *)(v13 + 16);
    v15 = swift_task_alloc();
    *(_QWORD *)(v0 + 128) = v15;
    *(_QWORD *)(v15 + 16) = v14;
    *(_OWORD *)(v15 + 24) = v18;
    *(_QWORD *)(v15 + 40) = v10;
    *(_QWORD *)(v15 + 48) = v11;
    *(_QWORD *)(v15 + 56) = v12;
    v16 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 136) = v16;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256112EC8);
    *v16 = v0;
    v16[1] = sub_233B0D708;
    return sub_233B58530();
  }
  else
  {
    sub_233B13A30();
    swift_allocError();
    *v9 = 0;
    swift_willThrow();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_233B0D708()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 144) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_233B0D774()
{
  uint64_t v0;

  sub_233B13CD8(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120));
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(unsigned __int8 *)(v0 + 152));
}

uint64_t sub_233B0D7AC()
{
  uint64_t v0;

  sub_233B13CD8(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120));
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_233B0D7EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;

  v4[11] = a3;
  v4[12] = v3;
  v4[9] = a1;
  v4[10] = a2;
  v4[13] = *v3;
  return swift_task_switch();
}

uint64_t sub_233B0D810()
{
  uint64_t v0;
  char v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  __int128 v17;

  *(_QWORD *)(v0 + 40) = &type metadata for FeatureFlag;
  *(_QWORD *)(v0 + 48) = sub_233B139EC();
  v1 = sub_233B57E88();
  __swift_destroy_boxed_opaque_existential_0(v0 + 16);
  if ((v1 & 1) != 0)
  {
    v2 = **(uint64_t ***)(v0 + 72);
    v4 = *v2;
    v3 = v2[1];
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v4;
    *(_QWORD *)(v5 + 24) = v3;
    sub_233B57D98();
    swift_allocObject();
    swift_bridgeObjectRetain_n();
    sub_233B57D8C();
    *(_QWORD *)(v0 + 56) = sub_233B149C0;
    *(_QWORD *)(v0 + 64) = v5;
    sub_233B13C48();
    v6 = sub_233B57D80();
    *(_QWORD *)(v0 + 112) = v6;
    *(_QWORD *)(v0 + 120) = v7;
    v9 = v6;
    v10 = v7;
    v12 = *(_QWORD *)(v0 + 96);
    v11 = *(_QWORD *)(v0 + 104);
    v17 = *(_OWORD *)(v0 + 80);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    v13 = *(_QWORD *)(v12 + 16);
    v14 = swift_task_alloc();
    *(_QWORD *)(v0 + 128) = v14;
    *(_QWORD *)(v14 + 16) = v13;
    *(_OWORD *)(v14 + 24) = v17;
    *(_QWORD *)(v14 + 40) = v9;
    *(_QWORD *)(v14 + 48) = v10;
    *(_QWORD *)(v14 + 56) = v11;
    v15 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 136) = v15;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256112EC8);
    *v15 = v0;
    v15[1] = sub_233B0D440;
    return sub_233B58530();
  }
  else
  {
    sub_233B13A30();
    swift_allocError();
    *v8 = 0;
    swift_willThrow();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_233B0DA40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;

  v4[12] = a3;
  v4[13] = v3;
  v4[10] = a1;
  v4[11] = a2;
  v4[14] = *v3;
  return swift_task_switch();
}

uint64_t sub_233B0DA64()
{
  uint64_t v0;
  char v1;
  uint64_t **v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  __int128 v18;

  *(_QWORD *)(v0 + 40) = &type metadata for FeatureFlag;
  *(_QWORD *)(v0 + 48) = sub_233B139EC();
  v1 = sub_233B57E88();
  __swift_destroy_boxed_opaque_existential_0(v0 + 16);
  if ((v1 & 1) != 0)
  {
    v2 = *(uint64_t ***)(v0 + 80);
    sub_233B14878();
    sub_233B14834();
    v3 = *v2;
    v5 = **v2;
    v4 = v3[1];
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v5;
    *(_QWORD *)(v6 + 24) = v4;
    sub_233B57D98();
    swift_allocObject();
    swift_bridgeObjectRetain_n();
    sub_233B57D8C();
    *(_QWORD *)(v0 + 56) = sub_233B148E0;
    *(_QWORD *)(v0 + 64) = v6;
    sub_233B13C48();
    v7 = sub_233B57D80();
    *(_QWORD *)(v0 + 120) = v7;
    *(_QWORD *)(v0 + 128) = v8;
    v10 = v7;
    v11 = v8;
    v13 = *(_QWORD *)(v0 + 104);
    v12 = *(_QWORD *)(v0 + 112);
    v18 = *(_OWORD *)(v0 + 88);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    v14 = *(_QWORD *)(v13 + 16);
    v15 = swift_task_alloc();
    *(_QWORD *)(v0 + 136) = v15;
    *(_QWORD *)(v15 + 16) = v14;
    *(_OWORD *)(v15 + 24) = v18;
    *(_QWORD *)(v15 + 40) = v10;
    *(_QWORD *)(v15 + 48) = v11;
    *(_QWORD *)(v15 + 56) = v12;
    v16 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 144) = v16;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256112FC0);
    *v16 = v0;
    v16[1] = sub_233B0DC9C;
    return sub_233B58530();
  }
  else
  {
    sub_233B13A30();
    swift_allocError();
    *v9 = 0;
    swift_willThrow();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_233B0DC9C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 152) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_233B0DD08()
{
  uint64_t v0;

  sub_233B13CD8(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 128));
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 72));
}

uint64_t sub_233B0DD40()
{
  uint64_t v0;

  sub_233B13CD8(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 128));
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_233B0DD80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;

  v4[11] = a3;
  v4[12] = v3;
  v4[9] = a1;
  v4[10] = a2;
  v4[13] = *v3;
  return swift_task_switch();
}

uint64_t sub_233B0DDA4()
{
  uint64_t v0;
  char v1;
  _BYTE **v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  __int128 v15;

  *(_QWORD *)(v0 + 40) = &type metadata for FeatureFlag;
  *(_QWORD *)(v0 + 48) = sub_233B139EC();
  v1 = sub_233B57E88();
  __swift_destroy_boxed_opaque_existential_0(v0 + 16);
  if ((v1 & 1) != 0)
  {
    v2 = *(_BYTE ***)(v0 + 72);
    sub_233B1474C();
    sub_233B14790();
    LOBYTE(v2) = **v2;
    v3 = swift_allocObject();
    *(_BYTE *)(v3 + 16) = (_BYTE)v2;
    sub_233B57D98();
    swift_allocObject();
    sub_233B57D8C();
    *(_QWORD *)(v0 + 56) = sub_233B147E4;
    *(_QWORD *)(v0 + 64) = v3;
    sub_233B13C48();
    v4 = sub_233B57D80();
    *(_QWORD *)(v0 + 112) = v4;
    *(_QWORD *)(v0 + 120) = v5;
    v7 = v4;
    v8 = v5;
    v10 = *(_QWORD *)(v0 + 96);
    v9 = *(_QWORD *)(v0 + 104);
    v15 = *(_OWORD *)(v0 + 80);
    swift_release();
    swift_release();
    v11 = *(_QWORD *)(v10 + 16);
    v12 = swift_task_alloc();
    *(_QWORD *)(v0 + 128) = v12;
    *(_QWORD *)(v12 + 16) = v11;
    *(_OWORD *)(v12 + 24) = v15;
    *(_QWORD *)(v12 + 40) = v7;
    *(_QWORD *)(v12 + 48) = v8;
    *(_QWORD *)(v12 + 56) = v9;
    v13 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 136) = v13;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256112EC8);
    *v13 = v0;
    v13[1] = sub_233B0D440;
    return sub_233B58530();
  }
  else
  {
    sub_233B13A30();
    swift_allocError();
    *v6 = 0;
    swift_willThrow();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_233B0DFB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v4[11] = a3;
  v4[12] = v3;
  v4[9] = a1;
  v4[10] = a2;
  v4[13] = *v3;
  v5 = *(_QWORD *)(type metadata accessor for VPPInstallRequest() - 8);
  v4[14] = v5;
  v4[15] = *(_QWORD *)(v5 + 64);
  v4[16] = swift_task_alloc();
  v4[17] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_233B0E030()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  __int128 v20;

  *(_QWORD *)(v0 + 40) = &type metadata for FeatureFlag;
  *(_QWORD *)(v0 + 48) = sub_233B139EC();
  v1 = sub_233B57E88();
  __swift_destroy_boxed_opaque_existential_0(v0 + 16);
  if ((v1 & 1) != 0)
  {
    v3 = *(_QWORD *)(v0 + 128);
    v2 = *(_QWORD *)(v0 + 136);
    v4 = *(_QWORD *)(v0 + 112);
    v5 = *(uint64_t **)(v0 + 72);
    sub_233B08530(&qword_256112F80, (uint64_t (*)(uint64_t))type metadata accessor for VPPInstallRequest, (uint64_t)&protocol conformance descriptor for VPPInstallRequest);
    sub_233B08530(&qword_256112F88, (uint64_t (*)(uint64_t))type metadata accessor for VPPInstallRequest, (uint64_t)&protocol conformance descriptor for VPPInstallRequest);
    sub_233B14538(*v5, v2, (uint64_t (*)(_QWORD))type metadata accessor for VPPInstallRequest);
    sub_233B14538(v2, v3, (uint64_t (*)(_QWORD))type metadata accessor for VPPInstallRequest);
    v6 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    v7 = swift_allocObject();
    sub_233B1460C(v3, v7 + v6, (uint64_t (*)(_QWORD))type metadata accessor for VPPInstallRequest);
    sub_233B57D98();
    swift_allocObject();
    sub_233B57D8C();
    *(_QWORD *)(v0 + 56) = sub_233B14650;
    *(_QWORD *)(v0 + 64) = v7;
    sub_233B13C48();
    v8 = sub_233B57D80();
    *(_QWORD *)(v0 + 144) = v8;
    *(_QWORD *)(v0 + 152) = v9;
    v10 = *(_QWORD *)(v0 + 136);
    v12 = v8;
    v13 = v9;
    v15 = *(_QWORD *)(v0 + 96);
    v14 = *(_QWORD *)(v0 + 104);
    v20 = *(_OWORD *)(v0 + 80);
    swift_release();
    swift_release();
    sub_233B146EC(v10, (uint64_t (*)(_QWORD))type metadata accessor for VPPInstallRequest);
    v16 = *(_QWORD *)(v15 + 16);
    v17 = swift_task_alloc();
    *(_QWORD *)(v0 + 160) = v17;
    *(_QWORD *)(v17 + 16) = v16;
    *(_OWORD *)(v17 + 24) = v20;
    *(_QWORD *)(v17 + 40) = v12;
    *(_QWORD *)(v17 + 48) = v13;
    *(_QWORD *)(v17 + 56) = v14;
    v18 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 168) = v18;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256112EC8);
    *v18 = v0;
    v18[1] = sub_233B0E2E8;
    return sub_233B58530();
  }
  else
  {
    sub_233B13A30();
    swift_allocError();
    *v11 = 0;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_233B0E2E8()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 176) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_233B0E354(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;

  v4[10] = a3;
  v4[11] = v3;
  v4[9] = a2;
  v4[12] = *v3;
  return swift_task_switch();
}

uint64_t sub_233B0E378()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  __int128 v13;

  *(_QWORD *)(v0 + 40) = &type metadata for FeatureFlag;
  *(_QWORD *)(v0 + 48) = sub_233B139EC();
  v1 = sub_233B57E88();
  __swift_destroy_boxed_opaque_existential_0(v0 + 16);
  if ((v1 & 1) != 0)
  {
    sub_233B57D98();
    swift_allocObject();
    sub_233B57D8C();
    *(_QWORD *)(v0 + 56) = sub_233B13D90;
    *(_QWORD *)(v0 + 64) = 0;
    sub_233B13C48();
    v2 = sub_233B57D80();
    *(_QWORD *)(v0 + 104) = v2;
    *(_QWORD *)(v0 + 112) = v3;
    v5 = v2;
    v6 = v3;
    v8 = *(_QWORD *)(v0 + 88);
    v7 = *(_QWORD *)(v0 + 96);
    v13 = *(_OWORD *)(v0 + 72);
    swift_release();
    v9 = *(_QWORD *)(v8 + 16);
    v10 = swift_task_alloc();
    *(_QWORD *)(v0 + 120) = v10;
    *(_QWORD *)(v10 + 16) = v9;
    *(_OWORD *)(v10 + 24) = v13;
    *(_QWORD *)(v10 + 40) = v5;
    *(_QWORD *)(v10 + 48) = v6;
    *(_QWORD *)(v10 + 56) = v7;
    v11 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 128) = v11;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256112EC8);
    *v11 = v0;
    v11[1] = sub_233B0E548;
    return sub_233B58530();
  }
  else
  {
    sub_233B13A30();
    swift_allocError();
    *v4 = 0;
    swift_willThrow();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_233B0E548()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 136) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_233B0E5B4()
{
  uint64_t v0;

  sub_233B13CD8(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112));
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(unsigned __int8 *)(v0 + 144));
}

uint64_t sub_233B0E5EC()
{
  uint64_t v0;

  sub_233B13CD8(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112));
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_233B0E62C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;

  v4[11] = a3;
  v4[12] = v3;
  v4[9] = a1;
  v4[10] = a2;
  v4[13] = *v3;
  return swift_task_switch();
}

uint64_t sub_233B0E650()
{
  uint64_t v0;
  char v1;
  uint64_t **v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  __int128 v20;

  *(_QWORD *)(v0 + 40) = &type metadata for FeatureFlag;
  *(_QWORD *)(v0 + 48) = sub_233B139EC();
  v1 = sub_233B57E88();
  __swift_destroy_boxed_opaque_existential_0(v0 + 16);
  if ((v1 & 1) != 0)
  {
    v2 = *(uint64_t ***)(v0 + 72);
    sub_233B14444();
    sub_233B14488();
    v3 = *v2;
    v4 = **v2;
    v5 = v3[1];
    v7 = v3[2];
    v6 = v3[3];
    v8 = (_QWORD *)swift_allocObject();
    v8[2] = v4;
    v8[3] = v5;
    v8[4] = v7;
    v8[5] = v6;
    sub_233B57D98();
    swift_allocObject();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    sub_233B57D8C();
    *(_QWORD *)(v0 + 56) = sub_233B144D4;
    *(_QWORD *)(v0 + 64) = v8;
    sub_233B13C48();
    v9 = sub_233B57D80();
    *(_QWORD *)(v0 + 112) = v9;
    *(_QWORD *)(v0 + 120) = v10;
    v12 = v9;
    v13 = v10;
    v15 = *(_QWORD *)(v0 + 96);
    v14 = *(_QWORD *)(v0 + 104);
    v20 = *(_OWORD *)(v0 + 80);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v16 = *(_QWORD *)(v15 + 16);
    v17 = swift_task_alloc();
    *(_QWORD *)(v0 + 128) = v17;
    *(_QWORD *)(v17 + 16) = v16;
    *(_OWORD *)(v17 + 24) = v20;
    *(_QWORD *)(v17 + 40) = v12;
    *(_QWORD *)(v17 + 48) = v13;
    *(_QWORD *)(v17 + 56) = v14;
    v18 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 136) = v18;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256112EC8);
    *v18 = v0;
    v18[1] = sub_233B0D440;
    return sub_233B58530();
  }
  else
  {
    sub_233B13A30();
    swift_allocError();
    *v11 = 0;
    swift_willThrow();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_233B0E8AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;

  v4[11] = a3;
  v4[12] = v3;
  v4[9] = a1;
  v4[10] = a2;
  v4[13] = *v3;
  return swift_task_switch();
}

uint64_t sub_233B0E8D0()
{
  uint64_t v0;
  char v1;
  _BYTE **v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  __int128 v15;

  *(_QWORD *)(v0 + 40) = &type metadata for FeatureFlag;
  *(_QWORD *)(v0 + 48) = sub_233B139EC();
  v1 = sub_233B57E88();
  __swift_destroy_boxed_opaque_existential_0(v0 + 16);
  if ((v1 & 1) != 0)
  {
    v2 = *(_BYTE ***)(v0 + 72);
    sub_233B14370();
    sub_233B143B4();
    LOBYTE(v2) = **v2;
    v3 = swift_allocObject();
    *(_BYTE *)(v3 + 16) = (_BYTE)v2;
    sub_233B57D98();
    swift_allocObject();
    sub_233B57D8C();
    *(_QWORD *)(v0 + 56) = sub_233B14408;
    *(_QWORD *)(v0 + 64) = v3;
    sub_233B13C48();
    v4 = sub_233B57D80();
    *(_QWORD *)(v0 + 112) = v4;
    *(_QWORD *)(v0 + 120) = v5;
    v7 = v4;
    v8 = v5;
    v10 = *(_QWORD *)(v0 + 96);
    v9 = *(_QWORD *)(v0 + 104);
    v15 = *(_OWORD *)(v0 + 80);
    swift_release();
    swift_release();
    v11 = *(_QWORD *)(v10 + 16);
    v12 = swift_task_alloc();
    *(_QWORD *)(v0 + 128) = v12;
    *(_QWORD *)(v12 + 16) = v11;
    *(_OWORD *)(v12 + 24) = v15;
    *(_QWORD *)(v12 + 40) = v7;
    *(_QWORD *)(v12 + 48) = v8;
    *(_QWORD *)(v12 + 56) = v9;
    v13 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 136) = v13;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256112EC8);
    *v13 = v0;
    v13[1] = sub_233B0D440;
    return sub_233B58530();
  }
  else
  {
    sub_233B13A30();
    swift_allocError();
    *v6 = 0;
    swift_willThrow();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_233B0EAE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;

  v4[11] = a3;
  v4[12] = v3;
  v4[9] = a1;
  v4[10] = a2;
  v4[13] = *v3;
  return swift_task_switch();
}

uint64_t sub_233B0EB04()
{
  uint64_t v0;
  char v1;
  _BYTE **v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  __int128 v15;

  *(_QWORD *)(v0 + 40) = &type metadata for FeatureFlag;
  *(_QWORD *)(v0 + 48) = sub_233B139EC();
  v1 = sub_233B57E88();
  __swift_destroy_boxed_opaque_existential_0(v0 + 16);
  if ((v1 & 1) != 0)
  {
    v2 = *(_BYTE ***)(v0 + 72);
    sub_233B14288();
    sub_233B142CC();
    LOBYTE(v2) = **v2;
    v3 = swift_allocObject();
    *(_BYTE *)(v3 + 16) = (_BYTE)v2;
    sub_233B57D98();
    swift_allocObject();
    sub_233B57D8C();
    *(_QWORD *)(v0 + 56) = sub_233B14320;
    *(_QWORD *)(v0 + 64) = v3;
    sub_233B13C48();
    v4 = sub_233B57D80();
    *(_QWORD *)(v0 + 112) = v4;
    *(_QWORD *)(v0 + 120) = v5;
    v7 = v4;
    v8 = v5;
    v10 = *(_QWORD *)(v0 + 96);
    v9 = *(_QWORD *)(v0 + 104);
    v15 = *(_OWORD *)(v0 + 80);
    swift_release();
    swift_release();
    v11 = *(_QWORD *)(v10 + 16);
    v12 = swift_task_alloc();
    *(_QWORD *)(v0 + 128) = v12;
    *(_QWORD *)(v12 + 16) = v11;
    *(_OWORD *)(v12 + 24) = v15;
    *(_QWORD *)(v12 + 40) = v7;
    *(_QWORD *)(v12 + 48) = v8;
    *(_QWORD *)(v12 + 56) = v9;
    v13 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 136) = v13;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256112EC8);
    *v13 = v0;
    v13[1] = sub_233B0D440;
    return sub_233B58530();
  }
  else
  {
    sub_233B13A30();
    swift_allocError();
    *v6 = 0;
    swift_willThrow();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_233B0ED14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v4[11] = a3;
  v4[12] = v3;
  v4[9] = a1;
  v4[10] = a2;
  v4[13] = *v3;
  v5 = *(_QWORD *)(type metadata accessor for InstallEnterpriseManifestRequest() - 8);
  v4[14] = v5;
  v4[15] = *(_QWORD *)(v5 + 64);
  v4[16] = swift_task_alloc();
  v4[17] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_233B0ED90()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  __int128 v20;

  *(_QWORD *)(v0 + 40) = &type metadata for FeatureFlag;
  *(_QWORD *)(v0 + 48) = sub_233B139EC();
  v1 = sub_233B57E88();
  __swift_destroy_boxed_opaque_existential_0(v0 + 16);
  if ((v1 & 1) != 0)
  {
    v3 = *(_QWORD *)(v0 + 128);
    v2 = *(_QWORD *)(v0 + 136);
    v4 = *(_QWORD *)(v0 + 112);
    v5 = *(uint64_t **)(v0 + 72);
    sub_233B08530(&qword_256112F18, (uint64_t (*)(uint64_t))type metadata accessor for InstallEnterpriseManifestRequest, (uint64_t)&protocol conformance descriptor for InstallEnterpriseManifestRequest);
    sub_233B08530(&qword_256112F20, (uint64_t (*)(uint64_t))type metadata accessor for InstallEnterpriseManifestRequest, (uint64_t)&protocol conformance descriptor for InstallEnterpriseManifestRequest);
    sub_233B14538(*v5, v2, (uint64_t (*)(_QWORD))type metadata accessor for InstallEnterpriseManifestRequest);
    sub_233B14538(v2, v3, (uint64_t (*)(_QWORD))type metadata accessor for InstallEnterpriseManifestRequest);
    v6 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    v7 = swift_allocObject();
    sub_233B1460C(v3, v7 + v6, (uint64_t (*)(_QWORD))type metadata accessor for InstallEnterpriseManifestRequest);
    sub_233B57D98();
    swift_allocObject();
    sub_233B57D8C();
    *(_QWORD *)(v0 + 56) = sub_233B14224;
    *(_QWORD *)(v0 + 64) = v7;
    sub_233B13C48();
    v8 = sub_233B57D80();
    *(_QWORD *)(v0 + 144) = v8;
    *(_QWORD *)(v0 + 152) = v9;
    v10 = *(_QWORD *)(v0 + 136);
    v12 = v8;
    v13 = v9;
    v15 = *(_QWORD *)(v0 + 96);
    v14 = *(_QWORD *)(v0 + 104);
    v20 = *(_OWORD *)(v0 + 80);
    swift_release();
    swift_release();
    sub_233B146EC(v10, (uint64_t (*)(_QWORD))type metadata accessor for InstallEnterpriseManifestRequest);
    v16 = *(_QWORD *)(v15 + 16);
    v17 = swift_task_alloc();
    *(_QWORD *)(v0 + 160) = v17;
    *(_QWORD *)(v17 + 16) = v16;
    *(_OWORD *)(v17 + 24) = v20;
    *(_QWORD *)(v17 + 40) = v12;
    *(_QWORD *)(v17 + 48) = v13;
    *(_QWORD *)(v17 + 56) = v14;
    v18 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 168) = v18;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256112EC8);
    *v18 = v0;
    v18[1] = sub_233B0E2E8;
    return sub_233B58530();
  }
  else
  {
    sub_233B13A30();
    swift_allocError();
    *v11 = 0;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_233B0F048(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;

  v4[11] = a3;
  v4[12] = v3;
  v4[10] = a2;
  v4[13] = *v3;
  return swift_task_switch();
}

uint64_t sub_233B0F06C()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  __int128 v13;

  *(_QWORD *)(v0 + 40) = &type metadata for FeatureFlag;
  *(_QWORD *)(v0 + 48) = sub_233B139EC();
  v1 = sub_233B57E88();
  __swift_destroy_boxed_opaque_existential_0(v0 + 16);
  if ((v1 & 1) != 0)
  {
    sub_233B57D98();
    swift_allocObject();
    sub_233B57D8C();
    *(_QWORD *)(v0 + 56) = sub_233B13D90;
    *(_QWORD *)(v0 + 64) = 0;
    sub_233B13C48();
    v2 = sub_233B57D80();
    *(_QWORD *)(v0 + 112) = v2;
    *(_QWORD *)(v0 + 120) = v3;
    v5 = v2;
    v6 = v3;
    v8 = *(_QWORD *)(v0 + 96);
    v7 = *(_QWORD *)(v0 + 104);
    v13 = *(_OWORD *)(v0 + 80);
    swift_release();
    v9 = *(_QWORD *)(v8 + 16);
    v10 = swift_task_alloc();
    *(_QWORD *)(v0 + 128) = v10;
    *(_QWORD *)(v10 + 16) = v9;
    *(_OWORD *)(v10 + 24) = v13;
    *(_QWORD *)(v10 + 40) = v5;
    *(_QWORD *)(v10 + 48) = v6;
    *(_QWORD *)(v10 + 56) = v7;
    v11 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 136) = v11;
    __swift_instantiateConcreteTypeFromMangledName(&qword_25424CF18);
    *v11 = v0;
    v11[1] = sub_233B0F23C;
    return sub_233B58530();
  }
  else
  {
    sub_233B13A30();
    swift_allocError();
    *v4 = 0;
    swift_willThrow();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_233B0F23C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 144) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_233B0F2A8()
{
  uint64_t v0;

  sub_233B13CD8(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120));
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 72));
}

uint64_t sub_233B0F2E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4[12] = a3;
  v4[13] = v3;
  v4[10] = a1;
  v4[11] = a2;
  v4[14] = *v3;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_25424D510);
  v4[15] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[16] = v6;
  v4[17] = *(_QWORD *)(v6 + 64);
  v4[18] = swift_task_alloc();
  v4[19] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_233B0F364()
{
  uint64_t v0;
  char v1;
  char *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t);
  char *v9;
  uint64_t v10;
  void (*v11)(char *, uint64_t, uint64_t);
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  __int128 v26;

  *(_QWORD *)(v0 + 40) = &type metadata for FeatureFlag;
  *(_QWORD *)(v0 + 48) = sub_233B139EC();
  v1 = sub_233B57E88();
  __swift_destroy_boxed_opaque_existential_0(v0 + 16);
  if ((v1 & 1) != 0)
  {
    v2 = *(char **)(v0 + 144);
    v3 = *(_QWORD **)(v0 + 152);
    v4 = *(_QWORD *)(v0 + 128);
    v5 = *(_QWORD *)(v0 + 120);
    v6 = *(_QWORD *)(v0 + 80);
    sub_233B14140(&qword_25424D508, &qword_25424D4F8, (uint64_t (*)(void))sub_233B13A74, MEMORY[0x24BEE1720]);
    sub_233B14140(&qword_25424D500, &qword_25424D4F8, (uint64_t (*)(void))sub_233B13AB8, MEMORY[0x24BEE1700]);
    *v3 = **(_QWORD **)v6;
    v7 = sub_233B57E40();
    v8 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58];
    sub_233B08530(&qword_25424D478, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAA8]);
    sub_233B08530(&qword_25424D470, v8, MEMORY[0x24BDCEA70]);
    v9 = (char *)v3 + *(int *)(v5 + 48);
    v10 = *(_QWORD *)(v6 + 8);
    v11 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v11(v9, v10, v7);
    *(_QWORD *)v2 = *v3;
    v11(&v2[*(int *)(v5 + 48)], (uint64_t)v9, v7);
    v12 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    v13 = swift_allocObject();
    sub_233B13B8C((uint64_t)v2, v13 + v12);
    sub_233B57D98();
    swift_allocObject();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_233B57D8C();
    *(_QWORD *)(v0 + 56) = sub_233B13BD4;
    *(_QWORD *)(v0 + 64) = v13;
    sub_233B13C48();
    v14 = sub_233B57D80();
    *(_QWORD *)(v0 + 184) = v14;
    *(_QWORD *)(v0 + 192) = v15;
    v16 = *(_QWORD *)(v0 + 152);
    v18 = v14;
    v19 = v15;
    v21 = *(_QWORD *)(v0 + 104);
    v20 = *(_QWORD *)(v0 + 112);
    v26 = *(_OWORD *)(v0 + 88);
    swift_release();
    swift_release();
    sub_233B13C8C(v16);
    v22 = *(_QWORD *)(v21 + 16);
    v23 = swift_task_alloc();
    *(_QWORD *)(v0 + 160) = v23;
    *(_QWORD *)(v23 + 16) = v22;
    *(_OWORD *)(v23 + 24) = v26;
    *(_QWORD *)(v23 + 40) = v18;
    *(_QWORD *)(v23 + 48) = v19;
    *(_QWORD *)(v23 + 56) = v20;
    v24 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 168) = v24;
    *v24 = v0;
    v24[1] = sub_233B0F694;
    return sub_233B58530();
  }
  else
  {
    sub_233B13A30();
    swift_allocError();
    *v17 = 0;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_233B0F694()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 176) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_233B0F700()
{
  uint64_t v0;
  uint64_t v1;

  sub_233B13CD8(*(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 192));
  v1 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

uint64_t sub_233B0F758()
{
  uint64_t v0;

  sub_233B13CD8(*(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 192));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_233B0F7A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;

  v4[11] = a3;
  v4[12] = v3;
  v4[10] = a2;
  v4[13] = *v3;
  return swift_task_switch();
}

uint64_t sub_233B0F7CC()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  __int128 v13;

  *(_QWORD *)(v0 + 40) = &type metadata for FeatureFlag;
  *(_QWORD *)(v0 + 48) = sub_233B139EC();
  v1 = sub_233B57E88();
  __swift_destroy_boxed_opaque_existential_0(v0 + 16);
  if ((v1 & 1) != 0)
  {
    sub_233B57D98();
    swift_allocObject();
    sub_233B57D8C();
    *(_QWORD *)(v0 + 56) = sub_233B13D90;
    *(_QWORD *)(v0 + 64) = 0;
    sub_233B13C48();
    v2 = sub_233B57D80();
    *(_QWORD *)(v0 + 112) = v2;
    *(_QWORD *)(v0 + 120) = v3;
    v5 = v2;
    v6 = v3;
    v8 = *(_QWORD *)(v0 + 96);
    v7 = *(_QWORD *)(v0 + 104);
    v13 = *(_OWORD *)(v0 + 80);
    swift_release();
    v9 = *(_QWORD *)(v8 + 16);
    v10 = swift_task_alloc();
    *(_QWORD *)(v0 + 128) = v10;
    *(_QWORD *)(v10 + 16) = v9;
    *(_OWORD *)(v10 + 24) = v13;
    *(_QWORD *)(v10 + 40) = v5;
    *(_QWORD *)(v10 + 48) = v6;
    *(_QWORD *)(v10 + 56) = v7;
    v11 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 136) = v11;
    *v11 = v0;
    v11[1] = sub_233B0F994;
    return sub_233B58530();
  }
  else
  {
    sub_233B13A30();
    swift_allocError();
    *v4 = 0;
    swift_willThrow();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_233B0F994()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 144) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_233B0FA00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v4[11] = a3;
  v4[12] = v3;
  v4[9] = a1;
  v4[10] = a2;
  v4[13] = *v3;
  v5 = *(_QWORD *)(type metadata accessor for OAuthAuthorizeRequest() - 8);
  v4[14] = v5;
  v4[15] = *(_QWORD *)(v5 + 64);
  v4[16] = swift_task_alloc();
  v4[17] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_233B0FA7C()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  __int128 v20;

  *(_QWORD *)(v0 + 40) = &type metadata for FeatureFlag;
  *(_QWORD *)(v0 + 48) = sub_233B139EC();
  v1 = sub_233B57E88();
  __swift_destroy_boxed_opaque_existential_0(v0 + 16);
  if ((v1 & 1) != 0)
  {
    v3 = *(_QWORD *)(v0 + 128);
    v2 = *(_QWORD *)(v0 + 136);
    v4 = *(_QWORD *)(v0 + 112);
    v5 = *(uint64_t **)(v0 + 72);
    sub_233B08530(&qword_256112EE0, (uint64_t (*)(uint64_t))type metadata accessor for OAuthAuthorizeRequest, (uint64_t)&protocol conformance descriptor for OAuthAuthorizeRequest);
    sub_233B08530(&qword_256112EE8, (uint64_t (*)(uint64_t))type metadata accessor for OAuthAuthorizeRequest, (uint64_t)&protocol conformance descriptor for OAuthAuthorizeRequest);
    sub_233B14538(*v5, v2, (uint64_t (*)(_QWORD))type metadata accessor for OAuthAuthorizeRequest);
    sub_233B14538(v2, v3, (uint64_t (*)(_QWORD))type metadata accessor for OAuthAuthorizeRequest);
    v6 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    v7 = swift_allocObject();
    sub_233B1460C(v3, v7 + v6, (uint64_t (*)(_QWORD))type metadata accessor for OAuthAuthorizeRequest);
    sub_233B57D98();
    swift_allocObject();
    sub_233B57D8C();
    *(_QWORD *)(v0 + 56) = sub_233B14060;
    *(_QWORD *)(v0 + 64) = v7;
    sub_233B13C48();
    v8 = sub_233B57D80();
    *(_QWORD *)(v0 + 144) = v8;
    *(_QWORD *)(v0 + 152) = v9;
    v10 = *(_QWORD *)(v0 + 136);
    v12 = v8;
    v13 = v9;
    v15 = *(_QWORD *)(v0 + 96);
    v14 = *(_QWORD *)(v0 + 104);
    v20 = *(_OWORD *)(v0 + 80);
    swift_release();
    swift_release();
    sub_233B146EC(v10, (uint64_t (*)(_QWORD))type metadata accessor for OAuthAuthorizeRequest);
    v16 = *(_QWORD *)(v15 + 16);
    v17 = swift_task_alloc();
    *(_QWORD *)(v0 + 160) = v17;
    *(_QWORD *)(v17 + 16) = v16;
    *(_OWORD *)(v17 + 24) = v20;
    *(_QWORD *)(v17 + 40) = v12;
    *(_QWORD *)(v17 + 48) = v13;
    *(_QWORD *)(v17 + 56) = v14;
    v18 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 168) = v18;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256112EC8);
    *v18 = v0;
    v18[1] = sub_233B0E2E8;
    return sub_233B58530();
  }
  else
  {
    sub_233B13A30();
    swift_allocError();
    *v11 = 0;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_233B0FD34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v4[11] = a3;
  v4[12] = v3;
  v4[9] = a1;
  v4[10] = a2;
  v4[13] = *v3;
  v5 = *(_QWORD *)(type metadata accessor for DDMAppOrUpdateManagedAppRequest() - 8);
  v4[14] = v5;
  v4[15] = *(_QWORD *)(v5 + 64);
  v4[16] = swift_task_alloc();
  v4[17] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_233B0FDB0()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  __int128 v20;

  *(_QWORD *)(v0 + 40) = &type metadata for FeatureFlag;
  *(_QWORD *)(v0 + 48) = sub_233B139EC();
  v1 = sub_233B57E88();
  __swift_destroy_boxed_opaque_existential_0(v0 + 16);
  if ((v1 & 1) != 0)
  {
    v3 = *(_QWORD *)(v0 + 128);
    v2 = *(_QWORD *)(v0 + 136);
    v4 = *(_QWORD *)(v0 + 112);
    v5 = *(uint64_t **)(v0 + 72);
    sub_233B08530(&qword_256112EC0, (uint64_t (*)(uint64_t))type metadata accessor for DDMAppOrUpdateManagedAppRequest, (uint64_t)&protocol conformance descriptor for DDMAppOrUpdateManagedAppRequest);
    sub_233B08530(&qword_256112EB0, (uint64_t (*)(uint64_t))type metadata accessor for DDMAppOrUpdateManagedAppRequest, (uint64_t)&protocol conformance descriptor for DDMAppOrUpdateManagedAppRequest);
    sub_233B14538(*v5, v2, (uint64_t (*)(_QWORD))type metadata accessor for DDMAppOrUpdateManagedAppRequest);
    sub_233B14538(v2, v3, (uint64_t (*)(_QWORD))type metadata accessor for DDMAppOrUpdateManagedAppRequest);
    v6 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    v7 = swift_allocObject();
    sub_233B1460C(v3, v7 + v6, (uint64_t (*)(_QWORD))type metadata accessor for DDMAppOrUpdateManagedAppRequest);
    sub_233B57D98();
    swift_allocObject();
    sub_233B57D8C();
    *(_QWORD *)(v0 + 56) = sub_233B13F84;
    *(_QWORD *)(v0 + 64) = v7;
    sub_233B13C48();
    v8 = sub_233B57D80();
    *(_QWORD *)(v0 + 144) = v8;
    *(_QWORD *)(v0 + 152) = v9;
    v10 = *(_QWORD *)(v0 + 136);
    v12 = v8;
    v13 = v9;
    v15 = *(_QWORD *)(v0 + 96);
    v14 = *(_QWORD *)(v0 + 104);
    v20 = *(_OWORD *)(v0 + 80);
    swift_release();
    swift_release();
    sub_233B146EC(v10, (uint64_t (*)(_QWORD))type metadata accessor for DDMAppOrUpdateManagedAppRequest);
    v16 = *(_QWORD *)(v15 + 16);
    v17 = swift_task_alloc();
    *(_QWORD *)(v0 + 160) = v17;
    *(_QWORD *)(v17 + 16) = v16;
    *(_OWORD *)(v17 + 24) = v20;
    *(_QWORD *)(v17 + 40) = v12;
    *(_QWORD *)(v17 + 48) = v13;
    *(_QWORD *)(v17 + 56) = v14;
    v18 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 168) = v18;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256112EC8);
    *v18 = v0;
    v18[1] = sub_233B10068;
    return sub_233B58530();
  }
  else
  {
    sub_233B13A30();
    swift_allocError();
    *v11 = 0;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_233B10068()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 176) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_233B100D4()
{
  uint64_t v0;
  uint64_t v1;

  sub_233B13CD8(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 152));
  v1 = *(unsigned __int8 *)(v0 + 184);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

uint64_t sub_233B1012C()
{
  uint64_t v0;

  sub_233B13CD8(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 152));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_233B1017C()
{
  unint64_t result;

  result = qword_256112E58;
  if (!qword_256112E58)
  {
    result = MEMORY[0x23493D400](&protocol conformance descriptor for ManagedAppInstallRequest, &type metadata for ManagedAppInstallRequest);
    atomic_store(result, (unint64_t *)&qword_256112E58);
  }
  return result;
}

unint64_t sub_233B101C0()
{
  unint64_t result;

  result = qword_256112E60;
  if (!qword_256112E60)
  {
    result = MEMORY[0x23493D400](&protocol conformance descriptor for ManagedAppInstallRequest, &type metadata for ManagedAppInstallRequest);
    atomic_store(result, (unint64_t *)&qword_256112E60);
  }
  return result;
}

unint64_t sub_233B10204()
{
  unint64_t result;

  result = qword_256112E78;
  if (!qword_256112E78)
  {
    result = MEMORY[0x23493D400](&unk_233B593AC, &type metadata for ManagedAppInstallRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256112E78);
  }
  return result;
}

uint64_t destroy for ManagedAppInstallRequest()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ManagedAppInstallRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ManagedAppInstallRequest(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

uint64_t assignWithTake for ManagedAppInstallRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for ManagedAppInstallRequest(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 33))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ManagedAppInstallRequest(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 33) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ManagedAppInstallRequest()
{
  return &type metadata for ManagedAppInstallRequest;
}

uint64_t storeEnumTagSinglePayload for ManagedAppInstallRequest.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_233B10484 + 4 * byte_233B59265[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_233B104B8 + 4 * byte_233B59260[v4]))();
}

uint64_t sub_233B104B8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_233B104C0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x233B104C8);
  return result;
}

uint64_t sub_233B104D4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x233B104DCLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_233B104E0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_233B104E8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ManagedAppInstallRequest.CodingKeys()
{
  return &type metadata for ManagedAppInstallRequest.CodingKeys;
}

unint64_t sub_233B10508()
{
  unint64_t result;

  result = qword_256112E88;
  if (!qword_256112E88)
  {
    result = MEMORY[0x23493D400](&unk_233B59384, &type metadata for ManagedAppInstallRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256112E88);
  }
  return result;
}

unint64_t sub_233B10550()
{
  unint64_t result;

  result = qword_256112E90;
  if (!qword_256112E90)
  {
    result = MEMORY[0x23493D400](&unk_233B592F4, &type metadata for ManagedAppInstallRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256112E90);
  }
  return result;
}

unint64_t sub_233B10598()
{
  unint64_t result;

  result = qword_256112E98;
  if (!qword_256112E98)
  {
    result = MEMORY[0x23493D400](&unk_233B5931C, &type metadata for ManagedAppInstallRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256112E98);
  }
  return result;
}

uint64_t sub_233B105DC(uint64_t a1, void *a2, void (*a3)(uint64_t, uint64_t, uint64_t, uint64_t (*)(), uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void (*v13)(char *, uint64_t, uint64_t);
  unint64_t v14;
  uint64_t v15;
  void (*v16)(unint64_t, char *, uint64_t);
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t, uint64_t, uint64_t (*)(), uint64_t);
  uint64_t v30;
  uint64_t v31[4];
  _QWORD aBlock[6];

  v25 = a7;
  v26 = a5;
  v27 = a6;
  v28 = a4;
  v29 = a3;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256112ED0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v13(v12, a1, v9);
  v14 = (*(unsigned __int8 *)(v10 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v15 = swift_allocObject();
  v16 = *(void (**)(unint64_t, char *, uint64_t))(v10 + 32);
  v16(v15 + v14, v12, v9);
  aBlock[4] = sub_233B14268;
  aBlock[5] = v15;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_233B31DD0;
  aBlock[3] = &block_descriptor_167;
  v17 = _Block_copy(aBlock);
  swift_release();
  v18 = objc_msgSend(a2, sel_remoteObjectProxyWithErrorHandler_, v17);
  _Block_release(v17);
  sub_233B58218();
  swift_unknownObjectRelease();
  sub_233B03518((uint64_t)aBlock, (uint64_t)v31);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25424D490);
  if (swift_dynamicCast())
  {
    v19 = v30;
    v13(v12, a1, v9);
    v20 = swift_allocObject();
    v16(v20 + v14, v12, v9);
    v21 = v26;
    *(_QWORD *)(v20 + ((v14 + v11 + 7) & 0xFFFFFFFFFFFFFFF8)) = v25;
    v29(v19, v21, v27, sub_233B13FE8, v20);
    swift_unknownObjectRelease();
    swift_release();
  }
  else
  {
    sub_233B13A30();
    v22 = swift_allocError();
    *v23 = 0;
    v31[0] = v22;
    sub_233B580C8();
  }
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)aBlock);
}

uint64_t sub_233B1083C(uint64_t a1, void *a2, void (*a3)(uint64_t, uint64_t, uint64_t, uint64_t (*)(), uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void (*v13)(char *, uint64_t, uint64_t);
  unint64_t v14;
  uint64_t v15;
  void (*v16)(unint64_t, char *, uint64_t);
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t, uint64_t, uint64_t (*)(), uint64_t);
  uint64_t v30;
  uint64_t v31[4];
  _QWORD aBlock[6];

  v25 = a7;
  v26 = a5;
  v27 = a6;
  v28 = a4;
  v29 = a3;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256112ED0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v13(v12, a1, v9);
  v14 = (*(unsigned __int8 *)(v10 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v15 = swift_allocObject();
  v16 = *(void (**)(unint64_t, char *, uint64_t))(v10 + 32);
  v16(v15 + v14, v12, v9);
  aBlock[4] = sub_233B14268;
  aBlock[5] = v15;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_233B31DD0;
  aBlock[3] = &block_descriptor_156;
  v17 = _Block_copy(aBlock);
  swift_release();
  v18 = objc_msgSend(a2, sel_remoteObjectProxyWithErrorHandler_, v17);
  _Block_release(v17);
  sub_233B58218();
  swift_unknownObjectRelease();
  sub_233B03518((uint64_t)aBlock, (uint64_t)v31);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25424D490);
  if (swift_dynamicCast())
  {
    v19 = v30;
    v13(v12, a1, v9);
    v20 = swift_allocObject();
    v16(v20 + v14, v12, v9);
    v21 = v26;
    *(_QWORD *)(v20 + ((v14 + v11 + 7) & 0xFFFFFFFFFFFFFFF8)) = v25;
    v29(v19, v21, v27, sub_233B13FE8, v20);
    swift_unknownObjectRelease();
    swift_release();
  }
  else
  {
    sub_233B13A30();
    v22 = swift_allocError();
    *v23 = 0;
    v31[0] = v22;
    sub_233B580C8();
  }
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)aBlock);
}

uint64_t sub_233B10A9C(uint64_t a1, void *a2, void (*a3)(uint64_t, uint64_t, uint64_t, uint64_t (*)(), uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void (*v13)(char *, uint64_t, uint64_t);
  unint64_t v14;
  uint64_t v15;
  void (*v16)(unint64_t, char *, uint64_t);
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t, uint64_t, uint64_t (*)(), uint64_t);
  uint64_t v30;
  uint64_t v31[4];
  _QWORD aBlock[6];

  v25 = a7;
  v26 = a5;
  v27 = a6;
  v28 = a4;
  v29 = a3;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256112ED0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v13(v12, a1, v9);
  v14 = (*(unsigned __int8 *)(v10 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v15 = swift_allocObject();
  v16 = *(void (**)(unint64_t, char *, uint64_t))(v10 + 32);
  v16(v15 + v14, v12, v9);
  aBlock[4] = sub_233B14268;
  aBlock[5] = v15;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_233B31DD0;
  aBlock[3] = &block_descriptor_145;
  v17 = _Block_copy(aBlock);
  swift_release();
  v18 = objc_msgSend(a2, sel_remoteObjectProxyWithErrorHandler_, v17);
  _Block_release(v17);
  sub_233B58218();
  swift_unknownObjectRelease();
  sub_233B03518((uint64_t)aBlock, (uint64_t)v31);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25424D490);
  if (swift_dynamicCast())
  {
    v19 = v30;
    v13(v12, a1, v9);
    v20 = swift_allocObject();
    v16(v20 + v14, v12, v9);
    v21 = v26;
    *(_QWORD *)(v20 + ((v14 + v11 + 7) & 0xFFFFFFFFFFFFFFF8)) = v25;
    v29(v19, v21, v27, sub_233B13FE8, v20);
    swift_unknownObjectRelease();
    swift_release();
  }
  else
  {
    sub_233B13A30();
    v22 = swift_allocError();
    *v23 = 0;
    v31[0] = v22;
    sub_233B580C8();
  }
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)aBlock);
}

uint64_t sub_233B10CFC(uint64_t a1, void *a2, void (*a3)(uint64_t, uint64_t, uint64_t, uint64_t (*)(uint64_t a1, uint64_t a2), uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void (*v13)(char *, uint64_t, uint64_t);
  unint64_t v14;
  uint64_t v15;
  void (*v16)(unint64_t, char *, uint64_t);
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t, uint64_t, uint64_t (*)(uint64_t, uint64_t), uint64_t);
  uint64_t v30;
  uint64_t v31[4];
  _QWORD aBlock[6];

  v25 = a7;
  v26 = a5;
  v27 = a6;
  v28 = a4;
  v29 = a3;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256112FC8);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v13(v12, a1, v9);
  v14 = (*(unsigned __int8 *)(v10 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v15 = swift_allocObject();
  v16 = *(void (**)(unint64_t, char *, uint64_t))(v10 + 32);
  v16(v15 + v14, v12, v9);
  aBlock[4] = sub_233B14910;
  aBlock[5] = v15;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_233B31DD0;
  aBlock[3] = &block_descriptor_134;
  v17 = _Block_copy(aBlock);
  swift_release();
  v18 = objc_msgSend(a2, sel_remoteObjectProxyWithErrorHandler_, v17);
  _Block_release(v17);
  sub_233B58218();
  swift_unknownObjectRelease();
  sub_233B03518((uint64_t)aBlock, (uint64_t)v31);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25424D490);
  if (swift_dynamicCast())
  {
    v19 = v30;
    v13(v12, a1, v9);
    v20 = swift_allocObject();
    v16(v20 + v14, v12, v9);
    v21 = v26;
    *(_QWORD *)(v20 + ((v14 + v11 + 7) & 0xFFFFFFFFFFFFFFF8)) = v25;
    v29(v19, v21, v27, sub_233B14930, v20);
    swift_unknownObjectRelease();
    swift_release();
  }
  else
  {
    sub_233B13A30();
    v22 = swift_allocError();
    *v23 = 0;
    v31[0] = v22;
    sub_233B580C8();
  }
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)aBlock);
}

uint64_t sub_233B10F5C(uint64_t a1, void *a2, void (*a3)(uint64_t, uint64_t, uint64_t, uint64_t (*)(), uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void (*v13)(char *, uint64_t, uint64_t);
  unint64_t v14;
  uint64_t v15;
  void (*v16)(unint64_t, char *, uint64_t);
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t, uint64_t, uint64_t (*)(), uint64_t);
  uint64_t v30;
  uint64_t v31[4];
  _QWORD aBlock[6];

  v25 = a7;
  v26 = a5;
  v27 = a6;
  v28 = a4;
  v29 = a3;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256112ED0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v13(v12, a1, v9);
  v14 = (*(unsigned __int8 *)(v10 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v15 = swift_allocObject();
  v16 = *(void (**)(unint64_t, char *, uint64_t))(v10 + 32);
  v16(v15 + v14, v12, v9);
  aBlock[4] = sub_233B14268;
  aBlock[5] = v15;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_233B31DD0;
  aBlock[3] = &block_descriptor_123;
  v17 = _Block_copy(aBlock);
  swift_release();
  v18 = objc_msgSend(a2, sel_remoteObjectProxyWithErrorHandler_, v17);
  _Block_release(v17);
  sub_233B58218();
  swift_unknownObjectRelease();
  sub_233B03518((uint64_t)aBlock, (uint64_t)v31);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25424D490);
  if (swift_dynamicCast())
  {
    v19 = v30;
    v13(v12, a1, v9);
    v20 = swift_allocObject();
    v16(v20 + v14, v12, v9);
    v21 = v26;
    *(_QWORD *)(v20 + ((v14 + v11 + 7) & 0xFFFFFFFFFFFFFFF8)) = v25;
    v29(v19, v21, v27, sub_233B13FE8, v20);
    swift_unknownObjectRelease();
    swift_release();
  }
  else
  {
    sub_233B13A30();
    v22 = swift_allocError();
    *v23 = 0;
    v31[0] = v22;
    sub_233B580C8();
  }
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)aBlock);
}

uint64_t sub_233B111BC(uint64_t a1, void *a2, void (*a3)(uint64_t, uint64_t, uint64_t, uint64_t (*)(), uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void (*v13)(char *, uint64_t, uint64_t);
  unint64_t v14;
  uint64_t v15;
  void (*v16)(unint64_t, char *, uint64_t);
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t, uint64_t, uint64_t (*)(), uint64_t);
  uint64_t v30;
  uint64_t v31[4];
  _QWORD aBlock[6];

  v25 = a7;
  v26 = a5;
  v27 = a6;
  v28 = a4;
  v29 = a3;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256112ED0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v13(v12, a1, v9);
  v14 = (*(unsigned __int8 *)(v10 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v15 = swift_allocObject();
  v16 = *(void (**)(unint64_t, char *, uint64_t))(v10 + 32);
  v16(v15 + v14, v12, v9);
  aBlock[4] = sub_233B14268;
  aBlock[5] = v15;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_233B31DD0;
  aBlock[3] = &block_descriptor_112;
  v17 = _Block_copy(aBlock);
  swift_release();
  v18 = objc_msgSend(a2, sel_remoteObjectProxyWithErrorHandler_, v17);
  _Block_release(v17);
  sub_233B58218();
  swift_unknownObjectRelease();
  sub_233B03518((uint64_t)aBlock, (uint64_t)v31);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25424D490);
  if (swift_dynamicCast())
  {
    v19 = v30;
    v13(v12, a1, v9);
    v20 = swift_allocObject();
    v16(v20 + v14, v12, v9);
    v21 = v26;
    *(_QWORD *)(v20 + ((v14 + v11 + 7) & 0xFFFFFFFFFFFFFFF8)) = v25;
    v29(v19, v21, v27, sub_233B13FE8, v20);
    swift_unknownObjectRelease();
    swift_release();
  }
  else
  {
    sub_233B13A30();
    v22 = swift_allocError();
    *v23 = 0;
    v31[0] = v22;
    sub_233B580C8();
  }
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)aBlock);
}

uint64_t sub_233B1141C(uint64_t a1, void *a2, void (*a3)(uint64_t, uint64_t, uint64_t, uint64_t (*)(), uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void (*v13)(char *, uint64_t, uint64_t);
  unint64_t v14;
  uint64_t v15;
  void (*v16)(unint64_t, char *, uint64_t);
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t, uint64_t, uint64_t (*)(), uint64_t);
  uint64_t v30;
  uint64_t v31[4];
  _QWORD aBlock[6];

  v25 = a7;
  v26 = a5;
  v27 = a6;
  v28 = a4;
  v29 = a3;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256112ED0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v13(v12, a1, v9);
  v14 = (*(unsigned __int8 *)(v10 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v15 = swift_allocObject();
  v16 = *(void (**)(unint64_t, char *, uint64_t))(v10 + 32);
  v16(v15 + v14, v12, v9);
  aBlock[4] = sub_233B14268;
  aBlock[5] = v15;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_233B31DD0;
  aBlock[3] = &block_descriptor_101;
  v17 = _Block_copy(aBlock);
  swift_release();
  v18 = objc_msgSend(a2, sel_remoteObjectProxyWithErrorHandler_, v17);
  _Block_release(v17);
  sub_233B58218();
  swift_unknownObjectRelease();
  sub_233B03518((uint64_t)aBlock, (uint64_t)v31);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25424D490);
  if (swift_dynamicCast())
  {
    v19 = v30;
    v13(v12, a1, v9);
    v20 = swift_allocObject();
    v16(v20 + v14, v12, v9);
    v21 = v26;
    *(_QWORD *)(v20 + ((v14 + v11 + 7) & 0xFFFFFFFFFFFFFFF8)) = v25;
    v29(v19, v21, v27, sub_233B13FE8, v20);
    swift_unknownObjectRelease();
    swift_release();
  }
  else
  {
    sub_233B13A30();
    v22 = swift_allocError();
    *v23 = 0;
    v31[0] = v22;
    sub_233B580C8();
  }
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)aBlock);
}

uint64_t sub_233B1167C(uint64_t a1, void *a2, void (*a3)(uint64_t, uint64_t, uint64_t, uint64_t (*)(), uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void (*v13)(char *, uint64_t, uint64_t);
  unint64_t v14;
  uint64_t v15;
  void (*v16)(unint64_t, char *, uint64_t);
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t, uint64_t, uint64_t (*)(), uint64_t);
  uint64_t v30;
  uint64_t v31[4];
  _QWORD aBlock[6];

  v25 = a7;
  v26 = a5;
  v27 = a6;
  v28 = a4;
  v29 = a3;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256112ED0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v13(v12, a1, v9);
  v14 = (*(unsigned __int8 *)(v10 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v15 = swift_allocObject();
  v16 = *(void (**)(unint64_t, char *, uint64_t))(v10 + 32);
  v16(v15 + v14, v12, v9);
  aBlock[4] = sub_233B14268;
  aBlock[5] = v15;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_233B31DD0;
  aBlock[3] = &block_descriptor_91;
  v17 = _Block_copy(aBlock);
  swift_release();
  v18 = objc_msgSend(a2, sel_remoteObjectProxyWithErrorHandler_, v17);
  _Block_release(v17);
  sub_233B58218();
  swift_unknownObjectRelease();
  sub_233B03518((uint64_t)aBlock, (uint64_t)v31);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25424D490);
  if (swift_dynamicCast())
  {
    v19 = v30;
    v13(v12, a1, v9);
    v20 = swift_allocObject();
    v16(v20 + v14, v12, v9);
    v21 = v26;
    *(_QWORD *)(v20 + ((v14 + v11 + 7) & 0xFFFFFFFFFFFFFFF8)) = v25;
    v29(v19, v21, v27, sub_233B13FE8, v20);
    swift_unknownObjectRelease();
    swift_release();
  }
  else
  {
    sub_233B13A30();
    v22 = swift_allocError();
    *v23 = 0;
    v31[0] = v22;
    sub_233B580C8();
  }
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)aBlock);
}

uint64_t sub_233B118DC(uint64_t a1, void *a2, void (*a3)(uint64_t, uint64_t, uint64_t, uint64_t (*)(), uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void (*v13)(char *, uint64_t, uint64_t);
  unint64_t v14;
  uint64_t v15;
  void (*v16)(unint64_t, char *, uint64_t);
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t, uint64_t, uint64_t (*)(), uint64_t);
  uint64_t v30;
  uint64_t v31[4];
  _QWORD aBlock[6];

  v25 = a7;
  v26 = a5;
  v27 = a6;
  v28 = a4;
  v29 = a3;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256112ED0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v13(v12, a1, v9);
  v14 = (*(unsigned __int8 *)(v10 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v15 = swift_allocObject();
  v16 = *(void (**)(unint64_t, char *, uint64_t))(v10 + 32);
  v16(v15 + v14, v12, v9);
  aBlock[4] = sub_233B14268;
  aBlock[5] = v15;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_233B31DD0;
  aBlock[3] = &block_descriptor_80;
  v17 = _Block_copy(aBlock);
  swift_release();
  v18 = objc_msgSend(a2, sel_remoteObjectProxyWithErrorHandler_, v17);
  _Block_release(v17);
  sub_233B58218();
  swift_unknownObjectRelease();
  sub_233B03518((uint64_t)aBlock, (uint64_t)v31);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25424D490);
  if (swift_dynamicCast())
  {
    v19 = v30;
    v13(v12, a1, v9);
    v20 = swift_allocObject();
    v16(v20 + v14, v12, v9);
    v21 = v26;
    *(_QWORD *)(v20 + ((v14 + v11 + 7) & 0xFFFFFFFFFFFFFFF8)) = v25;
    v29(v19, v21, v27, sub_233B13FE8, v20);
    swift_unknownObjectRelease();
    swift_release();
  }
  else
  {
    sub_233B13A30();
    v22 = swift_allocError();
    *v23 = 0;
    v31[0] = v22;
    sub_233B580C8();
  }
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)aBlock);
}

uint64_t sub_233B11B3C(uint64_t a1, void *a2, void (*a3)(uint64_t, uint64_t, uint64_t, uint64_t (*)(), uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void (*v13)(char *, uint64_t, uint64_t);
  unint64_t v14;
  uint64_t v15;
  void (*v16)(unint64_t, char *, uint64_t);
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t, uint64_t, uint64_t (*)(), uint64_t);
  uint64_t v30;
  uint64_t v31[4];
  _QWORD aBlock[6];

  v25 = a7;
  v26 = a5;
  v27 = a6;
  v28 = a4;
  v29 = a3;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256112ED0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v13(v12, a1, v9);
  v14 = (*(unsigned __int8 *)(v10 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v15 = swift_allocObject();
  v16 = *(void (**)(unint64_t, char *, uint64_t))(v10 + 32);
  v16(v15 + v14, v12, v9);
  aBlock[4] = sub_233B14268;
  aBlock[5] = v15;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_233B31DD0;
  aBlock[3] = &block_descriptor_69;
  v17 = _Block_copy(aBlock);
  swift_release();
  v18 = objc_msgSend(a2, sel_remoteObjectProxyWithErrorHandler_, v17);
  _Block_release(v17);
  sub_233B58218();
  swift_unknownObjectRelease();
  sub_233B03518((uint64_t)aBlock, (uint64_t)v31);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25424D490);
  if (swift_dynamicCast())
  {
    v19 = v30;
    v13(v12, a1, v9);
    v20 = swift_allocObject();
    v16(v20 + v14, v12, v9);
    v21 = v26;
    *(_QWORD *)(v20 + ((v14 + v11 + 7) & 0xFFFFFFFFFFFFFFF8)) = v25;
    v29(v19, v21, v27, sub_233B13FE8, v20);
    swift_unknownObjectRelease();
    swift_release();
  }
  else
  {
    sub_233B13A30();
    v22 = swift_allocError();
    *v23 = 0;
    v31[0] = v22;
    sub_233B580C8();
  }
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)aBlock);
}

uint64_t sub_233B11D9C(uint64_t a1, void *a2, void (*a3)(uint64_t, uint64_t, uint64_t, uint64_t (*)(), uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void (*v13)(char *, uint64_t, uint64_t);
  unint64_t v14;
  uint64_t v15;
  void (*v16)(unint64_t, char *, uint64_t);
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t, uint64_t, uint64_t (*)(), uint64_t);
  uint64_t v30;
  uint64_t v31[4];
  _QWORD aBlock[6];

  v25 = a7;
  v26 = a5;
  v27 = a6;
  v28 = a4;
  v29 = a3;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256112ED0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v13(v12, a1, v9);
  v14 = (*(unsigned __int8 *)(v10 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v15 = swift_allocObject();
  v16 = *(void (**)(unint64_t, char *, uint64_t))(v10 + 32);
  v16(v15 + v14, v12, v9);
  aBlock[4] = sub_233B14268;
  aBlock[5] = v15;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_233B31DD0;
  aBlock[3] = &block_descriptor_58;
  v17 = _Block_copy(aBlock);
  swift_release();
  v18 = objc_msgSend(a2, sel_remoteObjectProxyWithErrorHandler_, v17);
  _Block_release(v17);
  sub_233B58218();
  swift_unknownObjectRelease();
  sub_233B03518((uint64_t)aBlock, (uint64_t)v31);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25424D490);
  if (swift_dynamicCast())
  {
    v19 = v30;
    v13(v12, a1, v9);
    v20 = swift_allocObject();
    v16(v20 + v14, v12, v9);
    v21 = v26;
    *(_QWORD *)(v20 + ((v14 + v11 + 7) & 0xFFFFFFFFFFFFFFF8)) = v25;
    v29(v19, v21, v27, sub_233B13FE8, v20);
    swift_unknownObjectRelease();
    swift_release();
  }
  else
  {
    sub_233B13A30();
    v22 = swift_allocError();
    *v23 = 0;
    v31[0] = v22;
    sub_233B580C8();
  }
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)aBlock);
}

uint64_t sub_233B11FFC(uint64_t a1, void *a2, void (*a3)(uint64_t, uint64_t, uint64_t, uint64_t (*)(uint64_t a1, uint64_t a2), uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void (*v13)(char *, uint64_t, uint64_t);
  unint64_t v14;
  uint64_t v15;
  void (*v16)(unint64_t, char *, uint64_t);
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t, uint64_t, uint64_t (*)(uint64_t, uint64_t), uint64_t);
  uint64_t v30;
  uint64_t v31[4];
  _QWORD aBlock[6];

  v25 = a7;
  v26 = a5;
  v27 = a6;
  v28 = a4;
  v29 = a3;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_25424CF20);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v13(v12, a1, v9);
  v14 = (*(unsigned __int8 *)(v10 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v15 = swift_allocObject();
  v16 = *(void (**)(unint64_t, char *, uint64_t))(v10 + 32);
  v16(v15 + v14, v12, v9);
  aBlock[4] = sub_233B1410C;
  aBlock[5] = v15;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_233B31DD0;
  aBlock[3] = &block_descriptor_47;
  v17 = _Block_copy(aBlock);
  swift_release();
  v18 = objc_msgSend(a2, sel_remoteObjectProxyWithErrorHandler_, v17);
  _Block_release(v17);
  sub_233B58218();
  swift_unknownObjectRelease();
  sub_233B03518((uint64_t)aBlock, (uint64_t)v31);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25424D490);
  if (swift_dynamicCast())
  {
    v19 = v30;
    v13(v12, a1, v9);
    v20 = swift_allocObject();
    v16(v20 + v14, v12, v9);
    v21 = v26;
    *(_QWORD *)(v20 + ((v14 + v11 + 7) & 0xFFFFFFFFFFFFFFF8)) = v25;
    v29(v19, v21, v27, sub_233B1412C, v20);
    swift_unknownObjectRelease();
    swift_release();
  }
  else
  {
    sub_233B13A30();
    v22 = swift_allocError();
    *v23 = 0;
    v31[0] = v22;
    sub_233B580C8();
  }
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)aBlock);
}

uint64_t sub_233B1225C(uint64_t a1, void *a2, void (*a3)(uint64_t, uint64_t, uint64_t, uint64_t (*)(), uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void (*v13)(char *, uint64_t, uint64_t);
  unint64_t v14;
  uint64_t v15;
  void (*v16)(unint64_t, char *, uint64_t);
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t, uint64_t, uint64_t (*)(), uint64_t);
  uint64_t v30;
  uint64_t v31[4];
  _QWORD aBlock[6];

  v25 = a7;
  v26 = a5;
  v27 = a6;
  v28 = a4;
  v29 = a3;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_25424D4E8);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v13(v12, a1, v9);
  v14 = (*(unsigned __int8 *)(v10 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v15 = swift_allocObject();
  v16 = *(void (**)(unint64_t, char *, uint64_t))(v10 + 32);
  v16(v15 + v14, v12, v9);
  aBlock[4] = sub_233B13D28;
  aBlock[5] = v15;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_233B31DD0;
  aBlock[3] = &block_descriptor;
  v17 = _Block_copy(aBlock);
  swift_release();
  v18 = objc_msgSend(a2, sel_remoteObjectProxyWithErrorHandler_, v17);
  _Block_release(v17);
  sub_233B58218();
  swift_unknownObjectRelease();
  sub_233B03518((uint64_t)aBlock, (uint64_t)v31);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25424D490);
  if (swift_dynamicCast())
  {
    v19 = v30;
    v13(v12, a1, v9);
    v20 = swift_allocObject();
    v16(v20 + v14, v12, v9);
    v21 = v26;
    *(_QWORD *)(v20 + ((v14 + v11 + 7) & 0xFFFFFFFFFFFFFFF8)) = v25;
    v29(v19, v21, v27, sub_233B13D48, v20);
    swift_unknownObjectRelease();
    swift_release();
  }
  else
  {
    sub_233B13A30();
    v22 = swift_allocError();
    *v23 = 0;
    v31[0] = v22;
    sub_233B580C8();
  }
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)aBlock);
}

uint64_t sub_233B124BC(uint64_t a1, void *a2, void (*a3)(uint64_t, uint64_t, uint64_t, uint64_t (*)(), uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void (*v13)(char *, uint64_t, uint64_t);
  unint64_t v14;
  uint64_t v15;
  void (*v16)(unint64_t, char *, uint64_t);
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t, uint64_t, uint64_t (*)(), uint64_t);
  uint64_t v30;
  uint64_t v31[4];
  _QWORD aBlock[6];

  v25 = a7;
  v26 = a5;
  v27 = a6;
  v28 = a4;
  v29 = a3;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_25424D4E8);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v13(v12, a1, v9);
  v14 = (*(unsigned __int8 *)(v10 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v15 = swift_allocObject();
  v16 = *(void (**)(unint64_t, char *, uint64_t))(v10 + 32);
  v16(v15 + v14, v12, v9);
  aBlock[4] = sub_233B13D28;
  aBlock[5] = v15;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_233B31DD0;
  aBlock[3] = &block_descriptor_15;
  v17 = _Block_copy(aBlock);
  swift_release();
  v18 = objc_msgSend(a2, sel_remoteObjectProxyWithErrorHandler_, v17);
  _Block_release(v17);
  sub_233B58218();
  swift_unknownObjectRelease();
  sub_233B03518((uint64_t)aBlock, (uint64_t)v31);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25424D490);
  if (swift_dynamicCast())
  {
    v19 = v30;
    v13(v12, a1, v9);
    v20 = swift_allocObject();
    v16(v20 + v14, v12, v9);
    v21 = v26;
    *(_QWORD *)(v20 + ((v14 + v11 + 7) & 0xFFFFFFFFFFFFFFF8)) = v25;
    v29(v19, v21, v27, sub_233B13D48, v20);
    swift_unknownObjectRelease();
    swift_release();
  }
  else
  {
    sub_233B13A30();
    v22 = swift_allocError();
    *v23 = 0;
    v31[0] = v22;
    sub_233B580C8();
  }
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)aBlock);
}

uint64_t sub_233B1271C(uint64_t a1, void *a2, void (*a3)(uint64_t, uint64_t, uint64_t, uint64_t (*)(), uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void (*v13)(char *, uint64_t, uint64_t);
  unint64_t v14;
  uint64_t v15;
  void (*v16)(unint64_t, char *, uint64_t);
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t, uint64_t, uint64_t (*)(), uint64_t);
  uint64_t v30;
  uint64_t v31[4];
  _QWORD aBlock[6];

  v25 = a7;
  v26 = a5;
  v27 = a6;
  v28 = a4;
  v29 = a3;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256112ED0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v13(v12, a1, v9);
  v14 = (*(unsigned __int8 *)(v10 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v15 = swift_allocObject();
  v16 = *(void (**)(unint64_t, char *, uint64_t))(v10 + 32);
  v16(v15 + v14, v12, v9);
  aBlock[4] = sub_233B13FC8;
  aBlock[5] = v15;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_233B31DD0;
  aBlock[3] = &block_descriptor_37;
  v17 = _Block_copy(aBlock);
  swift_release();
  v18 = objc_msgSend(a2, sel_remoteObjectProxyWithErrorHandler_, v17);
  _Block_release(v17);
  sub_233B58218();
  swift_unknownObjectRelease();
  sub_233B03518((uint64_t)aBlock, (uint64_t)v31);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25424D490);
  if (swift_dynamicCast())
  {
    v19 = v30;
    v13(v12, a1, v9);
    v20 = swift_allocObject();
    v16(v20 + v14, v12, v9);
    v21 = v26;
    *(_QWORD *)(v20 + ((v14 + v11 + 7) & 0xFFFFFFFFFFFFFFF8)) = v25;
    v29(v19, v21, v27, sub_233B13FE8, v20);
    swift_unknownObjectRelease();
    swift_release();
  }
  else
  {
    sub_233B13A30();
    v22 = swift_allocError();
    *v23 = 0;
    v31[0] = v22;
    sub_233B580C8();
  }
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)aBlock);
}

uint64_t sub_233B1297C(uint64_t a1, void *a2, void (*a3)(uint64_t, uint64_t, uint64_t, uint64_t (*)(), uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void (*v13)(char *, uint64_t, uint64_t);
  unint64_t v14;
  uint64_t v15;
  void (*v16)(unint64_t, char *, uint64_t);
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t, uint64_t, uint64_t (*)(), uint64_t);
  uint64_t v30;
  uint64_t v31[4];
  _QWORD aBlock[6];

  v25 = a7;
  v26 = a5;
  v27 = a6;
  v28 = a4;
  v29 = a3;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256112ED0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v13(v12, a1, v9);
  v14 = (*(unsigned __int8 *)(v10 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v15 = swift_allocObject();
  v16 = *(void (**)(unint64_t, char *, uint64_t))(v10 + 32);
  v16(v15 + v14, v12, v9);
  aBlock[4] = sub_233B13FC8;
  aBlock[5] = v15;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_233B31DD0;
  aBlock[3] = &block_descriptor_26;
  v17 = _Block_copy(aBlock);
  swift_release();
  v18 = objc_msgSend(a2, sel_remoteObjectProxyWithErrorHandler_, v17);
  _Block_release(v17);
  sub_233B58218();
  swift_unknownObjectRelease();
  sub_233B03518((uint64_t)aBlock, (uint64_t)v31);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25424D490);
  if (swift_dynamicCast())
  {
    v19 = v30;
    v13(v12, a1, v9);
    v20 = swift_allocObject();
    v16(v20 + v14, v12, v9);
    v21 = v26;
    *(_QWORD *)(v20 + ((v14 + v11 + 7) & 0xFFFFFFFFFFFFFFF8)) = v25;
    v29(v19, v21, v27, sub_233B13FE8, v20);
    swift_unknownObjectRelease();
    swift_release();
  }
  else
  {
    sub_233B13A30();
    v22 = swift_allocError();
    *v23 = 0;
    v31[0] = v22;
    sub_233B580C8();
  }
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)aBlock);
}

uint64_t sub_233B12BDC(void *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  id v6;
  id v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  _QWORD *v11;
  id v12;
  _BYTE *v13;
  uint64_t v15;

  if (qword_25424D3D0 != -1)
    swift_once();
  v5 = sub_233B57EC4();
  __swift_project_value_buffer(v5, (uint64_t)qword_25424D3B8);
  v6 = a1;
  v7 = a1;
  v8 = sub_233B57EAC();
  v9 = sub_233B581C4();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc();
    v11 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v10 = 138543362;
    v12 = a1;
    v15 = _swift_stdlib_bridgeErrorToNSError();
    sub_233B581F4();
    *v11 = v15;

    _os_log_impl(&dword_233B00000, v8, v9, "Error fetching remote object proxy: %{public}@", v10, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&qword_25424D288);
    swift_arrayDestroy();
    MEMORY[0x23493D4CC](v11, -1, -1);
    MEMORY[0x23493D4CC](v10, -1, -1);
  }
  else
  {

  }
  sub_233B13A30();
  swift_allocError();
  *v13 = 0;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  return sub_233B580C8();
}

uint64_t sub_233B12DC8(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  _BYTE *v3;
  char v4;
  uint64_t v6;
  char v7;

  sub_233B132E8(a1, a2, (uint64_t)&v6);
  v2 = v6;
  if ((v7 & 1) != 0)
  {
    sub_233B13A30();
    swift_allocError();
    *v3 = v2;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256112FC8);
    sub_233B580C8();
    v2 = v6;
    v4 = v7;
  }
  else
  {
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&qword_256112FC8);
    sub_233B580D4();
    v4 = 0;
  }
  return sub_233B149B4(v2, v4);
}

uint64_t sub_233B12E78(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  _BYTE *v3;
  char v4;
  uint64_t v6;
  char v7;

  sub_233B13588(a1, a2, (void (*)(uint64_t **__return_ptr, uint64_t **))sub_233B428A4, (uint64_t)&v6);
  v2 = v6;
  if ((v7 & 1) != 0)
  {
    sub_233B13A30();
    swift_allocError();
    *v3 = v2;
    __swift_instantiateConcreteTypeFromMangledName(&qword_25424CF20);
    sub_233B580C8();
    v2 = v6;
    v4 = v7;
  }
  else
  {
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&qword_25424CF20);
    sub_233B580D4();
    v4 = 0;
  }
  return sub_233B149B4(v2, v4);
}

uint64_t sub_233B12F30(uint64_t a1, unint64_t a2)
{
  char v2;
  _BYTE *v3;
  uint64_t v5;
  char v6;

  sub_233B13588(a1, a2, (void (*)(uint64_t **__return_ptr, uint64_t **))sub_233B42B50, (uint64_t)&v5);
  v2 = v5;
  if ((v6 & 1) != 0)
  {
    sub_233B13A30();
    swift_allocError();
    *v3 = v2;
    __swift_instantiateConcreteTypeFromMangledName(&qword_25424D4E8);
    return sub_233B580C8();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_25424D4E8);
    return sub_233B580D4();
  }
}

uint64_t sub_233B12FCC(uint64_t a1, unint64_t a2)
{
  char v2;
  _BYTE *v3;
  _BYTE v5[2];

  sub_233B13064(a1, a2, v5);
  v2 = v5[0];
  if ((v5[1] & 1) != 0)
  {
    sub_233B13A30();
    swift_allocError();
    *v3 = v2;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256112ED0);
    return sub_233B580C8();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_256112ED0);
    return sub_233B580D4();
  }
}

uint64_t sub_233B13064@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;
  char v5;
  char v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  char *v10;
  char v11;
  char v12;

  v10 = &v11;
  v7 = a1;
  v8 = a2;
  v9 = &v7;
  sub_233B13D4C(a1, a2);
  sub_233B42354(&v10);
  result = sub_233B13CD8(v7, v8);
  v5 = v11;
  v6 = v12;
  if (!v12)
    v5 = v11 & 1;
  *a3 = v5;
  a3[1] = v6;
  return result;
}

uint64_t sub_233B132E8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  uint64_t v5;
  char v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  char v12;

  v10 = &v11;
  v7 = a1;
  v8 = a2;
  v9 = &v7;
  sub_233B13D4C(a1, a2);
  sub_233B425F8((uint64_t *)&v10);
  result = sub_233B13CD8(v7, v8);
  v5 = v11;
  v6 = v12;
  if (v12)
    v5 = v11;
  *(_QWORD *)a3 = v5;
  *(_BYTE *)(a3 + 8) = v6;
  return result;
}

uint64_t sub_233B13570@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_233B13588(a1, a2, (void (*)(uint64_t **__return_ptr, uint64_t **))sub_233B428A4, a3);
}

uint64_t sub_233B1357C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_233B13588(a1, a2, (void (*)(uint64_t **__return_ptr, uint64_t **))sub_233B42B50, a3);
}

uint64_t sub_233B13588@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, void (*a3)(uint64_t **__return_ptr, uint64_t **)@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  uint64_t v7;
  char v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  char v14;

  v12 = &v13;
  v9 = a1;
  v10 = a2;
  v11 = &v9;
  sub_233B13D4C(a1, a2);
  a3(&v12, &v11);
  result = sub_233B13CD8(v9, v10);
  v7 = v13;
  v8 = v14;
  if (v14)
    v7 = v13;
  *(_QWORD *)a4 = v7;
  *(_BYTE *)(a4 + 8) = v8;
  return result;
}

uint64_t sub_233B13814(_QWORD *a1)
{
  _BYTE v2[40];

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_233B58614();
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)v2);
}

uint64_t sub_233B1386C(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000015 && a2 == 0x8000000233B611C0 || (sub_233B584D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6D61726150797562 && a2 == 0xE900000000000073 || (sub_233B584D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x74696E4972657375 && a2 == 0xED00006465746169)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v5 = sub_233B584D0();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

unint64_t sub_233B139EC()
{
  unint64_t result;

  result = qword_25424D5A8;
  if (!qword_25424D5A8)
  {
    result = MEMORY[0x23493D400](&unk_233B5F52C, &type metadata for FeatureFlag);
    atomic_store(result, (unint64_t *)&qword_25424D5A8);
  }
  return result;
}

unint64_t sub_233B13A30()
{
  unint64_t result;

  result = qword_25424D2C0[0];
  if (!qword_25424D2C0[0])
  {
    result = MEMORY[0x23493D400](&protocol conformance descriptor for ManagedAppDistributionError, &type metadata for ManagedAppDistributionError);
    atomic_store(result, qword_25424D2C0);
  }
  return result;
}

unint64_t sub_233B13A74()
{
  unint64_t result;

  result = qword_25424D4C8;
  if (!qword_25424D4C8)
  {
    result = MEMORY[0x23493D400](&protocol conformance descriptor for MessageRegistration, &type metadata for MessageRegistration);
    atomic_store(result, (unint64_t *)&qword_25424D4C8);
  }
  return result;
}

unint64_t sub_233B13AB8()
{
  unint64_t result;

  result = qword_25424D4B8;
  if (!qword_25424D4B8)
  {
    result = MEMORY[0x23493D400](&protocol conformance descriptor for MessageRegistration, &type metadata for MessageRegistration);
    atomic_store(result, (unint64_t *)&qword_25424D4B8);
  }
  return result;
}

uint64_t sub_233B13AFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_25424D510);
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  v3 = v0 + ((v2 + 16) & ~v2);
  swift_bridgeObjectRelease();
  v4 = v3 + *(int *)(v1 + 48);
  v5 = sub_233B57E40();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  return swift_deallocObject();
}

uint64_t sub_233B13B8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_25424D510);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_233B13BD4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_25424D510) - 8) + 80);
  return sub_233B0CE1C(a1, v1 + ((v3 + 16) & ~v3), &qword_25424D4F8, &qword_25424D500, MEMORY[0x24BEE1700], &qword_25424D510);
}

unint64_t sub_233B13C48()
{
  unint64_t result;

  result = qword_25424D678;
  if (!qword_25424D678)
  {
    result = MEMORY[0x23493D400](&unk_233B5AF38, &type metadata for XPCEncoder);
    atomic_store(result, (unint64_t *)&qword_25424D678);
  }
  return result;
}

uint64_t sub_233B13C8C(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_25424D510);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_233B13CCC(uint64_t a1)
{
  return sub_233B13DB0(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_233B1225C);
}

uint64_t sub_233B13CD8(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release();
  }
  return swift_release();
}

uint64_t sub_233B13D1C()
{
  return objectdestroy_5Tm(&qword_25424D4E8);
}

uint64_t sub_233B13D28(uint64_t a1)
{
  return sub_233B13DD0(a1, &qword_25424D4E8, (uint64_t (*)(uint64_t, uint64_t, uint64_t *))sub_233B14C2C);
}

uint64_t sub_233B13D3C()
{
  return objectdestroy_7Tm(&qword_25424D4E8);
}

uint64_t sub_233B13D4C(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain();
  }
  return swift_retain();
}

uint64_t sub_233B13D90(_QWORD *a1)
{
  return sub_233B13814(a1);
}

uint64_t sub_233B13DA4(uint64_t a1)
{
  return sub_233B13DB0(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_233B124BC);
}

uint64_t sub_233B13DB0(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v2;

  return a2(a1, v2[2], v2[3], v2[4], v2[5], v2[6], v2[7]);
}

uint64_t sub_233B13DC4()
{
  return objectdestroy_5Tm(&qword_25424D4E8);
}

uint64_t sub_233B13DD0(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t *))
{
  uint64_t v3;
  uint64_t v7;

  v7 = *(unsigned __int8 *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(a2) - 8) + 80);
  return a3(a1, v3 + ((v7 + 16) & ~v7), a2);
}

uint64_t sub_233B13E24()
{
  return objectdestroy_7Tm(&qword_25424D4E8);
}

uint64_t sub_233B13E30(uint64_t a1, unint64_t a2)
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_25424D4E8);
  return sub_233B12F30(a1, a2);
}

uint64_t sub_233B13E98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for DDMAppOrUpdateManagedAppRequest() - 8) + 80);
  v2 = v0 + ((v1 + 16) & ~v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v3 = *(_QWORD *)(v2 + 64);
  if (v3 >> 60 != 15)
    sub_233B13CD8(*(_QWORD *)(v2 + 56), v3);
  v4 = *(int *)(type metadata accessor for ManagedAppDeclaration(0) + 36);
  v5 = v2 + v4 + *(int *)(type metadata accessor for ManagedAppDeclaration.InstallBehavior(0) + 24);
  type metadata accessor for ManagedAppDeclaration.InstallBehavior.PurchaseMethodEnum(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v6 = sub_233B57DF8();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  }
  else
  {
    sub_233B04B94(*(_QWORD *)v5, *(_QWORD *)(v5 + 8), *(_BYTE *)(v5 + 16));
  }
  return swift_deallocObject();
}

uint64_t sub_233B13F84(_QWORD *a1)
{
  return sub_233B1467C(a1, (uint64_t (*)(uint64_t))type metadata accessor for DDMAppOrUpdateManagedAppRequest, &qword_256112EB0, (uint64_t)&protocol conformance descriptor for DDMAppOrUpdateManagedAppRequest);
}

uint64_t sub_233B13FB0(uint64_t a1)
{
  return sub_233B13DB0(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_233B1297C);
}

uint64_t sub_233B13FBC()
{
  return objectdestroy_5Tm(&qword_256112ED0);
}

uint64_t sub_233B13FC8(uint64_t a1)
{
  return sub_233B13DD0(a1, &qword_256112ED0, (uint64_t (*)(uint64_t, uint64_t, uint64_t *))sub_233B14C2C);
}

uint64_t sub_233B13FDC()
{
  return objectdestroy_7Tm(&qword_256112ED0);
}

uint64_t sub_233B13FEC(uint64_t a1, unint64_t a2)
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_256112ED0);
  return sub_233B12FCC(a1, a2);
}

uint64_t sub_233B14054()
{
  return objectdestroy_29Tm((uint64_t (*)(_QWORD))type metadata accessor for OAuthAuthorizeRequest);
}

uint64_t sub_233B14060(_QWORD *a1)
{
  return sub_233B1467C(a1, (uint64_t (*)(uint64_t))type metadata accessor for OAuthAuthorizeRequest, &qword_256112EE8, (uint64_t)&protocol conformance descriptor for OAuthAuthorizeRequest);
}

uint64_t sub_233B1408C(uint64_t a1)
{
  return sub_233B13DB0(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_233B1271C);
}

uint64_t sub_233B14098()
{
  return objectdestroy_5Tm(&qword_256112ED0);
}

uint64_t sub_233B140A4()
{
  return objectdestroy_7Tm(&qword_256112ED0);
}

unint64_t sub_233B140B0()
{
  unint64_t result;

  result = qword_25424D170;
  if (!qword_25424D170)
  {
    result = MEMORY[0x23493D400](&protocol conformance descriptor for XPCClientMessage, &type metadata for XPCClientMessage);
    atomic_store(result, (unint64_t *)&qword_25424D170);
  }
  return result;
}

uint64_t sub_233B140F4(uint64_t a1)
{
  return sub_233B13DB0(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_233B11FFC);
}

uint64_t sub_233B14100()
{
  return objectdestroy_5Tm(&qword_25424CF20);
}

uint64_t sub_233B1410C(uint64_t a1)
{
  return sub_233B13DD0(a1, &qword_25424CF20, (uint64_t (*)(uint64_t, uint64_t, uint64_t *))sub_233B14C2C);
}

uint64_t sub_233B14120()
{
  return objectdestroy_7Tm(&qword_25424CF20);
}

uint64_t sub_233B1412C(uint64_t a1, uint64_t a2)
{
  return sub_233B14944(a1, a2, &qword_25424CF20, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))sub_233B12E78);
}

uint64_t sub_233B14140(unint64_t *a1, uint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    v8 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    v9 = a3();
    result = MEMORY[0x23493D400](a4, v8, &v9);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_233B141A4()
{
  return objectdestroy_29Tm((uint64_t (*)(_QWORD))type metadata accessor for InstallEnterpriseManifestRequest);
}

uint64_t objectdestroy_29Tm(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(a1(0) - 8) + 80);
  v3 = v1 + ((v2 + 16) & ~v2);
  v4 = sub_233B57DF8();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  return swift_deallocObject();
}

uint64_t sub_233B14224(_QWORD *a1)
{
  return sub_233B1467C(a1, (uint64_t (*)(uint64_t))type metadata accessor for InstallEnterpriseManifestRequest, &qword_256112F20, (uint64_t)&protocol conformance descriptor for InstallEnterpriseManifestRequest);
}

uint64_t sub_233B14250(uint64_t a1)
{
  return sub_233B13DB0(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_233B11D9C);
}

uint64_t sub_233B1425C()
{
  return objectdestroy_5Tm(&qword_256112ED0);
}

uint64_t sub_233B14268(uint64_t a1)
{
  return sub_233B13DD0(a1, &qword_256112ED0, (uint64_t (*)(uint64_t, uint64_t, uint64_t *))sub_233B12BDC);
}

uint64_t sub_233B1427C()
{
  return objectdestroy_7Tm(&qword_256112ED0);
}

unint64_t sub_233B14288()
{
  unint64_t result;

  result = qword_256112F30;
  if (!qword_256112F30)
  {
    result = MEMORY[0x23493D400](&protocol conformance descriptor for DiagnosticRequest, &type metadata for DiagnosticRequest);
    atomic_store(result, (unint64_t *)&qword_256112F30);
  }
  return result;
}

unint64_t sub_233B142CC()
{
  unint64_t result;

  result = qword_256112F38;
  if (!qword_256112F38)
  {
    result = MEMORY[0x23493D400](&protocol conformance descriptor for DiagnosticRequest, &type metadata for DiagnosticRequest);
    atomic_store(result, (unint64_t *)&qword_256112F38);
  }
  return result;
}

uint64_t sub_233B14310()
{
  return swift_deallocObject();
}

uint64_t sub_233B14320(_QWORD *a1)
{
  uint64_t v1;

  return sub_233B0CB9C(a1, *(_BYTE *)(v1 + 16), (void (*)(void))sub_233B142CC, &qword_2504DEB08, (uint64_t)&type metadata for DiagnosticRequest);
}

uint64_t sub_233B1434C(uint64_t a1)
{
  return sub_233B13DB0(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_233B11B3C);
}

uint64_t sub_233B14358()
{
  return objectdestroy_5Tm(&qword_256112ED0);
}

uint64_t sub_233B14364()
{
  return objectdestroy_7Tm(&qword_256112ED0);
}

unint64_t sub_233B14370()
{
  unint64_t result;

  result = qword_256112F48;
  if (!qword_256112F48)
  {
    result = MEMORY[0x23493D400](&protocol conformance descriptor for DDMPollForUpdatesRequest, &type metadata for DDMPollForUpdatesRequest);
    atomic_store(result, (unint64_t *)&qword_256112F48);
  }
  return result;
}

unint64_t sub_233B143B4()
{
  unint64_t result;

  result = qword_256112F50;
  if (!qword_256112F50)
  {
    result = MEMORY[0x23493D400](&protocol conformance descriptor for DDMPollForUpdatesRequest, &type metadata for DDMPollForUpdatesRequest);
    atomic_store(result, (unint64_t *)&qword_256112F50);
  }
  return result;
}

uint64_t sub_233B143F8()
{
  return swift_deallocObject();
}

uint64_t sub_233B14408(_QWORD *a1)
{
  uint64_t v1;

  return sub_233B0CA84(a1, *(_BYTE *)(v1 + 16));
}

uint64_t sub_233B14420(uint64_t a1)
{
  return sub_233B13DB0(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_233B118DC);
}

uint64_t sub_233B1442C()
{
  return objectdestroy_5Tm(&qword_256112ED0);
}

uint64_t sub_233B14438()
{
  return objectdestroy_7Tm(&qword_256112ED0);
}

unint64_t sub_233B14444()
{
  unint64_t result;

  result = qword_256112F60;
  if (!qword_256112F60)
  {
    result = MEMORY[0x23493D400](&protocol conformance descriptor for OAuthInvalidateRequest, &type metadata for OAuthInvalidateRequest);
    atomic_store(result, (unint64_t *)&qword_256112F60);
  }
  return result;
}

unint64_t sub_233B14488()
{
  unint64_t result;

  result = qword_256112F68;
  if (!qword_256112F68)
  {
    result = MEMORY[0x23493D400](&protocol conformance descriptor for OAuthInvalidateRequest, &type metadata for OAuthInvalidateRequest);
    atomic_store(result, (unint64_t *)&qword_256112F68);
  }
  return result;
}

uint64_t sub_233B144CC()
{
  return objectdestroy_83Tm();
}

uint64_t sub_233B144D4(_QWORD *a1)
{
  uint64_t *v1;

  return sub_233B0C968(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_233B144F0(uint64_t a1)
{
  return sub_233B13DB0(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_233B1167C);
}

uint64_t sub_233B144FC()
{
  return objectdestroy_5Tm(&qword_256112ED0);
}

uint64_t sub_233B14508()
{
  return objectdestroy_7Tm(&qword_256112ED0);
}

uint64_t sub_233B14514(uint64_t a1)
{
  return sub_233B13DB0(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_233B1141C);
}

uint64_t sub_233B14520()
{
  return objectdestroy_5Tm(&qword_256112ED0);
}

uint64_t sub_233B1452C()
{
  return objectdestroy_7Tm(&qword_256112ED0);
}

uint64_t sub_233B14538(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_233B1457C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = type metadata accessor for VPPInstallRequest();
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  v3 = v0 + ((v2 + 16) & ~v2);
  v4 = sub_233B57E40();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  sub_233B04B94(*(_QWORD *)(v3 + *(int *)(v1 + 24)), *(_QWORD *)(v3 + *(int *)(v1 + 24) + 8), *(_BYTE *)(v3 + *(int *)(v1 + 24) + 16));
  return swift_deallocObject();
}

uint64_t sub_233B1460C(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_233B14650(_QWORD *a1)
{
  return sub_233B1467C(a1, (uint64_t (*)(uint64_t))type metadata accessor for VPPInstallRequest, &qword_256112F88, (uint64_t)&protocol conformance descriptor for VPPInstallRequest);
}

uint64_t sub_233B1467C(_QWORD *a1, uint64_t (*a2)(uint64_t), unint64_t *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;

  v9 = *(unsigned __int8 *)(*(_QWORD *)(a2(0) - 8) + 80);
  return sub_233B0CCB8(a1, v4 + ((v9 + 16) & ~v9), a2, a3, a4);
}

uint64_t sub_233B146EC(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_233B14728(uint64_t a1)
{
  return sub_233B13DB0(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_233B111BC);
}

uint64_t sub_233B14734()
{
  return objectdestroy_5Tm(&qword_256112ED0);
}

uint64_t sub_233B14740()
{
  return objectdestroy_7Tm(&qword_256112ED0);
}

unint64_t sub_233B1474C()
{
  unint64_t result;

  result = qword_256112F98;
  if (!qword_256112F98)
  {
    result = MEMORY[0x23493D400](&protocol conformance descriptor for RestoreRequest, &type metadata for RestoreRequest);
    atomic_store(result, (unint64_t *)&qword_256112F98);
  }
  return result;
}

unint64_t sub_233B14790()
{
  unint64_t result;

  result = qword_256112FA0;
  if (!qword_256112FA0)
  {
    result = MEMORY[0x23493D400](&protocol conformance descriptor for RestoreRequest, &type metadata for RestoreRequest);
    atomic_store(result, (unint64_t *)&qword_256112FA0);
  }
  return result;
}

uint64_t sub_233B147D4()
{
  return swift_deallocObject();
}

uint64_t sub_233B147E4(_QWORD *a1)
{
  uint64_t v1;

  return sub_233B0CB9C(a1, *(_BYTE *)(v1 + 16), (void (*)(void))sub_233B14790, &qword_2504DDEA8, (uint64_t)&type metadata for RestoreRequest);
}

uint64_t sub_233B14810(uint64_t a1)
{
  return sub_233B13DB0(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_233B10F5C);
}

uint64_t sub_233B1481C()
{
  return objectdestroy_5Tm(&qword_256112ED0);
}

uint64_t sub_233B14828()
{
  return objectdestroy_7Tm(&qword_256112ED0);
}

unint64_t sub_233B14834()
{
  unint64_t result;

  result = qword_256112FA8;
  if (!qword_256112FA8)
  {
    result = MEMORY[0x23493D400](&protocol conformance descriptor for DDMDeclarationStatusRequest, &type metadata for DDMDeclarationStatusRequest);
    atomic_store(result, (unint64_t *)&qword_256112FA8);
  }
  return result;
}

unint64_t sub_233B14878()
{
  unint64_t result;

  result = qword_256112FB8;
  if (!qword_256112FB8)
  {
    result = MEMORY[0x23493D400](&protocol conformance descriptor for DDMDeclarationStatusRequest, &type metadata for DDMDeclarationStatusRequest);
    atomic_store(result, (unint64_t *)&qword_256112FB8);
  }
  return result;
}

uint64_t sub_233B148BC()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_233B148E0(_QWORD *a1)
{
  uint64_t v1;

  return sub_233B25090(a1, (uint64_t *)(v1 + 16));
}

uint64_t sub_233B148F8(uint64_t a1)
{
  return sub_233B13DB0(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_233B10CFC);
}

uint64_t sub_233B14904()
{
  return objectdestroy_5Tm(&qword_256112FC8);
}

uint64_t sub_233B14910(uint64_t a1)
{
  return sub_233B13DD0(a1, &qword_256112FC8, (uint64_t (*)(uint64_t, uint64_t, uint64_t *))sub_233B12BDC);
}

uint64_t sub_233B14924()
{
  return objectdestroy_7Tm(&qword_256112FC8);
}

uint64_t sub_233B14930(uint64_t a1, uint64_t a2)
{
  return sub_233B14944(a1, a2, &qword_256112FC8, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))sub_233B12DC8);
}

uint64_t sub_233B14944(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(uint64_t, uint64_t, unint64_t, _QWORD))
{
  uint64_t v4;
  uint64_t v7;
  unint64_t v8;

  v7 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(a3) - 8);
  v8 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  return a4(a1, a2, v4 + v8, *(_QWORD *)(v4 + ((*(_QWORD *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_233B149B4(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) == 0)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t sub_233B149C0(_QWORD *a1)
{
  uint64_t v1;

  return sub_233B25074(a1, (uint64_t *)(v1 + 16));
}

uint64_t sub_233B149D8(uint64_t a1)
{
  return sub_233B13DB0(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_233B10A9C);
}

uint64_t sub_233B149E4()
{
  return objectdestroy_5Tm(&qword_256112ED0);
}

uint64_t sub_233B149F0()
{
  return objectdestroy_7Tm(&qword_256112ED0);
}

unint64_t sub_233B149FC()
{
  unint64_t result;

  result = qword_256112FE0;
  if (!qword_256112FE0)
  {
    result = MEMORY[0x23493D400](&protocol conformance descriptor for ManagedAppCancelRequest, &type metadata for ManagedAppCancelRequest);
    atomic_store(result, (unint64_t *)&qword_256112FE0);
  }
  return result;
}

unint64_t sub_233B14A40()
{
  unint64_t result;

  result = qword_256112FE8;
  if (!qword_256112FE8)
  {
    result = MEMORY[0x23493D400](&protocol conformance descriptor for ManagedAppCancelRequest, &type metadata for ManagedAppCancelRequest);
    atomic_store(result, (unint64_t *)&qword_256112FE8);
  }
  return result;
}

uint64_t sub_233B14A84(_QWORD *a1)
{
  uint64_t v1;

  return sub_233B0C850(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), (void (*)(void))sub_233B14A40, (uint64_t *)&off_2504DD240, (uint64_t)&type metadata for ManagedAppCancelRequest);
}

uint64_t sub_233B14AB0(uint64_t a1)
{
  return sub_233B13DB0(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_233B1083C);
}

uint64_t sub_233B14ABC()
{
  return objectdestroy_5Tm(&qword_256112ED0);
}

uint64_t sub_233B14AC8()
{
  return objectdestroy_7Tm(&qword_256112ED0);
}

uint64_t sub_233B14AD4()
{
  return objectdestroy_83Tm();
}

uint64_t objectdestroy_83Tm()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_233B14B14(_QWORD *a1)
{
  uint64_t v1;
  __int128 v2;
  _OWORD v4[2];
  char v5;

  v2 = *(_OWORD *)(v1 + 32);
  v4[0] = *(_OWORD *)(v1 + 16);
  v4[1] = v2;
  v5 = *(_BYTE *)(v1 + 48);
  return sub_233B0C624(a1, (uint64_t *)v4);
}

uint64_t sub_233B14B44(uint64_t a1)
{
  return sub_233B13DB0(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_233B105DC);
}

uint64_t sub_233B14B50()
{
  return objectdestroy_5Tm(&qword_256112ED0);
}

uint64_t objectdestroy_5Tm(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(a1);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1+ ((*(unsigned __int8 *)(*(_QWORD *)(v2 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v2 - 8) + 80)), v2);
  return swift_deallocObject();
}

uint64_t sub_233B14BB8()
{
  return objectdestroy_7Tm(&qword_256112ED0);
}

uint64_t objectdestroy_7Tm(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(a1);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1+ ((*(unsigned __int8 *)(*(_QWORD *)(v2 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v2 - 8) + 80)), v2);
  return swift_deallocObject();
}

uint64_t Platform.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_233B14F08(a1, a2);
}

uint64_t Platform.encode(to:)(_QWORD *a1)
{
  return sub_233B14FCC(a1);
}

uint64_t sub_233B14D04@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_233B14F08(a1, a2);
}

uint64_t sub_233B14D18(_QWORD *a1)
{
  return sub_233B14FCC(a1);
}

void static ManagedApp.Platform.macOS.getter(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void static ManagedApp.Platform.iOS.getter(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

void static ManagedApp.Platform.tvOS.getter(_QWORD *a1@<X8>)
{
  *a1 = 3;
}

void static ManagedApp.Platform.watchOS.getter(_QWORD *a1@<X8>)
{
  *a1 = 4;
}

void static ManagedApp.Platform.visionOS.getter(_QWORD *a1@<X8>)
{
  *a1 = 7;
}

uint64_t ManagedApp.Platform.description.getter()
{
  _QWORD *v0;
  uint64_t result;

  result = 0x534F63616DLL;
  switch(*v0)
  {
    case 0:
      return result;
    case 1:
      result = 5459817;
      break;
    case 3:
      result = 1397716596;
      break;
    case 4:
      result = 0x534F6863746177;
      break;
    case 7:
      result = 0x534F6E6F69736976;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t ManagedApp.Platform.hash(into:)()
{
  return sub_233B5859C();
}

BOOL static ManagedApp.Platform.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

uint64_t _s22ManagedAppDistribution8PlatformV9hashValueSivg_0()
{
  sub_233B58590();
  sub_233B5859C();
  return sub_233B585C0();
}

uint64_t sub_233B14E78()
{
  return sub_233B5859C();
}

uint64_t sub_233B14EA0()
{
  sub_233B58590();
  sub_233B5859C();
  return sub_233B585C0();
}

BOOL sub_233B14EE0(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

uint64_t ManagedApp.Platform.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_233B14F08(a1, a2);
}

uint64_t sub_233B14F08@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  _QWORD v7[4];

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_233B585F0();
  if (!v2)
  {
    __swift_project_boxed_opaque_existential_1(v7, v7[3]);
    v5 = sub_233B584E8();
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v7);
    *a2 = v5;
  }
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
}

uint64_t ManagedApp.Platform.encode(to:)(_QWORD *a1)
{
  return sub_233B14FCC(a1);
}

uint64_t sub_233B14FCC(_QWORD *a1)
{
  _BYTE v2[24];
  uint64_t v3;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_233B58620();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3);
  sub_233B5850C();
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)v2);
}

unint64_t sub_233B15060()
{
  unint64_t result;

  result = qword_256112FF0;
  if (!qword_256112FF0)
  {
    result = MEMORY[0x23493D400](&protocol conformance descriptor for Platform, &type metadata for Platform);
    atomic_store(result, (unint64_t *)&qword_256112FF0);
  }
  return result;
}

unint64_t sub_233B150A8()
{
  unint64_t result;

  result = qword_256112FF8;
  if (!qword_256112FF8)
  {
    result = MEMORY[0x23493D400](&protocol conformance descriptor for ManagedApp.Platform, &type metadata for ManagedApp.Platform);
    atomic_store(result, (unint64_t *)&qword_256112FF8);
  }
  return result;
}

ValueMetadata *type metadata accessor for Platform()
{
  return &type metadata for Platform;
}

ValueMetadata *type metadata accessor for ManagedApp.Platform()
{
  return &type metadata for ManagedApp.Platform;
}

uint64_t SyncXPCResult.__allocating_init()()
{
  uint64_t v0;

  v0 = swift_allocObject();
  SyncXPCResult.init()();
  return v0;
}

uint64_t SyncXPCResult.init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 104);
  v2 = sub_233B585CC();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
  return v0;
}

uint64_t SyncXPCResult.setResult(_:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  _BYTE *v11;
  char *v12;
  uint64_t v13;
  int v14;
  uint64_t result;
  _BYTE v16[24];

  v3 = *v1;
  v4 = sub_233B585CC();
  v5 = sub_233B581E8();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v9 = &v16[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v7);
  v11 = &v16[-v10];
  v12 = (char *)v1 + *(_QWORD *)(v3 + 104);
  swift_beginAccess();
  (*(void (**)(_BYTE *, char *, uint64_t))(v6 + 16))(v11, v12, v5);
  v13 = *(_QWORD *)(v4 - 8);
  v14 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v4);
  result = (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v11, v5);
  if (v14 == 1)
  {
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v13 + 16))(v9, a1, v4);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v9, 0, 1, v4);
    swift_beginAccess();
    (*(void (**)(char *, _BYTE *, uint64_t))(v6 + 40))(v12, v9, v5);
    return swift_endAccess();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t SyncXPCResult.result.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v13;

  v3 = *v1;
  v4 = sub_233B585CC();
  v5 = sub_233B581E8();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v13 - v7;
  v9 = (char *)v1 + *(_QWORD *)(v3 + 104);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v8, v9, v5);
  v10 = *(_QWORD *)(v4 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v4) != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v10 + 32))(a1, v8, v4);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  sub_233B13A30();
  swift_allocError();
  *v11 = 0;
  return swift_willThrow();
}

uint64_t SyncXPCResult.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 104);
  sub_233B585CC();
  v2 = sub_233B581E8();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t SyncXPCResult.__deallocating_deinit()
{
  SyncXPCResult.deinit();
  return swift_deallocClassInstance();
}

uint64_t sub_233B154EC()
{
  uint64_t result;
  unint64_t v1;

  sub_233B585CC();
  result = sub_233B581E8();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for SyncXPCResult(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SyncXPCResult);
}

uint64_t method lookup function for SyncXPCResult()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SyncXPCResult.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t CellularIdentity.isRoaming.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

void sub_233B15594()
{
  CellularIdentity.init(simIdentity:isRoaming:)(0xD000000000000014, 0x8000000233B61560, 0, (uint64_t)&byte_256113000);
}

void CellularIdentity.init(simIdentity:isRoaming:)(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD v15[4];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;

  v18 = a4;
  v21 = *MEMORY[0x24BDAC8D0];
  v7 = sub_233B57F00();
  v15[3] = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v16 = sub_233B57F0C();
  v15[2] = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v15[1] = (char *)v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_233B57FA8();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = a3;
  swift_bridgeObjectRetain();
  sub_233B57F9C();
  v17 = a1;
  sub_233B57F84();
  v14 = v13;
  v19 = a2;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  if (v14 >> 60 != 15)
  {
    sub_233B08530(&qword_256113028, (uint64_t (*)(uint64_t))MEMORY[0x24BDC6B80], MEMORY[0x24BDC6B70]);
    sub_233B57EF4();
    __asm { BR              X10 }
  }
  __break(1u);
  JUMPOUT(0x233B159FCLL);
}

uint64_t static CellularIdentity.null.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (qword_256112B38 != -1)
    swift_once();
  v3 = qword_256113008;
  v2 = unk_256113010;
  v4 = qword_256113018;
  v5 = unk_256113020;
  *(_BYTE *)a1 = byte_256113000;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v2;
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v5;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t static CellularIdentity.current()(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1[19] = a1;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_256113040);
  v1[20] = v2;
  v1[21] = *(_QWORD *)(v2 - 8);
  v1[22] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_233B15AF4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  uint64_t *boxed_opaque_existential_0;
  _QWORD *v6;

  v2 = v0[21];
  v1 = v0[22];
  v3 = v0[20];
  v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDC2810]), sel_initWithQueue_, 0);
  v0[23] = v4;
  v0[7] = v0 + 18;
  v0[2] = v0;
  v0[3] = sub_233B15C48;
  swift_continuation_init();
  v0[17] = v3;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v0 + 14);
  sub_233B16F64(0, &qword_256113048);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25424D5A0);
  sub_233B580BC();
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v2 + 32))(boxed_opaque_existential_0, v1, v3);
  v0[10] = MEMORY[0x24BDAC760];
  v6 = v0 + 10;
  v6[1] = 1107296256;
  v6[2] = sub_233B15E78;
  v6[3] = &block_descriptor_0;
  objc_msgSend(v4, sel_getCurrentDataSubscriptionContext_, v6);
  return swift_continuation_await();
}

uint64_t sub_233B15C48()
{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 192) = *(_QWORD *)(*(_QWORD *)v0 + 48);
  return swift_task_switch();
}

uint64_t sub_233B15CA8()
{
  _QWORD *v0;
  void *v1;
  void *v2;
  id v3;
  id v4;
  _QWORD *v5;

  v1 = (void *)v0[23];
  v2 = (void *)v0[18];
  v0[25] = v2;
  v3 = v2;
  v4 = v1;
  v5 = (_QWORD *)swift_task_alloc();
  v0[26] = v5;
  *v5 = v0;
  v5[1] = sub_233B15D20;
  return CellularIdentity.init(for:using:)(v0[19], (uint64_t)v3, v0[23]);
}

uint64_t sub_233B15D20()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_233B15D74()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 184);

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_233B15DB4()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  swift_willThrow();
  if (qword_256112B38 != -1)
    swift_once();
  v2 = *(void **)(v0 + 184);
  v1 = *(void **)(v0 + 192);
  v3 = *(_QWORD *)(v0 + 152);
  v4 = byte_256113000;
  v6 = qword_256113008;
  v5 = unk_256113010;
  v8 = qword_256113018;
  v7 = unk_256113020;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();

  *(_BYTE *)v3 = v4;
  *(_QWORD *)(v3 + 8) = v6;
  *(_QWORD *)(v3 + 16) = v5;
  *(_QWORD *)(v3 + 24) = v8;
  *(_QWORD *)(v3 + 32) = v7;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_233B15E78(uint64_t a1, void *a2, void *a3)
{
  sub_233B16908(a1, a2, a3, &qword_256113040);
}

uint64_t CellularIdentity.init(for:using:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3[38] = a2;
  v3[39] = a3;
  v3[37] = a1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256113058);
  v3[40] = v4;
  v3[41] = *(_QWORD *)(v4 - 8);
  v3[42] = swift_task_alloc();
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256113060);
  v3[43] = v5;
  v3[44] = *(_QWORD *)(v5 - 8);
  v3[45] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_233B15F18()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t *boxed_opaque_existential_0;
  _QWORD *v7;

  v2 = v0[44];
  v1 = v0[45];
  v3 = v0[43];
  v4 = v0[38];
  v5 = (void *)v0[39];
  v0[7] = v0 + 34;
  v0[2] = v0;
  v0[3] = sub_233B1603C;
  swift_continuation_init();
  v0[25] = v3;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v0 + 22);
  v0[46] = __swift_instantiateConcreteTypeFromMangledName(&qword_25424D5A0);
  sub_233B580BC();
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v2 + 32))(boxed_opaque_existential_0, v1, v3);
  v0[18] = MEMORY[0x24BDAC760];
  v7 = v0 + 18;
  v7[1] = 1107296256;
  v7[2] = sub_233B16860;
  v7[3] = &block_descriptor_4;
  objc_msgSend(v5, sel_copySIMIdentity_completion_, v4, v7);
  return swift_continuation_await();
}

uint64_t sub_233B1603C()
{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 376) = *(_QWORD *)(*(_QWORD *)v0 + 48);
  return swift_task_switch();
}

uint64_t sub_233B1609C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t *boxed_opaque_existential_0;
  id v7;
  _QWORD *v8;
  id v10;

  v1 = v0[41];
  v2 = v0[42];
  v3 = v0[40];
  v10 = (id)v0[39];
  v4 = (void *)v0[38];
  v5 = v0[35];
  v0[48] = v0[34];
  v0[49] = v5;
  v0[15] = v0 + 36;
  v0[10] = v0;
  v0[11] = sub_233B161E8;
  swift_continuation_init();
  v0[33] = v3;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v0 + 30);
  sub_233B16F64(0, &qword_256113068);
  v7 = v4;
  sub_233B580BC();
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v1 + 32))(boxed_opaque_existential_0, v2, v3);
  v0[26] = MEMORY[0x24BDAC760];
  v8 = v0 + 26;
  v8[1] = 1107296256;
  v8[2] = sub_233B168FC;
  v8[3] = &block_descriptor_7;
  objc_msgSend(v10, sel_getDataStatus_completion_, v7, v8);
  return swift_continuation_await();
}

uint64_t sub_233B161E8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 112);
  *(_QWORD *)(*(_QWORD *)v0 + 400) = v1;
  if (v1)
    swift_bridgeObjectRelease();
  return swift_task_switch();
}

uint64_t sub_233B16250()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v11[8];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *(_QWORD *)(v0 + 384);
  v1 = *(_QWORD *)(v0 + 392);
  v3 = *(void **)(v0 + 288);

  CellularIdentity.init(simIdentity:isRoaming:)(v2, v1, objc_msgSend(v3, sel_inHomeCountry) ^ 1, (uint64_t)v11);
  v4 = *(void **)(v0 + 304);

  v6 = v12;
  v5 = v13;
  v8 = v14;
  v7 = v15;
  v9 = *(_QWORD *)(v0 + 296);
  *(_BYTE *)v9 = v11[0];
  *(_QWORD *)(v9 + 8) = v6;
  *(_QWORD *)(v9 + 16) = v5;
  *(_QWORD *)(v9 + 24) = v8;
  *(_QWORD *)(v9 + 32) = v7;
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_233B1637C()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  swift_willThrow();
  v1 = *(void **)(v0 + 376);
  if (qword_256112B38 != -1)
    swift_once();
  v3 = *(void **)(v0 + 304);
  v2 = *(void **)(v0 + 312);
  v4 = byte_256113000;
  v6 = qword_256113008;
  v5 = unk_256113010;
  v8 = qword_256113018;
  v7 = unk_256113020;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();

  v9 = *(_QWORD *)(v0 + 296);
  *(_BYTE *)v9 = v4;
  *(_QWORD *)(v9 + 8) = v6;
  *(_QWORD *)(v9 + 16) = v5;
  *(_QWORD *)(v9 + 24) = v8;
  *(_QWORD *)(v9 + 32) = v7;
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_233B16454()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(void **)(v0 + 304);
  swift_willThrow();

  v2 = *(void **)(v0 + 400);
  if (qword_256112B38 != -1)
    swift_once();
  v4 = *(void **)(v0 + 304);
  v3 = *(void **)(v0 + 312);
  v5 = byte_256113000;
  v7 = qword_256113008;
  v6 = unk_256113010;
  v9 = qword_256113018;
  v8 = unk_256113020;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();

  v10 = *(_QWORD *)(v0 + 296);
  *(_BYTE *)v10 = v5;
  *(_QWORD *)(v10 + 8) = v7;
  *(_QWORD *)(v10 + 16) = v6;
  *(_QWORD *)(v10 + 24) = v9;
  *(_QWORD *)(v10 + 32) = v8;
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void static CellularIdentity.current()(uint64_t a1@<X8>)
{
  id v2;
  id v3;
  void *v4;
  id v5;
  id v6;
  void *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13[2];

  v13[1] = *(id *)MEMORY[0x24BDAC8D0];
  v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDC2810]), sel_initWithQueue_, 0);
  v13[0] = 0;
  v3 = objc_msgSend(v2, sel_getCurrentDataSubscriptionContextSync_, v13);
  if (v3)
  {
    v4 = v3;
    v5 = v13[0];
    CellularIdentity.init(for:using:)(v2, v4, a1);
  }
  else
  {
    v6 = v13[0];
    v7 = (void *)sub_233B57DA4();

    swift_willThrow();
    if (qword_256112B38 != -1)
      swift_once();
    v8 = byte_256113000;
    v10 = qword_256113008;
    v9 = unk_256113010;
    v12 = qword_256113018;
    v11 = unk_256113020;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();

    *(_BYTE *)a1 = v8;
    *(_QWORD *)(a1 + 8) = v10;
    *(_QWORD *)(a1 + 16) = v9;
    *(_QWORD *)(a1 + 24) = v12;
    *(_QWORD *)(a1 + 32) = v11;
  }
}

void CellularIdentity.init(for:using:)(id a1@<X1>, void *a2@<X0>, uint64_t a3@<X8>)
{
  id v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  id v13;
  void *v14;
  id v15;
  char v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  void *v22;
  id v23;
  id v24[6];

  v24[5] = *(id *)MEMORY[0x24BDAC8D0];
  v24[0] = 0;
  v6 = objc_msgSend(a1, sel_copySIMIdentity_error_, a2, v24);
  v7 = v24[0];
  if (v6)
  {
    v8 = v6;
    v9 = sub_233B57F78();
    v11 = v10;
    v12 = v7;

    v24[0] = 0;
    v13 = objc_msgSend(a1, sel_getDataStatus_error_, a2, v24);
    if (v13)
    {
      v14 = v13;
      v15 = v24[0];
      CellularIdentity.init(simIdentity:isRoaming:)(v9, v11, objc_msgSend(v14, sel_inHomeCountry) ^ 1, (uint64_t)v24);

      v16 = (char)v24[0];
      v18 = v24[1];
      v17 = v24[2];
      v20 = v24[3];
      v19 = v24[4];
      goto LABEL_9;
    }
    v23 = v24[0];
    swift_bridgeObjectRelease();
    v22 = (void *)sub_233B57DA4();

  }
  else
  {
    v21 = v24[0];
    v22 = (void *)sub_233B57DA4();

  }
  swift_willThrow();
  if (qword_256112B38 != -1)
    swift_once();
  v16 = byte_256113000;
  v18 = (id)qword_256113008;
  v17 = (id)unk_256113010;
  v20 = (id)qword_256113018;
  v19 = (id)unk_256113020;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();

LABEL_9:
  *(_BYTE *)a3 = v16;
  *(_QWORD *)(a3 + 8) = v18;
  *(_QWORD *)(a3 + 16) = v17;
  *(_QWORD *)(a3 + 24) = v20;
  *(_QWORD *)(a3 + 32) = v19;
}

void sub_233B16860(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;

  __swift_project_boxed_opaque_existential_1((_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 56));
  if (a3)
  {
    v4 = a3;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256113060);
    sub_233B580C8();

  }
  else
  {
    sub_233B57F78();
    __swift_instantiateConcreteTypeFromMangledName(&qword_256113060);
    sub_233B580D4();
  }
}

void sub_233B168FC(uint64_t a1, void *a2, void *a3)
{
  sub_233B16908(a1, a2, a3, &qword_256113058);
}

void sub_233B16908(uint64_t a1, void *a2, void *a3, uint64_t *a4)
{
  id v7;
  id v8;

  __swift_project_boxed_opaque_existential_1((_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 56));
  if (a3)
  {
    v7 = a3;
    __swift_instantiateConcreteTypeFromMangledName(a4);
    sub_233B580C8();

  }
  else if (a2)
  {
    v8 = a2;
    __swift_instantiateConcreteTypeFromMangledName(a4);
    sub_233B580D4();
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_233B169A4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;

  v2 = sub_233B57F0C();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_233B08530(&qword_256113070, v6, MEMORY[0x24BDC6BB0]);
  v7 = sub_233B58014();
  v38 = MEMORY[0x24BEE4AF8];
  sub_233B49F04(0, v7 & ~(v7 >> 63), 0);
  v8 = v38;
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1, v2);
  result = sub_233B58008();
  if ((v7 & 0x8000000000000000) == 0)
  {
    v10 = v37;
    if (v7)
    {
      v11 = *(_QWORD *)(v36 + 16);
      v34 = v36;
      *(_QWORD *)&v35 = v11;
      v33 = v36 + 32;
      v32 = xmmword_233B59630;
      v12 = v37;
      while ((_QWORD)v35 != v12)
      {
        if ((v10 & 0x8000000000000000) != 0)
          goto LABEL_21;
        if (v12 >= *(_QWORD *)(v34 + 16))
          goto LABEL_22;
        v13 = *(_BYTE *)(v33 + v12);
        __swift_instantiateConcreteTypeFromMangledName(&qword_256113078);
        v14 = swift_allocObject();
        *(_OWORD *)(v14 + 16) = v32;
        *(_QWORD *)(v14 + 56) = MEMORY[0x24BEE4260];
        *(_QWORD *)(v14 + 64) = MEMORY[0x24BEE42B0];
        *(_BYTE *)(v14 + 32) = v13;
        result = sub_233B57F90();
        v15 = result;
        v17 = v16;
        v38 = v8;
        v19 = *(_QWORD *)(v8 + 16);
        v18 = *(_QWORD *)(v8 + 24);
        if (v19 >= v18 >> 1)
        {
          result = sub_233B49F04(v18 > 1, v19 + 1, 1);
          v8 = v38;
        }
        *(_QWORD *)(v8 + 16) = v19 + 1;
        v20 = v8 + 16 * v19;
        *(_QWORD *)(v20 + 32) = v15;
        *(_QWORD *)(v20 + 40) = v17;
        ++v12;
        if (!--v7)
        {
          v37 = v12;
          goto LABEL_12;
        }
      }
      __break(1u);
LABEL_21:
      __break(1u);
LABEL_22:
      __break(1u);
    }
    else
    {
      v12 = v37;
LABEL_12:
      v21 = v36;
      v22 = *(_QWORD *)(v36 + 16);
      if (v12 == v22)
      {
LABEL_13:
        swift_bridgeObjectRelease();
        return v8;
      }
      v35 = xmmword_233B59630;
      while (v12 < v22)
      {
        v23 = *(_BYTE *)(v21 + 32 + v12);
        v37 = v12 + 1;
        __swift_instantiateConcreteTypeFromMangledName(&qword_256113078);
        v24 = swift_allocObject();
        *(_OWORD *)(v24 + 16) = v35;
        *(_QWORD *)(v24 + 56) = MEMORY[0x24BEE4260];
        *(_QWORD *)(v24 + 64) = MEMORY[0x24BEE42B0];
        *(_BYTE *)(v24 + 32) = v23;
        result = sub_233B57F90();
        v25 = result;
        v27 = v26;
        v38 = v8;
        v29 = *(_QWORD *)(v8 + 16);
        v28 = *(_QWORD *)(v8 + 24);
        if (v29 >= v28 >> 1)
        {
          result = sub_233B49F04(v28 > 1, v29 + 1, 1);
          v8 = v38;
        }
        *(_QWORD *)(v8 + 16) = v29 + 1;
        v30 = v8 + 16 * v29;
        *(_QWORD *)(v30 + 32) = v25;
        *(_QWORD *)(v30 + 40) = v27;
        v12 = v37;
        v22 = *(_QWORD *)(v21 + 16);
        if (v37 == v22)
          goto LABEL_13;
      }
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t CellularIdentity.description.getter()
{
  unint64_t v1;

  if (os_variant_has_internal_content())
  {
    sub_233B5829C();
    swift_bridgeObjectRelease();
    v1 = 0xD000000000000019;
    swift_bridgeObjectRetain();
    sub_233B57FD8();
    swift_bridgeObjectRelease();
    sub_233B57FD8();
  }
  else
  {
    sub_233B5829C();
    swift_bridgeObjectRelease();
    v1 = 0xD00000000000002ALL;
  }
  swift_bridgeObjectRetain();
  sub_233B57FD8();
  swift_bridgeObjectRelease();
  sub_233B57FD8();
  return v1;
}

uint64_t sub_233B16DF0(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_233B57D20();
  if (!result || (result = sub_233B57D38(), !__OFSUB__(a1, result)))
  {
    if (!__OFSUB__(a2, a1))
    {
      sub_233B57D2C();
      sub_233B57F00();
      sub_233B08530(&qword_256113028, (uint64_t (*)(uint64_t))MEMORY[0x24BDC6B80], MEMORY[0x24BDC6B70]);
      return sub_233B57EDC();
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_233B16EB4(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_233B13D4C(a1, a2);
  return a1;
}

uint64_t sub_233B16EC8(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_233B13CD8(a1, a2);
  return a1;
}

unint64_t sub_233B16EDC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256113030;
  if (!qword_256113030)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25424CF18);
    result = MEMORY[0x23493D400](MEMORY[0x24BEE12B0], v1);
    atomic_store(result, (unint64_t *)&qword_256113030);
  }
  return result;
}

uint64_t *__swift_allocate_boxed_opaque_existential_0(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t sub_233B16F64(uint64_t a1, unint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t destroy for CellularIdentity()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for CellularIdentity(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for CellularIdentity(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for CellularIdentity(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for CellularIdentity(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CellularIdentity(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for CellularIdentity()
{
  return &type metadata for CellularIdentity;
}

void sub_233B1718C(char a1)
{
  sub_233B58590();
  __asm { BR              X10 }
}

uint64_t sub_233B171E0()
{
  sub_233B57FCC();
  swift_bridgeObjectRelease();
  return sub_233B585C0();
}

void sub_233B17274(uint64_t a1, char a2)
{
  sub_233B58590();
  __asm { BR              X10 }
}

uint64_t sub_233B172C4()
{
  sub_233B57FCC();
  swift_bridgeObjectRelease();
  return sub_233B585C0();
}

uint64_t ManagedAppStatus.bundleID.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ManagedAppStatus.bundleID.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*ManagedAppStatus.bundleID.modify())()
{
  return nullsub_1;
}

uint64_t ManagedAppStatus.declarationIdentifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ManagedAppStatus.declarationIdentifier.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return result;
}

uint64_t (*ManagedAppStatus.declarationIdentifier.modify())()
{
  return nullsub_1;
}

uint64_t ManagedAppStatus.declarationKey.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ManagedAppStatus.declarationKey.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 32) = a1;
  *(_QWORD *)(v2 + 40) = a2;
  return result;
}

uint64_t (*ManagedAppStatus.declarationKey.modify())()
{
  return nullsub_1;
}

void ManagedAppStatus.state.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 48);
}

_BYTE *ManagedAppStatus.state.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 48) = *result;
  return result;
}

uint64_t (*ManagedAppStatus.state.modify())()
{
  return nullsub_1;
}

void ManagedAppStatus.updateState.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 49);
}

_BYTE *ManagedAppStatus.updateState.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 49) = *result;
  return result;
}

uint64_t (*ManagedAppStatus.updateState.modify())()
{
  return nullsub_1;
}

uint64_t ManagedAppStatus.reasons.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ManagedAppStatus.reasons.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 56) = a1;
  return result;
}

uint64_t (*ManagedAppStatus.reasons.modify())()
{
  return nullsub_1;
}

uint64_t ManagedAppStatus.name.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 64);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ManagedAppStatus.name.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 64) = a1;
  *(_QWORD *)(v2 + 72) = a2;
  return result;
}

uint64_t (*ManagedAppStatus.name.modify())()
{
  return nullsub_1;
}

uint64_t ManagedAppStatus.installedVersionInfo.getter@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v1[10];
  v3 = v1[11];
  v4 = v1[12];
  v5 = v1[13];
  v6 = v1[14];
  v7 = v1[15];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  return sub_233B175C4(v2, v3, v4, v5);
}

uint64_t sub_233B175C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  if (a4)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

__n128 ManagedAppStatus.installedVersionInfo.setter(__int128 *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  __n128 result;
  __n128 v5;
  __int128 v6;

  v5 = (__n128)a1[1];
  v6 = *a1;
  v2 = *((_QWORD *)a1 + 4);
  v3 = *((_QWORD *)a1 + 5);
  sub_233B1764C(v1[10], v1[11], v1[12], v1[13]);
  result = v5;
  *((_OWORD *)v1 + 5) = v6;
  *((__n128 *)v1 + 6) = v5;
  v1[14] = v2;
  v1[15] = v3;
  return result;
}

uint64_t sub_233B1764C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  if (a4)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t (*ManagedAppStatus.installedVersionInfo.modify())()
{
  return nullsub_1;
}

__n128 ManagedAppStatus.init(bundleID:declarationIdentifier:declarationKey:state:updateState:reasons:name:installedVersionInfo:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char *a7@<X6>, char *a8@<X7>, uint64_t a9@<X8>, __int128 a10, uint64_t a11, uint64_t a12)
{
  char v12;
  char v13;
  __int128 v14;
  __n128 result;

  v12 = *a7;
  v13 = *a8;
  *(_QWORD *)a9 = a1;
  *(_QWORD *)(a9 + 8) = a2;
  *(_QWORD *)(a9 + 16) = a3;
  *(_QWORD *)(a9 + 24) = a4;
  *(_QWORD *)(a9 + 32) = a5;
  *(_QWORD *)(a9 + 40) = a6;
  *(_BYTE *)(a9 + 48) = v12;
  *(_BYTE *)(a9 + 49) = v13;
  *(_OWORD *)(a9 + 56) = a10;
  *(_QWORD *)(a9 + 72) = a11;
  v14 = *(_OWORD *)(a12 + 16);
  *(_OWORD *)(a9 + 80) = *(_OWORD *)a12;
  *(_OWORD *)(a9 + 96) = v14;
  result = *(__n128 *)(a12 + 32);
  *(__n128 *)(a9 + 112) = result;
  return result;
}

uint64_t ManagedAppStatus.InstalledVersionInfo.appleVersionID.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t ManagedAppStatus.InstalledVersionInfo.appleVersionID.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)v2 = result;
  *(_BYTE *)(v2 + 8) = a2 & 1;
  return result;
}

uint64_t (*ManagedAppStatus.InstalledVersionInfo.appleVersionID.modify())()
{
  return nullsub_1;
}

uint64_t ManagedAppStatus.InstalledVersionInfo.bundleVersion.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ManagedAppStatus.InstalledVersionInfo.bundleVersion.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return result;
}

uint64_t (*ManagedAppStatus.InstalledVersionInfo.bundleVersion.modify())()
{
  return nullsub_1;
}

uint64_t ManagedAppStatus.InstalledVersionInfo.bundleShortVersion.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ManagedAppStatus.InstalledVersionInfo.bundleShortVersion.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 32) = a1;
  *(_QWORD *)(v2 + 40) = a2;
  return result;
}

uint64_t (*ManagedAppStatus.InstalledVersionInfo.bundleShortVersion.modify())()
{
  return nullsub_1;
}

uint64_t ManagedAppStatus.InstalledVersionInfo.init(appleVersionID:bundleVersion:bundleShortVersion:)@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  *(_QWORD *)a7 = result;
  *(_BYTE *)(a7 + 8) = a2 & 1;
  *(_QWORD *)(a7 + 16) = a3;
  *(_QWORD *)(a7 + 24) = a4;
  *(_QWORD *)(a7 + 32) = a5;
  *(_QWORD *)(a7 + 40) = a6;
  return result;
}

uint64_t sub_233B177F0()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0x6556656C646E7562;
  if (*v0 != 1)
    v1 = 0xD000000000000012;
  if (*v0)
    return v1;
  else
    return 0x726556656C707061;
}

uint64_t sub_233B17868@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_233B1A4AC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_233B1788C()
{
  sub_233B192AC();
  return sub_233B58638();
}

uint64_t sub_233B178B4()
{
  sub_233B192AC();
  return sub_233B58644();
}

uint64_t ManagedAppStatus.State.init(rawValue:)@<X0>(char *a1@<X8>)
{
  unint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_233B5835C();
  result = swift_bridgeObjectRelease();
  v4 = 10;
  if (v2 < 0xA)
    v4 = v2;
  *a1 = v4;
  return result;
}

uint64_t ManagedAppStatus.State.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_233B17964 + 4 * byte_233B5969A[*v0]))(0x6C616E6F6974706FLL, 0xE800000000000000);
}

uint64_t sub_233B17964()
{
  return 0x646575657571;
}

unint64_t sub_233B17978()
{
  return 0xD000000000000013;
}

uint64_t sub_233B17A38()
{
  return 0x64656C696166;
}

void sub_233B17A4C(char *a1)
{
  sub_233B25460(*a1);
}

uint64_t sub_233B17A58()
{
  char *v0;
  char v1;
  _BYTE v3[72];

  v1 = *v0;
  sub_233B58590();
  sub_233B25C9C((uint64_t)v3, v1);
  return sub_233B585C0();
}

void sub_233B17A9C(uint64_t a1)
{
  char *v1;

  sub_233B25C9C(a1, *v1);
}

uint64_t sub_233B17AA4()
{
  char *v0;
  char v1;
  _BYTE v3[72];

  v1 = *v0;
  sub_233B58590();
  sub_233B25C9C((uint64_t)v3, v1);
  return sub_233B585C0();
}

uint64_t sub_233B17AE4@<X0>(char *a1@<X8>)
{
  return ManagedAppStatus.State.init(rawValue:)(a1);
}

uint64_t sub_233B17AF0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = ManagedAppStatus.State.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t ManagedAppStatus.Reason.init(rawValue:)@<X0>(char *a1@<X8>)
{
  unint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_233B5835C();
  result = swift_bridgeObjectRelease();
  v4 = 12;
  if (v2 < 0xC)
    v4 = v2;
  *a1 = v4;
  return result;
}

uint64_t ManagedAppStatus.Reason.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_233B17BA4 + 4 * byte_233B596A4[*v0]))(0xD00000000000001CLL, 0x8000000233B60DE0);
}

uint64_t sub_233B17BA4@<X0>(uint64_t a1@<X8>)
{
  return a1 + 6;
}

uint64_t sub_233B17BE8()
{
  return 0x7070416E41746F6ELL;
}

uint64_t sub_233B17C00()
{
  return 0x6F70707553746F6ELL;
}

uint64_t sub_233B17C24()
{
  return 0x4E65736E6563696CLL;
}

uint64_t sub_233B17C48()
{
  return 0x64616F6C6E776F64;
}

uint64_t sub_233B17C6C()
{
  return 0x466C6C6174736E69;
}

uint64_t sub_233B17C90()
{
  return 0x656A655272657375;
}

uint64_t sub_233B17CB4()
{
  return 0x7641657461647075;
}

uint64_t sub_233B17CD8()
{
  return 0x6146657461647075;
}

uint64_t sub_233B17CF8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_233B253BC(*a1, *a2);
}

uint64_t sub_233B17D04()
{
  sub_233B58590();
  ManagedAppStatus.Reason.rawValue.getter();
  sub_233B57FCC();
  swift_bridgeObjectRelease();
  return sub_233B585C0();
}

uint64_t sub_233B17D68()
{
  ManagedAppStatus.Reason.rawValue.getter();
  sub_233B57FCC();
  return swift_bridgeObjectRelease();
}

uint64_t sub_233B17DB8()
{
  sub_233B58590();
  ManagedAppStatus.Reason.rawValue.getter();
  sub_233B57FCC();
  swift_bridgeObjectRelease();
  return sub_233B585C0();
}

uint64_t sub_233B17E18@<X0>(char *a1@<X8>)
{
  return ManagedAppStatus.Reason.init(rawValue:)(a1);
}

uint64_t sub_233B17E24@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = ManagedAppStatus.Reason.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t ManagedAppStatus.UpdateState.init(rawValue:)@<X0>(char *a1@<X8>)
{
  unint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_233B5835C();
  result = swift_bridgeObjectRelease();
  v4 = 5;
  if (v2 < 5)
    v4 = v2;
  *a1 = v4;
  return result;
}

uint64_t ManagedAppStatus.UpdateState.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_233B17ED4 + 4 * byte_233B596B0[*v0]))(0x6C62616C69617661, 0xE900000000000065);
}

unint64_t sub_233B17ED4()
{
  return 0xD000000000000012;
}

unint64_t sub_233B17EF0()
{
  return 0xD000000000000017;
}

uint64_t sub_233B17F14()
{
  return 0x676E697461647075;
}

uint64_t sub_233B17F2C()
{
  return 0x64656C696166;
}

uint64_t sub_233B17F40(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_233B17F74 + 4 * byte_233B596B5[a1]))(0x4449656C646E7562, 0xE800000000000000);
}

unint64_t sub_233B17F74()
{
  return 0xD000000000000015;
}

uint64_t sub_233B17F94()
{
  return 0x746172616C636564;
}

uint64_t sub_233B17FB8()
{
  return 0x6574617473;
}

uint64_t sub_233B17FCC()
{
  return 0x7453657461647075;
}

uint64_t sub_233B17FEC()
{
  return 0x736E6F73616572;
}

uint64_t sub_233B18004()
{
  return 1701667182;
}

unint64_t sub_233B18014()
{
  return 0xD000000000000014;
}

void sub_233B18030(char *a1)
{
  sub_233B25708(*a1);
}

void sub_233B1803C()
{
  char *v0;

  sub_233B1718C(*v0);
}

void sub_233B18044(uint64_t a1)
{
  char *v1;

  sub_233B25DD4(a1, *v1);
}

void sub_233B1804C(uint64_t a1)
{
  char *v1;

  sub_233B17274(a1, *v1);
}

uint64_t sub_233B18054@<X0>(char *a1@<X8>)
{
  return ManagedAppStatus.UpdateState.init(rawValue:)(a1);
}

uint64_t sub_233B18060@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = ManagedAppStatus.UpdateState.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_233B18084()
{
  unsigned __int8 *v0;

  return sub_233B17F40(*v0);
}

uint64_t sub_233B1808C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_233B1A644(a1, a2);
  *a3 = result;
  return result;
}

void sub_233B180B0(_BYTE *a1@<X8>)
{
  *a1 = 8;
}

uint64_t sub_233B180BC()
{
  sub_233B1840C();
  return sub_233B58638();
}

uint64_t sub_233B180E4()
{
  sub_233B1840C();
  return sub_233B58644();
}

uint64_t ManagedAppStatus.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  char v44;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256113080);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(v1 + 16);
  v34 = *(_QWORD *)(v1 + 24);
  v35 = v7;
  v8 = *(_QWORD *)(v1 + 32);
  v32 = *(_QWORD *)(v1 + 40);
  v33 = v8;
  v43 = *(unsigned __int8 *)(v1 + 48);
  v31 = *(unsigned __int8 *)(v1 + 49);
  v9 = *(_QWORD *)(v1 + 56);
  v10 = *(_QWORD *)(v1 + 64);
  v28 = *(_QWORD *)(v1 + 72);
  v29 = v9;
  v30 = *(_QWORD *)(v1 + 80);
  v11 = *(_QWORD *)(v1 + 96);
  v23 = *(_QWORD *)(v1 + 88);
  v24 = v11;
  v25 = *(_QWORD *)(v1 + 104);
  v12 = *(_QWORD *)(v1 + 120);
  v26 = *(_QWORD *)(v1 + 112);
  v27 = v10;
  v13 = a1[3];
  v14 = a1;
  v16 = v15;
  __swift_project_boxed_opaque_existential_1(v14, v13);
  sub_233B1840C();
  sub_233B5862C();
  LOBYTE(v37) = 0;
  v17 = v36;
  sub_233B5844C();
  if (!v17)
  {
    v18 = v43;
    v19 = v31;
    v36 = v12;
    v20 = v30;
    LOBYTE(v37) = 1;
    sub_233B5844C();
    LOBYTE(v37) = 2;
    sub_233B5844C();
    LOBYTE(v37) = v18;
    v44 = 3;
    sub_233B18450();
    sub_233B5847C();
    LOBYTE(v37) = v19;
    v44 = 4;
    sub_233B18494();
    sub_233B58434();
    v37 = v29;
    v44 = 5;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2561130A0);
    sub_233B18CD8(&qword_2561130A8, (uint64_t (*)(void))sub_233B184D8, MEMORY[0x24BEE12A0]);
    sub_233B5847C();
    LOBYTE(v37) = 6;
    sub_233B5844C();
    v37 = v20;
    v38 = v23;
    v39 = v24;
    v40 = v25;
    v41 = v26;
    v42 = v36;
    v44 = 7;
    sub_233B1851C();
    sub_233B58434();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v16);
}

unint64_t sub_233B1840C()
{
  unint64_t result;

  result = qword_256113088;
  if (!qword_256113088)
  {
    result = MEMORY[0x23493D400](&unk_233B59D18, &type metadata for ManagedAppStatus.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256113088);
  }
  return result;
}

unint64_t sub_233B18450()
{
  unint64_t result;

  result = qword_256113090;
  if (!qword_256113090)
  {
    result = MEMORY[0x23493D400](&protocol conformance descriptor for ManagedAppStatus.State, &type metadata for ManagedAppStatus.State);
    atomic_store(result, (unint64_t *)&qword_256113090);
  }
  return result;
}

unint64_t sub_233B18494()
{
  unint64_t result;

  result = qword_256113098;
  if (!qword_256113098)
  {
    result = MEMORY[0x23493D400](&protocol conformance descriptor for ManagedAppStatus.UpdateState, &type metadata for ManagedAppStatus.UpdateState);
    atomic_store(result, (unint64_t *)&qword_256113098);
  }
  return result;
}

unint64_t sub_233B184D8()
{
  unint64_t result;

  result = qword_2561130B0;
  if (!qword_2561130B0)
  {
    result = MEMORY[0x23493D400](&protocol conformance descriptor for ManagedAppStatus.Reason, &type metadata for ManagedAppStatus.Reason);
    atomic_store(result, (unint64_t *)&qword_2561130B0);
  }
  return result;
}

unint64_t sub_233B1851C()
{
  unint64_t result;

  result = qword_2561130B8;
  if (!qword_2561130B8)
  {
    result = MEMORY[0x23493D400](&protocol conformance descriptor for ManagedAppStatus.InstalledVersionInfo, &type metadata for ManagedAppStatus.InstalledVersionInfo);
    atomic_store(result, (unint64_t *)&qword_2561130B8);
  }
  return result;
}

_QWORD *ManagedAppStatus.init(from:)@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  _QWORD v64[6];
  char v65;
  char v66;
  int v67;
  __int16 v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  __int16 v86;
  uint64_t v87;

  v87 = __swift_instantiateConcreteTypeFromMangledName(&qword_2561130C0);
  v5 = *(_QWORD *)(v87 - 8);
  MEMORY[0x24BDAC7A8](v87);
  v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_233B1840C();
  sub_233B58608();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
    return (_QWORD *)sub_233B1764C(0, 0, 0, 0);
  }
  else
  {
    v55 = v5;
    LOBYTE(v64[0]) = 0;
    v8 = sub_233B583B0();
    LOBYTE(v64[0]) = 1;
    v10 = v9;
    swift_bridgeObjectRetain();
    v11 = sub_233B583B0();
    v12 = (uint64_t)a1;
    v54 = v10;
    v51 = v11;
    v52 = v8;
    LOBYTE(v64[0]) = 2;
    v14 = v13;
    swift_bridgeObjectRetain();
    v15 = sub_233B583B0();
    v53 = v14;
    v16 = v15;
    v18 = v17;
    LOBYTE(v56) = 3;
    sub_233B18C50();
    swift_bridgeObjectRetain();
    sub_233B583E0();
    v50 = v18;
    LODWORD(v14) = LOBYTE(v64[0]);
    LOBYTE(v56) = 4;
    sub_233B18C94();
    sub_233B58398();
    LODWORD(v10) = LOBYTE(v64[0]);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2561130A0);
    LOBYTE(v56) = 5;
    sub_233B18CD8(&qword_2561130D8, (uint64_t (*)(void))sub_233B18D40, MEMORY[0x24BEE12D0]);
    sub_233B583E0();
    v47 = v10;
    v48 = v14;
    v19 = v16;
    v20 = v64[0];
    LOBYTE(v64[0]) = 6;
    swift_bridgeObjectRetain();
    v21 = sub_233B583B0();
    v49 = v20;
    v22 = v21;
    v78 = 7;
    v24 = v23;
    sub_233B18D84();
    v46 = v24;
    swift_bridgeObjectRetain();
    sub_233B58398();
    (*(void (**)(char *, uint64_t))(v55 + 8))(v7, v87);
    v25 = v79;
    v44 = v80;
    v26 = v81;
    v87 = v82;
    v27 = v83;
    v45 = v84;
    v55 = v83;
    sub_233B175C4(v79, v80, v81, v82);
    sub_233B1764C(0, 0, 0, 0);
    v42 = v19;
    v43 = v22;
    *(_QWORD *)&v56 = v52;
    *((_QWORD *)&v56 + 1) = v54;
    *(_QWORD *)&v57 = v51;
    *((_QWORD *)&v57 + 1) = v53;
    *(_QWORD *)&v58 = v19;
    *((_QWORD *)&v58 + 1) = v50;
    LOBYTE(v59) = v48;
    BYTE1(v59) = v47;
    *((_QWORD *)&v59 + 1) = v49;
    *(_QWORD *)&v60 = v22;
    *((_QWORD *)&v60 + 1) = v46;
    *(_QWORD *)&v61 = v25;
    v40 = v26;
    v41 = v25;
    v28 = v44;
    *((_QWORD *)&v61 + 1) = v44;
    *(_QWORD *)&v62 = v26;
    v29 = v87;
    *((_QWORD *)&v62 + 1) = v87;
    *(_QWORD *)&v63 = v27;
    *((_QWORD *)&v63 + 1) = v45;
    sub_233B18DC8(&v56);
    sub_233B1764C(v25, v28, v26, v29);
    v30 = v54;
    swift_bridgeObjectRelease();
    v31 = v53;
    swift_bridgeObjectRelease();
    v32 = v50;
    swift_bridgeObjectRelease();
    v33 = v49;
    swift_bridgeObjectRelease();
    v34 = v46;
    swift_bridgeObjectRelease();
    v35 = v61;
    a2[4] = v60;
    a2[5] = v35;
    v36 = v63;
    a2[6] = v62;
    a2[7] = v36;
    v37 = v57;
    *a2 = v56;
    a2[1] = v37;
    v38 = v59;
    a2[2] = v58;
    a2[3] = v38;
    __swift_destroy_boxed_opaque_existential_0(v12);
    v64[0] = v52;
    v64[1] = v30;
    v64[2] = v51;
    v64[3] = v31;
    v64[4] = v42;
    v64[5] = v32;
    v65 = v48;
    v66 = v47;
    v67 = v85;
    v68 = v86;
    v69 = v33;
    v70 = v43;
    v71 = v34;
    v72 = v41;
    v73 = v44;
    v74 = v40;
    v75 = v87;
    v76 = v55;
    v77 = v45;
    return sub_233B18E74(v64);
  }
}

unint64_t sub_233B18C50()
{
  unint64_t result;

  result = qword_2561130C8;
  if (!qword_2561130C8)
  {
    result = MEMORY[0x23493D400](&protocol conformance descriptor for ManagedAppStatus.State, &type metadata for ManagedAppStatus.State);
    atomic_store(result, (unint64_t *)&qword_2561130C8);
  }
  return result;
}

unint64_t sub_233B18C94()
{
  unint64_t result;

  result = qword_2561130D0;
  if (!qword_2561130D0)
  {
    result = MEMORY[0x23493D400](&protocol conformance descriptor for ManagedAppStatus.UpdateState, &type metadata for ManagedAppStatus.UpdateState);
    atomic_store(result, (unint64_t *)&qword_2561130D0);
  }
  return result;
}

uint64_t sub_233B18CD8(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2561130A0);
    v8 = a2();
    result = MEMORY[0x23493D400](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_233B18D40()
{
  unint64_t result;

  result = qword_2561130E0;
  if (!qword_2561130E0)
  {
    result = MEMORY[0x23493D400](&protocol conformance descriptor for ManagedAppStatus.Reason, &type metadata for ManagedAppStatus.Reason);
    atomic_store(result, (unint64_t *)&qword_2561130E0);
  }
  return result;
}

unint64_t sub_233B18D84()
{
  unint64_t result;

  result = qword_2561130E8;
  if (!qword_2561130E8)
  {
    result = MEMORY[0x23493D400](&protocol conformance descriptor for ManagedAppStatus.InstalledVersionInfo, &type metadata for ManagedAppStatus.InstalledVersionInfo);
    atomic_store(result, (unint64_t *)&qword_2561130E8);
  }
  return result;
}

_QWORD *sub_233B18DC8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = a1[10];
  v3 = a1[11];
  v4 = a1[12];
  v5 = a1[13];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_233B175C4(v2, v3, v4, v5);
  return a1;
}

_QWORD *sub_233B18E74(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = a1[10];
  v3 = a1[11];
  v4 = a1[12];
  v5 = a1[13];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_233B1764C(v2, v3, v4, v5);
  return a1;
}

_QWORD *sub_233B18F20@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  return ManagedAppStatus.init(from:)(a1, a2);
}

uint64_t sub_233B18F34(_QWORD *a1)
{
  return ManagedAppStatus.encode(to:)(a1);
}

uint64_t sub_233B18F48()
{
  sub_233B1AA2C();
  return sub_233B58038();
}

uint64_t sub_233B18FA4()
{
  sub_233B1AA2C();
  return sub_233B58020();
}

uint64_t sub_233B18FF0()
{
  sub_233B1A9E8();
  return sub_233B58038();
}

uint64_t sub_233B1904C()
{
  sub_233B1A9E8();
  return sub_233B58020();
}

uint64_t sub_233B19098()
{
  sub_233B1A9A4();
  return sub_233B58038();
}

uint64_t sub_233B190F4()
{
  sub_233B1A9A4();
  return sub_233B58020();
}

uint64_t ManagedAppStatus.InstalledVersionInfo.encode(to:)(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[6];
  char v12;
  char v13;
  char v14;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_2561130F0);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = v1[2];
  v11[3] = v1[3];
  v11[4] = v7;
  v8 = v1[4];
  v11[1] = v1[5];
  v11[2] = v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_233B192AC();
  sub_233B5862C();
  v14 = 0;
  v9 = v11[5];
  sub_233B58440();
  if (!v9)
  {
    v13 = 1;
    sub_233B5844C();
    v12 = 2;
    sub_233B5844C();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_233B192AC()
{
  unint64_t result;

  result = qword_2561130F8;
  if (!qword_2561130F8)
  {
    result = MEMORY[0x23493D400](&unk_233B59CC8, &type metadata for ManagedAppStatus.InstalledVersionInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2561130F8);
  }
  return result;
}

uint64_t ManagedAppStatus.InstalledVersionInfo.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  char v24;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256113100);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_233B192AC();
  sub_233B58608();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  v24 = 0;
  v9 = sub_233B583A4();
  v11 = v10;
  v23 = 1;
  v20 = sub_233B583B0();
  v21 = v12;
  v22 = 2;
  swift_bridgeObjectRetain();
  v13 = sub_233B583B0();
  v15 = v14;
  v16 = *(void (**)(char *, uint64_t))(v6 + 8);
  v17 = v13;
  v16(v8, v5);
  *(_QWORD *)a2 = v9;
  *(_BYTE *)(a2 + 8) = v11 & 1;
  v18 = v21;
  *(_QWORD *)(a2 + 16) = v20;
  *(_QWORD *)(a2 + 24) = v18;
  *(_QWORD *)(a2 + 32) = v17;
  *(_QWORD *)(a2 + 40) = v15;
  swift_bridgeObjectRetain();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

unint64_t sub_233B194D8()
{
  unint64_t result;

  result = qword_256113108;
  if (!qword_256113108)
  {
    result = MEMORY[0x23493D400](&protocol conformance descriptor for ManagedAppStatus.State, &type metadata for ManagedAppStatus.State);
    atomic_store(result, (unint64_t *)&qword_256113108);
  }
  return result;
}

unint64_t sub_233B19520()
{
  unint64_t result;

  result = qword_256113110;
  if (!qword_256113110)
  {
    result = MEMORY[0x23493D400](&protocol conformance descriptor for ManagedAppStatus.Reason, &type metadata for ManagedAppStatus.Reason);
    atomic_store(result, (unint64_t *)&qword_256113110);
  }
  return result;
}

unint64_t sub_233B19568()
{
  unint64_t result;

  result = qword_256113118;
  if (!qword_256113118)
  {
    result = MEMORY[0x23493D400](&protocol conformance descriptor for ManagedAppStatus.UpdateState, &type metadata for ManagedAppStatus.UpdateState);
    atomic_store(result, (unint64_t *)&qword_256113118);
  }
  return result;
}

uint64_t sub_233B195AC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ManagedAppStatus.InstalledVersionInfo.init(from:)(a1, a2);
}

uint64_t sub_233B195C0(_QWORD *a1)
{
  return ManagedAppStatus.InstalledVersionInfo.encode(to:)(a1);
}

uint64_t destroy for ManagedAppStatus(uint64_t a1)
{
  uint64_t result;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = *(_QWORD *)(a1 + 104);
  if (result)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for ManagedAppStatus(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  v7 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v7;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v8 = (_QWORD *)(a1 + 80);
  v9 = a2 + 80;
  v10 = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v10)
  {
    *v8 = *(_QWORD *)v9;
    *(_BYTE *)(a1 + 88) = *(_BYTE *)(v9 + 8);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 104) = v10;
    v11 = *(_QWORD *)(a2 + 112);
    v12 = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 112) = v11;
    *(_QWORD *)(a1 + 120) = v12;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v13 = *(_OWORD *)(v9 + 16);
    *(_OWORD *)v8 = *(_OWORD *)v9;
    *(_OWORD *)(a1 + 96) = v13;
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(v9 + 32);
  }
  return a1;
}

uint64_t assignWithCopy for ManagedAppStatus(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_BYTE *)(a1 + 49) = *(_BYTE *)(a2 + 49);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = (_QWORD *)(a1 + 80);
  v5 = (uint64_t *)(a2 + 80);
  v6 = *(_QWORD *)(a2 + 104);
  if (*(_QWORD *)(a1 + 104))
  {
    if (v6)
    {
      v7 = *v5;
      *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
      *v4 = v7;
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
      *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_233B198D4(a1 + 80);
      v10 = *(_OWORD *)(a2 + 96);
      v9 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)v4 = *(_OWORD *)v5;
      *(_OWORD *)(a1 + 96) = v10;
      *(_OWORD *)(a1 + 112) = v9;
    }
  }
  else if (v6)
  {
    v8 = *v5;
    *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
    *v4 = v8;
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v11 = *(_OWORD *)v5;
    v12 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v12;
    *(_OWORD *)v4 = v11;
  }
  return a1;
}

uint64_t sub_233B198D4(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy128_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  result = (__n128)a2[4];
  v6 = a2[5];
  v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 64) = result;
  *(_OWORD *)(a1 + 80) = v6;
  return result;
}

uint64_t assignWithTake for ManagedAppStatus(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v7;
  swift_bridgeObjectRelease();
  v8 = (_OWORD *)(a1 + 80);
  v9 = (_OWORD *)(a2 + 80);
  if (!*(_QWORD *)(a1 + 104))
    goto LABEL_5;
  v10 = *(_QWORD *)(a2 + 104);
  if (!v10)
  {
    sub_233B198D4(a1 + 80);
LABEL_5:
    v12 = *(_OWORD *)(a2 + 96);
    *v8 = *v9;
    *(_OWORD *)(a1 + 96) = v12;
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    return a1;
  }
  *(_QWORD *)v8 = *(_QWORD *)v9;
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v10;
  swift_bridgeObjectRelease();
  v11 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v11;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ManagedAppStatus(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 128))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ManagedAppStatus(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 120) = 0;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 128) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 128) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ManagedAppStatus()
{
  return &type metadata for ManagedAppStatus;
}

uint64_t destroy for ManagedAppStatus.InstalledVersionInfo()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ManagedAppStatus.InstalledVersionInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ManagedAppStatus.InstalledVersionInfo(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_QWORD *)(a1 + 24) = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = a2[4];
  *(_QWORD *)(a1 + 40) = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for ManagedAppStatus.InstalledVersionInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ManagedAppStatus.InstalledVersionInfo(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ManagedAppStatus.InstalledVersionInfo(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ManagedAppStatus.InstalledVersionInfo()
{
  return &type metadata for ManagedAppStatus.InstalledVersionInfo;
}

uint64_t getEnumTagSinglePayload for ManagedAppStatus.State(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF7)
    goto LABEL_17;
  if (a2 + 9 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 9) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 9;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 9;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 9;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xA;
  v8 = v6 - 10;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ManagedAppStatus.State(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 9 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 9) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF6)
    return ((uint64_t (*)(void))((char *)&loc_233B19D9C + 4 * byte_233B596C2[v4]))();
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_233B19DD0 + 4 * byte_233B596BD[v4]))();
}

uint64_t sub_233B19DD0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_233B19DD8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x233B19DE0);
  return result;
}

uint64_t sub_233B19DEC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x233B19DF4);
  *(_BYTE *)result = a2 + 9;
  return result;
}

uint64_t sub_233B19DF8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_233B19E00(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ManagedAppStatus.State()
{
  return &type metadata for ManagedAppStatus.State;
}

uint64_t getEnumTagSinglePayload for ManagedAppStatus.Reason(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF5)
    goto LABEL_17;
  if (a2 + 11 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 11) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 11;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 11;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 11;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xC;
  v8 = v6 - 12;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ManagedAppStatus.Reason(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 11 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 11) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF5)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF4)
    return ((uint64_t (*)(void))((char *)&loc_233B19EF8 + 4 * byte_233B596CC[v4]))();
  *a1 = a2 + 11;
  return ((uint64_t (*)(void))((char *)sub_233B19F2C + 4 * byte_233B596C7[v4]))();
}

uint64_t sub_233B19F2C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_233B19F34(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x233B19F3CLL);
  return result;
}

uint64_t sub_233B19F48(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x233B19F50);
  *(_BYTE *)result = a2 + 11;
  return result;
}

uint64_t sub_233B19F54(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_233B19F5C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ManagedAppStatus.Reason()
{
  return &type metadata for ManagedAppStatus.Reason;
}

uint64_t getEnumTagSinglePayload for ManagedAppStatus.UpdateState(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFC)
    goto LABEL_17;
  if (a2 + 4 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 4) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 4;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 4;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 4;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 5;
  v8 = v6 - 5;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ManagedAppStatus.UpdateState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_233B1A054 + 4 * byte_233B596D6[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_233B1A088 + 4 * byte_233B596D1[v4]))();
}

uint64_t sub_233B1A088(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_233B1A090(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x233B1A098);
  return result;
}

uint64_t sub_233B1A0A4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x233B1A0ACLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_233B1A0B0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_233B1A0B8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ManagedAppStatus.UpdateState()
{
  return &type metadata for ManagedAppStatus.UpdateState;
}

uint64_t storeEnumTagSinglePayload for ManagedAppStatus.InstalledVersionInfo.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_233B1A120 + 4 * byte_233B596E0[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_233B1A154 + 4 * byte_233B596DB[v4]))();
}

uint64_t sub_233B1A154(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_233B1A15C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x233B1A164);
  return result;
}

uint64_t sub_233B1A170(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x233B1A178);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_233B1A17C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_233B1A184(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ManagedAppStatus.InstalledVersionInfo.CodingKeys()
{
  return &type metadata for ManagedAppStatus.InstalledVersionInfo.CodingKeys;
}

uint64_t getEnumTagSinglePayload for ManagedAppStatus.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF9)
    goto LABEL_17;
  if (a2 + 7 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 7) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 7;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 7;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 7;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 8;
  v8 = v6 - 8;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ManagedAppStatus.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_233B1A27C + 4 * byte_233B596EA[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_233B1A2B0 + 4 * byte_233B596E5[v4]))();
}

uint64_t sub_233B1A2B0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_233B1A2B8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x233B1A2C0);
  return result;
}

uint64_t sub_233B1A2CC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x233B1A2D4);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_233B1A2D8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_233B1A2E0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ManagedAppStatus.CodingKeys()
{
  return &type metadata for ManagedAppStatus.CodingKeys;
}

unint64_t sub_233B1A300()
{
  unint64_t result;

  result = qword_256113120;
  if (!qword_256113120)
  {
    result = MEMORY[0x23493D400](&unk_233B59BE8, &type metadata for ManagedAppStatus.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256113120);
  }
  return result;
}

unint64_t sub_233B1A348()
{
  unint64_t result;

  result = qword_256113128;
  if (!qword_256113128)
  {
    result = MEMORY[0x23493D400](&unk_233B59CA0, &type metadata for ManagedAppStatus.InstalledVersionInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256113128);
  }
  return result;
}

unint64_t sub_233B1A390()
{
  unint64_t result;

  result = qword_256113130;
  if (!qword_256113130)
  {
    result = MEMORY[0x23493D400](&unk_233B59C10, &type metadata for ManagedAppStatus.InstalledVersionInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256113130);
  }
  return result;
}

unint64_t sub_233B1A3D8()
{
  unint64_t result;

  result = qword_256113138;
  if (!qword_256113138)
  {
    result = MEMORY[0x23493D400](&unk_233B59C38, &type metadata for ManagedAppStatus.InstalledVersionInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256113138);
  }
  return result;
}

unint64_t sub_233B1A420()
{
  unint64_t result;

  result = qword_256113140;
  if (!qword_256113140)
  {
    result = MEMORY[0x23493D400](&unk_233B59B58, &type metadata for ManagedAppStatus.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256113140);
  }
  return result;
}

unint64_t sub_233B1A468()
{
  unint64_t result;

  result = qword_256113148;
  if (!qword_256113148)
  {
    result = MEMORY[0x23493D400](&unk_233B59B80, &type metadata for ManagedAppStatus.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256113148);
  }
  return result;
}

uint64_t sub_233B1A4AC(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x726556656C707061 && a2 == 0xEE0044496E6F6973;
  if (v2 || (sub_233B584D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6556656C646E7562 && a2 == 0xED00006E6F697372 || (sub_233B584D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x8000000233B615D0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_233B584D0();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_233B1A644(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x4449656C646E7562 && a2 == 0xE800000000000000;
  if (v2 || (sub_233B584D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x8000000233B611C0 || (sub_233B584D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x746172616C636564 && a2 == 0xEE0079654B6E6F69 || (sub_233B584D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6574617473 && a2 == 0xE500000000000000 || (sub_233B584D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x7453657461647075 && a2 == 0xEB00000000657461 || (sub_233B584D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x736E6F73616572 && a2 == 0xE700000000000000 || (sub_233B584D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 1701667182 && a2 == 0xE400000000000000 || (sub_233B584D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x8000000233B615B0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else
  {
    v6 = sub_233B584D0();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 7;
    else
      return 8;
  }
}

unint64_t sub_233B1A9A4()
{
  unint64_t result;

  result = qword_256113150;
  if (!qword_256113150)
  {
    result = MEMORY[0x23493D400](&protocol conformance descriptor for ManagedAppStatus.UpdateState, &type metadata for ManagedAppStatus.UpdateState);
    atomic_store(result, (unint64_t *)&qword_256113150);
  }
  return result;
}

unint64_t sub_233B1A9E8()
{
  unint64_t result;

  result = qword_256113158;
  if (!qword_256113158)
  {
    result = MEMORY[0x23493D400](&protocol conformance descriptor for ManagedAppStatus.Reason, &type metadata for ManagedAppStatus.Reason);
    atomic_store(result, (unint64_t *)&qword_256113158);
  }
  return result;
}

unint64_t sub_233B1AA2C()
{
  unint64_t result;

  result = qword_256113160;
  if (!qword_256113160)
  {
    result = MEMORY[0x23493D400](&protocol conformance descriptor for ManagedAppStatus.State, &type metadata for ManagedAppStatus.State);
    atomic_store(result, (unint64_t *)&qword_256113160);
  }
  return result;
}

uint64_t AppState.Availability.hash(into:)()
{
  return sub_233B5859C();
}

uint64_t sub_233B1AA9C()
{
  return 0;
}

void sub_233B1AAA8(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_233B1AAB4()
{
  sub_233B1CBD8();
  return sub_233B58638();
}

uint64_t sub_233B1AADC()
{
  sub_233B1CBD8();
  return sub_233B58644();
}

uint64_t sub_233B1AB04()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x6F6C6E776F646572;
  if (*v0 != 1)
    v1 = 0x657461647075;
  if (*v0)
    return v1;
  else
    return 0x6C62616C69617661;
}

uint64_t sub_233B1AB64@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_233B1DECC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_233B1AB88()
{
  sub_233B1CB0C();
  return sub_233B58638();
}

uint64_t sub_233B1ABB0()
{
  sub_233B1CB0C();
  return sub_233B58644();
}

uint64_t sub_233B1ABD8()
{
  sub_233B1CB94();
  return sub_233B58638();
}

uint64_t sub_233B1AC00()
{
  sub_233B1CB94();
  return sub_233B58644();
}

uint64_t sub_233B1AC28()
{
  sub_233B1CB50();
  return sub_233B58638();
}

uint64_t sub_233B1AC50()
{
  sub_233B1CB50();
  return sub_233B58644();
}

uint64_t AppState.Availability.hashValue.getter()
{
  sub_233B58590();
  sub_233B5859C();
  return sub_233B585C0();
}

BOOL AppState.isComplete.getter()
{
  _QWORD *v0;

  return (*v0 & 0xFFFFFFFFFFFFFFF7) == 0x8000000000000000;
}

void AppState.description.getter()
{
  __asm { BR              X11 }
}

uint64_t sub_233B1AD0C@<X0>(uint64_t a1@<X8>)
{
  int v1;

  v1 = *(unsigned __int8 *)(a1 + 16);
  if (!v1)
    return 0x6C62616C69617641;
  if (v1 == 1)
    return 0x6F6C6E776F646552;
  return 0x657461647055;
}

unint64_t sub_233B1AF64(unint64_t result)
{
  switch(result >> 61)
  {
    case 0uLL:
    case 1uLL:
    case 2uLL:
    case 3uLL:
      result = swift_release();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_233B1AF94()
{
  return 1;
}

uint64_t sub_233B1AFA4()
{
  return 12383;
}

uint64_t sub_233B1AFB4()
{
  sub_233B1BE60();
  return sub_233B58638();
}

uint64_t sub_233B1AFDC()
{
  sub_233B1BE60();
  return sub_233B58644();
}

uint64_t sub_233B1B004()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_233B1B03C + 4 * byte_233B59D7D[*v0]))(0x6C62616C69617661, 0xE900000000000065);
}

uint64_t sub_233B1B03C()
{
  return 0x64616F6C6E776F64;
}

uint64_t sub_233B1B05C()
{
  return 0x696C6C6174736E69;
}

uint64_t sub_233B1B078()
{
  return 0x646573756170;
}

uint64_t sub_233B1B08C()
{
  return 0x656C6C6174736E69;
}

uint64_t sub_233B1B0A8()
{
  return 0x646567616E616DLL;
}

uint64_t sub_233B1B0C0()
{
  return 0x676E6974696177;
}

uint64_t sub_233B1B0D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_233B1E030(a1, a2);
  *a3 = result;
  return result;
}

void sub_233B1B0FC(_BYTE *a1@<X8>)
{
  *a1 = 7;
}

uint64_t sub_233B1B108()
{
  sub_233B1BC40();
  return sub_233B58638();
}

uint64_t sub_233B1B130()
{
  sub_233B1BC40();
  return sub_233B58644();
}

uint64_t sub_233B1B158()
{
  sub_233B1BE1C();
  return sub_233B58638();
}

uint64_t sub_233B1B180()
{
  sub_233B1BE1C();
  return sub_233B58644();
}

uint64_t sub_233B1B1A8()
{
  sub_233B1BD0C();
  return sub_233B58638();
}

uint64_t sub_233B1B1D0()
{
  sub_233B1BD0C();
  return sub_233B58644();
}

uint64_t sub_233B1B1F8()
{
  sub_233B1BDD8();
  return sub_233B58638();
}

uint64_t sub_233B1B220()
{
  sub_233B1BDD8();
  return sub_233B58644();
}

uint64_t sub_233B1B248@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *a1 = 1;
  return result;
}

uint64_t sub_233B1B274()
{
  sub_233B1BCC8();
  return sub_233B58638();
}

uint64_t sub_233B1B29C()
{
  sub_233B1BCC8();
  return sub_233B58644();
}

uint64_t sub_233B1B2C4()
{
  sub_233B58590();
  sub_233B5859C();
  return sub_233B585C0();
}

uint64_t sub_233B1B304()
{
  return sub_233B5859C();
}

uint64_t sub_233B1B328()
{
  sub_233B58590();
  sub_233B5859C();
  return sub_233B585C0();
}

uint64_t sub_233B1B364@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 12383 && a2 == 0xE200000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_233B584D0();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_233B1B3E0()
{
  sub_233B1BD50();
  return sub_233B58638();
}

uint64_t sub_233B1B408()
{
  sub_233B1BD50();
  return sub_233B58644();
}

uint64_t sub_233B1B430()
{
  sub_233B1BC84();
  return sub_233B58638();
}

uint64_t sub_233B1B458()
{
  sub_233B1BC84();
  return sub_233B58644();
}

void static AppState.== infix(_:_:)(uint64_t a1)
{
  __asm { BR              X10 }
}

BOOL sub_233B1B4C0()
{
  unint64_t v0;
  unint64_t v1;
  int v2;
  int v3;

  if (v0 >> 61)
  {
    sub_233B0487C(v0);
    sub_233B0487C(v1);
    sub_233B1AF64(v1);
    sub_233B1AF64(v0);
    return 0;
  }
  else
  {
    v2 = *(unsigned __int8 *)(v1 + 16);
    v3 = *(unsigned __int8 *)(v0 + 16);
    sub_233B0487C(v0);
    sub_233B0487C(v1);
    sub_233B1AF64(v1);
    sub_233B1AF64(v0);
    return v2 == v3;
  }
}

BOOL static AppState.Availability.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void AppState.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  _QWORD v17[2];
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256113168);
  v23 = *(_QWORD *)(v3 - 8);
  v24 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v22 = (char *)v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256113170);
  v20 = *(_QWORD *)(v5 - 8);
  v21 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v19 = (char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_256113178);
  v17[1] = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v17[0] = (char *)v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256113180);
  v32 = *(_QWORD *)(v8 - 8);
  v33 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v31 = (char *)v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_256113188);
  v29 = *(_QWORD *)(v10 - 8);
  v30 = v10;
  MEMORY[0x24BDAC7A8](v10);
  v28 = (char *)v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_256113190);
  v26 = *(_QWORD *)(v12 - 8);
  v27 = v12;
  MEMORY[0x24BDAC7A8](v12);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_256113198);
  v25 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v36 = __swift_instantiateConcreteTypeFromMangledName(&qword_2561131A0);
  v34 = *(_QWORD *)(v36 - 8);
  MEMORY[0x24BDAC7A8](v36);
  v15 = (char *)v17 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_233B1BC40();
  v35 = v15;
  sub_233B5862C();
  __asm { BR              X10 }
}

uint64_t sub_233B1B8F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_BYTE *)(v2 + 16);
  *(_BYTE *)(v3 - 96) = 0;
  sub_233B1BE60();
  v5 = *(_QWORD *)(v3 - 120);
  v6 = *(_QWORD *)(v3 - 112);
  sub_233B58410();
  *(_BYTE *)(v3 - 96) = v4;
  sub_233B1BEA4();
  sub_233B5847C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 200) + 8))(v0, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 128) + 8))(v5, v6);
}

unint64_t sub_233B1BC40()
{
  unint64_t result;

  result = qword_2561131A8;
  if (!qword_2561131A8)
  {
    result = MEMORY[0x23493D400](&unk_233B5AA34, &type metadata for AppState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2561131A8);
  }
  return result;
}

unint64_t sub_233B1BC84()
{
  unint64_t result;

  result = qword_2561131B0;
  if (!qword_2561131B0)
  {
    result = MEMORY[0x23493D400](&unk_233B5A9E4, &type metadata for AppState.WaitingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2561131B0);
  }
  return result;
}

unint64_t sub_233B1BCC8()
{
  unint64_t result;

  result = qword_2561131B8;
  if (!qword_2561131B8)
  {
    result = MEMORY[0x23493D400](&unk_233B5A994, &type metadata for AppState.ManagedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2561131B8);
  }
  return result;
}

unint64_t sub_233B1BD0C()
{
  unint64_t result;

  result = qword_2561131C0;
  if (!qword_2561131C0)
  {
    result = MEMORY[0x23493D400](&unk_233B5A944, &type metadata for AppState.InstalledCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2561131C0);
  }
  return result;
}

unint64_t sub_233B1BD50()
{
  unint64_t result;

  result = qword_2561131C8;
  if (!qword_2561131C8)
  {
    result = MEMORY[0x23493D400](&unk_233B5A8F4, &type metadata for AppState.PausedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2561131C8);
  }
  return result;
}

unint64_t sub_233B1BD94()
{
  unint64_t result;

  result = qword_2561131D0;
  if (!qword_2561131D0)
  {
    result = MEMORY[0x23493D400](&protocol conformance descriptor for AppState, &type metadata for AppState);
    atomic_store(result, (unint64_t *)&qword_2561131D0);
  }
  return result;
}

unint64_t sub_233B1BDD8()
{
  unint64_t result;

  result = qword_2561131D8;
  if (!qword_2561131D8)
  {
    result = MEMORY[0x23493D400](&unk_233B5A8A4, &type metadata for AppState.InstallingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2561131D8);
  }
  return result;
}

unint64_t sub_233B1BE1C()
{
  unint64_t result;

  result = qword_2561131E0;
  if (!qword_2561131E0)
  {
    result = MEMORY[0x23493D400](&unk_233B5A854, &type metadata for AppState.DownloadingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2561131E0);
  }
  return result;
}

unint64_t sub_233B1BE60()
{
  unint64_t result;

  result = qword_2561131E8;
  if (!qword_2561131E8)
  {
    result = MEMORY[0x23493D400](&unk_233B5A804, &type metadata for AppState.AvailableCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2561131E8);
  }
  return result;
}

unint64_t sub_233B1BEA4()
{
  unint64_t result;

  result = qword_2561131F0;
  if (!qword_2561131F0)
  {
    result = MEMORY[0x23493D400](&protocol conformance descriptor for AppState.Availability, &type metadata for AppState.Availability);
    atomic_store(result, (unint64_t *)&qword_2561131F0);
  }
  return result;
}

uint64_t AppState.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD v28[4];
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;

  v42 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_2561131F8);
  v45 = *(_QWORD *)(v3 - 8);
  v46 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v44 = (char *)v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256113200);
  v34 = *(_QWORD *)(v5 - 8);
  v35 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v43 = (char *)v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_256113208);
  v31 = *(_QWORD *)(v33 - 8);
  MEMORY[0x24BDAC7A8](v33);
  v40 = (char *)v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256113210);
  v36 = *(_QWORD *)(v8 - 8);
  v37 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v41 = (char *)v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = __swift_instantiateConcreteTypeFromMangledName(&qword_256113218);
  v30 = *(_QWORD *)(v32 - 8);
  MEMORY[0x24BDAC7A8](v32);
  v39 = (char *)v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_256113220);
  v28[3] = *(_QWORD *)(v29 - 8);
  MEMORY[0x24BDAC7A8](v29);
  v38 = (char *)v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_256113228);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_256113230);
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)v28 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = a1[3];
  v47 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v20);
  sub_233B1BC40();
  v21 = v48;
  sub_233B58608();
  if (!v21)
  {
    v28[2] = v15;
    v28[0] = v13;
    v28[1] = v12;
    v48 = v17;
    v22 = sub_233B583F8();
    if (*(_QWORD *)(v22 + 16) == 1)
      __asm { BR              X10 }
    v23 = v16;
    v24 = sub_233B582D8();
    swift_allocError();
    v26 = v25;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256113238);
    *v26 = &type metadata for AppState;
    sub_233B58374();
    sub_233B582CC();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v24 - 8) + 104))(v26, *MEMORY[0x24BEE26D0], v24);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v48 + 8))(v19, v23);
  }
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)v47);
}

uint64_t sub_233B1C7B0()
{
  uint64_t v0;

  sub_233B1AF64(*(_QWORD *)(v0 + 16));
  return swift_deallocObject();
}

unint64_t sub_233B1C7D4()
{
  unint64_t result;

  result = qword_256113240;
  if (!qword_256113240)
  {
    result = MEMORY[0x23493D400](&protocol conformance descriptor for AppState, &type metadata for AppState);
    atomic_store(result, (unint64_t *)&qword_256113240);
  }
  return result;
}

uint64_t sub_233B1C818()
{
  return swift_deallocObject();
}

uint64_t sub_233B1C828()
{
  return swift_deallocObject();
}

unint64_t sub_233B1C838()
{
  unint64_t result;

  result = qword_256113248;
  if (!qword_256113248)
  {
    result = MEMORY[0x23493D400](&protocol conformance descriptor for AppState.Availability, &type metadata for AppState.Availability);
    atomic_store(result, (unint64_t *)&qword_256113248);
  }
  return result;
}

uint64_t sub_233B1C87C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return AppState.init(from:)(a1, a2);
}

void sub_233B1C890(_QWORD *a1)
{
  AppState.encode(to:)(a1);
}

uint64_t AppState.Availability.encode(to:)(_QWORD *a1)
{
  unsigned __int8 *v1;
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int v15;
  char *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  char v27;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256113250);
  v22 = *(_QWORD *)(v4 - 8);
  v23 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v21 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256113258);
  v19 = *(_QWORD *)(v6 - 8);
  v20 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_256113260);
  v9 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_256113268);
  v24 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *v2;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_233B1CB0C();
  sub_233B5862C();
  if (v15)
  {
    if (v15 == 1)
    {
      v26 = 1;
      sub_233B1CB94();
      sub_233B58410();
      (*(void (**)(char *, uint64_t))(v19 + 8))(v8, v20);
    }
    else
    {
      v27 = 2;
      sub_233B1CB50();
      v16 = v21;
      sub_233B58410();
      (*(void (**)(char *, uint64_t))(v22 + 8))(v16, v23);
    }
  }
  else
  {
    v25 = 0;
    sub_233B1CBD8();
    sub_233B58410();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v18);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v14, v12);
}

unint64_t sub_233B1CB0C()
{
  unint64_t result;

  result = qword_256113270;
  if (!qword_256113270)
  {
    result = MEMORY[0x23493D400](&unk_233B5A7B4, &type metadata for AppState.Availability.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256113270);
  }
  return result;
}

unint64_t sub_233B1CB50()
{
  unint64_t result;

  result = qword_256113278;
  if (!qword_256113278)
  {
    result = MEMORY[0x23493D400](&unk_233B5A764, &type metadata for AppState.Availability.UpdateCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256113278);
  }
  return result;
}

unint64_t sub_233B1CB94()
{
  unint64_t result;

  result = qword_256113280;
  if (!qword_256113280)
  {
    result = MEMORY[0x23493D400](&unk_233B5A714, &type metadata for AppState.Availability.RedownloadCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256113280);
  }
  return result;
}

unint64_t sub_233B1CBD8()
{
  unint64_t result;

  result = qword_256113288;
  if (!qword_256113288)
  {
    result = MEMORY[0x23493D400](&unk_233B5A6C4, &type metadata for AppState.Availability.AvailableCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256113288);
  }
  return result;
}

uint64_t AppState.Availability.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  char *v39;
  char *v40;
  _QWORD *v41;
  char v42;
  char v43;
  char v44;

  v38 = a2;
  v37 = __swift_instantiateConcreteTypeFromMangledName(&qword_256113290);
  v34 = *(_QWORD *)(v37 - 8);
  MEMORY[0x24BDAC7A8](v37);
  v40 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256113298);
  v35 = *(_QWORD *)(v4 - 8);
  v36 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v39 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_2561132A0);
  v6 = *(_QWORD *)(v33 - 8);
  MEMORY[0x24BDAC7A8](v33);
  v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_2561132A8);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_233B1CB0C();
  v13 = v41;
  sub_233B58608();
  if (v13)
    goto LABEL_7;
  v31 = v6;
  v32 = v10;
  v14 = v39;
  v15 = v40;
  v41 = a1;
  v16 = v12;
  v17 = sub_233B583F8();
  v18 = v9;
  if (*(_QWORD *)(v17 + 16) != 1)
  {
    v23 = sub_233B582D8();
    swift_allocError();
    v25 = v24;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256113238);
    *v25 = &type metadata for AppState.Availability;
    sub_233B58374();
    sub_233B582CC();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v23 - 8) + 104))(v25, *MEMORY[0x24BEE26D0], v23);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v32 + 8))(v16, v9);
    a1 = v41;
LABEL_7:
    v26 = (uint64_t)a1;
    return __swift_destroy_boxed_opaque_existential_0(v26);
  }
  v19 = *(unsigned __int8 *)(v17 + 32);
  if (*(_BYTE *)(v17 + 32))
  {
    if (v19 == 1)
    {
      v43 = 1;
      sub_233B1CB94();
      v20 = v9;
      sub_233B58368();
      v21 = v38;
      v22 = v32;
      (*(void (**)(char *, uint64_t))(v35 + 8))(v14, v36);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v22 + 8))(v16, v20);
    }
    else
    {
      v44 = 2;
      sub_233B1CB50();
      v28 = v15;
      sub_233B58368();
      v21 = v38;
      v29 = v32;
      (*(void (**)(char *, uint64_t))(v34 + 8))(v28, v37);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v29 + 8))(v16, v18);
    }
  }
  else
  {
    v42 = 0;
    sub_233B1CBD8();
    sub_233B58368();
    (*(void (**)(char *, uint64_t))(v31 + 8))(v8, v33);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v32 + 8))(v16, v9);
    v21 = v38;
  }
  *v21 = v19;
  v26 = (uint64_t)v41;
  return __swift_destroy_boxed_opaque_existential_0(v26);
}

unint64_t sub_233B1D064()
{
  unint64_t result;

  result = qword_2561132B0;
  if (!qword_2561132B0)
  {
    result = MEMORY[0x23493D400](&protocol conformance descriptor for AppState.Availability, &type metadata for AppState.Availability);
    atomic_store(result, (unint64_t *)&qword_2561132B0);
  }
  return result;
}

uint64_t sub_233B1D0A8@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return AppState.Availability.init(from:)(a1, a2);
}

uint64_t sub_233B1D0BC(_QWORD *a1)
{
  return AppState.Availability.encode(to:)(a1);
}

unint64_t *initializeBufferWithCopyOfBuffer for AppState(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;

  v3 = *a2;
  sub_233B0487C(*a2);
  *a1 = v3;
  return a1;
}

unint64_t destroy for AppState(unint64_t *a1)
{
  return sub_233B1AF64(*a1);
}

unint64_t *assignWithCopy for AppState(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;

  v3 = *a2;
  sub_233B0487C(*a2);
  v4 = *a1;
  *a1 = v3;
  sub_233B1AF64(v4);
  return a1;
}

_QWORD *__swift_memcpy8_8(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

unint64_t *assignWithTake for AppState(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;

  v3 = *a1;
  *a1 = *a2;
  sub_233B1AF64(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for AppState(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7C && *(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 124);
  v3 = (((*(_QWORD *)a1 >> 57) >> 4) | (8 * ((*(_QWORD *)a1 >> 57) & 8 | *(_QWORD *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x7B)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for AppState(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3;

  if (a2 > 0x7B)
  {
    *(_QWORD *)result = a2 - 124;
    if (a3 >= 0x7C)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7C)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
    {
      v3 = (-a2 >> 3) & 0xF | (16 * (-a2 & 0x7F));
      *(_QWORD *)result = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t sub_233B1D228(_QWORD *a1)
{
  uint64_t v1;

  v1 = *a1 >> 61;
  if (v1 <= 3)
    return v1;
  else
    return (*a1 >> 3) + 4;
}

_QWORD *sub_233B1D244(_QWORD *result)
{
  *result &= 0x1FFFFFFFFFFFFFFFuLL;
  return result;
}

unint64_t *sub_233B1D254(unint64_t *result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;

  if (a2 < 4)
  {
    v2 = *result & 0xFFFFFFFFFFFFFF8;
    v3 = a2 << 61;
  }
  else
  {
    v2 = 8 * (a2 - 4);
    v3 = 0x8000000000000000;
  }
  *result = v2 | v3;
  return result;
}

ValueMetadata *type metadata accessor for AppState()
{
  return &type metadata for AppState;
}

ValueMetadata *type metadata accessor for AppState.Availability()
{
  return &type metadata for AppState.Availability;
}

uint64_t _s22ManagedAppDistribution8AppStateO12AvailabilityOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_233B1D2F4 + 4 * byte_233B59DA1[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_233B1D328 + 4 * byte_233B59D9C[v4]))();
}

uint64_t sub_233B1D328(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_233B1D330(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x233B1D338);
  return result;
}

uint64_t sub_233B1D344(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x233B1D34CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_233B1D350(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_233B1D358(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AppState.Availability.CodingKeys()
{
  return &type metadata for AppState.Availability.CodingKeys;
}

ValueMetadata *type metadata accessor for AppState.Availability.AvailableCodingKeys()
{
  return &type metadata for AppState.Availability.AvailableCodingKeys;
}

ValueMetadata *type metadata accessor for AppState.Availability.RedownloadCodingKeys()
{
  return &type metadata for AppState.Availability.RedownloadCodingKeys;
}

ValueMetadata *type metadata accessor for AppState.Availability.UpdateCodingKeys()
{
  return &type metadata for AppState.Availability.UpdateCodingKeys;
}

uint64_t getEnumTagSinglePayload for AppState.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFA)
    goto LABEL_17;
  if (a2 + 6 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 6) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 6;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 6;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 6;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 7;
  v8 = v6 - 7;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for AppState.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_233B1D480 + 4 * byte_233B59DAB[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_233B1D4B4 + 4 * byte_233B59DA6[v4]))();
}

uint64_t sub_233B1D4B4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_233B1D4BC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x233B1D4C4);
  return result;
}

uint64_t sub_233B1D4D0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x233B1D4D8);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_233B1D4DC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_233B1D4E4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AppState.CodingKeys()
{
  return &type metadata for AppState.CodingKeys;
}

uint64_t sub_233B1D508()
{
  return 0;
}

ValueMetadata *type metadata accessor for AppState.AvailableCodingKeys()
{
  return &type metadata for AppState.AvailableCodingKeys;
}

ValueMetadata *type metadata accessor for AppState.DownloadingCodingKeys()
{
  return &type metadata for AppState.DownloadingCodingKeys;
}

ValueMetadata *type metadata accessor for AppState.InstallingCodingKeys()
{
  return &type metadata for AppState.InstallingCodingKeys;
}

uint64_t getEnumTagSinglePayload for ManagedAppCancelRequest.CodingKeys(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t _s22ManagedAppDistribution8AppStateO19AvailableCodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_233B1D5D0 + 4 * byte_233B59DB0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_233B1D5F0 + 4 * byte_233B59DB5[v4]))();
}

_BYTE *sub_233B1D5D0(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_233B1D5F0(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_233B1D5F8(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_233B1D600(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_233B1D608(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_233B1D610(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for AppState.PausedCodingKeys()
{
  return &type metadata for AppState.PausedCodingKeys;
}

ValueMetadata *type metadata accessor for AppState.InstalledCodingKeys()
{
  return &type metadata for AppState.InstalledCodingKeys;
}

ValueMetadata *type metadata accessor for AppState.ManagedCodingKeys()
{
  return &type metadata for AppState.ManagedCodingKeys;
}

ValueMetadata *type metadata accessor for AppState.WaitingCodingKeys()
{
  return &type metadata for AppState.WaitingCodingKeys;
}

unint64_t sub_233B1D660()
{
  unint64_t result;

  result = qword_2561132B8;
  if (!qword_2561132B8)
  {
    result = MEMORY[0x23493D400](&unk_233B5A214, &type metadata for AppState.PausedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2561132B8);
  }
  return result;
}

unint64_t sub_233B1D6A8()
{
  unint64_t result;

  result = qword_2561132C0;
  if (!qword_2561132C0)
  {
    result = MEMORY[0x23493D400](&unk_233B5A2CC, &type metadata for AppState.InstallingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2561132C0);
  }
  return result;
}

unint64_t sub_233B1D6F0()
{
  unint64_t result;

  result = qword_2561132C8;
  if (!qword_2561132C8)
  {
    result = MEMORY[0x23493D400](&unk_233B5A384, &type metadata for AppState.DownloadingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2561132C8);
  }
  return result;
}

unint64_t sub_233B1D738()
{
  unint64_t result;

  result = qword_2561132D0;
  if (!qword_2561132D0)
  {
    result = MEMORY[0x23493D400](&unk_233B5A43C, &type metadata for AppState.AvailableCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2561132D0);
  }
  return result;
}

unint64_t sub_233B1D780()
{
  unint64_t result;

  result = qword_2561132D8;
  if (!qword_2561132D8)
  {
    result = MEMORY[0x23493D400](&unk_233B5A4F4, &type metadata for AppState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2561132D8);
  }
  return result;
}

unint64_t sub_233B1D7C8()
{
  unint64_t result;

  result = qword_2561132E0;
  if (!qword_2561132E0)
  {
    result = MEMORY[0x23493D400](&unk_233B5A69C, &type metadata for AppState.Availability.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2561132E0);
  }
  return result;
}

unint64_t sub_233B1D810()
{
  unint64_t result;

  result = qword_2561132E8;
  if (!qword_2561132E8)
  {
    result = MEMORY[0x23493D400](&unk_233B5A5BC, &type metadata for AppState.Availability.AvailableCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2561132E8);
  }
  return result;
}

unint64_t sub_233B1D858()
{
  unint64_t result;

  result = qword_2561132F0;
  if (!qword_2561132F0)
  {
    result = MEMORY[0x23493D400](&unk_233B5A5E4, &type metadata for AppState.Availability.AvailableCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2561132F0);
  }
  return result;
}

unint64_t sub_233B1D8A0()
{
  unint64_t result;

  result = qword_2561132F8;
  if (!qword_2561132F8)
  {
    result = MEMORY[0x23493D400](&unk_233B5A56C, &type metadata for AppState.Availability.RedownloadCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2561132F8);
  }
  return result;
}

unint64_t sub_233B1D8E8()
{
  unint64_t result;

  result = qword_256113300;
  if (!qword_256113300)
  {
    result = MEMORY[0x23493D400](&unk_233B5A594, &type metadata for AppState.Availability.RedownloadCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256113300);
  }
  return result;
}

unint64_t sub_233B1D930()
{
  unint64_t result;

  result = qword_256113308;
  if (!qword_256113308)
  {
    result = MEMORY[0x23493D400](&unk_233B5A51C, &type metadata for AppState.Availability.UpdateCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256113308);
  }
  return result;
}

unint64_t sub_233B1D978()
{
  unint64_t result;

  result = qword_256113310;
  if (!qword_256113310)
  {
    result = MEMORY[0x23493D400](&unk_233B5A544, &type metadata for AppState.Availability.UpdateCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256113310);
  }
  return result;
}

unint64_t sub_233B1D9C0()
{
  unint64_t result;

  result = qword_256113318;
  if (!qword_256113318)
  {
    result = MEMORY[0x23493D400](&unk_233B5A60C, &type metadata for AppState.Availability.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256113318);
  }
  return result;
}

unint64_t sub_233B1DA08()
{
  unint64_t result;

  result = qword_256113320;
  if (!qword_256113320)
  {
    result = MEMORY[0x23493D400](&unk_233B5A634, &type metadata for AppState.Availability.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256113320);
  }
  return result;
}

unint64_t sub_233B1DA50()
{
  unint64_t result;

  result = qword_256113328;
  if (!qword_256113328)
  {
    result = MEMORY[0x23493D400](&unk_233B5A3AC, &type metadata for AppState.AvailableCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256113328);
  }
  return result;
}

unint64_t sub_233B1DA98()
{
  unint64_t result;

  result = qword_256113330;
  if (!qword_256113330)
  {
    result = MEMORY[0x23493D400](&unk_233B5A3D4, &type metadata for AppState.AvailableCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256113330);
  }
  return result;
}

unint64_t sub_233B1DAE0()
{
  unint64_t result;

  result = qword_256113338;
  if (!qword_256113338)
  {
    result = MEMORY[0x23493D400](&unk_233B5A2F4, &type metadata for AppState.DownloadingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256113338);
  }
  return result;
}

unint64_t sub_233B1DB28()
{
  unint64_t result;

  result = qword_256113340;
  if (!qword_256113340)
  {
    result = MEMORY[0x23493D400](&unk_233B5A31C, &type metadata for AppState.DownloadingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256113340);
  }
  return result;
}

unint64_t sub_233B1DB70()
{
  unint64_t result;

  result = qword_256113348;
  if (!qword_256113348)
  {
    result = MEMORY[0x23493D400](&unk_233B5A23C, &type metadata for AppState.InstallingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256113348);
  }
  return result;
}

unint64_t sub_233B1DBB8()
{
  unint64_t result;

  result = qword_256113350;
  if (!qword_256113350)
  {
    result = MEMORY[0x23493D400](&unk_233B5A264, &type metadata for AppState.InstallingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256113350);
  }
  return result;
}

unint64_t sub_233B1DC00()
{
  unint64_t result;

  result = qword_256113358;
  if (!qword_256113358)
  {
    result = MEMORY[0x23493D400](&unk_233B5A184, &type metadata for AppState.PausedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256113358);
  }
  return result;
}

unint64_t sub_233B1DC48()
{
  unint64_t result;

  result = qword_256113360;
  if (!qword_256113360)
  {
    result = MEMORY[0x23493D400](&unk_233B5A1AC, &type metadata for AppState.PausedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256113360);
  }
  return result;
}

unint64_t sub_233B1DC90()
{
  unint64_t result;

  result = qword_256113368;
  if (!qword_256113368)
  {
    result = MEMORY[0x23493D400](&unk_233B5A134, &type metadata for AppState.InstalledCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256113368);
  }
  return result;
}

unint64_t sub_233B1DCD8()
{
  unint64_t result;

  result = qword_256113370;
  if (!qword_256113370)
  {
    result = MEMORY[0x23493D400](&unk_233B5A15C, &type metadata for AppState.InstalledCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256113370);
  }
  return result;
}

unint64_t sub_233B1DD20()
{
  unint64_t result;

  result = qword_256113378;
  if (!qword_256113378)
  {
    result = MEMORY[0x23493D400](&unk_233B5A0E4, &type metadata for AppState.ManagedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256113378);
  }
  return result;
}

unint64_t sub_233B1DD68()
{
  unint64_t result;

  result = qword_256113380;
  if (!qword_256113380)
  {
    result = MEMORY[0x23493D400](&unk_233B5A10C, &type metadata for AppState.ManagedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256113380);
  }
  return result;
}

unint64_t sub_233B1DDB0()
{
  unint64_t result;

  result = qword_256113388;
  if (!qword_256113388)
  {
    result = MEMORY[0x23493D400](&unk_233B5A094, &type metadata for AppState.WaitingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256113388);
  }
  return result;
}

unint64_t sub_233B1DDF8()
{
  unint64_t result;

  result = qword_256113390;
  if (!qword_256113390)
  {
    result = MEMORY[0x23493D400](&unk_233B5A0BC, &type metadata for AppState.WaitingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256113390);
  }
  return result;
}

unint64_t sub_233B1DE40()
{
  unint64_t result;

  result = qword_256113398;
  if (!qword_256113398)
  {
    result = MEMORY[0x23493D400](&unk_233B5A464, &type metadata for AppState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256113398);
  }
  return result;
}

unint64_t sub_233B1DE88()
{
  unint64_t result;

  result = qword_2561133A0;
  if (!qword_2561133A0)
  {
    result = MEMORY[0x23493D400](&unk_233B5A48C, &type metadata for AppState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2561133A0);
  }
  return result;
}

uint64_t sub_233B1DECC(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6C62616C69617661 && a2 == 0xE900000000000065;
  if (v2 || (sub_233B584D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6F6C6E776F646572 && a2 == 0xEA00000000006461 || (sub_233B584D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x657461647075 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_233B584D0();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_233B1E030(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0x6C62616C69617661 && a2 == 0xE900000000000065 || (sub_233B584D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x64616F6C6E776F64 && a2 == 0xEB00000000676E69 || (sub_233B584D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x696C6C6174736E69 && a2 == 0xEA0000000000676ELL || (sub_233B584D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x646573756170 && a2 == 0xE600000000000000 || (sub_233B584D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x656C6C6174736E69 && a2 == 0xE900000000000064 || (sub_233B584D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x646567616E616DLL && a2 == 0xE700000000000000 || (sub_233B584D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x676E6974696177 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else
  {
    v5 = sub_233B584D0();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 6;
    else
      return 7;
  }
}

unint64_t ServiceMachName.getter()
{
  return 0xD000000000000025;
}

uint64_t ManagedAppCancelRequest.declarationIdentifier.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ManagedAppCancelRequest.init(declarationIdentifier:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t ManagedAppCancelRequest.request()()
{
  _OWORD *v0;
  uint64_t v1;

  *(_OWORD *)(v1 + 40) = *v0;
  return swift_task_switch();
}

uint64_t sub_233B1E3C0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  char *v5;

  if (qword_25424D4B0 != -1)
    swift_once();
  v2 = v0[5];
  v1 = v0[6];
  swift_bridgeObjectRetain();
  sub_233B149FC();
  sub_233B14A40();
  v0[2] = v2;
  v0[4] = v0 + 2;
  v0[3] = v1;
  v5 = (char *)&dword_256112FD8 + dword_256112FD8;
  swift_bridgeObjectRetain();
  v3 = (_QWORD *)swift_task_alloc();
  v0[7] = v3;
  *v3 = v0;
  v3[1] = sub_233B1E498;
  return ((uint64_t (*)(_QWORD *, void (*)(void *, uint64_t, uint64_t, uint64_t, uint64_t), _QWORD))v5)(v0 + 4, sub_233B1E578, 0);
}

uint64_t sub_233B1E498()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 64) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_bridgeObjectRelease();
  return swift_task_switch();
}

uint64_t sub_233B1E504()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_233B1E538()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_233B1E578(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v8;
  void *v9;
  _QWORD v10[6];

  v8 = (void *)sub_233B57E04();
  v10[4] = a4;
  v10[5] = a5;
  v10[0] = MEMORY[0x24BDAC760];
  v10[1] = 1107296256;
  v10[2] = sub_233B42240;
  v10[3] = &block_descriptor_1;
  v9 = _Block_copy(v10);
  swift_retain();
  swift_release();
  objc_msgSend(a1, sel_cancelManagedApp_reply_, v8, v9);
  _Block_release(v9);

}

unint64_t sub_233B1E638()
{
  return 0xD000000000000015;
}

uint64_t sub_233B1E654@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_233B1EC48(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_233B1E67C()
{
  sub_233B1E9D4();
  return sub_233B58638();
}

uint64_t sub_233B1E6A4()
{
  sub_233B1E9D4();
  return sub_233B58644();
}

uint64_t ManagedAppCancelRequest.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2561133B0);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_233B1E9D4();
  sub_233B5862C();
  sub_233B5841C();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t ManagedAppCancelRequest.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2561133C0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_233B1E9D4();
  sub_233B58608();
  if (!v2)
  {
    v9 = sub_233B58380();
    v11 = v10;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v9;
    a2[1] = v11;
  }
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
}

uint64_t sub_233B1E8D4@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return ManagedAppCancelRequest.init(from:)(a1, a2);
}

uint64_t sub_233B1E8E8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2561133B0);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_233B1E9D4();
  sub_233B5862C();
  sub_233B5841C();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

unint64_t sub_233B1E9D4()
{
  unint64_t result;

  result = qword_2561133B8;
  if (!qword_2561133B8)
  {
    result = MEMORY[0x23493D400](&unk_233B5ABCC, &type metadata for ManagedAppCancelRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2561133B8);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ManagedAppCancelRequest(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ManagedAppCancelRequest(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ManagedAppCancelRequest()
{
  return &type metadata for ManagedAppCancelRequest;
}

uint64_t storeEnumTagSinglePayload for ManagedAppCancelRequest.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_233B1EB14 + 4 * byte_233B5AA90[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_233B1EB34 + 4 * byte_233B5AA95[v4]))();
}

_BYTE *sub_233B1EB14(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_233B1EB34(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_233B1EB3C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_233B1EB44(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_233B1EB4C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_233B1EB54(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ManagedAppCancelRequest.CodingKeys()
{
  return &type metadata for ManagedAppCancelRequest.CodingKeys;
}

unint64_t sub_233B1EB74()
{
  unint64_t result;

  result = qword_2561133C8;
  if (!qword_2561133C8)
  {
    result = MEMORY[0x23493D400](&unk_233B5ABA4, &type metadata for ManagedAppCancelRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2561133C8);
  }
  return result;
}

unint64_t sub_233B1EBBC()
{
  unint64_t result;

  result = qword_2561133D0;
  if (!qword_2561133D0)
  {
    result = MEMORY[0x23493D400](&unk_233B5AB14, &type metadata for ManagedAppCancelRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2561133D0);
  }
  return result;
}

unint64_t sub_233B1EC04()
{
  unint64_t result;

  result = qword_2561133D8;
  if (!qword_2561133D8)
  {
    result = MEMORY[0x23493D400](&unk_233B5AB3C, &type metadata for ManagedAppCancelRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2561133D8);
  }
  return result;
}

uint64_t sub_233B1EC48(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;

  if (a1 == 0xD000000000000015 && a2 == 0x8000000233B611C0)
  {
    swift_bridgeObjectRelease();
    v2 = 0;
  }
  else
  {
    v3 = sub_233B584D0();
    swift_bridgeObjectRelease();
    v2 = v3 ^ 1;
  }
  return v2 & 1;
}

uint64_t AppLaunchRequest.bundleID.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AppLaunchRequest.init(bundleID:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t AppLaunchRequest.launch()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v2 = v0[1];
  *(_QWORD *)(v1 + 40) = *v0;
  *(_QWORD *)(v1 + 48) = v2;
  return swift_task_switch();
}

uint64_t sub_233B1ED1C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t);

  if (qword_25424D4B0 != -1)
    swift_once();
  v1 = v0[5];
  v2 = swift_bridgeObjectRetain();
  v0[2] = v1;
  v0[4] = v0 + 2;
  v0[3] = v2;
  v5 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_256112FD0 + dword_256112FD0);
  swift_bridgeObjectRetain();
  v3 = (_QWORD *)swift_task_alloc();
  v0[7] = v3;
  *v3 = v0;
  v3[1] = sub_233B1EDE0;
  return v5((uint64_t)(v0 + 4), (uint64_t)sub_233B1EE8C, 0);
}

uint64_t sub_233B1EDE0()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 64) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_bridgeObjectRelease();
  return swift_task_switch();
}

uint64_t sub_233B1EE4C()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_233B1EE8C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v8;
  void *v9;
  _QWORD v10[6];

  v8 = (void *)sub_233B57E04();
  v10[4] = a4;
  v10[5] = a5;
  v10[0] = MEMORY[0x24BDAC760];
  v10[1] = 1107296256;
  v10[2] = sub_233B42240;
  v10[3] = &block_descriptor_2;
  v9 = _Block_copy(v10);
  swift_retain();
  swift_release();
  objc_msgSend(a1, sel_handleLaunchAppRequest_reply_, v8, v9);
  _Block_release(v9);

}

ValueMetadata *type metadata accessor for AppLaunchRequest()
{
  return &type metadata for AppLaunchRequest;
}

id BundleID.__allocating_init(_:)(uint64_t a1, uint64_t a2)
{
  objc_class *v2;
  char *v5;
  char *v6;
  objc_super v8;

  v5 = (char *)objc_allocWithZone(v2);
  v6 = &v5[OBJC_IVAR____TtC22ManagedAppDistribution8BundleID_rawValue];
  *(_QWORD *)v6 = a1;
  *((_QWORD *)v6 + 1) = a2;
  v8.receiver = v5;
  v8.super_class = v2;
  return objc_msgSendSuper2(&v8, sel_init);
}

id BundleID.init(_:)(uint64_t a1, uint64_t a2)
{
  char *v2;
  objc_class *ObjectType;
  char *v6;
  objc_super v8;

  ObjectType = (objc_class *)swift_getObjectType();
  v6 = &v2[OBJC_IVAR____TtC22ManagedAppDistribution8BundleID_rawValue];
  *(_QWORD *)v6 = a1;
  *((_QWORD *)v6 + 1) = a2;
  v8.receiver = v2;
  v8.super_class = ObjectType;
  return objc_msgSendSuper2(&v8, sel_init);
}

uint64_t BundleID.description.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC22ManagedAppDistribution8BundleID_rawValue);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t BundleID.isEqual(_:)(uint64_t a1)
{
  uint64_t v1;
  char v4;
  char *v6;
  _BYTE v7[24];
  uint64_t v8;

  swift_getObjectType();
  sub_233B1F168(a1, (uint64_t)v7);
  if (!v8)
  {
    sub_233B034D8((uint64_t)v7);
    goto LABEL_9;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_9:
    v4 = 0;
    return v4 & 1;
  }
  if (*(_QWORD *)(v1 + OBJC_IVAR____TtC22ManagedAppDistribution8BundleID_rawValue) == *(_QWORD *)&v6[OBJC_IVAR____TtC22ManagedAppDistribution8BundleID_rawValue]
    && *(_QWORD *)(v1 + OBJC_IVAR____TtC22ManagedAppDistribution8BundleID_rawValue + 8) == *(_QWORD *)&v6[OBJC_IVAR____TtC22ManagedAppDistribution8BundleID_rawValue + 8])
  {

    v4 = 1;
  }
  else
  {
    v4 = sub_233B584D0();

  }
  return v4 & 1;
}

uint64_t sub_233B1F168(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256112BA8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t static BundleID.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a1 + OBJC_IVAR____TtC22ManagedAppDistribution8BundleID_rawValue) == *(_QWORD *)(a2
                                                                                                 + OBJC_IVAR____TtC22ManagedAppDistribution8BundleID_rawValue)
    && *(_QWORD *)(a1 + OBJC_IVAR____TtC22ManagedAppDistribution8BundleID_rawValue + 8) == *(_QWORD *)(a2 + OBJC_IVAR____TtC22ManagedAppDistribution8BundleID_rawValue + 8))
  {
    return 1;
  }
  else
  {
    return sub_233B584D0();
  }
}

uint64_t BundleID.hash.getter()
{
  return sub_233B57FF0();
}

id BundleID.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void BundleID.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id BundleID.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void *BundleID.__allocating_init(from:)(_QWORD *a1)
{
  return sub_233B1F50C(a1);
}

uint64_t BundleID.encode(to:)(_QWORD *a1)
{
  _BYTE v2[24];
  uint64_t v3;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_233B58620();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3);
  sub_233B58500();
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)v2);
}

void *sub_233B1F43C@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  void *result;

  result = sub_233B1F50C(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_233B1F464(_QWORD *a1)
{
  _BYTE v2[24];
  uint64_t v3;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_233B58620();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3);
  sub_233B58500();
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)v2);
}

void *sub_233B1F50C(_QWORD *a1)
{
  uint64_t v1;
  void *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  objc_class *v8;
  char *v9;
  uint64_t *v10;
  objc_super v11;
  _QWORD v12[4];

  v3 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_233B585F0();
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  }
  else
  {
    __swift_project_boxed_opaque_existential_1(v12, v12[3]);
    v5 = sub_233B584DC();
    v7 = v6;
    v8 = (objc_class *)type metadata accessor for BundleID();
    v9 = (char *)objc_allocWithZone(v8);
    v10 = (uint64_t *)&v9[OBJC_IVAR____TtC22ManagedAppDistribution8BundleID_rawValue];
    *v10 = v5;
    v10[1] = v7;
    v11.receiver = v9;
    v11.super_class = v8;
    v3 = objc_msgSendSuper2(&v11, sel_init);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v12);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  }
  return v3;
}

uint64_t type metadata accessor for BundleID()
{
  return objc_opt_self();
}

uint64_t method lookup function for BundleID()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of BundleID.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t LogKey.Prefix.fallbackActivityName.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(const char *, uint64_t))((char *)sub_233B1F664 + 4 * byte_233B5ACC0[*v0]))("App Review", 10);
}

const char *sub_233B1F664()
{
  return "General";
}

const char *sub_233B1F6DC()
{
  return "PDS";
}

const char *sub_233B1F6E8()
{
  return "Bootstrap";
}

const char *sub_233B1F6FC()
{
  return "RSP";
}

const char *sub_233B1F708()
{
  return "RSD";
}

const char *sub_233B1F728()
{
  return "madctl";
}

const char *sub_233B1F73C()
{
  return "Internal";
}

const char *sub_233B1F75C()
{
  return "None";
}

uint64_t LogKey.Prefix.init(rawValue:)@<X0>(char *a1@<X8>)
{
  unint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_233B58524();
  result = swift_bridgeObjectRelease();
  v4 = 18;
  if (v2 < 0x12)
    v4 = v2;
  *a1 = v4;
  return result;
}

uint64_t LogKey.Prefix.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_233B1F7FC + 4 * byte_233B5ACD2[*v0]))(5129543, 0xE300000000000000);
}

uint64_t sub_233B1F7FC()
{
  return 5263446;
}

uint64_t sub_233B1F80C()
{
  return 5128525;
}

uint64_t sub_233B1F818()
{
  return 5063748;
}

uint64_t sub_233B1F824()
{
  return 4280405;
}

uint64_t sub_233B1F830()
{
  return 4477013;
}

uint64_t sub_233B1F83C()
{
  return 5260353;
}

uint64_t sub_233B1F848()
{
  return 4409676;
}

uint64_t sub_233B1F854()
{
  return 5456976;
}

uint64_t sub_233B1F860()
{
  return 5461058;
}

uint64_t sub_233B1F870()
{
  return 5264210;
}

uint64_t sub_233B1F880()
{
  return 4477778;
}

uint64_t sub_233B1F890()
{
  return 4144959;
}

uint64_t sub_233B1F89C()
{
  return 5394497;
}

uint64_t sub_233B1F8A8()
{
  return 0x4C544344414DLL;
}

uint64_t sub_233B1F8BC()
{
  return 5525065;
}

uint64_t sub_233B1F8C8()
{
  return 4671821;
}

uint64_t sub_233B1F8D4()
{
  return 0;
}

uint64_t sub_233B1F8E0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_233B253B0(*a1, *a2);
}

uint64_t sub_233B1F8EC()
{
  sub_233B58590();
  LogKey.Prefix.rawValue.getter();
  sub_233B57FCC();
  swift_bridgeObjectRelease();
  return sub_233B585C0();
}

uint64_t sub_233B1F950()
{
  LogKey.Prefix.rawValue.getter();
  sub_233B57FCC();
  return swift_bridgeObjectRelease();
}

uint64_t sub_233B1F9A0()
{
  sub_233B58590();
  LogKey.Prefix.rawValue.getter();
  sub_233B57FCC();
  swift_bridgeObjectRelease();
  return sub_233B585C0();
}

uint64_t sub_233B1FA00@<X0>(char *a1@<X8>)
{
  return LogKey.Prefix.init(rawValue:)(a1);
}

uint64_t sub_233B1FA0C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = LogKey.Prefix.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t LogKey.Representation.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[4];

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_233B585F0();
  if (!v2)
  {
    __swift_project_boxed_opaque_existential_1(v9, v9[3]);
    v5 = sub_233B584DC();
    v7 = v6;
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v9);
    *(_QWORD *)a2 = v5;
    *(_QWORD *)(a2 + 8) = v7;
    *(_BYTE *)(a2 + 16) = 1;
  }
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
}

uint64_t LogKey.Representation.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  int v3;
  _BYTE v5[24];
  uint64_t v6;
  int v7;

  v2 = *v1;
  v3 = *((unsigned __int8 *)v1 + 16);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_233B58620();
  if (v3 == 1)
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    LogKey.Prefix.rawValue.getter();
    v7 = HIDWORD(v2);
    sub_233B1FCA4();
    sub_233B57FFC();
    sub_233B57FD8();
    swift_bridgeObjectRelease();
  }
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v5, v6);
  sub_233B58500();
  swift_bridgeObjectRelease();
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)v5);
}

uint64_t LogKey.Representation.description.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v3;

  v1 = *v0;
  if (*((_BYTE *)v0 + 16) == 1)
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    v3 = LogKey.Prefix.rawValue.getter();
    sub_233B1FCA4();
    sub_233B57FFC();
    sub_233B57FD8();
    swift_bridgeObjectRelease();
    return v3;
  }
  return v1;
}

unint64_t sub_233B1FCA4()
{
  unint64_t result;

  result = qword_25424D278;
  if (!qword_25424D278)
  {
    result = MEMORY[0x23493D400](MEMORY[0x24BEE4538], MEMORY[0x24BEE44F0]);
    atomic_store(result, (unint64_t *)&qword_25424D278);
  }
  return result;
}

uint64_t sub_233B1FCEC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[4];

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_233B585F0();
  if (!v2)
  {
    __swift_project_boxed_opaque_existential_1(v9, v9[3]);
    v5 = sub_233B584DC();
    v7 = v6;
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v9);
    *(_QWORD *)a2 = v5;
    *(_QWORD *)(a2 + 8) = v7;
    *(_BYTE *)(a2 + 16) = 1;
  }
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
}

uint64_t sub_233B1FDB4(_QWORD *a1)
{
  return LogKey.Representation.encode(to:)(a1);
}

void LogKey.representation.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC22ManagedAppDistribution6LogKey_lockedRepresentation);
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 36));
  v4 = *(_QWORD *)(v3 + 16);
  v5 = *(_QWORD *)(v3 + 24);
  v6 = *(_BYTE *)(v3 + 32);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  sub_233B0486C(v4, v5, v6);
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 36));
}

uint64_t sub_233B1FE1C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  v3 = *(_QWORD *)a1;
  v2 = *(_QWORD *)(a1 + 8);
  v4 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)a2 = *(_QWORD *)a1;
  *(_QWORD *)(a2 + 8) = v2;
  *(_BYTE *)(a2 + 16) = v4;
  return sub_233B0486C(v3, v2, v4);
}

uint64_t LogKey.stringValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC22ManagedAppDistribution6LogKey_lockedRepresentation);
  v2 = (os_unfair_lock_s *)(v1 + 36);
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 36));
  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  LODWORD(v1) = *(unsigned __int8 *)(v1 + 32);
  sub_233B0486C(v3, v4, v1);
  os_unfair_lock_unlock(v2);
  if ((_DWORD)v1 != 1)
  {
    v6 = LogKey.Prefix.rawValue.getter();
    sub_233B1FCA4();
    sub_233B57FFC();
    sub_233B57FD8();
    swift_bridgeObjectRelease();
    return v6;
  }
  return v3;
}

Swift::Void __swiftcall LogKey.append(_:)(Swift::String a1)
{
  uint64_t v1;
  os_unfair_lock_s *v2;
  uint64_t v3;
  os_unfair_lock_s *v4;

  v2 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____TtC22ManagedAppDistribution6LogKey_lockedRepresentation);
  v3 = (uint64_t)&v2[4];
  v4 = v2 + 9;
  os_unfair_lock_lock(v2 + 9);
  sub_233B1FFFC(v3);
  os_unfair_lock_unlock(v4);
}

Swift::Void __swiftcall LogKey.append(_:separator:)(Swift::String _, Swift::String separator)
{
  uint64_t v2;
  os_unfair_lock_s *v3;
  uint64_t v4;
  os_unfair_lock_s *v5;

  v3 = *(os_unfair_lock_s **)(v2 + OBJC_IVAR____TtC22ManagedAppDistribution6LogKey_lockedRepresentation);
  v4 = (uint64_t)&v3[4];
  v5 = v3 + 9;
  os_unfair_lock_lock(v3 + 9);
  sub_233B1FFFC(v4);
  os_unfair_lock_unlock(v5);
}

uint64_t sub_233B1FFFC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)a1;
  if (*(_BYTE *)(a1 + 16) == 1)
  {
    v3 = *(_QWORD *)(a1 + 8);
  }
  else
  {
    v6 = LogKey.Prefix.rawValue.getter();
    v8 = v4;
    sub_233B1FCA4();
    sub_233B57FFC();
    sub_233B57FD8();
    swift_bridgeObjectRelease();
    v2 = v6;
    v3 = v8;
  }
  v7 = v2;
  v9 = v3;
  sub_233B57FD8();
  result = sub_233B57FD8();
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = v9;
  *(_BYTE *)(a1 + 16) = 1;
  return result;
}

Swift::Void __swiftcall LogKey.prepend(_:)(Swift::String a1)
{
  uint64_t v1;
  void *object;
  uint64_t countAndFlagsBits;
  os_unfair_lock_s *v4;
  uint64_t v5;
  os_unfair_lock_s *v6;

  object = a1._object;
  countAndFlagsBits = a1._countAndFlagsBits;
  v4 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____TtC22ManagedAppDistribution6LogKey_lockedRepresentation);
  v5 = (uint64_t)&v4[4];
  v6 = v4 + 9;
  os_unfair_lock_lock(v4 + 9);
  sub_233B201D4(v5, countAndFlagsBits, (uint64_t)object);
  os_unfair_lock_unlock(v6);
}

Swift::Void __swiftcall LogKey.prepend(_:separator:)(Swift::String _, Swift::String separator)
{
  uint64_t v2;
  void *object;
  uint64_t countAndFlagsBits;
  os_unfair_lock_s *v5;
  uint64_t v6;
  os_unfair_lock_s *v7;

  object = _._object;
  countAndFlagsBits = _._countAndFlagsBits;
  v5 = *(os_unfair_lock_s **)(v2 + OBJC_IVAR____TtC22ManagedAppDistribution6LogKey_lockedRepresentation);
  v6 = (uint64_t)&v5[4];
  v7 = v5 + 9;
  os_unfair_lock_lock(v5 + 9);
  sub_233B201D4(v6, countAndFlagsBits, (uint64_t)object);
  os_unfair_lock_unlock(v7);
}

uint64_t sub_233B201D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  swift_bridgeObjectRetain();
  sub_233B57FD8();
  if (*(_BYTE *)(a1 + 16) != 1)
  {
    LogKey.Prefix.rawValue.getter();
    sub_233B1FCA4();
    sub_233B57FFC();
    sub_233B57FD8();
    swift_bridgeObjectRelease();
  }
  sub_233B57FD8();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_BYTE *)(a1 + 16) = 1;
  return result;
}

id LogKey.__allocating_init(prefix:)(unsigned __int8 *a1)
{
  objc_class *v1;
  id v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  objc_super v9;
  uint64_t v10;

  v3 = objc_allocWithZone(v1);
  v4 = *a1;
  v10 = 0;
  v5 = (char *)v3;
  MEMORY[0x23493D4E4](&v10, 8);
  v6 = v4 | (v10 << 32);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25424D1F8);
  v7 = swift_allocObject();
  *(_DWORD *)(v7 + 36) = 0;
  *(_QWORD *)(v7 + 16) = v6;
  *(_QWORD *)(v7 + 24) = 0;
  *(_BYTE *)(v7 + 32) = 0;
  *(_QWORD *)&v5[OBJC_IVAR____TtC22ManagedAppDistribution6LogKey_lockedRepresentation] = v7;

  v9.receiver = v5;
  v9.super_class = v1;
  return objc_msgSendSuper2(&v9, sel_init);
}

id LogKey.init(prefix:)(unsigned __int8 *a1)
{
  void *v1;
  objc_class *ObjectType;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  objc_super v9;
  uint64_t v10;

  ObjectType = (objc_class *)swift_getObjectType();
  v4 = *a1;
  v10 = 0;
  v5 = v1;
  MEMORY[0x23493D4E4](&v10, 8);
  v6 = v4 | (v10 << 32);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25424D1F8);
  v7 = swift_allocObject();
  *(_DWORD *)(v7 + 36) = 0;
  *(_QWORD *)(v7 + 16) = v6;
  *(_QWORD *)(v7 + 24) = 0;
  *(_BYTE *)(v7 + 32) = 0;
  *(_QWORD *)&v5[OBJC_IVAR____TtC22ManagedAppDistribution6LogKey_lockedRepresentation] = v7;

  v9.receiver = v5;
  v9.super_class = ObjectType;
  return objc_msgSendSuper2(&v9, sel_init);
}

id LogKey.__allocating_init(string:)(uint64_t a1, uint64_t a2)
{
  objc_class *v2;
  char *v5;
  uint64_t v6;
  objc_super v8;

  v5 = (char *)objc_allocWithZone(v2);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25424D1F8);
  v6 = swift_allocObject();
  *(_DWORD *)(v6 + 36) = 0;
  *(_QWORD *)(v6 + 16) = a1;
  *(_QWORD *)(v6 + 24) = a2;
  *(_BYTE *)(v6 + 32) = 1;
  *(_QWORD *)&v5[OBJC_IVAR____TtC22ManagedAppDistribution6LogKey_lockedRepresentation] = v6;
  v8.receiver = v5;
  v8.super_class = v2;
  return objc_msgSendSuper2(&v8, sel_init);
}

id LogKey.init(string:)(uint64_t a1, uint64_t a2)
{
  char *v2;
  objc_class *ObjectType;
  uint64_t v6;
  objc_super v8;

  ObjectType = (objc_class *)swift_getObjectType();
  __swift_instantiateConcreteTypeFromMangledName(&qword_25424D1F8);
  v6 = swift_allocObject();
  *(_DWORD *)(v6 + 36) = 0;
  *(_QWORD *)(v6 + 16) = a1;
  *(_QWORD *)(v6 + 24) = a2;
  *(_BYTE *)(v6 + 32) = 1;
  *(_QWORD *)&v2[OBJC_IVAR____TtC22ManagedAppDistribution6LogKey_lockedRepresentation] = v6;
  v8.receiver = v2;
  v8.super_class = ObjectType;
  return objc_msgSendSuper2(&v8, sel_init);
}

id LogKey.__allocating_init(from:)(_QWORD *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return LogKey.init(from:)(a1);
}

id LogKey.init(from:)(_QWORD *a1)
{
  void *v1;
  uint64_t v2;
  objc_class *ObjectType;
  _QWORD *v5;
  char *v6;
  id v7;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  objc_super v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  _QWORD v17[4];

  ObjectType = (objc_class *)swift_getObjectType();
  v5 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v6 = v1;
  v7 = v5;
  sub_233B585F0();
  if (v2)
  {

    __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
    swift_deallocPartialClassInstance();
  }
  else
  {
    __swift_project_boxed_opaque_existential_1(v17, v17[3]);
    sub_233B206B0();
    sub_233B584F4();
    v9 = v14;
    v10 = v15;
    v11 = v16;
    __swift_instantiateConcreteTypeFromMangledName(&qword_25424D1F8);
    v12 = swift_allocObject();
    *(_DWORD *)(v12 + 36) = 0;
    *(_QWORD *)(v12 + 16) = v9;
    *(_QWORD *)(v12 + 24) = v10;
    *(_BYTE *)(v12 + 32) = v11;
    *(_QWORD *)&v6[OBJC_IVAR____TtC22ManagedAppDistribution6LogKey_lockedRepresentation] = v12;

    __swift_destroy_boxed_opaque_existential_0((uint64_t)v17);
    v13.receiver = v6;
    v13.super_class = ObjectType;
    v7 = objc_msgSendSuper2(&v13, sel_init);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  }
  return v7;
}

unint64_t sub_233B206B0()
{
  unint64_t result;

  result = qword_256113420;
  if (!qword_256113420)
  {
    result = MEMORY[0x23493D400](&protocol conformance descriptor for LogKey.Representation, &type metadata for LogKey.Representation);
    atomic_store(result, (unint64_t *)&qword_256113420);
  }
  return result;
}

void LogKey.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  _BYTE v8[24];
  uint64_t v9;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_233B58620();
  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC22ManagedAppDistribution6LogKey_lockedRepresentation);
  v4 = (os_unfair_lock_s *)(v3 + 36);
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 36));
  v5 = *(_QWORD *)(v3 + 16);
  v6 = *(_QWORD *)(v3 + 24);
  v7 = *(_BYTE *)(v3 + 32);
  sub_233B0486C(v5, v6, v7);
  os_unfair_lock_unlock(v4);
  if (v2)
  {
    __break(1u);
  }
  else
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v8, v9);
    sub_233B207F8();
    sub_233B58518();
    sub_233B04B94(v5, v6, v7);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v8);
  }
}

unint64_t sub_233B207F8()
{
  unint64_t result;

  result = qword_256113428;
  if (!qword_256113428)
  {
    result = MEMORY[0x23493D400](&protocol conformance descriptor for LogKey.Representation, &type metadata for LogKey.Representation);
    atomic_store(result, (unint64_t *)&qword_256113428);
  }
  return result;
}

uint64_t LogKey.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC22ManagedAppDistribution6LogKey_lockedRepresentation);
  v2 = (os_unfair_lock_s *)(v1 + 36);
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 36));
  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  LODWORD(v1) = *(unsigned __int8 *)(v1 + 32);
  sub_233B0486C(v3, v4, v1);
  os_unfair_lock_unlock(v2);
  if ((_DWORD)v1 != 1)
  {
    v6 = LogKey.Prefix.rawValue.getter();
    sub_233B1FCA4();
    sub_233B57FFC();
    sub_233B57FD8();
    swift_bridgeObjectRelease();
    return v6;
  }
  return v3;
}

id LogKey.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void LogKey.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id LogKey.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

unint64_t sub_233B20A74()
{
  unint64_t result;

  result = qword_256113430;
  if (!qword_256113430)
  {
    result = MEMORY[0x23493D400](&protocol conformance descriptor for LogKey.Prefix, &type metadata for LogKey.Prefix);
    atomic_store(result, (unint64_t *)&qword_256113430);
  }
  return result;
}

id sub_233B20AC8@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  objc_class *v2;
  uint64_t v3;
  id v6;
  id result;

  v6 = objc_allocWithZone(v2);
  result = LogKey.init(from:)(a1);
  if (!v3)
    *a2 = result;
  return result;
}

void sub_233B20B14(_QWORD *a1)
{
  LogKey.encode(to:)(a1);
}

uint64_t type metadata accessor for LogKey()
{
  return objc_opt_self();
}

uint64_t method lookup function for LogKey()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of LogKey.__allocating_init(prefix:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of LogKey.__allocating_init(string:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of LogKey.__allocating_init(from:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t getEnumTagSinglePayload for LogKey.Prefix(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xEF)
    goto LABEL_17;
  if (a2 + 17 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 17) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 17;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 17;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 17;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x12;
  v8 = v6 - 18;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for LogKey.Prefix(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 17 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 17) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xEF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xEE)
    return ((uint64_t (*)(void))((char *)&loc_233B20C64 + 4 * byte_233B5ACE9[v4]))();
  *a1 = a2 + 17;
  return ((uint64_t (*)(void))((char *)sub_233B20C98 + 4 * byte_233B5ACE4[v4]))();
}

uint64_t sub_233B20C98(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_233B20CA0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x233B20CA8);
  return result;
}

uint64_t sub_233B20CB4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x233B20CBCLL);
  *(_BYTE *)result = a2 + 17;
  return result;
}

uint64_t sub_233B20CC0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_233B20CC8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LogKey.Prefix()
{
  return &type metadata for LogKey.Prefix;
}

uint64_t destroy for LogKey.Representation(uint64_t a1)
{
  return sub_233B04B94(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t _s22ManagedAppDistribution6LogKeyC14RepresentationOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_233B0486C(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for LogKey.Representation(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_233B0486C(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  sub_233B04B94(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for LogKey.Representation(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_BYTE *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v3;
  sub_233B04B94(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for LogKey.Representation(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for LogKey.Representation(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t sub_233B20E64(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t sub_233B20E6C(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for LogKey.Representation()
{
  return &type metadata for LogKey.Representation;
}

uint64_t ManagedApp.open()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 32) = v0;
  return swift_task_switch();
}

uint64_t sub_233B20EA0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = v0[4];
  v3 = *(_QWORD *)(v1 + 16);
  v2 = *(_QWORD *)(v1 + 24);
  v0[2] = v3;
  v0[3] = v2;
  v4 = (_QWORD *)swift_task_alloc();
  v0[5] = v4;
  *v4 = v0;
  v4[1] = sub_233B20EFC;
  return AppLaunchRequest.launch()();
}

uint64_t sub_233B20EFC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 48) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  else
    return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_233B20F68()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t ManagedApp.state.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  os_unfair_lock_s *v17;
  uint64_t v18;
  os_unfair_lock_s *v19;
  _BYTE v21[16];

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_256113440);
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = &v21[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256113448);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v9 = &v21[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v7);
  v11 = &v21[-v10];
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x24BEE6A10], v1);
  sub_233B58104();
  (*(void (**)(_BYTE *, uint64_t))(v2 + 8))(v4, v1);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v6 + 16))(v9, v11, v5);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256113450);
  v12 = swift_allocObject();
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v6 + 32))(v12 + *(_QWORD *)(*(_QWORD *)v12 + 88), v9, v5);
  v13 = *(_QWORD *)(v0 + 16);
  v14 = *(_QWORD *)(v0 + 24);
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = v12;
  *(_QWORD *)(v15 + 24) = v13;
  *(_QWORD *)(v15 + 32) = v14;
  *(_BYTE *)(v15 + 40) = 1;
  swift_retain();
  swift_bridgeObjectRetain();
  sub_233B58110();
  if (qword_25424D4D0 != -1)
    swift_once();
  v16 = qword_25424D460;
  v17 = *(os_unfair_lock_s **)(qword_25424D460 + OBJC_IVAR____TtC22ManagedAppDistribution9XPCClient_lockedStorage);
  v18 = (uint64_t)&v17[4];
  v19 = v17 + 26;
  os_unfair_lock_lock(v17 + 26);
  sub_233B447C8(v18, v13, v14, 1, v12, v16);
  os_unfair_lock_unlock(v19);
  swift_release();
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v11, v5);
}

void sub_233B211C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  os_unfair_lock_s *v9;
  uint64_t v10;
  os_unfair_lock_s *v11;

  if (qword_25424D4D0 != -1)
    swift_once();
  v9 = *(os_unfair_lock_s **)(qword_25424D460 + OBJC_IVAR____TtC22ManagedAppDistribution9XPCClient_lockedStorage);
  v10 = (uint64_t)&v9[4];
  v11 = v9 + 26;
  os_unfair_lock_lock(v9 + 26);
  sub_233B44CC0(v10, a3, a4, a5 & 1, a2);
  os_unfair_lock_unlock(v11);
}

uint64_t sub_233B21284()
{
  uint64_t v0;

  swift_release();
  sub_233B04B94(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40));
  return swift_deallocObject();
}

void sub_233B212B4(uint64_t a1)
{
  uint64_t v1;

  sub_233B211C8(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_BYTE *)(v1 + 40));
}

uint64_t sub_233B212C4(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  _OWORD v9[2];

  if (*(_QWORD *)(a1 + 24))
  {
    sub_233B03554((_OWORD *)a1, v9);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v8 = *v2;
    *v2 = 0x8000000000000000;
    sub_233B048AC(v9, a2, isUniquelyReferenced_nonNull_native);
    *v2 = v8;
    swift_bridgeObjectRelease();
    v5 = sub_233B582FC();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a2, v5);
  }
  else
  {
    sub_233B034D8(a1);
    sub_233B03B5C(a2, v9);
    v7 = sub_233B582FC();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(a2, v7);
    return sub_233B034D8((uint64_t)v9);
  }
}

uint64_t sub_233B21398()
{
  uint64_t (**v0)(void);

  return (*v0)();
}

uint64_t encodeXPCValues<each A>(_:)(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t TupleTypeMetadata;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  __int128 *v16;
  _OWORD *v17;
  unint64_t v18;
  __int128 v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  uint64_t v34;
  _QWORD v36[3];
  _QWORD *v37;
  uint64_t (*v38)(uint64_t);
  char *v39;
  uint64_t v40;

  v7 = a1;
  v40 = a3;
  v8 = (uint64_t *)(a3 & 0xFFFFFFFFFFFFFFFELL);
  if (a2 == 1)
  {
    v37 = v36;
    TupleTypeMetadata = *v8;
    v10 = *(_QWORD *)(*v8 - 8);
    v11 = *(_QWORD *)(v10 + 64);
    MEMORY[0x24BDAC7A8](a1);
    v12 = (char *)v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
LABEL_12:
    v36[1] = a4;
    v36[2] = v4;
    v26 = 32;
    v27 = a2;
    do
    {
      if (a2 == 1)
        v28 = 0;
      else
        v28 = *(_DWORD *)(TupleTypeMetadata + v26);
      v30 = *v8++;
      v29 = v30;
      v31 = *v7++;
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v29 - 8) + 16))(&v12[v28], v31);
      v26 += 16;
      --v27;
    }
    while (v27);
    goto LABEL_17;
  }
  MEMORY[0x24BDAC7A8](a1);
  v14 = (char *)v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    v15 = 0;
    if (a2 < 4)
      goto LABEL_9;
    if ((unint64_t)(v14 - (char *)v8) < 0x20)
      goto LABEL_9;
    v15 = a2 & 0xFFFFFFFFFFFFFFFCLL;
    v16 = (__int128 *)(v8 + 2);
    v17 = v14 + 16;
    v18 = a2 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v19 = *v16;
      *(v17 - 1) = *(v16 - 1);
      *v17 = v19;
      v16 += 2;
      v17 += 2;
      v18 -= 4;
    }
    while (v18);
    if (v15 != a2)
    {
LABEL_9:
      v20 = a2 - v15;
      v21 = v15;
      v22 = &v14[8 * v15];
      v23 = &v8[v21];
      do
      {
        v24 = *v23++;
        *(_QWORD *)v22 = v24;
        v22 += 8;
        --v20;
      }
      while (v20);
    }
  }
  TupleTypeMetadata = swift_getTupleTypeMetadata();
  v37 = v36;
  v10 = *(_QWORD *)(TupleTypeMetadata - 8);
  MEMORY[0x24BDAC7A8](TupleTypeMetadata);
  v12 = (char *)v36 - v25;
  if (a2)
    goto LABEL_12;
LABEL_17:
  v32 = (*(unsigned __int8 *)(v10 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v33 = (char *)swift_allocObject();
  *((_QWORD *)v33 + 2) = a2;
  *((_QWORD *)v33 + 3) = swift_allocateMetadataPack();
  *((_QWORD *)v33 + 4) = swift_allocateWitnessTablePack();
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(&v33[v32], v12, TupleTypeMetadata);
  sub_233B57D98();
  swift_allocObject();
  sub_233B57D8C();
  v38 = sub_233B21A10;
  v39 = v33;
  sub_233B13C48();
  v34 = sub_233B57D80();
  swift_release();
  swift_release();
  return v34;
}

uint64_t sub_233B21660(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  unint64_t v7;
  uint64_t v9;
  _QWORD *TupleTypeMetadata;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int v16;
  char *v17;
  unint64_t v18;
  _OWORD *v19;
  unint64_t v20;
  __int128 *v21;
  __int128 v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _BYTE v39[24];
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;

  v7 = a3;
  v9 = 8 * a3;
  TupleTypeMetadata = (_QWORD *)MEMORY[0x24BDAC7A8](a1);
  v12 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v13)
  {
    v37 = TupleTypeMetadata;
    v38 = v5;
    v14 = 0;
    v15 = (char *)(v11 & 0xFFFFFFFFFFFFFFFELL);
    v42 = (uint64_t *)((v11 & 0xFFFFFFFFFFFFFFFELL) + 16);
    do
    {
      if (v7 == 1)
      {
        v16 = 0;
      }
      else
      {
        MEMORY[0x24BDAC7A8](TupleTypeMetadata);
        v17 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
        v18 = 0;
        if (v7 < 4)
          goto LABEL_11;
        if ((unint64_t)(v17 - v15) < 0x20)
          goto LABEL_11;
        v19 = v17 + 16;
        v20 = v7 & 0xFFFFFFFFFFFFFFFCLL;
        v21 = (__int128 *)v42;
        do
        {
          v22 = *v21;
          *(v19 - 1) = *(v21 - 1);
          *v19 = v22;
          v21 += 2;
          v19 += 2;
          v20 -= 4;
        }
        while (v20);
        v18 = v7 & 0xFFFFFFFFFFFFFFFCLL;
        if ((v7 & 0xFFFFFFFFFFFFFFFCLL) != v7)
        {
LABEL_11:
          v23 = v7 - v18;
          v24 = 8 * v18;
          v25 = &v17[8 * v18];
          v26 = &v15[v24];
          do
          {
            v27 = *(_QWORD *)v26;
            v26 += 8;
            *(_QWORD *)v25 = v27;
            v25 += 8;
            --v23;
          }
          while (v23);
        }
        TupleTypeMetadata = (_QWORD *)swift_getTupleTypeMetadata();
        v16 = TupleTypeMetadata[2 * v14 + 4];
      }
      *(_QWORD *)&v12[8 * v14++] = a2 + v16;
    }
    while (v14 != v7);
    __swift_project_boxed_opaque_existential_1(v37, v37[3]);
    v28 = sub_233B58614();
    v29 = a5 & 0xFFFFFFFFFFFFFFFELL;
    v30 = v38;
    do
    {
      v37 = (_QWORD *)v7;
      v42 = &v36;
      v31 = *(_QWORD *)v15;
      v32 = *(_QWORD *)(*(_QWORD *)v15 - 8);
      MEMORY[0x24BDAC7A8](v28);
      v34 = (char *)&v36 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *))(v32 + 16))(v34);
      v38 = v41;
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v39, v40);
      sub_233B584C4();
      v28 = (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v34, v31);
      if (v30)
        break;
      v12 += 8;
      v29 += 8;
      v15 += 8;
      v7 = (unint64_t)v37 - 1;
    }
    while (v37 != (_QWORD *)1);
  }
  else
  {
    __swift_project_boxed_opaque_existential_1(TupleTypeMetadata, TupleTypeMetadata[3]);
    sub_233B58614();
  }
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)v39);
}

uint64_t sub_233B218EC(uint64_t a1)
{
  uint64_t v1;
  uint64_t TupleTypeMetadata;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  unint64_t v7;
  __int128 *v8;
  _OWORD *v9;
  unint64_t v10;
  __int128 v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v18;

  if (*(_QWORD *)(v1 + 16) == 1)
  {
    TupleTypeMetadata = *(_QWORD *)(*(_QWORD *)(v1 + 24) & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    MEMORY[0x24BDAC7A8](a1);
    v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (v3)
    {
      v7 = 0;
      if (v3 < 4)
        goto LABEL_9;
      if ((unint64_t)&v6[-v4] < 0x20)
        goto LABEL_9;
      v7 = v3 & 0xFFFFFFFFFFFFFFFCLL;
      v8 = (__int128 *)(v4 + 16);
      v9 = v6 + 16;
      v10 = v3 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v11 = *v8;
        *(v9 - 1) = *(v8 - 1);
        *v9 = v11;
        v8 += 2;
        v9 += 2;
        v10 -= 4;
      }
      while (v10);
      if (v3 != v7)
      {
LABEL_9:
        v12 = v3 - v7;
        v13 = 8 * v7;
        v14 = &v6[8 * v7];
        v15 = (uint64_t *)(v4 + v13);
        do
        {
          v16 = *v15++;
          *(_QWORD *)v14 = v16;
          v14 += 8;
          --v12;
        }
        while (v12);
      }
    }
    TupleTypeMetadata = swift_getTupleTypeMetadata();
  }
  (*(void (**)(unint64_t))(*(_QWORD *)(TupleTypeMetadata - 8) + 8))(v1+ ((*(unsigned __int8 *)(*(_QWORD *)(TupleTypeMetadata - 8) + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(TupleTypeMetadata - 8) + 80)));
  return swift_deallocObject();
}

uint64_t sub_233B21A10(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t TupleTypeMetadata;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  __int128 *v11;
  _OWORD *v12;
  unint64_t v13;
  __int128 v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;

  v4 = v1[2];
  v3 = v1[3];
  v5 = v1[4];
  if (v4 == 1)
  {
    TupleTypeMetadata = *(_QWORD *)(v3 & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    MEMORY[0x24BDAC7A8](a1);
    v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (v4)
    {
      v10 = 0;
      if (v4 < 4)
        goto LABEL_9;
      if ((unint64_t)&v9[-v7] < 0x20)
        goto LABEL_9;
      v10 = v4 & 0xFFFFFFFFFFFFFFFCLL;
      v11 = (__int128 *)(v7 + 16);
      v12 = v9 + 16;
      v13 = v4 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v14 = *v11;
        *(v12 - 1) = *(v11 - 1);
        *v12 = v14;
        v11 += 2;
        v12 += 2;
        v13 -= 4;
      }
      while (v13);
      if (v4 != v10)
      {
LABEL_9:
        v15 = v4 - v10;
        v16 = 8 * v10;
        v17 = &v9[8 * v10];
        v18 = (uint64_t *)(v7 + v16);
        do
        {
          v19 = *v18++;
          *(_QWORD *)v17 = v19;
          v17 += 8;
          --v15;
        }
        while (v15);
      }
    }
    TupleTypeMetadata = swift_getTupleTypeMetadata();
  }
  v20 = *(unsigned __int8 *)(*(_QWORD *)(TupleTypeMetadata - 8) + 80);
  return sub_233B21660(a1, (uint64_t)v1 + ((v20 + 40) & ~v20), v4, v3, v5);
}

uint64_t sub_233B21B3C(_QWORD *a1)
{
  return sub_233B225D0(a1);
}

uint64_t decodeXPCValues<each A, B>(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t *a8@<X8>)
{
  uint64_t *v10;
  uint64_t TupleTypeMetadata;
  uint64_t *v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  __int128 *v17;
  _OWORD *v18;
  unint64_t v19;
  __int128 v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t result;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t (*v43)(char *, _QWORD);
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t *v58;
  int *v59;
  unint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t *v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char v80[32];
  _QWORD v81[5];
  uint64_t v82;

  v10 = (uint64_t *)(a5 & 0xFFFFFFFFFFFFFFFELL);
  v65 = a1;
  v78 = a6;
  v79 = a7;
  v76 = a4;
  v77 = a5;
  if (a3 == 1)
  {
    TupleTypeMetadata = swift_checkMetadataState();
  }
  else
  {
    MEMORY[0x24BDAC7A8](a1);
    v15 = (char *)&v65 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (a3)
    {
      v16 = 0;
      if (a3 < 4)
        goto LABEL_9;
      if ((unint64_t)(v15 - (char *)v10) < 0x20)
        goto LABEL_9;
      v16 = a3 & 0xFFFFFFFFFFFFFFFCLL;
      v17 = (__int128 *)(v10 + 2);
      v18 = v15 + 16;
      v19 = a3 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v20 = *v17;
        *(v18 - 1) = *(v17 - 1);
        *v18 = v20;
        v17 += 2;
        v18 += 2;
        v19 -= 4;
      }
      while (v19);
      if (v16 != a3)
      {
LABEL_9:
        v21 = a3 - v16;
        v22 = v16;
        v23 = &v15[8 * v16];
        v24 = &v10[v22];
        do
        {
          v25 = *v24++;
          *(_QWORD *)v23 = v25;
          v23 += 8;
          --v21;
        }
        while (v21);
      }
    }
    a8 = v13;
    TupleTypeMetadata = swift_getTupleTypeMetadata();
  }
  v26 = TupleTypeMetadata;
  v27 = sub_233B581E8();
  v70 = *(_QWORD *)(v27 - 8);
  MEMORY[0x24BDAC7A8](v27);
  v73 = (char *)&v65 - v28;
  v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_25424D908);
  v75 = &v65;
  MEMORY[0x24BDAC7A8](v29);
  v31 = (char *)&v65 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = v27;
  v32 = swift_allocBox();
  v33 = *(_QWORD *)(v26 - 8);
  v68 = v34;
  v69 = v33;
  v35 = *(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(v33 + 56);
  v72 = v26;
  v35(v34, 1, 1, v26);
  sub_233B57D74();
  swift_allocObject();
  v36 = sub_233B57D68();
  sub_233B582F0();
  v37 = sub_233B582FC();
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 48))(v31, 1, v37);
  if ((_DWORD)result == 1)
  {
    __break(1u);
    goto LABEL_27;
  }
  v74 = &v65;
  v66 = a8;
  v39 = (_QWORD *)swift_allocObject();
  v39[2] = a2;
  v39[3] = a3;
  v40 = v76;
  v39[4] = swift_allocateMetadataPack();
  v39[5] = swift_allocateMetadataPack();
  v41 = v78;
  v39[6] = swift_allocateWitnessTablePack();
  v67 = a3;
  v39[7] = swift_allocateWitnessTablePack();
  v39[8] = v32;
  v42 = swift_allocObject();
  *(_QWORD *)(v42 + 16) = sub_233B223C4;
  *(_QWORD *)(v42 + 24) = v39;
  v81[3] = __swift_instantiateConcreteTypeFromMangledName(&qword_25424D918);
  v81[0] = sub_233B2242C;
  v81[1] = v42;
  v77 = v32;
  swift_retain();
  v79 = v36;
  v43 = (uint64_t (*)(_QWORD, _QWORD))sub_233B57D5C();
  sub_233B212C4((uint64_t)v81, (uint64_t)v31);
  v44 = v43(v80, 0);
  if (!a2)
  {
LABEL_17:
    v54 = v68;
    swift_beginAccess();
    v55 = v73;
    (*(void (**)(char *, uint64_t, uint64_t))(v70 + 16))(v73, v54, v71);
    v56 = v72;
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v69 + 48))(v55, 1, v72);
    if ((_DWORD)result != 1)
    {
      v57 = v67;
      v58 = v66;
      if (v67)
      {
        v59 = (int *)(v56 + 32);
        v60 = v67;
        do
        {
          if (v57 == 1)
            v61 = 0;
          else
            v61 = *v59;
          v63 = *v10++;
          v62 = v63;
          v64 = *v58++;
          (*(void (**)(uint64_t, char *))(*(_QWORD *)(v62 - 8) + 32))(v64, &v55[v61]);
          v59 += 4;
          --v60;
        }
        while (v60);
      }
      swift_release();
      return swift_release();
    }
LABEL_27:
    __break(1u);
    return result;
  }
  v45 = v40 & 0xFFFFFFFFFFFFFFFELL;
  v46 = v41 & 0xFFFFFFFFFFFFFFFELL;
  v47 = v65;
  while (1)
  {
    MEMORY[0x24BDAC7A8](v44);
    (*(void (**)(char *))(v49 + 16))((char *)&v65 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0));
    v50 = sub_233B57E1C();
    v52 = v51;
    sub_233B2244C();
    v53 = v82;
    sub_233B57D50();
    if (v53)
      break;
    v82 = 0;
    v44 = sub_233B13CD8(v50, v52);
    v47 += 8;
    v46 += 8;
    v45 += 8;
    if (!--a2)
      goto LABEL_17;
  }
  swift_release();
  sub_233B13CD8(v50, v52);
  return swift_release();
}

uint64_t sub_233B22078(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v10;
  uint64_t TupleTypeMetadata;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  __int128 *v16;
  _OWORD *v17;
  unint64_t v18;
  __int128 v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t result;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  _QWORD v36[2];
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  _BYTE v43[24];
  uint64_t v44;
  uint64_t v45;

  v10 = a6 & 0xFFFFFFFFFFFFFFFELL;
  v45 = a4;
  v38 = a8;
  if (a4 == 1)
  {
    TupleTypeMetadata = swift_checkMetadataState();
  }
  else
  {
    MEMORY[0x24BDAC7A8](a1);
    v14 = (char *)v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (v12)
    {
      v15 = 0;
      if (v12 < 4)
        goto LABEL_9;
      if ((unint64_t)&v14[-v10] < 0x20)
        goto LABEL_9;
      v15 = v12 & 0xFFFFFFFFFFFFFFFCLL;
      v16 = (__int128 *)(v10 + 16);
      v17 = v14 + 16;
      v18 = v12 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v19 = *v16;
        *(v17 - 1) = *(v16 - 1);
        *v17 = v19;
        v16 += 2;
        v17 += 2;
        v18 -= 4;
      }
      while (v18);
      if (v15 != v12)
      {
LABEL_9:
        v20 = v12 - v15;
        v21 = 8 * v15;
        v22 = &v14[8 * v15];
        v23 = (uint64_t *)(v10 + v21);
        do
        {
          v24 = *v23++;
          *(_QWORD *)v22 = v24;
          v22 += 8;
          --v20;
        }
        while (v20);
      }
    }
    TupleTypeMetadata = swift_getTupleTypeMetadata();
  }
  v37 = TupleTypeMetadata;
  v25 = sub_233B581E8();
  v26 = *(_QWORD *)(v25 - 8);
  MEMORY[0x24BDAC7A8](v25);
  v28 = (char *)v36 - v27;
  v42 = swift_projectBox();
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  result = sub_233B585E4();
  if (!v8)
  {
    v39 = v26;
    v40 = v25;
    v41 = v28;
    v36[1] = v36;
    if (v45)
    {
      v30 = 0;
      v38 &= ~1uLL;
      v31 = v37 + 16;
      do
      {
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v43, v44);
        sub_233B584B8();
        ++v30;
        v31 += 16;
        v33 = v39;
        v32 = v40;
        v34 = v42;
      }
      while (v45 != v30);
    }
    else
    {
      v33 = v39;
      v32 = v40;
      v34 = v42;
    }
    v35 = v41;
    (*(void (**)(char *, _QWORD, uint64_t))(*(_QWORD *)(v37 - 8) + 56))(v41, 0, 1);
    swift_beginAccess();
    (*(void (**)(uint64_t, char *, uint64_t))(v33 + 40))(v34, v35, v32);
    return __swift_destroy_boxed_opaque_existential_0((uint64_t)v43);
  }
  return result;
}

uint64_t sub_233B223A0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_233B223C4(_QWORD *a1)
{
  uint64_t *v1;

  return sub_233B22078(a1, v1[8], v1[2], v1[3], v1[4], v1[5], v1[6], v1[7]);
}

uint64_t sub_233B223E8(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_233B22408()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_233B2242C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

unint64_t sub_233B2244C()
{
  unint64_t result;

  result = qword_25424D670;
  if (!qword_25424D670)
  {
    result = MEMORY[0x23493D400](&unk_233B5AF10, &type metadata for XPCDecoder);
    atomic_store(result, (unint64_t *)&qword_25424D670);
  }
  return result;
}

ValueMetadata *type metadata accessor for XPCDecoder()
{
  return &type metadata for XPCDecoder;
}

_QWORD *initializeBufferWithCopyOfBuffer for XPCEncoder(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  return a1;
}

uint64_t destroy for XPCEncoder()
{
  return swift_release();
}

_QWORD *assignWithCopy for XPCEncoder(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *assignWithTake for XPCEncoder(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for XPCEncoder(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for XPCEncoder(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for XPCEncoder()
{
  return &type metadata for XPCEncoder;
}

uint64_t sub_233B225D0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  unint64_t v9;
  char v10;
  void (*v11)(_QWORD *);
  void (*v12)(_QWORD *);
  __int128 v13;
  __int128 v14;
  __int128 v15;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_25424D908);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v5 = sub_233B585FC();
  sub_233B582F0();
  v6 = sub_233B582FC();
  v7 = *(_QWORD *)(v6 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48))(v4, 1, v6);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    if (*(_QWORD *)(v5 + 16) && (v9 = sub_233B035C8((uint64_t)v4), (v10 & 1) != 0))
    {
      sub_233B03518(*(_QWORD *)(v5 + 56) + 32 * v9, (uint64_t)&v13);
    }
    else
    {
      v13 = 0u;
      v14 = 0u;
    }
    result = swift_bridgeObjectRelease();
    if (*((_QWORD *)&v14 + 1))
    {
      sub_233B03554(&v13, &v15);
      __swift_instantiateConcreteTypeFromMangledName(&qword_25424D918);
      swift_dynamicCast();
      v11 = v12;
      (*(void (**)(char *, uint64_t))(v7 + 8))(v4, v6);
      v11(a1);
      swift_release();
      return __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
    }
  }
  __break(1u);
  return result;
}

uint64_t DDMDeclarationStatusRequest.declarationKey.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t DDMDeclarationStatusRequest.init(declarationKey:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t DDMDeclarationStatusRequest.request()()
{
  _OWORD *v0;
  uint64_t v1;

  *(_OWORD *)(v1 + 40) = *v0;
  return swift_task_switch();
}

uint64_t sub_233B227C0()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t);

  if (qword_25424D4B0 != -1)
    swift_once();
  v1 = v0[6];
  v0[2] = v0[5];
  v0[4] = v0 + 2;
  v0[3] = v1;
  v4 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_256112FB0 + dword_256112FB0);
  swift_bridgeObjectRetain();
  v2 = (_QWORD *)swift_task_alloc();
  v0[7] = v2;
  *v2 = v0;
  v2[1] = sub_233B22880;
  return v4((uint64_t)(v0 + 4), (uint64_t)sub_233B2293C, 0);
}

uint64_t sub_233B22880(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(v4 + 64) = v1;
  swift_task_dealloc();
  if (v1)
    return swift_task_switch();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

uint64_t sub_233B22908()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_233B2293C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_233B229F8(a1, a2, a3, a4, a5, (uint64_t)&block_descriptor_36);
}

uint64_t *DDMDeclarationStatusRequest.request()()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  _QWORD v5[2];
  uint64_t *v6;

  v2 = *v0;
  v1 = v0[1];
  if (qword_25424D4B0 != -1)
    swift_once();
  v5[0] = v2;
  v5[1] = v1;
  v6 = v5;
  swift_bridgeObjectRetain();
  v3 = sub_233B22AB4(&v6, (void (*)(uint64_t, uint64_t, unint64_t, uint64_t (*)(uint64_t, uint64_t), uint64_t))sub_233B229EC, 0);
  swift_bridgeObjectRelease();
  return v3;
}

void sub_233B229EC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_233B229F8(a1, a2, a3, a4, a5, (uint64_t)&block_descriptor_33);
}

void sub_233B229F8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v10;
  void *v11;
  _QWORD v12[6];

  v10 = (void *)sub_233B57E04();
  v12[4] = a4;
  v12[5] = a5;
  v12[0] = MEMORY[0x24BDAC760];
  v12[1] = 1107296256;
  v12[2] = sub_233B42240;
  v12[3] = a6;
  v11 = _Block_copy(v12);
  swift_retain();
  swift_release();
  objc_msgSend(a1, sel_getDeclarationStatus_reply_, v10, v11);
  _Block_release(v11);

}

uint64_t *sub_233B22AB4(uint64_t **a1, void (*a2)(uint64_t, uint64_t, unint64_t, uint64_t (*)(uint64_t a1, uint64_t a2), uint64_t), uint64_t *a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v8;
  char v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _BYTE *v18;
  _BYTE *v19;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  int v24;
  _BYTE *v25;
  _BYTE *v26;
  uint64_t *v27;
  void (*v28)(uint64_t, uint64_t, unint64_t, uint64_t (*)(uint64_t, uint64_t), uint64_t);
  uint64_t v29;
  uint64_t (*aBlock)(_QWORD *);
  uint64_t v31;
  void (*v32)(uint64_t, void *);
  ValueMetadata *v33;
  unint64_t v34;
  uint64_t v35;
  _BYTE v36[32];
  uint64_t v37;

  v8 = *v3;
  v33 = &type metadata for FeatureFlag;
  v34 = sub_233B139EC();
  v9 = sub_233B57E88();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)&aBlock);
  if ((v9 & 1) == 0)
  {
    sub_233B13A30();
    swift_allocError();
    *v18 = 0;
    swift_willThrow();
    return v3;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_2561134A8);
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = 0;
  *(_BYTE *)(v10 + 24) = -1;
  v11 = (void *)v3[2];
  v34 = (unint64_t)sub_233B2506C;
  v35 = v10;
  aBlock = (uint64_t (*)(_QWORD *))MEMORY[0x24BDAC760];
  v31 = 1107296256;
  v32 = sub_233B31DD0;
  v33 = (ValueMetadata *)&block_descriptor_26_0;
  v12 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  v3 = (uint64_t *)objc_msgSend(v11, sel_synchronousRemoteObjectProxyWithErrorHandler_, v12);
  _Block_release(v12);
  sub_233B58218();
  swift_unknownObjectRelease();
  sub_233B03518((uint64_t)v36, (uint64_t)&aBlock);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25424D490);
  if ((swift_dynamicCast() & 1) == 0)
  {
    sub_233B13A30();
    swift_allocError();
    *v19 = 0;
    swift_willThrow();
    swift_release();
LABEL_7:
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v36);
    return v3;
  }
  v27 = a3;
  v28 = a2;
  v29 = v37;
  sub_233B14878();
  sub_233B14834();
  v13 = **a1;
  v14 = (*a1)[1];
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = v13;
  *(_QWORD *)(v15 + 24) = v14;
  sub_233B57D98();
  swift_allocObject();
  swift_bridgeObjectRetain_n();
  v3 = (uint64_t *)sub_233B57D8C();
  aBlock = sub_233B25310;
  v31 = v15;
  sub_233B13C48();
  v16 = sub_233B57D80();
  if (!v4)
  {
    v21 = v16;
    v22 = v17;
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    v23 = swift_allocObject();
    *(_QWORD *)(v23 + 16) = v10;
    *(_QWORD *)(v23 + 24) = v8;
    swift_retain();
    v3 = v27;
    v28(v29, v21, v22, sub_233B25328, v23);
    swift_release();
    swift_beginAccess();
    v24 = *(unsigned __int8 *)(v10 + 24);
    if (v24 == 255)
    {
      sub_233B13A30();
      swift_allocError();
      *v25 = 0;
      swift_willThrow();
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v36);
      swift_release();
      sub_233B13CD8(v21, v22);
      swift_unknownObjectRelease();
      return v3;
    }
    v3 = *(uint64_t **)(v10 + 16);
    if ((v24 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v36);
      swift_release();
      sub_233B13CD8(v21, v22);
      swift_unknownObjectRelease();
      return v3;
    }
    LOBYTE(v37) = *(_QWORD *)(v10 + 16);
    sub_233B13A30();
    swift_willThrowTypedImpl();
    swift_allocError();
    *v26 = (_BYTE)v3;
    sub_233B13CD8(v21, v22);
    swift_release();
    swift_unknownObjectRelease();
    goto LABEL_7;
  }
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v36);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  return v3;
}

uint64_t sub_233B22EF0(uint64_t **a1, void (*a2)(uint64_t, uint64_t, unint64_t, uint64_t (*)(), uint64_t))
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v6;
  char v7;
  uint64_t v8;
  void *v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _BYTE *v17;
  _BYTE *v18;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  _BYTE *v24;
  _BYTE *v25;
  void (*v26)(uint64_t, uint64_t, unint64_t, uint64_t (*)(), uint64_t);
  uint64_t v27;
  uint64_t (*aBlock)(_QWORD *);
  uint64_t v29;
  void (*v30)(uint64_t, void *);
  ValueMetadata *v31;
  unint64_t v32;
  uint64_t v33;
  _BYTE v34[32];
  uint64_t v35;

  v6 = *v2;
  v31 = &type metadata for FeatureFlag;
  v32 = sub_233B139EC();
  v7 = sub_233B57E88();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)&aBlock);
  if ((v7 & 1) == 0)
  {
    sub_233B13A30();
    swift_allocError();
    *v17 = 0;
    swift_willThrow();
    return 0;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_256113490);
  v8 = swift_allocObject();
  *(_WORD *)(v8 + 16) = -256;
  v9 = (void *)v2[2];
  v32 = (unint64_t)sub_233B24CFC;
  v33 = v8;
  aBlock = (uint64_t (*)(_QWORD *))MEMORY[0x24BDAC760];
  v29 = 1107296256;
  v30 = sub_233B31DD0;
  v31 = (ValueMetadata *)&block_descriptor_19;
  v10 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  v11 = objc_msgSend(v9, sel_synchronousRemoteObjectProxyWithErrorHandler_, v10);
  _Block_release(v10);
  sub_233B58218();
  swift_unknownObjectRelease();
  sub_233B03518((uint64_t)v34, (uint64_t)&aBlock);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25424D490);
  if ((swift_dynamicCast() & 1) == 0)
  {
    sub_233B13A30();
    swift_allocError();
    *v18 = 0;
    swift_willThrow();
    swift_release();
LABEL_7:
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v34);
    return 0;
  }
  v26 = a2;
  v27 = v35;
  v12 = **a1;
  v13 = (*a1)[1];
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = v12;
  *(_QWORD *)(v14 + 24) = v13;
  sub_233B57D98();
  swift_allocObject();
  swift_bridgeObjectRetain_n();
  sub_233B57D8C();
  aBlock = sub_233B252F8;
  v29 = v14;
  sub_233B13C48();
  v15 = sub_233B57D80();
  if (v3)
  {
    swift_release();
    swift_release();
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v34);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_release();
    return 0;
  }
  v20 = v16;
  v21 = v15;
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  v22 = swift_allocObject();
  *(_QWORD *)(v22 + 16) = v8;
  *(_QWORD *)(v22 + 24) = v6;
  swift_retain();
  v26(v27, v21, v20, sub_233B253A8, v22);
  swift_release();
  swift_beginAccess();
  v23 = *(unsigned __int16 *)(v8 + 16);
  if (v23 >> 8 > 0xFE)
  {
    sub_233B13A30();
    swift_allocError();
    *v24 = 0;
    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v34);
    swift_release();
    sub_233B13CD8(v21, v20);
    swift_unknownObjectRelease();
    return 0;
  }
  if ((v23 & 0x100) != 0)
  {
    LOBYTE(v35) = *(_WORD *)(v8 + 16);
    sub_233B13A30();
    swift_willThrowTypedImpl();
    swift_allocError();
    *v25 = v23;
    sub_233B13CD8(v21, v20);
    swift_release();
    swift_unknownObjectRelease();
    goto LABEL_7;
  }
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v34);
  swift_release();
  sub_233B13CD8(v21, v20);
  swift_unknownObjectRelease();
  return v23 & 1;
}

uint64_t *sub_233B23324(uint64_t a1, void (*a2)(uint64_t, uint64_t, unint64_t, uint64_t (*)(uint64_t a1, uint64_t a2), uint64_t), uint64_t *a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v7;
  char v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  _BYTE *v16;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  _BYTE *v25;
  _BYTE *v26;
  void (*v27)(uint64_t, uint64_t, unint64_t, uint64_t (*)(uint64_t, uint64_t), uint64_t);
  uint64_t (*aBlock)(_QWORD *);
  uint64_t v29;
  void (*v30)(uint64_t, void *);
  ValueMetadata *v31;
  unint64_t v32;
  uint64_t v33;
  _BYTE v34[32];
  uint64_t v35;

  v7 = *v3;
  v31 = &type metadata for FeatureFlag;
  v32 = sub_233B139EC();
  v8 = sub_233B57E88();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)&aBlock);
  if ((v8 & 1) == 0)
  {
    sub_233B13A30();
    swift_allocError();
    *v15 = 0;
    swift_willThrow();
    return v3;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_25424CF08);
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = 0;
  *(_BYTE *)(v9 + 24) = -1;
  v10 = (void *)v3[2];
  v32 = (unint64_t)sub_233B2506C;
  v33 = v9;
  aBlock = (uint64_t (*)(_QWORD *))MEMORY[0x24BDAC760];
  v29 = 1107296256;
  v30 = sub_233B31DD0;
  v31 = (ValueMetadata *)&block_descriptor_7_0;
  v11 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  v3 = (uint64_t *)objc_msgSend(v10, sel_synchronousRemoteObjectProxyWithErrorHandler_, v11);
  _Block_release(v11);
  sub_233B58218();
  swift_unknownObjectRelease();
  sub_233B03518((uint64_t)v34, (uint64_t)&aBlock);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25424D490);
  if ((swift_dynamicCast() & 1) == 0)
  {
    sub_233B13A30();
    swift_allocError();
    *v16 = 0;
    swift_willThrow();
    swift_release();
LABEL_7:
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v34);
    return v3;
  }
  v27 = a2;
  v12 = v35;
  sub_233B57D98();
  swift_allocObject();
  v3 = (uint64_t *)sub_233B57D8C();
  aBlock = sub_233B13D90;
  v29 = 0;
  sub_233B13C48();
  v13 = sub_233B57D80();
  if (!v4)
  {
    v18 = v13;
    v19 = v14;
    swift_release();
    v20 = swift_allocObject();
    v21 = v12;
    v22 = v20;
    *(_QWORD *)(v20 + 16) = v9;
    *(_QWORD *)(v20 + 24) = v7;
    v23 = v21;
    swift_retain();
    v3 = a3;
    v27(v23, v18, v19, sub_233B250AC, v22);
    swift_release();
    swift_beginAccess();
    v24 = *(unsigned __int8 *)(v9 + 24);
    if (v24 == 255)
    {
      sub_233B13A30();
      swift_allocError();
      *v25 = 0;
      swift_willThrow();
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v34);
      swift_release();
      sub_233B13CD8(v18, v19);
      swift_unknownObjectRelease();
      return v3;
    }
    v3 = *(uint64_t **)(v9 + 16);
    if ((v24 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v34);
      swift_release();
      sub_233B13CD8(v18, v19);
      swift_unknownObjectRelease();
      return v3;
    }
    LOBYTE(v35) = *(_QWORD *)(v9 + 16);
    sub_233B13A30();
    swift_willThrowTypedImpl();
    swift_allocError();
    *v26 = (_BYTE)v3;
    sub_233B13CD8(v18, v19);
    swift_release();
    swift_unknownObjectRelease();
    goto LABEL_7;
  }
  swift_release();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v34);
  swift_unknownObjectRelease();
  swift_release();
  return v3;
}

uint64_t *sub_233B23708(uint64_t **a1, void (*a2)(uint64_t, uint64_t, unint64_t, uint64_t (*)(uint64_t a1, unint64_t a2), uint64_t), uint64_t *a3)
{
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t **v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t);
  char *v20;
  void (*v21)(char *, uint64_t *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _BYTE *v29;
  _BYTE *v30;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  _BYTE *v37;
  _BYTE *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t **v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t *v47;
  void (*v48)(uint64_t, uint64_t, unint64_t, uint64_t (*)(uint64_t, unint64_t), uint64_t);
  uint64_t v49;
  uint64_t (*aBlock)(_QWORD *);
  uint64_t v51;
  void (*v52)(uint64_t, void *);
  ValueMetadata *v53;
  unint64_t v54;
  uint64_t v55;
  _BYTE v56[40];
  uint64_t v57;

  v48 = a2;
  v47 = a3;
  v5 = *v3;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256112F08);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v9 = MEMORY[0x24BDAC7A8](v6);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v39 - v10;
  v53 = &type metadata for FeatureFlag;
  v54 = sub_233B139EC();
  v12 = sub_233B57E88();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)&aBlock);
  if ((v12 & 1) == 0)
  {
    sub_233B13A30();
    swift_allocError();
    *v29 = 0;
    swift_willThrow();
    return v3;
  }
  v42 = a1;
  v43 = v8;
  v44 = (uint64_t *)((char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v45 = v7;
  v46 = (uint64_t *)v11;
  v41 = v5;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256113498);
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = 0;
  *(_BYTE *)(v13 + 24) = -1;
  v14 = (void *)v3[2];
  v54 = (unint64_t)sub_233B250D4;
  v55 = v13;
  aBlock = (uint64_t (*)(_QWORD *))MEMORY[0x24BDAC760];
  v51 = 1107296256;
  v52 = sub_233B31DD0;
  v53 = (ValueMetadata *)&block_descriptor_12;
  v15 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  v3 = (uint64_t *)objc_msgSend(v14, sel_synchronousRemoteObjectProxyWithErrorHandler_, v15);
  _Block_release(v15);
  sub_233B58218();
  swift_unknownObjectRelease();
  sub_233B03518((uint64_t)v56, (uint64_t)&aBlock);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25424D490);
  if ((swift_dynamicCast() & 1) == 0)
  {
    sub_233B13A30();
    swift_allocError();
    *v30 = 0;
    swift_willThrow();
    swift_release();
LABEL_7:
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v56);
    return v3;
  }
  v39 = v57;
  sub_233B250DC(&qword_2561134A0, (uint64_t (*)(void))sub_233B13A74, MEMORY[0x24BEE12D0]);
  sub_233B250DC(&qword_256112F00, (uint64_t (*)(void))sub_233B13AB8, MEMORY[0x24BEE12A0]);
  v16 = v42;
  v40 = **v42;
  v17 = v46;
  *v46 = v40;
  v18 = sub_233B57E40();
  v19 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58];
  sub_233B08530(&qword_25424D478, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAA8]);
  sub_233B08530(&qword_25424D470, v19, MEMORY[0x24BDCEA70]);
  v20 = (char *)v17 + *(int *)(v6 + 48);
  v21 = *(void (**)(char *, uint64_t *, uint64_t))(*(_QWORD *)(v18 - 8) + 16);
  v21(v20, v16[1], v18);
  v22 = *v17;
  v23 = (uint64_t)v44;
  *v44 = v22;
  v21((char *)(v23 + *(int *)(v6 + 48)), (uint64_t *)v20, v18);
  v24 = (*(unsigned __int8 *)(v45 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80);
  v25 = swift_allocObject();
  sub_233B251D4(v23, v25 + v24);
  sub_233B57D98();
  swift_allocObject();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v3 = (uint64_t *)sub_233B57D8C();
  aBlock = sub_233B2521C;
  v51 = v25;
  sub_233B13C48();
  v26 = v49;
  v27 = sub_233B57D80();
  if (!v26)
  {
    v32 = v27;
    v33 = v28;
    swift_release();
    swift_release();
    sub_233B25268((uint64_t)v46);
    v34 = swift_allocObject();
    v35 = v41;
    *(_QWORD *)(v34 + 16) = v13;
    *(_QWORD *)(v34 + 24) = v35;
    swift_retain();
    v3 = v47;
    v48(v39, v32, v33, sub_233B252CC, v34);
    swift_release();
    swift_beginAccess();
    v36 = *(unsigned __int8 *)(v13 + 24);
    if (v36 == 255)
    {
      sub_233B13A30();
      swift_allocError();
      *v37 = 0;
      swift_willThrow();
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v56);
      swift_release();
      sub_233B13CD8(v32, v33);
      swift_unknownObjectRelease();
      return v3;
    }
    v3 = *(uint64_t **)(v13 + 16);
    if ((v36 & 1) == 0)
    {
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v56);
      swift_release();
      sub_233B13CD8(v32, v33);
      swift_unknownObjectRelease();
      return v3;
    }
    LOBYTE(v57) = *(_QWORD *)(v13 + 16);
    sub_233B13A30();
    swift_willThrowTypedImpl();
    swift_allocError();
    *v38 = (_BYTE)v3;
    sub_233B13CD8(v32, v33);
    swift_release();
    swift_unknownObjectRelease();
    goto LABEL_7;
  }
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v56);
  swift_unknownObjectRelease();
  swift_release();
  sub_233B25268((uint64_t)v46);
  return v3;
}

uint64_t sub_233B23C80(uint64_t *a1, void (*a2)(uint64_t, uint64_t, unint64_t, uint64_t (*)(uint64_t a1, unint64_t a2), uint64_t), uint64_t a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t updated;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char v13;
  uint64_t v14;
  void *v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _BYTE *v26;
  _BYTE *v27;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  _BYTE *v35;
  _BYTE *v36;
  uint64_t v37;
  void (*v38)(uint64_t, uint64_t, unint64_t, uint64_t (*)(uint64_t, unint64_t), uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t (*aBlock)(_QWORD *);
  uint64_t v46;
  void (*v47)(uint64_t, void *);
  ValueMetadata *v48;
  unint64_t v49;
  uint64_t v50;
  _BYTE v51[32];
  uint64_t v52;

  v43 = a3;
  v6 = *v3;
  updated = type metadata accessor for DDMAppOrUpdateManagedAppRequest();
  v8 = *(_QWORD *)(updated - 8);
  v9 = *(_QWORD *)(v8 + 64);
  v10 = MEMORY[0x24BDAC7A8](updated);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v37 - v11;
  v48 = &type metadata for FeatureFlag;
  v49 = sub_233B139EC();
  v13 = sub_233B57E88();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)&aBlock);
  if ((v13 & 1) == 0)
  {
    sub_233B13A30();
    swift_allocError();
    *v26 = 0;
    swift_willThrow();
    return 0;
  }
  v39 = v9;
  v40 = (uint64_t)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = v8;
  v42 = v12;
  v37 = v6;
  v38 = a2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256113490);
  v14 = swift_allocObject();
  *(_WORD *)(v14 + 16) = -256;
  v15 = (void *)v3[2];
  v49 = (unint64_t)sub_233B24CFC;
  v50 = v14;
  aBlock = (uint64_t (*)(_QWORD *))MEMORY[0x24BDAC760];
  v46 = 1107296256;
  v47 = sub_233B31DD0;
  v48 = (ValueMetadata *)&block_descriptor_3;
  v16 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  v17 = objc_msgSend(v15, sel_synchronousRemoteObjectProxyWithErrorHandler_, v16);
  _Block_release(v16);
  sub_233B58218();
  swift_unknownObjectRelease();
  sub_233B03518((uint64_t)v51, (uint64_t)&aBlock);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25424D490);
  if ((swift_dynamicCast() & 1) == 0)
  {
    sub_233B13A30();
    swift_allocError();
    *v27 = 0;
    swift_willThrow();
    swift_release();
LABEL_7:
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v51);
    return 0;
  }
  v18 = v52;
  sub_233B08530(&qword_256112EC0, (uint64_t (*)(uint64_t))type metadata accessor for DDMAppOrUpdateManagedAppRequest, (uint64_t)&protocol conformance descriptor for DDMAppOrUpdateManagedAppRequest);
  sub_233B08530(&qword_256112EB0, (uint64_t (*)(uint64_t))type metadata accessor for DDMAppOrUpdateManagedAppRequest, (uint64_t)&protocol conformance descriptor for DDMAppOrUpdateManagedAppRequest);
  v19 = (uint64_t)v42;
  sub_233B24D04(*a1, (uint64_t)v42);
  v20 = v40;
  sub_233B24D04(v19, v40);
  v21 = (*(unsigned __int8 *)(v41 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80);
  v22 = swift_allocObject();
  sub_233B24E34(v20, v22 + v21);
  sub_233B57D98();
  swift_allocObject();
  sub_233B57D8C();
  aBlock = sub_233B24E78;
  v46 = v22;
  sub_233B13C48();
  v23 = v44;
  v24 = sub_233B57D80();
  if (!v23)
  {
    v29 = v24;
    v30 = v25;
    swift_release();
    swift_release();
    sub_233B24EC0(v19);
    v31 = v18;
    v32 = swift_allocObject();
    v33 = v37;
    *(_QWORD *)(v32 + 16) = v14;
    *(_QWORD *)(v32 + 24) = v33;
    swift_retain();
    v38(v31, v29, v30, sub_233B25054, v32);
    swift_release();
    swift_beginAccess();
    v34 = *(unsigned __int16 *)(v14 + 16);
    if (v34 >> 8 > 0xFE)
    {
      sub_233B13A30();
      swift_allocError();
      *v35 = 0;
      swift_willThrow();
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v51);
      swift_release();
      sub_233B13CD8(v29, v30);
      swift_unknownObjectRelease();
      return 0;
    }
    if ((v34 & 0x100) == 0)
    {
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v51);
      swift_release();
      sub_233B13CD8(v29, v30);
      swift_unknownObjectRelease();
      return v34 & 1;
    }
    LOBYTE(v52) = *(_WORD *)(v14 + 16);
    sub_233B13A30();
    swift_willThrowTypedImpl();
    swift_allocError();
    *v36 = v34;
    sub_233B13CD8(v29, v30);
    swift_release();
    swift_unknownObjectRelease();
    goto LABEL_7;
  }
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v51);
  swift_unknownObjectRelease();
  swift_release();
  sub_233B24EC0(v19);
  return 0;
}

uint64_t sub_233B24160()
{
  return 0x746172616C636564;
}

uint64_t sub_233B24184@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x746172616C636564 && a2 == 0xEE0079654B6E6F69)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_233B584D0();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_233B2423C()
{
  sub_233B24594();
  return sub_233B58638();
}

uint64_t sub_233B24264()
{
  sub_233B24594();
  return sub_233B58644();
}

uint64_t DDMDeclarationStatusRequest.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_256113460);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_233B24594();
  sub_233B5862C();
  sub_233B5841C();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t DDMDeclarationStatusRequest.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256113470);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_233B24594();
  sub_233B58608();
  if (!v2)
  {
    v9 = sub_233B58380();
    v11 = v10;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v9;
    a2[1] = v11;
  }
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
}

uint64_t sub_233B24494@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return DDMDeclarationStatusRequest.init(from:)(a1, a2);
}

uint64_t sub_233B244A8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_256113460);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_233B24594();
  sub_233B5862C();
  sub_233B5841C();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

unint64_t sub_233B24594()
{
  unint64_t result;

  result = qword_256113468;
  if (!qword_256113468)
  {
    result = MEMORY[0x23493D400](&unk_233B5B0A0, &type metadata for DDMDeclarationStatusRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256113468);
  }
  return result;
}

ValueMetadata *type metadata accessor for DDMDeclarationStatusRequest()
{
  return &type metadata for DDMDeclarationStatusRequest;
}

uint64_t storeEnumTagSinglePayload for DDMDeclarationStatusRequest.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_233B24628 + 4 * byte_233B5AF60[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_233B24648 + 4 * byte_233B5AF65[v4]))();
}

_BYTE *sub_233B24628(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_233B24648(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_233B24650(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_233B24658(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_233B24660(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_233B24668(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for DDMDeclarationStatusRequest.CodingKeys()
{
  return &type metadata for DDMDeclarationStatusRequest.CodingKeys;
}

unint64_t sub_233B24688()
{
  unint64_t result;

  result = qword_256113478;
  if (!qword_256113478)
  {
    result = MEMORY[0x23493D400](&unk_233B5B078, &type metadata for DDMDeclarationStatusRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256113478);
  }
  return result;
}

unint64_t sub_233B246D0()
{
  unint64_t result;

  result = qword_256113480;
  if (!qword_256113480)
  {
    result = MEMORY[0x23493D400](&unk_233B5AFE8, &type metadata for DDMDeclarationStatusRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256113480);
  }
  return result;
}

unint64_t sub_233B24718()
{
  unint64_t result;

  result = qword_256113488;
  if (!qword_256113488)
  {
    result = MEMORY[0x23493D400](&unk_233B5B010, &type metadata for DDMDeclarationStatusRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256113488);
  }
  return result;
}

uint64_t sub_233B2475C(void *a1, uint64_t a2)
{
  uint64_t v4;
  id v5;
  id v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  _QWORD *v10;
  id v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  if (qword_25424D3D0 != -1)
    swift_once();
  v4 = sub_233B57EC4();
  __swift_project_value_buffer(v4, (uint64_t)qword_25424D3B8);
  v5 = a1;
  v6 = a1;
  v7 = sub_233B57EAC();
  v8 = sub_233B581C4();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc();
    v10 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v9 = 138543362;
    v11 = a1;
    v14 = _swift_stdlib_bridgeErrorToNSError();
    sub_233B581F4();
    *v10 = v14;

    _os_log_impl(&dword_233B00000, v7, v8, "Error fetching synchronous remote object proxy: %{public}@", v9, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&qword_25424D288);
    swift_arrayDestroy();
    MEMORY[0x23493D4CC](v10, -1, -1);
    MEMORY[0x23493D4CC](v9, -1, -1);
  }
  else
  {

  }
  result = swift_beginAccess();
  if (*(unsigned __int8 *)(a2 + 24) == 255)
  {
    v13 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 16) = 0;
    *(_BYTE *)(a2 + 24) = 1;
    return sub_233B25350(v13, 0xFFu);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_233B24944(void *a1, uint64_t a2)
{
  uint64_t v4;
  id v5;
  id v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  _QWORD *v10;
  id v11;
  uint64_t result;
  uint64_t v13;

  if (qword_25424D3D0 != -1)
    swift_once();
  v4 = sub_233B57EC4();
  __swift_project_value_buffer(v4, (uint64_t)qword_25424D3B8);
  v5 = a1;
  v6 = a1;
  v7 = sub_233B57EAC();
  v8 = sub_233B581C4();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc();
    v10 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v9 = 138543362;
    v11 = a1;
    v13 = _swift_stdlib_bridgeErrorToNSError();
    sub_233B581F4();
    *v10 = v13;

    _os_log_impl(&dword_233B00000, v7, v8, "Error fetching synchronous remote object proxy: %{public}@", v9, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&qword_25424D288);
    swift_arrayDestroy();
    MEMORY[0x23493D4CC](v10, -1, -1);
    MEMORY[0x23493D4CC](v9, -1, -1);
  }
  else
  {

  }
  result = swift_beginAccess();
  if (*(unsigned __int8 *)(a2 + 24) == 255)
  {
    *(_QWORD *)(a2 + 16) = 0;
    *(_BYTE *)(a2 + 24) = 1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_233B24B20(void *a1, uint64_t a2)
{
  uint64_t v4;
  id v5;
  id v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  _QWORD *v10;
  id v11;
  uint64_t result;
  uint64_t v13;

  if (qword_25424D3D0 != -1)
    swift_once();
  v4 = sub_233B57EC4();
  __swift_project_value_buffer(v4, (uint64_t)qword_25424D3B8);
  v5 = a1;
  v6 = a1;
  v7 = sub_233B57EAC();
  v8 = sub_233B581C4();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc();
    v10 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v9 = 138543362;
    v11 = a1;
    v13 = _swift_stdlib_bridgeErrorToNSError();
    sub_233B581F4();
    *v10 = v13;

    _os_log_impl(&dword_233B00000, v7, v8, "Error fetching synchronous remote object proxy: %{public}@", v9, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&qword_25424D288);
    swift_arrayDestroy();
    MEMORY[0x23493D4CC](v10, -1, -1);
    MEMORY[0x23493D4CC](v9, -1, -1);
  }
  else
  {

  }
  result = swift_beginAccess();
  if (*(unsigned __int8 *)(a2 + 17) == 255)
    *(_WORD *)(a2 + 16) = 256;
  else
    __break(1u);
  return result;
}

uint64_t sub_233B24CFC(void *a1)
{
  uint64_t v1;

  return sub_233B24B20(a1, v1);
}

uint64_t sub_233B24D04(uint64_t a1, uint64_t a2)
{
  uint64_t updated;

  updated = type metadata accessor for DDMAppOrUpdateManagedAppRequest();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(updated - 8) + 16))(a2, a1, updated);
  return a2;
}

uint64_t sub_233B24D48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for DDMAppOrUpdateManagedAppRequest() - 8) + 80);
  v2 = v0 + ((v1 + 16) & ~v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v3 = *(_QWORD *)(v2 + 64);
  if (v3 >> 60 != 15)
    sub_233B13CD8(*(_QWORD *)(v2 + 56), v3);
  v4 = *(int *)(type metadata accessor for ManagedAppDeclaration(0) + 36);
  v5 = v2 + v4 + *(int *)(type metadata accessor for ManagedAppDeclaration.InstallBehavior(0) + 24);
  type metadata accessor for ManagedAppDeclaration.InstallBehavior.PurchaseMethodEnum(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v6 = sub_233B57DF8();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  }
  else
  {
    sub_233B04B94(*(_QWORD *)v5, *(_QWORD *)(v5 + 8), *(_BYTE *)(v5 + 16));
  }
  return swift_deallocObject();
}

uint64_t sub_233B24E34(uint64_t a1, uint64_t a2)
{
  uint64_t updated;

  updated = type metadata accessor for DDMAppOrUpdateManagedAppRequest();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(updated - 8) + 32))(a2, a1, updated);
  return a2;
}

uint64_t sub_233B24E78(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for DDMAppOrUpdateManagedAppRequest() - 8) + 80);
  return sub_233B0D18C(a1, v1 + ((v3 + 16) & ~v3));
}

uint64_t sub_233B24EC0(uint64_t a1)
{
  uint64_t updated;

  updated = type metadata accessor for DDMAppOrUpdateManagedAppRequest();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(updated - 8) + 8))(a1, updated);
  return a1;
}

uint64_t sub_233B24EFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr), uint64_t (*a6)(uint64_t, uint64_t))
{
  uint64_t v8;
  char v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  char v13;

  a5(&v12);
  v8 = v12;
  v9 = v13;
  result = swift_beginAccess();
  if (*(unsigned __int8 *)(a3 + 24) == 255)
  {
    v11 = *(_QWORD *)(a3 + 16);
    *(_QWORD *)(a3 + 16) = v8;
    *(_BYTE *)(a3 + 24) = v9;
    return a6(v11, 255);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_233B24F74(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4;
  char v5;
  uint64_t result;
  uint64_t v7;
  char v8;

  sub_233B1357C(a1, a2, (uint64_t)&v7);
  v4 = v7;
  v5 = v8;
  result = swift_beginAccess();
  if (*(unsigned __int8 *)(a3 + 24) == 255)
  {
    *(_QWORD *)(a3 + 16) = v4;
    *(_BYTE *)(a3 + 24) = v5;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_233B24FDC(uint64_t a1, unint64_t a2, uint64_t a3)
{
  __int16 v4;
  int v5;
  uint64_t result;
  __int16 v7;
  _BYTE v8[2];

  sub_233B13064(a1, a2, v8);
  v4 = v8[0];
  v5 = v8[1];
  result = swift_beginAccess();
  if (*(unsigned __int8 *)(a3 + 17) == 255)
  {
    if (v5)
      v7 = 256;
    else
      v7 = 0;
    *(_WORD *)(a3 + 16) = v7 | v4;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_233B25054(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  return sub_233B24FDC(a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t sub_233B2506C(void *a1)
{
  uint64_t v1;

  return sub_233B2475C(a1, v1);
}

uint64_t sub_233B25074(_QWORD *a1, uint64_t *a2)
{
  return sub_233B0C724(a1, *a2, a2[1]);
}

uint64_t sub_233B25090(_QWORD *a1, uint64_t *a2)
{
  return sub_233B0C828(a1, *a2, a2[1]);
}

uint64_t sub_233B250AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_233B24EFC(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), (void (*)(uint64_t *__return_ptr))sub_233B13570, (uint64_t (*)(uint64_t, uint64_t))sub_233B253AC);
}

uint64_t sub_233B250D4(void *a1)
{
  uint64_t v1;

  return sub_233B24944(a1, v1);
}

uint64_t sub_233B250DC(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256112EF8);
    v8 = a2();
    result = MEMORY[0x23493D400](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_233B25144()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_256112F08);
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  v3 = v0 + ((v2 + 16) & ~v2);
  swift_bridgeObjectRelease();
  v4 = v3 + *(int *)(v1 + 48);
  v5 = sub_233B57E40();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  return swift_deallocObject();
}

uint64_t sub_233B251D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256112F08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_233B2521C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_256112F08) - 8) + 80);
  return sub_233B0CDE8(a1, v1 + ((v3 + 16) & ~v3));
}

uint64_t sub_233B25268(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_256112F08);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_233B252A8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_233B252CC(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  return sub_233B24F74(a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t sub_233B252D4()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_233B252F8(_QWORD *a1)
{
  uint64_t v1;

  return sub_233B0C724(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_233B25310(_QWORD *a1)
{
  uint64_t v1;

  return sub_233B0C828(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_233B25328(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_233B24EFC(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), (void (*)(uint64_t *__return_ptr))sub_233B132E8, (uint64_t (*)(uint64_t, uint64_t))sub_233B25350);
}

uint64_t sub_233B25350(uint64_t result, unsigned __int8 a2)
{
  if (a2 != 255)
    return sub_233B149B4(result, a2 & 1);
  return result;
}

uint64_t sub_233B253B0(uint64_t a1, uint64_t a2)
{
  return sub_233B253C8(a1, a2, LogKey.Prefix.rawValue.getter);
}

uint64_t sub_233B253BC(uint64_t a1, uint64_t a2)
{
  return sub_233B253C8(a1, a2, ManagedAppStatus.Reason.rawValue.getter);
}

uint64_t sub_233B253C8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;

  v4 = a3();
  v6 = v5;
  if (v4 == a3() && v6 == v7)
    v9 = 1;
  else
    v9 = sub_233B584D0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9 & 1;
}

void sub_233B25460(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_233B254B0(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_233B255B0 + 4 * byte_233B5B0FA[a2]))(0x646575657571);
}

uint64_t sub_233B255B0(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x646575657571 && v1 == 0xE600000000000000)
    v2 = 1;
  else
    v2 = sub_233B584D0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void sub_233B25708(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_233B25764(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_233B257E8 + 4 * byte_233B5B109[a2]))(0xD000000000000012);
}

uint64_t sub_233B257E8(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0xD000000000000012 && v1 == 0x8000000233B60ED0)
    v2 = 1;
  else
    v2 = sub_233B584D0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void sub_233B258B8(char a1)
{
  __asm { BR              X11 }
}

uint64_t sub_233B25904(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_233B25A10 + 4 * byte_233B5B118[a2]))(0x6C6C6174736E69);
}

uint64_t sub_233B25A10(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x6C6C6174736E69 && v1 == 0xE700000000000000)
    v2 = 1;
  else
    v2 = sub_233B584D0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_233B25B8C(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  char v8;

  v2 = a1;
  if (a1)
  {
    if (a1 == 1)
      v3 = 0x696D694C7265764FLL;
    else
      v3 = 0x726576654ELL;
    if (v2 == 1)
      v4 = 0xE900000000000074;
    else
      v4 = 0xE500000000000000;
    v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1)
        v6 = 0x696D694C7265764FLL;
      else
        v6 = 0x726576654ELL;
      if (v5 == 1)
        v7 = 0xE900000000000074;
      else
        v7 = 0xE500000000000000;
      if (v3 != v6)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v4 = 0xE600000000000000;
    v3 = 0x737961776C41;
    v5 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE600000000000000;
  if (v3 != 0x737961776C41)
  {
LABEL_21:
    v8 = sub_233B584D0();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7)
    goto LABEL_21;
  v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

void sub_233B25C9C(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_233B25CDC()
{
  sub_233B57FCC();
  return swift_bridgeObjectRelease();
}

void sub_233B25DD4(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_233B25E18()
{
  sub_233B57FCC();
  return swift_bridgeObjectRelease();
}

void sub_233B25E98(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_233B25EDC()
{
  sub_233B57FCC();
  return swift_bridgeObjectRelease();
}

uint64_t AppInstallRequestType.isUserInitiated.getter()
{
  _BYTE *v0;

  return (*v0 > 9uLL) | (0x1Au >> *v0) & 1;
}

BOOL AppInstallRequestType.isUpdate.getter()
{
  _BYTE *v0;

  return (*v0 & 0xFE) == 2;
}

uint64_t AppInstallRequestType.isRestore.getter()
{
  _BYTE *v0;

  return (*v0 < 0xAuLL) & (0x230u >> *v0);
}

uint64_t AppInstallRequestType.requiresInstallSheet.getter()
{
  _BYTE *v0;

  return (*v0 > 9uLL) | (0x1C3u >> *v0) & 1;
}

uint64_t AppInstallRequestType.init(rawValue:)@<X0>(char *a1@<X8>)
{
  unint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_233B5835C();
  result = swift_bridgeObjectRelease();
  v4 = 10;
  if (v2 < 0xA)
    v4 = v2;
  *a1 = v4;
  return result;
}

uint64_t AppInstallRequestType.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_233B260DC + 4 * byte_233B5B13B[*v0]))(0xD000000000000010, 0x8000000233B60F60);
}

uint64_t sub_233B260DC()
{
  return 0x6C6C6174736E69;
}

uint64_t sub_233B260F4()
{
  return 0x6974616D6F747561;
}

uint64_t sub_233B26118()
{
  return 0x657461647075;
}

uint64_t sub_233B2612C()
{
  return 0x6F69746F6D6F7270;
}

uint64_t sub_233B2614C()
{
  return 0x65726F74736572;
}

uint64_t sub_233B26164()
{
  return 0x5056656369766564;
}

uint64_t sub_233B26180()
{
  return 0x50505672657375;
}

uint64_t sub_233B26198()
{
  return 7368821;
}

uint64_t sub_233B261A8()
{
  return 0x5565726F74736572;
}

void sub_233B261CC(char *a1)
{
  sub_233B258B8(*a1);
}

unint64_t sub_233B261DC()
{
  unint64_t result;

  result = qword_2561134B0;
  if (!qword_2561134B0)
  {
    result = MEMORY[0x23493D400](&protocol conformance descriptor for AppInstallRequestType, &type metadata for AppInstallRequestType);
    atomic_store(result, (unint64_t *)&qword_2561134B0);
  }
  return result;
}

uint64_t sub_233B26220()
{
  char *v0;
  char v1;
  _BYTE v3[72];

  v1 = *v0;
  sub_233B58590();
  sub_233B25E98((uint64_t)v3, v1);
  return sub_233B585C0();
}

void sub_233B26264(uint64_t a1)
{
  char *v1;

  sub_233B25E98(a1, *v1);
}

uint64_t sub_233B2626C()
{
  char *v0;
  char v1;
  _BYTE v3[72];

  v1 = *v0;
  sub_233B58590();
  sub_233B25E98((uint64_t)v3, v1);
  return sub_233B585C0();
}

uint64_t sub_233B262AC@<X0>(char *a1@<X8>)
{
  return AppInstallRequestType.init(rawValue:)(a1);
}

uint64_t sub_233B262B8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = AppInstallRequestType.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_233B262DC()
{
  sub_233B26450();
  return sub_233B58038();
}

uint64_t sub_233B26338()
{
  sub_233B26450();
  return sub_233B58020();
}

uint64_t storeEnumTagSinglePayload for AppInstallRequestType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 9 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 9) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF6)
    return ((uint64_t (*)(void))((char *)&loc_233B263D0 + 4 * byte_233B5B14A[v4]))();
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_233B26404 + 4 * byte_233B5B145[v4]))();
}

uint64_t sub_233B26404(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_233B2640C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x233B26414);
  return result;
}

uint64_t sub_233B26420(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x233B26428);
  *(_BYTE *)result = a2 + 9;
  return result;
}

uint64_t sub_233B2642C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_233B26434(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AppInstallRequestType()
{
  return &type metadata for AppInstallRequestType;
}

unint64_t sub_233B26450()
{
  unint64_t result;

  result = qword_2561134B8;
  if (!qword_2561134B8)
  {
    result = MEMORY[0x23493D400](&protocol conformance descriptor for AppInstallRequestType, &type metadata for AppInstallRequestType);
    atomic_store(result, (unint64_t *)&qword_2561134B8);
  }
  return result;
}

uint64_t DDMRemoveManagedAppRequest.declarationIdentifier.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t DDMRemoveManagedAppRequest.declarationIdentifier.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*DDMRemoveManagedAppRequest.declarationIdentifier.modify())()
{
  return nullsub_1;
}

uint64_t DDMRemoveManagedAppRequest.init(declarationIdentifier:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t DDMRemoveManagedAppRequest.request()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v2 = v0[1];
  *(_QWORD *)(v1 + 40) = *v0;
  *(_QWORD *)(v1 + 48) = v2;
  return swift_task_switch();
}

uint64_t sub_233B26528()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t);

  if (qword_25424D4B0 != -1)
    swift_once();
  v1 = v0[5];
  v2 = swift_bridgeObjectRetain();
  v0[2] = v1;
  v0[4] = v0 + 2;
  v0[3] = v2;
  v5 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_256112FD0 + dword_256112FD0);
  swift_bridgeObjectRetain();
  v3 = (_QWORD *)swift_task_alloc();
  v0[7] = v3;
  *v3 = v0;
  v3[1] = sub_233B1EDE0;
  return v5((uint64_t)(v0 + 4), (uint64_t)sub_233B265EC, 0);
}

void sub_233B265EC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_233B266B0(a1, a2, a3, a4, a5, (uint64_t)&block_descriptor_5);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> DDMRemoveManagedAppRequest.request()()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];
  uint64_t *v4;

  v2 = *v0;
  v1 = v0[1];
  if (qword_25424D4B0 != -1)
    swift_once();
  v3[0] = v2;
  v3[1] = v1;
  v4 = v3;
  swift_bridgeObjectRetain_n();
  sub_233B22EF0(&v4, (void (*)(uint64_t, uint64_t, unint64_t, uint64_t (*)(), uint64_t))sub_233B266A4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

void sub_233B266A4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_233B266B0(a1, a2, a3, a4, a5, (uint64_t)&block_descriptor_4);
}

void sub_233B266B0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v10;
  void *v11;
  _QWORD v12[6];

  v10 = (void *)sub_233B57E04();
  v12[4] = a4;
  v12[5] = a5;
  v12[0] = MEMORY[0x24BDAC760];
  v12[1] = 1107296256;
  v12[2] = sub_233B42240;
  v12[3] = a6;
  v11 = _Block_copy(v12);
  swift_retain();
  swift_release();
  objc_msgSend(a1, sel_removeManagedAppWithDeclarationIdentifier_reply_, v10, v11);
  _Block_release(v11);

}

ValueMetadata *type metadata accessor for DDMRemoveManagedAppRequest()
{
  return &type metadata for DDMRemoveManagedAppRequest;
}

BOOL static RestoreRequestType.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t RestoreRequestType.hash(into:)()
{
  return sub_233B5859C();
}

uint64_t sub_233B267C4()
{
  sub_233B26B94();
  return sub_233B58638();
}

uint64_t sub_233B267EC()
{
  sub_233B26B94();
  return sub_233B58644();
}

BOOL sub_233B26814(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t sub_233B2682C()
{
  _BYTE *v0;

  if (*v0)
    return 0x7465736572;
  else
    return 0x61727473746F6F62;
}

uint64_t sub_233B26868@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_233B27B50(a1, a2);
  *a3 = result;
  return result;
}

void sub_233B2688C(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_233B26898()
{
  sub_233B26B0C();
  return sub_233B58638();
}

uint64_t sub_233B268C0()
{
  sub_233B26B0C();
  return sub_233B58644();
}

uint64_t sub_233B268E8()
{
  sub_233B26B50();
  return sub_233B58638();
}

uint64_t sub_233B26910()
{
  sub_233B26B50();
  return sub_233B58644();
}

uint64_t RestoreRequestType.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_2561134C8);
  v16 = *(_QWORD *)(v3 - 8);
  v17 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2561134D0);
  v14 = *(_QWORD *)(v6 - 8);
  v15 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_2561134D8);
  v18 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_233B26B0C();
  sub_233B5862C();
  if ((v12 & 1) != 0)
  {
    v20 = 1;
    sub_233B26B50();
    sub_233B58410();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v5, v17);
  }
  else
  {
    v19 = 0;
    sub_233B26B94();
    sub_233B58410();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v8, v15);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v11, v9);
}

unint64_t sub_233B26B0C()
{
  unint64_t result;

  result = qword_2561134E0;
  if (!qword_2561134E0)
  {
    result = MEMORY[0x23493D400](&unk_233B5B754, &type metadata for RestoreRequestType.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2561134E0);
  }
  return result;
}

unint64_t sub_233B26B50()
{
  unint64_t result;

  result = qword_2561134E8;
  if (!qword_2561134E8)
  {
    result = MEMORY[0x23493D400](&unk_233B5B704, &type metadata for RestoreRequestType.ResetCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2561134E8);
  }
  return result;
}

unint64_t sub_233B26B94()
{
  unint64_t result;

  result = qword_2561134F0;
  if (!qword_2561134F0)
  {
    result = MEMORY[0x23493D400](&unk_233B5B6B4, &type metadata for RestoreRequestType.BootstrapCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2561134F0);
  }
  return result;
}

uint64_t RestoreRequestType.hashValue.getter()
{
  sub_233B58590();
  sub_233B5859C();
  return sub_233B585C0();
}

uint64_t RestoreRequestType.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v35;

  v30 = a2;
  v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_2561134F8);
  v32 = *(_QWORD *)(v29 - 8);
  MEMORY[0x24BDAC7A8](v29);
  v31 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_256113500);
  v4 = *(_QWORD *)(v28 - 8);
  MEMORY[0x24BDAC7A8](v28);
  v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_256113508);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_233B26B0C();
  v11 = v33;
  sub_233B58608();
  if (v11)
    goto LABEL_7;
  v26 = v4;
  v27 = a1;
  v12 = v31;
  v13 = v32;
  v33 = v8;
  v14 = sub_233B583F8();
  v15 = v7;
  if (*(_QWORD *)(v14 + 16) != 1)
  {
    v19 = sub_233B582D8();
    swift_allocError();
    v21 = v20;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256113238);
    *v21 = &type metadata for RestoreRequestType;
    sub_233B58374();
    sub_233B582CC();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v19 - 8) + 104))(v21, *MEMORY[0x24BEE26D0], v19);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v33 + 8))(v10, v15);
    a1 = v27;
LABEL_7:
    v24 = (uint64_t)a1;
    return __swift_destroy_boxed_opaque_existential_0(v24);
  }
  v16 = *(_BYTE *)(v14 + 32);
  if ((v16 & 1) != 0)
  {
    LODWORD(v28) = *(unsigned __int8 *)(v14 + 32);
    v35 = 1;
    sub_233B26B50();
    sub_233B58368();
    v17 = v33;
    v18 = v30;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v12, v29);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v10, v15);
    v16 = v28;
  }
  else
  {
    v34 = 0;
    sub_233B26B94();
    v22 = v6;
    sub_233B58368();
    v23 = v33;
    v18 = v30;
    (*(void (**)(char *, uint64_t))(v26 + 8))(v22, v28);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v10, v15);
  }
  *v18 = v16;
  v24 = (uint64_t)v27;
  return __swift_destroy_boxed_opaque_existential_0(v24);
}

uint64_t sub_233B26F74@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return RestoreRequestType.init(from:)(a1, a2);
}

uint64_t sub_233B26F88(_QWORD *a1)
{
  return RestoreRequestType.encode(to:)(a1);
}

void RestoreRequest.requestType.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

_BYTE *RestoreRequest.init(_:)@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t RestoreRequest.request()()
{
  _BYTE *v0;
  uint64_t v1;

  *(_BYTE *)(v1 + 41) = *v0;
  return swift_task_switch();
}

uint64_t sub_233B26FD0()
{
  uint64_t v0;
  char v1;
  _QWORD *v2;
  char *v4;

  if (qword_25424D4B0 != -1)
    swift_once();
  v1 = *(_BYTE *)(v0 + 41);
  sub_233B1474C();
  sub_233B14790();
  *(_BYTE *)(v0 + 40) = v1;
  *(_QWORD *)(v0 + 16) = v0 + 40;
  v4 = (char *)&dword_256112F90 + dword_256112F90;
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 24) = v2;
  *v2 = v0;
  v2[1] = sub_233B27088;
  return ((uint64_t (*)(uint64_t, void (*)(void *, uint64_t, uint64_t, uint64_t, uint64_t), _QWORD))v4)(v0 + 16, sub_233B27104, 0);
}

uint64_t sub_233B27088()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 32) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_233B270EC()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_233B270F8()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_233B27104(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v8;
  void *v9;
  _QWORD v10[6];

  v8 = (void *)sub_233B57E04();
  v10[4] = a4;
  v10[5] = a5;
  v10[0] = MEMORY[0x24BDAC760];
  v10[1] = 1107296256;
  v10[2] = sub_233B42240;
  v10[3] = &block_descriptor_5;
  v9 = _Block_copy(v10);
  swift_retain();
  swift_release();
  objc_msgSend(a1, sel_handleRestore_reply_, v8, v9);
  _Block_release(v9);

}

uint64_t sub_233B271C4()
{
  return 0x5474736575716572;
}

uint64_t sub_233B271E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x5474736575716572 && a2 == 0xEB00000000657079)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_233B584D0();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_233B27290()
{
  sub_233B27520();
  return sub_233B58638();
}

uint64_t sub_233B272B8()
{
  sub_233B27520();
  return sub_233B58644();
}

uint64_t RestoreRequest.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char v7;
  uint64_t v9;
  char v10;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256113518);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_233B27520();
  sub_233B5862C();
  v10 = v7;
  sub_233B27564();
  sub_233B5847C();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t RestoreRequest.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;
  char v11;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256113530);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_233B27520();
  sub_233B58608();
  if (!v2)
  {
    sub_233B275A8();
    sub_233B583E0();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v11;
  }
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
}

uint64_t sub_233B274F8@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return RestoreRequest.init(from:)(a1, a2);
}

uint64_t sub_233B2750C(_QWORD *a1)
{
  return RestoreRequest.encode(to:)(a1);
}

unint64_t sub_233B27520()
{
  unint64_t result;

  result = qword_256113520;
  if (!qword_256113520)
  {
    result = MEMORY[0x23493D400](&unk_233B5B664, &type metadata for RestoreRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256113520);
  }
  return result;
}

unint64_t sub_233B27564()
{
  unint64_t result;

  result = qword_256113528;
  if (!qword_256113528)
  {
    result = MEMORY[0x23493D400](&protocol conformance descriptor for RestoreRequestType, &type metadata for RestoreRequestType);
    atomic_store(result, (unint64_t *)&qword_256113528);
  }
  return result;
}

unint64_t sub_233B275A8()
{
  unint64_t result;

  result = qword_256113538;
  if (!qword_256113538)
  {
    result = MEMORY[0x23493D400](&protocol conformance descriptor for RestoreRequestType, &type metadata for RestoreRequestType);
    atomic_store(result, (unint64_t *)&qword_256113538);
  }
  return result;
}

unint64_t sub_233B275F0()
{
  unint64_t result;

  result = qword_256113540;
  if (!qword_256113540)
  {
    result = MEMORY[0x23493D400](&protocol conformance descriptor for RestoreRequestType, &type metadata for RestoreRequestType);
    atomic_store(result, (unint64_t *)&qword_256113540);
  }
  return result;
}

ValueMetadata *type metadata accessor for RestoreRequestType()
{
  return &type metadata for RestoreRequestType;
}

ValueMetadata *type metadata accessor for RestoreRequest()
{
  return &type metadata for RestoreRequest;
}

uint64_t storeEnumTagSinglePayload for RestoreRequest.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_233B2769C + 4 * asc_233B5B2C0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_233B276BC + 4 * byte_233B5B2C5[v4]))();
}

_BYTE *sub_233B2769C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_233B276BC(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_233B276C4(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_233B276CC(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_233B276D4(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_233B276DC(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for RestoreRequest.CodingKeys()
{
  return &type metadata for RestoreRequest.CodingKeys;
}

uint64_t getEnumTagSinglePayload for OAuthInvalidateRequest.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s22ManagedAppDistribution18RestoreRequestTypeOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_233B277D4 + 4 * byte_233B5B2CF[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_233B27808 + 4 * byte_233B5B2CA[v4]))();
}

uint64_t sub_233B27808(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_233B27810(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x233B27818);
  return result;
}

uint64_t sub_233B27824(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x233B2782CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_233B27830(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_233B27838(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_233B27844(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for RestoreRequestType.CodingKeys()
{
  return &type metadata for RestoreRequestType.CodingKeys;
}

ValueMetadata *type metadata accessor for RestoreRequestType.BootstrapCodingKeys()
{
  return &type metadata for RestoreRequestType.BootstrapCodingKeys;
}

ValueMetadata *type metadata accessor for RestoreRequestType.ResetCodingKeys()
{
  return &type metadata for RestoreRequestType.ResetCodingKeys;
}

unint64_t sub_233B27884()
{
  unint64_t result;

  result = qword_256113548;
  if (!qword_256113548)
  {
    result = MEMORY[0x23493D400](&unk_233B5B584, &type metadata for RestoreRequestType.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256113548);
  }
  return result;
}

unint64_t sub_233B278CC()
{
  unint64_t result;

  result = qword_256113550;
  if (!qword_256113550)
  {
    result = MEMORY[0x23493D400](&unk_233B5B63C, &type metadata for RestoreRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256113550);
  }
  return result;
}

unint64_t sub_233B27914()
{
  unint64_t result;

  result = qword_256113558;
  if (!qword_256113558)
  {
    result = MEMORY[0x23493D400](&unk_233B5B5AC, &type metadata for RestoreRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256113558);
  }
  return result;
}

unint64_t sub_233B2795C()
{
  unint64_t result;

  result = qword_256113560;
  if (!qword_256113560)
  {
    result = MEMORY[0x23493D400](&unk_233B5B5D4, &type metadata for RestoreRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256113560);
  }
  return result;
}

unint64_t sub_233B279A4()
{
  unint64_t result;

  result = qword_256113568;
  if (!qword_256113568)
  {
    result = MEMORY[0x23493D400](&unk_233B5B4A4, &type metadata for RestoreRequestType.BootstrapCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256113568);
  }
  return result;
}

unint64_t sub_233B279EC()
{
  unint64_t result;

  result = qword_256113570;
  if (!qword_256113570)
  {
    result = MEMORY[0x23493D400](&unk_233B5B4CC, &type metadata for RestoreRequestType.BootstrapCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256113570);
  }
  return result;
}

unint64_t sub_233B27A34()
{
  unint64_t result;

  result = qword_256113578;
  if (!qword_256113578)
  {
    result = MEMORY[0x23493D400](&unk_233B5B454, &type metadata for RestoreRequestType.ResetCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256113578);
  }
  return result;
}

unint64_t sub_233B27A7C()
{
  unint64_t result;

  result = qword_256113580;
  if (!qword_256113580)
  {
    result = MEMORY[0x23493D400](&unk_233B5B47C, &type metadata for RestoreRequestType.ResetCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256113580);
  }
  return result;
}

unint64_t sub_233B27AC4()
{
  unint64_t result;

  result = qword_256113588;
  if (!qword_256113588)
  {
    result = MEMORY[0x23493D400](&unk_233B5B4F4, &type metadata for RestoreRequestType.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256113588);
  }
  return result;
}

unint64_t sub_233B27B0C()
{
  unint64_t result;

  result = qword_256113590;
  if (!qword_256113590)
  {
    result = MEMORY[0x23493D400](&unk_233B5B51C, &type metadata for RestoreRequestType.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256113590);
  }
  return result;
}

uint64_t sub_233B27B50(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x61727473746F6F62 && a2 == 0xE900000000000070;
  if (v2 || (sub_233B584D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7465736572 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_233B584D0();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

unint64_t VPPInstallRequest.RequestType.init(rawValue:)@<X0>(unint64_t result@<X0>, _BYTE *a2@<X8>)
{
  unsigned int v2;

  v2 = 0x2010003u >> (8 * result);
  if (result >= 4)
    LOBYTE(v2) = 3;
  *a2 = v2;
  return result;
}

uint64_t VPPInstallRequest.RequestType.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0 + 1;
}

uint64_t sub_233B27C78()
{
  sub_233B58590();
  sub_233B5859C();
  return sub_233B585C0();
}

uint64_t sub_233B27CBC()
{
  return sub_233B5859C();
}

uint64_t sub_233B27CE8()
{
  sub_233B58590();
  sub_233B5859C();
  return sub_233B585C0();
}

unint64_t sub_233B27D28@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return VPPInstallRequest.RequestType.init(rawValue:)(*a1, a2);
}

void sub_233B27D30(_QWORD *a1@<X8>)
{
  unsigned __int8 *v1;

  *a1 = *v1 + 1;
}

uint64_t sub_233B27D40()
{
  sub_233B29694();
  return sub_233B58044();
}

uint64_t sub_233B27D9C()
{
  sub_233B29694();
  return sub_233B5802C();
}

uint64_t VPPInstallRequest.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_233B57E40();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t VPPInstallRequest.accountIdentifier.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for VPPInstallRequest() + 20));
}

uint64_t type metadata accessor for VPPInstallRequest()
{
  uint64_t result;

  result = qword_256113638;
  if (!qword_256113638)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t VPPInstallRequest.appIdentifier.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(int *)(type metadata accessor for VPPInstallRequest() + 24);
  v2 = *(_QWORD *)v1;
  sub_233B0486C(*(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(_BYTE *)(v1 + 16));
  return v2;
}

uint64_t VPPInstallRequest.requestType.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for VPPInstallRequest();
  *a1 = *(_BYTE *)(v1 + *(int *)(result + 28));
  return result;
}

uint64_t VPPInstallRequest.evid.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for VPPInstallRequest() + 32));
}

uint64_t VPPInstallRequest.init(appIdentifier:requestType:accountIdentifier:evid:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, char *a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>)
{
  char v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;

  v17 = *a4;
  v18 = (int *)type metadata accessor for VPPInstallRequest();
  v19 = a9 + v18[5];
  *(_QWORD *)v19 = a5;
  *(_BYTE *)(v19 + 8) = a6 & 1;
  v20 = a9 + v18[6];
  *(_QWORD *)v20 = a1;
  *(_QWORD *)(v20 + 8) = a2;
  *(_BYTE *)(v20 + 16) = a3 & 1;
  result = sub_233B57E34();
  *(_BYTE *)(a9 + v18[7]) = v17;
  v22 = a9 + v18[8];
  *(_QWORD *)v22 = a7;
  *(_BYTE *)(v22 + 8) = a8 & 1;
  return result;
}

uint64_t VPPInstallRequest.requestInstall()()
{
  uint64_t v0;
  _QWORD *v1;

  v1[3] = v0;
  type metadata accessor for VPPInstallRequest();
  v1[4] = swift_task_alloc();
  v1[5] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_233B2804C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  char *v5;

  if (qword_25424D4B0 != -1)
    swift_once();
  v1 = v0[4];
  v2 = v0[5];
  sub_233B28A08(v0[3], v2);
  sub_233B08530(&qword_256112F80, (uint64_t (*)(uint64_t))type metadata accessor for VPPInstallRequest, (uint64_t)&protocol conformance descriptor for VPPInstallRequest);
  sub_233B08530(&qword_256112F88, (uint64_t (*)(uint64_t))type metadata accessor for VPPInstallRequest, (uint64_t)&protocol conformance descriptor for VPPInstallRequest);
  sub_233B28A08(v2, v1);
  v0[2] = v1;
  v5 = (char *)&dword_256112F78 + dword_256112F78;
  v3 = (_QWORD *)swift_task_alloc();
  v0[6] = v3;
  *v3 = v0;
  v3[1] = sub_233B2814C;
  return ((uint64_t (*)(_QWORD *, void (*)(void *, uint64_t, uint64_t, uint64_t, uint64_t), _QWORD))v5)(v0 + 2, sub_233B28250, 0);
}

uint64_t sub_233B2814C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(*v1 + 56) = v0;
  swift_task_dealloc();
  if (!v0)
    sub_233B28A4C(*(_QWORD *)(v2 + 32));
  return swift_task_switch();
}

uint64_t sub_233B281B8()
{
  uint64_t v0;

  sub_233B28A4C(*(_QWORD *)(v0 + 40));
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_233B28200()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  sub_233B28A4C(*(_QWORD *)(v0 + 32));
  sub_233B28A4C(v1);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_233B28250(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v8;
  void *v9;
  _QWORD v10[6];

  v8 = (void *)sub_233B57E04();
  v10[4] = a4;
  v10[5] = a5;
  v10[0] = MEMORY[0x24BDAC760];
  v10[1] = 1107296256;
  v10[2] = sub_233B42240;
  v10[3] = &block_descriptor_6;
  v9 = _Block_copy(v10);
  swift_retain();
  swift_release();
  objc_msgSend(a1, sel_handleVPPInstallRequest_reply_, v8, v9);
  _Block_release(v9);

}

uint64_t sub_233B28310()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_233B28334 + 4 * byte_233B5B7B0[*v0]))(25705, 0xE200000000000000);
}

unint64_t sub_233B28334()
{
  return 0xD000000000000011;
}

uint64_t sub_233B28350()
{
  return 0x746E656449707061;
}

uint64_t sub_233B28374()
{
  return 0x5474736575716572;
}

uint64_t sub_233B28394()
{
  return 1684633189;
}

uint64_t sub_233B283A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_233B2946C(a1, a2);
  *a3 = result;
  return result;
}

void sub_233B283C8(_BYTE *a1@<X8>)
{
  *a1 = 5;
}

uint64_t sub_233B283D4()
{
  sub_233B28A88();
  return sub_233B58638();
}

uint64_t sub_233B283FC()
{
  sub_233B28A88();
  return sub_233B58644();
}

uint64_t VPPInstallRequest.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  __int128 *v10;
  char v11;
  uint64_t v13;
  char v14;
  __int128 v15;
  char v16;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2561135A0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_233B28A88();
  sub_233B5862C();
  LOBYTE(v15) = 0;
  sub_233B57E40();
  sub_233B08530(&qword_25424D470, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA70]);
  sub_233B5847C();
  if (!v2)
  {
    v9 = type metadata accessor for VPPInstallRequest();
    LOBYTE(v15) = 1;
    sub_233B58428();
    v10 = (__int128 *)(v3 + *(int *)(v9 + 24));
    v11 = *((_BYTE *)v10 + 16);
    v15 = *v10;
    v16 = v11;
    v14 = 2;
    sub_233B28ACC();
    sub_233B5847C();
    LOBYTE(v15) = *(_BYTE *)(v3 + *(int *)(v9 + 28));
    v14 = 3;
    sub_233B28B10();
    sub_233B5847C();
    LOBYTE(v15) = 4;
    sub_233B58440();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t VPPInstallRequest.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  char *v17;
  char v18;
  char v19;
  char *v20;
  uint64_t v21;
  char v22;
  char v23;
  char *v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  _QWORD *v31;
  __int128 v32;
  char v33;
  char v34;

  v26 = a2;
  v27 = sub_233B57E40();
  v3 = *(_QWORD *)(v27 - 8);
  MEMORY[0x24BDAC7A8](v27);
  v30 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_2561135C0);
  v5 = *(_QWORD *)(v28 - 8);
  MEMORY[0x24BDAC7A8](v28);
  v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (int *)type metadata accessor for VPPInstallRequest();
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_233B28A88();
  v29 = v7;
  v11 = (uint64_t)v31;
  sub_233B58608();
  if (v11)
    return __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  v12 = v5;
  v31 = a1;
  LOBYTE(v32) = 0;
  sub_233B08530(&qword_25424D478, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAA8]);
  v13 = v27;
  v14 = v28;
  sub_233B583E0();
  (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v10, v30, v13);
  LOBYTE(v32) = 1;
  v15 = sub_233B5838C();
  v16 = v8;
  v17 = &v10[v8[5]];
  *(_QWORD *)v17 = v15;
  v17[8] = v18 & 1;
  v34 = 2;
  sub_233B28B54();
  sub_233B583E0();
  v19 = v33;
  v20 = &v10[v8[6]];
  *(_OWORD *)v20 = v32;
  v20[16] = v19;
  v34 = 3;
  sub_233B28B98();
  sub_233B583E0();
  v10[v8[7]] = v32;
  LOBYTE(v32) = 4;
  v21 = sub_233B583A4();
  v23 = v22;
  (*(void (**)(char *, uint64_t))(v12 + 8))(v29, v14);
  v24 = &v10[v16[8]];
  *(_QWORD *)v24 = v21;
  v24[8] = v23 & 1;
  sub_233B28A08((uint64_t)v10, v26);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v31);
  return sub_233B28A4C((uint64_t)v10);
}

uint64_t sub_233B289E0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return VPPInstallRequest.init(from:)(a1, a2);
}

uint64_t sub_233B289F4(_QWORD *a1)
{
  return VPPInstallRequest.encode(to:)(a1);
}

uint64_t sub_233B28A08(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for VPPInstallRequest();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_233B28A4C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for VPPInstallRequest();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_233B28A88()
{
  unint64_t result;

  result = qword_2561135A8;
  if (!qword_2561135A8)
  {
    result = MEMORY[0x23493D400](&unk_233B5BA7C, &type metadata for VPPInstallRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2561135A8);
  }
  return result;
}

unint64_t sub_233B28ACC()
{
  unint64_t result;

  result = qword_2561135B0;
  if (!qword_2561135B0)
  {
    result = MEMORY[0x23493D400](&protocol conformance descriptor for StoreAppIdentifier, &type metadata for StoreAppIdentifier);
    atomic_store(result, (unint64_t *)&qword_2561135B0);
  }
  return result;
}

unint64_t sub_233B28B10()
{
  unint64_t result;

  result = qword_2561135B8;
  if (!qword_2561135B8)
  {
    result = MEMORY[0x23493D400](&protocol conformance descriptor for VPPInstallRequest.RequestType, &type metadata for VPPInstallRequest.RequestType);
    atomic_store(result, (unint64_t *)&qword_2561135B8);
  }
  return result;
}

unint64_t sub_233B28B54()
{
  unint64_t result;

  result = qword_2561135C8;
  if (!qword_2561135C8)
  {
    result = MEMORY[0x23493D400](&protocol conformance descriptor for StoreAppIdentifier, &type metadata for StoreAppIdentifier);
    atomic_store(result, (unint64_t *)&qword_2561135C8);
  }
  return result;
}

unint64_t sub_233B28B98()
{
  unint64_t result;

  result = qword_2561135D0;
  if (!qword_2561135D0)
  {
    result = MEMORY[0x23493D400](&protocol conformance descriptor for VPPInstallRequest.RequestType, &type metadata for VPPInstallRequest.RequestType);
    atomic_store(result, (unint64_t *)&qword_2561135D0);
  }
  return result;
}

unint64_t sub_233B28BE0()
{
  unint64_t result;

  result = qword_2561135D8;
  if (!qword_2561135D8)
  {
    result = MEMORY[0x23493D400](&protocol conformance descriptor for VPPInstallRequest.RequestType, &type metadata for VPPInstallRequest.RequestType);
    atomic_store(result, (unint64_t *)&qword_2561135D8);
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for VPPInstallRequest(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v19 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_233B57E40();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = a3[6];
    v10 = (char *)a1 + v8;
    v11 = (char *)a2 + v8;
    *(_QWORD *)v10 = *(_QWORD *)v11;
    v10[8] = v11[8];
    v12 = (char *)a1 + v9;
    v13 = *(_QWORD *)((char *)a2 + v9);
    v14 = *(_QWORD *)((char *)a2 + v9 + 8);
    v15 = *((_BYTE *)a2 + v9 + 16);
    sub_233B0486C(v13, v14, v15);
    *(_QWORD *)v12 = v13;
    *((_QWORD *)v12 + 1) = v14;
    v12[16] = v15;
    v16 = a3[8];
    *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
    v17 = (char *)a1 + v16;
    v18 = (char *)a2 + v16;
    *(_QWORD *)v17 = *(_QWORD *)v18;
    v17[8] = v18[8];
  }
  return a1;
}

uint64_t destroy for VPPInstallRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_233B57E40();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return sub_233B04B94(*(_QWORD *)(a1 + *(int *)(a2 + 24)), *(_QWORD *)(a1 + *(int *)(a2 + 24) + 8), *(_BYTE *)(a1 + *(int *)(a2 + 24) + 16));
}

uint64_t initializeWithCopy for VPPInstallRequest(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = sub_233B57E40();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  v11 = a1 + v8;
  v12 = *(_QWORD *)(a2 + v8);
  v13 = *(_QWORD *)(a2 + v8 + 8);
  v14 = *(_BYTE *)(a2 + v8 + 16);
  sub_233B0486C(v12, v13, v14);
  *(_QWORD *)v11 = v12;
  *(_QWORD *)(v11 + 8) = v13;
  *(_BYTE *)(v11 + 16) = v14;
  v15 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  v16 = a1 + v15;
  v17 = a2 + v15;
  *(_QWORD *)v16 = *(_QWORD *)v17;
  *(_BYTE *)(v16 + 8) = *(_BYTE *)(v17 + 8);
  return a1;
}

uint64_t assignWithCopy for VPPInstallRequest(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;

  v6 = sub_233B57E40();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = (uint64_t *)(a2 + v7);
  v10 = *v9;
  *(_BYTE *)(v8 + 8) = *((_BYTE *)v9 + 8);
  *(_QWORD *)v8 = v10;
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = *(_QWORD *)v13;
  v15 = *(_QWORD *)(v13 + 8);
  v16 = *(_BYTE *)(v13 + 16);
  sub_233B0486C(*(_QWORD *)v13, v15, v16);
  v17 = *(_QWORD *)v12;
  v18 = *(_QWORD *)(v12 + 8);
  v19 = *(_BYTE *)(v12 + 16);
  *(_QWORD *)v12 = v14;
  *(_QWORD *)(v12 + 8) = v15;
  *(_BYTE *)(v12 + 16) = v16;
  sub_233B04B94(v17, v18, v19);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  v20 = a3[8];
  v21 = a1 + v20;
  v22 = (uint64_t *)(a2 + v20);
  v23 = *v22;
  *(_BYTE *)(v21 + 8) = *((_BYTE *)v22 + 8);
  *(_QWORD *)v21 = v23;
  return a1;
}

uint64_t initializeWithTake for VPPInstallRequest(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = sub_233B57E40();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  v11 = a1 + v8;
  v12 = a2 + v8;
  *(_OWORD *)v11 = *(_OWORD *)v12;
  *(_BYTE *)(v11 + 16) = *(_BYTE *)(v12 + 16);
  v13 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  v14 = a1 + v13;
  v15 = a2 + v13;
  *(_QWORD *)v14 = *(_QWORD *)v15;
  *(_BYTE *)(v14 + 8) = *(_BYTE *)(v15 + 8);
  return a1;
}

uint64_t assignWithTake for VPPInstallRequest(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = sub_233B57E40();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  v11 = a1 + v8;
  v12 = a2 + v8;
  LOBYTE(v9) = *(_BYTE *)(v12 + 16);
  v13 = *(_QWORD *)v11;
  v14 = *(_QWORD *)(v11 + 8);
  v15 = *(_BYTE *)(v11 + 16);
  *(_OWORD *)v11 = *(_OWORD *)v12;
  *(_BYTE *)(v11 + 16) = v9;
  sub_233B04B94(v13, v14, v15);
  v16 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  v17 = a1 + v16;
  v18 = a2 + v16;
  *(_QWORD *)v17 = *(_QWORD *)v18;
  *(_BYTE *)(v17 + 8) = *(_BYTE *)(v18 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for VPPInstallRequest()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_233B29070(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;

  v6 = sub_233B57E40();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 24) + 16);
  if (v9 > 1)
    return (v9 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for VPPInstallRequest()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_233B290F8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_233B57E40();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 24) + 16) = -(char)a2;
  return result;
}

uint64_t sub_233B29174()
{
  uint64_t result;
  unint64_t v1;

  result = sub_233B57E40();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for VPPInstallRequest.RequestType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_233B29248 + 4 * byte_233B5B7BA[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_233B2927C + 4 * byte_233B5B7B5[v4]))();
}

uint64_t sub_233B2927C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_233B29284(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x233B2928CLL);
  return result;
}

uint64_t sub_233B29298(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x233B292A0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_233B292A4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_233B292AC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for VPPInstallRequest.RequestType()
{
  return &type metadata for VPPInstallRequest.RequestType;
}

uint64_t storeEnumTagSinglePayload for VPPInstallRequest.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_233B29314 + 4 * byte_233B5B7C4[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_233B29348 + 4 * byte_233B5B7BF[v4]))();
}

uint64_t sub_233B29348(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_233B29350(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x233B29358);
  return result;
}

uint64_t sub_233B29364(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x233B2936CLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_233B29370(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_233B29378(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for VPPInstallRequest.CodingKeys()
{
  return &type metadata for VPPInstallRequest.CodingKeys;
}

unint64_t sub_233B29398()
{
  unint64_t result;

  result = qword_256113680;
  if (!qword_256113680)
  {
    result = MEMORY[0x23493D400](&unk_233B5BA54, &type metadata for VPPInstallRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256113680);
  }
  return result;
}

unint64_t sub_233B293E0()
{
  unint64_t result;

  result = qword_256113688;
  if (!qword_256113688)
  {
    result = MEMORY[0x23493D400](&unk_233B5B9C4, &type metadata for VPPInstallRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256113688);
  }
  return result;
}

unint64_t sub_233B29428()
{
  unint64_t result;

  result = qword_256113690;
  if (!qword_256113690)
  {
    result = MEMORY[0x23493D400](&unk_233B5B9EC, &type metadata for VPPInstallRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256113690);
  }
  return result;
}

uint64_t sub_233B2946C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (sub_233B584D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x8000000233B61860 || (sub_233B584D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x746E656449707061 && a2 == 0xED00007265696669 || (sub_233B584D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x5474736575716572 && a2 == 0xEB00000000657079 || (sub_233B584D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 1684633189 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    v6 = sub_233B584D0();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

unint64_t sub_233B29694()
{
  unint64_t result;

  result = qword_256113698;
  if (!qword_256113698)
  {
    result = MEMORY[0x23493D400](&protocol conformance descriptor for VPPInstallRequest.RequestType, &type metadata for VPPInstallRequest.RequestType);
    atomic_store(result, (unint64_t *)&qword_256113698);
  }
  return result;
}

uint64_t static DDMResetManagedAppInstallHistoryRequest.request()()
{
  return swift_task_switch();
}

uint64_t sub_233B296EC()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  if (qword_25424D4B0 != -1)
    swift_once();
  v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))&asc_256112F70[*(int *)asc_256112F70];
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_233B29788;
  return v3(v0 + 16, (uint64_t)sub_233B297F8, 0);
}

uint64_t sub_233B29788()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 24) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_233B297EC()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_233B297F8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v6;
  _QWORD v7[6];

  v7[4] = a4;
  v7[5] = a5;
  v7[0] = MEMORY[0x24BDAC760];
  v7[1] = 1107296256;
  v7[2] = sub_233B42240;
  v7[3] = &block_descriptor_7;
  v6 = _Block_copy(v7);
  swift_retain();
  swift_release();
  objc_msgSend(a1, sel_resetManagedAppInstallHistoryWithReply_, v6);
  _Block_release(v6);
}

ValueMetadata *type metadata accessor for DDMResetManagedAppInstallHistoryRequest()
{
  return &type metadata for DDMResetManagedAppInstallHistoryRequest;
}

uint64_t OAuthInvalidateRequest.accountID.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t OAuthInvalidateRequest.server.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t OAuthInvalidateRequest.init(accountID:server:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  *a5 = result;
  a5[1] = a2;
  a5[2] = a3;
  a5[3] = a4;
  return result;
}

uint64_t OAuthInvalidateRequest.request()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 56) = *(_QWORD *)v0;
  *(_OWORD *)(v1 + 64) = *(_OWORD *)(v0 + 8);
  *(_QWORD *)(v1 + 80) = *(_QWORD *)(v0 + 24);
  return swift_task_switch();
}

uint64_t sub_233B29934()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t);

  if (qword_25424D4B0 != -1)
    swift_once();
  v2 = v0[9];
  v1 = v0[10];
  v4 = v0[7];
  v3 = v0[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_233B14444();
  sub_233B14488();
  v0[2] = v4;
  v0[3] = v3;
  v0[4] = v2;
  v0[6] = v0 + 2;
  v0[5] = v1;
  v7 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_256112F58 + dword_256112F58);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v5 = (_QWORD *)swift_task_alloc();
  v0[11] = v5;
  *v5 = v0;
  v5[1] = sub_233B29A28;
  return v7((uint64_t)(v0 + 6), (uint64_t)sub_233B29B40, 0);
}

uint64_t sub_233B29A28()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 96) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return swift_task_switch();
}

uint64_t sub_233B29AA0()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_233B29AE0()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_233B29B40(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v8;
  void *v9;
  _QWORD v10[6];

  v8 = (void *)sub_233B57E04();
  v10[4] = a4;
  v10[5] = a5;
  v10[0] = MEMORY[0x24BDAC760];
  v10[1] = 1107296256;
  v10[2] = sub_233B42240;
  v10[3] = &block_descriptor_8;
  v9 = _Block_copy(v10);
  swift_retain();
  swift_release();
  objc_msgSend(a1, sel_oauthInvalidate_reply_, v8, v9);
  _Block_release(v9);

}

uint64_t sub_233B29C00()
{
  _BYTE *v0;

  if (*v0)
    return 0x726576726573;
  else
    return 0x49746E756F636361;
}

uint64_t sub_233B29C3C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_233B2A290(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_233B29C60()
{
  sub_233B29FAC();
  return sub_233B58638();
}

uint64_t sub_233B29C88()
{
  sub_233B29FAC();
  return sub_233B58644();
}

uint64_t OAuthInvalidateRequest.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _QWORD v9[3];
  uint64_t v10;
  char v11;
  char v12;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2561136B0);
  v10 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(v1 + 16);
  v9[1] = *(_QWORD *)(v1 + 24);
  v9[2] = v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_233B29FAC();
  sub_233B5862C();
  v12 = 0;
  sub_233B5844C();
  if (!v2)
  {
    v11 = 1;
    sub_233B5844C();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v6, v4);
}

uint64_t OAuthInvalidateRequest.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t);
  uint64_t v16;
  uint64_t v18;
  char v19;
  char v20;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2561136C0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_233B29FAC();
  sub_233B58608();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  v20 = 0;
  v9 = sub_233B583B0();
  v11 = v10;
  v19 = 1;
  swift_bridgeObjectRetain();
  v12 = sub_233B583B0();
  v14 = v13;
  v15 = *(void (**)(char *, uint64_t))(v6 + 8);
  v16 = v12;
  v15(v8, v5);
  *a2 = v9;
  a2[1] = v11;
  a2[2] = v16;
  a2[3] = v14;
  swift_bridgeObjectRetain();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_233B29F84@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return OAuthInvalidateRequest.init(from:)(a1, a2);
}

uint64_t sub_233B29F98(_QWORD *a1)
{
  return OAuthInvalidateRequest.encode(to:)(a1);
}

unint64_t sub_233B29FAC()
{
  unint64_t result;

  result = qword_2561136B8;
  if (!qword_2561136B8)
  {
    result = MEMORY[0x23493D400](&unk_233B5BC4C, &type metadata for OAuthInvalidateRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2561136B8);
  }
  return result;
}

_QWORD *initializeWithCopy for OAuthInvalidateRequest(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for OAuthInvalidateRequest(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for OAuthInvalidateRequest(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for OAuthInvalidateRequest()
{
  return &type metadata for OAuthInvalidateRequest;
}

uint64_t storeEnumTagSinglePayload for OAuthInvalidateRequest.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_233B2A138 + 4 * byte_233B5BB05[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_233B2A16C + 4 * asc_233B5BB00[v4]))();
}

uint64_t sub_233B2A16C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_233B2A174(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x233B2A17CLL);
  return result;
}

uint64_t sub_233B2A188(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x233B2A190);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_233B2A194(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_233B2A19C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for OAuthInvalidateRequest.CodingKeys()
{
  return &type metadata for OAuthInvalidateRequest.CodingKeys;
}

unint64_t sub_233B2A1BC()
{
  unint64_t result;

  result = qword_2561136C8;
  if (!qword_2561136C8)
  {
    result = MEMORY[0x23493D400](&unk_233B5BC24, &type metadata for OAuthInvalidateRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2561136C8);
  }
  return result;
}

unint64_t sub_233B2A204()
{
  unint64_t result;

  result = qword_2561136D0;
  if (!qword_2561136D0)
  {
    result = MEMORY[0x23493D400](&unk_233B5BB94, &type metadata for OAuthInvalidateRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2561136D0);
  }
  return result;
}

unint64_t sub_233B2A24C()
{
  unint64_t result;

  result = qword_2561136D8;
  if (!qword_2561136D8)
  {
    result = MEMORY[0x23493D400](&unk_233B5BBBC, &type metadata for OAuthInvalidateRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2561136D8);
  }
  return result;
}

uint64_t sub_233B2A290(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x49746E756F636361 && a2 == 0xE900000000000044;
  if (v2 || (sub_233B584D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x726576726573 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_233B584D0();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t XPCApp.appleItemID.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t XPCApp.bundleID.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t XPCApp.installedMetadata.getter@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = v1[3];
  v3 = v1[4];
  v4 = v1[5];
  v5 = v1[6];
  v6 = v1[7];
  v7 = v1[8];
  v8 = v1[9];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  a1[6] = v8;
  return sub_233B2A3DC(v2, v3, v4);
}

uint64_t sub_233B2A3DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  if (a3)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

__n128 XPCApp.installedMetadata.setter(__int128 *a1)
{
  uint64_t v1;
  uint64_t v2;
  __n128 result;
  __n128 v4;
  __int128 v5;
  __int128 v6;

  v5 = a1[1];
  v6 = *a1;
  v4 = (__n128)a1[2];
  v2 = *((_QWORD *)a1 + 6);
  sub_233B2A480(*(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
  *(_OWORD *)(v1 + 24) = v6;
  *(_OWORD *)(v1 + 40) = v5;
  result = v4;
  *(__n128 *)(v1 + 56) = v4;
  *(_QWORD *)(v1 + 72) = v2;
  return result;
}

uint64_t sub_233B2A480(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  if (a3)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t (*XPCApp.installedMetadata.modify())()
{
  return nullsub_1;
}

uint64_t XPCApp.installingMetadata.getter@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = v1[10];
  v3 = v1[11];
  v4 = v1[12];
  v5 = v1[13];
  v6 = v1[14];
  v7 = v1[15];
  v8 = v1[16];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  a1[6] = v8;
  return sub_233B2A3DC(v2, v3, v4);
}

__n128 XPCApp.installingMetadata.setter(__n128 *a1)
{
  __n128 *v1;
  unint64_t v2;
  __n128 result;
  __n128 v4;
  __n128 v5;
  __n128 v6;

  v5 = a1[1];
  v6 = *a1;
  v4 = a1[2];
  v2 = a1[3].n128_u64[0];
  sub_233B2A480(v1[5].n128_i64[0], v1[5].n128_i64[1], v1[6].n128_i64[0]);
  v1[5] = v6;
  v1[6] = v5;
  result = v4;
  v1[7] = v4;
  v1[8].n128_u64[0] = v2;
  return result;
}

uint64_t (*XPCApp.installingMetadata.modify())()
{
  return nullsub_1;
}

uint64_t XPCApp.installErrorData.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 136);
  sub_233B16EB4(v1, *(_QWORD *)(v0 + 144));
  return v1;
}

uint64_t XPCApp.installErrorData.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = sub_233B16EC8(*(_QWORD *)(v2 + 136), *(_QWORD *)(v2 + 144));
  *(_QWORD *)(v2 + 136) = a1;
  *(_QWORD *)(v2 + 144) = a2;
  return result;
}

uint64_t (*XPCApp.installErrorData.modify())()
{
  return nullsub_1;
}

uint64_t XPCApp.Metadata.appleVersionID.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t XPCApp.Metadata.appleVersionID.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*XPCApp.Metadata.appleVersionID.modify())()
{
  return nullsub_1;
}

uint64_t XPCApp.Metadata.version.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t XPCApp.Metadata.version.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 8) = a1;
  *(_QWORD *)(v2 + 16) = a2;
  return result;
}

uint64_t (*XPCApp.Metadata.version.modify())()
{
  return nullsub_1;
}

uint64_t XPCApp.Metadata.shortVersion.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t XPCApp.Metadata.shortVersion.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 24) = a1;
  *(_QWORD *)(v2 + 32) = a2;
  return result;
}

uint64_t (*XPCApp.Metadata.shortVersion.modify())()
{
  return nullsub_1;
}

uint64_t XPCApp.Metadata.account.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t XPCApp.Metadata.account.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 40) = a1;
  *(_QWORD *)(v2 + 48) = a2;
  return result;
}

uint64_t (*XPCApp.Metadata.account.modify())()
{
  return nullsub_1;
}

uint64_t XPCApp.Metadata.init(appleVersionID:version:shortVersion:account:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, _QWORD *a8@<X8>)
{
  *a8 = result;
  a8[1] = a2;
  a8[2] = a3;
  a8[3] = a4;
  a8[4] = a5;
  a8[5] = a6;
  a8[6] = a7;
  return result;
}

uint64_t sub_233B2A75C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_233B2A798 + 4 * byte_233B5BCA0[*v0]))(0x726556656C707061, 0xEE0044496E6F6973);
}

uint64_t sub_233B2A798()
{
  return 0x6E6F6973726576;
}

uint64_t sub_233B2A7B0()
{
  return 0x72655674726F6873;
}

uint64_t sub_233B2A7D0()
{
  return 0x746E756F636361;
}

uint64_t sub_233B2A7E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_233B2C74C(a1, a2);
  *a3 = result;
  return result;
}

void sub_233B2A80C(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_233B2A818()
{
  sub_233B2AA04();
  return sub_233B58638();
}

uint64_t sub_233B2A840()
{
  sub_233B2AA04();
  return sub_233B58644();
}

uint64_t XPCApp.Metadata.encode(to:)(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[6];
  char v13;
  char v14;
  char v15;
  char v16;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_25424D268);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = v1[1];
  v12[4] = v1[2];
  v12[5] = v8;
  v9 = v1[3];
  v12[2] = v1[4];
  v12[3] = v9;
  v10 = v1[5];
  v12[0] = v1[6];
  v12[1] = v10;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_233B2AA04();
  sub_233B5862C();
  v16 = 0;
  sub_233B58488();
  if (!v2)
  {
    v15 = 1;
    sub_233B5844C();
    v14 = 2;
    sub_233B5844C();
    v13 = 3;
    sub_233B5841C();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

unint64_t sub_233B2AA04()
{
  unint64_t result;

  result = qword_25424D360;
  if (!qword_25424D360)
  {
    result = MEMORY[0x23493D400](&unk_233B5BF74, &type metadata for XPCApp.Metadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25424D360);
  }
  return result;
}

uint64_t XPCApp.Metadata.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  char v29;
  char v30;

  v5 = __swift_instantiateConcreteTypeFromMangledName(qword_25424CF30);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_233B2AA04();
  sub_233B58608();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  }
  else
  {
    v30 = 0;
    v9 = sub_233B583EC();
    v29 = 1;
    v10 = sub_233B583B0();
    v13 = v12;
    v26 = v10;
    v28 = 2;
    swift_bridgeObjectRetain();
    v24 = sub_233B583B0();
    v25 = v14;
    v27 = 3;
    swift_bridgeObjectRetain();
    v15 = sub_233B58380();
    v17 = v16;
    v18 = *(void (**)(char *, uint64_t))(v6 + 8);
    v19 = v15;
    v18(v8, v5);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v21 = v25;
    v20 = v26;
    *a2 = v9;
    a2[1] = v20;
    v22 = v24;
    a2[2] = v13;
    a2[3] = v22;
    a2[4] = v21;
    a2[5] = v19;
    a2[6] = v17;
    __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_233B2ACA8@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return XPCApp.Metadata.init(from:)(a1, a2);
}

uint64_t sub_233B2ACBC(_QWORD *a1)
{
  return XPCApp.Metadata.encode(to:)(a1);
}

__n128 XPCApp.init(appleItemID:bundleID:installedMetadata:installingMetadata:installErrorData:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __n128 result;

  v8 = *(_QWORD *)(a4 + 48);
  v9 = *(_QWORD *)(a5 + 48);
  *(_QWORD *)a8 = a1;
  *(_QWORD *)(a8 + 8) = a2;
  *(_QWORD *)(a8 + 16) = a3;
  v10 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(a8 + 24) = *(_OWORD *)a4;
  *(_OWORD *)(a8 + 40) = v10;
  *(_OWORD *)(a8 + 56) = *(_OWORD *)(a4 + 32);
  *(_QWORD *)(a8 + 72) = v8;
  v11 = *(_OWORD *)(a5 + 16);
  *(_OWORD *)(a8 + 80) = *(_OWORD *)a5;
  *(_OWORD *)(a8 + 96) = v11;
  result = *(__n128 *)(a5 + 32);
  *(__n128 *)(a8 + 112) = result;
  *(_QWORD *)(a8 + 128) = v9;
  *(_QWORD *)(a8 + 136) = a6;
  *(_QWORD *)(a8 + 144) = a7;
  return result;
}

uint64_t sub_233B2AD14(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_233B2AD50 + 4 * byte_233B5BCA4[a1]))(0x657449656C707061, 0xEB0000000044496DLL);
}

uint64_t sub_233B2AD50()
{
  return 0x4449656C646E7562;
}

unint64_t sub_233B2AD68()
{
  return 0xD000000000000011;
}

unint64_t sub_233B2ADA0()
{
  return 0xD000000000000010;
}

uint64_t sub_233B2ADBC()
{
  unsigned __int8 *v0;

  return sub_233B2AD14(*v0);
}

uint64_t sub_233B2ADC4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_233B2C940(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_233B2ADE8()
{
  sub_233B2B0F4();
  return sub_233B58638();
}

uint64_t sub_233B2AE10()
{
  sub_233B2B0F4();
  return sub_233B58644();
}

uint64_t XPCApp.encode(to:)(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_25424D260);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = v1[1];
  v34 = v1[2];
  v35 = v7;
  v8 = v1[3];
  v32 = v1[4];
  v33 = v8;
  v31 = v1[5];
  v9 = v1[6];
  v28 = v1[7];
  v29 = v9;
  v10 = v1[8];
  v26 = v1[9];
  v27 = v10;
  v19 = v1[10];
  v20 = v1[11];
  v11 = v1[12];
  v24 = v1[13];
  v25 = v11;
  v23 = v1[14];
  v22 = v1[15];
  v21 = v1[16];
  v12 = v1[18];
  v30 = v1[17];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_233B2B0F4();
  sub_233B5862C();
  LOBYTE(v37) = 0;
  v13 = v36;
  sub_233B58488();
  if (!v13)
  {
    v14 = v31;
    v15 = v32;
    v16 = v33;
    v36 = v12;
    v17 = v30;
    LOBYTE(v37) = 1;
    sub_233B5844C();
    v37 = v16;
    v38 = v15;
    v39 = v14;
    v40 = v29;
    v41 = v28;
    v42 = v27;
    v43 = v26;
    v44 = 2;
    sub_233B2B138();
    sub_233B58434();
    v37 = v19;
    v38 = v20;
    v39 = v25;
    v40 = v24;
    v41 = v23;
    v42 = v22;
    v43 = v21;
    v44 = 3;
    sub_233B58434();
    v37 = v17;
    v38 = v36;
    v44 = 4;
    sub_233B2B17C();
    sub_233B58434();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_233B2B0F4()
{
  unint64_t result;

  result = qword_25424D348;
  if (!qword_25424D348)
  {
    result = MEMORY[0x23493D400](&unk_233B5BF24, &type metadata for XPCApp.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25424D348);
  }
  return result;
}

unint64_t sub_233B2B138()
{
  unint64_t result;

  result = qword_25424D178;
  if (!qword_25424D178)
  {
    result = MEMORY[0x23493D400](&protocol conformance descriptor for XPCApp.Metadata, &type metadata for XPCApp.Metadata);
    atomic_store(result, (unint64_t *)&qword_25424D178);
  }
  return result;
}

unint64_t sub_233B2B17C()
{
  unint64_t result;

  result = qword_25424D290;
  if (!qword_25424D290)
  {
    result = MEMORY[0x23493D400](MEMORY[0x24BDCDDF8], MEMORY[0x24BDCDDE8]);
    atomic_store(result, (unint64_t *)&qword_25424D290);
  }
  return result;
}

_QWORD *XPCApp.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  _BYTE v57[32];
  __int128 v58;
  __int128 v59;
  unint64_t v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  char v80;

  v51 = a2;
  v50 = __swift_instantiateConcreteTypeFromMangledName(&qword_25424CF28);
  v4 = *(_QWORD *)(v50 - 8);
  MEMORY[0x24BDAC7A8](v50);
  v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_233B2B0F4();
  sub_233B58608();
  if (v2)
  {
    v51 = v2;
    __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
    sub_233B2A480(0, 0, 0);
    sub_233B2A480(0, 0, 0);
    return (_QWORD *)sub_233B16EC8(0, 0xF000000000000000);
  }
  else
  {
    v49 = a1;
    v7 = v4;
    LOBYTE(v61) = 0;
    v8 = v50;
    v9 = v6;
    v10 = sub_233B583EC();
    LOBYTE(v61) = 1;
    v11 = sub_233B583B0();
    v13 = v12;
    v41 = v11;
    LOBYTE(v52) = 2;
    sub_233B2B784();
    swift_bridgeObjectRetain();
    sub_233B58398();
    v39 = v10;
    v40 = v13;
    v14 = v63;
    v15 = v64;
    LOBYTE(v52) = 3;
    v46 = v61;
    v47 = v62;
    v48 = v65;
    sub_233B2A3DC(v61, v62, *((uint64_t *)&v62 + 1));
    sub_233B58398();
    v43 = v14;
    v44 = *((_QWORD *)&v15 + 1);
    v38 = v15;
    v16 = v61;
    v17 = v62;
    v18 = v65;
    v80 = 4;
    v36 = v64;
    v37 = v63;
    v45 = *((_QWORD *)&v64 + 1);
    sub_233B2A3DC(v61, v62, *((uint64_t *)&v62 + 1));
    sub_233B2B7C8();
    sub_233B58398();
    v42 = v18;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v8);
    v19 = v78;
    v20 = v79;
    sub_233B16EB4(v78, v79);
    sub_233B16EC8(0, 0xF000000000000000);
    *(_QWORD *)&v52 = v39;
    *((_QWORD *)&v52 + 1) = v41;
    v35 = v16;
    *(_QWORD *)&v53 = v40;
    *((_QWORD *)&v53 + 1) = v46;
    v54 = v47;
    *(_QWORD *)&v55 = v43;
    *((_QWORD *)&v55 + 1) = v38;
    *(_QWORD *)&v56 = v44;
    *((_QWORD *)&v56 + 1) = v48;
    *(_QWORD *)v57 = v16;
    *(_OWORD *)&v57[8] = v17;
    v32 = *((_QWORD *)&v17 + 1);
    v33 = v17;
    *(_QWORD *)&v57[24] = v37;
    *(_QWORD *)&v58 = v36;
    *((_QWORD *)&v58 + 1) = v45;
    *(_QWORD *)&v59 = v18;
    *((_QWORD *)&v59 + 1) = v19;
    v50 = v19;
    v34 = v20;
    v60 = v20;
    sub_233B2B80C(&v52);
    sub_233B16EC8(v19, v20);
    sub_233B2A480(v35, v17, *((uint64_t *)&v17 + 1));
    v21 = v46;
    v22 = v47;
    v23 = v43;
    v24 = v44;
    sub_233B2A480(v46, v47, *((uint64_t *)&v47 + 1));
    v25 = v40;
    swift_bridgeObjectRelease();
    v26 = v58;
    v27 = v51;
    *(_OWORD *)(v51 + 96) = *(_OWORD *)&v57[16];
    *(_OWORD *)(v27 + 112) = v26;
    *(_OWORD *)(v27 + 128) = v59;
    *(_QWORD *)(v27 + 144) = v60;
    v28 = v55;
    *(_OWORD *)(v27 + 32) = v54;
    *(_OWORD *)(v27 + 48) = v28;
    v29 = *(_OWORD *)v57;
    *(_OWORD *)(v27 + 64) = v56;
    *(_OWORD *)(v27 + 80) = v29;
    v30 = v53;
    *(_OWORD *)v27 = v52;
    *(_OWORD *)(v27 + 16) = v30;
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v49);
    v61 = v39;
    *(_QWORD *)&v62 = v41;
    *((_QWORD *)&v62 + 1) = v25;
    v63 = v21;
    v64 = v22;
    v65 = v23;
    v66 = v38;
    v67 = v24;
    v68 = v48;
    v69 = v35;
    v70 = v33;
    v71 = v32;
    v72 = v37;
    v73 = v36;
    v74 = v45;
    v75 = v42;
    v76 = v50;
    v77 = v34;
    return sub_233B2B8D8(&v61);
  }
}

unint64_t sub_233B2B784()
{
  unint64_t result;

  result = qword_25424CF10;
  if (!qword_25424CF10)
  {
    result = MEMORY[0x23493D400](&protocol conformance descriptor for XPCApp.Metadata, &type metadata for XPCApp.Metadata);
    atomic_store(result, (unint64_t *)&qword_25424CF10);
  }
  return result;
}

unint64_t sub_233B2B7C8()
{
  unint64_t result;

  result = qword_25424D280;
  if (!qword_25424D280)
  {
    result = MEMORY[0x23493D400](MEMORY[0x24BDCDE38], MEMORY[0x24BDCDDE8]);
    atomic_store(result, (unint64_t *)&qword_25424D280);
  }
  return result;
}

_QWORD *sub_233B2B80C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v2 = a1[3];
  v3 = a1[4];
  v4 = a1[5];
  v5 = a1[10];
  v6 = a1[11];
  v8 = a1[12];
  v9 = a1[18];
  v10 = a1[17];
  swift_bridgeObjectRetain();
  sub_233B2A3DC(v2, v3, v4);
  sub_233B2A3DC(v5, v6, v8);
  sub_233B16EB4(v10, v9);
  return a1;
}

_QWORD *sub_233B2B8D8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v2 = a1[3];
  v3 = a1[4];
  v4 = a1[5];
  v5 = a1[10];
  v6 = a1[11];
  v8 = a1[12];
  v9 = a1[18];
  v10 = a1[17];
  swift_bridgeObjectRelease();
  sub_233B2A480(v2, v3, v4);
  sub_233B2A480(v5, v6, v8);
  sub_233B16EC8(v10, v9);
  return a1;
}

_QWORD *sub_233B2B9A4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return XPCApp.init(from:)(a1, a2);
}

uint64_t sub_233B2B9B8(_QWORD *a1)
{
  return XPCApp.encode(to:)(a1);
}

uint64_t destroy for XPCApp(_QWORD *a1)
{
  uint64_t result;
  unint64_t v3;

  swift_bridgeObjectRelease();
  if (a1[5])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  result = a1[12];
  if (result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
  }
  v3 = a1[18];
  if (v3 >> 60 != 15)
    return sub_233B13CD8(a1[17], v3);
  return result;
}

uint64_t initializeWithCopy for XPCApp(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t v18;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  if (v4)
  {
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    v5 = *(_QWORD *)(a2 + 48);
    v6 = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 40) = v4;
    *(_QWORD *)(a1 + 48) = v5;
    v7 = *(_QWORD *)(a2 + 64);
    v8 = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 56) = v6;
    *(_QWORD *)(a1 + 64) = v7;
    *(_QWORD *)(a1 + 72) = v8;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v9 = *(_QWORD *)(a2 + 96);
    if (v9)
    {
LABEL_3:
      *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
      v10 = *(_QWORD *)(a2 + 104);
      v11 = *(_QWORD *)(a2 + 112);
      *(_QWORD *)(a1 + 96) = v9;
      *(_QWORD *)(a1 + 104) = v10;
      v12 = *(_QWORD *)(a2 + 120);
      v13 = *(_QWORD *)(a2 + 128);
      *(_QWORD *)(a1 + 112) = v11;
      *(_QWORD *)(a1 + 120) = v12;
      *(_QWORD *)(a1 + 128) = v13;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_6;
    }
  }
  else
  {
    v14 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 40) = v14;
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    v9 = *(_QWORD *)(a2 + 96);
    if (v9)
      goto LABEL_3;
  }
  v15 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v15;
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
LABEL_6:
  v16 = (uint64_t *)(a2 + 136);
  v17 = *(_QWORD *)(a2 + 144);
  if (v17 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 136) = *(_OWORD *)v16;
  }
  else
  {
    v18 = *v16;
    sub_233B13D4C(*v16, v17);
    *(_QWORD *)(a1 + 136) = v18;
    *(_QWORD *)(a1 + 144) = v17;
  }
  return a1;
}

_QWORD *assignWithCopy for XPCApp(_QWORD *a1, _QWORD *a2)
{
  _OWORD *v4;
  __int128 *v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _OWORD *v13;
  __int128 *v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = a1 + 3;
  v5 = (__int128 *)(a2 + 3);
  v6 = a2[5];
  if (a1[5])
  {
    if (v6)
    {
      a1[3] = a2[3];
      a1[4] = a2[4];
      a1[5] = a2[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a1[6] = a2[6];
      a1[7] = a2[7];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a1[8] = a2[8];
      a1[9] = a2[9];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_233B2BE80((uint64_t)(a1 + 3));
      v8 = *(_OWORD *)(a2 + 5);
      v7 = *(_OWORD *)(a2 + 7);
      v9 = *v5;
      a1[9] = a2[9];
      *(_OWORD *)(a1 + 5) = v8;
      *(_OWORD *)(a1 + 7) = v7;
      *v4 = v9;
    }
  }
  else if (v6)
  {
    a1[3] = a2[3];
    a1[4] = a2[4];
    a1[5] = a2[5];
    a1[6] = a2[6];
    a1[7] = a2[7];
    a1[8] = a2[8];
    a1[9] = a2[9];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v10 = *v5;
    v11 = *(_OWORD *)(a2 + 5);
    v12 = *(_OWORD *)(a2 + 7);
    a1[9] = a2[9];
    *(_OWORD *)(a1 + 5) = v11;
    *(_OWORD *)(a1 + 7) = v12;
    *v4 = v10;
  }
  v13 = a1 + 10;
  v14 = (__int128 *)(a2 + 10);
  v15 = a2[12];
  if (a1[12])
  {
    if (v15)
    {
      a1[10] = a2[10];
      a1[11] = a2[11];
      a1[12] = a2[12];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a1[13] = a2[13];
      a1[14] = a2[14];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a1[15] = a2[15];
      a1[16] = a2[16];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_233B2BE80((uint64_t)(a1 + 10));
      v17 = *((_OWORD *)a2 + 6);
      v16 = *((_OWORD *)a2 + 7);
      v18 = *v14;
      a1[16] = a2[16];
      *((_OWORD *)a1 + 6) = v17;
      *((_OWORD *)a1 + 7) = v16;
      *v13 = v18;
    }
  }
  else if (v15)
  {
    a1[10] = a2[10];
    a1[11] = a2[11];
    a1[12] = a2[12];
    a1[13] = a2[13];
    a1[14] = a2[14];
    a1[15] = a2[15];
    a1[16] = a2[16];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v19 = *v14;
    v20 = *((_OWORD *)a2 + 6);
    v21 = *((_OWORD *)a2 + 7);
    a1[16] = a2[16];
    *((_OWORD *)a1 + 6) = v20;
    *((_OWORD *)a1 + 7) = v21;
    *v13 = v19;
  }
  v22 = a2 + 17;
  v23 = a2[18];
  if (a1[18] >> 60 != 15)
  {
    if (v23 >> 60 != 15)
    {
      v25 = *v22;
      sub_233B13D4C(*v22, v23);
      v26 = a1[17];
      v27 = a1[18];
      a1[17] = v25;
      a1[18] = v23;
      sub_233B13CD8(v26, v27);
      return a1;
    }
    sub_233B2BEAC((uint64_t)(a1 + 17));
    goto LABEL_20;
  }
  if (v23 >> 60 == 15)
  {
LABEL_20:
    *(_OWORD *)(a1 + 17) = *(_OWORD *)v22;
    return a1;
  }
  v24 = *v22;
  sub_233B13D4C(*v22, v23);
  a1[17] = v24;
  a1[18] = v23;
  return a1;
}

uint64_t sub_233B2BE80(uint64_t a1)
{
  destroy for XPCApp.Metadata();
  return a1;
}

uint64_t sub_233B2BEAC(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x24BDCDDE8] - 8) + 8))();
  return a1;
}

__n128 __swift_memcpy152_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  result = *(__n128 *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  *(__n128 *)(a1 + 96) = result;
  return result;
}

uint64_t assignWithTake for XPCApp(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 40))
  {
    v4 = *(_QWORD *)(a2 + 40);
    if (v4)
    {
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 40) = v4;
      swift_bridgeObjectRelease();
      v5 = *(_QWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 56) = v5;
      swift_bridgeObjectRelease();
      v6 = *(_QWORD *)(a2 + 72);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a1 + 72) = v6;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    sub_233B2BE80(a1 + 24);
  }
  v7 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = v7;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
LABEL_6:
  if (*(_QWORD *)(a1 + 96))
  {
    v8 = *(_QWORD *)(a2 + 96);
    if (v8)
    {
      *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 96) = v8;
      swift_bridgeObjectRelease();
      v9 = *(_QWORD *)(a2 + 112);
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
      *(_QWORD *)(a1 + 112) = v9;
      swift_bridgeObjectRelease();
      v10 = *(_QWORD *)(a2 + 128);
      *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
      *(_QWORD *)(a1 + 128) = v10;
      swift_bridgeObjectRelease();
      goto LABEL_11;
    }
    sub_233B2BE80(a1 + 80);
  }
  v11 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v11;
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
LABEL_11:
  v12 = (_QWORD *)(a2 + 136);
  v13 = *(_QWORD *)(a1 + 144);
  if (v13 >> 60 != 15)
  {
    v14 = *(_QWORD *)(a2 + 144);
    if (v14 >> 60 != 15)
    {
      v15 = *(_QWORD *)(a1 + 136);
      *(_QWORD *)(a1 + 136) = *v12;
      *(_QWORD *)(a1 + 144) = v14;
      sub_233B13CD8(v15, v13);
      return a1;
    }
    sub_233B2BEAC(a1 + 136);
  }
  *(_OWORD *)(a1 + 136) = *(_OWORD *)v12;
  return a1;
}

uint64_t getEnumTagSinglePayload for XPCApp(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 152))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for XPCApp(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 152) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 152) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for XPCApp()
{
  return &type metadata for XPCApp;
}

uint64_t destroy for XPCApp.Metadata()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for XPCApp.Metadata(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v4;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for XPCApp.Metadata(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy56_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for XPCApp.Metadata(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for XPCApp.Metadata(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for XPCApp.Metadata(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for XPCApp.Metadata()
{
  return &type metadata for XPCApp.Metadata;
}

uint64_t storeEnumTagSinglePayload for XPCApp.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_233B2C3C0 + 4 * byte_233B5BCAE[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_233B2C3F4 + 4 * byte_233B5BCA9[v4]))();
}

uint64_t sub_233B2C3F4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_233B2C3FC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x233B2C404);
  return result;
}

uint64_t sub_233B2C410(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x233B2C418);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_233B2C41C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_233B2C424(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for XPCApp.CodingKeys()
{
  return &type metadata for XPCApp.CodingKeys;
}

uint64_t getEnumTagSinglePayload for XPCApp.Metadata.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for XPCApp.Metadata.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_233B2C51C + 4 * byte_233B5BCB8[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_233B2C550 + 4 * byte_233B5BCB3[v4]))();
}

uint64_t sub_233B2C550(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_233B2C558(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x233B2C560);
  return result;
}

uint64_t sub_233B2C56C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x233B2C574);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_233B2C578(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_233B2C580(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for XPCApp.Metadata.CodingKeys()
{
  return &type metadata for XPCApp.Metadata.CodingKeys;
}

unint64_t sub_233B2C5A0()
{
  unint64_t result;

  result = qword_2561136E0;
  if (!qword_2561136E0)
  {
    result = MEMORY[0x23493D400](&unk_233B5BE44, &type metadata for XPCApp.Metadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2561136E0);
  }
  return result;
}

unint64_t sub_233B2C5E8()
{
  unint64_t result;

  result = qword_2561136E8;
  if (!qword_2561136E8)
  {
    result = MEMORY[0x23493D400](&unk_233B5BEFC, &type metadata for XPCApp.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2561136E8);
  }
  return result;
}

unint64_t sub_233B2C630()
{
  unint64_t result;

  result = qword_25424D358;
  if (!qword_25424D358)
  {
    result = MEMORY[0x23493D400](&unk_233B5BE6C, &type metadata for XPCApp.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25424D358);
  }
  return result;
}

unint64_t sub_233B2C678()
{
  unint64_t result;

  result = qword_25424D350;
  if (!qword_25424D350)
  {
    result = MEMORY[0x23493D400](&unk_233B5BE94, &type metadata for XPCApp.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25424D350);
  }
  return result;
}

unint64_t sub_233B2C6C0()
{
  unint64_t result;

  result = qword_25424D370;
  if (!qword_25424D370)
  {
    result = MEMORY[0x23493D400](&unk_233B5BDB4, &type metadata for XPCApp.Metadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25424D370);
  }
  return result;
}

unint64_t sub_233B2C708()
{
  unint64_t result;

  result = qword_25424D368;
  if (!qword_25424D368)
  {
    result = MEMORY[0x23493D400](&unk_233B5BDDC, &type metadata for XPCApp.Metadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25424D368);
  }
  return result;
}

uint64_t sub_233B2C74C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x726556656C707061 && a2 == 0xEE0044496E6F6973;
  if (v2 || (sub_233B584D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E6F6973726576 && a2 == 0xE700000000000000 || (sub_233B584D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x72655674726F6873 && a2 == 0xEC0000006E6F6973 || (sub_233B584D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x746E756F636361 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = sub_233B584D0();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_233B2C940(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x657449656C707061 && a2 == 0xEB0000000044496DLL;
  if (v2 || (sub_233B584D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x4449656C646E7562 && a2 == 0xE800000000000000 || (sub_233B584D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x8000000233B61880 || (sub_233B584D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x8000000233B618A0 || (sub_233B584D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x8000000233B618C0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    v6 = sub_233B584D0();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t DDMPollForUpdatesRequest.shouldInitiateUpdates.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t DDMPollForUpdatesRequest.shouldInitiateUpdates.setter(uint64_t result)
{
  _BYTE *v1;

  *v1 = result;
  return result;
}

uint64_t (*DDMPollForUpdatesRequest.shouldInitiateUpdates.modify())()
{
  return nullsub_1;
}

uint64_t DDMPollForUpdatesRequest.init(shouldInitiateUpdates:)@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t DDMPollForUpdatesRequest.request()()
{
  _BYTE *v0;
  uint64_t v1;

  *(_BYTE *)(v1 + 41) = *v0;
  return swift_task_switch();
}

uint64_t sub_233B2CBA0()
{
  uint64_t v0;
  char v1;
  _QWORD *v2;
  char *v4;

  if (qword_25424D4B0 != -1)
    swift_once();
  v1 = *(_BYTE *)(v0 + 41);
  sub_233B14370();
  sub_233B143B4();
  *(_BYTE *)(v0 + 40) = v1;
  *(_QWORD *)(v0 + 16) = v0 + 40;
  v4 = (char *)&dword_256112F40 + dword_256112F40;
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 24) = v2;
  *v2 = v0;
  v2[1] = sub_233B27088;
  return ((uint64_t (*)(uint64_t, void (*)(void *, uint64_t, uint64_t, uint64_t, uint64_t), _QWORD))v4)(v0 + 16, sub_233B2CC58, 0);
}

void sub_233B2CC58(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v8;
  void *v9;
  _QWORD v10[6];

  v8 = (void *)sub_233B57E04();
  v10[4] = a4;
  v10[5] = a5;
  v10[0] = MEMORY[0x24BDAC760];
  v10[1] = 1107296256;
  v10[2] = sub_233B42240;
  v10[3] = &block_descriptor_9;
  v9 = _Block_copy(v10);
  swift_retain();
  swift_release();
  objc_msgSend(a1, sel_pollForMediaAPIUpdates_reply_, v8, v9);
  _Block_release(v9);

}

unint64_t sub_233B2CD18()
{
  return 0xD000000000000015;
}

uint64_t sub_233B2CD34@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_233B2D3BC(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_233B2CD5C()
{
  sub_233B2D098();
  return sub_233B58638();
}

uint64_t sub_233B2CD84()
{
  sub_233B2D098();
  return sub_233B58644();
}

uint64_t DDMPollForUpdatesRequest.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2561136F8);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_233B2D098();
  sub_233B5862C();
  sub_233B58458();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t DDMPollForUpdatesRequest.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char v9;
  uint64_t v11;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256113708);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_233B2D098();
  sub_233B58608();
  if (!v2)
  {
    v9 = sub_233B583BC();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v9 & 1;
  }
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
}

uint64_t sub_233B2CF9C@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return DDMPollForUpdatesRequest.init(from:)(a1, a2);
}

uint64_t sub_233B2CFB0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2561136F8);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_233B2D098();
  sub_233B5862C();
  sub_233B58458();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

unint64_t sub_233B2D098()
{
  unint64_t result;

  result = qword_256113700;
  if (!qword_256113700)
  {
    result = MEMORY[0x23493D400](&unk_233B5C11C, &type metadata for DDMPollForUpdatesRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256113700);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for DDMPollForUpdatesRequest(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for DDMPollForUpdatesRequest(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_233B2D1C8 + 4 * byte_233B5BFD5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_233B2D1FC + 4 * byte_233B5BFD0[v4]))();
}

uint64_t sub_233B2D1FC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_233B2D204(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x233B2D20CLL);
  return result;
}

uint64_t sub_233B2D218(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x233B2D220);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_233B2D224(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_233B2D22C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DDMPollForUpdatesRequest()
{
  return &type metadata for DDMPollForUpdatesRequest;
}

uint64_t storeEnumTagSinglePayload for DDMPollForUpdatesRequest.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_233B2D288 + 4 * byte_233B5BFDA[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_233B2D2A8 + 4 * byte_233B5BFDF[v4]))();
}

_BYTE *sub_233B2D288(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_233B2D2A8(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_233B2D2B0(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_233B2D2B8(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_233B2D2C0(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_233B2D2C8(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for DDMPollForUpdatesRequest.CodingKeys()
{
  return &type metadata for DDMPollForUpdatesRequest.CodingKeys;
}

unint64_t sub_233B2D2E8()
{
  unint64_t result;

  result = qword_256113710;
  if (!qword_256113710)
  {
    result = MEMORY[0x23493D400](&unk_233B5C0F4, &type metadata for DDMPollForUpdatesRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256113710);
  }
  return result;
}

unint64_t sub_233B2D330()
{
  unint64_t result;

  result = qword_256113718;
  if (!qword_256113718)
  {
    result = MEMORY[0x23493D400](&unk_233B5C064, &type metadata for DDMPollForUpdatesRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256113718);
  }
  return result;
}

unint64_t sub_233B2D378()
{
  unint64_t result;

  result = qword_256113720;
  if (!qword_256113720)
  {
    result = MEMORY[0x23493D400](&unk_233B5C08C, &type metadata for DDMPollForUpdatesRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256113720);
  }
  return result;
}

uint64_t sub_233B2D3BC(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;

  if (a1 == 0xD000000000000015 && a2 == 0x8000000233B618E0)
  {
    swift_bridgeObjectRelease();
    v2 = 0;
  }
  else
  {
    v3 = sub_233B584D0();
    swift_bridgeObjectRelease();
    v2 = v3 ^ 1;
  }
  return v2 & 1;
}

BOOL static DiagnosticRequestType.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t DiagnosticRequestType.hash(into:)()
{
  return sub_233B5859C();
}

uint64_t sub_233B2D480()
{
  _BYTE *v0;

  if (*v0)
    return 0x7465736572;
  else
    return 0x6574617267696DLL;
}

uint64_t sub_233B2D4B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_233B2E5FC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_233B2D4DC()
{
  sub_233B2D7A0();
  return sub_233B58638();
}

uint64_t sub_233B2D504()
{
  sub_233B2D7A0();
  return sub_233B58644();
}

uint64_t sub_233B2D52C()
{
  sub_233B2D828();
  return sub_233B58638();
}

uint64_t sub_233B2D554()
{
  sub_233B2D828();
  return sub_233B58644();
}

uint64_t sub_233B2D57C()
{
  sub_233B2D7E4();
  return sub_233B58638();
}

uint64_t sub_233B2D5A4()
{
  sub_233B2D7E4();
  return sub_233B58644();
}

uint64_t DiagnosticRequestType.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256113728);
  v16 = *(_QWORD *)(v3 - 8);
  v17 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256113730);
  v14 = *(_QWORD *)(v6 - 8);
  v15 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256113738);
  v18 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_233B2D7A0();
  sub_233B5862C();
  if ((v12 & 1) != 0)
  {
    v20 = 1;
    sub_233B2D7E4();
    sub_233B58410();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v5, v17);
  }
  else
  {
    v19 = 0;
    sub_233B2D828();
    sub_233B58410();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v8, v15);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v11, v9);
}

unint64_t sub_233B2D7A0()
{
  unint64_t result;

  result = qword_256113740;
  if (!qword_256113740)
  {
    result = MEMORY[0x23493D400](&unk_233B5C604, &type metadata for DiagnosticRequestType.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256113740);
  }
  return result;
}

unint64_t sub_233B2D7E4()
{
  unint64_t result;

  result = qword_256113748;
  if (!qword_256113748)
  {
    result = MEMORY[0x23493D400](&unk_233B5C5B4, &type metadata for DiagnosticRequestType.ResetCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256113748);
  }
  return result;
}

unint64_t sub_233B2D828()
{
  unint64_t result;

  result = qword_256113750;
  if (!qword_256113750)
  {
    result = MEMORY[0x23493D400](&unk_233B5C564, &type metadata for DiagnosticRequestType.MigrateCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256113750);
  }
  return result;
}

uint64_t DiagnosticRequestType.hashValue.getter()
{
  sub_233B58590();
  sub_233B5859C();
  return sub_233B585C0();
}

uint64_t DiagnosticRequestType.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v35;

  v30 = a2;
  v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_256113758);
  v32 = *(_QWORD *)(v29 - 8);
  MEMORY[0x24BDAC7A8](v29);
  v31 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_256113760);
  v4 = *(_QWORD *)(v28 - 8);
  MEMORY[0x24BDAC7A8](v28);
  v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_256113768);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_233B2D7A0();
  v11 = v33;
  sub_233B58608();
  if (v11)
    goto LABEL_7;
  v26 = v4;
  v27 = a1;
  v12 = v31;
  v13 = v32;
  v33 = v8;
  v14 = sub_233B583F8();
  v15 = v7;
  if (*(_QWORD *)(v14 + 16) != 1)
  {
    v19 = sub_233B582D8();
    swift_allocError();
    v21 = v20;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256113238);
    *v21 = &type metadata for DiagnosticRequestType;
    sub_233B58374();
    sub_233B582CC();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v19 - 8) + 104))(v21, *MEMORY[0x24BEE26D0], v19);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v33 + 8))(v10, v15);
    a1 = v27;
LABEL_7:
    v24 = (uint64_t)a1;
    return __swift_destroy_boxed_opaque_existential_0(v24);
  }
  v16 = *(_BYTE *)(v14 + 32);
  if ((v16 & 1) != 0)
  {
    LODWORD(v28) = *(unsigned __int8 *)(v14 + 32);
    v35 = 1;
    sub_233B2D7E4();
    sub_233B58368();
    v17 = v33;
    v18 = v30;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v12, v29);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v10, v15);
    v16 = v28;
  }
  else
  {
    v34 = 0;
    sub_233B2D828();
    v22 = v6;
    sub_233B58368();
    v23 = v33;
    v18 = v30;
    (*(void (**)(char *, uint64_t))(v26 + 8))(v22, v28);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v10, v15);
  }
  *v18 = v16;
  v24 = (uint64_t)v27;
  return __swift_destroy_boxed_opaque_existential_0(v24);
}

uint64_t sub_233B2DC08@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return DiagnosticRequestType.init(from:)(a1, a2);
}

uint64_t sub_233B2DC1C(_QWORD *a1)
{
  return DiagnosticRequestType.encode(to:)(a1);
}

void DiagnosticRequest.requestType.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

_BYTE *DiagnosticRequest.init(_:)@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t DiagnosticRequest.request()()
{
  _BYTE *v0;
  uint64_t v1;

  *(_BYTE *)(v1 + 41) = *v0;
  return swift_task_switch();
}

uint64_t sub_233B2DC64()
{
  uint64_t v0;
  char v1;
  _QWORD *v2;
  char *v4;

  if (qword_25424D4B0 != -1)
    swift_once();
  v1 = *(_BYTE *)(v0 + 41);
  sub_233B14288();
  sub_233B142CC();
  *(_BYTE *)(v0 + 40) = v1;
  *(_QWORD *)(v0 + 16) = v0 + 40;
  v4 = (char *)&dword_256112F28 + dword_256112F28;
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 24) = v2;
  *v2 = v0;
  v2[1] = sub_233B27088;
  return ((uint64_t (*)(uint64_t, void (*)(void *, uint64_t, uint64_t, uint64_t, uint64_t), _QWORD))v4)(v0 + 16, sub_233B2DD1C, 0);
}

void sub_233B2DD1C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v8;
  void *v9;
  _QWORD v10[6];

  v8 = (void *)sub_233B57E04();
  v10[4] = a4;
  v10[5] = a5;
  v10[0] = MEMORY[0x24BDAC760];
  v10[1] = 1107296256;
  v10[2] = sub_233B42240;
  v10[3] = &block_descriptor_10;
  v9 = _Block_copy(v10);
  swift_retain();
  swift_release();
  objc_msgSend(a1, sel_handleDiagnostics_reply_, v8, v9);
  _Block_release(v9);

}

uint64_t sub_233B2DDDC()
{
  sub_233B2E06C();
  return sub_233B58638();
}

uint64_t sub_233B2DE04()
{
  sub_233B2E06C();
  return sub_233B58644();
}

uint64_t DiagnosticRequest.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char v7;
  uint64_t v9;
  char v10;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256113778);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_233B2E06C();
  sub_233B5862C();
  v10 = v7;
  sub_233B2E0B0();
  sub_233B5847C();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t DiagnosticRequest.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;
  char v11;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256113790);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_233B2E06C();
  sub_233B58608();
  if (!v2)
  {
    sub_233B2E0F4();
    sub_233B583E0();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v11;
  }
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
}

uint64_t sub_233B2E044@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return DiagnosticRequest.init(from:)(a1, a2);
}

uint64_t sub_233B2E058(_QWORD *a1)
{
  return DiagnosticRequest.encode(to:)(a1);
}

unint64_t sub_233B2E06C()
{
  unint64_t result;

  result = qword_256113780;
  if (!qword_256113780)
  {
    result = MEMORY[0x23493D400](&unk_233B5C514, &type metadata for DiagnosticRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256113780);
  }
  return result;
}

unint64_t sub_233B2E0B0()
{
  unint64_t result;

  result = qword_256113788;
  if (!qword_256113788)
  {
    result = MEMORY[0x23493D400](&protocol conformance descriptor for DiagnosticRequestType, &type metadata for DiagnosticRequestType);
    atomic_store(result, (unint64_t *)&qword_256113788);
  }
  return result;
}

unint64_t sub_233B2E0F4()
{
  unint64_t result;

  result = qword_256113798;
  if (!qword_256113798)
  {
    result = MEMORY[0x23493D400](&protocol conformance descriptor for DiagnosticRequestType, &type metadata for DiagnosticRequestType);
    atomic_store(result, (unint64_t *)&qword_256113798);
  }
  return result;
}

unint64_t sub_233B2E13C()
{
  unint64_t result;

  result = qword_2561137A0;
  if (!qword_2561137A0)
  {
    result = MEMORY[0x23493D400](&protocol conformance descriptor for DiagnosticRequestType, &type metadata for DiagnosticRequestType);
    atomic_store(result, (unint64_t *)&qword_2561137A0);
  }
  return result;
}

ValueMetadata *type metadata accessor for DiagnosticRequestType()
{
  return &type metadata for DiagnosticRequestType;
}

ValueMetadata *type metadata accessor for DiagnosticRequest()
{
  return &type metadata for DiagnosticRequest;
}

uint64_t storeEnumTagSinglePayload for DiagnosticRequest.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_233B2E1E4 + 4 * byte_233B5C170[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_233B2E204 + 4 * byte_233B5C175[v4]))();
}

_BYTE *sub_233B2E1E4(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_233B2E204(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_233B2E20C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_233B2E214(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_233B2E21C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_233B2E224(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for DiagnosticRequest.CodingKeys()
{
  return &type metadata for DiagnosticRequest.CodingKeys;
}

uint64_t _s22ManagedAppDistribution21DiagnosticRequestTypeOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_233B2E28C + 4 * byte_233B5C17F[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_233B2E2C0 + 4 * byte_233B5C17A[v4]))();
}

uint64_t sub_233B2E2C0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_233B2E2C8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x233B2E2D0);
  return result;
}

uint64_t sub_233B2E2DC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x233B2E2E4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_233B2E2E8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_233B2E2F0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DiagnosticRequestType.CodingKeys()
{
  return &type metadata for DiagnosticRequestType.CodingKeys;
}

ValueMetadata *type metadata accessor for DiagnosticRequestType.MigrateCodingKeys()
{
  return &type metadata for DiagnosticRequestType.MigrateCodingKeys;
}

ValueMetadata *type metadata accessor for DiagnosticRequestType.ResetCodingKeys()
{
  return &type metadata for DiagnosticRequestType.ResetCodingKeys;
}

unint64_t sub_233B2E330()
{
  unint64_t result;

  result = qword_2561137A8;
  if (!qword_2561137A8)
  {
    result = MEMORY[0x23493D400](&unk_233B5C434, &type metadata for DiagnosticRequestType.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2561137A8);
  }
  return result;
}

unint64_t sub_233B2E378()
{
  unint64_t result;

  result = qword_2561137B0;
  if (!qword_2561137B0)
  {
    result = MEMORY[0x23493D400](&unk_233B5C4EC, &type metadata for DiagnosticRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2561137B0);
  }
  return result;
}

unint64_t sub_233B2E3C0()
{
  unint64_t result;

  result = qword_2561137B8;
  if (!qword_2561137B8)
  {
    result = MEMORY[0x23493D400](&unk_233B5C45C, &type metadata for DiagnosticRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2561137B8);
  }
  return result;
}

unint64_t sub_233B2E408()
{
  unint64_t result;

  result = qword_2561137C0;
  if (!qword_2561137C0)
  {
    result = MEMORY[0x23493D400](&unk_233B5C484, &type metadata for DiagnosticRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2561137C0);
  }
  return result;
}

unint64_t sub_233B2E450()
{
  unint64_t result;

  result = qword_2561137C8;
  if (!qword_2561137C8)
  {
    result = MEMORY[0x23493D400](&unk_233B5C354, &type metadata for DiagnosticRequestType.MigrateCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2561137C8);
  }
  return result;
}

unint64_t sub_233B2E498()
{
  unint64_t result;

  result = qword_2561137D0;
  if (!qword_2561137D0)
  {
    result = MEMORY[0x23493D400](&unk_233B5C37C, &type metadata for DiagnosticRequestType.MigrateCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2561137D0);
  }
  return result;
}

unint64_t sub_233B2E4E0()
{
  unint64_t result;

  result = qword_2561137D8;
  if (!qword_2561137D8)
  {
    result = MEMORY[0x23493D400](&unk_233B5C304, &type metadata for DiagnosticRequestType.ResetCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2561137D8);
  }
  return result;
}

unint64_t sub_233B2E528()
{
  unint64_t result;

  result = qword_2561137E0;
  if (!qword_2561137E0)
  {
    result = MEMORY[0x23493D400](&unk_233B5C32C, &type metadata for DiagnosticRequestType.ResetCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2561137E0);
  }
  return result;
}

unint64_t sub_233B2E570()
{
  unint64_t result;

  result = qword_2561137E8;
  if (!qword_2561137E8)
  {
    result = MEMORY[0x23493D400](&unk_233B5C3A4, &type metadata for DiagnosticRequestType.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2561137E8);
  }
  return result;
}

unint64_t sub_233B2E5B8()
{
  unint64_t result;

  result = qword_2561137F0;
  if (!qword_2561137F0)
  {
    result = MEMORY[0x23493D400](&unk_233B5C3CC, &type metadata for DiagnosticRequestType.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2561137F0);
  }
  return result;
}

uint64_t sub_233B2E5FC(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6574617267696DLL && a2 == 0xE700000000000000;
  if (v2 || (sub_233B584D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7465736572 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_233B584D0();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t ManagedAppLibrary.ManagedApps.AsyncIterator.next()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return swift_task_switch();
}

uint64_t sub_233B2E6FC()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v3)(_QWORD, _QWORD, _QWORD);

  v3 = (uint64_t (*)(_QWORD, _QWORD, _QWORD))(***(int ***)(v0 + 24) + **(_QWORD **)(v0 + 24));
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 32) = v1;
  *v1 = v0;
  v1[1] = sub_233B2E764;
  return v3(*(_QWORD *)(v0 + 16), 0, 0);
}

uint64_t sub_233B2E764()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t ManagedAppLibrary.ManagedApps.AsyncIterator.next(isolation:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v8;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);

  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(int *)*v3 + *v3);
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v8;
  *v8 = v4;
  v8[1] = sub_233B2E82C;
  return v10(a1, a2, a3);
}

uint64_t sub_233B2E82C()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_233B2E874(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return swift_task_switch();
}

uint64_t sub_233B2E88C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v8;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);

  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(int *)*v3 + *v3);
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v8;
  *v8 = v4;
  v8[1] = sub_233B2E908;
  return v10(a1, a2, a3);
}

uint64_t sub_233B2E908()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t _s22ManagedAppDistribution0aB7LibraryC13availableAppsAC0aF0Vvg_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  id v4;
  unsigned __int8 v5;
  uint64_t v7;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&qword_2561138E8);
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (uint64_t *)((char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = objc_msgSend((id)objc_opt_self(), sel_processInfo);
  v5 = objc_msgSend(v4, sel_isiOSAppOnMac);

  if ((v5 & 1) != 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(qword_2561138B0);
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v1 + 104))(v3, *MEMORY[0x24BEE6A10], v0);
  }
  else
  {
    *v3 = 1;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v1 + 104))(v3, *MEMORY[0x24BEE6A00], v0);
    __swift_instantiateConcreteTypeFromMangledName(qword_2561138B0);
  }
  return sub_233B58170();
}

uint64_t sub_233B2EA94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v5;
  char v6;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&qword_2561138F0);
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = 3;
  v6 = 1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2561138F8);
  sub_233B5811C();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return sub_233B58128();
}

uint64_t sub_233B2EB4C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  os_unfair_lock_s *v8;
  uint64_t v9;
  os_unfair_lock_s *v10;
  uint64_t v12;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2561138F8);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1, v2);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256113900);
  v6 = swift_allocObject();
  (*(void (**)(uint64_t, char *, uint64_t))(v3 + 32))(v6 + *(_QWORD *)(*(_QWORD *)v6 + 88), v5, v2);
  if (qword_25424D4D0 != -1)
    swift_once();
  v7 = qword_25424D460;
  v8 = *(os_unfair_lock_s **)(qword_25424D460 + OBJC_IVAR____TtC22ManagedAppDistribution9XPCClient_lockedStorage);
  v9 = (uint64_t)&v8[4];
  v10 = v8 + 26;
  os_unfair_lock_lock(v8 + 26);
  sub_233B45038(v9, v6, v7);
  os_unfair_lock_unlock(v10);
  return sub_233B58110();
}

void sub_233B2EC94(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_s *v3;
  uint64_t v4;
  os_unfair_lock_s *v5;

  if (qword_25424D4D0 != -1)
    swift_once();
  v3 = *(os_unfair_lock_s **)(qword_25424D460 + OBJC_IVAR____TtC22ManagedAppDistribution9XPCClient_lockedStorage);
  v4 = (uint64_t)&v3[4];
  v5 = v3 + 26;
  os_unfair_lock_lock(v3 + 26);
  sub_233B45290(v4, a2);
  os_unfair_lock_unlock(v5);
}

uint64_t ManagedAppLibrary.ManagedApps.makeAsyncIterator()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&qword_256113808);
  v2 = swift_allocBox();
  __swift_instantiateConcreteTypeFromMangledName(&qword_256113810);
  result = sub_233B58140();
  *a1 = &unk_256113820;
  a1[1] = v2;
  return result;
}

uint64_t sub_233B2ED80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[6] = a2;
  v3[7] = a3;
  v3[5] = a1;
  v3[8] = __swift_instantiateConcreteTypeFromMangledName(&qword_256113808);
  v3[9] = swift_projectBox();
  if (a2)
  {
    swift_getObjectType();
    sub_233B580B0();
  }
  return swift_task_switch();
}

uint64_t sub_233B2EE10()
{
  uint64_t v0;
  _QWORD *v1;

  swift_beginAccess();
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 80) = v1;
  *v1 = v0;
  v1[1] = sub_233B2EE7C;
  return sub_233B5814C();
}

uint64_t sub_233B2EE7C()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  swift_endAccess();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_233B2EED0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_233B2F374;
  return sub_233B2ED80(a1, a2, a3);
}

uint64_t sub_233B2EF3C()
{
  return MEMORY[0x24BEE40A8];
}

unint64_t sub_233B2EF4C()
{
  unint64_t result;

  result = qword_256113838;
  if (!qword_256113838)
  {
    result = MEMORY[0x23493D400](&protocol conformance descriptor for ManagedAppLibrary.ManagedApps.AsyncIterator, &type metadata for ManagedAppLibrary.ManagedApps.AsyncIterator);
    atomic_store(result, (unint64_t *)&qword_256113838);
  }
  return result;
}

uint64_t sub_233B2EF90@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  __swift_instantiateConcreteTypeFromMangledName(&qword_256113808);
  v3 = swift_allocBox();
  __swift_instantiateConcreteTypeFromMangledName(&qword_256113810);
  sub_233B58140();
  *a1 = &unk_2561138E0;
  a1[1] = v3;
  return sub_233B2F330(v1);
}

uint64_t _s11ManagedAppsVwCP(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256113810);
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t _s11ManagedAppsVwxx(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_256113810);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t _s11ManagedAppsVwcp(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256113810);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t _s11ManagedAppsVwca(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256113810);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t _s11ManagedAppsVwtk(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256113810);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t _s11ManagedAppsVwta(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256113810);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t _s11ManagedAppsVwet()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_233B2F194(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256113810);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t _s11ManagedAppsVwst()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_233B2F1E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256113810);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for ManagedAppLibrary.ManagedApps()
{
  uint64_t result;

  result = qword_256113898;
  if (!qword_256113898)
    return swift_getSingletonMetadata();
  return result;
}

void sub_233B2F260()
{
  unint64_t v0;

  sub_233B2F2C8();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

void sub_233B2F2C8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_2561138A8)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_2561138B0);
    v0 = sub_233B58164();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_2561138A8);
  }
}

ValueMetadata *type metadata accessor for ManagedAppLibrary.ManagedApps.AsyncIterator()
{
  return &type metadata for ManagedAppLibrary.ManagedApps.AsyncIterator;
}

uint64_t sub_233B2F330(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ManagedAppLibrary.ManagedApps();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_233B2F36C(uint64_t a1)
{
  uint64_t v1;

  sub_233B2EC94(a1, v1);
}

uint64_t InstallEnterpriseManifestRequest.manifestURL.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_233B57DF8();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t InstallEnterpriseManifestRequest.manifestURL.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_233B57DF8();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t (*InstallEnterpriseManifestRequest.manifestURL.modify())()
{
  return nullsub_1;
}

uint64_t InstallEnterpriseManifestRequest.init(manifestURL:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  v4 = sub_233B57DF8();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
}

uint64_t InstallEnterpriseManifestRequest.request()()
{
  uint64_t v0;
  _QWORD *v1;

  v1[3] = v0;
  type metadata accessor for InstallEnterpriseManifestRequest();
  v1[4] = swift_task_alloc();
  v1[5] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_233B2F49C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  char *v5;

  if (qword_25424D4B0 != -1)
    swift_once();
  v1 = v0[4];
  v2 = v0[5];
  sub_233B2FCB0(v0[3], v2);
  sub_233B08530(&qword_256112F18, (uint64_t (*)(uint64_t))type metadata accessor for InstallEnterpriseManifestRequest, (uint64_t)&protocol conformance descriptor for InstallEnterpriseManifestRequest);
  sub_233B08530(&qword_256112F20, (uint64_t (*)(uint64_t))type metadata accessor for InstallEnterpriseManifestRequest, (uint64_t)&protocol conformance descriptor for InstallEnterpriseManifestRequest);
  sub_233B2FCB0(v2, v1);
  v0[2] = v1;
  v5 = (char *)&dword_256112F10 + dword_256112F10;
  v3 = (_QWORD *)swift_task_alloc();
  v0[6] = v3;
  *v3 = v0;
  v3[1] = sub_233B2F59C;
  return ((uint64_t (*)(_QWORD *, void (*)(void *, uint64_t, uint64_t, uint64_t, uint64_t), _QWORD))v5)(v0 + 2, sub_233B2F6DC, 0);
}

uint64_t sub_233B2F59C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(*v1 + 56) = v0;
  swift_task_dealloc();
  if (!v0)
    sub_233B2FCF4(*(_QWORD *)(v2 + 32));
  return swift_task_switch();
}

uint64_t sub_233B2F608()
{
  uint64_t v0;

  sub_233B2FCF4(*(_QWORD *)(v0 + 40));
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_233B2F650()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  sub_233B2FCF4(*(_QWORD *)(v0 + 32));
  sub_233B2FCF4(v1);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t type metadata accessor for InstallEnterpriseManifestRequest()
{
  uint64_t result;

  result = qword_256113980;
  if (!qword_256113980)
    return swift_getSingletonMetadata();
  return result;
}

void sub_233B2F6DC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v8;
  void *v9;
  _QWORD v10[6];

  v8 = (void *)sub_233B57E04();
  v10[4] = a4;
  v10[5] = a5;
  v10[0] = MEMORY[0x24BDAC760];
  v10[1] = 1107296256;
  v10[2] = sub_233B42240;
  v10[3] = &block_descriptor_11;
  v9 = _Block_copy(v10);
  swift_retain();
  swift_release();
  objc_msgSend(a1, sel_installEnterpriseManifest_reply_, v8, v9);
  _Block_release(v9);

}

uint64_t sub_233B2F79C()
{
  return 0x74736566696E616DLL;
}

uint64_t sub_233B2F7BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x74736566696E616DLL && a2 == 0xEB000000004C5255)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_233B584D0();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_233B2F868()
{
  sub_233B2FD30();
  return sub_233B58638();
}

uint64_t sub_233B2F890()
{
  sub_233B2FD30();
  return sub_233B58644();
}

uint64_t InstallEnterpriseManifestRequest.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_256113910);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_233B2FD30();
  sub_233B5862C();
  sub_233B57DF8();
  sub_233B08530(&qword_256112C98, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDAE0]);
  sub_233B5847C();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t InstallEnterpriseManifestRequest.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;

  v15 = a2;
  v17 = sub_233B57DF8();
  v14 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v16 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256113920);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for InstallEnterpriseManifestRequest();
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_233B2FD30();
  sub_233B58608();
  if (!v2)
  {
    sub_233B08530(&qword_256112CF0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDB10]);
    sub_233B583E0();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v16, v17);
    sub_233B2FD74((uint64_t)v11, v15);
  }
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
}

uint64_t sub_233B2FB8C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return InstallEnterpriseManifestRequest.init(from:)(a1, a2);
}

uint64_t sub_233B2FBA0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_256113910);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_233B2FD30();
  sub_233B5862C();
  sub_233B57DF8();
  sub_233B08530(&qword_256112C98, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDAE0]);
  sub_233B5847C();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_233B2FCB0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for InstallEnterpriseManifestRequest();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_233B2FCF4(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for InstallEnterpriseManifestRequest();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_233B2FD30()
{
  unint64_t result;

  result = qword_256113918;
  if (!qword_256113918)
  {
    result = MEMORY[0x23493D400](&unk_233B5C854, &type metadata for InstallEnterpriseManifestRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256113918);
  }
  return result;
}

uint64_t sub_233B2FD74(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for InstallEnterpriseManifestRequest();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t initializeBufferWithCopyOfBuffer for InstallEnterpriseManifestRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_233B57DF8();
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t destroy for InstallEnterpriseManifestRequest(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_233B57DF8();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t initializeWithCopy for InstallEnterpriseManifestRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_233B57DF8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t assignWithCopy for InstallEnterpriseManifestRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_233B57DF8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t initializeWithTake for InstallEnterpriseManifestRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_233B57DF8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t assignWithTake for InstallEnterpriseManifestRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_233B57DF8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for InstallEnterpriseManifestRequest()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_233B2FF44(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_233B57DF8();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for InstallEnterpriseManifestRequest()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_233B2FF8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_233B57DF8();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t sub_233B2FFCC()
{
  uint64_t result;
  unint64_t v1;

  result = sub_233B57DF8();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for InstallEnterpriseManifestRequest.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_233B30074 + 4 * asc_233B5C700[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_233B30094 + 4 * byte_233B5C705[v4]))();
}

_BYTE *sub_233B30074(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_233B30094(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_233B3009C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_233B300A4(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_233B300AC(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_233B300B4(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for InstallEnterpriseManifestRequest.CodingKeys()
{
  return &type metadata for InstallEnterpriseManifestRequest.CodingKeys;
}

unint64_t sub_233B300D4()
{
  unint64_t result;

  result = qword_2561139B8;
  if (!qword_2561139B8)
  {
    result = MEMORY[0x23493D400](&unk_233B5C82C, &type metadata for InstallEnterpriseManifestRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2561139B8);
  }
  return result;
}

unint64_t sub_233B3011C()
{
  unint64_t result;

  result = qword_2561139C0;
  if (!qword_2561139C0)
  {
    result = MEMORY[0x23493D400](&unk_233B5C79C, &type metadata for InstallEnterpriseManifestRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2561139C0);
  }
  return result;
}

unint64_t sub_233B30164()
{
  unint64_t result;

  result = qword_2561139C8;
  if (!qword_2561139C8)
  {
    result = MEMORY[0x23493D400](&unk_233B5C7C4, &type metadata for InstallEnterpriseManifestRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2561139C8);
  }
  return result;
}

uint64_t ServiceConnection.withAsyncService<each A>(arguments:body:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t TupleTypeMetadata;
  unint64_t v11;
  uint64_t v13;
  unint64_t v14;
  __int128 *v15;
  _OWORD *v16;
  unint64_t v17;
  __int128 v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;

  v8[8] = a7;
  v8[9] = v7;
  v8[6] = a5;
  v8[7] = a6;
  v8[4] = a3;
  v8[5] = a4;
  v9 = (_QWORD *)(a5 & 0xFFFFFFFFFFFFFFFELL);
  v8[2] = a1;
  v8[3] = a2;
  if (a4 == 1)
  {
    TupleTypeMetadata = *v9;
    v11 = 16;
  }
  else
  {
    v11 = (8 * a4 + 15) & 0xFFFFFFFFFFFFFFF0;
    v13 = swift_task_alloc();
    if (a4)
    {
      v14 = 0;
      if (a4 < 4)
        goto LABEL_9;
      if ((unint64_t)(v13 - (_QWORD)v9) < 0x20)
        goto LABEL_9;
      v14 = a4 & 0xFFFFFFFFFFFFFFFCLL;
      v15 = (__int128 *)(v9 + 2);
      v16 = (_OWORD *)(v13 + 16);
      v17 = a4 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v18 = *v15;
        *(v16 - 1) = *(v15 - 1);
        *v16 = v18;
        v15 += 2;
        v16 += 2;
        v17 -= 4;
      }
      while (v17);
      if (v14 != a4)
      {
LABEL_9:
        v19 = a4 - v14;
        v20 = v14;
        v21 = (_QWORD *)(v13 + 8 * v14);
        v22 = &v9[v20];
        do
        {
          v23 = *v22++;
          *v21++ = v23;
          --v19;
        }
        while (v19);
      }
    }
    TupleTypeMetadata = swift_getTupleTypeMetadata();
    swift_task_dealloc();
  }
  v8[10] = v11;
  v8[11] = TupleTypeMetadata;
  v8[12] = *(_QWORD *)(TupleTypeMetadata - 8);
  v8[13] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_233B302D8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  v1 = v0[5];
  v2 = swift_task_alloc();
  v0[14] = v2;
  if (v1)
  {
    v3 = 0;
    v4 = v0[6] & 0xFFFFFFFFFFFFFFFELL;
    v5 = 32;
    do
    {
      v8 = v0[5];
      if (v8 == 1)
        v6 = 0;
      else
        v6 = *(_DWORD *)(v0[11] + v5);
      v7 = v0[13] + v6;
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)(v4 + 8 * v3) - 8) + 16))(v7, *(_QWORD *)(v0[2] + 8 * v3));
      *(_QWORD *)(v2 + 8 * v3++) = v7;
      v5 += 16;
    }
    while (v3 != v8);
  }
  v9 = (_QWORD *)swift_task_alloc();
  v0[15] = v9;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_256112EC8);
  sub_233B309E0(&qword_2561139E0, MEMORY[0x24BEE40A0], MEMORY[0x24BEE4AC0]);
  sub_233B309E0(&qword_2561139E8, MEMORY[0x24BEE4080], MEMORY[0x24BEE4AA8]);
  *v9 = v0;
  v9[1] = sub_233B30430;
  return ServiceConnection.withAsyncService<each A, B>(arguments:body:)((uint64_t)(v0 + 17), v2, v0[3], v0[4], v0[5], v0[6], v10, v0[7]);
}

uint64_t sub_233B30430()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = *(_QWORD **)v1;
  *(_QWORD *)(*(_QWORD *)v1 + 128) = v0;
  swift_task_dealloc();
  if (!v0)
    (*(void (**)(_QWORD, _QWORD))(v2[12] + 8))(v2[13], v2[11]);
  return swift_task_switch();
}

uint64_t sub_233B304A4()
{
  uint64_t v0;

  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_233B304E0()
{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 96) + 8))(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 88));
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t ServiceConnection.withAsyncService<each A, B>(arguments:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t TupleTypeMetadata;
  uint64_t v13;
  unint64_t v14;
  __int128 *v15;
  _OWORD *v16;
  unint64_t v17;
  __int128 v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  __int128 v25;
  uint64_t v26;

  *(_QWORD *)(v9 + 136) = v26;
  *(_QWORD *)(v9 + 144) = v8;
  *(_OWORD *)(v9 + 120) = v25;
  *(_QWORD *)(v9 + 104) = a7;
  *(_QWORD *)(v9 + 112) = a8;
  *(_QWORD *)(v9 + 88) = a5;
  *(_QWORD *)(v9 + 96) = a6;
  *(_QWORD *)(v9 + 72) = a3;
  *(_QWORD *)(v9 + 80) = a4;
  *(_QWORD *)(v9 + 56) = a1;
  *(_QWORD *)(v9 + 64) = a2;
  *(_QWORD *)(v9 + 152) = *v8;
  v10 = (_QWORD *)(a6 & 0xFFFFFFFFFFFFFFFELL);
  if (a5 == 1)
  {
    TupleTypeMetadata = *v10;
  }
  else
  {
    v13 = swift_task_alloc();
    if (a5)
    {
      v14 = 0;
      if (a5 < 4)
        goto LABEL_9;
      if ((unint64_t)(v13 - (_QWORD)v10) < 0x20)
        goto LABEL_9;
      v14 = a5 & 0xFFFFFFFFFFFFFFFCLL;
      v15 = (__int128 *)(v10 + 2);
      v16 = (_OWORD *)(v13 + 16);
      v17 = a5 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v18 = *v15;
        *(v16 - 1) = *(v15 - 1);
        *v16 = v18;
        v15 += 2;
        v16 += 2;
        v17 -= 4;
      }
      while (v17);
      if (v14 != a5)
      {
LABEL_9:
        v19 = a5 - v14;
        v20 = v14;
        v21 = (_QWORD *)(v13 + 8 * v14);
        v22 = &v10[v20];
        do
        {
          v23 = *v22++;
          *v21++ = v23;
          --v19;
        }
        while (v19);
      }
    }
    TupleTypeMetadata = swift_getTupleTypeMetadata();
    swift_task_dealloc();
  }
  *(_QWORD *)(v9 + 160) = TupleTypeMetadata;
  *(_QWORD *)(v9 + 168) = *(_QWORD *)(TupleTypeMetadata - 8);
  *(_QWORD *)(v9 + 176) = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_233B30670()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;

  *(_QWORD *)(v0 + 40) = &type metadata for FeatureFlag;
  *(_QWORD *)(v0 + 48) = sub_233B139EC();
  v1 = sub_233B57E88();
  __swift_destroy_boxed_opaque_existential_0(v0 + 16);
  if ((v1 & 1) != 0)
  {
    v2 = *(_QWORD *)(v0 + 88);
    v3 = (uint64_t *)swift_task_alloc();
    *(_QWORD *)(v0 + 184) = v3;
    if (v2)
    {
      v4 = 0;
      v5 = *(_QWORD *)(v0 + 96) & 0xFFFFFFFFFFFFFFFELL;
      v6 = 32;
      do
      {
        v9 = *(_QWORD *)(v0 + 88);
        if (v9 == 1)
          v7 = 0;
        else
          v7 = *(_DWORD *)(*(_QWORD *)(v0 + 160) + v6);
        v8 = *(_QWORD *)(v0 + 176) + v7;
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)(v5 + 8 * v4) - 8) + 16))(v8, *(_QWORD *)(*(_QWORD *)(v0 + 64) + 8 * v4));
        v3[v4++] = v8;
        v6 += 16;
      }
      while (v4 != v9);
      v11 = *(_QWORD *)(v0 + 88);
    }
    else
    {
      v11 = 0;
    }
    v12 = encodeXPCValues<each A>(_:)(v3, v11, *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 120));
    v14 = v13;
    *(_QWORD *)(v0 + 192) = v12;
    *(_QWORD *)(v0 + 200) = v13;
    v16 = *(_QWORD *)(v0 + 144);
    v17 = *(_QWORD *)(v0 + 152);
    v18 = *(_QWORD *)(v0 + 88);
    v23 = *(_OWORD *)(v0 + 112);
    v24 = *(_OWORD *)(v0 + 96);
    v22 = *(_OWORD *)(v0 + 128);
    v25 = *(_OWORD *)(v0 + 72);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 168) + 8))(*(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 160));
    v19 = *(_QWORD *)(v16 + 16);
    v20 = swift_task_alloc();
    *(_QWORD *)(v0 + 208) = v20;
    *(_QWORD *)(v20 + 16) = v18;
    *(_OWORD *)(v20 + 24) = v24;
    *(_OWORD *)(v20 + 40) = v23;
    *(_OWORD *)(v20 + 56) = v22;
    *(_QWORD *)(v20 + 72) = v19;
    *(_OWORD *)(v20 + 80) = v25;
    *(_QWORD *)(v20 + 96) = v12;
    *(_QWORD *)(v20 + 104) = v14;
    *(_QWORD *)(v20 + 112) = v17;
    v21 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 216) = v21;
    *v21 = v0;
    v21[1] = sub_233B308DC;
    return sub_233B58530();
  }
  else
  {
    sub_233B13A30();
    swift_allocError();
    *v10 = 0;
    swift_willThrow();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_233B308DC()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 224) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_233B30948()
{
  uint64_t v0;

  sub_233B13CD8(*(_QWORD *)(v0 + 192), *(_QWORD *)(v0 + 200));
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_233B30990()
{
  uint64_t v0;

  sub_233B13CD8(*(_QWORD *)(v0 + 192), *(_QWORD *)(v0 + 200));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_233B309E0(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256112EC8);
    v8 = a2;
    result = MEMORY[0x23493D400](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t ServiceConnection.withSyncService<each A, B>(arguments:body:)@<X0>(uint64_t *a1@<X0>, void (*a2)(_QWORD, uint64_t, unint64_t, uint64_t (*)(uint64_t a1, unint64_t a2), _QWORD *)@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t TupleTypeMetadata;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  __int128 *v24;
  _OWORD *v25;
  unint64_t v26;
  __int128 v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char v35;
  uint64_t v36;
  void *v37;
  _QWORD *v38;
  void *v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  int *v44;
  char **v45;
  unint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  _BYTE *v52;
  _BYTE *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  _QWORD *v60;
  uint64_t WitnessTablePack;
  uint64_t v62;
  uint64_t v63;
  _QWORD v64[2];
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(_QWORD, uint64_t, unint64_t, uint64_t (*)(uint64_t, unint64_t), _QWORD *);
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD aBlock[3];
  ValueMetadata *v83;
  unint64_t v84;
  _QWORD *v85;
  _BYTE v86[40];
  uint64_t v87;

  v12 = v11;
  v80 = a5;
  v81 = a8;
  v79 = a7;
  v74 = a3;
  v75 = a2;
  v71 = a9;
  v72 = *v12;
  v16 = (uint64_t *)(a5 & 0xFFFFFFFFFFFFFFFELL);
  v17 = sub_233B13A30();
  v70 = sub_233B585CC();
  v18 = MEMORY[0x24BDAC7A8](v70);
  v73 = (uint64_t)v64 - v19;
  if (a4 == 1)
  {
    TupleTypeMetadata = *v16;
  }
  else
  {
    MEMORY[0x24BDAC7A8](v18);
    v22 = (char *)v64 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (a4)
    {
      v23 = 0;
      if (a4 < 4)
        goto LABEL_9;
      if ((unint64_t)(v22 - (char *)v16) < 0x20)
        goto LABEL_9;
      v23 = a4 & 0xFFFFFFFFFFFFFFFCLL;
      v24 = (__int128 *)(v16 + 2);
      v25 = v22 + 16;
      v26 = a4 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v27 = *v24;
        *(v25 - 1) = *(v24 - 1);
        *v25 = v27;
        v24 += 2;
        v25 += 2;
        v26 -= 4;
      }
      while (v26);
      if (v23 != a4)
      {
LABEL_9:
        v28 = a4 - v23;
        v29 = v23;
        v30 = &v22[8 * v23];
        v31 = &v16[v29];
        do
        {
          v32 = *v31++;
          *(_QWORD *)v30 = v32;
          v30 += 8;
          --v28;
        }
        while (v28);
      }
    }
    TupleTypeMetadata = swift_getTupleTypeMetadata();
  }
  v78 = TupleTypeMetadata;
  v76 = *(_QWORD *)(TupleTypeMetadata - 8);
  MEMORY[0x24BDAC7A8](TupleTypeMetadata);
  v34 = (char *)v64 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v83 = &type metadata for FeatureFlag;
  v84 = sub_233B139EC();
  v35 = sub_233B57E88();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)aBlock);
  if ((v35 & 1) != 0)
  {
    v69 = v64;
    v68 = v17;
    type metadata accessor for SyncXPCResult(0, a6, (uint64_t)&type metadata for ManagedAppDistributionError, v17);
    v36 = SyncXPCResult.__allocating_init()();
    v37 = (void *)v12[2];
    v38 = (_QWORD *)swift_allocObject();
    v38[2] = a4;
    v38[3] = swift_allocateMetadataPack();
    v38[4] = swift_allocateWitnessTablePack();
    v38[5] = swift_allocateWitnessTablePack();
    v38[6] = a10;
    v66 = a10;
    v67 = a11;
    v38[7] = a11;
    v38[8] = v36;
    v84 = (unint64_t)sub_233B326B0;
    v85 = v38;
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_233B31DD0;
    v83 = (ValueMetadata *)&block_descriptor_12;
    v39 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    v40 = objc_msgSend(v37, sel_synchronousRemoteObjectProxyWithErrorHandler_, v39);
    _Block_release(v39);
    sub_233B58218();
    swift_unknownObjectRelease();
    sub_233B03518((uint64_t)v86, (uint64_t)aBlock);
    __swift_instantiateConcreteTypeFromMangledName(&qword_25424D490);
    v41 = swift_dynamicCast();
    if ((_DWORD)v41)
    {
      v65 = v36;
      v64[1] = v64;
      v64[0] = v87;
      MEMORY[0x24BDAC7A8](v41);
      v43 = (_QWORD *)((char *)v64 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0));
      if (a4)
      {
        v44 = (int *)(v78 + 32);
        v45 = (char **)((char *)v64 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0));
        v46 = a4;
        do
        {
          if (a4 == 1)
            v47 = 0;
          else
            v47 = *v44;
          v49 = *v16++;
          v48 = v49;
          v50 = &v34[v47];
          v51 = *a1++;
          (*(void (**)(char *, uint64_t))(*(_QWORD *)(v48 - 8) + 16))(v50, v51);
          *v45++ = v50;
          v44 += 4;
          --v46;
        }
        while (v46);
      }
      v55 = v77;
      v56 = encodeXPCValues<each A>(_:)(v43, a4, v80, v81);
      if (v55)
      {
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v86);
        swift_unknownObjectRelease();
        swift_release();
        return (*(uint64_t (**)(char *, uint64_t))(v76 + 8))(v34, v78);
      }
      else
      {
        v58 = v56;
        v59 = v57;
        (*(void (**)(char *, uint64_t))(v76 + 8))(v34, v78);
        v60 = (_QWORD *)swift_allocObject();
        v60[2] = a4;
        v60[3] = swift_allocateMetadataPack();
        v60[4] = swift_allocateWitnessTablePack();
        WitnessTablePack = swift_allocateWitnessTablePack();
        v62 = v66;
        v60[5] = WitnessTablePack;
        v60[6] = v62;
        v63 = v65;
        v60[7] = v67;
        v60[8] = v63;
        v60[9] = v72;
        swift_retain();
        v75(v64[0], v58, v59, sub_233B327C0, v60);
        swift_release();
        SyncXPCResult.result.getter(v73);
        sub_233B327F0(v70, (uint64_t)aBlock, v71);
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v86);
        swift_release();
        sub_233B13CD8(v58, v59);
        return swift_unknownObjectRelease();
      }
    }
    else
    {
      swift_allocError();
      *v54 = 0;
      swift_willThrow();
      swift_release();
      return __swift_destroy_boxed_opaque_existential_0((uint64_t)v86);
    }
  }
  else
  {
    swift_allocError();
    *v52 = 0;
    return swift_willThrow();
  }
}

uint64_t ServiceConnection.withSyncService<each A>(arguments:body:)(uint64_t *a1, void (*a2)(_QWORD, uint64_t, unint64_t, uint64_t (*)(uint64_t a1, unint64_t a2), _QWORD *), uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t TupleTypeMetadata;
  char *v12;
  unint64_t v13;
  __int128 *v14;
  _OWORD *v15;
  unint64_t v16;
  __int128 v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t *v26;
  int *v27;
  char **v28;
  unint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD v39[2];
  uint64_t v40;
  _QWORD *v41;
  void (*v42)(_QWORD, uint64_t, unint64_t, uint64_t (*)(uint64_t, unint64_t), _QWORD *);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;

  v45 = a6;
  v46 = a7;
  v42 = a2;
  v43 = a3;
  v8 = a1;
  v44 = a5;
  v9 = (uint64_t *)(a5 & 0xFFFFFFFFFFFFFFFELL);
  v10 = 8 * a4;
  if (a4 == 1)
  {
    TupleTypeMetadata = *v9;
  }
  else
  {
    MEMORY[0x24BDAC7A8](a1);
    v12 = (char *)v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (a4)
    {
      v13 = 0;
      if (a4 < 4)
        goto LABEL_9;
      if ((unint64_t)(v12 - (char *)v9) < 0x20)
        goto LABEL_9;
      v13 = a4 & 0xFFFFFFFFFFFFFFFCLL;
      v14 = (__int128 *)(v9 + 2);
      v15 = v12 + 16;
      v16 = a4 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v17 = *v14;
        *(v15 - 1) = *(v14 - 1);
        *v15 = v17;
        v14 += 2;
        v15 += 2;
        v16 -= 4;
      }
      while (v16);
      if (v13 != a4)
      {
LABEL_9:
        v18 = a4 - v13;
        v19 = v13;
        v20 = &v12[8 * v13];
        v21 = &v9[v19];
        do
        {
          v22 = *v21++;
          *(_QWORD *)v20 = v22;
          v20 += 8;
          --v18;
        }
        while (v18);
      }
    }
    TupleTypeMetadata = swift_getTupleTypeMetadata();
  }
  v41 = v39;
  v47 = TupleTypeMetadata;
  v40 = *(_QWORD *)(TupleTypeMetadata - 8);
  v23 = MEMORY[0x24BDAC7A8](TupleTypeMetadata);
  v25 = (char *)v39 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39[1] = v39;
  MEMORY[0x24BDAC7A8](v23);
  v26 = (_QWORD *)((char *)v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (a4)
  {
    v27 = (int *)(v47 + 32);
    v28 = (char **)((char *)v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
    v29 = a4;
    do
    {
      if (a4 == 1)
        v30 = 0;
      else
        v30 = *v27;
      v32 = *v9++;
      v31 = v32;
      v33 = &v25[v30];
      v34 = *v8++;
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(v33, v34);
      *v28++ = v33;
      v27 += 4;
      --v29;
    }
    while (v29);
  }
  v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_256112EC8);
  v36 = sub_233B309E0(&qword_2561139E0, MEMORY[0x24BEE40A0], MEMORY[0x24BEE4AC0]);
  v37 = sub_233B309E0(&qword_2561139E8, MEMORY[0x24BEE4080], MEMORY[0x24BEE4AA8]);
  ServiceConnection.withSyncService<each A, B>(arguments:body:)(v26, v42, v43, a4, v44, v35, v45, v46, (uint64_t)&v48, v36, v37);
  return (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v25, v47);
}

uint64_t sub_233B31350()
{
  uint64_t result;

  type metadata accessor for ServiceConnection();
  swift_allocObject();
  result = ServiceConnection.init()();
  if (result)
    qword_25424D458 = result;
  else
    __break(1u);
  return result;
}

uint64_t ServiceConnection.__allocating_init()()
{
  swift_allocObject();
  return ServiceConnection.init()();
}

uint64_t static ServiceConnection.shared.getter()
{
  if (qword_25424D4B0 != -1)
    swift_once();
  return swift_retain();
}

id ServiceConnection.connection.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 16);
}

uint64_t ServiceConnection.init()()
{
  uint64_t v0;
  char v1;
  id v2;
  void *v3;
  id v4;
  void *v5;
  id v6;
  id v7;
  uint64_t v8;
  id v9;
  id v10;
  id v11;
  void *v12;
  uint64_t v13;
  void *v14;
  id v15;
  void *v16;
  void *v17;
  id v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t);
  ValueMetadata *v23;
  unint64_t v24;
  uint64_t v25;

  v23 = &type metadata for FeatureFlag;
  v24 = sub_233B139EC();
  v1 = sub_233B57E88();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)&v20);
  if ((v1 & 1) != 0)
  {
    v2 = objc_allocWithZone(MEMORY[0x24BDD1988]);
    v3 = (void *)sub_233B57F6C();
    v4 = objc_msgSend(v2, sel_initWithMachServiceName_options_, v3, 0);

    *(_QWORD *)(v0 + 16) = v4;
    v5 = (void *)objc_opt_self();
    v6 = v4;
    v7 = objc_msgSend(v5, sel_interfaceWithProtocol_, &unk_256124220);
    objc_msgSend(v6, sel_setExportedInterface_, v7);

    v8 = qword_25424D4D0;
    v9 = *(id *)(v0 + 16);
    if (v8 != -1)
      swift_once();
    objc_msgSend(v9, sel_setExportedObject_, qword_25424D460);

    v10 = *(id *)(v0 + 16);
    v11 = objc_msgSend(v5, sel_interfaceWithProtocol_, &unk_256124B88);
    objc_msgSend(v10, sel_setRemoteObjectInterface_, v11);

    v12 = *(void **)(v0 + 16);
    v24 = (unint64_t)sub_233B316AC;
    v25 = 0;
    v13 = MEMORY[0x24BDAC760];
    v20 = MEMORY[0x24BDAC760];
    v21 = 1107296256;
    v22 = sub_233B316B8;
    v23 = (ValueMetadata *)&block_descriptor_9;
    v14 = _Block_copy(&v20);
    v15 = v12;
    objc_msgSend(v15, sel_setInterruptionHandler_, v14);
    _Block_release(v14);

    v16 = *(void **)(v0 + 16);
    v24 = (unint64_t)sub_233B316E4;
    v25 = 0;
    v20 = v13;
    v21 = 1107296256;
    v22 = sub_233B316B8;
    v23 = (ValueMetadata *)&block_descriptor_12_0;
    v17 = _Block_copy(&v20);
    v18 = v16;
    objc_msgSend(v18, sel_setInvalidationHandler_, v17);
    _Block_release(v17);

    objc_msgSend(*(id *)(v0 + 16), sel_resume);
  }
  else
  {
    swift_deallocPartialClassInstance();
    return 0;
  }
  return v0;
}

void sub_233B316AC()
{
  sub_233B316F0("Daemon connection interrupted");
}

uint64_t sub_233B316B8(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = swift_retain();
  v1(v2);
  return swift_release();
}

void sub_233B316E4()
{
  sub_233B316F0("Daemon connection invalidated");
}

void sub_233B316F0(const char *a1)
{
  uint64_t v2;
  os_log_type_t v3;
  uint8_t *v4;
  NSObject *oslog;

  if (qword_25424D3D0 != -1)
    swift_once();
  v2 = sub_233B57EC4();
  __swift_project_value_buffer(v2, (uint64_t)qword_25424D3B8);
  oslog = sub_233B57EAC();
  v3 = sub_233B581C4();
  if (os_log_type_enabled(oslog, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_233B00000, oslog, v3, a1, v4, 2u);
    MEMORY[0x23493D4CC](v4, -1, -1);
  }

}

uint64_t ServiceConnection.deinit()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 16);
  objc_msgSend(v1, sel_invalidate);

  return v0;
}

uint64_t ServiceConnection.__deallocating_deinit()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 16);
  objc_msgSend(v1, sel_invalidate);

  return swift_deallocClassInstance();
}

uint64_t sub_233B31834(uint64_t a1, void *a2, void (*a3)(uint64_t, uint64_t, uint64_t, uint64_t (*)(uint64_t a1, unint64_t a2), char *), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  void (*v21)(char *, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t WitnessTablePack;
  uint64_t v27;
  void (*v28)(char *, char *, uint64_t);
  void *v29;
  id v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  uint64_t MetadataPack;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  _QWORD v42[2];
  void (*v43)(char *, uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(uint64_t, uint64_t, uint64_t, uint64_t (*)(uint64_t, unint64_t), char *);
  id v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58[4];
  _QWORD aBlock[7];

  v47 = a7;
  v48 = a5;
  v49 = a6;
  v50 = a4;
  v51 = a3;
  v52 = a2;
  v55 = a13;
  v56 = a14;
  v54 = a12;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25424D5A0);
  v16 = sub_233B580E0();
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(_QWORD *)(v17 + 64);
  MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)v42 - v19;
  v21 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 16);
  v53 = a1;
  v43 = v21;
  v21(v20, a1, v16);
  v22 = *(unsigned __int8 *)(v17 + 80);
  v23 = (v22 + 72) & ~v22;
  v24 = v23 + v18;
  v42[1] = v22 | 7;
  v25 = (char *)swift_allocObject();
  *((_QWORD *)v25 + 2) = a8;
  v44 = a9;
  *((_QWORD *)v25 + 3) = swift_allocateMetadataPack();
  *((_QWORD *)v25 + 4) = a10;
  v45 = a10;
  v46 = a11;
  *((_QWORD *)v25 + 5) = swift_allocateWitnessTablePack();
  WitnessTablePack = swift_allocateWitnessTablePack();
  v27 = v55;
  *((_QWORD *)v25 + 6) = WitnessTablePack;
  *((_QWORD *)v25 + 7) = v27;
  *((_QWORD *)v25 + 8) = v56;
  v28 = *(void (**)(char *, char *, uint64_t))(v17 + 32);
  v28(&v25[v23], v20, v16);
  aBlock[4] = sub_233B3297C;
  aBlock[5] = v25;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_233B31DD0;
  aBlock[3] = &block_descriptor_17;
  v29 = _Block_copy(aBlock);
  swift_release();
  v30 = objc_msgSend(v52, sel_remoteObjectProxyWithErrorHandler_, v29);
  _Block_release(v29);
  sub_233B58218();
  swift_unknownObjectRelease();
  sub_233B03518((uint64_t)aBlock, (uint64_t)v58);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25424D490);
  if ((swift_dynamicCast() & 1) != 0)
  {
    v31 = v57;
    v43(v20, v53, v16);
    v32 = (v24 + 7) & 0xFFFFFFFFFFFFFFF8;
    v33 = (char *)swift_allocObject();
    *((_QWORD *)v33 + 2) = a8;
    MetadataPack = swift_allocateMetadataPack();
    v35 = v45;
    *((_QWORD *)v33 + 3) = MetadataPack;
    *((_QWORD *)v33 + 4) = v35;
    *((_QWORD *)v33 + 5) = swift_allocateWitnessTablePack();
    v36 = swift_allocateWitnessTablePack();
    v37 = v55;
    *((_QWORD *)v33 + 6) = v36;
    *((_QWORD *)v33 + 7) = v37;
    *((_QWORD *)v33 + 8) = v56;
    v28(&v33[v23], v20, v16);
    v38 = v48;
    *(_QWORD *)&v33[v32] = v47;
    v51(v31, v38, v49, sub_233B32AB8, v33);
    swift_unknownObjectRelease();
    swift_release();
  }
  else
  {
    sub_233B13A30();
    v39 = swift_allocError();
    *v40 = 0;
    v58[0] = v39;
    sub_233B580C8();
  }
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)aBlock);
}

uint64_t sub_233B31B88(uint64_t a1)
{
  uint64_t v1;

  return sub_233B31834(a1, *(void **)(v1 + 72), *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t (*)(uint64_t, unint64_t), char *))(v1 + 80), *(_QWORD *)(v1 + 88), *(_QWORD *)(v1 + 96), *(_QWORD *)(v1 + 104), *(_QWORD *)(v1 + 112), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64));
}

uint64_t sub_233B31BC8(void *a1)
{
  uint64_t v2;
  id v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  _QWORD *v8;
  id v9;
  _BYTE *v10;
  uint64_t v12;

  if (qword_25424D3D0 != -1)
    swift_once();
  v2 = sub_233B57EC4();
  __swift_project_value_buffer(v2, (uint64_t)qword_25424D3B8);
  v3 = a1;
  v4 = a1;
  v5 = sub_233B57EAC();
  v6 = sub_233B581C4();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc();
    v8 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v7 = 138543362;
    v9 = a1;
    v12 = _swift_stdlib_bridgeErrorToNSError();
    sub_233B581F4();
    *v8 = v12;

    _os_log_impl(&dword_233B00000, v5, v6, "Error fetching remote object proxy: %{public}@", v7, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&qword_25424D288);
    swift_arrayDestroy();
    MEMORY[0x23493D4CC](v8, -1, -1);
    MEMORY[0x23493D4CC](v7, -1, -1);
  }
  else
  {

  }
  sub_233B13A30();
  swift_allocError();
  *v10 = 0;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25424D5A0);
  sub_233B580E0();
  return sub_233B580C8();
}

void sub_233B31DD0(uint64_t a1, void *a2)
{
  void (*v3)(void);
  id v4;

  v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  v4 = a2;
  v3();
  swift_release();

}

uint64_t sub_233B31E20(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  _QWORD v20[2];

  v20[1] = a3;
  sub_233B13A30();
  v14 = sub_233B585CC();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)v20 - v16;
  sub_233B31F30(a1, a2, a7, a10, a11, (_BYTE *)v20 - v16);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25424D5A0);
  v18 = sub_233B580E0();
  sub_233B322D4((uint64_t)v17, v18, (uint64_t)&type metadata for ManagedAppDistributionError);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v14);
}

uint64_t sub_233B31F30@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _BYTE *a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  _BYTE *v18;
  _BYTE v20[15];
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t *v27;
  _BYTE *v28;

  v12 = type metadata accessor for ServiceResult(0, a3, a4, a5);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x24BDAC7A8](v12);
  v16 = &v20[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v14);
  v18 = &v20[-v17];
  v25 = a1;
  v26 = a2;
  v27 = &v25;
  v28 = &v20[-v17];
  sub_233B13D4C(a1, a2);
  v23 = v12;
  v24 = MEMORY[0x24BDCDDE8];
  v22 = sub_233B328B8();
  v21 = MEMORY[0x23493D400](&protocol conformance descriptor for ServiceResult<A>, v12);
  decodeXPCValues<each A, B>(from:)((uint64_t)&v27, 1, 1uLL, (uint64_t)&v24, (uint64_t)&v23, (uint64_t)&v22, (uint64_t)&v21, (uint64_t *)&v28);
  sub_233B13CD8(v25, v26);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v13 + 16))(v16, v18, v12);
  Result.init<>(_:)(v16, a3, a4, a5, a6);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v13 + 8))(v18, v12);
}

uint64_t sub_233B322D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  void (*v18)(char *, char *, uint64_t);
  uint64_t v19;
  char *v20;
  _QWORD v22[4];

  v22[1] = a2;
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](a1);
  v9 = (char *)v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v13 = (char *)v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_233B585CC();
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)v22 - v15;
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))((char *)v22 - v15, a1, v14);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v18 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
    v18(v13, v16, a3);
    v19 = swift_allocError();
    v18(v20, v13, a3);
    v22[3] = v19;
    return sub_233B580C8();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v9, v16, v5);
    return sub_233B580D4();
  }
}

uint64_t sub_233B32450(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  id v9;
  id v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint8_t *v14;
  _QWORD *v15;
  id v16;
  uint64_t v17;
  uint8_t *v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  sub_233B13A30();
  v4 = sub_233B585CC();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v20 - v6;
  if (qword_25424D3D0 != -1)
    swift_once();
  v8 = sub_233B57EC4();
  __swift_project_value_buffer(v8, (uint64_t)qword_25424D3B8);
  v9 = a1;
  v10 = a1;
  v11 = sub_233B57EAC();
  v12 = sub_233B581C4();
  if (os_log_type_enabled(v11, v12))
  {
    v22 = a2;
    v13 = swift_slowAlloc();
    v21 = v5;
    v14 = (uint8_t *)v13;
    v15 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v14 = 138543362;
    v16 = a1;
    v17 = _swift_stdlib_bridgeErrorToNSError();
    v23 = v17;
    sub_233B581F4();
    *v15 = v17;

    _os_log_impl(&dword_233B00000, v11, v12, "Error fetching synchronous remote object proxy: %{public}@", v14, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&qword_25424D288);
    swift_arrayDestroy();
    MEMORY[0x23493D4CC](v15, -1, -1);
    v18 = v14;
    v5 = v21;
    MEMORY[0x23493D4CC](v18, -1, -1);
  }
  else
  {

  }
  *v7 = 0;
  swift_storeEnumTagMultiPayload();
  SyncXPCResult.setResult(_:)((uint64_t)v7);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_233B3268C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_233B326B0(void *a1)
{
  uint64_t v1;

  return sub_233B32450(a1, *(_QWORD *)(v1 + 64));
}

uint64_t sub_233B326C4(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v18;

  v12 = *(_QWORD *)(*(_QWORD *)a3 + 80);
  sub_233B13A30();
  v13 = sub_233B585CC();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v18 - v15;
  sub_233B31F30(a1, a2, v12, a9, a10, (_BYTE *)&v18 - v15);
  SyncXPCResult.setResult(_:)((uint64_t)v16);
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v13);
}

uint64_t sub_233B3279C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_233B327C0(uint64_t a1, unint64_t a2)
{
  uint64_t *v2;

  return sub_233B326C4(a1, a2, v2[8], v2[9], v2[2], v2[3], v2[4], v2[5], v2[6], v2[7]);
}

uint64_t sub_233B327F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  if (swift_getEnumCaseMultiPayload() != 1)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 32))(a3, v3);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)(a1 + 24) - 8) + 32))(a2, v3, *(_QWORD *)(a1 + 24));
  return swift_willThrowTypedImpl();
}

uint64_t type metadata accessor for ServiceConnection()
{
  return objc_opt_self();
}

uint64_t method lookup function for ServiceConnection()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ServiceConnection.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

unint64_t sub_233B328B8()
{
  unint64_t result;

  result = qword_25424D468;
  if (!qword_25424D468)
  {
    result = MEMORY[0x23493D400](MEMORY[0x24BDCDDC0], MEMORY[0x24BDCDDE8]);
    atomic_store(result, (unint64_t *)&qword_25424D468);
  }
  return result;
}

uint64_t sub_233B328FC()
{
  uint64_t v0;
  uint64_t v1;

  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25424D5A0);
  v1 = sub_233B580E0();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  return swift_deallocObject();
}

uint64_t sub_233B3297C(void *a1)
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25424D5A0);
  sub_233B580E0();
  return sub_233B31BC8(a1);
}

uint64_t sub_233B32A2C()
{
  uint64_t v0;
  uint64_t v1;

  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25424D5A0);
  v1 = sub_233B580E0();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  return swift_deallocObject();
}

uint64_t sub_233B32AB8(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int128 v13;

  v5 = *(_QWORD *)(v2 + 16);
  v6 = *(_QWORD *)(v2 + 24);
  v7 = *(_QWORD *)(v2 + 32);
  v8 = *(_QWORD *)(v2 + 40);
  v13 = *(_OWORD *)(v2 + 48);
  v9 = *(_QWORD *)(v2 + 64);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25424D5A0);
  v10 = *(_QWORD *)(sub_233B580E0() - 8);
  v11 = (*(unsigned __int8 *)(v10 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  return sub_233B31E20(a1, a2, v2 + v11, *(_QWORD *)(v2 + ((*(_QWORD *)(v10 + 64) + v11 + 7) & 0xFFFFFFFFFFFFF8)), v5, v6, v7, v8, v13, *((uint64_t *)&v13 + 1), v9);
}

uint64_t static ManagedAppLibrary.currentDistributor.getter()
{
  return swift_initStaticObject();
}

uint64_t ManagedAppLibrary.validateHostApp()()
{
  uint64_t v0;
  _QWORD *v1;

  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_BYTE *)(v0 + 48) = 1;
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 56) = v1;
  *v1 = v0;
  v1[1] = sub_233B32C04;
  return ManagedAppInstallRequest.request()();
}

uint64_t sub_233B32C04()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 64) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  else
    return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_233B32C70()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t ManagedAppLibrary.install(_:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1[8] = a1;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_256113A00);
  v1[9] = v2;
  v1[10] = *(_QWORD *)(v2 - 8);
  v1[11] = swift_task_alloc();
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256113A08);
  v1[12] = v3;
  v1[13] = *(_QWORD *)(v3 - 8);
  v1[14] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_233B32D0C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = v0[10];
  v1 = v0[11];
  v3 = v0[9];
  ManagedApp.state.getter();
  sub_233B58140();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v4 = (_QWORD *)swift_task_alloc();
  v0[15] = v4;
  *v4 = v0;
  v4[1] = sub_233B32DAC;
  return sub_233B58158();
}

uint64_t sub_233B32DAC()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_233B32E00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD v14[4];
  char v15;

  v1 = *(_QWORD *)(v0 + 56);
  if ((~v1 & 0xF000000000000007) == 0)
  {
    v1 = swift_allocObject();
    *(_BYTE *)(v1 + 16) = 0;
  }
  *(_QWORD *)(v0 + 128) = v1;
  if (qword_25424D4D0 != -1)
    swift_once();
  v2 = *(uint64_t **)(v0 + 64);
  v3 = v2[2];
  v4 = v2[3];
  v5 = v2[4];
  v6 = *((_BYTE *)v2 + 40);
  v14[0] = 0x8000000000000010;
  v14[1] = v3;
  v14[2] = v4;
  v14[3] = v5;
  v15 = v6;
  swift_bridgeObjectRetain_n();
  sub_233B453E8((uint64_t)v14);
  sub_233B1AF64(0x8000000000000010);
  sub_233B33478(v3, v4, v5, v6);
  swift_bridgeObjectRelease();
  v8 = *v2;
  v7 = v2[1];
  *(_QWORD *)(v0 + 136) = v7;
  v9 = (uint64_t *)((char *)v2 + *(int *)(type metadata accessor for ManagedApp() + 116));
  v10 = *v9;
  v11 = v9[1];
  *(_QWORD *)(v0 + 144) = v11;
  *(_QWORD *)(v0 + 16) = v8;
  *(_QWORD *)(v0 + 24) = v7;
  *(_QWORD *)(v0 + 32) = v10;
  *(_QWORD *)(v0 + 40) = v11;
  *(_BYTE *)(v0 + 48) = 1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v12 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 152) = v12;
  *v12 = v0;
  v12[1] = sub_233B32F6C;
  return ManagedAppInstallRequest.request()();
}

uint64_t sub_233B32F6C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 160) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

uint64_t sub_233B32FEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v0 + 104);
  v1 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 96);
  sub_233B1AF64(*(_QWORD *)(v0 + 128));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_233B33050()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v10;
  unint64_t v11[4];
  char v12;

  v3 = *(_QWORD *)(v0 + 104);
  v2 = *(_QWORD *)(v0 + 112);
  v10 = *(_QWORD *)(v0 + 96);
  v4 = *(_QWORD *)(v0 + 64);
  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(v4 + 24);
  v7 = *(_QWORD *)(v4 + 32);
  v8 = *(_BYTE *)(v4 + 40);
  v11[0] = *(_QWORD *)(v0 + 128);
  v1 = v11[0];
  v11[1] = v5;
  v11[2] = v6;
  v11[3] = v7;
  v12 = v8;
  swift_bridgeObjectRetain_n();
  sub_233B0487C(v11[0]);
  sub_233B453E8((uint64_t)v11);
  sub_233B1AF64(v1);
  sub_233B33478(v5, v6, v7, v8);
  swift_bridgeObjectRelease();
  swift_willThrow();
  sub_233B1AF64(v1);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v10);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_233B33144()
{
  return swift_deallocObject();
}

uint64_t ManagedAppLibrary.cancel(_:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 32) = a1;
  return swift_task_switch();
}

uint64_t sub_233B3316C()
{
  _QWORD *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = (uint64_t *)v0[4];
  v3 = *v1;
  v2 = v1[1];
  v0[2] = v3;
  v0[3] = v2;
  v4 = (_QWORD *)swift_task_alloc();
  v0[5] = v4;
  *v4 = v0;
  v4[1] = sub_233B20EFC;
  return ManagedAppCancelRequest.request()();
}

uint64_t static ManagedAppLibrary.appProgress.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  os_unfair_lock_s *v12;
  uint64_t v13;
  os_unfair_lock_s *v14;
  _BYTE v16[16];

  v0 = __swift_instantiateConcreteTypeFromMangledName(&qword_256113A18);
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = &v16[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256113A20);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = &v16[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v6);
  v10 = &v16[-v9];
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v1 + 104))(v3, *MEMORY[0x24BEE6A10], v0);
  sub_233B58104();
  (*(void (**)(_BYTE *, uint64_t))(v1 + 8))(v3, v0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v5 + 16))(v8, v10, v4);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256113A28);
  v11 = swift_allocObject();
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v5 + 32))(v11 + *(_QWORD *)(*(_QWORD *)v11 + 88), v8, v4);
  swift_retain();
  sub_233B58110();
  if (qword_25424D4D0 != -1)
    swift_once();
  v12 = *(os_unfair_lock_s **)(qword_25424D460 + OBJC_IVAR____TtC22ManagedAppDistribution9XPCClient_lockedStorage);
  v13 = (uint64_t)&v12[4];
  v14 = v12 + 26;
  os_unfair_lock_lock(v12 + 26);
  sub_233B43BD0(v13);
  os_unfair_lock_unlock(v14);
  swift_release();
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v10, v4);
}

void sub_233B333D0(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_s *v3;
  uint64_t v4;
  os_unfair_lock_s *v5;

  if (qword_25424D4D0 != -1)
    swift_once();
  v3 = *(os_unfair_lock_s **)(qword_25424D460 + OBJC_IVAR____TtC22ManagedAppDistribution9XPCClient_lockedStorage);
  v4 = (uint64_t)&v3[4];
  v5 = v3 + 26;
  os_unfair_lock_lock(v3 + 26);
  sub_233B44030(v4, a2);
  os_unfair_lock_unlock(v5);
}

uint64_t ManagedAppLibrary.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t ManagedAppLibrary.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t sub_233B33478(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t result;

  if ((a4 & 0x80) == 0)
    return swift_bridgeObjectRelease();
  return result;
}

void sub_233B33488(uint64_t a1)
{
  uint64_t v1;

  sub_233B333D0(a1, v1);
}

uint64_t type metadata accessor for ManagedAppLibrary()
{
  return objc_opt_self();
}

uint64_t method lookup function for ManagedAppLibrary()
{
  return swift_lookUpClassMethod();
}

uint64_t Result.init<>(_:)@<X0>(_BYTE *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _BYTE *a5@<X8>)
{
  type metadata accessor for ServiceResult(0, a2, a3, a4);
  if (swift_getEnumCaseMultiPayload() == 1)
    *a5 = *a1;
  else
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a5, a1, a2);
  sub_233B13A30();
  sub_233B585CC();
  return swift_storeEnumTagMultiPayload();
}

uint64_t type metadata accessor for ServiceResult(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ServiceResult);
}

BOOL sub_233B33584(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

uint64_t sub_233B33594()
{
  return sub_233B5859C();
}

uint64_t sub_233B335B8(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x73736563637573 && a2 == 0xE700000000000000;
  if (v2 || (sub_233B584D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6572756C696166 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_233B584D0();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_233B336A8()
{
  sub_233B58590();
  sub_233B5859C();
  return sub_233B585C0();
}

uint64_t sub_233B336EC(char a1)
{
  if ((a1 & 1) != 0)
    return 0x6572756C696166;
  else
    return 0x73736563637573;
}

uint64_t sub_233B3371C(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 12383 && a2 == 0xE200000000000000)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
  }
  else
  {
    v3 = sub_233B584D0();
    swift_bridgeObjectRelease();
    v4 = v3 ^ 1;
  }
  return v4 & 1;
}

BOOL sub_233B33788(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_233B33584(*a1, *a2);
}

uint64_t sub_233B337A0()
{
  return sub_233B336A8();
}

uint64_t sub_233B337B4()
{
  return sub_233B33594();
}

uint64_t sub_233B337C8()
{
  sub_233B58590();
  sub_233B33594();
  return sub_233B585C0();
}

uint64_t sub_233B33810()
{
  char *v0;

  return sub_233B336EC(*v0);
}

uint64_t sub_233B33824@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_233B335B8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_233B33854@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_233B351B8();
  *a1 = result;
  return result;
}

uint64_t sub_233B33884(uint64_t a1)
{
  MEMORY[0x23493D400](&unk_233B5CCB0, a1);
  return sub_233B58638();
}

uint64_t sub_233B338B8(uint64_t a1)
{
  MEMORY[0x23493D400](&unk_233B5CCB0, a1);
  return sub_233B58644();
}

uint64_t sub_233B338F0@<X0>(_QWORD *a1@<X1>, _BYTE *a2@<X8>)
{
  return sub_233B33998(a1, (uint64_t (*)(_QWORD, _QWORD, _QWORD))sub_233B1AF94, a2);
}

uint64_t sub_233B338FC(uint64_t a1)
{
  MEMORY[0x23493D400](&unk_233B5CD50, a1);
  return sub_233B58638();
}

uint64_t sub_233B33930(uint64_t a1)
{
  MEMORY[0x23493D400](&unk_233B5CD50, a1);
  return sub_233B58644();
}

uint64_t sub_233B33964@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_233B3371C(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_233B33998@<X0>(_QWORD *a1@<X1>, uint64_t (*a2)(_QWORD, _QWORD, _QWORD)@<X3>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = a2(a1[2], a1[3], a1[4]);
  *a3 = result & 1;
  return result;
}

uint64_t sub_233B339CC(uint64_t a1)
{
  MEMORY[0x23493D400](&unk_233B5CD00, a1);
  return sub_233B58638();
}

uint64_t sub_233B33A00(uint64_t a1)
{
  MEMORY[0x23493D400](&unk_233B5CD00, a1);
  return sub_233B58644();
}

uint64_t ServiceResult.encode(to:)(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[2];
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  char v50;
  char v51;

  v4 = a2[2];
  v5 = a2[3];
  v6 = a2[4];
  v7 = type metadata accessor for ServiceResult.FailureCodingKeys(255, v4, v5, v6);
  v39 = MEMORY[0x23493D400](&unk_233B5CD50, v7);
  v40 = v7;
  v8 = sub_233B58494();
  v42 = *(_QWORD *)(v8 - 8);
  v43 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v41 = (char *)v33 - v9;
  v10 = type metadata accessor for ServiceResult.SuccessCodingKeys(255, v4, v5, v6);
  v33[0] = MEMORY[0x23493D400](&unk_233B5CD00, v10);
  v33[1] = v10;
  v38 = sub_233B58494();
  v36 = *(_QWORD *)(v38 - 8);
  v11 = MEMORY[0x24BDAC7A8](v38);
  v34 = (char *)v33 - v12;
  v37 = *(_QWORD *)(v4 - 8);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v35 = (char *)v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(a2 - 1);
  MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)v33 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = v6;
  v45 = v4;
  v18 = type metadata accessor for ServiceResult.CodingKeys(255, v4, v5, v6);
  MEMORY[0x23493D400](&unk_233B5CCB0, v18);
  v19 = sub_233B58494();
  v47 = *(_QWORD *)(v19 - 8);
  v48 = v19;
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)v33 - v20;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_233B5862C();
  (*(void (**)(char *, uint64_t, _QWORD *))(v15 + 16))(v17, v46, a2);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v22 = *v17;
    v51 = 1;
    v23 = v41;
    v24 = v48;
    sub_233B58410();
    v50 = v22;
    sub_233B33DE0();
    v25 = v43;
    sub_233B5847C();
    (*(void (**)(char *, uint64_t))(v42 + 8))(v23, v25);
    return (*(uint64_t (**)(char *, uint64_t))(v47 + 8))(v21, v24);
  }
  else
  {
    v27 = v37;
    v28 = v35;
    v29 = v45;
    (*(void (**)(char *, char *, uint64_t))(v37 + 32))(v35, v17, v45);
    v49 = 0;
    v30 = v34;
    v31 = v48;
    sub_233B58410();
    v32 = v38;
    sub_233B5847C();
    (*(void (**)(char *, uint64_t))(v36 + 8))(v30, v32);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v28, v29);
    return (*(uint64_t (**)(char *, uint64_t))(v47 + 8))(v21, v31);
  }
}

uint64_t type metadata accessor for ServiceResult.FailureCodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ServiceResult.FailureCodingKeys);
}

uint64_t type metadata accessor for ServiceResult.SuccessCodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ServiceResult.SuccessCodingKeys);
}

uint64_t type metadata accessor for ServiceResult.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ServiceResult.CodingKeys);
}

unint64_t sub_233B33DE0()
{
  unint64_t result;

  result = qword_256113AC8;
  if (!qword_256113AC8)
  {
    result = MEMORY[0x23493D400](&protocol conformance descriptor for ManagedAppDistributionError, &type metadata for ManagedAppDistributionError);
    atomic_store(result, (unint64_t *)&qword_256113AC8);
  }
  return result;
}

uint64_t ServiceResult.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  char *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(char *, char *, uint64_t);
  char *v52;
  char *v53;
  __int128 v54;
  char *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  _QWORD *v80;

  v71 = a5;
  v9 = type metadata accessor for ServiceResult.FailureCodingKeys(255, a2, a3, a4);
  v68 = MEMORY[0x23493D400](&unk_233B5CD50, v9);
  v69 = v9;
  v61 = sub_233B58404();
  v64 = *(_QWORD *)(v61 - 8);
  MEMORY[0x24BDAC7A8](v61);
  v70 = (char *)&v54 - v10;
  v11 = type metadata accessor for ServiceResult.SuccessCodingKeys(255, a2, a3, a4);
  v65 = MEMORY[0x23493D400](&unk_233B5CD00, v11);
  v66 = v11;
  v60 = sub_233B58404();
  v63 = *(_QWORD *)(v60 - 8);
  MEMORY[0x24BDAC7A8](v60);
  v67 = (char *)&v54 - v12;
  v13 = type metadata accessor for ServiceResult.CodingKeys(255, a2, a3, a4);
  MEMORY[0x23493D400](&unk_233B5CCB0, v13);
  v14 = sub_233B58404();
  v73 = *(_QWORD *)(v14 - 8);
  v74 = v14;
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v54 - v15;
  v75 = a2;
  v62 = a3;
  v72 = type metadata accessor for ServiceResult(0, a2, a3, a4);
  v59 = *(_QWORD *)(v72 - 8);
  v17 = MEMORY[0x24BDAC7A8](v72);
  v19 = (char *)&v54 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x24BDAC7A8](v17);
  v22 = (char *)&v54 - v21;
  MEMORY[0x24BDAC7A8](v20);
  v24 = (char *)&v54 - v23;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v25 = v80;
  sub_233B58608();
  v26 = (uint64_t)a1;
  if (!v25)
  {
    v57 = v22;
    v55 = v19;
    v56 = v24;
    v58 = 0;
    v80 = a1;
    v27 = v74;
    v28 = v16;
    *(_QWORD *)&v76 = sub_233B583F8();
    v29 = sub_233B580A4();
    MEMORY[0x23493D400](MEMORY[0x24BEE12C8], v29);
    *(_QWORD *)&v78 = sub_233B58230();
    *((_QWORD *)&v78 + 1) = v30;
    *(_QWORD *)&v79 = v31;
    *((_QWORD *)&v79 + 1) = v32;
    v33 = sub_233B58224();
    MEMORY[0x23493D400](MEMORY[0x24BEE2190], v33);
    sub_233B58188();
    v34 = v76;
    if (v76 == 2 || (v54 = v78, v76 = v78, v77 = v79, (sub_233B58194() & 1) == 0))
    {
      v38 = sub_233B582D8();
      swift_allocError();
      v40 = v39;
      __swift_instantiateConcreteTypeFromMangledName(&qword_256113238);
      *v40 = v72;
      sub_233B58374();
      sub_233B582CC();
      (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v38 - 8) + 104))(v40, *MEMORY[0x24BEE26D0], v38);
      swift_willThrow();
    }
    else
    {
      if ((v34 & 1) == 0)
      {
        LOBYTE(v76) = 0;
        v35 = v67;
        v36 = v28;
        v37 = v58;
        sub_233B58368();
        if (v37)
        {
          swift_unknownObjectRelease();
          (*(void (**)(char *, uint64_t))(v73 + 8))(v28, v27);
LABEL_9:
          v26 = (uint64_t)v80;
          return __swift_destroy_boxed_opaque_existential_0(v26);
        }
        v45 = v57;
        v46 = v60;
        sub_233B583E0();
        v47 = v73;
        (*(void (**)(char *, uint64_t))(v63 + 8))(v35, v46);
        swift_unknownObjectRelease();
        (*(void (**)(char *, uint64_t))(v47 + 8))(v36, v27);
        v50 = v72;
        swift_storeEnumTagMultiPayload();
        v51 = *(void (**)(char *, char *, uint64_t))(v59 + 32);
        v52 = v56;
        v51(v56, v45, v50);
        v44 = v71;
LABEL_15:
        v51(v44, v52, v50);
        goto LABEL_9;
      }
      LOBYTE(v76) = 1;
      v42 = v70;
      v43 = v58;
      sub_233B58368();
      v44 = v71;
      if (!v43)
      {
        sub_233B344A8();
        v48 = v61;
        sub_233B583E0();
        v49 = v73;
        (*(void (**)(char *, uint64_t))(v64 + 8))(v42, v48);
        swift_unknownObjectRelease();
        (*(void (**)(char *, uint64_t))(v49 + 8))(v28, v27);
        v53 = v55;
        *v55 = v76;
        v50 = v72;
        swift_storeEnumTagMultiPayload();
        v51 = *(void (**)(char *, char *, uint64_t))(v59 + 32);
        v52 = v56;
        v51(v56, v53, v50);
        goto LABEL_15;
      }
    }
    swift_unknownObjectRelease();
    (*(void (**)(char *, uint64_t))(v73 + 8))(v16, v27);
    goto LABEL_9;
  }
  return __swift_destroy_boxed_opaque_existential_0(v26);
}

unint64_t sub_233B344A8()
{
  unint64_t result;

  result = qword_256113AD0;
  if (!qword_256113AD0)
  {
    result = MEMORY[0x23493D400](&protocol conformance descriptor for ManagedAppDistributionError, &type metadata for ManagedAppDistributionError);
    atomic_store(result, (unint64_t *)&qword_256113AD0);
  }
  return result;
}

uint64_t sub_233B344EC@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, char *a3@<X8>)
{
  return ServiceResult.init(from:)(a1, a2[2], a2[3], a2[4], a3);
}

uint64_t sub_233B3450C(_QWORD *a1, _QWORD *a2)
{
  return ServiceResult.encode(to:)(a1, a2);
}

uint64_t sub_233B34520()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_233B34528()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t *sub_233B34598(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v4 + 64) <= 1uLL)
    v5 = 1;
  else
    v5 = *(_QWORD *)(v4 + 64);
  v6 = *(_DWORD *)(v4 + 80);
  if (v6 > 7 || (*(_DWORD *)(v4 + 80) & 0x100000) != 0 || (unint64_t)(v5 + 1) > 0x18)
  {
    v9 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v9 + ((v6 + 16) & ~v6));
    swift_retain();
  }
  else
  {
    v10 = *((unsigned __int8 *)a2 + v5);
    if (v10 >= 2)
    {
      if (v5 <= 3)
        v11 = v5;
      else
        v11 = 4;
      __asm { BR              X13 }
    }
    if (v10 == 1)
    {
      *(_BYTE *)a1 = *(_BYTE *)a2;
      *((_BYTE *)a1 + v5) = 1;
    }
    else
    {
      (*(void (**)(uint64_t *))(v4 + 16))(a1);
      *((_BYTE *)v3 + v5) = 0;
    }
  }
  return v3;
}

uint64_t sub_233B346A4(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unsigned int v4;
  uint64_t v5;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v3 = *(_QWORD *)(v2 + 64);
  if (v3 <= 1)
    v3 = 1;
  v4 = *(unsigned __int8 *)(result + v3);
  if (v4 < 2)
  {
    if (v4 != 1)
      return (*(uint64_t (**)(void))(v2 + 8))();
  }
  else
  {
    if (v3 <= 3)
      v5 = v3;
    else
      v5 = 4;
    return ((uint64_t (*)(void))((char *)&loc_233B346E8 + 4 * byte_233B5C925[v5]))();
  }
  return result;
}

_BYTE *sub_233B3473C(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v4 + 64) <= 1uLL)
    v5 = 1;
  else
    v5 = *(_QWORD *)(v4 + 64);
  v6 = a2[v5];
  if (v6 >= 2)
  {
    if (v5 <= 3)
      v7 = v5;
    else
      v7 = 4;
    __asm { BR              X13 }
  }
  if (v6 == 1)
  {
    *a1 = *a2;
    v8 = 1;
  }
  else
  {
    (*(void (**)(_BYTE *))(v4 + 16))(a1);
    v8 = 0;
  }
  a1[v5] = v8;
  return a1;
}

_BYTE *sub_233B3480C(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  char v12;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    if (*(_QWORD *)(v6 + 64) <= 1uLL)
      v7 = 1;
    else
      v7 = *(_QWORD *)(v6 + 64);
    v8 = a1[v7];
    if (v8 >= 2)
    {
      if (v7 <= 3)
        v9 = v7;
      else
        v9 = 4;
      __asm { BR              X12 }
    }
    if (v8 != 1)
      (*(void (**)(_BYTE *, _QWORD))(v6 + 8))(a1, *(_QWORD *)(a3 + 16));
    v10 = a2[v7];
    if (v10 >= 2)
    {
      if (v7 <= 3)
        v11 = v7;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    if (v10 == 1)
    {
      *a1 = *a2;
      v12 = 1;
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v6 + 16))(a1, a2, v5);
      v12 = 0;
    }
    a1[v7] = v12;
  }
  return a1;
}

_BYTE *sub_233B34988(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v4 + 64) <= 1uLL)
    v5 = 1;
  else
    v5 = *(_QWORD *)(v4 + 64);
  v6 = a2[v5];
  if (v6 >= 2)
  {
    if (v5 <= 3)
      v7 = v5;
    else
      v7 = 4;
    __asm { BR              X13 }
  }
  if (v6 == 1)
  {
    *a1 = *a2;
    v8 = 1;
  }
  else
  {
    (*(void (**)(_BYTE *))(v4 + 32))(a1);
    v8 = 0;
  }
  a1[v5] = v8;
  return a1;
}

_BYTE *sub_233B34A58(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  char v12;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    if (*(_QWORD *)(v6 + 64) <= 1uLL)
      v7 = 1;
    else
      v7 = *(_QWORD *)(v6 + 64);
    v8 = a1[v7];
    if (v8 >= 2)
    {
      if (v7 <= 3)
        v9 = v7;
      else
        v9 = 4;
      __asm { BR              X12 }
    }
    if (v8 != 1)
      (*(void (**)(_BYTE *, _QWORD))(v6 + 8))(a1, *(_QWORD *)(a3 + 16));
    v10 = a2[v7];
    if (v10 >= 2)
    {
      if (v7 <= 3)
        v11 = v7;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    if (v10 == 1)
    {
      *a1 = *a2;
      v12 = 1;
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v6 + 32))(a1, a2, v5);
      v12 = 0;
    }
    a1[v7] = v12;
  }
  return a1;
}

uint64_t sub_233B34BD4(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  int v6;
  unsigned int v8;
  int v9;
  unsigned int v10;

  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64) <= 1uLL)
    v3 = 1;
  else
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_22;
  v4 = v3 + 1;
  v5 = 8 * (v3 + 1);
  if ((v3 + 1) <= 3)
  {
    v8 = ((a2 + ~(-1 << v5) - 254) >> v5) + 1;
    if (HIWORD(v8))
    {
      v6 = *(_DWORD *)(a1 + v4);
      if (!v6)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v8 > 0xFF)
    {
      v6 = *(unsigned __int16 *)(a1 + v4);
      if (!*(_WORD *)(a1 + v4))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v8 < 2)
    {
LABEL_22:
      v10 = *(unsigned __int8 *)(a1 + v3);
      if (v10 >= 2)
        return (v10 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v6 = *(unsigned __int8 *)(a1 + v4);
  if (!*(_BYTE *)(a1 + v4))
    goto LABEL_22;
LABEL_15:
  v9 = (v6 - 1) << v5;
  if (v4 > 3)
    v9 = 0;
  if (!(_DWORD)v4)
    return (v9 + 255);
  if (v4 > 3)
    LODWORD(v4) = 4;
  return ((uint64_t (*)(void))((char *)&loc_233B34C94 + 4 * byte_233B5C948[(v4 - 1)]))();
}

void sub_233B34CE0(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5;
  size_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) - 8) + 64);
  if (v5 <= 1)
    v5 = 1;
  v6 = v5 + 1;
  if (a3 < 0xFF)
  {
    v7 = 0;
  }
  else if (v6 <= 3)
  {
    v9 = ((a3 + ~(-1 << (8 * v6)) - 254) >> (8 * v6)) + 1;
    if (HIWORD(v9))
    {
      v7 = 4u;
    }
    else if (v9 >= 0x100)
    {
      v7 = 2;
    }
    else
    {
      v7 = v9 > 1;
    }
  }
  else
  {
    v7 = 1u;
  }
  if (a2 <= 0xFE)
    __asm { BR              X11 }
  v8 = a2 - 255;
  if (v6 < 4)
  {
    if ((_DWORD)v5 != -1)
    {
      v10 = v8 & ~(-1 << (8 * v6));
      bzero(a1, v6);
      if ((_DWORD)v6 == 3)
      {
        *a1 = v10;
        *((_BYTE *)a1 + 2) = BYTE2(v10);
      }
      else if ((_DWORD)v6 == 2)
      {
        *a1 = v10;
      }
      else
      {
        *(_BYTE *)a1 = v10;
      }
    }
  }
  else
  {
    bzero(a1, v5 + 1);
    *(_DWORD *)a1 = v8;
  }
  __asm { BR              X10 }
}

uint64_t sub_233B34E84(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64) <= 1uLL)
    v2 = 1;
  else
    v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64);
  if (*(unsigned __int8 *)(a1 + v2) < 2u)
    return *(unsigned __int8 *)(a1 + v2);
  if (v2 <= 3)
    v3 = v2;
  else
    v3 = 4;
  return ((uint64_t (*)(void))((char *)&loc_233B34EC8 + 4 * byte_233B5C956[v3]))();
}

void sub_233B34F10(_BYTE *a1, unsigned int a2, uint64_t a3)
{
  size_t v4;
  unsigned int v5;
  unsigned int v6;
  int v7;

  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64) <= 1uLL)
    v4 = 1;
  else
    v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  if (a2 > 1)
  {
    v5 = a2 - 2;
    if (v4 < 4)
    {
      v6 = v5 >> (8 * v4);
      v7 = v5 & ~(-1 << (8 * v4));
      a1[v4] = v6 + 2;
      bzero(a1, v4);
      if ((_DWORD)v4 == 3)
      {
        *(_WORD *)a1 = v7;
        a1[2] = BYTE2(v7);
      }
      else if ((_DWORD)v4 == 2)
      {
        *(_WORD *)a1 = v7;
      }
      else
      {
        *a1 = v7;
      }
    }
    else
    {
      a1[v4] = 2;
      bzero(a1, v4);
      *(_DWORD *)a1 = v5;
    }
  }
  else
  {
    a1[v4] = a2;
  }
}

uint64_t sub_233B34FD4()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_233B34FDC(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_233B35028 + 4 * byte_233B5C960[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_233B3505C + 4 * byte_233B5C95B[v4]))();
}

uint64_t sub_233B3505C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_233B35064(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x233B3506CLL);
  return result;
}

uint64_t sub_233B35078(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x233B35080);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_233B35084(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_233B3508C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_233B3509C(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_233B350DC + 4 * byte_233B5C965[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_233B350FC + 4 * byte_233B5C96A[v4]))();
}

_BYTE *sub_233B350DC(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_233B350FC(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_233B35104(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_233B3510C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_233B35114(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_233B3511C(_DWORD *result)
{
  *result = 0;
  return result;
}

void sub_233B35128()
{
  JUMPOUT(0x23493D400);
}

void sub_233B35138()
{
  JUMPOUT(0x23493D400);
}

void sub_233B35148()
{
  JUMPOUT(0x23493D400);
}

void sub_233B35158()
{
  JUMPOUT(0x23493D400);
}

void sub_233B35168()
{
  JUMPOUT(0x23493D400);
}

void sub_233B35178()
{
  JUMPOUT(0x23493D400);
}

void sub_233B35188()
{
  JUMPOUT(0x23493D400);
}

void sub_233B35198()
{
  JUMPOUT(0x23493D400);
}

void sub_233B351A8()
{
  JUMPOUT(0x23493D400);
}

uint64_t sub_233B351B8()
{
  return 2;
}

void ManagedAppDistributionError.localizedStringResource.getter(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[6];

  v9[4] = a1;
  v2 = sub_233B57E70();
  MEMORY[0x24BDAC7A8](v2);
  v9[3] = (char *)v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_25424D2A0);
  MEMORY[0x24BDAC7A8](v4);
  v9[0] = sub_233B57DD4();
  MEMORY[0x24BDAC7A8](v9[0]);
  v5 = sub_233B57DB0();
  v9[1] = *(_QWORD *)(v5 - 8);
  v9[2] = v5;
  MEMORY[0x24BDAC7A8](v5);
  v6 = sub_233B57F60();
  v7 = MEMORY[0x24BDAC7A8](v6);
  v8 = MEMORY[0x24BDAC7A8](v7);
  MEMORY[0x24BDAC7A8](v8);
  __asm { BR              X10 }
}

uint64_t sub_233B35354()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  sub_233B57F54();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 32))(v8, v5, v3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 16))(v7, v8, v3);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(v1 + 104))(v6, *MEMORY[0x24BDCD790], *(_QWORD *)(v9 - 128));
  v10 = sub_233B57DF8();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v2, 1, 1, v10);
  sub_233B57DEC();
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v9 - 120) + 104))(v4, *MEMORY[0x24BDCD330], *(_QWORD *)(v9 - 112));
  sub_233B57E58();
  sub_233B57DC8();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v8, v3);
}

uint64_t ManagedAppDistributionError.description.getter()
{
  _BYTE *v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[16];

  v1 = sub_233B57DBC();
  MEMORY[0x24BDAC7A8](v1);
  v4[15] = *v0;
  ManagedAppDistributionError.localizedStringResource.getter((uint64_t)&v4[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)]);
  return sub_233B57FB4();
}

uint64_t ManagedAppDistributionError.errorDescription.getter()
{
  _BYTE *v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[16];

  v1 = sub_233B57DBC();
  MEMORY[0x24BDAC7A8](v1);
  v4[15] = *v0;
  ManagedAppDistributionError.localizedStringResource.getter((uint64_t)&v4[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)]);
  return sub_233B57FB4();
}

uint64_t ManagedAppDistributionError.failureReason.getter()
{
  return 0;
}

uint64_t ManagedAppDistributionError.recoverySuggestion.getter()
{
  return 0;
}

uint64_t ManagedAppDistributionError.helpAnchor.getter()
{
  return 0;
}

uint64_t ManagedAppDistributionError.recoveryOptions.getter()
{
  return MEMORY[0x24BEE4AF8];
}

Swift::Bool __swiftcall ManagedAppDistributionError.attemptRecovery(optionIndex:)(Swift::Int optionIndex)
{
  return 0;
}

uint64_t ManagedAppDistributionError.attemptRecovery(optionIndex:resultHandler:)(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  return a2(0);
}

BOOL static ManagedAppDistributionError.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t ManagedAppDistributionError.hash(into:)()
{
  return sub_233B5859C();
}

uint64_t sub_233B35688(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_233B356C4 + 4 * byte_233B5CDA6[a1]))(0xD000000000000012, 0x8000000233B61AD0);
}

uint64_t sub_233B356C4()
{
  return 0x456B726F7774656ELL;
}

unint64_t sub_233B356E4()
{
  return 0xD000000000000010;
}

uint64_t sub_233B35700()
{
  uint64_t v0;

  return v0 + 3;
}

uint64_t sub_233B35718()
{
  return 0x4E65736E6563696CLL;
}

uint64_t sub_233B3573C()
{
  return 0x614D746F4E707061;
}

uint64_t sub_233B35760()
{
  sub_233B35E04();
  return sub_233B58638();
}

uint64_t sub_233B35788()
{
  sub_233B35E04();
  return sub_233B58644();
}

uint64_t sub_233B357B0()
{
  unsigned __int8 *v0;

  return sub_233B35688(*v0);
}

uint64_t sub_233B357B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_233B36D54(a1, a2);
  *a3 = result;
  return result;
}

void sub_233B357DC(_BYTE *a1@<X8>)
{
  *a1 = 6;
}

uint64_t sub_233B357E8()
{
  sub_233B35DC0();
  return sub_233B58638();
}

uint64_t sub_233B35810()
{
  sub_233B35DC0();
  return sub_233B58644();
}

uint64_t sub_233B35838()
{
  sub_233B35ED0();
  return sub_233B58638();
}

uint64_t sub_233B35860()
{
  sub_233B35ED0();
  return sub_233B58644();
}

uint64_t sub_233B35888()
{
  sub_233B35E48();
  return sub_233B58638();
}

uint64_t sub_233B358B0()
{
  sub_233B35E48();
  return sub_233B58644();
}

uint64_t sub_233B358D8()
{
  sub_233B35F14();
  return sub_233B58638();
}

uint64_t sub_233B35900()
{
  sub_233B35F14();
  return sub_233B58644();
}

uint64_t sub_233B35928()
{
  sub_233B35F58();
  return sub_233B58638();
}

uint64_t sub_233B35950()
{
  sub_233B35F58();
  return sub_233B58644();
}

uint64_t sub_233B35978()
{
  sub_233B35E8C();
  return sub_233B58638();
}

uint64_t sub_233B359A0()
{
  sub_233B35E8C();
  return sub_233B58644();
}

void ManagedAppDistributionError.encode(to:)(_QWORD *a1)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[17];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256113AD8);
  v15[13] = *(_QWORD *)(v3 - 8);
  v15[14] = v3;
  MEMORY[0x24BDAC7A8](v3);
  v15[12] = (char *)v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256113AE0);
  v15[10] = *(_QWORD *)(v5 - 8);
  v15[11] = v5;
  MEMORY[0x24BDAC7A8](v5);
  v15[9] = (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_256113AE8);
  v15[7] = *(_QWORD *)(v7 - 8);
  v15[8] = v7;
  MEMORY[0x24BDAC7A8](v7);
  v15[6] = (char *)v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256113AF0);
  v15[4] = *(_QWORD *)(v9 - 8);
  v15[5] = v9;
  MEMORY[0x24BDAC7A8](v9);
  v15[3] = (char *)v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_256113AF8);
  v15[1] = *(_QWORD *)(v11 - 8);
  v15[2] = v11;
  MEMORY[0x24BDAC7A8](v11);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_256113B00);
  MEMORY[0x24BDAC7A8](v12);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_256113B08);
  v15[15] = *(_QWORD *)(v13 - 8);
  v15[16] = v13;
  MEMORY[0x24BDAC7A8](v13);
  v14 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_233B35DC0();
  sub_233B5862C();
  __asm { BR              X9 }
}

uint64_t sub_233B35BFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)(v4 - 70) = 0;
  sub_233B35F58();
  v5 = *(_QWORD *)(v4 - 96);
  sub_233B58410();
  (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v2, v3);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 104) + 8))(v1, v5);
}

unint64_t sub_233B35DC0()
{
  unint64_t result;

  result = qword_256113B10;
  if (!qword_256113B10)
  {
    result = MEMORY[0x23493D400](&unk_233B5D510, &type metadata for ManagedAppDistributionError.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256113B10);
  }
  return result;
}

unint64_t sub_233B35E04()
{
  unint64_t result;

  result = qword_256113B18;
  if (!qword_256113B18)
  {
    result = MEMORY[0x23493D400](&unk_233B5D4C0, &type metadata for ManagedAppDistributionError.AppNotManagedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256113B18);
  }
  return result;
}

unint64_t sub_233B35E48()
{
  unint64_t result;

  result = qword_256113B20;
  if (!qword_256113B20)
  {
    result = MEMORY[0x23493D400](&unk_233B5D470, &type metadata for ManagedAppDistributionError.LicenseNotFoundCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256113B20);
  }
  return result;
}

unint64_t sub_233B35E8C()
{
  unint64_t result;

  result = qword_256113B28;
  if (!qword_256113B28)
  {
    result = MEMORY[0x23493D400](&unk_233B5D420, &type metadata for ManagedAppDistributionError.UnsupportedPlatformCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256113B28);
  }
  return result;
}

unint64_t sub_233B35ED0()
{
  unint64_t result;

  result = qword_256113B30;
  if (!qword_256113B30)
  {
    result = MEMORY[0x23493D400](&unk_233B5D3D0, &type metadata for ManagedAppDistributionError.DeviceNotManagedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256113B30);
  }
  return result;
}

unint64_t sub_233B35F14()
{
  unint64_t result;

  result = qword_256113B38;
  if (!qword_256113B38)
  {
    result = MEMORY[0x23493D400](&unk_233B5D380, &type metadata for ManagedAppDistributionError.NetworkErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256113B38);
  }
  return result;
}

unint64_t sub_233B35F58()
{
  unint64_t result;

  result = qword_256113B40;
  if (!qword_256113B40)
  {
    result = MEMORY[0x23493D400](&unk_233B5D330, &type metadata for ManagedAppDistributionError.UnrecoverableErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256113B40);
  }
  return result;
}

uint64_t ManagedAppDistributionError.hashValue.getter()
{
  sub_233B58590();
  sub_233B5859C();
  return sub_233B585C0();
}

uint64_t ManagedAppDistributionError.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD v29[4];
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;

  v46 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256113B48);
  v31 = *(_QWORD *)(v3 - 8);
  v32 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v45 = (char *)v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = __swift_instantiateConcreteTypeFromMangledName(&qword_256113B50);
  v37 = *(_QWORD *)(v44 - 8);
  MEMORY[0x24BDAC7A8](v44);
  v43 = (char *)v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256113B58);
  v38 = *(_QWORD *)(v6 - 8);
  v39 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v42 = (char *)v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256113B60);
  v35 = *(_QWORD *)(v8 - 8);
  v36 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v41 = (char *)v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_256113B68);
  v33 = *(_QWORD *)(v10 - 8);
  v34 = v10;
  MEMORY[0x24BDAC7A8](v10);
  v40 = (char *)v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_256113B70);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_256113B78);
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)v29 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = a1[3];
  v47 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v20);
  sub_233B35DC0();
  v21 = v48;
  sub_233B58608();
  if (!v21)
  {
    v29[3] = v15;
    v29[1] = v13;
    v29[2] = v12;
    v30 = v17;
    v48 = v16;
    v22 = v19;
    v23 = sub_233B583F8();
    if (*(_QWORD *)(v23 + 16) == 1)
    {
      v29[0] = v23;
      __asm { BR              X9 }
    }
    v24 = sub_233B582D8();
    swift_allocError();
    v26 = v25;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256113238);
    *v26 = &type metadata for ManagedAppDistributionError;
    v27 = v48;
    sub_233B58374();
    sub_233B582CC();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v24 - 8) + 104))(v26, *MEMORY[0x24BEE26D0], v24);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v30 + 8))(v22, v27);
  }
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)v47);
}

void sub_233B363C8()
{
  char v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;

  v6 = v0;
  *(_BYTE *)(v5 - 69) = 1;
  sub_233B35F14();
  v7 = *(_QWORD *)(v5 - 160);
  v8 = *(_QWORD *)(v5 - 96);
  sub_233B58368();
  if (!v2)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v5 - 216) + 8))(v7, *(_QWORD *)(v5 - 208));
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v1, v8);
    *v3 = v6;
    JUMPOUT(0x233B363A0);
  }
  swift_bridgeObjectRelease();
  JUMPOUT(0x233B36398);
}

unint64_t sub_233B36618()
{
  unint64_t result;

  result = qword_256113B80;
  if (!qword_256113B80)
  {
    result = MEMORY[0x23493D400](&protocol conformance descriptor for ManagedAppDistributionError, &type metadata for ManagedAppDistributionError);
    atomic_store(result, (unint64_t *)&qword_256113B80);
  }
  return result;
}

uint64_t sub_233B36660()
{
  _BYTE *v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[16];

  v1 = sub_233B57DBC();
  MEMORY[0x24BDAC7A8](v1);
  v4[15] = *v0;
  ManagedAppDistributionError.localizedStringResource.getter((uint64_t)&v4[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)]);
  return sub_233B57FB4();
}

uint64_t sub_233B366D0()
{
  return 0;
}

uint64_t sub_233B366DC()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t sub_233B366E8(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  return a2(0);
}

uint64_t sub_233B36710@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ManagedAppDistributionError.init(from:)(a1, a2);
}

void sub_233B36724(_QWORD *a1)
{
  ManagedAppDistributionError.encode(to:)(a1);
}

ValueMetadata *type metadata accessor for ManagedAppDistributionError()
{
  return &type metadata for ManagedAppDistributionError;
}

uint64_t _s22ManagedAppDistribution27ManagedAppDistributionErrorOwet_0(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFB)
    goto LABEL_17;
  if (a2 + 5 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 5) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 5;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 5;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 5;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 6;
  v8 = v6 - 6;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s22ManagedAppDistribution27ManagedAppDistributionErrorOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_233B3683C + 4 * byte_233B5CDBD[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_233B36870 + 4 * byte_233B5CDB8[v4]))();
}

uint64_t sub_233B36870(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_233B36878(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x233B36880);
  return result;
}

uint64_t sub_233B3688C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x233B36894);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_233B36898(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_233B368A0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ManagedAppDistributionError.CodingKeys()
{
  return &type metadata for ManagedAppDistributionError.CodingKeys;
}

ValueMetadata *type metadata accessor for ManagedAppDistributionError.UnrecoverableErrorCodingKeys()
{
  return &type metadata for ManagedAppDistributionError.UnrecoverableErrorCodingKeys;
}

ValueMetadata *type metadata accessor for ManagedAppDistributionError.NetworkErrorCodingKeys()
{
  return &type metadata for ManagedAppDistributionError.NetworkErrorCodingKeys;
}

ValueMetadata *type metadata accessor for ManagedAppDistributionError.DeviceNotManagedCodingKeys()
{
  return &type metadata for ManagedAppDistributionError.DeviceNotManagedCodingKeys;
}

ValueMetadata *type metadata accessor for ManagedAppDistributionError.UnsupportedPlatformCodingKeys()
{
  return &type metadata for ManagedAppDistributionError.UnsupportedPlatformCodingKeys;
}

ValueMetadata *type metadata accessor for ManagedAppDistributionError.LicenseNotFoundCodingKeys()
{
  return &type metadata for ManagedAppDistributionError.LicenseNotFoundCodingKeys;
}

ValueMetadata *type metadata accessor for ManagedAppDistributionError.AppNotManagedCodingKeys()
{
  return &type metadata for ManagedAppDistributionError.AppNotManagedCodingKeys;
}

unint64_t sub_233B36920()
{
  unint64_t result;

  result = qword_256113B88;
  if (!qword_256113B88)
  {
    result = MEMORY[0x23493D400](&unk_233B5D308, &type metadata for ManagedAppDistributionError.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256113B88);
  }
  return result;
}

unint64_t sub_233B36968()
{
  unint64_t result;

  result = qword_256113B90;
  if (!qword_256113B90)
  {
    result = MEMORY[0x23493D400](&unk_233B5D228, &type metadata for ManagedAppDistributionError.UnrecoverableErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256113B90);
  }
  return result;
}

unint64_t sub_233B369B0()
{
  unint64_t result;

  result = qword_256113B98;
  if (!qword_256113B98)
  {
    result = MEMORY[0x23493D400](&unk_233B5D250, &type metadata for ManagedAppDistributionError.UnrecoverableErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256113B98);
  }
  return result;
}

unint64_t sub_233B369F8()
{
  unint64_t result;

  result = qword_256113BA0;
  if (!qword_256113BA0)
  {
    result = MEMORY[0x23493D400](&unk_233B5D1D8, &type metadata for ManagedAppDistributionError.NetworkErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256113BA0);
  }
  return result;
}

unint64_t sub_233B36A40()
{
  unint64_t result;

  result = qword_256113BA8;
  if (!qword_256113BA8)
  {
    result = MEMORY[0x23493D400](&unk_233B5D200, &type metadata for ManagedAppDistributionError.NetworkErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256113BA8);
  }
  return result;
}

unint64_t sub_233B36A88()
{
  unint64_t result;

  result = qword_256113BB0;
  if (!qword_256113BB0)
  {
    result = MEMORY[0x23493D400](&unk_233B5D188, &type metadata for ManagedAppDistributionError.DeviceNotManagedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256113BB0);
  }
  return result;
}

unint64_t sub_233B36AD0()
{
  unint64_t result;

  result = qword_256113BB8;
  if (!qword_256113BB8)
  {
    result = MEMORY[0x23493D400](&unk_233B5D1B0, &type metadata for ManagedAppDistributionError.DeviceNotManagedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256113BB8);
  }
  return result;
}

unint64_t sub_233B36B18()
{
  unint64_t result;

  result = qword_256113BC0;
  if (!qword_256113BC0)
  {
    result = MEMORY[0x23493D400](&unk_233B5D138, &type metadata for ManagedAppDistributionError.UnsupportedPlatformCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256113BC0);
  }
  return result;
}

unint64_t sub_233B36B60()
{
  unint64_t result;

  result = qword_256113BC8;
  if (!qword_256113BC8)
  {
    result = MEMORY[0x23493D400](&unk_233B5D160, &type metadata for ManagedAppDistributionError.UnsupportedPlatformCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256113BC8);
  }
  return result;
}

unint64_t sub_233B36BA8()
{
  unint64_t result;

  result = qword_256113BD0;
  if (!qword_256113BD0)
  {
    result = MEMORY[0x23493D400](&unk_233B5D0E8, &type metadata for ManagedAppDistributionError.LicenseNotFoundCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256113BD0);
  }
  return result;
}

unint64_t sub_233B36BF0()
{
  unint64_t result;

  result = qword_256113BD8;
  if (!qword_256113BD8)
  {
    result = MEMORY[0x23493D400](&unk_233B5D110, &type metadata for ManagedAppDistributionError.LicenseNotFoundCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256113BD8);
  }
  return result;
}

unint64_t sub_233B36C38()
{
  unint64_t result;

  result = qword_256113BE0;
  if (!qword_256113BE0)
  {
    result = MEMORY[0x23493D400](&unk_233B5D098, &type metadata for ManagedAppDistributionError.AppNotManagedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256113BE0);
  }
  return result;
}

unint64_t sub_233B36C80()
{
  unint64_t result;

  result = qword_256113BE8;
  if (!qword_256113BE8)
  {
    result = MEMORY[0x23493D400](&unk_233B5D0C0, &type metadata for ManagedAppDistributionError.AppNotManagedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256113BE8);
  }
  return result;
}

unint64_t sub_233B36CC8()
{
  unint64_t result;

  result = qword_256113BF0;
  if (!qword_256113BF0)
  {
    result = MEMORY[0x23493D400](&unk_233B5D278, &type metadata for ManagedAppDistributionError.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256113BF0);
  }
  return result;
}

unint64_t sub_233B36D10()
{
  unint64_t result;

  result = qword_256113BF8;
  if (!qword_256113BF8)
  {
    result = MEMORY[0x23493D400](&unk_233B5D2A0, &type metadata for ManagedAppDistributionError.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256113BF8);
  }
  return result;
}

uint64_t sub_233B36D54(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000012 && a2 == 0x8000000233B61AD0 || (sub_233B584D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x456B726F7774656ELL && a2 == 0xEC000000726F7272 || (sub_233B584D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x8000000233B61AF0 || (sub_233B584D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x8000000233B61B10 || (sub_233B584D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x4E65736E6563696CLL && a2 == 0xEF646E756F46746FLL || (sub_233B584D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x614D746F4E707061 && a2 == 0xED0000646567616ELL)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    v5 = sub_233B584D0();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

uint64_t ManagedAppDeclaration.declarationKey.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ManagedAppDeclaration.declarationKey.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*ManagedAppDeclaration.declarationKey.modify())()
{
  return nullsub_1;
}

uint64_t ManagedAppDeclaration.declarationIdentifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ManagedAppDeclaration.declarationIdentifier.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return result;
}

uint64_t (*ManagedAppDeclaration.declarationIdentifier.modify())()
{
  return nullsub_1;
}

uint64_t ManagedAppDeclaration.managementScope.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 32);
}

uint64_t ManagedAppDeclaration.managementScope.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 32) = result & 1;
  return result;
}

uint64_t (*ManagedAppDeclaration.managementScope.modify())()
{
  return nullsub_1;
}

uint64_t ManagedAppDeclaration.personaIdentifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ManagedAppDeclaration.personaIdentifier.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 40) = a1;
  *(_QWORD *)(v2 + 48) = a2;
  return result;
}

uint64_t (*ManagedAppDeclaration.personaIdentifier.modify())()
{
  return nullsub_1;
}

uint64_t ManagedAppDeclaration.attributes.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v2 = *(_QWORD *)(v1 + 56);
  v3 = *(_QWORD *)(v1 + 64);
  *a1 = v2;
  a1[1] = v3;
  return sub_233B16EB4(v2, v3);
}

uint64_t ManagedAppDeclaration.attributes.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = *a1;
  v3 = a1[1];
  result = sub_233B16EC8(*(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64));
  *(_QWORD *)(v1 + 56) = v2;
  *(_QWORD *)(v1 + 64) = v3;
  return result;
}

uint64_t (*ManagedAppDeclaration.attributes.modify())()
{
  return nullsub_1;
}

uint64_t ManagedAppDeclaration.installBehavior.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for ManagedAppDeclaration(0);
  return sub_233B14538(v1 + *(int *)(v3 + 36), a1, type metadata accessor for ManagedAppDeclaration.InstallBehavior);
}

uint64_t type metadata accessor for ManagedAppDeclaration(uint64_t a1)
{
  return sub_233B3F4CC(a1, (uint64_t *)&unk_25424D158);
}

uint64_t type metadata accessor for ManagedAppDeclaration.InstallBehavior(uint64_t a1)
{
  return sub_233B3F4CC(a1, (uint64_t *)&unk_25424D148);
}

uint64_t ManagedAppDeclaration.installBehavior.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for ManagedAppDeclaration(0);
  return sub_233B3C504(a1, v1 + *(int *)(v3 + 36), type metadata accessor for ManagedAppDeclaration.InstallBehavior);
}

uint64_t (*ManagedAppDeclaration.installBehavior.modify())()
{
  type metadata accessor for ManagedAppDeclaration(0);
  return nullsub_1;
}

uint64_t ManagedAppDeclaration.backupBehavior.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for ManagedAppDeclaration(0);
  *a1 = *(_BYTE *)(v1 + *(int *)(result + 40));
  return result;
}

uint64_t ManagedAppDeclaration.backupBehavior.setter(char *a1)
{
  uint64_t v1;
  char v2;
  uint64_t result;

  v2 = *a1;
  result = type metadata accessor for ManagedAppDeclaration(0);
  *(_BYTE *)(v1 + *(int *)(result + 40)) = v2;
  return result;
}

uint64_t (*ManagedAppDeclaration.backupBehavior.modify())()
{
  type metadata accessor for ManagedAppDeclaration(0);
  return nullsub_1;
}

uint64_t ManagedAppDeclaration.updateBehavior.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;

  result = type metadata accessor for ManagedAppDeclaration(0);
  v4 = (uint64_t *)(v1 + *(int *)(result + 44));
  v5 = *v4;
  LOBYTE(v4) = *((_BYTE *)v4 + 8);
  *(_QWORD *)a1 = v5;
  *(_BYTE *)(a1 + 8) = (_BYTE)v4;
  return result;
}

uint64_t ManagedAppDeclaration.updateBehavior.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t result;
  uint64_t v5;

  v2 = *a1;
  v3 = *((_BYTE *)a1 + 8);
  result = type metadata accessor for ManagedAppDeclaration(0);
  v5 = v1 + *(int *)(result + 44);
  *(_QWORD *)v5 = v2;
  *(_BYTE *)(v5 + 8) = v3;
  return result;
}

uint64_t (*ManagedAppDeclaration.updateBehavior.modify())()
{
  type metadata accessor for ManagedAppDeclaration(0);
  return nullsub_1;
}

uint64_t ManagedAppDeclaration.platform.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for ManagedAppDeclaration(0);
  *a1 = *(_QWORD *)(v1 + *(int *)(result + 48));
  return result;
}

uint64_t ManagedAppDeclaration.platform.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v2 = *a1;
  result = type metadata accessor for ManagedAppDeclaration(0);
  *(_QWORD *)(v1 + *(int *)(result + 48)) = v2;
  return result;
}

uint64_t (*ManagedAppDeclaration.platform.modify())()
{
  type metadata accessor for ManagedAppDeclaration(0);
  return nullsub_1;
}

uint64_t ManagedAppDeclaration.init(declarationKey:declarationIdentifier:managementScope:personaIdentifier:installBehavior:backupBehavior:updateBehavior:platform:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, char *a10, uint64_t *a11, uint64_t *a12)
{
  char v16;
  char v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  int *v21;
  uint64_t result;
  uint64_t v23;

  v16 = a5 & 1;
  v17 = *a10;
  v18 = *a11;
  v19 = *((_BYTE *)a11 + 8);
  v20 = *a12;
  *(_OWORD *)(a9 + 56) = xmmword_233B5D560;
  *(_QWORD *)a9 = a1;
  *(_QWORD *)(a9 + 8) = a2;
  *(_QWORD *)(a9 + 16) = a3;
  *(_QWORD *)(a9 + 24) = a4;
  v21 = (int *)type metadata accessor for ManagedAppDeclaration(0);
  result = sub_233B1460C(a8, a9 + v21[9], type metadata accessor for ManagedAppDeclaration.InstallBehavior);
  *(_BYTE *)(a9 + v21[10]) = v17;
  v23 = a9 + v21[11];
  *(_QWORD *)v23 = v18;
  *(_BYTE *)(v23 + 8) = v19;
  *(_QWORD *)(a9 + v21[12]) = v20;
  *(_QWORD *)(a9 + 40) = a6;
  *(_QWORD *)(a9 + 48) = a7;
  *(_BYTE *)(a9 + 32) = v16;
  return result;
}

uint64_t ManagedAppDeclaration.init(declarationKey:declarationIdentifier:personaIdentifier:installBehavior:backupBehavior:updateBehavior:platform:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char *a8@<X7>, uint64_t a9@<X8>, uint64_t *a10, uint64_t *a11)
{
  char v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  int *v19;
  uint64_t result;
  uint64_t v21;

  v15 = *a8;
  v16 = *a10;
  v17 = *((_BYTE *)a10 + 8);
  v18 = *a11;
  *(_OWORD *)(a9 + 56) = xmmword_233B5D560;
  *(_QWORD *)a9 = a1;
  *(_QWORD *)(a9 + 8) = a2;
  *(_QWORD *)(a9 + 16) = a3;
  *(_QWORD *)(a9 + 24) = a4;
  v19 = (int *)type metadata accessor for ManagedAppDeclaration(0);
  result = sub_233B1460C(a7, a9 + v19[9], type metadata accessor for ManagedAppDeclaration.InstallBehavior);
  *(_BYTE *)(a9 + v19[10]) = v15;
  v21 = a9 + v19[11];
  *(_QWORD *)v21 = v16;
  *(_BYTE *)(v21 + 8) = v17;
  *(_QWORD *)(a9 + v19[12]) = v18;
  *(_QWORD *)(a9 + 40) = a5;
  *(_QWORD *)(a9 + 48) = a6;
  *(_BYTE *)(a9 + 32) = 1;
  return result;
}

uint64_t ManagedAppDeclaration.init(declarationKey:declarationIdentifier:personaIdentifier:installBehavior:backupBehavior:updateBehavior:removalBehavior:platform:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char *a8@<X7>, uint64_t a9@<X8>, uint64_t *a10, uint64_t a11, uint64_t *a12)
{
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  int *v20;
  uint64_t result;
  uint64_t v22;

  v16 = *a8;
  v17 = *a10;
  v18 = *((_BYTE *)a10 + 8);
  v19 = *a12;
  *(_OWORD *)(a9 + 56) = xmmword_233B5D560;
  *(_QWORD *)a9 = a1;
  *(_QWORD *)(a9 + 8) = a2;
  *(_QWORD *)(a9 + 16) = a3;
  *(_QWORD *)(a9 + 24) = a4;
  v20 = (int *)type metadata accessor for ManagedAppDeclaration(0);
  result = sub_233B1460C(a7, a9 + v20[9], type metadata accessor for ManagedAppDeclaration.InstallBehavior);
  *(_BYTE *)(a9 + v20[10]) = v16;
  v22 = a9 + v20[11];
  *(_QWORD *)v22 = v17;
  *(_BYTE *)(v22 + 8) = v18;
  *(_QWORD *)(a9 + v20[12]) = v19;
  *(_QWORD *)(a9 + 40) = a5;
  *(_QWORD *)(a9 + 48) = a6;
  *(_BYTE *)(a9 + 32) = 1;
  return result;
}

uint64_t ManagedAppDeclaration.init(declarationKey:declarationIdentifier:installBehavior:backupBehavior:updateBehavior:removalBehavior:platform:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char *a6@<X5>, uint64_t *a7@<X6>, uint64_t a8@<X8>, uint64_t *a9)
{
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  int *v15;
  uint64_t result;
  uint64_t v17;

  v11 = *a6;
  v12 = *a7;
  v13 = *((_BYTE *)a7 + 8);
  v14 = *a9;
  *(_OWORD *)(a8 + 56) = xmmword_233B5D560;
  *(_QWORD *)a8 = a1;
  *(_QWORD *)(a8 + 8) = a2;
  *(_QWORD *)(a8 + 16) = a3;
  *(_QWORD *)(a8 + 24) = a4;
  v15 = (int *)type metadata accessor for ManagedAppDeclaration(0);
  result = sub_233B1460C(a5, a8 + v15[9], type metadata accessor for ManagedAppDeclaration.InstallBehavior);
  *(_BYTE *)(a8 + v15[10]) = v11;
  v17 = a8 + v15[11];
  *(_QWORD *)v17 = v12;
  *(_BYTE *)(v17 + 8) = v13;
  *(_QWORD *)(a8 + v15[12]) = v14;
  *(_QWORD *)(a8 + 40) = 0;
  *(_QWORD *)(a8 + 48) = 0;
  *(_BYTE *)(a8 + 32) = 1;
  return result;
}

BOOL static ManagedAppDeclaration.ManagementScope.== infix(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

uint64_t ManagedAppDeclaration.ManagementScope.hash(into:)()
{
  return sub_233B5859C();
}

uint64_t sub_233B3777C()
{
  _BYTE *v0;

  if (*v0)
    return 1919251317;
  else
    return 0x6D6574737973;
}

uint64_t sub_233B377AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_233B3C0A8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_233B377D0()
{
  sub_233B37A90();
  return sub_233B58638();
}

uint64_t sub_233B377F8()
{
  sub_233B37A90();
  return sub_233B58644();
}

uint64_t sub_233B37820()
{
  sub_233B37B18();
  return sub_233B58638();
}

uint64_t sub_233B37848()
{
  sub_233B37B18();
  return sub_233B58644();
}

uint64_t sub_233B37870()
{
  sub_233B37AD4();
  return sub_233B58638();
}

uint64_t sub_233B37898()
{
  sub_233B37AD4();
  return sub_233B58644();
}

uint64_t ManagedAppDeclaration.ManagementScope.encode(to:)(_QWORD *a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  char v18;
  char v19;

  v17 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256113C00);
  v15 = *(_QWORD *)(v3 - 8);
  v16 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_256113C08);
  v6 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256113C10);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_233B37A90();
  sub_233B5862C();
  if ((v17 & 1) != 0)
  {
    v19 = 1;
    sub_233B37AD4();
    sub_233B58410();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v5, v16);
  }
  else
  {
    v18 = 0;
    sub_233B37B18();
    sub_233B58410();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v14);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

unint64_t sub_233B37A90()
{
  unint64_t result;

  result = qword_256113C18;
  if (!qword_256113C18)
  {
    result = MEMORY[0x23493D400](&unk_233B5F274, &type metadata for ManagedAppDeclaration.ManagementScope.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256113C18);
  }
  return result;
}

unint64_t sub_233B37AD4()
{
  unint64_t result;

  result = qword_256113C20;
  if (!qword_256113C20)
  {
    result = MEMORY[0x23493D400](&unk_233B5F224, &type metadata for ManagedAppDeclaration.ManagementScope.UserCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256113C20);
  }
  return result;
}

unint64_t sub_233B37B18()
{
  unint64_t result;

  result = qword_256113C28;
  if (!qword_256113C28)
  {
    result = MEMORY[0x23493D400](&unk_233B5F1D4, &type metadata for ManagedAppDeclaration.ManagementScope.SystemCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256113C28);
  }
  return result;
}

uint64_t ManagedAppDeclaration.ManagementScope.hashValue.getter()
{
  sub_233B58590();
  sub_233B5859C();
  return sub_233B585C0();
}

uint64_t ManagedAppDeclaration.ManagementScope.init(from:)(_QWORD *a1)
{
  return sub_233B3C180(a1) & 1;
}

uint64_t sub_233B37BB8@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = sub_233B3C180(a1);
  if (!v2)
    *a2 = result & 1;
  return result;
}

uint64_t sub_233B37BE4(_QWORD *a1)
{
  unsigned __int8 *v1;

  return ManagedAppDeclaration.ManagementScope.encode(to:)(a1, *v1);
}

uint64_t ManagedAppDeclaration.Attributes.rawValue.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)v0;
  sub_233B13D4C(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
  return v1;
}

uint64_t ManagedAppDeclaration.Attributes.init(rawValue:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

void ManagedAppDeclaration.Attributes.init(_:)(uint64_t *a1@<X8>)
{
  void *v2;
  void *v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10[2];

  v10[1] = *(id *)MEMORY[0x24BDAC8D0];
  v2 = (void *)objc_opt_self();
  v3 = (void *)sub_233B57F18();
  swift_bridgeObjectRelease();
  v10[0] = 0;
  v4 = objc_msgSend(v2, sel_dataWithJSONObject_options_error_, v3, 0, v10);

  v5 = v10[0];
  if (v4)
  {
    v6 = sub_233B57E10();
    v8 = v7;

    *a1 = v6;
    a1[1] = v8;
  }
  else
  {
    v9 = v5;
    sub_233B57DA4();

    swift_willThrow();
  }
}

id ManagedAppDeclaration.Attributes.dictionaryRepresentation()()
{
  void *v0;
  void *v1;
  id v2;
  id v3;
  void *v5;
  id v6[6];

  v6[5] = *(id *)MEMORY[0x24BDAC8D0];
  v0 = (void *)objc_opt_self();
  v1 = (void *)sub_233B57E04();
  v6[0] = 0;
  v2 = objc_msgSend(v0, sel_JSONObjectWithData_options_error_, v1, 0, v6);

  v3 = v6[0];
  if (v2)
  {
    sub_233B58218();
    swift_unknownObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&qword_256113C30);
    swift_dynamicCast();
    return v6[0];
  }
  else
  {
    v5 = v3;
    sub_233B57DA4();

    return (id)swift_willThrow();
  }
}

uint64_t sub_233B37E6C()
{
  return 0x65756C6156776172;
}

uint64_t sub_233B37E88()
{
  sub_233B3C4AC();
  return sub_233B58638();
}

uint64_t sub_233B37EB0()
{
  sub_233B3C4AC();
  return sub_233B58644();
}

uint64_t ManagedAppDeclaration.Attributes.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256113C38);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v7 = v1[1];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_233B3C4AC();
  sub_233B5862C();
  v10[0] = v8;
  v10[1] = v7;
  sub_233B2B17C();
  sub_233B5847C();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t ManagedAppDeclaration.Attributes.init(from:)@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  __int128 v10;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256113C48);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_233B3C4AC();
  sub_233B58608();
  if (!v2)
  {
    sub_233B2B7C8();
    sub_233B583E0();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v10;
  }
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
}

uint64_t sub_233B380F8@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  return ManagedAppDeclaration.Attributes.init(from:)(a1, a2);
}

uint64_t sub_233B3810C(_QWORD *a1)
{
  return ManagedAppDeclaration.Attributes.encode(to:)(a1);
}

void ManagedAppDeclaration.InstallBehavior.installTiming.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

_BYTE *ManagedAppDeclaration.InstallBehavior.installTiming.setter(_BYTE *result)
{
  _BYTE *v1;

  *v1 = *result;
  return result;
}

uint64_t (*ManagedAppDeclaration.InstallBehavior.installTiming.modify())()
{
  return nullsub_1;
}

uint64_t ManagedAppDeclaration.InstallBehavior.isAccountPromptAllowed.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 1);
}

uint64_t ManagedAppDeclaration.InstallBehavior.isAccountPromptAllowed.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 1) = result;
  return result;
}

uint64_t (*ManagedAppDeclaration.InstallBehavior.isAccountPromptAllowed.modify())()
{
  return nullsub_1;
}

uint64_t ManagedAppDeclaration.InstallBehavior.purchaseMethod.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for ManagedAppDeclaration.InstallBehavior(0);
  return sub_233B14538(v1 + *(int *)(v3 + 24), a1, type metadata accessor for ManagedAppDeclaration.InstallBehavior.PurchaseMethodEnum);
}

uint64_t ManagedAppDeclaration.InstallBehavior.purchaseMethod.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for ManagedAppDeclaration.InstallBehavior(0);
  return sub_233B3C504(a1, v1 + *(int *)(v3 + 24), type metadata accessor for ManagedAppDeclaration.InstallBehavior.PurchaseMethodEnum);
}

uint64_t (*ManagedAppDeclaration.InstallBehavior.purchaseMethod.modify())()
{
  type metadata accessor for ManagedAppDeclaration.InstallBehavior(0);
  return nullsub_1;
}

uint64_t ManagedAppDeclaration.InstallBehavior.init(installTiming:isAccountPromptAllowed:purchaseMethod:)@<X0>(_BYTE *a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v6;

  *a4 = *a1;
  a4[1] = a2;
  v6 = type metadata accessor for ManagedAppDeclaration.InstallBehavior(0);
  return sub_233B1460C(a3, (uint64_t)&a4[*(int *)(v6 + 24)], type metadata accessor for ManagedAppDeclaration.InstallBehavior.PurchaseMethodEnum);
}

void static ManagedAppDeclaration.InstallBehavior.InstallTiming.immediately.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void static ManagedAppDeclaration.InstallBehavior.InstallTiming.onDemand.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

BOOL static ManagedAppDeclaration.InstallBehavior.InstallTimingEnum.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t ManagedAppDeclaration.InstallBehavior.InstallTimingEnum.hash(into:)()
{
  return sub_233B5859C();
}

uint64_t sub_233B382A8()
{
  _BYTE *v0;

  if (*v0)
    return 0x646E616D65446E6FLL;
  else
    return 0x74616964656D6D69;
}

uint64_t sub_233B382EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_233B3CD40(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_233B38310()
{
  sub_233B3C548();
  return sub_233B58638();
}

uint64_t sub_233B38338()
{
  sub_233B3C548();
  return sub_233B58644();
}

uint64_t sub_233B38360()
{
  sub_233B3C5D0();
  return sub_233B58638();
}

uint64_t sub_233B38388()
{
  sub_233B3C5D0();
  return sub_233B58644();
}

uint64_t sub_233B383B0()
{
  sub_233B3C58C();
  return sub_233B58638();
}

uint64_t sub_233B383D8()
{
  sub_233B3C58C();
  return sub_233B58644();
}

uint64_t ManagedAppDeclaration.InstallBehavior.InstallTimingEnum.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256113C50);
  v16 = *(_QWORD *)(v3 - 8);
  v17 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256113C58);
  v14 = *(_QWORD *)(v6 - 8);
  v15 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256113C60);
  v18 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_233B3C548();
  sub_233B5862C();
  if ((v12 & 1) != 0)
  {
    v20 = 1;
    sub_233B3C58C();
    sub_233B58410();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v5, v17);
  }
  else
  {
    v19 = 0;
    sub_233B3C5D0();
    sub_233B58410();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v8, v15);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v11, v9);
}

uint64_t ManagedAppDeclaration.InstallBehavior.InstallTimingEnum.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v35;

  v30 = a2;
  v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_256113C80);
  v32 = *(_QWORD *)(v29 - 8);
  MEMORY[0x24BDAC7A8](v29);
  v31 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_256113C88);
  v4 = *(_QWORD *)(v28 - 8);
  MEMORY[0x24BDAC7A8](v28);
  v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_256113C90);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_233B3C548();
  v11 = v33;
  sub_233B58608();
  if (v11)
    goto LABEL_7;
  v26 = v4;
  v27 = a1;
  v12 = v31;
  v13 = v32;
  v33 = v8;
  v14 = sub_233B583F8();
  v15 = v7;
  if (*(_QWORD *)(v14 + 16) != 1)
  {
    v19 = sub_233B582D8();
    swift_allocError();
    v21 = v20;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256113238);
    *v21 = &type metadata for ManagedAppDeclaration.InstallBehavior.InstallTimingEnum;
    sub_233B58374();
    sub_233B582CC();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v19 - 8) + 104))(v21, *MEMORY[0x24BEE26D0], v19);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v33 + 8))(v10, v15);
    a1 = v27;
LABEL_7:
    v24 = (uint64_t)a1;
    return __swift_destroy_boxed_opaque_existential_0(v24);
  }
  v16 = *(_BYTE *)(v14 + 32);
  if ((v16 & 1) != 0)
  {
    LODWORD(v28) = *(unsigned __int8 *)(v14 + 32);
    v35 = 1;
    sub_233B3C58C();
    sub_233B58368();
    v17 = v33;
    v18 = v30;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v12, v29);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v10, v15);
    v16 = v28;
  }
  else
  {
    v34 = 0;
    sub_233B3C5D0();
    v22 = v6;
    sub_233B58368();
    v23 = v33;
    v18 = v30;
    (*(void (**)(char *, uint64_t))(v26 + 8))(v22, v28);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v10, v15);
  }
  *v18 = v16;
  v24 = (uint64_t)v27;
  return __swift_destroy_boxed_opaque_existential_0(v24);
}

uint64_t sub_233B38930@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return ManagedAppDeclaration.InstallBehavior.InstallTimingEnum.init(from:)(a1, a2);
}

uint64_t sub_233B38944(_QWORD *a1)
{
  return ManagedAppDeclaration.InstallBehavior.InstallTimingEnum.encode(to:)(a1);
}

uint64_t static ManagedAppDeclaration.InstallBehavior.PurchaseMethod.volumePurchaseProgram(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  char v6;

  *(_QWORD *)a4 = a1;
  *(_QWORD *)(a4 + 8) = a2;
  v6 = a3 & 1;
  *(_BYTE *)(a4 + 16) = a3 & 1;
  *(_BYTE *)(a4 + 17) = 0;
  type metadata accessor for ManagedAppDeclaration.InstallBehavior.PurchaseMethodEnum(0);
  swift_storeEnumTagMultiPayload();
  return sub_233B0486C(a1, a2, v6);
}

uint64_t static ManagedAppDeclaration.InstallBehavior.PurchaseMethod.volumePurchaseProgram(_:license:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, char *a4@<X3>, uint64_t a5@<X8>)
{
  char v8;
  char v9;

  v8 = *a4;
  *(_QWORD *)a5 = a1;
  *(_QWORD *)(a5 + 8) = a2;
  v9 = a3 & 1;
  *(_BYTE *)(a5 + 16) = a3 & 1;
  *(_BYTE *)(a5 + 17) = v8;
  type metadata accessor for ManagedAppDeclaration.InstallBehavior.PurchaseMethodEnum(0);
  swift_storeEnumTagMultiPayload();
  return sub_233B0486C(a1, a2, v9);
}

uint64_t static ManagedAppDeclaration.InstallBehavior.PurchaseMethod.manifest(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  v4 = sub_233B57DF8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  type metadata accessor for ManagedAppDeclaration.InstallBehavior.PurchaseMethodEnum(0);
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_233B38A70()
{
  _BYTE *v0;

  if (*v0)
    return 0x74736566696E616DLL;
  else
    return 0xD000000000000015;
}

uint64_t sub_233B38AB0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_233B3CE48(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_233B38AD4()
{
  sub_233B3C614();
  return sub_233B58638();
}

uint64_t sub_233B38AFC()
{
  sub_233B3C614();
  return sub_233B58644();
}

uint64_t sub_233B38B24()
{
  sub_233B3C658();
  return sub_233B58638();
}

uint64_t sub_233B38B4C()
{
  sub_233B3C658();
  return sub_233B58644();
}

uint64_t sub_233B38B74()
{
  _BYTE *v0;

  if (*v0)
    return 0x65736E6563696CLL;
  else
    return 12383;
}

uint64_t sub_233B38BA4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_233B3CF34(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_233B38BC8()
{
  sub_233B3C69C();
  return sub_233B58638();
}

uint64_t sub_233B38BF0()
{
  sub_233B3C69C();
  return sub_233B58644();
}

uint64_t ManagedAppDeclaration.InstallBehavior.PurchaseMethodEnum.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char v40;

  v31 = __swift_instantiateConcreteTypeFromMangledName(&qword_256113C98);
  v29 = *(_QWORD *)(v31 - 8);
  MEMORY[0x24BDAC7A8](v31);
  v3 = (char *)&v26 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = sub_233B57DF8();
  v28 = *(_QWORD *)(v30 - 8);
  MEMORY[0x24BDAC7A8](v30);
  v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_256113CA0);
  v27 = *(_QWORD *)(v33 - 8);
  MEMORY[0x24BDAC7A8](v33);
  v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ManagedAppDeclaration.InstallBehavior.PurchaseMethodEnum(0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_256113CA8);
  v35 = *(_QWORD *)(v11 - 8);
  v36 = v11;
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_233B3C614();
  sub_233B5862C();
  sub_233B14538(v32, (uint64_t)v10, type metadata accessor for ManagedAppDeclaration.InstallBehavior.PurchaseMethodEnum);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v14 = v28;
    v15 = v30;
    (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v5, v10, v30);
    LOBYTE(v37) = 1;
    sub_233B3C658();
    v16 = v36;
    sub_233B58410();
    sub_233B08530(&qword_256112C98, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDAE0]);
    v17 = v31;
    sub_233B5847C();
    (*(void (**)(char *, uint64_t))(v29 + 8))(v3, v17);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v5, v15);
    return (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v13, v16);
  }
  else
  {
    v19 = *(_QWORD *)v10;
    v20 = *((_QWORD *)v10 + 1);
    v21 = v10[16];
    v22 = v10[17];
    LOBYTE(v37) = 0;
    sub_233B3C69C();
    v23 = v36;
    sub_233B58410();
    v37 = v19;
    v38 = v20;
    v39 = v21;
    v40 = 0;
    sub_233B28ACC();
    v24 = v34;
    sub_233B5847C();
    if (v24)
    {
      (*(void (**)(char *, uint64_t))(v27 + 8))(v7, v33);
      (*(void (**)(char *, uint64_t))(v35 + 8))(v13, v23);
      return sub_233B04B94(v19, v20, v21);
    }
    else
    {
      sub_233B04B94(v19, v20, v21);
      LOBYTE(v37) = v22;
      v40 = 1;
      sub_233B3C6E0();
      v25 = v33;
      sub_233B5847C();
      (*(void (**)(char *, uint64_t))(v27 + 8))(v7, v25);
      return (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v13, v23);
    }
  }
}

uint64_t ManagedAppDeclaration.InstallBehavior.PurchaseMethodEnum.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  _QWORD *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  char v57;
  char v58;

  v44 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256113CD0);
  v46 = *(_QWORD *)(v3 - 8);
  v47 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v50 = (char *)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = __swift_instantiateConcreteTypeFromMangledName(&qword_256113CD8);
  v45 = *(_QWORD *)(v48 - 8);
  MEMORY[0x24BDAC7A8](v48);
  v49 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256113CE0);
  v51 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ManagedAppDeclaration.InstallBehavior.PurchaseMethodEnum(0);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v10);
  v15 = (char *)&v41 - v14;
  MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v41 - v16;
  v18 = a1[3];
  v52 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v18);
  sub_233B3C614();
  v19 = v53;
  sub_233B58608();
  if (v19)
    goto LABEL_7;
  v53 = v12;
  v42 = v15;
  v43 = v17;
  v21 = v49;
  v20 = v50;
  v22 = sub_233B583F8();
  v23 = (char *)v22;
  if (*(_QWORD *)(v22 + 16) != 1)
  {
    v25 = sub_233B582D8();
    swift_allocError();
    v27 = v26;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256113238);
    *v27 = v9;
    sub_233B58374();
    sub_233B582CC();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v25 - 8) + 104))(v27, *MEMORY[0x24BEE26D0], v25);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v51 + 8))(v8, v6);
LABEL_7:
    v33 = (uint64_t)v52;
    return __swift_destroy_boxed_opaque_existential_0(v33);
  }
  if ((*(_BYTE *)(v22 + 32) & 1) != 0)
  {
    v24 = v51;
    LOBYTE(v54) = 1;
    sub_233B3C658();
    sub_233B58368();
    v41 = v9;
    sub_233B57DF8();
    v30 = v8;
    sub_233B08530(&qword_256112CF0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDB10]);
    v31 = (uint64_t)v53;
    v32 = v47;
    sub_233B583E0();
    (*(void (**)(char *, uint64_t))(v46 + 8))(v20, v32);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v24 + 8))(v30, v6);
    v33 = (uint64_t)v52;
    swift_storeEnumTagMultiPayload();
    v34 = v31;
  }
  else
  {
    v41 = v9;
    LOBYTE(v54) = 0;
    sub_233B3C69C();
    sub_233B58368();
    v58 = 0;
    sub_233B28B54();
    v28 = v48;
    sub_233B583E0();
    v50 = v23;
    v53 = v8;
    v35 = v54;
    v36 = v55;
    v37 = v56;
    v57 = 1;
    sub_233B3C724();
    sub_233B583E0();
    v33 = (uint64_t)v52;
    (*(void (**)(char *, uint64_t))(v45 + 8))(v21, v28);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v51 + 8))(v53, v6);
    v38 = v58;
    v39 = v42;
    *v42 = v35;
    v39[1] = v36;
    *((_BYTE *)v39 + 16) = v37;
    *((_BYTE *)v39 + 17) = v38;
    swift_storeEnumTagMultiPayload();
    v34 = (uint64_t)v39;
  }
  v40 = (uint64_t)v43;
  sub_233B1460C(v34, (uint64_t)v43, type metadata accessor for ManagedAppDeclaration.InstallBehavior.PurchaseMethodEnum);
  sub_233B1460C(v40, v44, type metadata accessor for ManagedAppDeclaration.InstallBehavior.PurchaseMethodEnum);
  return __swift_destroy_boxed_opaque_existential_0(v33);
}

uint64_t sub_233B3955C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ManagedAppDeclaration.InstallBehavior.PurchaseMethodEnum.init(from:)(a1, a2);
}

uint64_t sub_233B39570(_QWORD *a1)
{
  return ManagedAppDeclaration.InstallBehavior.PurchaseMethodEnum.encode(to:)(a1);
}

uint64_t sub_233B39584()
{
  _BYTE *v0;

  if (*v0)
    return 0x656369766564;
  else
    return 1919251317;
}

uint64_t sub_233B395B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_233B3D00C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_233B395D8()
{
  sub_233B3C768();
  return sub_233B58638();
}

uint64_t sub_233B39600()
{
  sub_233B3C768();
  return sub_233B58644();
}

uint64_t sub_233B39628()
{
  sub_233B3C7AC();
  return sub_233B58638();
}

uint64_t sub_233B39650()
{
  sub_233B3C7AC();
  return sub_233B58644();
}

uint64_t sub_233B39678()
{
  sub_233B3C7F0();
  return sub_233B58638();
}

uint64_t sub_233B396A0()
{
  sub_233B3C7F0();
  return sub_233B58644();
}

uint64_t ManagedAppDeclaration.InstallBehavior.LicenseEnum.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256113CF0);
  v16 = *(_QWORD *)(v3 - 8);
  v17 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256113CF8);
  v14 = *(_QWORD *)(v6 - 8);
  v15 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256113D00);
  v18 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_233B3C768();
  sub_233B5862C();
  if ((v12 & 1) != 0)
  {
    v20 = 1;
    sub_233B3C7AC();
    sub_233B58410();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v5, v17);
  }
  else
  {
    v19 = 0;
    sub_233B3C7F0();
    sub_233B58410();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v8, v15);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v11, v9);
}

uint64_t ManagedAppDeclaration.InstallBehavior.LicenseEnum.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v35;

  v30 = a2;
  v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_256113D20);
  v32 = *(_QWORD *)(v29 - 8);
  MEMORY[0x24BDAC7A8](v29);
  v31 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_256113D28);
  v4 = *(_QWORD *)(v28 - 8);
  MEMORY[0x24BDAC7A8](v28);
  v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_256113D30);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_233B3C768();
  v11 = v33;
  sub_233B58608();
  if (v11)
    goto LABEL_7;
  v26 = v4;
  v27 = a1;
  v12 = v31;
  v13 = v32;
  v33 = v8;
  v14 = sub_233B583F8();
  v15 = v7;
  if (*(_QWORD *)(v14 + 16) != 1)
  {
    v19 = sub_233B582D8();
    swift_allocError();
    v21 = v20;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256113238);
    *v21 = &type metadata for ManagedAppDeclaration.InstallBehavior.LicenseEnum;
    sub_233B58374();
    sub_233B582CC();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v19 - 8) + 104))(v21, *MEMORY[0x24BEE26D0], v19);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v33 + 8))(v10, v15);
    a1 = v27;
LABEL_7:
    v24 = (uint64_t)a1;
    return __swift_destroy_boxed_opaque_existential_0(v24);
  }
  v16 = *(_BYTE *)(v14 + 32);
  if ((v16 & 1) != 0)
  {
    LODWORD(v28) = *(unsigned __int8 *)(v14 + 32);
    v35 = 1;
    sub_233B3C7AC();
    sub_233B58368();
    v17 = v33;
    v18 = v30;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v12, v29);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v10, v15);
    v16 = v28;
  }
  else
  {
    v34 = 0;
    sub_233B3C7F0();
    v22 = v6;
    sub_233B58368();
    v23 = v33;
    v18 = v30;
    (*(void (**)(char *, uint64_t))(v26 + 8))(v22, v28);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v10, v15);
  }
  *v18 = v16;
  v24 = (uint64_t)v27;
  return __swift_destroy_boxed_opaque_existential_0(v24);
}

uint64_t sub_233B39BF8@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return ManagedAppDeclaration.InstallBehavior.LicenseEnum.init(from:)(a1, a2);
}

uint64_t sub_233B39C0C(_QWORD *a1)
{
  return ManagedAppDeclaration.InstallBehavior.LicenseEnum.encode(to:)(a1);
}

uint64_t sub_233B39C20()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0xD000000000000016;
  if (*v0 != 1)
    v1 = 0x6573616863727570;
  if (*v0)
    return v1;
  else
    return 0x546C6C6174736E69;
}

uint64_t sub_233B39C98@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_233B3D0E4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_233B39CBC()
{
  sub_233B3C834();
  return sub_233B58638();
}

uint64_t sub_233B39CE4()
{
  sub_233B3C834();
  return sub_233B58644();
}

uint64_t ManagedAppDeclaration.InstallBehavior.encode(to:)(_QWORD *a1)
{
  _BYTE *v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE v10[16];

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256113D38);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_233B3C834();
  sub_233B5862C();
  v10[15] = *v3;
  v10[14] = 0;
  sub_233B3C878();
  sub_233B5847C();
  if (!v2)
  {
    v10[13] = 1;
    sub_233B58458();
    type metadata accessor for ManagedAppDeclaration.InstallBehavior(0);
    v10[12] = 2;
    type metadata accessor for ManagedAppDeclaration.InstallBehavior.PurchaseMethodEnum(0);
    sub_233B08530(&qword_256113D50, type metadata accessor for ManagedAppDeclaration.InstallBehavior.PurchaseMethodEnum, (uint64_t)&protocol conformance descriptor for ManagedAppDeclaration.InstallBehavior.PurchaseMethodEnum);
    sub_233B5847C();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t ManagedAppDeclaration.InstallBehavior.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  char v25;
  char v26;

  v18 = a2;
  v19 = type metadata accessor for ManagedAppDeclaration.InstallBehavior.PurchaseMethodEnum(0);
  MEMORY[0x24BDAC7A8](v19);
  v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_256113D58);
  v5 = *(_QWORD *)(v21 - 8);
  MEMORY[0x24BDAC7A8](v21);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ManagedAppDeclaration.InstallBehavior(0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_233B3C834();
  v20 = v7;
  v11 = v22;
  sub_233B58608();
  if (v11)
    return __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  v12 = v5;
  v25 = 0;
  sub_233B3C8BC();
  sub_233B583E0();
  *v10 = v26;
  v24 = 1;
  v10[1] = sub_233B583BC() & 1;
  v23 = 2;
  sub_233B08530(&qword_256113D68, type metadata accessor for ManagedAppDeclaration.InstallBehavior.PurchaseMethodEnum, (uint64_t)&protocol conformance descriptor for ManagedAppDeclaration.InstallBehavior.PurchaseMethodEnum);
  v14 = v20;
  v13 = v21;
  sub_233B583E0();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v13);
  v15 = v18;
  sub_233B1460C((uint64_t)v4, (uint64_t)&v10[*(int *)(v8 + 24)], type metadata accessor for ManagedAppDeclaration.InstallBehavior.PurchaseMethodEnum);
  sub_233B14538((uint64_t)v10, v15, type metadata accessor for ManagedAppDeclaration.InstallBehavior);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  return sub_233B146EC((uint64_t)v10, type metadata accessor for ManagedAppDeclaration.InstallBehavior);
}

uint64_t sub_233B3A114@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ManagedAppDeclaration.InstallBehavior.init(from:)(a1, a2);
}

uint64_t sub_233B3A128(_QWORD *a1)
{
  return ManagedAppDeclaration.InstallBehavior.encode(to:)(a1);
}

uint64_t ManagedAppDeclaration.BackupBehavior.backupAppData.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t ManagedAppDeclaration.BackupBehavior.backupAppData.setter(uint64_t result)
{
  _BYTE *v1;

  *v1 = result;
  return result;
}

uint64_t (*ManagedAppDeclaration.BackupBehavior.backupAppData.modify())()
{
  return nullsub_1;
}

uint64_t ManagedAppDeclaration.BackupBehavior.init(backupAppData:)@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t sub_233B3A164()
{
  return 0x704170756B636162;
}

uint64_t sub_233B3A188@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x704170756B636162 && a2 == 0xED00006174614470)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_233B584D0();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_233B3A240()
{
  sub_233B3C900();
  return sub_233B58638();
}

uint64_t sub_233B3A268()
{
  sub_233B3C900();
  return sub_233B58644();
}

uint64_t ManagedAppDeclaration.BackupBehavior.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_256113D70);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_233B3C900();
  sub_233B5862C();
  sub_233B58458();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t ManagedAppDeclaration.BackupBehavior.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char v9;
  uint64_t v11;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256113D80);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_233B3C900();
  sub_233B58608();
  if (!v2)
  {
    v9 = sub_233B583BC();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v9 & 1;
  }
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
}

uint64_t sub_233B3A480@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return ManagedAppDeclaration.BackupBehavior.init(from:)(a1, a2);
}

uint64_t sub_233B3A494(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_256113D70);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_233B3C900();
  sub_233B5862C();
  sub_233B58458();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t static ManagedAppDeclaration.UpdateBehavior.automaticallyUpdate(evid:)@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  *(_QWORD *)a3 = result;
  *(_BYTE *)(a3 + 8) = a2 & 1;
  return result;
}

uint64_t sub_233B3A58C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x65756C6156776172 && a2 == 0xE800000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_233B584D0();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_233B3A620()
{
  sub_233B3C944();
  return sub_233B58638();
}

uint64_t sub_233B3A648()
{
  sub_233B3C944();
  return sub_233B58644();
}

uint64_t ManagedAppDeclaration.UpdateBehavior.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char v8;
  uint64_t v10;
  char v11;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256113D88);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = *((_BYTE *)v1 + 8);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_233B3C944();
  sub_233B5862C();
  v10 = v7;
  v11 = v8;
  sub_233B3C988();
  sub_233B5847C();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t ManagedAppDeclaration.UpdateBehavior.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char v9;
  uint64_t v11;
  char v12;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256113DA0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_233B3C944();
  sub_233B58608();
  if (!v2)
  {
    sub_233B3C9CC();
    sub_233B583E0();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v9 = v12;
    *(_QWORD *)a2 = v11;
    *(_BYTE *)(a2 + 8) = v9;
  }
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
}

uint64_t sub_233B3A8A0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ManagedAppDeclaration.UpdateBehavior.init(from:)(a1, a2);
}

uint64_t sub_233B3A8B4(_QWORD *a1)
{
  return ManagedAppDeclaration.UpdateBehavior.encode(to:)(a1);
}

uint64_t sub_233B3A8C8()
{
  return 1684633189;
}

uint64_t sub_233B3A8D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 1684633189 && a2 == 0xE400000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_233B584D0();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_233B3A95C()
{
  sub_233B3CA54();
  return sub_233B58638();
}

uint64_t sub_233B3A984()
{
  sub_233B3CA54();
  return sub_233B58644();
}

unint64_t sub_233B3A9AC()
{
  return 0xD000000000000013;
}

uint64_t sub_233B3A9C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_233B3D278(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_233B3A9F0()
{
  sub_233B3CA10();
  return sub_233B58638();
}

uint64_t sub_233B3AA18()
{
  sub_233B3CA10();
  return sub_233B58644();
}

uint64_t ManagedAppDeclaration.UpdateBehaviorEnum.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _DWORD v11[4];
  uint64_t v12;
  uint64_t v13;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256113DB0);
  v13 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256113DB8);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *v1;
  v11[3] = *((unsigned __int8 *)v1 + 8);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_233B3CA10();
  sub_233B5862C();
  sub_233B3CA54();
  sub_233B58410();
  sub_233B58440();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v5, v3);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t ManagedAppDeclaration.UpdateBehaviorEnum.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;

  v28 = a2;
  v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_256113DD0);
  v3 = *(_QWORD *)(v29 - 8);
  MEMORY[0x24BDAC7A8](v29);
  v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256113DD8);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_233B3CA10();
  v10 = v30;
  sub_233B58608();
  if (v10)
    goto LABEL_7;
  v26 = v3;
  v27 = a1;
  v30 = v7;
  v11 = v6;
  if (*(_QWORD *)(sub_233B583F8() + 16) != 1)
  {
    v15 = v6;
    v16 = sub_233B582D8();
    swift_allocError();
    v18 = v17;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256113238);
    *v18 = &type metadata for ManagedAppDeclaration.UpdateBehaviorEnum;
    sub_233B58374();
    sub_233B582CC();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v16 - 8) + 104))(v18, *MEMORY[0x24BEE26D0], v16);
    swift_willThrow();
    v19 = v30;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v9, v15);
    a1 = v27;
LABEL_7:
    v24 = (uint64_t)a1;
    return __swift_destroy_boxed_opaque_existential_0(v24);
  }
  sub_233B3CA54();
  v12 = v5;
  sub_233B58368();
  v13 = v30;
  v14 = v29;
  v21 = sub_233B583A4();
  v23 = v22;
  (*(void (**)(char *, uint64_t))(v26 + 8))(v12, v14);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v9, v11);
  v24 = (uint64_t)v27;
  v25 = v28;
  *v28 = v21;
  *((_BYTE *)v25 + 8) = v23 & 1;
  return __swift_destroy_boxed_opaque_existential_0(v24);
}

uint64_t sub_233B3AE6C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return ManagedAppDeclaration.UpdateBehaviorEnum.init(from:)(a1, a2);
}

uint64_t sub_233B3AE80(_QWORD *a1)
{
  return ManagedAppDeclaration.UpdateBehaviorEnum.encode(to:)(a1);
}

uint64_t ManagedAppDeclaration.RemovalBehavior.removable.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t (*ManagedAppDeclaration.RemovalBehavior.removable.modify())()
{
  return nullsub_1;
}

uint64_t ManagedAppDeclaration.RemovalBehavior.init(from:)@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = __swift_destroy_boxed_opaque_existential_0(a1);
  *a2 = 1;
  return result;
}

uint64_t sub_233B3AEE0(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_233B3AF20 + 4 * byte_233B5D570[a1]))(0x746172616C636564, 0xEE0079654B6E6F69);
}

unint64_t sub_233B3AF20()
{
  return 0xD000000000000015;
}

uint64_t sub_233B3AF40()
{
  return 0x656D6567616E616DLL;
}

unint64_t sub_233B3AF64()
{
  return 0xD000000000000011;
}

uint64_t sub_233B3AF80()
{
  return 0x7475626972747461;
}

uint64_t sub_233B3AF9C()
{
  return 0x426C6C6174736E69;
}

uint64_t sub_233B3AFC0()
{
  return 0x654270756B636162;
}

uint64_t sub_233B3AFF4()
{
  return 0x6D726F6674616C70;
}

uint64_t sub_233B3B00C@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = __swift_destroy_boxed_opaque_existential_0(a1);
  *a2 = 1;
  return result;
}

uint64_t sub_233B3B03C()
{
  unsigned __int8 *v0;

  return sub_233B3AEE0(*v0);
}

uint64_t sub_233B3B044@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_233B3D2FC(a1, a2);
  *a3 = result;
  return result;
}

void sub_233B3B068(_BYTE *a1@<X8>)
{
  *a1 = 9;
}

uint64_t sub_233B3B074()
{
  sub_233B3CA98();
  return sub_233B58638();
}

uint64_t sub_233B3B09C()
{
  sub_233B3CA98();
  return sub_233B58644();
}

uint64_t ManagedAppDeclaration.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int *v9;
  uint64_t *v10;
  uint64_t v11;
  __int128 v13;
  char v14;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256113DE0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_233B3CA98();
  sub_233B5862C();
  LOBYTE(v13) = 0;
  sub_233B5844C();
  if (!v2)
  {
    LOBYTE(v13) = 1;
    sub_233B5844C();
    LOBYTE(v13) = *(_BYTE *)(v3 + 32);
    v14 = 2;
    sub_233B3CADC();
    sub_233B5847C();
    LOBYTE(v13) = 3;
    sub_233B5841C();
    v13 = *(_OWORD *)(v3 + 56);
    v14 = 4;
    sub_233B3CB20();
    sub_233B58434();
    v9 = (int *)type metadata accessor for ManagedAppDeclaration(0);
    LOBYTE(v13) = 5;
    type metadata accessor for ManagedAppDeclaration.InstallBehavior(0);
    sub_233B08530(&qword_256113E00, type metadata accessor for ManagedAppDeclaration.InstallBehavior, (uint64_t)&protocol conformance descriptor for ManagedAppDeclaration.InstallBehavior);
    sub_233B5847C();
    LOBYTE(v13) = *(_BYTE *)(v3 + v9[10]);
    v14 = 6;
    sub_233B3CB64();
    sub_233B5847C();
    v10 = (uint64_t *)(v3 + v9[11]);
    v11 = *v10;
    LOBYTE(v10) = *((_BYTE *)v10 + 8);
    *(_QWORD *)&v13 = v11;
    BYTE8(v13) = (_BYTE)v10;
    v14 = 7;
    sub_233B3C988();
    sub_233B5847C();
    *(_QWORD *)&v13 = *(_QWORD *)(v3 + v9[12]);
    v14 = 8;
    sub_233B08258();
    sub_233B5847C();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t ManagedAppDeclaration.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  char v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  char v31;

  v25 = a2;
  v3 = type metadata accessor for ManagedAppDeclaration.InstallBehavior(0);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_256113E10);
  v6 = *(_QWORD *)(v26 - 8);
  MEMORY[0x24BDAC7A8](v26);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for ManagedAppDeclaration(0);
  MEMORY[0x24BDAC7A8](v28);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  *((_QWORD *)v10 + 5) = 0;
  *((_QWORD *)v10 + 6) = 0;
  *((_QWORD *)v10 + 7) = 0;
  *((_QWORD *)v10 + 8) = 0xF000000000000000;
  v11 = a1[3];
  v27 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v11);
  sub_233B3CA98();
  v12 = v29;
  sub_233B58608();
  if (v12)
  {
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v27);
    swift_bridgeObjectRelease();
    return sub_233B16EC8(*((_QWORD *)v10 + 7), *((_QWORD *)v10 + 8));
  }
  else
  {
    v13 = (uint64_t)v5;
    v29 = v6;
    LOBYTE(v30) = 0;
    *(_QWORD *)v10 = sub_233B583B0();
    *((_QWORD *)v10 + 1) = v15;
    LOBYTE(v30) = 1;
    v16 = sub_233B583B0();
    v17 = (uint64_t)v27;
    *((_QWORD *)v10 + 2) = v16;
    *((_QWORD *)v10 + 3) = v18;
    v31 = 2;
    sub_233B3CBA8();
    sub_233B583E0();
    v10[32] = v30;
    LOBYTE(v30) = 3;
    *((_QWORD *)v10 + 5) = sub_233B58380();
    *((_QWORD *)v10 + 6) = v19;
    v31 = 4;
    sub_233B3CBEC();
    sub_233B58398();
    *(_OWORD *)(v10 + 56) = v30;
    LOBYTE(v30) = 5;
    sub_233B08530(&qword_256113E28, type metadata accessor for ManagedAppDeclaration.InstallBehavior, (uint64_t)&protocol conformance descriptor for ManagedAppDeclaration.InstallBehavior);
    sub_233B583E0();
    v20 = (int *)v28;
    sub_233B1460C(v13, (uint64_t)&v10[*(int *)(v28 + 36)], type metadata accessor for ManagedAppDeclaration.InstallBehavior);
    v31 = 6;
    sub_233B3CC30();
    sub_233B583E0();
    v21 = v29;
    v10[v20[10]] = v30;
    v31 = 7;
    sub_233B3C9CC();
    sub_233B583E0();
    v22 = BYTE8(v30);
    v23 = &v10[v20[11]];
    *(_QWORD *)v23 = v30;
    v23[8] = v22;
    v31 = 8;
    sub_233B08384();
    sub_233B583E0();
    (*(void (**)(char *, uint64_t))(v21 + 8))(v8, v26);
    *(_QWORD *)&v10[v20[12]] = v30;
    sub_233B14538((uint64_t)v10, v25, type metadata accessor for ManagedAppDeclaration);
    __swift_destroy_boxed_opaque_existential_0(v17);
    return sub_233B146EC((uint64_t)v10, type metadata accessor for ManagedAppDeclaration);
  }
}

uint64_t sub_233B3B888@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ManagedAppDeclaration.init(from:)(a1, a2);
}

uint64_t sub_233B3B89C(_QWORD *a1)
{
  return ManagedAppDeclaration.encode(to:)(a1);
}

uint64_t StoreAppIdentifier.bundleID.getter(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;

  if ((a3 & 1) == 0)
    return 0;
  v3 = a1;
  swift_bridgeObjectRetain();
  return v3;
}

uint64_t StoreAppIdentifier.itemID.getter(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if ((a3 & 1) != 0)
    return 0;
  return result;
}

uint64_t StoreAppIdentifier.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if ((a4 & 1) != 0)
  {
    sub_233B5859C();
    return sub_233B57FCC();
  }
  else
  {
    sub_233B5859C();
    return sub_233B585B4();
  }
}

uint64_t static StoreAppIdentifier.== infix(_:_:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  if ((a3 & 1) == 0)
    return (a6 & 1) == 0 && a1 == a4;
  if ((a6 & 1) != 0)
  {
    if (a1 == a4 && a2 == a5)
      return 1;
    else
      return sub_233B584D0();
  }
  else
  {
    return 0;
  }
}

uint64_t sub_233B3B9A8()
{
  sub_233B3CCB8();
  return sub_233B58638();
}

uint64_t sub_233B3B9D0()
{
  sub_233B3CCB8();
  return sub_233B58644();
}

uint64_t sub_233B3B9F8()
{
  _BYTE *v0;

  if (*v0)
    return 0x4449656C646E7562;
  else
    return 0x44496D657469;
}

uint64_t sub_233B3BA30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_233B3D748(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_233B3BA54()
{
  sub_233B3CC74();
  return sub_233B58638();
}

uint64_t sub_233B3BA7C()
{
  sub_233B3CC74();
  return sub_233B58644();
}

uint64_t sub_233B3BAA4()
{
  sub_233B3CCFC();
  return sub_233B58638();
}

uint64_t sub_233B3BACC()
{
  sub_233B3CCFC();
  return sub_233B58644();
}

uint64_t StoreAppIdentifier.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD v15[2];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  char v20;
  char v21;

  v18 = a2;
  v19 = a4;
  v15[1] = a3;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256113E38);
  v16 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256113E40);
  v15[0] = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_256113E48);
  v17 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)v15 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_233B3CC74();
  sub_233B5862C();
  if ((v19 & 1) != 0)
  {
    v21 = 1;
    sub_233B3CCB8();
    sub_233B58410();
    sub_233B5844C();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v7, v5);
  }
  else
  {
    v20 = 0;
    sub_233B3CCFC();
    sub_233B58410();
    sub_233B58488();
    (*(void (**)(char *, uint64_t))(v15[0] + 8))(v10, v8);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v13, v11);
}

uint64_t StoreAppIdentifier.hashValue.getter(uint64_t a1, uint64_t a2, char a3)
{
  sub_233B58590();
  sub_233B5859C();
  if ((a3 & 1) != 0)
    sub_233B57FCC();
  else
    sub_233B585B4();
  return sub_233B585C0();
}

uint64_t StoreAppIdentifier.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  result = sub_233B3D830(a1);
  if (v1)
    return v3;
  return result;
}

uint64_t sub_233B3BDB4()
{
  uint64_t v0;
  int v1;

  v1 = *(unsigned __int8 *)(v0 + 16);
  sub_233B58590();
  sub_233B5859C();
  if (v1 == 1)
    sub_233B57FCC();
  else
    sub_233B585B4();
  return sub_233B585C0();
}

uint64_t sub_233B3BE38()
{
  uint64_t v0;

  if (*(_BYTE *)(v0 + 16) == 1)
  {
    sub_233B5859C();
    return sub_233B57FCC();
  }
  else
  {
    sub_233B5859C();
    return sub_233B585B4();
  }
}

uint64_t sub_233B3BEAC()
{
  uint64_t v0;
  int v1;

  v1 = *(unsigned __int8 *)(v0 + 16);
  sub_233B58590();
  sub_233B5859C();
  if (v1 == 1)
    sub_233B57FCC();
  else
    sub_233B585B4();
  return sub_233B585C0();
}

uint64_t sub_233B3BF2C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  char v6;

  result = sub_233B3D830(a1);
  if (!v2)
  {
    *(_QWORD *)a2 = result;
    *(_QWORD *)(a2 + 8) = v5;
    *(_BYTE *)(a2 + 16) = v6 & 1;
  }
  return result;
}

uint64_t sub_233B3BF5C(_QWORD *a1)
{
  uint64_t v1;

  return StoreAppIdentifier.encode(to:)(a1, *(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(unsigned __int8 *)(v1 + 16));
}

uint64_t sub_233B3BF78(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;

  v3 = *a1;
  v4 = *a2;
  v5 = *((unsigned __int8 *)a2 + 16);
  if (*((_BYTE *)a1 + 16) != 1)
    return (v3 == v4) & ~v5;
  if ((v5 & 1) == 0)
    return 0;
  v6 = a1[1];
  if (v3 == v4 && v6 == a2[1])
    return 1;
  else
    return sub_233B584D0();
}

uint64_t StoreAppIdentifier.description.getter(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    sub_233B3DC24();
    return sub_233B5820C();
  }
  return a1;
}

uint64_t sub_233B3C03C()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  if (*((_BYTE *)v0 + 16) == 1)
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    sub_233B3DC24();
    return sub_233B5820C();
  }
  return v1;
}

uint64_t sub_233B3C0A8(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6D6574737973 && a2 == 0xE600000000000000;
  if (v2 || (sub_233B584D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1919251317 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_233B584D0();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_233B3C180(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char v27;
  char v28;

  v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_256114118);
  v22 = *(_QWORD *)(v24 - 8);
  MEMORY[0x24BDAC7A8](v24);
  v25 = (char *)&v21 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_256114120);
  v3 = *(_QWORD *)(v23 - 8);
  MEMORY[0x24BDAC7A8](v23);
  v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(qword_256114128);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_233B37A90();
  v10 = v26;
  sub_233B58608();
  if (v10)
    goto LABEL_7;
  v11 = v5;
  v12 = v25;
  v21 = a1;
  v26 = v7;
  v13 = sub_233B583F8();
  v14 = v6;
  if (*(_QWORD *)(v13 + 16) != 1)
  {
    v16 = sub_233B582D8();
    swift_allocError();
    v17 = v9;
    v19 = v18;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256113238);
    *v19 = &type metadata for ManagedAppDeclaration.ManagementScope;
    sub_233B58374();
    sub_233B582CC();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v16 - 8) + 104))(v19, *MEMORY[0x24BEE26D0], v16);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v26 + 8))(v17, v6);
    a1 = v21;
LABEL_7:
    __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
    return v6;
  }
  v6 = *(unsigned __int8 *)(v13 + 32);
  if ((v6 & 1) != 0)
  {
    v28 = 1;
    sub_233B37AD4();
    sub_233B58368();
    v15 = v26;
    (*(void (**)(char *, uint64_t))(v22 + 8))(v12, v24);
  }
  else
  {
    v27 = 0;
    sub_233B37B18();
    sub_233B58368();
    v15 = v26;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v11, v23);
  }
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v9, v14);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v21);
  return v6;
}

unint64_t sub_233B3C4AC()
{
  unint64_t result;

  result = qword_256113C40;
  if (!qword_256113C40)
  {
    result = MEMORY[0x23493D400](&unk_233B5F184, &type metadata for ManagedAppDeclaration.Attributes.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256113C40);
  }
  return result;
}

uint64_t type metadata accessor for ManagedAppDeclaration.InstallBehavior.PurchaseMethodEnum(uint64_t a1)
{
  return sub_233B3F4CC(a1, (uint64_t *)&unk_25424D138);
}

uint64_t sub_233B3C504(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

unint64_t sub_233B3C548()
{
  unint64_t result;

  result = qword_256113C68;
  if (!qword_256113C68)
  {
    result = MEMORY[0x23493D400](&unk_233B5F134, &type metadata for ManagedAppDeclaration.InstallBehavior.InstallTimingEnum.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256113C68);
  }
  return result;
}

unint64_t sub_233B3C58C()
{
  unint64_t result;

  result = qword_256113C70;
  if (!qword_256113C70)
  {
    result = MEMORY[0x23493D400](&unk_233B5F0E4, &type metadata for ManagedAppDeclaration.InstallBehavior.InstallTimingEnum.OnDemandCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256113C70);
  }
  return result;
}

unint64_t sub_233B3C5D0()
{
  unint64_t result;

  result = qword_256113C78;
  if (!qword_256113C78)
  {
    result = MEMORY[0x23493D400](&unk_233B5F094, &type metadata for ManagedAppDeclaration.InstallBehavior.InstallTimingEnum.ImmediatelyCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256113C78);
  }
  return result;
}

unint64_t sub_233B3C614()
{
  unint64_t result;

  result = qword_256113CB0;
  if (!qword_256113CB0)
  {
    result = MEMORY[0x23493D400](&unk_233B5F044, &type metadata for ManagedAppDeclaration.InstallBehavior.PurchaseMethodEnum.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256113CB0);
  }
  return result;
}

unint64_t sub_233B3C658()
{
  unint64_t result;

  result = qword_256113CB8;
  if (!qword_256113CB8)
  {
    result = MEMORY[0x23493D400](&unk_233B5EFF4, &type metadata for ManagedAppDeclaration.InstallBehavior.PurchaseMethodEnum.ManifestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256113CB8);
  }
  return result;
}

unint64_t sub_233B3C69C()
{
  unint64_t result;

  result = qword_256113CC0;
  if (!qword_256113CC0)
  {
    result = MEMORY[0x23493D400](&unk_233B5EFA4, &type metadata for ManagedAppDeclaration.InstallBehavior.PurchaseMethodEnum.VolumePurchaseProgramCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256113CC0);
  }
  return result;
}

unint64_t sub_233B3C6E0()
{
  unint64_t result;

  result = qword_256113CC8;
  if (!qword_256113CC8)
  {
    result = MEMORY[0x23493D400](&protocol conformance descriptor for ManagedAppDeclaration.InstallBehavior.LicenseEnum, &type metadata for ManagedAppDeclaration.InstallBehavior.LicenseEnum);
    atomic_store(result, (unint64_t *)&qword_256113CC8);
  }
  return result;
}

unint64_t sub_233B3C724()
{
  unint64_t result;

  result = qword_256113CE8;
  if (!qword_256113CE8)
  {
    result = MEMORY[0x23493D400](&protocol conformance descriptor for ManagedAppDeclaration.InstallBehavior.LicenseEnum, &type metadata for ManagedAppDeclaration.InstallBehavior.LicenseEnum);
    atomic_store(result, (unint64_t *)&qword_256113CE8);
  }
  return result;
}

unint64_t sub_233B3C768()
{
  unint64_t result;

  result = qword_256113D08;
  if (!qword_256113D08)
  {
    result = MEMORY[0x23493D400](&unk_233B5EF54, &type metadata for ManagedAppDeclaration.InstallBehavior.LicenseEnum.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256113D08);
  }
  return result;
}

unint64_t sub_233B3C7AC()
{
  unint64_t result;

  result = qword_256113D10;
  if (!qword_256113D10)
  {
    result = MEMORY[0x23493D400](&unk_233B5EF04, &type metadata for ManagedAppDeclaration.InstallBehavior.LicenseEnum.DeviceCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256113D10);
  }
  return result;
}

unint64_t sub_233B3C7F0()
{
  unint64_t result;

  result = qword_256113D18;
  if (!qword_256113D18)
  {
    result = MEMORY[0x23493D400](&unk_233B5EEB4, &type metadata for ManagedAppDeclaration.InstallBehavior.LicenseEnum.UserCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256113D18);
  }
  return result;
}

unint64_t sub_233B3C834()
{
  unint64_t result;

  result = qword_256113D40;
  if (!qword_256113D40)
  {
    result = MEMORY[0x23493D400](&unk_233B5EE64, &type metadata for ManagedAppDeclaration.InstallBehavior.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256113D40);
  }
  return result;
}

unint64_t sub_233B3C878()
{
  unint64_t result;

  result = qword_256113D48;
  if (!qword_256113D48)
  {
    result = MEMORY[0x23493D400](&protocol conformance descriptor for ManagedAppDeclaration.InstallBehavior.InstallTimingEnum, &type metadata for ManagedAppDeclaration.InstallBehavior.InstallTimingEnum);
    atomic_store(result, (unint64_t *)&qword_256113D48);
  }
  return result;
}

unint64_t sub_233B3C8BC()
{
  unint64_t result;

  result = qword_256113D60;
  if (!qword_256113D60)
  {
    result = MEMORY[0x23493D400](&protocol conformance descriptor for ManagedAppDeclaration.InstallBehavior.InstallTimingEnum, &type metadata for ManagedAppDeclaration.InstallBehavior.InstallTimingEnum);
    atomic_store(result, (unint64_t *)&qword_256113D60);
  }
  return result;
}

unint64_t sub_233B3C900()
{
  unint64_t result;

  result = qword_256113D78;
  if (!qword_256113D78)
  {
    result = MEMORY[0x23493D400](&unk_233B5EE14, &type metadata for ManagedAppDeclaration.BackupBehavior.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256113D78);
  }
  return result;
}

unint64_t sub_233B3C944()
{
  unint64_t result;

  result = qword_256113D90;
  if (!qword_256113D90)
  {
    result = MEMORY[0x23493D400](&unk_233B5EDC4, &type metadata for ManagedAppDeclaration.UpdateBehavior.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256113D90);
  }
  return result;
}

unint64_t sub_233B3C988()
{
  unint64_t result;

  result = qword_256113D98;
  if (!qword_256113D98)
  {
    result = MEMORY[0x23493D400](&protocol conformance descriptor for ManagedAppDeclaration.UpdateBehaviorEnum, &type metadata for ManagedAppDeclaration.UpdateBehaviorEnum);
    atomic_store(result, (unint64_t *)&qword_256113D98);
  }
  return result;
}

unint64_t sub_233B3C9CC()
{
  unint64_t result;

  result = qword_256113DA8;
  if (!qword_256113DA8)
  {
    result = MEMORY[0x23493D400](&protocol conformance descriptor for ManagedAppDeclaration.UpdateBehaviorEnum, &type metadata for ManagedAppDeclaration.UpdateBehaviorEnum);
    atomic_store(result, (unint64_t *)&qword_256113DA8);
  }
  return result;
}

unint64_t sub_233B3CA10()
{
  unint64_t result;

  result = qword_256113DC0;
  if (!qword_256113DC0)
  {
    result = MEMORY[0x23493D400](&unk_233B5ED74, &type metadata for ManagedAppDeclaration.UpdateBehaviorEnum.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256113DC0);
  }
  return result;
}

unint64_t sub_233B3CA54()
{
  unint64_t result;

  result = qword_256113DC8;
  if (!qword_256113DC8)
  {
    result = MEMORY[0x23493D400](&unk_233B5ED24, &type metadata for ManagedAppDeclaration.UpdateBehaviorEnum.AutomaticallyUpdateCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256113DC8);
  }
  return result;
}

unint64_t sub_233B3CA98()
{
  unint64_t result;

  result = qword_256113DE8;
  if (!qword_256113DE8)
  {
    result = MEMORY[0x23493D400](&unk_233B5ECD4, &type metadata for ManagedAppDeclaration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256113DE8);
  }
  return result;
}

unint64_t sub_233B3CADC()
{
  unint64_t result;

  result = qword_256113DF0;
  if (!qword_256113DF0)
  {
    result = MEMORY[0x23493D400](&protocol conformance descriptor for ManagedAppDeclaration.ManagementScope, &type metadata for ManagedAppDeclaration.ManagementScope);
    atomic_store(result, (unint64_t *)&qword_256113DF0);
  }
  return result;
}

unint64_t sub_233B3CB20()
{
  unint64_t result;

  result = qword_256113DF8;
  if (!qword_256113DF8)
  {
    result = MEMORY[0x23493D400](&protocol conformance descriptor for ManagedAppDeclaration.Attributes, &type metadata for ManagedAppDeclaration.Attributes);
    atomic_store(result, (unint64_t *)&qword_256113DF8);
  }
  return result;
}

unint64_t sub_233B3CB64()
{
  unint64_t result;

  result = qword_256113E08;
  if (!qword_256113E08)
  {
    result = MEMORY[0x23493D400](&protocol conformance descriptor for ManagedAppDeclaration.BackupBehavior, &type metadata for ManagedAppDeclaration.BackupBehavior);
    atomic_store(result, (unint64_t *)&qword_256113E08);
  }
  return result;
}

unint64_t sub_233B3CBA8()
{
  unint64_t result;

  result = qword_256113E18;
  if (!qword_256113E18)
  {
    result = MEMORY[0x23493D400](&protocol conformance descriptor for ManagedAppDeclaration.ManagementScope, &type metadata for ManagedAppDeclaration.ManagementScope);
    atomic_store(result, (unint64_t *)&qword_256113E18);
  }
  return result;
}

unint64_t sub_233B3CBEC()
{
  unint64_t result;

  result = qword_256113E20;
  if (!qword_256113E20)
  {
    result = MEMORY[0x23493D400](&protocol conformance descriptor for ManagedAppDeclaration.Attributes, &type metadata for ManagedAppDeclaration.Attributes);
    atomic_store(result, (unint64_t *)&qword_256113E20);
  }
  return result;
}

unint64_t sub_233B3CC30()
{
  unint64_t result;

  result = qword_256113E30;
  if (!qword_256113E30)
  {
    result = MEMORY[0x23493D400](&protocol conformance descriptor for ManagedAppDeclaration.BackupBehavior, &type metadata for ManagedAppDeclaration.BackupBehavior);
    atomic_store(result, (unint64_t *)&qword_256113E30);
  }
  return result;
}

unint64_t sub_233B3CC74()
{
  unint64_t result;

  result = qword_256113E50;
  if (!qword_256113E50)
  {
    result = MEMORY[0x23493D400](&unk_233B5EC84, &type metadata for StoreAppIdentifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256113E50);
  }
  return result;
}

unint64_t sub_233B3CCB8()
{
  unint64_t result;

  result = qword_256113E58;
  if (!qword_256113E58)
  {
    result = MEMORY[0x23493D400](&unk_233B5EC34, &type metadata for StoreAppIdentifier.BundleIDCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256113E58);
  }
  return result;
}

unint64_t sub_233B3CCFC()
{
  unint64_t result;

  result = qword_256113E60;
  if (!qword_256113E60)
  {
    result = MEMORY[0x23493D400](&unk_233B5EBE4, &type metadata for StoreAppIdentifier.ItemIDCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256113E60);
  }
  return result;
}

uint64_t sub_233B3CD40(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x74616964656D6D69 && a2 == 0xEB00000000796C65;
  if (v2 || (sub_233B584D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x646E616D65446E6FLL && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_233B584D0();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_233B3CE48(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000015 && a2 == 0x8000000233B61B30 || (sub_233B584D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x74736566696E616DLL && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v5 = sub_233B584D0();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_233B3CF34(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 12383 && a2 == 0xE200000000000000;
  if (v2 || (sub_233B584D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x65736E6563696CLL && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_233B584D0();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_233B3D00C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 1919251317 && a2 == 0xE400000000000000;
  if (v2 || (sub_233B584D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656369766564 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_233B584D0();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_233B3D0E4(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x546C6C6174736E69 && a2 == 0xED0000676E696D69;
  if (v2 || (sub_233B584D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x8000000233B61B50 || (sub_233B584D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6573616863727570 && a2 == 0xEE00646F6874654DLL)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_233B584D0();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_233B3D278(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;

  if (a1 == 0xD000000000000013 && a2 == 0x8000000233B61B70)
  {
    swift_bridgeObjectRelease();
    v2 = 0;
  }
  else
  {
    v3 = sub_233B584D0();
    swift_bridgeObjectRelease();
    v2 = v3 ^ 1;
  }
  return v2 & 1;
}

uint64_t sub_233B3D2FC(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x746172616C636564 && a2 == 0xEE0079654B6E6F69;
  if (v2 || (sub_233B584D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x8000000233B611C0 || (sub_233B584D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x656D6567616E616DLL && a2 == 0xEF65706F6353746ELL || (sub_233B584D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x8000000233B61B90 || (sub_233B584D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x7475626972747461 && a2 == 0xEA00000000007365 || (sub_233B584D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x426C6C6174736E69 && a2 == 0xEF726F6976616865 || (sub_233B584D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x654270756B636162 && a2 == 0xEE00726F69766168 || (sub_233B584D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x6542657461647075 && a2 == 0xEE00726F69766168 || (sub_233B584D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x6D726F6674616C70 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else
  {
    v6 = sub_233B584D0();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 8;
    else
      return 9;
  }
}

uint64_t sub_233B3D748(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x44496D657469 && a2 == 0xE600000000000000;
  if (v2 || (sub_233B584D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x4449656C646E7562 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_233B584D0();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_233B3D830(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  _QWORD *v35;
  uint64_t v36;
  char v37;
  char v38;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_256114100);
  v3 = *(_QWORD *)(v2 - 8);
  v32 = v2;
  v33 = v3;
  MEMORY[0x24BDAC7A8](v2);
  v34 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256114108);
  v6 = *(char **)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256114110);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a1[3];
  v35 = a1;
  v14 = (uint64_t)__swift_project_boxed_opaque_existential_1(a1, v13);
  sub_233B3CC74();
  v15 = v36;
  sub_233B58608();
  if (v15)
    goto LABEL_7;
  v31 = v6;
  v16 = v5;
  v17 = v34;
  v36 = v10;
  v18 = sub_233B583F8();
  if (*(_QWORD *)(v18 + 16) != 1)
  {
    v19 = sub_233B582D8();
    swift_allocError();
    v14 = (uint64_t)v12;
    v21 = v20;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256113238);
    *v21 = &type metadata for StoreAppIdentifier;
    sub_233B58374();
    sub_233B582CC();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v19 - 8) + 104))(v21, *MEMORY[0x24BEE26D0], v19);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v14, v9);
LABEL_7:
    v28 = (uint64_t)v35;
    goto LABEL_8;
  }
  v30 = v9;
  if ((*(_BYTE *)(v18 + 32) & 1) != 0)
  {
    v38 = 1;
    sub_233B3CCB8();
    sub_233B58368();
    v31 = v12;
    v24 = v17;
    v25 = v32;
    v26 = sub_233B583B0();
    v27 = v36;
    v14 = v26;
    (*(void (**)(char *, uint64_t))(v33 + 8))(v24, v25);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v27 + 8))(v31, v30);
  }
  else
  {
    v37 = 0;
    sub_233B3CCFC();
    v23 = v30;
    sub_233B58368();
    v14 = sub_233B583EC();
    (*((void (**)(char *, uint64_t))v31 + 1))(v8, v16);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v36 + 8))(v12, v23);
  }
  v28 = (uint64_t)v35;
LABEL_8:
  __swift_destroy_boxed_opaque_existential_0(v28);
  return v14;
}

unint64_t sub_233B3DC24()
{
  unint64_t result;

  result = qword_256113E68;
  if (!qword_256113E68)
  {
    result = MEMORY[0x23493D400](MEMORY[0x24BEE45A0], MEMORY[0x24BEE4568]);
    atomic_store(result, (unint64_t *)&qword_256113E68);
  }
  return result;
}

unint64_t sub_233B3DC6C()
{
  unint64_t result;

  result = qword_256113E70;
  if (!qword_256113E70)
  {
    result = MEMORY[0x23493D400](&protocol conformance descriptor for ManagedAppDeclaration.ManagementScope, &type metadata for ManagedAppDeclaration.ManagementScope);
    atomic_store(result, (unint64_t *)&qword_256113E70);
  }
  return result;
}

unint64_t sub_233B3DCB4()
{
  unint64_t result;

  result = qword_256113E78;
  if (!qword_256113E78)
  {
    result = MEMORY[0x23493D400](&protocol conformance descriptor for ManagedAppDeclaration.InstallBehavior.InstallTimingEnum, &type metadata for ManagedAppDeclaration.InstallBehavior.InstallTimingEnum);
    atomic_store(result, (unint64_t *)&qword_256113E78);
  }
  return result;
}

unint64_t sub_233B3DCFC()
{
  unint64_t result;

  result = qword_256113E80;
  if (!qword_256113E80)
  {
    result = MEMORY[0x23493D400](&protocol conformance descriptor for ManagedAppDeclaration.InstallBehavior.LicenseEnum, &type metadata for ManagedAppDeclaration.InstallBehavior.LicenseEnum);
    atomic_store(result, (unint64_t *)&qword_256113E80);
  }
  return result;
}

unint64_t sub_233B3DD44()
{
  unint64_t result;

  result = qword_256113E88;
  if (!qword_256113E88)
  {
    result = MEMORY[0x23493D400](&protocol conformance descriptor for StoreAppIdentifier, &type metadata for StoreAppIdentifier);
    atomic_store(result, (unint64_t *)&qword_256113E88);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for ManagedAppDeclaration(uint64_t a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v12 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    v8 = a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v8;
    *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
    v9 = a2[6];
    *(_QWORD *)(a1 + 40) = a2[5];
    *(_QWORD *)(a1 + 48) = v9;
    v10 = a2 + 7;
    v11 = a2[8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v11 >> 60 == 15)
    {
      *(_OWORD *)(a1 + 56) = *(_OWORD *)v10;
    }
    else
    {
      v13 = *v10;
      sub_233B13D4C(*v10, v11);
      *(_QWORD *)(a1 + 56) = v13;
      *(_QWORD *)(a1 + 64) = v11;
    }
    v14 = a3[9];
    v15 = (_BYTE *)(a1 + v14);
    v16 = (uint64_t)a2 + v14;
    *v15 = *((_BYTE *)a2 + v14);
    v15[1] = *((_BYTE *)a2 + v14 + 1);
    v17 = *(int *)(type metadata accessor for ManagedAppDeclaration.InstallBehavior(0) + 24);
    v18 = &v15[v17];
    v19 = v16 + v17;
    type metadata accessor for ManagedAppDeclaration.InstallBehavior.PurchaseMethodEnum(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v20 = sub_233B57DF8();
      (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v18, v19, v20);
    }
    else
    {
      v21 = *(_QWORD *)v19;
      v22 = *(_QWORD *)(v19 + 8);
      v23 = *(_BYTE *)(v19 + 16);
      sub_233B0486C(*(_QWORD *)v19, v22, v23);
      *(_QWORD *)v18 = v21;
      *((_QWORD *)v18 + 1) = v22;
      v18[16] = v23;
      v18[17] = *(_BYTE *)(v19 + 17);
    }
    swift_storeEnumTagMultiPayload();
    v24 = a3[11];
    *(_BYTE *)(a1 + a3[10]) = *((_BYTE *)a2 + a3[10]);
    v25 = a1 + v24;
    v26 = (uint64_t)a2 + v24;
    *(_QWORD *)v25 = *(_QWORD *)v26;
    *(_BYTE *)(v25 + 8) = *(_BYTE *)(v26 + 8);
    *(_QWORD *)(a1 + a3[12]) = *(uint64_t *)((char *)a2 + a3[12]);
  }
  return a1;
}

uint64_t destroy for ManagedAppDeclaration(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a1 + 64);
  if (v4 >> 60 != 15)
    sub_233B13CD8(*(_QWORD *)(a1 + 56), v4);
  v5 = a1 + *(int *)(a2 + 36);
  v6 = v5 + *(int *)(type metadata accessor for ManagedAppDeclaration.InstallBehavior(0) + 24);
  type metadata accessor for ManagedAppDeclaration.InstallBehavior.PurchaseMethodEnum(0);
  if (swift_getEnumCaseMultiPayload() != 1)
    return sub_233B04B94(*(_QWORD *)v6, *(_QWORD *)(v6 + 8), *(_BYTE *)(v6 + 16));
  v7 = sub_233B57DF8();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
}

uint64_t initializeWithCopy for ManagedAppDeclaration(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v7;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v8;
  v9 = (uint64_t *)(a2 + 56);
  v10 = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v10 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 56) = *(_OWORD *)v9;
  }
  else
  {
    v11 = *v9;
    sub_233B13D4C(*v9, v10);
    *(_QWORD *)(a1 + 56) = v11;
    *(_QWORD *)(a1 + 64) = v10;
  }
  v12 = a3[9];
  v13 = (_BYTE *)(a1 + v12);
  v14 = a2 + v12;
  *v13 = *(_BYTE *)(a2 + v12);
  v13[1] = *(_BYTE *)(a2 + v12 + 1);
  v15 = *(int *)(type metadata accessor for ManagedAppDeclaration.InstallBehavior(0) + 24);
  v16 = &v13[v15];
  v17 = v14 + v15;
  type metadata accessor for ManagedAppDeclaration.InstallBehavior.PurchaseMethodEnum(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v18 = sub_233B57DF8();
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
  }
  else
  {
    v19 = *(_QWORD *)v17;
    v20 = *(_QWORD *)(v17 + 8);
    v21 = *(_BYTE *)(v17 + 16);
    sub_233B0486C(*(_QWORD *)v17, v20, v21);
    *(_QWORD *)v16 = v19;
    *((_QWORD *)v16 + 1) = v20;
    v16[16] = v21;
    v16[17] = *(_BYTE *)(v17 + 17);
  }
  swift_storeEnumTagMultiPayload();
  v22 = a3[11];
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  v23 = a1 + v22;
  v24 = a2 + v22;
  *(_QWORD *)v23 = *(_QWORD *)v24;
  *(_BYTE *)(v23 + 8) = *(_BYTE *)(v24 + 8);
  *(_QWORD *)(a1 + a3[12]) = *(_QWORD *)(a2 + a3[12]);
  return a1;
}

uint64_t assignWithCopy for ManagedAppDeclaration(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = (uint64_t *)(a2 + 56);
  v7 = *(_QWORD *)(a2 + 64);
  if (*(_QWORD *)(a1 + 64) >> 60 == 15)
  {
    if (v7 >> 60 != 15)
    {
      v8 = *v6;
      sub_233B13D4C(*v6, *(_QWORD *)(a2 + 64));
      *(_QWORD *)(a1 + 56) = v8;
      *(_QWORD *)(a1 + 64) = v7;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v7 >> 60 == 15)
  {
    sub_233B3E3B4(a1 + 56);
LABEL_6:
    *(_OWORD *)(a1 + 56) = *(_OWORD *)v6;
    goto LABEL_8;
  }
  v9 = *v6;
  sub_233B13D4C(*v6, *(_QWORD *)(a2 + 64));
  v10 = *(_QWORD *)(a1 + 56);
  v11 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = v9;
  *(_QWORD *)(a1 + 64) = v7;
  sub_233B13CD8(v10, v11);
LABEL_8:
  v12 = a3[9];
  v13 = (_BYTE *)(a1 + v12);
  v14 = a2 + v12;
  *v13 = *(_BYTE *)(a2 + v12);
  v13[1] = *(_BYTE *)(a2 + v12 + 1);
  v15 = type metadata accessor for ManagedAppDeclaration.InstallBehavior(0);
  if (a1 != a2)
  {
    v16 = *(int *)(v15 + 24);
    v17 = (uint64_t)&v13[v16];
    v18 = v14 + v16;
    sub_233B146EC(v17, type metadata accessor for ManagedAppDeclaration.InstallBehavior.PurchaseMethodEnum);
    type metadata accessor for ManagedAppDeclaration.InstallBehavior.PurchaseMethodEnum(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v19 = sub_233B57DF8();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
    }
    else
    {
      v20 = *(_QWORD *)v18;
      v21 = *(_QWORD *)(v18 + 8);
      v22 = *(_BYTE *)(v18 + 16);
      sub_233B0486C(*(_QWORD *)v18, v21, v22);
      *(_QWORD *)v17 = v20;
      *(_QWORD *)(v17 + 8) = v21;
      *(_BYTE *)(v17 + 16) = v22;
      *(_BYTE *)(v17 + 17) = *(_BYTE *)(v18 + 17);
    }
    swift_storeEnumTagMultiPayload();
  }
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  v23 = a3[11];
  v24 = a1 + v23;
  v25 = (uint64_t *)(a2 + v23);
  v26 = *v25;
  *(_BYTE *)(v24 + 8) = *((_BYTE *)v25 + 8);
  *(_QWORD *)v24 = v26;
  *(_QWORD *)(a1 + a3[12]) = *(_QWORD *)(a2 + a3[12]);
  return a1;
}

uint64_t sub_233B3E3B4(uint64_t a1)
{
  sub_233B13CD8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  return a1;
}

uint64_t initializeWithTake for ManagedAppDeclaration(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  v7 = a3[9];
  v8 = (_BYTE *)(a1 + v7);
  v9 = a2 + v7;
  *v8 = *(_BYTE *)(a2 + v7);
  v8[1] = *(_BYTE *)(a2 + v7 + 1);
  v10 = *(int *)(type metadata accessor for ManagedAppDeclaration.InstallBehavior(0) + 24);
  v11 = &v8[v10];
  v12 = (const void *)(v9 + v10);
  v13 = type metadata accessor for ManagedAppDeclaration.InstallBehavior.PurchaseMethodEnum(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v14 = sub_233B57DF8();
    (*(void (**)(_BYTE *, const void *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v11, v12, v14);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  v15 = a3[11];
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  v16 = a1 + v15;
  v17 = a2 + v15;
  *(_QWORD *)v16 = *(_QWORD *)v17;
  *(_BYTE *)(v16 + 8) = *(_BYTE *)(v17 + 8);
  *(_QWORD *)(a1 + a3[12]) = *(_QWORD *)(a2 + a3[12]);
  return a1;
}

uint64_t assignWithTake for ManagedAppDeclaration(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v7;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v8;
  swift_bridgeObjectRelease();
  v9 = (_OWORD *)(a2 + 56);
  v10 = *(_QWORD *)(a1 + 64);
  if (v10 >> 60 == 15)
    goto LABEL_4;
  v11 = *(_QWORD *)(a2 + 64);
  if (v11 >> 60 == 15)
  {
    sub_233B3E3B4(a1 + 56);
LABEL_4:
    *(_OWORD *)(a1 + 56) = *v9;
    goto LABEL_6;
  }
  v12 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)v9;
  *(_QWORD *)(a1 + 64) = v11;
  sub_233B13CD8(v12, v10);
LABEL_6:
  v13 = a3[9];
  v14 = (_BYTE *)(a1 + v13);
  v15 = a2 + v13;
  *v14 = *(_BYTE *)(a2 + v13);
  v14[1] = *(_BYTE *)(a2 + v13 + 1);
  v16 = type metadata accessor for ManagedAppDeclaration.InstallBehavior(0);
  if (a1 != a2)
  {
    v17 = *(int *)(v16 + 24);
    v18 = &v14[v17];
    v19 = (const void *)(v15 + v17);
    sub_233B146EC((uint64_t)v18, type metadata accessor for ManagedAppDeclaration.InstallBehavior.PurchaseMethodEnum);
    v20 = type metadata accessor for ManagedAppDeclaration.InstallBehavior.PurchaseMethodEnum(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v21 = sub_233B57DF8();
      (*(void (**)(_BYTE *, const void *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v18, v19, v21);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    }
  }
  v22 = a3[11];
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  v23 = a1 + v22;
  v24 = a2 + v22;
  *(_QWORD *)v23 = *(_QWORD *)v24;
  *(_BYTE *)(v23 + 8) = *(_BYTE *)(v24 + 8);
  *(_QWORD *)(a1 + a3[12]) = *(_QWORD *)(a2 + a3[12]);
  return a1;
}

uint64_t getEnumTagSinglePayload for ManagedAppDeclaration()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_233B3E6A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for ManagedAppDeclaration.InstallBehavior(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 36), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for ManagedAppDeclaration()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_233B3E730(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for ManagedAppDeclaration.InstallBehavior(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 36), a2, a2, v7);
  }
  return result;
}

uint64_t sub_233B3E7A4()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for ManagedAppDeclaration.InstallBehavior(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for ManagedAppDeclaration.ManagementScope()
{
  return &type metadata for ManagedAppDeclaration.ManagementScope;
}

uint64_t *initializeBufferWithCopyOfBuffer for ManagedAppDeclaration.Attributes(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  sub_233B13D4C(*a2, v4);
  *a1 = v3;
  a1[1] = v4;
  return a1;
}

uint64_t destroy for ManagedAppDeclaration.Attributes(uint64_t a1)
{
  return sub_233B13CD8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
}

uint64_t *assignWithCopy for ManagedAppDeclaration.Attributes(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3 = *a2;
  v4 = a2[1];
  sub_233B13D4C(*a2, v4);
  v5 = *a1;
  v6 = a1[1];
  *a1 = v3;
  a1[1] = v4;
  sub_233B13CD8(v5, v6);
  return a1;
}

uint64_t *assignWithTake for ManagedAppDeclaration.Attributes(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3;
  unint64_t v4;

  v3 = *a1;
  v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_233B13CD8(v3, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for ManagedAppDeclaration.Attributes(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xD && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 13);
  v3 = (((*(_QWORD *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(_QWORD *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for ManagedAppDeclaration.Attributes(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(_QWORD *)result = a2 - 13;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xD)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0xD)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ManagedAppDeclaration.Attributes()
{
  return &type metadata for ManagedAppDeclaration.Attributes;
}

_QWORD *initializeBufferWithCopyOfBuffer for ManagedAppDeclaration.InstallBehavior(_BYTE *a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v9 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *a1 = *(_BYTE *)a2;
    a1[1] = *((_BYTE *)a2 + 1);
    v5 = *(int *)(a3 + 24);
    v6 = &a1[v5];
    v7 = (uint64_t)a2 + v5;
    type metadata accessor for ManagedAppDeclaration.InstallBehavior.PurchaseMethodEnum(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v8 = sub_233B57DF8();
      (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v6, v7, v8);
    }
    else
    {
      v10 = *(_QWORD *)v7;
      v11 = *(_QWORD *)(v7 + 8);
      v12 = *(_BYTE *)(v7 + 16);
      sub_233B0486C(*(_QWORD *)v7, v11, v12);
      *(_QWORD *)v6 = v10;
      *((_QWORD *)v6 + 1) = v11;
      v6[16] = v12;
      v6[17] = *(_BYTE *)(v7 + 17);
    }
    swift_storeEnumTagMultiPayload();
  }
  return v3;
}

uint64_t destroy for ManagedAppDeclaration.InstallBehavior(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + *(int *)(a2 + 24);
  type metadata accessor for ManagedAppDeclaration.InstallBehavior.PurchaseMethodEnum(0);
  if (swift_getEnumCaseMultiPayload() != 1)
    return sub_233B04B94(*(_QWORD *)v2, *(_QWORD *)(v2 + 8), *(_BYTE *)(v2 + 16));
  v3 = sub_233B57DF8();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
}

_BYTE *initializeWithCopy for ManagedAppDeclaration.InstallBehavior(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  *a1 = *a2;
  a1[1] = a2[1];
  v4 = *(int *)(a3 + 24);
  v5 = &a1[v4];
  v6 = &a2[v4];
  type metadata accessor for ManagedAppDeclaration.InstallBehavior.PurchaseMethodEnum(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v7 = sub_233B57DF8();
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v5, v6, v7);
  }
  else
  {
    v8 = *(_QWORD *)v6;
    v9 = *((_QWORD *)v6 + 1);
    v10 = v6[16];
    sub_233B0486C(*(_QWORD *)v6, v9, v10);
    *(_QWORD *)v5 = v8;
    *((_QWORD *)v5 + 1) = v9;
    v5[16] = v10;
    v5[17] = v6[17];
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

_BYTE *assignWithCopy for ManagedAppDeclaration.InstallBehavior(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  *a1 = *a2;
  a1[1] = a2[1];
  if (a1 != a2)
  {
    v4 = *(int *)(a3 + 24);
    v5 = &a1[v4];
    v6 = &a2[v4];
    sub_233B146EC((uint64_t)&a1[v4], type metadata accessor for ManagedAppDeclaration.InstallBehavior.PurchaseMethodEnum);
    type metadata accessor for ManagedAppDeclaration.InstallBehavior.PurchaseMethodEnum(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v7 = sub_233B57DF8();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v5, v6, v7);
    }
    else
    {
      v8 = *(_QWORD *)v6;
      v9 = *((_QWORD *)v6 + 1);
      v10 = v6[16];
      sub_233B0486C(*(_QWORD *)v6, v9, v10);
      *(_QWORD *)v5 = v8;
      *((_QWORD *)v5 + 1) = v9;
      v5[16] = v10;
      v5[17] = v6[17];
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

_BYTE *initializeWithTake for ManagedAppDeclaration.InstallBehavior(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;

  *a1 = *a2;
  a1[1] = a2[1];
  v4 = *(int *)(a3 + 24);
  v5 = &a1[v4];
  v6 = &a2[v4];
  v7 = type metadata accessor for ManagedAppDeclaration.InstallBehavior.PurchaseMethodEnum(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v8 = sub_233B57DF8();
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v5, v6, v8);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  return a1;
}

_BYTE *assignWithTake for ManagedAppDeclaration.InstallBehavior(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;

  *a1 = *a2;
  a1[1] = a2[1];
  if (a1 != a2)
  {
    v4 = *(int *)(a3 + 24);
    v5 = &a1[v4];
    v6 = &a2[v4];
    sub_233B146EC((uint64_t)&a1[v4], type metadata accessor for ManagedAppDeclaration.InstallBehavior.PurchaseMethodEnum);
    v7 = type metadata accessor for ManagedAppDeclaration.InstallBehavior.PurchaseMethodEnum(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v8 = sub_233B57DF8();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v5, v6, v8);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for ManagedAppDeclaration.InstallBehavior()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_233B3EE84(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  uint64_t v8;

  if ((_DWORD)a2 == 254)
  {
    v4 = *a1;
    if (v4 >= 2)
      return v4 - 1;
    else
      return 0;
  }
  else
  {
    v8 = type metadata accessor for ManagedAppDeclaration.InstallBehavior.PurchaseMethodEnum(0);
    return (*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 24)], a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for ManagedAppDeclaration.InstallBehavior()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

_BYTE *sub_233B3EF04(_BYTE *result, uint64_t a2, int a3, uint64_t a4)
{
  _BYTE *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 254)
  {
    *result = a2 + 1;
  }
  else
  {
    v7 = type metadata accessor for ManagedAppDeclaration.InstallBehavior.PurchaseMethodEnum(0);
    return (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 24)], a2, a2, v7);
  }
  return result;
}

uint64_t sub_233B3EF74()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for ManagedAppDeclaration.InstallBehavior.PurchaseMethodEnum(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for ManagedAppDeclaration.InstallBehavior.InstallTiming()
{
  return &type metadata for ManagedAppDeclaration.InstallBehavior.InstallTiming;
}

ValueMetadata *type metadata accessor for ManagedAppDeclaration.InstallBehavior.InstallTimingEnum()
{
  return &type metadata for ManagedAppDeclaration.InstallBehavior.InstallTimingEnum;
}

unint64_t initializeBufferWithCopyOfBuffer for ManagedAppDeclaration.InstallBehavior.PurchaseMethod(unint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v4 = *(_DWORD *)(*(_QWORD *)(type metadata accessor for ManagedAppDeclaration.InstallBehavior.PurchaseMethodEnum(0)
                             - 8)
                 + 80);
  if ((v4 & 0x20000) != 0)
  {
    v6 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = v6 + ((v4 + 16) & ~(unint64_t)v4);
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v5 = sub_233B57DF8();
      (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a1, a2, v5);
    }
    else
    {
      v7 = *(_QWORD *)a2;
      v8 = *(_QWORD *)(a2 + 8);
      v9 = *(_BYTE *)(a2 + 16);
      sub_233B0486C(*(_QWORD *)a2, v8, v9);
      *(_QWORD *)a1 = v7;
      *(_QWORD *)(a1 + 8) = v8;
      *(_BYTE *)(a1 + 16) = v9;
      *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for ManagedAppDeclaration.InstallBehavior.PurchaseMethod(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for ManagedAppDeclaration.InstallBehavior.PurchaseMethodEnum(0);
  if (swift_getEnumCaseMultiPayload() != 1)
    return sub_233B04B94(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  v2 = sub_233B57DF8();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t initializeWithCopy for ManagedAppDeclaration.InstallBehavior.PurchaseMethod(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  type metadata accessor for ManagedAppDeclaration.InstallBehavior.PurchaseMethodEnum(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v4 = sub_233B57DF8();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  }
  else
  {
    v5 = *(_QWORD *)a2;
    v6 = *(_QWORD *)(a2 + 8);
    v7 = *(_BYTE *)(a2 + 16);
    sub_233B0486C(*(_QWORD *)a2, v6, v7);
    *(_QWORD *)a1 = v5;
    *(_QWORD *)(a1 + 8) = v6;
    *(_BYTE *)(a1 + 16) = v7;
    *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for ManagedAppDeclaration.InstallBehavior.PurchaseMethod(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  if (a1 != a2)
  {
    sub_233B146EC(a1, type metadata accessor for ManagedAppDeclaration.InstallBehavior.PurchaseMethodEnum);
    type metadata accessor for ManagedAppDeclaration.InstallBehavior.PurchaseMethodEnum(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v4 = sub_233B57DF8();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
    }
    else
    {
      v5 = *(_QWORD *)a2;
      v6 = *(_QWORD *)(a2 + 8);
      v7 = *(_BYTE *)(a2 + 16);
      sub_233B0486C(*(_QWORD *)a2, v6, v7);
      *(_QWORD *)a1 = v5;
      *(_QWORD *)(a1 + 8) = v6;
      *(_BYTE *)(a1 + 16) = v7;
      *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *initializeWithTake for ManagedAppDeclaration.InstallBehavior.PurchaseMethod(void *a1, const void *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = type metadata accessor for ManagedAppDeclaration.InstallBehavior.PurchaseMethodEnum(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v5 = sub_233B57DF8();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a1, a2, v5);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  }
  return a1;
}

void *assignWithTake for ManagedAppDeclaration.InstallBehavior.PurchaseMethod(void *a1, const void *a2)
{
  uint64_t v4;
  uint64_t v5;

  if (a1 != a2)
  {
    sub_233B146EC((uint64_t)a1, type metadata accessor for ManagedAppDeclaration.InstallBehavior.PurchaseMethodEnum);
    v4 = type metadata accessor for ManagedAppDeclaration.InstallBehavior.PurchaseMethodEnum(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v5 = sub_233B57DF8();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a1, a2, v5);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for ManagedAppDeclaration.InstallBehavior.PurchaseMethod()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_233B3F430(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ManagedAppDeclaration.InstallBehavior.PurchaseMethodEnum(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for ManagedAppDeclaration.InstallBehavior.PurchaseMethod()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_233B3F478(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ManagedAppDeclaration.InstallBehavior.PurchaseMethodEnum(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for ManagedAppDeclaration.InstallBehavior.PurchaseMethod(uint64_t a1)
{
  return sub_233B3F4CC(a1, qword_256113EE8);
}

uint64_t sub_233B3F4CC(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_233B3F500()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for ManagedAppDeclaration.InstallBehavior.PurchaseMethodEnum(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t initializeBufferWithCopyOfBuffer for ManagedAppDeclaration.InstallBehavior.PurchaseMethodEnum(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v7 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = v7 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v6 = sub_233B57DF8();
      (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
    }
    else
    {
      v8 = *(_QWORD *)a2;
      v9 = *(_QWORD *)(a2 + 8);
      v10 = *(_BYTE *)(a2 + 16);
      sub_233B0486C(*(_QWORD *)a2, v9, v10);
      *(_QWORD *)a1 = v8;
      *(_QWORD *)(a1 + 8) = v9;
      *(_BYTE *)(a1 + 16) = v10;
      *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for ManagedAppDeclaration.InstallBehavior.PurchaseMethodEnum(uint64_t a1)
{
  uint64_t v2;

  if (swift_getEnumCaseMultiPayload() != 1)
    return sub_233B04B94(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  v2 = sub_233B57DF8();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t initializeWithCopy for ManagedAppDeclaration.InstallBehavior.PurchaseMethodEnum(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v4 = sub_233B57DF8();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  }
  else
  {
    v5 = *(_QWORD *)a2;
    v6 = *(_QWORD *)(a2 + 8);
    v7 = *(_BYTE *)(a2 + 16);
    sub_233B0486C(*(_QWORD *)a2, v6, v7);
    *(_QWORD *)a1 = v5;
    *(_QWORD *)(a1 + 8) = v6;
    *(_BYTE *)(a1 + 16) = v7;
    *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for ManagedAppDeclaration.InstallBehavior.PurchaseMethodEnum(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  if (a1 != a2)
  {
    sub_233B146EC(a1, type metadata accessor for ManagedAppDeclaration.InstallBehavior.PurchaseMethodEnum);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v4 = sub_233B57DF8();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
    }
    else
    {
      v5 = *(_QWORD *)a2;
      v6 = *(_QWORD *)(a2 + 8);
      v7 = *(_BYTE *)(a2 + 16);
      sub_233B0486C(*(_QWORD *)a2, v6, v7);
      *(_QWORD *)a1 = v5;
      *(_QWORD *)(a1 + 8) = v6;
      *(_BYTE *)(a1 + 16) = v7;
      *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *initializeWithTake for ManagedAppDeclaration.InstallBehavior.PurchaseMethodEnum(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v6 = sub_233B57DF8();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

void *assignWithTake for ManagedAppDeclaration.InstallBehavior.PurchaseMethodEnum(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    sub_233B146EC((uint64_t)a1, type metadata accessor for ManagedAppDeclaration.InstallBehavior.PurchaseMethodEnum);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v6 = sub_233B57DF8();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for ManagedAppDeclaration.InstallBehavior.PurchaseMethodEnum(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a3 - 8) + 48))();
}

uint64_t storeEnumTagSinglePayload for ManagedAppDeclaration.InstallBehavior.PurchaseMethodEnum(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a4 - 8) + 56))();
}

uint64_t sub_233B3F968()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_233B3F978()
{
  uint64_t result;
  unint64_t v1;

  result = sub_233B57DF8();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for ManagedAppDeclaration.InstallBehavior.License()
{
  return &type metadata for ManagedAppDeclaration.InstallBehavior.License;
}

ValueMetadata *type metadata accessor for ManagedAppDeclaration.InstallBehavior.LicenseEnum()
{
  return &type metadata for ManagedAppDeclaration.InstallBehavior.LicenseEnum;
}

ValueMetadata *type metadata accessor for ManagedAppDeclaration.BackupBehavior()
{
  return &type metadata for ManagedAppDeclaration.BackupBehavior;
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for ManagedAppDeclaration.UpdateBehavior(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ManagedAppDeclaration.UpdateBehavior(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 9) = v3;
  return result;
}

ValueMetadata *type metadata accessor for ManagedAppDeclaration.UpdateBehavior()
{
  return &type metadata for ManagedAppDeclaration.UpdateBehavior;
}

ValueMetadata *type metadata accessor for ManagedAppDeclaration.UpdateBehaviorEnum()
{
  return &type metadata for ManagedAppDeclaration.UpdateBehaviorEnum;
}

uint64_t _s22ManagedAppDistribution21ManagedAppDeclarationV14BackupBehaviorVwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_233B3FAEC + 4 * byte_233B5D57E[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_233B3FB20 + 4 * byte_233B5D579[v4]))();
}

uint64_t sub_233B3FB20(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_233B3FB28(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x233B3FB30);
  return result;
}

uint64_t sub_233B3FB3C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x233B3FB44);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_233B3FB48(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_233B3FB50(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ManagedAppDeclaration.RemovalBehavior()
{
  return &type metadata for ManagedAppDeclaration.RemovalBehavior;
}

ValueMetadata *type metadata accessor for StoreAppIdentifier()
{
  return &type metadata for StoreAppIdentifier;
}

ValueMetadata *type metadata accessor for StoreAppIdentifier.CodingKeys()
{
  return &type metadata for StoreAppIdentifier.CodingKeys;
}

ValueMetadata *type metadata accessor for StoreAppIdentifier.ItemIDCodingKeys()
{
  return &type metadata for StoreAppIdentifier.ItemIDCodingKeys;
}

ValueMetadata *type metadata accessor for StoreAppIdentifier.BundleIDCodingKeys()
{
  return &type metadata for StoreAppIdentifier.BundleIDCodingKeys;
}

uint64_t getEnumTagSinglePayload for ManagedAppDeclaration.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF8)
    goto LABEL_17;
  if (a2 + 8 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 8) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 8;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 8;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 8;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 9;
  v8 = v6 - 9;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ManagedAppDeclaration.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_233B3FC8C + 4 * byte_233B5D588[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_233B3FCC0 + 4 * byte_233B5D583[v4]))();
}

uint64_t sub_233B3FCC0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_233B3FCC8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x233B3FCD0);
  return result;
}

uint64_t sub_233B3FCDC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x233B3FCE4);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_233B3FCE8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_233B3FCF0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ManagedAppDeclaration.CodingKeys()
{
  return &type metadata for ManagedAppDeclaration.CodingKeys;
}

ValueMetadata *type metadata accessor for ManagedAppDeclaration.UpdateBehaviorEnum.CodingKeys()
{
  return &type metadata for ManagedAppDeclaration.UpdateBehaviorEnum.CodingKeys;
}

ValueMetadata *type metadata accessor for ManagedAppDeclaration.UpdateBehaviorEnum.AutomaticallyUpdateCodingKeys()
{
  return &type metadata for ManagedAppDeclaration.UpdateBehaviorEnum.AutomaticallyUpdateCodingKeys;
}

ValueMetadata *type metadata accessor for ManagedAppDeclaration.UpdateBehavior.CodingKeys()
{
  return &type metadata for ManagedAppDeclaration.UpdateBehavior.CodingKeys;
}

ValueMetadata *type metadata accessor for ManagedAppDeclaration.BackupBehavior.CodingKeys()
{
  return &type metadata for ManagedAppDeclaration.BackupBehavior.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for ManagedAppDeclaration.InstallBehavior.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_233B3FD98 + 4 * byte_233B5D592[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_233B3FDCC + 4 * byte_233B5D58D[v4]))();
}

uint64_t sub_233B3FDCC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_233B3FDD4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x233B3FDDCLL);
  return result;
}

uint64_t sub_233B3FDE8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x233B3FDF0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_233B3FDF4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_233B3FDFC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ManagedAppDeclaration.InstallBehavior.CodingKeys()
{
  return &type metadata for ManagedAppDeclaration.InstallBehavior.CodingKeys;
}

ValueMetadata *type metadata accessor for ManagedAppDeclaration.InstallBehavior.LicenseEnum.CodingKeys()
{
  return &type metadata for ManagedAppDeclaration.InstallBehavior.LicenseEnum.CodingKeys;
}

ValueMetadata *type metadata accessor for ManagedAppDeclaration.InstallBehavior.LicenseEnum.UserCodingKeys()
{
  return &type metadata for ManagedAppDeclaration.InstallBehavior.LicenseEnum.UserCodingKeys;
}

ValueMetadata *type metadata accessor for ManagedAppDeclaration.InstallBehavior.LicenseEnum.DeviceCodingKeys()
{
  return &type metadata for ManagedAppDeclaration.InstallBehavior.LicenseEnum.DeviceCodingKeys;
}

ValueMetadata *type metadata accessor for ManagedAppDeclaration.InstallBehavior.PurchaseMethodEnum.CodingKeys()
{
  return &type metadata for ManagedAppDeclaration.InstallBehavior.PurchaseMethodEnum.CodingKeys;
}

ValueMetadata *type metadata accessor for ManagedAppDeclaration.InstallBehavior.PurchaseMethodEnum.VolumePurchaseProgramCodingKeys()
{
  return &type metadata for ManagedAppDeclaration.InstallBehavior.PurchaseMethodEnum.VolumePurchaseProgramCodingKeys;
}

ValueMetadata *type metadata accessor for ManagedAppDeclaration.InstallBehavior.PurchaseMethodEnum.ManifestCodingKeys()
{
  return &type metadata for ManagedAppDeclaration.InstallBehavior.PurchaseMethodEnum.ManifestCodingKeys;
}

ValueMetadata *type metadata accessor for ManagedAppDeclaration.InstallBehavior.InstallTimingEnum.CodingKeys()
{
  return &type metadata for ManagedAppDeclaration.InstallBehavior.InstallTimingEnum.CodingKeys;
}

ValueMetadata *type metadata accessor for ManagedAppDeclaration.InstallBehavior.InstallTimingEnum.ImmediatelyCodingKeys()
{
  return &type metadata for ManagedAppDeclaration.InstallBehavior.InstallTimingEnum.ImmediatelyCodingKeys;
}

ValueMetadata *type metadata accessor for ManagedAppDeclaration.InstallBehavior.InstallTimingEnum.OnDemandCodingKeys()
{
  return &type metadata for ManagedAppDeclaration.InstallBehavior.InstallTimingEnum.OnDemandCodingKeys;
}

uint64_t _s22ManagedAppDistribution18StoreAppIdentifierO16ItemIDCodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_233B3FEE8 + 4 * byte_233B5D597[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_233B3FF08 + 4 * byte_233B5D59C[v4]))();
}

_BYTE *sub_233B3FEE8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_233B3FF08(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_233B3FF10(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_233B3FF18(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_233B3FF20(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_233B3FF28(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ManagedAppDeclaration.Attributes.CodingKeys()
{
  return &type metadata for ManagedAppDeclaration.Attributes.CodingKeys;
}

uint64_t _s22ManagedAppDistribution21ManagedAppDeclarationV15ManagementScopeOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_233B3FF90 + 4 * byte_233B5D5A6[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_233B3FFC4 + 4 * byte_233B5D5A1[v4]))();
}

uint64_t sub_233B3FFC4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_233B3FFCC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x233B3FFD4);
  return result;
}

uint64_t sub_233B3FFE0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x233B3FFE8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_233B3FFEC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_233B3FFF4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ManagedAppDeclaration.ManagementScope.CodingKeys()
{
  return &type metadata for ManagedAppDeclaration.ManagementScope.CodingKeys;
}

ValueMetadata *type metadata accessor for ManagedAppDeclaration.ManagementScope.SystemCodingKeys()
{
  return &type metadata for ManagedAppDeclaration.ManagementScope.SystemCodingKeys;
}

ValueMetadata *type metadata accessor for ManagedAppDeclaration.ManagementScope.UserCodingKeys()
{
  return &type metadata for ManagedAppDeclaration.ManagementScope.UserCodingKeys;
}

unint64_t sub_233B40034()
{
  unint64_t result;

  result = qword_256113F20;
  if (!qword_256113F20)
  {
    result = MEMORY[0x23493D400](&unk_233B5DFB4, &type metadata for ManagedAppDeclaration.ManagementScope.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256113F20);
  }
  return result;
}

unint64_t sub_233B4007C()
{
  unint64_t result;

  result = qword_256113F28;
  if (!qword_256113F28)
  {
    result = MEMORY[0x23493D400](&unk_233B5E06C, &type metadata for ManagedAppDeclaration.Attributes.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256113F28);
  }
  return result;
}

unint64_t sub_233B400C4()
{
  unint64_t result;

  result = qword_256113F30;
  if (!qword_256113F30)
  {
    result = MEMORY[0x23493D400](&unk_233B5E1C4, &type metadata for ManagedAppDeclaration.InstallBehavior.InstallTimingEnum.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256113F30);
  }
  return result;
}

unint64_t sub_233B4010C()
{
  unint64_t result;

  result = qword_256113F38;
  if (!qword_256113F38)
  {
    result = MEMORY[0x23493D400](&unk_233B5E27C, &type metadata for ManagedAppDeclaration.InstallBehavior.PurchaseMethodEnum.ManifestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256113F38);
  }
  return result;
}

unint64_t sub_233B40154()
{
  unint64_t result;

  result = qword_256113F40;
  if (!qword_256113F40)
  {
    result = MEMORY[0x23493D400](&unk_233B5E334, &type metadata for ManagedAppDeclaration.InstallBehavior.PurchaseMethodEnum.VolumePurchaseProgramCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256113F40);
  }
  return result;
}

unint64_t sub_233B4019C()
{
  unint64_t result;

  result = qword_256113F48;
  if (!qword_256113F48)
  {
    result = MEMORY[0x23493D400](&unk_233B5E3EC, &type metadata for ManagedAppDeclaration.InstallBehavior.PurchaseMethodEnum.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256113F48);
  }
  return result;
}

unint64_t sub_233B401E4()
{
  unint64_t result;

  result = qword_256113F50;
  if (!qword_256113F50)
  {
    result = MEMORY[0x23493D400](&unk_233B5E544, &type metadata for ManagedAppDeclaration.InstallBehavior.LicenseEnum.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256113F50);
  }
  return result;
}

unint64_t sub_233B4022C()
{
  unint64_t result;

  result = qword_256113F58;
  if (!qword_256113F58)
  {
    result = MEMORY[0x23493D400](&unk_233B5E5FC, &type metadata for ManagedAppDeclaration.InstallBehavior.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256113F58);
  }
  return result;
}

unint64_t sub_233B40274()
{
  unint64_t result;

  result = qword_256113F60;
  if (!qword_256113F60)
  {
    result = MEMORY[0x23493D400](&unk_233B5E6B4, &type metadata for ManagedAppDeclaration.BackupBehavior.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256113F60);
  }
  return result;
}

unint64_t sub_233B402BC()
{
  unint64_t result;

  result = qword_256113F68;
  if (!qword_256113F68)
  {
    result = MEMORY[0x23493D400](&unk_233B5E76C, &type metadata for ManagedAppDeclaration.UpdateBehavior.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256113F68);
  }
  return result;
}

unint64_t sub_233B40304()
{
  unint64_t result;

  result = qword_256113F70;
  if (!qword_256113F70)
  {
    result = MEMORY[0x23493D400](&unk_233B5E824, &type metadata for ManagedAppDeclaration.UpdateBehaviorEnum.AutomaticallyUpdateCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256113F70);
  }
  return result;
}

unint64_t sub_233B4034C()
{
  unint64_t result;

  result = qword_256113F78;
  if (!qword_256113F78)
  {
    result = MEMORY[0x23493D400](&unk_233B5E8DC, &type metadata for ManagedAppDeclaration.UpdateBehaviorEnum.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256113F78);
  }
  return result;
}

unint64_t sub_233B40394()
{
  unint64_t result;

  result = qword_256113F80;
  if (!qword_256113F80)
  {
    result = MEMORY[0x23493D400](&unk_233B5E994, &type metadata for ManagedAppDeclaration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256113F80);
  }
  return result;
}

unint64_t sub_233B403DC()
{
  unint64_t result;

  result = qword_256113F88;
  if (!qword_256113F88)
  {
    result = MEMORY[0x23493D400](&unk_233B5EA4C, &type metadata for StoreAppIdentifier.BundleIDCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256113F88);
  }
  return result;
}

unint64_t sub_233B40424()
{
  unint64_t result;

  result = qword_256113F90;
  if (!qword_256113F90)
  {
    result = MEMORY[0x23493D400](&unk_233B5EB04, &type metadata for StoreAppIdentifier.ItemIDCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256113F90);
  }
  return result;
}

unint64_t sub_233B4046C()
{
  unint64_t result;

  result = qword_256113F98;
  if (!qword_256113F98)
  {
    result = MEMORY[0x23493D400](&unk_233B5EBBC, &type metadata for StoreAppIdentifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256113F98);
  }
  return result;
}

unint64_t sub_233B404B4()
{
  unint64_t result;

  result = qword_256113FA0;
  if (!qword_256113FA0)
  {
    result = MEMORY[0x23493D400](&unk_233B5EA74, &type metadata for StoreAppIdentifier.ItemIDCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256113FA0);
  }
  return result;
}

unint64_t sub_233B404FC()
{
  unint64_t result;

  result = qword_256113FA8;
  if (!qword_256113FA8)
  {
    result = MEMORY[0x23493D400](&unk_233B5EA9C, &type metadata for StoreAppIdentifier.ItemIDCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256113FA8);
  }
  return result;
}

unint64_t sub_233B40544()
{
  unint64_t result;

  result = qword_256113FB0;
  if (!qword_256113FB0)
  {
    result = MEMORY[0x23493D400](&unk_233B5E9BC, &type metadata for StoreAppIdentifier.BundleIDCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256113FB0);
  }
  return result;
}

unint64_t sub_233B4058C()
{
  unint64_t result;

  result = qword_256113FB8;
  if (!qword_256113FB8)
  {
    result = MEMORY[0x23493D400](&unk_233B5E9E4, &type metadata for StoreAppIdentifier.BundleIDCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256113FB8);
  }
  return result;
}

unint64_t sub_233B405D4()
{
  unint64_t result;

  result = qword_256113FC0;
  if (!qword_256113FC0)
  {
    result = MEMORY[0x23493D400](&unk_233B5EB2C, &type metadata for StoreAppIdentifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256113FC0);
  }
  return result;
}

unint64_t sub_233B4061C()
{
  unint64_t result;

  result = qword_256113FC8;
  if (!qword_256113FC8)
  {
    result = MEMORY[0x23493D400](&unk_233B5EB54, &type metadata for StoreAppIdentifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256113FC8);
  }
  return result;
}

unint64_t sub_233B40664()
{
  unint64_t result;

  result = qword_256113FD0;
  if (!qword_256113FD0)
  {
    result = MEMORY[0x23493D400](&unk_233B5E904, &type metadata for ManagedAppDeclaration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256113FD0);
  }
  return result;
}

unint64_t sub_233B406AC()
{
  unint64_t result;

  result = qword_256113FD8;
  if (!qword_256113FD8)
  {
    result = MEMORY[0x23493D400](&unk_233B5E92C, &type metadata for ManagedAppDeclaration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256113FD8);
  }
  return result;
}

unint64_t sub_233B406F4()
{
  unint64_t result;

  result = qword_256113FE0;
  if (!qword_256113FE0)
  {
    result = MEMORY[0x23493D400](&unk_233B5E794, &type metadata for ManagedAppDeclaration.UpdateBehaviorEnum.AutomaticallyUpdateCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256113FE0);
  }
  return result;
}

unint64_t sub_233B4073C()
{
  unint64_t result;

  result = qword_256113FE8;
  if (!qword_256113FE8)
  {
    result = MEMORY[0x23493D400](&unk_233B5E7BC, &type metadata for ManagedAppDeclaration.UpdateBehaviorEnum.AutomaticallyUpdateCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256113FE8);
  }
  return result;
}

unint64_t sub_233B40784()
{
  unint64_t result;

  result = qword_256113FF0;
  if (!qword_256113FF0)
  {
    result = MEMORY[0x23493D400](&unk_233B5E84C, &type metadata for ManagedAppDeclaration.UpdateBehaviorEnum.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256113FF0);
  }
  return result;
}

unint64_t sub_233B407CC()
{
  unint64_t result;

  result = qword_256113FF8;
  if (!qword_256113FF8)
  {
    result = MEMORY[0x23493D400](&unk_233B5E874, &type metadata for ManagedAppDeclaration.UpdateBehaviorEnum.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256113FF8);
  }
  return result;
}

unint64_t sub_233B40814()
{
  unint64_t result;

  result = qword_256114000;
  if (!qword_256114000)
  {
    result = MEMORY[0x23493D400](&unk_233B5E6DC, &type metadata for ManagedAppDeclaration.UpdateBehavior.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256114000);
  }
  return result;
}

unint64_t sub_233B4085C()
{
  unint64_t result;

  result = qword_256114008;
  if (!qword_256114008)
  {
    result = MEMORY[0x23493D400](&unk_233B5E704, &type metadata for ManagedAppDeclaration.UpdateBehavior.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256114008);
  }
  return result;
}

unint64_t sub_233B408A4()
{
  unint64_t result;

  result = qword_256114010;
  if (!qword_256114010)
  {
    result = MEMORY[0x23493D400](&unk_233B5E624, &type metadata for ManagedAppDeclaration.BackupBehavior.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256114010);
  }
  return result;
}

unint64_t sub_233B408EC()
{
  unint64_t result;

  result = qword_256114018;
  if (!qword_256114018)
  {
    result = MEMORY[0x23493D400](&unk_233B5E64C, &type metadata for ManagedAppDeclaration.BackupBehavior.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256114018);
  }
  return result;
}

unint64_t sub_233B40934()
{
  unint64_t result;

  result = qword_256114020;
  if (!qword_256114020)
  {
    result = MEMORY[0x23493D400](&unk_233B5E56C, &type metadata for ManagedAppDeclaration.InstallBehavior.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256114020);
  }
  return result;
}

unint64_t sub_233B4097C()
{
  unint64_t result;

  result = qword_256114028;
  if (!qword_256114028)
  {
    result = MEMORY[0x23493D400](&unk_233B5E594, &type metadata for ManagedAppDeclaration.InstallBehavior.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256114028);
  }
  return result;
}

unint64_t sub_233B409C4()
{
  unint64_t result;

  result = qword_256114030;
  if (!qword_256114030)
  {
    result = MEMORY[0x23493D400](&unk_233B5E464, &type metadata for ManagedAppDeclaration.InstallBehavior.LicenseEnum.UserCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256114030);
  }
  return result;
}

unint64_t sub_233B40A0C()
{
  unint64_t result;

  result = qword_256114038;
  if (!qword_256114038)
  {
    result = MEMORY[0x23493D400](&unk_233B5E48C, &type metadata for ManagedAppDeclaration.InstallBehavior.LicenseEnum.UserCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256114038);
  }
  return result;
}

unint64_t sub_233B40A54()
{
  unint64_t result;

  result = qword_256114040;
  if (!qword_256114040)
  {
    result = MEMORY[0x23493D400](&unk_233B5E414, &type metadata for ManagedAppDeclaration.InstallBehavior.LicenseEnum.DeviceCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256114040);
  }
  return result;
}

unint64_t sub_233B40A9C()
{
  unint64_t result;

  result = qword_256114048;
  if (!qword_256114048)
  {
    result = MEMORY[0x23493D400](&unk_233B5E43C, &type metadata for ManagedAppDeclaration.InstallBehavior.LicenseEnum.DeviceCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256114048);
  }
  return result;
}

unint64_t sub_233B40AE4()
{
  unint64_t result;

  result = qword_256114050;
  if (!qword_256114050)
  {
    result = MEMORY[0x23493D400](&unk_233B5E4B4, &type metadata for ManagedAppDeclaration.InstallBehavior.LicenseEnum.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256114050);
  }
  return result;
}

unint64_t sub_233B40B2C()
{
  unint64_t result;

  result = qword_256114058;
  if (!qword_256114058)
  {
    result = MEMORY[0x23493D400](&unk_233B5E4DC, &type metadata for ManagedAppDeclaration.InstallBehavior.LicenseEnum.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256114058);
  }
  return result;
}

unint64_t sub_233B40B74()
{
  unint64_t result;

  result = qword_256114060;
  if (!qword_256114060)
  {
    result = MEMORY[0x23493D400](&unk_233B5E2A4, &type metadata for ManagedAppDeclaration.InstallBehavior.PurchaseMethodEnum.VolumePurchaseProgramCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256114060);
  }
  return result;
}

unint64_t sub_233B40BBC()
{
  unint64_t result;

  result = qword_256114068;
  if (!qword_256114068)
  {
    result = MEMORY[0x23493D400](&unk_233B5E2CC, &type metadata for ManagedAppDeclaration.InstallBehavior.PurchaseMethodEnum.VolumePurchaseProgramCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256114068);
  }
  return result;
}

unint64_t sub_233B40C04()
{
  unint64_t result;

  result = qword_256114070;
  if (!qword_256114070)
  {
    result = MEMORY[0x23493D400](&unk_233B5E1EC, &type metadata for ManagedAppDeclaration.InstallBehavior.PurchaseMethodEnum.ManifestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256114070);
  }
  return result;
}

unint64_t sub_233B40C4C()
{
  unint64_t result;

  result = qword_256114078;
  if (!qword_256114078)
  {
    result = MEMORY[0x23493D400](&unk_233B5E214, &type metadata for ManagedAppDeclaration.InstallBehavior.PurchaseMethodEnum.ManifestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256114078);
  }
  return result;
}

unint64_t sub_233B40C94()
{
  unint64_t result;

  result = qword_256114080;
  if (!qword_256114080)
  {
    result = MEMORY[0x23493D400](&unk_233B5E35C, &type metadata for ManagedAppDeclaration.InstallBehavior.PurchaseMethodEnum.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256114080);
  }
  return result;
}

unint64_t sub_233B40CDC()
{
  unint64_t result;

  result = qword_256114088;
  if (!qword_256114088)
  {
    result = MEMORY[0x23493D400](&unk_233B5E384, &type metadata for ManagedAppDeclaration.InstallBehavior.PurchaseMethodEnum.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256114088);
  }
  return result;
}

unint64_t sub_233B40D24()
{
  unint64_t result;

  result = qword_256114090;
  if (!qword_256114090)
  {
    result = MEMORY[0x23493D400](&unk_233B5E0E4, &type metadata for ManagedAppDeclaration.InstallBehavior.InstallTimingEnum.ImmediatelyCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256114090);
  }
  return result;
}

unint64_t sub_233B40D6C()
{
  unint64_t result;

  result = qword_256114098;
  if (!qword_256114098)
  {
    result = MEMORY[0x23493D400](&unk_233B5E10C, &type metadata for ManagedAppDeclaration.InstallBehavior.InstallTimingEnum.ImmediatelyCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256114098);
  }
  return result;
}

unint64_t sub_233B40DB4()
{
  unint64_t result;

  result = qword_2561140A0;
  if (!qword_2561140A0)
  {
    result = MEMORY[0x23493D400](&unk_233B5E094, &type metadata for ManagedAppDeclaration.InstallBehavior.InstallTimingEnum.OnDemandCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2561140A0);
  }
  return result;
}

unint64_t sub_233B40DFC()
{
  unint64_t result;

  result = qword_2561140A8;
  if (!qword_2561140A8)
  {
    result = MEMORY[0x23493D400](&unk_233B5E0BC, &type metadata for ManagedAppDeclaration.InstallBehavior.InstallTimingEnum.OnDemandCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2561140A8);
  }
  return result;
}

unint64_t sub_233B40E44()
{
  unint64_t result;

  result = qword_2561140B0;
  if (!qword_2561140B0)
  {
    result = MEMORY[0x23493D400](&unk_233B5E134, &type metadata for ManagedAppDeclaration.InstallBehavior.InstallTimingEnum.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2561140B0);
  }
  return result;
}

unint64_t sub_233B40E8C()
{
  unint64_t result;

  result = qword_2561140B8;
  if (!qword_2561140B8)
  {
    result = MEMORY[0x23493D400](&unk_233B5E15C, &type metadata for ManagedAppDeclaration.InstallBehavior.InstallTimingEnum.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2561140B8);
  }
  return result;
}

unint64_t sub_233B40ED4()
{
  unint64_t result;

  result = qword_2561140C0;
  if (!qword_2561140C0)
  {
    result = MEMORY[0x23493D400](&unk_233B5DFDC, &type metadata for ManagedAppDeclaration.Attributes.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2561140C0);
  }
  return result;
}

unint64_t sub_233B40F1C()
{
  unint64_t result;

  result = qword_2561140C8;
  if (!qword_2561140C8)
  {
    result = MEMORY[0x23493D400](&unk_233B5E004, &type metadata for ManagedAppDeclaration.Attributes.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2561140C8);
  }
  return result;
}

unint64_t sub_233B40F64()
{
  unint64_t result;

  result = qword_2561140D0;
  if (!qword_2561140D0)
  {
    result = MEMORY[0x23493D400](&unk_233B5DED4, &type metadata for ManagedAppDeclaration.ManagementScope.SystemCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2561140D0);
  }
  return result;
}

unint64_t sub_233B40FAC()
{
  unint64_t result;

  result = qword_2561140D8;
  if (!qword_2561140D8)
  {
    result = MEMORY[0x23493D400](&unk_233B5DEFC, &type metadata for ManagedAppDeclaration.ManagementScope.SystemCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2561140D8);
  }
  return result;
}

unint64_t sub_233B40FF4()
{
  unint64_t result;

  result = qword_2561140E0;
  if (!qword_2561140E0)
  {
    result = MEMORY[0x23493D400](&unk_233B5DE84, &type metadata for ManagedAppDeclaration.ManagementScope.UserCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2561140E0);
  }
  return result;
}

unint64_t sub_233B4103C()
{
  unint64_t result;

  result = qword_2561140E8;
  if (!qword_2561140E8)
  {
    result = MEMORY[0x23493D400](&unk_233B5DEAC, &type metadata for ManagedAppDeclaration.ManagementScope.UserCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2561140E8);
  }
  return result;
}

unint64_t sub_233B41084()
{
  unint64_t result;

  result = qword_2561140F0;
  if (!qword_2561140F0)
  {
    result = MEMORY[0x23493D400](&unk_233B5DF24, &type metadata for ManagedAppDeclaration.ManagementScope.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2561140F0);
  }
  return result;
}

unint64_t sub_233B410CC()
{
  unint64_t result;

  result = qword_2561140F8;
  if (!qword_2561140F8)
  {
    result = MEMORY[0x23493D400](&unk_233B5DF4C, &type metadata for ManagedAppDeclaration.ManagementScope.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2561140F8);
  }
  return result;
}

uint64_t AsyncStreamListener.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = swift_allocObject();
  v3 = v2 + *(_QWORD *)(*(_QWORD *)v2 + 88);
  v4 = sub_233B58134();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(v3, a1, v4);
  return v2;
}

uint64_t AsyncStreamListener.init(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 88);
  v4 = sub_233B58134();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(v3, a1, v4);
  return v1;
}

BOOL static AsyncStreamListener.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

uint64_t AsyncStreamListener.hash(into:)()
{
  return sub_233B5859C();
}

uint64_t AsyncStreamListener.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 88);
  v2 = sub_233B58134();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t AsyncStreamListener.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 88);
  v2 = sub_233B58134();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance();
}

uint64_t AsyncStreamListener.hashValue.getter()
{
  sub_233B58590();
  sub_233B5859C();
  return sub_233B585C0();
}

uint64_t sub_233B41300()
{
  return AsyncStreamListener.hashValue.getter();
}

uint64_t sub_233B41320()
{
  return AsyncStreamListener.hash(into:)();
}

uint64_t sub_233B41340()
{
  sub_233B58590();
  AsyncStreamListener.hash(into:)();
  return sub_233B585C0();
}

void sub_233B4137C()
{
  JUMPOUT(0x23493D400);
}

BOOL sub_233B4138C(uint64_t *a1, uint64_t *a2)
{
  return static AsyncStreamListener.== infix(_:_:)(*a1, *a2);
}

uint64_t sub_233B413AC()
{
  uint64_t result;
  unint64_t v1;

  result = sub_233B58134();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for AsyncStreamListener(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AsyncStreamListener);
}

uint64_t method lookup function for AsyncStreamListener()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AsyncStreamListener.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t static LocalizedStringResource.BundleDescription.madFramework.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_25424D2A0);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_233B57DD4();
  MEMORY[0x24BDAC7A8](v5);
  (*(void (**)(char *, _QWORD))(v7 + 104))((char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), *MEMORY[0x24BDCD790]);
  v8 = sub_233B57DF8();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v4, 1, 1, v8);
  sub_233B57DEC();
  v9 = *MEMORY[0x24BDCD330];
  v10 = sub_233B57DB0();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 104))(a1, v9, v10);
}

void NSBundle.preferredLocalization.getter()
{
  void *v0;
  id v1;
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;

  v1 = objc_msgSend(v0, sel_localizations);
  if (!v1)
  {
    sub_233B58068();
    v1 = (id)sub_233B5805C();
    swift_bridgeObjectRelease();
  }
  v2 = (void *)objc_opt_self();
  sub_233B57E4C();
  v3 = (void *)sub_233B5805C();
  swift_bridgeObjectRelease();
  v4 = objc_msgSend(v2, sel_preferredLocalizationsFromArray_forPreferences_, v1, v3);

  v5 = sub_233B58068();
  if (*(_QWORD *)(v5 + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  else
  {
    __break(1u);
  }
}

uint64_t DDMDeclarationKeysRequest.request()()
{
  return swift_task_switch();
}

uint64_t sub_233B41688()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  if (qword_25424D4B0 != -1)
    swift_once();
  v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_256112EF0 + dword_256112EF0);
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_233B41724;
  return v3(v0 + 16, (uint64_t)sub_233B41798, 0);
}

uint64_t sub_233B41724(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *v2 + 16;
  v5 = *v2;
  *(_QWORD *)(v4 + 8) = v1;
  swift_task_dealloc();
  if (v1)
    return swift_task_switch();
  else
    return (*(uint64_t (**)(uint64_t))(v5 + 8))(a1);
}

void sub_233B41798(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_233B4181C(a1, a2, a3, a4, a5, (uint64_t)&block_descriptor_5_0);
}

uint64_t *DDMDeclarationKeysRequest.request()()
{
  _BYTE v1[8];

  if (qword_25424D4B0 != -1)
    swift_once();
  return sub_233B23324((uint64_t)v1, (void (*)(uint64_t, uint64_t, unint64_t, uint64_t (*)(uint64_t, uint64_t), uint64_t))sub_233B41810, 0);
}

void sub_233B41810(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_233B4181C(a1, a2, a3, a4, a5, (uint64_t)&block_descriptor_13);
}

void sub_233B4181C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v7;
  _QWORD v8[6];

  v8[4] = a4;
  v8[5] = a5;
  v8[0] = MEMORY[0x24BDAC760];
  v8[1] = 1107296256;
  v8[2] = sub_233B42240;
  v8[3] = a6;
  v7 = _Block_copy(v8);
  swift_retain();
  swift_release();
  objc_msgSend(a1, sel_currentDeclarationKeysWithReply_, v7);
  _Block_release(v7);
}

uint64_t sub_233B418B0()
{
  sub_233B419C4();
  return sub_233B58638();
}

uint64_t sub_233B418D8()
{
  sub_233B419C4();
  return sub_233B58644();
}

uint64_t DDMDeclarationKeysRequest.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2561141B8);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_233B419C4();
  sub_233B5862C();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

unint64_t sub_233B419C4()
{
  unint64_t result;

  result = qword_2561141C0;
  if (!qword_2561141C0)
  {
    result = MEMORY[0x23493D400](&unk_233B5F438, &type metadata for DDMDeclarationKeysRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2561141C0);
  }
  return result;
}

uint64_t DDMDeclarationKeysRequest.init(from:)(uint64_t a1)
{
  return __swift_destroy_boxed_opaque_existential_0(a1);
}

uint64_t sub_233B41A2C(uint64_t a1)
{
  return __swift_destroy_boxed_opaque_existential_0(a1);
}

uint64_t sub_233B41A50(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2561141B8);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_233B419C4();
  sub_233B5862C();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

ValueMetadata *type metadata accessor for DDMDeclarationKeysRequest()
{
  return &type metadata for DDMDeclarationKeysRequest;
}

ValueMetadata *type metadata accessor for DDMDeclarationKeysRequest.CodingKeys()
{
  return &type metadata for DDMDeclarationKeysRequest.CodingKeys;
}

unint64_t sub_233B41B38()
{
  unint64_t result;

  result = qword_2561141C8;
  if (!qword_2561141C8)
  {
    result = MEMORY[0x23493D400](&unk_233B5F3E8, &type metadata for DDMDeclarationKeysRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2561141C8);
  }
  return result;
}

unint64_t sub_233B41B80()
{
  unint64_t result;

  result = qword_2561141D0;
  if (!qword_2561141D0)
  {
    result = MEMORY[0x23493D400](&unk_233B5F410, &type metadata for DDMDeclarationKeysRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2561141D0);
  }
  return result;
}

Swift::Bool __swiftcall isManagedAppDistributionEnabled()()
{
  char v0;
  _BYTE v2[24];
  ValueMetadata *v3;
  unint64_t v4;

  v3 = &type metadata for FeatureFlag;
  v4 = sub_233B139EC();
  v0 = sub_233B57E88();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v2);
  return v0 & 1;
}

uint64_t storeEnumTagSinglePayload for FeatureFlag(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_233B41C58 + 4 * byte_233B5F490[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_233B41C78 + 4 * byte_233B5F495[v4]))();
}

_BYTE *sub_233B41C58(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_233B41C78(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_233B41C80(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_233B41C88(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_233B41C90(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_233B41C98(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for FeatureFlag()
{
  return &type metadata for FeatureFlag;
}

unint64_t sub_233B41CB8()
{
  unint64_t result;

  result = qword_2561141D8;
  if (!qword_2561141D8)
  {
    result = MEMORY[0x23493D400](&unk_233B5F504, &type metadata for FeatureFlag);
    atomic_store(result, (unint64_t *)&qword_2561141D8);
  }
  return result;
}

const char *sub_233B41CFC()
{
  return "ManagedAppDistribution";
}

const char *sub_233B41D10()
{
  return "Service";
}

unint64_t static Logger.madSubsystem.getter()
{
  return 0xD000000000000020;
}

uint64_t sub_233B41D40(uint64_t a1)
{
  return sub_233B421B0(a1, qword_2561141E0);
}

uint64_t static Logger.appActions.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_233B41DBC(&qword_256112B40, (uint64_t)qword_2561141E0, a1);
}

uint64_t sub_233B41D84(uint64_t a1)
{
  return sub_233B421B0(a1, qword_25424CE60);
}

uint64_t static Logger.daemon.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_233B41DBC(&qword_25424CEE8, (uint64_t)qword_25424CE60, a1);
}

uint64_t sub_233B41DBC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  if (*a1 != -1)
    swift_once();
  v5 = sub_233B57EC4();
  v6 = __swift_project_value_buffer(v5, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a3, v6, v5);
}

uint64_t sub_233B41E24(uint64_t a1)
{
  return sub_233B421B0(a1, qword_2561141F8);
}

uint64_t static Logger.ddm.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_233B41DBC(&qword_256112B48, (uint64_t)qword_2561141F8, a1);
}

uint64_t sub_233B41E58(uint64_t a1)
{
  return sub_233B421B0(a1, qword_256114210);
}

uint64_t static Logger.download.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_233B41DBC(&qword_256112B50, (uint64_t)qword_256114210, a1);
}

uint64_t sub_233B41E94(uint64_t a1)
{
  return sub_233B421B0(a1, qword_256114228);
}

uint64_t static Logger.eligibility.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_233B41DBC(&qword_256112B58, (uint64_t)qword_256114228, a1);
}

uint64_t sub_233B41ED8(uint64_t a1)
{
  return sub_233B421B0(a1, qword_25424D120);
}

uint64_t static Logger.general.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_233B41DBC(&qword_25424D188, (uint64_t)qword_25424D120, a1);
}

uint64_t sub_233B41F14(uint64_t a1)
{
  return sub_233B421B0(a1, qword_25424CE78);
}

uint64_t static Logger.install.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_233B41DBC(&qword_25424CEF0, (uint64_t)qword_25424CE78, a1);
}

uint64_t sub_233B41F50(uint64_t a1)
{
  return sub_233B421B0(a1, qword_25424CE90);
}

uint64_t static Logger.library.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_233B41DBC(&qword_25424CEC8, (uint64_t)qword_25424CE90, a1);
}

uint64_t sub_233B41F8C(uint64_t a1)
{
  return sub_233B421B0(a1, qword_25424D190);
}

uint64_t static Logger.metrics.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_233B41DBC(&qword_25424D1A8, (uint64_t)qword_25424D190, a1);
}

uint64_t sub_233B41FC8(uint64_t a1)
{
  return sub_233B421B0(a1, qword_256114240);
}

uint64_t static Logger.oauth.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_233B41DBC(&qword_256112B60, (uint64_t)qword_256114240, a1);
}

uint64_t sub_233B42000(uint64_t a1)
{
  return sub_233B421B0(a1, qword_256114258);
}

uint64_t static Logger.progress.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_233B41DBC(&qword_256112B68, (uint64_t)qword_256114258, a1);
}

uint64_t sub_233B4203C(uint64_t a1)
{
  return sub_233B421B0(a1, qword_25424D2A8);
}

uint64_t static Logger.restore.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_233B41DBC(&qword_25424D298, (uint64_t)qword_25424D2A8, a1);
}

uint64_t sub_233B42078(uint64_t a1)
{
  return sub_233B421B0(a1, qword_256114270);
}

uint64_t static Logger.scheduler.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_233B41DBC(&qword_256112B70, (uint64_t)qword_256114270, a1);
}

uint64_t sub_233B420B8(uint64_t a1)
{
  return sub_233B421B0(a1, qword_25424CEA8);
}

uint64_t static Logger.sql.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_233B41DBC(&qword_25424CEC0, (uint64_t)qword_25424CEA8, a1);
}

uint64_t sub_233B420EC(uint64_t a1)
{
  return sub_233B421B0(a1, qword_25424D1B0);
}

uint64_t static Logger.storage.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_233B41DBC(&qword_25424CED0, (uint64_t)qword_25424D1B0, a1);
}

uint64_t sub_233B42128(uint64_t a1)
{
  return sub_233B421B0(a1, qword_25424D1C8);
}

uint64_t static Logger.updates.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_233B41DBC(&qword_25424D1E0, (uint64_t)qword_25424D1C8, a1);
}

uint64_t sub_233B42164(uint64_t a1)
{
  return sub_233B421B0(a1, qword_256114288);
}

uint64_t static Logger.vpp.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_233B41DBC(&qword_256112B78, (uint64_t)qword_256114288, a1);
}

uint64_t sub_233B42198(uint64_t a1)
{
  return sub_233B421B0(a1, qword_25424D3B8);
}

uint64_t sub_233B421B0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_233B57EC4();
  __swift_allocate_value_buffer(v3, a2);
  __swift_project_value_buffer(v3, (uint64_t)a2);
  return sub_233B57EB8();
}

uint64_t static Logger.xpc.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_233B41DBC(&qword_25424D3D0, (uint64_t)qword_25424D3B8, a1);
}

uint64_t sub_233B42240(uint64_t a1, void *a2)
{
  void (*v3)(uint64_t, unint64_t);
  id v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v3 = *(void (**)(uint64_t, unint64_t))(a1 + 32);
  swift_retain();
  v4 = a2;
  v5 = sub_233B57E10();
  v7 = v6;

  v3(v5, v7);
  sub_233B13CD8(v5, v7);
  return swift_release();
}

void XPCClient.unregisterAppInstallStateListener(_:for:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  sub_233B422C8(a1, a2, a3, a4, (void (*)(os_unfair_lock_s *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_233B44CC0);
}

void XPCClient.registerAppInstallStateListener(_:for:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  sub_233B422C8(a1, a2, a3, a4, (void (*)(os_unfair_lock_s *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_233B447C8);
}

void sub_233B422C8(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void (*a5)(os_unfair_lock_s *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v5;
  uint64_t v10;
  os_unfair_lock_s *v11;
  os_unfair_lock_s *v12;
  os_unfair_lock_s *v13;

  v10 = a4 & 1;
  v11 = *(os_unfair_lock_s **)(v5 + OBJC_IVAR____TtC22ManagedAppDistribution9XPCClient_lockedStorage);
  v12 = v11 + 4;
  v13 = v11 + 26;
  os_unfair_lock_lock(v11 + 26);
  a5(v12, a2, a3, v10, a1, v5);
  os_unfair_lock_unlock(v13);
}

uint64_t sub_233B42354@<X0>(_BYTE **a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  void (*v10)(_BYTE *, _QWORD);
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  _BYTE *v18;
  _BYTE v19[32];
  _QWORD v20[4];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_25424D908);
  MEMORY[0x24BDAC7A8](v3);
  v5 = &v19[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = swift_allocObject();
  *(_WORD *)(v6 + 16) = -256;
  sub_233B57D74();
  swift_allocObject();
  sub_233B57D68();
  sub_233B582F0();
  v7 = sub_233B582FC();
  result = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    v9 = swift_allocObject();
    *(_QWORD *)(v9 + 16) = sub_233B4D3A0;
    *(_QWORD *)(v9 + 24) = v6;
    v20[3] = __swift_instantiateConcreteTypeFromMangledName(&qword_25424D918);
    v20[0] = sub_233B4E998;
    v20[1] = v9;
    swift_retain();
    v10 = (void (*)(_BYTE *, _QWORD))sub_233B57D5C();
    sub_233B212C4((uint64_t)v20, (uint64_t)v5);
    v10(v19, 0);
    v11 = sub_233B328B8();
    MEMORY[0x24BDAC7A8](v11);
    (*(void (**)(_BYTE *))(v13 + 16))(&v19[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)]);
    v14 = sub_233B57E1C();
    v16 = v15;
    sub_233B2244C();
    sub_233B57D50();
    if (v1)
    {
      swift_release();
      sub_233B13CD8(v14, v16);
      return swift_release();
    }
    sub_233B13CD8(v14, v16);
    result = swift_beginAccess();
    v17 = *(unsigned __int16 *)(v6 + 16);
    if (v17 >> 8 <= 0xFE)
    {
      v18 = *a1;
      *v18 = v17;
      v18[1] = BYTE1(v17) & 1;
      swift_release();
      return swift_release();
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_233B425F8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  void (*v10)(_BYTE *, _QWORD);
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v20[32];
  _QWORD v21[4];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_25424D908);
  MEMORY[0x24BDAC7A8](v3);
  v5 = &v20[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = 0;
  *(_BYTE *)(v6 + 24) = -1;
  sub_233B57D74();
  swift_allocObject();
  sub_233B57D68();
  sub_233B582F0();
  v7 = sub_233B582FC();
  result = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    v9 = swift_allocObject();
    *(_QWORD *)(v9 + 16) = sub_233B4E40C;
    *(_QWORD *)(v9 + 24) = v6;
    v21[3] = __swift_instantiateConcreteTypeFromMangledName(&qword_25424D918);
    v21[0] = sub_233B4E998;
    v21[1] = v9;
    swift_retain();
    v10 = (void (*)(_BYTE *, _QWORD))sub_233B57D5C();
    sub_233B212C4((uint64_t)v21, (uint64_t)v5);
    v10(v20, 0);
    v11 = sub_233B328B8();
    MEMORY[0x24BDAC7A8](v11);
    (*(void (**)(_BYTE *))(v13 + 16))(&v20[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)]);
    v14 = sub_233B57E1C();
    v16 = v15;
    sub_233B2244C();
    sub_233B57D50();
    if (v1)
    {
      swift_release();
      sub_233B13CD8(v14, v16);
      return swift_release();
    }
    sub_233B13CD8(v14, v16);
    result = swift_beginAccess();
    v17 = *(unsigned __int8 *)(v6 + 24);
    if (v17 != 255)
    {
      v18 = *(_QWORD *)(v6 + 16);
      v19 = *a1;
      *(_QWORD *)v19 = v18;
      *(_BYTE *)(v19 + 8) = v17 & 1;
      sub_233B4E43C(v18, v17 & 1);
      swift_release();
      return swift_release();
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_233B428A4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  void (*v10)(_BYTE *, _QWORD);
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v20[32];
  _QWORD v21[4];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_25424D908);
  MEMORY[0x24BDAC7A8](v3);
  v5 = &v20[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = 0;
  *(_BYTE *)(v6 + 24) = -1;
  sub_233B57D74();
  swift_allocObject();
  sub_233B57D68();
  sub_233B582F0();
  v7 = sub_233B582FC();
  result = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    v9 = swift_allocObject();
    *(_QWORD *)(v9 + 16) = sub_233B4E370;
    *(_QWORD *)(v9 + 24) = v6;
    v21[3] = __swift_instantiateConcreteTypeFromMangledName(&qword_25424D918);
    v21[0] = sub_233B4E998;
    v21[1] = v9;
    swift_retain();
    v10 = (void (*)(_BYTE *, _QWORD))sub_233B57D5C();
    sub_233B212C4((uint64_t)v21, (uint64_t)v5);
    v10(v20, 0);
    v11 = sub_233B328B8();
    MEMORY[0x24BDAC7A8](v11);
    (*(void (**)(_BYTE *))(v13 + 16))(&v20[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)]);
    v14 = sub_233B57E1C();
    v16 = v15;
    sub_233B2244C();
    sub_233B57D50();
    if (v1)
    {
      swift_release();
      sub_233B13CD8(v14, v16);
      return swift_release();
    }
    sub_233B13CD8(v14, v16);
    result = swift_beginAccess();
    v17 = *(unsigned __int8 *)(v6 + 24);
    if (v17 != 255)
    {
      v18 = *(_QWORD *)(v6 + 16);
      v19 = *a1;
      *(_QWORD *)v19 = v18;
      *(_BYTE *)(v19 + 8) = v17 & 1;
      sub_233B4E43C(v18, v17 & 1);
      swift_release();
      return swift_release();
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_233B42B50@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  void (*v10)(_BYTE *, _QWORD);
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  _BYTE v19[32];
  _QWORD v20[4];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_25424D908);
  MEMORY[0x24BDAC7A8](v3);
  v5 = &v19[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = 0;
  *(_BYTE *)(v6 + 24) = -1;
  sub_233B57D74();
  swift_allocObject();
  sub_233B57D68();
  sub_233B582F0();
  v7 = sub_233B582FC();
  result = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    v9 = swift_allocObject();
    *(_QWORD *)(v9 + 16) = sub_233B4D328;
    *(_QWORD *)(v9 + 24) = v6;
    v20[3] = __swift_instantiateConcreteTypeFromMangledName(&qword_25424D918);
    v20[0] = sub_233B4D364;
    v20[1] = v9;
    swift_retain();
    v10 = (void (*)(_BYTE *, _QWORD))sub_233B57D5C();
    sub_233B212C4((uint64_t)v20, (uint64_t)v5);
    v10(v19, 0);
    v11 = sub_233B328B8();
    MEMORY[0x24BDAC7A8](v11);
    (*(void (**)(_BYTE *))(v13 + 16))(&v19[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)]);
    v14 = sub_233B57E1C();
    v16 = v15;
    sub_233B2244C();
    sub_233B57D50();
    if (v1)
    {
      swift_release();
      sub_233B13CD8(v14, v16);
      return swift_release();
    }
    sub_233B13CD8(v14, v16);
    result = swift_beginAccess();
    v17 = *(unsigned __int8 *)(v6 + 24);
    if (v17 != 255)
    {
      v18 = *a1;
      *(_QWORD *)v18 = *(_QWORD *)(v6 + 16);
      *(_BYTE *)(v18 + 8) = v17 & 1;
      swift_release();
      return swift_release();
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_233B42DF8@<X0>(uint64_t **a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  void (*v11)(_BYTE *, _QWORD);
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _BYTE v18[32];
  _QWORD v19[4];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_25424D908);
  MEMORY[0x24BDAC7A8](v3);
  v5 = &v18[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = 0;
  v7 = (uint64_t *)(v6 + 16);
  sub_233B57D74();
  swift_allocObject();
  sub_233B57D68();
  sub_233B582F0();
  v8 = sub_233B582FC();
  result = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v5, 1, v8);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    v10 = swift_allocObject();
    *(_QWORD *)(v10 + 16) = sub_233B4E294;
    *(_QWORD *)(v10 + 24) = v6;
    v19[3] = __swift_instantiateConcreteTypeFromMangledName(&qword_25424D918);
    v19[0] = sub_233B4E998;
    v19[1] = v10;
    swift_retain();
    v11 = (void (*)(_BYTE *, _QWORD))sub_233B57D5C();
    sub_233B212C4((uint64_t)v19, (uint64_t)v5);
    v11(v18, 0);
    v12 = sub_233B328B8();
    MEMORY[0x24BDAC7A8](v12);
    (*(void (**)(_BYTE *))(v14 + 16))(&v18[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)]);
    v15 = sub_233B57E1C();
    v17 = v16;
    sub_233B2244C();
    sub_233B57D50();
    if (v1)
    {
      swift_release();
      sub_233B13CD8(v15, v17);
      return swift_release();
    }
    sub_233B13CD8(v15, v17);
    swift_beginAccess();
    result = *v7;
    if (*v7)
    {
      **a1 = result;
      swift_bridgeObjectRetain();
      swift_release();
      return swift_release();
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_233B4308C(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  __int16 v5;
  _BYTE v6[24];
  uint64_t v7;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  result = sub_233B585E4();
  if (!v2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2561142E0);
    sub_233B083C8(&qword_2561142E8, &qword_2561142E0, (uint64_t)&protocol conformance descriptor for ServiceResult<A>);
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v6, v7);
    sub_233B584B8();
    swift_beginAccess();
    *(_WORD *)(a2 + 16) = v5;
    return __swift_destroy_boxed_opaque_existential_0((uint64_t)v6);
  }
  return result;
}

uint64_t sub_233B4318C(_QWORD *a1, uint64_t a2, uint64_t *a3, unint64_t *a4, void (*a5)(uint64_t, uint64_t))
{
  uint64_t v5;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  _BYTE v15[24];
  uint64_t v16;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  result = sub_233B585E4();
  if (!v5)
  {
    __swift_instantiateConcreteTypeFromMangledName(a3);
    sub_233B083C8(a4, a3, (uint64_t)&protocol conformance descriptor for ServiceResult<A>);
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v15, v16);
    sub_233B584B8();
    swift_beginAccess();
    v11 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 16) = v13;
    v12 = *(unsigned __int8 *)(a2 + 24);
    *(_BYTE *)(a2 + 24) = v14;
    a5(v11, v12);
    return __swift_destroy_boxed_opaque_existential_0((uint64_t)v15);
  }
  return result;
}

uint64_t sub_233B432A4(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  char v6;
  _BYTE v7[24];
  uint64_t v8;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  result = sub_233B585E4();
  if (!v2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_25424D488);
    sub_233B083C8(&qword_25424D480, &qword_25424D488, (uint64_t)&protocol conformance descriptor for ServiceResult<A>);
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v7, v8);
    sub_233B584B8();
    swift_beginAccess();
    *(_QWORD *)(a2 + 16) = v5;
    *(_BYTE *)(a2 + 24) = v6;
    return __swift_destroy_boxed_opaque_existential_0((uint64_t)v7);
  }
  return result;
}

uint64_t sub_233B433A8(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  _BYTE v6[24];
  uint64_t v7;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  result = sub_233B585E4();
  if (!v2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_25424D900);
    sub_233B4E2AC();
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v6, v7);
    sub_233B584B8();
    swift_beginAccess();
    *(_QWORD *)(a2 + 16) = v5;
    swift_bridgeObjectRelease();
    return __swift_destroy_boxed_opaque_existential_0((uint64_t)v6);
  }
  return result;
}

id static XPCClient.interface()()
{
  return objc_msgSend((id)objc_opt_self(), sel_interfaceWithProtocol_, &unk_256124220);
}

id sub_233B434D8()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for XPCClient()), sel_init);
  qword_25424D460 = (uint64_t)result;
  return result;
}

id static XPCClient.shared.getter()
{
  if (qword_25424D4D0 != -1)
    swift_once();
  return (id)qword_25424D460;
}

unint64_t static XPCClient.daemonLaunchNotificationName.getter()
{
  return 0xD000000000000028;
}

id sub_233B43564()
{
  void *v0;
  objc_class *ObjectType;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  id v7;
  objc_super v9;

  ObjectType = (objc_class *)swift_getObjectType();
  v2 = v0;
  sub_233B57E34();
  v3 = OBJC_IVAR____TtC22ManagedAppDistribution9XPCClient_lockedStorage;
  v4 = MEMORY[0x24BEE4AF8];
  v5 = sub_233B02DD8(MEMORY[0x24BEE4AF8]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25424D528);
  v6 = swift_allocObject();
  *(_DWORD *)(v6 + 104) = 0;
  *(_QWORD *)(v6 + 16) = 0;
  *(_BYTE *)(v6 + 24) = 1;
  *(_QWORD *)(v6 + 32) = MEMORY[0x24BEE4B08];
  *(_QWORD *)(v6 + 40) = v4;
  *(_QWORD *)(v6 + 48) = v4;
  *(_QWORD *)(v6 + 56) = 0;
  *(_BYTE *)(v6 + 64) = -1;
  *(_QWORD *)(v6 + 72) = MEMORY[0x24BEE4B00];
  *(_QWORD *)(v6 + 80) = v5;
  *(_QWORD *)(v6 + 88) = 0;
  *(_QWORD *)(v6 + 96) = 0;
  *(_QWORD *)&v2[v3] = v6;

  v9.receiver = v2;
  v9.super_class = ObjectType;
  v7 = objc_msgSendSuper2(&v9, sel_init);
  sub_233B43AC0(0xD000000000000028, 0x8000000233B61BF0, v7);

  return v7;
}

void sub_233B4367C(const char *a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  NSObject *v8;
  uint64_t v9;
  void *v10;
  id v11;
  uint32_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  _QWORD aBlock[6];
  int out_token;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v4 = sub_233B57ED0();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  out_token = -1;
  sub_233B4D02C();
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, *MEMORY[0x24BEE5498], v4);
  v8 = sub_233B581DC();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = a2;
  aBlock[4] = sub_233B4D08C;
  aBlock[5] = v9;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_233B43A84;
  aBlock[3] = &block_descriptor_14;
  v10 = _Block_copy(aBlock);
  v11 = a2;
  swift_release();
  v12 = notify_register_dispatch(a1, &out_token, v8, v10);
  _Block_release(v10);

  if (v12)
  {
    if (qword_25424D3D0 != -1)
      swift_once();
    v13 = sub_233B57EC4();
    __swift_project_value_buffer(v13, (uint64_t)qword_25424D3B8);
    v14 = sub_233B57EAC();
    v15 = sub_233B581C4();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v16 = 67109120;
      LODWORD(aBlock[0]) = v12;
      sub_233B581F4();
      _os_log_impl(&dword_233B00000, v14, v15, "Failed to register for daemon launch notifications with status code %u", v16, 8u);
      MEMORY[0x23493D4CC](v16, -1, -1);
    }

  }
}

void sub_233B438DC()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  os_unfair_lock_s *v5;
  uint64_t v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  _QWORD *v10;
  char *v11;
  uint64_t v12;
  NSObject *v13;

  v1 = __swift_instantiateConcreteTypeFromMangledName(qword_25424D3D8);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v12 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = *(_QWORD *)&v0[OBJC_IVAR____TtC22ManagedAppDistribution9XPCClient_lockedStorage];
  v5 = (os_unfair_lock_s *)(v4 + 104);
  os_unfair_lock_lock((os_unfair_lock_t)(v4 + 104));
  LOBYTE(v4) = *(_BYTE *)(v4 + 24);
  os_unfair_lock_unlock(v5);
  if ((v4 & 1) != 0)
  {
    if (qword_25424D3D0 != -1)
      swift_once();
    v6 = sub_233B57EC4();
    __swift_project_value_buffer(v6, (uint64_t)qword_25424D3B8);
    v13 = sub_233B57EAC();
    v7 = sub_233B581AC();
    if (os_log_type_enabled(v13, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v8 = 0;
      _os_log_impl(&dword_233B00000, v13, v7, "Not keeping track of daemon instance identifier yet; no need to update it.",
        v8,
        2u);
      MEMORY[0x23493D4CC](v8, -1, -1);
    }

  }
  else
  {
    v9 = sub_233B580F8();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v3, 1, 1, v9);
    v10 = (_QWORD *)swift_allocObject();
    v10[2] = 0;
    v10[3] = 0;
    v10[4] = v0;
    v11 = v0;
    sub_233B4799C((uint64_t)v3, (uint64_t)&unk_2561142B0, (uint64_t)v10);
    swift_release();
  }
}

uint64_t sub_233B43A84(uint64_t a1, uint64_t a2)
{
  void (*v3)(uint64_t);

  v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v3(a2);
  return swift_release();
}

void sub_233B43AC0(uint64_t a1, uint64_t a2, void *a3)
{
  const char *v4;
  _QWORD v5[2];

  if ((a2 & 0x1000000000000000) != 0 || !(a2 & 0x2000000000000000 | a1 & 0x1000000000000000))
  {
    sub_233B58290();
LABEL_7:

    return;
  }
  if ((a2 & 0x2000000000000000) == 0)
  {
    if ((a1 & 0x1000000000000000) != 0)
      v4 = (const char *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
    else
      v4 = (const char *)sub_233B582E4();
    sub_233B4367C(v4, a3);
    goto LABEL_7;
  }
  v5[0] = a1;
  v5[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  sub_233B4367C((const char *)v5, a3);

}

uint64_t sub_233B43BD0(uint64_t result)
{
  uint64_t v1;
  _QWORD *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = result;
  v2 = (_QWORD *)(result + 24);
  v3 = *(_QWORD *)(result + 24);
  if (v3 >> 62)
  {
    swift_bridgeObjectRetain();
    v6 = sub_233B58320();
    result = swift_bridgeObjectRelease();
    if (v6)
      return result;
  }
  else if (*(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    return result;
  }
  v4 = swift_retain();
  MEMORY[0x23493CA28](v4);
  if (*(_QWORD *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    sub_233B5808C();
  sub_233B58098();
  sub_233B58080();
  v5 = sub_233B4D4FC((uint64_t)&unk_2504DB260);
  swift_arrayDestroy();
  sub_233B43CEC(v5, 0, v1);
  return swift_bridgeObjectRelease();
}

uint64_t sub_233B43CEC(uint64_t a1, char a2, uint64_t a3)
{
  void *v3;
  void *v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  char *v17;
  char v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  _QWORD v28[3];
  void *v29;
  uint64_t v30;
  uint64_t v31;

  v4 = v3;
  v8 = __swift_instantiateConcreteTypeFromMangledName(qword_25424D3D8);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) == 0)
  {
    v11 = *(_QWORD *)(a3 + 16);
    if (*(_QWORD *)(v11 + 16) <= *(_QWORD *)(a1 + 16) >> 3)
    {
      v31 = a1;
      swift_bridgeObjectRetain();
      sub_233B4A284(v11);
      a1 = v31;
      if (*(_QWORD *)(v31 + 16))
        goto LABEL_6;
    }
    else
    {
      swift_bridgeObjectRetain();
      a1 = sub_233B4A450(v11, a1);
      if (*(_QWORD *)(a1 + 16))
        goto LABEL_6;
    }
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  if (!*(_QWORD *)(a1 + 16))
    return swift_bridgeObjectRelease();
LABEL_6:
  if (qword_25424D3D0 != -1)
    swift_once();
  v12 = sub_233B57EC4();
  __swift_project_value_buffer(v12, (uint64_t)qword_25424D3B8);
  swift_bridgeObjectRetain_n();
  v13 = sub_233B57EAC();
  v14 = sub_233B581AC();
  if (os_log_type_enabled(v13, v14))
  {
    v28[2] = a3;
    v15 = (uint8_t *)swift_slowAlloc();
    v16 = swift_slowAlloc();
    v31 = v16;
    *(_DWORD *)v15 = 136446210;
    v28[1] = v15 + 4;
    sub_233B4D25C();
    v17 = v10;
    v18 = a2;
    swift_bridgeObjectRetain();
    v19 = sub_233B5817C();
    v29 = v4;
    v21 = v20;
    swift_bridgeObjectRelease();
    v22 = v19;
    a2 = v18;
    v10 = v17;
    v30 = sub_233B483EC(v22, v21, &v31);
    sub_233B581F4();
    swift_bridgeObjectRelease_n();
    v4 = v29;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_233B00000, v13, v14, "Registering for messages: %{public}s", v15, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x23493D4CC](v16, -1, -1);
    MEMORY[0x23493D4CC](v15, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  v23 = swift_bridgeObjectRetain();
  sub_233B46E90(v23);
  v24 = sub_233B580F8();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v10, 1, 1, v24);
  v25 = swift_allocObject();
  *(_QWORD *)(v25 + 16) = 0;
  *(_QWORD *)(v25 + 24) = 0;
  *(_QWORD *)(v25 + 32) = a1;
  *(_QWORD *)(v25 + 40) = v4;
  *(_BYTE *)(v25 + 48) = a2 & 1;
  v26 = v4;
  sub_233B4799C((uint64_t)v10, (uint64_t)&unk_2561142D0, v25);
  return swift_release();
}

uint64_t sub_233B44030(uint64_t a1, uint64_t a2)
{
  unint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t result;
  unint64_t v9;
  uint64_t v10;

  v4 = (unint64_t *)(a1 + 24);
  swift_retain();
  v5 = sub_233B4D8E8(v4, a2);
  swift_release();
  v6 = *(_QWORD *)(a1 + 24);
  if (!(v6 >> 62))
  {
    v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v7 >= v5)
      goto LABEL_3;
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  swift_bridgeObjectRetain();
  v7 = sub_233B58320();
  swift_bridgeObjectRelease();
  if (v7 < v5)
    goto LABEL_8;
LABEL_3:
  result = sub_233B4DCEC(v5, v7, &qword_256113A28);
  v9 = *v4;
  if (!(v9 >> 62))
  {
    if (*(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10))
      return result;
    goto LABEL_5;
  }
LABEL_9:
  swift_bridgeObjectRetain();
  v10 = sub_233B58320();
  result = swift_bridgeObjectRelease();
  if (!v10)
  {
LABEL_5:
    sub_233B44170((uint64_t)&unk_2504DB298, a1);
    return swift_arrayDestroy();
  }
  return result;
}

void sub_233B44170(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  unsigned __int8 *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32[2];
  unsigned __int8 v33;
  _QWORD *v34;
  uint64_t *v35[2];

  v3 = v2;
  v6 = sub_233B57E40();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (uint64_t *)((char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = *(_QWORD *)(a1 + 16);
  if (v10)
  {
    v27 = (uint64_t *)((char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
    v28 = v7;
    v29 = v6;
    v30 = a2;
    v31 = v2;
    v11 = *(_QWORD *)(a2 + 16);
    swift_bridgeObjectRetain();
    v26 = a1;
    v12 = (unsigned __int8 *)(a1 + 48);
    v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
    do
    {
      v14 = *((_QWORD *)v12 - 2);
      v15 = *((_QWORD *)v12 - 1);
      v16 = *v12;
      sub_233B4D2A0(v14, v15, *v12);
      if ((sub_233B47AE8(v14, v15, v16, v11) & 1) != 0)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v13 = sub_233B0ADE8(0, v13[2] + 1, 1, v13);
        v18 = v13[2];
        v17 = v13[3];
        if (v18 >= v17 >> 1)
          v13 = sub_233B0ADE8((_QWORD *)(v17 > 1), v18 + 1, 1, v13);
        v13[2] = v18 + 1;
        v19 = &v13[3 * v18];
        v19[4] = v14;
        v19[5] = v15;
        *((_BYTE *)v19 + 48) = v16;
      }
      else
      {
        sub_233B4D2B8(v14, v15, v16);
      }
      v12 += 24;
      --v10;
    }
    while (v10);
    swift_bridgeObjectRelease();
    a2 = v30;
    v3 = v31;
    v7 = v28;
    v6 = v29;
    v9 = v27;
    if (v13[2])
      goto LABEL_12;
LABEL_16:
    swift_bridgeObjectRelease();
    return;
  }
  v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
  if (!*(_QWORD *)(MEMORY[0x24BEE4AF8] + 16))
    goto LABEL_16;
LABEL_12:
  if (qword_25424D4B0 != -1)
    swift_once();
  v34 = v13;
  v35[0] = (uint64_t *)&v34;
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v7 + 16))(v9, v3 + OBJC_IVAR____TtC22ManagedAppDistribution9XPCClient_id, v6);
  v35[1] = v9;
  swift_bridgeObjectRetain();
  v20 = sub_233B23708(v35, (void (*)(uint64_t, uint64_t, unint64_t, uint64_t (*)(uint64_t, unint64_t), uint64_t))sub_233B47E18, 0);
  (*(void (**)(uint64_t *, uint64_t))(v7 + 8))(v9, v6);
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(*(_QWORD *)(a2 + 16) + 16))
  {
    v21 = v13[2];
    if (v21)
    {
      swift_bridgeObjectRetain();
      v22 = (unsigned __int8 *)(v13 + 6);
      do
      {
        v23 = *((_QWORD *)v22 - 2);
        v24 = *((_QWORD *)v22 - 1);
        v25 = *v22;
        v22 += 24;
        sub_233B4D2A0(v23, v24, v25);
        sub_233B4BB10(v23, v24, v25, (uint64_t)v32);
        sub_233B4D37C(v32[0], v32[1], v33);
        sub_233B4D2B8(v23, v24, v25);
        --v21;
      }
      while (v21);
      swift_bridgeObjectRelease();
    }
  }
  swift_bridgeObjectRelease();
  sub_233B47754((uint64_t)v20, a2);
}

void XPCClient.registerAppCatalogHandler(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  os_unfair_lock_s *v5;
  uint64_t v6;
  os_unfair_lock_s *v7;

  v5 = *(os_unfair_lock_s **)(v2 + OBJC_IVAR____TtC22ManagedAppDistribution9XPCClient_lockedStorage);
  v6 = (uint64_t)&v5[4];
  v7 = v5 + 26;
  os_unfair_lock_lock(v5 + 26);
  sub_233B4472C(v6, a1, a2);
  os_unfair_lock_unlock(v7);
}

uint64_t sub_233B4472C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = *(_QWORD *)(a1 + 72);
  swift_retain();
  sub_233B4E354(v6);
  *(_QWORD *)(a1 + 72) = a2;
  *(_QWORD *)(a1 + 80) = a3;
  v7 = sub_233B4D4FC((uint64_t)&unk_2504DB2D0);
  swift_arrayDestroy();
  sub_233B43CEC(v7, 0, a1);
  return swift_bridgeObjectRelease();
}

uint64_t sub_233B447C8(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  int v9;
  uint64_t v10;
  uint64_t v11;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  uint64_t v18;
  char v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  os_log_t v36;
  uint64_t v37;
  char *v38;
  uint64_t inited;
  uint64_t v40;
  uint64_t result;
  uint64_t v42;
  os_log_t v43;
  unint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v48 = a6;
  v9 = a4 & 1;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_25424D4F0);
  v46 = *(_QWORD *)(v10 - 8);
  v47 = v10;
  MEMORY[0x24BDAC7A8](v10);
  v45 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_233B0486C(a2, a3, v9);
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v50 = *(_QWORD *)(a1 + 56);
  v13 = v50;
  *(_QWORD *)(a1 + 56) = 0x8000000000000000;
  v15 = sub_233B03618(a2, a3, v9);
  v16 = *(_QWORD *)(v13 + 16);
  v17 = (v14 & 1) == 0;
  v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
LABEL_24:
    sub_233B5808C();
    goto LABEL_10;
  }
  v19 = v14;
  if (*(_QWORD *)(v13 + 24) >= v18)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_233B49B84();
      v13 = v50;
    }
  }
  else
  {
    sub_233B490C4(v18, isUniquelyReferenced_nonNull_native);
    v13 = v50;
    v20 = sub_233B03618(a2, a3, v9);
    if ((v19 & 1) != (v21 & 1))
    {
      result = sub_233B58548();
      __break(1u);
      return result;
    }
    v15 = v20;
  }
  *(_QWORD *)(a1 + 56) = v13;
  v22 = swift_bridgeObjectRelease();
  v23 = *(_QWORD *)(a1 + 56);
  if ((v19 & 1) == 0)
  {
    sub_233B04B40(v15, a2, a3, v9, MEMORY[0x24BEE4AF8], *(_QWORD **)(a1 + 56));
    v22 = sub_233B0486C(a2, a3, v9);
  }
  v24 = (_QWORD *)(*(_QWORD *)(v23 + 56) + 8 * v15);
  MEMORY[0x23493CA28](v22);
  if (*(_QWORD *)((*v24 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*v24 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    goto LABEL_24;
LABEL_10:
  sub_233B58098();
  sub_233B58080();
  v25 = *(_QWORD *)(a1 + 64);
  if (*(_QWORD *)(v25 + 16) && (v26 = sub_233B03618(a2, a3, v9), (v27 & 1) != 0))
  {
    v28 = *(_QWORD *)(*(_QWORD *)(v25 + 56) + 8 * v26);
    sub_233B0487C(v28);
    sub_233B04B94(a2, a3, v9);
    if (qword_25424D3D0 != -1)
      swift_once();
    v29 = sub_233B57EC4();
    __swift_project_value_buffer(v29, (uint64_t)qword_25424D3B8);
    sub_233B0486C(a2, a3, v9);
    sub_233B0486C(a2, a3, v9);
    v30 = sub_233B57EAC();
    v31 = sub_233B581AC();
    if (os_log_type_enabled(v30, v31))
    {
      v43 = v30;
      v32 = (uint8_t *)swift_slowAlloc();
      v42 = swift_slowAlloc();
      v50 = v42;
      *(_DWORD *)v32 = 136446210;
      v44 = v28;
      if (v9)
      {
        swift_bridgeObjectRetain();
        v33 = a2;
        v34 = a3;
      }
      else
      {
        v49 = a2;
        sub_233B3DC24();
        v33 = sub_233B5820C();
        v34 = v35;
      }
      v49 = sub_233B483EC(v33, v34, &v50);
      sub_233B581F4();
      swift_bridgeObjectRelease();
      sub_233B04B94(a2, a3, v9);
      sub_233B04B94(a2, a3, v9);
      v36 = v43;
      _os_log_impl(&dword_233B00000, v43, v31, "Sending cached app state results to listener for %{public}s", v32, 0xCu);
      v37 = v42;
      swift_arrayDestroy();
      MEMORY[0x23493D4CC](v37, -1, -1);
      MEMORY[0x23493D4CC](v32, -1, -1);

      v28 = v44;
    }
    else
    {
      sub_233B04B94(a2, a3, v9);
      sub_233B04B94(a2, a3, v9);

    }
    v50 = v28;
    sub_233B0487C(v28);
    __swift_instantiateConcreteTypeFromMangledName(&qword_256113448);
    v38 = v45;
    sub_233B5811C();
    (*(void (**)(char *, uint64_t))(v46 + 8))(v38, v47);
    sub_233B1AF64(v28);
  }
  else
  {
    sub_233B04B94(a2, a3, v9);
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_25424D590);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_233B59630;
  *(_QWORD *)(inited + 32) = a2;
  *(_QWORD *)(inited + 40) = a3;
  *(_BYTE *)(inited + 48) = v9;
  sub_233B0486C(a2, a3, v9);
  v40 = sub_233B4D4FC(inited);
  swift_setDeallocating();
  swift_arrayDestroy();
  sub_233B43CEC(v40, 0, a1);
  return swift_bridgeObjectRelease();
}

unint64_t sub_233B44CC0(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v5;
  char v10;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  unint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t result;
  uint64_t inited;
  unint64_t v32;

  v10 = a4 & 1;
  swift_retain();
  sub_233B0486C(a2, a3, v10);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v32 = *(_QWORD *)(a1 + 56);
  v12 = v32;
  *(_QWORD *)(a1 + 56) = 0x8000000000000000;
  v14 = sub_233B03618(a2, a3, v10);
  v15 = *(_QWORD *)(v12 + 16);
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_21;
  }
  v18 = v13;
  if (*(_QWORD *)(v12 + 24) >= v17)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_233B49B84();
      v12 = v32;
    }
  }
  else
  {
    sub_233B490C4(v17, isUniquelyReferenced_nonNull_native);
    v12 = v32;
    v19 = sub_233B03618(a2, a3, v10);
    if ((v18 & 1) != (v20 & 1))
    {
      swift_release();
      result = sub_233B58548();
      __break(1u);
      return result;
    }
    v14 = v19;
  }
  *(_QWORD *)(a1 + 56) = v12;
  swift_bridgeObjectRelease();
  v21 = *(_QWORD *)(a1 + 56);
  if ((v18 & 1) == 0)
  {
    sub_233B04B40(v14, a2, a3, v10, MEMORY[0x24BEE4AF8], *(_QWORD **)(a1 + 56));
    sub_233B0486C(a2, a3, v10);
  }
  v22 = (unint64_t *)(*(_QWORD *)(v21 + 56) + 8 * v14);
  swift_retain();
  v5 = sub_233B4D8E8(v22, a5);
  swift_release();
  if (*v22 >> 62)
  {
LABEL_21:
    swift_bridgeObjectRetain();
    v23 = sub_233B58320();
    swift_bridgeObjectRelease();
    if (v23 >= v5)
      goto LABEL_11;
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v23 = *(_QWORD *)((*v22 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v23 < v5)
    goto LABEL_22;
LABEL_11:
  sub_233B4DCEC(v5, v23, &qword_256113450);
  sub_233B04B94(a2, a3, v10);
  swift_release();
  v24 = *(_QWORD *)(a1 + 56);
  v25 = *(_QWORD *)(v24 + 16);
  sub_233B0486C(a2, a3, v10);
  if (v25 && (v26 = sub_233B03618(a2, a3, v10), (v27 & 1) != 0))
  {
    v28 = *(_QWORD *)(*(_QWORD *)(v24 + 56) + 8 * v26);
    swift_bridgeObjectRetain();
  }
  else
  {
    v28 = MEMORY[0x24BEE4AF8];
  }
  sub_233B04B94(a2, a3, v10);
  if (!(v28 >> 62))
  {
    v29 = *(_QWORD *)((v28 & 0xFFFFFFFFFFFFF8) + 0x10);
    goto LABEL_17;
  }
LABEL_23:
  swift_bridgeObjectRetain();
  v29 = sub_233B58320();
  swift_bridgeObjectRelease();
LABEL_17:
  result = swift_bridgeObjectRelease();
  if (!v29)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_25424D590);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_233B59630;
    *(_QWORD *)(inited + 32) = a2;
    *(_QWORD *)(inited + 40) = a3;
    *(_BYTE *)(inited + 48) = v10;
    sub_233B0486C(a2, a3, v10);
    sub_233B44170(inited, a1);
    swift_setDeallocating();
    swift_arrayDestroy();
    sub_233B0486C(a2, a3, v10);
    sub_233B03C58(a2, a3, v10, &v32);
    sub_233B04B94(a2, a3, v10);
    return sub_233B4E448(v32);
  }
  return result;
}

uint64_t sub_233B45038(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint8_t *v17;
  uint8_t *v18;
  uint64_t v19;
  _QWORD v21[3];
  char v22;
  uint64_t v23;

  v23 = a3;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2561138F0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = swift_retain();
  MEMORY[0x23493CA28](v9);
  if (*(_QWORD *)((*(_QWORD *)(a1 + 32) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)(a1 + 32) & 0xFFFFFFFFFFFFFF8)
                                                                                     + 0x18) >> 1)
    sub_233B5808C();
  sub_233B58098();
  sub_233B58080();
  v10 = *(unsigned __int8 *)(a1 + 48);
  if (v10 != 255)
  {
    v21[1] = v3;
    v11 = *(_QWORD *)(a1 + 40);
    sub_233B4E43C(v11, v10 & 1);
    if (qword_25424D3D0 != -1)
      swift_once();
    v12 = sub_233B57EC4();
    __swift_project_value_buffer(v12, (uint64_t)qword_25424D3B8);
    v13 = sub_233B57EAC();
    v14 = sub_233B581AC();
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc();
      v21[0] = v6;
      v16 = v5;
      v17 = v15;
      *(_WORD *)v15 = 0;
      _os_log_impl(&dword_233B00000, v13, v14, "Sending cached app catalog results to listener", v15, 2u);
      v18 = v17;
      v5 = v16;
      v6 = v21[0];
      MEMORY[0x23493D4CC](v18, -1, -1);
    }

    v21[2] = v11;
    v22 = v10 & 1;
    sub_233B4E43C(v11, v10 & 1);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2561138F8);
    sub_233B5811C();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    sub_233B25350(v11, v10);
  }
  v19 = sub_233B4D4FC((uint64_t)&unk_2504DB308);
  swift_arrayDestroy();
  sub_233B43CEC(v19, 0, a1);
  return swift_bridgeObjectRelease();
}

uint64_t sub_233B45290(uint64_t a1, uint64_t a2)
{
  unint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t result;
  unint64_t v9;
  uint64_t v10;

  v4 = (unint64_t *)(a1 + 32);
  swift_retain();
  v5 = sub_233B4D8E8(v4, a2);
  swift_release();
  v6 = *(_QWORD *)(a1 + 32);
  if (!(v6 >> 62))
  {
    v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v7 >= v5)
      goto LABEL_3;
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  swift_bridgeObjectRetain();
  v7 = sub_233B58320();
  swift_bridgeObjectRelease();
  if (v7 < v5)
    goto LABEL_8;
LABEL_3:
  result = sub_233B4DCEC(v5, v7, &qword_256113900);
  v9 = *v4;
  if (!(v9 >> 62))
  {
    if (*(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10))
      return result;
    goto LABEL_5;
  }
LABEL_9:
  swift_bridgeObjectRetain();
  v10 = sub_233B58320();
  result = swift_bridgeObjectRelease();
  if (!v10)
  {
LABEL_5:
    sub_233B44170((uint64_t)&unk_2504DB340, a1);
    swift_arrayDestroy();
    result = sub_233B25350(*(_QWORD *)(a1 + 40), *(_BYTE *)(a1 + 48));
    *(_QWORD *)(a1 + 40) = 0;
    *(_BYTE *)(a1 + 48) = -1;
  }
  return result;
}

_QWORD *sub_233B453E8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  __int128 v7;
  os_unfair_lock_s *v8;
  uint64_t v9;
  os_unfair_lock_s *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *result;
  uint64_t v14;
  _QWORD v15[2];
  _OWORD v16[2];
  char v17;
  unint64_t v18;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_25424D4F0);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_OWORD *)(a1 + 16);
  v16[0] = *(_OWORD *)a1;
  v16[1] = v7;
  v17 = *(_BYTE *)(a1 + 32);
  v8 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____TtC22ManagedAppDistribution9XPCClient_lockedStorage);
  v9 = (uint64_t)&v8[4];
  v10 = v8 + 26;
  os_unfair_lock_lock(v8 + 26);
  sub_233B46528(v9, v16, &v18);
  os_unfair_lock_unlock(v10);
  v11 = v18;
  if (!(v18 >> 62))
  {
    v12 = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v12)
      goto LABEL_3;
    return (_QWORD *)swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  v12 = sub_233B58320();
  swift_bridgeObjectRelease();
  if (!v12)
    return (_QWORD *)swift_bridgeObjectRelease();
LABEL_3:
  result = sub_233B4D3F4(v16, &v18);
  if (v12 >= 1)
  {
    v14 = 0;
    do
    {
      if ((v11 & 0xC000000000000001) != 0)
        MEMORY[0x23493CC8C](v14, v11);
      else
        swift_retain();
      ++v14;
      sub_233B4D3F4(&v18, v15);
      sub_233B4D430(&v18);
      sub_233B4D430(&v18);
      __swift_instantiateConcreteTypeFromMangledName(&qword_256113448);
      sub_233B5811C();
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
      sub_233B4E3A0(&v18);
      swift_release();
    }
    while (v12 != v14);
    return (_QWORD *)swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t XPCClient.handleMessages(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  __int128 v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t *v30;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_25424D4F0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_25424D388);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = &v29;
  v26 = a1;
  v27 = a2;
  v28 = &v26;
  sub_233B13D4C(a1, a2);
  sub_233B42DF8(&v30);
  sub_233B13CD8(v26, v27);
  if (*(_QWORD *)(v29 + 16))
  {
    v17 = OBJC_IVAR____TtC22ManagedAppDistribution9XPCClient_lockedStorage;
    v18 = v29 + 32;
    v14 = xmmword_233B59630;
    v16 = v2;
    v22 = v5;
    v21 = v6;
    v20 = v8;
    v25 = v9;
    v24 = v10;
    v19 = v29;
    v23 = v12;
    if (*(_QWORD *)(v29 + 16))
      __asm { BR              X9 }
    __break(1u);
    JUMPOUT(0x233B45FACLL);
  }
  return swift_bridgeObjectRelease();
}

void sub_233B45FE0(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  void *v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  ValueWitnessTable *v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  char *v33;
  ValueWitnessTable *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  os_unfair_lock_s *v40;
  uint64_t v41;
  os_unfair_lock_s *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char v59;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2561138F0);
  v56 = *(_QWORD *)(v5 - 8);
  v57 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = type metadata accessor for ManagedApp();
  v8 = *(_QWORD *)(v53 - 8);
  v9 = MEMORY[0x24BDAC7A8](v53);
  v54 = (char *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v46 - v11;
  v13 = *a2;
  if (v13 == 6)
  {
    if (a1)
    {
      v14 = (void *)objc_opt_self();
      swift_bridgeObjectRetain();
      v15 = objc_msgSend(v14, sel_mainBundle);
      v16 = objc_msgSend(v15, sel_bundleIdentifier);

      if (v16)
      {
        v52 = v12;
        v17 = sub_233B57F78();
        v19 = v18;

        v13 = sub_233B4DFE8(a1, v17, v19);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v20 = *(_QWORD *)(v13 + 16);
        if (v20)
        {
          v47 = v2;
          v48 = 0;
          v21 = v13 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
          v22 = *(_QWORD *)(v8 + 72);
          swift_bridgeObjectRetain();
          v23 = &value witness table for ManagedAppDeclaration.InstallBehavior;
          *(_QWORD *)&v24 = 136446210;
          v50 = v24;
          v49 = MEMORY[0x24BEE4AD8] + 8;
          v25 = (uint64_t)v54;
          v26 = (uint64_t)v52;
          v51 = v22;
          do
          {
            sub_233B05134(v21, v26);
            if (v23[11].destroy != (void *)-1)
              swift_once();
            v27 = sub_233B57EC4();
            __swift_project_value_buffer(v27, (uint64_t)qword_25424D3B8);
            sub_233B05134(v26, v25);
            v28 = sub_233B57EAC();
            v29 = sub_233B581B8();
            if (os_log_type_enabled(v28, v29))
            {
              v30 = swift_slowAlloc();
              v31 = swift_slowAlloc();
              v58 = v31;
              *(_DWORD *)v30 = v50;
              v32 = (uint64_t *)(v25 + *(int *)(v53 + 44));
              v55 = v20;
              v33 = v7;
              v34 = v23;
              v36 = *v32;
              v35 = v32[1];
              swift_bridgeObjectRetain();
              v37 = v36;
              v23 = v34;
              v7 = v33;
              v20 = v55;
              *(_QWORD *)(v30 + 4) = sub_233B483EC(v37, v35, (uint64_t *)&v58);
              v25 = (uint64_t)v54;
              swift_bridgeObjectRelease();
              sub_233B05178(v25);
              _os_log_impl(&dword_233B00000, v28, v29, "Received App: %{public}s", (uint8_t *)v30, 0xCu);
              swift_arrayDestroy();
              v38 = v31;
              v22 = v51;
              MEMORY[0x23493D4CC](v38, -1, -1);
              v39 = v30;
              v26 = (uint64_t)v52;
              MEMORY[0x23493D4CC](v39, -1, -1);

            }
            else
            {

              sub_233B05178(v25);
            }
            sub_233B05178(v26);
            v21 += v22;
            --v20;
          }
          while (v20);
          swift_bridgeObjectRelease();
          v2 = v47;
        }
        LOBYTE(v16) = 0;
      }
      else
      {
        v13 = a1;
      }
    }
    else
    {
      v13 = 0;
      LOBYTE(v16) = 1;
    }
  }
  else
  {
    LOBYTE(v16) = 1;
  }
  v40 = *(os_unfair_lock_s **)(v2 + OBJC_IVAR____TtC22ManagedAppDistribution9XPCClient_lockedStorage);
  v41 = (uint64_t)&v40[4];
  v42 = v40 + 26;
  os_unfair_lock_lock(v40 + 26);
  sub_233B468D4(v41, v13, (char)v16, &v58);
  os_unfair_lock_unlock(v42);
  v43 = v58;
  if (!(v58 >> 62))
  {
    v44 = *(_QWORD *)((v58 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v44)
      goto LABEL_19;
LABEL_26:
    swift_bridgeObjectRelease();
    sub_233B149B4(v13, (char)v16);
    return;
  }
  swift_bridgeObjectRetain();
  v44 = sub_233B58320();
  swift_bridgeObjectRelease();
  if (!v44)
    goto LABEL_26;
LABEL_19:
  if (v44 >= 1)
  {
    v45 = 0;
    do
    {
      if ((v43 & 0xC000000000000001) != 0)
        MEMORY[0x23493CC8C](v45, v43);
      else
        swift_retain();
      ++v45;
      v58 = v13;
      v59 = (char)v16;
      sub_233B4E43C(v13, (char)v16);
      sub_233B4E43C(v13, (char)v16);
      __swift_instantiateConcreteTypeFromMangledName(&qword_2561138F8);
      sub_233B5811C();
      (*(void (**)(char *, uint64_t))(v56 + 8))(v7, v57);
      sub_233B149B4(v13, (char)v16);
      swift_release();
    }
    while (v44 != v45);
    goto LABEL_26;
  }
  __break(1u);
}

uint64_t sub_233B46528@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  char v17;
  unint64_t v18;
  char v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  uint64_t result;
  uint64_t v37;
  _QWORD *updated;
  uint64_t v40;
  _QWORD v41[4];
  _BYTE v42[32];
  unint64_t v43;

  sub_233B4D3B8((uint64_t)(a2 + 1), (uint64_t)v42);
  sub_233B4D3B8((uint64_t)v42, (uint64_t)v41);
  updated = AppStateUpdateIdentifier.appStateIdentifiers.getter();
  v5 = updated[2];
  if (!v5)
  {
LABEL_16:
    swift_bridgeObjectRelease();
    sub_233B4D3B8((uint64_t)v42, (uint64_t)v41);
    v25 = AppStateUpdateIdentifier.appStateIdentifiers.getter();
    v41[0] = MEMORY[0x24BEE4AF8];
    v26 = v25[2];
    if (v26)
    {
      v27 = *(_QWORD *)(a1 + 56);
      v28 = (char *)(swift_bridgeObjectRetain() + 48);
      v29 = MEMORY[0x24BEE4AF8];
      do
      {
        if (*(_QWORD *)(v27 + 16))
        {
          v30 = *((_QWORD *)v28 - 2);
          v31 = *((_QWORD *)v28 - 1);
          v32 = *v28;
          sub_233B0486C(v30, v31, *v28);
          sub_233B0486C(v30, v31, v32);
          v33 = sub_233B03618(v30, v31, v32);
          v34 = v29;
          if ((v35 & 1) != 0)
          {
            v34 = *(_QWORD *)(*(_QWORD *)(v27 + 56) + 8 * v33);
            swift_bridgeObjectRetain();
          }
          sub_233B04B94(v30, v31, v32);
          sub_233B04B94(v30, v31, v32);
        }
        else
        {
          v34 = v29;
        }
        v28 += 24;
        sub_233B4C974(v34);
        --v26;
      }
      while (v26);
      result = swift_bridgeObjectRelease_n();
      v37 = v41[0];
    }
    else
    {
      result = swift_bridgeObjectRelease();
      v37 = MEMORY[0x24BEE4AF8];
    }
    *a3 = v37;
    return result;
  }
  sub_233B4D3F4(a2, &v43);
  v6 = (char *)(updated + 6);
  v40 = a1;
  while (1)
  {
    v7 = *((_QWORD *)v6 - 2);
    v8 = *((_QWORD *)v6 - 1);
    v9 = *v6;
    sub_233B0486C(v7, v8, *v6);
    sub_233B4D430(&v43);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v41[0] = *(_QWORD *)(a1 + 64);
    v11 = v41[0];
    *(_QWORD *)(a1 + 64) = 0x8000000000000000;
    v13 = sub_233B03618(v7, v8, v9);
    v14 = *(_QWORD *)(v11 + 16);
    v15 = (v12 & 1) == 0;
    v16 = v14 + v15;
    if (__OFADD__(v14, v15))
      break;
    v17 = v12;
    if (*(_QWORD *)(v11 + 24) >= v16)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v20 = (_QWORD *)v41[0];
        if ((v12 & 1) != 0)
          goto LABEL_3;
      }
      else
      {
        sub_233B49D44();
        v20 = (_QWORD *)v41[0];
        if ((v17 & 1) != 0)
          goto LABEL_3;
      }
    }
    else
    {
      sub_233B49414(v16, isUniquelyReferenced_nonNull_native);
      v18 = sub_233B03618(v7, v8, v9);
      if ((v17 & 1) != (v19 & 1))
        goto LABEL_29;
      v13 = v18;
      v20 = (_QWORD *)v41[0];
      if ((v17 & 1) != 0)
      {
LABEL_3:
        sub_233B4D458(&v43, (unint64_t *)(v20[7] + 8 * v13));
        goto LABEL_4;
      }
    }
    v20[(v13 >> 6) + 8] |= 1 << v13;
    v21 = v20[6] + 24 * v13;
    *(_QWORD *)v21 = v7;
    *(_QWORD *)(v21 + 8) = v8;
    *(_BYTE *)(v21 + 16) = v9;
    sub_233B4D3F4(&v43, (_QWORD *)(v20[7] + 8 * v13));
    v22 = v20[2];
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (v23)
      goto LABEL_28;
    v20[2] = v24;
    sub_233B0486C(v7, v8, v9);
LABEL_4:
    v6 += 24;
    a1 = v40;
    *(_QWORD *)(v40 + 64) = v20;
    swift_bridgeObjectRelease();
    sub_233B04B94(v7, v8, v9);
    if (!--v5)
      goto LABEL_16;
  }
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  result = sub_233B58548();
  __break(1u);
  return result;
}

uint64_t sub_233B4685C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_233B4D4FC((uint64_t)&unk_2504DB378);
  swift_arrayDestroy();
  sub_233B43CEC(v2, 0, a1);
  return swift_bridgeObjectRelease();
}

uint64_t sub_233B468D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 v27;
  int v28;
  int v29;
  int64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  uint64_t v42;
  unsigned __int8 v43;
  uint64_t result;
  uint64_t v45;
  unsigned __int8 v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  BOOL v56;
  uint64_t v57;
  char v58;
  uint64_t v59;

  v53 = a2;
  v7 = a3 & 1;
  v8 = type metadata accessor for ManagedApp();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(unsigned __int8 *)(a1 + 48);
  v51 = a4;
  v52 = v4;
  v50 = a1;
  v54 = v7;
  if (v12 == 255)
  {
    if (v7)
    {
      v19 = 0;
      v25 = v53;
      v26 = v53;
      v27 = 1;
      LOBYTE(v28) = -1;
      LOBYTE(v29) = v54;
LABEL_40:
      sub_233B25350(v19, v28);
      sub_233B25350(v26, v27);
      goto LABEL_41;
    }
    v49 = v9;
    v19 = 0;
    v28 = 255;
  }
  else
  {
    v13 = *(_QWORD *)(a1 + 40);
    v49 = v9;
    if ((v12 & 1) != 0)
    {
      v19 = v13;
      if (v54)
      {
        v25 = v53;
        v26 = v53;
        LOBYTE(v28) = 1;
LABEL_21:
        v29 = v54;
        goto LABEL_33;
      }
      v28 = 1;
    }
    else
    {
      v14 = *(_QWORD *)(v13 + 16);
      if (v14)
      {
        v48 = v12;
        v15 = v13;
        sub_233B4E43C(v13, 0);
        v57 = MEMORY[0x24BEE4AF8];
        sub_233B49F04(0, v14, 0);
        v16 = *(unsigned __int8 *)(v9 + 80);
        v47 = v15;
        v17 = v15 + ((v16 + 32) & ~v16);
        v18 = *(_QWORD *)(v9 + 72);
        v19 = v57;
        v59 = v18;
        do
        {
          sub_233B05134(v17, (uint64_t)v11);
          v20 = *((_QWORD *)v11 + 2);
          v21 = *((_QWORD *)v11 + 3);
          swift_bridgeObjectRetain();
          sub_233B05178((uint64_t)v11);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_233B49F04(0, *(_QWORD *)(v19 + 16) + 1, 1);
            v18 = v59;
            v19 = v57;
          }
          v23 = *(_QWORD *)(v19 + 16);
          v22 = *(_QWORD *)(v19 + 24);
          if (v23 >= v22 >> 1)
          {
            sub_233B49F04(v22 > 1, v23 + 1, 1);
            v18 = v59;
            v19 = v57;
          }
          *(_QWORD *)(v19 + 16) = v23 + 1;
          v24 = v19 + 16 * v23;
          *(_QWORD *)(v24 + 32) = v20;
          *(_QWORD *)(v24 + 40) = v21;
          v17 += v18;
          --v14;
        }
        while (v14);
        sub_233B25350(v47, v48);
        if (v54)
        {
          LOBYTE(v28) = 0;
          v25 = v53;
          v26 = v53;
          goto LABEL_21;
        }
        v28 = 0;
        v12 = v48;
      }
      else
      {
        if (v54)
        {
          LOBYTE(v28) = 0;
          v25 = v53;
          v26 = v53;
          v19 = MEMORY[0x24BEE4AF8];
          goto LABEL_21;
        }
        v28 = 0;
        v19 = MEMORY[0x24BEE4AF8];
      }
    }
  }
  v25 = v53;
  v30 = *(_QWORD *)(v53 + 16);
  v26 = MEMORY[0x24BEE4AF8];
  if (v30)
  {
    LODWORD(v47) = v28;
    v48 = v12;
    v57 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    sub_233B49F04(0, v30, 0);
    v31 = v25 + ((*(unsigned __int8 *)(v49 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v49 + 80));
    v59 = *(_QWORD *)(v49 + 72);
    v26 = v57;
    do
    {
      sub_233B05134(v31, (uint64_t)v11);
      v32 = *((_QWORD *)v11 + 2);
      v33 = *((_QWORD *)v11 + 3);
      swift_bridgeObjectRetain();
      sub_233B05178((uint64_t)v11);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_233B49F04(0, *(_QWORD *)(v26 + 16) + 1, 1);
        v26 = v57;
      }
      v35 = *(_QWORD *)(v26 + 16);
      v34 = *(_QWORD *)(v26 + 24);
      if (v35 >= v34 >> 1)
      {
        sub_233B49F04(v34 > 1, v35 + 1, 1);
        v26 = v57;
      }
      *(_QWORD *)(v26 + 16) = v35 + 1;
      v36 = v26 + 16 * v35;
      *(_QWORD *)(v36 + 32) = v32;
      *(_QWORD *)(v36 + 40) = v33;
      v31 += v59;
      --v30;
    }
    while (v30);
    v25 = v53;
    sub_233B149B4(v53, 0);
    v12 = v48;
    LOBYTE(v28) = v47;
  }
  v29 = v54;
  if (v12 == 255)
  {
    v27 = 0;
    a4 = v51;
    a1 = v50;
    goto LABEL_40;
  }
LABEL_33:
  v57 = v19;
  v58 = v28;
  v55 = v26;
  v56 = v29 != 0;
  sub_233B4E43C(v19, v28 & 1);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25424CF18);
  sub_233B4E1E0();
  sub_233B36618();
  sub_233B13A30();
  v37 = sub_233B585D8();
  sub_233B149B4(v26, v29);
  sub_233B149B4(v57, v58);
  sub_233B25350(v19, v28);
  a4 = v51;
  a1 = v50;
  if ((v37 & 1) == 0)
  {
LABEL_41:
    v45 = *(_QWORD *)(a1 + 40);
    v46 = *(_BYTE *)(a1 + 48);
    sub_233B4E43C(v25, v29);
    sub_233B25350(v45, v46);
    *(_QWORD *)(a1 + 40) = v25;
    *(_BYTE *)(a1 + 48) = v29;
    *a4 = *(_QWORD *)(a1 + 32);
    return swift_bridgeObjectRetain();
  }
  if (qword_25424D3D0 != -1)
    swift_once();
  v38 = sub_233B57EC4();
  __swift_project_value_buffer(v38, (uint64_t)qword_25424D3B8);
  v39 = sub_233B57EAC();
  v40 = sub_233B581D0();
  if (os_log_type_enabled(v39, v40))
  {
    v41 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v41 = 0;
    _os_log_impl(&dword_233B00000, v39, v40, "Deduplicating app catalog results", v41, 2u);
    MEMORY[0x23493D4CC](v41, -1, -1);
  }

  v42 = *(_QWORD *)(a1 + 40);
  v43 = *(_BYTE *)(a1 + 48);
  sub_233B4E43C(v25, v29);
  result = sub_233B25350(v42, v43);
  *(_QWORD *)(a1 + 40) = v25;
  *(_BYTE *)(a1 + 48) = v29;
  *a4 = MEMORY[0x24BEE4AF8];
  return result;
}

uint64_t sub_233B46E20@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD *);

  v3 = *(_QWORD *)(a1 + 72);
  v4 = *(_QWORD *)(a1 + 80);
  if (v3)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = sub_233B4E24C;
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  *a2 = v6;
  a2[1] = v5;
  return sub_233B4E23C(v3);
}

uint64_t sub_233B46E90(uint64_t result)
{
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17[2];
  unsigned __int8 v18;

  v1 = result;
  v2 = 0;
  v3 = result + 56;
  v4 = 1 << *(_BYTE *)(result + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(result + 56);
  v7 = (unint64_t)(v4 + 63) >> 6;
  while (1)
  {
    if (v6)
    {
      v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v9 = v8 | (v2 << 6);
      goto LABEL_5;
    }
    v14 = v2 + 1;
    if (__OFADD__(v2, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v14 >= v7)
      return swift_release();
    v15 = *(_QWORD *)(v3 + 8 * v14);
    ++v2;
    if (!v15)
    {
      v2 = v14 + 1;
      if (v14 + 1 >= v7)
        return swift_release();
      v15 = *(_QWORD *)(v3 + 8 * v2);
      if (!v15)
      {
        v2 = v14 + 2;
        if (v14 + 2 >= v7)
          return swift_release();
        v15 = *(_QWORD *)(v3 + 8 * v2);
        if (!v15)
        {
          v2 = v14 + 3;
          if (v14 + 3 >= v7)
            return swift_release();
          v15 = *(_QWORD *)(v3 + 8 * v2);
          if (!v15)
            break;
        }
      }
    }
LABEL_22:
    v6 = (v15 - 1) & v15;
    v9 = __clz(__rbit64(v15)) + (v2 << 6);
LABEL_5:
    v10 = *(_QWORD *)(v1 + 48) + 24 * v9;
    v11 = *(_QWORD *)v10;
    v12 = *(_QWORD *)(v10 + 8);
    v13 = *(_BYTE *)(v10 + 16);
    sub_233B4D2A0(*(_QWORD *)v10, v12, v13);
    sub_233B4AAC4((uint64_t)v17, v11, v12, v13);
    result = sub_233B4D2B8(v17[0], v17[1], v18);
  }
  v16 = v14 + 4;
  if (v16 >= v7)
    return swift_release();
  v15 = *(_QWORD *)(v3 + 8 * v16);
  if (v15)
  {
    v2 = v16;
    goto LABEL_22;
  }
  while (1)
  {
    v2 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v2 >= v7)
      return swift_release();
    v15 = *(_QWORD *)(v3 + 8 * v2);
    ++v16;
    if (v15)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_233B4701C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_BYTE *)(v6 + 176) = a6;
  *(_QWORD *)(v6 + 88) = a4;
  *(_QWORD *)(v6 + 96) = a5;
  v7 = sub_233B57D14();
  *(_QWORD *)(v6 + 104) = v7;
  *(_QWORD *)(v6 + 112) = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v6 + 120) = swift_task_alloc();
  v8 = sub_233B57E40();
  *(_QWORD *)(v6 + 128) = v8;
  *(_QWORD *)(v6 + 136) = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v6 + 144) = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_233B470A8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  char *v7;

  if (qword_25424D4B0 != -1)
    swift_once();
  v1 = v0[17];
  v2 = v0[18];
  v3 = v0[16];
  v4 = v0[12];
  v0[7] = v0[11];
  v0[5] = v0 + 7;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 16))(v2, v4 + OBJC_IVAR____TtC22ManagedAppDistribution9XPCClient_id, v3);
  v0[6] = v2;
  v7 = (char *)&dword_256112EA0 + dword_256112EA0;
  swift_bridgeObjectRetain();
  v5 = (_QWORD *)swift_task_alloc();
  v0[19] = v5;
  *v5 = v0;
  v5[1] = sub_233B47190;
  return ((uint64_t (*)(_QWORD *, void (*)(void *, uint64_t, uint64_t, uint64_t, uint64_t), _QWORD))v7)(v0 + 5, sub_233B47740, 0);
}

uint64_t sub_233B47190(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD **)v2;
  *(_QWORD *)(*(_QWORD *)v2 + 160) = v1;
  swift_task_dealloc();
  if (!v1)
  {
    v6 = v4[17];
    v5 = v4[18];
    v7 = v4[16];
    v4[21] = a1;
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
    swift_bridgeObjectRelease();
  }
  return swift_task_switch();
}

uint64_t sub_233B4721C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  os_unfair_lock_s *v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 168);
  v2 = *(_QWORD *)(v0 + 96);
  v3 = *(os_unfair_lock_s **)(v2 + OBJC_IVAR____TtC22ManagedAppDistribution9XPCClient_lockedStorage);
  v4 = swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v2;
  *(_QWORD *)(v4 + 24) = v1;
  os_unfair_lock_lock(v3 + 26);
  sub_233B47754(*(_QWORD *)(v4 + 24), (uint64_t)&v3[4]);
  os_unfair_lock_unlock(v3 + 26);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_233B472BC()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  id v6;
  char v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  os_unfair_lock_s *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  id v18;
  id v19;
  NSObject *v20;
  os_log_type_t v21;
  _BOOL4 v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  void *v31;
  uint64_t v32;
  os_unfair_lock_s *v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;

  v1 = *(void **)(v0 + 160);
  v2 = *(_QWORD *)(v0 + 120);
  v3 = *(_QWORD *)(v0 + 104);
  v4 = *(_QWORD *)(v0 + 112);
  v5 = *(_BYTE *)(v0 + 176);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 136) + 8))(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 128));
  swift_bridgeObjectRelease();
  v6 = v1;
  sub_233B57D08();
  sub_233B4D2D0();
  v7 = sub_233B57D44();

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  if ((v7 & 1) == 0 || (v5 & 1) != 0)
  {
    if (qword_25424D3D0 != -1)
      swift_once();
    v16 = *(void **)(v0 + 160);
    v17 = sub_233B57EC4();
    __swift_project_value_buffer(v17, (uint64_t)qword_25424D3B8);
    swift_bridgeObjectRetain();
    v18 = v16;
    swift_bridgeObjectRetain();
    v19 = v16;
    v20 = sub_233B57EAC();
    v21 = sub_233B581C4();
    v22 = os_log_type_enabled(v20, v21);
    v23 = *(void **)(v0 + 160);
    if (v22)
    {
      v24 = swift_slowAlloc();
      v36 = swift_slowAlloc();
      v37 = v36;
      *(_DWORD *)v24 = 136446466;
      sub_233B4D25C();
      v25 = sub_233B5817C();
      *(_QWORD *)(v0 + 64) = sub_233B483EC(v25, v26, &v37);
      sub_233B581F4();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v24 + 12) = 2082;
      swift_getErrorValue();
      v27 = *(_QWORD *)(*(_QWORD *)(v0 + 24) - 8);
      swift_task_alloc();
      (*(void (**)(void))(v27 + 16))();
      v28 = sub_233B57FC0();
      v30 = v29;
      swift_task_dealloc();
      *(_QWORD *)(v0 + 80) = sub_233B483EC(v28, v30, &v37);
      sub_233B581F4();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_233B00000, v20, v21, "Error registering for message: %{public}s: %{public}s", (uint8_t *)v24, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x23493D4CC](v36, -1, -1);
      MEMORY[0x23493D4CC](v24, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();

    }
    v31 = *(void **)(v0 + 160);
    v32 = *(_QWORD *)(v0 + 88);
    v33 = *(os_unfair_lock_s **)(*(_QWORD *)(v0 + 96) + OBJC_IVAR____TtC22ManagedAppDistribution9XPCClient_lockedStorage);
    v34 = swift_task_alloc();
    *(_QWORD *)(v34 + 16) = v32;
    os_unfair_lock_lock(v33 + 26);
    sub_233B4A284(*(_QWORD *)(v34 + 16));
    os_unfair_lock_unlock(v33 + 26);

  }
  else
  {

    if (qword_25424D3D0 != -1)
      swift_once();
    v8 = sub_233B57EC4();
    __swift_project_value_buffer(v8, (uint64_t)qword_25424D3B8);
    v9 = sub_233B57EAC();
    v10 = sub_233B581D0();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v11 = 0;
      _os_log_impl(&dword_233B00000, v9, v10, "Re-registering for messages; interrupted the first time", v11, 2u);
      MEMORY[0x23493D4CC](v11, -1, -1);
    }
    v13 = *(_QWORD *)(v0 + 88);
    v12 = *(_QWORD *)(v0 + 96);

    v14 = *(os_unfair_lock_s **)(v12 + OBJC_IVAR____TtC22ManagedAppDistribution9XPCClient_lockedStorage);
    v15 = swift_task_alloc();
    *(_QWORD *)(v15 + 16) = v12;
    *(_QWORD *)(v15 + 24) = v13;
    os_unfair_lock_lock(v14 + 26);
    sub_233B43CEC(*(_QWORD *)(v15 + 24), 1, (uint64_t)&v14[4]);
    os_unfair_lock_unlock(v14 + 26);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_233B47740(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_233B47E2C(a1, a2, a3, a4, a5, (uint64_t)&block_descriptor_21, (SEL *)&selRef_addMessageRegistrations_reply_);
}

void sub_233B47754(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;

  if (*(_QWORD *)(*(_QWORD *)(a2 + 16) + 16))
  {
    v3 = *(_QWORD *)a2;
    v4 = *(_BYTE *)(a2 + 8);
    *(_QWORD *)a2 = a1;
    *(_BYTE *)(a2 + 8) = 0;
    if ((v4 & 1) != 0 || v3 != a1)
    {
      if (qword_25424D3D0 != -1)
        swift_once();
      v5 = sub_233B57EC4();
      __swift_project_value_buffer(v5, (uint64_t)qword_25424D3B8);
      v6 = sub_233B57EAC();
      v7 = sub_233B581D0();
      if (os_log_type_enabled(v6, v7))
      {
        v8 = swift_slowAlloc();
        *(_DWORD *)v8 = 134218240;
        sub_233B581F4();
        *(_WORD *)(v8 + 12) = 2048;
        sub_233B581F4();
        _os_log_impl(&dword_233B00000, v6, v7, "Re-registering for messages as last known daemon identifier changed: %llu -> %llu", (uint8_t *)v8, 0x16u);
        MEMORY[0x23493D4CC](v8, -1, -1);
      }

      v9 = swift_bridgeObjectRetain();
      sub_233B43CEC(v9, 1, a2);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    if (qword_25424D3D0 != -1)
      swift_once();
    v10 = sub_233B57EC4();
    __swift_project_value_buffer(v10, (uint64_t)qword_25424D3B8);
    v11 = sub_233B57EAC();
    v12 = sub_233B581D0();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v13 = 0;
      _os_log_impl(&dword_233B00000, v11, v12, "Not registered for any messages; resetting last known daemon instance identifier",
        v13,
        2u);
      MEMORY[0x23493D4CC](v13, -1, -1);
    }

    *(_QWORD *)a2 = 0;
    *(_BYTE *)(a2 + 8) = 1;
  }
}

uint64_t sub_233B4799C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = sub_233B580F8();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    sub_233B580EC();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(_QWORD *)(a3 + 16))
      goto LABEL_5;
    goto LABEL_3;
  }
  sub_233B08348(a1, qword_25424D3D8);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_233B580B0();
    swift_unknownObjectRelease();
  }
LABEL_5:
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a2;
  *(_QWORD *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t sub_233B47AE8(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 v20;
  char v21;

  if (!*(_QWORD *)(a4 + 16))
    return 0;
  sub_233B58590();
  if (a3 == 253 || a3 == 254 || a3 == 255)
  {
    sub_233B5859C();
  }
  else
  {
    sub_233B5859C();
    sub_233B5859C();
    if ((a3 & 1) != 0)
      sub_233B57FCC();
    else
      sub_233B585B4();
  }
  v8 = sub_233B585C0();
  v9 = -1 << *(_BYTE *)(a4 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(a4 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
    return 0;
  v11 = ~v9;
  while (1)
  {
    v12 = *(_QWORD *)(a4 + 48) + 24 * v10;
    v13 = *(_QWORD *)v12;
    v14 = *(_QWORD *)(v12 + 8);
    v15 = *(unsigned __int8 *)(v12 + 16);
    switch(v15)
    {
      case 253:
        if (a3 == 253)
        {
          a3 = -3;
          v18 = *(_QWORD *)v12;
          v19 = *(_QWORD *)(v12 + 8);
          v20 = -3;
          goto LABEL_36;
        }
        goto LABEL_23;
      case 254:
        if (a3 == 254)
        {
          a3 = -2;
          v18 = *(_QWORD *)v12;
          v19 = *(_QWORD *)(v12 + 8);
          v20 = -2;
          goto LABEL_36;
        }
        goto LABEL_23;
      case 255:
        if (a3 == 0xFF)
        {
          a3 = -1;
          v18 = *(_QWORD *)v12;
          v19 = *(_QWORD *)(v12 + 8);
          v20 = -1;
          goto LABEL_36;
        }
LABEL_23:
        sub_233B4D2A0(v13, v14, v15);
        sub_233B4D2A0(a1, a2, a3);
        sub_233B4D2B8(v13, v14, v15);
        sub_233B4D2B8(a1, a2, a3);
        goto LABEL_24;
    }
    if (a3 > 0xFCu)
      goto LABEL_23;
    if ((v15 & 1) != 0)
      break;
    sub_233B4D2A0(v13, v14, v15);
    sub_233B4D2A0(a1, a2, a3);
    sub_233B4D2B8(v13, v14, v15);
    sub_233B4D2B8(a1, a2, a3);
    if ((a3 & 1) == 0 && v13 == a1)
      return 1;
LABEL_24:
    v10 = (v10 + 1) & v11;
    if (((*(_QWORD *)(a4 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
      return 0;
  }
  if ((a3 & 1) == 0)
    goto LABEL_23;
  if (v13 != a1 || v14 != a2)
  {
    v21 = sub_233B584D0();
    sub_233B4D2A0(v13, v14, v15);
    sub_233B4D2A0(a1, a2, a3);
    sub_233B4D2B8(v13, v14, v15);
    sub_233B4D2B8(a1, a2, a3);
    if ((v21 & 1) != 0)
      return 1;
    goto LABEL_24;
  }
  sub_233B4D2A0(a1, a2, v15);
  sub_233B4D2A0(a1, a2, a3);
  v18 = a1;
  v19 = a2;
  v20 = v15;
LABEL_36:
  sub_233B4D2B8(v18, v19, v20);
  sub_233B4D2B8(a1, a2, a3);
  return 1;
}

void sub_233B47E18(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_233B47E2C(a1, a2, a3, a4, a5, (uint64_t)&block_descriptor_44, (SEL *)&selRef_removeMessageRegistrations_reply_);
}

void sub_233B47E2C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, SEL *a7)
{
  void *v12;
  void *v13;
  _QWORD v14[6];

  v12 = (void *)sub_233B57E04();
  v14[4] = a4;
  v14[5] = a5;
  v14[0] = MEMORY[0x24BDAC760];
  v14[1] = 1107296256;
  v14[2] = sub_233B42240;
  v14[3] = a6;
  v13 = _Block_copy(v14);
  swift_retain();
  swift_release();
  objc_msgSend(a1, *a7, v12, v13);
  _Block_release(v13);

}

uint64_t sub_233B47EE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 24) = a4;
  return swift_task_switch();
}

uint64_t sub_233B47F00()
{
  uint64_t v0;
  _QWORD *v1;
  char *v3;

  if (qword_25424D4B0 != -1)
    swift_once();
  v3 = (char *)&dword_256112EA8 + dword_256112EA8;
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 32) = v1;
  *v1 = v0;
  v1[1] = sub_233B47FA0;
  return ((uint64_t (*)(uint64_t, void (*)(void *, uint64_t, uint64_t, uint64_t, uint64_t), _QWORD))v3)(v0 + 16, sub_233B48268, 0);
}

uint64_t sub_233B47FA0(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 40) = v1;
  swift_task_dealloc();
  if (!v1)
    *(_QWORD *)(v4 + 48) = a1;
  return swift_task_switch();
}

uint64_t sub_233B48014()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  os_unfair_lock_s *v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 24);
  v3 = *(os_unfair_lock_s **)(v2 + OBJC_IVAR____TtC22ManagedAppDistribution9XPCClient_lockedStorage);
  v4 = swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v2;
  *(_QWORD *)(v4 + 24) = v1;
  os_unfair_lock_lock(v3 + 26);
  sub_233B47754(*(_QWORD *)(v4 + 24), (uint64_t)&v3[4]);
  os_unfair_lock_unlock(v3 + 26);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_233B4809C()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  BOOL v7;
  void *v8;
  uint8_t *v9;
  _QWORD *v10;
  id v11;
  uint64_t v12;

  if (qword_25424D3D0 != -1)
    swift_once();
  v1 = *(void **)(v0 + 40);
  v2 = sub_233B57EC4();
  __swift_project_value_buffer(v2, (uint64_t)qword_25424D3B8);
  v3 = v1;
  v4 = v1;
  v5 = sub_233B57EAC();
  v6 = sub_233B581C4();
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(void **)(v0 + 40);
  if (v7)
  {
    v9 = (uint8_t *)swift_slowAlloc();
    v10 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v9 = 138543362;
    v11 = v8;
    v12 = _swift_stdlib_bridgeErrorToNSError();
    *(_QWORD *)(v0 + 16) = v12;
    sub_233B581F4();
    *v10 = v12;

    _os_log_impl(&dword_233B00000, v5, v6, "Failed to retrieve daemon instance identifier: %{public}@", v9, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&qword_25424D288);
    swift_arrayDestroy();
    MEMORY[0x23493D4CC](v10, -1, -1);
    MEMORY[0x23493D4CC](v9, -1, -1);

  }
  else
  {

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_233B48268(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v6;
  _QWORD v7[6];

  v7[4] = a4;
  v7[5] = a5;
  v7[0] = MEMORY[0x24BDAC760];
  v7[1] = 1107296256;
  v7[2] = sub_233B42240;
  v7[3] = &block_descriptor_24;
  v6 = _Block_copy(v7);
  swift_retain();
  swift_release();
  objc_msgSend(a1, sel_daemonInstanceIdentifierWithReply_, v6);
  _Block_release(v6);
}

id XPCClient.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_233B48388(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_233B2E908;
  return v6(a1);
}

uint64_t sub_233B483EC(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  uint64_t ObjectType;

  v6 = sub_233B484BC(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = swift_getObjectType();
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_233B03518((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = MEMORY[0x24BEE2520];
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_233B03518((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v12);
  return v7;
}

uint64_t sub_233B484BC(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            sub_233B58200();
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = sub_233B48674(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = sub_233B582E4();
  if (!v8)
  {
    sub_233B58308();
    __break(1u);
LABEL_17:
    result = sub_233B58350();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain();
}

uint64_t sub_233B48674(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = sub_233B48708(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_233B488E0(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = sub_233B488E0(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t sub_233B48708(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  uint64_t result;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (v2)
  {
    while (1)
    {
      v3 = sub_233B4887C(v2, 0);
      if (v2 < 0)
        break;
      v4 = v3;
      v5 = sub_233B582A8();
      if ((v6 & 1) != 0)
        goto LABEL_14;
      if (v5 == v2)
        return (uint64_t)v4;
      sub_233B58308();
      __break(1u);
LABEL_10:
      v2 = sub_233B57FE4();
      if (!v2)
        return MEMORY[0x24BEE4AF8];
    }
    sub_233B58350();
    __break(1u);
LABEL_14:
    result = sub_233B58308();
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4AF8];
  }
  return result;
}

_QWORD *sub_233B4887C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  size_t v5;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(&qword_25424D598);
  v4 = (_QWORD *)swift_allocObject();
  v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_233B488E0(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_25424D598);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8])
      memmove(v12, v13, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_233B58350();
  __break(1u);
  return result;
}

uint64_t sub_233B48A2C(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _OWORD v37[2];
  __int128 v38;
  __int128 v39;
  uint64_t v40;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256112BC8);
  v6 = sub_233B58338();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_41;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  v12 = v6 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v14 << 6);
      goto LABEL_22;
    }
    v21 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v21 >= v11)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v36 + 8 * v21);
    ++v14;
    if (!v23)
    {
      v14 = v21 + 1;
      if (v21 + 1 >= v11)
        goto LABEL_34;
      v23 = *(_QWORD *)(v36 + 8 * v14);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v11)
        {
LABEL_34:
          swift_release();
          if ((a2 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v23 = *(_QWORD *)(v36 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v14 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_43;
            if (v14 >= v11)
              goto LABEL_34;
            v23 = *(_QWORD *)(v36 + 8 * v14);
            ++v24;
            if (v23)
              goto LABEL_21;
          }
        }
        v14 = v24;
      }
    }
LABEL_21:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v14 << 6);
LABEL_22:
    v25 = *(_QWORD *)(v5 + 48) + 40 * v20;
    if ((a2 & 1) != 0)
    {
      v26 = *(_OWORD *)v25;
      v27 = *(_OWORD *)(v25 + 16);
      v40 = *(_QWORD *)(v25 + 32);
      v38 = v26;
      v39 = v27;
      sub_233B03554((_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v20), v37);
    }
    else
    {
      sub_233B04BA4(v25, (uint64_t)&v38);
      sub_233B03518(*(_QWORD *)(v5 + 56) + 32 * v20, (uint64_t)v37);
    }
    result = sub_233B58248();
    v28 = -1 << *(_BYTE *)(v7 + 32);
    v29 = result & ~v28;
    v30 = v29 >> 6;
    if (((-1 << v29) & ~*(_QWORD *)(v12 + 8 * (v29 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1 << v29) & ~*(_QWORD *)(v12 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v31 = 0;
      v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v33 = v30 == v32;
        if (v30 == v32)
          v30 = 0;
        v31 |= v33;
        v34 = *(_QWORD *)(v12 + 8 * v30);
      }
      while (v34 == -1);
      v15 = __clz(__rbit64(~v34)) + (v30 << 6);
    }
    *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    v16 = *(_QWORD *)(v7 + 48) + 40 * v15;
    v17 = v38;
    v18 = v39;
    *(_QWORD *)(v16 + 32) = v40;
    *(_OWORD *)v16 = v17;
    *(_OWORD *)(v16 + 16) = v18;
    result = (uint64_t)sub_233B03554(v37, (_OWORD *)(*(_QWORD *)(v7 + 56) + 32 * v15));
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v22 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v35 = 1 << *(_BYTE *)(v5 + 32);
  if (v35 >= 64)
    bzero(v22, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v35;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_233B48D40(uint64_t a1, int a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  _QWORD *v38;
  int v39;
  _OWORD v40[2];

  v3 = v2;
  v5 = sub_233B582FC();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25424D910);
  v39 = a2;
  v10 = sub_233B58338();
  v11 = v10;
  if (!*(_QWORD *)(v9 + 16))
    goto LABEL_41;
  v12 = 1 << *(_BYTE *)(v9 + 32);
  v13 = *(_QWORD *)(v9 + 64);
  v38 = (_QWORD *)(v9 + 64);
  if (v12 < 64)
    v14 = ~(-1 << v12);
  else
    v14 = -1;
  v15 = v14 & v13;
  v36 = v2;
  v37 = (unint64_t)(v12 + 63) >> 6;
  v16 = v10 + 64;
  result = swift_retain();
  v18 = 0;
  while (1)
  {
    if (v15)
    {
      v20 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v21 = v20 | (v18 << 6);
      goto LABEL_22;
    }
    v22 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v22 >= v37)
      break;
    v23 = v38;
    v24 = v38[v22];
    ++v18;
    if (!v24)
    {
      v18 = v22 + 1;
      if (v22 + 1 >= v37)
        goto LABEL_34;
      v24 = v38[v18];
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v37)
        {
LABEL_34:
          swift_release();
          v3 = v36;
          if ((v39 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v24 = v38[v25];
        if (!v24)
        {
          while (1)
          {
            v18 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_43;
            if (v18 >= v37)
              goto LABEL_34;
            v24 = v38[v18];
            ++v25;
            if (v24)
              goto LABEL_21;
          }
        }
        v18 = v25;
      }
    }
LABEL_21:
    v15 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v18 << 6);
LABEL_22:
    v26 = *(_QWORD *)(v6 + 72);
    v27 = *(_QWORD *)(v9 + 48) + v26 * v21;
    if ((v39 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v6 + 32))(v8, v27, v5);
      sub_233B03554((_OWORD *)(*(_QWORD *)(v9 + 56) + 32 * v21), v40);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v8, v27, v5);
      sub_233B03518(*(_QWORD *)(v9 + 56) + 32 * v21, (uint64_t)v40);
    }
    result = sub_233B57F30();
    v28 = -1 << *(_BYTE *)(v11 + 32);
    v29 = result & ~v28;
    v30 = v29 >> 6;
    if (((-1 << v29) & ~*(_QWORD *)(v16 + 8 * (v29 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v29) & ~*(_QWORD *)(v16 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v31 = 0;
      v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v33 = v30 == v32;
        if (v30 == v32)
          v30 = 0;
        v31 |= v33;
        v34 = *(_QWORD *)(v16 + 8 * v30);
      }
      while (v34 == -1);
      v19 = __clz(__rbit64(~v34)) + (v30 << 6);
    }
    *(_QWORD *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(_QWORD *)(v11 + 48) + v26 * v19, v8, v5);
    result = (uint64_t)sub_233B03554(v40, (_OWORD *)(*(_QWORD *)(v11 + 56) + 32 * v19));
    ++*(_QWORD *)(v11 + 16);
  }
  swift_release();
  v3 = v36;
  v23 = v38;
  if ((v39 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v35 = 1 << *(_BYTE *)(v9 + 32);
  if (v35 >= 64)
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v35;
  *(_QWORD *)(v9 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v11;
  return result;
}

uint64_t sub_233B490C4(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  _QWORD *v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  uint64_t v37;
  char v38;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256114328);
  v38 = a2;
  v6 = sub_233B58338();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v35 = v2;
  v36 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v17 = v16 | (v13 << 6);
      goto LABEL_22;
    }
    v18 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v18 >= v36)
      break;
    v19 = (_QWORD *)(v5 + 64);
    v20 = *(_QWORD *)(v37 + 8 * v18);
    ++v13;
    if (!v20)
    {
      v13 = v18 + 1;
      if (v18 + 1 >= v36)
        goto LABEL_36;
      v20 = *(_QWORD *)(v37 + 8 * v13);
      if (!v20)
      {
        v21 = v18 + 2;
        if (v21 >= v36)
        {
LABEL_36:
          swift_release();
          v3 = v35;
          if ((v38 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v20 = *(_QWORD *)(v37 + 8 * v21);
        if (!v20)
        {
          while (1)
          {
            v13 = v21 + 1;
            if (__OFADD__(v21, 1))
              goto LABEL_45;
            if (v13 >= v36)
              goto LABEL_36;
            v20 = *(_QWORD *)(v37 + 8 * v13);
            ++v21;
            if (v20)
              goto LABEL_21;
          }
        }
        v13 = v21;
      }
    }
LABEL_21:
    v10 = (v20 - 1) & v20;
    v17 = __clz(__rbit64(v20)) + (v13 << 6);
LABEL_22:
    v22 = *(_QWORD *)(v5 + 48) + 24 * v17;
    v24 = *(_QWORD *)v22;
    v23 = *(_QWORD *)(v22 + 8);
    v25 = *(unsigned __int8 *)(v22 + 16);
    v26 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v17);
    if ((v38 & 1) == 0)
    {
      sub_233B0486C(*(_QWORD *)v22, *(_QWORD *)(v22 + 8), *(_BYTE *)(v22 + 16));
      swift_bridgeObjectRetain();
    }
    sub_233B58590();
    sub_233B5859C();
    if (v25)
      sub_233B57FCC();
    else
      sub_233B585B4();
    result = sub_233B585C0();
    v27 = -1 << *(_BYTE *)(v7 + 32);
    v28 = result & ~v27;
    v29 = v28 >> 6;
    if (((-1 << v28) & ~*(_QWORD *)(v11 + 8 * (v28 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v28) & ~*(_QWORD *)(v11 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v30 = 0;
      v31 = (unint64_t)(63 - v27) >> 6;
      do
      {
        if (++v29 == v31 && (v30 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v32 = v29 == v31;
        if (v29 == v31)
          v29 = 0;
        v30 |= v32;
        v33 = *(_QWORD *)(v11 + 8 * v29);
      }
      while (v33 == -1);
      v14 = __clz(__rbit64(~v33)) + (v29 << 6);
    }
    *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    v15 = *(_QWORD *)(v7 + 48) + 24 * v14;
    *(_QWORD *)v15 = v24;
    *(_QWORD *)(v15 + 8) = v23;
    *(_BYTE *)(v15 + 16) = v25;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v14) = v26;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v35;
  v19 = (_QWORD *)(v5 + 64);
  if ((v38 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v19, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v19 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_233B49414(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  _QWORD *v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  uint64_t v37;
  char v38;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256112BC0);
  v38 = a2;
  v6 = sub_233B58338();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v35 = v2;
  v36 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v17 = v16 | (v13 << 6);
      goto LABEL_22;
    }
    v18 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v18 >= v36)
      break;
    v19 = (_QWORD *)(v5 + 64);
    v20 = *(_QWORD *)(v37 + 8 * v18);
    ++v13;
    if (!v20)
    {
      v13 = v18 + 1;
      if (v18 + 1 >= v36)
        goto LABEL_36;
      v20 = *(_QWORD *)(v37 + 8 * v13);
      if (!v20)
      {
        v21 = v18 + 2;
        if (v21 >= v36)
        {
LABEL_36:
          swift_release();
          v3 = v35;
          if ((v38 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v20 = *(_QWORD *)(v37 + 8 * v21);
        if (!v20)
        {
          while (1)
          {
            v13 = v21 + 1;
            if (__OFADD__(v21, 1))
              goto LABEL_45;
            if (v13 >= v36)
              goto LABEL_36;
            v20 = *(_QWORD *)(v37 + 8 * v13);
            ++v21;
            if (v20)
              goto LABEL_21;
          }
        }
        v13 = v21;
      }
    }
LABEL_21:
    v10 = (v20 - 1) & v20;
    v17 = __clz(__rbit64(v20)) + (v13 << 6);
LABEL_22:
    v22 = *(_QWORD *)(v5 + 48) + 24 * v17;
    v24 = *(_QWORD *)v22;
    v23 = *(_QWORD *)(v22 + 8);
    v25 = *(unsigned __int8 *)(v22 + 16);
    v26 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v17);
    if ((v38 & 1) == 0)
    {
      sub_233B0486C(*(_QWORD *)v22, *(_QWORD *)(v22 + 8), *(_BYTE *)(v22 + 16));
      sub_233B0487C(v26);
    }
    sub_233B58590();
    sub_233B5859C();
    if (v25)
      sub_233B57FCC();
    else
      sub_233B585B4();
    result = sub_233B585C0();
    v27 = -1 << *(_BYTE *)(v7 + 32);
    v28 = result & ~v27;
    v29 = v28 >> 6;
    if (((-1 << v28) & ~*(_QWORD *)(v11 + 8 * (v28 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v28) & ~*(_QWORD *)(v11 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v30 = 0;
      v31 = (unint64_t)(63 - v27) >> 6;
      do
      {
        if (++v29 == v31 && (v30 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v32 = v29 == v31;
        if (v29 == v31)
          v29 = 0;
        v30 |= v32;
        v33 = *(_QWORD *)(v11 + 8 * v29);
      }
      while (v33 == -1);
      v14 = __clz(__rbit64(~v33)) + (v29 << 6);
    }
    *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    v15 = *(_QWORD *)(v7 + 48) + 24 * v14;
    *(_QWORD *)v15 = v24;
    *(_QWORD *)(v15 + 8) = v23;
    *(_BYTE *)(v15 + 16) = v25;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v14) = v26;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v35;
  v19 = (_QWORD *)(v5 + 64);
  if ((v38 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v19, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v19 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release();
  *v3 = v7;
  return result;
}

void *sub_233B49764()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  _OWORD v24[2];
  _OWORD v25[2];
  uint64_t v26;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256112BC8);
  v2 = *v0;
  v3 = sub_233B5832C();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      v9 = v21 + 1;
      if (v21 + 1 >= v13)
        goto LABEL_26;
      v22 = *(_QWORD *)(v6 + 8 * v9);
      if (!v22)
        break;
    }
LABEL_25:
    v12 = (v22 - 1) & v22;
    v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    v16 = 40 * v15;
    sub_233B04BA4(*(_QWORD *)(v2 + 48) + 40 * v15, (uint64_t)v25);
    v17 = 32 * v15;
    sub_233B03518(*(_QWORD *)(v2 + 56) + v17, (uint64_t)v24);
    v18 = *(_QWORD *)(v4 + 48) + v16;
    v19 = v25[0];
    v20 = v25[1];
    *(_QWORD *)(v18 + 32) = v26;
    *(_OWORD *)v18 = v19;
    *(_OWORD *)(v18 + 16) = v20;
    result = sub_233B03554(v24, (_OWORD *)(*(_QWORD *)(v4 + 56) + v17));
  }
  v23 = v21 + 2;
  if (v23 >= v13)
    goto LABEL_26;
  v22 = *(_QWORD *)(v6 + 8 * v23);
  if (v22)
  {
    v9 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v9);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_233B49948()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  unint64_t v10;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t *v24;
  uint64_t v25;
  _OWORD v26[2];

  v1 = v0;
  v2 = sub_233B582FC();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25424D910);
  v6 = *v0;
  v7 = sub_233B5832C();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v1 = v8;
    return result;
  }
  v24 = v1;
  result = (void *)(v7 + 64);
  v10 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 64 + 8 * v10)
    result = memmove(result, (const void *)(v6 + 64), 8 * v10);
  v25 = v6 + 64;
  v12 = 0;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v6 + 16);
  v13 = 1 << *(_BYTE *)(v6 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & *(_QWORD *)(v6 + 64);
  v16 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      v17 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v18 = v17 | (v12 << 6);
      goto LABEL_12;
    }
    v21 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v21 >= v16)
      goto LABEL_26;
    v22 = *(_QWORD *)(v25 + 8 * v21);
    ++v12;
    if (!v22)
    {
      v12 = v21 + 1;
      if (v21 + 1 >= v16)
        goto LABEL_26;
      v22 = *(_QWORD *)(v25 + 8 * v12);
      if (!v22)
        break;
    }
LABEL_25:
    v15 = (v22 - 1) & v22;
    v18 = __clz(__rbit64(v22)) + (v12 << 6);
LABEL_12:
    v19 = *(_QWORD *)(v3 + 72) * v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(_QWORD *)(v6 + 48) + v19, v2);
    v20 = 32 * v18;
    sub_233B03518(*(_QWORD *)(v6 + 56) + v20, (uint64_t)v26);
    (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v8 + 48) + v19, v5, v2);
    result = sub_233B03554(v26, (_OWORD *)(*(_QWORD *)(v8 + 56) + v20));
  }
  v23 = v21 + 2;
  if (v23 >= v16)
  {
LABEL_26:
    result = (void *)swift_release();
    v1 = v24;
    goto LABEL_28;
  }
  v22 = *(_QWORD *)(v25 + 8 * v23);
  if (v22)
  {
    v12 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v12 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v12 >= v16)
      goto LABEL_26;
    v22 = *(_QWORD *)(v25 + 8 * v12);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_233B49B84()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256114328);
  v2 = *v0;
  v3 = sub_233B5832C();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v24 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v24 >= v13)
      goto LABEL_26;
    v25 = *(_QWORD *)(v6 + 8 * v24);
    ++v9;
    if (!v25)
    {
      v9 = v24 + 1;
      if (v24 + 1 >= v13)
        goto LABEL_26;
      v25 = *(_QWORD *)(v6 + 8 * v9);
      if (!v25)
        break;
    }
LABEL_25:
    v12 = (v25 - 1) & v25;
    v15 = __clz(__rbit64(v25)) + (v9 << 6);
LABEL_12:
    v16 = 24 * v15;
    v17 = *(_QWORD *)(v2 + 48) + 24 * v15;
    v18 = *(_QWORD *)v17;
    v19 = *(_QWORD *)(v17 + 8);
    v20 = *(_BYTE *)(v17 + 16);
    v21 = 8 * v15;
    v22 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v21);
    v23 = *(_QWORD *)(v4 + 48) + v16;
    *(_QWORD *)v23 = *(_QWORD *)v17;
    *(_QWORD *)(v23 + 8) = v19;
    *(_BYTE *)(v23 + 16) = v20;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v21) = v22;
    sub_233B0486C(v18, v19, v20);
    result = (void *)swift_bridgeObjectRetain();
  }
  v26 = v24 + 2;
  if (v26 >= v13)
    goto LABEL_26;
  v25 = *(_QWORD *)(v6 + 8 * v26);
  if (v25)
  {
    v9 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v25 = *(_QWORD *)(v6 + 8 * v9);
    ++v26;
    if (v25)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_233B49D44()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256112BC0);
  v2 = *v0;
  v3 = sub_233B5832C();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v24 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v24 >= v13)
      goto LABEL_26;
    v25 = *(_QWORD *)(v6 + 8 * v24);
    ++v9;
    if (!v25)
    {
      v9 = v24 + 1;
      if (v24 + 1 >= v13)
        goto LABEL_26;
      v25 = *(_QWORD *)(v6 + 8 * v9);
      if (!v25)
        break;
    }
LABEL_25:
    v12 = (v25 - 1) & v25;
    v15 = __clz(__rbit64(v25)) + (v9 << 6);
LABEL_12:
    v16 = 24 * v15;
    v17 = *(_QWORD *)(v2 + 48) + 24 * v15;
    v18 = *(_QWORD *)v17;
    v19 = *(_QWORD *)(v17 + 8);
    v20 = *(_BYTE *)(v17 + 16);
    v21 = 8 * v15;
    v22 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v21);
    v23 = *(_QWORD *)(v4 + 48) + v16;
    *(_QWORD *)v23 = *(_QWORD *)v17;
    *(_QWORD *)(v23 + 8) = v19;
    *(_BYTE *)(v23 + 16) = v20;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v21) = v22;
    sub_233B0486C(v18, v19, v20);
    result = (void *)sub_233B0487C(v22);
  }
  v26 = v24 + 2;
  if (v26 >= v13)
    goto LABEL_26;
  v25 = *(_QWORD *)(v6 + 8 * v26);
  if (v25)
  {
    v9 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v25 = *(_QWORD *)(v6 + 8 * v9);
    ++v26;
    if (v25)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_233B49F04(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_233B49F3C(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_233B49F20(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_233B4A0A4(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_233B49F3C(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_256114310);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_233B58350();
  __break(1u);
  return result;
}

uint64_t sub_233B4A0A4(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  size_t v14;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (!v9)
  {
    v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_256114300);
  v10 = *(_QWORD *)(type metadata accessor for ManagedApp() - 8);
  v11 = *(_QWORD *)(v10 + 72);
  v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v13 = (_QWORD *)swift_allocObject();
  v14 = _swift_stdlib_malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v14 - v12 == 0x8000000000000000 && v11 == -1)
    goto LABEL_34;
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  v16 = *(_QWORD *)(type metadata accessor for ManagedApp() - 8);
  v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  v18 = (char *)v13 + v17;
  v19 = (char *)a4 + v17;
  if ((a1 & 1) != 0)
  {
    if (v13 < a4 || v18 >= &v19[*(_QWORD *)(v16 + 72) * v8])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v20 = *(_QWORD *)(v16 + 72) * v8;
  v21 = &v18[v20];
  v22 = (unint64_t)&v19[v20];
  if (v19 >= v21 || (unint64_t)v18 >= v22)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_36:
  result = sub_233B58350();
  __break(1u);
  return result;
}

uint64_t sub_233B4A284(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18[2];
  unsigned __int8 v19;

  if (!*(_QWORD *)(*(_QWORD *)v1 + 16))
    return result;
  v2 = result;
  v3 = result + 56;
  v4 = 1 << *(_BYTE *)(result + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(result + 56);
  v7 = (unint64_t)(v4 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v8 = 0;
  while (1)
  {
    if (v6)
    {
      v9 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v10 = v9 | (v8 << 6);
      goto LABEL_6;
    }
    v15 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v15 >= v7)
      return swift_release();
    v16 = *(_QWORD *)(v3 + 8 * v15);
    ++v8;
    if (!v16)
    {
      v8 = v15 + 1;
      if (v15 + 1 >= v7)
        return swift_release();
      v16 = *(_QWORD *)(v3 + 8 * v8);
      if (!v16)
      {
        v8 = v15 + 2;
        if (v15 + 2 >= v7)
          return swift_release();
        v16 = *(_QWORD *)(v3 + 8 * v8);
        if (!v16)
        {
          v8 = v15 + 3;
          if (v15 + 3 >= v7)
            return swift_release();
          v16 = *(_QWORD *)(v3 + 8 * v8);
          if (!v16)
            break;
        }
      }
    }
LABEL_23:
    v6 = (v16 - 1) & v16;
    v10 = __clz(__rbit64(v16)) + (v8 << 6);
LABEL_6:
    v11 = *(_QWORD *)(v2 + 48) + 24 * v10;
    v12 = *(_QWORD *)v11;
    v13 = *(_QWORD *)(v11 + 8);
    v14 = *(_BYTE *)(v11 + 16);
    sub_233B4D2A0(*(_QWORD *)v11, v13, v14);
    sub_233B4BB10(v12, v13, v14, (uint64_t)v18);
    sub_233B4D37C(v18[0], v18[1], v19);
    result = sub_233B4D2B8(v12, v13, v14);
  }
  v17 = v15 + 4;
  if (v17 >= v7)
    return swift_release();
  v16 = *(_QWORD *)(v3 + 8 * v17);
  if (v16)
  {
    v8 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    v8 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v8 >= v7)
      return swift_release();
    v16 = *(_QWORD *)(v3 + 8 * v8);
    ++v17;
    if (v16)
      goto LABEL_23;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_233B4A450(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 v32;
  uint64_t isStackAllocationSafe;
  char v34;
  unint64_t v35;
  size_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v41;
  int v42;
  int64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  int64_t v47;
  _QWORD v48[7];

  v2 = a2;
  v48[5] = *MEMORY[0x24BDAC8D0];
  if (!*(_QWORD *)(a2 + 16))
  {
    swift_release();
    return MEMORY[0x24BEE4B08];
  }
  v3 = *(_QWORD *)(a1 + 56);
  v44 = a1 + 56;
  v4 = -1 << *(_BYTE *)(a1 + 32);
  v41 = ~v4;
  if (-v4 < 64)
    v5 = ~(-1 << -(char)v4);
  else
    v5 = -1;
  v6 = v5 & v3;
  v43 = (unint64_t)(63 - v4) >> 6;
  v7 = a2 + 56;
  v8 = swift_bridgeObjectRetain();
  v9 = 0;
  v45 = v8;
  while (1)
  {
    if (v6)
    {
      v10 = __clz(__rbit64(v6));
      v11 = (v6 - 1) & v6;
      v12 = v10 | (v9 << 6);
    }
    else
    {
      v13 = v9 + 1;
      if (__OFADD__(v9, 1))
      {
        __break(1u);
        goto LABEL_68;
      }
      if (v13 >= v43)
        goto LABEL_64;
      v14 = *(_QWORD *)(v44 + 8 * v13);
      v15 = v9 + 1;
      if (!v14)
      {
        v15 = v9 + 2;
        if (v9 + 2 >= v43)
          goto LABEL_64;
        v14 = *(_QWORD *)(v44 + 8 * v15);
        if (!v14)
        {
          v15 = v9 + 3;
          if (v9 + 3 >= v43)
            goto LABEL_64;
          v14 = *(_QWORD *)(v44 + 8 * v15);
          if (!v14)
          {
            v15 = v9 + 4;
            if (v9 + 4 >= v43)
              goto LABEL_64;
            v14 = *(_QWORD *)(v44 + 8 * v15);
            if (!v14)
            {
              v16 = v9 + 5;
              if (v9 + 5 >= v43)
              {
LABEL_64:
                sub_233B04BE0();
                return v2;
              }
              v14 = *(_QWORD *)(v44 + 8 * v16);
              if (!v14)
              {
                while (1)
                {
                  v15 = v16 + 1;
                  if (__OFADD__(v16, 1))
                    break;
                  if (v15 >= v43)
                    goto LABEL_64;
                  v14 = *(_QWORD *)(v44 + 8 * v15);
                  ++v16;
                  if (v14)
                    goto LABEL_24;
                }
LABEL_68:
                __break(1u);
              }
              v15 = v9 + 5;
            }
          }
        }
      }
LABEL_24:
      v11 = (v14 - 1) & v14;
      v12 = __clz(__rbit64(v14)) + (v15 << 6);
      v9 = v15;
    }
    v17 = *(_QWORD *)(v8 + 48) + 24 * v12;
    v18 = *(_QWORD *)v17;
    v19 = *(_QWORD *)(v17 + 8);
    v20 = *(unsigned __int8 *)(v17 + 16);
    sub_233B58590();
    v46 = v11;
    v47 = v9;
    if (v20 == 253 || v20 == 254 || v20 == 255)
    {
      sub_233B5859C();
    }
    else
    {
      sub_233B5859C();
      sub_233B5859C();
      if ((v20 & 1) != 0)
      {
        sub_233B0486C(v18, v19, 1);
        sub_233B57FCC();
      }
      else
      {
        sub_233B585B4();
      }
    }
    v21 = sub_233B585C0();
    v22 = -1 << *(_BYTE *)(v2 + 32);
    v23 = v21 & ~v22;
    if (((*(_QWORD *)(v7 + ((v23 >> 3) & 0xFFFFFFFFFFFFF8)) >> v23) & 1) != 0)
      break;
LABEL_6:
    sub_233B4D2B8(v18, v19, v20);
    v8 = v45;
    v6 = v46;
    v9 = v47;
  }
  v24 = ~v22;
  while (1)
  {
    v25 = *(_QWORD *)(v2 + 48) + 24 * v23;
    v26 = *(_QWORD *)v25;
    v27 = *(_QWORD *)(v25 + 8);
    v28 = *(unsigned __int8 *)(v25 + 16);
    switch(v28)
    {
      case 253:
        if (v20 == 253)
        {
          v30 = *(_QWORD *)v25;
          v31 = *(_QWORD *)(v25 + 8);
          v32 = -3;
          goto LABEL_59;
        }
        goto LABEL_41;
      case 254:
        if (v20 == 254)
        {
          v30 = *(_QWORD *)v25;
          v31 = *(_QWORD *)(v25 + 8);
          v32 = -2;
          goto LABEL_59;
        }
        goto LABEL_41;
      case 255:
        if (v20 == 255)
        {
          v30 = *(_QWORD *)v25;
          v31 = *(_QWORD *)(v25 + 8);
          v32 = -1;
          goto LABEL_59;
        }
LABEL_41:
        sub_233B4D2A0(v18, v19, v20);
        sub_233B4D2A0(v26, v27, v28);
        sub_233B4D2B8(v26, v27, v28);
        sub_233B4D2B8(v18, v19, v20);
        goto LABEL_42;
    }
    if (v20 > 0xFC)
      goto LABEL_41;
    if ((v28 & 1) != 0)
      break;
    sub_233B4D2A0(v18, v19, v20);
    sub_233B4D2A0(v26, v27, v28);
    sub_233B4D2B8(v26, v27, v28);
    sub_233B4D2B8(v18, v19, v20);
    if ((v20 & 1) == 0 && v26 == v18)
      goto LABEL_60;
LABEL_42:
    v23 = (v23 + 1) & v24;
    if (((*(_QWORD *)(v7 + ((v23 >> 3) & 0xFFFFFFFFFFFFF8)) >> v23) & 1) == 0)
      goto LABEL_6;
  }
  if ((v20 & 1) == 0)
    goto LABEL_41;
  if (v26 != v18 || v27 != v19)
  {
    v42 = sub_233B584D0();
    sub_233B4D2A0(v18, v19, v20);
    sub_233B4D2A0(v26, v27, v28);
    sub_233B4D2B8(v26, v27, v28);
    sub_233B4D2B8(v18, v19, v20);
    if ((v42 & 1) != 0)
      goto LABEL_60;
    goto LABEL_42;
  }
  sub_233B4D2A0(v18, v19, v20);
  sub_233B4D2A0(v18, v19, v28);
  sub_233B4D2B8(v18, v19, v28);
  v30 = v18;
  v31 = v19;
  v32 = v20;
LABEL_59:
  sub_233B4D2B8(v30, v31, v32);
LABEL_60:
  isStackAllocationSafe = sub_233B4D2B8(v18, v19, v20);
  v48[0] = v45;
  v48[1] = v44;
  v48[2] = v41;
  v48[3] = v47;
  v48[4] = v46;
  v34 = *(_BYTE *)(v2 + 32);
  v35 = (unint64_t)((1 << v34) + 63) >> 6;
  v36 = 8 * v35;
  if ((v34 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (_DWORD)isStackAllocationSafe))
  {
    MEMORY[0x24BDAC7A8](isStackAllocationSafe);
    memcpy((char *)&v41 - ((v36 + 15) & 0x3FFFFFFFFFFFFFF0), (const void *)(v2 + 56), v36);
    v37 = sub_233B4BEF0((uint64_t)&v41 - ((v36 + 15) & 0x3FFFFFFFFFFFFFF0), v35, v2, v23, v48);
    swift_release();
    sub_233B04BE0();
    return v37;
  }
  else
  {
    v38 = (void *)swift_slowAlloc();
    memcpy(v38, (const void *)(v2 + 56), v36);
    v39 = sub_233B4BEF0((uint64_t)v38, v35, v2, v23, v48);
    swift_release();
    sub_233B04BE0();
    MEMORY[0x23493D4CC](v38, -1, -1);
    return v39;
  }
}

uint64_t sub_233B4AAC4(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  char isUniquelyReferenced_nonNull_native;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v5 = v4;
  v10 = *v4;
  sub_233B58590();
  v32 = a1;
  if (a4 == 253 || a4 == 254 || a4 == 255)
  {
    sub_233B5859C();
  }
  else
  {
    sub_233B5859C();
    if ((a4 & 1) != 0)
    {
      sub_233B5859C();
      swift_bridgeObjectRetain();
      sub_233B57FCC();
      goto LABEL_6;
    }
    sub_233B5859C();
    sub_233B585B4();
  }
  swift_bridgeObjectRetain();
LABEL_6:
  v11 = sub_233B585C0();
  v12 = -1 << *(_BYTE *)(v10 + 32);
  v13 = v11 & ~v12;
  v14 = v10 + 56;
  v33 = a3;
  if (((*(_QWORD *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
  {
LABEL_32:
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v34 = *v5;
    *v5 = 0x8000000000000000;
    sub_233B4D2A0(a2, v33, a4);
    sub_233B4B274(a2, v33, a4, v13, isUniquelyReferenced_nonNull_native);
    *v5 = v34;
    swift_bridgeObjectRelease();
    *(_QWORD *)v32 = a2;
    *(_QWORD *)(v32 + 8) = v33;
    result = 1;
    *(_BYTE *)(v32 + 16) = a4;
    return result;
  }
  v15 = ~v12;
  while (1)
  {
    v16 = v10;
    v17 = *(_QWORD *)(v10 + 48) + 24 * v13;
    v18 = *(_QWORD *)v17;
    v19 = *(_QWORD *)(v17 + 8);
    v20 = *(unsigned __int8 *)(v17 + 16);
    switch(v20)
    {
      case 253:
        if (a4 == 253)
        {
          sub_233B4D2B8(v18, v19, 0xFDu);
          v24 = a2;
          v25 = v33;
          v26 = -3;
          goto LABEL_36;
        }
        goto LABEL_23;
      case 254:
        if (a4 == 254)
        {
          sub_233B4D2B8(v18, v19, 0xFEu);
          v24 = a2;
          v25 = v33;
          v26 = -2;
          goto LABEL_36;
        }
LABEL_23:
        sub_233B4D2A0(a2, v33, a4);
        sub_233B4D2A0(v18, v19, v20);
        sub_233B4D2B8(v18, v19, v20);
        sub_233B4D2B8(a2, v33, a4);
        goto LABEL_24;
      case 255:
        if (a4 == 0xFF)
        {
          sub_233B4D2B8(v18, v19, 0xFFu);
          v24 = a2;
          v25 = v33;
          v26 = -1;
LABEL_36:
          sub_233B4D2B8(v24, v25, v26);
          swift_bridgeObjectRelease();
          goto LABEL_37;
        }
        goto LABEL_23;
    }
    if (a4 > 0xFCu)
      goto LABEL_23;
    if ((v20 & 1) != 0)
      break;
    sub_233B4D2A0(a2, v33, a4);
    sub_233B4D2A0(v18, v19, v20);
    sub_233B4D2B8(v18, v19, v20);
    sub_233B4D2B8(a2, v33, a4);
    if ((a4 & 1) == 0 && v18 == a2)
      goto LABEL_39;
LABEL_24:
    v13 = (v13 + 1) & v15;
    v10 = v16;
    if (((*(_QWORD *)(v14 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
      goto LABEL_32;
  }
  if ((a4 & 1) == 0)
    goto LABEL_23;
  if (v18 != a2 || v19 != v33)
  {
    v31 = sub_233B584D0();
    sub_233B4D2A0(a2, v33, a4);
    sub_233B4D2A0(v18, v19, v20);
    sub_233B4D2B8(v18, v19, v20);
    sub_233B4D2B8(a2, v33, a4);
    if ((v31 & 1) != 0)
      goto LABEL_39;
    goto LABEL_24;
  }
  sub_233B4D2A0(a2, v33, a4);
  sub_233B4D2A0(a2, v33, v20);
  sub_233B4D2B8(a2, v33, v20);
  sub_233B4D2B8(a2, v33, a4);
LABEL_39:
  swift_bridgeObjectRelease();
  sub_233B4D2B8(a2, v33, a4);
LABEL_37:
  v27 = *(_QWORD *)(*v5 + 48) + 24 * v13;
  v28 = *(_QWORD *)v27;
  v29 = *(_QWORD *)(v27 + 8);
  *(_QWORD *)v32 = *(_QWORD *)v27;
  *(_QWORD *)(v32 + 8) = v29;
  v30 = *(_BYTE *)(v27 + 16);
  *(_BYTE *)(v32 + 16) = v30;
  sub_233B4D2A0(v28, v29, v30);
  return 0;
}

uint64_t sub_233B4AF08()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  _QWORD *v31;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25424D520);
  v3 = sub_233B58278();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v31 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v6 = ~(-1 << v5);
    else
      v6 = -1;
    v7 = v6 & *(_QWORD *)(v2 + 56);
    v30 = (unint64_t)(v5 + 63) >> 6;
    v8 = v3 + 56;
    result = swift_retain();
    v10 = 0;
    while (1)
    {
      if (v7)
      {
        v13 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        v14 = v13 | (v10 << 6);
      }
      else
      {
        v15 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
LABEL_45:
          __break(1u);
LABEL_46:
          __break(1u);
          return result;
        }
        if (v15 >= v30)
          goto LABEL_40;
        v16 = v31[v15];
        ++v10;
        if (!v16)
        {
          v10 = v15 + 1;
          if (v15 + 1 >= v30)
            goto LABEL_40;
          v16 = v31[v10];
          if (!v16)
          {
            v10 = v15 + 2;
            if (v15 + 2 >= v30)
              goto LABEL_40;
            v16 = v31[v10];
            if (!v16)
            {
              v17 = v15 + 3;
              if (v17 >= v30)
              {
LABEL_40:
                swift_release();
                v1 = v0;
                v29 = 1 << *(_BYTE *)(v2 + 32);
                if (v29 > 63)
                  bzero(v31, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v31 = -1 << v29;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v16 = v31[v17];
              if (!v16)
              {
                while (1)
                {
                  v10 = v17 + 1;
                  if (__OFADD__(v17, 1))
                    goto LABEL_46;
                  if (v10 >= v30)
                    goto LABEL_40;
                  v16 = v31[v10];
                  ++v17;
                  if (v16)
                    goto LABEL_23;
                }
              }
              v10 = v17;
            }
          }
        }
LABEL_23:
        v7 = (v16 - 1) & v16;
        v14 = __clz(__rbit64(v16)) + (v10 << 6);
      }
      v18 = *(_QWORD *)(v2 + 48) + 24 * v14;
      v19 = *(_QWORD *)v18;
      v20 = *(_QWORD *)(v18 + 8);
      v21 = *(unsigned __int8 *)(v18 + 16);
      sub_233B58590();
      if (v21 == 253 || v21 == 254 || v21 == 255)
      {
        sub_233B5859C();
      }
      else
      {
        sub_233B5859C();
        sub_233B5859C();
        if ((v21 & 1) != 0)
          sub_233B57FCC();
        else
          sub_233B585B4();
      }
      result = sub_233B585C0();
      v22 = -1 << *(_BYTE *)(v4 + 32);
      v23 = result & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v8 + 8 * (v23 >> 6))) != 0)
      {
        v11 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v8 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_45;
          }
          v27 = v24 == v26;
          if (v24 == v26)
            v24 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v8 + 8 * v24);
        }
        while (v28 == -1);
        v11 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(_QWORD *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      v12 = *(_QWORD *)(v4 + 48) + 24 * v11;
      *(_QWORD *)v12 = v19;
      *(_QWORD *)(v12 + 8) = v20;
      *(_BYTE *)(v12 + 16) = v21;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_233B4B274(uint64_t result, uint64_t a2, unsigned __int8 a3, unint64_t a4, char a5)
{
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  char v24;
  uint64_t *v25;
  char v26;

  v11 = result;
  v12 = *(_QWORD *)(*(_QWORD *)v5 + 16);
  v13 = *(_QWORD *)(*(_QWORD *)v5 + 24);
  if (v13 <= v12 || (a5 & 1) == 0)
  {
    if ((a5 & 1) != 0)
    {
      sub_233B4AF08();
    }
    else
    {
      if (v13 > v12)
      {
        result = (uint64_t)sub_233B4B610();
        goto LABEL_38;
      }
      sub_233B4B7CC();
    }
    v14 = *(_QWORD *)v5;
    sub_233B58590();
    if (a3 == 253 || a3 == 254 || a3 == 255)
    {
      sub_233B5859C();
    }
    else
    {
      sub_233B5859C();
      sub_233B5859C();
      if ((a3 & 1) != 0)
        sub_233B57FCC();
      else
        sub_233B585B4();
    }
    v5 = &v26;
    result = sub_233B585C0();
    v15 = -1 << *(_BYTE *)(v14 + 32);
    a4 = result & ~v15;
    if (((*(_QWORD *)(v14 + 56 + ((a4 >> 3) & 0xFFFFFFFFFFFFF8)) >> a4) & 1) != 0)
    {
      v16 = ~v15;
      do
      {
        v17 = *(_QWORD *)(v14 + 48) + 24 * a4;
        v6 = *(_QWORD *)v17;
        v7 = *(_QWORD *)(v17 + 8);
        LODWORD(v5) = *(unsigned __int8 *)(v17 + 16);
        switch((_DWORD)v5)
        {
          case 0xFD:
            if (a3 == 253)
              goto LABEL_44;
            break;
          case 0xFE:
            if (a3 == 254)
              goto LABEL_44;
            break;
          case 0xFF:
            if (a3 == 0xFF)
              goto LABEL_44;
            break;
          default:
            if (a3 <= 0xFCu)
            {
              if ((v5 & 1) == 0)
              {
                sub_233B4D2A0(v6, v7, v5);
                sub_233B4D2A0(v11, a2, a3);
                sub_233B4D2B8(v6, v7, v5);
                result = sub_233B4D2B8(v11, a2, a3);
                if ((a3 & 1) == 0 && v6 == v11)
                  goto LABEL_46;
                goto LABEL_25;
              }
              if ((a3 & 1) != 0)
              {
                if (v6 == v11 && v7 == a2)
                  goto LABEL_47;
                v24 = sub_233B584D0();
                sub_233B4D2A0(v6, v7, v5);
                sub_233B4D2A0(v11, a2, a3);
                sub_233B4D2B8(v6, v7, v5);
                result = sub_233B4D2B8(v11, a2, a3);
                if ((v24 & 1) != 0)
                  goto LABEL_46;
                goto LABEL_25;
              }
            }
            break;
        }
        sub_233B4D2A0(v6, v7, v5);
        sub_233B4D2A0(v11, a2, a3);
        sub_233B4D2B8(v6, v7, v5);
        result = sub_233B4D2B8(v11, a2, a3);
LABEL_25:
        a4 = (a4 + 1) & v16;
      }
      while (((*(_QWORD *)(v14 + 56 + ((a4 >> 3) & 0xFFFFFFFFFFFFF8)) >> a4) & 1) != 0);
    }
  }
LABEL_38:
  v19 = *v25;
  *(_QWORD *)(*v25 + 8 * (a4 >> 6) + 56) |= 1 << a4;
  v20 = *(_QWORD *)(v19 + 48) + 24 * a4;
  *(_QWORD *)v20 = v11;
  *(_QWORD *)(v20 + 8) = a2;
  *(_BYTE *)(v20 + 16) = a3;
  v21 = *(_QWORD *)(v19 + 16);
  v22 = __OFADD__(v21, 1);
  v23 = v21 + 1;
  if (v22)
  {
    __break(1u);
LABEL_44:
    a3 = v5;
    while (1)
    {
      sub_233B4D2B8(v6, v7, v5);
      sub_233B4D2B8(v11, a2, a3);
LABEL_46:
      sub_233B5853C();
      __break(1u);
LABEL_47:
      sub_233B4D2A0(v11, a2, v5);
      sub_233B4D2A0(v11, a2, a3);
      v7 = a2;
      v6 = v11;
    }
  }
  *(_QWORD *)(v19 + 16) = v23;
  return result;
}

void *sub_233B4B610()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25424D520);
  v2 = *v0;
  v3 = sub_233B5826C();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13)
      goto LABEL_28;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_28;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
      {
        v9 = v22 + 2;
        if (v22 + 2 >= v13)
          goto LABEL_28;
        v23 = *(_QWORD *)(v6 + 8 * v9);
        if (!v23)
          break;
      }
    }
LABEL_27:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 24 * v15;
    v17 = *(_QWORD *)(v2 + 48) + v16;
    v18 = *(_QWORD *)v17;
    v19 = *(_QWORD *)(v17 + 8);
    v20 = *(_QWORD *)(v4 + 48) + v16;
    v21 = *(_BYTE *)(v17 + 16);
    *(_QWORD *)v20 = *(_QWORD *)v17;
    *(_QWORD *)(v20 + 8) = v19;
    *(_BYTE *)(v20 + 16) = v21;
    result = (void *)sub_233B4D2A0(v18, v19, v21);
  }
  v24 = v22 + 3;
  if (v24 >= v13)
    goto LABEL_28;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_233B4B7CC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25424D520);
  v3 = sub_233B58278();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_42:
    *v1 = v4;
    return result;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v29 = v2 + 56;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  else
    v6 = -1;
  v7 = v6 & *(_QWORD *)(v2 + 56);
  v30 = (unint64_t)(v5 + 63) >> 6;
  v8 = v3 + 56;
  result = swift_retain();
  v10 = 0;
  while (v7)
  {
    v13 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    v14 = v13 | (v10 << 6);
LABEL_24:
    v18 = *(_QWORD *)(v2 + 48) + 24 * v14;
    v19 = *(_QWORD *)v18;
    v20 = *(_QWORD *)(v18 + 8);
    v21 = *(unsigned __int8 *)(v18 + 16);
    sub_233B58590();
    if (v21 == 253 || v21 == 254 || v21 == 255)
    {
      sub_233B5859C();
    }
    else
    {
      sub_233B5859C();
      sub_233B5859C();
      if ((v21 & 1) != 0)
      {
        sub_233B0486C(v19, v20, 1);
        sub_233B57FCC();
      }
      else
      {
        sub_233B585B4();
      }
    }
    result = sub_233B585C0();
    v22 = -1 << *(_BYTE *)(v4 + 32);
    v23 = result & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v8 + 8 * (v23 >> 6))) != 0)
    {
      v11 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v8 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_43;
        }
        v27 = v24 == v26;
        if (v24 == v26)
          v24 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v8 + 8 * v24);
      }
      while (v28 == -1);
      v11 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(_QWORD *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    v12 = *(_QWORD *)(v4 + 48) + 24 * v11;
    *(_QWORD *)v12 = v19;
    *(_QWORD *)(v12 + 8) = v20;
    *(_BYTE *)(v12 + 16) = v21;
    ++*(_QWORD *)(v4 + 16);
  }
  v15 = v10 + 1;
  if (__OFADD__(v10, 1))
  {
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  if (v15 >= v30)
    goto LABEL_40;
  v16 = *(_QWORD *)(v29 + 8 * v15);
  ++v10;
  if (v16)
    goto LABEL_23;
  v10 = v15 + 1;
  if (v15 + 1 >= v30)
    goto LABEL_40;
  v16 = *(_QWORD *)(v29 + 8 * v10);
  if (v16)
    goto LABEL_23;
  v10 = v15 + 2;
  if (v15 + 2 >= v30)
    goto LABEL_40;
  v16 = *(_QWORD *)(v29 + 8 * v10);
  if (v16)
  {
LABEL_23:
    v7 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v10 << 6);
    goto LABEL_24;
  }
  v17 = v15 + 3;
  if (v17 >= v30)
  {
LABEL_40:
    result = swift_release_n();
    v1 = v0;
    goto LABEL_42;
  }
  v16 = *(_QWORD *)(v29 + 8 * v17);
  if (v16)
  {
    v10 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    v10 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v10 >= v30)
      goto LABEL_40;
    v16 = *(_QWORD *)(v29 + 8 * v10);
    ++v17;
    if (v16)
      goto LABEL_23;
  }
LABEL_44:
  __break(1u);
  return result;
}

uint64_t sub_233B4BB10@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t *v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 v23;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v9 = *v4;
  sub_233B58590();
  v29 = v4;
  v30 = a4;
  if (a3 == 253 || a3 == 254 || a3 == 255)
  {
    sub_233B5859C();
  }
  else
  {
    sub_233B5859C();
    if ((a3 & 1) != 0)
    {
      sub_233B5859C();
      swift_bridgeObjectRetain();
      sub_233B57FCC();
      goto LABEL_6;
    }
    sub_233B5859C();
    sub_233B585B4();
  }
  swift_bridgeObjectRetain();
LABEL_6:
  v10 = sub_233B585C0();
  v11 = -1 << *(_BYTE *)(v9 + 32);
  v12 = v10 & ~v11;
  v13 = v9 + 56;
  if (((*(_QWORD *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
  {
LABEL_32:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v30 = 0;
    *(_QWORD *)(v30 + 8) = 0;
    *(_BYTE *)(v30 + 16) = -4;
    return result;
  }
  v31 = ~v11;
  while (1)
  {
    v14 = v9;
    v15 = *(_QWORD *)(v9 + 48) + 24 * v12;
    v16 = *(_QWORD *)v15;
    v17 = *(_QWORD *)(v15 + 8);
    v18 = *(unsigned __int8 *)(v15 + 16);
    switch(v18)
    {
      case 253:
        if (a3 == 253)
        {
          a3 = -3;
          v21 = *(_QWORD *)v15;
          v22 = *(_QWORD *)(v15 + 8);
          v23 = -3;
          goto LABEL_36;
        }
        goto LABEL_18;
      case 254:
        if (a3 == 254)
        {
          a3 = -2;
          v21 = *(_QWORD *)v15;
          v22 = *(_QWORD *)(v15 + 8);
          v23 = -2;
          goto LABEL_36;
        }
        goto LABEL_18;
      case 255:
        if (a3 == 0xFF)
        {
          a3 = -1;
          v21 = *(_QWORD *)v15;
          v22 = *(_QWORD *)(v15 + 8);
          v23 = -1;
          goto LABEL_36;
        }
LABEL_18:
        sub_233B4D2A0(v16, v17, v18);
        sub_233B4D2A0(a1, a2, a3);
        sub_233B4D2B8(v16, v17, v18);
        sub_233B4D2B8(a1, a2, a3);
        v9 = v14;
        goto LABEL_19;
    }
    if (a3 > 0xFCu)
      goto LABEL_18;
    if ((v18 & 1) != 0)
      break;
    sub_233B4D2A0(v16, v17, v18);
    sub_233B4D2A0(a1, a2, a3);
    sub_233B4D2B8(v16, v17, v18);
    sub_233B4D2B8(a1, a2, a3);
    v9 = v14;
    if ((a3 & 1) == 0 && v16 == a1)
      goto LABEL_37;
LABEL_19:
    v12 = (v12 + 1) & v31;
    if (((*(_QWORD *)(v13 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
      goto LABEL_32;
  }
  if ((a3 & 1) == 0)
    goto LABEL_18;
  if (v16 != a1 || v17 != a2)
  {
    v28 = sub_233B584D0();
    sub_233B4D2A0(v16, v17, v18);
    sub_233B4D2A0(a1, a2, a3);
    sub_233B4D2B8(v16, v17, v18);
    sub_233B4D2B8(a1, a2, a3);
    v9 = v14;
    if ((v28 & 1) != 0)
      goto LABEL_37;
    goto LABEL_19;
  }
  sub_233B4D2A0(a1, a2, v18);
  sub_233B4D2A0(a1, a2, a3);
  v21 = a1;
  v22 = a2;
  v23 = v18;
LABEL_36:
  sub_233B4D2B8(v21, v22, v23);
  sub_233B4D2B8(a1, a2, a3);
LABEL_37:
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v25 = *v29;
  v32 = *v29;
  *v29 = 0x8000000000000000;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    sub_233B4B610();
    v25 = v32;
  }
  v26 = *(_QWORD *)(v25 + 48) + 24 * v12;
  v27 = *(_BYTE *)(v26 + 16);
  *(_OWORD *)v30 = *(_OWORD *)v26;
  *(_BYTE *)(v30 + 16) = v27;
  sub_233B4C6E4(v12);
  *v29 = v32;
  return swift_bridgeObjectRelease();
}

uint64_t sub_233B4BEF0(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, _QWORD *a5)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v37;
  unint64_t *v38;
  char v39;
  _QWORD *v40;
  uint64_t v41;

  v6 = *(_QWORD *)(a3 + 16);
  v38 = (unint64_t *)result;
  *(_QWORD *)(result + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a4) - 1;
  v7 = v6 - 1;
  v41 = a3 + 56;
  v40 = a5;
LABEL_2:
  v37 = v7;
LABEL_4:
  while (2)
  {
    v9 = a5[3];
    v8 = a5[4];
    if (v8)
    {
      v10 = (v8 - 1) & v8;
      v11 = __clz(__rbit64(v8)) | (v9 << 6);
      goto LABEL_16;
    }
    v12 = v9 + 1;
    if (!__OFADD__(v9, 1))
    {
      v13 = (unint64_t)(a5[2] + 64) >> 6;
      if (v12 >= v13)
      {
        v12 = a5[3];
LABEL_65:
        a5[3] = v12;
        a5[4] = 0;
        swift_retain();
        return sub_233B4C3E0(v38, a2, v37, a3);
      }
      v14 = a5[1];
      v15 = *(_QWORD *)(v14 + 8 * v12);
      if (v15)
        goto LABEL_15;
      v16 = v9 + 2;
      if (v9 + 2 >= v13)
        goto LABEL_65;
      v15 = *(_QWORD *)(v14 + 8 * v16);
      if (!v15)
      {
        if (v9 + 3 >= v13)
          goto LABEL_66;
        v15 = *(_QWORD *)(v14 + 8 * (v9 + 3));
        if (v15)
        {
          v12 = v9 + 3;
          goto LABEL_15;
        }
        v16 = v9 + 4;
        if (v9 + 4 >= v13)
        {
          v12 = v9 + 3;
          goto LABEL_65;
        }
        v15 = *(_QWORD *)(v14 + 8 * v16);
        if (!v15)
        {
          v12 = v9 + 5;
          if (v9 + 5 >= v13)
          {
LABEL_66:
            v12 = v16;
            goto LABEL_65;
          }
          v15 = *(_QWORD *)(v14 + 8 * v12);
          if (!v15)
          {
            v12 = v13 - 1;
            v35 = v9 + 6;
            while (v13 != v35)
            {
              v15 = *(_QWORD *)(v14 + 8 * v35++);
              if (v15)
              {
                v12 = v35 - 1;
                goto LABEL_15;
              }
            }
            goto LABEL_65;
          }
          goto LABEL_15;
        }
      }
      v12 = v16;
LABEL_15:
      v10 = (v15 - 1) & v15;
      v11 = __clz(__rbit64(v15)) + (v12 << 6);
      v9 = v12;
LABEL_16:
      v17 = *(_QWORD *)(*a5 + 48) + 24 * v11;
      v18 = *(_QWORD *)v17;
      v19 = *(_QWORD *)(v17 + 8);
      v20 = *(unsigned __int8 *)(v17 + 16);
      a5[3] = v9;
      a5[4] = v10;
      sub_233B58590();
      if (v20 == 253 || v20 == 254 || v20 == 255)
      {
        sub_233B5859C();
      }
      else
      {
        sub_233B5859C();
        sub_233B5859C();
        if ((v20 & 1) != 0)
        {
          sub_233B0486C(v18, v19, 1);
          sub_233B57FCC();
        }
        else
        {
          sub_233B585B4();
        }
      }
      v21 = sub_233B585C0();
      v22 = -1 << *(_BYTE *)(a3 + 32);
      v23 = v21 & ~v22;
      if (((*(_QWORD *)(v41 + ((v23 >> 3) & 0xFFFFFFFFFFFFF8)) >> v23) & 1) == 0)
      {
LABEL_3:
        result = sub_233B4D2B8(v18, v19, v20);
        a5 = v40;
        continue;
      }
      v24 = ~v22;
      while (1)
      {
        v25 = *(_QWORD *)(a3 + 48) + 24 * v23;
        v26 = *(_QWORD *)v25;
        v27 = *(_QWORD *)(v25 + 8);
        v28 = *(unsigned __int8 *)(v25 + 16);
        if (v28 == 253)
          break;
        if (v28 == 254)
        {
          if (v20 == 254)
          {
            v30 = *(_QWORD *)v25;
            v31 = *(_QWORD *)(v25 + 8);
            v32 = -2;
            goto LABEL_49;
          }
          goto LABEL_37;
        }
        if (v28 == 255)
        {
          if (v20 == 255)
          {
            v30 = *(_QWORD *)v25;
            v31 = *(_QWORD *)(v25 + 8);
            v32 = -1;
            goto LABEL_49;
          }
LABEL_37:
          sub_233B4D2A0(v18, v19, v20);
          sub_233B4D2A0(v26, v27, v28);
          sub_233B4D2B8(v26, v27, v28);
          sub_233B4D2B8(v18, v19, v20);
          goto LABEL_38;
        }
        if (v20 > 0xFC)
          goto LABEL_37;
        if ((v28 & 1) != 0)
        {
          if ((v20 & 1) == 0)
            goto LABEL_37;
          if (v26 == v18 && v27 == v19)
          {
            sub_233B4D2A0(v18, v19, v20);
            sub_233B4D2A0(v18, v19, v28);
            sub_233B4D2B8(v18, v19, v28);
            v30 = v18;
            v31 = v19;
            v32 = v20;
LABEL_49:
            sub_233B4D2B8(v30, v31, v32);
LABEL_50:
            result = sub_233B4D2B8(v18, v19, v20);
            v33 = (v23 >> 3) & 0x1FFFFFFFFFFFFFF8;
            v34 = *(unint64_t *)((char *)v38 + v33);
            *(unint64_t *)((char *)v38 + v33) = v34 & ~(1 << v23);
            a5 = v40;
            if ((v34 & (1 << v23)) != 0)
            {
              v7 = v37 - 1;
              if (__OFSUB__(v37, 1))
                goto LABEL_69;
              if (v37 == 1)
                return MEMORY[0x24BEE4B08];
              goto LABEL_2;
            }
            goto LABEL_4;
          }
          v39 = sub_233B584D0();
          sub_233B4D2A0(v18, v19, v20);
          sub_233B4D2A0(v26, v27, v28);
          sub_233B4D2B8(v26, v27, v28);
          sub_233B4D2B8(v18, v19, v20);
          if ((v39 & 1) != 0)
            goto LABEL_50;
        }
        else
        {
          sub_233B4D2A0(v18, v19, v20);
          sub_233B4D2A0(v26, v27, v28);
          sub_233B4D2B8(v26, v27, v28);
          sub_233B4D2B8(v18, v19, v20);
          if ((v20 & 1) == 0 && v26 == v18)
            goto LABEL_50;
        }
LABEL_38:
        v23 = (v23 + 1) & v24;
        if (((*(_QWORD *)(v41 + ((v23 >> 3) & 0xFFFFFFFFFFFFF8)) >> v23) & 1) == 0)
          goto LABEL_3;
      }
      if (v20 == 253)
      {
        v30 = *(_QWORD *)v25;
        v31 = *(_QWORD *)(v25 + 8);
        v32 = -3;
        goto LABEL_49;
      }
      goto LABEL_37;
    }
    break;
  }
  __break(1u);
LABEL_69:
  __break(1u);
  return result;
}

uint64_t sub_233B4C3E0(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t *v32;
  uint64_t v33;

  v4 = a4;
  if (!a3)
  {
    v9 = MEMORY[0x24BEE4B08];
LABEL_6:
    swift_release();
    return v9;
  }
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
    return v4;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25424D520);
  result = sub_233B58284();
  v9 = result;
  v32 = a1;
  v33 = a2;
  if (a2 < 1)
    v10 = 0;
  else
    v10 = *a1;
  v11 = 0;
  v12 = result + 56;
  while (v10)
  {
    v13 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    v14 = v13 | (v11 << 6);
LABEL_26:
    v18 = *(_QWORD *)(v4 + 48) + 24 * v14;
    v19 = *(_QWORD *)v18;
    v20 = *(_QWORD *)(v18 + 8);
    v21 = *(unsigned __int8 *)(v18 + 16);
    sub_233B58590();
    if (v21 == 253 || v21 == 254 || v21 == 255)
    {
      sub_233B5859C();
    }
    else
    {
      sub_233B5859C();
      sub_233B5859C();
      if ((v21 & 1) != 0)
      {
        sub_233B0486C(v19, v20, 1);
        sub_233B57FCC();
      }
      else
      {
        sub_233B585B4();
      }
    }
    result = sub_233B585C0();
    v22 = -1 << *(_BYTE *)(v9 + 32);
    v23 = result & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v12 + 8 * (v23 >> 6))) != 0)
    {
      v25 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v12 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_46;
        }
        v28 = v24 == v27;
        if (v24 == v27)
          v24 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v24);
      }
      while (v29 == -1);
      v25 = __clz(__rbit64(~v29)) + (v24 << 6);
    }
    *(_QWORD *)(v12 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v25;
    v30 = *(_QWORD *)(v9 + 48) + 24 * v25;
    *(_QWORD *)v30 = v19;
    *(_QWORD *)(v30 + 8) = v20;
    *(_BYTE *)(v30 + 16) = v21;
    ++*(_QWORD *)(v9 + 16);
    if (__OFSUB__(v5--, 1))
    {
LABEL_46:
      __break(1u);
LABEL_47:
      __break(1u);
      goto LABEL_48;
    }
    if (!v5)
      goto LABEL_6;
  }
  v15 = v11 + 1;
  if (__OFADD__(v11, 1))
    goto LABEL_47;
  if (v15 >= v33)
    goto LABEL_6;
  v16 = v32[v15];
  ++v11;
  if (v16)
    goto LABEL_25;
  v11 = v15 + 1;
  if (v15 + 1 >= v33)
    goto LABEL_6;
  v16 = v32[v11];
  if (v16)
    goto LABEL_25;
  v11 = v15 + 2;
  if (v15 + 2 >= v33)
    goto LABEL_6;
  v16 = v32[v11];
  if (v16)
  {
LABEL_25:
    v10 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v11 << 6);
    goto LABEL_26;
  }
  v17 = v15 + 3;
  if (v17 >= v33)
    goto LABEL_6;
  v16 = v32[v17];
  if (v16)
  {
    v11 = v17;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v11 >= v33)
      goto LABEL_6;
    v16 = v32[v11];
    ++v17;
    if (v16)
      goto LABEL_25;
  }
LABEL_48:
  __break(1u);
  return result;
}

unint64_t sub_233B4C6E4(unint64_t result)
{
  uint64_t *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  __int128 *v23;
  BOOL v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(*v1 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain();
    v8 = sub_233B5823C();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      v28 = v4;
      do
      {
        v11 = v2;
        v12 = v7;
        v13 = 24 * v6;
        v14 = v3;
        v15 = *(_QWORD *)(v3 + 48) + 24 * v6;
        v17 = *(_QWORD *)v15;
        v16 = *(_QWORD *)(v15 + 8);
        v18 = *(unsigned __int8 *)(v15 + 16);
        sub_233B58590();
        if (v18 == 253 || v18 == 254 || v18 == 255)
        {
          sub_233B5859C();
        }
        else
        {
          sub_233B5859C();
          sub_233B5859C();
          if ((v18 & 1) != 0)
          {
            sub_233B0486C(v17, v16, 1);
            sub_233B57FCC();
          }
          else
          {
            sub_233B585B4();
          }
        }
        v19 = sub_233B585C0();
        sub_233B4D2B8(v17, v16, v18);
        v7 = v12;
        v20 = v19 & v12;
        v2 = v11;
        if (v11 >= (uint64_t)v9)
        {
          v4 = v28;
          v3 = v14;
          if (v20 < v9)
            goto LABEL_5;
        }
        else
        {
          v4 = v28;
          v3 = v14;
          if (v20 >= v9)
            goto LABEL_15;
        }
        if ((uint64_t)v2 >= (uint64_t)v20)
        {
LABEL_15:
          v21 = *(_QWORD *)(v3 + 48);
          v22 = v21 + 24 * v2;
          v23 = (__int128 *)(v21 + v13);
          if ((uint64_t)(24 * v2) < v13 || v22 >= (unint64_t)v23 + 24 || (v24 = v2 == v6, v2 = v6, !v24))
          {
            v10 = *v23;
            *(_QWORD *)(v22 + 16) = *((_QWORD *)v23 + 2);
            *(_OWORD *)v22 = v10;
            v2 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(_QWORD *)(v4 + ((v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release();
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v25 = *(_QWORD *)(v3 + 16);
  v26 = __OFSUB__(v25, 1);
  v27 = v25 - 1;
  if (v26)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 16) = v27;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

uint64_t sub_233B4C974(unint64_t a1)
{
  unint64_t *v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v3 = sub_233B58320();
    swift_bridgeObjectRelease();
  }
  else
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v4 = *v1;
  if (*v1 >> 62)
  {
    swift_bridgeObjectRetain();
    v5 = sub_233B58320();
    swift_bridgeObjectRelease();
    v6 = v5 + v3;
    if (!__OFADD__(v5, v3))
      goto LABEL_5;
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  v6 = v5 + v3;
  if (__OFADD__(v5, v3))
    goto LABEL_23;
LABEL_5:
  v4 = *v1;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v1 = v4;
  v5 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v4 & 0x8000000000000000) == 0 && (v4 & 0x4000000000000000) == 0)
  {
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
    if (v6 <= *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_15;
    v5 = 1;
  }
  if (v4 >> 62)
    goto LABEL_25;
  v9 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v9 <= v6)
      v9 = v6;
    swift_bridgeObjectRetain();
    v4 = MEMORY[0x23493CC98](v5, v9, 1, v4);
    swift_bridgeObjectRelease();
    *v1 = v4;
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
    result = sub_233B4CB2C(v8 + 8 * *(_QWORD *)(v8 + 16) + 32, (*(_QWORD *)(v8 + 24) >> 1) - *(_QWORD *)(v8 + 16), a1);
    if (v11 >= v3)
      break;
LABEL_24:
    __break(1u);
LABEL_25:
    swift_bridgeObjectRetain();
    v9 = sub_233B58320();
    swift_bridgeObjectRelease();
  }
  if (v11 < 1)
    goto LABEL_19;
  v12 = *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v13 = __OFADD__(v12, v11);
  v14 = v12 + v11;
  if (!v13)
  {
    *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v14;
LABEL_19:
    swift_bridgeObjectRelease();
    return sub_233B58080();
  }
  __break(1u);
  return result;
}

uint64_t sub_233B4CB2C(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t i;
  void (*v12)(_QWORD *);
  uint64_t *v13;
  uint64_t v14;
  uint64_t result;
  uint64_t (*v16[4])();

  v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = sub_233B58320();
    swift_bridgeObjectRelease();
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_19;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    v10 = sub_233B58320();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        sub_233B083C8(&qword_2561142F8, &qword_2561142F0, MEMORY[0x24BEE12E0]);
        swift_bridgeObjectRetain();
        for (i = 0; i != v7; ++i)
        {
          __swift_instantiateConcreteTypeFromMangledName(&qword_2561142F0);
          v12 = sub_233B4CD3C(v16, i, a3);
          v14 = *v13;
          swift_retain();
          ((void (*)(uint64_t (**)(), _QWORD))v12)(v16, 0);
          *(_QWORD *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_256113450);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  result = sub_233B58350();
  __break(1u);
  return result;
}

void (*sub_233B4CD3C(uint64_t (**a1)(), unint64_t a2, uint64_t a3))(_QWORD *a1)
{
  uint64_t (*v6)();

  v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = sub_233B4CDBC(v6, a2, a3);
  return sub_233B4CD90;
}

void sub_233B4CD90(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD))(*a1 + 32))(*a1);
  free(v1);
}

uint64_t (*sub_233B4CDBC(uint64_t (*result)(), unint64_t a2, uint64_t a3))()
{
  uint64_t *v3;
  uint64_t v4;

  v3 = (uint64_t *)result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = MEMORY[0x23493CC8C](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = swift_retain();
LABEL_5:
    *v3 = v4;
    return sub_233B4CE28;
  }
  __break(1u);
  return result;
}

uint64_t sub_233B4CE28()
{
  return swift_release();
}

unint64_t sub_233B4CE30(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  char v6;

  switch((a5 >> 4) & 7)
  {
    case 0u:
      v6 = a5;
      sub_233B0487C(result);
      result = sub_233B4CEBC(a2, a3, a4, v6);
      break;
    case 1u:
    case 2u:
    case 3u:
      result = swift_bridgeObjectRetain();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_233B4CEBC(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t result;

  if ((a4 & 0x80) == 0)
    return swift_bridgeObjectRetain();
  return result;
}

unint64_t sub_233B4CECC(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  char v6;

  switch((a5 >> 4) & 7)
  {
    case 0u:
      v6 = a5;
      sub_233B1AF64(result);
      result = sub_233B33478(a2, a3, a4, v6);
      break;
    case 1u:
    case 2u:
    case 3u:
      result = swift_bridgeObjectRelease();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_233B4CF58()
{
  return type metadata accessor for XPCClient();
}

uint64_t type metadata accessor for XPCClient()
{
  uint64_t result;

  result = qword_25424D5B0;
  if (!qword_25424D5B0)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_233B4CF9C()
{
  uint64_t result;
  unint64_t v1;

  result = sub_233B57E40();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

void sub_233B4D014(const char *a1)
{
  uint64_t v1;

  sub_233B4367C(a1, *(void **)(v1 + 16));
}

unint64_t sub_233B4D02C()
{
  unint64_t result;

  result = qword_25424D518;
  if (!qword_25424D518)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_25424D518);
  }
  return result;
}

uint64_t sub_233B4D068()
{
  uint64_t v0;

  return swift_deallocObject();
}

void sub_233B4D08C()
{
  sub_233B438DC();
}

uint64_t sub_233B4D0AC()
{
  uint64_t v0;

  swift_unknownObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_233B4D0D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_233B2F374;
  v3[3] = v2;
  return swift_task_switch();
}

uint64_t sub_233B4D138(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_233B2E82C;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_2561142B8 + dword_2561142B8))(a1, v4);
}

uint64_t sub_233B4D1A8()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_233B4D1DC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  _QWORD *v9;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = *(_QWORD *)(v1 + 32);
  v7 = *(_QWORD *)(v1 + 40);
  v8 = *(_BYTE *)(v1 + 48);
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_233B2E82C;
  return sub_233B4701C(a1, v4, v5, v6, v7, v8);
}

unint64_t sub_233B4D25C()
{
  unint64_t result;

  result = qword_25424D4C0;
  if (!qword_25424D4C0)
  {
    result = MEMORY[0x23493D400](&protocol conformance descriptor for MessageRegistration, &type metadata for MessageRegistration);
    atomic_store(result, (unint64_t *)&qword_25424D4C0);
  }
  return result;
}

uint64_t sub_233B4D2A0(uint64_t result, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 0xFCu)
    return sub_233B0486C(result, a2, a3 & 1);
  return result;
}

uint64_t sub_233B4D2B8(uint64_t result, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 0xFCu)
    return sub_233B04B94(result, a2, a3 & 1);
  return result;
}

unint64_t sub_233B4D2D0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2561142D8;
  if (!qword_2561142D8)
  {
    v1 = sub_233B57D14();
    result = MEMORY[0x23493D400](MEMORY[0x24BDCAEA8], v1);
    atomic_store(result, (unint64_t *)&qword_2561142D8);
  }
  return result;
}

uint64_t sub_233B4D318()
{
  return swift_deallocObject();
}

uint64_t sub_233B4D328(_QWORD *a1)
{
  uint64_t v1;

  return sub_233B432A4(a1, v1);
}

uint64_t sub_233B4D340()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_233B4D364(uint64_t a1)
{
  uint64_t v1;

  return sub_233B223E8(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t sub_233B4D37C(uint64_t result, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 252)
    return sub_233B4D2B8(result, a2, a3);
  return result;
}

uint64_t sub_233B4D390()
{
  return swift_deallocObject();
}

uint64_t sub_233B4D3A0(_QWORD *a1)
{
  uint64_t v1;

  return sub_233B4308C(a1, v1);
}

uint64_t sub_233B4D3B8(uint64_t a1, uint64_t a2)
{
  __swift_memcpy25_8(a2, a1);
  return a2;
}

_QWORD *sub_233B4D3F4(_QWORD *a1, _QWORD *a2)
{
  __swift_memcpy8_8(a2, a1);
  return a2;
}

unint64_t *sub_233B4D430(unint64_t *a1)
{
  sub_233B0487C(*a1);
  return a1;
}

unint64_t *sub_233B4D458(unint64_t *a1, unint64_t *a2)
{
  assignWithTake for AppState(a2, a1);
  return a2;
}

void sub_233B4D494(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    sub_233B58320();
    swift_bridgeObjectRelease();
  }
  JUMPOUT(0x23493CC98);
}

uint64_t sub_233B4D4FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t result;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_25424D520);
    v3 = sub_233B58284();
    v4 = 0;
    v5 = v3 + 56;
    v29 = v1;
    v30 = a1 + 32;
    while (1)
    {
      v6 = v30 + 24 * v4;
      v8 = *(_QWORD *)v6;
      v7 = *(_QWORD *)(v6 + 8);
      v9 = *(unsigned __int8 *)(v6 + 16);
      sub_233B58590();
      v31 = v4;
      if (v9 == 253 || v9 == 254 || v9 == 255)
      {
        sub_233B5859C();
      }
      else
      {
        sub_233B5859C();
        sub_233B5859C();
        if ((v9 & 1) != 0)
        {
          sub_233B0486C(v8, v7, 1);
          sub_233B57FCC();
        }
        else
        {
          sub_233B585B4();
        }
      }
      result = sub_233B585C0();
      v11 = ~(-1 << *(_BYTE *)(v3 + 32));
      v12 = result & v11;
      v13 = (result & (unint64_t)v11) >> 6;
      v14 = *(_QWORD *)(v5 + 8 * v13);
      v15 = 1 << (result & v11);
      if ((v15 & v14) != 0)
      {
        while (1)
        {
          v16 = *(_QWORD *)(v3 + 48) + 24 * v12;
          v17 = *(_QWORD *)v16;
          v18 = *(_QWORD *)(v16 + 8);
          v19 = *(unsigned __int8 *)(v16 + 16);
          switch(v19)
          {
            case 253:
              if (v9 == 253)
              {
                sub_233B4D2B8(*(_QWORD *)v16, *(_QWORD *)(v16 + 8), 0xFDu);
                v25 = v8;
                v26 = v7;
                v27 = -3;
                goto LABEL_3;
              }
              break;
            case 254:
              if (v9 == 254)
              {
                sub_233B4D2B8(*(_QWORD *)v16, *(_QWORD *)(v16 + 8), 0xFEu);
                v25 = v8;
                v26 = v7;
                v27 = -2;
                goto LABEL_3;
              }
              break;
            case 255:
              if (v9 == 255)
              {
                sub_233B4D2B8(*(_QWORD *)v16, *(_QWORD *)(v16 + 8), 0xFFu);
                v25 = v8;
                v26 = v7;
                v27 = -1;
                goto LABEL_3;
              }
              break;
            default:
              if (v9 <= 0xFC)
              {
                if ((v19 & 1) == 0)
                {
                  sub_233B4D2A0(v8, v7, v9);
                  sub_233B4D2A0(v17, v18, v19);
                  sub_233B4D2B8(v17, v18, v19);
                  result = sub_233B4D2B8(v8, v7, v9);
                  if ((v9 & 1) == 0 && v17 == v8)
                    goto LABEL_40;
                  goto LABEL_26;
                }
                if ((v9 & 1) != 0)
                {
                  if (v17 == v8 && v18 == v7)
                  {
                    sub_233B4D2A0(v8, v7, v9);
                    sub_233B4D2A0(v8, v7, v19);
                    sub_233B4D2B8(v8, v7, v19);
                    sub_233B4D2B8(v8, v7, v9);
LABEL_40:
                    v25 = v8;
                    v26 = v7;
                    v27 = v9;
LABEL_3:
                    sub_233B4D2B8(v25, v26, v27);
                    v1 = v29;
                    goto LABEL_4;
                  }
                  v28 = sub_233B584D0();
                  sub_233B4D2A0(v8, v7, v9);
                  sub_233B4D2A0(v17, v18, v19);
                  sub_233B4D2B8(v17, v18, v19);
                  result = sub_233B4D2B8(v8, v7, v9);
                  if ((v28 & 1) != 0)
                    goto LABEL_40;
                  goto LABEL_26;
                }
              }
              break;
          }
          sub_233B4D2A0(v8, v7, v9);
          sub_233B4D2A0(v17, v18, v19);
          sub_233B4D2B8(v17, v18, v19);
          result = sub_233B4D2B8(v8, v7, v9);
LABEL_26:
          v12 = (v12 + 1) & v11;
          v13 = v12 >> 6;
          v14 = *(_QWORD *)(v5 + 8 * (v12 >> 6));
          v15 = 1 << v12;
          if ((v14 & (1 << v12)) == 0)
          {
            v1 = v29;
            break;
          }
        }
      }
      *(_QWORD *)(v5 + 8 * v13) = v15 | v14;
      v21 = *(_QWORD *)(v3 + 48) + 24 * v12;
      *(_QWORD *)v21 = v8;
      *(_QWORD *)(v21 + 8) = v7;
      *(_BYTE *)(v21 + 16) = v9;
      v22 = *(_QWORD *)(v3 + 16);
      v23 = __OFADD__(v22, 1);
      v24 = v22 + 1;
      if (v23)
        break;
      *(_QWORD *)(v3 + 16) = v24;
LABEL_4:
      v4 = v31 + 1;
      if (v31 + 1 == v1)
        return v3;
    }
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4B08];
  }
  return result;
}

uint64_t sub_233B4D8E8(unint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v5;
  unint64_t v6;
  char v7;
  char v8;
  unint64_t v9;
  unint64_t i;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int isUniquelyReferenced_nonNull_bridgeObject;
  int v16;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  uint64_t v23;

  v5 = swift_bridgeObjectRetain();
  v6 = sub_233B4DC00(v5, a2);
  v8 = v7;
  swift_bridgeObjectRelease();
  if (v2)
    return v6;
  if ((v8 & 1) == 0)
  {
    v9 = v6 + 1;
    if (__OFADD__(v6, 1))
      goto LABEL_54;
    if (*a1 >> 62)
    {
LABEL_55:
      swift_bridgeObjectRetain();
      v22 = sub_233B58320();
      swift_bridgeObjectRelease();
      if (v9 != v22)
        goto LABEL_6;
    }
    else if (v9 != *(_QWORD *)((*a1 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_6:
      for (i = v6 + 5; ; ++i)
      {
        v11 = i - 4;
        v12 = *a1;
        if ((*a1 & 0xC000000000000001) != 0)
          break;
        if ((v11 & 0x8000000000000000) != 0)
        {
          __break(1u);
LABEL_45:
          __break(1u);
LABEL_46:
          __break(1u);
LABEL_47:
          __break(1u);
LABEL_48:
          __break(1u);
LABEL_49:
          __break(1u);
LABEL_50:
          __break(1u);
LABEL_51:
          __break(1u);
LABEL_52:
          __break(1u);
LABEL_53:
          __break(1u);
LABEL_54:
          __break(1u);
          goto LABEL_55;
        }
        if (v11 >= *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_45;
        if (*(_QWORD *)(v12 + 8 * i) != a2)
          goto LABEL_11;
LABEL_31:
        v9 = i - 3;
        if (__OFADD__(v11, 1))
          goto LABEL_46;
        if (*a1 >> 62)
        {
          swift_bridgeObjectRetain();
          v18 = sub_233B58320();
          swift_bridgeObjectRelease();
        }
        else
        {
          v18 = *(_QWORD *)((*a1 & 0xFFFFFFFFFFFFF8) + 0x10);
        }
        if (v9 == v18)
          return v6;
      }
      v19 = MEMORY[0x23493CC8C](i - 4);
      swift_unknownObjectRelease();
      if (v19 == a2)
        goto LABEL_31;
LABEL_11:
      if (v11 == v6)
      {
LABEL_30:
        if (__OFADD__(v6++, 1))
          goto LABEL_47;
        goto LABEL_31;
      }
      v9 = *a1;
      if ((*a1 & 0xC000000000000001) != 0)
      {
        v13 = MEMORY[0x23493CC8C](v6, *a1);
        v9 = *a1;
        if ((*a1 & 0xC000000000000001) == 0)
        {
LABEL_16:
          if ((v11 & 0x8000000000000000) != 0)
            goto LABEL_50;
          if (v11 >= *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_51;
          v14 = *(_QWORD *)(v9 + 8 * i);
          swift_retain();
          goto LABEL_19;
        }
      }
      else
      {
        if ((v6 & 0x8000000000000000) != 0)
          goto LABEL_48;
        if (v6 >= *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_49;
        v13 = *(_QWORD *)(v9 + 8 * v6 + 32);
        swift_retain();
        if ((v9 & 0xC000000000000001) == 0)
          goto LABEL_16;
      }
      v14 = MEMORY[0x23493CC8C](i - 4, v9);
      v9 = *a1;
LABEL_19:
      isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
      *a1 = v9;
      if (!isUniquelyReferenced_nonNull_bridgeObject
        || (v9 & 0x8000000000000000) != 0
        || (v9 & 0x4000000000000000) != 0)
      {
        sub_233B4D494(v9);
      }
      *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 8 * v6 + 0x20) = v14;
      swift_release();
      sub_233B58080();
      v9 = *a1;
      v16 = swift_isUniquelyReferenced_nonNull_bridgeObject();
      *a1 = v9;
      if (!v16 || (v9 & 0x8000000000000000) != 0 || (v9 & 0x4000000000000000) != 0)
        sub_233B4D494(v9);
      if ((v11 & 0x8000000000000000) != 0)
        goto LABEL_52;
      if (v11 >= *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_53;
      *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 8 * i) = v13;
      swift_release();
      sub_233B58080();
      goto LABEL_30;
    }
    return v6;
  }
  v20 = *a1;
  if (!(v20 >> 62))
    return *(_QWORD *)((v20 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  v23 = sub_233B58320();
  swift_bridgeObjectRelease();
  return v23;
}

uint64_t sub_233B4DC00(unint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (a1 >> 62)
    goto LABEL_13;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (v4)
  {
    v5 = 0;
    while (1)
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        v6 = MEMORY[0x23493CC8C](v5, a1);
        swift_unknownObjectRelease();
        if (v6 == a2)
          return v5;
      }
      else if (*(_QWORD *)(a1 + 8 * v5 + 32) == a2)
      {
        return v5;
      }
      if (__OFADD__(v5, 1))
        break;
      if (++v5 == v4)
        return 0;
    }
    __break(1u);
LABEL_13:
    swift_bridgeObjectRetain();
    v4 = sub_233B58320();
    swift_bridgeObjectRelease();
  }
  return 0;
}

uint64_t sub_233B4DCEC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  unint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v6 = a3;
    v3 = a2;
    v5 = a1;
    if (!(*v4 >> 62))
    {
      if (*(_QWORD *)((*v4 & 0xFFFFFFFFFFFFF8) + 0x10) >= a2)
        goto LABEL_4;
LABEL_31:
      __break(1u);
      goto LABEL_32;
    }
  }
  swift_bridgeObjectRetain();
  v23 = sub_233B58320();
  swift_bridgeObjectRelease();
  if (v23 < v3)
    goto LABEL_31;
LABEL_4:
  v8 = v3 - v5;
  if (__OFSUB__(v3, v5))
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  v7 = v5 - v3;
  if (__OFSUB__(0, v8))
  {
LABEL_33:
    __break(1u);
LABEL_34:
    swift_bridgeObjectRetain();
    v9 = sub_233B58320();
    swift_bridgeObjectRelease();
    v10 = v9 + v7;
    if (!__OFADD__(v9, v7))
      goto LABEL_8;
LABEL_36:
    __break(1u);
LABEL_37:
    swift_bridgeObjectRetain();
    v14 = sub_233B58320();
    swift_bridgeObjectRelease();
    v11 = *v4;
    goto LABEL_15;
  }
  if (*v4 >> 62)
    goto LABEL_34;
  v9 = *(_QWORD *)((*v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  v10 = v9 - v8;
  if (__OFADD__(v9, v7))
    goto LABEL_36;
LABEL_8:
  v11 = *v4;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v4 = v11;
  v9 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject
    && (v11 & 0x8000000000000000) == 0
    && (v11 & 0x4000000000000000) == 0)
  {
    v13 = v11 & 0xFFFFFFFFFFFFFF8;
    if (v10 <= *(_QWORD *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_18;
    v9 = 1;
  }
  if (v11 >> 62)
    goto LABEL_37;
  v14 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_15:
  if (v14 <= v10)
    v14 = v10;
  swift_bridgeObjectRetain();
  *v4 = MEMORY[0x23493CC98](v9, v14, 1, v11);
  swift_bridgeObjectRelease();
  v13 = *v4 & 0xFFFFFFFFFFFFFF8;
LABEL_18:
  v15 = v13 + 32;
  v16 = (char *)(v13 + 32 + 8 * v5);
  __swift_instantiateConcreteTypeFromMangledName(v6);
  swift_arrayDestroy();
  if (!v7)
    return sub_233B58080();
  if (!(*v4 >> 62))
  {
    v17 = *(_QWORD *)((*v4 & 0xFFFFFFFFFFFFF8) + 0x10);
    v18 = v17 - v3;
    if (!__OFSUB__(v17, v3))
      goto LABEL_21;
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  swift_bridgeObjectRetain();
  v24 = sub_233B58320();
  swift_bridgeObjectRelease();
  v18 = v24 - v3;
  if (__OFSUB__(v24, v3))
    goto LABEL_40;
LABEL_21:
  if ((v18 & 0x8000000000000000) == 0)
  {
    v19 = (char *)(v15 + 8 * v3);
    if (v5 != v3 || v16 >= &v19[8 * v18])
      memmove(v16, v19, 8 * v18);
    if (!(*v4 >> 62))
    {
      v20 = *(_QWORD *)((*v4 & 0xFFFFFFFFFFFFF8) + 0x10);
      v21 = v20 + v7;
      if (!__OFADD__(v20, v7))
      {
LABEL_27:
        *(_QWORD *)((*v4 & 0xFFFFFFFFFFFFF8) + 0x10) = v21;
        return sub_233B58080();
      }
      goto LABEL_43;
    }
LABEL_41:
    swift_bridgeObjectRetain();
    v25 = sub_233B58320();
    swift_bridgeObjectRelease();
    v21 = v25 + v7;
    if (!__OFADD__(v25, v7))
      goto LABEL_27;
LABEL_43:
    __break(1u);
  }
  result = sub_233B58350();
  __break(1u);
  return result;
}

uint64_t sub_233B4DFE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD v23[2];
  unint64_t v24;
  char *v25;
  uint64_t v26;

  v7 = type metadata accessor for ManagedApp();
  v8 = MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v13 = (char *)v23 - v12;
  result = MEMORY[0x24BEE4AF8];
  v26 = MEMORY[0x24BEE4AF8];
  v15 = *(_QWORD *)(a1 + 16);
  if (v15)
  {
    v23[1] = v3;
    v16 = *(_QWORD *)(v11 + 72);
    v24 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
    v17 = a1 + v24;
    v18 = MEMORY[0x24BEE4AF8];
    v25 = v10;
    do
    {
      sub_233B05134(v17, (uint64_t)v13);
      v19 = *((_QWORD *)v13 + 2) == a2 && *((_QWORD *)v13 + 3) == a3;
      if (v19 || (sub_233B584D0() & 1) != 0)
      {
        sub_233B05178((uint64_t)v13);
      }
      else
      {
        sub_233B4E19C((uint64_t)v13, (uint64_t)v10);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          sub_233B49F20(0, *(_QWORD *)(v18 + 16) + 1, 1);
        v18 = v26;
        v21 = *(_QWORD *)(v26 + 16);
        v20 = *(_QWORD *)(v26 + 24);
        if (v21 >= v20 >> 1)
        {
          sub_233B49F20(v20 > 1, v21 + 1, 1);
          v18 = v26;
        }
        *(_QWORD *)(v18 + 16) = v21 + 1;
        v22 = v18 + v24 + v21 * v16;
        v10 = v25;
        sub_233B4E19C((uint64_t)v25, v22);
      }
      v17 += v16;
      --v15;
    }
    while (v15);
    return v26;
  }
  return result;
}

uint64_t sub_233B4E19C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ManagedApp();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_233B4E1E0()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_256114308;
  if (!qword_256114308)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25424CF18);
    v2 = MEMORY[0x24BEE0D28];
    result = MEMORY[0x23493D400](MEMORY[0x24BEE12C0], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_256114308);
  }
  return result;
}

uint64_t sub_233B4E23C(uint64_t result)
{
  if (result)
    return swift_retain();
  return result;
}

uint64_t sub_233B4E24C(_QWORD *a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD))(v1 + 16))(*a1);
}

uint64_t sub_233B4E270()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_233B4E294(_QWORD *a1)
{
  uint64_t v1;

  return sub_233B433A8(a1, v1);
}

unint64_t sub_233B4E2AC()
{
  unint64_t result;
  uint64_t v1;
  unint64_t v2;

  result = qword_25424D4D8;
  if (!qword_25424D4D8)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25424D900);
    v2 = sub_233B4E310();
    result = MEMORY[0x23493D400](MEMORY[0x24BEE12D0], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_25424D4D8);
  }
  return result;
}

unint64_t sub_233B4E310()
{
  unint64_t result;

  result = qword_25424D4A8;
  if (!qword_25424D4A8)
  {
    result = MEMORY[0x23493D400](&protocol conformance descriptor for XPCClientMessage, &type metadata for XPCClientMessage);
    atomic_store(result, (unint64_t *)&qword_25424D4A8);
  }
  return result;
}

uint64_t sub_233B4E354(uint64_t result)
{
  if (result)
    return swift_release();
  return result;
}

uint64_t sub_233B4E364()
{
  return objectdestroy_37Tm((void (*)(_QWORD, _QWORD))sub_233B4E9B8);
}

uint64_t sub_233B4E370(_QWORD *a1)
{
  uint64_t v1;

  return sub_233B4318C(a1, v1, &qword_25424CF00, &qword_25424CEF8, (void (*)(uint64_t, uint64_t))sub_233B253AC);
}

unint64_t *sub_233B4E3A0(unint64_t *a1)
{
  sub_233B1AF64(*a1);
  return a1;
}

uint64_t sub_233B4E3C8()
{
  return objectdestroy_37Tm((void (*)(_QWORD, _QWORD))sub_233B149B4);
}

uint64_t objectdestroy_37Tm(void (*a1)(_QWORD, _QWORD))
{
  uint64_t v1;
  int v2;

  v2 = *(unsigned __int8 *)(v1 + 24);
  if (v2 != 255)
    a1(*(_QWORD *)(v1 + 16), v2 & 1);
  return swift_deallocObject();
}

uint64_t sub_233B4E40C(_QWORD *a1)
{
  uint64_t v1;

  return sub_233B4318C(a1, v1, &qword_256114318, &qword_256114320, (void (*)(uint64_t, uint64_t))sub_233B25350);
}

uint64_t sub_233B4E43C(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) == 0)
    return swift_bridgeObjectRetain();
  return result;
}

unint64_t sub_233B4E448(unint64_t result)
{
  if ((~result & 0xF000000000000007) != 0)
    return sub_233B1AF64(result);
  return result;
}

uint64_t destroy for XPCClient.Storage(uint64_t a1)
{
  int v2;
  uint64_t result;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v2 = *(unsigned __int8 *)(a1 + 48);
  if (v2 != 255)
    sub_233B149B4(*(_QWORD *)(a1 + 40), v2 & 1);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 72))
    return swift_release();
  return result;
}

uint64_t initializeWithCopy for XPCClient.Storage(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v5 = (uint64_t *)(a2 + 40);
  v6 = *(unsigned __int8 *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v6 == 255)
  {
    *(_QWORD *)(a1 + 40) = *v5;
    *(_BYTE *)(a1 + 48) = *((_BYTE *)v5 + 8);
  }
  else
  {
    v7 = *v5;
    sub_233B4E43C(*v5, v6 & 1);
    *(_QWORD *)(a1 + 40) = v7;
    *(_BYTE *)(a1 + 48) = v6 & 1;
  }
  v8 = *(_QWORD *)(a2 + 72);
  v9 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v9;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v8)
  {
    v10 = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 72) = v8;
    *(_QWORD *)(a1 + 80) = v10;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  }
  return a1;
}

uint64_t assignWithCopy for XPCClient.Storage(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  int v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v4 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 16) = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v5 = (uint64_t *)(a1 + 40);
  v6 = a2 + 5;
  v7 = *((unsigned __int8 *)a2 + 48);
  if (*(unsigned __int8 *)(a1 + 48) == 255)
  {
    if (v7 == 255)
    {
      v9 = *v6;
      *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
      *v5 = v9;
    }
    else
    {
      v14 = v7 & 1;
      v15 = *v6;
      sub_233B4E43C(v15, v7 & 1);
      *(_QWORD *)(a1 + 40) = v15;
      *(_BYTE *)(a1 + 48) = v14;
    }
  }
  else if (v7 == 255)
  {
    sub_233B08348(a1 + 40, qword_2561138B0);
    v8 = *((_BYTE *)a2 + 48);
    *v5 = *v6;
    *(_BYTE *)(a1 + 48) = v8;
  }
  else
  {
    v10 = v7 & 1;
    v11 = *v6;
    sub_233B4E43C(v11, v7 & 1);
    v12 = *(_QWORD *)(a1 + 40);
    v13 = *(_BYTE *)(a1 + 48);
    *(_QWORD *)(a1 + 40) = v11;
    *(_BYTE *)(a1 + 48) = v10;
    sub_233B149B4(v12, v13);
  }
  *(_QWORD *)(a1 + 56) = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v16 = a2[9];
  if (!*(_QWORD *)(a1 + 72))
  {
    if (v16)
    {
      v18 = a2[10];
      *(_QWORD *)(a1 + 72) = v16;
      *(_QWORD *)(a1 + 80) = v18;
      swift_retain();
      return a1;
    }
LABEL_14:
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 9);
    return a1;
  }
  if (!v16)
  {
    swift_release();
    goto LABEL_14;
  }
  v17 = a2[10];
  *(_QWORD *)(a1 + 72) = v16;
  *(_QWORD *)(a1 + 80) = v17;
  swift_retain();
  swift_release();
  return a1;
}

__n128 __swift_memcpy88_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for XPCClient.Storage(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  v4 = (_QWORD *)(a2 + 40);
  v5 = *(unsigned __int8 *)(a1 + 48);
  if (v5 == 255)
    goto LABEL_4;
  v6 = *(unsigned __int8 *)(a2 + 48);
  if (v6 == 255)
  {
    sub_233B08348(a1 + 40, qword_2561138B0);
LABEL_4:
    *(_QWORD *)(a1 + 40) = *v4;
    *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
    goto LABEL_6;
  }
  v7 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = *v4;
  *(_BYTE *)(a1 + 48) = v6 & 1;
  sub_233B149B4(v7, v5 & 1);
LABEL_6:
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(a2 + 72);
  if (!*(_QWORD *)(a1 + 72))
  {
    if (v8)
    {
      v10 = *(_QWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 72) = v8;
      *(_QWORD *)(a1 + 80) = v10;
      return a1;
    }
LABEL_12:
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    return a1;
  }
  if (!v8)
  {
    swift_release();
    goto LABEL_12;
  }
  v9 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = v8;
  *(_QWORD *)(a1 + 80) = v9;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for XPCClient.Storage(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 88))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for XPCClient.Storage(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 88) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 88) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for XPCClient.Storage()
{
  return &type metadata for XPCClient.Storage;
}

uint64_t sub_233B4E998(uint64_t a1)
{
  return sub_233B4D364(a1);
}

__n128 AppProgress.init(state:identifier:)@<Q0>(_QWORD *a1@<X0>, __n128 *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v3;
  unsigned __int8 v4;
  __n128 result;

  v3 = a2[1].n128_u64[0];
  v4 = a2[1].n128_u8[8];
  *(_QWORD *)a3 = *a1;
  result = *a2;
  *(__n128 *)(a3 + 8) = *a2;
  *(_QWORD *)(a3 + 24) = v3;
  *(_BYTE *)(a3 + 32) = v4;
  return result;
}

uint64_t MessageRegistration.description.getter()
{
  uint64_t v0;
  int v1;
  unint64_t v2;

  v1 = *(unsigned __int8 *)(v0 + 16);
  if (v1 == 253)
    return 0x676E6967676F4CLL;
  v2 = 0xD000000000000013;
  if (v1 != 254 && v1 != 255)
  {
    sub_233B5829C();
    swift_bridgeObjectRelease();
    if ((v1 & 1) != 0)
    {
      swift_bridgeObjectRetain();
    }
    else
    {
      sub_233B3DC24();
      sub_233B5820C();
    }
    sub_233B57FD8();
    swift_bridgeObjectRelease();
    return 0xD000000000000013;
  }
  return v2;
}

uint64_t MessageRegistration.hash(into:)()
{
  uint64_t v0;
  int v1;

  v1 = *(unsigned __int8 *)(v0 + 16);
  if (v1 == 253 || v1 == 254 || v1 == 255)
    return sub_233B5859C();
  sub_233B5859C();
  sub_233B5859C();
  if ((v1 & 1) != 0)
    return sub_233B57FCC();
  else
    return sub_233B585B4();
}

uint64_t sub_233B4EB9C()
{
  sub_233B51B70();
  return sub_233B58638();
}

uint64_t sub_233B4EBC4()
{
  sub_233B51B70();
  return sub_233B58644();
}

uint64_t sub_233B4EBEC()
{
  sub_233B51B2C();
  return sub_233B58638();
}

uint64_t sub_233B4EC14()
{
  sub_233B51B2C();
  return sub_233B58644();
}

uint64_t sub_233B4EC3C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_233B4EC70 + 4 * byte_233B5F5C0[*v0]))(0x6C61746143707061, 0xEA0000000000676FLL);
}

uint64_t sub_233B4EC70()
{
  return 0x6574617453707061;
}

unint64_t sub_233B4EC94()
{
  return 0xD000000000000011;
}

uint64_t sub_233B4ECB0()
{
  return 0x676E6967676F6CLL;
}

uint64_t sub_233B4ECC8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_233B53660(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_233B4ECEC()
{
  sub_233B51A60();
  return sub_233B58638();
}

uint64_t sub_233B4ED14()
{
  sub_233B51A60();
  return sub_233B58644();
}

uint64_t sub_233B4ED3C()
{
  sub_233B51AE8();
  return sub_233B58638();
}

uint64_t sub_233B4ED64()
{
  sub_233B51AE8();
  return sub_233B58644();
}

uint64_t sub_233B4ED8C()
{
  sub_233B51AA4();
  return sub_233B58638();
}

uint64_t sub_233B4EDB4()
{
  sub_233B51AA4();
  return sub_233B58644();
}

uint64_t MessageRegistration.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;

  v32 = __swift_instantiateConcreteTypeFromMangledName(&qword_25424D588);
  v30 = *(_QWORD *)(v32 - 8);
  MEMORY[0x24BDAC7A8](v32);
  v28 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_25424D568);
  v25 = *(_QWORD *)(v27 - 8);
  MEMORY[0x24BDAC7A8](v27);
  v24 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = __swift_instantiateConcreteTypeFromMangledName(&qword_25424D578);
  v29 = *(_QWORD *)(v31 - 8);
  MEMORY[0x24BDAC7A8](v31);
  v26 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_25424D570);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_25424D580);
  v33 = *(_QWORD *)(v10 - 8);
  v34 = v10;
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *v1;
  v22 = v1[1];
  v23 = v13;
  v14 = *((unsigned __int8 *)v1 + 16);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_233B51A60();
  sub_233B5862C();
  switch(v14)
  {
    case 253:
      LOBYTE(v35) = 3;
      sub_233B51AA4();
      v17 = v28;
      v18 = v34;
      sub_233B58410();
      (*(void (**)(char *, uint64_t))(v30 + 8))(v17, v32);
      return (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v12, v18);
    case 254:
      LOBYTE(v35) = 2;
      sub_233B51AE8();
      v19 = v24;
      v18 = v34;
      sub_233B58410();
      (*(void (**)(char *, uint64_t))(v25 + 8))(v19, v27);
      return (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v12, v18);
    case 255:
      LOBYTE(v35) = 0;
      sub_233B51B70();
      v15 = v34;
      sub_233B58410();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      break;
    default:
      LOBYTE(v35) = 1;
      sub_233B51B2C();
      v20 = v26;
      v15 = v34;
      sub_233B58410();
      v35 = v23;
      v36 = v22;
      v37 = v14 & 1;
      sub_233B28ACC();
      v21 = v31;
      sub_233B5847C();
      (*(void (**)(char *, uint64_t))(v29 + 8))(v20, v21);
      break;
  }
  return (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v12, v15);
}

uint64_t MessageRegistration.hashValue.getter()
{
  uint64_t v0;
  int v1;

  v1 = *(unsigned __int8 *)(v0 + 16);
  sub_233B58590();
  if (v1 == 253 || v1 == 254 || v1 == 255)
  {
    sub_233B5859C();
  }
  else
  {
    sub_233B5859C();
    sub_233B5859C();
    if ((v1 & 1) != 0)
      sub_233B57FCC();
    else
      sub_233B585B4();
  }
  return sub_233B585C0();
}

uint64_t MessageRegistration.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD v24[13];
  _QWORD *v25;
  uint64_t v26;

  v24[8] = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_25424D220);
  v24[11] = *(_QWORD *)(v3 - 8);
  v24[12] = v3;
  MEMORY[0x24BDAC7A8](v3);
  v24[10] = (char *)v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_25424D200);
  v24[3] = *(_QWORD *)(v5 - 8);
  v24[4] = v5;
  MEMORY[0x24BDAC7A8](v5);
  v24[9] = (char *)v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_25424D210);
  v24[5] = *(_QWORD *)(v7 - 8);
  v24[6] = v7;
  MEMORY[0x24BDAC7A8](v7);
  v24[7] = (char *)v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_25424D208);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_25424D218);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = a1[3];
  v25 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v17);
  sub_233B51A60();
  v18 = v26;
  sub_233B58608();
  if (!v18)
  {
    v24[1] = v9;
    v24[2] = v12;
    v24[0] = v10;
    v26 = v14;
    v19 = sub_233B583F8();
    if (*(_QWORD *)(v19 + 16) == 1)
      __asm { BR              X10 }
    v20 = sub_233B582D8();
    swift_allocError();
    v22 = v21;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256113238);
    *v22 = &type metadata for MessageRegistration;
    sub_233B58374();
    sub_233B582CC();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v20 - 8) + 104))(v22, *MEMORY[0x24BEE26D0], v20);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v26 + 8))(v16, v13);
  }
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)v25);
}

uint64_t sub_233B4F764@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return MessageRegistration.init(from:)(a1, a2);
}

uint64_t sub_233B4F778(_QWORD *a1)
{
  return MessageRegistration.encode(to:)(a1);
}

uint64_t sub_233B4F790()
{
  uint64_t v0;
  int v1;

  v1 = *(unsigned __int8 *)(v0 + 16);
  if (v1 == 253 || v1 == 254 || v1 == 255)
    return sub_233B5859C();
  sub_233B5859C();
  sub_233B5859C();
  if ((v1 & 1) != 0)
    return sub_233B57FCC();
  else
    return sub_233B585B4();
}

uint64_t sub_233B4F834()
{
  uint64_t v0;
  int v1;

  v1 = *(unsigned __int8 *)(v0 + 16);
  sub_233B58590();
  if (v1 == 253 || v1 == 254 || v1 == 255)
  {
    sub_233B5859C();
  }
  else
  {
    sub_233B5859C();
    sub_233B5859C();
    if ((v1 & 1) != 0)
      sub_233B57FCC();
    else
      sub_233B585B4();
  }
  return sub_233B585C0();
}

unint64_t AppProgress.state.getter@<X0>(unint64_t *a1@<X8>)
{
  unint64_t *v1;
  unint64_t v2;

  v2 = *v1;
  *a1 = *v1;
  return sub_233B0487C(v2);
}

uint64_t AppProgress.identifier.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;

  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  v5 = *(_BYTE *)(v1 + 32);
  *(_BYTE *)(a1 + 24) = v5;
  return sub_233B4CEBC(v2, v3, v4, v5);
}

uint64_t sub_233B4F91C()
{
  _BYTE *v0;

  if (*v0)
    return 0x696669746E656469;
  else
    return 0x6574617473;
}

uint64_t sub_233B4F958@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_233B53840(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_233B4F97C()
{
  sub_233B51BB4();
  return sub_233B58638();
}

uint64_t sub_233B4F9A4()
{
  sub_233B51BB4();
  return sub_233B58644();
}

uint64_t AppProgress.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  int v19;
  char v20;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256114348);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v1;
  v8 = v1[1];
  v13 = v1[2];
  v14 = v8;
  v12 = v1[3];
  v19 = *((unsigned __int8 *)v1 + 32);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_233B51BB4();
  sub_233B5862C();
  v15 = v9;
  v20 = 0;
  sub_233B1BD94();
  sub_233B5847C();
  if (!v2)
  {
    v15 = v14;
    v16 = v13;
    v17 = v12;
    v18 = v19;
    v20 = 1;
    sub_233B51BF8();
    sub_233B5847C();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t AppProgress.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unint64_t v15[3];
  char v16;
  char v17;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256114360);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_233B51BB4();
  sub_233B58608();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  v17 = 0;
  sub_233B1C7D4();
  sub_233B583E0();
  v9 = v15[0];
  v17 = 1;
  sub_233B0487C(v15[0]);
  sub_233B51C3C();
  sub_233B583E0();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v10 = v15[0];
  v11 = v15[1];
  v12 = v15[2];
  v13 = v16;
  sub_233B0487C(v9);
  sub_233B4CEBC(v10, v11, v12, v13);
  sub_233B1AF64(v9);
  *(_QWORD *)a2 = v9;
  *(_QWORD *)(a2 + 8) = v10;
  *(_QWORD *)(a2 + 16) = v11;
  *(_QWORD *)(a2 + 24) = v12;
  *(_BYTE *)(a2 + 32) = v13;
  __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  sub_233B1AF64(v9);
  return sub_233B33478(v10, v11, v12, v13);
}

uint64_t sub_233B4FD38(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_233B4FD74 + 4 * byte_233B5F5C8[a1]))(0x72676F7250707061, 0xEB00000000737365);
}

unint64_t sub_233B4FD74()
{
  return 0xD000000000000015;
}

uint64_t sub_233B4FD94()
{
  return 6778732;
}

unint64_t sub_233B4FDA4()
{
  return 0xD000000000000011;
}

uint64_t sub_233B4FDC0()
{
  return 0x6C61746143707061;
}

uint64_t sub_233B4FDDC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return AppProgress.init(from:)(a1, a2);
}

uint64_t sub_233B4FDF0(_QWORD *a1)
{
  return AppProgress.encode(to:)(a1);
}

uint64_t sub_233B4FE04()
{
  sub_233B51CC4();
  return sub_233B58638();
}

uint64_t sub_233B4FE2C()
{
  sub_233B51CC4();
  return sub_233B58644();
}

uint64_t sub_233B4FE54()
{
  return 0x73736572676F7270;
}

uint64_t sub_233B4FE6C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x73736572676F7270 && a2 == 0xE800000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_233B584D0();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_233B4FF00()
{
  sub_233B51E94();
  return sub_233B58638();
}

uint64_t sub_233B4FF28()
{
  sub_233B51E94();
  return sub_233B58644();
}

uint64_t sub_233B4FF50()
{
  unsigned __int8 *v0;

  return sub_233B4FD38(*v0);
}

uint64_t sub_233B4FF58@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_233B53934(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_233B4FF7C()
{
  sub_233B51C80();
  return sub_233B58638();
}

uint64_t sub_233B4FFA4()
{
  sub_233B51C80();
  return sub_233B58644();
}

uint64_t sub_233B4FFCC()
{
  sub_233B51E50();
  return sub_233B58638();
}

uint64_t sub_233B4FFF4()
{
  sub_233B51E50();
  return sub_233B58644();
}

uint64_t sub_233B5001C()
{
  return 6778732;
}

uint64_t sub_233B5002C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 6778732 && a2 == 0xE300000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_233B584D0();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_233B500B0()
{
  sub_233B51E0C();
  return sub_233B58638();
}

uint64_t sub_233B500D8()
{
  sub_233B51E0C();
  return sub_233B58644();
}

uint64_t sub_233B50100()
{
  _BYTE *v0;

  if (*v0)
    return 12639;
  else
    return 12383;
}

uint64_t sub_233B5011C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_233B53B54(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_233B50140()
{
  sub_233B51D4C();
  return sub_233B58638();
}

uint64_t sub_233B50168()
{
  sub_233B51D4C();
  return sub_233B58644();
}

void XPCClientMessage.MessageType.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  _QWORD v12[3];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_25424D228);
  v19 = *(_QWORD *)(v21 - 8);
  MEMORY[0x24BDAC7A8](v21);
  v18 = (char *)v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_25424D238);
  v22 = *(_QWORD *)(v4 - 8);
  v23 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v20 = (char *)v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_25424D248);
  v16 = *(_QWORD *)(v6 - 8);
  v17 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v12[1] = (char *)v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_25424D250);
  v12[2] = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_25424D230);
  v14 = *(_QWORD *)(v8 - 8);
  v15 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_25424D240);
  v27 = *(_QWORD *)(v9 - 8);
  v28 = v9;
  MEMORY[0x24BDAC7A8](v9);
  v10 = *v1;
  v25 = v1[1];
  v26 = v10;
  v24 = v1[2];
  v11 = *((unsigned __int8 *)v1 + 32);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_233B51C80();
  sub_233B5862C();
  __asm { BR              X10 }
}

unint64_t sub_233B503B0()
{
  uint64_t v0;
  unsigned int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_BYTE *)(v4 - 128) = 0;
  v5 = *(_QWORD *)(v4 - 160);
  sub_233B0487C(v5);
  v6 = *(_QWORD *)(v4 - 168);
  v7 = v2;
  sub_233B4CEBC(v6, *(_QWORD *)(v4 - 176), v2, v1);
  sub_233B51E94();
  v8 = *(_QWORD *)(v4 - 144);
  v9 = v0;
  sub_233B58410();
  *(_QWORD *)(v4 - 128) = v5;
  *(_QWORD *)(v4 - 120) = v6;
  v10 = *(_QWORD *)(v4 - 176);
  *(_QWORD *)(v4 - 112) = v10;
  *(_QWORD *)(v4 - 104) = v7;
  *(_BYTE *)(v4 - 96) = v1;
  sub_233B51ED8();
  v11 = *(_QWORD *)(v4 - 248);
  sub_233B5847C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 256) + 8))(v3, v11);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 152) + 8))(v9, v8);
  return sub_233B4CECC(*(_QWORD *)(v4 - 160), *(_QWORD *)(v4 - 168), v10, v7, v1);
}

uint64_t XPCClientMessage.MessageType.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD v26[3];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  char *v39;
  _QWORD *v40;
  uint64_t v41;

  v35 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_25424D530);
  v4 = *(_QWORD *)(v3 - 8);
  v32 = v3;
  v33 = v4;
  MEMORY[0x24BDAC7A8](v3);
  v39 = (char *)v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = __swift_instantiateConcreteTypeFromMangledName(&qword_25424D540);
  v34 = *(_QWORD *)(v31 - 8);
  MEMORY[0x24BDAC7A8](v31);
  v38 = (char *)v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_25424D550);
  v30 = *(_QWORD *)(v27 - 8);
  MEMORY[0x24BDAC7A8](v27);
  v37 = (char *)v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_25424D558);
  v28 = *(_QWORD *)(v8 - 8);
  v29 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v36 = (char *)v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_25424D538);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_25424D548);
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = a1[3];
  v40 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v18);
  sub_233B51C80();
  v19 = v41;
  sub_233B58608();
  if (!v19)
  {
    v26[2] = v13;
    v26[0] = v11;
    v26[1] = v10;
    v41 = v15;
    v20 = sub_233B583F8();
    v21 = v14;
    if (*(_QWORD *)(v20 + 16) == 1)
      __asm { BR              X10 }
    v22 = sub_233B582D8();
    swift_allocError();
    v24 = v23;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256113238);
    *v24 = &type metadata for XPCClientMessage.MessageType;
    sub_233B58374();
    sub_233B582CC();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v22 - 8) + 104))(v24, *MEMORY[0x24BEE26D0], v22);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v41 + 8))(v17, v21);
  }
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)v40);
}

uint64_t sub_233B50F90@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return XPCClientMessage.MessageType.init(from:)(a1, a2);
}

void sub_233B50FA4(_QWORD *a1)
{
  XPCClientMessage.MessageType.encode(to:)(a1);
}

unint64_t XPCClientMessage.type.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;

  v2 = *(_QWORD *)v1;
  v3 = *(_QWORD *)(v1 + 8);
  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  v6 = *(unsigned __int8 *)(v1 + 32);
  *(_BYTE *)(a1 + 32) = v6;
  return sub_233B4CE30(v2, v3, v4, v5, v6);
}

double static XPCClientMessage.connectionEstablished.getter@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 32) = 64;
  return result;
}

uint64_t static XPCClientMessage.appCatalog(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = a1;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_BYTE *)(a2 + 32) = 48;
  return swift_bridgeObjectRetain();
}

uint64_t static XPCClientMessage.appProgress(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v2 = *(_QWORD *)a1;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)a2 = *(_QWORD *)a1;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v4;
  *(_QWORD *)(a2 + 24) = v5;
  v6 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a2 + 32) = v6;
  sub_233B0487C(v2);
  return sub_233B4CEBC(v3, v4, v5, v6);
}

uint64_t static XPCClientMessage.managedAppCatalog(apps:error:)@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  v3 = *a2;
  *(_QWORD *)a3 = a1;
  *(_QWORD *)(a3 + 8) = v3;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_BYTE *)(a3 + 32) = 32;
  return swift_bridgeObjectRetain();
}

uint64_t sub_233B51064()
{
  return 1701869940;
}

uint64_t sub_233B51074@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 1701869940 && a2 == 0xE400000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_233B584D0();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_233B510F8()
{
  sub_233B5204C();
  return sub_233B58638();
}

uint64_t sub_233B51120()
{
  sub_233B5204C();
  return sub_233B58644();
}

uint64_t XPCClientMessage.encode(to:)(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  char v15;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_25424D258);
  v11 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v1;
  v7 = *((_QWORD *)v1 + 2);
  v6 = *((_QWORD *)v1 + 3);
  v8 = *((_BYTE *)v1 + 32);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_233B5204C();
  sub_233B5862C();
  v12 = v10;
  v13 = v7;
  v14 = v6;
  v15 = v8;
  sub_233B52090();
  sub_233B5847C();
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v5, v3);
}

uint64_t XPCClientMessage.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char v9;
  __int128 v10;
  _OWORD v12[2];
  char v13;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_25424D560);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_233B5204C();
  sub_233B58608();
  if (!v2)
  {
    sub_233B520D4();
    sub_233B583E0();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v9 = v13;
    v10 = v12[1];
    *(_OWORD *)a2 = v12[0];
    *(_OWORD *)(a2 + 16) = v10;
    *(_BYTE *)(a2 + 32) = v9;
  }
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
}

uint64_t sub_233B51390@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return XPCClientMessage.init(from:)(a1, a2);
}

uint64_t sub_233B513A4(_QWORD *a1)
{
  return XPCClientMessage.encode(to:)(a1);
}

uint64_t XPCClientProtocol.handleMessage(_:)(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;

  v1 = *(_QWORD *)a1;
  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(unsigned __int8 *)(a1 + 32);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25424D270);
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_233B59630;
  *(_QWORD *)(v6 + 32) = v1;
  *(_QWORD *)(v6 + 40) = v2;
  *(_QWORD *)(v6 + 48) = v3;
  *(_QWORD *)(v6 + 56) = v4;
  *(_BYTE *)(v6 + 64) = v5;
  sub_233B4CE30(v1, v2, v3, v4, v5);
  XPCClientProtocol.handleMessages(_:)((Swift::OpaquePointer)v6);
  return swift_bridgeObjectRelease();
}

Swift::Void __swiftcall XPCClientProtocol.handleMessages(_:)(Swift::OpaquePointer a1)
{
  void *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  void *v5;

  *(Swift::OpaquePointer *)(swift_allocObject() + 16) = a1;
  sub_233B57D98();
  swift_allocObject();
  swift_bridgeObjectRetain_n();
  sub_233B57D8C();
  sub_233B13C48();
  v2 = sub_233B57D80();
  v4 = v3;
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  v5 = (void *)sub_233B57E04();
  objc_msgSend(v1, sel_handleMessages_, v5);

  sub_233B13CD8(v2, v4);
}

Swift::Void __swiftcall XPCClientProtocol.logMessage(_:)(Swift::String a1)
{
  Swift::String v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  v1 = a1;
  v2 = 0;
  v3 = 0;
  v4 = 16;
  swift_bridgeObjectRetain();
  XPCClientProtocol.handleMessage(_:)((uint64_t)&v1);
  swift_bridgeObjectRelease();
}

uint64_t _s22ManagedAppDistribution19MessageRegistrationO2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  char v12;

  v2 = *(_QWORD *)a1;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(unsigned __int8 *)(a1 + 16);
  v5 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(unsigned __int8 *)(a2 + 16);
  switch(v4)
  {
    case 253:
      if (v7 == 253)
      {
        sub_233B4D2B8(*(_QWORD *)a1, v3, 0xFDu);
        v8 = v5;
        v9 = v6;
        v10 = -3;
        goto LABEL_10;
      }
      goto LABEL_12;
    case 254:
      if (v7 == 254)
      {
        sub_233B4D2B8(*(_QWORD *)a1, v3, 0xFEu);
        v8 = v5;
        v9 = v6;
        v10 = -2;
        goto LABEL_10;
      }
      goto LABEL_12;
    case 255:
      if (v7 == 255)
      {
        sub_233B4D2B8(*(_QWORD *)a1, v3, 0xFFu);
        v8 = v5;
        v9 = v6;
        v10 = -1;
LABEL_10:
        sub_233B4D2B8(v8, v9, v10);
        return 1;
      }
      goto LABEL_12;
  }
  if (v7 > 0xFC)
  {
LABEL_12:
    sub_233B4D2A0(*(_QWORD *)a2, *(_QWORD *)(a2 + 8), v7);
    sub_233B4D2A0(v2, v3, v4);
    sub_233B4D2B8(v2, v3, v4);
    sub_233B4D2B8(v5, v6, v7);
    return 0;
  }
  if ((v4 & 1) != 0)
  {
    if ((v7 & 1) == 0)
      goto LABEL_12;
    if (v2 == v5 && v3 == v6)
    {
      sub_233B4D2A0(*(_QWORD *)a1, v3, v7);
      sub_233B4D2A0(v2, v3, v4);
      sub_233B4D2B8(v2, v3, v4);
      v8 = v2;
      v9 = v3;
      v10 = v7;
      goto LABEL_10;
    }
    v12 = sub_233B584D0();
    sub_233B4D2A0(v5, v6, v7);
    sub_233B4D2A0(v2, v3, v4);
    sub_233B4D2B8(v2, v3, v4);
    sub_233B4D2B8(v5, v6, v7);
    if ((v12 & 1) == 0)
      return 0;
  }
  else
  {
    sub_233B4D2A0(*(_QWORD *)a2, *(_QWORD *)(a2 + 8), v7);
    sub_233B4D2A0(v2, v3, v4);
    sub_233B4D2B8(v2, v3, v4);
    sub_233B4D2B8(v5, v6, v7);
    if ((v7 & 1) != 0 || v2 != v5)
      return 0;
  }
  return 1;
}

unint64_t sub_233B51A60()
{
  unint64_t result;

  result = qword_25424D8B8;
  if (!qword_25424D8B8)
  {
    result = MEMORY[0x23493D400](&unk_233B604AC, &type metadata for MessageRegistration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25424D8B8);
  }
  return result;
}

unint64_t sub_233B51AA4()
{
  unint64_t result;

  result = qword_25424D8D0;
  if (!qword_25424D8D0)
  {
    result = MEMORY[0x23493D400](&unk_233B6045C, &type metadata for MessageRegistration.LoggingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_25424D8D0);
  }
  return result;
}

unint64_t sub_233B51AE8()
{
  unint64_t result;

  result = qword_256114330;
  if (!qword_256114330)
  {
    result = MEMORY[0x23493D400](&unk_233B6040C, &type metadata for MessageRegistration.GlobalAppProgressCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256114330);
  }
  return result;
}

unint64_t sub_233B51B2C()
{
  unint64_t result;

  result = qword_256114338;
  if (!qword_256114338)
  {
    result = MEMORY[0x23493D400](&unk_233B603BC, &type metadata for MessageRegistration.AppStateChangeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256114338);
  }
  return result;
}

unint64_t sub_233B51B70()
{
  unint64_t result;

  result = qword_256114340;
  if (!qword_256114340)
  {
    result = MEMORY[0x23493D400](&unk_233B6036C, &type metadata for MessageRegistration.AppCatalogCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256114340);
  }
  return result;
}

unint64_t sub_233B51BB4()
{
  unint64_t result;

  result = qword_256114350;
  if (!qword_256114350)
  {
    result = MEMORY[0x23493D400](&unk_233B6031C, &type metadata for AppProgress.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256114350);
  }
  return result;
}

unint64_t sub_233B51BF8()
{
  unint64_t result;

  result = qword_256114358;
  if (!qword_256114358)
  {
    result = MEMORY[0x23493D400](&protocol conformance descriptor for AppStateUpdateIdentifier, &type metadata for AppStateUpdateIdentifier);
    atomic_store(result, (unint64_t *)&qword_256114358);
  }
  return result;
}

unint64_t sub_233B51C3C()
{
  unint64_t result;

  result = qword_256114368;
  if (!qword_256114368)
  {
    result = MEMORY[0x23493D400](&protocol conformance descriptor for AppStateUpdateIdentifier, &type metadata for AppStateUpdateIdentifier);
    atomic_store(result, (unint64_t *)&qword_256114368);
  }
  return result;
}

unint64_t sub_233B51C80()
{
  unint64_t result;

  result = qword_25424D830;
  if (!qword_25424D830)
  {
    result = MEMORY[0x23493D400](&unk_233B602CC, &type metadata for XPCClientMessage.MessageType.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25424D830);
  }
  return result;
}

unint64_t sub_233B51CC4()
{
  unint64_t result;

  result = qword_25424D498;
  if (!qword_25424D498)
  {
    result = MEMORY[0x23493D400](&unk_233B6027C, &type metadata for XPCClientMessage.MessageType.AppCatalogCodingKeys);
    atomic_store(result, (unint64_t *)&qword_25424D498);
  }
  return result;
}

unint64_t sub_233B51D08()
{
  unint64_t result;

  result = qword_25424D180;
  if (!qword_25424D180)
  {
    result = MEMORY[0x23493D400](&protocol conformance descriptor for XPCApp, &type metadata for XPCApp);
    atomic_store(result, (unint64_t *)&qword_25424D180);
  }
  return result;
}

unint64_t sub_233B51D4C()
{
  unint64_t result;

  result = qword_256114370;
  if (!qword_256114370)
  {
    result = MEMORY[0x23493D400](&unk_233B6022C, &type metadata for XPCClientMessage.MessageType.ManagedAppCatalogCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256114370);
  }
  return result;
}

uint64_t sub_233B51D90(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  result = *a1;
  if (!result)
  {
    v9 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256114378);
    v10 = sub_233B51FC8(a2, a3);
    result = MEMORY[0x23493D400](a4, v9, &v10);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_233B51E0C()
{
  unint64_t result;

  result = qword_256114390;
  if (!qword_256114390)
  {
    result = MEMORY[0x23493D400](&unk_233B601DC, &type metadata for XPCClientMessage.MessageType.LogCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256114390);
  }
  return result;
}

unint64_t sub_233B51E50()
{
  unint64_t result;

  result = qword_25424D858;
  if (!qword_25424D858)
  {
    result = MEMORY[0x23493D400](&unk_233B6018C, &type metadata for XPCClientMessage.MessageType.ConnectionEstablishedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_25424D858);
  }
  return result;
}

unint64_t sub_233B51E94()
{
  unint64_t result;

  result = qword_256114398;
  if (!qword_256114398)
  {
    result = MEMORY[0x23493D400](&unk_233B6013C, &type metadata for XPCClientMessage.MessageType.AppProgressCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256114398);
  }
  return result;
}

unint64_t sub_233B51ED8()
{
  unint64_t result;

  result = qword_2561143A0;
  if (!qword_2561143A0)
  {
    result = MEMORY[0x23493D400](&protocol conformance descriptor for AppProgress, &type metadata for AppProgress);
    atomic_store(result, (unint64_t *)&qword_2561143A0);
  }
  return result;
}

uint64_t sub_233B51F1C(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25424D4E0);
    v8 = a2();
    result = MEMORY[0x23493D400](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_233B51F84()
{
  unint64_t result;

  result = qword_25424D378;
  if (!qword_25424D378)
  {
    result = MEMORY[0x23493D400](&protocol conformance descriptor for XPCApp, &type metadata for XPCApp);
    atomic_store(result, (unint64_t *)&qword_25424D378);
  }
  return result;
}

uint64_t sub_233B51FC8(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for ManagedApp();
    result = MEMORY[0x23493D400](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_233B52008()
{
  unint64_t result;

  result = qword_2561143B8;
  if (!qword_2561143B8)
  {
    result = MEMORY[0x23493D400](&protocol conformance descriptor for AppProgress, &type metadata for AppProgress);
    atomic_store(result, (unint64_t *)&qword_2561143B8);
  }
  return result;
}

unint64_t sub_233B5204C()
{
  unint64_t result;

  result = qword_25424D870;
  if (!qword_25424D870)
  {
    result = MEMORY[0x23493D400](&unk_233B600EC, &type metadata for XPCClientMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25424D870);
  }
  return result;
}

unint64_t sub_233B52090()
{
  unint64_t result;

  result = qword_25424D168;
  if (!qword_25424D168)
  {
    result = MEMORY[0x23493D400](&protocol conformance descriptor for XPCClientMessage.MessageType, &type metadata for XPCClientMessage.MessageType);
    atomic_store(result, (unint64_t *)&qword_25424D168);
  }
  return result;
}

unint64_t sub_233B520D4()
{
  unint64_t result;

  result = qword_25424D4A0;
  if (!qword_25424D4A0)
  {
    result = MEMORY[0x23493D400](&protocol conformance descriptor for XPCClientMessage.MessageType, &type metadata for XPCClientMessage.MessageType);
    atomic_store(result, (unint64_t *)&qword_25424D4A0);
  }
  return result;
}

uint64_t sub_233B52118()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_233B5213C(_QWORD *a1)
{
  uint64_t v1;

  return sub_233B0D04C(a1, *(_QWORD *)(v1 + 16));
}

unint64_t sub_233B52158()
{
  unint64_t result;

  result = qword_25424D8E8;
  if (!qword_25424D8E8)
  {
    result = MEMORY[0x23493D400](&protocol conformance descriptor for MessageRegistration, &type metadata for MessageRegistration);
    atomic_store(result, (unint64_t *)&qword_25424D8E8);
  }
  return result;
}

uint64_t destroy for MessageRegistration(uint64_t result)
{
  unsigned int v1;

  v1 = *(unsigned __int8 *)(result + 16);
  if (v1 <= 1)
    return sub_233B04B94(*(_QWORD *)result, *(_QWORD *)(result + 8), v1 != 0);
  return result;
}

uint64_t _s22ManagedAppDistribution19MessageRegistrationOwCP_0(uint64_t a1, uint64_t *a2)
{
  unsigned int v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *((unsigned __int8 *)a2 + 16);
  if (v3 > 1)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
  }
  else
  {
    v4 = v3 != 0;
    v5 = *a2;
    v6 = a2[1];
    sub_233B0486C(*a2, v6, v3 != 0);
    *(_QWORD *)a1 = v5;
    *(_QWORD *)(a1 + 8) = v6;
    *(_BYTE *)(a1 + 16) = v4;
  }
  return a1;
}

uint64_t assignWithCopy for MessageRegistration(uint64_t a1, __int128 *a2)
{
  unsigned int v4;
  unsigned int v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;

  v4 = *(unsigned __int8 *)(a1 + 16);
  v5 = *((unsigned __int8 *)a2 + 16);
  if (v4 > 1)
  {
    if (v5 <= 1)
    {
      v12 = v5 != 0;
      v14 = *(_QWORD *)a2;
      v13 = *((_QWORD *)a2 + 1);
      sub_233B0486C(*(_QWORD *)a2, v13, v5 != 0);
      *(_QWORD *)a1 = v14;
      *(_QWORD *)(a1 + 8) = v13;
      *(_BYTE *)(a1 + 16) = v12;
      return a1;
    }
LABEL_7:
    v15 = *a2;
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    *(_OWORD *)a1 = v15;
    return a1;
  }
  if (v5 > 1)
  {
    sub_233B04B94(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), v4 & 1);
    goto LABEL_7;
  }
  v6 = v5 != 0;
  v8 = *(_QWORD *)a2;
  v7 = *((_QWORD *)a2 + 1);
  sub_233B0486C(*(_QWORD *)a2, v7, v5 != 0);
  v9 = *(_QWORD *)a1;
  v10 = *(_QWORD *)(a1 + 8);
  v11 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)a1 = v8;
  *(_QWORD *)(a1 + 8) = v7;
  *(_BYTE *)(a1 + 16) = v6;
  sub_233B04B94(v9, v10, v11);
  return a1;
}

uint64_t assignWithTake for MessageRegistration(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  char v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(unsigned __int8 *)(a1 + 16);
  if (v4 > 1)
    goto LABEL_5;
  v5 = *(unsigned __int8 *)(a2 + 16);
  v6 = v4 & 1;
  if (v5 > 1)
  {
    sub_233B04B94(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), v6);
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
    return a1;
  }
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v5 != 0;
  sub_233B04B94(v7, v8, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for MessageRegistration(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  unsigned int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFC && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 252);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 > 1)
    v4 = (v3 ^ 0xFF) + 1;
  else
    v4 = 0;
  if (v4 >= 4)
    return v4 - 3;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for MessageRegistration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_BYTE *)(result + 16) = 0;
    *(_DWORD *)result = a2 - 252;
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -3 - a2;
  }
  return result;
}

uint64_t sub_233B52400(uint64_t a1)
{
  unsigned int v1;

  v1 = *(unsigned __int8 *)(a1 + 16);
  if (v1 > 1)
    return (v1 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t sub_233B52414(uint64_t result, unsigned int a2)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
  }
  else if (a2)
  {
    *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for MessageRegistration()
{
  return &type metadata for MessageRegistration;
}

uint64_t destroy for AppProgress(uint64_t a1)
{
  sub_233B1AF64(*(_QWORD *)a1);
  return sub_233B33478(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
}

uint64_t initializeWithCopy for AppProgress(uint64_t a1, unint64_t *a2)
{
  unint64_t *v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a2;
  v4 = *a2;
  sub_233B0487C(*a2);
  *(_QWORD *)a1 = v4;
  v5 = v2[1];
  v6 = v2[2];
  v7 = v2[3];
  LOBYTE(v2) = *((_BYTE *)v2 + 32);
  sub_233B4CEBC(v5, v6, v7, (char)v2);
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_BYTE *)(a1 + 32) = (_BYTE)v2;
  return a1;
}

uint64_t assignWithCopy for AppProgress(uint64_t a1, unint64_t *a2)
{
  unint64_t *v2;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  v2 = a2;
  v4 = *a2;
  sub_233B0487C(*a2);
  v5 = *(_QWORD *)a1;
  *(_QWORD *)a1 = v4;
  sub_233B1AF64(v5);
  v6 = v2[1];
  v7 = v2[2];
  v8 = v2[3];
  LOBYTE(v2) = *((_BYTE *)v2 + 32);
  sub_233B4CEBC(v6, v7, v8, (char)v2);
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 24) = v8;
  v12 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = (_BYTE)v2;
  sub_233B33478(v9, v10, v11, v12);
  return a1;
}

uint64_t assignWithTake for AppProgress(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  char v9;

  sub_233B1AF64(*(_QWORD *)a1);
  v4 = *(_BYTE *)(a2 + 32);
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  v9 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v4;
  sub_233B33478(v5, v6, v7, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for AppProgress(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7F && *(_BYTE *)(a1 + 33))
    return (*(_DWORD *)a1 + 127);
  v3 = (*(_BYTE *)(a1 + 32) & 0x7E | (*(unsigned __int8 *)(a1 + 32) >> 7)) ^ 0x7F;
  if (v3 >= 0x7E)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for AppProgress(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7E)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 127;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7F)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if (a3 >= 0x7F)
      *(_BYTE *)(result + 33) = 0;
    if (a2)
    {
      *(_QWORD *)(result + 8) = 0;
      *(_QWORD *)(result + 16) = 0;
      *(_QWORD *)(result + 24) = 0;
      *(_BYTE *)(result + 32) = 2 * (((-a2 >> 1) & 0x3F) - ((_BYTE)a2 << 6));
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AppProgress()
{
  return &type metadata for AppProgress;
}

ValueMetadata *type metadata accessor for XPCClientMessage()
{
  return &type metadata for XPCClientMessage;
}

unint64_t _s22ManagedAppDistribution16XPCClientMessageVwxx_0(uint64_t a1)
{
  return sub_233B4CECC(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(unsigned __int8 *)(a1 + 32));
}

uint64_t _s22ManagedAppDistribution16XPCClientMessageVwcp_0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(unsigned __int8 *)(a2 + 32);
  sub_233B4CE30(*(_QWORD *)a2, v4, v5, v6, v7);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = v7;
  return a1;
}

uint64_t _s22ManagedAppDistribution16XPCClientMessageVwca_0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(unsigned __int8 *)(a2 + 32);
  sub_233B4CE30(*(_QWORD *)a2, v4, v5, v6, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  v12 = *(unsigned __int8 *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v7;
  sub_233B4CECC(v8, v9, v10, v11, v12);
  return a1;
}

uint64_t _s22ManagedAppDistribution16XPCClientMessageVwta_0(uint64_t a1, uint64_t a2)
{
  char v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  unsigned int v9;

  v3 = *(_BYTE *)(a2 + 32);
  v4 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  v9 = *(unsigned __int8 *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v3;
  sub_233B4CECC(v4, v6, v5, v7, v9);
  return a1;
}

uint64_t _s22ManagedAppDistribution16XPCClientMessageVwet_0(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x3C && *(_BYTE *)(a1 + 33))
    return (*(_DWORD *)a1 + 60);
  v3 = ((4 * *(unsigned __int8 *)(a1 + 32)) & 0x38 | (*(unsigned __int8 *)(a1 + 32) >> 4) & 7) ^ 0x3F;
  if (v3 >= 0x3B)
    v3 = -1;
  return v3 + 1;
}

uint64_t _s22ManagedAppDistribution16XPCClientMessageVwst_0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x3B)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 60;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x3C)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if (a3 >= 0x3C)
      *(_BYTE *)(result + 33) = 0;
    if (a2)
    {
      *(_OWORD *)result = 0u;
      *(_OWORD *)(result + 16) = 0u;
      *(_BYTE *)(result + 32) = 2 * ((((-a2 >> 3) & 7) - 8 * a2) & 0x3F);
    }
  }
  return result;
}

uint64_t sub_233B52880(uint64_t a1)
{
  unsigned int v1;

  v1 = *(unsigned __int8 *)(a1 + 32);
  if (((v1 >> 4) & 4) != 0)
    return (*(_DWORD *)a1 + 4);
  else
    return (v1 >> 4) & 7;
}

uint64_t sub_233B528A0(uint64_t result)
{
  *(_BYTE *)(result + 32) &= 0x8Fu;
  return result;
}

uint64_t sub_233B528B0(uint64_t result, unsigned int a2)
{
  if (a2 < 4)
  {
    *(_BYTE *)(result + 32) = *(_BYTE *)(result + 32) & 0x81 | (16 * a2);
  }
  else
  {
    *(_QWORD *)result = a2 - 4;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 64;
  }
  return result;
}

ValueMetadata *type metadata accessor for XPCClientMessage.MessageType()
{
  return &type metadata for XPCClientMessage.MessageType;
}

ValueMetadata *type metadata accessor for XPCClientMessage.CodingKeys()
{
  return &type metadata for XPCClientMessage.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for XPCClientMessage.MessageType.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_233B52950 + 4 * byte_233B5F5DC[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_233B52984 + 4 * byte_233B5F5D7[v4]))();
}

uint64_t sub_233B52984(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_233B5298C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x233B52994);
  return result;
}

uint64_t sub_233B529A0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x233B529A8);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_233B529AC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_233B529B4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for XPCClientMessage.MessageType.CodingKeys()
{
  return &type metadata for XPCClientMessage.MessageType.CodingKeys;
}

ValueMetadata *type metadata accessor for XPCClientMessage.MessageType.AppProgressCodingKeys()
{
  return &type metadata for XPCClientMessage.MessageType.AppProgressCodingKeys;
}

ValueMetadata *type metadata accessor for XPCClientMessage.MessageType.ConnectionEstablishedCodingKeys()
{
  return &type metadata for XPCClientMessage.MessageType.ConnectionEstablishedCodingKeys;
}

ValueMetadata *type metadata accessor for XPCClientMessage.MessageType.LogCodingKeys()
{
  return &type metadata for XPCClientMessage.MessageType.LogCodingKeys;
}

ValueMetadata *type metadata accessor for XPCClientMessage.MessageType.ManagedAppCatalogCodingKeys()
{
  return &type metadata for XPCClientMessage.MessageType.ManagedAppCatalogCodingKeys;
}

ValueMetadata *type metadata accessor for XPCClientMessage.MessageType.AppCatalogCodingKeys()
{
  return &type metadata for XPCClientMessage.MessageType.AppCatalogCodingKeys;
}

uint64_t _s22ManagedAppDistribution16XPCClientMessageV11MessageTypeO27ManagedAppCatalogCodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_233B52A70 + 4 * byte_233B5F5E6[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_233B52AA4 + 4 * byte_233B5F5E1[v4]))();
}

uint64_t sub_233B52AA4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_233B52AAC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x233B52AB4);
  return result;
}

uint64_t sub_233B52AC0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x233B52AC8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_233B52ACC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_233B52AD4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AppProgress.CodingKeys()
{
  return &type metadata for AppProgress.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for MessageRegistration.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_233B52B3C + 4 * byte_233B5F5F0[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_233B52B70 + 4 * byte_233B5F5EB[v4]))();
}

uint64_t sub_233B52B70(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_233B52B78(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x233B52B80);
  return result;
}

uint64_t sub_233B52B8C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x233B52B94);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_233B52B98(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_233B52BA0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MessageRegistration.CodingKeys()
{
  return &type metadata for MessageRegistration.CodingKeys;
}

ValueMetadata *type metadata accessor for MessageRegistration.AppCatalogCodingKeys()
{
  return &type metadata for MessageRegistration.AppCatalogCodingKeys;
}

uint64_t _s22ManagedAppDistribution16XPCClientMessageV10CodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_233B52C0C + 4 * byte_233B5F5F5[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_233B52C2C + 4 * byte_233B5F5FA[v4]))();
}

_BYTE *sub_233B52C0C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_233B52C2C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_233B52C34(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_233B52C3C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_233B52C44(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_233B52C4C(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for MessageRegistration.AppStateChangeCodingKeys()
{
  return &type metadata for MessageRegistration.AppStateChangeCodingKeys;
}

ValueMetadata *type metadata accessor for MessageRegistration.GlobalAppProgressCodingKeys()
{
  return &type metadata for MessageRegistration.GlobalAppProgressCodingKeys;
}

ValueMetadata *type metadata accessor for MessageRegistration.LoggingCodingKeys()
{
  return &type metadata for MessageRegistration.LoggingCodingKeys;
}

unint64_t sub_233B52C8C()
{
  unint64_t result;

  result = qword_2561143C0;
  if (!qword_2561143C0)
  {
    result = MEMORY[0x23493D400](&unk_233B5FA64, &type metadata for MessageRegistration.AppStateChangeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2561143C0);
  }
  return result;
}

unint64_t sub_233B52CD4()
{
  unint64_t result;

  result = qword_2561143C8;
  if (!qword_2561143C8)
  {
    result = MEMORY[0x23493D400](&unk_233B5FB6C, &type metadata for MessageRegistration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2561143C8);
  }
  return result;
}

unint64_t sub_233B52D1C()
{
  unint64_t result;

  result = qword_2561143D0;
  if (!qword_2561143D0)
  {
    result = MEMORY[0x23493D400](&unk_233B5FC24, &type metadata for AppProgress.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2561143D0);
  }
  return result;
}

unint64_t sub_233B52D64()
{
  unint64_t result;

  result = qword_2561143D8;
  if (!qword_2561143D8)
  {
    result = MEMORY[0x23493D400](&unk_233B5FCDC, &type metadata for XPCClientMessage.MessageType.AppCatalogCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2561143D8);
  }
  return result;
}

unint64_t sub_233B52DAC()
{
  unint64_t result;

  result = qword_2561143E0;
  if (!qword_2561143E0)
  {
    result = MEMORY[0x23493D400](&unk_233B5FD94, &type metadata for XPCClientMessage.MessageType.ManagedAppCatalogCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2561143E0);
  }
  return result;
}

unint64_t sub_233B52DF4()
{
  unint64_t result;

  result = qword_2561143E8;
  if (!qword_2561143E8)
  {
    result = MEMORY[0x23493D400](&unk_233B5FE4C, &type metadata for XPCClientMessage.MessageType.LogCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2561143E8);
  }
  return result;
}

unint64_t sub_233B52E3C()
{
  unint64_t result;

  result = qword_2561143F0;
  if (!qword_2561143F0)
  {
    result = MEMORY[0x23493D400](&unk_233B5FF54, &type metadata for XPCClientMessage.MessageType.AppProgressCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2561143F0);
  }
  return result;
}

unint64_t sub_233B52E84()
{
  unint64_t result;

  result = qword_2561143F8;
  if (!qword_2561143F8)
  {
    result = MEMORY[0x23493D400](&unk_233B6000C, &type metadata for XPCClientMessage.MessageType.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2561143F8);
  }
  return result;
}

unint64_t sub_233B52ECC()
{
  unint64_t result;

  result = qword_256114400;
  if (!qword_256114400)
  {
    result = MEMORY[0x23493D400](&unk_233B600C4, &type metadata for XPCClientMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256114400);
  }
  return result;
}

unint64_t sub_233B52F14()
{
  unint64_t result;

  result = qword_25424D880;
  if (!qword_25424D880)
  {
    result = MEMORY[0x23493D400](&unk_233B60034, &type metadata for XPCClientMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25424D880);
  }
  return result;
}

unint64_t sub_233B52F5C()
{
  unint64_t result;

  result = qword_25424D878;
  if (!qword_25424D878)
  {
    result = MEMORY[0x23493D400](&unk_233B6005C, &type metadata for XPCClientMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25424D878);
  }
  return result;
}

unint64_t sub_233B52FA4()
{
  unint64_t result;

  result = qword_25424D818;
  if (!qword_25424D818)
  {
    result = MEMORY[0x23493D400](&unk_233B5FEC4, &type metadata for XPCClientMessage.MessageType.AppProgressCodingKeys);
    atomic_store(result, (unint64_t *)&qword_25424D818);
  }
  return result;
}

unint64_t sub_233B52FEC()
{
  unint64_t result;

  result = qword_25424D810;
  if (!qword_25424D810)
  {
    result = MEMORY[0x23493D400](&unk_233B5FEEC, &type metadata for XPCClientMessage.MessageType.AppProgressCodingKeys);
    atomic_store(result, (unint64_t *)&qword_25424D810);
  }
  return result;
}

unint64_t sub_233B53034()
{
  unint64_t result;

  result = qword_25424D868;
  if (!qword_25424D868)
  {
    result = MEMORY[0x23493D400](&unk_233B5FE74, &type metadata for XPCClientMessage.MessageType.ConnectionEstablishedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_25424D868);
  }
  return result;
}

unint64_t sub_233B5307C()
{
  unint64_t result;

  result = qword_25424D860;
  if (!qword_25424D860)
  {
    result = MEMORY[0x23493D400](&unk_233B5FE9C, &type metadata for XPCClientMessage.MessageType.ConnectionEstablishedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_25424D860);
  }
  return result;
}

unint64_t sub_233B530C4()
{
  unint64_t result;

  result = qword_25424D850;
  if (!qword_25424D850)
  {
    result = MEMORY[0x23493D400](&unk_233B5FDBC, &type metadata for XPCClientMessage.MessageType.LogCodingKeys);
    atomic_store(result, (unint64_t *)&qword_25424D850);
  }
  return result;
}

unint64_t sub_233B5310C()
{
  unint64_t result;

  result = qword_25424D848;
  if (!qword_25424D848)
  {
    result = MEMORY[0x23493D400](&unk_233B5FDE4, &type metadata for XPCClientMessage.MessageType.LogCodingKeys);
    atomic_store(result, (unint64_t *)&qword_25424D848);
  }
  return result;
}

unint64_t sub_233B53154()
{
  unint64_t result;

  result = qword_25424D828;
  if (!qword_25424D828)
  {
    result = MEMORY[0x23493D400](&unk_233B5FD04, &type metadata for XPCClientMessage.MessageType.ManagedAppCatalogCodingKeys);
    atomic_store(result, (unint64_t *)&qword_25424D828);
  }
  return result;
}

unint64_t sub_233B5319C()
{
  unint64_t result;

  result = qword_25424D820;
  if (!qword_25424D820)
  {
    result = MEMORY[0x23493D400](&unk_233B5FD2C, &type metadata for XPCClientMessage.MessageType.ManagedAppCatalogCodingKeys);
    atomic_store(result, (unint64_t *)&qword_25424D820);
  }
  return result;
}

unint64_t sub_233B531E4()
{
  unint64_t result;

  result = qword_25424D808;
  if (!qword_25424D808)
  {
    result = MEMORY[0x23493D400](&unk_233B5FC4C, &type metadata for XPCClientMessage.MessageType.AppCatalogCodingKeys);
    atomic_store(result, (unint64_t *)&qword_25424D808);
  }
  return result;
}

unint64_t sub_233B5322C()
{
  unint64_t result;

  result = qword_25424D800;
  if (!qword_25424D800)
  {
    result = MEMORY[0x23493D400](&unk_233B5FC74, &type metadata for XPCClientMessage.MessageType.AppCatalogCodingKeys);
    atomic_store(result, (unint64_t *)&qword_25424D800);
  }
  return result;
}

unint64_t sub_233B53274()
{
  unint64_t result;

  result = qword_25424D840;
  if (!qword_25424D840)
  {
    result = MEMORY[0x23493D400](&unk_233B5FF7C, &type metadata for XPCClientMessage.MessageType.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25424D840);
  }
  return result;
}

unint64_t sub_233B532BC()
{
  unint64_t result;

  result = qword_25424D838;
  if (!qword_25424D838)
  {
    result = MEMORY[0x23493D400](&unk_233B5FFA4, &type metadata for XPCClientMessage.MessageType.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25424D838);
  }
  return result;
}

unint64_t sub_233B53304()
{
  unint64_t result;

  result = qword_256114408;
  if (!qword_256114408)
  {
    result = MEMORY[0x23493D400](&unk_233B5FB94, &type metadata for AppProgress.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256114408);
  }
  return result;
}

unint64_t sub_233B5334C()
{
  unint64_t result;

  result = qword_256114410;
  if (!qword_256114410)
  {
    result = MEMORY[0x23493D400](&unk_233B5FBBC, &type metadata for AppProgress.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256114410);
  }
  return result;
}

unint64_t sub_233B53394()
{
  unint64_t result;

  result = qword_25424D8A0;
  if (!qword_25424D8A0)
  {
    result = MEMORY[0x23493D400](&unk_233B5FA8C, &type metadata for MessageRegistration.AppCatalogCodingKeys);
    atomic_store(result, (unint64_t *)&qword_25424D8A0);
  }
  return result;
}

unint64_t sub_233B533DC()
{
  unint64_t result;

  result = qword_25424D898;
  if (!qword_25424D898)
  {
    result = MEMORY[0x23493D400](&unk_233B5FAB4, &type metadata for MessageRegistration.AppCatalogCodingKeys);
    atomic_store(result, (unint64_t *)&qword_25424D898);
  }
  return result;
}

unint64_t sub_233B53424()
{
  unint64_t result;

  result = qword_25424D8B0;
  if (!qword_25424D8B0)
  {
    result = MEMORY[0x23493D400](&unk_233B5F9D4, &type metadata for MessageRegistration.AppStateChangeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_25424D8B0);
  }
  return result;
}

unint64_t sub_233B5346C()
{
  unint64_t result;

  result = qword_25424D8A8;
  if (!qword_25424D8A8)
  {
    result = MEMORY[0x23493D400](&unk_233B5F9FC, &type metadata for MessageRegistration.AppStateChangeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_25424D8A8);
  }
  return result;
}

unint64_t sub_233B534B4()
{
  unint64_t result;

  result = qword_25424D890;
  if (!qword_25424D890)
  {
    result = MEMORY[0x23493D400](&unk_233B5F984, &type metadata for MessageRegistration.GlobalAppProgressCodingKeys);
    atomic_store(result, (unint64_t *)&qword_25424D890);
  }
  return result;
}

unint64_t sub_233B534FC()
{
  unint64_t result;

  result = qword_25424D888;
  if (!qword_25424D888)
  {
    result = MEMORY[0x23493D400](&unk_233B5F9AC, &type metadata for MessageRegistration.GlobalAppProgressCodingKeys);
    atomic_store(result, (unint64_t *)&qword_25424D888);
  }
  return result;
}

unint64_t sub_233B53544()
{
  unint64_t result;

  result = qword_25424D8E0;
  if (!qword_25424D8E0)
  {
    result = MEMORY[0x23493D400](&unk_233B5F934, &type metadata for MessageRegistration.LoggingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_25424D8E0);
  }
  return result;
}

unint64_t sub_233B5358C()
{
  unint64_t result;

  result = qword_25424D8D8;
  if (!qword_25424D8D8)
  {
    result = MEMORY[0x23493D400](&unk_233B5F95C, &type metadata for MessageRegistration.LoggingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_25424D8D8);
  }
  return result;
}

unint64_t sub_233B535D4()
{
  unint64_t result;

  result = qword_25424D8C8;
  if (!qword_25424D8C8)
  {
    result = MEMORY[0x23493D400](&unk_233B5FADC, &type metadata for MessageRegistration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25424D8C8);
  }
  return result;
}

unint64_t sub_233B5361C()
{
  unint64_t result;

  result = qword_25424D8C0;
  if (!qword_25424D8C0)
  {
    result = MEMORY[0x23493D400](&unk_233B5FB04, &type metadata for MessageRegistration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25424D8C0);
  }
  return result;
}

uint64_t sub_233B53660(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6C61746143707061 && a2 == 0xEA0000000000676FLL;
  if (v2 || (sub_233B584D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6574617453707061 && a2 == 0xEE0065676E616843 || (sub_233B584D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x8000000233B61EF0 || (sub_233B584D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x676E6967676F6CLL && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = sub_233B584D0();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_233B53840(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6574617473 && a2 == 0xE500000000000000;
  if (v2 || (sub_233B584D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_233B584D0();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_233B53934(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x72676F7250707061 && a2 == 0xEB00000000737365;
  if (v2 || (sub_233B584D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x8000000233B61F10 || (sub_233B584D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 6778732 && a2 == 0xE300000000000000 || (sub_233B584D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x8000000233B61F30 || (sub_233B584D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6C61746143707061 && a2 == 0xEA0000000000676FLL)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    v6 = sub_233B584D0();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t sub_233B53B54(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 12383 && a2 == 0xE200000000000000;
  if (v2 || (sub_233B584D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 12639 && a2 == 0xE200000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_233B584D0();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t OAuthAuthorizeRequest.endpointURL.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_233B57DF8();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t OAuthAuthorizeRequest.isUpdate.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for OAuthAuthorizeRequest() + 20));
}

uint64_t type metadata accessor for OAuthAuthorizeRequest()
{
  uint64_t result;

  result = qword_256114490;
  if (!qword_256114490)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t OAuthAuthorizeRequest.isMarketplace.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for OAuthAuthorizeRequest() + 24));
}

uint64_t OAuthAuthorizeRequest.init(endpointURL:isUpdate:isMarketplace:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t result;

  v8 = sub_233B57DF8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a4, a1, v8);
  result = type metadata accessor for OAuthAuthorizeRequest();
  *(_BYTE *)(a4 + *(int *)(result + 20)) = a2;
  *(_BYTE *)(a4 + *(int *)(result + 24)) = a3;
  return result;
}

uint64_t OAuthAuthorizeRequest.request()()
{
  uint64_t v0;
  _QWORD *v1;

  v1[3] = v0;
  type metadata accessor for OAuthAuthorizeRequest();
  v1[4] = swift_task_alloc();
  v1[5] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_233B53D98()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  char *v5;

  if (qword_25424D4B0 != -1)
    swift_once();
  v1 = v0[4];
  v2 = v0[5];
  sub_233B53F9C(v0[3], v2);
  sub_233B08530(&qword_256112EE0, (uint64_t (*)(uint64_t))type metadata accessor for OAuthAuthorizeRequest, (uint64_t)&protocol conformance descriptor for OAuthAuthorizeRequest);
  sub_233B08530(&qword_256112EE8, (uint64_t (*)(uint64_t))type metadata accessor for OAuthAuthorizeRequest, (uint64_t)&protocol conformance descriptor for OAuthAuthorizeRequest);
  sub_233B53F9C(v2, v1);
  v0[2] = v1;
  v5 = (char *)&dword_256112ED8 + dword_256112ED8;
  v3 = (_QWORD *)swift_task_alloc();
  v0[6] = v3;
  *v3 = v0;
  v3[1] = sub_233B53E98;
  return ((uint64_t (*)(_QWORD *, void (*)(void *, uint64_t, uint64_t, uint64_t, uint64_t), _QWORD))v5)(v0 + 2, sub_233B53FE0, 0);
}

uint64_t sub_233B53E98()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(*v1 + 56) = v0;
  swift_task_dealloc();
  if (!v0)
    sub_233B540A0(*(_QWORD *)(v2 + 32));
  return swift_task_switch();
}

uint64_t sub_233B53F04()
{
  uint64_t v0;

  sub_233B540A0(*(_QWORD *)(v0 + 40));
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_233B53F4C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  sub_233B540A0(*(_QWORD *)(v0 + 32));
  sub_233B540A0(v1);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_233B53F9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for OAuthAuthorizeRequest();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_233B53FE0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v8;
  void *v9;
  _QWORD v10[6];

  v8 = (void *)sub_233B57E04();
  v10[4] = a4;
  v10[5] = a5;
  v10[0] = MEMORY[0x24BDAC760];
  v10[1] = 1107296256;
  v10[2] = sub_233B42240;
  v10[3] = &block_descriptor_15;
  v9 = _Block_copy(v10);
  swift_retain();
  swift_release();
  objc_msgSend(a1, sel_oauthAuthorize_reply_, v8, v9);
  _Block_release(v9);

}

uint64_t sub_233B540A0(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for OAuthAuthorizeRequest();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_233B540DC()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x6574616470557369;
  if (*v0 != 1)
    v1 = 0x74656B72614D7369;
  if (*v0)
    return v1;
  else
    return 0x746E696F70646E65;
}

uint64_t sub_233B5414C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_233B54BA0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_233B54170()
{
  sub_233B54340();
  return sub_233B58638();
}

uint64_t sub_233B54198()
{
  sub_233B54340();
  return sub_233B58644();
}

uint64_t OAuthAuthorizeRequest.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE v8[16];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256114420);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_233B54340();
  sub_233B5862C();
  v8[15] = 0;
  sub_233B57DF8();
  sub_233B08530(&qword_256112C98, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDAE0]);
  sub_233B5847C();
  if (!v1)
  {
    type metadata accessor for OAuthAuthorizeRequest();
    v8[14] = 1;
    sub_233B58458();
    v8[13] = 2;
    sub_233B58458();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_233B54340()
{
  unint64_t result;

  result = qword_256114428;
  if (!qword_256114428)
  {
    result = MEMORY[0x23493D400](&unk_233B60674, &type metadata for OAuthAuthorizeRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256114428);
  }
  return result;
}

uint64_t OAuthAuthorizeRequest.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char v25;
  char v26;
  char v27;

  v19 = a2;
  v20 = sub_233B57DF8();
  v3 = *(_QWORD *)(v20 - 8);
  MEMORY[0x24BDAC7A8](v20);
  v21 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_256114430);
  v5 = *(_QWORD *)(v22 - 8);
  MEMORY[0x24BDAC7A8](v22);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for OAuthAuthorizeRequest();
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_233B54340();
  v23 = v7;
  v11 = v24;
  sub_233B58608();
  if (v11)
    return __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  v24 = v8;
  v12 = v5;
  v13 = (uint64_t)v10;
  v27 = 0;
  sub_233B08530(&qword_256112CF0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDB10]);
  v15 = v20;
  v14 = v21;
  v16 = v22;
  sub_233B583E0();
  (*(void (**)(uint64_t, char *, uint64_t))(v3 + 32))(v13, v14, v15);
  v26 = 1;
  *(_BYTE *)(v13 + *(int *)(v24 + 20)) = sub_233B583BC() & 1;
  v25 = 2;
  v17 = sub_233B583BC();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v23, v16);
  *(_BYTE *)(v13 + *(int *)(v24 + 24)) = v17 & 1;
  sub_233B53F9C(v13, v19);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  return sub_233B540A0(v13);
}

uint64_t sub_233B54620@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return OAuthAuthorizeRequest.init(from:)(a1, a2);
}

uint64_t sub_233B54634(_QWORD *a1)
{
  return OAuthAuthorizeRequest.encode(to:)(a1);
}

_QWORD *initializeBufferWithCopyOfBuffer for OAuthAuthorizeRequest(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_233B57DF8();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 24);
    *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
    *((_BYTE *)a1 + v8) = *((_BYTE *)a2 + v8);
  }
  return a1;
}

uint64_t initializeWithCopy for OAuthAuthorizeRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = sub_233B57DF8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  return a1;
}

uint64_t assignWithCopy for OAuthAuthorizeRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_233B57DF8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  *(_BYTE *)(a1 + *(int *)(a3 + 24)) = *(_BYTE *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t initializeWithTake for OAuthAuthorizeRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = sub_233B57DF8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  return a1;
}

uint64_t assignWithTake for OAuthAuthorizeRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = sub_233B57DF8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for OAuthAuthorizeRequest()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_233B54878(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;

  v6 = sub_233B57DF8();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 2)
    return ((v9 + 2147483646) & 0x7FFFFFFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for OAuthAuthorizeRequest()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_233B54910(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_233B57DF8();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 20)) = a2 + 1;
  return result;
}

uint64_t sub_233B54988()
{
  uint64_t result;
  unint64_t v1;

  result = sub_233B57DF8();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for OAuthAuthorizeRequest.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_233B54A48 + 4 * byte_233B60505[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_233B54A7C + 4 * byte_233B60500[v4]))();
}

uint64_t sub_233B54A7C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_233B54A84(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x233B54A8CLL);
  return result;
}

uint64_t sub_233B54A98(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x233B54AA0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_233B54AA4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_233B54AAC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for OAuthAuthorizeRequest.CodingKeys()
{
  return &type metadata for OAuthAuthorizeRequest.CodingKeys;
}

unint64_t sub_233B54ACC()
{
  unint64_t result;

  result = qword_2561144D0;
  if (!qword_2561144D0)
  {
    result = MEMORY[0x23493D400](&unk_233B6064C, &type metadata for OAuthAuthorizeRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2561144D0);
  }
  return result;
}

unint64_t sub_233B54B14()
{
  unint64_t result;

  result = qword_2561144D8;
  if (!qword_2561144D8)
  {
    result = MEMORY[0x23493D400](&unk_233B605BC, &type metadata for OAuthAuthorizeRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2561144D8);
  }
  return result;
}

unint64_t sub_233B54B5C()
{
  unint64_t result;

  result = qword_2561144E0;
  if (!qword_2561144E0)
  {
    result = MEMORY[0x23493D400](&unk_233B605E4, &type metadata for OAuthAuthorizeRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2561144E0);
  }
  return result;
}

uint64_t sub_233B54BA0(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x746E696F70646E65 && a2 == 0xEB000000004C5255;
  if (v2 || (sub_233B584D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6574616470557369 && a2 == 0xE800000000000000 || (sub_233B584D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x74656B72614D7369 && a2 == 0xED00006563616C70)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_233B584D0();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t DDMAppOrUpdateManagedAppRequest.app.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_233B14538(v1, a1, type metadata accessor for ManagedAppDeclaration);
}

uint64_t DDMAppOrUpdateManagedAppRequest.app.setter(uint64_t a1)
{
  uint64_t v1;

  return sub_233B54D5C(a1, v1);
}

uint64_t sub_233B54D5C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ManagedAppDeclaration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t (*DDMAppOrUpdateManagedAppRequest.app.modify())()
{
  return nullsub_1;
}

void __swiftcall DDMAppOrUpdateManagedAppRequest.init(app:)()
{
  uint64_t v0;
  uint64_t v1;

  sub_233B1460C(v0, v1, type metadata accessor for ManagedAppDeclaration);
}

uint64_t DDMAppOrUpdateManagedAppRequest.request()()
{
  uint64_t v0;
  _QWORD *v1;

  v1[3] = v0;
  type metadata accessor for DDMAppOrUpdateManagedAppRequest();
  v1[4] = swift_task_alloc();
  v1[5] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_233B54E38()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  char *v5;

  if (qword_25424D4B0 != -1)
    swift_once();
  v1 = v0[4];
  v2 = v0[5];
  sub_233B14538(v0[3], v2, (uint64_t (*)(_QWORD))type metadata accessor for DDMAppOrUpdateManagedAppRequest);
  sub_233B08530(&qword_256112EC0, (uint64_t (*)(uint64_t))type metadata accessor for DDMAppOrUpdateManagedAppRequest, (uint64_t)&protocol conformance descriptor for DDMAppOrUpdateManagedAppRequest);
  sub_233B08530(&qword_256112EB0, (uint64_t (*)(uint64_t))type metadata accessor for DDMAppOrUpdateManagedAppRequest, (uint64_t)&protocol conformance descriptor for DDMAppOrUpdateManagedAppRequest);
  sub_233B14538(v2, v1, (uint64_t (*)(_QWORD))type metadata accessor for DDMAppOrUpdateManagedAppRequest);
  v0[2] = v1;
  v5 = (char *)&dword_256112EB8 + dword_256112EB8;
  v3 = (_QWORD *)swift_task_alloc();
  v0[6] = v3;
  *v3 = v0;
  v3[1] = sub_233B54F40;
  return ((uint64_t (*)(_QWORD *, void (*)(void *, uint64_t, uint64_t, uint64_t, uint64_t), _QWORD))v5)(v0 + 2, sub_233B550A8, 0);
}

uint64_t sub_233B54F40()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(*v1 + 56) = v0;
  swift_task_dealloc();
  if (!v0)
    sub_233B146EC(*(_QWORD *)(v2 + 32), (uint64_t (*)(_QWORD))type metadata accessor for DDMAppOrUpdateManagedAppRequest);
  return swift_task_switch();
}

uint64_t sub_233B54FB4()
{
  uint64_t v0;

  sub_233B146EC(*(_QWORD *)(v0 + 40), (uint64_t (*)(_QWORD))type metadata accessor for DDMAppOrUpdateManagedAppRequest);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_233B55004()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  sub_233B146EC(*(_QWORD *)(v0 + 32), (uint64_t (*)(_QWORD))type metadata accessor for DDMAppOrUpdateManagedAppRequest);
  sub_233B146EC(v1, (uint64_t (*)(_QWORD))type metadata accessor for DDMAppOrUpdateManagedAppRequest);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t type metadata accessor for DDMAppOrUpdateManagedAppRequest()
{
  uint64_t result;

  result = qword_256114570;
  if (!qword_256114570)
    return swift_getSingletonMetadata();
  return result;
}

void sub_233B550A8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_233B5520C(a1, a2, a3, a4, a5, (uint64_t)&block_descriptor_5_1);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> DDMAppOrUpdateManagedAppRequest.request()()
{
  uint64_t v0;
  uint64_t updated;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;

  updated = type metadata accessor for DDMAppOrUpdateManagedAppRequest();
  v2 = MEMORY[0x24BDAC7A8](updated);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)&v7 - v5;
  if (qword_25424D4B0 != -1)
    swift_once();
  sub_233B14538(v0, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for DDMAppOrUpdateManagedAppRequest);
  sub_233B08530(&qword_256112EC0, (uint64_t (*)(uint64_t))type metadata accessor for DDMAppOrUpdateManagedAppRequest, (uint64_t)&protocol conformance descriptor for DDMAppOrUpdateManagedAppRequest);
  sub_233B08530(&qword_256112EB0, (uint64_t (*)(uint64_t))type metadata accessor for DDMAppOrUpdateManagedAppRequest, (uint64_t)&protocol conformance descriptor for DDMAppOrUpdateManagedAppRequest);
  sub_233B14538((uint64_t)v6, (uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for DDMAppOrUpdateManagedAppRequest);
  v8 = v4;
  sub_233B23C80((uint64_t *)&v8, (void (*)(uint64_t, uint64_t, unint64_t, uint64_t (*)(uint64_t, unint64_t), uint64_t))sub_233B55200, 0);
  sub_233B146EC((uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for DDMAppOrUpdateManagedAppRequest);
  sub_233B146EC((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for DDMAppOrUpdateManagedAppRequest);
}

void sub_233B55200(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_233B5520C(a1, a2, a3, a4, a5, (uint64_t)&block_descriptor_16);
}

void sub_233B5520C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v10;
  void *v11;
  _QWORD v12[6];

  v10 = (void *)sub_233B57E04();
  v12[4] = a4;
  v12[5] = a5;
  v12[0] = MEMORY[0x24BDAC760];
  v12[1] = 1107296256;
  v12[2] = sub_233B42240;
  v12[3] = a6;
  v11 = _Block_copy(v12);
  swift_retain();
  swift_release();
  objc_msgSend(a1, sel_addOrUpdateManagedApp_reply_, v10, v11);
  _Block_release(v11);

}

uint64_t sub_233B552C8()
{
  return 7368801;
}

uint64_t sub_233B552D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 7368801 && a2 == 0xE300000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_233B584D0();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_233B5535C()
{
  sub_233B554BC();
  return sub_233B58638();
}

uint64_t sub_233B55384()
{
  sub_233B554BC();
  return sub_233B58644();
}

uint64_t DDMAppOrUpdateManagedAppRequest.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2561144F0);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_233B554BC();
  sub_233B5862C();
  type metadata accessor for ManagedAppDeclaration(0);
  sub_233B08530(&qword_256114500, type metadata accessor for ManagedAppDeclaration, (uint64_t)&protocol conformance descriptor for ManagedAppDeclaration);
  sub_233B5847C();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

unint64_t sub_233B554BC()
{
  unint64_t result;

  result = qword_2561144F8;
  if (!qword_2561144F8)
  {
    result = MEMORY[0x23493D400](&unk_233B60824, &type metadata for DDMAppOrUpdateManagedAppRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2561144F8);
  }
  return result;
}

uint64_t DDMAppOrUpdateManagedAppRequest.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t updated;
  uint64_t v10;
  char *v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v13 = a2;
  v4 = type metadata accessor for ManagedAppDeclaration(0);
  MEMORY[0x24BDAC7A8](v4);
  v15 = (uint64_t)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256114508);
  v14 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  updated = type metadata accessor for DDMAppOrUpdateManagedAppRequest();
  MEMORY[0x24BDAC7A8](updated);
  v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_233B554BC();
  sub_233B58608();
  if (!v2)
  {
    sub_233B08530(&qword_256114510, type metadata accessor for ManagedAppDeclaration, (uint64_t)&protocol conformance descriptor for ManagedAppDeclaration);
    sub_233B583E0();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v8, v6);
    sub_233B1460C(v15, (uint64_t)v11, type metadata accessor for ManagedAppDeclaration);
    sub_233B1460C((uint64_t)v11, v13, (uint64_t (*)(_QWORD))type metadata accessor for DDMAppOrUpdateManagedAppRequest);
  }
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
}

uint64_t sub_233B556CC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return DDMAppOrUpdateManagedAppRequest.init(from:)(a1, a2);
}

uint64_t sub_233B556E0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2561144F0);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_233B554BC();
  sub_233B5862C();
  type metadata accessor for ManagedAppDeclaration(0);
  sub_233B08530(&qword_256114500, type metadata accessor for ManagedAppDeclaration, (uint64_t)&protocol conformance descriptor for ManagedAppDeclaration);
  sub_233B5847C();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t initializeBufferWithCopyOfBuffer for DDMAppOrUpdateManagedAppRequest(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v4 = type metadata accessor for ManagedAppDeclaration(0);
  v5 = *(_DWORD *)(*(_QWORD *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v12 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    v6 = (int *)v4;
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    v8 = a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v8;
    *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
    v9 = a2[6];
    *(_QWORD *)(a1 + 40) = a2[5];
    *(_QWORD *)(a1 + 48) = v9;
    v10 = a2 + 7;
    v11 = a2[8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v11 >> 60 == 15)
    {
      *(_OWORD *)(a1 + 56) = *(_OWORD *)v10;
    }
    else
    {
      v13 = *v10;
      sub_233B13D4C(*v10, v11);
      *(_QWORD *)(a1 + 56) = v13;
      *(_QWORD *)(a1 + 64) = v11;
    }
    v14 = v6[9];
    v15 = (_BYTE *)(a1 + v14);
    v16 = (uint64_t)a2 + v14;
    *v15 = *((_BYTE *)a2 + v14);
    v15[1] = *((_BYTE *)a2 + v14 + 1);
    v17 = *(int *)(type metadata accessor for ManagedAppDeclaration.InstallBehavior(0) + 24);
    v18 = &v15[v17];
    v19 = v16 + v17;
    type metadata accessor for ManagedAppDeclaration.InstallBehavior.PurchaseMethodEnum(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v20 = sub_233B57DF8();
      (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v18, v19, v20);
    }
    else
    {
      v21 = *(_QWORD *)v19;
      v22 = *(_QWORD *)(v19 + 8);
      v23 = *(_BYTE *)(v19 + 16);
      sub_233B0486C(*(_QWORD *)v19, v22, v23);
      *(_QWORD *)v18 = v21;
      *((_QWORD *)v18 + 1) = v22;
      v18[16] = v23;
      v18[17] = *(_BYTE *)(v19 + 17);
    }
    swift_storeEnumTagMultiPayload();
    *(_BYTE *)(a1 + v6[10]) = *((_BYTE *)a2 + v6[10]);
    v24 = v6[11];
    v25 = a1 + v24;
    v26 = (uint64_t)a2 + v24;
    *(_QWORD *)v25 = *(_QWORD *)v26;
    *(_BYTE *)(v25 + 8) = *(_BYTE *)(v26 + 8);
    *(_QWORD *)(a1 + v6[12]) = *(uint64_t *)((char *)a2 + v6[12]);
  }
  return a1;
}

uint64_t destroy for DDMAppOrUpdateManagedAppRequest(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v2 = *(_QWORD *)(a1 + 64);
  if (v2 >> 60 != 15)
    sub_233B13CD8(*(_QWORD *)(a1 + 56), v2);
  v3 = a1 + *(int *)(type metadata accessor for ManagedAppDeclaration(0) + 36);
  v4 = v3 + *(int *)(type metadata accessor for ManagedAppDeclaration.InstallBehavior(0) + 24);
  type metadata accessor for ManagedAppDeclaration.InstallBehavior.PurchaseMethodEnum(0);
  if (swift_getEnumCaseMultiPayload() != 1)
    return sub_233B04B94(*(_QWORD *)v4, *(_QWORD *)(v4 + 8), *(_BYTE *)(v4 + 16));
  v5 = sub_233B57DF8();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t initializeWithCopy for DDMAppOrUpdateManagedAppRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v6;
  v7 = (uint64_t *)(a2 + 56);
  v8 = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v8 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 56) = *(_OWORD *)v7;
  }
  else
  {
    v9 = *v7;
    sub_233B13D4C(*v7, v8);
    *(_QWORD *)(a1 + 56) = v9;
    *(_QWORD *)(a1 + 64) = v8;
  }
  v10 = (int *)type metadata accessor for ManagedAppDeclaration(0);
  v11 = v10[9];
  v12 = (_BYTE *)(a1 + v11);
  v13 = a2 + v11;
  *v12 = *(_BYTE *)(a2 + v11);
  v12[1] = *(_BYTE *)(a2 + v11 + 1);
  v14 = *(int *)(type metadata accessor for ManagedAppDeclaration.InstallBehavior(0) + 24);
  v15 = &v12[v14];
  v16 = v13 + v14;
  type metadata accessor for ManagedAppDeclaration.InstallBehavior.PurchaseMethodEnum(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v17 = sub_233B57DF8();
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v15, v16, v17);
  }
  else
  {
    v18 = *(_QWORD *)v16;
    v19 = *(_QWORD *)(v16 + 8);
    v20 = *(_BYTE *)(v16 + 16);
    sub_233B0486C(*(_QWORD *)v16, v19, v20);
    *(_QWORD *)v15 = v18;
    *((_QWORD *)v15 + 1) = v19;
    v15[16] = v20;
    v15[17] = *(_BYTE *)(v16 + 17);
  }
  swift_storeEnumTagMultiPayload();
  *(_BYTE *)(a1 + v10[10]) = *(_BYTE *)(a2 + v10[10]);
  v21 = v10[11];
  v22 = a1 + v21;
  v23 = a2 + v21;
  *(_QWORD *)v22 = *(_QWORD *)v23;
  *(_BYTE *)(v22 + 8) = *(_BYTE *)(v23 + 8);
  *(_QWORD *)(a1 + v10[12]) = *(_QWORD *)(a2 + v10[12]);
  return a1;
}

uint64_t assignWithCopy for DDMAppOrUpdateManagedAppRequest(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int *v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = (uint64_t *)(a2 + 56);
  v5 = *(_QWORD *)(a2 + 64);
  if (*(_QWORD *)(a1 + 64) >> 60 == 15)
  {
    if (v5 >> 60 != 15)
    {
      v6 = *v4;
      sub_233B13D4C(*v4, *(_QWORD *)(a2 + 64));
      *(_QWORD *)(a1 + 56) = v6;
      *(_QWORD *)(a1 + 64) = v5;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v5 >> 60 == 15)
  {
    sub_233B3E3B4(a1 + 56);
LABEL_6:
    *(_OWORD *)(a1 + 56) = *(_OWORD *)v4;
    goto LABEL_8;
  }
  v7 = *v4;
  sub_233B13D4C(*v4, *(_QWORD *)(a2 + 64));
  v8 = *(_QWORD *)(a1 + 56);
  v9 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = v7;
  *(_QWORD *)(a1 + 64) = v5;
  sub_233B13CD8(v8, v9);
LABEL_8:
  v10 = (int *)type metadata accessor for ManagedAppDeclaration(0);
  v11 = v10[9];
  v12 = (_BYTE *)(a1 + v11);
  v13 = a2 + v11;
  *v12 = *(_BYTE *)(a2 + v11);
  v12[1] = *(_BYTE *)(a2 + v11 + 1);
  v14 = type metadata accessor for ManagedAppDeclaration.InstallBehavior(0);
  if (a1 != a2)
  {
    v15 = *(int *)(v14 + 24);
    v16 = (uint64_t)&v12[v15];
    v17 = v13 + v15;
    sub_233B146EC(v16, type metadata accessor for ManagedAppDeclaration.InstallBehavior.PurchaseMethodEnum);
    type metadata accessor for ManagedAppDeclaration.InstallBehavior.PurchaseMethodEnum(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v18 = sub_233B57DF8();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
    }
    else
    {
      v19 = *(_QWORD *)v17;
      v20 = *(_QWORD *)(v17 + 8);
      v21 = *(_BYTE *)(v17 + 16);
      sub_233B0486C(*(_QWORD *)v17, v20, v21);
      *(_QWORD *)v16 = v19;
      *(_QWORD *)(v16 + 8) = v20;
      *(_BYTE *)(v16 + 16) = v21;
      *(_BYTE *)(v16 + 17) = *(_BYTE *)(v17 + 17);
    }
    swift_storeEnumTagMultiPayload();
  }
  *(_BYTE *)(a1 + v10[10]) = *(_BYTE *)(a2 + v10[10]);
  v22 = v10[11];
  v23 = a1 + v22;
  v24 = (uint64_t *)(a2 + v22);
  v25 = *v24;
  *(_BYTE *)(v23 + 8) = *((_BYTE *)v24 + 8);
  *(_QWORD *)v23 = v25;
  *(_QWORD *)(a1 + v10[12]) = *(_QWORD *)(a2 + v10[12]);
  return a1;
}

uint64_t initializeWithTake for DDMAppOrUpdateManagedAppRequest(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  int *v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  v5 = (int *)type metadata accessor for ManagedAppDeclaration(0);
  v6 = v5[9];
  v7 = (_BYTE *)(a1 + v6);
  v8 = a2 + v6;
  *v7 = *(_BYTE *)(a2 + v6);
  v7[1] = *(_BYTE *)(a2 + v6 + 1);
  v9 = *(int *)(type metadata accessor for ManagedAppDeclaration.InstallBehavior(0) + 24);
  v10 = &v7[v9];
  v11 = (const void *)(v8 + v9);
  v12 = type metadata accessor for ManagedAppDeclaration.InstallBehavior.PurchaseMethodEnum(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v13 = sub_233B57DF8();
    (*(void (**)(_BYTE *, const void *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v10, v11, v13);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  *(_BYTE *)(a1 + v5[10]) = *(_BYTE *)(a2 + v5[10]);
  v14 = v5[11];
  v15 = a1 + v14;
  v16 = a2 + v14;
  *(_QWORD *)v15 = *(_QWORD *)v16;
  *(_BYTE *)(v15 + 8) = *(_BYTE *)(v16 + 8);
  *(_QWORD *)(a1 + v5[12]) = *(_QWORD *)(a2 + v5[12]);
  return a1;
}

uint64_t assignWithTake for DDMAppOrUpdateManagedAppRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v6;
  swift_bridgeObjectRelease();
  v7 = (_OWORD *)(a2 + 56);
  v8 = *(_QWORD *)(a1 + 64);
  if (v8 >> 60 == 15)
    goto LABEL_4;
  v9 = *(_QWORD *)(a2 + 64);
  if (v9 >> 60 == 15)
  {
    sub_233B3E3B4(a1 + 56);
LABEL_4:
    *(_OWORD *)(a1 + 56) = *v7;
    goto LABEL_6;
  }
  v10 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)v7;
  *(_QWORD *)(a1 + 64) = v9;
  sub_233B13CD8(v10, v8);
LABEL_6:
  v11 = (int *)type metadata accessor for ManagedAppDeclaration(0);
  v12 = v11[9];
  v13 = (_BYTE *)(a1 + v12);
  v14 = a2 + v12;
  *v13 = *(_BYTE *)(a2 + v12);
  v13[1] = *(_BYTE *)(a2 + v12 + 1);
  v15 = type metadata accessor for ManagedAppDeclaration.InstallBehavior(0);
  if (a1 != a2)
  {
    v16 = *(int *)(v15 + 24);
    v17 = &v13[v16];
    v18 = (const void *)(v14 + v16);
    sub_233B146EC((uint64_t)v17, type metadata accessor for ManagedAppDeclaration.InstallBehavior.PurchaseMethodEnum);
    v19 = type metadata accessor for ManagedAppDeclaration.InstallBehavior.PurchaseMethodEnum(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v20 = sub_233B57DF8();
      (*(void (**)(_BYTE *, const void *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v17, v18, v20);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
  }
  *(_BYTE *)(a1 + v11[10]) = *(_BYTE *)(a2 + v11[10]);
  v21 = v11[11];
  v22 = a1 + v21;
  v23 = a2 + v21;
  *(_QWORD *)v22 = *(_QWORD *)v23;
  *(_BYTE *)(v22 + 8) = *(_BYTE *)(v23 + 8);
  *(_QWORD *)(a1 + v11[12]) = *(_QWORD *)(a2 + v11[12]);
  return a1;
}

uint64_t getEnumTagSinglePayload for DDMAppOrUpdateManagedAppRequest()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_233B56120(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ManagedAppDeclaration(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for DDMAppOrUpdateManagedAppRequest()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_233B56168(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ManagedAppDeclaration(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t sub_233B561A8()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for ManagedAppDeclaration(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for DDMAppOrUpdateManagedAppRequest.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_233B56250 + 4 * byte_233B606D0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_233B56270 + 4 * byte_233B606D5[v4]))();
}

_BYTE *sub_233B56250(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_233B56270(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_233B56278(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_233B56280(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_233B56288(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_233B56290(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for DDMAppOrUpdateManagedAppRequest.CodingKeys()
{
  return &type metadata for DDMAppOrUpdateManagedAppRequest.CodingKeys;
}

unint64_t sub_233B562B0()
{
  unint64_t result;

  result = qword_2561145A8;
  if (!qword_2561145A8)
  {
    result = MEMORY[0x23493D400](&unk_233B607FC, &type metadata for DDMAppOrUpdateManagedAppRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2561145A8);
  }
  return result;
}

unint64_t sub_233B562F8()
{
  unint64_t result;

  result = qword_2561145B0;
  if (!qword_2561145B0)
  {
    result = MEMORY[0x23493D400](&unk_233B6076C, &type metadata for DDMAppOrUpdateManagedAppRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2561145B0);
  }
  return result;
}

unint64_t sub_233B56340()
{
  unint64_t result;

  result = qword_2561145B8;
  if (!qword_2561145B8)
  {
    result = MEMORY[0x23493D400](&unk_233B60794, &type metadata for DDMAppOrUpdateManagedAppRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2561145B8);
  }
  return result;
}

_QWORD *AppStateUpdateIdentifier.appStateIdentifiers.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t inited;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  char v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;

  v2 = *(_QWORD *)v0;
  v1 = *(_QWORD *)(v0 + 8);
  v3 = *(_QWORD *)(v0 + 16);
  v4 = *(char *)(v0 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25424CEE0);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_233B60880;
  if (v4 < 0)
  {
    v7 = 0;
    v1 = 0;
    v6 = -1;
  }
  else
  {
    sub_233B4CEBC(v2, v1, v3, v4);
    swift_bridgeObjectRetain();
    v6 = 1;
    v7 = v2;
  }
  *(_QWORD *)(inited + 32) = v7;
  *(_QWORD *)(inited + 40) = v1;
  *(_BYTE *)(inited + 48) = v6;
  swift_bridgeObjectRelease();
  if ((v4 & 1) != 0)
    v8 = 0;
  else
    v8 = v3;
  if (v4 < 0)
    v9 = v2;
  else
    v9 = v8;
  v10 = v4 & 0xFFFFFF81;
  if ((v4 & 0xFFFFFF81) == 1)
    v11 = -1;
  else
    v11 = 0;
  *(_QWORD *)(inited + 56) = v9;
  *(_QWORD *)(inited + 64) = 0;
  *(_BYTE *)(inited + 72) = v11;
  if (v4 < 0)
  {
    v12 = (_QWORD *)MEMORY[0x24BEE4AF8];
    if (v10 == 1)
      goto LABEL_24;
    goto LABEL_19;
  }
  sub_233B0486C(v7, v1, 1);
  v12 = sub_233B0ADFC(0, 1, 1, MEMORY[0x24BEE4AF8]);
  v14 = v12[2];
  v13 = v12[3];
  if (v14 >= v13 >> 1)
    v12 = sub_233B0ADFC((_QWORD *)(v13 > 1), v14 + 1, 1, v12);
  v12[2] = v14 + 1;
  v15 = &v12[3 * v14];
  v15[4] = v7;
  v15[5] = v1;
  *((_BYTE *)v15 + 48) = 1;
  if (v10 != 1)
  {
LABEL_19:
    sub_233B0486C(v9, 0, 0);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v12 = sub_233B0ADFC(0, v12[2] + 1, 1, v12);
    v17 = v12[2];
    v16 = v12[3];
    if (v17 >= v16 >> 1)
      v12 = sub_233B0ADFC((_QWORD *)(v16 > 1), v17 + 1, 1, v12);
    v12[2] = v17 + 1;
    v18 = &v12[3 * v17];
    v18[4] = v9;
    v18[5] = 0;
    *((_BYTE *)v18 + 48) = 0;
  }
LABEL_24:
  swift_release();
  return v12;
}

uint64_t AppStateUpdateIdentifier.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v4;

  v1 = *(_QWORD *)v0;
  v2 = *(char *)(v0 + 24);
  if (v2 < 0)
    return sub_233B584AC();
  if ((v2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    v4 = *(_QWORD *)v0;
    sub_233B4CEBC(v1, *(_QWORD *)(v0 + 8), *(_QWORD *)(v0 + 16), v2);
    sub_233B57FD8();
    sub_233B584AC();
    sub_233B57FD8();
    swift_bridgeObjectRelease();
    return v4;
  }
  return v1;
}

uint64_t AppStateUpdateIdentifier.init(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  char v5;

  if ((a3 & 1) != 0)
    v4 = a2;
  else
    v4 = 0;
  *(_QWORD *)a4 = result;
  *(_QWORD *)(a4 + 8) = v4;
  if ((a3 & 1) != 0)
    v5 = 1;
  else
    v5 = 0x80;
  *(_QWORD *)(a4 + 16) = 0;
  *(_BYTE *)(a4 + 24) = v5;
  return result;
}

uint64_t AppStateUpdateIdentifier.hash(into:)()
{
  uint64_t v0;
  char v1;

  if (*(char *)(v0 + 24) < 0)
  {
    sub_233B5859C();
    return sub_233B585B4();
  }
  v1 = *(_BYTE *)(v0 + 24);
  sub_233B5859C();
  sub_233B57FCC();
  if ((v1 & 1) == 0)
  {
    sub_233B585A8();
    return sub_233B585B4();
  }
  return sub_233B585A8();
}

uint64_t sub_233B5670C()
{
  _BYTE *v0;

  if (*v0)
    return 0x6C7074656B72616DLL;
  else
    return 0xD000000000000016;
}

uint64_t sub_233B56758@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_233B57B10(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_233B5677C()
{
  sub_233B573D0();
  return sub_233B58638();
}

uint64_t sub_233B567A4()
{
  sub_233B573D0();
  return sub_233B58644();
}

uint64_t sub_233B567CC()
{
  _BYTE *v0;

  if (*v0)
    return 0x44496D657469;
  else
    return 0x4449656C646E7562;
}

uint64_t sub_233B56804@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_233B57C20(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_233B56828()
{
  sub_233B57458();
  return sub_233B58638();
}

uint64_t sub_233B56850()
{
  sub_233B57458();
  return sub_233B58644();
}

uint64_t sub_233B56878()
{
  return 0x657449656C707061;
}

uint64_t sub_233B56898@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x657449656C707061 && a2 == 0xEB0000000044496DLL)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_233B584D0();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_233B56944()
{
  sub_233B57414();
  return sub_233B58638();
}

uint64_t sub_233B5696C()
{
  sub_233B57414();
  return sub_233B58644();
}

uint64_t AppStateUpdateIdentifier.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[2];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  char v30;
  char v31;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_2561145C0);
  v20 = *(_QWORD *)(v3 - 8);
  v21 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2561145C8);
  v23 = *(_QWORD *)(v6 - 8);
  v24 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_2561145D0);
  v9 = *(_QWORD *)(v27 - 8);
  MEMORY[0x24BDAC7A8](v27);
  v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = *v1;
  v22 = v1[1];
  v19[1] = v1[2];
  v12 = *((char *)v1 + 24);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_233B573D0();
  sub_233B5862C();
  if (v12 < 0)
  {
    v31 = 1;
    sub_233B57414();
    v17 = v27;
    sub_233B58410();
    v18 = v21;
    sub_233B58488();
    (*(void (**)(char *, uint64_t))(v20 + 8))(v5, v18);
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v17);
  }
  else
  {
    v30 = 0;
    sub_233B57458();
    v13 = v27;
    sub_233B58410();
    v29 = 0;
    v14 = v24;
    v15 = v26;
    sub_233B5844C();
    if (!v15)
    {
      v28 = 1;
      sub_233B58440();
    }
    (*(void (**)(char *, uint64_t))(v23 + 8))(v8, v14);
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v13);
  }
}

uint64_t AppStateUpdateIdentifier.hashValue.getter()
{
  uint64_t v0;
  int v1;

  v1 = *(char *)(v0 + 24);
  sub_233B58590();
  if (v1 < 0)
  {
    sub_233B5859C();
  }
  else
  {
    sub_233B5859C();
    sub_233B57FCC();
    if ((v1 & 1) != 0)
    {
      sub_233B585A8();
      return sub_233B585C0();
    }
    sub_233B585A8();
  }
  sub_233B585B4();
  return sub_233B585C0();
}

uint64_t AppStateUpdateIdentifier.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  _QWORD *v42;
  uint64_t v43;
  char v44;
  char v45;
  char v46;
  char v47;

  v38 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_2561145F0);
  v4 = *(_QWORD *)(v3 - 8);
  v39 = v3;
  v40 = v4;
  MEMORY[0x24BDAC7A8](v3);
  v41 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2561145F8);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_256114600);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1[3];
  v42 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v14);
  sub_233B573D0();
  v15 = v43;
  sub_233B58608();
  if (v15)
    goto LABEL_11;
  v16 = v41;
  v37 = v7;
  v43 = v11;
  v17 = sub_233B583F8();
  if (*(_QWORD *)(v17 + 16) != 1)
  {
    v24 = sub_233B582D8();
    swift_allocError();
    v26 = v25;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256113238);
    *v26 = &type metadata for AppStateUpdateIdentifier;
    sub_233B58374();
    sub_233B582CC();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v24 - 8) + 104))(v26, *MEMORY[0x24BEE26D0], v24);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v43 + 8))(v13, v10);
LABEL_11:
    v20 = (uint64_t)v42;
    return __swift_destroy_boxed_opaque_existential_0(v20);
  }
  if ((*(_BYTE *)(v17 + 32) & 1) != 0)
  {
    v47 = 1;
    sub_233B57414();
    sub_233B58368();
    v18 = v39;
    v19 = sub_233B583EC();
    (*(void (**)(char *, uint64_t))(v40 + 8))(v16, v18);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v43 + 8))(v13, v10);
    v20 = (uint64_t)v42;
    v21 = 0;
    v22 = 0;
    v23 = 0x80;
  }
  else
  {
    v46 = 0;
    sub_233B57458();
    v27 = v9;
    sub_233B58368();
    v45 = 0;
    v28 = v6;
    v29 = v27;
    v30 = sub_233B583B0();
    v21 = v31;
    v32 = v30;
    v44 = 1;
    v22 = sub_233B583A4();
    v23 = v34 & 1;
    (*(void (**)(char *, uint64_t))(v37 + 8))(v29, v28);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v43 + 8))(v13, v10);
    v20 = (uint64_t)v42;
    v19 = v32;
  }
  v35 = v38;
  *v38 = v19;
  v35[1] = v21;
  v35[2] = v22;
  *((_BYTE *)v35 + 24) = v23;
  return __swift_destroy_boxed_opaque_existential_0(v20);
}

uint64_t sub_233B570A4()
{
  uint64_t v0;
  char v1;

  if (*(char *)(v0 + 24) < 0)
  {
    sub_233B5859C();
    return sub_233B585B4();
  }
  v1 = *(_BYTE *)(v0 + 24);
  sub_233B5859C();
  sub_233B57FCC();
  if ((v1 & 1) == 0)
  {
    sub_233B585A8();
    return sub_233B585B4();
  }
  return sub_233B585A8();
}

uint64_t sub_233B57130()
{
  uint64_t v0;
  int v1;

  v1 = *(char *)(v0 + 24);
  sub_233B58590();
  if (v1 < 0)
  {
    sub_233B5859C();
  }
  else
  {
    sub_233B5859C();
    sub_233B57FCC();
    if ((v1 & 1) != 0)
    {
      sub_233B585A8();
      return sub_233B585C0();
    }
    sub_233B585A8();
  }
  sub_233B585B4();
  return sub_233B585C0();
}

uint64_t sub_233B571E0@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return AppStateUpdateIdentifier.init(from:)(a1, a2);
}

uint64_t sub_233B571F4(_QWORD *a1)
{
  return AppStateUpdateIdentifier.encode(to:)(a1);
}

BOOL _s22ManagedAppDistribution0B21StateUpdateIdentifierO2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  char v12;
  _BOOL8 result;

  v2 = *(_QWORD *)a1;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(char *)(a1 + 24);
  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(char *)(a2 + 24);
  if (v5 < 0)
  {
    if (v9 < 0)
    {
      sub_233B33478(*(_QWORD *)a1, v3, v4, v5);
      sub_233B33478(v6, v7, v8, v9);
      return v2 == v6;
    }
    goto LABEL_15;
  }
  if (v9 < 0)
  {
    swift_bridgeObjectRetain();
LABEL_15:
    sub_233B4CEBC(v6, v7, v8, v9);
    sub_233B33478(v2, v3, v4, v5);
    sub_233B33478(v6, v7, v8, v9);
    return 0;
  }
  v10 = *(_QWORD *)a1;
  if (v2 == v6 && v3 == v7)
  {
    sub_233B4CEBC(v10, v3, v8, v9);
    sub_233B4CEBC(v2, v3, v4, v5);
    sub_233B33478(v2, v3, v4, v5);
    sub_233B33478(v2, v3, v8, v9);
    if ((v5 & 1) == 0)
      return (v9 & 1) == 0 && v4 == v8;
  }
  else
  {
    v12 = sub_233B584D0();
    sub_233B4CEBC(v6, v7, v8, v9);
    sub_233B4CEBC(v2, v3, v4, v5);
    sub_233B33478(v2, v3, v4, v5);
    sub_233B33478(v6, v7, v8, v9);
    result = 0;
    if ((v12 & 1) == 0)
      return result;
    if ((v5 & 1) == 0)
      return (v9 & 1) == 0 && v4 == v8;
  }
  return (v9 & 1) != 0;
}

unint64_t sub_233B573D0()
{
  unint64_t result;

  result = qword_2561145D8;
  if (!qword_2561145D8)
  {
    result = MEMORY[0x23493D400](&unk_233B60CD4, &type metadata for AppStateUpdateIdentifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2561145D8);
  }
  return result;
}

unint64_t sub_233B57414()
{
  unint64_t result;

  result = qword_2561145E0;
  if (!qword_2561145E0)
  {
    result = MEMORY[0x23493D400](&unk_233B60C84, &type metadata for AppStateUpdateIdentifier.MarketplaceKitCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2561145E0);
  }
  return result;
}

unint64_t sub_233B57458()
{
  unint64_t result;

  result = qword_2561145E8;
  if (!qword_2561145E8)
  {
    result = MEMORY[0x23493D400](&unk_233B60C34, &type metadata for AppStateUpdateIdentifier.ManagedAppDistributionCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2561145E8);
  }
  return result;
}

unint64_t sub_233B574A0()
{
  unint64_t result;

  result = qword_256114608;
  if (!qword_256114608)
  {
    result = MEMORY[0x23493D400](&protocol conformance descriptor for AppStateUpdateIdentifier, &type metadata for AppStateUpdateIdentifier);
    atomic_store(result, (unint64_t *)&qword_256114608);
  }
  return result;
}

uint64_t destroy for AppStateUpdateIdentifier(uint64_t a1)
{
  return sub_233B33478(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
}

uint64_t initializeWithCopy for AppStateUpdateIdentifier(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_BYTE *)(a2 + 24);
  sub_233B4CEBC(*(_QWORD *)a2, v4, v5, v6);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = v6;
  return a1;
}

uint64_t assignWithCopy for AppStateUpdateIdentifier(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_BYTE *)(a2 + 24);
  sub_233B4CEBC(*(_QWORD *)a2, v4, v5, v6);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  v10 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v6;
  sub_233B33478(v7, v8, v9, v10);
  return a1;
}

__n128 __swift_memcpy25_8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for AppStateUpdateIdentifier(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_BYTE *)(a2 + 24);
  v5 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v3;
  v8 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v4;
  sub_233B33478(v5, v7, v6, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for AppStateUpdateIdentifier(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7F && *(_BYTE *)(a1 + 25))
    return (*(_DWORD *)a1 + 127);
  v3 = (*(_BYTE *)(a1 + 24) & 0x7E | (*(unsigned __int8 *)(a1 + 24) >> 7)) ^ 0x7F;
  if (v3 >= 0x7E)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for AppStateUpdateIdentifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7E)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 127;
    if (a3 >= 0x7F)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if (a3 >= 0x7F)
      *(_BYTE *)(result + 25) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      *(_QWORD *)(result + 16) = 0;
      *(_BYTE *)(result + 24) = 2 * (((-a2 >> 1) & 0x3F) - ((_BYTE)a2 << 6));
    }
  }
  return result;
}

uint64_t sub_233B576CC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 24) >> 7;
}

uint64_t sub_233B576D8(uint64_t result)
{
  *(_BYTE *)(result + 24) &= ~0x80u;
  return result;
}

uint64_t sub_233B576E8(uint64_t result, char a2)
{
  *(_BYTE *)(result + 24) = *(_BYTE *)(result + 24) & 1 | (a2 << 7);
  return result;
}

ValueMetadata *type metadata accessor for AppStateUpdateIdentifier()
{
  return &type metadata for AppStateUpdateIdentifier;
}

ValueMetadata *type metadata accessor for AppStateUpdateIdentifier.CodingKeys()
{
  return &type metadata for AppStateUpdateIdentifier.CodingKeys;
}

uint64_t _s22ManagedAppDistribution24AppStateUpdateIdentifierO10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_233B5776C + 4 * byte_233B60895[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_233B577A0 + 4 * byte_233B60890[v4]))();
}

uint64_t sub_233B577A0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_233B577A8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x233B577B0);
  return result;
}

uint64_t sub_233B577BC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x233B577C4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_233B577C8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_233B577D0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AppStateUpdateIdentifier.ManagedAppDistributionCodingKeys()
{
  return &type metadata for AppStateUpdateIdentifier.ManagedAppDistributionCodingKeys;
}

uint64_t storeEnumTagSinglePayload for AppStateUpdateIdentifier.MarketplaceKitCodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_233B5782C + 4 * byte_233B6089A[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_233B5784C + 4 * byte_233B6089F[v4]))();
}

_BYTE *sub_233B5782C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_233B5784C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_233B57854(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_233B5785C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_233B57864(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_233B5786C(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for AppStateUpdateIdentifier.MarketplaceKitCodingKeys()
{
  return &type metadata for AppStateUpdateIdentifier.MarketplaceKitCodingKeys;
}

unint64_t sub_233B5788C()
{
  unint64_t result;

  result = qword_256114610;
  if (!qword_256114610)
  {
    result = MEMORY[0x23493D400](&unk_233B60A9C, &type metadata for AppStateUpdateIdentifier.MarketplaceKitCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256114610);
  }
  return result;
}

unint64_t sub_233B578D4()
{
  unint64_t result;

  result = qword_256114618;
  if (!qword_256114618)
  {
    result = MEMORY[0x23493D400](&unk_233B60B54, &type metadata for AppStateUpdateIdentifier.ManagedAppDistributionCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256114618);
  }
  return result;
}

unint64_t sub_233B5791C()
{
  unint64_t result;

  result = qword_256114620;
  if (!qword_256114620)
  {
    result = MEMORY[0x23493D400](&unk_233B60C0C, &type metadata for AppStateUpdateIdentifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256114620);
  }
  return result;
}

unint64_t sub_233B57964()
{
  unint64_t result;

  result = qword_256114628;
  if (!qword_256114628)
  {
    result = MEMORY[0x23493D400](&unk_233B60AC4, &type metadata for AppStateUpdateIdentifier.ManagedAppDistributionCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256114628);
  }
  return result;
}

unint64_t sub_233B579AC()
{
  unint64_t result;

  result = qword_256114630;
  if (!qword_256114630)
  {
    result = MEMORY[0x23493D400](&unk_233B60AEC, &type metadata for AppStateUpdateIdentifier.ManagedAppDistributionCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256114630);
  }
  return result;
}

unint64_t sub_233B579F4()
{
  unint64_t result;

  result = qword_256114638;
  if (!qword_256114638)
  {
    result = MEMORY[0x23493D400](&unk_233B60A0C, &type metadata for AppStateUpdateIdentifier.MarketplaceKitCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256114638);
  }
  return result;
}

unint64_t sub_233B57A3C()
{
  unint64_t result;

  result = qword_256114640;
  if (!qword_256114640)
  {
    result = MEMORY[0x23493D400](&unk_233B60A34, &type metadata for AppStateUpdateIdentifier.MarketplaceKitCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256114640);
  }
  return result;
}

unint64_t sub_233B57A84()
{
  unint64_t result;

  result = qword_256114648;
  if (!qword_256114648)
  {
    result = MEMORY[0x23493D400](&unk_233B60B7C, &type metadata for AppStateUpdateIdentifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256114648);
  }
  return result;
}

unint64_t sub_233B57ACC()
{
  unint64_t result;

  result = qword_256114650;
  if (!qword_256114650)
  {
    result = MEMORY[0x23493D400](&unk_233B60BA4, &type metadata for AppStateUpdateIdentifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256114650);
  }
  return result;
}

uint64_t sub_233B57B10(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000016 && a2 == 0x8000000233B61F50 || (sub_233B584D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6C7074656B72616DLL && a2 == 0xEE0074694B656361)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v5 = sub_233B584D0();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_233B57C20(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x4449656C646E7562 && a2 == 0xE800000000000000;
  if (v2 || (sub_233B584D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x44496D657469 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_233B584D0();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_233B57D08()
{
  return MEMORY[0x24BDCAE10]();
}

uint64_t sub_233B57D14()
{
  return MEMORY[0x24BDCAEB0]();
}

uint64_t sub_233B57D20()
{
  return MEMORY[0x24BDCBBC8]();
}

uint64_t sub_233B57D2C()
{
  return MEMORY[0x24BDCBBD8]();
}

uint64_t sub_233B57D38()
{
  return MEMORY[0x24BDCBBF0]();
}

uint64_t sub_233B57D44()
{
  return MEMORY[0x24BDCC930]();
}

uint64_t sub_233B57D50()
{
  return MEMORY[0x24BDCCA20]();
}

uint64_t sub_233B57D5C()
{
  return MEMORY[0x24BDCCA30]();
}

uint64_t sub_233B57D68()
{
  return MEMORY[0x24BDCCA40]();
}

uint64_t sub_233B57D74()
{
  return MEMORY[0x24BDCCA48]();
}

uint64_t sub_233B57D80()
{
  return MEMORY[0x24BDCCA60]();
}

uint64_t sub_233B57D8C()
{
  return MEMORY[0x24BDCCA88]();
}

uint64_t sub_233B57D98()
{
  return MEMORY[0x24BDCCA90]();
}

uint64_t sub_233B57DA4()
{
  return MEMORY[0x24BDCD2F8]();
}

uint64_t sub_233B57DB0()
{
  return MEMORY[0x24BDCD340]();
}

uint64_t sub_233B57DBC()
{
  return MEMORY[0x24BDCD380]();
}

uint64_t sub_233B57DC8()
{
  return MEMORY[0x24BDCD3B0]();
}

uint64_t sub_233B57DD4()
{
  return MEMORY[0x24BDCD7B8]();
}

uint64_t sub_233B57DE0()
{
  return MEMORY[0x24BDCDA68]();
}

uint64_t sub_233B57DEC()
{
  return MEMORY[0x24BDCDA70]();
}

uint64_t sub_233B57DF8()
{
  return MEMORY[0x24BDCDAC0]();
}

uint64_t sub_233B57E04()
{
  return MEMORY[0x24BDCDCA0]();
}

uint64_t sub_233B57E10()
{
  return MEMORY[0x24BDCDCE0]();
}

uint64_t sub_233B57E1C()
{
  return MEMORY[0x24BDCDE68]();
}

uint64_t sub_233B57E28()
{
  return MEMORY[0x24BDCE900]();
}

uint64_t sub_233B57E34()
{
  return MEMORY[0x24BDCEA40]();
}

uint64_t sub_233B57E40()
{
  return MEMORY[0x24BDCEA58]();
}

uint64_t sub_233B57E4C()
{
  return MEMORY[0x24BDCEC88]();
}

uint64_t sub_233B57E58()
{
  return MEMORY[0x24BDCED58]();
}

uint64_t sub_233B57E64()
{
  return MEMORY[0x24BDCEE28]();
}

uint64_t sub_233B57E70()
{
  return MEMORY[0x24BDCEEA8]();
}

uint64_t sub_233B57E7C()
{
  return MEMORY[0x24BDCF788]();
}

uint64_t sub_233B57E88()
{
  return MEMORY[0x24BE30BE0]();
}

uint64_t sub_233B57E94()
{
  return MEMORY[0x24BEE73C0]();
}

uint64_t sub_233B57EA0()
{
  return MEMORY[0x24BEE7420]();
}

uint64_t sub_233B57EAC()
{
  return MEMORY[0x24BEE78A8]();
}

uint64_t sub_233B57EB8()
{
  return MEMORY[0x24BEE78C0]();
}

uint64_t sub_233B57EC4()
{
  return MEMORY[0x24BEE78D8]();
}

uint64_t sub_233B57ED0()
{
  return MEMORY[0x24BEE54B0]();
}

uint64_t sub_233B57EDC()
{
  return MEMORY[0x24BDC62A8]();
}

uint64_t sub_233B57EE8()
{
  return MEMORY[0x24BDC62B0]();
}

uint64_t sub_233B57EF4()
{
  return MEMORY[0x24BDC62C8]();
}

uint64_t sub_233B57F00()
{
  return MEMORY[0x24BDC6B80]();
}

uint64_t sub_233B57F0C()
{
  return MEMORY[0x24BDC6BA8]();
}

uint64_t sub_233B57F18()
{
  return MEMORY[0x24BDCF808]();
}

uint64_t sub_233B57F24()
{
  return MEMORY[0x24BDCF830]();
}

uint64_t sub_233B57F30()
{
  return MEMORY[0x24BEE0610]();
}

uint64_t sub_233B57F3C()
{
  return MEMORY[0x24BEE07D0]();
}

uint64_t sub_233B57F48()
{
  return MEMORY[0x24BEE0980]();
}

uint64_t sub_233B57F54()
{
  return MEMORY[0x24BDCF8D8]();
}

uint64_t sub_233B57F60()
{
  return MEMORY[0x24BDCF978]();
}

uint64_t sub_233B57F6C()
{
  return MEMORY[0x24BDCF9E0]();
}

uint64_t sub_233B57F78()
{
  return MEMORY[0x24BDCFA28]();
}

uint64_t sub_233B57F84()
{
  return MEMORY[0x24BDCFA38]();
}

uint64_t sub_233B57F90()
{
  return MEMORY[0x24BDCFA78]();
}

uint64_t sub_233B57F9C()
{
  return MEMORY[0x24BDCFAC8]();
}

uint64_t sub_233B57FA8()
{
  return MEMORY[0x24BDCFAF8]();
}

uint64_t sub_233B57FB4()
{
  return MEMORY[0x24BDCFB28]();
}

uint64_t sub_233B57FC0()
{
  return MEMORY[0x24BEE09F0]();
}

uint64_t sub_233B57FCC()
{
  return MEMORY[0x24BEE0B20]();
}

uint64_t sub_233B57FD8()
{
  return MEMORY[0x24BEE0BC0]();
}

uint64_t sub_233B57FE4()
{
  return MEMORY[0x24BEE0C10]();
}

uint64_t sub_233B57FF0()
{
  return MEMORY[0x24BEE0CD8]();
}

uint64_t sub_233B57FFC()
{
  return MEMORY[0x24BEE0D58]();
}

uint64_t sub_233B58008()
{
  return MEMORY[0x24BEE0DE8]();
}

uint64_t sub_233B58014()
{
  return MEMORY[0x24BEE0DF8]();
}

uint64_t sub_233B58020()
{
  return MEMORY[0x24BEE1000]();
}

uint64_t sub_233B5802C()
{
  return MEMORY[0x24BEE1018]();
}

uint64_t sub_233B58038()
{
  return MEMORY[0x24BEE1080]();
}

uint64_t sub_233B58044()
{
  return MEMORY[0x24BEE1098]();
}

uint64_t sub_233B58050()
{
  return MEMORY[0x24BEE1110]();
}

uint64_t sub_233B5805C()
{
  return MEMORY[0x24BDCFBA8]();
}

uint64_t sub_233B58068()
{
  return MEMORY[0x24BDCFBC8]();
}

uint64_t sub_233B58074()
{
  return MEMORY[0x24BEE1120]();
}

uint64_t sub_233B58080()
{
  return MEMORY[0x24BEE1128]();
}

uint64_t sub_233B5808C()
{
  return MEMORY[0x24BEE1160]();
}

uint64_t sub_233B58098()
{
  return MEMORY[0x24BEE11B8]();
}

uint64_t sub_233B580A4()
{
  return MEMORY[0x24BEE1250]();
}

uint64_t sub_233B580B0()
{
  return MEMORY[0x24BEE6800]();
}

uint64_t sub_233B580BC()
{
  return MEMORY[0x24BEE6818]();
}

uint64_t sub_233B580C8()
{
  return MEMORY[0x24BEE6820]();
}

uint64_t sub_233B580D4()
{
  return MEMORY[0x24BEE6828]();
}

uint64_t sub_233B580E0()
{
  return MEMORY[0x24BEE6830]();
}

uint64_t sub_233B580EC()
{
  return MEMORY[0x24BEE6988]();
}

uint64_t sub_233B580F8()
{
  return MEMORY[0x24BEE6990]();
}

uint64_t sub_233B58104()
{
  return MEMORY[0x24BEE69A8]();
}

uint64_t sub_233B58110()
{
  return MEMORY[0x24BEE69F8]();
}

uint64_t sub_233B5811C()
{
  return MEMORY[0x24BEE6A30]();
}

uint64_t sub_233B58128()
{
  return MEMORY[0x24BEE6A38]();
}

uint64_t sub_233B58134()
{
  return MEMORY[0x24BEE6A40]();
}

uint64_t sub_233B58140()
{
  return MEMORY[0x24BEE6A50]();
}

uint64_t sub_233B5814C()
{
  return MEMORY[0x24BEE6A58]();
}

uint64_t sub_233B58158()
{
  return MEMORY[0x24BEE6A68]();
}

uint64_t sub_233B58164()
{
  return MEMORY[0x24BEE6A98]();
}

uint64_t sub_233B58170()
{
  return MEMORY[0x24BEE6AA0]();
}

uint64_t sub_233B5817C()
{
  return MEMORY[0x24BEE1598]();
}

uint64_t sub_233B58188()
{
  return MEMORY[0x24BEE1930]();
}

uint64_t sub_233B58194()
{
  return MEMORY[0x24BEE19B8]();
}

uint64_t sub_233B581A0()
{
  return MEMORY[0x24BEE7660]();
}

uint64_t sub_233B581AC()
{
  return MEMORY[0x24BEE78F0]();
}

uint64_t sub_233B581B8()
{
  return MEMORY[0x24BEE7908]();
}

uint64_t sub_233B581C4()
{
  return MEMORY[0x24BEE7910]();
}

uint64_t sub_233B581D0()
{
  return MEMORY[0x24BEE7928]();
}

uint64_t sub_233B581DC()
{
  return MEMORY[0x24BEE57B0]();
}

uint64_t sub_233B581E8()
{
  return MEMORY[0x24BEE1C68]();
}

uint64_t sub_233B581F4()
{
  return MEMORY[0x24BEE1F00]();
}

uint64_t sub_233B58200()
{
  return MEMORY[0x24BEE1F48]();
}

uint64_t sub_233B5820C()
{
  return MEMORY[0x24BEE2090]();
}

uint64_t sub_233B58218()
{
  return MEMORY[0x24BEE20A8]();
}

uint64_t sub_233B58224()
{
  return MEMORY[0x24BEE2150]();
}

uint64_t sub_233B58230()
{
  return MEMORY[0x24BEE2168]();
}

uint64_t sub_233B5823C()
{
  return MEMORY[0x24BEE22D0]();
}

uint64_t sub_233B58248()
{
  return MEMORY[0x24BEE23A0]();
}

uint64_t sub_233B58254()
{
  return MEMORY[0x24BEE23A8]();
}

uint64_t sub_233B58260()
{
  return MEMORY[0x24BEE23E8]();
}

uint64_t sub_233B5826C()
{
  return MEMORY[0x24BEE24B8]();
}

uint64_t sub_233B58278()
{
  return MEMORY[0x24BEE24C0]();
}

uint64_t sub_233B58284()
{
  return MEMORY[0x24BEE24D0]();
}

uint64_t sub_233B58290()
{
  return MEMORY[0x24BEE24F0]();
}

uint64_t sub_233B5829C()
{
  return MEMORY[0x24BEE2510]();
}

uint64_t sub_233B582A8()
{
  return MEMORY[0x24BEE2518]();
}

uint64_t sub_233B582B4()
{
  return MEMORY[0x24BEE2658]();
}

uint64_t sub_233B582C0()
{
  return MEMORY[0x24BEE2660]();
}

uint64_t sub_233B582CC()
{
  return MEMORY[0x24BEE26E8]();
}

uint64_t sub_233B582D8()
{
  return MEMORY[0x24BEE2710]();
}

uint64_t sub_233B582E4()
{
  return MEMORY[0x24BEE2838]();
}

uint64_t sub_233B582F0()
{
  return MEMORY[0x24BEE2CB8]();
}

uint64_t sub_233B582FC()
{
  return MEMORY[0x24BEE2CC8]();
}

uint64_t sub_233B58308()
{
  return MEMORY[0x24BEE2F40]();
}

uint64_t sub_233B58314()
{
  return MEMORY[0x24BEE2F48]();
}

uint64_t sub_233B58320()
{
  return MEMORY[0x24BEE3068]();
}

uint64_t sub_233B5832C()
{
  return MEMORY[0x24BEE3080]();
}

uint64_t sub_233B58338()
{
  return MEMORY[0x24BEE3088]();
}

uint64_t sub_233B58344()
{
  return MEMORY[0x24BEE3098]();
}

uint64_t sub_233B58350()
{
  return MEMORY[0x24BEE30B0]();
}

uint64_t sub_233B5835C()
{
  return MEMORY[0x24BEE3290]();
}

uint64_t sub_233B58368()
{
  return MEMORY[0x24BEE32B8]();
}

uint64_t sub_233B58374()
{
  return MEMORY[0x24BEE32C0]();
}

uint64_t sub_233B58380()
{
  return MEMORY[0x24BEE32D8]();
}

uint64_t sub_233B5838C()
{
  return MEMORY[0x24BEE32F8]();
}

uint64_t sub_233B58398()
{
  return MEMORY[0x24BEE3308]();
}

uint64_t sub_233B583A4()
{
  return MEMORY[0x24BEE3348]();
}

uint64_t sub_233B583B0()
{
  return MEMORY[0x24BEE3350]();
}

uint64_t sub_233B583BC()
{
  return MEMORY[0x24BEE3358]();
}

uint64_t sub_233B583C8()
{
  return MEMORY[0x24BEE3360]();
}

uint64_t sub_233B583D4()
{
  return MEMORY[0x24BEE3370]();
}

uint64_t sub_233B583E0()
{
  return MEMORY[0x24BEE3380]();
}

uint64_t sub_233B583EC()
{
  return MEMORY[0x24BEE33C0]();
}

uint64_t sub_233B583F8()
{
  return MEMORY[0x24BEE33C8]();
}

uint64_t sub_233B58404()
{
  return MEMORY[0x24BEE33E0]();
}

uint64_t sub_233B58410()
{
  return MEMORY[0x24BEE3408]();
}

uint64_t sub_233B5841C()
{
  return MEMORY[0x24BEE3428]();
}

uint64_t sub_233B58428()
{
  return MEMORY[0x24BEE3448]();
}

uint64_t sub_233B58434()
{
  return MEMORY[0x24BEE3458]();
}

uint64_t sub_233B58440()
{
  return MEMORY[0x24BEE3490]();
}

uint64_t sub_233B5844C()
{
  return MEMORY[0x24BEE34A0]();
}

uint64_t sub_233B58458()
{
  return MEMORY[0x24BEE34A8]();
}

uint64_t sub_233B58464()
{
  return MEMORY[0x24BEE34B0]();
}

uint64_t sub_233B58470()
{
  return MEMORY[0x24BEE34C0]();
}

uint64_t sub_233B5847C()
{
  return MEMORY[0x24BEE34D0]();
}

uint64_t sub_233B58488()
{
  return MEMORY[0x24BEE3510]();
}

uint64_t sub_233B58494()
{
  return MEMORY[0x24BEE3520]();
}

uint64_t sub_233B584A0()
{
  return MEMORY[0x24BEE3550]();
}

uint64_t sub_233B584AC()
{
  return MEMORY[0x24BEE3568]();
}

uint64_t sub_233B584B8()
{
  return MEMORY[0x24BEE3638]();
}

uint64_t sub_233B584C4()
{
  return MEMORY[0x24BEE3788]();
}

uint64_t sub_233B584D0()
{
  return MEMORY[0x24BEE3A30]();
}

uint64_t sub_233B584DC()
{
  return MEMORY[0x24BEE3A58]();
}

uint64_t sub_233B584E8()
{
  return MEMORY[0x24BEE3A78]();
}

uint64_t sub_233B584F4()
{
  return MEMORY[0x24BEE3A88]();
}

uint64_t sub_233B58500()
{
  return MEMORY[0x24BEE3AF0]();
}

uint64_t sub_233B5850C()
{
  return MEMORY[0x24BEE3B10]();
}

uint64_t sub_233B58518()
{
  return MEMORY[0x24BEE3B20]();
}

uint64_t sub_233B58524()
{
  return MEMORY[0x24BEE3D50]();
}

uint64_t sub_233B58530()
{
  return MEMORY[0x24BEE70E0]();
}

uint64_t sub_233B5853C()
{
  return MEMORY[0x24BEE3ED0]();
}

uint64_t sub_233B58548()
{
  return MEMORY[0x24BEE3ED8]();
}

uint64_t sub_233B58554()
{
  return MEMORY[0x24BEE3EF8]();
}

uint64_t sub_233B58560()
{
  return MEMORY[0x24BEE3F00]();
}

uint64_t sub_233B5856C()
{
  return MEMORY[0x24BEE3F08]();
}

uint64_t sub_233B58578()
{
  return MEMORY[0x24BEE3F10]();
}

uint64_t sub_233B58584()
{
  return MEMORY[0x24BEE42C0]();
}

uint64_t sub_233B58590()
{
  return MEMORY[0x24BEE42E0]();
}

uint64_t sub_233B5859C()
{
  return MEMORY[0x24BEE42F8]();
}

uint64_t sub_233B585A8()
{
  return MEMORY[0x24BEE4300]();
}

uint64_t sub_233B585B4()
{
  return MEMORY[0x24BEE4318]();
}

uint64_t sub_233B585C0()
{
  return MEMORY[0x24BEE4328]();
}

uint64_t sub_233B585CC()
{
  return MEMORY[0x24BEE4408]();
}

uint64_t sub_233B585D8()
{
  return MEMORY[0x24BEE4420]();
}

uint64_t sub_233B585E4()
{
  return MEMORY[0x24BEE45F0]();
}

uint64_t sub_233B585F0()
{
  return MEMORY[0x24BEE45F8]();
}

uint64_t sub_233B585FC()
{
  return MEMORY[0x24BEE4600]();
}

uint64_t sub_233B58608()
{
  return MEMORY[0x24BEE4608]();
}

uint64_t sub_233B58614()
{
  return MEMORY[0x24BEE4620]();
}

uint64_t sub_233B58620()
{
  return MEMORY[0x24BEE4628]();
}

uint64_t sub_233B5862C()
{
  return MEMORY[0x24BEE4638]();
}

uint64_t sub_233B58638()
{
  return MEMORY[0x24BEE4A08]();
}

uint64_t sub_233B58644()
{
  return MEMORY[0x24BEE4A10]();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x24BDAC720](aBlock);
}

void _Block_release(const void *aBlock)
{
  MEMORY[0x24BDAC738](aBlock);
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB90](dso, log, type, format, buf, *(_QWORD *)&size);
}

uint64_t _swift_stdlib_bridgeErrorToNSError()
{
  return MEMORY[0x24BEE4B30]();
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return MEMORY[0x24BEE4B38]();
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x24BDAD320](a1, a2);
}

void free(void *a1)
{
  MEMORY[0x24BDAE450](a1);
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x24BDAED08](__size);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x24BDAED60](ptr);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x24BDAEE80](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x24BDAEE98](__dst, __src, __len);
}

uint32_t notify_register_dispatch(const char *name, int *out_token, dispatch_queue_t queue, notify_handler_t handler)
{
  return MEMORY[0x24BDAF170](name, out_token, queue, handler);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x24BEDCF78](a1);
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDCFD0](a1);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x24BEDD108](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x24BEDD120](a1, a2);
}

uint64_t objc_opt_self()
{
  return MEMORY[0x24BEDD168]();
}

void objc_release(id a1)
{
  MEMORY[0x24BEDD188](a1);
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x24BEDD2A0](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDD2B8](a1);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x24BDAF398](oslog, type);
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
  MEMORY[0x24BDAF460](lock);
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
  MEMORY[0x24BDAF488](lock);
}

uint64_t os_variant_has_internal_content()
{
  return MEMORY[0x24BDAF4D0]();
}

uint64_t swift_allocBox()
{
  return MEMORY[0x24BEE4B58]();
}

uint64_t swift_allocError()
{
  return MEMORY[0x24BEE4B68]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x24BEE4B70]();
}

uint64_t swift_allocateGenericClassMetadata()
{
  return MEMORY[0x24BEE4B78]();
}

uint64_t swift_allocateGenericValueMetadata()
{
  return MEMORY[0x24BEE4B80]();
}

uint64_t swift_allocateMetadataPack()
{
  return MEMORY[0x24BEE4B88]();
}

uint64_t swift_allocateWitnessTablePack()
{
  return MEMORY[0x24BEE4B90]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x24BEE4B98]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x24BEE4BA0]();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return MEMORY[0x24BEE4BA8]();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return MEMORY[0x24BEE4BB0]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x24BEE4BB8]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x24BEE4BC0]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x24BEE4BC8]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x24BEE4BD0]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x24BEE4BD8]();
}

uint64_t swift_checkMetadataState()
{
  return MEMORY[0x24BEE4BE0]();
}

uint64_t swift_continuation_await()
{
  return MEMORY[0x24BEE71B8]();
}

uint64_t swift_continuation_init()
{
  return MEMORY[0x24BEE71C0]();
}

uint64_t swift_deallocClassInstance()
{
  return MEMORY[0x24BEE4C00]();
}

uint64_t swift_deallocObject()
{
  return MEMORY[0x24BEE4C10]();
}

uint64_t swift_deallocPartialClassInstance()
{
  return MEMORY[0x24BEE4C18]();
}

uint64_t swift_deallocUninitializedObject()
{
  return MEMORY[0x24BEE4C20]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x24BEE4C38]();
}

uint64_t swift_endAccess()
{
  return MEMORY[0x24BEE4C98]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x24BEE4CA0]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x24BEE4CA8]();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return MEMORY[0x24BEE4D08]();
}

uint64_t swift_getEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x24BEE4D10]();
}

uint64_t swift_getErrorValue()
{
  return MEMORY[0x24BEE4D18]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x24BEE4D40]();
}

uint64_t swift_getGenericMetadata()
{
  return MEMORY[0x24BEE4D80]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x24BEE4DB0]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x24BEE4DB8]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x24BEE4DD0]();
}

uint64_t swift_getTupleTypeMetadata()
{
  return MEMORY[0x24BEE4DF0]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x24BEE4E10]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x24BEE4E18]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x24BEE4E20]();
}

uint64_t swift_initClassMetadata2()
{
  return MEMORY[0x24BEE4E28]();
}

uint64_t swift_initEnumMetadataMultiPayload()
{
  return MEMORY[0x24BEE4E30]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x24BEE4E48]();
}

uint64_t swift_initStaticObject()
{
  return MEMORY[0x24BEE4E50]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x24BEE4E58]();
}

uint64_t swift_isUniquelyReferenced_nonNull_bridgeObject()
{
  return MEMORY[0x24BEE4E90]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x24BEE4E98]();
}

uint64_t swift_lookUpClassMethod()
{
  return MEMORY[0x24BEE4EA8]();
}

uint64_t swift_makeBoxUnique()
{
  return MEMORY[0x24BEE4EB0]();
}

uint64_t swift_once()
{
  return MEMORY[0x24BEE4EC8]();
}

uint64_t swift_projectBox()
{
  return MEMORY[0x24BEE4ED0]();
}

uint64_t swift_release()
{
  return MEMORY[0x24BEE4EF8]();
}

uint64_t swift_release_n()
{
  return MEMORY[0x24BEE4F00]();
}

uint64_t swift_retain()
{
  return MEMORY[0x24BEE4F08]();
}

uint64_t swift_setDeallocating()
{
  return MEMORY[0x24BEE4F30]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x24BEE4F38]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x24BEE4F40]();
}

uint64_t swift_stdlib_isStackAllocationSafe()
{
  return MEMORY[0x24BEE4F48]();
}

uint64_t swift_stdlib_random()
{
  return MEMORY[0x24BEE4F50]();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return MEMORY[0x24BEE4F58]();
}

uint64_t swift_storeEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x24BEE4F60]();
}

uint64_t swift_task_alloc()
{
  return MEMORY[0x24BEE7228]();
}

uint64_t swift_task_create()
{
  return MEMORY[0x24BEE7230]();
}

uint64_t swift_task_dealloc()
{
  return MEMORY[0x24BEE7238]();
}

uint64_t swift_task_switch()
{
  return MEMORY[0x24BEE7278]();
}

uint64_t swift_unexpectedError()
{
  return MEMORY[0x24BEE4F68]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x24BEE4F70]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x24BEE4F80]();
}

uint64_t swift_updateClassMetadata2()
{
  return MEMORY[0x24BEE5008]();
}

uint64_t swift_willThrow()
{
  return MEMORY[0x24BEE5050]();
}

