uint64_t _Charts_getChartContentWitnessTable(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t _Charts_getAxisContentWitnessTable(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t _Charts_getAxisMarkWitnessTable(uint64_t a1, uint64_t a2)
{
  return a2;
}

void static ScaleType.linear.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 1;
  *(_BYTE *)(a1 + 8) = 2;
}

void static ScaleType.log.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 2;
  *(_BYTE *)(a1 + 8) = 2;
}

void static ScaleType.date.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 3;
  *(_BYTE *)(a1 + 8) = 2;
}

void static ScaleType.category.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 4;
  *(_BYTE *)(a1 + 8) = 2;
}

void static ScaleType.power(exponent:)(uint64_t a1@<X8>, double a2@<D0>)
{
  *(double *)a1 = a2;
  *(_BYTE *)(a1 + 8) = 0;
}

void static ScaleType.squareRoot.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0x3FE0000000000000;
  *(_BYTE *)(a1 + 8) = 0;
}

void static ScaleType.symmetricLog(slopeAtZero:)(uint64_t a1@<X8>, double a2@<D0>)
{
  *(double *)a1 = a2;
  *(_BYTE *)(a1 + 8) = 1;
}

void static ScaleType.symmetricLog.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0x3FF0000000000000;
  *(_BYTE *)(a1 + 8) = 1;
}

uint64_t sub_2141D009C(uint64_t *a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  unsigned __int8 v5;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  _OWORD v9[4];
  char v10;

  v3 = *(_OWORD *)(a2 + 24);
  v4 = *(_OWORD *)(a2 + 56);
  v9[2] = *(_OWORD *)(a2 + 40);
  v9[3] = v4;
  v10 = *(_BYTE *)(a2 + 72);
  v9[0] = *(_OWORD *)(a2 + 8);
  v9[1] = v3;
  v5 = *(_BYTE *)a2;
  sub_2141D8C98(a2);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v8 = *a1;
  *a1 = 0x8000000000000000;
  sub_2142A1F94((uint64_t)v9, v5, isUniquelyReferenced_nonNull_native);
  *a1 = v8;
  return swift_bridgeObjectRelease();
}

uint64_t sub_2141D0134()
{
  return sub_214423DF8();
}

uint64_t sub_2141D014C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _OWORD *v2;
  __int128 v5;
  __int128 v6;
  uint64_t KeyPath;
  _OWORD *v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t *v12;
  _OWORD v14[3];
  _OWORD v15[2];

  v5 = v2[3];
  v14[2] = v2[2];
  v15[0] = v5;
  *(_OWORD *)((char *)v15 + 9) = *(_OWORD *)((char *)v2 + 57);
  v6 = v2[1];
  v14[0] = *v2;
  v14[1] = v6;
  KeyPath = swift_getKeyPath();
  v8 = (_OWORD *)swift_allocObject();
  v9 = v2[3];
  v8[3] = v2[2];
  v8[4] = v9;
  *(_OWORD *)((char *)v8 + 73) = *(_OWORD *)((char *)v2 + 57);
  v10 = v2[1];
  v8[1] = *v2;
  v8[2] = v10;
  v11 = sub_2141D8BF8(&qword_253F13500);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a2, a1, v11);
  v12 = (uint64_t *)(a2 + *(int *)(sub_2141D8BF8(&qword_253F134B8) + 36));
  *v12 = KeyPath;
  v12[1] = (uint64_t)sub_2141D8C90;
  v12[2] = (uint64_t)v8;
  return sub_2141D8C98((uint64_t)v14);
}

uint64_t sub_2141D0230(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[5];
  uint64_t v10;

  if (*(_BYTE *)(v1 + 16))
  {
    __break(1u);
  }
  else
  {
    v2 = *(_QWORD *)(v1 + 8);
    v10 = *(_QWORD *)v1;
    v3 = v10;
    v9[2] = *(_QWORD *)(MEMORY[0x24BDAC7A8](result) + 16);
    v9[3] = v4;
    v5 = sub_214425094();
    swift_bridgeObjectRetain();
    v6 = MEMORY[0x2199CD934](MEMORY[0x24BEE12E0], v5);
    v8 = sub_2141D0320((void (*)(char *, char *))sub_2141D8E14, (uint64_t)v9, v5, (uint64_t)&type metadata for AnyChartSymbolShape, MEMORY[0x24BEE4078], v6, MEMORY[0x24BEE40A8], v7);
    sub_2141D7730(v3, v2, 0);
    return v8;
  }
  return result;
}

uint64_t sub_2141D0320(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  void (*v24)(char *, _QWORD);
  void (*v25)(char *);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, char *);
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char v43[32];
  uint64_t v44;

  v30 = a5;
  v31 = a8;
  v38 = a1;
  v39 = a2;
  v29 = *(_QWORD *)(a5 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v40 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v12 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v14 = (char *)&v29 - v13;
  MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = swift_getAssociatedTypeWitness();
  v32 = *(_QWORD *)(v17 - 8);
  v33 = v17;
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v29 - v18;
  v20 = sub_2144251A8();
  if (!v20)
    return sub_214425040();
  v36 = AssociatedTypeWitness;
  v21 = v20;
  v44 = sub_2144255E0();
  v34 = sub_2144255EC();
  sub_2144255A4();
  v37 = v8;
  result = sub_21442519C();
  if ((v21 & 0x8000000000000000) == 0)
  {
    v23 = v21;
    v35 = v16;
    while (v23)
    {
      v41 = v23;
      v24 = (void (*)(char *, _QWORD))sub_2144252A4();
      v25 = *(void (**)(char *))(v11 + 16);
      v26 = v11;
      v27 = v36;
      v25(v14);
      v24(v43, 0);
      v28 = v42;
      v38(v14, v40);
      if (v28)
      {
        (*(void (**)(char *, uint64_t))(v26 + 8))(v14, v27);
        (*(void (**)(char *, uint64_t))(v32 + 8))(v19, v33);
        swift_release();
        return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v29 + 32))(v31, v40, v30);
      }
      v42 = 0;
      (*(void (**)(char *, uint64_t))(v26 + 8))(v14, v27);
      sub_2144255D4();
      result = sub_214425208();
      v23 = v41 - 1;
      v11 = v26;
      if (v41 == 1)
      {
        (*(void (**)(char *, uint64_t))(v32 + 8))(v19, v33);
        return v44;
      }
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_2141D0610(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[6];

  v2 = *(_QWORD *)v1;
  if (!*(_BYTE *)(v1 + 16))
  {
    v3 = *(_QWORD *)(v1 + 8);
    v9[5] = *(_QWORD *)v1;
    v9[2] = *(_QWORD *)(MEMORY[0x24BDAC7A8](result) + 16);
    v9[3] = v4;
    v5 = sub_214425094();
    swift_bridgeObjectRetain();
    v6 = MEMORY[0x2199CD934](MEMORY[0x24BEE12E0], v5);
    v8 = sub_2141D0320((void (*)(char *, char *))sub_2141D8E6C, (uint64_t)v9, v5, MEMORY[0x24BDEBF80], MEMORY[0x24BEE4078], v6, MEMORY[0x24BEE40A8], v7);
    sub_2141D7730(v2, v3, 0);
    return v8;
  }
  if (*(_BYTE *)(v1 + 16) == 1)
  {
    swift_retain();
    return v2;
  }
  __break(1u);
  return result;
}

uint64_t sub_2141D0720@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  MEMORY[0x24BDAC7A8](a1);
  (*(void (**)(char *))(v4 + 16))((char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  result = sub_214423E10();
  *a2 = result;
  return result;
}

uint64_t ClosedRange<>._makeScaleDomain()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  char v16;
  uint64_t result;

  v4 = v3;
  v8 = *(_QWORD *)(a1 + 16);
  sub_2141D38DC(v8, v8);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 72);
  swift_allocObject();
  v11 = sub_214425004();
  v13 = v12;
  v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16);
  v14(v12, v4, v8);
  v14(v13 + v10, v4 + *(int *)(a1 + 36), v8);
  sub_214425094();
  v15 = sub_214400830(v11, v8, a2);
  LOBYTE(v8) = v16;
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = v15;
  *(_BYTE *)(a3 + 24) = 0;
  *(_BYTE *)(a3 + 25) = v8;
  return result;
}

uint64_t sub_2141D08A8(uint64_t a1)
{
  sub_214425094();
  return a1;
}

uint64_t sub_2141D08D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return ClosedRange<>._makeScaleDomain()(a1, *(_QWORD *)(a2 - 8), a3);
}

uint64_t ClosedRange<>._makeScaleRange()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t result;

  v5 = *(_QWORD *)(a1 + 16);
  sub_2141D38DC(v5, v5);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 72);
  swift_allocObject();
  v8 = sub_214425004();
  v10 = v9;
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  v11(v9, v2, v5);
  v11(v10 + v7, v2 + *(int *)(a1 + 36), v5);
  result = sub_214425094();
  *(_QWORD *)a2 = v8;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 0;
  return result;
}

uint64_t Array<A>._makeScaleDomain()@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t result;

  v6 = swift_bridgeObjectRetain();
  v7 = sub_214400830(v6, a1, a2);
  LOBYTE(a1) = v8;
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = v7;
  *(_BYTE *)(a3 + 24) = 0;
  *(_BYTE *)(a3 + 25) = a1;
  return result;
}

uint64_t sub_2141D09F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return Array<A>._makeScaleDomain()(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 - 8), a3);
}

uint64_t Array._makeScaleRange()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = a1;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 0;
  return swift_bridgeObjectRetain();
}

uint64_t sub_2141D0A18@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return Array._makeScaleRange()(*v1, a1);
}

uint64_t ArraySlice<A>._makeScaleDomain()@<X0>(uint64_t a1@<X4>, uint64_t a2@<X5>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t result;

  v6 = sub_214425418();
  swift_unknownObjectRetain();
  MEMORY[0x2199CD934](MEMORY[0x24BEE2180], v6);
  v7 = sub_2144250AC();
  v8 = sub_214400830(v7, a1, a2);
  LOBYTE(a1) = v9;
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = v8;
  *(_BYTE *)(a3 + 24) = 0;
  *(_BYTE *)(a3 + 25) = a1;
  return result;
}

uint64_t sub_2141D0AD4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return ArraySlice<A>._makeScaleDomain()(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 - 8), a3);
}

uint64_t ArraySlice._makeScaleRange()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_214425418();
  swift_unknownObjectRetain();
  MEMORY[0x2199CD934](MEMORY[0x24BEE2180], v2);
  result = sub_2144250AC();
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  return result;
}

uint64_t sub_2141D0B6C@<X0>(uint64_t a1@<X8>)
{
  return ArraySlice._makeScaleRange()(a1);
}

uint64_t Gradient._makeScaleRange()@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  swift_bridgeObjectRetain();
  result = sub_214423D50();
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 1;
  return result;
}

uint64_t sub_2141D0BB0@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  swift_bridgeObjectRetain();
  result = sub_214423D50();
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 1;
  return result;
}

uint64_t AnyGradient._makeScaleRange()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = a1;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 1;
  return swift_retain();
}

uint64_t sub_2141D0BF4@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;

  *(_QWORD *)a1 = *v1;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 1;
  return swift_retain();
}

uint64_t AutomaticScaleDomain._makeScaleDomain()@<X0>(uint64_t a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;

  v2 = *((_QWORD *)v1 + 1);
  v3 = *((_QWORD *)v1 + 2);
  v4 = 256;
  if (!v1[1])
    v4 = 0;
  *(_QWORD *)a1 = v4 | *v1;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  v5 = v1[24];
  *(_BYTE *)(a1 + 24) = v5;
  *(_BYTE *)(a1 + 25) = 3;
  return sub_2141D76A8(v2, v3, v5);
}

uint64_t sub_2141D0C40@<X0>(uint64_t a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;

  v2 = *((_QWORD *)v1 + 1);
  v3 = *((_QWORD *)v1 + 2);
  v4 = 256;
  if (!v1[1])
    v4 = 0;
  *(_QWORD *)a1 = v4 | *v1;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  v5 = v1[24];
  *(_BYTE *)(a1 + 24) = v5;
  *(_BYTE *)(a1 + 25) = 3;
  return sub_2141D76A8(v2, v3, v5);
}

void static ScaleDomain<>.automatic.getter(uint64_t a1@<X8>)
{
  *(_WORD *)a1 = 2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = -1;
}

uint64_t static ScaleDomain<>.automatic(includesZero:reversed:)@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  *(_BYTE *)a3 = result;
  *(_BYTE *)(a3 + 1) = a2 & 1;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 24) = -1;
  return result;
}

uint64_t static ScaleDomain<>.automatic<A>(includesZero:reversed:dataType:modifyInferredDomain:)@<X0>(char a1@<W0>, char a2@<W1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  char v13;
  _QWORD *v14;
  uint64_t result;
  uint64_t v16;
  char v17;

  v13 = a2 & 1;
  v14 = (_QWORD *)swift_allocObject();
  v14[2] = a5;
  v14[3] = a6;
  v14[4] = a3;
  v14[5] = a4;
  swift_retain();
  result = sub_2143F9CAC();
  *(_BYTE *)a7 = a1;
  *(_BYTE *)(a7 + 1) = v13;
  *(_QWORD *)(a7 + 8) = result;
  *(_QWORD *)(a7 + 16) = v16;
  *(_BYTE *)(a7 + 24) = v17;
  return result;
}

__n128 PlotDimensionScaleRange._makeScaleRange()@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  __n128 result;

  result = *v1;
  *a1 = *v1;
  a1[1].n128_u8[0] = 2;
  return result;
}

__n128 sub_2141D0D60@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  __n128 result;

  result = *v1;
  *a1 = *v1;
  a1[1].n128_u8[0] = 2;
  return result;
}

void static PositionScaleRange<>.plotDimension.getter(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void static PositionScaleRange<>.plotDimension(padding:)(double *a1@<X8>, double a2@<D0>)
{
  *a1 = a2;
  a1[1] = a2;
}

void static PositionScaleRange<>.plotDimension(startPadding:endPadding:)(double *a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  *a1 = a2;
  a1[1] = a3;
}

uint64_t sub_2141D0D8C(char a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int16 v16;
  _BYTE v18[8];
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 v27;

  v13 = *(_QWORD *)a2;
  v14 = *(_QWORD *)(a2 + 8);
  v15 = *(_QWORD *)(a2 + 16);
  v16 = *(_WORD *)(a2 + 24);
  v18[0] = a1;
  v19 = a6;
  v20 = a7;
  v21 = v13;
  v22 = v14;
  v23 = v15;
  v24 = v16;
  v25 = a3;
  v26 = a4;
  v27 = a5;
  sub_2141D8CE8(v13, v14, v15, v16);
  sub_2141D8CFC(a3, a4, a5);
  MEMORY[0x2199CC254](v18, a8, &type metadata for ChartScaleModifier, a9);
  sub_2141D7864(v13, v14, v15, v16);
  return sub_2141D774C(a3, a4, a5);
}

void View.chartXScale<A, B>(domain:range:type:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2141D0EE8(a1, a2, a3, a4, a5, a6, a7, a8, a9, 0);
}

void View.chartXScale<A>(domain:type:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  sub_2141D2FE0(a1, a2, a3, a4, a5, a6, 0);
}

_QWORD *View.chartXScale<A>(range:type:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_2141D1060(a1, a2, a3, a4, a5, a6, 0);
}

uint64_t View.chartXScale(type:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2141D31D8(a1, a2, a3, 0);
}

void View.chartYScale<A, B>(domain:range:type:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2141D0EE8(a1, a2, a3, a4, a5, a6, a7, a8, a9, 1);
}

void sub_2141D0EE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v25;
  uint64_t v26;
  char v27;
  _QWORD v28[3];
  __int16 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 v33;
  unsigned __int8 v34;

  v22 = *(_QWORD *)a3;
  v11 = *(unsigned __int8 *)(a3 + 8);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a8 + 8))(&v30, a5, a8);
  v12 = v30;
  v13 = v31;
  v14 = v32;
  v15 = v33;
  v16 = v34;
  v28[0] = v30;
  v28[1] = v31;
  v28[2] = v32;
  v29 = v33 | (v34 << 8);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)(a9 + 8) + 16))(&v25, a6);
  v17 = v25;
  if (v27)
  {
    if (v27 != 2)
    {
      __break(1u);
      return;
    }
    v18 = v26;
    sub_2141D7730(v25, v26, 2);
    v19 = 0;
    v20 = v18;
  }
  else
  {
    v18 = 0;
    v20 = 0;
    v19 = 32;
  }
  v21 = v22;
  if (v11 == 255)
  {
    v21 = 0;
    LOBYTE(v11) = -1;
    v18 = v20;
  }
  sub_2141D0D8C(a10, (uint64_t)v28, v17, v18, v19, v21, v11, a4, a7);
  sub_2141D774C(v17, v18, v19);
  sub_2141D77B4(v12, v13, v14, v15, v16);
}

void View.chartYScale<A>(domain:type:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  sub_2141D2FE0(a1, a2, a3, a4, a5, a6, 1);
}

_QWORD *View.chartYScale<A>(range:type:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_2141D1060(a1, a2, a3, a4, a5, a6, 1);
}

_QWORD *sub_2141D1060(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  uint64_t v10;
  int v11;
  _QWORD *result;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  _QWORD v20[3];
  __int16 v21;

  v10 = *(_QWORD *)a2;
  v11 = *(unsigned __int8 *)(a2 + 8);
  memset(v20, 0, sizeof(v20));
  v21 = -256;
  result = (*(_QWORD *(**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)(a6 + 8) + 16))(&v17, a4);
  v13 = v17;
  if (!v19)
  {
    v14 = 0;
    v16 = 0;
    v15 = 32;
    if (v11 == 255)
    {
LABEL_6:
      v10 = 0;
      LOBYTE(v11) = -1;
      v14 = v16;
    }
LABEL_7:
    sub_2141D0D8C(a7, (uint64_t)v20, v13, v14, v15, v10, v11, a3, a5);
    return (_QWORD *)sub_2141D774C(v13, v14, v15);
  }
  if (v19 == 2)
  {
    v14 = v18;
    sub_2141D7730(v17, v18, 2);
    v15 = 0;
    v16 = v14;
    if (v11 == 255)
      goto LABEL_6;
    goto LABEL_7;
  }
  __break(1u);
  return result;
}

uint64_t View.chartYScale(type:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2141D31D8(a1, a2, a3, 1);
}

void View.chartForegroundStyleScale<A, B>(domain:range:type:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t AssociatedTypeWitness;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  _QWORD v30[2];
  char v31;
  _QWORD v32[3];
  __int16 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int8 v37;
  unsigned __int8 v38;

  v25 = *(_QWORD *)a3;
  v10 = *(unsigned __int8 *)(a3 + 8);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a8 + 8))(&v34, a5, a8);
  v11 = v35;
  v26 = v34;
  v12 = v36;
  v27 = v38;
  v13 = v37;
  v32[0] = v34;
  v32[1] = v35;
  v32[2] = v36;
  v33 = v37 | (v38 << 8);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(a9 + 16))(v30, a6, a9);
  v14 = v30[0];
  v15 = v30[1];
  v16 = v31;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v20 = type metadata accessor for _ScaleRangeOutputs(0, AssociatedTypeWitness, v18, v19);
  v21 = sub_2141D0610(v20);
  v23 = v22;
  sub_2141D7730(v14, v15, v16);
  if (v10 == 255)
    v24 = 0;
  else
    v24 = v25;
  sub_2141D0D8C(4, (uint64_t)v32, v21, 0, v23, v24, v10, a4, a7);
  sub_2141D7760(v21, 0, v23);
  sub_2141D77B4(v26, v11, v12, v13, v27);
}

void View.chartForegroundStyleScale<A>(domain:type:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  sub_2141D2FE0(a1, a2, a3, a4, a5, a6, 4);
}

uint64_t View.chartForegroundStyleScale<A>(range:type:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  uint64_t v19;
  _QWORD v22[2];
  char v23;
  _QWORD v24[3];
  __int16 v25;

  v7 = *(_QWORD *)a2;
  v8 = *(unsigned __int8 *)(a2 + 8);
  memset(v24, 0, sizeof(v24));
  v25 = -256;
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(a6 + 16))(v22, a4, a6);
  v10 = v22[0];
  v9 = v22[1];
  v11 = v23;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v15 = type metadata accessor for _ScaleRangeOutputs(0, AssociatedTypeWitness, v13, v14);
  v16 = sub_2141D0610(v15);
  v18 = v17;
  sub_2141D7730(v10, v9, v11);
  if (v8 == 255)
    v19 = 0;
  else
    v19 = v7;
  sub_2141D0D8C(4, (uint64_t)v24, v16, 0, v18, v19, v8, a3, a5);
  return sub_2141D7760(v16, 0, v18);
}

uint64_t View.chartForegroundStyleScale(type:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2141D31D8(a1, a2, a3, 4);
}

void View.chartForegroundStyleScale<A, B>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int16 v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v23[16];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE v30[16];
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t KeyPath;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int16 v47;

  v44 = a1;
  v37 = a2;
  v38 = a3;
  v39 = a4;
  v40 = a5;
  v41 = a6;
  v42 = a7;
  v31 = a2;
  v32 = a4;
  v33 = a5;
  v34 = a6;
  v35 = a7;
  KeyPath = swift_getKeyPath();
  v12 = sub_214425538();
  v20 = MEMORY[0x2199CD934](MEMORY[0x24BEE2780], v12);
  sub_2141D0320((void (*)(char *, char *))sub_2141D782C, (uint64_t)v30, v12, a3, MEMORY[0x24BEE4078], v20, MEMORY[0x24BEE40A8], v13);
  swift_release();
  v14 = swift_bridgeObjectRetain();
  v15 = sub_214400830(v14, a3, a6);
  v17 = v16;
  swift_bridgeObjectRelease_n();
  v45 = 0;
  v46 = 0;
  v47 = v17 << 8;
  v43 = a1;
  v44 = v15;
  v24 = a2;
  v25 = a3;
  v26 = a4;
  v27 = a5;
  v28 = a6;
  v29 = a7;
  v19 = sub_2141D0320((void (*)(char *, char *))sub_2141D7840, (uint64_t)v23, v12, MEMORY[0x24BDEBF80], MEMORY[0x24BEE4078], v20, MEMORY[0x24BEE40A8], v18);
  sub_2141D0D8C(4, (uint64_t)&v44, v19, 0, 0x60u, 0, 255, a2, a5);
  swift_bridgeObjectRelease();
  sub_2141D7864(v44, v45, v46, v47);
}

uint64_t sub_2141D15F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t TupleTypeMetadata2;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;

  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v9 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v11 = (char *)&v18 - v10;
  v12 = *(int *)(v9 + 48);
  v13 = &v11[v12];
  v14 = a1 + v12;
  v15 = *(_QWORD *)(a2 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v11, a1, a2);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))(v13, v14, a3);
  v16 = sub_214423E10();
  result = (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v11, a2);
  *a4 = v16;
  return result;
}

void View.chartForegroundStyleScale<A, B>(domain:mapping:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10)
{
  sub_2141D24A0(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_2142AF2B0, 4u);
}

uint64_t View.chartForegroundStyleScale<A, B>(mapping:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_2141D2668(a1, a2, a3, a4, a5, a6, a7, a8, (uint64_t (*)(void))sub_2142AF2B0, 4);
}

void View.chartSymbolScale<A, B>(domain:range:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t AssociatedTypeWitness;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v23;
  _QWORD v25[2];
  char v26;
  _QWORD v27[3];
  __int16 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 v32;
  unsigned __int8 v33;

  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a7 + 8))(&v29, a4, a7);
  v10 = v29;
  v11 = v30;
  v12 = v31;
  v23 = v33;
  v13 = v32;
  v27[0] = v29;
  v27[1] = v30;
  v27[2] = v31;
  v28 = v32 | (v33 << 8);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(a8 + 16))(v25, a5, a8);
  v15 = v25[0];
  v14 = v25[1];
  v16 = v26;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v20 = type metadata accessor for _ScaleRangeOutputs(0, AssociatedTypeWitness, v18, v19);
  v21 = sub_2141D0230(v20);
  sub_2141D7730(v15, v14, v16);
  sub_2141D0D8C(5, (uint64_t)v27, v21, 0, 0x80u, 0, 255, a3, a6);
  sub_2141D7760(v21, 0, 0x80u);
  sub_2141D77B4(v10, v11, v12, v13, v23);
}

void View.chartSymbolScale<A>(domain:range:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  char v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  _OWORD v24[2];
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[3];
  __int16 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 v32;
  unsigned __int8 v33;

  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a6 + 8))(&v29, a4, a6);
  v8 = v29;
  v9 = v31;
  v10 = v32;
  v11 = v33;
  v27[0] = v29;
  v27[1] = v30;
  v23 = v30;
  v27[2] = v31;
  v28 = v32 | (v33 << 8);
  v12 = *(_QWORD *)(a2 + 16);
  v13 = MEMORY[0x24BEE4AF8];
  if (v12)
  {
    v20 = v29;
    v21 = a3;
    v26 = MEMORY[0x24BEE4AF8];
    sub_2141D3928(0, v12, 0);
    v13 = v26;
    v14 = a2 + 32;
    do
    {
      sub_2141D7878(v14, (uint64_t)v24);
      v26 = v13;
      v16 = *(_QWORD *)(v13 + 16);
      v15 = *(_QWORD *)(v13 + 24);
      if (v16 >= v15 >> 1)
      {
        sub_2141D3928((char *)(v15 > 1), v16 + 1, 1);
        v13 = v26;
      }
      *(_QWORD *)(v13 + 16) = v16 + 1;
      v17 = v13 + 40 * v16;
      v18 = v24[0];
      v19 = v24[1];
      *(_QWORD *)(v17 + 64) = v25;
      *(_OWORD *)(v17 + 32) = v18;
      *(_OWORD *)(v17 + 48) = v19;
      v14 += 40;
      --v12;
    }
    while (v12);
    a3 = v21;
    v8 = v20;
  }
  sub_2141D0D8C(5, (uint64_t)v27, v13, 0, 0x80u, 0, 255, a3, a5);
  swift_bridgeObjectRelease();
  sub_2141D77B4(v8, v23, v9, v10, v11);
}

void View.chartSymbolScale<A>(domain:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_2141D2844(a1, a2, a3, a4, a5, 5);
}

uint64_t View.chartSymbolScale<A>(range:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[2];
  char v17;
  _QWORD v18[3];
  __int16 v19;

  memset(v18, 0, sizeof(v18));
  v19 = -256;
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(a5 + 16))(v16, a3, a5);
  v7 = v16[0];
  v8 = v16[1];
  v9 = v17;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v13 = type metadata accessor for _ScaleRangeOutputs(0, AssociatedTypeWitness, v11, v12);
  v14 = sub_2141D0230(v13);
  sub_2141D7730(v7, v8, v9);
  sub_2141D0D8C(5, (uint64_t)v18, v14, 0, 0x80u, 0, 255, a2, a4);
  return sub_2141D7760(v14, 0, 0x80u);
}

uint64_t View.chartSymbolScale(range:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int64_t v5;
  uint64_t v6;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  _OWORD v15[2];
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[3];
  __int16 v19;

  memset(v18, 0, sizeof(v18));
  v19 = -256;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = MEMORY[0x24BEE4AF8];
  if (v5)
  {
    v17 = MEMORY[0x24BEE4AF8];
    sub_2141D3928(0, v5, 0);
    v6 = v17;
    v8 = a1 + 32;
    do
    {
      sub_2141D7878(v8, (uint64_t)v15);
      v17 = v6;
      v10 = *(_QWORD *)(v6 + 16);
      v9 = *(_QWORD *)(v6 + 24);
      if (v10 >= v9 >> 1)
      {
        sub_2141D3928((char *)(v9 > 1), v10 + 1, 1);
        v6 = v17;
      }
      *(_QWORD *)(v6 + 16) = v10 + 1;
      v11 = v6 + 40 * v10;
      v12 = v15[0];
      v13 = v15[1];
      *(_QWORD *)(v11 + 64) = v16;
      *(_OWORD *)(v11 + 32) = v12;
      *(_OWORD *)(v11 + 48) = v13;
      v8 += 40;
      --v5;
    }
    while (v5);
  }
  sub_2141D0D8C(5, (uint64_t)v18, v6, 0, 0x80u, 0, 255, a2, a3);
  return swift_bridgeObjectRelease();
}

void View.chartSymbolScale<A, B>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int16 v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v23[16];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE v30[16];
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t KeyPath;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int16 v47;

  v44 = a1;
  v37 = a2;
  v38 = a3;
  v39 = a4;
  v40 = a5;
  v41 = a6;
  v42 = a7;
  v31 = a2;
  v32 = a4;
  v33 = a5;
  v34 = a6;
  v35 = a7;
  KeyPath = swift_getKeyPath();
  v12 = sub_214425538();
  v20 = MEMORY[0x2199CD934](MEMORY[0x24BEE2780], v12);
  sub_2141D0320((void (*)(char *, char *))sub_2141D782C, (uint64_t)v30, v12, a3, MEMORY[0x24BEE4078], v20, MEMORY[0x24BEE40A8], v13);
  swift_release();
  v14 = swift_bridgeObjectRetain();
  v15 = sub_214400830(v14, a3, a6);
  v17 = v16;
  swift_bridgeObjectRelease_n();
  v45 = 0;
  v46 = 0;
  v47 = v17 << 8;
  v43 = a1;
  v44 = v15;
  v24 = a2;
  v25 = a3;
  v26 = a4;
  v27 = a5;
  v28 = a6;
  v29 = a7;
  v19 = sub_2141D0320((void (*)(char *, char *))sub_2141D78E0, (uint64_t)v23, v12, (uint64_t)&type metadata for AnyChartSymbolShape, MEMORY[0x24BEE4078], v20, MEMORY[0x24BEE40A8], v18);
  sub_2141D0D8C(5, (uint64_t)&v44, v19, 0, 0x80u, 0, 255, a2, a5);
  swift_bridgeObjectRelease();
  sub_2141D7864(v44, v45, v46, v47);
}

uint64_t sub_2141D1E58@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;

  v25 = a4;
  v26 = a2;
  v5 = (uint64_t *)(*a2 + *MEMORY[0x24BEE46A8]);
  v6 = *v5;
  v24 = *(_QWORD *)(*v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](a1);
  v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x24BDAC7A8](v7);
  v12 = (char *)&v23 - v11;
  v13 = *(int *)(v6 + 48);
  v14 = (char *)&v23 + v13 - v11;
  v15 = v10 + v13;
  v17 = *(_QWORD *)(v16 + 8);
  v18 = *(_QWORD *)(v17 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))((char *)&v23 - v11, v19, v17);
  v20 = *(_QWORD *)(a3 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v14, v15, a3);
  v21 = &v9[*(int *)(v6 + 48)];
  (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v9, v12, v17);
  (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v21, v14, a3);
  swift_getAtKeyPath();
  return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v9, v6);
}

uint64_t sub_2141D1FA0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X6>, uint64_t *a5@<X8>)
{
  uint64_t TupleTypeMetadata2;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v21;

  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v11 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v13 = (char *)&v21 - v12;
  v14 = *(int *)(v11 + 48);
  v15 = &v13[v14];
  v16 = a1 + v14;
  v17 = *(_QWORD *)(a2 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v13, a1, a2);
  v18 = *(_QWORD *)(a3 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v15, v16, a3);
  a5[3] = a3;
  a5[4] = a4;
  v19 = sub_2141D8DD8(a5);
  (*(void (**)(uint64_t *, char *, uint64_t))(v18 + 32))(v19, v15, a3);
  return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v13, a2);
}

void View.chartSymbolScale<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int16 v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v19[16];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v24[16];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t KeyPath;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int16 v37;

  v34 = a1;
  v29 = a2;
  v30 = a3;
  v31 = a4;
  v32 = a5;
  v25 = a2;
  v26 = a4;
  v27 = a5;
  KeyPath = swift_getKeyPath();
  sub_2141D7924(&qword_253F0FF50);
  v9 = sub_214425538();
  v10 = MEMORY[0x2199CD934](MEMORY[0x24BEE2780], v9);
  sub_2141D0320((void (*)(char *, char *))sub_2141D7904, (uint64_t)v24, v9, a3, MEMORY[0x24BEE4078], v10, MEMORY[0x24BEE40A8], v11);
  swift_release();
  v12 = swift_bridgeObjectRetain();
  v13 = sub_214400830(v12, a3, a5);
  v15 = v14;
  swift_bridgeObjectRelease_n();
  v35 = 0;
  v36 = 0;
  v37 = v15 << 8;
  v33 = a1;
  v34 = v13;
  v20 = a2;
  v21 = a3;
  v22 = a4;
  v23 = a5;
  v17 = sub_2141D0320((void (*)(char *, char *))sub_2141D7968, (uint64_t)v19, v9, (uint64_t)&type metadata for AnyChartSymbolShape, MEMORY[0x24BEE4078], v10, MEMORY[0x24BEE40A8], v16);
  sub_2141D0D8C(5, (uint64_t)&v34, v17, 0, 0x80u, 0, 255, a2, a4);
  swift_bridgeObjectRelease();
  sub_2141D7864(v34, v35, v36, v37);
}

uint64_t sub_2141D2258@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  __int128 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v20[2];

  v20[1] = a3;
  v3 = (uint64_t *)(*a2 + *MEMORY[0x24BEE46A8]);
  v4 = *v3;
  v5 = *(_QWORD *)(*v3 - 8);
  v6 = MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x24BDAC7A8](v6);
  v11 = (char *)v20 - v10;
  v12 = *(int *)(v4 + 48);
  v13 = (__int128 *)((char *)v20 + v12 - v10);
  v14 = v9 + v12;
  v16 = *(_QWORD *)(v15 + 8);
  v17 = *(_QWORD *)(v16 - 8);
  (*(void (**)(char *))(v17 + 16))((char *)v20 - v10);
  sub_2141D7878(v14, (uint64_t)v13);
  v18 = (uint64_t)&v8[*(int *)(v4 + 48)];
  (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v8, v11, v16);
  sub_2141D8DC0(v13, v18);
  swift_getAtKeyPath();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

uint64_t sub_2141D2384@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t TupleTypeMetadata2;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  __int128 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  sub_2141D7924(&qword_253F0FF50);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v7 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v9 = (char *)&v15 - v8;
  v10 = *(int *)(v7 + 48);
  v11 = (__int128 *)&v9[v10];
  v12 = a1 + v10;
  v13 = *(_QWORD *)(a2 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v9, a1, a2);
  sub_2141D7878(v12, (uint64_t)v11);
  sub_2141D8DC0(v11, a3);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v9, a2);
}

void View.chartSymbolScale<A, B>(domain:mapping:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10)
{
  sub_2141D24A0(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_2142AF320, 5u);
}

void sub_2141D24A0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t (*a11)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), unsigned __int8 a12)
{
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t AssociatedTypeWitness;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 v25;
  unsigned __int8 v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[3];
  __int16 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned __int8 v39;
  unsigned __int8 v40;

  v33 = a4;
  v31 = a8;
  v32 = a7;
  v27 = a2;
  v30 = a12;
  v28 = a11;
  v29 = a6;
  MEMORY[0x24BDAC7A8](a1);
  v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v16 + 16))(v15);
  sub_2142AF1B0((uint64_t)v15, a5, a10, (uint64_t)&v36);
  v17 = v36;
  v18 = v37;
  v19 = v38;
  v20 = v40;
  LOBYTE(v15) = v39;
  v34[0] = v36;
  v34[1] = v37;
  v34[2] = v38;
  v35 = v39 | (v40 << 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v22 = v28(v27, a3, AssociatedTypeWitness, v29, a10, a9);
  v24 = v23;
  v26 = v25;
  LOBYTE(a5) = v25 | 0xE0;
  swift_retain();
  sub_2141D0D8C(v30, (uint64_t)v34, v22, v24, a5, 0, 255, v33, v32);
  sub_2141D779C(v22, v24, v26);
  sub_2141D77B4(v17, v18, v19, v15, v20);
}

uint64_t View.chartSymbolScale<A, B>(mapping:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_2141D2668(a1, a2, a3, a4, a5, a6, a7, a8, (uint64_t (*)(void))sub_2142AF320, 5);
}

uint64_t sub_2141D2668(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t (*a9)(void), char a10)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  _QWORD v19[3];
  __int16 v20;

  memset(v19, 0, sizeof(v19));
  v20 = -256;
  v12 = a9();
  v14 = v13;
  v16 = v15;
  v17 = v15 | 0xE0;
  swift_retain();
  sub_2141D0D8C(a10, (uint64_t)v19, v12, v14, v17, 0, 255, a3, a6);
  return sub_2141D779C(v12, v14, v16);
}

void View.chartLineStyleScale<A, B>(domain:range:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19[2];
  char v20;
  _QWORD v21[3];
  __int16 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 v26;
  unsigned __int8 v27;

  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a7 + 8))(&v23, a4, a7);
  v11 = v23;
  v12 = v24;
  v13 = v25;
  v14 = v26;
  v15 = v27;
  v21[0] = v23;
  v21[1] = v24;
  v21[2] = v25;
  v22 = v26 | (v27 << 8);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a8 + 16))(v19, a5, a8);
  if (v20)
  {
    __break(1u);
  }
  else
  {
    v17 = v19[0];
    v16 = v19[1];
    sub_2141D0D8C(7, (uint64_t)v21, v19[0], 0, 0xC0u, 0, 255, a3, a6);
    sub_2141D7730(v17, v16, 0);
    sub_2141D77B4(v11, v12, v13, v14, v15);
  }
}

void View.chartLineStyleScale<A>(domain:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_2141D2844(a1, a2, a3, a4, a5, 7);
}

void sub_2141D2844(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  unsigned __int8 v13;
  _QWORD v14[3];
  __int16 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 v19;
  unsigned __int8 v20;

  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a5 + 8))(&v16, a3, a5);
  v9 = v16;
  v10 = v17;
  v11 = v18;
  v12 = v20;
  v13 = v19;
  v14[0] = v16;
  v14[1] = v17;
  v14[2] = v18;
  v15 = v19 | (v20 << 8);
  sub_2141D0D8C(a6, (uint64_t)v14, 0, 0, 0xFCu, 0, 255, a2, a4);
  sub_2141D77B4(v9, v10, v11, v13, v12);
}

_QWORD *View.chartLineStyleScale<A>(range:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10[2];
  char v11;
  _QWORD v12[3];
  __int16 v13;

  memset(v12, 0, sizeof(v12));
  v13 = -256;
  result = (*(_QWORD *(**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a5 + 16))(v10, a3, a5);
  if (v11)
  {
    __break(1u);
  }
  else
  {
    v9 = v10[0];
    v8 = v10[1];
    sub_2141D0D8C(7, (uint64_t)v12, v10[0], 0, 0xC0u, 0, 255, a2, a4);
    return (_QWORD *)sub_2141D7730(v9, v8, 0);
  }
  return result;
}

void View.chartLineStyleScale<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int16 v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v19[16];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE v29[16];
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t KeyPath;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int16 v42;

  v39 = a1;
  v34 = a2;
  v35 = a3;
  v36 = a4;
  v37 = a5;
  v30 = a2;
  v31 = a4;
  v32 = a5;
  KeyPath = swift_getKeyPath();
  v9 = sub_214425538();
  v10 = MEMORY[0x2199CD934](MEMORY[0x24BEE2780], v9);
  sub_2141D0320((void (*)(char *, char *))sub_2141D7988, (uint64_t)v29, v9, a3, MEMORY[0x24BEE4078], v10, MEMORY[0x24BEE40A8], v11);
  swift_release();
  v12 = swift_bridgeObjectRetain();
  v13 = sub_214400830(v12, a3, a5);
  v15 = v14;
  swift_bridgeObjectRelease_n();
  v40 = 0;
  v41 = 0;
  v42 = v15 << 8;
  v38 = a1;
  v39 = v13;
  v25 = a2;
  v26 = a3;
  v27 = a4;
  v28 = a5;
  v20 = a2;
  v21 = a3;
  v22 = a4;
  v23 = a5;
  v24 = swift_getKeyPath();
  v17 = sub_2141D0320((void (*)(char *, char *))sub_2141D79A8, (uint64_t)v19, v9, MEMORY[0x24BDEB7D0], MEMORY[0x24BEE4078], v10, MEMORY[0x24BEE40A8], v16);
  swift_release();
  sub_2141D0D8C(7, (uint64_t)&v39, v17, 0, 0xC0u, 0, 255, a2, a4);
  swift_bridgeObjectRelease();
  sub_2141D7864(v39, v40, v41, v42);
}

uint64_t sub_2141D2BA4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  _QWORD v24[2];

  v24[0] = a2;
  v24[1] = a3;
  v3 = (uint64_t *)(*a2 + *MEMORY[0x24BEE46A8]);
  v4 = *v3;
  v5 = *(_QWORD *)(*v3 - 8);
  v6 = MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x24BDAC7A8](v6);
  v11 = (char *)v24 - v10;
  v12 = (uint64_t *)(v9 + *(int *)(v4 + 48));
  v14 = *(_QWORD *)(v13 + 8);
  v15 = *(_QWORD *)(v14 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))((char *)v24 - v10, v16, v14);
  v18 = v12[1];
  v17 = v12[2];
  v19 = v12[3];
  v20 = v12[4];
  v21 = &v8[*(int *)(v4 + 48)];
  v22 = *v12;
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v8, v11, v14);
  *(_QWORD *)v21 = v22;
  *((_QWORD *)v21 + 1) = v18;
  *((_QWORD *)v21 + 2) = v17;
  *((_QWORD *)v21 + 3) = v19;
  *((_QWORD *)v21 + 4) = v20;
  swift_bridgeObjectRetain();
  swift_getAtKeyPath();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

uint64_t sub_2141D2CE8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t TupleTypeMetadata2;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  _QWORD v23[2];

  v23[0] = a4;
  v23[1] = a2;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v7 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v8 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v10 = (char *)v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDAC7A8](v8);
  v13 = (char *)v23 - v12;
  v14 = (uint64_t *)(a1 + *(int *)(v11 + 48));
  v15 = *(_QWORD *)(a3 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))((char *)v23 - v12, a1, a3);
  v17 = v14[1];
  v16 = v14[2];
  v18 = v14[3];
  v19 = v14[4];
  v20 = &v10[*(int *)(TupleTypeMetadata2 + 48)];
  v21 = *v14;
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v10, v13, a3);
  *(_QWORD *)v20 = v21;
  *((_QWORD *)v20 + 1) = v17;
  *((_QWORD *)v20 + 2) = v16;
  *((_QWORD *)v20 + 3) = v18;
  *((_QWORD *)v20 + 4) = v19;
  swift_bridgeObjectRetain();
  swift_getAtKeyPath();
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, TupleTypeMetadata2);
}

void View.chartLineStyleScale<A>(domain:mapping:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  sub_2141D3678(a1, a2, a3, a4, a5, a6, a7, a8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_2142AF390, 7u);
}

uint64_t View.chartLineStyleScale<A>(mapping:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_2141D381C(a1, a2, a3, a4, a5, a6, (uint64_t (*)(void))sub_2142AF390, 7);
}

void View.chartSymbolSizeScale<A, B>(domain:range:type:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v24;
  uint64_t v25;
  char v26;
  _QWORD v27[3];
  __int16 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 v32;
  unsigned __int8 v33;

  v21 = *(_QWORD *)a3;
  v10 = *(unsigned __int8 *)(a3 + 8);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a8 + 8))(&v29, a5, a8);
  v11 = v29;
  v12 = v30;
  v13 = v31;
  v14 = v32;
  v15 = v33;
  v27[0] = v29;
  v27[1] = v30;
  v27[2] = v31;
  v28 = v32 | (v33 << 8);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a9 + 16))(&v24, a6, a9);
  v16 = v24;
  if (v26)
  {
    if (v26 != 2)
    {
      __break(1u);
      return;
    }
    v17 = v25;
    sub_2141D7730(v24, v25, 2);
    v18 = 0;
    v19 = v17;
  }
  else
  {
    v17 = 0;
    v19 = 0;
    v18 = 32;
  }
  v20 = v21;
  if (v10 == 255)
  {
    v20 = 0;
    LOBYTE(v10) = -1;
    v17 = v19;
  }
  sub_2141D0D8C(6, (uint64_t)v27, v16, v17, v18, v20, v10, a4, a7);
  sub_2141D774C(v16, v17, v18);
  sub_2141D77B4(v11, v12, v13, v14, v15);
}

void View.chartSymbolSizeScale<A>(domain:type:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  sub_2141D2FE0(a1, a2, a3, a4, a5, a6, 6);
}

void sub_2141D2FE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unsigned __int8 v14;
  uint64_t v15;
  _QWORD v18[3];
  __int16 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 v23;
  unsigned __int8 v24;

  v8 = *(_QWORD *)a2;
  v9 = *(unsigned __int8 *)(a2 + 8);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a6 + 8))(&v20, a4, a6);
  v10 = v20;
  v11 = v21;
  v12 = v22;
  v13 = v24;
  v14 = v23;
  v18[0] = v20;
  v18[1] = v21;
  v18[2] = v22;
  v19 = v23 | (v24 << 8);
  if (v9 == 255)
    v15 = 0;
  else
    v15 = v8;
  sub_2141D0D8C(a7, (uint64_t)v18, 0, 0, 0xFCu, v15, v9, a3, a5);
  sub_2141D77B4(v10, v11, v12, v14, v13);
}

_QWORD *View.chartSymbolSizeScale<A>(range:type:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  int v9;
  _QWORD *result;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  _QWORD v18[3];
  __int16 v19;

  v8 = *(_QWORD *)a2;
  v9 = *(unsigned __int8 *)(a2 + 8);
  memset(v18, 0, sizeof(v18));
  v19 = -256;
  result = (*(_QWORD *(**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a6 + 16))(&v15, a4, a6);
  v11 = v15;
  if (!v17)
  {
    v12 = 0;
    v14 = 0;
    v13 = 32;
    if (v9 == 255)
    {
LABEL_6:
      v8 = 0;
      LOBYTE(v9) = -1;
      v12 = v14;
    }
LABEL_7:
    sub_2141D0D8C(6, (uint64_t)v18, v11, v12, v13, v8, v9, a3, a5);
    return (_QWORD *)sub_2141D774C(v11, v12, v13);
  }
  if (v17 == 2)
  {
    v12 = v16;
    sub_2141D7730(v15, v16, 2);
    v13 = 0;
    v14 = v12;
    if (v9 == 255)
      goto LABEL_6;
    goto LABEL_7;
  }
  __break(1u);
  return result;
}

uint64_t View.chartSymbolSizeScale(type:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2141D31D8(a1, a2, a3, 6);
}

uint64_t sub_2141D31D8(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  _QWORD v8[3];
  __int16 v9;

  v4 = *(_QWORD *)a1;
  v5 = *(unsigned __int8 *)(a1 + 8);
  memset(v8, 0, sizeof(v8));
  v9 = -256;
  if (v5 == 255)
    v6 = 0;
  else
    v6 = v4;
  return sub_2141D0D8C(a4, (uint64_t)v8, 0, 0, 0xFCu, v6, v5, a2, a3);
}

void View.chartSymbolSizeScale<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int16 v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v19[16];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE v29[16];
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t KeyPath;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int16 v42;

  v39 = a1;
  v34 = a2;
  v35 = a3;
  v36 = a4;
  v37 = a5;
  v30 = a2;
  v31 = a4;
  v32 = a5;
  KeyPath = swift_getKeyPath();
  v9 = sub_214425538();
  v10 = MEMORY[0x2199CD934](MEMORY[0x24BEE2780], v9);
  sub_2141D0320((void (*)(char *, char *))sub_2141D79CC, (uint64_t)v29, v9, a3, MEMORY[0x24BEE4078], v10, MEMORY[0x24BEE40A8], v11);
  swift_release();
  v12 = swift_bridgeObjectRetain();
  v13 = sub_214400830(v12, a3, a5);
  v15 = v14;
  swift_bridgeObjectRelease_n();
  v40 = 0;
  v41 = 0;
  v42 = v15 << 8;
  v38 = a1;
  v39 = v13;
  v25 = a2;
  v26 = a3;
  v27 = a4;
  v28 = a5;
  v20 = a2;
  v21 = a3;
  v22 = a4;
  v23 = a5;
  v24 = swift_getKeyPath();
  v17 = sub_2141D0320((void (*)(char *, char *))sub_2141D79EC, (uint64_t)v19, v9, MEMORY[0x24BEE50B0], MEMORY[0x24BEE4078], v10, MEMORY[0x24BEE40A8], v16);
  swift_release();
  sub_2141D0D8C(6, (uint64_t)&v39, v17, 0, 0x20u, 0, 255, a2, a4);
  swift_bridgeObjectRelease();
  sub_2141D7864(v39, v40, v41, v42);
}

uint64_t sub_2141D3404@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  v19 = a3;
  v4 = (uint64_t *)(*a2 + *MEMORY[0x24BEE46A8]);
  v5 = *v4;
  v6 = *(_QWORD *)(*v4 - 8);
  v7 = MEMORY[0x24BDAC7A8](a1);
  v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v19 - v10;
  v12 = *(int *)(v5 + 48);
  v14 = *(_QWORD *)(v13 + 8);
  v15 = *(_QWORD *)(v14 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))((char *)&v19 - v10, a1, v14);
  v16 = *(_QWORD *)(a1 + v12);
  *(_QWORD *)&v11[v12] = v16;
  v17 = *(int *)(v5 + 48);
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v9, v11, v14);
  *(_QWORD *)&v9[v17] = v16;
  swift_getAtKeyPath();
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t sub_2141D3520(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t TupleTypeMetadata2;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  v19 = a2;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v7 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v8 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDAC7A8](v8);
  v13 = (char *)&v19 - v12;
  v14 = *(int *)(v11 + 48);
  v15 = *(_QWORD *)(a4 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))((char *)&v19 - v12, a1, a4);
  v16 = *(_QWORD *)(a1 + v14);
  *(_QWORD *)&v13[v14] = v16;
  v17 = *(int *)(TupleTypeMetadata2 + 48);
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v10, v13, a4);
  *(_QWORD *)&v10[v17] = v16;
  swift_getAtKeyPath();
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, TupleTypeMetadata2);
}

void View.chartSymbolSizeScale<A>(domain:mapping:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  sub_2141D3678(a1, a2, a3, a4, a5, a6, a7, a8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_2142AF3EC, 6u);
}

void sub_2141D3678(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t (*a9)(uint64_t, uint64_t, uint64_t, uint64_t), unsigned __int8 a10)
{
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t AssociatedTypeWitness;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t (*v26)(uint64_t, uint64_t, uint64_t, uint64_t);
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[3];
  __int16 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int8 v36;
  unsigned __int8 v37;

  v30 = a4;
  v28 = a8;
  v29 = a6;
  v27 = a10;
  v26 = a9;
  MEMORY[0x24BDAC7A8](a1);
  v15 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v16 + 16))(v15);
  sub_2142AF1B0((uint64_t)v15, a5, a7, (uint64_t)&v33);
  v17 = v33;
  v18 = v34;
  v19 = v35;
  v20 = v37;
  LOBYTE(v15) = v36;
  v31[0] = v33;
  v31[1] = v34;
  v31[2] = v35;
  v32 = v36 | (v37 << 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v22 = v26(a2, a3, AssociatedTypeWitness, a7);
  v24 = v23;
  LOBYTE(a7) = v25;
  LOBYTE(a5) = v25 | 0xE0;
  swift_retain();
  sub_2141D0D8C(v27, (uint64_t)v31, v22, v24, a5, 0, 255, v30, v29);
  sub_2141D779C(v22, v24, a7);
  sub_2141D77B4(v17, v18, v19, v15, v20);
}

uint64_t View.chartSymbolSizeScale<A>(mapping:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_2141D381C(a1, a2, a3, a4, a5, a6, (uint64_t (*)(void))sub_2142AF3EC, 6);
}

uint64_t sub_2141D381C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(void), char a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  _QWORD v18[3];
  __int16 v19;

  memset(v18, 0, sizeof(v18));
  v19 = -256;
  v11 = a7();
  v13 = v12;
  v15 = v14;
  v16 = v14 | 0xE0;
  swift_retain();
  sub_2141D0D8C(a8, (uint64_t)v18, v11, v13, v16, 0, 255, a3, a5);
  return sub_2141D779C(v11, v13, v15);
}

uint64_t sub_2141D38DC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  if (swift_isClassType())
    v3 = a2;
  else
    v3 = 0;
  if (v3)
    return sub_2141D8BF8(&qword_253F15D58);
  else
    return sub_214425748();
}

char *sub_2141D3928(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_2141D42AC(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

size_t sub_2141D3944(size_t a1, int64_t a2, char a3)
{
  size_t *v3;
  size_t result;

  result = sub_2141D7340(a1, a2, a3, (_QWORD *)*v3, &qword_254D69118, (uint64_t (*)(_QWORD))MEMORY[0x24BDF0538]);
  *v3 = result;
  return result;
}

char *sub_2141D3970(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_2141D4EEC(a1, a2, a3, *v3, &qword_254D690B8);
  *v3 = result;
  return result;
}

_QWORD *sub_2141D399C(_QWORD *a1, int64_t a2, char a3)
{
  _QWORD **v3;
  _QWORD *result;

  result = sub_2141D43C0(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_2141D39B8(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_2141D44E0(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_2141D39D4(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_2141D6408(a1, a2, a3, *v3, &qword_253F13D68);
  *v3 = result;
  return result;
}

char *sub_2141D39F8(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_2141D45C8(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_2141D3A14(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_2141D46DC(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_2141D3A30(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_2141D47DC(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_2141D3A4C(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_2141D48F8(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_2141D3A68(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_2141D49F0(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_2141D3A84(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_2141D4AF0(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_2141D3AA0(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_2141D4BF0(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

size_t sub_2141D3ABC(size_t a1, int64_t a2, char a3)
{
  size_t *v3;
  size_t result;

  result = sub_2141D7340(a1, a2, a3, (_QWORD *)*v3, &qword_253F11FE8, (uint64_t (*)(_QWORD))MEMORY[0x24BDCE900]);
  *v3 = result;
  return result;
}

_QWORD *sub_2141D3AE8(_QWORD *a1, int64_t a2, char a3)
{
  _QWORD **v3;
  _QWORD *result;

  result = sub_2141D6630(a1, a2, a3, *v3, &qword_254D690E0, &qword_253F12250);
  *v3 = result;
  return result;
}

_QWORD *sub_2141D3B14(_QWORD *a1, int64_t a2, char a3)
{
  _QWORD **v3;
  _QWORD *result;

  result = sub_2141D6630(a1, a2, a3, *v3, &qword_253F10FC0, &qword_253F12170);
  *v3 = result;
  return result;
}

_QWORD *sub_2141D3B40(_QWORD *a1, int64_t a2, char a3)
{
  _QWORD **v3;
  _QWORD *result;

  result = sub_2141D6630(a1, a2, a3, *v3, &qword_254D69108, &qword_254D69110);
  *v3 = result;
  return result;
}

char *sub_2141D3B6C(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_2141D4CFC(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

_QWORD *sub_2141D3B88(_QWORD *a1, int64_t a2, char a3)
{
  _QWORD **v3;
  _QWORD *result;

  result = sub_2141D6630(a1, a2, a3, *v3, &qword_254D690F0, &qword_254D690F8);
  *v3 = result;
  return result;
}

char *sub_2141D3BB4(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_2141D4DF4(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_2141D3BD0(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_2141D74B4(a1, a2, a3, *v3, &qword_253F10640);
  *v3 = result;
  return result;
}

char *sub_2141D3BF4(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_2141D4EEC(a1, a2, a3, *v3, &qword_253F10618);
  *v3 = result;
  return result;
}

char *sub_2141D3C20(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_2141D4FF0(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_2141D3C3C(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_2141D5104(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_2141D3C58(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_2141D5404(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_2141D3C74(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_2141D5504(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

_QWORD *sub_2141D3C90(_QWORD *a1, int64_t a2, char a3)
{
  _QWORD **v3;
  _QWORD *result;

  result = sub_2141D6630(a1, a2, a3, *v3, &qword_253F10C68, &qword_253F10C58);
  *v3 = result;
  return result;
}

_QWORD *sub_2141D3CBC(_QWORD *a1, int64_t a2, char a3)
{
  _QWORD **v3;
  _QWORD *result;

  result = sub_2141D55FC(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_2141D3CD8(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_2141D5730(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

size_t sub_2141D3CF4(size_t a1, int64_t a2, char a3)
{
  size_t *v3;
  size_t result;

  result = sub_2141D7340(a1, a2, a3, (_QWORD *)*v3, &qword_253F10BA8, (uint64_t (*)(_QWORD))type metadata accessor for SgShapeStyle);
  *v3 = result;
  return result;
}

char *sub_2141D3D20(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_2141D5844(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_2141D3D3C(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_2141D6CEC(a1, a2, a3, *v3, &qword_253F10858);
  *v3 = result;
  return result;
}

char *sub_2141D3D60(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_2141D593C(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_2141D3D7C(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_2141D5A34(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_2141D3D98(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_2141D5B48(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

_QWORD *sub_2141D3DB4(_QWORD *a1, int64_t a2, char a3)
{
  _QWORD **v3;
  _QWORD *result;

  result = sub_2141D6630(a1, a2, a3, *v3, &qword_253F10870, &qword_253F10878);
  *v3 = result;
  return result;
}

char *sub_2141D3DE0(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_2141D5C68(a1, a2, a3, *v3, &qword_253F10820);
  *v3 = result;
  return result;
}

char *sub_2141D3E04(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_2141D5C68(a1, a2, a3, *v3, &qword_253F10428);
  *v3 = result;
  return result;
}

size_t sub_2141D3E28(size_t a1, int64_t a2, char a3)
{
  size_t *v3;
  size_t result;

  result = sub_2141D7340(a1, a2, a3, (_QWORD *)*v3, &qword_254D690D0, type metadata accessor for SgPath);
  *v3 = result;
  return result;
}

char *sub_2141D3E54(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_2141D5D74(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

size_t sub_2141D3E70(size_t a1, int64_t a2, char a3)
{
  size_t *v3;
  size_t result;

  result = sub_2141D7340(a1, a2, a3, (_QWORD *)*v3, &qword_253F10418, type metadata accessor for SgArea);
  *v3 = result;
  return result;
}

size_t sub_2141D3E9C(size_t a1, int64_t a2, char a3)
{
  size_t *v3;
  size_t result;

  result = sub_2141D7340(a1, a2, a3, (_QWORD *)*v3, &qword_253F10D58, type metadata accessor for SgLine);
  *v3 = result;
  return result;
}

size_t sub_2141D3EC8(size_t a1, int64_t a2, char a3)
{
  size_t *v3;
  size_t result;

  result = sub_2141D7340(a1, a2, a3, (_QWORD *)*v3, &qword_253F101C0, type metadata accessor for SgRule);
  *v3 = result;
  return result;
}

size_t sub_2141D3EF4(size_t a1, int64_t a2, char a3)
{
  size_t *v3;
  size_t result;

  result = sub_2141D7340(a1, a2, a3, (_QWORD *)*v3, &qword_253F10860, type metadata accessor for SgPoint);
  *v3 = result;
  return result;
}

size_t sub_2141D3F20(size_t a1, int64_t a2, char a3)
{
  size_t *v3;
  size_t result;

  result = sub_2141D7340(a1, a2, a3, (_QWORD *)*v3, &qword_254D690C8, type metadata accessor for SgSector);
  *v3 = result;
  return result;
}

size_t sub_2141D3F4C(size_t a1, int64_t a2, char a3)
{
  size_t *v3;
  size_t result;

  result = sub_2141D7340(a1, a2, a3, (_QWORD *)*v3, &qword_254D690C0, type metadata accessor for AnyVectorizedRenderer);
  *v3 = result;
  return result;
}

size_t sub_2141D3F78(size_t a1, int64_t a2, char a3)
{
  size_t *v3;
  size_t result;

  result = sub_2141D7340(a1, a2, a3, (_QWORD *)*v3, &qword_253F10450, type metadata accessor for SgRectangle);
  *v3 = result;
  return result;
}

char *sub_2141D3FA4(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_2141D5E90(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

size_t sub_2141D3FC0(size_t a1, int64_t a2, char a3)
{
  size_t *v3;
  size_t result;

  result = sub_2141D7340(a1, a2, a3, (_QWORD *)*v3, &qword_253F10BC0, type metadata accessor for SgGroup);
  *v3 = result;
  return result;
}

char *sub_2141D3FEC(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_2141D5F90(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_2141D4008(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_2141D61E8(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_2141D4024(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_2141D74B4(a1, a2, a3, *v3, &qword_253F122C8);
  *v3 = result;
  return result;
}

char *sub_2141D4048(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_2141D6408(a1, a2, a3, *v3, &qword_253F10D18);
  *v3 = result;
  return result;
}

_QWORD *sub_2141D406C(_QWORD *a1, int64_t a2, char a3)
{
  _QWORD **v3;
  _QWORD *result;

  result = sub_2141D64FC(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

_QWORD *sub_2141D4088(_QWORD *a1, int64_t a2, char a3)
{
  _QWORD **v3;
  _QWORD *result;

  result = sub_2141D6630(a1, a2, a3, *v3, &qword_253F122D8, &qword_253F12240);
  *v3 = result;
  return result;
}

char *sub_2141D40B4(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_2141D6754(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

_QWORD *sub_2141D40D0(_QWORD *a1, int64_t a2, char a3)
{
  _QWORD **v3;
  _QWORD *result;

  result = sub_2141D6870(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

_QWORD *sub_2141D40EC(_QWORD *a1, int64_t a2, char a3)
{
  _QWORD **v3;
  _QWORD *result;

  result = sub_2141D6990(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_2141D4108(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_2141D74B4(a1, a2, a3, *v3, &qword_253F105E8);
  *v3 = result;
  return result;
}

char *sub_2141D412C(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_2141D6BEC(a1, a2, a3, *v3, &qword_253F10818);
  *v3 = result;
  return result;
}

char *sub_2141D4150(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_2141D6CEC(a1, a2, a3, *v3, &qword_253F11FF0);
  *v3 = result;
  return result;
}

char *sub_2141D4174(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_2141D6DF0(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_2141D4190(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_2141D6F08(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

_QWORD *sub_2141D41AC(_QWORD *a1, int64_t a2, char a3)
{
  _QWORD **v3;
  _QWORD *result;

  result = sub_2141D7008(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_2141D41C8(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_2141D7128(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_2141D41E4(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_2141D723C(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

size_t sub_2141D4200(size_t a1, int64_t a2, char a3)
{
  size_t *v3;
  size_t result;

  result = sub_2141D7340(a1, a2, a3, (_QWORD *)*v3, &qword_253F11980, (uint64_t (*)(_QWORD))MEMORY[0x24BDCBDE0]);
  *v3 = result;
  return result;
}

char *sub_2141D422C(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_2141D5214(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_2141D4248(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_2141D74B4(a1, a2, a3, *v3, &qword_254D69188);
  *v3 = result;
  return result;
}

char *sub_2141D426C(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_2141D74B4(a1, a2, a3, *v3, &qword_254D69190);
  *v3 = result;
  return result;
}

char *sub_2141D4290(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_2141D75A8(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_2141D42AC(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_2141D8BF8(&qword_253F10278);
    v10 = (char *)swift_allocObject();
    v11 = j__malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[40 * v8])
      memmove(v12, v13, 40 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

_QWORD *sub_2141D43C0(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    sub_2141D8BF8(&qword_253F13598);
    v10 = (_QWORD *)swift_allocObject();
    v11 = j__malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 1;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 5);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v10 + 4 >= &a4[4 * v8 + 4])
      memmove(v10 + 4, a4 + 4, 32 * v8);
    a4[2] = 0;
  }
  else
  {
    sub_2141D8BF8(&qword_253F13440);
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

char *sub_2141D44E0(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_2141D8BF8(&qword_253F15D38);
    v10 = (char *)swift_allocObject();
    v11 = j__malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8])
      memmove(v12, v13, v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, v8);
  }
  swift_release();
  return v10;
}

char *sub_2141D45C8(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_2141D8BF8(&qword_254D690D8);
    v10 = (char *)swift_allocObject();
    v11 = j__malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[40 * v8])
      memmove(v12, v13, 40 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

char *sub_2141D46DC(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_2141D8BF8(&qword_253F15D40);
    v10 = (char *)swift_allocObject();
    v11 = j__malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8])
      memmove(v13, v14, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

char *sub_2141D47DC(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_2141D8BF8(&qword_253F10FB0);
    v10 = (char *)swift_allocObject();
    v11 = j__malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 56);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[56 * v8])
      memmove(v12, v13, 56 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

char *sub_2141D48F8(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_2141D8BF8(&qword_253F13D70);
    v10 = (char *)swift_allocObject();
    v11 = j__malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 1;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8])
      memmove(v13, v14, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 32 * v8);
  }
  swift_release();
  return v10;
}

char *sub_2141D49F0(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_2141D8BF8(&qword_253F11AA8);
    v10 = (char *)swift_allocObject();
    v11 = j__malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

char *sub_2141D4AF0(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_2141D8BF8(&qword_253F126B0);
    v10 = (char *)swift_allocObject();
    v11 = j__malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

char *sub_2141D4BF0(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_2141D8BF8(&qword_253F15D48);
    v10 = (char *)swift_allocObject();
    v11 = j__malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8])
      memmove(v13, v14, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 8 * v8);
  }
  swift_release();
  return v10;
}

size_t sub_2141D4CE8(size_t a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_2141D7340(a1, a2, a3, a4, &qword_253F11FE8, (uint64_t (*)(_QWORD))MEMORY[0x24BDCE900]);
}

char *sub_2141D4CFC(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_2141D8BF8(&qword_254D69100);
    v10 = (char *)swift_allocObject();
    v11 = j__malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 1;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8])
      memmove(v13, v14, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 32 * v8);
  }
  swift_release();
  return v10;
}

char *sub_2141D4DF4(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_2141D8BF8(&qword_253F103C8);
    v10 = (char *)swift_allocObject();
    v11 = j__malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_release();
  return v10;
}

char *sub_2141D4EEC(char *result, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  char v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v6 = (char)result;
  if ((a3 & 1) != 0)
  {
    v7 = *((_QWORD *)a4 + 3);
    v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v8 = a2;
    }
  }
  else
  {
    v8 = a2;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (v8 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = v8;
  if (v10)
  {
    sub_2141D8BF8(a5);
    v11 = (char *)swift_allocObject();
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 3);
  }
  else
  {
    v11 = (char *)MEMORY[0x24BEE4AF8];
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v6 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[8 * v9])
      memmove(v14, v15, 8 * v9);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v11;
}

char *sub_2141D4FF0(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_2141D8BF8(&qword_253F10608);
    v10 = (char *)swift_allocObject();
    v11 = j__malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 48);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[48 * v8])
      memmove(v12, v13, 48 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, 48 * v8);
  }
  swift_release();
  return v10;
}

char *sub_2141D5104(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_2141D8BF8(&qword_253F10620);
    v10 = (char *)swift_allocObject();
    v11 = j__malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[40 * v8])
      memmove(v12, v13, 40 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

char *sub_2141D5214(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_2141D8BF8(&qword_253F12018);
    v10 = (char *)swift_allocObject();
    v11 = j__malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 1;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8])
      memmove(v13, v14, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 32 * v8);
  }
  swift_release();
  return v10;
}

char *sub_2141D530C(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_2141D8BF8(&qword_253F135B0);
    v10 = (char *)swift_allocObject();
    v11 = j__malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_release();
  return v10;
}

char *sub_2141D5404(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_2141D8BF8(&qword_253F15D30);
    v10 = (char *)swift_allocObject();
    v11 = j__malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 + 31;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 6);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[64 * v8])
      memmove(v13, v14, v8 << 6);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

char *sub_2141D5504(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_2141D8BF8(&qword_253F10BB8);
    v10 = (char *)swift_allocObject();
    v11 = j__malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 1;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8])
      memmove(v13, v14, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 32 * v8);
  }
  swift_release();
  return v10;
}

_QWORD *sub_2141D55FC(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    sub_2141D8BF8(&qword_253F10880);
    v10 = (_QWORD *)swift_allocObject();
    v11 = j__malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v10 + 4 >= &a4[5 * v8 + 4])
      memmove(v10 + 4, a4 + 4, 40 * v8);
    a4[2] = 0;
  }
  else
  {
    sub_2141D8BF8(&qword_253F11F60);
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

char *sub_2141D5730(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_2141D8BF8(&qword_253F10868);
    v10 = (char *)swift_allocObject();
    v11 = j__malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 48);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[48 * v8])
      memmove(v12, v13, 48 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

char *sub_2141D5844(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_2141D8BF8(&qword_253F10BB0);
    v10 = (char *)swift_allocObject();
    v11 = j__malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_release();
  return v10;
}

char *sub_2141D593C(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_2141D8BF8(&qword_253F15D50);
    v10 = (char *)swift_allocObject();
    v11 = j__malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8])
      memmove(v13, v14, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 8 * v8);
  }
  swift_release();
  return v10;
}

char *sub_2141D5A34(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_2141D8BF8(&qword_253F12000);
    v10 = (char *)swift_allocObject();
    v11 = j__malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 96);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[96 * v8])
      memmove(v12, v13, 96 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

char *sub_2141D5B48(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_2141D8BF8(&qword_253F101D0);
    v10 = (char *)swift_allocObject();
    v11 = j__malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[24 * v8])
      memmove(v12, v13, 24 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, 24 * v8);
  }
  swift_release();
  return v10;
}

char *sub_2141D5C5C(char *a1, int64_t a2, char a3, char *a4)
{
  return sub_2141D5C68(a1, a2, a3, a4, &qword_253F10428);
}

char *sub_2141D5C68(char *result, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  char v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;

  v6 = (char)result;
  if ((a3 & 1) != 0)
  {
    v7 = *((_QWORD *)a4 + 3);
    v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v8 = a2;
    }
  }
  else
  {
    v8 = a2;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (v8 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = v8;
  if (v10)
  {
    sub_2141D8BF8(a5);
    v11 = (char *)swift_allocObject();
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 40);
  }
  else
  {
    v11 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((v6 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[40 * v9])
      memmove(v13, v14, 40 * v9);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 40 * v9);
  }
  swift_release();
  return v11;
}

char *sub_2141D5D74(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_2141D8BF8(&qword_253F101B0);
    v10 = (char *)swift_allocObject();
    v11 = j__malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 176);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[176 * v8])
      memmove(v12, v13, 176 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

char *sub_2141D5E90(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_2141D8BF8(&qword_253F101B8);
    v10 = (char *)swift_allocObject();
    v11 = j__malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 1;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8])
      memmove(v13, v14, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

char *sub_2141D5F90(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_2141D8BF8(&qword_253F10BC8);
    v10 = (char *)swift_allocObject();
    v11 = j__malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 712);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[712 * v8])
      memmove(v12, v13, 712 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

_QWORD *sub_2141D60AC(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    sub_2141D8BF8(&qword_253F10BD8);
    v10 = (_QWORD *)swift_allocObject();
    v11 = j__malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 792);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v10 + 4 >= &a4[99 * v8 + 4])
      memmove(v10 + 4, a4 + 4, 792 * v8);
    a4[2] = 0;
  }
  else
  {
    sub_2141D8BF8(&qword_253F13338);
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

char *sub_2141D61E8(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_2141D8BF8(&qword_253F12008);
    v10 = (char *)swift_allocObject();
    v11 = j__malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

_QWORD *sub_2141D62E8(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    sub_2141D8BF8(&qword_253F12020);
    v10 = (_QWORD *)swift_allocObject();
    v11 = j__malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v10 + 4 >= &a4[2 * v8 + 4])
      memmove(v10 + 4, a4 + 4, 16 * v8);
    a4[2] = 0;
  }
  else
  {
    sub_2141D8BF8(qword_253F126C0);
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

char *sub_2141D6408(char *result, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  char v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v6 = (char)result;
  if ((a3 & 1) != 0)
  {
    v7 = *((_QWORD *)a4 + 3);
    v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v8 = a2;
    }
  }
  else
  {
    v8 = a2;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (v8 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = v8;
  if (v10)
  {
    sub_2141D8BF8(a5);
    v11 = (char *)swift_allocObject();
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 3);
  }
  else
  {
    v11 = (char *)MEMORY[0x24BEE4AF8];
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v6 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[8 * v9])
      memmove(v14, v15, 8 * v9);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v14, v15, 8 * v9);
  }
  swift_release();
  return v11;
}

_QWORD *sub_2141D64FC(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    sub_2141D8BF8(&qword_253F0FF88);
    v10 = (_QWORD *)swift_allocObject();
    v11 = j__malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v10 + 4 >= &a4[5 * v8 + 4])
      memmove(v10 + 4, a4 + 4, 40 * v8);
    a4[2] = 0;
  }
  else
  {
    sub_2141D8BF8(&qword_253F0FF90);
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

_QWORD *sub_2141D6630(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  char v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int64_t v14;
  uint64_t v15;

  v8 = (char)result;
  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (v12)
  {
    sub_2141D8BF8(a5);
    v13 = (_QWORD *)swift_allocObject();
    v14 = j__malloc_size(v13);
    v15 = v14 - 32;
    if (v14 < 32)
      v15 = v14 - 25;
    v13[2] = v11;
    v13[3] = 2 * (v15 >> 3);
  }
  else
  {
    v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  if ((v8 & 1) != 0)
  {
    if (v13 != a4 || v13 + 4 >= &a4[v11 + 4])
      memmove(v13 + 4, a4 + 4, 8 * v11);
    a4[2] = 0;
  }
  else
  {
    sub_2141D8BF8(a6);
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v13;
}

char *sub_2141D6754(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_2141D8BF8(&qword_253F13580);
    v10 = (char *)swift_allocObject();
    v11 = j__malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 152);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[152 * v8])
      memmove(v12, v13, 152 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

_QWORD *sub_2141D6870(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    sub_2141D8BF8(&qword_253F135A8);
    v10 = (_QWORD *)swift_allocObject();
    v11 = j__malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 1;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 5);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v10 + 4 >= &a4[4 * v8 + 4])
      memmove(v10 + 4, a4 + 4, 32 * v8);
    a4[2] = 0;
  }
  else
  {
    sub_2141D8BF8(&qword_253F13518);
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

_QWORD *sub_2141D6990(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    sub_2141D8BF8(&qword_253F122D0);
    v10 = (_QWORD *)swift_allocObject();
    v11 = j__malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v10 + 4 >= &a4[2 * v8 + 4])
      memmove(v10 + 4, a4 + 4, 16 * v8);
    a4[2] = 0;
  }
  else
  {
    sub_2141D8BF8(&qword_253F12238);
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

_QWORD *sub_2141D6AB0(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    sub_2141D8BF8(&qword_253F122E8);
    v10 = (_QWORD *)swift_allocObject();
    v11 = j__malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 304);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v10 + 4 >= &a4[38 * v8 + 4])
      memmove(v10 + 4, a4 + 4, 304 * v8);
    a4[2] = 0;
  }
  else
  {
    sub_2141D8BF8(&qword_253F12040);
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

char *sub_2141D6BEC(char *result, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  char v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;

  v6 = (char)result;
  if ((a3 & 1) != 0)
  {
    v7 = *((_QWORD *)a4 + 3);
    v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v8 = a2;
    }
  }
  else
  {
    v8 = a2;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (v8 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = v8;
  if (v10)
  {
    sub_2141D8BF8(a5);
    v11 = (char *)swift_allocObject();
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 40);
  }
  else
  {
    v11 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  v15 = 40 * v9;
  if ((v6 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v15])
      memmove(v13, v14, v15);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, v15);
  }
  swift_release();
  return v11;
}

char *sub_2141D6CEC(char *result, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  char v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;

  v6 = (char)result;
  if ((a3 & 1) != 0)
  {
    v7 = *((_QWORD *)a4 + 3);
    v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v8 = a2;
    }
  }
  else
  {
    v8 = a2;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (v8 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = v8;
  if (v10)
  {
    sub_2141D8BF8(a5);
    v11 = (char *)swift_allocObject();
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 24);
  }
  else
  {
    v11 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  v15 = 24 * v9;
  if ((v6 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v15])
      memmove(v13, v14, v15);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, v15);
  }
  swift_release();
  return v11;
}

char *sub_2141D6DF0(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_2141D8BF8(&qword_253F10600);
    v10 = (char *)swift_allocObject();
    v11 = j__malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 152);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[152 * v8])
      memmove(v12, v13, 152 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

char *sub_2141D6F08(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_2141D8BF8(&qword_253F105F8);
    v10 = (char *)swift_allocObject();
    v11 = j__malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 1;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8])
      memmove(v13, v14, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

_QWORD *sub_2141D7008(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    sub_2141D8BF8(&qword_253F11AB0);
    v10 = (_QWORD *)swift_allocObject();
    v11 = j__malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v10 + 4 >= &a4[v8 + 4])
      memmove(v10 + 4, a4 + 4, 8 * v8);
    a4[2] = 0;
  }
  else
  {
    sub_2141D8BF8(&qword_253F119B0);
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

char *sub_2141D7128(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_2141D8BF8(&qword_254D69120);
    v10 = (char *)swift_allocObject();
    v11 = j__malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 48);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[48 * v8])
      memmove(v12, v13, 48 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, 48 * v8);
  }
  swift_release();
  return v10;
}

char *sub_2141D723C(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  size_t v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_2141D8BF8(&qword_253F122B0);
    v10 = (char *)swift_allocObject();
    v11 = j__malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 80);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  v14 = 80 * v8;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v14])
      memmove(v12, v13, v14);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, v14);
  }
  swift_release();
  return v10;
}

size_t sub_2141D7340(size_t result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  char v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v18;
  unint64_t v19;

  v8 = result;
  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_30:
        __break(1u);
        return result;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (!v12)
  {
    v16 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_19;
  }
  sub_2141D8BF8(a5);
  v13 = *(_QWORD *)(a6(0) - 8);
  v14 = *(_QWORD *)(v13 + 72);
  v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v16 = (_QWORD *)swift_allocObject();
  result = j__malloc_size(v16);
  if (!v14)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (result - v15 == 0x8000000000000000 && v14 == -1)
    goto LABEL_29;
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(result - v15) / v14);
LABEL_19:
  v18 = *(_QWORD *)(a6(0) - 8);
  if ((v8 & 1) != 0)
  {
    if (v16 < a4
      || (v19 = (*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80),
          (char *)v16 + v19 >= (char *)a4 + v19 + *(_QWORD *)(v18 + 72) * v11))
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (size_t)v16;
}

char *sub_2141D74B4(char *result, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  char v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v6 = (char)result;
  if ((a3 & 1) != 0)
  {
    v7 = *((_QWORD *)a4 + 3);
    v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v8 = a2;
    }
  }
  else
  {
    v8 = a2;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (v8 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = v8;
  if (v10)
  {
    sub_2141D8BF8(a5);
    v11 = (char *)swift_allocObject();
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)MEMORY[0x24BEE4AF8];
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v6 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v9])
      memmove(v14, v15, 16 * v9);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v14, v15, 16 * v9);
  }
  swift_release();
  return v11;
}

char *sub_2141D75A8(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_2141D8BF8(&qword_254D69180);
    v10 = (char *)swift_allocObject();
    v11 = j__malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 + 31;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 6);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[64 * v8])
      memmove(v13, v14, v8 << 6);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

uint64_t sub_2141D76A8(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 0xFF)
    return sub_2141D76BC(a1, a2, a3);
  return a1;
}

uint64_t sub_2141D76BC(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 2u)
    return swift_retain();
  return result;
}

uint64_t sub_2141D76D4()
{
  swift_release();
  return swift_deallocObject();
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> sub_2141D76F8()
{
  uint64_t v0;
  void (*v1)(uint64_t *);
  uint64_t v2;

  v1 = *(void (**)(uint64_t *))(v0 + 32);
  swift_bridgeObjectRetain();
  v1(&v2);
}

uint64_t sub_2141D7730(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if (a3 == 1)
    return swift_release();
  if (!a3)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t sub_2141D774C(uint64_t result, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 0xFBu)
    return sub_2141D7760(result, a2, a3);
  return result;
}

uint64_t sub_2141D7760(uint64_t result, uint64_t a2, unsigned __int8 a3)
{
  switch(a3 >> 5)
  {
    case 1:
    case 2:
    case 3:
    case 4:
    case 6:
      result = swift_bridgeObjectRelease();
      break;
    case 5:
      result = swift_release();
      break;
    case 7:
      result = sub_2141D779C(result, a2, a3 & 0x1F);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_2141D779C(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 3u)
    return swift_release();
  return result;
}

void sub_2141D77B4(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4, char a5)
{
  switch(a5)
  {
    case 0:
    case 1:
    case 2:
      swift_bridgeObjectRelease();
      break;
    case 3:
      sub_2141D77F4(a2, a3, a4);
      break;
    default:
      return;
  }
}

uint64_t sub_2141D77F4(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 0xFF)
    return sub_2141D7808(a1, a2, a3);
  return a1;
}

uint64_t sub_2141D7808(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 2u)
    return swift_release();
  return result;
}

uint64_t type metadata accessor for _ScaleRangeOutputs(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2141D8E88(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _ScaleRangeOutputs);
}

uint64_t sub_2141D782C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2141D78BC(a1, a2);
}

uint64_t sub_2141D7840@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_2141D15F0(a1, *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), a2);
}

void sub_2141D7864(uint64_t a1, uint64_t a2, uint64_t a3, __int16 a4)
{
  if (HIBYTE(a4) != 255)
    sub_2141D77B4(a1, a2, a3, a4, SHIBYTE(a4));
}

uint64_t sub_2141D7878(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_2141D78BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_2141D1E58(a1, *(_QWORD **)(v2 + 56), *(_QWORD *)(v2 + 24), a2);
}

uint64_t sub_2141D78E0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;

  return sub_2141D1FA0(a1, v2[3], v2[4], v2[7], a2);
}

uint64_t sub_2141D7904@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_2141D2258(a1, *(_QWORD **)(v2 + 40), a2);
}

uint64_t sub_2141D7924(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x2199CD928](255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_2141D7968@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_2141D2384(a1, *(_QWORD *)(v2 + 24), a2);
}

uint64_t sub_2141D7988@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_2141D2BA4(a1, *(_QWORD **)(v2 + 40), a2);
}

uint64_t sub_2141D79A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_2141D2CE8(a1, *(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 24), a2);
}

uint64_t sub_2141D79CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_2141D3404(a1, *(_QWORD **)(v2 + 40), a2);
}

uint64_t sub_2141D79EC(uint64_t a1)
{
  uint64_t *v1;

  return sub_2141D3520(a1, v1[6], v1[2], v1[3]);
}

unint64_t sub_2141D7A10(uint64_t a1)
{
  unint64_t result;

  result = sub_2141D7A34();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_2141D7A34()
{
  unint64_t result;
  uint64_t v1;
  unint64_t v2;

  result = qword_254D68F80;
  if (!qword_254D68F80)
  {
    v1 = sub_2141D7924(&qword_254D68F88);
    v2 = sub_2141D7A98();
    result = MEMORY[0x2199CD934](&protocol conformance descriptor for <> ClosedRange<A>, v1, &v2);
    atomic_store(result, (unint64_t *)&qword_254D68F80);
  }
  return result;
}

unint64_t sub_2141D7A98()
{
  unint64_t result;

  result = qword_254D68F90;
  if (!qword_254D68F90)
  {
    result = MEMORY[0x2199CD934](MEMORY[0x24BEE50B8], MEMORY[0x24BEE50B0]);
    atomic_store(result, (unint64_t *)&qword_254D68F90);
  }
  return result;
}

uint64_t sub_2141D7ADC(uint64_t a1)
{
  uint64_t result;

  result = sub_2141D9054(qword_254D68FB0, &qword_253F10C58, (uint64_t)&protocol conformance descriptor for [A]);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_2141D7B18(uint64_t a1)
{
  uint64_t result;

  result = sub_2141D9054(&qword_254D68FD0, &qword_254D68FD8, (uint64_t)&protocol conformance descriptor for ArraySlice<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t initializeWithTake for AnyPrimitivePlottableArray(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for AnyPrimitivePlottableArray(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AnyPrimitivePlottableArray(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ScaleType()
{
  return &type metadata for ScaleType;
}

uint64_t sub_2141D7C08(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4, char a5)
{
  uint64_t result;

  switch(a5)
  {
    case 0:
    case 1:
    case 2:
      result = swift_bridgeObjectRetain();
      break;
    case 3:
      result = sub_2141D76A8(a2, a3, a4);
      break;
    default:
      return result;
  }
  return result;
}

void destroy for ChartInternal.ScaleDomain(uint64_t a1)
{
  sub_2141D77B4(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24), *(_BYTE *)(a1 + 25));
}

uint64_t initializeWithCopy for ChartInternal.ScaleDomain(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  unsigned __int8 v7;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_BYTE *)(a2 + 25);
  v7 = *(_BYTE *)(a2 + 24);
  sub_2141D7C08(*(_QWORD *)a2, v4, v5, v7, v6);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = v7;
  *(_BYTE *)(a1 + 25) = v6;
  return a1;
}

uint64_t assignWithCopy for ChartInternal.ScaleDomain(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  unsigned __int8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  char v12;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_BYTE *)(a2 + 25);
  v7 = *(_BYTE *)(a2 + 24);
  sub_2141D7C08(*(_QWORD *)a2, v4, v5, v7, v6);
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  v11 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v7;
  v12 = *(_BYTE *)(a1 + 25);
  *(_BYTE *)(a1 + 25) = v6;
  sub_2141D77B4(v8, v9, v10, v11, v12);
  return a1;
}

__n128 initializeWithTake for ChartInternal.ScaleDomain(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 10) = *(_OWORD *)(a2 + 10);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for ChartInternal.ScaleDomain(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int16 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  unsigned __int8 v9;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_WORD *)(a2 + 24);
  v5 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v3;
  v8 = *(_BYTE *)(a1 + 25);
  v9 = *(_BYTE *)(a1 + 24);
  *(_WORD *)(a1 + 24) = v4;
  sub_2141D77B4(v5, v7, v6, v9, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for ChartInternal.ScaleDomain(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 26))
    return (*(_DWORD *)a1 + 253);
  v3 = *(unsigned __int8 *)(a1 + 25);
  if (v3 <= 3)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ChartInternal.ScaleDomain(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_WORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 253;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 26) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 26) = 0;
    if (a2)
      *(_BYTE *)(result + 25) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for _ScaleDomainOutputs()
{
  return &type metadata for _ScaleDomainOutputs;
}

uint64_t dispatch thunk of ScaleDomain._makeScaleDomain()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t sub_2141D7E50()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_2141D7E5C(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if (a3 == 1)
    return swift_retain();
  if (!a3)
    return swift_bridgeObjectRetain();
  return result;
}

__n128 initializeWithTake for AnyPrimitivePlottableTransform(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t dispatch thunk of ScaleRange._makeScaleRange()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t destroy for AutomaticScaleDomain(uint64_t result)
{
  int v1;

  v1 = *(unsigned __int8 *)(result + 24);
  if (v1 != 255)
    return sub_2141D7808(*(_QWORD *)(result + 8), *(_QWORD *)(result + 16), v1);
  return result;
}

uint64_t initializeWithCopy for AutomaticScaleDomain(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;

  *(_WORD *)a1 = *(_WORD *)a2;
  v3 = *(unsigned __int8 *)(a2 + 24);
  if (v3 == 255)
  {
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  }
  else
  {
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(_QWORD *)(a2 + 16);
    sub_2141D76BC(v4, v5, v3);
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v5;
    *(_BYTE *)(a1 + 24) = v3;
  }
  return a1;
}

uint64_t assignWithCopy for AutomaticScaleDomain(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  __int128 v14;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  v3 = a1 + 8;
  v4 = (__int128 *)(a2 + 8);
  v5 = *(unsigned __int8 *)(a2 + 24);
  if (*(unsigned __int8 *)(a1 + 24) == 255)
  {
    if (v5 == 255)
    {
      v14 = *v4;
      *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
      *(_OWORD *)v3 = v14;
    }
    else
    {
      v11 = *(_QWORD *)(a2 + 8);
      v12 = *(_QWORD *)(a2 + 16);
      sub_2141D76BC(v11, v12, v5);
      *(_QWORD *)(a1 + 8) = v11;
      *(_QWORD *)(a1 + 16) = v12;
      *(_BYTE *)(a1 + 24) = v5;
    }
  }
  else if (v5 == 255)
  {
    sub_2141D800C(a1 + 8);
    v13 = *((_BYTE *)v4 + 16);
    *(_OWORD *)v3 = *v4;
    *(_BYTE *)(v3 + 16) = v13;
  }
  else
  {
    v6 = *(_QWORD *)(a2 + 8);
    v7 = *(_QWORD *)(a2 + 16);
    sub_2141D76BC(v6, v7, v5);
    v8 = *(_QWORD *)(a1 + 8);
    v9 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 8) = v6;
    *(_QWORD *)(a1 + 16) = v7;
    v10 = *(_BYTE *)(a1 + 24);
    *(_BYTE *)(a1 + 24) = v5;
    sub_2141D7808(v8, v9, v10);
  }
  return a1;
}

uint64_t sub_2141D800C(uint64_t a1)
{
  destroy for AnyPrimitivePlottableTransform(a1);
  return a1;
}

__n128 initializeWithTake for AutomaticScaleDomain(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for AutomaticScaleDomain(uint64_t a1, _BYTE *a2)
{
  uint64_t v3;
  _BYTE *v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  *(_BYTE *)a1 = *a2;
  *(_BYTE *)(a1 + 1) = a2[1];
  v3 = a1 + 8;
  v4 = a2 + 8;
  v5 = *(unsigned __int8 *)(a1 + 24);
  if (v5 == 255)
    goto LABEL_5;
  v6 = a2[24];
  if (v6 == 255)
  {
    sub_2141D800C(a1 + 8);
LABEL_5:
    *(_OWORD *)v3 = *(_OWORD *)v4;
    *(_BYTE *)(v3 + 16) = v4[16];
    return a1;
  }
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)v4;
  *(_BYTE *)(a1 + 24) = v6;
  sub_2141D7808(v7, v8, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for AutomaticScaleDomain(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 25))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 1);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for AutomaticScaleDomain(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 25) = 0;
    if (a2)
      *(_BYTE *)(result + 1) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for AutomaticScaleDomain()
{
  return &type metadata for AutomaticScaleDomain;
}

__n128 initializeBufferWithCopyOfBuffer for PlotDimensionScaleRange(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for PlotDimensionScaleRange(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for PlotDimensionScaleRange(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

ValueMetadata *type metadata accessor for PlotDimensionScaleRange()
{
  return &type metadata for PlotDimensionScaleRange;
}

unint64_t sub_2141D81F0()
{
  unint64_t result;

  result = qword_253F13408;
  if (!qword_253F13408)
  {
    result = MEMORY[0x2199CD934](&unk_214426910, &type metadata for ChartScaleModifier);
    atomic_store(result, (unint64_t *)&qword_253F13408);
  }
  return result;
}

uint64_t sub_2141D823C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  v2 = sub_214424110();
  v4[0] = v1;
  v4[1] = sub_2141D81F0();
  return MEMORY[0x2199CD934](MEMORY[0x24BDED308], v2, v4);
}

uint64_t sub_2141D82C4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 24);
  v2 = sub_214424110();
  v4[0] = v1;
  v4[1] = sub_2141D81F0();
  return MEMORY[0x2199CD934](MEMORY[0x24BDED308], v2, v4);
}

uint64_t sub_2141D8320(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 16);
  v2 = sub_214424110();
  v4[0] = v1;
  v4[1] = sub_2141D81F0();
  return MEMORY[0x2199CD934](MEMORY[0x24BDED308], v2, v4);
}

void type metadata accessor for Subgraph(uint64_t a1)
{
  sub_2141D90E8(a1, qword_254D69028);
}

void type metadata accessor for CGPoint(uint64_t a1)
{
  sub_2141D90E8(a1, &qword_253F15CE8);
}

uint64_t initializeBufferWithCopyOfBuffer for AnyChartContent(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t sub_2141D83D0(uint64_t result, uint64_t a2, unsigned __int8 a3)
{
  switch(a3 >> 5)
  {
    case 1:
    case 2:
    case 3:
    case 4:
    case 6:
      result = swift_bridgeObjectRetain();
      break;
    case 5:
      result = swift_retain();
      break;
    case 7:
      result = sub_2141D840C(result, a2, a3 & 0x1F);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_2141D840C(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 3u)
    return swift_retain();
  return result;
}

void destroy for ChartScaleModifier(uint64_t a1)
{
  unsigned int v2;
  unsigned int v3;

  v2 = *(unsigned __int16 *)(a1 + 48);
  if (v2 >> 8 <= 0xFE)
    sub_2141D77B4(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), v2, SBYTE1(v2));
  v3 = *(unsigned __int8 *)(a1 + 72);
  if (v3 <= 0xFB)
    sub_2141D7760(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), v3);
}

uint64_t initializeWithCopy for ChartScaleModifier(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v4 = *(unsigned __int16 *)(a2 + 48);
  if (v4 >> 8 <= 0xFE)
  {
    v5 = *(_QWORD *)(a2 + 24);
    v6 = *(_QWORD *)(a2 + 32);
    v7 = *(_QWORD *)(a2 + 40);
    sub_2141D7C08(v5, v6, v7, v4, SBYTE1(v4));
    *(_QWORD *)(a1 + 24) = v5;
    *(_QWORD *)(a1 + 32) = v6;
    *(_QWORD *)(a1 + 40) = v7;
    *(_WORD *)(a1 + 48) = v4;
  }
  else
  {
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 34) = *(_OWORD *)(a2 + 34);
  }
  v8 = *(unsigned __int8 *)(a2 + 72);
  if (v8 <= 0xFB)
  {
    v10 = *(_QWORD *)(a2 + 56);
    v9 = *(_QWORD *)(a2 + 64);
    sub_2141D83D0(v10, v9, v8);
    *(_QWORD *)(a1 + 56) = v10;
    *(_QWORD *)(a1 + 64) = v9;
    *(_BYTE *)(a1 + 72) = v8;
  }
  else
  {
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  }
  return a1;
}

uint64_t assignWithCopy for ChartScaleModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 *v5;
  __int128 *v6;
  unsigned int v7;
  unsigned int v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 v20;
  char v21;
  _OWORD *v22;
  _OWORD *v23;
  unsigned int v24;
  __int128 v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 v33;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  v5 = (__int128 *)(a1 + 24);
  v6 = (__int128 *)(a2 + 24);
  v7 = *(unsigned __int16 *)(a2 + 48);
  v8 = v7 >> 8;
  if (*(unsigned __int8 *)(a1 + 49) == 255)
  {
    if (v8 <= 0xFE)
    {
      v11 = *(_QWORD *)(a2 + 24);
      v12 = *(_QWORD *)(a2 + 32);
      v13 = *(_QWORD *)(a2 + 40);
      sub_2141D7C08(v11, v12, v13, v7, SBYTE1(v7));
      *(_QWORD *)(a1 + 24) = v11;
      *(_QWORD *)(a1 + 32) = v12;
      *(_QWORD *)(a1 + 40) = v13;
      *(_WORD *)(a1 + 48) = v7;
    }
    else
    {
      v9 = *v6;
      *(_OWORD *)(a1 + 34) = *(_OWORD *)(a2 + 34);
      *v5 = v9;
    }
  }
  else if (v8 <= 0xFE)
  {
    v14 = *(_QWORD *)(a2 + 24);
    v15 = *(_QWORD *)(a2 + 32);
    v16 = *(_QWORD *)(a2 + 40);
    sub_2141D7C08(v14, v15, v16, v7, SBYTE1(v7));
    v17 = *(_QWORD *)(a1 + 24);
    v18 = *(_QWORD *)(a1 + 32);
    v19 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 24) = v14;
    *(_QWORD *)(a1 + 32) = v15;
    *(_QWORD *)(a1 + 40) = v16;
    v20 = *(_BYTE *)(a1 + 48);
    *(_BYTE *)(a1 + 48) = v7;
    v21 = *(_BYTE *)(a1 + 49);
    *(_BYTE *)(a1 + 49) = BYTE1(v7);
    sub_2141D77B4(v17, v18, v19, v20, v21);
  }
  else
  {
    sub_2141D8734(a1 + 24);
    v10 = *(__int128 *)((char *)v6 + 10);
    *v5 = *v6;
    *(__int128 *)((char *)v5 + 10) = v10;
  }
  v22 = (_OWORD *)(a1 + 56);
  v23 = (_OWORD *)(a2 + 56);
  v24 = *(unsigned __int8 *)(a2 + 72);
  if (*(unsigned __int8 *)(a1 + 72) <= 0xFBu)
  {
    if (v24 <= 0xFB)
    {
      v30 = *(_QWORD *)(a2 + 56);
      v29 = *(_QWORD *)(a2 + 64);
      sub_2141D83D0(v30, v29, v24);
      v31 = *(_QWORD *)(a1 + 56);
      v32 = *(_QWORD *)(a1 + 64);
      *(_QWORD *)(a1 + 56) = v30;
      *(_QWORD *)(a1 + 64) = v29;
      v33 = *(_BYTE *)(a1 + 72);
      *(_BYTE *)(a1 + 72) = v24;
      sub_2141D7760(v31, v32, v33);
    }
    else
    {
      sub_2141D8768(a1 + 56);
      v26 = *(_BYTE *)(a2 + 72);
      *v22 = *v23;
      *(_BYTE *)(a1 + 72) = v26;
    }
  }
  else if (v24 <= 0xFB)
  {
    v28 = *(_QWORD *)(a2 + 56);
    v27 = *(_QWORD *)(a2 + 64);
    sub_2141D83D0(v28, v27, v24);
    *(_QWORD *)(a1 + 56) = v28;
    *(_QWORD *)(a1 + 64) = v27;
    *(_BYTE *)(a1 + 72) = v24;
  }
  else
  {
    v25 = *v23;
    *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
    *v22 = v25;
  }
  return a1;
}

uint64_t sub_2141D8734(uint64_t a1)
{
  destroy for ChartInternal.ScaleDomain(a1);
  return a1;
}

uint64_t sub_2141D8768(uint64_t a1)
{
  destroy for ChartInternal.ScaleRange(a1);
  return a1;
}

__n128 initializeWithTake for ChartScaleModifier(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for ChartScaleModifier(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  _OWORD *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v4 = (_OWORD *)(a1 + 24);
  v5 = (_OWORD *)(a2 + 24);
  v6 = *(unsigned __int16 *)(a1 + 48);
  if (v6 >> 8 > 0xFE)
    goto LABEL_4;
  v7 = *(unsigned __int16 *)(a2 + 48);
  if (v7 >> 8 > 0xFE)
  {
    sub_2141D8734(a1 + 24);
LABEL_4:
    *v4 = *v5;
    *(_OWORD *)((char *)v4 + 10) = *(_OWORD *)((char *)v5 + 10);
    goto LABEL_6;
  }
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = v8;
  *(_WORD *)(a1 + 48) = v7;
  sub_2141D77B4(v9, v10, v11, v6, SBYTE1(v6));
LABEL_6:
  v12 = (_OWORD *)(a2 + 56);
  v13 = *(unsigned __int8 *)(a1 + 72);
  if (v13 <= 0xFB)
  {
    v14 = *(unsigned __int8 *)(a2 + 72);
    if (v14 <= 0xFB)
    {
      v15 = *(_QWORD *)(a1 + 56);
      v16 = *(_QWORD *)(a1 + 64);
      *(_OWORD *)(a1 + 56) = *v12;
      *(_BYTE *)(a1 + 72) = v14;
      sub_2141D7760(v15, v16, v13);
      return a1;
    }
    sub_2141D8768(a1 + 56);
  }
  *(_OWORD *)(a1 + 56) = *v12;
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  return a1;
}

uint64_t getEnumTagSinglePayload for ChartScaleModifier(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 73))
    return (*(_DWORD *)a1 + 253);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = (v3 ^ 0xFF) - 1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ChartScaleModifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 72) = 0;
    *(_QWORD *)result = a2 - 253;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 73) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 73) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = ~(_BYTE)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ChartScaleModifier()
{
  return &type metadata for ChartScaleModifier;
}

uint64_t sub_2141D8970()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_2141D8978(uint64_t a1)
{
  return sub_2141D7730(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t sub_2141D8988(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_2141D7E5C(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t sub_2141D89D0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_2141D7E5C(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  sub_2141D7730(v6, v7, v8);
  return a1;
}

uint64_t sub_2141D8A24(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  sub_2141D7730(v4, v5, v6);
  return a1;
}

uint64_t _s6Charts30AnyPrimitivePlottableTransformOwet_0(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t _s6Charts30AnyPrimitivePlottableTransformOwst_0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 254;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t sub_2141D8AF4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t sub_2141D8B00(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = a2;
  return result;
}

uint64_t type metadata accessor for _ScaleRangeOutputs.Storage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2141D8E88(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _ScaleRangeOutputs.Storage);
}

__n128 sub_2141D8B14(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u32[0] = a2[1].n128_u32[0];
  *a1 = result;
  return result;
}

uint64_t sub_2141D8B28(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 20))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_2141D8B48(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_DWORD *)(result + 16) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 20) = v3;
  return result;
}

void type metadata accessor for Decimal(uint64_t a1)
{
  sub_2141D90E8(a1, &qword_254D690B0);
}

void type metadata accessor for CGSize(uint64_t a1)
{
  sub_2141D90E8(a1, &qword_253F15CE0);
}

__n128 initializeWithTake for ChartAxisStyleConfigurations.Storage(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t storeEnumTagSinglePayload for SgPadding(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 32) = v3;
  return result;
}

void type metadata accessor for CGRect(uint64_t a1)
{
  sub_2141D90E8(a1, &qword_253F15CD0);
}

uint64_t sub_2141D8BE8()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_2141D8BF8(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x2199CD91C]((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_2141D8C44()
{
  uint64_t v0;
  unsigned int v1;
  unsigned int v2;

  v1 = *(unsigned __int16 *)(v0 + 64);
  if (v1 >> 8 <= 0xFE)
    sub_2141D77B4(*(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), v1, SBYTE1(v1));
  v2 = *(unsigned __int8 *)(v0 + 88);
  if (v2 <= 0xFB)
    sub_2141D7760(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), v2);
  return swift_deallocObject();
}

uint64_t sub_2141D8C90(uint64_t *a1)
{
  uint64_t v1;

  return sub_2141D009C(a1, v1 + 16);
}

uint64_t sub_2141D8C98(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 v4;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(a1 + 64);
  v4 = *(_BYTE *)(a1 + 72);
  sub_2141D8CE8(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_WORD *)(a1 + 48));
  sub_2141D8CFC(v2, v3, v4);
  return a1;
}

uint64_t sub_2141D8CE8(uint64_t result, uint64_t a2, uint64_t a3, __int16 a4)
{
  if (HIBYTE(a4) != 255)
    return sub_2141D7C08(result, a2, a3, a4, SHIBYTE(a4));
  return result;
}

uint64_t sub_2141D8CFC(uint64_t result, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 0xFBu)
    return sub_2141D83D0(result, a2, a3);
  return result;
}

uint64_t sub_2141D8D10(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  __int16 v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  unsigned __int8 v7;
  __int16 v8;
  uint64_t v9;
  unsigned __int8 v10;
  char v11;
  uint64_t v13;
  unsigned __int8 v14;
  __int128 v15;
  uint64_t v16;
  __int16 v17;
  __int128 v18;
  unsigned __int8 v19;
  uint64_t v20;
  unsigned __int8 v21;
  __int128 v22;
  uint64_t v23;
  __int16 v24;
  __int128 v25;
  unsigned __int8 v26;

  if (*a1 == *a2)
  {
    v2 = a2[72];
    v3 = *((_WORD *)a2 + 24);
    v4 = *((_QWORD *)a2 + 5);
    v5 = a2[16];
    v6 = *((_QWORD *)a2 + 1);
    v7 = a1[72];
    v8 = *((_WORD *)a1 + 24);
    v9 = *((_QWORD *)a1 + 5);
    v10 = a1[16];
    v20 = *((_QWORD *)a1 + 1);
    v21 = v10;
    v22 = *(_OWORD *)(a1 + 24);
    v23 = v9;
    v24 = v8;
    v25 = *(_OWORD *)(a1 + 56);
    v26 = v7;
    v13 = v6;
    v14 = v5;
    v15 = *(_OWORD *)(a2 + 24);
    v16 = v4;
    v17 = v3;
    v18 = *(_OWORD *)(a2 + 56);
    v19 = v2;
    v11 = sub_2142B04EC((uint64_t)&v20, (uint64_t)&v13);
  }
  else
  {
    v11 = 0;
  }
  return v11 & 1;
}

uint64_t sub_2141D8DC0(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t *sub_2141D8DD8(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t sub_2141D8E14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t *v4;
  __int128 v6;

  v6 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)(a2 + 24) = v6;
  v4 = sub_2141D8DD8((uint64_t *)a2);
  return (*(uint64_t (**)(uint64_t *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(v4, a1);
}

uint64_t sub_2141D8E6C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_2141D0720(a1, a2);
}

uint64_t sub_2141D8E88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return MEMORY[0x2199CD874](a1, v6, a5);
}

void type metadata accessor for CGColor(uint64_t a1)
{
  sub_2141D90E8(a1, &qword_254D69128);
}

uint64_t sub_2141D8EC8(uint64_t a1, int a2)
{
  int v3;

  if (!a2)
    return 0;
  if (a2 != 1 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 2);
  if (*(_QWORD *)(a1 + 8))
    v3 = -1;
  else
    v3 = 0;
  return (v3 + 1);
}

uint64_t sub_2141D8F0C(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 1)
  {
    *(_QWORD *)result = a2 - 2;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 2)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 2)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = 0;
  }
  return result;
}

void type metadata accessor for CGPathElement(uint64_t a1)
{
  sub_2141D90E8(a1, qword_254D69130);
}

void type metadata accessor for CGPath(uint64_t a1)
{
  sub_2141D90E8(a1, &qword_253F10438);
}

void type metadata accessor for CGMutablePath(uint64_t a1)
{
  sub_2141D90E8(a1, &qword_254D69168);
}

uint64_t sub_2141D8F84(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for CGPath(255);
  *(_QWORD *)(a1 + 16) = v2;
  return 0;
}

unint64_t sub_2141D8FB8()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_253F134B0;
  if (!qword_253F134B0)
  {
    v1 = sub_2141D7924(&qword_253F134B8);
    v2[0] = sub_2141D9054(&qword_253F134F8, &qword_253F13500, MEMORY[0x24BDEFB78]);
    v2[1] = sub_2141D9054(&qword_253F13508, &qword_253F13510, MEMORY[0x24BDF1248]);
    result = MEMORY[0x2199CD934](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&qword_253F134B0);
  }
  return result;
}

uint64_t sub_2141D9054(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_2141D7924(a2);
    result = MEMORY[0x2199CD934](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for CGPathElementType(uint64_t a1)
{
  sub_2141D90E8(a1, &qword_254D69170);
}

__n128 sub_2141D90A8(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for SgPadding(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

void type metadata accessor for simd_double2x2(uint64_t a1)
{
  sub_2141D90E8(a1, &qword_254D69178);
}

void sub_2141D90E8(uint64_t a1, unint64_t *a2)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

uint64_t sub_2141D9140()
{
  return AGCompareValues();
}

double sub_2141D91AC@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t sub_2141D91B8()
{
  sub_2141D9AC0();
  return sub_214423EE8();
}

uint64_t sub_2141D9208()
{
  uint64_t v1;

  sub_2141D976C();
  sub_214424224();
  return v1;
}

uint64_t ChartAxisContent.body.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
  return swift_retain();
}

uint64_t sub_2141D9258()
{
  return sub_214424884();
}

uint64_t sub_2141D9270@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
  return swift_retain();
}

uint64_t View.chartXAxisStyle<A>(content:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_2141D9428(a1, a2, a3, a4, a5, a6);
}

double sub_2141D9290@<D0>(_OWORD *a1@<X8>)
{
  double result;
  __int128 v3;
  __int128 v4;

  sub_2141D976C();
  sub_214424224();
  result = *(double *)&v3;
  *a1 = v3;
  a1[1] = v4;
  return result;
}

uint64_t sub_2141D92E0(uint64_t *a1)
{
  uint64_t v1;

  v1 = a1[2];
  sub_2141D975C(*a1);
  sub_2141D975C(v1);
  sub_2141D976C();
  return sub_214424230();
}

uint64_t sub_2141D9350(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v14;
  uint64_t v15;
  uint64_t result;

  v14 = (_QWORD *)swift_allocObject();
  v14[2] = a4;
  v14[3] = a5;
  v14[4] = a6;
  v14[5] = a7;
  v14[6] = a2;
  v14[7] = a3;
  v15 = *a1;
  swift_retain();
  result = sub_2141D972C(v15);
  *a1 = (uint64_t)sub_2141D9728;
  a1[1] = (uint64_t)v14;
  return result;
}

uint64_t sub_2141D93E4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2141D9408(uint64_t a1)
{
  return sub_2141D958C(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141D9350);
}

uint64_t View.chartYAxisStyle<A>(content:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_2141D9428(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_2141D9428(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v12;

  swift_getKeyPath();
  v12 = (_QWORD *)swift_allocObject();
  v12[2] = a3;
  v12[3] = a4;
  v12[4] = a5;
  v12[5] = a6;
  v12[6] = a1;
  v12[7] = a2;
  swift_retain();
  sub_2144248FC();
  swift_release();
  return swift_release();
}

uint64_t sub_2141D94EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v14;
  uint64_t v15;
  uint64_t result;

  v14 = (_QWORD *)swift_allocObject();
  v14[2] = a4;
  v14[3] = a5;
  v14[4] = a6;
  v14[5] = a7;
  v14[6] = a2;
  v14[7] = a3;
  v15 = *(_QWORD *)(a1 + 16);
  swift_retain();
  result = sub_2141D972C(v15);
  *(_QWORD *)(a1 + 16) = sub_2141D9728;
  *(_QWORD *)(a1 + 24) = v14;
  return result;
}

uint64_t sub_2141D9580(uint64_t a1)
{
  return sub_2141D958C(a1, sub_2141D94EC);
}

uint64_t sub_2141D958C(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v2;

  return a2(a1, v2[6], v2[7], v2[2], v2[3], v2[4], v2[5]);
}

uint64_t sub_2141D95A0()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for ChartAxisContent()
{
  return &type metadata for ChartAxisContent;
}

uint64_t sub_2141D95C0()
{
  return MEMORY[0x24BDF4760];
}

uint64_t sub_2141D95CC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 16);
  sub_2141D7924(&qword_254D69198);
  v2 = sub_214424110();
  v4[0] = v1;
  v4[1] = sub_2141D9630();
  return MEMORY[0x2199CD934](MEMORY[0x24BDED308], v2, v4);
}

unint64_t sub_2141D9630()
{
  unint64_t result;
  uint64_t v1;

  result = qword_254D691A0;
  if (!qword_254D691A0)
  {
    v1 = sub_2141D7924(&qword_254D69198);
    result = MEMORY[0x2199CD934](MEMORY[0x24BDF1248], v1);
    atomic_store(result, (unint64_t *)&qword_254D691A0);
  }
  return result;
}

ValueMetadata *type metadata accessor for ChartAxisStyleConfigurations()
{
  return &type metadata for ChartAxisStyleConfigurations;
}

uint64_t sub_2141D96A4(uint64_t a1)
{
  void (*v1)(uint64_t *);
  uint64_t v3;

  v3 = *(_QWORD *)MEMORY[0x24BDAC7A8](a1);
  v1(&v3);
  return sub_214424B18();
}

uint64_t sub_2141D972C(uint64_t result)
{
  if (result)
    return swift_release();
  return result;
}

uint64_t sub_2141D973C(uint64_t a1)
{
  return sub_2141D96A4(a1);
}

uint64_t sub_2141D975C(uint64_t result)
{
  if (result)
    return swift_retain();
  return result;
}

unint64_t sub_2141D976C()
{
  unint64_t result;

  result = qword_253F154A0;
  if (!qword_253F154A0)
  {
    result = MEMORY[0x2199CD934](&unk_214426B68, &type metadata for ChartAxisStyleConfigurationsKey);
    atomic_store(result, (unint64_t *)&qword_253F154A0);
  }
  return result;
}

ValueMetadata *type metadata accessor for ChartAxisStyleConfigurationsKey()
{
  return &type metadata for ChartAxisStyleConfigurationsKey;
}

_QWORD *_s6Charts28ChartAxisStyleConfigurationsV7StorageVwxx_0(_QWORD *result)
{
  _QWORD *v1;

  v1 = result;
  if (*result)
    result = (_QWORD *)swift_release();
  if (v1[2])
    return (_QWORD *)swift_release();
  return result;
}

_QWORD *_s6Charts28ChartAxisStyleConfigurationsV7StorageVwcp_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (*a2)
  {
    v4 = a2[1];
    *a1 = *a2;
    a1[1] = v4;
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  v5 = a2[2];
  if (v5)
  {
    v6 = a2[3];
    a1[2] = v5;
    a1[3] = v6;
    swift_retain();
  }
  else
  {
    *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
  }
  return a1;
}

_QWORD *_s6Charts28ChartAxisStyleConfigurationsV7StorageVwca_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *a2;
  if (*a1)
  {
    if (v4)
    {
      v5 = a2[1];
      *a1 = v4;
      a1[1] = v5;
      swift_retain();
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v4)
  {
    v6 = a2[1];
    *a1 = v4;
    a1[1] = v6;
    swift_retain();
    goto LABEL_8;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
LABEL_8:
  v7 = a2[2];
  if (!a1[2])
  {
    if (v7)
    {
      v9 = a2[3];
      a1[2] = v7;
      a1[3] = v9;
      swift_retain();
      return a1;
    }
LABEL_14:
    *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
    return a1;
  }
  if (!v7)
  {
    swift_release();
    goto LABEL_14;
  }
  v8 = a2[3];
  a1[2] = v7;
  a1[3] = v8;
  swift_retain();
  swift_release();
  return a1;
}

_QWORD *_s6Charts28ChartAxisStyleConfigurationsV7StorageVwta_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *a2;
  if (*a1)
  {
    if (v4)
    {
      v5 = a2[1];
      *a1 = v4;
      a1[1] = v5;
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v4)
  {
    v6 = a2[1];
    *a1 = v4;
    a1[1] = v6;
    goto LABEL_8;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
LABEL_8:
  v7 = a2[2];
  if (!a1[2])
  {
    if (v7)
    {
      v9 = a2[3];
      a1[2] = v7;
      a1[3] = v9;
      return a1;
    }
LABEL_14:
    *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
    return a1;
  }
  if (!v7)
  {
    swift_release();
    goto LABEL_14;
  }
  v8 = a2[3];
  a1[2] = v7;
  a1[3] = v8;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for AxisMarkEnvironment(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 32))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AxisMarkEnvironment(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 32) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ChartAxisStyleConfigurations.Storage()
{
  return &type metadata for ChartAxisStyleConfigurations.Storage;
}

unint64_t sub_2141D9AC0()
{
  unint64_t result;

  result = qword_254D691A8;
  if (!qword_254D691A8)
  {
    result = MEMORY[0x2199CD934](&unk_214426B10, &type metadata for ChartAxisStyleConfigurations);
    atomic_store(result, (unint64_t *)&qword_254D691A8);
  }
  return result;
}

uint64_t sub_2141D9B10@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  sub_2141DD178();
  result = sub_214424224();
  *a1 = v3;
  return result;
}

uint64_t sub_2141D9B5C()
{
  sub_2141DD178();
  swift_bridgeObjectRetain();
  return sub_214424230();
}

uint64_t Chart.init(content:)(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t Chart.init<A, B>(_:content:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  _QWORD v16[6];

  swift_getAssociatedTypeWitness();
  v16[1] = a4;
  v16[2] = swift_getAssociatedTypeWitness();
  v16[3] = a5;
  v16[4] = a6;
  v16[5] = swift_getAssociatedConformanceWitness();
  v13 = sub_214424B9C();
  v16[0] = a7;
  MEMORY[0x2199CD934](&protocol conformance descriptor for <> ForEach<A, B, C>, v13, v16);
  sub_2141D9D18(a1, a2, a3, a4);
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 8))(a1, a4);
}

uint64_t sub_2141D9D18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;

  MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v9 + 16))(v8);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_retain();
  return ForEach<>.init(_:content:)((uint64_t)v8, a2, a3, a4);
}

uint64_t Chart.init<A, B, C>(_:id:content:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v14;

  v14 = sub_214424B9C();
  MEMORY[0x2199CD934](&protocol conformance descriptor for <> ForEach<A, B, C>, v14, &a9);
  sub_2141D9F34(a1, a2, a3, a4, a5);
  swift_release();
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 8))(a1, a5);
}

uint64_t sub_2141D9F34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v13;

  MEMORY[0x24BDAC7A8](a1);
  v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v11 + 16))(v10);
  swift_retain();
  swift_retain();
  return ForEach<>.init(_:id:content:)((uint64_t)v10, a2, a3, a4, a5);
}

uint64_t static Chart._makeView(view:inputs:)@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  _DWORD v36[6];
  ValueMetadata *v37;
  unint64_t v38;
  uint64_t v39;

  v33 = a5;
  v34 = a2;
  v39 = *MEMORY[0x24BDAC8D0];
  v8 = type metadata accessor for RenderBasedChartView(255, a3, a4, a4);
  v9 = sub_214423DA4();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v31 - v11;
  v32 = sub_2141D8BF8(&qword_253F139C0);
  v13 = *(_QWORD *)(v32 - 8);
  MEMORY[0x24BDAC7A8](v32);
  v15 = (char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = &type metadata for AttributeGraphBasedDSLFeature;
  v38 = sub_2141DA3A8();
  v16 = sub_214423C78();
  _s6Charts15AnyChartContentVwxx_0((uint64_t)v36);
  if ((v16 & 1) != 0)
  {
    v18 = type metadata accessor for Chart(0, a3, a4, v17);
    MEMORY[0x24BDAC7A8](v18);
    *(&v31 - 4) = a3;
    *(&v31 - 3) = a4;
    *(&v31 - 2) = (uint64_t)a1;
    MEMORY[0x2199CD934](&protocol conformance descriptor for Chart<A>, v18);
    sub_21442483C();
    v20 = type metadata accessor for Chart.AttributeGraphBasedChart(0, a3, a4, v19);
    swift_dynamicCast();
    v21 = v35;
    v22 = sub_2141D8BF8(&qword_254D691B0);
    v36[0] = v21;
    MEMORY[0x24BDAC7A8](v22);
    *(&v31 - 2) = v20;
    *(&v31 - 1) = MEMORY[0x2199CD934](&unk_214426E50, v20);
    v23 = sub_2141D8BF8(&qword_254D691B8);
    sub_2141DB52C((uint64_t)v36, (uint64_t)sub_2141DC4B4, (uint64_t)(&v31 - 4), v20, MEMORY[0x24BEE4078], v23, MEMORY[0x24BEE40A8], v24);
    sub_2143B369C(v35, (uint64_t)v15);
    sub_2141DC540();
    sub_214424848();
    return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v32);
  }
  else
  {
    type metadata accessor for Chart(0, a3, a4, v17);
    v26 = sub_2143B36F4(a1);
    v36[0] = v26;
    MEMORY[0x24BDAC7A8](v26);
    *(&v31 - 4) = v8;
    v28 = type metadata accessor for Chart.RenderBasedChart(0, a3, a4, v27);
    *(&v31 - 3) = v28;
    *(&v31 - 2) = MEMORY[0x2199CD934](&unk_214426E90, v28);
    v29 = sub_214423C9C();
    sub_2141DB52C((uint64_t)v36, (uint64_t)sub_2141DC41C, (uint64_t)(&v31 - 6), v28, MEMORY[0x24BEE4078], v29, MEMORY[0x24BEE40A8], v30);
    sub_2143B369C(v35, (uint64_t)v12);
    MEMORY[0x2199CD934](&unk_214434B88, v8);
    sub_214424848();
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
}

unint64_t sub_2141DA3A8()
{
  unint64_t result;

  result = qword_253F13930[0];
  if (!qword_253F13930[0])
  {
    result = MEMORY[0x2199CD934](&unk_21442FA00, &type metadata for AttributeGraphBasedDSLFeature);
    atomic_store(result, qword_253F13930);
  }
  return result;
}

uint64_t _s6Charts15AnyChartContentVwxx_0(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_2141DA40C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  int *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t);
  uint64_t v29;
  void (*v30)(char *, uint64_t, uint64_t);
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _DWORD *v41;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v52 = a5;
  v53 = a3;
  v49 = a4;
  v46 = a2;
  v56 = a6;
  v7 = sub_214423DA4();
  v54 = *(_QWORD *)(v7 - 8);
  v55 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v51 = (uint64_t)&v43 - v8;
  v9 = type metadata accessor for _ChartContentOutputs(0);
  MEMORY[0x24BDAC7A8](v9);
  v50 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_2144244D0();
  v47 = *(_QWORD *)(v11 - 8);
  v48 = v11;
  MEMORY[0x24BDAC7A8](v11);
  v45 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_214423DB0();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v44 = (char *)&v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v43 - v17;
  v19 = sub_21442423C();
  v20 = *(_QWORD *)(v19 - 8);
  MEMORY[0x24BDAC7A8](v19);
  v22 = (char *)&v43 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = (int *)type metadata accessor for _ChartContentInputs(0);
  v24 = MEMORY[0x24BDAC7A8](v23);
  v26 = (char *)&v43 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v24);
  v43 = (uint64_t)&v43 - v27;
  v28 = *(void (**)(char *, uint64_t, uint64_t))(v20 + 16);
  v28(v22, a1, v19);
  v29 = v14;
  v30 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  v30(v18, v46, v13);
  *(_DWORD *)&v26[v23[7]] = *MEMORY[0x24BE096C0];
  v28(v26, (uint64_t)v22, v19);
  v30(&v26[v23[5]], (uint64_t)v18, v13);
  v30(v44, (uint64_t)v18, v13);
  v31 = v45;
  sub_2144244B8();
  (*(void (**)(char *, uint64_t))(v29 + 8))(v18, v13);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v19);
  (*(void (**)(char *, char *, uint64_t))(v47 + 32))(&v26[v23[6]], v31, v48);
  v32 = v43;
  sub_2141DD2E0((uint64_t)v26, v43);
  sub_2141DD324();
  sub_2144244AC();
  v33 = v49;
  v34 = v52;
  v57 = v49;
  v58 = v52;
  type metadata accessor for Chart(255, v49, v52, v35);
  sub_214423DA4();
  v36 = v51;
  sub_21424E854((void (*)(uint64_t))sub_2141DD368, v33, v51);
  v37 = (uint64_t)v50;
  v38 = v33;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v34 + 48))(v36, v32, v33, v34);
  (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v36, v55);
  LODWORD(v33) = sub_2142B6644();
  v40 = type metadata accessor for Chart.AttributeGraphBasedChart(0, v38, v34, v39);
  v41 = (_DWORD *)v56;
  *(_QWORD *)(v56 + 24) = v40;
  *v41 = v33;
  sub_2141DD370(v37, type metadata accessor for _ChartContentOutputs);
  return sub_2141DD370(v32, type metadata accessor for _ChartContentInputs);
}

uint64_t sub_2141DA7B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[6];

  v9[2] = type metadata accessor for Chart(0, a2, a3, a4);
  v9[3] = a2;
  v6 = sub_214423CB4();
  sub_2141DB52C(a1, (uint64_t)sub_2141DD3AC, (uint64_t)v9, a2, MEMORY[0x24BEE4078], v6, MEMORY[0x24BEE40A8], v7);
  return v9[5];
}

uint64_t static Chart._makeViewList(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  v4 = type metadata accessor for Chart(0, a3, a4, a4);
  MEMORY[0x2199CD934](&protocol conformance descriptor for Chart<A>, v4);
  return sub_2144241A0();
}

uint64_t static Chart._viewListCount(inputs:)()
{
  return 1;
}

uint64_t sub_2141DA8A8(int a1)
{
  if (*MEMORY[0x24BE096C0] == a1)
    return 0;
  AGGraphGetValue();
  return swift_bridgeObjectRetain();
}

uint64_t sub_2141DA904(int a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD v16[2];

  v2 = sub_2141D8BF8(&qword_254D69258);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_2141D8BF8(qword_254D691D0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_2141DA8A8(a1);
  if (v9)
  {
    v10 = sub_2143969FC(v9);
    swift_bridgeObjectRelease();
    v11 = sub_2141DB6CC((uint64_t)v10);
    swift_bridgeObjectRelease();
    v16[0] = v11;
    swift_getKeyPath();
    sub_2141D8BF8(&qword_254D69260);
    sub_2141D9054(&qword_254D69268, &qword_254D69260, MEMORY[0x24BEE12D8]);
    sub_214424B84();
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v4, v8, v5);
    swift_storeEnumTagMultiPayload();
    sub_2141DC5AC();
    sub_2144243EC();
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  else
  {
    sub_2144242CC();
    *(_QWORD *)v4 = sub_21442480C();
    *((_QWORD *)v4 + 1) = v13;
    v4[16] = v14 & 1;
    *((_QWORD *)v4 + 3) = v15;
    swift_storeEnumTagMultiPayload();
    sub_2141DC5AC();
    return sub_2144243EC();
  }
}

uint64_t sub_2141DAB68@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v4;
  char v5;
  uint64_t v6;
  _QWORD v7[36];
  uint64_t v8;
  unint64_t v9;

  memcpy(v7, (const void *)(a1 + 8), sizeof(v7));
  v8 = 0;
  v9 = 0xE000000000000000;
  sub_2144255F8();
  v7[0] = v8;
  v7[1] = v9;
  sub_2141DCE8C();
  result = sub_214424818();
  *(_QWORD *)a2 = result;
  *(_QWORD *)(a2 + 8) = v4;
  *(_BYTE *)(a2 + 16) = v5 & 1;
  *(_QWORD *)(a2 + 24) = v6;
  return result;
}

uint64_t sub_2141DABF8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  v2 = sub_2141D8BF8(&qword_254D691B0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, 1, 1, v2);
}

uint64_t sub_2141DAC38()
{
  int *v0;

  return sub_2141DA904(*v0);
}

uint64_t sub_2141DAC40()
{
  return 0;
}

uint64_t sub_2141DAC48()
{
  return 2;
}

uint64_t sub_2141DAC50()
{
  return 8;
}

uint64_t sub_2141DAC58@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t Value;
  uint64_t KeyPath;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  _BYTE v24[88];
  _BYTE v25[288];
  _QWORD v26[4];
  char v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  char v32;

  v23 = a3;
  v5 = sub_2141D8BF8(&qword_253F139B8);
  v6 = MEMORY[0x24BDAC7A8](v5);
  v8 = (uint64_t *)&v24[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v11 = &v24[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v13 = type metadata accessor for Chart(0, a1, a2, v12);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = &v24[-v15 - 8];
  Value = AGGraphGetValue();
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v14 + 16))(v16, Value, v13);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v9 + 32))(v11, v16, a1);
  sub_21441096C(v8);
  KeyPath = swift_getKeyPath();
  v19 = swift_getKeyPath();
  v20 = swift_getKeyPath();
  v26[0] = swift_getKeyPath();
  memset(&v26[1], 0, 24);
  v27 = 0;
  v28 = swift_getKeyPath();
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v32 = 0;
  sub_2144109B0((uint64_t)v25);
  v21 = swift_getKeyPath();
  sub_2144109E0((uint64_t)v24);
  return sub_214410A10((uint64_t)v11, (uint64_t)v8, KeyPath, 0, 0, v19, 0, 0, v23, v20, 0, (uint64_t)v26, &v28, v25, v21, 0, (uint64_t)v24, (uint64_t)sub_2144116B4, 0,
           a1,
           a2);
}

uint64_t sub_2141DAE9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v4;

  v4 = type metadata accessor for RenderBasedChartView(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a3, 1, 1, v4);
}

uint64_t sub_2141DAEDC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2141DAC58(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
}

uint64_t Chart.actualBody.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t KeyPath;
  uint64_t v23;
  uint64_t v24;
  _BYTE v25[88];
  _BYTE v26[288];
  _QWORD v27[4];
  char v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  char v33;

  v24 = a2;
  v4 = sub_2141D8BF8(&qword_253F139B8);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (uint64_t *)((char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(a1 + 24);
  v14 = type metadata accessor for RenderBasedChartView(0, v8, v12, v13);
  v23 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v20 - v15;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v2, v8);
  sub_21441096C(v7);
  KeyPath = swift_getKeyPath();
  v21 = swift_getKeyPath();
  v17 = swift_getKeyPath();
  v27[0] = swift_getKeyPath();
  memset(&v27[1], 0, 24);
  v28 = 0;
  v29 = swift_getKeyPath();
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  v33 = 0;
  sub_2144109B0((uint64_t)v26);
  v18 = swift_getKeyPath();
  sub_2144109E0((uint64_t)v25);
  sub_214410A10((uint64_t)v11, (uint64_t)v7, KeyPath, 0, 0, v21, 0, 0, (uint64_t)v16, v17, 0, (uint64_t)v27, &v29, v26, v18, 0, (uint64_t)v25, (uint64_t)sub_2144116B4, 0,
    v8,
    v12);
  sub_214410BEC(v14, v24);
  return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v16, v14);
}

void *Chart.body.getter@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t KeyPath;
  uint64_t v23;
  void *v24;
  _BYTE v25[304];
  _QWORD v26[4];
  char v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  char v32;
  _BYTE v33[312];

  v3 = v2;
  v24 = a2;
  v5 = sub_2141D8BF8(&qword_253F139B8);
  v6 = MEMORY[0x24BDAC7A8](v5);
  v8 = (uint64_t *)((char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(a1 + 24);
  v15 = type metadata accessor for RenderBasedChartView(0, v9, v13, v14);
  v23 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v21 - v16;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v3, v9);
  sub_21441096C(v8);
  KeyPath = swift_getKeyPath();
  v21 = swift_getKeyPath();
  v18 = swift_getKeyPath();
  v26[0] = swift_getKeyPath();
  memset(&v26[1], 0, 24);
  v27 = 0;
  v28 = swift_getKeyPath();
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v32 = 0;
  sub_2144109B0((uint64_t)v33);
  v19 = swift_getKeyPath();
  sub_2144109E0((uint64_t)v25);
  sub_214410A10((uint64_t)v12, (uint64_t)v8, KeyPath, 0, 0, v21, 0, 0, (uint64_t)v17, v18, 0, (uint64_t)v26, &v28, v33, v19, 0, (uint64_t)v25, (uint64_t)sub_2144116B4, 0,
    v9,
    v13);
  sub_214410FF4(v15, v25);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v17, v15);
  memcpy(v33, v25, 0x12AuLL);
  return memcpy(v24, v33, 0x12AuLL);
}

uint64_t sub_2141DB398@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return static Chart._makeView(view:inputs:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
}

uint64_t sub_2141DB3A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static Chart._makeViewList(view:inputs:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t sub_2141DB3B0()
{
  return 1;
}

uint64_t sub_2141DB3C0@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  sub_2141DD214();
  result = sub_214424224();
  *a1 = v3;
  return result;
}

uint64_t sub_2141DB40C()
{
  sub_2141DD214();
  swift_bridgeObjectRetain();
  return sub_214424230();
}

double sub_2141DB468@<D0>(uint64_t a1@<X8>)
{
  double result;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;

  sub_2141DD1D0();
  sub_214424224();
  result = *(double *)&v3;
  *(_OWORD *)a1 = v3;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 48) = v6;
  return result;
}

uint64_t sub_2141DB4C4(uint64_t *a1)
{
  sub_2141DD1BC(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6]);
  sub_2141DD1D0();
  return sub_214424230();
}

uint64_t sub_2141DB52C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t (*v15)(uint64_t, char *);
  uint64_t result;
  uint64_t v17;

  v11 = *(_QWORD *)(a5 - 8);
  v12 = MEMORY[0x24BDAC7A8]();
  v14 = (char *)&v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = v15(v12, v14);
  if (v8)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a8, v14, a5);
  return result;
}

double sub_2141DB5B8@<D0>(_OWORD *a1@<X8>)
{
  return sub_2141DB5FC((void (*)(void))sub_2141DD258, a1);
}

uint64_t sub_2141DB5CC(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2141DB66C(a1, a2, a3, a4, sub_2141D975C, (void (*)(uint64_t))sub_2141DD258);
}

double sub_2141DB5E8@<D0>(_OWORD *a1@<X8>)
{
  return sub_2141DB5FC((void (*)(void))sub_2141DD29C, a1);
}

double sub_2141DB5FC@<D0>(void (*a1)(void)@<X3>, _OWORD *a2@<X8>)
{
  double result;
  __int128 v4;

  a1();
  sub_214424224();
  result = *(double *)&v4;
  *a2 = v4;
  return result;
}

uint64_t sub_2141DB650(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2141DB66C(a1, a2, a3, a4, sub_2141DD47C, (void (*)(uint64_t))sub_2141DD29C);
}

uint64_t sub_2141DB66C(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD), void (*a6)(uint64_t))
{
  uint64_t v7;

  v7 = a5(*a1);
  a6(v7);
  return sub_214424230();
}

uint64_t sub_2141DB6CC(uint64_t result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *i;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE __src[288];
  _BYTE __dst[296];

  v1 = *(_QWORD *)(result + 16);
  v2 = (_QWORD *)MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v3 = result;
    v4 = 0;
    v5 = 0;
    v6 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
    v7 = v1 - 1;
    v8 = 32;
    v20 = swift_bridgeObjectRetain();
    for (i = v2; ; i = v2)
    {
      result = (uint64_t)memcpy(__dst, (const void *)(v3 + v8), 0x120uLL);
      if (v4)
      {
        sub_2141DCED0((uint64_t)__dst);
        v2 = i;
        goto LABEL_20;
      }
      v10 = i[3];
      if ((uint64_t)((v10 >> 1) + 0x4000000000000000) < 0)
        goto LABEL_30;
      v11 = v10 & 0xFFFFFFFFFFFFFFFELL;
      if (v11 <= 1)
        v12 = 1;
      else
        v12 = v11;
      sub_2141D8BF8(&qword_254D69270);
      v2 = (_QWORD *)swift_allocObject();
      v13 = (uint64_t)(j__malloc_size(v2) - 32) / 296;
      v2[2] = v12;
      v2[3] = 2 * v13;
      v14 = i[3] >> 1;
      v6 = &v2[37 * v14 + 4];
      v4 = (v13 & 0x7FFFFFFFFFFFFFFFLL) - v14;
      if (!i[2])
      {
        sub_2141DCED0((uint64_t)__dst);
        swift_release();
        goto LABEL_20;
      }
      if (v2 < i || v2 + 4 >= &i[37 * v14 + 4])
      {
        sub_2141DCED0((uint64_t)__dst);
      }
      else
      {
        sub_2141DCED0((uint64_t)__dst);
        if (v2 == i)
          goto LABEL_19;
      }
      memmove(v2 + 4, i + 4, 296 * v14);
LABEL_19:
      i[2] = 0;
      swift_release();
      v3 = v20;
LABEL_20:
      result = (uint64_t)memcpy(__src, __dst, sizeof(__src));
      v16 = __OFSUB__(v4--, 1);
      if (v16)
      {
        __break(1u);
LABEL_30:
        __break(1u);
LABEL_31:
        __break(1u);
        return result;
      }
      *v6 = v5;
      memcpy(v6 + 1, __src, 0x120uLL);
      if (v7 == v5)
      {
        result = swift_bridgeObjectRelease();
        goto LABEL_25;
      }
      v6 += 37;
      v8 += 288;
      ++v5;
    }
  }
  v4 = 0;
LABEL_25:
  v17 = v2[3];
  if (v17 >= 2)
  {
    v18 = v17 >> 1;
    v16 = __OFSUB__(v18, v4);
    v19 = v18 - v4;
    if (v16)
      goto LABEL_31;
    v2[2] = v19;
  }
  return (uint64_t)v2;
}

uint64_t sub_2141DB8E4(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  char *v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  BOOL v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v2 = a1 + 32;
  result = swift_bridgeObjectRetain();
  v4 = 0;
  v5 = 0;
  v6 = (char *)MEMORY[0x24BEE4AF8];
  v7 = (char *)(MEMORY[0x24BEE4AF8] + 32);
LABEL_3:
  v9 = *(_QWORD *)(a1 + 16);
  if (v5 != v9)
  {
    if (v5 >= v9)
    {
LABEL_34:
      __break(1u);
    }
    else
    {
      while (1)
      {
        v10 = *(_QWORD *)(v2 + 8 * v5);
        swift_bridgeObjectRetain();
        result = swift_bridgeObjectRelease();
        if (v10)
        {
          v8 = *(_QWORD *)(v10 + 16);
          if (v8)
            break;
        }
        ++v5;
        v11 = *(_QWORD *)(a1 + 16);
        if (v5 == v11)
          goto LABEL_30;
        if (v5 >= v11)
          goto LABEL_34;
      }
      v12 = 0;
      ++v5;
      while (v12 < v8)
      {
        v13 = v10 + 16 * v12;
        v14 = *(_QWORD *)(v13 + 40);
        v30 = *(_QWORD *)(v13 + 32);
        if (v4)
        {
          result = swift_bridgeObjectRetain();
          v15 = v6;
          v16 = __OFSUB__(v4--, 1);
          if (v16)
            goto LABEL_36;
        }
        else
        {
          v17 = *((_QWORD *)v6 + 3);
          if ((uint64_t)((v17 >> 1) + 0x4000000000000000) < 0)
            goto LABEL_37;
          v18 = v17 & 0xFFFFFFFFFFFFFFFELL;
          if (v18 <= 1)
            v19 = 1;
          else
            v19 = v18;
          sub_2141D8BF8(&qword_253F126B0);
          v15 = (char *)swift_allocObject();
          v20 = j__malloc_size(v15);
          v21 = v20 - 32;
          if (v20 < 32)
            v21 = v20 - 17;
          v22 = v21 >> 4;
          *((_QWORD *)v15 + 2) = v19;
          *((_QWORD *)v15 + 3) = 2 * (v21 >> 4);
          v23 = v15 + 32;
          v24 = *((_QWORD *)v6 + 3) >> 1;
          v7 = &v15[16 * v24 + 32];
          v25 = (v22 & 0x7FFFFFFFFFFFFFFFLL) - v24;
          if (*((_QWORD *)v6 + 2))
          {
            v26 = v6 + 32;
            if (v15 != v6 || v23 >= &v26[16 * v24])
              memmove(v23, v26, 16 * v24);
            swift_bridgeObjectRetain();
            *((_QWORD *)v6 + 2) = 0;
          }
          else
          {
            swift_bridgeObjectRetain();
          }
          result = swift_release();
          v16 = __OFSUB__(v25, 1);
          v4 = v25 - 1;
          if (v16)
            goto LABEL_36;
        }
        ++v12;
        *(_QWORD *)v7 = v30;
        *((_QWORD *)v7 + 1) = v14;
        v7 += 16;
        v6 = v15;
        v8 = *(_QWORD *)(v10 + 16);
        if (v12 == v8)
          goto LABEL_3;
      }
    }
    __break(1u);
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
LABEL_30:
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  v27 = *((_QWORD *)v6 + 3);
  if (v27 < 2)
    return (uint64_t)v6;
  v28 = v27 >> 1;
  v16 = __OFSUB__(v28, v4);
  v29 = v28 - v4;
  if (!v16)
  {
    *((_QWORD *)v6 + 2) = v29;
    return (uint64_t)v6;
  }
LABEL_38:
  __break(1u);
  return result;
}

uint64_t sub_2141DBAF8(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  _QWORD *v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  const void *v23;
  uint64_t v24;
  BOOL v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;

  v2 = a1 + 32;
  result = swift_bridgeObjectRetain();
  v4 = 0;
  v5 = 0;
  v6 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v7 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
LABEL_3:
  v9 = *(_QWORD *)(a1 + 16);
  if (v5 != v9)
  {
    if (v5 >= v9)
    {
LABEL_31:
      __break(1u);
    }
    else
    {
      while (1)
      {
        v10 = *(_QWORD *)(v2 + 8 * v5);
        swift_bridgeObjectRetain();
        result = swift_bridgeObjectRelease();
        if (v10)
        {
          v8 = *(_QWORD *)(v10 + 16);
          if (v8)
            break;
        }
        ++v5;
        v11 = *(_QWORD *)(a1 + 16);
        if (v5 == v11)
          goto LABEL_27;
        if (v5 >= v11)
          goto LABEL_31;
      }
      v12 = 0;
      ++v5;
      while (v12 < v8)
      {
        v13 = *(_QWORD *)(v10 + 8 * v12 + 32);
        if (!v4)
        {
          v14 = v6[3];
          if ((uint64_t)((v14 >> 1) + 0x4000000000000000) < 0)
            goto LABEL_34;
          v15 = v14 & 0xFFFFFFFFFFFFFFFELL;
          if (v15 <= 1)
            v16 = 1;
          else
            v16 = v15;
          sub_2141D8BF8(&qword_253F15D48);
          v17 = (_QWORD *)swift_allocObject();
          v18 = j__malloc_size(v17);
          v19 = v18 - 32;
          if (v18 < 32)
            v19 = v18 - 25;
          v20 = v19 >> 3;
          v17[2] = v16;
          v17[3] = 2 * (v19 >> 3);
          v21 = (unint64_t)(v17 + 4);
          v22 = v6[3] >> 1;
          if (v6[2])
          {
            v23 = v6 + 4;
            if (v17 != v6 || v21 >= (unint64_t)v23 + 8 * v22)
            {
              v24 = v19 >> 3;
              memmove(v17 + 4, v23, 8 * v22);
              v20 = v24;
            }
            v6[2] = 0;
          }
          v7 = (_QWORD *)(v21 + 8 * v22);
          v4 = (v20 & 0x7FFFFFFFFFFFFFFFLL) - v22;
          result = swift_release();
          v6 = v17;
        }
        v25 = __OFSUB__(v4--, 1);
        if (v25)
          goto LABEL_33;
        ++v12;
        *v7++ = v13;
        v8 = *(_QWORD *)(v10 + 16);
        if (v12 == v8)
          goto LABEL_3;
      }
    }
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
LABEL_27:
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  v26 = v6[3];
  if (v26 < 2)
    return (uint64_t)v6;
  v27 = v26 >> 1;
  v25 = __OFSUB__(v27, v4);
  v28 = v27 - v4;
  if (!v25)
  {
    v6[2] = v28;
    return (uint64_t)v6;
  }
LABEL_35:
  __break(1u);
  return result;
}

uint64_t sub_2141DBCE8(uint64_t result, int64_t a2, int64_t a3)
{
  int64_t v3;
  int64_t v4;
  float64x2_t *v5;
  unint64_t v6;
  uint64_t v7;
  float64_t *v8;
  uint64_t v9;
  uint64_t v10;
  float64_t *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  int64_t v16;
  unint64_t v17;
  uint64_t v18;
  int64x2_t v19;
  float64x2_t *v20;
  double *v21;
  int64x2_t v22;
  unint64_t v23;
  double *v24;
  float64x2_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  float64_t v30;
  int64_t v31;
  unint64_t v32;
  char *v33;
  int64_t v34;
  unint64_t v35;
  int64_t v36;
  int64_t v37;
  uint64_t v38;
  float64_t *v39;
  int64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  BOOL v46;
  int64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  int64_t v51;
  char *v52;
  int64_t v53;
  float64x2x2_t v54;

  v3 = a3 - a2;
  if (__OFSUB__(a3, a2))
  {
LABEL_68:
    __break(1u);
    goto LABEL_69;
  }
  v4 = a3;
  v5 = (float64x2_t *)result;
  v6 = *(_QWORD *)(result + 16);
  if (v3 >= (uint64_t)v6)
    v7 = *(_QWORD *)(result + 16);
  else
    v7 = a3 - a2;
  v53 = a2;
  if (v7 <= 0)
  {
    if (v7 < 0)
    {
LABEL_69:
      __break(1u);
LABEL_70:
      __break(1u);
      goto LABEL_71;
    }
    v8 = (float64_t *)MEMORY[0x24BEE4AF8];
    v12 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 24) >> 1;
    if (!v6)
      goto LABEL_60;
    v11 = (float64_t *)(MEMORY[0x24BEE4AF8] + 32);
    v16 = a2;
  }
  else
  {
    sub_2141D8BF8(&qword_253F135B0);
    v8 = (float64_t *)swift_allocObject();
    result = j__malloc_size(v8);
    a2 = v53;
    v9 = result - 32;
    if (result < 32)
      v9 = result - 17;
    v10 = v9 >> 4;
    *((_QWORD *)v8 + 2) = v7;
    *((_QWORD *)v8 + 3) = 2 * v10;
    if (v4 < v53)
      goto LABEL_70;
    if (!v6)
    {
LABEL_71:
      __break(1u);
      goto LABEL_72;
    }
    if (v7 - 1 >= v6)
    {
LABEL_72:
      __break(1u);
      goto LABEL_73;
    }
    v11 = v8 + 4;
    v12 = (v10 & 0x7FFFFFFFFFFFFFFFLL) - v7;
    if (v7 - 1 >= (unint64_t)v3)
      v13 = v3;
    else
      v13 = v7 - 1;
    if (v13 >= v6)
      v13 = v6;
    if (v13 > 3)
    {
      v17 = v13 + 1;
      v18 = v17 & 3;
      if ((v17 & 3) == 0)
        v18 = 4;
      v14 = v17 - v18;
      v11 += 2 * v14;
      v15 = v14 + v53;
      v19 = vaddq_s64(vdupq_n_s64(v53), (int64x2_t)xmmword_214426BB0);
      v20 = v5 + 3;
      v21 = v8 + 8;
      v22 = vdupq_n_s64(2uLL);
      v23 = v14;
      do
      {
        v24 = v21 - 4;
        v54.val[1] = (float64x2_t)vaddq_s64(v19, v22);
        v25 = v20[-1];
        v54.val[0] = *v20;
        vst2q_f64(v24, *(float64x2x2_t *)(&v19 - 1));
        vst2q_f64(v21, v54);
        v19 = vaddq_s64(v19, vdupq_n_s64(4uLL));
        v20 += 2;
        v21 += 8;
        v23 -= 4;
      }
      while (v23);
    }
    else
    {
      v14 = 0;
      v15 = v53;
    }
    v26 = 0;
    v27 = v7 - v14;
    v28 = (uint64_t)&v5[2].f64[v14];
    v29 = v6 - v14;
    do
    {
      if (v29 == v26)
      {
        __break(1u);
LABEL_65:
        __break(1u);
        goto LABEL_66;
      }
      if (!(v15 - v4 + v26))
        goto LABEL_65;
      *v11 = *(float64_t *)(v28 + 8 * v26);
      *((_QWORD *)v11 + 1) = v15 + v26;
      v11 += 2;
      ++v26;
    }
    while (v27 != v26);
    if ((uint64_t)v6 <= v3)
      goto LABEL_60;
    v16 = v15 + v26;
  }
  if (v7 >= v6)
  {
LABEL_73:
    __break(1u);
    goto LABEL_74;
  }
  if (v16 == v4)
    goto LABEL_60;
  if (v4 >= a2)
  {
    v30 = v5[2].f64[v7];
    result = swift_bridgeObjectRetain();
    v31 = v53;
    if (v16 >= v53 && v16 < v4)
    {
      v32 = v6 - 1;
      v33 = (char *)&v5[2].f64[1];
      v34 = v4 - 1;
      v51 = v4 - 1;
      v52 = (char *)&v5[2].f64[1];
      while (1)
      {
        if (!v12)
        {
          v35 = *((_QWORD *)v8 + 3);
          if ((uint64_t)((v35 >> 1) + 0x4000000000000000) < 0)
            goto LABEL_67;
          v36 = v4;
          v37 = v35 & 0xFFFFFFFFFFFFFFFELL;
          if (v37 <= 1)
            v38 = 1;
          else
            v38 = v37;
          sub_2141D8BF8(&qword_253F135B0);
          v39 = (float64_t *)swift_allocObject();
          v40 = j__malloc_size(v39);
          v41 = v40 - 32;
          if (v40 < 32)
            v41 = v40 - 17;
          v42 = v41 >> 4;
          *((_QWORD *)v39 + 2) = v38;
          *((_QWORD *)v39 + 3) = 2 * (v41 >> 4);
          v43 = (unint64_t)(v39 + 4);
          v44 = *((_QWORD *)v8 + 3) >> 1;
          if (*((_QWORD *)v8 + 2))
          {
            if (v39 != v8 || v43 >= (unint64_t)&v8[2 * v44 + 4])
              memmove(v39 + 4, v8 + 4, 16 * v44);
            v8[2] = 0.0;
          }
          v11 = (float64_t *)(v43 + 16 * v44);
          v12 = (v42 & 0x7FFFFFFFFFFFFFFFLL) - v44;
          result = swift_release();
          v8 = v39;
          v4 = v36;
          v33 = v52;
          v31 = v53;
          v34 = v51;
        }
        v46 = __OFSUB__(v12--, 1);
        if (v46)
          break;
        *v11 = v30;
        *((_QWORD *)v11 + 1) = v16;
        if (v32 == v7 || v34 == v16)
          goto LABEL_59;
        v47 = v16 + 1;
        if (v16 + 1 >= v31)
        {
          v30 = *(double *)&v33[8 * v7];
          v11 += 2;
          ++v7;
          ++v16;
          if (v47 < v4)
            continue;
        }
        goto LABEL_58;
      }
LABEL_66:
      __break(1u);
LABEL_67:
      __break(1u);
      goto LABEL_68;
    }
LABEL_58:
    __break(1u);
LABEL_59:
    result = swift_bridgeObjectRelease();
LABEL_60:
    v48 = *((_QWORD *)v8 + 3);
    if (v48 >= 2)
    {
      v49 = v48 >> 1;
      v46 = __OFSUB__(v49, v12);
      v50 = v49 - v12;
      if (v46)
      {
LABEL_74:
        __break(1u);
        goto LABEL_75;
      }
      *((_QWORD *)v8 + 2) = v50;
    }
    return (uint64_t)v8;
  }
LABEL_75:
  __break(1u);
  return result;
}

int64_t sub_2141DC070(int64_t result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  int64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int64x2_t v17;
  int64x2_t v18;
  float64x2_t *v19;
  double *v20;
  float64x2_t *v21;
  int64x2_t v22;
  unint64_t v23;
  double *v24;
  float64x2_t v25;
  float64x2_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  float64x2x2_t v39;

  v2 = *(_QWORD *)(result + 16);
  v3 = *(_QWORD *)(a2 + 16);
  if (v3 >= v2)
    v4 = *(_QWORD *)(result + 16);
  else
    v4 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    v6 = result;
    sub_2141D8BF8(&qword_253F105E8);
    v7 = (_QWORD *)swift_allocObject();
    result = j__malloc_size(v7);
    v8 = result - 32;
    if (result < 32)
      v8 = result - 17;
    v9 = v8 >> 4;
    v7[2] = v4;
    v7[3] = 2 * (v8 >> 4);
    v10 = v7 + 4;
    v11 = v9 & 0x7FFFFFFFFFFFFFFFLL;
    v12 = v4 - 1;
    if (v4 - 1 >= v3)
      v12 = v3;
    if (v12 >= v2)
      v12 = v2;
    if (v12 >= 4)
    {
      v15 = v12 + 1;
      v16 = v15 & 3;
      if ((v15 & 3) == 0)
        v16 = 4;
      v13 = v15 - v16;
      v10 += 2 * v13;
      v17 = (int64x2_t)(unint64_t)v11;
      v18 = 0uLL;
      v19 = (float64x2_t *)(v6 + 48);
      v20 = (double *)(v7 + 8);
      v21 = (float64x2_t *)(a2 + 48);
      v22.i64[0] = -1;
      v22.i64[1] = -1;
      v23 = v13;
      do
      {
        v24 = v20 - 4;
        v39.val[0] = v19[-1];
        v39.val[1] = v21[-1];
        vst2q_f64(v24, v39);
        v25 = *v19;
        v19 += 2;
        v39.val[0] = v25;
        v26 = *v21;
        v21 += 2;
        v39.val[1] = v26;
        vst2q_f64(v20, v39);
        v17 = vaddq_s64(v17, v22);
        v18 = vaddq_s64(v18, v22);
        v20 += 8;
        v23 -= 4;
      }
      while (v23);
      v11 = vaddvq_s64(vaddq_s64(v18, v17));
    }
    else
    {
      v13 = 0;
    }
    v27 = 0;
    v28 = v4 - v13;
    v29 = 8 * v13 + 32;
    v30 = a2 + v29;
    v31 = v6 + v29;
    v32 = v3 - v13;
    v33 = v2 - v13;
    do
    {
      if (v33 == v27)
      {
        __break(1u);
LABEL_31:
        __break(1u);
        goto LABEL_32;
      }
      if (v32 == v27)
        goto LABEL_31;
      v34 = *(_QWORD *)(v30 + 8 * v27);
      *v10 = *(_QWORD *)(v31 + 8 * v27);
      v10[1] = v34;
      v10 += 2;
      ++v27;
    }
    while (v28 != v27);
    v14 = v11 - v27;
    if (v2 <= v3)
      goto LABEL_26;
  }
  else
  {
    v7 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v14 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 24) >> 1;
    if (!v2)
      goto LABEL_26;
  }
  if (v2 <= v3)
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
LABEL_26:
  v35 = v7[3];
  if (v35 < 2)
    return (int64_t)v7;
  v36 = v35 >> 1;
  v37 = __OFSUB__(v36, v14);
  v38 = v36 - v14;
  if (!v37)
  {
    v7[2] = v38;
    return (int64_t)v7;
  }
LABEL_33:
  __break(1u);
  return result;
}

uint64_t sub_2141DC238@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result;

  sub_2141DAC40();
  result = sub_214423C90();
  *a1 = result;
  return result;
}

uint64_t sub_2141DC2BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  _BYTE v19[16];
  _BYTE v20[16];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v9 = *(_QWORD *)(a5 - 8);
  v10 = MEMORY[0x24BDAC7A8](a1);
  v12 = &v19[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v16 = &v19[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(_BYTE *))(v9 + 16))(v12);
  sub_214423CC0();
  (*(void (**)(_BYTE *, uint64_t))(v9 + 8))(v12, a5);
  v21 = a5;
  v22 = a6;
  sub_2141DB52C((uint64_t)v16, (uint64_t)sub_2141DD430, (uint64_t)v20, a4, MEMORY[0x24BEE4078], MEMORY[0x24BEE4AE0] + 8, MEMORY[0x24BEE40A8], v17);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v14 + 8))(v16, a4);
}

uint64_t type metadata accessor for Chart(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2141D8E88(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Chart);
}

uint64_t type metadata accessor for Chart.RenderBasedChart(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2141D8E88(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Chart.RenderBasedChart);
}

uint64_t sub_2141DC41C@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result;

  sub_2141DAC40();
  result = sub_214423C90();
  *a1 = result;
  return result;
}

uint64_t sub_2141DC49C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;

  return sub_2141DA40C(a1, a2, v3[4], v3[2], v3[3], a3);
}

uint64_t type metadata accessor for Chart.AttributeGraphBasedChart(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2141D8E88(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Chart.AttributeGraphBasedChart);
}

uint64_t sub_2141DC4B4@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result;

  sub_2141D8BF8(&qword_254D691B0);
  sub_2141DAC40();
  result = sub_214423C90();
  *a1 = result;
  return result;
}

unint64_t sub_2141DC540()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_254D691C0;
  if (!qword_254D691C0)
  {
    v1 = sub_2141D7924(&qword_254D691B0);
    v2[0] = sub_2141DC5AC();
    v2[1] = MEMORY[0x24BDF1F80];
    result = MEMORY[0x2199CD934](MEMORY[0x24BDEF3E0], v1, v2);
    atomic_store(result, (unint64_t *)&qword_254D691C0);
  }
  return result;
}

unint64_t sub_2141DC5AC()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_254D691C8;
  if (!qword_254D691C8)
  {
    v1 = sub_2141D7924(qword_254D691D0);
    v2 = MEMORY[0x24BDF1F80];
    result = MEMORY[0x2199CD934](MEMORY[0x24BDF4A08], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_254D691C8);
  }
  return result;
}

double sub_2141DC608@<D0>(_OWORD *a1@<X8>)
{
  return sub_2141DB5FC((void (*)(void))sub_2141DD29C, a1);
}

uint64_t sub_2141DC61C(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2141DB66C(a1, a2, a3, a4, sub_2141DD47C, (void (*)(uint64_t))sub_2141DD29C);
}

double sub_2141DC648@<D0>(_OWORD *a1@<X8>)
{
  return sub_2141DB5FC((void (*)(void))sub_2141DD258, a1);
}

uint64_t sub_2141DC65C(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2141DB66C(a1, a2, a3, a4, sub_2141D975C, (void (*)(uint64_t))sub_2141DD258);
}

uint64_t sub_2141DC688@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  sub_2141DD214();
  result = sub_214424224();
  *a1 = v3;
  return result;
}

uint64_t sub_2141DC6E8@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  sub_2141DD178();
  result = sub_214424224();
  *a1 = v3;
  return result;
}

uint64_t sub_2141DC738()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_2141DC76C()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_2141DC774()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_2141DC7E0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  if (v5 <= 7 && *(_QWORD *)(v4 + 64) <= 0x18uLL && (*(_DWORD *)(v4 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *))(v4 + 16))(a1);
  }
  else
  {
    v8 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v8 + ((v5 + 16) & ~v5));
    swift_retain();
  }
  return v3;
}

uint64_t sub_2141DC850(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))();
}

uint64_t sub_2141DC860(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 16))();
  return a1;
}

uint64_t sub_2141DC890(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 24))();
  return a1;
}

uint64_t sub_2141DC8C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 32))();
  return a1;
}

uint64_t sub_2141DC8F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 40))();
  return a1;
}

uint64_t sub_2141DC920(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_2141DC9D0 + 4 * byte_214426BC0[(v7 - 1)]))();
}

void sub_2141DCA20(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

unint64_t sub_2141DCBD4()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_253F13A38;
  if (!qword_253F13A38)
  {
    v1 = sub_2141D7924(&qword_253F13A40);
    v2[0] = sub_2141DCC58();
    v2[1] = sub_2141D9054(&qword_253F15BB8, &qword_253F15BC0, MEMORY[0x24BDEFAD8]);
    result = MEMORY[0x2199CD934](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&qword_253F13A38);
  }
  return result;
}

unint64_t sub_2141DCC58()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_253F13A08;
  if (!qword_253F13A08)
  {
    v1 = sub_2141D7924(&qword_253F13A10);
    v2[0] = sub_2141DCCDC();
    v2[1] = sub_2141D9054(&qword_253F15C00, &qword_253F15C08, MEMORY[0x24BDF1110]);
    result = MEMORY[0x2199CD934](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&qword_253F13A08);
  }
  return result;
}

unint64_t sub_2141DCCDC()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_253F139D8;
  if (!qword_253F139D8)
  {
    v1 = sub_2141D7924(&qword_253F139E0);
    v2[0] = sub_2141D9054(&qword_253F139C8, &qword_253F139D0, MEMORY[0x24BDEB9A8]);
    v2[1] = sub_2141D9054(&qword_253F13A68, &qword_253F13A70, MEMORY[0x24BDF5428]);
    result = MEMORY[0x2199CD934](MEMORY[0x24BDEC550], v1, v2);
    atomic_store(result, (unint64_t *)&qword_253F139D8);
  }
  return result;
}

unint64_t sub_2141DCD7C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_253F13A58;
  if (!qword_253F13A58)
  {
    v1 = sub_2141D7924(&qword_253F13A60);
    v2[0] = sub_2141DCDE8();
    v2[1] = sub_2141DCBD4();
    result = MEMORY[0x2199CD934](MEMORY[0x24BDEF3E0], v1, v2);
    atomic_store(result, (unint64_t *)&qword_253F13A58);
  }
  return result;
}

unint64_t sub_2141DCDE8()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_253F13A28;
  if (!qword_253F13A28)
  {
    v1 = sub_2141D7924(&qword_253F13A30);
    v2[0] = sub_2141D9054(&qword_253F139E8, &qword_253F139F0, MEMORY[0x24BDEC6F8]);
    v2[1] = MEMORY[0x24BDEDBB8];
    result = MEMORY[0x2199CD934](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&qword_253F13A28);
  }
  return result;
}

void sub_2141DCE6C()
{
  JUMPOUT(0x2199CD934);
}

void sub_2141DCE7C()
{
  JUMPOUT(0x2199CD934);
}

unint64_t sub_2141DCE8C()
{
  unint64_t result;

  result = qword_253F15CA8;
  if (!qword_253F15CA8)
  {
    result = MEMORY[0x2199CD934](MEMORY[0x24BEE0D50], MEMORY[0x24BEE0D00]);
    atomic_store(result, (unint64_t *)&qword_253F15CA8);
  }
  return result;
}

uint64_t sub_2141DCED0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;

  v2 = *(_QWORD *)(a1 + 152);
  v16 = *(_QWORD *)(a1 + 144);
  v3 = *(_QWORD *)(a1 + 160);
  v4 = *(_QWORD *)(a1 + 168);
  v5 = *(_QWORD *)(a1 + 176);
  v6 = *(_QWORD *)(a1 + 184);
  v7 = *(_QWORD *)(a1 + 192);
  v8 = *(_QWORD *)(a1 + 200);
  v15 = *(_OWORD *)(a1 + 208);
  v13 = *(_OWORD *)(a1 + 240);
  v14 = *(_OWORD *)(a1 + 224);
  v12 = *(_OWORD *)(a1 + 256);
  v10 = *(_QWORD *)(a1 + 272);
  v9 = *(_QWORD *)(a1 + 280);
  sub_2141DCFC0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_OWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136));
  sub_2141DCFC0(v16, v2, v3, v4, v5, v6, v7, v8, v15, *((uint64_t *)&v15 + 1), v14, *((uint64_t *)&v14 + 1), v13, *((uint64_t *)&v13 + 1), v12, SBYTE8(v12), v10, v9);
  return a1;
}

uint64_t sub_2141DCFC0(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, unint64_t a18)
{
  uint64_t v21;
  uint64_t v22;
  char v23;

  switch(a18 >> 61)
  {
    case 0uLL:
    case 2uLL:
      sub_2141DD130(result, a2, a3 & 1);
      swift_bridgeObjectRetain();
      v21 = a5;
      v22 = a6;
      v23 = a7;
      goto LABEL_4;
    case 3uLL:
      sub_2141DD130(result, a2, a3 & 1);
      swift_bridgeObjectRetain();
      sub_2141DD140(a5, a6, a7);
      sub_2141DD130(a10, a11, a12 & 1);
      swift_bridgeObjectRetain();
      v21 = a14;
      v22 = a15;
      v23 = a16;
LABEL_4:
      result = sub_2141DD140(v21, v22, v23);
      break;
    case 5uLL:
      sub_2141DD130(result, a2, a3 & 1);
      swift_bridgeObjectRetain();
      sub_2141DD140(a5, a6, a7);
      sub_2141DD164(a11, a12, a13);
      result = sub_2141DD164(a14, a15, a16);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_2141DD130(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_retain();
  else
    return swift_bridgeObjectRetain();
}

uint64_t sub_2141DD140(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 0x80) == 0)
    return sub_2141DD14C(a1, a2, a3);
  return a1;
}

uint64_t sub_2141DD14C(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if (a3 == 2)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t sub_2141DD164(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 <= 0xFBu)
    return sub_2141DD140(a1, a2, a3);
  return a1;
}

unint64_t sub_2141DD178()
{
  unint64_t result;

  result = qword_253F15360;
  if (!qword_253F15360)
  {
    result = MEMORY[0x2199CD934](&unk_21442DB60, &type metadata for ChartEncodingConfigurationsKey);
    atomic_store(result, (unint64_t *)&qword_253F15360);
  }
  return result;
}

uint64_t sub_2141DD1BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result;

  if (a7 != 1)
    return swift_retain();
  return result;
}

unint64_t sub_2141DD1D0()
{
  unint64_t result;

  result = qword_253F15358;
  if (!qword_253F15358)
  {
    result = MEMORY[0x2199CD934](&unk_214428A60, &type metadata for ChartLegendConfigurationsKey);
    atomic_store(result, (unint64_t *)&qword_253F15358);
  }
  return result;
}

unint64_t sub_2141DD214()
{
  unint64_t result;

  result = qword_253F152B0;
  if (!qword_253F152B0)
  {
    result = MEMORY[0x2199CD934](&unk_21442717C, &type metadata for ChartAxisConfigurationsKey);
    atomic_store(result, (unint64_t *)&qword_253F152B0);
  }
  return result;
}

unint64_t sub_2141DD258()
{
  unint64_t result;

  result = qword_253F130E8;
  if (!qword_253F130E8)
  {
    result = MEMORY[0x2199CD934](&unk_21442F2E8, &type metadata for ChartGestureConfigurationKey);
    atomic_store(result, (unint64_t *)&qword_253F130E8);
  }
  return result;
}

unint64_t sub_2141DD29C()
{
  unint64_t result;

  result = qword_253F15368;
  if (!qword_253F15368)
  {
    result = MEMORY[0x2199CD934](&unk_21442F990, &type metadata for ChartPlotStyleConfigurationKey);
    atomic_store(result, (unint64_t *)&qword_253F15368);
  }
  return result;
}

uint64_t sub_2141DD2E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for _ChartContentInputs(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_2141DD324()
{
  unint64_t result;

  result = qword_254D69278;
  if (!qword_254D69278)
  {
    result = MEMORY[0x2199CD934](&unk_21442FDA8, &type metadata for PointMarkChartContentKey);
    atomic_store(result, (unint64_t *)&qword_254D69278);
  }
  return result;
}

uint64_t sub_2141DD368(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return sub_2141DA7B4(a1, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
}

uint64_t sub_2141DD370(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_2141DD3AC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_2144223F8(a1, a2);
}

uint64_t (*sub_2141DD3C8())(uint64_t a1, uint64_t a2)
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = v1;
  v3 = *(_OWORD *)(v0 + 24);
  *(_OWORD *)(v2 + 24) = v3;
  *(_QWORD *)(v2 + 40) = v3;
  return sub_2141DD424;
}

uint64_t sub_2141DD414()
{
  return swift_deallocObject();
}

uint64_t sub_2141DD424(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return sub_2141DC2BC(a1, a2, v2[5], v2[2], v2[3], v2[4]);
}

uint64_t sub_2141DD430()
{
  swift_getAssociatedTypeWitness();
  return AGGraphSetOutputValue();
}

uint64_t sub_2141DD480()
{
  uint64_t v1;

  sub_2141DD214();
  sub_214424224();
  return v1;
}

uint64_t sub_2141DD4B8(uint64_t *a1, char a2, char a3, uint64_t a4)
{
  uint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v17;
  uint64_t v18;

  v8 = *a1;
  if (!*(_QWORD *)(*a1 + 16) || (v9 = sub_214336B74(a2), (v10 & 1) == 0))
  {
    v13 = 0;
    v18 = MEMORY[0x24BEE4AF8];
    v12 = 3;
    if (!a4)
      goto LABEL_7;
    goto LABEL_6;
  }
  v11 = *(_QWORD *)(v8 + 56) + 24 * v9;
  v12 = *(_BYTE *)v11;
  v13 = *(_QWORD *)(v11 + 8);
  v18 = *(_QWORD *)(v11 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (a4)
  {
LABEL_6:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v13 = a4;
  }
LABEL_7:
  if (a3 == 3)
    a3 = v12;
  v14 = swift_bridgeObjectRetain();
  sub_2143EA884(v14);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v17 = *a1;
  *a1 = 0x8000000000000000;
  sub_2142A2DFC(a3, v13, v18, a2, isUniquelyReferenced_nonNull_native);
  *a1 = v17;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_2141DD5F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char *v2;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t KeyPath;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;

  v5 = *v2;
  v6 = v2[8];
  v8 = *((_QWORD *)v2 + 2);
  v7 = *((_QWORD *)v2 + 3);
  KeyPath = swift_getKeyPath();
  v10 = swift_allocObject();
  *(_BYTE *)(v10 + 16) = v5;
  *(_BYTE *)(v10 + 24) = v6;
  *(_QWORD *)(v10 + 32) = v8;
  *(_QWORD *)(v10 + 40) = v7;
  v11 = sub_2141D8BF8(&qword_253F15BE0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a2, a1, v11);
  v12 = (uint64_t *)(a2 + *(int *)(sub_2141D8BF8(&qword_253F15B60) + 36));
  *v12 = KeyPath;
  v12[1] = (uint64_t)sub_2141DFE38;
  v12[2] = v10;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

BOOL sub_2141DD6C4(uint64_t a1, uint64_t a2)
{
  return sub_2141E083C(*(_BYTE *)a1, *(_BYTE *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)a2, *(_BYTE *)(a2 + 8), *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
}

uint64_t View.chartXAxis(_:)(char a1, uint64_t a2, uint64_t a3)
{
  return sub_2141DD6F0(a1, a2, a3, 0);
}

uint64_t View.chartYAxis(_:)(char a1, uint64_t a2, uint64_t a3)
{
  return sub_2141DD6F0(a1, a2, a3, 1);
}

uint64_t sub_2141DD6F0(char a1, uint64_t a2, uint64_t a3, char a4)
{
  _BYTE v5[16];
  uint64_t v6;
  uint64_t v7;

  v5[0] = a4;
  v5[8] = a1;
  v6 = 0;
  v7 = MEMORY[0x24BEE4AF8];
  return MEMORY[0x2199CC254](v5, a2, &type metadata for ChartAxisModifier, a3);
}

uint64_t View.chartXAxis<A>(content:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_2141DD744(a1, a2, a3, a4, a5, a6, 0);
}

uint64_t View.chartYAxis<A>(content:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_2141DD744(a1, a2, a3, a4, a5, a6, 1);
}

uint64_t sub_2141DD744(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  uint64_t v12;
  void (*v13)(void);
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;

  v12 = *(_QWORD *)(a4 - 8);
  v13 = (void (*)(void))MEMORY[0x24BDAC7A8](a1);
  v15 = (char *)&v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13();
  (*(void (**)(uint64_t *__return_ptr, char *))(a6 + 8))(&v18, v15);
  v16 = v18;
  LOBYTE(v18) = a7;
  v19 = 3;
  v20 = v16;
  v21 = MEMORY[0x24BEE4AF8];
  MEMORY[0x2199CC254](&v18, a3, &type metadata for ChartAxisModifier, a5);
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, a4);
}

uint64_t View.chartXAxisLabel<A>(position:alignment:spacing:content:)(char *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, char a6, void (*a7)(void), uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  return sub_2141DD958(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, 0);
}

uint64_t View.chartXAxisLabel(_:position:alignment:spacing:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char *a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  return sub_2141DDAC8(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, (uint64_t)sub_2141DD8C0, (uint64_t (*)(char *, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, uint64_t, _BYTE *, uint64_t, _QWORD, uint64_t, _QWORD))View.chartXAxisLabel<A>(position:alignment:spacing:content:));
}

uint64_t sub_2141DD8C0@<X0>(uint64_t a1@<X8>)
{
  return sub_2141DDB48(a1);
}

uint64_t View.chartXAxisLabel<A>(_:position:alignment:spacing:)(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return sub_2141DDC1C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, (uint64_t)sub_2141DD920, (uint64_t (*)(char *, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, uint64_t, _BYTE *, uint64_t, _QWORD, uint64_t, _QWORD))View.chartXAxisLabel<A>(position:alignment:spacing:content:));
}

uint64_t View.chartYAxisLabel<A>(position:alignment:spacing:content:)(char *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, char a6, void (*a7)(void), uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  return sub_2141DD958(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, 1);
}

uint64_t sub_2141DD958(char *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, char a6, void (*a7)(void), uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  char v16;
  uint64_t v17;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v16 = *a1;
  sub_2141D8BF8(&qword_254D69280);
  v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_214426EF0;
  v24 = a10;
  v25 = a12;
  sub_2141D8DD8((uint64_t *)&v22);
  a7();
  sub_2141D8DC0(&v22, v17 + 32);
  *(_BYTE *)(v17 + 72) = v16;
  *(_QWORD *)(v17 + 80) = a2;
  *(_QWORD *)(v17 + 88) = a3;
  *(_BYTE *)(v17 + 96) = a4 & 1;
  *(_QWORD *)(v17 + 104) = a5;
  *(_BYTE *)(v17 + 112) = a6 & 1;
  LOBYTE(v22) = a13;
  BYTE8(v22) = 3;
  v23 = 0;
  v24 = v17;
  MEMORY[0x2199CC254](&v22, a9, &type metadata for ChartAxisModifier, a11);
  return swift_bridgeObjectRelease();
}

uint64_t View.chartYAxisLabel(_:position:alignment:spacing:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char *a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  return sub_2141DDAC8(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, (uint64_t)sub_2141E0A74, (uint64_t (*)(char *, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, uint64_t, _BYTE *, uint64_t, _QWORD, uint64_t, _QWORD))View.chartYAxisLabel<A>(position:alignment:spacing:content:));
}

uint64_t sub_2141DDAC8(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char *a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t (*a14)(char *, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, uint64_t, _BYTE *, uint64_t, _QWORD, uint64_t, _QWORD))
{
  _BYTE v15[16];
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char v20;

  v20 = *a5;
  v16 = a1;
  v17 = a2;
  v18 = a3;
  v19 = a4;
  return a14(&v20, a6, a7, a8 & 1, a9, a10 & 1, a13, v15, a11, MEMORY[0x24BDF1FA8], a12, MEMORY[0x24BDF1F80]);
}

uint64_t sub_2141DDB48@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  char v4;
  uint64_t v5;

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  result = sub_21442480C();
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = v4 & 1;
  *(_QWORD *)(a1 + 24) = v5;
  return result;
}

uint64_t View.chartYAxisLabel<A>(_:position:alignment:spacing:)(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return sub_2141DDC1C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, (uint64_t)sub_2141DD920, (uint64_t (*)(char *, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, uint64_t, _BYTE *, uint64_t, _QWORD, uint64_t, _QWORD))View.chartYAxisLabel<A>(position:alignment:spacing:content:));
}

uint64_t sub_2141DDC1C(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t (*a13)(char *, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, uint64_t, _BYTE *, uint64_t, _QWORD, uint64_t, _QWORD))
{
  _BYTE v14[16];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;

  v20 = *a2;
  v15 = a8;
  v16 = a9;
  v17 = a10;
  v18 = a11;
  v19 = a1;
  return a13(&v20, a3, a4, a5 & 1, a6, a7 & 1, a12, v14, a8, MEMORY[0x24BDF1FA8], a10, MEMORY[0x24BDF1F80]);
}

uint64_t sub_2141DDC98@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;

  MEMORY[0x24BDAC7A8](a1);
  (*(void (**)(char *))(v4 + 16))((char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  result = sub_214424818();
  *(_QWORD *)a2 = result;
  *(_QWORD *)(a2 + 8) = v6;
  *(_BYTE *)(a2 + 16) = v7 & 1;
  *(_QWORD *)(a2 + 24) = v8;
  return result;
}

uint64_t sub_2141DDD24@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_2141DDC98(*(_QWORD *)(v1 + 48), a1);
}

uint64_t sub_2141DDD44(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  v2 = sub_214424110();
  v4[0] = v1;
  v4[1] = sub_2141DDD98();
  return MEMORY[0x2199CD934](MEMORY[0x24BDED308], v2, v4);
}

unint64_t sub_2141DDD98()
{
  unint64_t result;

  result = qword_253F13D58;
  if (!qword_253F13D58)
  {
    result = MEMORY[0x2199CD934](&unk_2144270C0, &type metadata for ChartAxisModifier);
    atomic_store(result, (unint64_t *)&qword_253F13D58);
  }
  return result;
}

uint64_t sub_2141DDDE8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 16);
  v2 = sub_214424110();
  v4[0] = v1;
  v4[1] = sub_2141DDD98();
  return MEMORY[0x2199CD934](MEMORY[0x24BDED308], v2, v4);
}

uint64_t *sub_2141DDE40(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  char *v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int EnumCaseMultiPayload;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char *v24;
  char *v25;
  int v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v37;
  char *v38;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
    return v4;
  }
  *(_WORD *)a1 = *(_WORD *)a2;
  v7 = a3[6];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for AxisMarkValues.Storage(0);
  v11 = *(_QWORD *)(v10 - 8);
  if (!(*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    v14 = type metadata accessor for AxisMarkValues.Storage.Stride(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 3)
    {
      v22 = v9[8];
      *(_QWORD *)v8 = *(_QWORD *)v9;
      v8[8] = v22;
      swift_bridgeObjectRetain();
    }
    else
    {
      if (EnumCaseMultiPayload != 1)
      {
        memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
LABEL_13:
        v8[*(int *)(v10 + 20)] = v9[*(int *)(v10 + 20)];
        v8[*(int *)(v10 + 24)] = v9[*(int *)(v10 + 24)];
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
        goto LABEL_14;
      }
      v16 = sub_214423C48();
      (*(void (**)(char *, _BYTE *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v8, v9, v16);
      v17 = sub_2141D8BF8(&qword_253F11CA8);
      *(_QWORD *)&v8[*(int *)(v17 + 48)] = *(_QWORD *)&v9[*(int *)(v17 + 48)];
      v18 = *(int *)(v17 + 64);
      v38 = &v8[v18];
      v19 = &v9[v18];
      v20 = sub_214423C54();
      v37 = *(_QWORD *)(v20 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v19, 1, v20))
      {
        v21 = sub_2141D8BF8(&qword_253F13D88);
        memcpy(v38, v19, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v37 + 16))(v38, v19, v20);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v37 + 56))(v38, 0, 1, v20);
      }
    }
    swift_storeEnumTagMultiPayload();
    goto LABEL_13;
  }
  v12 = sub_2141D8BF8(&qword_253F147A8);
  memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
LABEL_14:
  v23 = a3[7];
  v24 = (char *)v4 + v23;
  v25 = (char *)a2 + v23;
  v26 = *((unsigned __int8 *)a2 + v23 + 40);
  if (v26 == 1)
  {
    v28 = *((_QWORD *)v25 + 1);
    *(_QWORD *)v24 = *(_QWORD *)v25;
    *((_QWORD *)v24 + 1) = v28;
    v24[40] = 1;
    swift_retain();
  }
  else if (v26)
  {
    v29 = *((_OWORD *)v25 + 1);
    *(_OWORD *)v24 = *(_OWORD *)v25;
    *((_OWORD *)v24 + 1) = v29;
    *(_OWORD *)(v24 + 25) = *(_OWORD *)(v25 + 25);
  }
  else
  {
    v27 = *(_OWORD *)(v25 + 24);
    *(_OWORD *)(v24 + 24) = v27;
    (**(void (***)(char *))(v27 - 8))(v24);
    v24[40] = 0;
  }
  v30 = a3[8];
  v31 = (char *)v4 + v30;
  v32 = (char *)a2 + v30;
  v33 = *(uint64_t *)((char *)a2 + v30 + 24);
  if (v33)
  {
    v34 = *((_QWORD *)v32 + 4);
    *((_QWORD *)v31 + 3) = v33;
    *((_QWORD *)v31 + 4) = v34;
    (**(void (***)(void))(v33 - 8))();
  }
  else
  {
    v35 = *((_OWORD *)v32 + 1);
    *(_OWORD *)v31 = *(_OWORD *)v32;
    *((_OWORD *)v31 + 1) = v35;
    *((_QWORD *)v31 + 4) = *((_QWORD *)v32 + 4);
  }
  return v4;
}

uint64_t sub_2141DE124(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  v4 = a1 + a2[6];
  v5 = type metadata accessor for AxisMarkValues.Storage(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1, v5))
  {
    type metadata accessor for AxisMarkValues.Storage.Stride(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 3)
    {
      swift_bridgeObjectRelease();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v8 = sub_214423C48();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v4, v8);
      v9 = v4 + *(int *)(sub_2141D8BF8(&qword_253F11CA8) + 64);
      v10 = sub_214423C54();
      v11 = *(_QWORD *)(v10 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
        (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
    }
  }
  v6 = a1 + a2[7];
  if (*(_BYTE *)(v6 + 40) == 1)
  {
    swift_release();
  }
  else if (!*(_BYTE *)(v6 + 40))
  {
    _s6Charts15AnyChartContentVwxx_0(v6);
  }
  result = a1 + a2[8];
  if (*(_QWORD *)(result + 24))
    return _s6Charts15AnyChartContentVwxx_0(result);
  return result;
}

_WORD *sub_2141DE268(_WORD *a1, _WORD *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int EnumCaseMultiPayload;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  char *v22;
  char *v23;
  int v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v35;
  _BYTE *v36;

  *a1 = *a2;
  v6 = a3[6];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for AxisMarkValues.Storage(0);
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    v11 = sub_2141D8BF8(&qword_253F147A8);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_12;
  }
  v12 = type metadata accessor for AxisMarkValues.Storage.Stride(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 3)
  {
    v20 = v8[8];
    *(_QWORD *)v7 = *(_QWORD *)v8;
    v7[8] = v20;
    swift_bridgeObjectRetain();
LABEL_10:
    swift_storeEnumTagMultiPayload();
    goto LABEL_11;
  }
  if (EnumCaseMultiPayload == 1)
  {
    v14 = sub_214423C48();
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v7, v8, v14);
    v15 = sub_2141D8BF8(&qword_253F11CA8);
    *(_QWORD *)&v7[*(int *)(v15 + 48)] = *(_QWORD *)&v8[*(int *)(v15 + 48)];
    v16 = *(int *)(v15 + 64);
    v36 = &v7[v16];
    v17 = &v8[v16];
    v18 = sub_214423C54();
    v35 = *(_QWORD *)(v18 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v35 + 48))(v17, 1, v18))
    {
      v19 = sub_2141D8BF8(&qword_253F13D88);
      memcpy(v36, v17, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v35 + 16))(v36, v17, v18);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v36, 0, 1, v18);
    }
    goto LABEL_10;
  }
  memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
LABEL_11:
  v7[*(int *)(v9 + 20)] = v8[*(int *)(v9 + 20)];
  v7[*(int *)(v9 + 24)] = v8[*(int *)(v9 + 24)];
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_12:
  v21 = a3[7];
  v22 = (char *)a1 + v21;
  v23 = (char *)a2 + v21;
  v24 = *((unsigned __int8 *)a2 + v21 + 40);
  if (v24 == 1)
  {
    v26 = *((_QWORD *)v23 + 1);
    *(_QWORD *)v22 = *(_QWORD *)v23;
    *((_QWORD *)v22 + 1) = v26;
    v22[40] = 1;
    swift_retain();
  }
  else if (v24)
  {
    v27 = *((_OWORD *)v23 + 1);
    *(_OWORD *)v22 = *(_OWORD *)v23;
    *((_OWORD *)v22 + 1) = v27;
    *(_OWORD *)(v22 + 25) = *(_OWORD *)(v23 + 25);
  }
  else
  {
    v25 = *(_OWORD *)(v23 + 24);
    *(_OWORD *)(v22 + 24) = v25;
    (**(void (***)(char *))(v25 - 8))(v22);
    v22[40] = 0;
  }
  v28 = a3[8];
  v29 = (char *)a1 + v28;
  v30 = (char *)a2 + v28;
  v31 = *(_QWORD *)((char *)a2 + v28 + 24);
  if (v31)
  {
    v32 = *((_QWORD *)v30 + 4);
    *((_QWORD *)v29 + 3) = v31;
    *((_QWORD *)v29 + 4) = v32;
    (**(void (***)(void))(v31 - 8))();
  }
  else
  {
    v33 = *((_OWORD *)v30 + 1);
    *(_OWORD *)v29 = *(_OWORD *)v30;
    *((_OWORD *)v29 + 1) = v33;
    *((_QWORD *)v29 + 4) = *((_QWORD *)v30 + 4);
  }
  return a1;
}

_BYTE *sub_2141DE520(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(_BYTE *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int EnumCaseMultiPayload;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  uint64_t v34;
  _BYTE *v35;
  _BYTE *v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v50;
  _BYTE *__dst;
  _BYTE *__dsta;

  *a1 = *a2;
  a1[1] = a2[1];
  v6 = a3[6];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for AxisMarkValues.Storage(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (v13)
    {
      sub_2141DD370((uint64_t)v7, type metadata accessor for AxisMarkValues.Storage);
LABEL_9:
      v22 = sub_2141D8BF8(&qword_253F147A8);
      memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
      if (a1 == a2)
        goto LABEL_32;
LABEL_27:
      v34 = a3[7];
      v35 = &a1[v34];
      v36 = &a2[v34];
      sub_2141DE9E0((uint64_t)&a1[v34]);
      if (v36[40] == 1)
      {
        v38 = *((_QWORD *)v36 + 1);
        *(_QWORD *)v35 = *(_QWORD *)v36;
        *((_QWORD *)v35 + 1) = v38;
        v35[40] = 1;
        swift_retain();
      }
      else if (v36[40])
      {
        v39 = *(_OWORD *)v36;
        v40 = *((_OWORD *)v36 + 1);
        *(_OWORD *)(v35 + 25) = *(_OWORD *)(v36 + 25);
        *(_OWORD *)v35 = v39;
        *((_OWORD *)v35 + 1) = v40;
      }
      else
      {
        v37 = *((_QWORD *)v36 + 3);
        *((_QWORD *)v35 + 3) = v37;
        *((_QWORD *)v35 + 4) = *((_QWORD *)v36 + 4);
        (**(void (***)(_BYTE *, _BYTE *))(v37 - 8))(v35, v36);
        v35[40] = 0;
      }
      goto LABEL_32;
    }
    if (a1 != a2)
    {
      sub_2141DD370((uint64_t)v7, type metadata accessor for AxisMarkValues.Storage.Stride);
      v23 = type metadata accessor for AxisMarkValues.Storage.Stride(0);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 3)
      {
        v33 = v8[8];
        *(_QWORD *)v7 = *(_QWORD *)v8;
        v7[8] = v33;
        swift_bridgeObjectRetain();
      }
      else
      {
        if (EnumCaseMultiPayload != 1)
        {
          memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
          goto LABEL_26;
        }
        v25 = sub_214423C48();
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(v7, v8, v25);
        v26 = sub_2141D8BF8(&qword_253F11CA8);
        *(_QWORD *)&v7[*(int *)(v26 + 48)] = *(_QWORD *)&v8[*(int *)(v26 + 48)];
        v27 = *(int *)(v26 + 64);
        __dsta = &v7[v27];
        v28 = &v8[v27];
        v29 = sub_214423C54();
        v30 = *(_QWORD *)(v29 - 8);
        if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
        {
          v31 = sub_2141D8BF8(&qword_253F13D88);
          memcpy(__dsta, v28, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
        }
        else
        {
          (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v30 + 16))(__dsta, v28, v29);
          (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v30 + 56))(__dsta, 0, 1, v29);
        }
      }
      swift_storeEnumTagMultiPayload();
    }
LABEL_26:
    v7[*(int *)(v9 + 20)] = v8[*(int *)(v9 + 20)];
    v7[*(int *)(v9 + 24)] = v8[*(int *)(v9 + 24)];
    if (a1 == a2)
      goto LABEL_32;
    goto LABEL_27;
  }
  if (v13)
    goto LABEL_9;
  v14 = type metadata accessor for AxisMarkValues.Storage.Stride(0);
  v15 = swift_getEnumCaseMultiPayload();
  if (v15 == 3)
  {
    v32 = v8[8];
    *(_QWORD *)v7 = *(_QWORD *)v8;
    v7[8] = v32;
    swift_bridgeObjectRetain();
  }
  else
  {
    if (v15 != 1)
    {
      memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
      goto LABEL_20;
    }
    v16 = sub_214423C48();
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v7, v8, v16);
    v17 = sub_2141D8BF8(&qword_253F11CA8);
    *(_QWORD *)&v7[*(int *)(v17 + 48)] = *(_QWORD *)&v8[*(int *)(v17 + 48)];
    v18 = *(int *)(v17 + 64);
    __dst = &v7[v18];
    v19 = &v8[v18];
    v20 = sub_214423C54();
    v50 = *(_QWORD *)(v20 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v50 + 48))(v19, 1, v20))
    {
      v21 = sub_2141D8BF8(&qword_253F13D88);
      memcpy(__dst, v19, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v50 + 16))(__dst, v19, v20);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v50 + 56))(__dst, 0, 1, v20);
    }
  }
  swift_storeEnumTagMultiPayload();
LABEL_20:
  v7[*(int *)(v9 + 20)] = v8[*(int *)(v9 + 20)];
  v7[*(int *)(v9 + 24)] = v8[*(int *)(v9 + 24)];
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  if (a1 != a2)
    goto LABEL_27;
LABEL_32:
  v41 = a3[8];
  v42 = (uint64_t)&a1[v41];
  v43 = &a2[v41];
  v44 = *((_QWORD *)v43 + 3);
  if (*(_QWORD *)&a1[v41 + 24])
  {
    if (v44)
    {
      sub_2141DEA14((uint64_t *)v42, (uint64_t *)v43);
    }
    else
    {
      sub_2141DEB7C(v42);
      v45 = *((_QWORD *)v43 + 4);
      v46 = *((_OWORD *)v43 + 1);
      *(_OWORD *)v42 = *(_OWORD *)v43;
      *(_OWORD *)(v42 + 16) = v46;
      *(_QWORD *)(v42 + 32) = v45;
    }
  }
  else if (v44)
  {
    *(_QWORD *)(v42 + 24) = v44;
    *(_QWORD *)(v42 + 32) = *((_QWORD *)v43 + 4);
    (**(void (***)(uint64_t, _BYTE *))(v44 - 8))(v42, v43);
  }
  else
  {
    v47 = *(_OWORD *)v43;
    v48 = *((_OWORD *)v43 + 1);
    *(_QWORD *)(v42 + 32) = *((_QWORD *)v43 + 4);
    *(_OWORD *)v42 = v47;
    *(_OWORD *)(v42 + 16) = v48;
  }
  return a1;
}

uint64_t sub_2141DE9E0(uint64_t a1)
{
  destroy for AxisMarksContentStorage(a1);
  return a1;
}

uint64_t *sub_2141DEA14(uint64_t *result, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[24];

  if (result != a2)
  {
    v3 = result;
    v4 = result[3];
    v5 = a2[3];
    if (v4 == v5)
    {
      v9 = *(_QWORD *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        v10 = *a2;
        swift_retain();
        result = (uint64_t *)swift_release();
        *v3 = v10;
      }
      else
      {
        return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t *, uint64_t))(v9 + 24))(result, a2, result[3]);
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      v6 = *(_QWORD *)(v4 - 8);
      v7 = *(_QWORD *)(v5 - 8);
      v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        if ((v8 & 0x20000) != 0)
        {
          *result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(_BYTE *, uint64_t *, uint64_t))(v6 + 32))(v11, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          *v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v11, v4);
      }
    }
  }
  return result;
}

uint64_t sub_2141DEB7C(uint64_t a1)
{
  _s6Charts15AnyChartContentVwxx_0(a1);
  return a1;
}

_WORD *sub_2141DEBA0(_WORD *a1, _WORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  _OWORD *v23;
  __int128 v24;
  char *v25;
  char *v26;
  __int128 v27;
  char *__dst;

  *a1 = *a2;
  v6 = a3[6];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for AxisMarkValues.Storage(0);
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    v11 = sub_2141D8BF8(&qword_253F147A8);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    v12 = type metadata accessor for AxisMarkValues.Storage.Stride(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v13 = sub_214423C48();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v7, v8, v13);
      v14 = sub_2141D8BF8(&qword_253F11CA8);
      *(_QWORD *)&v7[*(int *)(v14 + 48)] = *(_QWORD *)&v8[*(int *)(v14 + 48)];
      v15 = *(int *)(v14 + 64);
      __dst = &v7[v15];
      v16 = &v8[v15];
      v17 = sub_214423C54();
      v18 = *(_QWORD *)(v17 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
      {
        v19 = sub_2141D8BF8(&qword_253F13D88);
        memcpy(__dst, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v18 + 32))(__dst, v16, v17);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(__dst, 0, 1, v17);
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    v7[*(int *)(v9 + 20)] = v8[*(int *)(v9 + 20)];
    v7[*(int *)(v9 + 24)] = v8[*(int *)(v9 + 24)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v20 = a3[7];
  v21 = a3[8];
  v22 = (_OWORD *)((char *)a1 + v20);
  v23 = (_OWORD *)((char *)a2 + v20);
  v24 = v23[1];
  *v22 = *v23;
  v22[1] = v24;
  *(_OWORD *)((char *)v22 + 25) = *(_OWORD *)((char *)v23 + 25);
  v25 = (char *)a1 + v21;
  v26 = (char *)a2 + v21;
  *((_QWORD *)v25 + 4) = *((_QWORD *)v26 + 4);
  v27 = *((_OWORD *)v26 + 1);
  *(_OWORD *)v25 = *(_OWORD *)v26;
  *((_OWORD *)v25 + 1) = v27;
  return a1;
}

_WORD *sub_2141DEDC0(_WORD *a1, _WORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(char *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _OWORD *v32;
  _OWORD *v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  __int128 v38;
  char *__dst;
  char *__dsta;

  *a1 = *a2;
  v6 = a3[6];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for AxisMarkValues.Storage(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      v14 = type metadata accessor for AxisMarkValues.Storage.Stride(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v15 = sub_214423C48();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v7, v8, v15);
        v16 = sub_2141D8BF8(&qword_253F11CA8);
        *(_QWORD *)&v7[*(int *)(v16 + 48)] = *(_QWORD *)&v8[*(int *)(v16 + 48)];
        v17 = *(int *)(v16 + 64);
        __dst = &v7[v17];
        v18 = &v8[v17];
        v19 = sub_214423C54();
        v20 = *(_QWORD *)(v19 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
        {
          v21 = sub_2141D8BF8(&qword_253F13D88);
          memcpy(__dst, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v20 + 32))(__dst, v18, v19);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(__dst, 0, 1, v19);
        }
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
      }
      v7[*(int *)(v9 + 20)] = v8[*(int *)(v9 + 20)];
      v7[*(int *)(v9 + 24)] = v8[*(int *)(v9 + 24)];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      if (a1 != a2)
        goto LABEL_18;
      goto LABEL_19;
    }
  }
  else
  {
    if (!v13)
    {
      if (a1 != a2)
      {
        sub_2141DD370((uint64_t)v7, type metadata accessor for AxisMarkValues.Storage.Stride);
        v23 = type metadata accessor for AxisMarkValues.Storage.Stride(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          v24 = sub_214423C48();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 32))(v7, v8, v24);
          v25 = sub_2141D8BF8(&qword_253F11CA8);
          *(_QWORD *)&v7[*(int *)(v25 + 48)] = *(_QWORD *)&v8[*(int *)(v25 + 48)];
          v26 = *(int *)(v25 + 64);
          __dsta = &v7[v26];
          v27 = &v8[v26];
          v28 = sub_214423C54();
          v29 = *(_QWORD *)(v28 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
          {
            v30 = sub_2141D8BF8(&qword_253F13D88);
            memcpy(__dsta, v27, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v29 + 32))(__dsta, v27, v28);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(__dsta, 0, 1, v28);
          }
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
        }
      }
      v7[*(int *)(v9 + 20)] = v8[*(int *)(v9 + 20)];
      v7[*(int *)(v9 + 24)] = v8[*(int *)(v9 + 24)];
      if (a1 != a2)
        goto LABEL_18;
      goto LABEL_19;
    }
    sub_2141DD370((uint64_t)v7, type metadata accessor for AxisMarkValues.Storage);
  }
  v22 = sub_2141D8BF8(&qword_253F147A8);
  memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  if (a1 != a2)
  {
LABEL_18:
    v31 = a3[7];
    v32 = (_OWORD *)((char *)a2 + v31);
    v33 = (_OWORD *)((char *)a1 + v31);
    sub_2141DE9E0((uint64_t)a1 + v31);
    v34 = v32[1];
    *v33 = *v32;
    v33[1] = v34;
    *(_OWORD *)((char *)v33 + 25) = *(_OWORD *)((char *)v32 + 25);
  }
LABEL_19:
  v35 = a3[8];
  v36 = (uint64_t)a1 + v35;
  v37 = (char *)a2 + v35;
  if (*(_QWORD *)((char *)a1 + v35 + 24))
  {
    if (*((_QWORD *)v37 + 3))
      _s6Charts15AnyChartContentVwxx_0(v36);
    else
      sub_2141DEB7C(v36);
  }
  v38 = *((_OWORD *)v37 + 1);
  *(_OWORD *)v36 = *(_OWORD *)v37;
  *(_OWORD *)(v36 + 16) = v38;
  *(_QWORD *)(v36 + 32) = *((_QWORD *)v37 + 4);
  return a1;
}

uint64_t sub_2141DF190()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2141DF19C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  v6 = sub_2141D8BF8(&qword_253F147A8);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 24), a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 32) + 24);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t sub_2141DF230()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_2141DF23C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_2141D8BF8(&qword_253F147A8);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + *(int *)(a4 + 24), a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 32) + 24) = a2;
  return result;
}

uint64_t type metadata accessor for AxisMarksConfiguration()
{
  uint64_t result;

  result = qword_253F14D60;
  if (!qword_253F14D60)
    return swift_getSingletonMetadata();
  return result;
}

void sub_2141DF2FC()
{
  unint64_t v0;

  sub_2141DF38C();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

void sub_2141DF38C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_253F147B0)
  {
    type metadata accessor for AxisMarkValues.Storage(255);
    v0 = sub_214425388();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_253F147B0);
  }
}

uint64_t initializeWithCopy for AnyChartContent(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v3;
  (**(void (***)(void))(v3 - 8))();
  return a1;
}

uint64_t *assignWithCopy for AnyChartContent(uint64_t *a1, uint64_t *a2)
{
  sub_2141DEA14(a1, a2);
  return a1;
}

__n128 initializeWithTake for AnyChartContent(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for AnyChartContent(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  _s6Charts15AnyChartContentVwxx_0(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for AnyChartContent(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AnyChartContent(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AxisCompositingLayer()
{
  return &type metadata for AxisCompositingLayer;
}

uint64_t initializeWithCopy for AxisLabelConfiguration(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  return a1;
}

uint64_t assignWithCopy for AxisLabelConfiguration(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;

  sub_2141DEA14((uint64_t *)a1, (uint64_t *)a2);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v4 = *(_OWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = v4;
  v5 = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = v5;
  return a1;
}

__n128 initializeWithTake for AxisLabelConfiguration(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for AxisLabelConfiguration(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  _s6Charts15AnyChartContentVwxx_0(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  return a1;
}

uint64_t getEnumTagSinglePayload for AxisLabelConfiguration(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 81))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AxisLabelConfiguration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 80) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 81) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 81) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AxisLabelConfiguration()
{
  return &type metadata for AxisLabelConfiguration;
}

uint64_t destroy for ChartAxisModifier()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ChartAxisModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ChartAxisModifier(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for ChartAxisModifier(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ChartAxisModifier(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ChartAxisModifier(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ChartAxisModifier()
{
  return &type metadata for ChartAxisModifier;
}

uint64_t destroy for ChartAxisConfiguration()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t _s6Charts22ChartAxisConfigurationVwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ChartAxisConfiguration(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for ChartAxisConfiguration(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for ChartAxisConfiguration(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ChartAxisConfiguration(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ChartAxisConfiguration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ChartAxisConfiguration()
{
  return &type metadata for ChartAxisConfiguration;
}

uint64_t sub_2141DFA90()
{
  sub_2141D8BF8(&qword_253F103E8);
  return AGCompareValues();
}

uint64_t sub_2141DFADC(uint64_t a1, uint64_t a2)
{
  return sub_2141E00A0(*(_BYTE *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_BYTE *)a2, *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16));
}

uint64_t sub_2141DFAF4()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_2141DFB04()
{
  unint64_t result;

  result = sub_21436CAE0(MEMORY[0x24BEE4AF8]);
  qword_253F1CA40 = result;
  return result;
}

uint64_t sub_2141DFB28@<X0>(_QWORD *a1@<X8>)
{
  if (qword_253F13C18 != -1)
    swift_once();
  *a1 = qword_253F1CA40;
  return swift_bridgeObjectRetain();
}

uint64_t sub_2141DFB78()
{
  sub_2141E09CC();
  return sub_214423EE8();
}

uint64_t sub_2141DFBC8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int8x16_t v4;
  _OWORD v6[2];
  uint64_t v7;
  _OWORD v8[2];
  uint64_t v9;
  _OWORD v10[2];
  uint64_t v11;
  _BYTE v12[40];
  char v13;
  _BYTE v14[40];
  char v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  sub_2141DFD94(a1, (uint64_t)v12);
  sub_2141DFD94(a2, (uint64_t)v14);
  if (!v13)
  {
    sub_2141DFD94((uint64_t)v12, (uint64_t)v10);
    if (!v15)
    {
      v8[0] = v10[0];
      v8[1] = v10[1];
      v9 = v11;
      v6[0] = *(_OWORD *)v14;
      v6[1] = *(_OWORD *)&v14[16];
      v7 = *(_QWORD *)&v14[32];
      sub_2141D8BF8(&qword_253F10268);
      v3 = AGCompareValues();
      sub_2141DFDD0((uint64_t)v6);
      sub_2141DFDD0((uint64_t)v8);
      goto LABEL_13;
    }
    sub_2141DFDD0((uint64_t)v10);
    goto LABEL_11;
  }
  if (v13 == 1)
  {
    sub_2141DFD94((uint64_t)v12, (uint64_t)v10);
    if (v15 == 1)
    {
      v8[0] = v10[0];
      v6[0] = *(_OWORD *)v14;
      sub_2141D8BF8(&qword_253F122F0);
      v3 = AGCompareValues();
      swift_release();
      swift_release();
LABEL_13:
      sub_2141DE9E0((uint64_t)v12);
      return v3;
    }
    swift_release();
    goto LABEL_11;
  }
  if (v15 != 2
    || (v4 = vorrq_s8(*(int8x16_t *)&v14[8], *(int8x16_t *)&v14[24]),
        *(_QWORD *)&vorr_s8(*(int8x8_t *)v4.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v4, v4, 8uLL)) | *(_QWORD *)v14))
  {
LABEL_11:
    sub_2141E0750((uint64_t)v12, &qword_254D69288);
    return 0;
  }
  sub_2141DE9E0((uint64_t)v12);
  return 1;
}

uint64_t sub_2141DFD94(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for AxisMarksContentStorage(a2, a1);
  return a2;
}

uint64_t sub_2141DFDD0(uint64_t a1)
{
  destroy for AnyChartContent();
  return a1;
}

uint64_t sub_2141DFE0C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_2141DFE38(uint64_t *a1)
{
  uint64_t v1;

  return sub_2141DD4B8(a1, *(_BYTE *)(v1 + 16), *(_BYTE *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_2141DFE48(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  char v6;
  uint64_t v7;
  char v9;
  double v10;
  char v11;
  double v12;
  char v13;
  _BYTE v14[88];
  _BYTE v15[88];
  _BYTE v16[72];
  double v17;
  char v18;
  _BYTE v19[72];
  double v20;
  char v21;
  _BYTE v22[48];
  char v23;
  _BYTE v24[88];
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = *(unsigned __int8 *)(a1 + 40);
  v5 = *(unsigned __int8 *)(a2 + 40);
  if (v4 == 9)
  {
    if (v5 == 9)
    {
      sub_2141E07D0(a1, (uint64_t)v24);
      sub_2141E07D0(a2, (uint64_t)v22);
      goto LABEL_7;
    }
LABEL_5:
    sub_2141E07D0(a1, (uint64_t)v24);
    sub_2141E07D0(a2, (uint64_t)v22);
    goto LABEL_11;
  }
  if (v5 == 9)
    goto LABEL_5;
  sub_2141E07D0(a1, (uint64_t)v24);
  sub_2141E07D0(a2, (uint64_t)v22);
  if (v4 != v5)
    goto LABEL_11;
LABEL_7:
  v6 = v23;
  if ((v24[64] & 1) != 0)
  {
    sub_2141DEB7C((uint64_t)v22);
    sub_2141DEB7C((uint64_t)v24);
    if ((v6 & 1) != 0)
    {
      sub_2141E07D0(a1, (uint64_t)v19);
      sub_2141E07D0(a2, (uint64_t)v16);
      goto LABEL_18;
    }
    goto LABEL_12;
  }
  if ((v23 & 1) != 0)
  {
LABEL_11:
    sub_2141DEB7C((uint64_t)v22);
    sub_2141DEB7C((uint64_t)v24);
LABEL_12:
    sub_2141E07D0(a1, (uint64_t)v19);
    sub_2141E07D0(a2, (uint64_t)v16);
LABEL_13:
    sub_2141DEB7C((uint64_t)v16);
    sub_2141DEB7C((uint64_t)v19);
    goto LABEL_14;
  }
  v9 = sub_214424C20();
  sub_2141DEB7C((uint64_t)v22);
  sub_2141DEB7C((uint64_t)v24);
  sub_2141E07D0(a1, (uint64_t)v19);
  sub_2141E07D0(a2, (uint64_t)v16);
  if ((v9 & 1) == 0)
    goto LABEL_13;
LABEL_18:
  v10 = v20;
  v11 = v21;
  sub_2141DEB7C((uint64_t)v19);
  v12 = v17;
  v13 = v18;
  sub_2141DEB7C((uint64_t)v16);
  if ((v11 & 1) != 0)
  {
    if ((v13 & 1) != 0)
    {
      sub_2141E07D0(a1, (uint64_t)v15);
      sub_2141E07D0(a2, (uint64_t)v14);
LABEL_23:
      sub_2141D8BF8(&qword_254D69298);
      v7 = AGCompareValues();
      goto LABEL_16;
    }
    goto LABEL_14;
  }
  if ((v13 & 1) != 0)
  {
LABEL_14:
    sub_2141E07D0(a1, (uint64_t)v15);
    sub_2141E07D0(a2, (uint64_t)v14);
    goto LABEL_15;
  }
  sub_2141E07D0(a1, (uint64_t)v15);
  sub_2141E07D0(a2, (uint64_t)v14);
  if (v10 == v12)
    goto LABEL_23;
LABEL_15:
  v7 = 0;
LABEL_16:
  sub_2141DEB7C((uint64_t)v14);
  sub_2141DEB7C((uint64_t)v15);
  return v7;
}

uint64_t sub_2141E00A0(char a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  BOOL v11;

  if (a1 == 3)
  {
    if (a4 != 3)
      return 0;
  }
  else if (a4 == 3 || (sub_214423D2C() & 1) == 0)
  {
    return 0;
  }
  if (a2)
  {
    if (!a5)
      return 0;
    swift_bridgeObjectRetain();
    v10 = swift_bridgeObjectRetain();
    v11 = sub_21420EE88(v10, a5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (!v11)
      return 0;
    return sub_21420EFC4(a3, a6);
  }
  if (!a5)
    return sub_21420EFC4(a3, a6);
  return 0;
}

BOOL sub_2141E0168(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int v18;
  int v19;
  _BOOL8 result;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int (*v27)(uint64_t, uint64_t, uint64_t);
  unsigned __int8 *v28;
  uint64_t v29;
  unsigned __int8 *v30;
  char v31;
  uint64_t v32;
  uint64_t *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  _BOOL4 v39;
  uint64_t v40;
  int v41;
  int v42;
  _BOOL4 v43;
  uint64_t v44;
  uint64_t v45;
  unsigned __int8 *v46;
  unsigned __int8 *v47;
  uint64_t v48;
  uint64_t v49;
  _OWORD v50[2];
  uint64_t v51;
  _BYTE v52[40];
  _QWORD v53[5];
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  _BYTE v57[40];
  _BYTE v58[40];
  uint64_t v59;

  v59 = *MEMORY[0x24BDAC8D0];
  v4 = type metadata accessor for AxisMarkValues.Storage(0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v49 = (uint64_t)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_2141D8BF8(qword_253F12300);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_2141D8BF8(&qword_253F147A8);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v44 - v13;
  MEMORY[0x24BDAC7A8](v12);
  v17 = (char *)&v44 - v16;
  v18 = *a1;
  v19 = *a2;
  if (v18 == 3)
  {
    if (v19 != 3)
      return 0;
  }
  else
  {
    result = 0;
    if (v19 == 3 || v18 != v19)
      return result;
  }
  v21 = a1[1];
  v22 = a2[1];
  if (v21 == 4)
  {
    if (v22 != 4)
      return 0;
LABEL_11:
    v48 = v15;
    v23 = type metadata accessor for AxisMarksConfiguration();
    v24 = *(int *)(v23 + 24);
    v46 = a1;
    sub_2141E070C((uint64_t)&a1[v24], (uint64_t)v17, &qword_253F147A8);
    v45 = v23;
    v25 = *(int *)(v23 + 24);
    v47 = a2;
    sub_2141E070C((uint64_t)&a2[v25], (uint64_t)v14, &qword_253F147A8);
    v26 = (uint64_t)&v9[*(int *)(v7 + 48)];
    sub_2141E070C((uint64_t)v17, (uint64_t)v9, &qword_253F147A8);
    sub_2141E070C((uint64_t)v14, v26, &qword_253F147A8);
    v27 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
    if (v27((uint64_t)v9, 1, v4) == 1)
    {
      sub_2141E0750((uint64_t)v14, &qword_253F147A8);
      sub_2141E0750((uint64_t)v17, &qword_253F147A8);
      if (v27(v26, 1, v4) == 1)
      {
LABEL_13:
        sub_2141E0750((uint64_t)v9, &qword_253F147A8);
        v29 = v45;
        v28 = v46;
        v30 = v47;
        if ((sub_2141DFBC8((uint64_t)&v46[*(int *)(v45 + 28)], (uint64_t)&v47[*(int *)(v45 + 28)]) & 1) == 0)
          return 0;
        sub_2141E070C((uint64_t)&v28[*(int *)(v29 + 32)], (uint64_t)v58, &qword_253F11E60);
        sub_2141E070C((uint64_t)&v30[*(int *)(v29 + 32)], (uint64_t)v57, &qword_253F11E60);
        sub_2141E070C((uint64_t)v58, (uint64_t)v53, &qword_253F11E60);
        sub_2141E070C((uint64_t)v57, (uint64_t)&v54, &qword_253F11E60);
        if (v53[3])
        {
          sub_2141E070C((uint64_t)v53, (uint64_t)v52, &qword_253F11E60);
          if (*((_QWORD *)&v55 + 1))
          {
            v50[0] = v54;
            v50[1] = v55;
            v51 = v56;
            sub_2141D8BF8(&qword_253F103E8);
            v31 = AGCompareValues();
            sub_2141DEB7C((uint64_t)v50);
            sub_2141E0750((uint64_t)v57, &qword_253F11E60);
            sub_2141E0750((uint64_t)v58, &qword_253F11E60);
            sub_2141DEB7C((uint64_t)v52);
            sub_2141E0750((uint64_t)v53, &qword_253F11E60);
            return (v31 & 1) != 0;
          }
          sub_2141E0750((uint64_t)v57, &qword_253F11E60);
          sub_2141E0750((uint64_t)v58, &qword_253F11E60);
          sub_2141DEB7C((uint64_t)v52);
        }
        else
        {
          sub_2141E0750((uint64_t)v57, &qword_253F11E60);
          sub_2141E0750((uint64_t)v58, &qword_253F11E60);
          if (!*((_QWORD *)&v55 + 1))
          {
            sub_2141E0750((uint64_t)v53, &qword_253F11E60);
            return 1;
          }
        }
        v33 = (uint64_t *)&unk_254D69290;
        v34 = v53;
LABEL_39:
        sub_2141E0750((uint64_t)v34, v33);
        return 0;
      }
LABEL_20:
      v33 = qword_253F12300;
      v34 = v9;
      goto LABEL_39;
    }
    v32 = v48;
    sub_2141E070C((uint64_t)v9, v48, &qword_253F147A8);
    if (v27(v26, 1, v4) == 1)
    {
      sub_2141E0750((uint64_t)v14, &qword_253F147A8);
      sub_2141E0750((uint64_t)v17, &qword_253F147A8);
      sub_2141DD370(v32, type metadata accessor for AxisMarkValues.Storage);
      goto LABEL_20;
    }
    v35 = v49;
    sub_2141E078C(v26, v49);
    if ((sub_2142CEEB8(v32, v35) & 1) != 0)
    {
      v36 = *(int *)(v4 + 20);
      v37 = *(unsigned __int8 *)(v32 + v36);
      v38 = *(unsigned __int8 *)(v35 + v36);
      if (v37 == 2)
      {
        if (v38 != 2)
          goto LABEL_38;
      }
      else
      {
        v39 = (v37 & 1) == 0;
        if (v38 == 2 || ((v39 ^ v38) & 1) == 0)
          goto LABEL_38;
      }
      v40 = *(int *)(v4 + 24);
      v41 = *(unsigned __int8 *)(v32 + v40);
      v42 = *(unsigned __int8 *)(v35 + v40);
      if (v41 == 2)
      {
        if (v42 != 2)
          goto LABEL_38;
      }
      else
      {
        v43 = (v41 & 1) == 0;
        if (v42 == 2 || ((v43 ^ v42) & 1) == 0)
          goto LABEL_38;
      }
      sub_2141DD370(v35, type metadata accessor for AxisMarkValues.Storage);
      sub_2141E0750((uint64_t)v14, &qword_253F147A8);
      sub_2141E0750((uint64_t)v17, &qword_253F147A8);
      sub_2141DD370(v32, type metadata accessor for AxisMarkValues.Storage);
      goto LABEL_13;
    }
LABEL_38:
    sub_2141DD370(v35, type metadata accessor for AxisMarkValues.Storage);
    sub_2141E0750((uint64_t)v14, &qword_253F147A8);
    sub_2141E0750((uint64_t)v17, &qword_253F147A8);
    sub_2141DD370(v32, type metadata accessor for AxisMarkValues.Storage);
    v34 = v9;
    v33 = &qword_253F147A8;
    goto LABEL_39;
  }
  result = 0;
  if (v22 != 4 && v21 == v22)
    goto LABEL_11;
  return result;
}

uint64_t sub_2141E070C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_2141D8BF8(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_2141E0750(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_2141D8BF8(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_2141E078C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AxisMarkValues.Storage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_2141E07D0(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  char v6;

  v4 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 24) = v4;
  (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a2, a1);
  *(_BYTE *)(a2 + 40) = *(_BYTE *)(a1 + 40);
  v5 = *(_OWORD *)(a1 + 48);
  *(_BYTE *)(a2 + 64) = *(_BYTE *)(a1 + 64);
  *(_OWORD *)(a2 + 48) = v5;
  v6 = *(_BYTE *)(a1 + 80);
  *(_QWORD *)(a2 + 72) = *(_QWORD *)(a1 + 72);
  *(_BYTE *)(a2 + 80) = v6;
  return a2;
}

BOOL sub_2141E083C(char a1, char a2, uint64_t a3, uint64_t a4, char a5, char a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13;
  BOOL v14;

  if (a1 != a5)
    return 0;
  if (a2 == 3)
  {
    if (a6 != 3)
      return 0;
  }
  else if (a6 == 3 || (sub_214423D2C() & 1) == 0)
  {
    return 0;
  }
  if (a3)
  {
    if (!a7)
      return 0;
    swift_bridgeObjectRetain();
    v13 = swift_bridgeObjectRetain();
    v14 = sub_21420EE88(v13, a7);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (!v14)
      return 0;
  }
  else if (a7)
  {
    return 0;
  }
  return (sub_21420EFC4(a4, a8) & 1) != 0;
}

ValueMetadata *type metadata accessor for ChartAxisConfigurationsKey()
{
  return &type metadata for ChartAxisConfigurationsKey;
}

unint64_t sub_2141E0930()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_253F15B58;
  if (!qword_253F15B58)
  {
    v1 = sub_2141D7924(&qword_253F15B60);
    v2[0] = sub_2141D9054(&qword_253F15BD8, &qword_253F15BE0, MEMORY[0x24BDEFB78]);
    v2[1] = sub_2141D9054(&qword_253F15C10, &qword_253F15C18, MEMORY[0x24BDF1248]);
    result = MEMORY[0x2199CD934](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&qword_253F15B58);
  }
  return result;
}

unint64_t sub_2141E09CC()
{
  unint64_t result;
  uint64_t v1;
  unint64_t v2;

  result = qword_253F13540;
  if (!qword_253F13540)
  {
    v1 = sub_2141D7924(&qword_253F13538);
    v2 = sub_2141E0A30();
    result = MEMORY[0x2199CD934](MEMORY[0x24BEE04D0], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_253F13540);
  }
  return result;
}

unint64_t sub_2141E0A30()
{
  unint64_t result;

  result = qword_253F13418;
  if (!qword_253F13418)
  {
    result = MEMORY[0x2199CD934](&unk_214426FF8, &type metadata for ChartAxisConfiguration);
    atomic_store(result, (unint64_t *)&qword_253F13418);
  }
  return result;
}

uint64_t sub_2141E0A78@<X0>(__int128 *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void (**a5)(uint64_t a1@<X0>, uint64_t a2@<X8>)@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  double v21;
  double v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  __int128 v34;
  __int128 v35;
  void (**v36)(uint64_t@<X0>, uint64_t@<X8>);
  uint64_t v38;
  void (**v39)(uint64_t@<X0>, uint64_t@<X8>);
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;

  v10 = sub_2144240D4();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1[5];
  v44 = a1[4];
  v45 = v14;
  v46 = *((_QWORD *)a1 + 12);
  v15 = a1[1];
  v40 = *a1;
  v41 = v15;
  v16 = a1[3];
  v42 = a1[2];
  v43 = v16;
  v17 = *a2;
  v18 = a2[1];
  v19 = 0.0;
  v39 = a5;
  if ((v44 & 1) != 0)
  {
    v21 = 0.0;
  }
  else
  {
    v20 = *(_QWORD *)(*((_QWORD *)&v43 + 1) + 16);
    v21 = 0.0;
    if (v20)
    {
      v19 = *(double *)(*((_QWORD *)&v43 + 1) + 32);
      v21 = *(double *)(*((_QWORD *)&v43 + 1) + 32 + 8 * v20 - 8);
    }
  }
  v22 = v21 - v19;
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), a3, v10);
  v23 = (*(unsigned __int8 *)(v11 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v24 = (v12 + v23 + 7) & 0xFFFFFFFFFFFFFFF8;
  v25 = (v24 + 23) & 0xFFFFFFFFFFFFFFF8;
  v26 = (v25 + 111) & 0xFFFFFFFFFFFFFFF8;
  v27 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v11 + 32))(v27 + v23, v13, v10);
  v28 = (_QWORD *)(v27 + v24);
  *v28 = v17;
  v28[1] = v18;
  v29 = v27 + v25;
  v30 = v41;
  *(_OWORD *)v29 = v40;
  *(_OWORD *)(v29 + 16) = v30;
  *(_QWORD *)(v29 + 96) = v46;
  v31 = v45;
  *(_OWORD *)(v29 + 64) = v44;
  *(_OWORD *)(v29 + 80) = v31;
  v32 = v43;
  *(_OWORD *)(v29 + 32) = v42;
  *(_OWORD *)(v29 + 48) = v32;
  *(double *)(v27 + v26) = v22;
  v33 = v27 + ((v26 + 15) & 0xFFFFFFFFFFFFFFF8);
  v34 = *(_OWORD *)(a4 + 48);
  *(_OWORD *)(v33 + 32) = *(_OWORD *)(a4 + 32);
  *(_OWORD *)(v33 + 48) = v34;
  *(_OWORD *)(v33 + 64) = *(_OWORD *)(a4 + 64);
  *(_BYTE *)(v33 + 80) = *(_BYTE *)(a4 + 80);
  v35 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)v33 = *(_OWORD *)a4;
  *(_OWORD *)(v33 + 16) = v35;
  v36 = v39;
  *v39 = sub_2141E86C4;
  v36[1] = (void (*)(uint64_t@<X0>, uint64_t@<X8>))v27;
  sub_2141E874C((uint64_t)&v40, (void (*)(uint64_t, uint64_t))sub_2141DD47C);
  return sub_2141E7E18(a4, (void (*)(uint64_t, unint64_t, unint64_t))sub_2141E7DC4, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7DF0, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7DD4);
}

void sub_2141E0C74(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>, double a5@<D0>, double a6@<D1>, double a7@<D2>)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  double v21;
  double v22;
  char v23;
  double v24;
  double v25;
  void (*v26)(uint64_t *__return_ptr, double *);
  _BYTE v27[48];
  double v28[4];
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v14 = sub_2144240D4();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v17 = &v27[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
  {
    v18 = 0;
    v19 = 0;
    v20 = -1;
LABEL_9:
    LOBYTE(v26) = 1;
LABEL_13:
    *(_QWORD *)a4 = v18;
    *(_QWORD *)(a4 + 8) = v19;
    *(_BYTE *)(a4 + 16) = v20;
    *(_BYTE *)(a4 + 17) = (_BYTE)v26;
    return;
  }
  v22 = *(double *)a1;
  v21 = *(double *)(a1 + 8);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v15 + 104))(v17, *MEMORY[0x24BDED118], v14);
  v23 = sub_2144240C8();
  (*(void (**)(_BYTE *, uint64_t))(v15 + 8))(v17, v14);
  v24 = a5 - v22;
  if ((v23 & 1) == 0)
    v24 = v22;
  v25 = sub_2142B689C(v24, v21, a5, a6);
  v26 = *(void (**)(uint64_t *__return_ptr, double *))(a2 + 32);
  if (!v26)
  {
    v18 = 0;
    v19 = 0;
LABEL_12:
    v20 = -1;
    goto LABEL_13;
  }
  v28[0] = v25 * a7;
  v26(&v30, v28);
  v19 = v31;
  if (!v31)
  {
    LOBYTE(v26) = 0;
    v18 = 0;
    goto LABEL_12;
  }
  v18 = v30;
  sub_2141E7D60(a3 + 16, (uint64_t)v27);
  sub_2141E7D60((uint64_t)v27, (uint64_t)v28);
  if ((v29 & 0x6000000000000000) == 0x4000000000000000)
  {
    v29 &= 0x9FFFFFFFFFFFFFFFLL;
    sub_2141E801C((uint64_t)v28, (uint64_t)&v30, &qword_253F0FF68);
    v20 = 2;
    goto LABEL_9;
  }
  sub_214425628();
  __break(1u);
}

uint64_t sub_2141E0E80@<X0>(__int128 *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, _QWORD *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;

  v10 = sub_2144240D4();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1[5];
  v31 = a1[4];
  v32 = v14;
  v33 = *((_QWORD *)a1 + 12);
  v15 = a1[1];
  v27 = *a1;
  v28 = v15;
  v16 = a1[3];
  v29 = a1[2];
  v30 = v16;
  v17 = *a2;
  v18 = a2[1];
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a3, v10);
  v19 = (*(unsigned __int8 *)(v11 + 80) + 120) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v20 = v19 + v12;
  v21 = swift_allocObject();
  v22 = ((v19 + v12) & 0xFFFFFFFFFFFFFFF8) + v21;
  v23 = v32;
  *(_OWORD *)(v21 + 80) = v31;
  *(_OWORD *)(v21 + 96) = v23;
  *(_QWORD *)(v21 + 112) = v33;
  v24 = v28;
  *(_OWORD *)(v21 + 16) = v27;
  *(_OWORD *)(v21 + 32) = v24;
  v25 = v30;
  *(_OWORD *)(v21 + 48) = v29;
  *(_OWORD *)(v21 + 64) = v25;
  (*(void (**)(unint64_t, char *, uint64_t))(v11 + 32))(v21 + v19, v13, v10);
  *(_BYTE *)(v21 + v20) = a4;
  *(_QWORD *)(v22 + 8) = v17;
  *(_QWORD *)(v22 + 16) = v18;
  *a5 = sub_2141E8868;
  a5[1] = v21;
  return sub_2141E874C((uint64_t)&v27, (void (*)(uint64_t, uint64_t))sub_2141DD47C);
}

_QWORD *sub_2141E0FD4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W3>, uint64_t a4@<X8>, double a5@<D0>)
{
  uint64_t v10;
  uint64_t v11;
  _QWORD *result;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  _QWORD *(*v16)(uint64_t *__return_ptr, double *);
  double v17;
  unsigned __int8 v18;
  double v19;
  char v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  _QWORD *(*v24)(uint64_t *__return_ptr, double *);

  v10 = sub_2144240D4();
  v11 = *(_QWORD *)(v10 - 8);
  result = (_QWORD *)MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
  {
    v15 = 0;
    v16 = 0;
LABEL_10:
    v20 = -1;
    goto LABEL_11;
  }
  v17 = *(double *)a1;
  (*(void (**)(char *, _QWORD, uint64_t))(v11 + 104))(v14, *MEMORY[0x24BDED118], v10);
  v18 = sub_2144240C8();
  result = (_QWORD *)(*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  v16 = *(_QWORD *(**)(uint64_t *__return_ptr, double *))(a2 + 32);
  if (!v16)
  {
    v15 = 0;
    goto LABEL_10;
  }
  v19 = a5 - v17;
  if ((v18 & (a3 == 0)) == 0)
    v19 = v17;
  v22 = v19;
  result = v16(&v23, &v22);
  v15 = v23;
  v16 = v24;
  if (v24)
  {
    v20 = 2;
  }
  else
  {
    v15 = 0;
    v16 = 0;
    v20 = -1;
  }
LABEL_11:
  *(_QWORD *)a4 = v15;
  *(_QWORD *)(a4 + 8) = v16;
  *(_BYTE *)(a4 + 16) = v20;
  return result;
}

uint64_t sub_2141E1118@<X0>(__int128 *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, void (**a4)(__int128 *a1@<X0>, uint64_t a2@<X8>)@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  char *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  double v23;
  double v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  void (**v36)(__int128 *@<X0>, uint64_t@<X8>);
  uint64_t v37;
  void (**v38)(__int128 *@<X0>, uint64_t@<X8>);
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;

  v8 = sub_2144240D4();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  result = MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a1[3];
  v41 = a1[2];
  v42 = v13;
  v45 = *((_QWORD *)a1 + 12);
  v14 = a1[5];
  v43 = a1[4];
  v44 = v14;
  v15 = a1[1];
  v39 = *a1;
  v40 = v15;
  v16 = *(_QWORD *)(v42 + 16);
  if (v16)
  {
    v17 = *a2;
    v18 = a2[1];
    v19 = *(_QWORD *)(v42 + 32);
    v20 = *(_QWORD *)(v42 + 32 + 8 * v16 - 8);
    v21 = 0.0;
    v38 = a4;
    if ((v43 & 1) != 0)
    {
      v23 = 0.0;
    }
    else
    {
      v22 = *(_QWORD *)(*((_QWORD *)&v42 + 1) + 16);
      v23 = 0.0;
      if (v22)
      {
        v21 = *(double *)(*((_QWORD *)&v42 + 1) + 32);
        v23 = *(double *)(*((_QWORD *)&v42 + 1) + 32 + 8 * v22 - 8);
      }
    }
    v24 = v23 - v21;
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a3, v8);
    v25 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
    v26 = (v10 + v25 + 7) & 0xFFFFFFFFFFFFFFF8;
    v27 = (v26 + 23) & 0xFFFFFFFFFFFFFFF8;
    v28 = (v27 + 111) & 0xFFFFFFFFFFFFFFF8;
    v29 = (v28 + 15) & 0xFFFFFFFFFFFFFFF8;
    v30 = swift_allocObject();
    (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v30 + v25, v12, v8);
    v31 = (_QWORD *)(v30 + v26);
    *v31 = v17;
    v31[1] = v18;
    v32 = v30 + v27;
    v33 = v40;
    *(_OWORD *)v32 = v39;
    *(_OWORD *)(v32 + 16) = v33;
    *(_QWORD *)(v32 + 96) = v45;
    v34 = v44;
    *(_OWORD *)(v32 + 64) = v43;
    *(_OWORD *)(v32 + 80) = v34;
    v35 = v42;
    *(_OWORD *)(v32 + 32) = v41;
    *(_OWORD *)(v32 + 48) = v35;
    *(double *)(v30 + v28) = v24;
    *(_QWORD *)(v30 + v29) = v19;
    *(_QWORD *)(v30 + ((v29 + 15) & 0xFFFFFFFFFFFFFFF8)) = v20;
    v36 = v38;
    *v38 = sub_2141E8348;
    v36[1] = (void (*)(__int128 *@<X0>, uint64_t@<X8>))v30;
    return sub_2141E874C((uint64_t)&v39, (void (*)(uint64_t, uint64_t))sub_2141DD47C);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_2141E1300(__int128 *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>, double a6@<D2>, double a7@<D3>, double a8@<D4>)
{
  int v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  unsigned __int8 v13;

  v9 = *((unsigned __int8 *)a1 + 16);
  if (v9 == 1
    || (v11 = *a1, sub_2141E1378((double *)&v11, a2, (uint64_t)&v12, a4, a5, a6, a7, a8), v9 = v13, (v13 & 1) != 0))
  {
    v10 = 0;
  }
  else
  {
    v10 = v12;
  }
  *(_QWORD *)a3 = v10;
  *(_QWORD *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 16) = v9 << 31 >> 31;
  *(_BYTE *)(a3 + 17) = 1;
}

void sub_2141E1378(double *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>, double a6@<D2>, double a7@<D3>, double a8@<D4>)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  double v20;
  double v21;
  char v22;
  double v23;
  double v24;
  void (*v25)(double *__return_ptr, double *);
  double v26;
  char v27;
  double v28;
  double v29;
  double v30;
  double v31;
  char v32;
  double v33;

  v16 = sub_2144240D4();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v31 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = *a1;
  v20 = a1[1];
  (*(void (**)(char *, _QWORD, uint64_t))(v17 + 104))(v19, *MEMORY[0x24BDED118], v16);
  v22 = sub_2144240C8();
  (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
  v23 = a4 - v21;
  if ((v22 & 1) == 0)
    v23 = v21;
  v24 = sub_2142B689C(v23, v20, a4, a5);
  v25 = *(void (**)(double *__return_ptr, double *))(a2 + 32);
  v26 = 0.0;
  if (v25 && (v33 = v24 * a6, v25(&v31, &v33), (v32 & 1) == 0))
  {
    v27 = 0;
    v28 = v31;
    if (a7 >= a8)
      v29 = a7;
    else
      v29 = a8;
    if (a7 >= a8)
      v30 = a8;
    else
      v30 = a7;
    if (v31 <= v30)
      v28 = v30;
    if (v29 >= v28)
      v26 = v28;
    else
      v26 = v29;
  }
  else
  {
    v27 = 1;
  }
  *(double *)a3 = v26;
  *(_BYTE *)(a3 + 8) = v27;
}

_QWORD *sub_2141E14F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W3>, uint64_t a4@<X8>, double a5@<D0>, double a6@<D2>, double a7@<D3>)
{
  uint64_t v14;
  uint64_t v15;
  _QWORD *result;
  uint64_t v17;
  char *v18;
  double v19;
  double v20;
  unsigned __int8 v21;
  _QWORD *(*v22)(double *__return_ptr, double *);
  double v23;
  char v24;
  double v25;
  double v26;
  double v27;
  uint64_t v28;
  double v29;
  double v30;
  char v31;

  v14 = sub_2144240D4();
  v15 = *(_QWORD *)(v14 - 8);
  result = (_QWORD *)MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v28 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = 0.0;
  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
    goto LABEL_6;
  v20 = *(double *)a1;
  (*(void (**)(char *, _QWORD, uint64_t))(v15 + 104))(v18, *MEMORY[0x24BDED118], v14);
  v21 = sub_2144240C8();
  result = (_QWORD *)(*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, v14);
  v22 = *(_QWORD *(**)(double *__return_ptr, double *))(a2 + 32);
  if (!v22)
    goto LABEL_6;
  v23 = a5 - v20;
  if ((v21 & (a3 == 0)) == 0)
    v23 = v20;
  v29 = v23;
  result = v22(&v30, &v29);
  if ((v31 & 1) != 0)
  {
LABEL_6:
    v24 = -1;
  }
  else
  {
    v24 = 0;
    v25 = v30;
    if (a6 >= a7)
      v26 = a6;
    else
      v26 = a7;
    if (a6 >= a7)
      v27 = a7;
    else
      v27 = a6;
    if (v30 <= v27)
      v25 = v27;
    if (v26 >= v25)
      v19 = v25;
    else
      v19 = v26;
  }
  *(double *)a4 = v19;
  *(_QWORD *)(a4 + 8) = 0;
  *(_BYTE *)(a4 + 16) = v24;
  return result;
}

uint64_t sub_2141E1654@<X0>(__int128 *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X5>, _QWORD *a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  char *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  int v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;

  v33 = a4;
  v11 = sub_2144240D4();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  result = MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = a1[3];
  v36 = a1[2];
  v37 = v16;
  v40 = *((_QWORD *)a1 + 12);
  v17 = a1[5];
  v38 = a1[4];
  v39 = v17;
  v18 = a1[1];
  v34 = *a1;
  v35 = v18;
  v19 = *(_QWORD *)(v37 + 16);
  if (v19)
  {
    v21 = *a2;
    v20 = a2[1];
    v22 = *(_QWORD *)(v37 + 32);
    v23 = *(_QWORD *)(v37 + 32 + 8 * v19 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), a3, v11);
    v24 = (*(unsigned __int8 *)(v12 + 80) + 120) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
    v25 = v24 + v13;
    v26 = ((v25 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8;
    v32 = a5;
    v27 = swift_allocObject();
    v28 = (v25 & 0xFFFFFFFFFFFFFFF8) + v27;
    v29 = v39;
    *(_OWORD *)(v27 + 80) = v38;
    *(_OWORD *)(v27 + 96) = v29;
    *(_QWORD *)(v27 + 112) = v40;
    v30 = v35;
    *(_OWORD *)(v27 + 16) = v34;
    *(_OWORD *)(v27 + 32) = v30;
    v31 = v37;
    *(_OWORD *)(v27 + 48) = v36;
    *(_OWORD *)(v27 + 64) = v31;
    (*(void (**)(unint64_t, char *, uint64_t))(v12 + 32))(v27 + v24, v15, v11);
    *(_BYTE *)(v27 + v25) = v33;
    *(_QWORD *)(v28 + 8) = v21;
    *(_QWORD *)(v28 + 16) = v20;
    *(_QWORD *)(v27 + v26) = v22;
    *(_QWORD *)(v27 + ((v26 + 15) & 0xFFFFFFFFFFFFFFF8)) = v23;
    *a6 = v32;
    a6[1] = v27;
    return sub_2141E874C((uint64_t)&v34, (void (*)(uint64_t, uint64_t))sub_2141DD47C);
  }
  else
  {
    __break(1u);
  }
  return result;
}

_QWORD *sub_2141E17EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W4>, uint64_t a5@<X8>, double a6@<D0>, double a7@<D2>, double a8@<D3>)
{
  uint64_t v15;
  uint64_t v16;
  _QWORD *result;
  uint64_t v18;
  char *v19;
  double v20;
  double v21;
  char v22;
  unsigned __int8 v23;
  _QWORD *(*v24)(double *__return_ptr, double *);
  double v25;
  int v26;
  double v27;
  double v28;
  double v29;
  double v30;
  unsigned __int8 v31;
  _QWORD *(*v32)(double *__return_ptr, double *);
  double v33;
  int v34;
  double v35;
  double v36;
  double v37;
  double v38;
  uint64_t v39;
  double v40;
  double v41;
  char v42;

  HIDWORD(v39) = a4;
  v15 = sub_2144240D4();
  v16 = *(_QWORD *)(v15 - 8);
  result = (_QWORD *)MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v39 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = *(double *)a1;
  v21 = *(double *)a2;
  v22 = *(_BYTE *)(a2 + 8);
  if ((*(_BYTE *)(a1 + 8) & 1) == 0)
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v16 + 104))(v19, *MEMORY[0x24BDED118], v15);
    v23 = sub_2144240C8();
    result = (_QWORD *)(*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v19, v15);
    v24 = *(_QWORD *(**)(double *__return_ptr, double *))(a3 + 32);
    if (v24)
    {
      v25 = v20;
      if ((v23 & (BYTE4(v39) == 0)) != 0)
        v25 = a6 - v20;
      v40 = v25;
      result = v24(&v41, &v40);
      v20 = v41;
      if ((v42 & 1) == 0)
      {
        v26 = 0;
        v27 = v41;
        if (a7 >= a8)
          v28 = a7;
        else
          v28 = a8;
        if (a7 >= a8)
          v29 = a8;
        else
          v29 = a7;
        if (v29 >= v41)
          v27 = v29;
        if (v28 < v27)
          v27 = v28;
        v20 = v27;
        v30 = 0.0;
        if ((v22 & 1) != 0)
          goto LABEL_24;
        goto LABEL_20;
      }
    }
    else
    {
      v20 = 0.0;
    }
  }
  v26 = 1;
  v30 = 0.0;
  if ((v22 & 1) != 0)
  {
LABEL_24:
    v34 = 1;
    goto LABEL_25;
  }
LABEL_20:
  (*(void (**)(char *, _QWORD, uint64_t))(v16 + 104))(v19, *MEMORY[0x24BDED118], v15);
  v31 = sub_2144240C8();
  result = (_QWORD *)(*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v19, v15);
  v32 = *(_QWORD *(**)(double *__return_ptr, double *))(a3 + 32);
  if (!v32)
    goto LABEL_24;
  v33 = a6 - v21;
  if ((v31 & (BYTE4(v39) == 0)) == 0)
    v33 = v21;
  v40 = v33;
  result = v32(&v41, &v40);
  if ((v42 & 1) != 0)
    goto LABEL_24;
  v34 = 0;
  v36 = v41;
  if (a7 >= a8)
    v37 = a7;
  else
    v37 = a8;
  if (a7 >= a8)
    v38 = a8;
  else
    v38 = a7;
  if (v38 >= v41)
    v36 = v38;
  if (v37 >= v36)
    v30 = v36;
  else
    v30 = v37;
LABEL_25:
  if (v26)
    v35 = 0.0;
  else
    v35 = v20;
  *(double *)a5 = v35;
  *(_QWORD *)(a5 + 8) = 0;
  *(_BYTE *)(a5 + 16) = v26 << 31 >> 31;
  *(double *)(a5 + 24) = v30;
  *(_QWORD *)(a5 + 32) = 0;
  *(_BYTE *)(a5 + 40) = v34 << 31 >> 31;
  return result;
}

uint64_t sub_2141E1A40@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t, uint64_t, char);
  double (*v29)@<D0>(uint64_t@<X0>, char@<W1>, uint64_t@<X2>, char@<W3>, uint64_t@<X8>);
  uint64_t (*v30)();
  double (*v31)@<D0>(uint64_t@<X0>, char@<W1>, uint64_t@<X2>, char@<W3>, uint64_t@<X8>);
  uint64_t v32;
  uint64_t (*v33)();
  uint64_t v34;
  uint64_t v35;

  v11 = *a1;
  v12 = a1[1];
  if (*a1)
  {
    v13 = swift_allocObject();
    *(_QWORD *)(v13 + 16) = v11;
    *(_QWORD *)(v13 + 24) = v12;
    v33 = sub_2141E8234;
    v34 = v13;
  }
  else
  {
    v33 = 0;
    v34 = 0;
  }
  v15 = *a2;
  v14 = a2[1];
  v35 = v15;
  if (v15)
  {
    v16 = swift_allocObject();
    *(_QWORD *)(v16 + 16) = v15;
    *(_QWORD *)(v16 + 24) = v14;
    v31 = sub_2141E9230;
    v32 = v16;
  }
  else
  {
    v31 = 0;
    v32 = 0;
  }
  v18 = *a3;
  v17 = a3[1];
  if (v18)
  {
    v19 = swift_allocObject();
    *(_QWORD *)(v19 + 16) = v18;
    *(_QWORD *)(v19 + 24) = v17;
    v30 = sub_2141E8234;
  }
  else
  {
    v30 = 0;
    v19 = 0;
  }
  v21 = *a4;
  v20 = a4[1];
  if (v21)
  {
    v22 = swift_allocObject();
    *(_QWORD *)(v22 + 16) = v21;
    *(_QWORD *)(v22 + 24) = v20;
    v29 = sub_2141E8224;
  }
  else
  {
    v29 = 0;
    v22 = 0;
  }
  v23 = v11;
  v24 = *a5;
  v25 = a5[1];
  if (v24)
  {
    v26 = swift_allocObject();
    *(_QWORD *)(v26 + 16) = v24;
    *(_QWORD *)(v26 + 24) = v25;
    v27 = sub_2141E81CC;
  }
  else
  {
    v27 = 0;
    v26 = 0;
  }
  *(_QWORD *)a6 = swift_getKeyPath();
  *(_WORD *)(a6 + 283) = 0;
  *(_QWORD *)(a6 + 288) = v33;
  *(_QWORD *)(a6 + 296) = v34;
  *(_QWORD *)(a6 + 304) = v31;
  *(_QWORD *)(a6 + 312) = v32;
  *(_QWORD *)(a6 + 320) = v30;
  *(_QWORD *)(a6 + 328) = v19;
  *(_QWORD *)(a6 + 336) = v29;
  *(_QWORD *)(a6 + 344) = v22;
  *(_QWORD *)(a6 + 352) = v27;
  *(_QWORD *)(a6 + 360) = v26;
  sub_2141D975C(v23);
  sub_2141D975C(v35);
  sub_2141D975C(v18);
  sub_2141D975C(v21);
  return sub_2141D975C(v24);
}

double sub_2141E1C3C@<D0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, char a4@<W3>, void (*a5)(__int128 *__return_ptr, uint64_t *, uint64_t *)@<X4>, uint64_t a6@<X8>)
{
  char v7;
  char v8;
  double result;
  __int128 v10;
  __int128 v11;
  char v12;
  __int128 v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;

  v17 = a1;
  v18 = a2 & 1;
  v15 = a3;
  v16 = a4 & 1;
  a5(&v11, &v17, &v15);
  v7 = v12;
  v8 = v14;
  result = *(double *)&v11;
  v10 = v13;
  *(_OWORD *)a6 = v11;
  *(_BYTE *)(a6 + 16) = v7;
  *(_OWORD *)(a6 + 24) = v10;
  *(_BYTE *)(a6 + 40) = v8;
  return result;
}

uint64_t sub_2141E1CAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  char v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  sub_2141D8BF8(&qword_253F15D58);
  v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_2144271C0;
  *(_QWORD *)(v14 + 32) = a1;
  *(_QWORD *)(v14 + 40) = a2;
  *(_QWORD *)(v14 + 48) = a3;
  *(_QWORD *)(v14 + 56) = a4;
  *(_QWORD *)(v14 + 64) = a5;
  v35 = v14;
  sub_214424FF8();
  v15 = v35;
  v16 = (_QWORD *)swift_allocObject();
  v16[2] = a6;
  v16[3] = a7;
  v16[4] = a1;
  v16[5] = a2;
  v16[6] = a3;
  v16[7] = a4;
  v16[8] = a5;
  sub_2141D8BF8(&qword_253F15830);
  v17 = swift_allocObject();
  *(_OWORD *)(v17 + 56) = 0u;
  *(_OWORD *)(v17 + 72) = 0u;
  *(_OWORD *)(v17 + 88) = 0u;
  *(_OWORD *)(v17 + 104) = 0u;
  *(_OWORD *)(v17 + 120) = 0u;
  *(_OWORD *)(v17 + 136) = 0u;
  *(_OWORD *)(v17 + 152) = 0u;
  *(_OWORD *)(v17 + 168) = 0u;
  *(_OWORD *)(v17 + 184) = 0u;
  *(_OWORD *)(v17 + 200) = 0u;
  *(_OWORD *)(v17 + 216) = 0u;
  *(_OWORD *)(v17 + 232) = 0u;
  *(_OWORD *)(v17 + 248) = 0u;
  *(_OWORD *)(v17 + 40) = 0u;
  *(_OWORD *)(v17 + 264) = 0u;
  *(_OWORD *)(v17 + 280) = 0u;
  *(_OWORD *)(v17 + 296) = 0u;
  *(_OWORD *)(v17 + 312) = 0u;
  *(_QWORD *)(v17 + 328) = 1;
  *(_WORD *)(v17 + 16) = 256;
  *(_OWORD *)(v17 + 336) = 0u;
  *(_OWORD *)(v17 + 352) = 0u;
  *(_OWORD *)(v17 + 368) = 0u;
  *(_OWORD *)(v17 + 384) = 0u;
  *(_OWORD *)(v17 + 400) = 0u;
  *(_QWORD *)(v17 + 416) = 0;
  v18 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v17 + 24) = v15;
  *(_QWORD *)(v17 + 32) = v18;
  if (!(v15 >> 62))
  {
    v19 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    result = swift_bridgeObjectRetain();
    if (v19)
      goto LABEL_3;
LABEL_20:
    swift_bridgeObjectRelease();
    v33 = swift_allocObject();
    *(_QWORD *)(v33 + 16) = sub_2141E81B0;
    *(_QWORD *)(v33 + 24) = v16;
    v34 = *(_QWORD *)(v17 + 408);
    *(_QWORD *)(v17 + 408) = sub_2141E7E10;
    *(_QWORD *)(v17 + 416) = v33;
    sub_2141D972C(v34);
    return v17;
  }
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  result = sub_2144256AC();
  v19 = result;
  if (!result)
    goto LABEL_20;
LABEL_3:
  if (v19 >= 1)
  {
    if ((v15 & 0xC000000000000001) != 0)
    {
      v21 = 0;
      do
      {
        v22 = MEMORY[0x2199CCE3C](v21, v15);
        swift_weakInit();
        v23 = *(_QWORD **)(v22 + 32);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v22 + 32) = v23;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v23 = sub_214221F04(0, v23[2] + 1, 1, v23);
          *(_QWORD *)(v22 + 32) = v23;
        }
        v26 = v23[2];
        v25 = v23[3];
        if (v26 >= v25 >> 1)
        {
          v23 = sub_214221F04((_QWORD *)(v25 > 1), v26 + 1, 1, v23);
          *(_QWORD *)(v22 + 32) = v23;
        }
        ++v21;
        v23[2] = v26 + 1;
        sub_2141E801C((uint64_t)&v35, (uint64_t)&v23[v26 + 4], &qword_253F13188);
        swift_unknownObjectRelease();
      }
      while (v19 != v21);
    }
    else
    {
      v27 = 0;
      do
      {
        v28 = *(_QWORD *)(v15 + 8 * v27 + 32);
        swift_weakInit();
        v29 = *(_QWORD **)(v28 + 32);
        swift_retain();
        v30 = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v28 + 32) = v29;
        if ((v30 & 1) == 0)
        {
          v29 = sub_214221F04(0, v29[2] + 1, 1, v29);
          *(_QWORD *)(v28 + 32) = v29;
        }
        v32 = v29[2];
        v31 = v29[3];
        if (v32 >= v31 >> 1)
        {
          v29 = sub_214221F04((_QWORD *)(v31 > 1), v32 + 1, 1, v29);
          *(_QWORD *)(v28 + 32) = v29;
        }
        ++v27;
        v29[2] = v32 + 1;
        sub_2141E801C((uint64_t)&v35, (uint64_t)&v29[v32 + 4], &qword_253F13188);
        swift_release();
      }
      while (v19 != v27);
    }
    goto LABEL_20;
  }
  __break(1u);
  return result;
}

uint64_t sub_2141E2070@<X0>(uint64_t a1@<X8>)
{
  if (qword_253F154C8 != -1)
    swift_once();
  return sub_2141E5E34((uint64_t)&qword_253F1CA98, a1);
}

double sub_2141E20C0()
{
  double result;

  qword_253F1CA98 = swift_getKeyPath();
  word_253F1CBB3 = 256;
  result = 0.0;
  xmmword_253F1CBB8 = 0u;
  unk_253F1CBC8 = 0u;
  xmmword_253F1CBD8 = 0u;
  unk_253F1CBE8 = 0u;
  xmmword_253F1CBF8 = 0u;
  return result;
}

uint64_t sub_2141E2104@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t);
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, char);
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t, char, uint64_t, char);
  int v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t);
  char *v33;
  uint64_t v35;
  uint64_t (*v36)(uint64_t);
  uint64_t (*v37)(uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t (*v42)(uint64_t, char);
  uint64_t (*v43)(uint64_t, char, uint64_t, char);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t (*v47)(uint64_t);
  uint64_t (*v48)(uint64_t, uint64_t, char);
  uint64_t v49;
  uint64_t v50;
  uint64_t (**v51)(uint64_t);
  uint64_t (*v52)(uint64_t);
  uint64_t v53;
  uint64_t (*v54)(uint64_t, char);
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t (*v59)(uint64_t);
  uint64_t (*v60)(uint64_t);
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t (*v65)(uint64_t, char, uint64_t, char);
  uint64_t v66;
  uint64_t v67;
  uint64_t (*v68)(uint64_t, uint64_t, char);
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t (*v73)(uint64_t, char, uint64_t, char);
  uint64_t v74;
  uint64_t (*v75)(uint64_t, char);
  _BYTE v76[376];

  v61 = a1;
  v64 = a2;
  v72 = sub_2141D8BF8(&qword_253F13230);
  MEMORY[0x24BDAC7A8](v72);
  v54 = (uint64_t (*)(uint64_t, char))((char *)&v53 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v62 = sub_2141D8BF8(&qword_253F13278);
  MEMORY[0x24BDAC7A8](v62);
  v63 = (char *)&v53 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_2141D8BF8(&qword_253F15BD0);
  v70 = *(_QWORD *)(v5 - 8);
  v71 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v55 = (char *)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(v2 + 352);
  v8 = *(uint64_t (**)(uint64_t))(v2 + 360);
  if (v7)
  {
    sub_2141E5E34(v2, (uint64_t)v76);
    v9 = (_QWORD *)swift_allocObject();
    v9[2] = v7;
    v9[3] = v8;
    memcpy(v9 + 4, v76, 0x170uLL);
    v10 = swift_allocObject();
    *(_QWORD *)(v10 + 16) = sub_2141E6060;
    *(_QWORD *)(v10 + 24) = v9;
    v68 = sub_2141E606C;
    v69 = v10;
    v11 = *(_QWORD *)(v2 + 288);
    v12 = *(_QWORD *)(v2 + 296);
    if (v11)
    {
LABEL_3:
      sub_2141E5E34(v2, (uint64_t)v76);
      v13 = (_QWORD *)swift_allocObject();
      v13[2] = v11;
      v13[3] = v12;
      memcpy(v13 + 4, v76, 0x170uLL);
      v14 = swift_allocObject();
      *(_QWORD *)(v14 + 16) = sub_2141E6018;
      *(_QWORD *)(v14 + 24) = v13;
      v67 = v14;
      v75 = sub_2141E6010;
      goto LABEL_6;
    }
  }
  else
  {
    v68 = 0;
    v69 = 0;
    v11 = *(_QWORD *)(v2 + 288);
    v12 = *(_QWORD *)(v2 + 296);
    if (v11)
      goto LABEL_3;
  }
  v75 = 0;
  v67 = 0;
LABEL_6:
  v16 = *(_QWORD *)(v2 + 320);
  v15 = *(_QWORD *)(v2 + 328);
  v57 = v15;
  v58 = v12;
  if (v16)
  {
    sub_2141E5E34(v2, (uint64_t)v76);
    v17 = (_QWORD *)swift_allocObject();
    v17[2] = v16;
    v17[3] = v15;
    memcpy(v17 + 4, v76, 0x170uLL);
    v18 = swift_allocObject();
    *(_QWORD *)(v18 + 16) = sub_2141E6004;
    *(_QWORD *)(v18 + 24) = v17;
    v19 = sub_2141E6010;
  }
  else
  {
    v19 = 0;
    v18 = 0;
  }
  v59 = v8;
  v60 = (uint64_t (*)(uint64_t))v7;
  v21 = *(_QWORD *)(v2 + 304);
  v20 = *(_QWORD *)(v2 + 312);
  v56 = v20;
  if (v21)
  {
    sub_2141E5E34(v2, (uint64_t)v76);
    v22 = (_QWORD *)swift_allocObject();
    v22[2] = v21;
    v22[3] = v20;
    memcpy(v22 + 4, v76, 0x170uLL);
    v23 = swift_allocObject();
    *(_QWORD *)(v23 + 16) = sub_2141E5FAC;
    *(_QWORD *)(v23 + 24) = v22;
    v73 = sub_2141E5E9C;
    v74 = v23;
  }
  else
  {
    v73 = 0;
    v74 = 0;
  }
  v24 = v11;
  v25 = *(_QWORD *)(v2 + 336);
  v26 = *(_QWORD *)(v2 + 344);
  if (v25)
  {
    sub_2141E5E34(v2, (uint64_t)v76);
    v27 = (_QWORD *)swift_allocObject();
    v27[2] = v25;
    v27[3] = v26;
    memcpy(v27 + 4, v76, 0x170uLL);
    v28 = swift_allocObject();
    *(_QWORD *)(v28 + 16) = sub_2141E5E6C;
    *(_QWORD *)(v28 + 24) = v27;
    v29 = sub_2141E5E9C;
  }
  else
  {
    v29 = 0;
    v28 = 0;
  }
  v30 = *(unsigned __int8 *)(v2 + 284);
  v65 = v29;
  v66 = v28;
  if (v30 == 1)
  {
    v31 = v71;
    v32 = *(void (**)(char *, uint64_t, uint64_t))(v70 + 16);
    v54 = v19;
    v33 = v55;
    v32(v55, v61, v71);
    v61 = v18;
    v32(v63, (uint64_t)v33, v31);
    swift_storeEnumTagMultiPayload();
    sub_2141D975C((uint64_t)v60);
    sub_2141D975C(v24);
    sub_2141D975C(v16);
    sub_2141D975C(v21);
    sub_2141D975C(v25);
    sub_2141D9054(&qword_253F15BC8, &qword_253F15BD0, MEMORY[0x24BDEFB78]);
    sub_2141E5D98();
    sub_2144243EC();
    sub_2141D972C((uint64_t)v68);
    sub_2141D972C((uint64_t)v75);
    sub_2141D972C((uint64_t)v54);
    sub_2141D972C((uint64_t)v73);
    sub_2141D972C((uint64_t)v65);
    return (*(uint64_t (**)(char *, uint64_t))(v70 + 8))(v33, v31);
  }
  else
  {
    sub_2141D975C((uint64_t)v60);
    sub_2141D975C(v24);
    sub_2141D975C(v16);
    sub_2141D975C(v21);
    sub_2141D975C(v25);
    v35 = sub_214424C44();
    v59 = v36;
    v60 = (uint64_t (*)(uint64_t))v35;
    v37 = (uint64_t (*)(uint64_t))swift_allocObject();
    v38 = (uint64_t)v19;
    v39 = v67;
    v40 = v69;
    *((_QWORD *)v37 + 2) = v68;
    *((_QWORD *)v37 + 3) = v40;
    v41 = v18;
    v42 = v75;
    *((_QWORD *)v37 + 4) = v75;
    *((_QWORD *)v37 + 5) = v39;
    *((_QWORD *)v37 + 6) = v38;
    *((_QWORD *)v37 + 7) = v18;
    v43 = v73;
    v44 = v74;
    *((_QWORD *)v37 + 8) = v73;
    *((_QWORD *)v37 + 9) = v44;
    v73 = v43;
    v74 = v44;
    v75 = v42;
    v45 = (uint64_t)v65;
    v46 = v66;
    *((_QWORD *)v37 + 10) = v65;
    *((_QWORD *)v37 + 11) = v46;
    v47 = (uint64_t (*)(uint64_t))swift_allocObject();
    *((_QWORD *)v47 + 2) = v42;
    *((_QWORD *)v47 + 3) = v67;
    *((_QWORD *)v47 + 4) = v38;
    *((_QWORD *)v47 + 5) = v41;
    *((_QWORD *)v47 + 6) = v43;
    *((_QWORD *)v47 + 7) = v44;
    *((_QWORD *)v47 + 8) = v45;
    v48 = v68;
    v49 = v69;
    *((_QWORD *)v47 + 9) = v46;
    *((_QWORD *)v47 + 10) = v48;
    *((_QWORD *)v47 + 11) = v49;
    v50 = (uint64_t)v54;
    (*(void (**)(uint64_t (*)(uint64_t, char), uint64_t, uint64_t))(v70 + 16))(v54, v61, v71);
    v51 = (uint64_t (**)(uint64_t))(v50 + *(int *)(v72 + 36));
    *v51 = sub_2141E5CD0;
    v51[1] = v37;
    v51[2] = sub_2141E5D4C;
    v51[3] = v47;
    v52 = v59;
    v51[4] = v60;
    v51[5] = v52;
    sub_2141E070C(v50, (uint64_t)v63, &qword_253F13230);
    swift_storeEnumTagMultiPayload();
    sub_2141D975C((uint64_t)v48);
    sub_2141D975C((uint64_t)v75);
    sub_2141D975C(v38);
    sub_2141D975C((uint64_t)v73);
    sub_2141D975C((uint64_t)v65);
    sub_2141D9054(&qword_253F15BC8, &qword_253F15BD0, MEMORY[0x24BDEFB78]);
    sub_2141E5D98();
    sub_2144243EC();
    return sub_2141E0750(v50, &qword_253F13230);
  }
}

uint64_t sub_2141E2748(uint64_t a1, uint64_t (*a2)(_QWORD, _QWORD, _QWORD))
{
  uint64_t v2;
  uint64_t v3;
  __int16 v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  _BYTE v9[48];
  _BYTE v10[96];
  _BYTE v11[192];
  uint64_t v12;
  _BYTE v13[48];

  v2 = a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(unsigned __int8 *)(a1 + 16));
  v5 = v2;
  v6 = v3;
  v7 = v4;
  if ((v4 & 0x100) == 0)
    return sub_2141E60A4(v2, v3, v4);
  sub_21441B284(v11);
  sub_2141E60D0((uint64_t)&v12, (uint64_t)v10);
  sub_2141E610C((uint64_t)v11);
  sub_2141E070C((uint64_t)v10, (uint64_t)v9, &qword_253F13C28);
  sub_2141E6140((uint64_t)v10);
  if (v9[40] == 255)
  {
    sub_2141E60A4(v5, v6, v7);
    return sub_2141E0750((uint64_t)v9, &qword_253F13C28);
  }
  else
  {
    sub_2141E6174((uint64_t)v9, (uint64_t)v13);
    sub_2143F9D1C(v5, v6, v7);
    return sub_2141E61B0((uint64_t)v13);
  }
}

uint64_t sub_2141E286C(uint64_t a1, uint64_t (*a2)(_QWORD, _QWORD))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;
  _BYTE v8[48];
  _BYTE v9[96];
  _BYTE v10[288];
  _BYTE v11[48];

  v2 = a2(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8));
  v4 = v3;
  v6 = v5;
  sub_21441B284(v10);
  sub_2141E60D0((uint64_t)v10, (uint64_t)v9);
  sub_2141E610C((uint64_t)v10);
  sub_2141E070C((uint64_t)v9, (uint64_t)v8, &qword_253F13C28);
  sub_2141E6140((uint64_t)v9);
  if (v8[40] == 255)
  {
    sub_2141E60A4(v2, v4, v6);
    return sub_2141E0750((uint64_t)v8, &qword_253F13C28);
  }
  else
  {
    sub_2141E6174((uint64_t)v8, (uint64_t)v11);
    sub_2143F9D1C(v2, v4, v6);
    return sub_2141E61B0((uint64_t)v11);
  }
}

uint64_t sub_2141E2958(uint64_t a1, uint64_t (*a2)(_QWORD, _QWORD))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;
  _BYTE v8[48];
  _BYTE v9[96];
  _BYTE v10[96];
  uint64_t v11;
  _BYTE v12[48];

  v2 = a2(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8));
  v4 = v3;
  v6 = v5;
  sub_21441B284(v10);
  sub_2141E60D0((uint64_t)&v11, (uint64_t)v9);
  sub_2141E610C((uint64_t)v10);
  sub_2141E070C((uint64_t)v9, (uint64_t)v8, &qword_253F13C28);
  sub_2141E6140((uint64_t)v9);
  if (v8[40] == 255)
  {
    sub_2141E60A4(v2, v4, v6);
    return sub_2141E0750((uint64_t)v8, &qword_253F13C28);
  }
  else
  {
    sub_2141E6174((uint64_t)v8, (uint64_t)v12);
    sub_2143F9D1C(v2, v4, v6);
    return sub_2141E61B0((uint64_t)v12);
  }
}

uint64_t sub_2141E2A50(uint64_t a1, uint64_t a2, void (*a3)(unsigned __int128 *__return_ptr, _QWORD, _QWORD, _QWORD, _QWORD))
{
  unsigned __int128 v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[48];
  _QWORD v15[3];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int128 v19;
  unsigned __int8 v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 v23;
  _BYTE v24[48];

  a3(&v19, *(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8), *(_QWORD *)a2, *(unsigned __int8 *)(a2 + 8));
  v3 = v19;
  v4 = v20;
  v6 = v21;
  v5 = v22;
  v7 = v23;
  sub_21441B284(&v19);
  sub_2141E60D0((uint64_t)&v19, (uint64_t)v15);
  sub_2141E610C((uint64_t)&v19);
  sub_2141E070C((uint64_t)&v18, (uint64_t)v14, &qword_253F154C0);
  sub_2141E6140((uint64_t)v15);
  if (v14[40] == 255)
  {
    sub_2141E60A4(v3, *((uint64_t *)&v3 + 1), v4);
    sub_2141E60A4(v6, v5, v7);
    return sub_2141E0750((uint64_t)v14, &qword_253F154C0);
  }
  sub_2141E61E4((uint64_t)v14, (uint64_t)v24);
  if (v4 == 255)
  {
    v9 = v6;
    v10 = v5;
    v11 = v7;
LABEL_8:
    sub_2141E60A4(v9, v10, v11);
    sub_2141E6220((uint64_t)v24, (uint64_t)&v19);
    sub_2141D8DC0((__int128 *)&v19, (uint64_t)v15);
    v12 = v16;
    v13 = v17;
    sub_2141E88D0(v15, v16);
    (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t))(v13 + 24))(0, 0, 1, v12, v13);
    _s6Charts15AnyChartContentVwxx_0((uint64_t)v15);
    return sub_2141E625C((uint64_t)v24);
  }
  if (v7 == 255)
  {
    v10 = v3 >> 64;
    v9 = v3;
    v11 = v4;
    goto LABEL_8;
  }
  sub_2143F9E84(v3, *((uint64_t *)&v3 + 1), v4, v6, v5, v7);
  return sub_2141E625C((uint64_t)v24);
}

uint64_t sub_2141E2C04(uint64_t a1, uint64_t a2, void (*a3)(unsigned __int128 *__return_ptr, _QWORD, _QWORD, _QWORD, _QWORD))
{
  unsigned __int128 v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[48];
  _QWORD v15[3];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int128 v19;
  unsigned __int8 v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 v23;
  uint64_t v24;
  _BYTE v25[48];

  a3(&v19, *(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8), *(_QWORD *)a2, *(unsigned __int8 *)(a2 + 8));
  v3 = v19;
  v4 = v20;
  v6 = v21;
  v5 = v22;
  v7 = v23;
  sub_21441B284(&v19);
  sub_2141E60D0((uint64_t)&v24, (uint64_t)v15);
  sub_2141E610C((uint64_t)&v19);
  sub_2141E070C((uint64_t)&v18, (uint64_t)v14, &qword_253F154C0);
  sub_2141E6140((uint64_t)v15);
  if (v14[40] == 255)
  {
    sub_2141E60A4(v3, *((uint64_t *)&v3 + 1), v4);
    sub_2141E60A4(v6, v5, v7);
    return sub_2141E0750((uint64_t)v14, &qword_253F154C0);
  }
  sub_2141E61E4((uint64_t)v14, (uint64_t)v25);
  if (v4 == 255)
  {
    v9 = v6;
    v10 = v5;
    v11 = v7;
LABEL_8:
    sub_2141E60A4(v9, v10, v11);
    sub_2141E6220((uint64_t)v25, (uint64_t)&v19);
    sub_2141D8DC0((__int128 *)&v19, (uint64_t)v15);
    v12 = v16;
    v13 = v17;
    sub_2141E88D0(v15, v16);
    (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t))(v13 + 24))(0, 0, 1, v12, v13);
    _s6Charts15AnyChartContentVwxx_0((uint64_t)v15);
    return sub_2141E625C((uint64_t)v25);
  }
  if (v7 == 255)
  {
    v10 = v3 >> 64;
    v9 = v3;
    v11 = v4;
    goto LABEL_8;
  }
  sub_2143F9E84(v3, *((uint64_t *)&v3 + 1), v4, v6, v5, v7);
  return sub_2141E625C((uint64_t)v25);
}

_QWORD *sub_2141E2DBC(_QWORD *result, void (*a2)(uint64_t, uint64_t, _QWORD), uint64_t a3, void (*a4)(uint64_t, uint64_t), uint64_t a5, void (*a6)(uint64_t, uint64_t), uint64_t a7, void (*a8)(uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a9, void (*a10)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  _QWORD *v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v13 = result;
  v14 = result[2];
  if (a2 && v14 == 1)
  {
    v16 = result[4];
    v17 = result[5];
    swift_retain();
    a2(v16, v17, 0);
    v18 = (uint64_t)a2;
    return (_QWORD *)sub_2141D972C(v18);
  }
  if (v14)
  {
    if (v14 == 1)
    {
      if (a4)
      {
        v19 = result[4];
        swift_retain();
        a4(v19, 0);
        result = (_QWORD *)sub_2141D972C((uint64_t)a4);
      }
      if (a6)
      {
        v20 = v13[5];
        swift_retain();
        a6(v20, 0);
        result = (_QWORD *)sub_2141D972C((uint64_t)a6);
      }
      if (a8)
      {
        swift_retain();
        a8(0, 1, 0, 1);
        result = (_QWORD *)sub_2141D972C((uint64_t)a8);
      }
      if (a10)
      {
        swift_retain();
        a10(0, 1, 0, 1);
        v18 = (uint64_t)a10;
        return (_QWORD *)sub_2141D972C(v18);
      }
    }
    else
    {
      if (a8)
      {
        v21 = result[4];
        v22 = result[6];
        sub_2141D975C((uint64_t)a8);
        a8(v21, 0, v22, 0);
        result = (_QWORD *)sub_2141D972C((uint64_t)a8);
      }
      if (a10)
      {
        v23 = v13[5];
        v24 = v13[7];
        sub_2141D975C((uint64_t)a10);
        a10(v23, 0, v24, 0);
        result = (_QWORD *)sub_2141D972C((uint64_t)a10);
      }
      if (a4)
      {
        swift_retain();
        a4(0, 1);
        result = (_QWORD *)sub_2141D972C((uint64_t)a4);
      }
      if (a6)
      {
        swift_retain();
        a6(0, 1);
        v18 = (uint64_t)a6;
        return (_QWORD *)sub_2141D972C(v18);
      }
    }
  }
  return result;
}

uint64_t sub_2141E301C(uint64_t a1, void (*a2)(_QWORD, uint64_t), uint64_t a3, void (*a4)(_QWORD, uint64_t), uint64_t a5, void (*a6)(_QWORD, uint64_t, _QWORD, uint64_t), uint64_t a7, void (*a8)(_QWORD, uint64_t, _QWORD, uint64_t), uint64_t a9, void (*a10)(_QWORD, _QWORD, uint64_t))
{
  uint64_t result;

  if (a2)
  {
    swift_retain();
    a2(0, 1);
    result = sub_2141D972C((uint64_t)a2);
  }
  if (a4)
  {
    swift_retain();
    a4(0, 1);
    result = sub_2141D972C((uint64_t)a4);
  }
  if (a6)
  {
    swift_retain();
    a6(0, 1, 0, 1);
    result = sub_2141D972C((uint64_t)a6);
  }
  if (a8)
  {
    swift_retain();
    a8(0, 1, 0, 1);
    result = sub_2141D972C((uint64_t)a8);
  }
  if (a10)
  {
    swift_retain();
    a10(0, 0, 1);
    return sub_2141D972C((uint64_t)a10);
  }
  return result;
}

char *sub_2141E316C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char *v9;
  id v10;
  id v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;

  type metadata accessor for InteractionHandlingView.UIViewType();
  v9 = (char *)objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  objc_msgSend(v9, sel_setUserInteractionEnabled_, 1);
  v10 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for ChartDragGestureRecognizer()), sel_initWithTarget_action_, v9, sel_handleDragGesture_);
  objc_msgSend(v10, sel_setDelegate_, *(_QWORD *)&v9[OBJC_IVAR____TtCV6Charts23InteractionHandlingView10UIViewType_panDelegate]);
  objc_msgSend(v9, sel_addGestureRecognizer_, v10);
  v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBD630]), sel_initWithTarget_action_, v9, sel_handleHover_);
  objc_msgSend(v9, sel_addGestureRecognizer_, v11);

  v12 = &v9[OBJC_IVAR____TtCV6Charts23InteractionHandlingView10UIViewType_onChanged];
  v13 = *(_QWORD *)&v9[OBJC_IVAR____TtCV6Charts23InteractionHandlingView10UIViewType_onChanged];
  *(_QWORD *)v12 = a2;
  *((_QWORD *)v12 + 1) = a3;
  swift_retain();
  sub_2141D972C(v13);
  v14 = &v9[OBJC_IVAR____TtCV6Charts23InteractionHandlingView10UIViewType_onEnd];
  v15 = *(_QWORD *)&v9[OBJC_IVAR____TtCV6Charts23InteractionHandlingView10UIViewType_onEnd];
  *(_QWORD *)v14 = a4;
  *((_QWORD *)v14 + 1) = a5;
  swift_retain();
  sub_2141D972C(v15);
  return v9;
}

id sub_2141E3314()
{
  return sub_2141E3830(type metadata accessor for InteractionHandlingView.UIViewType.PanDelegate);
}

uint64_t sub_2141E3320(_BYTE *a1)
{
  uint64_t v1;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t);
  uint64_t v13;

  v3 = &a1[OBJC_IVAR____TtC6Charts26ChartDragGestureRecognizer_currentLocations];
  v5 = *(_QWORD *)&a1[OBJC_IVAR____TtC6Charts26ChartDragGestureRecognizer_currentLocations];
  v4 = *(_QWORD *)&a1[OBJC_IVAR____TtC6Charts26ChartDragGestureRecognizer_currentLocations + 8];
  if (a1[OBJC_IVAR____TtC6Charts26ChartDragGestureRecognizer_isDirectTouch] != 1)
  {
    v11 = *(_QWORD *)&a1[OBJC_IVAR____TtC6Charts26ChartDragGestureRecognizer_startLocations];
    v10 = *(_QWORD *)&a1[OBJC_IVAR____TtC6Charts26ChartDragGestureRecognizer_startLocations + 8];
    sub_2141D8BF8(&qword_253F10640);
    v9 = swift_allocObject();
    *(_OWORD *)(v9 + 16) = xmmword_2144271D0;
    *(_QWORD *)(v9 + 32) = v11;
    *(_QWORD *)(v9 + 40) = v10;
    v6 = v5;
    v7 = v4;
    goto LABEL_5;
  }
  v6 = *((_QWORD *)v3 + 2);
  v7 = *((_QWORD *)v3 + 3);
  v8 = v3[32];
  sub_2141D8BF8(&qword_253F10640);
  v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_214426EF0;
  *(_QWORD *)(v9 + 32) = v5;
  *(_QWORD *)(v9 + 40) = v4;
  if ((v8 & 1) == 0)
  {
    v9 = (uint64_t)sub_214223E04((char *)1, 2, 1, (char *)v9);
    *(_QWORD *)(v9 + 16) = 2;
LABEL_5:
    *(_QWORD *)(v9 + 48) = v6;
    *(_QWORD *)(v9 + 56) = v7;
  }
  if (objc_msgSend(a1, sel_state) == (id)1 || objc_msgSend(a1, sel_state) == (id)2)
  {
    v12 = *(void (**)(uint64_t))(v1 + OBJC_IVAR____TtCV6Charts23InteractionHandlingView10UIViewType_onChanged);
    if (v12)
    {
      sub_2141D975C((uint64_t)v12);
      v13 = swift_bridgeObjectRetain();
LABEL_10:
      v12(v13);
      swift_bridgeObjectRelease();
      sub_2141D972C((uint64_t)v12);
    }
  }
  else if (objc_msgSend(a1, sel_state) == (id)3)
  {
    v12 = *(void (**)(uint64_t))(v1 + OBJC_IVAR____TtCV6Charts23InteractionHandlingView10UIViewType_onEnd);
    if (v12)
    {
      swift_bridgeObjectRetain();
      sub_2141D975C((uint64_t)v12);
      v13 = v9;
      goto LABEL_10;
    }
  }
  return swift_bridgeObjectRelease();
}

id sub_2141E352C(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id result;
  uint64_t v8;
  void (*v9)(uint64_t);
  uint64_t v10;

  objc_msgSend(a1, sel_locationInView_, v1);
  v4 = v3;
  v6 = v5;
  result = objc_msgSend(a1, sel_state);
  if (result == (id)1 || (result = objc_msgSend(a1, sel_state), result == (id)2))
  {
    v8 = OBJC_IVAR____TtCV6Charts23InteractionHandlingView10UIViewType_onChanged;
  }
  else
  {
    result = objc_msgSend(a1, sel_state);
    if (result != (id)3)
      return result;
    v8 = OBJC_IVAR____TtCV6Charts23InteractionHandlingView10UIViewType_onEnd;
  }
  v9 = *(void (**)(uint64_t))(v1 + v8);
  if (v9)
  {
    sub_2141D8BF8(&qword_253F10640);
    v10 = swift_allocObject();
    *(_OWORD *)(v10 + 16) = xmmword_214426EF0;
    *(_QWORD *)(v10 + 32) = v4;
    *(_QWORD *)(v10 + 40) = v6;
    swift_retain();
    v9(v10);
    swift_bridgeObjectRelease();
    return (id)sub_2141D972C((uint64_t)v9);
  }
  return result;
}

id sub_2141E3750(void *a1)
{
  char *v1;
  char *v3;
  char *v4;
  uint64_t v5;
  id v6;
  char *v7;
  id v8;
  objc_super v10;

  v3 = &v1[OBJC_IVAR____TtCV6Charts23InteractionHandlingView10UIViewType_onChanged];
  *(_QWORD *)v3 = 0;
  *((_QWORD *)v3 + 1) = 0;
  v4 = &v1[OBJC_IVAR____TtCV6Charts23InteractionHandlingView10UIViewType_onEnd];
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  v5 = OBJC_IVAR____TtCV6Charts23InteractionHandlingView10UIViewType_panDelegate;
  v6 = objc_allocWithZone((Class)type metadata accessor for InteractionHandlingView.UIViewType.PanDelegate());
  v7 = v1;
  *(_QWORD *)&v1[v5] = objc_msgSend(v6, sel_init);

  v10.receiver = v7;
  v10.super_class = (Class)type metadata accessor for InteractionHandlingView.UIViewType();
  v8 = objc_msgSendSuper2(&v10, sel_initWithCoder_, a1);

  return v8;
}

id sub_2141E3824()
{
  return sub_2141E3830(type metadata accessor for InteractionHandlingView.UIViewType);
}

id sub_2141E3830(uint64_t (*a1)(void))
{
  void *v1;
  objc_super v3;

  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

uint64_t type metadata accessor for InteractionHandlingView.UIViewType()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for InteractionHandlingView.UIViewType.PanDelegate()
{
  return objc_opt_self();
}

char *sub_2141E38F0(uint64_t a1)
{
  uint64_t *v1;

  return sub_2141E316C(a1, *v1, v1[1], v1[2], v1[3]);
}

uint64_t sub_2141E38FC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  v4 = *v1;
  v3 = v1[1];
  v6 = v1[2];
  v5 = v1[3];
  v7 = (_QWORD *)(a1 + OBJC_IVAR____TtCV6Charts23InteractionHandlingView10UIViewType_onChanged);
  v8 = *(_QWORD *)(a1 + OBJC_IVAR____TtCV6Charts23InteractionHandlingView10UIViewType_onChanged);
  *v7 = v4;
  v7[1] = v3;
  swift_retain();
  sub_2141D972C(v8);
  v9 = (_QWORD *)(a1 + OBJC_IVAR____TtCV6Charts23InteractionHandlingView10UIViewType_onEnd);
  v10 = *(_QWORD *)(a1 + OBJC_IVAR____TtCV6Charts23InteractionHandlingView10UIViewType_onEnd);
  *v9 = v6;
  v9[1] = v5;
  swift_retain();
  return sub_2141D972C(v10);
}

uint64_t sub_2141E3988()
{
  return sub_21442435C();
}

uint64_t sub_2141E39C8()
{
  sub_2141E5C88();
  return sub_2144243BC();
}

uint64_t sub_2141E3A18()
{
  sub_2141E5C88();
  return sub_214424368();
}

void sub_2141E3A68()
{
  sub_2141E5C88();
  sub_2144243B0();
  __break(1u);
}

void sub_2141E3A8C(int64_t a1, uint64_t a2)
{
  char *v2;
  char *v3;
  char *v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  id v25;
  int64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  void *v30;
  id v31;
  id v32;
  char v33;
  void *v34;
  id v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  uint64_t v49;
  id v50;
  int64_t v51;
  unint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int64_t v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  uint64_t v61;
  id v62;
  int64_t v63;
  unint64_t v64;
  char *v65;
  uint64_t v66;
  void *v67;
  id v68;
  id v69;
  char v70;
  void *v71;
  id v72;
  id v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  id v86;
  id v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  void *v93;
  id v94;
  BOOL v95;
  void *v96;
  double v97;
  uint64_t v98;
  void *v99;
  char *v100;
  id v101;
  void *v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  id v107;
  int64_t v108;
  unint64_t v109;
  uint64_t v110;
  id v111;
  id v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  int64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  void *aBlock;
  uint64_t v126;
  void (*v127)(uint64_t, void *);
  char *v128;
  void (*v129)(uint64_t);
  uint64_t v130;
  uint64_t v131;
  void *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;

  v3 = v2;
  v5 = (char *)objc_msgSend(v2, sel_state);
  if ((unint64_t)(v5 - 1) >= 2)
  {
    if (v5)
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        swift_bridgeObjectRetain();
        sub_21442543C();
        sub_2141E88F4();
        sub_2141E8930();
        sub_214425124();
        a1 = (int64_t)aBlock;
        v122 = v126;
        v14 = (uint64_t)v127;
        v15 = v128;
        v16 = (unint64_t)v129;
      }
      else
      {
        v42 = -1 << *(_BYTE *)(a1 + 32);
        v122 = a1 + 56;
        v14 = ~v42;
        v43 = -v42;
        if (v43 < 64)
          v44 = ~(-1 << v43);
        else
          v44 = -1;
        v16 = v44 & *(_QWORD *)(a1 + 56);
        swift_bridgeObjectRetain();
        v15 = 0;
      }
      v45 = (unint64_t)(v14 + 64) >> 6;
      if (a1 < 0)
        goto LABEL_54;
      while (1)
      {
        if (v16)
        {
          v46 = (v16 - 1) & v16;
          v47 = __clz(__rbit64(v16)) | ((_QWORD)v15 << 6);
          v48 = v15;
        }
        else
        {
          v51 = (int64_t)(v15 + 1);
          if (__OFADD__(v15, 1))
          {
LABEL_145:
            __break(1u);
LABEL_146:
            __break(1u);
LABEL_147:
            __break(1u);
            return;
          }
          if (v51 >= v45)
            goto LABEL_108;
          v52 = *(_QWORD *)(v122 + 8 * v51);
          v48 = v15 + 1;
          if (!v52)
          {
            v48 = v15 + 2;
            if ((uint64_t)(v15 + 2) >= v45)
              goto LABEL_108;
            v52 = *(_QWORD *)(v122 + 8 * (_QWORD)v48);
            if (!v52)
            {
              v48 = v15 + 3;
              if ((uint64_t)(v15 + 3) >= v45)
                goto LABEL_108;
              v52 = *(_QWORD *)(v122 + 8 * (_QWORD)v48);
              if (!v52)
              {
                v48 = v15 + 4;
                if ((uint64_t)(v15 + 4) >= v45)
                  goto LABEL_108;
                v52 = *(_QWORD *)(v122 + 8 * (_QWORD)v48);
                if (!v52)
                {
                  v53 = v15 + 5;
                  do
                  {
                    if ((char *)v45 == v53)
                      goto LABEL_108;
                    v52 = *(_QWORD *)(v122 + 8 * (_QWORD)v53++);
                  }
                  while (!v52);
                  v48 = v53 - 1;
                }
              }
            }
          }
          v46 = (v52 - 1) & v52;
          v47 = __clz(__rbit64(v52)) + ((_QWORD)v48 << 6);
        }
        v50 = *(id *)(*(_QWORD *)(a1 + 48) + 8 * v47);
        if (!v50)
          goto LABEL_108;
        while (1)
        {
          objc_msgSend(v2, sel_ignoreTouch_forEvent_, v50, a2);

          v15 = v48;
          v16 = v46;
          if ((a1 & 0x8000000000000000) == 0)
            break;
LABEL_54:
          v49 = sub_214425448();
          if (v49)
          {
            v131 = v49;
            sub_2141E88F4();
            swift_unknownObjectRetain();
            swift_dynamicCast();
            v50 = v132;
            swift_unknownObjectRelease();
            v48 = v15;
            v46 = v16;
            if (v132)
              continue;
          }
          goto LABEL_108;
        }
      }
    }
    if (!*(_QWORD *)&v2[OBJC_IVAR____TtC6Charts26ChartDragGestureRecognizer_timer])
    {
      v9 = OBJC_IVAR____TtC6Charts26ChartDragGestureRecognizer_initialFirstTouch;
      if (!*(_QWORD *)&v2[OBJC_IVAR____TtC6Charts26ChartDragGestureRecognizer_initialFirstTouch]
        && !*(_QWORD *)&v2[OBJC_IVAR____TtC6Charts26ChartDragGestureRecognizer_initialSecondTouch])
      {
        v123 = OBJC_IVAR____TtC6Charts26ChartDragGestureRecognizer_initialSecondTouch;
        v118 = OBJC_IVAR____TtC6Charts26ChartDragGestureRecognizer_timer;
        if ((a1 & 0xC000000000000001) != 0)
        {
          swift_bridgeObjectRetain();
          sub_21442543C();
          sub_2141E88F4();
          sub_2141E8930();
          sub_214425124();
          a1 = (int64_t)v132;
          v120 = v133;
          v79 = v134;
          v80 = v135;
          v81 = v136;
        }
        else
        {
          v82 = -1 << *(_BYTE *)(a1 + 32);
          v120 = a1 + 56;
          v83 = ~v82;
          v84 = -v82;
          if (v84 < 64)
            v85 = ~(-1 << v84);
          else
            v85 = -1;
          v81 = v85 & *(_QWORD *)(a1 + 56);
          swift_bridgeObjectRetain();
          v79 = v83;
          v80 = 0;
        }
        v119 = (unint64_t)(v79 + 64) >> 6;
        while (1)
        {
          if (a1 < 0)
          {
            v106 = sub_214425448();
            if (!v106)
              goto LABEL_108;
            v131 = v106;
            sub_2141E88F4();
            swift_unknownObjectRetain();
            swift_dynamicCast();
            v107 = aBlock;
            swift_unknownObjectRelease();
            v105 = v80;
            v103 = v81;
          }
          else
          {
            if (v81)
            {
              v103 = (v81 - 1) & v81;
              v104 = __clz(__rbit64(v81)) | (v80 << 6);
              v105 = v80;
            }
            else
            {
              v108 = v80 + 1;
              if (__OFADD__(v80, 1))
                goto LABEL_147;
              if (v108 >= v119)
                goto LABEL_108;
              v109 = *(_QWORD *)(v120 + 8 * v108);
              v105 = v80 + 1;
              if (!v109)
              {
                v105 = v80 + 2;
                if (v80 + 2 >= v119)
                  goto LABEL_108;
                v109 = *(_QWORD *)(v120 + 8 * v105);
                if (!v109)
                {
                  v105 = v80 + 3;
                  if (v80 + 3 >= v119)
                    goto LABEL_108;
                  v109 = *(_QWORD *)(v120 + 8 * v105);
                  if (!v109)
                  {
                    v105 = v80 + 4;
                    if (v80 + 4 >= v119)
                      goto LABEL_108;
                    v109 = *(_QWORD *)(v120 + 8 * v105);
                    if (!v109)
                    {
                      v110 = v80 + 5;
                      do
                      {
                        if (v119 == v110)
                          goto LABEL_108;
                        v109 = *(_QWORD *)(v120 + 8 * v110++);
                      }
                      while (!v109);
                      v105 = v110 - 1;
                    }
                  }
                }
              }
              v103 = (v109 - 1) & v109;
              v104 = __clz(__rbit64(v109)) + (v105 << 6);
            }
            v107 = *(id *)(*(_QWORD *)(a1 + 48) + 8 * v104);
          }
          if (!v107)
            goto LABEL_108;
          if (*(_QWORD *)&v3[v9])
          {
            if (*(_QWORD *)&v3[v123])
            {
              objc_msgSend(v3, sel_ignoreTouch_forEvent_, v107, a2);

            }
            else
            {
              *(_QWORD *)&v3[v123] = v107;
              v111 = v107;
              v112 = objc_msgSend(v3, sel_view);
              objc_msgSend(v111, sel_locationInView_, v112);
              v114 = v113;
              v116 = v115;

              v117 = &v3[OBJC_IVAR____TtC6Charts26ChartDragGestureRecognizer_startLocations];
              *((_QWORD *)v117 + 2) = v114;
              *((_QWORD *)v117 + 3) = v116;
              v117[32] = 0;
            }
          }
          else
          {
            *(_QWORD *)&v3[v9] = v107;
            v86 = v107;
            v87 = objc_msgSend(v3, sel_view);
            objc_msgSend(v86, sel_locationInView_, v87);
            v89 = v88;
            v91 = v90;

            v92 = &v3[OBJC_IVAR____TtC6Charts26ChartDragGestureRecognizer_startLocations];
            *(_QWORD *)v92 = v89;
            *((_QWORD *)v92 + 1) = v91;
            v93 = *(void **)&v3[v9];
            *(_QWORD *)&v3[v9] = v107;
            v94 = v86;

            v95 = ((unint64_t)objc_msgSend(v94, sel_type) & 0xFFFFFFFFFFFFFFFDLL) == 0;
            v3[OBJC_IVAR____TtC6Charts26ChartDragGestureRecognizer_isDirectTouch] = v95;
            v96 = (void *)objc_opt_self();
            v97 = *(double *)&v3[OBJC_IVAR____TtC6Charts26ChartDragGestureRecognizer_minimumPressDuration];
            v98 = swift_allocObject();
            *(_QWORD *)(v98 + 16) = v3;
            v129 = sub_2141E914C;
            v130 = v98;
            aBlock = (void *)MEMORY[0x24BDAC760];
            v126 = 1107296256;
            v127 = sub_2141E4BA4;
            v128 = (char *)&unk_24D17C6E0;
            v99 = _Block_copy(&aBlock);
            v100 = v3;
            swift_release();
            v101 = objc_msgSend(v96, sel_scheduledTimerWithTimeInterval_repeats_block_, 0, v99, v97);
            _Block_release(v99);
            v102 = *(void **)&v3[v118];
            *(_QWORD *)&v3[v118] = v101;

          }
          v80 = v105;
          v81 = v103;
        }
      }
    }
    if ((a1 & 0xC000000000000001) != 0)
    {
      swift_bridgeObjectRetain();
      sub_21442543C();
      sub_2141E88F4();
      sub_2141E8930();
      sub_214425124();
      a1 = (int64_t)aBlock;
      v10 = v126;
      v11 = (uint64_t)v127;
      v12 = v128;
      v13 = (unint64_t)v129;
    }
    else
    {
      v54 = -1 << *(_BYTE *)(a1 + 32);
      v10 = a1 + 56;
      v11 = ~v54;
      v55 = -v54;
      if (v55 < 64)
        v56 = ~(-1 << v55);
      else
        v56 = -1;
      v13 = v56 & *(_QWORD *)(a1 + 56);
      swift_bridgeObjectRetain();
      v12 = 0;
    }
    v57 = (unint64_t)(v11 + 64) >> 6;
    while (1)
    {
      if (a1 < 0)
      {
        v61 = sub_214425448();
        if (!v61)
          goto LABEL_108;
        v131 = v61;
        sub_2141E88F4();
        swift_unknownObjectRetain();
        swift_dynamicCast();
        v62 = v132;
        swift_unknownObjectRelease();
        v60 = v12;
        v58 = v13;
        if (!v132)
          goto LABEL_108;
      }
      else
      {
        if (v13)
        {
          v58 = (v13 - 1) & v13;
          v59 = __clz(__rbit64(v13)) | ((_QWORD)v12 << 6);
          v60 = v12;
        }
        else
        {
          v63 = (int64_t)(v12 + 1);
          if (__OFADD__(v12, 1))
            goto LABEL_146;
          if (v63 >= v57)
            goto LABEL_108;
          v64 = *(_QWORD *)(v10 + 8 * v63);
          v60 = v12 + 1;
          if (!v64)
          {
            v60 = v12 + 2;
            if ((uint64_t)(v12 + 2) >= v57)
              goto LABEL_108;
            v64 = *(_QWORD *)(v10 + 8 * (_QWORD)v60);
            if (!v64)
            {
              v60 = v12 + 3;
              if ((uint64_t)(v12 + 3) >= v57)
                goto LABEL_108;
              v64 = *(_QWORD *)(v10 + 8 * (_QWORD)v60);
              if (!v64)
              {
                v60 = v12 + 4;
                if ((uint64_t)(v12 + 4) >= v57)
                  goto LABEL_108;
                v64 = *(_QWORD *)(v10 + 8 * (_QWORD)v60);
                if (!v64)
                {
                  v65 = v12 + 5;
                  do
                  {
                    if ((char *)v57 == v65)
                      goto LABEL_108;
                    v64 = *(_QWORD *)(v10 + 8 * (_QWORD)v65++);
                  }
                  while (!v64);
                  v60 = v65 - 1;
                }
              }
            }
          }
          v58 = (v64 - 1) & v64;
          v59 = __clz(__rbit64(v64)) + ((_QWORD)v60 << 6);
        }
        v62 = *(id *)(*(_QWORD *)(a1 + 48) + 8 * v59);
        if (!v62)
          goto LABEL_108;
      }
      v66 = OBJC_IVAR____TtC6Charts26ChartDragGestureRecognizer_initialSecondTouch;
      if (*(_QWORD *)&v3[OBJC_IVAR____TtC6Charts26ChartDragGestureRecognizer_initialSecondTouch])
        break;
      v67 = *(void **)&v3[OBJC_IVAR____TtC6Charts26ChartDragGestureRecognizer_initialFirstTouch];
      if (v67)
      {
        sub_2141E88F4();
        v68 = v62;
        v69 = v67;
        v70 = sub_214425364();

        if ((v70 & 1) != 0)
          break;
        v66 = OBJC_IVAR____TtC6Charts26ChartDragGestureRecognizer_initialSecondTouch;
        v71 = *(void **)&v3[OBJC_IVAR____TtC6Charts26ChartDragGestureRecognizer_initialSecondTouch];
      }
      else
      {
        v71 = 0;
      }
      *(_QWORD *)&v3[v66] = v62;
      v72 = v62;

      v73 = objc_msgSend(v3, sel_view);
      objc_msgSend(v72, sel_locationInView_, v73);
      v75 = v74;
      v77 = v76;

      v78 = &v3[OBJC_IVAR____TtC6Charts26ChartDragGestureRecognizer_startLocations];
      *((_QWORD *)v78 + 2) = v75;
      *((_QWORD *)v78 + 3) = v77;
      v78[32] = 0;
LABEL_80:
      v12 = v60;
      v13 = v58;
    }
    objc_msgSend(v3, sel_ignoreTouch_forEvent_, v62, a2);

    goto LABEL_80;
  }
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    sub_21442543C();
    sub_2141E88F4();
    sub_2141E8930();
    sub_214425124();
    a1 = (int64_t)aBlock;
    v121 = v126;
    v6 = (uint64_t)v127;
    v7 = v128;
    v8 = (unint64_t)v129;
  }
  else
  {
    v17 = -1 << *(_BYTE *)(a1 + 32);
    v121 = a1 + 56;
    v6 = ~v17;
    v18 = -v17;
    if (v18 < 64)
      v19 = ~(-1 << v18);
    else
      v19 = -1;
    v8 = v19 & *(_QWORD *)(a1 + 56);
    swift_bridgeObjectRetain();
    v7 = 0;
  }
  v20 = (unint64_t)(v6 + 64) >> 6;
  while (a1 < 0)
  {
    v24 = sub_214425448();
    if (!v24)
      goto LABEL_108;
    v131 = v24;
    sub_2141E88F4();
    swift_unknownObjectRetain();
    swift_dynamicCast();
    v25 = v132;
    swift_unknownObjectRelease();
    v23 = v7;
    v21 = v8;
    if (!v132)
      goto LABEL_108;
LABEL_40:
    v29 = OBJC_IVAR____TtC6Charts26ChartDragGestureRecognizer_initialSecondTouch;
    if (*(_QWORD *)&v3[OBJC_IVAR____TtC6Charts26ChartDragGestureRecognizer_initialSecondTouch])
      goto LABEL_17;
    v30 = *(void **)&v3[OBJC_IVAR____TtC6Charts26ChartDragGestureRecognizer_initialFirstTouch];
    if (v30)
    {
      sub_2141E88F4();
      v31 = v25;
      v32 = v30;
      v33 = sub_214425364();

      if ((v33 & 1) != 0)
      {
LABEL_17:
        objc_msgSend(v3, sel_ignoreTouch_forEvent_, v25, a2);
        goto LABEL_18;
      }
      v29 = OBJC_IVAR____TtC6Charts26ChartDragGestureRecognizer_initialSecondTouch;
      v34 = *(void **)&v3[OBJC_IVAR____TtC6Charts26ChartDragGestureRecognizer_initialSecondTouch];
    }
    else
    {
      v34 = 0;
    }
    *(_QWORD *)&v3[v29] = v25;
    v35 = v25;

    v36 = objc_msgSend(v3, sel_view);
    objc_msgSend(v35, sel_locationInView_, v36);
    v38 = v37;
    v40 = v39;

    v41 = &v3[OBJC_IVAR____TtC6Charts26ChartDragGestureRecognizer_startLocations];
    *((_QWORD *)v41 + 2) = v38;
    *((_QWORD *)v41 + 3) = v40;
    v41[32] = 0;
    sub_2141E4780();
LABEL_18:

    v7 = v23;
    v8 = v21;
  }
  if (v8)
  {
    v21 = (v8 - 1) & v8;
    v22 = __clz(__rbit64(v8)) | ((_QWORD)v7 << 6);
    v23 = v7;
    goto LABEL_39;
  }
  v26 = (int64_t)(v7 + 1);
  if (__OFADD__(v7, 1))
  {
    __break(1u);
    goto LABEL_145;
  }
  if (v26 >= v20)
    goto LABEL_108;
  v27 = *(_QWORD *)(v121 + 8 * v26);
  v23 = v7 + 1;
  if (v27)
    goto LABEL_38;
  v23 = v7 + 2;
  if ((uint64_t)(v7 + 2) >= v20)
    goto LABEL_108;
  v27 = *(_QWORD *)(v121 + 8 * (_QWORD)v23);
  if (v27)
    goto LABEL_38;
  v23 = v7 + 3;
  if ((uint64_t)(v7 + 3) >= v20)
    goto LABEL_108;
  v27 = *(_QWORD *)(v121 + 8 * (_QWORD)v23);
  if (v27)
    goto LABEL_38;
  v23 = v7 + 4;
  if ((uint64_t)(v7 + 4) >= v20)
    goto LABEL_108;
  v27 = *(_QWORD *)(v121 + 8 * (_QWORD)v23);
  if (v27)
  {
LABEL_38:
    v21 = (v27 - 1) & v27;
    v22 = __clz(__rbit64(v27)) + ((_QWORD)v23 << 6);
LABEL_39:
    v25 = *(id *)(*(_QWORD *)(a1 + 48) + 8 * v22);
    if (!v25)
      goto LABEL_108;
    goto LABEL_40;
  }
  v28 = v7 + 5;
  while ((char *)v20 != v28)
  {
    v27 = *(_QWORD *)(v121 + 8 * (_QWORD)v28++);
    if (v27)
    {
      v23 = v28 - 1;
      goto LABEL_38;
    }
  }
LABEL_108:
  sub_2141E9120();
}

void sub_2141E4780()
{
  char *v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  void *v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;

  v1 = OBJC_IVAR____TtC6Charts26ChartDragGestureRecognizer_initialFirstTouch;
  v2 = *(void **)&v0[OBJC_IVAR____TtC6Charts26ChartDragGestureRecognizer_initialFirstTouch];
  if (v2)
  {
    v3 = v2;
    v4 = objc_msgSend(v0, sel_view);
    objc_msgSend(v3, sel_locationInView_, v4);
    v6 = v5;
    v8 = v7;

    v9 = &v0[OBJC_IVAR____TtC6Charts26ChartDragGestureRecognizer_currentLocations];
    *(_QWORD *)v9 = v6;
    *((_QWORD *)v9 + 1) = v8;
    v10 = &v0[OBJC_IVAR____TtC6Charts26ChartDragGestureRecognizer_initialSecondTouch];
    v11 = *(void **)&v0[OBJC_IVAR____TtC6Charts26ChartDragGestureRecognizer_initialSecondTouch];
    if (!v11)
      goto LABEL_6;
  }
  else
  {
    v10 = &v0[OBJC_IVAR____TtC6Charts26ChartDragGestureRecognizer_initialSecondTouch];
    v11 = *(void **)&v0[OBJC_IVAR____TtC6Charts26ChartDragGestureRecognizer_initialSecondTouch];
    if (!v11)
      goto LABEL_11;
  }
  v12 = v11;
  v13 = objc_msgSend(v0, sel_view);
  objc_msgSend(v12, sel_locationInView_, v13);
  v15 = v14;
  v17 = v16;

  v18 = &v0[OBJC_IVAR____TtC6Charts26ChartDragGestureRecognizer_currentLocations];
  *((_QWORD *)v18 + 2) = v15;
  *((_QWORD *)v18 + 3) = v17;
  v18[32] = 0;
LABEL_6:
  if (!objc_msgSend(v0, sel_state))
  {
    v19 = 1;
    goto LABEL_10;
  }
  if (objc_msgSend(v0, sel_state) == (id)1)
  {
    v19 = 2;
LABEL_10:
    objc_msgSend(v0, sel_setState_, v19);
  }
LABEL_11:
  if (!*(_QWORD *)&v0[v1]
    && !*(_QWORD *)v10
    && (objc_msgSend(v0, sel_state) == (id)1 || objc_msgSend(v0, sel_state) == (id)2))
  {
    objc_msgSend(v0, sel_setState_, 3);
  }
}

uint64_t sub_2141E49E0(void *a1, uint64_t a2, uint64_t a3, void *a4, void (*a5)(uint64_t))
{
  uint64_t v8;
  id v9;
  id v10;

  sub_2141E88F4();
  sub_2141E8930();
  v8 = sub_214425100();
  v9 = a4;
  v10 = a1;
  a5(v8);

  return swift_bridgeObjectRelease();
}

double sub_2141E4A70()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  double result;
  uint64_t v8;

  v1 = OBJC_IVAR____TtC6Charts26ChartDragGestureRecognizer_timer;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC6Charts26ChartDragGestureRecognizer_timer);
  if (v2)
  {
    objc_msgSend(v2, sel_invalidate);
    v3 = *(void **)(v0 + v1);
  }
  else
  {
    v3 = 0;
  }
  *(_QWORD *)(v0 + v1) = 0;

  v4 = *(void **)(v0 + OBJC_IVAR____TtC6Charts26ChartDragGestureRecognizer_initialFirstTouch);
  *(_QWORD *)(v0 + OBJC_IVAR____TtC6Charts26ChartDragGestureRecognizer_initialFirstTouch) = 0;

  v5 = *(void **)(v0 + OBJC_IVAR____TtC6Charts26ChartDragGestureRecognizer_initialSecondTouch);
  *(_QWORD *)(v0 + OBJC_IVAR____TtC6Charts26ChartDragGestureRecognizer_initialSecondTouch) = 0;

  v6 = v0 + OBJC_IVAR____TtC6Charts26ChartDragGestureRecognizer_startLocations;
  result = 0.0;
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_BYTE *)(v6 + 32) = 1;
  v8 = v0 + OBJC_IVAR____TtC6Charts26ChartDragGestureRecognizer_currentLocations;
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_BYTE *)(v8 + 32) = 1;
  return result;
}

void sub_2141E4B44(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  void *v5;

  v3 = OBJC_IVAR____TtC6Charts26ChartDragGestureRecognizer_timer;
  v4 = *(void **)(a2 + OBJC_IVAR____TtC6Charts26ChartDragGestureRecognizer_timer);
  if (v4)
  {
    objc_msgSend(v4, sel_invalidate);
    v5 = *(void **)(a2 + v3);
  }
  else
  {
    v5 = 0;
  }
  *(_QWORD *)(a2 + v3) = 0;

  if (*(_QWORD *)(a2 + OBJC_IVAR____TtC6Charts26ChartDragGestureRecognizer_initialFirstTouch))
    sub_2141E4780();
}

void sub_2141E4BA4(uint64_t a1, void *a2)
{
  void (*v3)(void);
  id v4;

  v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  v4 = a2;
  v3();
  swift_release();

}

id sub_2141E4BF4(uint64_t a1, uint64_t a2)
{
  _BYTE *v2;
  _BYTE *v3;
  objc_class *ObjectType;
  char *v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  id v15;
  objc_super v17;
  _QWORD v18[3];
  uint64_t v19;

  v3 = v2;
  ObjectType = (objc_class *)swift_getObjectType();
  v7 = &v3[OBJC_IVAR____TtC6Charts26ChartDragGestureRecognizer_startLocations];
  *(_OWORD *)v7 = 0u;
  *((_OWORD *)v7 + 1) = 0u;
  v7[32] = 1;
  v8 = &v3[OBJC_IVAR____TtC6Charts26ChartDragGestureRecognizer_currentLocations];
  *(_OWORD *)v8 = 0u;
  *((_OWORD *)v8 + 1) = 0u;
  v8[32] = 1;
  v3[OBJC_IVAR____TtC6Charts26ChartDragGestureRecognizer_isDirectTouch] = 1;
  *(_QWORD *)&v3[OBJC_IVAR____TtC6Charts26ChartDragGestureRecognizer_minimumPressDuration] = 0x3FB999999999999ALL;
  *(_QWORD *)&v3[OBJC_IVAR____TtC6Charts26ChartDragGestureRecognizer_initialFirstTouch] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC6Charts26ChartDragGestureRecognizer_initialSecondTouch] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC6Charts26ChartDragGestureRecognizer_timer] = 0;
  sub_2141E070C(a1, (uint64_t)v18, &qword_254D69408);
  v9 = v19;
  if (v19)
  {
    v10 = sub_2141E88D0(v18, v19);
    v11 = *(_QWORD *)(v9 - 8);
    MEMORY[0x24BDAC7A8](v10);
    v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v11 + 16))(v13);
    v14 = sub_214425784();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v9);
    _s6Charts15AnyChartContentVwxx_0((uint64_t)v18);
  }
  else
  {
    v14 = 0;
  }
  v17.receiver = v3;
  v17.super_class = ObjectType;
  v15 = objc_msgSendSuper2(&v17, sel_initWithTarget_action_, v14, a2);
  swift_unknownObjectRelease();
  sub_2141E0750(a1, &qword_254D69408);
  return v15;
}

id sub_2141E4E08()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for ChartDragGestureRecognizer()
{
  return objc_opt_self();
}

uint64_t destroy for InteractionHandlingView()
{
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for InteractionHandlingView(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = v3;
  swift_retain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for InteractionHandlingView(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain();
  swift_release();
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *assignWithTake for InteractionHandlingView(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for InteractionHandlingView(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for InteractionHandlingView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for InteractionHandlingView()
{
  return &type metadata for InteractionHandlingView;
}

uint64_t destroy for ChartInternalOverlayListenerModifier(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  if ((*(_BYTE *)(result + 283) & 1) != 0)
  {
    if (*(unsigned __int8 *)(result + 40) != 255)
      result = _s6Charts15AnyChartContentVwxx_0(result);
    if (*(unsigned __int8 *)(v1 + 88) != 255)
      result = _s6Charts15AnyChartContentVwxx_0(v1 + 48);
    if (*(unsigned __int8 *)(v1 + 136) != 255)
      result = _s6Charts15AnyChartContentVwxx_0(v1 + 96);
    if (*(unsigned __int8 *)(v1 + 184) != 255)
      result = _s6Charts15AnyChartContentVwxx_0(v1 + 144);
    if (*(unsigned __int8 *)(v1 + 232) != 255)
      result = _s6Charts15AnyChartContentVwxx_0(v1 + 192);
    if (*(unsigned __int8 *)(v1 + 280) != 255)
      result = _s6Charts15AnyChartContentVwxx_0(v1 + 240);
    if (*(_QWORD *)(v1 + 288))
      goto LABEL_15;
  }
  else
  {
    result = swift_release();
    if (*(_QWORD *)(v1 + 288))
LABEL_15:
      result = swift_release();
  }
  if (*(_QWORD *)(v1 + 304))
    result = swift_release();
  if (*(_QWORD *)(v1 + 320))
    result = swift_release();
  if (*(_QWORD *)(v1 + 336))
    result = swift_release();
  if (*(_QWORD *)(v1 + 352))
    return swift_release();
  return result;
}

uint64_t initializeWithCopy for ChartInternalOverlayListenerModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _WORD *v5;
  int v6;
  __int128 v7;
  __int128 v8;
  _OWORD *v9;
  _OWORD *v10;
  int v11;
  __int128 v12;
  __int128 v13;
  _OWORD *v14;
  _OWORD *v15;
  int v16;
  __int128 v17;
  __int128 v18;
  _OWORD *v19;
  _OWORD *v20;
  int v21;
  __int128 v22;
  __int128 v23;
  _OWORD *v24;
  _OWORD *v25;
  int v26;
  __int128 v27;
  __int128 v28;
  _OWORD *v29;
  _OWORD *v30;
  int v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v4 = a1 + 280;
  v5 = (_WORD *)(a2 + 281);
  if ((*(_BYTE *)(a2 + 283) & 1) != 0)
  {
    v6 = *(unsigned __int8 *)(a2 + 40);
    if (v6 == 255)
    {
      v7 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v7;
      *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
    }
    else
    {
      v8 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v8;
      if ((v6 & 1) != 0)
      {
        (**(void (***)(uint64_t, uint64_t))(v8 - 8))(a1, a2);
        *(_BYTE *)(a1 + 40) = 1;
      }
      else
      {
        (**(void (***)(uint64_t, uint64_t))(v8 - 8))(a1, a2);
        *(_BYTE *)(a1 + 40) = 0;
      }
    }
    v9 = (_OWORD *)(a1 + 48);
    v10 = (_OWORD *)(a2 + 48);
    v11 = *(unsigned __int8 *)(a2 + 88);
    if (v11 == 255)
    {
      v12 = *(_OWORD *)(a2 + 64);
      *v9 = *v10;
      *(_OWORD *)(a1 + 64) = v12;
      *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 + 73);
    }
    else
    {
      v13 = *(_OWORD *)(a2 + 72);
      *(_OWORD *)(a1 + 72) = v13;
      (**(void (***)(_OWORD *, _OWORD *))(v13 - 8))(v9, v10);
      *(_BYTE *)(a1 + 88) = (v11 & 1) != 0;
    }
    v14 = (_OWORD *)(a1 + 96);
    v15 = (_OWORD *)(a2 + 96);
    v16 = *(unsigned __int8 *)(a2 + 136);
    if (v16 == 255)
    {
      v17 = *(_OWORD *)(a2 + 112);
      *v14 = *v15;
      *(_OWORD *)(a1 + 112) = v17;
      *(_OWORD *)(a1 + 121) = *(_OWORD *)(a2 + 121);
    }
    else
    {
      v18 = *(_OWORD *)(a2 + 120);
      *(_OWORD *)(a1 + 120) = v18;
      (**(void (***)(_OWORD *, _OWORD *))(v18 - 8))(v14, v15);
      *(_BYTE *)(a1 + 136) = (v16 & 1) != 0;
    }
    v19 = (_OWORD *)(a1 + 144);
    v20 = (_OWORD *)(a2 + 144);
    v21 = *(unsigned __int8 *)(a2 + 184);
    if (v21 == 255)
    {
      v22 = *(_OWORD *)(a2 + 160);
      *v19 = *v20;
      *(_OWORD *)(a1 + 160) = v22;
      *(_OWORD *)(a1 + 169) = *(_OWORD *)(a2 + 169);
    }
    else
    {
      v23 = *(_OWORD *)(a2 + 168);
      *(_OWORD *)(a1 + 168) = v23;
      (**(void (***)(_OWORD *, _OWORD *))(v23 - 8))(v19, v20);
      *(_BYTE *)(a1 + 184) = (v21 & 1) != 0;
    }
    v24 = (_OWORD *)(a1 + 192);
    v25 = (_OWORD *)(a2 + 192);
    v26 = *(unsigned __int8 *)(a2 + 232);
    if (v26 == 255)
    {
      v27 = *(_OWORD *)(a2 + 208);
      *v24 = *v25;
      *(_OWORD *)(a1 + 208) = v27;
      *(_OWORD *)(a1 + 217) = *(_OWORD *)(a2 + 217);
    }
    else
    {
      v28 = *(_OWORD *)(a2 + 216);
      *(_OWORD *)(a1 + 216) = v28;
      (**(void (***)(_OWORD *, _OWORD *))(v28 - 8))(v24, v25);
      *(_BYTE *)(a1 + 232) = (v26 & 1) != 0;
    }
    v29 = (_OWORD *)(a1 + 240);
    v30 = (_OWORD *)(a2 + 240);
    v31 = *(unsigned __int8 *)(a2 + 280);
    if (v31 == 255)
    {
      v32 = *(_OWORD *)(a2 + 256);
      *v29 = *v30;
      *(_OWORD *)(a1 + 256) = v32;
      *(_OWORD *)(a1 + 265) = *(_OWORD *)(a2 + 265);
    }
    else
    {
      v33 = *(_QWORD *)(a2 + 264);
      v34 = *(_QWORD *)(a2 + 272);
      *(_QWORD *)(a1 + 264) = v33;
      *(_QWORD *)(a1 + 272) = v34;
      (**(void (***)(_OWORD *, _OWORD *))(v33 - 8))(v29, v30);
      *(_BYTE *)v4 = (v31 & 1) != 0;
    }
    *(_WORD *)(v4 + 1) = *v5;
    *(_BYTE *)(v4 + 3) = 1;
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_BYTE *)(a1 + 283) = 0;
    swift_retain();
  }
  *(_BYTE *)(a1 + 284) = *(_BYTE *)(a2 + 284);
  v35 = *(_QWORD *)(a2 + 288);
  if (v35)
  {
    v36 = *(_QWORD *)(a2 + 296);
    *(_QWORD *)(a1 + 288) = v35;
    *(_QWORD *)(a1 + 296) = v36;
    swift_retain();
    v37 = *(_QWORD *)(a2 + 304);
    if (v37)
      goto LABEL_36;
  }
  else
  {
    *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
    v37 = *(_QWORD *)(a2 + 304);
    if (v37)
    {
LABEL_36:
      v38 = *(_QWORD *)(a2 + 312);
      *(_QWORD *)(a1 + 304) = v37;
      *(_QWORD *)(a1 + 312) = v38;
      swift_retain();
      v39 = *(_QWORD *)(a2 + 320);
      if (v39)
        goto LABEL_37;
      goto LABEL_42;
    }
  }
  *(_OWORD *)(a1 + 304) = *(_OWORD *)(a2 + 304);
  v39 = *(_QWORD *)(a2 + 320);
  if (v39)
  {
LABEL_37:
    v40 = *(_QWORD *)(a2 + 328);
    *(_QWORD *)(a1 + 320) = v39;
    *(_QWORD *)(a1 + 328) = v40;
    swift_retain();
    v41 = *(_QWORD *)(a2 + 336);
    if (v41)
      goto LABEL_38;
LABEL_43:
    *(_OWORD *)(a1 + 336) = *(_OWORD *)(a2 + 336);
    v43 = *(_QWORD *)(a2 + 352);
    if (v43)
      goto LABEL_39;
LABEL_44:
    *(_OWORD *)(a1 + 352) = *(_OWORD *)(a2 + 352);
    return a1;
  }
LABEL_42:
  *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
  v41 = *(_QWORD *)(a2 + 336);
  if (!v41)
    goto LABEL_43;
LABEL_38:
  v42 = *(_QWORD *)(a2 + 344);
  *(_QWORD *)(a1 + 336) = v41;
  *(_QWORD *)(a1 + 344) = v42;
  swift_retain();
  v43 = *(_QWORD *)(a2 + 352);
  if (!v43)
    goto LABEL_44;
LABEL_39:
  v44 = *(_QWORD *)(a2 + 360);
  *(_QWORD *)(a1 + 352) = v43;
  *(_QWORD *)(a1 + 360) = v44;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ChartInternalOverlayListenerModifier(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  BOOL *v5;
  int v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  _OWORD *v10;
  __int128 *v11;
  int v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  _OWORD *v16;
  __int128 *v17;
  int v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  _OWORD *v22;
  __int128 *v23;
  int v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  _OWORD *v28;
  __int128 *v29;
  int v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  _OWORD *v34;
  __int128 *v35;
  int v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v4 = (uint64_t)a2 + 281;
  if ((__int128 *)a1 != a2)
  {
    v5 = (BOOL *)(a1 + 280);
    sub_2141E0750(a1, &qword_253F15AE8);
    if ((*(_BYTE *)(v4 + 2) & 1) != 0)
    {
      v6 = *((unsigned __int8 *)a2 + 40);
      if (v6 == 255)
      {
        v7 = *a2;
        v8 = a2[1];
        *(_OWORD *)(a1 + 25) = *(__int128 *)((char *)a2 + 25);
        *(_OWORD *)a1 = v7;
        *(_OWORD *)(a1 + 16) = v8;
      }
      else
      {
        v9 = *((_QWORD *)a2 + 3);
        *(_QWORD *)(a1 + 24) = v9;
        *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
        if ((v6 & 1) != 0)
        {
          (**(void (***)(uint64_t, __int128 *))(v9 - 8))(a1, a2);
          *(_BYTE *)(a1 + 40) = 1;
        }
        else
        {
          (**(void (***)(uint64_t, __int128 *))(v9 - 8))(a1, a2);
          *(_BYTE *)(a1 + 40) = 0;
        }
      }
      v10 = (_OWORD *)(a1 + 48);
      v11 = a2 + 3;
      v12 = *((unsigned __int8 *)a2 + 88);
      if (v12 == 255)
      {
        v13 = *v11;
        v14 = a2[4];
        *(_OWORD *)(a1 + 73) = *(__int128 *)((char *)a2 + 73);
        *v10 = v13;
        *(_OWORD *)(a1 + 64) = v14;
      }
      else
      {
        v15 = *((_QWORD *)a2 + 9);
        *(_QWORD *)(a1 + 72) = v15;
        *(_QWORD *)(a1 + 80) = *((_QWORD *)a2 + 10);
        (**(void (***)(_OWORD *, __int128 *))(v15 - 8))(v10, v11);
        *(_BYTE *)(a1 + 88) = (v12 & 1) != 0;
      }
      v16 = (_OWORD *)(a1 + 96);
      v17 = a2 + 6;
      v18 = *((unsigned __int8 *)a2 + 136);
      if (v18 == 255)
      {
        v19 = *v17;
        v20 = a2[7];
        *(_OWORD *)(a1 + 121) = *(__int128 *)((char *)a2 + 121);
        *v16 = v19;
        *(_OWORD *)(a1 + 112) = v20;
      }
      else
      {
        v21 = *((_QWORD *)a2 + 15);
        *(_QWORD *)(a1 + 120) = v21;
        *(_QWORD *)(a1 + 128) = *((_QWORD *)a2 + 16);
        (**(void (***)(_OWORD *, __int128 *))(v21 - 8))(v16, v17);
        *(_BYTE *)(a1 + 136) = (v18 & 1) != 0;
      }
      v22 = (_OWORD *)(a1 + 144);
      v23 = a2 + 9;
      v24 = *((unsigned __int8 *)a2 + 184);
      if (v24 == 255)
      {
        v25 = *v23;
        v26 = a2[10];
        *(_OWORD *)(a1 + 169) = *(__int128 *)((char *)a2 + 169);
        *v22 = v25;
        *(_OWORD *)(a1 + 160) = v26;
      }
      else
      {
        v27 = *((_QWORD *)a2 + 21);
        *(_QWORD *)(a1 + 168) = v27;
        *(_QWORD *)(a1 + 176) = *((_QWORD *)a2 + 22);
        (**(void (***)(_OWORD *, __int128 *))(v27 - 8))(v22, v23);
        *(_BYTE *)(a1 + 184) = (v24 & 1) != 0;
      }
      v28 = (_OWORD *)(a1 + 192);
      v29 = a2 + 12;
      v30 = *((unsigned __int8 *)a2 + 232);
      if (v30 == 255)
      {
        v31 = *v29;
        v32 = a2[13];
        *(_OWORD *)(a1 + 217) = *(__int128 *)((char *)a2 + 217);
        *v28 = v31;
        *(_OWORD *)(a1 + 208) = v32;
      }
      else
      {
        v33 = *((_QWORD *)a2 + 27);
        *(_QWORD *)(a1 + 216) = v33;
        *(_QWORD *)(a1 + 224) = *((_QWORD *)a2 + 28);
        (**(void (***)(_OWORD *, __int128 *))(v33 - 8))(v28, v29);
        *(_BYTE *)(a1 + 232) = (v30 & 1) != 0;
      }
      v34 = (_OWORD *)(a1 + 240);
      v35 = a2 + 15;
      v36 = *((unsigned __int8 *)a2 + 280);
      if (v36 == 255)
      {
        v37 = *v35;
        v38 = a2[16];
        *(_OWORD *)(a1 + 265) = *(__int128 *)((char *)a2 + 265);
        *v34 = v37;
        *(_OWORD *)(a1 + 256) = v38;
      }
      else
      {
        v39 = *((_QWORD *)a2 + 33);
        *(_QWORD *)(a1 + 264) = v39;
        *(_QWORD *)(a1 + 272) = *((_QWORD *)a2 + 34);
        (**(void (***)(_OWORD *, __int128 *))(v39 - 8))(v34, v35);
        *v5 = (v36 & 1) != 0;
      }
      *(_WORD *)(a1 + 281) = *(_WORD *)v4;
      *(_BYTE *)(a1 + 283) = 1;
    }
    else
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_BYTE *)(a1 + 283) = 0;
      swift_retain();
    }
  }
  *(_BYTE *)(a1 + 284) = *(_BYTE *)(v4 + 3);
  v40 = *((_QWORD *)a2 + 36);
  if (*(_QWORD *)(a1 + 288))
  {
    if (v40)
    {
      v41 = *((_QWORD *)a2 + 37);
      *(_QWORD *)(a1 + 288) = v40;
      *(_QWORD *)(a1 + 296) = v41;
      swift_retain();
      swift_release();
      goto LABEL_42;
    }
    swift_release();
  }
  else if (v40)
  {
    v42 = *((_QWORD *)a2 + 37);
    *(_QWORD *)(a1 + 288) = v40;
    *(_QWORD *)(a1 + 296) = v42;
    swift_retain();
    goto LABEL_42;
  }
  *(_OWORD *)(a1 + 288) = a2[18];
LABEL_42:
  v43 = *((_QWORD *)a2 + 38);
  if (*(_QWORD *)(a1 + 304))
  {
    if (v43)
    {
      v44 = *((_QWORD *)a2 + 39);
      *(_QWORD *)(a1 + 304) = v43;
      *(_QWORD *)(a1 + 312) = v44;
      swift_retain();
      swift_release();
      goto LABEL_49;
    }
    swift_release();
  }
  else if (v43)
  {
    v45 = *((_QWORD *)a2 + 39);
    *(_QWORD *)(a1 + 304) = v43;
    *(_QWORD *)(a1 + 312) = v45;
    swift_retain();
    goto LABEL_49;
  }
  *(_OWORD *)(a1 + 304) = a2[19];
LABEL_49:
  v46 = *((_QWORD *)a2 + 40);
  if (*(_QWORD *)(a1 + 320))
  {
    if (v46)
    {
      v47 = *((_QWORD *)a2 + 41);
      *(_QWORD *)(a1 + 320) = v46;
      *(_QWORD *)(a1 + 328) = v47;
      swift_retain();
      swift_release();
      goto LABEL_56;
    }
    swift_release();
  }
  else if (v46)
  {
    v48 = *((_QWORD *)a2 + 41);
    *(_QWORD *)(a1 + 320) = v46;
    *(_QWORD *)(a1 + 328) = v48;
    swift_retain();
    goto LABEL_56;
  }
  *(_OWORD *)(a1 + 320) = a2[20];
LABEL_56:
  v49 = *((_QWORD *)a2 + 42);
  if (*(_QWORD *)(a1 + 336))
  {
    if (v49)
    {
      v50 = *((_QWORD *)a2 + 43);
      *(_QWORD *)(a1 + 336) = v49;
      *(_QWORD *)(a1 + 344) = v50;
      swift_retain();
      swift_release();
      goto LABEL_63;
    }
    swift_release();
  }
  else if (v49)
  {
    v51 = *((_QWORD *)a2 + 43);
    *(_QWORD *)(a1 + 336) = v49;
    *(_QWORD *)(a1 + 344) = v51;
    swift_retain();
    goto LABEL_63;
  }
  *(_OWORD *)(a1 + 336) = a2[21];
LABEL_63:
  v52 = *((_QWORD *)a2 + 44);
  if (!*(_QWORD *)(a1 + 352))
  {
    if (v52)
    {
      v54 = *((_QWORD *)a2 + 45);
      *(_QWORD *)(a1 + 352) = v52;
      *(_QWORD *)(a1 + 360) = v54;
      swift_retain();
      return a1;
    }
LABEL_69:
    *(_OWORD *)(a1 + 352) = a2[22];
    return a1;
  }
  if (!v52)
  {
    swift_release();
    goto LABEL_69;
  }
  v53 = *((_QWORD *)a2 + 45);
  *(_QWORD *)(a1 + 352) = v52;
  *(_QWORD *)(a1 + 360) = v53;
  swift_retain();
  swift_release();
  return a1;
}

void *initializeWithTake for ChartInternalOverlayListenerModifier(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x170uLL);
}

uint64_t assignWithTake for ChartInternalOverlayListenerModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 != a2)
  {
    sub_2141E0750(a1, &qword_253F15AE8);
    memcpy((void *)a1, (const void *)a2, 0x11CuLL);
  }
  *(_BYTE *)(a1 + 284) = *(_BYTE *)(a2 + 284);
  v4 = *(_QWORD *)(a2 + 288);
  if (*(_QWORD *)(a1 + 288))
  {
    if (v4)
    {
      v5 = *(_QWORD *)(a2 + 296);
      *(_QWORD *)(a1 + 288) = v4;
      *(_QWORD *)(a1 + 296) = v5;
      swift_release();
      goto LABEL_10;
    }
    swift_release();
  }
  else if (v4)
  {
    v6 = *(_QWORD *)(a2 + 296);
    *(_QWORD *)(a1 + 288) = v4;
    *(_QWORD *)(a1 + 296) = v6;
    goto LABEL_10;
  }
  *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
LABEL_10:
  v7 = *(_QWORD *)(a2 + 304);
  if (*(_QWORD *)(a1 + 304))
  {
    if (v7)
    {
      v8 = *(_QWORD *)(a2 + 312);
      *(_QWORD *)(a1 + 304) = v7;
      *(_QWORD *)(a1 + 312) = v8;
      swift_release();
      goto LABEL_17;
    }
    swift_release();
  }
  else if (v7)
  {
    v9 = *(_QWORD *)(a2 + 312);
    *(_QWORD *)(a1 + 304) = v7;
    *(_QWORD *)(a1 + 312) = v9;
    goto LABEL_17;
  }
  *(_OWORD *)(a1 + 304) = *(_OWORD *)(a2 + 304);
LABEL_17:
  v10 = *(_QWORD *)(a2 + 320);
  if (*(_QWORD *)(a1 + 320))
  {
    if (v10)
    {
      v11 = *(_QWORD *)(a2 + 328);
      *(_QWORD *)(a1 + 320) = v10;
      *(_QWORD *)(a1 + 328) = v11;
      swift_release();
      goto LABEL_24;
    }
    swift_release();
  }
  else if (v10)
  {
    v12 = *(_QWORD *)(a2 + 328);
    *(_QWORD *)(a1 + 320) = v10;
    *(_QWORD *)(a1 + 328) = v12;
    goto LABEL_24;
  }
  *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
LABEL_24:
  v13 = *(_QWORD *)(a2 + 336);
  if (*(_QWORD *)(a1 + 336))
  {
    if (v13)
    {
      v14 = *(_QWORD *)(a2 + 344);
      *(_QWORD *)(a1 + 336) = v13;
      *(_QWORD *)(a1 + 344) = v14;
      swift_release();
      goto LABEL_31;
    }
    swift_release();
  }
  else if (v13)
  {
    v15 = *(_QWORD *)(a2 + 344);
    *(_QWORD *)(a1 + 336) = v13;
    *(_QWORD *)(a1 + 344) = v15;
    goto LABEL_31;
  }
  *(_OWORD *)(a1 + 336) = *(_OWORD *)(a2 + 336);
LABEL_31:
  v16 = *(_QWORD *)(a2 + 352);
  if (!*(_QWORD *)(a1 + 352))
  {
    if (v16)
    {
      v18 = *(_QWORD *)(a2 + 360);
      *(_QWORD *)(a1 + 352) = v16;
      *(_QWORD *)(a1 + 360) = v18;
      return a1;
    }
LABEL_37:
    *(_OWORD *)(a1 + 352) = *(_OWORD *)(a2 + 352);
    return a1;
  }
  if (!v16)
  {
    swift_release();
    goto LABEL_37;
  }
  v17 = *(_QWORD *)(a2 + 360);
  *(_QWORD *)(a1 + 352) = v16;
  *(_QWORD *)(a1 + 360) = v17;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ChartInternalOverlayListenerModifier(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 368))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 288);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ChartInternalOverlayListenerModifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 360) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 368) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 368) = 0;
    if (a2)
      *(_QWORD *)(result + 288) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ChartInternalOverlayListenerModifier()
{
  return &type metadata for ChartInternalOverlayListenerModifier;
}

uint64_t sub_2141E5C24()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_2141E5C34()
{
  return MEMORY[0x24BDF5560];
}

unint64_t sub_2141E5C44()
{
  unint64_t result;

  result = qword_254D693D0;
  if (!qword_254D693D0)
  {
    result = MEMORY[0x2199CD934](&unk_2144272E8, &type metadata for InteractionHandlingView);
    atomic_store(result, (unint64_t *)&qword_254D693D0);
  }
  return result;
}

unint64_t sub_2141E5C88()
{
  unint64_t result;

  result = qword_254D693D8;
  if (!qword_254D693D8)
  {
    result = MEMORY[0x2199CD934](&unk_214427338, &type metadata for InteractionHandlingView);
    atomic_store(result, (unint64_t *)&qword_254D693D8);
  }
  return result;
}

uint64_t sub_2141E5CD0(uint64_t a1)
{
  return sub_2141E5D58(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141E2DBC);
}

uint64_t sub_2141E5CE0()
{
  _QWORD *v0;

  if (v0[2])
    swift_release();
  if (v0[4])
    swift_release();
  if (v0[6])
    swift_release();
  if (v0[8])
    swift_release();
  if (v0[10])
    swift_release();
  return swift_deallocObject();
}

uint64_t sub_2141E5D4C(uint64_t a1)
{
  return sub_2141E5D58(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141E301C);
}

uint64_t sub_2141E5D58(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v2;

  return a2(a1, v2[2], v2[3], v2[4], v2[5], v2[6], v2[7], v2[8], v2[9], v2[10], v2[11]);
}

unint64_t sub_2141E5D98()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_253F13220;
  if (!qword_253F13220)
  {
    v1 = sub_2141D7924(&qword_253F13230);
    v2[0] = sub_2141D9054(&qword_253F15BC8, &qword_253F15BD0, MEMORY[0x24BDEFB78]);
    v2[1] = sub_2141D9054(&qword_253F13258, &qword_253F13260, MEMORY[0x24BDEDC10]);
    result = MEMORY[0x2199CD934](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&qword_253F13220);
  }
  return result;
}

uint64_t sub_2141E5E34(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for ChartInternalOverlayListenerModifier(a2, a1);
  return a2;
}

uint64_t sub_2141E5E6C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_2141E2C04(a1, a2, *(void (**)(unsigned __int128 *__return_ptr, _QWORD, _QWORD, _QWORD, _QWORD))(v2 + 16));
}

uint64_t sub_2141E5E78()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2141E5EA4()
{
  uint64_t v0;

  swift_release();
  if ((*(_BYTE *)(v0 + 315) & 1) != 0)
  {
    if (*(unsigned __int8 *)(v0 + 72) != 255)
      _s6Charts15AnyChartContentVwxx_0(v0 + 32);
    if (*(unsigned __int8 *)(v0 + 120) != 255)
      _s6Charts15AnyChartContentVwxx_0(v0 + 80);
    if (*(unsigned __int8 *)(v0 + 168) != 255)
      _s6Charts15AnyChartContentVwxx_0(v0 + 128);
    if (*(unsigned __int8 *)(v0 + 216) != 255)
      _s6Charts15AnyChartContentVwxx_0(v0 + 176);
    if (*(unsigned __int8 *)(v0 + 264) != 255)
      _s6Charts15AnyChartContentVwxx_0(v0 + 224);
    if (*(unsigned __int8 *)(v0 + 312) != 255)
      _s6Charts15AnyChartContentVwxx_0(v0 + 272);
    if (*(_QWORD *)(v0 + 320))
      goto LABEL_15;
  }
  else
  {
    swift_release();
    if (*(_QWORD *)(v0 + 320))
LABEL_15:
      swift_release();
  }
  if (*(_QWORD *)(v0 + 336))
    swift_release();
  if (*(_QWORD *)(v0 + 352))
    swift_release();
  if (*(_QWORD *)(v0 + 368))
    swift_release();
  if (*(_QWORD *)(v0 + 384))
    swift_release();
  return swift_deallocObject();
}

uint64_t sub_2141E5FAC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_2141E2A50(a1, a2, *(void (**)(unsigned __int128 *__return_ptr, _QWORD, _QWORD, _QWORD, _QWORD))(v2 + 16));
}

uint64_t sub_2141E5FB8(uint64_t a1, char a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t (*v5)(uint64_t *, uint64_t *);
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;

  v5 = *(uint64_t (**)(uint64_t *, uint64_t *))(v4 + 16);
  v9 = a1;
  v10 = a2 & 1;
  v7 = a3;
  v8 = a4 & 1;
  return v5(&v9, &v7);
}

uint64_t sub_2141E6004(uint64_t a1)
{
  uint64_t v1;

  return sub_2141E2958(a1, *(uint64_t (**)(_QWORD, _QWORD))(v1 + 16));
}

uint64_t sub_2141E6018(uint64_t a1)
{
  uint64_t v1;

  return sub_2141E286C(a1, *(uint64_t (**)(_QWORD, _QWORD))(v1 + 16));
}

uint64_t sub_2141E6024(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t *);
  uint64_t v5;
  char v6;

  v3 = *(uint64_t (**)(uint64_t *))(v2 + 16);
  v5 = a1;
  v6 = a2 & 1;
  return v3(&v5);
}

uint64_t sub_2141E6060(uint64_t a1)
{
  uint64_t v1;

  return sub_2141E2748(a1, *(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v1 + 16));
}

uint64_t sub_2141E606C(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t (*v4)(_QWORD *);
  _QWORD v6[2];
  char v7;

  v4 = *(uint64_t (**)(_QWORD *))(v3 + 16);
  v6[0] = a1;
  v6[1] = a2;
  v7 = a3 & 1;
  return v4(v6);
}

uint64_t sub_2141E60A4(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 != -1)
    return sub_2141E60B8(a1, a2, a3);
  return a1;
}

uint64_t sub_2141E60B8(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if (a3 == 2)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t sub_2141E60D0(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for ChartSelectionAxisConfiguration(a2, a1);
  return a2;
}

uint64_t sub_2141E610C(uint64_t a1)
{
  destroy for ChartSelectionConfiguration(a1);
  return a1;
}

uint64_t sub_2141E6140(uint64_t a1)
{
  destroy for ChartSelectionAxisConfiguration(a1);
  return a1;
}

uint64_t sub_2141E6174(uint64_t a1, uint64_t a2)
{
  initializeWithTake for AxisMarksContentStorage(a2, a1);
  return a2;
}

uint64_t sub_2141E61B0(uint64_t a1)
{
  destroy for AnyChartContent();
  return a1;
}

uint64_t sub_2141E61E4(uint64_t a1, uint64_t a2)
{
  initializeWithTake for AxisMarksContentStorage(a2, a1);
  return a2;
}

uint64_t sub_2141E6220(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for AnyPrimitivePlottableRangeBinding(a2, a1);
  return a2;
}

uint64_t sub_2141E625C(uint64_t a1)
{
  destroy for AnyChartContent();
  return a1;
}

void sub_2141E6290(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t sub_2141E6298@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  sub_2143F8874();
  swift_beginAccess();
  v4 = *(_QWORD *)(a1 + 40);
  if (v4)
  {
    v5 = *(_QWORD *)(a1 + 48);
    *a2 = v4;
    a2[1] = v5;
    return swift_retain();
  }
  else
  {
    result = sub_214425628();
    __break(1u);
  }
  return result;
}

uint64_t sub_2141E6338(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  char v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  char v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  char v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  char v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  char v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  _QWORD *v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  __int128 v88;
  __int128 v89;
  uint64_t v90;
  unint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  char v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  char v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  char v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  _QWORD *v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  char v126;
  unint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  _QWORD *v131;
  char v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  void *v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  void *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  void *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  void *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  void *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t result;
  _QWORD *v172;
  _QWORD *v173;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  _QWORD *v182;
  _QWORD *v183;
  _QWORD *v184;
  uint64_t v185;
  unint64_t v186;
  unint64_t v187;
  unint64_t v188;
  unint64_t v189;
  unint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  int64_t v198;
  _QWORD v199[2];
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  char v205;
  _BYTE v206[48];
  _BYTE v207[32];
  unint64_t v208;
  char v209;
  char v210;
  char v211[64];

  v5 = *(_QWORD *)(a1 + 72);
  v197 = v5 + 64;
  v6 = 1 << *(_BYTE *)(v5 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(v5 + 64);
  v198 = (unint64_t)(v6 + 63) >> 6;
  swift_bridgeObjectRetain();
  v177 = 0;
  v179 = 0;
  v180 = 0;
  v195 = 0;
  v196 = 0;
  v9 = 0;
  v178 = a2;
  while (v8)
  {
    v11 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    v12 = v11 | (v9 << 6);
LABEL_25:
    v16 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 48) + v12);
    if (v16 <= 1)
    {
      if (!*(_QWORD *)(v5 + 16))
        goto LABEL_181;
      v17 = sub_214336B74(v16);
      if ((v18 & 1) == 0)
        goto LABEL_181;
      v19 = *(_QWORD *)(v5 + 56) + 88 * v17;
      v20 = *(_OWORD *)(v19 + 16);
      v200 = *(_OWORD *)v19;
      v201 = v20;
      v22 = *(_OWORD *)(v19 + 48);
      v21 = *(_OWORD *)(v19 + 64);
      v23 = *(_OWORD *)(v19 + 32);
      v205 = *(_BYTE *)(v19 + 80);
      v203 = v22;
      v204 = v21;
      v202 = v23;
      if (*(_QWORD *)(a2 + 16))
      {
        sub_214336B74(v16);
        if ((v24 & 1) != 0)
        {
          sub_2141E7D60((uint64_t)&v201, (uint64_t)v206);
          sub_2141E7D60((uint64_t)v206, (uint64_t)v207);
          v25 = (v208 >> 61) & 3;
          if (!(_DWORD)v25)
          {
            v26 = &v209;
            goto LABEL_34;
          }
          if ((_DWORD)v25 == 1)
          {
            v26 = &v210;
LABEL_34:
            v208 &= 0x9FFFFFFFFFFFFFFFLL;
            sub_2141E801C((uint64_t)v207, (uint64_t)v26, &qword_253F15558);
            sub_2141D8BF8(&qword_253F15800);
            v27 = swift_dynamicCastClass();
            if (v27)
            {
              v28 = v27;
              if (!v16 && (*(_BYTE *)(a1 + 24) & 1) != 0)
              {
                sub_2141D8BF8(&qword_253F15D58);
                v73 = swift_allocObject();
                *(_OWORD *)(v73 + 16) = xmmword_2144271F0;
                *(_QWORD *)(v73 + 32) = v28;
                *(_QWORD *)(v73 + 40) = a3;
                *(_QWORD *)(v73 + 48) = a4;
                v199[0] = v73;
                sub_214424FF8();
                v74 = v199[0];
                v75 = (_QWORD *)swift_allocObject();
                v75[2] = sub_2141E1118;
                v75[3] = 0;
                v75[4] = v28;
                v75[5] = a3;
                v76 = v74;
                v75[6] = a4;
                sub_2141D8BF8(&qword_254D693F0);
                v77 = swift_allocObject();
                *(_WORD *)(v77 + 16) = 256;
                *(_OWORD *)(v77 + 40) = 0u;
                *(_OWORD *)(v77 + 56) = 0u;
                v78 = MEMORY[0x24BEE4AF8];
                *(_QWORD *)(v77 + 24) = v74;
                *(_QWORD *)(v77 + 32) = v78;
                v194 = v77;
                if (v74 >> 62)
                {
                  swift_retain_n();
                  swift_retain_n();
                  swift_retain_n();
                  sub_2141E7E18((uint64_t)&v200, (void (*)(uint64_t, unint64_t, unint64_t))sub_2141E7DC4, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7DF0, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7DD4);
                  swift_bridgeObjectRetain();
                  v79 = sub_2144256AC();
                  if (!v79)
                    goto LABEL_148;
LABEL_83:
                  if (v79 < 1)
                    goto LABEL_179;
                  v80 = v79;
                  v183 = v75;
                  v188 = v76;
                  if ((v76 & 0xC000000000000001) != 0)
                  {
                    v81 = 0;
                    do
                    {
                      v82 = MEMORY[0x2199CCE3C](v81, v76);
                      swift_weakInit();
                      v83 = *(_QWORD **)(v82 + 32);
                      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                      *(_QWORD *)(v82 + 32) = v83;
                      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                      {
                        v83 = sub_214221F04(0, v83[2] + 1, 1, v83);
                        *(_QWORD *)(v82 + 32) = v83;
                      }
                      v86 = v83[2];
                      v85 = v83[3];
                      if (v86 >= v85 >> 1)
                      {
                        v83 = sub_214221F04((_QWORD *)(v85 > 1), v86 + 1, 1, v83);
                        *(_QWORD *)(v82 + 32) = v83;
                      }
                      ++v81;
                      v83[2] = v86 + 1;
                      sub_2141E801C((uint64_t)v199, (uint64_t)&v83[v86 + 4], &qword_253F13188);
                      swift_unknownObjectRelease();
                      a2 = v178;
                      v76 = v188;
                    }
                    while (v80 != v81);
                    swift_bridgeObjectRelease();
                    v75 = v183;
                  }
                  else
                  {
                    v102 = 0;
                    do
                    {
                      v103 = *(_QWORD *)(v76 + 8 * v102 + 32);
                      swift_weakInit();
                      v104 = *(_QWORD **)(v103 + 32);
                      swift_retain();
                      v105 = swift_isUniquelyReferenced_nonNull_native();
                      *(_QWORD *)(v103 + 32) = v104;
                      if ((v105 & 1) == 0)
                      {
                        v104 = sub_214221F04(0, v104[2] + 1, 1, v104);
                        *(_QWORD *)(v103 + 32) = v104;
                      }
                      v107 = v104[2];
                      v106 = v104[3];
                      if (v107 >= v106 >> 1)
                      {
                        v104 = sub_214221F04((_QWORD *)(v106 > 1), v107 + 1, 1, v104);
                        *(_QWORD *)(v103 + 32) = v104;
                      }
                      ++v102;
                      v104[2] = v107 + 1;
                      sub_2141E801C((uint64_t)v199, (uint64_t)&v104[v107 + 4], &qword_253F13188);
                      swift_release();
                      v76 = v188;
                    }
                    while (v79 != v102);
                    swift_bridgeObjectRelease();
                    a2 = v178;
                    v75 = v183;
                  }
                }
                else
                {
                  v79 = *(_QWORD *)((v74 & 0xFFFFFFFFFFFFF8) + 0x10);
                  swift_retain_n();
                  swift_retain_n();
                  swift_retain_n();
                  sub_2141E7E18((uint64_t)&v200, (void (*)(uint64_t, unint64_t, unint64_t))sub_2141E7DC4, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7DF0, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7DD4);
                  swift_bridgeObjectRetain();
                  if (v79)
                    goto LABEL_83;
LABEL_148:
                  swift_bridgeObjectRelease();
                }
                v141 = swift_allocObject();
                *(_QWORD *)(v141 + 16) = sub_2141E7DB8;
                *(_QWORD *)(v141 + 24) = v75;
                v142 = *(_QWORD *)(v194 + 56);
                *(_QWORD *)(v194 + 56) = sub_2141E9238;
                *(_QWORD *)(v194 + 64) = v141;
                sub_2141D972C(v142);
                goto LABEL_153;
              }
              v191 = swift_allocObject();
              *(_BYTE *)(v191 + 16) = v16;
              sub_2141D8BF8(&qword_253F15D58);
              v29 = swift_allocObject();
              *(_OWORD *)(v29 + 16) = xmmword_2144271F0;
              *(_QWORD *)(v29 + 32) = v28;
              *(_QWORD *)(v29 + 40) = a3;
              *(_QWORD *)(v29 + 48) = a4;
              v199[0] = v29;
              swift_retain();
              sub_214424FF8();
              v30 = v199[0];
              v31 = (_QWORD *)swift_allocObject();
              v31[2] = sub_2141E8070;
              v31[3] = v191;
              v31[4] = v28;
              v31[5] = a3;
              v31[6] = a4;
              sub_2141D8BF8((uint64_t *)&unk_254D693E0);
              v32 = swift_allocObject();
              *(_WORD *)(v32 + 16) = 256;
              *(_OWORD *)(v32 + 40) = 0u;
              *(_OWORD *)(v32 + 56) = 0u;
              v33 = MEMORY[0x24BEE4AF8];
              *(_QWORD *)(v32 + 24) = v30;
              *(_QWORD *)(v32 + 32) = v33;
              v186 = v30;
              v192 = v32;
              if (v30 >> 62)
              {
                swift_retain_n();
                swift_retain_n();
                swift_retain_n();
                sub_2141E7E18((uint64_t)&v200, (void (*)(uint64_t, unint64_t, unint64_t))sub_2141E7DC4, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7DF0, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7DD4);
                swift_bridgeObjectRetain();
                v34 = sub_2144256AC();
                a2 = v178;
                if (!v34)
                {
LABEL_118:
                  swift_bridgeObjectRelease();
                  goto LABEL_119;
                }
              }
              else
              {
                v34 = *(_QWORD *)((v30 & 0xFFFFFFFFFFFFF8) + 0x10);
                swift_retain_n();
                swift_retain_n();
                swift_retain_n();
                sub_2141E7E18((uint64_t)&v200, (void (*)(uint64_t, unint64_t, unint64_t))sub_2141E7DC4, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7DF0, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7DD4);
                swift_bridgeObjectRetain();
                a2 = v178;
                if (!v34)
                  goto LABEL_118;
              }
              if (v34 < 1)
                goto LABEL_176;
              v172 = v31;
              v181 = v34;
              if ((v30 & 0xC000000000000001) != 0)
              {
                v35 = 0;
                do
                {
                  v36 = MEMORY[0x2199CCE3C](v35, v30);
                  swift_weakInit();
                  v37 = *(_QWORD **)(v36 + 32);
                  v38 = swift_isUniquelyReferenced_nonNull_native();
                  *(_QWORD *)(v36 + 32) = v37;
                  if ((v38 & 1) == 0)
                  {
                    v37 = sub_214221F04(0, v37[2] + 1, 1, v37);
                    *(_QWORD *)(v36 + 32) = v37;
                  }
                  v40 = v37[2];
                  v39 = v37[3];
                  if (v40 >= v39 >> 1)
                  {
                    v37 = sub_214221F04((_QWORD *)(v39 > 1), v40 + 1, 1, v37);
                    *(_QWORD *)(v36 + 32) = v37;
                  }
                  ++v35;
                  v37[2] = v40 + 1;
                  sub_2141E801C((uint64_t)v199, (uint64_t)&v37[v40 + 4], &qword_253F13188);
                  swift_unknownObjectRelease();
                  v30 = v186;
                }
                while (v181 != v35);
              }
              else
              {
                v57 = 0;
                do
                {
                  v58 = *(_QWORD *)(v186 + 8 * v57 + 32);
                  swift_weakInit();
                  v59 = *(_QWORD **)(v58 + 32);
                  swift_retain();
                  v60 = swift_isUniquelyReferenced_nonNull_native();
                  *(_QWORD *)(v58 + 32) = v59;
                  if ((v60 & 1) == 0)
                  {
                    v59 = sub_214221F04(0, v59[2] + 1, 1, v59);
                    *(_QWORD *)(v58 + 32) = v59;
                  }
                  v62 = v59[2];
                  v61 = v59[3];
                  if (v62 >= v61 >> 1)
                  {
                    v59 = sub_214221F04((_QWORD *)(v61 > 1), v62 + 1, 1, v59);
                    *(_QWORD *)(v58 + 32) = v59;
                  }
                  ++v57;
                  v59[2] = v62 + 1;
                  sub_2141E801C((uint64_t)v199, (uint64_t)&v59[v62 + 4], &qword_253F13188);
                  swift_release();
                }
                while (v181 != v57);
              }
              swift_bridgeObjectRelease();
              a2 = v178;
              v31 = v172;
LABEL_119:
              v114 = swift_allocObject();
              *(_QWORD *)(v114 + 16) = sub_2141E7DB8;
              *(_QWORD *)(v114 + 24) = v31;
              v115 = *(_QWORD *)(v192 + 56);
              *(_QWORD *)(v192 + 56) = sub_2141E9234;
              *(_QWORD *)(v192 + 64) = v114;
              sub_2141D972C(v115);
              v116 = swift_allocObject();
              *(_BYTE *)(v116 + 16) = v16;
              v117 = swift_allocObject();
              *(_OWORD *)(v117 + 16) = xmmword_2144271F0;
              *(_QWORD *)(v117 + 32) = v28;
              *(_QWORD *)(v117 + 40) = a3;
              *(_QWORD *)(v117 + 48) = a4;
              v199[0] = v117;
              sub_214424FF8();
              v190 = v199[0];
              v118 = (_QWORD *)swift_allocObject();
              v118[2] = sub_2141E80AC;
              v118[3] = v116;
              v118[4] = v28;
              v118[5] = a3;
              v119 = v190;
              v118[6] = a4;
              sub_2141D8BF8((uint64_t *)&unk_254D693F8);
              v120 = swift_allocObject();
              *(_WORD *)(v120 + 16) = 256;
              *(_OWORD *)(v120 + 40) = 0u;
              *(_OWORD *)(v120 + 56) = 0u;
              v121 = MEMORY[0x24BEE4AF8];
              *(_QWORD *)(v120 + 24) = v190;
              *(_QWORD *)(v120 + 32) = v121;
              v185 = v120;
              if (v190 >> 62)
              {
                swift_retain_n();
                swift_retain_n();
                swift_bridgeObjectRetain();
                v119 = v190;
                v122 = sub_2144256AC();
                if (!v122)
                {
LABEL_138:
                  swift_bridgeObjectRelease();
                  goto LABEL_139;
                }
              }
              else
              {
                v122 = *(_QWORD *)((v190 & 0xFFFFFFFFFFFFF8) + 0x10);
                swift_retain_n();
                swift_retain_n();
                swift_bridgeObjectRetain();
                if (!v122)
                  goto LABEL_138;
              }
              if (v122 < 1)
                goto LABEL_177;
              v173 = v118;
              if ((v119 & 0xC000000000000001) != 0)
              {
                v123 = 0;
                do
                {
                  v124 = MEMORY[0x2199CCE3C](v123, v119);
                  swift_weakInit();
                  v125 = *(_QWORD **)(v124 + 32);
                  v126 = swift_isUniquelyReferenced_nonNull_native();
                  *(_QWORD *)(v124 + 32) = v125;
                  if ((v126 & 1) == 0)
                  {
                    v125 = sub_214221F04(0, v125[2] + 1, 1, v125);
                    *(_QWORD *)(v124 + 32) = v125;
                  }
                  v128 = v125[2];
                  v127 = v125[3];
                  if (v128 >= v127 >> 1)
                  {
                    v125 = sub_214221F04((_QWORD *)(v127 > 1), v128 + 1, 1, v125);
                    *(_QWORD *)(v124 + 32) = v125;
                  }
                  ++v123;
                  v125[2] = v128 + 1;
                  sub_2141E801C((uint64_t)v199, (uint64_t)&v125[v128 + 4], &qword_253F13188);
                  swift_unknownObjectRelease();
                  v119 = v190;
                }
                while (v122 != v123);
              }
              else
              {
                v129 = 0;
                do
                {
                  v130 = *(_QWORD *)(v119 + 8 * v129 + 32);
                  swift_weakInit();
                  v131 = *(_QWORD **)(v130 + 32);
                  swift_retain();
                  v132 = swift_isUniquelyReferenced_nonNull_native();
                  *(_QWORD *)(v130 + 32) = v131;
                  if ((v132 & 1) == 0)
                  {
                    v131 = sub_214221F04(0, v131[2] + 1, 1, v131);
                    *(_QWORD *)(v130 + 32) = v131;
                  }
                  v134 = v131[2];
                  v133 = v131[3];
                  if (v134 >= v133 >> 1)
                  {
                    v131 = sub_214221F04((_QWORD *)(v133 > 1), v134 + 1, 1, v131);
                    *(_QWORD *)(v130 + 32) = v131;
                  }
                  ++v129;
                  v131[2] = v134 + 1;
                  sub_2141E801C((uint64_t)v199, (uint64_t)&v131[v134 + 4], &qword_253F13188);
                  swift_release();
                  v119 = v190;
                }
                while (v122 != v129);
              }
              swift_bridgeObjectRelease();
              a2 = v178;
              v118 = v173;
LABEL_139:
              v135 = swift_allocObject();
              *(_QWORD *)(v135 + 16) = sub_2141E7DB8;
              *(_QWORD *)(v135 + 24) = v118;
              v136 = *(_QWORD *)(v185 + 56);
              *(_QWORD *)(v185 + 56) = sub_2141E8014;
              *(_QWORD *)(v185 + 64) = v135;
              sub_2141D972C(v136);
              sub_2141E7E18((uint64_t)&v200, (void (*)(uint64_t, unint64_t, unint64_t))sub_2141E7F20, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7F98, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7F7C);
              v138 = v179;
              v137 = v180;
              v139 = v195;
              v140 = v196;
              if (v16)
                v137 = v185;
              else
                v138 = v185;
              v179 = v138;
              v180 = v137;
              if (v16)
                v139 = v192;
              else
                v140 = v192;
              v195 = v139;
              v196 = v140;
              swift_release();
              swift_release();
            }
          }
          else
          {
            v208 &= 0x9FFFFFFFFFFFFFFFLL;
            sub_2141E801C((uint64_t)v207, (uint64_t)v211, &qword_253F0FF68);
            sub_2141D8BF8(&qword_253F10570);
            v10 = swift_dynamicCastClass();
            if (v10)
            {
              v41 = v10;
              if (!v16 && (*(_BYTE *)(a1 + 24) & 1) != 0)
              {
                v87 = swift_allocObject();
                v88 = v203;
                *(_OWORD *)(v87 + 48) = v202;
                *(_OWORD *)(v87 + 64) = v88;
                *(_OWORD *)(v87 + 80) = v204;
                *(_BYTE *)(v87 + 96) = v205;
                v89 = v201;
                *(_OWORD *)(v87 + 16) = v200;
                *(_OWORD *)(v87 + 32) = v89;
                sub_2141D8BF8(&qword_253F15D58);
                v90 = swift_allocObject();
                *(_OWORD *)(v90 + 16) = xmmword_2144271F0;
                *(_QWORD *)(v90 + 32) = v41;
                *(_QWORD *)(v90 + 40) = a3;
                *(_QWORD *)(v90 + 48) = a4;
                v199[0] = v90;
                sub_214424FF8();
                v91 = v199[0];
                v92 = (_QWORD *)swift_allocObject();
                v92[2] = sub_2141E8008;
                v92[3] = v87;
                v92[4] = v41;
                v92[5] = a3;
                v184 = v92;
                v92[6] = a4;
                sub_2141D8BF8(&qword_254D693F0);
                v93 = swift_allocObject();
                *(_WORD *)(v93 + 16) = 256;
                *(_OWORD *)(v93 + 40) = 0u;
                *(_OWORD *)(v93 + 56) = 0u;
                v94 = MEMORY[0x24BEE4AF8];
                *(_QWORD *)(v93 + 24) = v91;
                *(_QWORD *)(v93 + 32) = v94;
                v189 = v91;
                v194 = v93;
                if (v91 >> 62)
                {
                  swift_retain_n();
                  swift_retain();
                  swift_retain();
                  sub_2141E7E18((uint64_t)&v200, (void (*)(uint64_t, unint64_t, unint64_t))sub_2141E7DC4, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7DF0, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7DD4);
                  swift_retain();
                  swift_retain();
                  swift_retain();
                  sub_2141E7E18((uint64_t)&v200, (void (*)(uint64_t, unint64_t, unint64_t))sub_2141E7DC4, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7DF0, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7DD4);
                  swift_bridgeObjectRetain();
                  v95 = sub_2144256AC();
                  a2 = v178;
                  if (v95)
                  {
LABEL_94:
                    if (v95 < 1)
                      goto LABEL_180;
                    if ((v91 & 0xC000000000000001) != 0)
                    {
                      v96 = 0;
                      do
                      {
                        v97 = MEMORY[0x2199CCE3C](v96, v91);
                        swift_weakInit();
                        v98 = *(_QWORD **)(v97 + 32);
                        v99 = swift_isUniquelyReferenced_nonNull_native();
                        *(_QWORD *)(v97 + 32) = v98;
                        if ((v99 & 1) == 0)
                        {
                          v98 = sub_214221F04(0, v98[2] + 1, 1, v98);
                          *(_QWORD *)(v97 + 32) = v98;
                        }
                        v101 = v98[2];
                        v100 = v98[3];
                        if (v101 >= v100 >> 1)
                        {
                          v98 = sub_214221F04((_QWORD *)(v100 > 1), v101 + 1, 1, v98);
                          *(_QWORD *)(v97 + 32) = v98;
                        }
                        ++v96;
                        v98[2] = v101 + 1;
                        sub_2141E801C((uint64_t)v199, (uint64_t)&v98[v101 + 4], &qword_253F13188);
                        swift_unknownObjectRelease();
                        v91 = v189;
                      }
                      while (v95 != v96);
                    }
                    else
                    {
                      v108 = 0;
                      do
                      {
                        v109 = *(_QWORD *)(v91 + 8 * v108 + 32);
                        swift_weakInit();
                        v110 = *(_QWORD **)(v109 + 32);
                        swift_retain();
                        v111 = swift_isUniquelyReferenced_nonNull_native();
                        *(_QWORD *)(v109 + 32) = v110;
                        if ((v111 & 1) == 0)
                        {
                          v110 = sub_214221F04(0, v110[2] + 1, 1, v110);
                          *(_QWORD *)(v109 + 32) = v110;
                        }
                        v113 = v110[2];
                        v112 = v110[3];
                        if (v113 >= v112 >> 1)
                        {
                          v110 = sub_214221F04((_QWORD *)(v112 > 1), v113 + 1, 1, v110);
                          *(_QWORD *)(v109 + 32) = v110;
                        }
                        ++v108;
                        v110[2] = v113 + 1;
                        sub_2141E801C((uint64_t)v199, (uint64_t)&v110[v113 + 4], &qword_253F13188);
                        swift_release();
                        v91 = v189;
                      }
                      while (v95 != v108);
                    }
                    swift_bridgeObjectRelease();
                    a2 = v178;
                    goto LABEL_152;
                  }
                }
                else
                {
                  v95 = *(_QWORD *)((v91 & 0xFFFFFFFFFFFFF8) + 0x10);
                  swift_retain_n();
                  swift_retain();
                  swift_retain();
                  sub_2141E7E18((uint64_t)&v200, (void (*)(uint64_t, unint64_t, unint64_t))sub_2141E7DC4, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7DF0, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7DD4);
                  swift_retain();
                  swift_retain();
                  swift_retain();
                  sub_2141E7E18((uint64_t)&v200, (void (*)(uint64_t, unint64_t, unint64_t))sub_2141E7DC4, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7DF0, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7DD4);
                  swift_bridgeObjectRetain();
                  a2 = v178;
                  if (v95)
                    goto LABEL_94;
                }
                swift_bridgeObjectRelease();
LABEL_152:
                v143 = swift_allocObject();
                *(_QWORD *)(v143 + 16) = sub_2141E7DB8;
                *(_QWORD *)(v143 + 24) = v184;
                v144 = *(_QWORD *)(v194 + 56);
                *(_QWORD *)(v194 + 56) = sub_2141E8014;
                *(_QWORD *)(v194 + 64) = v143;
                sub_2141D972C(v144);
LABEL_153:
                swift_release();
                swift_release();
                sub_2141E7E18((uint64_t)&v200, (void (*)(uint64_t, unint64_t, unint64_t))sub_2141E7F20, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7F98, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7F7C);
                v177 = v194;
              }
              else
              {
                v42 = swift_allocObject();
                *(_BYTE *)(v42 + 16) = v16;
                sub_2141D8BF8(&qword_253F15D58);
                v43 = swift_allocObject();
                *(_OWORD *)(v43 + 16) = xmmword_2144271F0;
                *(_QWORD *)(v43 + 32) = v41;
                *(_QWORD *)(v43 + 40) = a3;
                *(_QWORD *)(v43 + 48) = a4;
                v199[0] = v43;
                sub_214424FF8();
                v44 = v199[0];
                v45 = (_QWORD *)swift_allocObject();
                v45[2] = sub_2141E7DAC;
                v45[3] = v42;
                v45[4] = v41;
                v45[5] = a3;
                v46 = v44;
                v182 = v45;
                v45[6] = a4;
                sub_2141D8BF8((uint64_t *)&unk_254D693E0);
                v47 = swift_allocObject();
                *(_WORD *)(v47 + 16) = 256;
                *(_OWORD *)(v47 + 40) = 0u;
                *(_OWORD *)(v47 + 56) = 0u;
                v48 = MEMORY[0x24BEE4AF8];
                *(_QWORD *)(v47 + 24) = v44;
                *(_QWORD *)(v47 + 32) = v48;
                v193 = v47;
                if (v44 >> 62)
                {
                  swift_retain_n();
                  swift_retain_n();
                  swift_retain_n();
                  sub_2141E7E18((uint64_t)&v200, (void (*)(uint64_t, unint64_t, unint64_t))sub_2141E7DC4, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7DF0, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7DD4);
                  swift_bridgeObjectRetain();
                  v49 = sub_2144256AC();
                }
                else
                {
                  v49 = *(_QWORD *)((v44 & 0xFFFFFFFFFFFFF8) + 0x10);
                  swift_retain_n();
                  swift_retain_n();
                  swift_retain_n();
                  sub_2141E7E18((uint64_t)&v200, (void (*)(uint64_t, unint64_t, unint64_t))sub_2141E7DC4, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7DF0, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7DD4);
                  swift_bridgeObjectRetain();
                }
                a2 = v178;
                if (!v49)
                  goto LABEL_76;
                if (v49 < 1)
                  goto LABEL_178;
                v50 = v49;
                v187 = v46;
                if ((v46 & 0xC000000000000001) == 0)
                {
                  v63 = 0;
                  do
                  {
                    v64 = *(_QWORD *)(v46 + 8 * v63 + 32);
                    swift_weakInit();
                    v65 = *(_QWORD **)(v64 + 32);
                    swift_retain();
                    v66 = swift_isUniquelyReferenced_nonNull_native();
                    *(_QWORD *)(v64 + 32) = v65;
                    if ((v66 & 1) == 0)
                    {
                      v65 = sub_214221F04(0, v65[2] + 1, 1, v65);
                      *(_QWORD *)(v64 + 32) = v65;
                    }
                    v68 = v65[2];
                    v67 = v65[3];
                    if (v68 >= v67 >> 1)
                    {
                      v65 = sub_214221F04((_QWORD *)(v67 > 1), v68 + 1, 1, v65);
                      *(_QWORD *)(v64 + 32) = v65;
                    }
                    ++v63;
                    v65[2] = v68 + 1;
                    sub_2141E801C((uint64_t)v199, (uint64_t)&v65[v68 + 4], &qword_253F13188);
                    swift_release();
                    a2 = v178;
                    v46 = v187;
                  }
                  while (v50 != v63);
LABEL_76:
                  swift_bridgeObjectRelease();
                  goto LABEL_77;
                }
                v51 = 0;
                do
                {
                  v52 = MEMORY[0x2199CCE3C](v51, v46);
                  swift_weakInit();
                  v53 = *(_QWORD **)(v52 + 32);
                  v54 = swift_isUniquelyReferenced_nonNull_native();
                  *(_QWORD *)(v52 + 32) = v53;
                  if ((v54 & 1) == 0)
                  {
                    v53 = sub_214221F04(0, v53[2] + 1, 1, v53);
                    *(_QWORD *)(v52 + 32) = v53;
                  }
                  v56 = v53[2];
                  v55 = v53[3];
                  if (v56 >= v55 >> 1)
                  {
                    v53 = sub_214221F04((_QWORD *)(v55 > 1), v56 + 1, 1, v53);
                    *(_QWORD *)(v52 + 32) = v53;
                  }
                  ++v51;
                  v53[2] = v56 + 1;
                  sub_2141E801C((uint64_t)v199, (uint64_t)&v53[v56 + 4], &qword_253F13188);
                  swift_unknownObjectRelease();
                  v46 = v187;
                }
                while (v50 != v51);
                swift_bridgeObjectRelease();
                a2 = v178;
LABEL_77:
                v69 = swift_allocObject();
                *(_QWORD *)(v69 + 16) = sub_2141E7DB8;
                *(_QWORD *)(v69 + 24) = v182;
                v70 = *(_QWORD *)(v193 + 56);
                *(_QWORD *)(v193 + 56) = sub_2141E7E10;
                *(_QWORD *)(v193 + 64) = v69;
                sub_2141D972C(v70);
                sub_2141E7E18((uint64_t)&v200, (void (*)(uint64_t, unint64_t, unint64_t))sub_2141E7F20, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7F98, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7F7C);
                v71 = v195;
                v72 = v196;
                if (v16)
                  v71 = v193;
                else
                  v72 = v193;
                v195 = v71;
                v196 = v72;
                swift_release();
              }
            }
          }
        }
      }
    }
  }
  v13 = v9 + 1;
  if (!__OFADD__(v9, 1))
  {
    if (v13 >= v198)
      goto LABEL_154;
    v14 = *(_QWORD *)(v197 + 8 * v13);
    ++v9;
    if (!v14)
    {
      v9 = v13 + 1;
      if (v13 + 1 >= v198)
        goto LABEL_154;
      v14 = *(_QWORD *)(v197 + 8 * v9);
      if (!v14)
      {
        v9 = v13 + 2;
        if (v13 + 2 >= v198)
          goto LABEL_154;
        v14 = *(_QWORD *)(v197 + 8 * v9);
        if (!v14)
        {
          v9 = v13 + 3;
          if (v13 + 3 >= v198)
            goto LABEL_154;
          v14 = *(_QWORD *)(v197 + 8 * v9);
          if (!v14)
          {
            v9 = v13 + 4;
            if (v13 + 4 >= v198)
              goto LABEL_154;
            v14 = *(_QWORD *)(v197 + 8 * v9);
            if (!v14)
            {
              v15 = v13 + 5;
              if (v15 >= v198)
              {
LABEL_154:
                swift_release();
                if (v196)
                {
                  sub_2141D8BF8(&qword_253F15D58);
                  v145 = swift_allocObject();
                  *(_OWORD *)(v145 + 16) = xmmword_2144271E0;
                  *(_QWORD *)(v145 + 32) = v196;
                  v199[0] = v145;
                  sub_214424FF8();
                  v146 = v196;
                  v147 = v199[0];
                  v148 = sub_2141E814C;
LABEL_156:
                  swift_retain_n();
                  v149 = sub_214240E7C(v147, (uint64_t)v148, v146);
                  if (v179)
                  {
                    sub_2141D8BF8(&qword_253F15D58);
                    v150 = swift_allocObject();
                    *(_OWORD *)(v150 + 16) = xmmword_2144271E0;
                    *(_QWORD *)(v150 + 32) = v179;
                    v199[0] = v150;
                    sub_214424FF8();
                    v151 = v199[0];
                    v152 = sub_2141E814C;
                    v153 = v179;
                  }
                  else
                  {
                    v153 = 0;
                    v151 = MEMORY[0x24BEE4AF8];
                    v152 = sub_2141E6290;
                  }
                  swift_retain_n();
                  v155 = sub_214240BA0(v151, (uint64_t)v152, v153);
                  if (v195)
                  {
                    sub_2141D8BF8(&qword_253F15D58);
                    v156 = swift_allocObject();
                    *(_OWORD *)(v156 + 16) = xmmword_2144271E0;
                    *(_QWORD *)(v156 + 32) = v195;
                    v199[0] = v156;
                    sub_214424FF8();
                    v157 = v199[0];
                    v158 = sub_2141E814C;
                    v159 = v195;
                  }
                  else
                  {
                    v159 = 0;
                    v157 = MEMORY[0x24BEE4AF8];
                    v158 = sub_2141E6290;
                  }
                  swift_retain_n();
                  v160 = sub_214240E7C(v157, (uint64_t)v158, v159);
                  if (v180)
                  {
                    sub_2141D8BF8(&qword_253F15D58);
                    v161 = swift_allocObject();
                    *(_OWORD *)(v161 + 16) = xmmword_2144271E0;
                    *(_QWORD *)(v161 + 32) = v180;
                    v199[0] = v161;
                    sub_214424FF8();
                    v162 = v199[0];
                    v163 = sub_2141E814C;
                    v164 = v180;
                  }
                  else
                  {
                    v164 = 0;
                    v162 = MEMORY[0x24BEE4AF8];
                    v163 = sub_2141E6290;
                  }
                  swift_retain_n();
                  v165 = sub_214240BA0(v162, (uint64_t)v163, v164);
                  if (v177)
                  {
                    sub_2141D8BF8(&qword_253F15D58);
                    v166 = swift_allocObject();
                    *(_OWORD *)(v166 + 16) = xmmword_2144271E0;
                    *(_QWORD *)(v166 + 32) = v177;
                    v199[0] = v166;
                    sub_214424FF8();
                    v167 = v199[0];
                    v168 = sub_2141E814C;
                    v169 = v177;
                  }
                  else
                  {
                    v169 = 0;
                    v167 = MEMORY[0x24BEE4AF8];
                    v168 = sub_2141E6290;
                  }
                  swift_retain_n();
                  v170 = sub_214240B7C(v167, (uint64_t)v168, v169);
                  v154 = sub_2141E1CAC(v149, v155, v160, v165, v170, (uint64_t)sub_2141E1A40, 0);
                  swift_release();
                  swift_release();
                  swift_release();
                  swift_release();
                  swift_release();
                }
                else
                {
                  v146 = 0;
                  v147 = MEMORY[0x24BEE4AF8];
                  v148 = sub_2141E6290;
                  if (v195 | v177 || v179 || v180)
                    goto LABEL_156;
                  return sub_214235148((uint64_t)sub_2141E2070, 0);
                }
                return v154;
              }
              v14 = *(_QWORD *)(v197 + 8 * v15);
              if (!v14)
              {
                while (1)
                {
                  v9 = v15 + 1;
                  if (__OFADD__(v15, 1))
                    goto LABEL_175;
                  if (v9 >= v198)
                    goto LABEL_154;
                  v14 = *(_QWORD *)(v197 + 8 * v9);
                  ++v15;
                  if (v14)
                    goto LABEL_24;
                }
              }
              v9 = v15;
            }
          }
        }
      }
    }
LABEL_24:
    v8 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v9 << 6);
    goto LABEL_25;
  }
  __break(1u);
LABEL_175:
  __break(1u);
LABEL_176:
  __break(1u);
LABEL_177:
  __break(1u);
LABEL_178:
  __break(1u);
LABEL_179:
  __break(1u);
LABEL_180:
  __break(1u);
LABEL_181:
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v199[0] = 0;
  v199[1] = 0xE000000000000000;
  sub_2144254D8();
  sub_214424F20();
  sub_2144255F8();
  sub_214424F20();
  result = sub_214425628();
  __break(1u);
  return result;
}

uint64_t sub_2141E7D60(uint64_t a1, uint64_t a2)
{
  initializeWithTake for IDGenerator.Key(a2, a1);
  return a2;
}

uint64_t sub_2141E7D9C()
{
  return swift_deallocObject();
}

uint64_t sub_2141E7DAC@<X0>(__int128 *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;

  return sub_2141E0E80(a1, a2, a3, *(_BYTE *)(v4 + 16), a4);
}

uint64_t sub_2141E7DB8@<X0>(uint64_t *a1@<X8>)
{
  return sub_2141E8118((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_214244220, a1);
}

uint64_t sub_2141E7DC4(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if (!a3)
    return swift_retain();
  return result;
}

uint64_t sub_2141E7DD4(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if (!a3 || a3 == 2)
    return swift_retain();
  return result;
}

uint64_t sub_2141E7DF0(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if (a3 == 2)
    return swift_bridgeObjectRetain();
  if (!a3)
    return swift_retain();
  return result;
}

uint64_t sub_2141E7E10(uint64_t a1)
{
  uint64_t v1;

  return sub_214242B40(a1, *(void (**)(void))(v1 + 16));
}

uint64_t sub_2141E7E18(uint64_t a1, void (*a2)(uint64_t, unint64_t, unint64_t), uint64_t (*a3)(uint64_t, uint64_t, _QWORD), uint64_t (*a4)(uint64_t, uint64_t, _QWORD))
{
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;

  v7 = *(_QWORD *)(a1 + 64);
  v8 = *(_QWORD *)(a1 + 72);
  v9 = *(_BYTE *)(a1 + 80);
  sub_2141E7E88(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), a2);
  sub_2141E7F30(v7, v8, v9, a3, a4);
  return a1;
}

uint64_t sub_2141E7E88(uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, void (*a7)(uint64_t, unint64_t, unint64_t))
{
  uint64_t v7;

  v7 = (a5 >> 61) & 3;
  if (!(_DWORD)v7)
    return sub_2141E7EB8(result, a2, a3, a4, a5, a6, a7);
  if ((_DWORD)v7 == 2 || (_DWORD)v7 == 1)
  {
    a5 &= 0x9FFFFFFFFFFFFFFFLL;
    return sub_2141E7EB8(result, a2, a3, a4, a5, a6, a7);
  }
  return result;
}

uint64_t sub_2141E7EB8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, void (*a7)(uint64_t, unint64_t, unint64_t))
{
  unint64_t v9;
  uint64_t result;

  if ((a5 & 0x8000000000000000) == 0)
  {
    v9 = a5 >> 8;
    a7(a2, a3, a3 >> 8);
    return ((uint64_t (*)(uint64_t, unint64_t, unint64_t))a7)(a4, a5, v9);
  }
  return result;
}

uint64_t sub_2141E7F20(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if (!a3)
    return swift_release();
  return result;
}

uint64_t sub_2141E7F30(uint64_t result, uint64_t a2, unsigned __int8 a3, uint64_t (*a4)(uint64_t, uint64_t, _QWORD), uint64_t (*a5)(uint64_t, uint64_t, _QWORD))
{
  switch(a3 >> 5)
  {
    case 1:
    case 2:
    case 3:
    case 4:
    case 6:
      result = a4(result, a2, a3 & 0x1F);
      break;
    case 5:
      result = a5(result, a2, a3 & 0x1F);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_2141E7F7C(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if (!a3 || a3 == 2)
    return swift_release();
  return result;
}

uint64_t sub_2141E7F98(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if (a3 == 2)
    return swift_bridgeObjectRelease();
  if (!a3)
    return swift_release();
  return result;
}

uint64_t sub_2141E7FB8()
{
  uint64_t v0;

  sub_2141E7E88(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), (void (*)(uint64_t, unint64_t, unint64_t))sub_2141E7F20);
  sub_2141E7F30(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_BYTE *)(v0 + 96), (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7F98, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7F7C);
  return swift_deallocObject();
}

uint64_t sub_2141E8008@<X0>(__int128 *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, void (**a4)(uint64_t a1@<X0>, uint64_t a2@<X8>)@<X8>)
{
  uint64_t v4;

  return sub_2141E0A78(a1, a2, a3, v4 + 16, a4);
}

uint64_t sub_2141E8014(uint64_t a1)
{
  uint64_t v1;

  return sub_21424E844(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_2141E801C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_2141D8BF8(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_2141E8060()
{
  return swift_deallocObject();
}

uint64_t sub_2141E8070@<X0>(__int128 *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;

  return sub_2141E1654(a1, a2, a3, *(unsigned __int8 *)(v4 + 16), (uint64_t)sub_2141E854C, a4);
}

uint64_t sub_2141E809C()
{
  return swift_deallocObject();
}

uint64_t sub_2141E80AC@<X0>(__int128 *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;

  return sub_2141E1654(a1, a2, a3, *(unsigned __int8 *)(v4 + 16), (uint64_t)sub_2141E8404, a4);
}

uint64_t sub_2141E80DC()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2141E8118@<X0>(uint64_t (*a1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD)@<X0>, uint64_t *a2@<X8>)
{
  _QWORD *v2;
  uint64_t result;
  uint64_t v5;

  result = a1(v2[2], v2[3], v2[4], v2[5], v2[6]);
  *a2 = result;
  a2[1] = v5;
  return result;
}

uint64_t sub_2141E814C@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_2141E6298(v1, a1);
}

uint64_t sub_2141E8164()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2141E81B0()
{
  uint64_t v0;

  return sub_2141F53A0(*(void (**)(_QWORD *, _QWORD *, _QWORD *, _QWORD *, _QWORD *))(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64));
}

uint64_t sub_2141E81CC(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  void (*v4)(uint64_t *__return_ptr, _QWORD *);
  uint64_t v6;
  _QWORD v7[2];
  char v8;

  v4 = *(void (**)(uint64_t *__return_ptr, _QWORD *))(v3 + 16);
  v7[0] = a1;
  v7[1] = a2;
  v8 = a3 & 1;
  v4(&v6, v7);
  return v6;
}

double sub_2141E8224@<D0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v5;

  return sub_2141E1C3C(a1, a2 & 1, a3, a4 & 1, *(void (**)(__int128 *__return_ptr, uint64_t *, uint64_t *))(v5 + 16), a5);
}

uint64_t sub_2141E8238(uint64_t a1, char a2)
{
  uint64_t v2;
  void (*v3)(uint64_t *__return_ptr, uint64_t *);
  uint64_t v5;
  uint64_t v6;
  char v7;

  v3 = *(void (**)(uint64_t *__return_ptr, uint64_t *))(v2 + 16);
  v6 = a1;
  v7 = a2 & 1;
  v3(&v5, &v6);
  return v5;
}

uint64_t sub_2141E827C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  int v6;

  v1 = sub_2144240D4();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (((*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  v5 = v0 + v4;
  swift_release();
  if (*(_QWORD *)(v0 + v4 + 32))
    swift_release();
  swift_bridgeObjectRelease();
  v6 = *(unsigned __int8 *)(v5 + 64);
  if (v6 != 255)
    sub_2141E833C(*(_QWORD *)(v5 + 56), v6 & 1);
  return swift_deallocObject();
}

uint64_t sub_2141E833C(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0)
    return swift_release();
  else
    return swift_bridgeObjectRelease();
}

void sub_2141E8348(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v5 = sub_2144240D4();
  v6 = (*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64)
      + ((*(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80))
      + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 23) & 0xFFFFFFFFFFFFFFF8;
  sub_2141E1300(a1, v2 + v7, a2, *(double *)(v2 + v6), *(double *)(v2 + v6 + 8), *(double *)(v2 + ((v7 + 111) & 0xFFFFFFFFFFFFFFF8)), *(double *)(v2 + ((((v7 + 111) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)), *(double *)(v2 + ((((((v7 + 111) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_2141E83DC(uint64_t result, unsigned __int8 a2)
{
  if (a2 != 255)
    return sub_2141E83F4(result, a2 & 1);
  return result;
}

uint64_t sub_2141E83F4(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0)
    return swift_retain();
  else
    return swift_bridgeObjectRetain();
}

_QWORD *sub_2141E8404@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  unint64_t v8;

  v7 = sub_2144240D4();
  v8 = ((*(unsigned __int8 *)(*(_QWORD *)(v7 - 8) + 80) + 120) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v7 - 8) + 80))
     + *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64);
  return sub_2141E17EC(a1, a2, v3 + 16, *(unsigned __int8 *)(v3 + v8), a3, *(double *)((v8 & 0xFFFFFFFFFFFFFFF8) + v3 + 8), *(double *)(v3 + (((v8 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8)), *(double *)(v3 + (((((v8 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_2141E8490()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;

  v1 = sub_2144240D4();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  swift_release();
  if (*(_QWORD *)(v0 + 48))
    swift_release();
  swift_bridgeObjectRelease();
  v4 = *(unsigned __int8 *)(v0 + 80);
  if (v4 != 255)
    sub_2141E833C(*(_QWORD *)(v0 + 72), v4 & 1);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + ((v3 + 120) & ~v3), v1);
  return swift_deallocObject();
}

_QWORD *sub_2141E854C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;

  v5 = sub_2144240D4();
  v6 = ((*(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80) + 120) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80))
     + *(_QWORD *)(*(_QWORD *)(v5 - 8) + 64);
  return sub_2141E14F0(a1, v2 + 16, *(_BYTE *)(v2 + v6), a2, *(double *)((v6 & 0xFFFFFFFFFFFFFFF8) + v2 + 8), *(double *)(v2 + (((v6 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8)), *(double *)(v2 + (((((v6 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_2141E85CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;

  v1 = sub_2144240D4();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (((*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  v5 = v0 + v4;
  swift_release();
  if (*(_QWORD *)(v0 + v4 + 32))
    swift_release();
  swift_bridgeObjectRelease();
  v6 = *(unsigned __int8 *)(v5 + 64);
  if (v6 != 255)
    sub_2141E833C(*(_QWORD *)(v5 + 56), v6 & 1);
  v7 = v0 + ((((v4 + 111) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8);
  sub_2141E7E88(*(_QWORD *)(v7 + 16), *(_QWORD *)(v7 + 24), *(_QWORD *)(v7 + 32), *(_QWORD *)(v7 + 40), *(_QWORD *)(v7 + 48), *(_QWORD *)(v7 + 56), (void (*)(uint64_t, unint64_t, unint64_t))sub_2141E7F20);
  sub_2141E7F30(*(_QWORD *)(v7 + 64), *(_QWORD *)(v7 + 72), *(_BYTE *)(v7 + 80), (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7F98, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7F7C);
  return swift_deallocObject();
}

void sub_2141E86C4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;

  v5 = sub_2144240D4();
  v6 = (*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64)
      + ((*(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80))
      + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_2141E0C74(a1, v2 + ((v6 + 23) & 0xFFFFFFFFFFFFFFF8), v2 + ((((((v6 + 23) & 0xFFFFFFFFFFFFFFF8) + 111) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8), a2, *(double *)(v2 + v6), *(double *)(v2 + v6 + 8), *(double *)(v2 + ((((v6 + 23) & 0xFFFFFFFFFFFFFFF8) + 111) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_2141E874C(uint64_t a1, void (*a2)(uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(_BYTE *)(a1 + 64);
  swift_retain();
  a2(v4, v5);
  swift_bridgeObjectRetain();
  sub_2141E83DC(v6, v7);
  return a1;
}

uint64_t sub_2141E87BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;

  v1 = sub_2144240D4();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  swift_release();
  if (*(_QWORD *)(v0 + 48))
    swift_release();
  swift_bridgeObjectRelease();
  v4 = *(unsigned __int8 *)(v0 + 80);
  if (v4 != 255)
    sub_2141E833C(*(_QWORD *)(v0 + 72), v4 & 1);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + ((v3 + 120) & ~v3), v1);
  return swift_deallocObject();
}

_QWORD *sub_2141E8868@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;

  v5 = sub_2144240D4();
  v6 = ((*(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80) + 120) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80))
     + *(_QWORD *)(*(_QWORD *)(v5 - 8) + 64);
  return sub_2141E0FD4(a1, v2 + 16, *(_BYTE *)(v2 + v6), a2, *(double *)((v6 & 0xFFFFFFFFFFFFFFF8) + v2 + 8));
}

_QWORD *sub_2141E88D0(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

unint64_t sub_2141E88F4()
{
  unint64_t result;

  result = qword_254D69410;
  if (!qword_254D69410)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_254D69410);
  }
  return result;
}

unint64_t sub_2141E8930()
{
  unint64_t result;
  unint64_t v1;

  result = qword_254D69418;
  if (!qword_254D69418)
  {
    v1 = sub_2141E88F4();
    result = MEMORY[0x2199CD934](MEMORY[0x24BEE5BD8], v1);
    atomic_store(result, (unint64_t *)&qword_254D69418);
  }
  return result;
}

void sub_2141E8978(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  id v13;
  int64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  id v19;
  char v20;
  void *v21;
  id v22;
  id v23;
  char v24;
  int64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;

  if (!*(_QWORD *)(v1 + OBJC_IVAR____TtC6Charts26ChartDragGestureRecognizer_timer))
  {
    v2 = v1;
    v3 = a1;
    if ((a1 & 0xC000000000000001) != 0)
    {
      swift_bridgeObjectRetain();
      sub_21442543C();
      sub_2141E88F4();
      sub_2141E8930();
      sub_214425124();
      v3 = v28;
      v26 = v29;
      v4 = v30;
      v5 = v31;
      v6 = v32;
    }
    else
    {
      v7 = -1 << *(_BYTE *)(a1 + 32);
      v26 = a1 + 56;
      v4 = ~v7;
      v8 = -v7;
      if (v8 < 64)
        v9 = ~(-1 << v8);
      else
        v9 = -1;
      v6 = v9 & *(_QWORD *)(a1 + 56);
      swift_bridgeObjectRetain();
      v5 = 0;
    }
    v25 = (unint64_t)(v4 + 64) >> 6;
    while (1)
    {
      v10 = v5;
      if (v3 < 0)
      {
        if (!sub_214425448())
          goto LABEL_38;
        sub_2141E88F4();
        swift_unknownObjectRetain();
        swift_dynamicCast();
        v13 = v27;
        swift_unknownObjectRelease();
        if (!v27)
          goto LABEL_38;
      }
      else
      {
        if (v6)
        {
          v11 = __clz(__rbit64(v6));
          v6 &= v6 - 1;
          v12 = v11 | (v5 << 6);
        }
        else
        {
          v14 = v5 + 1;
          if (__OFADD__(v5, 1))
          {
            __break(1u);
            return;
          }
          if (v14 >= v25)
            goto LABEL_38;
          v15 = *(_QWORD *)(v26 + 8 * v14);
          ++v5;
          if (!v15)
          {
            v5 = v10 + 2;
            if (v10 + 2 >= v25)
              goto LABEL_38;
            v15 = *(_QWORD *)(v26 + 8 * v5);
            if (!v15)
            {
              v5 = v10 + 3;
              if (v10 + 3 >= v25)
                goto LABEL_38;
              v15 = *(_QWORD *)(v26 + 8 * v5);
              if (!v15)
              {
                v5 = v10 + 4;
                if (v10 + 4 >= v25)
                  goto LABEL_38;
                v15 = *(_QWORD *)(v26 + 8 * v5);
                if (!v15)
                {
                  v16 = v10 + 5;
                  while (v25 != v16)
                  {
                    v15 = *(_QWORD *)(v26 + 8 * v16++);
                    if (v15)
                    {
                      v5 = v16 - 1;
                      goto LABEL_29;
                    }
                  }
LABEL_38:
                  sub_2141E9120();
                  return;
                }
              }
            }
          }
LABEL_29:
          v6 = (v15 - 1) & v15;
          v12 = __clz(__rbit64(v15)) + (v5 << 6);
        }
        v13 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * v12);
        if (!v13)
          goto LABEL_38;
      }
      v17 = *(void **)(v2 + OBJC_IVAR____TtC6Charts26ChartDragGestureRecognizer_initialFirstTouch);
      if (v17)
      {
        sub_2141E88F4();
        v18 = v13;
        v19 = v17;
        v20 = sub_214425364();

        if ((v20 & 1) != 0)
        {

LABEL_37:
          sub_2141E9120();
          sub_2141E4780();
          return;
        }
      }
      v21 = *(void **)(v2 + OBJC_IVAR____TtC6Charts26ChartDragGestureRecognizer_initialSecondTouch);
      if (v21)
      {
        sub_2141E88F4();
        v22 = v13;
        v23 = v21;
        v24 = sub_214425364();

        if ((v24 & 1) != 0)
          goto LABEL_37;
      }
      else
      {

      }
    }
  }
}

void sub_2141E8CC4(uint64_t a1)
{
  _BYTE *v1;
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  void *v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  id v16;
  int64_t v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  id v21;
  id v22;
  char v23;
  void *v24;
  id v25;
  id v26;
  char v27;
  void *v28;
  char *v29;
  uint64_t v30;
  void *v31;
  char *v32;
  uint64_t v33;
  char v34;
  id v35;
  __int128 v36;
  __int128 v37;
  char *v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  void *v42;
  void *v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;

  v2 = v1;
  v3 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    sub_21442543C();
    sub_2141E88F4();
    sub_2141E8930();
    sub_214425124();
    v3 = v46;
    v44 = v47;
    v4 = v48;
    v5 = v49;
    v6 = v50;
  }
  else
  {
    v7 = -1 << *(_BYTE *)(a1 + 32);
    v44 = a1 + 56;
    v4 = ~v7;
    v8 = -v7;
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v6 = v9 & *(_QWORD *)(a1 + 56);
    swift_bridgeObjectRetain();
    v5 = 0;
  }
  v10 = (unint64_t)(v4 + 64) >> 6;
  while (1)
  {
    if (v3 < 0)
    {
      if (!sub_214425448())
        goto LABEL_37;
      sub_2141E88F4();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      v16 = v45;
      swift_unknownObjectRelease();
      v15 = v5;
      v13 = v6;
      if (!v45)
        goto LABEL_37;
      goto LABEL_31;
    }
    if (v6)
    {
      v13 = (v6 - 1) & v6;
      v14 = __clz(__rbit64(v6)) | (v5 << 6);
      v15 = v5;
      goto LABEL_30;
    }
    v17 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
      return;
    }
    if (v17 >= v10)
      goto LABEL_37;
    v18 = *(_QWORD *)(v44 + 8 * v17);
    v15 = v5 + 1;
    if (!v18)
    {
      v15 = v5 + 2;
      if (v5 + 2 >= v10)
        goto LABEL_37;
      v18 = *(_QWORD *)(v44 + 8 * v15);
      if (!v18)
      {
        v15 = v5 + 3;
        if (v5 + 3 >= v10)
          goto LABEL_37;
        v18 = *(_QWORD *)(v44 + 8 * v15);
        if (!v18)
        {
          v15 = v5 + 4;
          if (v5 + 4 >= v10)
            goto LABEL_37;
          v18 = *(_QWORD *)(v44 + 8 * v15);
          if (!v18)
            break;
        }
      }
    }
LABEL_29:
    v13 = (v18 - 1) & v18;
    v14 = __clz(__rbit64(v18)) + (v15 << 6);
LABEL_30:
    v16 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * v14);
    if (!v16)
      goto LABEL_37;
LABEL_31:
    v20 = *(void **)&v2[OBJC_IVAR____TtC6Charts26ChartDragGestureRecognizer_initialFirstTouch];
    if (v20)
    {
      sub_2141E88F4();
      v21 = v16;
      v22 = v20;
      v23 = sub_214425364();

      if ((v23 & 1) != 0)
      {

        v11 = *(void **)&v2[OBJC_IVAR____TtC6Charts26ChartDragGestureRecognizer_initialFirstTouch];
        *(_QWORD *)&v2[OBJC_IVAR____TtC6Charts26ChartDragGestureRecognizer_initialFirstTouch] = 0;

        v12 = &v2[OBJC_IVAR____TtC6Charts26ChartDragGestureRecognizer_currentLocations];
        *v12 = 0;
        v12[1] = 0;
        goto LABEL_9;
      }
    }
    v24 = *(void **)&v2[OBJC_IVAR____TtC6Charts26ChartDragGestureRecognizer_initialSecondTouch];
    if (v24)
    {
      sub_2141E88F4();
      v25 = v16;
      v26 = v24;
      v27 = sub_214425364();

      v5 = v15;
      v6 = v13;
      if ((v27 & 1) != 0)
      {
        v28 = *(void **)&v2[OBJC_IVAR____TtC6Charts26ChartDragGestureRecognizer_initialSecondTouch];
        *(_QWORD *)&v2[OBJC_IVAR____TtC6Charts26ChartDragGestureRecognizer_initialSecondTouch] = 0;

        v29 = &v2[OBJC_IVAR____TtC6Charts26ChartDragGestureRecognizer_currentLocations];
        *((_QWORD *)v29 + 2) = 0;
        *((_QWORD *)v29 + 3) = 0;
        v29[32] = 1;
        goto LABEL_9;
      }
    }
    else
    {

LABEL_9:
      v5 = v15;
      v6 = v13;
    }
  }
  v19 = v5 + 5;
  while (v10 != v19)
  {
    v18 = *(_QWORD *)(v44 + 8 * v19++);
    if (v18)
    {
      v15 = v19 - 1;
      goto LABEL_29;
    }
  }
LABEL_37:
  sub_2141E9120();
  if (!*(_QWORD *)&v2[OBJC_IVAR____TtC6Charts26ChartDragGestureRecognizer_initialFirstTouch])
  {
    v30 = OBJC_IVAR____TtC6Charts26ChartDragGestureRecognizer_initialSecondTouch;
    v31 = *(void **)&v2[OBJC_IVAR____TtC6Charts26ChartDragGestureRecognizer_initialSecondTouch];
    if (v31)
    {
      *(_QWORD *)&v2[OBJC_IVAR____TtC6Charts26ChartDragGestureRecognizer_initialFirstTouch] = v31;
      v32 = &v2[OBJC_IVAR____TtC6Charts26ChartDragGestureRecognizer_startLocations];
      v33 = (uint64_t)&v2[OBJC_IVAR____TtC6Charts26ChartDragGestureRecognizer_startLocations + 16];
      v34 = v2[OBJC_IVAR____TtC6Charts26ChartDragGestureRecognizer_startLocations + 32];
      v35 = v31;
      v36 = 0uLL;
      v37 = 0uLL;
      if ((v34 & 1) == 0)
        v37 = *(_OWORD *)v33;
      *(_OWORD *)v32 = v37;
      v38 = &v2[OBJC_IVAR____TtC6Charts26ChartDragGestureRecognizer_currentLocations];
      v39 = (uint64_t)&v2[OBJC_IVAR____TtC6Charts26ChartDragGestureRecognizer_currentLocations + 16];
      if ((v2[OBJC_IVAR____TtC6Charts26ChartDragGestureRecognizer_currentLocations + 32] & 1) == 0)
        v36 = *(_OWORD *)v39;
      *(_OWORD *)v38 = v36;
      v40 = *(void **)&v2[v30];
      *(_QWORD *)&v2[v30] = 0;

      *(_QWORD *)v33 = 0;
      *(_QWORD *)(v33 + 8) = 0;
      v32[32] = 1;
      *(_QWORD *)v39 = 0;
      *(_QWORD *)(v39 + 8) = 0;
      v38[32] = 1;
    }
    else
    {
      v41 = OBJC_IVAR____TtC6Charts26ChartDragGestureRecognizer_timer;
      v42 = *(void **)&v2[OBJC_IVAR____TtC6Charts26ChartDragGestureRecognizer_timer];
      if (v42)
      {
        objc_msgSend(v42, sel_invalidate);
        v43 = *(void **)&v2[v41];
      }
      else
      {
        v43 = 0;
      }
      *(_QWORD *)&v2[v41] = 0;

      if (objc_msgSend(v2, sel_state) == (id)1 || objc_msgSend(v2, sel_state) == (id)2)
        objc_msgSend(v2, sel_setState_, 3);
    }
  }
}

uint64_t sub_2141E9120()
{
  return swift_release();
}

uint64_t sub_2141E9128()
{
  uint64_t v0;

  return swift_deallocObject();
}

void sub_2141E914C(uint64_t a1)
{
  uint64_t v1;

  sub_2141E4B44(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_2141E9154(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_2141E9164()
{
  return swift_release();
}

unint64_t sub_2141E9170()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_253F13298;
  if (!qword_253F13298)
  {
    v1 = sub_2141D7924((uint64_t *)&unk_253F132A0);
    v2[0] = sub_2141D9054(&qword_253F15BC8, &qword_253F15BD0, MEMORY[0x24BDEFB78]);
    v2[1] = sub_2141E5D98();
    result = MEMORY[0x2199CD934](MEMORY[0x24BDEF3E0], v1, v2);
    atomic_store(result, (unint64_t *)&qword_253F13298);
  }
  return result;
}

void static AnnotationPosition.automatic.getter(_BYTE *a1@<X8>)
{
  *a1 = 9;
}

BOOL sub_2141E9248(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_2141E9260()
{
  return sub_214425880();
}

void static AnnotationPosition.overlay.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void static AnnotationPosition.top.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

void static AnnotationPosition.bottom.getter(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

void static AnnotationPosition.leading.getter(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

void static AnnotationPosition.trailing.getter(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

void static AnnotationPosition.topLeading.getter(_BYTE *a1@<X8>)
{
  *a1 = 5;
}

void static AnnotationPosition.topTrailing.getter(_BYTE *a1@<X8>)
{
  *a1 = 6;
}

void static AnnotationPosition.bottomLeading.getter(_BYTE *a1@<X8>)
{
  *a1 = 7;
}

void static AnnotationPosition.bottomTrailing.getter(_BYTE *a1@<X8>)
{
  *a1 = 8;
}

uint64_t static AnnotationPosition.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2;
  int v3;

  v2 = *a1;
  v3 = *a2;
  if (v2 == 9)
  {
    if (v3 != 9)
      return 0;
  }
  else if (v3 == 9 || v2 != v3)
  {
    return 0;
  }
  return 1;
}

uint64_t sub_2141E9328(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2;
  int v3;

  v2 = *a1;
  v3 = *a2;
  if (v2 == 9)
  {
    if (v3 == 9)
      return 1;
  }
  else if (v3 != 9 && v2 == v3)
  {
    return 1;
  }
  return 0;
}

double AnnotationContext.targetSize.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

_BYTE *AnnotationOverflowResolution.init(x:y:)@<X0>(_BYTE *result@<X0>, char *a2@<X1>, _BYTE *a3@<X8>)
{
  char v3;

  v3 = *a2;
  *a3 = *result;
  a3[1] = v3;
  return result;
}

_BYTE *static AnnotationOverflowResolution.Strategy.fit(to:)@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_2141E9384()
{
  sub_214425874();
  sub_214425880();
  return sub_2144258B0();
}

uint64_t sub_2141E93C8()
{
  sub_214425874();
  sub_214425880();
  return sub_2144258B0();
}

void static AnnotationOverflowResolution.Boundary.plot.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void static AnnotationOverflowResolution.Boundary.chart.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

void static AnnotationOverflowResolution.Boundary.automatic.getter(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

void static AnnotationOverflowResolution.automatic.getter(_WORD *a1@<X8>)
{
  *a1 = 1285;
}

void ChartContent.annotation<A>(position:alignment:spacing:content:)()
{
  type metadata accessor for ModifiedChartContent_Annotate.AnnotationBody();
}

{
  type metadata accessor for ModifiedChartContent_Annotate.AnnotationBody();
}

void sub_2141E9494(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = MEMORY[0x24BDAC7A8](a1);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 16))(v7, v2, v1);
  if ((v3 & 1) != 0 && qword_253F10C78 != -1)
    v9 = swift_once();
  *(_WORD *)(v4 - 128) = 1285;
  (*(void (**)(uint64_t))(v4 - 168))(v9);
  swift_storeEnumTagMultiPayload();
  sub_2141E95CC((uint64_t)v7, v1, *(_QWORD *)(v4 - 152));
}

void type metadata accessor for ModifiedChartContent_Annotate.AnnotationBody()
{
  JUMPOUT(0x2199CD874);
}

void sub_2141E95CC(uint64_t a1@<X0>, uint64_t a2@<X6>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1, a2);
  type metadata accessor for ModifiedChartContent_Annotate();
}

void sub_2141E9644(int *a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  __int16 v5;
  uint64_t v6;
  _QWORD *v7;

  *(_BYTE *)(v4 + a1[13]) = v3;
  v7 = (_QWORD *)(v4 + a1[14]);
  *v7 = v2;
  v7[1] = v1;
  *(_QWORD *)(v4 + a1[15]) = v6;
  *(_WORD *)(v4 + a1[16]) = v5;
  type metadata accessor for ModifiedChartContent_Annotate.AnnotationBody();
}

uint64_t sub_2141E9684(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 32))(v2, v1, a1);
}

void sub_2141E9720(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[96];

  v5 = MEMORY[0x24BDAC7A8](a1);
  v7 = &v12[-v6];
  MEMORY[0x24BDAC7A8](v5);
  v9 = &v12[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v10 + 16))(v9, v2, v1);
  if ((v3 & 1) != 0 && qword_253F10C78 != -1)
    swift_once();
  *(_WORD *)(v4 - 128) = 1285;
  v11 = *(_QWORD *)(v4 - 136);
  *v7 = *(_QWORD *)(v4 - 176);
  v7[1] = v11;
  swift_storeEnumTagMultiPayload();
  sub_2141E95CC((uint64_t)v9, v1, *(_QWORD *)(v4 - 160));
}

void static AnnotationBoundaryResolution.Strategy.automatic.getter(_BYTE *a1@<X8>)
{
  *a1 = 5;
}

_BYTE *AnnotationBoundaryResolution.init(x:y:)@<X0>(_BYTE *result@<X0>, char *a2@<X1>, _BYTE *a3@<X8>)
{
  char v3;

  v3 = *a2;
  *a3 = *result;
  a3[1] = v3;
  return result;
}

void static AnnotationBoundaryResolution.Strategy.flush.getter(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

_BYTE *static AnnotationBoundaryResolution.Strategy.flush(to:)@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void static AnnotationBoundaryResolution.Strategy.rescales.getter(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

void static AnnotationBoundaryResolution.Strategy.extends.getter(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

void static AnnotationBoundaryResolution.Boundary.plot.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void static AnnotationBoundaryResolution.Boundary.chart.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

void static AnnotationBoundaryResolution.Boundary.automatic.getter(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

void ChartContent.annotation<A>(position:alignment:spacing:overflowResolution:content:)()
{
  type metadata accessor for ModifiedChartContent_Annotate.AnnotationBody();
}

{
  type metadata accessor for ModifiedChartContent_Annotate.AnnotationBody();
}

void sub_2141E9924(uint64_t a1)
{
  char v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = MEMORY[0x24BDAC7A8](a1);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v2;
  v9 = v2[1];
  v11 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v10 + 16))(v7, *(_QWORD *)(v4 - 184), v3);
  if ((v1 & 1) != 0 && qword_253F10C78 != -1)
    v11 = swift_once();
  *(_BYTE *)(v4 - 128) = v8;
  *(_BYTE *)(v4 - 127) = v9;
  (*(void (**)(uint64_t))(v4 - 168))(v11);
  swift_storeEnumTagMultiPayload();
  sub_2141E95CC((uint64_t)v7, v3, *(_QWORD *)(v4 - 152));
}

void sub_2141E9AB8(uint64_t a1)
{
  char v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _BYTE *v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[96];

  v5 = MEMORY[0x24BDAC7A8](a1);
  v7 = &v14[-v6];
  MEMORY[0x24BDAC7A8](v5);
  v9 = &v14[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = *v3;
  v11 = v3[1];
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v12 + 16))(v9, *(_QWORD *)(v4 - 184), v2);
  if ((v1 & 1) != 0 && qword_253F10C78 != -1)
    swift_once();
  *(_BYTE *)(v4 - 128) = v10;
  *(_BYTE *)(v4 - 127) = v11;
  v13 = *(_QWORD *)(v4 - 136);
  *v7 = *(_QWORD *)(v4 - 176);
  v7[1] = v13;
  swift_storeEnumTagMultiPayload();
  sub_2141E95CC((uint64_t)v9, v2, *(_QWORD *)(v4 - 160));
}

void ChartContent.annotation<A>(position:alignment:spacing:boundaryResolution:content:)()
{
  ChartContent.annotation<A>(position:alignment:spacing:overflowResolution:content:)();
}

{
  ChartContent.annotation<A>(position:alignment:spacing:overflowResolution:content:)();
}

uint64_t sub_2141E9C84(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __int128 v6;
  _QWORD v8[7];
  __int128 v9;

  v6 = *a2;
  v8[2] = a3;
  v8[3] = a4;
  v8[4] = a5;
  v8[5] = a6;
  v8[6] = a1;
  v9 = v6;
  swift_retain();
  sub_21421FC18(0, (void (*)(void))sub_2141ED18C, (uint64_t)v8);
  return swift_release();
}

void sub_2141E9CE4(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[96];
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  _BYTE *v18;
  _BYTE *v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v22 = a5;
  v9 = sub_2141D8BF8(&qword_253F14280);
  MEMORY[0x24BDAC7A8](v9);
  v19 = &v14[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v21 = type metadata accessor for SgGroup(0);
  MEMORY[0x24BDAC7A8](v21);
  v20 = &v14[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v16 = sub_2141D8BF8(&qword_253F12228);
  MEMORY[0x24BDAC7A8](v16);
  v17 = &v14[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = sub_2141D8BF8(&qword_253F12220);
  MEMORY[0x24BDAC7A8](v15);
  v18 = &v14[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v23 = a1;
  v24 = a2;
  v25 = a3;
  v26 = a4;
  type metadata accessor for ModifiedChartContent_Annotate.AnnotationBody();
}

BOOL sub_2141E9E5C(uint64_t a1)
{
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  CGFloat v17;
  double v18;
  CGFloat v19;
  double v20;
  CGFloat v21;
  double v22;
  CGFloat v23;
  _BOOL8 result;
  _BYTE v25[160];
  CGRect v26;

  *(_QWORD *)(v7 - 424) = *(_QWORD *)(a1 - 8);
  v8 = MEMORY[0x24BDAC7A8](a1);
  *(_QWORD *)(v7 - 392) = *(_QWORD *)(v6 - 8);
  v9 = MEMORY[0x24BDAC7A8](v8);
  *(_QWORD *)(v7 - 432) = &v25[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = MEMORY[0x24BDAC7A8](v9);
  MEMORY[0x24BDAC7A8](v11);
  *(_QWORD *)(v7 - 368) = &v25[-v12];
  v13 = *v2;
  v14 = *((_QWORD *)v2 + 1);
  *(_QWORD *)(v7 - 336) = v4;
  *(_QWORD *)(v7 - 328) = v6;
  *(_QWORD *)(v7 - 320) = v5;
  *(_QWORD *)(v7 - 312) = v3;
  *(_QWORD *)(v7 - 304) = v1;
  *(_BYTE *)(v7 - 296) = v13;
  *(_QWORD *)(v7 - 384) = v14;
  *(_QWORD *)(v7 - 288) = v14;
  sub_21421FC18(0, (void (*)(void))sub_2141ECF3C, v7 - 352);
  v15 = *(_QWORD *)(v7 - 240);
  swift_retain();
  *(_QWORD *)(v7 - 376) = v15;
  sub_2142E82A0(v15);
  v17 = v16;
  v19 = v18;
  v21 = v20;
  v23 = v22;
  swift_release();
  v26.origin.x = v17;
  v26.origin.y = v19;
  v26.size.width = v21;
  v26.size.height = v23;
  result = CGRectEqualToRect(v26, *MEMORY[0x24BDBF070]);
  if (!result)
  {
    *(_QWORD *)(v7 - 472) = v15 & 0xFFFFFFFFFFFFFFFLL;
    *(_QWORD *)(v7 - 192) = v4;
    *(_QWORD *)(v7 - 184) = v6;
    *(_QWORD *)(v7 - 176) = v5;
    *(_QWORD *)(v7 - 168) = v3;
    *(_QWORD *)(v7 - 504) = v3;
    type metadata accessor for ModifiedChartContent_Annotate();
  }
  **(_QWORD **)(v7 - 360) = *(_QWORD *)(v7 - 376);
  return result;
}

void sub_2141EA758(uint64_t a1, uint64_t a2, char a3)
{
  __asm { BR              X10 }
}

double sub_2141EA78C()
{
  double v0;
  double v1;
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v10;

  sub_214424C2C();
  if ((sub_214424C20() & 1) != 0)
  {
    sub_214424CC8();
    v5 = v4;
    sub_214424CC8();
  }
  else
  {
    sub_214424C38();
    if ((sub_214424C20() & 1) != 0)
    {
      sub_214424CD4();
      v5 = v8;
      sub_214424CD4();
    }
    else
    {
      sub_214424C50();
      if ((sub_214424C20() & 1) != 0)
      {
        sub_214424CEC();
        v5 = v7;
        sub_214424CEC();
      }
      else
      {
        sub_214424C5C();
        if ((sub_214424C20() & 1) != 0)
        {
          sub_214424CF8();
          v5 = v6;
          sub_214424CF8();
        }
        else
        {
          sub_214424BF0();
          if ((sub_214424C20() & 1) != 0)
          {
            sub_214424C8C();
            v5 = v0;
            sub_214424C8C();
          }
          else
          {
            sub_214424BFC();
            if ((sub_214424C20() & 1) != 0)
            {
              sub_214424C98();
              v5 = v1;
              sub_214424C98();
            }
            else
            {
              sub_214424C08();
              if ((sub_214424C20() & 1) != 0)
              {
                sub_214424CA4();
                v5 = v2;
                sub_214424CA4();
              }
              else
              {
                sub_214424C14();
                if ((sub_214424C20() & 1) != 0)
                {
                  sub_214424CB0();
                  v5 = v3;
                  sub_214424CB0();
                }
                else
                {
                  sub_214424CE0();
                  v5 = v10;
                  sub_214424CE0();
                }
              }
            }
          }
        }
      }
    }
  }
  return v5;
}

void sub_2141EA9FC(uint64_t a1, uint64_t a2, char a3)
{
  __asm { BR              X10 }
}

double sub_2141EAA30()
{
  double v0;
  double v1;

  sub_214424C2C();
  if ((sub_214424C20() & 1) == 0)
  {
    sub_214424C38();
    if ((sub_214424C20() & 1) == 0)
    {
      sub_214424C50();
      if ((sub_214424C20() & 1) != 0)
      {
        return v0;
      }
      else
      {
        sub_214424C5C();
        if ((sub_214424C20() & 1) != 0)
        {
          return -v0;
        }
        else
        {
          sub_214424BF0();
          if ((sub_214424C20() & 1) != 0)
          {
            return v0;
          }
          else
          {
            sub_214424BFC();
            if ((sub_214424C20() & 1) != 0)
            {
              return -v0;
            }
            else
            {
              sub_214424C08();
              if ((sub_214424C20() & 1) != 0)
              {
                return v0;
              }
              else
              {
                sub_214424C14();
                if ((sub_214424C20() & 1) != 0)
                  return -v0;
                else
                  return 0.0;
              }
            }
          }
        }
      }
    }
  }
  return v1;
}

uint64_t sub_2141EAB3C(uint64_t a1, __int128 *a2, uint64_t *a3)
{
  return sub_2141E9C84(a1, a2, a3[2], a3[3], a3[4], a3[5]);
}

void sub_2141EAB4C(uint64_t *a1@<X2>, uint64_t a2@<X8>)
{
  sub_2141E9CE4(a1[2], a1[3], a1[4], a1[5], a2);
}

_BYTE *initializeBufferWithCopyOfBuffer for EncodableProperty(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for AnnotationPosition(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v6;
  int v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF7)
    goto LABEL_17;
  if (a2 + 9 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 9) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 9;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 9;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 9;
  }
LABEL_17:
  if (*a1 <= 9u)
    v6 = 9;
  else
    v6 = *a1;
  v7 = v6 - 10;
  if (*a1 < 9u)
    v8 = -1;
  else
    v8 = v7;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for AnnotationPosition(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 9 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 9) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF6)
    return ((uint64_t (*)(void))((char *)&loc_2141EAC54 + 4 * byte_214427407[v4]))();
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_2141EAC88 + 4 * byte_214427402[v4]))();
}

uint64_t sub_2141EAC88(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2141EAC90(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2141EAC98);
  return result;
}

uint64_t sub_2141EACA4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2141EACACLL);
  *(_BYTE *)result = a2 + 9;
  return result;
}

uint64_t sub_2141EACB0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2141EACB8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AnnotationPosition()
{
  return &type metadata for AnnotationPosition;
}

ValueMetadata *type metadata accessor for AnnotationContext()
{
  return &type metadata for AnnotationContext;
}

_WORD *initializeBufferWithCopyOfBuffer for ChartSelectionState(_WORD *result, _WORD *a2)
{
  *result = *a2;
  return result;
}

ValueMetadata *type metadata accessor for AnnotationOverflowResolution()
{
  return &type metadata for AnnotationOverflowResolution;
}

ValueMetadata *type metadata accessor for AnnotationOverflowResolution.Strategy()
{
  return &type metadata for AnnotationOverflowResolution.Strategy;
}

ValueMetadata *type metadata accessor for AnnotationOverflowResolution.Boundary()
{
  return &type metadata for AnnotationOverflowResolution.Boundary;
}

uint64_t getEnumTagSinglePayload for SgAnnotation.OverflowResolution(unsigned __int16 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v6;
  int v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFB)
    goto LABEL_17;
  if (a2 + 65285 <= 0xFFFEFFFF)
    v2 = 2;
  else
    v2 = 4;
  if (a2 + 65285 < 0xFF0000)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 16)) - 65285;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
      return (*a1 | (v4 << 16)) - 65285;
    }
    v4 = *((unsigned __int8 *)a1 + 2);
    if (*((_BYTE *)a1 + 2))
      return (*a1 | (v4 << 16)) - 65285;
  }
LABEL_17:
  if (*(unsigned __int8 *)a1 <= 5u)
    v6 = 5;
  else
    v6 = *(unsigned __int8 *)a1;
  v7 = v6 - 6;
  if (*(unsigned __int8 *)a1 < 3u)
    v8 = -1;
  else
    v8 = v7;
  return (v8 + 1);
}

uint64_t _s6Charts28AnnotationOverflowResolutionVwst_0(_WORD *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 65285 <= 0xFFFEFFFF)
    v3 = 2;
  else
    v3 = 4;
  if (a3 + 65285 < 0xFF0000)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_2141EAE28 + 4 * byte_214427411[v4]))();
  *a1 = a2 - 251;
  return ((uint64_t (*)(void))((char *)sub_2141EAE5C + 4 * byte_21442740C[v4]))();
}

uint64_t sub_2141EAE5C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_2141EAE64(uint64_t result, int a2)
{
  *(_WORD *)(result + 2) = 0;
  if (a2)
    JUMPOUT(0x2141EAE6CLL);
  return result;
}

uint64_t sub_2141EAE78(uint64_t result, int a2)
{
  *(_DWORD *)(result + 2) = 0;
  if (!a2)
    JUMPOUT(0x2141EAE80);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_2141EAE84(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_2141EAE8C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 2) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AnnotationBoundaryResolution()
{
  return &type metadata for AnnotationBoundaryResolution;
}

uint64_t _s6Charts28AnnotationOverflowResolutionV8StrategyVwet_0(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v6;
  int v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFB)
    goto LABEL_17;
  if (a2 + 5 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 5) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 5;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 5;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 5;
  }
LABEL_17:
  if (*a1 <= 5u)
    v6 = 5;
  else
    v6 = *a1;
  v7 = v6 - 6;
  if (*a1 < 3u)
    v8 = -1;
  else
    v8 = v7;
  return (v8 + 1);
}

uint64_t _s6Charts28AnnotationOverflowResolutionV8StrategyVwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_2141EAF94 + 4 * byte_21442741B[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_2141EAFC8 + 4 * byte_214427416[v4]))();
}

uint64_t sub_2141EAFC8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2141EAFD0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2141EAFD8);
  return result;
}

uint64_t sub_2141EAFE4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2141EAFECLL);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_2141EAFF0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2141EAFF8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AnnotationBoundaryResolution.Strategy()
{
  return &type metadata for AnnotationBoundaryResolution.Strategy;
}

ValueMetadata *type metadata accessor for AnnotationBoundaryResolution.Boundary()
{
  return &type metadata for AnnotationBoundaryResolution.Boundary;
}

_UNKNOWN **sub_2141EB024()
{
  return &off_254D69490;
}

uint64_t sub_2141EB030()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_2141EB038()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
    type metadata accessor for ModifiedChartContent_Annotate.AnnotationBody();
  return result;
}

_QWORD *sub_2141EB104(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v8 = *(_DWORD *)(v7 + 80);
  v9 = v8 & 0xF8 | 7;
  if (*(_QWORD *)(v7 + 64) <= 0x10uLL)
    v10 = 16;
  else
    v10 = *(_QWORD *)(v7 + 64);
  v11 = v8 | *(_DWORD *)(v5 + 80);
  if ((v11 & 0x1000F8) != 0
    || v10 + ((v9 + (((v6 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 10) & ~v9) + 1 > 0x18)
  {
    v13 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v13 + (((v11 & 0xF8 | 7u) + 16) & ~(unint64_t)(v11 & 0xF8 | 7u)));
  }
  else
  {
    v14 = ~v9;
    (*(void (**)(_QWORD *, _QWORD *))(v5 + 16))(a1, a2);
    *((_BYTE *)v4 + v6) = *((_BYTE *)a2 + v6);
    v15 = ((unint64_t)v4 + v6) & 0xFFFFFFFFFFFFFFF8;
    v16 = ((unint64_t)a2 + v6) & 0xFFFFFFFFFFFFFFF8;
    *(_OWORD *)(v15 + 8) = *(_OWORD *)(v16 + 8);
    v17 = (v15 + 31) & 0xFFFFFFFFFFFFFFF8;
    v18 = (v16 + 31) & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v17 = *(_QWORD *)v18;
    *(_WORD *)(v17 + 8) = *(_WORD *)(v18 + 8);
    v19 = (_QWORD *)((v17 + v9 + 10) & v14);
    v20 = (_QWORD *)((v18 + v9 + 10) & v14);
    v21 = *((unsigned __int8 *)v20 + v10);
    if (v21 >= 2)
    {
      if (v10 <= 3)
        v22 = v10;
      else
        v22 = 4;
      __asm { BR              X12 }
    }
    if (v21 != 1)
    {
      (*(void (**)(_QWORD *))(v7 + 16))(v19);
      *((_BYTE *)v19 + v10) = 0;
      return v4;
    }
    v23 = v20[1];
    *v19 = *v20;
    *(_QWORD *)(((v17 + v9 + 10) & v14) + 8) = v23;
    *((_BYTE *)v19 + v10) = 1;
  }
  swift_retain();
  return v4;
}

uint64_t sub_2141EB2E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int v8;
  uint64_t v9;

  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v4 + 8))();
  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 24) - 8);
  v7 = *(_QWORD *)(v5 + 64);
  if (v7 <= 0x10)
    v7 = 16;
  v6 = *(_DWORD *)(v5 + 80) & 0xF8 | 7;
  v8 = *(unsigned __int8 *)(((((((*(_QWORD *)(v4 + 64) + a1) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8)
                            + v6
                            + 10) & ~v6)
                          + v7);
  if (v8 >= 2)
  {
    if (v7 <= 3)
      v9 = v7;
    else
      v9 = 4;
    __asm { BR              X14 }
  }
  if (v8 == 1)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t sub_2141EB3EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  char v23;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 16))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = v7 + a1;
  v9 = v7 + a2;
  *(_BYTE *)v8 = *(_BYTE *)v9;
  v8 &= 0xFFFFFFFFFFFFFFF8;
  v9 &= 0xFFFFFFFFFFFFFFF8;
  *(_OWORD *)(v8 + 8) = *(_OWORD *)(v9 + 8);
  v10 = (v8 + 31) & 0xFFFFFFFFFFFFFFF8;
  v11 = (v9 + 31) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v10 = *(_QWORD *)v11;
  *(_WORD *)(v10 + 8) = *(_WORD *)(v11 + 8);
  v12 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v13 = *(_DWORD *)(v12 + 80) & 0xF8;
  v14 = v13 + 17;
  v15 = v13 + 17 + v10;
  v16 = ~v13 & 0xFFFFFFFFFFFFFFF8;
  v17 = (_QWORD *)(v15 & v16);
  v18 = (_QWORD *)((v14 + v11) & v16);
  if (*(_QWORD *)(v12 + 64) <= 0x10uLL)
    v19 = 16;
  else
    v19 = *(_QWORD *)(v12 + 64);
  v20 = *((unsigned __int8 *)v18 + v19);
  if (v20 >= 2)
  {
    if (v19 <= 3)
      v21 = v19;
    else
      v21 = 4;
    __asm { BR              X13 }
  }
  if (v20 == 1)
  {
    v22 = v18[1];
    *v17 = *v18;
    *(_QWORD *)((v15 & v16) + 8) = v22;
    swift_retain();
    v23 = 1;
  }
  else
  {
    (*(void (**)(_QWORD *))(v12 + 16))(v17);
    v23 = 0;
  }
  *((_BYTE *)v17 + v19) = v23;
  return a1;
}

uint64_t sub_2141EB54C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 24))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = v7 + a1;
  v9 = v7 + a2;
  *(_BYTE *)v8 = *(_BYTE *)v9;
  v8 &= 0xFFFFFFFFFFFFFFF8;
  v9 &= 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)(v8 + 8) = *(_QWORD *)(v9 + 8);
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v9 + 16);
  v10 = (v8 + 31) & 0xFFFFFFFFFFFFFFF8;
  v11 = (v9 + 31) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v10 = *(_QWORD *)v11;
  *(_BYTE *)(v10 + 8) = *(_BYTE *)(v11 + 8);
  *(_BYTE *)(v10 + 9) = *(_BYTE *)(v11 + 9);
  v12 = *(_QWORD *)(a3 + 24);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_DWORD *)(v13 + 80) & 0xF8;
  v15 = v14 + 17;
  v16 = v14 + 17 + v10;
  v17 = ~v14 & 0xFFFFFFFFFFFFFFF8;
  v18 = (_QWORD *)(v16 & v17);
  v19 = v15 + v11;
  v20 = (_QWORD *)(v19 & v17);
  if ((v16 & v17) != (v19 & v17))
  {
    if (*(_QWORD *)(v13 + 64) <= 0x10uLL)
      v21 = 16;
    else
      v21 = *(_QWORD *)(v13 + 64);
    v22 = *((unsigned __int8 *)v18 + v21);
    if (v22 >= 2)
    {
      if (v21 <= 3)
        v23 = v21;
      else
        v23 = 4;
      __asm { BR              X12 }
    }
    if (v22 == 1)
      swift_release();
    else
      (*(void (**)(_QWORD *, uint64_t))(v13 + 8))(v18, v12);
    v24 = *((unsigned __int8 *)v20 + v21);
    if (v24 >= 2)
    {
      if (v21 <= 3)
        v25 = v21;
      else
        v25 = 4;
      __asm { BR              X12 }
    }
    if (v24 == 1)
    {
      v26 = v20[1];
      *v18 = *v20;
      v18[1] = v26;
      *((_BYTE *)v18 + v21) = 1;
      swift_retain();
    }
    else
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v13 + 16))(v18, v20, v12);
      *((_BYTE *)v18 + v21) = 0;
    }
  }
  return a1;
}

uint64_t sub_2141EB768(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _OWORD *v17;
  _OWORD *v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  char v22;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 32))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = v7 + a1;
  v9 = v7 + a2;
  *(_BYTE *)v8 = *(_BYTE *)v9;
  v8 &= 0xFFFFFFFFFFFFFFF8;
  v9 &= 0xFFFFFFFFFFFFFFF8;
  *(_OWORD *)(v8 + 8) = *(_OWORD *)(v9 + 8);
  v10 = (v8 + 31) & 0xFFFFFFFFFFFFFFF8;
  v11 = (v9 + 31) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v10 = *(_QWORD *)v11;
  *(_WORD *)(v10 + 8) = *(_WORD *)(v11 + 8);
  v12 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v13 = *(_DWORD *)(v12 + 80) & 0xF8;
  v14 = v13 + 17;
  v15 = v13 + 17 + v10;
  v16 = ~v13 & 0xFFFFFFFFFFFFFFF8;
  v17 = (_OWORD *)(v15 & v16);
  v18 = (_OWORD *)((v14 + v11) & v16);
  if (*(_QWORD *)(v12 + 64) <= 0x10uLL)
    v19 = 16;
  else
    v19 = *(_QWORD *)(v12 + 64);
  v20 = *((unsigned __int8 *)v18 + v19);
  if (v20 >= 2)
  {
    if (v19 <= 3)
      v21 = v19;
    else
      v21 = 4;
    __asm { BR              X13 }
  }
  if (v20 == 1)
  {
    *v17 = *v18;
    v22 = 1;
  }
  else
  {
    (*(void (**)(_OWORD *))(v12 + 32))(v17);
    v22 = 0;
  }
  *((_BYTE *)v17 + v19) = v22;
  return a1;
}

uint64_t sub_2141EB8C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _OWORD *v18;
  uint64_t v19;
  _OWORD *v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  char v26;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 40))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = v7 + a1;
  v9 = v7 + a2;
  *(_BYTE *)v8 = *(_BYTE *)v9;
  v8 &= 0xFFFFFFFFFFFFFFF8;
  v9 &= 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)(v8 + 8) = *(_QWORD *)(v9 + 8);
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v9 + 16);
  v10 = (v8 + 31) & 0xFFFFFFFFFFFFFFF8;
  v11 = (v9 + 31) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v10 = *(_QWORD *)v11;
  *(_BYTE *)(v10 + 8) = *(_BYTE *)(v11 + 8);
  *(_BYTE *)(v10 + 9) = *(_BYTE *)(v11 + 9);
  v12 = *(_QWORD *)(a3 + 24);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_DWORD *)(v13 + 80) & 0xF8;
  v15 = v14 + 17;
  v16 = v14 + 17 + v10;
  v17 = ~v14 & 0xFFFFFFFFFFFFFFF8;
  v18 = (_OWORD *)(v16 & v17);
  v19 = v15 + v11;
  v20 = (_OWORD *)(v19 & v17);
  if ((v16 & v17) != (v19 & v17))
  {
    if (*(_QWORD *)(v13 + 64) <= 0x10uLL)
      v21 = 16;
    else
      v21 = *(_QWORD *)(v13 + 64);
    v22 = *((unsigned __int8 *)v18 + v21);
    if (v22 >= 2)
    {
      if (v21 <= 3)
        v23 = v21;
      else
        v23 = 4;
      __asm { BR              X12 }
    }
    if (v22 == 1)
      swift_release();
    else
      (*(void (**)(_OWORD *, uint64_t))(v13 + 8))(v18, v12);
    v24 = *((unsigned __int8 *)v20 + v21);
    if (v24 >= 2)
    {
      if (v21 <= 3)
        v25 = v21;
      else
        v25 = 4;
      __asm { BR              X12 }
    }
    if (v24 == 1)
    {
      *v18 = *v20;
      v26 = 1;
    }
    else
    {
      (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v13 + 32))(v18, v20, v12);
      v26 = 0;
    }
    *((_BYTE *)v18 + v21) = v26;
  }
  return a1;
}

uint64_t sub_2141EBADC(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  char v13;
  int v14;
  unsigned int v16;
  int v17;
  unsigned int v18;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v7 = 16;
  if (*(_QWORD *)(v6 + 64) > 0x10uLL)
    v7 = *(_QWORD *)(v6 + 64);
  if (v5 <= 0xFE)
    v8 = 254;
  else
    v8 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v9 = *(_QWORD *)(v4 + 64);
  v10 = *(_DWORD *)(v6 + 80) & 0xF8 | 7;
  v11 = a2 - v8;
  if (a2 <= v8)
    goto LABEL_24;
  v12 = v7 + ((v10 + (((v9 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 10) & ~v10) + 1;
  v13 = 8 * v12;
  if (v12 <= 3)
  {
    v16 = ((v11 + ~(-1 << v13)) >> v13) + 1;
    if (HIWORD(v16))
    {
      v14 = *(_DWORD *)(a1 + v12);
      if (!v14)
        goto LABEL_24;
      goto LABEL_17;
    }
    if (v16 > 0xFF)
    {
      v14 = *(unsigned __int16 *)(a1 + v12);
      if (!*(_WORD *)(a1 + v12))
        goto LABEL_24;
      goto LABEL_17;
    }
    if (v16 < 2)
    {
LABEL_24:
      if (v5 >= 0xFE)
        return (*(uint64_t (**)(void))(v4 + 48))();
      v18 = *(unsigned __int8 *)(((((((v9 + a1) & 0xFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFF8) + v10 + 10) & ~v10)
                               + v7);
      if (v18 >= 2)
        return (v18 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v14 = *(unsigned __int8 *)(a1 + v12);
  if (!*(_BYTE *)(a1 + v12))
    goto LABEL_24;
LABEL_17:
  v17 = (v14 - 1) << v13;
  if (v12 > 3)
    v17 = 0;
  if (!(_DWORD)v12)
    return v8 + v17 + 1;
  if (v12 > 3)
    LODWORD(v12) = 4;
  return ((uint64_t (*)(void))((char *)&loc_2141EBBE8 + 4 * byte_214427448[(v12 - 1)]))();
}

void sub_2141EBC68(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int v8;
  uint64_t v9;
  size_t v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  int v14;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  v7 = *(_QWORD *)(v6 + 64);
  if (v7 <= 0x10)
    v7 = 16;
  if (*(_DWORD *)(v5 + 84) <= 0xFEu)
    v8 = 254;
  else
    v8 = *(_DWORD *)(v5 + 84);
  v9 = *(_DWORD *)(v6 + 80) & 0xF8 | 7;
  v10 = ((v9 + (((*(_QWORD *)(v5 + 64) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 10) & ~v9) + v7 + 1;
  if (a3 > v8)
  {
    if (v10 <= 3)
    {
      v13 = ((a3 - v8 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0;
  }
  if (v8 < a2)
  {
    v12 = ~v8 + a2;
    if (v10 < 4)
    {
      if ((_DWORD)v10)
      {
        v14 = v12 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if ((_DWORD)v10 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v10 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X16 }
}

void sub_2141EBF00()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
  JUMPOUT(0x2141EBEECLL);
}

void sub_2141EBF10()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
  JUMPOUT(0x2141EBEECLL);
}

void sub_2141EBF18()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
  JUMPOUT(0x2141EBEECLL);
}

void type metadata accessor for ModifiedChartContent_Annotate()
{
  JUMPOUT(0x2199CD874);
}

uint64_t getEnumTagSinglePayload for AxisMarkPreset.Storage(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s6Charts28AnnotationOverflowResolutionV8BoundaryV7StorageOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_2141EC00C + 4 * byte_21442745F[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_2141EC040 + 4 * byte_21442745A[v4]))();
}

uint64_t sub_2141EC040(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2141EC048(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2141EC050);
  return result;
}

uint64_t sub_2141EC05C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2141EC064);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_2141EC068(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2141EC070(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AnnotationOverflowResolution.Boundary.Storage()
{
  return &type metadata for AnnotationOverflowResolution.Boundary.Storage;
}

uint64_t getEnumTagSinglePayload for AnnotationOverflowResolution.Strategy.Storage(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v6;
  unsigned int v7;

  if (!a2)
    return 0;
  if (a2 < 0xFB)
  {
    v6 = *a1;
    if (v6 >= 3)
      v7 = v6 - 2;
    else
      v7 = 0;
    if (v7 >= 4)
      return v7 - 3;
    else
      return 0;
  }
  else
  {
    v2 = a2 + 5;
    if (a2 + 5 >= 0xFFFF00)
      v3 = 4;
    else
      v3 = 2;
    if (v2 >> 8 < 0xFF)
      v3 = 1;
    if (v2 >= 0x100)
      v4 = v3;
    else
      v4 = 0;
    return ((uint64_t (*)(void))((char *)&loc_2141EC0DC + 4 * byte_214427464[v4]))();
  }
}

uint64_t storeEnumTagSinglePayload for AnnotationOverflowResolution.Strategy.Storage(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  unsigned int v3;
  int v4;
  uint64_t v5;

  v3 = a3 + 5;
  if (a3 + 5 >= 0xFFFF00)
    v4 = 4;
  else
    v4 = 2;
  if (v3 >> 8 < 0xFF)
    v4 = 1;
  if (v3 >= 0x100)
    LODWORD(v5) = v4;
  else
    LODWORD(v5) = 0;
  if (a3 >= 0xFB)
    v5 = v5;
  else
    v5 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_2141EC188 + 4 * byte_21442746E[v5]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_2141EC1BC + 4 * byte_214427469[v5]))();
}

uint64_t sub_2141EC1BC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2141EC1C4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2141EC1CCLL);
  return result;
}

uint64_t sub_2141EC1D8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2141EC1E0);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_2141EC1E4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2141EC1EC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2141EC1F8(unsigned __int8 *a1)
{
  unsigned int v1;

  v1 = *a1;
  if (v1 >= 3)
    return v1 - 2;
  else
    return 0;
}

_BYTE *sub_2141EC20C(_BYTE *result, int a2)
{
  if (a2)
    *result = a2 + 2;
  return result;
}

ValueMetadata *type metadata accessor for AnnotationOverflowResolution.Strategy.Storage()
{
  return &type metadata for AnnotationOverflowResolution.Strategy.Storage;
}

uint64_t getEnumTagSinglePayload for AnnotationPosition.Storage(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF8)
    goto LABEL_17;
  if (a2 + 8 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 8) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 8;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 8;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 8;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 9;
  v8 = v6 - 9;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for AnnotationPosition.Storage(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_2141EC308 + 4 * byte_214427478[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_2141EC33C + 4 * byte_214427473[v4]))();
}

uint64_t sub_2141EC33C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2141EC344(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2141EC34CLL);
  return result;
}

uint64_t sub_2141EC358(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2141EC360);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_2141EC364(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2141EC36C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2141EC378(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_2141EC380(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for AnnotationPosition.Storage()
{
  return &type metadata for AnnotationPosition.Storage;
}

uint64_t sub_2141EC398()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_2141EC3A0()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t *sub_2141EC414(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  if (*(_QWORD *)(v4 + 64) <= 0x10uLL)
    v5 = 16;
  else
    v5 = *(_QWORD *)(v4 + 64);
  v6 = *(_DWORD *)(v4 + 80);
  if ((v6 & 0x1000F8) != 0 || (unint64_t)(v5 + 1) > 0x18)
  {
    v8 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v8 + ((unsigned __int16)((v6 & 0xF8) + 23) & (unsigned __int16)~(v6 & 0xF8) & 0x1F8));
  }
  else
  {
    v9 = *((unsigned __int8 *)a2 + v5);
    if (v9 >= 2)
    {
      if (v5 <= 3)
        v10 = v5;
      else
        v10 = 4;
      __asm { BR              X13 }
    }
    if (v9 != 1)
    {
      (*(void (**)(uint64_t *))(v4 + 16))(a1);
      *((_BYTE *)v3 + v5) = 0;
      return v3;
    }
    v11 = a2[1];
    *v3 = *a2;
    v3[1] = v11;
    *((_BYTE *)v3 + v5) = 1;
  }
  swift_retain();
  return v3;
}

uint64_t sub_2141EC528(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unsigned int v4;
  uint64_t v5;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) - 8);
  v3 = *(_QWORD *)(v2 + 64);
  if (v3 <= 0x10)
    v3 = 16;
  v4 = *(unsigned __int8 *)(a1 + v3);
  if (v4 < 2)
  {
    if (v4 == 1)
      return swift_release();
    else
      return (*(uint64_t (**)(void))(v2 + 8))();
  }
  else
  {
    if (v3 <= 3)
      v5 = v3;
    else
      v5 = 4;
    return ((uint64_t (*)(void))((char *)&loc_2141EC570 + 4 * byte_214427482[v5]))();
  }
}

_QWORD *sub_2141EC5C8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  if (*(_QWORD *)(v4 + 64) <= 0x10uLL)
    v5 = 16;
  else
    v5 = *(_QWORD *)(v4 + 64);
  v6 = *((unsigned __int8 *)a2 + v5);
  if (v6 >= 2)
  {
    if (v5 <= 3)
      v7 = v5;
    else
      v7 = 4;
    __asm { BR              X13 }
  }
  if (v6 == 1)
  {
    v8 = a2[1];
    *a1 = *a2;
    a1[1] = v8;
    swift_retain();
    v9 = 1;
  }
  else
  {
    (*(void (**)(_QWORD *))(v4 + 16))(a1);
    v9 = 0;
  }
  *((_BYTE *)a1 + v5) = v9;
  return a1;
}

_QWORD *sub_2141EC6A0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 24);
    v6 = *(_QWORD *)(v5 - 8);
    if (*(_QWORD *)(v6 + 64) <= 0x10uLL)
      v7 = 16;
    else
      v7 = *(_QWORD *)(v6 + 64);
    v8 = *((unsigned __int8 *)a1 + v7);
    if (v8 >= 2)
    {
      if (v7 <= 3)
        v9 = v7;
      else
        v9 = 4;
      __asm { BR              X12 }
    }
    if (v8 == 1)
      swift_release();
    else
      (*(void (**)(_QWORD *, _QWORD))(v6 + 8))(a1, *(_QWORD *)(a3 + 24));
    v10 = *((unsigned __int8 *)a2 + v7);
    if (v10 >= 2)
    {
      if (v7 <= 3)
        v11 = v7;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    if (v10 == 1)
    {
      v12 = a2[1];
      *a1 = *a2;
      a1[1] = v12;
      *((_BYTE *)a1 + v7) = 1;
      swift_retain();
    }
    else
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v6 + 16))(a1, a2, v5);
      *((_BYTE *)a1 + v7) = 0;
    }
  }
  return a1;
}

_OWORD *sub_2141EC830(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  if (*(_QWORD *)(v4 + 64) <= 0x10uLL)
    v5 = 16;
  else
    v5 = *(_QWORD *)(v4 + 64);
  v6 = *((unsigned __int8 *)a2 + v5);
  if (v6 >= 2)
  {
    if (v5 <= 3)
      v7 = v5;
    else
      v7 = 4;
    __asm { BR              X13 }
  }
  if (v6 == 1)
  {
    *a1 = *a2;
    v8 = 1;
  }
  else
  {
    (*(void (**)(_OWORD *))(v4 + 32))(a1);
    v8 = 0;
  }
  *((_BYTE *)a1 + v5) = v8;
  return a1;
}

_OWORD *sub_2141EC904(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  char v12;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 24);
    v6 = *(_QWORD *)(v5 - 8);
    if (*(_QWORD *)(v6 + 64) <= 0x10uLL)
      v7 = 16;
    else
      v7 = *(_QWORD *)(v6 + 64);
    v8 = *((unsigned __int8 *)a1 + v7);
    if (v8 >= 2)
    {
      if (v7 <= 3)
        v9 = v7;
      else
        v9 = 4;
      __asm { BR              X12 }
    }
    if (v8 == 1)
      swift_release();
    else
      (*(void (**)(_OWORD *, _QWORD))(v6 + 8))(a1, *(_QWORD *)(a3 + 24));
    v10 = *((unsigned __int8 *)a2 + v7);
    if (v10 >= 2)
    {
      if (v7 <= 3)
        v11 = v7;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    if (v10 == 1)
    {
      *a1 = *a2;
      v12 = 1;
    }
    else
    {
      (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v6 + 32))(a1, a2, v5);
      v12 = 0;
    }
    *((_BYTE *)a1 + v7) = v12;
  }
  return a1;
}

uint64_t sub_2141ECA90(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  int v6;
  unsigned int v8;
  int v9;
  unsigned int v10;

  v3 = 16;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 64) > 0x10uLL)
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 64);
  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_21;
  v4 = v3 + 1;
  v5 = 8 * (v3 + 1);
  if ((v3 + 1) <= 3)
  {
    v8 = ((a2 + ~(-1 << v5) - 254) >> v5) + 1;
    if (HIWORD(v8))
    {
      v6 = *(_DWORD *)(a1 + v4);
      if (!v6)
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v8 > 0xFF)
    {
      v6 = *(unsigned __int16 *)(a1 + v4);
      if (!*(_WORD *)(a1 + v4))
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v8 < 2)
    {
LABEL_21:
      v10 = *(unsigned __int8 *)(a1 + v3);
      if (v10 >= 2)
        return (v10 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v6 = *(unsigned __int8 *)(a1 + v4);
  if (!*(_BYTE *)(a1 + v4))
    goto LABEL_21;
LABEL_14:
  v9 = (v6 - 1) << v5;
  if (v4 > 3)
    v9 = 0;
  if (!(_DWORD)v4)
    return (v9 + 255);
  if (v4 > 3)
    LODWORD(v4) = 4;
  return ((uint64_t (*)(void))((char *)&loc_2141ECB54 + 4 * byte_2144274A5[(v4 - 1)]))();
}

void sub_2141ECBA0(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5;
  size_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 24) - 8) + 64);
  if (v5 <= 0x10)
    v5 = 16;
  v6 = v5 + 1;
  if (a3 < 0xFF)
  {
    v7 = 0;
  }
  else if (v6 <= 3)
  {
    v9 = ((a3 + ~(-1 << (8 * v6)) - 254) >> (8 * v6)) + 1;
    if (HIWORD(v9))
    {
      v7 = 4u;
    }
    else if (v9 >= 0x100)
    {
      v7 = 2;
    }
    else
    {
      v7 = v9 > 1;
    }
  }
  else
  {
    v7 = 1u;
  }
  if (a2 <= 0xFE)
    __asm { BR              X11 }
  v8 = a2 - 255;
  if (v6 < 4)
  {
    if ((_DWORD)v5 != -1)
    {
      v10 = v8 & ~(-1 << (8 * v6));
      bzero(a1, v6);
      if ((_DWORD)v6 == 3)
      {
        *a1 = v10;
        *((_BYTE *)a1 + 2) = BYTE2(v10);
      }
      else if ((_DWORD)v6 == 2)
      {
        *a1 = v10;
      }
      else
      {
        *(_BYTE *)a1 = v10;
      }
    }
  }
  else
  {
    bzero(a1, v5 + 1);
    *(_DWORD *)a1 = v8;
  }
  __asm { BR              X10 }
}

uint64_t sub_2141ECD48(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = 16;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 64) > 0x10uLL)
    v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 64);
  if (*(unsigned __int8 *)(a1 + v2) < 2u)
    return *(unsigned __int8 *)(a1 + v2);
  if (v2 <= 3)
    v3 = v2;
  else
    v3 = 4;
  return ((uint64_t (*)(void))((char *)&loc_2141ECD90 + 4 * byte_2144274B3[v3]))();
}

void sub_2141ECDD8(_BYTE *a1, unsigned int a2, uint64_t a3)
{
  size_t v4;
  unsigned int v5;
  unsigned int v6;
  int v7;

  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 64) <= 0x10uLL)
    v4 = 16;
  else
    v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 64);
  if (a2 > 1)
  {
    v5 = a2 - 2;
    if (v4 < 4)
    {
      v6 = v5 >> (8 * v4);
      v7 = v5 & ~(-1 << (8 * v4));
      a1[v4] = v6 + 2;
      bzero(a1, v4);
      if ((_DWORD)v4 == 3)
      {
        *(_WORD *)a1 = v7;
        a1[2] = BYTE2(v7);
      }
      else if ((_DWORD)v4 == 2)
      {
        *(_WORD *)a1 = v7;
      }
      else
      {
        *a1 = v7;
      }
    }
    else
    {
      a1[v4] = 2;
      bzero(a1, v4);
      *(_DWORD *)a1 = v5;
    }
  }
  else
  {
    a1[v4] = a2;
  }
}

unint64_t sub_2141ECEA4()
{
  unint64_t result;

  result = qword_254D69480;
  if (!qword_254D69480)
  {
    result = MEMORY[0x2199CD934](&unk_214427660, &type metadata for AnnotationPosition.Storage);
    atomic_store(result, (unint64_t *)&qword_254D69480);
  }
  return result;
}

unint64_t sub_2141ECEEC()
{
  unint64_t result;

  result = qword_254D69488;
  if (!qword_254D69488)
  {
    result = MEMORY[0x2199CD934](&unk_2144276C8, &type metadata for AnnotationOverflowResolution.Boundary.Storage);
    atomic_store(result, (unint64_t *)&qword_254D69488);
  }
  return result;
}

_UNKNOWN **sub_2141ECF30()
{
  return &protocol witness table for Never;
}

uint64_t sub_2141ECF3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE v5[8];
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 48);
  v3 = *(_QWORD *)(v0 + 64);
  v5[0] = *(_BYTE *)(v0 + 56);
  v6 = v3;
  return (*(uint64_t (**)(uint64_t, _BYTE *))(v1 + 40))(v2, v5);
}

uint64_t sub_2141ECF88(uint64_t a1, uint64_t a2)
{
  initializeWithTake for AnyChartContent(a2, a1);
  return a2;
}

uint64_t sub_2141ECFCC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_2141D8BF8(&qword_253F12228);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_2141ED014(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 < 0)
    return swift_retain();
  sub_2141DD130(a1, a2, a3 & 1);
  swift_retain();
  return swift_bridgeObjectRetain();
}

uint64_t sub_2141ED050()
{
  uint64_t *v0;

  sub_2141ED07C(v0[7], v0[8], v0[9]);
  return swift_deallocObject();
}

uint64_t sub_2141ED07C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((a3 & 0x8000000000000000) == 0)
  {
    sub_2141ED0BC(a1, a2, a3 & 1);
    swift_bridgeObjectRelease();
  }
  return swift_release();
}

uint64_t sub_2141ED0BC(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_release();
  else
    return swift_bridgeObjectRelease();
}

_QWORD *sub_2141ED0CC(_QWORD *a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*a1, a1[1], a1[2], a1[3], a1[4]);
  return a1;
}

uint64_t sub_2141ED100(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_2141D8BF8(&qword_253F14280);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_2141ED148(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SgGroup(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_2141ED18C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v4;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 48);
  v4 = *(_OWORD *)(v0 + 56);
  return (*(uint64_t (**)(uint64_t, __int128 *))(v1 + 32))(v2, &v4);
}

uint64_t sub_2141ED1F0()
{
  sub_214425874();
  sub_214425898();
  sub_21442546C();
  return sub_2144258B0();
}

uint64_t sub_2141ED240()
{
  sub_214425898();
  return sub_21442546C();
}

uint64_t sub_2141ED274()
{
  sub_214425874();
  sub_214425898();
  sub_21442546C();
  return sub_2144258B0();
}

uint64_t sub_2141ED2C0(_QWORD *a1, _QWORD *a2)
{
  if (*a1 == *a2)
    JUMPOUT(0x2199CCD7CLL);
  return 0;
}

uint64_t sub_2141ED2E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = (uint64_t *)(v1 + 24);
  swift_beginAccess();
  do
  {
    v5 = *v3;
    if (!*(_QWORD *)(*v3 + 16))
      goto LABEL_10;
    result = sub_214425868();
    v7 = -1 << *(_BYTE *)(v5 + 32);
    v8 = result & ~v7;
    if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
      goto LABEL_10;
    v9 = *(_QWORD *)(v5 + 48);
    if (*(_QWORD *)(v9 + 8 * v8) != a1)
    {
      v10 = ~v7;
      while (1)
      {
        v8 = (v8 + 1) & v10;
        if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
          break;
        if (*(_QWORD *)(v9 + 8 * v8) == a1)
          goto LABEL_2;
      }
LABEL_10:
      swift_beginAccess();
      sub_21420FE60(&v11, a1);
      swift_endAccess();
      return a1;
    }
LABEL_2:
    ;
  }
  while (!__CFADD__(a1++, 1));
  __break(1u);
  return result;
}

uint64_t sub_2141ED3E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  _QWORD v13[6];
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  _QWORD v19[6];
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  v3 = v2;
  sub_2144256F4();
  v19[0] = a2;
  swift_beginAccess();
  v5 = *(_QWORD *)(v2 + 16);
  if (*(_QWORD *)(v5 + 16) && (v6 = sub_214336C7C(v19), (v7 & 1) != 0))
  {
    v8 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v6);
  }
  else
  {
    swift_endAccess();
    sub_2144258BC();
    sub_214424DC4();
    sub_214425898();
    v22 = v16;
    v23 = v17;
    v24 = v18;
    v20 = v14;
    v21 = v15;
    v9 = sub_2144258A4();
    v8 = sub_2141ED2E4(v9);
    sub_2141ED7E0((uint64_t)v19, (uint64_t)v13);
    swift_beginAccess();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v12 = *(_QWORD *)(v3 + 16);
    *(_QWORD *)(v3 + 16) = 0x8000000000000000;
    sub_2142A249C(v8, v13, isUniquelyReferenced_nonNull_native);
    *(_QWORD *)(v3 + 16) = v12;
    swift_bridgeObjectRelease();
    sub_2141ED82C((uint64_t)v13);
  }
  swift_endAccess();
  sub_2141ED82C((uint64_t)v19);
  return v8;
}

uint64_t sub_2141ED570(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = sub_2141ED3E4(a1, *(_QWORD *)(v2 + 32));
  v5 = *(_QWORD *)(v2 + 32);
  *(_QWORD *)(v2 + 32) = v4;
  result = a2();
  *(_QWORD *)(v2 + 32) = v5;
  return result;
}

uint64_t sub_2141ED5D0()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for IDGenerator()
{
  return objc_opt_self();
}

uint64_t destroy for IDGenerator.Key(uint64_t a1)
{
  return _s6Charts15AnyChartContentVwxx_0(a1 + 8);
}

uint64_t initializeWithCopy for IDGenerator.Key(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a1 + 8, a2 + 8);
  return a1;
}

_QWORD *assignWithCopy for IDGenerator.Key(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  sub_2141DEA14(a1 + 1, a2 + 1);
  return a1;
}

__n128 initializeWithTake for IDGenerator.Key(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for IDGenerator.Key(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  _s6Charts15AnyChartContentVwxx_0(a1 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for IDGenerator.Key(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for IDGenerator.Key(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 32) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for IDGenerator.Key()
{
  return &type metadata for IDGenerator.Key;
}

unint64_t sub_2141ED79C()
{
  unint64_t result;

  result = qword_253F142E8;
  if (!qword_253F142E8)
  {
    result = MEMORY[0x2199CD934](&unk_214427780, &type metadata for IDGenerator.Key);
    atomic_store(result, (unint64_t *)&qword_253F142E8);
  }
  return result;
}

uint64_t sub_2141ED7E0(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  *(_QWORD *)a2 = *(_QWORD *)a1;
  v3 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 32) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2 + 8, a1 + 8);
  return a2;
}

uint64_t sub_2141ED82C(uint64_t a1)
{
  _s6Charts15AnyChartContentVwxx_0(a1 + 8);
  return a1;
}

void sub_2141ED854()
{
  sub_214425628();
  __break(1u);
}

uint64_t sub_2141ED89C()
{
  return j___s6Charts11BuilderPairVA2A12ChartContentRzAaDR_rlE05_makedE07content6inputsAA01_dE7OutputsV7SwiftUI11_GraphValueVyACyxq_GG_AA01_dE6InputsVtFZ_0();
}

uint64_t sub_2141ED8B4()
{
  return 0;
}

uint64_t static BuilderPair<>._chartContentCount(inputs:)()
{
  return 0;
}

uint64_t protocol witness for static ChartContent._makeChartContent(content:inputs:) in conformance <> BuilderConditional<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  int8x16_t v6;

  v6 = vextq_s8(*(int8x16_t *)(a4 - 16), *(int8x16_t *)(a4 - 16), 8uLL);
  v4 = MEMORY[0x2199CD934](&unk_21442EAF8, a3, &v6);
  return j___s6Charts11BuilderPairVA2A12ChartContentRzAaDR_rlE05_makedE07content6inputsAA01_dE7OutputsV7SwiftUI11_GraphValueVyACyxq_GG_AA01_dE6InputsVtFZ_0(v4);
}

uint64_t protocol witness for static ChartContent._chartContentCount(inputs:) in conformance <> BuilderConditional<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int8x16_t v4;

  v4 = vextq_s8(*(int8x16_t *)(a3 - 16), *(int8x16_t *)(a3 - 16), 8uLL);
  MEMORY[0x2199CD934](&unk_21442EAF8, a2, &v4);
  return 0;
}

void protocol witness for ChartContent.body.getter in conformance AnyChartContent()
{
  sub_214425628();
  __break(1u);
}

uint64_t protocol witness for static ChartContent._chartContentCount(inputs:) in conformance AnyChartContent()
{
  return 0;
}

uint64_t sub_2141ED9B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a3 - 8);
  MEMORY[0x2199CD934](&unk_214430D20, a2, &v4);
  return 0;
}

void *sub_2141ED9F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, int a5@<W4>, int a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, double a10@<D0>)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  void (*v31)(char *, char *, uint64_t);
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(uint64_t, uint64_t);
  uint64_t v39;
  void (*v40)(char *, uint64_t);
  int8x16_t v41;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  int v52;
  void *v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  char v60;
  _BYTE v61[140];
  _BYTE v62[329];
  _BYTE v63[20];
  _BYTE v64[336];
  __int128 v65;
  char v66;
  uint64_t v67;
  __int128 v68;
  char v69;
  __int128 v70;

  v54 = a6;
  v52 = a5;
  v51 = a4;
  v50 = a3;
  v49 = a2;
  v53 = a9;
  v14 = type metadata accessor for PlottableValue(0, a7, a8, a4);
  v55 = *(_QWORD *)(v14 - 8);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v46 = (uint64_t)&v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v43 - v18;
  v47 = *(_QWORD *)(a7 - 8);
  v20 = MEMORY[0x24BDAC7A8](v17);
  v45 = (char *)&v43 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v20);
  v23 = (char *)&v43 - v22;
  v25 = type metadata accessor for PlottableValue.Storage(0, a7, a8, v24);
  v26 = *(_QWORD *)(v25 - 8);
  MEMORY[0x24BDAC7A8](v25);
  v28 = (char *)&v43 - v27;
  v48 = v14;
  v29 = *(int *)(v14 + 36);
  v56 = a1;
  (*(void (**)(char *, uint64_t, uint64_t))(v26 + 16))(v28, a1 + v29, v25);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v30 = &v28[*(int *)(swift_getTupleTypeMetadata2() + 48)];
    v31 = *(void (**)(char *, char *, uint64_t))(v47 + 32);
    v44 = v23;
    v31(v23, v28, a7);
    v32 = v45;
    v31(v45, v30, a7);
    v33 = *(_QWORD *)v56;
    v34 = *(_QWORD *)(v56 + 8);
    v35 = *(_BYTE *)(v56 + 16);
    v36 = *(_QWORD *)(v56 + 24);
    static PlottableValue.value(_:_:)(*(_QWORD *)v56, v34, v35, v36, a7, a8, (uint64_t)v19);
    v37 = v46;
    static PlottableValue.value(_:_:)(v33, v34, v35, v36, a7, a8, v46);
    sub_2143D8D5C((uint64_t)v19, v37, a7, a8, (uint64_t)&v65);
    v38 = *(void (**)(uint64_t, uint64_t))(v55 + 8);
    v39 = v48;
    v38(v37, v48);
    v38((uint64_t)v19, v39);
    v40 = *(void (**)(char *, uint64_t))(v47 + 8);
    v40(v32, a7);
    v40(v44, a7);
    sub_2141EDFD8((uint64_t)&v65, (uint64_t)v64);
  }
  else
  {
    v39 = v48;
    (*(void (**)(char *, uint64_t, uint64_t))(v55 + 16))(v19, v56, v48);
    sub_2143D046C((uint64_t)v19, a7, a8, (uint64_t)&v65);
    v63[12] = v66;
    *(_OWORD *)v62 = v65;
    v62[16] = v66;
    *(_DWORD *)&v62[17] = *(_DWORD *)v61;
    *(_DWORD *)&v62[20] = *(_DWORD *)&v61[3];
    *(_QWORD *)&v62[24] = v67;
    *(_OWORD *)&v62[32] = v68;
    v62[48] = v69;
    *(_DWORD *)&v62[52] = *(_DWORD *)((char *)&v57 + 3);
    *(_DWORD *)&v62[49] = v57;
    *(_OWORD *)&v62[56] = v70;
    *(_WORD *)&v62[72] = 0;
    v62[74] = 0;
    *(_DWORD *)&v62[75] = *(_DWORD *)&v63[7];
    v62[79] = v63[11];
    *(_QWORD *)&v62[80] = 0;
    *(_QWORD *)&v62[88] = 0;
    v62[96] = -4;
    *(_DWORD *)&v62[97] = *(_DWORD *)v63;
    *(_DWORD *)&v62[100] = *(_DWORD *)&v63[3];
    *(_QWORD *)&v62[104] = 0;
    *(_QWORD *)&v62[112] = 0;
    v62[120] = -4;
    sub_2141EFEF4((uint64_t)v62);
    sub_2141EDFD8((uint64_t)v62, (uint64_t)v64);
    (*(void (**)(char *, uint64_t))(v26 + 8))(v28, v25);
  }
  v57 = 0;
  v58 = 1;
  v59 = 0;
  v60 = 1;
  v41 = sub_2141EFF40((uint64_t)&v57);
  (*(void (**)(uint64_t, uint64_t, int8x16_t))(v55 + 8))(v56, v39, v41);
  sub_2141EDFD8((uint64_t)v64, (uint64_t)v61);
  sub_2141EDFD8((uint64_t)v61, (uint64_t)v62);
  sub_2141EDFD8((uint64_t)&v57, (uint64_t)&v62[144]);
  *(_QWORD *)&v62[288] = v49;
  v62[296] = v50;
  *(_QWORD *)&v62[304] = v51;
  v62[312] = v52;
  *(double *)&v62[320] = a10;
  v62[328] = v54 & 1;
  return memcpy(v53, v62, 0x149uLL);
}

void *SectorMark.init<A>(angle:innerRadius:outerRadius:angularInset:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, int a5@<W4>, double a6@<X5>, char a7@<W6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10)
{
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  _BYTE *v19;
  double v20;
  _BYTE v22[12];
  int v23;
  uint64_t v24;
  int v25;
  void *v26;
  _BYTE v27[344];

  v25 = a5;
  v24 = a4;
  v23 = a3;
  v26 = a9;
  v15 = type metadata accessor for PlottableValue(0, a8, a10, a4);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = MEMORY[0x24BDAC7A8](v15);
  v19 = &v22[-v18];
  (*(void (**)(_BYTE *, uint64_t, uint64_t, __n128))(v16 + 16))(&v22[-v18], a1, v15, v17);
  v20 = a6;
  if ((a7 & 1) != 0)
    v20 = 0.0;
  sub_2141ED9F0((uint64_t)v19, a2, v23, v24, v25, 0, a8, a10, v27, v20);
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(a1, v15);
  return memcpy(v26, v27, 0x149uLL);
}

void static SectorMark._layoutChartContent(_:_:)(uint64_t a1, uint64_t a2)
{
  _BYTE v4[144];
  _BYTE v5[144];

  sub_2141EDFD8(a1, (uint64_t)v5);
  sub_2141EDFD8(a1 + 144, (uint64_t)v4);
  *(_BYTE *)(*(_QWORD *)a2 + 1194) = 1;
  swift_beginAccess();
  sub_214200BC0((uint64_t)v5);
  sub_214200BC0((uint64_t)v4);
  sub_214202388((uint64_t)v5);
  sub_214202388((uint64_t)v4);
}

uint64_t sub_2141EDFD8(uint64_t a1, uint64_t a2)
{
  initializeWithTake for MarkPosition(a2, a1);
  return a2;
}

void static SectorMark._renderChartContent(_:_:)(const void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[288];
  _BYTE v11[344];

  v9 = type metadata accessor for ChartContentRenderContext.Environment(0);
  MEMORY[0x24BDAC7A8](v9);
  v4 = sub_2141D8BF8(&qword_253F134C8);
  MEMORY[0x24BDAC7A8](v4);
  v5 = sub_214424308();
  MEMORY[0x24BDAC7A8](v5);
  v6 = type metadata accessor for SgSector(0);
  MEMORY[0x24BDAC7A8](v6);
  memcpy(v11, a1, 0x149uLL);
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_QWORD *)(v7 + 344);
  *(_QWORD *)(v7 + 344) = 0;
  sub_2141EDFD8((uint64_t)v11, (uint64_t)v10);
  swift_retain();
  sub_2141FF3BC((uint64_t)v10);
  *(_QWORD *)(v7 + 344) = v8;
  __asm { BR              X11 }
}

uint64_t sub_2141EE1D0@<X0>(double a1@<X8>, __n128 a2@<Q0>, __n128 a3@<Q1>, __n128 a4@<Q2>)
{
  uint64_t v4;

  a4.n128_f64[0] = a1;
  a3.n128_u64[0] = 0;
  if (a1 <= 0.0)
    a4.n128_f64[0] = 0.0;
  if (a2.n128_f64[0] < a4.n128_f64[0])
    a4.n128_f64[0] = a2.n128_f64[0];
  return ((uint64_t (*)(__n128, __n128, __n128))((char *)sub_2141EE220
                                                         + 4 * byte_214427844[*(unsigned __int8 *)(v4 + 3920)]))(a2, a3, a4);
}

uint64_t sub_2141EE220@<X0>(double a1@<X8>, double a2@<D2>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  double v24;
  double v25;
  double v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double *v32;
  double v33;
  double v34;
  double v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t result;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int *v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;

  v14 = 0.0;
  if (a1 > 0.0)
    v14 = a1;
  if (a2 >= v14)
    v16 = v14;
  else
    v16 = a2;
  v17 = v6 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_environment;
  swift_beginAccess();
  if ((*(_BYTE *)(v17 + 168) & 1) != 0)
  {
    if (qword_253F11AB8 != -1)
      swift_once();
    v18 = &qword_253F1C878;
  }
  else
  {
    v18 = (uint64_t *)(v17 + 160);
  }
  v19 = *v18;
  sub_2141EEE24(v17 + *(int *)(*(_QWORD *)(v2 + 96) + 44), v5);
  v20 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v8);
  *(_QWORD *)(v2 + 64) = v19;
  if (v20 == 1)
  {
    if (qword_253F121C8 != -1)
      swift_once();
    v21 = sub_2141EEE6C(v8, (uint64_t)qword_253F1C998);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v3, v21, v8);
    sub_2141EEE84(v5);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v3, v5, v8);
  }
  v22 = v12 * 360.0 / v13;
  v23 = *(_QWORD *)(v2 + 3944);
  v24 = v11 * 360.0 / v13;
  sub_2141EEEC4(v17, v10);
  sub_2141FFC88(v10, v4 + v9[12]);
  v25 = (*(double *)(v6 + 24) + *(double *)(v6 + 32)) * 0.5;
  v26 = (*(double *)(v6 + 40) + *(double *)(v6 + 48)) * 0.5;
  v27 = v17;
  v28 = *(_BYTE *)(v2 + 3952);
  v29 = *(int *)(*(_QWORD *)(v2 + 96) + 64);
  *(_QWORD *)(v2 + 80) = v27;
  v30 = *(_QWORD *)(v27 + v29);
  *(_QWORD *)v4 = 0;
  *(double *)(v4 + 8) = v22;
  *(double *)(v4 + 16) = v24;
  *(double *)(v4 + 24) = v16;
  *(double *)(v4 + 32) = a2;
  *(_QWORD *)(v2 + 56) = v23;
  *(_QWORD *)(v4 + 40) = v23;
  *(_QWORD *)(v4 + 48) = *(_QWORD *)(v2 + 64);
  v31 = v4 + v9[11];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v31, v3, v8);
  v32 = (double *)(v4 + v9[13]);
  *v32 = v25;
  v32[1] = v26;
  *(_BYTE *)(v4 + v9[14]) = v28;
  *(_QWORD *)(v4 + v9[15]) = v30;
  if ((*(_DWORD *)(v2 + 76) & 1) == 0)
  {
    swift_release();
    v60 = swift_allocBox();
    result = sub_2141EF764(v4, v61);
    v63 = v60 | 0x5000000000000000;
    goto LABEL_39;
  }
  sub_214424404();
  sub_21436E3B8(v31, v28, v2 + 2480, v16, a2, (v22 + 270.0) * 3.14159265 / 180.0, (v24 + 270.0) * 3.14159265 / 180.0, *(double *)(v2 + 56), v33, v34, v35, v36, *(uint64_t *)&v25, *(uint64_t *)&v26);
  sub_2144246D4();
  v38 = v37;
  v40 = v39;
  v42 = v41;
  v44 = v43;
  sub_2141EEF08(v2 + 2480);
  v45 = v2 + 3768;
  sub_2141EDFD8(v2 + 3768, v2 + 3480);
  sub_2141EEF54(v2 + 3624, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t))sub_2141DCFC0);
  v46 = sub_2143E5A38();
  sub_2141EEF54(v2 + 3624, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t))sub_2141EF040);
  if ((v46 & 1) != 0)
    v47 = v2 + 3768;
  else
    v47 = v2 + 3624;
  if ((v46 & 1) != 0)
    v45 = v2 + 3624;
  *(_DWORD *)(v2 + 64) = v46 & 1;
  *(_DWORD *)(v2 + 76) = !(v46 & 1);
  sub_2141EDFD8(v47, v2 + 2120);
  sub_2141EDFD8(v45, v2 + 2264);
  sub_2141EDFD8(v2 + 2120, v2 + 3120);
  sub_2141EDFD8(v2 + 2264, v2 + 2976);
  sub_2141EDFD8(v2 + 2264, v2 + 1976);
  v48 = sub_2141EF1D0(v2 + 1976);
  if (v48 == 2)
  {
    v64 = sub_2141EF754(v2 + 1976);
    v65 = *(_QWORD *)v64;
    v66 = *(_QWORD *)(v64 + 8);
    v67 = *(_BYTE *)(v64 + 16);
    v69 = *(_QWORD *)(v64 + 24);
    v68 = *(_QWORD *)(v64 + 32);
    v70 = *(_QWORD *)(v64 + 40);
    *(_QWORD *)(v2 + 3264) = *(_QWORD *)v64;
    *(_QWORD *)(v2 + 3272) = v66;
    *(_BYTE *)(v2 + 3280) = v67;
    *(_QWORD *)(v2 + 3288) = v69;
    *(_QWORD *)(v2 + 3296) = v68;
    *(_QWORD *)(v2 + 3304) = v70;
    v71 = *(_BYTE *)(v64 + 48);
    *(_BYTE *)(v2 + 3312) = v71;
    *(_OWORD *)(v2 + 3320) = *(_OWORD *)(v64 + 56);
    sub_2141DD130(v65, v66, v67);
    swift_bridgeObjectRetain();
    sub_2141DD140(v68, v70, v71);
    swift_retain();
    sub_2141EF2E4((_QWORD *)(v2 + 2264), (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141DCFC0);
    sub_2141EF2E4((_QWORD *)(v2 + 2120), (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141DCFC0);
    sub_2141DD130(v65, v66, v67);
    swift_bridgeObjectRetain();
    sub_2141DD140(v68, v70, v71);
    sub_214205DD8(*(_DWORD *)(v2 + 76), (_OWORD *)v6, v6, *(_DWORD *)(v2 + 76), (__int128 *)(v2 + 3264), v2 + 1808);
    sub_2141ED0BC(v65, v66, v67);
    swift_bridgeObjectRelease();
    v57 = v68;
    v58 = v70;
    v59 = v71;
  }
  else
  {
    if (v48)
    {
      sub_2141EF1DC(v2 + 256);
      sub_2141EF2E4((_QWORD *)(v2 + 2264), (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141DCFC0);
      sub_2141EF2E4((_QWORD *)(v2 + 2120), (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141DCFC0);
      v72 = v2 + 256;
      v73 = v2 + 1808;
      goto LABEL_29;
    }
    v49 = sub_2141EF754(v2 + 1976);
    v50 = *(_QWORD *)v49;
    v51 = *(_QWORD *)(v49 + 8);
    v52 = *(_BYTE *)(v49 + 16);
    v54 = *(_QWORD *)(v49 + 24);
    v53 = *(_QWORD *)(v49 + 32);
    v55 = *(_QWORD *)(v49 + 40);
    *(_QWORD *)(v2 + 3264) = *(_QWORD *)v49;
    *(_QWORD *)(v2 + 3272) = v51;
    *(_BYTE *)(v2 + 3280) = v52;
    *(_QWORD *)(v2 + 3288) = v54;
    *(_QWORD *)(v2 + 3296) = v53;
    *(_QWORD *)(v2 + 3304) = v55;
    v56 = *(_BYTE *)(v49 + 48);
    *(_BYTE *)(v2 + 3312) = v56;
    *(_OWORD *)(v2 + 3320) = *(_OWORD *)(v49 + 56);
    sub_2141DD130(v50, v51, v52);
    swift_bridgeObjectRetain();
    sub_2141DD140(v53, v55, v56);
    swift_retain();
    sub_2141DD130(v50, v51, v52);
    swift_bridgeObjectRetain();
    sub_2141DD140(v53, v55, v56);
    sub_2141EF2E4((_QWORD *)(v2 + 2264), (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141DCFC0);
    sub_2141EF2E4((_QWORD *)(v2 + 2120), (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141DCFC0);
    sub_214205DD8(*(_DWORD *)(v2 + 76), (_OWORD *)v6, v6, *(_DWORD *)(v2 + 76), (__int128 *)(v2 + 3264), v2 + 1808);
    sub_2141ED0BC(v50, v51, v52);
    swift_bridgeObjectRelease();
    v57 = v53;
    v58 = v55;
    v59 = v56;
  }
  sub_2141EF1B0(v57, v58, v59);
  sub_2141E801C(v2 + 1808, v2 + 256, qword_253F12398);
  v72 = v2 + 256;
  v73 = v2 + 1808;
LABEL_29:
  sub_2141E801C(v72, v73, qword_253F12398);
  sub_2141D8BF8(&qword_253F13588);
  v74 = swift_allocObject();
  *(_OWORD *)(v74 + 16) = xmmword_214427810;
  v75 = v74 + 32;
  sub_2141E801C(v2 + 1808, v2 + 1640, qword_253F12398);
  if (sub_2141EF214(v2 + 1640) == 1)
  {
    sub_2141EF2E4((_QWORD *)(v2 + 2264), (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141DCFC0);
    sub_2143036C0(*(unsigned int *)(v2 + 76), v2 + 2976);
    sub_2141E801C(v2 + 2520, v2 + 256, &qword_253F13428);
  }
  else
  {
    sub_2141EF22C(v2 + 256);
  }
  sub_2141E801C(v2 + 256, v2 + 1488, &qword_253F13428);
  *(_QWORD *)(v2 + 56) = v75;
  sub_2141E801C(v2 + 1488, v75, &qword_253F13428);
  sub_2141EF2E4((_QWORD *)(v2 + 2120), (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141DCFC0);
  sub_2143036C0(*(unsigned int *)(v2 + 64), v2 + 3120);
  sub_2141E801C(v2 + 2672, v74 + 184, &qword_253F13428);
  v76 = (uint64_t *)(*(_QWORD *)(v2 + 80) + *(int *)(*(_QWORD *)(v2 + 96) + 72));
  v77 = *v76;
  v78 = v76[1];
  v79 = v76[2];
  v80 = v76[3];
  v81 = v76[4];
  v82 = v76[5];
  v84 = v76[6];
  v83 = v76[7];
  v85 = v76[8];
  *(_QWORD *)(v2 + 16) = v4;
  *(_QWORD *)(v2 + 64) = v84;
  *(_QWORD *)(v2 + 40) = v79;
  *(_QWORD *)(v2 + 48) = v83;
  if (v80)
  {
    *(_BYTE *)(v2 + 1168) = 4;
    *(_QWORD *)(v2 + 1176) = v77;
    *(_QWORD *)(v2 + 1184) = v78;
    *(_BYTE *)(v2 + 1192) = v79 & 1;
    *(_QWORD *)(v2 + 1200) = v80;
    *(_QWORD *)(v2 + 1208) = v81;
    *(_QWORD *)(v2 + 1216) = v82;
    *(_BYTE *)(v2 + 1224) = v84;
    *(_QWORD *)(v2 + 1232) = v83;
    *(_QWORD *)(v2 + 1240) = v85;
    *(_BYTE *)(v2 + 1248) = 3;
    v86 = v81;
    sub_2141EF6F4(v2 + 1168);
    sub_2141EF6B8(v2 + 1168, v2 + 256);
    nullsub_1(v2 + 256, v87);
  }
  else
  {
    v86 = v81;
    sub_2141EF22C(v2 + 256);
  }
  sub_2141E801C(v2 + 256, v2 + 1336, &qword_253F13428);
  sub_2141E801C(v2 + 1336, v74 + 336, &qword_253F13428);
  sub_2141EF260(v77, v78, *(_QWORD *)(v2 + 40), v80, v86, v82, *(_QWORD *)(v2 + 64));
  *(_QWORD *)(v2 + 8) = sub_2142E91DC(v74);
  *(_QWORD *)(v2 + 64) = v88;
  swift_setDeallocating();
  sub_2141D8BF8(&qword_253F13428);
  swift_arrayDestroy();
  swift_deallocClassInstance();
  *(_QWORD *)(v2 + 48) = *(_QWORD *)(*(_QWORD *)(v6 + 16) + 24);
  v89 = *(int **)(v2 + 96);
  v90 = *(_QWORD *)(v2 + 80);
  v91 = (_QWORD *)(v90 + v89[26]);
  v92 = v91[1];
  *(_QWORD *)(v2 + 56) = *v91;
  v93 = v89[24];
  v94 = v89[25];
  v95 = (uint64_t *)(v90 + v93);
  v96 = *v95;
  v97 = v95[1];
  v98 = v95[2];
  v99 = v95[3];
  v101 = *(_QWORD *)(v90 + v94);
  v100 = *(_QWORD *)(v90 + v94 + 8);
  v102 = *(_QWORD *)(v90 + v94 + 16);
  v103 = *(_QWORD *)(v90 + v94 + 24);
  *(_QWORD *)(v2 + 96) = v92;
  swift_bridgeObjectRetain();
  *(_QWORD *)v2 = v6;
  v104 = *(_QWORD *)(v2 + 8);
  swift_bridgeObjectRetain();
  *(_QWORD *)(v2 + 24) = v96;
  *(_QWORD *)(v2 + 32) = v97;
  *(_QWORD *)(v2 + 40) = v98;
  *(_QWORD *)(v2 + 80) = v99;
  sub_2141EF2B4(v96, v97, v98, v99);
  sub_2141EF2B4(v101, v100, v102, v103);
  sub_2143036C0(*(unsigned int *)(v2 + 76), v2 + 2976);
  sub_2141E801C(v2 + 2824, v2 + 1016, &qword_253F13428);
  swift_release();
  sub_2141EF2E4((_QWORD *)(v2 + 2120), (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141EF040);
  sub_2141EF340(*(_QWORD *)(v2 + 16));
  swift_bridgeObjectRelease();
  sub_2141E801C(v2 + 1808, v2 + 1168, qword_253F12398);
  if (sub_2141EF214(v2 + 1168) == 1)
  {
    sub_2141EF22C(v2 + 256);
  }
  else
  {
    sub_2141EF6B8(v2 + 1184, v2 + 256);
    nullsub_1(v2 + 256, v105);
  }
  sub_2141E801C(v2 + 256, v2 + 864, &qword_253F13428);
  sub_2141EF22C(v2 + 104);
  *(_QWORD *)(v2 + 256) = *(_QWORD *)(v2 + 48);
  *(_QWORD *)(v2 + 264) = v38;
  *(_QWORD *)(v2 + 272) = v40;
  *(_QWORD *)(v2 + 280) = v42;
  *(_QWORD *)(v2 + 288) = v44;
  v106 = *(_QWORD *)(v2 + 96);
  *(_QWORD *)(v2 + 296) = *(_QWORD *)(v2 + 56);
  *(_QWORD *)(v2 + 304) = v106;
  v107 = *(_QWORD *)(v2 + 32);
  *(_QWORD *)(v2 + 312) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(v2 + 320) = v107;
  v108 = *(_QWORD *)(v2 + 80);
  *(_QWORD *)(v2 + 328) = *(_QWORD *)(v2 + 40);
  *(_QWORD *)(v2 + 336) = v108;
  *(_QWORD *)(v2 + 344) = v101;
  *(_QWORD *)(v2 + 352) = v100;
  *(_QWORD *)(v2 + 360) = v102;
  *(_QWORD *)(v2 + 368) = v103;
  *(_QWORD *)(v2 + 376) = v104;
  sub_2141E801C(v2 + 1016, v2 + 384, &qword_253F13428);
  *(_QWORD *)(v2 + 536) = *(_QWORD *)(v2 + 64);
  sub_2141E801C(v2 + 864, v2 + 544, &qword_253F13428);
  sub_2141E801C(v2 + 104, v2 + 696, &qword_253F13428);
  *(_WORD *)(v2 + 848) = 0;
  *(_QWORD *)(v2 + 856) = 0;
  v109 = swift_allocObject();
  result = (uint64_t)memcpy((void *)(v109 + 16), (const void *)(v2 + 256), 0x260uLL);
  v63 = v109 | 0xC000000000000000;
LABEL_39:
  **(_QWORD **)(v2 + 88) = v63;
  return result;
}

void sub_2141EEC78(uint64_t a1, uint64_t a2)
{
  _BYTE v4[144];
  _BYTE v5[144];

  sub_2141EDFD8(a1, (uint64_t)v5);
  sub_2141EDFD8(a1 + 144, (uint64_t)v4);
  *(_BYTE *)(*(_QWORD *)a2 + 1194) = 1;
  swift_beginAccess();
  sub_214200BC0((uint64_t)v5);
  sub_214200BC0((uint64_t)v4);
  sub_214202388((uint64_t)v5);
  sub_214202388((uint64_t)v4);
}

void *SectorMark.init<A>(angle:innerRadius:outerRadius:roundInnerVertex:angularInset:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, int a5@<W4>, int a6@<W5>, double a7@<X6>, char a8@<W7>, void *a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  double v19;
  _BYTE v21[12];
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  void *v26;
  _BYTE v27[344];

  v24 = a5;
  v25 = a6;
  v23 = a4;
  v22 = a3;
  v26 = a9;
  v15 = type metadata accessor for PlottableValue(0, a10, a11, a4);
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v18 = &v21[-v17];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v16 + 16))(&v21[-v17], a1, v15);
  v19 = a7;
  if ((a8 & 1) != 0)
    v19 = 0.0;
  sub_2141ED9F0((uint64_t)v18, a2, v22, v23, v24, v25, a10, a11, v27, v19);
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(a1, v15);
  return memcpy(v26, v27, 0x149uLL);
}

uint64_t sub_2141EEE24(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_2141D8BF8(&qword_253F134C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_2141EEE6C(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

uint64_t sub_2141EEE84(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_2141D8BF8(&qword_253F134C8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_2141EEEC4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ChartContentRenderContext.Environment(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_2141EEF08(uint64_t a1)
{
  sub_2141EEF3C(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
  return a1;
}

uint64_t sub_2141EEF3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  uint64_t result;

  if (a5 - 2 <= 3)
    return swift_release();
  return result;
}

uint64_t sub_2141EEF54(uint64_t a1, void (*a2)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;

  v4 = *(_QWORD *)(a1 + 160);
  v17 = *(_QWORD *)(a1 + 152);
  v18 = *(_QWORD *)(a1 + 144);
  v5 = *(_QWORD *)(a1 + 168);
  v6 = *(_QWORD *)(a1 + 176);
  v7 = *(_QWORD *)(a1 + 184);
  v8 = *(_QWORD *)(a1 + 192);
  v9 = *(_QWORD *)(a1 + 200);
  v15 = *(_OWORD *)(a1 + 224);
  v16 = *(_OWORD *)(a1 + 208);
  v13 = *(_OWORD *)(a1 + 256);
  v14 = *(_OWORD *)(a1 + 240);
  v10 = *(_QWORD *)(a1 + 272);
  v11 = *(_QWORD *)(a1 + 280);
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136));
  a2(v18, v17, v4, v5, v6, v7, v8, v9, v16, *((_QWORD *)&v16 + 1), v15, *((_QWORD *)&v15 + 1), v14, *((_QWORD *)&v14 + 1), v13, *((_QWORD *)&v13 + 1), v10, v11);
  return a1;
}

uint64_t sub_2141EF040(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, unint64_t a18)
{
  uint64_t v21;
  uint64_t v22;
  char v23;

  switch(a18 >> 61)
  {
    case 0uLL:
    case 2uLL:
      sub_2141ED0BC(result, a2, a3 & 1);
      swift_bridgeObjectRelease();
      v21 = a5;
      v22 = a6;
      v23 = a7;
      goto LABEL_4;
    case 3uLL:
      sub_2141ED0BC(result, a2, a3 & 1);
      swift_bridgeObjectRelease();
      sub_2141EF1B0(a5, a6, a7);
      sub_2141ED0BC(a10, a11, a12 & 1);
      swift_bridgeObjectRelease();
      v21 = a14;
      v22 = a15;
      v23 = a16;
LABEL_4:
      result = sub_2141EF1B0(v21, v22, v23);
      break;
    case 5uLL:
      sub_2141ED0BC(result, a2, a3 & 1);
      swift_bridgeObjectRelease();
      sub_2141EF1B0(a5, a6, a7);
      sub_2141EF1BC(a11, a12, a13);
      result = sub_2141EF1BC(a14, a15, a16);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_2141EF1B0(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 0x80) == 0)
    return sub_2141E60B8(a1, a2, a3);
  return a1;
}

uint64_t sub_2141EF1BC(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 <= 0xFBu)
    return sub_2141EF1B0(a1, a2, a3);
  return a1;
}

uint64_t sub_2141EF1D0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 136) >> 61;
}

double sub_2141EF1DC(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0x7FFFFFFF8;
  result = 0.0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  return result;
}

uint64_t sub_2141EF214(uint64_t a1)
{
  if ((*(_QWORD *)(a1 + 16) >> 3) > 0x80000000)
    return -(*(_QWORD *)(a1 + 16) >> 3);
  else
    return 0;
}

double sub_2141EF22C(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = 0x7FFFFFFF8;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  return result;
}

uint64_t sub_2141EF260(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  if (a4)
  {
    sub_2141DD130(result, a2, a3 & 1);
    swift_bridgeObjectRetain();
    return sub_2141DD140(a5, a6, a7);
  }
  return result;
}

uint64_t sub_2141EF2B4(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  if (a4)
  {
    sub_2141DD130(result, a2, a3 & 1);
    return swift_bridgeObjectRetain();
  }
  return result;
}

_QWORD *sub_2141EF2E4(_QWORD *a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14], a1[15], a1[16], a1[17]);
  return a1;
}

uint64_t sub_2141EF340(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for SgSector(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_2141EF37C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;

  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v0 + 96))
  {
    sub_2141ED0BC(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_BYTE *)(v0 + 88));
    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(v0 + 128))
  {
    sub_2141ED0BC(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112), *(_BYTE *)(v0 + 120));
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  v1 = *(_QWORD *)(v0 + 144);
  v2 = *(_QWORD *)(v0 + 168);
  v3 = *(_QWORD *)(v0 + 200);
  v4 = *(_QWORD *)(v0 + 208);
  v5 = *(_QWORD *)(v0 + 216);
  v6 = *(_QWORD *)(v0 + 240);
  v7 = *(_QWORD *)(v0 + 272);
  v8 = *(_QWORD *)(v0 + 288);
  if (v6 > 1
    || (v1 & 0xFFFFFFFFFFFFFFF8) != 0x7FFFFFFF8
    || v2 > 1
    || (v5 | v4) & 0xF000000000000007 | v3 & 0xFFFFFFFFFFFFFF7CLL
    || (v8 | *(_QWORD *)(v0 + 280)) & 0xF000000000000007 | v7 & 0xFFFFFFFFFFFFFF7CLL)
  {
    sub_2141EF5D4(v1, *(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 160), v2, *(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 192), v3, v4, v5, *(_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 232), v6, *(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 256), *(_QWORD *)(v0 + 264), v7, *(_QWORD *)(v0 + 280), v8);
  }
  swift_bridgeObjectRelease();
  v9 = *(_QWORD *)(v0 + 304);
  v10 = *(_QWORD *)(v0 + 328);
  v11 = *(_QWORD *)(v0 + 360);
  v12 = *(_QWORD *)(v0 + 368);
  v13 = *(_QWORD *)(v0 + 376);
  v14 = *(_QWORD *)(v0 + 400);
  v15 = *(_QWORD *)(v0 + 432);
  v16 = *(_QWORD *)(v0 + 448);
  if (v14 > 1
    || (v9 & 0xFFFFFFFFFFFFFFF8) != 0x7FFFFFFF8
    || v10 > 1
    || (v13 | v12) & 0xF000000000000007 | v11 & 0xFFFFFFFFFFFFFF7CLL
    || (v16 | *(_QWORD *)(v0 + 440)) & 0xF000000000000007 | v15 & 0xFFFFFFFFFFFFFF7CLL)
  {
    sub_2141EF5D4(v9, *(_QWORD *)(v0 + 312), *(_QWORD *)(v0 + 320), v10, *(_QWORD *)(v0 + 336), *(_QWORD *)(v0 + 344), *(_QWORD *)(v0 + 352), v11, v12, v13, *(_QWORD *)(v0 + 384), *(_QWORD *)(v0 + 392), v14, *(_QWORD *)(v0 + 408), *(_QWORD *)(v0 + 416), *(_QWORD *)(v0 + 424), v15, *(_QWORD *)(v0 + 440), v16);
  }
  v17 = *(_QWORD *)(v0 + 456);
  v18 = *(_QWORD *)(v0 + 480);
  v19 = *(_QWORD *)(v0 + 512);
  v20 = *(_QWORD *)(v0 + 520);
  v21 = *(_QWORD *)(v0 + 528);
  v22 = *(_QWORD *)(v0 + 552);
  v23 = *(_QWORD *)(v0 + 584);
  v24 = *(_QWORD *)(v0 + 600);
  if (v22 > 1
    || (v17 & 0xFFFFFFFFFFFFFFF8) != 0x7FFFFFFF8
    || v18 > 1
    || (v21 | v20) & 0xF000000000000007 | v19 & 0xFFFFFFFFFFFFFF7CLL
    || (v24 | *(_QWORD *)(v0 + 592)) & 0xF000000000000007 | v23 & 0xFFFFFFFFFFFFFF7CLL)
  {
    sub_2141EF5D4(v17, *(_QWORD *)(v0 + 464), *(_QWORD *)(v0 + 472), v18, *(_QWORD *)(v0 + 488), *(_QWORD *)(v0 + 496), *(_QWORD *)(v0 + 504), v19, v20, v21, *(_QWORD *)(v0 + 536), *(_QWORD *)(v0 + 544), v22, *(_QWORD *)(v0 + 560), *(_QWORD *)(v0 + 568), *(_QWORD *)(v0 + 576), v23, *(_QWORD *)(v0 + 592), v24);
  }
  return swift_deallocObject();
}

uint64_t sub_2141EF5D4(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19)
{
  uint64_t v22;
  uint64_t v23;
  char v24;

  sub_2141ED0BC(a2, a3, a4 & 1);
  swift_bridgeObjectRelease();
  if (a19 < 0)
  {
    sub_2141EF1B0(a6, a7, a8);
    sub_2141ED0BC(a11, a12, a13 & 1);
    swift_bridgeObjectRelease();
    v22 = a15;
    v23 = a16;
    v24 = a17;
  }
  else
  {
    v22 = a6;
    v23 = a7;
    v24 = a8;
  }
  return sub_2141EF1B0(v22, v23, v24);
}

uint64_t sub_2141EF6B8(uint64_t a1, uint64_t a2)
{
  initializeWithTake for SgAccessibilityDataField(a2, a1);
  return a2;
}

int8x16_t sub_2141EF6F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int8x16_t result;

  v1 = *(_QWORD *)(a1 + 24) & 1;
  v2 = *(_QWORD *)(a1 + 72) & 0xFFFFFFFFFFFFFF8;
  v3 = *(_QWORD *)(a1 + 96) & 1;
  v4 = *(_QWORD *)(a1 + 144) & 0xFFFFFFFFFFFFFF8;
  *(_QWORD *)a1 &= 7uLL;
  *(_QWORD *)(a1 + 24) = v1;
  *(int8x16_t *)(a1 + 56) = vandq_s8(*(int8x16_t *)(a1 + 56), (int8x16_t)xmmword_214427820);
  *(_QWORD *)(a1 + 72) = v2;
  *(_QWORD *)(a1 + 96) = v3;
  result = vandq_s8(*(int8x16_t *)(a1 + 128), (int8x16_t)xmmword_214427820);
  *(int8x16_t *)(a1 + 128) = result;
  *(_QWORD *)(a1 + 144) = v4;
  return result;
}

uint64_t sub_2141EF754(uint64_t result)
{
  *(_QWORD *)(result + 136) &= 0x1FFFFFFFFFFFFFFFuLL;
  return result;
}

uint64_t sub_2141EF764(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SgSector(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t destroy for SectorMark(uint64_t a1)
{
  sub_2141EF040(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_OWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136));
  return sub_2141EF040(*(_QWORD *)(a1 + 144), *(_QWORD *)(a1 + 152), *(_QWORD *)(a1 + 160), *(_QWORD *)(a1 + 168), *(_QWORD *)(a1 + 176), *(_QWORD *)(a1 + 184), *(_QWORD *)(a1 + 192), *(_QWORD *)(a1 + 200), *(_QWORD *)(a1 + 208), *(_QWORD *)(a1 + 216), *(_QWORD *)(a1 + 224), *(_QWORD *)(a1 + 232), *(_OWORD *)(a1 + 240), *(_QWORD *)(a1 + 248), *(_QWORD *)(a1 + 256), *(_QWORD *)(a1 + 264), *(_QWORD *)(a1 + 272), *(_QWORD *)(a1 + 280));
}

uint64_t initializeWithCopy for SectorMark(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a2 + 56);
  v22 = *(_QWORD *)(a2 + 64);
  v24 = *(_QWORD *)(a2 + 72);
  v26 = *(_QWORD *)(a2 + 80);
  v28 = *(_QWORD *)(a2 + 88);
  v30 = *(_QWORD *)(a2 + 96);
  v32 = *(_QWORD *)(a2 + 104);
  v34 = *(_QWORD *)(a2 + 112);
  v36 = *(_QWORD *)(a2 + 120);
  v38 = *(_QWORD *)(a2 + 128);
  v40 = *(_QWORD *)(a2 + 136);
  sub_2141DCFC0(*(_QWORD *)a2, v5, v6, v7, v8, v9, v10, v11, v22, v24, v26, v28, v30, v32, v34, v36, v38, v40);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v9;
  *(_QWORD *)(a1 + 48) = v10;
  *(_QWORD *)(a1 + 56) = v11;
  *(_QWORD *)(a1 + 64) = v22;
  *(_QWORD *)(a1 + 72) = v24;
  *(_QWORD *)(a1 + 80) = v26;
  *(_QWORD *)(a1 + 88) = v28;
  *(_QWORD *)(a1 + 96) = v30;
  *(_QWORD *)(a1 + 104) = v32;
  *(_QWORD *)(a1 + 112) = v34;
  *(_QWORD *)(a1 + 120) = v36;
  *(_QWORD *)(a1 + 128) = v38;
  *(_QWORD *)(a1 + 136) = v40;
  v12 = *(_QWORD *)(a2 + 144);
  v13 = *(_QWORD *)(a2 + 152);
  v14 = *(_QWORD *)(a2 + 160);
  v15 = *(_QWORD *)(a2 + 168);
  v16 = *(_QWORD *)(a2 + 176);
  v17 = *(_QWORD *)(a2 + 184);
  v18 = *(_QWORD *)(a2 + 192);
  v19 = *(_QWORD *)(a2 + 200);
  v23 = *(_QWORD *)(a2 + 208);
  v25 = *(_QWORD *)(a2 + 216);
  v27 = *(_QWORD *)(a2 + 224);
  v29 = *(_QWORD *)(a2 + 232);
  v31 = *(_QWORD *)(a2 + 240);
  v33 = *(_QWORD *)(a2 + 248);
  v35 = *(_QWORD *)(a2 + 256);
  v37 = *(_QWORD *)(a2 + 264);
  v39 = *(_QWORD *)(a2 + 272);
  v41 = *(_QWORD *)(a2 + 280);
  sub_2141DCFC0(v12, v13, v14, v15, v16, v17, v18, v19, v23, v25, v27, v29, v31, v33, v35, v37, v39, v41);
  *(_QWORD *)(a1 + 144) = v12;
  *(_QWORD *)(a1 + 152) = v13;
  *(_QWORD *)(a1 + 160) = v14;
  *(_QWORD *)(a1 + 168) = v15;
  *(_QWORD *)(a1 + 176) = v16;
  *(_QWORD *)(a1 + 184) = v17;
  *(_QWORD *)(a1 + 192) = v18;
  *(_QWORD *)(a1 + 200) = v19;
  *(_QWORD *)(a1 + 208) = v23;
  *(_QWORD *)(a1 + 216) = v25;
  *(_QWORD *)(a1 + 224) = v27;
  *(_QWORD *)(a1 + 232) = v29;
  *(_QWORD *)(a1 + 240) = v31;
  *(_QWORD *)(a1 + 248) = v33;
  *(_QWORD *)(a1 + 256) = v35;
  *(_QWORD *)(a1 + 264) = v37;
  *(_QWORD *)(a1 + 272) = v39;
  *(_QWORD *)(a1 + 280) = v41;
  v20 = *(_QWORD *)(a2 + 288);
  *(_BYTE *)(a1 + 296) = *(_BYTE *)(a2 + 296);
  *(_QWORD *)(a1 + 288) = v20;
  *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
  *(_BYTE *)(a1 + 312) = *(_BYTE *)(a2 + 312);
  *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
  *(_BYTE *)(a1 + 328) = *(_BYTE *)(a2 + 328);
  return a1;
}

uint64_t assignWithCopy for SectorMark(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a2 + 56);
  v51 = *(_QWORD *)(a2 + 64);
  v53 = *(_QWORD *)(a2 + 72);
  v55 = *(_QWORD *)(a2 + 80);
  v57 = *(_QWORD *)(a2 + 88);
  v59 = *(_QWORD *)(a2 + 96);
  v61 = *(_QWORD *)(a2 + 104);
  v63 = *(_QWORD *)(a2 + 112);
  v65 = *(_QWORD *)(a2 + 120);
  v67 = *(_QWORD *)(a2 + 128);
  v69 = *(_QWORD *)(a2 + 136);
  sub_2141DCFC0(*(_QWORD *)a2, v5, v6, v7, v8, v9, v10, v11, v51, v53, v55, v57, v59, v61, v63, v65, v67, v69);
  v12 = *(_QWORD *)a1;
  v13 = *(_QWORD *)(a1 + 8);
  v14 = *(_QWORD *)(a1 + 16);
  v15 = *(_QWORD *)(a1 + 24);
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 40);
  v18 = *(_QWORD *)(a1 + 48);
  v19 = *(_QWORD *)(a1 + 56);
  v20 = *(_OWORD *)(a1 + 64);
  v21 = *(_OWORD *)(a1 + 80);
  v22 = *(_OWORD *)(a1 + 96);
  v23 = *(_OWORD *)(a1 + 112);
  v24 = *(_QWORD *)(a1 + 128);
  v25 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v9;
  *(_QWORD *)(a1 + 48) = v10;
  *(_QWORD *)(a1 + 56) = v11;
  *(_QWORD *)(a1 + 64) = v51;
  *(_QWORD *)(a1 + 72) = v53;
  *(_QWORD *)(a1 + 80) = v55;
  *(_QWORD *)(a1 + 88) = v57;
  *(_QWORD *)(a1 + 96) = v59;
  *(_QWORD *)(a1 + 104) = v61;
  *(_QWORD *)(a1 + 112) = v63;
  *(_QWORD *)(a1 + 120) = v65;
  *(_QWORD *)(a1 + 128) = v67;
  *(_QWORD *)(a1 + 136) = v69;
  sub_2141EF040(v12, v13, v14, v15, v16, v17, v18, v19, v20, *((uint64_t *)&v20 + 1), v21, *((uint64_t *)&v21 + 1), v22, *((uint64_t *)&v22 + 1), v23, SBYTE8(v23), v24, v25);
  v26 = *(_QWORD *)(a2 + 144);
  v27 = *(_QWORD *)(a2 + 152);
  v28 = *(_QWORD *)(a2 + 160);
  v29 = *(_QWORD *)(a2 + 168);
  v30 = *(_QWORD *)(a2 + 176);
  v31 = *(_QWORD *)(a2 + 184);
  v32 = *(_QWORD *)(a2 + 192);
  v33 = *(_QWORD *)(a2 + 200);
  v52 = *(_QWORD *)(a2 + 208);
  v54 = *(_QWORD *)(a2 + 216);
  v56 = *(_QWORD *)(a2 + 224);
  v58 = *(_QWORD *)(a2 + 232);
  v60 = *(_QWORD *)(a2 + 240);
  v62 = *(_QWORD *)(a2 + 248);
  v64 = *(_QWORD *)(a2 + 256);
  v66 = *(_QWORD *)(a2 + 264);
  v68 = *(_QWORD *)(a2 + 272);
  v70 = *(_QWORD *)(a2 + 280);
  sub_2141DCFC0(v26, v27, v28, v29, v30, v31, v32, v33, v52, v54, v56, v58, v60, v62, v64, v66, v68, v70);
  v34 = *(_QWORD *)(a1 + 144);
  v35 = *(_QWORD *)(a1 + 152);
  v36 = *(_QWORD *)(a1 + 160);
  v37 = *(_QWORD *)(a1 + 168);
  v38 = *(_QWORD *)(a1 + 176);
  v39 = *(_QWORD *)(a1 + 184);
  v40 = *(_QWORD *)(a1 + 192);
  v41 = *(_QWORD *)(a1 + 200);
  v42 = *(_OWORD *)(a1 + 208);
  v43 = *(_OWORD *)(a1 + 224);
  v44 = *(_OWORD *)(a1 + 240);
  v45 = *(_OWORD *)(a1 + 256);
  v46 = *(_QWORD *)(a1 + 272);
  v47 = *(_QWORD *)(a1 + 280);
  *(_QWORD *)(a1 + 144) = v26;
  *(_QWORD *)(a1 + 152) = v27;
  *(_QWORD *)(a1 + 160) = v28;
  *(_QWORD *)(a1 + 168) = v29;
  *(_QWORD *)(a1 + 176) = v30;
  *(_QWORD *)(a1 + 184) = v31;
  *(_QWORD *)(a1 + 192) = v32;
  *(_QWORD *)(a1 + 200) = v33;
  *(_QWORD *)(a1 + 208) = v52;
  *(_QWORD *)(a1 + 216) = v54;
  *(_QWORD *)(a1 + 224) = v56;
  *(_QWORD *)(a1 + 232) = v58;
  *(_QWORD *)(a1 + 240) = v60;
  *(_QWORD *)(a1 + 248) = v62;
  *(_QWORD *)(a1 + 256) = v64;
  *(_QWORD *)(a1 + 264) = v66;
  *(_QWORD *)(a1 + 272) = v68;
  *(_QWORD *)(a1 + 280) = v70;
  sub_2141EF040(v34, v35, v36, v37, v38, v39, v40, v41, v42, *((uint64_t *)&v42 + 1), v43, *((uint64_t *)&v43 + 1), v44, *((uint64_t *)&v44 + 1), v45, SBYTE8(v45), v46, v47);
  v48 = *(_QWORD *)(a2 + 288);
  *(_BYTE *)(a1 + 296) = *(_BYTE *)(a2 + 296);
  *(_QWORD *)(a1 + 288) = v48;
  v49 = *(_QWORD *)(a2 + 304);
  *(_BYTE *)(a1 + 312) = *(_BYTE *)(a2 + 312);
  *(_QWORD *)(a1 + 304) = v49;
  *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
  *(_BYTE *)(a1 + 328) = *(_BYTE *)(a2 + 328);
  return a1;
}

void *initializeWithTake for SectorMark(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x149uLL);
}

uint64_t assignWithTake for SectorMark(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  unint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  unint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;

  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  v10 = *(_QWORD *)(a1 + 48);
  v11 = *(_QWORD *)(a1 + 56);
  v12 = *(_OWORD *)(a1 + 64);
  v13 = *(_OWORD *)(a1 + 80);
  v14 = *(_OWORD *)(a1 + 96);
  v15 = *(_OWORD *)(a1 + 112);
  v16 = *(_QWORD *)(a1 + 128);
  v17 = *(_QWORD *)(a1 + 136);
  v18 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v18;
  v19 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v19;
  v20 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v20;
  v21 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v21;
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  sub_2141EF040(v4, v5, v6, v7, v8, v9, v10, v11, v12, *((uint64_t *)&v12 + 1), v13, *((uint64_t *)&v13 + 1), v14, *((uint64_t *)&v14 + 1), v15, SBYTE8(v15), v16, v17);
  v22 = *(_QWORD *)(a1 + 144);
  v23 = *(_QWORD *)(a1 + 152);
  v24 = *(_QWORD *)(a1 + 160);
  v25 = *(_QWORD *)(a1 + 168);
  v26 = *(_QWORD *)(a1 + 176);
  v27 = *(_QWORD *)(a1 + 184);
  v28 = *(_QWORD *)(a1 + 192);
  v29 = *(_QWORD *)(a1 + 200);
  v30 = *(_OWORD *)(a1 + 208);
  v31 = *(_OWORD *)(a1 + 224);
  v32 = *(_OWORD *)(a1 + 240);
  v33 = *(_OWORD *)(a1 + 256);
  v34 = *(_QWORD *)(a1 + 272);
  v35 = *(_QWORD *)(a1 + 280);
  v36 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 160) = v36;
  v37 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v37;
  v38 = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 224) = v38;
  v39 = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 256) = v39;
  *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
  sub_2141EF040(v22, v23, v24, v25, v26, v27, v28, v29, v30, *((uint64_t *)&v30 + 1), v31, *((uint64_t *)&v31 + 1), v32, *((uint64_t *)&v32 + 1), v33, SBYTE8(v33), v34, v35);
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  *(_BYTE *)(a1 + 296) = *(_BYTE *)(a2 + 296);
  *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
  *(_BYTE *)(a1 + 312) = *(_BYTE *)(a2 + 312);
  *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
  *(_BYTE *)(a1 + 328) = *(_BYTE *)(a2 + 328);
  return a1;
}

uint64_t getEnumTagSinglePayload for SectorMark(uint64_t a1, int a2)
{
  unsigned int v2;
  int v3;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 329))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = (*(_QWORD *)(a1 + 48) >> 3) & 0xFFFFFFE0 | (*(_QWORD *)(a1 + 48) >> 2) & 0x1F;
  if (v2 > 0x80000000)
    v3 = ~v2;
  else
    v3 = -1;
  return (v3 + 1);
}

double storeEnumTagSinglePayload for SectorMark(uint64_t a1, int a2, int a3)
{
  double result;

  if (a2 < 0)
  {
    result = 0.0;
    *(_OWORD *)(a1 + 248) = 0u;
    *(_OWORD *)(a1 + 232) = 0u;
    *(_OWORD *)(a1 + 216) = 0u;
    *(_OWORD *)(a1 + 200) = 0u;
    *(_OWORD *)(a1 + 184) = 0u;
    *(_OWORD *)(a1 + 168) = 0u;
    *(_OWORD *)(a1 + 152) = 0u;
    *(_OWORD *)(a1 + 136) = 0u;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_BYTE *)(a1 + 328) = 0;
    *(_OWORD *)(a1 + 312) = 0u;
    *(_OWORD *)(a1 + 296) = 0u;
    *(_OWORD *)(a1 + 280) = 0u;
    *(_OWORD *)(a1 + 264) = 0u;
    *(_QWORD *)a1 = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(a1 + 329) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      result = 0.0;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)a1 = 0u;
      *(_QWORD *)(a1 + 48) = (8 * -a2) & 0x7FFFFFF00 | (4 * (-a2 & 0x1FLL));
      *(_OWORD *)(a1 + 56) = 0u;
      *(_OWORD *)(a1 + 72) = 0u;
      *(_OWORD *)(a1 + 88) = 0u;
      *(_OWORD *)(a1 + 104) = 0u;
      *(_OWORD *)(a1 + 120) = 0u;
      *(_QWORD *)(a1 + 136) = 0;
      return result;
    }
    *(_BYTE *)(a1 + 329) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SectorMark()
{
  return &type metadata for SectorMark;
}

int8x16_t sub_2141EFEF4(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  int8x16_t result;

  v1 = *(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFFF8;
  v2 = *(_QWORD *)(a1 + 136) & 0xFFFFFFFFFFFFFF8 | 0xA000000000000000;
  *(int8x16_t *)(a1 + 48) = vandq_s8(*(int8x16_t *)(a1 + 48), (int8x16_t)xmmword_214427820);
  *(_QWORD *)(a1 + 64) = v1;
  result = vandq_s8(*(int8x16_t *)(a1 + 120), (int8x16_t)xmmword_214427830);
  *(int8x16_t *)(a1 + 120) = result;
  *(_QWORD *)(a1 + 136) = v2;
  return result;
}

int8x16_t sub_2141EFF40(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  int8x16_t result;

  v1 = *(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFFF8;
  v2 = *(_QWORD *)(a1 + 136) & 0xFFFFFFFFFFFFFF8 | 0x8000000000000000;
  *(int8x16_t *)(a1 + 48) = vandq_s8(*(int8x16_t *)(a1 + 48), (int8x16_t)xmmword_214427820);
  *(_QWORD *)(a1 + 64) = v1;
  result = vandq_s8(*(int8x16_t *)(a1 + 120), (int8x16_t)xmmword_214427830);
  *(int8x16_t *)(a1 + 120) = result;
  *(_QWORD *)(a1 + 136) = v2;
  return result;
}

uint64_t sub_2141EFF88(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int16 v10;
  uint64_t v11;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  unsigned __int8 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned __int8 v48;
  unsigned __int8 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  sub_2141E801C(a1, (uint64_t)&v46, &qword_253F15558);
  v7 = v51;
  if (v51 < 0)
  {
    v51 &= ~0x8000000000000000;
    return sub_214235770(v46);
  }
  else
  {
    v8 = v47;
    v9 = v48;
    v10 = v49;
    v11 = v50;
    v36 = v52;
    v37 = v4;
    v34 = a2;
    if (a2 >= 2u)
    {
      v15 = v46;
      sub_2141E7DC4(v47, v48, v49);
      sub_2141E7DC4(v11, v7, SBYTE1(v7));
      v13 = v15;
    }
    else
    {
      v40 = v46;
      sub_2141D8BF8(&qword_253F119A8);
      swift_allocObject();
      sub_2141E7DC4(v8, v9, v10);
      sub_2141E7DC4(v11, v7, SBYTE1(v7));
      v39 = sub_2141F57C0(0);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v43 = *a4;
      *a4 = 0x8000000000000000;
      sub_2142A28F8(v39, 0, a2, isUniquelyReferenced_nonNull_native);
      *a4 = v43;
      swift_bridgeObjectRelease();
      v13 = v40;
    }
    v35 = sub_214235770(v13);
    sub_2141E7DC4(v8, v9, v10);
    v16 = sub_214235934(v8, (unsigned __int16)v9 | (unsigned __int16)(v10 << 8));
    v41 = v9;
    v38 = v10;
    sub_2141E7F20(v8, v9, v10);
    sub_2141E7DC4(v11, v7, SBYTE1(v7));
    v17 = sub_214235934(v11, v7);
    sub_2141E7F20(v11, v7, SBYTE1(v7));
    v18 = sub_21423577C(v36);
    v19 = *a4;
    v20 = v11;
    v42 = v8;
    if (*(_QWORD *)(*a4 + 16))
    {
      v21 = sub_214336B74(v34);
      v22 = v35;
      if ((v23 & 1) != 0)
      {
        v24 = *(_QWORD *)(*(_QWORD *)(v19 + 56) + 16 * v21);
        swift_retain();
        v25 = swift_retain_n();
        sub_2141F99CC(v25);
        sub_2141D8BF8(&qword_253F15D58);
        v26 = swift_allocObject();
        *(_OWORD *)(v26 + 16) = xmmword_2144271E0;
        *(_QWORD *)(v26 + 32) = v24;
        v44 = v26;
        sub_214424FF8();
        v27 = v44;
        v28 = sub_2141F99F8;
      }
      else
      {
        v24 = 0;
        v27 = MEMORY[0x24BEE4AF8];
        v28 = sub_2141F7168;
      }
    }
    else
    {
      v24 = 0;
      v27 = MEMORY[0x24BEE4AF8];
      v28 = sub_2141F7168;
      v22 = v35;
    }
    sub_2141D8BF8(&qword_253F11A88);
    swift_allocObject();
    swift_retain();
    v29 = sub_214242B68(v27, (uint64_t)v28, v24);
    v30 = swift_allocObject();
    *(_QWORD *)(v30 + 16) = v37;
    sub_2141D8BF8(&qword_253F15D58);
    v31 = swift_allocObject();
    *(_OWORD *)(v31 + 16) = xmmword_2144271C0;
    *(_QWORD *)(v31 + 32) = v22;
    *(_QWORD *)(v31 + 40) = v16;
    *(_QWORD *)(v31 + 48) = v17;
    *(_QWORD *)(v31 + 56) = v18;
    *(_QWORD *)(v31 + 64) = v29;
    v45 = v31;
    sub_214424FF8();
    v32 = (_QWORD *)swift_allocObject();
    v32[2] = sub_2141F9944;
    v32[3] = v30;
    v32[4] = v22;
    v32[5] = v16;
    v32[6] = v17;
    v32[7] = v18;
    v32[8] = v29;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    v14 = sub_21423EB9C(v45, (uint64_t)sub_2141F9998, (uint64_t)v32);
    sub_2141E7F20(v42, v41, v38);
    sub_2141E7F20(v20, v7, SBYTE1(v7));
  }
  return v14;
}

uint64_t sub_2141F0360@<X0>(char **a1@<X0>, unsigned __int8 *a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t *a4@<X3>, void **a5@<X4>, _QWORD *a6@<X8>)
{
  char *v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t);
  _OWORD *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  _OWORD *v30;

  v8 = *a1;
  v9 = *a2;
  v10 = *a3;
  v11 = *a4;
  v12 = a4[1];
  if (*a4)
  {
    v13 = swift_allocObject();
    *(_QWORD *)(v13 + 16) = v11;
    *(_QWORD *)(v13 + 24) = v12;
    v14 = sub_2141F9A70;
  }
  else
  {
    v14 = 0;
  }
  v15 = *a5;
  if ((unint64_t)v15 >= 2)
  {
    sub_2141D975C(v11);
    sub_2141F9A40((uint64_t)v15);
    result = sub_2141D972C((uint64_t)v14);
  }
  else
  {
    sub_2141D975C(v11);
    swift_bridgeObjectRetain();
    if (v9)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v8 = sub_214224AE0(0, *((_QWORD *)v8 + 2) + 1, 1, v8);
      v17 = *((_QWORD *)v8 + 2);
      v16 = *((_QWORD *)v8 + 3);
      if (v17 >= v16 >> 1)
        v8 = sub_214224AE0((char *)(v16 > 1), v17 + 1, 1, v8);
      *((_QWORD *)v8 + 2) = v17 + 1;
      *(_QWORD *)&v8[8 * v17 + 32] = 0;
    }
    v18 = sub_2142E95B8((uint64_t)v8);
    if ((v20 & 1) != 0)
    {
      v15 = &unk_24D17AD70;
    }
    else
    {
      v21 = v18;
      v22 = v19;
      sub_2141D8BF8(&qword_253F15D48);
      v15 = (_OWORD *)swift_allocObject();
      v15[1] = xmmword_2144271D0;
      *((_QWORD *)v15 + 4) = v21;
      *((_QWORD *)v15 + 5) = v22;
    }
    result = swift_bridgeObjectRelease();
    if (v11)
    {
      v24 = v14((uint64_t)v15);
      v25 = sub_2142E95B8(v24);
      if ((v27 & 1) != 0)
      {
        v30 = &unk_24D17ADA0;
      }
      else
      {
        v28 = v25;
        v29 = v26;
        sub_2141D8BF8(&qword_253F15D48);
        v30 = (_OWORD *)swift_allocObject();
        v30[1] = xmmword_2144271D0;
        *((_QWORD *)v30 + 4) = v28;
        *((_QWORD *)v30 + 5) = v29;
      }
      swift_bridgeObjectRelease();
      sub_2141D972C((uint64_t)v14);
      result = swift_bridgeObjectRelease();
      v15 = v30;
    }
    if (v10)
    {
      result = sub_2142CD1E4((uint64_t)v15);
      v15 = (_OWORD *)result;
    }
  }
  *a6 = v15;
  return result;
}

uint64_t sub_2141F0574@<X0>(uint64_t *a1@<X0>, unsigned __int8 *a2@<X1>, void (**a3)(uint64_t *__return_ptr, uint64_t *)@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v5;
  int v6;
  void (*v7)(uint64_t *__return_ptr, uint64_t *);
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;

  v5 = *a1;
  v6 = *a2;
  v7 = *a3;
  if (!*a3)
  {
    result = swift_bridgeObjectRetain();
    if (!v6)
      goto LABEL_4;
    goto LABEL_3;
  }
  v11 = *a1;
  swift_retain();
  v7(&v10, &v11);
  v11 = MEMORY[0x24BEE4B08];
  v8 = swift_bridgeObjectRetain();
  v5 = sub_2141F90DC(v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = sub_2141D972C((uint64_t)v7);
  if (v6)
  {
LABEL_3:
    result = sub_2142CD29C(v5);
    v5 = result;
  }
LABEL_4:
  *a4 = v5;
  return result;
}

uint64_t sub_2141F0654@<X0>(double *a1@<X0>, double *a2@<X1>, double *a3@<X2>, char a4@<W3>, char a5@<W4>, uint64_t *a6@<X8>)
{
  double *v8;
  double v9;
  double v10;
  double v11;
  uint64_t result;
  double v13;

  v8 = a1 + 1;
  v9 = *a2;
  v10 = *a3;
  if (!a4)
    v8 = a1;
  v11 = *v8;
  sub_2141D8BF8(&qword_253F13D68);
  result = swift_allocObject();
  *(_OWORD *)(result + 16) = xmmword_2144271D0;
  if ((a5 & 1) != 0)
  {
    *(double *)(result + 32) = v11 - v9;
    v13 = v10 + 0.0;
  }
  else
  {
    *(double *)(result + 32) = v9 + 0.0;
    v13 = v11 - v10;
  }
  *(double *)(result + 40) = v13;
  *a6 = result;
  return result;
}

uint64_t sub_2141F06F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long double a3@<X2>, unsigned __int8 a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  BOOL v7;
  uint64_t result;
  double v9[9];
  double v10;

  v6 = a5;
  LODWORD(a5) = a4;
  if (a4)
  {
    if (a4 != 1)
      goto LABEL_7;
    a1 = sub_21421EDB4(a1, (uint64_t)v9, a3);
    a5 = *(_QWORD *)(a2 + 16);
    if (a5)
      goto LABEL_14;
    __break(1u);
  }
  sub_21421EC54(a1, (uint64_t)v9, a3);
  a5 = *(_QWORD *)(a2 + 16);
  if (a5)
    goto LABEL_14;
  __break(1u);
LABEL_7:
  if ((_DWORD)a5 == 2)
  {
    v7 = *(_QWORD *)&a3 == 2;
    if (*(_QWORD *)&a3 < 2uLL)
    {
      a1 = sub_21421EF30(a1, (uint64_t)v9);
      a5 = *(_QWORD *)(a2 + 16);
      if (a5)
        goto LABEL_14;
      __break(1u);
    }
    if (!v7)
      goto LABEL_16;
    sub_21421EB2C(a1, (uint64_t)v9);
    a5 = *(_QWORD *)(a2 + 16);
    if (a5)
    {
LABEL_14:
      sub_2141F1C84(v9, v6, *(double *)(a2 + 32), *(double *)(a2 + 32 + 8 * a5 - 8));
      swift_release();
      sub_2141D972C(*(uint64_t *)&v9[2]);
      v10 = v9[4];
      return sub_2141F9244((uint64_t)&v10);
    }
    __break(1u);
  }
LABEL_16:
  result = sub_214425628();
  __break(1u);
  return result;
}

uint64_t sub_2141F0818@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long double a3@<X2>, unsigned __int8 a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  BOOL v7;
  uint64_t result;
  double v9[9];
  double v10;

  v6 = a5;
  LODWORD(a5) = a4;
  if (a4)
  {
    if (a4 != 1)
      goto LABEL_7;
    a1 = sub_21421EDB4(a1, (uint64_t)v9, a3);
    a5 = *(_QWORD *)(a2 + 16);
    if (a5)
      goto LABEL_14;
    __break(1u);
  }
  sub_21421EC54(a1, (uint64_t)v9, a3);
  a5 = *(_QWORD *)(a2 + 16);
  if (a5)
    goto LABEL_14;
  __break(1u);
LABEL_7:
  if ((_DWORD)a5 == 2)
  {
    v7 = *(_QWORD *)&a3 == 2;
    if (*(_QWORD *)&a3 < 2uLL)
    {
      a1 = sub_21421EF30(a1, (uint64_t)v9);
      a5 = *(_QWORD *)(a2 + 16);
      if (a5)
        goto LABEL_14;
      __break(1u);
    }
    if (!v7)
      goto LABEL_16;
    sub_21421EB2C(a1, (uint64_t)v9);
    a5 = *(_QWORD *)(a2 + 16);
    if (a5)
    {
LABEL_14:
      sub_2141F1DE0(v9, v6, *(double *)(a2 + 32), *(double *)(a2 + 32 + 8 * a5 - 8));
      swift_release();
      sub_2141D972C(*(uint64_t *)&v9[2]);
      v10 = v9[4];
      return sub_2141F9244((uint64_t)&v10);
    }
    __break(1u);
  }
LABEL_16:
  result = sub_214425628();
  __break(1u);
  return result;
}

uint64_t sub_2141F0940(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  char v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  sub_2141D8BF8(&qword_253F15D58);
  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_214427890;
  *(_QWORD *)(v8 + 32) = a1;
  *(_QWORD *)(v8 + 40) = a2;
  v29 = v8;
  sub_214424FF8();
  v9 = v29;
  v10 = (_QWORD *)swift_allocObject();
  v10[2] = a3;
  v10[3] = a4;
  v10[4] = a1;
  v10[5] = a2;
  sub_2141D8BF8(&qword_253F10260);
  v11 = swift_allocObject();
  *(_WORD *)(v11 + 16) = 256;
  *(_OWORD *)(v11 + 40) = 0u;
  *(_OWORD *)(v11 + 56) = 0u;
  *(_OWORD *)(v11 + 72) = 0u;
  *(_OWORD *)(v11 + 88) = 0u;
  *(_OWORD *)(v11 + 104) = 0u;
  *(_OWORD *)(v11 + 120) = 0u;
  *(_OWORD *)(v11 + 136) = 0u;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  v12 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v11 + 24) = v9;
  *(_QWORD *)(v11 + 32) = v12;
  if (!(v9 >> 62))
  {
    v13 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_retain();
    swift_retain();
    result = swift_bridgeObjectRetain();
    if (v13)
      goto LABEL_3;
LABEL_20:
    swift_bridgeObjectRelease();
    v27 = swift_allocObject();
    *(_QWORD *)(v27 + 16) = sub_2141FA1D0;
    *(_QWORD *)(v27 + 24) = v10;
    v28 = *(_QWORD *)(v11 + 168);
    *(_QWORD *)(v11 + 168) = sub_2141E8014;
    *(_QWORD *)(v11 + 176) = v27;
    sub_2141D972C(v28);
    return v11;
  }
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  result = sub_2144256AC();
  v13 = result;
  if (!result)
    goto LABEL_20;
LABEL_3:
  if (v13 >= 1)
  {
    if ((v9 & 0xC000000000000001) != 0)
    {
      v15 = 0;
      do
      {
        v16 = MEMORY[0x2199CCE3C](v15, v9);
        swift_weakInit();
        v17 = *(_QWORD **)(v16 + 32);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v16 + 32) = v17;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v17 = sub_214221F04(0, v17[2] + 1, 1, v17);
          *(_QWORD *)(v16 + 32) = v17;
        }
        v20 = v17[2];
        v19 = v17[3];
        if (v20 >= v19 >> 1)
        {
          v17 = sub_214221F04((_QWORD *)(v19 > 1), v20 + 1, 1, v17);
          *(_QWORD *)(v16 + 32) = v17;
        }
        ++v15;
        v17[2] = v20 + 1;
        sub_2141E801C((uint64_t)&v29, (uint64_t)&v17[v20 + 4], &qword_253F13188);
        swift_unknownObjectRelease();
      }
      while (v13 != v15);
    }
    else
    {
      v21 = 0;
      do
      {
        v22 = *(_QWORD *)(v9 + 8 * v21 + 32);
        swift_weakInit();
        v23 = *(_QWORD **)(v22 + 32);
        swift_retain();
        v24 = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v22 + 32) = v23;
        if ((v24 & 1) == 0)
        {
          v23 = sub_214221F04(0, v23[2] + 1, 1, v23);
          *(_QWORD *)(v22 + 32) = v23;
        }
        v26 = v23[2];
        v25 = v23[3];
        if (v26 >= v25 >> 1)
        {
          v23 = sub_214221F04((_QWORD *)(v25 > 1), v26 + 1, 1, v23);
          *(_QWORD *)(v22 + 32) = v23;
        }
        ++v21;
        v23[2] = v26 + 1;
        sub_2141E801C((uint64_t)&v29, (uint64_t)&v23[v26 + 4], &qword_253F13188);
        swift_release();
      }
      while (v13 != v21);
    }
    goto LABEL_20;
  }
  __break(1u);
  return result;
}

uint64_t sub_2141F0C80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  char v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  sub_2141D8BF8(&qword_253F15D58);
  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_214427890;
  *(_QWORD *)(v8 + 32) = a1;
  *(_QWORD *)(v8 + 40) = a2;
  v29 = v8;
  sub_214424FF8();
  v9 = v29;
  v10 = (_QWORD *)swift_allocObject();
  v10[2] = a3;
  v10[3] = a4;
  v10[4] = a1;
  v10[5] = a2;
  sub_2141D8BF8(&qword_253F10258);
  v11 = swift_allocObject();
  *(_WORD *)(v11 + 16) = 256;
  *(_OWORD *)(v11 + 40) = 0u;
  *(_OWORD *)(v11 + 56) = 0u;
  *(_OWORD *)(v11 + 72) = 0u;
  *(_OWORD *)(v11 + 88) = 0u;
  *(_OWORD *)(v11 + 104) = 0u;
  *(_OWORD *)(v11 + 120) = 0u;
  *(_OWORD *)(v11 + 136) = 0u;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  v12 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v11 + 24) = v9;
  *(_QWORD *)(v11 + 32) = v12;
  if (!(v9 >> 62))
  {
    v13 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_retain();
    swift_retain();
    result = swift_bridgeObjectRetain();
    if (v13)
      goto LABEL_3;
LABEL_20:
    swift_bridgeObjectRelease();
    v27 = swift_allocObject();
    *(_QWORD *)(v27 + 16) = sub_2141FA1C8;
    *(_QWORD *)(v27 + 24) = v10;
    v28 = *(_QWORD *)(v11 + 168);
    *(_QWORD *)(v11 + 168) = sub_2141E7E10;
    *(_QWORD *)(v11 + 176) = v27;
    sub_2141D972C(v28);
    return v11;
  }
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  result = sub_2144256AC();
  v13 = result;
  if (!result)
    goto LABEL_20;
LABEL_3:
  if (v13 >= 1)
  {
    if ((v9 & 0xC000000000000001) != 0)
    {
      v15 = 0;
      do
      {
        v16 = MEMORY[0x2199CCE3C](v15, v9);
        swift_weakInit();
        v17 = *(_QWORD **)(v16 + 32);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v16 + 32) = v17;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v17 = sub_214221F04(0, v17[2] + 1, 1, v17);
          *(_QWORD *)(v16 + 32) = v17;
        }
        v20 = v17[2];
        v19 = v17[3];
        if (v20 >= v19 >> 1)
        {
          v17 = sub_214221F04((_QWORD *)(v19 > 1), v20 + 1, 1, v17);
          *(_QWORD *)(v16 + 32) = v17;
        }
        ++v15;
        v17[2] = v20 + 1;
        sub_2141E801C((uint64_t)&v29, (uint64_t)&v17[v20 + 4], &qword_253F13188);
        swift_unknownObjectRelease();
      }
      while (v13 != v15);
    }
    else
    {
      v21 = 0;
      do
      {
        v22 = *(_QWORD *)(v9 + 8 * v21 + 32);
        swift_weakInit();
        v23 = *(_QWORD **)(v22 + 32);
        swift_retain();
        v24 = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v22 + 32) = v23;
        if ((v24 & 1) == 0)
        {
          v23 = sub_214221F04(0, v23[2] + 1, 1, v23);
          *(_QWORD *)(v22 + 32) = v23;
        }
        v26 = v23[2];
        v25 = v23[3];
        if (v26 >= v25 >> 1)
        {
          v23 = sub_214221F04((_QWORD *)(v25 > 1), v26 + 1, 1, v23);
          *(_QWORD *)(v22 + 32) = v23;
        }
        ++v21;
        v23[2] = v26 + 1;
        sub_2141E801C((uint64_t)&v29, (uint64_t)&v23[v26 + 4], &qword_253F13188);
        swift_release();
      }
      while (v13 != v21);
    }
    goto LABEL_20;
  }
  __break(1u);
  return result;
}

uint64_t sub_2141F0FC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  char v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  sub_2141D8BF8(&qword_253F15D58);
  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_214427890;
  *(_QWORD *)(v8 + 32) = a1;
  *(_QWORD *)(v8 + 40) = a2;
  v29 = v8;
  sub_214424FF8();
  v9 = v29;
  v10 = (_QWORD *)swift_allocObject();
  v10[2] = a3;
  v10[3] = a4;
  v10[4] = a1;
  v10[5] = a2;
  sub_2141D8BF8(&qword_253F10258);
  v11 = swift_allocObject();
  *(_WORD *)(v11 + 16) = 256;
  *(_OWORD *)(v11 + 40) = 0u;
  *(_OWORD *)(v11 + 56) = 0u;
  *(_OWORD *)(v11 + 72) = 0u;
  *(_OWORD *)(v11 + 88) = 0u;
  *(_OWORD *)(v11 + 104) = 0u;
  *(_OWORD *)(v11 + 120) = 0u;
  *(_OWORD *)(v11 + 136) = 0u;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  v12 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v11 + 24) = v9;
  *(_QWORD *)(v11 + 32) = v12;
  if (!(v9 >> 62))
  {
    v13 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_retain();
    swift_retain();
    result = swift_bridgeObjectRetain();
    if (v13)
      goto LABEL_3;
LABEL_20:
    swift_bridgeObjectRelease();
    v27 = swift_allocObject();
    *(_QWORD *)(v27 + 16) = sub_2141F9B10;
    *(_QWORD *)(v27 + 24) = v10;
    v28 = *(_QWORD *)(v11 + 168);
    *(_QWORD *)(v11 + 168) = sub_2141E9234;
    *(_QWORD *)(v11 + 176) = v27;
    sub_2141D972C(v28);
    return v11;
  }
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  result = sub_2144256AC();
  v13 = result;
  if (!result)
    goto LABEL_20;
LABEL_3:
  if (v13 >= 1)
  {
    if ((v9 & 0xC000000000000001) != 0)
    {
      v15 = 0;
      do
      {
        v16 = MEMORY[0x2199CCE3C](v15, v9);
        swift_weakInit();
        v17 = *(_QWORD **)(v16 + 32);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v16 + 32) = v17;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v17 = sub_214221F04(0, v17[2] + 1, 1, v17);
          *(_QWORD *)(v16 + 32) = v17;
        }
        v20 = v17[2];
        v19 = v17[3];
        if (v20 >= v19 >> 1)
        {
          v17 = sub_214221F04((_QWORD *)(v19 > 1), v20 + 1, 1, v17);
          *(_QWORD *)(v16 + 32) = v17;
        }
        ++v15;
        v17[2] = v20 + 1;
        sub_2141E801C((uint64_t)&v29, (uint64_t)&v17[v20 + 4], &qword_253F13188);
        swift_unknownObjectRelease();
      }
      while (v13 != v15);
    }
    else
    {
      v21 = 0;
      do
      {
        v22 = *(_QWORD *)(v9 + 8 * v21 + 32);
        swift_weakInit();
        v23 = *(_QWORD **)(v22 + 32);
        swift_retain();
        v24 = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v22 + 32) = v23;
        if ((v24 & 1) == 0)
        {
          v23 = sub_214221F04(0, v23[2] + 1, 1, v23);
          *(_QWORD *)(v22 + 32) = v23;
        }
        v26 = v23[2];
        v25 = v23[3];
        if (v26 >= v25 >> 1)
        {
          v23 = sub_214221F04((_QWORD *)(v25 > 1), v26 + 1, 1, v23);
          *(_QWORD *)(v22 + 32) = v23;
        }
        ++v21;
        v23[2] = v26 + 1;
        sub_2141E801C((uint64_t)&v29, (uint64_t)&v23[v26 + 4], &qword_253F13188);
        swift_release();
      }
      while (v13 != v21);
    }
    goto LABEL_20;
  }
  __break(1u);
  return result;
}

uint64_t sub_2141F1300(uint64_t *a1, uint64_t *a2, unint64_t a3, char a4)
{
  uint64_t v6;
  uint64_t v7;

  v6 = *a1;
  v7 = *a2;
  swift_bridgeObjectRetain();
  sub_2141F1368(v6, v7, a3, a4, (void (*)(_BYTE *, uint64_t))sub_2141F1F3C);
  return swift_bridgeObjectRelease();
}

uint64_t sub_2141F1368(uint64_t a1, uint64_t a2, unint64_t a3, char a4, void (*a5)(_BYTE *, uint64_t))
{
  uint64_t result;
  _BYTE v8[8];
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  switch(a4)
  {
    case 0:
      sub_21421EC54(a1, (uint64_t)v8, *(long double *)&a3);
      goto LABEL_10;
    case 1:
      sub_21421EDB4(a1, (uint64_t)v8, *(double *)&a3);
LABEL_10:
      a5(v8, a2);
      swift_release();
      sub_2141D972C(v9);
      v11 = v10;
      return sub_2141F9244((uint64_t)&v11);
    case 2:
      if (a3 < 2)
      {
        sub_21421EF30(a1, (uint64_t)v8);
        goto LABEL_10;
      }
      if (a3 == 2)
      {
        sub_21421EB2C(a1, (uint64_t)v8);
        goto LABEL_10;
      }
      break;
  }
  result = sub_214425628();
  __break(1u);
  return result;
}

uint64_t sub_2141F1470@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long double a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t result;
  int8x16_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  switch(a4)
  {
    case 0:
      sub_21421EC54(a1, (uint64_t)&v8, a3);
      goto LABEL_10;
    case 1:
      sub_21421EDB4(a1, (uint64_t)&v8, a3);
LABEL_10:
      sub_2141F21C8(&v8, a2, a5);
      swift_release();
      sub_2141D972C(v9);
      v11 = v10;
      return sub_2141F9244((uint64_t)&v11);
    case 2:
      if (*(_QWORD *)&a3 < 2uLL)
      {
        sub_21421EF30(a1, (uint64_t)&v8);
        goto LABEL_10;
      }
      if (*(_QWORD *)&a3 == 2)
      {
        sub_21421EB2C(a1, (uint64_t)&v8);
        goto LABEL_10;
      }
      break;
  }
  result = sub_214425628();
  __break(1u);
  return result;
}

uint64_t sub_2141F156C(uint64_t *a1, uint64_t *a2, unint64_t a3, char a4)
{
  uint64_t v6;
  uint64_t v7;

  v6 = *a1;
  v7 = *a2;
  swift_retain();
  sub_2141F1368(v6, v7, a3, a4, (void (*)(_BYTE *, uint64_t))sub_2141F2080);
  return swift_release();
}

uint64_t sub_2141F15D4@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, long double a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;

  v8 = *a1;
  v9 = *a2;
  swift_bridgeObjectRetain();
  sub_2141F1470(v8, v9, a3, a4, a5);
  return swift_bridgeObjectRelease();
}

uint64_t sub_2141F1634@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned __int8 a4@<W3>, uint64_t a5@<X8>)
{
  int v9;
  uint64_t v10;
  double (*v11)@<D0>(double *@<X8>, double@<D0>);
  uint64_t v12;
  uint64_t v13;

  v9 = a4;
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = a2;
  *(_QWORD *)(v10 + 24) = a3;
  if (v9 == 1)
    v11 = sub_2141F98AC;
  else
    v11 = sub_2141F9868;
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = sub_2141F9864;
  *(_QWORD *)(v12 + 24) = v10;
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = v11;
  *(_QWORD *)(v13 + 24) = v12;
  *(_QWORD *)a5 = sub_2141F9870;
  *(_QWORD *)(a5 + 8) = v13;
  *(_QWORD *)(a5 + 48) = a1;
  *(_QWORD *)(a5 + 56) = 0;
  *(_BYTE *)(a5 + 64) = -1;
  *(_QWORD *)(a5 + 16) = 0;
  *(_BYTE *)(a5 + 24) = 1;
  *(_QWORD *)(a5 + 32) = 0;
  *(_QWORD *)(a5 + 40) = 0;
  *(_OWORD *)(a5 + 72) = xmmword_2144278A0;
  *(_QWORD *)(a5 + 88) = 0;
  *(_QWORD *)(a5 + 96) = 0;
  swift_retain();
  return swift_bridgeObjectRetain();
}

uint64_t sub_2141F1730@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned __int8 a4@<W3>, uint64_t a5@<X8>)
{
  int v9;
  uint64_t v10;
  uint64_t (*v11)(double);
  uint64_t v12;
  uint64_t v13;

  v9 = a4;
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = a2;
  *(_QWORD *)(v10 + 24) = a3;
  if (v9 == 1)
    v11 = sub_2141F9838;
  else
    v11 = sub_2141F97E8;
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = sub_2141F97E4;
  *(_QWORD *)(v12 + 24) = v10;
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = v11;
  *(_QWORD *)(v13 + 24) = v12;
  *(_OWORD *)(a5 + 16) = 0u;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_QWORD *)a5 = sub_2141F9814;
  *(_QWORD *)(a5 + 8) = v13;
  *(_QWORD *)(a5 + 72) = a1;
  *(_QWORD *)(a5 + 80) = 0;
  *(_BYTE *)(a5 + 88) = -1;
  *(_QWORD *)(a5 + 56) = 0;
  *(_QWORD *)(a5 + 64) = 0;
  *(_QWORD *)(a5 + 48) = 0;
  *(_OWORD *)(a5 + 96) = xmmword_2144278A0;
  *(_QWORD *)(a5 + 112) = 0;
  *(_QWORD *)(a5 + 120) = 0;
  swift_retain();
  return swift_bridgeObjectRetain();
}

uint64_t sub_2141F182C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned __int8 a4@<W3>, uint64_t a5@<X8>)
{
  int v9;
  uint64_t v10;
  double (*v11)@<D0>(uint64_t@<X8>, double@<D0>);
  uint64_t v12;
  uint64_t v13;

  v9 = a4;
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = a2;
  *(_QWORD *)(v10 + 24) = a3;
  if (v9 == 1)
    v11 = sub_2141F977C;
  else
    v11 = sub_2141F9720;
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = sub_2141F971C;
  *(_QWORD *)(v12 + 24) = v10;
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = v11;
  *(_QWORD *)(v13 + 24) = v12;
  *(_QWORD *)a5 = sub_2141F9728;
  *(_QWORD *)(a5 + 8) = v13;
  *(_QWORD *)(a5 + 72) = a1;
  *(_QWORD *)(a5 + 80) = 0;
  *(_BYTE *)(a5 + 88) = -1;
  *(_OWORD *)(a5 + 16) = 0u;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)(a5 + 48) = 0u;
  *(_QWORD *)(a5 + 64) = 0;
  *(_OWORD *)(a5 + 96) = xmmword_2144278A0;
  *(_QWORD *)(a5 + 112) = 0;
  *(_QWORD *)(a5 + 120) = 0;
  swift_retain();
  return swift_bridgeObjectRetain();
}

uint64_t sub_2141F1928@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned __int8 a4@<W3>, uint64_t a5@<X8>)
{
  int v9;
  uint64_t v10;
  _QWORD *(*v11)@<X0>(_QWORD *@<X8>, double@<D0>);
  uint64_t v12;
  uint64_t v13;

  v9 = a4;
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = a2;
  *(_QWORD *)(v10 + 24) = a3;
  if (v9 == 1)
    v11 = sub_2141F96D0;
  else
    v11 = sub_2141F9668;
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = sub_2141F9664;
  *(_QWORD *)(v12 + 24) = v10;
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = v11;
  *(_QWORD *)(v13 + 24) = v12;
  *(_QWORD *)a5 = sub_2141F9670;
  *(_QWORD *)(a5 + 8) = v13;
  *(_QWORD *)(a5 + 40) = a1;
  *(_QWORD *)(a5 + 48) = 0;
  *(_BYTE *)(a5 + 56) = -1;
  *(_QWORD *)(a5 + 24) = 0;
  *(_QWORD *)(a5 + 32) = 0;
  *(_QWORD *)(a5 + 16) = 0;
  *(_OWORD *)(a5 + 64) = xmmword_2144278A0;
  *(_QWORD *)(a5 + 80) = 0;
  *(_QWORD *)(a5 + 88) = 0;
  swift_retain();
  return swift_bridgeObjectRetain();
}

uint64_t sub_2141F1A1C(uint64_t *a1, uint64_t *a2, uint64_t a3, char a4, char a5, uint64_t (*a6)(uint64_t, uint64_t), uint64_t (*a7)(uint64_t, uint64_t))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  if (a4 == 2 && (a3 | 4) == 4)
  {
    v8 = *a1;
    v9 = *a2;
    if ((a5 & 0xFC) != 0)
      return a7(v8, v9);
    else
      return a6(v8, v9);
  }
  else
  {
    result = sub_214425628();
    __break(1u);
  }
  return result;
}

uint64_t sub_2141F1AA4@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  if (a4 == 2 && (a3 | 4) == 4)
  {
    v7 = *a1;
    v8 = *a2;
    swift_bridgeObjectRetain();
    sub_2141F3F60(v7, v8, a5);
    return swift_bridgeObjectRelease();
  }
  else
  {
    result = sub_214425628();
    __break(1u);
  }
  return result;
}

uint64_t sub_2141F1B54@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  if (a4 == 2 && (a3 | 4) == 4)
  {
    v7 = *a1;
    v8 = *a2;
    swift_retain();
    sub_2141F35D4(v7, v8, a5);
    return swift_release();
  }
  else
  {
    result = sub_214425628();
    __break(1u);
  }
  return result;
}

uint64_t sub_2141F1C04(_QWORD *a1, _QWORD *a2, uint64_t a3, char a4, uint64_t (*a5)(_QWORD, _QWORD))
{
  uint64_t result;

  if (a4 == 2 && (a3 | 4) == 4)
    return a5(*a1, *a2);
  result = sub_214425628();
  __break(1u);
  return result;
}

uint64_t sub_2141F1C84@<X0>(double *a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  uint64_t v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)@<X0>(double *@<X0>, uint64_t@<X8>);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;

  v9 = *a1;
  v8 = *((_QWORD *)a1 + 1);
  v10 = *((_QWORD *)a1 + 2);
  v11 = *((_QWORD *)a1 + 3);
  if (v10)
  {
    v12 = swift_allocObject();
    *(double *)(v12 + 16) = a3;
    *(double *)(v12 + 24) = a4;
    *(_QWORD *)(v12 + 32) = v10;
    *(_QWORD *)(v12 + 40) = v11;
    v13 = sub_2141F9334;
  }
  else
  {
    v13 = 0;
    v12 = 0;
  }
  v14 = swift_allocObject();
  *(double *)(v14 + 16) = v9;
  *(_QWORD *)(v14 + 24) = v8;
  *(double *)(v14 + 32) = a3;
  *(double *)(v14 + 40) = a4;
  sub_2141D8BF8(&qword_253F13D68);
  v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_2144271D0;
  *(double *)(v15 + 32) = a3;
  *(double *)(v15 + 40) = a4;
  v16 = *((_QWORD *)a1 + 6);
  v17 = a1[7];
  v18 = a1[8];
  if (v16 != 255)
  {
    v16 = *((_QWORD *)a1 + 6);
    v17 = (a4 - a3) * v17;
    v18 = (a4 - a3) * v18 + a3;
  }
  v19 = *((_QWORD *)a1 + 5);
  v22 = *((_QWORD *)a1 + 4);
  v20 = v22;
  *(_QWORD *)a2 = sub_2141F9290;
  *(_QWORD *)(a2 + 8) = v14;
  *(_QWORD *)(a2 + 48) = v20;
  *(_QWORD *)(a2 + 56) = v15;
  *(_BYTE *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_BYTE *)(a2 + 24) = 1;
  *(_QWORD *)(a2 + 32) = v13;
  *(_QWORD *)(a2 + 40) = v12;
  *(_QWORD *)(a2 + 72) = v19;
  *(_QWORD *)(a2 + 80) = v16;
  *(double *)(a2 + 88) = v17;
  *(double *)(a2 + 96) = v18;
  swift_retain();
  sub_2141F92E8((uint64_t)&v22);
  return sub_2141D975C(v10);
}

uint64_t sub_2141F1DE0@<X0>(double *a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  uint64_t v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *(*v13)@<X0>(double *@<X0>, uint64_t@<X8>);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;

  v9 = *a1;
  v8 = *((_QWORD *)a1 + 1);
  v10 = *((_QWORD *)a1 + 2);
  v11 = *((_QWORD *)a1 + 3);
  if (v10)
  {
    v12 = swift_allocObject();
    *(double *)(v12 + 16) = a3;
    *(double *)(v12 + 24) = a4;
    *(_QWORD *)(v12 + 32) = v10;
    *(_QWORD *)(v12 + 40) = v11;
    v13 = sub_2141F9370;
  }
  else
  {
    v13 = 0;
    v12 = 0;
  }
  v14 = swift_allocObject();
  *(double *)(v14 + 16) = v9;
  *(_QWORD *)(v14 + 24) = v8;
  *(double *)(v14 + 32) = a3;
  *(double *)(v14 + 40) = a4;
  sub_2141D8BF8(&qword_253F15D48);
  v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_2144271D0;
  *(double *)(v15 + 32) = a3;
  *(double *)(v15 + 40) = a4;
  v16 = *((_QWORD *)a1 + 6);
  v17 = a1[7];
  v18 = a1[8];
  if (v16 != 255)
  {
    v16 = *((_QWORD *)a1 + 6);
    v17 = (a4 - a3) * v17;
    v18 = (a4 - a3) * v18 + a3;
  }
  v19 = *((_QWORD *)a1 + 5);
  v22 = *((_QWORD *)a1 + 4);
  v20 = v22;
  *(_BYTE *)(a2 + 24) = 1;
  *(_QWORD *)(a2 + 8) = v14;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = sub_2141F9290;
  *(_QWORD *)(a2 + 48) = v20;
  *(_QWORD *)(a2 + 56) = v15;
  *(_BYTE *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 32) = v13;
  *(_QWORD *)(a2 + 40) = v12;
  *(_QWORD *)(a2 + 72) = v19;
  *(_QWORD *)(a2 + 80) = v16;
  *(double *)(a2 + 88) = v17;
  *(double *)(a2 + 96) = v18;
  swift_retain();
  sub_2141F92E8((uint64_t)&v22);
  return sub_2141D975C(v10);
}

uint64_t sub_2141F1F3C@<X0>(int8x16_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *(*v11)@<X0>(uint64_t@<X8>);
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int32x2_t v16;
  int64x2_t v17;
  int8x16_t v18;
  uint64_t v20;

  v7 = a1->i64[0];
  v6 = a1->i64[1];
  v8 = a1[1].i64[0];
  v9 = a1[1].i64[1];
  if (v8)
  {
    v10 = (_QWORD *)swift_allocObject();
    v10[2] = a2;
    v10[3] = v8;
    v10[4] = v9;
    swift_bridgeObjectRetain();
    v11 = sub_2141F943C;
  }
  else
  {
    v11 = 0;
    v10 = 0;
  }
  v12 = (_QWORD *)swift_allocObject();
  v12[2] = v7;
  v12[3] = v6;
  v12[4] = a2;
  v13 = a1[4].i64[0];
  v14 = a1[2].i64[1];
  v20 = a1[2].i64[0];
  v15 = v20;
  *(_QWORD *)a3 = sub_2141F93DC;
  *(_QWORD *)(a3 + 8) = v12;
  *(_QWORD *)(a3 + 40) = v15;
  *(_QWORD *)(a3 + 48) = a2;
  *(_BYTE *)(a3 + 56) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = v11;
  *(_QWORD *)(a3 + 32) = v10;
  if (*(_OWORD *)&a1[3] != 255)
    v14 = 0;
  v16 = vdup_n_s32(*(_OWORD *)&a1[3] == 255);
  v17.i64[0] = v16.u32[0];
  v17.i64[1] = v16.u32[1];
  v18 = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v17, 0x3FuLL)), a1[3], (int8x16_t)xmmword_2144278B0);
  if (*(_OWORD *)&a1[3] != 255)
    v13 = 0;
  *(_QWORD *)(a3 + 64) = v14;
  *(int8x16_t *)(a3 + 72) = v18;
  *(_QWORD *)(a3 + 88) = v13;
  swift_bridgeObjectRetain_n();
  swift_retain();
  sub_2141F92E8((uint64_t)&v20);
  return sub_2141D975C(v8);
}

uint64_t sub_2141F2080@<X0>(int8x16_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *(*v11)@<X0>(uint64_t@<X8>);
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int32x2_t v16;
  int64x2_t v17;
  int8x16_t v18;
  uint64_t v20;

  v7 = a1->i64[0];
  v6 = a1->i64[1];
  v8 = a1[1].i64[0];
  v9 = a1[1].i64[1];
  if (v8)
  {
    v10 = (_QWORD *)swift_allocObject();
    v10[2] = a2;
    v10[3] = v8;
    v10[4] = v9;
    swift_retain();
    v11 = sub_2141F943C;
  }
  else
  {
    v11 = 0;
    v10 = 0;
  }
  v12 = (_QWORD *)swift_allocObject();
  v12[2] = v7;
  v12[3] = v6;
  v12[4] = a2;
  v13 = a1[4].i64[0];
  v14 = a1[2].i64[1];
  v20 = a1[2].i64[0];
  v15 = v20;
  *(_QWORD *)a3 = sub_2141F94EC;
  *(_QWORD *)(a3 + 8) = v12;
  *(_QWORD *)(a3 + 40) = v15;
  *(_QWORD *)(a3 + 48) = a2;
  *(_BYTE *)(a3 + 56) = 1;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = v11;
  *(_QWORD *)(a3 + 32) = v10;
  if (*(_OWORD *)&a1[3] != 255)
    v14 = 0;
  v16 = vdup_n_s32(*(_OWORD *)&a1[3] == 255);
  v17.i64[0] = v16.u32[0];
  v17.i64[1] = v16.u32[1];
  v18 = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v17, 0x3FuLL)), a1[3], (int8x16_t)xmmword_2144278B0);
  if (*(_OWORD *)&a1[3] != 255)
    v13 = 0;
  *(_QWORD *)(a3 + 64) = v14;
  *(int8x16_t *)(a3 + 72) = v18;
  *(_QWORD *)(a3 + 88) = v13;
  swift_retain_n();
  swift_retain();
  sub_2141F92E8((uint64_t)&v20);
  return sub_2141D975C(v8);
}

uint64_t sub_2141F21C8@<X0>(int8x16_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *(*v11)@<X0>(uint64_t@<X8>);
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int32x2_t v16;
  int64x2_t v17;
  int8x16_t v18;
  uint64_t v20;

  v7 = a1->i64[0];
  v6 = a1->i64[1];
  v8 = a1[1].i64[0];
  v9 = a1[1].i64[1];
  if (v8)
  {
    v10 = (_QWORD *)swift_allocObject();
    v10[2] = a2;
    v10[3] = v8;
    v10[4] = v9;
    swift_bridgeObjectRetain();
    v11 = sub_2141F943C;
  }
  else
  {
    v11 = 0;
    v10 = 0;
  }
  v12 = (_QWORD *)swift_allocObject();
  v12[2] = v7;
  v12[3] = v6;
  v12[4] = a2;
  v13 = a1[4].i64[0];
  v14 = a1[2].i64[1];
  v20 = a1[2].i64[0];
  v15 = v20;
  *(_QWORD *)a3 = sub_2141F9548;
  *(_QWORD *)(a3 + 8) = v12;
  *(_QWORD *)(a3 + 72) = v15;
  *(_QWORD *)(a3 + 80) = a2;
  *(_BYTE *)(a3 + 88) = 0;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 56) = v11;
  *(_QWORD *)(a3 + 64) = v10;
  if (*(_OWORD *)&a1[3] != 255)
    v14 = 0;
  v16 = vdup_n_s32(*(_OWORD *)&a1[3] == 255);
  v17.i64[0] = v16.u32[0];
  v17.i64[1] = v16.u32[1];
  v18 = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v17, 0x3FuLL)), a1[3], (int8x16_t)xmmword_2144278B0);
  if (*(_OWORD *)&a1[3] != 255)
    v13 = 0;
  *(_QWORD *)(a3 + 96) = v14;
  *(int8x16_t *)(a3 + 104) = v18;
  *(_QWORD *)(a3 + 120) = v13;
  swift_bridgeObjectRetain_n();
  swift_retain();
  sub_2141F92E8((uint64_t)&v20);
  return sub_2141D975C(v8);
}

uint64_t sub_2141F2314(void (*a1)(uint64_t *__return_ptr, double, _QWORD), double a2, double a3, double a4)
{
  uint64_t v5;

  ((void (*)(_QWORD *__return_ptr, _QWORD, _QWORD))a1)(&v5, (a2 - a3) / (a4 - a3), 0);
  return v5;
}

uint64_t sub_2141F2360@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  double v6;
  double v7;
  uint64_t v8;
  double v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  char isUniquelyReferenced_nonNull_native;
  char v16;
  unint64_t v17;
  uint64_t v18;
  _BOOL8 v19;
  uint64_t v20;
  char v21;
  unint64_t v22;
  char v23;
  double v24;
  uint64_t *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  _BOOL8 v35;
  uint64_t v36;
  char v37;
  unint64_t v38;
  char v39;
  double v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t result;
  uint64_t v47;

  if (*(_QWORD *)(a2 + 16) != 2)
  {
LABEL_34:
    __break(1u);
LABEL_35:
    result = sub_214425820();
    __break(1u);
    return result;
  }
  v4 = a2;
  v5 = a1;
  v6 = *(double *)(a2 + 32);
  v7 = *(double *)(a2 + 40);
  v8 = *(_QWORD *)(a1 + 16);
  if (v8)
  {
    v9 = vabdd_f64(v7, v6) / (double)v8;
    v10 = (_QWORD *)sub_2143688EC(MEMORY[0x24BEE4AF8]);
    swift_bridgeObjectRetain();
    v47 = v5;
    v11 = 0;
    v12 = (uint64_t *)(v5 + 40);
    if (v6 <= v7)
    {
      while (1)
      {
        v14 = *(v12 - 1);
        v13 = *v12;
        swift_bridgeObjectRetain();
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v17 = sub_214336D1C(v14, v13);
        v18 = v10[2];
        v19 = (v16 & 1) == 0;
        v20 = v18 + v19;
        if (__OFADD__(v18, v19))
          break;
        v21 = v16;
        if (v10[3] >= v20)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            sub_2142A7EF8();
        }
        else
        {
          sub_21429CA4C(v20, isUniquelyReferenced_nonNull_native);
          v22 = sub_214336D1C(v14, v13);
          if ((v21 & 1) != (v23 & 1))
            goto LABEL_35;
          v17 = v22;
        }
        v24 = v6 + v9 * (double)v11;
        if ((v21 & 1) != 0)
        {
          *(double *)(v10[7] + 8 * v17) = v24;
        }
        else
        {
          v10[(v17 >> 6) + 8] |= 1 << v17;
          v25 = (uint64_t *)(v10[6] + 16 * v17);
          *v25 = v14;
          v25[1] = v13;
          *(double *)(v10[7] + 8 * v17) = v24;
          v26 = v10[2];
          v27 = __OFADD__(v26, 1);
          v28 = v26 + 1;
          if (v27)
            goto LABEL_32;
          v10[2] = v28;
          swift_bridgeObjectRetain();
        }
        ++v11;
        v12 += 2;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v8 == v11)
        {
LABEL_27:
          v5 = v47;
          swift_bridgeObjectRelease();
          v4 = a2;
          goto LABEL_29;
        }
      }
      __break(1u);
    }
    else
    {
      while (1)
      {
        v30 = *(v12 - 1);
        v29 = *v12;
        swift_bridgeObjectRetain();
        v31 = swift_isUniquelyReferenced_nonNull_native();
        v33 = sub_214336D1C(v30, v29);
        v34 = v10[2];
        v35 = (v32 & 1) == 0;
        v36 = v34 + v35;
        if (__OFADD__(v34, v35))
          break;
        v37 = v32;
        if (v10[3] >= v36)
        {
          if ((v31 & 1) == 0)
            sub_2142A7EF8();
        }
        else
        {
          sub_21429CA4C(v36, v31);
          v38 = sub_214336D1C(v30, v29);
          if ((v37 & 1) != (v39 & 1))
            goto LABEL_35;
          v33 = v38;
        }
        v40 = v6 - v9 * ((double)v11 + 1.0);
        if ((v37 & 1) != 0)
        {
          *(double *)(v10[7] + 8 * v33) = v40;
        }
        else
        {
          v10[(v33 >> 6) + 8] |= 1 << v33;
          v41 = (uint64_t *)(v10[6] + 16 * v33);
          *v41 = v30;
          v41[1] = v29;
          *(double *)(v10[7] + 8 * v33) = v40;
          v42 = v10[2];
          v27 = __OFADD__(v42, 1);
          v43 = v42 + 1;
          if (v27)
            goto LABEL_33;
          v10[2] = v43;
          swift_bridgeObjectRetain();
        }
        ++v11;
        v12 += 2;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v8 == v11)
          goto LABEL_27;
      }
    }
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  v10 = (_QWORD *)sub_2143688EC(MEMORY[0x24BEE4AF8]);
  v9 = 0.0;
LABEL_29:
  v44 = swift_allocObject();
  *(_QWORD *)(v44 + 16) = v10;
  v45 = swift_allocObject();
  *(double *)(v45 + 16) = v6;
  *(double *)(v45 + 24) = v7;
  *(double *)(v45 + 32) = v9;
  *(_QWORD *)(v45 + 40) = v5;
  *(_QWORD *)a3 = sub_2141F9CE0;
  *(_QWORD *)(a3 + 8) = v44;
  *(_QWORD *)(a3 + 48) = v5;
  *(_QWORD *)(a3 + 56) = v4;
  *(_BYTE *)(a3 + 64) = 0;
  *(double *)(a3 + 16) = v9;
  *(_BYTE *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = sub_2141F9D34;
  *(_QWORD *)(a3 + 40) = v45;
  *(_OWORD *)(a3 + 72) = xmmword_2144278A0;
  *(_QWORD *)(a3 + 88) = 0;
  *(_QWORD *)(a3 + 96) = 0;
  swift_bridgeObjectRetain_n();
  return swift_bridgeObjectRetain();
}

uint64_t sub_2141F2724@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  double v6;
  double v7;
  uint64_t v8;
  double v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  char isUniquelyReferenced_nonNull_native;
  char v16;
  unint64_t v17;
  uint64_t v18;
  _BOOL8 v19;
  uint64_t v20;
  char v21;
  unint64_t v22;
  char v23;
  double v24;
  uint64_t *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  _BOOL8 v35;
  uint64_t v36;
  char v37;
  unint64_t v38;
  char v39;
  double v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t result;
  uint64_t v47;

  if (*(_QWORD *)(a2 + 16) != 2)
  {
LABEL_34:
    __break(1u);
LABEL_35:
    result = sub_214425820();
    __break(1u);
    return result;
  }
  v4 = a2;
  v5 = a1;
  v6 = *(double *)(a2 + 32);
  v7 = *(double *)(a2 + 40);
  v8 = *(_QWORD *)(a1 + 16);
  if (v8)
  {
    v9 = vabdd_f64(v7, v6) / (double)v8;
    v10 = (_QWORD *)sub_214368DA4(MEMORY[0x24BEE4AF8]);
    swift_bridgeObjectRetain();
    v47 = v5;
    v11 = 0;
    v12 = (uint64_t *)(v5 + 40);
    if (v6 <= v7)
    {
      while (1)
      {
        v14 = *(v12 - 1);
        v13 = *v12;
        swift_bridgeObjectRetain();
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v17 = sub_214336D1C(v14, v13);
        v18 = v10[2];
        v19 = (v16 & 1) == 0;
        v20 = v18 + v19;
        if (__OFADD__(v18, v19))
          break;
        v21 = v16;
        if (v10[3] >= v20)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            sub_2142A9538();
        }
        else
        {
          sub_21429F3F0(v20, isUniquelyReferenced_nonNull_native);
          v22 = sub_214336D1C(v14, v13);
          if ((v21 & 1) != (v23 & 1))
            goto LABEL_35;
          v17 = v22;
        }
        v24 = v6 + v9 * (double)v11;
        if ((v21 & 1) != 0)
        {
          *(double *)(v10[7] + 8 * v17) = v24;
        }
        else
        {
          v10[(v17 >> 6) + 8] |= 1 << v17;
          v25 = (uint64_t *)(v10[6] + 16 * v17);
          *v25 = v14;
          v25[1] = v13;
          *(double *)(v10[7] + 8 * v17) = v24;
          v26 = v10[2];
          v27 = __OFADD__(v26, 1);
          v28 = v26 + 1;
          if (v27)
            goto LABEL_32;
          v10[2] = v28;
          swift_bridgeObjectRetain();
        }
        ++v11;
        v12 += 2;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v8 == v11)
        {
LABEL_27:
          v5 = v47;
          swift_bridgeObjectRelease();
          v4 = a2;
          goto LABEL_29;
        }
      }
      __break(1u);
    }
    else
    {
      while (1)
      {
        v30 = *(v12 - 1);
        v29 = *v12;
        swift_bridgeObjectRetain();
        v31 = swift_isUniquelyReferenced_nonNull_native();
        v33 = sub_214336D1C(v30, v29);
        v34 = v10[2];
        v35 = (v32 & 1) == 0;
        v36 = v34 + v35;
        if (__OFADD__(v34, v35))
          break;
        v37 = v32;
        if (v10[3] >= v36)
        {
          if ((v31 & 1) == 0)
            sub_2142A9538();
        }
        else
        {
          sub_21429F3F0(v36, v31);
          v38 = sub_214336D1C(v30, v29);
          if ((v37 & 1) != (v39 & 1))
            goto LABEL_35;
          v33 = v38;
        }
        v40 = v6 - v9 * ((double)v11 + 1.0);
        if ((v37 & 1) != 0)
        {
          *(double *)(v10[7] + 8 * v33) = v40;
        }
        else
        {
          v10[(v33 >> 6) + 8] |= 1 << v33;
          v41 = (uint64_t *)(v10[6] + 16 * v33);
          *v41 = v30;
          v41[1] = v29;
          *(double *)(v10[7] + 8 * v33) = v40;
          v42 = v10[2];
          v27 = __OFADD__(v42, 1);
          v43 = v42 + 1;
          if (v27)
            goto LABEL_33;
          v10[2] = v43;
          swift_bridgeObjectRetain();
        }
        ++v11;
        v12 += 2;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v8 == v11)
          goto LABEL_27;
      }
    }
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  v10 = (_QWORD *)sub_214368DA4(MEMORY[0x24BEE4AF8]);
  v9 = 0.0;
LABEL_29:
  v44 = swift_allocObject();
  *(_QWORD *)(v44 + 16) = v10;
  v45 = swift_allocObject();
  *(double *)(v45 + 16) = v6;
  *(double *)(v45 + 24) = v7;
  *(double *)(v45 + 32) = v9;
  *(_QWORD *)(v45 + 40) = v5;
  *(double *)(a3 + 16) = v9;
  *(_BYTE *)(a3 + 24) = 0;
  *(_QWORD *)a3 = sub_2141F9CE0;
  *(_QWORD *)(a3 + 8) = v44;
  *(_QWORD *)(a3 + 48) = v5;
  *(_QWORD *)(a3 + 56) = v4;
  *(_BYTE *)(a3 + 64) = 0;
  *(_QWORD *)(a3 + 32) = sub_2141F9D84;
  *(_QWORD *)(a3 + 40) = v45;
  *(_OWORD *)(a3 + 72) = xmmword_2144278A0;
  *(_QWORD *)(a3 + 88) = 0;
  *(_QWORD *)(a3 + 96) = 0;
  swift_bridgeObjectRetain_n();
  return swift_bridgeObjectRetain();
}

uint64_t sub_2141F2AE8@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char isUniquelyReferenced_nonNull_native;
  double v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  _QWORD *v20;
  char v21;
  unint64_t v22;
  uint64_t v23;
  _BOOL8 v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  char v28;
  _QWORD *v29;
  double v30;
  double v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  double v36;
  char v37;
  _QWORD *v38;
  char v39;
  unint64_t v40;
  uint64_t v41;
  _BOOL8 v42;
  uint64_t v43;
  char v44;
  unint64_t v45;
  char v46;
  uint64_t *v47;
  uint64_t v48;
  BOOL v49;
  uint64_t v50;
  double v51;
  _QWORD *v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t result;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  _QWORD *v65;
  unint64_t v66;

  v6 = swift_allocObject();
  v7 = sub_2143688EC(MEMORY[0x24BEE4AF8]);
  *(_QWORD *)(v6 + 16) = v7;
  v8 = a1[2];
  v9 = a2[2];
  if (v8 == v9)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v65 = (_QWORD *)v7;
    *(_QWORD *)(v6 + 16) = 0x8000000000000000;
    sub_2141F6AC8(a1, a2, isUniquelyReferenced_nonNull_native, &v65);
    *(_QWORD *)(v6 + 16) = v65;
    swift_bridgeObjectRelease();
LABEL_40:
    *(_QWORD *)a3 = sub_2141F9D54;
    *(_QWORD *)(a3 + 8) = v6;
    *(_QWORD *)(a3 + 48) = a1;
    *(_QWORD *)(a3 + 56) = a2;
    *(_BYTE *)(a3 + 64) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_BYTE *)(a3 + 24) = 1;
    *(_QWORD *)(a3 + 32) = 0;
    *(_QWORD *)(a3 + 40) = 0;
    *(_OWORD *)(a3 + 72) = xmmword_2144278A0;
    *(_QWORD *)(a3 + 88) = 0;
    *(_QWORD *)(a3 + 96) = 0;
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  v61 = a1[2];
  if (!v8)
    goto LABEL_40;
  if (!v9)
    goto LABEL_47;
  v57 = a3;
  v11 = (double)(v9 - 1);
  v59 = a2;
  v60 = v9 - 2;
  v64 = a2 + 4;
  v12 = a1[2];
  swift_bridgeObjectRetain();
  v13 = 0;
  v58 = a1;
  v14 = a1 + 5;
  v15 = v9;
  v62 = v6;
  v63 = v9;
  while (1)
  {
    v17 = *(v14 - 1);
    v16 = *v14;
    if (v9 == 1)
    {
      v18 = *v64;
      swift_bridgeObjectRetain();
      v19 = swift_isUniquelyReferenced_nonNull_native();
      v65 = *(_QWORD **)(v6 + 16);
      v20 = v65;
      *(_QWORD *)(v6 + 16) = 0x8000000000000000;
      v22 = sub_214336D1C(v17, v16);
      v23 = v20[2];
      v24 = (v21 & 1) == 0;
      v25 = v23 + v24;
      if (__OFADD__(v23, v24))
        goto LABEL_42;
      v26 = v21;
      if (v20[3] < v25)
      {
        sub_21429CA4C(v25, v19);
        v27 = sub_214336D1C(v17, v16);
        if ((v26 & 1) != (v28 & 1))
          goto LABEL_49;
        v22 = v27;
        v29 = v65;
        if ((v26 & 1) == 0)
          goto LABEL_28;
LABEL_6:
        *(_QWORD *)(v29[7] + 8 * v22) = v18;
LABEL_7:
        v6 = v62;
        *(_QWORD *)(v62 + 16) = v29;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v15 = 1;
        goto LABEL_8;
      }
      if ((v19 & 1) != 0)
      {
        v29 = v65;
        if ((v21 & 1) != 0)
          goto LABEL_6;
      }
      else
      {
        sub_2142A7EF8();
        v29 = v65;
        if ((v26 & 1) != 0)
          goto LABEL_6;
      }
LABEL_28:
      v29[(v22 >> 6) + 8] |= 1 << v22;
      v47 = (uint64_t *)(v29[6] + 16 * v22);
      *v47 = v17;
      v47[1] = v16;
      *(_QWORD *)(v29[7] + 8 * v22) = v18;
      v48 = v29[2];
      v49 = __OFADD__(v48, 1);
      v50 = v48 + 1;
      if (v49)
        goto LABEL_45;
      v29[2] = v50;
      swift_bridgeObjectRetain();
      goto LABEL_7;
    }
    v30 = 0.5;
    if (v12 > 1)
      v30 = (double)v13 / (double)(uint64_t)(v61 - 1);
    v31 = v30 * v11;
    v32 = floor(v30 * v11);
    swift_bridgeObjectRetain();
    sub_2142D171C(&v65, v32);
    if ((v66 & 1) != 0)
      goto LABEL_48;
    v33 = (uint64_t)v65;
    if ((uint64_t)v65 >= v60)
      v33 = v60;
    v34 = v33 & ~(v33 >> 63);
    if (v34 >= v15)
      break;
    if (v34 + 1 >= v15)
      goto LABEL_43;
    v35 = *(double *)&v64[v34];
    v36 = *(double *)&v64[v34 + 1];
    v37 = swift_isUniquelyReferenced_nonNull_native();
    v65 = *(_QWORD **)(v6 + 16);
    v38 = v65;
    *(_QWORD *)(v6 + 16) = 0x8000000000000000;
    v40 = sub_214336D1C(v17, v16);
    v41 = v38[2];
    v42 = (v39 & 1) == 0;
    v43 = v41 + v42;
    if (__OFADD__(v41, v42))
      goto LABEL_44;
    v44 = v39;
    if (v38[3] >= v43)
    {
      if ((v37 & 1) == 0)
        sub_2142A7EF8();
    }
    else
    {
      sub_21429CA4C(v43, v37);
      v45 = sub_214336D1C(v17, v16);
      if ((v44 & 1) != (v46 & 1))
        goto LABEL_49;
      v40 = v45;
    }
    v51 = (1.0 - (v31 - (double)v34)) * v35 + (v31 - (double)v34) * v36;
    v52 = v65;
    if ((v44 & 1) != 0)
    {
      *(double *)(v65[7] + 8 * v40) = v51;
      v12 = v61;
    }
    else
    {
      v65[(v40 >> 6) + 8] |= 1 << v40;
      v53 = (uint64_t *)(v52[6] + 16 * v40);
      *v53 = v17;
      v53[1] = v16;
      *(double *)(v52[7] + 8 * v40) = v51;
      v54 = v52[2];
      v49 = __OFADD__(v54, 1);
      v55 = v54 + 1;
      v12 = v61;
      if (v49)
        goto LABEL_46;
      v52[2] = v55;
      swift_bridgeObjectRetain();
    }
    v6 = v62;
    *(_QWORD *)(v62 + 16) = v52;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_8:
    v9 = v63;
    ++v13;
    v14 += 2;
    if (v12 == v13)
    {
      a1 = v58;
      swift_bridgeObjectRelease();
      a2 = v59;
      a3 = v57;
      goto LABEL_40;
    }
  }
  __break(1u);
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  v65 = 0;
  v66 = 0xE000000000000000;
  sub_2144254D8();
  sub_214424F20();
  sub_214424F20();
  sub_214424F20();
  sub_214424F20();
  sub_214425628();
  __break(1u);
LABEL_49:
  result = sub_214425820();
  __break(1u);
  return result;
}

uint64_t sub_2141F3060@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char isUniquelyReferenced_nonNull_native;
  double v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  _QWORD *v20;
  char v21;
  unint64_t v22;
  uint64_t v23;
  _BOOL8 v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  char v28;
  _QWORD *v29;
  double v30;
  double v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  double v36;
  char v37;
  _QWORD *v38;
  char v39;
  unint64_t v40;
  uint64_t v41;
  _BOOL8 v42;
  uint64_t v43;
  char v44;
  unint64_t v45;
  char v46;
  uint64_t *v47;
  uint64_t v48;
  BOOL v49;
  uint64_t v50;
  double v51;
  _QWORD *v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t result;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  _QWORD *v65;
  unint64_t v66;

  v6 = swift_allocObject();
  v7 = sub_214368DA4(MEMORY[0x24BEE4AF8]);
  *(_QWORD *)(v6 + 16) = v7;
  v8 = a1[2];
  v9 = a2[2];
  if (v8 == v9)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v65 = (_QWORD *)v7;
    *(_QWORD *)(v6 + 16) = 0x8000000000000000;
    sub_2141F6E18(a1, a2, isUniquelyReferenced_nonNull_native, &v65);
    *(_QWORD *)(v6 + 16) = v65;
    swift_bridgeObjectRelease();
LABEL_40:
    *(_QWORD *)(a3 + 8) = v6;
    *(_QWORD *)(a3 + 16) = 0;
    *(_BYTE *)(a3 + 24) = 1;
    *(_QWORD *)a3 = sub_2141F9D54;
    *(_QWORD *)(a3 + 48) = a1;
    *(_QWORD *)(a3 + 56) = a2;
    *(_BYTE *)(a3 + 64) = 0;
    *(_QWORD *)(a3 + 32) = 0;
    *(_QWORD *)(a3 + 40) = 0;
    *(_OWORD *)(a3 + 72) = xmmword_2144278A0;
    *(_QWORD *)(a3 + 88) = 0;
    *(_QWORD *)(a3 + 96) = 0;
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  v61 = a1[2];
  if (!v8)
    goto LABEL_40;
  if (!v9)
    goto LABEL_47;
  v57 = a3;
  v11 = (double)(v9 - 1);
  v59 = a2;
  v60 = v9 - 2;
  v64 = a2 + 4;
  v12 = a1[2];
  swift_bridgeObjectRetain();
  v13 = 0;
  v58 = a1;
  v14 = a1 + 5;
  v15 = v9;
  v62 = v6;
  v63 = v9;
  while (1)
  {
    v17 = *(v14 - 1);
    v16 = *v14;
    if (v9 == 1)
    {
      v18 = *v64;
      swift_bridgeObjectRetain();
      v19 = swift_isUniquelyReferenced_nonNull_native();
      v65 = *(_QWORD **)(v6 + 16);
      v20 = v65;
      *(_QWORD *)(v6 + 16) = 0x8000000000000000;
      v22 = sub_214336D1C(v17, v16);
      v23 = v20[2];
      v24 = (v21 & 1) == 0;
      v25 = v23 + v24;
      if (__OFADD__(v23, v24))
        goto LABEL_42;
      v26 = v21;
      if (v20[3] < v25)
      {
        sub_21429F3F0(v25, v19);
        v27 = sub_214336D1C(v17, v16);
        if ((v26 & 1) != (v28 & 1))
          goto LABEL_49;
        v22 = v27;
        v29 = v65;
        if ((v26 & 1) == 0)
          goto LABEL_28;
LABEL_6:
        *(_QWORD *)(v29[7] + 8 * v22) = v18;
LABEL_7:
        v6 = v62;
        *(_QWORD *)(v62 + 16) = v29;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v15 = 1;
        goto LABEL_8;
      }
      if ((v19 & 1) != 0)
      {
        v29 = v65;
        if ((v21 & 1) != 0)
          goto LABEL_6;
      }
      else
      {
        sub_2142A9538();
        v29 = v65;
        if ((v26 & 1) != 0)
          goto LABEL_6;
      }
LABEL_28:
      v29[(v22 >> 6) + 8] |= 1 << v22;
      v47 = (uint64_t *)(v29[6] + 16 * v22);
      *v47 = v17;
      v47[1] = v16;
      *(_QWORD *)(v29[7] + 8 * v22) = v18;
      v48 = v29[2];
      v49 = __OFADD__(v48, 1);
      v50 = v48 + 1;
      if (v49)
        goto LABEL_45;
      v29[2] = v50;
      swift_bridgeObjectRetain();
      goto LABEL_7;
    }
    v30 = 0.5;
    if (v12 > 1)
      v30 = (double)v13 / (double)(uint64_t)(v61 - 1);
    v31 = v30 * v11;
    v32 = floor(v30 * v11);
    swift_bridgeObjectRetain();
    sub_2142D171C(&v65, v32);
    if ((v66 & 1) != 0)
      goto LABEL_48;
    v33 = (uint64_t)v65;
    if ((uint64_t)v65 >= v60)
      v33 = v60;
    v34 = v33 & ~(v33 >> 63);
    if (v34 >= v15)
      break;
    if (v34 + 1 >= v15)
      goto LABEL_43;
    v35 = *(double *)&v64[v34];
    v36 = *(double *)&v64[v34 + 1];
    v37 = swift_isUniquelyReferenced_nonNull_native();
    v65 = *(_QWORD **)(v6 + 16);
    v38 = v65;
    *(_QWORD *)(v6 + 16) = 0x8000000000000000;
    v40 = sub_214336D1C(v17, v16);
    v41 = v38[2];
    v42 = (v39 & 1) == 0;
    v43 = v41 + v42;
    if (__OFADD__(v41, v42))
      goto LABEL_44;
    v44 = v39;
    if (v38[3] >= v43)
    {
      if ((v37 & 1) == 0)
        sub_2142A9538();
    }
    else
    {
      sub_21429F3F0(v43, v37);
      v45 = sub_214336D1C(v17, v16);
      if ((v44 & 1) != (v46 & 1))
        goto LABEL_49;
      v40 = v45;
    }
    v51 = (1.0 - (v31 - (double)v34)) * v35 + (v31 - (double)v34) * v36;
    v52 = v65;
    if ((v44 & 1) != 0)
    {
      *(double *)(v65[7] + 8 * v40) = v51;
      v12 = v61;
    }
    else
    {
      v65[(v40 >> 6) + 8] |= 1 << v40;
      v53 = (uint64_t *)(v52[6] + 16 * v40);
      *v53 = v17;
      v53[1] = v16;
      *(double *)(v52[7] + 8 * v40) = v51;
      v54 = v52[2];
      v49 = __OFADD__(v54, 1);
      v55 = v54 + 1;
      v12 = v61;
      if (v49)
        goto LABEL_46;
      v52[2] = v55;
      swift_bridgeObjectRetain();
    }
    v6 = v62;
    *(_QWORD *)(v62 + 16) = v52;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_8:
    v9 = v63;
    ++v13;
    v14 += 2;
    if (v12 == v13)
    {
      a1 = v58;
      swift_bridgeObjectRelease();
      a2 = v59;
      a3 = v57;
      goto LABEL_40;
    }
  }
  __break(1u);
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  v65 = 0;
  v66 = 0xE000000000000000;
  sub_2144254D8();
  sub_214424F20();
  sub_214424F20();
  sub_214424F20();
  sub_214424F20();
  sub_214425628();
  __break(1u);
LABEL_49:
  result = sub_214425820();
  __break(1u);
  return result;
}

uint64_t sub_2141F35D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  char isUniquelyReferenced_nonNull_native;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  char v20;
  double v21;
  uint64_t *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;

  v6 = (_QWORD *)sub_214368DA4(MEMORY[0x24BEE4AF8]);
  v7 = *(_QWORD *)(a1 + 16);
  if (v7)
  {
    v28 = a2;
    swift_bridgeObjectRetain();
    v8 = 0;
    v29 = a1;
    v9 = (uint64_t *)(a1 + 40);
    while (1)
    {
      v11 = *(v9 - 1);
      v10 = *v9;
      swift_bridgeObjectRetain();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v14 = sub_214336D1C(v11, v10);
      v15 = v6[2];
      v16 = (v13 & 1) == 0;
      v17 = v15 + v16;
      if (__OFADD__(v15, v16))
        break;
      v18 = v13;
      if (v6[3] >= v17)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          sub_2142A9538();
      }
      else
      {
        sub_21429F3F0(v17, isUniquelyReferenced_nonNull_native);
        v19 = sub_214336D1C(v11, v10);
        if ((v18 & 1) != (v20 & 1))
          goto LABEL_18;
        v14 = v19;
      }
      v21 = (double)v8 / (double)(v7 - 1);
      if ((v18 & 1) != 0)
      {
        *(double *)(v6[7] + 8 * v14) = v21;
      }
      else
      {
        v6[(v14 >> 6) + 8] |= 1 << v14;
        v22 = (uint64_t *)(v6[6] + 16 * v14);
        *v22 = v11;
        v22[1] = v10;
        *(double *)(v6[7] + 8 * v14) = v21;
        v23 = v6[2];
        v24 = __OFADD__(v23, 1);
        v25 = v23 + 1;
        if (v24)
          goto LABEL_17;
        v6[2] = v25;
        swift_bridgeObjectRetain();
      }
      ++v8;
      v9 += 2;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v7 == v8)
      {
        a1 = v29;
        swift_bridgeObjectRelease();
        a2 = v28;
        goto LABEL_15;
      }
    }
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    result = sub_214425820();
    __break(1u);
  }
  else
  {
LABEL_15:
    v26 = swift_allocObject();
    *(_QWORD *)(v26 + 16) = a2;
    *(_QWORD *)(v26 + 24) = v6;
    *(_QWORD *)a3 = sub_2141F9E0C;
    *(_QWORD *)(a3 + 8) = v26;
    *(_QWORD *)(a3 + 40) = a1;
    *(_QWORD *)(a3 + 48) = a2;
    *(_BYTE *)(a3 + 56) = 1;
    *(_QWORD *)(a3 + 24) = 0;
    *(_QWORD *)(a3 + 32) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_OWORD *)(a3 + 64) = xmmword_2144278A0;
    *(_QWORD *)(a3 + 80) = 0;
    *(_QWORD *)(a3 + 88) = 0;
    swift_retain_n();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_2141F37FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char isUniquelyReferenced_nonNull_native;
  char v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  char v20;
  unint64_t v21;
  char v22;
  uint64_t *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v6 = (_QWORD *)sub_2143688EC(MEMORY[0x24BEE4AF8]);
  v7 = *(_QWORD *)(a1 + 16);
  if (!v7)
  {
LABEL_18:
    v27 = swift_allocObject();
    *(_QWORD *)(v27 + 16) = v6;
    *(_QWORD *)a3 = sub_2141FA020;
    *(_QWORD *)(a3 + 8) = v27;
    *(_QWORD *)(a3 + 48) = a1;
    *(_QWORD *)(a3 + 56) = a2;
    *(_BYTE *)(a3 + 64) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_BYTE *)(a3 + 24) = 1;
    *(_QWORD *)(a3 + 32) = 0;
    *(_QWORD *)(a3 + 40) = 0;
    *(_OWORD *)(a3 + 72) = xmmword_2144278A0;
    *(_QWORD *)(a3 + 88) = 0;
    *(_QWORD *)(a3 + 96) = 0;
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  v8 = *(_QWORD *)(a2 + 16);
  if (!v8)
    goto LABEL_21;
  v29 = a3;
  v31 = a2;
  v32 = a2 + 32;
  swift_bridgeObjectRetain();
  v9 = 0;
  v30 = a1;
  v10 = (uint64_t *)(a1 + 40);
  while (1)
  {
    v12 = *(v10 - 1);
    v11 = *v10;
    v13 = *(_QWORD *)(v32 + 8 * (v9 % v8));
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v16 = sub_214336D1C(v12, v11);
    v17 = v6[2];
    v18 = (v15 & 1) == 0;
    v19 = v17 + v18;
    if (__OFADD__(v17, v18))
      break;
    v20 = v15;
    if (v6[3] >= v19)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        if ((v15 & 1) != 0)
          goto LABEL_4;
      }
      else
      {
        sub_2142A7EF8();
        if ((v20 & 1) != 0)
          goto LABEL_4;
      }
    }
    else
    {
      sub_21429CA4C(v19, isUniquelyReferenced_nonNull_native);
      v21 = sub_214336D1C(v12, v11);
      if ((v20 & 1) != (v22 & 1))
        goto LABEL_22;
      v16 = v21;
      if ((v20 & 1) != 0)
      {
LABEL_4:
        *(_QWORD *)(v6[7] + 8 * v16) = v13;
        goto LABEL_5;
      }
    }
    v6[(v16 >> 6) + 8] |= 1 << v16;
    v23 = (uint64_t *)(v6[6] + 16 * v16);
    *v23 = v12;
    v23[1] = v11;
    *(_QWORD *)(v6[7] + 8 * v16) = v13;
    v24 = v6[2];
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (v25)
      goto LABEL_20;
    v6[2] = v26;
    swift_bridgeObjectRetain();
LABEL_5:
    ++v9;
    v10 += 2;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v7 == v9)
    {
      a1 = v30;
      swift_bridgeObjectRelease();
      a2 = v31;
      a3 = v29;
      goto LABEL_18;
    }
  }
  __break(1u);
LABEL_20:
  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  result = sub_214425820();
  __break(1u);
  return result;
}

uint64_t sub_2141F3A4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  char isUniquelyReferenced_nonNull_native;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  char v20;
  uint64_t *v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _OWORD v35[2];
  uint64_t v36;

  v6 = (_QWORD *)sub_2143689FC(MEMORY[0x24BEE4AF8]);
  v34 = *(_QWORD *)(a1 + 16);
  if (!v34)
  {
LABEL_18:
    v28 = swift_allocObject();
    *(_QWORD *)(v28 + 16) = v6;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_QWORD *)a3 = sub_2141F9E7C;
    *(_QWORD *)(a3 + 8) = v28;
    *(_QWORD *)(a3 + 72) = a1;
    *(_QWORD *)(a3 + 80) = a2;
    *(_BYTE *)(a3 + 88) = 0;
    *(_QWORD *)(a3 + 56) = 0;
    *(_QWORD *)(a3 + 64) = 0;
    *(_QWORD *)(a3 + 48) = 0;
    *(_OWORD *)(a3 + 96) = xmmword_2144278A0;
    *(_QWORD *)(a3 + 112) = 0;
    *(_QWORD *)(a3 + 120) = 0;
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  v7 = *(_QWORD *)(a2 + 16);
  if (!v7)
    goto LABEL_21;
  v30 = a3;
  v32 = a2;
  v33 = a2 + 32;
  swift_bridgeObjectRetain();
  v8 = 0;
  v31 = a1;
  v9 = (uint64_t *)(a1 + 40);
  while (1)
  {
    v11 = *(v9 - 1);
    v10 = *v9;
    sub_2141F9E40(v33 + 40 * (v8 % v7), (uint64_t)v35);
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v14 = sub_214336D1C(v11, v10);
    v15 = v6[2];
    v16 = (v13 & 1) == 0;
    v17 = v15 + v16;
    if (__OFADD__(v15, v16))
      break;
    v18 = v13;
    if (v6[3] >= v17)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        if ((v13 & 1) != 0)
          goto LABEL_4;
      }
      else
      {
        sub_2142A80A4();
        if ((v18 & 1) != 0)
          goto LABEL_4;
      }
    }
    else
    {
      sub_21429CD50(v17, isUniquelyReferenced_nonNull_native);
      v19 = sub_214336D1C(v11, v10);
      if ((v18 & 1) != (v20 & 1))
        goto LABEL_22;
      v14 = v19;
      if ((v18 & 1) != 0)
      {
LABEL_4:
        sub_2141F9E8C((uint64_t)v35, v6[7] + 40 * v14);
        goto LABEL_5;
      }
    }
    v6[(v14 >> 6) + 8] |= 1 << v14;
    v21 = (uint64_t *)(v6[6] + 16 * v14);
    *v21 = v11;
    v21[1] = v10;
    v22 = v6[7] + 40 * v14;
    v23 = v35[0];
    v24 = v35[1];
    *(_QWORD *)(v22 + 32) = v36;
    *(_OWORD *)v22 = v23;
    *(_OWORD *)(v22 + 16) = v24;
    v25 = v6[2];
    v26 = __OFADD__(v25, 1);
    v27 = v25 + 1;
    if (v26)
      goto LABEL_20;
    v6[2] = v27;
    swift_bridgeObjectRetain();
LABEL_5:
    ++v8;
    v9 += 2;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v34 == v8)
    {
      a1 = v31;
      swift_bridgeObjectRelease();
      a2 = v32;
      a3 = v30;
      goto LABEL_18;
    }
  }
  __break(1u);
LABEL_20:
  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  result = sub_214425820();
  __break(1u);
  return result;
}

uint64_t sub_2141F3CC8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char isUniquelyReferenced_nonNull_native;
  char v20;
  unint64_t v21;
  uint64_t v22;
  _BOOL8 v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  char v27;
  uint64_t *v28;
  _QWORD *v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t result;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v6 = (_QWORD *)sub_214368B44(MEMORY[0x24BEE4AF8]);
  v39 = *(_QWORD *)(a1 + 16);
  if (v39)
  {
    v7 = *(_QWORD *)(a2 + 16);
    if (v7)
    {
      v35 = a3;
      v37 = a2;
      v38 = a2 + 32;
      swift_bridgeObjectRetain();
      v8 = 0;
      v36 = a1;
      v9 = (uint64_t *)(a1 + 40);
      while (1)
      {
        v12 = *(v9 - 1);
        v11 = *v9;
        v13 = (uint64_t *)(v38 + 40 * (v8 % v7));
        v15 = *v13;
        v14 = v13[1];
        v16 = v13[2];
        v17 = v13[3];
        v18 = v13[4];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v21 = sub_214336D1C(v12, v11);
        v22 = v6[2];
        v23 = (v20 & 1) == 0;
        v24 = v22 + v23;
        if (__OFADD__(v22, v23))
          break;
        v25 = v20;
        if (v6[3] >= v24)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            sub_2142A8298();
        }
        else
        {
          sub_21429D084(v24, isUniquelyReferenced_nonNull_native);
          v26 = sub_214336D1C(v12, v11);
          if ((v25 & 1) != (v27 & 1))
            goto LABEL_20;
          v21 = v26;
        }
        if ((v25 & 1) != 0)
        {
          v10 = (_QWORD *)(v6[7] + 40 * v21);
          swift_bridgeObjectRelease();
          *v10 = v15;
          v10[1] = v14;
          v10[2] = v16;
          v10[3] = v17;
          v10[4] = v18;
        }
        else
        {
          v6[(v21 >> 6) + 8] |= 1 << v21;
          v28 = (uint64_t *)(v6[6] + 16 * v21);
          *v28 = v12;
          v28[1] = v11;
          v29 = (_QWORD *)(v6[7] + 40 * v21);
          *v29 = v15;
          v29[1] = v14;
          v29[2] = v16;
          v29[3] = v17;
          v29[4] = v18;
          v30 = v6[2];
          v31 = __OFADD__(v30, 1);
          v32 = v30 + 1;
          if (v31)
            goto LABEL_18;
          v6[2] = v32;
          swift_bridgeObjectRetain();
        }
        ++v8;
        v9 += 2;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v39 == v8)
        {
          a1 = v36;
          swift_bridgeObjectRelease();
          a2 = v37;
          a3 = v35;
          goto LABEL_16;
        }
      }
      __break(1u);
LABEL_18:
      __break(1u);
    }
    __break(1u);
LABEL_20:
    result = sub_214425820();
    __break(1u);
  }
  else
  {
LABEL_16:
    v33 = swift_allocObject();
    *(_QWORD *)(v33 + 16) = v6;
    *(_QWORD *)a3 = sub_2141F9EC8;
    *(_QWORD *)(a3 + 8) = v33;
    *(_QWORD *)(a3 + 72) = a1;
    *(_QWORD *)(a3 + 80) = a2;
    *(_BYTE *)(a3 + 88) = 0;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_QWORD *)(a3 + 64) = 0;
    *(_OWORD *)(a3 + 96) = xmmword_2144278A0;
    *(_QWORD *)(a3 + 112) = 0;
    *(_QWORD *)(a3 + 120) = 0;
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_2141F3F60@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char isUniquelyReferenced_nonNull_native;
  char v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  char v20;
  unint64_t v21;
  char v22;
  uint64_t *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v6 = (_QWORD *)sub_214368C8C(MEMORY[0x24BEE4AF8]);
  v33 = *(_QWORD *)(a1 + 16);
  if (!v33)
  {
LABEL_18:
    v27 = swift_allocObject();
    *(_QWORD *)(v27 + 16) = v6;
    *(_QWORD *)a3 = sub_2141F9DD8;
    *(_QWORD *)(a3 + 8) = v27;
    *(_QWORD *)(a3 + 40) = a1;
    *(_QWORD *)(a3 + 48) = a2;
    *(_BYTE *)(a3 + 56) = 0;
    *(_QWORD *)(a3 + 24) = 0;
    *(_QWORD *)(a3 + 32) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_OWORD *)(a3 + 64) = xmmword_2144278A0;
    *(_QWORD *)(a3 + 80) = 0;
    *(_QWORD *)(a3 + 88) = 0;
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  v7 = *(_QWORD *)(a2 + 16);
  if (!v7)
    goto LABEL_21;
  v29 = a3;
  v31 = a2;
  v32 = a2 + 32;
  swift_bridgeObjectRetain();
  v8 = 0;
  v30 = a1;
  v9 = (uint64_t *)(a1 + 40);
  while (1)
  {
    v12 = *(v9 - 1);
    v11 = *v9;
    v13 = *(_QWORD *)(v32 + 8 * (v8 % v7));
    swift_bridgeObjectRetain();
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v16 = sub_214336D1C(v12, v11);
    v17 = v6[2];
    v18 = (v15 & 1) == 0;
    v19 = v17 + v18;
    if (__OFADD__(v17, v18))
      break;
    v20 = v15;
    if (v6[3] >= v19)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        if ((v15 & 1) != 0)
          goto LABEL_4;
      }
      else
      {
        sub_2142A8470();
        if ((v20 & 1) != 0)
          goto LABEL_4;
      }
    }
    else
    {
      sub_21429D3B8(v19, isUniquelyReferenced_nonNull_native);
      v21 = sub_214336D1C(v12, v11);
      if ((v20 & 1) != (v22 & 1))
        goto LABEL_22;
      v16 = v21;
      if ((v20 & 1) != 0)
      {
LABEL_4:
        v10 = v6[7];
        swift_release();
        *(_QWORD *)(v10 + 8 * v16) = v13;
        goto LABEL_5;
      }
    }
    v6[(v16 >> 6) + 8] |= 1 << v16;
    v23 = (uint64_t *)(v6[6] + 16 * v16);
    *v23 = v12;
    v23[1] = v11;
    *(_QWORD *)(v6[7] + 8 * v16) = v13;
    v24 = v6[2];
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (v25)
      goto LABEL_20;
    v6[2] = v26;
    swift_bridgeObjectRetain();
LABEL_5:
    ++v8;
    v9 += 2;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v33 == v8)
    {
      a1 = v30;
      swift_bridgeObjectRelease();
      a2 = v31;
      a3 = v29;
      goto LABEL_18;
    }
  }
  __break(1u);
LABEL_20:
  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  result = sub_214425820();
  __break(1u);
  return result;
}

double sub_2141F41BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  char v7;
  double v8;

  if (!*(_QWORD *)(a3 + 16))
    return NAN;
  swift_bridgeObjectRetain();
  v6 = sub_214336D1C(a1, a2);
  if ((v7 & 1) != 0)
    v8 = *(double *)(*(_QWORD *)(a3 + 56) + 8 * v6);
  else
    v8 = NAN;
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t sub_2141F423C(uint64_t a1, void (*a2)(unint64_t *, double), double a3, double a4, double a5, double a6)
{
  double v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t result;
  unint64_t v12;
  unint64_t v13;

  v7 = a3 - a4;
  if (a4 > a5)
    v7 = -v7;
  a2(&v12, floor(v7 / a6));
  if ((v13 & 1) == 0)
  {
    v8 = v12;
    if ((v12 & 0x8000000000000000) != 0)
      return 0;
    v9 = *(_QWORD *)(a1 + 16);
    if (v9 < v12)
      return 0;
    if ((uint64_t)(v9 - 1) < (uint64_t)v12)
      v8 = v9 - 1;
    if (v8 < v9)
    {
      v10 = *(_QWORD *)(a1 + 16 * v8 + 32);
      swift_bridgeObjectRetain();
      return v10;
    }
    __break(1u);
  }
  v12 = 0;
  v13 = 0xE000000000000000;
  sub_2144254D8();
  sub_214424F20();
  sub_214424F20();
  sub_214424F20();
  sub_214424F20();
  result = sub_214425628();
  __break(1u);
  return result;
}

double sub_2141F43A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  char v8;
  double v9;

  swift_beginAccess();
  v6 = *(_QWORD *)(a3 + 16);
  if (*(_QWORD *)(v6 + 16))
  {
    swift_bridgeObjectRetain();
    v7 = sub_214336D1C(a1, a2);
    if ((v8 & 1) != 0)
      v9 = *(double *)(*(_QWORD *)(v6 + 56) + 8 * v7);
    else
      v9 = NAN;
    swift_bridgeObjectRelease();
  }
  else
  {
    v9 = NAN;
  }
  swift_endAccess();
  return v9;
}

uint64_t sub_2141F444C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v6;
  uint64_t result;
  uint64_t v8;

  if (*(_QWORD *)(a4 + 16))
  {
    swift_bridgeObjectRetain();
    sub_214336D1C(a1, a2);
    if ((v6 & 1) != 0)
    {
      swift_bridgeObjectRelease();
      off_254D69698(&v8);
      return v8;
    }
  }
  else
  {
    __break(1u);
  }
  result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

uint64_t sub_2141F44F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v8;
  char v9;
  uint64_t result;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  if (!*(_QWORD *)(a3 + 16))
  {
    v14 = 0;
    v12 = 0u;
    v13 = 0u;
    __break(1u);
    goto LABEL_6;
  }
  swift_bridgeObjectRetain();
  v8 = sub_214336D1C(a1, a2);
  if ((v9 & 1) == 0)
  {
LABEL_6:
    v14 = 0;
    v12 = 0u;
    v13 = 0u;
    result = swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  sub_2141F9E40(*(_QWORD *)(a3 + 56) + 40 * v8, (uint64_t)&v12);
  result = swift_bridgeObjectRelease();
  if (*((_QWORD *)&v13 + 1))
  {
    v11 = v13;
    *(_OWORD *)a4 = v12;
    *(_OWORD *)(a4 + 16) = v11;
    *(_QWORD *)(a4 + 32) = v14;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_2141F45A8(void (*a1)(uint64_t *, _QWORD *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];
  uint64_t v11;

  sub_2143F8874();
  swift_beginAccess();
  if (*(_QWORD *)(a3 + 40)
    && (v11 = *(_QWORD *)(a3 + 40),
        swift_bridgeObjectRetain(),
        sub_2143F8874(),
        swift_beginAccess(),
        (v7 = *(_QWORD *)(a4 + 40)) != 0))
  {
    v8 = *(_QWORD *)(a4 + 48);
    v10[0] = v7;
    v10[1] = v8;
    swift_retain();
    a1(&v11, v10);
    sub_2141D972C(v7);
    return swift_bridgeObjectRelease();
  }
  else
  {
    result = sub_214425628();
    __break(1u);
  }
  return result;
}

uint64_t sub_2141F46C8(void (*a1)(uint64_t *, _QWORD *), uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t))
{
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  _QWORD v12[2];
  uint64_t v13;

  sub_2143F8874();
  swift_beginAccess();
  if (*(_QWORD *)(a3 + 40)
    && (v13 = *(_QWORD *)(a3 + 40),
        swift_bridgeObjectRetain(),
        sub_2143F8874(),
        swift_beginAccess(),
        (v9 = *(_QWORD *)(a4 + 40)) != 0))
  {
    v10 = *(_QWORD *)(a4 + 48);
    v12[0] = v9;
    v12[1] = v10;
    swift_retain();
    a1(&v13, v12);
    a5(v9, v10);
    return swift_bridgeObjectRelease();
  }
  else
  {
    result = sub_214425628();
    __break(1u);
  }
  return result;
}

uint64_t sub_2141F47EC(void (*a1)(uint64_t *, uint64_t *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  sub_2143F8874();
  swift_beginAccess();
  if (*(_QWORD *)(a3 + 40)
    && (v10 = *(_QWORD *)(a3 + 40),
        swift_bridgeObjectRetain(),
        sub_2143F8874(),
        swift_beginAccess(),
        (v7 = *(_QWORD *)(a4 + 40)) != 0))
  {
    v9 = v7;
    swift_bridgeObjectRetain();
    a1(&v10, &v9);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    result = sub_214425628();
    __break(1u);
  }
  return result;
}

uint64_t sub_2141F48FC(void (*a1)(uint64_t *, uint64_t *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  sub_2143F8874();
  swift_beginAccess();
  if (*(_QWORD *)(a3 + 40)
    && (v10 = *(_QWORD *)(a3 + 40),
        swift_bridgeObjectRetain(),
        sub_2143F8874(),
        swift_beginAccess(),
        (v7 = *(_QWORD *)(a4 + 40)) != 0))
  {
    v9 = v7;
    swift_retain();
    a1(&v10, &v9);
    swift_bridgeObjectRelease();
    return swift_release();
  }
  else
  {
    result = sub_214425628();
    __break(1u);
  }
  return result;
}

uint64_t sub_2141F4A0C(void (*a1)(uint64_t *__return_ptr, uint64_t *, uint64_t *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  sub_2143F8874();
  swift_beginAccess();
  if (*(_QWORD *)(a3 + 40)
    && (v10 = *(_QWORD *)(a3 + 40),
        swift_bridgeObjectRetain(),
        sub_2143F8874(),
        swift_beginAccess(),
        (v7 = *(_QWORD *)(a4 + 40)) != 0))
  {
    v9 = v7;
    swift_bridgeObjectRetain();
    a1(&v11, &v10, &v9);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v11;
  }
  else
  {
    result = sub_214425628();
    __break(1u);
  }
  return result;
}

uint64_t sub_2141F4B1C(void (*a1)(uint64_t *__return_ptr, uint64_t *, uint64_t *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  sub_2143F8874();
  swift_beginAccess();
  v7 = *(_QWORD *)(a3 + 40);
  if ((~v7 & 0xF000000000000007) != 0
    && (v11 = *(_QWORD *)(a3 + 40),
        swift_retain(),
        sub_2143F8874(),
        swift_beginAccess(),
        (v8 = *(_QWORD *)(a4 + 40)) != 0))
  {
    v10 = v8;
    swift_bridgeObjectRetain();
    a1(&v12, &v11, &v10);
    swift_bridgeObjectRelease();
    sub_2141F9AA8(v7);
    return v12;
  }
  else
  {
    result = sub_214425628();
    __break(1u);
  }
  return result;
}

uint64_t sub_2141F4C34(void (*a1)(uint64_t *__return_ptr, _BYTE *, uint64_t *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  _BYTE v17[24];
  uint64_t v18;
  uint64_t v19;

  v7 = sub_2141D8BF8(&qword_253F147A8);
  MEMORY[0x24BDAC7A8](v7);
  v9 = &v17[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = type metadata accessor for AxisMarkValues.Storage(0);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = &v17[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_2143F8874();
  v14 = a3 + *(_QWORD *)(*(_QWORD *)a3 + 248);
  swift_beginAccess();
  sub_2141E070C(v14, (uint64_t)v9, &qword_253F147A8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    sub_2141E0750((uint64_t)v9, &qword_253F147A8);
  }
  else
  {
    sub_2141E078C((uint64_t)v9, (uint64_t)v13);
    sub_2143F8874();
    swift_beginAccess();
    v15 = *(_QWORD *)(a4 + 40);
    if (v15)
    {
      v18 = v15;
      swift_bridgeObjectRetain();
      a1(&v19, v13, &v18);
      swift_bridgeObjectRelease();
      sub_2141F98F8((uint64_t)v13);
      return v19;
    }
  }
  result = sub_214425628();
  __break(1u);
  return result;
}

uint64_t sub_2141F4E10(void (*a1)(uint64_t *__return_ptr, _OWORD *, _BYTE *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t *__return_ptr, _OWORD *, _BYTE *);
  _BYTE v25[8];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  _OWORD v39[2];
  uint64_t v40;

  sub_2143F8874();
  swift_beginAccess();
  if ((*(_BYTE *)(a3 + 72) & 1) != 0
    || (v24 = a1,
        v7 = *(_OWORD *)(a3 + 56),
        v39[0] = *(_OWORD *)(a3 + 40),
        v39[1] = v7,
        sub_2143F8874(),
        swift_beginAccess(),
        v8 = *(_QWORD *)(a4 + 88),
        v8 >> 1 == 0xFFFFFFFF))
  {
    result = sub_214425628();
    __break(1u);
  }
  else
  {
    v9 = *(_BYTE *)(a4 + 144);
    v10 = *(_QWORD *)(a4 + 136);
    v19 = *(_QWORD *)(a4 + 128);
    v20 = *(_QWORD *)(a4 + 120);
    v12 = *(_QWORD *)(a4 + 96);
    v11 = *(_QWORD *)(a4 + 104);
    v14 = *(_QWORD *)(a4 + 72);
    v13 = *(_QWORD *)(a4 + 80);
    v23 = *(_QWORD *)(a4 + 64);
    v21 = *(_QWORD *)(a4 + 112);
    v22 = *(_QWORD *)(a4 + 56);
    v17 = a4 + 40;
    v16 = *(_QWORD *)(a4 + 40);
    v15 = *(_QWORD *)(v17 + 8);
    v25[0] = v16;
    v26 = v15;
    v27 = v22;
    v28 = v23;
    v29 = v14;
    v30 = v13;
    v31 = v8;
    v32 = v12;
    v33 = v11;
    v34 = v21;
    v35 = v20;
    v36 = v19;
    v37 = v10;
    v38 = v9;
    sub_2141ED014(v14, v13, v8);
    v24(&v40, v39, v25);
    return sub_2141F9AC0(v16, v15, v22, v23, v14, v13, v8);
  }
  return result;
}

uint64_t sub_2141F4FC4(void (*a1)(uint64_t *__return_ptr, uint64_t *, char *, char *, _QWORD *, uint64_t *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  _QWORD v20[2];
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;

  sub_2143F8874();
  swift_beginAccess();
  if (!*(_QWORD *)(a3 + 40))
    goto LABEL_7;
  v23 = *(_QWORD *)(a3 + 40);
  swift_bridgeObjectRetain();
  sub_2143F8874();
  swift_beginAccess();
  v13 = *(unsigned __int8 *)(a4 + 40);
  if (v13 == 2)
    goto LABEL_7;
  v22 = v13 & 1;
  sub_2143F8874();
  swift_beginAccess();
  v14 = *(unsigned __int8 *)(a5 + 40);
  if (v14 == 2)
    goto LABEL_7;
  v21 = v14 & 1;
  sub_2143F8874();
  swift_beginAccess();
  v15 = *(_QWORD *)(a6 + 40);
  if (v15 == 1
    || (v16 = *(_QWORD *)(a6 + 48),
        v20[0] = v15,
        v20[1] = v16,
        sub_2141D975C(v15),
        sub_2143F8874(),
        swift_beginAccess(),
        v17 = *(_QWORD *)(a7 + 40),
        v17 == 2))
  {
LABEL_7:
    result = sub_214425628();
    __break(1u);
  }
  else
  {
    v19 = v17;
    sub_2141F9A40(v17);
    a1(&v24, &v23, &v22, &v21, v20, &v19);
    sub_2141F9A50(v17);
    sub_2141F9A60(v15);
    swift_bridgeObjectRelease();
    return v24;
  }
  return result;
}

uint64_t sub_2141F51A8(void (*a1)(_OWORD *, uint64_t *, _BYTE *, uint64_t *, __int128 *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  __int128 v13;
  char v14;
  uint64_t result;
  __int128 v16;
  char v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  _BYTE v21[40];
  uint64_t v22;
  _OWORD v23[2];

  sub_2143F8874();
  swift_beginAccess();
  if ((*(_BYTE *)(a3 + 72) & 1) == 0)
  {
    v13 = *(_OWORD *)(a3 + 56);
    v23[0] = *(_OWORD *)(a3 + 40);
    v23[1] = v13;
    sub_2143F8874();
    swift_beginAccess();
    if (*(_QWORD *)(a4 + 40))
    {
      v22 = *(_QWORD *)(a4 + 40);
      swift_retain();
      sub_2143F8874();
      swift_beginAccess();
      sub_2141E070C(a5 + 40, (uint64_t)&v19, &qword_254D69518);
      if (v20)
      {
        sub_2141D8DC0(&v19, (uint64_t)v21);
        sub_2143F8874();
        swift_beginAccess();
        if ((*(_BYTE *)(a6 + 48) & 1) == 0)
        {
          v18 = *(_QWORD *)(a6 + 40);
          sub_2143F8874();
          swift_beginAccess();
          if ((*(_BYTE *)(a7 + 57) & 1) == 0)
          {
            v14 = *(_BYTE *)(a7 + 56);
            v16 = *(_OWORD *)(a7 + 40);
            v17 = v14 & 1;
            a1(v23, &v22, v21, &v18, &v16);
            _s6Charts15AnyChartContentVwxx_0((uint64_t)v21);
            return swift_release();
          }
        }
      }
      else
      {
        sub_2141E0750((uint64_t)&v19, &qword_254D69518);
      }
    }
  }
  result = sub_214425628();
  __break(1u);
  return result;
}

uint64_t sub_2141F53A0(void (*a1)(_QWORD *, _QWORD *, _QWORD *, _QWORD *, _QWORD *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  void (*v24)(_QWORD *, _QWORD *, _QWORD *, _QWORD *, _QWORD *);
  _QWORD v25[2];
  _QWORD v26[2];
  _QWORD v27[2];
  _QWORD v28[2];
  _QWORD v29[3];

  sub_2143F8874();
  swift_beginAccess();
  v13 = *(_QWORD *)(a3 + 40);
  if (v13 == 1)
    goto LABEL_7;
  v14 = *(_QWORD *)(a3 + 48);
  v29[0] = *(_QWORD *)(a3 + 40);
  v29[1] = v14;
  sub_2141D975C(v13);
  sub_2143F8874();
  swift_beginAccess();
  v15 = *(_QWORD *)(a4 + 40);
  if (v15 == 1)
    goto LABEL_7;
  v24 = a1;
  v16 = *(_QWORD *)(a4 + 48);
  v28[0] = *(_QWORD *)(a4 + 40);
  v28[1] = v16;
  sub_2141D975C(v15);
  sub_2143F8874();
  swift_beginAccess();
  v17 = *(_QWORD *)(a5 + 40);
  if (v17 == 1)
    goto LABEL_7;
  v18 = *(_QWORD *)(a5 + 48);
  v27[0] = v17;
  v27[1] = v18;
  sub_2141D975C(v17);
  sub_2143F8874();
  swift_beginAccess();
  v19 = *(_QWORD *)(a6 + 40);
  if (v19 == 1
    || (v20 = *(_QWORD *)(a6 + 48),
        v26[0] = v19,
        v26[1] = v20,
        sub_2141D975C(v19),
        sub_2143F8874(),
        swift_beginAccess(),
        v21 = *(_QWORD *)(a7 + 40),
        v21 == 1))
  {
LABEL_7:
    result = sub_214425628();
    __break(1u);
  }
  else
  {
    v22 = *(_QWORD *)(a7 + 48);
    v25[0] = v21;
    v25[1] = v22;
    sub_2141D975C(v21);
    v24(v29, v28, v27, v26, v25);
    sub_2141F9A60(v21);
    sub_2141F9A60(v19);
    sub_2141F9A60(v17);
    sub_2141F9A60(v15);
    return sub_2141F9A60(v13);
  }
  return result;
}

uint64_t sub_2141F55DC(void (*a1)(uint64_t *__return_ptr, _OWORD *, __int128 *, uint64_t *, uint64_t *, uint64_t *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  _OWORD v22[2];
  uint64_t v23;

  sub_2143F8874();
  swift_beginAccess();
  if ((*(_BYTE *)(a3 + 72) & 1) != 0)
    goto LABEL_7;
  v13 = *(_OWORD *)(a3 + 56);
  v22[0] = *(_OWORD *)(a3 + 40);
  v22[1] = v13;
  sub_2143F8874();
  swift_beginAccess();
  if ((*(_BYTE *)(a4 + 56) & 1) != 0)
    goto LABEL_7;
  v21 = *(_OWORD *)(a4 + 40);
  sub_2143F8874();
  swift_beginAccess();
  v14 = *(_QWORD *)(a5 + 40);
  if ((~v14 & 0xF000000000000007) == 0)
    goto LABEL_7;
  v20 = v14;
  swift_retain();
  sub_2143F8874();
  swift_beginAccess();
  v15 = *(_QWORD *)(a6 + 40);
  if ((~v15 & 0xF000000000000007) == 0)
    goto LABEL_7;
  v19 = v15;
  swift_retain();
  sub_2143F8874();
  swift_beginAccess();
  v16 = *(_QWORD *)(a7 + 40);
  if ((~v16 & 0xF000000000000007) != 0)
  {
    v18 = v16;
    swift_retain();
    a1(&v23, v22, &v21, &v20, &v19, &v18);
    sub_2141F9AA8(v16);
    sub_2141F9AA8(v15);
    return sub_2141F9AA8(v14);
  }
  else
  {
LABEL_7:
    result = sub_214425628();
    __break(1u);
  }
  return result;
}

uint64_t sub_2141F57C0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  _QWORD *v13;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  char v19[24];

  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = a1;
  *(_QWORD *)(v1 + 40) = 1;
  *(_WORD *)(v1 + 16) = 256;
  *(_QWORD *)(v1 + 48) = 0;
  *(_QWORD *)(v1 + 56) = 0;
  v4 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v1 + 24) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v1 + 32) = v4;
  swift_bridgeObjectRetain();
  if ((v4 & 0xC000000000000000) == 0 || (v9 = MEMORY[0x24BEE4AF8], (result = sub_2144256AC()) == 0))
  {
LABEL_2:
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = sub_2141F9A24;
    *(_QWORD *)(v5 + 24) = v3;
    v6 = *(_QWORD *)(v1 + 48);
    *(_QWORD *)(v1 + 48) = sub_2141E7E10;
    *(_QWORD *)(v1 + 56) = v5;
    sub_2141D972C(v6);
    swift_beginAccess();
    v7 = *(_QWORD *)(v1 + 40);
    *(_QWORD *)(v1 + 40) = a1;
    swift_retain();
    sub_2141F9A30(v7);
    *(_BYTE *)(v1 + 16) = 1;
    swift_release();
    return v1;
  }
  v10 = result;
  if (result >= 1)
  {
    v11 = (uint64_t *)(v9 + 32);
    do
    {
      v12 = *v11;
      swift_weakInit();
      v13 = *(_QWORD **)(v12 + 32);
      swift_retain();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)(v12 + 32) = v13;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v13 = sub_214221F04(0, v13[2] + 1, 1, v13);
        *(_QWORD *)(v12 + 32) = v13;
      }
      v16 = v13[2];
      v15 = v13[3];
      v17 = v16 + 1;
      if (v16 >= v15 >> 1)
      {
        v18 = sub_214221F04((_QWORD *)(v15 > 1), v16 + 1, 1, v13);
        v17 = v16 + 1;
        v13 = v18;
        *(_QWORD *)(v12 + 32) = v18;
      }
      v13[2] = v17;
      sub_2141E801C((uint64_t)v19, (uint64_t)&v13[v16 + 4], &qword_253F13188);
      swift_release();
      ++v11;
      --v10;
    }
    while (v10);
    goto LABEL_2;
  }
  __break(1u);
  return result;
}

uint64_t sub_2141F59B0(char a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  _QWORD *v12;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  char v21[24];

  v3 = swift_allocObject();
  *(_BYTE *)(v3 + 16) = a1;
  *(_BYTE *)(v1 + 40) = 2;
  *(_WORD *)(v1 + 16) = 256;
  *(_QWORD *)(v1 + 48) = 0;
  *(_QWORD *)(v1 + 56) = 0;
  v4 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v1 + 24) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v1 + 32) = v4;
  if ((v4 & 0xC000000000000000) == 0 || (v8 = MEMORY[0x24BEE4AF8], (result = sub_2144256AC()) == 0))
  {
LABEL_2:
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = sub_2141FA044;
    *(_QWORD *)(v5 + 24) = v3;
    v6 = *(_QWORD *)(v1 + 48);
    *(_QWORD *)(v1 + 48) = sub_2141E7E10;
    *(_QWORD *)(v1 + 56) = v5;
    sub_2141D972C(v6);
    swift_beginAccess();
    *(_BYTE *)(v1 + 40) = a1 & 1;
    *(_BYTE *)(v1 + 16) = 1;
    return v1;
  }
  v9 = result;
  if (result >= 1)
  {
    v10 = (uint64_t *)(v8 + 32);
    do
    {
      v11 = *v10;
      swift_weakInit();
      v12 = *(_QWORD **)(v11 + 32);
      swift_retain();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)(v11 + 32) = v12;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v12 = sub_214221F04(0, v12[2] + 1, 1, v12);
        *(_QWORD *)(v11 + 32) = v12;
      }
      v14 = v12[2];
      v15 = v12[3];
      v16 = v14 + 1;
      if (v14 >= v15 >> 1)
      {
        v20 = v14 + 1;
        v17 = v12;
        v18 = v12[2];
        v19 = sub_214221F04((_QWORD *)(v15 > 1), v14 + 1, 1, v17);
        v14 = v18;
        v16 = v20;
        v12 = v19;
        *(_QWORD *)(v11 + 32) = v19;
      }
      v12[2] = v16;
      sub_2141E801C((uint64_t)v21, (uint64_t)&v12[v14 + 4], &qword_253F13188);
      swift_release();
      ++v10;
      --v9;
    }
    while (v9);
    goto LABEL_2;
  }
  __break(1u);
  return result;
}

uint64_t sub_2141F5B90(double a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  _QWORD *v12;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  char v21[24];

  v3 = swift_allocObject();
  *(_QWORD *)(v1 + 40) = 0;
  *(double *)(v3 + 16) = a1;
  *(_BYTE *)(v1 + 48) = 1;
  *(_WORD *)(v1 + 16) = 256;
  *(_QWORD *)(v1 + 56) = 0;
  *(_QWORD *)(v1 + 64) = 0;
  v4 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v1 + 24) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v1 + 32) = v4;
  if ((v4 & 0xC000000000000000) == 0 || (v8 = MEMORY[0x24BEE4AF8], (result = sub_2144256AC()) == 0))
  {
LABEL_2:
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = sub_2141FA060;
    *(_QWORD *)(v5 + 24) = v3;
    v6 = *(_QWORD *)(v1 + 56);
    *(_QWORD *)(v1 + 56) = sub_2141E7E10;
    *(_QWORD *)(v1 + 64) = v5;
    sub_2141D972C(v6);
    swift_beginAccess();
    *(double *)(v1 + 40) = a1;
    *(_BYTE *)(v1 + 48) = 0;
    *(_BYTE *)(v1 + 16) = 1;
    return v1;
  }
  v9 = result;
  if (result >= 1)
  {
    v10 = (uint64_t *)(v8 + 32);
    do
    {
      v11 = *v10;
      swift_weakInit();
      v12 = *(_QWORD **)(v11 + 32);
      swift_retain();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)(v11 + 32) = v12;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v12 = sub_214221F04(0, v12[2] + 1, 1, v12);
        *(_QWORD *)(v11 + 32) = v12;
      }
      v14 = v12[2];
      v15 = v12[3];
      v16 = v14 + 1;
      if (v14 >= v15 >> 1)
      {
        v20 = v14 + 1;
        v17 = v12;
        v18 = v12[2];
        v19 = sub_214221F04((_QWORD *)(v15 > 1), v14 + 1, 1, v17);
        v14 = v18;
        v16 = v20;
        v12 = v19;
        *(_QWORD *)(v11 + 32) = v19;
      }
      v12[2] = v16;
      sub_2141E801C((uint64_t)v21, (uint64_t)&v12[v14 + 4], &qword_253F13188);
      swift_release();
      ++v10;
      --v9;
    }
    while (v9);
    goto LABEL_2;
  }
  __break(1u);
  return result;
}

uint64_t sub_2141F5D78(char *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  void (*v16)(unint64_t, char *, uint64_t);
  void (*v17)(uint64_t, uint64_t, uint64_t, uint64_t);
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  char v39[24];

  v3 = sub_2141D8BF8(&qword_253F13D88);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v34 - v7;
  v9 = sub_214423C54();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v12, a1, v9);
  v13 = (*(unsigned __int8 *)(v10 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v14 = swift_allocObject();
  v15 = v14 + v13;
  v16 = *(void (**)(unint64_t, char *, uint64_t))(v10 + 32);
  v16(v15, v12, v9);
  v17 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
  v17(v1 + *(_QWORD *)(*(_QWORD *)v1 + 248), 1, 1, v9);
  v18 = (_QWORD *)(v1 + *(_QWORD *)(*(_QWORD *)v1 + 256));
  *v18 = 0;
  v18[1] = 0;
  *(_WORD *)(v1 + 16) = 256;
  v19 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v1 + 24) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v1 + 32) = v19;
  if ((v19 & 0xC000000000000000) == 0 || (v25 = MEMORY[0x24BEE4AF8], (result = sub_2144256AC()) == 0))
  {
LABEL_2:
    v20 = swift_allocObject();
    *(_QWORD *)(v20 + 16) = sub_2141FA078;
    *(_QWORD *)(v20 + 24) = v14;
    v21 = (uint64_t *)(v1 + *(_QWORD *)(*(_QWORD *)v1 + 256));
    v22 = *v21;
    *v21 = (uint64_t)sub_2141E8014;
    v21[1] = v20;
    sub_2141D972C(v22);
    v16((unint64_t)v8, a1, v9);
    v17((uint64_t)v8, 0, 1, v9);
    sub_2141E801C((uint64_t)v8, (uint64_t)v6, &qword_253F13D88);
    v23 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 248);
    swift_beginAccess();
    swift_retain();
    sub_2141FA160((uint64_t)v6, v23, &qword_253F13D88);
    swift_endAccess();
    *(_BYTE *)(v1 + 16) = 1;
    swift_release();
    return v1;
  }
  if (result >= 1)
  {
    v26 = (_QWORD *)(v25 + 32);
    do
    {
      v35 = v26;
      v36 = result;
      v27 = *v26;
      swift_weakInit();
      v38 = *(_QWORD **)(v27 + 32);
      swift_retain();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v29 = v38;
      v37 = v27;
      *(_QWORD *)(v27 + 32) = v38;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v29 = sub_214221F04(0, v29[2] + 1, 1, v29);
        *(_QWORD *)(v37 + 32) = v29;
      }
      v31 = v29[2];
      v30 = v29[3];
      v32 = (_QWORD *)(v31 + 1);
      if (v31 >= v30 >> 1)
      {
        v38 = (_QWORD *)(v31 + 1);
        v33 = sub_214221F04((_QWORD *)(v30 > 1), v31 + 1, 1, v29);
        v32 = v38;
        v29 = v33;
        *(_QWORD *)(v37 + 32) = v33;
      }
      v29[2] = v32;
      sub_2141E801C((uint64_t)v39, (uint64_t)&v29[v31 + 4], &qword_253F13188);
      swift_release();
      v26 = v35 + 1;
      result = v36 - 1;
    }
    while (v36 != 1);
    goto LABEL_2;
  }
  __break(1u);
  return result;
}

uint64_t sub_2141F60A8(char *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  void (*v16)(unint64_t, char *, uint64_t);
  void (*v17)(uint64_t, uint64_t, uint64_t, uint64_t);
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  char v39[24];

  v3 = sub_2141D8BF8(&qword_253F13348);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v34 - v7;
  v9 = sub_214423B94();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v12, a1, v9);
  v13 = (*(unsigned __int8 *)(v10 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v14 = swift_allocObject();
  v15 = v14 + v13;
  v16 = *(void (**)(unint64_t, char *, uint64_t))(v10 + 32);
  v16(v15, v12, v9);
  v17 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
  v17(v1 + *(_QWORD *)(*(_QWORD *)v1 + 248), 1, 1, v9);
  v18 = (_QWORD *)(v1 + *(_QWORD *)(*(_QWORD *)v1 + 256));
  *v18 = 0;
  v18[1] = 0;
  *(_WORD *)(v1 + 16) = 256;
  v19 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v1 + 24) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v1 + 32) = v19;
  if ((v19 & 0xC000000000000000) == 0 || (v25 = MEMORY[0x24BEE4AF8], (result = sub_2144256AC()) == 0))
  {
LABEL_2:
    v20 = swift_allocObject();
    *(_QWORD *)(v20 + 16) = sub_2141FA090;
    *(_QWORD *)(v20 + 24) = v14;
    v21 = (uint64_t *)(v1 + *(_QWORD *)(*(_QWORD *)v1 + 256));
    v22 = *v21;
    *v21 = (uint64_t)sub_2141E7E10;
    v21[1] = v20;
    sub_2141D972C(v22);
    v16((unint64_t)v8, a1, v9);
    v17((uint64_t)v8, 0, 1, v9);
    sub_2141E801C((uint64_t)v8, (uint64_t)v6, &qword_253F13348);
    v23 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 248);
    swift_beginAccess();
    swift_retain();
    sub_2141FA160((uint64_t)v6, v23, &qword_253F13348);
    swift_endAccess();
    *(_BYTE *)(v1 + 16) = 1;
    swift_release();
    return v1;
  }
  if (result >= 1)
  {
    v26 = (_QWORD *)(v25 + 32);
    do
    {
      v35 = v26;
      v36 = result;
      v27 = *v26;
      swift_weakInit();
      v38 = *(_QWORD **)(v27 + 32);
      swift_retain();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v29 = v38;
      v37 = v27;
      *(_QWORD *)(v27 + 32) = v38;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v29 = sub_214221F04(0, v29[2] + 1, 1, v29);
        *(_QWORD *)(v37 + 32) = v29;
      }
      v31 = v29[2];
      v30 = v29[3];
      v32 = (_QWORD *)(v31 + 1);
      if (v31 >= v30 >> 1)
      {
        v38 = (_QWORD *)(v31 + 1);
        v33 = sub_214221F04((_QWORD *)(v30 > 1), v31 + 1, 1, v29);
        v32 = v38;
        v29 = v33;
        *(_QWORD *)(v37 + 32) = v33;
      }
      v29[2] = v32;
      sub_2141E801C((uint64_t)v39, (uint64_t)&v29[v31 + 4], &qword_253F13188);
      swift_release();
      v26 = v35 + 1;
      result = v36 - 1;
    }
    while (v36 != 1);
    goto LABEL_2;
  }
  __break(1u);
  return result;
}

uint64_t sub_2141F63D8(char *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  void (*v16)(unint64_t, char *, uint64_t);
  void (*v17)(uint64_t, uint64_t, uint64_t, uint64_t);
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  char v39[24];

  v3 = sub_2141D8BF8(&qword_253F13490);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v34 - v7;
  v9 = sub_2144240D4();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v12, a1, v9);
  v13 = (*(unsigned __int8 *)(v10 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v14 = swift_allocObject();
  v15 = v14 + v13;
  v16 = *(void (**)(unint64_t, char *, uint64_t))(v10 + 32);
  v16(v15, v12, v9);
  v17 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
  v17(v1 + *(_QWORD *)(*(_QWORD *)v1 + 248), 1, 1, v9);
  v18 = (_QWORD *)(v1 + *(_QWORD *)(*(_QWORD *)v1 + 256));
  *v18 = 0;
  v18[1] = 0;
  *(_WORD *)(v1 + 16) = 256;
  v19 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v1 + 24) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v1 + 32) = v19;
  if ((v19 & 0xC000000000000000) == 0 || (v25 = MEMORY[0x24BEE4AF8], (result = sub_2144256AC()) == 0))
  {
LABEL_2:
    v20 = swift_allocObject();
    *(_QWORD *)(v20 + 16) = sub_2141FA10C;
    *(_QWORD *)(v20 + 24) = v14;
    v21 = (uint64_t *)(v1 + *(_QWORD *)(*(_QWORD *)v1 + 256));
    v22 = *v21;
    *v21 = (uint64_t)sub_2141E8014;
    v21[1] = v20;
    sub_2141D972C(v22);
    v16((unint64_t)v8, a1, v9);
    v17((uint64_t)v8, 0, 1, v9);
    sub_2141E801C((uint64_t)v8, (uint64_t)v6, &qword_253F13490);
    v23 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 248);
    swift_beginAccess();
    swift_retain();
    sub_2141FA160((uint64_t)v6, v23, &qword_253F13490);
    swift_endAccess();
    *(_BYTE *)(v1 + 16) = 1;
    swift_release();
    return v1;
  }
  if (result >= 1)
  {
    v26 = (_QWORD *)(v25 + 32);
    do
    {
      v35 = v26;
      v36 = result;
      v27 = *v26;
      swift_weakInit();
      v38 = *(_QWORD **)(v27 + 32);
      swift_retain();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v29 = v38;
      v37 = v27;
      *(_QWORD *)(v27 + 32) = v38;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v29 = sub_214221F04(0, v29[2] + 1, 1, v29);
        *(_QWORD *)(v37 + 32) = v29;
      }
      v31 = v29[2];
      v30 = v29[3];
      v32 = (_QWORD *)(v31 + 1);
      if (v31 >= v30 >> 1)
      {
        v38 = (_QWORD *)(v31 + 1);
        v33 = sub_214221F04((_QWORD *)(v30 > 1), v31 + 1, 1, v29);
        v32 = v38;
        v29 = v33;
        *(_QWORD *)(v37 + 32) = v33;
      }
      v29[2] = v32;
      sub_2141E801C((uint64_t)v39, (uint64_t)&v29[v31 + 4], &qword_253F13188);
      swift_release();
      v26 = v35 + 1;
      result = v36 - 1;
    }
    while (v36 != 1);
    goto LABEL_2;
  }
  __break(1u);
  return result;
}

uint64_t sub_2141F6708(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  _QWORD *v11;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  char v20[24];

  *(_QWORD *)(v1 + 40) = 0;
  *(_WORD *)(v1 + 16) = 256;
  *(_QWORD *)(v1 + 48) = 0;
  *(_QWORD *)(v1 + 56) = 0;
  v3 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v1 + 24) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v1 + 32) = v3;
  swift_retain();
  if ((v3 & 0xC000000000000000) == 0 || (v7 = MEMORY[0x24BEE4AF8], (result = sub_2144256AC()) == 0))
  {
LABEL_2:
    v4 = swift_allocObject();
    *(_QWORD *)(v4 + 16) = sub_2141FA028;
    *(_QWORD *)(v4 + 24) = a1;
    v5 = *(_QWORD *)(v1 + 48);
    *(_QWORD *)(v1 + 48) = sub_2141E7E10;
    *(_QWORD *)(v1 + 56) = v4;
    sub_2141D972C(v5);
    swift_beginAccess();
    *(_QWORD *)(v1 + 40) = a1;
    swift_retain();
    swift_release();
    *(_BYTE *)(v1 + 16) = 1;
    swift_release();
    return v1;
  }
  v8 = result;
  if (result >= 1)
  {
    v9 = (uint64_t *)(v7 + 32);
    do
    {
      v10 = *v9;
      swift_weakInit();
      v11 = *(_QWORD **)(v10 + 32);
      swift_retain();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)(v10 + 32) = v11;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v11 = sub_214221F04(0, v11[2] + 1, 1, v11);
        *(_QWORD *)(v10 + 32) = v11;
      }
      v13 = v11[2];
      v14 = v11[3];
      v15 = v13 + 1;
      if (v13 >= v14 >> 1)
      {
        v19 = v13 + 1;
        v16 = v11;
        v17 = v11[2];
        v18 = sub_214221F04((_QWORD *)(v14 > 1), v13 + 1, 1, v16);
        v13 = v17;
        v15 = v19;
        v11 = v18;
        *(_QWORD *)(v10 + 32) = v18;
      }
      v11[2] = v15;
      sub_2141E801C((uint64_t)v20, (uint64_t)&v11[v13 + 4], &qword_253F13188);
      swift_release();
      ++v9;
      --v8;
    }
    while (v8);
    goto LABEL_2;
  }
  __break(1u);
  return result;
}

uint64_t sub_2141F68DC(double a1, double a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  _QWORD *v14;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  char v23[24];

  v5 = swift_allocObject();
  *(double *)(v5 + 16) = a1;
  *(double *)(v5 + 24) = a2;
  *(_QWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_BYTE *)(v2 + 56) = 1;
  *(_WORD *)(v2 + 16) = 256;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = 0;
  v6 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v2 + 24) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v2 + 32) = v6;
  if ((v6 & 0xC000000000000000) == 0 || (v10 = MEMORY[0x24BEE4AF8], (result = sub_2144256AC()) == 0))
  {
LABEL_2:
    v7 = swift_allocObject();
    *(_QWORD *)(v7 + 16) = sub_2141FA1B4;
    *(_QWORD *)(v7 + 24) = v5;
    v8 = *(_QWORD *)(v2 + 64);
    *(_QWORD *)(v2 + 64) = sub_2141E7E10;
    *(_QWORD *)(v2 + 72) = v7;
    sub_2141D972C(v8);
    swift_beginAccess();
    *(double *)(v2 + 40) = a1;
    *(double *)(v2 + 48) = a2;
    *(_BYTE *)(v2 + 56) = 0;
    *(_BYTE *)(v2 + 16) = 1;
    return v2;
  }
  v11 = result;
  if (result >= 1)
  {
    v12 = (uint64_t *)(v10 + 32);
    do
    {
      v13 = *v12;
      swift_weakInit();
      v14 = *(_QWORD **)(v13 + 32);
      swift_retain();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)(v13 + 32) = v14;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v14 = sub_214221F04(0, v14[2] + 1, 1, v14);
        *(_QWORD *)(v13 + 32) = v14;
      }
      v16 = v14[2];
      v17 = v14[3];
      v18 = v16 + 1;
      if (v16 >= v17 >> 1)
      {
        v22 = v16 + 1;
        v19 = v14;
        v20 = v14[2];
        v21 = sub_214221F04((_QWORD *)(v17 > 1), v16 + 1, 1, v19);
        v16 = v20;
        v18 = v22;
        v14 = v21;
        *(_QWORD *)(v13 + 32) = v21;
      }
      v14[2] = v18;
      sub_2141E801C((uint64_t)v23, (uint64_t)&v14[v16 + 4], &qword_253F13188);
      swift_release();
      ++v12;
      --v11;
    }
    while (v11);
    goto LABEL_2;
  }
  __break(1u);
  return result;
}

uint64_t sub_2141F6AC8(_QWORD *a1, _QWORD *a2, char a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  char v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  char v31;
  unint64_t v32;
  uint64_t v33;
  _BOOL8 v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t *v38;
  unint64_t v39;
  char v40;
  _QWORD *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  _BOOL8 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v5 = a1[2];
  if (!v5 || !a2[2])
    goto LABEL_19;
  v49 = a2[2];
  v9 = a1[4];
  v8 = a1[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11 = a2[4];
  v12 = (_QWORD *)*a4;
  v14 = sub_214336D1C(v9, v8);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
    goto LABEL_34;
  v18 = v13;
  if (v12[3] >= v17)
  {
    if ((a3 & 1) != 0)
    {
      v21 = (_QWORD *)*a4;
      if ((v13 & 1) != 0)
        goto LABEL_11;
    }
    else
    {
      sub_2142A7EF8();
      v21 = (_QWORD *)*a4;
      if ((v18 & 1) != 0)
        goto LABEL_11;
    }
LABEL_14:
    v21[(v14 >> 6) + 8] |= 1 << v14;
    v22 = (uint64_t *)(v21[6] + 16 * v14);
    *v22 = v9;
    v22[1] = v8;
    *(_QWORD *)(v21[7] + 8 * v14) = v11;
    v23 = v21[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (v24)
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    v21[2] = v25;
    if (v5 == 1)
    {
LABEL_18:
      swift_bridgeObjectRelease_n();
LABEL_19:
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    goto LABEL_16;
  }
  sub_21429CA4C(v17, a3 & 1);
  v19 = sub_214336D1C(v9, v8);
  if ((v18 & 1) == (v20 & 1))
  {
    v14 = v19;
    v21 = (_QWORD *)*a4;
    if ((v18 & 1) == 0)
      goto LABEL_14;
LABEL_11:
    swift_bridgeObjectRelease();
    *(_QWORD *)(v21[7] + 8 * v14) = v11;
    if (v5 == 1)
      goto LABEL_18;
LABEL_16:
    if (a1[2] < 2uLL)
    {
LABEL_35:
      __break(1u);
      goto LABEL_36;
    }
    if (v49 == 1)
      goto LABEL_18;
    v28 = a1[6];
    v27 = a1[7];
    swift_bridgeObjectRetain();
    v29 = a2[5];
    v30 = (_QWORD *)*a4;
    v32 = sub_214336D1C(v28, v27);
    v33 = v30[2];
    v34 = (v31 & 1) == 0;
    v35 = v33 + v34;
    if (!__OFADD__(v33, v34))
    {
      v36 = v31;
      v37 = 0;
      v48 = v49 - 2;
      v50 = v5 - 2;
      v38 = a1 + 9;
      do
      {
        if (v30[3] < v35)
        {
          sub_21429CA4C(v35, 1);
          v39 = sub_214336D1C(v28, v27);
          if ((v36 & 1) != (v40 & 1))
            goto LABEL_37;
          v32 = v39;
        }
        v41 = (_QWORD *)*a4;
        if ((v36 & 1) != 0)
        {
          swift_bridgeObjectRelease();
          *(_QWORD *)(v41[7] + 8 * v32) = v29;
        }
        else
        {
          v41[(v32 >> 6) + 8] |= 1 << v32;
          v42 = (uint64_t *)(v41[6] + 16 * v32);
          *v42 = v28;
          v42[1] = v27;
          *(_QWORD *)(v41[7] + 8 * v32) = v29;
          v43 = v41[2];
          v24 = __OFADD__(v43, 1);
          v44 = v43 + 1;
          if (v24)
            goto LABEL_36;
          v41[2] = v44;
        }
        if (v50 == v37)
          goto LABEL_18;
        if ((unint64_t)(v37 + 2) >= a1[2])
          goto LABEL_35;
        if (v48 == v37)
          goto LABEL_18;
        v28 = *(v38 - 1);
        v27 = *v38;
        swift_bridgeObjectRetain();
        v29 = a2[v37 + 6];
        v30 = (_QWORD *)*a4;
        v32 = sub_214336D1C(v28, v27);
        v36 = v45;
        v46 = v30[2];
        v47 = (v45 & 1) == 0;
        ++v37;
        v38 += 2;
        v35 = v46 + v47;
      }
      while (!__OFADD__(v46, v47));
    }
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
LABEL_37:
  result = sub_214425820();
  __break(1u);
  return result;
}

uint64_t sub_2141F6E18(_QWORD *a1, _QWORD *a2, char a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  char v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  char v31;
  unint64_t v32;
  uint64_t v33;
  _BOOL8 v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t *v38;
  unint64_t v39;
  char v40;
  _QWORD *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  _BOOL8 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v5 = a1[2];
  if (!v5 || !a2[2])
    goto LABEL_19;
  v49 = a2[2];
  v9 = a1[4];
  v8 = a1[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11 = a2[4];
  v12 = (_QWORD *)*a4;
  v14 = sub_214336D1C(v9, v8);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
    goto LABEL_34;
  v18 = v13;
  if (v12[3] >= v17)
  {
    if ((a3 & 1) != 0)
    {
      v21 = (_QWORD *)*a4;
      if ((v13 & 1) != 0)
        goto LABEL_11;
    }
    else
    {
      sub_2142A9538();
      v21 = (_QWORD *)*a4;
      if ((v18 & 1) != 0)
        goto LABEL_11;
    }
LABEL_14:
    v21[(v14 >> 6) + 8] |= 1 << v14;
    v22 = (uint64_t *)(v21[6] + 16 * v14);
    *v22 = v9;
    v22[1] = v8;
    *(_QWORD *)(v21[7] + 8 * v14) = v11;
    v23 = v21[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (v24)
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    v21[2] = v25;
    if (v5 == 1)
    {
LABEL_18:
      swift_bridgeObjectRelease_n();
LABEL_19:
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    goto LABEL_16;
  }
  sub_21429F3F0(v17, a3 & 1);
  v19 = sub_214336D1C(v9, v8);
  if ((v18 & 1) == (v20 & 1))
  {
    v14 = v19;
    v21 = (_QWORD *)*a4;
    if ((v18 & 1) == 0)
      goto LABEL_14;
LABEL_11:
    swift_bridgeObjectRelease();
    *(_QWORD *)(v21[7] + 8 * v14) = v11;
    if (v5 == 1)
      goto LABEL_18;
LABEL_16:
    if (a1[2] < 2uLL)
    {
LABEL_35:
      __break(1u);
      goto LABEL_36;
    }
    if (v49 == 1)
      goto LABEL_18;
    v28 = a1[6];
    v27 = a1[7];
    swift_bridgeObjectRetain();
    v29 = a2[5];
    v30 = (_QWORD *)*a4;
    v32 = sub_214336D1C(v28, v27);
    v33 = v30[2];
    v34 = (v31 & 1) == 0;
    v35 = v33 + v34;
    if (!__OFADD__(v33, v34))
    {
      v36 = v31;
      v37 = 0;
      v48 = v49 - 2;
      v50 = v5 - 2;
      v38 = a1 + 9;
      do
      {
        if (v30[3] < v35)
        {
          sub_21429F3F0(v35, 1);
          v39 = sub_214336D1C(v28, v27);
          if ((v36 & 1) != (v40 & 1))
            goto LABEL_37;
          v32 = v39;
        }
        v41 = (_QWORD *)*a4;
        if ((v36 & 1) != 0)
        {
          swift_bridgeObjectRelease();
          *(_QWORD *)(v41[7] + 8 * v32) = v29;
        }
        else
        {
          v41[(v32 >> 6) + 8] |= 1 << v32;
          v42 = (uint64_t *)(v41[6] + 16 * v32);
          *v42 = v28;
          v42[1] = v27;
          *(_QWORD *)(v41[7] + 8 * v32) = v29;
          v43 = v41[2];
          v24 = __OFADD__(v43, 1);
          v44 = v43 + 1;
          if (v24)
            goto LABEL_36;
          v41[2] = v44;
        }
        if (v50 == v37)
          goto LABEL_18;
        if ((unint64_t)(v37 + 2) >= a1[2])
          goto LABEL_35;
        if (v48 == v37)
          goto LABEL_18;
        v28 = *(v38 - 1);
        v27 = *v38;
        swift_bridgeObjectRetain();
        v29 = a2[v37 + 6];
        v30 = (_QWORD *)*a4;
        v32 = sub_214336D1C(v28, v27);
        v36 = v45;
        v46 = v30[2];
        v47 = (v45 & 1) == 0;
        ++v37;
        v38 += 2;
        v35 = v46 + v47;
      }
      while (!__OFADD__(v46, v47));
    }
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
LABEL_37:
  result = sub_214425820();
  __break(1u);
  return result;
}

void sub_2141F7168(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_2141F7174@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  sub_2143F8874();
  swift_beginAccess();
  v4 = *(_QWORD *)(a1 + 40);
  if (v4 == 1)
  {
    result = sub_214425628();
    __break(1u);
  }
  else
  {
    *a2 = v4;
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_2141F7214@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *a1;
  v6 = *a2;
  v5 = a2[1];
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = v6;
  *(_QWORD *)(v7 + 24) = v5;
  swift_retain();
  swift_retain();
  v8 = sub_2141F76BC(v4, (void (*)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))sub_2141F9864);
  swift_release_n();
  sub_2141F37FC(v4, v8, a3);
  return swift_bridgeObjectRelease();
}

uint64_t sub_2141F72BC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t result;

  if (*(_QWORD *)(a2 + 16))
  {
    v6 = *a1;
    v5 = a1[1];
    swift_bridgeObjectRetain();
    v7 = sub_214336D1C(v6, v5);
    if ((v8 & 1) != 0)
    {
      v9 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v7);
      result = swift_bridgeObjectRelease();
      *a3 = v9;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

uint64_t sub_2141F7334@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *a1;
  v6 = *a2;
  v5 = a2[1];
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = v6;
  *(_QWORD *)(v7 + 24) = v5;
  swift_retain();
  swift_retain();
  v8 = sub_2141F77CC(v4, (void (*)(_OWORD *__return_ptr, uint64_t, uint64_t, uint64_t))sub_2141F97E4);
  swift_release_n();
  sub_2141F3A4C(v4, v8, a3);
  return swift_bridgeObjectRelease();
}

uint64_t sub_2141F73DC@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *a1;
  v6 = *a2;
  v5 = a2[1];
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = v6;
  *(_QWORD *)(v7 + 24) = v5;
  swift_retain();
  swift_retain();
  v8 = sub_2141F78E4(v4, (void (*)(_QWORD *__return_ptr, uint64_t, uint64_t, uint64_t))sub_2141F971C);
  swift_release_n();
  sub_2141F3CC8(v4, v8, a3);
  return swift_bridgeObjectRelease();
}

uint64_t sub_2141F7484@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;

  if (*(_QWORD *)(a2 + 16))
  {
    v6 = *a1;
    v5 = a1[1];
    swift_bridgeObjectRetain();
    v7 = sub_214336D1C(v6, v5);
    if ((v8 & 1) != 0)
    {
      v9 = (uint64_t *)(*(_QWORD *)(a2 + 56) + 40 * v7);
      v10 = *v9;
      v11 = v9[2];
      v12 = v9[3];
      v13 = v9[4];
      swift_bridgeObjectRetain();
      v14 = v9[1];
      result = swift_bridgeObjectRelease();
      *a3 = v10;
      a3[1] = v14;
      a3[2] = v11;
      a3[3] = v12;
      a3[4] = v13;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

uint64_t sub_2141F7530@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *a1;
  v6 = *a2;
  v5 = a2[1];
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = v6;
  *(_QWORD *)(v7 + 24) = v5;
  swift_retain();
  swift_retain();
  v8 = sub_2141F7A18(v4, (void (*)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))sub_2141F9664);
  swift_release_n();
  sub_2141F3F60(v4, v8, a3);
  return swift_bridgeObjectRelease();
}

uint64_t sub_2141F75D8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t result;

  if (*(_QWORD *)(a2 + 16))
  {
    v6 = *a1;
    v5 = a1[1];
    swift_bridgeObjectRetain();
    v7 = sub_214336D1C(v6, v5);
    if ((v8 & 1) != 0)
    {
      v9 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v7);
      swift_retain();
      result = swift_bridgeObjectRelease();
      *a3 = v9;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

uint64_t sub_2141F7650@<X0>(uint64_t *a1@<X0>, void (*a2)(uint64_t *)@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  uint64_t v5;

  v5 = *a1;
  a2(&v5);
  sub_214423D44();
  result = sub_214423E10();
  *a3 = result;
  return result;
}

uint64_t sub_2141F76BC(uint64_t a1, void (*a2)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))
{
  int64_t v2;
  uint64_t v3;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = MEMORY[0x24BEE4AF8];
  if (v2)
  {
    v14 = MEMORY[0x24BEE4AF8];
    sub_2141D39D4(0, v2, 0);
    v3 = v14;
    v6 = (uint64_t *)(a1 + 40);
    do
    {
      v7 = *(v6 - 1);
      v8 = *v6;
      swift_bridgeObjectRetain();
      a2(&v13, v7, v8, 2);
      swift_bridgeObjectRelease();
      v9 = v13;
      v14 = v3;
      v11 = *(_QWORD *)(v3 + 16);
      v10 = *(_QWORD *)(v3 + 24);
      if (v11 >= v10 >> 1)
      {
        sub_2141D39D4((char *)(v10 > 1), v11 + 1, 1);
        v3 = v14;
      }
      v6 += 2;
      *(_QWORD *)(v3 + 16) = v11 + 1;
      *(_QWORD *)(v3 + 8 * v11 + 32) = v9;
      --v2;
    }
    while (v2);
  }
  return v3;
}

uint64_t sub_2141F77CC(uint64_t a1, void (*a2)(_OWORD *__return_ptr, uint64_t, uint64_t, uint64_t))
{
  int64_t v2;
  uint64_t v3;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  _OWORD v15[2];
  uint64_t v16;
  uint64_t v17;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = MEMORY[0x24BEE4AF8];
  if (v2)
  {
    v17 = MEMORY[0x24BEE4AF8];
    sub_2141D3928(0, v2, 0);
    v3 = v17;
    v6 = (uint64_t *)(a1 + 40);
    do
    {
      v7 = *(v6 - 1);
      v8 = *v6;
      swift_bridgeObjectRetain();
      a2(v15, v7, v8, 2);
      swift_bridgeObjectRelease();
      v17 = v3;
      v10 = *(_QWORD *)(v3 + 16);
      v9 = *(_QWORD *)(v3 + 24);
      if (v10 >= v9 >> 1)
      {
        sub_2141D3928((char *)(v9 > 1), v10 + 1, 1);
        v3 = v17;
      }
      v6 += 2;
      *(_QWORD *)(v3 + 16) = v10 + 1;
      v11 = v3 + 40 * v10;
      v12 = v15[0];
      v13 = v15[1];
      *(_QWORD *)(v11 + 64) = v16;
      *(_OWORD *)(v11 + 32) = v12;
      *(_OWORD *)(v11 + 48) = v13;
      --v2;
    }
    while (v2);
  }
  return v3;
}

uint64_t sub_2141F78E4(uint64_t a1, void (*a2)(_QWORD *__return_ptr, uint64_t, uint64_t, uint64_t))
{
  int64_t v2;
  uint64_t v3;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD v18[5];
  uint64_t v19;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = MEMORY[0x24BEE4AF8];
  if (v2)
  {
    v19 = MEMORY[0x24BEE4AF8];
    sub_2141D39F8(0, v2, 0);
    v3 = v19;
    v6 = (uint64_t *)(a1 + 40);
    do
    {
      v7 = *(v6 - 1);
      v8 = *v6;
      swift_bridgeObjectRetain();
      a2(v18, v7, v8, 2);
      swift_bridgeObjectRelease();
      v9 = v18[0];
      v10 = v18[1];
      v11 = v18[2];
      v12 = v18[3];
      v13 = v18[4];
      v19 = v3;
      v15 = *(_QWORD *)(v3 + 16);
      v14 = *(_QWORD *)(v3 + 24);
      if (v15 >= v14 >> 1)
      {
        sub_2141D39F8((char *)(v14 > 1), v15 + 1, 1);
        v3 = v19;
      }
      v6 += 2;
      *(_QWORD *)(v3 + 16) = v15 + 1;
      v16 = (_QWORD *)(v3 + 40 * v15);
      v16[4] = v9;
      v16[5] = v10;
      v16[6] = v11;
      v16[7] = v12;
      v16[8] = v13;
      --v2;
    }
    while (v2);
  }
  return v3;
}

uint64_t sub_2141F7A18(uint64_t a1, void (*a2)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))
{
  uint64_t v3;
  uint64_t result;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x24BEE4AF8];
  if (v3)
  {
    v10 = MEMORY[0x24BEE4AF8];
    sub_2144255B0();
    v6 = (uint64_t *)(a1 + 40);
    do
    {
      v7 = *(v6 - 1);
      v8 = *v6;
      swift_bridgeObjectRetain();
      a2(&v9, v7, v8, 2);
      swift_bridgeObjectRelease();
      sub_21442558C();
      sub_2144255BC();
      sub_2144255C8();
      sub_214425598();
      v6 += 2;
      --v3;
    }
    while (v3);
    return v10;
  }
  return result;
}

void sub_2141F7AFC(__n128 *a1)
{
  uint64_t *v2;
  __n128 v3;
  _BYTE v4[48];
  _BYTE v5[32];
  unint64_t v6;
  _BYTE v7[48];
  __n128 v8;

  sub_2141E7D60((uint64_t)&a1[1], (uint64_t)v4);
  sub_2141E7D60((uint64_t)v4, (uint64_t)v5);
  if (((v6 >> 61) & 3) > 1)
  {
    v6 &= 0x9FFFFFFFFFFFFFFFLL;
    v2 = &qword_253F0FF68;
  }
  else
  {
    v6 &= 0x9FFFFFFFFFFFFFFFLL;
    v2 = &qword_253F15558;
  }
  sub_2141E801C((uint64_t)v5, (uint64_t)v7, v2);
  sub_2141F84DC(a1 + 4, &v3);
  sub_2141F84DC(&v3, &v8);
  __asm { BR              X11 }
}

uint64_t sub_2141F7BCC@<X0>(char a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;

  *(_BYTE *)(v7 - 136) = a1 & 0x1F;
  v8 = *(_QWORD *)(v7 - 144);
  v9 = sub_214235788(*(_QWORD *)(v7 - 152));
  v10 = sub_214235788(v8);
  v12 = (v4 & 0x6000000000000000) == 0 && v3 == 1;
  v13 = swift_allocObject();
  *(_BYTE *)(v13 + 16) = v3;
  *(_BYTE *)(v13 + 17) = v12;
  sub_2141D8BF8(&qword_253F15D58);
  v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_2144271F0;
  *(_QWORD *)(v14 + 32) = v2;
  *(_QWORD *)(v14 + 40) = v9;
  *(_QWORD *)(v14 + 48) = v10;
  *(_QWORD *)(v7 - 112) = v14;
  sub_214424FF8();
  v15 = *(_QWORD *)(v7 - 112);
  v16 = (_QWORD *)swift_allocObject();
  v16[2] = sub_2141F8788;
  v16[3] = v13;
  v16[4] = v2;
  v16[5] = v9;
  v16[6] = v10;
  swift_retain_n();
  swift_retain();
  swift_retain();
  v17 = sub_21423EE74(v15, (uint64_t)sub_2141F8798, (uint64_t)v16);
  v18 = swift_allocObject();
  *(_QWORD *)(v18 + 16) = v6;
  *(_BYTE *)(v18 + 24) = v5;
  v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = xmmword_214427890;
  *(_QWORD *)(v19 + 32) = v1;
  *(_QWORD *)(v19 + 40) = v17;
  *(_QWORD *)(v7 - 112) = v19;
  sub_214424FF8();
  v20 = *(_QWORD *)(v7 - 112);
  v21 = (_QWORD *)swift_allocObject();
  v21[2] = sub_2141F8768;
  v21[3] = v18;
  v21[4] = v1;
  v21[5] = v17;
  swift_retain_n();
  swift_retain();
  return sub_21423F14C(v20, (uint64_t)sub_2141FA1C8, (uint64_t)v21);
}

uint64_t sub_2141F81BC@<X0>(char a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_BYTE *)(v1 - 136) = a1 & 0x1F;
  sub_2141F8518((uint64_t *)(v1 - 152), v1 - 128);
  v2 = sub_2141F8518((uint64_t *)(v1 - 128), v1 - 112);
  return ((uint64_t (*)(uint64_t))((char *)sub_2141F81F8 + 4 * byte_2144278D0[*(unsigned __int8 *)(v1 - 104)]))(v2);
}

void sub_2141F81F8()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;

  v3 = *(_QWORD *)(v2 - 112);
  swift_retain();
  v4 = sub_2142357B8(v3);
  v5 = swift_allocObject();
  *(_BYTE *)(v5 + 16) = v1;
  sub_2141D8BF8(&qword_253F15D58);
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_214427890;
  *(_QWORD *)(v6 + 32) = v0;
  *(_QWORD *)(v6 + 40) = v4;
  v8 = v6;
  sub_214424FF8();
  v7 = (_QWORD *)swift_allocObject();
  v7[2] = sub_2141F85D8;
  v7[3] = v5;
  v7[4] = v0;
  v7[5] = v4;
  swift_retain();
  swift_retain();
  sub_21423F43C(v8, (uint64_t)sub_2141FA1CC, (uint64_t)v7);
  JUMPOUT(0x2141F7D5CLL);
}

void sub_2141F82B4()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;

  v3 = *(_QWORD *)(v2 - 112);
  swift_retain();
  v4 = sub_2142357AC(v3);
  v5 = swift_allocObject();
  *(_BYTE *)(v5 + 16) = v1;
  sub_2141D8BF8(&qword_253F15D58);
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_214427890;
  *(_QWORD *)(v6 + 32) = v0;
  *(_QWORD *)(v6 + 40) = v4;
  v8 = v6;
  sub_214424FF8();
  v7 = (_QWORD *)swift_allocObject();
  v7[2] = sub_2141F85B0;
  v7[3] = v5;
  v7[4] = v0;
  v7[5] = v4;
  swift_retain();
  swift_retain();
  sub_21423F170(v8, (uint64_t)sub_2141FA1D0, (uint64_t)v7);
  JUMPOUT(0x2141F7D5CLL);
}

void sub_2141F8370()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(v2 - 112);
  swift_retain();
  v4 = sub_2142357A0(v3);
  v5 = swift_allocObject();
  *(_BYTE *)(v5 + 16) = v1;
  sub_2141F0940(v0, v4, (uint64_t)sub_2141F858C, v5);
  JUMPOUT(0x2141F7D5CLL);
}

void sub_2141F83BC()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v3 = *(_QWORD *)(v2 - 112);
  swift_retain();
  v4 = sub_214235794(v3);
  v5 = swift_allocObject();
  *(_BYTE *)(v5 + 16) = v1;
  sub_2141D8BF8(&qword_253F15D58);
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_214427890;
  *(_QWORD *)(v6 + 32) = v0;
  *(_QWORD *)(v6 + 40) = v4;
  sub_214424FF8();
  v7 = (_QWORD *)swift_allocObject();
  v7[2] = sub_2141F8564;
  v7[3] = v5;
  v7[4] = v0;
  v7[5] = v4;
  swift_retain();
  swift_retain();
  JUMPOUT(0x2141F7D58);
}

void sub_2141F8474(char a1@<W8>)
{
  uint64_t v1;

  *(_BYTE *)(v1 - 136) = a1 & 0x1F;
  sub_2141E801C(v1 - 152, v1 - 112, &qword_254D69510);
  sub_214425628();
  __break(1u);
}

__n128 *sub_2141F84DC(__n128 *a1, __n128 *a2)
{
  initializeWithTake for AnyPrimitivePlottableTransform(a2, a1);
  return a2;
}

uint64_t sub_2141F8518(uint64_t *a1, uint64_t a2)
{
  initializeWithTake for AnyPrimitivePlottableArray(a2, a1);
  return a2;
}

uint64_t sub_2141F8554()
{
  return swift_deallocObject();
}

uint64_t sub_2141F8564@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  return sub_2141F1634(*a1, *a2, a2[1], *(_BYTE *)(v3 + 16), a3);
}

uint64_t sub_2141F857C()
{
  return swift_deallocObject();
}

uint64_t sub_2141F858C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  return sub_2141F1730(*a1, *a2, a2[1], *(_BYTE *)(v3 + 16), a3);
}

uint64_t sub_2141F85A0()
{
  return swift_deallocObject();
}

uint64_t sub_2141F85B0@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  return sub_2141F182C(*a1, *a2, a2[1], *(_BYTE *)(v3 + 16), a3);
}

uint64_t sub_2141F85C8()
{
  return swift_deallocObject();
}

uint64_t sub_2141F85D8@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  return sub_2141F1928(*a1, *a2, a2[1], *(_BYTE *)(v3 + 16), a3);
}

uint64_t sub_2141F85F0(uint64_t a1)
{
  sub_2141F8690(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16), (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7DF0, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7DD4);
  return a1;
}

uint64_t sub_2141F8630()
{
  return swift_deallocObject();
}

uint64_t sub_2141F8640@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  return sub_2141F15D4(a1, a2, *(long double *)(v3 + 16), *(_BYTE *)(v3 + 24), a3);
}

uint64_t sub_2141F8650(uint64_t a1)
{
  sub_2141F8690(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16), (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7F98, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7F7C);
  return a1;
}

uint64_t sub_2141F8690(uint64_t result, uint64_t a2, unsigned __int8 a3, uint64_t (*a4)(uint64_t, uint64_t, _QWORD), uint64_t (*a5)(uint64_t, uint64_t, _QWORD))
{
  switch(a3 >> 5)
  {
    case 1:
    case 2:
    case 3:
    case 4:
    case 6:
      result = a4(result, a2, a3 & 0x1F);
      break;
    case 5:
      result = a5(result, a2, a3 & 0x1F);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_2141F86DC()
{
  return swift_deallocObject();
}

uint64_t sub_2141F86EC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;

  return sub_2141F156C(a1, a2, *(_QWORD *)(v2 + 16), *(_BYTE *)(v2 + 24));
}

uint64_t sub_2141F86FC()
{
  return swift_deallocObject();
}

uint64_t sub_2141F870C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;

  return sub_2141F1300(a1, a2, *(_QWORD *)(v2 + 16), *(_BYTE *)(v2 + 24));
}

uint64_t sub_2141F871C()
{
  return swift_deallocObject();
}

uint64_t sub_2141F872C(_QWORD *a1, _QWORD *a2)
{
  return sub_2141F87AC(a1, a2, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))sub_2141F0818);
}

uint64_t sub_2141F873C()
{
  uint64_t v0;

  return sub_2141F47EC(*(void (**)(uint64_t *, uint64_t *))(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t sub_2141F8758()
{
  return swift_deallocObject();
}

uint64_t sub_2141F8768(_QWORD *a1, _QWORD *a2)
{
  return sub_2141F87AC(a1, a2, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))sub_2141F06F0);
}

uint64_t sub_2141F8778()
{
  return swift_deallocObject();
}

uint64_t sub_2141F8788@<X0>(double *a1@<X0>, double *a2@<X1>, double *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;

  return sub_2141F0654(a1, a2, a3, *(_BYTE *)(v4 + 16), *(_BYTE *)(v4 + 17), a4);
}

uint64_t sub_2141F879C()
{
  return swift_deallocObject();
}

uint64_t sub_2141F87AC(_QWORD *a1, _QWORD *a2, uint64_t (*a3)(_QWORD, _QWORD, _QWORD, _QWORD))
{
  uint64_t v3;

  return a3(*a1, *a2, *(_QWORD *)(v3 + 16), *(unsigned __int8 *)(v3 + 24));
}

void sub_2141F87C8(__n128 *a1)
{
  __n128 v1;
  __n128 v2;

  sub_2141F84DC(a1 + 4, &v1);
  sub_2141F84DC(&v1, &v2);
  __asm { BR              X11 }
}

uint64_t sub_2141F8838()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v5 = sub_214235788(v16);
  v15 = v3;
  v6 = sub_214235788(v17);
  v7 = swift_allocObject();
  *(_BYTE *)(v7 + 16) = v1;
  *(_BYTE *)(v7 + 17) = 0;
  sub_2141D8BF8(&qword_253F15D58);
  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_2144271F0;
  *(_QWORD *)(v8 + 32) = v2;
  *(_QWORD *)(v8 + 40) = v5;
  *(_QWORD *)(v8 + 48) = v6;
  v18 = v8;
  sub_214424FF8();
  v9 = (_QWORD *)swift_allocObject();
  v9[2] = sub_2141FA1C0;
  v9[3] = v7;
  v9[4] = v2;
  v9[5] = v5;
  v9[6] = v6;
  swift_retain_n();
  swift_retain();
  swift_retain();
  v10 = sub_21423EE74(v18, (uint64_t)sub_2141F8798, (uint64_t)v9);
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = v4;
  *(_BYTE *)(v11 + 24) = v15;
  *(_BYTE *)(v11 + 25) = v1;
  v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_214427890;
  *(_QWORD *)(v12 + 32) = v0;
  *(_QWORD *)(v12 + 40) = v10;
  v19 = v12;
  sub_214424FF8();
  v13 = (_QWORD *)swift_allocObject();
  v13[2] = sub_2141FA280;
  v13[3] = v11;
  v13[4] = v0;
  v13[5] = v10;
  swift_retain_n();
  swift_retain();
  return sub_21423F7C0(v19, (uint64_t)sub_2141FA1C8, (uint64_t)v13);
}

void sub_2141F903C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  swift_retain();
  v20 = sub_2142357AC(a19);
  sub_2141D8BF8(&qword_253F15D58);
  v21 = swift_allocObject();
  *(_OWORD *)(v21 + 16) = xmmword_214427890;
  *(_QWORD *)(v21 + 32) = v19;
  *(_QWORD *)(v21 + 40) = v20;
  v23 = v21;
  sub_214424FF8();
  v22 = (_QWORD *)swift_allocObject();
  v22[2] = sub_2141F73DC;
  v22[3] = 0;
  v22[4] = v19;
  v22[5] = v20;
  swift_retain();
  swift_retain();
  sub_21423F7E4(v23, (uint64_t)sub_2141F9B10, (uint64_t)v22);
  JUMPOUT(0x2141F9014);
}

uint64_t sub_2141F90DC(uint64_t result)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t *i;
  uint64_t v9;
  uint64_t v10;
  char v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = *(_QWORD *)(result + 16);
  if (!v1)
    return MEMORY[0x24BEE4AF8];
  v2 = 0;
  v3 = result + 40;
  v4 = -(uint64_t)v1;
  v5 = MEMORY[0x24BEE4AF8];
  v15 = result + 40;
  v16 = *(_QWORD *)(result + 16);
  do
  {
    if (v2 <= v1)
      v6 = v1;
    else
      v6 = v2;
    v7 = -(uint64_t)v6;
    for (i = (uint64_t *)(v3 + 16 * v2++); ; i += 2)
    {
      if (v7 + v2 == 1)
      {
        __break(1u);
        return result;
      }
      v10 = *(i - 1);
      v9 = *i;
      swift_bridgeObjectRetain_n();
      v11 = sub_21420FCB4(&v17, v10, v9);
      swift_bridgeObjectRelease();
      if ((v11 & 1) != 0)
        break;
      result = swift_bridgeObjectRelease();
      ++v2;
      if (v4 + v2 == 1)
        return v5;
    }
    result = swift_isUniquelyReferenced_nonNull_native();
    v18 = v5;
    if ((result & 1) == 0)
    {
      result = (uint64_t)sub_2141D3A84(0, *(_QWORD *)(v5 + 16) + 1, 1);
      v5 = v18;
    }
    v13 = *(_QWORD *)(v5 + 16);
    v12 = *(_QWORD *)(v5 + 24);
    if (v13 >= v12 >> 1)
    {
      result = (uint64_t)sub_2141D3A84((char *)(v12 > 1), v13 + 1, 1);
      v5 = v18;
    }
    *(_QWORD *)(v5 + 16) = v13 + 1;
    v14 = v5 + 16 * v13;
    *(_QWORD *)(v14 + 32) = v10;
    *(_QWORD *)(v14 + 40) = v9;
    v3 = v15;
    v1 = v16;
  }
  while (v4 + v2);
  return v5;
}

uint64_t sub_2141F9244(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_2141F926C()
{
  swift_release();
  return swift_deallocObject();
}

double sub_2141F9290@<D0>(uint64_t *a1@<X0>, double *a2@<X8>)
{
  uint64_t v2;
  double (*v4)(uint64_t *);
  double v5;
  double v6;
  double result;
  uint64_t v8;

  v4 = *(double (**)(uint64_t *))(v2 + 16);
  v5 = *(double *)(v2 + 32);
  v6 = *(double *)(v2 + 40);
  v8 = *a1;
  result = v5 + (v6 - v5) * v4(&v8);
  *a2 = result;
  return result;
}

uint64_t sub_2141F92E8(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_2141F9310()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2141F9334@<X0>(double *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v5;

  result = sub_2141F2314(*(void (**)(uint64_t *__return_ptr, double, _QWORD))(v2 + 32), *a1, *(double *)(v2 + 16), *(double *)(v2 + 24));
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v5 & 1;
  return result;
}

_QWORD *sub_2141F9370@<X0>(double *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;
  char v5;
  uint64_t v6;
  char v7;

  result = (*(_QWORD *(**)(uint64_t *__return_ptr, double, _QWORD))(v2 + 32))(&v6, (*a1 - *(double *)(v2 + 16)) / (*(double *)(v2 + 24) - *(double *)(v2 + 16)), 0);
  v5 = v7;
  *(_QWORD *)a2 = v6;
  *(_BYTE *)(a2 + 8) = v5;
  return result;
}

uint64_t sub_2141F93D0()
{
  return sub_2141F9510((void (*)(_QWORD))MEMORY[0x24BEE4BC0]);
}

uint64_t sub_2141F93DC@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  double (*v4)(uint64_t *);
  uint64_t v5;
  double v6;
  uint64_t v8;

  v4 = *(double (**)(uint64_t *))(v2 + 16);
  v5 = *(_QWORD *)(v2 + 32);
  v8 = *a1;
  v6 = v4(&v8);
  *a2 = sub_2141F9440(v5, v6);
  return swift_retain();
}

uint64_t sub_2141F9430()
{
  return sub_2141F95C4((void (*)(_QWORD))MEMORY[0x24BEE4BC0]);
}

uint64_t sub_2141F9440(uint64_t result, double a2)
{
  uint64_t v2;
  double v4;
  unint64_t v5;

  v2 = *(_QWORD *)(result + 16);
  if (a2 < 0.0 || a2 > 1.0)
  {
    if (v2)
      return *(_QWORD *)(result + 32);
    __break(1u);
    goto LABEL_16;
  }
  v4 = floor((double)v2 * a2);
  if ((~*(_QWORD *)&v4 & 0x7FF0000000000000) == 0)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (v4 <= -9.22337204e18)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (v4 >= 9.22337204e18)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v5 = v2 - 1;
  if (((uint64_t)v4 & ~((uint64_t)v4 >> 63)) < v2 - 1)
    v5 = (uint64_t)v4 & ~((uint64_t)v4 >> 63);
  if (v5 < v2)
    return *(_QWORD *)(result + 8 * v5 + 32);
LABEL_19:
  __break(1u);
  return result;
}

uint64_t sub_2141F94E0()
{
  return sub_2141F9510((void (*)(_QWORD))MEMORY[0x24BEE4EF8]);
}

uint64_t sub_2141F94EC@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_2141F7650(a1, *(void (**)(uint64_t *))(v2 + 16), a2);
}

uint64_t sub_2141F94F8()
{
  return sub_2141F95C4((void (*)(_QWORD))MEMORY[0x24BEE4EF8]);
}

uint64_t sub_2141F9504()
{
  return sub_2141F9510((void (*)(_QWORD))MEMORY[0x24BEE4BC0]);
}

uint64_t sub_2141F9510(void (*a1)(_QWORD))
{
  uint64_t v1;

  swift_release();
  a1(*(_QWORD *)(v1 + 32));
  return swift_deallocObject();
}

uint64_t sub_2141F9548@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double (*v4)(uint64_t *);
  uint64_t v5;
  double v6;
  __int128 v7;
  uint64_t v9;
  _OWORD v10[2];
  uint64_t v11;

  v4 = *(double (**)(uint64_t *))(v2 + 16);
  v5 = *(_QWORD *)(v2 + 32);
  v9 = *a1;
  v6 = v4(&v9);
  sub_21421F318(v5, (uint64_t)v10, v6);
  v7 = v10[1];
  *(_OWORD *)a2 = v10[0];
  *(_OWORD *)(a2 + 16) = v7;
  *(_QWORD *)(a2 + 32) = v11;
  return sub_2141F963C((uint64_t)v10);
}

uint64_t sub_2141F95B8()
{
  return sub_2141F95C4((void (*)(_QWORD))MEMORY[0x24BEE4BC0]);
}

uint64_t sub_2141F95C4(void (*a1)(_QWORD))
{
  uint64_t v1;

  a1(*(_QWORD *)(v1 + 16));
  swift_release();
  return swift_deallocObject();
}

_QWORD *sub_2141F95F4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  _QWORD *result;
  char v4;
  uint64_t v5;
  char v6;

  result = (*(_QWORD *(**)(uint64_t *__return_ptr, _QWORD, uint64_t))(v1 + 24))(&v5, 0, 1);
  v4 = v6;
  *(_QWORD *)a1 = v5;
  *(_BYTE *)(a1 + 8) = v4;
  return result;
}

uint64_t sub_2141F963C(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *sub_2141F9668@<X0>(_QWORD *a1@<X8>, double a2@<D0>)
{
  return sub_2141F96D8(0, a1, a2);
}

_QWORD *sub_2141F9670@<X0>(double *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v5;

  result = (*(_QWORD *(**)(uint64_t *__return_ptr, double))(v2 + 16))(&v5, *a1);
  *a2 = v5;
  return result;
}

uint64_t sub_2141F96AC()
{
  swift_release();
  return swift_deallocObject();
}

_QWORD *sub_2141F96D0@<X0>(_QWORD *a1@<X8>, double a2@<D0>)
{
  return sub_2141F96D8(1, a1, a2);
}

_QWORD *sub_2141F96D8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>, double a3@<D0>)
{
  uint64_t v3;
  _QWORD *result;
  uint64_t v6;

  result = (*(_QWORD *(**)(uint64_t *__return_ptr, _QWORD, _QWORD, uint64_t))(v3 + 16))(&v6, *(_QWORD *)&a3, 0, a1);
  *a2 = v6;
  return result;
}

double sub_2141F9720@<D0>(uint64_t a1@<X8>, double a2@<D0>)
{
  return sub_2141F9784(0, a1, a2);
}

double sub_2141F9728@<D0>(double *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[5];

  (*(void (**)(_QWORD *__return_ptr, double))(v2 + 16))(v8, *a1);
  v5 = v8[1];
  result = *(double *)&v8[2];
  v6 = v8[3];
  v7 = v8[4];
  *(_QWORD *)a2 = v8[0];
  *(_QWORD *)(a2 + 8) = v5;
  *(double *)(a2 + 16) = result;
  *(_QWORD *)(a2 + 24) = v6;
  *(_QWORD *)(a2 + 32) = v7;
  return result;
}

double sub_2141F977C@<D0>(uint64_t a1@<X8>, double a2@<D0>)
{
  return sub_2141F9784(1, a1, a2);
}

double sub_2141F9784@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v3;
  double result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[5];

  (*(void (**)(_QWORD *__return_ptr, _QWORD, _QWORD, uint64_t))(v3 + 16))(v9, *(_QWORD *)&a3, 0, a1);
  v6 = v9[1];
  result = *(double *)&v9[2];
  v7 = v9[3];
  v8 = v9[4];
  *(_QWORD *)a2 = v9[0];
  *(_QWORD *)(a2 + 8) = v6;
  *(double *)(a2 + 16) = result;
  *(_QWORD *)(a2 + 24) = v7;
  *(_QWORD *)(a2 + 32) = v8;
  return result;
}

uint64_t sub_2141F97E8(double a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v1 + 16))(*(_QWORD *)&a1, 0, 0);
}

uint64_t sub_2141F9814(double *a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(double))(v1 + 16))(*a1);
}

uint64_t sub_2141F9838(double a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(v1 + 16))(*(_QWORD *)&a1, 0, 1);
}

double sub_2141F9868@<D0>(double *a1@<X8>, double a2@<D0>)
{
  return sub_2141F98B4(0, a1, a2);
}

double sub_2141F9870@<D0>(double *a1@<X0>, double *a2@<X8>)
{
  uint64_t v2;
  double result;
  double v5;

  (*(void (**)(double *__return_ptr, double))(v2 + 16))(&v5, *a1);
  result = v5;
  *a2 = v5;
  return result;
}

double sub_2141F98AC@<D0>(double *a1@<X8>, double a2@<D0>)
{
  return sub_2141F98B4(1, a1, a2);
}

double sub_2141F98B4@<D0>(uint64_t a1@<X0>, double *a2@<X8>, double a3@<D0>)
{
  uint64_t v3;
  double result;
  double v6;

  (*(void (**)(double *__return_ptr, _QWORD, _QWORD, uint64_t))(v3 + 16))(&v6, *(_QWORD *)&a3, 0, a1);
  result = v6;
  *a2 = v6;
  return result;
}

uint64_t sub_2141F98F8(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for AxisMarkValues.Storage(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_2141F9934()
{
  return swift_deallocObject();
}

uint64_t sub_2141F9944@<X0>(char **a1@<X0>, unsigned __int8 *a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t *a4@<X3>, void **a5@<X4>, _QWORD *a6@<X8>)
{
  return sub_2141F0360(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_2141F994C()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2141F9998@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = sub_2141F4FC4(*(void (**)(uint64_t *__return_ptr, uint64_t *, char *, char *, _QWORD *, uint64_t *))(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64));
  *a1 = result;
  return result;
}

uint64_t sub_2141F99CC(uint64_t result)
{
  if (result)
  {
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_2141F99F8@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_2141F7174(v1, a1);
}

uint64_t sub_2141F9A00()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_2141F9A24@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 16);
  return swift_bridgeObjectRetain();
}

uint64_t sub_2141F9A30(uint64_t result)
{
  if (result != 1)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t sub_2141F9A40(uint64_t result)
{
  if (result != 1)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t sub_2141F9A50(uint64_t result)
{
  if (result != 2)
    return sub_2141F9A30(result);
  return result;
}

uint64_t sub_2141F9A60(uint64_t result)
{
  if (result != 1)
    return sub_2141D972C(result);
  return result;
}

uint64_t sub_2141F9A70(uint64_t a1)
{
  uint64_t v1;
  void (*v2)(uint64_t *__return_ptr, uint64_t *);
  uint64_t v4;
  uint64_t v5;

  v2 = *(void (**)(uint64_t *__return_ptr, uint64_t *))(v1 + 16);
  v5 = a1;
  v2(&v4, &v5);
  return v4;
}

uint64_t sub_2141F9AA8(uint64_t result)
{
  if ((~result & 0xF000000000000007) != 0)
    return swift_release();
  return result;
}

uint64_t sub_2141F9AC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  uint64_t result;

  if (a7 >> 1 != 0xFFFFFFFF)
    return sub_2141ED07C(a5, a6, a7);
  return result;
}

uint64_t sub_2141F9AF0()
{
  uint64_t v0;

  return sub_2141F45A8(*(void (**)(uint64_t *, _QWORD *))(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t sub_2141F9B10()
{
  uint64_t v0;

  return sub_2141F46C8(*(void (**)(uint64_t *, _QWORD *))(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), (void (*)(uint64_t, uint64_t))sub_2141FA1C4);
}

uint64_t sub_2141F9B38()
{
  return swift_deallocObject();
}

uint64_t sub_2141F9B48(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;

  return sub_2141F1C04(a1, a2, *(_QWORD *)(v2 + 16), *(_BYTE *)(v2 + 24), (uint64_t (*)(_QWORD, _QWORD))sub_2141F3CC8);
}

uint64_t sub_2141F9B70()
{
  return swift_deallocObject();
}

uint64_t sub_2141F9B80(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;

  return sub_2141F1C04(a1, a2, *(_QWORD *)(v2 + 16), *(_BYTE *)(v2 + 24), (uint64_t (*)(_QWORD, _QWORD))sub_2141F3A4C);
}

uint64_t sub_2141F9BA4()
{
  return swift_deallocObject();
}

uint64_t sub_2141F9BB4@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  return sub_2141F1B54(a1, a2, *(_QWORD *)(v3 + 16), *(_BYTE *)(v3 + 24), a3);
}

uint64_t sub_2141F9BC4()
{
  uint64_t v0;

  return sub_2141F48FC(*(void (**)(uint64_t *, uint64_t *))(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t sub_2141F9BE0()
{
  return swift_deallocObject();
}

uint64_t sub_2141F9BF0@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  return sub_2141F1AA4(a1, a2, *(_QWORD *)(v3 + 16), *(_BYTE *)(v3 + 24), a3);
}

uint64_t sub_2141F9C00()
{
  return swift_deallocObject();
}

uint64_t sub_2141F9C10(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;

  return sub_2141F1A1C(a1, a2, *(_QWORD *)(v2 + 16), *(_BYTE *)(v2 + 24), *(_BYTE *)(v2 + 25), (uint64_t (*)(uint64_t, uint64_t))sub_2141F2724, (uint64_t (*)(uint64_t, uint64_t))sub_2141F3060);
}

uint64_t sub_2141F9C44()
{
  return swift_deallocObject();
}

uint64_t sub_2141F9C54(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;

  return sub_2141F1A1C(a1, a2, *(_QWORD *)(v2 + 16), *(_BYTE *)(v2 + 24), *(_BYTE *)(v2 + 25), (uint64_t (*)(uint64_t, uint64_t))sub_2141F2360, (uint64_t (*)(uint64_t, uint64_t))sub_2141F2AE8);
}

uint64_t sub_2141F9C88()
{
  return swift_deallocObject();
}

uint64_t sub_2141F9C9C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = sub_214243F8C(*(void (**)(uint64_t *__return_ptr, __int128 *, uint64_t *, uint64_t *))(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48));
  *a1 = result;
  return result;
}

uint64_t sub_2141F9CCC()
{
  return swift_deallocObject();
}

void sub_2141F9CE0(uint64_t *a1@<X0>, double *a2@<X8>)
{
  uint64_t v2;

  *a2 = sub_2141F41BC(*a1, a1[1], *(_QWORD *)(v2 + 16));
}

uint64_t sub_2141F9D10()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_2141F9D34@<X0>(double *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_2141F9DA0(a1, (void (*)(unint64_t *, double))sub_2142D171C, a2);
}

void sub_2141F9D54(uint64_t *a1@<X0>, double *a2@<X8>)
{
  uint64_t v2;

  *a2 = sub_2141F43A4(*a1, a1[1], v2);
}

uint64_t sub_2141F9D84@<X0>(double *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_2141F9DA0(a1, (void (*)(unint64_t *, double))sub_2142D171C, a2);
}

uint64_t sub_2141F9DA0@<X0>(double *a1@<X0>, void (*a2)(unint64_t *, double)@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v6;

  result = sub_2141F423C(*(_QWORD *)(v3 + 40), a2, *a1, *(double *)(v3 + 16), *(double *)(v3 + 24), *(double *)(v3 + 32));
  *a3 = result;
  a3[1] = v6;
  return result;
}

uint64_t sub_2141F9DD8@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_2141F75D8(a1, *(_QWORD *)(v2 + 16), a2);
}

uint64_t sub_2141F9DE0()
{
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_2141F9E0C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = sub_2141F444C(*a1, a1[1], *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
  *a2 = result;
  return result;
}

uint64_t sub_2141F9E40(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for AnyChartContent(a2, a1);
  return a2;
}

uint64_t sub_2141F9E7C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_2141F44F4(*a1, a1[1], *(_QWORD *)(v2 + 16), a2);
}

uint64_t sub_2141F9E8C(uint64_t a1, uint64_t a2)
{
  assignWithTake for AnyChartContent(a2, a1);
  return a2;
}

uint64_t sub_2141F9EC8@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_2141F7484(a1, *(_QWORD *)(v2 + 16), a2);
}

_QWORD *sub_2141F9ED0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  _QWORD *(*v6)(uint64_t *__return_ptr, _QWORD *);
  _QWORD *result;
  _QWORD v8[2];
  char v9;
  uint64_t v10;

  v6 = *(_QWORD *(**)(uint64_t *__return_ptr, _QWORD *))(v4 + 16);
  v8[0] = a1;
  v8[1] = a2;
  v9 = a3;
  result = v6(&v10, v8);
  *a4 = v10;
  return result;
}

double sub_2141F9F14@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  void (*v6)(_QWORD *__return_ptr, _QWORD *);
  double result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[2];
  char v12;
  _QWORD v13[5];

  v6 = *(void (**)(_QWORD *__return_ptr, _QWORD *))(v4 + 16);
  v11[0] = a1;
  v11[1] = a2;
  v12 = a3;
  v6(v13, v11);
  v8 = v13[1];
  result = *(double *)&v13[2];
  v9 = v13[3];
  v10 = v13[4];
  *(_QWORD *)a4 = v13[0];
  *(_QWORD *)(a4 + 8) = v8;
  *(double *)(a4 + 16) = result;
  *(_QWORD *)(a4 + 24) = v9;
  *(_QWORD *)(a4 + 32) = v10;
  return result;
}

uint64_t sub_2141F9F74()
{
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2141F9FA8(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t (*v4)(_QWORD *);
  _QWORD v6[2];
  char v7;

  v4 = *(uint64_t (**)(_QWORD *))(v3 + 16);
  v6[0] = a1;
  v6[1] = a2;
  v7 = a3;
  return v4(v6);
}

double sub_2141F9FDC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, double *a4@<X8>)
{
  uint64_t v4;
  void (*v6)(double *__return_ptr, _QWORD *);
  double result;
  _QWORD v8[2];
  char v9;
  double v10;

  v6 = *(void (**)(double *__return_ptr, _QWORD *))(v4 + 16);
  v8[0] = a1;
  v8[1] = a2;
  v9 = a3;
  v6(&v10, v8);
  result = v10;
  *a4 = v10;
  return result;
}

uint64_t sub_2141FA020@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_2141F72BC(a1, *(_QWORD *)(v2 + 16), a2);
}

uint64_t sub_2141FA028@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = v1;
  return swift_retain();
}

uint64_t sub_2141FA034()
{
  return swift_deallocObject();
}

void sub_2141FA044(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 16);
}

uint64_t sub_2141FA050()
{
  return swift_deallocObject();
}

double sub_2141FA060@<D0>(double *a1@<X8>)
{
  uint64_t v1;
  double result;

  result = *(double *)(v1 + 16);
  *a1 = result;
  return result;
}

uint64_t sub_2141FA06C()
{
  return sub_2141FA0A8((uint64_t (*)(_QWORD))MEMORY[0x24BDCF2D8]);
}

uint64_t sub_2141FA078@<X0>(uint64_t a1@<X8>)
{
  return sub_2141FA118((uint64_t (*)(_QWORD))MEMORY[0x24BDCF2D8], a1);
}

uint64_t sub_2141FA084()
{
  return sub_2141FA0A8((uint64_t (*)(_QWORD))MEMORY[0x24BDCEEA8]);
}

uint64_t sub_2141FA090@<X0>(uint64_t a1@<X8>)
{
  return sub_2141FA118((uint64_t (*)(_QWORD))MEMORY[0x24BDCEEA8], a1);
}

uint64_t sub_2141FA09C()
{
  return sub_2141FA0A8((uint64_t (*)(_QWORD))MEMORY[0x24BDED130]);
}

uint64_t sub_2141FA0A8(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;

  v2 = a1(0);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1+ ((*(unsigned __int8 *)(*(_QWORD *)(v2 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v2 - 8) + 80)), v2);
  return swift_deallocObject();
}

uint64_t sub_2141FA10C@<X0>(uint64_t a1@<X8>)
{
  return sub_2141FA118((uint64_t (*)(_QWORD))MEMORY[0x24BDED130], a1);
}

uint64_t sub_2141FA118@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;

  v4 = a1(0);
  return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, v2+ ((*(unsigned __int8 *)(*(_QWORD *)(v4 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v4 - 8) + 80)), v4);
}

uint64_t sub_2141FA160(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_2141D8BF8(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t sub_2141FA1A4()
{
  return swift_deallocObject();
}

__n128 sub_2141FA1B4@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  __n128 result;

  result = v1[1];
  *a1 = result;
  return result;
}

uint64_t sub_2141FA284(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = v4 + ((v3 + 16) & ~(unint64_t)v3);
    swift_retain();
  }
  else
  {
    v7 = a1;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    v8 = *(int *)(a3 + 24);
    v9 = a1 + v8;
    v10 = (uint64_t)a2 + v8;
    v11 = sub_2144240D4();
    v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    v13 = *(int *)(a3 + 28);
    v14 = v7 + v13;
    v15 = (uint64_t)a2 + v13;
    v16 = *(_OWORD *)(v15 + 16);
    *(_OWORD *)v14 = *(_OWORD *)v15;
    *(_OWORD *)(v14 + 16) = v16;
    *(_BYTE *)(v14 + 32) = *(_BYTE *)(v15 + 32);
  }
  return v7;
}

uint64_t sub_2141FA350(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 24);
  v5 = sub_2144240D4();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t sub_2141FA398(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = *(int *)(a3 + 24);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = sub_2144240D4();
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  v11 = *(int *)(a3 + 28);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = *(_OWORD *)(v13 + 16);
  *(_OWORD *)v12 = *(_OWORD *)v13;
  *(_OWORD *)(v12 + 16) = v14;
  *(_BYTE *)(v12 + 32) = *(_BYTE *)(v13 + 32);
  return a1;
}

uint64_t sub_2141FA43C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 *v12;
  __int128 v13;
  __int128 v14;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = *(int *)(a3 + 24);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = sub_2144240D4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  v10 = *(int *)(a3 + 28);
  v11 = a1 + v10;
  v12 = (__int128 *)(a2 + v10);
  v13 = *v12;
  v14 = v12[1];
  *(_BYTE *)(v11 + 32) = *((_BYTE *)v12 + 32);
  *(_OWORD *)v11 = v13;
  *(_OWORD *)(v11 + 16) = v14;
  return a1;
}

uint64_t sub_2141FA4DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = *(int *)(a3 + 24);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = sub_2144240D4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = *(int *)(a3 + 28);
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = *(_OWORD *)(v12 + 16);
  *(_OWORD *)v11 = *(_OWORD *)v12;
  *(_OWORD *)(v11 + 16) = v13;
  *(_BYTE *)(v11 + 32) = *(_BYTE *)(v12 + 32);
  return a1;
}

uint64_t sub_2141FA56C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = *(int *)(a3 + 24);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = sub_2144240D4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  v10 = *(int *)(a3 + 28);
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = *(_OWORD *)(v12 + 16);
  *(_OWORD *)v11 = *(_OWORD *)v12;
  *(_OWORD *)(v11 + 16) = v13;
  *(_BYTE *)(v11 + 32) = *(_BYTE *)(v12 + 32);
  return a1;
}

uint64_t sub_2141FA604()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2141FA610(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_2144240D4();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 24)], a2, v8);
  }
}

uint64_t sub_2141FA68C()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_2141FA698(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = sub_2144240D4();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 24)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for SgCanvasRenderer(uint64_t a1)
{
  return sub_2141FE0D4(a1, qword_253F14A10);
}

uint64_t sub_2141FA720()
{
  uint64_t result;
  unint64_t v1;

  result = sub_2144240D4();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_2141FA7A8(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v11;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v11 = MEMORY[0x24BEE4AF8];
    sub_2141D3AA0(0, v1, 0);
    v2 = v11;
    v4 = (uint64_t *)(a1 + 32);
    do
    {
      v5 = *v4++;
      swift_retain();
      sub_2142E8B78(v5);
      v7 = v6;
      swift_release();
      v9 = *(_QWORD *)(v11 + 16);
      v8 = *(_QWORD *)(v11 + 24);
      if (v9 >= v8 >> 1)
        sub_2141D3AA0((char *)(v8 > 1), v9 + 1, 1);
      *(_QWORD *)(v11 + 16) = v9 + 1;
      *(_QWORD *)(v11 + 8 * v9 + 32) = v7;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_2141FA888@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11[3];
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[3];
  uint64_t v15;
  __int128 v16[2];
  char v17;
  uint64_t v18;
  char v19;

  v6 = sub_21442402C();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2141FE4A4(a1, (uint64_t)v16);
  if ((v17 & 1) != 0)
  {
    sub_2141D8DC0(v16, (uint64_t)v14);
    sub_2141D7878((uint64_t)v14, (uint64_t)v11);
    sub_2141D8BF8(&qword_253F131F8);
    if (swift_dynamicCast())
    {
      sub_214424014();
      swift_release();
    }
    else if (*(_BYTE *)(a1 + 41) == 1 || (sub_2141E801C(a2, (uint64_t)&v18, &qword_253F15CD8), (v19 & 1) == 0))
    {
      sub_2141E88D0(v14, v15);
      v12 = sub_2144243D4();
      v13 = MEMORY[0x2199CD934](MEMORY[0x24BDEF330], v12);
      sub_2141D8DD8(v11);
      sub_214423D20();
      sub_214424020();
      _s6Charts15AnyChartContentVwxx_0((uint64_t)v11);
    }
    else
    {
      sub_2141E88D0(v14, v15);
      sub_214424020();
    }
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a3, v9, v6);
    return _s6Charts15AnyChartContentVwxx_0((uint64_t)v14);
  }
  else
  {
    sub_214424014();
    return swift_release();
  }
}

unint64_t sub_2141FAB24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int v6;
  uint64_t v7;
  unsigned __int8 v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  unint64_t v15;

  v1 = v0;
  v2 = sub_214424C68();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v1, v2);
  v6 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v5, v2);
  if (v6 == *MEMORY[0x24BDF50D0])
  {
    v7 = 0;
    v8 = 0;
  }
  else if (v6 == *MEMORY[0x24BDF50F0])
  {
    v8 = 0;
    v7 = 1;
  }
  else if (v6 == *MEMORY[0x24BDF50D8])
  {
    v8 = 0;
    v7 = 2;
  }
  else if (v6 == *MEMORY[0x24BDF50E8])
  {
    v8 = 0;
    v7 = 3;
  }
  else if (v6 == *MEMORY[0x24BDF50C8])
  {
    v8 = 0;
    v7 = 4;
  }
  else if (v6 == *MEMORY[0x24BDF50E0])
  {
    v8 = 0;
    v7 = 5;
  }
  else if (v6 == *MEMORY[0x24BDF5068])
  {
    v8 = 0;
    v7 = 6;
  }
  else if (v6 == *MEMORY[0x24BDF50F8])
  {
    v8 = 0;
    v7 = 7;
  }
  else if (v6 == *MEMORY[0x24BDF5110])
  {
    v8 = 0;
    v7 = 8;
  }
  else if (v6 == *MEMORY[0x24BDF5108])
  {
    v8 = 0;
    v7 = 9;
  }
  else if (v6 == *MEMORY[0x24BDF5070])
  {
    v8 = 0;
    v7 = 10;
  }
  else if (v6 == *MEMORY[0x24BDF5100])
  {
    v8 = 0;
    v7 = 11;
  }
  else if (v6 == *MEMORY[0x24BDF50B8])
  {
    v8 = 0;
    v7 = 12;
  }
  else if (v6 == *MEMORY[0x24BDF5088])
  {
    v8 = 0;
    v7 = 13;
  }
  else if (v6 == *MEMORY[0x24BDF50C0])
  {
    v8 = 0;
    v7 = 14;
  }
  else if (v6 == *MEMORY[0x24BDF5078])
  {
    v8 = 0;
    v7 = 15;
  }
  else if (v6 == *MEMORY[0x24BDF5090])
  {
    v8 = 0;
    v7 = 20;
  }
  else if (v6 == *MEMORY[0x24BDF50A8])
  {
    v8 = 0;
    v7 = 21;
  }
  else if (v6 == *MEMORY[0x24BDF50A0])
  {
    v8 = 0;
    v7 = 23;
  }
  else if (v6 == *MEMORY[0x24BDF5080])
  {
    v8 = 0;
    v7 = 26;
  }
  else if (v6 == *MEMORY[0x24BDF5098])
  {
    v8 = 0;
    v7 = 27;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    if (qword_253F154D0 != -1)
      swift_once();
    v9 = (id)qword_253F1CC08;
    sub_2144252E0();
    sub_2141D8BF8(&qword_253F0FF88);
    v10 = swift_allocObject();
    *(_OWORD *)(v10 + 16) = xmmword_214426EF0;
    v14 = 0;
    v15 = 0xE000000000000000;
    sub_2144254D8();
    sub_214424F20();
    sub_2144255F8();
    v11 = v14;
    v12 = v15;
    *(_QWORD *)(v10 + 56) = MEMORY[0x24BEE0D00];
    *(_QWORD *)(v10 + 64) = sub_2141FE354();
    *(_QWORD *)(v10 + 32) = v11;
    *(_QWORD *)(v10 + 40) = v12;
    sub_214423CCC();

    swift_bridgeObjectRelease();
    v7 = 0;
    v8 = 1;
  }
  return v7 | ((unint64_t)v8 << 32);
}

uint64_t sub_2141FAF88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  CGFloat v8;
  CGFloat v9;
  double v10;
  double v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  CGFloat v22;
  CGFloat v23;
  CGFloat MaxX;
  double v25;
  double MaxY;
  double v27;
  uint64_t result;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32[4];
  char v33;
  _QWORD v34[4];
  char v35;
  CGRect v36;
  CGRect v37;
  CGRect v38;
  CGRect v39;

  sub_2141E801C(a3, (uint64_t)v34, &qword_253F15CD8);
  v8 = *(double *)v34;
  v9 = *(double *)&v34[1];
  v10 = *(double *)&v34[2];
  v11 = *(double *)&v34[3];
  v12 = v35;
  v30 = *(_OWORD *)(a1 + 1152);
  v31 = *(_OWORD *)(a1 + 1112);
  v13 = *(_QWORD *)(a1 + 1168);
  v14 = *(_QWORD *)(a1 + 1176);
  sub_2141FCAC0((uint64_t *)(a1 + 400), (uint64_t)v32);
  v15 = *(_QWORD *)a1;
  sub_2141D8BF8(&qword_253F13330);
  v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_214426EF0;
  *(_QWORD *)(v16 + 32) = v15;
  sub_2141FCAC0(v32, v16 + 112);
  *(_QWORD *)(v16 + 40) = v15;
  *(_QWORD *)(v16 + 48) = 0x3FF0000000000000;
  *(_QWORD *)(v16 + 56) = a2;
  *(_OWORD *)(v16 + 64) = v31;
  *(_OWORD *)(v16 + 80) = v30;
  *(_QWORD *)(v16 + 96) = v13;
  *(_QWORD *)(v16 + 104) = v14;
  v17 = sub_21436CDFC(v16);
  swift_setDeallocating();
  swift_retain();
  sub_2141D8BF8(qword_253F12938);
  swift_arrayDestroy();
  swift_deallocClassInstance();
  sub_2141FD584((uint64_t)v32);
  *(_QWORD *)a4 = v17;
  *(_BYTE *)(a4 + 8) = *(_BYTE *)(a1 + 1144);
  v18 = a1 + *(int *)(type metadata accessor for ChartModel.Scenegraph() + 56);
  v19 = type metadata accessor for SgCanvasRenderer(0);
  v20 = a4 + *(int *)(v19 + 24);
  v21 = sub_2144240D4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v20, v18, v21);
  sub_2141E801C(a3, (uint64_t)v32, &qword_253F15CD8);
  if ((v33 & 1) != 0)
  {
    swift_release();
  }
  else
  {
    v36.origin.x = v8;
    v36.origin.y = v9;
    v36.size.width = v10;
    v36.size.height = v11;
    v22 = floor(CGRectGetMinX(v36) * 0.00390625) * 256.0;
    v37.origin.x = v8;
    v37.origin.y = v9;
    v37.size.width = v10;
    v37.size.height = v11;
    v23 = floor(CGRectGetMinY(v37) * 0.00390625) * 256.0;
    v38.origin.x = v8;
    v38.origin.y = v9;
    v38.size.width = v10;
    v38.size.height = v11;
    MaxX = CGRectGetMaxX(v38);
    v39.size.height = v11;
    v25 = ceil(MaxX * 0.00390625) * 256.0;
    v39.origin.x = v8;
    v39.origin.y = v9;
    v39.size.width = v10;
    MaxY = CGRectGetMaxY(v39);
    swift_release();
    v12 = 0;
    v27 = ceil(MaxY * 0.00390625) * 256.0;
    v10 = v25 - v22;
    v11 = v27 - v23;
    v8 = v22;
    v9 = v23;
  }
  result = sub_2141DD370(a1, (uint64_t (*)(_QWORD))type metadata accessor for ChartModel.Scenegraph);
  v29 = a4 + *(int *)(v19 + 28);
  *(CGFloat *)v29 = v8;
  *(CGFloat *)(v29 + 8) = v9;
  *(double *)(v29 + 16) = v10;
  *(double *)(v29 + 24) = v11;
  *(_BYTE *)(v29 + 32) = v12;
  return result;
}

char *sub_2141FB238(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD v56[8];
  char *v57;
  char *v58;

  v52 = type metadata accessor for SgGroup(0);
  v2 = MEMORY[0x24BDAC7A8](v52);
  v4 = (char *)&v46 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = MEMORY[0x24BDAC7A8](v2);
  v51 = (uint64_t)&v46 - v6;
  MEMORY[0x24BDAC7A8](v5);
  v53 = (uint64_t)&v46 - v7;
  result = (char *)MEMORY[0x24BEE4AF8];
  v58 = (char *)MEMORY[0x24BEE4AF8];
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    v10 = a1 + 32;
    v46 = a1;
    swift_bridgeObjectRetain();
    v11 = 0;
    v50 = xmmword_214426EF0;
    v48 = v9;
    v47 = a1 + 32;
    do
    {
      v13 = *(_QWORD *)(v10 + 8 * v11);
      if (v13 >> 60)
      {
        v23 = v58;
        swift_retain_n();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v23 = sub_214222074(0, *((_QWORD *)v23 + 2) + 1, 1, v23);
        v25 = *((_QWORD *)v23 + 2);
        v24 = *((_QWORD *)v23 + 3);
        if (v25 >= v24 >> 1)
          v23 = sub_214222074((char *)(v24 > 1), v25 + 1, 1, v23);
        *((_QWORD *)v23 + 2) = v25 + 1;
        *(_QWORD *)&v23[8 * v25 + 32] = v13;
        v58 = v23;
        swift_release();
      }
      else
      {
        v14 = swift_projectBox();
        sub_2141FDEA0(v14, v53, type metadata accessor for SgGroup);
        v49 = v13;
        swift_retain();
        v15 = swift_bridgeObjectRetain();
        v16 = sub_2141FB238(v15);
        swift_bridgeObjectRelease();
        v17 = *(_QWORD *)(v16 + 16);
        if (v17)
        {
          v18 = 0;
          while (*(_QWORD *)(v16 + 8 * v18 + 32) >> 60 != 2)
          {
            if (v17 == ++v18)
              goto LABEL_10;
          }
          v26 = 0;
          v57 = (char *)MEMORY[0x24BEE4AF8];
          do
          {
            v27 = *(_QWORD *)(v16 + 8 * v26 + 32);
            if (v27 >> 60 == 2)
            {
              sub_2141FE108((_QWORD *)((v27 & 0xFFFFFFFFFFFFFFFLL) + 16), (uint64_t)v56);
              v28 = (uint64_t)v57;
              if (*((_QWORD *)v57 + 2))
              {
                v29 = v51;
                sub_2141FDEA0(v53, v51, type metadata accessor for SgGroup);
                swift_retain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRelease();
                *(_QWORD *)(v29 + 8) = v28;
                v30 = swift_allocBox();
                sub_2141FDEA0(v29, v31, type metadata accessor for SgGroup);
                v32 = v58;
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                  v32 = sub_214222074(0, *((_QWORD *)v32 + 2) + 1, 1, v32);
                v34 = *((_QWORD *)v32 + 2);
                v33 = *((_QWORD *)v32 + 3);
                if (v34 >= v33 >> 1)
                  v32 = sub_214222074((char *)(v33 > 1), v34 + 1, 1, v32);
                *((_QWORD *)v32 + 2) = v34 + 1;
                *(_QWORD *)&v32[8 * v34 + 32] = v30;
                v58 = v32;
                v57 = (char *)MEMORY[0x24BEE4AF8];
                swift_bridgeObjectRelease();
                sub_2141DD370(v51, type metadata accessor for SgGroup);
              }
              else
              {
                swift_retain();
              }
              sub_2141FDEA0(v53, (uint64_t)v4, type metadata accessor for SgGroup);
              sub_2141FE108(v56, (uint64_t)&v54);
              v38 = v55;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRelease();
              *((_QWORD *)v4 + 1) = v38;
              sub_2141D8BF8(&qword_253F15D40);
              v39 = swift_allocObject();
              *(_OWORD *)(v39 + 16) = v50;
              v40 = swift_allocBox();
              sub_2141FDEA0((uint64_t)v4, v41, type metadata accessor for SgGroup);
              *(_QWORD *)(v39 + 32) = v40;
              swift_bridgeObjectRelease();
              v55 = v39;
              v42 = swift_allocObject();
              sub_2141FE108(&v54, v42 + 16);
              v43 = v58;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                v43 = sub_214222074(0, *((_QWORD *)v43 + 2) + 1, 1, v43);
              v45 = *((_QWORD *)v43 + 2);
              v44 = *((_QWORD *)v43 + 3);
              if (v45 >= v44 >> 1)
                v43 = sub_214222074((char *)(v44 > 1), v45 + 1, 1, v43);
              *((_QWORD *)v43 + 2) = v45 + 1;
              *(_QWORD *)&v43[8 * v45 + 32] = v42 | 0x2000000000000000;
              v58 = v43;
              sub_2141FE470((uint64_t)v56);
              sub_2141FE470((uint64_t)&v54);
              sub_2141DD370((uint64_t)v4, type metadata accessor for SgGroup);
              swift_release();
            }
            else
            {
              v35 = v57;
              swift_retain_n();
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                v35 = sub_214222074(0, *((_QWORD *)v35 + 2) + 1, 1, v35);
              v37 = *((_QWORD *)v35 + 2);
              v36 = *((_QWORD *)v35 + 3);
              if (v37 >= v36 >> 1)
                v35 = sub_214222074((char *)(v36 > 1), v37 + 1, 1, v35);
              *((_QWORD *)v35 + 2) = v37 + 1;
              *(_QWORD *)&v35[8 * v37 + 32] = v27;
              v57 = v35;
              swift_release();
            }
            ++v26;
          }
          while (v17 != v26);
          swift_bridgeObjectRelease();
          v12 = v53;
          sub_2141FB880((uint64_t *)&v57, v53, &v58);
          sub_2141DD370(v12, type metadata accessor for SgGroup);
          swift_release();
          swift_bridgeObjectRelease();
          v9 = v48;
          v10 = v47;
        }
        else
        {
LABEL_10:
          swift_bridgeObjectRelease();
          v19 = v58;
          v20 = v49;
          swift_retain();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v19 = sub_214222074(0, *((_QWORD *)v19 + 2) + 1, 1, v19);
          v22 = *((_QWORD *)v19 + 2);
          v21 = *((_QWORD *)v19 + 3);
          if (v22 >= v21 >> 1)
            v19 = sub_214222074((char *)(v21 > 1), v22 + 1, 1, v19);
          *((_QWORD *)v19 + 2) = v22 + 1;
          *(_QWORD *)&v19[8 * v22 + 32] = v20;
          v58 = v19;
          sub_2141DD370(v53, type metadata accessor for SgGroup);
          swift_release();
        }
      }
      ++v11;
    }
    while (v11 != v9);
    swift_bridgeObjectRelease();
    return v58;
  }
  return result;
}

uint64_t sub_2141FB880(uint64_t *a1, uint64_t a2, char **a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;

  v6 = type metadata accessor for SgGroup(0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = swift_beginAccess();
  v10 = *a1;
  if (*(_QWORD *)(*a1 + 16))
  {
    sub_2141FDEA0(a2, (uint64_t)v8, type metadata accessor for SgGroup);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *((_QWORD *)v8 + 1) = v10;
    v11 = swift_allocBox();
    sub_2141FDEA0((uint64_t)v8, v12, type metadata accessor for SgGroup);
    swift_beginAccess();
    v13 = *a3;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *a3 = v13;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v13 = sub_214222074(0, *((_QWORD *)v13 + 2) + 1, 1, v13);
      *a3 = v13;
    }
    v16 = *((_QWORD *)v13 + 2);
    v15 = *((_QWORD *)v13 + 3);
    if (v16 >= v15 >> 1)
    {
      v13 = sub_214222074((char *)(v15 > 1), v16 + 1, 1, v13);
      *a3 = v13;
    }
    *((_QWORD *)v13 + 2) = v16 + 1;
    *(_QWORD *)&v13[8 * v16 + 32] = v11;
    swift_beginAccess();
    *a1 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRelease();
    return sub_2141DD370((uint64_t)v8, type metadata accessor for SgGroup);
  }
  return result;
}

uint64_t sub_2141FBA28@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  char *v24;
  int v25;
  double v26;
  double x;
  double y;
  double width;
  double height;
  CGRect *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t KeyPath;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  CGRect v63;
  CGRect v64;

  v2 = v1;
  v55 = a1;
  v3 = type metadata accessor for SgCanvasRenderer(0);
  v48 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v49 = v4;
  v47 = (uint64_t)&KeyPath - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_2141D8BF8(&qword_253F13528);
  v53 = *(_QWORD *)(v5 - 8);
  v54 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v52 = (char *)&KeyPath - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = sub_2141D8BF8(&qword_253F13480);
  MEMORY[0x24BDAC7A8](v50);
  v51 = (uint64_t)&KeyPath - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_2141D8BF8(&qword_253F15B20);
  MEMORY[0x24BDAC7A8](v8);
  v46 = (uint64_t)&KeyPath - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for SgCanvasRenderer.FixedLayout(0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (double *)((char *)&KeyPath - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = sub_2144240D4();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&KeyPath - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_214311A88(*v2, (double *)&v56);
  v17 = v56;
  v18 = v57;
  v19 = v58;
  v21 = v59;
  v20 = v60;
  v22 = v61;
  v23 = v62;
  v24 = (char *)v2 + *(int *)(v3 + 24);
  (*(void (**)(char *, _QWORD, uint64_t))(v14 + 104))(v16, *MEMORY[0x24BDED118], v13);
  v25 = sub_2144240C8();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  v45 = v25;
  if ((v25 & 1) != 0)
    v26 = v23;
  else
    v26 = v20;
  x = -v26;
  y = -v21;
  width = v18 + v20 + v23;
  height = v19 + v21 + v22;
  v31 = (CGRect *)((char *)v2 + *(int *)(v3 + 28));
  if ((LOBYTE(v31[1].origin.x) & 1) == 0)
  {
    v63.origin.x = -v26;
    v63.origin.y = y;
    v63.size.width = width;
    v63.size.height = height;
    v64 = CGRectIntersection(v63, *v31);
    x = v64.origin.x;
    y = v64.origin.y;
    width = v64.size.width;
    height = v64.size.height;
  }
  (*(void (**)(char *, char *, uint64_t))(v14 + 16))((char *)v12 + *(int *)(v10 + 24), v24, v13);
  *v12 = x;
  v12[1] = y;
  v12[2] = width;
  v12[3] = height;
  v12[4] = v18;
  v12[5] = v19;
  v32 = sub_2141FDCCC(v17);
  v33 = v46;
  sub_2141FDEA0((uint64_t)v12, v46, type metadata accessor for SgCanvasRenderer.FixedLayout);
  v34 = v51;
  sub_2141E070C(v33, v51, &qword_253F15B20);
  v35 = *(double *)(v32 + 16);
  v56 = 0;
  v57 = v35;
  KeyPath = swift_getKeyPath();
  v36 = v47;
  sub_2141FDEA0((uint64_t)v2, v47, type metadata accessor for SgCanvasRenderer);
  v37 = (*(unsigned __int8 *)(v48 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v48 + 80);
  v38 = (v37 + v49 + 7) & 0xFFFFFFFFFFFFFFF8;
  v39 = (v37 + v49 + 47) & 0xFFFFFFFFFFFFFFF8;
  v40 = swift_allocObject();
  *(_QWORD *)(v40 + 16) = v32;
  *(double *)(v40 + 24) = v18;
  *(double *)(v40 + 32) = v19;
  sub_2141FE1E0(v36, v40 + v37, type metadata accessor for SgCanvasRenderer);
  v41 = v40 + v38;
  *(double *)v41 = x;
  *(double *)(v41 + 8) = y;
  *(double *)(v41 + 16) = width;
  *(double *)(v41 + 24) = height;
  *(_BYTE *)(v41 + 32) = v45 & 1;
  *(_QWORD *)(v40 + v39) = v17;
  swift_retain();
  swift_bridgeObjectRetain();
  sub_2141D8BF8(&qword_253F13548);
  sub_2141FE010();
  v42 = v52;
  sub_214424B84();
  sub_2141E0750(v33, &qword_253F15B20);
  (*(void (**)(uint64_t, char *, uint64_t))(v53 + 32))(v34 + *(int *)(v50 + 44), v42, v54);
  sub_2141E801C(v34, v55, &qword_253F13480);
  sub_2141DD370((uint64_t)v12, type metadata accessor for SgCanvasRenderer.FixedLayout);
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_2141FBEC8@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t *a6@<X8>, double a7@<D0>, double a8@<D1>, double a9@<D2>, double a10@<D3>, double a11@<D4>, double a12@<D5>)
{
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t result;
  uint64_t v33;
  double *v34;
  unint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(uint64_t, uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;

  v60 = a5;
  v57 = a4;
  v61 = a6;
  v62 = a3;
  v59 = sub_214424278();
  v58 = *(_QWORD *)(v59 - 8);
  MEMORY[0x24BDAC7A8](v59);
  v21 = (char *)&v53 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_2141D8BF8(&qword_253F15C50);
  v56 = *(_QWORD *)(v22 - 8);
  v23 = MEMORY[0x24BDAC7A8](v22);
  v55 = (char *)&v53 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v23);
  v26 = (char *)&v53 - v25;
  v27 = type metadata accessor for RenderParams(0);
  v28 = *(_QWORD *)(v27 - 8);
  v29 = *(_QWORD *)(v28 + 64);
  v30 = MEMORY[0x24BDAC7A8](v27);
  v31 = (char *)&v53 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = MEMORY[0x24BDAC7A8](v30);
  v34 = (double *)((char *)&v53 - v33);
  v35 = *a1;
  if ((*a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (v35 >= *(_QWORD *)(a2 + 16))
  {
LABEL_8:
    __break(1u);
    return result;
  }
  v54 = a2 + (v35 << 6);
  v36 = (_QWORD *)(v54 + 32);
  v37 = v62 + *(int *)(type metadata accessor for SgCanvasRenderer(0) + 24);
  v38 = (char *)v34 + *(int *)(v27 + 20);
  v39 = sub_2144240D4();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 16))(v38, v37, v39);
  *v34 = a7;
  v34[1] = a8;
  sub_2141FE108(v36, (uint64_t)&v65);
  sub_2141FDEA0((uint64_t)v34, (uint64_t)v31, type metadata accessor for RenderParams);
  v40 = (*(unsigned __int8 *)(v28 + 80) + 136) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80);
  v41 = swift_allocObject();
  *(double *)(v41 + 16) = a9;
  *(double *)(v41 + 24) = a10;
  *(double *)(v41 + 32) = a11;
  *(double *)(v41 + 40) = a12;
  *(_BYTE *)(v41 + 48) = v57 & 1;
  *(double *)(v41 + 56) = a7;
  *(double *)(v41 + 64) = a8;
  v42 = v66;
  *(_OWORD *)(v41 + 72) = v65;
  *(_OWORD *)(v41 + 88) = v42;
  v43 = v68;
  *(_OWORD *)(v41 + 104) = v67;
  *(_OWORD *)(v41 + 120) = v43;
  v44 = sub_2141FE1E0((uint64_t)v31, v41 + v40, type metadata accessor for RenderParams);
  MEMORY[0x24BDAC7A8](v44);
  (*(void (**)(char *, _QWORD, uint64_t))(v58 + 104))(v21, *MEMORY[0x24BDEE8B0], v59);
  sub_2141D8BF8(&qword_253F15C80);
  sub_2141FE294();
  sub_214424AC4();
  sub_214424AB8();
  sub_214424AAC();
  sub_2141E070C(v54 + 48, (uint64_t)&v63, &qword_253F15B28);
  if (v64)
  {
    sub_2141D8DC0(&v63, (uint64_t)&v65);
    v45 = *((_QWORD *)&v66 + 1);
    v46 = v67;
    v47 = sub_2141E88D0(&v65, *((uint64_t *)&v66 + 1));
    v48 = v56;
    v49 = (uint64_t)v55;
    (*(void (**)(char *, char *, uint64_t))(v56 + 16))(v55, v26, v22);
    v50 = sub_2141FC590((uint64_t)v47, v49, v45, v46);
    v51 = *(void (**)(uint64_t, uint64_t))(v48 + 8);
    v51(v49, v22);
    v51((uint64_t)v26, v22);
    sub_2141DD370((uint64_t)v34, type metadata accessor for RenderParams);
    result = _s6Charts15AnyChartContentVwxx_0((uint64_t)&v65);
  }
  else
  {
    sub_2141E0750((uint64_t)&v63, &qword_253F15B28);
    v52 = v56;
    (*(void (**)(char *, char *, uint64_t))(v56 + 16))(v55, v26, v22);
    sub_2141D9054(&qword_253F15C48, &qword_253F15C50, MEMORY[0x24BDF4400]);
    v50 = sub_214424B18();
    (*(void (**)(char *, uint64_t))(v52 + 8))(v26, v22);
    result = sub_2141DD370((uint64_t)v34, type metadata accessor for RenderParams);
  }
  *v61 = v50;
  return result;
}

uint64_t sub_2141FC358(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t result;
  char *v19;

  sub_214423F48();
  if ((a2 & 1) != 0)
  {
    sub_214423F48();
    sub_214424068();
  }
  v8 = *(_QWORD *)(a3 + 8);
  sub_2141FA7A8(v8);
  v9 = *(_QWORD *)(v8 + 16);
  v10 = swift_bridgeObjectRetain();
  v11 = (char *)sub_2141DBCE8(v10, 0, v9);
  swift_bridgeObjectRelease();
  v19 = v11;
  sub_2141FCAFC(&v19);
  swift_bridgeObjectRelease();
  v12 = v19;
  v13 = *((_QWORD *)v19 + 2);
  if (!v13)
    return swift_release();
  swift_bridgeObjectRetain();
  v14 = (unint64_t *)(v12 + 40);
  while (1)
  {
    v16 = *v14;
    v14 += 2;
    v15 = v16;
    if ((v16 & 0x8000000000000000) != 0)
      break;
    if (v15 >= *(_QWORD *)(v8 + 16))
      goto LABEL_11;
    v17 = *(_QWORD *)(v8 + 32 + 8 * v15);
    swift_retain();
    sub_2142EA234(a1, a4, v17);
    swift_release();
    if (!--v13)
    {
      swift_bridgeObjectRelease();
      return swift_release();
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  result = swift_release();
  __break(1u);
  return result;
}

uint64_t sub_2141FC4B0(uint64_t a1)
{
  sub_2142EA7B8(a1);
  sub_2141D8BF8(&qword_253F15CB0);
  sub_2141D8BF8(&qword_253F15C60);
  sub_2141D9054(&qword_253F15CB8, &qword_253F15CB0, MEMORY[0x24BEE12D8]);
  sub_2141D9054(&qword_253F15C58, &qword_253F15C60, MEMORY[0x24BDF44C8]);
  sub_2141FE310();
  return sub_214424B90();
}

uint64_t sub_2141FC584@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  *a2 = a1[1];
  a2[1] = v2;
  return swift_retain();
}

uint64_t sub_2141FC590(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v16[2];

  v8 = sub_2141D8BF8(&qword_253F15C50);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v16[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_214424110();
  MEMORY[0x24BDAC7A8](v12);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  v13 = sub_2141D9054(&qword_253F15C48, &qword_253F15C50, MEMORY[0x24BDF4400]);
  MEMORY[0x2199CC254](a1, v8, a3, v13);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  v16[0] = v13;
  v16[1] = a4;
  MEMORY[0x2199CD934](MEMORY[0x24BDED308], v12, v16);
  return sub_214424B18();
}

double sub_2141FC704()
{
  uint64_t v0;

  return *(double *)(v0 + 32);
}

uint64_t sub_2141FC70C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_2141FED50(a5);
}

uint64_t sub_2141FC718(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_2141FC770(a1, a2, a3, a4, a5, a6, a7, a8, a9, MEMORY[0x24BDF44F8]);
}

uint64_t sub_2141FC744(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_2141FC770(a1, a2, a3, a4, a5, a6, a7, a8, a9, MEMORY[0x24BDF4500]);
}

uint64_t sub_2141FC770(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t (*a10)(uint64_t))
{
  return a10(a1);
}

uint64_t sub_2141FC7AC(CGRect *a1, CGRect *a2)
{
  BOOL v4;

  if (CGRectEqualToRect(*a1, *a2)
    && (a1[1].origin.x == a2[1].origin.x ? (v4 = a1[1].origin.y == a2[1].origin.y) : (v4 = 0), v4))
  {
    return sub_2144240C8();
  }
  else
  {
    return 0;
  }
}

void (*sub_2141FC824(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = sub_214423CE4();
  return sub_2141FC880;
}

void sub_2141FC880(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD))(*a1 + 32))(*a1);
  free(v1);
}

uint64_t sub_2141FC8B0()
{
  sub_2141FED10(&qword_253F14A00, type metadata accessor for SgCanvasRenderer, (uint64_t)&unk_214427980);
  return sub_214424824();
}

uint64_t sub_2141FC920()
{
  sub_2141FED10(&qword_253F14A00, type metadata accessor for SgCanvasRenderer, (uint64_t)&unk_214427980);
  return sub_214424830();
}

uint64_t sub_2141FC994@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
  return swift_bridgeObjectRetain();
}

uint64_t sub_2141FC9A0(uint64_t *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t result;

  v2 = *a1;
  result = swift_bridgeObjectRelease();
  *v1 = v2;
  return result;
}

uint64_t (*sub_2141FC9C8(_QWORD *a1))(uint64_t *a1, char a2)
{
  _QWORD *v1;

  *a1 = *v1;
  a1[1] = v1;
  swift_bridgeObjectRetain();
  return sub_2141FCA00;
}

uint64_t sub_2141FCA00(uint64_t *a1, char a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t result;

  v2 = *a1;
  v3 = (_QWORD *)a1[1];
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *v3 = v2;
    return swift_bridgeObjectRelease();
  }
  else
  {
    result = swift_bridgeObjectRelease();
    *v3 = v2;
  }
  return result;
}

unint64_t sub_2141FCA6C()
{
  unint64_t result;

  result = qword_253F11E48;
  if (!qword_253F11E48)
  {
    result = MEMORY[0x2199CD934](&unk_21442C4C4, &type metadata for SgAnimatableData);
    atomic_store(result, (unint64_t *)&qword_253F11E48);
  }
  return result;
}

uint64_t sub_2141FCAB0()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_2141FCAC0(uint64_t *a1, uint64_t a2)
{
  initializeWithCopy for SgScales(a2, a1);
  return a2;
}

uint64_t sub_2141FCAFC(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_214350148((uint64_t)v2);
  v3 = *((_QWORD *)v2 + 2);
  v5[0] = (uint64_t)(v2 + 32);
  v5[1] = v3;
  result = sub_2141FCB64(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_2141FCB64(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  double v16;
  double *v17;
  double v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  unint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  BOOL v57;
  uint64_t v58;
  char v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  BOOL v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  double v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  double *v105;

  v3 = a1[1];
  result = sub_214425730();
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_138;
    if ((unint64_t)v3 >= 2)
    {
      v82 = *a1;
      v83 = -1;
      v84 = 1;
      v85 = *a1;
      do
      {
        v86 = *(double *)(v82 + 16 * v84);
        v87 = v83;
        v88 = v85;
        do
        {
          if (v86 >= *(double *)v88)
            break;
          if (!v82)
            goto LABEL_142;
          v89 = *(_QWORD *)(v88 + 24);
          *(_OWORD *)(v88 + 16) = *(_OWORD *)v88;
          *(double *)v88 = v86;
          *(_QWORD *)(v88 + 8) = v89;
          v88 -= 16;
        }
        while (!__CFADD__(v87++, 1));
        ++v84;
        v85 += 16;
        --v83;
      }
      while (v84 != v3);
    }
  }
  else
  {
    if (v3 >= 0)
      v5 = v3;
    else
      v5 = v3 + 1;
    if (v3 < -1)
      goto LABEL_137;
    v6 = result;
    v99 = a1;
    if (v3 > 1)
    {
      v7 = v5 >> 1;
      sub_2141D8BF8(&qword_253F10140);
      result = sub_21442504C();
      *(_QWORD *)(result + 16) = v7;
      v101 = result;
      v105 = (double *)(result + 32);
LABEL_13:
      v9 = 0;
      v10 = *a1;
      v100 = *a1 + 32;
      v98 = *a1 - 16;
      v11 = MEMORY[0x24BEE4AF8];
      v102 = v6;
      v103 = v3;
      v104 = v10;
      while (1)
      {
        v13 = v9++;
        if (v9 < v3)
        {
          v14 = *(double *)(v10 + 16 * v9);
          v15 = 16 * v13;
          v16 = *(double *)(v10 + 16 * v13);
          v9 = v13 + 2;
          if (v13 + 2 < v3)
          {
            v17 = (double *)(v100 + 16 * v13);
            v18 = v14;
            while (1)
            {
              v19 = v18;
              v18 = *v17;
              if (v14 < v16 == *v17 >= v19)
                break;
              ++v9;
              v17 += 2;
              if (v3 == v9)
              {
                v9 = v3;
                break;
              }
            }
          }
          if (v14 < v16)
          {
            if (v9 < v13)
              goto LABEL_139;
            if (v13 < v9)
            {
              v20 = 16 * v9;
              v21 = v9;
              v22 = v13;
              do
              {
                if (v22 != --v21)
                {
                  if (!v10)
                    goto LABEL_145;
                  v23 = v10 + v20;
                  v24 = *(_QWORD *)(v10 + v15);
                  v25 = *(_QWORD *)(v10 + v15 + 8);
                  *(_OWORD *)(v10 + v15) = *(_OWORD *)(v10 + v20 - 16);
                  *(_QWORD *)(v23 - 16) = v24;
                  *(_QWORD *)(v23 - 8) = v25;
                }
                ++v22;
                v20 -= 16;
                v15 += 16;
              }
              while (v22 < v21);
            }
          }
        }
        if (v9 < v3)
        {
          if (__OFSUB__(v9, v13))
            goto LABEL_136;
          if (v9 - v13 < v6)
          {
            v26 = v13 + v6;
            if (__OFADD__(v13, v6))
              goto LABEL_140;
            if (v26 >= v3)
              v26 = v3;
            if (v26 < v13)
            {
LABEL_141:
              __break(1u);
LABEL_142:
              __break(1u);
LABEL_143:
              __break(1u);
LABEL_144:
              __break(1u);
LABEL_145:
              __break(1u);
LABEL_146:
              __break(1u);
              return result;
            }
            if (v9 != v26)
            {
              v27 = v98 + 16 * v9;
              do
              {
                v28 = *(double *)(v10 + 16 * v9);
                v29 = v13;
                v30 = v27;
                do
                {
                  if (v28 >= *(double *)v30)
                    break;
                  if (!v10)
                    goto LABEL_143;
                  v31 = *(_QWORD *)(v30 + 24);
                  *(_OWORD *)(v30 + 16) = *(_OWORD *)v30;
                  *(double *)v30 = v28;
                  *(_QWORD *)(v30 + 8) = v31;
                  v30 -= 16;
                  ++v29;
                }
                while (v9 != v29);
                ++v9;
                v27 += 16;
              }
              while (v9 != v26);
              v9 = v26;
            }
          }
        }
        if (v9 < v13)
          goto LABEL_131;
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          result = (uint64_t)sub_214224E24(0, *(_QWORD *)(v11 + 16) + 1, 1, (char *)v11);
          v11 = result;
        }
        v33 = *(_QWORD *)(v11 + 16);
        v32 = *(_QWORD *)(v11 + 24);
        v12 = v33 + 1;
        v10 = v104;
        if (v33 >= v32 >> 1)
        {
          result = (uint64_t)sub_214224E24((char *)(v32 > 1), v33 + 1, 1, (char *)v11);
          v10 = v104;
          v11 = result;
        }
        *(_QWORD *)(v11 + 16) = v12;
        v34 = v11 + 32;
        v35 = (uint64_t *)(v11 + 32 + 16 * v33);
        *v35 = v13;
        v35[1] = v9;
        if (v33)
        {
          while (1)
          {
            v36 = v12 - 1;
            if (v12 >= 4)
            {
              v41 = v34 + 16 * v12;
              v42 = *(_QWORD *)(v41 - 64);
              v43 = *(_QWORD *)(v41 - 56);
              v47 = __OFSUB__(v43, v42);
              v44 = v43 - v42;
              if (v47)
                goto LABEL_120;
              v46 = *(_QWORD *)(v41 - 48);
              v45 = *(_QWORD *)(v41 - 40);
              v47 = __OFSUB__(v45, v46);
              v39 = v45 - v46;
              v40 = v47;
              if (v47)
                goto LABEL_121;
              v48 = v12 - 2;
              v49 = (uint64_t *)(v34 + 16 * (v12 - 2));
              v51 = *v49;
              v50 = v49[1];
              v47 = __OFSUB__(v50, v51);
              v52 = v50 - v51;
              if (v47)
                goto LABEL_122;
              v47 = __OFADD__(v39, v52);
              v53 = v39 + v52;
              if (v47)
                goto LABEL_124;
              if (v53 >= v44)
              {
                v71 = (uint64_t *)(v34 + 16 * v36);
                v73 = *v71;
                v72 = v71[1];
                v47 = __OFSUB__(v72, v73);
                v74 = v72 - v73;
                if (v47)
                  goto LABEL_130;
                v64 = v39 < v74;
                goto LABEL_83;
              }
            }
            else
            {
              if (v12 != 3)
              {
                v65 = *(_QWORD *)(v11 + 32);
                v66 = *(_QWORD *)(v11 + 40);
                v47 = __OFSUB__(v66, v65);
                v58 = v66 - v65;
                v59 = v47;
                goto LABEL_77;
              }
              v38 = *(_QWORD *)(v11 + 32);
              v37 = *(_QWORD *)(v11 + 40);
              v47 = __OFSUB__(v37, v38);
              v39 = v37 - v38;
              v40 = v47;
            }
            if ((v40 & 1) != 0)
              goto LABEL_123;
            v48 = v12 - 2;
            v54 = (uint64_t *)(v34 + 16 * (v12 - 2));
            v56 = *v54;
            v55 = v54[1];
            v57 = __OFSUB__(v55, v56);
            v58 = v55 - v56;
            v59 = v57;
            if (v57)
              goto LABEL_125;
            v60 = (uint64_t *)(v34 + 16 * v36);
            v62 = *v60;
            v61 = v60[1];
            v47 = __OFSUB__(v61, v62);
            v63 = v61 - v62;
            if (v47)
              goto LABEL_127;
            if (__OFADD__(v58, v63))
              goto LABEL_129;
            if (v58 + v63 >= v39)
            {
              v64 = v39 < v63;
LABEL_83:
              if (v64)
                v36 = v48;
              goto LABEL_85;
            }
LABEL_77:
            if ((v59 & 1) != 0)
              goto LABEL_126;
            v67 = (uint64_t *)(v34 + 16 * v36);
            v69 = *v67;
            v68 = v67[1];
            v47 = __OFSUB__(v68, v69);
            v70 = v68 - v69;
            if (v47)
              goto LABEL_128;
            if (v70 < v58)
              goto LABEL_15;
LABEL_85:
            v75 = v36 - 1;
            if (v36 - 1 >= v12)
            {
              __break(1u);
LABEL_117:
              __break(1u);
LABEL_118:
              __break(1u);
LABEL_119:
              __break(1u);
LABEL_120:
              __break(1u);
LABEL_121:
              __break(1u);
LABEL_122:
              __break(1u);
LABEL_123:
              __break(1u);
LABEL_124:
              __break(1u);
LABEL_125:
              __break(1u);
LABEL_126:
              __break(1u);
LABEL_127:
              __break(1u);
LABEL_128:
              __break(1u);
LABEL_129:
              __break(1u);
LABEL_130:
              __break(1u);
LABEL_131:
              __break(1u);
LABEL_132:
              __break(1u);
LABEL_133:
              __break(1u);
LABEL_134:
              __break(1u);
LABEL_135:
              __break(1u);
LABEL_136:
              __break(1u);
LABEL_137:
              __break(1u);
LABEL_138:
              __break(1u);
LABEL_139:
              __break(1u);
LABEL_140:
              __break(1u);
              goto LABEL_141;
            }
            if (!v10)
              goto LABEL_144;
            v76 = v11;
            v77 = (uint64_t *)(v34 + 16 * v75);
            v78 = *v77;
            v79 = (_QWORD *)(v34 + 16 * v36);
            v80 = v79[1];
            result = sub_2141FD20C((double *)(v10 + 16 * *v77), (double *)(v10 + 16 * *v79), v10 + 16 * v80, v105);
            if (v1)
              goto LABEL_93;
            if (v80 < v78)
              goto LABEL_117;
            if (v36 > *(_QWORD *)(v76 + 16))
              goto LABEL_118;
            *v77 = v78;
            *(_QWORD *)(v34 + 16 * v75 + 8) = v80;
            v81 = *(_QWORD *)(v76 + 16);
            if (v36 >= v81)
              goto LABEL_119;
            v11 = v76;
            v12 = v81 - 1;
            result = (uint64_t)memmove((void *)(v34 + 16 * v36), v79 + 2, 16 * (v81 - 1 - v36));
            *(_QWORD *)(v76 + 16) = v81 - 1;
            v10 = v104;
            if (v81 <= 2)
              goto LABEL_15;
          }
        }
        v12 = 1;
LABEL_15:
        v6 = v102;
        v3 = v103;
        if (v9 >= v103)
        {
          v8 = v101;
          goto LABEL_103;
        }
      }
    }
    v8 = MEMORY[0x24BEE4AF8];
    v105 = (double *)(MEMORY[0x24BEE4AF8] + 32);
    if (v3 == 1)
    {
      v101 = MEMORY[0x24BEE4AF8];
      goto LABEL_13;
    }
    v12 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
    v11 = MEMORY[0x24BEE4AF8];
LABEL_103:
    result = v11;
    v101 = v8;
    if (v12 >= 2)
    {
      v91 = *v99;
      do
      {
        v92 = v12 - 2;
        if (v12 < 2)
          goto LABEL_132;
        if (!v91)
          goto LABEL_146;
        v93 = result;
        v94 = *(_QWORD *)(result + 32 + 16 * v92);
        v95 = *(_QWORD *)(result + 32 + 16 * (v12 - 1) + 8);
        result = sub_2141FD20C((double *)(v91 + 16 * v94), (double *)(v91 + 16 * *(_QWORD *)(result + 32 + 16 * (v12 - 1))), v91 + 16 * v95, v105);
        if (v1)
          break;
        if (v95 < v94)
          goto LABEL_133;
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          result = (uint64_t)sub_21435010C(v93);
          v93 = result;
        }
        if (v92 >= *(_QWORD *)(v93 + 16))
          goto LABEL_134;
        v96 = (_QWORD *)(v93 + 32 + 16 * v92);
        *v96 = v94;
        v96[1] = v95;
        v97 = *(_QWORD *)(v93 + 16);
        if (v12 > v97)
          goto LABEL_135;
        memmove((void *)(v93 + 32 + 16 * (v12 - 1)), (const void *)(v93 + 32 + 16 * v12), 16 * (v97 - v12));
        result = v93;
        *(_QWORD *)(v93 + 16) = v97 - 1;
        v12 = v97 - 1;
      }
      while (v97 > 2);
    }
LABEL_93:
    swift_bridgeObjectRelease();
    *(_QWORD *)(v101 + 16) = 0;
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_2141FD20C(double *__dst, double *__src, unint64_t a3, double *a4)
{
  double *v4;
  double *v6;
  double *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double *v14;
  double *v15;
  BOOL v16;
  double *v17;
  double *v18;
  double *v19;
  BOOL v20;
  int64_t v21;

  v4 = a4;
  v6 = __src;
  v7 = __dst;
  v8 = (char *)__src - (char *)__dst;
  v9 = (char *)__src - (char *)__dst + 15;
  if ((char *)__src - (char *)__dst >= 0)
    v9 = (char *)__src - (char *)__dst;
  v10 = v9 >> 4;
  v11 = a3 - (_QWORD)__src;
  v12 = a3 - (_QWORD)__src + 15;
  if ((uint64_t)(a3 - (_QWORD)__src) >= 0)
    v12 = a3 - (_QWORD)__src;
  v13 = v12 >> 4;
  if (v10 >= v12 >> 4)
  {
    if (a4 != __src || &__src[2 * v13] <= a4)
      memmove(a4, __src, 16 * v13);
    v14 = &v4[2 * v13];
    if (v7 >= v6 || v11 < 16)
      goto LABEL_40;
    v17 = (double *)(a3 - 16);
    while (1)
    {
      v18 = v17 + 2;
      v19 = v6 - 2;
      if (*(v14 - 2) >= *(v6 - 2))
      {
        v19 = v14 - 2;
        if (v18 != v14)
        {
          v14 -= 2;
          goto LABEL_37;
        }
        v20 = v17 >= v14;
        v14 -= 2;
        if (v20)
          goto LABEL_37;
      }
      else
      {
        if (v18 != v6)
        {
          v6 -= 2;
LABEL_37:
          *(_OWORD *)v17 = *(_OWORD *)v19;
          goto LABEL_38;
        }
        v20 = v17 >= v6;
        v6 -= 2;
        if (v20)
          goto LABEL_37;
      }
LABEL_38:
      if (v6 > v7)
      {
        v17 -= 2;
        if (v14 > v4)
          continue;
      }
      goto LABEL_40;
    }
  }
  if (a4 != __dst || &__dst[2 * v10] <= a4)
    memmove(a4, __dst, 16 * v10);
  v14 = &v4[2 * v10];
  if ((unint64_t)v6 < a3 && v8 >= 16)
  {
    while (*v6 < *v4)
    {
      v15 = v6;
      v16 = v7 == v6;
      v6 += 2;
      if (!v16)
        goto LABEL_16;
LABEL_17:
      v7 += 2;
      if (v4 >= v14 || (unint64_t)v6 >= a3)
        goto LABEL_19;
    }
    v15 = v4;
    v16 = v7 == v4;
    v4 += 2;
    if (v16)
      goto LABEL_17;
LABEL_16:
    *(_OWORD *)v7 = *(_OWORD *)v15;
    goto LABEL_17;
  }
LABEL_19:
  v6 = v7;
LABEL_40:
  v21 = (char *)v14 - (char *)v4 + ((char *)v14 - (char *)v4 < 0 ? 0xFuLL : 0);
  if (v6 != v4 || v6 >= (double *)((char *)v4 + (v21 & 0xFFFFFFFFFFFFFFF0)))
    memmove(v6, v4, 16 * (v21 >> 4));
  return 1;
}

uint64_t sub_2141FD418(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  CGRect *v14;
  int v15;
  CGRect *v16;
  unsigned int x_low;
  uint64_t v18;
  _BYTE v20[16];

  v4 = type metadata accessor for SgCanvasRenderer(0);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = &v20[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v5);
  v9 = &v20[-v8];
  v10 = *a2;
  v11 = sub_214323584(*a1);
  v12 = sub_214323584(v10);
  LOBYTE(v10) = sub_2143529B0(v11, v12);
  swift_release();
  swift_release();
  sub_2141FDEA0((uint64_t)a1, (uint64_t)v9, type metadata accessor for SgCanvasRenderer);
  sub_2141FDEA0((uint64_t)a2, (uint64_t)v7, type metadata accessor for SgCanvasRenderer);
  if ((v10 & 1) != 0)
  {
    v13 = *(int *)(v4 + 28);
    v14 = (CGRect *)&v9[v13];
    v15 = v9[v13 + 32];
    v16 = (CGRect *)&v7[v13];
    x_low = LOBYTE(v16[1].origin.x);
    v18 = v15 & x_low;
    if ((v15 & 1) == 0 && (x_low & 1) == 0)
      v18 = CGRectEqualToRect(*v14, *v16);
  }
  else
  {
    v18 = 0;
  }
  sub_2141DD370((uint64_t)v7, type metadata accessor for SgCanvasRenderer);
  sub_2141DD370((uint64_t)v9, type metadata accessor for SgCanvasRenderer);
  return v18;
}

uint64_t sub_2141FD584(uint64_t a1)
{
  destroy for SgScales(a1);
  return a1;
}

uint64_t type metadata accessor for SgCanvasRenderer.FixedLayout(uint64_t a1)
{
  return sub_2141FE0D4(a1, qword_253F13370);
}

uint64_t sub_2141FD5CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  void (*v19)(char *, uint64_t);
  void (*v21)(char *, uint64_t);
  uint64_t v22[2];

  v22[0] = a3;
  v22[1] = a4;
  v5 = sub_21442402C();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)v22 - v10;
  v12 = sub_2141D8BF8(&qword_253F15C88);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for SgShapeStyle();
  sub_2141E070C(a2 + *(int *)(v15 + 32), (uint64_t)v14, &qword_253F15C88);
  v16 = sub_214424C68();
  v17 = *(_QWORD *)(v16 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v14, 1, v16) == 1)
  {
    sub_2141E0750((uint64_t)v14, &qword_253F15C88);
  }
  else
  {
    v18 = sub_2141FAB24();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v14, v16);
    if ((v18 & 0x100000000) == 0)
    {
      sub_214424080();
      sub_21442408C();
      sub_2142E9A34(a2, v22[0], (uint64_t)v11);
      sub_21442405C();
      sub_214423FC0();
      v19 = *(void (**)(char *, uint64_t))(v6 + 8);
      v19(v9, v5);
      v19(v11, v5);
      return sub_21442408C();
    }
  }
  sub_2142E9A34(a2, v22[0], (uint64_t)v11);
  sub_21442405C();
  sub_214423FC0();
  v21 = *(void (**)(char *, uint64_t))(v6 + 8);
  v21(v9, v5);
  return ((uint64_t (*)(char *, uint64_t))v21)(v11, v5);
}

uint64_t sub_2141FD810(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  void (*v39)(char *, uint64_t);
  uint64_t v41;
  void (*v42)(char *, uint64_t);
  uint64_t v43[2];
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  char v51;
  _BYTE v52[48];

  v43[1] = a5;
  v46 = a3;
  v47 = a1;
  v7 = sub_21442402C();
  v44 = *(_QWORD *)(v7 - 8);
  v45 = v7;
  v8 = MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDAC7A8](v8);
  v13 = (char *)v43 - v12;
  v14 = MEMORY[0x24BDAC7A8](v11);
  v16 = (char *)v43 - v15;
  MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)v43 - v17;
  v19 = sub_2141D8BF8(&qword_253F15C88);
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)v43 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for SgShapeStyle();
  sub_2141E070C(a2 + *(int *)(v22 + 32), (uint64_t)v21, &qword_253F15C88);
  v23 = sub_214424C68();
  v24 = *(_QWORD *)(v23 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v21, 1, v23) == 1)
  {
    sub_2141E0750((uint64_t)v21, &qword_253F15C88);
LABEL_8:
    sub_2142E9A34(a2, v46, (uint64_t)v13);
    v33 = *v47;
    v34 = sub_21442405C();
    v35 = *(_QWORD *)(a4 + 16);
    if (v35)
    {
      v48 = v33;
      MEMORY[0x24BDAC7A8](v34);
      v43[-2] = a4;
      swift_retain();
      sub_214423F3C();
      swift_retain();
      sub_214423FC0();
      swift_release();
      swift_bridgeObjectRetain();
      v36 = 32;
      do
      {
        v37 = *(_OWORD *)(a4 + v36 + 16);
        v49 = *(_OWORD *)(a4 + v36);
        v50 = v37;
        v51 = *(_BYTE *)(a4 + v36 + 32);
        sub_2141FE3B0((uint64_t)&v49, (uint64_t)v52);
        sub_2141FE404((uint64_t)v52, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141FE3EC);
        sub_214423FC0();
        sub_2141FE404((uint64_t)&v49, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141EEF3C);
        v36 += 40;
        --v35;
      }
      while (v35);
      swift_release();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_214423FC0();
    }
    v38 = v45;
    v39 = *(void (**)(char *, uint64_t))(v44 + 8);
    v39(v10, v45);
    return ((uint64_t (*)(char *, uint64_t))v39)(v13, v38);
  }
  v43[0] = (uint64_t)v18;
  v25 = sub_2141FAB24();
  (*(void (**)(char *, uint64_t))(v24 + 8))(v21, v23);
  if ((v25 & 0x100000000) != 0)
    goto LABEL_8;
  v26 = v47;
  sub_214424080();
  sub_21442408C();
  v27 = v43[0];
  sub_2142E9A34(a2, v46, v43[0]);
  v28 = *v26;
  v29 = sub_21442405C();
  v30 = *(_QWORD *)(a4 + 16);
  if (v30)
  {
    v48 = v28;
    MEMORY[0x24BDAC7A8](v29);
    v43[-2] = a4;
    swift_retain();
    sub_214423F3C();
    swift_retain();
    sub_214423FC0();
    swift_release();
    swift_bridgeObjectRetain();
    v31 = 32;
    do
    {
      v32 = *(_OWORD *)(a4 + v31 + 16);
      v49 = *(_OWORD *)(a4 + v31);
      v50 = v32;
      v51 = *(_BYTE *)(a4 + v31 + 32);
      sub_2141FE3B0((uint64_t)&v49, (uint64_t)v52);
      sub_2141FE404((uint64_t)v52, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141FE3EC);
      sub_214423FC0();
      sub_2141FE404((uint64_t)&v49, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141EEF3C);
      v31 += 40;
      --v30;
    }
    while (v30);
    swift_release();
    swift_bridgeObjectRelease();
    v27 = v43[0];
  }
  else
  {
    sub_214423FC0();
  }
  v41 = v45;
  v42 = *(void (**)(char *, uint64_t))(v44 + 8);
  v42(v16, v45);
  v42((char *)v27, v41);
  return sub_21442408C();
}

uint64_t sub_2141FDCCC(uint64_t a1)
{
  uint64_t inited;
  char *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _OWORD *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;

  sub_2141D8BF8(&qword_253F15D40);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_214426EF0;
  *(_QWORD *)(inited + 32) = a1;
  swift_retain();
  v3 = sub_2141FB238(inited);
  swift_setDeallocating();
  swift_arrayDestroy();
  v4 = *((_QWORD *)v3 + 2);
  if (v4)
  {
    v26 = MEMORY[0x24BEE4AF8];
    sub_2141D3C58(0, v4, 0);
    v5 = 0;
    v6 = v26;
    do
    {
      v7 = *(_QWORD *)&v3[8 * v5 + 32];
      if (v7 >> 60 == 2)
      {
        sub_2141FE108((_QWORD *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 16), (uint64_t)&v18);
      }
      else
      {
        swift_retain();
        sub_2142E9C84(v7);
        v9 = v8;
        v10 = swift_allocObject();
        *(_OWORD *)(v10 + 16) = xmmword_214426EF0;
        *(_QWORD *)(v10 + 32) = v7;
        v19 = 0u;
        v20 = 0u;
        v21 = 0uLL;
        *(_QWORD *)&v18 = v9;
        *((_QWORD *)&v18 + 1) = v10;
      }
      v22 = v18;
      v23 = v19;
      v24 = v20;
      v25 = v21;
      v26 = v6;
      v12 = *(_QWORD *)(v6 + 16);
      v11 = *(_QWORD *)(v6 + 24);
      if (v12 >= v11 >> 1)
      {
        sub_2141D3C58((char *)(v11 > 1), v12 + 1, 1);
        v6 = v26;
      }
      ++v5;
      *(_QWORD *)(v6 + 16) = v12 + 1;
      v13 = (_OWORD *)(v6 + (v12 << 6));
      v14 = v22;
      v15 = v23;
      v16 = v25;
      v13[4] = v24;
      v13[5] = v16;
      v13[2] = v14;
      v13[3] = v15;
    }
    while (v4 != v5);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x24BEE4AF8];
  }
  return v6;
}

uint64_t sub_2141FDEA0(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_2141FDEE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = type metadata accessor for SgCanvasRenderer(0);
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  v3 = (v2 + 40) & ~v2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = v0 + v3 + *(int *)(v1 + 24);
  v5 = sub_2144240D4();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2141FDF90@<X0>(unint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v5 = *(_QWORD *)(type metadata accessor for SgCanvasRenderer(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = v6 + *(_QWORD *)(v5 + 64);
  v8 = (v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_2141FBEC8(a1, *(_QWORD *)(v2 + 16), v2 + v6, *(unsigned __int8 *)(v2 + v8 + 32), *(_QWORD *)(v2 + ((v7 + 47) & 0xFFFFFFFFFFFFF8)), a2, *(double *)(v2 + 24), *(double *)(v2 + 32), *(double *)(v2 + v8), *(double *)(v2 + v8 + 8), *(double *)(v2 + v8 + 16), *(double *)(v2 + v8 + 24));
}

unint64_t sub_2141FE010()
{
  unint64_t result;
  uint64_t v1;
  unint64_t v2;
  _QWORD v3[2];

  result = qword_253F13550;
  if (!qword_253F13550)
  {
    v1 = sub_2141D7924(&qword_253F13548);
    v2 = sub_2141FE07C();
    v3[0] = MEMORY[0x24BEE17A8];
    v3[1] = v2;
    result = MEMORY[0x2199CD934](MEMORY[0x24BEE1BD0], v1, v3);
    atomic_store(result, (unint64_t *)&qword_253F13550);
  }
  return result;
}

unint64_t sub_2141FE07C()
{
  unint64_t result;

  result = qword_253F13530;
  if (!qword_253F13530)
  {
    result = MEMORY[0x2199CD934](MEMORY[0x24BEE1790], MEMORY[0x24BEE1768]);
    atomic_store(result, (unint64_t *)&qword_253F13530);
  }
  return result;
}

uint64_t type metadata accessor for RenderParams(uint64_t a1)
{
  return sub_2141FE0D4(a1, (uint64_t *)&unk_253F12E78);
}

uint64_t sub_2141FE0D4(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_2141FE108(_QWORD *a1, uint64_t a2)
{
  initializeWithCopy for SgCompositingLayer(a2, a1);
  return a2;
}

uint64_t sub_2141FE144()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = type metadata accessor for RenderParams(0);
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v0 + 112))
    _s6Charts15AnyChartContentVwxx_0(v0 + 88);
  v3 = v0 + *(int *)(v1 + 20) + ((v2 + 136) & ~v2);
  v4 = sub_2144240D4();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  return swift_deallocObject();
}

uint64_t sub_2141FE1E0(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_2141FE224(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for RenderParams(0) - 8) + 80);
  return sub_2141FC358(a1, *(_BYTE *)(v1 + 48), v1 + 72, v1 + ((v3 + 136) & ~v3));
}

uint64_t sub_2141FE28C()
{
  uint64_t v0;

  return sub_2141FC4B0(*(_QWORD *)(v0 + 16));
}

unint64_t sub_2141FE294()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_253F15C78;
  if (!qword_253F15C78)
  {
    v1 = sub_2141D7924(&qword_253F15C80);
    v2 = sub_2141D9054(&qword_253F15C58, &qword_253F15C60, MEMORY[0x24BDF44C8]);
    result = MEMORY[0x2199CD934](MEMORY[0x24BDF4A08], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_253F15C78);
  }
  return result;
}

unint64_t sub_2141FE310()
{
  unint64_t result;

  result = qword_253F156A8;
  if (!qword_253F156A8)
  {
    result = MEMORY[0x2199CD934](&unk_21442C334, &type metadata for SgNode.ViewContent);
    atomic_store(result, (unint64_t *)&qword_253F156A8);
  }
  return result;
}

unint64_t sub_2141FE354()
{
  unint64_t result;

  result = qword_253F0FF78;
  if (!qword_253F0FF78)
  {
    result = MEMORY[0x2199CD934](MEMORY[0x24BDCFB50], MEMORY[0x24BEE0D00]);
    atomic_store(result, (unint64_t *)&qword_253F0FF78);
  }
  return result;
}

uint64_t sub_2141FE398(uint64_t a1)
{
  uint64_t v1;

  return sub_2142EEFD8(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_2141FE3B0(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(MEMORY[0x24BDF1B28] - 8) + 32))(a2, a1);
  return a2;
}

uint64_t sub_2141FE3EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  uint64_t result;

  if (a5 - 2 <= 3)
    return swift_retain();
  return result;
}

uint64_t sub_2141FE404(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(unsigned __int8 *)(a1 + 32));
  return a1;
}

uint64_t sub_2141FE43C()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v0 + 56))
    _s6Charts15AnyChartContentVwxx_0(v0 + 32);
  return swift_deallocObject();
}

uint64_t sub_2141FE470(uint64_t a1)
{
  destroy for SgCompositingLayer(a1);
  return a1;
}

uint64_t sub_2141FE4A4(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for SgShapeStyle.Shading(a2, a1);
  return a2;
}

uint64_t *sub_2141FE4E0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v9 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    v5 = *(int *)(a3 + 20);
    v6 = (char *)a1 + v5;
    v7 = (char *)a2 + v5;
    v8 = sub_2144240D4();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

uint64_t sub_2141FE568(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + *(int *)(a2 + 20);
  v3 = sub_2144240D4();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
}

_OWORD *sub_2141FE5A0(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = sub_2144240D4();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

_QWORD *sub_2141FE5FC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  a1[1] = a2[1];
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = sub_2144240D4();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

_OWORD *sub_2141FE660(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = sub_2144240D4();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

_OWORD *sub_2141FE6BC(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = sub_2144240D4();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t sub_2141FE718()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2141FE724(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1 + *(int *)(a3 + 20);
  v5 = sub_2144240D4();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, a2, v5);
}

uint64_t sub_2141FE764()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_2141FE770(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a1 + *(int *)(a4 + 20);
  v6 = sub_2144240D4();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, a2, a2, v6);
}

uint64_t sub_2141FE7B4()
{
  uint64_t result;
  unint64_t v1;

  result = sub_2144240D4();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *sub_2141FE828(_OWORD *a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  __int128 v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v10 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v10 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v5 = *((_OWORD *)a2 + 1);
    *a1 = *(_OWORD *)a2;
    a1[1] = v5;
    a1[2] = *((_OWORD *)a2 + 2);
    v6 = *(int *)(a3 + 24);
    v7 = (char *)a1 + v6;
    v8 = (uint64_t)a2 + v6;
    v9 = sub_2144240D4();
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
  }
  return v3;
}

uint64_t sub_2141FE8B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + *(int *)(a2 + 24);
  v3 = sub_2144240D4();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
}

_OWORD *sub_2141FE8F0(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  a1[2] = a2[2];
  v5 = *(int *)(a3 + 24);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = sub_2144240D4();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v6, v7, v8);
  return a1;
}

_QWORD *sub_2141FE954(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  v4 = *(int *)(a3 + 24);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = sub_2144240D4();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

_OWORD *sub_2141FE9D8(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  a1[2] = a2[2];
  v5 = *(int *)(a3 + 24);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = sub_2144240D4();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

_OWORD *sub_2141FEA3C(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  a1[2] = a2[2];
  v5 = *(int *)(a3 + 24);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = sub_2144240D4();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 40))(v6, v7, v8);
  return a1;
}

uint64_t sub_2141FEAA0()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2141FEAAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1 + *(int *)(a3 + 24);
  v5 = sub_2144240D4();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, a2, v5);
}

uint64_t sub_2141FEAEC()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_2141FEAF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a1 + *(int *)(a4 + 24);
  v6 = sub_2144240D4();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, a2, a2, v6);
}

uint64_t sub_2141FEB3C()
{
  uint64_t result;
  unint64_t v1;

  result = sub_2144240D4();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t sub_2141FEBBC()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_253F13478;
  if (!qword_253F13478)
  {
    v1 = sub_2141D7924(&qword_253F13480);
    v2[0] = sub_2141D9054(&qword_253F15B18, &qword_253F15B20, MEMORY[0x24BDEB9A8]);
    v2[1] = sub_2141FEC40();
    result = MEMORY[0x2199CD934](MEMORY[0x24BDEC550], v1, v2);
    atomic_store(result, (unint64_t *)&qword_253F13478);
  }
  return result;
}

unint64_t sub_2141FEC40()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_253F13520;
  if (!qword_253F13520)
  {
    v1 = sub_2141D7924(&qword_253F13528);
    v2 = MEMORY[0x24BDF4760];
    result = MEMORY[0x2199CD934](MEMORY[0x24BDF4A08], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_253F13520);
  }
  return result;
}

unint64_t sub_2141FECA0()
{
  unint64_t result;

  result = qword_254D69520[0];
  if (!qword_254D69520[0])
  {
    result = MEMORY[0x2199CD934](MEMORY[0x24BDEEF18], MEMORY[0x24BDEEF38]);
    atomic_store(result, qword_254D69520);
  }
  return result;
}

uint64_t sub_2141FECE4()
{
  return sub_2141FED10(&qword_253F149F8, type metadata accessor for SgCanvasRenderer.FixedLayout, (uint64_t)&unk_214427A90);
}

uint64_t sub_2141FED10(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = MEMORY[0x2199CD934](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_2141FED50(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  void (*v23)(uint64_t *, _QWORD);
  char *v24;
  void (*v25)(char *, _QWORD, uint64_t, uint64_t);
  char *v26;
  uint64_t v27;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  void (*v33)(char *, uint64_t, uint64_t);
  char *v34;
  uint64_t v35;
  char v36;
  uint64_t v37[4];

  v2 = v1;
  v31 = a1;
  v3 = sub_214423E88();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v32 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_214423EF4();
  v35 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v34 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_2141D8BF8(&qword_253F15B30);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = sub_2141D8BF8(&qword_253F15CF8);
  v11 = MEMORY[0x24BDAC7A8](v30);
  v29 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v29 - v13;
  v15 = sub_2144240D4();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v29 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SgCanvasRenderer.FixedLayout(0);
  (*(void (**)(char *, _QWORD, uint64_t))(v16 + 104))(v18, *MEMORY[0x24BDED118], v15);
  sub_2144240C8();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  v19 = (uint64_t)v29;
  v33 = *(void (**)(char *, uint64_t, uint64_t))(v35 + 16);
  v33(v29, v31, v6);
  sub_2141FED10(&qword_253F13D50, (uint64_t (*)(uint64_t))MEMORY[0x24BDEC778], MEMORY[0x24BDEC7A0]);
  sub_21442519C();
  v20 = v30;
  *(_QWORD *)(v19 + *(int *)(v30 + 36)) = v37[0];
  sub_2141E801C(v19, (uint64_t)v14, &qword_253F15CF8);
  v21 = &v14[*(int *)(v20 + 36)];
  v22 = *(_QWORD *)v21;
  sub_2144251FC();
  if (v22 == v37[0])
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v10, 1, 1, v3);
  }
  else
  {
    v31 = v2;
    while (1)
    {
      v23 = (void (*)(uint64_t *, _QWORD))sub_2144252A4();
      (*(void (**)(char *))(v4 + 16))(v10);
      v23(v37, 0);
      v24 = v34;
      v33(v34, (uint64_t)v14, v6);
      sub_214425208();
      (*(void (**)(char *, uint64_t))(v35 + 8))(v24, v6);
      v25 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v4 + 56);
      v25(v10, 0, 1, v3);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v10, 1, v3) == 1)
        break;
      v30 = (uint64_t)v25;
      v26 = v32;
      (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v32, v10, v3);
      sub_214424C8C();
      LOBYTE(v37[0]) = 0;
      v36 = 0;
      sub_214423E70();
      (*(void (**)(char *, uint64_t))(v4 + 8))(v26, v3);
      v27 = *(_QWORD *)v21;
      sub_2144251FC();
      if (v27 == v37[0])
      {
        ((void (*)(char *, uint64_t, uint64_t, uint64_t))v30)(v10, 1, 1, v3);
        return sub_2141E0750((uint64_t)v14, &qword_253F15CF8);
      }
    }
  }
  return sub_2141E0750((uint64_t)v14, &qword_253F15CF8);
}

uint64_t sub_2141FF1AC(uint64_t a1)
{
  return sub_2141FE398(a1);
}

uint64_t sub_2141FF1C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  BOOL v12;
  uint64_t result;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  BOOL v17;

  if (*(_QWORD *)(a3 + 16))
  {
    sub_214425874();
    sub_214424F14();
    v6 = sub_2144258B0();
    v7 = -1 << *(_BYTE *)(a3 + 32);
    v8 = v6 & ~v7;
    v9 = a3 + 56;
    if (((*(_QWORD *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
    {
      v10 = *(_QWORD *)(a3 + 48);
      v11 = (_QWORD *)(v10 + 16 * v8);
      v12 = *v11 == a1 && v11[1] == a2;
      if (v12 || (sub_214425790() & 1) != 0)
        return 1;
      v14 = ~v7;
      v15 = (v8 + 1) & v14;
      if (((*(_QWORD *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) != 0)
      {
        while (1)
        {
          v16 = (_QWORD *)(v10 + 16 * v15);
          v17 = *v16 == a1 && v16[1] == a2;
          if (v17 || (sub_214425790() & 1) != 0)
            break;
          result = 0;
          v15 = (v15 + 1) & v14;
          if (((*(_QWORD *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) == 0)
            return result;
        }
        return 1;
      }
    }
  }
  return 0;
}

BOOL sub_2141FF2F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 result;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  if (!*(_QWORD *)(a2 + 16))
    return 0;
  v4 = sub_214425868();
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = v4 & ~v5;
  v7 = a2 + 56;
  if (((*(_QWORD *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
    return 0;
  v8 = *(_QWORD *)(a2 + 48);
  if (*(_QWORD *)(v8 + 8 * v6) == a1)
    return 1;
  v10 = ~v5;
  v11 = (v6 + 1) & v10;
  if (((*(_QWORD *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) == 0)
    return 0;
  do
  {
    v12 = *(_QWORD *)(v8 + 8 * v11);
    result = v12 == a1;
    if (v12 == a1)
      break;
    v11 = (v11 + 1) & v10;
  }
  while (((*(_QWORD *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  return result;
}

void sub_2141FF3BC(uint64_t a1)
{
  char *v2;
  _BYTE v3[144];

  swift_beginAccess();
  type metadata accessor for ChartContentRenderContext.Environment(0);
  sub_2141EDFD8(a1, (uint64_t)v3);
  v2 = (char *)&loc_2141FF460 + *((int *)qword_2141FFC70 + sub_2141EF1D0((uint64_t)v3));
  __asm { BR              X10 }
}

uint64_t sub_2141FF470()
{
  uint64_t *v0;
  double *v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  char v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t result;
  uint64_t v13;
  _QWORD v14[7];
  uint64_t v15;
  _BYTE v16[72];
  _QWORD v17[54];

  v4 = sub_2141EF754((uint64_t)&v15);
  v5 = *(_QWORD *)(v4 + 32);
  v6 = *(_QWORD *)(v4 + 40);
  v7 = *(_OWORD *)(v4 + 16);
  *(_OWORD *)(v2 + 72) = *(_OWORD *)v4;
  *(_OWORD *)(v2 + 88) = v7;
  v8 = *(_BYTE *)(v4 + 48);
  sub_21421CC0C((uint64_t)v17, (uint64_t)v16);
  v14[0] = v17[3];
  swift_retain();
  sub_2141F92E8((uint64_t)v14);
  sub_21421CE7C((uint64_t)v16);
  sub_2141DD140(v5, v6, v8);
  v9 = sub_21421BBDC(v3, v1, v5, v6, v8);
  v11 = v10;
  swift_release();
  sub_21421CC48((uint64_t)v16);
  sub_2141F9244((uint64_t)v14);
  result = sub_2141EF1B0(v5, v6, v8);
  if ((v11 & 1) != 0)
    v13 = 0x7FF8000000000000;
  else
    v13 = v9;
  *v0 = v13;
  v0[1] = v13;
  v0[2] = v13;
  v0[3] = v13;
  v0[4] = v13;
  v0[5] = v13;
  return result;
}

uint64_t sub_2141FFC88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  __int16 v17;
  uint64_t result;
  _BYTE v19[48];
  _BYTE v20[24];
  uint64_t v21;
  uint64_t v22;
  char v23;

  *(_BYTE *)(a2 + 41) = 0;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0x3FF0000000000000;
  v4 = type metadata accessor for SgShapeStyle();
  v5 = a2 + *(int *)(v4 + 32);
  v6 = sub_214424C68();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  v7 = a2 + *(int *)(v4 + 36);
  *(_QWORD *)v7 = 0;
  *(_WORD *)(v7 + 8) = 0;
  sub_2141E070C(a1, (uint64_t)v19, &qword_253F14460);
  if (v19[40] == 255)
  {
    v21 = MEMORY[0x24BDECFA0];
    v22 = MEMORY[0x24BDECF88];
    v23 = 1;
    sub_2141E0750((uint64_t)v19, &qword_253F14460);
  }
  else
  {
    sub_21421D060((uint64_t)v19, (uint64_t)v20);
  }
  sub_21421D060((uint64_t)v20, a2);
  *(_BYTE *)(a2 + 41) = *(_BYTE *)(a1 + 41);
  if (*(_QWORD *)(a1 + 72))
  {
    v8 = *(_QWORD *)(a1 + 80);
    v9 = *(_QWORD *)(a1 + 64);
    v11 = *(_DWORD *)(a1 + 56);
    v10 = *(unsigned int *)(a1 + 60);
    v12 = *(_QWORD *)(a1 + 72);
    v13 = *(_QWORD *)(a1 + 48);
  }
  else
  {
    if (qword_253F13350 != -1)
      swift_once();
    v13 = xmmword_253F1C9E0;
    v11 = DWORD2(xmmword_253F1C9E0);
    v10 = HIDWORD(xmmword_253F1C9E0);
    v9 = qword_253F1C9F0;
    v12 = qword_253F1C9F8;
    v8 = qword_253F1CA00;
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a2 + 48) = v13;
  *(_QWORD *)(a2 + 56) = v11 | (unint64_t)(v10 << 32);
  *(_QWORD *)(a2 + 64) = v9;
  *(_QWORD *)(a2 + 72) = v12;
  *(_QWORD *)(a2 + 80) = v8;
  v14 = (int *)type metadata accessor for ChartContentRenderContext.Environment(0);
  *(_QWORD *)(a2 + 88) = *(_QWORD *)(a1 + v14[13]);
  sub_21421D09C(a1 + v14[14], v5);
  v15 = a1 + v14[15];
  v16 = *(_QWORD *)v15;
  v17 = *(_WORD *)(v15 + 8);
  swift_retain();
  sub_2141DD370(a1, type metadata accessor for ChartContentRenderContext.Environment);
  result = swift_release();
  *(_QWORD *)v7 = v16;
  *(_WORD *)(v7 + 8) = v17;
  return result;
}

uint64_t sub_2141FFEA4(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  return static ChartContent._layoutChartContent(_:_:)(a1, a2, a3, a4);
}

uint64_t static ChartContent._layoutChartContent(_:_:)(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t AssociatedConformanceWitness;
  __int128 v13;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v10 = (char *)&v13 - v9;
  (*(void (**)(uint64_t, uint64_t))(a4 + 24))(a3, a4);
  v13 = *a2;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(char *, __int128 *, uint64_t, uint64_t))(AssociatedConformanceWitness + 32))(v10, &v13, AssociatedTypeWitness, AssociatedConformanceWitness);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, AssociatedTypeWitness);
}

uint64_t sub_2141FFFA8@<X0>(char *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  return static ChartContent._renderChartContent(_:_:)(a1, a2, a3, a4);
}

uint64_t static ChartContent._renderChartContent(_:_:)@<X0>(char *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char v11;
  uint64_t v12;
  uint64_t AssociatedConformanceWitness;
  _QWORD v15[2];
  _BYTE v16[8];
  uint64_t v17;

  v15[1] = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v10 = (char *)v15 - v9;
  v11 = *a1;
  v12 = *((_QWORD *)a1 + 1);
  (*(void (**)(uint64_t, uint64_t))(a3 + 24))(a2, a3);
  v16[0] = v11;
  v17 = v12;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(char *, _BYTE *, uint64_t, uint64_t))(AssociatedConformanceWitness + 40))(v10, v16, AssociatedTypeWitness, AssociatedConformanceWitness);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, AssociatedTypeWitness);
}

uint64_t dispatch thunk of ChartContent.body.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of static ChartContent._layoutChartContent(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 32))();
}

uint64_t dispatch thunk of static ChartContent._renderChartContent(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 40))();
}

uint64_t dispatch thunk of static ChartContent._makeChartContent(content:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 48))();
}

uint64_t dispatch thunk of static ChartContent._chartContentCount(inputs:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t sub_214200110(uint64_t a1)
{
  return static ChartContent._chartContentCount(inputs:)(a1);
}

uint64_t destroy for _ChartContentLayoutInputs()
{
  swift_release();
  return swift_bridgeObjectRelease();
}

_QWORD *_s6Charts25_ChartContentLayoutInputsVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for _ChartContentLayoutInputs(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for _ChartContentLayoutInputs(_QWORD *a1, _OWORD *a2, uint64_t a3)
{
  return sub_214209DA4(a1, a2, a3, (void (*)(_QWORD))MEMORY[0x24BEE4EF8]);
}

ValueMetadata *type metadata accessor for _ChartContentLayoutInputs()
{
  return &type metadata for _ChartContentLayoutInputs;
}

uint64_t initializeBufferWithCopyOfBuffer for _ChartContentRenderInputs(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  return a1;
}

uint64_t destroy for _ChartContentRenderInputs()
{
  return swift_release();
}

uint64_t assignWithCopy for _ChartContentRenderInputs(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for _ChartContentRenderInputs(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for _ChartContentRenderInputs(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for _ChartContentRenderInputs(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for _ChartContentRenderInputs()
{
  return &type metadata for _ChartContentRenderInputs;
}

_QWORD *initializeBufferWithCopyOfBuffer for SgNode(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  return a1;
}

uint64_t destroy for SgNode()
{
  return swift_release();
}

_QWORD *assignWithCopy for SgNode(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  return a1;
}

_QWORD *initializeWithTake for SgNode(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

_QWORD *assignWithTake for SgNode(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for SgNode(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x72 && *(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 114);
  v3 = ((*(_QWORD *)a1 >> 60) & 0x8F | (16 * (*(_QWORD *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x71)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for SgNode(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3;

  if (a2 > 0x71)
  {
    *(_QWORD *)result = a2 - 114;
    if (a3 >= 0x72)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x72)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
    {
      v3 = (-a2 >> 4) & 7 | (8 * (-a2 & 0x7F));
      *(_QWORD *)result = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for _ChartContentRenderOutputs()
{
  return &type metadata for _ChartContentRenderOutputs;
}

unint64_t sub_2142004BC@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_21421C130(*a1);
  *a2 = result;
  return result;
}

void sub_2142004E4(_QWORD *a1@<X8>)
{
  unsigned __int8 *v1;

  *a1 = *v1;
}

BOOL sub_2142004F0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t sub_214200508(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v9;
  uint64_t v10;

  v2 = v1;
  sub_214425880();
  sub_214425880();
  sub_214425880();
  v4 = *(unsigned __int8 *)(v2 + 24);
  if (v4 < 0xFC)
  {
    v5 = *(_QWORD *)(v2 + 8);
    v6 = *(_QWORD *)(v2 + 16);
    sub_21442588C();
    sub_214425880();
    if ((v4 & 0x80) != 0)
    {
      sub_2143FD828();
    }
    else
    {
      sub_2141DD14C(v5, v6, v4);
      sub_2143FD1BC(a1, v5, v6, v4);
    }
    sub_2141EF1BC(v5, v6, v4);
  }
  else
  {
    sub_21442588C();
  }
  v7 = *(unsigned __int8 *)(v2 + 48);
  if (v7 > 0xFB)
    return sub_21442588C();
  v10 = *(_QWORD *)(v2 + 32);
  v9 = *(_QWORD *)(v2 + 40);
  sub_21442588C();
  sub_214425880();
  if ((v7 & 0x80) != 0)
  {
    sub_2143FD828();
  }
  else
  {
    sub_2141DD14C(v10, v9, v7);
    sub_2143FD1BC(a1, v10, v9, v7);
  }
  return sub_2141EF1BC(v10, v9, v7);
}

uint64_t sub_21420066C()
{
  _BYTE v1[72];

  sub_214425874();
  sub_214200508((uint64_t)v1);
  return sub_2144258B0();
}

uint64_t sub_2142006AC()
{
  _BYTE v1[72];

  sub_214425874();
  sub_214200508((uint64_t)v1);
  return sub_2144258B0();
}

BOOL sub_2142006E4(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  _OWORD v5[3];
  char v6;
  _OWORD v7[3];
  char v8;

  v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  v5[2] = *(_OWORD *)(a1 + 32);
  v6 = *(_BYTE *)(a1 + 48);
  v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  v7[2] = *(_OWORD *)(a2 + 32);
  v8 = *(_BYTE *)(a2 + 48);
  return sub_214219D1C((unsigned __int8 *)v5, (unsigned __int8 *)v7);
}

uint64_t sub_21420073C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __int128 v4;
  uint64_t v5;
  char v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  int v14;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  v4 = 0uLL;
  if (result == 1)
  {
    v5 = *(_QWORD *)(v2 + 112);
    if (v5)
    {
      v6 = *(_BYTE *)(v2 + 168);
      v7 = *(_OWORD *)(v2 + 136);
      v17 = v7;
      v18 = *(_OWORD *)(v2 + 152);
      v9 = *(_QWORD *)(v2 + 120);
      v8 = *(_QWORD *)(v2 + 128);
      v11 = *(_QWORD *)(v2 + 96);
      v10 = *(_QWORD *)(v2 + 104);
      v12 = *(_QWORD *)(v2 + 88);
      goto LABEL_7;
    }
  }
  else
  {
    if ((_BYTE)result)
      goto LABEL_12;
    v5 = *(_QWORD *)(v2 + 24);
    if (v5)
    {
      v6 = *(_BYTE *)(v2 + 80);
      v7 = *(_OWORD *)(v2 + 48);
      v17 = v7;
      v18 = *(_OWORD *)(v2 + 64);
      v9 = *(_QWORD *)(v2 + 32);
      v8 = *(_QWORD *)(v2 + 40);
      v11 = *(_QWORD *)(v2 + 8);
      v10 = *(_QWORD *)(v2 + 16);
      v12 = *(_QWORD *)v2;
LABEL_7:
      v13 = v7;
      sub_2141DD130(v12, v11, v10 & 1);
      swift_bridgeObjectRetain();
      result = sub_2141DD140(v9, v8, v13);
LABEL_14:
      v4 = v17;
      v16 = v18;
      goto LABEL_15;
    }
  }
  v14 = *(unsigned __int8 *)(v2 + 257);
  if (v14 != 8 && v14 == result)
  {
    v12 = *(_QWORD *)(v2 + 176);
    v11 = *(_QWORD *)(v2 + 184);
    v10 = *(_QWORD *)(v2 + 192);
    v5 = *(_QWORD *)(v2 + 200);
    v9 = *(_QWORD *)(v2 + 208);
    v8 = *(_QWORD *)(v2 + 216);
    v17 = *(_OWORD *)(v2 + 224);
    v18 = *(_OWORD *)(v2 + 240);
    v6 = *(_BYTE *)(v2 + 256);
    result = sub_2141EF260(v12, v11, v10, v5, v9, v8, v17);
    goto LABEL_14;
  }
LABEL_12:
  v12 = 0;
  v11 = 0;
  v10 = 0;
  v5 = 0;
  v9 = 0;
  v8 = 0;
  v6 = 0;
  v16 = 0uLL;
LABEL_15:
  *(_QWORD *)a2 = v12;
  *(_QWORD *)(a2 + 8) = v11;
  *(_QWORD *)(a2 + 16) = v10;
  *(_QWORD *)(a2 + 24) = v5;
  *(_QWORD *)(a2 + 32) = v9;
  *(_QWORD *)(a2 + 40) = v8;
  *(_OWORD *)(a2 + 48) = v4;
  *(_OWORD *)(a2 + 64) = v16;
  *(_BYTE *)(a2 + 80) = v6;
  return result;
}

__n128 sub_2142008A0@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  __n128 result;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  char v45;

  LODWORD(v5) = *(unsigned __int8 *)(a1 + 1);
  v7 = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 40);
  v8 = *(_BYTE *)(a1 + 48);
  if ((_DWORD)v5 == 1)
  {
    v42 = *(_QWORD *)(a1 + 40);
    v9 = *(_QWORD *)(v2 + 8);
    v10 = *(_QWORD *)(v2 + 16);
    v11 = *(_QWORD *)(v2 + 24);
    v13 = *(_QWORD *)(v2 + 32);
    v12 = *(_QWORD *)(v2 + 40);
    v14 = *(_QWORD *)(v2 + 48);
    v45 = 1;
    v44 = *(_QWORD *)(a1 + 32);
    v43 = *(_BYTE *)(a1 + 48);
    if (v11)
    {
      v37 = *(_QWORD *)(v2 + 32);
      v33 = v10 & 1;
      v39 = *(_QWORD *)(v2 + 40);
      v8 = *(_QWORD *)(v2 + 48);
      v31 = *(_QWORD *)v2;
      v32 = *(_QWORD *)(v2 + 8);
      v15 = *(_QWORD *)v2;
      v16 = v10;
      v17 = v12;
LABEL_4:
      sub_21421CBB0(a1, (void (*)(uint64_t, uint64_t, uint64_t))sub_2141DD164);
      sub_2141EF260(v15, v9, v16, v11, v13, v17, v14);
      v7 = v37;
      v5 = v39;
      sub_2141DD140(v37, v39, v8);
      sub_2141ED0BC(v31, v32, v33);
LABEL_9:
      swift_bridgeObjectRelease();
      sub_2141EF1B0(v7, v5, v8);
LABEL_13:
      sub_2141EF1BC(v44, v42, v43);
      v6 = v5;
      LOBYTE(v5) = v45;
      goto LABEL_14;
    }
    if (!*(_BYTE *)(v2 + 257) && *(_QWORD *)(v2 + 200))
    {
      v39 = *(_QWORD *)(v2 + 216);
      v37 = *(_QWORD *)(v2 + 208);
      v28 = *(_DWORD *)(v2 + 192);
      v29 = *(_QWORD *)(v2 + 176);
      v30 = *(_QWORD *)(v2 + 184);
      v8 = *(_BYTE *)(v2 + 224);
      v15 = *(_QWORD *)v2;
      v31 = v29;
      v32 = v30;
      v16 = v10;
      v33 = v28 & 1;
      v17 = v12;
      sub_2141DD130(v29, v30, v28 & 1);
      swift_bridgeObjectRetain();
      sub_2141DD140(v37, v39, v8);
      goto LABEL_4;
    }
    sub_21421CBB0(a1, (void (*)(uint64_t, uint64_t, uint64_t))sub_2141DD164);
LABEL_12:
    v7 = 0;
    v5 = 0;
    v8 = -4;
    goto LABEL_13;
  }
  sub_21421CBB0(a1, (void (*)(uint64_t, uint64_t, uint64_t))sub_2141DD164);
  if (!(_DWORD)v5)
  {
    v42 = v6;
    v18 = *(_QWORD *)(v2 + 88);
    v19 = *(_QWORD *)(v2 + 96);
    v20 = *(_QWORD *)(v2 + 104);
    v21 = *(_QWORD *)(v2 + 112);
    v22 = *(_QWORD *)(v2 + 120);
    v23 = *(_QWORD *)(v2 + 128);
    v24 = *(_QWORD *)(v2 + 136);
    v45 = 0;
    v44 = v7;
    v43 = v8;
    if (v21)
    {
      LOBYTE(v41) = v20 & 1;
      v7 = *(_QWORD *)(v2 + 120);
      v5 = *(_QWORD *)(v2 + 128);
      v8 = *(_QWORD *)(v2 + 136);
      v38 = *(_QWORD *)(v2 + 88);
      v40 = *(_QWORD *)(v2 + 96);
    }
    else
    {
      if (*(_BYTE *)(v2 + 257) != 1 || !*(_QWORD *)(v2 + 200))
        goto LABEL_12;
      v7 = *(_QWORD *)(v2 + 208);
      v5 = *(_QWORD *)(v2 + 216);
      v8 = *(_BYTE *)(v2 + 224);
      v35 = *(_QWORD *)(v2 + 96);
      v36 = *(_QWORD *)(v2 + 88);
      v38 = *(_QWORD *)(v2 + 176);
      v40 = *(_QWORD *)(v2 + 184);
      v34 = *(_QWORD *)(v2 + 104);
      v41 = *(_DWORD *)(v2 + 192) & 1;
      sub_2141DD130(v38, v40, *(_BYTE *)(v2 + 192) & 1);
      swift_bridgeObjectRetain();
      sub_2141DD140(v7, v5, v8);
      LOBYTE(v20) = v34;
      v19 = v35;
      v18 = v36;
    }
    sub_2141EF260(v18, v19, v20, v21, v22, v23, v24);
    sub_2141DD140(v7, v5, v8);
    sub_2141ED0BC(v38, v40, v41);
    goto LABEL_9;
  }
LABEL_14:
  v25 = *(_BYTE *)(a1 + 2);
  v26 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)a2 = *(_BYTE *)a1;
  *(_BYTE *)(a2 + 1) = v5;
  *(_BYTE *)(a2 + 2) = v25;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  *(_BYTE *)(a2 + 24) = v26;
  *(_QWORD *)(a2 + 32) = v7;
  *(_QWORD *)(a2 + 40) = v6;
  *(_BYTE *)(a2 + 48) = v8;
  return result;
}

uint64_t sub_214200BC0(uint64_t result)
{
  uint64_t v1;
  char *v2;
  _BYTE v3[144];

  if (*(_BYTE *)(v1 + 257) == 8)
  {
    sub_2141EDFD8(result, (uint64_t)v3);
    v2 = (char *)&loc_214200C0C + 4 * byte_214427B90[sub_2141EF1D0((uint64_t)v3)];
    __asm { BR              X10 }
  }
  return result;
}

unint64_t sub_214200CB8(unint64_t result, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  float64x2_t v13;
  float64x2_t v14;
  int8x16_t v15;
  float64x2_t v16;
  int8x16_t v17;
  uint64_t v18;

  v4 = v3;
  v5 = result;
  if (a3)
  {
    if (a3 == 1)
    {
      if ((~result & 0x7FF0000000000000) != 0)
      {
        if ((*(_BYTE *)(v3 + 40) & 1) != 0)
        {
          *(_QWORD *)(v3 + 24) = result;
          *(_QWORD *)(v3 + 32) = result;
        }
        else
        {
          v13 = *(float64x2_t *)(v3 + 24);
          v14 = (float64x2_t)vdupq_n_s64(result);
          v15.i64[0] = vmovn_s64(vcgtq_f64(v14, v13)).i32[0];
          v15.i64[1] = vmovn_s64(vcgeq_f64(v13, v14)).i32[1];
          *(int8x16_t *)(v3 + 24) = vbslq_s8(v15, (int8x16_t)v13, (int8x16_t)v14);
        }
        *(_BYTE *)(v3 + 40) = 0;
      }
    }
    else
    {
      v7 = *(_QWORD *)(v3 + 56);
      swift_bridgeObjectRetain();
      if ((sub_2141FF1C0(v5, a2, v7) & 1) != 0)
      {
        return sub_2141E60B8(v5, a2, 2);
      }
      else
      {
        swift_bridgeObjectRetain();
        sub_21420FCB4(&v18, v5, a2);
        swift_bridgeObjectRelease();
        v8 = *(_QWORD *)(v3 + 48);
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          result = (unint64_t)sub_214221AF8(0, *(_QWORD *)(v8 + 16) + 1, 1, (char *)v8);
          v8 = result;
        }
        v10 = *(_QWORD *)(v8 + 16);
        v9 = *(_QWORD *)(v8 + 24);
        v11 = v10 + 1;
        if (v10 >= v9 >> 1)
        {
          result = (unint64_t)sub_214221AF8((char *)(v9 > 1), v10 + 1, 1, (char *)v8);
          v11 = v10 + 1;
          v8 = result;
        }
        *(_QWORD *)(v8 + 16) = v11;
        v12 = v8 + 16 * v10;
        *(_QWORD *)(v12 + 32) = v5;
        *(_QWORD *)(v12 + 40) = a2;
        *(_QWORD *)(v4 + 48) = v8;
      }
    }
  }
  else if ((~result & 0x7FF0000000000000) != 0)
  {
    if ((*(_BYTE *)(v3 + 16) & 1) != 0)
    {
      *(_QWORD *)v3 = result;
      *(_QWORD *)(v3 + 8) = result;
    }
    else
    {
      v16 = (float64x2_t)vdupq_n_s64(result);
      v17.i64[0] = vmovn_s64(vcgtq_f64(v16, *(float64x2_t *)v3)).i32[0];
      v17.i64[1] = vmovn_s64(vcgeq_f64(*(float64x2_t *)v3, v16)).i32[1];
      *(int8x16_t *)v3 = vbslq_s8(v17, *(int8x16_t *)v3, (int8x16_t)v16);
    }
    *(_BYTE *)(v3 + 16) = 0;
  }
  return result;
}

uint64_t sub_214200E80(uint64_t a1)
{
  swift_retain();
  sub_2141ED570(a1, (uint64_t (*)(void))sub_21421CD84);
  return swift_release();
}

uint64_t sub_214200F14()
{
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ChartContentIDContext()
{
  return objc_opt_self();
}

void sub_214200F58(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  __asm { BR              X10 }
}

uint64_t sub_214200F94()
{
  char v0;
  unint64_t v1;
  uint64_t v2;

  swift_beginAccess();
  sub_214200CB8(v1, v2, v0);
  return swift_endAccess();
}

void sub_214201010(uint64_t a1, uint64_t a2, char a3)
{
  __asm { BR              X10 }
}

uint64_t sub_214201048()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_beginAccess();
  if (*(unsigned __int8 *)(v1 + 89) << 8 == 512)
  {
    nullsub_1(v2, v0);
    *(_WORD *)(v1 + 88) = sub_214400834() & 0x1FF;
  }
  return swift_endAccess();
}

uint64_t sub_2142012A0(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  int v7;

  v6 = sub_214372580(a2, a4, a5);
  if (*(_QWORD *)(v6 + 16))
  {
    swift_beginAccess();
    swift_beginAccess();
    swift_beginAccess();
    swift_beginAccess();
    swift_beginAccess();
    swift_beginAccess();
    swift_beginAccess();
    swift_beginAccess();
    v7 = *(char *)(v6 + 80);
    if ((v7 & 0x80000000) == 0)
      __asm { BR              X8 }
    if ((v7 & 1) == 0)
      __asm { BR              X8 }
    __asm { BR              X8 }
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_21420233C(uint64_t a1, _WORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  nullsub_1(a3, a4);
  result = sub_214400834();
  *a2 = result & 0x1FF;
  return result;
}

void sub_214202388(uint64_t a1)
{
  char *v1;
  _BYTE v2[568];

  sub_2141EDFD8(a1, (uint64_t)v2);
  v1 = (char *)&loc_2142023D8 + dword_2142030EC[sub_2141EF1D0((uint64_t)v2)];
  __asm { BR              X10 }
}

uint64_t sub_2142023E8()
{
  uint64_t v0;
  unsigned __int8 v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  __n128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  __n128 v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  double v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE *v44;
  __n128 v45[6];
  __n128 v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  _BYTE v50[24];
  __n128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __n128 v56;
  __int128 v57;
  uint64_t v58;

  v3 = sub_2141EF754((uint64_t)&v48);
  v54 = *(_OWORD *)v3;
  v5 = *(__n128 *)(v3 + 32);
  v4 = *(_OWORD *)(v3 + 48);
  v6 = *(_OWORD *)(v3 + 16);
  v58 = *(_QWORD *)(v3 + 64);
  v56 = v5;
  v57 = v4;
  v55 = v6;
  v7 = *(_OWORD *)(v3 + 16);
  v52 = *(_OWORD *)v3;
  v53 = v7;
  sub_21421CC0C((uint64_t)&v52, (uint64_t)v50);
  v49 = *((_QWORD *)&v53 + 1);
  sub_21421CDBC(&v56, &v51);
  sub_21421CDBC(&v51, (__n128 *)(v2 - 128));
  v8 = *(char *)(v2 - 112);
  if ((v8 & 0x80000000) != 0)
  {
    *(_BYTE *)(v2 - 112) &= ~0x80u;
    sub_21421CEAC((__n128 *)(v2 - 128), v45);
    sub_21421CEAC(v45, &v46);
    v15 = v47;
    v16 = v46;
    sub_21421CE7C((uint64_t)v50);
    sub_2141F92E8((uint64_t)&v49);
    if ((v15 & 1) != 0)
    {
      sub_214200F58(v16.n128_i64[0], 0, 1, v1);
      v11 = v16.n128_i64[1];
      v12 = 0;
      v13 = 1;
    }
    else
    {
      sub_214200F58(v16.n128_i64[0], 0, 0, v1);
      v11 = v16.n128_i64[1];
      v12 = 0;
      v13 = 0;
    }
    v14 = v1;
  }
  else
  {
    v9 = *(_QWORD *)(v2 - 128);
    v10 = *(_QWORD *)(v2 - 120);
    sub_21421CE7C((uint64_t)v50);
    sub_2141F92E8((uint64_t)&v49);
    sub_21421D0FC((uint64_t)&v51);
    v11 = v9;
    v12 = v10;
    v13 = v8;
    v14 = v1;
  }
  sub_214200F58(v11, v12, v13, v14);
  sub_214201010(*((uint64_t *)&v57 + 1), v58, v1);
  sub_21421CC48((uint64_t)v50);
  sub_2141F9244((uint64_t)&v49);
  sub_21421CDF8((uint64_t)&v51);
  result = swift_beginAccess();
  v18 = *(_QWORD *)(v0 + 800);
  v19 = *(_QWORD *)(v0 + 808);
  v20 = *(_QWORD *)(v0 + 816);
  v21 = *(unint64_t *)(v0 + 832);
  v22 = *(uint64_t *)(v0 + 840);
  v23 = *(_QWORD *)(v0 + 848);
  v24 = *(unsigned __int8 *)(v0 + 881);
  if (v1 == 1)
  {
    if (*(_QWORD *)(v0 + 736))
    {
      v18 = *(_QWORD *)(v0 + 712);
      v19 = *(_QWORD *)(v0 + 720);
      v21 = *(unint64_t *)(v0 + 744);
      v22 = *(uint64_t *)(v0 + 752);
      v23 = *(_QWORD *)(v0 + 760);
      v43 = *(_QWORD *)(v0 + 768);
      v27 = *(_QWORD *)(v0 + 776);
      v26 = *(_QWORD *)(v0 + 728) & 1;
      sub_2141DD130(v18, v19, *(_QWORD *)(v0 + 728) & 1);
      swift_bridgeObjectRetain();
      sub_2141DD140(v21, v22, v23);
      if ((v23 & 0x80) != 0)
      {
LABEL_21:
        v28 = v21;
        v29 = v22;
        v30 = v21 & 0x7FF0000000000000;
        if ((v23 & 1) != 0)
        {
          swift_beginAccess();
          if (v30 != 0x7FF0000000000000)
          {
            if ((v44[24] & 1) != 0)
            {
              v32 = *(double *)&v21;
            }
            else
            {
              v32 = *(double *)(v0 + 272);
              if (v32 >= *(double *)&v21)
                v32 = *(double *)&v21;
              if (*(double *)(v0 + 280) >= *(double *)&v21)
                v28 = *(_QWORD *)(v0 + 280);
            }
            *(double *)(v0 + 272) = v32;
            *(_QWORD *)(v0 + 280) = v28;
            v44[24] = 0;
          }
          if ((~v22 & 0x7FF0000000000000) != 0)
          {
            if ((v44[24] & 1) != 0)
            {
              v39 = *(double *)&v22;
            }
            else
            {
              v39 = *(double *)(v0 + 272);
              if (v39 >= *(double *)&v22)
                v39 = *(double *)&v22;
              if (*(double *)(v0 + 280) >= *(double *)&v22)
                v29 = *(_QWORD *)(v0 + 280);
            }
            *(double *)(v0 + 272) = v39;
            *(_QWORD *)(v0 + 280) = v29;
            v44[24] = 0;
          }
        }
        else
        {
          swift_beginAccess();
          if (v30 != 0x7FF0000000000000)
          {
            if ((*v44 & 1) != 0)
            {
              v31 = *(double *)&v21;
            }
            else
            {
              v31 = *(double *)(v0 + 248);
              if (v31 >= *(double *)&v21)
                v31 = *(double *)&v21;
              if (*(double *)(v0 + 256) >= *(double *)&v21)
                v28 = *(_QWORD *)(v0 + 256);
            }
            *(double *)(v0 + 248) = v31;
            *(_QWORD *)(v0 + 256) = v28;
            *v44 = 0;
          }
          if ((~v22 & 0x7FF0000000000000) != 0)
          {
            if ((*v44 & 1) != 0)
            {
              v38 = *(double *)&v22;
            }
            else
            {
              v38 = *(double *)(v0 + 248);
              if (v38 >= *(double *)&v22)
                v38 = *(double *)&v22;
              if (*(double *)(v0 + 256) >= *(double *)&v22)
                v29 = *(_QWORD *)(v0 + 256);
            }
            *(double *)(v0 + 248) = v38;
            *(_QWORD *)(v0 + 256) = v29;
            *v44 = 0;
          }
        }
        sub_2141DD130(v18, v19, v26);
        swift_bridgeObjectRetain();
        sub_2141DD140(v21, v22, v23);
        goto LABEL_79;
      }
LABEL_14:
      swift_beginAccess();
      sub_2141DD130(v18, v19, v26);
      swift_bridgeObjectRetain();
      sub_2141DD140(v21, v22, v23);
      sub_2141DD140(v21, v22, v23);
      sub_214200CB8(v21, v22, v23);
      swift_endAccess();
      sub_2141EF1B0(v21, v22, v23);
LABEL_79:
      swift_beginAccess();
      if (*(unsigned __int8 *)(v0 + 313) << 8 == 512)
      {
        nullsub_1(v43, v27);
        *(_WORD *)(v0 + 312) = sub_214400834() & 0x1FF;
      }
      goto LABEL_94;
    }
  }
  else
  {
    if (v1)
      return result;
    if (*(_QWORD *)(v0 + 648))
    {
      v18 = *(_QWORD *)(v0 + 624);
      v19 = *(_QWORD *)(v0 + 632);
      v21 = *(unint64_t *)(v0 + 656);
      v22 = *(uint64_t *)(v0 + 664);
      v23 = *(_QWORD *)(v0 + 672);
      v42 = *(_QWORD *)(v0 + 680);
      v25 = *(_QWORD *)(v0 + 688);
      v26 = *(_QWORD *)(v0 + 640) & 1;
      sub_2141DD130(v18, v19, *(_QWORD *)(v0 + 640) & 1);
      swift_bridgeObjectRetain();
      sub_2141DD140(v21, v22, v23);
      if ((v23 & 0x80) == 0)
      {
LABEL_11:
        swift_beginAccess();
        sub_2141DD130(v18, v19, v26);
        swift_bridgeObjectRetain();
        sub_2141DD140(v21, v22, v23);
        sub_2141DD140(v21, v22, v23);
        sub_214200CB8(v21, v22, v23);
        swift_endAccess();
        sub_2141EF1B0(v21, v22, v23);
LABEL_92:
        swift_beginAccess();
        if (*(unsigned __int8 *)(v0 + 241) << 8 == 512)
        {
          nullsub_1(v42, v25);
          *(_WORD *)(v0 + 240) = sub_214400834() & 0x1FF;
        }
LABEL_94:
        swift_endAccess();
        sub_2141ED0BC(v18, v19, v26);
        swift_bridgeObjectRelease();
        sub_2141EF1B0(v21, v22, v23);
        sub_2141ED0BC(v18, v19, v26);
        swift_bridgeObjectRelease();
        return sub_2141EF1B0(v21, v22, v23);
      }
LABEL_29:
      v33 = v21;
      v34 = v22;
      v35 = v21 & 0x7FF0000000000000;
      if ((v23 & 1) != 0)
      {
        swift_beginAccess();
        if (v35 != 0x7FF0000000000000)
        {
          if ((*(_BYTE *)(v0 + 216) & 1) != 0)
          {
            v37 = *(double *)&v21;
          }
          else
          {
            v37 = *(double *)(v0 + 200);
            if (v37 >= *(double *)&v21)
              v37 = *(double *)&v21;
            if (*(double *)(v0 + 208) >= *(double *)&v21)
              v33 = *(_QWORD *)(v0 + 208);
          }
          *(double *)(v0 + 200) = v37;
          *(_QWORD *)(v0 + 208) = v33;
          *(_BYTE *)(v0 + 216) = 0;
        }
        if ((~v22 & 0x7FF0000000000000) != 0)
        {
          if ((*(_BYTE *)(v0 + 216) & 1) != 0)
          {
            v41 = *(double *)&v22;
          }
          else
          {
            v41 = *(double *)(v0 + 200);
            if (v41 >= *(double *)&v22)
              v41 = *(double *)&v22;
            if (*(double *)(v0 + 208) >= *(double *)&v22)
              v34 = *(_QWORD *)(v0 + 208);
          }
          *(double *)(v0 + 200) = v41;
          *(_QWORD *)(v0 + 208) = v34;
          *(_BYTE *)(v0 + 216) = 0;
        }
      }
      else
      {
        swift_beginAccess();
        if (v35 != 0x7FF0000000000000)
        {
          if ((*(_BYTE *)(v0 + 192) & 1) != 0)
          {
            v36 = *(double *)&v21;
          }
          else
          {
            v36 = *(double *)(v0 + 176);
            if (v36 >= *(double *)&v21)
              v36 = *(double *)&v21;
            if (*(double *)(v0 + 184) >= *(double *)&v21)
              v33 = *(_QWORD *)(v0 + 184);
          }
          *(double *)(v0 + 176) = v36;
          *(_QWORD *)(v0 + 184) = v33;
          *(_BYTE *)(v0 + 192) = 0;
        }
        if ((~v22 & 0x7FF0000000000000) != 0)
        {
          if ((*(_BYTE *)(v0 + 192) & 1) != 0)
          {
            v40 = *(double *)&v22;
          }
          else
          {
            v40 = *(double *)(v0 + 176);
            if (v40 >= *(double *)&v22)
              v40 = *(double *)&v22;
            if (*(double *)(v0 + 184) >= *(double *)&v22)
              v34 = *(_QWORD *)(v0 + 184);
          }
          *(double *)(v0 + 176) = v40;
          *(_QWORD *)(v0 + 184) = v34;
          *(_BYTE *)(v0 + 192) = 0;
        }
      }
      sub_2141DD130(v18, v19, v26);
      swift_bridgeObjectRetain();
      sub_2141DD140(v21, v22, v23);
      goto LABEL_92;
    }
  }
  if (v24 != 8 && v24 == v1 && *(_QWORD *)(v0 + 824))
  {
    LOBYTE(v26) = v20 & 1;
    if (!v1)
    {
      v25 = *(_QWORD *)(v0 + 864);
      v42 = *(_QWORD *)(v0 + 856);
      sub_2141DD130(v18, v19, v20 & 1);
      swift_bridgeObjectRetain();
      sub_2141DD140(v21, v22, v23);
      if ((v23 & 0x80) == 0)
        goto LABEL_11;
      goto LABEL_29;
    }
    if (v1 != 1)
      return result;
    v27 = *(_QWORD *)(v0 + 864);
    v43 = *(_QWORD *)(v0 + 856);
    sub_2141DD130(v18, v19, v20 & 1);
    swift_bridgeObjectRetain();
    sub_2141DD140(v21, v22, v23);
    if ((v23 & 0x80) != 0)
      goto LABEL_21;
    goto LABEL_14;
  }
  return result;
}

uint64_t sub_214203104(uint64_t result, char a2, uint64_t a3, char a4)
{
  uint64_t v4;
  double v7;
  double v8;
  double v9;
  uint64_t v10;
  double v11;

  if ((a2 & 1) == 0)
  {
    v7 = *(double *)&result;
    *(double *)&result = COERCE_DOUBLE(swift_beginAccess());
    if ((~*(_QWORD *)&v7 & 0x7FF0000000000000) != 0)
    {
      v8 = v7;
      if ((*(_BYTE *)(v4 + 40) & 1) != 0)
      {
        v9 = v7;
      }
      else
      {
        v9 = *(double *)(v4 + 24);
        if (v9 >= v7)
          v9 = v7;
        if (*(double *)(v4 + 32) >= v7)
          v8 = *(double *)(v4 + 32);
      }
      *(double *)(v4 + 24) = v9;
      *(double *)(v4 + 32) = v8;
      *(_BYTE *)(v4 + 40) = 0;
    }
  }
  if ((a4 & 1) == 0)
  {
    *(double *)&result = COERCE_DOUBLE(swift_beginAccess());
    if ((~a3 & 0x7FF0000000000000) != 0)
    {
      v10 = a3;
      if ((*(_BYTE *)(v4 + 112) & 1) != 0)
      {
        v11 = *(double *)&a3;
      }
      else
      {
        v11 = *(double *)(v4 + 96);
        if (v11 >= *(double *)&a3)
          v11 = *(double *)&a3;
        if (*(double *)(v4 + 104) >= *(double *)&a3)
          v10 = *(_QWORD *)(v4 + 104);
      }
      *(double *)(v4 + 96) = v11;
      *(_QWORD *)(v4 + 104) = v10;
      *(_BYTE *)(v4 + 112) = 0;
    }
  }
  return result;
}

uint64_t sub_2142031E0(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  char v5;
  uint64_t v6;
  double v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  double v18;
  double (*v19)(uint64_t);
  uint64_t v20;
  double v21;
  double v22;
  double v23;
  double (*v24)(uint64_t, double, double);
  uint64_t v25;
  uint64_t v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  double (*v38)(uint64_t, double, double);
  uint64_t v39;
  uint64_t v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  double (*v54)(uint64_t, double, double);
  uint64_t v55;
  uint64_t v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;

  v2 = v1;
  if (*(_QWORD *)(*(_QWORD *)(v1 + 168) + 16))
  {
    v3 = result;
    if (*(_QWORD *)(result + 16))
    {
      v4 = sub_214336B74(0);
      if ((v5 & 1) != 0)
      {
        v6 = *(_QWORD *)(v3 + 56) + 72 * v4;
        if (*(unsigned __int16 *)(v6 + 40) <= 0xFFu)
        {
          *(double *)&result = COERCE_DOUBLE(sub_2142E95B8(*(_QWORD *)(v6 + 16)));
          if ((v8 & 1) == 0)
          {
            v9 = *(_QWORD *)(v2 + 168);
            v10 = *(_QWORD *)(v9 + 16);
            if (!v10)
              return result;
            v11 = *(double *)&result;
            v12 = v7;
            swift_bridgeObjectRetain();
            swift_beginAccess();
            v13 = v9 + 56;
            do
            {
              v24 = *(double (**)(uint64_t, double, double))(v13 - 24);
              v25 = *(_QWORD *)(v13 - 8);
              swift_retain();
              v26 = sub_2141D975C(v25);
              v27 = v24(v26, v11, v12);
              if ((~*(_QWORD *)&v27 & 0x7FF0000000000000) != 0)
              {
                v29 = v27;
                if ((*(_BYTE *)(v2 + 112) & 1) == 0)
                {
                  v30 = *(double *)(v2 + 96);
                  v29 = *(double *)(v2 + 104);
                  if (v30 >= v27)
                    v30 = v27;
                  if (v27 > v29)
                    v29 = v27;
                  v27 = v30;
                }
                *(double *)(v2 + 96) = v27;
                *(double *)(v2 + 104) = v29;
                *(_BYTE *)(v2 + 112) = 0;
              }
              if ((~*(_QWORD *)&v28 & 0x7FF0000000000000) != 0)
              {
                v31 = v28;
                if ((*(_BYTE *)(v2 + 112) & 1) == 0)
                {
                  v32 = *(double *)(v2 + 96);
                  v31 = *(double *)(v2 + 104);
                  if (v32 >= v28)
                    v32 = v28;
                  if (v28 > v31)
                    v31 = v28;
                  v28 = v32;
                }
                *(double *)(v2 + 96) = v28;
                *(double *)(v2 + 104) = v31;
                *(_BYTE *)(v2 + 112) = 0;
              }
              v13 += 32;
              swift_release();
              sub_2141D972C(v25);
              --v10;
            }
            while (v10);
LABEL_91:
            *(double *)&result = COERCE_DOUBLE(swift_bridgeObjectRelease());
            return result;
          }
        }
      }
    }
    *(double *)&result = COERCE_DOUBLE(swift_beginAccess());
    if ((*(_BYTE *)(v2 + 40) & 1) == 0)
    {
      v34 = *(double *)(v2 + 24);
      v33 = *(double *)(v2 + 32);
      if (v34 >= v33)
        return result;
      if (v34 <= v33)
      {
        v35 = *(_QWORD *)(v2 + 168);
        v36 = *(_QWORD *)(v35 + 16);
        if (!v36)
          return result;
        swift_bridgeObjectRetain();
        swift_beginAccess();
        v37 = v35 + 56;
        do
        {
          v38 = *(double (**)(uint64_t, double, double))(v37 - 24);
          v39 = *(_QWORD *)(v37 - 8);
          swift_retain();
          v40 = sub_2141D975C(v39);
          v41 = v38(v40, v34, v33);
          if ((~*(_QWORD *)&v41 & 0x7FF0000000000000) != 0)
          {
            v43 = v41;
            if ((*(_BYTE *)(v2 + 112) & 1) == 0)
            {
              v44 = *(double *)(v2 + 96);
              v43 = *(double *)(v2 + 104);
              if (v44 >= v41)
                v44 = v41;
              if (v41 > v43)
                v43 = v41;
              v41 = v44;
            }
            *(double *)(v2 + 96) = v41;
            *(double *)(v2 + 104) = v43;
            *(_BYTE *)(v2 + 112) = 0;
          }
          if ((~*(_QWORD *)&v42 & 0x7FF0000000000000) != 0)
          {
            v45 = v42;
            if ((*(_BYTE *)(v2 + 112) & 1) == 0)
            {
              v46 = *(double *)(v2 + 96);
              v45 = *(double *)(v2 + 104);
              if (v46 >= v42)
                v46 = v42;
              if (v42 > v45)
                v45 = v42;
              v42 = v46;
            }
            *(double *)(v2 + 96) = v42;
            *(double *)(v2 + 104) = v45;
            *(_BYTE *)(v2 + 112) = 0;
          }
          v37 += 32;
          swift_release();
          sub_2141D972C(v39);
          --v36;
        }
        while (v36);
        goto LABEL_91;
      }
      __break(1u);
LABEL_94:
      __break(1u);
      return result;
    }
    v14 = *(_QWORD *)(v2 + 168);
    v15 = *(_QWORD *)(v14 + 16);
    if (v15)
    {
      swift_bridgeObjectRetain();
      v16 = v14 + 56;
      v17 = INFINITY;
      v18 = -INFINITY;
      do
      {
        v19 = *(double (**)(uint64_t))(v16 - 8);
        if (v19)
        {
          swift_retain();
          v20 = sub_2141D975C((uint64_t)v19);
          v21 = v19(v20);
          v23 = v22;
          swift_release();
          sub_2141D972C((uint64_t)v19);
          if (v21 < v17)
            v17 = v21;
          if (v18 <= v23)
            v18 = v23;
        }
        v16 += 32;
        --v15;
      }
      while (v15);
      *(double *)&result = COERCE_DOUBLE(swift_bridgeObjectRelease());
      if (v17 < v18)
      {
        if ((~*(_QWORD *)&v17 & 0x7FF0000000000000) != 0)
        {
          v47 = v17;
          v48 = v17;
          if ((*(_BYTE *)(v2 + 40) & 1) == 0)
          {
            v47 = *(double *)(v2 + 24);
            v48 = *(double *)(v2 + 32);
            if (v47 >= v17)
              v47 = v17;
            if (v17 > v48)
              v48 = v17;
          }
          *(double *)(v2 + 24) = v47;
          *(double *)(v2 + 32) = v48;
          *(_BYTE *)(v2 + 40) = 0;
        }
        if ((~*(_QWORD *)&v18 & 0x7FF0000000000000) != 0)
        {
          v49 = v18;
          v50 = v18;
          if ((*(_BYTE *)(v2 + 40) & 1) == 0)
          {
            v49 = *(double *)(v2 + 24);
            v50 = *(double *)(v2 + 32);
            if (v49 >= v18)
              v49 = v18;
            if (v18 > v50)
              v50 = v18;
          }
          *(double *)(v2 + 24) = v49;
          *(double *)(v2 + 32) = v50;
          *(_BYTE *)(v2 + 40) = 0;
        }
        if (v17 <= v18)
        {
          v51 = *(_QWORD *)(v2 + 168);
          v52 = *(_QWORD *)(v51 + 16);
          if (!v52)
            return result;
          swift_bridgeObjectRetain();
          swift_beginAccess();
          v53 = v51 + 56;
          do
          {
            v54 = *(double (**)(uint64_t, double, double))(v53 - 24);
            v55 = *(_QWORD *)(v53 - 8);
            swift_retain();
            v56 = sub_2141D975C(v55);
            v57 = v54(v56, v17, v18);
            if ((~*(_QWORD *)&v57 & 0x7FF0000000000000) != 0)
            {
              v59 = v57;
              if ((*(_BYTE *)(v2 + 112) & 1) == 0)
              {
                v60 = *(double *)(v2 + 96);
                v59 = *(double *)(v2 + 104);
                if (v60 >= v57)
                  v60 = v57;
                if (v57 > v59)
                  v59 = v57;
                v57 = v60;
              }
              *(double *)(v2 + 96) = v57;
              *(double *)(v2 + 104) = v59;
              *(_BYTE *)(v2 + 112) = 0;
            }
            if ((~*(_QWORD *)&v58 & 0x7FF0000000000000) != 0)
            {
              v61 = v58;
              if ((*(_BYTE *)(v2 + 112) & 1) == 0)
              {
                v62 = *(double *)(v2 + 96);
                v61 = *(double *)(v2 + 104);
                if (v62 >= v58)
                  v62 = v58;
                if (v58 > v61)
                  v61 = v58;
                v58 = v62;
              }
              *(double *)(v2 + 96) = v58;
              *(double *)(v2 + 104) = v61;
              *(_BYTE *)(v2 + 112) = 0;
            }
            v53 += 32;
            swift_release();
            sub_2141D972C(v55);
            --v52;
          }
          while (v52);
          goto LABEL_91;
        }
        goto LABEL_94;
      }
    }
  }
  return result;
}

uint64_t sub_2142036B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  char v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v21;
  _OWORD v22[3];
  char v23;

  v2 = v1;
  swift_beginAccess();
  v3 = *(_QWORD *)(v1 + 608);
  v21 = v3 + 64;
  v4 = 1 << *(_BYTE *)(v3 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(v3 + 64);
  swift_bridgeObjectRetain();
  swift_beginAccess();
  swift_beginAccess();
  swift_beginAccess();
  swift_beginAccess();
  swift_beginAccess();
  swift_beginAccess();
  swift_beginAccess();
  swift_beginAccess();
  v7 = 0;
  v8 = (unint64_t)(v4 + 63) >> 6;
  while (v6)
  {
    v9 = __clz(__rbit64(v6));
    v6 &= v6 - 1;
    v10 = v9 | (v7 << 6);
LABEL_24:
    v14 = *(_QWORD *)(v3 + 48) + 56 * v10;
    v15 = *(_BYTE *)(v14 + 48);
    v16 = *(_OWORD *)(v14 + 32);
    v17 = *(_OWORD *)v14;
    v22[1] = *(_OWORD *)(v14 + 16);
    v22[2] = v16;
    v22[0] = v17;
    v23 = v15;
    if (v17 != 3)
    {
      v18 = *(_QWORD *)(*(_QWORD *)(v2 + 608) + 16);
      sub_21421CBB0((uint64_t)v22, (void (*)(uint64_t, uint64_t, uint64_t))sub_2141DD164);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v18)
        sub_214336BCC((double *)v22);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      __asm { BR              X9 }
    }
  }
  v11 = v7 + 1;
  if (__OFADD__(v7, 1))
  {
    __break(1u);
    goto LABEL_30;
  }
  if (v11 >= v8)
    goto LABEL_28;
  v12 = *(_QWORD *)(v21 + 8 * v11);
  ++v7;
  if (v12)
    goto LABEL_23;
  v7 = v11 + 1;
  if (v11 + 1 >= v8)
    goto LABEL_28;
  v12 = *(_QWORD *)(v21 + 8 * v7);
  if (v12)
    goto LABEL_23;
  v7 = v11 + 2;
  if (v11 + 2 >= v8)
    goto LABEL_28;
  v12 = *(_QWORD *)(v21 + 8 * v7);
  if (v12)
    goto LABEL_23;
  v7 = v11 + 3;
  if (v11 + 3 >= v8)
    goto LABEL_28;
  v12 = *(_QWORD *)(v21 + 8 * v7);
  if (v12)
    goto LABEL_23;
  v7 = v11 + 4;
  if (v11 + 4 >= v8)
    goto LABEL_28;
  v12 = *(_QWORD *)(v21 + 8 * v7);
  if (v12)
  {
LABEL_23:
    v6 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v7 << 6);
    goto LABEL_24;
  }
  v13 = v11 + 5;
  if (v13 < v8)
  {
    v12 = *(_QWORD *)(v21 + 8 * v13);
    if (!v12)
    {
      while (1)
      {
        v7 = v13 + 1;
        if (__OFADD__(v13, 1))
          break;
        if (v7 >= v8)
          goto LABEL_28;
        v12 = *(_QWORD *)(v21 + 8 * v7);
        ++v13;
        if (v12)
          goto LABEL_23;
      }
LABEL_30:
      __break(1u);
      JUMPOUT(0x214203F08);
    }
    v7 = v13;
    goto LABEL_23;
  }
LABEL_28:
  swift_release();
  return sub_2142031E0(a1);
}

unint64_t sub_214203F28()
{
  uint64_t v0;
  __int128 v1;
  __int128 v2;
  uint64_t v3;
  __int16 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  __int16 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  __int16 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  __int16 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int16 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  __int16 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  __int16 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  __int16 v32;
  unint64_t v34;
  _OWORD v35[4];
  __int16 v36;
  _OWORD v37[4];
  __int16 v38;
  _OWORD v39[4];
  __int16 v40;
  _OWORD v41[4];
  __int16 v42;
  _OWORD v43[4];
  __int16 v44;
  _OWORD v45[4];
  __int16 v46;
  _OWORD v47[4];
  __int16 v48;
  _OWORD v49[4];
  __int16 v50;

  v34 = sub_21436C324(MEMORY[0x24BEE4AF8]);
  swift_beginAccess();
  v1 = *(_OWORD *)(v0 + 40);
  v2 = *(_OWORD *)(v0 + 72);
  v49[2] = *(_OWORD *)(v0 + 56);
  v49[3] = v2;
  v50 = *(_WORD *)(v0 + 88);
  v49[0] = *(_OWORD *)(v0 + 24);
  v49[1] = v1;
  sub_21421D12C((uint64_t)v49);
  swift_retain();
  v3 = sub_21435643C((uint64_t)v49);
  sub_214233E30(v3, v4, 0);
  swift_beginAccess();
  v5 = *(_OWORD *)(v0 + 144);
  v47[2] = *(_OWORD *)(v0 + 128);
  v47[3] = v5;
  v48 = *(_WORD *)(v0 + 160);
  v6 = *(_OWORD *)(v0 + 112);
  v47[0] = *(_OWORD *)(v0 + 96);
  v47[1] = v6;
  swift_retain();
  sub_21421D12C((uint64_t)v47);
  v7 = sub_21435643C((uint64_t)v47);
  sub_214233E30(v7, v8, 1);
  swift_beginAccess();
  v9 = *(_OWORD *)(v0 + 224);
  v45[2] = *(_OWORD *)(v0 + 208);
  v45[3] = v9;
  v46 = *(_WORD *)(v0 + 240);
  v10 = *(_OWORD *)(v0 + 192);
  v45[0] = *(_OWORD *)(v0 + 176);
  v45[1] = v10;
  swift_retain();
  sub_21421D12C((uint64_t)v45);
  v11 = sub_21435643C((uint64_t)v45);
  sub_214233E30(v11, v12, 2);
  swift_beginAccess();
  v13 = *(_OWORD *)(v0 + 264);
  v14 = *(_OWORD *)(v0 + 296);
  v43[2] = *(_OWORD *)(v0 + 280);
  v43[3] = v14;
  v44 = *(_WORD *)(v0 + 312);
  v43[0] = *(_OWORD *)(v0 + 248);
  v43[1] = v13;
  swift_retain();
  sub_21421D12C((uint64_t)v43);
  v15 = sub_21435643C((uint64_t)v43);
  sub_214233E30(v15, v16, 3);
  swift_beginAccess();
  v17 = *(_OWORD *)(v0 + 368);
  v41[2] = *(_OWORD *)(v0 + 352);
  v41[3] = v17;
  v42 = *(_WORD *)(v0 + 384);
  v18 = *(_OWORD *)(v0 + 336);
  v41[0] = *(_OWORD *)(v0 + 320);
  v41[1] = v18;
  swift_retain();
  sub_21421D12C((uint64_t)v41);
  v19 = sub_21435643C((uint64_t)v41);
  sub_214233E30(v19, v20, 4);
  swift_beginAccess();
  v21 = *(_OWORD *)(v0 + 440);
  v39[2] = *(_OWORD *)(v0 + 424);
  v39[3] = v21;
  v40 = *(_WORD *)(v0 + 456);
  v22 = *(_OWORD *)(v0 + 408);
  v39[0] = *(_OWORD *)(v0 + 392);
  v39[1] = v22;
  swift_retain();
  sub_21421D12C((uint64_t)v39);
  v23 = sub_21435643C((uint64_t)v39);
  sub_214233E30(v23, v24, 5);
  swift_beginAccess();
  v25 = *(_OWORD *)(v0 + 512);
  v37[2] = *(_OWORD *)(v0 + 496);
  v37[3] = v25;
  v38 = *(_WORD *)(v0 + 528);
  v26 = *(_OWORD *)(v0 + 480);
  v37[0] = *(_OWORD *)(v0 + 464);
  v37[1] = v26;
  swift_retain();
  sub_21421D12C((uint64_t)v37);
  v27 = sub_21435643C((uint64_t)v37);
  sub_214233E30(v27, v28, 6);
  swift_beginAccess();
  v29 = *(_OWORD *)(v0 + 584);
  v35[2] = *(_OWORD *)(v0 + 568);
  v35[3] = v29;
  v36 = *(_WORD *)(v0 + 600);
  v30 = *(_OWORD *)(v0 + 552);
  v35[0] = *(_OWORD *)(v0 + 536);
  v35[1] = v30;
  swift_retain();
  sub_21421D12C((uint64_t)v35);
  v31 = sub_21435643C((uint64_t)v35);
  sub_214233E30(v31, v32, 7);
  return v34;
}

double *sub_214204230(double *result, double a2)
{
  uint64_t *v2;
  uint64_t *v3;
  double *v4;
  uint64_t v6;
  unint64_t v7;
  char v8;
  double *v9;
  double v10;
  double v11;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v13;

  if (*(_BYTE *)result != 3)
  {
    v3 = v2;
    v4 = result;
    v6 = *v2;
    if (*(_QWORD *)(v6 + 16))
    {
      sub_21421CBB0((uint64_t)result, (void (*)(uint64_t, uint64_t, uint64_t))sub_2141DD164);
      v7 = sub_214336BCC(v4);
      if ((v8 & 1) != 0)
      {
        v9 = (double *)(*(_QWORD *)(v6 + 56) + 16 * v7);
        v11 = *v9;
        v10 = v9[1];
        sub_21421CBB0((uint64_t)v4, (void (*)(uint64_t, uint64_t, uint64_t))sub_2141EF1BC);
        if (a2 >= 0.0)
        {
LABEL_5:
          v11 = v11 + a2;
LABEL_9:
          sub_21421CBB0((uint64_t)v4, (void (*)(uint64_t, uint64_t, uint64_t))sub_2141DD164);
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v13 = *v3;
          *v3 = 0x8000000000000000;
          sub_2142A224C(v4, isUniquelyReferenced_nonNull_native, v11, v10);
          *v3 = v13;
          swift_bridgeObjectRelease();
          return (double *)sub_21421CBB0((uint64_t)v4, (void (*)(uint64_t, uint64_t, uint64_t))sub_2141EF1BC);
        }
LABEL_8:
        v10 = v10 + a2;
        goto LABEL_9;
      }
      sub_21421CBB0((uint64_t)v4, (void (*)(uint64_t, uint64_t, uint64_t))sub_2141EF1BC);
    }
    v10 = 0.0;
    v11 = 0.0;
    if (a2 >= 0.0)
      goto LABEL_5;
    goto LABEL_8;
  }
  return result;
}

uint64_t sub_214204358()
{
  uint64_t v0;
  _BYTE v2[272];

  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  memcpy(v2, (const void *)(v0 + 624), 0x102uLL);
  sub_21421CA78((uint64_t)v2, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char))sub_21421C6D4);
  sub_21421CA44(v0 + 888);
  return v0;
}

uint64_t sub_214204450()
{
  sub_214204358();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ChartContentLayoutContext()
{
  return objc_opt_self();
}

uint64_t sub_214204490()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  type metadata accessor for ChartContentIDContext();
  v1 = swift_allocObject();
  type metadata accessor for IDGenerator();
  v2 = (_QWORD *)swift_allocObject();
  v3 = MEMORY[0x24BEE4AF8];
  v4 = sub_21436864C(MEMORY[0x24BEE4AF8]);
  v5 = MEMORY[0x24BEE4B08];
  v2[2] = v4;
  v2[3] = v5;
  v2[4] = 0;
  *(_QWORD *)(v1 + 16) = v2;
  *(_QWORD *)(v1 + 24) = 0;
  *(_QWORD *)(v0 + 16) = v1;
  *(_OWORD *)(v0 + 24) = 0u;
  *(_BYTE *)(v0 + 40) = 1;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_BYTE *)(v0 + 64) = 1;
  *(_QWORD *)(v0 + 72) = v3;
  *(_QWORD *)(v0 + 80) = v5;
  *(_WORD *)(v0 + 88) = 512;
  *(_OWORD *)(v0 + 96) = 0u;
  *(_BYTE *)(v0 + 112) = 1;
  *(_OWORD *)(v0 + 120) = 0u;
  *(_BYTE *)(v0 + 136) = 1;
  *(_QWORD *)(v0 + 144) = v3;
  *(_QWORD *)(v0 + 152) = v5;
  *(_WORD *)(v0 + 160) = 512;
  *(_QWORD *)(v0 + 168) = v3;
  *(_OWORD *)(v0 + 176) = 0u;
  *(_BYTE *)(v0 + 192) = 1;
  *(_OWORD *)(v0 + 200) = 0u;
  *(_BYTE *)(v0 + 216) = 1;
  *(_QWORD *)(v0 + 224) = v3;
  *(_QWORD *)(v0 + 232) = v5;
  *(_WORD *)(v0 + 240) = 512;
  *(_OWORD *)(v0 + 248) = 0u;
  *(_BYTE *)(v0 + 264) = 1;
  *(_OWORD *)(v0 + 272) = 0u;
  *(_BYTE *)(v0 + 288) = 1;
  *(_QWORD *)(v0 + 296) = v3;
  *(_QWORD *)(v0 + 304) = v5;
  *(_WORD *)(v0 + 312) = 512;
  *(_OWORD *)(v0 + 320) = 0u;
  *(_BYTE *)(v0 + 336) = 1;
  *(_OWORD *)(v0 + 344) = 0u;
  *(_BYTE *)(v0 + 360) = 1;
  *(_QWORD *)(v0 + 368) = v3;
  *(_QWORD *)(v0 + 376) = v5;
  *(_WORD *)(v0 + 384) = 512;
  *(_OWORD *)(v0 + 392) = 0u;
  *(_BYTE *)(v0 + 408) = 1;
  *(_OWORD *)(v0 + 416) = 0u;
  *(_BYTE *)(v0 + 432) = 1;
  *(_QWORD *)(v0 + 440) = v3;
  *(_QWORD *)(v0 + 448) = v5;
  *(_WORD *)(v0 + 456) = 512;
  *(_OWORD *)(v0 + 464) = 0u;
  *(_BYTE *)(v0 + 480) = 1;
  *(_OWORD *)(v0 + 488) = 0u;
  *(_BYTE *)(v0 + 504) = 1;
  *(_QWORD *)(v0 + 512) = v3;
  *(_QWORD *)(v0 + 520) = v5;
  *(_WORD *)(v0 + 528) = 512;
  *(_OWORD *)(v0 + 536) = 0u;
  *(_BYTE *)(v0 + 552) = 1;
  *(_QWORD *)(v0 + 568) = 0;
  *(_QWORD *)(v0 + 560) = 0;
  *(_BYTE *)(v0 + 576) = 1;
  *(_QWORD *)(v0 + 584) = v3;
  *(_QWORD *)(v0 + 592) = v5;
  *(_WORD *)(v0 + 600) = 512;
  v6 = sub_214368778(v3);
  v7 = sub_214368778(v3);
  *(_QWORD *)(v0 + 608) = v6;
  *(_QWORD *)(v0 + 616) = v7;
  *(_OWORD *)(v0 + 624) = 0u;
  *(_OWORD *)(v0 + 640) = 0u;
  *(_OWORD *)(v0 + 656) = 0u;
  *(_OWORD *)(v0 + 672) = 0u;
  *(_OWORD *)(v0 + 688) = 0u;
  *(_BYTE *)(v0 + 704) = 0;
  *(_OWORD *)(v0 + 712) = 0u;
  *(_OWORD *)(v0 + 728) = 0u;
  *(_OWORD *)(v0 + 744) = 0u;
  *(_OWORD *)(v0 + 760) = 0u;
  *(_OWORD *)(v0 + 776) = 0u;
  *(_BYTE *)(v0 + 792) = 0;
  *(_OWORD *)(v0 + 800) = 0u;
  *(_OWORD *)(v0 + 816) = 0u;
  *(_OWORD *)(v0 + 832) = 0u;
  *(_OWORD *)(v0 + 848) = 0u;
  *(_OWORD *)(v0 + 864) = 0u;
  *(_BYTE *)(v0 + 880) = 0;
  *(_BYTE *)(v0 + 881) = 8;
  *(_OWORD *)(v0 + 888) = 0u;
  *(_OWORD *)(v0 + 904) = 0u;
  *(_OWORD *)(v0 + 920) = 0u;
  *(_OWORD *)(v0 + 936) = 0u;
  *(_OWORD *)(v0 + 952) = 0u;
  *(_OWORD *)(v0 + 968) = 0u;
  *(_OWORD *)(v0 + 984) = 0u;
  *(_OWORD *)(v0 + 1000) = 0u;
  *(_OWORD *)(v0 + 1016) = 0u;
  *(_OWORD *)(v0 + 1032) = 0u;
  *(_OWORD *)(v0 + 1048) = 0u;
  *(_OWORD *)(v0 + 1064) = 0u;
  *(_OWORD *)(v0 + 1080) = 0u;
  *(_OWORD *)(v0 + 1096) = 0u;
  *(_OWORD *)(v0 + 1112) = 0u;
  *(_OWORD *)(v0 + 1128) = 0u;
  *(_OWORD *)(v0 + 1144) = 0u;
  *(_OWORD *)(v0 + 1160) = 0u;
  *(_OWORD *)(v0 + 1176) = 0u;
  *(_DWORD *)(v0 + 1191) = 0;
  return v0;
}

uint64_t sub_21420468C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v30 = a1;
  v32 = a3;
  v27 = a2;
  v33 = a5;
  v6 = *(_QWORD *)(a4 + 16);
  v7 = type metadata accessor for ConcreteScale(0, MEMORY[0x24BEE0D00], v6, a4);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v26 - v9;
  v11 = sub_214425388();
  v28 = *(_QWORD *)(v11 - 8);
  v29 = v11;
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v26 - v12;
  v15 = type metadata accessor for ConcreteScale(0, MEMORY[0x24BEE13C8], v6, v14);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v26 - v18;
  MEMORY[0x24BDAC7A8](v17);
  v21 = (char *)&v26 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v21, v31, a4);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v21, v7);
    if (v32 == 2)
    {
      v34 = v30;
      v35 = v27;
      v23 = v33;
      sub_2142E0FAC();
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v23, 0, 1, v6);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v33, 1, 1, v6);
    }
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v19, v21, v15);
    if ((_BYTE)v32 && v32 != 1)
    {
      (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v15);
      v25 = 1;
    }
    else
    {
      v34 = v30;
      sub_2142E0FAC();
      (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v15);
      v25 = 0;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v13, v25, 1, v6);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v28 + 32))(v33, v13, v29);
  }
}

uint64_t sub_214204924(uint64_t a1, uint64_t a2, unsigned __int8 a3, double a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  unsigned __int8 v11;
  void (*v12)(double *__return_ptr, _QWORD *);
  uint64_t result;
  void (*v14)(_QWORD *__return_ptr, double *);
  uint64_t v15;
  _QWORD v16[2];
  double v17;
  _BYTE v18[8];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(double *__return_ptr, _QWORD *);
  char v23;

  v5 = v4;
  sub_2141E801C(v4, (uint64_t)v18, &qword_253F13368);
  v10 = v19;
  v15 = v20;
  v11 = v21;
  sub_2141E801C(v5, (uint64_t)&v22, &qword_253F13368);
  if ((v23 & 1) != 0)
  {
    if (a3 == 2)
    {
      v12 = v22;
      v16[0] = a1;
      v16[1] = a2;
      swift_retain();
      sub_2141D975C(v10);
      swift_bridgeObjectRetain();
      sub_2141E83DC(v15, v11);
      v12(&v17, v16);
      sub_21421D004(v5, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_21421BB6C);
      *(double *)&result = v17 + a4;
      return result;
    }
  }
  else
  {
    v14 = (void (*)(_QWORD *__return_ptr, double *))v22;
    if (a3 <= 1u)
    {
      v17 = *(double *)&a1;
      swift_retain();
      sub_2141D975C(v10);
      swift_bridgeObjectRetain();
      sub_2141E83DC(v15, v11);
      v14(v16, &v17);
      sub_21421D004(v5, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_21421BB6C);
      return v16[0];
    }
  }
  *(double *)&result = 0.0;
  return result;
}

uint64_t sub_214204AE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v5 = v4;
  v9 = *(_QWORD *)(a2 + 16);
  v10 = type metadata accessor for ConcreteScale(0, MEMORY[0x24BEE0D00], v9, a4);
  v30 = *(_QWORD *)(v10 - 8);
  v31 = v10;
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v29 - v11;
  v32 = v9;
  v14 = type metadata accessor for ConcreteScale(0, MEMORY[0x24BEE13C8], v9, v13);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v29 - v17;
  v19 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v21 = (char *)&v29 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  nullsub_1(a3, a4);
  v33 = a4;
  v34 = a3;
  v22 = sub_214400834();
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v21, v5, a2);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v18, v21, v14);
    if (v22 <= 1)
    {
      v35 = sub_2142E59DC(v14);
      MEMORY[0x24BDAC7A8](v35);
      v27 = v34;
      *(&v29 - 4) = v32;
      *(&v29 - 3) = v27;
      *(&v29 - 2) = v33;
      swift_bridgeObjectRetain();
      sub_2141D8BF8(&qword_253F12170);
      sub_21421CCF4(qword_254D695F8, &qword_253F12170);
      v26 = sub_214424F50();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
      return v26;
    }
    (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
    return 0;
  }
  v24 = v30;
  v23 = v31;
  (*(void (**)(char *, char *, uint64_t))(v30 + 32))(v12, v21, v31);
  if (v22 != 2)
  {
    (*(void (**)(char *, uint64_t))(v24 + 8))(v12, v23);
    return 0;
  }
  v35 = sub_2142E59DC(v23);
  MEMORY[0x24BDAC7A8](v35);
  v25 = v34;
  *(&v29 - 4) = v32;
  *(&v29 - 3) = v25;
  *(&v29 - 2) = v33;
  swift_bridgeObjectRetain();
  sub_2141D8BF8(&qword_253F12250);
  sub_21421CCF4(&qword_254D695F0, &qword_253F12250);
  v26 = sub_214424F50();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v24 + 8))(v12, v23);
  return v26;
}

BOOL sub_214204E80(double *a1, double *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

double *sub_214204EAC(double *result, double a2)
{
  _QWORD *v2;
  int v4;
  _QWORD *v5;
  double *v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  unint64_t v10;
  double v11;
  char v12;
  double *v13;
  double v14;
  double v15;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v17;

  v4 = *(unsigned __int8 *)result;
  if (v4 != 3)
  {
    v5 = v2;
    v6 = result;
    v7 = *(_QWORD *)(*v2 + 16);
    sub_21421CBB0((uint64_t)result, (void (*)(uint64_t, uint64_t, uint64_t))sub_2141DD164);
    v8 = 0.0;
    if (v7)
      sub_214336BCC(v6);
    v9 = v2[1];
    if (*(_QWORD *)(v9 + 16))
    {
      v10 = sub_214336BCC(v6);
      v11 = 0.0;
      if ((v12 & 1) != 0)
      {
        v13 = (double *)(*(_QWORD *)(v9 + 56) + 16 * v10);
        v11 = *v13;
        v8 = v13[1];
      }
    }
    else
    {
      v11 = 0.0;
    }
    sub_21421CBB0((uint64_t)v6, (void (*)(uint64_t, uint64_t, uint64_t))sub_2141EF1BC);
    if (a2 < 0.0)
      v14 = v8 + a2;
    else
      v14 = v8;
    if (a2 < 0.0)
      v15 = v11;
    else
      v15 = v11 + a2;
    sub_21421CBB0((uint64_t)v6, (void (*)(uint64_t, uint64_t, uint64_t))sub_2141DD164);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v17 = v5[1];
    v5[1] = 0x8000000000000000;
    sub_2142A224C(v6, isUniquelyReferenced_nonNull_native, v15, v14);
    v5[1] = v17;
    swift_bridgeObjectRelease();
    return (double *)sub_21421CBB0((uint64_t)v6, (void (*)(uint64_t, uint64_t, uint64_t))sub_2141EF1BC);
  }
  return result;
}

uint64_t sub_2142050D8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1[1];
  v3 = a2[1];
  if ((sub_214352B1C(*a1, *a2) & 1) != 0)
    return sub_214352B1C(v2, v3);
  else
    return 0;
}

double sub_214205120@<D0>(uint64_t a1@<X8>)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _OWORD *v16;
  _OWORD *v17;
  _QWORD *v18;
  _OWORD *v19;

  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_WORD *)(a1 + 40) = 255;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_BYTE *)(a1 + 128) = -1;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_BYTE *)(a1 + 152) = -1;
  *(_QWORD *)(a1 + 160) = 0;
  *(_BYTE *)(a1 + 168) = 1;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_BYTE *)(a1 + 208) = 1;
  v2 = (int *)type metadata accessor for ChartContentRenderContext.Environment(0);
  v3 = a1 + v2[11];
  v4 = sub_214424308();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v5 = a1 + v2[12];
  *(_QWORD *)v5 = 0;
  *(_BYTE *)(v5 + 8) = 3;
  *(_QWORD *)(a1 + v2[13]) = 0x3FF0000000000000;
  v6 = a1 + v2[14];
  v7 = sub_214424C68();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  v8 = a1 + v2[15];
  *(_QWORD *)v8 = 0;
  *(_WORD *)(v8 + 8) = 0;
  *(_QWORD *)(a1 + v2[16]) = 0;
  *(_QWORD *)(a1 + v2[17]) = 0x3FF0000000000000;
  v9 = a1 + v2[18];
  *(_QWORD *)(v9 + 64) = 0;
  result = 0.0;
  *(_OWORD *)(v9 + 32) = 0u;
  *(_OWORD *)(v9 + 48) = 0u;
  *(_OWORD *)v9 = 0u;
  *(_OWORD *)(v9 + 16) = 0u;
  v11 = a1 + v2[19];
  *(_QWORD *)(v11 + 64) = 0;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)v11 = 0u;
  *(_OWORD *)(v11 + 16) = 0u;
  v12 = a1 + v2[20];
  *(_QWORD *)(v12 + 64) = 0;
  *(_OWORD *)(v12 + 32) = 0u;
  *(_OWORD *)(v12 + 48) = 0u;
  *(_OWORD *)v12 = 0u;
  *(_OWORD *)(v12 + 16) = 0u;
  v13 = a1 + v2[21];
  *(_QWORD *)(v13 + 64) = 0;
  *(_OWORD *)(v13 + 32) = 0u;
  *(_OWORD *)(v13 + 48) = 0u;
  *(_OWORD *)v13 = 0u;
  *(_OWORD *)(v13 + 16) = 0u;
  v14 = (_QWORD *)(a1 + v2[22]);
  *v14 = 0;
  v14[1] = 0;
  v14[2] = 0;
  v15 = (_QWORD *)(a1 + v2[23]);
  *v15 = 0;
  v15[1] = 0;
  v15[2] = 0;
  v16 = (_OWORD *)(a1 + v2[24]);
  *v16 = 0u;
  v16[1] = 0u;
  v17 = (_OWORD *)(a1 + v2[25]);
  *v17 = 0u;
  v17[1] = 0u;
  v18 = (_QWORD *)(a1 + v2[26]);
  *v18 = 0;
  v18[1] = 0;
  v19 = (_OWORD *)(a1 + v2[27]);
  *v19 = 0u;
  v19[1] = 0u;
  return result;
}

uint64_t sub_2142052CC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15, uint64_t a16)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  char v44;
  char v45;
  char v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  char v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  unint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  char v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  __int128 v127;
  __int128 v128;
  uint64_t v129;
  unsigned __int8 v130;
  unint64_t v131;
  char v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  int v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  __int128 v157;
  __int128 v158;
  uint64_t v159;
  unsigned __int8 v160;
  unint64_t v161;
  char v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  unsigned __int8 v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  __int128 v188;
  __int128 v189;
  uint64_t v190;
  unsigned __int8 v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  __int128 v231;
  uint64_t v233;
  uint64_t v235;
  _OWORD v236[5];
  char v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  char v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  char v249;
  char v250;
  _BYTE v251[264];
  _BYTE v252[264];
  _BYTE v253[264];
  _QWORD v254[10];
  uint64_t v255;
  _BYTE v256[152];

  v17 = v16;
  sub_2141E801C(a5, (uint64_t)v251, &qword_253F14B70);
  sub_2141E801C((uint64_t)v251, (uint64_t)v253, &qword_253F14B70);
  *(double *)v254 = a9;
  *(double *)&v254[1] = a10;
  *(double *)&v254[2] = a11;
  v254[3] = a2;
  *(double *)&v254[4] = a12;
  *(double *)&v254[5] = a13;
  *(double *)&v254[6] = a14;
  *(double *)&v254[7] = a15;
  v254[8] = a3;
  v254[9] = a4;
  sub_2141E801C((uint64_t)v253, (uint64_t)&v255, &qword_253F14B70);
  sub_214205120(v16 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_environment);
  v31 = OBJC_IVAR____TtC6Charts25ChartContentRenderContext_lineSeriesContext;
  v32 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v17 + v31) = sub_214368FE4(MEMORY[0x24BEE4AF8]);
  v33 = OBJC_IVAR____TtC6Charts25ChartContentRenderContext_areaSeriesContext;
  *(_QWORD *)(v17 + v33) = sub_214368EB4(v32);
  v34 = v17 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_xOffsetScale;
  *(_QWORD *)(v34 + 96) = 0;
  *(_OWORD *)(v34 + 64) = 0u;
  *(_OWORD *)(v34 + 80) = 0u;
  *(_OWORD *)(v34 + 32) = 0u;
  *(_OWORD *)(v34 + 48) = 0u;
  *(_OWORD *)v34 = 0u;
  *(_OWORD *)(v34 + 16) = 0u;
  *(_BYTE *)(v34 + 104) = -1;
  v35 = v17 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_yOffsetScale;
  *(_QWORD *)(v35 + 96) = 0;
  *(_OWORD *)(v35 + 64) = 0u;
  *(_OWORD *)(v35 + 80) = 0u;
  *(_OWORD *)(v35 + 32) = 0u;
  *(_OWORD *)(v35 + 48) = 0u;
  *(_OWORD *)v35 = 0u;
  *(_OWORD *)(v35 + 16) = 0u;
  *(_BYTE *)(v35 + 104) = -1;
  v36 = v17 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_symbolSizeScale;
  *(_QWORD *)(v36 + 96) = 0;
  *(_OWORD *)(v36 + 64) = 0u;
  *(_OWORD *)(v36 + 80) = 0u;
  *(_OWORD *)(v36 + 32) = 0u;
  *(_OWORD *)(v36 + 48) = 0u;
  *(_OWORD *)v36 = 0u;
  *(_OWORD *)(v36 + 16) = 0u;
  *(_BYTE *)(v36 + 104) = -1;
  v37 = v17 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_symbolScale;
  *(_OWORD *)(v37 + 96) = 0u;
  *(_OWORD *)(v37 + 112) = 0u;
  *(_OWORD *)(v37 + 64) = 0u;
  *(_OWORD *)(v37 + 80) = 0u;
  *(_OWORD *)(v37 + 32) = 0u;
  *(_OWORD *)(v37 + 48) = 0u;
  *(_OWORD *)v37 = 0u;
  *(_OWORD *)(v37 + 16) = 0u;
  *(_BYTE *)(v37 + 128) = -1;
  v38 = v17 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_lineStyleScale;
  sub_21421C37C((uint64_t)v256);
  sub_2141E801C((uint64_t)v256, v38, &qword_253F149E8);
  v39 = v17 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_foregroundStyleScale;
  *(_OWORD *)v39 = 0u;
  *(_OWORD *)(v39 + 16) = 0u;
  *(_OWORD *)(v39 + 32) = 0u;
  *(_OWORD *)(v39 + 48) = 0u;
  *(_OWORD *)(v39 + 64) = 0u;
  *(_OWORD *)(v39 + 80) = 0u;
  *(_BYTE *)(v39 + 96) = -1;
  v40 = OBJC_IVAR____TtC6Charts25ChartContentRenderContext_accessibilityElementBins;
  *(_QWORD *)(v17 + v40) = sub_21436D008(v32);
  *(_QWORD *)(v17 + 16) = a1;
  swift_retain();
  sub_21421C39C((uint64_t)v254);
  sub_21421C510(a5);
  sub_21421C728(a3);
  swift_release();
  *(_QWORD *)(v17 + 24) = 0;
  *(double *)(v17 + 32) = a9;
  sub_21421C39C((uint64_t)v254);
  sub_21421C510(a5);
  sub_21421C728(a3);
  swift_release();
  *(_QWORD *)(v17 + 40) = 0;
  *(double *)(v17 + 48) = a10;
  sub_21421C39C((uint64_t)v254);
  sub_21421C510(a5);
  sub_21421C728(a3);
  swift_release();
  *(double *)(v17 + 344) = a11;
  sub_21421C39C((uint64_t)v254);
  sub_21421C510(a5);
  sub_21421C728(a3);
  *(_QWORD *)(v17 + 56) = a2;
  sub_21421C39C((uint64_t)v254);
  sub_21421C510(a5);
  sub_21421C728(a3);
  swift_release();
  *(double *)(v17 + 352) = a12;
  *(double *)(v17 + 360) = a13;
  *(double *)(v17 + 368) = a14;
  *(double *)(v17 + 376) = a15;
  sub_21421C39C((uint64_t)v254);
  sub_21421C510(a5);
  swift_release();
  if (a3)
  {
    v41 = a3;
    v42 = a4;
  }
  else
  {
    v43 = MEMORY[0x24BEE4AF8];
    v41 = sub_214368778(MEMORY[0x24BEE4AF8]);
    v42 = sub_214368778(v43);
  }
  *(_QWORD *)(v17 + 64) = v41;
  *(_QWORD *)(v17 + 72) = v42;
  sub_21421C728(a3);
  swift_release();
  sub_2141E801C(a5, (uint64_t)v252, &qword_253F14B70);
  if (sub_21421C754((uint64_t)v252) == 1)
  {
    v44 = 0;
    v45 = 0;
    v46 = 0;
    v47 = 0uLL;
    v48 = 0uLL;
    v49 = 0uLL;
    v50 = 0uLL;
    v51 = 8;
    v52 = 0uLL;
    v53 = 0uLL;
    v54 = 0uLL;
    v55 = 0uLL;
    v56 = 0uLL;
    v57 = 0uLL;
    v58 = 0uLL;
    v59 = 0uLL;
    v60 = 0uLL;
    v61 = 0uLL;
    v62 = 0uLL;
  }
  else
  {
    sub_2141E801C((uint64_t)v253, (uint64_t)v236, &qword_253F14B70);
    v51 = v250;
    v58 = v244;
    v59 = v245;
    v60 = v246;
    v61 = v247;
    v62 = v248;
    v46 = v249;
    v53 = v238;
    v54 = v239;
    v55 = v240;
    v56 = v241;
    v57 = v242;
    v45 = v243;
    v47 = v236[0];
    v48 = v236[1];
    v49 = v236[2];
    v50 = v236[3];
    v52 = v236[4];
    v44 = v237;
  }
  *(_OWORD *)(v17 + 80) = v47;
  *(_OWORD *)(v17 + 96) = v48;
  *(_OWORD *)(v17 + 112) = v49;
  *(_OWORD *)(v17 + 128) = v50;
  *(_OWORD *)(v17 + 144) = v52;
  *(_BYTE *)(v17 + 160) = v44;
  *(_OWORD *)(v17 + 168) = v53;
  *(_OWORD *)(v17 + 184) = v54;
  *(_OWORD *)(v17 + 200) = v55;
  *(_OWORD *)(v17 + 216) = v56;
  *(_OWORD *)(v17 + 232) = v57;
  *(_BYTE *)(v17 + 248) = v45;
  *(_OWORD *)(v17 + 256) = v58;
  *(_OWORD *)(v17 + 272) = v59;
  *(_OWORD *)(v17 + 288) = v60;
  *(_OWORD *)(v17 + 304) = v61;
  *(_OWORD *)(v17 + 320) = v62;
  *(_BYTE *)(v17 + 336) = v46;
  *(_BYTE *)(v17 + 337) = v51;
  v230 = a7;
  if (*(_QWORD *)(a6 + 16) && (v63 = sub_214336B74(0), (v64 & 1) != 0))
  {
    v65 = *(_QWORD *)(a6 + 56) + 112 * v63;
    v66 = *(_QWORD *)v65;
    v67 = *(_QWORD *)(v65 + 8);
    v69 = *(_QWORD *)(v65 + 16);
    v68 = *(_QWORD *)(v65 + 24);
    v71 = *(_QWORD *)(v65 + 32);
    v70 = *(_QWORD *)(v65 + 40);
    v72 = *(_QWORD *)(v65 + 48);
    v73 = *(_QWORD *)(v65 + 56);
    v74 = *(_QWORD *)(v65 + 64);
    v75 = *(_QWORD *)(v65 + 72);
    v76 = *(_QWORD *)(v65 + 80);
    v77 = *(_QWORD *)(v65 + 88);
    v78 = *(_QWORD *)(v65 + 96);
    v79 = *(unsigned __int8 *)(v65 + 104);
    if (v79 != 255)
    {
      v227 = *(_QWORD *)v65;
      v217 = *(_QWORD *)(v65 + 64);
      v222 = *(_QWORD *)(v65 + 8);
      v80 = *(_QWORD *)(v65 + 24);
      v207 = *(_QWORD *)(v65 + 80);
      v212 = *(_QWORD *)(v65 + 72);
      sub_21421BAE4(v66, v222, v69, v68, v71, v70, v72, v73, v74);
      v76 = v207;
      v75 = v212;
      v68 = v80;
      v74 = v217;
      v67 = v222;
      v66 = v227;
    }
  }
  else
  {
    v66 = 0;
    v67 = 0;
    v69 = 0;
    v68 = 0;
    v71 = 0;
    v70 = 0;
    v72 = 0;
    v73 = 0;
    v74 = 0;
    v75 = 0;
    v76 = 0;
    v77 = 0;
    v78 = 0;
    LOBYTE(v79) = -1;
  }
  v81 = v17 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_xScale;
  *(_QWORD *)v81 = v66;
  *(_QWORD *)(v81 + 8) = v67;
  *(_QWORD *)(v81 + 16) = v69;
  *(_QWORD *)(v81 + 24) = v68;
  *(_QWORD *)(v81 + 32) = v71;
  *(_QWORD *)(v81 + 40) = v70;
  *(_QWORD *)(v81 + 48) = v72;
  *(_QWORD *)(v81 + 56) = v73;
  *(_QWORD *)(v81 + 64) = v74;
  *(_QWORD *)(v81 + 72) = v75;
  *(_QWORD *)(v81 + 80) = v76;
  *(_QWORD *)(v81 + 88) = v77;
  *(_QWORD *)(v81 + 96) = v78;
  *(_BYTE *)(v81 + 104) = v79;
  if (*(_QWORD *)(a6 + 16) && (v82 = sub_214336B74(1u), (v83 & 1) != 0))
  {
    v84 = *(_QWORD *)(a6 + 56) + 112 * v82;
    v85 = *(_QWORD *)v84;
    v86 = *(_QWORD *)(v84 + 8);
    v88 = *(_QWORD *)(v84 + 16);
    v87 = *(_QWORD *)(v84 + 24);
    v90 = *(_QWORD *)(v84 + 32);
    v89 = *(_QWORD *)(v84 + 40);
    v91 = *(_QWORD *)(v84 + 48);
    v92 = *(_QWORD *)(v84 + 56);
    v93 = *(_QWORD *)(v84 + 64);
    v94 = *(_QWORD *)(v84 + 72);
    v95 = *(_QWORD *)(v84 + 80);
    v96 = *(_QWORD *)(v84 + 88);
    v97 = *(_QWORD *)(v84 + 96);
    v98 = *(unsigned __int8 *)(v84 + 104);
    if (v98 != 255)
    {
      v228 = *(_QWORD *)v84;
      v218 = *(_QWORD *)(v84 + 64);
      v223 = *(_QWORD *)(v84 + 8);
      v99 = *(_QWORD *)(v84 + 24);
      v208 = *(_QWORD *)(v84 + 80);
      v213 = *(_QWORD *)(v84 + 72);
      sub_21421BAE4(v85, v223, v88, v87, v90, v89, v91, v92, v93);
      v95 = v208;
      v94 = v213;
      v87 = v99;
      v93 = v218;
      v86 = v223;
      v85 = v228;
    }
  }
  else
  {
    v85 = 0;
    v86 = 0;
    v88 = 0;
    v87 = 0;
    v90 = 0;
    v89 = 0;
    v91 = 0;
    v92 = 0;
    v93 = 0;
    v94 = 0;
    v95 = 0;
    v96 = 0;
    v97 = 0;
    LOBYTE(v98) = -1;
  }
  v100 = v17 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_yScale;
  *(_QWORD *)v100 = v85;
  *(_QWORD *)(v100 + 8) = v86;
  *(_QWORD *)(v100 + 16) = v88;
  *(_QWORD *)(v100 + 24) = v87;
  *(_QWORD *)(v100 + 32) = v90;
  *(_QWORD *)(v100 + 40) = v89;
  *(_QWORD *)(v100 + 48) = v91;
  *(_QWORD *)(v100 + 56) = v92;
  *(_QWORD *)(v100 + 64) = v93;
  *(_QWORD *)(v100 + 72) = v94;
  *(_QWORD *)(v100 + 80) = v95;
  *(_QWORD *)(v100 + 88) = v96;
  *(_QWORD *)(v100 + 96) = v97;
  *(_BYTE *)(v100 + 104) = v98;
  if (*(_QWORD *)(a6 + 16) && (v101 = sub_214336B74(2u), (v102 & 1) != 0))
  {
    v103 = *(_QWORD *)(a6 + 56) + 112 * v101;
    v104 = *(_QWORD *)v103;
    v105 = *(_QWORD *)(v103 + 8);
    v106 = *(_QWORD *)(v103 + 16);
    v107 = *(_QWORD *)(v103 + 24);
    v108 = *(_QWORD *)(v103 + 32);
    v109 = *(_QWORD *)(v103 + 40);
    v110 = *(_QWORD *)(v103 + 48);
    v111 = *(_QWORD *)(v103 + 56);
    v113 = *(_QWORD *)(v103 + 64);
    v112 = *(_QWORD *)(v103 + 72);
    v114 = *(_QWORD *)(v103 + 80);
    v115 = *(_QWORD *)(v103 + 88);
    v116 = *(_QWORD *)(v103 + 96);
    v117 = *(unsigned __int8 *)(v103 + 104);
    if (v117 != 255)
    {
      v229 = *(_QWORD *)v103;
      v219 = *(_QWORD *)(v103 + 16);
      v224 = *(_QWORD *)(v103 + 8);
      v209 = *(_QWORD *)(v103 + 32);
      v214 = *(_QWORD *)(v103 + 24);
      sub_21421BAE4(v104, v105, v106, v107, v108, v109, v110, v111, v113);
      v108 = v209;
      v107 = v214;
      v106 = v219;
      v105 = v224;
      v104 = v229;
    }
  }
  else
  {
    v104 = 0;
    v105 = 0;
    v106 = 0;
    v107 = 0;
    v108 = 0;
    v109 = 0;
    v110 = 0;
    v111 = 0;
    v113 = 0;
    v112 = 0;
    v114 = 0;
    v115 = 0;
    v116 = 0;
    LOBYTE(v117) = -1;
  }
  v118 = v17 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_xOffsetScale;
  v119 = *(_QWORD *)(v17 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_xOffsetScale);
  v120 = *(_QWORD *)(v17 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_xOffsetScale + 8);
  v121 = *(_QWORD *)(v17 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_xOffsetScale + 16);
  v122 = *(_QWORD *)(v17 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_xOffsetScale + 24);
  v123 = *(_QWORD *)(v17 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_xOffsetScale + 32);
  v124 = *(_QWORD *)(v17 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_xOffsetScale + 40);
  v125 = *(_QWORD *)(v17 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_xOffsetScale + 48);
  v126 = *(_QWORD *)(v17 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_xOffsetScale + 56);
  v127 = *(_OWORD *)(v17 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_xOffsetScale + 64);
  v128 = *(_OWORD *)(v17 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_xOffsetScale + 80);
  v129 = *(_QWORD *)(v17 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_xOffsetScale + 96);
  v130 = *(_BYTE *)(v17 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_xOffsetScale + 104);
  *(_QWORD *)v118 = v104;
  *(_QWORD *)(v118 + 8) = v105;
  *(_QWORD *)(v118 + 16) = v106;
  *(_QWORD *)(v118 + 24) = v107;
  *(_QWORD *)(v118 + 32) = v108;
  *(_QWORD *)(v118 + 40) = v109;
  *(_QWORD *)(v118 + 48) = v110;
  *(_QWORD *)(v118 + 56) = v111;
  *(_QWORD *)(v118 + 64) = v113;
  *(_QWORD *)(v118 + 72) = v112;
  *(_QWORD *)(v118 + 80) = v114;
  *(_QWORD *)(v118 + 88) = v115;
  *(_QWORD *)(v118 + 96) = v116;
  *(_BYTE *)(v118 + 104) = v117;
  sub_21421BB38(v119, v120, v121, v122, v123, v124, v125, v126, v127, *((uint64_t *)&v127 + 1), v128, *((uint64_t *)&v128 + 1), v129, v130);
  if (*(_QWORD *)(a6 + 16) && (v131 = sub_214336B74(3u), (v132 & 1) != 0))
  {
    v133 = *(_QWORD *)(a6 + 56) + 112 * v131;
    v134 = *(_QWORD *)v133;
    v135 = *(_QWORD *)(v133 + 8);
    v136 = *(_QWORD *)(v133 + 16);
    v137 = *(_QWORD *)(v133 + 24);
    v138 = *(_QWORD *)(v133 + 32);
    v139 = *(_QWORD *)(v133 + 40);
    v140 = *(_QWORD *)(v133 + 48);
    v141 = *(_QWORD *)(v133 + 56);
    v142 = *(_QWORD *)(v133 + 64);
    v143 = *(_QWORD *)(v133 + 72);
    v144 = *(_QWORD *)(v133 + 80);
    v145 = *(_QWORD *)(v133 + 88);
    v146 = *(_QWORD *)(v133 + 96);
    v147 = *(unsigned __int8 *)(v133 + 104);
    if (v147 != 255)
    {
      v220 = *(_QWORD *)(v133 + 8);
      v225 = *(_QWORD *)v133;
      v210 = *(_QWORD *)(v133 + 24);
      v215 = *(_QWORD *)(v133 + 16);
      v205 = *(_QWORD *)(v133 + 32);
      sub_21421BAE4(v134, v135, v136, v137, v138, v139, v140, v141, v142);
      v138 = v205;
      v137 = v210;
      v136 = v215;
      v135 = v220;
      v134 = v225;
    }
  }
  else
  {
    v134 = 0;
    v135 = 0;
    v136 = 0;
    v137 = 0;
    v138 = 0;
    v139 = 0;
    v140 = 0;
    v141 = 0;
    v142 = 0;
    v143 = 0;
    v144 = 0;
    v145 = 0;
    v146 = 0;
    LOBYTE(v147) = -1;
  }
  v148 = v17 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_yOffsetScale;
  v149 = *(_QWORD *)(v17 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_yOffsetScale);
  v150 = *(_QWORD *)(v17 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_yOffsetScale + 8);
  v151 = *(_QWORD *)(v17 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_yOffsetScale + 16);
  v152 = *(_QWORD *)(v17 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_yOffsetScale + 24);
  v153 = *(_QWORD *)(v17 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_yOffsetScale + 32);
  v154 = *(_QWORD *)(v17 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_yOffsetScale + 40);
  v155 = *(_QWORD *)(v17 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_yOffsetScale + 48);
  v156 = *(_QWORD *)(v17 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_yOffsetScale + 56);
  v157 = *(_OWORD *)(v17 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_yOffsetScale + 64);
  v158 = *(_OWORD *)(v17 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_yOffsetScale + 80);
  v159 = *(_QWORD *)(v17 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_yOffsetScale + 96);
  v160 = *(_BYTE *)(v17 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_yOffsetScale + 104);
  *(_QWORD *)v148 = v134;
  *(_QWORD *)(v148 + 8) = v135;
  *(_QWORD *)(v148 + 16) = v136;
  *(_QWORD *)(v148 + 24) = v137;
  *(_QWORD *)(v148 + 32) = v138;
  *(_QWORD *)(v148 + 40) = v139;
  *(_QWORD *)(v148 + 48) = v140;
  *(_QWORD *)(v148 + 56) = v141;
  *(_QWORD *)(v148 + 64) = v142;
  *(_QWORD *)(v148 + 72) = v143;
  *(_QWORD *)(v148 + 80) = v144;
  *(_QWORD *)(v148 + 88) = v145;
  *(_QWORD *)(v148 + 96) = v146;
  *(_BYTE *)(v148 + 104) = v147;
  sub_21421BB38(v149, v150, v151, v152, v153, v154, v155, v156, v157, *((uint64_t *)&v157 + 1), v158, *((uint64_t *)&v158 + 1), v159, v160);
  if (*(_QWORD *)(a6 + 16) && (v161 = sub_214336B74(6u), (v162 & 1) != 0))
  {
    v163 = *(_QWORD *)(a6 + 56) + 112 * v161;
    v211 = *(_QWORD *)(v163 + 16);
    v216 = *(_QWORD *)(v163 + 8);
    v206 = *(_QWORD *)(v163 + 24);
    v164 = *(_QWORD *)(v163 + 32);
    v165 = *(_QWORD *)(v163 + 40);
    v166 = *(_QWORD *)(v163 + 48);
    v167 = *(_QWORD *)(v163 + 56);
    v168 = *(_QWORD *)(v163 + 72);
    v221 = *(_QWORD *)(v163 + 64);
    v226 = *(_QWORD *)v163;
    v169 = *(_QWORD *)(v163 + 80);
    v170 = *(_QWORD *)(v163 + 88);
    v171 = *(_QWORD *)(v163 + 96);
    v172 = *(_BYTE *)(v163 + 104);
    sub_21421C7C0(*(_QWORD *)v163, v216, v211, v206, v164, v165, v166, v167, v221, v168, v169, v170, v171, v172);
    swift_bridgeObjectRelease();
    swift_release();
    v173 = v166;
    v174 = v216;
    v175 = v221;
    v177 = v206;
    v176 = v211;
    v178 = v226;
  }
  else
  {
    swift_release();
    swift_bridgeObjectRelease();
    v178 = 0;
    v174 = 0;
    v176 = 0;
    v177 = 0;
    v164 = 0;
    v165 = 0;
    v173 = 0;
    v167 = 0;
    v175 = 0;
    v168 = 0;
    v169 = 0;
    v170 = 0;
    v171 = 0;
    v172 = -1;
  }
  v179 = v17 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_symbolSizeScale;
  v180 = *(_QWORD *)(v17 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_symbolSizeScale);
  v181 = *(_QWORD *)(v17 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_symbolSizeScale + 8);
  v182 = *(_QWORD *)(v17 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_symbolSizeScale + 16);
  v183 = *(_QWORD *)(v17 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_symbolSizeScale + 24);
  v184 = *(_QWORD *)(v17 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_symbolSizeScale + 32);
  v185 = *(_QWORD *)(v17 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_symbolSizeScale + 40);
  v186 = *(_QWORD *)(v17 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_symbolSizeScale + 48);
  v187 = *(_QWORD *)(v17 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_symbolSizeScale + 56);
  v188 = *(_OWORD *)(v17 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_symbolSizeScale + 64);
  v189 = *(_OWORD *)(v17 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_symbolSizeScale + 80);
  v190 = *(_QWORD *)(v17 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_symbolSizeScale + 96);
  v191 = *(_BYTE *)(v17 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_symbolSizeScale + 104);
  *(_QWORD *)v179 = v178;
  *(_QWORD *)(v179 + 8) = v174;
  *(_QWORD *)(v179 + 16) = v176;
  *(_QWORD *)(v179 + 24) = v177;
  *(_QWORD *)(v179 + 32) = v164;
  *(_QWORD *)(v179 + 40) = v165;
  *(_QWORD *)(v179 + 48) = v173;
  *(_QWORD *)(v179 + 56) = v167;
  *(_QWORD *)(v179 + 64) = v175;
  *(_QWORD *)(v179 + 72) = v168;
  *(_QWORD *)(v179 + 80) = v169;
  *(_QWORD *)(v179 + 88) = v170;
  *(_QWORD *)(v179 + 96) = v171;
  *(_BYTE *)(v179 + 104) = v172;
  sub_21421BB38(v180, v181, v182, v183, v184, v185, v186, v187, v188, *((uint64_t *)&v188 + 1), v189, *((uint64_t *)&v189 + 1), v190, v191);
  v192 = v17 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_symbolScale;
  swift_beginAccess();
  sub_21421C778(v230, v192);
  swift_endAccess();
  v193 = v17 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_lineStyleScale;
  sub_2141E801C(v17 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_lineStyleScale, (uint64_t)v236, &qword_253F149E8);
  sub_2141E801C(a8, v193, &qword_253F149E8);
  sub_21421B9E4((uint64_t)v236);
  v194 = v17 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_foregroundStyleScale;
  v195 = *(_QWORD *)(v17 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_foregroundStyleScale + 8);
  v233 = *(_QWORD *)(v17 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_foregroundStyleScale);
  v235 = v17;
  v196 = *(_QWORD *)(v17 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_foregroundStyleScale + 16);
  v197 = *(_QWORD *)(v17 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_foregroundStyleScale + 24);
  v198 = *(_QWORD *)(v17 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_foregroundStyleScale + 32);
  v199 = *(_QWORD *)(v17 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_foregroundStyleScale + 40);
  v200 = *(_QWORD *)(v17 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_foregroundStyleScale + 48);
  v201 = *(_QWORD *)(v17 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_foregroundStyleScale + 56);
  v231 = *(_OWORD *)(v17 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_foregroundStyleScale + 64);
  v203 = *(_QWORD *)(v17 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_foregroundStyleScale + 80);
  v202 = *(_QWORD *)(v17 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_foregroundStyleScale + 88);
  LOBYTE(v193) = *(_BYTE *)(v194 + 96);
  sub_2141E801C(a16, v194, &qword_253F149E0);
  sub_21421B874(v233, v195, v196, v197, v198, v199, v200, v201, v231, *((uint64_t *)&v231 + 1), v203, v202, v193);
  return v235;
}

uint64_t sub_214205DD8@<X0>(char a1@<W0>, _OWORD *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, __int128 *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD v67[13];
  char v68;
  _BYTE v69[88];
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  char v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  _BYTE v86[24];
  __n128 v87;
  __int128 v88;
  __int128 v89;
  uint64_t v90;
  _BYTE v91[24];
  __int128 v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  __int128 v99;
  _BYTE __dst[280];

  if (a1 == 1)
  {
    v64 = a4;
    v65 = a6;
    v66 = a3;
    swift_beginAccess();
    memcpy(__dst, a2 + 5, 0x102uLL);
    sub_21420073C(1, (uint64_t)v69);
    sub_2141E801C((uint64_t)v69, (uint64_t)&v75, &qword_253F12428);
    if (*((_QWORD *)&v76 + 1))
    {
      v81 = v75;
      v82 = v76;
      v20 = v77;
      v21 = v78;
      v22 = v80;
      v23 = v79;
      sub_21421CE28((uint64_t)v69, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_2141EF260);
      sub_21421A07C(v20, v21, v23, v22, 3, (uint64_t)&v70);
      v24 = v70;
      v25 = v71;
      v27 = v72;
      v26 = v73;
      v28 = v74;
      sub_21421CE28((uint64_t)v69, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_21421C6D4);
      v83 = v81;
      v84 = v82;
      sub_21421CC0C((uint64_t)&v83, (uint64_t)v86);
      sub_21421CC48((uint64_t)v86);
      v85 = *((_QWORD *)&v84 + 1);
      sub_2141F9244((uint64_t)&v85);
      v29 = v20;
      v30 = v24;
      sub_2141EF1B0(v29, v21, v23);
    }
    else
    {
      v30 = 0;
      v25 = 0;
      v27 = 0;
      v26 = 0;
      v28 = 2;
    }
    v37 = (char *)a2 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_environment;
    swift_beginAccess();
    v38 = &v37[*(int *)(type metadata accessor for ChartContentRenderContext.Environment(0) + 92)];
    v39 = *((_QWORD *)v38 + 2);
    v92 = *(_OWORD *)v38;
    v93 = v39;
    v94 = v30;
    v95 = v25;
    v96 = v27;
    v97 = v26;
    v98 = v28;
    v99 = a2[23];
    v36 = OBJC_IVAR____TtC6Charts25ChartContentRenderContext_yScale;
  }
  else
  {
    if (a1)
    {
      swift_release();
      sub_2141EF1DC((uint64_t)__dst);
      v31 = __dst;
      v32 = a6;
LABEL_15:
      sub_2141E801C((uint64_t)v31, v32, qword_253F12398);
      goto LABEL_16;
    }
    v64 = a4;
    v65 = a6;
    v66 = a3;
    swift_beginAccess();
    memcpy(__dst, a2 + 5, 0x102uLL);
    sub_21420073C(0, (uint64_t)v69);
    sub_2141E801C((uint64_t)v69, (uint64_t)&v75, &qword_253F12428);
    if (*((_QWORD *)&v76 + 1))
    {
      v81 = v75;
      v82 = v76;
      v9 = v77;
      v10 = v78;
      v11 = v80;
      v12 = v79;
      sub_21421CE28((uint64_t)v69, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_2141EF260);
      sub_21421A07C(v9, v10, v12, v11, 2, (uint64_t)&v70);
      v13 = v70;
      v14 = v71;
      v16 = v72;
      v15 = v73;
      v17 = v74;
      sub_21421CE28((uint64_t)v69, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_21421C6D4);
      v83 = v81;
      v84 = v82;
      sub_21421CC0C((uint64_t)&v83, (uint64_t)v86);
      sub_21421CC48((uint64_t)v86);
      v85 = *((_QWORD *)&v84 + 1);
      sub_2141F9244((uint64_t)&v85);
      v18 = v9;
      v19 = v13;
      sub_2141EF1B0(v18, v10, v12);
    }
    else
    {
      v19 = 0;
      v14 = 0;
      v16 = 0;
      v15 = 0;
      v17 = 2;
    }
    v33 = (char *)a2 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_environment;
    swift_beginAccess();
    v34 = &v33[*(int *)(type metadata accessor for ChartContentRenderContext.Environment(0) + 88)];
    v35 = *((_QWORD *)v34 + 2);
    v92 = *(_OWORD *)v34;
    v93 = v35;
    v94 = v19;
    v95 = v14;
    v96 = v16;
    v97 = v15;
    v98 = v17;
    v99 = a2[22];
    v36 = OBJC_IVAR____TtC6Charts25ChartContentRenderContext_xScale;
  }
  v40 = (char *)a2 + v36;
  v41 = v40[104];
  if (v41 == 255)
  {
    swift_release();
    sub_2141EF1DC((uint64_t)v67);
    v31 = v67;
    v32 = v65;
    goto LABEL_15;
  }
  v43 = *((_QWORD *)v40 + 11);
  v42 = *((_QWORD *)v40 + 12);
  v45 = *((_QWORD *)v40 + 9);
  v44 = *((_QWORD *)v40 + 10);
  v46 = *((_QWORD *)v40 + 7);
  v47 = *((_QWORD *)v40 + 8);
  v49 = *((_QWORD *)v40 + 5);
  v48 = *((_QWORD *)v40 + 6);
  v51 = *((_QWORD *)v40 + 3);
  v50 = *((_QWORD *)v40 + 4);
  v52 = *((_QWORD *)v40 + 1);
  v53 = *((_QWORD *)v40 + 2);
  v54 = *(_QWORD *)v40;
  v67[0] = v54;
  v67[1] = v52;
  v67[2] = v53;
  v67[3] = v51;
  v67[4] = v50;
  v67[5] = v49;
  v58 = v50;
  v59 = v49;
  v67[6] = v48;
  v67[7] = v46;
  v60 = v48;
  v61 = v46;
  v67[8] = v47;
  v67[9] = v45;
  v67[10] = v44;
  v67[11] = v43;
  v62 = v43;
  v63 = v42;
  v67[12] = v42;
  v68 = v41 & 1;
  sub_21421BAE4(v54, v52, v53, v51, v50, v49, v48, v46, v47);
  sub_214206D2C((uint64_t)v67, v66, v64, (char **)a5, v65);
  nullsub_1(v65, v55);
  sub_21421BB38(v54, v52, v53, v51, v58, v59, v60, v61, v47, v45, v44, v62, v63, v41);
  swift_release();
LABEL_16:
  v56 = a5[1];
  v88 = *a5;
  v89 = v56;
  sub_21421CC0C((uint64_t)&v88, (uint64_t)v91);
  sub_21421CC48((uint64_t)v91);
  v90 = *((_QWORD *)&v89 + 1);
  sub_2141F9244((uint64_t)&v90);
  sub_21421CDBC((__n128 *)a5 + 2, &v87);
  return sub_21421CDF8((uint64_t)&v87);
}

uint64_t sub_2142062C4@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  double v7;
  double v8;
  int v9;
  uint64_t result;
  __int128 v11;
  _BYTE v12[136];
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  if (a2 == 5)
  {
    v6 = v3 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_symbolScale;
    swift_beginAccess();
    if (*(unsigned __int8 *)(v6 + 128) == 255)
    {
      v15 = 0;
      v13 = 0u;
      v14 = 0u;
    }
    else
    {
      sub_2141E070C(v6, (uint64_t)v12, &qword_254D695C8);
      v7 = *(double *)(a1 + 32);
      v8 = *(double *)(a1 + 40);
      v9 = *(char *)(a1 + 48);
      if (v9 < 0)
      {
        LOBYTE(v9) = v9 & 1;
        v7 = (v7 + v8) * 0.5;
        v8 = 0.0;
      }
      else
      {
        sub_2141DD14C(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_BYTE *)(a1 + 48));
      }
      sub_2142B6C10(*(uint64_t *)&v7, *(uint64_t *)&v8, v9, (uint64_t)&v13);
      sub_2141E60B8(*(uint64_t *)&v7, *(uint64_t *)&v8, v9);
      result = sub_2141E0750((uint64_t)v12, &qword_254D695C8);
      if (*((_QWORD *)&v14 + 1))
      {
        v11 = v14;
        *(_OWORD *)a3 = v13;
        *(_OWORD *)(a3 + 16) = v11;
        *(_QWORD *)(a3 + 32) = v15;
        return result;
      }
    }
    if (qword_253F10D60 != -1)
      swift_once();
    sub_2141F9E40((uint64_t)&qword_253F1C950, a3);
    return sub_2141E0750((uint64_t)&v13, (uint64_t *)&unk_253F0FF58);
  }
  else
  {
    if (qword_253F10D60 != -1)
      swift_once();
    return sub_2141F9E40((uint64_t)&qword_253F1C950, a3);
  }
}

void sub_21420648C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  char v9;
  __int128 v10[2];
  uint64_t v11;

  sub_21421D0E4((__int128 *)(a2 + 24), (uint64_t)v10);
  sub_214219E84(*(_QWORD *)(a4 + 32), *(_QWORD *)(a4 + 40), *(_BYTE *)(a4 + 48), *(double *)(a2 + 64));
  if ((v9 & 1) == 0)
    sub_21421D0E4(v10, (uint64_t)&v11);
  __asm { BR              X10 }
}

double sub_214206578()
{
  double *v0;
  uint64_t v1;
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double result;
  double v9;
  double v10;
  double v11;

  v5 = (v4 + v3) * 0.5;
  v6 = v5 - v2 * 0.5;
  v7 = v2 * 0.5 + v5;
  if (v3 == v4)
    result = v5 - v2 * 0.5;
  else
    result = v3;
  if (v3 == v4)
    v9 = v2 * 0.5 + v5;
  else
    v9 = v4;
  v10 = v6 + *(double *)(v1 + 8);
  v11 = v7 + *(double *)(v1 + 16);
  *v0 = v10;
  v0[1] = v11;
  v0[2] = v10;
  v0[3] = v11;
  v0[4] = result;
  v0[5] = v9;
  return result;
}

double sub_21420667C@<D0>(uint64_t a1@<X1>, uint64_t a2@<X3>, uint64_t a3@<X4>, double *a4@<X8>)
{
  double v8;
  uint64_t v9;
  double v10;
  char v11;
  double v12;
  double v13;
  double v14;
  double v15;
  uint64_t v16;
  double v17;
  char v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  BOOL v29;
  double v30;
  double v31;
  double result;
  double v33;
  __int128 v34[2];
  double v35;
  double v36;
  double v37;
  double v38;
  char v39;
  double v40;
  double v41;
  double v42;
  double v43;
  char v44;

  sub_21421D0E4((__int128 *)(a1 + 24), (uint64_t)v34);
  v8 = *(double *)(a1 + 64);
  *(double *)&v9 = COERCE_DOUBLE(sub_214219E84(*(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 40), *(_BYTE *)(a2 + 48), v8));
  if ((v11 & 1) != 0)
  {
    v13 = NAN;
    v12 = NAN;
  }
  else
  {
    v12 = *(double *)&v9;
    v13 = v10;
    sub_21421D0E4(v34, (uint64_t)&v40);
    if (v44)
    {
      if (v44 == 1)
      {
        v14 = (v13 - v12) * v42 + v12;
        v12 = v41 + (v13 - v12) * v40 + v12;
        v13 = v43 + v14;
      }
    }
    else
    {
      v15 = (v13 - v12) * v40;
      v13 = (v13 - v12) * v41 + v12;
      v12 = v15 + v12;
    }
  }
  *(double *)&v16 = COERCE_DOUBLE(sub_214219E84(*(_QWORD *)(a3 + 32), *(_QWORD *)(a3 + 40), *(_BYTE *)(a3 + 48), v8));
  if ((v18 & 1) != 0)
  {
    v20 = NAN;
    v19 = NAN;
  }
  else
  {
    v19 = *(double *)&v16;
    v20 = v17;
    sub_21421D0E4(v34, (uint64_t)&v35);
    if (v39)
    {
      if (v39 == 1)
      {
        v21 = (v20 - v19) * v37 + v19;
        v19 = v36 + (v20 - v19) * v35 + v19;
        v20 = v38 + v21;
      }
    }
    else
    {
      v22 = (v20 - v19) * v35;
      v20 = (v20 - v19) * v36 + v19;
      v19 = v22 + v19;
    }
  }
  v23 = v13 + v12;
  v24 = v20 + v19;
  if (v20 >= v19)
    v25 = v19;
  else
    v25 = v20;
  if (v12 > v13)
    v26 = v12;
  else
    v26 = v13;
  if (v13 >= v12)
    v27 = v12;
  else
    v27 = v13;
  if (v19 > v20)
    v28 = v19;
  else
    v28 = v20;
  v29 = v23 < v24;
  if (v23 < v24)
    v30 = v27;
  else
    v30 = v25;
  if (v29)
    v31 = v28;
  else
    v31 = v26;
  result = v30 + *(double *)(a1 + 8);
  v33 = v31 + *(double *)(a1 + 16);
  *a4 = result;
  a4[1] = v33;
  a4[2] = result;
  a4[3] = v33;
  a4[4] = result;
  a4[5] = v33;
  return result;
}

uint64_t sub_214206844@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, float64x2_t *a5@<X8>, double a6@<D0>, double a7@<D1>, double a8@<D2>, double a9@<D3>)
{
  void (*v15)(float64_t *__return_ptr, double *);
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 v18;
  uint64_t result;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  double v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  uint64_t v30;
  float64x2_t v31;
  float64_t v32;
  float64_t v33;
  float64x2_t v34;
  double v38;
  float64_t v39;
  _QWORD v40[8];
  uint64_t v41;
  _BYTE v42[120];

  sub_2141E801C(a1, (uint64_t)v40, &qword_253F13368);
  v15 = (void (*)(float64_t *__return_ptr, double *))v40[0];
  v16 = v40[4];
  v17 = v40[7];
  v18 = v41;
  result = sub_2141E801C(a1, (uint64_t)v42, &qword_253F13368);
  if ((v42[104] & 1) != 0)
  {
    v20 = (float64x2_t)vdupq_n_s64(0x7FF8000000000000uLL);
    v21 = v20;
  }
  else
  {
    v38 = a6;
    swift_retain();
    sub_2141D975C(v16);
    swift_bridgeObjectRetain();
    sub_2141E83DC(v17, v18);
    v15(&v39, &v38);
    sub_21421D004(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_21421BB6C);
    v33 = v39;
    v38 = a7;
    swift_retain();
    sub_2141D975C(v16);
    swift_bridgeObjectRetain();
    sub_2141E83DC(v17, v18);
    v15(&v39, &v38);
    sub_21421D004(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_21421BB6C);
    v22.f64[0] = v33;
    v22.f64[1] = v39;
    v34 = v22;
    v38 = a8;
    swift_retain();
    sub_2141D975C(v16);
    swift_bridgeObjectRetain();
    sub_2141E83DC(v17, v18);
    v15(&v39, &v38);
    sub_21421D004(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_21421BB6C);
    v32 = v39;
    v38 = a9;
    swift_retain();
    sub_2141D975C(v16);
    swift_bridgeObjectRetain();
    sub_2141E83DC(v17, v18);
    v15(&v39, &v38);
    result = sub_21421D004(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_21421BB6C);
    v21.f64[0] = v32;
    v20 = v34;
    v21.f64[1] = v39;
  }
  v23 = 40;
  if (!a3)
    v23 = 24;
  v24 = 48;
  if (!a3)
    v24 = 32;
  v25 = *(double *)(a4 + v24);
  v26 = *(double *)(a4 + v23);
  v27 = (float64x2_t)vdupq_lane_s64(*a2, 0);
  v28 = vaddq_f64(v21, v27);
  v29 = vaddq_f64(v20, v27);
  v30 = *(uint64_t *)(a4 + 344);
  if (*(double *)&v30 > 0.0)
  {
    v31 = (float64x2_t)vdupq_lane_s64(v30, 0);
    v29 = vdivq_f64(vrndaq_f64(vmulq_n_f64(v29, *(double *)&v30)), v31);
    v28 = vdivq_f64(vrndaq_f64(vmulq_n_f64(v28, *(double *)&v30)), v31);
    v26 = round(v26 * *(double *)&v30) / *(double *)&v30;
    v25 = round(v25 * *(double *)&v30) / *(double *)&v30;
  }
  *a5 = v29;
  a5[1] = v28;
  a5[2].f64[0] = v26;
  a5[2].f64[1] = v25;
  return result;
}

uint64_t sub_214206AD0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  int v6;
  int v7;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  float64x2_t v12;
  char v13;
  float64x2_t v14;
  double v15;
  float64x2_t v16;
  float64x2_t v18;
  int64x2_t v19;
  double v20[7];
  _BYTE v21[144];
  __int16 v22;
  char v23;
  __int128 v24;
  char v25;
  __int128 v26;
  char v27;
  _BYTE __dst[264];

  sub_2141EDFD8(a1, (uint64_t)v21);
  if (sub_2141EF1D0((uint64_t)v21) == 5)
  {
    v2 = sub_2141EF754((uint64_t)v21);
    v3 = *(_BYTE *)(v2 + 96);
    v4 = *(_BYTE *)(v2 + 120);
    v5 = *(_BYTE *)(v2 + 74) & 1;
    v22 = *(_WORD *)(v2 + 72);
    v23 = v5;
    v24 = *(_OWORD *)(v2 + 80);
    v25 = v3;
    v26 = *(_OWORD *)(v2 + 104);
    v27 = v4;
    swift_beginAccess();
    memcpy(__dst, (const void *)(v1 + 80), 0x102uLL);
    sub_21421CA78((uint64_t)__dst, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char))sub_2141EF260);
    sub_2142008A0((uint64_t)&v22, (uint64_t)v20);
    sub_21421CA78((uint64_t)__dst, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char))sub_21421C6D4);
    v6 = LOBYTE(v20[0]);
    if (LOBYTE(v20[0]) == 3)
    {
      sub_21421CBB0((uint64_t)v20, (void (*)(uint64_t, uint64_t, uint64_t))sub_2141EF1BC);
      v7 = 0;
      v8 = 1;
    }
    else
    {
      swift_beginAccess();
      v9 = *(_QWORD *)(v1 + 64);
      v10 = *(_QWORD *)(v9 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v10)
      {
        sub_21421CBB0((uint64_t)v20, (void (*)(uint64_t, uint64_t, uint64_t))sub_2141DD164);
        v11 = sub_214336BCC(v20);
        v12 = 0uLL;
        if ((v13 & 1) != 0)
          v12 = *(float64x2_t *)(*(_QWORD *)(v9 + 56) + 16 * v11);
        v18 = v12;
        sub_21421CBB0((uint64_t)v20, (void (*)(uint64_t, uint64_t, uint64_t))sub_2141EF1BC);
        v14 = v18;
      }
      else
      {
        v14 = 0uLL;
      }
      v19 = (int64x2_t)v14;
      if (v6)
      {
        if (v6 == 1)
        {
          sub_21421CBB0((uint64_t)v20, (void (*)(uint64_t, uint64_t, uint64_t))sub_2141EF1BC);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (*(double *)v19.i64 > -*(double *)&v19.i64[1])
            v15 = *(double *)v19.i64;
          else
            v15 = -*(double *)&v19.i64[1];
          v16 = 0uLL;
          if (v15 != 0.0)
            v16 = vmulq_f64(vdivq_f64((float64x2_t)v19, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v15, 0)), (float64x2_t)vdupq_n_s64(0x4059000000000000uLL));
        }
        else
        {
          sub_21421CBB0((uint64_t)v20, (void (*)(uint64_t, uint64_t, uint64_t))sub_2141EF1BC);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v16 = vmulq_n_f64((float64x2_t)xmmword_214427B80, vsubq_f64((float64x2_t)v19, (float64x2_t)vdupq_laneq_s64(v19, 1)).f64[0]);
        }
      }
      else
      {
        sub_21421CBB0((uint64_t)v20, (void (*)(uint64_t, uint64_t, uint64_t))sub_2141EF1BC);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v16 = (float64x2_t)v19;
      }
      v8 = v16.f64[1] == 0.0;
      v7 = (v16.f64[0] == 0.0) << 8;
    }
  }
  else
  {
    v8 = 0;
    v7 = 0;
  }
  return v7 | v8;
}

uint64_t sub_214206D2C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, int a3@<W3>, char **a4@<X4>, uint64_t a5@<X8>)
{
  char *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t result;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  unint64_t v64;
  char v65;
  _OWORD *v66;
  __int128 *v67;
  uint64_t v68;
  char v69;
  char *v70;
  char *v71;
  uint64_t v72;
  double v73;
  uint64_t v74;
  double v75;
  double v76;
  double v77;
  double v78;
  uint64_t v79;
  char v80;
  __int128 v81;
  void (*v82)(_QWORD, _QWORD, _QWORD);
  uint64_t v83;
  uint64_t v84;
  char v85;
  void (*v86)(char *, char *, uint64_t);
  char *v87;
  char *v88;
  char v89;
  char *v90;
  char *v91;
  char *v92;
  uint64_t v93;
  char *v94;
  void (*v95)(char *, char *, uint64_t);
  char *v96;
  char *v97;
  void (*v98)(char *, char *, uint64_t);
  uint64_t v99;
  void (*v100)(char *, uint64_t);
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  __int128 v107;
  uint64_t v108;
  uint64_t v109;
  double v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  void (*v116)(__int128 *__return_ptr, _QWORD *);
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char v123;
  char v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  __int128 v136;
  uint64_t v137;
  char v138;
  void (*v139)(char *, uint64_t);
  uint64_t v140;
  char v141;
  uint64_t v142;
  uint64_t (*v143)(__int128 *);
  __int128 v144;
  void (*v145)(__int128 *__return_ptr, _QWORD *);
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char v151;
  char v152;
  int v153;
  int v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  char v160;
  char v161;
  char v162;
  __int128 v163;
  uint64_t v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  uint64_t v169;
  char *v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  uint64_t v174;
  char *v175;
  char *v176;
  uint64_t v177;
  char *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  char *v185;
  char *v186;
  uint64_t v187;
  void (*v188)(_QWORD, _QWORD, _QWORD);
  __int128 v189;
  char *v190;
  uint64_t v191;
  char *v192;
  void (*v193)(char *, char *, uint64_t);
  char *v194;
  char *v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  uint64_t v199;
  char *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  _OWORD *v204;
  __int128 v205;
  int v206;
  _BYTE v207[7];
  _BYTE v208[7];
  char v209;
  _DWORD v210[2];
  _DWORD v211[2];
  char v212;
  _DWORD v213[2];
  _QWORD v214[3];
  char v215;
  uint64_t v216;
  char *v217;
  uint64_t v218;
  char v219;
  __int128 v220;
  char v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  _OWORD v228[2];
  _OWORD v229[2];
  uint64_t v230;
  _QWORD v231[2];
  unsigned __int8 v232;
  __int128 v233;
  uint64_t v234;
  unsigned __int8 v235;
  __int128 v236;
  __int128 v237;
  _OWORD v238[4];
  _QWORD v239[14];
  _QWORD v240[13];
  char v241;
  __n128 v242;
  __n128 v243;
  char v244;
  __n128 v245;
  __n128 v246;
  char v247;

  v206 = a3;
  *(_QWORD *)&v198 = a2;
  sub_2141E801C(a1, (uint64_t)v239, &qword_253F13368);
  v179 = v239[1];
  v180 = v239[4];
  v181 = v239[5];
  v182 = v239[6];
  v183 = v239[7];
  v184 = v239[8];
  v8 = *a4;
  v194 = a4[1];
  v195 = v8;
  LODWORD(v193) = *((unsigned __int8 *)a4 + 16);
  *(_QWORD *)&v197 = a4[3];
  v9 = (uint64_t *)(a4 + 4);
  v192 = a4[4];
  v200 = a4[5];
  LODWORD(v199) = *((unsigned __int8 *)a4 + 48);
  v196 = *(_OWORD *)(a4 + 7);
  v191 = sub_2141D8BF8(&qword_253F12168);
  MEMORY[0x24BDAC7A8](v191);
  v178 = (char *)&v169 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v177 = sub_2141D8BF8(&qword_253F13358);
  MEMORY[0x24BDAC7A8](v177);
  v202 = (uint64_t)&v169 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DateBins(0);
  MEMORY[0x24BDAC7A8](v12);
  v201 = (uint64_t)&v169 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_2141D8BF8(&qword_253F121F8);
  MEMORY[0x24BDAC7A8](v14);
  v185 = (char *)&v169 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_214423C54();
  MEMORY[0x24BDAC7A8](v16);
  v175 = (char *)&v169 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v171 = sub_2141D8BF8(&qword_253F15D60);
  v18 = MEMORY[0x24BDAC7A8](v171);
  v173 = (char *)&v169 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v170 = (char *)&v169 - v20;
  v172 = sub_2141D8BF8((uint64_t *)&unk_253F15EB0);
  v21 = MEMORY[0x24BDAC7A8](v172);
  v23 = (char *)&v169 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v21);
  v174 = (uint64_t)&v169 - v24;
  v203 = sub_214423B70();
  *(_QWORD *)&v205 = *(_QWORD *)(v203 - 8);
  v25 = MEMORY[0x24BDAC7A8](v203);
  v190 = (char *)&v169 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = MEMORY[0x24BDAC7A8](v25);
  v176 = (char *)&v169 - v28;
  v29 = MEMORY[0x24BDAC7A8](v27);
  v31 = (char *)&v169 - v30;
  v32 = MEMORY[0x24BDAC7A8](v29);
  v34 = (char *)&v169 - v33;
  MEMORY[0x24BDAC7A8](v32);
  v186 = (char *)&v169 - v35;
  v36 = type metadata accessor for ChartContentRenderContext.Bins(0);
  v187 = *(_QWORD *)(v36 - 8);
  v188 = (void (*)(_QWORD, _QWORD, _QWORD))v36;
  v37 = MEMORY[0x24BDAC7A8](v36);
  *(_QWORD *)&v189 = (char *)&v169 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = MEMORY[0x24BDAC7A8](v37);
  v169 = (uint64_t)&v169 - v40;
  v41 = MEMORY[0x24BDAC7A8](v39);
  v43 = (char *)&v169 - v42;
  MEMORY[0x24BDAC7A8](v41);
  v204 = (_OWORD *)((char *)&v169 - v44);
  sub_2141E801C(a1, (uint64_t)v240, &qword_253F13368);
  if ((v241 & 1) != 0)
  {
    v45 = *v9;
    v46 = *v9;
    v47 = (uint64_t)v200;
    v48 = v199;
    v49 = sub_214219E84(v46, (uint64_t)v200, v199, 0.0);
    if ((v51 & 1) == 0)
    {
      v52 = v49;
      v53 = v50;
      v54 = *((_OWORD *)a4 + 1);
      v237 = *(_OWORD *)a4;
      v238[0] = v54;
      sub_21421CC0C((uint64_t)&v237, (uint64_t)v231);
      v246.n128_u64[0] = *((_QWORD *)&v238[0] + 1);
      LOBYTE(v214[0]) = v206;
      v214[1] = v195;
      v214[2] = v194;
      v215 = v193 & 1;
      v216 = v197;
      v217 = v192;
      v218 = v47;
      v219 = v48;
      v220 = v196;
      v221 = 3;
      sub_2141EF6F4((uint64_t)v214);
      *(_QWORD *)&v222 = v52;
      *((_QWORD *)&v222 + 1) = v53;
      sub_2141EF6B8((uint64_t)v214, (uint64_t)&v223);
      v55 = v229[1];
      *(_OWORD *)(a5 + 128) = v229[0];
      *(_OWORD *)(a5 + 144) = v55;
      *(_QWORD *)(a5 + 160) = v230;
      v56 = v227;
      *(_OWORD *)(a5 + 64) = v226;
      *(_OWORD *)(a5 + 80) = v56;
      v57 = v228[1];
      *(_OWORD *)(a5 + 96) = v228[0];
      *(_OWORD *)(a5 + 112) = v57;
      v58 = v223;
      *(_OWORD *)a5 = v222;
      *(_OWORD *)(a5 + 16) = v58;
      v59 = v225;
      *(_OWORD *)(a5 + 32) = v224;
      *(_OWORD *)(a5 + 48) = v59;
      sub_21421CE7C((uint64_t)v231);
      sub_2141F92E8((uint64_t)&v246);
      return sub_2141DD140(v45, v47, v48);
    }
    while (1)
    {
LABEL_62:
      sub_214425628();
      __break(1u);
    }
  }
  v199 = a5;
  v200 = (char *)a1;
  *(_QWORD *)&v197 = v240[0];
  *(_QWORD *)&v196 = v240[1];
  v61 = v240[6];
  v62 = (uint64_t *)(v198 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_accessibilityElementBins);
  swift_beginAccess();
  v63 = *v62;
  if (*(_QWORD *)(*v62 + 16))
  {
    v64 = sub_214336B74(v206);
    if ((v65 & 1) != 0)
    {
      sub_2141FDEA0(*(_QWORD *)(v63 + 56) + *(_QWORD *)(v187 + 72) * v64, (uint64_t)v43, type metadata accessor for ChartContentRenderContext.Bins);
      v66 = v204;
      sub_2141FE1E0((uint64_t)v43, (uint64_t)v204, type metadata accessor for ChartContentRenderContext.Bins);
      swift_endAccess();
      swift_retain();
      sub_2141D975C(v180);
      swift_bridgeObjectRetain();
      sub_2141E83DC(v183, v184);
      v67 = (__int128 *)v189;
      goto LABEL_32;
    }
  }
  *(_QWORD *)&v198 = v62;
  swift_endAccess();
  sub_21421CDBC((__n128 *)a4 + 2, &v242);
  sub_21421CDBC(&v242, &v243);
  v68 = v203;
  if ((v244 & 0x80000000) == 0)
  {
    sub_21421CFC8(&v243, &v245);
    sub_21421CFC8(&v245, &v246);
    if (!v247)
    {
      sub_21421D004((uint64_t)v200, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_21421BAE4);
      sub_21421CDF8((uint64_t)&v242);
      goto LABEL_11;
    }
    if (v247 != 1)
      goto LABEL_62;
    v70 = v34;
    sub_21421D004((uint64_t)v200, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_21421BAE4);
    sub_21421CDF8((uint64_t)&v242);
    v71 = v186;
LABEL_22:
    if (*(_QWORD *)(v61 + 16))
    {
      v195 = v23;
      sub_2144239E4();
      sub_2144239E4();
      sub_21421CEE8((unint64_t *)&qword_253F12440, MEMORY[0x24BDCE948]);
      v85 = sub_214424E6C();
      v86 = *(void (**)(char *, char *, uint64_t))(v205 + 16);
      if ((v85 & 1) != 0)
        v87 = v70;
      else
        v87 = v71;
      v88 = v31;
      v86(v31, v87, v68);
      v89 = sub_214424E78();
      v193 = v86;
      v194 = v70;
      if ((v89 & 1) != 0)
        v90 = v70;
      else
        v90 = v71;
      v91 = v176;
      v86(v176, v90, v68);
      if ((sub_214424E84() & 1) != 0)
      {
        v92 = v170;
        v93 = v171;
        v94 = &v170[*(int *)(v171 + 48)];
        v95 = *(void (**)(char *, char *, uint64_t))(v205 + 32);
        v95(v170, v88, v68);
        v192 = v94;
        v95(v94, v91, v68);
        v96 = v173;
        v97 = &v173[*(int *)(v93 + 48)];
        v98 = v193;
        v193(v173, v92, v68);
        v98(v97, v94, v68);
        v99 = (uint64_t)v195;
        v95(v195, v96, v68);
        v100 = *(void (**)(char *, uint64_t))(v205 + 8);
        v100(v97, v68);
        v101 = &v96[*(int *)(v93 + 48)];
        v95(v96, v92, v68);
        v95(v101, v192, v68);
        v95((char *)(v99 + *(int *)(v172 + 36)), v101, v68);
        v100(v96, v68);
        v102 = v174;
        sub_2141E801C(v99, v174, (uint64_t *)&unk_253F15EB0);
        v103 = (uint64_t)v175;
        sub_214423C00();
        v104 = v169;
        DateBins.init(range:desiredCount:calendar:)(v102, 10, v103, v169);
        v100(v194, v68);
        v100(v186, v68);
        v82 = v188;
        swift_storeEnumTagMultiPayload();
        v105 = v104;
        v66 = v204;
        sub_2141FE1E0(v105, (uint64_t)v204, type metadata accessor for ChartContentRenderContext.Bins);
        v83 = (uint64_t)v185;
        v67 = (__int128 *)v189;
        v84 = v187;
        goto LABEL_31;
      }
LABEL_59:
      __break(1u);
      goto LABEL_60;
    }
    goto LABEL_57;
  }
  v244 &= ~0x80u;
  sub_21421CEAC(&v243, &v245);
  sub_21421CEAC(&v245, &v246);
  v69 = v247;
  swift_retain();
  sub_2141D975C(v180);
  swift_bridgeObjectRetain();
  sub_2141E83DC(v183, v184);
  v70 = v34;
  v71 = v186;
  if ((v69 & 1) != 0)
    goto LABEL_22;
LABEL_11:
  v72 = *(_QWORD *)(v61 + 16);
  if (!v72)
  {
    __break(1u);
LABEL_57:
    __break(1u);
LABEL_58:
    __break(1u);
    goto LABEL_59;
  }
  v73 = *(double *)(v61 + 32);
  v74 = v61 + 32 + 8 * v72;
  v75 = *(double *)(v74 - 8);
  if (v75 >= v73)
    v76 = *(double *)(v61 + 32);
  else
    v76 = *(double *)(v74 - 8);
  if (v73 > v75)
    v77 = *(double *)(v61 + 32);
  else
    v77 = *(double *)(v74 - 8);
  if (v76 > v77)
    goto LABEL_58;
  v78 = sub_2143872F4(11, v76, v77, 0.0, 1, 1);
  sub_2142D057C((uint64_t)&v222, v78, v76, v77);
  v79 = v225;
  v80 = BYTE8(v225);
  v81 = v223;
  v66 = v204;
  *v204 = v222;
  v66[1] = v81;
  v66[2] = v224;
  *((_QWORD *)v66 + 6) = v79;
  *((_BYTE *)v66 + 56) = v80;
  v82 = v188;
  swift_storeEnumTagMultiPayload();
  v83 = (uint64_t)v185;
  v67 = (__int128 *)v189;
  v84 = v187;
LABEL_31:
  sub_2141FDEA0((uint64_t)v66, v83, type metadata accessor for ChartContentRenderContext.Bins);
  (*(void (**)(uint64_t, _QWORD, uint64_t, void (*)(_QWORD, _QWORD, _QWORD)))(v84 + 56))(v83, 0, 1, v82);
  swift_beginAccess();
  sub_214233FF0(v83, v206);
  swift_endAccess();
LABEL_32:
  sub_2141FDEA0((uint64_t)v66, (uint64_t)v67, type metadata accessor for ChartContentRenderContext.Bins);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    v107 = v67[1];
    v237 = *v67;
    v238[0] = v107;
    v238[1] = v67[2];
    *(_OWORD *)((char *)&v238[1] + 9) = *(__int128 *)((char *)v67 + 41);
    v108 = *((uint64_t *)a4 + 4);
    v109 = *((uint64_t *)a4 + 5);
    if (((_BYTE)a4[6] & 0x80) != 0)
    {
      if (((_BYTE)a4[6] & 1) != 0)
        goto LABEL_62;
      v110 = (*(double *)&v108 + *(double *)&v109) * 0.5;
    }
    else
    {
      if (*((_BYTE *)a4 + 48))
        goto LABEL_62;
      v110 = *((double *)a4 + 4);
      sub_2141DD14C(v108, v109, 0);
    }
    *(double *)&v222 = v110;
    if (!BYTE8(v238[2]))
    {
      v143 = (uint64_t (*)(__int128 *))*((_QWORD *)&v238[1] + 1);
      sub_21421CF8C((uint64_t)&v237, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2142085E4);
      v142 = v143(&v222);
      swift_release();
      swift_release();
      goto LABEL_48;
    }
    if (BYTE8(v238[2]) == 1)
    {
      v140 = sub_214332314(*(_QWORD *)(v237 + 16), v237, v110);
      if ((v141 & 1) == 0)
      {
        v142 = v140;
LABEL_48:
        sub_21421CF8C((uint64_t)&v237, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2142085E4);
        sub_2142CD3C0(v142, (uint64_t)&v222);
        sub_21421CF8C((uint64_t)&v237, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_214208738);
        v144 = v222;
        v214[0] = v222;
        v145 = (void (*)(__int128 *__return_ptr, _QWORD *))v197;
        ((void (*)(__int128 *__return_ptr, _QWORD *))v197)(&v222, v214);
        v117 = v222;
        v214[0] = *((_QWORD *)&v144 + 1);
        v145(&v222, v214);
        v119 = v222;
        sub_2144242CC();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v146 = sub_21442480C();
        v202 = v147;
        v203 = v146;
        v148 = v147;
        v150 = v149;
        LOBYTE(v222) = v151 & 1;
        LOBYTE(v214[0]) = 0;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v152 = v222;
        v153 = LOBYTE(v214[0]);
        sub_2141DD130(v146, v148, v222);
        swift_bridgeObjectRetain();
        if (v153)
          v154 = -128;
        else
          v154 = 0;
        LODWORD(v205) = v154;
        sub_2141ED0BC(v146, v148, v152);
        swift_bridgeObjectRelease();
        sub_2144242CC();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v155 = sub_21442480C();
        v157 = v156;
        v159 = v158;
        LOBYTE(v231[0]) = v160 & 1;
        LOBYTE(v213[0]) = 0;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v161 = v231[0];
        if (LOBYTE(v213[0]))
          v162 = 0x80;
        else
          v162 = 0;
        sub_2141DD130(v155, v157, v231[0]);
        swift_bridgeObjectRetain();
        sub_2141ED0BC(v155, v157, v161);
        swift_bridgeObjectRelease();
        sub_21421CF8C((uint64_t)&v237, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_214208738);
        sub_21421D004((uint64_t)v200, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_21421BB6C);
        sub_2141DD370((uint64_t)v204, type metadata accessor for ChartContentRenderContext.Bins);
        LOBYTE(v211[0]) = v152;
        LOBYTE(v210[0]) = v161;
        LOBYTE(v222) = v206;
        *((_QWORD *)&v222 + 1) = v203;
        *(_QWORD *)&v223 = v202;
        BYTE8(v223) = v152;
        *(_QWORD *)&v224 = v150;
        *((_QWORD *)&v224 + 1) = v144;
        *(_QWORD *)&v225 = 0;
        BYTE8(v225) = v205;
        *(_QWORD *)&v226 = MEMORY[0x24BEE13C8];
        *((_QWORD *)&v226 + 1) = &protocol witness table for Double;
        *(_QWORD *)&v227 = v155;
        *((_QWORD *)&v227 + 1) = v157;
        LOBYTE(v228[0]) = v161;
        *((_QWORD *)&v228[0] + 1) = v159;
        v228[1] = *((unint64_t *)&v144 + 1);
        LOBYTE(v229[0]) = v162;
        *((_QWORD *)&v229[0] + 1) = MEMORY[0x24BEE13C8];
        *(_QWORD *)&v229[1] = &protocol witness table for Double;
        goto LABEL_55;
      }
LABEL_61:
      __break(1u);
      goto LABEL_62;
    }
LABEL_60:
    __break(1u);
    goto LABEL_61;
  }
  sub_2141FE1E0((uint64_t)v67, v201, type metadata accessor for DateBins);
  v106 = *((unsigned __int8 *)a4 + 48);
  if ((v106 & 0x80) != 0)
  {
    if ((v106 & 1) == 0)
      goto LABEL_62;
  }
  else
  {
    if (v106 != 1)
      goto LABEL_62;
    sub_2141DD14C((uint64_t)a4[4], (uint64_t)a4[5], 1);
  }
  v111 = (uint64_t)v190;
  sub_2144239E4();
  v112 = DateBins.index(for:)(v111);
  v113 = v202;
  DateBins.subscript.getter(v112, v202);
  v114 = v113;
  sub_2144239F0();
  v214[0] = v115;
  v116 = (void (*)(__int128 *__return_ptr, _QWORD *))v197;
  ((void (*)(__int128 *__return_ptr, _QWORD *))v197)(&v222, v214);
  v117 = v222;
  *(_QWORD *)&v198 = v114 + *(int *)(v177 + 36);
  sub_2144239F0();
  v214[0] = v118;
  v116(&v222, v214);
  v119 = v222;
  sub_2144242CC();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v120 = sub_21442480C();
  v122 = v121;
  v124 = v123;
  v126 = v125;
  v127 = (uint64_t)v178;
  v128 = &v178[*(int *)(v191 + 36)];
  v188 = *(void (**)(_QWORD, _QWORD, _QWORD))(v205 + 16);
  v188(v128, v202, v203);
  *(_QWORD *)v127 = v120;
  *(_QWORD *)(v127 + 8) = v122;
  *(_BYTE *)(v127 + 16) = v124 & 1;
  *(_QWORD *)(v127 + 24) = v126;
  v187 = sub_2141D8BF8(&qword_253F112C8);
  swift_storeEnumTagMultiPayload();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_2143D016C(v127, (uint64_t)v231);
  v193 = (void (*)(char *, char *, uint64_t))v231[1];
  v194 = (char *)v231[0];
  LODWORD(v192) = v232;
  v197 = v233;
  *(_QWORD *)&v196 = v234;
  LODWORD(v195) = v235;
  sub_2144242CC();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v189 = v236;
  v129 = sub_21442480C();
  v131 = v130;
  LOBYTE(v126) = v132;
  v134 = v133;
  v135 = v203;
  v188(v127 + *(int *)(v191 + 36), v198, v203);
  *(_QWORD *)v127 = v129;
  *(_QWORD *)(v127 + 8) = v131;
  *(_BYTE *)(v127 + 16) = v126 & 1;
  *(_QWORD *)(v127 + 24) = v134;
  swift_storeEnumTagMultiPayload();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_2143D016C(v127, (uint64_t)&v237);
  v136 = v237;
  LOBYTE(v131) = v238[0];
  v198 = *(_OWORD *)((char *)v238 + 8);
  v137 = *((_QWORD *)&v238[1] + 1);
  v138 = v238[2];
  sub_21421D004((uint64_t)v200, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_21421BB6C);
  sub_2141E0750(v202, &qword_253F13358);
  v139 = *(void (**)(char *, uint64_t))(v205 + 8);
  v205 = *(_OWORD *)((char *)&v238[2] + 8);
  v139(v190, v135);
  sub_2141DD370(v201, type metadata accessor for DateBins);
  sub_2141DD370((uint64_t)v204, type metadata accessor for ChartContentRenderContext.Bins);
  v212 = (char)v192;
  v209 = v131;
  LOBYTE(v222) = v206;
  *(_DWORD *)((char *)&v222 + 1) = v213[0];
  DWORD1(v222) = *(_DWORD *)((char *)v213 + 3);
  *((_QWORD *)&v222 + 1) = v194;
  *(_QWORD *)&v223 = v193;
  BYTE8(v223) = (_BYTE)v192;
  *(_DWORD *)((char *)&v223 + 9) = v211[0];
  HIDWORD(v223) = *(_DWORD *)((char *)v211 + 3);
  v224 = v197;
  *(_QWORD *)&v225 = v196;
  BYTE8(v225) = (_BYTE)v195;
  HIDWORD(v225) = *(_DWORD *)((char *)v210 + 3);
  *(_DWORD *)((char *)&v225 + 9) = v210[0];
  v226 = v189;
  v227 = v136;
  LOBYTE(v228[0]) = v131;
  *(_DWORD *)((char *)v228 + 1) = *(_DWORD *)v208;
  DWORD1(v228[0]) = *(_DWORD *)&v208[3];
  *(_OWORD *)((char *)v228 + 8) = v198;
  *((_QWORD *)&v228[1] + 1) = v137;
  LOBYTE(v229[0]) = v138;
  DWORD1(v229[0]) = *(_DWORD *)&v207[3];
  *(_DWORD *)((char *)v229 + 1) = *(_DWORD *)v207;
  *(_OWORD *)((char *)v229 + 8) = v205;
LABEL_55:
  sub_21421CF28((uint64_t)&v222);
  sub_2141EF6B8((uint64_t)&v222, (uint64_t)v214);
  *(_QWORD *)&v222 = v117;
  *((_QWORD *)&v222 + 1) = v119;
  result = sub_2141EF6B8((uint64_t)v214, (uint64_t)&v223);
  v163 = v229[1];
  v164 = v199;
  *(_OWORD *)(v199 + 128) = v229[0];
  *(_OWORD *)(v164 + 144) = v163;
  *(_QWORD *)(v164 + 160) = v230;
  v165 = v227;
  *(_OWORD *)(v164 + 64) = v226;
  *(_OWORD *)(v164 + 80) = v165;
  v166 = v228[1];
  *(_OWORD *)(v164 + 96) = v228[0];
  *(_OWORD *)(v164 + 112) = v166;
  v167 = v223;
  *(_OWORD *)v164 = v222;
  *(_OWORD *)(v164 + 16) = v167;
  v168 = v225;
  *(_OWORD *)(v164 + 32) = v224;
  *(_OWORD *)(v164 + 48) = v168;
  return result;
}

uint64_t sub_214208048()
{
  uint64_t v0;
  _BYTE __dst[264];
  _BYTE v3[144];

  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  memcpy(__dst, (const void *)(v0 + 80), 0x102uLL);
  sub_21421CA78((uint64_t)__dst, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char))sub_21421C6D4);
  sub_2141DD370(v0 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_environment, type metadata accessor for ChartContentRenderContext.Environment);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_21421BB38(*(_QWORD *)(v0 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_xScale), *(_QWORD *)(v0 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_xScale + 8), *(_QWORD *)(v0 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_xScale + 16), *(_QWORD *)(v0 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_xScale + 24), *(_QWORD *)(v0 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_xScale + 32), *(_QWORD *)(v0 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_xScale + 40), *(_QWORD *)(v0 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_xScale + 48), *(_QWORD *)(v0 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_xScale + 56), *(_OWORD *)(v0 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_xScale + 64), *(_QWORD *)(v0 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_xScale + 72), *(_QWORD *)(v0 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_xScale + 80), *(_QWORD *)(v0 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_xScale + 88), *(_QWORD *)(v0 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_xScale + 96), *(_BYTE *)(v0 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_xScale + 104));
  sub_21421BB38(*(_QWORD *)(v0 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_yScale), *(_QWORD *)(v0 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_yScale + 8), *(_QWORD *)(v0 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_yScale + 16), *(_QWORD *)(v0 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_yScale + 24), *(_QWORD *)(v0 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_yScale + 32), *(_QWORD *)(v0 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_yScale + 40), *(_QWORD *)(v0 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_yScale + 48), *(_QWORD *)(v0 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_yScale + 56), *(_OWORD *)(v0 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_yScale + 64), *(_QWORD *)(v0 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_yScale + 72), *(_QWORD *)(v0 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_yScale + 80), *(_QWORD *)(v0 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_yScale + 88), *(_QWORD *)(v0 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_yScale + 96), *(_BYTE *)(v0 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_yScale + 104));
  sub_21421BB38(*(_QWORD *)(v0 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_xOffsetScale), *(_QWORD *)(v0 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_xOffsetScale + 8), *(_QWORD *)(v0 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_xOffsetScale + 16), *(_QWORD *)(v0 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_xOffsetScale + 24), *(_QWORD *)(v0 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_xOffsetScale + 32), *(_QWORD *)(v0 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_xOffsetScale + 40), *(_QWORD *)(v0 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_xOffsetScale + 48), *(_QWORD *)(v0 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_xOffsetScale + 56), *(_OWORD *)(v0 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_xOffsetScale + 64), *(_QWORD *)(v0 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_xOffsetScale + 72), *(_QWORD *)(v0 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_xOffsetScale + 80), *(_QWORD *)(v0 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_xOffsetScale + 88), *(_QWORD *)(v0 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_xOffsetScale + 96), *(_BYTE *)(v0 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_xOffsetScale + 104));
  sub_21421BB38(*(_QWORD *)(v0 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_yOffsetScale), *(_QWORD *)(v0 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_yOffsetScale + 8), *(_QWORD *)(v0 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_yOffsetScale + 16), *(_QWORD *)(v0 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_yOffsetScale + 24), *(_QWORD *)(v0 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_yOffsetScale + 32), *(_QWORD *)(v0 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_yOffsetScale + 40), *(_QWORD *)(v0 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_yOffsetScale + 48), *(_QWORD *)(v0 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_yOffsetScale + 56), *(_OWORD *)(v0 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_yOffsetScale + 64), *(_QWORD *)(v0 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_yOffsetScale + 72), *(_QWORD *)(v0 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_yOffsetScale + 80), *(_QWORD *)(v0 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_yOffsetScale + 88), *(_QWORD *)(v0 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_yOffsetScale + 96), *(_BYTE *)(v0 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_yOffsetScale + 104));
  sub_21421BB38(*(_QWORD *)(v0 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_symbolSizeScale), *(_QWORD *)(v0 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_symbolSizeScale + 8), *(_QWORD *)(v0 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_symbolSizeScale + 16), *(_QWORD *)(v0 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_symbolSizeScale + 24), *(_QWORD *)(v0 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_symbolSizeScale + 32), *(_QWORD *)(v0 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_symbolSizeScale + 40), *(_QWORD *)(v0 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_symbolSizeScale + 48), *(_QWORD *)(v0 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_symbolSizeScale + 56), *(_OWORD *)(v0 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_symbolSizeScale + 64), *(_QWORD *)(v0 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_symbolSizeScale + 72), *(_QWORD *)(v0 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_symbolSizeScale + 80), *(_QWORD *)(v0 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_symbolSizeScale + 88), *(_QWORD *)(v0 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_symbolSizeScale + 96), *(_BYTE *)(v0 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_symbolSizeScale + 104));
  sub_2141E0750(v0 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_symbolScale, &qword_253F149F0);
  sub_2141E801C(v0 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_lineStyleScale, (uint64_t)v3, &qword_253F149E8);
  sub_21421B9E4((uint64_t)v3);
  sub_21421B874(*(_QWORD *)(v0 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_foregroundStyleScale), *(_QWORD *)(v0 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_foregroundStyleScale + 8), *(_QWORD *)(v0 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_foregroundStyleScale + 16), *(_QWORD *)(v0 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_foregroundStyleScale + 24), *(_QWORD *)(v0 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_foregroundStyleScale + 32), *(_QWORD *)(v0 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_foregroundStyleScale + 40), *(_QWORD *)(v0 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_foregroundStyleScale + 48), *(_QWORD *)(v0 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_foregroundStyleScale + 56), *(_QWORD *)(v0 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_foregroundStyleScale + 64), *(_QWORD *)(v0 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_foregroundStyleScale + 72), *(_QWORD *)(v0 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_foregroundStyleScale + 80), *(_QWORD *)(v0 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_foregroundStyleScale + 88), *(_BYTE *)(v0 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_foregroundStyleScale + 96));
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_214208280()
{
  sub_214208048();
  return swift_deallocClassInstance();
}

uint64_t sub_2142082A4()
{
  return type metadata accessor for ChartContentRenderContext(0);
}

uint64_t type metadata accessor for ChartContentRenderContext(uint64_t a1)
{
  return sub_2141FE0D4(a1, (uint64_t *)&unk_253F15168);
}

uint64_t sub_2142082C0()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for ChartContentRenderContext.Environment(319);
  if (v1 <= 0x3F)
    return swift_updateClassMetadata2();
  return result;
}

uint64_t type metadata accessor for ChartContentRenderContext.Environment(uint64_t a1)
{
  return sub_2141FE0D4(a1, qword_253F14FC0);
}

uint64_t *sub_2142083BC(uint64_t *a1, char *a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v19 = *(_QWORD *)a2;
    *a1 = *(_QWORD *)a2;
    a1 = (uint64_t *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v6 = type metadata accessor for DateBins.Storage(0);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 2)
      {
        *a1 = *(_QWORD *)a2;
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
      }
      else if (EnumCaseMultiPayload == 1)
      {
        v8 = sub_214423C48();
        (*(void (**)(uint64_t *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
        v9 = (int *)type metadata accessor for CalendarBinningUnit(0);
        *(uint64_t *)((char *)a1 + v9[5]) = *(_QWORD *)&a2[v9[5]];
        v10 = v9[6];
        v11 = (char *)a1 + v10;
        v12 = &a2[v10];
        v13 = sub_214423B70();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v12, v13);
        v14 = v9[7];
        v15 = (char *)a1 + v14;
        v16 = &a2[v14];
        v17 = sub_214423C54();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v15, v16, v17);
        *(uint64_t *)((char *)a1 + v9[8]) = *(_QWORD *)&a2[v9[8]];
        swift_retain();
        v18 = sub_2141D8BF8(&qword_253F11570);
        *(uint64_t *)((char *)a1 + *(int *)(v18 + 48)) = *(_QWORD *)&a2[*(int *)(v18 + 48)];
        *(uint64_t *)((char *)a1 + *(int *)(v18 + 64)) = *(_QWORD *)&a2[*(int *)(v18 + 64)];
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
      }
    }
    else
    {
      v20 = *(_QWORD *)a2;
      v21 = *((_QWORD *)a2 + 1);
      v22 = *((_QWORD *)a2 + 2);
      v23 = *((_QWORD *)a2 + 3);
      v24 = *((_QWORD *)a2 + 4);
      v25 = *((_QWORD *)a2 + 5);
      v26 = *((_QWORD *)a2 + 6);
      v27 = a2[56];
      sub_2142085E4(v20, v21, v22, v23, v24, v25, v26, v27);
      *a1 = v20;
      a1[1] = v21;
      a1[2] = v22;
      a1[3] = v23;
      a1[4] = v24;
      a1[5] = v25;
      a1[6] = v26;
      *((_BYTE *)a1 + 56) = v27;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_2142085E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  uint64_t result;

  if (a8 == 1)
    return swift_bridgeObjectRetain();
  if (!a8)
  {
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t sub_214208624(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (swift_getEnumCaseMultiPayload() != 1)
    return sub_214208738(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_BYTE *)(a1 + 56));
  type metadata accessor for DateBins.Storage(0);
  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 2)
    return swift_bridgeObjectRelease();
  if ((_DWORD)result == 1)
  {
    v3 = sub_214423C48();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
    v4 = type metadata accessor for CalendarBinningUnit(0);
    v5 = a1 + *(int *)(v4 + 24);
    v6 = sub_214423B70();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
    v7 = a1 + *(int *)(v4 + 28);
    v8 = sub_214423C54();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
    return swift_release();
  }
  return result;
}

uint64_t sub_214208738(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  uint64_t result;

  if (a8 == 1)
    return swift_bridgeObjectRelease();
  if (!a8)
  {
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t *sub_214208778(uint64_t *a1, char *a2)
{
  uint64_t v4;
  int EnumCaseMultiPayload;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v4 = type metadata accessor for DateBins.Storage(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *a1 = *(_QWORD *)a2;
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v6 = sub_214423C48();
      (*(void (**)(uint64_t *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
      v7 = (int *)type metadata accessor for CalendarBinningUnit(0);
      *(uint64_t *)((char *)a1 + v7[5]) = *(_QWORD *)&a2[v7[5]];
      v8 = v7[6];
      v9 = (char *)a1 + v8;
      v10 = &a2[v8];
      v11 = sub_214423B70();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
      v12 = v7[7];
      v13 = (char *)a1 + v12;
      v14 = &a2[v12];
      v15 = sub_214423C54();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
      *(uint64_t *)((char *)a1 + v7[8]) = *(_QWORD *)&a2[v7[8]];
      swift_retain();
      v16 = sub_2141D8BF8(&qword_253F11570);
      *(uint64_t *)((char *)a1 + *(int *)(v16 + 48)) = *(_QWORD *)&a2[*(int *)(v16 + 48)];
      *(uint64_t *)((char *)a1 + *(int *)(v16 + 64)) = *(_QWORD *)&a2[*(int *)(v16 + 64)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
    }
  }
  else
  {
    v17 = *(_QWORD *)a2;
    v18 = *((_QWORD *)a2 + 1);
    v19 = *((_QWORD *)a2 + 2);
    v20 = *((_QWORD *)a2 + 3);
    v21 = *((_QWORD *)a2 + 4);
    v22 = *((_QWORD *)a2 + 5);
    v23 = *((_QWORD *)a2 + 6);
    v24 = a2[56];
    sub_2142085E4(v17, v18, v19, v20, v21, v22, v23, v24);
    *a1 = v17;
    a1[1] = v18;
    a1[2] = v19;
    a1[3] = v20;
    a1[4] = v21;
    a1[5] = v22;
    a1[6] = v23;
    *((_BYTE *)a1 + 56) = v24;
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t *sub_214208974(uint64_t *a1, char *a2)
{
  uint64_t v4;
  int EnumCaseMultiPayload;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;

  if (a1 != (uint64_t *)a2)
  {
    sub_2141DD370((uint64_t)a1, type metadata accessor for ChartContentRenderContext.Bins);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v4 = type metadata accessor for DateBins.Storage(0);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 2)
      {
        *a1 = *(_QWORD *)a2;
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
      }
      else if (EnumCaseMultiPayload == 1)
      {
        v6 = sub_214423C48();
        (*(void (**)(uint64_t *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
        v7 = (int *)type metadata accessor for CalendarBinningUnit(0);
        *(uint64_t *)((char *)a1 + v7[5]) = *(_QWORD *)&a2[v7[5]];
        v8 = v7[6];
        v9 = (char *)a1 + v8;
        v10 = &a2[v8];
        v11 = sub_214423B70();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
        v12 = v7[7];
        v13 = (char *)a1 + v12;
        v14 = &a2[v12];
        v15 = sub_214423C54();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
        *(uint64_t *)((char *)a1 + v7[8]) = *(_QWORD *)&a2[v7[8]];
        swift_retain();
        v16 = sub_2141D8BF8(&qword_253F11570);
        *(uint64_t *)((char *)a1 + *(int *)(v16 + 48)) = *(_QWORD *)&a2[*(int *)(v16 + 48)];
        *(uint64_t *)((char *)a1 + *(int *)(v16 + 64)) = *(_QWORD *)&a2[*(int *)(v16 + 64)];
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
      }
    }
    else
    {
      v17 = *(_QWORD *)a2;
      v18 = *((_QWORD *)a2 + 1);
      v19 = *((_QWORD *)a2 + 2);
      v20 = *((_QWORD *)a2 + 3);
      v21 = *((_QWORD *)a2 + 4);
      v22 = *((_QWORD *)a2 + 5);
      v23 = *((_QWORD *)a2 + 6);
      v24 = a2[56];
      sub_2142085E4(v17, v18, v19, v20, v21, v22, v23, v24);
      *a1 = v17;
      a1[1] = v18;
      a1[2] = v19;
      a1[3] = v20;
      a1[4] = v21;
      a1[5] = v22;
      a1[6] = v23;
      *((_BYTE *)a1 + 56) = v24;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t type metadata accessor for ChartContentRenderContext.Bins(uint64_t a1)
{
  return sub_2141FE0D4(a1, qword_253F150C0);
}

char *sub_214208B9C(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v6 = type metadata accessor for DateBins.Storage(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v7 = sub_214423C48();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      v8 = (int *)type metadata accessor for CalendarBinningUnit(0);
      *(_QWORD *)&a1[v8[5]] = *(_QWORD *)&a2[v8[5]];
      v9 = v8[6];
      v10 = &a1[v9];
      v11 = &a2[v9];
      v12 = sub_214423B70();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v10, v11, v12);
      v13 = v8[7];
      v14 = &a1[v13];
      v15 = &a2[v13];
      v16 = sub_214423C54();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v14, v15, v16);
      *(_QWORD *)&a1[v8[8]] = *(_QWORD *)&a2[v8[8]];
      v17 = sub_2141D8BF8(&qword_253F11570);
      *(_QWORD *)&a1[*(int *)(v17 + 48)] = *(_QWORD *)&a2[*(int *)(v17 + 48)];
      *(_QWORD *)&a1[*(int *)(v17 + 64)] = *(_QWORD *)&a2[*(int *)(v17 + 64)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

char *sub_214208D20(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;

  if (a1 != a2)
  {
    sub_2141DD370((uint64_t)a1, type metadata accessor for ChartContentRenderContext.Bins);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v6 = type metadata accessor for DateBins.Storage(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v7 = sub_214423C48();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
        v8 = (int *)type metadata accessor for CalendarBinningUnit(0);
        *(_QWORD *)&a1[v8[5]] = *(_QWORD *)&a2[v8[5]];
        v9 = v8[6];
        v10 = &a1[v9];
        v11 = &a2[v9];
        v12 = sub_214423B70();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v10, v11, v12);
        v13 = v8[7];
        v14 = &a1[v13];
        v15 = &a2[v13];
        v16 = sub_214423C54();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v14, v15, v16);
        *(_QWORD *)&a1[v8[8]] = *(_QWORD *)&a2[v8[8]];
        v17 = sub_2141D8BF8(&qword_253F11570);
        *(_QWORD *)&a1[*(int *)(v17 + 48)] = *(_QWORD *)&a2[*(int *)(v17 + 48)];
        *(_QWORD *)&a1[*(int *)(v17 + 64)] = *(_QWORD *)&a2[*(int *)(v17 + 64)];
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_214208EBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a3 - 8) + 48))();
}

uint64_t sub_214208EC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a4 - 8) + 56))();
}

uint64_t sub_214208ED8()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_214208EE8()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for DateBins.Storage(319);
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for EncodableProperty(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF9)
    goto LABEL_17;
  if (a2 + 7 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 7) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 7;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 7;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 7;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 8;
  v8 = v6 - 8;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for EncodableProperty(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_214209034 + 4 * byte_214427BD7[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_214209068 + 4 * byte_214427BD2[v4]))();
}

uint64_t sub_214209068(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_214209070(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x214209078);
  return result;
}

uint64_t sub_214209084(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21420908CLL);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_214209090(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_214209098(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for EncodableProperty()
{
  return &type metadata for EncodableProperty;
}

uint64_t sub_2142090B4()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata accessor for SeriesResolutionContext(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2141D8E88(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SeriesResolutionContext);
}

uint64_t destroy for SubPositionContext(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  if (*(_QWORD *)(result + 24))
  {
    sub_2141ED0BC(*(_QWORD *)result, *(_QWORD *)(result + 8), *(_BYTE *)(result + 16));
    swift_bridgeObjectRelease();
    result = sub_2141EF1B0(*(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_BYTE *)(v1 + 48));
  }
  if (*(_QWORD *)(v1 + 112))
  {
    sub_2141ED0BC(*(_QWORD *)(v1 + 88), *(_QWORD *)(v1 + 96), *(_BYTE *)(v1 + 104));
    swift_bridgeObjectRelease();
    result = sub_2141EF1B0(*(_QWORD *)(v1 + 120), *(_QWORD *)(v1 + 128), *(_BYTE *)(v1 + 136));
  }
  if (*(_QWORD *)(v1 + 200))
  {
    sub_2141ED0BC(*(_QWORD *)(v1 + 176), *(_QWORD *)(v1 + 184), *(_BYTE *)(v1 + 192));
    swift_bridgeObjectRelease();
    return sub_2141EF1B0(*(_QWORD *)(v1 + 208), *(_QWORD *)(v1 + 216), *(_BYTE *)(v1 + 224));
  }
  return result;
}

uint64_t initializeWithCopy for SubPositionContext(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;

  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    v5 = *(_QWORD *)a2;
    v6 = *(_QWORD *)(a2 + 8);
    v7 = *(_BYTE *)(a2 + 16);
    sub_2141DD130(*(_QWORD *)a2, v6, v7);
    *(_QWORD *)a1 = v5;
    *(_QWORD *)(a1 + 8) = v6;
    *(_BYTE *)(a1 + 16) = v7;
    *(_QWORD *)(a1 + 24) = v4;
    v8 = *(_QWORD *)(a2 + 32);
    v9 = *(_QWORD *)(a2 + 40);
    v10 = *(_BYTE *)(a2 + 48);
    swift_bridgeObjectRetain();
    sub_2141DD140(v8, v9, v10);
    *(_QWORD *)(a1 + 32) = v8;
    *(_QWORD *)(a1 + 40) = v9;
    *(_BYTE *)(a1 + 48) = v10;
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
    v11 = *(_QWORD *)(a2 + 112);
    if (v11)
      goto LABEL_3;
LABEL_6:
    v27 = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 136) = v27;
    *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
    *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
    v28 = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 104) = v28;
    v18 = *(_QWORD *)(a2 + 200);
    if (v18)
      goto LABEL_4;
LABEL_7:
    v29 = *(_OWORD *)(a2 + 224);
    *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
    *(_OWORD *)(a1 + 224) = v29;
    *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
    *(_BYTE *)(a1 + 256) = *(_BYTE *)(a2 + 256);
    v30 = *(_OWORD *)(a2 + 192);
    *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 192) = v30;
    goto LABEL_8;
  }
  v25 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v25;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  v26 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v26;
  v11 = *(_QWORD *)(a2 + 112);
  if (!v11)
    goto LABEL_6;
LABEL_3:
  v12 = *(_QWORD *)(a2 + 88);
  v13 = *(_QWORD *)(a2 + 96);
  v14 = *(_BYTE *)(a2 + 104);
  sub_2141DD130(v12, v13, v14);
  *(_QWORD *)(a1 + 88) = v12;
  *(_QWORD *)(a1 + 96) = v13;
  *(_BYTE *)(a1 + 104) = v14;
  *(_QWORD *)(a1 + 112) = v11;
  v15 = *(_QWORD *)(a2 + 120);
  v16 = *(_QWORD *)(a2 + 128);
  v17 = *(_BYTE *)(a2 + 136);
  swift_bridgeObjectRetain();
  sub_2141DD140(v15, v16, v17);
  *(_QWORD *)(a1 + 120) = v15;
  *(_QWORD *)(a1 + 128) = v16;
  *(_BYTE *)(a1 + 136) = v17;
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  v18 = *(_QWORD *)(a2 + 200);
  if (!v18)
    goto LABEL_7;
LABEL_4:
  v19 = *(_QWORD *)(a2 + 176);
  v20 = *(_QWORD *)(a2 + 184);
  v21 = *(_BYTE *)(a2 + 192);
  sub_2141DD130(v19, v20, v21);
  *(_QWORD *)(a1 + 176) = v19;
  *(_QWORD *)(a1 + 184) = v20;
  *(_BYTE *)(a1 + 192) = v21;
  *(_QWORD *)(a1 + 200) = v18;
  v22 = *(_QWORD *)(a2 + 208);
  v23 = *(_QWORD *)(a2 + 216);
  v24 = *(_BYTE *)(a2 + 224);
  swift_bridgeObjectRetain();
  sub_2141DD140(v22, v23, v24);
  *(_QWORD *)(a1 + 208) = v22;
  *(_QWORD *)(a1 + 216) = v23;
  *(_BYTE *)(a1 + 224) = v24;
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  *(_BYTE *)(a1 + 256) = *(_BYTE *)(a2 + 256);
LABEL_8:
  *(_BYTE *)(a1 + 257) = *(_BYTE *)(a2 + 257);
  return a1;
}

uint64_t assignWithCopy for SubPositionContext(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _OWORD *v32;
  _OWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  _OWORD *v62;
  _OWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;

  v4 = *(_QWORD *)(a2 + 24);
  if (*(_QWORD *)(a1 + 24))
  {
    if (v4)
    {
      v5 = *(_QWORD *)a2;
      v6 = *(_QWORD *)(a2 + 8);
      v7 = *(_BYTE *)(a2 + 16);
      sub_2141DD130(*(_QWORD *)a2, v6, v7);
      v8 = *(_QWORD *)a1;
      v9 = *(_QWORD *)(a1 + 8);
      v10 = *(_BYTE *)(a1 + 16);
      *(_QWORD *)a1 = v5;
      *(_QWORD *)(a1 + 8) = v6;
      *(_BYTE *)(a1 + 16) = v7;
      sub_2141ED0BC(v8, v9, v10);
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v11 = *(_QWORD *)(a2 + 32);
      v12 = *(_QWORD *)(a2 + 40);
      v13 = *(_BYTE *)(a2 + 48);
      sub_2141DD140(v11, v12, v13);
      v14 = *(_QWORD *)(a1 + 32);
      v15 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 32) = v11;
      *(_QWORD *)(a1 + 40) = v12;
      v16 = *(_BYTE *)(a1 + 48);
      *(_BYTE *)(a1 + 48) = v13;
      sub_2141EF1B0(v14, v15, v16);
LABEL_6:
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      v23 = *(_QWORD *)(a2 + 72);
      *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
      *(_QWORD *)(a1 + 72) = v23;
      goto LABEL_9;
    }
    sub_214209768(a1);
    v24 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v24;
    v26 = *(_OWORD *)(a2 + 48);
    v25 = *(_OWORD *)(a2 + 64);
    v27 = *(_OWORD *)(a2 + 32);
    *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
    *(_OWORD *)(a1 + 48) = v26;
    *(_OWORD *)(a1 + 64) = v25;
    *(_OWORD *)(a1 + 32) = v27;
  }
  else
  {
    if (v4)
    {
      v17 = *(_QWORD *)a2;
      v18 = *(_QWORD *)(a2 + 8);
      v19 = *(_BYTE *)(a2 + 16);
      sub_2141DD130(*(_QWORD *)a2, v18, v19);
      *(_QWORD *)a1 = v17;
      *(_QWORD *)(a1 + 8) = v18;
      *(_BYTE *)(a1 + 16) = v19;
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      v20 = *(_QWORD *)(a2 + 32);
      v21 = *(_QWORD *)(a2 + 40);
      v22 = *(_BYTE *)(a2 + 48);
      swift_bridgeObjectRetain();
      sub_2141DD140(v20, v21, v22);
      *(_QWORD *)(a1 + 32) = v20;
      *(_QWORD *)(a1 + 40) = v21;
      *(_BYTE *)(a1 + 48) = v22;
      goto LABEL_6;
    }
    v28 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v28;
    v29 = *(_OWORD *)(a2 + 32);
    v30 = *(_OWORD *)(a2 + 48);
    v31 = *(_OWORD *)(a2 + 64);
    *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
    *(_OWORD *)(a1 + 48) = v30;
    *(_OWORD *)(a1 + 64) = v31;
    *(_OWORD *)(a1 + 32) = v29;
  }
LABEL_9:
  v32 = (_OWORD *)(a1 + 88);
  v33 = (_OWORD *)(a2 + 88);
  v34 = *(_QWORD *)(a2 + 112);
  if (*(_QWORD *)(a1 + 112))
  {
    if (v34)
    {
      v35 = *(_QWORD *)(a2 + 88);
      v36 = *(_QWORD *)(a2 + 96);
      v37 = *(_BYTE *)(a2 + 104);
      sub_2141DD130(v35, v36, v37);
      v38 = *(_QWORD *)(a1 + 88);
      v39 = *(_QWORD *)(a1 + 96);
      v40 = *(_BYTE *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = v35;
      *(_QWORD *)(a1 + 96) = v36;
      *(_BYTE *)(a1 + 104) = v37;
      sub_2141ED0BC(v38, v39, v40);
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v41 = *(_QWORD *)(a2 + 120);
      v42 = *(_QWORD *)(a2 + 128);
      v43 = *(_BYTE *)(a2 + 136);
      sub_2141DD140(v41, v42, v43);
      v44 = *(_QWORD *)(a1 + 120);
      v45 = *(_QWORD *)(a1 + 128);
      *(_QWORD *)(a1 + 120) = v41;
      *(_QWORD *)(a1 + 128) = v42;
      v46 = *(_BYTE *)(a1 + 136);
      *(_BYTE *)(a1 + 136) = v43;
      sub_2141EF1B0(v44, v45, v46);
LABEL_14:
      *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
      v53 = *(_QWORD *)(a2 + 160);
      *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
      *(_QWORD *)(a1 + 160) = v53;
      goto LABEL_17;
    }
    sub_214209768(a1 + 88);
    v54 = *(_OWORD *)(a2 + 104);
    *v32 = *v33;
    *(_OWORD *)(a1 + 104) = v54;
    v56 = *(_OWORD *)(a2 + 136);
    v55 = *(_OWORD *)(a2 + 152);
    v57 = *(_OWORD *)(a2 + 120);
    *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
    *(_OWORD *)(a1 + 136) = v56;
    *(_OWORD *)(a1 + 152) = v55;
    *(_OWORD *)(a1 + 120) = v57;
  }
  else
  {
    if (v34)
    {
      v47 = *(_QWORD *)(a2 + 88);
      v48 = *(_QWORD *)(a2 + 96);
      v49 = *(_BYTE *)(a2 + 104);
      sub_2141DD130(v47, v48, v49);
      *(_QWORD *)(a1 + 88) = v47;
      *(_QWORD *)(a1 + 96) = v48;
      *(_BYTE *)(a1 + 104) = v49;
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
      v50 = *(_QWORD *)(a2 + 120);
      v51 = *(_QWORD *)(a2 + 128);
      v52 = *(_BYTE *)(a2 + 136);
      swift_bridgeObjectRetain();
      sub_2141DD140(v50, v51, v52);
      *(_QWORD *)(a1 + 120) = v50;
      *(_QWORD *)(a1 + 128) = v51;
      *(_BYTE *)(a1 + 136) = v52;
      goto LABEL_14;
    }
    v58 = *(_OWORD *)(a2 + 104);
    *v32 = *v33;
    *(_OWORD *)(a1 + 104) = v58;
    v59 = *(_OWORD *)(a2 + 120);
    v60 = *(_OWORD *)(a2 + 136);
    v61 = *(_OWORD *)(a2 + 152);
    *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
    *(_OWORD *)(a1 + 136) = v60;
    *(_OWORD *)(a1 + 152) = v61;
    *(_OWORD *)(a1 + 120) = v59;
  }
LABEL_17:
  v62 = (_OWORD *)(a1 + 176);
  v63 = (_OWORD *)(a2 + 176);
  v64 = *(_QWORD *)(a2 + 200);
  if (*(_QWORD *)(a1 + 200))
  {
    if (!v64)
    {
      sub_214209768(a1 + 176);
      v84 = *(_OWORD *)(a2 + 192);
      *v62 = *v63;
      *(_OWORD *)(a1 + 192) = v84;
      v86 = *(_OWORD *)(a2 + 224);
      v85 = *(_OWORD *)(a2 + 240);
      v87 = *(_OWORD *)(a2 + 208);
      *(_BYTE *)(a1 + 256) = *(_BYTE *)(a2 + 256);
      *(_OWORD *)(a1 + 224) = v86;
      *(_OWORD *)(a1 + 240) = v85;
      *(_OWORD *)(a1 + 208) = v87;
      goto LABEL_25;
    }
    v65 = *(_QWORD *)(a2 + 176);
    v66 = *(_QWORD *)(a2 + 184);
    v67 = *(_BYTE *)(a2 + 192);
    sub_2141DD130(v65, v66, v67);
    v68 = *(_QWORD *)(a1 + 176);
    v69 = *(_QWORD *)(a1 + 184);
    v70 = *(_BYTE *)(a1 + 192);
    *(_QWORD *)(a1 + 176) = v65;
    *(_QWORD *)(a1 + 184) = v66;
    *(_BYTE *)(a1 + 192) = v67;
    sub_2141ED0BC(v68, v69, v70);
    *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v71 = *(_QWORD *)(a2 + 208);
    v72 = *(_QWORD *)(a2 + 216);
    v73 = *(_BYTE *)(a2 + 224);
    sub_2141DD140(v71, v72, v73);
    v74 = *(_QWORD *)(a1 + 208);
    v75 = *(_QWORD *)(a1 + 216);
    *(_QWORD *)(a1 + 208) = v71;
    *(_QWORD *)(a1 + 216) = v72;
    v76 = *(_BYTE *)(a1 + 224);
    *(_BYTE *)(a1 + 224) = v73;
    sub_2141EF1B0(v74, v75, v76);
  }
  else
  {
    if (!v64)
    {
      v88 = *(_OWORD *)(a2 + 192);
      *v62 = *v63;
      *(_OWORD *)(a1 + 192) = v88;
      v89 = *(_OWORD *)(a2 + 208);
      v90 = *(_OWORD *)(a2 + 224);
      v91 = *(_OWORD *)(a2 + 240);
      *(_BYTE *)(a1 + 256) = *(_BYTE *)(a2 + 256);
      *(_OWORD *)(a1 + 224) = v90;
      *(_OWORD *)(a1 + 240) = v91;
      *(_OWORD *)(a1 + 208) = v89;
      goto LABEL_25;
    }
    v77 = *(_QWORD *)(a2 + 176);
    v78 = *(_QWORD *)(a2 + 184);
    v79 = *(_BYTE *)(a2 + 192);
    sub_2141DD130(v77, v78, v79);
    *(_QWORD *)(a1 + 176) = v77;
    *(_QWORD *)(a1 + 184) = v78;
    *(_BYTE *)(a1 + 192) = v79;
    *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
    v80 = *(_QWORD *)(a2 + 208);
    v81 = *(_QWORD *)(a2 + 216);
    v82 = *(_BYTE *)(a2 + 224);
    swift_bridgeObjectRetain();
    sub_2141DD140(v80, v81, v82);
    *(_QWORD *)(a1 + 208) = v80;
    *(_QWORD *)(a1 + 216) = v81;
    *(_BYTE *)(a1 + 224) = v82;
  }
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  v83 = *(_QWORD *)(a2 + 248);
  *(_BYTE *)(a1 + 256) = *(_BYTE *)(a2 + 256);
  *(_QWORD *)(a1 + 248) = v83;
LABEL_25:
  *(_BYTE *)(a1 + 257) = *(_BYTE *)(a2 + 257);
  return a1;
}

uint64_t sub_214209768(uint64_t a1)
{
  destroy for AnyPlottableValue(a1);
  return a1;
}

void *initializeWithTake for SubPositionContext(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x102uLL);
}

uint64_t assignWithTake for SubPositionContext(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  __int128 v35;
  __int128 v36;

  if (*(_QWORD *)(a1 + 24))
  {
    v4 = *(_QWORD *)(a2 + 24);
    if (v4)
    {
      v5 = *(_BYTE *)(a2 + 16);
      v6 = *(_QWORD *)a1;
      v7 = *(_QWORD *)(a1 + 8);
      v8 = *(_BYTE *)(a1 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_BYTE *)(a1 + 16) = v5;
      sub_2141ED0BC(v6, v7, v8);
      *(_QWORD *)(a1 + 24) = v4;
      swift_bridgeObjectRelease();
      v9 = *(_BYTE *)(a2 + 48);
      v10 = *(_QWORD *)(a1 + 32);
      v11 = *(_QWORD *)(a1 + 40);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      v12 = *(_BYTE *)(a1 + 48);
      *(_BYTE *)(a1 + 48) = v9;
      sub_2141EF1B0(v10, v11, v12);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
      goto LABEL_6;
    }
    sub_214209768(a1);
  }
  v13 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v13;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  v14 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v14;
LABEL_6:
  if (*(_QWORD *)(a1 + 112))
  {
    v15 = *(_QWORD *)(a2 + 112);
    if (v15)
    {
      v16 = *(_BYTE *)(a2 + 104);
      v17 = *(_QWORD *)(a1 + 88);
      v18 = *(_QWORD *)(a1 + 96);
      v19 = *(_BYTE *)(a1 + 104);
      *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
      *(_BYTE *)(a1 + 104) = v16;
      sub_2141ED0BC(v17, v18, v19);
      *(_QWORD *)(a1 + 112) = v15;
      swift_bridgeObjectRelease();
      v20 = *(_BYTE *)(a2 + 136);
      v21 = *(_QWORD *)(a1 + 120);
      v22 = *(_QWORD *)(a1 + 128);
      *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
      v23 = *(_BYTE *)(a1 + 136);
      *(_BYTE *)(a1 + 136) = v20;
      sub_2141EF1B0(v21, v22, v23);
      *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
      *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
      *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
      goto LABEL_11;
    }
    sub_214209768(a1 + 88);
  }
  v24 = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = v24;
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  v25 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = v25;
LABEL_11:
  if (!*(_QWORD *)(a1 + 200))
  {
LABEL_15:
    v35 = *(_OWORD *)(a2 + 224);
    *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
    *(_OWORD *)(a1 + 224) = v35;
    *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
    *(_BYTE *)(a1 + 256) = *(_BYTE *)(a2 + 256);
    v36 = *(_OWORD *)(a2 + 192);
    *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 192) = v36;
    goto LABEL_16;
  }
  v26 = *(_QWORD *)(a2 + 200);
  if (!v26)
  {
    sub_214209768(a1 + 176);
    goto LABEL_15;
  }
  v27 = *(_BYTE *)(a2 + 192);
  v28 = *(_QWORD *)(a1 + 176);
  v29 = *(_QWORD *)(a1 + 184);
  v30 = *(_BYTE *)(a1 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_BYTE *)(a1 + 192) = v27;
  sub_2141ED0BC(v28, v29, v30);
  *(_QWORD *)(a1 + 200) = v26;
  swift_bridgeObjectRelease();
  v31 = *(_BYTE *)(a2 + 224);
  v32 = *(_QWORD *)(a1 + 208);
  v33 = *(_QWORD *)(a1 + 216);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  v34 = *(_BYTE *)(a1 + 224);
  *(_BYTE *)(a1 + 224) = v31;
  sub_2141EF1B0(v32, v33, v34);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  *(_BYTE *)(a1 + 256) = *(_BYTE *)(a2 + 256);
LABEL_16:
  *(_BYTE *)(a1 + 257) = *(_BYTE *)(a2 + 257);
  return a1;
}

uint64_t getEnumTagSinglePayload for SubPositionContext(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 258))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SubPositionContext(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 248) = 0;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 256) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 258) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 258) = 0;
    if (a2)
      *(_QWORD *)(result + 24) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for SubPositionContext()
{
  return &type metadata for SubPositionContext;
}

uint64_t destroy for AnyPlottableValue(uint64_t a1)
{
  sub_2141ED0BC(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_bridgeObjectRelease();
  return sub_2141EF1B0(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_BYTE *)(a1 + 48));
}

uint64_t initializeWithCopy for SubPositionContext.Value(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_BYTE *)(a2 + 16);
  sub_2141DD130(*(_QWORD *)a2, v5, v6);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  v7 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_BYTE *)(a2 + 48);
  swift_bridgeObjectRetain();
  sub_2141DD140(v7, v8, v9);
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_BYTE *)(a1 + 48) = v9;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  return a1;
}

uint64_t assignWithCopy for SubPositionContext.Value(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_BYTE *)(a2 + 16);
  sub_2141DD130(*(_QWORD *)a2, v5, v6);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  sub_2141ED0BC(v7, v8, v9);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v10 = *(_QWORD *)(a2 + 32);
  v11 = *(_QWORD *)(a2 + 40);
  v12 = *(_BYTE *)(a2 + 48);
  sub_2141DD140(v10, v11, v12);
  v13 = *(_QWORD *)(a1 + 32);
  v14 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = v10;
  *(_QWORD *)(a1 + 40) = v11;
  v15 = *(_BYTE *)(a1 + 48);
  *(_BYTE *)(a1 + 48) = v12;
  sub_2141EF1B0(v13, v14, v15);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  v16 = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = v16;
  return a1;
}

uint64_t assignWithTake for SubPositionContext.Value(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  v4 = *(_BYTE *)(a2 + 16);
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_BYTE *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v4;
  sub_2141ED0BC(v5, v6, v7);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  v8 = *(_BYTE *)(a2 + 48);
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  v11 = *(_BYTE *)(a1 + 48);
  *(_BYTE *)(a1 + 48) = v8;
  sub_2141EF1B0(v9, v10, v11);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  return a1;
}

ValueMetadata *type metadata accessor for SubPositionContext.Value()
{
  return &type metadata for SubPositionContext.Value;
}

uint64_t destroy for StackContext()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *_s6Charts12StackContextVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for StackContext(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for StackContext(_QWORD *a1, _OWORD *a2, uint64_t a3)
{
  return sub_214209DA4(a1, a2, a3, (void (*)(_QWORD))MEMORY[0x24BEE4BC0]);
}

_QWORD *sub_214209DA4(_QWORD *a1, _OWORD *a2, uint64_t a3, void (*a4)(_QWORD))
{
  a4(*a1);
  *(_OWORD *)a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ChartContentList(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ChartContentList(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for StackContext()
{
  return &type metadata for StackContext;
}

uint64_t destroy for CovariantYDomain(uint64_t a1)
{
  uint64_t result;

  result = swift_release();
  if (*(_QWORD *)(a1 + 16))
    return swift_release();
  return result;
}

_QWORD *initializeWithCopy for CovariantYDomain(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v6 = a2 + 2;
  v5 = a2[2];
  swift_retain();
  if (v5)
  {
    v7 = a2[3];
    a1[2] = v5;
    a1[3] = v7;
    swift_retain();
  }
  else
  {
    *((_OWORD *)a1 + 1) = *v6;
  }
  return a1;
}

_QWORD *assignWithCopy for CovariantYDomain(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain();
  swift_release();
  v5 = a2[2];
  if (!a1[2])
  {
    if (v5)
    {
      v7 = a2[3];
      a1[2] = v5;
      a1[3] = v7;
      swift_retain();
      return a1;
    }
LABEL_7:
    *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
    return a1;
  }
  if (!v5)
  {
    swift_release();
    goto LABEL_7;
  }
  v6 = a2[3];
  a1[2] = v5;
  a1[3] = v6;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for CovariantYDomain(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  v4 = *(_QWORD *)(a2 + 16);
  if (!*(_QWORD *)(a1 + 16))
  {
    if (v4)
    {
      v6 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 16) = v4;
      *(_QWORD *)(a1 + 24) = v6;
      return a1;
    }
LABEL_7:
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    return a1;
  }
  if (!v4)
  {
    swift_release();
    goto LABEL_7;
  }
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for CovariantYDomain()
{
  return &type metadata for CovariantYDomain;
}

uint64_t destroy for PlottedValueCollector()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PlottedValueCollector(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v3 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v3;
  *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PlottedValueCollector(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;

  v4 = *a2;
  *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
  *(_OWORD *)a1 = v4;
  v5 = *(__int128 *)((char *)a2 + 24);
  *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
  *(_OWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 6);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *((_QWORD *)a2 + 7);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 64) = *((_WORD *)a2 + 32);
  return a1;
}

__n128 initializeWithTake for PlottedValueCollector(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for PlottedValueCollector(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
  return a1;
}

uint64_t getEnumTagSinglePayload for PlottedValueCollector(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 66))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 48);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PlottedValueCollector(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 64) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 66) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 48) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 66) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PlottedValueCollector()
{
  return &type metadata for PlottedValueCollector;
}

ValueMetadata *type metadata accessor for _ChartContentRenderInputs.Target()
{
  return &type metadata for _ChartContentRenderInputs.Target;
}

uint64_t sub_21420A298(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v4 = *(_QWORD *)(a1 + 16);
  result = type metadata accessor for ConcreteScale(319, MEMORY[0x24BEE13C8], v4, a4);
  if (v7 <= 0x3F)
  {
    result = type metadata accessor for ConcreteScale(319, MEMORY[0x24BEE0D00], v4, v6);
    if (v8 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_21420A334(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  size_t v8;
  size_t v9;
  unint64_t v10;
  int v11;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int v17;
  uint64_t v19;
  void *v20;
  const void *v21;
  uint64_t (*v22)(const void *, uint64_t, uint64_t);
  int v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t v30;
  unsigned int v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  _OWORD *v35;
  _OWORD *v36;
  __int128 v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  unint64_t v43;
  unint64_t v44;
  unsigned int v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  _OWORD *v49;
  __int128 v50;
  _OWORD *v51;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = v6;
  if (*(_DWORD *)(v5 + 84))
    v8 = *(_QWORD *)(v5 + 64);
  else
    v8 = *(_QWORD *)(v5 + 64) + 1;
  v9 = v8 + 7;
  v10 = (((((v8 + 7 + ((v6 + 16) & ~(unint64_t)v6)) & 0xFFFFFFFFFFFFFFF8)
         + 23) & 0xFFFFFFFFFFFFFFF8)
       + 31) & 0xFFFFFFFFFFFFFFF8;
  v11 = v6 & 0x100000;
  if (v7 > 7 || v11 != 0 || v10 + 33 > 0x18)
  {
    v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v7 & 0xF8 ^ 0x1F8) & (v7 + 16)));
    swift_retain();
  }
  else
  {
    v15 = ~v7;
    v16 = v10 + 32;
    v17 = *((unsigned __int8 *)a2 + v10 + 32);
    if (((v10 + 32) & 0xFFFFFFF8) != 0 && v17 >= 2)
      v17 = *(_DWORD *)a2 + 2;
    v19 = a2[1];
    *a1 = *a2;
    a1[1] = v19;
    v20 = (void *)(((unint64_t)a1 + v7 + 16) & v15);
    v21 = (const void *)(((unint64_t)a2 + v7 + 16) & v15);
    v22 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(v5 + 48);
    swift_retain();
    v23 = v22(v21, 1, v4);
    if (v17 == 1)
    {
      if (v23)
      {
        memcpy(v20, v21, v8);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v20, v21, v4);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v20, 0, 1, v4);
      }
      v24 = ((unint64_t)v20 + v9) & 0xFFFFFFFFFFFFFFF8;
      v25 = ((unint64_t)v21 + v9) & 0xFFFFFFFFFFFFFFF8;
      if (*(_QWORD *)v25 < 0xFFFFFFFFuLL)
      {
        *(_OWORD *)v24 = *(_OWORD *)v25;
      }
      else
      {
        v26 = *(_QWORD *)(v25 + 8);
        *(_QWORD *)v24 = *(_QWORD *)v25;
        *(_QWORD *)(v24 + 8) = v26;
        swift_retain();
      }
      v27 = (_QWORD *)((v24 + 23) & 0xFFFFFFFFFFFFFFF8);
      v28 = (_QWORD *)((v25 + 23) & 0xFFFFFFFFFFFFFFF8);
      *v27 = *v28;
      v29 = ((unint64_t)v27 + 15) & 0xFFFFFFFFFFFFFFF8;
      v30 = ((unint64_t)v28 + 15) & 0xFFFFFFFFFFFFFFF8;
      v31 = *(unsigned __int8 *)(v30 + 8);
      swift_bridgeObjectRetain();
      if (v31 > 1)
      {
        v34 = *(_QWORD *)v30;
        *(_BYTE *)(v29 + 8) = *(_BYTE *)(v30 + 8);
        *(_QWORD *)v29 = v34;
      }
      else
      {
        v32 = v31 != 0;
        v33 = *(_QWORD *)v30;
        sub_2141E83F4(v33, v32);
        *(_QWORD *)v29 = v33;
        *(_BYTE *)(v29 + 8) = v32;
      }
      v35 = (_OWORD *)(((unint64_t)v27 + 31) & 0xFFFFFFFFFFFFFFF8);
      v36 = (_OWORD *)(((unint64_t)v28 + 31) & 0xFFFFFFFFFFFFFFF8);
      v37 = v36[1];
      *v35 = *v36;
      v35[1] = v37;
      *((_BYTE *)a1 + v16) = 1;
    }
    else
    {
      if (v23)
      {
        memcpy(v20, v21, v8);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v20, v21, v4);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v20, 0, 1, v4);
      }
      v38 = ((unint64_t)v20 + v9) & 0xFFFFFFFFFFFFFFF8;
      v39 = ((unint64_t)v21 + v9) & 0xFFFFFFFFFFFFFFF8;
      if (*(_QWORD *)v39 < 0xFFFFFFFFuLL)
      {
        *(_OWORD *)v38 = *(_OWORD *)v39;
      }
      else
      {
        v40 = *(_QWORD *)(v39 + 8);
        *(_QWORD *)v38 = *(_QWORD *)v39;
        *(_QWORD *)(v38 + 8) = v40;
        swift_retain();
      }
      v41 = (_QWORD *)((v38 + 23) & 0xFFFFFFFFFFFFFFF8);
      v42 = (_QWORD *)((v39 + 23) & 0xFFFFFFFFFFFFFFF8);
      *v41 = *v42;
      v43 = ((unint64_t)v41 + 15) & 0xFFFFFFFFFFFFFFF8;
      v44 = ((unint64_t)v42 + 15) & 0xFFFFFFFFFFFFFFF8;
      v45 = *(unsigned __int8 *)(v44 + 8);
      swift_bridgeObjectRetain();
      if (v45 > 1)
      {
        v48 = *(_QWORD *)v44;
        *(_BYTE *)(v43 + 8) = *(_BYTE *)(v44 + 8);
        *(_QWORD *)v43 = v48;
      }
      else
      {
        v46 = v45 != 0;
        v47 = *(_QWORD *)v44;
        sub_2141E83F4(v47, v46);
        *(_QWORD *)v43 = v47;
        *(_BYTE *)(v43 + 8) = v46;
      }
      v49 = (_OWORD *)(((unint64_t)v42 + 31) & 0xFFFFFFFFFFFFFFF8);
      v50 = v49[1];
      v51 = (_OWORD *)(((unint64_t)v41 + 31) & 0xFFFFFFFFFFFFFFF8);
      *v51 = *v49;
      v51[1] = v50;
      *((_BYTE *)a1 + v16) = 0;
    }
  }
  return a1;
}

uint64_t sub_21420A660(_DWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v12;
  int v13;
  _QWORD *v14;
  uint64_t result;
  unint64_t v16;
  unsigned int v17;
  _QWORD *v18;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  if (*(_DWORD *)(v4 + 84))
    v6 = *(_QWORD *)(v4 + 64);
  else
    v6 = *(_QWORD *)(v4 + 64) + 1;
  v7 = v6 + 7;
  v8 = ((((((v6 + 7 + ((v5 + 16) & ~v5)) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8)
     + 32;
  v9 = *((unsigned __int8 *)a1 + v8);
  v10 = v8 & 0xFFFFFFF8;
  if (v9 >= 2 && v10 != 0)
    v9 = *a1 + 2;
  swift_release();
  v12 = ((unint64_t)a1 + v5 + 16) & ~v5;
  v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v12, 1, v3);
  if (v9 == 1)
  {
    if (!v13)
      (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v12, v3);
    v14 = (_QWORD *)((v7 + v12) & 0xFFFFFFFFFFFFFFF8);
    if (*v14 >= 0xFFFFFFFFuLL)
      swift_release();
    result = swift_bridgeObjectRelease();
    v16 = ((((unint64_t)v14 + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
    v17 = *(unsigned __int8 *)(v16 + 8);
    if (v17 > 1)
      return result;
    return sub_2141E833C(*(_QWORD *)v16, v17 != 0);
  }
  if (!v13)
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v12, v3);
  v18 = (_QWORD *)((v7 + v12) & 0xFFFFFFFFFFFFFFF8);
  if (*v18 >= 0xFFFFFFFFuLL)
    swift_release();
  result = swift_bridgeObjectRelease();
  v16 = ((((unint64_t)v18 + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  v17 = *(unsigned __int8 *)(v16 + 8);
  if (v17 < 2)
    return sub_2141E833C(*(_QWORD *)v16, v17 != 0);
  return result;
}

_QWORD *sub_21420A7F4(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  size_t v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t v13;
  void *v14;
  const void *v15;
  uint64_t (*v16)(const void *, uint64_t, uint64_t);
  int v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unsigned int v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  _OWORD *v39;
  __int128 v40;
  _OWORD *v41;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = ~v6;
  if (*(_DWORD *)(v5 + 84))
    v8 = *(_QWORD *)(v5 + 64);
  else
    v8 = *(_QWORD *)(v5 + 64) + 1;
  v9 = v8 + 7;
  v10 = ((((((v8 + 7 + ((v6 + 16) & ~v6)) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8)
      + 32;
  v11 = *(unsigned __int8 *)(a2 + v10);
  if (v11 >= 2 && (v10 & 0xFFFFFFF8) != 0)
    v11 = *(_DWORD *)a2 + 2;
  v13 = *(_QWORD *)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v13;
  v14 = (void *)(((unint64_t)a1 + v6 + 16) & v7);
  v15 = (const void *)((a2 + v6 + 16) & v7);
  v16 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(v5 + 48);
  swift_retain();
  v17 = v16(v15, 1, v4);
  if (v11 == 1)
  {
    if (v17)
    {
      memcpy(v14, v15, v8);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v14, v15, v4);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v14, 0, 1, v4);
    }
    v18 = ((unint64_t)v14 + v9) & 0xFFFFFFFFFFFFFFF8;
    v19 = ((unint64_t)v15 + v9) & 0xFFFFFFFFFFFFFFF8;
    if (*(_QWORD *)v19 < 0xFFFFFFFFuLL)
    {
      *(_OWORD *)v18 = *(_OWORD *)v19;
    }
    else
    {
      v20 = *(_QWORD *)(v19 + 8);
      *(_QWORD *)v18 = *(_QWORD *)v19;
      *(_QWORD *)(v18 + 8) = v20;
      swift_retain();
    }
    v21 = (_QWORD *)((v18 + 23) & 0xFFFFFFFFFFFFFFF8);
    v22 = (_QWORD *)((v19 + 23) & 0xFFFFFFFFFFFFFFF8);
    *v21 = *v22;
    v23 = ((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8;
    v24 = ((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8;
    v25 = *(unsigned __int8 *)(v24 + 8);
    swift_bridgeObjectRetain();
    if (v25 > 1)
    {
      v28 = *(_QWORD *)v24;
      *(_BYTE *)(v23 + 8) = *(_BYTE *)(v24 + 8);
      *(_QWORD *)v23 = v28;
    }
    else
    {
      v26 = v25 != 0;
      v27 = *(_QWORD *)v24;
      sub_2141E83F4(v27, v26);
      *(_QWORD *)v23 = v27;
      *(_BYTE *)(v23 + 8) = v26;
    }
    v29 = 1;
  }
  else
  {
    if (v17)
    {
      memcpy(v14, v15, v8);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v14, v15, v4);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v14, 0, 1, v4);
    }
    v30 = ((unint64_t)v14 + v9) & 0xFFFFFFFFFFFFFFF8;
    v31 = ((unint64_t)v15 + v9) & 0xFFFFFFFFFFFFFFF8;
    if (*(_QWORD *)v31 < 0xFFFFFFFFuLL)
    {
      *(_OWORD *)v30 = *(_OWORD *)v31;
    }
    else
    {
      v32 = *(_QWORD *)(v31 + 8);
      *(_QWORD *)v30 = *(_QWORD *)v31;
      *(_QWORD *)(v30 + 8) = v32;
      swift_retain();
    }
    v21 = (_QWORD *)((v30 + 23) & 0xFFFFFFFFFFFFFFF8);
    v22 = (_QWORD *)((v31 + 23) & 0xFFFFFFFFFFFFFFF8);
    *v21 = *v22;
    v33 = ((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8;
    v34 = ((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8;
    v35 = *(unsigned __int8 *)(v34 + 8);
    swift_bridgeObjectRetain();
    if (v35 > 1)
    {
      v29 = 0;
      v38 = *(_QWORD *)v34;
      *(_BYTE *)(v33 + 8) = *(_BYTE *)(v34 + 8);
      *(_QWORD *)v33 = v38;
    }
    else
    {
      v36 = v35 != 0;
      v37 = *(_QWORD *)v34;
      sub_2141E83F4(v37, v36);
      v29 = 0;
      *(_QWORD *)v33 = v37;
      *(_BYTE *)(v33 + 8) = v36;
    }
  }
  v39 = (_OWORD *)(((unint64_t)v22 + 31) & 0xFFFFFFFFFFFFFFF8);
  v40 = v39[1];
  v41 = (_OWORD *)(((unint64_t)v21 + 31) & 0xFFFFFFFFFFFFFFF8);
  *v41 = *v39;
  v41[1] = v40;
  *((_BYTE *)a1 + v10) = v29;
  return a1;
}

uint64_t sub_21420AAD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t v12;
  void *v14;
  uint64_t (*v15)(void *, uint64_t, uint64_t);
  int v16;
  _QWORD *v17;
  unint64_t v18;
  unsigned int v19;
  _QWORD *v20;
  unsigned int v21;
  BOOL v22;
  uint64_t v23;
  void *v24;
  int v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  unint64_t v31;
  unint64_t v32;
  unsigned int v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unsigned int v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  _OWORD *v47;
  __int128 v48;
  _OWORD *v49;
  size_t __n;
  unint64_t v52;

  if (a1 == a2)
    return a1;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  if (*(_DWORD *)(v6 + 84))
    v8 = *(_QWORD *)(v6 + 64);
  else
    v8 = *(_QWORD *)(v6 + 64) + 1;
  __n = v8;
  v9 = v8 + 7;
  v10 = ((((((v8 + 7 + ((v7 + 16) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8)
      + 32;
  v11 = *(unsigned __int8 *)(a1 + v10);
  v52 = v10;
  v12 = v10 & 0xFFFFFFF8;
  if (v11 >= 2 && v12 != 0)
    v11 = *(_DWORD *)a1 + 2;
  swift_release();
  v14 = (void *)((a1 + v7 + 16) & ~v7);
  v15 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  v16 = v15(v14, 1, v5);
  if (v11 == 1)
  {
    if (!v16)
      (*(void (**)(void *, uint64_t))(v6 + 8))(v14, v5);
    v17 = (_QWORD *)(((unint64_t)v14 + v9) & 0xFFFFFFFFFFFFFFF8);
    if (*v17 >= 0xFFFFFFFFuLL)
      swift_release();
    swift_bridgeObjectRelease();
    v18 = ((((unint64_t)v17 + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
    v19 = *(unsigned __int8 *)(v18 + 8);
    if (v19 > 1)
      goto LABEL_23;
  }
  else
  {
    if (!v16)
      (*(void (**)(void *, uint64_t))(v6 + 8))(v14, v5);
    v20 = (_QWORD *)(((unint64_t)v14 + v9) & 0xFFFFFFFFFFFFFFF8);
    if (*v20 >= 0xFFFFFFFFuLL)
      swift_release();
    swift_bridgeObjectRelease();
    v18 = ((((unint64_t)v20 + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
    v19 = *(unsigned __int8 *)(v18 + 8);
    if (v19 >= 2)
      goto LABEL_23;
  }
  sub_2141E833C(*(_QWORD *)v18, v19 != 0);
LABEL_23:
  v21 = *(unsigned __int8 *)(a2 + v52);
  if (v12)
    v22 = v21 >= 2;
  else
    v22 = 0;
  if (v22)
    v21 = *(_DWORD *)a2 + 2;
  v23 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v23;
  v24 = (void *)((a2 + v7 + 16) & ~v7);
  swift_retain();
  v25 = v15(v24, 1, v5);
  if (v21 == 1)
  {
    if (v25)
    {
      memcpy(v14, v24, __n);
    }
    else
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 16))(v14, v24, v5);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v14, 0, 1, v5);
    }
    v26 = ((unint64_t)v14 + v9) & 0xFFFFFFFFFFFFFFF8;
    v27 = ((unint64_t)v24 + v9) & 0xFFFFFFFFFFFFFFF8;
    if (*(_QWORD *)v27 < 0xFFFFFFFFuLL)
    {
      *(_OWORD *)v26 = *(_OWORD *)v27;
    }
    else
    {
      v28 = *(_QWORD *)(v27 + 8);
      *(_QWORD *)v26 = *(_QWORD *)v27;
      *(_QWORD *)(v26 + 8) = v28;
      swift_retain();
    }
    v29 = (_QWORD *)((v26 + 23) & 0xFFFFFFFFFFFFFFF8);
    v30 = (_QWORD *)((v27 + 23) & 0xFFFFFFFFFFFFFFF8);
    *v29 = *v30;
    v31 = ((unint64_t)v29 + 15) & 0xFFFFFFFFFFFFFFF8;
    v32 = ((unint64_t)v30 + 15) & 0xFFFFFFFFFFFFFFF8;
    v33 = *(unsigned __int8 *)(v32 + 8);
    swift_bridgeObjectRetain();
    if (v33 > 1)
    {
      v36 = *(_QWORD *)v32;
      *(_BYTE *)(v31 + 8) = *(_BYTE *)(v32 + 8);
      *(_QWORD *)v31 = v36;
    }
    else
    {
      v34 = v33 != 0;
      v35 = *(_QWORD *)v32;
      sub_2141E83F4(v35, v34);
      *(_QWORD *)v31 = v35;
      *(_BYTE *)(v31 + 8) = v34;
    }
    v37 = 1;
  }
  else
  {
    if (v25)
    {
      memcpy(v14, v24, __n);
    }
    else
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 16))(v14, v24, v5);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v14, 0, 1, v5);
    }
    v38 = ((unint64_t)v14 + v9) & 0xFFFFFFFFFFFFFFF8;
    v39 = ((unint64_t)v24 + v9) & 0xFFFFFFFFFFFFFFF8;
    if (*(_QWORD *)v39 < 0xFFFFFFFFuLL)
    {
      *(_OWORD *)v38 = *(_OWORD *)v39;
    }
    else
    {
      v40 = *(_QWORD *)(v39 + 8);
      *(_QWORD *)v38 = *(_QWORD *)v39;
      *(_QWORD *)(v38 + 8) = v40;
      swift_retain();
    }
    v29 = (_QWORD *)((v38 + 23) & 0xFFFFFFFFFFFFFFF8);
    v30 = (_QWORD *)((v39 + 23) & 0xFFFFFFFFFFFFFFF8);
    *v29 = *v30;
    v41 = ((unint64_t)v29 + 15) & 0xFFFFFFFFFFFFFFF8;
    v42 = ((unint64_t)v30 + 15) & 0xFFFFFFFFFFFFFFF8;
    v43 = *(unsigned __int8 *)(v42 + 8);
    swift_bridgeObjectRetain();
    if (v43 > 1)
    {
      v37 = 0;
      v46 = *(_QWORD *)v42;
      *(_BYTE *)(v41 + 8) = *(_BYTE *)(v42 + 8);
      *(_QWORD *)v41 = v46;
    }
    else
    {
      v44 = v43 != 0;
      v45 = *(_QWORD *)v42;
      sub_2141E83F4(v45, v44);
      v37 = 0;
      *(_QWORD *)v41 = v45;
      *(_BYTE *)(v41 + 8) = v44;
    }
  }
  v47 = (_OWORD *)(((unint64_t)v30 + 31) & 0xFFFFFFFFFFFFFFF8);
  v48 = v47[1];
  v49 = (_OWORD *)(((unint64_t)v29 + 31) & 0xFFFFFFFFFFFFFFF8);
  *v49 = *v47;
  v49[1] = v48;
  *(_BYTE *)(a1 + v52) = v37;
  return a1;
}

_OWORD *sub_21420AED4(_OWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  size_t v9;
  unint64_t v10;
  unsigned int v11;
  void *v13;
  const void *v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _OWORD *v26;
  _OWORD *v27;
  __int128 v28;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = ~v6;
  if (*(_DWORD *)(v5 + 84))
    v8 = *(_QWORD *)(v5 + 64);
  else
    v8 = *(_QWORD *)(v5 + 64) + 1;
  v9 = v8 + 7;
  v10 = ((((((v8 + 7 + ((v6 + 16) & ~v6)) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8)
      + 32;
  v11 = *((unsigned __int8 *)a2 + v10);
  if (v11 >= 2 && (v10 & 0xFFFFFFF8) != 0)
    v11 = *a2 + 2;
  *a1 = *(_OWORD *)a2;
  v13 = (void *)(((unint64_t)a1 + v6 + 16) & v7);
  v14 = (const void *)(((unint64_t)a2 + v6 + 16) & v7);
  v15 = (*(uint64_t (**)(const void *, uint64_t, uint64_t))(v5 + 48))(v14, 1, v4);
  if (v11 == 1)
  {
    if (v15)
    {
      memcpy(v13, v14, v8);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v5 + 32))(v13, v14, v4);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v13, 0, 1, v4);
    }
    v16 = ((unint64_t)v13 + v9) & 0xFFFFFFFFFFFFFFF8;
    v17 = ((unint64_t)v14 + v9) & 0xFFFFFFFFFFFFFFF8;
    if (*(_QWORD *)v17 < 0xFFFFFFFFuLL)
    {
      *(_OWORD *)v16 = *(_OWORD *)v17;
    }
    else
    {
      v18 = *(_QWORD *)(v17 + 8);
      *(_QWORD *)v16 = *(_QWORD *)v17;
      *(_QWORD *)(v16 + 8) = v18;
    }
    v19 = 1;
  }
  else
  {
    if (v15)
    {
      memcpy(v13, v14, v8);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v5 + 32))(v13, v14, v4);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v13, 0, 1, v4);
    }
    v16 = ((unint64_t)v13 + v9) & 0xFFFFFFFFFFFFFFF8;
    v17 = ((unint64_t)v14 + v9) & 0xFFFFFFFFFFFFFFF8;
    v19 = 0;
    if (*(_QWORD *)v17 < 0xFFFFFFFFuLL)
    {
      *(_OWORD *)v16 = *(_OWORD *)v17;
    }
    else
    {
      v20 = *(_QWORD *)(v17 + 8);
      *(_QWORD *)v16 = *(_QWORD *)v17;
      *(_QWORD *)(v16 + 8) = v20;
    }
  }
  v21 = (_QWORD *)((v16 + 23) & 0xFFFFFFFFFFFFFFF8);
  v22 = (_QWORD *)((v17 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v21 = *v22;
  v23 = ((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8;
  v24 = ((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8;
  v25 = *(_QWORD *)v24;
  *(_BYTE *)(v23 + 8) = *(_BYTE *)(v24 + 8);
  *(_QWORD *)v23 = v25;
  v26 = (_OWORD *)(((unint64_t)v21 + 31) & 0xFFFFFFFFFFFFFFF8);
  v27 = (_OWORD *)(((unint64_t)v22 + 31) & 0xFFFFFFFFFFFFFFF8);
  v28 = v27[1];
  *v26 = *v27;
  v26[1] = v28;
  *((_BYTE *)a1 + v10) = v19;
  return a1;
}

_DWORD *sub_21420B100(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t v12;
  void *v14;
  uint64_t (*v15)(void *, uint64_t, uint64_t);
  int v16;
  _QWORD *v17;
  unint64_t v18;
  unsigned int v19;
  _QWORD *v20;
  unsigned int v21;
  BOOL v22;
  void *v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _OWORD *v35;
  _OWORD *v36;
  __int128 v37;
  size_t __n;
  unint64_t v40;

  if (a1 == a2)
    return a1;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  if (*(_DWORD *)(v6 + 84))
    v8 = *(_QWORD *)(v6 + 64);
  else
    v8 = *(_QWORD *)(v6 + 64) + 1;
  __n = v8;
  v9 = v8 + 7;
  v10 = ((((((v8 + 7 + ((v7 + 16) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8)
      + 32;
  v11 = *((unsigned __int8 *)a1 + v10);
  v40 = v10;
  v12 = v10 & 0xFFFFFFF8;
  if (v11 >= 2 && v12 != 0)
    v11 = *a1 + 2;
  swift_release();
  v14 = (void *)(((unint64_t)a1 + v7 + 16) & ~v7);
  v15 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  v16 = v15(v14, 1, v5);
  if (v11 == 1)
  {
    if (!v16)
      (*(void (**)(void *, uint64_t))(v6 + 8))(v14, v5);
    v17 = (_QWORD *)(((unint64_t)v14 + v9) & 0xFFFFFFFFFFFFFFF8);
    if (*v17 >= 0xFFFFFFFFuLL)
      swift_release();
    swift_bridgeObjectRelease();
    v18 = ((((unint64_t)v17 + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
    v19 = *(unsigned __int8 *)(v18 + 8);
    if (v19 > 1)
      goto LABEL_23;
  }
  else
  {
    if (!v16)
      (*(void (**)(void *, uint64_t))(v6 + 8))(v14, v5);
    v20 = (_QWORD *)(((unint64_t)v14 + v9) & 0xFFFFFFFFFFFFFFF8);
    if (*v20 >= 0xFFFFFFFFuLL)
      swift_release();
    swift_bridgeObjectRelease();
    v18 = ((((unint64_t)v20 + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
    v19 = *(unsigned __int8 *)(v18 + 8);
    if (v19 >= 2)
      goto LABEL_23;
  }
  sub_2141E833C(*(_QWORD *)v18, v19 != 0);
LABEL_23:
  v21 = *((unsigned __int8 *)a2 + v40);
  if (v12)
    v22 = v21 >= 2;
  else
    v22 = 0;
  if (v22)
    v21 = *a2 + 2;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v23 = (void *)(((unint64_t)a2 + v7 + 16) & ~v7);
  v24 = v15(v23, 1, v5);
  if (v21 == 1)
  {
    if (v24)
    {
      memcpy(v14, v23, __n);
    }
    else
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 32))(v14, v23, v5);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v14, 0, 1, v5);
    }
    v25 = ((unint64_t)v14 + v9) & 0xFFFFFFFFFFFFFFF8;
    v26 = ((unint64_t)v23 + v9) & 0xFFFFFFFFFFFFFFF8;
    if (*(_QWORD *)v26 < 0xFFFFFFFFuLL)
    {
      *(_OWORD *)v25 = *(_OWORD *)v26;
    }
    else
    {
      v27 = *(_QWORD *)(v26 + 8);
      *(_QWORD *)v25 = *(_QWORD *)v26;
      *(_QWORD *)(v25 + 8) = v27;
    }
    v28 = 1;
  }
  else
  {
    if (v24)
    {
      memcpy(v14, v23, __n);
    }
    else
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 32))(v14, v23, v5);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v14, 0, 1, v5);
    }
    v25 = ((unint64_t)v14 + v9) & 0xFFFFFFFFFFFFFFF8;
    v26 = ((unint64_t)v23 + v9) & 0xFFFFFFFFFFFFFFF8;
    v28 = 0;
    if (*(_QWORD *)v26 < 0xFFFFFFFFuLL)
    {
      *(_OWORD *)v25 = *(_OWORD *)v26;
    }
    else
    {
      v29 = *(_QWORD *)(v26 + 8);
      *(_QWORD *)v25 = *(_QWORD *)v26;
      *(_QWORD *)(v25 + 8) = v29;
    }
  }
  v30 = (_QWORD *)((v26 + 23) & 0xFFFFFFFFFFFFFFF8);
  v31 = (_QWORD *)((v25 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v31 = *v30;
  v32 = ((unint64_t)v31 + 15) & 0xFFFFFFFFFFFFFFF8;
  v33 = ((unint64_t)v30 + 15) & 0xFFFFFFFFFFFFFFF8;
  v34 = *(_QWORD *)v33;
  *(_BYTE *)(v32 + 8) = *(_BYTE *)(v33 + 8);
  *(_QWORD *)v32 = v34;
  v35 = (_OWORD *)(((unint64_t)v31 + 31) & 0xFFFFFFFFFFFFFFF8);
  v36 = (_OWORD *)(((unint64_t)v30 + 31) & 0xFFFFFFFFFFFFFFF8);
  v37 = v36[1];
  *v35 = *v36;
  v35[1] = v37;
  *((_BYTE *)a1 + v40) = v28;
  return a1;
}

uint64_t sub_21420B44C(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v7;
  unsigned int v8;
  int v9;
  int v11;
  int v12;
  unsigned int v13;

  v3 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_DWORD *)(v3 + 84))
    v4 = *(_QWORD *)(v3 + 64);
  else
    v4 = *(_QWORD *)(v3 + 64) + 1;
  if (!a2)
    return 0;
  v5 = (((((v4 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)) + 7) & 0xFFFFFFFFFFFFFFF8)
        + 23) & 0xFFFFFFFFFFFFFFF8)
      + 31) & 0xFFFFFFFFFFFFFFF8;
  if (a2 < 0xFF)
    goto LABEL_21;
  v6 = v5 + 33;
  v7 = 8 * (v5 + 33);
  if ((v5 + 33) <= 3)
  {
    v8 = (a2 + 1) >> v7;
    if (v8 > 0xFFFE)
    {
      v9 = *(_DWORD *)&a1[v6];
      if (!v9)
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v8 > 0xFE)
    {
      v9 = *(unsigned __int16 *)&a1[v6];
      if (!*(_WORD *)&a1[v6])
        goto LABEL_21;
      goto LABEL_14;
    }
    if (!v8)
      goto LABEL_21;
  }
  v9 = a1[v6];
  if (!a1[v6])
  {
LABEL_21:
    v13 = a1[v5 + 32];
    if (v13 >= 2)
      return (v13 ^ 0xFF) + 1;
    else
      return 0;
  }
LABEL_14:
  v11 = (v9 - 1) << v7;
  if (v6 >= 4)
    v11 = 0;
  if ((_DWORD)v6 == 1)
    v12 = *a1;
  else
    v12 = *(_DWORD *)a1;
  return (v12 | v11) + 255;
}

void sub_21420B534(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  size_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = *(_DWORD *)(v5 + 84);
  v8 = *(_QWORD *)(v5 + 64);
  if (!v7)
    ++v8;
  v9 = (((((v8 + v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8;
  v10 = v9 + 33;
  if (a3 < 0xFF)
  {
    v11 = 0;
  }
  else if (v10 <= 3)
  {
    v13 = (a3 + 1) >> (8 * v10);
    if (v13 > 0xFFFE)
    {
      v11 = 4u;
    }
    else if (v13 >= 0xFF)
    {
      v11 = 2;
    }
    else
    {
      v11 = v13 != 0;
    }
  }
  else
  {
    v11 = 1u;
  }
  if (a2 <= 0xFE)
    __asm { BR              X11 }
  v12 = a2 - 255;
  if (v10 < 4)
  {
    bzero(a1, v10);
    if ((_DWORD)v10 == 1)
    {
      *a1 = v12;
      goto LABEL_20;
    }
    v12 = v12;
  }
  else
  {
    bzero(a1, v9 + 33);
  }
  *(_DWORD *)a1 = v12;
LABEL_20:
  __asm { BR              X10 }
}

uint64_t sub_21420B6D0(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_DWORD *)(v2 + 84);
  v5 = *(_QWORD *)(v2 + 64);
  if (!v4)
    ++v5;
  v6 = ((((((v5 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 32;
  v7 = *((unsigned __int8 *)a1 + v6);
  v8 = v6 & 0xFFFFFFF8;
  if (v7 >= 2 && v8 != 0)
    return (*a1 + 2);
  return v7;
}

void sub_21420B738(_BYTE *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  size_t v8;
  char v9;
  unsigned int v10;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_DWORD *)(v4 + 84);
  v7 = *(_QWORD *)(v4 + 64);
  if (!v6)
    ++v7;
  v8 = ((((((v7 + v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 32;
  if (a2 > 1)
  {
    if ((v8 & 0xFFFFFFF8) != 0)
      v9 = 2;
    else
      v9 = a2;
    if ((v8 & 0xFFFFFFF8) != 0)
      v10 = a2 - 2;
    else
      v10 = 0;
    a1[v8] = v9;
    bzero(a1, v8);
    *(_DWORD *)a1 = v10;
  }
  else
  {
    a1[v8] = a2;
  }
}

uint64_t type metadata accessor for AnyConcreteScale(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2141D8E88(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AnyConcreteScale);
}

uint64_t sub_21420B7DC(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19)
{
  uint64_t v22;
  uint64_t v23;
  char v24;

  sub_2141DD130(a2, a3, a4 & 1);
  swift_bridgeObjectRetain();
  if (a19 < 0)
  {
    sub_2141DD140(a6, a7, a8);
    sub_2141DD130(a11, a12, a13 & 1);
    swift_bridgeObjectRetain();
    v22 = a15;
    v23 = a16;
    v24 = a17;
  }
  else
  {
    v22 = a6;
    v23 = a7;
    v24 = a8;
  }
  return sub_2141DD140(v22, v23, v24);
}

uint64_t destroy for ChartContentRenderContext.AccessibilityGroup(uint64_t a1)
{
  return sub_2141EF5D4(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_OWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_OWORD *)(a1 + 144), *(_QWORD *)(a1 + 152), *(_QWORD *)(a1 + 160));
}

uint64_t initializeWithCopy for ChartContentRenderContext.AccessibilityGroup(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 32);
  v6 = *(_QWORD *)(a2 + 40);
  v7 = *(_QWORD *)(a2 + 48);
  v8 = *(_QWORD *)(a2 + 56);
  v9 = *(_QWORD *)(a2 + 64);
  v10 = *(_QWORD *)(a2 + 72);
  v11 = *(_QWORD *)(a2 + 80);
  v13 = *(_QWORD *)(a2 + 88);
  v14 = *(_QWORD *)(a2 + 96);
  v15 = *(_QWORD *)(a2 + 104);
  v16 = *(_QWORD *)(a2 + 112);
  v17 = *(_QWORD *)(a2 + 120);
  v18 = *(_QWORD *)(a2 + 128);
  v19 = *(_QWORD *)(a2 + 136);
  v20 = *(_QWORD *)(a2 + 144);
  v21 = *(_QWORD *)(a2 + 152);
  v22 = *(_QWORD *)(a2 + 160);
  sub_21420B7DC(v3, v4, v5, v6, v7, v8, v9, v10, v11, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22);
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 48) = v7;
  *(_QWORD *)(a1 + 56) = v8;
  *(_QWORD *)(a1 + 64) = v9;
  *(_QWORD *)(a1 + 72) = v10;
  *(_QWORD *)(a1 + 80) = v11;
  *(_QWORD *)(a1 + 88) = v13;
  *(_QWORD *)(a1 + 96) = v14;
  *(_QWORD *)(a1 + 104) = v15;
  *(_QWORD *)(a1 + 112) = v16;
  *(_QWORD *)(a1 + 120) = v17;
  *(_QWORD *)(a1 + 128) = v18;
  *(_QWORD *)(a1 + 136) = v19;
  *(_QWORD *)(a1 + 144) = v20;
  *(_QWORD *)(a1 + 152) = v21;
  *(_QWORD *)(a1 + 160) = v22;
  return a1;
}

uint64_t assignWithCopy for ChartContentRenderContext.AccessibilityGroup(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = a2[1];
  v3 = a2[2];
  v4 = a2[3];
  v5 = a2[4];
  v6 = a2[5];
  v7 = a2[6];
  v8 = a2[7];
  v9 = a2[8];
  v10 = a2[9];
  v11 = a2[10];
  v27 = a2[11];
  v28 = a2[12];
  v29 = a2[13];
  v30 = a2[14];
  v31 = a2[15];
  v32 = a2[16];
  v33 = a2[17];
  v34 = a2[18];
  v35 = a2[19];
  v36 = a2[20];
  sub_21420B7DC(v3, v4, v5, v6, v7, v8, v9, v10, v11, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36);
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(_QWORD *)(a1 + 24);
  v14 = *(_QWORD *)(a1 + 32);
  v15 = *(_QWORD *)(a1 + 40);
  v16 = *(_QWORD *)(a1 + 48);
  v17 = *(_QWORD *)(a1 + 56);
  v18 = *(_QWORD *)(a1 + 64);
  v19 = *(_QWORD *)(a1 + 72);
  v20 = *(_OWORD *)(a1 + 80);
  v21 = *(_OWORD *)(a1 + 96);
  v22 = *(_OWORD *)(a1 + 112);
  v23 = *(_OWORD *)(a1 + 128);
  v24 = *(_OWORD *)(a1 + 144);
  v25 = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 48) = v7;
  *(_QWORD *)(a1 + 56) = v8;
  *(_QWORD *)(a1 + 64) = v9;
  *(_QWORD *)(a1 + 72) = v10;
  *(_QWORD *)(a1 + 80) = v11;
  *(_QWORD *)(a1 + 88) = v27;
  *(_QWORD *)(a1 + 96) = v28;
  *(_QWORD *)(a1 + 104) = v29;
  *(_QWORD *)(a1 + 112) = v30;
  *(_QWORD *)(a1 + 120) = v31;
  *(_QWORD *)(a1 + 128) = v32;
  *(_QWORD *)(a1 + 136) = v33;
  *(_QWORD *)(a1 + 144) = v34;
  *(_QWORD *)(a1 + 152) = v35;
  *(_QWORD *)(a1 + 160) = v36;
  sub_2141EF5D4(v12, v13, v14, v15, v16, v17, v18, v19, v20, *((uint64_t *)&v20 + 1), v21, *((uint64_t *)&v21 + 1), v22, *((uint64_t *)&v22 + 1), v23, *((uint64_t *)&v23 + 1), v24, *((uint64_t *)&v24 + 1), v25);
  return a1;
}

__n128 initializeWithTake for ChartContentRenderContext.AccessibilityGroup(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __n128 result;
  __int128 v8;
  __int128 v9;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  v4 = a2[3];
  v5 = a2[4];
  v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  result = (__n128)a2[7];
  v8 = a2[8];
  v9 = a2[9];
  *(_QWORD *)(a1 + 160) = *((_QWORD *)a2 + 20);
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 144) = v9;
  *(__n128 *)(a1 + 112) = result;
  return result;
}

uint64_t assignWithTake for ChartContentRenderContext.AccessibilityGroup(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;

  v3 = *(_QWORD *)(a2 + 160);
  v4 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 40);
  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(_QWORD *)(a1 + 64);
  v11 = *(_QWORD *)(a1 + 72);
  v12 = *(_OWORD *)(a1 + 80);
  v13 = *(_OWORD *)(a1 + 96);
  v14 = *(_OWORD *)(a1 + 112);
  v15 = *(_OWORD *)(a1 + 128);
  v16 = *(_OWORD *)(a1 + 144);
  v17 = *(_QWORD *)(a1 + 160);
  v18 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v18;
  v19 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v19;
  v20 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v20;
  v21 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v21;
  v22 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v22;
  *(_QWORD *)(a1 + 160) = v3;
  sub_2141EF5D4(v4, v6, v5, v7, v8, v9, v10, v11, v12, *((uint64_t *)&v12 + 1), v13, *((uint64_t *)&v13 + 1), v14, *((uint64_t *)&v14 + 1), v15, *((uint64_t *)&v15 + 1), v16, *((uint64_t *)&v16 + 1), v17);
  return a1;
}

uint64_t getEnumTagSinglePayload for ChartContentRenderContext.AccessibilityGroup(uint64_t a1, int a2)
{
  uint64_t v2;
  int v3;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 168))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16) >> 3;
  if (v2 > 0x80000000)
    v3 = ~(_DWORD)v2;
  else
    v3 = -1;
  return (v3 + 1);
}

double storeEnumTagSinglePayload for ChartContentRenderContext.AccessibilityGroup(uint64_t a1, int a2, int a3)
{
  double result;

  if (a2 < 0)
  {
    result = 0.0;
    *(_OWORD *)(a1 + 136) = 0u;
    *(_OWORD *)(a1 + 152) = 0u;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_QWORD *)a1 = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(a1 + 168) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(a1 + 16) = 8 * -a2;
      result = 0.0;
      *(_OWORD *)(a1 + 24) = 0u;
      *(_OWORD *)(a1 + 40) = 0u;
      *(_OWORD *)(a1 + 56) = 0u;
      *(_OWORD *)(a1 + 72) = 0u;
      *(_OWORD *)(a1 + 88) = 0u;
      *(_OWORD *)(a1 + 104) = 0u;
      *(_OWORD *)(a1 + 120) = 0u;
      *(_OWORD *)(a1 + 136) = 0u;
      *(_OWORD *)(a1 + 152) = 0u;
      return result;
    }
    *(_BYTE *)(a1 + 168) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ChartContentRenderContext.AccessibilityGroup()
{
  return &type metadata for ChartContentRenderContext.AccessibilityGroup;
}

uint64_t sub_21420BD60(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4;
  int v5;
  int v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  void *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char v94;
  __int128 v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char v101;
  __int128 v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  __int128 v111;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *(_QWORD *)v4 = *a2;
    v4 = v9 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    v7 = *((unsigned __int8 *)a2 + 40);
    if (v7 == 255)
    {
      v8 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v8;
      *(_OWORD *)(a1 + 25) = *(_OWORD *)((char *)a2 + 25);
    }
    else if ((v7 & 1) != 0)
    {
      v10 = *(_OWORD *)(a2 + 3);
      *(_OWORD *)(a1 + 24) = v10;
      (**(void (***)(uint64_t, uint64_t *))(v10 - 8))(a1, a2);
      *(_BYTE *)(v4 + 40) = 1;
    }
    else
    {
      *(_QWORD *)a1 = *a2;
      *(_BYTE *)(a1 + 40) = 0;
      swift_retain();
    }
    *(_BYTE *)(v4 + 41) = *((_BYTE *)a2 + 41);
    *(_QWORD *)(v4 + 48) = a2[6];
    *(_QWORD *)(v4 + 56) = a2[7];
    v11 = a2[9];
    *(_QWORD *)(v4 + 64) = a2[8];
    *(_QWORD *)(v4 + 72) = v11;
    *(_QWORD *)(v4 + 80) = a2[10];
    v12 = *((unsigned __int8 *)a2 + 128);
    swift_bridgeObjectRetain();
    if (v12 == 255)
    {
      v13 = *(_OWORD *)(a2 + 13);
      *(_OWORD *)(v4 + 88) = *(_OWORD *)(a2 + 11);
      *(_OWORD *)(v4 + 104) = v13;
      *(_OWORD *)(v4 + 113) = *(_OWORD *)((char *)a2 + 113);
    }
    else if ((v12 & 1) != 0)
    {
      *(_QWORD *)(v4 + 88) = a2[11];
      *(_OWORD *)(v4 + 96) = *((_OWORD *)a2 + 6);
      *(_BYTE *)(v4 + 128) = 1;
      swift_retain();
    }
    else
    {
      v14 = *((_OWORD *)a2 + 7);
      *(_OWORD *)(v4 + 112) = v14;
      (**(void (***)(uint64_t, uint64_t))(v14 - 8))(v4 + 88, (uint64_t)(a2 + 11));
      *(_BYTE *)(v4 + 128) = 0;
    }
    *(_OWORD *)(v4 + 136) = *(_OWORD *)(a2 + 17);
    *(_BYTE *)(v4 + 152) = *((_BYTE *)a2 + 152);
    *(_QWORD *)(v4 + 160) = a2[20];
    *(_BYTE *)(v4 + 168) = *((_BYTE *)a2 + 168);
    v15 = *((_OWORD *)a2 + 11);
    v16 = *((_OWORD *)a2 + 12);
    *(_BYTE *)(v4 + 208) = *((_BYTE *)a2 + 208);
    v17 = a3[11];
    v18 = (void *)(v4 + v17);
    v19 = (char *)a2 + v17;
    *(_OWORD *)(v4 + 176) = v15;
    *(_OWORD *)(v4 + 192) = v16;
    v20 = sub_214424308();
    v21 = *(_QWORD *)(v20 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
    {
      v22 = sub_2141D8BF8(&qword_253F134C8);
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v21 + 16))(v18, v19, v20);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
    }
    v23 = a3[12];
    v24 = a3[13];
    v25 = v4 + v23;
    v26 = (uint64_t)a2 + v23;
    *(_QWORD *)v25 = *(_QWORD *)v26;
    v27 = *(uint64_t *)((char *)a2 + v24);
    *(_BYTE *)(v25 + 8) = *(_BYTE *)(v26 + 8);
    *(_QWORD *)(v4 + v24) = v27;
    v28 = a3[14];
    v29 = (void *)(v4 + v28);
    v30 = (char *)a2 + v28;
    v31 = sub_214424C68();
    v32 = *(_QWORD *)(v31 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31))
    {
      v33 = sub_2141D8BF8(&qword_253F15C88);
      memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v32 + 16))(v29, v30, v31);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
    }
    v34 = a3[15];
    v35 = a3[16];
    v36 = v4 + v34;
    v37 = (uint64_t)a2 + v34;
    *(_QWORD *)v36 = *(_QWORD *)v37;
    *(_WORD *)(v36 + 8) = *(_WORD *)(v37 + 8);
    *(_QWORD *)(v4 + v35) = *(uint64_t *)((char *)a2 + v35);
    v38 = a3[18];
    *(_QWORD *)(v4 + a3[17]) = *(uint64_t *)((char *)a2 + a3[17]);
    v39 = v4 + v38;
    v40 = (uint64_t)a2 + v38;
    v41 = *(uint64_t *)((char *)a2 + v38 + 24);
    swift_retain();
    if (v41)
    {
      v42 = *(_QWORD *)v40;
      v43 = *(_QWORD *)(v40 + 8);
      v44 = *(_BYTE *)(v40 + 16);
      sub_2141DD130(*(_QWORD *)v40, v43, v44);
      *(_QWORD *)v39 = v42;
      *(_QWORD *)(v39 + 8) = v43;
      *(_BYTE *)(v39 + 16) = v44;
      v45 = *(_QWORD *)(v40 + 32);
      *(_QWORD *)(v39 + 24) = *(_QWORD *)(v40 + 24);
      v46 = *(_QWORD *)(v40 + 40);
      v47 = *(_BYTE *)(v40 + 48);
      swift_bridgeObjectRetain();
      sub_2141DD140(v45, v46, v47);
      *(_QWORD *)(v39 + 32) = v45;
      *(_QWORD *)(v39 + 40) = v46;
      *(_BYTE *)(v39 + 48) = v47;
      *(_OWORD *)(v39 + 56) = *(_OWORD *)(v40 + 56);
    }
    else
    {
      v48 = *(_OWORD *)(v40 + 48);
      *(_OWORD *)(v39 + 32) = *(_OWORD *)(v40 + 32);
      *(_OWORD *)(v39 + 48) = v48;
      *(_QWORD *)(v39 + 64) = *(_QWORD *)(v40 + 64);
      v49 = *(_OWORD *)(v40 + 16);
      *(_OWORD *)v39 = *(_OWORD *)v40;
      *(_OWORD *)(v39 + 16) = v49;
    }
    v50 = a3[19];
    v51 = v4 + v50;
    v52 = (uint64_t)a2 + v50;
    if (*(uint64_t *)((char *)a2 + v50 + 24))
    {
      v53 = *(_QWORD *)v52;
      v54 = *(_QWORD *)(v52 + 8);
      v55 = *(_BYTE *)(v52 + 16);
      sub_2141DD130(*(_QWORD *)v52, v54, v55);
      *(_QWORD *)v51 = v53;
      *(_QWORD *)(v51 + 8) = v54;
      *(_BYTE *)(v51 + 16) = v55;
      v56 = *(_QWORD *)(v52 + 32);
      *(_QWORD *)(v51 + 24) = *(_QWORD *)(v52 + 24);
      v57 = *(_QWORD *)(v52 + 40);
      v58 = *(_BYTE *)(v52 + 48);
      swift_bridgeObjectRetain();
      sub_2141DD140(v56, v57, v58);
      *(_QWORD *)(v51 + 32) = v56;
      *(_QWORD *)(v51 + 40) = v57;
      *(_BYTE *)(v51 + 48) = v58;
      *(_OWORD *)(v51 + 56) = *(_OWORD *)(v52 + 56);
    }
    else
    {
      v59 = *(_OWORD *)(v52 + 48);
      *(_OWORD *)(v51 + 32) = *(_OWORD *)(v52 + 32);
      *(_OWORD *)(v51 + 48) = v59;
      *(_QWORD *)(v51 + 64) = *(_QWORD *)(v52 + 64);
      v60 = *(_OWORD *)(v52 + 16);
      *(_OWORD *)v51 = *(_OWORD *)v52;
      *(_OWORD *)(v51 + 16) = v60;
    }
    v61 = a3[20];
    v62 = v4 + v61;
    v63 = (uint64_t)a2 + v61;
    if (*(uint64_t *)((char *)a2 + v61 + 24))
    {
      v64 = *(_QWORD *)v63;
      v65 = *(_QWORD *)(v63 + 8);
      v66 = *(_BYTE *)(v63 + 16);
      sub_2141DD130(*(_QWORD *)v63, v65, v66);
      *(_QWORD *)v62 = v64;
      *(_QWORD *)(v62 + 8) = v65;
      *(_BYTE *)(v62 + 16) = v66;
      v67 = *(_QWORD *)(v63 + 32);
      *(_QWORD *)(v62 + 24) = *(_QWORD *)(v63 + 24);
      v68 = *(_QWORD *)(v63 + 40);
      v69 = *(_BYTE *)(v63 + 48);
      swift_bridgeObjectRetain();
      sub_2141DD140(v67, v68, v69);
      *(_QWORD *)(v62 + 32) = v67;
      *(_QWORD *)(v62 + 40) = v68;
      *(_BYTE *)(v62 + 48) = v69;
      *(_OWORD *)(v62 + 56) = *(_OWORD *)(v63 + 56);
    }
    else
    {
      v70 = *(_OWORD *)(v63 + 48);
      *(_OWORD *)(v62 + 32) = *(_OWORD *)(v63 + 32);
      *(_OWORD *)(v62 + 48) = v70;
      *(_QWORD *)(v62 + 64) = *(_QWORD *)(v63 + 64);
      v71 = *(_OWORD *)(v63 + 16);
      *(_OWORD *)v62 = *(_OWORD *)v63;
      *(_OWORD *)(v62 + 16) = v71;
    }
    v72 = a3[21];
    v73 = v4 + v72;
    v74 = (uint64_t)a2 + v72;
    if (*(uint64_t *)((char *)a2 + v72 + 24))
    {
      v75 = *(_QWORD *)v74;
      v76 = *(_QWORD *)(v74 + 8);
      v77 = *(_BYTE *)(v74 + 16);
      sub_2141DD130(*(_QWORD *)v74, v76, v77);
      *(_QWORD *)v73 = v75;
      *(_QWORD *)(v73 + 8) = v76;
      *(_BYTE *)(v73 + 16) = v77;
      v78 = *(_QWORD *)(v74 + 32);
      *(_QWORD *)(v73 + 24) = *(_QWORD *)(v74 + 24);
      v79 = *(_QWORD *)(v74 + 40);
      v80 = *(_BYTE *)(v74 + 48);
      swift_bridgeObjectRetain();
      sub_2141DD140(v78, v79, v80);
      *(_QWORD *)(v73 + 32) = v78;
      *(_QWORD *)(v73 + 40) = v79;
      *(_BYTE *)(v73 + 48) = v80;
      *(_OWORD *)(v73 + 56) = *(_OWORD *)(v74 + 56);
    }
    else
    {
      v81 = *(_OWORD *)(v74 + 48);
      *(_OWORD *)(v73 + 32) = *(_OWORD *)(v74 + 32);
      *(_OWORD *)(v73 + 48) = v81;
      *(_QWORD *)(v73 + 64) = *(_QWORD *)(v74 + 64);
      v82 = *(_OWORD *)(v74 + 16);
      *(_OWORD *)v73 = *(_OWORD *)v74;
      *(_OWORD *)(v73 + 16) = v82;
    }
    v83 = a3[22];
    v84 = a3[23];
    v85 = v4 + v83;
    v86 = (uint64_t)a2 + v83;
    *(_OWORD *)v85 = *(_OWORD *)v86;
    *(_QWORD *)(v85 + 16) = *(_QWORD *)(v86 + 16);
    v87 = v4 + v84;
    v88 = (uint64_t)a2 + v84;
    *(_OWORD *)v87 = *(_OWORD *)v88;
    *(_QWORD *)(v87 + 16) = *(_QWORD *)(v88 + 16);
    v89 = a3[24];
    v90 = v4 + v89;
    v91 = (uint64_t)a2 + v89;
    if (*(uint64_t *)((char *)a2 + v89 + 24))
    {
      v92 = *(_QWORD *)v91;
      v93 = *(_QWORD *)(v91 + 8);
      v94 = *(_BYTE *)(v91 + 16);
      sub_2141DD130(*(_QWORD *)v91, v93, v94);
      *(_QWORD *)v90 = v92;
      *(_QWORD *)(v90 + 8) = v93;
      *(_BYTE *)(v90 + 16) = v94;
      *(_QWORD *)(v90 + 24) = *(_QWORD *)(v91 + 24);
      swift_bridgeObjectRetain();
    }
    else
    {
      v95 = *(_OWORD *)(v91 + 16);
      *(_OWORD *)v90 = *(_OWORD *)v91;
      *(_OWORD *)(v90 + 16) = v95;
    }
    v96 = a3[25];
    v97 = v4 + v96;
    v98 = (uint64_t)a2 + v96;
    if (*(uint64_t *)((char *)a2 + v96 + 24))
    {
      v99 = *(_QWORD *)v98;
      v100 = *(_QWORD *)(v98 + 8);
      v101 = *(_BYTE *)(v98 + 16);
      sub_2141DD130(*(_QWORD *)v98, v100, v101);
      *(_QWORD *)v97 = v99;
      *(_QWORD *)(v97 + 8) = v100;
      *(_BYTE *)(v97 + 16) = v101;
      *(_QWORD *)(v97 + 24) = *(_QWORD *)(v98 + 24);
      swift_bridgeObjectRetain();
    }
    else
    {
      v102 = *(_OWORD *)(v98 + 16);
      *(_OWORD *)v97 = *(_OWORD *)v98;
      *(_OWORD *)(v97 + 16) = v102;
    }
    v103 = a3[26];
    v104 = a3[27];
    v105 = (_QWORD *)(v4 + v103);
    v106 = (uint64_t *)((char *)a2 + v103);
    v107 = v106[1];
    *v105 = *v106;
    v105[1] = v107;
    v108 = v4 + v104;
    v109 = (uint64_t)a2 + v104;
    v110 = *(_QWORD *)(v109 + 24);
    swift_bridgeObjectRetain();
    if (v110)
    {
      *(_QWORD *)(v108 + 24) = v110;
      (**(void (***)(uint64_t, uint64_t, uint64_t))(v110 - 8))(v108, v109, v110);
    }
    else
    {
      v111 = *(_OWORD *)(v109 + 16);
      *(_OWORD *)v108 = *(_OWORD *)v109;
      *(_OWORD *)(v108 + 16) = v111;
    }
  }
  return v4;
}

uint64_t sub_21420C380(uint64_t a1, int *a2)
{
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;

  v4 = *(unsigned __int8 *)(a1 + 40);
  if (v4 != 255)
  {
    if ((v4 & 1) != 0)
      _s6Charts15AnyChartContentVwxx_0(a1);
    else
      swift_release();
  }
  swift_bridgeObjectRelease();
  v5 = *(unsigned __int8 *)(a1 + 128);
  if (v5 != 255)
  {
    if ((v5 & 1) != 0)
      swift_release();
    else
      _s6Charts15AnyChartContentVwxx_0(a1 + 88);
  }
  v6 = a1 + a2[11];
  v7 = sub_214424308();
  v8 = *(_QWORD *)(v7 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  v9 = a1 + a2[14];
  v10 = sub_214424C68();
  v11 = *(_QWORD *)(v10 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
  swift_release();
  v12 = a1 + a2[18];
  if (*(_QWORD *)(v12 + 24))
  {
    sub_2141ED0BC(*(_QWORD *)v12, *(_QWORD *)(v12 + 8), *(_BYTE *)(v12 + 16));
    swift_bridgeObjectRelease();
    sub_2141EF1B0(*(_QWORD *)(v12 + 32), *(_QWORD *)(v12 + 40), *(_BYTE *)(v12 + 48));
  }
  v13 = a1 + a2[19];
  if (*(_QWORD *)(v13 + 24))
  {
    sub_2141ED0BC(*(_QWORD *)v13, *(_QWORD *)(v13 + 8), *(_BYTE *)(v13 + 16));
    swift_bridgeObjectRelease();
    sub_2141EF1B0(*(_QWORD *)(v13 + 32), *(_QWORD *)(v13 + 40), *(_BYTE *)(v13 + 48));
  }
  v14 = a1 + a2[20];
  if (*(_QWORD *)(v14 + 24))
  {
    sub_2141ED0BC(*(_QWORD *)v14, *(_QWORD *)(v14 + 8), *(_BYTE *)(v14 + 16));
    swift_bridgeObjectRelease();
    sub_2141EF1B0(*(_QWORD *)(v14 + 32), *(_QWORD *)(v14 + 40), *(_BYTE *)(v14 + 48));
  }
  v15 = a1 + a2[21];
  if (*(_QWORD *)(v15 + 24))
  {
    sub_2141ED0BC(*(_QWORD *)v15, *(_QWORD *)(v15 + 8), *(_BYTE *)(v15 + 16));
    swift_bridgeObjectRelease();
    sub_2141EF1B0(*(_QWORD *)(v15 + 32), *(_QWORD *)(v15 + 40), *(_BYTE *)(v15 + 48));
  }
  v16 = a1 + a2[24];
  if (*(_QWORD *)(v16 + 24))
  {
    sub_2141ED0BC(*(_QWORD *)v16, *(_QWORD *)(v16 + 8), *(_BYTE *)(v16 + 16));
    swift_bridgeObjectRelease();
  }
  v17 = a1 + a2[25];
  if (*(_QWORD *)(v17 + 24))
  {
    sub_2141ED0BC(*(_QWORD *)v17, *(_QWORD *)(v17 + 8), *(_BYTE *)(v17 + 16));
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  result = a1 + a2[27];
  if (*(_QWORD *)(result + 24))
    return _s6Charts15AnyChartContentVwxx_0(result);
  return result;
}

uint64_t sub_21420C5B8(uint64_t a1, uint64_t a2, int *a3)
{
  int v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  void *v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  const void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  __int128 v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char v99;
  __int128 v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  __int128 v109;

  v6 = *(unsigned __int8 *)(a2 + 40);
  if (v6 == 255)
  {
    v7 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v7;
    *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  }
  else if ((v6 & 1) != 0)
  {
    v8 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v8;
    (**(void (***)(uint64_t, uint64_t))(v8 - 8))(a1, a2);
    *(_BYTE *)(a1 + 40) = 1;
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_BYTE *)(a1 + 40) = 0;
    swift_retain();
  }
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v9 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v9;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v10 = *(unsigned __int8 *)(a2 + 128);
  swift_bridgeObjectRetain();
  if (v10 == 255)
  {
    v11 = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 104) = v11;
    *(_OWORD *)(a1 + 113) = *(_OWORD *)(a2 + 113);
  }
  else if ((v10 & 1) != 0)
  {
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_BYTE *)(a1 + 128) = 1;
    swift_retain();
  }
  else
  {
    v12 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 112) = v12;
    (**(void (***)(uint64_t, uint64_t))(v12 - 8))(a1 + 88, a2 + 88);
    *(_BYTE *)(a1 + 128) = 0;
  }
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  v13 = *(_OWORD *)(a2 + 176);
  v14 = *(_OWORD *)(a2 + 192);
  *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
  v15 = a3[11];
  v16 = (void *)(a1 + v15);
  v17 = (const void *)(a2 + v15);
  *(_OWORD *)(a1 + 176) = v13;
  *(_OWORD *)(a1 + 192) = v14;
  v18 = sub_214424308();
  v19 = *(_QWORD *)(v18 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
  {
    v20 = sub_2141D8BF8(&qword_253F134C8);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v19 + 16))(v16, v17, v18);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
  }
  v21 = a3[12];
  v22 = a3[13];
  v23 = a1 + v21;
  v24 = a2 + v21;
  *(_QWORD *)v23 = *(_QWORD *)v24;
  v25 = *(_QWORD *)(a2 + v22);
  *(_BYTE *)(v23 + 8) = *(_BYTE *)(v24 + 8);
  *(_QWORD *)(a1 + v22) = v25;
  v26 = a3[14];
  v27 = (void *)(a1 + v26);
  v28 = (const void *)(a2 + v26);
  v29 = sub_214424C68();
  v30 = *(_QWORD *)(v29 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
  {
    v31 = sub_2141D8BF8(&qword_253F15C88);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v30 + 16))(v27, v28, v29);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
  }
  v32 = a3[15];
  v33 = a3[16];
  v34 = a1 + v32;
  v35 = a2 + v32;
  *(_QWORD *)v34 = *(_QWORD *)v35;
  *(_WORD *)(v34 + 8) = *(_WORD *)(v35 + 8);
  *(_QWORD *)(a1 + v33) = *(_QWORD *)(a2 + v33);
  v36 = a3[18];
  *(_QWORD *)(a1 + a3[17]) = *(_QWORD *)(a2 + a3[17]);
  v37 = a1 + v36;
  v38 = a2 + v36;
  v39 = *(_QWORD *)(a2 + v36 + 24);
  swift_retain();
  if (v39)
  {
    v40 = *(_QWORD *)v38;
    v41 = *(_QWORD *)(v38 + 8);
    v42 = *(_BYTE *)(v38 + 16);
    sub_2141DD130(*(_QWORD *)v38, v41, v42);
    *(_QWORD *)v37 = v40;
    *(_QWORD *)(v37 + 8) = v41;
    *(_BYTE *)(v37 + 16) = v42;
    v43 = *(_QWORD *)(v38 + 32);
    *(_QWORD *)(v37 + 24) = *(_QWORD *)(v38 + 24);
    v44 = *(_QWORD *)(v38 + 40);
    v45 = *(_BYTE *)(v38 + 48);
    swift_bridgeObjectRetain();
    sub_2141DD140(v43, v44, v45);
    *(_QWORD *)(v37 + 32) = v43;
    *(_QWORD *)(v37 + 40) = v44;
    *(_BYTE *)(v37 + 48) = v45;
    *(_OWORD *)(v37 + 56) = *(_OWORD *)(v38 + 56);
  }
  else
  {
    v46 = *(_OWORD *)(v38 + 48);
    *(_OWORD *)(v37 + 32) = *(_OWORD *)(v38 + 32);
    *(_OWORD *)(v37 + 48) = v46;
    *(_QWORD *)(v37 + 64) = *(_QWORD *)(v38 + 64);
    v47 = *(_OWORD *)(v38 + 16);
    *(_OWORD *)v37 = *(_OWORD *)v38;
    *(_OWORD *)(v37 + 16) = v47;
  }
  v48 = a3[19];
  v49 = a1 + v48;
  v50 = a2 + v48;
  if (*(_QWORD *)(a2 + v48 + 24))
  {
    v51 = *(_QWORD *)v50;
    v52 = *(_QWORD *)(v50 + 8);
    v53 = *(_BYTE *)(v50 + 16);
    sub_2141DD130(*(_QWORD *)v50, v52, v53);
    *(_QWORD *)v49 = v51;
    *(_QWORD *)(v49 + 8) = v52;
    *(_BYTE *)(v49 + 16) = v53;
    v54 = *(_QWORD *)(v50 + 32);
    *(_QWORD *)(v49 + 24) = *(_QWORD *)(v50 + 24);
    v55 = *(_QWORD *)(v50 + 40);
    v56 = *(_BYTE *)(v50 + 48);
    swift_bridgeObjectRetain();
    sub_2141DD140(v54, v55, v56);
    *(_QWORD *)(v49 + 32) = v54;
    *(_QWORD *)(v49 + 40) = v55;
    *(_BYTE *)(v49 + 48) = v56;
    *(_OWORD *)(v49 + 56) = *(_OWORD *)(v50 + 56);
  }
  else
  {
    v57 = *(_OWORD *)(v50 + 48);
    *(_OWORD *)(v49 + 32) = *(_OWORD *)(v50 + 32);
    *(_OWORD *)(v49 + 48) = v57;
    *(_QWORD *)(v49 + 64) = *(_QWORD *)(v50 + 64);
    v58 = *(_OWORD *)(v50 + 16);
    *(_OWORD *)v49 = *(_OWORD *)v50;
    *(_OWORD *)(v49 + 16) = v58;
  }
  v59 = a3[20];
  v60 = a1 + v59;
  v61 = a2 + v59;
  if (*(_QWORD *)(a2 + v59 + 24))
  {
    v62 = *(_QWORD *)v61;
    v63 = *(_QWORD *)(v61 + 8);
    v64 = *(_BYTE *)(v61 + 16);
    sub_2141DD130(*(_QWORD *)v61, v63, v64);
    *(_QWORD *)v60 = v62;
    *(_QWORD *)(v60 + 8) = v63;
    *(_BYTE *)(v60 + 16) = v64;
    v65 = *(_QWORD *)(v61 + 32);
    *(_QWORD *)(v60 + 24) = *(_QWORD *)(v61 + 24);
    v66 = *(_QWORD *)(v61 + 40);
    v67 = *(_BYTE *)(v61 + 48);
    swift_bridgeObjectRetain();
    sub_2141DD140(v65, v66, v67);
    *(_QWORD *)(v60 + 32) = v65;
    *(_QWORD *)(v60 + 40) = v66;
    *(_BYTE *)(v60 + 48) = v67;
    *(_OWORD *)(v60 + 56) = *(_OWORD *)(v61 + 56);
  }
  else
  {
    v68 = *(_OWORD *)(v61 + 48);
    *(_OWORD *)(v60 + 32) = *(_OWORD *)(v61 + 32);
    *(_OWORD *)(v60 + 48) = v68;
    *(_QWORD *)(v60 + 64) = *(_QWORD *)(v61 + 64);
    v69 = *(_OWORD *)(v61 + 16);
    *(_OWORD *)v60 = *(_OWORD *)v61;
    *(_OWORD *)(v60 + 16) = v69;
  }
  v70 = a3[21];
  v71 = a1 + v70;
  v72 = a2 + v70;
  if (*(_QWORD *)(a2 + v70 + 24))
  {
    v73 = *(_QWORD *)v72;
    v74 = *(_QWORD *)(v72 + 8);
    v75 = *(_BYTE *)(v72 + 16);
    sub_2141DD130(*(_QWORD *)v72, v74, v75);
    *(_QWORD *)v71 = v73;
    *(_QWORD *)(v71 + 8) = v74;
    *(_BYTE *)(v71 + 16) = v75;
    v76 = *(_QWORD *)(v72 + 32);
    *(_QWORD *)(v71 + 24) = *(_QWORD *)(v72 + 24);
    v77 = *(_QWORD *)(v72 + 40);
    v78 = *(_BYTE *)(v72 + 48);
    swift_bridgeObjectRetain();
    sub_2141DD140(v76, v77, v78);
    *(_QWORD *)(v71 + 32) = v76;
    *(_QWORD *)(v71 + 40) = v77;
    *(_BYTE *)(v71 + 48) = v78;
    *(_OWORD *)(v71 + 56) = *(_OWORD *)(v72 + 56);
  }
  else
  {
    v79 = *(_OWORD *)(v72 + 48);
    *(_OWORD *)(v71 + 32) = *(_OWORD *)(v72 + 32);
    *(_OWORD *)(v71 + 48) = v79;
    *(_QWORD *)(v71 + 64) = *(_QWORD *)(v72 + 64);
    v80 = *(_OWORD *)(v72 + 16);
    *(_OWORD *)v71 = *(_OWORD *)v72;
    *(_OWORD *)(v71 + 16) = v80;
  }
  v81 = a3[22];
  v82 = a3[23];
  v83 = a1 + v81;
  v84 = a2 + v81;
  *(_OWORD *)v83 = *(_OWORD *)v84;
  *(_QWORD *)(v83 + 16) = *(_QWORD *)(v84 + 16);
  v85 = a1 + v82;
  v86 = a2 + v82;
  *(_OWORD *)v85 = *(_OWORD *)v86;
  *(_QWORD *)(v85 + 16) = *(_QWORD *)(v86 + 16);
  v87 = a3[24];
  v88 = a1 + v87;
  v89 = a2 + v87;
  if (*(_QWORD *)(a2 + v87 + 24))
  {
    v90 = *(_QWORD *)v89;
    v91 = *(_QWORD *)(v89 + 8);
    v92 = *(_BYTE *)(v89 + 16);
    sub_2141DD130(*(_QWORD *)v89, v91, v92);
    *(_QWORD *)v88 = v90;
    *(_QWORD *)(v88 + 8) = v91;
    *(_BYTE *)(v88 + 16) = v92;
    *(_QWORD *)(v88 + 24) = *(_QWORD *)(v89 + 24);
    swift_bridgeObjectRetain();
  }
  else
  {
    v93 = *(_OWORD *)(v89 + 16);
    *(_OWORD *)v88 = *(_OWORD *)v89;
    *(_OWORD *)(v88 + 16) = v93;
  }
  v94 = a3[25];
  v95 = a1 + v94;
  v96 = a2 + v94;
  if (*(_QWORD *)(a2 + v94 + 24))
  {
    v97 = *(_QWORD *)v96;
    v98 = *(_QWORD *)(v96 + 8);
    v99 = *(_BYTE *)(v96 + 16);
    sub_2141DD130(*(_QWORD *)v96, v98, v99);
    *(_QWORD *)v95 = v97;
    *(_QWORD *)(v95 + 8) = v98;
    *(_BYTE *)(v95 + 16) = v99;
    *(_QWORD *)(v95 + 24) = *(_QWORD *)(v96 + 24);
    swift_bridgeObjectRetain();
  }
  else
  {
    v100 = *(_OWORD *)(v96 + 16);
    *(_OWORD *)v95 = *(_OWORD *)v96;
    *(_OWORD *)(v95 + 16) = v100;
  }
  v101 = a3[26];
  v102 = a3[27];
  v103 = (_QWORD *)(a1 + v101);
  v104 = (_QWORD *)(a2 + v101);
  v105 = v104[1];
  *v103 = *v104;
  v103[1] = v105;
  v106 = a1 + v102;
  v107 = a2 + v102;
  v108 = *(_QWORD *)(v107 + 24);
  swift_bridgeObjectRetain();
  if (v108)
  {
    *(_QWORD *)(v106 + 24) = v108;
    (**(void (***)(uint64_t, uint64_t, uint64_t))(v108 - 8))(v106, v107, v108);
  }
  else
  {
    v109 = *(_OWORD *)(v107 + 16);
    *(_OWORD *)v106 = *(_OWORD *)v107;
    *(_OWORD *)(v106 + 16) = v109;
  }
  return a1;
}

uint64_t sub_21420CBAC(uint64_t a1, __int128 *a2, int *a3)
{
  int v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  __int128 *v12;
  __int128 *v13;
  int v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  void *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(void *, uint64_t, uint64_t);
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t (*v42)(void *, uint64_t, uint64_t);
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  uint64_t v92;
  uint64_t v93;
  char v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  uint64_t v98;
  uint64_t v99;
  char v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char v114;
  uint64_t v115;
  uint64_t v116;
  char v117;
  uint64_t v118;
  uint64_t v119;
  char v120;
  uint64_t v121;
  uint64_t v122;
  char v123;
  uint64_t v124;
  uint64_t v125;
  char v126;
  uint64_t v127;
  uint64_t v128;
  char v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char v143;
  uint64_t v144;
  uint64_t v145;
  char v146;
  uint64_t v147;
  uint64_t v148;
  char v149;
  uint64_t v150;
  uint64_t v151;
  char v152;
  uint64_t v153;
  uint64_t v154;
  char v155;
  uint64_t v156;
  uint64_t v157;
  char v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  uint64_t v165;
  _QWORD *v166;
  _QWORD *v167;
  uint64_t v168;
  _QWORD *v169;
  _QWORD *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  char v178;
  uint64_t v179;
  uint64_t v180;
  char v181;
  uint64_t v182;
  uint64_t v183;
  char v184;
  __int128 v185;
  __int128 v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  char v194;
  uint64_t v195;
  uint64_t v196;
  char v197;
  uint64_t v198;
  uint64_t v199;
  char v200;
  __int128 v201;
  __int128 v202;
  uint64_t v203;
  _QWORD *v204;
  _QWORD *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  __int128 v210;
  __int128 v211;

  v6 = *((unsigned __int8 *)a2 + 40);
  if (*(unsigned __int8 *)(a1 + 40) == 255)
  {
    if (v6 == 255)
    {
      v9 = *a2;
      v10 = a2[1];
      *(_OWORD *)(a1 + 25) = *(__int128 *)((char *)a2 + 25);
      *(_OWORD *)a1 = v9;
      *(_OWORD *)(a1 + 16) = v10;
      goto LABEL_11;
    }
    if ((v6 & 1) != 0)
      goto LABEL_8;
LABEL_10:
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_BYTE *)(a1 + 40) = 0;
    swift_retain();
    goto LABEL_11;
  }
  if (v6 == 255)
  {
    sub_21420D6FC(a1);
    v7 = *(__int128 *)((char *)a2 + 25);
    v8 = a2[1];
    *(_OWORD *)a1 = *a2;
    *(_OWORD *)(a1 + 16) = v8;
    *(_OWORD *)(a1 + 25) = v7;
    goto LABEL_11;
  }
  if ((__int128 *)a1 != a2)
  {
    sub_21420D6FC(a1);
    if ((*((_BYTE *)a2 + 40) & 1) != 0)
    {
LABEL_8:
      v11 = *((_QWORD *)a2 + 3);
      *(_QWORD *)(a1 + 24) = v11;
      *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
      (**(void (***)(uint64_t, __int128 *))(v11 - 8))(a1, a2);
      *(_BYTE *)(a1 + 40) = 1;
      goto LABEL_11;
    }
    goto LABEL_10;
  }
LABEL_11:
  *(_BYTE *)(a1 + 41) = *((_BYTE *)a2 + 41);
  *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 6);
  *(_DWORD *)(a1 + 56) = *((_DWORD *)a2 + 14);
  *(_DWORD *)(a1 + 60) = *((_DWORD *)a2 + 15);
  *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
  *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 9);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 80) = *((_QWORD *)a2 + 10);
  v12 = (__int128 *)(a1 + 88);
  v13 = (__int128 *)((char *)a2 + 88);
  v14 = *((unsigned __int8 *)a2 + 128);
  if (*(unsigned __int8 *)(a1 + 128) == 255)
  {
    if (v14 == 255)
    {
      v17 = *v13;
      v18 = *(__int128 *)((char *)a2 + 104);
      *(_OWORD *)(a1 + 113) = *(__int128 *)((char *)a2 + 113);
      *v12 = v17;
      *(_OWORD *)(a1 + 104) = v18;
      goto LABEL_21;
    }
    if ((v14 & 1) != 0)
      goto LABEL_18;
LABEL_20:
    v19 = *((_QWORD *)a2 + 14);
    *(_QWORD *)(a1 + 112) = v19;
    *(_QWORD *)(a1 + 120) = *((_QWORD *)a2 + 15);
    (**(void (***)(uint64_t, uint64_t))(v19 - 8))(a1 + 88, (uint64_t)a2 + 88);
    *(_BYTE *)(a1 + 128) = 0;
    goto LABEL_21;
  }
  if (v14 == 255)
  {
    sub_21420D730(a1 + 88);
    v15 = *(__int128 *)((char *)a2 + 113);
    v16 = *(__int128 *)((char *)a2 + 104);
    *v12 = *v13;
    *(_OWORD *)(a1 + 104) = v16;
    *(_OWORD *)(a1 + 113) = v15;
    goto LABEL_21;
  }
  if ((__int128 *)a1 != a2)
  {
    sub_21420D730(a1 + 88);
    if ((a2[8] & 1) != 0)
    {
LABEL_18:
      *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
      *(_OWORD *)(a1 + 96) = a2[6];
      *(_BYTE *)(a1 + 128) = 1;
      swift_retain();
      goto LABEL_21;
    }
    goto LABEL_20;
  }
LABEL_21:
  v20 = *(__int128 *)((char *)a2 + 136);
  *(_BYTE *)(a1 + 152) = *((_BYTE *)a2 + 152);
  *(_OWORD *)(a1 + 136) = v20;
  v21 = *((_QWORD *)a2 + 20);
  *(_BYTE *)(a1 + 168) = *((_BYTE *)a2 + 168);
  *(_QWORD *)(a1 + 160) = v21;
  v22 = a2[11];
  v23 = a2[12];
  *(_BYTE *)(a1 + 208) = *((_BYTE *)a2 + 208);
  *(_OWORD *)(a1 + 176) = v22;
  *(_OWORD *)(a1 + 192) = v23;
  v24 = a3[11];
  v25 = (void *)(a1 + v24);
  v26 = (char *)a2 + v24;
  v27 = sub_214424308();
  v28 = *(_QWORD *)(v27 - 8);
  v29 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v28 + 48);
  v30 = v29(v25, 1, v27);
  v31 = v29(v26, 1, v27);
  if (v30)
  {
    if (!v31)
    {
      (*(void (**)(void *, char *, uint64_t))(v28 + 16))(v25, v26, v27);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
      goto LABEL_27;
    }
    goto LABEL_26;
  }
  if (v31)
  {
    (*(void (**)(void *, uint64_t))(v28 + 8))(v25, v27);
LABEL_26:
    v32 = sub_2141D8BF8(&qword_253F134C8);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    goto LABEL_27;
  }
  (*(void (**)(void *, char *, uint64_t))(v28 + 24))(v25, v26, v27);
LABEL_27:
  v33 = a3[12];
  v34 = a1 + v33;
  v35 = (uint64_t *)((char *)a2 + v33);
  v36 = *v35;
  *(_BYTE *)(v34 + 8) = *((_BYTE *)v35 + 8);
  *(_QWORD *)v34 = v36;
  *(_QWORD *)(a1 + a3[13]) = *(_QWORD *)((char *)a2 + a3[13]);
  v37 = a3[14];
  v38 = (void *)(a1 + v37);
  v39 = (char *)a2 + v37;
  v40 = sub_214424C68();
  v41 = *(_QWORD *)(v40 - 8);
  v42 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v41 + 48);
  v43 = v42(v38, 1, v40);
  v44 = v42(v39, 1, v40);
  if (v43)
  {
    if (!v44)
    {
      (*(void (**)(void *, char *, uint64_t))(v41 + 16))(v38, v39, v40);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v41 + 56))(v38, 0, 1, v40);
      goto LABEL_33;
    }
    goto LABEL_32;
  }
  if (v44)
  {
    (*(void (**)(void *, uint64_t))(v41 + 8))(v38, v40);
LABEL_32:
    v45 = sub_2141D8BF8(&qword_253F15C88);
    memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
    goto LABEL_33;
  }
  (*(void (**)(void *, char *, uint64_t))(v41 + 24))(v38, v39, v40);
LABEL_33:
  v46 = a3[15];
  v47 = a1 + v46;
  v48 = (uint64_t)a2 + v46;
  *(_QWORD *)(a1 + v46) = *(_QWORD *)((char *)a2 + v46);
  swift_retain();
  swift_release();
  *(_BYTE *)(v47 + 8) = *(_BYTE *)(v48 + 8);
  *(_BYTE *)(v47 + 9) = *(_BYTE *)(v48 + 9);
  *(_QWORD *)(a1 + a3[16]) = *(_QWORD *)((char *)a2 + a3[16]);
  *(_QWORD *)(a1 + a3[17]) = *(_QWORD *)((char *)a2 + a3[17]);
  v49 = a3[18];
  v50 = a1 + v49;
  v51 = (uint64_t)a2 + v49;
  v52 = *(_QWORD *)(a1 + v49 + 24);
  v53 = *(_QWORD *)((char *)a2 + v49 + 24);
  if (v52)
  {
    if (v53)
    {
      v54 = *(_QWORD *)v51;
      v55 = *(_QWORD *)(v51 + 8);
      v56 = *(_BYTE *)(v51 + 16);
      sub_2141DD130(*(_QWORD *)v51, v55, v56);
      v57 = *(_QWORD *)v50;
      v58 = *(_QWORD *)(v50 + 8);
      v59 = *(_BYTE *)(v50 + 16);
      *(_QWORD *)v50 = v54;
      *(_QWORD *)(v50 + 8) = v55;
      *(_BYTE *)(v50 + 16) = v56;
      sub_2141ED0BC(v57, v58, v59);
      *(_QWORD *)(v50 + 24) = *(_QWORD *)(v51 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v60 = *(_QWORD *)(v51 + 32);
      v61 = *(_QWORD *)(v51 + 40);
      v62 = *(_BYTE *)(v51 + 48);
      sub_2141DD140(v60, v61, v62);
      v63 = *(_QWORD *)(v50 + 32);
      v64 = *(_QWORD *)(v50 + 40);
      *(_QWORD *)(v50 + 32) = v60;
      *(_QWORD *)(v50 + 40) = v61;
      v65 = *(_BYTE *)(v50 + 48);
      *(_BYTE *)(v50 + 48) = v62;
      sub_2141EF1B0(v63, v64, v65);
LABEL_38:
      *(_OWORD *)(v50 + 56) = *(_OWORD *)(v51 + 56);
      goto LABEL_43;
    }
    sub_21420D764(v50);
    *(_OWORD *)v50 = *(_OWORD *)v51;
    v73 = *(_OWORD *)(v51 + 32);
    v72 = *(_OWORD *)(v51 + 48);
    v74 = *(_OWORD *)(v51 + 16);
    *(_QWORD *)(v50 + 64) = *(_QWORD *)(v51 + 64);
    *(_OWORD *)(v50 + 32) = v73;
    *(_OWORD *)(v50 + 48) = v72;
    *(_OWORD *)(v50 + 16) = v74;
  }
  else
  {
    if (v53)
    {
      v66 = *(_QWORD *)v51;
      v67 = *(_QWORD *)(v51 + 8);
      v68 = *(_BYTE *)(v51 + 16);
      sub_2141DD130(*(_QWORD *)v51, v67, v68);
      *(_QWORD *)v50 = v66;
      *(_QWORD *)(v50 + 8) = v67;
      *(_BYTE *)(v50 + 16) = v68;
      *(_QWORD *)(v50 + 24) = *(_QWORD *)(v51 + 24);
      v69 = *(_QWORD *)(v51 + 32);
      v70 = *(_QWORD *)(v51 + 40);
      v71 = *(_BYTE *)(v51 + 48);
      swift_bridgeObjectRetain();
      sub_2141DD140(v69, v70, v71);
      *(_QWORD *)(v50 + 32) = v69;
      *(_QWORD *)(v50 + 40) = v70;
      *(_BYTE *)(v50 + 48) = v71;
      goto LABEL_38;
    }
    *(_OWORD *)v50 = *(_OWORD *)v51;
    v75 = *(_OWORD *)(v51 + 16);
    v76 = *(_OWORD *)(v51 + 32);
    v77 = *(_OWORD *)(v51 + 48);
    *(_QWORD *)(v50 + 64) = *(_QWORD *)(v51 + 64);
    *(_OWORD *)(v50 + 32) = v76;
    *(_OWORD *)(v50 + 48) = v77;
    *(_OWORD *)(v50 + 16) = v75;
  }
LABEL_43:
  v78 = a3[19];
  v79 = a1 + v78;
  v80 = (uint64_t)a2 + v78;
  v81 = *(_QWORD *)(a1 + v78 + 24);
  v82 = *(_QWORD *)((char *)a2 + v78 + 24);
  if (v81)
  {
    if (v82)
    {
      v83 = *(_QWORD *)v80;
      v84 = *(_QWORD *)(v80 + 8);
      v85 = *(_BYTE *)(v80 + 16);
      sub_2141DD130(*(_QWORD *)v80, v84, v85);
      v86 = *(_QWORD *)v79;
      v87 = *(_QWORD *)(v79 + 8);
      v88 = *(_BYTE *)(v79 + 16);
      *(_QWORD *)v79 = v83;
      *(_QWORD *)(v79 + 8) = v84;
      *(_BYTE *)(v79 + 16) = v85;
      sub_2141ED0BC(v86, v87, v88);
      *(_QWORD *)(v79 + 24) = *(_QWORD *)(v80 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v89 = *(_QWORD *)(v80 + 32);
      v90 = *(_QWORD *)(v80 + 40);
      v91 = *(_BYTE *)(v80 + 48);
      sub_2141DD140(v89, v90, v91);
      v92 = *(_QWORD *)(v79 + 32);
      v93 = *(_QWORD *)(v79 + 40);
      *(_QWORD *)(v79 + 32) = v89;
      *(_QWORD *)(v79 + 40) = v90;
      v94 = *(_BYTE *)(v79 + 48);
      *(_BYTE *)(v79 + 48) = v91;
      sub_2141EF1B0(v92, v93, v94);
LABEL_48:
      *(_OWORD *)(v79 + 56) = *(_OWORD *)(v80 + 56);
      goto LABEL_51;
    }
    sub_21420D764(v79);
    *(_OWORD *)v79 = *(_OWORD *)v80;
    v102 = *(_OWORD *)(v80 + 32);
    v101 = *(_OWORD *)(v80 + 48);
    v103 = *(_OWORD *)(v80 + 16);
    *(_QWORD *)(v79 + 64) = *(_QWORD *)(v80 + 64);
    *(_OWORD *)(v79 + 32) = v102;
    *(_OWORD *)(v79 + 48) = v101;
    *(_OWORD *)(v79 + 16) = v103;
  }
  else
  {
    if (v82)
    {
      v95 = *(_QWORD *)v80;
      v96 = *(_QWORD *)(v80 + 8);
      v97 = *(_BYTE *)(v80 + 16);
      sub_2141DD130(*(_QWORD *)v80, v96, v97);
      *(_QWORD *)v79 = v95;
      *(_QWORD *)(v79 + 8) = v96;
      *(_BYTE *)(v79 + 16) = v97;
      *(_QWORD *)(v79 + 24) = *(_QWORD *)(v80 + 24);
      v98 = *(_QWORD *)(v80 + 32);
      v99 = *(_QWORD *)(v80 + 40);
      v100 = *(_BYTE *)(v80 + 48);
      swift_bridgeObjectRetain();
      sub_2141DD140(v98, v99, v100);
      *(_QWORD *)(v79 + 32) = v98;
      *(_QWORD *)(v79 + 40) = v99;
      *(_BYTE *)(v79 + 48) = v100;
      goto LABEL_48;
    }
    *(_OWORD *)v79 = *(_OWORD *)v80;
    v104 = *(_OWORD *)(v80 + 16);
    v105 = *(_OWORD *)(v80 + 32);
    v106 = *(_OWORD *)(v80 + 48);
    *(_QWORD *)(v79 + 64) = *(_QWORD *)(v80 + 64);
    *(_OWORD *)(v79 + 32) = v105;
    *(_OWORD *)(v79 + 48) = v106;
    *(_OWORD *)(v79 + 16) = v104;
  }
LABEL_51:
  v107 = a3[20];
  v108 = a1 + v107;
  v109 = (uint64_t)a2 + v107;
  v110 = *(_QWORD *)(a1 + v107 + 24);
  v111 = *(_QWORD *)((char *)a2 + v107 + 24);
  if (v110)
  {
    if (v111)
    {
      v112 = *(_QWORD *)v109;
      v113 = *(_QWORD *)(v109 + 8);
      v114 = *(_BYTE *)(v109 + 16);
      sub_2141DD130(*(_QWORD *)v109, v113, v114);
      v115 = *(_QWORD *)v108;
      v116 = *(_QWORD *)(v108 + 8);
      v117 = *(_BYTE *)(v108 + 16);
      *(_QWORD *)v108 = v112;
      *(_QWORD *)(v108 + 8) = v113;
      *(_BYTE *)(v108 + 16) = v114;
      sub_2141ED0BC(v115, v116, v117);
      *(_QWORD *)(v108 + 24) = *(_QWORD *)(v109 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v118 = *(_QWORD *)(v109 + 32);
      v119 = *(_QWORD *)(v109 + 40);
      v120 = *(_BYTE *)(v109 + 48);
      sub_2141DD140(v118, v119, v120);
      v121 = *(_QWORD *)(v108 + 32);
      v122 = *(_QWORD *)(v108 + 40);
      *(_QWORD *)(v108 + 32) = v118;
      *(_QWORD *)(v108 + 40) = v119;
      v123 = *(_BYTE *)(v108 + 48);
      *(_BYTE *)(v108 + 48) = v120;
      sub_2141EF1B0(v121, v122, v123);
LABEL_56:
      *(_OWORD *)(v108 + 56) = *(_OWORD *)(v109 + 56);
      goto LABEL_59;
    }
    sub_21420D764(v108);
    *(_OWORD *)v108 = *(_OWORD *)v109;
    v131 = *(_OWORD *)(v109 + 32);
    v130 = *(_OWORD *)(v109 + 48);
    v132 = *(_OWORD *)(v109 + 16);
    *(_QWORD *)(v108 + 64) = *(_QWORD *)(v109 + 64);
    *(_OWORD *)(v108 + 32) = v131;
    *(_OWORD *)(v108 + 48) = v130;
    *(_OWORD *)(v108 + 16) = v132;
  }
  else
  {
    if (v111)
    {
      v124 = *(_QWORD *)v109;
      v125 = *(_QWORD *)(v109 + 8);
      v126 = *(_BYTE *)(v109 + 16);
      sub_2141DD130(*(_QWORD *)v109, v125, v126);
      *(_QWORD *)v108 = v124;
      *(_QWORD *)(v108 + 8) = v125;
      *(_BYTE *)(v108 + 16) = v126;
      *(_QWORD *)(v108 + 24) = *(_QWORD *)(v109 + 24);
      v127 = *(_QWORD *)(v109 + 32);
      v128 = *(_QWORD *)(v109 + 40);
      v129 = *(_BYTE *)(v109 + 48);
      swift_bridgeObjectRetain();
      sub_2141DD140(v127, v128, v129);
      *(_QWORD *)(v108 + 32) = v127;
      *(_QWORD *)(v108 + 40) = v128;
      *(_BYTE *)(v108 + 48) = v129;
      goto LABEL_56;
    }
    *(_OWORD *)v108 = *(_OWORD *)v109;
    v133 = *(_OWORD *)(v109 + 16);
    v134 = *(_OWORD *)(v109 + 32);
    v135 = *(_OWORD *)(v109 + 48);
    *(_QWORD *)(v108 + 64) = *(_QWORD *)(v109 + 64);
    *(_OWORD *)(v108 + 32) = v134;
    *(_OWORD *)(v108 + 48) = v135;
    *(_OWORD *)(v108 + 16) = v133;
  }
LABEL_59:
  v136 = a3[21];
  v137 = a1 + v136;
  v138 = (uint64_t)a2 + v136;
  v139 = *(_QWORD *)(a1 + v136 + 24);
  v140 = *(_QWORD *)((char *)a2 + v136 + 24);
  if (v139)
  {
    if (v140)
    {
      v141 = *(_QWORD *)v138;
      v142 = *(_QWORD *)(v138 + 8);
      v143 = *(_BYTE *)(v138 + 16);
      sub_2141DD130(*(_QWORD *)v138, v142, v143);
      v144 = *(_QWORD *)v137;
      v145 = *(_QWORD *)(v137 + 8);
      v146 = *(_BYTE *)(v137 + 16);
      *(_QWORD *)v137 = v141;
      *(_QWORD *)(v137 + 8) = v142;
      *(_BYTE *)(v137 + 16) = v143;
      sub_2141ED0BC(v144, v145, v146);
      *(_QWORD *)(v137 + 24) = *(_QWORD *)(v138 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v147 = *(_QWORD *)(v138 + 32);
      v148 = *(_QWORD *)(v138 + 40);
      v149 = *(_BYTE *)(v138 + 48);
      sub_2141DD140(v147, v148, v149);
      v150 = *(_QWORD *)(v137 + 32);
      v151 = *(_QWORD *)(v137 + 40);
      *(_QWORD *)(v137 + 32) = v147;
      *(_QWORD *)(v137 + 40) = v148;
      v152 = *(_BYTE *)(v137 + 48);
      *(_BYTE *)(v137 + 48) = v149;
      sub_2141EF1B0(v150, v151, v152);
LABEL_64:
      *(_OWORD *)(v137 + 56) = *(_OWORD *)(v138 + 56);
      goto LABEL_67;
    }
    sub_21420D764(v137);
    *(_OWORD *)v137 = *(_OWORD *)v138;
    v160 = *(_OWORD *)(v138 + 32);
    v159 = *(_OWORD *)(v138 + 48);
    v161 = *(_OWORD *)(v138 + 16);
    *(_QWORD *)(v137 + 64) = *(_QWORD *)(v138 + 64);
    *(_OWORD *)(v137 + 32) = v160;
    *(_OWORD *)(v137 + 48) = v159;
    *(_OWORD *)(v137 + 16) = v161;
  }
  else
  {
    if (v140)
    {
      v153 = *(_QWORD *)v138;
      v154 = *(_QWORD *)(v138 + 8);
      v155 = *(_BYTE *)(v138 + 16);
      sub_2141DD130(*(_QWORD *)v138, v154, v155);
      *(_QWORD *)v137 = v153;
      *(_QWORD *)(v137 + 8) = v154;
      *(_BYTE *)(v137 + 16) = v155;
      *(_QWORD *)(v137 + 24) = *(_QWORD *)(v138 + 24);
      v156 = *(_QWORD *)(v138 + 32);
      v157 = *(_QWORD *)(v138 + 40);
      v158 = *(_BYTE *)(v138 + 48);
      swift_bridgeObjectRetain();
      sub_2141DD140(v156, v157, v158);
      *(_QWORD *)(v137 + 32) = v156;
      *(_QWORD *)(v137 + 40) = v157;
      *(_BYTE *)(v137 + 48) = v158;
      goto LABEL_64;
    }
    *(_OWORD *)v137 = *(_OWORD *)v138;
    v162 = *(_OWORD *)(v138 + 16);
    v163 = *(_OWORD *)(v138 + 32);
    v164 = *(_OWORD *)(v138 + 48);
    *(_QWORD *)(v137 + 64) = *(_QWORD *)(v138 + 64);
    *(_OWORD *)(v137 + 32) = v163;
    *(_OWORD *)(v137 + 48) = v164;
    *(_OWORD *)(v137 + 16) = v162;
  }
LABEL_67:
  v165 = a3[22];
  v166 = (_QWORD *)(a1 + v165);
  v167 = (_QWORD *)((char *)a2 + v165);
  *v166 = *v167;
  v166[1] = v167[1];
  v166[2] = v167[2];
  v168 = a3[23];
  v169 = (_QWORD *)(a1 + v168);
  v170 = (_QWORD *)((char *)a2 + v168);
  *v169 = *v170;
  v169[1] = v170[1];
  v169[2] = v170[2];
  v171 = a3[24];
  v172 = a1 + v171;
  v173 = (uint64_t)a2 + v171;
  v174 = *(_QWORD *)(a1 + v171 + 24);
  v175 = *(_QWORD *)((char *)a2 + v171 + 24);
  if (v174)
  {
    if (v175)
    {
      v176 = *(_QWORD *)v173;
      v177 = *(_QWORD *)(v173 + 8);
      v178 = *(_BYTE *)(v173 + 16);
      sub_2141DD130(*(_QWORD *)v173, v177, v178);
      v179 = *(_QWORD *)v172;
      v180 = *(_QWORD *)(v172 + 8);
      v181 = *(_BYTE *)(v172 + 16);
      *(_QWORD *)v172 = v176;
      *(_QWORD *)(v172 + 8) = v177;
      *(_BYTE *)(v172 + 16) = v178;
      sub_2141ED0BC(v179, v180, v181);
      *(_QWORD *)(v172 + 24) = *(_QWORD *)(v173 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_21420D798(v172);
      v185 = *(_OWORD *)(v173 + 16);
      *(_OWORD *)v172 = *(_OWORD *)v173;
      *(_OWORD *)(v172 + 16) = v185;
    }
  }
  else if (v175)
  {
    v182 = *(_QWORD *)v173;
    v183 = *(_QWORD *)(v173 + 8);
    v184 = *(_BYTE *)(v173 + 16);
    sub_2141DD130(*(_QWORD *)v173, v183, v184);
    *(_QWORD *)v172 = v182;
    *(_QWORD *)(v172 + 8) = v183;
    *(_BYTE *)(v172 + 16) = v184;
    *(_QWORD *)(v172 + 24) = *(_QWORD *)(v173 + 24);
    swift_bridgeObjectRetain();
  }
  else
  {
    v186 = *(_OWORD *)(v173 + 16);
    *(_OWORD *)v172 = *(_OWORD *)v173;
    *(_OWORD *)(v172 + 16) = v186;
  }
  v187 = a3[25];
  v188 = a1 + v187;
  v189 = (uint64_t)a2 + v187;
  v190 = *(_QWORD *)(a1 + v187 + 24);
  v191 = *(_QWORD *)((char *)a2 + v187 + 24);
  if (v190)
  {
    if (v191)
    {
      v192 = *(_QWORD *)v189;
      v193 = *(_QWORD *)(v189 + 8);
      v194 = *(_BYTE *)(v189 + 16);
      sub_2141DD130(*(_QWORD *)v189, v193, v194);
      v195 = *(_QWORD *)v188;
      v196 = *(_QWORD *)(v188 + 8);
      v197 = *(_BYTE *)(v188 + 16);
      *(_QWORD *)v188 = v192;
      *(_QWORD *)(v188 + 8) = v193;
      *(_BYTE *)(v188 + 16) = v194;
      sub_2141ED0BC(v195, v196, v197);
      *(_QWORD *)(v188 + 24) = *(_QWORD *)(v189 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_21420D798(v188);
      v201 = *(_OWORD *)(v189 + 16);
      *(_OWORD *)v188 = *(_OWORD *)v189;
      *(_OWORD *)(v188 + 16) = v201;
    }
  }
  else if (v191)
  {
    v198 = *(_QWORD *)v189;
    v199 = *(_QWORD *)(v189 + 8);
    v200 = *(_BYTE *)(v189 + 16);
    sub_2141DD130(*(_QWORD *)v189, v199, v200);
    *(_QWORD *)v188 = v198;
    *(_QWORD *)(v188 + 8) = v199;
    *(_BYTE *)(v188 + 16) = v200;
    *(_QWORD *)(v188 + 24) = *(_QWORD *)(v189 + 24);
    swift_bridgeObjectRetain();
  }
  else
  {
    v202 = *(_OWORD *)(v189 + 16);
    *(_OWORD *)v188 = *(_OWORD *)v189;
    *(_OWORD *)(v188 + 16) = v202;
  }
  v203 = a3[26];
  v204 = (_QWORD *)(a1 + v203);
  v205 = (_QWORD *)((char *)a2 + v203);
  *v204 = *v205;
  v204[1] = v205[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v206 = a3[27];
  v207 = a1 + v206;
  v208 = (uint64_t)a2 + v206;
  v209 = *(_QWORD *)(v208 + 24);
  if (*(_QWORD *)(a1 + v206 + 24))
  {
    if (v209)
    {
      sub_21420D7CC((uint64_t *)v207, (uint64_t *)v208);
    }
    else
    {
      sub_21420D92C(v207);
      v210 = *(_OWORD *)(v208 + 16);
      *(_OWORD *)v207 = *(_OWORD *)v208;
      *(_OWORD *)(v207 + 16) = v210;
    }
  }
  else if (v209)
  {
    *(_QWORD *)(v207 + 24) = v209;
    (**(void (***)(uint64_t, uint64_t))(v209 - 8))(v207, v208);
  }
  else
  {
    v211 = *(_OWORD *)(v208 + 16);
    *(_OWORD *)v207 = *(_OWORD *)v208;
    *(_OWORD *)(v207 + 16) = v211;
  }
  return a1;
}

uint64_t sub_21420D6FC(uint64_t a1)
{
  destroy for SgShapeStyle.Shading(a1);
  return a1;
}

uint64_t sub_21420D730(uint64_t a1)
{
  destroy for SgSymbol(a1);
  return a1;
}

uint64_t sub_21420D764(uint64_t a1)
{
  destroy for AnyPlottableValue(a1);
  return a1;
}

uint64_t sub_21420D798(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x24BDF1FA8] - 8) + 8))();
  return a1;
}

uint64_t *sub_21420D7CC(uint64_t *result, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[24];

  if (result != a2)
  {
    v3 = result;
    v4 = result[3];
    v5 = a2[3];
    if (v4 == v5)
    {
      v9 = *(_QWORD *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        v10 = *a2;
        swift_retain();
        result = (uint64_t *)swift_release();
        *v3 = v10;
      }
      else
      {
        return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t *, uint64_t))(v9 + 24))(result, a2, result[3]);
      }
    }
    else
    {
      result[3] = v5;
      v6 = *(_QWORD *)(v4 - 8);
      v7 = *(_QWORD *)(v5 - 8);
      v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        if ((v8 & 0x20000) != 0)
        {
          *result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(_BYTE *, uint64_t *, uint64_t))(v6 + 32))(v11, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          *v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v11, v4);
      }
    }
  }
  return result;
}

uint64_t sub_21420D92C(uint64_t a1)
{
  destroy for VectorizedProperties(a1);
  return a1;
}

uint64_t sub_21420D960(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  void *v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  const void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 *v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _OWORD *v62;
  _OWORD *v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  _OWORD *v67;
  _OWORD *v68;
  __int128 v69;
  uint64_t v70;
  _OWORD *v71;
  _OWORD *v72;
  __int128 v73;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  v7 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v7;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v8 = *(_OWORD *)(a2 + 88);
  v9 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 113) = *(_OWORD *)(a2 + 113);
  *(_OWORD *)(a1 + 104) = v9;
  *(_OWORD *)(a1 + 88) = v8;
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  v10 = *(_OWORD *)(a2 + 176);
  v11 = *(_OWORD *)(a2 + 192);
  *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
  v12 = a3[11];
  v13 = (void *)(a1 + v12);
  v14 = (const void *)(a2 + v12);
  *(_OWORD *)(a1 + 176) = v10;
  *(_OWORD *)(a1 + 192) = v11;
  v15 = sub_214424308();
  v16 = *(_QWORD *)(v15 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    v17 = sub_2141D8BF8(&qword_253F134C8);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v16 + 32))(v13, v14, v15);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  v18 = a3[12];
  v19 = a3[13];
  v20 = a1 + v18;
  v21 = a2 + v18;
  *(_QWORD *)v20 = *(_QWORD *)v21;
  v22 = *(_QWORD *)(a2 + v19);
  *(_BYTE *)(v20 + 8) = *(_BYTE *)(v21 + 8);
  *(_QWORD *)(a1 + v19) = v22;
  v23 = a3[14];
  v24 = (void *)(a1 + v23);
  v25 = (const void *)(a2 + v23);
  v26 = sub_214424C68();
  v27 = *(_QWORD *)(v26 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
  {
    v28 = sub_2141D8BF8(&qword_253F15C88);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v27 + 32))(v24, v25, v26);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
  }
  v29 = a3[15];
  v30 = a3[16];
  v31 = a1 + v29;
  v32 = a2 + v29;
  *(_QWORD *)v31 = *(_QWORD *)v32;
  *(_WORD *)(v31 + 8) = *(_WORD *)(v32 + 8);
  *(_QWORD *)(a1 + v30) = *(_QWORD *)(a2 + v30);
  v33 = a3[18];
  *(_QWORD *)(a1 + a3[17]) = *(_QWORD *)(a2 + a3[17]);
  v34 = a1 + v33;
  v35 = a2 + v33;
  *(_QWORD *)(v34 + 64) = *(_QWORD *)(v35 + 64);
  v36 = *(_OWORD *)(v35 + 48);
  *(_OWORD *)(v34 + 32) = *(_OWORD *)(v35 + 32);
  *(_OWORD *)(v34 + 48) = v36;
  v37 = *(_OWORD *)(v35 + 16);
  *(_OWORD *)v34 = *(_OWORD *)v35;
  *(_OWORD *)(v34 + 16) = v37;
  v38 = a3[19];
  v39 = a3[20];
  v40 = a1 + v38;
  v41 = a2 + v38;
  *(_QWORD *)(v40 + 64) = *(_QWORD *)(v41 + 64);
  v42 = *(_OWORD *)(v41 + 48);
  *(_OWORD *)(v40 + 32) = *(_OWORD *)(v41 + 32);
  *(_OWORD *)(v40 + 48) = v42;
  v43 = *(_OWORD *)(v41 + 16);
  *(_OWORD *)v40 = *(_OWORD *)v41;
  *(_OWORD *)(v40 + 16) = v43;
  v44 = a1 + v39;
  v45 = a2 + v39;
  *(_QWORD *)(v44 + 64) = *(_QWORD *)(v45 + 64);
  v46 = *(_OWORD *)(v45 + 48);
  *(_OWORD *)(v44 + 32) = *(_OWORD *)(v45 + 32);
  *(_OWORD *)(v44 + 48) = v46;
  v47 = *(_OWORD *)(v45 + 16);
  *(_OWORD *)v44 = *(_OWORD *)v45;
  *(_OWORD *)(v44 + 16) = v47;
  v48 = a3[21];
  v49 = a3[22];
  v50 = a1 + v48;
  v51 = (__int128 *)(a2 + v48);
  v52 = *v51;
  v53 = v51[1];
  v54 = v51[2];
  v55 = v51[3];
  *(_QWORD *)(v50 + 64) = *((_QWORD *)v51 + 8);
  *(_OWORD *)(v50 + 32) = v54;
  *(_OWORD *)(v50 + 48) = v55;
  *(_OWORD *)v50 = v52;
  *(_OWORD *)(v50 + 16) = v53;
  v56 = a1 + v49;
  v57 = a2 + v49;
  *(_QWORD *)(v56 + 16) = *(_QWORD *)(v57 + 16);
  *(_OWORD *)v56 = *(_OWORD *)v57;
  v58 = a3[23];
  v59 = a3[24];
  v60 = a1 + v58;
  v61 = a2 + v58;
  *(_QWORD *)(v60 + 16) = *(_QWORD *)(v61 + 16);
  *(_OWORD *)v60 = *(_OWORD *)v61;
  v62 = (_OWORD *)(a1 + v59);
  v63 = (_OWORD *)(a2 + v59);
  v64 = v63[1];
  *v62 = *v63;
  v62[1] = v64;
  v65 = a3[25];
  v66 = a3[26];
  v67 = (_OWORD *)(a1 + v65);
  v68 = (_OWORD *)(a2 + v65);
  v69 = v68[1];
  *v67 = *v68;
  v67[1] = v69;
  *(_OWORD *)(a1 + v66) = *(_OWORD *)(a2 + v66);
  v70 = a3[27];
  v71 = (_OWORD *)(a1 + v70);
  v72 = (_OWORD *)(a2 + v70);
  v73 = v72[1];
  *v71 = *v72;
  v71[1] = v73;
  return a1;
}

uint64_t sub_21420DC68(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(void *, uint64_t, uint64_t);
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(void *, uint64_t, uint64_t);
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  __int128 v89;
  __int128 v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char v100;
  uint64_t v101;
  uint64_t v102;
  char v103;
  __int128 v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char v108;
  uint64_t v109;
  uint64_t v110;
  char v111;
  __int128 v112;
  uint64_t v113;
  _QWORD *v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _OWORD *v119;
  uint64_t v120;
  __int128 v121;

  if (*(unsigned __int8 *)(a1 + 40) == 255)
    goto LABEL_7;
  if (*(unsigned __int8 *)(a2 + 40) == 255 || a1 != a2)
  {
    sub_21420D6FC(a1);
LABEL_7:
    v7 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v7;
    *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  }
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  v8 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v8;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  if (*(unsigned __int8 *)(a1 + 128) == 255)
  {
LABEL_12:
    v9 = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 104) = v9;
    *(_OWORD *)(a1 + 113) = *(_OWORD *)(a2 + 113);
    goto LABEL_13;
  }
  if (*(unsigned __int8 *)(a2 + 128) == 255 || a1 != a2)
  {
    sub_21420D730(a1 + 88);
    goto LABEL_12;
  }
LABEL_13:
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  v10 = *(_OWORD *)(a2 + 176);
  v11 = *(_OWORD *)(a2 + 192);
  *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
  v12 = a3[11];
  v13 = (void *)(a1 + v12);
  v14 = (void *)(a2 + v12);
  *(_OWORD *)(a1 + 176) = v10;
  *(_OWORD *)(a1 + 192) = v11;
  v15 = sub_214424308();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v16 + 48);
  v18 = v17(v13, 1, v15);
  v19 = v17(v14, 1, v15);
  if (v18)
  {
    if (!v19)
    {
      (*(void (**)(void *, void *, uint64_t))(v16 + 32))(v13, v14, v15);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v19)
  {
    (*(void (**)(void *, uint64_t))(v16 + 8))(v13, v15);
LABEL_18:
    v20 = sub_2141D8BF8(&qword_253F134C8);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(void *, void *, uint64_t))(v16 + 40))(v13, v14, v15);
LABEL_19:
  v21 = a3[12];
  v22 = a3[13];
  v23 = a1 + v21;
  v24 = a2 + v21;
  *(_QWORD *)v23 = *(_QWORD *)v24;
  v25 = *(_QWORD *)(a2 + v22);
  *(_BYTE *)(v23 + 8) = *(_BYTE *)(v24 + 8);
  *(_QWORD *)(a1 + v22) = v25;
  v26 = a3[14];
  v27 = (void *)(a1 + v26);
  v28 = (void *)(a2 + v26);
  v29 = sub_214424C68();
  v30 = *(_QWORD *)(v29 - 8);
  v31 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v30 + 48);
  v32 = v31(v27, 1, v29);
  v33 = v31(v28, 1, v29);
  if (v32)
  {
    if (!v33)
    {
      (*(void (**)(void *, void *, uint64_t))(v30 + 32))(v27, v28, v29);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v33)
  {
    (*(void (**)(void *, uint64_t))(v30 + 8))(v27, v29);
LABEL_24:
    v34 = sub_2141D8BF8(&qword_253F15C88);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(void *, void *, uint64_t))(v30 + 40))(v27, v28, v29);
LABEL_25:
  v35 = a3[15];
  v36 = a1 + v35;
  v37 = a2 + v35;
  *(_QWORD *)(a1 + v35) = *(_QWORD *)(a2 + v35);
  swift_release();
  *(_BYTE *)(v36 + 8) = *(_BYTE *)(v37 + 8);
  *(_BYTE *)(v36 + 9) = *(_BYTE *)(v37 + 9);
  v38 = a3[17];
  *(_QWORD *)(a1 + a3[16]) = *(_QWORD *)(a2 + a3[16]);
  *(_QWORD *)(a1 + v38) = *(_QWORD *)(a2 + v38);
  v39 = a3[18];
  v40 = a1 + v39;
  v41 = a2 + v39;
  if (*(_QWORD *)(a1 + v39 + 24))
  {
    if (*(_QWORD *)(v41 + 24))
    {
      v42 = *(_BYTE *)(v41 + 16);
      v43 = *(_QWORD *)v40;
      v44 = *(_QWORD *)(v40 + 8);
      v45 = *(_BYTE *)(v40 + 16);
      *(_OWORD *)v40 = *(_OWORD *)v41;
      *(_BYTE *)(v40 + 16) = v42;
      sub_2141ED0BC(v43, v44, v45);
      *(_QWORD *)(v40 + 24) = *(_QWORD *)(v41 + 24);
      swift_bridgeObjectRelease();
      v46 = *(_BYTE *)(v41 + 48);
      v47 = *(_QWORD *)(v40 + 32);
      v48 = *(_QWORD *)(v40 + 40);
      *(_OWORD *)(v40 + 32) = *(_OWORD *)(v41 + 32);
      v49 = *(_BYTE *)(v40 + 48);
      *(_BYTE *)(v40 + 48) = v46;
      sub_2141EF1B0(v47, v48, v49);
      *(_OWORD *)(v40 + 56) = *(_OWORD *)(v41 + 56);
      goto LABEL_30;
    }
    sub_21420D764(v40);
  }
  v50 = *(_OWORD *)(v41 + 48);
  *(_OWORD *)(v40 + 32) = *(_OWORD *)(v41 + 32);
  *(_OWORD *)(v40 + 48) = v50;
  *(_QWORD *)(v40 + 64) = *(_QWORD *)(v41 + 64);
  v51 = *(_OWORD *)(v41 + 16);
  *(_OWORD *)v40 = *(_OWORD *)v41;
  *(_OWORD *)(v40 + 16) = v51;
LABEL_30:
  v52 = a3[19];
  v53 = a1 + v52;
  v54 = a2 + v52;
  if (*(_QWORD *)(a1 + v52 + 24))
  {
    if (*(_QWORD *)(v54 + 24))
    {
      v55 = *(_BYTE *)(v54 + 16);
      v56 = *(_QWORD *)v53;
      v57 = *(_QWORD *)(v53 + 8);
      v58 = *(_BYTE *)(v53 + 16);
      *(_OWORD *)v53 = *(_OWORD *)v54;
      *(_BYTE *)(v53 + 16) = v55;
      sub_2141ED0BC(v56, v57, v58);
      *(_QWORD *)(v53 + 24) = *(_QWORD *)(v54 + 24);
      swift_bridgeObjectRelease();
      v59 = *(_BYTE *)(v54 + 48);
      v60 = *(_QWORD *)(v53 + 32);
      v61 = *(_QWORD *)(v53 + 40);
      *(_OWORD *)(v53 + 32) = *(_OWORD *)(v54 + 32);
      v62 = *(_BYTE *)(v53 + 48);
      *(_BYTE *)(v53 + 48) = v59;
      sub_2141EF1B0(v60, v61, v62);
      *(_OWORD *)(v53 + 56) = *(_OWORD *)(v54 + 56);
      goto LABEL_35;
    }
    sub_21420D764(v53);
  }
  v63 = *(_OWORD *)(v54 + 48);
  *(_OWORD *)(v53 + 32) = *(_OWORD *)(v54 + 32);
  *(_OWORD *)(v53 + 48) = v63;
  *(_QWORD *)(v53 + 64) = *(_QWORD *)(v54 + 64);
  v64 = *(_OWORD *)(v54 + 16);
  *(_OWORD *)v53 = *(_OWORD *)v54;
  *(_OWORD *)(v53 + 16) = v64;
LABEL_35:
  v65 = a3[20];
  v66 = a1 + v65;
  v67 = a2 + v65;
  if (*(_QWORD *)(a1 + v65 + 24))
  {
    if (*(_QWORD *)(v67 + 24))
    {
      v68 = *(_BYTE *)(v67 + 16);
      v69 = *(_QWORD *)v66;
      v70 = *(_QWORD *)(v66 + 8);
      v71 = *(_BYTE *)(v66 + 16);
      *(_OWORD *)v66 = *(_OWORD *)v67;
      *(_BYTE *)(v66 + 16) = v68;
      sub_2141ED0BC(v69, v70, v71);
      *(_QWORD *)(v66 + 24) = *(_QWORD *)(v67 + 24);
      swift_bridgeObjectRelease();
      v72 = *(_BYTE *)(v67 + 48);
      v73 = *(_QWORD *)(v66 + 32);
      v74 = *(_QWORD *)(v66 + 40);
      *(_OWORD *)(v66 + 32) = *(_OWORD *)(v67 + 32);
      v75 = *(_BYTE *)(v66 + 48);
      *(_BYTE *)(v66 + 48) = v72;
      sub_2141EF1B0(v73, v74, v75);
      *(_OWORD *)(v66 + 56) = *(_OWORD *)(v67 + 56);
      goto LABEL_40;
    }
    sub_21420D764(v66);
  }
  v76 = *(_OWORD *)(v67 + 48);
  *(_OWORD *)(v66 + 32) = *(_OWORD *)(v67 + 32);
  *(_OWORD *)(v66 + 48) = v76;
  *(_QWORD *)(v66 + 64) = *(_QWORD *)(v67 + 64);
  v77 = *(_OWORD *)(v67 + 16);
  *(_OWORD *)v66 = *(_OWORD *)v67;
  *(_OWORD *)(v66 + 16) = v77;
LABEL_40:
  v78 = a3[21];
  v79 = a1 + v78;
  v80 = a2 + v78;
  if (*(_QWORD *)(a1 + v78 + 24))
  {
    if (*(_QWORD *)(v80 + 24))
    {
      v81 = *(_BYTE *)(v80 + 16);
      v82 = *(_QWORD *)v79;
      v83 = *(_QWORD *)(v79 + 8);
      v84 = *(_BYTE *)(v79 + 16);
      *(_OWORD *)v79 = *(_OWORD *)v80;
      *(_BYTE *)(v79 + 16) = v81;
      sub_2141ED0BC(v82, v83, v84);
      *(_QWORD *)(v79 + 24) = *(_QWORD *)(v80 + 24);
      swift_bridgeObjectRelease();
      v85 = *(_BYTE *)(v80 + 48);
      v86 = *(_QWORD *)(v79 + 32);
      v87 = *(_QWORD *)(v79 + 40);
      *(_OWORD *)(v79 + 32) = *(_OWORD *)(v80 + 32);
      v88 = *(_BYTE *)(v79 + 48);
      *(_BYTE *)(v79 + 48) = v85;
      sub_2141EF1B0(v86, v87, v88);
      *(_OWORD *)(v79 + 56) = *(_OWORD *)(v80 + 56);
      goto LABEL_45;
    }
    sub_21420D764(v79);
  }
  v89 = *(_OWORD *)(v80 + 48);
  *(_OWORD *)(v79 + 32) = *(_OWORD *)(v80 + 32);
  *(_OWORD *)(v79 + 48) = v89;
  *(_QWORD *)(v79 + 64) = *(_QWORD *)(v80 + 64);
  v90 = *(_OWORD *)(v80 + 16);
  *(_OWORD *)v79 = *(_OWORD *)v80;
  *(_OWORD *)(v79 + 16) = v90;
LABEL_45:
  v91 = a3[22];
  v92 = a3[23];
  v93 = a1 + v91;
  v94 = a2 + v91;
  *(_OWORD *)v93 = *(_OWORD *)v94;
  *(_QWORD *)(v93 + 16) = *(_QWORD *)(v94 + 16);
  v95 = a1 + v92;
  v96 = a2 + v92;
  *(_OWORD *)v95 = *(_OWORD *)v96;
  *(_QWORD *)(v95 + 16) = *(_QWORD *)(v96 + 16);
  v97 = a3[24];
  v98 = a1 + v97;
  v99 = a2 + v97;
  if (*(_QWORD *)(a1 + v97 + 24))
  {
    if (*(_QWORD *)(v99 + 24))
    {
      v100 = *(_BYTE *)(v99 + 16);
      v101 = *(_QWORD *)v98;
      v102 = *(_QWORD *)(v98 + 8);
      v103 = *(_BYTE *)(v98 + 16);
      *(_OWORD *)v98 = *(_OWORD *)v99;
      *(_BYTE *)(v98 + 16) = v100;
      sub_2141ED0BC(v101, v102, v103);
      *(_QWORD *)(v98 + 24) = *(_QWORD *)(v99 + 24);
      swift_bridgeObjectRelease();
      goto LABEL_50;
    }
    sub_21420D798(v98);
  }
  v104 = *(_OWORD *)(v99 + 16);
  *(_OWORD *)v98 = *(_OWORD *)v99;
  *(_OWORD *)(v98 + 16) = v104;
LABEL_50:
  v105 = a3[25];
  v106 = a1 + v105;
  v107 = a2 + v105;
  if (*(_QWORD *)(a1 + v105 + 24))
  {
    if (*(_QWORD *)(v107 + 24))
    {
      v108 = *(_BYTE *)(v107 + 16);
      v109 = *(_QWORD *)v106;
      v110 = *(_QWORD *)(v106 + 8);
      v111 = *(_BYTE *)(v106 + 16);
      *(_OWORD *)v106 = *(_OWORD *)v107;
      *(_BYTE *)(v106 + 16) = v108;
      sub_2141ED0BC(v109, v110, v111);
      *(_QWORD *)(v106 + 24) = *(_QWORD *)(v107 + 24);
      swift_bridgeObjectRelease();
      goto LABEL_55;
    }
    sub_21420D798(v106);
  }
  v112 = *(_OWORD *)(v107 + 16);
  *(_OWORD *)v106 = *(_OWORD *)v107;
  *(_OWORD *)(v106 + 16) = v112;
LABEL_55:
  v113 = a3[26];
  v114 = (_QWORD *)(a1 + v113);
  v115 = (uint64_t *)(a2 + v113);
  v117 = *v115;
  v116 = v115[1];
  *v114 = v117;
  v114[1] = v116;
  swift_bridgeObjectRelease();
  v118 = a3[27];
  v119 = (_OWORD *)(a1 + v118);
  v120 = a2 + v118;
  if (*(_QWORD *)(a1 + v118 + 24))
  {
    if (*(_QWORD *)(v120 + 24))
      _s6Charts15AnyChartContentVwxx_0((uint64_t)v119);
    else
      sub_21420D92C((uint64_t)v119);
  }
  v121 = *(_OWORD *)(v120 + 16);
  *v119 = *(_OWORD *)v120;
  v119[1] = v121;
  return a1;
}

uint64_t sub_21420E2F8()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21420E304(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  int v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((_DWORD)a2 == 2147483646)
  {
    v4 = *(_QWORD *)(a1 + 72);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    v5 = v4 - 1;
    if (v5 < 0)
      v5 = -1;
    return (v5 + 1);
  }
  else
  {
    v9 = sub_2141D8BF8(&qword_253F134C8);
    v10 = *(_QWORD *)(v9 - 8);
    if (*(_DWORD *)(v10 + 84) == (_DWORD)a2)
    {
      v11 = v9;
      v12 = *(int *)(a3 + 44);
    }
    else
    {
      v11 = sub_2141D8BF8(&qword_253F15C88);
      v10 = *(_QWORD *)(v11 - 8);
      v12 = *(int *)(a3 + 56);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1 + v12, a2, v11);
  }
}

uint64_t sub_21420E3B8()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_21420E3C4(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 2147483646)
  {
    *(_QWORD *)(result + 72) = a2;
  }
  else
  {
    v8 = sub_2141D8BF8(&qword_253F134C8);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 44);
    }
    else
    {
      v10 = sub_2141D8BF8(&qword_253F15C88);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 56);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

void sub_21420E468()
{
  unint64_t v0;
  unint64_t v1;

  sub_21420E5A4(319, &qword_253F15B90, (void (*)(uint64_t))MEMORY[0x24BDEEB88]);
  if (v0 <= 0x3F)
  {
    sub_21420E5A4(319, (unint64_t *)&qword_253F15C90, (void (*)(uint64_t))MEMORY[0x24BDF5118]);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

void sub_21420E5A4(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    v4 = sub_214425388();
    if (!v5)
      atomic_store(v4, a2);
  }
}

unint64_t sub_21420E5F4()
{
  unint64_t result;

  result = qword_254D695A8;
  if (!qword_254D695A8)
  {
    result = MEMORY[0x2199CD934](&unk_214428180, &type metadata for _ChartContentRenderInputs.Target);
    atomic_store(result, (unint64_t *)&qword_254D695A8);
  }
  return result;
}

unint64_t sub_21420E63C()
{
  unint64_t result;

  result = qword_253F14B60;
  if (!qword_253F14B60)
  {
    result = MEMORY[0x2199CD934](&unk_214428248, &type metadata for EncodableProperty);
    atomic_store(result, (unint64_t *)&qword_253F14B60);
  }
  return result;
}

void sub_21420E680()
{
  qword_253F1C990 = MEMORY[0x24BEE4B00];
}

uint64_t sub_21420E694(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  char v23;
  char v24;
  char v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  v3 = 0;
  v18 = a1;
  v19 = a2;
  while (1)
  {
    v20 = v3;
    v21 = v2;
    v4 = *(_QWORD *)(a1 + v3 + 72);
    v31 = *(uint64_t *)(a1 + v3 + 80);
    v5 = *(unsigned __int8 *)(a1 + v3 + 88);
    v23 = *(_BYTE *)(a1 + v3 + 88);
    v24 = *(_BYTE *)(a1 + v3 + 56);
    v29 = *(unsigned __int8 *)(a1 + v3 + 32);
    v6 = *(_QWORD *)(a2 + v3 + 40);
    v7 = *(_QWORD *)(a2 + v3 + 48);
    v8 = *(_BYTE *)(a2 + v3 + 56);
    v32 = *(uint64_t *)(a2 + v3 + 72);
    v30 = *(uint64_t *)(a2 + v3 + 80);
    v27 = *(char *)(a2 + v3 + 88);
    v28 = *(unsigned __int8 *)(a2 + v3 + 32);
    v9 = *(_QWORD *)(a1 + v3 + 40);
    v10 = *(_QWORD *)(a1 + v3 + 48);
    sub_2141DD130(v9, v10, v24);
    swift_bridgeObjectRetain();
    v22 = *(double *)&v4;
    sub_2141DD140(v4, v31, v5);
    sub_2141DD130(v6, v7, v8);
    swift_bridgeObjectRetain();
    v11 = v27;
    sub_2141DD140(v32, v30, v27);
    v26 = v7;
    v25 = v8;
    if (v29 != v28)
    {
      v16 = *(_QWORD *)&v22;
      v12 = v9;
      v13 = v10;
      v15 = v5;
      v14 = v24;
      goto LABEL_39;
    }
    v12 = v9;
    v13 = v10;
    v14 = v24;
    if ((sub_2144247F4() & 1) == 0)
    {
      v16 = *(_QWORD *)&v22;
      v15 = v5;
      goto LABEL_39;
    }
    v15 = v5;
    if ((char)v5 < 0)
    {
      v16 = *(_QWORD *)&v22;
      if ((v27 & 0x80000000) == 0)
        goto LABEL_39;
      if ((v23 & 1) != 0)
      {
        if ((v27 & 1) == 0)
          goto LABEL_39;
      }
      else if ((v27 & 1) != 0)
      {
        goto LABEL_39;
      }
      if (v22 != *(double *)&v32 || *(double *)&v31 != *(double *)&v30)
        goto LABEL_39;
      goto LABEL_6;
    }
    if (v27 < 0)
      goto LABEL_38;
    if (!v5)
      break;
    if (v5 == 1)
    {
      v16 = *(_QWORD *)&v22;
      if (v27 != 1 || v22 != *(double *)&v32)
      {
        v15 = 1;
        goto LABEL_39;
      }
    }
    else
    {
      v16 = *(_QWORD *)&v22;
      if (v27 != 2)
      {
        v15 = 2;
        goto LABEL_39;
      }
      if ((*(_QWORD *)&v22 != v32 || v31 != v30) && (sub_214425790() & 1) == 0)
      {
        v15 = 2;
        v11 = 2;
        goto LABEL_39;
      }
    }
LABEL_6:
    sub_2141ED0BC(v6, v26, v25);
    swift_bridgeObjectRelease();
    sub_2141EF1B0(v32, v30, v27);
    sub_2141ED0BC(v12, v13, v24);
    swift_bridgeObjectRelease();
    sub_2141EF1B0(v16, v31, v23);
    v3 = v20 + 80;
    v2 = v21 - 1;
    a1 = v18;
    a2 = v19;
    if (v21 == 1)
      return 1;
  }
  if (!v27)
  {
    v16 = *(_QWORD *)&v22;
    if (v22 != *(double *)&v32)
    {
      v15 = 0;
      goto LABEL_39;
    }
    goto LABEL_6;
  }
  v15 = 0;
LABEL_38:
  v16 = *(_QWORD *)&v22;
LABEL_39:
  sub_2141ED0BC(v6, v26, v25);
  swift_bridgeObjectRelease();
  sub_2141EF1B0(v32, v30, v11);
  sub_2141ED0BC(v12, v13, v14);
  swift_bridgeObjectRelease();
  sub_2141EF1B0(v16, v31, v15);
  return 0;
}

uint64_t sub_21420E9D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  void (*v13)(char *, unint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  void (*v18)(char *, uint64_t);
  BOOL v20;
  uint64_t v22;
  uint64_t v23;

  v4 = sub_214423B70();
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v10 = (char *)&v22 - v9;
  v11 = *(_QWORD *)(a1 + 16);
  if (v11 == *(_QWORD *)(a2 + 16))
  {
    if (!v11 || a1 == a2)
    {
      v17 = 1;
    }
    else
    {
      v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
      v22 = *(_QWORD *)(v8 + 72);
      v23 = v8;
      v13 = *(void (**)(char *, unint64_t, uint64_t))(v8 + 16);
      v14 = v11 - 1;
      do
      {
        v15 = a1;
        v13(v10, a1 + v12, v4);
        v16 = a2;
        v13(v7, a2 + v12, v4);
        sub_21421CEE8(&qword_254D695E8, MEMORY[0x24BDCE958]);
        v17 = sub_214424ED8();
        v18 = *(void (**)(char *, uint64_t))(v23 + 8);
        v18(v7, v4);
        v18(v10, v4);
        v20 = v14-- != 0;
        if ((v17 & 1) == 0)
          break;
        v12 += v22;
        a2 = v16;
        a1 = v15;
      }
      while (v20);
    }
  }
  else
  {
    v17 = 0;
  }
  return v17 & 1;
}

uint64_t sub_21420EB54(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  char v6;
  char v7;
  char v8;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2 && a1 != a2)
  {
    v3 = 0;
    do
    {
      if ((*(_BYTE *)(a1 + v3 + 40) & 1) != 0)
      {
        if (!*(_BYTE *)(a2 + v3 + 40))
          return 0;
      }
      else
      {
        if (*(_QWORD *)(a1 + v3 + 32) == *(_QWORD *)(a2 + v3 + 32))
          v5 = *(_BYTE *)(a2 + v3 + 40);
        else
          v5 = 1;
        if ((v5 & 1) != 0)
          return 0;
      }
      if ((*(_BYTE *)(a1 + v3 + 56) & 1) != 0)
      {
        if (!*(_BYTE *)(a2 + v3 + 56))
          return 0;
      }
      else
      {
        if (*(_QWORD *)(a1 + v3 + 48) == *(_QWORD *)(a2 + v3 + 48))
          v6 = *(_BYTE *)(a2 + v3 + 56);
        else
          v6 = 1;
        if ((v6 & 1) != 0)
          return 0;
      }
      if ((*(_BYTE *)(a1 + v3 + 72) & 1) != 0)
      {
        if (!*(_BYTE *)(a2 + v3 + 72))
          return 0;
      }
      else
      {
        if (*(_QWORD *)(a1 + v3 + 64) == *(_QWORD *)(a2 + v3 + 64))
          v7 = *(_BYTE *)(a2 + v3 + 72);
        else
          v7 = 1;
        if ((v7 & 1) != 0)
          return 0;
      }
      if ((*(_BYTE *)(a1 + v3 + 88) & 1) != 0)
      {
        if (!*(_BYTE *)(a2 + v3 + 88))
          return 0;
      }
      else
      {
        if (*(_QWORD *)(a1 + v3 + 80) == *(_QWORD *)(a2 + v3 + 80))
          v8 = *(_BYTE *)(a2 + v3 + 88);
        else
          v8 = 1;
        if ((v8 & 1) != 0)
          return 0;
      }
      if ((*(_BYTE *)(a1 + v3 + 104) & 1) != 0)
      {
        if (!*(_BYTE *)(a2 + v3 + 104))
          return 0;
      }
      else
      {
        if (*(_QWORD *)(a1 + v3 + 96) == *(_QWORD *)(a2 + v3 + 96))
          v4 = *(_BYTE *)(a2 + v3 + 104);
        else
          v4 = 1;
        if ((v4 & 1) != 0)
          return 0;
      }
      v3 += 80;
      --v2;
    }
    while (v2);
  }
  return 1;
}

uint64_t sub_21420EC78(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  char v10;
  uint64_t v11;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2 && a1 != a2)
  {
    v3 = 0;
    do
    {
      v5 = *(unsigned __int8 *)(a1 + v3 + 32);
      v6 = *(_QWORD *)(a1 + v3 + 72);
      v7 = *(unsigned __int8 *)(a2 + v3 + 32);
      v8 = *(_QWORD *)(a2 + v3 + 72);
      if (v5 == 9)
      {
        if (v7 != 9)
          return 0;
      }
      else if (v7 == 9 || v5 != v7)
      {
        return 0;
      }
      if ((*(_BYTE *)(a1 + v3 + 48) & 1) != 0)
      {
        if (!*(_BYTE *)(a2 + v3 + 48))
          return 0;
      }
      else
      {
        if (*(_QWORD *)(a1 + v3 + 40) == *(_QWORD *)(a2 + v3 + 40))
          v10 = *(_BYTE *)(a2 + v3 + 48);
        else
          v10 = 1;
        if ((v10 & 1) != 0)
          return 0;
      }
      if ((*(_BYTE *)(a1 + v3 + 64) & 1) != 0)
      {
        if (v6 == v8)
          v4 = *(_BYTE *)(a2 + v3 + 64);
        else
          v4 = 0;
        if ((v4 & 1) == 0)
          return 0;
      }
      else
      {
        v11 = 0;
        if ((*(_BYTE *)(a2 + v3 + 64) & 1) != 0 || *(_QWORD *)(a1 + v3 + 56) != *(_QWORD *)(a2 + v3 + 56) || v6 != v8)
          return v11;
      }
      v3 += 48;
      --v2;
    }
    while (v2);
  }
  return 1;
}

BOOL sub_21420ED58(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double *v3;
  double *v4;
  uint64_t v5;
  _BOOL8 result;
  double v7;
  double v8;
  double v9;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  if (*(double *)(a1 + 32) != *(double *)(a2 + 32))
    return 0;
  v3 = (double *)(a1 + 40);
  v4 = (double *)(a2 + 40);
  v5 = v2 - 1;
  do
  {
    result = v5 == 0;
    if (!v5)
      break;
    v7 = *v3++;
    v8 = v7;
    v9 = *v4++;
    --v5;
  }
  while (v8 == v9);
  return result;
}

uint64_t sub_21420EDC4(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  BOOL v5;
  char v6;
  uint64_t result;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *i;
  BOOL v11;

  v2 = a1[2];
  if (v2 != a2[2])
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  v5 = a1[4] == a2[4] && a1[5] == a2[5];
  if (v5 || (v6 = sub_214425790(), result = 0, (v6 & 1) != 0))
  {
    v8 = v2 - 1;
    if (!v8)
      return 1;
    v9 = a2 + 7;
    for (i = a1 + 7; ; i += 2)
    {
      v11 = *(i - 1) == *(v9 - 1) && *i == *v9;
      if (!v11 && (sub_214425790() & 1) == 0)
        break;
      v9 += 2;
      if (!--v8)
        return 1;
    }
    return 0;
  }
  return result;
}

BOOL sub_21420EE88(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  BOOL v17;
  uint64_t v19;

  v4 = type metadata accessor for AxisMarksConfiguration();
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (unsigned __int8 *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v10 = (unsigned __int8 *)&v19 - v9;
  v11 = *(_QWORD *)(a1 + 16);
  if (v11 == *(_QWORD *)(a2 + 16))
  {
    if (!v11 || a1 == a2)
    {
      return 1;
    }
    else
    {
      v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
      v13 = *(_QWORD *)(v8 + 72);
      v14 = v11 - 1;
      do
      {
        sub_2141FDEA0(a1 + v12, (uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for AxisMarksConfiguration);
        sub_2141FDEA0(a2 + v12, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for AxisMarksConfiguration);
        v15 = sub_2141E0168(v10, v7);
        sub_2141DD370((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for AxisMarksConfiguration);
        sub_2141DD370((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for AxisMarksConfiguration);
        v17 = v14-- != 0;
        if (!v15)
          break;
        v12 += v13;
      }
      while (v17);
    }
  }
  else
  {
    return 0;
  }
  return v15;
}

uint64_t sub_21420EFC4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  BOOL v8;
  _BYTE v10[88];
  _BYTE v11[88];

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 == *(_QWORD *)(a2 + 16))
  {
    if (!v2 || a1 == a2)
    {
      v6 = 1;
    }
    else
    {
      v3 = a1 + 32;
      v4 = a2 + 32;
      v5 = v2 - 1;
      do
      {
        sub_2141E07D0(v3, (uint64_t)v11);
        sub_2141E07D0(v4, (uint64_t)v10);
        v6 = sub_2141DFE48((uint64_t)v11, (uint64_t)v10);
        sub_21421C168((uint64_t)v10);
        sub_21421C168((uint64_t)v11);
        v8 = v5-- != 0;
        if ((v6 & 1) == 0)
          break;
        v4 += 88;
        v3 += 88;
      }
      while (v8);
    }
  }
  else
  {
    v6 = 0;
  }
  return v6 & 1;
}

uint64_t sub_21420F078(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  char v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD v9[2];
  uint64_t v10;
  _QWORD v11[6];
  _BYTE v12[48];
  _OWORD v13[2];
  uint64_t v14;
  char v15;
  _BYTE v16[48];
  _BYTE v17[48];

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  v3 = a1 + 32;
  for (i = a2 + 32; ; i += 48)
  {
    sub_214219DE0(v3, (uint64_t)v17);
    sub_214219DE0(i, (uint64_t)v16);
    sub_214219DE0((uint64_t)v17, (uint64_t)v12);
    sub_214219DE0((uint64_t)v16, (uint64_t)v13);
    if ((v12[40] & 1) != 0)
      break;
    sub_214219DE0((uint64_t)v12, (uint64_t)v11);
    if ((v15 & 1) != 0)
      goto LABEL_15;
    v6 = v11[0];
    v7 = *(_QWORD *)&v13[0];
    sub_214219E50((uint64_t)v12);
    if (v6 != v7)
      goto LABEL_16;
LABEL_5:
    sub_214219E50((uint64_t)v16);
    sub_214219E50((uint64_t)v17);
    v3 += 48;
    if (!--v2)
      return 1;
  }
  sub_214219DE0((uint64_t)v12, (uint64_t)v11);
  if ((v15 & 1) != 0)
  {
    v9[0] = v13[0];
    v9[1] = v13[1];
    v10 = v14;
    v5 = MEMORY[0x2199CCD7C](v11, v9);
    sub_214219E1C((uint64_t)v9);
    sub_214219E1C((uint64_t)v11);
    sub_214219E50((uint64_t)v12);
    if ((v5 & 1) == 0)
      goto LABEL_16;
    goto LABEL_5;
  }
  sub_214219E1C((uint64_t)v11);
LABEL_15:
  sub_2141E0750((uint64_t)v12, &qword_254D695B8);
LABEL_16:
  sub_214219E50((uint64_t)v16);
  sub_214219E50((uint64_t)v17);
  return 0;
}

uint64_t sub_21420F1F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v5;
  __int128 v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL8 v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  char v15;
  _OWORD v17[2];
  uint64_t v18;
  _OWORD v19[2];
  uint64_t v20;
  _OWORD v21[2];
  uint64_t v22;
  _OWORD v23[2];
  uint64_t v24;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  v5 = *(_OWORD *)(a1 + 48);
  v21[0] = *(_OWORD *)(a1 + 32);
  v21[1] = v5;
  v22 = *(_QWORD *)(a1 + 64);
  v6 = *(_OWORD *)(a2 + 48);
  v23[0] = *(_OWORD *)(a2 + 32);
  v23[1] = v6;
  v24 = *(_QWORD *)(a2 + 64);
  sub_2141F963C((uint64_t)v21);
  sub_2141F963C((uint64_t)v23);
  v7 = MEMORY[0x2199CB690](v21, v23);
  sub_21421C140((uint64_t)v23);
  sub_21421C140((uint64_t)v21);
  if ((v7 & 1) == 0)
    return 0;
  v8 = a1 + 72;
  v9 = a2 + 72;
  do
  {
    v10 = --v2 == 0;
    if (!v2)
      break;
    v11 = v8 + 40;
    v12 = v9 + 40;
    v13 = *(_OWORD *)(v8 + 16);
    v17[0] = *(_OWORD *)v8;
    v17[1] = v13;
    v18 = *(_QWORD *)(v8 + 32);
    v14 = *(_OWORD *)(v9 + 16);
    v19[0] = *(_OWORD *)v9;
    v19[1] = v14;
    v20 = *(_QWORD *)(v9 + 32);
    sub_2141F963C((uint64_t)v17);
    sub_2141F963C((uint64_t)v19);
    v15 = MEMORY[0x2199CB690](v17, v19);
    sub_21421C140((uint64_t)v19);
    sub_21421C140((uint64_t)v17);
    v9 = v12;
    v8 = v11;
  }
  while ((v15 & 1) != 0);
  return v10;
}

uint64_t sub_21420F32C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  BOOL v13;
  double *v14;
  double *v15;
  uint64_t j;
  double v17;
  double v18;
  double v19;
  uint64_t v20;
  BOOL v21;
  double *v22;
  double *v23;
  uint64_t i;
  double v25;
  double v26;
  double v27;
  uint64_t v28;
  BOOL v30;
  BOOL v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  BOOL v35;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  v3 = 0;
  v4 = a1 + 32;
  v5 = a2 + 32;
  while (1)
  {
    v6 = (uint64_t *)(v4 + 16 * v3);
    v7 = *v6;
    v8 = *((unsigned __int8 *)v6 + 8);
    v9 = (uint64_t *)(v5 + 16 * v3);
    v10 = *v9;
    v11 = *((unsigned __int8 *)v9 + 8);
    if (!v8)
    {
      if (v11)
        return 0;
      v20 = *(_QWORD *)(v7 + 16);
      if (v20 != *(_QWORD *)(v10 + 16))
        return 0;
      if (v20)
        v21 = v7 == v10;
      else
        v21 = 1;
      if (!v21)
      {
        if (*(double *)(v7 + 32) != *(double *)(v10 + 32))
          return 0;
        if (v20 != 1)
        {
          if (*(double *)(v7 + 40) != *(double *)(v10 + 40))
            return 0;
          v22 = (double *)(v7 + 48);
          v23 = (double *)(v10 + 48);
          for (i = v20 - 2; i; --i)
          {
            v25 = *v22++;
            v26 = v25;
            v27 = *v23++;
            if (v26 != v27)
              return 0;
          }
        }
      }
      goto LABEL_5;
    }
    if (v8 == 1)
    {
      if (v11 != 1)
        return 0;
      v12 = *(_QWORD *)(v7 + 16);
      if (v12 != *(_QWORD *)(v10 + 16))
        return 0;
      if (v12)
        v13 = v7 == v10;
      else
        v13 = 1;
      if (!v13)
      {
        if (*(double *)(v7 + 32) != *(double *)(v10 + 32))
          return 0;
        if (v12 != 1)
        {
          if (*(double *)(v7 + 40) != *(double *)(v10 + 40))
            return 0;
          v14 = (double *)(v7 + 48);
          v15 = (double *)(v10 + 48);
          for (j = v12 - 2; j; --j)
          {
            v17 = *v14++;
            v18 = v17;
            v19 = *v15++;
            if (v18 != v19)
              return 0;
          }
        }
      }
      goto LABEL_5;
    }
    if (v11 != 2)
      return 0;
    v28 = *(_QWORD *)(v7 + 16);
    if (v28 != *(_QWORD *)(v10 + 16))
      return 0;
    if (v28 && v7 != v10)
    {
      v30 = *(_QWORD *)(v7 + 32) == *(_QWORD *)(v10 + 32) && *(_QWORD *)(v7 + 40) == *(_QWORD *)(v10 + 40);
      if (!v30 && (sub_214425790() & 1) == 0)
        return 0;
      if (v28 != 1)
      {
        v31 = *(_QWORD *)(v7 + 48) == *(_QWORD *)(v10 + 48) && *(_QWORD *)(v7 + 56) == *(_QWORD *)(v10 + 56);
        if (!v31 && (sub_214425790() & 1) == 0)
          return 0;
        v32 = v28 - 2;
        if (v32)
          break;
      }
    }
LABEL_5:
    if (++v3 == v2)
      return 1;
  }
  v33 = (_QWORD *)(v10 + 72);
  v34 = (_QWORD *)(v7 + 72);
  while (1)
  {
    v35 = *(v34 - 1) == *(v33 - 1) && *v34 == *v33;
    if (!v35 && (sub_214425790() & 1) == 0)
      return 0;
    v33 += 2;
    v34 += 2;
    if (!--v32)
      goto LABEL_5;
  }
}

uint64_t sub_21420F564(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;

  v3 = *(_QWORD *)(a2 + 16);
  result = sub_214425880();
  if (v3)
  {
    v5 = a2 + 48;
    do
    {
      v10 = *(_QWORD *)(v5 - 8);
      v9 = *(_QWORD *)v5;
      v11 = *(_BYTE *)(v5 + 8);
      v12 = *(_QWORD *)(v5 + 24);
      v13 = *(_QWORD *)(v5 + 32);
      v14 = *(char *)(v5 + 40);
      v15 = *(unsigned __int8 *)(v5 + 40);
      sub_214425880();
      if (v14 < 0)
      {
        sub_214425880();
        sub_214425880();
        sub_214425898();
        sub_214425898();
        sub_2141DD130(v10, v9, v11);
        swift_bridgeObjectRetain();
        sub_2141DD140(v12, v13, v15);
      }
      else
      {
        sub_214425880();
        if (v15)
        {
          sub_214425880();
          if (v15 == 1)
          {
            sub_214425898();
            sub_2141DD130(v10, v9, v11);
            swift_bridgeObjectRetain();
            sub_2141DD140(v12, v13, 1);
            v6 = v12;
            v7 = v13;
            v8 = 1;
          }
          else
          {
            sub_2141DD130(v10, v9, v11);
            swift_bridgeObjectRetain();
            sub_2141DD140(v12, v13, 2);
            sub_2141DD130(v10, v9, v11);
            swift_bridgeObjectRetain();
            sub_2141DD140(v12, v13, 2);
            sub_214424F14();
            sub_2141ED0BC(v10, v9, v11);
            swift_bridgeObjectRelease();
            v6 = v12;
            v7 = v13;
            v8 = 2;
          }
        }
        else
        {
          sub_214425880();
          sub_214425898();
          sub_2141DD130(v10, v9, v11);
          swift_bridgeObjectRetain();
          sub_2141DD140(v12, v13, 0);
          v6 = v12;
          v7 = v13;
          v8 = 0;
        }
        sub_2141EF1B0(v6, v7, v8);
      }
      sub_2141ED0BC(v10, v9, v11);
      swift_bridgeObjectRelease();
      result = sub_2141EF1B0(v12, v13, v15);
      v5 += 80;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t sub_21420F7E4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  int v6;
  int v7;

  v3 = *(_QWORD *)(a2 + 16);
  result = sub_214425880();
  if (v3)
  {
    v5 = a2 + 72;
    do
    {
      v6 = *(unsigned __int8 *)(v5 - 24);
      v7 = *(unsigned __int8 *)(v5 - 8);
      if (*(_BYTE *)(v5 - 40) == 9)
      {
        sub_21442588C();
        if (!v6)
          goto LABEL_7;
      }
      else
      {
        sub_21442588C();
        sub_214425880();
        if (!v6)
        {
LABEL_7:
          sub_21442588C();
          sub_214425880();
          if (v7)
            goto LABEL_11;
          goto LABEL_3;
        }
      }
      sub_21442588C();
      if (v7)
      {
LABEL_11:
        sub_21442588C();
        goto LABEL_4;
      }
LABEL_3:
      sub_21442588C();
      sub_214425880();
LABEL_4:
      v5 += 48;
      result = sub_214425880();
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t sub_21420F8D0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  unsigned __int8 *v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;

  v3 = *(_QWORD *)(a2 + 16);
  result = sub_214425880();
  if (v3)
  {
    v5 = (unsigned __int8 *)(a2 + 56);
    do
    {
      v6 = *v5;
      v7 = v5[16];
      v8 = v5[32];
      v9 = v5[48];
      if (*(v5 - 16) == 1)
      {
        sub_21442588C();
        if (!v6)
          goto LABEL_7;
      }
      else
      {
        v10 = v5[32];
        v11 = v5[48];
        sub_21442588C();
        v9 = v11;
        v8 = v10;
        sub_214425880();
        if (!v6)
        {
LABEL_7:
          sub_21442588C();
          sub_214425880();
          if (!v7)
            goto LABEL_8;
          goto LABEL_13;
        }
      }
      sub_21442588C();
      if (!v7)
      {
LABEL_8:
        sub_21442588C();
        sub_214425880();
        if (!v8)
          goto LABEL_9;
        goto LABEL_14;
      }
LABEL_13:
      sub_21442588C();
      if (!v8)
      {
LABEL_9:
        sub_21442588C();
        sub_214425880();
        if (v9)
          goto LABEL_15;
        goto LABEL_3;
      }
LABEL_14:
      sub_21442588C();
      if (v9)
      {
LABEL_15:
        result = sub_21442588C();
        goto LABEL_4;
      }
LABEL_3:
      sub_21442588C();
      result = sub_214425880();
LABEL_4:
      v5 += 80;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t sub_21420FA40(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  _OWORD v6[2];
  uint64_t v7;
  _OWORD v8[2];
  uint64_t v9;
  char v10;
  _BYTE v11[48];

  v3 = *(_QWORD *)(a2 + 16);
  result = sub_214425880();
  if (v3)
  {
    v5 = a2 + 32;
    do
    {
      sub_214219DE0(v5, (uint64_t)v11);
      sub_214219DE0((uint64_t)v11, (uint64_t)v8);
      if ((v10 & 1) != 0)
      {
        v6[0] = v8[0];
        v6[1] = v8[1];
        v7 = v9;
        sub_214425880();
        sub_21442546C();
        sub_214219E1C((uint64_t)v6);
      }
      else
      {
        sub_214425880();
        sub_214425880();
      }
      result = sub_214219E50((uint64_t)v11);
      v5 += 48;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t sub_21420FB14(uint64_t *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v16;
  _QWORD v17[9];

  v5 = *v2;
  sub_214425874();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_21420FA40((uint64_t)v17, a2);
  swift_bridgeObjectRelease();
  v6 = sub_2144258B0();
  v7 = -1 << *(_BYTE *)(v5 + 32);
  v8 = v6 & ~v7;
  if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
  {
    v9 = swift_bridgeObjectRetain();
    v10 = sub_21420F078(v9, a2);
    swift_bridgeObjectRelease();
    if ((v10 & 1) != 0)
    {
LABEL_6:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *a1 = *(_QWORD *)(*(_QWORD *)(*v2 + 48) + 8 * v8);
      swift_bridgeObjectRetain();
      return 0;
    }
    v11 = ~v7;
    while (1)
    {
      v8 = (v8 + 1) & v11;
      if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
        break;
      v12 = swift_bridgeObjectRetain();
      v13 = sub_21420F078(v12, a2);
      swift_bridgeObjectRelease();
      if ((v13 & 1) != 0)
        goto LABEL_6;
    }
  }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v17[0] = *v2;
  *v2 = 0x8000000000000000;
  v16 = swift_bridgeObjectRetain();
  sub_2142146AC(v16, v8, isUniquelyReferenced_nonNull_native);
  *v2 = v17[0];
  swift_bridgeObjectRelease();
  *a1 = a2;
  return 1;
}

uint64_t sub_21420FCB4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  BOOL v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v17;
  _QWORD *v18;
  BOOL v19;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;

  v7 = *v3;
  sub_214425874();
  swift_bridgeObjectRetain();
  sub_214424F14();
  v8 = sub_2144258B0();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = *(_QWORD *)(v7 + 48);
    v12 = (_QWORD *)(v11 + 16 * v10);
    v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (sub_214425790() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v14 = (uint64_t *)(*(_QWORD *)(*v3 + 48) + 16 * v10);
      v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    v17 = ~v9;
    while (1)
    {
      v10 = (v10 + 1) & v17;
      if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        break;
      v18 = (_QWORD *)(v11 + 16 * v10);
      v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (sub_214425790() & 1) != 0)
        goto LABEL_7;
    }
  }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v21 = *v3;
  *v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  sub_214214844(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_21420FE60(uint64_t *a1, uint64_t a2)
{
  return sub_21420FFA4(a1, a2, &qword_253F13558);
}

uint64_t sub_21420FE74(_BYTE *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v13;

  v5 = *v2;
  sub_214425874();
  sub_214425880();
  v6 = sub_2144258B0();
  v7 = -1 << *(_BYTE *)(v5 + 32);
  v8 = v6 & ~v7;
  if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v13 = *v2;
    *v2 = 0x8000000000000000;
    sub_2142149DC(a2, v8, isUniquelyReferenced_nonNull_native);
    *v2 = v13;
    swift_bridgeObjectRelease();
    result = 1;
    goto LABEL_8;
  }
  v9 = *(_QWORD *)(v5 + 48);
  if (*(unsigned __int8 *)(v9 + v8) != a2)
  {
    v10 = ~v7;
    do
    {
      v8 = (v8 + 1) & v10;
      if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
        goto LABEL_7;
    }
    while (*(unsigned __int8 *)(v9 + v8) != a2);
  }
  result = 0;
  LOBYTE(a2) = *(_BYTE *)(*(_QWORD *)(*v2 + 48) + v8);
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t sub_21420FF90(uint64_t *a1, uint64_t a2)
{
  return sub_21420FFA4(a1, a2, &qword_253F105D0);
}

uint64_t sub_21420FFA4(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v16;

  v5 = v3;
  v8 = *v3;
  v9 = sub_214425868();
  v10 = -1 << *(_BYTE *)(v8 + 32);
  v11 = v9 & ~v10;
  if (((*(_QWORD *)(v8 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) == 0)
  {
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v16 = *v5;
    *v5 = 0x8000000000000000;
    sub_214214B28(a2, v11, isUniquelyReferenced_nonNull_native, a3);
    *v5 = v16;
    swift_bridgeObjectRelease();
    result = 1;
    goto LABEL_8;
  }
  v12 = *(_QWORD *)(v8 + 48);
  if (*(_QWORD *)(v12 + 8 * v11) != a2)
  {
    v13 = ~v10;
    do
    {
      v11 = (v11 + 1) & v13;
      if (((*(_QWORD *)(v8 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) == 0)
        goto LABEL_7;
    }
    while (*(_QWORD *)(v12 + 8 * v11) != a2);
  }
  result = 0;
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t sub_2142100B4(_QWORD *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v34;
  uint64_t result;
  char v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned __int8 *v46;
  int v47;
  unsigned __int8 *v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  char v56;
  uint64_t v57;
  unsigned __int8 *v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  unsigned __int8 *v63;
  uint64_t v64;
  uint64_t v65;
  double v66;
  double v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  char v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  char v81;
  _QWORD *v82;
  _QWORD *v83;
  _QWORD *v84;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  char v91;
  char v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  uint64_t v98;
  char v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  char v109;
  int v110;
  uint64_t v111;
  char v112;
  uint64_t v113;
  int v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  int v136;
  char v137;
  _BYTE v138[152];
  _QWORD v139[19];
  _QWORD v140[19];
  _QWORD v141[20];

  v4 = *v2;
  sub_214425874();
  v87 = *(_QWORD *)(a2 + 16);
  sub_214425880();
  v93 = a2;
  v88 = v4;
  v135 = *(_QWORD *)(a2 + 16);
  if (v135)
  {
    v5 = a2 + 32;
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_2141EF6B8(v5, (uint64_t)v140);
      sub_2141EF6B8((uint64_t)v140, (uint64_t)v141);
      v9 = sub_21421C2FC((uint64_t)v141);
      v10 = sub_21421C308((uint64_t)v141);
      if (v9 != 1)
      {
        v18 = *(_QWORD *)(v10 + 8);
        v19 = *(_QWORD *)(v10 + 16);
        v20 = *(_BYTE *)(v10 + 24);
        v21 = *(_QWORD *)(v10 + 40);
        v22 = *(_QWORD *)(v10 + 48);
        v23 = *(char *)(v10 + 56);
        v24 = *(unsigned __int8 *)(v10 + 56);
        sub_214425880();
        sub_214425880();
        if (v23 < 0)
        {
          sub_214425880();
          sub_214425880();
          sub_214425898();
          sub_214425898();
          sub_21421C318(v140, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21420B7DC);
          sub_2141DD130(v18, v19, v20);
LABEL_21:
          swift_bridgeObjectRetain();
        }
        else
        {
          sub_214425880();
          if (v24 <= 1)
          {
            sub_214425880();
            sub_214425898();
            sub_21421C318(v140, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21420B7DC);
            sub_2141DD130(v18, v19, v20);
            goto LABEL_21;
          }
          sub_214425880();
          sub_21421C318(v140, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21420B7DC);
          sub_2141DD130(v18, v19, v20);
          swift_bridgeObjectRetain();
          sub_2141DD140(v21, v22, 2);
          sub_214424F14();
        }
        sub_214425880();
        sub_2141ED0BC(v18, v19, v20);
        swift_bridgeObjectRelease();
        v6 = v21;
        v7 = v22;
        v8 = v24;
        goto LABEL_5;
      }
      v113 = v5;
      v11 = *(_QWORD *)(v10 + 8);
      v12 = *(_BYTE *)(v10 + 24);
      v124 = *(_QWORD *)(v10 + 16);
      v126 = *(_QWORD *)(v10 + 40);
      v118 = *(_QWORD *)(v10 + 48);
      v13 = *(char *)(v10 + 56);
      v14 = *(unsigned __int8 *)(v10 + 56);
      v15 = *(_QWORD *)(v10 + 88);
      v16 = *(_BYTE *)(v10 + 96);
      v133 = *(_QWORD *)(v10 + 112);
      v129 = *(_QWORD *)(v10 + 80);
      v130 = *(_QWORD *)(v10 + 120);
      v17 = *(unsigned __int8 *)(v10 + 128);
      sub_214425880();
      sub_214425880();
      v120 = v12;
      if (v13 < 0)
      {
        sub_214425880();
        sub_214425880();
        sub_214425898();
        sub_214425898();
        sub_21421C318(v140, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21420B7DC);
        sub_2141DD130(v11, v124, v12);
        swift_bridgeObjectRetain();
        sub_2141DD130(v129, v15, v16);
        swift_bridgeObjectRetain();
        sub_2141DD140(v133, v130, v17);
        v5 = v113;
        if ((v17 & 0x80) == 0)
          goto LABEL_17;
      }
      else
      {
        sub_214425880();
        if (v14 > 1)
        {
          sub_214425880();
          sub_21421C318(v140, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21420B7DC);
          sub_2141DD130(v11, v124, v12);
          swift_bridgeObjectRetain();
          sub_2141DD130(v129, v15, v16);
          swift_bridgeObjectRetain();
          sub_2141DD140(v133, v130, v17);
          sub_2141DD140(v126, v118, 2);
          sub_214424F14();
          v5 = v113;
          if ((v17 & 0x80) == 0)
          {
LABEL_17:
            sub_214425880();
            sub_214425880();
            if (v17 > 1)
              sub_214424F14();
            else
              sub_214425898();
            goto LABEL_4;
          }
        }
        else
        {
          sub_214425880();
          sub_214425898();
          sub_21421C318(v140, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21420B7DC);
          sub_2141DD130(v11, v124, v12);
          swift_bridgeObjectRetain();
          sub_2141DD130(v129, v15, v16);
          swift_bridgeObjectRetain();
          sub_2141DD140(v133, v130, v17);
          v5 = v113;
          if ((v17 & 0x80) == 0)
            goto LABEL_17;
        }
      }
      sub_214425880();
      sub_214425880();
      sub_214425898();
      sub_214425898();
LABEL_4:
      sub_2141ED0BC(v11, v124, v120);
      swift_bridgeObjectRelease();
      sub_2141EF1B0(v126, v118, v14);
      sub_2141ED0BC(v129, v15, v16);
      swift_bridgeObjectRelease();
      v7 = v130;
      v6 = v133;
      v8 = v17;
LABEL_5:
      sub_2141EF1B0(v6, v7, v8);
      sub_21421C318(v140, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141EF5D4);
      v5 += 152;
      if (!--v135)
        goto LABEL_25;
    }
  }
  swift_bridgeObjectRetain();
LABEL_25:
  v25 = sub_2144258B0();
  v26 = v88;
  v27 = -1 << *(_BYTE *)(v88 + 32);
  v28 = v25 & ~v27;
  v29 = v88 + 56;
  if (((*(_QWORD *)(v88 + 56 + ((v28 >> 3) & 0xFFFFFFFFFFFFF8)) >> v28) & 1) != 0)
  {
    v30 = ~v27;
    v31 = v87;
    v32 = v93;
    v86 = ~v27;
    while (1)
    {
      v43 = *(_QWORD *)(*(_QWORD *)(v26 + 48) + 8 * v28);
      if (*(_QWORD *)(v43 + 16) == v31)
        break;
LABEL_33:
      v28 = (v28 + 1) & v30;
      if (((*(_QWORD *)(v29 + ((v28 >> 3) & 0xFFFFFFFFFFFFF8)) >> v28) & 1) == 0)
        goto LABEL_28;
    }
    if (!v31 || v43 == v32)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v82 = v84;
      v83 = a1;
LABEL_152:
      *v83 = *(_QWORD *)(*(_QWORD *)(*v82 + 48) + 8 * v28);
      swift_bridgeObjectRetain();
      return 0;
    }
    else
    {
      v89 = v28;
      swift_bridgeObjectRetain();
      result = sub_2141EF6B8(v43 + 32, (uint64_t)v139);
      if (*(_QWORD *)(v32 + 16))
      {
        v44 = 0;
        v45 = 184;
        v94 = v43;
        while (1)
        {
          sub_2141EF6B8(v32 + v45 - 152, (uint64_t)v140);
          sub_2141EF6B8((uint64_t)v139, (uint64_t)v141);
          v119 = v44;
          v121 = v45;
          if (sub_21421C2FC((uint64_t)v141) != 1)
            break;
          v46 = (unsigned __int8 *)sub_21421C308((uint64_t)v141);
          sub_2141EF6B8((uint64_t)v140, (uint64_t)v138);
          v47 = sub_21421C2FC((uint64_t)v138);
          v48 = (unsigned __int8 *)sub_21421C308((uint64_t)v138);
          if (v47 != 1 || *v46 != *v48)
            goto LABEL_136;
          v49 = *((_QWORD *)v46 + 2);
          v50 = v46[24];
          v51 = *((uint64_t *)v46 + 5);
          v52 = *((_QWORD *)v46 + 6);
          v53 = v46[56];
          v97 = v53;
          v54 = *((_QWORD *)v46 + 11);
          v42 = v46[96];
          v131 = *((_QWORD *)v46 + 10);
          v108 = *((uint64_t *)v46 + 14);
          v101 = *((_QWORD *)v46 + 15);
          v102 = *((_QWORD *)v46 + 1);
          v55 = v46[128];
          v109 = v55;
          v98 = *((_QWORD *)v48 + 1);
          v99 = v48[24];
          v100 = *((_QWORD *)v48 + 2);
          v111 = *((uint64_t *)v48 + 5);
          v116 = *((uint64_t *)v48 + 6);
          v136 = (char)v48[56];
          v122 = *((_QWORD *)v48 + 10);
          v125 = *((_QWORD *)v48 + 11);
          v127 = v48[96];
          v104 = *((uint64_t *)v48 + 15);
          v106 = *((uint64_t *)v48 + 14);
          v114 = (char)v48[128];
          sub_21421C318(v140, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21420B7DC);
          sub_21421C318(v139, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21420B7DC);
          sub_2141DD130(v102, v49, v50);
          swift_bridgeObjectRetain();
          v103 = v51;
          v95 = v52;
          sub_2141DD140(v51, v52, v53);
          v96 = v54;
          v92 = v42;
          sub_2141DD130(v131, v54, v42);
          swift_bridgeObjectRetain();
          sub_2141DD140(v108, v101, v55);
          sub_2141DD130(v98, v100, v99);
          swift_bridgeObjectRetain();
          sub_2141DD140(v111, v116, v136);
          sub_2141DD130(v122, v125, v127);
          swift_bridgeObjectRetain();
          sub_2141DD140(v106, v104, v114);
          v90 = v49;
          v91 = v50;
          if ((sub_2144247F4() & 1) == 0)
          {
            v36 = v53;
LABEL_124:
            v41 = v108;
            v38 = v111;
            v37 = v100;
            v39 = v99;
            v40 = v98;
LABEL_31:
            sub_2141ED0BC(v122, v125, v127);
            swift_bridgeObjectRelease();
            sub_2141EF1B0(v106, v104, v114);
            sub_2141ED0BC(v40, v37, v39);
            swift_bridgeObjectRelease();
            sub_2141EF1B0(v38, v116, v136);
            sub_2141ED0BC(v131, v96, v42);
            swift_bridgeObjectRelease();
            sub_2141EF1B0(v41, v101, v109);
            sub_2141ED0BC(v102, v90, v91);
            swift_bridgeObjectRelease();
            sub_2141EF1B0(v103, v95, v36);
            sub_21421C318(v140, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141EF5D4);
            sub_21421C318(v139, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141EF5D4);
            swift_bridgeObjectRelease();
            v32 = v93;
LABEL_32:
            v31 = v87;
            v26 = v88;
            v28 = v89;
            v30 = v86;
            v29 = v88 + 56;
            goto LABEL_33;
          }
          v36 = v53;
          if ((char)v53 < 0)
          {
            if ((v136 & 0x80000000) == 0)
              goto LABEL_124;
            v56 = v42;
            v57 = v111;
            if ((v53 & 1) != 0)
            {
              if ((v136 & 1) == 0)
                goto LABEL_30;
            }
            else if ((v136 & 1) != 0)
            {
              goto LABEL_30;
            }
            if (*(double *)&v51 != *(double *)&v111 || *(double *)&v95 != *(double *)&v116)
              goto LABEL_30;
          }
          else
          {
            if (v136 < 0)
              goto LABEL_124;
            v56 = v42;
            v57 = v111;
            if (v53)
            {
              if (v53 == 1)
              {
                if (v136 != 1)
                {
                  v36 = 1;
                  goto LABEL_30;
                }
                if (*(double *)&v51 != *(double *)&v111)
                {
                  v36 = 1;
                  LOBYTE(v136) = 1;
                  goto LABEL_30;
                }
              }
              else
              {
                if (v136 != 2)
                {
                  v36 = 2;
LABEL_30:
                  v37 = v100;
                  v38 = v57;
                  v39 = v99;
                  v40 = v98;
                  v41 = v108;
                  v42 = v56;
                  goto LABEL_31;
                }
                if (v51 != v111 || v95 != v116)
                {
                  v71 = sub_214425790();
                  v56 = v42;
                  if ((v71 & 1) == 0)
                  {
                    v36 = 2;
                    LOBYTE(v136) = 2;
                    goto LABEL_30;
                  }
                }
              }
            }
            else
            {
              if (v136)
              {
                v36 = 0;
                goto LABEL_30;
              }
              if (*(double *)&v51 != *(double *)&v111)
              {
                v36 = 0;
                LOBYTE(v136) = 0;
                goto LABEL_30;
              }
            }
          }
          v73 = v56;
          if ((sub_2144247F4() & 1) == 0)
            goto LABEL_139;
          if ((char)v55 < 0)
          {
            v72 = v94;
            if ((v114 & 0x80000000) == 0)
            {
LABEL_139:
              sub_2141ED0BC(v122, v125, v127);
              swift_bridgeObjectRelease();
              sub_2141EF1B0(v106, v104, v114);
              goto LABEL_132;
            }
            sub_2141ED0BC(v122, v125, v127);
            swift_bridgeObjectRelease();
            sub_2141ED0BC(v98, v100, v99);
            swift_bridgeObjectRelease();
            sub_2141EF1B0(v57, v116, v136);
            sub_2141ED0BC(v131, v54, v73);
            if ((v55 & 1) != 0)
            {
              v32 = v93;
              v44 = v119;
              v75 = v101;
              v74 = v108;
              if ((v114 & 1) == 0)
                goto LABEL_134;
            }
            else
            {
              v32 = v93;
              v44 = v119;
              v75 = v101;
              v74 = v108;
              if ((v114 & 1) != 0)
                goto LABEL_134;
            }
            if (*(double *)&v74 != *(double *)&v106 || *(double *)&v75 != *(double *)&v104)
              goto LABEL_134;
          }
          else
          {
            if (v114 < 0)
            {
              sub_2141ED0BC(v122, v125, v127);
              swift_bridgeObjectRelease();
LABEL_132:
              v75 = v101;
              goto LABEL_133;
            }
            if (v55)
            {
              if (v55 == 1)
              {
                v72 = v94;
                v44 = v119;
                if (v114 != 1)
                {
                  sub_2141ED0BC(v122, v125, v127);
                  swift_bridgeObjectRelease();
                  sub_2141EF1B0(v106, v104, v114);
                  v81 = 1;
                  goto LABEL_148;
                }
                v74 = v108;
                sub_2141ED0BC(v122, v125, v127);
                swift_bridgeObjectRelease();
                sub_2141EF1B0(v106, v104, 1);
                sub_2141ED0BC(v98, v100, v99);
                swift_bridgeObjectRelease();
                sub_2141EF1B0(v57, v116, v136);
                sub_2141ED0BC(v131, v96, v42);
                v32 = v93;
                v75 = v101;
                if (*(double *)&v108 != *(double *)&v106)
                {
                  v109 = 1;
                  goto LABEL_134;
                }
              }
              else
              {
                v72 = v94;
                v44 = v119;
                if (v114 != 2)
                {
                  sub_2141ED0BC(v122, v125, v127);
                  swift_bridgeObjectRelease();
                  sub_2141EF1B0(v106, v104, v114);
                  v81 = 2;
LABEL_148:
                  v109 = v81;
                  v75 = v101;
                  v73 = v42;
LABEL_133:
                  v74 = v108;
                  sub_2141ED0BC(v98, v100, v99);
                  swift_bridgeObjectRelease();
                  sub_2141EF1B0(v111, v116, v136);
                  sub_2141ED0BC(v131, v96, v73);
                  v32 = v93;
                  goto LABEL_134;
                }
                v75 = v101;
                if (v108 == v106 && v101 == v104)
                {
                  sub_2141ED0BC(v122, v125, v127);
                  swift_bridgeObjectRelease();
                  v74 = v108;
                  sub_2141EF1B0(v108, v101, 2);
                  sub_2141ED0BC(v98, v100, v99);
                  swift_bridgeObjectRelease();
                  sub_2141EF1B0(v111, v116, v136);
                  sub_2141ED0BC(v131, v96, v42);
                  v32 = v93;
                }
                else
                {
                  v74 = v108;
                  v77 = sub_214425790();
                  sub_2141ED0BC(v122, v125, v127);
                  swift_bridgeObjectRelease();
                  sub_2141EF1B0(v106, v104, 2);
                  sub_2141ED0BC(v98, v100, v99);
                  swift_bridgeObjectRelease();
                  sub_2141EF1B0(v111, v116, v136);
                  sub_2141ED0BC(v131, v96, v92);
                  v32 = v93;
                  if ((v77 & 1) == 0)
                  {
                    v109 = 2;
LABEL_134:
                    swift_bridgeObjectRelease();
                    sub_2141EF1B0(v74, v75, v109);
                    sub_2141ED0BC(v102, v90, v91);
                    swift_bridgeObjectRelease();
                    sub_2141EF1B0(v103, v95, v97);
LABEL_135:
                    sub_21421C318(v140, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141EF5D4);
                    sub_21421C318(v139, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141EF5D4);
LABEL_136:
                    swift_bridgeObjectRelease();
                    goto LABEL_32;
                  }
                }
              }
            }
            else
            {
              v72 = v94;
              if (v114)
              {
                sub_2141ED0BC(v122, v125, v127);
                swift_bridgeObjectRelease();
                sub_2141EF1B0(v106, v104, v114);
                v109 = 0;
                goto LABEL_132;
              }
              v74 = v108;
              sub_2141ED0BC(v122, v125, v127);
              swift_bridgeObjectRelease();
              sub_2141EF1B0(v106, v104, 0);
              sub_2141ED0BC(v98, v100, v99);
              swift_bridgeObjectRelease();
              sub_2141EF1B0(v57, v116, v136);
              sub_2141ED0BC(v131, v54, v73);
              v32 = v93;
              v44 = v119;
              v75 = v101;
              if (*(double *)&v108 != *(double *)&v106)
              {
                v109 = 0;
                goto LABEL_134;
              }
            }
          }
          swift_bridgeObjectRelease();
          sub_2141EF1B0(v74, v75, v109);
          sub_2141ED0BC(v102, v90, v91);
          swift_bridgeObjectRelease();
          sub_2141EF1B0(v103, v95, v97);
          sub_21421C318(v140, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141EF5D4);
          sub_21421C318(v139, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141EF5D4);
          v45 = v121;
LABEL_119:
          if (v87 - 1 == v44)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v82 = v84;
            v83 = a1;
            v28 = v89;
            goto LABEL_152;
          }
          result = sub_2141EF6B8(v72 + v45, (uint64_t)v139);
          v45 += 152;
          if ((unint64_t)++v44 >= *(_QWORD *)(v32 + 16))
            goto LABEL_153;
        }
        v58 = (unsigned __int8 *)sub_21421C308((uint64_t)v141);
        v59 = *v58;
        v132 = *((_QWORD *)v58 + 2);
        v134 = *((_QWORD *)v58 + 1);
        v137 = v58[24];
        v60 = *((uint64_t *)v58 + 5);
        v61 = *((uint64_t *)v58 + 6);
        v128 = v58[56];
        v107 = v58[80];
        sub_2141EF6B8((uint64_t)v140, (uint64_t)v138);
        v62 = sub_21421C2FC((uint64_t)v138);
        v63 = (unsigned __int8 *)sub_21421C308((uint64_t)v138);
        if (v62 == 1 || v59 != *v63)
          goto LABEL_136;
        v115 = *((_QWORD *)v63 + 2);
        v117 = *((_QWORD *)v63 + 1);
        v64 = *((uint64_t *)v63 + 5);
        v65 = *((uint64_t *)v63 + 6);
        v110 = (char)v63[56];
        v112 = v63[24];
        v105 = v63[80];
        sub_21421C318(v140, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21420B7DC);
        sub_21421C318(v139, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21420B7DC);
        sub_2141DD130(v134, v132, v137);
        swift_bridgeObjectRetain();
        sub_2141DD140(v60, v61, v128);
        sub_2141DD130(v117, v115, v112);
        swift_bridgeObjectRetain();
        v123 = v65;
        sub_2141DD140(v64, v65, v110);
        if ((sub_2144247F4() & 1) == 0)
        {
          sub_2141ED0BC(v117, v115, v112);
          swift_bridgeObjectRelease();
          sub_2141EF1B0(v64, v65, v110);
          goto LABEL_128;
        }
        if ((v128 & 0x80) != 0)
        {
          if ((v110 & 0x80000000) == 0)
          {
            sub_2141ED0BC(v117, v115, v112);
            swift_bridgeObjectRelease();
            sub_2141EF1B0(v64, v65, v110);
            sub_2141ED0BC(v134, v132, v137);
            swift_bridgeObjectRelease();
            goto LABEL_130;
          }
          sub_2141ED0BC(v117, v115, v112);
          swift_bridgeObjectRelease();
          sub_2141ED0BC(v134, v132, v137);
          swift_bridgeObjectRelease();
          if ((v128 & 1) != 0)
          {
            v32 = v93;
            if ((v110 & 1) == 0)
              goto LABEL_135;
          }
          else
          {
            v32 = v93;
            if ((v110 & 1) != 0)
              goto LABEL_135;
          }
          if (*(double *)&v60 != *(double *)&v64)
            goto LABEL_135;
          v72 = v94;
          if (*(double *)&v61 != *(double *)&v65)
            goto LABEL_135;
          goto LABEL_115;
        }
        if (v110 < 0)
        {
          sub_2141ED0BC(v117, v115, v112);
          swift_bridgeObjectRelease();
LABEL_128:
          sub_2141ED0BC(v134, v132, v137);
          swift_bridgeObjectRelease();
          v78 = v60;
          v79 = v61;
          v80 = v128;
LABEL_129:
          sub_2141EF1B0(v78, v79, v80);
LABEL_130:
          v32 = v93;
          goto LABEL_135;
        }
        if (v128)
        {
          if (v128 != 1)
          {
            if (v110 != 2)
            {
              sub_2141ED0BC(v117, v115, v112);
              swift_bridgeObjectRelease();
              sub_2141EF1B0(v64, v65, v110);
              sub_2141ED0BC(v134, v132, v137);
              swift_bridgeObjectRelease();
              v78 = v60;
              v79 = v61;
              v80 = 2;
              goto LABEL_129;
            }
            if (v60 == v64 && v61 == v65)
            {
              sub_2141ED0BC(v117, v115, v112);
              swift_bridgeObjectRelease();
              sub_2141EF1B0(v60, v61, 2);
              sub_2141ED0BC(v134, v132, v137);
              swift_bridgeObjectRelease();
              sub_2141EF1B0(v60, v61, 2);
              v32 = v93;
              v72 = v94;
            }
            else
            {
              v76 = sub_214425790();
              sub_2141ED0BC(v117, v115, v112);
              swift_bridgeObjectRelease();
              sub_2141EF1B0(v64, v123, 2);
              sub_2141ED0BC(v134, v132, v137);
              swift_bridgeObjectRelease();
              sub_2141EF1B0(v60, v61, 2);
              v32 = v93;
              v72 = v94;
              if ((v76 & 1) == 0)
                goto LABEL_135;
            }
            goto LABEL_115;
          }
          if (v110 != 1)
          {
            sub_2141ED0BC(v117, v115, v112);
            swift_bridgeObjectRelease();
            sub_2141EF1B0(v64, v65, v110);
            sub_2141ED0BC(v134, v132, v137);
            swift_bridgeObjectRelease();
            v78 = v60;
            v79 = v61;
            v80 = 1;
            goto LABEL_129;
          }
          v66 = *(double *)&v60;
          v67 = *(double *)&v64;
          sub_2141ED0BC(v117, v115, v112);
          swift_bridgeObjectRelease();
          sub_2141EF1B0(v64, v65, 1);
          sub_2141ED0BC(v134, v132, v137);
          swift_bridgeObjectRelease();
          v68 = v60;
          v69 = v61;
          v70 = 1;
        }
        else
        {
          if (v110)
          {
            sub_2141ED0BC(v117, v115, v112);
            swift_bridgeObjectRelease();
            sub_2141EF1B0(v64, v65, v110);
            sub_2141ED0BC(v134, v132, v137);
            swift_bridgeObjectRelease();
            v78 = v60;
            v79 = v61;
            v80 = 0;
            goto LABEL_129;
          }
          v66 = *(double *)&v60;
          v67 = *(double *)&v64;
          sub_2141ED0BC(v117, v115, v112);
          swift_bridgeObjectRelease();
          sub_2141EF1B0(v64, v65, 0);
          sub_2141ED0BC(v134, v132, v137);
          swift_bridgeObjectRelease();
          v68 = v60;
          v69 = v61;
          v70 = 0;
        }
        sub_2141EF1B0(v68, v69, v70);
        v32 = v93;
        v72 = v94;
        if (v66 != v67)
          goto LABEL_135;
LABEL_115:
        sub_21421C318(v140, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141EF5D4);
        sub_21421C318(v139, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141EF5D4);
        if (v107 != v105)
          goto LABEL_136;
        goto LABEL_119;
      }
LABEL_153:
      __break(1u);
    }
  }
  else
  {
    v32 = v93;
LABEL_28:
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v141[0] = *v84;
    *v84 = 0x8000000000000000;
    v34 = swift_bridgeObjectRetain();
    sub_214214C5C(v34, v28, isUniquelyReferenced_nonNull_native);
    *v84 = v141[0];
    swift_bridgeObjectRelease();
    *a1 = v32;
    return 1;
  }
  return result;
}

uint64_t sub_2142117E0(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  BOOL v10;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  int v17;
  unsigned __int8 *v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  int v32;
  int v33;
  unsigned __int8 *v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  double v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  char v46;
  uint64_t v47;
  char v48;
  char v49;
  double v50;
  double v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  unsigned __int8 v67;
  unsigned __int8 v68;
  unint64_t v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  int v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD v102[19];
  _QWORD v103[19];
  _BYTE v104[152];
  _BYTE v105[152];
  _QWORD v106[20];

  v3 = v2;
  v6 = *v2;
  sub_214425874();
  swift_bridgeObjectRetain();
  sub_2142FFD88((uint64_t)v106);
  v7 = sub_2144258B0();
  v8 = -1 << *(_BYTE *)(v6 + 32);
  v9 = v7 & ~v8;
  v101 = v6 + 56;
  v93 = a2;
  if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
    goto LABEL_103;
  sub_2141EF6B8(*(_QWORD *)(v6 + 48) + 152 * v9, (uint64_t)v106);
  sub_21421C318(v106, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21420B7DC);
  v10 = sub_214302F90((uint64_t)v106, (uint64_t)a2);
  sub_21421C318(v106, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141EF5D4);
  if (v10)
  {
    swift_bridgeObjectRelease();
    sub_21421C318(a2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141EF5D4);
    goto LABEL_4;
  }
  v80 = v6;
  v100 = ~v8;
  v9 = (v9 + 1) & ~v8;
  if (((*(_QWORD *)(v101 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_103:
    swift_bridgeObjectRelease();
LABEL_104:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v103[0] = *v3;
    *v3 = 0x8000000000000000;
    sub_21421C318(v93, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21420B7DC);
    sub_21421647C((uint64_t)v93, v9, isUniquelyReferenced_nonNull_native);
    *v3 = v103[0];
    swift_bridgeObjectRelease();
    sub_2141EF6B8((uint64_t)v93, a1);
    return 1;
  }
  v65 = v3;
  v66 = a1;
  v12 = (uint64_t)a2;
  v13 = v6;
  while (1)
  {
    sub_2141EF6B8(*(_QWORD *)(v13 + 48) + 152 * v9, (uint64_t)v102);
    sub_2141EF6B8((uint64_t)v102, (uint64_t)v103);
    v14 = sub_21421C2FC((uint64_t)v103);
    v15 = (unsigned __int8 *)sub_21421C308((uint64_t)v103);
    v16 = v15;
    if (v14 == 1)
      break;
    v28 = *v15;
    v30 = *((_QWORD *)v15 + 1);
    v29 = *((_QWORD *)v15 + 2);
    v31 = v15[24];
    v97 = *((uint64_t *)v15 + 5);
    v95 = *((_QWORD *)v15 + 6);
    v99 = v15[56];
    v32 = v15[80];
    sub_2141EF6B8(v12, (uint64_t)v104);
    v33 = sub_21421C2FC((uint64_t)v104);
    v34 = (unsigned __int8 *)sub_21421C308((uint64_t)v104);
    if (v33 == 1 || v28 != *v34)
      goto LABEL_11;
    v86 = v32;
    v36 = *((_QWORD *)v34 + 1);
    v35 = *((_QWORD *)v34 + 2);
    v37 = v34[24];
    v92 = *((uint64_t *)v34 + 5);
    v38 = *((_QWORD *)v34 + 6);
    v89 = (char)v34[56];
    v84 = v34[80];
    sub_21421C318(v102, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21420B7DC);
    sub_2141DD130(v30, v29, v31);
    swift_bridgeObjectRetain();
    sub_2141DD140(v97, v95, v99);
    sub_2141DD130(v36, v35, v37);
    swift_bridgeObjectRetain();
    v87 = v38;
    sub_2141DD140(v92, v38, v89);
    if ((sub_2144247F4() & 1) == 0)
    {
      sub_2141ED0BC(v36, v35, v37);
      swift_bridgeObjectRelease();
      sub_2141EF1B0(v92, v38, v89);
      v40 = v97;
      v39 = v30;
LABEL_71:
      sub_2141ED0BC(v39, v29, v31);
      swift_bridgeObjectRelease();
      v12 = (uint64_t)v93;
      v13 = v80;
      v46 = v99;
      v47 = v95;
LABEL_72:
      sub_2141EF1B0(v40, v47, v46);
LABEL_10:
      sub_21421C318(v102, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141EF5D4);
      goto LABEL_11;
    }
    if ((v99 & 0x80) != 0)
    {
      v39 = v30;
      if ((v89 & 0x80000000) == 0)
        goto LABEL_50;
      sub_2141ED0BC(v36, v35, v37);
      swift_bridgeObjectRelease();
      sub_2141ED0BC(v30, v29, v31);
      swift_bridgeObjectRelease();
      v46 = v99;
      v40 = v97;
      if ((v99 & 1) != 0)
      {
        v12 = (uint64_t)v93;
        v13 = v80;
        v47 = v95;
        if ((v89 & 1) == 0)
          goto LABEL_72;
      }
      else
      {
        v12 = (uint64_t)v93;
        v13 = v80;
        v47 = v95;
        if ((v89 & 1) != 0)
          goto LABEL_72;
      }
      if (*(double *)&v97 != *(double *)&v92 || *(double *)&v47 != *(double *)&v87)
        goto LABEL_72;
    }
    else
    {
      v39 = v30;
      if (v89 < 0)
      {
        sub_2141ED0BC(v36, v35, v37);
        swift_bridgeObjectRelease();
        v40 = v97;
        goto LABEL_71;
      }
      if (!v99)
      {
        if (v89)
        {
LABEL_50:
          sub_2141ED0BC(v36, v35, v37);
          swift_bridgeObjectRelease();
          sub_2141EF1B0(v92, v87, v89);
          v40 = v97;
          goto LABEL_71;
        }
        v40 = v97;
        v41 = *(double *)&v97;
        v42 = *(double *)&v92;
        sub_2141ED0BC(v36, v35, v37);
        swift_bridgeObjectRelease();
        v43 = v92;
        v44 = v87;
        v45 = 0;
        goto LABEL_74;
      }
      if (v99 == 1)
      {
        v40 = v97;
        if (v89 != 1)
          goto LABEL_70;
        v41 = *(double *)&v97;
        v42 = *(double *)&v92;
        sub_2141ED0BC(v36, v35, v37);
        swift_bridgeObjectRelease();
        v43 = v92;
        v44 = v87;
        v45 = 1;
LABEL_74:
        sub_2141EF1B0(v43, v44, v45);
        sub_2141ED0BC(v30, v29, v31);
        swift_bridgeObjectRelease();
        v12 = (uint64_t)v93;
        v13 = v80;
        v46 = v99;
        v47 = v95;
        if (v41 != v42)
          goto LABEL_72;
        goto LABEL_75;
      }
      v40 = v97;
      if (v89 != 2)
      {
LABEL_70:
        sub_2141ED0BC(v36, v35, v37);
        swift_bridgeObjectRelease();
        sub_2141EF1B0(v92, v87, v89);
        goto LABEL_71;
      }
      if (v97 == v92 && v95 == v87)
      {
        sub_2141ED0BC(v36, v35, v37);
        swift_bridgeObjectRelease();
        sub_2141EF1B0(v97, v95, 2);
        sub_2141ED0BC(v30, v29, v31);
        swift_bridgeObjectRelease();
        v12 = (uint64_t)v93;
        v13 = v80;
        v46 = v99;
        v47 = v95;
        v40 = v97;
      }
      else
      {
        v90 = sub_214425790();
        sub_2141ED0BC(v36, v35, v37);
        swift_bridgeObjectRelease();
        sub_2141EF1B0(v92, v87, 2);
        sub_2141ED0BC(v30, v29, v31);
        swift_bridgeObjectRelease();
        v12 = (uint64_t)v93;
        v13 = v80;
        v46 = v99;
        v47 = v95;
        v40 = v97;
        if ((v90 & 1) == 0)
          goto LABEL_72;
      }
    }
LABEL_75:
    sub_2141EF1B0(v40, v47, v46);
    sub_21421C318(v102, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141EF5D4);
    if (v86 == v84)
    {
      swift_bridgeObjectRelease();
      v64 = (_QWORD *)v12;
      goto LABEL_105;
    }
LABEL_11:
    v9 = (v9 + 1) & v100;
    if (((*(_QWORD *)(v101 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
    {
      swift_bridgeObjectRelease();
      v3 = v65;
      a1 = v66;
      goto LABEL_104;
    }
  }
  sub_2141EF6B8(v12, (uint64_t)v105);
  v17 = sub_21421C2FC((uint64_t)v105);
  v18 = (unsigned __int8 *)sub_21421C308((uint64_t)v105);
  if (v17 != 1 || *v16 != *v18)
    goto LABEL_11;
  v69 = v9;
  v73 = *((_QWORD *)v18 + 2);
  v96 = *((uint64_t *)v18 + 5);
  v94 = *((uint64_t *)v18 + 6);
  v76 = (char)v18[56];
  v88 = *((_QWORD *)v18 + 11);
  v91 = *((_QWORD *)v18 + 10);
  v82 = *((uint64_t *)v18 + 14);
  v83 = *((_QWORD *)v18 + 1);
  v81 = *((uint64_t *)v18 + 15);
  v67 = v18[24];
  v68 = v18[96];
  v19 = *((_QWORD *)v16 + 1);
  v98 = *((_QWORD *)v16 + 2);
  v20 = v16[24];
  v85 = (char)v18[128];
  v21 = *((uint64_t *)v16 + 5);
  v79 = v21;
  v22 = *((uint64_t *)v16 + 6);
  v23 = *((_QWORD *)v16 + 10);
  v24 = *((_QWORD *)v16 + 11);
  v25 = v16[96];
  v77 = *((uint64_t *)v16 + 15);
  v78 = *((uint64_t *)v16 + 14);
  v26 = v16[128];
  v27 = v16[56];
  sub_21421C318(v102, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21420B7DC);
  sub_2141DD130(v19, v98, v20);
  swift_bridgeObjectRetain();
  sub_2141DD140(v21, v22, v27);
  v72 = v23;
  v74 = v24;
  v75 = v25;
  sub_2141DD130(v23, v24, v25);
  swift_bridgeObjectRetain();
  v71 = v26;
  sub_2141DD140(v78, v77, v26);
  sub_2141DD130(v83, v73, v67 & 1);
  swift_bridgeObjectRetain();
  sub_2141DD140(v96, v94, v76);
  sub_2141DD130(v91, v88, v68 & 1);
  swift_bridgeObjectRetain();
  sub_2141DD140(v82, v81, v85);
  v70 = v19;
  if ((sub_2144247F4() & 1) == 0)
    goto LABEL_9;
  if ((v27 & 0x80) != 0)
  {
    if (v76 < 0)
    {
      if ((v27 & 1) != 0)
      {
        if ((v76 & 1) == 0)
          goto LABEL_9;
      }
      else if ((v76 & 1) != 0)
      {
        goto LABEL_9;
      }
      if (*(double *)&v21 != *(double *)&v96 || *(double *)&v22 != *(double *)&v94)
        goto LABEL_9;
      goto LABEL_58;
    }
    goto LABEL_9;
  }
  if (v76 < 0)
    goto LABEL_9;
  if (!v27)
  {
    if (!v76)
      goto LABEL_42;
    goto LABEL_9;
  }
  if (v27 != 1)
  {
    if (v76 != 2 || (v21 != v96 || v22 != v94) && (sub_214425790() & 1) == 0)
      goto LABEL_9;
    goto LABEL_58;
  }
  if (v76 != 1)
  {
LABEL_9:
    sub_2141ED0BC(v91, v88, v68 & 1);
    swift_bridgeObjectRelease();
    sub_2141EF1B0(v82, v81, v85);
    sub_2141ED0BC(v83, v73, v67 & 1);
    swift_bridgeObjectRelease();
    sub_2141EF1B0(v96, v94, v76);
    sub_2141ED0BC(v23, v24, v25);
    swift_bridgeObjectRelease();
    sub_2141EF1B0(v78, v77, v26);
    sub_2141ED0BC(v19, v98, v20);
    swift_bridgeObjectRelease();
    sub_2141EF1B0(v21, v22, v27);
    v12 = (uint64_t)v93;
    v13 = v80;
    v9 = v69;
    goto LABEL_10;
  }
LABEL_42:
  if (*(double *)&v21 != *(double *)&v96)
    goto LABEL_9;
LABEL_58:
  if ((sub_2144247F4() & 1) == 0)
  {
    sub_2141ED0BC(v91, v88, v68 & 1);
    swift_bridgeObjectRelease();
    sub_2141EF1B0(v82, v81, v85);
    v12 = (uint64_t)v93;
    v13 = v80;
    v9 = v69;
    goto LABEL_96;
  }
  if ((v26 & 0x80) != 0)
  {
    v55 = v91;
    v12 = (uint64_t)v93;
    v13 = v80;
    v9 = v69;
    v48 = v85;
    v56 = v88;
    if (v85 < 0)
    {
      sub_2141ED0BC(v91, v88, v68 & 1);
      swift_bridgeObjectRelease();
      sub_2141ED0BC(v83, v73, v67 & 1);
      swift_bridgeObjectRelease();
      v58 = v72;
      if ((v26 & 1) != 0)
      {
        v13 = v80;
        if ((v85 & 1) == 0)
          goto LABEL_97;
      }
      else
      {
        v13 = v80;
        if ((v85 & 1) != 0)
          goto LABEL_97;
      }
      if (*(double *)&v78 == *(double *)&v82 && *(double *)&v77 == *(double *)&v81)
      {
LABEL_101:
        v60 = v77;
        v61 = v78;
        goto LABEL_107;
      }
      goto LABEL_97;
    }
    v57 = v68 & 1;
    goto LABEL_95;
  }
  v12 = (uint64_t)v93;
  v13 = v80;
  v9 = v69;
  v48 = v85;
  if (v85 < 0)
  {
    sub_2141ED0BC(v91, v88, v68 & 1);
    swift_bridgeObjectRelease();
    goto LABEL_96;
  }
  if (!v26)
  {
    if (!v85)
    {
      v49 = v67 & 1;
      v50 = *(double *)&v78;
      v51 = *(double *)&v82;
      sub_2141ED0BC(v91, v88, v68 & 1);
      swift_bridgeObjectRelease();
      v52 = v82;
      v53 = v81;
      v54 = 0;
      goto LABEL_87;
    }
    goto LABEL_94;
  }
  if (v26 == 1)
  {
    if (v85 == 1)
    {
      v49 = v67 & 1;
      v50 = *(double *)&v78;
      v51 = *(double *)&v82;
      sub_2141ED0BC(v91, v88, v68 & 1);
      swift_bridgeObjectRelease();
      v52 = v82;
      v53 = v81;
      v54 = 1;
LABEL_87:
      sub_2141EF1B0(v52, v53, v54);
      v59 = v49;
      v13 = v80;
      sub_2141ED0BC(v83, v73, v59);
      swift_bridgeObjectRelease();
      v58 = v72;
      if (v50 == v51)
        goto LABEL_101;
LABEL_97:
      sub_2141EF1B0(v96, v94, v76);
      sub_2141ED0BC(v58, v74, v75);
      swift_bridgeObjectRelease();
      sub_2141EF1B0(v78, v77, v71);
      sub_2141ED0BC(v70, v98, v20);
      swift_bridgeObjectRelease();
      sub_2141EF1B0(v79, v22, v27);
      goto LABEL_10;
    }
LABEL_94:
    v57 = v68 & 1;
    v55 = v91;
    v56 = v88;
LABEL_95:
    sub_2141ED0BC(v55, v56, v57);
    swift_bridgeObjectRelease();
    sub_2141EF1B0(v82, v81, v48);
LABEL_96:
    v58 = v72;
    sub_2141ED0BC(v83, v73, v67 & 1);
    swift_bridgeObjectRelease();
    goto LABEL_97;
  }
  if (v85 != 2)
    goto LABEL_94;
  v60 = v81;
  v61 = v82;
  if (v78 != v82 || v77 != v81)
  {
    v62 = sub_214425790();
    sub_2141ED0BC(v91, v88, v68 & 1);
    swift_bridgeObjectRelease();
    sub_2141EF1B0(v82, v81, 2);
    sub_2141ED0BC(v83, v73, v67 & 1);
    swift_bridgeObjectRelease();
    v12 = (uint64_t)v93;
    v13 = v80;
    v58 = v72;
    if ((v62 & 1) != 0)
      goto LABEL_101;
    goto LABEL_97;
  }
  sub_2141ED0BC(v91, v88, v68 & 1);
  swift_bridgeObjectRelease();
  sub_2141EF1B0(v82, v81, 2);
  sub_2141ED0BC(v83, v73, v67 & 1);
  swift_bridgeObjectRelease();
  v12 = (uint64_t)v93;
  v58 = v72;
LABEL_107:
  sub_2141EF1B0(v96, v94, v76);
  sub_2141ED0BC(v58, v74, v75);
  swift_bridgeObjectRelease();
  sub_2141EF1B0(v61, v60, v71);
  sub_2141ED0BC(v70, v98, v20);
  swift_bridgeObjectRelease();
  sub_2141EF1B0(v79, v22, v27);
  sub_21421C318(v102, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141EF5D4);
  swift_bridgeObjectRelease();
  v64 = (_QWORD *)v12;
LABEL_105:
  sub_21421C318(v64, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141EF5D4);
  v3 = v65;
  a1 = v66;
LABEL_4:
  sub_2141EF6B8(*(_QWORD *)(*v3 + 48) + 152 * v9, (uint64_t)v103);
  sub_2141EF6B8((uint64_t)v103, a1);
  sub_21421C318(v103, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21420B7DC);
  return 0;
}

uint64_t sub_2142126CC(uint64_t a1, _QWORD *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  char isUniquelyReferenced_nonNull_native;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  _QWORD *v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  _QWORD v45[2];
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v3 = v2;
  v5 = *v2;
  sub_214425874();
  v6 = sub_2144258B0();
  v7 = -1 << *(_BYTE *)(v5 + 32);
  v8 = v6 & ~v7;
  v42 = v5 + 56;
  if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
  {
    v31 = v2;
    v32 = (_QWORD *)a1;
    v40 = ~v7;
    swift_bridgeObjectRetain();
    v9 = a2;
    v41 = v5;
    while (1)
    {
      v10 = (uint64_t *)(*(_QWORD *)(v5 + 48) + (v8 << 6));
      v12 = *v10;
      v11 = v10[1];
      v14 = v10[2];
      v13 = v10[3];
      v15 = v10[4];
      v16 = v10[5];
      v17 = v10[6];
      if (v17 < 0)
      {
        v37 = *v10;
        sub_21421C19C((uint64_t)v9, (uint64_t)v45);
        v19 = v49;
        if (v49 < 0)
        {
          v49 &= ~0x8000000000000000;
          v38 = v45[1];
          v39 = v45[0];
          v36 = v46;
          v34 = v48;
          v35 = v47;
          sub_21421C1D8(v37, v11, v14, v13, v15, v16, v17);
          sub_2141DD130(v37, v11, v14 & 1);
          swift_bridgeObjectRetain();
          sub_2141DD130(v39, v38, v36);
          swift_bridgeObjectRetain();
          sub_2141DD130(v15, v16, v17 & 1);
          swift_bridgeObjectRetain();
          sub_2141DD130(v35, v34, v19 & 1);
          swift_bridgeObjectRetain();
          if ((sub_2144247F4() & 1) != 0)
          {
            v33 = sub_2144247F4();
            sub_2141ED0BC(v35, v34, v19 & 1);
            swift_bridgeObjectRelease();
            sub_2141ED0BC(v15, v16, v17 & 1);
            swift_bridgeObjectRelease();
            sub_2141ED0BC(v39, v38, v36);
            swift_bridgeObjectRelease();
            sub_2141ED0BC(v37, v11, v14 & 1);
            swift_bridgeObjectRelease();
            sub_21421C24C(v37, v11, v14, v13, v15, v16, v17);
            v9 = a2;
            if ((v33 & 1) != 0)
            {
LABEL_17:
              swift_bridgeObjectRelease();
              sub_21421C2C0(v9, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21421C24C);
              v22 = (uint64_t *)(*(_QWORD *)(*v31 + 48) + (v8 << 6));
              v23 = *v22;
              v24 = v22[1];
              v25 = v22[2];
              v26 = v22[3];
              v27 = v22[4];
              v28 = v22[5];
              v29 = v22[6];
              v30 = v22[7];
              *v32 = *v22;
              v32[1] = v24;
              v32[2] = v25;
              v32[3] = v26;
              v32[4] = v27;
              v32[5] = v28;
              v32[6] = v29;
              v32[7] = v30;
              sub_21421C1D8(v23, v24, v25, v26, v27, v28, v29);
              return 0;
            }
          }
          else
          {
            sub_2141ED0BC(v35, v34, v19 & 1);
            swift_bridgeObjectRelease();
            sub_2141ED0BC(v15, v16, v17 & 1);
            swift_bridgeObjectRelease();
            sub_2141ED0BC(v39, v38, v36);
            swift_bridgeObjectRelease();
            sub_2141ED0BC(v37, v11, v14 & 1);
            swift_bridgeObjectRelease();
            sub_21421C24C(v37, v11, v14, v13, v15, v16, v17);
            v9 = a2;
          }
        }
      }
      else
      {
        sub_21421C19C((uint64_t)v9, (uint64_t)&v50);
        if (v51 < 0)
        {
          v51 &= ~0x8000000000000000;
        }
        else
        {
          sub_21421C2C0(a2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21421C1D8);
          sub_21421C1D8(v12, v11, v14, v13, v15, v16, v17);
          v9 = a2;
          v18 = sub_2144247F4();
          sub_21421C2C0(a2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21421C24C);
          sub_21421C24C(v12, v11, v14, v13, v15, v16, v17);
          if ((v18 & 1) != 0)
            goto LABEL_17;
        }
      }
      v5 = v41;
      v8 = (v8 + 1) & v40;
      if (((*(_QWORD *)(v42 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        v3 = v31;
        a1 = (uint64_t)v32;
        break;
      }
    }
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v44 = *v3;
  *v3 = 0x8000000000000000;
  sub_21421C2C0(a2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21421C1D8);
  sub_2142172C0((uint64_t)a2, v8, isUniquelyReferenced_nonNull_native);
  *v3 = v44;
  swift_bridgeObjectRelease();
  sub_21421C19C((uint64_t)a2, a1);
  return 1;
}

uint64_t sub_214212C14()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  _QWORD *v29;
  _OWORD v30[2];
  uint64_t v31;
  _OWORD v32[2];
  uint64_t v33;
  char v34;
  _BYTE v35[48];

  v1 = v0;
  v2 = *v0;
  sub_2141D8BF8(&qword_254D695B0);
  v3 = sub_2144254C0();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v29 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v6 = ~(-1 << v5);
    else
      v6 = -1;
    v7 = v6 & *(_QWORD *)(v2 + 56);
    v28 = (unint64_t)(v5 + 63) >> 6;
    v8 = v3 + 56;
    result = swift_retain();
    v10 = 0;
    while (1)
    {
      if (v7)
      {
        v12 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        v13 = v12 | (v10 << 6);
      }
      else
      {
        v14 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
LABEL_45:
          __break(1u);
LABEL_46:
          __break(1u);
          return result;
        }
        if (v14 >= v28)
          goto LABEL_40;
        v15 = v29[v14];
        ++v10;
        if (!v15)
        {
          v10 = v14 + 1;
          if (v14 + 1 >= v28)
            goto LABEL_40;
          v15 = v29[v10];
          if (!v15)
          {
            v10 = v14 + 2;
            if (v14 + 2 >= v28)
              goto LABEL_40;
            v15 = v29[v10];
            if (!v15)
            {
              v16 = v14 + 3;
              if (v16 >= v28)
              {
LABEL_40:
                swift_release();
                v1 = v0;
                v27 = 1 << *(_BYTE *)(v2 + 32);
                if (v27 > 63)
                  bzero(v29, ((unint64_t)(v27 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v29 = -1 << v27;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v15 = v29[v16];
              if (!v15)
              {
                while (1)
                {
                  v10 = v16 + 1;
                  if (__OFADD__(v16, 1))
                    goto LABEL_46;
                  if (v10 >= v28)
                    goto LABEL_40;
                  v15 = v29[v10];
                  ++v16;
                  if (v15)
                    goto LABEL_23;
                }
              }
              v10 = v16;
            }
          }
        }
LABEL_23:
        v7 = (v15 - 1) & v15;
        v13 = __clz(__rbit64(v15)) + (v10 << 6);
      }
      v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v13);
      sub_214425874();
      sub_214425880();
      v18 = *(_QWORD *)(v17 + 16);
      if (v18)
      {
        v19 = v17 + 32;
        swift_bridgeObjectRetain();
        do
        {
          sub_214219DE0(v19, (uint64_t)v35);
          sub_214219DE0((uint64_t)v35, (uint64_t)v32);
          if ((v34 & 1) != 0)
          {
            v30[0] = v32[0];
            v30[1] = v32[1];
            v31 = v33;
            sub_214425880();
            sub_21442546C();
            sub_214219E1C((uint64_t)v30);
          }
          else
          {
            sub_214425880();
            sub_214425880();
          }
          sub_214219E50((uint64_t)v35);
          v19 += 48;
          --v18;
        }
        while (v18);
        swift_bridgeObjectRelease();
      }
      result = sub_2144258B0();
      v20 = -1 << *(_BYTE *)(v4 + 32);
      v21 = result & ~v20;
      v22 = v21 >> 6;
      if (((-1 << v21) & ~*(_QWORD *)(v8 + 8 * (v21 >> 6))) != 0)
      {
        v11 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v8 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v23 = 0;
        v24 = (unint64_t)(63 - v20) >> 6;
        do
        {
          if (++v22 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_45;
          }
          v25 = v22 == v24;
          if (v22 == v24)
            v22 = 0;
          v23 |= v25;
          v26 = *(_QWORD *)(v8 + 8 * v22);
        }
        while (v26 == -1);
        v11 = __clz(__rbit64(~v26)) + (v22 << 6);
      }
      *(_QWORD *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v11) = v17;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_214212FA4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;

  v1 = v0;
  v2 = *v0;
  sub_2141D8BF8(&qword_253F105C8);
  v3 = sub_2144254C0();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v30 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v6 = ~(-1 << v5);
    else
      v6 = -1;
    v7 = v6 & *(_QWORD *)(v2 + 56);
    v8 = (unint64_t)(v5 + 63) >> 6;
    v9 = v3 + 56;
    result = swift_retain();
    v11 = 0;
    while (1)
    {
      if (v7)
      {
        v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        v15 = v14 | (v11 << 6);
      }
      else
      {
        v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8)
          goto LABEL_33;
        v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          v11 = v16 + 1;
          if (v16 + 1 >= v8)
            goto LABEL_33;
          v17 = v30[v11];
          if (!v17)
          {
            v11 = v16 + 2;
            if (v16 + 2 >= v8)
              goto LABEL_33;
            v17 = v30[v11];
            if (!v17)
            {
              v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                v1 = v0;
                v29 = 1 << *(_BYTE *)(v2 + 32);
                if (v29 > 63)
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v30 = -1 << v29;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  v11 = v18 + 1;
                  if (__OFADD__(v18, 1))
                    goto LABEL_39;
                  if (v11 >= v8)
                    goto LABEL_33;
                  v17 = v30[v11];
                  ++v18;
                  if (v17)
                    goto LABEL_23;
                }
              }
              v11 = v18;
            }
          }
        }
LABEL_23:
        v7 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      v19 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
      v20 = *v19;
      v21 = v19[1];
      sub_214425874();
      sub_214424F14();
      result = sub_2144258B0();
      v22 = -1 << *(_BYTE *)(v4 + 32);
      v23 = result & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        v12 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v27 = v24 == v26;
          if (v24 == v26)
            v24 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      v13 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v12);
      *v13 = v20;
      v13[1] = v21;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_214213280()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  char v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;

  v1 = v0;
  v2 = *v0;
  sub_2141D8BF8(&qword_254D695D0);
  result = sub_2144254C0();
  v4 = result;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 0;
    v6 = (_QWORD *)(v2 + 56);
    v7 = 1 << *(_BYTE *)(v2 + 32);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v2 + 56);
    v10 = (unint64_t)(v7 + 63) >> 6;
    v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v14 = v13 | (v5 << 6);
      }
      else
      {
        v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v10)
          goto LABEL_33;
        v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          v5 = v15 + 1;
          if (v15 + 1 >= v10)
            goto LABEL_33;
          v16 = v6[v5];
          if (!v16)
          {
            v5 = v15 + 2;
            if (v15 + 2 >= v10)
              goto LABEL_33;
            v16 = v6[v5];
            if (!v16)
            {
              v17 = v15 + 3;
              if (v17 >= v10)
              {
LABEL_33:
                v26 = 1 << *(_BYTE *)(v2 + 32);
                if (v26 > 63)
                  bzero((void *)(v2 + 56), ((unint64_t)(v26 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v6 = -1 << v26;
                v1 = v0;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v16 = v6[v17];
              if (!v16)
              {
                while (1)
                {
                  v5 = v17 + 1;
                  if (__OFADD__(v17, 1))
                    goto LABEL_39;
                  if (v5 >= v10)
                    goto LABEL_33;
                  v16 = v6[v5];
                  ++v17;
                  if (v16)
                    goto LABEL_23;
                }
              }
              v5 = v17;
            }
          }
        }
LABEL_23:
        v9 = (v16 - 1) & v16;
        v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      v18 = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v14);
      sub_214425874();
      sub_214425880();
      result = sub_2144258B0();
      v19 = -1 << *(_BYTE *)(v4 + 32);
      v20 = result & ~v19;
      v21 = v20 >> 6;
      if (((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6))) != 0)
      {
        v12 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v22 = 0;
        v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v24 = v21 == v23;
          if (v21 == v23)
            v21 = 0;
          v22 |= v24;
          v25 = *(_QWORD *)(v11 + 8 * v21);
        }
        while (v25 == -1);
        v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(_QWORD *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(_BYTE *)(*(_QWORD *)(v4 + 48) + v12) = v18;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_214213528(uint64_t a1)
{
  return sub_214213534(a1, &qword_253F105D0);
}

uint64_t sub_214213534(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;

  v3 = v2;
  v4 = *v2;
  sub_2141D8BF8(a2);
  result = sub_2144254C0();
  v6 = result;
  if (*(_QWORD *)(v4 + 16))
  {
    v7 = 0;
    v8 = (uint64_t *)(v4 + 56);
    v9 = 1 << *(_BYTE *)(v4 + 32);
    v28 = -1 << v9;
    v29 = v3;
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v4 + 56);
    v30 = 1 << *(_BYTE *)(v4 + 32);
    v12 = (unint64_t)(v9 + 63) >> 6;
    v13 = result + 56;
    while (1)
    {
      if (v11)
      {
        v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v16 = v15 | (v7 << 6);
      }
      else
      {
        v17 = v7 + 1;
        if (__OFADD__(v7, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v17 >= v12)
          goto LABEL_33;
        v18 = v8[v17];
        ++v7;
        if (!v18)
        {
          v7 = v17 + 1;
          if (v17 + 1 >= v12)
            goto LABEL_33;
          v18 = v8[v7];
          if (!v18)
          {
            v7 = v17 + 2;
            if (v17 + 2 >= v12)
              goto LABEL_33;
            v18 = v8[v7];
            if (!v18)
            {
              v19 = v17 + 3;
              if (v19 >= v12)
              {
LABEL_33:
                if (v30 >= 64)
                  bzero((void *)(v4 + 56), 8 * v12);
                else
                  *v8 = v28;
                v3 = v29;
                *(_QWORD *)(v4 + 16) = 0;
                break;
              }
              v18 = v8[v19];
              if (!v18)
              {
                while (1)
                {
                  v7 = v19 + 1;
                  if (__OFADD__(v19, 1))
                    goto LABEL_39;
                  if (v7 >= v12)
                    goto LABEL_33;
                  v18 = v8[v7];
                  ++v19;
                  if (v18)
                    goto LABEL_23;
                }
              }
              v7 = v19;
            }
          }
        }
LABEL_23:
        v11 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v7 << 6);
      }
      v20 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v16);
      result = sub_214425868();
      v21 = -1 << *(_BYTE *)(v6 + 32);
      v22 = result & ~v21;
      v23 = v22 >> 6;
      if (((-1 << v22) & ~*(_QWORD *)(v13 + 8 * (v22 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v21) >> 6;
        do
        {
          if (++v23 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v26 = v23 == v25;
          if (v23 == v25)
            v23 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v13 + 8 * v23);
        }
        while (v27 == -1);
        v14 = __clz(__rbit64(~v27)) + (v23 << 6);
      }
      *(_QWORD *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v14) = v20;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  result = swift_release();
  *v3 = v6;
  return result;
}

uint64_t sub_2142137B0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t result;
  int64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  int v28;
  uint64_t v29;
  char v30;
  int v31;
  int v32;
  uint64_t v33;
  char v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  unsigned int v44;
  char v45;
  uint64_t v46;
  uint64_t *v47;
  int64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD v67[19];
  _BYTE v68[152];

  v1 = *v0;
  sub_2141D8BF8(&qword_254D695D8);
  v2 = sub_2144254C0();
  v3 = v2;
  if (*(_QWORD *)(v1 + 16))
  {
    v4 = 1 << *(_BYTE *)(v1 + 32);
    v49 = (_QWORD *)(v1 + 56);
    if (v4 < 64)
      v5 = ~(-1 << v4);
    else
      v5 = -1;
    v6 = v5 & *(_QWORD *)(v1 + 56);
    v48 = (unint64_t)(v4 + 63) >> 6;
    v51 = v2 + 56;
    result = swift_retain();
    v8 = 0;
    v50 = v1;
    v52 = v3;
    while (1)
    {
      if (v6)
      {
        v53 = v8;
        v54 = (v6 - 1) & v6;
        v13 = __clz(__rbit64(v6)) | (v8 << 6);
      }
      else
      {
        v14 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_62:
          __break(1u);
LABEL_63:
          __break(1u);
          return result;
        }
        if (v14 >= v48)
          goto LABEL_57;
        v15 = v49[v14];
        v16 = v8 + 1;
        if (!v15)
        {
          v16 = v8 + 2;
          if (v8 + 2 >= v48)
            goto LABEL_57;
          v15 = v49[v16];
          if (!v15)
          {
            v16 = v8 + 3;
            if (v8 + 3 >= v48)
              goto LABEL_57;
            v15 = v49[v16];
            if (!v15)
            {
              v17 = v8 + 4;
              if (v8 + 4 >= v48)
              {
LABEL_57:
                swift_release();
                v46 = 1 << *(_BYTE *)(v1 + 32);
                if (v46 > 63)
                  bzero(v49, ((unint64_t)(v46 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v49 = -1 << v46;
                *(_QWORD *)(v1 + 16) = 0;
                break;
              }
              v15 = v49[v17];
              if (!v15)
              {
                while (1)
                {
                  v16 = v17 + 1;
                  if (__OFADD__(v17, 1))
                    goto LABEL_63;
                  if (v16 >= v48)
                    goto LABEL_57;
                  v15 = v49[v16];
                  ++v17;
                  if (v15)
                    goto LABEL_32;
                }
              }
              v16 = v8 + 4;
            }
          }
        }
LABEL_32:
        v53 = v16;
        v54 = (v15 - 1) & v15;
        v13 = __clz(__rbit64(v15)) + (v16 << 6);
      }
      v22 = *(_QWORD *)(*(_QWORD *)(v1 + 48) + 8 * v13);
      sub_214425874();
      sub_214425880();
      v55 = v22;
      v23 = *(_QWORD *)(v22 + 16);
      if (v23)
      {
        v24 = v22 + 32;
        while (1)
        {
          sub_2141EF6B8(v24, (uint64_t)v67);
          sub_2141EF6B8((uint64_t)v67, (uint64_t)v68);
          v28 = sub_21421C2FC((uint64_t)v68);
          v29 = sub_21421C308((uint64_t)v68);
          if (v28 != 1)
          {
            v39 = *(_QWORD *)(v29 + 16);
            v40 = *(_BYTE *)(v29 + 24);
            v41 = *(_QWORD *)(v29 + 40);
            v66 = *(_QWORD *)(v29 + 8);
            v42 = *(_QWORD *)(v29 + 48);
            v43 = *(char *)(v29 + 56);
            v44 = *(unsigned __int8 *)(v29 + 56);
            sub_214425880();
            sub_214425880();
            if (v43 < 0)
            {
              sub_214425880();
              sub_214425880();
              sub_214425898();
              sub_214425898();
              sub_21421C318(v67, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21420B7DC);
              sub_2141DD130(v66, v39, v40);
              swift_bridgeObjectRetain();
              v45 = v44;
            }
            else
            {
              sub_214425880();
              v45 = v44;
              sub_214425880();
              if (v44 > 1)
              {
                sub_21421C318(v67, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21420B7DC);
                sub_2141DD130(v66, v39, v40);
                swift_bridgeObjectRetain();
                sub_2141DD140(v41, v42, 2);
                sub_214424F14();
              }
              else
              {
                sub_214425898();
                sub_21421C318(v67, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21420B7DC);
                sub_2141DD130(v66, v39, v40);
                swift_bridgeObjectRetain();
              }
            }
            sub_214425880();
            sub_2141ED0BC(v66, v39, v40);
            swift_bridgeObjectRelease();
            v25 = v41;
            v26 = v42;
            v27 = v45;
            goto LABEL_37;
          }
          v58 = v24;
          v59 = *(_QWORD *)(v29 + 16);
          v30 = *(_BYTE *)(v29 + 24);
          v61 = *(_QWORD *)(v29 + 40);
          v62 = *(_QWORD *)(v29 + 8);
          v60 = *(_QWORD *)(v29 + 48);
          v31 = *(char *)(v29 + 56);
          v32 = *(unsigned __int8 *)(v29 + 56);
          v33 = *(_QWORD *)(v29 + 88);
          v34 = *(_BYTE *)(v29 + 96);
          v65 = *(_QWORD *)(v29 + 112);
          v63 = *(_QWORD *)(v29 + 80);
          v64 = *(_QWORD *)(v29 + 120);
          v35 = *(unsigned __int8 *)(v29 + 128);
          sub_214425880();
          sub_214425880();
          v57 = v32;
          if (v31 < 0)
            break;
          v56 = v30;
          v36 = v35;
          sub_214425880();
          if (!v32)
          {
            sub_214425880();
            sub_214425898();
            sub_21421C318(v67, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21420B7DC);
            v37 = v59;
            sub_2141DD130(v62, v59, v30);
            swift_bridgeObjectRetain();
            sub_2141DD130(v63, v33, v34);
            swift_bridgeObjectRetain();
            sub_2141DD140(v65, v64, v36);
            v38 = v30;
LABEL_50:
            v24 = v58;
            if ((v36 & 0x80) == 0)
              goto LABEL_51;
            goto LABEL_54;
          }
          v37 = v59;
          v24 = v58;
          if (v32 == 1)
          {
            sub_214425880();
            sub_214425898();
            sub_21421C318(v67, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21420B7DC);
            v38 = v56;
            sub_2141DD130(v62, v59, v56);
            swift_bridgeObjectRetain();
            sub_2141DD130(v63, v33, v34);
            swift_bridgeObjectRetain();
            sub_2141DD140(v65, v64, v36);
            if ((v36 & 0x80) == 0)
              goto LABEL_51;
          }
          else
          {
            sub_214425880();
            sub_21421C318(v67, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21420B7DC);
            sub_2141DD130(v62, v59, v56);
            swift_bridgeObjectRetain();
            sub_2141DD130(v63, v33, v34);
            swift_bridgeObjectRetain();
            sub_2141DD140(v65, v64, v36);
            sub_2141DD140(v61, v60, 2);
            v38 = v56;
            sub_214424F14();
            if ((v36 & 0x80) == 0)
            {
LABEL_51:
              sub_214425880();
              sub_214425880();
              if (v36 > 1)
                sub_214424F14();
              else
                sub_214425898();
              goto LABEL_36;
            }
          }
LABEL_54:
          sub_214425880();
          sub_214425880();
          sub_214425898();
          sub_214425898();
          v37 = v59;
LABEL_36:
          sub_2141ED0BC(v62, v37, v38);
          swift_bridgeObjectRelease();
          sub_2141EF1B0(v61, v60, v57);
          sub_2141ED0BC(v63, v33, v34);
          swift_bridgeObjectRelease();
          v26 = v64;
          v25 = v65;
          v27 = v36;
LABEL_37:
          sub_2141EF1B0(v25, v26, v27);
          sub_21421C318(v67, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141EF5D4);
          v24 += 152;
          if (!--v23)
            goto LABEL_6;
        }
        sub_214425880();
        v38 = v30;
        sub_214425880();
        sub_214425898();
        sub_214425898();
        sub_21421C318(v67, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21420B7DC);
        sub_2141DD130(v62, v59, v30);
        swift_bridgeObjectRetain();
        sub_2141DD130(v63, v33, v34);
        swift_bridgeObjectRetain();
        sub_2141DD140(v65, v64, v35);
        v36 = v35;
        v37 = v59;
        goto LABEL_50;
      }
LABEL_6:
      result = sub_2144258B0();
      v3 = v52;
      v9 = -1 << *(_BYTE *)(v52 + 32);
      v10 = result & ~v9;
      v11 = v10 >> 6;
      if (((-1 << v10) & ~*(_QWORD *)(v51 + 8 * (v10 >> 6))) != 0)
      {
        v12 = __clz(__rbit64((-1 << v10) & ~*(_QWORD *)(v51 + 8 * (v10 >> 6)))) | v10 & 0x7FFFFFFFFFFFFFC0;
        v1 = v50;
        v6 = v54;
      }
      else
      {
        v18 = 0;
        v19 = (unint64_t)(63 - v9) >> 6;
        v6 = v54;
        do
        {
          if (++v11 == v19 && (v18 & 1) != 0)
          {
            __break(1u);
            goto LABEL_62;
          }
          v20 = v11 == v19;
          if (v11 == v19)
            v11 = 0;
          v18 |= v20;
          v21 = *(_QWORD *)(v51 + 8 * v11);
        }
        while (v21 == -1);
        v12 = __clz(__rbit64(~v21)) + (v11 << 6);
        v1 = v50;
      }
      *(_QWORD *)(v51 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(_QWORD *)(*(_QWORD *)(v52 + 48) + 8 * v12) = v55;
      ++*(_QWORD *)(v52 + 16);
      v8 = v53;
    }
  }
  result = swift_release();
  *v47 = v3;
  return result;
}

uint64_t sub_2142140D4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  char v27[72];
  _BYTE v28[160];

  v1 = v0;
  v2 = *v0;
  sub_2141D8BF8(&qword_254D695E0);
  v3 = sub_2144254C0();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v6 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v7 = ~(-1 << v5);
    else
      v7 = -1;
    v8 = v7 & *(_QWORD *)(v2 + 56);
    v9 = (unint64_t)(v5 + 63) >> 6;
    v10 = v3 + 56;
    result = swift_retain();
    v12 = 0;
    while (1)
    {
      if (v8)
      {
        v14 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        v15 = v14 | (v12 << 6);
      }
      else
      {
        v16 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v9)
          goto LABEL_33;
        v17 = v6[v16];
        ++v12;
        if (!v17)
        {
          v12 = v16 + 1;
          if (v16 + 1 >= v9)
            goto LABEL_33;
          v17 = v6[v12];
          if (!v17)
          {
            v12 = v16 + 2;
            if (v16 + 2 >= v9)
              goto LABEL_33;
            v17 = v6[v12];
            if (!v17)
            {
              v18 = v16 + 3;
              if (v18 >= v9)
              {
LABEL_33:
                swift_release();
                v1 = v0;
                v26 = 1 << *(_BYTE *)(v2 + 32);
                if (v26 > 63)
                  bzero((void *)(v2 + 56), ((unint64_t)(v26 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v6 = -1 << v26;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v17 = v6[v18];
              if (!v17)
              {
                while (1)
                {
                  v12 = v18 + 1;
                  if (__OFADD__(v18, 1))
                    goto LABEL_39;
                  if (v12 >= v9)
                    goto LABEL_33;
                  v17 = v6[v12];
                  ++v18;
                  if (v17)
                    goto LABEL_23;
                }
              }
              v12 = v18;
            }
          }
        }
LABEL_23:
        v8 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v12 << 6);
      }
      sub_2141EF6B8(*(_QWORD *)(v2 + 48) + 152 * v15, (uint64_t)v28);
      sub_214425874();
      sub_2142FFD88((uint64_t)v27);
      result = sub_2144258B0();
      v19 = -1 << *(_BYTE *)(v4 + 32);
      v20 = result & ~v19;
      v21 = v20 >> 6;
      if (((-1 << v20) & ~*(_QWORD *)(v10 + 8 * (v20 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v10 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v22 = 0;
        v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v24 = v21 == v23;
          if (v21 == v23)
            v21 = 0;
          v22 |= v24;
          v25 = *(_QWORD *)(v10 + 8 * v21);
        }
        while (v25 == -1);
        v13 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(_QWORD *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      result = sub_2141EF6B8((uint64_t)v28, *(_QWORD *)(v4 + 48) + 152 * v13);
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_2142143A0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int64_t v38;

  v1 = v0;
  v2 = *v0;
  sub_2141D8BF8(&qword_253F11FB8);
  result = sub_2144254C0();
  v4 = result;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 0;
    v34 = (_QWORD *)(v2 + 56);
    v35 = v2;
    v6 = 1 << *(_BYTE *)(v2 + 32);
    if (v6 < 64)
      v7 = ~(-1 << v6);
    else
      v7 = -1;
    v8 = v7 & *(_QWORD *)(v2 + 56);
    v33 = (unint64_t)(v6 + 63) >> 6;
    v9 = result + 56;
    while (1)
    {
      if (v8)
      {
        v12 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        v38 = v5;
        v13 = v12 | (v5 << 6);
      }
      else
      {
        v14 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v14 >= v33)
          goto LABEL_33;
        v15 = v34[v14];
        v16 = v5 + 1;
        if (!v15)
        {
          v16 = v5 + 2;
          if (v5 + 2 >= v33)
            goto LABEL_33;
          v15 = v34[v16];
          if (!v15)
          {
            v16 = v5 + 3;
            if (v5 + 3 >= v33)
              goto LABEL_33;
            v15 = v34[v16];
            if (!v15)
            {
              v17 = v5 + 4;
              if (v5 + 4 >= v33)
              {
LABEL_33:
                v32 = 1 << *(_BYTE *)(v2 + 32);
                if (v32 > 63)
                  bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v34 = -1 << v32;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v15 = v34[v17];
              if (!v15)
              {
                while (1)
                {
                  v16 = v17 + 1;
                  if (__OFADD__(v17, 1))
                    goto LABEL_39;
                  if (v16 >= v33)
                    goto LABEL_33;
                  v15 = v34[v16];
                  ++v17;
                  if (v15)
                    goto LABEL_23;
                }
              }
              v16 = v5 + 4;
            }
          }
        }
LABEL_23:
        v8 = (v15 - 1) & v15;
        v38 = v16;
        v13 = __clz(__rbit64(v15)) + (v16 << 6);
      }
      v18 = (uint64_t *)(*(_QWORD *)(v2 + 48) + (v13 << 6));
      v20 = *v18;
      v19 = v18[1];
      v22 = v18[2];
      v21 = v18[3];
      v23 = v18[4];
      v24 = v18[6];
      v36 = v18[7];
      v37 = v18[5];
      sub_214425874();
      result = sub_2144258B0();
      v25 = -1 << *(_BYTE *)(v4 + 32);
      v26 = result & ~v25;
      v27 = v26 >> 6;
      if (((-1 << v26) & ~*(_QWORD *)(v9 + 8 * (v26 >> 6))) != 0)
      {
        v10 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v9 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v30 = v27 == v29;
          if (v27 == v29)
            v27 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v9 + 8 * v27);
        }
        while (v31 == -1);
        v10 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(_QWORD *)(v9 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
      v11 = (_QWORD *)(*(_QWORD *)(v4 + 48) + (v10 << 6));
      *v11 = v20;
      v11[1] = v19;
      v11[2] = v22;
      v11[3] = v21;
      v5 = v38;
      v11[4] = v23;
      v11[5] = v37;
      v2 = v35;
      v11[6] = v24;
      v11[7] = v36;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_2142146AC(uint64_t result, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  _BYTE v19[72];

  v5 = result;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_14;
  if ((a3 & 1) != 0)
  {
    sub_214212C14();
  }
  else
  {
    if (v7 > v6)
    {
      result = (uint64_t)sub_2142177D0();
      goto LABEL_14;
    }
    sub_21421839C();
  }
  v8 = *v3;
  sub_214425874();
  swift_bridgeObjectRetain();
  sub_21420FA40((uint64_t)v19, v5);
  swift_bridgeObjectRelease();
  result = sub_2144258B0();
  v9 = -1 << *(_BYTE *)(v8 + 32);
  a2 = result & ~v9;
  if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v10 = swift_bridgeObjectRetain();
    v11 = sub_21420F078(v10, v5);
    result = swift_bridgeObjectRelease();
    if ((v11 & 1) != 0)
    {
LABEL_13:
      result = sub_214425814();
      __break(1u);
    }
    else
    {
      v12 = ~v9;
      while (1)
      {
        a2 = (a2 + 1) & v12;
        if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        v13 = swift_bridgeObjectRetain();
        v14 = sub_21420F078(v13, v5);
        result = swift_bridgeObjectRelease();
        if ((v14 & 1) != 0)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v15 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v15 + 48) + 8 * a2) = v5;
  v16 = *(_QWORD *)(v15 + 16);
  v17 = __OFADD__(v16, 1);
  v18 = v16 + 1;
  if (v17)
    __break(1u);
  else
    *(_QWORD *)(v15 + 16) = v18;
  return result;
}

uint64_t sub_214214844(uint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  BOOL v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  v5 = v4;
  v8 = result;
  v9 = *(_QWORD *)(*v4 + 16);
  v10 = *(_QWORD *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0)
    goto LABEL_22;
  if ((a4 & 1) != 0)
  {
    sub_214212FA4();
  }
  else
  {
    if (v10 > v9)
    {
      result = (uint64_t)sub_214217978();
      goto LABEL_22;
    }
    sub_214218700();
  }
  v11 = *v4;
  sub_214425874();
  sub_214424F14();
  result = sub_2144258B0();
  v12 = -1 << *(_BYTE *)(v11 + 32);
  a3 = result & ~v12;
  v13 = v11 + 56;
  if (((*(_QWORD *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v14 = *(_QWORD *)(v11 + 48);
    v15 = (_QWORD *)(v14 + 16 * a3);
    v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (result = sub_214425790(), (result & 1) != 0))
    {
LABEL_21:
      result = sub_214425814();
      __break(1u);
    }
    else
    {
      v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(_QWORD *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
          break;
        v18 = (_QWORD *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          result = sub_214425790();
          if ((result & 1) == 0)
            continue;
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  v20 = *v5;
  *(_QWORD *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v21 = (uint64_t *)(*(_QWORD *)(v20 + 48) + 16 * a3);
  *v21 = v8;
  v21[1] = a2;
  v22 = *(_QWORD *)(v20 + 16);
  v23 = __OFADD__(v22, 1);
  v24 = v22 + 1;
  if (v23)
    __break(1u);
  else
    *(_QWORD *)(v20 + 16) = v24;
  return result;
}

uint64_t sub_2142149DC(uint64_t result, unint64_t a2, char a3)
{
  uint64_t *v3;
  int v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v5 = result;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_14;
  if ((a3 & 1) != 0)
  {
    sub_214213280();
  }
  else
  {
    if (v7 > v6)
    {
      result = (uint64_t)sub_214217B28();
      goto LABEL_14;
    }
    sub_2142189AC();
  }
  v8 = *v3;
  sub_214425874();
  sub_214425880();
  result = sub_2144258B0();
  v9 = -1 << *(_BYTE *)(v8 + 32);
  a2 = result & ~v9;
  if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v10 = *(_QWORD *)(v8 + 48);
    if (*(unsigned __int8 *)(v10 + a2) == v5)
    {
LABEL_13:
      result = sub_214425814();
      __break(1u);
    }
    else
    {
      v11 = ~v9;
      while (1)
      {
        a2 = (a2 + 1) & v11;
        if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        if (*(unsigned __int8 *)(v10 + a2) == v5)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v12 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_BYTE *)(*(_QWORD *)(v12 + 48) + a2) = v5;
  v13 = *(_QWORD *)(v12 + 16);
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
    __break(1u);
  else
    *(_QWORD *)(v12 + 16) = v15;
  return result;
}

uint64_t sub_214214B28(uint64_t result, unint64_t a2, char a3, uint64_t *a4)
{
  uint64_t *v4;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  v6 = result;
  v7 = *(_QWORD *)(*v4 + 16);
  v8 = *(_QWORD *)(*v4 + 24);
  if (v8 > v7 && (a3 & 1) != 0)
    goto LABEL_14;
  v9 = v7 + 1;
  if ((a3 & 1) != 0)
  {
    sub_214213534(v9, a4);
  }
  else
  {
    if (v8 > v7)
    {
      result = (uint64_t)sub_214217CC4(a4);
      goto LABEL_14;
    }
    sub_214218C30(v9, a4);
  }
  v10 = *v4;
  result = sub_214425868();
  v11 = -1 << *(_BYTE *)(v10 + 32);
  a2 = result & ~v11;
  if (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v12 = *(_QWORD *)(v10 + 48);
    if (*(_QWORD *)(v12 + 8 * a2) == v6)
    {
LABEL_13:
      result = sub_214425814();
      __break(1u);
    }
    else
    {
      v13 = ~v11;
      while (1)
      {
        a2 = (a2 + 1) & v13;
        if (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        if (*(_QWORD *)(v12 + 8 * a2) == v6)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v14 = *v4;
  *(_QWORD *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v14 + 48) + 8 * a2) = v6;
  v15 = *(_QWORD *)(v14 + 16);
  v16 = __OFADD__(v15, 1);
  v17 = v15 + 1;
  if (v16)
    __break(1u);
  else
    *(_QWORD *)(v14 + 16) = v17;
  return result;
}

uint64_t sub_214214C5C(uint64_t result, unint64_t a2, char a3)
{
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  char v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned __int8 *v45;
  int v46;
  unsigned __int8 *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  char v54;
  int v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  char v62;
  unsigned __int8 *v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  unsigned __int8 *v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  double v73;
  double v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  char v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  unint64_t v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char v110;
  uint64_t v111;
  uint64_t v112;
  char v113;
  uint64_t v114;
  int v115;
  uint64_t v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char v124;
  uint64_t v125;
  int v126;
  uint64_t v127;
  char v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char v141;
  char v142;
  _BYTE v143[152];
  _QWORD v144[19];
  _QWORD v145[19];
  _BYTE v146[160];

  v4 = result;
  v5 = *(_QWORD *)(*v3 + 16);
  v6 = *(_QWORD *)(*v3 + 24);
  if (v6 > v5 && (a3 & 1) != 0)
    goto LABEL_38;
  v97 = v3;
  if ((a3 & 1) != 0)
  {
    v7 = v3;
    sub_2142137B0();
  }
  else
  {
    if (v6 > v5)
    {
      v8 = a2;
      result = (uint64_t)sub_214217E50();
      a2 = v8;
LABEL_37:
      v3 = v97;
      goto LABEL_38;
    }
    v7 = v3;
    sub_214218E8C();
  }
  v96 = *v7;
  sub_214425874();
  v95 = *(_QWORD *)(v4 + 16);
  sub_214425880();
  v102 = v4;
  v140 = *(_QWORD *)(v4 + 16);
  if (v140)
  {
    v9 = v4 + 32;
    do
    {
      sub_2141EF6B8(v9, (uint64_t)v145);
      sub_2141EF6B8((uint64_t)v145, (uint64_t)v146);
      v13 = sub_21421C2FC((uint64_t)v146);
      v14 = sub_21421C308((uint64_t)v146);
      if (v13 != 1)
      {
        v24 = *(_QWORD *)(v14 + 8);
        v25 = *(_QWORD *)(v14 + 16);
        v26 = *(_BYTE *)(v14 + 24);
        v27 = *(_QWORD *)(v14 + 40);
        v28 = *(_QWORD *)(v14 + 48);
        v29 = *(char *)(v14 + 56);
        v30 = *(unsigned __int8 *)(v14 + 56);
        sub_214425880();
        sub_214425880();
        if (v29 < 0)
        {
          sub_214425880();
          sub_214425880();
          sub_214425898();
          sub_214425898();
          sub_21421C318(v145, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21420B7DC);
          sub_2141DD130(v24, v25, v26);
          swift_bridgeObjectRetain();
          v31 = v26;
        }
        else
        {
          sub_214425880();
          if (v30)
          {
            v31 = v26;
            sub_214425880();
            if (v30 == 1)
            {
              sub_214425898();
              sub_21421C318(v145, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21420B7DC);
              sub_2141DD130(v24, v25, v26);
              swift_bridgeObjectRetain();
            }
            else
            {
              sub_21421C318(v145, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21420B7DC);
              sub_2141DD130(v24, v25, v26);
              swift_bridgeObjectRetain();
              sub_2141DD140(v27, v28, 2);
              sub_214424F14();
            }
          }
          else
          {
            sub_214425880();
            sub_214425898();
            sub_21421C318(v145, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21420B7DC);
            v31 = v26;
            sub_2141DD130(v24, v25, v26);
            swift_bridgeObjectRetain();
          }
        }
        sub_214425880();
        sub_2141ED0BC(v24, v25, v31);
        swift_bridgeObjectRelease();
        v10 = v27;
        v11 = v28;
        v12 = v30;
        goto LABEL_11;
      }
      v15 = *(_QWORD *)(v14 + 16);
      v122 = *(_QWORD *)(v14 + 8);
      v128 = *(_BYTE *)(v14 + 24);
      v125 = *(_QWORD *)(v14 + 48);
      v16 = *(char *)(v14 + 56);
      v17 = *(unsigned __int8 *)(v14 + 56);
      v18 = *(_QWORD *)(v14 + 88);
      v130 = *(_QWORD *)(v14 + 40);
      v133 = *(_QWORD *)(v14 + 80);
      v19 = *(_BYTE *)(v14 + 96);
      v135 = *(_QWORD *)(v14 + 120);
      v138 = *(_QWORD *)(v14 + 112);
      v20 = *(unsigned __int8 *)(v14 + 128);
      sub_214425880();
      sub_214425880();
      if (v16 < 0)
      {
        sub_214425880();
        sub_214425880();
        sub_214425898();
        sub_214425898();
        sub_21421C318(v145, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21420B7DC);
        sub_2141DD130(v122, v15, v128);
        swift_bridgeObjectRetain();
        sub_2141DD130(v133, v18, v19);
        swift_bridgeObjectRetain();
        sub_2141DD140(v138, v135, v20);
        v21 = v20;
        v22 = v122;
        v23 = v15;
        if ((v21 & 0x80) == 0)
          goto LABEL_23;
      }
      else
      {
        v21 = v20;
        sub_214425880();
        if (v17)
        {
          v22 = v122;
          v23 = v15;
          if (v17 == 1)
          {
            sub_214425880();
            sub_214425898();
            sub_21421C318(v145, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21420B7DC);
            sub_2141DD130(v122, v15, v128);
            swift_bridgeObjectRetain();
            sub_2141DD130(v133, v18, v19);
            swift_bridgeObjectRetain();
            sub_2141DD140(v138, v135, v21);
            if ((v21 & 0x80) == 0)
              goto LABEL_23;
          }
          else
          {
            sub_214425880();
            sub_21421C318(v145, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21420B7DC);
            sub_2141DD130(v122, v15, v128);
            swift_bridgeObjectRetain();
            sub_2141DD130(v133, v18, v19);
            swift_bridgeObjectRetain();
            sub_2141DD140(v138, v135, v21);
            sub_2141DD140(v130, v125, 2);
            sub_214424F14();
            if ((v21 & 0x80) == 0)
            {
LABEL_23:
              sub_214425880();
              sub_214425880();
              if (v21 > 1)
                sub_214424F14();
              else
                sub_214425898();
              goto LABEL_10;
            }
          }
        }
        else
        {
          sub_214425880();
          sub_214425898();
          sub_21421C318(v145, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21420B7DC);
          v22 = v122;
          v23 = v15;
          sub_2141DD130(v122, v15, v128);
          swift_bridgeObjectRetain();
          sub_2141DD130(v133, v18, v19);
          swift_bridgeObjectRetain();
          sub_2141DD140(v138, v135, v21);
          if ((v21 & 0x80) == 0)
            goto LABEL_23;
        }
      }
      sub_214425880();
      sub_214425880();
      sub_214425898();
      sub_214425898();
LABEL_10:
      sub_2141ED0BC(v22, v23, v128);
      swift_bridgeObjectRelease();
      sub_2141EF1B0(v130, v125, v17);
      sub_2141ED0BC(v133, v18, v19);
      swift_bridgeObjectRelease();
      v11 = v135;
      v10 = v138;
      v12 = v21;
LABEL_11:
      sub_2141EF1B0(v10, v11, v12);
      sub_21421C318(v145, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141EF5D4);
      v9 += 152;
      --v140;
    }
    while (v140);
  }
  result = sub_2144258B0();
  v32 = v96;
  v33 = -1 << *(_BYTE *)(v96 + 32);
  a2 = result & ~v33;
  v34 = v96 + 56;
  if (((*(_QWORD *)(v96 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
  {
    v4 = v102;
    goto LABEL_37;
  }
  v35 = ~v33;
  v36 = v95;
  v4 = v102;
  v3 = v97;
  v94 = ~v33;
  while (2)
  {
    v42 = *(_QWORD *)(*(_QWORD *)(v32 + 48) + 8 * a2);
    if (*(_QWORD *)(v42 + 16) != v36)
      goto LABEL_43;
    v98 = a2;
    if (!v36 || v42 == v4)
      goto LABEL_166;
    swift_bridgeObjectRetain();
    sub_2141EF6B8(v42 + 32, (uint64_t)v144);
    if (!*(_QWORD *)(v4 + 16))
    {
LABEL_163:
      __break(1u);
      goto LABEL_164;
    }
    v43 = 0;
    v44 = 184;
    v103 = v42;
    while (1)
    {
      sub_2141EF6B8(v4 + v44 - 152, (uint64_t)v145);
      sub_2141EF6B8((uint64_t)v144, (uint64_t)v146);
      v127 = v44;
      v129 = v43;
      if (sub_21421C2FC((uint64_t)v146) == 1)
      {
        v45 = (unsigned __int8 *)sub_21421C308((uint64_t)v146);
        sub_2141EF6B8((uint64_t)v145, (uint64_t)v143);
        v46 = sub_21421C2FC((uint64_t)v143);
        v47 = (unsigned __int8 *)sub_21421C308((uint64_t)v143);
        if (v46 != 1 || *v45 != *v47)
          goto LABEL_162;
        v49 = *((_QWORD *)v45 + 1);
        v48 = *((_QWORD *)v45 + 2);
        v106 = v49;
        v107 = v48;
        v141 = v45[24];
        v50 = *((_QWORD *)v45 + 5);
        v51 = *((_QWORD *)v45 + 6);
        v52 = v45[56];
        v105 = v52;
        v53 = *((_QWORD *)v45 + 11);
        v109 = *((_QWORD *)v45 + 10);
        v54 = v45[96];
        v123 = *((_QWORD *)v45 + 14);
        v118 = *((_QWORD *)v45 + 15);
        v55 = v45[128];
        v124 = v55;
        v111 = *((_QWORD *)v47 + 1);
        v112 = *((_QWORD *)v47 + 2);
        v113 = v47[24];
        v101 = *((uint64_t *)v47 + 5);
        v108 = *((uint64_t *)v47 + 6);
        v100 = (char)v47[56];
        v131 = *((_QWORD *)v47 + 10);
        v134 = *((_QWORD *)v47 + 11);
        v136 = v47[96];
        v119 = *((uint64_t *)v47 + 14);
        v116 = *((uint64_t *)v47 + 15);
        v126 = (char)v47[128];
        sub_21421C318(v145, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21420B7DC);
        sub_21421C318(v144, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21420B7DC);
        sub_2141DD130(v49, v48, v141);
        swift_bridgeObjectRetain();
        v114 = v50;
        v104 = v51;
        sub_2141DD140(v50, v51, v52);
        v99 = v53;
        sub_2141DD130(v109, v53, v54);
        swift_bridgeObjectRetain();
        sub_2141DD140(v123, v118, v55);
        sub_2141DD130(v111, v112, v113);
        swift_bridgeObjectRetain();
        sub_2141DD140(v101, v108, v100);
        sub_2141DD130(v131, v134, v136);
        swift_bridgeObjectRetain();
        sub_2141DD140(v119, v116, v126);
        if ((sub_2144247F4() & 1) == 0)
        {
          v56 = v52;
          v57 = v123;
LABEL_134:
          v41 = v53;
          v59 = v108;
          v60 = v109;
          v61 = v100;
          v62 = v54;
          goto LABEL_41;
        }
        v56 = v52;
        if ((char)v52 < 0)
        {
          v57 = v123;
          v61 = v100;
          if ((v100 & 0x80000000) == 0)
          {
            v62 = v54;
LABEL_144:
            v41 = v53;
            v59 = v108;
            v60 = v109;
LABEL_41:
            sub_2141ED0BC(v131, v134, v136);
            swift_bridgeObjectRelease();
            sub_2141EF1B0(v119, v116, v126);
            sub_2141ED0BC(v111, v112, v113);
            swift_bridgeObjectRelease();
            sub_2141EF1B0(v101, v59, v61);
            sub_2141ED0BC(v60, v41, v62);
            swift_bridgeObjectRelease();
            sub_2141EF1B0(v57, v118, v55);
            sub_2141ED0BC(v49, v107, v141);
            swift_bridgeObjectRelease();
            sub_2141EF1B0(v114, v104, v56);
            sub_21421C318(v145, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141EF5D4);
            sub_21421C318(v144, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141EF5D4);
            result = swift_bridgeObjectRelease();
            v4 = v102;
LABEL_42:
            v32 = v96;
            v3 = v97;
            v34 = v96 + 56;
            v36 = v95;
            a2 = v98;
            v35 = v94;
            goto LABEL_43;
          }
          v62 = v54;
          if ((v52 & 1) != 0)
          {
            if ((v100 & 1) == 0)
              goto LABEL_144;
          }
          else if ((v100 & 1) != 0)
          {
            goto LABEL_144;
          }
          v58 = v53;
          v59 = v108;
          v60 = v109;
          if (*(double *)&v114 != *(double *)&v101 || *(double *)&v104 != *(double *)&v108)
            goto LABEL_40;
        }
        else
        {
          v57 = v123;
          if (v100 < 0)
            goto LABEL_134;
          if (v52)
          {
            v58 = v53;
            v59 = v108;
            v60 = v109;
            v61 = v100;
            if (v52 == 1)
            {
              if (v100 != 1)
              {
                v56 = 1;
                v62 = v54;
                goto LABEL_40;
              }
              v62 = v54;
              if (*(double *)&v114 != *(double *)&v101)
              {
                v56 = 1;
                v61 = 1;
LABEL_40:
                v41 = v58;
                goto LABEL_41;
              }
            }
            else
            {
              if (v100 != 2)
              {
                v56 = 2;
                v62 = v54;
                goto LABEL_40;
              }
              v62 = v54;
              if (v114 != v101 || v104 != v108)
              {
                v79 = sub_214425790();
                v58 = v99;
                if ((v79 & 1) == 0)
                {
                  v56 = 2;
                  v61 = 2;
                  goto LABEL_40;
                }
              }
            }
          }
          else
          {
            v58 = v53;
            v59 = v108;
            v60 = v109;
            v61 = v100;
            if (v100)
            {
              v56 = 0;
              v62 = v54;
              goto LABEL_40;
            }
            v62 = v54;
            if (*(double *)&v114 != *(double *)&v101)
            {
              v56 = 0;
              v61 = 0;
              goto LABEL_40;
            }
          }
        }
        v80 = v60;
        v81 = v58;
        if ((sub_2144247F4() & 1) == 0)
          goto LABEL_132;
        if ((char)v55 < 0)
        {
          if ((v126 & 0x80000000) == 0)
          {
LABEL_132:
            sub_2141ED0BC(v131, v134, v136);
            swift_bridgeObjectRelease();
            sub_2141EF1B0(v119, v116, v126);
            goto LABEL_156;
          }
          sub_2141ED0BC(v131, v134, v136);
          swift_bridgeObjectRelease();
          sub_2141ED0BC(v111, v112, v113);
          swift_bridgeObjectRelease();
          sub_2141EF1B0(v101, v59, v61);
          sub_2141ED0BC(v80, v81, v62);
          if ((v55 & 1) != 0)
          {
            v78 = v103;
            v83 = v127;
            v43 = v129;
            v82 = v118;
            if ((v126 & 1) == 0)
              goto LABEL_142;
          }
          else
          {
            v78 = v103;
            v83 = v127;
            v43 = v129;
            v82 = v118;
            if ((v126 & 1) != 0)
              goto LABEL_142;
          }
          if (*(double *)&v57 != *(double *)&v119)
          {
LABEL_142:
            v4 = v102;
            goto LABEL_159;
          }
          v4 = v102;
          if (*(double *)&v82 != *(double *)&v116)
            goto LABEL_159;
        }
        else
        {
          if (v126 < 0)
          {
            sub_2141ED0BC(v131, v134, v136);
            swift_bridgeObjectRelease();
            goto LABEL_156;
          }
          if (v55)
          {
            v110 = v62;
            if (v55 == 1)
            {
              v82 = v118;
              if (v126 == 1)
              {
                sub_2141ED0BC(v131, v134, v136);
                swift_bridgeObjectRelease();
                sub_2141EF1B0(v119, v116, 1);
                sub_2141ED0BC(v111, v112, v113);
                swift_bridgeObjectRelease();
                sub_2141EF1B0(v101, v59, v61);
                sub_2141ED0BC(v80, v81, v110);
                v4 = v102;
                v78 = v103;
                v83 = v127;
                v43 = v129;
                if (*(double *)&v57 != *(double *)&v119)
                {
                  v93 = 1;
                  goto LABEL_158;
                }
                goto LABEL_127;
              }
              sub_2141ED0BC(v131, v134, v136);
              swift_bridgeObjectRelease();
              sub_2141EF1B0(v119, v116, v126);
              v89 = 1;
            }
            else
            {
              v82 = v118;
              if (v126 == 2)
              {
                if (v57 == v119 && v118 == v116)
                {
                  sub_2141ED0BC(v131, v134, v136);
                  swift_bridgeObjectRelease();
                  sub_2141EF1B0(v57, v118, 2);
                  sub_2141ED0BC(v111, v112, v113);
                  swift_bridgeObjectRelease();
                  sub_2141EF1B0(v101, v59, v61);
                  sub_2141ED0BC(v80, v81, v110);
                  v4 = v102;
                  v78 = v103;
                  v83 = v127;
                  v43 = v129;
                }
                else
                {
                  v85 = sub_214425790();
                  sub_2141ED0BC(v131, v134, v136);
                  swift_bridgeObjectRelease();
                  sub_2141EF1B0(v119, v116, 2);
                  sub_2141ED0BC(v111, v112, v113);
                  swift_bridgeObjectRelease();
                  sub_2141EF1B0(v101, v59, v61);
                  sub_2141ED0BC(v80, v81, v110);
                  v4 = v102;
                  v78 = v103;
                  v83 = v127;
                  v43 = v129;
                  if ((v85 & 1) == 0)
                  {
                    v93 = 2;
LABEL_158:
                    v124 = v93;
LABEL_159:
                    v90 = v141;
                    v92 = v106;
                    v91 = v107;
                    goto LABEL_160;
                  }
                }
                goto LABEL_127;
              }
              sub_2141ED0BC(v131, v134, v136);
              swift_bridgeObjectRelease();
              sub_2141EF1B0(v119, v116, v126);
              v89 = 2;
            }
            v124 = v89;
            v62 = v110;
LABEL_156:
            sub_2141ED0BC(v111, v112, v113);
            swift_bridgeObjectRelease();
            sub_2141EF1B0(v101, v59, v61);
            sub_2141ED0BC(v80, v81, v62);
            v4 = v102;
            v90 = v141;
            v92 = v106;
            v91 = v107;
LABEL_160:
            swift_bridgeObjectRelease();
            sub_2141EF1B0(v123, v118, v124);
            sub_2141ED0BC(v92, v91, v90);
            swift_bridgeObjectRelease();
            sub_2141EF1B0(v114, v104, v105);
LABEL_161:
            sub_21421C318(v145, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141EF5D4);
            sub_21421C318(v144, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141EF5D4);
LABEL_162:
            result = swift_bridgeObjectRelease();
            goto LABEL_42;
          }
          if (v126)
          {
            sub_2141ED0BC(v131, v134, v136);
            swift_bridgeObjectRelease();
            sub_2141EF1B0(v119, v116, v126);
            v124 = 0;
            goto LABEL_156;
          }
          sub_2141ED0BC(v131, v134, v136);
          swift_bridgeObjectRelease();
          sub_2141EF1B0(v119, v116, 0);
          sub_2141ED0BC(v111, v112, v113);
          swift_bridgeObjectRelease();
          sub_2141EF1B0(v101, v59, v61);
          sub_2141ED0BC(v80, v81, v62);
          v4 = v102;
          v78 = v103;
          v83 = v127;
          v43 = v129;
          v82 = v118;
          if (*(double *)&v57 != *(double *)&v119)
          {
            v124 = 0;
            goto LABEL_159;
          }
        }
LABEL_127:
        swift_bridgeObjectRelease();
        sub_2141EF1B0(v57, v82, v55);
        sub_2141ED0BC(v106, v107, v141);
        swift_bridgeObjectRelease();
        sub_2141EF1B0(v114, v104, v105);
        sub_21421C318(v145, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141EF5D4);
        sub_21421C318(v144, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141EF5D4);
        goto LABEL_128;
      }
      v63 = (unsigned __int8 *)sub_21421C308((uint64_t)v146);
      v64 = *v63;
      v137 = *((_QWORD *)v63 + 2);
      v139 = *((_QWORD *)v63 + 1);
      v142 = v63[24];
      v65 = *((uint64_t *)v63 + 5);
      v66 = *((uint64_t *)v63 + 6);
      v132 = v63[56];
      v117 = v63[80];
      sub_2141EF6B8((uint64_t)v145, (uint64_t)v143);
      v67 = sub_21421C2FC((uint64_t)v143);
      v68 = (unsigned __int8 *)sub_21421C308((uint64_t)v143);
      if (v67 == 1 || v64 != *v68)
        break;
      v69 = *((_QWORD *)v68 + 2);
      v121 = *((_QWORD *)v68 + 1);
      v70 = v68[24];
      v71 = *((uint64_t *)v68 + 5);
      v72 = *((uint64_t *)v68 + 6);
      v120 = (char)v68[56];
      v115 = v68[80];
      sub_21421C318(v145, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21420B7DC);
      sub_21421C318(v144, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21420B7DC);
      sub_2141DD130(v139, v137, v142);
      swift_bridgeObjectRetain();
      sub_2141DD140(v65, v66, v132);
      sub_2141DD130(v121, v69, v70);
      swift_bridgeObjectRetain();
      sub_2141DD140(v71, v72, v120);
      if ((sub_2144247F4() & 1) == 0)
      {
        sub_2141ED0BC(v121, v69, v70);
        swift_bridgeObjectRelease();
        sub_2141EF1B0(v71, v72, v120);
LABEL_138:
        sub_2141ED0BC(v139, v137, v142);
        swift_bridgeObjectRelease();
        v86 = v65;
        v87 = v66;
        v88 = v132;
        goto LABEL_139;
      }
      if ((v132 & 0x80) != 0)
      {
        if ((v120 & 0x80000000) == 0)
        {
          sub_2141ED0BC(v121, v69, v70);
          swift_bridgeObjectRelease();
          sub_2141EF1B0(v71, v72, v120);
          sub_2141ED0BC(v139, v137, v142);
          swift_bridgeObjectRelease();
          goto LABEL_140;
        }
        sub_2141ED0BC(v121, v69, v70);
        swift_bridgeObjectRelease();
        sub_2141ED0BC(v139, v137, v142);
        swift_bridgeObjectRelease();
        if ((v132 & 1) != 0)
        {
          v4 = v102;
          if ((v120 & 1) == 0)
            goto LABEL_161;
        }
        else
        {
          v4 = v102;
          if ((v120 & 1) != 0)
            goto LABEL_161;
        }
        if (*(double *)&v65 != *(double *)&v71)
          goto LABEL_161;
        v78 = v103;
        if (*(double *)&v66 != *(double *)&v72)
          goto LABEL_161;
      }
      else
      {
        if (v120 < 0)
        {
          sub_2141ED0BC(v121, v69, v70);
          swift_bridgeObjectRelease();
          goto LABEL_138;
        }
        if (!v132)
        {
          if (v120)
          {
            sub_2141ED0BC(v121, v69, v70);
            swift_bridgeObjectRelease();
            sub_2141EF1B0(v71, v72, v120);
            sub_2141ED0BC(v139, v137, v142);
            swift_bridgeObjectRelease();
            v86 = v65;
            v87 = v66;
            v88 = 0;
            goto LABEL_139;
          }
          v73 = *(double *)&v65;
          v74 = *(double *)&v71;
          sub_2141ED0BC(v121, v69, v70);
          swift_bridgeObjectRelease();
          sub_2141EF1B0(v71, v72, 0);
          sub_2141ED0BC(v139, v137, v142);
          swift_bridgeObjectRelease();
          v75 = v65;
          v76 = v66;
          v77 = 0;
          goto LABEL_82;
        }
        if (v132 == 1)
        {
          if (v120 != 1)
          {
            sub_2141ED0BC(v121, v69, v70);
            swift_bridgeObjectRelease();
            sub_2141EF1B0(v71, v72, v120);
            sub_2141ED0BC(v139, v137, v142);
            swift_bridgeObjectRelease();
            v86 = v65;
            v87 = v66;
            v88 = 1;
            goto LABEL_139;
          }
          v73 = *(double *)&v65;
          v74 = *(double *)&v71;
          sub_2141ED0BC(v121, v69, v70);
          swift_bridgeObjectRelease();
          sub_2141EF1B0(v71, v72, 1);
          sub_2141ED0BC(v139, v137, v142);
          swift_bridgeObjectRelease();
          v75 = v65;
          v76 = v66;
          v77 = 1;
LABEL_82:
          sub_2141EF1B0(v75, v76, v77);
          v4 = v102;
          v78 = v103;
          if (v73 != v74)
            goto LABEL_161;
          goto LABEL_124;
        }
        if (v120 != 2)
        {
          sub_2141ED0BC(v121, v69, v70);
          swift_bridgeObjectRelease();
          sub_2141EF1B0(v71, v72, v120);
          sub_2141ED0BC(v139, v137, v142);
          swift_bridgeObjectRelease();
          v86 = v65;
          v87 = v66;
          v88 = 2;
LABEL_139:
          sub_2141EF1B0(v86, v87, v88);
LABEL_140:
          v4 = v102;
          goto LABEL_161;
        }
        if (v65 == v71 && v66 == v72)
        {
          sub_2141ED0BC(v121, v69, v70);
          swift_bridgeObjectRelease();
          sub_2141EF1B0(v65, v66, 2);
          sub_2141ED0BC(v139, v137, v142);
          swift_bridgeObjectRelease();
          sub_2141EF1B0(v65, v66, 2);
          v4 = v102;
          v78 = v103;
        }
        else
        {
          v84 = sub_214425790();
          sub_2141ED0BC(v121, v69, v70);
          swift_bridgeObjectRelease();
          sub_2141EF1B0(v71, v72, 2);
          sub_2141ED0BC(v139, v137, v142);
          swift_bridgeObjectRelease();
          sub_2141EF1B0(v65, v66, 2);
          v4 = v102;
          v78 = v103;
          if ((v84 & 1) == 0)
            goto LABEL_161;
        }
      }
LABEL_124:
      sub_21421C318(v145, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141EF5D4);
      sub_21421C318(v144, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141EF5D4);
      if (v117 != v115)
        goto LABEL_162;
      v83 = v127;
LABEL_128:
      if (v95 - 1 == v43)
        goto LABEL_165;
      sub_2141EF6B8(v78 + v83, (uint64_t)v144);
      v44 = v83 + 152;
      if ((unint64_t)++v43 >= *(_QWORD *)(v4 + 16))
        goto LABEL_163;
    }
    result = swift_bridgeObjectRelease();
    v32 = v96;
    v3 = v97;
    v34 = v96 + 56;
    v36 = v95;
    a2 = v98;
    v35 = v94;
LABEL_43:
    a2 = (a2 + 1) & v35;
    if (((*(_QWORD *)(v34 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
      continue;
    break;
  }
LABEL_38:
  v37 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v37 + 48) + 8 * a2) = v4;
  v38 = *(_QWORD *)(v37 + 16);
  v39 = __OFADD__(v38, 1);
  v40 = v38 + 1;
  if (!v39)
  {
    *(_QWORD *)(v37 + 16) = v40;
    return result;
  }
LABEL_164:
  __break(1u);
LABEL_165:
  swift_bridgeObjectRelease();
LABEL_166:
  sub_2141D8BF8(&qword_253F12240);
  result = sub_214425814();
  __break(1u);
  return result;
}

uint64_t sub_21421647C(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v4;
  int v5;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  int v14;
  uint64_t *v15;
  uint64_t *v16;
  int v17;
  unsigned __int8 *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  unsigned __int8 *v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  char v34;
  double v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  double v48;
  double v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  char v53;
  char v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t result;
  uint64_t v59;
  BOOL v60;
  uint64_t v61;
  unsigned __int8 v62;
  unsigned __int8 v63;
  char v64;
  int v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  int v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD v95[19];
  _BYTE v96[152];
  _BYTE v97[152];
  _BYTE v98[152];
  _QWORD v99[20];

  v8 = *(_QWORD *)(*v3 + 16);
  v9 = *(_QWORD *)(*v3 + 24);
  if (v9 > v8 && (a3 & 1) != 0)
    goto LABEL_109;
  if ((a3 & 1) != 0)
  {
    sub_2142140D4();
  }
  else
  {
    if (v9 > v8)
    {
      sub_214217FF8();
      goto LABEL_109;
    }
    sub_214219784();
  }
  v10 = *v3;
  sub_214425874();
  sub_2142FFD88((uint64_t)v99);
  v11 = sub_2144258B0();
  v12 = -1 << *(_BYTE *)(v10 + 32);
  a2 = v11 & ~v12;
  v94 = v10 + 56;
  if (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    sub_2141EF6B8(*(_QWORD *)(v10 + 48) + 152 * a2, (uint64_t)v99);
    sub_21421C318(v99, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21420B7DC);
    v13 = sub_214302F90((uint64_t)v99, a1);
    sub_21421C318(v99, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141EF5D4);
    if (v13)
      goto LABEL_114;
    v93 = ~v12;
    a2 = (a2 + 1) & ~v12;
    if (((*(_QWORD *)(v94 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
    {
      v74 = v10;
      v75 = a1;
      while (1)
      {
        sub_2141EF6B8(*(_QWORD *)(v10 + 48) + 152 * a2, (uint64_t)v95);
        sub_2141EF6B8((uint64_t)v95, (uint64_t)v96);
        v14 = sub_21421C2FC((uint64_t)v96);
        v15 = (uint64_t *)sub_21421C308((uint64_t)v96);
        v16 = v15;
        if (v14 == 1)
        {
          sub_2141EF6B8(a1, (uint64_t)v98);
          v17 = sub_21421C2FC((uint64_t)v98);
          v18 = (unsigned __int8 *)sub_21421C308((uint64_t)v98);
          if (v17 != 1 || *(unsigned __int8 *)v16 != *v18)
            goto LABEL_15;
          v83 = *((_QWORD *)v18 + 1);
          v70 = *((_QWORD *)v18 + 2);
          v71 = *((uint64_t *)v18 + 6);
          v65 = (char)v18[56];
          v85 = *((_QWORD *)v18 + 10);
          v86 = *((_QWORD *)v18 + 11);
          v87 = *((uint64_t *)v18 + 5);
          v76 = *((uint64_t *)v18 + 15);
          v77 = *((uint64_t *)v18 + 14);
          v78 = (char)v18[128];
          v62 = v18[24];
          v63 = v18[96];
          v89 = v16[1];
          v90 = v16[2];
          v91 = *((_BYTE *)v16 + 24);
          v4 = v16[5];
          v73 = v4;
          v19 = v16[6];
          v5 = *((unsigned __int8 *)v16 + 56);
          v20 = v16[10];
          v21 = v16[11];
          v22 = *((_BYTE *)v16 + 96);
          v84 = v16[14];
          v81 = v16[15];
          v23 = *((unsigned __int8 *)v16 + 128);
          sub_21421C318(v95, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21420B7DC);
          sub_2141DD130(v89, v90, v91);
          swift_bridgeObjectRetain();
          v24 = v4;
          v72 = v19;
          LOBYTE(v4) = v65;
          sub_2141DD140(v24, v19, v5);
          v67 = v20;
          v68 = v21;
          v69 = v22;
          sub_2141DD130(v20, v21, v22);
          swift_bridgeObjectRetain();
          v66 = v23;
          sub_2141DD140(v84, v81, v23);
          sub_2141DD130(v83, v70, v62 & 1);
          swift_bridgeObjectRetain();
          sub_2141DD140(v87, v71, v65);
          sub_2141DD130(v85, v86, v63 & 1);
          swift_bridgeObjectRetain();
          sub_2141DD140(v77, v76, v78);
          if ((sub_2144247F4() & 1) == 0)
            goto LABEL_13;
          v64 = v5;
          if ((v5 & 0x80) != 0)
          {
            if (v65 < 0)
            {
              if ((v5 & 1) != 0)
              {
                if ((v65 & 1) == 0)
                  goto LABEL_13;
              }
              else if ((v65 & 1) != 0)
              {
                goto LABEL_13;
              }
              if (*(double *)&v73 != *(double *)&v87 || *(double *)&v19 != *(double *)&v71)
                goto LABEL_13;
              goto LABEL_67;
            }
          }
          else if ((v65 & 0x80000000) == 0)
          {
            if (v5)
            {
              if (v5 != 1)
              {
                if (v65 != 2 || (v73 != v87 || v19 != v71) && (sub_214425790() & 1) == 0)
                  goto LABEL_13;
                goto LABEL_67;
              }
              LOBYTE(v5) = 1;
              if (v65 == 1)
              {
LABEL_48:
                if (*(double *)&v73 != *(double *)&v87)
                  goto LABEL_13;
LABEL_67:
                if ((sub_2144247F4() & 1) == 0)
                {
                  v46 = v81;
                  LOBYTE(v5) = v91;
                  sub_2141ED0BC(v85, v86, v63 & 1);
                  swift_bridgeObjectRelease();
                  sub_2141EF1B0(v77, v76, v78);
                  v42 = v71;
                  goto LABEL_103;
                }
                if ((v23 & 0x80) == 0)
                {
                  v42 = v71;
                  v43 = v78;
                  v44 = v85;
                  v45 = v86;
                  if (v78 < 0)
                  {
                    v46 = v81;
                    LOBYTE(v5) = v91;
                    sub_2141ED0BC(v85, v86, v63 & 1);
                    swift_bridgeObjectRelease();
                    goto LABEL_103;
                  }
                  if (v66)
                  {
                    if (v66 == 1)
                    {
                      v46 = v81;
                      LOBYTE(v5) = v91;
                      if (v78 == 1)
                      {
                        v47 = v62 & 1;
                        v48 = *(double *)&v84;
                        v49 = *(double *)&v77;
                        sub_2141ED0BC(v85, v86, v63 & 1);
                        swift_bridgeObjectRelease();
                        v50 = v77;
                        v51 = v76;
                        v52 = 1;
LABEL_93:
                        sub_2141EF1B0(v50, v51, v52);
                        v53 = v47;
                        v42 = v71;
                        sub_2141ED0BC(v83, v70, v53);
                        swift_bridgeObjectRelease();
                        v10 = v74;
                        a1 = v75;
                        if (v48 == v49)
                          goto LABEL_108;
LABEL_104:
                        sub_2141EF1B0(v87, v42, v65);
                        sub_2141ED0BC(v67, v68, v22);
                        swift_bridgeObjectRelease();
                        sub_2141EF1B0(v84, v46, v66);
                        sub_2141ED0BC(v89, v90, v5);
                        swift_bridgeObjectRelease();
                        sub_2141EF1B0(v73, v19, v64);
                        goto LABEL_14;
                      }
LABEL_102:
                      sub_2141ED0BC(v44, v45, v63 & 1);
                      swift_bridgeObjectRelease();
                      sub_2141EF1B0(v77, v76, v43);
LABEL_103:
                      sub_2141ED0BC(v83, v70, v62 & 1);
                      swift_bridgeObjectRelease();
                      v10 = v74;
                      a1 = v75;
                      goto LABEL_104;
                    }
                    if (v78 == 2)
                    {
                      LOBYTE(v5) = v91;
                      if (v84 == v77 && v81 == v76)
                        goto LABEL_112;
                      v46 = v81;
                      v54 = sub_214425790();
                      sub_2141ED0BC(v85, v86, v63 & 1);
                      swift_bridgeObjectRelease();
                      sub_2141EF1B0(v77, v76, 2);
                      sub_2141ED0BC(v83, v70, v62 & 1);
                      swift_bridgeObjectRelease();
                      v10 = v74;
                      a1 = v75;
                      v42 = v71;
                      if ((v54 & 1) != 0)
                      {
LABEL_108:
                        v55 = v66;
                        v56 = v73;
                        v76 = v46;
                        v77 = v84;
                        goto LABEL_113;
                      }
                      goto LABEL_104;
                    }
LABEL_100:
                    v46 = v81;
                  }
                  else
                  {
                    v46 = v81;
                    if (!v78)
                    {
                      LOBYTE(v5) = v91;
                      v47 = v62 & 1;
                      v48 = *(double *)&v84;
                      v49 = *(double *)&v77;
                      sub_2141ED0BC(v85, v86, v63 & 1);
                      swift_bridgeObjectRelease();
                      v50 = v77;
                      v51 = v76;
                      v52 = 0;
                      goto LABEL_93;
                    }
                  }
                  LOBYTE(v5) = v91;
                  goto LABEL_102;
                }
                v42 = v71;
                v43 = v78;
                v44 = v85;
                v45 = v86;
                if (v78 < 0)
                {
                  v46 = v81;
                  LOBYTE(v5) = v91;
                  sub_2141ED0BC(v85, v86, v63 & 1);
                  swift_bridgeObjectRelease();
                  sub_2141ED0BC(v83, v70, v62 & 1);
                  swift_bridgeObjectRelease();
                  if ((v66 & 1) != 0)
                  {
                    v10 = v74;
                    a1 = v75;
                    v42 = v71;
                    if ((v78 & 1) == 0)
                      goto LABEL_104;
                  }
                  else
                  {
                    v10 = v74;
                    a1 = v75;
                    v42 = v71;
                    if ((v78 & 1) != 0)
                      goto LABEL_104;
                  }
                  if (*(double *)&v84 == *(double *)&v77 && *(double *)&v81 == *(double *)&v76)
                    goto LABEL_108;
                  goto LABEL_104;
                }
                goto LABEL_100;
              }
            }
            else if (!v65)
            {
              goto LABEL_48;
            }
          }
LABEL_13:
          sub_2141ED0BC(v85, v86, v63 & 1);
          swift_bridgeObjectRelease();
          sub_2141EF1B0(v77, v76, v78);
          sub_2141ED0BC(v83, v70, v62 & 1);
          swift_bridgeObjectRelease();
          sub_2141EF1B0(v87, v71, v65);
          sub_2141ED0BC(v20, v21, v22);
          swift_bridgeObjectRelease();
          sub_2141EF1B0(v84, v81, v23);
          sub_2141ED0BC(v89, v90, v91);
          swift_bridgeObjectRelease();
          sub_2141EF1B0(v73, v19, v5);
          v10 = v74;
          a1 = v75;
          goto LABEL_14;
        }
        v25 = *(unsigned __int8 *)v15;
        v26 = v15[1];
        v27 = v15[2];
        v5 = *((unsigned __int8 *)v15 + 24);
        v4 = v15[4];
        v89 = v15[6];
        v90 = v15[5];
        v92 = *((unsigned __int8 *)v15 + 56);
        v28 = *((unsigned __int8 *)v15 + 80);
        sub_2141EF6B8(a1, (uint64_t)v97);
        v29 = sub_21421C2FC((uint64_t)v97);
        v30 = (unsigned __int8 *)sub_21421C308((uint64_t)v97);
        if (v29 == 1 || v25 != *v30)
          goto LABEL_15;
        LODWORD(v72) = v28;
        v83 = *((_QWORD *)v30 + 1);
        v82 = *((_QWORD *)v30 + 2);
        LODWORD(v77) = v30[24];
        v31 = *((uint64_t *)v30 + 5);
        v32 = v5;
        v33 = v4;
        v4 = *((uint64_t *)v30 + 6);
        v79 = (char)v30[56];
        LODWORD(v71) = v30[80];
        sub_21421C318(v95, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21420B7DC);
        sub_2141DD130(v26, v27, v5);
        swift_bridgeObjectRetain();
        sub_2141DD140(v90, v89, v92);
        LOBYTE(v5) = v82;
        sub_2141DD130(v83, v82, v77);
        swift_bridgeObjectRetain();
        v76 = v31;
        v73 = v4;
        sub_2141DD140(v31, v4, v79);
        v85 = v27;
        LODWORD(v86) = v32;
        v87 = v33;
        if ((sub_2144247F4() & 1) == 0)
        {
          sub_2141ED0BC(v83, v82, v77);
          swift_bridgeObjectRelease();
          sub_2141EF1B0(v31, v4, v79);
          v34 = v32;
LABEL_62:
          sub_2141ED0BC(v26, v27, v34);
          swift_bridgeObjectRelease();
          v10 = v74;
          a1 = v75;
          v40 = v92;
          v41 = v89;
LABEL_63:
          sub_2141EF1B0(v90, v41, v40);
LABEL_14:
          sub_21421C318(v95, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141EF5D4);
          goto LABEL_15;
        }
        if ((v92 & 0x80) == 0)
          break;
        if ((v79 & 0x80000000) == 0)
          goto LABEL_51;
        sub_2141ED0BC(v83, v82, v77);
        swift_bridgeObjectRelease();
        sub_2141ED0BC(v26, v27, v32);
        swift_bridgeObjectRelease();
        v40 = v92;
        if ((v92 & 1) == 0)
        {
          v10 = v74;
          a1 = v75;
          v41 = v89;
          if ((v79 & 1) != 0 || *(double *)&v90 != *(double *)&v31 || *(double *)&v89 != *(double *)&v4)
            goto LABEL_63;
          goto LABEL_81;
        }
        v10 = v74;
        a1 = v75;
        v41 = v89;
        if ((v79 & 1) == 0 || *(double *)&v90 != *(double *)&v31)
          goto LABEL_63;
        sub_2141EF1B0(v90, v89, v92);
        if (*(double *)&v89 != *(double *)&v4)
          goto LABEL_14;
LABEL_82:
        sub_21421C318(v95, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141EF5D4);
        if (v28 == (_DWORD)v71)
          goto LABEL_114;
LABEL_15:
        a2 = (a2 + 1) & v93;
        if (((*(_QWORD *)(v94 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          goto LABEL_109;
      }
      if (v79 < 0)
      {
        sub_2141ED0BC(v83, v82, v77);
        swift_bridgeObjectRelease();
        v34 = v32;
        goto LABEL_62;
      }
      if (v92)
      {
        LOBYTE(v4) = v31;
        if (v92 != 1)
        {
          v34 = v32;
          if (v79 != 2)
          {
LABEL_61:
            sub_2141ED0BC(v83, v82, v77);
            swift_bridgeObjectRelease();
            sub_2141EF1B0(v31, v73, v79);
            goto LABEL_62;
          }
          if (v90 == v31 && v89 == v73)
          {
            sub_2141ED0BC(v83, v82, v77);
            swift_bridgeObjectRelease();
            sub_2141EF1B0(v90, v89, 2);
            sub_2141ED0BC(v26, v27, v32);
            swift_bridgeObjectRelease();
            v10 = v74;
            a1 = v75;
            v40 = v92;
            v41 = v89;
          }
          else
          {
            v80 = sub_214425790();
            sub_2141ED0BC(v83, v82, v77);
            swift_bridgeObjectRelease();
            sub_2141EF1B0(v31, v73, 2);
            sub_2141ED0BC(v26, v27, v32);
            swift_bridgeObjectRelease();
            v10 = v74;
            a1 = v75;
            v40 = v92;
            v41 = v89;
            if ((v80 & 1) == 0)
              goto LABEL_63;
          }
          goto LABEL_81;
        }
        v34 = v32;
        if (v79 != 1)
          goto LABEL_61;
        v35 = *(double *)&v90;
        v36 = *(double *)&v31;
        sub_2141ED0BC(v83, v82, v77);
        swift_bridgeObjectRelease();
        sub_2141EF1B0(v31, v73, 1);
        v37 = v26;
        v38 = v27;
        v39 = v32;
      }
      else
      {
        LOBYTE(v4) = v31;
        if (v79)
        {
LABEL_51:
          sub_2141ED0BC(v83, v82, v77);
          swift_bridgeObjectRelease();
          sub_2141EF1B0(v31, v73, v79);
          v34 = v32;
          goto LABEL_62;
        }
        v35 = *(double *)&v90;
        v36 = *(double *)&v31;
        sub_2141ED0BC(v83, v82, v77);
        swift_bridgeObjectRelease();
        sub_2141EF1B0(v31, v73, 0);
        v37 = v26;
        v38 = v27;
        v39 = v32;
      }
      sub_2141ED0BC(v37, v38, v39);
      swift_bridgeObjectRelease();
      v10 = v74;
      a1 = v75;
      v40 = v92;
      v41 = v89;
      if (v35 != v36)
        goto LABEL_63;
LABEL_81:
      sub_2141EF1B0(v90, v41, v40);
      goto LABEL_82;
    }
  }
LABEL_109:
  v57 = *v88;
  *(_QWORD *)(*v88 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = sub_2141EF6B8(a1, *(_QWORD *)(v57 + 48) + 152 * a2);
  v59 = *(_QWORD *)(v57 + 16);
  v60 = __OFADD__(v59, 1);
  v61 = v59 + 1;
  if (!v60)
  {
    *(_QWORD *)(v57 + 16) = v61;
    return result;
  }
  __break(1u);
LABEL_112:
  v55 = v66;
  v56 = v73;
  sub_2141ED0BC(v85, v86, v63 & 1);
  swift_bridgeObjectRelease();
  sub_2141EF1B0(v77, v76, 2);
  sub_2141ED0BC(v83, v70, v62 & 1);
  swift_bridgeObjectRelease();
LABEL_113:
  sub_2141EF1B0(v87, v71, v4);
  sub_2141ED0BC(v67, v68, v69);
  swift_bridgeObjectRelease();
  sub_2141EF1B0(v77, v76, v55);
  sub_2141ED0BC(v89, v90, v5);
  swift_bridgeObjectRelease();
  sub_2141EF1B0(v56, v72, v64);
  sub_21421C318(v95, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141EF5D4);
LABEL_114:
  result = sub_214425814();
  __break(1u);
  return result;
}

uint64_t sub_2142172C0(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  char v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[2];
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 <= v6 || (a3 & 1) == 0)
  {
    if ((a3 & 1) != 0)
    {
      sub_2142143A0();
    }
    else
    {
      if (v7 > v6)
      {
        sub_2142181D4();
        goto LABEL_21;
      }
      sub_214219A2C();
    }
    v8 = *v3;
    sub_214425874();
    v9 = sub_2144258B0();
    v10 = -1 << *(_BYTE *)(v8 + 32);
    a2 = v9 & ~v10;
    v35 = v8 + 56;
    v36 = v8;
    if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
    {
      v33 = (_QWORD *)a1;
      v34 = ~v10;
      do
      {
        v12 = (uint64_t *)(*(_QWORD *)(v36 + 48) + (a2 << 6));
        v14 = *v12;
        v13 = v12[1];
        v15 = v12[2];
        v38 = v12[3];
        v17 = v12[4];
        v16 = v12[5];
        v18 = v12[6];
        if (v18 < 0)
        {
          v11 = (_QWORD *)a1;
          sub_21421C19C(a1, (uint64_t)v39);
          v20 = v43;
          if (v43 < 0)
          {
            v43 &= ~0x8000000000000000;
            v31 = v39[1];
            v32 = v39[0];
            v30 = v40;
            v28 = v41;
            v29 = v42;
            sub_21421C1D8(v14, v13, v15, v38, v17, v16, v18);
            sub_2141DD130(v14, v13, v15 & 1);
            swift_bridgeObjectRetain();
            sub_2141DD130(v32, v31, v30);
            swift_bridgeObjectRetain();
            sub_2141DD130(v17, v16, v18 & 1);
            swift_bridgeObjectRetain();
            sub_2141DD130(v28, v29, v20 & 1);
            swift_bridgeObjectRetain();
            if ((sub_2144247F4() & 1) != 0)
            {
              v26 = sub_2144247F4();
              sub_2141ED0BC(v28, v29, v20 & 1);
              swift_bridgeObjectRelease();
              sub_2141ED0BC(v17, v16, v18 & 1);
              swift_bridgeObjectRelease();
              sub_2141ED0BC(v32, v31, v30);
              swift_bridgeObjectRelease();
              sub_2141ED0BC(v14, v13, v15 & 1);
              swift_bridgeObjectRelease();
              sub_21421C24C(v14, v13, v15, v38, v17, v16, v18);
              v11 = v33;
              if ((v26 & 1) != 0)
                goto LABEL_24;
            }
            else
            {
              sub_2141ED0BC(v28, v29, v20 & 1);
              swift_bridgeObjectRelease();
              sub_2141ED0BC(v17, v16, v18 & 1);
              swift_bridgeObjectRelease();
              sub_2141ED0BC(v32, v31, v30);
              swift_bridgeObjectRelease();
              sub_2141ED0BC(v14, v13, v15 & 1);
              swift_bridgeObjectRelease();
              sub_21421C24C(v14, v13, v15, v38, v17, v16, v18);
              v11 = v33;
            }
          }
        }
        else
        {
          sub_21421C19C(a1, (uint64_t)&v44);
          if (v45 < 0)
          {
            v11 = (_QWORD *)a1;
            v45 &= ~0x8000000000000000;
          }
          else
          {
            v37 = v16;
            sub_21421C1D8(v14, v13, v15, v38, v17, v16, v18);
            sub_21421C2C0(v33, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21421C1D8);
            v19 = sub_2144247F4();
            v11 = v33;
            sub_21421C2C0(v33, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21421C24C);
            sub_21421C24C(v14, v13, v15, v38, v17, v37, v18);
            if ((v19 & 1) != 0)
              goto LABEL_24;
          }
        }
        a2 = (a2 + 1) & v34;
        a1 = (uint64_t)v11;
      }
      while (((*(_QWORD *)(v35 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
    }
  }
LABEL_21:
  v21 = *v27;
  *(_QWORD *)(*v27 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = sub_21421C19C(a1, *(_QWORD *)(v21 + 48) + (a2 << 6));
  v23 = *(_QWORD *)(v21 + 16);
  v24 = __OFADD__(v23, 1);
  v25 = v23 + 1;
  if (v24)
  {
    __break(1u);
LABEL_24:
    result = sub_214425814();
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v21 + 16) = v25;
  }
  return result;
}

void *sub_2142177D0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v1 = v0;
  sub_2141D8BF8(&qword_254D695B0);
  v2 = *v0;
  v3 = sub_2144254B4();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_28;
      v17 = *(_QWORD *)(v6 + 8 * v9);
      if (!v17)
      {
        v9 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_28;
        v17 = *(_QWORD *)(v6 + 8 * v9);
        if (!v17)
          break;
      }
    }
LABEL_27:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v15) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    result = (void *)swift_bridgeObjectRetain();
  }
  v18 = v16 + 3;
  if (v18 >= v13)
    goto LABEL_28;
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_214217978()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  sub_2141D8BF8(&qword_253F105C8);
  v2 = *v0;
  v3 = sub_2144254B4();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_28;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
      {
        v9 = v20 + 2;
        if (v20 + 2 >= v13)
          goto LABEL_28;
        v21 = *(_QWORD *)(v6 + 8 * v9);
        if (!v21)
          break;
      }
    }
LABEL_27:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    v18 = v17[1];
    v19 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v19 = *v17;
    v19[1] = v18;
    result = (void *)swift_bridgeObjectRetain();
  }
  v22 = v20 + 3;
  if (v22 >= v13)
    goto LABEL_28;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_214217B28()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v1 = v0;
  sub_2141D8BF8(&qword_254D695D0);
  v2 = *v0;
  v3 = sub_2144254B4();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_28;
      v17 = *(_QWORD *)(v6 + 8 * v9);
      if (!v17)
      {
        v9 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_28;
        v17 = *(_QWORD *)(v6 + 8 * v9);
        if (!v17)
          break;
      }
    }
LABEL_27:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
  }
  v18 = v16 + 3;
  if (v18 >= v13)
    goto LABEL_28;
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_214217CB8()
{
  return sub_214217CC4(&qword_253F105D0);
}

void *sub_214217CC4(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;

  v2 = v1;
  sub_2141D8BF8(a1);
  v3 = *v1;
  v4 = sub_2144254B4();
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v2 = v5;
    return result;
  }
  result = (void *)(v4 + 56);
  v7 = v3 + 56;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 56 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 56), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 56);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v17 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v17 >= v14)
      goto LABEL_28;
    v18 = *(_QWORD *)(v7 + 8 * v17);
    ++v10;
    if (!v18)
    {
      v10 = v17 + 1;
      if (v17 + 1 >= v14)
        goto LABEL_28;
      v18 = *(_QWORD *)(v7 + 8 * v10);
      if (!v18)
      {
        v10 = v17 + 2;
        if (v17 + 2 >= v14)
          goto LABEL_28;
        v18 = *(_QWORD *)(v7 + 8 * v10);
        if (!v18)
          break;
      }
    }
LABEL_27:
    v13 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v10 << 6);
LABEL_12:
    *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v16) = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v16);
  }
  v19 = v17 + 3;
  if (v19 >= v14)
    goto LABEL_28;
  v18 = *(_QWORD *)(v7 + 8 * v19);
  if (v18)
  {
    v10 = v19;
    goto LABEL_27;
  }
  while (1)
  {
    v10 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v10 >= v14)
      goto LABEL_28;
    v18 = *(_QWORD *)(v7 + 8 * v10);
    ++v19;
    if (v18)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_214217E50()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v1 = v0;
  sub_2141D8BF8(&qword_254D695D8);
  v2 = *v0;
  v3 = sub_2144254B4();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_28;
      v17 = *(_QWORD *)(v6 + 8 * v9);
      if (!v17)
      {
        v9 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_28;
        v17 = *(_QWORD *)(v6 + 8 * v9);
        if (!v17)
          break;
      }
    }
LABEL_27:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v15) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    result = (void *)swift_bridgeObjectRetain();
  }
  v18 = v16 + 3;
  if (v18 >= v13)
    goto LABEL_28;
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_214217FF8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD v20[20];

  v1 = v0;
  sub_2141D8BF8(&qword_254D695E0);
  v2 = *v0;
  v3 = sub_2144254B4();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v17 >= v13)
      goto LABEL_28;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      v9 = v17 + 1;
      if (v17 + 1 >= v13)
        goto LABEL_28;
      v18 = *(_QWORD *)(v6 + 8 * v9);
      if (!v18)
      {
        v9 = v17 + 2;
        if (v17 + 2 >= v13)
          goto LABEL_28;
        v18 = *(_QWORD *)(v6 + 8 * v9);
        if (!v18)
          break;
      }
    }
LABEL_27:
    v12 = (v18 - 1) & v18;
    v15 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_12:
    v16 = 152 * v15;
    sub_2141EF6B8(*(_QWORD *)(v2 + 48) + 152 * v15, (uint64_t)v20);
    sub_2141EF6B8((uint64_t)v20, *(_QWORD *)(v4 + 48) + v16);
    result = sub_21421C318(v20, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21420B7DC);
  }
  v19 = v17 + 3;
  if (v19 >= v13)
    goto LABEL_28;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
    v9 = v19;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v18 = *(_QWORD *)(v6 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_2142181D4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;

  v1 = v0;
  sub_2141D8BF8(&qword_253F11FB8);
  v2 = *v0;
  v3 = sub_2144254B4();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v27 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v27 >= v13)
      goto LABEL_28;
    v28 = *(_QWORD *)(v6 + 8 * v27);
    ++v9;
    if (!v28)
    {
      v9 = v27 + 1;
      if (v27 + 1 >= v13)
        goto LABEL_28;
      v28 = *(_QWORD *)(v6 + 8 * v9);
      if (!v28)
      {
        v9 = v27 + 2;
        if (v27 + 2 >= v13)
          goto LABEL_28;
        v28 = *(_QWORD *)(v6 + 8 * v9);
        if (!v28)
          break;
      }
    }
LABEL_27:
    v12 = (v28 - 1) & v28;
    v15 = __clz(__rbit64(v28)) + (v9 << 6);
LABEL_12:
    v16 = v15 << 6;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + v16);
    v18 = *v17;
    v19 = v17[1];
    v20 = v17[2];
    v21 = v17[3];
    v22 = v17[4];
    v23 = v17[5];
    v24 = v17[6];
    v25 = v17[7];
    v26 = (uint64_t *)(*(_QWORD *)(v4 + 48) + v16);
    *v26 = *v17;
    v26[1] = v19;
    v26[2] = v20;
    v26[3] = v21;
    v26[4] = v22;
    v26[5] = v23;
    v26[6] = v24;
    v26[7] = v25;
    result = (void *)sub_21421C1D8(v18, v19, v20, v21, v22, v23, v24);
  }
  v29 = v27 + 3;
  if (v29 >= v13)
    goto LABEL_28;
  v28 = *(_QWORD *)(v6 + 8 * v29);
  if (v28)
  {
    v9 = v29;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v29 + 1;
    if (__OFADD__(v29, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v28 = *(_QWORD *)(v6 + 8 * v9);
    ++v29;
    if (v28)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_21421839C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  _OWORD v29[2];
  uint64_t v30;
  _OWORD v31[2];
  uint64_t v32;
  char v33;
  _BYTE v34[48];

  v1 = v0;
  v2 = *v0;
  sub_2141D8BF8(&qword_254D695B0);
  v3 = sub_2144254C0();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_43:
    *v1 = v4;
    return result;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v27 = v2 + 56;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  else
    v6 = -1;
  v7 = v6 & *(_QWORD *)(v2 + 56);
  v28 = (unint64_t)(v5 + 63) >> 6;
  v8 = v3 + 56;
  result = swift_retain();
  v10 = 0;
  while (1)
  {
    if (v7)
    {
      v12 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }
    v14 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
LABEL_44:
      __break(1u);
      goto LABEL_45;
    }
    if (v14 >= v28)
      goto LABEL_41;
    v15 = *(_QWORD *)(v27 + 8 * v14);
    ++v10;
    if (!v15)
    {
      v10 = v14 + 1;
      if (v14 + 1 >= v28)
        goto LABEL_41;
      v15 = *(_QWORD *)(v27 + 8 * v10);
      if (!v15)
      {
        v10 = v14 + 2;
        if (v14 + 2 >= v28)
          goto LABEL_41;
        v15 = *(_QWORD *)(v27 + 8 * v10);
        if (!v15)
          break;
      }
    }
LABEL_23:
    v7 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v13);
    sub_214425874();
    sub_214425880();
    v18 = *(_QWORD *)(v17 + 16);
    if (v18)
    {
      v19 = v17 + 32;
      swift_bridgeObjectRetain_n();
      do
      {
        sub_214219DE0(v19, (uint64_t)v34);
        sub_214219DE0((uint64_t)v34, (uint64_t)v31);
        if ((v33 & 1) != 0)
        {
          v29[0] = v31[0];
          v29[1] = v31[1];
          v30 = v32;
          sub_214425880();
          sub_21442546C();
          sub_214219E1C((uint64_t)v29);
        }
        else
        {
          sub_214425880();
          sub_214425880();
        }
        sub_214219E50((uint64_t)v34);
        v19 += 48;
        --v18;
      }
      while (v18);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRetain();
    }
    result = sub_2144258B0();
    v20 = -1 << *(_BYTE *)(v4 + 32);
    v21 = result & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v8 + 8 * (v21 >> 6))) != 0)
    {
      v11 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v8 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v23 = 0;
      v24 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v25 = v22 == v24;
        if (v22 == v24)
          v22 = 0;
        v23 |= v25;
        v26 = *(_QWORD *)(v8 + 8 * v22);
      }
      while (v26 == -1);
      v11 = __clz(__rbit64(~v26)) + (v22 << 6);
    }
    *(_QWORD *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v11) = v17;
    ++*(_QWORD *)(v4 + 16);
  }
  v16 = v14 + 3;
  if (v16 >= v28)
  {
LABEL_41:
    result = swift_release_n();
    v1 = v0;
    goto LABEL_43;
  }
  v15 = *(_QWORD *)(v27 + 8 * v16);
  if (v15)
  {
    v10 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    v10 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v10 >= v28)
      goto LABEL_41;
    v15 = *(_QWORD *)(v27 + 8 * v10);
    ++v16;
    if (v15)
      goto LABEL_23;
  }
LABEL_45:
  __break(1u);
  return result;
}

uint64_t sub_214218700()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  int64_t v29;

  v1 = v0;
  v2 = *v0;
  sub_2141D8BF8(&qword_253F105C8);
  v3 = sub_2144254C0();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = v2 + 56;
  if (v5 < 64)
    v7 = ~(-1 << v5);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v29 = (unint64_t)(v5 + 63) >> 6;
  v9 = v3 + 56;
  result = swift_retain();
  v11 = 0;
  while (1)
  {
    if (v8)
    {
      v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      v11 = v16 + 1;
      if (v16 + 1 >= v29)
        goto LABEL_33;
      v17 = *(_QWORD *)(v6 + 8 * v11);
      if (!v17)
      {
        v11 = v16 + 2;
        if (v16 + 2 >= v29)
          goto LABEL_33;
        v17 = *(_QWORD *)(v6 + 8 * v11);
        if (!v17)
          break;
      }
    }
LABEL_23:
    v8 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    v19 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v20 = *v19;
    v21 = v19[1];
    sub_214425874();
    swift_bridgeObjectRetain();
    sub_214424F14();
    result = sub_2144258B0();
    v22 = -1 << *(_BYTE *)(v4 + 32);
    v23 = result & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v27 = v24 == v26;
        if (v24 == v26)
          v24 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    v13 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v12);
    *v13 = v20;
    v13[1] = v21;
    ++*(_QWORD *)(v4 + 16);
  }
  v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v0;
    goto LABEL_35;
  }
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    v11 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v11 >= v29)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v11);
    ++v18;
    if (v17)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_2142189AC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  char v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;

  v1 = v0;
  v2 = *v0;
  sub_2141D8BF8(&qword_254D695D0);
  result = sub_2144254C0();
  v4 = result;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v5 = 0;
  v6 = v2 + 56;
  v7 = 1 << *(_BYTE *)(v2 + 32);
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v2 + 56);
  v10 = (unint64_t)(v7 + 63) >> 6;
  v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v10)
      goto LABEL_33;
    v16 = *(_QWORD *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      v5 = v15 + 1;
      if (v15 + 1 >= v10)
        goto LABEL_33;
      v16 = *(_QWORD *)(v6 + 8 * v5);
      if (!v16)
      {
        v5 = v15 + 2;
        if (v15 + 2 >= v10)
          goto LABEL_33;
        v16 = *(_QWORD *)(v6 + 8 * v5);
        if (!v16)
          break;
      }
    }
LABEL_23:
    v9 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    v18 = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v14);
    sub_214425874();
    sub_214425880();
    result = sub_2144258B0();
    v19 = -1 << *(_BYTE *)(v4 + 32);
    v20 = result & ~v19;
    v21 = v20 >> 6;
    if (((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v22 = 0;
      v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v24 = v21 == v23;
        if (v21 == v23)
          v21 = 0;
        v22 |= v24;
        v25 = *(_QWORD *)(v11 + 8 * v21);
      }
      while (v25 == -1);
      v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(_QWORD *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v12) = v18;
    ++*(_QWORD *)(v4 + 16);
  }
  v17 = v15 + 3;
  if (v17 >= v10)
  {
LABEL_33:
    result = swift_release();
    v1 = v0;
    goto LABEL_35;
  }
  v16 = *(_QWORD *)(v6 + 8 * v17);
  if (v16)
  {
    v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    v5 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v5 >= v10)
      goto LABEL_33;
    v16 = *(_QWORD *)(v6 + 8 * v5);
    ++v17;
    if (v16)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_214218C24(uint64_t a1)
{
  return sub_214218C30(a1, &qword_253F105D0);
}

uint64_t sub_214218C30(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t *v28;

  v3 = v2;
  v4 = *v2;
  sub_2141D8BF8(a2);
  result = sub_2144254C0();
  v6 = result;
  if (!*(_QWORD *)(v4 + 16))
  {
    result = swift_release();
LABEL_35:
    *v3 = v6;
    return result;
  }
  v28 = v3;
  v7 = 0;
  v8 = v4 + 56;
  v9 = 1 << *(_BYTE *)(v4 + 32);
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v4 + 56);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = result + 56;
  while (1)
  {
    if (v11)
    {
      v15 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v16 = v15 | (v7 << 6);
      goto LABEL_24;
    }
    v17 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v17 >= v12)
      goto LABEL_33;
    v18 = *(_QWORD *)(v8 + 8 * v17);
    ++v7;
    if (!v18)
    {
      v7 = v17 + 1;
      if (v17 + 1 >= v12)
        goto LABEL_33;
      v18 = *(_QWORD *)(v8 + 8 * v7);
      if (!v18)
      {
        v7 = v17 + 2;
        if (v17 + 2 >= v12)
          goto LABEL_33;
        v18 = *(_QWORD *)(v8 + 8 * v7);
        if (!v18)
          break;
      }
    }
LABEL_23:
    v11 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v7 << 6);
LABEL_24:
    v20 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v16);
    result = sub_214425868();
    v21 = -1 << *(_BYTE *)(v6 + 32);
    v22 = result & ~v21;
    v23 = v22 >> 6;
    if (((-1 << v22) & ~*(_QWORD *)(v13 + 8 * (v22 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v26 = v23 == v25;
        if (v23 == v25)
          v23 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)(v13 + 8 * v23);
      }
      while (v27 == -1);
      v14 = __clz(__rbit64(~v27)) + (v23 << 6);
    }
    *(_QWORD *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v14) = v20;
    ++*(_QWORD *)(v6 + 16);
  }
  v19 = v17 + 3;
  if (v19 >= v12)
  {
LABEL_33:
    result = swift_release();
    v3 = v28;
    goto LABEL_35;
  }
  v18 = *(_QWORD *)(v8 + 8 * v19);
  if (v18)
  {
    v7 = v19;
    goto LABEL_23;
  }
  while (1)
  {
    v7 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v7 >= v12)
      goto LABEL_33;
    v18 = *(_QWORD *)(v8 + 8 * v7);
    ++v19;
    if (v18)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_214218E8C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t result;
  int64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  int v22;
  uint64_t v23;
  char v24;
  int v25;
  int v26;
  uint64_t v27;
  char v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  unsigned int v38;
  char v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char v43;
  unint64_t v44;
  BOOL v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  int64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD v67[19];
  _BYTE v68[152];

  v1 = *v0;
  sub_2141D8BF8(&qword_254D695D8);
  v2 = sub_2144254C0();
  v3 = v2;
  if (!*(_QWORD *)(v1 + 16))
  {
    result = swift_release();
LABEL_60:
    *v47 = v3;
    return result;
  }
  v4 = 1 << *(_BYTE *)(v1 + 32);
  v48 = v1 + 56;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(v1 + 56);
  v49 = (unint64_t)(v4 + 63) >> 6;
  v50 = v2 + 56;
  result = swift_retain();
  v8 = 0;
  v51 = v1;
  v52 = v3;
  while (1)
  {
    if (v6)
    {
      v55 = (v6 - 1) & v6;
      v53 = v8;
      v11 = __clz(__rbit64(v6)) | (v8 << 6);
      goto LABEL_24;
    }
    v12 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_61:
      __break(1u);
      goto LABEL_62;
    }
    if (v12 >= v49)
      goto LABEL_58;
    v13 = *(_QWORD *)(v48 + 8 * v12);
    v14 = v8 + 1;
    if (!v13)
    {
      v14 = v8 + 2;
      if (v8 + 2 >= v49)
        goto LABEL_58;
      v13 = *(_QWORD *)(v48 + 8 * v14);
      if (!v13)
      {
        v14 = v8 + 3;
        if (v8 + 3 >= v49)
          goto LABEL_58;
        v13 = *(_QWORD *)(v48 + 8 * v14);
        if (!v13)
          break;
      }
    }
LABEL_23:
    v55 = (v13 - 1) & v13;
    v53 = v14;
    v11 = __clz(__rbit64(v13)) + (v14 << 6);
LABEL_24:
    v16 = *(_QWORD *)(*(_QWORD *)(v1 + 48) + 8 * v11);
    sub_214425874();
    sub_214425880();
    v17 = *(_QWORD *)(v16 + 16);
    v54 = v16;
    if (v17)
    {
      v18 = v16 + 32;
      swift_bridgeObjectRetain();
      while (1)
      {
        sub_2141EF6B8(v18, (uint64_t)v67);
        sub_2141EF6B8((uint64_t)v67, (uint64_t)v68);
        v22 = sub_21421C2FC((uint64_t)v68);
        v23 = sub_21421C308((uint64_t)v68);
        if (v22 != 1)
        {
          v33 = *(_QWORD *)(v23 + 16);
          v34 = *(_BYTE *)(v23 + 24);
          v35 = *(_QWORD *)(v23 + 40);
          v66 = *(_QWORD *)(v23 + 8);
          v36 = *(_QWORD *)(v23 + 48);
          v37 = *(char *)(v23 + 56);
          v38 = *(unsigned __int8 *)(v23 + 56);
          sub_214425880();
          sub_214425880();
          if (v37 < 0)
          {
            sub_214425880();
            sub_214425880();
            sub_214425898();
            sub_214425898();
            sub_21421C318(v67, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21420B7DC);
            sub_2141DD130(v66, v33, v34);
            swift_bridgeObjectRetain();
            v39 = v38;
          }
          else
          {
            sub_214425880();
            v39 = v38;
            sub_214425880();
            if (v38 > 1)
            {
              sub_21421C318(v67, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21420B7DC);
              sub_2141DD130(v66, v33, v34);
              swift_bridgeObjectRetain();
              sub_2141DD140(v35, v36, 2);
              sub_214424F14();
            }
            else
            {
              sub_214425898();
              sub_21421C318(v67, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21420B7DC);
              sub_2141DD130(v66, v33, v34);
              swift_bridgeObjectRetain();
            }
          }
          sub_214425880();
          sub_2141ED0BC(v66, v33, v34);
          swift_bridgeObjectRelease();
          v19 = v35;
          v20 = v36;
          v21 = v39;
          goto LABEL_28;
        }
        v58 = v18;
        v59 = *(_QWORD *)(v23 + 16);
        v24 = *(_BYTE *)(v23 + 24);
        v61 = *(_QWORD *)(v23 + 40);
        v62 = *(_QWORD *)(v23 + 8);
        v60 = *(_QWORD *)(v23 + 48);
        v25 = *(char *)(v23 + 56);
        v26 = *(unsigned __int8 *)(v23 + 56);
        v27 = *(_QWORD *)(v23 + 88);
        v28 = *(_BYTE *)(v23 + 96);
        v65 = *(_QWORD *)(v23 + 112);
        v63 = *(_QWORD *)(v23 + 80);
        v64 = *(_QWORD *)(v23 + 120);
        v29 = *(unsigned __int8 *)(v23 + 128);
        sub_214425880();
        sub_214425880();
        v57 = v26;
        if (v25 < 0)
          break;
        v56 = v24;
        v30 = v29;
        sub_214425880();
        if (!v26)
        {
          sub_214425880();
          sub_214425898();
          sub_21421C318(v67, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21420B7DC);
          v31 = v59;
          sub_2141DD130(v62, v59, v24);
          swift_bridgeObjectRetain();
          sub_2141DD130(v63, v27, v28);
          swift_bridgeObjectRetain();
          sub_2141DD140(v65, v64, v30);
          v32 = v24;
LABEL_41:
          v18 = v58;
          if ((v30 & 0x80) == 0)
            goto LABEL_42;
          goto LABEL_45;
        }
        v31 = v59;
        v18 = v58;
        if (v26 == 1)
        {
          sub_214425880();
          sub_214425898();
          sub_21421C318(v67, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21420B7DC);
          v32 = v56;
          sub_2141DD130(v62, v59, v56);
          swift_bridgeObjectRetain();
          sub_2141DD130(v63, v27, v28);
          swift_bridgeObjectRetain();
          sub_2141DD140(v65, v64, v30);
          if ((v30 & 0x80) == 0)
            goto LABEL_42;
        }
        else
        {
          sub_214425880();
          sub_21421C318(v67, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21420B7DC);
          sub_2141DD130(v62, v59, v56);
          swift_bridgeObjectRetain();
          sub_2141DD130(v63, v27, v28);
          swift_bridgeObjectRetain();
          sub_2141DD140(v65, v64, v30);
          sub_2141DD140(v61, v60, 2);
          v32 = v56;
          sub_214424F14();
          if ((v30 & 0x80) == 0)
          {
LABEL_42:
            sub_214425880();
            sub_214425880();
            if (v30 > 1)
              sub_214424F14();
            else
              sub_214425898();
            goto LABEL_27;
          }
        }
LABEL_45:
        sub_214425880();
        sub_214425880();
        sub_214425898();
        sub_214425898();
        v31 = v59;
LABEL_27:
        sub_2141ED0BC(v62, v31, v32);
        swift_bridgeObjectRelease();
        sub_2141EF1B0(v61, v60, v57);
        sub_2141ED0BC(v63, v27, v28);
        swift_bridgeObjectRelease();
        v20 = v64;
        v19 = v65;
        v21 = v30;
LABEL_28:
        sub_2141EF1B0(v19, v20, v21);
        sub_21421C318(v67, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141EF5D4);
        v18 += 152;
        if (!--v17)
          goto LABEL_49;
      }
      sub_214425880();
      v32 = v24;
      sub_214425880();
      sub_214425898();
      sub_214425898();
      sub_21421C318(v67, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21420B7DC);
      sub_2141DD130(v62, v59, v24);
      swift_bridgeObjectRetain();
      sub_2141DD130(v63, v27, v28);
      swift_bridgeObjectRetain();
      sub_2141DD140(v65, v64, v29);
      v30 = v29;
      v31 = v59;
      goto LABEL_41;
    }
    swift_bridgeObjectRetain();
LABEL_49:
    result = sub_2144258B0();
    v3 = v52;
    v40 = -1 << *(_BYTE *)(v52 + 32);
    v41 = result & ~v40;
    v42 = v41 >> 6;
    if (((-1 << v41) & ~*(_QWORD *)(v50 + 8 * (v41 >> 6))) != 0)
    {
      v9 = __clz(__rbit64((-1 << v41) & ~*(_QWORD *)(v50 + 8 * (v41 >> 6)))) | v41 & 0x7FFFFFFFFFFFFFC0;
      v1 = v51;
      v10 = v54;
      v6 = v55;
    }
    else
    {
      v43 = 0;
      v44 = (unint64_t)(63 - v40) >> 6;
      v1 = v51;
      v10 = v54;
      v6 = v55;
      do
      {
        if (++v42 == v44 && (v43 & 1) != 0)
        {
          __break(1u);
          goto LABEL_61;
        }
        v45 = v42 == v44;
        if (v42 == v44)
          v42 = 0;
        v43 |= v45;
        v46 = *(_QWORD *)(v50 + 8 * v42);
      }
      while (v46 == -1);
      v9 = __clz(__rbit64(~v46)) + (v42 << 6);
    }
    *(_QWORD *)(v50 + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v9;
    *(_QWORD *)(*(_QWORD *)(v52 + 48) + 8 * v9) = v10;
    ++*(_QWORD *)(v52 + 16);
    v8 = v53;
  }
  v15 = v8 + 4;
  if (v8 + 4 >= v49)
  {
LABEL_58:
    result = swift_release_n();
    goto LABEL_60;
  }
  v13 = *(_QWORD *)(v48 + 8 * v15);
  if (v13)
  {
    v14 = v8 + 4;
    goto LABEL_23;
  }
  while (1)
  {
    v14 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v14 >= v49)
      goto LABEL_58;
    v13 = *(_QWORD *)(v48 + 8 * v14);
    ++v15;
    if (v13)
      goto LABEL_23;
  }
LABEL_62:
  __break(1u);
  return result;
}

uint64_t sub_214219784()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char v21;
  unint64_t v22;
  BOOL v23;
  uint64_t v24;
  char v25[72];
  _QWORD v26[20];

  v1 = *v0;
  sub_2141D8BF8(&qword_254D695E0);
  v2 = sub_2144254C0();
  v3 = v2;
  if (!*(_QWORD *)(v1 + 16))
  {
    result = swift_release();
LABEL_35:
    *v0 = v3;
    return result;
  }
  v4 = 1 << *(_BYTE *)(v1 + 32);
  v5 = v1 + 56;
  if (v4 < 64)
    v6 = ~(-1 << v4);
  else
    v6 = -1;
  v7 = v6 & *(_QWORD *)(v1 + 56);
  v8 = (unint64_t)(v4 + 63) >> 6;
  v9 = v2 + 56;
  result = swift_retain();
  v11 = 0;
  while (1)
  {
    if (v7)
    {
      v13 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v14 = v13 | (v11 << 6);
      goto LABEL_24;
    }
    v15 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v8)
      goto LABEL_33;
    v16 = *(_QWORD *)(v5 + 8 * v15);
    ++v11;
    if (!v16)
    {
      v11 = v15 + 1;
      if (v15 + 1 >= v8)
        goto LABEL_33;
      v16 = *(_QWORD *)(v5 + 8 * v11);
      if (!v16)
      {
        v11 = v15 + 2;
        if (v15 + 2 >= v8)
          goto LABEL_33;
        v16 = *(_QWORD *)(v5 + 8 * v11);
        if (!v16)
          break;
      }
    }
LABEL_23:
    v7 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_24:
    sub_2141EF6B8(*(_QWORD *)(v1 + 48) + 152 * v14, (uint64_t)v26);
    sub_214425874();
    sub_21421C318(v26, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21420B7DC);
    sub_2142FFD88((uint64_t)v25);
    result = sub_2144258B0();
    v18 = -1 << *(_BYTE *)(v3 + 32);
    v19 = result & ~v18;
    v20 = v19 >> 6;
    if (((-1 << v19) & ~*(_QWORD *)(v9 + 8 * (v19 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v19) & ~*(_QWORD *)(v9 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v21 = 0;
      v22 = (unint64_t)(63 - v18) >> 6;
      do
      {
        if (++v20 == v22 && (v21 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v23 = v20 == v22;
        if (v20 == v22)
          v20 = 0;
        v21 |= v23;
        v24 = *(_QWORD *)(v9 + 8 * v20);
      }
      while (v24 == -1);
      v12 = __clz(__rbit64(~v24)) + (v20 << 6);
    }
    *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    result = sub_2141EF6B8((uint64_t)v26, *(_QWORD *)(v3 + 48) + 152 * v12);
    ++*(_QWORD *)(v3 + 16);
  }
  v17 = v15 + 3;
  if (v17 >= v8)
  {
LABEL_33:
    result = swift_release_n();
    goto LABEL_35;
  }
  v16 = *(_QWORD *)(v5 + 8 * v17);
  if (v16)
  {
    v11 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    v11 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v11 >= v8)
      goto LABEL_33;
    v16 = *(_QWORD *)(v5 + 8 * v11);
    ++v17;
    if (v16)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_214219A2C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int64_t v37;

  v1 = v0;
  v2 = *v0;
  sub_2141D8BF8(&qword_253F11FB8);
  result = sub_2144254C0();
  v4 = result;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v5 = 0;
  v32 = v2 + 56;
  v6 = 1 << *(_BYTE *)(v2 + 32);
  if (v6 < 64)
    v7 = ~(-1 << v6);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v33 = (unint64_t)(v6 + 63) >> 6;
  v34 = v2;
  v9 = result + 56;
  while (1)
  {
    if (v8)
    {
      v36 = (v8 - 1) & v8;
      v37 = v5;
      v12 = __clz(__rbit64(v8)) | (v5 << 6);
      goto LABEL_24;
    }
    v13 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v13 >= v33)
      goto LABEL_33;
    v14 = *(_QWORD *)(v32 + 8 * v13);
    v15 = v5 + 1;
    if (!v14)
    {
      v15 = v5 + 2;
      if (v5 + 2 >= v33)
        goto LABEL_33;
      v14 = *(_QWORD *)(v32 + 8 * v15);
      if (!v14)
      {
        v15 = v5 + 3;
        if (v5 + 3 >= v33)
          goto LABEL_33;
        v14 = *(_QWORD *)(v32 + 8 * v15);
        if (!v14)
          break;
      }
    }
LABEL_23:
    v36 = (v14 - 1) & v14;
    v37 = v15;
    v12 = __clz(__rbit64(v14)) + (v15 << 6);
LABEL_24:
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + (v12 << 6));
    v18 = *v17;
    v19 = v17[1];
    v20 = v17[2];
    v21 = v17[3];
    v22 = v17[4];
    v23 = v17[5];
    v24 = v17[7];
    v35 = v17[6];
    sub_214425874();
    result = sub_2144258B0();
    v25 = -1 << *(_BYTE *)(v4 + 32);
    v26 = result & ~v25;
    v27 = v26 >> 6;
    if (((-1 << v26) & ~*(_QWORD *)(v9 + 8 * (v26 >> 6))) != 0)
    {
      v10 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v9 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v28 = 0;
      v29 = (unint64_t)(63 - v25) >> 6;
      do
      {
        if (++v27 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v30 = v27 == v29;
        if (v27 == v29)
          v27 = 0;
        v28 |= v30;
        v31 = *(_QWORD *)(v9 + 8 * v27);
      }
      while (v31 == -1);
      v10 = __clz(__rbit64(~v31)) + (v27 << 6);
    }
    *(_QWORD *)(v9 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
    v11 = (uint64_t *)(*(_QWORD *)(v4 + 48) + (v10 << 6));
    *v11 = v18;
    v11[1] = v19;
    v11[2] = v20;
    v11[3] = v21;
    v11[4] = v22;
    v11[5] = v23;
    v11[6] = v35;
    v11[7] = v24;
    ++*(_QWORD *)(v4 + 16);
    result = sub_21421C1D8(v18, v19, v20, v21, v22, v23, v35);
    v2 = v34;
    v8 = v36;
    v5 = v37;
  }
  v16 = v5 + 4;
  if (v5 + 4 >= v33)
  {
LABEL_33:
    result = swift_release();
    v1 = v0;
    goto LABEL_35;
  }
  v14 = *(_QWORD *)(v32 + 8 * v16);
  if (v14)
  {
    v15 = v5 + 4;
    goto LABEL_23;
  }
  while (1)
  {
    v15 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v15 >= v33)
      goto LABEL_33;
    v14 = *(_QWORD *)(v32 + 8 * v15);
    ++v16;
    if (v14)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

BOOL sub_214219D1C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;

  if (*a1 != *a2 || a1[1] != a2[1] || a1[2] != a2[2])
    return 0;
  v5 = a1[24];
  v6 = a2[24];
  if (v5 <= 0xFB)
  {
    if (v6 > 0xFB
      || (sub_2143D8994(*((_QWORD *)a1 + 1), *((_QWORD *)a1 + 2), v5, *((_QWORD *)a2 + 1), *((_QWORD *)a2 + 2), v6) & 1) == 0)
    {
      return 0;
    }
  }
  else if (v6 <= 0xFB)
  {
    return 0;
  }
  v7 = a1[48];
  v8 = a2[48];
  if (v7 <= 0xFB)
    return v8 <= 0xFB
        && (sub_2143D8994(*((_QWORD *)a1 + 4), *((_QWORD *)a1 + 5), v7, *((_QWORD *)a2 + 4), *((_QWORD *)a2 + 5), v8) & 1) != 0;
  return v8 > 0xFB;
}

uint64_t sub_214219DE0(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for ChartContentList.ID.Component(a2, a1);
  return a2;
}

uint64_t sub_214219E1C(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x24BEE23D0] - 8) + 8))();
  return a1;
}

uint64_t sub_214219E50(uint64_t a1)
{
  destroy for ChartContentList.ID.Component(a1);
  return a1;
}

uint64_t sub_214219E84(uint64_t a1, uint64_t a2, char a3, double a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  char v11;
  double v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  void (*v17)(double *__return_ptr, uint64_t *);
  double v18;
  uint64_t v20;
  double v21;
  _BYTE v22[8];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(double *__return_ptr, uint64_t *);
  char v27;

  v5 = v4;
  sub_2141E801C(v4, (uint64_t)v22, &qword_253F13368);
  if (a3 < 0)
  {
    v14 = v23;
    v15 = v24;
    v16 = v25;
    sub_2141E801C(v5, (uint64_t)&v26, &qword_253F13368);
    if ((v27 & 1) == 0)
    {
      v20 = a1;
      v17 = v26;
      swift_retain();
      sub_2141D975C(v14);
      swift_bridgeObjectRetain();
      sub_2141E83DC(v15, v16);
      v17(&v21, &v20);
      v18 = v21;
      v20 = a2;
      v17(&v21, &v20);
      sub_21421D004(v5, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_21421BB6C);
      v13 = v18 + a4;
      goto LABEL_10;
    }
  }
  else
  {
    sub_2141DD14C(a1, a2, a3);
    *(double *)&v10 = COERCE_DOUBLE(sub_2142B6AB8(a1, a2, a3));
    if ((v11 & 1) == 0)
    {
      v12 = *(double *)&v10;
      sub_2141E801C(v5, (uint64_t)&v26, &qword_253F13368);
      if ((v27 & 1) == 0)
      {
        sub_2141EF1B0(a1, a2, a3);
        return *(_QWORD *)&v12;
      }
      if (a3 == 2)
      {
        sub_2141EF1B0(a1, a2, 2);
        v13 = v12 + a4;
LABEL_10:
        v12 = v13;
        return *(_QWORD *)&v12;
      }
    }
    sub_2141EF1B0(a1, a2, a3);
  }
  v12 = 0.0;
  return *(_QWORD *)&v12;
}

uint64_t sub_21421A07C@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char a3@<W2>, char a4@<W4>, char a5@<W5>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char v15;
  char v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  if (a5 == 2)
  {
    v8 = &OBJC_IVAR____TtC6Charts25ChartContentRenderContext_xOffsetScale;
  }
  else
  {
    if (a5 != 3)
      goto LABEL_8;
    v8 = &OBJC_IVAR____TtC6Charts25ChartContentRenderContext_yOffsetScale;
  }
  v9 = v6 + *v8;
  v10 = *(unsigned __int8 *)(v9 + 104);
  if (v10 != 255)
  {
    v11 = *(_QWORD *)v9;
    v24 = *(_QWORD *)(v9 + 8);
    v25 = *(_QWORD *)(v9 + 16);
    v26 = *(_QWORD *)(v9 + 24);
    v18 = *(_QWORD *)(v9 + 32);
    v27 = *(_QWORD *)(v9 + 40);
    v19 = *(_QWORD *)(v9 + 48);
    v28 = *(_QWORD *)(v9 + 56);
    v29 = *(_QWORD *)(v9 + 64);
    v20 = *(_QWORD *)(v9 + 72);
    v21 = *(_QWORD *)(v9 + 80);
    v22 = *(_QWORD *)(v9 + 88);
    v23 = *(_QWORD *)(v9 + 96);
    v12 = result;
    sub_21421BAE4(*(_QWORD *)v9, v24, v25, v26, v18, v27, v19, v28, v29);
    sub_214219E84(v12, a2, a3, 0.0);
    v16 = v15;
    result = sub_21421BB38(v11, v24, v25, v26, v18, v27, v19, v28, v29, v20, v21, v22, v23, v10);
    if ((v16 & 1) == 0)
      __asm { BR              X10 }
  }
LABEL_8:
  *(_QWORD *)a6 = 0x7FF8000000000000;
  *(_QWORD *)(a6 + 8) = 0x7FF8000000000000;
  *(_QWORD *)(a6 + 16) = 0;
  *(_QWORD *)(a6 + 24) = 0;
  *(_BYTE *)(a6 + 32) = 0;
  return result;
}

void sub_21421A284()
{
  JUMPOUT(0x21421A24CLL);
}

uint64_t sub_21421A310@<X0>(uint64_t result@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X8>)
{
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  char v39;
  __int128 v40;
  __int128 v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  char *v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  __int128 v91;
  __int128 v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  char v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  _BYTE v102[24];
  _QWORD v103[13];
  char v104;
  __int128 v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char v111;
  __int128 v112;
  _BYTE __dst[258];

  v8 = 0uLL;
  if (result == 1)
  {
    v72 = a3;
    v73 = a4;
    v74 = a5;
    v75 = a6;
    v76 = a7;
    swift_beginAccess();
    memcpy(__dst, a2 + 5, sizeof(__dst));
    sub_21420073C(1, (uint64_t)&v80);
    v24 = v80;
    v25 = v81;
    v26 = v82;
    v27 = v83;
    v28 = v84;
    v29 = v85;
    sub_2141E801C((uint64_t)&v80, (uint64_t)&v91, &qword_253F12428);
    if (*((_QWORD *)&v92 + 1))
    {
      v97 = v91;
      v98 = v92;
      v31 = v93;
      v30 = v94;
      v70 = v94;
      v32 = v26 & 1;
      v66 = v96;
      v33 = v95;
      sub_2141DD130(v24, v25, v32);
      swift_bridgeObjectRetain();
      sub_2141DD140(v27, v28, v29);
      sub_21421A07C(v31, v30, v33, v66, 3, (uint64_t)&v86);
      v34 = v86;
      v35 = v87;
      v36 = v88;
      v37 = v89;
      v38 = v90;
      sub_21421CE28((uint64_t)&v80, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_21421C6D4);
      v99 = v97;
      v100 = v98;
      sub_21421CC0C((uint64_t)&v99, (uint64_t)v102);
      sub_21421CC48((uint64_t)v102);
      v101 = *((_QWORD *)&v100 + 1);
      sub_2141F9244((uint64_t)&v101);
      sub_2141EF1B0(v31, v70, v33);
    }
    else
    {
      v34 = 0;
      v35 = 0;
      v36 = 0;
      v37 = 0;
      v38 = 2;
    }
    v46 = (char *)a2 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_environment;
    swift_beginAccess();
    result = type metadata accessor for ChartContentRenderContext.Environment(0);
    v47 = &v46[*(int *)(result + 92)];
    v48 = *((_QWORD *)v47 + 2);
    v105 = *(_OWORD *)v47;
    v106 = v48;
    v107 = v34;
    v108 = v35;
    v109 = v36;
    v110 = v37;
    v111 = v38;
    v112 = a2[23];
    v45 = OBJC_IVAR____TtC6Charts25ChartContentRenderContext_yScale;
  }
  else
  {
    if ((_BYTE)result)
    {
      v39 = 1;
      v40 = 0uLL;
      v41 = 0uLL;
      goto LABEL_15;
    }
    v72 = a3;
    v73 = a4;
    v74 = a5;
    v75 = a6;
    v76 = a7;
    swift_beginAccess();
    memcpy(__dst, a2 + 5, sizeof(__dst));
    sub_21420073C(0, (uint64_t)&v80);
    v9 = v80;
    v10 = v81;
    v11 = v82;
    v12 = v83;
    v13 = v84;
    v14 = v85;
    sub_2141E801C((uint64_t)&v80, (uint64_t)&v91, &qword_253F12428);
    if (*((_QWORD *)&v92 + 1))
    {
      v97 = v91;
      v98 = v92;
      v16 = v93;
      v15 = v94;
      v69 = v94;
      v17 = v11 & 1;
      v65 = v96;
      v18 = v95;
      sub_2141DD130(v9, v10, v17);
      swift_bridgeObjectRetain();
      sub_2141DD140(v12, v13, v14);
      sub_21421A07C(v16, v15, v18, v65, 2, (uint64_t)&v86);
      v19 = v86;
      v20 = v87;
      v21 = v88;
      v22 = v89;
      v23 = v90;
      sub_21421CE28((uint64_t)&v80, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_21421C6D4);
      v99 = v97;
      v100 = v98;
      sub_21421CC0C((uint64_t)&v99, (uint64_t)v102);
      sub_21421CC48((uint64_t)v102);
      v101 = *((_QWORD *)&v100 + 1);
      sub_2141F9244((uint64_t)&v101);
      sub_2141EF1B0(v16, v69, v18);
    }
    else
    {
      v19 = 0;
      v20 = 0;
      v21 = 0;
      v22 = 0;
      v23 = 2;
    }
    v42 = (char *)a2 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_environment;
    swift_beginAccess();
    result = type metadata accessor for ChartContentRenderContext.Environment(0);
    v43 = &v42[*(int *)(result + 88)];
    v44 = *((_QWORD *)v43 + 2);
    v105 = *(_OWORD *)v43;
    v106 = v44;
    v107 = v19;
    v108 = v20;
    v109 = v21;
    v110 = v22;
    v111 = v23;
    v112 = a2[22];
    v45 = OBJC_IVAR____TtC6Charts25ChartContentRenderContext_xScale;
  }
  v49 = (char *)a2 + v45;
  v50 = v49[104];
  if (v50 == 255)
  {
    v39 = 1;
    v40 = 0uLL;
    v41 = 0uLL;
    a7 = v76;
    v8 = 0uLL;
  }
  else
  {
    v52 = *((_QWORD *)v49 + 11);
    v51 = *((_QWORD *)v49 + 12);
    v54 = *((_QWORD *)v49 + 9);
    v53 = *((_QWORD *)v49 + 10);
    v55 = *((_QWORD *)v49 + 7);
    v56 = *((_QWORD *)v49 + 8);
    v58 = *((_QWORD *)v49 + 5);
    v57 = *((_QWORD *)v49 + 6);
    v60 = *((_QWORD *)v49 + 3);
    v59 = *((_QWORD *)v49 + 4);
    v62 = *((_QWORD *)v49 + 1);
    v61 = *((_QWORD *)v49 + 2);
    v63 = *(_QWORD *)v49;
    v103[0] = v63;
    v103[1] = v62;
    v103[2] = v61;
    v103[3] = v60;
    v103[4] = v59;
    v64 = v59;
    v67 = v58;
    v103[5] = v58;
    v103[6] = v57;
    v68 = v57;
    v71 = v55;
    v103[7] = v55;
    v103[8] = v56;
    v103[9] = v54;
    v103[10] = v53;
    v103[11] = v52;
    v103[12] = v51;
    v104 = v50 & 1;
    sub_21421BAE4(v63, v62, v61, v60, v59, v58, v57, v55, v56);
    sub_21420648C((uint64_t)v103, (uint64_t)&v105, v72, v73, v74, v75);
    result = sub_21421BB38(v63, v62, v61, v60, v64, v67, v68, v71, v56, v54, v53, v52, v51, v50);
    v39 = 0;
    v8 = v77;
    v40 = v78;
    v41 = v79;
    a7 = v76;
  }
LABEL_15:
  *(_OWORD *)a7 = v8;
  *(_OWORD *)(a7 + 16) = v40;
  *(_OWORD *)(a7 + 32) = v41;
  *(_BYTE *)(a7 + 48) = v39;
  return result;
}

uint64_t sub_21421A808@<X0>(uint64_t result@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  char v37;
  __int128 v38;
  __int128 v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  char *v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _OWORD v73[3];
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  char v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  uint64_t v95;
  _BYTE v96[24];
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char v110;
  __int128 v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char v117;
  __int128 v118;
  _BYTE __dst[258];

  v6 = 0uLL;
  if (result == 1)
  {
    v70 = a3;
    v71 = a4;
    v72 = a5;
    swift_beginAccess();
    memcpy(__dst, a2 + 5, sizeof(__dst));
    sub_21420073C(1, (uint64_t)&v74);
    v22 = v74;
    v23 = v75;
    v24 = v76;
    v25 = v77;
    v26 = v78;
    v27 = v79;
    sub_2141E801C((uint64_t)&v74, (uint64_t)&v85, &qword_253F12428);
    if (*((_QWORD *)&v86 + 1))
    {
      v91 = v85;
      v92 = v86;
      v29 = v87;
      v28 = v88;
      v68 = v87;
      v30 = v24 & 1;
      v64 = v90;
      v31 = v89;
      sub_2141DD130(v22, v23, v30);
      swift_bridgeObjectRetain();
      sub_2141DD140(v25, v26, v27);
      sub_21421A07C(v29, v28, v31, v64, 3, (uint64_t)&v80);
      v32 = v80;
      v33 = v81;
      v34 = v82;
      v35 = v83;
      v36 = v84;
      sub_21421CE28((uint64_t)&v74, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_21421C6D4);
      v93 = v91;
      v94 = v92;
      sub_21421CC0C((uint64_t)&v93, (uint64_t)v96);
      sub_21421CC48((uint64_t)v96);
      v95 = *((_QWORD *)&v94 + 1);
      sub_2141F9244((uint64_t)&v95);
      sub_2141EF1B0(v68, v28, v31);
    }
    else
    {
      v32 = 0;
      v33 = 0;
      v34 = 0;
      v35 = 0;
      v36 = 2;
    }
    v44 = (char *)a2 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_environment;
    swift_beginAccess();
    result = type metadata accessor for ChartContentRenderContext.Environment(0);
    v45 = &v44[*(int *)(result + 92)];
    v46 = *((_QWORD *)v45 + 2);
    v111 = *(_OWORD *)v45;
    v112 = v46;
    v113 = v32;
    v114 = v33;
    v115 = v34;
    v116 = v35;
    v117 = v36;
    v118 = a2[23];
    v43 = OBJC_IVAR____TtC6Charts25ChartContentRenderContext_yScale;
  }
  else
  {
    if ((_BYTE)result)
    {
      v37 = 1;
      v38 = 0uLL;
      v39 = 0uLL;
      goto LABEL_15;
    }
    v70 = a3;
    v71 = a4;
    v72 = a5;
    swift_beginAccess();
    memcpy(__dst, a2 + 5, sizeof(__dst));
    sub_21420073C(0, (uint64_t)&v74);
    v7 = v74;
    v8 = v75;
    v9 = v76;
    v10 = v77;
    v11 = v78;
    v12 = v79;
    sub_2141E801C((uint64_t)&v74, (uint64_t)&v85, &qword_253F12428);
    if (*((_QWORD *)&v86 + 1))
    {
      v91 = v85;
      v92 = v86;
      v14 = v87;
      v13 = v88;
      v67 = v87;
      v15 = v9 & 1;
      v63 = v90;
      v16 = v89;
      sub_2141DD130(v7, v8, v15);
      swift_bridgeObjectRetain();
      sub_2141DD140(v10, v11, v12);
      sub_21421A07C(v14, v13, v16, v63, 2, (uint64_t)&v80);
      v17 = v80;
      v18 = v81;
      v19 = v82;
      v20 = v83;
      v21 = v84;
      sub_21421CE28((uint64_t)&v74, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_21421C6D4);
      v93 = v91;
      v94 = v92;
      sub_21421CC0C((uint64_t)&v93, (uint64_t)v96);
      sub_21421CC48((uint64_t)v96);
      v95 = *((_QWORD *)&v94 + 1);
      sub_2141F9244((uint64_t)&v95);
      sub_2141EF1B0(v67, v13, v16);
    }
    else
    {
      v17 = 0;
      v18 = 0;
      v19 = 0;
      v20 = 0;
      v21 = 2;
    }
    v40 = (char *)a2 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_environment;
    swift_beginAccess();
    result = type metadata accessor for ChartContentRenderContext.Environment(0);
    v41 = &v40[*(int *)(result + 88)];
    v42 = *((_QWORD *)v41 + 2);
    v111 = *(_OWORD *)v41;
    v112 = v42;
    v113 = v17;
    v114 = v18;
    v115 = v19;
    v116 = v20;
    v117 = v21;
    v118 = a2[22];
    v43 = OBJC_IVAR____TtC6Charts25ChartContentRenderContext_xScale;
  }
  v47 = (char *)a2 + v43;
  v48 = v47[104];
  if (v48 == 255)
  {
    v37 = 1;
    v38 = 0uLL;
    v39 = 0uLL;
    a5 = v72;
    v6 = 0uLL;
  }
  else
  {
    v50 = *((_QWORD *)v47 + 11);
    v49 = *((_QWORD *)v47 + 12);
    v52 = *((_QWORD *)v47 + 9);
    v51 = *((_QWORD *)v47 + 10);
    v53 = *((_QWORD *)v47 + 7);
    v54 = *((_QWORD *)v47 + 8);
    v56 = *((_QWORD *)v47 + 5);
    v55 = *((_QWORD *)v47 + 6);
    v58 = *((_QWORD *)v47 + 3);
    v57 = *((_QWORD *)v47 + 4);
    v60 = *((_QWORD *)v47 + 1);
    v59 = *((_QWORD *)v47 + 2);
    v61 = *(_QWORD *)v47;
    v97 = v61;
    v98 = v60;
    v99 = v59;
    v100 = v58;
    v101 = v57;
    v62 = v57;
    v65 = v56;
    v102 = v56;
    v103 = v55;
    v66 = v55;
    v69 = v53;
    v104 = v53;
    v105 = v54;
    v106 = v52;
    v107 = v51;
    v108 = v50;
    v109 = v49;
    v110 = v48 & 1;
    sub_21421BAE4(v61, v60, v59, v58, v57, v56, v55, v53, v54);
    sub_21420667C((uint64_t)&v111, v70, v71, (double *)v73);
    result = sub_21421BB38(v61, v60, v59, v58, v62, v65, v66, v69, v54, v52, v51, v50, v49, v48);
    v37 = 0;
    v6 = v73[0];
    v38 = v73[1];
    v39 = v73[2];
    a5 = v72;
  }
LABEL_15:
  *(_OWORD *)a5 = v6;
  *(_OWORD *)(a5 + 16) = v38;
  *(_OWORD *)(a5 + 32) = v39;
  *(_BYTE *)(a5 + 48) = v37;
  return result;
}

uint64_t sub_21421ACF4@<X0>(uint64_t result@<X0>, _OWORD *a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>, double a6@<D0>, double a7@<D1>, double a8@<D2>, double a9@<D3>)
{
  float64x2_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  char v47;
  float64x2_t v48;
  float64x2_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  float64x2_t v81[3];
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  __int128 v93;
  __int128 v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  char v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  uint64_t v103;
  _BYTE v104[24];
  _QWORD v105[13];
  char v106;
  __int128 v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char v113;
  __int128 v114;
  _BYTE __dst[258];

  v14 = 0uLL;
  if (result == 1)
  {
    v78 = a3;
    v79 = a4;
    v80 = a5;
    swift_beginAccess();
    memcpy(__dst, a2 + 5, sizeof(__dst));
    sub_21420073C(1, (uint64_t)&v82);
    v31 = v82;
    v32 = v83;
    v33 = v84;
    v34 = v85;
    v35 = v86;
    v36 = v87;
    sub_2141E801C((uint64_t)&v82, (uint64_t)&v93, &qword_253F12428);
    if (*((_QWORD *)&v94 + 1))
    {
      v99 = v93;
      v100 = v94;
      v38 = v95;
      v37 = v96;
      v39 = v33 & 1;
      v75 = v98;
      v40 = v97;
      sub_2141DD130(v31, v32, v39);
      swift_bridgeObjectRetain();
      sub_2141DD140(v34, v35, v36);
      v41 = v38;
      sub_21421A07C(v38, v37, v40, v75, 3, (uint64_t)&v88);
      v42 = v88;
      v43 = v89;
      v44 = v90;
      v45 = v91;
      v46 = v92;
      sub_21421CE28((uint64_t)&v82, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_21421C6D4);
      v101 = v99;
      v102 = v100;
      sub_21421CC0C((uint64_t)&v101, (uint64_t)v104);
      sub_21421CC48((uint64_t)v104);
      v103 = *((_QWORD *)&v102 + 1);
      sub_2141F9244((uint64_t)&v103);
      sub_2141EF1B0(v41, v37, v40);
    }
    else
    {
      v42 = 0;
      v43 = 0;
      v44 = 0;
      v45 = 0;
      v46 = 2;
    }
    v54 = (char *)a2 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_environment;
    swift_beginAccess();
    result = type metadata accessor for ChartContentRenderContext.Environment(0);
    v55 = &v54[*(int *)(result + 92)];
    v56 = *((_QWORD *)v55 + 2);
    v107 = *(_OWORD *)v55;
    v108 = v56;
    v109 = v42;
    v110 = v43;
    v111 = v44;
    v112 = v45;
    v113 = v46;
    v114 = a2[23];
    v53 = OBJC_IVAR____TtC6Charts25ChartContentRenderContext_yScale;
  }
  else
  {
    if ((_BYTE)result)
    {
      v47 = 1;
      v48 = 0uLL;
      v49 = 0uLL;
      goto LABEL_15;
    }
    v78 = a3;
    v79 = a4;
    v80 = a5;
    swift_beginAccess();
    memcpy(__dst, a2 + 5, sizeof(__dst));
    sub_21420073C(0, (uint64_t)&v82);
    v15 = v82;
    v16 = v83;
    v17 = v84;
    v18 = v85;
    v19 = v86;
    v20 = v87;
    sub_2141E801C((uint64_t)&v82, (uint64_t)&v93, &qword_253F12428);
    if (*((_QWORD *)&v94 + 1))
    {
      v99 = v93;
      v100 = v94;
      v22 = v95;
      v21 = v96;
      v23 = v17 & 1;
      v74 = v98;
      v24 = v97;
      sub_2141DD130(v15, v16, v23);
      swift_bridgeObjectRetain();
      sub_2141DD140(v18, v19, v20);
      v25 = v22;
      sub_21421A07C(v22, v21, v24, v74, 2, (uint64_t)&v88);
      v26 = v88;
      v27 = v89;
      v28 = v90;
      v29 = v91;
      v30 = v92;
      sub_21421CE28((uint64_t)&v82, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_21421C6D4);
      v101 = v99;
      v102 = v100;
      sub_21421CC0C((uint64_t)&v101, (uint64_t)v104);
      sub_21421CC48((uint64_t)v104);
      v103 = *((_QWORD *)&v102 + 1);
      sub_2141F9244((uint64_t)&v103);
      sub_2141EF1B0(v25, v21, v24);
    }
    else
    {
      v26 = 0;
      v27 = 0;
      v28 = 0;
      v29 = 0;
      v30 = 2;
    }
    v50 = (char *)a2 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_environment;
    swift_beginAccess();
    result = type metadata accessor for ChartContentRenderContext.Environment(0);
    v51 = &v50[*(int *)(result + 88)];
    v52 = *((_QWORD *)v51 + 2);
    v107 = *(_OWORD *)v51;
    v108 = v52;
    v109 = v26;
    v110 = v27;
    v111 = v28;
    v112 = v29;
    v113 = v30;
    v114 = a2[22];
    v53 = OBJC_IVAR____TtC6Charts25ChartContentRenderContext_xScale;
  }
  v57 = (char *)a2 + v53;
  v58 = v57[104];
  if (v58 == 255)
  {
    v47 = 1;
    v48 = 0uLL;
    v49 = 0uLL;
    a5 = v80;
    v14 = 0uLL;
  }
  else
  {
    v60 = *((_QWORD *)v57 + 11);
    v59 = *((_QWORD *)v57 + 12);
    v62 = *((_QWORD *)v57 + 9);
    v61 = *((_QWORD *)v57 + 10);
    v63 = *((_QWORD *)v57 + 7);
    v64 = *((_QWORD *)v57 + 8);
    v66 = *((_QWORD *)v57 + 5);
    v65 = *((_QWORD *)v57 + 6);
    v68 = *((_QWORD *)v57 + 3);
    v67 = *((_QWORD *)v57 + 4);
    v70 = *((_QWORD *)v57 + 1);
    v69 = *((_QWORD *)v57 + 2);
    v71 = *(_QWORD *)v57;
    v105[0] = v71;
    v105[1] = v70;
    v105[2] = v69;
    v105[3] = v68;
    v105[4] = v67;
    v72 = v67;
    v73 = v66;
    v105[5] = v66;
    v105[6] = v65;
    v76 = v65;
    v77 = v63;
    v105[7] = v63;
    v105[8] = v64;
    v105[9] = v62;
    v105[10] = v61;
    v105[11] = v60;
    v105[12] = v59;
    v106 = v58 & 1;
    sub_21421BAE4(v71, v70, v69, v68, v67, v66, v65, v63, v64);
    sub_214206844((uint64_t)v105, (uint64_t *)&v107, v78, v79, v81, a6, a7, a8, a9);
    result = sub_21421BB38(v71, v70, v69, v68, v72, v73, v76, v77, v64, v62, v61, v60, v59, v58);
    v47 = 0;
    v14 = v81[0];
    v48 = v81[1];
    v49 = v81[2];
    a5 = v80;
  }
LABEL_15:
  *(float64x2_t *)a5 = v14;
  *(float64x2_t *)(a5 + 16) = v48;
  *(float64x2_t *)(a5 + 32) = v49;
  *(_BYTE *)(a5 + 48) = v47;
  return result;
}

uint64_t sub_21421B218@<X0>(double a1@<X0>, double a2@<X1>, char a3@<W2>, char a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18[17];
  _BYTE v19[136];
  _BYTE v20[136];
  _QWORD v21[5];
  _BYTE v22[24];
  uint64_t v23;
  _BYTE v24[136];

  if (a4 == 7)
  {
    sub_2141E801C(v5 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_lineStyleScale, (uint64_t)v19, &qword_253F149E8);
    sub_2141E801C((uint64_t)v19, (uint64_t)v20, &qword_253F149E8);
    if (sub_21421B90C((uint64_t)v20) == 1)
      goto LABEL_12;
    if (a3 < 0)
    {
      a3 &= 1u;
      a1 = (a1 + a2) * 0.5;
      a2 = 0.0;
    }
    else
    {
      sub_2141DD14C(*(uint64_t *)&a1, *(uint64_t *)&a2, a3);
    }
    sub_2141E801C((uint64_t)v19, (uint64_t)v18, &qword_253F149E8);
    sub_2141E801C((uint64_t)v18, (uint64_t)v24, &qword_254D695C0);
    sub_21421B920(v18);
    sub_2142B6D98(*(uint64_t *)&a1, *(uint64_t *)&a2, a3, v21);
    v10 = v21[0];
    v12 = v21[1];
    v13 = v21[2];
    v17 = v21[3];
    v15 = v21[4];
    sub_2141E60B8(*(uint64_t *)&a1, *(uint64_t *)&a2, a3);
    sub_21421B9E4((uint64_t)v19);
    result = sub_2141E801C((uint64_t)v21, (uint64_t)v22, &qword_253F11F60);
    if (!v23)
    {
LABEL_12:
      if (qword_253F13350 != -1)
        swift_once();
      v10 = xmmword_253F1C9E0;
      LODWORD(v12) = DWORD2(xmmword_253F1C9E0);
      LODWORD(v11) = HIDWORD(xmmword_253F1C9E0);
      v13 = qword_253F1C9F0;
      v14 = qword_253F1C9F8;
      v15 = qword_253F1CA00;
      swift_bridgeObjectRetain();
      result = swift_bridgeObjectRelease();
    }
    else
    {
      v11 = HIDWORD(v12);
      v14 = v17;
    }
  }
  else
  {
    if (qword_253F13350 != -1)
      swift_once();
    v10 = xmmword_253F1C9E0;
    LODWORD(v12) = DWORD2(xmmword_253F1C9E0);
    LODWORD(v11) = HIDWORD(xmmword_253F1C9E0);
    v13 = qword_253F1C9F0;
    v14 = qword_253F1C9F8;
    v15 = qword_253F1CA00;
    result = swift_bridgeObjectRetain();
  }
  *(_QWORD *)a5 = v10;
  *(_DWORD *)(a5 + 8) = v12;
  *(_DWORD *)(a5 + 12) = v11;
  *(_QWORD *)(a5 + 16) = v13;
  *(_QWORD *)(a5 + 24) = v14;
  *(_QWORD *)(a5 + 32) = v15;
  return result;
}

double sub_21421B450(uint64_t a1, uint64_t a2, char a3, char a4)
{
  uint64_t v4;
  double result;
  uint64_t *v6;
  unsigned __int8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  char v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  result = 0.0;
  if (a4 == 6)
  {
    v6 = (uint64_t *)(v4 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_symbolSizeScale);
    if (*(unsigned __int8 *)(v4 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_symbolSizeScale + 104) != 255)
    {
      v7 = *(_BYTE *)(v4 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_symbolSizeScale + 104);
      v9 = *v6;
      v8 = v6[1];
      v10 = v6[2];
      v11 = v6[3];
      v12 = v6[4];
      v13 = v6[5];
      v26 = v6[7];
      v27 = v6[6];
      v24 = v6[9];
      v25 = v6[8];
      v22 = v6[11];
      v23 = v6[10];
      v21 = v6[12];
      if (a3 < 0)
      {
        v18 = a3 & 1;
        v20 = (*(double *)&a1 + *(double *)&a2) * 0.5;
        v19 = 0;
      }
      else
      {
        v19 = a2;
        v20 = *(double *)&a1;
        v18 = a3;
        sub_2141DD14C(a1, a2, a3);
      }
      v16 = v10;
      sub_21421BAE4(v9, v8, v10, v11, v12, v13, v27, v26, v25);
      v14 = COERCE_DOUBLE(sub_2142B6AB8(*(uint64_t *)&v20, v19, v18));
      v17 = v15;
      sub_2141E60B8(*(uint64_t *)&v20, v19, v18);
      sub_21421BB38(v9, v8, v16, v11, v12, v13, v27, v26, v25, v24, v23, v22, v21, v7);
      result = v14;
      if ((v17 & 1) != 0)
        return 0.0;
    }
  }
  return result;
}

uint64_t sub_21421B624(uint64_t a1, uint64_t a2, char a3, char a4)
{
  uint64_t v4;
  uint64_t *v5;
  char v6;
  unsigned __int8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  if (a4 != 4)
    goto LABEL_8;
  v5 = (uint64_t *)(v4 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_foregroundStyleScale);
  if (*(unsigned __int8 *)(v4 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_foregroundStyleScale + 96) == 255)
    goto LABEL_8;
  v6 = a3;
  v7 = *(_BYTE *)(v4 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_foregroundStyleScale + 96);
  v9 = *v5;
  v8 = v5[1];
  v10 = v5[2];
  v11 = v5[3];
  v12 = v5[4];
  v13 = v5[5];
  v23 = v5[7];
  v24 = v5[6];
  v21 = v5[9];
  v22 = v5[8];
  v19 = v5[11];
  v20 = v5[10];
  if (a3 < 0)
  {
    v6 = a3 & 1;
    v18 = (*(double *)&a1 + *(double *)&a2) * 0.5;
    v17 = 0;
  }
  else
  {
    v17 = a2;
    v18 = *(double *)&a1;
    sub_2141DD14C(a1, a2, a3);
  }
  v16 = v12;
  sub_21421B808(v9, v8, v10, v11, v12, v13, v24, v23);
  v14 = sub_2142B6EFC(*(uint64_t *)&v18, v17, v6);
  sub_2141E60B8(*(uint64_t *)&v18, v17, v6);
  sub_21421B874(v9, v8, v10, v11, v16, v13, v24, v23, v22, v21, v20, v19, v7);
  if (!v14)
  {
LABEL_8:
    sub_2144249C8();
    return sub_214423E10();
  }
  return v14;
}

uint64_t sub_21421B808(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned __int8 a8)
{
  swift_retain();
  swift_retain();
  sub_2141D975C(a4);
  swift_bridgeObjectRetain();
  return sub_2141E83DC(a7, a8);
}

uint64_t sub_21421B874(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned __int8 a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  if (a13 != 255)
    return sub_21421B8A0(a1, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

uint64_t sub_21421B8A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned __int8 a8)
{
  swift_release();
  swift_release();
  sub_2141D972C(a4);
  swift_bridgeObjectRelease();
  return sub_21421BBC0(a7, a8);
}

uint64_t sub_21421B90C(uint64_t a1)
{
  unsigned int v1;

  v1 = *(unsigned __int8 *)(a1 + 128);
  if (v1 > 1)
    return (v1 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t *sub_21421B920(uint64_t *a1)
{
  sub_21421B980(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11]);
  return a1;
}

uint64_t sub_21421B980(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned __int8 a12)
{
  swift_bridgeObjectRetain();
  swift_retain();
  sub_2141D975C(a8);
  swift_bridgeObjectRetain();
  return sub_2141E83DC(a11, a12);
}

uint64_t sub_21421B9E4(uint64_t a1)
{
  sub_21421BA44(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_BYTE *)(a1 + 128));
  return a1;
}

uint64_t sub_21421BA44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned __int8 a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unsigned __int8 a17)
{
  if (a17 != 255)
    return sub_21421BA80(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
  return a1;
}

uint64_t sub_21421BA80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned __int8 a12)
{
  swift_release();
  swift_bridgeObjectRelease();
  sub_2141D972C(a8);
  swift_bridgeObjectRelease();
  return sub_21421BBC0(a11, a12);
}

uint64_t sub_21421BAE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  swift_retain();
  sub_2141D975C(a5);
  swift_bridgeObjectRetain();
  return sub_2141E83DC(a8, a9);
}

uint64_t sub_21421BB38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unsigned __int8 a14)
{
  if (a14 != 255)
    return sub_21421BB6C(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  return a1;
}

uint64_t sub_21421BB6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  swift_release();
  sub_2141D972C(a5);
  swift_bridgeObjectRelease();
  return sub_21421BBC0(a8, a9);
}

uint64_t sub_21421BBC0(uint64_t result, unsigned __int8 a2)
{
  if (a2 != 255)
    return sub_2141E833C(result, a2 & 1);
  return result;
}

uint64_t sub_21421BBDC(char a1, double *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  char v19;
  char v20;
  double v21;
  double v22;
  double v23;
  double v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v35;
  char v36;
  int v37;
  char *v38;
  uint64_t v39;
  uint64_t *v40;
  int v41;
  double v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  double v56;
  char *v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  double v61;
  char v62;
  char v63;
  double v64;
  double v65;
  double v66;
  double v67;
  uint64_t result;
  double v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  unsigned __int8 v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  double v79;
  char v80;
  double v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  double v88;
  double v89;
  double v90;
  double v91;
  unsigned __int8 v92;
  __int128 v93;
  __int128 v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  char v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  uint64_t v103;
  _BYTE v104[24];
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char v118;
  _BYTE __dst[258];

  if (a1 == 1)
  {
    v77 = a3;
    v78 = a4;
    swift_beginAccess();
    memcpy(__dst, a2 + 10, sizeof(__dst));
    sub_21420073C(1, (uint64_t)&v82);
    v27 = v82;
    v26 = v83;
    v28 = v84;
    v29 = v85;
    v30 = v86;
    v31 = v87;
    sub_2141E801C((uint64_t)&v82, (uint64_t)&v93, &qword_253F12428);
    v80 = a5;
    if (*((_QWORD *)&v94 + 1))
    {
      v99 = v93;
      v100 = v94;
      v33 = v95;
      v32 = v96;
      v34 = v28 & 1;
      v74 = v98;
      v35 = v31;
      v36 = v97;
      sub_2141DD130(v27, v26, v34);
      swift_bridgeObjectRetain();
      sub_2141DD140(v29, v30, v35);
      sub_21421A07C(v33, v32, v36, v74, 3, (uint64_t)&v88);
      v22 = v88;
      v21 = v89;
      v23 = v90;
      v24 = v91;
      v37 = v92;
      sub_21421CE28((uint64_t)&v82, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_21421C6D4);
      v101 = v99;
      v102 = v100;
      sub_21421CC0C((uint64_t)&v101, (uint64_t)v104);
      sub_21421CC48((uint64_t)v104);
      v103 = *((_QWORD *)&v102 + 1);
      sub_2141F9244((uint64_t)&v103);
      sub_2141EF1B0(v33, v32, v36);
    }
    else
    {
      v37 = 2;
      v22 = 0.0;
      v21 = 0.0;
      v23 = 0.0;
      v24 = 0.0;
    }
    v57 = (char *)a2 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_environment;
    swift_beginAccess();
    v58 = type metadata accessor for ChartContentRenderContext.Environment(0);
    v59 = (uint64_t *)((char *)a2 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_yScale);
    v41 = *((unsigned __int8 *)a2 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_yScale + 104);
    if (v41 != 255)
    {
      v70 = v37;
      v42 = *(double *)&v57[*(int *)(v58 + 92)];
      v44 = v59[11];
      v43 = v59[12];
      v45 = v59[9];
      v46 = v59[10];
      v47 = v59[7];
      v48 = v59[8];
      v50 = v59[5];
      v49 = v59[6];
      v52 = v59[3];
      v51 = v59[4];
      v54 = v59[1];
      v53 = v59[2];
      v55 = *v59;
      v56 = a2[46];
      goto LABEL_13;
    }
LABEL_18:
    *(double *)&result = 0.0;
    return result;
  }
  if (a1)
    goto LABEL_18;
  v77 = a3;
  v78 = a4;
  swift_beginAccess();
  memcpy(__dst, a2 + 10, sizeof(__dst));
  sub_21420073C(0, (uint64_t)&v82);
  v7 = v82;
  v8 = v83;
  v9 = v84;
  v10 = v85;
  v11 = v86;
  v12 = v87;
  sub_2141E801C((uint64_t)&v82, (uint64_t)&v93, &qword_253F12428);
  v80 = a5;
  if (*((_QWORD *)&v94 + 1))
  {
    v99 = v93;
    v100 = v94;
    v13 = v7;
    v15 = v95;
    v14 = v96;
    v16 = v9 & 1;
    v17 = v98;
    v18 = v8;
    v19 = v97;
    sub_2141DD130(v13, v18, v16);
    swift_bridgeObjectRetain();
    sub_2141DD140(v10, v11, v12);
    v20 = v19;
    sub_21421A07C(v15, v14, v19, v17, 2, (uint64_t)&v88);
    v22 = v88;
    v21 = v89;
    v23 = v90;
    v24 = v91;
    v25 = v92;
    sub_21421CE28((uint64_t)&v82, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_21421C6D4);
    v101 = v99;
    v102 = v100;
    sub_21421CC0C((uint64_t)&v101, (uint64_t)v104);
    sub_21421CC48((uint64_t)v104);
    v103 = *((_QWORD *)&v102 + 1);
    sub_2141F9244((uint64_t)&v103);
    sub_2141EF1B0(v15, v14, v20);
  }
  else
  {
    v25 = 2;
    v22 = 0.0;
    v21 = 0.0;
    v23 = 0.0;
    v24 = 0.0;
  }
  v38 = (char *)a2 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_environment;
  swift_beginAccess();
  v39 = type metadata accessor for ChartContentRenderContext.Environment(0);
  v40 = (uint64_t *)((char *)a2 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_xScale);
  v41 = *((unsigned __int8 *)a2 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_xScale + 104);
  if (v41 == 255)
    goto LABEL_18;
  v70 = v25;
  v42 = *(double *)&v38[*(int *)(v39 + 88)];
  v44 = v40[11];
  v43 = v40[12];
  v45 = v40[9];
  v46 = v40[10];
  v47 = v40[7];
  v48 = v40[8];
  v50 = v40[5];
  v49 = v40[6];
  v52 = v40[3];
  v51 = v40[4];
  v54 = v40[1];
  v53 = v40[2];
  v55 = *v40;
  v56 = a2[44];
LABEL_13:
  v105 = v55;
  v106 = v54;
  v107 = v53;
  v108 = v52;
  v109 = v51;
  v71 = v51;
  v72 = v50;
  v110 = v50;
  v111 = v49;
  v73 = v49;
  v75 = v48;
  v112 = v47;
  v60 = v47;
  v113 = v48;
  v76 = v45;
  v114 = v45;
  v115 = v46;
  v116 = v44;
  v117 = v43;
  v118 = v41 & 1;
  sub_21421BAE4(v55, v54, v53, v52, v51, v50, v49, v47, v48);
  v79 = COERCE_DOUBLE(sub_214219E84(v77, v78, v80, v56));
  v81 = v61;
  v63 = v62;
  sub_21421BB38(v55, v54, v53, v52, v71, v72, v73, v60, v75, v76, v46, v44, v43, v41);
  if ((v63 & 1) != 0)
  {
    v69 = NAN;
  }
  else
  {
    v64 = v81 - v79;
    if (v70)
    {
      v65 = v21 + v22 * v64 + v79;
      v66 = v24 + v23 * v64 + v79;
      if (v70 == 1)
      {
        v67 = v65;
      }
      else
      {
        v66 = v81;
        v67 = v79;
      }
    }
    else
    {
      v67 = v22 * v64 + v79;
      v66 = v21 * v64 + v79;
    }
    v69 = (v66 + v67) * 0.5;
  }
  *(double *)&result = v42 + v69;
  return result;
}

unint64_t sub_21421C130(unint64_t result)
{
  if (result >= 8)
    return 8;
  return result;
}

uint64_t sub_21421C140(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_21421C168(uint64_t a1)
{
  destroy for AnyChartContent();
  return a1;
}

uint64_t sub_21421C19C(uint64_t a1, uint64_t a2)
{
  initializeWithTake for SgCompositingLayer(a2, a1);
  return a2;
}

uint64_t sub_21421C1D8(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  char v9;

  if (a7 < 0)
  {
    v9 = a7 & 1;
    sub_2141DD130(a1, a2, a3 & 1);
    swift_bridgeObjectRetain();
    sub_2141DD130(a5, a6, v9);
  }
  else
  {
    sub_2141DD130(a1, a2, a3 & 1);
  }
  return swift_bridgeObjectRetain();
}

uint64_t sub_21421C24C(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  char v9;

  if (a7 < 0)
  {
    v9 = a7 & 1;
    sub_2141ED0BC(a1, a2, a3 & 1);
    swift_bridgeObjectRelease();
    sub_2141ED0BC(a5, a6, v9);
  }
  else
  {
    sub_2141ED0BC(a1, a2, a3 & 1);
  }
  return swift_bridgeObjectRelease();
}

_QWORD *sub_21421C2C0(_QWORD *a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7]);
  return a1;
}

uint64_t sub_21421C2FC(uint64_t a1)
{
  return *(_QWORD *)(a1 + 144) >> 63;
}

uint64_t sub_21421C308(uint64_t result)
{
  *(_QWORD *)(result + 144) &= ~0x8000000000000000;
  return result;
}

_QWORD *sub_21421C318(_QWORD *a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14], a1[15], a1[16], a1[17], a1[18]);
  return a1;
}

double sub_21421C37C(uint64_t a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 128) = -1;
  return result;
}

uint64_t sub_21421C39C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v2 = *(_QWORD *)(a1 + 64);
  v25 = *(_QWORD *)(a1 + 88);
  v26 = *(_QWORD *)(a1 + 80);
  v3 = *(_QWORD *)(a1 + 104);
  v4 = *(_QWORD *)(a1 + 112);
  v5 = *(_QWORD *)(a1 + 120);
  v6 = *(_QWORD *)(a1 + 128);
  v23 = *(_QWORD *)(a1 + 136);
  v24 = *(_QWORD *)(a1 + 96);
  v21 = *(_OWORD *)(a1 + 160);
  v22 = *(_OWORD *)(a1 + 144);
  v19 = *(_OWORD *)(a1 + 192);
  v20 = *(_OWORD *)(a1 + 176);
  v17 = *(_OWORD *)(a1 + 224);
  v18 = *(_OWORD *)(a1 + 208);
  v16 = *(_OWORD *)(a1 + 240);
  v14 = *(_OWORD *)(a1 + 272);
  v15 = *(_OWORD *)(a1 + 256);
  v12 = *(_OWORD *)(a1 + 304);
  v13 = *(_OWORD *)(a1 + 288);
  v7 = *(_QWORD *)(a1 + 320);
  v8 = *(_QWORD *)(a1 + 328);
  v9 = *(_WORD *)(a1 + 336);
  swift_retain();
  sub_21421C4E4(v2);
  LOWORD(v11) = v9;
  sub_21421C59C(v26, v25, v24, v3, v4, v5, v6, v23, v22, *((uint64_t *)&v22 + 1), v21, *((uint64_t *)&v21 + 1), v20, *((uint64_t *)&v20 + 1), v19, *((uint64_t *)&v19 + 1), v18, *((uint64_t *)&v18 + 1), v17,
    *((uint64_t *)&v17 + 1),
    v16,
    SBYTE8(v16),
    v15,
    *((uint64_t *)&v15 + 1),
    v14,
    *((uint64_t *)&v14 + 1),
    v13,
    *((uint64_t *)&v13 + 1),
    v12,
    *((uint64_t *)&v12 + 1),
    v7,
    v8,
    v11,
    (void (*)(uint64_t, uint64_t, uint64_t))sub_2141EF260);
  return a1;
}

uint64_t sub_21421C4E4(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_21421C510(uint64_t a1)
{
  __int128 v3;
  uint64_t v4;

  LOWORD(v4) = *(_WORD *)(a1 + 256);
  v3 = *(_OWORD *)(a1 + 208);
  sub_21421C59C(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    *(_QWORD *)(a1 + 200),
    v3,
    *((uint64_t *)&v3 + 1),
    *(_QWORD *)(a1 + 224),
    *(_QWORD *)(a1 + 232),
    *(_QWORD *)(a1 + 240),
    *(_QWORD *)(a1 + 248),
    v4,
    (void (*)(uint64_t, uint64_t, uint64_t))sub_21421C6D4);
  return a1;
}

uint64_t sub_21421C59C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void (*a34)(uint64_t, uint64_t, uint64_t))
{
  if (a4 != 1)
  {
    a34(result, a2, a3);
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char))a34)(a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22);
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))a34)(a23, a24, a25, a26, a27, a28, a29, a30, a31, a32);
  }
  return result;
}

uint64_t sub_21421C6D4(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  if (a4)
  {
    sub_2141ED0BC(result, a2, a3 & 1);
    swift_bridgeObjectRelease();
    return sub_2141EF1B0(a5, a6, a7);
  }
  return result;
}

uint64_t sub_21421C728(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_21421C754(uint64_t a1)
{
  unint64_t v1;
  int v2;

  v1 = *(_QWORD *)(a1 + 24);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  v2 = v1 - 1;
  if (v2 < 0)
    v2 = -1;
  return (v2 + 1);
}

uint64_t sub_21421C778(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_2141D8BF8(&qword_253F149F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_21421C7C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unsigned __int8 a14)
{
  if (a14 != 255)
    return sub_21421BAE4(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  return a1;
}

unint64_t sub_21421C7F4(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6, double a7, double a8, double a9, double a10, double a11)
{
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  __int128 v30;
  unint64_t v31;

  v22 = *(_QWORD *)(a3 + 16);
  v23 = *(_QWORD *)(v22 + 32);
  swift_retain();
  v24 = sub_21421F758(a1, a2, v23);
  v25 = *(_QWORD *)(v22 + 32);
  *(_QWORD *)(v22 + 32) = v24;
  v26 = *(_QWORD *)(a3 + 24);
  *(_QWORD *)(a3 + 24) = v24;
  v27 = swift_allocObject();
  v28 = *(_QWORD *)(a5 + 64);
  v29 = *(_BYTE *)(a5 + 72);
  *(_QWORD *)(v27 + 16) = *(_QWORD *)(a4 + 24);
  *(double *)(v27 + 24) = a6 + a8;
  *(double *)(v27 + 32) = a7 + a9;
  *(double *)(v27 + 40) = a10;
  *(double *)(v27 + 48) = a11;
  v30 = *(_OWORD *)(a5 + 48);
  *(_OWORD *)(v27 + 56) = *(_OWORD *)(a5 + 32);
  *(_OWORD *)(v27 + 72) = v30;
  *(_QWORD *)(v27 + 88) = v28;
  *(_BYTE *)(v27 + 96) = v29;
  *(_OWORD *)(v27 + 104) = *(_OWORD *)(a5 + 80);
  *(_QWORD *)(v27 + 120) = 2;
  *(_OWORD *)(v27 + 128) = 0u;
  *(_OWORD *)(v27 + 144) = 0u;
  *(_OWORD *)(v27 + 160) = 0u;
  *(_WORD *)(v27 + 176) = 6;
  *(_QWORD *)(v27 + 184) = 0;
  v31 = v27 | 0xA000000000000000;
  *(_QWORD *)(a3 + 24) = v26;
  *(_QWORD *)(v22 + 32) = v25;
  sub_21421C958((uint64_t *)a5);
  swift_release();
  return v31;
}

uint64_t sub_21421C92C()
{
  uint64_t *v0;

  sub_2141ED07C(v0[7], v0[8], v0[9]);
  return swift_deallocObject();
}

uint64_t *sub_21421C958(uint64_t *a1)
{
  sub_2141ED014(a1[4], a1[5], a1[6]);
  return a1;
}

double sub_21421C988(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  double v19;

  v12 = *(_QWORD *)(a3 + 16);
  v13 = *(_QWORD *)(v12 + 32);
  swift_retain();
  v14 = sub_21421F758(a1, a2, v13);
  v15 = *(_QWORD *)(v12 + 32);
  *(_QWORD *)(v12 + 32) = v14;
  v16 = *(_QWORD *)(a3 + 24);
  *(_QWORD *)(a3 + 24) = v14;
  sub_2143A3910(a4, a5, a6, &v19);
  *(_QWORD *)(a3 + 24) = v16;
  v17 = v19;
  *(_QWORD *)(v12 + 32) = v15;
  swift_release();
  return v17;
}

uint64_t sub_21421CA44(uint64_t a1)
{
  destroy for VectorizedPlottables(a1);
  return a1;
}

uint64_t sub_21421CA78(uint64_t a1, void (*a2)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v21 = *(_QWORD *)(a1 + 88);
  v20 = *(_QWORD *)(a1 + 96);
  v19 = *(_QWORD *)(a1 + 104);
  v18 = *(_QWORD *)(a1 + 112);
  v17 = *(_QWORD *)(a1 + 120);
  v4 = *(_QWORD *)(a1 + 136);
  v16 = *(_QWORD *)(a1 + 128);
  v6 = *(_QWORD *)(a1 + 144);
  v5 = *(_QWORD *)(a1 + 152);
  v7 = *(_QWORD *)(a1 + 160);
  v8 = *(_BYTE *)(a1 + 168);
  v29 = *(_QWORD *)(a1 + 176);
  v28 = *(_QWORD *)(a1 + 184);
  v27 = *(_QWORD *)(a1 + 192);
  v26 = *(_QWORD *)(a1 + 200);
  v25 = *(_QWORD *)(a1 + 208);
  v24 = *(_QWORD *)(a1 + 216);
  v23 = *(_QWORD *)(a1 + 224);
  v9 = *(_QWORD *)(a1 + 240);
  v22 = *(_QWORD *)(a1 + 232);
  v10 = *(_QWORD *)(a1 + 248);
  v11 = *(_BYTE *)(a1 + 256);
  v13 = *(_BYTE *)(a1 + 80);
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), v13);
  LOBYTE(v14) = v8;
  a2(v21, v20, v19, v18, v17, v16, v4, v6, v5, v7, v14);
  LOBYTE(v15) = v11;
  a2(v29, v28, v27, v26, v25, v24, v23, v22, v9, v10, v15);
  return a1;
}

uint64_t sub_21421CBB0(uint64_t a1, void (*a2)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(unsigned __int8 *)(a1 + 48);
  a2(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(unsigned __int8 *)(a1 + 24));
  a2(v4, v5, v6);
  return a1;
}

uint64_t sub_21421CC0C(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(MEMORY[0x24BDF1EB8] - 8) + 32))(a2, a1);
  return a2;
}

uint64_t sub_21421CC48(uint64_t a1)
{
  sub_2141ED0BC(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  return a1;
}

void sub_21421CC78(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(_QWORD *)(v2 + 24);
  v4 = *(_QWORD *)(v2 + 32);
  v6 = *a1;
  v7 = a1[1];
  swift_bridgeObjectRetain();
  sub_2143F9FE4(v6, v7, 2, v5, v4, a2);
}

void sub_21421CCDC(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  sub_21421CD4C(a1, 1, a2);
}

uint64_t sub_21421CCF4(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_2141D7924(a2);
    result = MEMORY[0x2199CD934](MEMORY[0x24BEE12C8], v4);
    atomic_store(result, a1);
  }
  return result;
}

void sub_21421CD34(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  sub_21421CD4C(a1, 0, a2);
}

void sub_21421CD4C(uint64_t *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  sub_2143F9FE4(*a1, 0, a2, *(_QWORD *)(v3 + 24), *(_QWORD *)(v3 + 32), a3);
}

uint64_t sub_21421CD84(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v3 = *(_QWORD *)(v1 + 40);
  v2 = *(uint64_t (**)(void))(v1 + 48);
  v4 = *(_QWORD *)(v3 + 24);
  *(_QWORD *)(v3 + 24) = a1;
  result = v2();
  *(_QWORD *)(v3 + 24) = v4;
  return result;
}

__n128 *sub_21421CDBC(__n128 *a1, __n128 *a2)
{
  initializeWithTake for AnyPrimitivePlottableTransform(a2, a1);
  return a2;
}

uint64_t sub_21421CDF8(uint64_t a1)
{
  sub_2141EF1B0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  return a1;
}

uint64_t sub_21421CE28(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))
{
  char v4;

  v4 = *(_BYTE *)(a1 + 80);
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), v4);
  return a1;
}

uint64_t sub_21421CE7C(uint64_t a1)
{
  sub_2141DD130(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  return a1;
}

__n128 *sub_21421CEAC(__n128 *a1, __n128 *a2)
{
  initializeWithTake for AnyPrimitivePlottableTransform(a2, a1);
  return a2;
}

uint64_t sub_21421CEE8(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = sub_214423B70();
    result = MEMORY[0x2199CD934](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

int8x16_t sub_21421CF28(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int8x16_t result;

  v1 = *(_QWORD *)(a1 + 24) & 1;
  v2 = *(_QWORD *)(a1 + 72) & 0xFFFFFFFFFFFFFF8;
  v3 = *(_QWORD *)(a1 + 96) & 1;
  v4 = *(_QWORD *)(a1 + 144) & 0xFFFFFFFFFFFFFF8 | 0x8000000000000000;
  *(_QWORD *)a1 &= 7uLL;
  *(_QWORD *)(a1 + 24) = v1;
  *(int8x16_t *)(a1 + 56) = vandq_s8(*(int8x16_t *)(a1 + 56), (int8x16_t)xmmword_214427820);
  *(_QWORD *)(a1 + 72) = v2;
  *(_QWORD *)(a1 + 96) = v3;
  result = vandq_s8(*(int8x16_t *)(a1 + 128), (int8x16_t)xmmword_214427820);
  *(int8x16_t *)(a1 + 128) = result;
  *(_QWORD *)(a1 + 144) = v4;
  return result;
}

uint64_t sub_21421CF8C(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(unsigned __int8 *)(a1 + 56));
  return a1;
}

__n128 *sub_21421CFC8(__n128 *a1, __n128 *a2)
{
  initializeWithTake for AnyPrimitivePlottableTransform(a2, a1);
  return a2;
}

uint64_t sub_21421D004(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))
{
  char v4;

  v4 = *(_BYTE *)(a1 + 104);
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), v4);
  return a1;
}

uint64_t sub_21421D060(uint64_t a1, uint64_t a2)
{
  initializeWithTake for AxisMarksContentStorage(a2, a1);
  return a2;
}

uint64_t sub_21421D09C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_2141D8BF8(&qword_253F15C88);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_21421D0E4(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_BYTE *)(a2 + 32) = *((_BYTE *)a1 + 32);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_21421D0FC(uint64_t a1)
{
  sub_2141DD140(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  return a1;
}

uint64_t sub_21421D12C(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

__n128 initializeWithCopy for ChartContentRenderContext.OffsetValues.Band(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for ChartContentRenderContext.OffsetValues.Band(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 33))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ChartContentRenderContext.OffsetValues.Band(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 254;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 33) = 0;
    if (a2)
      *(_BYTE *)(result + 32) = -(char)a2;
  }
  return result;
}

uint64_t sub_21421D204(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 32) <= 1u)
    return *(unsigned __int8 *)(a1 + 32);
  else
    return (*(_DWORD *)a1 + 2);
}

uint64_t sub_21421D21C(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(_QWORD *)result = a2 - 2;
    *(_QWORD *)(result + 8) = 0;
    LOBYTE(a2) = 2;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
  }
  *(_BYTE *)(result + 32) = a2;
  return result;
}

ValueMetadata *type metadata accessor for ChartContentRenderContext.OffsetValues.Band()
{
  return &type metadata for ChartContentRenderContext.OffsetValues.Band;
}

uint64_t getEnumTagSinglePayload for ChartContentRenderContext.RangePosition(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 48))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ChartContentRenderContext.RangePosition(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 48) = v3;
  return result;
}

ValueMetadata *type metadata accessor for ChartContentRenderContext.RangePosition()
{
  return &type metadata for ChartContentRenderContext.RangePosition;
}

ValueMetadata *type metadata accessor for StackContext.Item()
{
  return &type metadata for StackContext.Item;
}

uint64_t sub_21421D2C0()
{
  uint64_t result;
  unint64_t v1;

  swift_getTupleTypeMetadata2();
  result = sub_214425388();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *sub_21421D348(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  uint64_t v16;
  int v17;
  int v18;
  void (*v19)(_QWORD *, _QWORD *, uint64_t);

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_DWORD *)(v6 + 80);
  v9 = *(_DWORD *)(v6 + 84);
  v10 = ~(unint64_t)v8;
  v11 = v7 + v8;
  v12 = (v11 & v10) + v7;
  if (v9)
    v13 = ((v7 + v8) & ~(unint64_t)v8) + v7;
  else
    v13 = v12 + 1;
  if (v8 > 7u || (v8 & 0x100000) != 0 || v13 > 0x18)
  {
    v16 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v16 + ((v8 + 16) & v10));
    swift_retain();
    return a1;
  }
  if (!v9)
  {
    if (!*((_BYTE *)a2 + v12))
      goto LABEL_26;
    v17 = (*((unsigned __int8 *)a2 + v12) - 1) << (8 * v12);
    if (v12 > 3)
      v17 = 0;
    if ((_DWORD)v12)
    {
      if (v12 <= 3)
        v18 = (v11 & v10) + v7;
      else
        v18 = 4;
      __asm { BR              X11 }
    }
    if (v17 == -1)
      goto LABEL_26;
LABEL_25:
    memcpy(a1, a2, v13);
    return a1;
  }
  if ((*(unsigned int (**)(_QWORD *, _QWORD, _QWORD))(v6 + 48))(a2, *(unsigned int *)(v6 + 84), *(_QWORD *)(a3 + 16)))
  {
    goto LABEL_25;
  }
LABEL_26:
  v19 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v6 + 16);
  v19(a1, a2, v5);
  v19((_QWORD *)(((unint64_t)a1 + v11) & v10), (_QWORD *)(((unint64_t)a2 + v11) & v10), v5);
  if (!v9)
    *((_BYTE *)a1 + v12) = 0;
  return a1;
}

uint64_t sub_21421D4D0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  void (*v12)(uint64_t, uint64_t);

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(unsigned int *)(v4 + 84);
  v6 = *(_QWORD *)(v4 + 64);
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = v6 + v7;
  if ((_DWORD)v5)
  {
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(a1, v5, v3);
    if (!(_DWORD)result)
    {
LABEL_13:
      v12 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
      v12(a1, v3);
      return ((uint64_t (*)(uint64_t, uint64_t))v12)((v8 + a1) & ~v7, v3);
    }
  }
  else
  {
    v10 = (v8 & ~v7) + v6;
    if (!*(_BYTE *)(a1 + v10))
      goto LABEL_13;
    v11 = (*(unsigned __int8 *)(a1 + v10) - 1) << (8 * v10);
    if (v10 > 3)
      v11 = 0;
    if ((_DWORD)v10)
    {
      if (v10 > 3)
        LODWORD(v10) = 4;
      __asm { BR              X11 }
    }
    result = (v11 + 1);
    if (v11 == -1)
      goto LABEL_13;
  }
  return result;
}

_BYTE *sub_21421D5FC(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  int v12;
  int v13;
  size_t v14;
  void (*v15)(_BYTE *, _BYTE *, uint64_t);

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = v8 + v9;
  v11 = ((v8 + v9) & ~v9) + v8;
  if (v7)
  {
    if (!(*(unsigned int (**)(_BYTE *, _QWORD, _QWORD))(v6 + 48))(a2, *(unsigned int *)(v6 + 84), *(_QWORD *)(a3 + 16)))
    {
LABEL_17:
      v15 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v6 + 16);
      v15(a1, a2, v5);
      v15((_BYTE *)((unint64_t)&a1[v10] & ~v9), (_BYTE *)((unint64_t)&a2[v10] & ~v9), v5);
      if (!v7)
        a1[v11] = 0;
      return a1;
    }
  }
  else
  {
    if (!a2[v11])
      goto LABEL_17;
    v12 = (a2[v11] - 1) << (8 * v11);
    if (v11 > 3)
      v12 = 0;
    if ((_DWORD)v11)
    {
      if (v11 <= 3)
        v13 = v11;
      else
        v13 = 4;
      __asm { BR              X11 }
    }
    if (v12 == -1)
      goto LABEL_17;
  }
  if (v7)
    v14 = v11;
  else
    v14 = v11 + 1;
  memcpy(a1, a2, v14);
  return a1;
}

_BYTE *sub_21421D748(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  uint64_t (*v13)(_BYTE *, uint64_t, uint64_t);
  int v14;
  int v15;
  char v16;
  int v17;
  int v18;
  int v19;
  int v20;
  void (*v21)(_BYTE *, uint64_t);
  size_t v22;
  void (*v23)(_BYTE *, _BYTE *, uint64_t);
  void (*v24)(_BYTE *, _BYTE *, uint64_t);

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = ~v9;
  v11 = v8 + v9;
  v12 = ((v8 + v9) & ~v9) + v8;
  if ((_DWORD)v7)
  {
    v13 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v6 + 48);
    v14 = v13(a1, *(unsigned int *)(v6 + 84), *(_QWORD *)(a3 + 16));
    v15 = v13(a2, v7, v5);
    if (v14)
    {
      if (!v15)
        goto LABEL_33;
      goto LABEL_27;
    }
    goto LABEL_25;
  }
  v16 = 8 * v12;
  if (!a1[v12])
    goto LABEL_16;
  v17 = (a1[v12] - 1) << v16;
  if (v12 > 3)
    v17 = 0;
  if ((_DWORD)v12)
  {
    if (v12 <= 3)
      v18 = v12;
    else
      v18 = 4;
    __asm { BR              X12 }
  }
  if (v17 == -1)
  {
LABEL_16:
    if (!a2[v12])
      goto LABEL_31;
    v19 = (a2[v12] - 1) << v16;
    if (v12 > 3)
      v19 = 0;
    if ((_DWORD)v12)
    {
      if (v12 <= 3)
        v20 = v12;
      else
        v20 = 4;
      __asm { BR              X11 }
    }
    v15 = v19 + 1;
LABEL_25:
    if (v15)
    {
      v21 = *(void (**)(_BYTE *, uint64_t))(v6 + 8);
      v21(a1, v5);
      v21((_BYTE *)((unint64_t)&a1[v11] & v10), v5);
      goto LABEL_27;
    }
LABEL_31:
    v23 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v6 + 24);
    v23(a1, a2, v5);
    v23((_BYTE *)((unint64_t)&a1[v11] & v10), (_BYTE *)((unint64_t)&a2[v11] & v10), v5);
    return a1;
  }
  if (!a2[v12] || (a2[v12] - 1) << v16 == -1)
  {
LABEL_33:
    v24 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v6 + 16);
    v24(a1, a2, v5);
    v24((_BYTE *)((unint64_t)&a1[v11] & v10), (_BYTE *)((unint64_t)&a2[v11] & v10), v5);
    if (!(_DWORD)v7)
      a1[v12] = 0;
    return a1;
  }
LABEL_27:
  if ((_DWORD)v7)
    v22 = v12;
  else
    v22 = v12 + 1;
  memcpy(a1, a2, v22);
  return a1;
}

_BYTE *sub_21421D9FC(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  int v12;
  int v13;
  size_t v14;
  void (*v15)(_BYTE *, _BYTE *, uint64_t);

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = v8 + v9;
  v11 = ((v8 + v9) & ~v9) + v8;
  if (v7)
  {
    if (!(*(unsigned int (**)(_BYTE *, _QWORD, _QWORD))(v6 + 48))(a2, *(unsigned int *)(v6 + 84), *(_QWORD *)(a3 + 16)))
    {
LABEL_17:
      v15 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v6 + 32);
      v15(a1, a2, v5);
      v15((_BYTE *)((unint64_t)&a1[v10] & ~v9), (_BYTE *)((unint64_t)&a2[v10] & ~v9), v5);
      if (!v7)
        a1[v11] = 0;
      return a1;
    }
  }
  else
  {
    if (!a2[v11])
      goto LABEL_17;
    v12 = (a2[v11] - 1) << (8 * v11);
    if (v11 > 3)
      v12 = 0;
    if ((_DWORD)v11)
    {
      if (v11 <= 3)
        v13 = v11;
      else
        v13 = 4;
      __asm { BR              X11 }
    }
    if (v12 == -1)
      goto LABEL_17;
  }
  if (v7)
    v14 = v11;
  else
    v14 = v11 + 1;
  memcpy(a1, a2, v14);
  return a1;
}

_BYTE *sub_21421DB48(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  uint64_t (*v13)(_BYTE *, uint64_t, uint64_t);
  int v14;
  int v15;
  char v16;
  int v17;
  int v18;
  int v19;
  int v20;
  void (*v21)(_BYTE *, uint64_t);
  size_t v22;
  void (*v23)(_BYTE *, _BYTE *, uint64_t);
  void (*v24)(_BYTE *, _BYTE *, uint64_t);

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = ~v9;
  v11 = v8 + v9;
  v12 = ((v8 + v9) & ~v9) + v8;
  if ((_DWORD)v7)
  {
    v13 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v6 + 48);
    v14 = v13(a1, *(unsigned int *)(v6 + 84), *(_QWORD *)(a3 + 16));
    v15 = v13(a2, v7, v5);
    if (v14)
    {
      if (!v15)
        goto LABEL_33;
      goto LABEL_27;
    }
    goto LABEL_25;
  }
  v16 = 8 * v12;
  if (!a1[v12])
    goto LABEL_16;
  v17 = (a1[v12] - 1) << v16;
  if (v12 > 3)
    v17 = 0;
  if ((_DWORD)v12)
  {
    if (v12 <= 3)
      v18 = v12;
    else
      v18 = 4;
    __asm { BR              X12 }
  }
  if (v17 == -1)
  {
LABEL_16:
    if (!a2[v12])
      goto LABEL_31;
    v19 = (a2[v12] - 1) << v16;
    if (v12 > 3)
      v19 = 0;
    if ((_DWORD)v12)
    {
      if (v12 <= 3)
        v20 = v12;
      else
        v20 = 4;
      __asm { BR              X11 }
    }
    v15 = v19 + 1;
LABEL_25:
    if (v15)
    {
      v21 = *(void (**)(_BYTE *, uint64_t))(v6 + 8);
      v21(a1, v5);
      v21((_BYTE *)((unint64_t)&a1[v11] & v10), v5);
      goto LABEL_27;
    }
LABEL_31:
    v23 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v6 + 40);
    v23(a1, a2, v5);
    v23((_BYTE *)((unint64_t)&a1[v11] & v10), (_BYTE *)((unint64_t)&a2[v11] & v10), v5);
    return a1;
  }
  if (!a2[v12] || (a2[v12] - 1) << v16 == -1)
  {
LABEL_33:
    v24 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v6 + 32);
    v24(a1, a2, v5);
    v24((_BYTE *)((unint64_t)&a1[v11] & v10), (_BYTE *)((unint64_t)&a2[v11] & v10), v5);
    if (!(_DWORD)v7)
      a1[v12] = 0;
    return a1;
  }
LABEL_27:
  if ((_DWORD)v7)
    v22 = v12;
  else
    v22 = v12 + 1;
  memcpy(a1, a2, v22);
  return a1;
}

uint64_t sub_21421DDFC(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  char v11;
  int v12;
  unsigned int v13;
  int v14;
  unsigned int v16;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = v5 - 1;
  if (!v5)
    v6 = 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v5)
    v8 = *(_QWORD *)(v4 + 64);
  else
    v8 = v7 + 1;
  if (!a2)
    return 0;
  v9 = a2 - v6;
  if (a2 > v6)
  {
    v10 = v8 + ((v7 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    v11 = 8 * v10;
    if (v10 > 3)
      goto LABEL_9;
    v13 = ((v9 + ~(-1 << v11)) >> v11) + 1;
    if (HIWORD(v13))
    {
      v12 = *(_DWORD *)(a1 + v10);
      if (v12)
        goto LABEL_16;
    }
    else
    {
      if (v13 <= 0xFF)
      {
        if (v13 < 2)
          goto LABEL_23;
LABEL_9:
        v12 = *(unsigned __int8 *)(a1 + v10);
        if (!*(_BYTE *)(a1 + v10))
          goto LABEL_23;
LABEL_16:
        v14 = (v12 - 1) << v11;
        if (v10 > 3)
          v14 = 0;
        if ((_DWORD)v10)
        {
          if (v10 > 3)
            LODWORD(v10) = 4;
          __asm { BR              X12 }
        }
        return v6 + v14 + 1;
      }
      v12 = *(unsigned __int16 *)(a1 + v10);
      if (*(_WORD *)(a1 + v10))
        goto LABEL_16;
    }
  }
LABEL_23:
  if (v5 < 2)
    return 0;
  v16 = (*(uint64_t (**)(void))(v4 + 48))();
  if (v16 >= 2)
    return v16 - 1;
  else
    return 0;
}

void sub_21421DF44(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unsigned int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  size_t v10;
  BOOL v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;

  v6 = 0;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = v8 - 1;
  if (v8)
  {
    v10 = ((*(_QWORD *)(v7 + 64) + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))
        + *(_QWORD *)(v7 + 64);
  }
  else
  {
    v9 = 0;
    v10 = ((*(_QWORD *)(v7 + 64) + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))
        + *(_QWORD *)(v7 + 64)
        + 1;
  }
  v11 = a3 >= v9;
  v12 = a3 - v9;
  if (v12 != 0 && v11)
  {
    if (v10 > 3)
    {
      v6 = 1u;
      if (v9 < a2)
        goto LABEL_14;
      goto LABEL_21;
    }
    v13 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
    if (HIWORD(v13))
    {
      v6 = 4u;
      if (v9 < a2)
      {
LABEL_14:
        v14 = ~v9 + a2;
        if (v10 < 4)
        {
          if ((_DWORD)v10)
          {
            v15 = v14 & ~(-1 << (8 * v10));
            bzero(a1, v10);
            if ((_DWORD)v10 == 3)
            {
              *a1 = v15;
              *((_BYTE *)a1 + 2) = BYTE2(v15);
            }
            else if ((_DWORD)v10 == 2)
            {
              *a1 = v15;
            }
            else
            {
              *(_BYTE *)a1 = v15;
            }
          }
        }
        else
        {
          bzero(a1, v10);
          *(_DWORD *)a1 = v14;
        }
        __asm { BR              X10 }
      }
LABEL_21:
      __asm { BR              X12 }
    }
    if (v13 >= 0x100)
      v6 = 2;
    else
      v6 = v13 > 1;
  }
  if (v9 < a2)
    goto LABEL_14;
  goto LABEL_21;
}

void sub_21421E168()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_21421E170()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

void sub_21421E190()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
}

void sub_21421E198()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
}

void sub_21421E1A8()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
}

uint64_t type metadata accessor for ExtentCollector(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2141D8E88(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ExtentCollector);
}

uint64_t getEnumTagSinglePayload for DimensionOffset(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for DimensionOffset(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 24) = v3;
  return result;
}

ValueMetadata *type metadata accessor for DimensionOffset()
{
  return &type metadata for DimensionOffset;
}

uint64_t destroy for StackGroup(uint64_t result)
{
  uint64_t v1;
  unsigned int v2;
  unsigned int v3;

  v1 = result;
  v2 = *(unsigned __int8 *)(result + 24);
  if (v2 <= 0xFB)
    result = sub_2141EF1B0(*(_QWORD *)(result + 8), *(_QWORD *)(result + 16), v2);
  v3 = *(unsigned __int8 *)(v1 + 48);
  if (v3 <= 0xFB)
    return sub_2141EF1B0(*(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), v3);
  return result;
}

uint64_t initializeWithCopy for StackGroup(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;

  *(_WORD *)a1 = *(_WORD *)a2;
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  v4 = *(unsigned __int8 *)(a2 + 24);
  if (v4 <= 0xFB)
  {
    v5 = *(_QWORD *)(a2 + 8);
    v6 = *(_QWORD *)(a2 + 16);
    sub_2141DD140(v5, v6, v4);
    *(_QWORD *)(a1 + 8) = v5;
    *(_QWORD *)(a1 + 16) = v6;
    *(_BYTE *)(a1 + 24) = v4;
  }
  else
  {
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  }
  v7 = *(unsigned __int8 *)(a2 + 48);
  if (v7 <= 0xFB)
  {
    v9 = *(_QWORD *)(a2 + 32);
    v8 = *(_QWORD *)(a2 + 40);
    sub_2141DD140(v9, v8, v7);
    *(_QWORD *)(a1 + 32) = v9;
    *(_QWORD *)(a1 + 40) = v8;
    *(_BYTE *)(a1 + 48) = v7;
  }
  else
  {
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  }
  return a1;
}

uint64_t assignWithCopy for StackGroup(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 *v5;
  unsigned int v6;
  __int128 v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  _OWORD *v16;
  _OWORD *v17;
  unsigned int v18;
  __int128 v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  v4 = a1 + 8;
  v5 = (__int128 *)(a2 + 8);
  v6 = *(unsigned __int8 *)(a2 + 24);
  if (*(unsigned __int8 *)(a1 + 24) <= 0xFBu)
  {
    if (v6 <= 0xFB)
    {
      v11 = *(_QWORD *)(a2 + 8);
      v12 = *(_QWORD *)(a2 + 16);
      sub_2141DD140(v11, v12, v6);
      v13 = *(_QWORD *)(a1 + 8);
      v14 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 8) = v11;
      *(_QWORD *)(a1 + 16) = v12;
      v15 = *(_BYTE *)(a1 + 24);
      *(_BYTE *)(a1 + 24) = v6;
      sub_2141EF1B0(v13, v14, v15);
    }
    else
    {
      sub_21421E4C0(a1 + 8);
      v8 = *((_BYTE *)v5 + 16);
      *(_OWORD *)v4 = *v5;
      *(_BYTE *)(v4 + 16) = v8;
    }
  }
  else if (v6 <= 0xFB)
  {
    v9 = *(_QWORD *)(a2 + 8);
    v10 = *(_QWORD *)(a2 + 16);
    sub_2141DD140(v9, v10, v6);
    *(_QWORD *)(a1 + 8) = v9;
    *(_QWORD *)(a1 + 16) = v10;
    *(_BYTE *)(a1 + 24) = v6;
  }
  else
  {
    v7 = *v5;
    *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
    *(_OWORD *)v4 = v7;
  }
  v16 = (_OWORD *)(a1 + 32);
  v17 = (_OWORD *)(a2 + 32);
  v18 = *(unsigned __int8 *)(a2 + 48);
  if (*(unsigned __int8 *)(a1 + 48) <= 0xFBu)
  {
    if (v18 <= 0xFB)
    {
      v24 = *(_QWORD *)(a2 + 32);
      v23 = *(_QWORD *)(a2 + 40);
      sub_2141DD140(v24, v23, v18);
      v25 = *(_QWORD *)(a1 + 32);
      v26 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 32) = v24;
      *(_QWORD *)(a1 + 40) = v23;
      v27 = *(_BYTE *)(a1 + 48);
      *(_BYTE *)(a1 + 48) = v18;
      sub_2141EF1B0(v25, v26, v27);
    }
    else
    {
      sub_21421E4C0(a1 + 32);
      v20 = *(_BYTE *)(a2 + 48);
      *v16 = *v17;
      *(_BYTE *)(a1 + 48) = v20;
    }
  }
  else if (v18 <= 0xFB)
  {
    v22 = *(_QWORD *)(a2 + 32);
    v21 = *(_QWORD *)(a2 + 40);
    sub_2141DD140(v22, v21, v18);
    *(_QWORD *)(a1 + 32) = v22;
    *(_QWORD *)(a1 + 40) = v21;
    *(_BYTE *)(a1 + 48) = v18;
  }
  else
  {
    v19 = *v17;
    *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
    *v16 = v19;
  }
  return a1;
}

uint64_t sub_21421E4C0(uint64_t a1)
{
  destroy for AnyPlottableValue.Storage(a1);
  return a1;
}

__n128 initializeWithTake for StackGroup(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for StackGroup(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;

  *(_WORD *)a1 = *(_WORD *)a2;
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  v4 = a1 + 8;
  v5 = a2 + 8;
  v6 = *(unsigned __int8 *)(a1 + 24);
  if (v6 > 0xFB)
    goto LABEL_4;
  v7 = *(unsigned __int8 *)(a2 + 24);
  if (v7 > 0xFB)
  {
    sub_21421E4C0(a1 + 8);
LABEL_4:
    *(_OWORD *)v4 = *(_OWORD *)v5;
    *(_BYTE *)(v4 + 16) = *(_BYTE *)(v5 + 16);
    goto LABEL_6;
  }
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)v5;
  *(_BYTE *)(a1 + 24) = v7;
  sub_2141EF1B0(v8, v9, v6);
LABEL_6:
  v10 = (_OWORD *)(a2 + 32);
  v11 = *(unsigned __int8 *)(a1 + 48);
  if (v11 <= 0xFB)
  {
    v12 = *(unsigned __int8 *)(a2 + 48);
    if (v12 <= 0xFB)
    {
      v13 = *(_QWORD *)(a1 + 32);
      v14 = *(_QWORD *)(a1 + 40);
      *(_OWORD *)(a1 + 32) = *v10;
      *(_BYTE *)(a1 + 48) = v12;
      sub_2141EF1B0(v13, v14, v11);
      return a1;
    }
    sub_21421E4C0(a1 + 32);
  }
  *(_OWORD *)(a1 + 32) = *v10;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for StackGroup(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 49))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 2);
  v4 = v3 >= 2;
  v5 = v3 - 2;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for StackGroup(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 48) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 49) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 49) = 0;
    if (a2)
      *(_BYTE *)(result + 2) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for StackGroup()
{
  return &type metadata for StackGroup;
}

unint64_t sub_21421E698()
{
  unint64_t result;

  result = qword_253F10BF8;
  if (!qword_253F10BF8)
  {
    result = MEMORY[0x2199CD934](&unk_2144282D0, &type metadata for StackGroup);
    atomic_store(result, (unint64_t *)&qword_253F10BF8);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for LegendLayout(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s6Charts10StackGroupV4KindOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_21421E7B8 + 4 * byte_214427C29[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_21421E7EC + 4 * byte_214427C24[v4]))();
}

uint64_t sub_21421E7EC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21421E7F4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21421E7FCLL);
  return result;
}

uint64_t sub_21421E808(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21421E810);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_21421E814(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21421E81C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_21421E828(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for StackGroup.Kind()
{
  return &type metadata for StackGroup.Kind;
}

__n128 initializeWithTake for VectorizedPlottables.Position(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for ChartContentRenderContext.OffsetValues(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 80))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 56);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ChartContentRenderContext.OffsetValues(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 80) = 0;
    if (a2)
      *(_BYTE *)(result + 56) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ChartContentRenderContext.OffsetValues()
{
  return &type metadata for ChartContentRenderContext.OffsetValues;
}

unint64_t sub_21421E914()
{
  unint64_t result;

  result = qword_254D69680;
  if (!qword_254D69680)
  {
    result = MEMORY[0x2199CD934](&unk_2144283A8, &type metadata for StackGroup.Kind);
    atomic_store(result, (unint64_t *)&qword_254D69680);
  }
  return result;
}

uint64_t sub_21421E968@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  sub_214423D44();
  result = sub_214423E10();
  *a1 = result;
  return result;
}

double sub_21421E9B4()
{
  return 0.5;
}

uint64_t sub_21421E9BC(uint64_t a1, uint64_t a2)
{
  double v2;
  double v3;
  int v4;

  v2 = *(double *)a1;
  v3 = *(double *)a2;
  v4 = *(unsigned __int8 *)(a2 + 8);
  if (!*(_BYTE *)(a1 + 8))
  {
    if (*(_BYTE *)(a2 + 8))
      return 0;
    return v2 == v3;
  }
  if (*(_BYTE *)(a1 + 8) == 1)
  {
    if (v4 != 1)
      return 0;
    return v2 == v3;
  }
  if (v2 == 0.0)
  {
    if (v4 != 2 || *(_QWORD *)&v3 != 0)
      return 0;
  }
  else if (v4 != 2 || *(_QWORD *)&v3 != 1)
  {
    return 0;
  }
  return 1;
}

long double sub_21421EA28(uint64_t a1, char a2, long double a3, double a4, double a5)
{
  long double v7;
  double v8;

  if (a2)
  {
    if (a2 == 1)
    {
      v7 = a3;
      v8 = *(double *)&a1 * a3;
      if ((*(_QWORD *)&v7 & 0x8000000000000000) != 0)
        a3 = -log(1.0 - v8);
      else
        a3 = log(v8 + 1.0);
    }
    else if (*(double *)&a1 != 0.0)
    {
      a3 = log(a3);
    }
  }
  else
  {
    a3 = pow(a3, *(long double *)&a1);
  }
  return a3 * a4 + a5;
}

double sub_21421EAA4(uint64_t a1, char a2, double a3, double a4, double a5)
{
  double result;
  double v7;

  result = (a3 - a5) / a4;
  if (!a2)
    return pow(result, 1.0 / *(double *)&a1);
  if (a2 == 1)
  {
    if ((*(_QWORD *)&result & 0x8000000000000000) != 0)
      v7 = 1.0 - exp(-result);
    else
      v7 = exp(result) + -1.0;
    return v7 / *(double *)&a1;
  }
  else if (*(double *)&a1 != 0.0)
  {
    return exp(result);
  }
  return result;
}

uint64_t sub_21421EB2C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  double v4;
  long double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  double v10;
  void *v11;
  void *v12;
  double v13;

  if (*(_QWORD *)(result + 16) != 2)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    return result;
  }
  v3 = result;
  v4 = *(double *)(result + 32);
  if (v4 <= 0.0)
    goto LABEL_9;
  v5 = *(double *)(result + 40);
  if (v5 <= 0.0)
    goto LABEL_9;
  if (v4 == v5)
  {
    v6 = swift_allocObject();
    v7 = 0;
    v8 = 0;
    *(double *)(v6 + 16) = v4;
    v9 = 0.5;
    v10 = 0.0;
    v11 = sub_21421F140;
    v12 = sub_21421E9B4;
  }
  else
  {
    v13 = log(*(long double *)(result + 32));
    v10 = 1.0 / (log(v5) - v13);
    v7 = swift_allocObject();
    *(double *)(v7 + 16) = v13;
    *(double *)(v7 + 24) = v10;
    v6 = swift_allocObject();
    *(double *)(v6 + 16) = v10;
    *(double *)(v6 + 24) = v13;
    v9 = -(v13 * v10);
    v11 = sub_21421F0E0;
    v12 = sub_21421F0A4;
    v8 = 1;
  }
  *(_QWORD *)a2 = v12;
  *(_QWORD *)(a2 + 8) = v7;
  *(_QWORD *)(a2 + 16) = v11;
  *(_QWORD *)(a2 + 24) = v6;
  *(_QWORD *)(a2 + 32) = v3;
  *(_QWORD *)(a2 + 40) = v8;
  *(_QWORD *)(a2 + 48) = 2;
  *(double *)(a2 + 56) = v10;
  *(double *)(a2 + 64) = v9;
  return swift_bridgeObjectRetain();
}

void sub_21421EC54(uint64_t a1@<X0>, uint64_t a2@<X8>, long double a3@<D0>)
{
  double v5;
  long double v6;
  double *v7;
  double *v8;
  double v9;
  __int128 v10;
  double v11;
  void *v12;
  void *v13;
  double v14;
  double v15;
  double v16;

  if (*(_QWORD *)(a1 + 16) == 2)
  {
    v5 = *(double *)(a1 + 32);
    v6 = *(double *)(a1 + 40);
    if (v5 == v6)
    {
      v7 = (double *)swift_allocObject();
      v8 = 0;
      v9 = 0.0;
      v7[2] = v5;
      v10 = xmmword_2144283E0;
      v11 = 0.5;
      v12 = sub_21421F44C;
      v13 = sub_21421E9B4;
LABEL_7:
      *(_QWORD *)a2 = v13;
      *(_QWORD *)(a2 + 8) = v8;
      *(_QWORD *)(a2 + 16) = v12;
      *(_QWORD *)(a2 + 24) = v7;
      *(_QWORD *)(a2 + 32) = a1;
      *(_OWORD *)(a2 + 40) = v10;
      *(double *)(a2 + 56) = v9;
      *(double *)(a2 + 64) = v11;
      swift_bridgeObjectRetain();
      return;
    }
    v14 = pow(*(long double *)(a1 + 32), a3);
    v15 = pow(v6, a3);
    if ((~*(_QWORD *)&v14 & 0x7FF0000000000000) != 0)
    {
      v16 = 1.0 / (v15 - v14);
      v9 = v16;
      if ((*(_QWORD *)&v16 & 0x7FF0000000000000) != 0x7FF0000000000000)
      {
        v8 = (double *)swift_allocObject();
        v8[2] = a3;
        v8[3] = v14;
        v8[4] = v16;
        v7 = (double *)swift_allocObject();
        v7[2] = v16;
        v7[3] = v14;
        v7[4] = a3;
        v11 = -(v14 * v16);
        v10 = *(unint64_t *)&a3;
        v12 = sub_21421F1A0;
        v13 = sub_21421F160;
        goto LABEL_7;
      }
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t sub_21421EDB4@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v5;
  double v6;
  double v7;
  double *v8;
  double *v9;
  int64x2_t v10;
  double v11;
  double v12;
  void *v13;
  void *v14;
  double v15;
  double v16;
  double v17;
  double v18;

  if (a3 > 0.0 && *(_QWORD *)(result + 16) == 2)
  {
    v5 = result;
    v6 = *(double *)(result + 32);
    v7 = *(double *)(result + 40);
    if (v6 == v7)
    {
      v8 = (double *)swift_allocObject();
      v9 = 0;
      v8[2] = v6;
      v10 = (int64x2_t)xmmword_2144283E0;
      v11 = 0.5;
      v12 = 0.0;
      v13 = sub_21421F44C;
      v14 = sub_21421E9B4;
    }
    else
    {
      v15 = v6 * a3;
      if ((*(_QWORD *)&v6 & 0x8000000000000000) != 0)
        v16 = -log(1.0 - v15);
      else
        v16 = log(v15 + 1.0);
      v17 = v7 * a3;
      if ((*(_QWORD *)&v7 & 0x8000000000000000) != 0)
        v18 = -log(1.0 - v17);
      else
        v18 = log(v17 + 1.0);
      v12 = 1.0 / (v18 - v16);
      v9 = (double *)swift_allocObject();
      v9[2] = a3;
      v9[3] = v16;
      v9[4] = v12;
      v8 = (double *)swift_allocObject();
      v8[2] = v12;
      v8[3] = v16;
      v8[4] = a3;
      v11 = -(v16 * v12);
      v10 = vdupq_n_s64(1uLL);
      *(double *)v10.i64 = a3;
      v13 = sub_21421F284;
      v14 = sub_21421F21C;
    }
    *(_QWORD *)a2 = v14;
    *(_QWORD *)(a2 + 8) = v9;
    *(_QWORD *)(a2 + 16) = v13;
    *(_QWORD *)(a2 + 24) = v8;
    *(_QWORD *)(a2 + 32) = v5;
    *(int64x2_t *)(a2 + 40) = v10;
    *(double *)(a2 + 56) = v12;
    *(double *)(a2 + 64) = v11;
    return swift_bridgeObjectRetain();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_21421EF30@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  double v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  double v9;
  void *v10;
  void *v11;

  if (*(_QWORD *)(result + 16) == 2)
  {
    v3 = result;
    v5 = *(double *)(result + 32);
    v4 = *(double *)(result + 40);
    if (v5 == v4)
    {
      v6 = swift_allocObject();
      v7 = 0;
      *(double *)(v6 + 16) = v5;
      v8 = 0.5;
      v9 = 0.0;
      v10 = sub_21421F44C;
      v11 = sub_21421E9B4;
    }
    else
    {
      v9 = 1.0 / (v4 - v5);
      v7 = swift_allocObject();
      *(double *)(v7 + 16) = v5;
      *(double *)(v7 + 24) = v9;
      v6 = swift_allocObject();
      *(double *)(v6 + 16) = v9;
      *(double *)(v6 + 24) = v5;
      v8 = -(v5 * v9);
      v10 = sub_21421F05C;
      v11 = sub_21421F038;
    }
    *(_QWORD *)a2 = v11;
    *(_QWORD *)(a2 + 8) = v7;
    *(_QWORD *)(a2 + 16) = v10;
    *(_QWORD *)(a2 + 24) = v6;
    *(_QWORD *)(a2 + 32) = v3;
    *(_OWORD *)(a2 + 40) = xmmword_2144283E0;
    *(double *)(a2 + 56) = v9;
    *(double *)(a2 + 64) = v8;
    return swift_bridgeObjectRetain();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_21421F028()
{
  return swift_deallocObject();
}

double sub_21421F038(double *a1)
{
  uint64_t v1;

  return *(double *)(v1 + 24) * (*a1 - *(double *)(v1 + 16));
}

uint64_t sub_21421F04C()
{
  return swift_deallocObject();
}

uint64_t sub_21421F05C@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  if ((a2 & 1) == 0)
    *(double *)&result = *(double *)(v3 + 24) + *(double *)&result / *(double *)(v3 + 16);
  *(double *)a3 = *(double *)&result;
  *(_BYTE *)(a3 + 8) = a2 & 1;
  return result;
}

uint64_t sub_21421F084()
{
  return swift_deallocObject();
}

uint64_t sub_21421F094()
{
  return swift_deallocObject();
}

long double sub_21421F0A4(long double *a1)
{
  uint64_t v1;
  double v2;
  double v3;

  v2 = *(double *)(v1 + 16);
  v3 = *(double *)(v1 + 24);
  return v3 * (log(*a1) - v2);
}

uint64_t sub_21421F0D0()
{
  return swift_deallocObject();
}

uint64_t sub_21421F0E0@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  if ((a2 & 1) == 0)
    *(double *)&result = exp(*(double *)(v3 + 24) + *(double *)&result / *(double *)(v3 + 16));
  *(double *)a3 = *(double *)&result;
  *(_BYTE *)(a3 + 8) = a2 & 1;
  return result;
}

uint64_t sub_21421F130()
{
  return swift_deallocObject();
}

double sub_21421F140@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  double result;

  result = *(double *)(v1 + 16);
  *(double *)a1 = result;
  *(_BYTE *)(a1 + 8) = 0;
  return result;
}

uint64_t sub_21421F150()
{
  return swift_deallocObject();
}

long double sub_21421F160(long double *a1)
{
  uint64_t v1;
  double v2;
  double v3;

  v2 = *(double *)(v1 + 24);
  v3 = *(double *)(v1 + 32);
  return v3 * (pow(*a1, *(long double *)(v1 + 16)) - v2);
}

uint64_t sub_21421F190()
{
  return swift_deallocObject();
}

uint64_t sub_21421F1A0@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  double *v3;

  if ((a2 & 1) == 0)
    *(double *)&result = pow(v3[3] + *(double *)&result / v3[2], 1.0 / v3[4]);
  *(double *)a3 = *(double *)&result;
  *(_BYTE *)(a3 + 8) = a2 & 1;
  return result;
}

uint64_t sub_21421F1FC()
{
  return swift_deallocObject();
}

uint64_t sub_21421F20C()
{
  return swift_deallocObject();
}

double sub_21421F21C(double *a1)
{
  double *v1;
  double v2;
  double v3;
  double v4;
  double v5;

  v2 = v1[3];
  v3 = v1[4];
  v4 = v1[2] * *a1;
  if ((*(_QWORD *)a1 & 0x8000000000000000) != 0)
    v5 = -log(1.0 - v4);
  else
    v5 = log(v4 + 1.0);
  return v3 * (v5 - v2);
}

uint64_t sub_21421F274()
{
  return swift_deallocObject();
}

uint64_t sub_21421F284@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  double *v3;
  double v6;
  double v7;
  double v8;

  if ((a2 & 1) == 0)
  {
    v6 = v3[4];
    v7 = v3[3] + *(double *)&result / v3[2];
    if ((*(_QWORD *)&v7 & 0x8000000000000000) != 0)
      v8 = 1.0 - exp(-v7);
    else
      v8 = exp(v7) + -1.0;
    *(double *)&result = v8 / v6;
  }
  *(double *)a3 = *(double *)&result;
  *(_BYTE *)(a3 + 8) = a2 & 1;
  return result;
}

uint64_t sub_21421F308()
{
  return swift_deallocObject();
}

uint64_t sub_21421F318@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(_QWORD *)(result + 16);
  if (v3)
  {
    v4 = *(double *)(result + 32);
    result += 32;
    v5 = *(_QWORD *)(result + 24);
    v6 = *(_QWORD *)(result + 32);
    v8 = *(_QWORD *)(result + 8);
    v7 = *(_QWORD *)(result + 16);
    *(double *)a2 = v4 + (*(double *)(result + 40 * v3 - 40) - v4) * a3;
    *(_QWORD *)(a2 + 8) = v8;
    *(_QWORD *)(a2 + 16) = v7;
    *(_QWORD *)(a2 + 24) = v5;
    *(_QWORD *)(a2 + 32) = v6;
  }
  else
  {
    __break(1u);
  }
  return result;
}

ValueMetadata *type metadata accessor for GradientScaleRange()
{
  return &type metadata for GradientScaleRange;
}

uint64_t sub_21421F370(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 8) <= 1u)
    return *(unsigned __int8 *)(a1 + 8);
  else
    return (*(_DWORD *)a1 + 2);
}

uint64_t sub_21421F388(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(_QWORD *)result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(_BYTE *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for ContinuousScaleFunction()
{
  return &type metadata for ContinuousScaleFunction;
}

uint64_t getEnumTagSinglePayload for ContinuousScaleRepresentation(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ContinuousScaleRepresentation(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 254;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 32) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ContinuousScaleRepresentation()
{
  return &type metadata for ContinuousScaleRepresentation;
}

uint64_t sub_21421F450(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  _QWORD v13[6];
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  _QWORD v19[6];
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  v3 = v2;
  *(_QWORD *)&v20 = a1;
  sub_214425478();
  v19[0] = a2;
  swift_beginAccess();
  v5 = *(_QWORD *)(v2 + 16);
  if (*(_QWORD *)(v5 + 16) && (v6 = sub_214336C7C(v19), (v7 & 1) != 0))
  {
    v8 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v6);
  }
  else
  {
    swift_endAccess();
    sub_2144258BC();
    sub_214425880();
    sub_214425898();
    v22 = v16;
    v23 = v17;
    v24 = v18;
    v20 = v14;
    v21 = v15;
    v9 = sub_2144258A4();
    v8 = sub_2141ED2E4(v9);
    sub_2141ED7E0((uint64_t)v19, (uint64_t)v13);
    swift_beginAccess();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v12 = *(_QWORD *)(v3 + 16);
    *(_QWORD *)(v3 + 16) = 0x8000000000000000;
    sub_2142A249C(v8, v13, isUniquelyReferenced_nonNull_native);
    *(_QWORD *)(v3 + 16) = v12;
    swift_bridgeObjectRelease();
    sub_2141ED82C((uint64_t)v13);
  }
  swift_endAccess();
  sub_2141ED82C((uint64_t)v19);
  return v8;
}

uint64_t sub_21421F5D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  _QWORD v13[6];
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  _QWORD v19[6];
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  v3 = v2;
  *(_QWORD *)&v20 = a1;
  sub_214425478();
  v19[0] = a2;
  swift_beginAccess();
  v5 = *(_QWORD *)(v2 + 16);
  if (*(_QWORD *)(v5 + 16) && (v6 = sub_214336C7C(v19), (v7 & 1) != 0))
  {
    v8 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v6);
  }
  else
  {
    swift_endAccess();
    sub_2144258BC();
    sub_214425880();
    sub_214425898();
    v22 = v16;
    v23 = v17;
    v24 = v18;
    v20 = v14;
    v21 = v15;
    v9 = sub_2144258A4();
    v8 = sub_2141ED2E4(v9);
    sub_2141ED7E0((uint64_t)v19, (uint64_t)v13);
    swift_beginAccess();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v12 = *(_QWORD *)(v3 + 16);
    *(_QWORD *)(v3 + 16) = 0x8000000000000000;
    sub_2142A249C(v8, v13, isUniquelyReferenced_nonNull_native);
    *(_QWORD *)(v3 + 16) = v12;
    swift_bridgeObjectRelease();
    sub_2141ED82C((uint64_t)v13);
  }
  swift_endAccess();
  sub_2141ED82C((uint64_t)v19);
  return v8;
}

uint64_t sub_21421F758(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v13;
  _QWORD v14[6];
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  _QWORD v20[6];
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;

  v4 = v3;
  *(_QWORD *)&v21 = a1;
  BYTE8(v21) = a2;
  sub_214226858();
  sub_214425478();
  v20[0] = a3;
  swift_beginAccess();
  v6 = *(_QWORD *)(v3 + 16);
  if (*(_QWORD *)(v6 + 16) && (v7 = sub_214336C7C(v20), (v8 & 1) != 0))
  {
    v9 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v7);
  }
  else
  {
    swift_endAccess();
    sub_2144258BC();
    sub_214425880();
    sub_214425880();
    sub_214425898();
    v23 = v17;
    v24 = v18;
    v25 = v19;
    v21 = v15;
    v22 = v16;
    v10 = sub_2144258A4();
    v9 = sub_2141ED2E4(v10);
    sub_2141ED7E0((uint64_t)v20, (uint64_t)v14);
    swift_beginAccess();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v13 = *(_QWORD *)(v4 + 16);
    *(_QWORD *)(v4 + 16) = 0x8000000000000000;
    sub_2142A249C(v9, v14, isUniquelyReferenced_nonNull_native);
    *(_QWORD *)(v4 + 16) = v13;
    swift_bridgeObjectRelease();
    sub_2141ED82C((uint64_t)v14);
  }
  swift_endAccess();
  sub_2141ED82C((uint64_t)v20);
  return v9;
}

uint64_t sub_21421F8F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v13;
  _QWORD v14[6];
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  _QWORD v20[6];
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;

  v4 = v3;
  *(_QWORD *)&v21 = a1;
  *((_QWORD *)&v21 + 1) = a2;
  swift_bridgeObjectRetain();
  sub_214425478();
  v20[0] = a3;
  swift_beginAccess();
  v6 = *(_QWORD *)(v3 + 16);
  if (*(_QWORD *)(v6 + 16) && (v7 = sub_214336C7C(v20), (v8 & 1) != 0))
  {
    v9 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v7);
  }
  else
  {
    swift_endAccess();
    sub_2144258BC();
    sub_214424F14();
    sub_214425898();
    v23 = v17;
    v24 = v18;
    v25 = v19;
    v21 = v15;
    v22 = v16;
    v10 = sub_2144258A4();
    v9 = sub_2141ED2E4(v10);
    sub_2141ED7E0((uint64_t)v20, (uint64_t)v14);
    swift_beginAccess();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v13 = *(_QWORD *)(v4 + 16);
    *(_QWORD *)(v4 + 16) = 0x8000000000000000;
    sub_2142A249C(v9, v14, isUniquelyReferenced_nonNull_native);
    *(_QWORD *)(v4 + 16) = v13;
    swift_bridgeObjectRelease();
    sub_2141ED82C((uint64_t)v14);
  }
  swift_endAccess();
  sub_2141ED82C((uint64_t)v20);
  return v9;
}

uint64_t sub_21421FA8C(uint64_t a1, double a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  _QWORD v13[6];
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  _QWORD v19[6];
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  v3 = v2;
  *(double *)&v20 = a2;
  sub_214425478();
  v19[0] = a1;
  swift_beginAccess();
  v5 = *(_QWORD *)(v2 + 16);
  if (*(_QWORD *)(v5 + 16) && (v6 = sub_214336C7C(v19), (v7 & 1) != 0))
  {
    v8 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v6);
  }
  else
  {
    swift_endAccess();
    sub_2144258BC();
    sub_214425898();
    sub_214425898();
    v22 = v16;
    v23 = v17;
    v24 = v18;
    v20 = v14;
    v21 = v15;
    v9 = sub_2144258A4();
    v8 = sub_2141ED2E4(v9);
    sub_2141ED7E0((uint64_t)v19, (uint64_t)v13);
    swift_beginAccess();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v12 = *(_QWORD *)(v3 + 16);
    *(_QWORD *)(v3 + 16) = 0x8000000000000000;
    sub_2142A249C(v8, v13, isUniquelyReferenced_nonNull_native);
    *(_QWORD *)(v3 + 16) = v12;
    swift_bridgeObjectRelease();
    sub_2141ED82C((uint64_t)v13);
  }
  swift_endAccess();
  sub_2141ED82C((uint64_t)v19);
  return v8;
}

uint64_t sub_21421FC18(uint64_t a1, void (*a2)(void), uint64_t a3)
{
  return sub_21421FC30(a1, a2, a3, sub_21421F450);
}

uint64_t sub_21421FC24(uint64_t a1, void (*a2)(void), uint64_t a3)
{
  return sub_21421FC30(a1, a2, a3, sub_21421F5D4);
}

uint64_t sub_21421FC30(uint64_t a1, void (*a2)(void), uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = v4;
  v9 = *(_QWORD *)(v6 + 16);
  v10 = *(_QWORD *)(v9 + 32);
  swift_retain();
  v11 = a4(a1, v10);
  v12 = *(_QWORD *)(v9 + 32);
  *(_QWORD *)(v9 + 32) = v11;
  v13 = *(_QWORD *)(v6 + 24);
  *(_QWORD *)(v6 + 24) = v11;
  a2();
  *(_QWORD *)(v6 + 24) = v13;
  *(_QWORD *)(v9 + 32) = v12;
  return swift_release();
}

uint64_t sub_21421FCC0(uint64_t a1, char a2, void (*a3)(void))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = v3;
  v8 = *(_QWORD *)(v4 + 16);
  v9 = *(_QWORD *)(v8 + 32);
  swift_retain();
  v10 = sub_21421F758(a1, a2, v9);
  v11 = *(_QWORD *)(v8 + 32);
  *(_QWORD *)(v8 + 32) = v10;
  v12 = *(_QWORD *)(v4 + 24);
  *(_QWORD *)(v4 + 24) = v10;
  a3();
  *(_QWORD *)(v4 + 24) = v12;
  *(_QWORD *)(v8 + 32) = v11;
  return swift_release();
}

uint64_t sub_21421FD54(uint64_t a1, char a2, void (*a3)(uint64_t *__return_ptr))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v4 = v3;
  v8 = *(_QWORD *)(v4 + 16);
  v9 = *(_QWORD *)(v8 + 32);
  swift_retain();
  v10 = sub_21421F758(a1, a2, v9);
  v11 = *(_QWORD *)(v8 + 32);
  *(_QWORD *)(v8 + 32) = v10;
  v12 = *(_QWORD *)(v4 + 24);
  *(_QWORD *)(v4 + 24) = v10;
  a3(&v15);
  *(_QWORD *)(v4 + 24) = v12;
  v13 = v15;
  *(_QWORD *)(v8 + 32) = v11;
  swift_release();
  return v13;
}

uint64_t BuilderTuple.elements.getter@<X0>(uint64_t TupleTypeMetadata@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  __int128 *v12;
  _OWORD *v13;
  unint64_t v14;
  __int128 v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t result;
  uint64_t *v25;
  int *v26;
  unint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v3 = v2;
  v4 = TupleTypeMetadata;
  v6 = *(_QWORD *)(TupleTypeMetadata + 16);
  if (v6 == 1)
  {
    v7 = *(_QWORD *)(*(_QWORD *)(TupleTypeMetadata + 24) & 0xFFFFFFFFFFFFFELL);
  }
  else
  {
    MEMORY[0x24BDAC7A8](TupleTypeMetadata);
    v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (v6)
    {
      v10 = 0;
      v11 = *(_QWORD *)(v4 + 24) & 0xFFFFFFFFFFFFFFFELL;
      if (v6 < 4)
        goto LABEL_9;
      if ((unint64_t)&v9[-v11] < 0x20)
        goto LABEL_9;
      v10 = v6 & 0xFFFFFFFFFFFFFFFCLL;
      v12 = (__int128 *)(v11 + 16);
      v13 = v9 + 16;
      v14 = v6 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v15 = *v12;
        *(v13 - 1) = *(v12 - 1);
        *v13 = v15;
        v12 += 2;
        v13 += 2;
        v14 -= 4;
      }
      while (v14);
      if (v6 != v10)
      {
LABEL_9:
        v16 = v6 - v10;
        v17 = 8 * v10;
        v18 = &v9[8 * v10];
        v19 = (uint64_t *)(v11 + v17);
        do
        {
          v20 = *v19++;
          *(_QWORD *)v18 = v20;
          v18 += 8;
          --v16;
        }
        while (v16);
      }
    }
    TupleTypeMetadata = swift_getTupleTypeMetadata();
    v7 = TupleTypeMetadata;
  }
  MEMORY[0x24BDAC7A8](TupleTypeMetadata);
  v22 = (char *)&v32 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v23 + 16))(v22, v3, v7);
  if (v6)
  {
    v25 = (uint64_t *)(*(_QWORD *)(v4 + 24) & 0xFFFFFFFFFFFFFFFELL);
    v26 = (int *)(v7 + 32);
    v27 = v6;
    do
    {
      if (v6 == 1)
        v28 = 0;
      else
        v28 = *v26;
      v30 = *v25++;
      v29 = v30;
      v31 = *a2++;
      result = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)(v29 - 8) + 32))(v31, &v22[v28]);
      v26 += 4;
      --v27;
    }
    while (v27);
  }
  return result;
}

uint64_t BuilderTuple.elements.setter(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t TupleTypeMetadata;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  __int128 *v15;
  _OWORD *v16;
  unint64_t v17;
  __int128 v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;

  v4 = a1;
  v5 = *(_QWORD *)(a2 + 16);
  v6 = v5;
  if (v5 == 1)
  {
    TupleTypeMetadata = *(_QWORD *)(*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFELL);
    v8 = *(_QWORD *)(TupleTypeMetadata - 8);
    MEMORY[0x24BDAC7A8](a1);
    v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
LABEL_12:
    v25 = (uint64_t *)(*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFELL);
    v26 = 32;
    do
    {
      if (v5 == 1)
        v27 = 0;
      else
        v27 = *(_DWORD *)(TupleTypeMetadata + v26);
      v29 = *v25++;
      v28 = v29;
      v30 = *v4++;
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v28 - 8) + 32))(&v10[v27], v30);
      v26 += 16;
      --v6;
    }
    while (v6);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v8 + 40))(v2, v10, TupleTypeMetadata);
  }
  MEMORY[0x24BDAC7A8](a1);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v5)
  {
    v13 = 0;
    v14 = *(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFELL;
    if (v5 < 4)
      goto LABEL_9;
    if ((unint64_t)&v12[-v14] < 0x20)
      goto LABEL_9;
    v13 = v5 & 0xFFFFFFFFFFFFFFFCLL;
    v15 = (__int128 *)(v14 + 16);
    v16 = v12 + 16;
    v17 = v5 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v18 = *v15;
      *(v16 - 1) = *(v15 - 1);
      *v16 = v18;
      v15 += 2;
      v16 += 2;
      v17 -= 4;
    }
    while (v17);
    if (v5 != v13)
    {
LABEL_9:
      v19 = v5 - v13;
      v20 = 8 * v13;
      v21 = &v12[8 * v13];
      v22 = (uint64_t *)(v14 + v20);
      do
      {
        v23 = *v22++;
        *(_QWORD *)v21 = v23;
        v21 += 8;
        --v19;
      }
      while (v19);
    }
  }
  TupleTypeMetadata = swift_getTupleTypeMetadata();
  v8 = *(_QWORD *)(TupleTypeMetadata - 8);
  MEMORY[0x24BDAC7A8](TupleTypeMetadata);
  v10 = (char *)&v32 - v24;
  if (v5)
    goto LABEL_12;
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v8 + 40))(v2, v10, TupleTypeMetadata);
}

uint64_t (*BuilderTuple.elements.modify())()
{
  return nullsub_1;
}

uint64_t BuilderTuple.init(elements:)@<X0>(uint64_t TupleTypeMetadata@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  __int128 *v12;
  _OWORD *v13;
  unint64_t v14;
  __int128 v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  int *v28;
  unint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;

  v6 = (uint64_t *)TupleTypeMetadata;
  v38 = a4;
  v7 = (uint64_t *)(a3 & 0xFFFFFFFFFFFFFFFELL);
  if (a2 == 1)
  {
    v8 = *v7;
  }
  else
  {
    MEMORY[0x24BDAC7A8](TupleTypeMetadata);
    v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (a2)
    {
      v11 = 0;
      if (a2 < 4)
        goto LABEL_9;
      if ((unint64_t)(v10 - (char *)v7) < 0x20)
        goto LABEL_9;
      v11 = a2 & 0xFFFFFFFFFFFFFFFCLL;
      v12 = (__int128 *)(v7 + 2);
      v13 = v10 + 16;
      v14 = a2 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v15 = *v12;
        *(v13 - 1) = *(v12 - 1);
        *v13 = v15;
        v12 += 2;
        v13 += 2;
        v14 -= 4;
      }
      while (v14);
      if (v11 != a2)
      {
LABEL_9:
        v16 = a2 - v11;
        v17 = v11;
        v18 = &v10[8 * v11];
        v19 = &v7[v17];
        do
        {
          v20 = *v19++;
          *(_QWORD *)v18 = v20;
          v18 += 8;
          --v16;
        }
        while (v16);
      }
    }
    TupleTypeMetadata = swift_getTupleTypeMetadata();
    v8 = TupleTypeMetadata;
  }
  v21 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](TupleTypeMetadata);
  v23 = (char *)&v35 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = type metadata accessor for BuilderTuple(0, a2, a3, v24);
  v37 = &v35;
  v25 = *(_QWORD *)(v36 - 8);
  MEMORY[0x24BDAC7A8](v36);
  v27 = (char *)&v35 - v26;
  if (a2)
  {
    v28 = (int *)(v8 + 32);
    v29 = a2;
    do
    {
      if (a2 == 1)
        v30 = 0;
      else
        v30 = *v28;
      v32 = *v7++;
      v31 = v32;
      v33 = *v6++;
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v31 - 8) + 32))(&v23[v30], v33);
      v28 += 4;
      --v29;
    }
    while (v29);
  }
  (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v27, v23, v8);
  (*(void (**)(uint64_t, char *, uint64_t))(v25 + 32))(v38, v27, v36);
  return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v23, v8);
}

uint64_t type metadata accessor for BuilderTuple(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2141D8E88(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for BuilderTuple);
}

void BuilderTuple<each A>.body.getter()
{
  sub_214425628();
  __break(1u);
}

uint64_t static BuilderTuple<each A>._layoutChartContent(_:_:)(uint64_t TupleTypeMetadata, __int128 *a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v6;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  __int128 *v12;
  _OWORD *v13;
  unint64_t v14;
  __int128 v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(void);
  uint64_t result;
  uint64_t v27;
  uint64_t *v28;
  _DWORD *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  int v35;
  char *v36;
  void (*v37)(char *, char *, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  __int128 v48;
  char *v49;
  uint64_t *v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;

  v6 = a3;
  v8 = (_QWORD *)(a4 & 0xFFFFFFFFFFFFFFFELL);
  if (a3 != 1)
  {
    MEMORY[0x24BDAC7A8](TupleTypeMetadata);
    v10 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (v6)
    {
      v11 = 0;
      if (v6 < 4)
        goto LABEL_8;
      if ((unint64_t)(v10 - (char *)v8) < 0x20)
        goto LABEL_8;
      v11 = v6 & 0xFFFFFFFFFFFFFFFCLL;
      v12 = (__int128 *)(v8 + 2);
      v13 = v10 + 16;
      v14 = v6 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v15 = *v12;
        *(v13 - 1) = *(v12 - 1);
        *v13 = v15;
        v12 += 2;
        v13 += 2;
        v14 -= 4;
      }
      while (v14);
      if (v11 != v6)
      {
LABEL_8:
        v16 = v6 - v11;
        v17 = v11;
        v18 = &v10[8 * v11];
        v19 = &v8[v17];
        do
        {
          v20 = *v19++;
          *(_QWORD *)v18 = v20;
          v18 += 8;
          --v16;
        }
        while (v16);
      }
    }
    TupleTypeMetadata = swift_getTupleTypeMetadata();
  }
  MEMORY[0x24BDAC7A8](TupleTypeMetadata);
  v22 = (char *)&v44 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = *a2;
  v55 = 0;
  v44 = v24;
  v45 = v23;
  v25 = *(void (**)(void))(v24 + 16);
  v49 = v22;
  v25();
  if (!v6)
    return (*(uint64_t (**)(char *, uint64_t))(v44 + 8))(v49, v45);
  v47 = v48;
  result = swift_beginAccess();
  v27 = 0;
  v28 = (uint64_t *)(a5 & 0xFFFFFFFFFFFFFFFELL);
  v29 = (_DWORD *)(v45 + 32);
  v30 = v6;
  v46 = v6;
  while (1)
  {
    v50 = &v44;
    v51 = v8;
    v31 = *v8;
    v53 = *v28;
    MEMORY[0x24BDAC7A8](result);
    v34 = (char *)&v44 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
    v35 = v6 == 1 ? 0 : *v29;
    v36 = &v49[v35];
    v37 = *(void (**)(char *, char *, uint64_t))(v32 + 16);
    v52 = v32;
    v37(v34, v36, v31);
    v38 = *(_QWORD *)(v47 + 16);
    v39 = *(_QWORD *)(v38 + 16);
    v40 = *(_QWORD *)(v39 + 32);
    swift_retain();
    swift_retain();
    v41 = sub_21421F450(v27, v40);
    v42 = *(_QWORD *)(v39 + 32);
    *(_QWORD *)(v39 + 32) = v41;
    v43 = *(_QWORD *)(v38 + 24);
    *(_QWORD *)(v38 + 24) = v41;
    v54 = v48;
    (*(void (**)(char *, __int128 *, uint64_t))(v53 + 32))(v34, &v54, v31);
    *(_QWORD *)(v38 + 24) = v43;
    *(_QWORD *)(v39 + 32) = v42;
    swift_release();
    swift_release();
    result = (*(uint64_t (**)(char *, uint64_t))(v52 + 8))(v34, v31);
    v27 = v55 + 1;
    if (__OFADD__(v55, 1))
      break;
    ++v55;
    v29 += 4;
    ++v28;
    v8 = v51 + 1;
    --v30;
    v6 = v46;
    if (!v30)
      return (*(uint64_t (**)(char *, uint64_t))(v44 + 8))(v49, v45);
  }
  __break(1u);
  return result;
}

uint64_t static BuilderTuple<each A>._renderChartContent(_:_:)@<X0>(uint64_t TupleTypeMetadata@<X0>, unsigned __int8 *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  unint64_t v7;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  __int128 *v14;
  _OWORD *v15;
  unint64_t v16;
  __int128 v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t result;
  uint64_t v27;
  uint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  int *v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  unint64_t v59;
  int v60;
  uint64_t v61;
  char *v62;
  uint64_t *v63;
  unint64_t v64;
  _DWORD *v65;
  _QWORD *v66;
  uint64_t v67;
  char *v68;
  char v69[8];
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;

  v7 = a3;
  v58 = a6;
  v9 = (_QWORD *)(a4 & 0xFFFFFFFFFFFFFFFELL);
  if (a3 == 1)
  {
    v10 = *v9;
  }
  else
  {
    MEMORY[0x24BDAC7A8](TupleTypeMetadata);
    v12 = (char *)&v55 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (v7)
    {
      v13 = 0;
      if (v7 < 4)
        goto LABEL_9;
      if ((unint64_t)(v12 - (char *)v9) < 0x20)
        goto LABEL_9;
      v13 = v7 & 0xFFFFFFFFFFFFFFFCLL;
      v14 = (__int128 *)(v9 + 2);
      v15 = v12 + 16;
      v16 = v7 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v17 = *v14;
        *(v15 - 1) = *(v14 - 1);
        *v15 = v17;
        v14 += 2;
        v15 += 2;
        v16 -= 4;
      }
      while (v16);
      if (v13 != v7)
      {
LABEL_9:
        v18 = v7 - v13;
        v19 = v13;
        v20 = &v12[8 * v13];
        v21 = &v9[v19];
        do
        {
          v22 = *v21++;
          *(_QWORD *)v20 = v22;
          v20 += 8;
          --v18;
        }
        while (v18);
      }
    }
    TupleTypeMetadata = swift_getTupleTypeMetadata();
    v10 = TupleTypeMetadata;
  }
  MEMORY[0x24BDAC7A8](TupleTypeMetadata);
  v60 = *a2;
  v61 = *((_QWORD *)a2 + 1);
  v62 = (char *)&v55 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = 0;
  v56 = v24;
  (*(void (**)(void))(v24 + 16))();
  v25 = (char *)MEMORY[0x24BEE4AF8];
  v57 = v10;
  if (v7)
  {
    result = swift_beginAccess();
    v27 = 0;
    v28 = (uint64_t *)(a5 & 0xFFFFFFFFFFFFFFFELL);
    v29 = v7;
    v59 = v7;
    v30 = v61;
    while (1)
    {
      v64 = v29;
      v63 = &v55;
      v66 = v9;
      v31 = *v9;
      v32 = *v28;
      MEMORY[0x24BDAC7A8](result);
      v36 = (char *)&v55 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
      v68 = v25;
      v65 = v33;
      if (v7 == 1)
        v37 = 0;
      else
        v37 = *v33;
      v67 = v34;
      (*(void (**)(char *, char *, uint64_t))(v34 + 16))(v36, &v62[v37], v31);
      v38 = *(_QWORD *)(v30 + 16);
      v39 = *(_QWORD *)(v38 + 16);
      v40 = *(_QWORD *)(v39 + 32);
      swift_retain();
      v41 = sub_21421F450(v27, v40);
      v42 = *(_QWORD *)(v39 + 32);
      *(_QWORD *)(v39 + 32) = v41;
      v43 = *(_QWORD *)(v38 + 24);
      *(_QWORD *)(v38 + 24) = v41;
      v69[0] = v60;
      v70 = v30;
      (*(void (**)(uint64_t *__return_ptr, char *, char *, uint64_t, uint64_t))(v32 + 40))(&v71, v36, v69, v31, v32);
      *(_QWORD *)(v38 + 24) = v43;
      *(_QWORD *)(v39 + 32) = v42;
      swift_release();
      v44 = v71;
      v25 = v68;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v25 = sub_214222074(0, *((_QWORD *)v25 + 2) + 1, 1, v25);
      v46 = *((_QWORD *)v25 + 2);
      v45 = *((_QWORD *)v25 + 3);
      v7 = v59;
      if (v46 >= v45 >> 1)
        v25 = sub_214222074((char *)(v45 > 1), v46 + 1, 1, v25);
      *((_QWORD *)v25 + 2) = v46 + 1;
      *(_QWORD *)&v25[8 * v46 + 32] = v44;
      result = (*(uint64_t (**)(char *, uint64_t))(v67 + 8))(v36, v31);
      v27 = v72 + 1;
      if (__OFADD__(v72, 1))
        break;
      ++v72;
      ++v28;
      v9 = v66 + 1;
      v29 = v64 - 1;
      if (v64 == 1)
        goto LABEL_23;
    }
    __break(1u);
  }
  else
  {
LABEL_23:
    v47 = (int *)type metadata accessor for SgGroup(0);
    v48 = swift_allocBox();
    v50 = v49;
    v51 = *(_QWORD *)(*(_QWORD *)(v61 + 16) + 24);
    v52 = (char *)v49 + v47[6];
    v53 = type metadata accessor for SgClipRect(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 56))(v52, 1, 1, v53);
    *v50 = v51;
    v50[1] = v25;
    *(_QWORD *)((char *)v50 + v47[7]) = 0x3FF0000000000000;
    *(_QWORD *)((char *)v50 + v47[8]) = 0;
    *(_QWORD *)((char *)v50 + v47[9]) = MEMORY[0x24BEE4AF8];
    *((_BYTE *)v50 + v47[10]) = 0;
    v54 = v57;
    *v58 = v48;
    return (*(uint64_t (**)(char *, uint64_t))(v56 + 8))(v62, v54);
  }
  return result;
}

uint64_t static BuilderTuple<each A>._makeChartContent(content:inputs:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  unint64_t v28;
  __int128 *v29;
  _OWORD *v30;
  unint64_t v31;
  __int128 v32;
  unint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t result;
  uint64_t v48;
  int64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  _QWORD *v60;
  char *v61;
  char *v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t ListVMa;
  uint64_t v79;
  uint64_t v80;

  v74 = a1;
  v75 = a2;
  v72 = a6;
  v9 = a4 & 0xFFFFFFFFFFFFFFFELL;
  v10 = type metadata accessor for _ChartContentOutputs(0);
  v65 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v63 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = sub_214424500();
  v13 = *(_QWORD *)(v77 - 8);
  v14 = MEMORY[0x24BDAC7A8](v77);
  v76 = (char *)&v63 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v71 = (char *)&v63 - v16;
  v69 = type metadata accessor for MultiPreferenceCombinerVisitor();
  MEMORY[0x24BDAC7A8](v69);
  v70 = (char *)&v63 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = type metadata accessor for _ChartContentInputs(0);
  MEMORY[0x24BDAC7A8](v68);
  v19 = (char *)&v63 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for BuilderTuple(255, a3, a4, v20);
  v73 = sub_214423DA4();
  v21 = *(_QWORD *)(v73 - 8);
  MEMORY[0x24BDAC7A8](v73);
  v23 = (char *)&v63 - v22;
  ListVMa = _s8MakeListVMa(0, a3, a4, a5);
  v67 = *(_QWORD *)(ListVMa - 8);
  v24 = MEMORY[0x24BDAC7A8](ListVMa);
  v79 = (uint64_t)&v63 - v25;
  v64 = v12;
  v66 = v13;
  if (a3 != 1)
  {
    v63 = (uint64_t)&v63;
    MEMORY[0x24BDAC7A8](v24);
    v27 = (char *)&v63 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (a3)
    {
      v28 = 0;
      if (a3 < 4)
        goto LABEL_8;
      if ((unint64_t)&v27[-v9] < 0x20)
        goto LABEL_8;
      v28 = a3 & 0xFFFFFFFFFFFFFFFCLL;
      v29 = (__int128 *)(v9 + 16);
      v30 = v27 + 16;
      v31 = a3 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v32 = *v29;
        *(v30 - 1) = *(v29 - 1);
        *v30 = v32;
        v29 += 2;
        v30 += 2;
        v31 -= 4;
      }
      while (v31);
      if (v28 != a3)
      {
LABEL_8:
        v33 = a3 - v28;
        v34 = 8 * v28;
        v35 = &v27[8 * v28];
        v36 = (uint64_t *)(v9 + v34);
        do
        {
          v37 = *v36++;
          *(_QWORD *)v35 = v37;
          v35 += 8;
          --v33;
        }
        while (v33);
      }
    }
    swift_getTupleTypeMetadata();
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v23, v74, v73);
  sub_2141FDEA0(v75, (uint64_t)v19, type metadata accessor for _ChartContentInputs);
  sub_21422100C((uint64_t)v23, (uint64_t)v19, 0, MEMORY[0x24BEE4AF8], a3, a4, a5, v79);
  if (a3)
  {
    v38 = a5;
    v39 = a3;
    v40 = 0;
    v41 = v79;
    v42 = *(int *)(ListVMa + 48);
    v43 = v38 & 0xFFFFFFFFFFFFFFFELL;
    while (1)
    {
      v44 = v9;
      v45 = *(_QWORD *)(v9 + 8 * v40);
      v46 = *(_QWORD *)(v43 + 8 * v40);
      *(_QWORD *)(v41 + v42) = AGTupleElementOffset();
      result = sub_2142210D0(v45, ListVMa, v45, v46);
      if (v40 == 0x7FFFFFFFFFFFFFFFLL)
        break;
      ++v40;
      v9 = v44;
      if (v39 == v40)
        goto LABEL_15;
    }
    __break(1u);
  }
  else
  {
LABEL_15:
    v48 = *(_QWORD *)(v79 + *(int *)(ListVMa + 52));
    v49 = *(_QWORD *)(v48 + 16);
    v50 = MEMORY[0x24BEE4AF8];
    if (v49)
    {
      v80 = MEMORY[0x24BEE4AF8];
      swift_bridgeObjectRetain();
      sub_2141D3944(0, v49, 0);
      v51 = (uint64_t)v64;
      v52 = v48 + ((*(unsigned __int8 *)(v65 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v65 + 80));
      v53 = *(_QWORD *)(v65 + 72);
      v54 = v76;
      v55 = v77;
      v56 = v66;
      do
      {
        sub_2141FDEA0(v52, v51, type metadata accessor for _ChartContentOutputs);
        (*(void (**)(char *, uint64_t, uint64_t))(v56 + 16))(v54, v51, v55);
        sub_2141DD370(v51, type metadata accessor for _ChartContentOutputs);
        v50 = v80;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_2141D3944(0, *(_QWORD *)(v50 + 16) + 1, 1);
          v50 = v80;
        }
        v58 = *(_QWORD *)(v50 + 16);
        v57 = *(_QWORD *)(v50 + 24);
        if (v58 >= v57 >> 1)
        {
          sub_2141D3944(v57 > 1, v58 + 1, 1);
          v50 = v80;
        }
        *(_QWORD *)(v50 + 16) = v58 + 1;
        v59 = v50
            + ((*(unsigned __int8 *)(v56 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v56 + 80))
            + *(_QWORD *)(v56 + 72) * v58;
        v54 = v76;
        v55 = v77;
        (*(void (**)(unint64_t, char *, uint64_t))(v56 + 32))(v59, v76, v77);
        v80 = v50;
        v52 += v53;
        --v49;
      }
      while (v49);
      swift_bridgeObjectRelease();
    }
    else
    {
      v55 = v77;
      v56 = v66;
    }
    v60 = v70;
    v61 = &v70[*(int *)(v69 + 20)];
    _s6Charts11BuilderPairVA2A12ChartContentRzAaDR_rlE05_makedE07content6inputsAA01_dE7OutputsV7SwiftUI11_GraphValueVyACyxq_GG_AA01_dE6InputsVtFZ_0();
    *v60 = v50;
    sub_214222180();
    sub_2144244C4();
    (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v79, ListVMa);
    v62 = v71;
    (*(void (**)(char *, char *, uint64_t))(v56 + 16))(v71, v61, v55);
    sub_2141DD370((uint64_t)v60, (uint64_t (*)(_QWORD))type metadata accessor for MultiPreferenceCombinerVisitor);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v56 + 32))(v72, v62, v55);
  }
  return result;
}

uint64_t sub_21422100C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v16;
  int *ListVMa;
  uint64_t result;

  type metadata accessor for BuilderTuple(255, a5, a6, a4);
  v16 = sub_214423DA4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(a8, a1, v16);
  ListVMa = (int *)_s8MakeListVMa(0, a5, a6, a7);
  result = sub_2141FE1E0(a2, a8 + ListVMa[11], type metadata accessor for _ChartContentInputs);
  *(_QWORD *)(a8 + ListVMa[12]) = a3;
  *(_QWORD *)(a8 + ListVMa[13]) = a4;
  return result;
}

uint64_t sub_2142210D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t (*v17)(_QWORD);
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int OffsetAttribute2;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  _BYTE v53[16];
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v46 = a4;
  v41 = a3;
  v56 = *MEMORY[0x24BDAC8D0];
  v6 = sub_214423DA4();
  v44 = *(_QWORD *)(v6 - 8);
  v45 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v43 = (uint64_t)&v40 - v7;
  v8 = type metadata accessor for _ChartContentOutputs(0);
  v48 = *(_QWORD *)(v8 - 8);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v42 = (char *)&v40 - v12;
  v13 = type metadata accessor for _ChartContentInputs(0);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = (uint64_t)v4 + *(int *)(a2 + 44);
  sub_2141FDEA0(v16, (uint64_t)v15, v17);
  v18 = *(_DWORD *)(v16 + *(int *)(v13 + 28));
  v40 = *(int *)(a2 + 48);
  v19 = *(_QWORD *)((char *)v4 + v40);
  v20 = *(_QWORD *)(a2 + 16);
  v21 = *(_QWORD *)(a2 + 24);
  v22 = *(_QWORD *)(a2 + 32);
  sub_2141D8BF8(qword_254D69850);
  v23 = swift_allocObject();
  v47 = &v40;
  *(_OWORD *)(v23 + 16) = xmmword_214426EF0;
  *(_QWORD *)(v23 + 32) = -1;
  *(_BYTE *)(v23 + 72) = 0;
  v50 = v18;
  v24 = v4;
  v51 = v19;
  v52 = v23;
  v25 = (uint64_t)v11;
  v26 = _s20ChildContainerValuesVMa(0, v20, v21, v22);
  v54 = v26;
  v55 = MEMORY[0x2199CD934](&unk_2144286C8, v26);
  v27 = sub_2141D8BF8(&qword_254D69840);
  sub_2141DB52C((uint64_t)&v50, (uint64_t)sub_214226BB4, (uint64_t)v53, v26, MEMORY[0x24BEE4078], v27, MEMORY[0x24BEE40A8], v28);
  swift_bridgeObjectRelease();
  v29 = *(int *)(v13 + 28);
  v30 = (uint64_t)v42;
  *(_DWORD *)&v15[v29] = v49;
  type metadata accessor for BuilderTuple(0, v20, v21, v31);
  sub_2143B36F4(v4);
  v32 = v41;
  OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  v34 = v43;
  sub_2143B369C(OffsetAttribute2, v43);
  (*(void (**)(uint64_t, char *, uint64_t))(v46 + 48))(v34, v15, v32);
  (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v34, v45);
  sub_2141FDEA0(v30, (uint64_t)v11, type metadata accessor for _ChartContentOutputs);
  v35 = *(int *)(a2 + 52);
  v36 = *(_QWORD **)((char *)v4 + v35);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v36 = (_QWORD *)sub_2142266E4(0, v36[2] + 1, 1, v36, &qword_254D69848, type metadata accessor for _ChartContentOutputs);
  v38 = v36[2];
  v37 = v36[3];
  if (v38 >= v37 >> 1)
    v36 = (_QWORD *)sub_2142266E4(v37 > 1, v38 + 1, 1, v36, &qword_254D69848, type metadata accessor for _ChartContentOutputs);
  v36[2] = v38 + 1;
  sub_2141FE1E0(v25, (uint64_t)v36+ ((*(unsigned __int8 *)(v48 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v48 + 80))+ *(_QWORD *)(v48 + 72) * v38, type metadata accessor for _ChartContentOutputs);
  *(_QWORD *)((char *)v24 + v35) = v36;
  sub_2141DD370(v30, type metadata accessor for _ChartContentOutputs);
  return sub_2141DD370((uint64_t)v15, type metadata accessor for _ChartContentInputs);
}

uint64_t static BuilderTuple<each A>._chartContentCount(inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;

  v8 = type metadata accessor for _ChartContentInputs(0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = _s13CountContentsVMa(0, a2, a3, a4);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v23 - v13;
  sub_2141FDEA0(a1, (uint64_t)v10, type metadata accessor for _ChartContentInputs);
  sub_2141FE1E0((uint64_t)v10, (uint64_t)v14, type metadata accessor for _ChartContentInputs);
  v15 = &v14[*(int *)(v11 + 44)];
  *(_QWORD *)v15 = 0;
  v15[8] = 0;
  if (a2)
  {
    v16 = (uint64_t *)(a3 & 0xFFFFFFFFFFFFFFFELL);
    v17 = (uint64_t *)(a4 & 0xFFFFFFFFFFFFFFFELL);
    do
    {
      v19 = *v16++;
      v18 = v19;
      v20 = *v17++;
      sub_2142215D0(v18, v11, v18, v20);
      --a2;
    }
    while (a2);
  }
  v21 = *(_QWORD *)&v14[*(int *)(v11 + 44)];
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  return v21;
}

uint64_t sub_2142215D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;

  result = MEMORY[0x24BDAC7A8](a1);
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (uint64_t *)(v4 + *(int *)(v11 + 44));
  if ((v12[1] & 1) != 0
    || (v13 = *v12,
        (*(void (**)(char *, uint64_t))(v8 + 16))(v10, v4),
        v14 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(a4 + 56))(v10, a3, a4),
        v16 = v15,
        result = sub_2141DD370((uint64_t)v10, type metadata accessor for _ChartContentInputs),
        (v16 & 1) != 0))
  {
    v17 = 0;
    v18 = 1;
    goto LABEL_6;
  }
  v17 = v13 + v14;
  if (!__OFADD__(v13, v14))
  {
    v18 = 0;
LABEL_6:
    *v12 = v17;
    *((_BYTE *)v12 + 8) = v18;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t sub_2142216B0@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t Value;

  v4 = *MEMORY[0x24BE096C0];
  v5 = sub_214424530();
  v6 = v5;
  if (v4 == a1)
  {
    v7 = *(_QWORD *)(v5 - 8);
    v8 = 1;
  }
  else
  {
    Value = AGGraphGetValue();
    v7 = *(_QWORD *)(v6 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(a2, Value, v6);
    v8 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a2, v8, 1, v6);
}

uint64_t sub_214221740@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[2];
  _QWORD v17[5];
  char v18;

  v6 = sub_2141D8BF8(&qword_254D698D8);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)v16 - v10;
  sub_2142216B0(a1, (uint64_t)v16 - v10);
  v12 = sub_214424530();
  v13 = *(_QWORD *)(v12 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
    sub_214424524();
    sub_214226CE8((uint64_t)v11);
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(a3, v11, v12);
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v9, a3, v12);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v9, 0, 1, v12);
  v17[0] = a2;
  v18 = 0;
  v14 = sub_2143982E8((uint64_t)v9, (uint64_t)v17);
  sub_214219E50((uint64_t)v17);
  sub_214226CE8((uint64_t)v9);
  v16[1] = v14;
  sub_214226D28();
  return sub_214424548();
}

uint64_t sub_2142218D8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  v2 = sub_214424530();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, 1, 1, v2);
}

uint64_t sub_214221914@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_214221740(*(_DWORD *)v1, *(_QWORD *)(v1 + 8), a1);
}

void sub_21422192C()
{
  sub_214425628();
  __break(1u);
}

uint64_t sub_214221974(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  return static BuilderTuple<each A>._layoutChartContent(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), *(_QWORD *)(a4 - 8));
}

uint64_t sub_214221984@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  return static BuilderTuple<each A>._renderChartContent(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), *(_QWORD *)(a4 - 8), a5);
}

uint64_t sub_214221994@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return static BuilderTuple<each A>._makeChartContent(content:inputs:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), *(_QWORD *)(a4 - 8), a5);
}

uint64_t sub_2142219A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static BuilderTuple<each A>._chartContentCount(inputs:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), *(_QWORD *)(a3 - 8));
}

size_t sub_2142219C8(size_t a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_214225A0C(a1, a2, a3, a4, &qword_253F11998, &qword_253F11908);
}

char *sub_2142219DC(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_2141D8BF8(&qword_254D69800);
    v10 = (char *)swift_allocObject();
    v11 = j__malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 288);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[288 * v8])
      memmove(v12, v13, 288 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_214221AF8(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_2141D8BF8(&qword_253F126B0);
    v10 = (char *)swift_allocObject();
    v11 = j__malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_214221BF8(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_2141D8BF8(&qword_253F126B8);
    v10 = (char *)swift_allocObject();
    v11 = j__malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[24 * v8])
      memmove(v12, v13, 24 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, 24 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_214221D0C(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_2141D8BF8(&qword_254D690E8);
    v10 = (char *)swift_allocObject();
    v11 = j__malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_214221E04(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_2141D8BF8(&qword_254D69820);
    v10 = (char *)swift_allocObject();
    v11 = j__malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 1;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8])
      memmove(v13, v14, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

_QWORD *sub_214221F04(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    sub_2141D8BF8(&qword_253F13328);
    v10 = (_QWORD *)swift_allocObject();
    v11 = j__malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  if ((v5 & 1) != 0)
  {
    if (v10 < a4 || v10 + 4 >= &a4[v8 + 4])
    {
      sub_2141D8BF8(&qword_253F13188);
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v10 != a4)
    {
      sub_2141D8BF8(&qword_253F13188);
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
  }
  else
  {
    sub_2141D8BF8(&qword_253F13188);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

_QWORD *sub_214222060(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_214223BB4(a1, a2, a3, a4, &qword_253F0FE90, &qword_253F0FE70);
}

char *sub_214222074(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_2141D8BF8(&qword_253F15D40);
    v10 = (char *)swift_allocObject();
    v11 = j__malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8])
      memmove(v13, v14, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t _s8MakeListVMa(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2141D8E88(a1, a2, a3, a4, (uint64_t)&_s8MakeListVMn);
}

unint64_t sub_214222180()
{
  unint64_t result;
  uint64_t v1;

  result = qword_254D696B8;
  if (!qword_254D696B8)
  {
    v1 = type metadata accessor for MultiPreferenceCombinerVisitor();
    result = MEMORY[0x2199CD934](&unk_214434550, v1);
    atomic_store(result, (unint64_t *)&qword_254D696B8);
  }
  return result;
}

uint64_t _s13CountContentsVMa(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2141D8E88(a1, a2, a3, a4, (uint64_t)&_s13CountContentsVMn);
}

uint64_t sub_2142221D4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t result;
  uint64_t v5;

  v5 = *a3;
  result = MEMORY[0x2199CD934](&protocol conformance descriptor for <each A> BuilderTuple<Pack{repeat A}>, a2, &v5);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_214222214(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t result;
  uint64_t v5;

  v5 = *a3;
  result = MEMORY[0x2199CD934](&unk_214428540, a2, &v5);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_214222254(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  __int128 *v9;
  _OWORD *v10;
  unint64_t v11;
  __int128 v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD v19[2];

  if (*(_QWORD *)(a1 + 16) == 1)
  {
    result = swift_checkMetadataState();
    if (v3 > 0x3F)
      return result;
LABEL_13:
    v19[1] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata();
    return 0;
  }
  MEMORY[0x24BDAC7A8](a1);
  v6 = (char *)v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v4)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL;
    if (v4 < 4)
      goto LABEL_10;
    if ((unint64_t)&v6[-v8] < 0x20)
      goto LABEL_10;
    v7 = v4 & 0xFFFFFFFFFFFFFFFCLL;
    v9 = (__int128 *)(v8 + 16);
    v10 = v6 + 16;
    v11 = v4 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v12 = *v9;
      *(v10 - 1) = *(v9 - 1);
      *v10 = v12;
      v9 += 2;
      v10 += 2;
      v11 -= 4;
    }
    while (v11);
    if (v4 != v7)
    {
LABEL_10:
      v13 = v4 - v7;
      v14 = 8 * v7;
      v15 = &v6[8 * v7];
      v16 = (uint64_t *)(v8 + v14);
      do
      {
        v17 = *v16++;
        *(_QWORD *)v15 = v17;
        v15 += 8;
        --v13;
      }
      while (v13);
    }
  }
  result = swift_getTupleTypeMetadata();
  if (v18 <= 0x3F)
    goto LABEL_13;
  return result;
}

uint64_t sub_214222390(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t TupleTypeMetadata;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  __int128 *v12;
  _OWORD *v13;
  unint64_t v14;
  __int128 v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v22;

  if (*(_QWORD *)(a3 + 16) == 1)
  {
    TupleTypeMetadata = *(_QWORD *)(*(_QWORD *)(a3 + 24) & 0xFFFFFFFFFFFFFELL);
  }
  else
  {
    MEMORY[0x24BDAC7A8](a1);
    v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (v6)
    {
      v10 = 0;
      v11 = *(_QWORD *)(v7 + 24) & 0xFFFFFFFFFFFFFFFELL;
      if (v6 < 4)
        goto LABEL_9;
      if ((unint64_t)&v9[-v11] < 0x20)
        goto LABEL_9;
      v10 = v6 & 0xFFFFFFFFFFFFFFFCLL;
      v12 = (__int128 *)(v11 + 16);
      v13 = v9 + 16;
      v14 = v6 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v15 = *v12;
        *(v13 - 1) = *(v12 - 1);
        *v13 = v15;
        v12 += 2;
        v13 += 2;
        v14 -= 4;
      }
      while (v14);
      if (v6 != v10)
      {
LABEL_9:
        v16 = v6 - v10;
        v17 = 8 * v10;
        v18 = &v9[8 * v10];
        v19 = (uint64_t *)(v11 + v17);
        do
        {
          v20 = *v19++;
          *(_QWORD *)v18 = v20;
          v18 += 8;
          --v16;
        }
        while (v16);
      }
    }
    TupleTypeMetadata = swift_getTupleTypeMetadata();
  }
  return (**(uint64_t (***)(uint64_t, uint64_t))(TupleTypeMetadata - 8))(a1, a2);
}

uint64_t sub_2142224A8(uint64_t a1, uint64_t a2)
{
  uint64_t TupleTypeMetadata;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  __int128 *v10;
  _OWORD *v11;
  unint64_t v12;
  __int128 v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v20;

  if (*(_QWORD *)(a2 + 16) == 1)
  {
    TupleTypeMetadata = *(_QWORD *)(*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFELL);
  }
  else
  {
    MEMORY[0x24BDAC7A8](a1);
    v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (v4)
    {
      v8 = 0;
      v9 = *(_QWORD *)(v5 + 24) & 0xFFFFFFFFFFFFFFFELL;
      if (v4 < 4)
        goto LABEL_9;
      if ((unint64_t)&v7[-v9] < 0x20)
        goto LABEL_9;
      v8 = v4 & 0xFFFFFFFFFFFFFFFCLL;
      v10 = (__int128 *)(v9 + 16);
      v11 = v7 + 16;
      v12 = v4 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v13 = *v10;
        *(v11 - 1) = *(v10 - 1);
        *v11 = v13;
        v10 += 2;
        v11 += 2;
        v12 -= 4;
      }
      while (v12);
      if (v4 != v8)
      {
LABEL_9:
        v14 = v4 - v8;
        v15 = 8 * v8;
        v16 = &v7[8 * v8];
        v17 = (uint64_t *)(v9 + v15);
        do
        {
          v18 = *v17++;
          *(_QWORD *)v16 = v18;
          v16 += 8;
          --v14;
        }
        while (v14);
      }
    }
    TupleTypeMetadata = swift_getTupleTypeMetadata();
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(TupleTypeMetadata - 8) + 8))(a1);
}

uint64_t sub_2142225B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t TupleTypeMetadata;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  __int128 *v12;
  _OWORD *v13;
  unint64_t v14;
  __int128 v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v22;

  if (*(_QWORD *)(a3 + 16) == 1)
  {
    TupleTypeMetadata = *(_QWORD *)(*(_QWORD *)(a3 + 24) & 0xFFFFFFFFFFFFFELL);
  }
  else
  {
    MEMORY[0x24BDAC7A8](a1);
    v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (v6)
    {
      v10 = 0;
      v11 = *(_QWORD *)(v7 + 24) & 0xFFFFFFFFFFFFFFFELL;
      if (v6 < 4)
        goto LABEL_9;
      if ((unint64_t)&v9[-v11] < 0x20)
        goto LABEL_9;
      v10 = v6 & 0xFFFFFFFFFFFFFFFCLL;
      v12 = (__int128 *)(v11 + 16);
      v13 = v9 + 16;
      v14 = v6 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v15 = *v12;
        *(v13 - 1) = *(v12 - 1);
        *v13 = v15;
        v12 += 2;
        v13 += 2;
        v14 -= 4;
      }
      while (v14);
      if (v6 != v10)
      {
LABEL_9:
        v16 = v6 - v10;
        v17 = 8 * v10;
        v18 = &v9[8 * v10];
        v19 = (uint64_t *)(v11 + v17);
        do
        {
          v20 = *v19++;
          *(_QWORD *)v18 = v20;
          v18 += 8;
          --v16;
        }
        while (v16);
      }
    }
    TupleTypeMetadata = swift_getTupleTypeMetadata();
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata - 8) + 16))(a1, a2);
  return a1;
}

uint64_t sub_2142226CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t TupleTypeMetadata;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  __int128 *v12;
  _OWORD *v13;
  unint64_t v14;
  __int128 v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v22;

  if (*(_QWORD *)(a3 + 16) == 1)
  {
    TupleTypeMetadata = *(_QWORD *)(*(_QWORD *)(a3 + 24) & 0xFFFFFFFFFFFFFELL);
  }
  else
  {
    MEMORY[0x24BDAC7A8](a1);
    v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (v6)
    {
      v10 = 0;
      v11 = *(_QWORD *)(v7 + 24) & 0xFFFFFFFFFFFFFFFELL;
      if (v6 < 4)
        goto LABEL_9;
      if ((unint64_t)&v9[-v11] < 0x20)
        goto LABEL_9;
      v10 = v6 & 0xFFFFFFFFFFFFFFFCLL;
      v12 = (__int128 *)(v11 + 16);
      v13 = v9 + 16;
      v14 = v6 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v15 = *v12;
        *(v13 - 1) = *(v12 - 1);
        *v13 = v15;
        v12 += 2;
        v13 += 2;
        v14 -= 4;
      }
      while (v14);
      if (v6 != v10)
      {
LABEL_9:
        v16 = v6 - v10;
        v17 = 8 * v10;
        v18 = &v9[8 * v10];
        v19 = (uint64_t *)(v11 + v17);
        do
        {
          v20 = *v19++;
          *(_QWORD *)v18 = v20;
          v18 += 8;
          --v16;
        }
        while (v16);
      }
    }
    TupleTypeMetadata = swift_getTupleTypeMetadata();
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata - 8) + 24))(a1, a2);
  return a1;
}

uint64_t sub_2142227E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t TupleTypeMetadata;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  __int128 *v12;
  _OWORD *v13;
  unint64_t v14;
  __int128 v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v22;

  if (*(_QWORD *)(a3 + 16) == 1)
  {
    TupleTypeMetadata = *(_QWORD *)(*(_QWORD *)(a3 + 24) & 0xFFFFFFFFFFFFFELL);
  }
  else
  {
    MEMORY[0x24BDAC7A8](a1);
    v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (v6)
    {
      v10 = 0;
      v11 = *(_QWORD *)(v7 + 24) & 0xFFFFFFFFFFFFFFFELL;
      if (v6 < 4)
        goto LABEL_9;
      if ((unint64_t)&v9[-v11] < 0x20)
        goto LABEL_9;
      v10 = v6 & 0xFFFFFFFFFFFFFFFCLL;
      v12 = (__int128 *)(v11 + 16);
      v13 = v9 + 16;
      v14 = v6 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v15 = *v12;
        *(v13 - 1) = *(v12 - 1);
        *v13 = v15;
        v12 += 2;
        v13 += 2;
        v14 -= 4;
      }
      while (v14);
      if (v6 != v10)
      {
LABEL_9:
        v16 = v6 - v10;
        v17 = 8 * v10;
        v18 = &v9[8 * v10];
        v19 = (uint64_t *)(v11 + v17);
        do
        {
          v20 = *v19++;
          *(_QWORD *)v18 = v20;
          v18 += 8;
          --v16;
        }
        while (v16);
      }
    }
    TupleTypeMetadata = swift_getTupleTypeMetadata();
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata - 8) + 32))(a1, a2);
  return a1;
}

uint64_t sub_214222904(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t TupleTypeMetadata;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  __int128 *v12;
  _OWORD *v13;
  unint64_t v14;
  __int128 v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v22;

  if (*(_QWORD *)(a3 + 16) == 1)
  {
    TupleTypeMetadata = *(_QWORD *)(*(_QWORD *)(a3 + 24) & 0xFFFFFFFFFFFFFELL);
  }
  else
  {
    MEMORY[0x24BDAC7A8](a1);
    v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (v6)
    {
      v10 = 0;
      v11 = *(_QWORD *)(v7 + 24) & 0xFFFFFFFFFFFFFFFELL;
      if (v6 < 4)
        goto LABEL_9;
      if ((unint64_t)&v9[-v11] < 0x20)
        goto LABEL_9;
      v10 = v6 & 0xFFFFFFFFFFFFFFFCLL;
      v12 = (__int128 *)(v11 + 16);
      v13 = v9 + 16;
      v14 = v6 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v15 = *v12;
        *(v13 - 1) = *(v12 - 1);
        *v13 = v15;
        v12 += 2;
        v13 += 2;
        v14 -= 4;
      }
      while (v14);
      if (v6 != v10)
      {
LABEL_9:
        v16 = v6 - v10;
        v17 = 8 * v10;
        v18 = &v9[8 * v10];
        v19 = (uint64_t *)(v11 + v17);
        do
        {
          v20 = *v19++;
          *(_QWORD *)v18 = v20;
          v18 += 8;
          --v16;
        }
        while (v16);
      }
    }
    TupleTypeMetadata = swift_getTupleTypeMetadata();
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata - 8) + 40))(a1, a2);
  return a1;
}

uint64_t sub_214222A20()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_214222A2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t TupleTypeMetadata;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  __int128 *v12;
  _OWORD *v13;
  unint64_t v14;
  __int128 v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v22;

  if (*(_QWORD *)(a3 + 16) == 1)
  {
    TupleTypeMetadata = *(_QWORD *)(*(_QWORD *)(a3 + 24) & 0xFFFFFFFFFFFFFELL);
  }
  else
  {
    MEMORY[0x24BDAC7A8](a1);
    v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (v6)
    {
      v10 = 0;
      v11 = *(_QWORD *)(v7 + 24) & 0xFFFFFFFFFFFFFFFELL;
      if (v6 < 4)
        goto LABEL_9;
      if ((unint64_t)&v9[-v11] < 0x20)
        goto LABEL_9;
      v10 = v6 & 0xFFFFFFFFFFFFFFFCLL;
      v12 = (__int128 *)(v11 + 16);
      v13 = v9 + 16;
      v14 = v6 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v15 = *v12;
        *(v13 - 1) = *(v12 - 1);
        *v13 = v15;
        v12 += 2;
        v13 += 2;
        v14 -= 4;
      }
      while (v14);
      if (v6 != v10)
      {
LABEL_9:
        v16 = v6 - v10;
        v17 = 8 * v10;
        v18 = &v9[8 * v10];
        v19 = (uint64_t *)(v11 + v17);
        do
        {
          v20 = *v19++;
          *(_QWORD *)v18 = v20;
          v18 += 8;
          --v16;
        }
        while (v16);
      }
    }
    TupleTypeMetadata = swift_getTupleTypeMetadata();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata - 8) + 48))(a1, a2);
}

uint64_t sub_214222B44()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_214222B50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t TupleTypeMetadata;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  __int128 *v13;
  _OWORD *v14;
  unint64_t v15;
  __int128 v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v23;

  if (*(_QWORD *)(a4 + 16) == 1)
  {
    TupleTypeMetadata = *(_QWORD *)(*(_QWORD *)(a4 + 24) & 0xFFFFFFFFFFFFFELL);
  }
  else
  {
    MEMORY[0x24BDAC7A8](a1);
    v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (v7)
    {
      v11 = 0;
      v12 = *(_QWORD *)(v8 + 24) & 0xFFFFFFFFFFFFFFFELL;
      if (v7 < 4)
        goto LABEL_9;
      if ((unint64_t)&v10[-v12] < 0x20)
        goto LABEL_9;
      v11 = v7 & 0xFFFFFFFFFFFFFFFCLL;
      v13 = (__int128 *)(v12 + 16);
      v14 = v10 + 16;
      v15 = v7 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v16 = *v13;
        *(v14 - 1) = *(v13 - 1);
        *v14 = v16;
        v13 += 2;
        v14 += 2;
        v15 -= 4;
      }
      while (v15);
      if (v7 != v11)
      {
LABEL_9:
        v17 = v7 - v11;
        v18 = 8 * v11;
        v19 = &v10[8 * v11];
        v20 = (uint64_t *)(v12 + v18);
        do
        {
          v21 = *v20++;
          *(_QWORD *)v19 = v21;
          v19 += 8;
          --v17;
        }
        while (v17);
      }
    }
    TupleTypeMetadata = swift_getTupleTypeMetadata();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata - 8) + 56))(a1, a2, a2);
}

uint64_t sub_214222C68()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for _ChartContentInputs(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_214222CD8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_21442423C();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = (int *)type metadata accessor for _ChartContentInputs(0);
    v9 = v8[5];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = sub_214423DB0();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
    v13 = v8[6];
    v14 = (char *)a1 + v13;
    v15 = (char *)a2 + v13;
    v16 = sub_2144244D0();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v14, v15, v16);
    *(_DWORD *)((char *)a1 + v8[7]) = *(_DWORD *)((char *)a2 + v8[7]);
    v17 = *(int *)(a3 + 44);
    v18 = (char *)a1 + v17;
    v19 = (char *)a2 + v17;
    v18[8] = v19[8];
    *(_QWORD *)v18 = *(_QWORD *)v19;
  }
  return a1;
}

uint64_t sub_214222DE8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = sub_21442423C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  v3 = type metadata accessor for _ChartContentInputs(0);
  v4 = a1 + *(int *)(v3 + 20);
  v5 = sub_214423DB0();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = a1 + *(int *)(v3 + 24);
  v7 = sub_2144244D0();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
}

uint64_t sub_214222E78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = sub_21442423C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = (int *)type metadata accessor for _ChartContentInputs(0);
  v8 = v7[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = sub_214423DB0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  v12 = v7[6];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = sub_2144244D0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
  *(_DWORD *)(a1 + v7[7]) = *(_DWORD *)(a2 + v7[7]);
  v16 = *(int *)(a3 + 44);
  v17 = a1 + v16;
  v18 = a2 + v16;
  *(_BYTE *)(v17 + 8) = *(_BYTE *)(v18 + 8);
  *(_QWORD *)v17 = *(_QWORD *)v18;
  return a1;
}

uint64_t sub_214222F5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;

  v6 = sub_21442423C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = (int *)type metadata accessor for _ChartContentInputs(0);
  v8 = v7[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = sub_214423DB0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(v9, v10, v11);
  v12 = v7[6];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = sub_2144244D0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 24))(v13, v14, v15);
  *(_DWORD *)(a1 + v7[7]) = *(_DWORD *)(a2 + v7[7]);
  v16 = *(int *)(a3 + 44);
  v17 = a1 + v16;
  v18 = a2 + v16;
  v19 = *(_BYTE *)(v18 + 8);
  *(_QWORD *)v17 = *(_QWORD *)v18;
  *(_BYTE *)(v17 + 8) = v19;
  return a1;
}

uint64_t sub_214223040(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = sub_21442423C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = (int *)type metadata accessor for _ChartContentInputs(0);
  v8 = v7[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = sub_214423DB0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
  v12 = v7[6];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = sub_2144244D0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v13, v14, v15);
  *(_DWORD *)(a1 + v7[7]) = *(_DWORD *)(a2 + v7[7]);
  v16 = *(int *)(a3 + 44);
  v17 = a1 + v16;
  v18 = a2 + v16;
  *(_BYTE *)(v17 + 8) = *(_BYTE *)(v18 + 8);
  *(_QWORD *)v17 = *(_QWORD *)v18;
  return a1;
}

uint64_t sub_214223124(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = sub_21442423C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = (int *)type metadata accessor for _ChartContentInputs(0);
  v8 = v7[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = sub_214423DB0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  v12 = v7[6];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = sub_2144244D0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 40))(v13, v14, v15);
  *(_DWORD *)(a1 + v7[7]) = *(_DWORD *)(a2 + v7[7]);
  v16 = *(int *)(a3 + 44);
  v17 = a1 + v16;
  v18 = a2 + v16;
  *(_BYTE *)(v17 + 8) = *(_BYTE *)(v18 + 8);
  *(_QWORD *)v17 = *(_QWORD *)v18;
  return a1;
}

uint64_t sub_214223208()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_214223214(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for _ChartContentInputs(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_214223250()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_21422325C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for _ChartContentInputs(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t sub_21422329C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;

  type metadata accessor for BuilderTuple(255, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  result = sub_214423DA4();
  if (v5 <= 0x3F)
  {
    result = type metadata accessor for _ChartContentInputs(319);
    if (v6 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_21422334C(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  int v6;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v6 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v6 & 0x20000) != 0)
  {
    v23 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v23 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    type metadata accessor for BuilderTuple(255, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
    v8 = sub_214423DA4();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
    v9 = *(int *)(a3 + 44);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = sub_21442423C();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
    v13 = (int *)type metadata accessor for _ChartContentInputs(0);
    v14 = v13[5];
    v15 = &v10[v14];
    v16 = &v11[v14];
    v17 = sub_214423DB0();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v15, v16, v17);
    v18 = v13[6];
    v19 = &v10[v18];
    v20 = &v11[v18];
    v21 = sub_2144244D0();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v19, v20, v21);
    *(_DWORD *)&v10[v13[7]] = *(_DWORD *)&v11[v13[7]];
    v22 = *(int *)(a3 + 52);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 48)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 48));
    *(uint64_t *)((char *)a1 + v22) = *(uint64_t *)((char *)a2 + v22);
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_21422349C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  type metadata accessor for BuilderTuple(255, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a4);
  v6 = sub_214423DA4();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
  v7 = a1 + *(int *)(a2 + 44);
  v8 = sub_21442423C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = type metadata accessor for _ChartContentInputs(0);
  v10 = v7 + *(int *)(v9 + 20);
  v11 = sub_214423DB0();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  v12 = v7 + *(int *)(v9 + 24);
  v13 = sub_2144244D0();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
  return swift_bridgeObjectRelease();
}

uint64_t sub_21422357C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  type metadata accessor for BuilderTuple(255, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
  v7 = sub_214423DA4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
  v8 = *(int *)(a3 + 44);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = sub_21442423C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  v12 = (int *)type metadata accessor for _ChartContentInputs(0);
  v13 = v12[5];
  v14 = v9 + v13;
  v15 = v10 + v13;
  v16 = sub_214423DB0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v14, v15, v16);
  v17 = v12[6];
  v18 = v9 + v17;
  v19 = v10 + v17;
  v20 = sub_2144244D0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v18, v19, v20);
  *(_DWORD *)(v9 + v12[7]) = *(_DWORD *)(v10 + v12[7]);
  v21 = *(int *)(a3 + 52);
  *(_QWORD *)(a1 + *(int *)(a3 + 48)) = *(_QWORD *)(a2 + *(int *)(a3 + 48));
  *(_QWORD *)(a1 + v21) = *(_QWORD *)(a2 + v21);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_2142236A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  type metadata accessor for BuilderTuple(255, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
  v7 = sub_214423DA4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 24))(a1, a2, v7);
  v8 = *(int *)(a3 + 44);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = sub_21442423C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(v9, v10, v11);
  v12 = (int *)type metadata accessor for _ChartContentInputs(0);
  v13 = v12[5];
  v14 = v9 + v13;
  v15 = v10 + v13;
  v16 = sub_214423DB0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 24))(v14, v15, v16);
  v17 = v12[6];
  v18 = v9 + v17;
  v19 = v10 + v17;
  v20 = sub_2144244D0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 24))(v18, v19, v20);
  *(_DWORD *)(v9 + v12[7]) = *(_DWORD *)(v10 + v12[7]);
  *(_QWORD *)(a1 + *(int *)(a3 + 48)) = *(_QWORD *)(a2 + *(int *)(a3 + 48));
  *(_QWORD *)(a1 + *(int *)(a3 + 52)) = *(_QWORD *)(a2 + *(int *)(a3 + 52));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_2142237D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  type metadata accessor for BuilderTuple(255, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
  v7 = sub_214423DA4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
  v8 = *(int *)(a3 + 44);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = sub_21442423C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
  v12 = (int *)type metadata accessor for _ChartContentInputs(0);
  v13 = v12[5];
  v14 = v9 + v13;
  v15 = v10 + v13;
  v16 = sub_214423DB0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v14, v15, v16);
  v17 = v12[6];
  v18 = v9 + v17;
  v19 = v10 + v17;
  v20 = sub_2144244D0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v18, v19, v20);
  *(_DWORD *)(v9 + v12[7]) = *(_DWORD *)(v10 + v12[7]);
  v21 = *(int *)(a3 + 52);
  *(_QWORD *)(a1 + *(int *)(a3 + 48)) = *(_QWORD *)(a2 + *(int *)(a3 + 48));
  *(_QWORD *)(a1 + v21) = *(_QWORD *)(a2 + v21);
  return a1;
}

uint64_t sub_2142238F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  type metadata accessor for BuilderTuple(255, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
  v7 = sub_214423DA4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 40))(a1, a2, v7);
  v8 = *(int *)(a3 + 44);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = sub_21442423C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  v12 = (int *)type metadata accessor for _ChartContentInputs(0);
  v13 = v12[5];
  v14 = v9 + v13;
  v15 = v10 + v13;
  v16 = sub_214423DB0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 40))(v14, v15, v16);
  v17 = v12[6];
  v18 = v9 + v17;
  v19 = v10 + v17;
  v20 = sub_2144244D0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 40))(v18, v19, v20);
  *(_DWORD *)(v9 + v12[7]) = *(_DWORD *)(v10 + v12[7]);
  v21 = *(int *)(a3 + 52);
  *(_QWORD *)(a1 + *(int *)(a3 + 48)) = *(_QWORD *)(a2 + *(int *)(a3 + 48));
  *(_QWORD *)(a1 + v21) = *(_QWORD *)(a2 + v21);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_214223A1C()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_214223A28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v15;

  type metadata accessor for BuilderTuple(255, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
  v7 = sub_214423DA4();
  v8 = *(_QWORD *)(v7 - 8);
  if (*(_DWORD *)(v8 + 84) == (_DWORD)a2)
  {
    v9 = v7;
    v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
    v11 = a1;
    return v10(v11, a2, v9);
  }
  v12 = type metadata accessor for _ChartContentInputs(0);
  v13 = *(_QWORD *)(v12 - 8);
  if (*(_DWORD *)(v13 + 84) == (_DWORD)a2)
  {
    v9 = v12;
    v11 = a1 + *(int *)(a3 + 44);
    v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 48);
    return v10(v11, a2, v9);
  }
  v15 = *(_QWORD *)(a1 + *(int *)(a3 + 52));
  if (v15 >= 0xFFFFFFFF)
    LODWORD(v15) = -1;
  return (v15 + 1);
}

uint64_t sub_214223AE0()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_214223AEC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  type metadata accessor for BuilderTuple(255, *(_QWORD *)(a4 + 16), *(_QWORD *)(a4 + 24), a4);
  v8 = sub_214423DA4();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  result = type metadata accessor for _ChartContentInputs(0);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v12 = a1 + *(int *)(a4 + 44);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  *(_QWORD *)(a1 + *(int *)(a4 + 52)) = (a2 - 1);
  return result;
}

_QWORD *sub_214223BA0(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_214223BB4(a1, a2, a3, a4, &qword_253F10FB8, &qword_253F10FA8);
}

_QWORD *sub_214223BB4(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  char v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int64_t v14;
  uint64_t v15;

  v8 = (char)result;
  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (v12)
  {
    sub_2141D8BF8(a5);
    v13 = (_QWORD *)swift_allocObject();
    v14 = j__malloc_size(v13);
    v15 = v14 - 32;
    if (v14 < 32)
      v15 = v14 - 1;
    v13[2] = v11;
    v13[3] = 2 * (v15 >> 5);
  }
  else
  {
    v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  if ((v8 & 1) != 0)
  {
    if (v13 != a4 || v13 + 4 >= &a4[4 * v11 + 4])
      memmove(v13 + 4, a4 + 4, 32 * v11);
    a4[2] = 0;
  }
  else
  {
    sub_2141D8BF8(a6);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v13;
}

char *sub_214223CD8(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_2141D8BF8(&qword_254D69280);
    v10 = (char *)swift_allocObject();
    v11 = j__malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 88);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[88 * v8])
      memmove(v12, v13, 88 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

size_t sub_214223DF0(size_t a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_2142266E4(a1, a2, a3, a4, &qword_253F122A8, (uint64_t (*)(_QWORD))type metadata accessor for AxisMarksConfiguration);
}

char *sub_214223E04(char *a1, int64_t a2, char a3, char *a4)
{
  return sub_21422699C(a1, a2, a3, a4, &qword_253F10640);
}

char *sub_214223E10(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_2141D8BF8(&qword_253F13D68);
    v10 = (char *)swift_allocObject();
    v11 = j__malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8])
      memmove(v13, v14, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 8 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

_QWORD *sub_214223F08(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    sub_2141D8BF8(&qword_253F12010);
    v10 = (_QWORD *)swift_allocObject();
    v11 = j__malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 1;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 5);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v10 + 4 >= &a4[4 * v8 + 4])
      memmove(v10 + 4, a4 + 4, 32 * v8);
    a4[2] = 0;
  }
  else
  {
    sub_2141D8BF8(&qword_253F11F58);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_214224028(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_2141D8BF8(&qword_253F13580);
    v10 = (char *)swift_allocObject();
    v11 = j__malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 152);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[152 * v8])
      memmove(v12, v13, 152 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_214224144(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_2141D8BF8(&qword_253F103C8);
    v10 = (char *)swift_allocObject();
    v11 = j__malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

_QWORD *sub_21422423C(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_214224BEC(a1, a2, a3, a4, &qword_254D690F0, &qword_254D690F8);
}

char *sub_214224250(char *a1, int64_t a2, char a3, char *a4)
{
  return sub_214226AA4(a1, a2, a3, a4, &qword_253F126A0);
}

char *sub_214224264(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_2141D8BF8(&qword_254D69100);
    v10 = (char *)swift_allocObject();
    v11 = j__malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 1;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8])
      memmove(v13, v14, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 32 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

_QWORD *sub_21422435C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    sub_2141D8BF8(&qword_254D69828);
    v10 = (_QWORD *)swift_allocObject();
    v11 = j__malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v10 + 4 >= &a4[5 * v8 + 4])
      memmove(v10 + 4, a4 + 4, 40 * v8);
    a4[2] = 0;
  }
  else
  {
    sub_2141D8BF8(&qword_254D69830);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_214224490(char *a1, int64_t a2, char a3, char *a4)
{
  return sub_214225560(a1, a2, a3, a4, &qword_253F10820);
}

char *sub_21422449C(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_2141D8BF8(&qword_253F12000);
    v10 = (char *)swift_allocObject();
    v11 = j__malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 96);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[96 * v8])
      memmove(v12, v13, 96 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_2142245B0(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_2141D8BF8(&qword_253F12018);
    v10 = (char *)swift_allocObject();
    v11 = j__malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 1;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8])
      memmove(v13, v14, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 32 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_2142246A8(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_2141D8BF8(&qword_253F103C0);
    v10 = (char *)swift_allocObject();
    v11 = j__malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 1;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8])
      memmove(v13, v14, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 32 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_2142247A0(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  size_t v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_2141D8BF8(&qword_253F103D0);
    v10 = (char *)swift_allocObject();
    v11 = j__malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 1;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  v15 = 32 * v8;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[v15])
      memmove(v13, v14, v15);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, v15);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_214224894(char *a1, int64_t a2, char a3, char *a4)
{
  return sub_21422515C(a1, a2, a3, a4, &qword_253F15D50);
}

char *sub_2142248A0(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  size_t v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_2141D8BF8(&qword_253F10610);
    v10 = (char *)swift_allocObject();
    v11 = j__malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  v14 = 40 * v8;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v14])
      memmove(v12, v13, v14);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, v14);
  }
  swift_bridgeObjectRelease();
  return v10;
}

_QWORD *sub_2142249A4(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_214224BEC(a1, a2, a3, a4, qword_253F10280, &qword_253F105B0);
}

char *sub_2142249B8(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_2141D8BF8((uint64_t *)&unk_253F10630);
    v10 = (char *)swift_allocObject();
    v11 = j__malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[24 * v8])
      memmove(v12, v13, 24 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, 24 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

_QWORD *sub_214224ACC(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_214224BEC(a1, a2, a3, a4, &qword_253F122E0, &qword_253F12260);
}

char *sub_214224AE0(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_2141D8BF8(&qword_253F15D48);
    v10 = (char *)swift_allocObject();
    v11 = j__malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8])
      memmove(v13, v14, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 8 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

_QWORD *sub_214224BD8(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_214224BEC(a1, a2, a3, a4, &qword_253F10FC0, &qword_253F12170);
}

_QWORD *sub_214224BEC(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  char v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int64_t v14;
  uint64_t v15;

  v8 = (char)result;
  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (v12)
  {
    sub_2141D8BF8(a5);
    v13 = (_QWORD *)swift_allocObject();
    v14 = j__malloc_size(v13);
    v15 = v14 - 32;
    if (v14 < 32)
      v15 = v14 - 25;
    v13[2] = v11;
    v13[3] = 2 * (v15 >> 3);
  }
  else
  {
    v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  if ((v8 & 1) != 0)
  {
    if (v13 != a4 || v13 + 4 >= &a4[v11 + 4])
      memmove(v13 + 4, a4 + 4, 8 * v11);
    a4[2] = 0;
  }
  else
  {
    sub_2141D8BF8(a6);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v13;
}

char *sub_214224D10(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_2141D8BF8(&qword_253F10608);
    v10 = (char *)swift_allocObject();
    v11 = j__malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 48);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[48 * v8])
      memmove(v12, v13, 48 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, 48 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_214224E24(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_2141D8BF8(&qword_253F10C70);
    v10 = (char *)swift_allocObject();
    v11 = j__malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_214224F1C(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_2141D8BF8(&qword_253F10648);
    v10 = (char *)swift_allocObject();
    v11 = j__malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[24 * v8])
      memmove(v12, v13, 24 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, 24 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

_QWORD *sub_214225030(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    sub_2141D8BF8(&qword_253F10BD0);
    v10 = (_QWORD *)swift_allocObject();
    v11 = j__malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v10 + 4 >= &a4[2 * v8 + 4])
      memmove(v10 + 4, a4 + 4, 16 * v8);
    a4[2] = 0;
  }
  else
  {
    sub_2141D8BF8(&qword_253F10B80);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_214225150(char *a1, int64_t a2, char a3, char *a4)
{
  return sub_21422515C(a1, a2, a3, a4, &qword_253F10BE0);
}

char *sub_21422515C(char *result, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  char v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v6 = (char)result;
  if ((a3 & 1) != 0)
  {
    v7 = *((_QWORD *)a4 + 3);
    v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v8 = a2;
    }
  }
  else
  {
    v8 = a2;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (v8 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = v8;
  if (v10)
  {
    sub_2141D8BF8(a5);
    v11 = (char *)swift_allocObject();
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 3);
  }
  else
  {
    v11 = (char *)MEMORY[0x24BEE4AF8];
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v6 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[8 * v9])
      memmove(v14, v15, 8 * v9);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v14, v15, 8 * v9);
  }
  swift_bridgeObjectRelease();
  return v11;
}

char *sub_214225250(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_2141D8BF8(&qword_253F10BB0);
    v10 = (char *)swift_allocObject();
    v11 = j__malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_214225348(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_2141D8BF8(&qword_254D69810);
    v10 = (char *)swift_allocObject();
    v11 = j__malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 1;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8])
      memmove(v13, v14, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 32 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_214225440(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_2141D8BF8(&qword_253F101C8);
    v10 = (char *)swift_allocObject();
    v11 = j__malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[24 * v8])
      memmove(v12, v13, 24 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, 24 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_214225554(char *a1, int64_t a2, char a3, char *a4)
{
  return sub_214225560(a1, a2, a3, a4, &qword_253F10420);
}

char *sub_214225560(char *result, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  char v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;

  v6 = (char)result;
  if ((a3 & 1) != 0)
  {
    v7 = *((_QWORD *)a4 + 3);
    v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v8 = a2;
    }
  }
  else
  {
    v8 = a2;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (v8 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = v8;
  if (v10)
  {
    sub_2141D8BF8(a5);
    v11 = (char *)swift_allocObject();
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 40);
  }
  else
  {
    v11 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((v6 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[40 * v9])
      memmove(v13, v14, 40 * v9);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 40 * v9);
  }
  swift_bridgeObjectRelease();
  return v11;
}

size_t sub_21422566C(size_t a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_2142266E4(a1, a2, a3, a4, &qword_253F0FE88, type metadata accessor for SgClipRect);
}

size_t sub_214225680(size_t a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_2142266E4(a1, a2, a3, a4, &qword_254D690C0, type metadata accessor for AnyVectorizedRenderer);
}

size_t sub_214225694(size_t a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_214225A0C(a1, a2, a3, a4, &qword_253F11990, &qword_253F11900);
}

char *sub_2142256A8(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_2141D8BF8(qword_254D69850);
    v10 = (char *)swift_allocObject();
    v11 = j__malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 48);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[48 * v8])
      memmove(v12, v13, 48 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_2142257BC(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_2141D8BF8(&qword_253F126A8);
    v10 = (char *)swift_allocObject();
    v11 = j__malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 1;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8])
      memmove(v13, v14, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

_QWORD *sub_2142258BC(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    sub_2141D8BF8(&qword_253F11FF8);
    v10 = (_QWORD *)swift_allocObject();
    v11 = j__malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 72);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v10 + 4 >= &a4[9 * v8 + 4])
      memmove(v10 + 4, a4 + 4, 72 * v8);
    a4[2] = 0;
  }
  else
  {
    sub_2141D8BF8(&qword_253F11E70);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

size_t sub_2142259F8(size_t a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_214225A0C(a1, a2, a3, a4, &qword_253F135A0, &qword_253F134A8);
}

size_t sub_214225A0C(size_t result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  char v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v18;
  unint64_t v19;

  v8 = result;
  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_30:
        __break(1u);
        return result;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (!v12)
  {
    v16 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_19;
  }
  sub_2141D8BF8(a5);
  v13 = *(_QWORD *)(sub_2141D8BF8(a6) - 8);
  v14 = *(_QWORD *)(v13 + 72);
  v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v16 = (_QWORD *)swift_allocObject();
  result = j__malloc_size(v16);
  if (!v14)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (result - v15 == 0x8000000000000000 && v14 == -1)
    goto LABEL_29;
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(result - v15) / v14);
LABEL_19:
  v18 = *(_QWORD *)(sub_2141D8BF8(a6) - 8);
  if ((v8 & 1) != 0)
  {
    if (v16 < a4
      || (v19 = (*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80),
          (char *)v16 + v19 >= (char *)a4 + v19 + *(_QWORD *)(v18 + 72) * v11))
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return (size_t)v16;
}

_QWORD *sub_214225B80(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_214225CC4(a1, a2, a3, a4, &qword_253F10D20, &qword_253F10D08);
}

char *sub_214225B94(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_2141D8BF8(&qword_253F13590);
    v10 = (char *)swift_allocObject();
    v11 = j__malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 608);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[608 * v8])
      memmove(v12, v13, 608 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

_QWORD *sub_214225CB0(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_214225CC4(a1, a2, a3, a4, &qword_253F122D0, &qword_253F12238);
}

_QWORD *sub_214225CC4(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  char v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int64_t v14;
  uint64_t v15;

  v8 = (char)result;
  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (v12)
  {
    sub_2141D8BF8(a5);
    v13 = (_QWORD *)swift_allocObject();
    v14 = j__malloc_size(v13);
    v15 = v14 - 32;
    if (v14 < 32)
      v15 = v14 - 17;
    v13[2] = v11;
    v13[3] = 2 * (v15 >> 4);
  }
  else
  {
    v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  if ((v8 & 1) != 0)
  {
    if (v13 != a4 || v13 + 4 >= &a4[2 * v11 + 4])
      memmove(v13 + 4, a4 + 4, 16 * v11);
    a4[2] = 0;
  }
  else
  {
    sub_2141D8BF8(a6);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v13;
}

char *sub_214225DE8(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_2141D8BF8(&qword_253F122C0);
    v10 = (char *)swift_allocObject();
    v11 = j__malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 184);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[184 * v8])
      memmove(v12, v13, 184 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_214225F04(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_2141D8BF8(&qword_253F0FF80);
    v10 = (char *)swift_allocObject();
    v11 = j__malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 80);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[80 * v8])
      memmove(v12, v13, 80 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

_QWORD *sub_214226018(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    sub_2141D8BF8(&qword_253F122B8);
    v10 = (_QWORD *)swift_allocObject();
    v11 = j__malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 56);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v10 + 4 >= &a4[7 * v8 + 4])
      memmove(v10 + 4, a4 + 4, 56 * v8);
    a4[2] = 0;
  }
  else
  {
    sub_2141D8BF8(&qword_253F12218);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_214226154(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_2141D8BF8(&qword_253F105F0);
    v10 = (char *)swift_allocObject();
    v11 = j__malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_214226254(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_2141D8BF8(&qword_253F10600);
    v10 = (char *)swift_allocObject();
    v11 = j__malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 152);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[152 * v8])
      memmove(v12, v13, 152 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_21422636C(char *a1, int64_t a2, char a3, char *a4)
{
  return sub_214226394(a1, a2, a3, a4, &qword_253F105F8);
}

char *sub_214226380(char *a1, int64_t a2, char a3, char *a4)
{
  return sub_214226394(a1, a2, a3, a4, &qword_254D69818);
}

char *sub_214226394(char *result, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  char v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v6 = (char)result;
  if ((a3 & 1) != 0)
  {
    v7 = *((_QWORD *)a4 + 3);
    v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v8 = a2;
    }
  }
  else
  {
    v8 = a2;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (v8 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = v8;
  if (v10)
  {
    sub_2141D8BF8(a5);
    v11 = (char *)swift_allocObject();
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 1;
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 5);
  }
  else
  {
    v11 = (char *)MEMORY[0x24BEE4AF8];
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v6 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[32 * v9])
      memmove(v14, v15, 32 * v9);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v11;
}

size_t sub_214226498(size_t a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_2142266E4(a1, a2, a3, a4, &qword_253F11FE8, (uint64_t (*)(_QWORD))MEMORY[0x24BDCE900]);
}

char *sub_2142264AC(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_2141D8BF8(&qword_253F10620);
    v10 = (char *)swift_allocObject();
    v11 = j__malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[40 * v8])
      memmove(v12, v13, 40 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_2142265BC(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_2141D8BF8(&qword_253F10628);
    v10 = (char *)swift_allocObject();
    v11 = j__malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 96);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[96 * v8])
      memmove(v12, v13, 96 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, 96 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

size_t sub_2142266D0(size_t a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_2142266E4(a1, a2, a3, a4, &qword_254D69808, (uint64_t (*)(_QWORD))type metadata accessor for ChartContentList.Item);
}

size_t sub_2142266E4(size_t result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  char v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v18;
  unint64_t v19;

  v8 = result;
  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_30:
        __break(1u);
        return result;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (!v12)
  {
    v16 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_19;
  }
  sub_2141D8BF8(a5);
  v13 = *(_QWORD *)(a6(0) - 8);
  v14 = *(_QWORD *)(v13 + 72);
  v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v16 = (_QWORD *)swift_allocObject();
  result = j__malloc_size(v16);
  if (!v14)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (result - v15 == 0x8000000000000000 && v14 == -1)
    goto LABEL_29;
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(result - v15) / v14);
LABEL_19:
  v18 = *(_QWORD *)(a6(0) - 8);
  if ((v8 & 1) != 0)
  {
    if (v16 < a4
      || (v19 = (*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80),
          (char *)v16 + v19 >= (char *)a4 + v19 + *(_QWORD *)(v18 + 72) * v11))
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return (size_t)v16;
}

unint64_t sub_214226858()
{
  unint64_t result;

  result = qword_253F119B8;
  if (!qword_253F119B8)
  {
    result = MEMORY[0x2199CD934](&unk_214430218, &type metadata for IndexedChannel);
    atomic_store(result, (unint64_t *)&qword_253F119B8);
  }
  return result;
}

char *sub_21422689C(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  size_t v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_2141D8BF8(&qword_254D69838);
    v10 = (char *)swift_allocObject();
    v11 = j__malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  v15 = 16 * v8;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[v15])
      memmove(v13, v14, v15);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, v15);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_214226990(char *a1, int64_t a2, char a3, char *a4)
{
  return sub_21422699C(a1, a2, a3, a4, qword_253F100B0);
}

char *sub_21422699C(char *result, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  char v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v6 = (char)result;
  if ((a3 & 1) != 0)
  {
    v7 = *((_QWORD *)a4 + 3);
    v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v8 = a2;
    }
  }
  else
  {
    v8 = a2;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (v8 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = v8;
  if (v10)
  {
    sub_2141D8BF8(a5);
    v11 = (char *)swift_allocObject();
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)MEMORY[0x24BEE4AF8];
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v6 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v9])
      memmove(v14, v15, 16 * v9);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v14, v15, 16 * v9);
  }
  swift_bridgeObjectRelease();
  return v11;
}

char *sub_214226A90(char *a1, int64_t a2, char a3, char *a4)
{
  return sub_214226AA4(a1, a2, a3, a4, &qword_253F11988);
}

char *sub_214226AA4(char *result, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  char v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v6 = (char)result;
  if ((a3 & 1) != 0)
  {
    v7 = *((_QWORD *)a4 + 3);
    v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v8 = a2;
    }
  }
  else
  {
    v8 = a2;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (v8 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = v8;
  if (v10)
  {
    sub_2141D8BF8(a5);
    v11 = (char *)swift_allocObject();
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 3);
  }
  else
  {
    v11 = (char *)MEMORY[0x24BEE4AF8];
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v6 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[8 * v9])
      memmove(v14, v15, 8 * v9);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t _s20ChildContainerValuesVMa(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2141D8E88(a1, a2, a3, a4, (uint64_t)&_s20ChildContainerValuesVMn);
}

uint64_t sub_214226BB4@<X0>(_DWORD *a1@<X8>)
{
  sub_214424530();
  return sub_2141DC238(a1);
}

uint64_t sub_214226C1C()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_214226C24(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_214226C58(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_214226CA0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRelease();
  return a1;
}

void sub_214226CD8()
{
  JUMPOUT(0x2199CD934);
}

uint64_t sub_214226CE8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_2141D8BF8(&qword_254D698D8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_214226D28()
{
  unint64_t result;

  result = qword_254D698E0;
  if (!qword_254D698E0)
  {
    result = MEMORY[0x2199CD934](&unk_21442FF10, &_s10ChildIDKeyVN);
    atomic_store(result, (unint64_t *)&qword_254D698E0);
  }
  return result;
}

uint64_t sub_214226D6C()
{
  sub_2144254D8();
  swift_bridgeObjectRelease();
  swift_getMetatypeMetadata();
  sub_214424F08();
  sub_214424F20();
  swift_bridgeObjectRelease();
  sub_214424F20();
  sub_21442573C();
  sub_214424F20();
  swift_bridgeObjectRelease();
  sub_214424F20();
  return 0x6574656D61726150;
}

uint64_t sub_214226E5C()
{
  return sub_214425880();
}

BOOL sub_214226E80(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

uint64_t sub_214226E8C()
{
  sub_214425874();
  sub_214425880();
  return sub_2144258B0();
}

uint64_t sub_214226ED0()
{
  return sub_214226E8C();
}

uint64_t sub_214226ED8()
{
  return sub_214226E5C();
}

uint64_t sub_214226EE0()
{
  sub_214425874();
  sub_214226E5C();
  return sub_2144258B0();
}

uint64_t sub_214226F1C()
{
  return sub_214226D6C();
}

BOOL sub_214226F2C(uint64_t *a1, uint64_t *a2)
{
  return sub_214226E80(*a1, *a2);
}

_BYTE *sub_214226F38(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SourceSignal(0, v2, v6, v7);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v1, v2);
  return sub_2143F7CC0(v5);
}

uint64_t sub_214226FCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[7];
  char v11;

  v5 = *(_QWORD *)(a3 + 16);
  type metadata accessor for SourceSignal(0, v5, a3, a4);
  v6 = swift_dynamicCastClass();
  v7 = v6;
  if (v6)
    v6 = swift_retain();
  v10[6] = v7;
  MEMORY[0x24BDAC7A8](v6);
  v10[2] = v5;
  v10[3] = v4;
  sub_214425388();
  sub_21440557C((void (*)(char *, char *))sub_214228580, (uint64_t)v10, MEMORY[0x24BEE4078], MEMORY[0x24BEE4AE0] + 8, v8, (uint64_t)&v11);
  return swift_release();
}

uint64_t sub_2142270B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  __int128 v10[2];
  _QWORD v11[3];
  uint64_t v12;
  uint64_t v13;

  swift_beginAccess();
  v3 = *(_QWORD *)(v1 + 24);
  if (*(_QWORD *)(v3 + 16) && (v4 = sub_214336CE4(a1), (v5 & 1) != 0))
  {
    sub_2141D7878(*(_QWORD *)(v3 + 56) + 40 * v4, (uint64_t)v10);
    sub_2141D8DC0(v10, (uint64_t)v11);
    swift_endAccess();
    v6 = v12;
    v7 = v13;
    sub_2141E88D0(v11, v12);
    v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v6, v7);
    _s6Charts15AnyChartContentVwxx_0((uint64_t)v11);
    return v8;
  }
  else
  {
    result = swift_endAccess();
    __break(1u);
  }
  return result;
}

uint64_t sub_21422717C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t result;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  int64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;

  swift_beginAccess();
  v3 = *(_QWORD *)(v1 + 24);
  v28 = v3 + 64;
  v4 = 1 << *(_BYTE *)(v3 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(v3 + 64);
  v7 = (char *)&v31 + 8;
  v29 = (unint64_t)(v4 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v9 = 0;
  while (1)
  {
    if (v6)
    {
      v10 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v11 = v10 | (v9 << 6);
LABEL_7:
      v12 = *(_QWORD *)(v3 + 56);
      *(_QWORD *)&v31 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v11);
      sub_2141D7878(v12 + 40 * v11, (uint64_t)v7);
      goto LABEL_26;
    }
    v13 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v13 < v29)
    {
      v14 = *(_QWORD *)(v28 + 8 * v13);
      if (v14)
        goto LABEL_11;
      v15 = v9 + 2;
      ++v9;
      if (v13 + 1 < v29)
      {
        v14 = *(_QWORD *)(v28 + 8 * v15);
        if (v14)
          goto LABEL_14;
        v9 = v13 + 1;
        if (v13 + 2 < v29)
        {
          v14 = *(_QWORD *)(v28 + 8 * (v13 + 2));
          if (v14)
          {
            v13 += 2;
            goto LABEL_11;
          }
          v15 = v13 + 3;
          v9 = v13 + 2;
          if (v13 + 3 < v29)
            break;
        }
      }
    }
LABEL_25:
    v6 = 0;
    v32 = 0u;
    v33 = 0u;
    v31 = 0u;
LABEL_26:
    sub_2142274B4((uint64_t)&v31, (uint64_t)&v34);
    if (!v36)
      return swift_release();
    v16 = v34;
    sub_2141D8DC0(&v35, (uint64_t)&v31);
    if (*(_QWORD *)(a1 + 16))
    {
      v17 = sub_214336CE4(v16);
      if ((v18 & 1) != 0)
      {
        v19 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 16 * v17 + 8);
        v30 = v9;
        v20 = *((_QWORD *)&v32 + 1);
        v21 = v33;
        sub_2141E88D0(&v31, *((uint64_t *)&v32 + 1));
        v22 = a1;
        v23 = v3;
        v24 = v7;
        v25 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v21 + 16);
        v26 = swift_retain();
        v27 = v20;
        v9 = v30;
        v25(v26, v19, v27, v21);
        v7 = v24;
        v3 = v23;
        a1 = v22;
        swift_release();
      }
    }
    result = _s6Charts15AnyChartContentVwxx_0((uint64_t)&v31);
  }
  v14 = *(_QWORD *)(v28 + 8 * v15);
  if (v14)
  {
LABEL_14:
    v13 = v15;
LABEL_11:
    v6 = (v14 - 1) & v14;
    v11 = __clz(__rbit64(v14)) + (v13 << 6);
    v9 = v13;
    goto LABEL_7;
  }
  while (1)
  {
    v13 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v13 >= v29)
    {
      v9 = v29 - 1;
      goto LABEL_25;
    }
    v14 = *(_QWORD *)(v28 + 8 * v13);
    ++v15;
    if (v14)
      goto LABEL_11;
  }
LABEL_32:
  __break(1u);
  return result;
}

uint64_t sub_214227424()
{
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ParametersContext()
{
  return objc_opt_self();
}

uint64_t sub_214227468()
{
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for SignalParametersContext()
{
  return objc_opt_self();
}

uint64_t sub_2142274B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_2141D8BF8(&qword_253F132E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_2142274FC()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_214227568(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_214227618 + 4 * byte_214428710[(v7 - 1)]))();
}

void sub_214227668(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t type metadata accessor for ParametersContext.ParameterSignalContainer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2141D8E88(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ParametersContext.ParameterSignalContainer);
}

uint64_t type metadata accessor for ParameterRef(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2141D8E88(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ParameterRef);
}

uint64_t sub_214227830()
{
  uint64_t result;
  unint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;

  v3 = MEMORY[0x24BEE0190] + 64;
  v4 = MEMORY[0x24BEE0178] + 64;
  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout2();
    v5 = &v2;
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t *sub_2142278CC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  v6 = v5;
  if (((v6 + 8) & (unint64_t)~v6) + *(_QWORD *)(v4 + 64) <= 8)
    v7 = 8;
  else
    v7 = ((v5 + 8) & ~(unint64_t)v5) + *(_QWORD *)(v4 + 64);
  v8 = v5 & 0x100000;
  if (v6 > 7 || v8 != 0 || v7 + 1 > 0x18)
  {
    v11 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v11 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
LABEL_23:
    swift_retain();
    return v3;
  }
  v12 = *((unsigned __int8 *)a2 + v7);
  if (v12 >= 3)
  {
    if (v7 <= 3)
      v13 = v7;
    else
      v13 = 4;
    __asm { BR              X14 }
  }
  if (v12 == 2)
  {
    *a1 = *a2;
    (*(void (**)(unint64_t, unint64_t))(v4 + 16))(((unint64_t)a1 + v6 + 8) & ~v6, ((unint64_t)a2 + v6 + 8) & ~v6);
    *((_BYTE *)v3 + v7) = 2;
    return v3;
  }
  if (v12 != 1)
  {
    *a1 = *a2;
    *((_BYTE *)a1 + v7) = 0;
    goto LABEL_23;
  }
  *a1 = *a2;
  *((_BYTE *)a1 + v7) = 1;
  return v3;
}

uint64_t sub_214227A2C(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unsigned int v5;
  uint64_t v6;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = ((v3 + 8) & ~v3) + *(_QWORD *)(v2 + 64);
  if (v4 <= 8)
    v4 = 8;
  v5 = *(unsigned __int8 *)(result + v4);
  if (v5 < 3)
  {
    if (v5 == 2)
    {
      return (*(uint64_t (**)(uint64_t))(v2 + 8))((result + v3 + 8) & ~v3);
    }
    else if (v5 != 1)
    {
      return swift_release();
    }
  }
  else
  {
    if (v4 <= 3)
      v6 = v4;
    else
      v6 = 4;
    return ((uint64_t (*)(void))((char *)&loc_214227A84 + 4 * byte_214428723[v6]))();
  }
  return result;
}

_QWORD *sub_214227AF8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  char v9;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  if (((v5 + 8) & (unint64_t)~v5) + *(_QWORD *)(v4 + 64) <= 8)
    v6 = 8;
  else
    v6 = ((v5 + 8) & ~v5) + *(_QWORD *)(v4 + 64);
  v7 = *((unsigned __int8 *)a2 + v6);
  if (v7 >= 3)
  {
    if (v6 <= 3)
      v8 = v6;
    else
      v8 = 4;
    __asm { BR              X14 }
  }
  if (v7 == 2)
  {
    *a1 = *a2;
    (*(void (**)(unint64_t, unint64_t))(v4 + 16))(((unint64_t)a1 + v5 + 8) & ~v5, ((unint64_t)a2 + v5 + 8) & ~v5);
    v9 = 2;
  }
  else
  {
    if (v7 != 1)
    {
      *a1 = *a2;
      *((_BYTE *)a1 + v6) = 0;
      swift_retain();
      return a1;
    }
    *a1 = *a2;
    v9 = 1;
  }
  *((_BYTE *)a1 + v6) = v9;
  return a1;
}

_QWORD *sub_214227C18(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  char v14;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    v7 = *(unsigned __int8 *)(v6 + 80);
    if (((v7 + 8) & (unint64_t)~v7) + *(_QWORD *)(v6 + 64) <= 8)
      v8 = 8;
    else
      v8 = ((v7 + 8) & ~v7) + *(_QWORD *)(v6 + 64);
    v9 = *((unsigned __int8 *)a1 + v8);
    if (v9 >= 3)
    {
      if (v8 <= 3)
        v10 = v8;
      else
        v10 = 4;
      __asm { BR              X12 }
    }
    v11 = ~v7;
    if (v9 == 2)
    {
      (*(void (**)(unint64_t, _QWORD))(v6 + 8))(((unint64_t)a1 + v7 + 8) & v11, *(_QWORD *)(a3 + 16));
    }
    else if (v9 != 1)
    {
      swift_release();
    }
    v12 = *((unsigned __int8 *)a2 + v8);
    if (v12 >= 3)
    {
      if (v8 <= 3)
        v13 = v8;
      else
        v13 = 4;
      __asm { BR              X12 }
    }
    if (v12 == 2)
    {
      *a1 = *a2;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 16))(((unint64_t)a1 + v7 + 8) & v11, ((unint64_t)a2 + v7 + 8) & v11, v5);
      v14 = 2;
    }
    else
    {
      if (v12 != 1)
      {
        *a1 = *a2;
        *((_BYTE *)a1 + v8) = 0;
        swift_retain();
        return a1;
      }
      *a1 = *a2;
      v14 = 1;
    }
    *((_BYTE *)a1 + v8) = v14;
  }
  return a1;
}

_QWORD *sub_214227E04(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  char v9;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  if (((v5 + 8) & (unint64_t)~v5) + *(_QWORD *)(v4 + 64) <= 8)
    v6 = 8;
  else
    v6 = ((v5 + 8) & ~v5) + *(_QWORD *)(v4 + 64);
  v7 = *((unsigned __int8 *)a2 + v6);
  if (v7 >= 3)
  {
    if (v6 <= 3)
      v8 = v6;
    else
      v8 = 4;
    __asm { BR              X14 }
  }
  if (v7 == 2)
  {
    *a1 = *a2;
    (*(void (**)(unint64_t, unint64_t))(v4 + 32))(((unint64_t)a1 + v5 + 8) & ~v5, ((unint64_t)a2 + v5 + 8) & ~v5);
    v9 = 2;
  }
  else if (v7 == 1)
  {
    *a1 = *a2;
    v9 = 1;
  }
  else
  {
    v9 = 0;
    *a1 = *a2;
  }
  *((_BYTE *)a1 + v6) = v9;
  return a1;
}

_QWORD *sub_214227F20(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  char v14;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    v7 = *(unsigned __int8 *)(v6 + 80);
    if (((v7 + 8) & (unint64_t)~v7) + *(_QWORD *)(v6 + 64) <= 8)
      v8 = 8;
    else
      v8 = ((v7 + 8) & ~v7) + *(_QWORD *)(v6 + 64);
    v9 = *((unsigned __int8 *)a1 + v8);
    if (v9 >= 3)
    {
      if (v8 <= 3)
        v10 = v8;
      else
        v10 = 4;
      __asm { BR              X12 }
    }
    v11 = ~v7;
    if (v9 == 2)
    {
      (*(void (**)(unint64_t, _QWORD))(v6 + 8))(((unint64_t)a1 + v7 + 8) & v11, *(_QWORD *)(a3 + 16));
    }
    else if (v9 != 1)
    {
      swift_release();
    }
    v12 = *((unsigned __int8 *)a2 + v8);
    if (v12 >= 3)
    {
      if (v8 <= 3)
        v13 = v8;
      else
        v13 = 4;
      __asm { BR              X12 }
    }
    if (v12 == 2)
    {
      *a1 = *a2;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 32))(((unint64_t)a1 + v7 + 8) & v11, ((unint64_t)a2 + v7 + 8) & v11, v5);
      v14 = 2;
    }
    else if (v12 == 1)
    {
      *a1 = *a2;
      v14 = 1;
    }
    else
    {
      v14 = 0;
      *a1 = *a2;
    }
    *((_BYTE *)a1 + v8) = v14;
  }
  return a1;
}

uint64_t sub_214228108(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  char v5;
  int v6;
  unsigned int v8;
  int v9;
  unsigned int v10;

  v3 = 8;
  if (((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 80))
     + *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64) > 8)
    v3 = ((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 80))
       + *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_21;
  v4 = v3 + 1;
  v5 = 8 * (v3 + 1);
  if ((v3 + 1) <= 3)
  {
    v8 = ((a2 + ~(-1 << v5) - 253) >> v5) + 1;
    if (HIWORD(v8))
    {
      v6 = *(_DWORD *)(a1 + v4);
      if (!v6)
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v8 > 0xFF)
    {
      v6 = *(unsigned __int16 *)(a1 + v4);
      if (!*(_WORD *)(a1 + v4))
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v8 < 2)
    {
LABEL_21:
      v10 = *(unsigned __int8 *)(a1 + v3);
      if (v10 >= 3)
        return (v10 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v6 = *(unsigned __int8 *)(a1 + v4);
  if (!*(_BYTE *)(a1 + v4))
    goto LABEL_21;
LABEL_14:
  v9 = (v6 - 1) << v5;
  if (v4 > 3)
    v9 = 0;
  if (!(_DWORD)v4)
    return (v9 + 254);
  if (v4 > 3)
    LODWORD(v4) = 4;
  return ((uint64_t (*)(void))((char *)&loc_2142281DC + 4 * byte_214428746[(v4 - 1)]))();
}

void sub_214228228(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5;
  size_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;

  v5 = ((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) - 8) + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) - 8) + 80))
     + *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) - 8) + 64);
  if (v5 <= 8)
    v5 = 8;
  v6 = v5 + 1;
  if (a3 < 0xFE)
  {
    v7 = 0;
  }
  else if (v6 <= 3)
  {
    v9 = ((a3 + ~(-1 << (8 * v6)) - 253) >> (8 * v6)) + 1;
    if (HIWORD(v9))
    {
      v7 = 4u;
    }
    else if (v9 >= 0x100)
    {
      v7 = 2;
    }
    else
    {
      v7 = v9 > 1;
    }
  }
  else
  {
    v7 = 1u;
  }
  if (a2 <= 0xFD)
    __asm { BR              X11 }
  v8 = a2 - 254;
  if (v6 < 4)
  {
    if ((_DWORD)v5 != -1)
    {
      v10 = v8 & ~(-1 << (8 * v6));
      bzero(a1, v6);
      if ((_DWORD)v6 == 3)
      {
        *a1 = v10;
        *((_BYTE *)a1 + 2) = BYTE2(v10);
      }
      else if ((_DWORD)v6 == 2)
      {
        *a1 = v10;
      }
      else
      {
        *(_BYTE *)a1 = v10;
      }
    }
  }
  else
  {
    bzero(a1, v5 + 1);
    *(_DWORD *)a1 = v8;
  }
  __asm { BR              X10 }
}

uint64_t sub_2142283E0(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;

  v2 = 8;
  if (((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80))
     + *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64) > 8)
    v2 = ((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80))
       + *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64);
  if (*(unsigned __int8 *)(a1 + v2) < 3u)
    return *(unsigned __int8 *)(a1 + v2);
  if (v2 <= 3)
    v3 = v2;
  else
    v3 = 4;
  return ((uint64_t (*)(void))((char *)&loc_214228438 + 4 * byte_214428754[v3]))();
}

void sub_214228480(_BYTE *a1, unsigned int a2, uint64_t a3)
{
  unint64_t v4;
  size_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;

  v4 = ((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 80))
     + *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  if (a2 > 2)
  {
    if (v4 <= 8)
      v5 = 8;
    else
      v5 = ((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 80))
         + *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
    v6 = a2 - 3;
    if (v5 < 4)
    {
      v7 = v6 >> (8 * v5);
      v8 = v6 & ~(-1 << (8 * v5));
      a1[v5] = v7 + 3;
      bzero(a1, v5);
      if ((_DWORD)v5 == 3)
      {
        *(_WORD *)a1 = v8;
        a1[2] = BYTE2(v8);
      }
      else if ((_DWORD)v5 == 2)
      {
        *(_WORD *)a1 = v8;
      }
      else
      {
        *a1 = v8;
      }
    }
    else
    {
      a1[v5] = 3;
      bzero(a1, v5);
      *(_DWORD *)a1 = v6;
    }
  }
  else
  {
    if (v4 <= 8)
      v4 = 8;
    a1[v4] = a2;
  }
}

uint64_t type metadata accessor for ConstantOrParameterRef(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2141D8E88(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ConstantOrParameterRef);
}

void sub_214228570()
{
  JUMPOUT(0x2199CD934);
}

void sub_214228580()
{
  uint64_t v0;

  sub_2143F7CF8(*(_QWORD *)(v0 + 24));
}

uint64_t sub_2142285B0(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v9 = MEMORY[0x24BEE4AF8];
    sub_2141D4088(0, v1, 0);
    v2 = v9;
    v4 = (uint64_t *)(a1 + 152);
    do
    {
      v5 = *v4;
      v7 = *(_QWORD *)(v9 + 16);
      v6 = *(_QWORD *)(v9 + 24);
      swift_bridgeObjectRetain();
      if (v7 >= v6 >> 1)
        sub_2141D4088((_QWORD *)(v6 > 1), v7 + 1, 1);
      *(_QWORD *)(v9 + 16) = v7 + 1;
      *(_QWORD *)(v9 + 8 * v7 + 32) = v5;
      v4 += 76;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_21422867C(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v4;
  int64_t i;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  uint64_t v20;
  char v21;
  uint64_t result;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE v29[152];
  _QWORD v30[19];
  _BYTE v31[160];
  uint64_t v32;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (!v1)
    return v2;
  v32 = MEMORY[0x24BEE4AF8];
  sub_2141D3AA0(0, v1, 0);
  v2 = v32;
  v4 = a1 + 32;
  for (i = v1 - 1; ; --i)
  {
    sub_2141EF6B8(v4, (uint64_t)v30);
    sub_2141EF6B8((uint64_t)v30, (uint64_t)v31);
    if (sub_21421C2FC((uint64_t)v31) == 1)
    {
      v6 = sub_21421C308((uint64_t)v31);
      v7 = *(_QWORD *)(v6 + 8);
      v8 = *(_QWORD *)(v6 + 40);
      v9 = *(_QWORD *)(v6 + 48);
      v10 = *(unsigned __int8 *)(v6 + 56);
      v27 = *(_QWORD *)(v6 + 16);
      v26 = *(_BYTE *)(v6 + 24);
      sub_2141DD130(v7, v27, v26);
      swift_bridgeObjectRetain();
      v28 = v8;
      v11 = v8;
      v12 = v9;
      v13 = v10;
    }
    else
    {
      v14 = sub_21421C308((uint64_t)v31);
      v26 = *(_BYTE *)(v14 + 24);
      v25 = *(_QWORD *)(v14 + 8);
      v9 = *(_QWORD *)(v14 + 48);
      v27 = *(_QWORD *)(v14 + 16);
      v28 = *(_QWORD *)(v14 + 40);
      v10 = *(unsigned __int8 *)(v14 + 56);
      sub_2141EF6B8((uint64_t)v30, (uint64_t)v29);
      v15 = sub_21421C308((uint64_t)v29);
      v16 = v4;
      v17 = *(_QWORD *)(v15 + 40);
      v18 = v2;
      v19 = i;
      v20 = *(_QWORD *)(v15 + 48);
      v21 = *(_BYTE *)(v15 + 56);
      sub_2141DD130(*(_QWORD *)(v15 + 8), *(_QWORD *)(v15 + 16), *(_BYTE *)(v15 + 24));
      v7 = v25;
      swift_bridgeObjectRetain();
      v11 = v17;
      v4 = v16;
      v12 = v20;
      i = v19;
      v2 = v18;
      v13 = v21;
    }
    result = sub_2141DD140(v11, v12, v13);
    if ((v10 & 0x80) != 0)
      break;
    if (v10)
      goto LABEL_14;
    sub_21421C318(v30, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21420B7DC);
    sub_21421C318(v30, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21420B7DC);
    sub_2141DD140(v28, v9, 0);
    sub_2141ED0BC(v7, v27, v26);
    swift_bridgeObjectRelease();
    sub_2141EF1B0(v28, v9, 0);
    sub_21421C318(v30, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141EF5D4);
    sub_21421C318(v30, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141EF5D4);
    v32 = v2;
    v24 = *(_QWORD *)(v2 + 16);
    v23 = *(_QWORD *)(v2 + 24);
    if (v24 >= v23 >> 1)
    {
      sub_2141D3AA0((char *)(v23 > 1), v24 + 1, 1);
      v2 = v32;
    }
    *(_QWORD *)(v2 + 16) = v24 + 1;
    *(_QWORD *)(v2 + 8 * v24 + 32) = v28;
    if (!i)
      return v2;
    v4 += 152;
  }
  __break(1u);
LABEL_14:
  __break(1u);
  return result;
}

uint64_t sub_2142288E8(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  double *v12;
  uint64_t v13;
  uint64_t v14;
  double *v15;
  uint64_t v16;
  uint64_t v17;

  if (a3 >= 1 && (v3 = *(_QWORD *)(a2 + 16)) != 0)
  {
    v4 = 1;
    if ((unint64_t)a3 < 2 || v3 == 1)
    {
LABEL_21:
      v8 = *(_QWORD *)(result + 16);
      if (!v8)
        return 1;
    }
    else
    {
      v5 = a3 - 3;
      if ((unint64_t)a3 < 3)
      {
        v4 = 2;
        v8 = *(_QWORD *)(result + 16);
        if (!v8)
          return 1;
      }
      else
      {
        if (v3 - 2 < v5)
          v5 = v3 - 2;
        v6 = v5 + 1;
        if (v6 >= 0x21)
        {
          v9 = v6 & 0x1F;
          if ((v6 & 0x1F) == 0)
            v9 = 32;
          v10 = v6 - v9;
          v7 = v10 + 2;
          do
            v10 -= 32;
          while (v10);
        }
        else
        {
          v7 = 2;
        }
        while (v3 != v7)
        {
          if (a3 == ++v7)
          {
            v4 = a3;
            goto LABEL_21;
          }
        }
        v4 = *(_QWORD *)(a2 + 16);
        v8 = *(_QWORD *)(result + 16);
        if (!v8)
          return 1;
      }
    }
  }
  else
  {
    v4 = 0;
    v8 = *(_QWORD *)(result + 16);
    if (!v8)
      return 1;
  }
  v11 = *(_QWORD *)(a2 + 16);
  if (v4 == v11)
    return 1;
  v12 = (double *)(result + 32);
  v13 = v11 - v4;
  if (v11 < v4)
    v13 = 0;
  v14 = ~v4 + v11;
  v15 = (double *)(a2 + 8 * v4 + 32);
  v16 = v8 - 1;
  while (v13)
  {
    result = *v12 <= *v15;
    if (*v12 <= *v15)
    {
      if (v16)
      {
        v17 = v14;
        --v13;
        --v14;
        ++v15;
        ++v12;
        --v16;
        if (v17)
          continue;
      }
    }
    return result;
  }
  __break(1u);
  return result;
}

uint64_t sub_214228A14(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  double *v12;
  uint64_t v13;
  uint64_t v14;
  double *v15;
  uint64_t v16;
  uint64_t v17;

  if (a3 >= 1 && (v3 = *(_QWORD *)(a2 + 16)) != 0)
  {
    v4 = 1;
    if ((unint64_t)a3 < 2 || v3 == 1)
    {
LABEL_21:
      v8 = *(_QWORD *)(result + 16);
      if (!v8)
        return 1;
    }
    else
    {
      v5 = a3 - 3;
      if ((unint64_t)a3 < 3)
      {
        v4 = 2;
        v8 = *(_QWORD *)(result + 16);
        if (!v8)
          return 1;
      }
      else
      {
        if (v3 - 2 < v5)
          v5 = v3 - 2;
        v6 = v5 + 1;
        if (v6 >= 0x21)
        {
          v9 = v6 & 0x1F;
          if ((v6 & 0x1F) == 0)
            v9 = 32;
          v10 = v6 - v9;
          v7 = v10 + 2;
          do
            v10 -= 32;
          while (v10);
        }
        else
        {
          v7 = 2;
        }
        while (v3 != v7)
        {
          if (a3 == ++v7)
          {
            v4 = a3;
            goto LABEL_21;
          }
        }
        v4 = *(_QWORD *)(a2 + 16);
        v8 = *(_QWORD *)(result + 16);
        if (!v8)
          return 1;
      }
    }
  }
  else
  {
    v4 = 0;
    v8 = *(_QWORD *)(result + 16);
    if (!v8)
      return 1;
  }
  v11 = *(_QWORD *)(a2 + 16);
  if (v4 == v11)
    return 1;
  v12 = (double *)(result + 32);
  v13 = v11 - v4;
  if (v11 < v4)
    v13 = 0;
  v14 = ~v4 + v11;
  v15 = (double *)(a2 + 8 * v4 + 32);
  v16 = v8 - 1;
  while (v13)
  {
    result = *v15 <= *v12;
    if (*v15 <= *v12)
    {
      if (v16)
      {
        v17 = v14;
        --v13;
        --v14;
        ++v15;
        ++v12;
        --v16;
        if (v17)
          continue;
      }
    }
    return result;
  }
  __break(1u);
  return result;
}

char *sub_214228B40(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  _BYTE v10[152];
  _BYTE v11[152];
  _QWORD v12[20];

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (char *)MEMORY[0x24BEE4AF8];
  v3 = swift_bridgeObjectRetain();
  sub_2141E801C(v3 + 472, (uint64_t)v11, &qword_253F13428);
  v4 = a1 + 1080;
  v5 = v1 - 1;
  v6 = (char *)MEMORY[0x24BEE4AF8];
  while (1)
  {
    sub_2141E801C((uint64_t)v11, (uint64_t)v12, &qword_253F13428);
    if (sub_21422C64C(v12) != 1)
    {
      sub_21422F2B0((uint64_t)v11, (uint64_t (*)(void))sub_21420B7DC);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v6 = sub_214224028(0, *((_QWORD *)v6 + 2) + 1, 1, v6);
      v8 = *((_QWORD *)v6 + 2);
      v7 = *((_QWORD *)v6 + 3);
      if (v8 >= v7 >> 1)
        v6 = sub_214224028((char *)(v7 > 1), v8 + 1, 1, v6);
      sub_2141E801C((uint64_t)v11, (uint64_t)v10, &qword_253F13428);
      *((_QWORD *)v6 + 2) = v8 + 1;
      sub_2141EF6B8((uint64_t)v10, (uint64_t)&v6[152 * v8 + 32]);
    }
    if (!v5)
      break;
    sub_2141E801C(v4, (uint64_t)v11, &qword_253F13428);
    v4 += 608;
    --v5;
  }
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t sub_214228CB0()
{
  uint64_t v0;

  v0 = sub_2144242C0();
  MEMORY[0x24BDAC7A8](v0);
  sub_2144242B4();
  sub_2144242A8();
  sub_214424290();
  sub_2144242A8();
  return sub_2144242D8();
}

uint64_t sub_214228D9C()
{
  uint64_t v0;

  v0 = sub_2144242C0();
  MEMORY[0x24BDAC7A8](v0);
  sub_2144242B4();
  sub_2144242A8();
  sub_214424290();
  sub_2144242A8();
  sub_214424290();
  sub_2144242A8();
  return sub_2144242D8();
}

uint64_t sub_214228EC8(unint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  int64_t v21;
  int64_t v22;
  size_t isUniquelyReferenced_nonNull_native;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  int64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t result;
  uint64_t v36;
  _QWORD *__dst[38];
  _BYTE v38[288];
  _BYTE v39[296];

  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = 0;
  v5 = swift_allocObject();
  v6 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v5 + 16) = sub_2143694D0(MEMORY[0x24BEE4AF8]);
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = v6;
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = v6;
  v9 = v8 + 16;
  v36 = a2;
  sub_2142292C0(a1, v4, v8, v7, a2, v5);
  swift_beginAccess();
  v10 = *(_QWORD *)(v5 + 16);
  swift_bridgeObjectRetain_n();
  v11 = (_QWORD *)sub_21439810C(v10);
  swift_bridgeObjectRelease();
  __dst[0] = v11;
  sub_21422F214(__dst);
  swift_bridgeObjectRelease();
  v12 = __dst[0];
  v13 = __dst[0][2];
  if (v13)
  {
    swift_beginAccess();
    v14 = v13 - 1;
    for (i = 4; ; i += 38)
    {
      memcpy(__dst, &v12[i], sizeof(__dst));
      v16 = __dst[37];
      memcpy(v38, &__dst[1], sizeof(v38));
      nullsub_1(v38, v17);
      sub_2141E801C((uint64_t)v38, (uint64_t)v39, &qword_253F13410);
      sub_21422F46C((uint64_t)__dst);
      sub_21422F5A0((uint64_t)&__dst[1]);
      v18 = sub_214229830((uint64_t)v39, (uint64_t)v16, 1, v36);
      swift_bridgeObjectRelease();
      sub_21422F6C8((uint64_t)&__dst[1]);
      v19 = *(_QWORD *)(v18 + 16);
      v20 = *(_QWORD **)v9;
      v21 = *(_QWORD *)(*(_QWORD *)v9 + 16);
      v22 = v21 + v19;
      if (__OFADD__(v21, v19))
        goto LABEL_27;
      swift_bridgeObjectRetain();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      if ((_DWORD)isUniquelyReferenced_nonNull_native && v22 <= v20[3] >> 1)
      {
        if (*(_QWORD *)(v18 + 16))
          goto LABEL_7;
      }
      else
      {
        if (v21 <= v22)
          v27 = v21 + v19;
        else
          v27 = v21;
        v20 = (_QWORD *)sub_2142259F8(isUniquelyReferenced_nonNull_native, v27, 1, v20);
        if (*(_QWORD *)(v18 + 16))
        {
LABEL_7:
          if ((v20[3] >> 1) - v20[2] < v19)
            goto LABEL_29;
          sub_2141D8BF8(&qword_253F134A8);
          swift_arrayInitWithCopy();
          if (v19)
          {
            v24 = v20[2];
            v25 = __OFADD__(v24, v19);
            v26 = v24 + v19;
            if (v25)
              goto LABEL_30;
            v20[2] = v26;
          }
          goto LABEL_16;
        }
      }
      if (v19)
        goto LABEL_28;
LABEL_16:
      swift_bridgeObjectRelease();
      *(_QWORD *)v9 = v20;
      swift_bridgeObjectRelease();
      sub_21422F6C8((uint64_t)&__dst[1]);
      if (!v14)
        break;
      --v14;
    }
  }
  swift_release();
  swift_beginAccess();
  v28 = *(_QWORD **)v9;
  v29 = *(_QWORD *)(*(_QWORD *)v9 + 16);
  if (v29)
  {
    v30 = 0;
    v31 = 0;
    v32 = -v29;
    while (1)
    {
      v33 = v28[2];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v28 = (_QWORD *)sub_21434EBE8(v28);
      if (v31 >= v28[2])
        break;
      v34 = sub_2141D8BF8(&qword_253F134A8);
      *(double *)((char *)v28
                + ((*(unsigned __int8 *)(*(_QWORD *)(v34 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v34 - 8) + 80))
                + *(_QWORD *)(*(_QWORD *)(v34 - 8) + 72) * v31
                + 40) = (double)(v30 + v33);
      --v30;
      ++v31;
      if (v32 == v30)
      {
        *(_QWORD *)v9 = v28;
        goto LABEL_25;
      }
    }
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
    result = swift_release();
    __break(1u);
  }
  else
  {
LABEL_25:
    swift_bridgeObjectRetain();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    return (uint64_t)v28;
  }
  return result;
}

uint64_t sub_2142292C0(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  size_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  _BYTE v51[288];
  _QWORD v52[42];
  uint64_t v53[77];

  v12 = type metadata accessor for SgGroup(0);
  result = MEMORY[0x24BDAC7A8](v12);
  v15 = (uint64_t *)(a2 + 16);
  v16 = (uint64_t *)(a4 + 16);
  v17 = a5;
  switch(a1 >> 60)
  {
    case 0uLL:
      v49 = (uint64_t *)((char *)&v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
      v18 = swift_projectBox();
      sub_21423145C(v18, (uint64_t)v49);
      v50 = v49[1];
      v19 = *(_QWORD *)(v50 + 16);
      if (!v19)
        return sub_2142314A0((uint64_t)v49);
      swift_bridgeObjectRetain();
      v20 = a4;
      v21 = a6;
      v22 = 0;
      do
      {
        v23 = *(_QWORD *)(v50 + 8 * v22++ + 32);
        swift_retain();
        sub_2142292C0(v23, a2, a3, v20, v17, v21);
        swift_release();
      }
      while (v19 != v22);
      swift_bridgeObjectRelease();
      return sub_2142314A0((uint64_t)v49);
    case 1uLL:
      v50 = *(_QWORD *)(a1 + 24);
      v24 = *(_QWORD *)(v50 + 16);
      if (v24)
      {
        swift_bridgeObjectRetain();
        v25 = a4;
        v26 = a6;
        v27 = 0;
        do
        {
          v28 = *(_QWORD *)(v50 + 8 * v27++ + 32);
          swift_retain();
          sub_2142292C0(v28, a2, a3, v25, v17, v26);
          swift_release();
        }
        while (v24 != v27);
        return swift_bridgeObjectRelease();
      }
      return result;
    case 2uLL:
      sub_2141FE108((_QWORD *)((a1 & 0xFFFFFFFFFFFFFFFLL) + 16), (uint64_t)v53);
      v50 = v53[1];
      v29 = *(_QWORD *)(v53[1] + 16);
      if (v29)
      {
        swift_bridgeObjectRetain();
        v30 = a4;
        v31 = a6;
        v32 = 0;
        do
        {
          v33 = *(_QWORD *)(v50 + 8 * v32++ + 32);
          swift_retain();
          sub_2142292C0(v33, a2, a3, v30, v17, v31);
          swift_release();
        }
        while (v29 != v32);
        swift_bridgeObjectRelease();
      }
      return sub_2141FE470((uint64_t)v53);
    case 0xBuLL:
      v47 = a3 + 16;
      v48 = a2;
      memcpy(v52, (const void *)((a1 & 0xFFFFFFFFFFFFFFFLL) + 16), 0x120uLL);
      swift_beginAccess();
      if (__OFADD__(*v15, 1))
      {
        __break(1u);
        goto LABEL_29;
      }
      ++*v15;
      v49 = (_QWORD *)(a2 + 16);
      v50 = v52[34];
      v34 = *(_QWORD *)(v52[34] + 16);
      if (v34)
      {
        v46 = (uint64_t *)(a4 + 16);
        sub_21422F5A0((uint64_t)v52);
        swift_bridgeObjectRetain();
        v35 = a4;
        v36 = a6;
        v37 = 0;
        v38 = v48;
        do
        {
          v39 = *(_QWORD *)(v50 + 8 * v37++ + 32);
          swift_retain();
          sub_2142292C0(v39, v38, a3, v35, a5, v36);
          swift_release();
        }
        while (v34 != v37);
        swift_bridgeObjectRelease();
        v16 = v46;
      }
      else
      {
        sub_21422F5A0((uint64_t)v52);
      }
      v41 = v49;
      swift_beginAccess();
      if (*v41 == 1)
      {
        memcpy(v51, v52, sizeof(v51));
        nullsub_1(v51, v42);
        sub_2141E801C((uint64_t)v51, (uint64_t)v53, &qword_253F13410);
        swift_beginAccess();
        v43 = *v16;
        sub_21422F5A0((uint64_t)v52);
        swift_bridgeObjectRetain();
        sub_214229830((uint64_t)v53, v43, 0, a5);
        swift_bridgeObjectRelease();
        sub_21422F6C8((uint64_t)v52);
        swift_beginAccess();
        v44 = swift_bridgeObjectRetain();
        sub_2143EAFB4(v44);
        swift_bridgeObjectRelease();
        swift_beginAccess();
        *v16 = MEMORY[0x24BEE4AF8];
        swift_bridgeObjectRelease();
      }
      sub_21422F6C8((uint64_t)v52);
      result = swift_beginAccess();
      if (__OFSUB__(*v41, 1))
      {
LABEL_29:
        __break(1u);
        JUMPOUT(0x2142297FCLL);
      }
      --*v41;
      return result;
    case 0xCuLL:
      memcpy(v53, (const void *)((a1 & 0xFFFFFFFFFFFFFFFLL) + 16), 0x260uLL);
      swift_beginAccess();
      v40 = *v15;
      swift_beginAccess();
      swift_beginAccess();
      swift_beginAccess();
      sub_2142302F8((uint64_t)v53);
      sub_21422B77C(v53, v40, a5, (char **)(a4 + 16), a6 + 16);
      swift_endAccess();
      swift_endAccess();
      swift_endAccess();
      return sub_2142305C0((uint64_t)v53);
    default:
      return result;
  }
}

uint64_t sub_214229830(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  int v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD *k;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  unint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char v94;
  char v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  char v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t *v103;
  _QWORD *v104;
  char *v105;
  uint64_t i;
  char *v107;
  unint64_t v108;
  unint64_t v109;
  int v110;
  uint64_t v111;
  int v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  _QWORD *v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t *v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  int64_t v130;
  int64_t v131;
  char *v132;
  uint64_t v133;
  BOOL v134;
  int64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  int64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  char v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t *v164;
  _QWORD *v165;
  uint64_t v166;
  char v167;
  unint64_t v168;
  unint64_t v169;
  char v170;
  char v171;
  uint64_t v172;
  uint64_t v173;
  _QWORD *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  _QWORD *v179;
  uint64_t ObjCClassFromMetadata;
  void *v181;
  id v182;
  uint64_t v183;
  char v184;
  uint64_t v185;
  _QWORD *v186;
  uint64_t v187;
  char v188;
  uint64_t v189;
  int v190;
  unsigned __int8 *v191;
  unsigned __int8 *v192;
  uint64_t v193;
  unsigned __int8 v194;
  unint64_t v195;
  char v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  int v200;
  int v201;
  _QWORD *v202;
  _QWORD *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  unint64_t v208;
  uint64_t *v209;
  uint64_t v210;
  uint64_t v211;
  char v212;
  uint64_t v213;
  uint64_t v214;
  char v215;
  char v216;
  uint64_t v217;
  _QWORD *v218;
  char v219;
  char v220;
  char v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t **v231;
  char *v232;
  int64_t v233;
  uint64_t v234;
  char *v235;
  uint64_t v236;
  int64_t v237;
  unint64_t v238;
  unint64_t v239;
  char *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  char v244;
  _QWORD *v245;
  uint64_t *v246;
  uint64_t v247;
  uint64_t v248;
  int v249;
  unint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  unint64_t v255;
  uint64_t *v256;
  uint64_t v257;
  uint64_t v258;
  unint64_t v259;
  unint64_t v260;
  char v261;
  char v262;
  _QWORD *v263;
  uint64_t v264;
  uint64_t v265;
  unint64_t v266;
  uint64_t v267;
  uint64_t v268;
  int64_t v269;
  uint64_t v270;
  uint64_t v271;
  int64_t j;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  unint64_t v281;
  unint64_t v282;
  _QWORD *v283;
  uint64_t v284;
  unint64_t v285;
  uint64_t *v286;
  uint64_t v287;
  uint64_t v288;
  char v289;
  char v290;
  unint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  char v295;
  uint64_t result;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t *v301;
  uint64_t v302;
  uint64_t v303;
  unint64_t v304;
  char *v305;
  uint64_t v306;
  char *v307;
  unint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  unint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  char *v323;
  uint64_t v324;
  uint64_t v325;
  char *v326;
  uint64_t v327;
  char *v328;
  _QWORD *v329;
  uint64_t v330;
  uint64_t v331;
  unint64_t v332;
  uint64_t v333;
  uint64_t v334;
  __int128 v335;
  uint64_t v336;
  _QWORD *v337;
  _QWORD *v338;
  _QWORD v339[5];
  unsigned __int8 v340;
  _QWORD v341[5];
  char v342;
  _QWORD v343[5];
  char v344;
  _BYTE v345[288];
  _BYTE v346[288];
  _QWORD v347[36];
  _BYTE v348[152];
  uint64_t v349;
  __int128 v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  _QWORD v354[76];
  _BYTE v355[304];
  CGRect v356;
  CGRect v357;

  v318 = a4;
  sub_2141E801C(a1, (uint64_t)v345, &qword_253F13410);
  sub_2141E801C((uint64_t)v345, (uint64_t)v355, &qword_253F13410);
  v7 = sub_2144242C0();
  MEMORY[0x24BDAC7A8](v7);
  v305 = (char *)&v297 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v315 = sub_2141D8BF8(&qword_253F134A8);
  v306 = *(_QWORD *)(v315 - 8);
  v9 = MEMORY[0x24BDAC7A8](v315);
  v11 = (char *)&v297 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x24BDAC7A8](v9);
  v338 = (uint64_t *)((char *)&v297 - v13);
  v14 = MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v297 - v15;
  v17 = MEMORY[0x24BDAC7A8](v14);
  v299 = (uint64_t)&v297 - v18;
  v19 = MEMORY[0x24BDAC7A8](v17);
  v311 = (uint64_t)&v297 - v20;
  v21 = MEMORY[0x24BDAC7A8](v19);
  v310 = (uint64_t)&v297 - v22;
  v23 = MEMORY[0x24BDAC7A8](v21);
  v337 = (uint64_t *)((char *)&v297 - v24);
  v25 = MEMORY[0x24BDAC7A8](v23);
  v336 = (uint64_t)&v297 - v26;
  v27 = MEMORY[0x24BDAC7A8](v25);
  v323 = (char *)&v297 - v28;
  v29 = MEMORY[0x24BDAC7A8](v27);
  v31 = (char *)&v297 - v30;
  MEMORY[0x24BDAC7A8](v29);
  v316 = (uint64_t)&v297 - v32;
  v298 = a1;
  sub_2141E801C(a1, (uint64_t)v346, &qword_253F13410);
  v33 = sub_2142302E0((uint64_t)v346);
  v322 = a2;
  if (v33 == 1)
  {
    v34 = *(_QWORD *)(a2 + 16);
    goto LABEL_3;
  }
  memcpy(v347, v346, sizeof(v347));
  if ((a3 & 1) != 0)
  {
    v34 = *(_QWORD *)(a2 + 16);
    if (v34 < 2)
    {
LABEL_3:
      if (!v34)
        return MEMORY[0x24BEE4AF8];
      v327 = a2 + 32;
      swift_bridgeObjectRetain();
      v35 = 0;
      v324 = 0;
      k = (_QWORD *)MEMORY[0x24BEE4AF8];
      v328 = v11;
      v325 = v34;
      v326 = v16;
      do
      {
        v336 = v35;
        v337 = k;
        memcpy(v354, (const void *)(v327 + 608 * v35), sizeof(v354));
        v330 = v354[12];
        v331 = v354[11];
        v329 = (_QWORD *)v354[13];
        v37 = v354[14];
        v38 = v354[0];
        v39 = v354[4];
        v40 = v354[3];
        v335 = *(_OWORD *)&v354[1];
        sub_2142302F8((uint64_t)v354);
        v41 = v318;
        v42 = sub_21422D750((uint64_t)v354, v318);
        v44 = v43;
        v46 = v45;
        v48 = v47;
        v349 = v38;
        v350 = v335;
        v351 = v40;
        v352 = v39;
        v353 = 0;
        sub_21423057C();
        LODWORD(v332) = v46;
        v333 = v44;
        v334 = v42;
        *(_QWORD *)&v335 = v48;
        sub_2144248B4();
        if (v37)
        {
          v49 = v330;
          v50 = v329 & 1;
          v51 = v331;
          sub_2141DD130(v331, v330, v329 & 1);
          swift_bridgeObjectRetain();
        }
        else
        {
          v52 = v354[35];
          swift_bridgeObjectRetain();
          v53 = v324;
          v54 = sub_214230194(v52, v41);
          v324 = v53;
          swift_bridgeObjectRelease();
          v55 = *(_QWORD *)(v54 + 16);
          v57 = v330;
          v56 = v331;
          v58 = (char)v329;
          v59 = 0;
          if (v55)
          {
            v60 = (uint64_t *)(v54 + 56);
            while (1)
            {
              v61 = *v60;
              v60 += 4;
              if (v61)
                break;
              if (v55 == ++v59)
                goto LABEL_13;
            }
          }
          if (v59 == v55)
          {
LABEL_13:
            swift_bridgeObjectRelease();
            sub_21422F7F0(v56, v57, v58, 0);
            v51 = 0;
            v50 = 0;
            v49 = 0xE000000000000000;
          }
          else
          {
            v62 = sub_2142BFFA8(8236, 0xE200000000000000, 0, MEMORY[0x24BEE4AF8], v54, v59);
            v49 = v63;
            v65 = v64;
            swift_bridgeObjectRelease();
            v50 = v65 & 1;
            sub_21422F7F0(v56, v57, v58, 0);
            v51 = v62;
          }
        }
        v66 = v354[6];
        v67 = (uint64_t)v326;
        v68 = v338;
        sub_2144240EC();
        sub_2141ED0BC(v51, v49, v50);
        swift_bridgeObjectRelease();
        sub_2141E0750((uint64_t)v68, &qword_253F134A8);
        if (v66)
        {
          swift_bridgeObjectRetain();
          v69 = (uint64_t)v323;
          sub_2144240F8();
          swift_bridgeObjectRelease();
          sub_2141E0750(v67, &qword_253F134A8);
          sub_2141E801C(v69, v67, &qword_253F134A8);
        }
        v70 = (uint64_t)v328;
        sub_2141E070C(v67, (uint64_t)v328, &qword_253F134A8);
        k = v337;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v72 = v336;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          k = (_QWORD *)sub_2142259F8(0, k[2] + 1, 1, k);
        v73 = v325;
        v75 = k[2];
        v74 = k[3];
        if (v75 >= v74 >> 1)
          k = (_QWORD *)sub_2142259F8(v74 > 1, v75 + 1, 1, k);
        v35 = v72 + 1;
        k[2] = v75 + 1;
        sub_2141E801C(v70, (uint64_t)k+ ((*(unsigned __int8 *)(v306 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v306 + 80))+ *(_QWORD *)(v306 + 72) * v75, &qword_253F134A8);
        sub_2141ED0BC(v334, v333, v332 & 1);
        swift_bridgeObjectRelease();
        sub_2142305C0((uint64_t)v354);
        sub_2141E0750(v67, &qword_253F134A8);
      }
      while (v35 != v73);
      swift_bridgeObjectRelease();
      return (uint64_t)k;
    }
    x = *(double *)&v347[1];
    y = *(double *)&v347[2];
    width = *(double *)&v347[3];
    height = *(double *)&v347[4];
    sub_214231094(v298, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_214231118);
    swift_bridgeObjectRetain();
    v80 = a2 + 64;
    do
    {
      v356.origin.x = x;
      v356.origin.y = y;
      v356.size.width = width;
      v356.size.height = height;
      v357 = CGRectUnion(v356, *(CGRect *)(v80 - 24));
      x = v357.origin.x;
      y = v357.origin.y;
      width = v357.size.width;
      height = v357.size.height;
      v80 += 608;
      --v34;
    }
    while (v34);
    swift_bridgeObjectRelease();
  }
  else
  {
    x = *(double *)&v347[1];
    y = *(double *)&v347[2];
    width = *(double *)&v347[3];
    height = *(double *)&v347[4];
    sub_2141E801C((uint64_t)v355, (uint64_t)v354, &qword_253F13410);
    sub_21422F5A0((uint64_t)v354);
  }
  v81 = v347[7];
  v354[0] = v347[0];
  *(CGFloat *)&v354[1] = x;
  *(CGFloat *)&v354[2] = y;
  *(CGFloat *)&v354[3] = width;
  *(CGFloat *)&v354[4] = height;
  v354[5] = 0;
  v82 = v347[8];
  v83 = v347[9];
  v84 = v347[10];
  if (v347[10])
  {
    v85 = v347[9] & 1;
    v86 = v347[7];
    v87 = v347[8];
  }
  else
  {
    sub_2141E801C((uint64_t)&v347[15], (uint64_t)v348, &qword_253F13428);
    v88 = sub_21422BE94((uint64_t)v348, v318);
    if (v91)
      v86 = v88;
    else
      v86 = 0;
    if (v91)
      v87 = v89;
    else
      v87 = 0xE000000000000000;
    if (v91)
      v85 = v90 & 1;
    else
      v85 = 0;
  }
  sub_2141EF2B4(v81, v82, v83, v84);
  sub_21423057C();
  sub_2144248B4();
  sub_2141ED0BC(v86, v87, v85);
  swift_bridgeObjectRelease();
  v92 = v347[11];
  v93 = v347[12];
  v94 = v347[13];
  k = (_QWORD *)v347[14];
  if (v347[14])
  {
    v95 = v347[13] & 1;
    v96 = (char *)v347[11];
    v97 = v347[12];
  }
  else
  {
    v96 = sub_21422DC30(v322, v318);
    v97 = v98;
    v95 = v99 & 1;
  }
  sub_2141EF2B4(v92, v93, v94, (uint64_t)k);
  v100 = v316;
  sub_2144240EC();
  sub_2141ED0BC((uint64_t)v96, v97, v95);
  swift_bridgeObjectRelease();
  sub_2141E0750((uint64_t)v31, &qword_253F134A8);
  v101 = v347[6];
  if (v347[6])
  {
    swift_bridgeObjectRetain();
    k = v323;
    sub_2144240F8();
    swift_bridgeObjectRelease();
    sub_2141E0750(v100, &qword_253F134A8);
    sub_2141E801C((uint64_t)k, v100, &qword_253F134A8);
  }
  v102 = v322;
  v103 = *(uint64_t **)(v322 + 16);
  if ((unint64_t)v103 <= 9)
  {
    v104 = sub_214225CB0(0, *(_QWORD *)(v322 + 16), 0, MEMORY[0x24BEE4AF8]);
    v330 = (uint64_t)v103;
    if (v103)
    {
      v338 = &v354[16];
      swift_bridgeObjectRetain();
      v105 = (char *)v103 - 1;
      for (i = 32; ; i += 608)
      {
        memcpy(v354, (const void *)(v102 + i), sizeof(v354));
        v107 = (char *)v354[15];
        sub_2141E801C((uint64_t)&v354[55], (uint64_t)&v349, &qword_253F13428);
        if (sub_21422C64C(&v349) == 1)
        {
          sub_2142302F8((uint64_t)v354);
          swift_bridgeObjectRetain();
        }
        else
        {
          sub_21422F2B0((uint64_t)&v354[55], (uint64_t (*)(void))sub_21420B7DC);
          sub_21422F2B0((uint64_t)&v354[55], (uint64_t (*)(void))sub_21420B7DC);
          sub_21422F2B0((uint64_t)&v354[55], (uint64_t (*)(void))sub_21420B7DC);
          sub_2142302F8((uint64_t)v354);
          swift_bridgeObjectRetain();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v107 = sub_214224028(0, *((_QWORD *)v107 + 2) + 1, 1, v107);
          v109 = *((_QWORD *)v107 + 2);
          v108 = *((_QWORD *)v107 + 3);
          if (v109 >= v108 >> 1)
            v107 = sub_214224028((char *)(v108 > 1), v109 + 1, 1, v107);
          *((_QWORD *)v107 + 2) = v109 + 1;
          sub_2141EF6B8((uint64_t)&v349, (uint64_t)&v107[152 * v109 + 32]);
          sub_21422F2B0((uint64_t)&v354[55], (uint64_t (*)(void))sub_2141EF5D4);
          sub_21422F2B0((uint64_t)&v354[55], (uint64_t (*)(void))sub_2141EF5D4);
        }
        sub_2141E801C((uint64_t)v338, (uint64_t)v343, &qword_253F13428);
        if (sub_21422C64C(v343) != 1)
        {
          sub_2141EF6B8((uint64_t)v343, (uint64_t)v341);
          v110 = sub_21421C2FC((uint64_t)v341);
          v111 = sub_21421C308((uint64_t)v341);
          if (v110 != 1)
          {
            v112 = *(char *)(v111 + 56);
            if ((v112 & 0x80000000) == 0 && *(unsigned __int8 *)(v111 + 56) < 2u)
            {
              sub_2141EF1B0(*(_QWORD *)(v111 + 40), *(_QWORD *)(v111 + 48), v112);
              sub_2141E801C((uint64_t)v338, (uint64_t)v339, &qword_253F13428);
              sub_21421C318(v339, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21420B7DC);
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                v107 = sub_214224028(0, *((_QWORD *)v107 + 2) + 1, 1, v107);
              v114 = *((_QWORD *)v107 + 2);
              v113 = *((_QWORD *)v107 + 3);
              if (v114 >= v113 >> 1)
                v107 = sub_214224028((char *)(v113 > 1), v114 + 1, 1, v107);
              *((_QWORD *)v107 + 2) = v114 + 1;
              sub_2141EF6B8((uint64_t)v339, (uint64_t)&v107[152 * v114 + 32]);
            }
          }
        }
        v115 = v354[35];
        v117 = v104[2];
        v116 = v104[3];
        swift_bridgeObjectRetain();
        if (v117 >= v116 >> 1)
          v104 = sub_214225CB0((_QWORD *)(v116 > 1), v117 + 1, 1, v104);
        v104[2] = v117 + 1;
        v118 = &v104[2 * v117];
        v118[4] = v107;
        v118[5] = v115;
        sub_2142305C0((uint64_t)v354);
        if (!v105)
          break;
        --v105;
        v102 = v322;
      }
      swift_bridgeObjectRelease();
    }
    v225 = v318;
    swift_bridgeObjectRetain();
    v226 = swift_bridgeObjectRetain();
    v103 = (uint64_t *)sub_214230844(v226, v225);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v227 = swift_bridgeObjectRetain();
    v228 = sub_21439864C(v227);
    swift_bridgeObjectRelease();
    v229 = *(_QWORD *)(v228 + 16);
    swift_bridgeObjectRelease();
    v230 = v103[2];
    swift_bridgeObjectRelease();
    v325 = 0;
    if (v229 == v230)
    {
      v101 = (uint64_t)v104;
      goto LABEL_162;
    }
    k = (_QWORD *)v104[2];
    if (k)
    {
      v354[0] = MEMORY[0x24BEE4AF8];
      swift_bridgeObjectRetain();
      sub_2141D40EC(0, (int64_t)k, 0);
      v101 = v354[0];
      v231 = (uint64_t **)(v104 + 5);
      while (1)
      {
        v232 = (char *)*(v231 - 1);
        v103 = *v231;
        v233 = (*v231)[2];
        v120 = *((_QWORD *)v232 + 2);
        v234 = v120 + v233;
        if (__OFADD__(v120, v233))
          goto LABEL_211;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v235 = (char *)swift_isUniquelyReferenced_nonNull_native();
        if ((_DWORD)v235 && v234 <= *((_QWORD *)v232 + 3) >> 1)
        {
          v122 = v103[2];
          if (!v122)
            goto LABEL_155;
        }
        else
        {
          if (v120 <= v234)
            v237 = v120 + v233;
          else
            v237 = v120;
          v232 = sub_214224028(v235, v237, 1, v232);
          v122 = v103[2];
          if (!v122)
          {
LABEL_155:
            if (v233)
              goto LABEL_212;
            goto LABEL_156;
          }
        }
        v122 = *((_QWORD *)v232 + 2);
        if ((uint64_t)((*((_QWORD *)v232 + 3) >> 1) - v122) < v233)
          goto LABEL_217;
        swift_arrayInitWithCopy();
        if (v233)
        {
          v236 = *((_QWORD *)v232 + 2);
          v134 = __OFADD__(v236, v233);
          v122 = v236 + v233;
          if (v134)
            goto LABEL_218;
          *((_QWORD *)v232 + 2) = v122;
        }
LABEL_156:
        swift_bridgeObjectRelease();
        v354[0] = v101;
        v239 = *(_QWORD *)(v101 + 16);
        v238 = *(_QWORD *)(v101 + 24);
        if (v239 >= v238 >> 1)
        {
          v103 = v354;
          sub_2141D40EC((_QWORD *)(v238 > 1), v239 + 1, 1);
          v101 = v354[0];
        }
        *(_QWORD *)(v101 + 16) = v239 + 1;
        v122 = v101 + 16 * v239;
        *(_QWORD *)(v122 + 32) = v232;
        *(_QWORD *)(v122 + 40) = MEMORY[0x24BEE4AF8];
        v231 += 2;
        k = (_QWORD *)((char *)k - 1);
        if (!k)
        {
          swift_bridgeObjectRelease_n();
          goto LABEL_162;
        }
      }
    }
    swift_bridgeObjectRelease();
    v101 = MEMORY[0x24BEE4AF8];
LABEL_162:
    v120 = v316;
    if (v330)
    {
      k = *(_QWORD **)(v101 + 16);
      v240 = (char *)(v322 + 32);
      swift_bridgeObjectRetain();
      v328 = v240;
      memcpy(v354, v240, sizeof(v354));
      v329 = k;
      if (k)
      {
        v122 = 0;
        v326 = (char *)v101;
        v327 = v101 + 32;
        v241 = 1;
        while (1)
        {
          if (v122 >= *(_QWORD *)(v101 + 16))
            goto LABEL_216;
          v242 = v354[7];
          v243 = v354[8];
          v244 = v354[9];
          v245 = (_QWORD *)v354[10];
          v246 = (uint64_t *)(v327 + 16 * v122);
          v247 = *v246;
          v248 = v246[1];
          sub_2141E070C(v120, (uint64_t)v337, &qword_253F134A8);
          *(_QWORD *)&v335 = v241;
          if (v245)
          {
            v249 = v244 & 1;
            sub_2142302F8((uint64_t)v354);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v334 = v242;
            sub_2141EF2B4(v242, v243, v244, (uint64_t)v245);
            v250 = v243;
          }
          else
          {
            v251 = v318;
            swift_bridgeObjectRetain();
            sub_2142302F8((uint64_t)v354);
            swift_bridgeObjectRetain();
            v331 = v248;
            swift_bridgeObjectRetain();
            v333 = v247;
            v252 = v325;
            v253 = sub_214230194(v247, v251);
            v325 = v252;
            swift_bridgeObjectRelease();
            v254 = *(_QWORD *)(v253 + 16);
            if (v254)
            {
              v255 = 0;
              v256 = (uint64_t *)(v253 + 56);
              v120 = v316;
              while (1)
              {
                v257 = *v256;
                v256 += 4;
                if (v257)
                  break;
                if (v254 == ++v255)
                  goto LABEL_175;
              }
            }
            else
            {
              v255 = 0;
              v120 = v316;
            }
            if (v255 == v254)
            {
LABEL_175:
              swift_bridgeObjectRelease();
              sub_21422F7F0(v242, v243, v244, 0);
              v334 = 0;
              v249 = 0;
              v250 = 0xE000000000000000;
              v245 = (_QWORD *)MEMORY[0x24BEE4AF8];
            }
            else
            {
              v258 = sub_2142BFFA8(8236, 0xE200000000000000, 0, MEMORY[0x24BEE4AF8], v253, v255);
              v260 = v259;
              v262 = v261;
              v245 = v263;
              swift_bridgeObjectRelease();
              sub_21422F7F0(v242, v243, v244, 0);
              v334 = v258;
              v249 = v262 & 1;
              v250 = v260;
              v120 = v316;
            }
            v247 = v333;
            v248 = v331;
          }
          v264 = v354[11];
          v265 = v354[12];
          v266 = v354[14];
          v338 = v245;
          if (!v354[14])
            break;
          v267 = v250;
          LODWORD(v333) = v354[13] & 1;
          v268 = v354[12];
          sub_2141DD130(v354[11], v354[12], v354[13] & 1);
          v332 = v266;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
LABEL_196:
          v292 = (uint64_t)v337;
          v293 = v334;
          v294 = v264;
          v295 = v333;
          k = (_QWORD *)v332;
          sub_2144240E0();
          sub_2142305C0((uint64_t)v354);
          sub_2141ED0BC(v294, v268, v295);
          swift_bridgeObjectRelease();
          sub_2141ED0BC(v293, v267, v249);
          swift_bridgeObjectRelease();
          sub_2141E0750(v292, &qword_253F134A8);
          sub_2141E0750(v120, &qword_253F134A8);
          sub_2141E801C(v336, v120, &qword_253F134A8);
          v103 = (uint64_t *)v335;
          if ((_QWORD)v335 != v330)
          {
            memcpy(v354, &v328[608 * v335], sizeof(v354));
            v241 = v335 + 1;
            v122 = v335;
            v101 = (uint64_t)v326;
            if ((_QWORD *)v335 != v329)
              continue;
          }
          goto LABEL_200;
        }
        v323 = (char *)v354[13];
        v324 = v354[11];
        v269 = *(_QWORD *)(v248 + 16);
        v331 = v248;
        if (v269)
        {
          v320 = v354[12];
          LODWORD(v321) = v249;
          v332 = v250;
          v333 = v247;
          v339[0] = MEMORY[0x24BEE4AF8];
          swift_bridgeObjectRetain();
          sub_2141D40D0(0, v269, 0);
          v270 = v339[0];
          v271 = v248 + 32;
          for (j = v269 - 1; ; --j)
          {
            sub_2141EF6B8(v271, (uint64_t)v341);
            sub_2141EF6B8((uint64_t)v341, (uint64_t)v343);
            nullsub_1(v343, v273);
            sub_2141E801C((uint64_t)v343, (uint64_t)&v349, &qword_253F13428);
            sub_21421C318(v341, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21420B7DC);
            v274 = sub_21422BE94((uint64_t)&v349, v318);
            v276 = v275;
            v278 = v277;
            v280 = v279;
            sub_21421C318(v341, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141EF5D4);
            v339[0] = v270;
            v282 = *(_QWORD *)(v270 + 16);
            v281 = *(_QWORD *)(v270 + 24);
            if (v282 >= v281 >> 1)
            {
              sub_2141D40D0((_QWORD *)(v281 > 1), v282 + 1, 1);
              v270 = v339[0];
            }
            *(_QWORD *)(v270 + 16) = v282 + 1;
            v283 = (_QWORD *)(v270 + 32 * v282);
            v283[4] = v274;
            v283[5] = v276;
            v283[6] = v278;
            v283[7] = v280;
            if (!j)
              break;
            v271 += 152;
          }
          swift_bridgeObjectRelease();
          v120 = v316;
          v250 = v332;
          LOBYTE(v249) = v321;
          v265 = v320;
          v284 = *(_QWORD *)(v270 + 16);
          if (v284)
          {
LABEL_187:
            v285 = 0;
            v286 = (uint64_t *)(v270 + 56);
            while (1)
            {
              v287 = *v286;
              v286 += 4;
              if (v287)
                goto LABEL_193;
              if (v284 == ++v285)
                goto LABEL_194;
            }
          }
        }
        else
        {
          v270 = MEMORY[0x24BEE4AF8];
          v120 = v316;
          v284 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
          if (v284)
            goto LABEL_187;
        }
        v285 = 0;
LABEL_193:
        if (v285 == v284)
        {
LABEL_194:
          v267 = v250;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_21422F7F0(v324, v265, (char)v323, 0);
          v264 = 0;
          LODWORD(v333) = 0;
          v268 = 0xE000000000000000;
          v332 = MEMORY[0x24BEE4AF8];
        }
        else
        {
          v267 = v250;
          v264 = sub_2142BFFA8(8236, 0xE200000000000000, 0, MEMORY[0x24BEE4AF8], v270, v285);
          v268 = v288;
          v290 = v289;
          v332 = v291;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          LODWORD(v333) = v290 & 1;
          sub_21422F7F0(v324, v265, (char)v323, 0);
          v120 = v316;
        }
        goto LABEL_196;
      }
LABEL_200:
      swift_bridgeObjectRelease();
    }
    goto LABEL_201;
  }
  v119 = sub_21424F3A4(v322);
  v120 = v316;
  v301 = *(uint64_t **)(v119 + 16);
  if (!v301)
  {
LABEL_201:
    swift_bridgeObjectRelease();
LABEL_202:
    sub_2141E070C(v120, v299, &qword_253F134A8);
    k = (_QWORD *)sub_2142259F8(0, 1, 1, MEMORY[0x24BEE4AF8]);
    v101 = k[2];
    v122 = k[3];
    v103 = (uint64_t *)(v101 + 1);
    if (v101 >= v122 >> 1)
      goto LABEL_219;
    goto LABEL_203;
  }
  v300 = v119 + 32;
  v303 = v119;
  swift_bridgeObjectRetain();
  v121 = 0;
  v333 = 0;
  while (1)
  {
    v122 = *(_QWORD *)(v303 + 16);
    if (v121 >= v122)
      goto LABEL_213;
    v304 = v121;
    v123 = (uint64_t *)(v300 + 16 * v121);
    v124 = *v123;
    v125 = *(_QWORD *)(v123[1] + 16);
    v317 = v123[1];
    v308 = v125;
    v309 = v124;
    if (v125)
    {
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      v126 = v317;
      k = (_QWORD *)(v125 - 1);
      v127 = 32;
      v103 = (uint64_t *)MEMORY[0x24BEE4AF8];
      while (1)
      {
        memcpy(v354, (const void *)(v126 + v127), sizeof(v354));
        v349 = MEMORY[0x24BEE4B08];
        sub_2142302F8((uint64_t)v354);
        v128 = swift_bridgeObjectRetain();
        v129 = v333;
        v120 = sub_214230C70(v128);
        v333 = v129;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_2142305C0((uint64_t)v354);
        v101 = *(_QWORD *)(v120 + 16);
        v130 = v103[2];
        v131 = v130 + v101;
        if (__OFADD__(v130, v101))
        {
          __break(1u);
LABEL_206:
          __break(1u);
LABEL_207:
          __break(1u);
LABEL_208:
          __break(1u);
LABEL_209:
          __break(1u);
LABEL_210:
          __break(1u);
LABEL_211:
          __break(1u);
LABEL_212:
          __break(1u);
LABEL_213:
          __break(1u);
          goto LABEL_214;
        }
        v132 = (char *)swift_isUniquelyReferenced_nonNull_native();
        if ((_DWORD)v132 && v131 <= (uint64_t)((unint64_t)v103[3] >> 1))
        {
          v122 = *(_QWORD *)(v120 + 16);
          if (v122)
            goto LABEL_80;
        }
        else
        {
          if (v130 <= v131)
            v135 = v130 + v101;
          else
            v135 = v130;
          v103 = (uint64_t *)sub_214224028(v132, v135, 1, (char *)v103);
          v122 = *(_QWORD *)(v120 + 16);
          if (v122)
          {
LABEL_80:
            v122 = v103[2];
            if ((uint64_t)(((unint64_t)v103[3] >> 1) - v122) < v101)
              goto LABEL_207;
            swift_arrayInitWithCopy();
            if (v101)
            {
              v133 = v103[2];
              v134 = __OFADD__(v133, v101);
              v122 = v133 + v101;
              if (v134)
                goto LABEL_210;
              v103[2] = v122;
            }
            goto LABEL_89;
          }
        }
        if (v101)
          goto LABEL_206;
LABEL_89:
        swift_bridgeObjectRelease();
        if (!k)
        {
          swift_bridgeObjectRelease();
          v120 = v316;
          goto LABEL_93;
        }
        k = (_QWORD *)((char *)k - 1);
        v127 += 608;
        v126 = v317;
      }
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v103 = (uint64_t *)MEMORY[0x24BEE4AF8];
LABEL_93:
    v101 = sub_21424EE2C(v103);
    swift_bridgeObjectRelease();
    v136 = *(_QWORD *)(v101 + 16);
    if (v136)
      break;
    swift_bridgeObjectRelease();
LABEL_72:
    v103 = (uint64_t *)(v304 + 1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v121 = (unint64_t)v103;
    if (v103 == v301)
    {
      swift_bridgeObjectRelease_n();
      goto LABEL_202;
    }
  }
  v313 = *(_QWORD *)(v303 + 16);
  v314 = v101 + 32;
  v307 = (char *)(v317 + 625);
  v302 = v101;
  swift_bridgeObjectRetain();
  v137 = 0;
  v312 = v136;
  while (1)
  {
    v138 = (uint64_t *)(v314 + 72 * v137);
    v140 = *v138;
    v139 = v138[1];
    v141 = v138[2];
    v142 = v138[3];
    v143 = v138[4];
    v144 = v138[5];
    v145 = v138[6];
    v146 = v138[8];
    v323 = (char *)v138[7];
    v324 = v137;
    v331 = v140;
    v332 = v146;
    v325 = v142;
    v326 = (char *)v139;
    v321 = v143;
    v322 = v141;
    v319 = v145;
    v320 = v144;
    if (v136 != 1)
      break;
    sub_21421C1D8(v140, v139, v141, v142, v143, v144, v145);
    swift_bridgeObjectRetain();
    v330 = 0;
    LODWORD(v327) = 0;
    v328 = (char *)0xE000000000000000;
    v329 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v147 = *(_QWORD *)(v146 + 16);
    if (v147)
      goto LABEL_99;
LABEL_113:
    v103 = (uint64_t *)MEMORY[0x24BEE4AF8];
LABEL_114:
    v189 = v333;
    v120 = sub_214231334((uint64_t)v103);
    v333 = v189;
    swift_bridgeObjectRelease();
    if (v313 < 2)
    {
      sub_2141ED0BC(v330, (uint64_t)v328, v327);
      swift_bridgeObjectRelease();
      sub_21421C24C(v331, (uint64_t)v326, v322, v325, v321, v320, v319);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v120 = v316;
    }
    else
    {
      if (!*(_QWORD *)(v332 + 16))
      {
        result = swift_bridgeObjectRelease();
        __break(1u);
        return result;
      }
      sub_2141EF6B8(v332 + 32, (uint64_t)&v349);
      sub_21421C318(&v349, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21420B7DC);
      swift_bridgeObjectRelease();
      sub_2141EF6B8((uint64_t)&v349, (uint64_t)v354);
      v190 = sub_21421C2FC((uint64_t)v354);
      v191 = (unsigned __int8 *)sub_21421C308((uint64_t)v354);
      v192 = v191;
      if (v190 == 1)
      {
        sub_21421C318(&v349, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141EF5D4);
        v101 = *v192;
      }
      else
      {
        v101 = *v191;
        sub_21421C318(&v349, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141EF5D4);
      }
      v193 = v318;
      if (*(_QWORD *)(v318 + 16) && (v194 = v101, v101 = v318, v195 = sub_214336B74(v194), (v196 & 1) != 0))
      {
        sub_21422F3FC(*(_QWORD *)(v193 + 56) + 48 * v195, (uint64_t)v341);
      }
      else
      {
        memset(v341, 0, sizeof(v341));
        v342 = -1;
      }
      v103 = &qword_253F146B8;
      sub_2141E070C((uint64_t)v341, (uint64_t)v339, &qword_253F146B8);
      if (v340 == 255)
      {
        memset(v343, 0, sizeof(v343));
        v344 = 3;
        sub_2141E0750((uint64_t)v339, &qword_253F146B8);
      }
      else
      {
        sub_21422F3C0((uint64_t)v339, (uint64_t)v343);
      }
      sub_2141E0750((uint64_t)v341, &qword_253F146B8);
      v122 = v308;
      if (!v308)
        goto LABEL_208;
      v122 = *(_QWORD *)(v317 + 16);
      if (!v122)
        goto LABEL_209;
      v197 = sub_21422CC48((double *)v120, *v307);
      v199 = v198;
      v201 = v200;
      v203 = v202;
      swift_bridgeObjectRelease();
      sub_2141E070C(v316, v311, &qword_253F134A8);
      v204 = v318;
      swift_bridgeObjectRetain();
      v205 = v333;
      v206 = sub_214230194(v309, v204);
      v333 = v205;
      swift_bridgeObjectRelease();
      v207 = *(_QWORD *)(v206 + 16);
      v337 = (_QWORD *)v199;
      v338 = v203;
      LODWORD(v336) = v201;
      v208 = 0;
      if (v207)
      {
        v209 = (uint64_t *)(v206 + 56);
        while (1)
        {
          v210 = *v209;
          v209 += 4;
          if (v210)
            break;
          if (v207 == ++v208)
            goto LABEL_134;
        }
      }
      if (v208 == v207)
      {
LABEL_134:
        swift_bridgeObjectRelease();
        v211 = 0;
        v212 = 0;
        v213 = 0xE000000000000000;
      }
      else
      {
        v211 = sub_2142BFFA8(8236, 0xE200000000000000, 0, MEMORY[0x24BEE4AF8], v206, v208);
        v213 = v214;
        v216 = v215;
        swift_bridgeObjectRelease();
        v212 = v216 & 1;
      }
      v217 = sub_2144247E8();
      k = v218;
      v220 = v219 & 1;
      sub_2141ED0BC(v211, v213, v212);
      swift_bridgeObjectRelease();
      v221 = v336 & 1;
      v222 = v197;
      v223 = (uint64_t)v337;
      v224 = v311;
      sub_2144240E0();
      sub_2141ED0BC(v217, (uint64_t)k, v220);
      swift_bridgeObjectRelease();
      sub_2141ED0BC(v222, v223, v221);
      swift_bridgeObjectRelease();
      sub_2141ED0BC(v330, (uint64_t)v328, v327);
      swift_bridgeObjectRelease();
      sub_21421C24C(v331, (uint64_t)v326, v322, v325, v321, v320, v319);
      sub_2141E0750(v224, &qword_253F134A8);
      sub_21422F27C((uint64_t)v343);
      v120 = v316;
      sub_2141E0750(v316, &qword_253F134A8);
      sub_2141E801C(v310, v120, &qword_253F134A8);
    }
    v136 = v312;
    v137 = v324 + 1;
    if (v324 + 1 == v312)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v101 = v302;
      goto LABEL_72;
    }
  }
  if (v145 < 0)
  {
    v174 = (_QWORD *)(v141 & 1);
    v175 = v145 & 1;
    v176 = v139;
    v177 = v143;
    v178 = v144;
    sub_21421C1D8(v331, v139, v141, v142, v143, v144, v145);
    swift_bridgeObjectRetain();
    v338 = v174;
    sub_2141DD130(v331, v176, (char)v174);
    swift_bridgeObjectRetain();
    v337 = (_QWORD *)v175;
    sub_2141DD130(v177, v178, v175);
    swift_bridgeObjectRetain();
    sub_2144242B4();
    sub_2144242A8();
    LOBYTE(v354[0]) = (_BYTE)v174;
    sub_214424290();
    sub_2144242A8();
    LOBYTE(v354[0]) = v175;
    sub_214424290();
    sub_2144242A8();
    sub_2144242D8();
    k = v179;
    type metadata accessor for FindClass();
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    v181 = (void *)objc_opt_self();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v182 = objc_msgSend(v181, sel_bundleForClass_, ObjCClassFromMetadata);
    v173 = sub_21442480C();
    v172 = v183;
    v170 = v184 & 1;
    sub_2141ED0BC(v177, v178, (char)v337);
    swift_bridgeObjectRelease();
    sub_2141ED0BC(v331, (uint64_t)v326, (char)v338);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    v170 = v141 & 1;
    v171 = v141 & 1;
    v172 = v139;
    sub_21421C1D8(v140, v139, v141, v142, v143, v144, v145);
    swift_bridgeObjectRetain();
    sub_2141DD130(v140, v172, v171);
    swift_bridgeObjectRetain();
    v173 = v140;
  }
  v185 = sub_2144247E8();
  v329 = v186;
  v330 = v185;
  v328 = (char *)v187;
  LODWORD(v327) = v188 & 1;
  sub_2141ED0BC(v173, v172, v170);
  swift_bridgeObjectRelease();
  v146 = v332;
  v147 = *(_QWORD *)(v332 + 16);
  if (!v147)
    goto LABEL_113;
LABEL_99:
  v341[0] = MEMORY[0x24BEE4AF8];
  sub_2141D3AA0(0, v147, 0);
  v103 = (uint64_t *)v341[0];
  v148 = v146 + 32;
  for (k = (_QWORD *)(v147 - 1); ; k = (_QWORD *)((char *)k - 1))
  {
    sub_2141EF6B8(v148, (uint64_t)&v349);
    sub_2141EF6B8((uint64_t)&v349, (uint64_t)v354);
    if (sub_21421C2FC((uint64_t)v354) == 1)
    {
      v149 = sub_21421C308((uint64_t)v354);
      v150 = *(_QWORD *)(v149 + 8);
      v151 = *(_QWORD *)(v149 + 16);
      v101 = *(_QWORD *)(v149 + 32);
      v152 = *(_QWORD *)(v149 + 40);
      v153 = *(_QWORD *)(v149 + 48);
      v120 = *(unsigned __int8 *)(v149 + 56);
      LODWORD(v338) = *(unsigned __int8 *)(v149 + 24);
      sub_2141DD130(v150, v151, (char)v338);
      v337 = (_QWORD *)v101;
      swift_bridgeObjectRetain();
      v154 = v152;
      v155 = v153;
      v156 = v120;
    }
    else
    {
      v157 = sub_21421C308((uint64_t)v354);
      v158 = *(_QWORD *)(v157 + 8);
      v159 = *(_QWORD *)(v157 + 16);
      LODWORD(v338) = *(unsigned __int8 *)(v157 + 24);
      v160 = *(_QWORD *)(v157 + 32);
      v336 = v158;
      v337 = (_QWORD *)v160;
      v153 = *(_QWORD *)(v157 + 48);
      v334 = *(_QWORD *)(v157 + 40);
      *(_QWORD *)&v335 = v159;
      v120 = *(unsigned __int8 *)(v157 + 56);
      sub_2141EF6B8((uint64_t)&v349, (uint64_t)v343);
      v161 = sub_21421C308((uint64_t)v343);
      v101 = *(_QWORD *)(v161 + 32);
      v162 = *(_QWORD *)(v161 + 40);
      v163 = *(_QWORD *)(v161 + 48);
      v164 = v103;
      v165 = k;
      v166 = v148;
      v167 = *(_BYTE *)(v161 + 56);
      sub_2141DD130(*(_QWORD *)(v161 + 8), *(_QWORD *)(v161 + 16), *(_BYTE *)(v161 + 24));
      swift_bridgeObjectRetain();
      v154 = v162;
      v150 = v336;
      v155 = v163;
      v156 = v167;
      v148 = v166;
      k = v165;
      v103 = v164;
      v152 = v334;
      v151 = v335;
    }
    sub_2141DD140(v154, v155, v156);
    if ((v120 & 0x80) != 0)
      break;
    if ((_DWORD)v120)
      goto LABEL_215;
    sub_21421C318(&v349, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21420B7DC);
    sub_21421C318(&v349, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21420B7DC);
    sub_2141DD140(v152, v153, 0);
    sub_2141ED0BC(v150, v151, (char)v338);
    swift_bridgeObjectRelease();
    sub_2141EF1B0(v152, v153, 0);
    sub_21421C318(&v349, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141EF5D4);
    sub_21421C318(&v349, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141EF5D4);
    v341[0] = v103;
    v169 = v103[2];
    v168 = v103[3];
    if (v169 >= v168 >> 1)
    {
      sub_2141D3AA0((char *)(v168 > 1), v169 + 1, 1);
      v103 = (uint64_t *)v341[0];
    }
    v103[2] = v169 + 1;
    v103[v169 + 4] = v152;
    if (!k)
      goto LABEL_114;
    v148 += 152;
  }
LABEL_214:
  __break(1u);
LABEL_215:
  __break(1u);
LABEL_216:
  __break(1u);
LABEL_217:
  __break(1u);
LABEL_218:
  __break(1u);
LABEL_219:
  k = (_QWORD *)sub_2142259F8(v122 > 1, (int64_t)v103, 1, k);
LABEL_203:
  k[2] = v103;
  sub_2141E801C(v299, (uint64_t)k+ ((*(unsigned __int8 *)(v306 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v306 + 80))+ *(_QWORD *)(v306 + 72) * v101, &qword_253F134A8);
  sub_214231094(v298, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_214230EF4);
  sub_2141E0750(v120, &qword_253F134A8);
  return (uint64_t)k;
}

size_t sub_21422B77C(uint64_t *a1, uint64_t a2, uint64_t a3, char **a4, uint64_t a5)
{
  char *v7;
  unint64_t v8;
  unint64_t v9;
  size_t result;
  uint64_t v13;
  size_t v14;
  char v15;
  char v16;
  char *v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  _BOOL8 v21;
  uint64_t v22;
  char v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  _QWORD v59[38];
  _OWORD v60[18];
  char *v61;
  uint64_t __dst;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  _OWORD v71[9];
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77[2];
  __int128 v78;
  uint64_t v79;
  uint64_t v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD v99[19];
  _QWORD v100[19];
  _BYTE v101[152];
  _QWORD v102[19];
  _QWORD v103[19];

  if (a2 >= 1)
  {
    v7 = *a4;
    sub_2142302F8((uint64_t)a1);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v7 = sub_214225B94(0, *((_QWORD *)v7 + 2) + 1, 1, v7);
    v9 = *((_QWORD *)v7 + 2);
    v8 = *((_QWORD *)v7 + 3);
    if (v9 >= v8 >> 1)
      v7 = sub_214225B94((char *)(v8 > 1), v9 + 1, 1, v7);
    *((_QWORD *)v7 + 2) = v9 + 1;
    result = (size_t)memcpy(&v7[608 * v9 + 32], a1, 0x260uLL);
    *a4 = v7;
    return result;
  }
  sub_2141E801C((uint64_t)(a1 + 36), (uint64_t)v101, &qword_253F13428);
  sub_2141E801C((uint64_t)v101, (uint64_t)v102, &qword_253F13428);
  if (sub_21422C64C(v102) == 1)
  {
    sub_2142314DC(v60);
    sub_2141E801C((uint64_t)v60, (uint64_t)&__dst, &qword_253F13410);
    sub_2141D8BF8(&qword_253F13590);
    v13 = swift_allocObject();
    *(_OWORD *)(v13 + 16) = xmmword_214426EF0;
    memcpy((void *)(v13 + 32), a1, 0x260uLL);
    sub_2142302F8((uint64_t)a1);
    v14 = sub_214229830((uint64_t)&__dst, v13, 0, a3);
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    return sub_2143EAFB4(v14);
  }
  sub_2141EF6B8((uint64_t)v102, (uint64_t)v103);
  if (!*(_QWORD *)(*(_QWORD *)a5 + 16))
  {
    sub_2141E801C((uint64_t)v101, (uint64_t)&__dst, &qword_253F13428);
    sub_21421C318(&__dst, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21420B7DC);
LABEL_18:
    v26 = *a1;
    v57 = *(_OWORD *)(a1 + 1);
    v27 = a1[3];
    v28 = a1[4];
    v30 = a1[5];
    v29 = a1[6];
    sub_2141EF6B8((uint64_t)v102, (uint64_t)v60);
    nullsub_1(v60, v31);
    __dst = v26;
    v63 = v57;
    v64 = v27;
    v65 = v28;
    *(_QWORD *)&v66 = v30;
    *((_QWORD *)&v66 + 1) = v29;
    v67 = 0u;
    v68 = 0u;
    v69 = 0u;
    v70 = 0u;
    sub_2141E801C((uint64_t)v60, (uint64_t)v71, &qword_253F13428);
    v32 = MEMORY[0x24BEE4AF8];
    v73 = MEMORY[0x24BEE4AF8];
    v74 = 0;
    v33 = *(_QWORD *)(*(_QWORD *)a5 + 16);
    sub_2141D8BF8(&qword_253F13590);
    v34 = swift_allocObject();
    *(_OWORD *)(v34 + 16) = xmmword_214426EF0;
    memcpy((void *)(v34 + 32), a1, 0x260uLL);
    v35 = __dst;
    v36 = v64;
    v37 = v65;
    v56 = v66;
    v58 = v63;
    v54 = v68;
    v55 = v67;
    v52 = v70;
    v53 = v69;
    v50 = v71[1];
    v51 = v71[0];
    v48 = v71[3];
    v49 = v71[2];
    v46 = v71[5];
    v47 = v71[4];
    v44 = v71[7];
    v45 = v71[6];
    v43 = v71[8];
    v38 = v72;
    sub_21422F2B0((uint64_t)v101, (uint64_t (*)(void))sub_21420B7DC);
    sub_2142302F8((uint64_t)a1);
    sub_21422F2B0((uint64_t)v101, (uint64_t (*)(void))sub_21420B7DC);
    swift_bridgeObjectRetain();
    sub_21422F5A0((uint64_t)&__dst);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v59[0] = *(_QWORD *)a5;
    *(_QWORD *)a5 = 0x8000000000000000;
    v77[0] = v33;
    v77[1] = v35;
    v78 = v58;
    v79 = v36;
    v80 = v37;
    v81 = v56;
    v82 = v55;
    v83 = v54;
    v84 = v53;
    v85 = v52;
    v86 = v51;
    v87 = v50;
    v88 = v49;
    v89 = v48;
    v90 = v47;
    v91 = v46;
    v92 = v45;
    v93 = v44;
    v94 = v43;
    v95 = v38;
    v96 = v32;
    v97 = 0;
    v98 = v34;
    sub_2142A3774(v77, v103, isUniquelyReferenced_nonNull_native);
    *(_QWORD *)a5 = v59[0];
    swift_bridgeObjectRelease();
    sub_21422F2B0((uint64_t)v101, (uint64_t (*)(void))sub_2141EF5D4);
    sub_21422F2B0((uint64_t)v101, (uint64_t (*)(void))sub_2141EF5D4);
    return sub_21422F6C8((uint64_t)&__dst);
  }
  sub_2141E801C((uint64_t)v101, (uint64_t)v99, &qword_253F13428);
  sub_2141E801C((uint64_t)v101, (uint64_t)v100, &qword_253F13428);
  sub_21421C318(v100, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21420B7DC);
  sub_21421C318(v99, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21420B7DC);
  sub_214337634((uint64_t)v103);
  if ((v15 & 1) == 0)
  {
    sub_21422F2B0((uint64_t)v101, (uint64_t (*)(void))sub_2141EF5D4);
    goto LABEL_18;
  }
  sub_2142302F8((uint64_t)a1);
  v16 = swift_isUniquelyReferenced_nonNull_native();
  v75 = *(_QWORD *)a5;
  v17 = (char *)v75;
  *(_QWORD *)a5 = 0x8000000000000000;
  sub_2141E801C((uint64_t)v101, (uint64_t)&v76, &qword_253F13428);
  sub_21421C318(&v76, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21420B7DC);
  v19 = sub_214337634((uint64_t)v103);
  v20 = *((_QWORD *)v17 + 2);
  v21 = (v18 & 1) == 0;
  v22 = v20 + v21;
  if (__OFADD__(v20, v21))
  {
    __break(1u);
LABEL_26:
    v17 = sub_214225B94(0, *((_QWORD *)v17 + 2) + 1, 1, v17);
    goto LABEL_22;
  }
  v23 = v18;
  if (*((_QWORD *)v17 + 3) >= v22)
  {
    if ((v16 & 1) != 0)
    {
      if ((v18 & 1) == 0)
        goto LABEL_28;
    }
    else
    {
      sub_2142AA564();
      if ((v23 & 1) == 0)
        goto LABEL_28;
    }
  }
  else
  {
    sub_2142A0DE4(v22, v16);
    v24 = sub_214337634((uint64_t)v103);
    if ((v23 & 1) != (v25 & 1))
    {
LABEL_29:
      result = sub_214425820();
      __break(1u);
      return result;
    }
    v19 = v24;
    if ((v23 & 1) == 0)
    {
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }
  }
  memmove(&__dst, (const void *)(*(_QWORD *)(v75 + 56) + 304 * v19), 0x130uLL);
  nullsub_1(&__dst, v40);
  sub_2141E801C((uint64_t)&__dst, (uint64_t)v60, &qword_253F12178);
  v17 = v61;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    goto LABEL_26;
LABEL_22:
  v42 = *((_QWORD *)v17 + 2);
  v41 = *((_QWORD *)v17 + 3);
  if (v42 >= v41 >> 1)
    v17 = sub_214225B94((char *)(v41 > 1), v42 + 1, 1, v17);
  *((_QWORD *)v17 + 2) = v42 + 1;
  memcpy(&v17[608 * v42 + 32], a1, 0x260uLL);
  v61 = v17;
  sub_214323F54((uint64_t)v60, 1, &v75, v19, v103);
  sub_2141E801C((uint64_t)v60, (uint64_t)v59, &qword_253F12178);
  sub_214231508((uint64_t)v59);
  sub_21422F2B0((uint64_t)v101, (uint64_t (*)(void))sub_2141EF5D4);
  *(_QWORD *)a5 = v75;
  sub_21422F2B0((uint64_t)v101, (uint64_t (*)(void))sub_2141EF5D4);
  return sub_21422F2B0((uint64_t)v101, (uint64_t (*)(void))sub_2141EF5D4);
}

uint64_t sub_21422BE94(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  int v8;
  unsigned __int8 *v9;
  unsigned __int8 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  char v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  unint64_t v34;
  char v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  uint64_t v45;
  char v46;
  uint64_t ObjCClassFromMetadata;
  void *v48;
  id v49;
  uint64_t v51;
  int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _BYTE v69[40];
  unsigned __int8 v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  char v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  char v78;
  _QWORD v79[19];
  _BYTE v80[152];
  _BYTE v81[168];

  v4 = sub_2144242C0();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2141E801C(a1, (uint64_t)v79, &qword_253F13428);
  if (sub_21422C64C(v79) != 1)
  {
    sub_2141EF6B8((uint64_t)v79, (uint64_t)v80);
    sub_2141EF6B8((uint64_t)v80, (uint64_t)v81);
    v8 = sub_21421C2FC((uint64_t)v81);
    v9 = (unsigned __int8 *)sub_21421C308((uint64_t)v81);
    v10 = *v9;
    if (v8 == 1)
    {
      v59 = *v9;
      v11 = *((_QWORD *)v9 + 1);
      v12 = *((_QWORD *)v9 + 2);
      v13 = v9[24];
      v14 = a1;
      v15 = *((_QWORD *)v9 + 4);
      v16 = *((_QWORD *)v9 + 5);
      v60 = a2;
      v61 = v6;
      v17 = *((_QWORD *)v9 + 6);
      v18 = (char)v9[56];
      v19 = *((_QWORD *)v9 + 10);
      v64 = *((_QWORD *)v9 + 11);
      v20 = v9[96];
      v65 = *((_QWORD *)v9 + 13);
      v62 = *((_QWORD *)v9 + 14);
      v63 = *((_QWORD *)v9 + 15);
      v52 = v20;
      v53 = v13;
      v21 = v13 & 1;
      HIDWORD(v51) = v20 & 1;
      v22 = (char)v9[128];
      v58 = v14;
      sub_21422F2B0(v14, (uint64_t (*)(void))sub_21420B7DC);
      v55 = v12;
      v56 = v11;
      sub_2141DD130(v11, v12, v21);
      v57 = v15;
      v24 = v62;
      v23 = v63;
      swift_bridgeObjectRetain();
      v67 = v17;
      v68 = v16;
      v25 = v16;
      v26 = v60;
      LODWORD(v66) = v18;
      sub_2141DD140(v25, v17, v18);
      v54 = v19;
      sub_2141DD130(v19, v64, SBYTE4(v51));
      swift_bridgeObjectRetain();
      sub_2141DD140(v24, v23, v22);
      sub_2144242B4();
      sub_2144242A8();
      if (*(_QWORD *)(v26 + 16) && (v27 = sub_214336B74(v59), (v28 & 1) != 0))
      {
        sub_21422F3FC(*(_QWORD *)(v26 + 56) + 48 * v27, (uint64_t)&v75);
      }
      else
      {
        v77 = 0;
        v75 = 0u;
        v76 = 0u;
        v78 = -1;
      }
      sub_2141E070C((uint64_t)&v75, (uint64_t)v69, &qword_253F146B8);
      if (v70 == 255)
      {
        v73 = 0;
        v71 = 0u;
        v72 = 0u;
        v74 = 3;
        sub_2141E0750((uint64_t)v69, &qword_253F146B8);
        v36 = v66;
        if ((v66 & 0x80000000) == 0)
          goto LABEL_13;
      }
      else
      {
        sub_21422F3C0((uint64_t)v69, (uint64_t)&v71);
        v36 = v66;
        if ((v66 & 0x80000000) == 0)
        {
LABEL_13:
          v37 = v67;
          v38 = v68;
          sub_2141DD14C(v68, v67, v36);
          sub_2143F486C(v38, v37, v36);
          v39 = v38;
          v26 = v60;
          sub_2141EF1B0(v39, v37, v36);
LABEL_20:
          sub_21422F27C((uint64_t)&v71);
          sub_2141E0750((uint64_t)&v75, &qword_253F146B8);
          sub_21442429C();
          swift_bridgeObjectRelease();
          sub_2144242A8();
          if (*(_QWORD *)(v26 + 16) && (v43 = sub_214336B74(v59), (v44 & 1) != 0))
          {
            sub_21422F3FC(*(_QWORD *)(v26 + 56) + 48 * v43, (uint64_t)&v75);
          }
          else
          {
            v77 = 0;
            v75 = 0u;
            v76 = 0u;
            v78 = -1;
          }
          sub_2141E070C((uint64_t)&v75, (uint64_t)v69, &qword_253F146B8);
          if (v70 == 255)
          {
            v73 = 0;
            v71 = 0u;
            v72 = 0u;
            v74 = 3;
            sub_2141E0750((uint64_t)v69, &qword_253F146B8);
            if ((v22 & 0x80000000) == 0)
              goto LABEL_26;
          }
          else
          {
            sub_21422F3C0((uint64_t)v69, (uint64_t)&v71);
            if ((v22 & 0x80000000) == 0)
            {
LABEL_26:
              sub_2141DD14C(v24, v23, v22);
              sub_2143F486C(v24, v23, v22);
              sub_2141EF1B0(v24, v23, v22);
LABEL_32:
              v46 = v52 & 1;
              LODWORD(v61) = v53 & 1;
              sub_21422F27C((uint64_t)&v71);
              sub_2141E0750((uint64_t)&v75, &qword_253F146B8);
              sub_21442429C();
              swift_bridgeObjectRelease();
              sub_2144242A8();
              sub_2144242D8();
              type metadata accessor for FindClass();
              ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
              v48 = (void *)objc_opt_self();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              v49 = objc_msgSend(v48, sel_bundleForClass_, ObjCClassFromMetadata);
              v7 = sub_21442480C();
              sub_2141ED0BC(v54, v64, v46);
              swift_bridgeObjectRelease();
              sub_2141EF1B0(v62, v63, v22);
              sub_2141ED0BC(v56, v55, (char)v61);
              swift_bridgeObjectRelease();
              sub_2141EF1B0(v68, v67, v66);
              sub_21422F2B0(v58, (uint64_t (*)(void))sub_2141EF5D4);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              return v7;
            }
          }
          sub_2143F4C74(v24, v23, v22 & 1);
          goto LABEL_32;
        }
      }
      sub_2143F4C74(v68, v67, v36 & 1);
      goto LABEL_20;
    }
    v29 = *((_QWORD *)v9 + 1);
    v68 = *((_QWORD *)v9 + 2);
    LODWORD(v67) = v9[24];
    v30 = *((_QWORD *)v9 + 4);
    v31 = *((_QWORD *)v9 + 5);
    v32 = *((_QWORD *)v9 + 6);
    v33 = (char)v9[56];
    if (*(_QWORD *)(a2 + 16) && (v34 = sub_214336B74(v10), (v35 & 1) != 0))
    {
      sub_21422F3FC(*(_QWORD *)(a2 + 56) + 48 * v34, (uint64_t)&v75);
    }
    else
    {
      v77 = 0;
      v75 = 0u;
      v76 = 0u;
      v78 = -1;
    }
    sub_2141E070C((uint64_t)&v75, (uint64_t)v69, &qword_253F146B8);
    if (v70 == 255)
    {
      v73 = 0;
      v71 = 0u;
      v72 = 0u;
      v74 = 3;
      sub_21422F2B0(a1, (uint64_t (*)(void))sub_21420B7DC);
      sub_2141DD130(v29, v68, v67);
      swift_bridgeObjectRetain();
      sub_2141DD140(v31, v32, v33);
      sub_2141E0750((uint64_t)v69, &qword_253F146B8);
      v65 = v29;
      v66 = v30;
      if ((v33 & 0x80000000) == 0)
        goto LABEL_17;
    }
    else
    {
      sub_21422F3C0((uint64_t)v69, (uint64_t)&v71);
      sub_21422F2B0(a1, (uint64_t (*)(void))sub_21420B7DC);
      sub_2141DD130(v29, v68, v67);
      swift_bridgeObjectRetain();
      sub_2141DD140(v31, v32, v33);
      v65 = v29;
      v66 = v30;
      if ((v33 & 0x80000000) == 0)
      {
LABEL_17:
        sub_2141DD14C(v31, v32, v33);
        v40 = sub_2143F486C(v31, v32, v33);
        v42 = v41;
        sub_2141EF1B0(v31, v32, v33);
LABEL_29:
        sub_21422F27C((uint64_t)&v71);
        sub_2141E0750((uint64_t)&v75, &qword_253F146B8);
        *(_QWORD *)&v75 = v40;
        *((_QWORD *)&v75 + 1) = v42;
        sub_2141DCE8C();
        v7 = sub_214424818();
        sub_2141ED0BC(v65, v68, v67);
        swift_bridgeObjectRelease();
        sub_2141EF1B0(v31, v32, v33);
        sub_21422F2B0(a1, (uint64_t (*)(void))sub_2141EF5D4);
        return v7;
      }
    }
    v40 = sub_2143F4C74(v31, v32, v33 & 1);
    v42 = v45;
    goto LABEL_29;
  }
  return 0;
}

uint64_t sub_21422C64C(_QWORD *a1)
{
  if ((*a1 >> 3) > 0x80000000)
    return -(*a1 >> 3);
  else
    return 0;
}

uint64_t sub_21422C664(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  char v27;
  char v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE v36[40];
  unsigned __int8 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  char v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  unint64_t v47;
  _BYTE v48[160];

  sub_2141EF6B8(a1, (uint64_t)v48);
  v3 = sub_21421C2FC((uint64_t)v48);
  v4 = sub_21421C308((uint64_t)v48);
  v5 = *(_BYTE *)v4;
  if (v3 == 1)
  {
    v34 = *(_QWORD *)(v4 + 16);
    v35 = *(_QWORD *)(v4 + 8);
    v31 = *(_BYTE *)(v4 + 24);
    v6 = *(_QWORD *)(v4 + 40);
    v7 = *(_QWORD *)(v4 + 48);
    v8 = *(char *)(v4 + 56);
    v32 = *(_QWORD *)(v4 + 88);
    v33 = *(_QWORD *)(v4 + 80);
    v9 = *(_BYTE *)(v4 + 96);
    v10 = *(_QWORD *)(v4 + 112);
    v11 = *(_QWORD *)(v4 + 120);
    v12 = *(char *)(v4 + 128);
    v46 = 0;
    v47 = 0xE000000000000000;
    if (*(_QWORD *)(a2 + 16) && (v13 = sub_214336B74(v5), (v14 & 1) != 0))
    {
      sub_21422F3FC(*(_QWORD *)(a2 + 56) + 48 * v13, (uint64_t)&v42);
    }
    else
    {
      v44 = 0;
      v42 = 0u;
      v43 = 0u;
      v45 = -1;
    }
    sub_2141E070C((uint64_t)&v42, (uint64_t)v36, &qword_253F146B8);
    v29 = v9;
    v23 = v9 & 1;
    if (v37 == 255)
    {
      v40 = 0;
      v38 = 0u;
      v39 = 0u;
      v41 = 3;
      sub_2141DD130(v35, v34, v31 & 1);
      swift_bridgeObjectRetain();
      sub_2141DD140(v6, v7, v8);
      sub_2141DD130(v33, v32, v23);
      swift_bridgeObjectRetain();
      sub_2141DD140(v10, v11, v12);
      sub_2141E0750((uint64_t)v36, &qword_253F146B8);
      v30 = v6;
      if ((v8 & 0x80000000) == 0)
        goto LABEL_11;
    }
    else
    {
      sub_21422F3C0((uint64_t)v36, (uint64_t)&v38);
      sub_2141DD130(v35, v34, v31 & 1);
      swift_bridgeObjectRetain();
      sub_2141DD140(v6, v7, v8);
      sub_2141DD130(v33, v32, v23);
      swift_bridgeObjectRetain();
      sub_2141DD140(v10, v11, v12);
      v30 = v6;
      if ((v8 & 0x80000000) == 0)
      {
LABEL_11:
        sub_2141DD14C(v6, v7, v8);
        sub_2143F486C(v6, v7, v8);
        sub_2141EF1B0(v6, v7, v8);
        goto LABEL_18;
      }
    }
    sub_2143F4C74(v6, v7, v8 & 1);
LABEL_18:
    sub_21422F27C((uint64_t)&v38);
    sub_2141E0750((uint64_t)&v42, &qword_253F146B8);
    sub_214424F20();
    swift_bridgeObjectRelease();
    sub_214424F20();
    if (*(_QWORD *)(a2 + 16))
    {
      v25 = sub_214336B74(v5);
      v26 = v29;
      if ((v27 & 1) != 0)
      {
        sub_21422F3FC(*(_QWORD *)(a2 + 56) + 48 * v25, (uint64_t)&v42);
      }
      else
      {
        v44 = 0;
        v42 = 0u;
        v43 = 0u;
        v45 = -1;
      }
    }
    else
    {
      v44 = 0;
      v42 = 0u;
      v43 = 0u;
      v45 = -1;
      v26 = v29;
    }
    sub_2141E070C((uint64_t)&v42, (uint64_t)v36, &qword_253F146B8);
    if (v37 == 255)
    {
      v40 = 0;
      v38 = 0u;
      v39 = 0u;
      v41 = 3;
      sub_2141E0750((uint64_t)v36, &qword_253F146B8);
      if ((v12 & 0x80000000) == 0)
        goto LABEL_28;
    }
    else
    {
      sub_21422F3C0((uint64_t)v36, (uint64_t)&v38);
      if ((v12 & 0x80000000) == 0)
      {
LABEL_28:
        sub_2141DD14C(v10, v11, v12);
        sub_2143F486C(v10, v11, v12);
        sub_2141EF1B0(v10, v11, v12);
LABEL_31:
        sub_21422F27C((uint64_t)&v38);
        sub_2141E0750((uint64_t)&v42, &qword_253F146B8);
        sub_214424F20();
        swift_bridgeObjectRelease();
        sub_2141ED0BC(v33, v32, v26 & 1);
        swift_bridgeObjectRelease();
        sub_2141EF1B0(v10, v11, v12);
        sub_2141ED0BC(v35, v34, v31 & 1);
        swift_bridgeObjectRelease();
        v24 = v46;
        sub_2141EF1B0(v30, v7, v8);
        return v24;
      }
    }
    sub_2143F4C74(v10, v11, v12 & 1);
    goto LABEL_31;
  }
  v15 = *(_QWORD *)(v4 + 8);
  v16 = *(_QWORD *)(v4 + 16);
  v17 = *(_BYTE *)(v4 + 24);
  v18 = *(_QWORD *)(v4 + 40);
  v19 = *(_QWORD *)(v4 + 48);
  v20 = *(char *)(v4 + 56);
  if (*(_QWORD *)(a2 + 16) && (v21 = sub_214336B74(*(_BYTE *)v4), (v22 & 1) != 0))
  {
    sub_21422F3FC(*(_QWORD *)(a2 + 56) + 48 * v21, (uint64_t)&v42);
  }
  else
  {
    v44 = 0;
    v42 = 0u;
    v43 = 0u;
    v45 = -1;
  }
  sub_2141E070C((uint64_t)&v42, (uint64_t)v36, &qword_253F146B8);
  if (v37 == 255)
  {
    v40 = 0;
    v38 = 0u;
    v39 = 0u;
    v41 = 3;
    sub_2141DD130(v15, v16, v17);
    swift_bridgeObjectRetain();
    sub_2141DD140(v18, v19, v20);
    sub_2141E0750((uint64_t)v36, &qword_253F146B8);
    if ((v20 & 0x80000000) == 0)
      goto LABEL_15;
LABEL_22:
    v24 = sub_2143F4C74(v18, v19, v20 & 1);
    goto LABEL_23;
  }
  sub_21422F3C0((uint64_t)v36, (uint64_t)&v38);
  sub_2141DD130(v15, v16, v17);
  swift_bridgeObjectRetain();
  sub_2141DD140(v18, v19, v20);
  if (v20 < 0)
    goto LABEL_22;
LABEL_15:
  sub_2141DD14C(v18, v19, v20);
  v24 = sub_2143F486C(v18, v19, v20);
  sub_2141EF1B0(v18, v19, v20);
LABEL_23:
  sub_21422F27C((uint64_t)&v38);
  sub_2141ED0BC(v15, v16, v17);
  swift_bridgeObjectRelease();
  sub_2141EF1B0(v18, v19, v20);
  sub_2141E0750((uint64_t)&v42, &qword_253F146B8);
  return v24;
}

uint64_t sub_21422CC48(double *a1, char a2)
{
  uint64_t v4;
  uint64_t result;
  unint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  uint64_t ObjCClassFromMetadata;
  void *v11;
  uint64_t v12;
  _QWORD *v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  double v19;
  double v20;
  double v21;
  double v22;
  unint64_t v23;
  double v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  void *v30;
  id v31;
  unint64_t v32;

  v4 = sub_2144242C0();
  result = MEMORY[0x24BDAC7A8](v4);
  v6 = *((_QWORD *)a1 + 2);
  if (v6 == 2)
  {
    sub_2143F486C(*((_QWORD *)a1 + 4), 0, 0);
    sub_2143F486C(*((_QWORD *)a1 + 5), 0, 0);
    sub_2144242B4();
    sub_2144242A8();
    sub_21442429C();
    swift_bridgeObjectRelease();
    sub_2144242A8();
    sub_21442429C();
    swift_bridgeObjectRelease();
    sub_2144242A8();
    sub_2144242D8();
    type metadata accessor for FindClass();
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    v11 = (void *)objc_opt_self();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v9 = objc_msgSend(v11, sel_bundleForClass_, ObjCClassFromMetadata);
LABEL_40:
    v31 = v9;
    v12 = sub_21442480C();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v12;
  }
  if (v6 != 1)
  {
    if (v6)
    {
      v32 = v6 - 1;
      v15 = *((uint64_t *)a1 + 4);
      v14 = a1[5];
      v13 = a1 + 4;
      if (v14 < *(double *)&v15)
        v16 = *((uint64_t *)a1 + 4);
      else
        v16 = *((uint64_t *)a1 + 5);
      if (v14 < *(double *)&v15)
        v17 = *((uint64_t *)a1 + 5);
      else
        v17 = *((uint64_t *)a1 + 4);
      v18 = 2;
      v19 = *(double *)&v17;
      v20 = *(double *)&v16;
      do
      {
        if (v18 >= v6)
        {
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        v22 = *(double *)&v13[v18];
        v23 = *((_QWORD *)a1 + 2);
        v24 = v22;
        if (v18 + 1 != v6)
        {
          if (v18 + 1 >= v6)
            goto LABEL_43;
          v24 = *(double *)&v13[v18 + 1];
          v23 = v18 + 2;
        }
        if (v24 >= v22)
          v21 = v24;
        else
          v21 = *(double *)&v13[v18];
        if (v24 < v22)
          v22 = v24;
        if (v22 < v19)
        {
          *(double *)&v17 = v22;
          v19 = v22;
        }
        if (v21 >= v20)
        {
          *(double *)&v16 = v21;
          v20 = v21;
        }
        v18 = v23;
      }
      while (v23 != v6);
      sub_2143F486C(v17, 0, 0);
      sub_2143F486C(v16, 0, 0);
      if (*(double *)&v17 == *(double *)&v16)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_2144242B4();
        sub_2144242A8();
        sub_21442429C();
        swift_bridgeObjectRelease();
        sub_2144242A8();
        sub_2144242D8();
        type metadata accessor for FindClass();
        v25 = swift_getObjCClassFromMetadata();
        v26 = (void *)objc_opt_self();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v9 = objc_msgSend(v26, sel_bundleForClass_, v25);
        goto LABEL_40;
      }
      if ((a2 & 1) != 0)
      {
        if (*(double *)&v17 == *(double *)&v15 && *(double *)&v16 == *(double *)&v13[v6 - 1])
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_2142288E8((uint64_t)a1, (uint64_t)a1, 1);
        }
        else
        {
          if (*(double *)&v16 != *(double *)&v15 || *(double *)&v17 != *(double *)&v13[v32])
          {
            sub_2143F486C(v15, 0, 0);
            sub_2143F486C(v13[v32], 0, 0);
            sub_2144242B4();
            sub_2144242A8();
            sub_21442429C();
            swift_bridgeObjectRelease();
            sub_2144242A8();
            sub_21442429C();
            swift_bridgeObjectRelease();
            sub_2144242A8();
            sub_21442429C();
            swift_bridgeObjectRelease();
            sub_2144242A8();
            sub_21442429C();
            swift_bridgeObjectRelease();
            sub_2144242A8();
            sub_2144242D8();
            type metadata accessor for FindClass();
            v27 = swift_getObjCClassFromMetadata();
            v28 = (void *)objc_opt_self();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v9 = objc_msgSend(v28, sel_bundleForClass_, v27);
            goto LABEL_40;
          }
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_214228A14((uint64_t)a1, (uint64_t)a1, 1);
        }
      }
      sub_2144242B4();
      sub_2144242A8();
      sub_21442429C();
      swift_bridgeObjectRelease();
      sub_2144242A8();
      sub_21442429C();
      swift_bridgeObjectRelease();
      sub_2144242A8();
      sub_2144242D8();
      type metadata accessor for FindClass();
      v29 = swift_getObjCClassFromMetadata();
      v30 = (void *)objc_opt_self();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v9 = objc_msgSend(v30, sel_bundleForClass_, v29);
    }
    else
    {
      sub_2144242CC();
      type metadata accessor for FindClass();
      v7 = swift_getObjCClassFromMetadata();
      v8 = (void *)objc_opt_self();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v9 = objc_msgSend(v8, sel_bundleForClass_, v7);
    }
    goto LABEL_40;
  }
  sub_2143F486C(*((_QWORD *)a1 + 4), 0, 0);
  sub_2141DCE8C();
  return sub_214424818();
}

uint64_t sub_21422D750(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  char *v49;
  unint64_t v50;
  char *v51;
  char *v52;
  unint64_t v53;
  char *v54;
  unint64_t v55;
  unint64_t v56;
  _QWORD v57[22];
  _BYTE v58[152];
  _BYTE v59[152];
  _BYTE v60[152];
  _BYTE v61[152];
  uint64_t v62[4];
  _QWORD v63[4];
  _QWORD v64[19];
  char v65[152];
  _QWORD v66[19];
  _QWORD v67[19];

  sub_2141E801C(a1 + 56, (uint64_t)v62, &qword_253F13518);
  sub_2141E801C((uint64_t)v62, (uint64_t)v63, &qword_253F13518);
  if (v63[3])
  {
    v4 = v63[0];
    goto LABEL_33;
  }
  sub_2141E801C(a1 + 288, (uint64_t)v61, &qword_253F13428);
  sub_2141E801C(a1 + 288, (uint64_t)v59, &qword_253F13428);
  sub_2141E801C((uint64_t)v61, (uint64_t)v64, &qword_253F13428);
  if (sub_21422C64C(v64) != 1)
  {
    sub_2141EF6B8((uint64_t)v64, (uint64_t)v65);
    sub_2141E801C((uint64_t)v59, (uint64_t)v67, &qword_253F13428);
    sub_21421C318(v67, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21420B7DC);
    v5 = sub_21422BE94((uint64_t)v61, a2);
    if (v8)
    {
      v9 = v5;
      v10 = v6;
      v11 = v7;
      v12 = v8;
      sub_2141DD130(v5, v6, v7 & 1);
      swift_bridgeObjectRetain();
      v13 = sub_2142257BC(0, 1, 1, MEMORY[0x24BEE4AF8]);
      v14 = *((_QWORD *)v13 + 2);
      v15 = *((_QWORD *)v13 + 3);
      v16 = v14 + 1;
      if (v14 >= v15 >> 1)
      {
        v55 = v14 + 1;
        v49 = v13;
        v50 = *((_QWORD *)v13 + 2);
        v51 = sub_2142257BC((char *)(v15 > 1), v14 + 1, 1, v49);
        v14 = v50;
        v16 = v55;
        v13 = v51;
      }
      v17 = v11 & 1;
      *((_QWORD *)v13 + 2) = v16;
      v18 = &v13[32 * v14];
      *((_QWORD *)v18 + 4) = v9;
      *((_QWORD *)v18 + 5) = v10;
      v18[48] = v17;
      *((_QWORD *)v18 + 7) = v12;
      sub_21422F2B0((uint64_t)v61, (uint64_t (*)(void))sub_2141EF5D4);
      sub_2141ED0BC(v9, v10, v17);
      swift_bridgeObjectRelease();
      goto LABEL_10;
    }
    sub_21422F2B0((uint64_t)v61, (uint64_t (*)(void))sub_2141EF5D4);
  }
  v13 = (char *)MEMORY[0x24BEE4AF8];
LABEL_10:
  sub_2141E801C(a1 + 440, (uint64_t)v60, &qword_253F13428);
  sub_2141E801C(a1 + 440, (uint64_t)v58, &qword_253F13428);
  sub_2141E801C((uint64_t)v60, (uint64_t)v66, &qword_253F13428);
  if (sub_21422C64C(v66) != 1)
  {
    sub_2141EF6B8((uint64_t)v66, (uint64_t)v67);
    sub_2141E801C((uint64_t)v58, (uint64_t)v57, &qword_253F13428);
    sub_21421C318(v57, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21420B7DC);
    v19 = sub_21422BE94((uint64_t)v60, a2);
    if (v22)
    {
      v23 = v19;
      v24 = v20;
      v25 = v21;
      v26 = v22;
      sub_2141DD130(v19, v20, v21 & 1);
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v13 = sub_2142257BC(0, *((_QWORD *)v13 + 2) + 1, 1, v13);
      v27 = *((_QWORD *)v13 + 2);
      v28 = *((_QWORD *)v13 + 3);
      v29 = v27 + 1;
      if (v27 >= v28 >> 1)
      {
        v56 = v27 + 1;
        v52 = v13;
        v53 = *((_QWORD *)v13 + 2);
        v54 = sub_2142257BC((char *)(v28 > 1), v27 + 1, 1, v52);
        v27 = v53;
        v29 = v56;
        v13 = v54;
      }
      v30 = v25 & 1;
      *((_QWORD *)v13 + 2) = v29;
      v31 = &v13[32 * v27];
      *((_QWORD *)v31 + 4) = v23;
      *((_QWORD *)v31 + 5) = v24;
      v31[48] = v30;
      *((_QWORD *)v31 + 7) = v26;
      sub_21422F2B0((uint64_t)v60, (uint64_t (*)(void))sub_2141EF5D4);
      sub_2141ED0BC(v23, v24, v30);
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_21422F2B0((uint64_t)v60, (uint64_t (*)(void))sub_2141EF5D4);
    }
  }
  v32 = *(_QWORD *)(a1 + 120);
  if (*(_QWORD *)(v32 + 16))
  {
    swift_bridgeObjectRetain();
    v33 = sub_214230194(v32, a2);
    swift_bridgeObjectRelease();
    v34 = *(_QWORD *)(v33 + 16);
    if (v34)
    {
      v35 = 0;
      v36 = (uint64_t *)(v33 + 56);
      while (1)
      {
        v37 = *v36;
        v36 += 4;
        if (v37)
          break;
        if (v34 == ++v35)
          goto LABEL_31;
      }
    }
    else
    {
      v35 = 0;
    }
    if (v35 != v34)
    {
      v38 = sub_2142BFFA8(8236, 0xE200000000000000, 0, MEMORY[0x24BEE4AF8], v33, v35);
      v40 = v39;
      v42 = v41;
      v44 = v43;
      swift_bridgeObjectRelease();
      sub_2141DD130(v38, v40, v42 & 1);
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v13 = sub_2142257BC(0, *((_QWORD *)v13 + 2) + 1, 1, v13);
      v46 = *((_QWORD *)v13 + 2);
      v45 = *((_QWORD *)v13 + 3);
      if (v46 >= v45 >> 1)
        v13 = sub_2142257BC((char *)(v45 > 1), v46 + 1, 1, v13);
      *((_QWORD *)v13 + 2) = v46 + 1;
      v47 = &v13[32 * v46];
      *((_QWORD *)v47 + 4) = v38;
      *((_QWORD *)v47 + 5) = v40;
      v47[48] = v42 & 1;
      *((_QWORD *)v47 + 7) = v44;
      sub_2141ED0BC(v38, v40, v42 & 1);
    }
LABEL_31:
    swift_bridgeObjectRelease();
  }
  v4 = sub_2142BFDA4(32, 0xE100000000000000, 0, MEMORY[0x24BEE4AF8], (uint64_t)v13);
  swift_bridgeObjectRelease();
LABEL_33:
  sub_21423142C(v62);
  return v4;
}

char *sub_21422DC30(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *result;
  uint64_t v11;
  int64_t v12;
  int64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const void *v24;
  unint64_t v25;
  uint64_t ObjCClassFromMetadata;
  void *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  __int16 v39;
  uint64_t v40;
  uint64_t v41;
  const void *v42;
  uint64_t i;
  unint64_t v44;
  _QWORD v45[19];
  _BYTE v46[152];
  _BYTE v47[152];
  _QWORD v48[20];
  _BYTE v49[608];
  _QWORD v50[76];
  _BYTE v51[160];

  v4 = sub_2144242C0();
  MEMORY[0x24BDAC7A8](v4);
  v44 = *(_QWORD *)(a1 + 16);
  if (v44)
  {
    v41 = a2;
    v42 = (const void *)(a1 + 32);
    swift_bridgeObjectRetain();
    v5 = (char *)MEMORY[0x24BEE4AF8];
    v6 = 1;
    v7 = 32;
    for (i = a1; ; a1 = i)
    {
      memcpy(v49, (const void *)(a1 + v7), sizeof(v49));
      v50[0] = MEMORY[0x24BEE4B08];
      sub_2142302F8((uint64_t)v49);
      v8 = swift_bridgeObjectRetain();
      v9 = sub_214230C70(v8);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      result = (char *)sub_2142305C0((uint64_t)v49);
      v11 = *(_QWORD *)(v9 + 16);
      v12 = *((_QWORD *)v5 + 2);
      v13 = v12 + v11;
      if (__OFADD__(v12, v11))
      {
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        goto LABEL_40;
      }
      result = (char *)swift_isUniquelyReferenced_nonNull_native();
      if ((_DWORD)result && v13 <= *((_QWORD *)v5 + 3) >> 1)
      {
        if (*(_QWORD *)(v9 + 16))
          goto LABEL_7;
      }
      else
      {
        if (v12 <= v13)
          v17 = v12 + v11;
        else
          v17 = v12;
        result = sub_214224028(result, v17, 1, v5);
        v5 = result;
        if (*(_QWORD *)(v9 + 16))
        {
LABEL_7:
          if ((*((_QWORD *)v5 + 3) >> 1) - *((_QWORD *)v5 + 2) < v11)
            goto LABEL_37;
          result = (char *)swift_arrayInitWithCopy();
          if (v11)
          {
            v14 = *((_QWORD *)v5 + 2);
            v15 = __OFADD__(v14, v11);
            v16 = v14 + v11;
            if (v15)
              goto LABEL_38;
            *((_QWORD *)v5 + 2) = v16;
          }
          goto LABEL_16;
        }
      }
      if (v11)
        goto LABEL_36;
LABEL_16:
      swift_bridgeObjectRelease();
      if (v44 == v6)
      {
        v18 = i;
        swift_bridgeObjectRelease();
        sub_214228B40(i);
        v19 = swift_bridgeObjectRetain();
        v20 = sub_2143984E0(v19);
        swift_bridgeObjectRelease();
        v21 = *(_QWORD *)(v20 + 16);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_getKeyPath();
        if (v21 <= 1)
          v22 = 1;
        else
          v22 = v21;
        sub_2141E801C(i + 472, (uint64_t)v47, &qword_253F13428);
        sub_2141E801C((uint64_t)v47, (uint64_t)v48, &qword_253F13428);
        result = (char *)sub_21422C64C(v48);
        if ((_DWORD)result == 1)
        {
          v23 = 0;
          v24 = v42;
          while (1)
          {
            v25 = v23 + 1;
            if (__OFADD__(v23, 1))
              goto LABEL_39;
            if (v25 == v44)
            {
              swift_release();
              sub_2141EF22C((uint64_t)v50);
              sub_2141E801C((uint64_t)v50, (uint64_t)v46, &qword_253F13428);
              v18 = i;
              goto LABEL_33;
            }
            sub_2141E801C((uint64_t)v42 + 608 * v25 + 440, (uint64_t)v47, &qword_253F13428);
            sub_2141E801C((uint64_t)v47, (uint64_t)v48, &qword_253F13428);
            result = (char *)sub_21422C64C(v48);
            ++v23;
            if ((_DWORD)result != 1)
            {
              v18 = i;
              goto LABEL_29;
            }
          }
        }
        v25 = 0;
        v24 = v42;
LABEL_29:
        if (v25 < v44)
        {
          sub_2141E801C((uint64_t)v24 + 608 * v25 + 440, (uint64_t)v51, &qword_253F13428);
          sub_2141E801C((uint64_t)v51, (uint64_t)v50, &qword_253F13428);
          result = (char *)sub_21422C64C(v50);
          if ((_DWORD)result != 1)
          {
            sub_2141E801C((uint64_t)v51, (uint64_t)v45, &qword_253F13428);
            sub_21421C318(v45, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21420B7DC);
            swift_release();
            sub_2141E801C((uint64_t)v51, (uint64_t)v46, &qword_253F13428);
LABEL_33:
            sub_2141E801C((uint64_t)v46, (uint64_t)v51, &qword_253F13428);
            sub_2142285B0(v18);
            v30 = swift_bridgeObjectRetain();
            v31 = sub_21439859C(v30);
            swift_bridgeObjectRelease();
            v32 = v18;
            v33 = *(_QWORD *)(v31 + 16);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v34 = sub_21424EE2C(v5);
            swift_bridgeObjectRelease();
            v35 = memcpy(v50, v42, sizeof(v50));
            MEMORY[0x24BDAC7A8](v35);
            v36 = v41;
            *(&v40 - 8) = v34;
            *(&v40 - 7) = v36;
            *(&v40 - 6) = v33;
            *(&v40 - 5) = (uint64_t)v50;
            *(&v40 - 4) = v22;
            *(&v40 - 3) = (uint64_t)v51;
            v38 = v32;
            sub_2142302F8((uint64_t)v50);
            v37 = sub_214230AAC(v34, (uint64_t (*)(_QWORD *, uint64_t))sub_214231304);
            swift_bridgeObjectRelease();
            v29 = sub_2142BFDA4(8251, 0xE200000000000000, 0, MEMORY[0x24BEE4AF8], (uint64_t)v37);
            sub_2142305C0((uint64_t)v50);
            sub_21422F2B0((uint64_t)v46, (uint64_t (*)(void))sub_2141EF5D4);
            goto LABEL_34;
          }
LABEL_41:
          __break(1u);
          return result;
        }
LABEL_40:
        __break(1u);
        goto LABEL_41;
      }
      ++v6;
      v7 += 608;
    }
  }
  sub_2144242B4();
  sub_2144242A8();
  v50[0] = 0;
  sub_214424284();
  sub_2144242A8();
  sub_2144242D8();
  type metadata accessor for FindClass();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v27 = (void *)objc_opt_self();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v28 = objc_msgSend(v27, sel_bundleForClass_, ObjCClassFromMetadata);
  v39 = 256;
  v38 = 0;
  v29 = sub_21442480C();
  swift_bridgeObjectRelease();
LABEL_34:
  swift_bridgeObjectRelease();
  return (char *)v29;
}

uint64_t sub_21422E214(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t result;
  unsigned __int8 *v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v35;
  _BYTE *v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t ObjCClassFromMetadata;
  void *v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  char v57;
  _BYTE *v58;
  _BYTE *v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  uint64_t v66;
  char v67;
  int v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  id v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  double v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char v94;
  char v95;
  double *v96;
  uint64_t v97;
  uint64_t v98;
  double *v99;
  double v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  _BOOL4 v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char v119;
  char v120;
  uint64_t v121;
  uint64_t v122;
  char v123;
  uint64_t v124;
  uint64_t v125;
  void *v126;
  id v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char v131;
  char v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  _BYTE *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t *v145;
  uint64_t v146;
  char v147;
  uint64_t v148;
  double *v149;
  char v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  char v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  char v161;
  char v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  char v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  char v174;
  char v175;
  char v176;
  uint64_t v177;
  uint64_t v178;
  double *v179;
  char v180;
  uint64_t v181;
  char v182;
  _BYTE v183[4];
  _BOOL4 v184;
  uint64_t v185;
  _BYTE *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  _BYTE *v193;
  uint64_t v194;
  uint64_t v195;
  _BYTE *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  double *v207;
  uint64_t v208;
  uint64_t v209;
  _QWORD v210[24];
  _BYTE v211[32];
  uint64_t v212;
  char v213;
  _BYTE v214[152];
  _BYTE v215[152];
  _QWORD v216[19];
  uint64_t v217;
  _BYTE v218[152];
  _QWORD v219[19];
  _QWORD v220[19];
  _BYTE v221[152];
  _OWORD v222[2];
  uint64_t v223;
  char v224;

  v202 = a6;
  v15 = sub_2144242C0();
  MEMORY[0x24BDAC7A8](v15);
  v193 = &v183[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v17 = sub_214424218();
  v199 = *(_QWORD *)(v17 - 8);
  v200 = v17;
  MEMORY[0x24BDAC7A8](v17);
  v196 = &v183[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  if (*(_QWORD *)(a3 + 16) >= 2uLL)
  {
    v19 = sub_2142EA930();
    v22 = v23;
    v21 = v24 & 1;
  }
  v203 = v21;
  v204 = v19;
  v205 = v20;
  v25 = sub_21422867C(a2);
  v207 = (double *)sub_214231334(v25);
  result = swift_bridgeObjectRelease();
  if (!*(_QWORD *)(a2 + 16))
  {
    __break(1u);
    goto LABEL_93;
  }
  sub_2141EF6B8(a2 + 32, (uint64_t)v214);
  sub_2141EF6B8((uint64_t)v214, (uint64_t)v215);
  sub_21421C2FC((uint64_t)v215);
  v27 = (unsigned __int8 *)sub_21421C308((uint64_t)v215);
  if (*(_QWORD *)(a4 + 16) && (v28 = sub_214336B74(*v27), (v29 & 1) != 0))
  {
    sub_21422F3FC(*(_QWORD *)(a4 + 56) + 48 * v28, (uint64_t)v222);
  }
  else
  {
    v223 = 0;
    memset(v222, 0, sizeof(v222));
    v224 = -1;
  }
  sub_2141E070C((uint64_t)v222, (uint64_t)v221, &qword_253F146B8);
  if (v221[40] == 255)
  {
    v212 = 0;
    memset(v211, 0, sizeof(v211));
    v213 = 3;
    sub_2141E0750((uint64_t)v221, &qword_253F146B8);
  }
  else
  {
    sub_21422F3C0((uint64_t)v221, (uint64_t)v211);
  }
  sub_2141E0750((uint64_t)v222, &qword_253F146B8);
  v30 = *(_QWORD *)(v202 + 120);
  v201 = v22;
  v194 = a5;
  if (a5 <= 1)
  {
    swift_bridgeObjectRetain();
    v41 = sub_214230194(v30, a4);
    swift_bridgeObjectRelease();
    v42 = *(_QWORD *)(v41 + 16);
    if (v42)
    {
      v43 = 0;
      v44 = (uint64_t *)(v41 + 56);
      while (1)
      {
        v45 = *v44;
        v44 += 4;
        if (v45)
          break;
        if (v42 == ++v43)
          goto LABEL_25;
      }
    }
    else
    {
      v43 = 0;
    }
    if (v43 == v42)
    {
LABEL_25:
      swift_bridgeObjectRelease();
      v206 = 0;
      v197 = 0;
      v198 = 0;
      v52 = 0;
      if (a7 >= 2)
        goto LABEL_21;
    }
    else
    {
      v206 = sub_2142BFFA8(8236, 0xE200000000000000, 0, MEMORY[0x24BEE4AF8], v41, v43);
      v197 = v93;
      v198 = v92;
      v95 = v94;
      swift_bridgeObjectRelease();
      v52 = v95 & 1;
      if (a7 >= 2)
        goto LABEL_21;
    }
LABEL_26:
    v59 = 0;
    v61 = 0;
    v64 = 0;
    v199 = 0;
    goto LABEL_27;
  }
  v195 = a7;
  if (*(_QWORD *)(v30 + 16) == 1)
  {
    sub_2141EF6B8(v30 + 32, (uint64_t)v219);
    sub_21421C318(v219, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21420B7DC);
    v31 = sub_2142EAB9C();
    v33 = v32;
    v35 = v34 & 1;
    sub_21421C318(v219, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141EF5D4);
    v36 = v196;
    sub_21442420C();
    sub_2144247A0();
    sub_2141ED0BC(v31, v33, v35);
    swift_bridgeObjectRelease();
    (*(void (**)(_BYTE *, uint64_t))(v199 + 8))(v36, v200);
    v206 = sub_21438EC90();
    v197 = v38;
    v198 = v37;
    v40 = v39;
  }
  else
  {
    sub_2144242B4();
    sub_2144242A8();
    *(_QWORD *)&v222[0] = a5;
    sub_214424284();
    sub_2144242A8();
    sub_2144242D8();
    type metadata accessor for FindClass();
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    v47 = (void *)objc_opt_self();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v48 = objc_msgSend(v47, sel_bundleForClass_, ObjCClassFromMetadata);
    v206 = sub_21442480C();
    v197 = v50;
    v198 = v49;
    v40 = v51;
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  v52 = v40 & 1;
  v22 = v201;
  a7 = v195;
  if (v195 < 2)
    goto LABEL_26;
LABEL_21:
  sub_2141E801C(a8, (uint64_t)v216, &qword_253F13428);
  result = sub_21422C64C(v216);
  if ((_DWORD)result != 1)
  {
    sub_2141EF6B8((uint64_t)v216, (uint64_t)&v217);
    v53 = sub_2142EAB9C();
    v55 = v54;
    v57 = v56 & 1;
    v58 = v196;
    sub_21442420C();
    sub_2144247A0();
    sub_2141ED0BC(v53, v55, v57);
    swift_bridgeObjectRelease();
    (*(void (**)(_BYTE *, uint64_t))(v199 + 8))(v58, v200);
    v59 = (_BYTE *)sub_21438EC90();
    v61 = v60;
    LOBYTE(v53) = v62;
    v199 = v63;
    swift_bridgeObjectRelease();
    v64 = v53 & 1;
    v22 = v201;
LABEL_27:
    sub_2141E801C(v202 + 288, (uint64_t)v218, &qword_253F13428);
    sub_2141E801C((uint64_t)v218, (uint64_t)v220, &qword_253F13428);
    result = sub_21422C64C(v220);
    if ((_DWORD)result == 1)
    {
LABEL_94:
      __break(1u);
      goto LABEL_95;
    }
    v202 = v52;
    sub_2141EF6B8((uint64_t)v220, (uint64_t)v221);
    sub_2141EF6B8((uint64_t)v221, (uint64_t)v222);
    v65 = sub_21421C2FC((uint64_t)v222) == 1;
    v195 = v61;
    v196 = v59;
    v200 = v64;
    if (!v65)
    {
      sub_21421C308((uint64_t)v222);
      sub_2141EF6B8((uint64_t)v214, (uint64_t)v210);
      v68 = sub_21421C2FC((uint64_t)v210);
      v69 = sub_21421C308((uint64_t)v210);
      if (v68 == 1)
      {
        v70 = 4;
        v71 = a7;
      }
      else
      {
        v70 = *(unsigned __int8 *)(v69 + 80);
        v71 = a7;
        if (v70 == 3)
          v71 = *((_QWORD *)v207 + 2);
      }
      v88 = *((_QWORD *)v207 + 2);
      if (!v88)
      {
        v90 = 0.0;
        goto LABEL_53;
      }
      if (v88 == 1)
      {
        v89 = 0;
        v90 = 0.0;
      }
      else
      {
        v89 = v88 & 0x7FFFFFFFFFFFFFFELL;
        v96 = v207 + 5;
        v90 = 0.0;
        v97 = v88 & 0x7FFFFFFFFFFFFFFELL;
        do
        {
          v90 = v90 + *(v96 - 1) + *v96;
          v96 += 2;
          v97 -= 2;
        }
        while (v97);
        if (v88 == v89)
        {
LABEL_53:
          swift_bridgeObjectRelease();
          v208 = sub_2143F486C(COERCE__INT64(v90 / (double)v71), 0, 0);
          v209 = v101;
          sub_2141DCE8C();
          v102 = sub_214424818();
          LODWORD(v189) = v104;
          v192 = v105;
          if (v70 == 4)
          {
            v106 = v204;
            v107 = v205;
            v108 = v203;
            if (a7 != 1)
            {
              v109 = 0;
              goto LABEL_59;
            }
          }
          else
          {
            v109 = 0;
            v106 = v204;
            v107 = v205;
            v108 = v203;
            if (v70 == 3 || a7 != 1)
            {
LABEL_59:
              v190 = v103;
              v191 = v102;
              LODWORD(v207) = v109;
              if (v22)
              {
                v110 = v108 != 0;
                v111 = v106;
                v112 = v107;
                v113 = v22;
              }
              else
              {
                sub_2144242CC();
                v111 = sub_21442480C();
                v106 = v204;
                v107 = v205;
                v112 = v114;
                v113 = v115;
                v110 = v108 & 1;
                LOBYTE(v108) = v203;
              }
              sub_2141EF2B4(v106, v107, v108, v22);
              sub_2144242CC();
              v116 = sub_21442480C();
              v118 = v117;
              v120 = v119 & 1;
              v121 = v112;
              v122 = v111;
              v123 = sub_2144247F4();
              sub_2141ED0BC(v116, v118, v120);
              swift_bridgeObjectRelease();
              v186 = (_BYTE *)v122;
              v187 = v113;
              v185 = v121;
              v184 = v110;
              if ((v123 & 1) != 0)
                sub_214228CB0();
              else
                sub_214228D9C();
              sub_2141D8BF8(&qword_253F135A8);
              v124 = swift_allocObject();
              *(_OWORD *)(v124 + 16) = xmmword_214427810;
              type metadata accessor for FindClass();
              v125 = swift_getObjCClassFromMetadata();
              v126 = (void *)objc_opt_self();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              v127 = objc_msgSend(v126, sel_bundleForClass_, v125);
              v128 = sub_21442480C();
              v130 = v129;
              v132 = v131;
              v134 = v133;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              *(_QWORD *)(v124 + 32) = v128;
              *(_QWORD *)(v124 + 40) = v130;
              *(_QWORD *)(v124 + 48) = v132 & 1;
              v135 = v206;
              *(_QWORD *)(v124 + 56) = v134;
              *(_QWORD *)(v124 + 64) = v135;
              v137 = v197;
              v136 = v198;
              v138 = v202;
              *(_QWORD *)(v124 + 72) = v198;
              *(_QWORD *)(v124 + 80) = v138;
              v139 = v195;
              v140 = v196;
              *(_QWORD *)(v124 + 88) = v137;
              *(_QWORD *)(v124 + 96) = v140;
              v142 = v199;
              v141 = v200;
              *(_QWORD *)(v124 + 104) = v139;
              *(_QWORD *)(v124 + 112) = v141;
              *(_QWORD *)(v124 + 120) = v142;
              v143 = *(_QWORD *)(v124 + 16);
              v188 = v124 + 32;
              v206 = v135;
              v144 = 0;
              if (v143)
              {
                v145 = (uint64_t *)(v124 + 56);
                while (1)
                {
                  v146 = *v145;
                  v145 += 4;
                  if (v146)
                    break;
                  if (v143 == ++v144)
                    goto LABEL_71;
                }
              }
              if (v144 == v143)
              {
LABEL_71:
                sub_2141EF2B4(v135, v136, v138, v137);
                v147 = v200;
                sub_2141EF2B4((uint64_t)v140, v139, v200, v142);
                sub_2141ED0BC((uint64_t)v186, v185, v184);
                swift_bridgeObjectRelease();
                v148 = 0;
                v207 = 0;
                v193 = 0;
                v194 = 0;
              }
              else
              {
                sub_2141EF2B4(v135, v136, v138, v137);
                v147 = v200;
                sub_2141EF2B4((uint64_t)v140, v139, v200, v142);
                v148 = sub_2142BFFA8(8236, 0xE200000000000000, 0, MEMORY[0x24BEE4AF8], v124, v144);
                v207 = v149;
                v193 = (_BYTE *)(v150 & 1);
                v194 = v151;
                sub_2141ED0BC((uint64_t)v186, v185, v184);
                swift_bridgeObjectRelease();
              }
              sub_2141ED0BC(v191, v190, v189 & 1);
              swift_bridgeObjectRelease();
              sub_21422F7F0(v206, v136, v138, v137);
              sub_21422F7F0(v204, v205, v203, v201);
              sub_21422F7F0((uint64_t)v140, v139, v147, v142);
              swift_setDeallocating();
              sub_2141D8BF8(&qword_253F13518);
              goto LABEL_90;
            }
          }
          v109 = 1;
          goto LABEL_59;
        }
      }
      v98 = v88 - v89;
      v99 = &v207[v89 + 4];
      do
      {
        v100 = *v99++;
        v90 = v90 + v100;
        --v98;
      }
      while (v98);
      goto LABEL_53;
    }
    result = sub_21421C308((uint64_t)v222);
    v66 = v194;
    if (v194 != 1)
    {
      v67 = 0;
LABEL_36:
      v72 = sub_21422CC48(v207, v67);
      v74 = v73;
      v76 = v75;
      v192 = v77 & 1;
      v189 = v73;
      v190 = v75;
      v188 = v72;
      if (v66 == 1)
      {
        v78 = *((_QWORD *)v207 + 2);
        if (v78 <= 1)
        {
          swift_bridgeObjectRelease();
          v185 = 0;
          v186 = 0;
          v64 = 0;
          v191 = 0;
        }
        else
        {
          sub_2144242B4();
          sub_2144242A8();
          swift_bridgeObjectRelease();
          v210[0] = v78;
          sub_214424284();
          sub_2144242A8();
          sub_2144242D8();
          type metadata accessor for FindClass();
          v79 = swift_getObjCClassFromMetadata();
          v80 = objc_opt_self();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v81 = (void *)v80;
          v72 = v188;
          v74 = v189;
          v82 = objc_msgSend(v81, sel_bundleForClass_, v79);
          v76 = v190;
          v83 = sub_21442480C();
          v185 = v84;
          v186 = (_BYTE *)v83;
          v86 = v85;
          v191 = v87;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v64 = v86 & 1;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        v91 = v199;
        sub_2141EF2B4((uint64_t)v59, v61, v64, v199);
        v185 = v61;
        v186 = v59;
        v191 = v91;
      }
      sub_2141D8BF8(&qword_253F135A8);
      v152 = swift_allocObject();
      *(_OWORD *)(v152 + 16) = xmmword_214427810;
      v187 = v152 + 32;
      v153 = swift_allocObject();
      *(_OWORD *)(v153 + 16) = xmmword_2144271D0;
      v154 = v204;
      v155 = v205;
      *(_QWORD *)(v153 + 32) = v204;
      *(_QWORD *)(v153 + 40) = v155;
      v156 = v203;
      *(_QWORD *)(v153 + 48) = v203;
      *(_QWORD *)(v153 + 56) = v22;
      *(_QWORD *)(v153 + 64) = v72;
      *(_QWORD *)(v153 + 72) = v74;
      *(_QWORD *)(v153 + 80) = v192;
      *(_QWORD *)(v153 + 88) = v76;
      if (v22)
      {
        v157 = 0;
      }
      else
      {
        if (!v76)
        {
          sub_2141EF2B4(v154, v155, v156, 0);
          sub_2141DD130(v72, v74, v192);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          v158 = 0;
          v160 = 0;
          v165 = 0;
          v164 = 0;
LABEL_80:
          *(_QWORD *)(v152 + 32) = v158;
          *(_QWORD *)(v152 + 40) = v160;
          *(_QWORD *)(v152 + 48) = v165;
          *(_QWORD *)(v152 + 56) = v164;
          v166 = v197;
          v167 = v198;
          *(_QWORD *)(v152 + 64) = v206;
          *(_QWORD *)(v152 + 72) = v167;
          v168 = v202;
          *(_QWORD *)(v152 + 80) = v202;
          *(_QWORD *)(v152 + 88) = v166;
          v170 = v185;
          v169 = (uint64_t)v186;
          *(_QWORD *)(v152 + 96) = v186;
          *(_QWORD *)(v152 + 104) = v170;
          v171 = v191;
          *(_QWORD *)(v152 + 112) = v64;
          *(_QWORD *)(v152 + 120) = v171;
          if (v164)
          {
            v207 = 0;
          }
          else
          {
            if (*(_QWORD *)(v152 + 88))
            {
              v172 = 1;
            }
            else
            {
              if (!*(_QWORD *)(v152 + 120))
              {
                sub_2141ED0BC(v188, v189, v192);
                swift_bridgeObjectRelease();
                v148 = 0;
                v207 = 0;
                v193 = 0;
                v194 = 0;
                goto LABEL_89;
              }
              v172 = 2;
            }
            v207 = (double *)v172;
          }
          v173 = v206;
          v174 = v168;
          sub_2141EF2B4(v206, v167, v168, v166);
          v175 = v64;
          v176 = v64;
          v177 = v191;
          sub_2141EF2B4(v169, v170, v175, v191);
          v178 = sub_2142BFFA8(8236, 0xE200000000000000, 0, MEMORY[0x24BEE4AF8], v152, (unint64_t)v207);
          v207 = v179;
          v193 = (_BYTE *)(v180 & 1);
          v194 = v181;
          v182 = v176;
          v148 = v178;
          sub_21422F7F0(v169, v170, v182, v177);
          sub_21422F7F0(v173, v167, v174, v166);
          sub_2141ED0BC(v188, v189, v192);
          swift_bridgeObjectRelease();
LABEL_89:
          sub_21422F7F0(v204, v205, v203, v201);
          sub_21422F7F0((uint64_t)v196, v195, v200, v199);
          swift_setDeallocating();
          sub_2141D8BF8(&qword_253F13518);
LABEL_90:
          swift_arrayDestroy();
          swift_deallocClassInstance();
          sub_21422F27C((uint64_t)v211);
          return v148;
        }
        v157 = 1;
      }
      sub_2141EF2B4(v154, v155, v156, v22);
      sub_2141DD130(v72, v74, v192);
      swift_bridgeObjectRetain();
      v158 = sub_2142BFFA8(32, 0xE100000000000000, 0, MEMORY[0x24BEE4AF8], v153, v157);
      v160 = v159;
      v162 = v161;
      v164 = v163;
      swift_bridgeObjectRelease();
      v165 = v162 & 1;
      goto LABEL_80;
    }
    if (*(_QWORD *)(a9 + 16))
    {
      v67 = *(_BYTE *)(a9 + 625);
      goto LABEL_36;
    }
LABEL_93:
    __break(1u);
    goto LABEL_94;
  }
LABEL_95:
  __break(1u);
  return result;
}

uint64_t sub_21422F214(_QWORD **a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_2143501AC(v2);
  v3 = v2[2];
  v5[0] = (uint64_t)(v2 + 4);
  v5[1] = v3;
  result = sub_21422F820(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_21422F27C(uint64_t a1)
{
  destroy for AnyFormatStyle(a1);
  return a1;
}

uint64_t sub_21422F2B0(uint64_t a1, uint64_t (*a2)(void))
{
  sub_21422F314(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    a2);
  return a1;
}

uint64_t sub_21422F314(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t (*a20)(void))
{
  if (a13 > 1 || (result & 0xFFFFFFFFFFFFFFF8) != 0x7FFFFFFF8 || a4 > 1)
    return a20();
  if ((a10 | a9) & 0xF000000000000007 | a8 & 0xFFFFFFFFFFFFFF7CLL
    || ((a19 | a18) & 0xF000000000000007 | a17 & 0xFFFFFFFFFFFFFF7CLL) != 0)
  {
    return a20();
  }
  return result;
}

uint64_t sub_21422F3C0(uint64_t a1, uint64_t a2)
{
  initializeWithTake for AxisMarksContentStorage(a2, a1);
  return a2;
}

uint64_t sub_21422F3FC(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for AnyFormatStyle(a2, a1);
  return a2;
}

uint64_t sub_21422F438()
{
  return swift_deallocObject();
}

uint64_t sub_21422F448()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_21422F46C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v2 = *(_QWORD *)(a1 + 64);
  v3 = *(_QWORD *)(a1 + 72);
  v4 = *(_QWORD *)(a1 + 80);
  v5 = *(_QWORD *)(a1 + 88);
  v6 = *(_QWORD *)(a1 + 96);
  v7 = *(_QWORD *)(a1 + 104);
  v8 = *(_QWORD *)(a1 + 112);
  v9 = *(_QWORD *)(a1 + 120);
  v23 = *(_QWORD *)(a1 + 136);
  v24 = *(_QWORD *)(a1 + 128);
  v21 = *(_QWORD *)(a1 + 152);
  v22 = *(_QWORD *)(a1 + 144);
  v19 = *(_QWORD *)(a1 + 168);
  v20 = *(_QWORD *)(a1 + 160);
  v17 = *(_QWORD *)(a1 + 184);
  v18 = *(_QWORD *)(a1 + 176);
  v15 = *(_OWORD *)(a1 + 208);
  v16 = *(_OWORD *)(a1 + 192);
  v13 = *(_OWORD *)(a1 + 240);
  v14 = *(_OWORD *)(a1 + 224);
  v12 = *(_OWORD *)(a1 + 256);
  v10 = *(_QWORD *)(a1 + 272);
  swift_bridgeObjectRetain();
  sub_2141EF2B4(v2, v3, v4, v5);
  sub_2141EF2B4(v6, v7, v8, v9);
  sub_21422F314(v24, v23, v22, v21, v20, v19, v18, v17, v16, *((uint64_t *)&v16 + 1), v15, *((uint64_t *)&v15 + 1), v14, *((uint64_t *)&v14 + 1), v13, *((uint64_t *)&v13 + 1), v12, *((uint64_t *)&v12 + 1), v10,
    (uint64_t (*)(void))sub_21420B7DC);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_21422F5A0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(a1 + 64);
  v4 = *(_QWORD *)(a1 + 72);
  v5 = *(_QWORD *)(a1 + 80);
  v6 = *(_QWORD *)(a1 + 88);
  v7 = *(_QWORD *)(a1 + 96);
  v8 = *(_QWORD *)(a1 + 104);
  v9 = *(_QWORD *)(a1 + 112);
  v23 = *(_QWORD *)(a1 + 128);
  v24 = *(_QWORD *)(a1 + 120);
  v21 = *(_QWORD *)(a1 + 144);
  v22 = *(_QWORD *)(a1 + 136);
  v19 = *(_QWORD *)(a1 + 160);
  v20 = *(_QWORD *)(a1 + 152);
  v17 = *(_QWORD *)(a1 + 176);
  v18 = *(_QWORD *)(a1 + 168);
  v15 = *(_OWORD *)(a1 + 200);
  v16 = *(_OWORD *)(a1 + 184);
  v13 = *(_OWORD *)(a1 + 232);
  v14 = *(_OWORD *)(a1 + 216);
  v12 = *(_OWORD *)(a1 + 248);
  v10 = *(_QWORD *)(a1 + 264);
  swift_bridgeObjectRetain();
  sub_2141EF2B4(v2, v3, v4, v5);
  sub_2141EF2B4(v6, v7, v8, v9);
  sub_21422F314(v24, v23, v22, v21, v20, v19, v18, v17, v16, *((uint64_t *)&v16 + 1), v15, *((uint64_t *)&v15 + 1), v14, *((uint64_t *)&v14 + 1), v13, *((uint64_t *)&v13 + 1), v12, *((uint64_t *)&v12 + 1), v10,
    (uint64_t (*)(void))sub_21420B7DC);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_21422F6C8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(a1 + 64);
  v4 = *(_QWORD *)(a1 + 72);
  v5 = *(_QWORD *)(a1 + 80);
  v6 = *(_QWORD *)(a1 + 88);
  v7 = *(_QWORD *)(a1 + 96);
  v8 = *(_QWORD *)(a1 + 104);
  v9 = *(_QWORD *)(a1 + 112);
  v23 = *(_QWORD *)(a1 + 128);
  v24 = *(_QWORD *)(a1 + 120);
  v21 = *(_QWORD *)(a1 + 144);
  v22 = *(_QWORD *)(a1 + 136);
  v19 = *(_QWORD *)(a1 + 160);
  v20 = *(_QWORD *)(a1 + 152);
  v17 = *(_QWORD *)(a1 + 176);
  v18 = *(_QWORD *)(a1 + 168);
  v15 = *(_OWORD *)(a1 + 200);
  v16 = *(_OWORD *)(a1 + 184);
  v13 = *(_OWORD *)(a1 + 232);
  v14 = *(_OWORD *)(a1 + 216);
  v12 = *(_OWORD *)(a1 + 248);
  v10 = *(_QWORD *)(a1 + 264);
  swift_bridgeObjectRelease();
  sub_21422F7F0(v2, v3, v4, v5);
  sub_21422F7F0(v6, v7, v8, v9);
  sub_21422F314(v24, v23, v22, v21, v20, v19, v18, v17, v16, *((uint64_t *)&v16 + 1), v15, *((uint64_t *)&v15 + 1), v14, *((uint64_t *)&v14 + 1), v13, *((uint64_t *)&v13 + 1), v12, *((uint64_t *)&v12 + 1), v10,
    (uint64_t (*)(void))sub_2141EF5D4);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_21422F7F0(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  if (a4)
  {
    sub_2141ED0BC(result, a2, a3 & 1);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_21422F820(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  unint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  uint64_t v53;
  char v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  _BYTE __dst[304];
  uint64_t v104;

  v3 = a1[1];
  result = sub_214425730();
  v100 = v3;
  if (result < v3)
  {
    if (v3 >= 0)
      v5 = v3;
    else
      v5 = v3 + 1;
    if (v3 < -1)
      goto LABEL_141;
    v98 = result;
    v104 = v1;
    v95 = a1;
    if (v3 <= 1)
    {
      v7 = MEMORY[0x24BEE4AF8];
      v102 = (char *)(MEMORY[0x24BEE4AF8] + 32);
      if (v3 != 1)
      {
        v11 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
        v10 = MEMORY[0x24BEE4AF8];
LABEL_107:
        result = v10;
        v97 = v7;
        if (v11 >= 2)
        {
          v86 = *v95;
          do
          {
            v87 = v11 - 2;
            if (v11 < 2)
              goto LABEL_136;
            if (!v86)
              goto LABEL_150;
            v88 = result;
            v89 = *(_QWORD *)(result + 32 + 16 * v87);
            v90 = *(_QWORD *)(result + 32 + 16 * (v11 - 1) + 8);
            v91 = v104;
            result = sub_21422FF50((char *)(v86 + 304 * v89), (char *)(v86 + 304 * *(_QWORD *)(result + 32 + 16 * (v11 - 1))), v86 + 304 * v90, v102);
            v104 = v91;
            if (v91)
              break;
            if (v90 < v89)
              goto LABEL_137;
            result = swift_isUniquelyReferenced_nonNull_native();
            if ((result & 1) == 0)
            {
              result = (uint64_t)sub_21435010C(v88);
              v88 = result;
            }
            if (v87 >= *(_QWORD *)(v88 + 16))
              goto LABEL_138;
            v92 = (_QWORD *)(v88 + 32 + 16 * v87);
            *v92 = v89;
            v92[1] = v90;
            v93 = *(_QWORD *)(v88 + 16);
            if (v11 > v93)
              goto LABEL_139;
            memmove((void *)(v88 + 32 + 16 * (v11 - 1)), (const void *)(v88 + 32 + 16 * v11), 16 * (v93 - v11));
            result = v88;
            *(_QWORD *)(v88 + 16) = v93 - 1;
            v11 = v93 - 1;
          }
          while (v93 > 2);
        }
LABEL_97:
        swift_bridgeObjectRelease();
        *(_QWORD *)(v97 + 16) = 0;
        return swift_bridgeObjectRelease();
      }
      v97 = MEMORY[0x24BEE4AF8];
    }
    else
    {
      v6 = v5 >> 1;
      sub_2141D8BF8(&qword_253F12040);
      result = sub_21442504C();
      *(_QWORD *)(result + 16) = v6;
      v97 = result;
      v102 = (char *)(result + 32);
    }
    v8 = 0;
    v9 = *a1;
    v96 = *a1 + 608;
    v94 = *a1 - 304;
    v10 = MEMORY[0x24BEE4AF8];
    v101 = v9;
    while (1)
    {
      v12 = v8++;
      v99 = v12;
      if (v8 < v3)
      {
        v13 = *(_QWORD *)(v9 + 304 * v8);
        v14 = *(_QWORD *)(v9 + 304 * v12);
        v8 = v12 + 2;
        if (v12 + 2 < v3)
        {
          v15 = (uint64_t *)(v96 + 304 * v12);
          v16 = v13;
          while (1)
          {
            v17 = *v15;
            if (v13 < v14 == *v15 >= v16)
              break;
            v15 += 38;
            ++v8;
            v16 = v17;
            if (v3 == v8)
            {
              v8 = v3;
              break;
            }
          }
        }
        if (v13 < v14)
        {
          if (v8 < v99)
            goto LABEL_143;
          if (v99 < v8)
          {
            v18 = (char *)(v94 + 304 * v8);
            v19 = v8;
            v20 = v99;
            v21 = (char *)(v9 + 304 * v99);
            do
            {
              if (v20 != --v19)
              {
                if (!v9)
                  goto LABEL_149;
                memcpy(__dst, v21, sizeof(__dst));
                memmove(v21, v18, 0x130uLL);
                result = (uint64_t)memcpy(v18, __dst, 0x130uLL);
              }
              ++v20;
              v18 -= 304;
              v21 += 304;
            }
            while (v20 < v19);
          }
        }
      }
      if (v8 >= v3)
        break;
      if (__OFSUB__(v8, v99))
        goto LABEL_140;
      if (v8 - v99 >= v98)
        break;
      if (__OFADD__(v99, v98))
        goto LABEL_144;
      if (v99 + v98 >= v3)
        v22 = v3;
      else
        v22 = v99 + v98;
      if (v22 < v99)
      {
LABEL_145:
        __break(1u);
LABEL_146:
        __break(1u);
LABEL_147:
        __break(1u);
LABEL_148:
        __break(1u);
LABEL_149:
        __break(1u);
LABEL_150:
        __break(1u);
        return result;
      }
      v23 = v99;
      if (v8 == v22)
        goto LABEL_47;
      v24 = (_QWORD *)(v9 + 304 * v8);
      do
      {
        v25 = v99;
        v26 = v24;
        do
        {
          if (*v26 >= *(v26 - 38))
            break;
          if (!v9)
            goto LABEL_147;
          memcpy(__dst, v26, sizeof(__dst));
          memcpy(v26, v26 - 38, 0x130uLL);
          result = (uint64_t)memcpy(v26 - 38, __dst, 0x130uLL);
          ++v25;
          v26 -= 38;
        }
        while (v8 != v25);
        ++v8;
        v24 += 38;
      }
      while (v8 != v22);
      v8 = v22;
      if (v22 < v99)
        goto LABEL_135;
LABEL_48:
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        result = (uint64_t)sub_214224E24(0, *(_QWORD *)(v10 + 16) + 1, 1, (char *)v10);
        v10 = result;
      }
      v28 = *(_QWORD *)(v10 + 16);
      v27 = *(_QWORD *)(v10 + 24);
      v11 = v28 + 1;
      if (v28 >= v27 >> 1)
      {
        result = (uint64_t)sub_214224E24((char *)(v27 > 1), v28 + 1, 1, (char *)v10);
        v10 = result;
      }
      *(_QWORD *)(v10 + 16) = v11;
      v29 = v10 + 32;
      v30 = (uint64_t *)(v10 + 32 + 16 * v28);
      *v30 = v23;
      v30[1] = v8;
      if (v28)
      {
        v9 = v101;
        while (1)
        {
          v31 = v11 - 1;
          if (v11 >= 4)
          {
            v36 = v29 + 16 * v11;
            v37 = *(_QWORD *)(v36 - 64);
            v38 = *(_QWORD *)(v36 - 56);
            v42 = __OFSUB__(v38, v37);
            v39 = v38 - v37;
            if (v42)
              goto LABEL_124;
            v41 = *(_QWORD *)(v36 - 48);
            v40 = *(_QWORD *)(v36 - 40);
            v42 = __OFSUB__(v40, v41);
            v34 = v40 - v41;
            v35 = v42;
            if (v42)
              goto LABEL_125;
            v43 = v11 - 2;
            v44 = (uint64_t *)(v29 + 16 * (v11 - 2));
            v46 = *v44;
            v45 = v44[1];
            v42 = __OFSUB__(v45, v46);
            v47 = v45 - v46;
            if (v42)
              goto LABEL_126;
            v42 = __OFADD__(v34, v47);
            v48 = v34 + v47;
            if (v42)
              goto LABEL_128;
            if (v48 >= v39)
            {
              v66 = (uint64_t *)(v29 + 16 * v31);
              v68 = *v66;
              v67 = v66[1];
              v42 = __OFSUB__(v67, v68);
              v69 = v67 - v68;
              if (v42)
                goto LABEL_134;
              v59 = v34 < v69;
              goto LABEL_85;
            }
          }
          else
          {
            if (v11 != 3)
            {
              v60 = *(_QWORD *)(v10 + 32);
              v61 = *(_QWORD *)(v10 + 40);
              v42 = __OFSUB__(v61, v60);
              v53 = v61 - v60;
              v54 = v42;
              goto LABEL_79;
            }
            v33 = *(_QWORD *)(v10 + 32);
            v32 = *(_QWORD *)(v10 + 40);
            v42 = __OFSUB__(v32, v33);
            v34 = v32 - v33;
            v35 = v42;
          }
          if ((v35 & 1) != 0)
            goto LABEL_127;
          v43 = v11 - 2;
          v49 = (uint64_t *)(v29 + 16 * (v11 - 2));
          v51 = *v49;
          v50 = v49[1];
          v52 = __OFSUB__(v50, v51);
          v53 = v50 - v51;
          v54 = v52;
          if (v52)
            goto LABEL_129;
          v55 = (uint64_t *)(v29 + 16 * v31);
          v57 = *v55;
          v56 = v55[1];
          v42 = __OFSUB__(v56, v57);
          v58 = v56 - v57;
          if (v42)
            goto LABEL_131;
          if (__OFADD__(v53, v58))
            goto LABEL_133;
          if (v53 + v58 >= v34)
          {
            v59 = v34 < v58;
LABEL_85:
            if (v59)
              v31 = v43;
            goto LABEL_87;
          }
LABEL_79:
          if ((v54 & 1) != 0)
            goto LABEL_130;
          v62 = (uint64_t *)(v29 + 16 * v31);
          v64 = *v62;
          v63 = v62[1];
          v42 = __OFSUB__(v63, v64);
          v65 = v63 - v64;
          if (v42)
            goto LABEL_132;
          if (v65 < v53)
            goto LABEL_15;
LABEL_87:
          v70 = v31 - 1;
          if (v31 - 1 >= v11)
          {
            __break(1u);
LABEL_121:
            __break(1u);
LABEL_122:
            __break(1u);
LABEL_123:
            __break(1u);
LABEL_124:
            __break(1u);
LABEL_125:
            __break(1u);
LABEL_126:
            __break(1u);
LABEL_127:
            __break(1u);
LABEL_128:
            __break(1u);
LABEL_129:
            __break(1u);
LABEL_130:
            __break(1u);
LABEL_131:
            __break(1u);
LABEL_132:
            __break(1u);
LABEL_133:
            __break(1u);
LABEL_134:
            __break(1u);
LABEL_135:
            __break(1u);
LABEL_136:
            __break(1u);
LABEL_137:
            __break(1u);
LABEL_138:
            __break(1u);
LABEL_139:
            __break(1u);
LABEL_140:
            __break(1u);
LABEL_141:
            __break(1u);
LABEL_142:
            __break(1u);
LABEL_143:
            __break(1u);
LABEL_144:
            __break(1u);
            goto LABEL_145;
          }
          if (!v9)
            goto LABEL_148;
          v71 = v10;
          v72 = v9;
          v73 = (uint64_t *)(v29 + 16 * v70);
          v74 = *v73;
          v75 = (_QWORD *)(v29 + 16 * v31);
          v76 = v75[1];
          v77 = v104;
          result = sub_21422FF50((char *)(v72 + 304 * *v73), (char *)(v72 + 304 * *v75), v72 + 304 * v76, v102);
          v104 = v77;
          if (v77)
            goto LABEL_97;
          if (v76 < v74)
            goto LABEL_121;
          if (v31 > *(_QWORD *)(v71 + 16))
            goto LABEL_122;
          *v73 = v74;
          *(_QWORD *)(v29 + 16 * v70 + 8) = v76;
          v78 = *(_QWORD *)(v71 + 16);
          if (v31 >= v78)
            goto LABEL_123;
          v10 = v71;
          v11 = v78 - 1;
          result = (uint64_t)memmove((void *)(v29 + 16 * v31), v75 + 2, 16 * (v78 - 1 - v31));
          *(_QWORD *)(v71 + 16) = v78 - 1;
          v59 = v78 > 2;
          v9 = v101;
          if (!v59)
            goto LABEL_15;
        }
      }
      v11 = 1;
      v9 = v101;
LABEL_15:
      v3 = v100;
      if (v8 >= v100)
      {
        v7 = v97;
        goto LABEL_107;
      }
    }
    v23 = v99;
LABEL_47:
    if (v8 < v23)
      goto LABEL_135;
    goto LABEL_48;
  }
  if (v3 < 0)
    goto LABEL_142;
  if ((unint64_t)v3 >= 2)
  {
    v79 = (_QWORD *)*a1;
    v80 = -1;
    v81 = 1;
    v82 = v79;
    do
    {
      v83 = v80;
      v84 = v82;
      do
      {
        if (v84[38] >= *v84)
          break;
        if (!v79)
          goto LABEL_146;
        memcpy(__dst, v84 + 38, sizeof(__dst));
        memcpy(v84 + 38, v84, 0x130uLL);
        result = (uint64_t)memcpy(v84, __dst, 0x130uLL);
        v84 -= 38;
      }
      while (!__CFADD__(v83++, 1));
      ++v81;
      v82 += 38;
      --v80;
    }
    while (v81 != v100);
  }
  return result;
}

uint64_t sub_21422FF50(char *__dst, char *__src, unint64_t a3, char *a4)
{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  BOOL v14;
  char *v15;
  char *v16;
  char *v17;
  BOOL v18;
  uint64_t v19;

  v4 = a4;
  v6 = __src;
  v7 = __dst;
  v8 = __src - __dst;
  v9 = (__src - __dst) / 304;
  v10 = a3 - (_QWORD)__src;
  v11 = (uint64_t)(a3 - (_QWORD)__src) / 304;
  if (v9 >= v11)
  {
    if (a4 != __src || &__src[304 * v11] <= a4)
      memmove(a4, __src, 304 * v11);
    v12 = &v4[304 * v11];
    if (v7 >= v6 || v10 < 304)
      goto LABEL_36;
    v15 = (char *)(a3 - 304);
    while (1)
    {
      v16 = v15 + 304;
      v17 = v6 - 304;
      if (*((_QWORD *)v12 - 38) >= *((_QWORD *)v6 - 38))
      {
        v17 = v12 - 304;
        if (v16 != v12)
        {
          v12 -= 304;
          goto LABEL_33;
        }
        v18 = v15 >= v12;
        v12 -= 304;
        if (v18)
          goto LABEL_33;
      }
      else
      {
        if (v16 != v6)
        {
          v6 -= 304;
LABEL_33:
          memmove(v15, v17, 0x130uLL);
          goto LABEL_34;
        }
        v18 = v15 >= v6;
        v6 -= 304;
        if (v18)
          goto LABEL_33;
      }
LABEL_34:
      if (v6 > v7)
      {
        v15 -= 304;
        if (v12 > v4)
          continue;
      }
      goto LABEL_36;
    }
  }
  if (a4 != __dst || &__dst[304 * v9] <= a4)
    memmove(a4, __dst, 304 * v9);
  v12 = &v4[304 * v9];
  if ((unint64_t)v6 < a3 && v8 >= 304)
  {
    while (*(_QWORD *)v6 < *(_QWORD *)v4)
    {
      v13 = v6;
      v14 = v7 == v6;
      v6 += 304;
      if (!v14)
        goto LABEL_12;
LABEL_13:
      v7 += 304;
      if (v4 >= v12 || (unint64_t)v6 >= a3)
        goto LABEL_15;
    }
    v13 = v4;
    v14 = v7 == v4;
    v4 += 304;
    if (v14)
      goto LABEL_13;
LABEL_12:
    memmove(v7, v13, 0x130uLL);
    goto LABEL_13;
  }
LABEL_15:
  v6 = v7;
LABEL_36:
  v19 = (v12 - v4) / 304;
  if (v6 != v4 || v6 >= &v4[304 * v19])
    memmove(v6, v4, 304 * v19);
  return 1;
}

uint64_t sub_214230194(uint64_t a1, uint64_t a2)
{
  int64_t v2;
  uint64_t v3;
  uint64_t v5;
  int64_t i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD v20[19];
  _BYTE v21[152];
  _BYTE v22[160];
  uint64_t v23;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = MEMORY[0x24BEE4AF8];
  if (v2)
  {
    v23 = MEMORY[0x24BEE4AF8];
    sub_2141D40D0(0, v2, 0);
    v3 = v23;
    v5 = a1 + 32;
    for (i = v2 - 1; ; --i)
    {
      sub_2141EF6B8(v5, (uint64_t)v20);
      sub_2141EF6B8((uint64_t)v20, (uint64_t)v21);
      nullsub_1(v21, v7);
      sub_2141E801C((uint64_t)v21, (uint64_t)v22, &qword_253F13428);
      sub_21421C318(v20, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21420B7DC);
      v8 = sub_21422BE94((uint64_t)v22, a2);
      v10 = v9;
      v12 = v11;
      v14 = v13;
      sub_21421C318(v20, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141EF5D4);
      v23 = v3;
      v16 = *(_QWORD *)(v3 + 16);
      v15 = *(_QWORD *)(v3 + 24);
      if (v16 >= v15 >> 1)
      {
        sub_2141D40D0((_QWORD *)(v15 > 1), v16 + 1, 1);
        v3 = v23;
      }
      *(_QWORD *)(v3 + 16) = v16 + 1;
      v17 = (_QWORD *)(v3 + 32 * v16);
      v17[4] = v8;
      v17[5] = v10;
      v17[6] = v12;
      v17[7] = v14;
      if (!i)
        break;
      v5 += 152;
    }
  }
  return v3;
}

uint64_t sub_2142302E0(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 272);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

uint64_t sub_2142302F8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v3 = *(_QWORD *)(a1 + 56);
  v2 = *(_QWORD *)(a1 + 64);
  v4 = *(_QWORD *)(a1 + 72);
  v5 = *(_QWORD *)(a1 + 80);
  v6 = *(_QWORD *)(a1 + 96);
  v14 = *(_QWORD *)(a1 + 88);
  v7 = *(_QWORD *)(a1 + 104);
  v8 = *(_QWORD *)(a1 + 112);
  v36 = *(_QWORD *)(a1 + 136);
  v37 = *(_QWORD *)(a1 + 128);
  v35 = *(_QWORD *)(a1 + 144);
  v33 = *(_QWORD *)(a1 + 160);
  v34 = *(_QWORD *)(a1 + 152);
  v31 = *(_QWORD *)(a1 + 176);
  v32 = *(_QWORD *)(a1 + 168);
  v30 = *(_QWORD *)(a1 + 184);
  v19 = *(_OWORD *)(a1 + 192);
  v17 = *(_OWORD *)(a1 + 208);
  v15 = *(_OWORD *)(a1 + 224);
  v12 = *(_OWORD *)(a1 + 256);
  v13 = *(_OWORD *)(a1 + 240);
  v9 = *(_QWORD *)(a1 + 272);
  v51 = *(_QWORD *)(a1 + 296);
  v52 = *(_QWORD *)(a1 + 288);
  v49 = *(_QWORD *)(a1 + 312);
  v50 = *(_QWORD *)(a1 + 304);
  v47 = *(_QWORD *)(a1 + 328);
  v48 = *(_QWORD *)(a1 + 320);
  v45 = *(_QWORD *)(a1 + 344);
  v46 = *(_QWORD *)(a1 + 336);
  v27 = *(_OWORD *)(a1 + 352);
  v24 = *(_OWORD *)(a1 + 368);
  v22 = *(_OWORD *)(a1 + 384);
  v20 = *(_OWORD *)(a1 + 400);
  v18 = *(_OWORD *)(a1 + 416);
  v44 = *(_OWORD *)(a1 + 504);
  v39 = *(_OWORD *)(a1 + 520);
  v25 = *(_OWORD *)(a1 + 536);
  v23 = *(_OWORD *)(a1 + 552);
  v21 = *(_OWORD *)(a1 + 568);
  v10 = *(_QWORD *)(a1 + 432);
  v26 = *(_QWORD *)(a1 + 440);
  v28 = *(_QWORD *)(a1 + 448);
  v29 = *(_QWORD *)(a1 + 456);
  v38 = *(_QWORD *)(a1 + 464);
  v40 = *(_QWORD *)(a1 + 472);
  v41 = *(_QWORD *)(a1 + 480);
  v42 = *(_QWORD *)(a1 + 488);
  v43 = *(_QWORD *)(a1 + 496);
  v16 = *(_QWORD *)(a1 + 584);
  swift_bridgeObjectRetain();
  sub_2141EF2B4(v3, v2, v4, v5);
  sub_2141EF2B4(v14, v6, v7, v8);
  swift_bridgeObjectRetain();
  sub_21422F314(v37, v36, v35, v34, v33, v32, v31, v30, v19, *((uint64_t *)&v19 + 1), v17, *((uint64_t *)&v17 + 1), v15, *((uint64_t *)&v15 + 1), v13, *((uint64_t *)&v13 + 1), v12, *((uint64_t *)&v12 + 1), v9,
    (uint64_t (*)(void))sub_21420B7DC);
  swift_bridgeObjectRetain();
  sub_21422F314(v52, v51, v50, v49, v48, v47, v46, v45, v27, *((uint64_t *)&v27 + 1), v24, *((uint64_t *)&v24 + 1), v22, *((uint64_t *)&v22 + 1), v20, *((uint64_t *)&v20 + 1), v18, *((uint64_t *)&v18 + 1), v10,
    (uint64_t (*)(void))sub_21420B7DC);
  sub_21422F314(v26, v28, v29, v38, v40, v41, v42, v43, v44, *((uint64_t *)&v44 + 1), v39, *((uint64_t *)&v39 + 1), v25, *((uint64_t *)&v25 + 1), v23, *((uint64_t *)&v23 + 1), v21, *((uint64_t *)&v21 + 1), v16,
    (uint64_t (*)(void))sub_21420B7DC);
  return a1;
}

unint64_t sub_21423057C()
{
  unint64_t result;

  result = qword_253F13420;
  if (!qword_253F13420)
  {
    result = MEMORY[0x2199CD934](&unk_214434EF8, &type metadata for SgAccessibilityRenderer.AXShape);
    atomic_store(result, (unint64_t *)&qword_253F13420);
  }
  return result;
}

uint64_t sub_2142305C0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v3 = *(_QWORD *)(a1 + 56);
  v2 = *(_QWORD *)(a1 + 64);
  v4 = *(_QWORD *)(a1 + 72);
  v5 = *(_QWORD *)(a1 + 80);
  v6 = *(_QWORD *)(a1 + 96);
  v14 = *(_QWORD *)(a1 + 88);
  v7 = *(_QWORD *)(a1 + 104);
  v8 = *(_QWORD *)(a1 + 112);
  v36 = *(_QWORD *)(a1 + 136);
  v37 = *(_QWORD *)(a1 + 128);
  v35 = *(_QWORD *)(a1 + 144);
  v33 = *(_QWORD *)(a1 + 160);
  v34 = *(_QWORD *)(a1 + 152);
  v31 = *(_QWORD *)(a1 + 176);
  v32 = *(_QWORD *)(a1 + 168);
  v30 = *(_QWORD *)(a1 + 184);
  v19 = *(_OWORD *)(a1 + 192);
  v17 = *(_OWORD *)(a1 + 208);
  v15 = *(_OWORD *)(a1 + 224);
  v12 = *(_OWORD *)(a1 + 256);
  v13 = *(_OWORD *)(a1 + 240);
  v9 = *(_QWORD *)(a1 + 272);
  v51 = *(_QWORD *)(a1 + 296);
  v52 = *(_QWORD *)(a1 + 288);
  v49 = *(_QWORD *)(a1 + 312);
  v50 = *(_QWORD *)(a1 + 304);
  v47 = *(_QWORD *)(a1 + 328);
  v48 = *(_QWORD *)(a1 + 320);
  v45 = *(_QWORD *)(a1 + 344);
  v46 = *(_QWORD *)(a1 + 336);
  v27 = *(_OWORD *)(a1 + 352);
  v24 = *(_OWORD *)(a1 + 368);
  v22 = *(_OWORD *)(a1 + 384);
  v20 = *(_OWORD *)(a1 + 400);
  v18 = *(_OWORD *)(a1 + 416);
  v44 = *(_OWORD *)(a1 + 504);
  v39 = *(_OWORD *)(a1 + 520);
  v25 = *(_OWORD *)(a1 + 536);
  v23 = *(_OWORD *)(a1 + 552);
  v21 = *(_OWORD *)(a1 + 568);
  v10 = *(_QWORD *)(a1 + 432);
  v26 = *(_QWORD *)(a1 + 440);
  v28 = *(_QWORD *)(a1 + 448);
  v29 = *(_QWORD *)(a1 + 456);
  v38 = *(_QWORD *)(a1 + 464);
  v40 = *(_QWORD *)(a1 + 472);
  v41 = *(_QWORD *)(a1 + 480);
  v42 = *(_QWORD *)(a1 + 488);
  v43 = *(_QWORD *)(a1 + 496);
  v16 = *(_QWORD *)(a1 + 584);
  swift_bridgeObjectRelease();
  sub_21422F7F0(v3, v2, v4, v5);
  sub_21422F7F0(v14, v6, v7, v8);
  swift_bridgeObjectRelease();
  sub_21422F314(v37, v36, v35, v34, v33, v32, v31, v30, v19, *((uint64_t *)&v19 + 1), v17, *((uint64_t *)&v17 + 1), v15, *((uint64_t *)&v15 + 1), v13, *((uint64_t *)&v13 + 1), v12, *((uint64_t *)&v12 + 1), v9,
    (uint64_t (*)(void))sub_2141EF5D4);
  swift_bridgeObjectRelease();
  sub_21422F314(v52, v51, v50, v49, v48, v47, v46, v45, v27, *((uint64_t *)&v27 + 1), v24, *((uint64_t *)&v24 + 1), v22, *((uint64_t *)&v22 + 1), v20, *((uint64_t *)&v20 + 1), v18, *((uint64_t *)&v18 + 1), v10,
    (uint64_t (*)(void))sub_2141EF5D4);
  sub_21422F314(v26, v28, v29, v38, v40, v41, v42, v43, v44, *((uint64_t *)&v44 + 1), v39, *((uint64_t *)&v39 + 1), v25, *((uint64_t *)&v25 + 1), v23, *((uint64_t *)&v23 + 1), v21, *((uint64_t *)&v21 + 1), v16,
    (uint64_t (*)(void))sub_2141EF5D4);
  return a1;
}

uint64_t sub_214230844(uint64_t a1, uint64_t a2)
{
  int64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t result;
  uint64_t *v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[20];
  uint64_t v30;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = MEMORY[0x24BEE4AF8];
  if (!v2)
    return MEMORY[0x24BEE4AF8];
  v30 = MEMORY[0x24BEE4AF8];
  sub_2141D3A84(0, v2, 0);
  v6 = 0;
  result = v30;
  v25 = a1 + 32;
  v26 = v2;
  do
  {
    v28 = result;
    v8 = (uint64_t *)(v25 + 16 * v6);
    v9 = *v8;
    v10 = *(_QWORD *)(*v8 + 16);
    if (v10)
    {
      v27 = v6;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_2141D3A84(0, v10, 0);
      v11 = v9 + 32;
      do
      {
        sub_2141EF6B8(v11, (uint64_t)v29);
        sub_21421C318(v29, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21420B7DC);
        v12 = sub_21422C664((uint64_t)v29, a2);
        v14 = v13;
        sub_21421C318(v29, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141EF5D4);
        v16 = *(_QWORD *)(v3 + 16);
        v15 = *(_QWORD *)(v3 + 24);
        if (v16 >= v15 >> 1)
          sub_2141D3A84((char *)(v15 > 1), v16 + 1, 1);
        *(_QWORD *)(v3 + 16) = v16 + 1;
        v17 = v3 + 16 * v16;
        *(_QWORD *)(v17 + 32) = v12;
        *(_QWORD *)(v17 + 40) = v14;
        v11 += 152;
        --v10;
      }
      while (v10);
      swift_bridgeObjectRelease();
      v18 = MEMORY[0x24BEE4AF8];
      v6 = v27;
    }
    else
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v18 = v3;
    }
    sub_2141D8BF8(&qword_253F12250);
    sub_2142312B8();
    v19 = sub_214424E54();
    v21 = v20;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = v28;
    v30 = v28;
    v23 = *(_QWORD *)(v28 + 16);
    v22 = *(_QWORD *)(v28 + 24);
    if (v23 >= v22 >> 1)
    {
      sub_2141D3A84((char *)(v22 > 1), v23 + 1, 1);
      result = v30;
    }
    ++v6;
    *(_QWORD *)(result + 16) = v23 + 1;
    v24 = result + 16 * v23;
    *(_QWORD *)(v24 + 32) = v19;
    *(_QWORD *)(v24 + 40) = v21;
    v3 = v18;
  }
  while (v6 != v26);
  return result;
}

char *sub_214230AAC(uint64_t a1, uint64_t (*a2)(_QWORD *, uint64_t))
{
  uint64_t v2;
  uint64_t *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[8];
  char *v29;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    return (char *)MEMORY[0x24BEE4AF8];
  v3 = (uint64_t *)(swift_bridgeObjectRetain() + 48);
  v4 = (char *)MEMORY[0x24BEE4AF8];
  do
  {
    v29 = v4;
    v5 = v3[6];
    v26 = v3[5];
    v27 = v2;
    v7 = v3[3];
    v6 = v3[4];
    v9 = v3[1];
    v8 = v3[2];
    v11 = *(v3 - 1);
    v10 = *v3;
    v12 = *(v3 - 2);
    v28[0] = v12;
    v28[1] = v11;
    v28[2] = v10;
    v28[3] = v9;
    v28[4] = v8;
    v28[5] = v7;
    v28[6] = v6;
    v28[7] = v26;
    sub_21421C1D8(v12, v11, v10, v9, v8, v7, v6);
    swift_bridgeObjectRetain();
    v13 = a2(v28, v5);
    v23 = v14;
    v24 = v13;
    v25 = v15;
    v17 = v16;
    sub_21421C24C(v12, v11, v10, v9, v8, v7, v6);
    swift_bridgeObjectRelease();
    if (v17)
    {
      v4 = v29;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v4 = sub_2142257BC(0, *((_QWORD *)v4 + 2) + 1, 1, v4);
      v19 = *((_QWORD *)v4 + 2);
      v18 = *((_QWORD *)v4 + 3);
      if (v19 >= v18 >> 1)
        v4 = sub_2142257BC((char *)(v18 > 1), v19 + 1, 1, v4);
      *((_QWORD *)v4 + 2) = v19 + 1;
      v20 = &v4[32 * v19];
      *((_QWORD *)v20 + 4) = v24;
      *((_QWORD *)v20 + 5) = v23;
      v20[48] = v25 & 1;
      *((_QWORD *)v20 + 7) = v17;
    }
    else
    {
      v4 = v29;
    }
    v3 += 9;
    v2 = v27 - 1;
  }
  while (v27 != 1);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_214230C70(uint64_t result)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36[2];
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD v42[19];
  _BYTE v43[152];
  _QWORD v44[9];
  uint64_t v45;

  v1 = *(_QWORD *)(result + 16);
  if (!v1)
    return MEMORY[0x24BEE4AF8];
  v2 = 0;
  v3 = result + 32;
  v4 = MEMORY[0x24BEE4AF8];
  v28 = v1 - 1;
  v29 = result + 32;
  v31 = *(_QWORD *)(result + 16);
  do
  {
    v30 = v4;
    if (v2 <= v1)
      v5 = v1;
    else
      v5 = v2;
    v33 = v5;
    v6 = v3 + 152 * v2;
    v7 = v2;
    while (1)
    {
      if (v33 == v7)
      {
        __break(1u);
        return result;
      }
      sub_2141EF6B8(v6, (uint64_t)v42);
      sub_2141EF6B8((uint64_t)v42, (uint64_t)v43);
      v8 = sub_21421C2FC((uint64_t)v43);
      v9 = sub_21421C308((uint64_t)v43);
      if (v8 == 1)
      {
        v10 = *(_QWORD *)(v9 + 16);
        v11 = *(unsigned __int8 *)(v9 + 24);
        v12 = *(_QWORD *)(v9 + 32);
        v14 = *(_QWORD *)(v9 + 80);
        v13 = *(_QWORD *)(v9 + 88);
        v15 = *(unsigned __int8 *)(v9 + 96);
        v16 = *(_QWORD *)(v9 + 104);
        v32 = *(_QWORD *)(v9 + 8);
        sub_2141DD130(v32, v10, v11);
        swift_bridgeObjectRetain();
        v34 = v13;
        v35 = v14;
        v17 = v14;
        v18 = v13;
        v20 = v32;
        v19 = v15 | 0x8000000000000000;
        v21 = v15;
        v1 = v31;
        sub_2141DD130(v17, v18, v21);
        v22 = v16;
      }
      else
      {
        v20 = *(_QWORD *)(v9 + 8);
        v10 = *(_QWORD *)(v9 + 16);
        v11 = *(unsigned __int8 *)(v9 + 24);
        v23 = *(_QWORD *)(v9 + 32);
        sub_2141DD130(v20, v10, v11);
        v34 = 0;
        v35 = 0;
        v19 = 0;
        v22 = 0;
        v12 = v23;
      }
      swift_bridgeObjectRetain();
      v44[0] = v20;
      v44[1] = v10;
      v44[2] = v11;
      v44[3] = v12;
      v44[4] = v35;
      v44[5] = v34;
      v44[6] = v19;
      v44[7] = v22;
      sub_21421C318(v42, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21420B7DC);
      v24 = sub_2142126CC((uint64_t)v36, v44);
      sub_21421C24C(v36[0], v36[1], v37, v38, v39, v40, v41);
      if ((v24 & 1) != 0)
        break;
      ++v7;
      result = (uint64_t)sub_21421C318(v42, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141EF5D4);
      v6 += 152;
      if (v1 == v7)
        return v30;
    }
    v4 = v30;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v45 = v30;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_2141D40B4(0, *(_QWORD *)(v30 + 16) + 1, 1);
      v4 = v45;
    }
    v27 = *(_QWORD *)(v4 + 16);
    v26 = *(_QWORD *)(v4 + 24);
    if (v27 >= v26 >> 1)
    {
      sub_2141D40B4((char *)(v26 > 1), v27 + 1, 1);
      v4 = v45;
    }
    v2 = v7 + 1;
    *(_QWORD *)(v4 + 16) = v27 + 1;
    result = sub_2141EF6B8((uint64_t)v42, v4 + 152 * v27 + 32);
    v1 = v31;
    v3 = v29;
  }
  while (v28 != v7);
  return v4;
}

uint64_t sub_214230EF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, unint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,unint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  uint64_t result;

  if (a35)
  {
    swift_bridgeObjectRelease();
    sub_21422F7F0(a8, a9, a10, a11);
    sub_21422F7F0(a12, a13, a14, a15);
    sub_21422F314(a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34,
      (uint64_t (*)(void))sub_2141EF5D4);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_214231094(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  __int128 v4;
  __int128 v5;
  __int128 v6;

  v5 = *(_OWORD *)(a1 + 240);
  v6 = *(_OWORD *)(a1 + 256);
  v4 = *(_OWORD *)(a1 + 208);
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    *(_QWORD *)(a1 + 200),
    v4,
    *((_QWORD *)&v4 + 1),
    *(_QWORD *)(a1 + 224),
    *(_QWORD *)(a1 + 232),
    v5,
    *((_QWORD *)&v5 + 1),
    v6,
    *((_QWORD *)&v6 + 1),
    *(_QWORD *)(a1 + 272),
    *(_QWORD *)(a1 + 280));
  return a1;
}

uint64_t sub_214231118(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, unint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,unint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  uint64_t result;

  if (a35)
  {
    swift_bridgeObjectRetain();
    sub_2141EF2B4(a8, a9, a10, a11);
    sub_2141EF2B4(a12, a13, a14, a15);
    sub_21422F314(a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34,
      (uint64_t (*)(void))sub_21420B7DC);
    return swift_bridgeObjectRetain();
  }
  return result;
}

unint64_t sub_2142312B8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_253F12258;
  if (!qword_253F12258)
  {
    v1 = sub_2141D7924(&qword_253F12250);
    result = MEMORY[0x2199CD934](MEMORY[0x24BEE12B0], v1);
    atomic_store(result, (unint64_t *)&qword_253F12258);
  }
  return result;
}

uint64_t sub_214231304(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return sub_21422E214(a1, a2, v2[2], v2[3], v2[4], v2[5], v2[6], v2[7], v2[8]);
}

uint64_t sub_214231334(uint64_t result)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v1 = 0;
  v2 = *(_QWORD *)(result + 16);
  v3 = result + 32;
  v4 = MEMORY[0x24BEE4AF8];
LABEL_2:
  if (v1 <= v2)
    v5 = v2;
  else
    v5 = v1;
  while (1)
  {
    if (v2 == v1)
      return v4;
    if (v5 == v1)
      break;
    v6 = *(_QWORD *)(v3 + 8 * v1++);
    if ((~v6 & 0x7FF0000000000000) != 0)
    {
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
        result = (uint64_t)sub_2141D3AA0(0, *(_QWORD *)(v4 + 16) + 1, 1);
      v8 = *(_QWORD *)(v4 + 16);
      v7 = *(_QWORD *)(v4 + 24);
      if (v8 >= v7 >> 1)
        result = (uint64_t)sub_2141D3AA0((char *)(v7 > 1), v8 + 1, 1);
      *(_QWORD *)(v4 + 16) = v8 + 1;
      *(_QWORD *)(v4 + 8 * v8 + 32) = v6;
      goto LABEL_2;
    }
  }
  __break(1u);
  return result;
}

uint64_t *sub_21423142C(uint64_t *a1)
{
  sub_2141EF2B4(*a1, a1[1], a1[2], a1[3]);
  return a1;
}

uint64_t sub_21423145C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SgGroup(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_2142314A0(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for SgGroup(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

double sub_2142314DC(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[16] = 0u;
  a1[17] = 0u;
  a1[14] = 0u;
  a1[15] = 0u;
  a1[12] = 0u;
  a1[13] = 0u;
  a1[10] = 0u;
  a1[11] = 0u;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t sub_214231508(uint64_t a1)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;

  v4 = *(_OWORD *)(a1 + 256);
  v5 = *(_OWORD *)(a1 + 272);
  v3 = *(_OWORD *)(a1 + 224);
  sub_214231588(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_OWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_OWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    *(_QWORD *)(a1 + 200),
    *(_QWORD *)(a1 + 208),
    *(_QWORD *)(a1 + 216),
    v3,
    *((uint64_t *)&v3 + 1),
    *(_QWORD *)(a1 + 240),
    *(_QWORD *)(a1 + 248),
    v4,
    *((uint64_t *)&v4 + 1),
    v5,
    *((uint64_t *)&v5 + 1));
  return a1;
}

uint64_t sub_214231588(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, unint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,unint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  uint64_t result;

  if (a36)
  {
    swift_bridgeObjectRelease();
    sub_21422F7F0(a9, a10, a11, a12);
    sub_21422F7F0(a13, a14, a15, a16);
    sub_21422F314(a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35,
      (uint64_t (*)(void))sub_2141EF5D4);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

double sub_214231744@<D0>(uint64_t a1@<X8>)
{
  double result;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;

  sub_2141DD1D0();
  sub_214424224();
  result = *(double *)&v3;
  *(_OWORD *)a1 = v3;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 48) = v6;
  return result;
}

uint64_t *sub_21423179C(uint64_t *result, unsigned __int16 *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;

  v2 = result;
  v3 = result[6];
  if (v3 == 1)
  {
    v4 = *((unsigned __int8 *)a2 + 24);
    v5 = *((_QWORD *)a2 + 4);
    v6 = *((unsigned __int8 *)a2 + 40);
    v7 = *((_QWORD *)a2 + 6);
    *v2 = *a2;
    *(_OWORD *)(v2 + 1) = *(_OWORD *)(a2 + 4);
    v2[3] = v4;
    v2[4] = v5;
    v2[5] = v6;
    v2[6] = v7;
    return (uint64_t *)swift_retain();
  }
  else
  {
    v8 = *result;
    v9 = result[1];
    v10 = result[2];
    v11 = result[3];
    v13 = result[4];
    v12 = result[5];
    v14 = v11 & 1;
    v15 = *((_BYTE *)a2 + 40);
    v16 = *((_QWORD *)a2 + 6);
    if (*(_BYTE *)a2 == 3)
      v17 = *result;
    else
      v17 = *(unsigned __int8 *)a2;
    if (*((_BYTE *)a2 + 1) == 9)
      v18 = BYTE1(*result);
    else
      v18 = *((unsigned __int8 *)a2 + 1);
    if ((a2[20] & 1) != 0)
      v19 = result[4];
    else
      v19 = *((_QWORD *)a2 + 4);
    v20 = v15 & v12;
    if (v16)
    {
      v23 = v19;
      v21 = v15 & v12;
      v22 = v17;
      sub_214231F98((uint64_t)a2);
      result = (uint64_t *)sub_214231FC0(v8, v9, v10, v11, v13, v12, v3);
      v20 = v21;
      v17 = v22;
      v19 = v23;
      v14 = v11 & 1;
      v3 = v16;
    }
    *v2 = v17 | (v18 << 8);
    v2[1] = v9;
    v2[2] = v10;
    v2[3] = v14;
    v2[4] = v19;
    v2[5] = v20 & 1;
    v2[6] = v3;
  }
  return result;
}

uint64_t sub_2142318D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v11;
  _BYTE v12[8];

  KeyPath = swift_getKeyPath();
  v6 = swift_allocObject();
  v7 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)(v6 + 16) = *(_OWORD *)v2;
  *(_OWORD *)(v6 + 32) = v7;
  *(_OWORD *)(v6 + 48) = *(_OWORD *)(v2 + 32);
  *(_QWORD *)(v6 + 64) = *(_QWORD *)(v2 + 48);
  v8 = sub_2141D8BF8(&qword_253F10C30);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a2, a1, v8);
  v9 = (uint64_t *)(a2 + *(int *)(sub_2141D8BF8(&qword_253F10C20) + 36));
  *v9 = KeyPath;
  v9[1] = (uint64_t)sub_214231F20;
  v9[2] = v6;
  v11 = *(_QWORD *)(v2 + 48);
  sub_214231F28((uint64_t)&v11, (uint64_t)v12);
  return sub_214231F70((uint64_t)v12);
}

uint64_t sub_2142319C4(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  _OWORD v5[3];
  uint64_t v6;
  _OWORD v7[3];
  uint64_t v8;

  v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  v5[2] = *(_OWORD *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 48);
  v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  v7[2] = *(_OWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 48);
  return sub_21423203C((uint64_t)v5, (double *)v7) & 1;
}

uint64_t View.chartLegend<A>(position:alignment:spacing:content:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v15;
  void (*v16)(void);
  uint64_t v17;
  _BYTE v20[8];
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  uint64_t v26;

  v15 = *(_BYTE *)MEMORY[0x24BDAC7A8](a1);
  v16();
  v17 = sub_214424B18();
  v20[0] = 3;
  v20[1] = v15;
  v21 = a2;
  v22 = a3;
  v23 = a4 & 1;
  v24 = a5;
  v25 = a6 & 1;
  v26 = v17;
  MEMORY[0x2199CC254](v20, a9, &type metadata for ChartLegendModifier, a11);
  return swift_release();
}

uint64_t View.chartLegend(position:alignment:spacing:)(char *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8)
{
  char v8;
  _BYTE v10[8];
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;

  v8 = *a1;
  v10[0] = 3;
  v10[1] = v8;
  v11 = a2;
  v12 = a3;
  v13 = a4 & 1;
  v14 = a5;
  v15 = a6 & 1;
  v16 = 0;
  return MEMORY[0x2199CC254](v10, a7, &type metadata for ChartLegendModifier, a8);
}

uint64_t View.chartLegend(_:)(char a1, uint64_t a2, uint64_t a3)
{
  _BYTE v4[8];
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;

  v4[0] = a1;
  v4[1] = 9;
  v5 = 0;
  v6 = 0;
  v7 = 1;
  v8 = 0;
  v9 = 1;
  v10 = 0;
  return MEMORY[0x2199CC254](v4, a2, &type metadata for ChartLegendModifier, a3);
}

uint64_t sub_214231BCC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 16);
  v2 = sub_214424110();
  v4[0] = v1;
  v4[1] = sub_214231C24();
  return MEMORY[0x2199CD934](MEMORY[0x24BDED308], v2, v4);
}

unint64_t sub_214231C24()
{
  unint64_t result;

  result = qword_253F109B8[0];
  if (!qword_253F109B8[0])
  {
    result = MEMORY[0x2199CD934](&unk_2144289BC, &type metadata for ChartLegendModifier);
    atomic_store(result, qword_253F109B8);
  }
  return result;
}

uint64_t sub_214231C68(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  v2 = sub_214424110();
  v4[0] = v1;
  v4[1] = sub_214231C24();
  return MEMORY[0x2199CD934](MEMORY[0x24BDED308], v2, v4);
}

uint64_t destroy for ChartLegendModifier()
{
  return swift_release();
}

__n128 initializeWithTake for ChartLegendConfiguration(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

ValueMetadata *type metadata accessor for ChartLegendModifier()
{
  return &type metadata for ChartLegendModifier;
}

uint64_t _s6Charts24ChartLegendConfigurationVwcp_0(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_retain();
  return a1;
}

uint64_t _s6Charts24ChartLegendConfigurationVwca_0(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  v3 = *(_OWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t _s6Charts24ChartLegendConfigurationVwta_0(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_release();
  return a1;
}

uint64_t _s6Charts24ChartLegendConfigurationVwet_0(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 56))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 48);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t _s6Charts24ChartLegendConfigurationVwst_0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 56) = 0;
    if (a2)
      *(_QWORD *)(result + 48) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ChartLegendConfiguration()
{
  return &type metadata for ChartLegendConfiguration;
}

uint64_t sub_214231EE4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_214231EFC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t *sub_214231F20(uint64_t *a1)
{
  uint64_t v1;

  return sub_21423179C(a1, (unsigned __int16 *)(v1 + 16));
}

uint64_t sub_214231F28(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_2141D8BF8(&qword_253F10C50);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_214231F70(uint64_t a1)
{
  swift_retain();
  return a1;
}

uint64_t sub_214231F98(uint64_t a1)
{
  swift_retain();
  return a1;
}

uint64_t sub_214231FC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result;

  if (a7 != 1)
    return swift_release();
  return result;
}

double sub_214231FD4@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_QWORD *)(a1 + 48) = 1;
  return result;
}

uint64_t sub_214231FEC()
{
  sub_214232264();
  return sub_214423EE8();
}

uint64_t sub_21423203C(uint64_t a1, double *a2)
{
  int v4;
  int v5;
  int v6;
  char v8;
  _BYTE v10[8];
  _BYTE v11[8];
  uint64_t v12;
  _QWORD v13[2];

  v13[1] = *MEMORY[0x24BDAC8D0];
  v4 = *(unsigned __int8 *)a2;
  if (*(_BYTE *)a1 == 3)
  {
    if (v4 != 3)
      return 0;
  }
  else if (v4 == 3 || (sub_214423D2C() & 1) == 0)
  {
    return 0;
  }
  v5 = *(unsigned __int8 *)(a1 + 1);
  v6 = *((unsigned __int8 *)a2 + 1);
  if (v5 == 9)
  {
    if (v6 != 9)
      return 0;
  }
  else if (v6 == 9 || v5 != v6)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    if (((_BYTE)a2[3] & 1) == 0)
      return 0;
  }
  else if (((_BYTE)a2[3] & 1) != 0 || (sub_214424C20() & 1) == 0)
  {
    return 0;
  }
  v8 = *((_BYTE *)a2 + 40);
  if ((*(_BYTE *)(a1 + 40) & 1) != 0)
  {
    if (*((_BYTE *)a2 + 40))
      goto LABEL_25;
    return 0;
  }
  if (*(double *)(a1 + 32) != a2[4])
    v8 = 1;
  if ((v8 & 1) != 0)
    return 0;
LABEL_25:
  sub_214231F28(a1 + 48, (uint64_t)v11);
  sub_214231F28((uint64_t)(a2 + 6), (uint64_t)v10);
  sub_214231F28((uint64_t)v11, (uint64_t)&v12);
  if (v12)
  {
    sub_214231F28((uint64_t)v10, (uint64_t)v13);
    if (v13[0])
      return AGCompareValues();
    return 0;
  }
  sub_214231F28((uint64_t)v10, (uint64_t)v13);
  return v13[0] == 0;
}

ValueMetadata *type metadata accessor for ChartLegendConfigurationsKey()
{
  return &type metadata for ChartLegendConfigurationsKey;
}

unint64_t sub_2142321C8()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_253F10C18;
  if (!qword_253F10C18)
  {
    v1 = sub_2141D7924(&qword_253F10C20);
    v2[0] = sub_2141D9054(&qword_253F10C28, &qword_253F10C30, MEMORY[0x24BDEFB78]);
    v2[1] = sub_2141D9054(&qword_253F10C40, &qword_253F10C48, MEMORY[0x24BDF1248]);
    result = MEMORY[0x2199CD934](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&qword_253F10C18);
  }
  return result;
}

unint64_t sub_214232264()
{
  unint64_t result;
  uint64_t v1;
  unint64_t v2;

  result = qword_254D698E8;
  if (!qword_254D698E8)
  {
    v1 = sub_2141D7924(&qword_253F14EA0);
    v2 = sub_2142322C8();
    result = MEMORY[0x2199CD934](MEMORY[0x24BEE4AB8], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_254D698E8);
  }
  return result;
}

unint64_t sub_2142322C8()
{
  unint64_t result;

  result = qword_254D698F0;
  if (!qword_254D698F0)
  {
    result = MEMORY[0x2199CD934](&unk_21442896C, &type metadata for ChartLegendConfiguration);
    atomic_store(result, (unint64_t *)&qword_254D698F0);
  }
  return result;
}

uint64_t sub_214232314(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;

  v10 = a4;
  i = a3;
  v12 = a2;
  v13 = a1;
  if (*a1 == 512)
  {
    v15 = a1[1];
    if (*(_QWORD *)(a5 + 8) == v15)
    {
      v18 = a8;
      v9 = a7;
      v25 = *(unsigned int *)(v15 + 24);
      if (a3)
      {
        v26 = *((unsigned int *)a2 + a3);
        v10 = a4 + v26;
        if (__OFADD__(a4, v26))
        {
LABEL_16:
          __break(1u);
          goto LABEL_17;
        }
      }
      v12 = &a1[v25];
      sub_214232314(a1[2], v12, 0, v10, a5, a6, a7, a8, a9);
      v13 = (_QWORD *)v13[3];
      for (i = 2; *v13 == 512; v13 = (_QWORD *)v13[3])
      {
        v27 = v13[1];
        if (*(_QWORD *)(a5 + 8) != v27)
          break;
        v28 = *((unsigned int *)v12 + 2);
        v29 = __OFADD__(v10, v28);
        v10 += v28;
        if (v29)
          goto LABEL_16;
        v12 = &v13[*(unsigned int *)(v27 + 24)];
        sub_214232314(v13[2], v12, 0, v10, a5, a6, v9, v18, a9);
      }
    }
  }
  v16 = (unsigned int *)v12 + i;
  v17 = *v16;
  v18 = v10 + v17;
  if (__OFADD__(v10, v17))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v19 = v16[1];
  v9 = v10 + v19;
  if (!__OFADD__(v10, v19))
  {
    v10 = *a9;
    result = swift_isUniquelyReferenced_nonNull_native();
    *a9 = v10;
    if ((result & 1) != 0)
      goto LABEL_6;
    goto LABEL_19;
  }
LABEL_18:
  __break(1u);
LABEL_19:
  result = (uint64_t)sub_214221BF8(0, *(_QWORD *)(v10 + 16) + 1, 1, (char *)v10);
  v10 = result;
  *a9 = result;
LABEL_6:
  v22 = *(_QWORD *)(v10 + 16);
  v21 = *(_QWORD *)(v10 + 24);
  if (v22 >= v21 >> 1)
  {
    result = (uint64_t)sub_214221BF8((char *)(v21 > 1), v22 + 1, 1, (char *)v10);
    v10 = result;
  }
  *(_QWORD *)(v10 + 16) = v22 + 1;
  v23 = (_QWORD *)(v10 + 24 * v22);
  v23[4] = v13;
  v23[5] = v18;
  v23[6] = v9;
  *a9 = v10;
  return result;
}

ValueMetadata *type metadata accessor for PairTypeDescription()
{
  return &type metadata for PairTypeDescription;
}

uint64_t ChartBinRange.lowerBound.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t ChartBinRange.upperBound.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 36));
}

uint64_t ChartBinRange.contains(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char v25;
  void (*v26)(char *, uint64_t, uint64_t);
  char *v27;
  char v28;
  char *v29;
  void (*v30)(char *, char *, uint64_t);
  void (*v31)(char *, uint64_t);
  void (*v32)(char *, uint64_t);
  char v33;
  int v34;
  char *v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t);
  void (*v38)(char *, uint64_t);
  char *v40;
  char *v41;
  uint64_t v42;
  void (*v43)(char *, uint64_t, uint64_t);
  char *v44;
  char *v45;
  uint64_t v46;
  char *v47;

  v3 = v2;
  v6 = *(_QWORD *)(a2 - 8);
  v7 = MEMORY[0x24BDAC7A8](a1);
  v44 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v45 = (char *)&v40 - v10;
  v11 = MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v40 - v12;
  v15 = *(_QWORD *)(v14 + 16);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = MEMORY[0x24BDAC7A8](v11);
  v19 = (char *)&v40 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x24BDAC7A8](v17);
  v47 = (char *)&v40 - v21;
  MEMORY[0x24BDAC7A8](v20);
  v23 = (char *)&v40 - v22;
  v46 = *(_QWORD *)(v24 + 24);
  v25 = sub_214424E84();
  v43 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 16);
  v43(v23, a1, v15);
  v26 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v26(v13, v3, a2);
  if ((v25 & 1) != 0)
  {
    v41 = v19;
    v42 = v16;
    v27 = v44;
    v28 = sub_214424E6C();
    v29 = v45;
    v26(v45, (uint64_t)v13, a2);
    v30 = (void (*)(char *, char *, uint64_t))v43;
    v43(v47, (uint64_t)v23, v15);
    if ((v28 & 1) != 0)
    {
      v31 = *(void (**)(char *, uint64_t))(v42 + 8);
      v31(v47, v15);
      v32 = *(void (**)(char *, uint64_t))(v6 + 8);
      v32(v29, a2);
      v32(v13, a2);
      v33 = 1;
      v31(v23, v15);
    }
    else
    {
      v40 = v13;
      v34 = v29[*(int *)(a2 + 40)];
      v35 = v41;
      v30(v41, v47, v15);
      v26(v27, (uint64_t)v29, a2);
      v36 = v42;
      if (v34 == 1)
        v33 = sub_214424ED8();
      else
        v33 = 0;
      v37 = *(void (**)(char *, uint64_t))(v6 + 8);
      v37(v27, a2);
      v38 = *(void (**)(char *, uint64_t))(v36 + 8);
      v38(v35, v15);
      v38(v47, v15);
      v37(v29, a2);
      v37(v40, a2);
      v38(v23, v15);
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v13, a2);
    v33 = 0;
    (*(void (**)(char *, uint64_t))(v16 + 8))(v23, v15);
  }
  return v33 & 1;
}

uint64_t ChartBinRange.relative<A>(to:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  void (*v29)(char *, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  void (*v34)(char *, char *, uint64_t);
  char *v35;
  char *v36;
  void (*v37)(char *, uint64_t);
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  void (*v45)(char *, char *, uint64_t);
  char *v46;
  char *v47;
  void (*v48)(char *, uint64_t);
  char *v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t TupleTypeMetadata2;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  v62 = a3;
  v63 = a4;
  v60 = a5;
  v61 = a1;
  v7 = *(_QWORD *)(a2 + 16);
  v8 = sub_2144252BC();
  v56 = *(_QWORD *)(v8 - 8);
  v57 = v8;
  v9 = MEMORY[0x24BDAC7A8](v8);
  v54 = (char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v55 = (char *)&v50 - v11;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v12 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v14 = (char *)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x24BDAC7A8](v12);
  v17 = (char *)&v50 - v16;
  v18 = *(_QWORD *)(v7 - 8);
  v19 = MEMORY[0x24BDAC7A8](v15);
  v21 = (char *)&v50 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v19);
  v23 = (char *)&v50 - v22;
  v24 = sub_214424EC0();
  v52 = *(_QWORD *)(v24 - 8);
  v53 = v24;
  v25 = MEMORY[0x24BDAC7A8](v24);
  v50 = (char *)&v50 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v25);
  v51 = (char *)&v50 - v27;
  v28 = *(unsigned __int8 *)(v5 + *(int *)(a2 + 40));
  v58 = v18;
  v29 = *(void (**)(char *, uint64_t, uint64_t))(v18 + 16);
  v29(v23, v5, v7);
  v29(v21, v5 + *(int *)(a2 + 36), v7);
  result = sub_214424E84();
  if (v28 == 1)
  {
    if ((result & 1) != 0)
    {
      v32 = v58;
      v31 = TupleTypeMetadata2;
      v33 = &v17[*(int *)(TupleTypeMetadata2 + 48)];
      v34 = *(void (**)(char *, char *, uint64_t))(v58 + 32);
      v34(v17, v23, v7);
      v34(v33, v21, v7);
      v35 = &v14[*(int *)(v31 + 48)];
      v29(v14, (uint64_t)v17, v7);
      v29(v35, (uint64_t)v33, v7);
      v36 = v50;
      v34(v50, v14, v7);
      v37 = *(void (**)(char *, uint64_t))(v32 + 8);
      v37(v35, v7);
      v38 = &v14[*(int *)(v31 + 48)];
      v34(v14, v17, v7);
      v34(v38, v33, v7);
      v39 = v53;
      v34(&v36[*(int *)(v53 + 36)], v38, v7);
      v37(v14, v7);
      v40 = v51;
      v41 = v52;
      (*(void (**)(char *, char *, uint64_t))(v52 + 32))(v51, v36, v39);
      sub_214424EB4();
      return (*(uint64_t (**)(char *, uint64_t))(v41 + 8))(v40, v39);
    }
    __break(1u);
  }
  else if ((result & 1) != 0)
  {
    v43 = v58;
    v42 = TupleTypeMetadata2;
    v44 = &v17[*(int *)(TupleTypeMetadata2 + 48)];
    v45 = *(void (**)(char *, char *, uint64_t))(v58 + 32);
    v45(v17, v23, v7);
    v45(v44, v21, v7);
    v46 = &v14[*(int *)(v42 + 48)];
    v29(v14, (uint64_t)v17, v7);
    v29(v46, (uint64_t)v44, v7);
    v47 = v54;
    v45(v54, v14, v7);
    v48 = *(void (**)(char *, uint64_t))(v43 + 8);
    v48(v46, v7);
    v49 = &v14[*(int *)(v42 + 48)];
    v45(v14, v17, v7);
    v45(v49, v44, v7);
    v39 = v57;
    v45(&v47[*(int *)(v57 + 36)], v49, v7);
    v48(v14, v7);
    v40 = v55;
    v41 = v56;
    (*(void (**)(char *, char *, uint64_t))(v56 + 32))(v55, v47, v39);
    sub_2144252B0();
    return (*(uint64_t (**)(char *, uint64_t))(v41 + 8))(v40, v39);
  }
  __break(1u);
  return result;
}

uint64_t sub_214232C20@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t result;

  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 32);
  v11(a6, a1, a4);
  v13 = type metadata accessor for ChartBinRange(0, a4, a5, v12);
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v11)(a6 + *(int *)(v13 + 36), a2, a4);
  *(_BYTE *)(a6 + *(int *)(v13 + 40)) = a3;
  return result;
}

uint64_t sub_214232CA4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return ChartBinRange.relative<A>(to:)(a1, a4, a2, a3, a5);
}

uint64_t static PlottableValue.value<>(_:_:)@<X0>(uint64_t a1@<X0>, int a2@<W2>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, uint64_t a7@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  void (*v37)(char *, char *, uint64_t);
  char *v38;
  char *v39;
  void (*v40)(char *, uint64_t);
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t TupleTypeMetadata2;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v53 = a5;
  v54 = a1;
  v56 = a3;
  LODWORD(v55) = a2;
  v52 = a7;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v9 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v11 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x24BDAC7A8](v9);
  v14 = (char *)&v44 - v13;
  v15 = *(_QWORD *)(a4 - 8);
  v16 = MEMORY[0x24BDAC7A8](v12);
  v18 = (char *)&v44 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)&v44 - v19;
  v48 = sub_2144252BC();
  v21 = *(_QWORD *)(v48 - 8);
  v22 = MEMORY[0x24BDAC7A8](v48);
  v49 = (char *)&v44 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v22);
  v50 = (char *)&v44 - v24;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v25 = sub_21442480C();
  v54 = v26;
  v55 = v15;
  v46 = v27;
  v47 = v28;
  v29 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  v30 = v56;
  v29(v20, v56, a4);
  v32 = type metadata accessor for ChartBinRange(0, a4, a6, v31);
  v29(v18, v30 + *(int *)(v32 + 36), a4);
  result = sub_214424E84();
  if ((result & 1) != 0)
  {
    v44 = v21;
    v45 = v25;
    v34 = TupleTypeMetadata2;
    v35 = &v14[*(int *)(TupleTypeMetadata2 + 48)];
    v56 = a6;
    v36 = v55;
    v37 = *(void (**)(char *, char *, uint64_t))(v55 + 32);
    v37(v14, v20, a4);
    v37(v35, v18, a4);
    v38 = &v11[*(int *)(v34 + 48)];
    v29(v11, (uint64_t)v14, a4);
    v29(v38, (uint64_t)v35, a4);
    v39 = v49;
    v37(v49, v11, a4);
    v40 = *(void (**)(char *, uint64_t))(v36 + 8);
    v40(v38, a4);
    v41 = &v11[*(int *)(v34 + 48)];
    v37(v11, v14, a4);
    v37(v41, v35, a4);
    v42 = v48;
    v37(&v39[*(int *)(v48 + 36)], v41, a4);
    v40(v11, a4);
    v43 = (uint64_t)v50;
    (*(void (**)(char *, char *, uint64_t))(v44 + 32))(v50, v39, v42);
    return sub_21437271C(v45, v54, v46 & 1, v47, v43, a4, v53, v52);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t type metadata accessor for ChartBinRange(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2141D8E88(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ChartBinRange);
}

uint64_t static PlottableValue.value<A>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t result;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  void (*v42)(char *, char *, uint64_t);
  char *v43;
  char *v44;
  void (*v45)(char *, uint64_t);
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t TupleTypeMetadata2;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v60 = a7;
  v61 = a2;
  v58 = a5;
  v59 = a1;
  v57 = a8;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v11 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v13 = (char *)&v49 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x24BDAC7A8](v11);
  v16 = (char *)&v49 - v15;
  v17 = *(_QWORD *)(a3 - 8);
  v18 = MEMORY[0x24BDAC7A8](v14);
  v20 = (char *)&v49 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v22 = (char *)&v49 - v21;
  v53 = sub_2144252BC();
  v23 = *(_QWORD *)(v53 - 8);
  v24 = MEMORY[0x24BDAC7A8](v53);
  v54 = (char *)&v49 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = MEMORY[0x24BDAC7A8](v24);
  v55 = (char *)&v49 - v27;
  MEMORY[0x24BDAC7A8](v26);
  (*(void (**)(char *, uint64_t, uint64_t))(v29 + 16))((char *)&v49 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0), v59, a4);
  v30 = sub_214424818();
  v59 = v31;
  v60 = v17;
  v51 = v32;
  v52 = v33;
  v34 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 16);
  v35 = v61;
  v34(v22, v61, a3);
  v37 = type metadata accessor for ChartBinRange(0, a3, a6, v36);
  v34(v20, v35 + *(int *)(v37 + 36), a3);
  result = sub_214424E84();
  if ((result & 1) != 0)
  {
    v49 = v23;
    v50 = v30;
    v39 = TupleTypeMetadata2;
    v40 = &v16[*(int *)(TupleTypeMetadata2 + 48)];
    v61 = a6;
    v41 = v60;
    v42 = *(void (**)(char *, char *, uint64_t))(v60 + 32);
    v42(v16, v22, a3);
    v42(v40, v20, a3);
    v43 = &v13[*(int *)(v39 + 48)];
    v34(v13, (uint64_t)v16, a3);
    v34(v43, (uint64_t)v40, a3);
    v44 = v54;
    v42(v54, v13, a3);
    v45 = *(void (**)(char *, uint64_t))(v41 + 8);
    v45(v43, a3);
    v46 = &v13[*(int *)(v39 + 48)];
    v42(v13, v16, a3);
    v42(v46, v40, a3);
    v47 = v53;
    v42(&v44[*(int *)(v53 + 36)], v46, a3);
    v45(v13, a3);
    v48 = (uint64_t)v55;
    (*(void (**)(char *, char *, uint64_t))(v49 + 32))(v55, v44, v47);
    return sub_21437271C(v50, v59, v51 & 1, v52, v48, a3, v58, v57);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t static PlottableValue.value<>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t result;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  void (*v36)(char *, char *, uint64_t);
  char *v37;
  char *v38;
  void (*v39)(char *, uint64_t);
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t TupleTypeMetadata2;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v50 = a9;
  v51 = a7;
  v54 = a2;
  v55 = a4;
  LODWORD(v52) = a3;
  v53 = a1;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v12 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v14 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x24BDAC7A8](v12);
  v17 = (char *)&v43 - v16;
  v18 = *(_QWORD **)(a6 - 8);
  v19 = MEMORY[0x24BDAC7A8](v15);
  v21 = (char *)&v43 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v19);
  v23 = (char *)&v43 - v22;
  v24 = sub_2144252BC();
  v48 = *(_QWORD *)(v24 - 8);
  v25 = MEMORY[0x24BDAC7A8](v24);
  v46 = (char *)&v43 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v25);
  v47 = (char *)&v43 - v27;
  v28 = (void (*)(char *, uint64_t, uint64_t))v18[2];
  v28(v23, a5, a6);
  v30 = type metadata accessor for ChartBinRange(0, a6, a8, v29);
  v28(v21, a5 + *(int *)(v30 + 36), a6);
  v31 = v52 & 1;
  sub_2141DD130(v53, v54, v52 & 1);
  swift_bridgeObjectRetain();
  result = sub_214424E84();
  if ((result & 1) != 0)
  {
    v44 = v24;
    v33 = TupleTypeMetadata2;
    v34 = *(int *)(TupleTypeMetadata2 + 48);
    v45 = v31;
    v35 = &v17[v34];
    v52 = a8;
    v36 = (void (*)(char *, char *, uint64_t))v18[4];
    v36(v17, v23, a6);
    v36(v35, v21, a6);
    v37 = &v14[*(int *)(v33 + 48)];
    v28(v14, (uint64_t)v17, a6);
    v28(v37, (uint64_t)v35, a6);
    v38 = v46;
    v36(v46, v14, a6);
    v39 = (void (*)(char *, uint64_t))v18[1];
    v39(v37, a6);
    v40 = &v14[*(int *)(v33 + 48)];
    v36(v14, v17, a6);
    v36(v40, v35, a6);
    v41 = v44;
    v36(&v38[*(int *)(v44 + 36)], v40, a6);
    v39(v14, a6);
    v42 = (uint64_t)v47;
    (*(void (**)(char *, char *, uint64_t))(v48 + 32))(v47, v38, v41);
    return sub_21437271C(v53, v54, v45, v55, v42, a6, v51, v50);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_21423362C(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 24);
}

uint64_t sub_214233634()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_2142336AC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v13;
  void (*v14)(uint64_t *, uint64_t *, uint64_t);
  unint64_t v15;

  v4 = a1;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_DWORD *)(v6 + 80);
  v9 = ~v8;
  v10 = v7 + v8;
  if (v8 > 7
    || (*(_DWORD *)(v6 + 80) & 0x100000) != 0
    || v7 + ((v7 + v8) & (unint64_t)~v8) + 1 > 0x18)
  {
    v13 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v13 + ((v8 + 16) & v9));
    swift_retain();
  }
  else
  {
    v14 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16);
    v14(a1, a2, *(_QWORD *)(a3 + 16));
    v15 = ((unint64_t)a2 + v10) & v9;
    v14((uint64_t *)(((unint64_t)v4 + v10) & v9), (uint64_t *)v15, v5);
    *(_BYTE *)((((unint64_t)v4 + v10) & v9) + v7) = *(_BYTE *)(v15 + v7);
  }
  return v4;
}

uint64_t sub_21423377C(unint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v6)(unint64_t, uint64_t);

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  v6 = *(uint64_t (**)(unint64_t, uint64_t))(v4 + 8);
  v6(a1, v3);
  return v6((*(_QWORD *)(v4 + 64) + a1 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), v3);
}

uint64_t sub_2142337E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  v7(a1, a2, v5);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = (v8 + v9 + a1) & ~v9;
  v11 = (v8 + v9 + a2) & ~v9;
  v7(v10, v11, v5);
  *(_BYTE *)(v10 + v8) = *(_BYTE *)(v11 + v8);
  return a1;
}

uint64_t sub_214233860(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 24);
  v7(a1, a2, v5);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = (v8 + v9 + a1) & ~v9;
  v11 = (v8 + v9 + a2) & ~v9;
  v7(v10, v11, v5);
  *(_BYTE *)(v10 + v8) = *(_BYTE *)(v11 + v8);
  return a1;
}

uint64_t sub_2142338DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32);
  v7(a1, a2, v5);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = (v8 + v9 + a1) & ~v9;
  v11 = (v8 + v9 + a2) & ~v9;
  v7(v10, v11, v5);
  *(_BYTE *)(v10 + v8) = *(_BYTE *)(v11 + v8);
  return a1;
}

uint64_t sub_214233958(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 40);
  v7(a1, a2, v5);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = (v8 + v9 + a1) & ~v9;
  v11 = (v8 + v9 + a2) & ~v9;
  v7(v10, v11, v5);
  *(_BYTE *)(v10 + v8) = *(_BYTE *)(v11 + v8);
  return a1;
}

uint64_t sub_2142339D4(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  char v12;
  int v13;
  unsigned int v14;
  int v15;
  unsigned int v17;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0xFE)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = *(unsigned __int8 *)(v4 + 80);
  v9 = v7 + v8;
  v10 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_21;
  v11 = v7 + (v9 & ~v8) + 1;
  v12 = 8 * v11;
  if (v11 > 3)
    goto LABEL_7;
  v14 = ((v10 + ~(-1 << v12)) >> v12) + 1;
  if (HIWORD(v14))
  {
    v13 = *(_DWORD *)(a1 + v11);
    if (v13)
      goto LABEL_14;
  }
  else
  {
    if (v14 <= 0xFF)
    {
      if (v14 < 2)
        goto LABEL_21;
LABEL_7:
      v13 = *(unsigned __int8 *)(a1 + v11);
      if (!*(_BYTE *)(a1 + v11))
        goto LABEL_21;
LABEL_14:
      v15 = (v13 - 1) << v12;
      if (v11 > 3)
        v15 = 0;
      if ((_DWORD)v7 + (v9 & ~(_DWORD)v8) == -1)
        return v6 + v15 + 1;
      if (v11 > 3)
        LODWORD(v11) = 4;
      return ((uint64_t (*)(void))((char *)&loc_214233AA4 + 4 * byte_214428B18[(v11 - 1)]))();
    }
    v13 = *(unsigned __int16 *)(a1 + v11);
    if (*(_WORD *)(a1 + v11))
      goto LABEL_14;
  }
LABEL_21:
  if (v5 >= 0xFE)
    return (*(uint64_t (**)(void))(v4 + 48))();
  v17 = *(unsigned __int8 *)(((v9 + a1) & ~v8) + v7);
  if (v17 < 2)
    return 0;
  return ((v17 + 2147483646) & 0x7FFFFFFF) + 1;
}

void sub_214233B24(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0xFEu)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = *(_QWORD *)(v5 + 64)
     + ((*(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
     + 1;
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      v10 = ((a3 - v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
      if (HIWORD(v10))
      {
        v8 = 4u;
      }
      else if (v10 >= 0x100)
      {
        v8 = 2;
      }
      else
      {
        v8 = v10 > 1;
      }
    }
    else
    {
      v8 = 1u;
    }
  }
  else
  {
    v8 = 0;
  }
  if (v6 < a2)
  {
    v9 = ~v6 + a2;
    if (v7 < 4)
    {
      if (*(_DWORD *)(v5 + 64)
         + ((*(_DWORD *)(v5 + 64) + *(unsigned __int8 *)(v5 + 80)) & ~*(unsigned __int8 *)(v5 + 80)) != -1)
      {
        v11 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v11;
          *((_BYTE *)a1 + 2) = BYTE2(v11);
        }
        else if ((_DWORD)v7 == 2)
        {
          *a1 = v11;
        }
        else
        {
          *(_BYTE *)a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X14 }
}

uint64_t sub_214233D18(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v7;
  char v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD v14[2];
  uint64_t v15;

  v3 = v2;
  if (*(_QWORD *)(a1 + 24))
  {
    sub_2141D8DC0((__int128 *)a1, (uint64_t)v14);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v12 = *v2;
    *v2 = 0x8000000000000000;
    sub_2142A25EC((uint64_t)v14, a2, isUniquelyReferenced_nonNull_native);
    *v2 = v12;
    return swift_bridgeObjectRelease();
  }
  else
  {
    sub_2141E0750(a1, &qword_254D699C8);
    v7 = sub_214336CE4(a2);
    if ((v8 & 1) != 0)
    {
      v9 = v7;
      v10 = swift_isUniquelyReferenced_nonNull_native();
      v11 = *v2;
      v13 = *v3;
      *v3 = 0x8000000000000000;
      if ((v10 & 1) == 0)
      {
        sub_2142A732C();
        v11 = v13;
      }
      sub_2141D8DC0((__int128 *)(*(_QWORD *)(v11 + 56) + 40 * v9), (uint64_t)v14);
      sub_21431F398(v9, v11);
      *v3 = v11;
      swift_bridgeObjectRelease();
    }
    else
    {
      v15 = 0;
      memset(v14, 0, sizeof(v14));
    }
    return sub_2141E0750((uint64_t)v14, &qword_254D699C8);
  }
}

unint64_t sub_214233E30(uint64_t a1, __int16 a2, char a3)
{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t result;
  char v7;
  unint64_t v8;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  char v13;
  uint64_t v14;
  uint64_t v15;

  v4 = v3;
  if ((a2 & 0xFF00) == 0x200)
  {
    result = sub_214336B74(a3);
    if ((v7 & 1) == 0)
      return result;
    v8 = result;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v10 = *v3;
    v14 = *v4;
    *v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_2142A74F0();
      v10 = v14;
    }
    sub_21431F540(v8, v10);
    *v4 = v10;
  }
  else
  {
    v13 = swift_isUniquelyReferenced_nonNull_native();
    v15 = *v4;
    *v4 = 0x8000000000000000;
    sub_2142A269C(a1, a2 & 0x1FF, a3, v13);
    *v4 = v15;
  }
  return swift_bridgeObjectRelease();
}

unint64_t sub_214233F10(uint64_t a1, unsigned __int8 a2)
{
  uint64_t *v2;
  uint64_t *v3;
  char isUniquelyReferenced_nonNull_native;
  unint64_t result;
  char v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = v2;
  if (a1)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v12 = *v2;
    *v2 = 0x8000000000000000;
    sub_2142A2CB0(a1, a2, isUniquelyReferenced_nonNull_native);
    *v2 = v12;
  }
  else
  {
    result = sub_214336B74(a2);
    if ((v8 & 1) == 0)
      return result;
    v9 = result;
    v10 = swift_isUniquelyReferenced_nonNull_native();
    v11 = *v2;
    v13 = *v3;
    *v3 = 0x8000000000000000;
    if (!v10)
    {
      sub_2142A8964();
      v11 = v13;
    }
    sub_21431F8B8(v9, v11);
    *v3 = v11;
    swift_release();
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_214233FF0(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  char v14;
  unint64_t v15;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v21;
  uint64_t v22;

  v3 = v2;
  v6 = sub_2141D8BF8(&qword_253F121F8);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ChartContentRenderContext.Bins(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1, 1, v9) == 1)
  {
    sub_2141E0750(a1, &qword_253F121F8);
    v13 = sub_214336B74(a2);
    if ((v14 & 1) != 0)
    {
      v15 = v13;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v17 = *v3;
      v22 = *v3;
      *v3 = 0x8000000000000000;
      if (!isUniquelyReferenced_nonNull_native)
      {
        sub_2142A9FD8();
        v17 = v22;
      }
      sub_2141FE1E0(*(_QWORD *)(v17 + 56) + *(_QWORD *)(v10 + 72) * v15, (uint64_t)v8, type metadata accessor for ChartContentRenderContext.Bins);
      sub_214320038(v15, v17);
      *v3 = v17;
      swift_bridgeObjectRelease();
      v18 = 0;
    }
    else
    {
      v18 = 1;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, v18, 1, v9);
    return sub_2141E0750((uint64_t)v8, &qword_253F121F8);
  }
  else
  {
    sub_2141FE1E0(a1, (uint64_t)v12, type metadata accessor for ChartContentRenderContext.Bins);
    v19 = swift_isUniquelyReferenced_nonNull_native();
    v22 = *v3;
    *v3 = 0x8000000000000000;
    sub_2142A3658((uint64_t)v12, a2, v19);
    *v3 = v22;
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_2142341C8(void (*a1)(uint64_t *__return_ptr, uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t *i;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = v3;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = MEMORY[0x24BEE4AF8];
  if (v5)
  {
    v16 = MEMORY[0x24BEE4AF8];
    sub_2141D3AA0(0, v5, 0);
    v6 = v16;
    for (i = (uint64_t *)(a3 + 32); ; ++i)
    {
      v14 = *i;
      a1(&v15, &v14);
      if (v4)
        break;
      v4 = 0;
      v10 = v15;
      v16 = v6;
      v12 = *(_QWORD *)(v6 + 16);
      v11 = *(_QWORD *)(v6 + 24);
      if (v12 >= v11 >> 1)
      {
        sub_2141D3AA0((char *)(v11 > 1), v12 + 1, 1);
        v6 = v16;
      }
      *(_QWORD *)(v6 + 16) = v12 + 1;
      *(_QWORD *)(v6 + 8 * v12 + 32) = v10;
      if (!--v5)
        return v6;
    }
    swift_release();
  }
  return v6;
}

uint64_t sub_2142342DC(void (*a1)(_QWORD *__return_ptr, uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t *i;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v16;
  _QWORD v17[2];
  uint64_t v18;

  v4 = v3;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = MEMORY[0x24BEE4AF8];
  if (v5)
  {
    v18 = MEMORY[0x24BEE4AF8];
    sub_2141D3A84(0, v5, 0);
    v6 = v18;
    for (i = (uint64_t *)(a3 + 32); ; ++i)
    {
      v16 = *i;
      a1(v17, &v16);
      if (v4)
        break;
      v4 = 0;
      v10 = v17[0];
      v9 = v17[1];
      v18 = v6;
      v12 = *(_QWORD *)(v6 + 16);
      v11 = *(_QWORD *)(v6 + 24);
      if (v12 >= v11 >> 1)
      {
        sub_2141D3A84((char *)(v11 > 1), v12 + 1, 1);
        v6 = v18;
      }
      *(_QWORD *)(v6 + 16) = v12 + 1;
      v13 = v6 + 16 * v12;
      *(_QWORD *)(v13 + 32) = v10;
      *(_QWORD *)(v13 + 40) = v9;
      if (!--v5)
        return v6;
    }
    swift_release();
  }
  return v6;
}

uint64_t sub_2142343E4(void (*a1)(__int128 *__return_ptr, uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  unint64_t v13;
  unint64_t v14;
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  v4 = v3;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = MEMORY[0x24BEE4AF8];
  if (v5)
  {
    v18 = MEMORY[0x24BEE4AF8];
    sub_2141D4024(0, v5, 0);
    v6 = v18;
    v9 = *(_QWORD *)(type metadata accessor for CalendarBinningUnit(0) - 8);
    v10 = a3 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    v11 = *(_QWORD *)(v9 + 72);
    while (1)
    {
      a1(&v17, v10);
      if (v4)
        break;
      v4 = 0;
      v12 = v17;
      v18 = v6;
      v14 = *(_QWORD *)(v6 + 16);
      v13 = *(_QWORD *)(v6 + 24);
      if (v14 >= v13 >> 1)
      {
        v16 = v17;
        sub_2141D4024((char *)(v13 > 1), v14 + 1, 1);
        v12 = v16;
        v6 = v18;
      }
      *(_QWORD *)(v6 + 16) = v14 + 1;
      *(_OWORD *)(v6 + 16 * v14 + 32) = v12;
      v10 += v11;
      if (!--v5)
        return v6;
    }
    swift_release();
  }
  return v6;
}

uint64_t sub_21423450C(void (*a1)(__int128 *__return_ptr, uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t *i;
  __int128 v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;

  v4 = v3;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = MEMORY[0x24BEE4AF8];
  if (v5)
  {
    v17 = MEMORY[0x24BEE4AF8];
    sub_2141D4024(0, v5, 0);
    v6 = v17;
    for (i = (uint64_t *)(a3 + 32); ; ++i)
    {
      v15 = *i;
      a1(&v16, &v15);
      if (v4)
        break;
      v4 = 0;
      v10 = v16;
      v17 = v6;
      v12 = *(_QWORD *)(v6 + 16);
      v11 = *(_QWORD *)(v6 + 24);
      if (v12 >= v11 >> 1)
      {
        v14 = v16;
        sub_2141D4024((char *)(v11 > 1), v12 + 1, 1);
        v10 = v14;
        v6 = v17;
      }
      *(_QWORD *)(v6 + 16) = v12 + 1;
      *(_OWORD *)(v6 + 16 * v12 + 32) = v10;
      if (!--v5)
        return v6;
    }
    swift_release();
  }
  return v6;
}

uint64_t sub_214234620(void (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t);
  uint64_t v19;
  uint64_t v20;

  v4 = v3;
  v18 = a1;
  v19 = a2;
  v17 = sub_214423960();
  v6 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(a3 + 16);
  v10 = MEMORY[0x24BEE4AF8];
  if (v9)
  {
    v20 = MEMORY[0x24BEE4AF8];
    sub_2141D4200(0, v9, 0);
    v10 = v20;
    v11 = *(_QWORD *)(sub_214423B70() - 8);
    v12 = a3 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
    v16 = *(_QWORD *)(v11 + 72);
    while (1)
    {
      v18(v12);
      if (v4)
        break;
      v4 = 0;
      v20 = v10;
      v14 = *(_QWORD *)(v10 + 16);
      v13 = *(_QWORD *)(v10 + 24);
      if (v14 >= v13 >> 1)
      {
        sub_2141D4200(v13 > 1, v14 + 1, 1);
        v10 = v20;
      }
      *(_QWORD *)(v10 + 16) = v14 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v10+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(_QWORD *)(v6 + 72) * v14, v8, v17);
      v12 += v16;
      if (!--v9)
        return v10;
    }
    swift_release();
  }
  return v10;
}

uint64_t sub_214234798(void (*a1)(__int128 *__return_ptr, uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t *i;
  __int128 v9;
  __int128 v10;
  char v11;
  uint64_t v12;
  __int128 v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  char v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;

  v4 = v3;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = MEMORY[0x24BEE4AF8];
  if (v5)
  {
    v28 = MEMORY[0x24BEE4AF8];
    sub_2141D4290(0, v5, 0);
    v6 = v28;
    for (i = (uint64_t *)(a3 + 32); ; ++i)
    {
      v22 = *i;
      a1(&v23, &v22);
      if (v4)
        break;
      v4 = 0;
      v9 = v23;
      v10 = v24;
      v11 = v25;
      v12 = v26;
      v13 = v27;
      v28 = v6;
      v15 = *(_QWORD *)(v6 + 16);
      v14 = *(_QWORD *)(v6 + 24);
      if (v15 >= v14 >> 1)
      {
        v19 = v24;
        v20 = v23;
        v18 = v27;
        sub_2141D4290((char *)(v14 > 1), v15 + 1, 1);
        v13 = v18;
        v10 = v19;
        v9 = v20;
        v6 = v28;
      }
      *(_QWORD *)(v6 + 16) = v15 + 1;
      v16 = v6 + (v15 << 6);
      *(_OWORD *)(v16 + 32) = v9;
      *(_OWORD *)(v16 + 48) = v10;
      *(_BYTE *)(v16 + 64) = v11;
      *(_QWORD *)(v16 + 72) = v12;
      *(_OWORD *)(v16 + 80) = v13;
      if (!--v5)
        return v6;
    }
    swift_release();
  }
  return v6;
}

uint64_t sub_2142348C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  char v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  sub_2141D8BF8(&qword_253F15D58);
  v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_2144271F0;
  *(_QWORD *)(v10 + 32) = a1;
  *(_QWORD *)(v10 + 40) = a2;
  *(_QWORD *)(v10 + 48) = a3;
  v31 = v10;
  sub_214424FF8();
  v11 = v31;
  v12 = (_QWORD *)swift_allocObject();
  v12[2] = a4;
  v12[3] = a5;
  v12[4] = a1;
  v12[5] = a2;
  v12[6] = a3;
  sub_2141D8BF8(&qword_253F131A0);
  v13 = swift_allocObject();
  *(_OWORD *)(v13 + 40) = 0u;
  *(_OWORD *)(v13 + 56) = 0u;
  *(_QWORD *)(v13 + 72) = 0;
  *(_BYTE *)(v13 + 80) = -1;
  *(_WORD *)(v13 + 16) = 256;
  *(_QWORD *)(v13 + 88) = 0;
  *(_QWORD *)(v13 + 96) = 0;
  v14 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v13 + 24) = v11;
  *(_QWORD *)(v13 + 32) = v14;
  if (!(v11 >> 62))
  {
    v15 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_retain();
    swift_retain();
    swift_retain();
    result = swift_bridgeObjectRetain();
    if (v15)
      goto LABEL_3;
LABEL_20:
    swift_bridgeObjectRelease();
    v29 = swift_allocObject();
    *(_QWORD *)(v29 + 16) = sub_21424CC20;
    *(_QWORD *)(v29 + 24) = v12;
    v30 = *(_QWORD *)(v13 + 88);
    *(_QWORD *)(v13 + 88) = sub_21424E84C;
    *(_QWORD *)(v13 + 96) = v29;
    sub_2141D972C(v30);
    return v13;
  }
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  result = sub_2144256AC();
  v15 = result;
  if (!result)
    goto LABEL_20;
LABEL_3:
  if (v15 >= 1)
  {
    if ((v11 & 0xC000000000000001) != 0)
    {
      v17 = 0;
      do
      {
        v18 = MEMORY[0x2199CCE3C](v17, v11);
        swift_weakInit();
        v19 = *(_QWORD **)(v18 + 32);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v18 + 32) = v19;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v19 = sub_214221F04(0, v19[2] + 1, 1, v19);
          *(_QWORD *)(v18 + 32) = v19;
        }
        v22 = v19[2];
        v21 = v19[3];
        if (v22 >= v21 >> 1)
        {
          v19 = sub_214221F04((_QWORD *)(v21 > 1), v22 + 1, 1, v19);
          *(_QWORD *)(v18 + 32) = v19;
        }
        ++v17;
        v19[2] = v22 + 1;
        sub_2141E801C((uint64_t)&v31, (uint64_t)&v19[v22 + 4], &qword_253F13188);
        swift_unknownObjectRelease();
      }
      while (v15 != v17);
    }
    else
    {
      v23 = 0;
      do
      {
        v24 = *(_QWORD *)(v11 + 8 * v23 + 32);
        swift_weakInit();
        v25 = *(_QWORD **)(v24 + 32);
        swift_retain();
        v26 = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v24 + 32) = v25;
        if ((v26 & 1) == 0)
        {
          v25 = sub_214221F04(0, v25[2] + 1, 1, v25);
          *(_QWORD *)(v24 + 32) = v25;
        }
        v28 = v25[2];
        v27 = v25[3];
        if (v28 >= v27 >> 1)
        {
          v25 = sub_214221F04((_QWORD *)(v27 > 1), v28 + 1, 1, v25);
          *(_QWORD *)(v24 + 32) = v25;
        }
        ++v23;
        v25[2] = v28 + 1;
        sub_2141E801C((uint64_t)&v31, (uint64_t)&v25[v28 + 4], &qword_253F13188);
        swift_release();
      }
      while (v15 != v23);
    }
    goto LABEL_20;
  }
  __break(1u);
  return result;
}

uint64_t sub_214234C18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  char v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  sub_2141D8BF8(&qword_253F15D58);
  v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_2144271F0;
  *(_QWORD *)(v10 + 32) = a1;
  *(_QWORD *)(v10 + 40) = a2;
  *(_QWORD *)(v10 + 48) = a3;
  v31 = v10;
  sub_214424FF8();
  v11 = v31;
  v12 = (_QWORD *)swift_allocObject();
  v12[2] = a4;
  v12[3] = a5;
  v12[4] = a1;
  v12[5] = a2;
  v12[6] = a3;
  sub_2141D8BF8(&qword_253F131A0);
  v13 = swift_allocObject();
  *(_OWORD *)(v13 + 40) = 0u;
  *(_OWORD *)(v13 + 56) = 0u;
  *(_QWORD *)(v13 + 72) = 0;
  *(_BYTE *)(v13 + 80) = -1;
  *(_WORD *)(v13 + 16) = 256;
  *(_QWORD *)(v13 + 88) = 0;
  *(_QWORD *)(v13 + 96) = 0;
  v14 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v13 + 24) = v11;
  *(_QWORD *)(v13 + 32) = v14;
  if (!(v11 >> 62))
  {
    v15 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_retain();
    swift_retain();
    swift_retain();
    result = swift_bridgeObjectRetain();
    if (v15)
      goto LABEL_3;
LABEL_20:
    swift_bridgeObjectRelease();
    v29 = swift_allocObject();
    *(_QWORD *)(v29 + 16) = sub_21424CC20;
    *(_QWORD *)(v29 + 24) = v12;
    v30 = *(_QWORD *)(v13 + 88);
    *(_QWORD *)(v13 + 88) = sub_21424E84C;
    *(_QWORD *)(v13 + 96) = v29;
    sub_2141D972C(v30);
    return v13;
  }
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  result = sub_2144256AC();
  v15 = result;
  if (!result)
    goto LABEL_20;
LABEL_3:
  if (v15 >= 1)
  {
    if ((v11 & 0xC000000000000001) != 0)
    {
      v17 = 0;
      do
      {
        v18 = MEMORY[0x2199CCE3C](v17, v11);
        swift_weakInit();
        v19 = *(_QWORD **)(v18 + 32);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v18 + 32) = v19;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v19 = sub_214221F04(0, v19[2] + 1, 1, v19);
          *(_QWORD *)(v18 + 32) = v19;
        }
        v22 = v19[2];
        v21 = v19[3];
        if (v22 >= v21 >> 1)
        {
          v19 = sub_214221F04((_QWORD *)(v21 > 1), v22 + 1, 1, v19);
          *(_QWORD *)(v18 + 32) = v19;
        }
        ++v17;
        v19[2] = v22 + 1;
        sub_2141E801C((uint64_t)&v31, (uint64_t)&v19[v22 + 4], &qword_253F13188);
        swift_unknownObjectRelease();
      }
      while (v15 != v17);
    }
    else
    {
      v23 = 0;
      do
      {
        v24 = *(_QWORD *)(v11 + 8 * v23 + 32);
        swift_weakInit();
        v25 = *(_QWORD **)(v24 + 32);
        swift_retain();
        v26 = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v24 + 32) = v25;
        if ((v26 & 1) == 0)
        {
          v25 = sub_214221F04(0, v25[2] + 1, 1, v25);
          *(_QWORD *)(v24 + 32) = v25;
        }
        v28 = v25[2];
        v27 = v25[3];
        if (v28 >= v27 >> 1)
        {
          v25 = sub_214221F04((_QWORD *)(v27 > 1), v28 + 1, 1, v25);
          *(_QWORD *)(v24 + 32) = v25;
        }
        ++v23;
        v25[2] = v28 + 1;
        sub_2141E801C((uint64_t)&v31, (uint64_t)&v25[v28 + 4], &qword_253F13188);
        swift_release();
      }
      while (v15 != v23);
    }
    goto LABEL_20;
  }
  __break(1u);
  return result;
}

uint64_t sub_214234F68(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  _QWORD *v14;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  char v23[8];

  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = a1;
  *(_QWORD *)(v4 + 24) = a2;
  sub_2141D8BF8(&qword_253F11A98);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 40) = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  *(_QWORD *)(v5 + 72) = 0;
  *(_BYTE *)(v5 + 80) = -1;
  *(_WORD *)(v5 + 16) = 256;
  *(_QWORD *)(v5 + 88) = 0;
  *(_QWORD *)(v5 + 96) = 0;
  v6 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v5 + 24) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v5 + 32) = v6;
  if ((v6 & 0xC000000000000000) == 0 || (v10 = MEMORY[0x24BEE4AF8], (result = sub_2144256AC()) == 0))
  {
LABEL_2:
    v7 = swift_allocObject();
    *(_QWORD *)(v7 + 16) = sub_21424C540;
    *(_QWORD *)(v7 + 24) = v4;
    v8 = *(_QWORD *)(v5 + 88);
    *(_QWORD *)(v5 + 88) = sub_21424E84C;
    *(_QWORD *)(v5 + 96) = v7;
    sub_2141D972C(v8);
    return v5;
  }
  v11 = result;
  if (result >= 1)
  {
    v12 = (uint64_t *)(v10 + 32);
    do
    {
      v13 = *v12;
      swift_weakInit();
      v14 = *(_QWORD **)(v13 + 32);
      swift_retain();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)(v13 + 32) = v14;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v14 = sub_214221F04(0, v14[2] + 1, 1, v14);
        *(_QWORD *)(v13 + 32) = v14;
      }
      v16 = v14[2];
      v17 = v14[3];
      v18 = v16 + 1;
      if (v16 >= v17 >> 1)
      {
        v22 = v16 + 1;
        v19 = v14;
        v20 = v14[2];
        v21 = sub_214221F04((_QWORD *)(v17 > 1), v16 + 1, 1, v19);
        v16 = v20;
        v18 = v22;
        v14 = v21;
        *(_QWORD *)(v13 + 32) = v21;
      }
      v14[2] = v18;
      sub_2141E801C((uint64_t)v23, (uint64_t)&v14[v16 + 4], &qword_253F13188);
      swift_release();
      ++v12;
      --v11;
    }
    while (v11);
    goto LABEL_2;
  }
  __break(1u);
  return result;
}

uint64_t sub_214235148(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  _QWORD *v14;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  char v23[8];

  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = a1;
  *(_QWORD *)(v4 + 24) = a2;
  sub_2141D8BF8(&qword_253F15830);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 56) = 0u;
  *(_OWORD *)(v5 + 72) = 0u;
  *(_OWORD *)(v5 + 88) = 0u;
  *(_OWORD *)(v5 + 104) = 0u;
  *(_OWORD *)(v5 + 120) = 0u;
  *(_OWORD *)(v5 + 136) = 0u;
  *(_OWORD *)(v5 + 152) = 0u;
  *(_OWORD *)(v5 + 168) = 0u;
  *(_OWORD *)(v5 + 184) = 0u;
  *(_OWORD *)(v5 + 200) = 0u;
  *(_OWORD *)(v5 + 216) = 0u;
  *(_OWORD *)(v5 + 232) = 0u;
  *(_OWORD *)(v5 + 248) = 0u;
  *(_OWORD *)(v5 + 40) = 0u;
  *(_OWORD *)(v5 + 264) = 0u;
  *(_OWORD *)(v5 + 280) = 0u;
  *(_OWORD *)(v5 + 296) = 0u;
  *(_OWORD *)(v5 + 312) = 0u;
  *(_QWORD *)(v5 + 328) = 1;
  *(_WORD *)(v5 + 16) = 256;
  *(_OWORD *)(v5 + 336) = 0u;
  *(_OWORD *)(v5 + 352) = 0u;
  *(_OWORD *)(v5 + 368) = 0u;
  *(_OWORD *)(v5 + 384) = 0u;
  *(_OWORD *)(v5 + 400) = 0u;
  *(_QWORD *)(v5 + 416) = 0;
  v6 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v5 + 24) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v5 + 32) = v6;
  if ((v6 & 0xC000000000000000) == 0 || (v10 = MEMORY[0x24BEE4AF8], (result = sub_2144256AC()) == 0))
  {
LABEL_2:
    v7 = swift_allocObject();
    *(_QWORD *)(v7 + 16) = sub_21424C540;
    *(_QWORD *)(v7 + 24) = v4;
    v8 = *(_QWORD *)(v5 + 408);
    *(_QWORD *)(v5 + 408) = sub_21424C7F0;
    *(_QWORD *)(v5 + 416) = v7;
    sub_2141D972C(v8);
    return v5;
  }
  v11 = result;
  if (result >= 1)
  {
    v12 = (uint64_t *)(v10 + 32);
    do
    {
      v13 = *v12;
      swift_weakInit();
      v14 = *(_QWORD **)(v13 + 32);
      swift_retain();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)(v13 + 32) = v14;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v14 = sub_214221F04(0, v14[2] + 1, 1, v14);
        *(_QWORD *)(v13 + 32) = v14;
      }
      v16 = v14[2];
      v17 = v14[3];
      v18 = v16 + 1;
      if (v16 >= v17 >> 1)
      {
        v22 = v16 + 1;
        v19 = v14;
        v20 = v14[2];
        v21 = sub_214221F04((_QWORD *)(v17 > 1), v16 + 1, 1, v19);
        v16 = v20;
        v18 = v22;
        v14 = v21;
        *(_QWORD *)(v13 + 32) = v21;
      }
      v14[2] = v18;
      sub_2141E801C((uint64_t)v23, (uint64_t)&v14[v16 + 4], &qword_253F13188);
      swift_release();
      ++v12;
      --v11;
    }
    while (v11);
    goto LABEL_2;
  }
  __break(1u);
  return result;
}

uint64_t sub_21423536C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  _QWORD *v14;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  char v23[8];

  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = a1;
  *(_QWORD *)(v4 + 24) = a2;
  sub_2141D8BF8((uint64_t *)&unk_253F15820);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 40) = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  *(_OWORD *)(v5 + 72) = 0u;
  *(_OWORD *)(v5 + 88) = 0u;
  *(_OWORD *)(v5 + 104) = 0u;
  *(_OWORD *)(v5 + 120) = 0u;
  *(_OWORD *)(v5 + 136) = 0u;
  *(_OWORD *)(v5 + 152) = 0u;
  *(_BYTE *)(v5 + 168) = -2;
  *(_WORD *)(v5 + 16) = 256;
  *(_QWORD *)(v5 + 176) = 0;
  *(_QWORD *)(v5 + 184) = 0;
  v6 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v5 + 24) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v5 + 32) = v6;
  if ((v6 & 0xC000000000000000) == 0 || (v10 = MEMORY[0x24BEE4AF8], (result = sub_2144256AC()) == 0))
  {
LABEL_2:
    v7 = swift_allocObject();
    *(_QWORD *)(v7 + 16) = sub_21424C540;
    *(_QWORD *)(v7 + 24) = v4;
    v8 = *(_QWORD *)(v5 + 176);
    *(_QWORD *)(v5 + 176) = sub_21424E84C;
    *(_QWORD *)(v5 + 184) = v7;
    sub_2141D972C(v8);
    return v5;
  }
  v11 = result;
  if (result >= 1)
  {
    v12 = (uint64_t *)(v10 + 32);
    do
    {
      v13 = *v12;
      swift_weakInit();
      v14 = *(_QWORD **)(v13 + 32);
      swift_retain();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)(v13 + 32) = v14;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v14 = sub_214221F04(0, v14[2] + 1, 1, v14);
        *(_QWORD *)(v13 + 32) = v14;
      }
      v16 = v14[2];
      v17 = v14[3];
      v18 = v16 + 1;
      if (v16 >= v17 >> 1)
      {
        v22 = v16 + 1;
        v19 = v14;
        v20 = v14[2];
        v21 = sub_214221F04((_QWORD *)(v17 > 1), v16 + 1, 1, v19);
        v16 = v20;
        v18 = v22;
        v14 = v21;
        *(_QWORD *)(v13 + 32) = v21;
      }
      v14[2] = v18;
      sub_2141E801C((uint64_t)v23, (uint64_t)&v14[v16 + 4], &qword_253F13188);
      swift_release();
      ++v12;
      --v11;
    }
    while (v11);
    goto LABEL_2;
  }
  __break(1u);
  return result;
}

uint64_t sub_214235560(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  _QWORD *v18;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  char v27[8];

  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = a1;
  *(_QWORD *)(v4 + 24) = a2;
  sub_2141D8BF8(&qword_253F11A78);
  v5 = swift_allocObject();
  v6 = v5 + *(_QWORD *)(*(_QWORD *)v5 + 248);
  v7 = type metadata accessor for AxisMarkValues.Storage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  v8 = (_QWORD *)(v5 + *(_QWORD *)(*(_QWORD *)v5 + 256));
  *v8 = 0;
  v8[1] = 0;
  *(_WORD *)(v5 + 16) = 256;
  v9 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v5 + 24) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v5 + 32) = v9;
  if ((v9 & 0xC000000000000000) == 0 || (v14 = MEMORY[0x24BEE4AF8], (result = sub_2144256AC()) == 0))
  {
LABEL_2:
    v10 = swift_allocObject();
    *(_QWORD *)(v10 + 16) = sub_21424C540;
    *(_QWORD *)(v10 + 24) = v4;
    v11 = (uint64_t *)(v5 + *(_QWORD *)(*(_QWORD *)v5 + 256));
    v12 = *v11;
    *v11 = (uint64_t)sub_21424C7F0;
    v11[1] = v10;
    sub_2141D972C(v12);
    return v5;
  }
  v15 = result;
  if (result >= 1)
  {
    v16 = (uint64_t *)(v14 + 32);
    do
    {
      v17 = *v16;
      swift_weakInit();
      v18 = *(_QWORD **)(v17 + 32);
      swift_retain();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)(v17 + 32) = v18;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v18 = sub_214221F04(0, v18[2] + 1, 1, v18);
        *(_QWORD *)(v17 + 32) = v18;
      }
      v20 = v18[2];
      v21 = v18[3];
      v22 = v20 + 1;
      if (v20 >= v21 >> 1)
      {
        v26 = v20 + 1;
        v23 = v18;
        v24 = v18[2];
        v25 = sub_214221F04((_QWORD *)(v21 > 1), v20 + 1, 1, v23);
        v20 = v24;
        v22 = v26;
        v18 = v25;
        *(_QWORD *)(v17 + 32) = v25;
      }
      v18[2] = v22;
      sub_2141E801C((uint64_t)v27, (uint64_t)&v18[v20 + 4], &qword_253F13188);
      swift_release();
      ++v16;
      --v15;
    }
    while (v15);
    goto LABEL_2;
  }
  __break(1u);
  return result;
}

uint64_t sub_214235770(uint64_t a1)
{
  return sub_2142357C4(a1, &qword_253F15850);
}

uint64_t sub_21423577C(uint64_t a1)
{
  return sub_2142357C4(a1, &qword_253F11B40);
}

uint64_t sub_214235788(uint64_t a1)
{
  return sub_2142357C4(a1, &qword_253F157F8);
}

uint64_t sub_214235794(uint64_t a1)
{
  return sub_2142357C4(a1, &qword_254D69970);
}

uint64_t sub_2142357A0(uint64_t a1)
{
  return sub_2142357C4(a1, &qword_254D69968);
}

uint64_t sub_2142357AC(uint64_t a1)
{
  return sub_2142357C4(a1, &qword_254D69960);
}

uint64_t sub_2142357B8(uint64_t a1)
{
  return sub_2142357C4(a1, &qword_254D69948);
}

uint64_t sub_2142357C4(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v12;

  swift_beginAccess();
  if (*(_QWORD *)(*(_QWORD *)(v2 + 24) + 16) && (sub_214336CE4(a1), (v5 & 1) != 0))
  {
    swift_endAccess();
    sub_2141D8BF8(a2);
    v6 = swift_dynamicCastClassUnconditional();
    swift_retain();
  }
  else
  {
    swift_endAccess();
    swift_retain();
    v7 = sub_2142270B4(a1);
    v9 = v8;
    swift_release();
    swift_beginAccess();
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v12 = *(_QWORD *)(v2 + 24);
    *(_QWORD *)(v2 + 24) = 0x8000000000000000;
    sub_2142A27BC(v7, v9, a1, isUniquelyReferenced_nonNull_native);
    *(_QWORD *)(v2 + 24) = v12;
    swift_bridgeObjectRelease();
    swift_endAccess();
    sub_2141D8BF8(a2);
    return swift_dynamicCastClassUnconditional();
  }
  return v6;
}

uint64_t sub_214235934(uint64_t a1, __int16 a2)
{
  char v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;

  if (!HIBYTE(a2))
    return swift_retain();
  if (HIBYTE(a2) == 1)
    return sub_2142357C4(a1, &qword_253F11F38);
  v3 = a2;
  v4 = sub_2142357C4(a1, &qword_253F10138);
  v5 = v3 & 1;
  v6 = swift_allocObject();
  *(_BYTE *)(v6 + 16) = v5;
  sub_2141D8BF8(&qword_253F15D58);
  v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_2144271E0;
  *(_QWORD *)(v7 + 32) = v4;
  v9 = v7;
  sub_214424FF8();
  v8 = (_QWORD *)swift_allocObject();
  v8[2] = sub_21424E654;
  v8[3] = v6;
  v8[4] = v4;
  swift_retain();
  return sub_21423EBC0(v9, (uint64_t)sub_21424E67C, (uint64_t)v8);
}

uint64_t sub_214235A40(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v11;

  v3 = a1;
  if (a3)
  {
    if (a3 == 1)
      return sub_2142357C4(a1, &qword_253F13470);
    swift_bridgeObjectRetain();
    v6 = sub_2142357C4(v3, &qword_254D69908);
    v7 = swift_allocObject();
    *(_QWORD *)(v7 + 16) = a2;
    sub_2141D8BF8(&qword_253F15D58);
    v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = xmmword_2144271E0;
    *(_QWORD *)(v8 + 32) = v6;
    v11 = v8;
    sub_214424FF8();
    v9 = (_QWORD *)swift_allocObject();
    v9[2] = sub_21424CC98;
    v9[3] = v7;
    v9[4] = v6;
    swift_retain();
    return sub_21423EE98(v11, (uint64_t)sub_21424CCBC, (uint64_t)v9, &qword_253F13470, (uint64_t)&unk_24D1801A0, (uint64_t)sub_21424E84C, (void (*)(uint64_t, uint64_t))sub_2141FA1C4);
  }
  else
  {
    swift_retain();
  }
  return v3;
}

uint64_t sub_214235B7C(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v11;

  v3 = a1;
  if (a3)
  {
    if (a3 == 1)
      return sub_2142357C4(a1, &qword_253F15850);
    swift_bridgeObjectRetain();
    v6 = sub_2142357C4(v3, &qword_254D69918);
    v7 = swift_allocObject();
    *(_QWORD *)(v7 + 16) = a2;
    sub_2141D8BF8(&qword_253F15D58);
    v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = xmmword_2144271E0;
    *(_QWORD *)(v8 + 32) = v6;
    v11 = v8;
    sub_214424FF8();
    v9 = (_QWORD *)swift_allocObject();
    v9[2] = sub_21424E840;
    v9[3] = v7;
    v9[4] = v6;
    swift_retain();
    return sub_21423EE98(v11, (uint64_t)sub_21424CCBC, (uint64_t)v9, &qword_253F15850, (uint64_t)&unk_24D180448, (uint64_t)sub_21424E84C, (void (*)(uint64_t, uint64_t))sub_2141FA1C4);
  }
  else
  {
    swift_retain();
  }
  return v3;
}

uint64_t sub_214235CB8(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v11;

  v3 = a1;
  if (a3)
  {
    if (a3 == 1)
      return sub_2142357C4(a1, &qword_253F103A8);
    swift_bridgeObjectRetain();
    v6 = sub_2142357C4(v3, &qword_254D69920);
    v7 = swift_allocObject();
    *(_QWORD *)(v7 + 16) = a2;
    sub_2141D8BF8(&qword_253F15D58);
    v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = xmmword_2144271E0;
    *(_QWORD *)(v8 + 32) = v6;
    v11 = v8;
    sub_214424FF8();
    v9 = (_QWORD *)swift_allocObject();
    v9[2] = sub_21424E840;
    v9[3] = v7;
    v9[4] = v6;
    swift_retain();
    return sub_21423EE98(v11, (uint64_t)sub_21424CCBC, (uint64_t)v9, &qword_253F103A8, (uint64_t)&unk_24D1802E0, (uint64_t)sub_21424E84C, (void (*)(uint64_t, uint64_t))sub_2141FA1C4);
  }
  else
  {
    swift_retain();
  }
  return v3;
}

uint64_t sub_214235DF4(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v10;

  v3 = a1;
  if (a3)
  {
    if (a3 == 1)
      return sub_2142357C4(a1, &qword_254D69928);
    swift_retain();
    v6 = sub_2142357C4(v3, &qword_254D69930);
    sub_2141D8BF8(&qword_253F15D58);
    v7 = swift_allocObject();
    *(_OWORD *)(v7 + 16) = xmmword_2144271E0;
    *(_QWORD *)(v7 + 32) = v6;
    v10 = v7;
    sub_214424FF8();
    v8 = (_QWORD *)swift_allocObject();
    v8[2] = sub_21424CD08;
    v8[3] = a2;
    v8[4] = v6;
    swift_retain();
    return sub_21423EE98(v10, (uint64_t)sub_21424CD50, (uint64_t)v8, &qword_254D69928, (uint64_t)&unk_24D180330, (uint64_t)sub_21424C7F0, (void (*)(uint64_t, uint64_t))sub_2141FA1C4);
  }
  else
  {
    swift_retain();
  }
  return v3;
}

uint64_t sub_214235F14(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v11;

  v3 = a1;
  if (a3)
  {
    if (a3 == 1)
      return sub_2142357C4(a1, &qword_254D69938);
    swift_bridgeObjectRetain();
    v6 = sub_2142357C4(v3, &qword_254D69940);
    v7 = swift_allocObject();
    *(_QWORD *)(v7 + 16) = a2;
    sub_2141D8BF8(&qword_253F15D58);
    v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = xmmword_2144271E0;
    *(_QWORD *)(v8 + 32) = v6;
    v11 = v8;
    sub_214424FF8();
    v9 = (_QWORD *)swift_allocObject();
    v9[2] = sub_21424E840;
    v9[3] = v7;
    v9[4] = v6;
    swift_retain();
    return sub_21423EE98(v11, (uint64_t)sub_21424CCBC, (uint64_t)v9, &qword_254D69938, (uint64_t)&unk_24D1803A8, (uint64_t)sub_21424E84C, (void (*)(uint64_t, uint64_t))sub_2141FA1C4);
  }
  else
  {
    swift_retain();
  }
  return v3;
}

uint64_t sub_214236050(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v11;

  v3 = a1;
  if (a3)
  {
    if (a3 == 1)
      return sub_2142357C4(a1, &qword_254D699A8);
    swift_bridgeObjectRetain();
    v6 = sub_2142357C4(v3, &qword_254D699B0);
    v7 = swift_allocObject();
    *(_QWORD *)(v7 + 16) = a2;
    sub_2141D8BF8(&qword_253F15D58);
    v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = xmmword_2144271E0;
    *(_QWORD *)(v8 + 32) = v6;
    v11 = v8;
    sub_214424FF8();
    v9 = (_QWORD *)swift_allocObject();
    v9[2] = sub_21424E840;
    v9[3] = v7;
    v9[4] = v6;
    swift_retain();
    return sub_21423EE98(v11, (uint64_t)sub_21424CCBC, (uint64_t)v9, &qword_254D699A8, (uint64_t)&unk_24D180FD8, (uint64_t)sub_21424E84C, (void (*)(uint64_t, uint64_t))sub_2141FA1C4);
  }
  else
  {
    swift_retain();
  }
  return v3;
}

uint64_t sub_21423618C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;

  sub_2141D8BF8(&qword_253F15800);
  v2 = swift_dynamicCastClass();
  if (!v2)
  {
    sub_2141D8BF8(&qword_253F10570);
    v12 = swift_dynamicCastClass();
    if (!v12)
    {
      result = swift_release();
      *(_QWORD *)(a1 + 96) = 0;
      *(_OWORD *)(a1 + 64) = 0u;
      *(_OWORD *)(a1 + 80) = 0u;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)(a1 + 48) = 0u;
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_BYTE *)(a1 + 104) = -1;
      return result;
    }
    v13 = v12;
    swift_retain();
    sub_2143F8874();
    swift_beginAccess();
    v3 = *(_QWORD *)(v13 + 40);
    if (v3)
    {
      v19 = *(_QWORD *)(v13 + 128);
      v20 = *(_QWORD *)(v13 + 136);
      v17 = *(_QWORD *)(v13 + 112);
      v18 = *(_QWORD *)(v13 + 120);
      v4 = *(unsigned __int8 *)(v13 + 104);
      v6 = *(_QWORD *)(v13 + 88);
      v5 = *(_QWORD *)(v13 + 96);
      v8 = *(_QWORD *)(v13 + 72);
      v7 = *(_QWORD *)(v13 + 80);
      v9 = *(_DWORD *)(v13 + 64);
      v14 = v13 + 48;
      v11 = *(_QWORD *)(v13 + 48);
      v10 = *(_QWORD *)(v14 + 8);
      goto LABEL_7;
    }
LABEL_10:
    result = sub_214425628();
    __break(1u);
    return result;
  }
  swift_retain();
  sub_2143F8874();
  swift_beginAccess();
  v3 = *(_QWORD *)(v2 + 40);
  if (!v3)
    goto LABEL_10;
  v19 = *(_QWORD *)(v2 + 128);
  v20 = *(_QWORD *)(v2 + 136);
  v17 = *(_QWORD *)(v2 + 112);
  v18 = *(_QWORD *)(v2 + 120);
  v4 = *(unsigned __int8 *)(v2 + 104);
  v6 = *(_QWORD *)(v2 + 88);
  v5 = *(_QWORD *)(v2 + 96);
  v8 = *(_QWORD *)(v2 + 72);
  v7 = *(_QWORD *)(v2 + 80);
  v9 = *(_DWORD *)(v2 + 64);
  v11 = *(_QWORD *)(v2 + 48);
  v10 = *(_QWORD *)(v2 + 56);
LABEL_7:
  v16 = v10;
  v21 = v9 & 1;
  swift_retain();
  sub_2141D975C(v8);
  swift_bridgeObjectRetain();
  sub_2141E83DC(v5, v4);
  result = swift_release_n();
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v11;
  *(_QWORD *)(a1 + 16) = v16;
  *(_BYTE *)(a1 + 24) = v21;
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 48) = v6;
  *(_QWORD *)(a1 + 56) = v5;
  *(_QWORD *)(a1 + 64) = v4;
  *(_QWORD *)(a1 + 72) = v17;
  *(_QWORD *)(a1 + 80) = v18;
  *(_QWORD *)(a1 + 88) = v19;
  *(_QWORD *)(a1 + 96) = v20;
  *(_BYTE *)(a1 + 104) = v2 == 0;
  return result;
}

uint64_t sub_2142363C0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  sub_2141D8BF8(&qword_253F10580);
  v2 = swift_dynamicCastClass();
  if (!v2)
  {
    sub_2141D8BF8(&qword_253F10578);
    v10 = swift_dynamicCastClass();
    if (!v10)
    {
      result = swift_release();
      *(_OWORD *)(a1 + 64) = 0u;
      *(_OWORD *)(a1 + 80) = 0u;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)(a1 + 48) = 0u;
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_BYTE *)(a1 + 96) = -1;
      return result;
    }
    v11 = v10;
    swift_retain();
    sub_2143F8874();
    swift_beginAccess();
    v17 = *(_QWORD *)(v11 + 40);
    if (v17)
    {
      v18 = *(_QWORD *)(v11 + 128);
      v15 = *(_QWORD *)(v11 + 112);
      v16 = *(_QWORD *)(v11 + 120);
      v14 = *(_QWORD *)(v11 + 104);
      v3 = *(unsigned __int8 *)(v11 + 96);
      v5 = *(_QWORD *)(v11 + 80);
      v4 = *(_QWORD *)(v11 + 88);
      v7 = *(_QWORD *)(v11 + 64);
      v6 = *(_QWORD *)(v11 + 72);
      v12 = v11 + 48;
      v9 = *(_QWORD *)(v11 + 48);
      v8 = *(_QWORD *)(v12 + 8);
      goto LABEL_7;
    }
LABEL_10:
    result = sub_214425628();
    __break(1u);
    return result;
  }
  swift_retain();
  sub_2143F8874();
  swift_beginAccess();
  v17 = *(_QWORD *)(v2 + 40);
  if (!v17)
    goto LABEL_10;
  v18 = *(_QWORD *)(v2 + 128);
  v15 = *(_QWORD *)(v2 + 112);
  v16 = *(_QWORD *)(v2 + 120);
  v14 = *(_QWORD *)(v2 + 104);
  v3 = *(unsigned __int8 *)(v2 + 96);
  v5 = *(_QWORD *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 88);
  v7 = *(_QWORD *)(v2 + 64);
  v6 = *(_QWORD *)(v2 + 72);
  v9 = *(_QWORD *)(v2 + 48);
  v8 = *(_QWORD *)(v2 + 56);
LABEL_7:
  swift_retain();
  swift_retain();
  sub_2141D975C(v7);
  swift_bridgeObjectRetain();
  sub_2141E83DC(v4, v3);
  result = swift_release_n();
  *(_QWORD *)a1 = v17;
  *(_QWORD *)(a1 + 8) = v9;
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v5;
  *(_QWORD *)(a1 + 48) = v4;
  *(_QWORD *)(a1 + 56) = v3;
  *(_QWORD *)(a1 + 64) = v14;
  *(_QWORD *)(a1 + 72) = v15;
  *(_QWORD *)(a1 + 80) = v16;
  *(_QWORD *)(a1 + 88) = v18;
  *(_BYTE *)(a1 + 96) = v2 == 0;
  return result;
}

uint64_t sub_2142365E8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  _BYTE v8[136];
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17[17];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;

  sub_2141D8BF8(&qword_254D69950);
  v2 = swift_dynamicCastClass();
  if (v2)
  {
    v3 = v2;
    swift_retain();
    sub_2143F8874();
    swift_beginAccess();
    sub_2141E801C(v3 + 40, (uint64_t)v8, &qword_254D69958);
    sub_2141E801C((uint64_t)v8, (uint64_t)v17, &qword_254D69958);
    if (sub_21424CE60(v17) != 1)
    {
      sub_2141E801C((uint64_t)v8, (uint64_t)&v9, &qword_254D69958);
      v22 = v13;
      v23 = v14;
      v24 = v15;
      v25 = v16;
      v18 = v9;
      v19 = v10;
      v20 = v11;
      v21 = v12;
      sub_21424CE84((uint64_t)&v9, (void (*)(uint64_t, uint64_t))sub_2141DD47C);
      swift_release_n();
      sub_21424CF00((uint64_t)&v18);
LABEL_7:
      sub_2141E801C((uint64_t)&v18, (uint64_t)v8, &qword_254D695C0);
      sub_2141E801C((uint64_t)v8, (uint64_t)v17, &qword_254D695C0);
      nullsub_1(v17, v6);
      return sub_2141E801C((uint64_t)v17, a1, &qword_253F149E8);
    }
  }
  else
  {
    sub_2141D8BF8(&qword_254D69980);
    v4 = swift_dynamicCastClass();
    if (!v4)
    {
      swift_release();
      sub_21421C37C((uint64_t)v17);
      return sub_2141E801C((uint64_t)v17, a1, &qword_253F149E8);
    }
    v5 = v4;
    swift_retain();
    sub_2143F8874();
    swift_beginAccess();
    sub_2141E801C(v5 + 40, (uint64_t)v8, &qword_253F12F50);
    sub_2141E801C((uint64_t)v8, (uint64_t)v17, &qword_253F12F50);
    if (sub_21424CE60(v17) != 1)
    {
      sub_2141E801C((uint64_t)v8, (uint64_t)&v9, &qword_253F12F50);
      v22 = v13;
      v23 = v14;
      v24 = v15;
      v25 = v16;
      v18 = v9;
      v19 = v10;
      v20 = v11;
      v21 = v12;
      sub_21424CE84((uint64_t)&v9, (void (*)(uint64_t, uint64_t))sub_2141DD47C);
      swift_release_n();
      sub_21424CE78((uint64_t)&v18);
      goto LABEL_7;
    }
  }
  result = sub_214425628();
  __break(1u);
  return result;
}

uint64_t sub_214236874@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  _OWORD v7[8];
  _OWORD v8[8];
  BOOL v9;

  sub_2141D8BF8(&qword_253F10260);
  v2 = swift_dynamicCastClass();
  if (v2)
  {
    swift_retain();
    sub_2143F8874();
    swift_beginAccess();
    sub_2141E070C(v2 + 40, (uint64_t)v7, &qword_254D69978);
    if (!*(_QWORD *)&v7[0])
    {
      v3 = &qword_254D69978;
LABEL_10:
      sub_2141E0750((uint64_t)v7, v3);
      result = sub_214425628();
      __break(1u);
      return result;
    }
  }
  else
  {
    sub_2141D8BF8(&qword_253F10258);
    v4 = swift_dynamicCastClass();
    if (!v4)
    {
      result = swift_release();
      *(_OWORD *)(a1 + 96) = 0u;
      *(_OWORD *)(a1 + 112) = 0u;
      *(_OWORD *)(a1 + 64) = 0u;
      *(_OWORD *)(a1 + 80) = 0u;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)(a1 + 48) = 0u;
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_BYTE *)(a1 + 128) = -1;
      return result;
    }
    v5 = v4;
    swift_retain();
    sub_2143F8874();
    swift_beginAccess();
    sub_2141E070C(v5 + 40, (uint64_t)v7, &qword_253F12F60);
    if (!*(_QWORD *)&v7[0])
    {
      v3 = &qword_253F12F60;
      goto LABEL_10;
    }
  }
  v8[4] = v7[4];
  v8[5] = v7[5];
  v8[6] = v7[6];
  v8[7] = v7[7];
  v8[0] = v7[0];
  v8[1] = v7[1];
  v8[2] = v7[2];
  v8[3] = v7[3];
  swift_release_n();
  v9 = v2 == 0;
  return sub_2141E801C((uint64_t)v8, a1, &qword_254D695C8);
}

uint64_t sub_214236A54(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t result;
  int64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;

  v12 = MEMORY[0x24BEE4AF8];
  v1 = a1 + 64;
  v2 = 1 << *(_BYTE *)(a1 + 32);
  v3 = -1;
  if (v2 < 64)
    v3 = ~(-1 << v2);
  v4 = v3 & *(_QWORD *)(a1 + 64);
  v5 = (unint64_t)(v2 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v7 = 0;
  while (1)
  {
    if (v4)
    {
      v4 &= v4 - 1;
      goto LABEL_5;
    }
    v9 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v9 >= v5)
      goto LABEL_23;
    v10 = *(_QWORD *)(v1 + 8 * v9);
    ++v7;
    if (!v10)
    {
      v7 = v9 + 1;
      if (v9 + 1 >= v5)
        goto LABEL_23;
      v10 = *(_QWORD *)(v1 + 8 * v7);
      if (!v10)
      {
        v7 = v9 + 2;
        if (v9 + 2 >= v5)
          goto LABEL_23;
        v10 = *(_QWORD *)(v1 + 8 * v7);
        if (!v10)
        {
          v7 = v9 + 3;
          if (v9 + 3 >= v5)
            goto LABEL_23;
          v10 = *(_QWORD *)(v1 + 8 * v7);
          if (!v10)
            break;
        }
      }
    }
LABEL_22:
    v4 = (v10 - 1) & v10;
LABEL_5:
    v8 = swift_bridgeObjectRetain();
    result = sub_2143EA62C(v8);
  }
  v11 = v9 + 4;
  if (v11 >= v5)
  {
LABEL_23:
    swift_release();
    return v12;
  }
  v10 = *(_QWORD *)(v1 + 8 * v11);
  if (v10)
  {
    v7 = v11;
    goto LABEL_22;
  }
  while (1)
  {
    v7 = v11 + 1;
    if (__OFADD__(v11, 1))
      break;
    if (v7 >= v5)
      goto LABEL_23;
    v10 = *(_QWORD *)(v1 + 8 * v7);
    ++v11;
    if (v10)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_214236BC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  char isUniquelyReferenced_nonNull_native;
  char v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  unint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  unint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t result;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  char v75[16];
  char v76[32];
  uint64_t v77;
  _OWORD v78[2];
  __int128 v79;
  __int128 v80;
  _OWORD v81[2];
  _BYTE v82[16];
  _BYTE v83[16];
  __n128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  char v89;
  _BYTE v90[48];
  _BYTE v91[32];
  unint64_t v92;
  uint64_t v93[6];
  char v94[8];
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99[6];
  _BYTE v100[32];
  unint64_t v101;
  char v102;
  _BYTE v103[64];

  v6 = *(_QWORD *)(a1 + 152);
  v7 = *(_QWORD *)(a1 + 168);
  v72 = *(_QWORD *)(a1 + 160);
  v8 = *(_QWORD *)(a1 + 192);
  v9 = *(_OWORD *)(a1 + 48);
  v86 = *(_OWORD *)(a1 + 32);
  v87 = v9;
  v88 = *(_OWORD *)(a1 + 64);
  v89 = *(_BYTE *)(a1 + 80);
  v10 = *(_OWORD *)(a1 + 16);
  v84 = *(__n128 *)a1;
  v85 = v10;
  sub_2141E801C(a2, (uint64_t)v78, &qword_253F15558);
  v11 = v79;
  v66 = a2;
  if ((v79 & 0x8000000000000000) != 0)
  {
    *(_QWORD *)&v79 = v79 & 0x7FFFFFFFFFFFFFFFLL;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    sub_21424C45C((uint64_t)&v84, (void (*)(uint64_t, unint64_t, unint64_t))sub_2141E7DC4, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7DF0, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7DD4);
  }
  else
  {
    v80 = v78[0];
    v81[0] = v78[1];
    v81[1] = v79;
    sub_2141E801C((uint64_t)&v80 + 8, (uint64_t)v82, &qword_253F11A68);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    sub_21424C45C((uint64_t)&v84, (void (*)(uint64_t, unint64_t, unint64_t))sub_2141E7DC4, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7DF0, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7DD4);
    sub_21424E020(a2);
    sub_21424C608((uint64_t)v82);
    sub_2141E801C((uint64_t)v81 + 8, (uint64_t)v83, &qword_253F11A68);
    sub_21424C608((uint64_t)v83);
  }
  v12 = *(_QWORD **)(a1 + 88);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_21424C45C((uint64_t)&v84, (void (*)(uint64_t, unint64_t, unint64_t))sub_2141E7DC4, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7DF0, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7DD4);
  sub_21424C638(a1);
  swift_retain();
  v13 = swift_bridgeObjectRetain();
  v14 = sub_214249038(v13, v8, (uint64_t)&v84, a1, a3, v72, v11 >= 0, (uint64_t)v75, (void (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t, _QWORD, int))sub_214238570);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v69 = v6;
  swift_release();
  swift_release();
  sub_2142495CC(a1);
  sub_21424C45C((uint64_t)&v84, (void (*)(uint64_t, unint64_t, unint64_t))sub_2141E7F20, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7F98, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7F7C);
  v68 = v12;
  v15 = v14;
  swift_bridgeObjectRelease();
  swift_release();
  v16 = *(unsigned __int8 *)(a1 + 106);
  if (v14 >> 62)
  {
    type metadata accessor for AnySignal();
    swift_bridgeObjectRetain_n();
    v17 = sub_214425634();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain_n();
    sub_21442579C();
    type metadata accessor for AnySignal();
    v17 = v14;
  }
  v18 = v70;
  v19 = (_QWORD *)swift_allocObject();
  v19[2] = sub_2142482F4;
  v19[3] = 0;
  v19[4] = v15;
  sub_2141D8BF8(&qword_253F15850);
  swift_allocObject();
  v71 = sub_214243114(v17, (uint64_t)sub_21424C760, (uint64_t)v19, (uint64_t)&unk_24D180470, (uint64_t)sub_21424CDA4, (void (*)(uint64_t, uint64_t))sub_2141FA1C4);
  sub_2141E7D60((uint64_t)&v85, (uint64_t)v90);
  sub_2141E7D60((uint64_t)v90, (uint64_t)v100);
  v20 = (v101 >> 61) & 3;
  if ((_DWORD)v20)
  {
    if ((_DWORD)v20 != 1)
    {
      v101 &= 0x9FFFFFFFFFFFFFFFLL;
      result = sub_2141E801C((uint64_t)v100, (uint64_t)v103, &qword_253F0FF68);
      __break(1u);
      return result;
    }
    v21 = v103;
  }
  else
  {
    v21 = &v102;
  }
  v65 = v15;
  v101 &= 0x9FFFFFFFFFFFFFFFLL;
  sub_2141E801C((uint64_t)v100, (uint64_t)v21, &qword_253F15558);
  sub_2141E801C(v66, (uint64_t)v76, &qword_253F15558);
  if (v77 < 0)
  {
    v77 &= ~0x8000000000000000;
    swift_retain_n();
  }
  else
  {
    sub_2141D8BF8(&qword_253F15D58);
    v22 = swift_allocObject();
    *(_OWORD *)(v22 + 16) = xmmword_214427890;
    *(_QWORD *)(v22 + 32) = v71;
    *(_QWORD *)(v22 + 40) = a3;
    v99[0] = v22;
    sub_214424FF8();
    v23 = v99[0];
    v24 = (_QWORD *)swift_allocObject();
    v24[2] = sub_214238818;
    v24[3] = 0;
    v24[4] = v71;
    v24[5] = a3;
    swift_retain_n();
    swift_retain_n();
    sub_21423EE98(v23, (uint64_t)sub_21424C7A0, (uint64_t)v24, &qword_253F15850, (uint64_t)&unk_24D180448, (uint64_t)sub_21424E84C, (void (*)(uint64_t, uint64_t))sub_2141FA1C4);
  }
  v64 = *(_QWORD *)(a1 + 128);
  sub_2141F7AFC(&v84);
  v26 = v25;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v99[0] = v18[7];
  v18[7] = 0x8000000000000000;
  sub_2142A2CA4(v26, v16, isUniquelyReferenced_nonNull_native);
  v18[7] = v99[0];
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v18[7] + 16))
  {
    sub_214336B74(v16);
    if ((v28 & 1) != 0)
    {
      sub_2141D8BF8(&qword_253F15800);
      v29 = swift_dynamicCastClass();
      if (v29)
        swift_retain();
    }
    else
    {
      v29 = 0;
    }
  }
  else
  {
    v29 = 0;
  }
  sub_2141E7D60((uint64_t)v90, (uint64_t)v94);
  v30 = v98;
  v31 = v98 & 0x9FFFFFFFFFFFFFFFLL;
  v98 &= 0x9FFFFFFFFFFFFFFFLL;
  if ((v30 & 0x4000000000000000) != 0)
  {
    sub_2141E801C((uint64_t)v94, (uint64_t)v99, &qword_253F0FF68);
  }
  else if ((v31 & 0x8000000000000000) == 0)
  {
    v32 = v97;
    v33 = v96;
    v34 = v95;
    v35 = v29;
    v36 = v16;
    v37 = v96 >> 8;
    sub_2141E7DC4(v97, v30, SBYTE1(v30));
    sub_2141E7DC4(v34, v33, v37);
    v38 = v34;
    v6 = v69;
    v39 = v37;
    v16 = v36;
    v29 = v35;
    sub_2141E7F20(v38, v33, v39);
    sub_2141E7F20(v32, v30, SBYTE1(v30));
    v40 = swift_retain();
    sub_214233F10(v40, v16);
  }
  v41 = swift_allocObject();
  v42 = v87;
  *(_OWORD *)(v41 + 48) = v86;
  *(_OWORD *)(v41 + 64) = v42;
  *(_OWORD *)(v41 + 80) = v88;
  *(_BYTE *)(v41 + 96) = v89;
  v43 = v85;
  *(__n128 *)(v41 + 16) = v84;
  *(_OWORD *)(v41 + 32) = v43;
  swift_retain();
  swift_retain();
  sub_21424C45C((uint64_t)&v84, (void (*)(uint64_t, unint64_t, unint64_t))sub_2141E7DC4, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7DF0, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7DD4);
  v44 = swift_retain();
  v45 = sub_214234C18(v44, v6, v72, (uint64_t)sub_21424C7B0, v41);
  v46 = swift_isUniquelyReferenced_nonNull_native();
  v93[0] = v18[6];
  v18[6] = 0x8000000000000000;
  sub_2142A2B70(v45, v16, v46);
  v18[6] = v93[0];
  swift_bridgeObjectRelease();
  if (v68[2])
  {
    if (v29)
    {
      sub_2141E7D60((uint64_t)v90, (uint64_t)v91);
      v67 = (v92 >> 61) & 3;
      v92 &= 0x9FFFFFFFFFFFFFFFLL;
      if (v67 > 1)
        v47 = &qword_253F0FF68;
      else
        v47 = &qword_253F15558;
      sub_2141E801C((uint64_t)v91, (uint64_t)v93, v47);
      v48 = *(_QWORD *)(a1 + 184);
      v49 = *(_QWORD *)(a1 + 120);
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      v63 = (void *)swift_retain();
      sub_21424974C(v68, v65, v16, v29, v67, v72, v6, v48, v7, v49, v64, v63);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      sub_2141D8BF8(&qword_253F15D58);
      v50 = swift_allocObject();
      *(_OWORD *)(v50 + 16) = xmmword_2144271E0;
      *(_QWORD *)(v50 + 32) = v71;
      v73 = v50;
      sub_214424FF8();
      v51 = (_QWORD *)swift_allocObject();
      v51[2] = sub_214248344;
      v51[3] = 0;
      v51[4] = v71;
      swift_retain_n();
      sub_2142422FC(v73, (uint64_t)sub_21424C7C8, (uint64_t)v51);
      v52 = *v18;
      if (*(_QWORD *)(*v18 + 16))
      {
        v53 = sub_214336B74(v16);
        if ((v54 & 1) != 0)
        {
          v55 = *(_QWORD *)(*(_QWORD *)(v52 + 56) + 8 * v53);
          swift_bridgeObjectRetain();
        }
        else
        {
          v55 = MEMORY[0x24BEE4AF8];
        }
      }
      else
      {
        v55 = MEMORY[0x24BEE4AF8];
      }
      swift_retain();
      v56 = swift_bridgeObjectRetain();
      MEMORY[0x2199CC8E4](v56);
      if (*(_QWORD *)((v55 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v55 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        sub_21442501C();
      sub_214425064();
      sub_214424FF8();
      swift_bridgeObjectRelease();
      v57 = swift_isUniquelyReferenced_nonNull_native();
      v74 = *v18;
      *v18 = 0x8000000000000000;
      sub_2142A2A3C(v55, v16, v57);
      *v18 = v74;
      swift_bridgeObjectRelease();
      v58 = swift_retain();
      MEMORY[0x2199CC8E4](v58);
      if (*(_QWORD *)((v18[1] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v18[1] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        sub_21442501C();
      sub_214425064();
      sub_214424FF8();
      v59 = swift_retain();
      MEMORY[0x2199CC8E4](v59);
      if (*(_QWORD *)((v18[2] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v18[2] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        sub_21442501C();
      sub_214425064();
      sub_214424FF8();
      v60 = swift_retain();
      MEMORY[0x2199CC8E4](v60);
      if (v16)
        v61 = v18[5];
      else
        v61 = v18[4];
      if (*(_QWORD *)((v61 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v61 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        sub_21442501C();
      sub_214425064();
      sub_214424FF8();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release_n();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
    }
  }
  else
  {
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return sub_21424C45C((uint64_t)&v84, (void (*)(uint64_t, unint64_t, unint64_t))sub_2141E7F20, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7F98, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7F7C);
}

uint64_t sub_21423782C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t result;
  char *v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  _BYTE v63[16];
  _OWORD v64[2];
  __int128 v65;
  __int128 v66;
  _OWORD v67[2];
  _BYTE v68[16];
  _BYTE v69[16];
  __n128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  char v75;
  _BYTE v76[48];
  _BYTE v77[32];
  unint64_t v78;
  char v79;
  _BYTE v80[64];

  v6 = *(_QWORD *)(a1 + 152);
  v7 = *(_QWORD *)(a1 + 160);
  v8 = *(_QWORD *)(a1 + 168);
  v9 = *(_QWORD *)(a1 + 192);
  v10 = *(_OWORD *)(a1 + 48);
  v72 = *(_OWORD *)(a1 + 32);
  v73 = v10;
  v74 = *(_OWORD *)(a1 + 64);
  v75 = *(_BYTE *)(a1 + 80);
  v11 = *(_OWORD *)(a1 + 16);
  v70 = *(__n128 *)a1;
  v71 = v11;
  sub_2141E801C(a2, (uint64_t)v64, &qword_253F0FF68);
  v51 = v3;
  v56 = v65;
  if ((v65 & 0x8000000000000000) != 0)
  {
    *(_QWORD *)&v65 = v65 & 0x7FFFFFFFFFFFFFFFLL;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    sub_21424C45C((uint64_t)&v70, (void (*)(uint64_t, unint64_t, unint64_t))sub_2141E7DC4, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7DF0, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7DD4);
  }
  else
  {
    v66 = v64[0];
    v67[0] = v64[1];
    v67[1] = v65;
    sub_2141E801C((uint64_t)&v66 + 8, (uint64_t)v68, &qword_253F11A68);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    sub_21424C45C((uint64_t)&v70, (void (*)(uint64_t, unint64_t, unint64_t))sub_2141E7DC4, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7DF0, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7DD4);
    sub_21424E020(a2);
    sub_21424C608((uint64_t)v68);
    sub_2141E801C((uint64_t)v67 + 8, (uint64_t)v69, &qword_253F11A68);
    sub_21424C608((uint64_t)v69);
  }
  v12 = *(_QWORD **)(a1 + 88);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_21424C45C((uint64_t)&v70, (void (*)(uint64_t, unint64_t, unint64_t))sub_2141E7DC4, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7DF0, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7DD4);
  sub_21424C638(a1);
  swift_retain();
  v13 = swift_bridgeObjectRetain();
  v14 = sub_214249038(v13, v9, (uint64_t)&v70, a1, a3, v7, v56 >= 0, (uint64_t)v63, (void (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t, _QWORD, int))sub_2142382C8);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v57 = v6;
  swift_release();
  swift_release();
  sub_2142495CC(a1);
  sub_21424C45C((uint64_t)&v70, (void (*)(uint64_t, unint64_t, unint64_t))sub_2141E7F20, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7F98, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7F7C);
  v52 = v12;
  swift_bridgeObjectRelease();
  swift_release();
  v15 = *(unsigned __int8 *)(a1 + 106);
  if (v14 >> 62)
  {
    type metadata accessor for AnySignal();
    swift_bridgeObjectRetain_n();
    v16 = sub_214425634();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain_n();
    sub_21442579C();
    type metadata accessor for AnySignal();
    v16 = v14;
  }
  v54 = v7;
  v17 = (_QWORD *)swift_allocObject();
  v17[2] = sub_2142482DC;
  v17[3] = 0;
  v17[4] = v14;
  sub_2141D8BF8(&qword_253F10588);
  swift_allocObject();
  v53 = sub_214243114(v16, (uint64_t)sub_21424E068, (uint64_t)v17, (uint64_t)&unk_24D181078, (uint64_t)sub_21424E508, (void (*)(uint64_t, uint64_t))sub_2141FA1C4);
  sub_2141E7D60((uint64_t)&v71, (uint64_t)v76);
  sub_2141E7D60((uint64_t)v76, (uint64_t)v77);
  v18 = (v78 >> 61) & 3;
  if ((_DWORD)v18 == 2)
  {
    v78 &= 0x9FFFFFFFFFFFFFFFLL;
    sub_2141E801C((uint64_t)v77, (uint64_t)v80, &qword_253F0FF68);
    v19 = *(_QWORD *)(a1 + 128);
    swift_retain();
    sub_2141F87C8(&v70);
    v21 = v20;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v59 = v51[7];
    v51[7] = 0x8000000000000000;
    sub_2142A2CA4(v21, v15, isUniquelyReferenced_nonNull_native);
    v51[7] = v59;
    swift_release();
    swift_bridgeObjectRelease();
    v55 = v15;
    v50 = v19;
    if (*(_QWORD *)(v51[7] + 16))
    {
      sub_214336B74(v15);
      v23 = v54;
      if ((v24 & 1) != 0)
      {
        sub_2141D8BF8(&qword_253F10570);
        v25 = swift_dynamicCastClass();
        if (v25)
          swift_retain();
      }
      else
      {
        v25 = 0;
      }
    }
    else
    {
      v25 = 0;
      v23 = v54;
    }
    v26 = swift_allocObject();
    v27 = v73;
    *(_OWORD *)(v26 + 48) = v72;
    *(_OWORD *)(v26 + 64) = v27;
    *(_OWORD *)(v26 + 80) = v74;
    *(_BYTE *)(v26 + 96) = v75;
    v28 = v71;
    *(__n128 *)(v26 + 16) = v70;
    *(_OWORD *)(v26 + 32) = v28;
    swift_retain();
    swift_retain();
    sub_21424C45C((uint64_t)&v70, (void (*)(uint64_t, unint64_t, unint64_t))sub_2141E7DC4, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7DF0, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7DD4);
    v29 = swift_retain();
    v30 = sub_2142348C8(v29, v57, v23, (uint64_t)sub_21424E0F8, v26);
    v31 = swift_isUniquelyReferenced_nonNull_native();
    v60 = v51[6];
    v51[6] = 0x8000000000000000;
    sub_2142A2B70(v30, v55, v31);
    v51[6] = v60;
    swift_bridgeObjectRelease();
    if (v52[2])
    {
      if (v25)
      {
        v32 = v23;
        v33 = *(_QWORD *)(a1 + 184);
        v34 = *(_QWORD *)(a1 + 120);
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_bridgeObjectRetain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        v35 = (void *)swift_retain();
        sub_21424ACD4(v52, v14, v55, v25, 2, v32, v57, v33, v8, v34, v50, v35);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        sub_2141D8BF8(&qword_253F15D58);
        v36 = swift_allocObject();
        *(_OWORD *)(v36 + 16) = xmmword_2144271E0;
        *(_QWORD *)(v36 + 32) = v53;
        v61 = v36;
        sub_214424FF8();
        v37 = (_QWORD *)swift_allocObject();
        v37[2] = sub_2142482E8;
        v37[3] = 0;
        v37[4] = v53;
        swift_retain_n();
        sub_2142422FC(v61, (uint64_t)sub_21424C7C8, (uint64_t)v37);
        v38 = *v51;
        if (*(_QWORD *)(*v51 + 16) && (v39 = sub_214336B74(v55), (v40 & 1) != 0))
        {
          v41 = *(_QWORD *)(*(_QWORD *)(v38 + 56) + 8 * v39);
          swift_bridgeObjectRetain();
        }
        else
        {
          v41 = MEMORY[0x24BEE4AF8];
        }
        swift_retain();
        v42 = swift_bridgeObjectRetain();
        MEMORY[0x2199CC8E4](v42);
        if (*(_QWORD *)((v41 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v41 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          sub_21442501C();
        sub_214425064();
        sub_214424FF8();
        swift_bridgeObjectRelease();
        v43 = swift_isUniquelyReferenced_nonNull_native();
        v62 = *v51;
        *v51 = 0x8000000000000000;
        sub_2142A2A3C(v41, v55, v43);
        *v51 = v62;
        swift_bridgeObjectRelease();
        v44 = swift_retain();
        MEMORY[0x2199CC8E4](v44);
        if (*(_QWORD *)((v51[1] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v51[1] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          sub_21442501C();
        sub_214425064();
        sub_214424FF8();
        v45 = swift_retain();
        MEMORY[0x2199CC8E4](v45);
        if (*(_QWORD *)((v51[2] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v51[2] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          sub_21442501C();
        sub_214425064();
        sub_214424FF8();
        v46 = swift_retain();
        MEMORY[0x2199CC8E4](v46);
        if (v55)
          v47 = v51[5];
        else
          v47 = v51[4];
        if (*(_QWORD *)((v47 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v47 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          sub_21442501C();
        sub_214425064();
        sub_214424FF8();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release_n();
        swift_release();
      }
      else
      {
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
      }
    }
    else
    {
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    return sub_21424C45C((uint64_t)&v70, (void (*)(uint64_t, unint64_t, unint64_t))sub_2141E7F20, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7F98, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7F7C);
  }
  else
  {
    if ((_DWORD)v18)
      v49 = v80;
    else
      v49 = &v79;
    v78 &= 0x9FFFFFFFFFFFFFFFLL;
    result = sub_2141E801C((uint64_t)v77, (uint64_t)v49, &qword_253F15558);
    __break(1u);
  }
  return result;
}

uint64_t sub_214238268@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 1;
  type metadata accessor for AxisMarkValues.Storage.Stride(0);
  swift_storeEnumTagMultiPayload();
  result = type metadata accessor for AxisMarkValues.Storage(0);
  v3 = *(int *)(result + 24);
  *(_BYTE *)(a1 + *(int *)(result + 20)) = 2;
  *(_BYTE *)(a1 + v3) = 2;
  return result;
}

uint64_t sub_2142382C8(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, char a9)
{
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t (*v16)@<X0>(uint64_t *@<X8>);
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  void *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;

  if (a2)
  {
    if (a2 != 1)
    {
      sub_2141D8BF8(&qword_253F15D58);
      v26 = swift_allocObject();
      *(_OWORD *)(v26 + 16) = xmmword_214427890;
      *(_QWORD *)(v26 + 32) = a1;
      *(_QWORD *)(v26 + 40) = a6;
      v31 = v26;
      sub_214424FF8();
      v27 = (_QWORD *)swift_allocObject();
      v27[2] = sub_2143A3548;
      v27[3] = 0;
      v27[4] = a1;
      v27[5] = a6;
      swift_retain_n();
      swift_retain_n();
      v16 = sub_21424CDF0;
      v22 = (uint64_t *)&unk_253F10588;
      v23 = &unk_24D1811B8;
      v24 = v31;
      v25 = (uint64_t)v27;
      return sub_21423EE98(v24, (uint64_t)v16, v25, v22, (uint64_t)v23, (uint64_t)sub_21424E84C, (void (*)(uint64_t, uint64_t))sub_2141FA1C4);
    }
    sub_2141D8BF8(&qword_253F15D58);
    v13 = swift_allocObject();
    *(_OWORD *)(v13 + 16) = xmmword_214428BD0;
    *(_QWORD *)(v13 + 32) = a1;
    *(_QWORD *)(v13 + 40) = a6;
    *(_QWORD *)(v13 + 48) = a5;
    *(_QWORD *)(v13 + 56) = a7;
    v29 = v13;
    sub_214424FF8();
    v14 = v29;
    v15 = (_QWORD *)swift_allocObject();
    v15[2] = sub_2143A3514;
    v15[3] = 0;
    v15[4] = a1;
    v15[5] = a6;
    v15[6] = a5;
    v15[7] = a7;
    swift_retain_n();
    swift_retain_n();
    swift_retain_n();
    swift_retain_n();
    v16 = (uint64_t (*)@<X0>(uint64_t *@<X8>))sub_21424CE00;
  }
  else
  {
    v20 = swift_allocObject();
    *(_BYTE *)(v20 + 16) = a8 & 1;
    *(_QWORD *)(v20 + 24) = a3;
    *(_BYTE *)(v20 + 32) = a4;
    *(_BYTE *)(v20 + 33) = a9 & 1;
    sub_2141D8BF8(&qword_253F15D58);
    v21 = swift_allocObject();
    *(_OWORD *)(v21 + 16) = xmmword_2144271F0;
    *(_QWORD *)(v21 + 32) = a1;
    *(_QWORD *)(v21 + 40) = a5;
    *(_QWORD *)(v21 + 48) = a6;
    v30 = v21;
    sub_214424FF8();
    v14 = v30;
    v15 = (_QWORD *)swift_allocObject();
    v15[2] = sub_21424E6B4;
    v15[3] = v20;
    v15[4] = a1;
    v15[5] = a5;
    v15[6] = a6;
    swift_retain_n();
    swift_retain_n();
    swift_retain_n();
    v16 = sub_21424CE2C;
  }
  v22 = &qword_253F15850;
  v23 = &unk_24D180448;
  v24 = v14;
  v25 = (uint64_t)v15;
  return sub_21423EE98(v24, (uint64_t)v16, v25, v22, (uint64_t)v23, (uint64_t)sub_21424E84C, (void (*)(uint64_t, uint64_t))sub_2141FA1C4);
}

uint64_t sub_214238570(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, char a9)
{
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t (*v16)@<X0>(uint64_t *@<X8>);
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  void *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;

  if (a2)
  {
    if (a2 != 1)
    {
      sub_2141D8BF8(&qword_253F15D58);
      v26 = swift_allocObject();
      *(_OWORD *)(v26 + 16) = xmmword_214427890;
      *(_QWORD *)(v26 + 32) = a1;
      *(_QWORD *)(v26 + 40) = a6;
      v31 = v26;
      sub_214424FF8();
      v27 = (_QWORD *)swift_allocObject();
      v27[2] = sub_2143A3548;
      v27[3] = 0;
      v27[4] = a1;
      v27[5] = a6;
      swift_retain_n();
      swift_retain_n();
      v16 = sub_21424CDF0;
      v22 = (uint64_t *)&unk_253F10588;
      v23 = &unk_24D1811B8;
      v24 = v31;
      v25 = (uint64_t)v27;
      return sub_21423EE98(v24, (uint64_t)v16, v25, v22, (uint64_t)v23, (uint64_t)sub_21424E84C, (void (*)(uint64_t, uint64_t))sub_2141FA1C4);
    }
    sub_2141D8BF8(&qword_253F15D58);
    v13 = swift_allocObject();
    *(_OWORD *)(v13 + 16) = xmmword_214428BD0;
    *(_QWORD *)(v13 + 32) = a1;
    *(_QWORD *)(v13 + 40) = a6;
    *(_QWORD *)(v13 + 48) = a5;
    *(_QWORD *)(v13 + 56) = a7;
    v29 = v13;
    sub_214424FF8();
    v14 = v29;
    v15 = (_QWORD *)swift_allocObject();
    v15[2] = sub_2143A3514;
    v15[3] = 0;
    v15[4] = a1;
    v15[5] = a6;
    v15[6] = a5;
    v15[7] = a7;
    swift_retain_n();
    swift_retain_n();
    swift_retain_n();
    swift_retain_n();
    v16 = (uint64_t (*)@<X0>(uint64_t *@<X8>))sub_21424CE00;
  }
  else
  {
    v20 = swift_allocObject();
    *(_BYTE *)(v20 + 16) = a8 & 1;
    *(_QWORD *)(v20 + 24) = a3;
    *(_BYTE *)(v20 + 32) = a4;
    *(_BYTE *)(v20 + 33) = a9 & 1;
    sub_2141D8BF8(&qword_253F15D58);
    v21 = swift_allocObject();
    *(_OWORD *)(v21 + 16) = xmmword_2144271F0;
    *(_QWORD *)(v21 + 32) = a1;
    *(_QWORD *)(v21 + 40) = a5;
    *(_QWORD *)(v21 + 48) = a6;
    v30 = v21;
    sub_214424FF8();
    v14 = v30;
    v15 = (_QWORD *)swift_allocObject();
    v15[2] = sub_21424CE14;
    v15[3] = v20;
    v15[4] = a1;
    v15[5] = a5;
    v15[6] = a6;
    swift_retain_n();
    swift_retain_n();
    swift_retain_n();
    v16 = sub_21424CE2C;
  }
  v22 = &qword_253F15850;
  v23 = &unk_24D180448;
  v24 = v14;
  v25 = (uint64_t)v15;
  return sub_21423EE98(v24, (uint64_t)v16, v25, v22, (uint64_t)v23, (uint64_t)sub_21424E84C, (void (*)(uint64_t, uint64_t))sub_2141FA1C4);
}

uint64_t sub_214238818@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;

  result = sub_214381C40(*a1, *a2);
  *a3 = result;
  return result;
}

uint64_t sub_214238844@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  int64_t v25;
  int64_t v26;
  char v27;
  uint64_t v28;
  char *v29;
  void (*v30)(char *, char *, uint64_t);
  char *v31;
  void (*v32)(char *, char *, uint64_t);
  void (*v33)(char *, uint64_t);
  char *v34;
  uint64_t v35;
  uint64_t result;
  double v37;
  char v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE v46[48];
  _BYTE v47[32];
  unint64_t v48;
  _BYTE v49[56];

  v42 = a3;
  v43 = a2;
  v44 = a1;
  v41 = sub_2141D8BF8(&qword_253F15D60);
  v7 = MEMORY[0x24BDAC7A8](v41);
  v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v39 - v10;
  v12 = sub_214423B70();
  v13 = *(_QWORD **)(v12 - 8);
  v14 = MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v39 - v17;
  v40 = sub_2141D8BF8((uint64_t *)&unk_253F15EB0);
  v19 = MEMORY[0x24BDAC7A8](v40);
  v21 = (char *)&v39 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v19);
  v23 = (char *)&v39 - v22;
  sub_2141E7D60(a4 + 16, (uint64_t)v46);
  sub_2141E7D60((uint64_t)v46, (uint64_t)v47);
  v24 = (v48 >> 61) & 3;
  if ((_DWORD)v24)
  {
    if ((_DWORD)v24 != 1)
    {
      v48 &= 0x9FFFFFFFFFFFFFFFLL;
      sub_2141E801C((uint64_t)v47, (uint64_t)v49, &qword_253F0FF68);
      if (qword_253F0FF38 == -1)
        return sub_21422F3FC((uint64_t)&unk_253F1C748, a5);
LABEL_13:
      swift_once();
      return sub_21422F3FC((uint64_t)&unk_253F1C748, a5);
    }
    v48 &= 0x9FFFFFFFFFFFFFFFLL;
    sub_2141E801C((uint64_t)v47, (uint64_t)v49, &qword_253F15558);
    v25 = *(_QWORD *)(v44 + 16);
    if (v25)
    {
      v45 = MEMORY[0x24BEE4AF8];
      sub_2141D3AA0(0, v25, 0);
      __break(1u);
    }
    else
    {
      sub_214331ACC(MEMORY[0x24BEE4AF8]);
      if ((v27 & 1) == 0)
      {
        sub_2144239E4();
        sub_2144239E4();
        sub_21424CC2C();
        if ((sub_214424E84() & 1) != 0)
        {
          v39 = v23;
          v28 = v41;
          v29 = &v11[*(int *)(v41 + 48)];
          v44 = a5;
          v30 = (void (*)(char *, char *, uint64_t))v13[4];
          v30(v11, v18, v12);
          v30(v29, v16, v12);
          v31 = &v9[*(int *)(v28 + 48)];
          v32 = (void (*)(char *, char *, uint64_t))v13[2];
          v32(v9, v11, v12);
          v32(v31, v29, v12);
          v30(v21, v9, v12);
          v33 = (void (*)(char *, uint64_t))v13[1];
          v33(v31, v12);
          v34 = &v9[*(int *)(v28 + 48)];
          v30(v9, v11, v12);
          v30(v34, v29, v12);
          v30(&v21[*(int *)(v40 + 36)], v34, v12);
          v33(v9, v12);
          v35 = (uint64_t)v39;
          sub_2141E801C((uint64_t)v21, (uint64_t)v39, (uint64_t *)&unk_253F15EB0);
          sub_2142E5DBC(v35, v43, v42, v44);
          return sub_2141E0750(v35, (uint64_t *)&unk_253F15EB0);
        }
        __break(1u);
        goto LABEL_13;
      }
    }
    __break(1u);
  }
  else
  {
    v48 &= 0x9FFFFFFFFFFFFFFFLL;
    sub_2141E801C((uint64_t)v47, (uint64_t)v49, &qword_253F15558);
    v26 = *(_QWORD *)(v44 + 16);
    if (!v26)
    {
      result = sub_2142E95B8(MEMORY[0x24BEE4AF8]);
      if ((v38 & 1) == 0)
        return sub_2142E5AD8(a5, *(double *)&result, v37);
      goto LABEL_17;
    }
  }
  v45 = MEMORY[0x24BEE4AF8];
  result = (uint64_t)sub_2141D3AA0(0, v26, 0);
  __break(1u);
LABEL_17:
  __break(1u);
  return result;
}

uint64_t sub_214238C7C@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  uint64_t result;
  uint64_t v28;
  char *v29;
  void (*v30)(char *, char *, uint64_t);
  char *v31;
  void (*v32)(char *, char *, uint64_t);
  uint64_t v33;
  void (*v34)(char *, uint64_t);
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  double v40;
  char v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _BYTE v52[48];
  _BYTE v53[32];
  unint64_t v54;
  _BYTE v55[56];

  v51 = a1;
  v50 = sub_2141D8BF8(&qword_253F15D60);
  v9 = MEMORY[0x24BDAC7A8](v50);
  v11 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v43 - v12;
  v14 = sub_214423B70();
  v15 = *(_QWORD **)(v14 - 8);
  v16 = MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v43 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)&v43 - v19;
  v47 = sub_2141D8BF8((uint64_t *)&unk_253F15EB0);
  v21 = MEMORY[0x24BDAC7A8](v47);
  v48 = (char *)&v43 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v21);
  v49 = (uint64_t)&v43 - v23;
  sub_2141E7D60(a4 + 16, (uint64_t)v52);
  sub_2141E7D60((uint64_t)v52, (uint64_t)v53);
  v24 = (v54 >> 61) & 3;
  if ((_DWORD)v24)
  {
    if ((_DWORD)v24 != 1)
    {
      v54 &= 0x9FFFFFFFFFFFFFFFLL;
      sub_2141E801C((uint64_t)v53, (uint64_t)v55, &qword_253F0FF68);
      if (qword_253F0FF38 == -1)
        return sub_21422F3FC((uint64_t)&unk_253F1C748, a5);
LABEL_11:
      swift_once();
      return sub_21422F3FC((uint64_t)&unk_253F1C748, a5);
    }
    v44 = a3;
    v45 = a2;
    v46 = a5;
    v54 &= 0x9FFFFFFFFFFFFFFFLL;
    sub_2141E801C((uint64_t)v53, (uint64_t)v55, &qword_253F15558);
    a5 = sub_214239098(v51);
    sub_214331ACC(a5);
    v26 = v25;
    result = swift_bridgeObjectRelease();
    if ((v26 & 1) == 0)
    {
      sub_2144239E4();
      sub_2144239E4();
      sub_21424CC2C();
      if ((sub_214424E84() & 1) != 0)
      {
        v28 = v50;
        v29 = &v13[*(int *)(v50 + 48)];
        v30 = (void (*)(char *, char *, uint64_t))v15[4];
        v30(v13, v20, v14);
        v30(v29, v18, v14);
        v31 = &v11[*(int *)(v28 + 48)];
        v32 = (void (*)(char *, char *, uint64_t))v15[2];
        v32(v11, v13, v14);
        v32(v31, v29, v14);
        v33 = (uint64_t)v48;
        v30(v48, v11, v14);
        v34 = (void (*)(char *, uint64_t))v15[1];
        v34(v31, v14);
        v35 = &v11[*(int *)(v28 + 48)];
        v30(v11, v13, v14);
        v30(v35, v29, v14);
        v30((char *)(v33 + *(int *)(v47 + 36)), v35, v14);
        v34(v11, v14);
        v36 = v49;
        sub_2141E801C(v33, v49, (uint64_t *)&unk_253F15EB0);
        sub_2142E5DBC(v36, v45, v44, v46);
        return sub_2141E0750(v36, (uint64_t *)&unk_253F15EB0);
      }
      __break(1u);
      goto LABEL_11;
    }
    __break(1u);
  }
  else
  {
    v54 &= 0x9FFFFFFFFFFFFFFFLL;
    sub_2141E801C((uint64_t)v53, (uint64_t)v55, &qword_253F15558);
    v37 = sub_214239098(v51);
    v38 = sub_2142E95B8(v37);
    v40 = v39;
    v42 = v41;
    result = swift_bridgeObjectRelease();
    if ((v42 & 1) == 0)
      return sub_2142E5AD8(a5, *(double *)&v38, v40);
  }
  __break(1u);
  return result;
}

uint64_t sub_214239098(uint64_t a1)
{
  int64_t v2;
  uint64_t result;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x24BEE4AF8];
  if (v2)
  {
    v8 = MEMORY[0x24BEE4AF8];
    sub_2141D3AA0(0, v2, 0);
    result = v8;
    v4 = (uint64_t *)(a1 + 32);
    v5 = *(_QWORD *)(v8 + 16);
    do
    {
      v6 = *v4;
      v9 = result;
      v7 = *(_QWORD *)(result + 24);
      if (v5 >= v7 >> 1)
      {
        sub_2141D3AA0((char *)(v7 > 1), v5 + 1, 1);
        result = v9;
      }
      *(_QWORD *)(result + 16) = v5 + 1;
      *(_QWORD *)(result + 8 * v5 + 32) = v6;
      ++v4;
      ++v5;
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t sub_214239160(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  __int128 v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v14 = MEMORY[0x24BEE4AF8];
    sub_2141D406C(0, v1, 0);
    v2 = v14;
    v4 = (uint64_t *)(a1 + 40);
    v5 = MEMORY[0x24BEE0D00];
    do
    {
      v7 = *(v4 - 1);
      v6 = *v4;
      v14 = v2;
      v8 = *(_QWORD *)(v2 + 16);
      v9 = *(_QWORD *)(v2 + 24);
      swift_bridgeObjectRetain();
      if (v8 >= v9 >> 1)
      {
        sub_2141D406C((_QWORD *)(v9 > 1), v8 + 1, 1);
        v2 = v14;
      }
      v4 += 2;
      v12 = v5;
      v13 = sub_2141FE354();
      *(_QWORD *)&v11 = v7;
      *((_QWORD *)&v11 + 1) = v6;
      *(_QWORD *)(v2 + 16) = v8 + 1;
      sub_2141D8DC0(&v11, v2 + 40 * v8 + 32);
      --v1;
    }
    while (v1);
  }
  return v2;
}

_QWORD *sub_214239258(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  unsigned __int8 *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  __int16 v36;
  __int16 v37;
  __int16 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  int64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  char v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  void *v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  char v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  void *v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  char v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  void *v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t v117;
  char v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  void *v123;
  unint64_t v124;
  uint64_t v125;
  unint64_t v126;
  char v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  void *v132;
  unint64_t v133;
  uint64_t v134;
  unint64_t v135;
  char v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  void *v141;
  unint64_t v142;
  uint64_t v143;
  unint64_t v144;
  char v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  void *v150;
  unint64_t v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  unint64_t v155;
  unint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  _QWORD *v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  _QWORD *v166;
  unint64_t v167;
  unint64_t v168;
  char v169;
  uint64_t v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  unint64_t v175;
  char v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t v180;
  _QWORD *v181;
  uint64_t v182;
  uint64_t v183;
  _QWORD *v184;
  uint64_t (*v185)();
  _QWORD *v186;
  uint64_t v187;
  uint64_t v188;
  __int128 v189;
  __int128 v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  _QWORD *v194;
  unint64_t v195;
  char v196;
  uint64_t v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  unint64_t v202;
  char v203;
  uint64_t v204;
  uint64_t v205;
  unint64_t v206;
  _QWORD *v207;
  uint64_t v208;
  _QWORD *v209;
  uint64_t (*v210)();
  _QWORD *v211;
  uint64_t v212;
  uint64_t v213;
  __int128 v214;
  __int128 v215;
  uint64_t v216;
  _QWORD *v217;
  unint64_t v218;
  unint64_t v219;
  _QWORD *v220;
  uint64_t v221;
  uint64_t v222;
  unint64_t v223;
  unint64_t v224;
  unint64_t v225;
  _QWORD *v226;
  unint64_t v227;
  unint64_t v228;
  _QWORD *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  unint64_t v234;
  _QWORD *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  unint64_t v241;
  unint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  unint64_t v247;
  _QWORD *v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  unint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  unint64_t v256;
  _QWORD *v257;
  uint64_t v258;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  char v263;
  int v264;
  uint64_t v265;
  uint64_t v266;
  _QWORD *v268;
  _QWORD *v269;
  uint64_t v270;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  unint64_t v282;
  char v283;
  uint64_t v284;
  unsigned __int8 v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t (*v289)();
  uint64_t (*v290)();
  uint64_t v291;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  unint64_t v304;
  _QWORD v305[4];
  __int128 v306;
  __int128 v307;
  __int128 v308;
  __int128 v309;
  __int128 v310;
  __int128 v311;
  __int128 v312;
  __int128 v313;
  __int128 v314;
  __int128 v315;
  __int128 v316;
  __int128 v317;
  uint64_t v318;
  unint64_t v319;
  unint64_t v320;
  unint64_t v321;
  unint64_t v322;
  uint64_t v323;
  unint64_t v324;
  unint64_t v325;
  unint64_t v326;
  __int128 v327;
  __int128 v328;
  __int128 v329;
  __int128 v330;
  __int128 v331;
  char v332;
  _OWORD v333[12];
  uint64_t v334;
  _QWORD v335[6];
  _QWORD v336[7];

  v288 = a7[1];
  v291 = *a7;
  v279 = a7[3];
  v286 = a7[4];
  v287 = a7[2];
  v261 = *(_QWORD *)(a1 + 8);
  v262 = *(_QWORD *)(a1 + 16);
  v263 = *(_BYTE *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 40);
  v276 = *(_QWORD *)(a1 + 32);
  v264 = *(unsigned __int16 *)(a1 + 48);
  v270 = *(_QWORD *)(a1 + 56);
  v272 = *(_QWORD *)(a1 + 64);
  v266 = sub_2142357C4(*(_QWORD *)a1, &qword_253F131A8);
  v10 = MEMORY[0x24BEE4AF8];
  v319 = sub_21436C68C(MEMORY[0x24BEE4AF8]);
  v320 = v10;
  v321 = v10;
  v322 = sub_21436C78C(v10);
  v323 = v10;
  v324 = v10;
  v325 = sub_21436C798(v10);
  v326 = sub_21436C898(v10);
  v265 = a1;
  v11 = *(_QWORD *)(a1 + 72);
  swift_bridgeObjectRetain_n();
  v12 = sub_214397B98(v11);
  swift_bridgeObjectRelease();
  *(_QWORD *)&v333[0] = v12;
  sub_21423C6C8((char **)v333);
  swift_bridgeObjectRelease();
  v13 = *(_QWORD *)&v333[0];
  v277 = v9;
  v278 = v11;
  v275 = *(_QWORD *)(*(_QWORD *)&v333[0] + 16);
  if (v275)
  {
    v14 = *(_BYTE *)(*(_QWORD *)&v333[0] + 32);
    v273 = *(_QWORD *)&v333[0] + 32;
    if (*(_QWORD *)(v11 + 16))
    {
      v15 = sub_214336B74(v14);
      if ((v16 & 1) != 0)
      {
        v274 = v13;
        v282 = 1;
        while (1)
        {
          v17 = *(_QWORD *)(v11 + 56) + 88 * v15;
          v284 = *(_QWORD *)v17;
          v283 = *(_BYTE *)(v17 + 8);
          v19 = *(_QWORD *)(v17 + 16);
          v18 = *(_QWORD *)(v17 + 24);
          v11 = *(_QWORD *)(v17 + 48);
          v299 = *(_QWORD *)(v17 + 40);
          v300 = *(_QWORD *)(v17 + 32);
          v20 = *(_QWORD *)(v17 + 56);
          v21 = *(_QWORD *)(v17 + 64);
          v22 = *(_QWORD *)(v17 + 72);
          v294 = v20;
          v303 = v22;
          LODWORD(v301) = *(unsigned __int8 *)(v17 + 80);
          if (*(_QWORD *)(v9 + 16))
          {
            v23 = sub_214336B74(v14);
            if ((v24 & 1) != 0)
            {
              v25 = (unsigned __int8 *)(*(_QWORD *)(v9 + 56) + 24 * v23);
              v26 = *v25;
              v27 = (void *)*((_QWORD *)v25 + 1);
              v28 = *((_QWORD *)v25 + 2);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
            }
            else
            {
              v26 = 0;
              v27 = 0;
              v28 = 0;
            }
            v20 = v294;
          }
          else
          {
            v26 = 0;
            v27 = 0;
            v28 = 0;
          }
          v302 = v21;
          if (v14 >= 2u)
            break;
          if (v28)
          {
            v29 = v26 != 0;
            sub_2141E7E88(v19, v18, v300, v299, v11, v20, (void (*)(uint64_t, unint64_t, unint64_t))sub_2141E7DC4);
            sub_2142496E8(v21, v22, v301, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7DF0, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7DD4);
            sub_21424C5D8(v26, (uint64_t)v27, v28);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          else
          {
            sub_2141E7E88(v19, v18, v300, v299, v11, v20, (void (*)(uint64_t, unint64_t, unint64_t))sub_2141E7DC4);
            sub_2142496E8(v21, v22, v301, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7DF0, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7DD4);
            v29 = 0;
          }
          v30 = v270;
          if (v14)
            goto LABEL_17;
LABEL_18:
          v297 = v18;
          v295 = sub_2142357C4(v30, &qword_253F131E0);
          if (*(_QWORD *)(v276 + 16))
          {
            v31 = v19;
            v32 = sub_214336B74(v14);
            if ((v33 & 1) != 0)
            {
              v34 = *(_QWORD *)(v276 + 56) + 16 * v32;
              v35 = *(_QWORD *)v34;
              v36 = *(unsigned __int8 *)(v34 + 8);
              if (*(_BYTE *)(v34 + 9))
                v37 = 256;
              else
                v37 = 0;
              v38 = v37 | v36;
              if (!v29)
              {
LABEL_30:
                sub_21424958C(v26, (uint64_t)v27, v28);
                v27 = (void *)MEMORY[0x24BEE4AF8];
                goto LABEL_31;
              }
            }
            else
            {
              v35 = 0;
              v38 = 512;
              if (!v29)
                goto LABEL_30;
            }
          }
          else
          {
            v31 = v19;
            v35 = 0;
            v38 = 512;
            if (!v29)
              goto LABEL_30;
          }
          if (!v28 || (swift_bridgeObjectRelease(), !v27))
          {
            swift_bridgeObjectRelease();
            v27 = &unk_24D17AD00;
          }
LABEL_31:
          v39 = v299;
          *(_QWORD *)&v306 = v284;
          BYTE8(v306) = v283;
          *(_QWORD *)&v307 = v31;
          *((_QWORD *)&v307 + 1) = v297;
          *(_QWORD *)&v308 = v300;
          *((_QWORD *)&v308 + 1) = v299;
          v40 = v294;
          *(_QWORD *)&v309 = v11;
          *((_QWORD *)&v309 + 1) = v294;
          *(_QWORD *)&v310 = v21;
          *((_QWORD *)&v310 + 1) = v303;
          LOBYTE(v311) = v301;
          *((_QWORD *)&v311 + 1) = v27;
          *(_QWORD *)&v312 = v35;
          WORD4(v312) = v38;
          BYTE10(v312) = v14;
          *(_QWORD *)&v313 = v295;
          *((_QWORD *)&v313 + 1) = a3;
          *(_QWORD *)&v314 = a4;
          *((_QWORD *)&v314 + 1) = a5;
          *(_QWORD *)&v315 = v291;
          *((_QWORD *)&v315 + 1) = v288;
          *(_QWORD *)&v316 = v287;
          *((_QWORD *)&v316 + 1) = v279;
          *(_QWORD *)&v317 = v286;
          *((_QWORD *)&v317 + 1) = a6;
          v318 = a2;
          v334 = a2;
          v333[2] = v308;
          v333[3] = v309;
          v333[0] = v306;
          v333[1] = v307;
          v333[6] = v312;
          v333[7] = v313;
          v333[4] = v310;
          v333[5] = v311;
          v333[8] = v314;
          v333[9] = v315;
          v41 = (v11 >> 61) & 3;
          v42 = v11;
          v333[10] = v316;
          v333[11] = v317;
          if (!(_DWORD)v41 || (v42 = v11 & 0x9FFFFFFFFFFFFFFFLL, (_DWORD)v41 == 1))
          {
            v43 = v297;
            v335[0] = v31;
            v335[1] = v297;
            v335[2] = v300;
            v335[3] = v299;
            v335[4] = v42;
            v335[5] = v294;
            v285 = v14;
            v44 = v300;
            swift_retain();
            swift_retain();
            sub_2141E7E88(v31, v297, v300, v299, v11, v294, (void (*)(uint64_t, unint64_t, unint64_t))sub_2141E7DC4);
            sub_2142496E8(v21, v303, v301, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7DF0, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7DD4);
            swift_retain();
            swift_retain();
            swift_retain();
            swift_retain();
            swift_retain();
            swift_retain();
            swift_retain();
            swift_retain();
            swift_retain();
            v45 = v301;
            sub_2141E7E88(v31, v297, v300, v299, v11, v294, (void (*)(uint64_t, unint64_t, unint64_t))sub_2141E7DC4);
            v46 = sub_2141EFF88((uint64_t)v335, v285, a2, a8);
            sub_214236BC0((uint64_t)v333, (uint64_t)v335, v46);
            v47 = v21;
            goto LABEL_58;
          }
          v336[0] = v31;
          v336[1] = v297;
          v336[2] = v300;
          v336[3] = v299;
          v336[4] = v11 & 0x9FFFFFFFFFFFFFFFLL;
          v336[5] = v294;
          if ((v11 & 0x8000000000000000) == 0)
          {
            swift_retain();
            swift_retain();
            sub_2141E7E88(v31, v297, v300, v299, v11, v294, (void (*)(uint64_t, unint64_t, unint64_t))sub_2141E7DC4);
            sub_2142496E8(v21, v303, v301, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7DF0, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7DD4);
            swift_retain();
            swift_retain();
            swift_retain();
            swift_retain();
            swift_retain();
            swift_retain();
            swift_retain();
            swift_retain();
            swift_retain();
            sub_2141E7E88(v31, v297, v300, v299, v11, v294, (void (*)(uint64_t, unint64_t, unint64_t))sub_2141E7DC4);
            v45 = v297;
            sub_2141E7DC4(v297, v300, SBYTE1(v300));
            sub_2141E7DC4(v299, v11, SBYTE1(v11));
            v48 = sub_2142357C4(v31, &qword_253F10588);
            sub_2141E7DC4(v299, v11, SBYTE1(v11));
            v49 = sub_214235934(v299, v11 | (unsigned __int16)((unsigned __int16)(v11 >> 8) << 8));
            sub_2141E7F20(v299, v11, SBYTE1(v11));
            v50 = sub_2142357C4(v294, &qword_254D699C0);
            sub_2141D8BF8(&qword_253F15D58);
            v51 = swift_allocObject();
            *(_OWORD *)(v51 + 16) = xmmword_2144271F0;
            *(_QWORD *)(v51 + 32) = v48;
            *(_QWORD *)(v51 + 40) = v49;
            *(_QWORD *)(v51 + 48) = v50;
            *(_QWORD *)&v327 = v51;
            sub_214424FF8();
            v52 = v327;
            v53 = (_QWORD *)swift_allocObject();
            v53[2] = sub_2141F0574;
            v53[3] = 0;
            v53[4] = v48;
            v53[5] = v49;
            v53[6] = v50;
            sub_2141D8BF8(&qword_253F10588);
            v54 = swift_allocObject();
            *(_WORD *)(v54 + 16) = 256;
            *(_QWORD *)(v54 + 48) = 0;
            *(_QWORD *)(v54 + 56) = 0;
            *(_QWORD *)(v54 + 40) = 0;
            v55 = MEMORY[0x24BEE4AF8];
            *(_QWORD *)(v54 + 24) = v52;
            *(_QWORD *)(v54 + 32) = v55;
            v269 = v53;
            if (v52 >> 62)
            {
              swift_retain();
              swift_retain();
              swift_retain();
              swift_bridgeObjectRetain();
              v44 = sub_2144256AC();
              v40 = v299;
              v56 = v300;
              if (!v44)
                goto LABEL_55;
LABEL_37:
              if (v44 < 1)
                goto LABEL_140;
              if ((v52 & 0xC000000000000001) != 0)
              {
                v57 = 0;
                do
                {
                  v58 = MEMORY[0x2199CCE3C](v57, v52);
                  swift_weakInit();
                  v59 = *(_QWORD **)(v58 + 32);
                  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                  *(_QWORD *)(v58 + 32) = v59;
                  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                  {
                    v59 = sub_214221F04(0, v59[2] + 1, 1, v59);
                    *(_QWORD *)(v58 + 32) = v59;
                  }
                  v62 = v59[2];
                  v61 = v59[3];
                  if (v62 >= v61 >> 1)
                  {
                    v59 = sub_214221F04((_QWORD *)(v61 > 1), v62 + 1, 1, v59);
                    *(_QWORD *)(v58 + 32) = v59;
                  }
                  ++v57;
                  v59[2] = v62 + 1;
                  sub_2141E801C((uint64_t)&v327, (uint64_t)&v59[v62 + 4], &qword_253F13188);
                  swift_unknownObjectRelease();
                }
                while (v44 != v57);
              }
              else
              {
                v65 = 0;
                do
                {
                  v66 = *(_QWORD *)(v52 + 8 * v65 + 32);
                  swift_weakInit();
                  v67 = *(_QWORD **)(v66 + 32);
                  swift_retain();
                  v68 = swift_isUniquelyReferenced_nonNull_native();
                  *(_QWORD *)(v66 + 32) = v67;
                  if ((v68 & 1) == 0)
                  {
                    v67 = sub_214221F04(0, v67[2] + 1, 1, v67);
                    *(_QWORD *)(v66 + 32) = v67;
                  }
                  v70 = v67[2];
                  v69 = v67[3];
                  if (v70 >= v69 >> 1)
                  {
                    v67 = sub_214221F04((_QWORD *)(v69 > 1), v70 + 1, 1, v67);
                    *(_QWORD *)(v66 + 32) = v67;
                  }
                  ++v65;
                  v67[2] = v70 + 1;
                  sub_2141E801C((uint64_t)&v327, (uint64_t)&v67[v70 + 4], &qword_253F13188);
                  swift_release();
                }
                while (v44 != v65);
              }
              swift_bridgeObjectRelease();
              v40 = v299;
              v71 = v300;
              v72 = v297;
            }
            else
            {
              v44 = *(_QWORD *)((v52 & 0xFFFFFFFFFFFFF8) + 0x10);
              swift_retain();
              swift_retain();
              swift_retain();
              swift_bridgeObjectRetain();
              v40 = v299;
              v56 = v300;
              if (v44)
                goto LABEL_37;
LABEL_55:
              v71 = v56;
              swift_bridgeObjectRelease();
              v72 = v297;
            }
            v73 = swift_allocObject();
            *(_QWORD *)(v73 + 16) = sub_2142495C0;
            *(_QWORD *)(v73 + 24) = v269;
            v74 = *(_QWORD *)(v54 + 48);
            *(_QWORD *)(v54 + 48) = sub_21424E84C;
            *(_QWORD *)(v54 + 56) = v73;
            sub_2141D972C(v74);
            v43 = v72;
            sub_2141E7F20(v72, v71, SBYTE1(v300));
            v63 = v11;
            sub_2141E7F20(v40, v11, SBYTE1(v11));
            v64 = v301;
            goto LABEL_57;
          }
          swift_retain();
          swift_retain();
          v43 = v297;
          v63 = v11;
          sub_2141E7E88(v31, v297, v300, v299, v11, v294, (void (*)(uint64_t, unint64_t, unint64_t))sub_2141E7DC4);
          v64 = v301;
          sub_2142496E8(v302, v303, v301, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7DF0, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7DD4);
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          v54 = sub_2142357C4(v31, &qword_253F10588);
LABEL_57:
          sub_21423782C((uint64_t)v333, (uint64_t)v336, v54);
          v40 = v294;
          v47 = v302;
          v11 = v63;
          v39 = v299;
          v44 = v300;
          v45 = v64;
LABEL_58:
          swift_release();
          sub_2142495CC((uint64_t)&v306);
          sub_2141E7E88(v31, v43, v44, v39, v11, v40, (void (*)(uint64_t, unint64_t, unint64_t))sub_2141E7F20);
          sub_2142496E8(v47, v303, v45, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7F98, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7F7C);
          swift_release();
          sub_2141E7E88(v31, v43, v44, v39, v11, v40, (void (*)(uint64_t, unint64_t, unint64_t))sub_2141E7F20);
          if (v282 == v275)
            goto LABEL_63;
          v11 = v278;
          if (v282 >= *(_QWORD *)(v274 + 16))
          {
            __break(1u);
LABEL_140:
            __break(1u);
LABEL_141:
            type metadata accessor for AnySignal();
            swift_bridgeObjectRetain_n();
            v159 = sub_214425634();
            swift_bridgeObjectRelease();
            goto LABEL_102;
          }
          v14 = *(_BYTE *)(v273 + v282);
          if (*(_QWORD *)(v278 + 16))
          {
            ++v282;
            v15 = sub_214336B74(v14);
            v9 = v277;
            if ((v75 & 1) != 0)
              continue;
          }
          goto LABEL_62;
        }
        sub_2141E7E88(v19, v18, v300, v299, v11, v20, (void (*)(uint64_t, unint64_t, unint64_t))sub_2141E7DC4);
        sub_2142496E8(v21, v22, v301, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7DF0, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7DD4);
        v29 = 0;
LABEL_17:
        v30 = v272;
        goto LABEL_18;
      }
    }
LABEL_62:
    *(_QWORD *)&v306 = 0;
    *((_QWORD *)&v306 + 1) = 0xE000000000000000;
    sub_2144254D8();
    sub_214424F20();
    LOBYTE(v327) = v14;
    sub_2144255F8();
    sub_214424F20();
    sub_214425628();
    __break(1u);
LABEL_63:
    swift_release();
    v279 = a7[3];
    v76 = v321;
    v11 = v278;
    if (!(v321 >> 62))
      goto LABEL_64;
  }
  else
  {
    swift_release();
    v76 = MEMORY[0x24BEE4AF8];
    if (!(MEMORY[0x24BEE4AF8] >> 62))
    {
LABEL_64:
      swift_bridgeObjectRetain_n();
      v77 = a4;
      swift_retain();
      v78 = v279;
      swift_retain();
      v79 = a6;
      swift_retain();
      sub_21442579C();
      type metadata accessor for AnySignal();
      v80 = v76;
      goto LABEL_65;
    }
  }
  type metadata accessor for AnySignal();
  swift_bridgeObjectRetain_n();
  v77 = a4;
  swift_retain();
  v78 = v279;
  swift_retain();
  v79 = a6;
  swift_retain();
  v80 = sub_214425634();
  swift_bridgeObjectRelease();
LABEL_65:
  v81 = (_QWORD *)swift_allocObject();
  v81[2] = sub_21423B98C;
  v81[3] = 0;
  v81[4] = v76;
  sub_2141D8BF8(&qword_253F15840);
  swift_allocObject();
  v82 = sub_214242E38(v80, (uint64_t)sub_214249740, (uint64_t)v81);
  v83 = sub_2142357C4(v261, &qword_253F13190);
  v84 = sub_2142357C4(v262, &qword_253F131B0);
  v303 = sub_21423BAA0(v77, v78, v79, v82, v83, v84, (uint64_t)sub_21423B9D8, 0, (uint64_t)&unk_24D180A88, (uint64_t)sub_21424DD70, (uint64_t (*)(uint64_t, uint64_t, _QWORD *))sub_214242874);
  v85 = v326;
  if (*(_QWORD *)(v326 + 16) && (sub_214336B74(5u), (v86 & 1) != 0))
  {
    v87 = swift_retain_n();
    v88 = sub_214246DD0(v87, (uint64_t)sub_21424C5B0, v87);
  }
  else
  {
    v88 = sub_21423536C((uint64_t)sub_21423BBB4, 0);
  }
  v302 = v88;
  v45 = (uint64_t)&unk_214427000;
  if (*(_QWORD *)(v85 + 16) && (v89 = sub_214336B74(7u), (v90 & 1) != 0))
  {
    v91 = *(_QWORD *)(*(_QWORD *)(v85 + 56) + 8 * v89);
    sub_2141D8BF8(&qword_253F15D58);
    v92 = swift_allocObject();
    *(_OWORD *)(v92 + 16) = xmmword_2144271E0;
    *(_QWORD *)(v92 + 32) = v91;
    *(_QWORD *)&v306 = v92;
    sub_214424FF8();
    v93 = v306;
    v94 = swift_allocObject();
    *(_QWORD *)(v94 + 16) = sub_21424C588;
    *(_QWORD *)(v94 + 24) = v91;
    swift_retain_n();
    v95 = sub_21424E848;
    v96 = v93;
    v97 = v94;
  }
  else
  {
    v96 = MEMORY[0x24BEE4AF8];
    v95 = sub_2143F81E4;
    v97 = 0;
  }
  v301 = sub_214242030(v96, (uint64_t)v95, v97);
  if (*(_QWORD *)(v85 + 16) && (v98 = sub_214336B74(4u), (v99 & 1) != 0))
  {
    v100 = *(_QWORD *)(*(_QWORD *)(v85 + 56) + 8 * v98);
    sub_2141D8BF8(&qword_253F15D58);
    v101 = swift_allocObject();
    *(_OWORD *)(v101 + 16) = xmmword_2144271E0;
    *(_QWORD *)(v101 + 32) = v100;
    *(_QWORD *)&v306 = v101;
    sub_214424FF8();
    v102 = v306;
    v103 = swift_allocObject();
    *(_QWORD *)(v103 + 16) = sub_21424C560;
    *(_QWORD *)(v103 + 24) = v100;
    swift_retain_n();
    v104 = sub_21424C540;
    v105 = v102;
    v106 = v103;
  }
  else
  {
    v105 = MEMORY[0x24BEE4AF8];
    v104 = sub_2143F81C8;
    v106 = 0;
  }
  v300 = sub_214241D60(v105, (uint64_t)v104, v106);
  sub_2141D8BF8(&qword_253F13320);
  v107 = swift_allocObject();
  *(_OWORD *)(v107 + 16) = xmmword_214428BE0;
  *(_BYTE *)(v107 + 32) = 0;
  if (*(_QWORD *)(v85 + 16) && (v108 = sub_214336B74(0), (v109 & 1) != 0))
  {
    v110 = *(_QWORD *)(*(_QWORD *)(v85 + 56) + 8 * v108);
    sub_2141D8BF8(&qword_253F15D58);
    v111 = swift_allocObject();
    *(_OWORD *)(v111 + 16) = xmmword_2144271E0;
    *(_QWORD *)(v111 + 32) = v110;
    *(_QWORD *)&v306 = v111;
    sub_214424FF8();
    v112 = v306;
    v113 = swift_allocObject();
    *(_QWORD *)(v113 + 16) = sub_21424E6B0;
    *(_QWORD *)(v113 + 24) = v110;
    swift_retain_n();
    v114 = sub_21424E848;
    v115 = v112;
    v116 = v113;
  }
  else
  {
    v115 = MEMORY[0x24BEE4AF8];
    v114 = sub_2143F81A8;
    v116 = 0;
  }
  *(_QWORD *)(v107 + 40) = sub_214241A8C(v115, (uint64_t)v114, v116);
  *(_BYTE *)(v107 + 48) = 1;
  if (*(_QWORD *)(v85 + 16) && (v117 = sub_214336B74(1u), (v118 & 1) != 0))
  {
    v119 = *(_QWORD *)(*(_QWORD *)(v85 + 56) + 8 * v117);
    sub_2141D8BF8(&qword_253F15D58);
    v120 = swift_allocObject();
    *(_OWORD *)(v120 + 16) = xmmword_2144271E0;
    *(_QWORD *)(v120 + 32) = v119;
    *(_QWORD *)&v306 = v120;
    sub_214424FF8();
    v121 = v306;
    v122 = swift_allocObject();
    *(_QWORD *)(v122 + 16) = sub_21424E6B0;
    *(_QWORD *)(v122 + 24) = v119;
    swift_retain_n();
    v123 = sub_21424E848;
    v124 = v121;
    v125 = v122;
  }
  else
  {
    v124 = MEMORY[0x24BEE4AF8];
    v123 = sub_2143F8F3C;
    v125 = 0;
  }
  *(_QWORD *)(v107 + 56) = sub_214241A8C(v124, (uint64_t)v123, v125);
  *(_BYTE *)(v107 + 64) = 2;
  if (*(_QWORD *)(v85 + 16) && (v126 = sub_214336B74(2u), (v127 & 1) != 0))
  {
    v128 = *(_QWORD *)(*(_QWORD *)(v85 + 56) + 8 * v126);
    sub_2141D8BF8(&qword_253F15D58);
    v129 = swift_allocObject();
    *(_OWORD *)(v129 + 16) = xmmword_2144271E0;
    *(_QWORD *)(v129 + 32) = v128;
    *(_QWORD *)&v306 = v129;
    sub_214424FF8();
    v130 = v306;
    v131 = swift_allocObject();
    *(_QWORD *)(v131 + 16) = sub_21424E6B0;
    *(_QWORD *)(v131 + 24) = v128;
    swift_retain_n();
    v132 = sub_21424E848;
    v133 = v130;
    v134 = v131;
  }
  else
  {
    v133 = MEMORY[0x24BEE4AF8];
    v132 = sub_2143F8F3C;
    v134 = 0;
  }
  *(_QWORD *)(v107 + 72) = sub_214241A8C(v133, (uint64_t)v132, v134);
  *(_BYTE *)(v107 + 80) = 3;
  if (*(_QWORD *)(v85 + 16) && (v135 = sub_214336B74(3u), (v136 & 1) != 0))
  {
    v137 = *(_QWORD *)(*(_QWORD *)(v85 + 56) + 8 * v135);
    sub_2141D8BF8(&qword_253F15D58);
    v138 = swift_allocObject();
    *(_OWORD *)(v138 + 16) = xmmword_2144271E0;
    *(_QWORD *)(v138 + 32) = v137;
    *(_QWORD *)&v306 = v138;
    sub_214424FF8();
    v139 = v306;
    v140 = swift_allocObject();
    *(_QWORD *)(v140 + 16) = sub_21424E6B0;
    *(_QWORD *)(v140 + 24) = v137;
    swift_retain_n();
    v141 = sub_21424E848;
    v142 = v139;
    v143 = v140;
  }
  else
  {
    v142 = MEMORY[0x24BEE4AF8];
    v141 = sub_2143F8F3C;
    v143 = 0;
  }
  *(_QWORD *)(v107 + 88) = sub_214241A8C(v142, (uint64_t)v141, v143);
  *(_BYTE *)(v107 + 96) = 6;
  if (*(_QWORD *)(v85 + 16) && (v144 = sub_214336B74(6u), (v145 & 1) != 0))
  {
    v146 = *(_QWORD *)(*(_QWORD *)(v85 + 56) + 8 * v144);
    sub_2141D8BF8(&qword_253F15D58);
    v147 = swift_allocObject();
    *(_OWORD *)(v147 + 16) = xmmword_2144271E0;
    *(_QWORD *)(v147 + 32) = v146;
    *(_QWORD *)&v306 = v147;
    sub_214424FF8();
    v148 = v306;
    v149 = swift_allocObject();
    *(_QWORD *)(v149 + 16) = sub_21424C518;
    *(_QWORD *)(v149 + 24) = v146;
    swift_retain_n();
    v150 = sub_21424C540;
    v151 = v148;
    v152 = v149;
  }
  else
  {
    v151 = MEMORY[0x24BEE4AF8];
    v150 = sub_2143F8F3C;
    v152 = 0;
  }
  *(_QWORD *)(v107 + 104) = sub_214241A8C(v151, (uint64_t)v150, v152);
  v153 = sub_21436C8A4(v107);
  swift_setDeallocating();
  sub_2141D8BF8(qword_253F13100);
  swift_arrayDestroy();
  swift_deallocClassInstance();
  v154 = swift_bridgeObjectRetain();
  v155 = (unint64_t)sub_214397AA0(v154);
  swift_bridgeObjectRelease();
  if ((v155 & 0x8000000000000000) != 0 || (v155 & 0x4000000000000000) != 0)
  {
    type metadata accessor for AnySignal();
    swift_bridgeObjectRetain();
    v156 = sub_214425634();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRetain();
    sub_21442579C();
    type metadata accessor for AnySignal();
    v156 = v155;
  }
  swift_release();
  v157 = swift_allocObject();
  *(_QWORD *)(v157 + 16) = v153;
  v158 = sub_21423EE98(v156, (uint64_t)sub_21424C25C, v157, &qword_253F131C8, (uint64_t)&unk_24D180998, (uint64_t)sub_21424E84C, (void (*)(uint64_t, uint64_t))sub_2141FA1C4);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  v297 = v158;
  v40 = sub_21423BAA0(v266, v303, v158, v302, v301, v300, (uint64_t)sub_21424C264, a3, (uint64_t)&unk_24D180970, (uint64_t)sub_21424D83C, (uint64_t (*)(uint64_t, uint64_t, _QWORD *))sub_214240610);
  v44 = v320;
  if (v320 >> 62)
    goto LABEL_141;
  swift_bridgeObjectRetain_n();
  sub_21442579C();
  type metadata accessor for AnySignal();
  v159 = v44;
LABEL_102:
  v160 = (_QWORD *)swift_allocObject();
  v160[2] = sub_21423BDFC;
  v160[3] = 0;
  v160[4] = v44;
  swift_allocObject();
  v161 = sub_214242E38(v159, (uint64_t)sub_21424E6C8, (uint64_t)v160);
  swift_bridgeObjectRetain();
  v162 = sub_2143A1C4C(v161, a6, a3, v277, a2);
  swift_bridgeObjectRelease();
  v163 = sub_2143A2DDC(v161, v162);
  sub_2141D8BF8(&qword_253F15D58);
  v164 = swift_allocObject();
  *(_OWORD *)(v164 + 16) = xmmword_2144271F0;
  *(_QWORD *)(v164 + 32) = v40;
  *(_QWORD *)(v164 + 40) = a4;
  *(_QWORD *)(v164 + 48) = v163;
  *(_QWORD *)&v306 = v164;
  sub_214424FF8();
  v165 = v306;
  v166 = (_QWORD *)swift_allocObject();
  v166[2] = sub_21423BE24;
  v166[3] = 0;
  v166[4] = v40;
  v166[5] = a4;
  v166[6] = v163;
  swift_retain_n();
  swift_retain_n();
  swift_retain_n();
  v268[3] = sub_214240610(v165, (uint64_t)sub_21424C27C, (uint64_t)v166);
  v296 = v161;
  if ((v263 & 1) == 0)
  {
    v167 = v322;
    if (!*(_QWORD *)(v11 + 16))
    {
      swift_bridgeObjectRetain();
      goto LABEL_118;
    }
    v168 = sub_214336B74(0);
    if ((v169 & 1) == 0)
      goto LABEL_111;
    v170 = *(_QWORD *)(v11 + 56) + 88 * v168;
    v171 = *(_OWORD *)v170;
    v307 = *(_OWORD *)(v170 + 16);
    v172 = *(_OWORD *)(v170 + 32);
    v173 = *(_OWORD *)(v170 + 48);
    v174 = *(_OWORD *)(v170 + 64);
    LOBYTE(v311) = *(_BYTE *)(v170 + 80);
    v309 = v173;
    v310 = v174;
    v308 = v172;
    v306 = v171;
    if (!*(_QWORD *)(v167 + 16))
      goto LABEL_111;
    v175 = sub_214336B74(0);
    if ((v176 & 1) != 0)
    {
      v177 = v45;
      v178 = *(_QWORD *)(*(_QWORD *)(v167 + 56) + 8 * v175);
      v179 = swift_allocObject();
      *(_OWORD *)(v179 + 16) = *(_OWORD *)(v177 + 480);
      *(_QWORD *)(v179 + 32) = a4;
      *(_QWORD *)&v327 = v179;
      sub_214424FF8();
      v180 = v327;
      v181 = (_QWORD *)swift_allocObject();
      v181[2] = sub_21423BE58;
      v181[3] = 0;
      v181[4] = a4;
      swift_retain_n();
      swift_bridgeObjectRetain();
      v182 = v178;
      swift_retain();
      sub_21424C45C((uint64_t)&v306, (void (*)(uint64_t, unint64_t, unint64_t))sub_2141E7DC4, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7DF0, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7DD4);
      v183 = sub_2142408C4(v180, (uint64_t)sub_21424E6E0, (uint64_t)v181);
      v185 = sub_214312170(&v327, 0);
      if (*v184)
      {
        v186 = v184;
        v187 = v268[3];
        v289 = v185;
        v188 = swift_allocObject();
        v189 = v309;
        *(_OWORD *)(v188 + 48) = v308;
        *(_OWORD *)(v188 + 64) = v189;
        *(_OWORD *)(v188 + 80) = v310;
        *(_BYTE *)(v188 + 96) = v311;
        v190 = v307;
        *(_OWORD *)(v188 + 16) = v306;
        *(_OWORD *)(v188 + 32) = v190;
        v191 = swift_allocObject();
        *(_OWORD *)(v191 + 16) = xmmword_2144271F0;
        *(_QWORD *)(v191 + 32) = v187;
        *(_QWORD *)(v191 + 40) = v183;
        v192 = v182;
        *(_QWORD *)(v191 + 48) = v182;
        v305[0] = v191;
        sub_214424FF8();
        v193 = v305[0];
        v194 = (_QWORD *)swift_allocObject();
        v194[2] = sub_21424C4DC;
        v194[3] = v188;
        v11 = v278;
        v194[4] = v187;
        v194[5] = v183;
        v194[6] = v192;
        swift_retain_n();
        swift_retain();
        swift_retain();
        sub_21424C45C((uint64_t)&v306, (void (*)(uint64_t, unint64_t, unint64_t))sub_2141E7DC4, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7DF0, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7DD4);
        v161 = v296;
        swift_retain();
        swift_retain();
        v186[1] = sub_2142417D4(v193, (uint64_t)sub_21424C458, (uint64_t)v194, &qword_253F11A80, (uint64_t)&unk_24D180600, (uint64_t)sub_21424C7F0, (void (*)(uint64_t, uint64_t))sub_2141FA1C4);
        swift_release();
        ((void (*)(__int128 *, _QWORD))v289)(&v327, 0);
      }
      else
      {
        ((void (*)(__int128 *, _QWORD))v185)(&v327, 0);
      }
      sub_21424C45C((uint64_t)&v306, (void (*)(uint64_t, unint64_t, unint64_t))sub_2141E7F20, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7F98, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7F7C);
      swift_release();
      swift_release();
      v45 = 0x214427000;
      if (!*(_QWORD *)(v11 + 16))
        goto LABEL_118;
    }
    else
    {
LABEL_111:
      swift_bridgeObjectRetain();
      if (!*(_QWORD *)(v11 + 16))
        goto LABEL_118;
    }
    v195 = sub_214336B74(1u);
    if ((v196 & 1) != 0)
    {
      v197 = *(_QWORD *)(v11 + 56) + 88 * v195;
      v198 = *(_OWORD *)v197;
      v328 = *(_OWORD *)(v197 + 16);
      v199 = *(_OWORD *)(v197 + 32);
      v200 = *(_OWORD *)(v197 + 48);
      v201 = *(_OWORD *)(v197 + 64);
      v332 = *(_BYTE *)(v197 + 80);
      v330 = v200;
      v331 = v201;
      v329 = v199;
      v327 = v198;
      if (*(_QWORD *)(v167 + 16))
      {
        v202 = sub_214336B74(1u);
        if ((v203 & 1) != 0)
        {
          v204 = *(_QWORD *)(*(_QWORD *)(v167 + 56) + 8 * v202);
          swift_retain();
          sub_21424C45C((uint64_t)&v327, (void (*)(uint64_t, unint64_t, unint64_t))sub_2141E7DC4, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7DF0, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7DD4);
          swift_bridgeObjectRelease();
          v205 = swift_allocObject();
          *(_OWORD *)(v205 + 16) = *(_OWORD *)(v45 + 480);
          *(_QWORD *)(v205 + 32) = a4;
          v305[0] = v205;
          sub_214424FF8();
          v206 = v305[0];
          v207 = (_QWORD *)swift_allocObject();
          v207[2] = sub_21423BF58;
          v207[3] = 0;
          v207[4] = a4;
          swift_retain_n();
          v208 = sub_2142408C4(v206, (uint64_t)sub_21424C41C, (uint64_t)v207);
          v210 = sub_214312170(v305, 1u);
          if (*v209)
          {
            v211 = v209;
            v212 = v268[3];
            v290 = v210;
            v213 = swift_allocObject();
            v214 = v330;
            *(_OWORD *)(v213 + 48) = v329;
            *(_OWORD *)(v213 + 64) = v214;
            *(_OWORD *)(v213 + 80) = v331;
            *(_BYTE *)(v213 + 96) = v332;
            v215 = v328;
            *(_OWORD *)(v213 + 16) = v327;
            *(_OWORD *)(v213 + 32) = v215;
            v216 = swift_allocObject();
            *(_OWORD *)(v216 + 16) = xmmword_2144271F0;
            *(_QWORD *)(v216 + 32) = v212;
            *(_QWORD *)(v216 + 40) = v208;
            *(_QWORD *)(v216 + 48) = v204;
            v304 = v216;
            sub_214424FF8();
            v217 = (_QWORD *)swift_allocObject();
            v217[2] = sub_21424C44C;
            v217[3] = v213;
            v161 = v296;
            v217[4] = v212;
            v217[5] = v208;
            v217[6] = v204;
            swift_retain_n();
            swift_retain();
            swift_retain();
            sub_21424C45C((uint64_t)&v327, (void (*)(uint64_t, unint64_t, unint64_t))sub_2141E7DC4, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7DF0, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7DD4);
            swift_retain();
            swift_retain();
            v211[1] = sub_2142417D4(v304, (uint64_t)sub_21424C458, (uint64_t)v217, &qword_253F11A80, (uint64_t)&unk_24D180600, (uint64_t)sub_21424C7F0, (void (*)(uint64_t, uint64_t))sub_2141FA1C4);
            swift_release();
            ((void (*)(_QWORD *, _QWORD))v290)(v305, 0);
          }
          else
          {
            ((void (*)(_QWORD *, _QWORD))v210)(v305, 0);
          }
          sub_21424C45C((uint64_t)&v327, (void (*)(uint64_t, unint64_t, unint64_t))sub_2141E7F20, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7F98, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7F7C);
          swift_release();
          swift_release();
          goto LABEL_119;
        }
      }
    }
LABEL_118:
    swift_bridgeObjectRelease();
  }
LABEL_119:
  swift_retain();
  swift_retain();
  swift_retain();
  v218 = sub_214248A28(v162, v161, a5, a3);
  swift_release();
  swift_release();
  swift_release();
  if (v218 >> 62)
  {
    type metadata accessor for AnySignal();
    swift_bridgeObjectRetain();
    v219 = sub_214425634();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    sub_21442579C();
    type metadata accessor for AnySignal();
    v219 = v218;
  }
  v220 = (_QWORD *)swift_allocObject();
  v220[2] = sub_21423C05C;
  v220[3] = 0;
  v220[4] = v218;
  v221 = sub_214240610(v219, (uint64_t)sub_21424C294, (uint64_t)v220);
  swift_bridgeObjectRelease();
  v222 = swift_allocObject();
  *(_OWORD *)(v222 + 16) = *(_OWORD *)(v45 + 480);
  *(_QWORD *)(v222 + 32) = v221;
  v305[0] = v222;
  sub_214424FF8();
  swift_retain();
  v223 = swift_bridgeObjectRetain();
  sub_2143EA650(v223);
  v224 = v305[0];
  if (v305[0] >> 62)
  {
    type metadata accessor for AnySignal();
    swift_bridgeObjectRetain();
    v225 = sub_214425634();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    sub_21442579C();
    type metadata accessor for AnySignal();
    v225 = v224;
  }
  v226 = (_QWORD *)swift_allocObject();
  v226[2] = sub_21423C058;
  v226[3] = 0;
  v226[4] = v224;
  v268[4] = sub_214240610(v225, (uint64_t)sub_21424E6CC, (uint64_t)v226);
  v227 = v324;
  if (v324 >> 62)
  {
    type metadata accessor for AnySignal();
    swift_bridgeObjectRetain_n();
    v228 = sub_214425634();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain_n();
    sub_21442579C();
    type metadata accessor for AnySignal();
    v228 = v227;
  }
  v229 = (_QWORD *)swift_allocObject();
  v229[2] = sub_21423C058;
  v229[3] = 0;
  v229[4] = v227;
  v230 = sub_214240610(v228, (uint64_t)sub_21424E6CC, (uint64_t)v229);
  v268[5] = v230;
  v231 = v268[3];
  v232 = v268[4];
  v233 = swift_allocObject();
  *(_OWORD *)(v233 + 16) = xmmword_2144271C0;
  *(_QWORD *)(v233 + 32) = v163;
  *(_QWORD *)(v233 + 40) = a4;
  *(_QWORD *)(v233 + 48) = v231;
  *(_QWORD *)(v233 + 56) = v232;
  *(_QWORD *)(v233 + 64) = v230;
  v305[0] = v233;
  sub_214424FF8();
  v234 = v305[0];
  v235 = (_QWORD *)swift_allocObject();
  v235[2] = sub_21423C108;
  v235[3] = 0;
  v235[4] = v163;
  v235[5] = a4;
  v235[6] = v231;
  v235[7] = v232;
  v235[8] = v230;
  swift_retain_n();
  swift_retain_n();
  swift_retain_n();
  swift_retain_n();
  swift_retain_n();
  v268[11] = sub_214240350(v234, (uint64_t)sub_21424C304, (uint64_t)v235);
  if ((v264 & 0x1010101) == 0x100)
  {
    v236 = v326;
    v237 = *a7;
    swift_bridgeObjectRetain();
    swift_retain();
    v238 = sub_2141E6338(v265, v236, a4, v237);
    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {
    v238 = sub_214235148((uint64_t)sub_2141E2070, 0);
  }
  v268[6] = v238;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  v239 = sub_21423BAA0(v266, v303, v297, v302, v301, v300, (uint64_t)sub_21424C33C, a3, (uint64_t)&unk_24D180970, (uint64_t)sub_21424D83C, (uint64_t (*)(uint64_t, uint64_t, _QWORD *))sub_214240610);
  v240 = v325;
  swift_bridgeObjectRetain_n();
  v241 = (unint64_t)sub_214397AA0(v240);
  swift_bridgeObjectRelease();
  if ((v241 & 0x8000000000000000) != 0 || (v241 & 0x4000000000000000) != 0)
  {
    type metadata accessor for AnySignal();
    swift_bridgeObjectRetain();
    v242 = sub_214425634();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRetain();
    sub_21442579C();
    type metadata accessor for AnySignal();
    v242 = v241;
  }
  swift_release();
  v243 = swift_allocObject();
  *(_QWORD *)(v243 + 16) = v240;
  sub_2141D8BF8(&qword_253F131C0);
  swift_allocObject();
  v244 = sub_214243114(v242, (uint64_t)sub_21424C344, v243, (uint64_t)&unk_24D180858, (uint64_t)sub_21424D420, (void (*)(uint64_t, uint64_t))sub_2141FA1C4);
  v245 = v326;
  v268[2] = v326;
  v246 = swift_allocObject();
  *(_OWORD *)(v246 + 16) = xmmword_214427890;
  *(_QWORD *)(v246 + 32) = v239;
  *(_QWORD *)(v246 + 40) = v244;
  v305[0] = v246;
  sub_214424FF8();
  v247 = v305[0];
  v248 = (_QWORD *)swift_allocObject();
  v248[2] = sub_21423C370;
  v248[3] = 0;
  v248[4] = v239;
  v248[5] = v244;
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain();
  v268[8] = sub_21423EE98(v247, (uint64_t)sub_21424C350, (uint64_t)v248, &qword_253F15848, (uint64_t)&unk_24D180830, (uint64_t)sub_21424E84C, (void (*)(uint64_t, uint64_t))sub_2141FA1C4);
  v249 = a7[1];
  swift_bridgeObjectRetain();
  swift_retain();
  v250 = sub_2142B4DA4(v278, v245, v249);
  swift_bridgeObjectRelease();
  swift_release();
  sub_21424C35C(v265);
  v268[7] = v250;
  v268[10] = v163;
  v251 = v319;
  swift_bridgeObjectRetain_n();
  swift_retain();
  v252 = sub_214236A54(v251);
  swift_bridgeObjectRelease();
  if (v252 >> 62)
  {
    type metadata accessor for AnySignal();
    swift_bridgeObjectRetain();
    v260 = sub_214425634();
    swift_bridgeObjectRelease_n();
    v252 = v260;
  }
  else
  {
    swift_bridgeObjectRetain();
    sub_21442579C();
    type metadata accessor for AnySignal();
    swift_bridgeObjectRelease();
  }
  v253 = swift_allocObject();
  *(_QWORD *)(v253 + 16) = v251;
  sub_2141D8BF8(&qword_253F131D0);
  swift_allocObject();
  v254 = sub_214243114(v252, (uint64_t)sub_21424C3A0, v253, (uint64_t)&unk_24D1806F0, (uint64_t)sub_21424CF78, (void (*)(uint64_t, uint64_t))sub_2141FA1C4);
  v255 = swift_allocObject();
  *(_OWORD *)(v255 + 16) = xmmword_214428BD0;
  *(_QWORD *)(v255 + 32) = v239;
  *(_QWORD *)(v255 + 40) = v297;
  *(_QWORD *)(v255 + 48) = v254;
  *(_QWORD *)(v255 + 56) = v244;
  v305[0] = v255;
  sub_214424FF8();
  v256 = v305[0];
  v257 = (_QWORD *)swift_allocObject();
  v257[2] = sub_21423C39C;
  v257[3] = 0;
  v257[4] = v239;
  v257[5] = v297;
  v257[6] = v254;
  v257[7] = v244;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  v258 = sub_2142417D4(v256, (uint64_t)sub_21424C3E0, (uint64_t)v257, &qword_253F15858, (uint64_t)&unk_24D1806C8, (uint64_t)sub_21424E84C, (void (*)(uint64_t, uint64_t))sub_2141FA1C4);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v268[9] = v258;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v268;
}

float64_t sub_21423B98C@<D0>(uint64_t a1@<X0>, float64x2_t *a2@<X8>)
{
  uint64_t v2;
  float64x2_t *v3;
  float64x2_t v4;
  float64x2_t v5;
  float64x2_t v6;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    v3 = (float64x2_t *)(a1 + 48);
    v4 = 0uLL;
    v5 = 0uLL;
    do
    {
      v4 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v3[-1], v4), (int8x16_t)v3[-1], (int8x16_t)v4);
      v6 = *v3;
      v3 += 2;
      v5 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v6, v5), (int8x16_t)v6, (int8x16_t)v5);
      --v2;
    }
    while (v2);
    *a2 = v4;
    a2[1] = v5;
  }
  else
  {
    v4.f64[0] = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }
  return v4.f64[0];
}

uint64_t sub_21423B9D8@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, __int128 *a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v17;
  _BYTE v18[264];

  v8 = *a1;
  v9 = a1[1];
  v10 = *a2;
  v11 = *a3;
  v17 = *a4;
  v12 = *((_QWORD *)a4 + 2);
  v13 = *((_QWORD *)a4 + 3);
  v14 = *a5;
  v15 = a5[1];
  sub_2141E801C(a6, (uint64_t)v18, &qword_253F14B70);
  *(_QWORD *)a7 = v8;
  *(_QWORD *)(a7 + 8) = v9;
  *(_QWORD *)(a7 + 16) = v10;
  *(_QWORD *)(a7 + 24) = v11;
  *(_OWORD *)(a7 + 32) = v17;
  *(_QWORD *)(a7 + 48) = v12;
  *(_QWORD *)(a7 + 56) = v13;
  *(_QWORD *)(a7 + 64) = v14;
  *(_QWORD *)(a7 + 72) = v15;
  sub_2141E801C((uint64_t)v18, a7 + 80, &qword_253F14B70);
  swift_retain();
  sub_21421C4E4(v14);
  return sub_21424DDD8((uint64_t)v18);
}

uint64_t sub_21423BAA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t (*a11)(uint64_t, uint64_t, _QWORD *))
{
  uint64_t v19;
  _QWORD *v20;
  uint64_t v22;

  sub_2141D8BF8(&qword_253F15D58);
  v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = xmmword_214428BF0;
  *(_QWORD *)(v19 + 32) = a1;
  *(_QWORD *)(v19 + 40) = a2;
  *(_QWORD *)(v19 + 48) = a3;
  *(_QWORD *)(v19 + 56) = a4;
  *(_QWORD *)(v19 + 64) = a5;
  *(_QWORD *)(v19 + 72) = a6;
  v22 = v19;
  sub_214424FF8();
  v20 = (_QWORD *)swift_allocObject();
  v20[2] = a7;
  v20[3] = a8;
  v20[4] = a1;
  v20[5] = a2;
  v20[6] = a3;
  v20[7] = a4;
  v20[8] = a5;
  v20[9] = a6;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a11(v22, a10, v20);
}

double sub_21423BBB4@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 128) = -1;
  return result;
}

uint64_t sub_21423BBD4@<X0>(uint64_t a1@<X0>, const void *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, unint64_t *a8@<X8>)
{
  uint64_t v15;
  double v16;
  double v17;
  double v18;
  uint64_t v19;
  double v20;
  double v21;
  double v22;
  double v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t result;
  unint64_t v31;
  _QWORD v32[17];
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  _BYTE v39[136];
  _BYTE v40[104];
  _QWORD __dst[43];

  memcpy(__dst, a2, 0x152uLL);
  v15 = *a3;
  sub_2141E801C(a5, (uint64_t)v39, &qword_253F149E8);
  sub_2141E801C(a6, (uint64_t)v40, &qword_253F149E0);
  sub_2141E070C(a1, (uint64_t)&v36, &qword_253F12F70);
  if (*((_QWORD *)&v37 + 1))
  {
    v33 = v36;
    v34 = v37;
    v35 = v38;
    v16 = *(double *)__dst;
    v17 = *(double *)&__dst[1];
    v18 = *(double *)&__dst[2];
    v19 = __dst[3];
    v20 = *(double *)&__dst[4];
    v21 = *(double *)&__dst[5];
    v22 = *(double *)&__dst[6];
    v23 = *(double *)&__dst[7];
    v24 = __dst[8];
    v25 = __dst[9];
    sub_2141E801C((uint64_t)&__dst[10], (uint64_t)&v36, &qword_253F14B70);
    sub_2141E070C(a4, (uint64_t)v32, &qword_253F149F0);
    type metadata accessor for ChartContentRenderContext(0);
    swift_allocObject();
    swift_retain();
    sub_21421C39C((uint64_t)__dst);
    swift_bridgeObjectRetain();
    sub_21424D8C4((uint64_t)v39, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_21424D6F8);
    sub_21424D734((uint64_t)v40);
    v26 = sub_2142052CC(a7, v19, v24, v25, (uint64_t)&v36, v15, (uint64_t)v32, (uint64_t)v39, v16, v17, v18, v20, v21, v22, v23, (uint64_t)v40);
    v27 = *((_QWORD *)&v34 + 1);
    v28 = v35;
    v29 = sub_2141E88D0(&v33, *((uint64_t *)&v34 + 1));
    sub_214370DA4((uint64_t)v29, 0, v26, v27, v28);
    sub_21424D7B8((uint64_t)&v33);
    result = swift_release();
    v31 = v32[0];
  }
  else
  {
    result = sub_2141E0750((uint64_t)&v36, &qword_253F12F70);
    v31 = 0xE000000000000000;
  }
  *a8 = v31;
  return result;
}

void sub_21423BDFC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(double *)a2 = sub_2143A1BF4(a1);
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v4;
  *(_QWORD *)(a2 + 24) = v5;
}

void sub_21423BE24(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  sub_214344974(*a1);
  *a2 = v3;
}

double sub_21423BE58@<D0>(double *a1@<X0>, _QWORD *a2@<X8>)
{
  double result;

  result = *a1;
  *a2 = *(_QWORD *)a1;
  return result;
}

uint64_t sub_21423BE64@<X0>(uint64_t *a1@<X0>, double *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v6;
  double v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  _OWORD v16[6];
  uint64_t v17;

  v6 = *a1;
  v7 = *a2;
  v8 = *(_OWORD *)(a3 + 80);
  v16[4] = *(_OWORD *)(a3 + 64);
  v16[5] = v8;
  v17 = *(_QWORD *)(a3 + 96);
  v9 = *(_OWORD *)(a3 + 16);
  v16[0] = *(_OWORD *)a3;
  v16[1] = v9;
  v10 = *(_OWORD *)(a3 + 48);
  v16[2] = *(_OWORD *)(a3 + 32);
  v16[3] = v10;
  v11 = *(_QWORD *)a4;
  v12 = *(_BYTE *)(a4 + 8);
  v15 = MEMORY[0x24BEE4AF8];
  sub_21424CF08((uint64_t)v16);
  swift_retain();
  sub_214345018(v6);
  swift_bridgeObjectRetain();
  v13 = sub_2143829A8((uint64_t)v16, v11, v12, v15, v7);
  swift_bridgeObjectRelease();
  result = swift_release();
  *a5 = v13;
  return result;
}

double sub_21423BF48(uint64_t a1)
{
  return *(double *)(a1 + 8);
}

double sub_21423BF58@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result;

  result = *(double *)(a1 + 8);
  *a2 = result;
  return result;
}

uint64_t sub_21423BF64@<X0>(uint64_t *a1@<X0>, double *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v6;
  double v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  _OWORD v16[6];
  uint64_t v17;

  v6 = *a1;
  v7 = *a2;
  v8 = *(_OWORD *)(a3 + 80);
  v16[4] = *(_OWORD *)(a3 + 64);
  v16[5] = v8;
  v17 = *(_QWORD *)(a3 + 96);
  v9 = *(_OWORD *)(a3 + 16);
  v16[0] = *(_OWORD *)a3;
  v16[1] = v9;
  v10 = *(_OWORD *)(a3 + 48);
  v16[2] = *(_OWORD *)(a3 + 32);
  v16[3] = v10;
  v11 = *(_QWORD *)a4;
  v12 = *(_BYTE *)(a4 + 8);
  v15 = MEMORY[0x24BEE4AF8];
  sub_21424CF08((uint64_t)v16);
  swift_retain();
  sub_214345018(v6);
  swift_bridgeObjectRetain();
  v13 = sub_2143829A8((uint64_t)v16, v11, v12, v15, v7);
  swift_bridgeObjectRelease();
  result = swift_release();
  *a5 = v13;
  return result;
}

double sub_21423C048(uint64_t a1)
{
  return *(double *)(a1 + 16);
}

uint64_t sub_21423C05C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  int *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  char *v8;
  uint64_t v9;

  v4 = (int *)type metadata accessor for SgGroup(0);
  v5 = swift_allocBox();
  v7 = v6;
  v8 = (char *)v6 + v4[6];
  v9 = type metadata accessor for SgClipRect(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  *v7 = 0;
  v7[1] = a1;
  *(_QWORD *)((char *)v7 + v4[7]) = 0x3FF0000000000000;
  *(_QWORD *)((char *)v7 + v4[8]) = 0;
  *(_QWORD *)((char *)v7 + v4[9]) = MEMORY[0x24BEE4AF8];
  *((_BYTE *)v7 + v4[10]) = 0;
  *a2 = v5;
  return swift_bridgeObjectRetain();
}

uint64_t sub_21423C108@<X0>(uint64_t *a1@<X2>, uint64_t *a2@<X3>, uint64_t *a3@<X4>, _QWORD *a4@<X8>)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = sub_214381D5C(*a1, *a2, *a3);
  *a4 = v6;
  a4[1] = v7;
  a4[2] = v8;
  a4[3] = v9;
  return result;
}

uint64_t sub_21423C148@<X0>(uint64_t a1@<X0>, const void *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, unint64_t *a8@<X8>)
{
  uint64_t v15;
  double v16;
  double v17;
  double v18;
  uint64_t v19;
  double v20;
  double v21;
  double v22;
  double v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t result;
  unint64_t v31;
  _QWORD v32[17];
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  _BYTE v39[136];
  _BYTE v40[104];
  _QWORD __dst[43];

  memcpy(__dst, a2, 0x152uLL);
  v15 = *a3;
  sub_2141E801C(a5, (uint64_t)v39, &qword_253F149E8);
  sub_2141E801C(a6, (uint64_t)v40, &qword_253F149E0);
  sub_2141E070C(a1, (uint64_t)&v36, &qword_253F12F70);
  if (*((_QWORD *)&v37 + 1))
  {
    v33 = v36;
    v34 = v37;
    v35 = v38;
    v16 = *(double *)__dst;
    v17 = *(double *)&__dst[1];
    v18 = *(double *)&__dst[2];
    v19 = __dst[3];
    v20 = *(double *)&__dst[4];
    v21 = *(double *)&__dst[5];
    v22 = *(double *)&__dst[6];
    v23 = *(double *)&__dst[7];
    v24 = __dst[8];
    v25 = __dst[9];
    sub_2141E801C((uint64_t)&__dst[10], (uint64_t)&v36, &qword_253F14B70);
    sub_2141E070C(a4, (uint64_t)v32, &qword_253F149F0);
    type metadata accessor for ChartContentRenderContext(0);
    swift_allocObject();
    swift_retain();
    sub_21421C39C((uint64_t)__dst);
    swift_bridgeObjectRetain();
    sub_21424D8C4((uint64_t)v39, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_21424D6F8);
    sub_21424D734((uint64_t)v40);
    v26 = sub_2142052CC(a7, v19, v24, v25, (uint64_t)&v36, v15, (uint64_t)v32, (uint64_t)v39, v16, v17, v18, v20, v21, v22, v23, (uint64_t)v40);
    v27 = *((_QWORD *)&v34 + 1);
    v28 = v35;
    v29 = sub_2141E88D0(&v33, *((uint64_t *)&v34 + 1));
    sub_214370DA4((uint64_t)v29, 1, v26, v27, v28);
    sub_21424D7B8((uint64_t)&v33);
    result = swift_release();
    v31 = v32[0];
  }
  else
  {
    result = sub_2141E0750((uint64_t)&v36, &qword_253F12F70);
    v31 = 0xE000000000000000;
  }
  *a8 = v31;
  return result;
}

uint64_t sub_21423C370@<X0>(unint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;

  result = sub_214228EC8(*a1, *a2);
  *a3 = result;
  return result;
}

uint64_t sub_21423C39C@<X0>(unint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t result;

  result = sub_2142C0244(*a1, *a2, *a3, *a4);
  *a5 = result;
  return result;
}

uint64_t sub_21423C3D0()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v0;
}

uint64_t sub_21423C434()
{
  sub_21423C3D0();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for DataflowGraphBuilder()
{
  return objc_opt_self();
}

uint64_t destroy for EnvironmentSignals()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

_QWORD *initializeWithCopy for EnvironmentSignals(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  a1[4] = a2[4];
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for EnvironmentSignals(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  a1[3] = a2[3];
  swift_retain();
  swift_release();
  a1[4] = a2[4];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for EnvironmentSignals(uint64_t a1, uint64_t a2)
{
  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  swift_release();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_release();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for EnvironmentSignals(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for EnvironmentSignals(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for EnvironmentSignals()
{
  return &type metadata for EnvironmentSignals;
}

uint64_t sub_21423C6C8(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t result;
  _QWORD v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_214350120((uint64_t)v2);
  v3 = *((_QWORD *)v2 + 2);
  v5[0] = v2 + 32;
  v5[1] = v3;
  result = sub_21424736C(v5);
  *a1 = v2;
  return result;
}

void sub_21423C730(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  int64_t v7;
  int64_t v8;

  if (!a4)
  {
    v8 = *(_QWORD *)(a3 + 16);
    if (!v8)
    {
      sub_2143EDF8C(a1, a5);
      return;
    }
    goto LABEL_11;
  }
  if (a4 == 1)
  {
    v7 = *(_QWORD *)(a3 + 16);
    if (!v7)
    {
      sub_2143EE5E0(MEMORY[0x24BEE4AF8], a1, a2, a5);
      return;
    }
    sub_2141D3ABC(0, v7, 0);
    __break(1u);
LABEL_11:
    sub_2141D3AA0(0, v8, 0);
    __break(1u);
    return;
  }
  if (qword_253F0FF38 != -1)
    swift_once();
  sub_21422F3FC((uint64_t)&unk_253F1C748, a5);
}

uint64_t sub_21423C834@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v20;
  _QWORD *v21;

  v10 = sub_214423B70();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a4)
  {
    if (a4 == 1)
    {
      v14 = *(_QWORD *)(a3 + 16);
      v15 = (_QWORD *)MEMORY[0x24BEE4AF8];
      if (v14)
      {
        v20 = a2;
        v21 = (_QWORD *)MEMORY[0x24BEE4AF8];
        sub_2141D3ABC(0, v14, 0);
        v15 = v21;
        v16 = a3 + 32;
        do
        {
          sub_2144239E4();
          v21 = v15;
          v18 = v15[2];
          v17 = v15[3];
          if (v18 >= v17 >> 1)
          {
            sub_2141D3ABC(v17 > 1, v18 + 1, 1);
            v15 = v21;
          }
          v15[2] = v18 + 1;
          (*(void (**)(unint64_t, char *, uint64_t))(v11 + 32))((unint64_t)v15+ ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))+ *(_QWORD *)(v11 + 72) * v18, v13, v10);
          v16 += 8;
          --v14;
        }
        while (v14);
        a2 = v20;
      }
      sub_2143EE5E0(v15, a1, a2, a5);
      return swift_bridgeObjectRelease();
    }
    else
    {
      if (qword_253F0FF38 != -1)
        swift_once();
      return sub_21422F3FC((uint64_t)&unk_253F1C748, a5);
    }
  }
  else
  {
    sub_214239098(a3);
    sub_2143EDF8C(a1, a5);
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_21423CA2C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;

  if (a6)
  {
    v15 = a6;
  }
  else
  {
    v16 = swift_allocObject();
    *(_QWORD *)(v16 + 16) = a3;
    *(_BYTE *)(v16 + 24) = a4;
    *(_BYTE *)(v16 + 25) = a5;
    v17 = swift_allocObject();
    *(_QWORD *)(v17 + 16) = sub_21424E6D8;
    *(_QWORD *)(v17 + 24) = v16;
    v15 = sub_21424009C(MEMORY[0x24BEE4AF8], (uint64_t)sub_21424CAB4, v17);
  }
  v38 = a4;
  if (a7)
  {
    swift_retain();
    v18 = a7;
  }
  else
  {
    v19 = swift_allocObject();
    *(_QWORD *)(v19 + 16) = a3;
    *(_BYTE *)(v19 + 24) = a4;
    *(_BYTE *)(v19 + 25) = a5;
    v20 = swift_allocObject();
    *(_QWORD *)(v20 + 16) = sub_21424E6DC;
    *(_QWORD *)(v20 + 24) = v19;
    swift_retain();
    v18 = sub_21423FDE8(MEMORY[0x24BEE4AF8], (uint64_t)sub_21424CAB4, v20);
  }
  v37 = a3;
  swift_retain();
  swift_retain();
  if (a8)
    v36 = a8;
  else
    v36 = sub_214234F68((uint64_t)sub_2143A3F98, 0);
  v21 = swift_allocObject();
  *(_QWORD *)(v21 + 16) = a9;
  *(_BYTE *)(v21 + 24) = a5;
  sub_2141D8BF8(&qword_253F15D58);
  v22 = swift_allocObject();
  *(_OWORD *)(v22 + 16) = xmmword_214428BD0;
  *(_QWORD *)(v22 + 32) = v15;
  *(_QWORD *)(v22 + 40) = v18;
  *(_QWORD *)(v22 + 48) = a10;
  *(_QWORD *)(v22 + 56) = a2;
  v41 = v22;
  sub_214424FF8();
  v23 = (_QWORD *)swift_allocObject();
  v24 = a2;
  v25 = (uint64_t)v23;
  v23[2] = sub_21424E838;
  v23[3] = v21;
  v23[4] = v15;
  v23[5] = v18;
  v23[6] = a10;
  v23[7] = v24;
  v35 = v24;
  swift_retain_n();
  swift_retain_n();
  swift_retain_n();
  swift_retain_n();
  swift_retain();
  swift_retain();
  swift_retain();
  v26 = sub_21423EE98(v41, (uint64_t)sub_21424CB0C, v25, &qword_253F10F98, (uint64_t)&unk_24D180088, (uint64_t)sub_21424C7F0, (void (*)(uint64_t, uint64_t))sub_2141FA1C4);
  v27 = swift_allocObject();
  *(_QWORD *)(v27 + 16) = a9;
  *(_QWORD *)(v27 + 24) = v37;
  *(_BYTE *)(v27 + 32) = v38;
  *(_BYTE *)(v27 + 33) = a5;
  v28 = swift_allocObject();
  *(_OWORD *)(v28 + 16) = xmmword_2144271F0;
  *(_QWORD *)(v28 + 32) = a1;
  *(_QWORD *)(v28 + 40) = v36;
  *(_QWORD *)(v28 + 48) = v26;
  v42 = v28;
  sub_214424FF8();
  v29 = (_QWORD *)swift_allocObject();
  v29[2] = sub_21424E40C;
  v29[3] = v27;
  v29[4] = a1;
  v29[5] = v36;
  v29[6] = v26;
  swift_retain_n();
  swift_retain_n();
  swift_retain();
  swift_retain();
  sub_2142425B4(v42, (uint64_t)sub_21424CB68, (uint64_t)v29);
  v30 = swift_allocObject();
  *(_QWORD *)(v30 + 16) = a9;
  *(_BYTE *)(v30 + 24) = a5;
  v31 = swift_allocObject();
  *(_OWORD *)(v31 + 16) = xmmword_214428BD0;
  *(_QWORD *)(v31 + 32) = v15;
  *(_QWORD *)(v31 + 40) = v18;
  *(_QWORD *)(v31 + 48) = v35;
  *(_QWORD *)(v31 + 56) = a10;
  v43 = v31;
  sub_214424FF8();
  v32 = (_QWORD *)swift_allocObject();
  v32[2] = sub_21424E83C;
  v32[3] = v30;
  v32[4] = v15;
  v32[5] = v18;
  v32[6] = v35;
  v32[7] = a10;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  v33 = sub_21423EE98(v43, (uint64_t)sub_21424CB7C, (uint64_t)v32, &qword_253F10FA0, (uint64_t)&unk_24D180038, (uint64_t)sub_21424E84C, (void (*)(uint64_t, uint64_t))sub_2141FA1C4);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v33;
}

uint64_t sub_21423CEE8(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;

  if (a6)
  {
    v15 = a6;
  }
  else
  {
    v16 = swift_allocObject();
    *(_QWORD *)(v16 + 16) = a3;
    *(_BYTE *)(v16 + 24) = a4;
    *(_BYTE *)(v16 + 25) = a5;
    v17 = swift_allocObject();
    *(_QWORD *)(v17 + 16) = sub_21424CAA4;
    *(_QWORD *)(v17 + 24) = v16;
    v15 = sub_21424009C(MEMORY[0x24BEE4AF8], (uint64_t)sub_21424CAB4, v17);
  }
  v38 = a4;
  if (a7)
  {
    swift_retain();
    v18 = a7;
  }
  else
  {
    v19 = swift_allocObject();
    *(_QWORD *)(v19 + 16) = a3;
    *(_BYTE *)(v19 + 24) = a4;
    *(_BYTE *)(v19 + 25) = a5;
    v20 = swift_allocObject();
    *(_QWORD *)(v20 + 16) = sub_21424CAC8;
    *(_QWORD *)(v20 + 24) = v19;
    swift_retain();
    v18 = sub_21423FDE8(MEMORY[0x24BEE4AF8], (uint64_t)sub_21424CAB4, v20);
  }
  v37 = a3;
  swift_retain();
  swift_retain();
  if (a8)
    v36 = a8;
  else
    v36 = sub_214234F68((uint64_t)sub_2143A3F98, 0);
  v21 = swift_allocObject();
  *(_QWORD *)(v21 + 16) = a9;
  *(_BYTE *)(v21 + 24) = a5;
  sub_2141D8BF8(&qword_253F15D58);
  v22 = swift_allocObject();
  *(_OWORD *)(v22 + 16) = xmmword_214428BD0;
  *(_QWORD *)(v22 + 32) = v15;
  *(_QWORD *)(v22 + 40) = v18;
  *(_QWORD *)(v22 + 48) = a10;
  *(_QWORD *)(v22 + 56) = a2;
  v41 = v22;
  sub_214424FF8();
  v23 = (_QWORD *)swift_allocObject();
  v24 = a2;
  v25 = (uint64_t)v23;
  v23[2] = sub_21424CAFC;
  v23[3] = v21;
  v23[4] = v15;
  v23[5] = v18;
  v23[6] = a10;
  v23[7] = v24;
  v35 = v24;
  swift_retain_n();
  swift_retain_n();
  swift_retain_n();
  swift_retain_n();
  swift_retain();
  swift_retain();
  swift_retain();
  v26 = sub_21423EE98(v41, (uint64_t)sub_21424CB0C, v25, &qword_253F10F98, (uint64_t)&unk_24D180088, (uint64_t)sub_21424C7F0, (void (*)(uint64_t, uint64_t))sub_2141FA1C4);
  v27 = swift_allocObject();
  *(_QWORD *)(v27 + 16) = a9;
  *(_QWORD *)(v27 + 24) = v37;
  *(_BYTE *)(v27 + 32) = v38;
  *(_BYTE *)(v27 + 33) = a5;
  v28 = swift_allocObject();
  *(_OWORD *)(v28 + 16) = xmmword_2144271F0;
  *(_QWORD *)(v28 + 32) = a1;
  *(_QWORD *)(v28 + 40) = v36;
  *(_QWORD *)(v28 + 48) = v26;
  v42 = v28;
  sub_214424FF8();
  v29 = (_QWORD *)swift_allocObject();
  v29[2] = sub_21424CB3C;
  v29[3] = v27;
  v29[4] = a1;
  v29[5] = v36;
  v29[6] = v26;
  swift_retain_n();
  swift_retain_n();
  swift_retain();
  swift_retain();
  sub_2142425B4(v42, (uint64_t)sub_21424CB68, (uint64_t)v29);
  v30 = swift_allocObject();
  *(_QWORD *)(v30 + 16) = a9;
  *(_BYTE *)(v30 + 24) = a5;
  v31 = swift_allocObject();
  *(_OWORD *)(v31 + 16) = xmmword_214428BD0;
  *(_QWORD *)(v31 + 32) = v15;
  *(_QWORD *)(v31 + 40) = v18;
  *(_QWORD *)(v31 + 48) = v35;
  *(_QWORD *)(v31 + 56) = a10;
  v43 = v31;
  sub_214424FF8();
  v32 = (_QWORD *)swift_allocObject();
  v32[2] = sub_21424CB6C;
  v32[3] = v30;
  v32[4] = v15;
  v32[5] = v18;
  v32[6] = v35;
  v32[7] = a10;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  v33 = sub_21423EE98(v43, (uint64_t)sub_21424CB7C, (uint64_t)v32, &qword_253F10FA0, (uint64_t)&unk_24D180038, (uint64_t)sub_21424E84C, (void (*)(uint64_t, uint64_t))sub_2141FA1C4);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v33;
}

void sub_21423D3A4(uint64_t a1, double a2, double a3, double a4, double a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v15;
  char v16;
  unsigned __int8 *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  double v21;
  __int128 v22;
  __int128 v23;

  if (*(_QWORD *)(a7 + 16) && (v15 = sub_214336B74(*(_BYTE *)(a8 + 57)), (v16 & 1) != 0))
  {
    v17 = (unsigned __int8 *)(*(_QWORD *)(a7 + 56) + 56 * v15);
    v18 = *v17;
    v20 = *((_QWORD *)v17 + 3);
    v19 = *((_QWORD *)v17 + 4);
    v22 = *(_OWORD *)(v17 + 40);
    v23 = *(_OWORD *)(v17 + 8);
    swift_bridgeObjectRetain();
  }
  else
  {
    v19 = sub_21436CC10(MEMORY[0x24BEE4AF8]);
    v18 = 0;
    v20 = 0;
    v22 = 0u;
    v23 = 0u;
  }
  swift_beginAccess();
  *(_QWORD *)(a1 + 184) = v18;
  *(_OWORD *)(a1 + 192) = v23;
  *(_QWORD *)(a1 + 208) = v20;
  *(_QWORD *)(a1 + 216) = v19;
  *(_OWORD *)(a1 + 224) = v22;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 240) = 0;
  *(double *)(a1 + 248) = a2;
  *(_QWORD *)(a1 + 256) = 0;
  *(double *)(a1 + 264) = a3;
  *(_QWORD *)(a1 + 272) = 0;
  *(double *)(a1 + 280) = a4;
  *(_QWORD *)(a1 + 288) = 0;
  v21 = *(double *)(a8 + 64);
  if (v21 <= 0.0)
    v21 = 2.0;
  *(double *)(a1 + 296) = a5;
  *(double *)(a1 + 304) = v21;
  __asm { BR              X10 }
}

uint64_t sub_21423D514(uint64_t a1, double a2, double a3)
{
  char v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  double v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(double *)(v7 + 312) = a3;
  *(_QWORD *)(v7 + 320) = v9;
  *(double *)(v7 + 328) = a2;
  *(_QWORD *)(v7 + 336) = v9;
  v10 = a3 < a2;
  v11 = -1.0;
  if (v10)
    v11 = 1.0;
  *(double *)(v7 + 344) = v11;
  v12 = *(_QWORD **)(v6 + 48);
  v13 = v12[2];
  if (v13)
  {
    v14 = v12[4];
    v15 = v12[5];
    v16 = (uint64_t)&v12[2 * v13 + 4];
    a1 = *(_QWORD *)(v16 - 16);
    if (a1 != v14 || *(_QWORD *)(v16 - 8) != v15)
    {
      a1 = sub_214425790();
      if ((a1 & 1) != 0 && v5 != 2)
        *(double *)(v7 + 344) = -*(double *)(v7 + 344);
    }
  }
  *(_QWORD *)(v8 - 144) = MEMORY[0x24BEE4AF8];
  MEMORY[0x24BDAC7A8](a1);
  v17 = sub_21421FD54(v4, v3, (void (*)(uint64_t *__return_ptr))sub_21424E36C);
  swift_bridgeObjectRelease();
  return v17;
}

void sub_21423D644(uint64_t a1, double a2, double a3, double a4, double a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v15;
  char v16;
  unsigned __int8 *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  double v21;
  __int128 v22;
  __int128 v23;

  if (*(_QWORD *)(a7 + 16) && (v15 = sub_214336B74(*(_BYTE *)(a8 + 57)), (v16 & 1) != 0))
  {
    v17 = (unsigned __int8 *)(*(_QWORD *)(a7 + 56) + 56 * v15);
    v18 = *v17;
    v20 = *((_QWORD *)v17 + 3);
    v19 = *((_QWORD *)v17 + 4);
    v22 = *(_OWORD *)(v17 + 40);
    v23 = *(_OWORD *)(v17 + 8);
    swift_bridgeObjectRetain();
  }
  else
  {
    v19 = sub_21436CC10(MEMORY[0x24BEE4AF8]);
    v18 = 0;
    v20 = 0;
    v22 = 0u;
    v23 = 0u;
  }
  swift_beginAccess();
  *(_QWORD *)(a1 + 184) = v18;
  *(_OWORD *)(a1 + 192) = v23;
  *(_QWORD *)(a1 + 208) = v20;
  *(_QWORD *)(a1 + 216) = v19;
  *(_OWORD *)(a1 + 224) = v22;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 240) = 0;
  *(double *)(a1 + 248) = a2;
  *(_QWORD *)(a1 + 256) = 0;
  *(double *)(a1 + 264) = a3;
  *(_QWORD *)(a1 + 272) = 0;
  *(double *)(a1 + 280) = a4;
  *(_QWORD *)(a1 + 288) = 0;
  v21 = *(double *)(a8 + 64);
  if (v21 <= 0.0)
    v21 = 2.0;
  *(double *)(a1 + 296) = a5;
  *(double *)(a1 + 304) = v21;
  __asm { BR              X10 }
}

uint64_t sub_21423D7B4(uint64_t a1, double a2, double a3)
{
  char v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  *(double *)(v7 + 312) = a3;
  *(_QWORD *)(v7 + 320) = v9;
  *(double *)(v7 + 328) = a2;
  *(_QWORD *)(v7 + 336) = v9;
  v10 = a3 < a2;
  v11 = -1.0;
  if (v10)
    v11 = 1.0;
  *(double *)(v7 + 344) = v11;
  v12 = *(_QWORD *)(v6 + 48);
  v13 = *(_QWORD *)(v12 + 16);
  if (v13)
  {
    if (*(double *)(v12 + 32 + 8 * v13 - 8) < *(double *)(v12 + 32) && v5 != 2)
      *(double *)(v7 + 344) = -v11;
  }
  *(_QWORD *)(v8 - 144) = MEMORY[0x24BEE4AF8];
  MEMORY[0x24BDAC7A8](a1);
  v15 = sub_21421FD54(v4, v3, (void (*)(uint64_t *__return_ptr))sub_21424C908);
  swift_bridgeObjectRelease();
  return v15;
}

uint64_t sub_21423D8C8(_QWORD *a1, uint64_t a2, char a3, void (**a4)(__int128 *__return_ptr, __int128 *), uint64_t *a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  void (*v33)(__int128 *__return_ptr, __int128 *);
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37[2];
  uint64_t v38;

  v6 = a1[1];
  if (*(_QWORD *)(v6 + 16))
  {
    v30 = *(_QWORD *)(v6 + 16);
    v33 = *a4;
    v9 = swift_bridgeObjectRetain();
    if (a3)
    {
      if (a3 != 1)
      {
        v29 = v9;
        v10 = (uint64_t *)(v9 + 56);
        v12 = *(_QWORD *)(v9 + 32);
        v11 = *(_QWORD *)(v9 + 40);
        v13 = *(_QWORD *)(a2 + 160);
        *(_QWORD *)(a2 + 160) = 2;
        *(_QWORD *)(a2 + 168) = 0;
        v15 = *(_QWORD *)(a2 + 144);
        v14 = *(_QWORD *)(a2 + 152);
        *(_QWORD *)(a2 + 144) = v12;
        *(_QWORD *)(a2 + 152) = v11;
        *(_QWORD *)(a2 + 176) = v30;
        swift_bridgeObjectRetain_n();
        sub_21424C914(v15, v14, v13);
        *(_QWORD *)&v37[0] = v12;
        *((_QWORD *)&v37[0] + 1) = v11;
        v33(&v34, v37);
        if (*(_BYTE *)(a2 + 136) != 2 && *(_QWORD *)(v29 + 16) > 1uLL)
        {
          v16 = *v10;
          *(_QWORD *)&v37[0] = *(v10 - 1);
          *((_QWORD *)&v37[0] + 1) = v16;
          swift_bridgeObjectRetain();
          v33(&v34, v37);
          swift_bridgeObjectRelease();
        }
        __asm { BR              X9 }
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    JUMPOUT(0x21423DC34);
  }
  sub_2141E070C(a6, (uint64_t)&v34, &qword_253F11E60);
  if (*((_QWORD *)&v35 + 1))
  {
    v37[0] = v34;
    v37[1] = v35;
    v38 = v36;
    v17 = swift_allocObject();
    v18 = *(_QWORD *)(*a1 + 24);
    v19 = *a5;
    sub_2141D8DC0(v37, v17 + 32);
    *(_QWORD *)(v17 + 16) = v18;
    *(_QWORD *)(v17 + 24) = v19;
    v20 = v17 | 0x2000000000000000;
    *(_QWORD *)(v17 + 72) = 0;
  }
  else
  {
    sub_2141E0750((uint64_t)&v34, &qword_253F11E60);
    v21 = (int *)type metadata accessor for SgGroup(0);
    v20 = swift_allocBox();
    v23 = v22;
    v24 = *(_QWORD *)(*a1 + 24);
    v25 = *a5;
    v26 = (char *)v22 + v21[6];
    v27 = type metadata accessor for SgClipRect(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v26, 1, 1, v27);
    *v23 = v24;
    v23[1] = v25;
    *(_QWORD *)((char *)v23 + v21[7]) = 0x3FF0000000000000;
    *(_QWORD *)((char *)v23 + v21[8]) = 0;
    *(_QWORD *)((char *)v23 + v21[9]) = MEMORY[0x24BEE4AF8];
    *((_BYTE *)v23 + v21[10]) = 0;
  }
  swift_bridgeObjectRetain();
  return v20;
}

uint64_t sub_21423DC44(_QWORD *a1, uint64_t a2, unsigned __int8 a3, void (**a4)(__int128 *__return_ptr, __int128 *), uint64_t *a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  void (*v29)(__int128 *__return_ptr, __int128 *);
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33[2];
  uint64_t v34;

  v6 = (_QWORD *)a1[1];
  v7 = v6[2];
  if (v7)
  {
    v29 = *a4;
    v10 = a3;
    swift_bridgeObjectRetain();
    if (v10 <= 1)
    {
      v11 = v6[4];
      v12 = *(_QWORD *)(a2 + 144);
      v13 = *(_QWORD *)(a2 + 152);
      v14 = *(_QWORD *)(a2 + 160);
      *(_QWORD *)(a2 + 144) = v11;
      *(_QWORD *)(a2 + 152) = 0;
      *(_QWORD *)(a2 + 160) = a3;
      *(_QWORD *)(a2 + 168) = 0;
      *(_QWORD *)(a2 + 176) = v7;
      sub_21424C914(v12, v13, v14);
      *(_QWORD *)&v30 = v11;
      v29(v33, &v30);
      if (*(_BYTE *)(a2 + 136) != 2 && v6[2] > 1uLL)
      {
        *(_QWORD *)&v30 = v6[5];
        v29(v33, &v30);
      }
      __asm { BR              X9 }
    }
    __break(1u);
    JUMPOUT(0x21423DF64);
  }
  sub_2141E070C(a6, (uint64_t)&v30, &qword_253F11E60);
  if (*((_QWORD *)&v31 + 1))
  {
    v33[0] = v30;
    v33[1] = v31;
    v34 = v32;
    v15 = swift_allocObject();
    v16 = *(_QWORD *)(*a1 + 24);
    v17 = *a5;
    sub_2141D8DC0(v33, v15 + 32);
    *(_QWORD *)(v15 + 16) = v16;
    *(_QWORD *)(v15 + 24) = v17;
    v18 = v15 | 0x2000000000000000;
    *(_QWORD *)(v15 + 72) = 0;
  }
  else
  {
    sub_2141E0750((uint64_t)&v30, &qword_253F11E60);
    v19 = (int *)type metadata accessor for SgGroup(0);
    v18 = swift_allocBox();
    v21 = v20;
    v22 = *(_QWORD *)(*a1 + 24);
    v23 = *a5;
    v24 = (char *)v20 + v19[6];
    v25 = type metadata accessor for SgClipRect(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v24, 1, 1, v25);
    *v21 = v22;
    v21[1] = v23;
    *(_QWORD *)((char *)v21 + v19[7]) = 0x3FF0000000000000;
    *(_QWORD *)((char *)v21 + v19[8]) = 0;
    *(_QWORD *)((char *)v21 + v19[9]) = MEMORY[0x24BEE4AF8];
    *((_BYTE *)v21 + v19[10]) = 0;
  }
  swift_bridgeObjectRetain();
  return v18;
}

uint64_t sub_21423DF74(uint64_t a1, uint64_t a2, char **a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v22;
  unint64_t v23;
  __int128 v24;
  __int128 v25;
  _OWORD v26[2];
  unint64_t v27;
  char v28;
  _QWORD v29[6];
  __int128 v30;
  __int128 v31;
  unint64_t v32;
  _OWORD v33[3];

  *(_QWORD *)(a1 + 128) = *(_QWORD *)(*(_QWORD *)a2 + 24);
  result = sub_2141DFD94(a2 + 16, (uint64_t)v29);
  v7 = *(unsigned __int8 *)(a1 + 160);
  if (v7 == 255)
  {
    __break(1u);
  }
  else
  {
    v24 = *(_OWORD *)(a1 + 144);
    v25 = *(_OWORD *)(a1 + 168);
    sub_2141DFD94((uint64_t)v29, (uint64_t)v26);
    if (v28)
    {
      if (v28 == 1)
      {
        v33[0] = v24;
        LOBYTE(v33[1]) = v7;
        *(_OWORD *)((char *)&v33[1] + 8) = v25;
        (*(void (**)(__int128 *__return_ptr, _OWORD *))&v26[0])(&v30, v33);
        swift_release();
      }
      else
      {
        memset(v33, 0, 40);
        *((_QWORD *)&v31 + 1) = sub_2141D8BF8(&qword_254D698F8);
        v32 = sub_21424C95C();
        *(_QWORD *)&v30 = swift_allocObject();
        sub_2143C8E68((uint64_t)v33, v30 + 16);
      }
    }
    else
    {
      v30 = v26[0];
      v31 = v26[1];
      v32 = v27;
    }
    sub_2141DE9E0((uint64_t)v29);
    v8 = *((_QWORD *)&v31 + 1);
    v9 = v32;
    v10 = sub_2141E88D0(&v30, *((uint64_t *)&v31 + 1));
    swift_retain();
    sub_21442254C((uint64_t)v10, a1, v8, v9);
    swift_release();
    v11 = v29[0];
    v12 = (int *)type metadata accessor for SgGroup(0);
    v13 = swift_allocBox();
    v15 = v14;
    v16 = *(_QWORD *)(*(_QWORD *)a2 + 24);
    sub_2141D8BF8(&qword_253F15D40);
    v17 = swift_allocObject();
    *(_OWORD *)(v17 + 16) = xmmword_214426EF0;
    *(_QWORD *)(v17 + 32) = v11;
    v18 = (char *)v15 + v12[6];
    v19 = type metadata accessor for SgClipRect(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v18, 1, 1, v19);
    *v15 = v16;
    v15[1] = v17;
    *(_QWORD *)((char *)v15 + v12[7]) = 0x3FF0000000000000;
    *(_QWORD *)((char *)v15 + v12[8]) = 0;
    *(_QWORD *)((char *)v15 + v12[9]) = MEMORY[0x24BEE4AF8];
    *((_BYTE *)v15 + v12[10]) = 0;
    v20 = *a3;
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *a3 = v20;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v20 = sub_214222074(0, *((_QWORD *)v20 + 2) + 1, 1, v20);
      *a3 = v20;
    }
    v23 = *((_QWORD *)v20 + 2);
    v22 = *((_QWORD *)v20 + 3);
    if (v23 >= v22 >> 1)
      v20 = sub_214222074((char *)(v22 > 1), v23 + 1, 1, v20);
    *((_QWORD *)v20 + 2) = v23 + 1;
    *(_QWORD *)&v20[8 * v23 + 32] = v13;
    *a3 = v20;
    swift_release();
    return sub_2141DFDD0((uint64_t)&v30);
  }
  return result;
}

uint64_t sub_21423E220@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = sub_21432D390(a1);
  *a2 = result;
  return result;
}

uint64_t sub_21423E244(uint64_t result, _QWORD *a2, unsigned __int8 a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  void (*v32)(__int128 *__return_ptr, uint64_t *);
  uint64_t v33;
  int v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  __int16 v60;
  char v61;
  __int16 v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  _OWORD v70[2];
  unint64_t v71;
  char v72;
  __int128 v73;
  __int128 v74;
  unint64_t v75;

  v40 = *(_QWORD *)(result + 16);
  if (v40)
  {
    result = swift_bridgeObjectRetain();
    v41 = 0;
    v8 = (uint64_t *)(result + 40);
    v34 = a3;
    v33 = a4;
    while (v34 == 2)
    {
      v12 = *(v8 - 1);
      v13 = *v8;
      v14 = a2[18];
      v15 = a2[19];
      v16 = a2[20];
      a2[18] = v12;
      a2[19] = v13;
      a2[20] = 2;
      a2[21] = v41;
      a2[22] = v40;
      swift_bridgeObjectRetain_n();
      sub_21424C914(v14, v15, v16);
      v17 = *(_QWORD *)(a4 + 16);
      v18 = *(_QWORD *)(v17 + 32);
      swift_retain();
      result = sub_21421F8F4(v12, v13, v18);
      v19 = *(_QWORD *)(v17 + 32);
      *(_QWORD *)(v17 + 32) = result;
      v20 = *(_QWORD *)(a4 + 24);
      *(_QWORD *)(a4 + 24) = result;
      a2[16] = result;
      v21 = a2[20];
      if (*((_BYTE *)a2 + 160) == 0xFF)
        goto LABEL_16;
      v23 = a2[18];
      v22 = a2[19];
      v36 = a2[21];
      v37 = a2[22];
      sub_2141DFD94(a5, (uint64_t)v70);
      v38 = v20;
      v39 = v19;
      if (v72)
      {
        if (v72 == 1)
        {
          v32 = *(void (**)(__int128 *__return_ptr, uint64_t *))&v70[0];
          v51 = v23;
          v52 = v22;
          LOBYTE(v53) = v21;
          v54 = v36;
          v55 = v37;
          sub_2141DD14C(v23, v22, v21);
          v32(&v73, &v51);
          swift_release();
        }
        else
        {
          *((_QWORD *)&v74 + 1) = sub_2141D8BF8(&qword_254D698F8);
          v75 = sub_21424C95C();
          v24 = swift_allocObject();
          *(_QWORD *)&v73 = v24;
          LOBYTE(v42) = 2;
          *((_QWORD *)&v42 + 1) = 0;
          *(_QWORD *)&v43 = 0;
          BYTE8(v43) = 1;
          v44 = 0uLL;
          LOBYTE(v45) = 1;
          *((_QWORD *)&v45 + 1) = 0;
          *(_QWORD *)&v46 = 0;
          WORD4(v46) = 0;
          BYTE10(v46) = 1;
          *(_WORD *)((char *)&v46 + 11) = 770;
          *(_QWORD *)&v47 = 0;
          BYTE8(v47) = 1;
          *(_QWORD *)&v48 = 0;
          BYTE8(v48) = 1;
          v49 = 0uLL;
          v50 = 2;
          *(_BYTE *)(v24 + 16) = 2;
          *(_QWORD *)(v24 + 24) = 0;
          *(_BYTE *)(v24 + 32) = -1;
          *(_QWORD *)(v24 + 72) = 0;
          *(_OWORD *)(v24 + 56) = 0u;
          *(_OWORD *)(v24 + 40) = 0u;
          *(_WORD *)(v24 + 80) = 1;
          *(_QWORD *)(v24 + 88) = 0;
          *(_BYTE *)(v24 + 96) = 2;
          *(_QWORD *)(v24 + 104) = 0;
          *(_BYTE *)(v24 + 112) = -1;
          *(_OWORD *)(v24 + 146) = 0u;
          *(_OWORD *)(v24 + 136) = 0u;
          *(_OWORD *)(v24 + 120) = 0u;
          *(_QWORD *)(v24 + 168) = 0;
          v25 = v42;
          v26 = v43;
          v27 = v45;
          *(_OWORD *)(v24 + 208) = v44;
          *(_OWORD *)(v24 + 224) = v27;
          *(_OWORD *)(v24 + 176) = v25;
          *(_OWORD *)(v24 + 192) = v26;
          v28 = v46;
          v29 = v47;
          v30 = v48;
          v31 = v49;
          *(_BYTE *)(v24 + 304) = 2;
          *(_OWORD *)(v24 + 272) = v30;
          *(_OWORD *)(v24 + 288) = v31;
          *(_OWORD *)(v24 + 240) = v28;
          *(_OWORD *)(v24 + 256) = v29;
          LOBYTE(v51) = 2;
          v52 = 0;
          v53 = 0;
          LOBYTE(v54) = 1;
          v55 = 0;
          v56 = 0;
          v57 = 1;
          v58 = 0;
          v59 = 0;
          v60 = 0;
          v61 = 1;
          v62 = 770;
          v63 = 0;
          v64 = 1;
          v65 = 0;
          v66 = 1;
          v67 = 0;
          v68 = 0;
          v69 = 2;
          sub_21424CB94(v23, v22, v21);
          sub_21424CBA8((uint64_t)&v42);
          sub_21424CBEC((uint64_t)&v51);
          swift_bridgeObjectRelease_n();
        }
        sub_21424C914(v23, v22, v21);
      }
      else
      {
        v73 = v70[0];
        v74 = v70[1];
        v75 = v71;
      }
      v9 = *((_QWORD *)&v74 + 1);
      v10 = v75;
      v11 = sub_2141E88D0(&v73, *((uint64_t *)&v74 + 1));
      swift_retain();
      sub_214422518((uint64_t)v11, (uint64_t)a2, v9, v10);
      swift_release();
      sub_2141DFDD0((uint64_t)&v73);
      a4 = v33;
      *(_QWORD *)(v33 + 24) = v38;
      *(_QWORD *)(v17 + 32) = v39;
      swift_bridgeObjectRelease();
      result = swift_release();
      v8 += 2;
      if (v40 == ++v41)
        return swift_bridgeObjectRelease();
    }
    if (v34)
      goto LABEL_17;
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
  }
  return result;
}

uint64_t sub_21423E67C(uint64_t result, double *a2, unsigned __int8 a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  unsigned __int8 v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  void (*v33)(__int128 *__return_ptr, uint64_t *);
  uint64_t v34;
  unsigned __int8 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  __int16 v60;
  char v61;
  __int16 v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  _OWORD v70[2];
  unint64_t v71;
  char v72;
  __int128 v73;
  __int128 v74;
  unint64_t v75;

  v5 = *(_QWORD *)(result + 16);
  if (v5)
  {
    v7 = a3;
    v37 = a3;
    result = swift_bridgeObjectRetain();
    v9 = 0;
    v35 = v7;
    v36 = result;
    v34 = v5;
    while (v7 <= 1u)
    {
      v13 = *(double *)(result + 8 * v9 + 32);
      v14 = *((_QWORD *)a2 + 18);
      v15 = *((_QWORD *)a2 + 19);
      v16 = *((_QWORD *)a2 + 20);
      a2[18] = v13;
      a2[19] = 0.0;
      *((_QWORD *)a2 + 20) = v37;
      *((_QWORD *)a2 + 21) = v9;
      *((_QWORD *)a2 + 22) = v5;
      sub_21424C914(v14, v15, v16);
      v17 = *(_QWORD *)(a4 + 16);
      v18 = *(_QWORD *)(v17 + 32);
      swift_retain();
      result = sub_21421FA8C(v18, v13);
      v19 = *(_QWORD *)(v17 + 32);
      *(_QWORD *)(v17 + 32) = result;
      v20 = *(_QWORD *)(a4 + 24);
      *(_QWORD *)(a4 + 24) = result;
      *((_QWORD *)a2 + 16) = result;
      v21 = *((_QWORD *)a2 + 20);
      if (*((_BYTE *)a2 + 160) == 0xFF)
        goto LABEL_15;
      v22 = a4;
      v24 = *((_QWORD *)a2 + 18);
      v23 = *((_QWORD *)a2 + 19);
      v39 = *((_QWORD *)a2 + 22);
      v40 = *((_QWORD *)a2 + 21);
      sub_2141DFD94(a5, (uint64_t)v70);
      v41 = v20;
      if (v72)
      {
        if (v72 == 1)
        {
          v33 = *(void (**)(__int128 *__return_ptr, uint64_t *))&v70[0];
          v51 = v24;
          v52 = v23;
          LOBYTE(v53) = v21;
          v54 = v40;
          v55 = v39;
          sub_2141DD14C(v24, v23, v21);
          v33(&v73, &v51);
          swift_release();
        }
        else
        {
          *((_QWORD *)&v74 + 1) = sub_2141D8BF8(&qword_254D698F8);
          v75 = sub_21424C95C();
          v25 = swift_allocObject();
          *(_QWORD *)&v73 = v25;
          LOBYTE(v42) = 2;
          *((_QWORD *)&v42 + 1) = 0;
          *(_QWORD *)&v43 = 0;
          BYTE8(v43) = 1;
          v44 = 0uLL;
          LOBYTE(v45) = 1;
          *((_QWORD *)&v45 + 1) = 0;
          *(_QWORD *)&v46 = 0;
          WORD4(v46) = 0;
          BYTE10(v46) = 1;
          *(_WORD *)((char *)&v46 + 11) = 770;
          *(_QWORD *)&v47 = 0;
          BYTE8(v47) = 1;
          *(_QWORD *)&v48 = 0;
          BYTE8(v48) = 1;
          v49 = 0uLL;
          v50 = 2;
          *(_BYTE *)(v25 + 16) = 2;
          *(_QWORD *)(v25 + 24) = 0;
          *(_BYTE *)(v25 + 32) = -1;
          *(_QWORD *)(v25 + 72) = 0;
          *(_OWORD *)(v25 + 56) = 0u;
          *(_OWORD *)(v25 + 40) = 0u;
          *(_WORD *)(v25 + 80) = 1;
          *(_QWORD *)(v25 + 88) = 0;
          *(_BYTE *)(v25 + 96) = 2;
          *(_QWORD *)(v25 + 104) = 0;
          *(_BYTE *)(v25 + 112) = -1;
          *(_OWORD *)(v25 + 146) = 0u;
          *(_OWORD *)(v25 + 136) = 0u;
          *(_OWORD *)(v25 + 120) = 0u;
          *(_QWORD *)(v25 + 168) = 0;
          v26 = v42;
          v27 = v43;
          v28 = v45;
          *(_OWORD *)(v25 + 208) = v44;
          *(_OWORD *)(v25 + 224) = v28;
          *(_OWORD *)(v25 + 176) = v26;
          *(_OWORD *)(v25 + 192) = v27;
          v29 = v46;
          v30 = v47;
          v31 = v48;
          v32 = v49;
          *(_BYTE *)(v25 + 304) = 2;
          *(_OWORD *)(v25 + 272) = v31;
          *(_OWORD *)(v25 + 288) = v32;
          *(_OWORD *)(v25 + 240) = v29;
          *(_OWORD *)(v25 + 256) = v30;
          LOBYTE(v51) = 2;
          v52 = 0;
          v53 = 0;
          LOBYTE(v54) = 1;
          v55 = 0;
          v56 = 0;
          v57 = 1;
          v58 = 0;
          v59 = 0;
          v60 = 0;
          v61 = 1;
          v62 = 770;
          v63 = 0;
          v64 = 1;
          v65 = 0;
          v66 = 1;
          v67 = 0;
          v68 = 0;
          v69 = 2;
          sub_21424CB94(v24, v23, v21);
          sub_21424CBA8((uint64_t)&v42);
          sub_21424CBEC((uint64_t)&v51);
          swift_bridgeObjectRelease_n();
        }
        sub_21424C914(v24, v23, v21);
      }
      else
      {
        v73 = v70[0];
        v74 = v70[1];
        v75 = v71;
      }
      ++v9;
      v10 = *((_QWORD *)&v74 + 1);
      v11 = v75;
      v12 = sub_2141E88D0(&v73, *((uint64_t *)&v74 + 1));
      swift_retain();
      sub_214422518((uint64_t)v12, (uint64_t)a2, v10, v11);
      swift_release();
      sub_2141DFDD0((uint64_t)&v73);
      a4 = v22;
      *(_QWORD *)(v22 + 24) = v41;
      *(_QWORD *)(v17 + 32) = v19;
      swift_release();
      v5 = v34;
      v7 = v35;
      result = v36;
      if (v34 == v9)
        return swift_bridgeObjectRelease();
    }
    __break(1u);
LABEL_15:
    __break(1u);
  }
  return result;
}

uint64_t sub_21423EA70@<X0>(char **a1@<X0>, uint64_t a2@<X8>)
{
  char *v2;
  char *v3;
  char v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _OWORD v34[8];
  char v35;

  v2 = *a1;
  v3 = a1[1];
  v4 = **a1;
  v5 = *((_QWORD *)*a1 + 1);
  v6 = (*a1)[16];
  v7 = *((_QWORD *)*a1 + 5);
  v8 = (*a1)[64];
  v9 = (*a1)[65];
  v10 = *((_QWORD *)*a1 + 9);
  v11 = *v3;
  v12 = *((_QWORD *)v3 + 1);
  v13 = v3[16];
  v14 = *((_QWORD *)v3 + 5);
  v15 = v3[64];
  v16 = v3[65];
  v17 = *((_QWORD *)v3 + 9);
  v18 = a1[2];
  v19 = *(_OWORD *)(v2 + 24);
  v20 = *((_OWORD *)v2 + 3);
  v21 = *(_OWORD *)(v3 + 24);
  v22 = *((_OWORD *)v3 + 3);
  v34[0] = *(_OWORD *)v18;
  v23 = *((_OWORD *)v18 + 1);
  v24 = *((_OWORD *)v18 + 2);
  v25 = *((_OWORD *)v18 + 4);
  v34[3] = *((_OWORD *)v18 + 3);
  v34[4] = v25;
  v34[1] = v23;
  v34[2] = v24;
  v26 = *((_OWORD *)v18 + 5);
  v27 = *((_OWORD *)v18 + 6);
  v28 = *((_OWORD *)v18 + 7);
  v35 = v18[128];
  v34[6] = v27;
  v34[7] = v28;
  v34[5] = v26;
  v29 = *((_OWORD *)v18 + 7);
  *(_OWORD *)(a2 + 256) = *((_OWORD *)v18 + 6);
  *(_OWORD *)(a2 + 272) = v29;
  *(_BYTE *)(a2 + 288) = v18[128];
  v30 = *((_OWORD *)v18 + 3);
  *(_OWORD *)(a2 + 192) = *((_OWORD *)v18 + 2);
  *(_OWORD *)(a2 + 208) = v30;
  v31 = *((_OWORD *)v18 + 5);
  *(_OWORD *)(a2 + 224) = *((_OWORD *)v18 + 4);
  *(_OWORD *)(a2 + 240) = v31;
  v32 = *((_OWORD *)v18 + 1);
  *(_OWORD *)(a2 + 160) = *(_OWORD *)v18;
  *(_OWORD *)(a2 + 176) = v32;
  *(_BYTE *)a2 = v4;
  *(_QWORD *)(a2 + 8) = v5;
  *(_BYTE *)(a2 + 16) = v6;
  *(_OWORD *)(a2 + 24) = v19;
  *(_QWORD *)(a2 + 40) = v7;
  *(_OWORD *)(a2 + 48) = v20;
  *(_BYTE *)(a2 + 64) = v8;
  *(_BYTE *)(a2 + 65) = v9;
  *(_QWORD *)(a2 + 72) = v10;
  *(_BYTE *)(a2 + 80) = v11;
  *(_QWORD *)(a2 + 88) = v12;
  *(_BYTE *)(a2 + 96) = v13;
  *(_OWORD *)(a2 + 104) = v21;
  *(_QWORD *)(a2 + 120) = v14;
  *(_OWORD *)(a2 + 128) = v22;
  *(_BYTE *)(a2 + 144) = v15;
  *(_BYTE *)(a2 + 145) = v16;
  *(_QWORD *)(a2 + 152) = v17;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return sub_21424CBA8((uint64_t)v34);
}

uint64_t sub_21423EB9C(unint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_21423EE98(a1, a2, a3, &qword_253F15850, (uint64_t)&unk_24D180448, (uint64_t)sub_21424E84C, (void (*)(uint64_t, uint64_t))sub_2141FA1C4);
}

uint64_t sub_21423EBC0(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  char v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE v25[8];

  sub_2141D8BF8(&qword_253F11F38);
  v6 = swift_allocObject();
  *(_BYTE *)(v6 + 40) = 2;
  *(_WORD *)(v6 + 16) = 256;
  *(_QWORD *)(v6 + 48) = 0;
  *(_QWORD *)(v6 + 56) = 0;
  v7 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v6 + 24) = a1;
  *(_QWORD *)(v6 + 32) = v7;
  if (!(a1 >> 62))
  {
    v8 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v8)
      goto LABEL_3;
LABEL_20:
    swift_bridgeObjectRelease();
LABEL_21:
    v22 = swift_allocObject();
    *(_QWORD *)(v22 + 16) = a2;
    *(_QWORD *)(v22 + 24) = a3;
    v23 = *(_QWORD *)(v6 + 48);
    *(_QWORD *)(v6 + 48) = sub_21424C7F0;
    *(_QWORD *)(v6 + 56) = v22;
    sub_2141D972C(v23);
    return v6;
  }
  swift_bridgeObjectRetain();
  result = sub_2144256AC();
  v8 = result;
  if (!result)
    goto LABEL_20;
LABEL_3:
  if (v8 >= 1)
  {
    v24 = a3;
    if ((a1 & 0xC000000000000001) != 0)
    {
      v10 = 0;
      do
      {
        v11 = MEMORY[0x2199CCE3C](v10, a1);
        swift_weakInit();
        v12 = *(_QWORD **)(v11 + 32);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v11 + 32) = v12;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v12 = sub_214221F04(0, v12[2] + 1, 1, v12);
          *(_QWORD *)(v11 + 32) = v12;
        }
        v15 = v12[2];
        v14 = v12[3];
        if (v15 >= v14 >> 1)
        {
          v12 = sub_214221F04((_QWORD *)(v14 > 1), v15 + 1, 1, v12);
          *(_QWORD *)(v11 + 32) = v12;
        }
        ++v10;
        v12[2] = v15 + 1;
        sub_2141E801C((uint64_t)v25, (uint64_t)&v12[v15 + 4], &qword_253F13188);
        swift_unknownObjectRelease();
      }
      while (v8 != v10);
    }
    else
    {
      v16 = 0;
      do
      {
        v17 = *(_QWORD *)(a1 + 8 * v16 + 32);
        swift_weakInit();
        v18 = *(_QWORD **)(v17 + 32);
        swift_retain();
        v19 = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v17 + 32) = v18;
        if ((v19 & 1) == 0)
        {
          v18 = sub_214221F04(0, v18[2] + 1, 1, v18);
          *(_QWORD *)(v17 + 32) = v18;
        }
        v21 = v18[2];
        v20 = v18[3];
        if (v21 >= v20 >> 1)
        {
          v18 = sub_214221F04((_QWORD *)(v20 > 1), v21 + 1, 1, v18);
          *(_QWORD *)(v17 + 32) = v18;
        }
        ++v16;
        v18[2] = v21 + 1;
        sub_2141E801C((uint64_t)v25, (uint64_t)&v18[v21 + 4], &qword_253F13188);
        swift_release();
      }
      while (v8 != v16);
    }
    swift_bridgeObjectRelease();
    a3 = v24;
    goto LABEL_21;
  }
  __break(1u);
  return result;
}

uint64_t sub_21423EE74(unint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_21423EE98(a1, a2, a3, &qword_253F13470, (uint64_t)&unk_24D1801A0, (uint64_t)sub_21424E84C, (void (*)(uint64_t, uint64_t))sub_2141FA1C4);
}

uint64_t sub_21423EE98(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, void (*a7)(uint64_t, uint64_t))
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  char v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t);
  _BYTE v35[8];

  sub_2141D8BF8(a4);
  v12 = swift_allocObject();
  *(_WORD *)(v12 + 16) = 256;
  *(_QWORD *)(v12 + 48) = 0;
  *(_QWORD *)(v12 + 56) = 0;
  *(_QWORD *)(v12 + 40) = 0;
  v13 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v12 + 24) = a1;
  *(_QWORD *)(v12 + 32) = v13;
  if (!(a1 >> 62))
  {
    v14 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v14)
      goto LABEL_3;
LABEL_20:
    swift_bridgeObjectRelease();
LABEL_21:
    v28 = swift_allocObject();
    *(_QWORD *)(v28 + 16) = a2;
    *(_QWORD *)(v28 + 24) = a3;
    v30 = *(_QWORD *)(v12 + 48);
    v29 = *(_QWORD *)(v12 + 56);
    *(_QWORD *)(v12 + 48) = a6;
    *(_QWORD *)(v12 + 56) = v28;
    a7(v30, v29);
    return v12;
  }
  swift_bridgeObjectRetain();
  result = sub_2144256AC();
  v14 = result;
  if (!result)
    goto LABEL_20;
LABEL_3:
  if (v14 >= 1)
  {
    v31 = a2;
    v32 = a3;
    v33 = a6;
    v34 = a7;
    if ((a1 & 0xC000000000000001) != 0)
    {
      v16 = 0;
      do
      {
        v17 = MEMORY[0x2199CCE3C](v16, a1);
        swift_weakInit();
        v18 = *(_QWORD **)(v17 + 32);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v17 + 32) = v18;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v18 = sub_214221F04(0, v18[2] + 1, 1, v18);
          *(_QWORD *)(v17 + 32) = v18;
        }
        v21 = v18[2];
        v20 = v18[3];
        if (v21 >= v20 >> 1)
        {
          v18 = sub_214221F04((_QWORD *)(v20 > 1), v21 + 1, 1, v18);
          *(_QWORD *)(v17 + 32) = v18;
        }
        ++v16;
        v18[2] = v21 + 1;
        sub_2141E801C((uint64_t)v35, (uint64_t)&v18[v21 + 4], &qword_253F13188);
        swift_unknownObjectRelease();
      }
      while (v14 != v16);
    }
    else
    {
      v22 = 0;
      do
      {
        v23 = *(_QWORD *)(a1 + 8 * v22 + 32);
        swift_weakInit();
        v24 = *(_QWORD **)(v23 + 32);
        swift_retain();
        v25 = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v23 + 32) = v24;
        if ((v25 & 1) == 0)
        {
          v24 = sub_214221F04(0, v24[2] + 1, 1, v24);
          *(_QWORD *)(v23 + 32) = v24;
        }
        v27 = v24[2];
        v26 = v24[3];
        if (v27 >= v26 >> 1)
        {
          v24 = sub_214221F04((_QWORD *)(v26 > 1), v27 + 1, 1, v24);
          *(_QWORD *)(v23 + 32) = v24;
        }
        ++v22;
        v24[2] = v27 + 1;
        sub_2141E801C((uint64_t)v35, (uint64_t)&v24[v27 + 4], &qword_253F13188);
        swift_release();
      }
      while (v14 != v22);
    }
    swift_bridgeObjectRelease();
    a6 = v33;
    a7 = v34;
    a2 = v31;
    a3 = v32;
    goto LABEL_21;
  }
  __break(1u);
  return result;
}

uint64_t sub_21423F14C(unint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_21423F4F0(a1, a2, a3, &qword_253F15800, (uint64_t)&unk_24D180420, (uint64_t)sub_21424E84C, (void (*)(uint64_t, uint64_t))sub_2141FA1C4);
}

uint64_t sub_21423F170(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  char v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE v25[8];
  _OWORD v26[8];

  sub_2141D8BF8(&qword_254D69950);
  v6 = swift_allocObject();
  sub_21424E4E4(v26);
  sub_2141E801C((uint64_t)v26, v6 + 40, &qword_254D69958);
  *(_WORD *)(v6 + 16) = 256;
  *(_QWORD *)(v6 + 168) = 0;
  *(_QWORD *)(v6 + 176) = 0;
  v7 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v6 + 24) = a1;
  *(_QWORD *)(v6 + 32) = v7;
  if (!(a1 >> 62))
  {
    v8 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v8)
      goto LABEL_3;
LABEL_20:
    swift_bridgeObjectRelease();
LABEL_21:
    v22 = swift_allocObject();
    *(_QWORD *)(v22 + 16) = a2;
    *(_QWORD *)(v22 + 24) = a3;
    v23 = *(_QWORD *)(v6 + 168);
    *(_QWORD *)(v6 + 168) = sub_21424E84C;
    *(_QWORD *)(v6 + 176) = v22;
    sub_2141D972C(v23);
    return v6;
  }
  swift_bridgeObjectRetain();
  result = sub_2144256AC();
  v8 = result;
  if (!result)
    goto LABEL_20;
LABEL_3:
  if (v8 >= 1)
  {
    v24 = a3;
    if ((a1 & 0xC000000000000001) != 0)
    {
      v10 = 0;
      do
      {
        v11 = MEMORY[0x2199CCE3C](v10, a1);
        swift_weakInit();
        v12 = *(_QWORD **)(v11 + 32);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v11 + 32) = v12;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v12 = sub_214221F04(0, v12[2] + 1, 1, v12);
          *(_QWORD *)(v11 + 32) = v12;
        }
        v15 = v12[2];
        v14 = v12[3];
        if (v15 >= v14 >> 1)
        {
          v12 = sub_214221F04((_QWORD *)(v14 > 1), v15 + 1, 1, v12);
          *(_QWORD *)(v11 + 32) = v12;
        }
        ++v10;
        v12[2] = v15 + 1;
        sub_2141E801C((uint64_t)v25, (uint64_t)&v12[v15 + 4], &qword_253F13188);
        swift_unknownObjectRelease();
      }
      while (v8 != v10);
    }
    else
    {
      v16 = 0;
      do
      {
        v17 = *(_QWORD *)(a1 + 8 * v16 + 32);
        swift_weakInit();
        v18 = *(_QWORD **)(v17 + 32);
        swift_retain();
        v19 = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v17 + 32) = v18;
        if ((v19 & 1) == 0)
        {
          v18 = sub_214221F04(0, v18[2] + 1, 1, v18);
          *(_QWORD *)(v17 + 32) = v18;
        }
        v21 = v18[2];
        v20 = v18[3];
        if (v21 >= v20 >> 1)
        {
          v18 = sub_214221F04((_QWORD *)(v20 > 1), v21 + 1, 1, v18);
          *(_QWORD *)(v17 + 32) = v18;
        }
        ++v16;
        v18[2] = v21 + 1;
        sub_2141E801C((uint64_t)v25, (uint64_t)&v18[v21 + 4], &qword_253F13188);
        swift_release();
      }
      while (v8 != v16);
    }
    swift_bridgeObjectRelease();
    a3 = v24;
    goto LABEL_21;
  }
  __break(1u);
  return result;
}

uint64_t sub_21423F43C(unint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_21423FAD4(a1, a2, a3, &qword_253F10580, (uint64_t)&unk_24D1803D0, (uint64_t)sub_21424E84C, (void (*)(uint64_t, uint64_t))sub_2141FA1C4);
}

uint64_t sub_21423F460(unint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_21423EE98(a1, a2, a3, &qword_254D69938, (uint64_t)&unk_24D1803A8, (uint64_t)sub_21424E84C, (void (*)(uint64_t, uint64_t))sub_2141FA1C4);
}

uint64_t sub_21423F484(unint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_21423EE98(a1, a2, a3, &qword_254D69928, (uint64_t)&unk_24D180330, (uint64_t)sub_21424C7F0, (void (*)(uint64_t, uint64_t))sub_2141FA1C4);
}

uint64_t sub_21423F4A8(unint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_21423EE98(a1, a2, a3, &qword_253F103A8, (uint64_t)&unk_24D1802E0, (uint64_t)sub_21424E84C, (void (*)(uint64_t, uint64_t))sub_2141FA1C4);
}

uint64_t sub_21423F4CC(unint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_21423F4F0(a1, a2, a3, &qword_254D69910, (uint64_t)&unk_24D180218, (uint64_t)sub_21424C7F0, (void (*)(uint64_t, uint64_t))sub_2141FA1C4);
}

uint64_t sub_21423F4F0(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, void (*a7)(uint64_t, uint64_t))
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  char v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t);
  _BYTE v35[8];

  sub_2141D8BF8(a4);
  v12 = swift_allocObject();
  *(_WORD *)(v12 + 16) = 256;
  *(_OWORD *)(v12 + 40) = 0u;
  *(_OWORD *)(v12 + 56) = 0u;
  *(_OWORD *)(v12 + 72) = 0u;
  *(_OWORD *)(v12 + 88) = 0u;
  *(_OWORD *)(v12 + 104) = 0u;
  *(_OWORD *)(v12 + 120) = 0u;
  *(_OWORD *)(v12 + 136) = 0u;
  *(_QWORD *)(v12 + 152) = 0;
  v13 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v12 + 24) = a1;
  *(_QWORD *)(v12 + 32) = v13;
  if (!(a1 >> 62))
  {
    v14 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v14)
      goto LABEL_3;
LABEL_20:
    swift_bridgeObjectRelease();
LABEL_21:
    v28 = swift_allocObject();
    *(_QWORD *)(v28 + 16) = a2;
    *(_QWORD *)(v28 + 24) = a3;
    v30 = *(_QWORD *)(v12 + 144);
    v29 = *(_QWORD *)(v12 + 152);
    *(_QWORD *)(v12 + 144) = a6;
    *(_QWORD *)(v12 + 152) = v28;
    a7(v30, v29);
    return v12;
  }
  swift_bridgeObjectRetain();
  result = sub_2144256AC();
  v14 = result;
  if (!result)
    goto LABEL_20;
LABEL_3:
  if (v14 >= 1)
  {
    v31 = a2;
    v32 = a3;
    v33 = a6;
    v34 = a7;
    if ((a1 & 0xC000000000000001) != 0)
    {
      v16 = 0;
      do
      {
        v17 = MEMORY[0x2199CCE3C](v16, a1);
        swift_weakInit();
        v18 = *(_QWORD **)(v17 + 32);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v17 + 32) = v18;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v18 = sub_214221F04(0, v18[2] + 1, 1, v18);
          *(_QWORD *)(v17 + 32) = v18;
        }
        v21 = v18[2];
        v20 = v18[3];
        if (v21 >= v20 >> 1)
        {
          v18 = sub_214221F04((_QWORD *)(v20 > 1), v21 + 1, 1, v18);
          *(_QWORD *)(v17 + 32) = v18;
        }
        ++v16;
        v18[2] = v21 + 1;
        sub_2141E801C((uint64_t)v35, (uint64_t)&v18[v21 + 4], &qword_253F13188);
        swift_unknownObjectRelease();
      }
      while (v14 != v16);
    }
    else
    {
      v22 = 0;
      do
      {
        v23 = *(_QWORD *)(a1 + 8 * v22 + 32);
        swift_weakInit();
        v24 = *(_QWORD **)(v23 + 32);
        swift_retain();
        v25 = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v23 + 32) = v24;
        if ((v25 & 1) == 0)
        {
          v24 = sub_214221F04(0, v24[2] + 1, 1, v24);
          *(_QWORD *)(v23 + 32) = v24;
        }
        v27 = v24[2];
        v26 = v24[3];
        if (v27 >= v26 >> 1)
        {
          v24 = sub_214221F04((_QWORD *)(v26 > 1), v27 + 1, 1, v24);
          *(_QWORD *)(v23 + 32) = v24;
        }
        ++v22;
        v24[2] = v27 + 1;
        sub_2141E801C((uint64_t)v35, (uint64_t)&v24[v27 + 4], &qword_253F13188);
        swift_release();
      }
      while (v14 != v22);
    }
    swift_bridgeObjectRelease();
    a6 = v33;
    a7 = v34;
    a2 = v31;
    a3 = v32;
    goto LABEL_21;
  }
  __break(1u);
  return result;
}

uint64_t sub_21423F7C0(unint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_21423F4F0(a1, a2, a3, &qword_253F10570, (uint64_t)&unk_24D181050, (uint64_t)sub_21424E84C, (void (*)(uint64_t, uint64_t))sub_2141FA1C4);
}

uint64_t sub_21423F7E4(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  char v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE v25[8];
  _OWORD v26[8];

  sub_2141D8BF8(&qword_254D69980);
  v6 = swift_allocObject();
  sub_21424E4E4(v26);
  sub_2141E801C((uint64_t)v26, v6 + 40, &qword_253F12F50);
  *(_WORD *)(v6 + 16) = 256;
  *(_QWORD *)(v6 + 168) = 0;
  *(_QWORD *)(v6 + 176) = 0;
  v7 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v6 + 24) = a1;
  *(_QWORD *)(v6 + 32) = v7;
  if (!(a1 >> 62))
  {
    v8 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v8)
      goto LABEL_3;
LABEL_20:
    swift_bridgeObjectRelease();
LABEL_21:
    v22 = swift_allocObject();
    *(_QWORD *)(v22 + 16) = a2;
    *(_QWORD *)(v22 + 24) = a3;
    v23 = *(_QWORD *)(v6 + 168);
    *(_QWORD *)(v6 + 168) = sub_21424C7F0;
    *(_QWORD *)(v6 + 176) = v22;
    sub_2141D972C(v23);
    return v6;
  }
  swift_bridgeObjectRetain();
  result = sub_2144256AC();
  v8 = result;
  if (!result)
    goto LABEL_20;
LABEL_3:
  if (v8 >= 1)
  {
    v24 = a3;
    if ((a1 & 0xC000000000000001) != 0)
    {
      v10 = 0;
      do
      {
        v11 = MEMORY[0x2199CCE3C](v10, a1);
        swift_weakInit();
        v12 = *(_QWORD **)(v11 + 32);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v11 + 32) = v12;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v12 = sub_214221F04(0, v12[2] + 1, 1, v12);
          *(_QWORD *)(v11 + 32) = v12;
        }
        v15 = v12[2];
        v14 = v12[3];
        if (v15 >= v14 >> 1)
        {
          v12 = sub_214221F04((_QWORD *)(v14 > 1), v15 + 1, 1, v12);
          *(_QWORD *)(v11 + 32) = v12;
        }
        ++v10;
        v12[2] = v15 + 1;
        sub_2141E801C((uint64_t)v25, (uint64_t)&v12[v15 + 4], &qword_253F13188);
        swift_unknownObjectRelease();
      }
      while (v8 != v10);
    }
    else
    {
      v16 = 0;
      do
      {
        v17 = *(_QWORD *)(a1 + 8 * v16 + 32);
        swift_weakInit();
        v18 = *(_QWORD **)(v17 + 32);
        swift_retain();
        v19 = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v17 + 32) = v18;
        if ((v19 & 1) == 0)
        {
          v18 = sub_214221F04(0, v18[2] + 1, 1, v18);
          *(_QWORD *)(v17 + 32) = v18;
        }
        v21 = v18[2];
        v20 = v18[3];
        if (v21 >= v20 >> 1)
        {
          v18 = sub_214221F04((_QWORD *)(v20 > 1), v21 + 1, 1, v18);
          *(_QWORD *)(v17 + 32) = v18;
        }
        ++v16;
        v18[2] = v21 + 1;
        sub_2141E801C((uint64_t)v25, (uint64_t)&v18[v21 + 4], &qword_253F13188);
        swift_release();
      }
      while (v8 != v16);
    }
    swift_bridgeObjectRelease();
    a3 = v24;
    goto LABEL_21;
  }
  __break(1u);
  return result;
}

uint64_t sub_21423FAB0(unint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_21423FAD4(a1, a2, a3, &qword_253F10578, (uint64_t)&unk_24D181000, (uint64_t)sub_21424C7F0, (void (*)(uint64_t, uint64_t))sub_2141FA1C4);
}

uint64_t sub_21423FAD4(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, void (*a7)(uint64_t, uint64_t))
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  char v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t);
  _BYTE v35[8];

  sub_2141D8BF8(a4);
  v12 = swift_allocObject();
  *(_WORD *)(v12 + 16) = 256;
  *(_OWORD *)(v12 + 40) = 0u;
  *(_OWORD *)(v12 + 56) = 0u;
  *(_OWORD *)(v12 + 72) = 0u;
  *(_OWORD *)(v12 + 88) = 0u;
  *(_OWORD *)(v12 + 104) = 0u;
  *(_OWORD *)(v12 + 120) = 0u;
  *(_OWORD *)(v12 + 136) = 0u;
  v13 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v12 + 24) = a1;
  *(_QWORD *)(v12 + 32) = v13;
  if (!(a1 >> 62))
  {
    v14 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v14)
      goto LABEL_3;
LABEL_20:
    swift_bridgeObjectRelease();
LABEL_21:
    v28 = swift_allocObject();
    *(_QWORD *)(v28 + 16) = a2;
    *(_QWORD *)(v28 + 24) = a3;
    v30 = *(_QWORD *)(v12 + 136);
    v29 = *(_QWORD *)(v12 + 144);
    *(_QWORD *)(v12 + 136) = a6;
    *(_QWORD *)(v12 + 144) = v28;
    a7(v30, v29);
    return v12;
  }
  swift_bridgeObjectRetain();
  result = sub_2144256AC();
  v14 = result;
  if (!result)
    goto LABEL_20;
LABEL_3:
  if (v14 >= 1)
  {
    v31 = a2;
    v32 = a3;
    v33 = a6;
    v34 = a7;
    if ((a1 & 0xC000000000000001) != 0)
    {
      v16 = 0;
      do
      {
        v17 = MEMORY[0x2199CCE3C](v16, a1);
        swift_weakInit();
        v18 = *(_QWORD **)(v17 + 32);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v17 + 32) = v18;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v18 = sub_214221F04(0, v18[2] + 1, 1, v18);
          *(_QWORD *)(v17 + 32) = v18;
        }
        v21 = v18[2];
        v20 = v18[3];
        if (v21 >= v20 >> 1)
        {
          v18 = sub_214221F04((_QWORD *)(v20 > 1), v21 + 1, 1, v18);
          *(_QWORD *)(v17 + 32) = v18;
        }
        ++v16;
        v18[2] = v21 + 1;
        sub_2141E801C((uint64_t)v35, (uint64_t)&v18[v21 + 4], &qword_253F13188);
        swift_unknownObjectRelease();
      }
      while (v14 != v16);
    }
    else
    {
      v22 = 0;
      do
      {
        v23 = *(_QWORD *)(a1 + 8 * v22 + 32);
        swift_weakInit();
        v24 = *(_QWORD **)(v23 + 32);
        swift_retain();
        v25 = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v23 + 32) = v24;
        if ((v25 & 1) == 0)
        {
          v24 = sub_214221F04(0, v24[2] + 1, 1, v24);
          *(_QWORD *)(v23 + 32) = v24;
        }
        v27 = v24[2];
        v26 = v24[3];
        if (v27 >= v26 >> 1)
        {
          v24 = sub_214221F04((_QWORD *)(v26 > 1), v27 + 1, 1, v24);
          *(_QWORD *)(v23 + 32) = v24;
        }
        ++v22;
        v24[2] = v27 + 1;
        sub_2141E801C((uint64_t)v35, (uint64_t)&v24[v27 + 4], &qword_253F13188);
        swift_release();
      }
      while (v14 != v22);
    }
    swift_bridgeObjectRelease();
    a6 = v33;
    a7 = v34;
    a2 = v31;
    a3 = v32;
    goto LABEL_21;
  }
  __break(1u);
  return result;
}

uint64_t sub_21423FDA0(unint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_21423EE98(a1, a2, a3, &qword_254D699A8, (uint64_t)&unk_24D180FD8, (uint64_t)sub_21424E84C, (void (*)(uint64_t, uint64_t))sub_2141FA1C4);
}

uint64_t sub_21423FDC4(unint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_21423F4F0(a1, a2, a3, &qword_254D699A0, (uint64_t)&unk_24D180F60, (uint64_t)sub_21424E84C, (void (*)(uint64_t, uint64_t))sub_2141FA1C4);
}

uint64_t sub_21423FDE8(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  char v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE v25[8];

  sub_2141D8BF8(&qword_253F10F88);
  v6 = swift_allocObject();
  *(_BYTE *)(v6 + 40) = 4;
  *(_WORD *)(v6 + 16) = 256;
  *(_QWORD *)(v6 + 48) = 0;
  *(_QWORD *)(v6 + 56) = 0;
  v7 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v6 + 24) = a1;
  *(_QWORD *)(v6 + 32) = v7;
  if (!(a1 >> 62))
  {
    v8 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v8)
      goto LABEL_3;
LABEL_20:
    swift_bridgeObjectRelease();
LABEL_21:
    v22 = swift_allocObject();
    *(_QWORD *)(v22 + 16) = a2;
    *(_QWORD *)(v22 + 24) = a3;
    v23 = *(_QWORD *)(v6 + 48);
    *(_QWORD *)(v6 + 48) = sub_21424E84C;
    *(_QWORD *)(v6 + 56) = v22;
    sub_2141D972C(v23);
    return v6;
  }
  swift_bridgeObjectRetain();
  result = sub_2144256AC();
  v8 = result;
  if (!result)
    goto LABEL_20;
LABEL_3:
  if (v8 >= 1)
  {
    v24 = a3;
    if ((a1 & 0xC000000000000001) != 0)
    {
      v10 = 0;
      do
      {
        v11 = MEMORY[0x2199CCE3C](v10, a1);
        swift_weakInit();
        v12 = *(_QWORD **)(v11 + 32);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v11 + 32) = v12;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v12 = sub_214221F04(0, v12[2] + 1, 1, v12);
          *(_QWORD *)(v11 + 32) = v12;
        }
        v15 = v12[2];
        v14 = v12[3];
        if (v15 >= v14 >> 1)
        {
          v12 = sub_214221F04((_QWORD *)(v14 > 1), v15 + 1, 1, v12);
          *(_QWORD *)(v11 + 32) = v12;
        }
        ++v10;
        v12[2] = v15 + 1;
        sub_2141E801C((uint64_t)v25, (uint64_t)&v12[v15 + 4], &qword_253F13188);
        swift_unknownObjectRelease();
      }
      while (v8 != v10);
    }
    else
    {
      v16 = 0;
      do
      {
        v17 = *(_QWORD *)(a1 + 8 * v16 + 32);
        swift_weakInit();
        v18 = *(_QWORD **)(v17 + 32);
        swift_retain();
        v19 = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v17 + 32) = v18;
        if ((v19 & 1) == 0)
        {
          v18 = sub_214221F04(0, v18[2] + 1, 1, v18);
          *(_QWORD *)(v17 + 32) = v18;
        }
        v21 = v18[2];
        v20 = v18[3];
        if (v21 >= v20 >> 1)
        {
          v18 = sub_214221F04((_QWORD *)(v20 > 1), v21 + 1, 1, v18);
          *(_QWORD *)(v17 + 32) = v18;
        }
        ++v16;
        v18[2] = v21 + 1;
        sub_2141E801C((uint64_t)v25, (uint64_t)&v18[v21 + 4], &qword_253F13188);
        swift_release();
      }
      while (v8 != v16);
    }
    swift_bridgeObjectRelease();
    a3 = v24;
    goto LABEL_21;
  }
  __break(1u);
  return result;
}

uint64_t sub_21424009C(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  char v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE v25[8];

  sub_2141D8BF8(&qword_253F11A70);
  v6 = swift_allocObject();
  *(_BYTE *)(v6 + 40) = 3;
  *(_WORD *)(v6 + 16) = 256;
  *(_QWORD *)(v6 + 48) = 0;
  *(_QWORD *)(v6 + 56) = 0;
  v7 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v6 + 24) = a1;
  *(_QWORD *)(v6 + 32) = v7;
  if (!(a1 >> 62))
  {
    v8 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v8)
      goto LABEL_3;
LABEL_20:
    swift_bridgeObjectRelease();
LABEL_21:
    v22 = swift_allocObject();
    *(_QWORD *)(v22 + 16) = a2;
    *(_QWORD *)(v22 + 24) = a3;
    v23 = *(_QWORD *)(v6 + 48);
    *(_QWORD *)(v6 + 48) = sub_21424C7F0;
    *(_QWORD *)(v6 + 56) = v22;
    sub_2141D972C(v23);
    return v6;
  }
  swift_bridgeObjectRetain();
  result = sub_2144256AC();
  v8 = result;
  if (!result)
    goto LABEL_20;
LABEL_3:
  if (v8 >= 1)
  {
    v24 = a3;
    if ((a1 & 0xC000000000000001) != 0)
    {
      v10 = 0;
      do
      {
        v11 = MEMORY[0x2199CCE3C](v10, a1);
        swift_weakInit();
        v12 = *(_QWORD **)(v11 + 32);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v11 + 32) = v12;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v12 = sub_214221F04(0, v12[2] + 1, 1, v12);
          *(_QWORD *)(v11 + 32) = v12;
        }
        v15 = v12[2];
        v14 = v12[3];
        if (v15 >= v14 >> 1)
        {
          v12 = sub_214221F04((_QWORD *)(v14 > 1), v15 + 1, 1, v12);
          *(_QWORD *)(v11 + 32) = v12;
        }
        ++v10;
        v12[2] = v15 + 1;
        sub_2141E801C((uint64_t)v25, (uint64_t)&v12[v15 + 4], &qword_253F13188);
        swift_unknownObjectRelease();
      }
      while (v8 != v10);
    }
    else
    {
      v16 = 0;
      do
      {
        v17 = *(_QWORD *)(a1 + 8 * v16 + 32);
        swift_weakInit();
        v18 = *(_QWORD **)(v17 + 32);
        swift_retain();
        v19 = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v17 + 32) = v18;
        if ((v19 & 1) == 0)
        {
          v18 = sub_214221F04(0, v18[2] + 1, 1, v18);
          *(_QWORD *)(v17 + 32) = v18;
        }
        v21 = v18[2];
        v20 = v18[3];
        if (v21 >= v20 >> 1)
        {
          v18 = sub_214221F04((_QWORD *)(v20 > 1), v21 + 1, 1, v18);
          *(_QWORD *)(v17 + 32) = v18;
        }
        ++v16;
        v18[2] = v21 + 1;
        sub_2141E801C((uint64_t)v25, (uint64_t)&v18[v21 + 4], &qword_253F13188);
        swift_release();
      }
      while (v8 != v16);
    }
    swift_bridgeObjectRelease();
    a3 = v24;
    goto LABEL_21;
  }
  __break(1u);
  return result;
}

uint64_t sub_214240350(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  char v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE v25[8];

  sub_2141D8BF8(&qword_253F15840);
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 40) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_BYTE *)(v6 + 72) = 1;
  *(_WORD *)(v6 + 16) = 256;
  *(_QWORD *)(v6 + 80) = 0;
  *(_QWORD *)(v6 + 88) = 0;
  v7 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v6 + 24) = a1;
  *(_QWORD *)(v6 + 32) = v7;
  if (!(a1 >> 62))
  {
    v8 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v8)
      goto LABEL_3;
LABEL_20:
    swift_bridgeObjectRelease();
LABEL_21:
    v22 = swift_allocObject();
    *(_QWORD *)(v22 + 16) = a2;
    *(_QWORD *)(v22 + 24) = a3;
    v23 = *(_QWORD *)(v6 + 80);
    *(_QWORD *)(v6 + 80) = sub_21424C7F0;
    *(_QWORD *)(v6 + 88) = v22;
    sub_2141D972C(v23);
    return v6;
  }
  swift_bridgeObjectRetain();
  result = sub_2144256AC();
  v8 = result;
  if (!result)
    goto LABEL_20;
LABEL_3:
  if (v8 >= 1)
  {
    v24 = a3;
    if ((a1 & 0xC000000000000001) != 0)
    {
      v10 = 0;
      do
      {
        v11 = MEMORY[0x2199CCE3C](v10, a1);
        swift_weakInit();
        v12 = *(_QWORD **)(v11 + 32);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v11 + 32) = v12;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v12 = sub_214221F04(0, v12[2] + 1, 1, v12);
          *(_QWORD *)(v11 + 32) = v12;
        }
        v15 = v12[2];
        v14 = v12[3];
        if (v15 >= v14 >> 1)
        {
          v12 = sub_214221F04((_QWORD *)(v14 > 1), v15 + 1, 1, v12);
          *(_QWORD *)(v11 + 32) = v12;
        }
        ++v10;
        v12[2] = v15 + 1;
        sub_2141E801C((uint64_t)v25, (uint64_t)&v12[v15 + 4], &qword_253F13188);
        swift_unknownObjectRelease();
      }
      while (v8 != v10);
    }
    else
    {
      v16 = 0;
      do
      {
        v17 = *(_QWORD *)(a1 + 8 * v16 + 32);
        swift_weakInit();
        v18 = *(_QWORD **)(v17 + 32);
        swift_retain();
        v19 = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v17 + 32) = v18;
        if ((v19 & 1) == 0)
        {
          v18 = sub_214221F04(0, v18[2] + 1, 1, v18);
          *(_QWORD *)(v17 + 32) = v18;
        }
        v21 = v18[2];
        v20 = v18[3];
        if (v21 >= v20 >> 1)
        {
          v18 = sub_214221F04((_QWORD *)(v20 > 1), v21 + 1, 1, v18);
          *(_QWORD *)(v17 + 32) = v18;
        }
        ++v16;
        v18[2] = v21 + 1;
        sub_2141E801C((uint64_t)v25, (uint64_t)&v18[v21 + 4], &qword_253F13188);
        swift_release();
      }
      while (v8 != v16);
    }
    swift_bridgeObjectRelease();
    a3 = v24;
    goto LABEL_21;
  }
  __break(1u);
  return result;
}

uint64_t sub_214240610(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  char v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE v25[8];

  sub_2141D8BF8(&qword_253F15838);
  v6 = swift_allocObject();
  *(_WORD *)(v6 + 16) = 256;
  *(_QWORD *)(v6 + 48) = 0;
  *(_QWORD *)(v6 + 56) = 0;
  *(_QWORD *)(v6 + 40) = 0xF000000000000007;
  v7 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v6 + 24) = a1;
  *(_QWORD *)(v6 + 32) = v7;
  if (!(a1 >> 62))
  {
    v8 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v8)
      goto LABEL_3;
LABEL_20:
    swift_bridgeObjectRelease();
LABEL_21:
    v22 = swift_allocObject();
    *(_QWORD *)(v22 + 16) = a2;
    *(_QWORD *)(v22 + 24) = a3;
    v23 = *(_QWORD *)(v6 + 48);
    *(_QWORD *)(v6 + 48) = sub_21424E84C;
    *(_QWORD *)(v6 + 56) = v22;
    sub_2141D972C(v23);
    return v6;
  }
  swift_bridgeObjectRetain();
  result = sub_2144256AC();
  v8 = result;
  if (!result)
    goto LABEL_20;
LABEL_3:
  if (v8 >= 1)
  {
    v24 = a3;
    if ((a1 & 0xC000000000000001) != 0)
    {
      v10 = 0;
      do
      {
        v11 = MEMORY[0x2199CCE3C](v10, a1);
        swift_weakInit();
        v12 = *(_QWORD **)(v11 + 32);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v11 + 32) = v12;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v12 = sub_214221F04(0, v12[2] + 1, 1, v12);
          *(_QWORD *)(v11 + 32) = v12;
        }
        v15 = v12[2];
        v14 = v12[3];
        if (v15 >= v14 >> 1)
        {
          v12 = sub_214221F04((_QWORD *)(v14 > 1), v15 + 1, 1, v12);
          *(_QWORD *)(v11 + 32) = v12;
        }
        ++v10;
        v12[2] = v15 + 1;
        sub_2141E801C((uint64_t)v25, (uint64_t)&v12[v15 + 4], &qword_253F13188);
        swift_unknownObjectRelease();
      }
      while (v8 != v10);
    }
    else
    {
      v16 = 0;
      do
      {
        v17 = *(_QWORD *)(a1 + 8 * v16 + 32);
        swift_weakInit();
        v18 = *(_QWORD **)(v17 + 32);
        swift_retain();
        v19 = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v17 + 32) = v18;
        if ((v19 & 1) == 0)
        {
          v18 = sub_214221F04(0, v18[2] + 1, 1, v18);
          *(_QWORD *)(v17 + 32) = v18;
        }
        v21 = v18[2];
        v20 = v18[3];
        if (v21 >= v20 >> 1)
        {
          v18 = sub_214221F04((_QWORD *)(v20 > 1), v21 + 1, 1, v18);
          *(_QWORD *)(v17 + 32) = v18;
        }
        ++v16;
        v18[2] = v21 + 1;
        sub_2141E801C((uint64_t)v25, (uint64_t)&v18[v21 + 4], &qword_253F13188);
        swift_release();
      }
      while (v8 != v16);
    }
    swift_bridgeObjectRelease();
    a3 = v24;
    goto LABEL_21;
  }
  __break(1u);
  return result;
}

uint64_t sub_2142408C4(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  char v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE v25[8];

  sub_2141D8BF8(&qword_253F157F8);
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 40) = 0;
  *(_BYTE *)(v6 + 48) = 1;
  *(_WORD *)(v6 + 16) = 256;
  *(_QWORD *)(v6 + 56) = 0;
  *(_QWORD *)(v6 + 64) = 0;
  v7 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v6 + 24) = a1;
  *(_QWORD *)(v6 + 32) = v7;
  if (!(a1 >> 62))
  {
    v8 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v8)
      goto LABEL_3;
LABEL_20:
    swift_bridgeObjectRelease();
LABEL_21:
    v22 = swift_allocObject();
    *(_QWORD *)(v22 + 16) = a2;
    *(_QWORD *)(v22 + 24) = a3;
    v23 = *(_QWORD *)(v6 + 56);
    *(_QWORD *)(v6 + 56) = sub_21424C7F0;
    *(_QWORD *)(v6 + 64) = v22;
    sub_2141D972C(v23);
    return v6;
  }
  swift_bridgeObjectRetain();
  result = sub_2144256AC();
  v8 = result;
  if (!result)
    goto LABEL_20;
LABEL_3:
  if (v8 >= 1)
  {
    v24 = a3;
    if ((a1 & 0xC000000000000001) != 0)
    {
      v10 = 0;
      do
      {
        v11 = MEMORY[0x2199CCE3C](v10, a1);
        swift_weakInit();
        v12 = *(_QWORD **)(v11 + 32);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v11 + 32) = v12;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v12 = sub_214221F04(0, v12[2] + 1, 1, v12);
          *(_QWORD *)(v11 + 32) = v12;
        }
        v15 = v12[2];
        v14 = v12[3];
        if (v15 >= v14 >> 1)
        {
          v12 = sub_214221F04((_QWORD *)(v14 > 1), v15 + 1, 1, v12);
          *(_QWORD *)(v11 + 32) = v12;
        }
        ++v10;
        v12[2] = v15 + 1;
        sub_2141E801C((uint64_t)v25, (uint64_t)&v12[v15 + 4], &qword_253F13188);
        swift_unknownObjectRelease();
      }
      while (v8 != v10);
    }
    else
    {
      v16 = 0;
      do
      {
        v17 = *(_QWORD *)(a1 + 8 * v16 + 32);
        swift_weakInit();
        v18 = *(_QWORD **)(v17 + 32);
        swift_retain();
        v19 = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v17 + 32) = v18;
        if ((v19 & 1) == 0)
        {
          v18 = sub_214221F04(0, v18[2] + 1, 1, v18);
          *(_QWORD *)(v17 + 32) = v18;
        }
        v21 = v18[2];
        v20 = v18[3];
        if (v21 >= v20 >> 1)
        {
          v18 = sub_214221F04((_QWORD *)(v20 > 1), v21 + 1, 1, v18);
          *(_QWORD *)(v17 + 32) = v18;
        }
        ++v16;
        v18[2] = v21 + 1;
        sub_2141E801C((uint64_t)v25, (uint64_t)&v18[v21 + 4], &qword_253F13188);
        swift_release();
      }
      while (v8 != v16);
    }
    swift_bridgeObjectRelease();
    a3 = v24;
    goto LABEL_21;
  }
  __break(1u);
  return result;
}

