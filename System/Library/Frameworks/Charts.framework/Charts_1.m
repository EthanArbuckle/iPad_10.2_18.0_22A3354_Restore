uint64_t sub_214240B7C(unint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_214240BC4(a1, a2, a3, &qword_254D69988, (uint64_t)&unk_24D180650, (uint64_t)sub_21424E84C, (void (*)(uint64_t, uint64_t))sub_2141FA1C4);
}

uint64_t sub_214240BA0(unint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_214240BC4(a1, a2, a3, &qword_254D69990, (uint64_t)&unk_24D180678, (uint64_t)sub_21424E84C, (void (*)(uint64_t, uint64_t))sub_2141FA1C4);
}

uint64_t sub_214240BC4(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, void (*a7)(uint64_t, uint64_t))
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  char v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t);
  _BYTE v35[8];

  sub_2141D8BF8(a4);
  v12 = swift_allocObject();
  *(_WORD *)(v12 + 16) = 256;
  *(_QWORD *)(v12 + 40) = 1;
  *(_QWORD *)(v12 + 48) = 0;
  *(_QWORD *)(v12 + 56) = 0;
  *(_QWORD *)(v12 + 64) = 0;
  v13 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v12 + 24) = a1;
  *(_QWORD *)(v12 + 32) = v13;
  if (!(a1 >> 62))
  {
    v14 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v14)
      goto LABEL_3;
LABEL_20:
    swift_bridgeObjectRelease();
LABEL_21:
    v28 = swift_allocObject();
    *(_QWORD *)(v28 + 16) = a2;
    *(_QWORD *)(v28 + 24) = a3;
    v30 = *(_QWORD *)(v12 + 56);
    v29 = *(_QWORD *)(v12 + 64);
    *(_QWORD *)(v12 + 56) = a6;
    *(_QWORD *)(v12 + 64) = v28;
    a7(v30, v29);
    return v12;
  }
  swift_bridgeObjectRetain();
  result = sub_2144256AC();
  v14 = result;
  if (!result)
    goto LABEL_20;
LABEL_3:
  if (v14 >= 1)
  {
    v31 = a2;
    v32 = a3;
    v33 = a6;
    v34 = a7;
    if ((a1 & 0xC000000000000001) != 0)
    {
      v16 = 0;
      do
      {
        v17 = MEMORY[0x2199CCE3C](v16, a1);
        swift_weakInit();
        v18 = *(_QWORD **)(v17 + 32);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v17 + 32) = v18;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v18 = sub_214221F04(0, v18[2] + 1, 1, v18);
          *(_QWORD *)(v17 + 32) = v18;
        }
        v21 = v18[2];
        v20 = v18[3];
        if (v21 >= v20 >> 1)
        {
          v18 = sub_214221F04((_QWORD *)(v20 > 1), v21 + 1, 1, v18);
          *(_QWORD *)(v17 + 32) = v18;
        }
        ++v16;
        v18[2] = v21 + 1;
        sub_2141E801C((uint64_t)v35, (uint64_t)&v18[v21 + 4], &qword_253F13188);
        swift_unknownObjectRelease();
      }
      while (v14 != v16);
    }
    else
    {
      v22 = 0;
      do
      {
        v23 = *(_QWORD *)(a1 + 8 * v22 + 32);
        swift_weakInit();
        v24 = *(_QWORD **)(v23 + 32);
        swift_retain();
        v25 = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v23 + 32) = v24;
        if ((v25 & 1) == 0)
        {
          v24 = sub_214221F04(0, v24[2] + 1, 1, v24);
          *(_QWORD *)(v23 + 32) = v24;
        }
        v27 = v24[2];
        v26 = v24[3];
        if (v27 >= v26 >> 1)
        {
          v24 = sub_214221F04((_QWORD *)(v26 > 1), v27 + 1, 1, v24);
          *(_QWORD *)(v23 + 32) = v24;
        }
        ++v22;
        v24[2] = v27 + 1;
        sub_2141E801C((uint64_t)v35, (uint64_t)&v24[v27 + 4], &qword_253F13188);
        swift_release();
      }
      while (v14 != v22);
    }
    swift_bridgeObjectRelease();
    a6 = v33;
    a7 = v34;
    a2 = v31;
    a3 = v32;
    goto LABEL_21;
  }
  __break(1u);
  return result;
}

uint64_t sub_214240E7C(unint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_214240BC4(a1, a2, a3, &qword_254D69998, (uint64_t)&unk_24D1806A0, (uint64_t)sub_21424C7F0, (void (*)(uint64_t, uint64_t))sub_2141FA1C4);
}

uint64_t sub_214240EA0(unint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_21423EE98(a1, a2, a3, &qword_253F131B8, (uint64_t)&unk_24D180718, (uint64_t)sub_21424C7F0, (void (*)(uint64_t, uint64_t))sub_2141FA1C4);
}

uint64_t sub_214240EC4(unint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_214240F54(a1, a2, a3, &qword_253F13460, (uint64_t)&unk_24D180740, (uint64_t)sub_21424E84C, (void (*)(uint64_t, uint64_t))sub_2141FA1C4);
}

uint64_t sub_214240EE8(unint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_21424150C(a1, a2, a3, &qword_253F13468, (uint64_t)&unk_24D180768, (uint64_t)sub_21424E84C, (void (*)(uint64_t, uint64_t))sub_2141FA1C4);
}

uint64_t sub_214240F0C(unint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_21423EE98(a1, a2, a3, &qword_253F131D8, (uint64_t)&unk_24D180790, (uint64_t)sub_21424E84C, (void (*)(uint64_t, uint64_t))sub_2141FA1C4);
}

uint64_t sub_214240F30(unint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_214240F54(a1, a2, a3, &qword_253F13448, (uint64_t)&unk_24D1807B8, (uint64_t)sub_21424C7F0, (void (*)(uint64_t, uint64_t))sub_2141FA1C4);
}

uint64_t sub_214240F54(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, void (*a7)(uint64_t, uint64_t))
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  char v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t);
  _BYTE v35[8];

  sub_2141D8BF8(a4);
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 40) = 1;
  *(_WORD *)(v12 + 16) = 256;
  *(_OWORD *)(v12 + 48) = 0u;
  *(_OWORD *)(v12 + 64) = 0u;
  *(_OWORD *)(v12 + 80) = 0u;
  *(_OWORD *)(v12 + 96) = 0u;
  *(_OWORD *)(v12 + 112) = 0u;
  *(_OWORD *)(v12 + 128) = 0u;
  *(_OWORD *)(v12 + 144) = 0u;
  v13 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v12 + 24) = a1;
  *(_QWORD *)(v12 + 32) = v13;
  if (!(a1 >> 62))
  {
    v14 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v14)
      goto LABEL_3;
LABEL_20:
    swift_bridgeObjectRelease();
LABEL_21:
    v28 = swift_allocObject();
    *(_QWORD *)(v28 + 16) = a2;
    *(_QWORD *)(v28 + 24) = a3;
    v30 = *(_QWORD *)(v12 + 144);
    v29 = *(_QWORD *)(v12 + 152);
    *(_QWORD *)(v12 + 144) = a6;
    *(_QWORD *)(v12 + 152) = v28;
    a7(v30, v29);
    return v12;
  }
  swift_bridgeObjectRetain();
  result = sub_2144256AC();
  v14 = result;
  if (!result)
    goto LABEL_20;
LABEL_3:
  if (v14 >= 1)
  {
    v31 = a2;
    v32 = a3;
    v33 = a6;
    v34 = a7;
    if ((a1 & 0xC000000000000001) != 0)
    {
      v16 = 0;
      do
      {
        v17 = MEMORY[0x2199CCE3C](v16, a1);
        swift_weakInit();
        v18 = *(_QWORD **)(v17 + 32);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v17 + 32) = v18;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v18 = sub_214221F04(0, v18[2] + 1, 1, v18);
          *(_QWORD *)(v17 + 32) = v18;
        }
        v21 = v18[2];
        v20 = v18[3];
        if (v21 >= v20 >> 1)
        {
          v18 = sub_214221F04((_QWORD *)(v20 > 1), v21 + 1, 1, v18);
          *(_QWORD *)(v17 + 32) = v18;
        }
        ++v16;
        v18[2] = v21 + 1;
        sub_2141E801C((uint64_t)v35, (uint64_t)&v18[v21 + 4], &qword_253F13188);
        swift_unknownObjectRelease();
      }
      while (v14 != v16);
    }
    else
    {
      v22 = 0;
      do
      {
        v23 = *(_QWORD *)(a1 + 8 * v22 + 32);
        swift_weakInit();
        v24 = *(_QWORD **)(v23 + 32);
        swift_retain();
        v25 = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v23 + 32) = v24;
        if ((v25 & 1) == 0)
        {
          v24 = sub_214221F04(0, v24[2] + 1, 1, v24);
          *(_QWORD *)(v23 + 32) = v24;
        }
        v27 = v24[2];
        v26 = v24[3];
        if (v27 >= v26 >> 1)
        {
          v24 = sub_214221F04((_QWORD *)(v26 > 1), v27 + 1, 1, v24);
          *(_QWORD *)(v23 + 32) = v24;
        }
        ++v22;
        v24[2] = v27 + 1;
        sub_2141E801C((uint64_t)v35, (uint64_t)&v24[v27 + 4], &qword_253F13188);
        swift_release();
      }
      while (v14 != v22);
    }
    swift_bridgeObjectRelease();
    a6 = v33;
    a7 = v34;
    a2 = v31;
    a3 = v32;
    goto LABEL_21;
  }
  __break(1u);
  return result;
}

uint64_t sub_21424121C(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  char v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE v25[8];
  _BYTE v26[128];

  sub_2141D8BF8(&qword_253F13450);
  v6 = swift_allocObject();
  sub_21424D3E4((uint64_t)v26);
  sub_2141E801C((uint64_t)v26, v6 + 40, &qword_253F12F58);
  *(_WORD *)(v6 + 16) = 256;
  *(_QWORD *)(v6 + 168) = 0;
  *(_QWORD *)(v6 + 176) = 0;
  v7 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v6 + 24) = a1;
  *(_QWORD *)(v6 + 32) = v7;
  if (!(a1 >> 62))
  {
    v8 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v8)
      goto LABEL_3;
LABEL_20:
    swift_bridgeObjectRelease();
LABEL_21:
    v22 = swift_allocObject();
    *(_QWORD *)(v22 + 16) = a2;
    *(_QWORD *)(v22 + 24) = a3;
    v23 = *(_QWORD *)(v6 + 168);
    *(_QWORD *)(v6 + 168) = sub_21424C7F0;
    *(_QWORD *)(v6 + 176) = v22;
    sub_2141D972C(v23);
    return v6;
  }
  swift_bridgeObjectRetain();
  result = sub_2144256AC();
  v8 = result;
  if (!result)
    goto LABEL_20;
LABEL_3:
  if (v8 >= 1)
  {
    v24 = a3;
    if ((a1 & 0xC000000000000001) != 0)
    {
      v10 = 0;
      do
      {
        v11 = MEMORY[0x2199CCE3C](v10, a1);
        swift_weakInit();
        v12 = *(_QWORD **)(v11 + 32);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v11 + 32) = v12;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v12 = sub_214221F04(0, v12[2] + 1, 1, v12);
          *(_QWORD *)(v11 + 32) = v12;
        }
        v15 = v12[2];
        v14 = v12[3];
        if (v15 >= v14 >> 1)
        {
          v12 = sub_214221F04((_QWORD *)(v14 > 1), v15 + 1, 1, v12);
          *(_QWORD *)(v11 + 32) = v12;
        }
        ++v10;
        v12[2] = v15 + 1;
        sub_2141E801C((uint64_t)v25, (uint64_t)&v12[v15 + 4], &qword_253F13188);
        swift_unknownObjectRelease();
      }
      while (v8 != v10);
    }
    else
    {
      v16 = 0;
      do
      {
        v17 = *(_QWORD *)(a1 + 8 * v16 + 32);
        swift_weakInit();
        v18 = *(_QWORD **)(v17 + 32);
        swift_retain();
        v19 = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v17 + 32) = v18;
        if ((v19 & 1) == 0)
        {
          v18 = sub_214221F04(0, v18[2] + 1, 1, v18);
          *(_QWORD *)(v17 + 32) = v18;
        }
        v21 = v18[2];
        v20 = v18[3];
        if (v21 >= v20 >> 1)
        {
          v18 = sub_214221F04((_QWORD *)(v20 > 1), v21 + 1, 1, v18);
          *(_QWORD *)(v17 + 32) = v18;
        }
        ++v16;
        v18[2] = v21 + 1;
        sub_2141E801C((uint64_t)v25, (uint64_t)&v18[v21 + 4], &qword_253F13188);
        swift_release();
      }
      while (v8 != v16);
    }
    swift_bridgeObjectRelease();
    a3 = v24;
    goto LABEL_21;
  }
  __break(1u);
  return result;
}

uint64_t sub_2142414E8(unint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_21424150C(a1, a2, a3, &qword_253F13198, (uint64_t)&unk_24D180808, (uint64_t)sub_21424C7F0, (void (*)(uint64_t, uint64_t))sub_2141FA1C4);
}

uint64_t sub_21424150C(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, void (*a7)(uint64_t, uint64_t))
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  char v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t);
  _BYTE v35[8];

  sub_2141D8BF8(a4);
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 40) = 1;
  *(_WORD *)(v12 + 16) = 256;
  *(_OWORD *)(v12 + 48) = 0u;
  *(_OWORD *)(v12 + 64) = 0u;
  *(_OWORD *)(v12 + 80) = 0u;
  *(_OWORD *)(v12 + 96) = 0u;
  *(_OWORD *)(v12 + 112) = 0u;
  *(_OWORD *)(v12 + 128) = 0u;
  *(_QWORD *)(v12 + 144) = 0;
  v13 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v12 + 24) = a1;
  *(_QWORD *)(v12 + 32) = v13;
  if (!(a1 >> 62))
  {
    v14 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v14)
      goto LABEL_3;
LABEL_20:
    swift_bridgeObjectRelease();
LABEL_21:
    v28 = swift_allocObject();
    *(_QWORD *)(v28 + 16) = a2;
    *(_QWORD *)(v28 + 24) = a3;
    v30 = *(_QWORD *)(v12 + 136);
    v29 = *(_QWORD *)(v12 + 144);
    *(_QWORD *)(v12 + 136) = a6;
    *(_QWORD *)(v12 + 144) = v28;
    a7(v30, v29);
    return v12;
  }
  swift_bridgeObjectRetain();
  result = sub_2144256AC();
  v14 = result;
  if (!result)
    goto LABEL_20;
LABEL_3:
  if (v14 >= 1)
  {
    v31 = a2;
    v32 = a3;
    v33 = a6;
    v34 = a7;
    if ((a1 & 0xC000000000000001) != 0)
    {
      v16 = 0;
      do
      {
        v17 = MEMORY[0x2199CCE3C](v16, a1);
        swift_weakInit();
        v18 = *(_QWORD **)(v17 + 32);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v17 + 32) = v18;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v18 = sub_214221F04(0, v18[2] + 1, 1, v18);
          *(_QWORD *)(v17 + 32) = v18;
        }
        v21 = v18[2];
        v20 = v18[3];
        if (v21 >= v20 >> 1)
        {
          v18 = sub_214221F04((_QWORD *)(v20 > 1), v21 + 1, 1, v18);
          *(_QWORD *)(v17 + 32) = v18;
        }
        ++v16;
        v18[2] = v21 + 1;
        sub_2141E801C((uint64_t)v35, (uint64_t)&v18[v21 + 4], &qword_253F13188);
        swift_unknownObjectRelease();
      }
      while (v14 != v16);
    }
    else
    {
      v22 = 0;
      do
      {
        v23 = *(_QWORD *)(a1 + 8 * v22 + 32);
        swift_weakInit();
        v24 = *(_QWORD **)(v23 + 32);
        swift_retain();
        v25 = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v23 + 32) = v24;
        if ((v25 & 1) == 0)
        {
          v24 = sub_214221F04(0, v24[2] + 1, 1, v24);
          *(_QWORD *)(v23 + 32) = v24;
        }
        v27 = v24[2];
        v26 = v24[3];
        if (v27 >= v26 >> 1)
        {
          v24 = sub_214221F04((_QWORD *)(v26 > 1), v27 + 1, 1, v24);
          *(_QWORD *)(v23 + 32) = v24;
        }
        ++v22;
        v24[2] = v27 + 1;
        sub_2141E801C((uint64_t)v35, (uint64_t)&v24[v27 + 4], &qword_253F13188);
        swift_release();
      }
      while (v14 != v22);
    }
    swift_bridgeObjectRelease();
    a6 = v33;
    a7 = v34;
    a2 = v31;
    a3 = v32;
    goto LABEL_21;
  }
  __break(1u);
  return result;
}

uint64_t sub_2142417D4(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, void (*a7)(uint64_t, uint64_t))
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  char v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t);
  _BYTE v35[8];

  sub_2141D8BF8(a4);
  v12 = swift_allocObject();
  *(_WORD *)(v12 + 16) = 256;
  *(_QWORD *)(v12 + 48) = 0;
  *(_QWORD *)(v12 + 56) = 0;
  *(_QWORD *)(v12 + 40) = 1;
  v13 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v12 + 24) = a1;
  *(_QWORD *)(v12 + 32) = v13;
  if (!(a1 >> 62))
  {
    v14 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v14)
      goto LABEL_3;
LABEL_20:
    swift_bridgeObjectRelease();
LABEL_21:
    v28 = swift_allocObject();
    *(_QWORD *)(v28 + 16) = a2;
    *(_QWORD *)(v28 + 24) = a3;
    v30 = *(_QWORD *)(v12 + 48);
    v29 = *(_QWORD *)(v12 + 56);
    *(_QWORD *)(v12 + 48) = a6;
    *(_QWORD *)(v12 + 56) = v28;
    a7(v30, v29);
    return v12;
  }
  swift_bridgeObjectRetain();
  result = sub_2144256AC();
  v14 = result;
  if (!result)
    goto LABEL_20;
LABEL_3:
  if (v14 >= 1)
  {
    v31 = a2;
    v32 = a3;
    v33 = a6;
    v34 = a7;
    if ((a1 & 0xC000000000000001) != 0)
    {
      v16 = 0;
      do
      {
        v17 = MEMORY[0x2199CCE3C](v16, a1);
        swift_weakInit();
        v18 = *(_QWORD **)(v17 + 32);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v17 + 32) = v18;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v18 = sub_214221F04(0, v18[2] + 1, 1, v18);
          *(_QWORD *)(v17 + 32) = v18;
        }
        v21 = v18[2];
        v20 = v18[3];
        if (v21 >= v20 >> 1)
        {
          v18 = sub_214221F04((_QWORD *)(v20 > 1), v21 + 1, 1, v18);
          *(_QWORD *)(v17 + 32) = v18;
        }
        ++v16;
        v18[2] = v21 + 1;
        sub_2141E801C((uint64_t)v35, (uint64_t)&v18[v21 + 4], &qword_253F13188);
        swift_unknownObjectRelease();
      }
      while (v14 != v16);
    }
    else
    {
      v22 = 0;
      do
      {
        v23 = *(_QWORD *)(a1 + 8 * v22 + 32);
        swift_weakInit();
        v24 = *(_QWORD **)(v23 + 32);
        swift_retain();
        v25 = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v23 + 32) = v24;
        if ((v25 & 1) == 0)
        {
          v24 = sub_214221F04(0, v24[2] + 1, 1, v24);
          *(_QWORD *)(v23 + 32) = v24;
        }
        v27 = v24[2];
        v26 = v24[3];
        if (v27 >= v26 >> 1)
        {
          v24 = sub_214221F04((_QWORD *)(v26 > 1), v27 + 1, 1, v24);
          *(_QWORD *)(v23 + 32) = v24;
        }
        ++v22;
        v24[2] = v27 + 1;
        sub_2141E801C((uint64_t)v35, (uint64_t)&v24[v27 + 4], &qword_253F13188);
        swift_release();
      }
      while (v14 != v22);
    }
    swift_bridgeObjectRelease();
    a6 = v33;
    a7 = v34;
    a2 = v31;
    a3 = v32;
    goto LABEL_21;
  }
  __break(1u);
  return result;
}

uint64_t sub_214241A8C(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  char v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE v25[8];

  sub_2141D8BF8(&qword_253F15808);
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 40) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  *(_OWORD *)(v6 + 88) = 0u;
  *(_OWORD *)(v6 + 104) = 0u;
  *(_OWORD *)(v6 + 120) = 0u;
  *(_QWORD *)(v6 + 136) = 0;
  *(_BYTE *)(v6 + 144) = -2;
  *(_WORD *)(v6 + 16) = 256;
  *(_QWORD *)(v6 + 152) = 0;
  *(_QWORD *)(v6 + 160) = 0;
  v7 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v6 + 24) = a1;
  *(_QWORD *)(v6 + 32) = v7;
  if (!(a1 >> 62))
  {
    v8 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v8)
      goto LABEL_3;
LABEL_20:
    swift_bridgeObjectRelease();
LABEL_21:
    v22 = swift_allocObject();
    *(_QWORD *)(v22 + 16) = a2;
    *(_QWORD *)(v22 + 24) = a3;
    v23 = *(_QWORD *)(v6 + 152);
    *(_QWORD *)(v6 + 152) = sub_21424C7F0;
    *(_QWORD *)(v6 + 160) = v22;
    sub_2141D972C(v23);
    return v6;
  }
  swift_bridgeObjectRetain();
  result = sub_2144256AC();
  v8 = result;
  if (!result)
    goto LABEL_20;
LABEL_3:
  if (v8 >= 1)
  {
    v24 = a3;
    if ((a1 & 0xC000000000000001) != 0)
    {
      v10 = 0;
      do
      {
        v11 = MEMORY[0x2199CCE3C](v10, a1);
        swift_weakInit();
        v12 = *(_QWORD **)(v11 + 32);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v11 + 32) = v12;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v12 = sub_214221F04(0, v12[2] + 1, 1, v12);
          *(_QWORD *)(v11 + 32) = v12;
        }
        v15 = v12[2];
        v14 = v12[3];
        if (v15 >= v14 >> 1)
        {
          v12 = sub_214221F04((_QWORD *)(v14 > 1), v15 + 1, 1, v12);
          *(_QWORD *)(v11 + 32) = v12;
        }
        ++v10;
        v12[2] = v15 + 1;
        sub_2141E801C((uint64_t)v25, (uint64_t)&v12[v15 + 4], &qword_253F13188);
        swift_unknownObjectRelease();
      }
      while (v8 != v10);
    }
    else
    {
      v16 = 0;
      do
      {
        v17 = *(_QWORD *)(a1 + 8 * v16 + 32);
        swift_weakInit();
        v18 = *(_QWORD **)(v17 + 32);
        swift_retain();
        v19 = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v17 + 32) = v18;
        if ((v19 & 1) == 0)
        {
          v18 = sub_214221F04(0, v18[2] + 1, 1, v18);
          *(_QWORD *)(v17 + 32) = v18;
        }
        v21 = v18[2];
        v20 = v18[3];
        if (v21 >= v20 >> 1)
        {
          v18 = sub_214221F04((_QWORD *)(v20 > 1), v21 + 1, 1, v18);
          *(_QWORD *)(v17 + 32) = v18;
        }
        ++v16;
        v18[2] = v21 + 1;
        sub_2141E801C((uint64_t)v25, (uint64_t)&v18[v21 + 4], &qword_253F13188);
        swift_release();
      }
      while (v8 != v16);
    }
    swift_bridgeObjectRelease();
    a3 = v24;
    goto LABEL_21;
  }
  __break(1u);
  return result;
}

uint64_t sub_214241D60(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  char v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE v25[8];

  sub_2141D8BF8(&qword_253F15810);
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 40) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  *(_OWORD *)(v6 + 88) = 0u;
  *(_OWORD *)(v6 + 104) = 0u;
  *(_OWORD *)(v6 + 120) = 0u;
  *(_BYTE *)(v6 + 136) = -2;
  *(_WORD *)(v6 + 16) = 256;
  *(_QWORD *)(v6 + 144) = 0;
  *(_QWORD *)(v6 + 152) = 0;
  v7 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v6 + 24) = a1;
  *(_QWORD *)(v6 + 32) = v7;
  if (!(a1 >> 62))
  {
    v8 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v8)
      goto LABEL_3;
LABEL_20:
    swift_bridgeObjectRelease();
LABEL_21:
    v22 = swift_allocObject();
    *(_QWORD *)(v22 + 16) = a2;
    *(_QWORD *)(v22 + 24) = a3;
    v23 = *(_QWORD *)(v6 + 144);
    *(_QWORD *)(v6 + 144) = sub_21424C7F0;
    *(_QWORD *)(v6 + 152) = v22;
    sub_2141D972C(v23);
    return v6;
  }
  swift_bridgeObjectRetain();
  result = sub_2144256AC();
  v8 = result;
  if (!result)
    goto LABEL_20;
LABEL_3:
  if (v8 >= 1)
  {
    v24 = a3;
    if ((a1 & 0xC000000000000001) != 0)
    {
      v10 = 0;
      do
      {
        v11 = MEMORY[0x2199CCE3C](v10, a1);
        swift_weakInit();
        v12 = *(_QWORD **)(v11 + 32);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v11 + 32) = v12;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v12 = sub_214221F04(0, v12[2] + 1, 1, v12);
          *(_QWORD *)(v11 + 32) = v12;
        }
        v15 = v12[2];
        v14 = v12[3];
        if (v15 >= v14 >> 1)
        {
          v12 = sub_214221F04((_QWORD *)(v14 > 1), v15 + 1, 1, v12);
          *(_QWORD *)(v11 + 32) = v12;
        }
        ++v10;
        v12[2] = v15 + 1;
        sub_2141E801C((uint64_t)v25, (uint64_t)&v12[v15 + 4], &qword_253F13188);
        swift_unknownObjectRelease();
      }
      while (v8 != v10);
    }
    else
    {
      v16 = 0;
      do
      {
        v17 = *(_QWORD *)(a1 + 8 * v16 + 32);
        swift_weakInit();
        v18 = *(_QWORD **)(v17 + 32);
        swift_retain();
        v19 = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v17 + 32) = v18;
        if ((v19 & 1) == 0)
        {
          v18 = sub_214221F04(0, v18[2] + 1, 1, v18);
          *(_QWORD *)(v17 + 32) = v18;
        }
        v21 = v18[2];
        v20 = v18[3];
        if (v21 >= v20 >> 1)
        {
          v18 = sub_214221F04((_QWORD *)(v20 > 1), v21 + 1, 1, v18);
          *(_QWORD *)(v17 + 32) = v18;
        }
        ++v16;
        v18[2] = v21 + 1;
        sub_2141E801C((uint64_t)v25, (uint64_t)&v18[v21 + 4], &qword_253F13188);
        swift_release();
      }
      while (v8 != v16);
    }
    swift_bridgeObjectRelease();
    a3 = v24;
    goto LABEL_21;
  }
  __break(1u);
  return result;
}

uint64_t sub_214242030(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  char v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE v25[8];
  _BYTE v26[144];

  sub_2141D8BF8(&qword_253F15818);
  v6 = swift_allocObject();
  sub_21424DCF8((uint64_t)v26);
  sub_2141E801C((uint64_t)v26, v6 + 40, &qword_253F12F78);
  *(_WORD *)(v6 + 16) = 256;
  *(_QWORD *)(v6 + 176) = 0;
  *(_QWORD *)(v6 + 184) = 0;
  v7 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v6 + 24) = a1;
  *(_QWORD *)(v6 + 32) = v7;
  if (!(a1 >> 62))
  {
    v8 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v8)
      goto LABEL_3;
LABEL_20:
    swift_bridgeObjectRelease();
LABEL_21:
    v22 = swift_allocObject();
    *(_QWORD *)(v22 + 16) = a2;
    *(_QWORD *)(v22 + 24) = a3;
    v23 = *(_QWORD *)(v6 + 176);
    *(_QWORD *)(v6 + 176) = sub_21424C7F0;
    *(_QWORD *)(v6 + 184) = v22;
    sub_2141D972C(v23);
    return v6;
  }
  swift_bridgeObjectRetain();
  result = sub_2144256AC();
  v8 = result;
  if (!result)
    goto LABEL_20;
LABEL_3:
  if (v8 >= 1)
  {
    v24 = a3;
    if ((a1 & 0xC000000000000001) != 0)
    {
      v10 = 0;
      do
      {
        v11 = MEMORY[0x2199CCE3C](v10, a1);
        swift_weakInit();
        v12 = *(_QWORD **)(v11 + 32);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v11 + 32) = v12;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v12 = sub_214221F04(0, v12[2] + 1, 1, v12);
          *(_QWORD *)(v11 + 32) = v12;
        }
        v15 = v12[2];
        v14 = v12[3];
        if (v15 >= v14 >> 1)
        {
          v12 = sub_214221F04((_QWORD *)(v14 > 1), v15 + 1, 1, v12);
          *(_QWORD *)(v11 + 32) = v12;
        }
        ++v10;
        v12[2] = v15 + 1;
        sub_2141E801C((uint64_t)v25, (uint64_t)&v12[v15 + 4], &qword_253F13188);
        swift_unknownObjectRelease();
      }
      while (v8 != v10);
    }
    else
    {
      v16 = 0;
      do
      {
        v17 = *(_QWORD *)(a1 + 8 * v16 + 32);
        swift_weakInit();
        v18 = *(_QWORD **)(v17 + 32);
        swift_retain();
        v19 = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v17 + 32) = v18;
        if ((v19 & 1) == 0)
        {
          v18 = sub_214221F04(0, v18[2] + 1, 1, v18);
          *(_QWORD *)(v17 + 32) = v18;
        }
        v21 = v18[2];
        v20 = v18[3];
        if (v21 >= v20 >> 1)
        {
          v18 = sub_214221F04((_QWORD *)(v20 > 1), v21 + 1, 1, v18);
          *(_QWORD *)(v17 + 32) = v18;
        }
        ++v16;
        v18[2] = v21 + 1;
        sub_2141E801C((uint64_t)v25, (uint64_t)&v18[v21 + 4], &qword_253F13188);
        swift_release();
      }
      while (v8 != v16);
    }
    swift_bridgeObjectRelease();
    a3 = v24;
    goto LABEL_21;
  }
  __break(1u);
  return result;
}

uint64_t sub_2142422FC(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  char v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE v25[8];

  sub_2141D8BF8(&qword_253F11C98);
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 40) = 0;
  *(_BYTE *)(v6 + 48) = -1;
  *(_WORD *)(v6 + 16) = 256;
  *(_QWORD *)(v6 + 56) = 0;
  *(_QWORD *)(v6 + 64) = 0;
  v7 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v6 + 24) = a1;
  *(_QWORD *)(v6 + 32) = v7;
  if (!(a1 >> 62))
  {
    v8 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v8)
      goto LABEL_3;
LABEL_20:
    swift_bridgeObjectRelease();
LABEL_21:
    v22 = swift_allocObject();
    *(_QWORD *)(v22 + 16) = a2;
    *(_QWORD *)(v22 + 24) = a3;
    v23 = *(_QWORD *)(v6 + 56);
    *(_QWORD *)(v6 + 56) = sub_21424C7F0;
    *(_QWORD *)(v6 + 64) = v22;
    sub_2141D972C(v23);
    return v6;
  }
  swift_bridgeObjectRetain();
  result = sub_2144256AC();
  v8 = result;
  if (!result)
    goto LABEL_20;
LABEL_3:
  if (v8 >= 1)
  {
    v24 = a3;
    if ((a1 & 0xC000000000000001) != 0)
    {
      v10 = 0;
      do
      {
        v11 = MEMORY[0x2199CCE3C](v10, a1);
        swift_weakInit();
        v12 = *(_QWORD **)(v11 + 32);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v11 + 32) = v12;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v12 = sub_214221F04(0, v12[2] + 1, 1, v12);
          *(_QWORD *)(v11 + 32) = v12;
        }
        v15 = v12[2];
        v14 = v12[3];
        if (v15 >= v14 >> 1)
        {
          v12 = sub_214221F04((_QWORD *)(v14 > 1), v15 + 1, 1, v12);
          *(_QWORD *)(v11 + 32) = v12;
        }
        ++v10;
        v12[2] = v15 + 1;
        sub_2141E801C((uint64_t)v25, (uint64_t)&v12[v15 + 4], &qword_253F13188);
        swift_unknownObjectRelease();
      }
      while (v8 != v10);
    }
    else
    {
      v16 = 0;
      do
      {
        v17 = *(_QWORD *)(a1 + 8 * v16 + 32);
        swift_weakInit();
        v18 = *(_QWORD **)(v17 + 32);
        swift_retain();
        v19 = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v17 + 32) = v18;
        if ((v19 & 1) == 0)
        {
          v18 = sub_214221F04(0, v18[2] + 1, 1, v18);
          *(_QWORD *)(v17 + 32) = v18;
        }
        v21 = v18[2];
        v20 = v18[3];
        if (v21 >= v20 >> 1)
        {
          v18 = sub_214221F04((_QWORD *)(v20 > 1), v21 + 1, 1, v18);
          *(_QWORD *)(v17 + 32) = v18;
        }
        ++v16;
        v18[2] = v21 + 1;
        sub_2141E801C((uint64_t)v25, (uint64_t)&v18[v21 + 4], &qword_253F13188);
        swift_release();
      }
      while (v8 != v16);
    }
    swift_bridgeObjectRelease();
    a3 = v24;
    goto LABEL_21;
  }
  __break(1u);
  return result;
}

uint64_t sub_2142425B4(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  char v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE v25[8];

  sub_2141D8BF8(&qword_253F10F90);
  v6 = swift_allocObject();
  *(_WORD *)(v6 + 16) = 256;
  *(_OWORD *)(v6 + 40) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  *(_OWORD *)(v6 + 88) = 0u;
  *(_QWORD *)(v6 + 104) = 0;
  v7 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v6 + 24) = a1;
  *(_QWORD *)(v6 + 32) = v7;
  if (!(a1 >> 62))
  {
    v8 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v8)
      goto LABEL_3;
LABEL_20:
    swift_bridgeObjectRelease();
LABEL_21:
    v22 = swift_allocObject();
    *(_QWORD *)(v22 + 16) = a2;
    *(_QWORD *)(v22 + 24) = a3;
    v23 = *(_QWORD *)(v6 + 96);
    *(_QWORD *)(v6 + 96) = sub_21424C7F0;
    *(_QWORD *)(v6 + 104) = v22;
    sub_2141D972C(v23);
    return v6;
  }
  swift_bridgeObjectRetain();
  result = sub_2144256AC();
  v8 = result;
  if (!result)
    goto LABEL_20;
LABEL_3:
  if (v8 >= 1)
  {
    v24 = a3;
    if ((a1 & 0xC000000000000001) != 0)
    {
      v10 = 0;
      do
      {
        v11 = MEMORY[0x2199CCE3C](v10, a1);
        swift_weakInit();
        v12 = *(_QWORD **)(v11 + 32);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v11 + 32) = v12;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v12 = sub_214221F04(0, v12[2] + 1, 1, v12);
          *(_QWORD *)(v11 + 32) = v12;
        }
        v15 = v12[2];
        v14 = v12[3];
        if (v15 >= v14 >> 1)
        {
          v12 = sub_214221F04((_QWORD *)(v14 > 1), v15 + 1, 1, v12);
          *(_QWORD *)(v11 + 32) = v12;
        }
        ++v10;
        v12[2] = v15 + 1;
        sub_2141E801C((uint64_t)v25, (uint64_t)&v12[v15 + 4], &qword_253F13188);
        swift_unknownObjectRelease();
      }
      while (v8 != v10);
    }
    else
    {
      v16 = 0;
      do
      {
        v17 = *(_QWORD *)(a1 + 8 * v16 + 32);
        swift_weakInit();
        v18 = *(_QWORD **)(v17 + 32);
        swift_retain();
        v19 = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v17 + 32) = v18;
        if ((v19 & 1) == 0)
        {
          v18 = sub_214221F04(0, v18[2] + 1, 1, v18);
          *(_QWORD *)(v17 + 32) = v18;
        }
        v21 = v18[2];
        v20 = v18[3];
        if (v21 >= v20 >> 1)
        {
          v18 = sub_214221F04((_QWORD *)(v20 > 1), v21 + 1, 1, v18);
          *(_QWORD *)(v17 + 32) = v18;
        }
        ++v16;
        v18[2] = v21 + 1;
        sub_2141E801C((uint64_t)v25, (uint64_t)&v18[v21 + 4], &qword_253F13188);
        swift_release();
      }
      while (v8 != v16);
    }
    swift_bridgeObjectRelease();
    a3 = v24;
    goto LABEL_21;
  }
  __break(1u);
  return result;
}

uint64_t sub_214242874(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  char v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE v25[8];
  _BYTE v26[352];

  sub_2141D8BF8(&qword_253F131E8);
  v6 = swift_allocObject();
  sub_21424DD84((uint64_t)v26);
  sub_2141E801C((uint64_t)v26, v6 + 40, qword_253F128B0);
  *(_WORD *)(v6 + 16) = 256;
  *(_QWORD *)(v6 + 384) = 0;
  *(_QWORD *)(v6 + 392) = 0;
  v7 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v6 + 24) = a1;
  *(_QWORD *)(v6 + 32) = v7;
  if (!(a1 >> 62))
  {
    v8 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v8)
      goto LABEL_3;
LABEL_20:
    swift_bridgeObjectRelease();
LABEL_21:
    v22 = swift_allocObject();
    *(_QWORD *)(v22 + 16) = a2;
    *(_QWORD *)(v22 + 24) = a3;
    v23 = *(_QWORD *)(v6 + 384);
    *(_QWORD *)(v6 + 384) = sub_21424C7F0;
    *(_QWORD *)(v6 + 392) = v22;
    sub_2141D972C(v23);
    return v6;
  }
  swift_bridgeObjectRetain();
  result = sub_2144256AC();
  v8 = result;
  if (!result)
    goto LABEL_20;
LABEL_3:
  if (v8 >= 1)
  {
    v24 = a3;
    if ((a1 & 0xC000000000000001) != 0)
    {
      v10 = 0;
      do
      {
        v11 = MEMORY[0x2199CCE3C](v10, a1);
        swift_weakInit();
        v12 = *(_QWORD **)(v11 + 32);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v11 + 32) = v12;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v12 = sub_214221F04(0, v12[2] + 1, 1, v12);
          *(_QWORD *)(v11 + 32) = v12;
        }
        v15 = v12[2];
        v14 = v12[3];
        if (v15 >= v14 >> 1)
        {
          v12 = sub_214221F04((_QWORD *)(v14 > 1), v15 + 1, 1, v12);
          *(_QWORD *)(v11 + 32) = v12;
        }
        ++v10;
        v12[2] = v15 + 1;
        sub_2141E801C((uint64_t)v25, (uint64_t)&v12[v15 + 4], &qword_253F13188);
        swift_unknownObjectRelease();
      }
      while (v8 != v10);
    }
    else
    {
      v16 = 0;
      do
      {
        v17 = *(_QWORD *)(a1 + 8 * v16 + 32);
        swift_weakInit();
        v18 = *(_QWORD **)(v17 + 32);
        swift_retain();
        v19 = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v17 + 32) = v18;
        if ((v19 & 1) == 0)
        {
          v18 = sub_214221F04(0, v18[2] + 1, 1, v18);
          *(_QWORD *)(v17 + 32) = v18;
        }
        v21 = v18[2];
        v20 = v18[3];
        if (v21 >= v20 >> 1)
        {
          v18 = sub_214221F04((_QWORD *)(v20 > 1), v21 + 1, 1, v18);
          *(_QWORD *)(v17 + 32) = v18;
        }
        ++v16;
        v18[2] = v21 + 1;
        sub_2141E801C((uint64_t)v25, (uint64_t)&v18[v21 + 4], &qword_253F13188);
        swift_release();
      }
      while (v8 != v16);
    }
    swift_bridgeObjectRelease();
    a3 = v24;
    goto LABEL_21;
  }
  __break(1u);
  return result;
}

uint64_t sub_214242B40(uint64_t a1, void (*a2)(void))
{
  a2();
  return 0;
}

uint64_t sub_214242B68(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  char v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE v25[8];

  *(_WORD *)(v3 + 16) = 256;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 40) = 2;
  v7 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v3 + 24) = a1;
  *(_QWORD *)(v3 + 32) = v7;
  if (!(a1 >> 62))
  {
    v8 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v8)
      goto LABEL_3;
LABEL_20:
    swift_bridgeObjectRelease();
LABEL_21:
    swift_unownedRetainStrong();
    swift_unownedRetain();
    swift_unownedRetain();
    swift_retain();
    swift_unownedRelease();
    swift_unownedRelease();
    swift_unownedRetain();
    swift_release();
    v22 = (_QWORD *)swift_allocObject();
    v22[2] = a2;
    v22[3] = a3;
    v22[4] = v3;
    v23 = *(_QWORD *)(v3 + 48);
    *(_QWORD *)(v3 + 48) = sub_21424CE44;
    *(_QWORD *)(v3 + 56) = v22;
    sub_2141D972C(v23);
    swift_release();
    return v3;
  }
  swift_bridgeObjectRetain();
  result = sub_2144256AC();
  v8 = result;
  if (!result)
    goto LABEL_20;
LABEL_3:
  if (v8 >= 1)
  {
    v24 = a3;
    if ((a1 & 0xC000000000000001) != 0)
    {
      v10 = 0;
      do
      {
        v11 = MEMORY[0x2199CCE3C](v10, a1);
        swift_weakInit();
        v12 = *(_QWORD **)(v11 + 32);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v11 + 32) = v12;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v12 = sub_214221F04(0, v12[2] + 1, 1, v12);
          *(_QWORD *)(v11 + 32) = v12;
        }
        v15 = v12[2];
        v14 = v12[3];
        if (v15 >= v14 >> 1)
        {
          v12 = sub_214221F04((_QWORD *)(v14 > 1), v15 + 1, 1, v12);
          *(_QWORD *)(v11 + 32) = v12;
        }
        ++v10;
        v12[2] = v15 + 1;
        sub_2141E801C((uint64_t)v25, (uint64_t)&v12[v15 + 4], &qword_253F13188);
        swift_unknownObjectRelease();
      }
      while (v8 != v10);
    }
    else
    {
      v16 = 0;
      do
      {
        v17 = *(_QWORD *)(a1 + 8 * v16 + 32);
        swift_weakInit();
        v18 = *(_QWORD **)(v17 + 32);
        swift_retain();
        v19 = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v17 + 32) = v18;
        if ((v19 & 1) == 0)
        {
          v18 = sub_214221F04(0, v18[2] + 1, 1, v18);
          *(_QWORD *)(v17 + 32) = v18;
        }
        v21 = v18[2];
        v20 = v18[3];
        if (v21 >= v20 >> 1)
        {
          v18 = sub_214221F04((_QWORD *)(v20 > 1), v21 + 1, 1, v18);
          *(_QWORD *)(v17 + 32) = v18;
        }
        ++v16;
        v18[2] = v21 + 1;
        sub_2141E801C((uint64_t)v25, (uint64_t)&v18[v21 + 4], &qword_253F13188);
        swift_release();
      }
      while (v8 != v16);
    }
    swift_bridgeObjectRelease();
    a3 = v24;
    goto LABEL_21;
  }
  __break(1u);
  return result;
}

uint64_t sub_214242E38(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  char v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE v25[8];

  *(_OWORD *)(v3 + 56) = 0u;
  *(_OWORD *)(v3 + 40) = 0u;
  *(_BYTE *)(v3 + 72) = 1;
  *(_WORD *)(v3 + 16) = 256;
  *(_QWORD *)(v3 + 80) = 0;
  *(_QWORD *)(v3 + 88) = 0;
  v7 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v3 + 24) = a1;
  *(_QWORD *)(v3 + 32) = v7;
  if (!(a1 >> 62))
  {
    v8 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v8)
      goto LABEL_3;
LABEL_20:
    swift_bridgeObjectRelease();
LABEL_21:
    swift_unownedRetainStrong();
    swift_unownedRetain();
    swift_unownedRetain();
    swift_retain();
    swift_unownedRelease();
    swift_unownedRelease();
    swift_unownedRetain();
    swift_release();
    v22 = (_QWORD *)swift_allocObject();
    v22[2] = a2;
    v22[3] = a3;
    v22[4] = v3;
    v23 = *(_QWORD *)(v3 + 80);
    *(_QWORD *)(v3 + 80) = sub_21424DFD0;
    *(_QWORD *)(v3 + 88) = v22;
    sub_2141D972C(v23);
    swift_release();
    return v3;
  }
  swift_bridgeObjectRetain();
  result = sub_2144256AC();
  v8 = result;
  if (!result)
    goto LABEL_20;
LABEL_3:
  if (v8 >= 1)
  {
    v24 = a3;
    if ((a1 & 0xC000000000000001) != 0)
    {
      v10 = 0;
      do
      {
        v11 = MEMORY[0x2199CCE3C](v10, a1);
        swift_weakInit();
        v12 = *(_QWORD **)(v11 + 32);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v11 + 32) = v12;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v12 = sub_214221F04(0, v12[2] + 1, 1, v12);
          *(_QWORD *)(v11 + 32) = v12;
        }
        v15 = v12[2];
        v14 = v12[3];
        if (v15 >= v14 >> 1)
        {
          v12 = sub_214221F04((_QWORD *)(v14 > 1), v15 + 1, 1, v12);
          *(_QWORD *)(v11 + 32) = v12;
        }
        ++v10;
        v12[2] = v15 + 1;
        sub_2141E801C((uint64_t)v25, (uint64_t)&v12[v15 + 4], &qword_253F13188);
        swift_unknownObjectRelease();
      }
      while (v8 != v10);
    }
    else
    {
      v16 = 0;
      do
      {
        v17 = *(_QWORD *)(a1 + 8 * v16 + 32);
        swift_weakInit();
        v18 = *(_QWORD **)(v17 + 32);
        swift_retain();
        v19 = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v17 + 32) = v18;
        if ((v19 & 1) == 0)
        {
          v18 = sub_214221F04(0, v18[2] + 1, 1, v18);
          *(_QWORD *)(v17 + 32) = v18;
        }
        v21 = v18[2];
        v20 = v18[3];
        if (v21 >= v20 >> 1)
        {
          v18 = sub_214221F04((_QWORD *)(v20 > 1), v21 + 1, 1, v18);
          *(_QWORD *)(v17 + 32) = v18;
        }
        ++v16;
        v18[2] = v21 + 1;
        sub_2141E801C((uint64_t)v25, (uint64_t)&v18[v21 + 4], &qword_253F13188);
        swift_release();
      }
      while (v8 != v16);
    }
    swift_bridgeObjectRelease();
    a3 = v24;
    goto LABEL_21;
  }
  __break(1u);
  return result;
}

uint64_t sub_214243114(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  char v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE v34[8];

  *(_WORD *)(v6 + 16) = 256;
  *(_QWORD *)(v6 + 48) = 0;
  *(_QWORD *)(v6 + 56) = 0;
  *(_QWORD *)(v6 + 40) = 0;
  v12 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v6 + 24) = a1;
  *(_QWORD *)(v6 + 32) = v12;
  if (!(a1 >> 62))
  {
    v13 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v13)
      goto LABEL_3;
LABEL_20:
    swift_bridgeObjectRelease();
LABEL_21:
    swift_unownedRetainStrong();
    swift_unownedRetain();
    swift_unownedRetain();
    swift_retain();
    swift_unownedRelease();
    swift_unownedRelease();
    swift_unownedRetain();
    swift_release();
    v28 = (_QWORD *)swift_allocObject();
    v28[2] = a2;
    v28[3] = a3;
    v28[4] = v6;
    v30 = *(_QWORD *)(v6 + 48);
    v29 = *(_QWORD *)(v6 + 56);
    *(_QWORD *)(v6 + 48) = a5;
    *(_QWORD *)(v6 + 56) = v28;
    a6(v30, v29);
    swift_release();
    return v6;
  }
  swift_bridgeObjectRetain();
  result = sub_2144256AC();
  v13 = result;
  if (!result)
    goto LABEL_20;
LABEL_3:
  if (v13 >= 1)
  {
    v31 = a2;
    v32 = a3;
    v33 = a5;
    v15 = a6;
    if ((a1 & 0xC000000000000001) != 0)
    {
      v16 = 0;
      do
      {
        v17 = MEMORY[0x2199CCE3C](v16, a1);
        swift_weakInit();
        v18 = *(_QWORD **)(v17 + 32);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v17 + 32) = v18;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v18 = sub_214221F04(0, v18[2] + 1, 1, v18);
          *(_QWORD *)(v17 + 32) = v18;
        }
        v21 = v18[2];
        v20 = v18[3];
        if (v21 >= v20 >> 1)
        {
          v18 = sub_214221F04((_QWORD *)(v20 > 1), v21 + 1, 1, v18);
          *(_QWORD *)(v17 + 32) = v18;
        }
        ++v16;
        v18[2] = v21 + 1;
        sub_2141E801C((uint64_t)v34, (uint64_t)&v18[v21 + 4], &qword_253F13188);
        swift_unknownObjectRelease();
      }
      while (v13 != v16);
    }
    else
    {
      v22 = 0;
      do
      {
        v23 = *(_QWORD *)(a1 + 8 * v22 + 32);
        swift_weakInit();
        v24 = *(_QWORD **)(v23 + 32);
        swift_retain();
        v25 = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v23 + 32) = v24;
        if ((v25 & 1) == 0)
        {
          v24 = sub_214221F04(0, v24[2] + 1, 1, v24);
          *(_QWORD *)(v23 + 32) = v24;
        }
        v27 = v24[2];
        v26 = v24[3];
        if (v27 >= v26 >> 1)
        {
          v24 = sub_214221F04((_QWORD *)(v26 > 1), v27 + 1, 1, v24);
          *(_QWORD *)(v23 + 32) = v24;
        }
        ++v22;
        v24[2] = v27 + 1;
        sub_2141E801C((uint64_t)v34, (uint64_t)&v24[v27 + 4], &qword_253F13188);
        swift_release();
      }
      while (v13 != v22);
    }
    swift_bridgeObjectRelease();
    a6 = v15;
    a3 = v32;
    a5 = v33;
    a2 = v31;
    goto LABEL_21;
  }
  __break(1u);
  return result;
}

uint64_t sub_2142433F0(uint64_t *a1, void (*a2)(uint64_t *__return_ptr), uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;

  a2(&v12);
  v6 = v12;
  swift_unownedRetainStrong();
  swift_beginAccess();
  v7 = *(_QWORD *)(a4 + 40);
  sub_2141F9A40(v6);
  sub_21424CE50(v7);
  swift_release();
  if (v7 == 2)
    goto LABEL_2;
  if (v6 == 1)
  {
    if (v7 != 1)
    {
      sub_2141F9A50(v7);
      goto LABEL_4;
    }
    goto LABEL_8;
  }
  if (v7 != 1)
  {
    if (v6)
    {
      if (v7)
      {
        v10 = sub_21420ED58(v6, v7);
        sub_2141F9A50(v7);
        sub_2141F9A30(v6);
        if (!v10)
          goto LABEL_4;
LABEL_8:
        result = 1;
        goto LABEL_5;
      }
      v11 = v6;
    }
    else
    {
      if (!v7)
      {
        sub_2141F9A50(0);
        sub_2141F9A30(0);
        result = 1;
        goto LABEL_5;
      }
      v11 = 0;
    }
    sub_2141F9A50(v7);
    v8 = v11;
    goto LABEL_3;
  }
LABEL_2:
  v8 = v6;
LABEL_3:
  sub_2141F9A30(v8);
LABEL_4:
  result = 0;
LABEL_5:
  *a1 = v6;
  return result;
}

uint64_t sub_214243514(uint64_t a1, void (*a2)(void), uint64_t a3, uint64_t a4)
{
  uint64_t *v6;
  char v7;
  uint64_t *v8;
  _OWORD v10[2];
  uint64_t v11;
  _BYTE v12[40];
  _BYTE v13[24];
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  _BYTE v18[40];
  _BYTE v19[40];
  _BYTE v20[24];
  uint64_t v21;
  _BYTE v22[24];
  uint64_t v23;
  _BYTE v24[40];
  _BYTE v25[40];
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  a2();
  sub_2141E070C(a1, (uint64_t)v25, &qword_253F11E60);
  swift_unownedRetainStrong();
  swift_beginAccess();
  sub_2141E070C(a4 + 40, (uint64_t)v24, &qword_253F10F78);
  swift_release();
  sub_2141E070C((uint64_t)v25, (uint64_t)v20, &qword_253F10F78);
  sub_2141E070C((uint64_t)v24, (uint64_t)v22, &qword_253F10F78);
  if (v21 == 1)
  {
    sub_2141E0750((uint64_t)v24, &qword_253F10F78);
    sub_2141E0750((uint64_t)v25, &qword_253F10F78);
    if (v23 == 1)
      v6 = &qword_253F10F78;
    else
      v6 = (uint64_t *)&unk_253F119E0;
    if (v23 == 1)
      v7 = -1;
    else
      v7 = 0;
  }
  else
  {
    sub_2141E070C((uint64_t)v20, (uint64_t)v19, &qword_253F10F78);
    if (v23 == 1)
    {
      sub_2141E0750((uint64_t)v24, &qword_253F10F78);
      sub_2141E0750((uint64_t)v25, &qword_253F10F78);
      sub_2141E0750((uint64_t)v19, &qword_253F11E60);
      v7 = 0;
      v6 = (uint64_t *)&unk_253F119E0;
    }
    else
    {
      sub_2141E801C((uint64_t)v22, (uint64_t)v18, &qword_253F11E60);
      sub_2141E070C((uint64_t)v19, (uint64_t)v13, &qword_253F11E60);
      sub_2141E070C((uint64_t)v18, (uint64_t)&v15, &qword_253F11E60);
      if (v14)
      {
        sub_2141E070C((uint64_t)v13, (uint64_t)v12, &qword_253F11E60);
        if (*((_QWORD *)&v16 + 1))
        {
          v10[0] = v15;
          v10[1] = v16;
          v11 = v17;
          sub_2141D8BF8(&qword_253F103E8);
          v7 = AGCompareValues();
          sub_2141DEB7C((uint64_t)v10);
          sub_2141DEB7C((uint64_t)v12);
          v8 = &qword_253F11E60;
        }
        else
        {
          sub_2141DEB7C((uint64_t)v12);
          v7 = 0;
          v8 = (uint64_t *)&unk_254D69290;
        }
      }
      else
      {
        if (*((_QWORD *)&v16 + 1))
          v8 = (uint64_t *)&unk_254D69290;
        else
          v8 = &qword_253F11E60;
        if (*((_QWORD *)&v16 + 1))
          v7 = 0;
        else
          v7 = -1;
      }
      sub_2141E0750((uint64_t)v13, v8);
      sub_2141E0750((uint64_t)v18, &qword_253F11E60);
      v6 = &qword_253F10F78;
      sub_2141E0750((uint64_t)v24, &qword_253F10F78);
      sub_2141E0750((uint64_t)v25, &qword_253F10F78);
      sub_2141E0750((uint64_t)v19, &qword_253F11E60);
    }
  }
  sub_2141E0750((uint64_t)v20, v6);
  return v7 & 1;
}

uint64_t sub_2142437C4(uint64_t a1, void (*a2)(_QWORD *__return_ptr), uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  char v10;
  char v11;
  _QWORD v13[2];
  unsigned __int8 v14;

  a2(v13);
  v6 = v13[0];
  v7 = v13[1];
  v8 = v14;
  swift_unownedRetainStrong();
  swift_beginAccess();
  v9 = *(unsigned __int8 *)(a4 + 56);
  v10 = *(_BYTE *)(a4 + 57);
  swift_release();
  if ((v10 & 1) != 0)
  {
    v11 = 0;
  }
  else if (((v8 | v9) & 1) != 0)
  {
    v11 = v8 & v9;
  }
  else
  {
    v11 = sub_214424C20();
  }
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  *(_BYTE *)(a1 + 16) = v8;
  return v11 & 1;
}

uint64_t sub_21424388C(float64x2_t *a1, void (*a2)(_OWORD *__return_ptr), uint64_t a3, uint64_t a4)
{
  int v6;
  uint16x4_t v7;
  float64x2_t v9;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;
  _OWORD v13[2];

  a2(v13);
  swift_unownedRetainStrong();
  swift_beginAccess();
  v11 = *(float64x2_t *)(a4 + 40);
  v12 = (float64x2_t)v13[0];
  v9 = *(float64x2_t *)(a4 + 56);
  v10 = (float64x2_t)v13[1];
  v6 = *(unsigned __int8 *)(a4 + 72);
  swift_release();
  v7 = (uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(v12, v11), (int32x4_t)vceqq_f64(v10, v9))), 0xFuLL));
  v7.i16[0] = vminv_u16(v7);
  *a1 = v12;
  a1[1] = v10;
  return v7.i32[0] & ~v6 & 1;
}

uint64_t sub_21424393C(_QWORD *a1, void (*a2)(uint64_t *__return_ptr), uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v12;

  a2(&v12);
  v8 = v12;
  swift_unownedRetainStrong();
  swift_beginAccess();
  v9 = *(_QWORD *)(a4 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  if (v9)
  {
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    v10 = a5(v8, v9);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  else
  {
    swift_bridgeObjectRelease();
    v10 = 0;
  }
  *a1 = v8;
  return v10 & 1;
}

uint64_t sub_214243A14(_QWORD *a1, void (*a2)(uint64_t *__return_ptr), uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v12;

  a2(&v12);
  v8 = v12;
  swift_unownedRetainStrong();
  swift_beginAccess();
  v9 = *(_QWORD *)(a4 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  if (v9)
  {
    v10 = a5(v8, v9);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v10 = 0;
  }
  *a1 = v8;
  return v10 & 1;
}

uint64_t sub_214243AD0(void (*a1)(uint64_t *__return_ptr, char *), uint64_t a2, uint64_t a3)
{
  uint64_t result;
  char v6;
  uint64_t v7;

  sub_2143F8874();
  swift_beginAccess();
  if (*(_BYTE *)(a3 + 40) == 3)
  {
    result = sub_214425628();
    __break(1u);
  }
  else
  {
    v6 = *(_BYTE *)(a3 + 40);
    a1(&v7, &v6);
    return v7;
  }
  return result;
}

uint64_t sub_214243B8C(void (*a1)(uint64_t *__return_ptr, uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  sub_2143F8874();
  swift_beginAccess();
  v5 = *(_QWORD *)(a3 + 40);
  if (v5 == 1)
  {
    result = sub_214425628();
    __break(1u);
  }
  else
  {
    v7 = *(_QWORD *)(a3 + 40);
    swift_retain();
    a1(&v8, &v7);
    sub_21424CD7C(v5);
    return v8;
  }
  return result;
}

uint64_t sub_214243C58(void (*a1)(uint64_t *__return_ptr, uint64_t *), uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  sub_2143F8874();
  swift_beginAccess();
  v7 = *(_QWORD *)(a3 + 40);
  if (v7 == 1)
  {
    result = sub_214425628();
    __break(1u);
  }
  else
  {
    v9 = *(_QWORD *)(a3 + 40);
    swift_bridgeObjectRetain();
    a1(&v10, &v9);
    a4(v7);
    return v10;
  }
  return result;
}

uint64_t sub_214243D30(void (*a1)(uint64_t *__return_ptr, uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  sub_2143F8874();
  swift_beginAccess();
  if (*(_QWORD *)(a3 + 40))
  {
    v6 = *(_QWORD *)(a3 + 40);
    swift_bridgeObjectRetain();
    a1(&v7, &v6);
    return swift_bridgeObjectRelease();
  }
  else
  {
    result = sub_214425628();
    __break(1u);
  }
  return result;
}

_QWORD *sub_214243DFC(_QWORD *(*a1)(uint64_t *__return_ptr, __int128 *), uint64_t a2, uint64_t a3)
{
  _QWORD *result;
  __int128 v6;
  uint64_t v7;

  sub_2143F8874();
  swift_beginAccess();
  if ((*(_BYTE *)(a3 + 56) & 1) != 0)
  {
    result = (_QWORD *)sub_214425628();
    __break(1u);
  }
  else
  {
    v6 = *(_OWORD *)(a3 + 40);
    return a1(&v7, &v6);
  }
  return result;
}

uint64_t sub_214243EC0(void (*a1)(uint64_t *__return_ptr, uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  sub_2143F8874();
  swift_beginAccess();
  if (*(_QWORD *)(a3 + 40))
  {
    v6 = *(_QWORD *)(a3 + 40);
    swift_bridgeObjectRetain();
    a1(&v7, &v6);
    swift_bridgeObjectRelease();
    return v7;
  }
  else
  {
    result = sub_214425628();
    __break(1u);
  }
  return result;
}

uint64_t sub_214243F8C(void (*a1)(uint64_t *__return_ptr, __int128 *, uint64_t *, uint64_t *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;

  sub_2143F8874();
  swift_beginAccess();
  if ((*(_BYTE *)(a3 + 56) & 1) != 0
    || (v12 = *(_OWORD *)(a3 + 40), sub_2143F8874(), swift_beginAccess(), (*(_BYTE *)(a4 + 48) & 1) != 0)
    || (v11 = *(_QWORD *)(a4 + 40), sub_2143F8874(), swift_beginAccess(), (*(_BYTE *)(a5 + 48) & 1) != 0))
  {
    result = sub_214425628();
    __break(1u);
  }
  else
  {
    v10 = *(_QWORD *)(a5 + 40);
    a1(&v13, &v12, &v11, &v10);
    return v13;
  }
  return result;
}

uint64_t sub_2142440C8(void (*a1)(uint64_t *__return_ptr, uint64_t *, char *, _QWORD *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  _QWORD v13[2];
  char v14;
  uint64_t v15;
  uint64_t v16;

  sub_2143F8874();
  swift_beginAccess();
  if (!*(_QWORD *)(a3 + 40))
    goto LABEL_5;
  v15 = *(_QWORD *)(a3 + 40);
  swift_bridgeObjectRetain();
  sub_2143F8874();
  swift_beginAccess();
  v9 = *(unsigned __int8 *)(a4 + 40);
  if (v9 == 2 || (v14 = v9 & 1, sub_2143F8874(), swift_beginAccess(), v10 = *(_QWORD *)(a5 + 40), v10 == 1))
  {
LABEL_5:
    result = sub_214425628();
    __break(1u);
  }
  else
  {
    v11 = *(_QWORD *)(a5 + 48);
    v13[0] = v10;
    v13[1] = v11;
    sub_2141D975C(v10);
    a1(&v16, &v15, &v14, v13);
    sub_2141F9A60(v10);
    swift_bridgeObjectRelease();
    return v16;
  }
  return result;
}

uint64_t sub_214244220(void (*a1)(uint64_t *__return_ptr, _QWORD *, __int128 *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_214244234(a1, a2, a3, a4, a5, (void (*)(uint64_t, uint64_t))sub_2141DD47C, (void (*)(uint64_t, uint64_t))sub_2141FA1C4);
}

uint64_t sub_214244234(void (*a1)(uint64_t *__return_ptr, _QWORD *, __int128 *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t, uint64_t), void (*a7)(uint64_t, uint64_t))
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 v31;
  uint64_t result;
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t *__return_ptr, _QWORD *, __int128 *, char *);
  void (*v38)(uint64_t, uint64_t);
  __int128 v39;
  _QWORD v40[3];
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned __int8 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;

  v38 = a7;
  v34 = a6;
  v35 = a5;
  v36 = a2;
  v37 = a1;
  v9 = sub_2141D8BF8(&qword_253F13490);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_2144240D4();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2143F8874();
  swift_beginAccess();
  v16 = *(_QWORD *)(a3 + 40);
  if (v16)
  {
    v17 = *(_OWORD *)(a3 + 128);
    v47 = *(_OWORD *)(a3 + 112);
    v19 = *(_QWORD *)(a3 + 88);
    v18 = *(_QWORD *)(a3 + 96);
    v21 = *(_QWORD *)(a3 + 72);
    v20 = *(_QWORD *)(a3 + 80);
    v22 = *(_DWORD *)(a3 + 64);
    v23 = *(_QWORD *)(a3 + 48);
    v24 = *(_QWORD *)(a3 + 56);
    v40[0] = v16;
    v40[1] = v23;
    v40[2] = v24;
    v41 = v22 & 1;
    v42 = v21;
    v43 = v20;
    v44 = v19;
    v45 = v18;
    v25 = *(_BYTE *)(a3 + 104);
    v46 = v25;
    v48 = v17;
    swift_retain();
    v34(v21, v20);
    swift_bridgeObjectRetain();
    sub_2141E83DC(v18, v25);
    sub_2143F8874();
    swift_beginAccess();
    if ((*(_BYTE *)(a4 + 56) & 1) == 0)
    {
      v39 = *(_OWORD *)(a4 + 40);
      v26 = v35;
      sub_2143F8874();
      v27 = v26 + *(_QWORD *)(*(_QWORD *)v26 + 248);
      swift_beginAccess();
      sub_2141E070C(v27, (uint64_t)v11, &qword_253F13490);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) != 1)
      {
        (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v15, v11, v12);
        v37(&v49, v40, &v39, v15);
        (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
        v28 = v42;
        v29 = v43;
        v30 = v45;
        v31 = v46;
        swift_release();
        v38(v28, v29);
        swift_bridgeObjectRelease();
        sub_21421BBC0(v30, v31);
        return v49;
      }
      sub_2141E0750((uint64_t)v11, &qword_253F13490);
    }
  }
  result = sub_214425628();
  __break(1u);
  return result;
}

uint64_t sub_214244518(void (*a1)(uint64_t *__return_ptr, uint64_t *, uint64_t *, _QWORD *), uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t *__return_ptr, uint64_t *, uint64_t *, _QWORD *);
  uint64_t v26;
  _QWORD v27[3];
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  sub_2143F8874();
  swift_beginAccess();
  v9 = *(_QWORD *)(a3 + 40);
  if ((~v9 & 0xF000000000000007) == 0)
    goto LABEL_5;
  v39 = *(_QWORD *)(a3 + 40);
  swift_retain();
  sub_2143F8874();
  swift_beginAccess();
  if ((*(_BYTE *)(a4 + 48) & 1) != 0)
    goto LABEL_5;
  v25 = a1;
  v26 = v9;
  v38 = *(_QWORD *)(a4 + 40);
  sub_2143F8874();
  swift_beginAccess();
  v10 = a5[5];
  if (v10)
  {
    v21 = a5[17];
    v22 = a5[16];
    v23 = a5[15];
    v24 = a5[14];
    v12 = a5[12];
    v11 = a5[13];
    v14 = a5[10];
    v13 = a5[11];
    v15 = a5[8];
    v16 = a5[9];
    v19 = a5 + 6;
    v18 = a5[6];
    v17 = v19[1];
    v27[0] = v10;
    v27[1] = v18;
    v27[2] = v17;
    v28 = v15 & 1;
    v29 = v16;
    v30 = v14;
    v31 = v13;
    v32 = v12;
    v33 = v11;
    v34 = v24;
    v35 = v23;
    v36 = v22;
    v37 = v21;
    swift_retain();
    sub_2141D975C(v16);
    swift_bridgeObjectRetain();
    sub_2141E83DC(v12, v11);
    v25(&v40, &v39, &v38, v27);
    sub_21424D200(v10, v18, v17, v15, v16, v14, v13, v12, v11, v24, v23, v22, v21, (void (*)(uint64_t, uint64_t))sub_2141FA1C4);
    sub_2141F9AA8(v26);
    return v40;
  }
  else
  {
LABEL_5:
    result = sub_214425628();
    __break(1u);
  }
  return result;
}

uint64_t sub_214244720(void (*a1)(uint64_t *__return_ptr, uint64_t *, __int128 *, _OWORD *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  __int128 v10;
  uint64_t result;
  _OWORD v12[2];
  __int128 v13;
  uint64_t v14;
  uint64_t v15;

  sub_2143F8874();
  swift_beginAccess();
  v9 = *(_QWORD *)(a3 + 40);
  if ((~v9 & 0xF000000000000007) == 0
    || (v14 = *(_QWORD *)(a3 + 40), swift_retain(), sub_2143F8874(), swift_beginAccess(), (*(_BYTE *)(a4 + 56) & 1) != 0)
    || (v13 = *(_OWORD *)(a4 + 40), sub_2143F8874(), swift_beginAccess(), (*(_BYTE *)(a5 + 72) & 1) != 0))
  {
    result = sub_214425628();
    __break(1u);
  }
  else
  {
    v10 = *(_OWORD *)(a5 + 56);
    v12[0] = *(_OWORD *)(a5 + 40);
    v12[1] = v10;
    a1(&v15, &v14, &v13, v12);
    sub_2141F9AA8(v9);
    return v15;
  }
  return result;
}

uint64_t sub_214244868(void (*a1)(uint64_t *__return_ptr, char *, uint64_t *, uint64_t *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;

  v9 = sub_2141D8BF8(&qword_253F147A8);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for AxisMarkValues.Storage(0);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2143F8874();
  v16 = a3 + *(_QWORD *)(*(_QWORD *)a3 + 248);
  swift_beginAccess();
  sub_2141E070C(v16, (uint64_t)v11, &qword_253F147A8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
    sub_2141E0750((uint64_t)v11, &qword_253F147A8);
  }
  else
  {
    sub_2141FE1E0((uint64_t)v11, (uint64_t)v15, type metadata accessor for AxisMarkValues.Storage);
    sub_2143F8874();
    swift_beginAccess();
    if ((*(_BYTE *)(a4 + 49) & 1) == 0)
    {
      v17 = *(_BYTE *)(a4 + 48);
      v22 = *(_QWORD *)(a4 + 40);
      v23 = v17 & 1;
      sub_2143F8874();
      swift_beginAccess();
      v18 = *(_QWORD *)(a5 + 40);
      if (v18)
      {
        v21 = v18;
        swift_bridgeObjectRetain();
        a1(&v24, v15, &v22, &v21);
        swift_bridgeObjectRelease();
        sub_2141F98F8((uint64_t)v15);
        return v24;
      }
    }
  }
  result = sub_214425628();
  __break(1u);
  return result;
}

uint64_t sub_214244A8C(void (*a1)(uint64_t *, _BYTE *, uint64_t *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  _BYTE v12[48];
  _BYTE v13[48];
  uint64_t v14;

  sub_2143F8874();
  swift_beginAccess();
  if (*(_QWORD *)(a3 + 40))
  {
    v14 = *(_QWORD *)(a3 + 40);
    swift_bridgeObjectRetain();
    sub_2143F8874();
    swift_beginAccess();
    sub_2141E070C(a4 + 40, (uint64_t)v12, &qword_253F11B50);
    if (v12[40] == 255)
    {
      sub_2141E0750((uint64_t)v12, &qword_253F11B50);
    }
    else
    {
      sub_21424CA58((uint64_t)v12, (uint64_t)v13);
      sub_2143F8874();
      swift_beginAccess();
      v9 = *(_QWORD *)(a5 + 40);
      if (v9)
      {
        v11 = v9;
        swift_retain();
        a1(&v14, v13, &v11);
        swift_release();
        sub_2141DE9E0((uint64_t)v13);
        return swift_bridgeObjectRelease();
      }
    }
  }
  result = sub_214425628();
  __break(1u);
  return result;
}

uint64_t sub_214244C04@<X0>(void (*a1)(char *, char *, uint64_t *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t *v26;
  uint64_t v27;
  _QWORD v28[2];
  void (*v29)(char *, char *, uint64_t *);
  uint64_t v30;
  uint64_t v31;

  v28[0] = a5;
  v28[1] = a6;
  v29 = a1;
  v30 = a2;
  v8 = sub_2141D8BF8(&qword_253F13D88);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_214423C54();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_2141D8BF8(&qword_253F13348);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_214423B94();
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)v28 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2143F8874();
  v22 = a3 + *(_QWORD *)(*(_QWORD *)a3 + 248);
  swift_beginAccess();
  sub_2141E070C(v22, (uint64_t)v17, &qword_253F13348);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18) == 1)
  {
    v26 = &qword_253F13348;
    v27 = (uint64_t)v17;
LABEL_7:
    sub_2141E0750(v27, v26);
    goto LABEL_8;
  }
  (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v21, v17, v18);
  sub_2143F8874();
  v23 = a4 + *(_QWORD *)(*(_QWORD *)a4 + 248);
  swift_beginAccess();
  sub_2141E070C(v23, (uint64_t)v10, &qword_253F13D88);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    v26 = &qword_253F13D88;
    v27 = (uint64_t)v10;
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v14, v10, v11);
  v24 = v28[0];
  sub_2143F8874();
  swift_beginAccess();
  if (*(_QWORD *)(v24 + 40))
  {
    v31 = *(_QWORD *)(v24 + 40);
    swift_bridgeObjectRetain();
    v29(v21, v14, &v31);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v21, v18);
  }
LABEL_8:
  result = sub_214425628();
  __break(1u);
  return result;
}

uint64_t sub_214244EEC@<X0>(void (*a1)(uint64_t *, char *, char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t *v26;
  uint64_t v27;
  _QWORD v28[3];
  void (*v29)(uint64_t *, char *, char *);
  uint64_t v30;

  v28[0] = a5;
  v28[1] = a6;
  v28[2] = a2;
  v29 = a1;
  v8 = sub_2141D8BF8(&qword_253F13D88);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_214423C54();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_2141D8BF8(&qword_253F13348);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_214423B94();
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)v28 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2143F8874();
  swift_beginAccess();
  if (*(_QWORD *)(a3 + 40))
  {
    v30 = *(_QWORD *)(a3 + 40);
    swift_bridgeObjectRetain();
    sub_2143F8874();
    v22 = a4 + *(_QWORD *)(*(_QWORD *)a4 + 248);
    swift_beginAccess();
    sub_2141E070C(v22, (uint64_t)v17, &qword_253F13348);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18) == 1)
    {
      v26 = &qword_253F13348;
      v27 = (uint64_t)v17;
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v21, v17, v18);
      v23 = v28[0];
      sub_2143F8874();
      v24 = v23 + *(_QWORD *)(*(_QWORD *)v23 + 248);
      swift_beginAccess();
      sub_2141E070C(v24, (uint64_t)v10, &qword_253F13D88);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) != 1)
      {
        (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v14, v10, v11);
        v29(&v30, v21, v14);
        (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
        (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
        return swift_bridgeObjectRelease();
      }
      v26 = &qword_253F13D88;
      v27 = (uint64_t)v10;
    }
    sub_2141E0750(v27, v26);
  }
  result = sub_214425628();
  __break(1u);
  return result;
}

uint64_t sub_2142451D0(void (*a1)(uint64_t *__return_ptr, _OWORD *, char *, __int128 *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  __int128 v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  __int128 *v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t *__return_ptr, _OWORD *, char *, __int128 *);
  __int128 v33;
  char v34[8];
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  _OWORD v48[2];
  uint64_t v49[3];

  sub_2143F8874();
  swift_beginAccess();
  if ((*(_BYTE *)(a3 + 72) & 1) != 0)
    goto LABEL_5;
  v9 = a5;
  v32 = a1;
  v10 = *(_OWORD *)(a3 + 56);
  v48[0] = *(_OWORD *)(a3 + 40);
  v48[1] = v10;
  sub_2143F8874();
  swift_beginAccess();
  v11 = *(_QWORD *)(a4 + 88);
  if (v11 >> 1 == 0xFFFFFFFF)
    goto LABEL_5;
  v12 = *(_QWORD *)(a4 + 40);
  v13 = *(_QWORD *)(a4 + 48);
  v14 = *(_QWORD *)(a4 + 56);
  v15 = *(_QWORD *)(a4 + 64);
  v17 = *(_QWORD *)(a4 + 72);
  v16 = *(_QWORD *)(a4 + 80);
  v18 = *(_QWORD *)(a4 + 96);
  v19 = *(_QWORD *)(a4 + 104);
  v20 = *(_QWORD *)(a4 + 112);
  v21 = *(_QWORD *)(a4 + 120);
  v22 = *(_QWORD *)(a4 + 128);
  v23 = *(_QWORD *)(a4 + 136);
  v24 = *(_BYTE *)(a4 + 144);
  v30 = v13;
  v31 = v12;
  v34[0] = v12;
  v35 = v13;
  v36 = v14;
  v28 = v15;
  v29 = v14;
  v37 = v15;
  v38 = v17;
  v39 = v16;
  v40 = v11;
  v41 = v18;
  v42 = v19;
  v43 = v20;
  v44 = v21;
  v45 = v22;
  v46 = v23;
  v47 = v24;
  sub_2141ED014(v17, v16, v11);
  v25 = v9;
  sub_2143F8874();
  v26 = (__int128 *)(v9 + 40);
  swift_beginAccess();
  if ((*(_BYTE *)(v25 + 56) & 1) != 0)
  {
LABEL_5:
    result = sub_214425628();
    __break(1u);
  }
  else
  {
    v33 = *v26;
    v32(v49, v48, v34, &v33);
    sub_2141F9AC0(v31, v30, v29, v28, v17, v16, v11);
    return v49[0];
  }
  return result;
}

uint64_t sub_2142453B8(void (*a1)(uint64_t *__return_ptr, char *, char *, _BYTE *, uint64_t *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  _BYTE v14[48];
  _BYTE v15[48];
  char v16;
  char v17;
  uint64_t v18;

  sub_2143F8874();
  swift_beginAccess();
  if (*(_BYTE *)(a3 + 40) != 3)
  {
    v17 = *(_BYTE *)(a3 + 40);
    sub_2143F8874();
    swift_beginAccess();
    if (*(_BYTE *)(a4 + 40) != 4)
    {
      v16 = *(_BYTE *)(a4 + 40);
      sub_2143F8874();
      swift_beginAccess();
      sub_2141E070C(a5 + 40, (uint64_t)v14, &qword_253F146B8);
      if (v14[40] == 255)
      {
        sub_2141E0750((uint64_t)v14, &qword_253F146B8);
      }
      else
      {
        sub_21422F3C0((uint64_t)v14, (uint64_t)v15);
        sub_2143F8874();
        swift_beginAccess();
        v11 = *(_QWORD *)(a6 + 40);
        if (v11)
        {
          v13 = v11;
          swift_retain();
          a1(&v18, &v17, &v16, v15, &v13);
          swift_release();
          sub_21422F27C((uint64_t)v15);
          return v18;
        }
      }
    }
  }
  result = sub_214425628();
  __break(1u);
  return result;
}

uint64_t sub_214245564(void (*a1)(_QWORD *__return_ptr, char *, char *, uint64_t *, _BYTE *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;
  _QWORD v12[5];
  unsigned __int8 v13;
  _BYTE v14[48];
  uint64_t v15;
  char v16;
  char v17;

  sub_2143F8874();
  swift_beginAccess();
  if (*(_BYTE *)(a3 + 40) != 3)
  {
    v17 = *(_BYTE *)(a3 + 40);
    sub_2143F8874();
    swift_beginAccess();
    if (*(_BYTE *)(a4 + 40) != 4)
    {
      v16 = *(_BYTE *)(a4 + 40);
      sub_2143F8874();
      swift_beginAccess();
      if (*(_QWORD *)(a5 + 40))
      {
        v15 = *(_QWORD *)(a5 + 40);
        swift_retain();
        sub_2143F8874();
        swift_beginAccess();
        sub_2141E070C(a6 + 40, (uint64_t)v12, &qword_253F146B8);
        if (v13 != 255)
        {
          sub_21422F3C0((uint64_t)v12, (uint64_t)v14);
          a1(v12, &v17, &v16, &v15, v14);
          sub_21422F27C((uint64_t)v14);
          swift_release();
          return v12[0];
        }
        sub_2141E0750((uint64_t)v12, &qword_253F146B8);
      }
    }
  }
  result = sub_214425628();
  __break(1u);
  return result;
}

uint64_t sub_21424570C(void (*a1)(uint64_t *__return_ptr, uint64_t *, uint64_t *, uint64_t *, char *), uint64_t a2, uint64_t a3, _QWORD *a4, _QWORD *a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t result;
  uint64_t v44;
  void (*v45)(uint64_t *__return_ptr, uint64_t *, uint64_t *, uint64_t *, char *);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;

  v45 = a1;
  v10 = sub_2141D8BF8(&qword_253F13348);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_214423B94();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2143F8874();
  swift_beginAccess();
  if (*(_QWORD *)(a3 + 40))
  {
    v71 = *(_QWORD *)(a3 + 40);
    swift_bridgeObjectRetain();
    sub_2143F8874();
    swift_beginAccess();
    v17 = a4[5];
    if (v17 != 1)
    {
      v19 = a4[15];
      v18 = a4[16];
      v21 = a4[13];
      v20 = a4[14];
      v22 = a4[11];
      v23 = a4[12];
      v24 = a4[9];
      v25 = a4[10];
      v26 = a4[7];
      v27 = a4[8];
      v28 = a4[6];
      v59 = a4[5];
      v60 = v28;
      v61 = v26;
      v62 = v27;
      v63 = v24;
      v64 = v25;
      v65 = v22;
      v66 = v23;
      v67 = v21;
      v68 = v20;
      v69 = v19;
      v70 = v18;
      sub_21424D040(v17, v28, v26, v27, v24, v25, v22, v23, v21, v20, v19, v18, (void (*)(uint64_t, uint64_t))sub_2141DD47C);
      sub_2143F8874();
      swift_beginAccess();
      v29 = a5[5];
      if (v29 != 1)
      {
        v31 = a5[16];
        v30 = a5[17];
        v33 = a5[14];
        v32 = a5[15];
        v34 = a5[12];
        v35 = a5[13];
        v36 = a5[10];
        v37 = a5[11];
        v38 = a5[8];
        v39 = a5[9];
        v40 = a5[6];
        v41 = a5[7];
        v46 = a5[5];
        v47 = v40;
        v48 = v41;
        v49 = v38;
        v50 = v39;
        v51 = v36;
        v52 = v37;
        v53 = v34;
        v54 = v35;
        v55 = v33;
        v56 = v32;
        v57 = v31;
        v58 = v30;
        sub_21424D150(v29, v40, v41, v38, v39, v36, v37, v34, v35, v33, v32, v31, v30, (void (*)(uint64_t, uint64_t))sub_2141DD47C);
        sub_2143F8874();
        v42 = a6 + *(_QWORD *)(*(_QWORD *)a6 + 248);
        swift_beginAccess();
        sub_2141E070C(v42, (uint64_t)v12, &qword_253F13348);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) != 1)
        {
          (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v16, v12, v13);
          v45(&v72, &v71, &v59, &v46, v16);
          (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
          sub_21424D200(v46, v47, v48, v49, v50, v51, v52, v53, v54, v55, v56, v57, v58, (void (*)(uint64_t, uint64_t))sub_2141FA1C4);
          sub_21424D364(v59, v60, v61, v62, v63, v64, v65, v66, v67, v68, v69, v70, (void (*)(uint64_t, uint64_t))sub_2141FA1C4);
          swift_bridgeObjectRelease();
          return v72;
        }
        sub_2141E0750((uint64_t)v12, &qword_253F13348);
      }
    }
  }
  result = sub_214425628();
  __break(1u);
  return result;
}

uint64_t sub_214245A6C(void (*a1)(uint64_t *__return_ptr, uint64_t *, _BYTE *, _BYTE *, _QWORD *), uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t result;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t *__return_ptr, uint64_t *, _BYTE *, _BYTE *, _QWORD *);
  _QWORD v43[13];
  _QWORD v44[16];
  _BYTE v45[128];
  _QWORD v46[16];
  uint64_t v47[16];
  _QWORD v48[16];
  _BYTE v49[128];
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  sub_2143F8874();
  swift_beginAccess();
  v11 = a3[5];
  if (v11 != 1)
  {
    v13 = a3[15];
    v12 = a3[16];
    v15 = a3[13];
    v14 = a3[14];
    v16 = a3[11];
    v17 = a3[12];
    v18 = a3[9];
    v19 = a3[10];
    v20 = a3[7];
    v21 = a3[8];
    v22 = a3[6];
    v50 = a3[5];
    v51 = v22;
    v52 = v20;
    v53 = v21;
    v54 = v18;
    v55 = v19;
    v56 = v16;
    v57 = v17;
    v58 = v15;
    v59 = v14;
    v60 = v13;
    v61 = v12;
    sub_21424D040(v11, v22, v20, v21, v18, v19, v16, v17, v15, v14, v13, v12, (void (*)(uint64_t, uint64_t))sub_2141DD47C);
    sub_2143F8874();
    swift_beginAccess();
    sub_2141E070C(a4 + 40, (uint64_t)v48, &qword_253F137D8);
    if (v48[0] == 1)
    {
      sub_2141E0750((uint64_t)v48, &qword_253F137D8);
    }
    else
    {
      sub_2141E801C((uint64_t)v48, (uint64_t)v49, &qword_253F12F60);
      sub_2143F8874();
      swift_beginAccess();
      sub_2141E801C(a5 + 40, (uint64_t)v46, &qword_253F12F58);
      sub_2141E801C((uint64_t)v46, (uint64_t)v47, &qword_253F12F58);
      if (sub_21424D0C0(v47) != 1)
      {
        v42 = a1;
        sub_2141E801C((uint64_t)v46, (uint64_t)v44, &qword_253F12F58);
        sub_2141E801C((uint64_t)v44, (uint64_t)v45, &qword_253F12F50);
        sub_21424D26C(v44, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21424D0E4);
        sub_2143F8874();
        swift_beginAccess();
        v23 = a6[5];
        if (v23 != 1)
        {
          v25 = a6[16];
          v24 = a6[17];
          v27 = a6[14];
          v26 = a6[15];
          v28 = a6[12];
          v29 = a6[13];
          v31 = a6[10];
          v30 = a6[11];
          v33 = a6[8];
          v32 = a6[9];
          v36 = a6 + 6;
          v35 = a6[6];
          v34 = v36[1];
          v43[0] = v23;
          v43[1] = v35;
          v43[2] = v34;
          v43[3] = v33;
          v43[4] = v32;
          v43[5] = v31;
          v38 = v32;
          v39 = v31;
          v43[6] = v30;
          v43[7] = v28;
          v40 = v30;
          v41 = v28;
          v43[8] = v29;
          v43[9] = v27;
          v43[10] = v26;
          v43[11] = v25;
          v43[12] = v24;
          sub_21424D150(v23, v35, v34, v33, v32, v31, v30, v28, v29, v27, v26, v25, v24, (void (*)(uint64_t, uint64_t))sub_2141DD47C);
          v42(&v62, &v50, v49, v45, v43);
          sub_21424D1BC(v23, v35, v34, v33, v38, v39, v40, v41, v29, v27, v26, v25, v24);
          sub_21424D26C(v46, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21424D2C8);
          sub_2141E0750((uint64_t)v49, &qword_253F12F60);
          sub_21424D364(v50, v51, v52, v53, v54, v55, v56, v57, v58, v59, v60, v61, (void (*)(uint64_t, uint64_t))sub_2141FA1C4);
          return v62;
        }
      }
    }
  }
  result = sub_214425628();
  __break(1u);
  return result;
}

uint64_t sub_214245DA8(void (*a1)(uint64_t *__return_ptr, uint64_t *, uint64_t *, uint64_t *, uint64_t *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  sub_2143F8874();
  swift_beginAccess();
  v11 = *(_QWORD *)(a3 + 40);
  if ((~v11 & 0xF000000000000007) == 0)
    goto LABEL_6;
  v19 = *(_QWORD *)(a3 + 40);
  swift_retain();
  sub_2143F8874();
  swift_beginAccess();
  v12 = *(_QWORD *)(a4 + 40);
  if (!v12)
    goto LABEL_6;
  v18 = v12;
  swift_bridgeObjectRetain();
  sub_2143F8874();
  swift_beginAccess();
  v13 = *(_QWORD *)(a5 + 40);
  if (!v13)
    goto LABEL_6;
  v17 = v13;
  swift_bridgeObjectRetain();
  sub_2143F8874();
  swift_beginAccess();
  v14 = *(_QWORD *)(a6 + 40);
  if (v14)
  {
    v16 = v14;
    swift_bridgeObjectRetain();
    a1(&v20, &v19, &v18, &v17, &v16);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_2141F9AA8(v11);
    return v20;
  }
  else
  {
LABEL_6:
    result = sub_214425628();
    __break(1u);
  }
  return result;
}

uint64_t sub_214245F48(void (*a1)(uint64_t *__return_ptr, char *, uint64_t *, uint64_t *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t *__return_ptr, char *, uint64_t *, uint64_t *, char *);
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;

  v31 = a6;
  v33 = a2;
  v34 = a1;
  v9 = sub_2141D8BF8(&qword_253F13D88);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = sub_214423C54();
  v12 = *(_QWORD *)(v32 - 8);
  MEMORY[0x24BDAC7A8](v32);
  v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_2141D8BF8(&qword_253F147A8);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v30 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for AxisMarkValues.Storage(0);
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)&v30 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2143F8874();
  v22 = a3 + *(_QWORD *)(*(_QWORD *)a3 + 248);
  swift_beginAccess();
  sub_2141E070C(v22, (uint64_t)v17, &qword_253F147A8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18) == 1)
  {
    v28 = &qword_253F147A8;
    v29 = (uint64_t)v17;
  }
  else
  {
    sub_2141FE1E0((uint64_t)v17, (uint64_t)v21, type metadata accessor for AxisMarkValues.Storage);
    sub_2143F8874();
    swift_beginAccess();
    if (!*(_QWORD *)(a4 + 40))
      goto LABEL_9;
    v37 = *(_QWORD *)(a4 + 40);
    swift_bridgeObjectRetain();
    sub_2143F8874();
    swift_beginAccess();
    if ((*(_BYTE *)(a5 + 49) & 1) != 0)
      goto LABEL_9;
    v23 = *(_BYTE *)(a5 + 48);
    v35 = *(_QWORD *)(a5 + 40);
    v36 = v23 & 1;
    v24 = v31;
    sub_2143F8874();
    v25 = v24 + *(_QWORD *)(*(_QWORD *)v24 + 248);
    swift_beginAccess();
    sub_2141E070C(v25, (uint64_t)v11, &qword_253F13D88);
    v26 = v32;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1, v32) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v14, v11, v26);
      v34(&v38, v21, &v37, &v35, v14);
      (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v26);
      swift_bridgeObjectRelease();
      sub_2141F98F8((uint64_t)v21);
      return v38;
    }
    v28 = &qword_253F13D88;
    v29 = (uint64_t)v11;
  }
  sub_2141E0750(v29, v28);
LABEL_9:
  result = sub_214425628();
  __break(1u);
  return result;
}

uint64_t sub_21424626C(void (*a1)(uint64_t *, _BYTE *, char *, uint64_t *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;
  uint64_t v12;
  char v13;
  _BYTE v14[48];
  _BYTE v15[48];
  uint64_t v16;

  sub_2143F8874();
  swift_beginAccess();
  if (*(_QWORD *)(a3 + 40))
  {
    v16 = *(_QWORD *)(a3 + 40);
    swift_bridgeObjectRetain();
    sub_2143F8874();
    swift_beginAccess();
    sub_2141E070C(a4 + 40, (uint64_t)v14, &qword_253F11B50);
    if (v14[40] == 255)
    {
      sub_2141E0750((uint64_t)v14, &qword_253F11B50);
    }
    else
    {
      sub_21424CA58((uint64_t)v14, (uint64_t)v15);
      sub_2143F8874();
      swift_beginAccess();
      if (*(_BYTE *)(a5 + 40) != 4)
      {
        v13 = *(_BYTE *)(a5 + 40);
        sub_2143F8874();
        swift_beginAccess();
        if ((*(_BYTE *)(a6 + 48) & 1) == 0)
        {
          v12 = *(_QWORD *)(a6 + 40);
          a1(&v16, v15, &v13, &v12);
          sub_2141DE9E0((uint64_t)v15);
          return swift_bridgeObjectRelease();
        }
      }
    }
  }
  result = sub_214425628();
  __break(1u);
  return result;
}

uint64_t sub_214246418(void (*a1)(uint64_t *__return_ptr, _BYTE *, _BYTE *, uint64_t *, _BYTE *, _BYTE *, _QWORD *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  uint64_t *v30;
  _BYTE *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int8 v35;
  void (*v36)(uint64_t *__return_ptr, _BYTE *, _BYTE *, uint64_t *, _BYTE *, _BYTE *, _QWORD *);
  _BYTE v37[344];
  _QWORD v38[12];
  char v39;
  _BYTE v40[136];
  _BYTE v41[136];
  _BYTE v42[136];
  _BYTE v43[136];
  _BYTE v44[136];
  _BYTE v45[136];
  uint64_t v46;
  _BYTE __src[344];
  _BYTE __dst[344];
  _BYTE v49[344];
  _BYTE v50[344];
  _BYTE v51[24];
  uint64_t v52;
  _BYTE v53[40];
  uint64_t v54;

  sub_2143F8874();
  swift_beginAccess();
  sub_2141E070C(a3 + 40, (uint64_t)v51, qword_253F13800);
  if (v52 == 1)
  {
    v30 = qword_253F13800;
    v31 = v51;
LABEL_10:
    sub_2141E0750((uint64_t)v31, v30);
    goto LABEL_11;
  }
  sub_2141E801C((uint64_t)v51, (uint64_t)v53, &qword_253F12F70);
  sub_2143F8874();
  swift_beginAccess();
  sub_2141E801C(a4 + 40, (uint64_t)v49, qword_253F128B0);
  sub_2141E801C((uint64_t)v49, (uint64_t)v50, qword_253F128B0);
  if (sub_21424D870((uint64_t)v50) == 1)
    goto LABEL_11;
  sub_2141E801C((uint64_t)v49, (uint64_t)__src, qword_253F128B0);
  memcpy(__dst, __src, 0x152uLL);
  sub_21421C39C((uint64_t)__src);
  sub_2143F8874();
  swift_beginAccess();
  if (!*(_QWORD *)(a5 + 40))
    goto LABEL_11;
  v46 = *(_QWORD *)(a5 + 40);
  swift_bridgeObjectRetain();
  sub_2143F8874();
  swift_beginAccess();
  sub_2141E070C(a6 + 40, (uint64_t)v44, &qword_253F13888);
  if (v44[128] == 254)
  {
    v30 = &qword_253F13888;
    v31 = v44;
    goto LABEL_10;
  }
  sub_2141E801C((uint64_t)v44, (uint64_t)v45, &qword_253F149F0);
  sub_2143F8874();
  swift_beginAccess();
  sub_2141E801C(a7 + 40, (uint64_t)v42, &qword_253F12F78);
  sub_2141E801C((uint64_t)v42, (uint64_t)v43, &qword_253F12F78);
  if (sub_21424D888((uint64_t)v43) != 1)
  {
    v36 = a1;
    sub_2141E801C((uint64_t)v42, (uint64_t)v40, &qword_253F12F78);
    sub_2141E801C((uint64_t)v40, (uint64_t)v41, &qword_253F149E8);
    sub_21424D8C4((uint64_t)v40, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_21424D6F8);
    sub_2143F8874();
    swift_beginAccess();
    v15 = *(unsigned __int8 *)(a8 + 136);
    if (v15 != 254)
    {
      v17 = *(_QWORD *)(a8 + 120);
      v16 = *(_QWORD *)(a8 + 128);
      v19 = *(_QWORD *)(a8 + 104);
      v18 = *(_QWORD *)(a8 + 112);
      v21 = *(_QWORD *)(a8 + 88);
      v20 = *(_QWORD *)(a8 + 96);
      v23 = *(_QWORD *)(a8 + 72);
      v22 = *(_QWORD *)(a8 + 80);
      v25 = *(_QWORD *)(a8 + 56);
      v24 = *(_QWORD *)(a8 + 64);
      v28 = a8 + 40;
      v27 = *(_QWORD *)(a8 + 40);
      v26 = *(_QWORD *)(v28 + 8);
      v38[0] = v27;
      v38[1] = v26;
      v38[2] = v25;
      v38[3] = v24;
      v38[4] = v23;
      v38[5] = v22;
      v32 = v23;
      v33 = v22;
      v38[6] = v21;
      v38[7] = v20;
      v34 = v21;
      v35 = v20;
      v38[8] = v19;
      v38[9] = v18;
      v38[10] = v17;
      v38[11] = v16;
      v39 = v15;
      sub_21424D78C(v27, v26, v25, v24, v23, v22, v21, v20, v19, v18, v17, v16, v15);
      v36(&v54, v53, __dst, &v46, v45, v41, v38);
      sub_21424D89C(v27, v26, v25, v24, v32, v33, v34, v35, v19, v18, v17, v16, v15);
      sub_21424D8C4((uint64_t)v42, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_21424D928);
      sub_2141E0750((uint64_t)v45, &qword_253F149F0);
      swift_bridgeObjectRelease();
      memcpy(v37, __dst, 0x152uLL);
      sub_21424D960((uint64_t)v37);
      sub_2141E0750((uint64_t)v53, &qword_253F12F70);
      return v54;
    }
  }
LABEL_11:
  result = sub_214425628();
  __break(1u);
  return result;
}

uint64_t sub_214246808(void (*a1)(__int128 *, uint64_t *, uint64_t *, _OWORD *, _QWORD *, _BYTE *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  _BYTE v20[264];
  _BYTE v21[264];
  _BYTE v22[264];
  _BYTE v23[264];
  _QWORD v24[2];
  _OWORD v25[2];
  uint64_t v26;
  uint64_t v27;
  __int128 v28;

  sub_2143F8874();
  swift_beginAccess();
  if ((*(_BYTE *)(a3 + 56) & 1) != 0)
    goto LABEL_8;
  v28 = *(_OWORD *)(a3 + 40);
  sub_2143F8874();
  swift_beginAccess();
  if ((*(_BYTE *)(a4 + 48) & 1) != 0)
    goto LABEL_8;
  v27 = *(_QWORD *)(a4 + 40);
  sub_2143F8874();
  swift_beginAccess();
  v15 = *(_QWORD *)(a5 + 40);
  if (!v15)
    goto LABEL_8;
  v26 = v15;
  swift_retain();
  sub_2143F8874();
  swift_beginAccess();
  if ((*(_BYTE *)(a6 + 72) & 1) != 0)
    goto LABEL_8;
  v16 = *(_OWORD *)(a6 + 56);
  v25[0] = *(_OWORD *)(a6 + 40);
  v25[1] = v16;
  sub_2143F8874();
  swift_beginAccess();
  v17 = *(_QWORD *)(a7 + 40);
  if (v17 == 1)
    goto LABEL_8;
  v18 = *(_QWORD *)(a7 + 48);
  v24[0] = v17;
  v24[1] = v18;
  sub_21421C4E4(v17);
  sub_2143F8874();
  swift_beginAccess();
  sub_2141E801C(a8 + 40, (uint64_t)v22, qword_253F13890);
  sub_2141E801C((uint64_t)v22, (uint64_t)v23, qword_253F13890);
  if (sub_21424DDBC((uint64_t)v23) == 1)
  {
LABEL_8:
    result = sub_214425628();
    __break(1u);
  }
  else
  {
    sub_2141E801C((uint64_t)v22, (uint64_t)v20, qword_253F13890);
    sub_2141E801C((uint64_t)v20, (uint64_t)v21, &qword_253F14B70);
    sub_21424DDD8((uint64_t)v20);
    a1(&v28, &v27, &v26, v25, v24, v21);
    sub_21424DE64((uint64_t)v22);
    sub_21424DFB4(v17);
    return swift_release();
  }
  return result;
}

uint64_t sub_214246A84(void (*a1)(_QWORD *__return_ptr, _QWORD *, _QWORD *, __int128 *, __int128 *, uint64_t *, _OWORD *, _OWORD *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void (*a10)(uint64_t, uint64_t), uint64_t *a11, uint64_t *a12, void (*a13)(uint64_t, uint64_t))
{
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 v32;
  uint64_t result;
  _QWORD *v34;
  uint64_t *v35;
  void (*v36)(_QWORD *__return_ptr, _QWORD *, _QWORD *, __int128 *, __int128 *, uint64_t *, _OWORD *, _OWORD *);
  _QWORD v37[5];
  _OWORD v38[4];
  uint64_t v39;
  _OWORD v40[4];
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  _QWORD v45[3];
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned __int8 v51;
  __int128 v52;
  __int128 v53;
  _QWORD v54[3];

  sub_2143F8874();
  swift_beginAccess();
  if (*(_QWORD *)(a3 + 40))
  {
    v36 = a1;
    v54[0] = *(_QWORD *)(a3 + 40);
    swift_retain();
    sub_2143F8874();
    swift_beginAccess();
    v20 = *(_QWORD *)(a4 + 40);
    if (v20)
    {
      v21 = *(_OWORD *)(a4 + 128);
      v52 = *(_OWORD *)(a4 + 112);
      v23 = *(_QWORD *)(a4 + 88);
      v22 = *(_QWORD *)(a4 + 96);
      v24 = *(_QWORD *)(a4 + 72);
      v25 = *(_QWORD *)(a4 + 80);
      v26 = *(_DWORD *)(a4 + 64);
      v27 = *(_QWORD *)(a4 + 48);
      v28 = *(_QWORD *)(a4 + 56);
      v45[0] = v20;
      v45[1] = v27;
      v45[2] = v28;
      v46 = v26 & 1;
      v47 = v24;
      v48 = v25;
      v49 = v23;
      v50 = v22;
      v51 = *(_BYTE *)(a4 + 104);
      v53 = v21;
      swift_retain();
      a10(v24, v25);
      swift_bridgeObjectRetain();
      sub_2141E83DC(v22, v51);
      sub_2143F8874();
      swift_beginAccess();
      if ((*(_BYTE *)(a5 + 56) & 1) == 0)
      {
        v44 = *(_OWORD *)(a5 + 40);
        sub_2143F8874();
        swift_beginAccess();
        if ((*(_BYTE *)(a6 + 56) & 1) == 0)
        {
          v43 = *(_OWORD *)(a6 + 40);
          sub_2143F8874();
          swift_beginAccess();
          if (*(_QWORD *)(a7 + 40))
          {
            v42 = *(_QWORD *)(a7 + 40);
            swift_bridgeObjectRetain();
            sub_2143F8874();
            swift_beginAccess();
            sub_2141E070C(a8 + 40, (uint64_t)v38, a11);
            if (*(_QWORD *)&v38[0])
            {
              v40[2] = v38[2];
              v40[3] = v38[3];
              v41 = v39;
              v40[0] = v38[0];
              v40[1] = v38[1];
              sub_2143F8874();
              swift_beginAccess();
              sub_2141E070C(a9 + 40, (uint64_t)v37, &qword_253F10F78);
              if (v37[3] != 1)
              {
                sub_2141E801C((uint64_t)v37, (uint64_t)v38, &qword_253F11E60);
                v36(v37, v54, v45, &v44, &v43, &v42, v40, v38);
                sub_2141E0750((uint64_t)v38, &qword_253F11E60);
                sub_2141E0750((uint64_t)v40, a12);
                swift_bridgeObjectRelease();
                v29 = v47;
                v30 = v48;
                v31 = v50;
                v32 = v51;
                swift_release();
                a13(v29, v30);
                swift_bridgeObjectRelease();
                sub_21421BBC0(v31, v32);
                swift_release();
                return v37[0];
              }
              v35 = &qword_253F10F78;
              v34 = v37;
            }
            else
            {
              v34 = v38;
              v35 = a11;
            }
            sub_2141E0750((uint64_t)v34, v35);
          }
        }
      }
    }
  }
  result = sub_214425628();
  __break(1u);
  return result;
}

uint64_t sub_214246DD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  char v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  sub_2141D8BF8(&qword_253F15D58);
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_2144271E0;
  *(_QWORD *)(v6 + 32) = a1;
  v27 = v6;
  sub_214424FF8();
  v7 = v27;
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a2;
  *(_QWORD *)(v8 + 24) = a3;
  sub_2141D8BF8((uint64_t *)&unk_253F15820);
  v9 = swift_allocObject();
  *(_OWORD *)(v9 + 40) = 0u;
  *(_OWORD *)(v9 + 56) = 0u;
  *(_OWORD *)(v9 + 72) = 0u;
  *(_OWORD *)(v9 + 88) = 0u;
  *(_OWORD *)(v9 + 104) = 0u;
  *(_OWORD *)(v9 + 120) = 0u;
  *(_OWORD *)(v9 + 136) = 0u;
  *(_OWORD *)(v9 + 152) = 0u;
  *(_BYTE *)(v9 + 168) = -2;
  *(_WORD *)(v9 + 16) = 256;
  *(_QWORD *)(v9 + 176) = 0;
  *(_QWORD *)(v9 + 184) = 0;
  v10 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v9 + 24) = v7;
  *(_QWORD *)(v9 + 32) = v10;
  if (!(v7 >> 62))
  {
    v11 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v11)
      goto LABEL_3;
LABEL_20:
    swift_bridgeObjectRelease();
    v25 = swift_allocObject();
    *(_QWORD *)(v25 + 16) = sub_21424E848;
    *(_QWORD *)(v25 + 24) = v8;
    v26 = *(_QWORD *)(v9 + 176);
    *(_QWORD *)(v9 + 176) = sub_21424E84C;
    *(_QWORD *)(v9 + 184) = v25;
    sub_2141D972C(v26);
    return v9;
  }
  swift_bridgeObjectRetain();
  result = sub_2144256AC();
  v11 = result;
  if (!result)
    goto LABEL_20;
LABEL_3:
  if (v11 >= 1)
  {
    if ((v7 & 0xC000000000000001) != 0)
    {
      v13 = 0;
      do
      {
        v14 = MEMORY[0x2199CCE3C](v13, v7);
        swift_weakInit();
        v15 = *(_QWORD **)(v14 + 32);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v14 + 32) = v15;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v15 = sub_214221F04(0, v15[2] + 1, 1, v15);
          *(_QWORD *)(v14 + 32) = v15;
        }
        v18 = v15[2];
        v17 = v15[3];
        if (v18 >= v17 >> 1)
        {
          v15 = sub_214221F04((_QWORD *)(v17 > 1), v18 + 1, 1, v15);
          *(_QWORD *)(v14 + 32) = v15;
        }
        ++v13;
        v15[2] = v18 + 1;
        sub_2141E801C((uint64_t)&v27, (uint64_t)&v15[v18 + 4], &qword_253F13188);
        swift_unknownObjectRelease();
      }
      while (v11 != v13);
    }
    else
    {
      v19 = 0;
      do
      {
        v20 = *(_QWORD *)(v7 + 8 * v19 + 32);
        swift_weakInit();
        v21 = *(_QWORD **)(v20 + 32);
        swift_retain();
        v22 = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v20 + 32) = v21;
        if ((v22 & 1) == 0)
        {
          v21 = sub_214221F04(0, v21[2] + 1, 1, v21);
          *(_QWORD *)(v20 + 32) = v21;
        }
        v24 = v21[2];
        v23 = v21[3];
        if (v24 >= v23 >> 1)
        {
          v21 = sub_214221F04((_QWORD *)(v23 > 1), v24 + 1, 1, v21);
          *(_QWORD *)(v20 + 32) = v21;
        }
        ++v19;
        v21[2] = v24 + 1;
        sub_2141E801C((uint64_t)&v27, (uint64_t)&v21[v24 + 4], &qword_253F13188);
        swift_release();
      }
      while (v11 != v19);
    }
    goto LABEL_20;
  }
  __break(1u);
  return result;
}

uint64_t sub_2142470F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;

  sub_2143F8874();
  swift_beginAccess();
  result = sub_2141E070C(a1 + 40, (uint64_t)&v6, &qword_253F11E60);
  if (*((_QWORD *)&v7 + 1))
  {
    v5 = v7;
    *(_OWORD *)a2 = v6;
    *(_OWORD *)(a2 + 16) = v5;
    *(_QWORD *)(a2 + 32) = v8;
  }
  else
  {
    sub_2141E0750((uint64_t)&v6, &qword_253F11E60);
    result = sub_214425628();
    __break(1u);
  }
  return result;
}

double sub_2142471C0@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)(a1 + 32) = 0;
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t sub_2142471D0(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v11 = MEMORY[0x24BEE4AF8];
    sub_2141D3A84(0, v1, 0);
    v2 = v11;
    v4 = (uint64_t *)(a1 + 40);
    do
    {
      v6 = *(v4 - 1);
      v5 = *v4;
      v7 = *(_QWORD *)(v11 + 16);
      v8 = *(_QWORD *)(v11 + 24);
      swift_bridgeObjectRetain();
      if (v7 >= v8 >> 1)
        sub_2141D3A84((char *)(v8 > 1), v7 + 1, 1);
      v4 += 2;
      *(_QWORD *)(v11 + 16) = v7 + 1;
      v9 = v11 + 16 * v7;
      *(_QWORD *)(v9 + 32) = v6;
      *(_QWORD *)(v9 + 40) = v5;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_2142472A0(uint64_t a1)
{
  int64_t v2;
  uint64_t result;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x24BEE4AF8];
  if (v2)
  {
    v8 = MEMORY[0x24BEE4AF8];
    sub_2141D3AA0(0, v2, 0);
    result = v8;
    v4 = (uint64_t *)(a1 + 32);
    v5 = *(_QWORD *)(v8 + 16);
    do
    {
      v6 = *v4;
      v9 = result;
      v7 = *(_QWORD *)(result + 24);
      if (v5 >= v7 >> 1)
      {
        sub_2141D3AA0((char *)(v7 > 1), v5 + 1, 1);
        result = v9;
      }
      *(_QWORD *)(result + 16) = v5 + 1;
      *(_QWORD *)(result + 8 * v5 + 32) = v6;
      ++v4;
      ++v5;
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t sub_21424736C(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  _BYTE *v21;
  unsigned int v22;
  uint64_t v23;
  _BYTE *v24;
  unsigned int v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  unint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  BOOL v51;
  uint64_t v52;
  char v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  BOOL v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t i;
  unsigned int v79;
  uint64_t v80;
  unsigned int v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  unint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unsigned __int8 *v95;

  v2 = a1;
  v3 = a1[1];
  result = sub_214425730();
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_138;
    if ((unint64_t)v3 >= 2)
    {
      v76 = 0;
      v77 = *v2;
      for (i = 1; i != v3; ++i)
      {
        v79 = *(unsigned __int8 *)(v77 + i);
        v80 = v76;
        do
        {
          v81 = *(unsigned __int8 *)(v77 + v80);
          if (v79 >= v81)
            break;
          if (!v77)
            goto LABEL_142;
          *(_BYTE *)(v77 + v80 + 1) = v81;
          *(_BYTE *)(v77 + v80--) = v79;
        }
        while (v80 != -1);
        ++v76;
      }
    }
  }
  else
  {
    if (v3 >= 0)
      v5 = v3;
    else
      v5 = v3 + 1;
    if (v3 < -1)
      goto LABEL_137;
    v92 = result;
    v93 = v3;
    if (v3 > 1)
    {
      v6 = v5 >> 1;
      result = sub_21442504C();
      *(_QWORD *)(result + 16) = v6;
      v3 = v93;
      v91 = result;
      v95 = (unsigned __int8 *)(result + 32);
LABEL_13:
      v8 = 0;
      v90 = v2;
      v9 = *v2;
      v10 = MEMORY[0x24BEE4AF8];
      v94 = *v2;
      while (1)
      {
        v12 = v8++;
        if (v8 < v3)
        {
          v13 = *(unsigned __int8 *)(v9 + v8);
          v14 = *(unsigned __int8 *)(v9 + v12);
          v8 = v12 + 2;
          if (v12 + 2 < v3)
          {
            v15 = v13;
            while (1)
            {
              v16 = *(unsigned __int8 *)(v9 + v8);
              if (v13 < v14 == v16 >= v15)
                break;
              ++v8;
              v15 = v16;
              if (v3 == v8)
              {
                v8 = v3;
                break;
              }
            }
          }
          if (v13 < v14)
          {
            if (v8 < v12)
              goto LABEL_139;
            if (v12 < v8)
            {
              v17 = v8 - 1;
              v18 = v12;
              do
              {
                if (v18 != v17)
                {
                  if (!v9)
                    goto LABEL_145;
                  v19 = *(_BYTE *)(v9 + v18);
                  *(_BYTE *)(v9 + v18) = *(_BYTE *)(v9 + v17);
                  *(_BYTE *)(v9 + v17) = v19;
                }
                v58 = ++v18 < v17--;
              }
              while (v58);
            }
          }
        }
        if (v8 < v3)
        {
          if (__OFSUB__(v8, v12))
            goto LABEL_136;
          if (v8 - v12 < v92)
          {
            v20 = v12 + v92;
            if (__OFADD__(v12, v92))
              goto LABEL_140;
            if (v20 >= v3)
              v20 = v3;
            if (v20 < v12)
            {
LABEL_141:
              __break(1u);
LABEL_142:
              __break(1u);
LABEL_143:
              __break(1u);
LABEL_144:
              __break(1u);
LABEL_145:
              __break(1u);
LABEL_146:
              __break(1u);
              return result;
            }
            if (v8 != v20)
            {
              v21 = (_BYTE *)(v9 + v8);
              do
              {
                v22 = *(unsigned __int8 *)(v9 + v8);
                v23 = v12;
                v24 = v21;
                do
                {
                  v25 = *(v24 - 1);
                  if (v22 >= v25)
                    break;
                  if (!v9)
                    goto LABEL_143;
                  *v24 = v25;
                  *--v24 = v22;
                  ++v23;
                }
                while (v8 != v23);
                ++v8;
                ++v21;
              }
              while (v8 != v20);
              v8 = v20;
            }
          }
        }
        if (v8 < v12)
          goto LABEL_131;
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          result = (uint64_t)sub_214224E24(0, *(_QWORD *)(v10 + 16) + 1, 1, (char *)v10);
          v10 = result;
        }
        v27 = *(_QWORD *)(v10 + 16);
        v26 = *(_QWORD *)(v10 + 24);
        v11 = v27 + 1;
        v9 = v94;
        if (v27 >= v26 >> 1)
        {
          result = (uint64_t)sub_214224E24((char *)(v26 > 1), v27 + 1, 1, (char *)v10);
          v9 = v94;
          v10 = result;
        }
        *(_QWORD *)(v10 + 16) = v11;
        v28 = v10 + 32;
        v29 = (uint64_t *)(v10 + 32 + 16 * v27);
        *v29 = v12;
        v29[1] = v8;
        if (v27)
        {
          while (1)
          {
            v30 = v11 - 1;
            if (v11 >= 4)
            {
              v35 = v28 + 16 * v11;
              v36 = *(_QWORD *)(v35 - 64);
              v37 = *(_QWORD *)(v35 - 56);
              v41 = __OFSUB__(v37, v36);
              v38 = v37 - v36;
              if (v41)
                goto LABEL_120;
              v40 = *(_QWORD *)(v35 - 48);
              v39 = *(_QWORD *)(v35 - 40);
              v41 = __OFSUB__(v39, v40);
              v33 = v39 - v40;
              v34 = v41;
              if (v41)
                goto LABEL_121;
              v42 = v11 - 2;
              v43 = (uint64_t *)(v28 + 16 * (v11 - 2));
              v45 = *v43;
              v44 = v43[1];
              v41 = __OFSUB__(v44, v45);
              v46 = v44 - v45;
              if (v41)
                goto LABEL_122;
              v41 = __OFADD__(v33, v46);
              v47 = v33 + v46;
              if (v41)
                goto LABEL_124;
              if (v47 >= v38)
              {
                v65 = (uint64_t *)(v28 + 16 * v30);
                v67 = *v65;
                v66 = v65[1];
                v41 = __OFSUB__(v66, v67);
                v68 = v66 - v67;
                if (v41)
                  goto LABEL_130;
                v58 = v33 < v68;
                goto LABEL_84;
              }
            }
            else
            {
              if (v11 != 3)
              {
                v59 = *(_QWORD *)(v10 + 32);
                v60 = *(_QWORD *)(v10 + 40);
                v41 = __OFSUB__(v60, v59);
                v52 = v60 - v59;
                v53 = v41;
                goto LABEL_78;
              }
              v32 = *(_QWORD *)(v10 + 32);
              v31 = *(_QWORD *)(v10 + 40);
              v41 = __OFSUB__(v31, v32);
              v33 = v31 - v32;
              v34 = v41;
            }
            if ((v34 & 1) != 0)
              goto LABEL_123;
            v42 = v11 - 2;
            v48 = (uint64_t *)(v28 + 16 * (v11 - 2));
            v50 = *v48;
            v49 = v48[1];
            v51 = __OFSUB__(v49, v50);
            v52 = v49 - v50;
            v53 = v51;
            if (v51)
              goto LABEL_125;
            v54 = (uint64_t *)(v28 + 16 * v30);
            v56 = *v54;
            v55 = v54[1];
            v41 = __OFSUB__(v55, v56);
            v57 = v55 - v56;
            if (v41)
              goto LABEL_127;
            if (__OFADD__(v52, v57))
              goto LABEL_129;
            if (v52 + v57 >= v33)
            {
              v58 = v33 < v57;
LABEL_84:
              if (v58)
                v30 = v42;
              goto LABEL_86;
            }
LABEL_78:
            if ((v53 & 1) != 0)
              goto LABEL_126;
            v61 = (uint64_t *)(v28 + 16 * v30);
            v63 = *v61;
            v62 = v61[1];
            v41 = __OFSUB__(v62, v63);
            v64 = v62 - v63;
            if (v41)
              goto LABEL_128;
            if (v64 < v52)
              goto LABEL_15;
LABEL_86:
            v69 = v30 - 1;
            if (v30 - 1 >= v11)
            {
              __break(1u);
LABEL_117:
              __break(1u);
LABEL_118:
              __break(1u);
LABEL_119:
              __break(1u);
LABEL_120:
              __break(1u);
LABEL_121:
              __break(1u);
LABEL_122:
              __break(1u);
LABEL_123:
              __break(1u);
LABEL_124:
              __break(1u);
LABEL_125:
              __break(1u);
LABEL_126:
              __break(1u);
LABEL_127:
              __break(1u);
LABEL_128:
              __break(1u);
LABEL_129:
              __break(1u);
LABEL_130:
              __break(1u);
LABEL_131:
              __break(1u);
LABEL_132:
              __break(1u);
LABEL_133:
              __break(1u);
LABEL_134:
              __break(1u);
LABEL_135:
              __break(1u);
LABEL_136:
              __break(1u);
LABEL_137:
              __break(1u);
LABEL_138:
              __break(1u);
LABEL_139:
              __break(1u);
LABEL_140:
              __break(1u);
              goto LABEL_141;
            }
            if (!v9)
              goto LABEL_144;
            v70 = (uint64_t *)(v28 + 16 * v69);
            v71 = *v70;
            v72 = v28;
            v73 = (_QWORD *)(v28 + 16 * v30);
            v74 = v73[1];
            result = sub_2142479A0((unsigned __int8 *)(v9 + *v70), (unsigned __int8 *)(v9 + *v73), v9 + v74, v95);
            if (v1)
              goto LABEL_114;
            if (v74 < v71)
              goto LABEL_117;
            if (v30 > *(_QWORD *)(v10 + 16))
              goto LABEL_118;
            *v70 = v71;
            *(_QWORD *)(v72 + 16 * v69 + 8) = v74;
            v75 = *(_QWORD *)(v10 + 16);
            if (v30 >= v75)
              goto LABEL_119;
            v11 = v75 - 1;
            result = (uint64_t)memmove(v73, v73 + 2, 16 * (v75 - 1 - v30));
            v28 = v72;
            *(_QWORD *)(v10 + 16) = v75 - 1;
            v9 = v94;
            if (v75 <= 2)
              goto LABEL_15;
          }
        }
        v11 = 1;
LABEL_15:
        v3 = v93;
        if (v8 >= v93)
        {
          v2 = v90;
          v7 = v91;
          goto LABEL_103;
        }
      }
    }
    v7 = MEMORY[0x24BEE4AF8];
    v95 = (unsigned __int8 *)(MEMORY[0x24BEE4AF8] + 32);
    if (v3 == 1)
    {
      v91 = MEMORY[0x24BEE4AF8];
      goto LABEL_13;
    }
    v11 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
    v10 = MEMORY[0x24BEE4AF8];
LABEL_103:
    v91 = v7;
    if (v11 >= 2)
    {
      v82 = *v2;
      do
      {
        v83 = v11 - 2;
        if (v11 < 2)
          goto LABEL_132;
        if (!v82)
          goto LABEL_146;
        v84 = v10;
        v85 = v10 + 32;
        v86 = *(_QWORD *)(v10 + 32 + 16 * v83);
        v87 = *(_QWORD *)(v10 + 32 + 16 * (v11 - 1) + 8);
        result = sub_2142479A0((unsigned __int8 *)(v82 + v86), (unsigned __int8 *)(v82 + *(_QWORD *)(v85 + 16 * (v11 - 1))), v82 + v87, v95);
        if (v1)
          break;
        if (v87 < v86)
          goto LABEL_133;
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          result = (uint64_t)sub_21435010C(v84);
          v84 = result;
        }
        if (v83 >= *(_QWORD *)(v84 + 16))
          goto LABEL_134;
        v88 = (_QWORD *)(v84 + 32 + 16 * v83);
        *v88 = v86;
        v88[1] = v87;
        v89 = *(_QWORD *)(v84 + 16);
        if (v11 > v89)
          goto LABEL_135;
        result = (uint64_t)memmove((void *)(v84 + 32 + 16 * (v11 - 1)), (const void *)(v84 + 32 + 16 * v11), 16 * (v89 - v11));
        v10 = v84;
        *(_QWORD *)(v84 + 16) = v89 - 1;
        v11 = v89 - 1;
      }
      while (v89 > 2);
    }
LABEL_114:
    swift_bridgeObjectRelease();
    *(_QWORD *)(v91 + 16) = 0;
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_2142479A0(unsigned __int8 *__dst, unsigned __int8 *__src, unint64_t a3, unsigned __int8 *a4)
{
  unsigned __int8 *v4;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  int64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  unsigned int v11;
  BOOL v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  unsigned __int8 v16;
  unsigned int v17;

  v4 = a4;
  v6 = __src;
  v7 = __dst;
  v8 = __src - __dst;
  v9 = a3 - (_QWORD)__src;
  if (__src - __dst < (uint64_t)(a3 - (_QWORD)__src))
  {
    if (a4 != __dst || __src <= a4)
      memmove(a4, __dst, v8);
    v10 = &v4[v8];
    if ((unint64_t)v6 >= a3 || v8 < 1)
    {
LABEL_15:
      v6 = v7;
      if (v7 != v4)
        goto LABEL_38;
      goto LABEL_37;
    }
    while (1)
    {
      v11 = *v6;
      if (v11 >= *v4)
        break;
      v12 = v7 == v6++;
      if (!v12)
        goto LABEL_12;
LABEL_13:
      ++v7;
      if (v4 >= v10 || (unint64_t)v6 >= a3)
        goto LABEL_15;
    }
    LOBYTE(v11) = *v4;
    v12 = v7 == v4++;
    if (v12)
      goto LABEL_13;
LABEL_12:
    *v7 = v11;
    goto LABEL_13;
  }
  if (a4 != __src || a3 <= (unint64_t)a4)
    memmove(a4, __src, a3 - (_QWORD)__src);
  v10 = &v4[v9];
  if (v7 >= v6 || v9 < 1)
  {
LABEL_36:
    if (v6 != v4)
      goto LABEL_38;
    goto LABEL_37;
  }
  v13 = (unsigned __int8 *)(a3 - 1);
  v14 = v6;
  while (1)
  {
    v15 = v13 + 1;
    v17 = *--v14;
    v16 = v17;
    if (*(v10 - 1) >= v17)
    {
      v16 = *(v10 - 1);
      v14 = v6;
      if (v15 != v10)
      {
        --v10;
LABEL_32:
        *v13 = v16;
        goto LABEL_33;
      }
      if (v13 >= v10--)
        goto LABEL_32;
    }
    else if (v15 != v6 || v13 >= v6)
    {
      goto LABEL_32;
    }
LABEL_33:
    if (v14 <= v7)
      break;
    --v13;
    v6 = v14;
    if (v10 <= v4)
    {
      v6 = v14;
      goto LABEL_36;
    }
  }
  v6 = v14;
  if (v14 != v4)
  {
LABEL_38:
    memmove(v6, v4, v10 - v4);
    return 1;
  }
LABEL_37:
  if (v6 >= v10)
    goto LABEL_38;
  return 1;
}

uint64_t sub_214247B74(uint64_t a1)
{
  uint64_t result;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t i;
  BOOL v12;
  unint64_t v13;
  int64_t v14;
  char v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;

  sub_2141D8BF8(&qword_253F13300);
  result = sub_2144256B8();
  v3 = 0;
  v23 = a1;
  v24 = (_QWORD *)result;
  v6 = *(_QWORD *)(a1 + 64);
  v5 = a1 + 64;
  v4 = v6;
  v7 = 1 << *(_BYTE *)(v5 - 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & v4;
  v20 = v5;
  v21 = (unint64_t)(v7 + 63) >> 6;
  v22 = result + 64;
  if ((v8 & v4) == 0)
    goto LABEL_5;
LABEL_4:
  v10 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  for (i = v10 | (v3 << 6); ; i = __clz(__rbit64(v13)) + (v3 << 6))
  {
    v15 = *(_BYTE *)(*(_QWORD *)(v23 + 48) + i);
    v16 = *(_QWORD *)(*(_QWORD *)(v23 + 56) + 8 * i);
    MEMORY[0x24BDAC7A8](result);
    sub_21424CFB8();
    sub_21424CFFC();
    swift_getKeyPath();
    swift_bridgeObjectRetain();
    swift_retain();
    v17 = sub_214248EB0(v16);
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_QWORD *)(v22 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    result = (uint64_t)v24;
    *(_BYTE *)(v24[6] + i) = v15;
    *(_QWORD *)(v24[7] + 8 * i) = v17;
    v18 = v24[2];
    v12 = __OFADD__(v18, 1);
    v19 = v18 + 1;
    if (v12)
    {
      __break(1u);
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
    v24[2] = v19;
    if (v9)
      goto LABEL_4;
LABEL_5:
    v12 = __OFADD__(v3++, 1);
    if (v12)
      goto LABEL_25;
    if (v3 >= v21)
      return result;
    v13 = *(_QWORD *)(v20 + 8 * v3);
    if (!v13)
      break;
LABEL_15:
    v9 = (v13 - 1) & v13;
  }
  v14 = v3 + 1;
  if (v3 + 1 >= v21)
    return result;
  v13 = *(_QWORD *)(v20 + 8 * v14);
  if (v13)
    goto LABEL_14;
  v14 = v3 + 2;
  if (v3 + 2 >= v21)
    return result;
  v13 = *(_QWORD *)(v20 + 8 * v14);
  if (v13)
    goto LABEL_14;
  v14 = v3 + 3;
  if (v3 + 3 >= v21)
    return result;
  v13 = *(_QWORD *)(v20 + 8 * v14);
  if (v13)
  {
LABEL_14:
    v3 = v14;
    goto LABEL_15;
  }
  while (1)
  {
    v3 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v3 >= v21)
      return result;
    v13 = *(_QWORD *)(v20 + 8 * v3);
    ++v14;
    if (v13)
      goto LABEL_15;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t (*sub_214247DF4(uint64_t (**a1)(), unint64_t a2, uint64_t a3))()
{
  uint64_t (*v6)();

  v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = sub_214247EA0(v6, a2, a3);
  return sub_214247E48;
}

uint64_t (*sub_214247E4C(uint64_t (**a1)(), unint64_t a2, uint64_t a3))()
{
  uint64_t (*v6)();

  v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = sub_214247F0C(v6, a2, a3);
  return sub_214247E48;
}

uint64_t (*sub_214247EA0(uint64_t (*result)(), unint64_t a2, uint64_t a3))()
{
  uint64_t *v3;
  uint64_t v4;

  v3 = (uint64_t *)result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = MEMORY[0x2199CCE3C](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = swift_retain();
LABEL_5:
    *v3 = v4;
    return sub_21424E850;
  }
  __break(1u);
  return result;
}

uint64_t (*sub_214247F0C(uint64_t (*result)(), unint64_t a2, uint64_t a3))()
{
  uint64_t *v3;
  uint64_t v4;

  v3 = (uint64_t *)result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = MEMORY[0x2199CCE3C](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = swift_retain();
LABEL_5:
    *v3 = v4;
    return sub_214247F78;
  }
  __break(1u);
  return result;
}

uint64_t sub_214247F78()
{
  return swift_release();
}

uint64_t sub_214247F80@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a1;
  if (v4)
  {
    v5 = v4;
  }
  else
  {
    v5 = *a2;
    swift_bridgeObjectRetain();
  }
  *a3 = v5;
  return swift_bridgeObjectRetain();
}

uint64_t sub_214247FC0@<X0>(void (*a1)(uint64_t *__return_ptr, char *)@<X0>, unint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  char *v6;
  uint64_t result;
  uint64_t v8;

  swift_getKeyPath();
  swift_retain();
  v6 = sub_214248574(a2);
  swift_release_n();
  a1(&v8, v6);
  result = swift_bridgeObjectRelease();
  *a3 = v8;
  return result;
}

uint64_t sub_214248064@<X0>(void (*a1)(uint64_t *__return_ptr, char *)@<X0>, unint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  char *v6;
  uint64_t result;
  uint64_t v8;

  sub_2141D8BF8(&qword_253F11CA0);
  swift_getKeyPath();
  swift_retain();
  v6 = sub_2142486F4(a2);
  swift_release_n();
  a1(&v8, v6);
  result = swift_bridgeObjectRelease();
  *a3 = v8;
  return result;
}

double sub_214248114@<D0>(void (*a1)(_OWORD *__return_ptr, char *)@<X0>, unint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  char *v6;
  double result;
  __int128 v8;
  _OWORD v9[2];

  sub_21424DFDC();
  swift_getKeyPath();
  swift_retain();
  v6 = sub_2142488A8(a2);
  swift_release_n();
  a1(v9, v6);
  swift_bridgeObjectRelease();
  result = *(double *)v9;
  v8 = v9[1];
  *a3 = v9[0];
  a3[1] = v8;
  return result;
}

uint64_t sub_2142481C0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  sub_21424D460();
  sub_21424D4A4();
  swift_getKeyPath();
  swift_retain();
  v4 = sub_21424D4E8(a1);
  result = swift_release_n();
  *a2 = v4;
  return result;
}

uint64_t sub_214248250@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  sub_2141D8BF8(&qword_253F149D8);
  sub_21424CFFC();
  swift_getKeyPath();
  swift_retain();
  v4 = sub_21424DAC8(a1);
  result = swift_release_n();
  *a2 = v4;
  return result;
}

uint64_t sub_2142482DC@<X0>(uint64_t *a1@<X8>)
{
  return sub_214248300(sub_2141DB8E4, a1);
}

uint64_t sub_2142482E8@<X0>(uint64_t a1@<X8>)
{
  return sub_214248350(sub_2142471D0, a1);
}

uint64_t sub_2142482F4@<X0>(uint64_t *a1@<X8>)
{
  return sub_214248300(sub_2141DBAF8, a1);
}

uint64_t sub_214248300@<X0>(uint64_t (*a1)(uint64_t)@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = swift_bridgeObjectRetain();
  v5 = a1(v4);
  result = swift_bridgeObjectRelease();
  *a2 = v5;
  return result;
}

uint64_t sub_214248344@<X0>(uint64_t a1@<X8>)
{
  return sub_214248350(sub_2142472A0, a1);
}

uint64_t sub_214248350@<X0>(uint64_t (*a1)(uint64_t)@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t result;

  v4 = swift_bridgeObjectRetain();
  v5 = a1(v4);
  v7 = v6;
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = v7;
  return result;
}

uint64_t sub_2142483A0@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v8;
  char v9;
  uint64_t v10;

  v8 = *a1;
  v9 = *a3;
  v10 = *a4;
  sub_2141DFD94(a2, a6 + 16);
  *(_QWORD *)a6 = a5;
  *(_QWORD *)(a6 + 8) = v8;
  *(_BYTE *)(a6 + 57) = v9;
  *(_QWORD *)(a6 + 64) = v10;
  swift_retain();
  return swift_bridgeObjectRetain();
}

uint64_t sub_214248404@<X0>(uint64_t *a1@<X2>, uint64_t a2@<X4>, char a3@<W5>, void (*a4)(void)@<X7>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *a1;
  sub_21421FCC0(a2, a3, a4);
  swift_beginAccess();
  v7 = *(_QWORD *)(v6 + 208);
  v8 = *(_QWORD *)(v6 + 216);
  *(_BYTE *)a5 = *(_BYTE *)(v6 + 184);
  *(_OWORD *)(a5 + 8) = *(_OWORD *)(v6 + 192);
  *(_QWORD *)(a5 + 24) = v7;
  *(_QWORD *)(a5 + 32) = v8;
  *(_OWORD *)(a5 + 40) = *(_OWORD *)(v6 + 224);
  return swift_bridgeObjectRetain();
}

uint64_t sub_21424849C@<X0>(void (*a1)(uint64_t *__return_ptr, uint64_t)@<X0>, unint64_t a2@<X2>, uint64_t *a3@<X3>, unint64_t *a4@<X4>, uint64_t a5@<X5>, void (*a6)(BOOL, unint64_t, uint64_t)@<X6>, _QWORD *a7@<X8>)
{
  uint64_t KeyPath;
  uint64_t v15;
  uint64_t result;
  _BYTE v17[16];
  uint64_t v18;

  sub_2141D8BF8(a3);
  sub_21424E530(a4, a3, a5);
  KeyPath = swift_getKeyPath();
  swift_retain();
  v15 = sub_214249404(a2, KeyPath, (uint64_t)v17, a6);
  swift_release_n();
  a1(&v18, v15);
  result = swift_bridgeObjectRelease();
  *a7 = v18;
  return result;
}

char *sub_214248574(unint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *result;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a1 >> 62)
    goto LABEL_15;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    v3 = MEMORY[0x24BEE4AF8];
    if (!v2)
      return (char *)v3;
    v9 = MEMORY[0x24BEE4AF8];
    result = sub_2141D3A14(0, v2 & ~(v2 >> 63), 0);
    if (v2 < 0)
      break;
    v5 = 0;
    v3 = v9;
    while (v2 != v5)
    {
      if ((a1 & 0xC000000000000001) != 0)
        MEMORY[0x2199CCE3C](v5, a1);
      else
        swift_retain();
      swift_retain();
      swift_getAtKeyPath();
      swift_release_n();
      v7 = *(_QWORD *)(v9 + 16);
      v6 = *(_QWORD *)(v9 + 24);
      if (v7 >= v6 >> 1)
        sub_2141D3A14((char *)(v6 > 1), v7 + 1, 1);
      ++v5;
      *(_QWORD *)(v9 + 16) = v7 + 1;
      *(_QWORD *)(v9 + 8 * v7 + 32) = v8;
      if (v2 == v5)
        return (char *)v3;
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
    v2 = sub_2144256AC();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

char *sub_2142486F4(unint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *result;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;

  if (a1 >> 62)
    goto LABEL_15;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    v3 = MEMORY[0x24BEE4AF8];
    if (!v2)
      return (char *)v3;
    v16 = MEMORY[0x24BEE4AF8];
    result = sub_2141D3A30(0, v2 & ~(v2 >> 63), 0);
    if (v2 < 0)
      break;
    v5 = 0;
    v3 = v16;
    while (v2 != v5)
    {
      if ((a1 & 0xC000000000000001) != 0)
        MEMORY[0x2199CCE3C](v5, a1);
      else
        swift_retain();
      swift_retain();
      swift_getAtKeyPath();
      swift_release_n();
      v6 = v12;
      v7 = v15;
      v9 = *(_QWORD *)(v16 + 16);
      v8 = *(_QWORD *)(v16 + 24);
      if (v9 >= v8 >> 1)
      {
        sub_2141D3A30((char *)(v8 > 1), v9 + 1, 1);
        v7 = v15;
        v6 = v12;
      }
      *(_QWORD *)(v16 + 16) = v9 + 1;
      v10 = v16 + 56 * v9;
      *(_BYTE *)(v10 + 32) = v11;
      ++v5;
      *(_OWORD *)(v10 + 40) = v6;
      *(_QWORD *)(v10 + 56) = v13;
      *(_QWORD *)(v10 + 64) = v14;
      *(_OWORD *)(v10 + 72) = v7;
      if (v2 == v5)
        return (char *)v3;
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
    v2 = sub_2144256AC();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

char *sub_2142488A8(unint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *result;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;

  if (a1 >> 62)
    goto LABEL_15;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    v3 = MEMORY[0x24BEE4AF8];
    if (!v2)
      return (char *)v3;
    v13 = MEMORY[0x24BEE4AF8];
    result = sub_2141D3A4C(0, v2 & ~(v2 >> 63), 0);
    if (v2 < 0)
      break;
    v5 = 0;
    v3 = v13;
    while (v2 != v5)
    {
      if ((a1 & 0xC000000000000001) != 0)
        MEMORY[0x2199CCE3C](v5, a1);
      else
        swift_retain();
      swift_retain();
      swift_getAtKeyPath();
      swift_release_n();
      v6 = v11;
      v7 = v12;
      v9 = *(_QWORD *)(v13 + 16);
      v8 = *(_QWORD *)(v13 + 24);
      if (v9 >= v8 >> 1)
      {
        sub_2141D3A4C((char *)(v8 > 1), v9 + 1, 1);
        v7 = v12;
        v6 = v11;
      }
      ++v5;
      *(_QWORD *)(v13 + 16) = v9 + 1;
      v10 = v13 + 32 * v9;
      *(_OWORD *)(v10 + 32) = v6;
      *(_OWORD *)(v10 + 48) = v7;
      if (v2 == v5)
        return (char *)v3;
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
    v2 = sub_2144256AC();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t sub_214248A28(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  char v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v7 = a1;
  if (a1 >> 62)
    goto LABEL_36;
  v8 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_3:
  result = MEMORY[0x24BEE4AF8];
  if (v8)
  {
    v40 = MEMORY[0x24BEE4AF8];
    result = sub_2144255B0();
    if ((v8 & 0x8000000000000000) == 0)
    {
      v10 = 0;
      v36 = v7 & 0xC000000000000001;
      v30 = v7 + 32;
      v34 = a2;
      v35 = a3;
      v32 = v8;
      v33 = v7;
      v31 = a4;
      while (1)
      {
        if (v10 == v8)
        {
          __break(1u);
LABEL_35:
          __break(1u);
LABEL_36:
          swift_bridgeObjectRetain();
          v8 = sub_2144256AC();
          swift_bridgeObjectRelease();
          goto LABEL_3;
        }
        v38 = v10;
        if (v36)
        {
          v13 = MEMORY[0x2199CCE3C](v10, v7);
        }
        else
        {
          v13 = *(_QWORD *)(v30 + 8 * v10);
          swift_retain();
        }
        sub_2141D8BF8(&qword_253F15D58);
        v14 = swift_allocObject();
        *(_OWORD *)(v14 + 16) = xmmword_2144271F0;
        *(_QWORD *)(v14 + 32) = a2;
        *(_QWORD *)(v14 + 40) = v13;
        *(_QWORD *)(v14 + 48) = a3;
        v39 = v14;
        sub_214424FF8();
        v15 = v39;
        v16 = (_QWORD *)swift_allocObject();
        v16[2] = sub_21424D7EC;
        v16[3] = a4;
        v16[4] = a2;
        v16[5] = v13;
        v37 = v16;
        v16[6] = a3;
        sub_2141D8BF8(&qword_253F15838);
        v7 = swift_allocObject();
        *(_WORD *)(v7 + 16) = 256;
        *(_QWORD *)(v7 + 48) = 0;
        *(_QWORD *)(v7 + 56) = 0;
        *(_QWORD *)(v7 + 40) = 0xF000000000000007;
        v17 = MEMORY[0x24BEE4AF8];
        *(_QWORD *)(v7 + 24) = v15;
        *(_QWORD *)(v7 + 32) = v17;
        if (v15 >> 62)
        {
          swift_retain_n();
          swift_retain_n();
          swift_retain();
          swift_retain();
          swift_bridgeObjectRetain();
          a3 = sub_2144256AC();
          if (!a3)
          {
LABEL_31:
            swift_bridgeObjectRelease();
            goto LABEL_7;
          }
        }
        else
        {
          a3 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10);
          swift_retain_n();
          swift_retain_n();
          swift_retain();
          swift_retain();
          swift_bridgeObjectRetain();
          if (!a3)
            goto LABEL_31;
        }
        if (a3 < 1)
          goto LABEL_35;
        if ((v15 & 0xC000000000000001) != 0)
        {
          v18 = 0;
          do
          {
            v19 = MEMORY[0x2199CCE3C](v18, v15);
            swift_weakInit();
            v20 = *(_QWORD **)(v19 + 32);
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            *(_QWORD *)(v19 + 32) = v20;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              v20 = sub_214221F04(0, v20[2] + 1, 1, v20);
              *(_QWORD *)(v19 + 32) = v20;
            }
            v23 = v20[2];
            v22 = v20[3];
            if (v23 >= v22 >> 1)
            {
              v20 = sub_214221F04((_QWORD *)(v22 > 1), v23 + 1, 1, v20);
              *(_QWORD *)(v19 + 32) = v20;
            }
            ++v18;
            v20[2] = v23 + 1;
            sub_2141E801C((uint64_t)&v39, (uint64_t)&v20[v23 + 4], &qword_253F13188);
            swift_unknownObjectRelease();
          }
          while (a3 != v18);
        }
        else
        {
          v24 = 0;
          do
          {
            v25 = *(_QWORD *)(v15 + 8 * v24 + 32);
            swift_weakInit();
            v26 = *(_QWORD **)(v25 + 32);
            swift_retain();
            v27 = swift_isUniquelyReferenced_nonNull_native();
            *(_QWORD *)(v25 + 32) = v26;
            if ((v27 & 1) == 0)
            {
              v26 = sub_214221F04(0, v26[2] + 1, 1, v26);
              *(_QWORD *)(v25 + 32) = v26;
            }
            v29 = v26[2];
            v28 = v26[3];
            if (v29 >= v28 >> 1)
            {
              v26 = sub_214221F04((_QWORD *)(v28 > 1), v29 + 1, 1, v26);
              *(_QWORD *)(v25 + 32) = v26;
            }
            ++v24;
            v26[2] = v29 + 1;
            sub_2141E801C((uint64_t)&v39, (uint64_t)&v26[v29 + 4], &qword_253F13188);
            swift_release();
          }
          while (a3 != v24);
        }
        swift_bridgeObjectRelease();
        a4 = v31;
LABEL_7:
        v10 = v38 + 1;
        v11 = swift_allocObject();
        *(_QWORD *)(v11 + 16) = sub_21424D7F8;
        *(_QWORD *)(v11 + 24) = v37;
        v12 = *(_QWORD *)(v7 + 48);
        *(_QWORD *)(v7 + 48) = sub_21424E84C;
        *(_QWORD *)(v7 + 56) = v11;
        sub_2141D972C(v12);
        sub_21442558C();
        sub_2144255BC();
        sub_2144255C8();
        sub_214425598();
        v8 = v32;
        v7 = v33;
        a2 = v34;
        a3 = v35;
        if (v38 + 1 == v32)
          return v40;
      }
    }
    __break(1u);
  }
  return result;
}

char *sub_214248EB0(unint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *result;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;

  if (a1 >> 62)
    goto LABEL_15;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    v3 = MEMORY[0x24BEE4AF8];
    if (!v2)
      return (char *)v3;
    v11 = MEMORY[0x24BEE4AF8];
    result = sub_2141D3A68(0, v2 & ~(v2 >> 63), 0);
    if (v2 < 0)
      break;
    v5 = 0;
    v3 = v11;
    while (v2 != v5)
    {
      if ((a1 & 0xC000000000000001) != 0)
        MEMORY[0x2199CCE3C](v5, a1);
      else
        swift_retain();
      swift_retain();
      swift_getAtKeyPath();
      swift_release_n();
      v7 = *(_QWORD *)(v11 + 16);
      v6 = *(_QWORD *)(v11 + 24);
      if (v7 >= v6 >> 1)
        sub_2141D3A68((char *)(v6 > 1), v7 + 1, 1);
      ++v5;
      *(_QWORD *)(v11 + 16) = v7 + 1;
      v8 = v11 + 16 * v7;
      *(_QWORD *)(v8 + 32) = v9;
      *(_BYTE *)(v8 + 40) = v10;
      if (v2 == v5)
        return (char *)v3;
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
    v2 = sub_2144256AC();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t sub_214249038(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, void (*a9)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t, _QWORD, int))
{
  uint64_t v10;
  uint64_t result;
  _BYTE *v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46[2];
  _QWORD v47[3];
  uint64_t v48;
  uint64_t v49;
  _BYTE v50[16];
  _BYTE v51[48];
  _BYTE v52[32];
  unint64_t v53;
  char v54;
  char v55;
  char v56;
  _BYTE v57[24];
  uint64_t v58;

  v10 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x24BEE4AF8];
  if (v10)
  {
    v58 = MEMORY[0x24BEE4AF8];
    sub_2144255B0();
    v41 = a2;
    v42 = a2 + 24;
    v44 = a4 + 96;
    v45 = a3 + 16;
    v18 = (_BYTE *)(a1 + 72);
    v43 = a7 & 1;
    v39 = a3;
    v40 = a4;
    v38 = a5;
    while (1)
    {
      if ((*v18 & 1) != 0)
      {
        v21 = sub_214235560((uint64_t)sub_214238268, 0);
      }
      else
      {
        v22 = *((_QWORD *)v18 - 1);
        swift_beginAccess();
        if (*(_QWORD *)(*(_QWORD *)v42 + 16) && (sub_214336CE4(v22), (v23 & 1) != 0))
        {
          swift_endAccess();
          sub_2141D8BF8(&qword_253F11A78);
          v21 = swift_dynamicCastClassUnconditional();
          swift_retain();
        }
        else
        {
          v24 = a6;
          swift_endAccess();
          v25 = *(_QWORD *)(v41 + 16);
          swift_beginAccess();
          v26 = *(_QWORD *)(v25 + 24);
          if (!*(_QWORD *)(v26 + 16) || (v27 = sub_214336CE4(v22), (v28 & 1) == 0))
          {
            result = swift_endAccess();
            __break(1u);
            return result;
          }
          sub_2141D7878(*(_QWORD *)(v26 + 56) + 40 * v27, (uint64_t)v46);
          sub_2141D8DC0(v46, (uint64_t)v47);
          swift_endAccess();
          v29 = v48;
          v30 = v49;
          sub_2141E88D0(v47, v48);
          v31 = *(uint64_t (**)(uint64_t, uint64_t))(v30 + 8);
          swift_retain();
          swift_retain();
          v32 = v31(v29, v30);
          v34 = v33;
          _s6Charts15AnyChartContentVwxx_0((uint64_t)v47);
          swift_release();
          swift_beginAccess();
          swift_retain();
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *(_QWORD *)&v46[0] = *(_QWORD *)(v41 + 24);
          *(_QWORD *)(v41 + 24) = 0x8000000000000000;
          sub_2142A27BC(v32, v34, v22, isUniquelyReferenced_nonNull_native);
          *(_QWORD *)(v41 + 24) = *(_QWORD *)&v46[0];
          swift_bridgeObjectRelease();
          swift_endAccess();
          swift_release();
          sub_2141D8BF8(&qword_253F11A78);
          v21 = swift_dynamicCastClassUnconditional();
          a6 = v24;
          a5 = v38;
          a3 = v39;
          a4 = v40;
        }
      }
      sub_2141E7D60(v45, (uint64_t)v51);
      sub_2141E7D60((uint64_t)v51, (uint64_t)v52);
      v36 = (v53 >> 61) & 3;
      if (!(_DWORD)v36)
        break;
      if ((_DWORD)v36 == 1)
      {
        v53 &= 0x9FFFFFFFFFFFFFFFLL;
        v19 = &v55;
LABEL_17:
        v20 = &qword_253F15558;
        goto LABEL_4;
      }
      v53 &= 0x9FFFFFFFFFFFFFFFLL;
      v19 = &v56;
      v20 = &qword_253F0FF68;
LABEL_4:
      sub_2141E801C((uint64_t)v52, (uint64_t)v19, v20);
      sub_2141E801C(v44, (uint64_t)v50, &qword_253F119A0);
      sub_2141E801C((uint64_t)v50, (uint64_t)v57, &qword_253F119A0);
      LOBYTE(v37) = v57[9] & 1;
      a9(v21, v36, *(_QWORD *)a3, *(unsigned __int8 *)(a3 + 8), *(_QWORD *)(a4 + 112), a5, a6, v43, v37);
      swift_release();
      sub_21442558C();
      sub_2144255BC();
      sub_2144255C8();
      sub_214425598();
      v18 += 80;
      if (!--v10)
        return v58;
    }
    v53 &= 0x9FFFFFFFFFFFFFFFLL;
    v19 = &v54;
    goto LABEL_17;
  }
  return result;
}

uint64_t sub_214249404(unint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(BOOL, unint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  void (*v12)(BOOL, unint64_t, uint64_t);
  void (*v13)(BOOL, unint64_t, uint64_t);
  uint64_t v14;

  if (a1 >> 62)
    goto LABEL_15;
  v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    v7 = MEMORY[0x24BEE4AF8];
    if (!v6)
      return v7;
    v14 = MEMORY[0x24BEE4AF8];
    result = ((uint64_t (*)(_QWORD, uint64_t, _QWORD))a4)(0, v6 & ~(v6 >> 63), 0);
    if (v6 < 0)
      break;
    v12 = a4;
    v9 = 0;
    v7 = v14;
    while (v6 != v9)
    {
      if ((a1 & 0xC000000000000001) != 0)
        MEMORY[0x2199CCE3C](v9, a1);
      else
        swift_retain();
      swift_retain();
      swift_getAtKeyPath();
      swift_release_n();
      a4 = v13;
      v11 = *(_QWORD *)(v14 + 16);
      v10 = *(_QWORD *)(v14 + 24);
      if (v11 >= v10 >> 1)
        v12(v10 > 1, v11 + 1, 1);
      ++v9;
      *(_QWORD *)(v14 + 16) = v11 + 1;
      *(_QWORD *)(v14 + 8 * v11 + 32) = v13;
      if (v6 == v9)
        return v7;
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
    v6 = sub_2144256AC();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t sub_21424958C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  if (a3)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_2142495C0@<X0>(uint64_t *a1@<X8>)
{
  return sub_21424D804((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2142440C8, a1);
}

uint64_t sub_2142495CC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 v4;

  v2 = *(_QWORD *)(a1 + 64);
  v3 = *(_QWORD *)(a1 + 72);
  v4 = *(_BYTE *)(a1 + 80);
  sub_2141E7E88(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), (void (*)(uint64_t, unint64_t, unint64_t))sub_2141E7F20);
  sub_2142496E8(v2, v3, v4, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7F98, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7F7C);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_2142496E8(uint64_t result, uint64_t a2, unsigned __int8 a3, uint64_t (*a4)(uint64_t, uint64_t, _QWORD), uint64_t (*a5)(uint64_t, uint64_t, _QWORD))
{
  switch(a3 >> 5)
  {
    case 1:
    case 2:
    case 3:
    case 4:
    case 6:
      result = a4(result, a2, a3 & 0x1F);
      break;
    case 5:
      result = a5(result, a2, a3 & 0x1F);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_214249734()
{
  return sub_2141F9510((void (*)(_QWORD))MEMORY[0x24BEE4BC0]);
}

double sub_214249740@<D0>(_OWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_214248114(*(void (**)(_OWORD *__return_ptr, char *))(v1 + 16), *(_QWORD *)(v1 + 32), a1);
}

uint64_t sub_21424974C(_QWORD *a1, uint64_t a2, char a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  char v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  char v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  char v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  char v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  char v93;
  unint64_t v94;
  unint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  char v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  char v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  _QWORD *v125;
  uint64_t v126;
  unint64_t v127;
  _QWORD *v128;
  uint64_t v130;
  uint64_t v131;
  unint64_t v135;
  _QWORD *v136;
  uint64_t v137;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char v147;
  void *v148;
  char v151;
  char v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  _QWORD *v159;
  uint64_t v160;
  __int128 v162;
  uint64_t v163;
  unint64_t v164;
  unint64_t v165;

  v13 = a2;
  v14 = a1;
  v15 = MEMORY[0x24BEE4AF8];
  v164 = MEMORY[0x24BEE4AF8];
  v165 = MEMORY[0x24BEE4AF8];
  v137 = a1[2];
  if (v137)
  {
    v16 = a7;
    v17 = 0;
    v135 = a2 & 0xC000000000000001;
    v136 = a1 + 4;
    v131 = a2 & 0xFFFFFFFFFFFFFF8;
    v130 = a2 + 32;
    while (1)
    {
      v18 = &v136[10 * v17];
      v12 = v18[8];
      v19 = *((_BYTE *)v18 + 72);
      v159 = (_QWORD *)v15;
      v141 = v18[6];
      v152 = *((_BYTE *)v18 + 56);
      v140 = v18[2];
      v151 = *((_BYTE *)v18 + 24);
      v139 = *v18;
      v147 = *((_BYTE *)v18 + 8);
      if (v135)
      {
        v15 = MEMORY[0x2199CCE3C](v17, v13);
      }
      else
      {
        if (v17 >= *(_QWORD *)(v131 + 16))
          goto LABEL_134;
        v15 = *(_QWORD *)(v130 + 8 * v17);
        swift_retain();
      }
      v157 = v17;
      v20 = swift_allocObject();
      *(_BYTE *)(v20 + 16) = a5;
      sub_2141D8BF8(&qword_253F15D58);
      v21 = swift_allocObject();
      *(_OWORD *)(v21 + 16) = xmmword_2144271F0;
      *(_QWORD *)(v21 + 32) = v16;
      *(_QWORD *)(v21 + 40) = a6;
      *(_QWORD *)(v21 + 48) = v15;
      v163 = v21;
      sub_214424FF8();
      v22 = v163;
      v23 = (_QWORD *)swift_allocObject();
      v23[2] = sub_21424C828;
      v23[3] = v20;
      v23[4] = v16;
      v23[5] = a6;
      v23[6] = v15;
      sub_2141D8BF8(&qword_253F131A0);
      v24 = swift_allocObject();
      *(_OWORD *)(v24 + 40) = 0u;
      *(_OWORD *)(v24 + 56) = 0u;
      *(_QWORD *)(v24 + 72) = 0;
      *(_BYTE *)(v24 + 80) = -1;
      *(_WORD *)(v24 + 16) = 256;
      *(_QWORD *)(v24 + 88) = 0;
      *(_QWORD *)(v24 + 96) = 0;
      v14 = (void *)MEMORY[0x24BEE4AF8];
      *(_QWORD *)(v24 + 24) = v22;
      *(_QWORD *)(v24 + 32) = v14;
      if (v22 >> 62)
      {
        swift_retain_n();
        swift_retain_n();
        swift_retain_n();
        swift_bridgeObjectRetain();
        v14 = (void *)MEMORY[0x24BEE4AF8];
        v25 = sub_2144256AC();
      }
      else
      {
        v25 = *(_QWORD *)((v22 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_retain_n();
        swift_retain_n();
        swift_retain_n();
        swift_bridgeObjectRetain();
      }
      v26 = a10;
      v155 = v15;
      v144 = v12;
      v143 = v19;
      if (v25)
      {
        if (v25 < 1)
          goto LABEL_130;
        if ((v22 & 0xC000000000000001) != 0)
        {
          v27 = 0;
          do
          {
            v28 = MEMORY[0x2199CCE3C](v27, v22);
            swift_weakInit();
            v29 = *(_QWORD **)(v28 + 32);
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            *(_QWORD *)(v28 + 32) = v29;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              v29 = sub_214221F04(0, v29[2] + 1, 1, v29);
              *(_QWORD *)(v28 + 32) = v29;
            }
            v32 = v29[2];
            v31 = v29[3];
            if (v32 >= v31 >> 1)
            {
              v29 = sub_214221F04((_QWORD *)(v31 > 1), v32 + 1, 1, v29);
              *(_QWORD *)(v28 + 32) = v29;
            }
            ++v27;
            v29[2] = v32 + 1;
            sub_2141E801C((uint64_t)&v163, (uint64_t)&v29[v32 + 4], &qword_253F13188);
            swift_unknownObjectRelease();
          }
          while (v25 != v27);
        }
        else
        {
          v33 = 0;
          do
          {
            v34 = *(_QWORD *)(v22 + 8 * v33 + 32);
            swift_weakInit();
            v35 = *(_QWORD **)(v34 + 32);
            swift_retain();
            v36 = swift_isUniquelyReferenced_nonNull_native();
            *(_QWORD *)(v34 + 32) = v35;
            if ((v36 & 1) == 0)
            {
              v35 = sub_214221F04(0, v35[2] + 1, 1, v35);
              *(_QWORD *)(v34 + 32) = v35;
            }
            v38 = v35[2];
            v37 = v35[3];
            if (v38 >= v37 >> 1)
            {
              v35 = sub_214221F04((_QWORD *)(v37 > 1), v38 + 1, 1, v35);
              *(_QWORD *)(v34 + 32) = v35;
            }
            ++v33;
            v35[2] = v38 + 1;
            sub_2141E801C((uint64_t)&v163, (uint64_t)&v35[v38 + 4], &qword_253F13188);
            swift_release();
          }
          while (v25 != v33);
        }
        swift_bridgeObjectRelease();
        v14 = (void *)MEMORY[0x24BEE4AF8];
        v26 = a10;
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      v39 = swift_allocObject();
      *(_QWORD *)(v39 + 16) = sub_21424C838;
      *(_QWORD *)(v39 + 24) = v23;
      v40 = *(_QWORD *)(v24 + 88);
      *(_QWORD *)(v24 + 88) = sub_21424C7F0;
      *(_QWORD *)(v24 + 96) = v39;
      sub_2141D972C(v40);
      if ((v147 & 1) != 0)
      {
        v41 = 0;
        if ((v151 & 1) == 0)
          goto LABEL_29;
      }
      else
      {
        swift_retain();
        v41 = sub_2142357C4(v139, &qword_253F11A70);
        swift_release();
        if ((v151 & 1) == 0)
        {
LABEL_29:
          swift_retain();
          v42 = sub_2142357C4(v140, &qword_253F10F88);
          swift_release();
          if ((v152 & 1) == 0)
            goto LABEL_30;
          goto LABEL_33;
        }
      }
      v42 = 0;
      if ((v152 & 1) == 0)
      {
LABEL_30:
        swift_retain();
        v43 = sub_2142357C4(v141, &qword_253F11A98);
        swift_release();
        goto LABEL_34;
      }
LABEL_33:
      v43 = 0;
LABEL_34:
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      v153 = sub_21423CEE8(v155, v24, v157, a3, a5, v41, v42, v43, v26, a8);
      v45 = v44;
      v46 = v26;
      v48 = v47;
      v49 = swift_allocObject();
      *(_OWORD *)(v49 + 16) = xmmword_214428BD0;
      *(_QWORD *)(v49 + 32) = v155;
      *(_QWORD *)(v49 + 40) = v45;
      *(_QWORD *)(v49 + 48) = v48;
      *(_QWORD *)(v49 + 56) = a9;
      v163 = v49;
      sub_214424FF8();
      v50 = v163;
      v51 = (_QWORD *)swift_allocObject();
      v51[2] = sub_21424C844;
      v51[3] = v46;
      v51[4] = v155;
      v51[5] = v45;
      v51[6] = v48;
      v51[7] = a9;
      sub_2141D8BF8(&qword_253F10F80);
      v12 = swift_allocObject();
      *(_WORD *)(v12 + 16) = 256;
      *(_OWORD *)(v12 + 40) = 0u;
      *(_OWORD *)(v12 + 56) = 0u;
      *(_OWORD *)(v12 + 72) = 0u;
      *(_OWORD *)(v12 + 88) = 0u;
      *(_OWORD *)(v12 + 104) = 0u;
      *(_QWORD *)(v12 + 120) = 0;
      *(_QWORD *)(v12 + 24) = v50;
      *(_QWORD *)(v12 + 32) = v14;
      if ((unint64_t)v50 >> 62)
      {
        if (v50 < 0)
          v14 = (void *)v50;
        else
          v14 = (void *)(v50 & 0xFFFFFFFFFFFFFF8);
        swift_retain_n();
        swift_retain_n();
        swift_retain_n();
        swift_retain_n();
        swift_retain();
        swift_bridgeObjectRetain();
        v15 = sub_2144256AC();
        if (v15)
        {
LABEL_36:
          if (v15 < 1)
            goto LABEL_131;
          if ((v50 & 0xC000000000000001) != 0)
          {
            v52 = 0;
            do
            {
              v53 = MEMORY[0x2199CCE3C](v52, v50);
              swift_weakInit();
              v54 = *(_QWORD **)(v53 + 32);
              v55 = swift_isUniquelyReferenced_nonNull_native();
              *(_QWORD *)(v53 + 32) = v54;
              if ((v55 & 1) == 0)
              {
                v54 = sub_214221F04(0, v54[2] + 1, 1, v54);
                *(_QWORD *)(v53 + 32) = v54;
              }
              v57 = v54[2];
              v56 = v54[3];
              if (v57 >= v56 >> 1)
              {
                v54 = sub_214221F04((_QWORD *)(v56 > 1), v57 + 1, 1, v54);
                *(_QWORD *)(v53 + 32) = v54;
              }
              ++v52;
              v54[2] = v57 + 1;
              sub_2141E801C((uint64_t)&v163, (uint64_t)&v54[v57 + 4], &qword_253F13188);
              swift_unknownObjectRelease();
            }
            while (v15 != v52);
          }
          else
          {
            v58 = 0;
            do
            {
              v59 = *(_QWORD *)(v50 + 8 * v58 + 32);
              swift_weakInit();
              v60 = *(_QWORD **)(v59 + 32);
              swift_retain();
              v61 = swift_isUniquelyReferenced_nonNull_native();
              *(_QWORD *)(v59 + 32) = v60;
              if ((v61 & 1) == 0)
              {
                v60 = sub_214221F04(0, v60[2] + 1, 1, v60);
                *(_QWORD *)(v59 + 32) = v60;
              }
              v63 = v60[2];
              v62 = v60[3];
              if (v63 >= v62 >> 1)
              {
                v60 = sub_214221F04((_QWORD *)(v62 > 1), v63 + 1, 1, v60);
                *(_QWORD *)(v59 + 32) = v60;
              }
              ++v58;
              v60[2] = v63 + 1;
              sub_2141E801C((uint64_t)&v163, (uint64_t)&v60[v63 + 4], &qword_253F13188);
              swift_release();
            }
            while (v15 != v58);
          }
        }
      }
      else
      {
        v14 = v45;
        v15 = *(_QWORD *)((v50 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_retain_n();
        swift_retain_n();
        swift_retain_n();
        swift_retain_n();
        swift_retain();
        swift_bridgeObjectRetain();
        if (v15)
          goto LABEL_36;
      }
      swift_bridgeObjectRelease();
      v15 = (uint64_t)v159;
      v13 = a2;
      v16 = a7;
      v64 = swift_allocObject();
      *(_QWORD *)(v64 + 16) = sub_21424C860;
      *(_QWORD *)(v64 + 24) = v51;
      v65 = *(_QWORD *)(v12 + 112);
      *(_QWORD *)(v12 + 112) = sub_21424E84C;
      *(_QWORD *)(v12 + 120) = v64;
      sub_2141D972C(v65);
      v66 = swift_retain();
      MEMORY[0x2199CC8E4](v66);
      if (*(_QWORD *)((v164 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v164 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        sub_21442501C();
      sub_214425064();
      sub_214424FF8();
      swift_retain();
      swift_retain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v15 = (uint64_t)sub_214223BA0(0, v159[2] + 1, 1, v159);
      v67 = a4;
      v69 = *(_QWORD *)(v15 + 16);
      v68 = *(_QWORD *)(v15 + 24);
      if (v69 >= v68 >> 1)
        v15 = (uint64_t)sub_214223BA0((_QWORD *)(v68 > 1), v69 + 1, 1, (_QWORD *)v15);
      v17 = v157 + 1;
      *(_QWORD *)(v15 + 16) = v69 + 1;
      v70 = v15 + 32 * v69;
      v14 = (void *)v153;
      *(_QWORD *)(v70 + 32) = v153;
      *(_QWORD *)(v70 + 40) = v144;
      *(_BYTE *)(v70 + 48) = v143;
      *(_QWORD *)(v70 + 56) = v12;
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      if (v157 + 1 == v137)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v71 = v164;
        if (!(v164 >> 62))
          goto LABEL_65;
LABEL_124:
        type metadata accessor for AnySignal();
        swift_bridgeObjectRetain_n();
        v67 = a4;
        v72 = sub_214425634();
        swift_bridgeObjectRelease();
        goto LABEL_66;
      }
    }
  }
  v67 = a4;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v71 = MEMORY[0x24BEE4AF8];
  v15 = MEMORY[0x24BEE4AF8];
  if (MEMORY[0x24BEE4AF8] >> 62)
    goto LABEL_124;
LABEL_65:
  swift_bridgeObjectRetain_n();
  sub_21442579C();
  type metadata accessor for AnySignal();
  v72 = v71;
LABEL_66:
  v73 = (_QWORD *)swift_allocObject();
  v73[2] = sub_2143A2F4C;
  v73[3] = 0;
  v73[4] = v71;
  v74 = sub_21423EE98(v72, (uint64_t)sub_21424C870, (uint64_t)v73, &qword_253F11F30, (uint64_t)&unk_24D17FE80, (uint64_t)sub_21424C7F0, (void (*)(uint64_t, uint64_t))sub_2141FA1C4);
  v14 = &unk_214427000;
  v145 = *(_QWORD *)(v15 + 16);
  v146 = v74;
  if (v145)
  {
    v142 = v15 + 32;
    swift_bridgeObjectRetain();
    v75 = 0;
    v160 = v15;
    while (1)
    {
      if (v75 >= *(_QWORD *)(v15 + 16))
      {
        __break(1u);
LABEL_130:
        __break(1u);
LABEL_131:
        __break(1u);
LABEL_132:
        __break(1u);
LABEL_133:
        __break(1u);
LABEL_134:
        __break(1u);
LABEL_135:
        type metadata accessor for AnySignal();
        swift_bridgeObjectRetain();
        v120 = sub_214425634();
        swift_bridgeObjectRelease();
        goto LABEL_128;
      }
      v76 = v142 + 32 * v75;
      v77 = *(_QWORD *)(v76 + 24);
      v158 = *(_QWORD *)v76;
      if ((*(_BYTE *)(v76 + 16) & 1) != 0)
      {
        swift_retain();
        swift_retain();
        v12 = 0;
        v148 = sub_2142471C0;
        v14 = (void *)MEMORY[0x24BEE4AF8];
        v78 = MEMORY[0x24BEE4AF8];
      }
      else
      {
        v79 = *(_QWORD *)(v76 + 8);
        swift_retain();
        swift_retain();
        swift_retain();
        v12 = sub_2142357C4(v79, &qword_253F103E0);
        swift_release();
        sub_2141D8BF8(&qword_253F15D58);
        v80 = swift_allocObject();
        *(_OWORD *)(v80 + 16) = xmmword_2144271E0;
        *(_QWORD *)(v80 + 32) = v12;
        v163 = v80;
        sub_214424FF8();
        v78 = v163;
        v148 = sub_21424C900;
        v14 = (void *)MEMORY[0x24BEE4AF8];
      }
      v154 = v75;
      sub_2141D8BF8(&qword_253F11A90);
      v81 = swift_allocObject();
      *(_QWORD *)(v81 + 40) = 0;
      *(_QWORD *)(v81 + 48) = 0;
      *(_QWORD *)(v81 + 56) = 0;
      *(_QWORD *)(v81 + 64) = 1;
      *(_WORD *)(v81 + 16) = 256;
      *(_QWORD *)(v81 + 80) = 0;
      *(_QWORD *)(v81 + 88) = 0;
      *(_QWORD *)(v81 + 72) = 0;
      *(_QWORD *)(v81 + 24) = v78;
      *(_QWORD *)(v81 + 32) = v14;
      if ((unint64_t)v78 >> 62)
      {
        if (v78 < 0)
          v14 = (void *)v78;
        else
          v14 = (void *)(v78 & 0xFFFFFFFFFFFFFF8);
        swift_retain();
        swift_bridgeObjectRetain();
        v82 = sub_2144256AC();
      }
      else
      {
        v82 = *(_QWORD *)((v78 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_retain();
        swift_bridgeObjectRetain();
      }
      v15 = v146;
      v156 = v77;
      if (v82)
      {
        if (v82 < 1)
          goto LABEL_132;
        if ((v78 & 0xC000000000000001) != 0)
        {
          v83 = 0;
          do
          {
            v84 = MEMORY[0x2199CCE3C](v83, v78);
            swift_weakInit();
            v85 = *(_QWORD **)(v84 + 32);
            v86 = swift_isUniquelyReferenced_nonNull_native();
            *(_QWORD *)(v84 + 32) = v85;
            if ((v86 & 1) == 0)
            {
              v85 = sub_214221F04(0, v85[2] + 1, 1, v85);
              *(_QWORD *)(v84 + 32) = v85;
            }
            v88 = v85[2];
            v87 = v85[3];
            if (v88 >= v87 >> 1)
            {
              v85 = sub_214221F04((_QWORD *)(v87 > 1), v88 + 1, 1, v85);
              *(_QWORD *)(v84 + 32) = v85;
            }
            ++v83;
            v85[2] = v88 + 1;
            sub_2141E801C((uint64_t)&v163, (uint64_t)&v85[v88 + 4], &qword_253F13188);
            swift_unknownObjectRelease();
          }
          while (v82 != v83);
        }
        else
        {
          v90 = 0;
          do
          {
            v91 = *(_QWORD *)(v78 + 8 * v90 + 32);
            swift_weakInit();
            v92 = *(_QWORD **)(v91 + 32);
            swift_retain();
            v93 = swift_isUniquelyReferenced_nonNull_native();
            *(_QWORD *)(v91 + 32) = v92;
            if ((v93 & 1) == 0)
            {
              v92 = sub_214221F04(0, v92[2] + 1, 1, v92);
              *(_QWORD *)(v91 + 32) = v92;
            }
            v95 = v92[2];
            v94 = v92[3];
            if (v95 >= v94 >> 1)
            {
              v92 = sub_214221F04((_QWORD *)(v94 > 1), v95 + 1, 1, v92);
              *(_QWORD *)(v91 + 32) = v92;
            }
            ++v90;
            v92[2] = v95 + 1;
            sub_2141E801C((uint64_t)&v163, (uint64_t)&v92[v95 + 4], &qword_253F13188);
            swift_release();
          }
          while (v82 != v90);
        }
        v89 = v146;
        swift_bridgeObjectRelease();
        v67 = a4;
      }
      else
      {
        v89 = v146;
        swift_bridgeObjectRelease();
      }
      swift_unownedRetainStrong();
      swift_unownedRetain();
      swift_unownedRetain();
      swift_retain();
      swift_unownedRelease();
      swift_unownedRelease();
      swift_unownedRetain();
      swift_release();
      v96 = (_QWORD *)swift_allocObject();
      v96[2] = v148;
      v96[3] = v12;
      v96[4] = v81;
      v97 = *(_QWORD *)(v81 + 80);
      *(_QWORD *)(v81 + 80) = sub_21424C888;
      *(_QWORD *)(v81 + 88) = v96;
      sub_2141D972C(v97);
      swift_release();
      v98 = swift_allocObject();
      *(_BYTE *)(v98 + 16) = a5;
      *(_QWORD *)(v98 + 24) = v154;
      *(_BYTE *)(v98 + 32) = a3;
      sub_2141D8BF8(&qword_253F15D58);
      v99 = swift_allocObject();
      *(_OWORD *)(v99 + 16) = xmmword_214428C00;
      *(_QWORD *)(v99 + 32) = v158;
      *(_QWORD *)(v99 + 40) = v67;
      *(_QWORD *)(v99 + 48) = a11;
      *(_QWORD *)(v99 + 56) = a12;
      *(_QWORD *)(v99 + 64) = v89;
      *(_QWORD *)(v99 + 72) = v156;
      *(_QWORD *)(v99 + 80) = v81;
      v163 = v99;
      sub_214424FF8();
      v100 = v163;
      v101 = (_QWORD *)swift_allocObject();
      v101[2] = sub_21424C8A4;
      v101[3] = v98;
      v14 = a12;
      v101[4] = v158;
      v101[5] = v67;
      v101[6] = a11;
      v101[7] = a12;
      v101[8] = v89;
      v101[9] = v156;
      v101[10] = v81;
      sub_2141D8BF8(&qword_253F15838);
      v12 = swift_allocObject();
      *(_WORD *)(v12 + 16) = 256;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_QWORD *)(v12 + 40) = 0xF000000000000007;
      v102 = MEMORY[0x24BEE4AF8];
      *(_QWORD *)(v12 + 24) = v100;
      *(_QWORD *)(v12 + 32) = v102;
      if ((unint64_t)v100 >> 62)
      {
        if (v100 < 0)
          v14 = (void *)v100;
        else
          v14 = (void *)(v100 & 0xFFFFFFFFFFFFFF8);
        swift_retain_n();
        swift_retain_n();
        swift_retain_n();
        swift_retain_n();
        swift_retain_n();
        swift_retain_n();
        swift_retain_n();
        swift_bridgeObjectRetain();
        v15 = v67;
        v103 = sub_2144256AC();
        if (v103)
        {
LABEL_94:
          if (v103 < 1)
            goto LABEL_133;
          if ((v100 & 0xC000000000000001) != 0)
          {
            v104 = 0;
            do
            {
              v105 = MEMORY[0x2199CCE3C](v104, v100);
              swift_weakInit();
              v106 = *(_QWORD **)(v105 + 32);
              v107 = swift_isUniquelyReferenced_nonNull_native();
              *(_QWORD *)(v105 + 32) = v106;
              if ((v107 & 1) == 0)
              {
                v106 = sub_214221F04(0, v106[2] + 1, 1, v106);
                *(_QWORD *)(v105 + 32) = v106;
              }
              v109 = v106[2];
              v108 = v106[3];
              if (v109 >= v108 >> 1)
              {
                v106 = sub_214221F04((_QWORD *)(v108 > 1), v109 + 1, 1, v106);
                *(_QWORD *)(v105 + 32) = v106;
              }
              ++v104;
              v106[2] = v109 + 1;
              sub_2141E801C((uint64_t)&v163, (uint64_t)&v106[v109 + 4], &qword_253F13188);
              swift_unknownObjectRelease();
            }
            while (v103 != v104);
          }
          else
          {
            v110 = 0;
            do
            {
              v111 = *(_QWORD *)(v100 + 8 * v110 + 32);
              swift_weakInit();
              v112 = *(_QWORD **)(v111 + 32);
              swift_retain();
              v113 = swift_isUniquelyReferenced_nonNull_native();
              *(_QWORD *)(v111 + 32) = v112;
              if ((v113 & 1) == 0)
              {
                v112 = sub_214221F04(0, v112[2] + 1, 1, v112);
                *(_QWORD *)(v111 + 32) = v112;
              }
              v115 = v112[2];
              v114 = v112[3];
              if (v115 >= v114 >> 1)
              {
                v112 = sub_214221F04((_QWORD *)(v114 > 1), v115 + 1, 1, v112);
                *(_QWORD *)(v111 + 32) = v112;
              }
              ++v110;
              v112[2] = v115 + 1;
              sub_2141E801C((uint64_t)&v163, (uint64_t)&v112[v115 + 4], &qword_253F13188);
              swift_release();
            }
            while (v103 != v110);
          }
          swift_bridgeObjectRelease();
          v116 = a4;
          goto LABEL_119;
        }
      }
      else
      {
        v15 = v67;
        v103 = *(_QWORD *)((v100 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_retain_n();
        swift_retain_n();
        swift_retain_n();
        swift_retain_n();
        swift_retain_n();
        swift_retain_n();
        swift_retain_n();
        swift_bridgeObjectRetain();
        if (v103)
          goto LABEL_94;
      }
      v116 = v15;
      swift_bridgeObjectRelease();
LABEL_119:
      v117 = swift_allocObject();
      *(_QWORD *)(v117 + 16) = sub_21424C8B4;
      *(_QWORD *)(v117 + 24) = v101;
      v118 = *(_QWORD *)(v12 + 48);
      *(_QWORD *)(v12 + 48) = sub_21424C7F0;
      *(_QWORD *)(v12 + 56) = v117;
      sub_2141D972C(v118);
      v119 = swift_retain();
      MEMORY[0x2199CC8E4](v119);
      v14 = *(void **)((v165 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v15 = v160;
      if ((unint64_t)v14 >= *(_QWORD *)((v165 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        sub_21442501C();
      v75 = v154 + 1;
      sub_214425064();
      sub_214424FF8();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      v67 = v116;
      if (v154 + 1 == v145)
      {
        swift_bridgeObjectRelease_n();
        goto LABEL_126;
      }
    }
  }
  swift_bridgeObjectRelease();
LABEL_126:
  swift_bridgeObjectRelease();
  v14 = (void *)v165;
  v12 = v146;
  v15 = (uint64_t)&unk_214427000;
  if (v165 >> 62)
    goto LABEL_135;
  swift_bridgeObjectRetain();
  sub_21442579C();
  type metadata accessor for AnySignal();
  v120 = (unint64_t)v14;
LABEL_128:
  v121 = (_QWORD *)swift_allocObject();
  v121[2] = sub_21423E220;
  v121[3] = 0;
  v121[4] = v14;
  v122 = sub_214240610(v120, (uint64_t)sub_21424E6CC, (uint64_t)v121);
  sub_2141D8BF8(&qword_253F15D58);
  v123 = swift_allocObject();
  v162 = *(_OWORD *)(v15 + 480);
  *(_OWORD *)(v123 + 16) = v162;
  *(_QWORD *)(v123 + 32) = v12;
  v163 = v123;
  sub_214424FF8();
  v124 = v163;
  v125 = (_QWORD *)swift_allocObject();
  v125[2] = sub_2143A3180;
  v125[3] = 0;
  v125[4] = v12;
  swift_retain_n();
  sub_214240350(v124, (uint64_t)sub_21424C8F0, (uint64_t)v125);
  v126 = swift_allocObject();
  *(_OWORD *)(v126 + 16) = v162;
  *(_QWORD *)(v126 + 32) = v12;
  v163 = v126;
  sub_214424FF8();
  v127 = v163;
  v128 = (_QWORD *)swift_allocObject();
  v128[2] = sub_2143A3344;
  v128[3] = 0;
  v128[4] = v12;
  swift_retain();
  sub_214240350(v127, (uint64_t)sub_21424C8F0, (uint64_t)v128);
  return v122;
}

uint64_t sub_21424ACD4(_QWORD *a1, uint64_t a2, char a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  char v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  char v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  char v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  char v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  char v93;
  unint64_t v94;
  unint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  char v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  char v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  _QWORD *v125;
  uint64_t v126;
  unint64_t v127;
  _QWORD *v128;
  uint64_t v130;
  uint64_t v131;
  unint64_t v135;
  _QWORD *v136;
  uint64_t v137;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char v147;
  void *v148;
  char v151;
  char v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  _QWORD *v159;
  uint64_t v160;
  __int128 v162;
  uint64_t v163;
  unint64_t v164;
  unint64_t v165;

  v13 = a2;
  v14 = a1;
  v15 = MEMORY[0x24BEE4AF8];
  v164 = MEMORY[0x24BEE4AF8];
  v165 = MEMORY[0x24BEE4AF8];
  v137 = a1[2];
  if (v137)
  {
    v16 = a7;
    v17 = 0;
    v135 = a2 & 0xC000000000000001;
    v136 = a1 + 4;
    v131 = a2 & 0xFFFFFFFFFFFFFF8;
    v130 = a2 + 32;
    while (1)
    {
      v18 = &v136[10 * v17];
      v12 = v18[8];
      v19 = *((_BYTE *)v18 + 72);
      v159 = (_QWORD *)v15;
      v141 = v18[6];
      v152 = *((_BYTE *)v18 + 56);
      v140 = v18[2];
      v151 = *((_BYTE *)v18 + 24);
      v139 = *v18;
      v147 = *((_BYTE *)v18 + 8);
      if (v135)
      {
        v15 = MEMORY[0x2199CCE3C](v17, v13);
      }
      else
      {
        if (v17 >= *(_QWORD *)(v131 + 16))
          goto LABEL_134;
        v15 = *(_QWORD *)(v130 + 8 * v17);
        swift_retain();
      }
      v157 = v17;
      v20 = swift_allocObject();
      *(_BYTE *)(v20 + 16) = a5;
      sub_2141D8BF8(&qword_253F15D58);
      v21 = swift_allocObject();
      *(_OWORD *)(v21 + 16) = xmmword_2144271F0;
      *(_QWORD *)(v21 + 32) = v16;
      *(_QWORD *)(v21 + 40) = a6;
      *(_QWORD *)(v21 + 48) = v15;
      v163 = v21;
      sub_214424FF8();
      v22 = v163;
      v23 = (_QWORD *)swift_allocObject();
      v23[2] = sub_21424E150;
      v23[3] = v20;
      v23[4] = v16;
      v23[5] = a6;
      v23[6] = v15;
      sub_2141D8BF8(&qword_253F131A0);
      v24 = swift_allocObject();
      *(_OWORD *)(v24 + 40) = 0u;
      *(_OWORD *)(v24 + 56) = 0u;
      *(_QWORD *)(v24 + 72) = 0;
      *(_BYTE *)(v24 + 80) = -1;
      *(_WORD *)(v24 + 16) = 256;
      *(_QWORD *)(v24 + 88) = 0;
      *(_QWORD *)(v24 + 96) = 0;
      v14 = (void *)MEMORY[0x24BEE4AF8];
      *(_QWORD *)(v24 + 24) = v22;
      *(_QWORD *)(v24 + 32) = v14;
      if (v22 >> 62)
      {
        swift_retain_n();
        swift_retain_n();
        swift_retain_n();
        swift_bridgeObjectRetain();
        v14 = (void *)MEMORY[0x24BEE4AF8];
        v25 = sub_2144256AC();
      }
      else
      {
        v25 = *(_QWORD *)((v22 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_retain_n();
        swift_retain_n();
        swift_retain_n();
        swift_bridgeObjectRetain();
      }
      v26 = a10;
      v155 = v15;
      v144 = v12;
      v143 = v19;
      if (v25)
      {
        if (v25 < 1)
          goto LABEL_130;
        if ((v22 & 0xC000000000000001) != 0)
        {
          v27 = 0;
          do
          {
            v28 = MEMORY[0x2199CCE3C](v27, v22);
            swift_weakInit();
            v29 = *(_QWORD **)(v28 + 32);
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            *(_QWORD *)(v28 + 32) = v29;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              v29 = sub_214221F04(0, v29[2] + 1, 1, v29);
              *(_QWORD *)(v28 + 32) = v29;
            }
            v32 = v29[2];
            v31 = v29[3];
            if (v32 >= v31 >> 1)
            {
              v29 = sub_214221F04((_QWORD *)(v31 > 1), v32 + 1, 1, v29);
              *(_QWORD *)(v28 + 32) = v29;
            }
            ++v27;
            v29[2] = v32 + 1;
            sub_2141E801C((uint64_t)&v163, (uint64_t)&v29[v32 + 4], &qword_253F13188);
            swift_unknownObjectRelease();
          }
          while (v25 != v27);
        }
        else
        {
          v33 = 0;
          do
          {
            v34 = *(_QWORD *)(v22 + 8 * v33 + 32);
            swift_weakInit();
            v35 = *(_QWORD **)(v34 + 32);
            swift_retain();
            v36 = swift_isUniquelyReferenced_nonNull_native();
            *(_QWORD *)(v34 + 32) = v35;
            if ((v36 & 1) == 0)
            {
              v35 = sub_214221F04(0, v35[2] + 1, 1, v35);
              *(_QWORD *)(v34 + 32) = v35;
            }
            v38 = v35[2];
            v37 = v35[3];
            if (v38 >= v37 >> 1)
            {
              v35 = sub_214221F04((_QWORD *)(v37 > 1), v38 + 1, 1, v35);
              *(_QWORD *)(v34 + 32) = v35;
            }
            ++v33;
            v35[2] = v38 + 1;
            sub_2141E801C((uint64_t)&v163, (uint64_t)&v35[v38 + 4], &qword_253F13188);
            swift_release();
          }
          while (v25 != v33);
        }
        swift_bridgeObjectRelease();
        v14 = (void *)MEMORY[0x24BEE4AF8];
        v26 = a10;
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      v39 = swift_allocObject();
      *(_QWORD *)(v39 + 16) = sub_21424C838;
      *(_QWORD *)(v39 + 24) = v23;
      v40 = *(_QWORD *)(v24 + 88);
      *(_QWORD *)(v24 + 88) = sub_21424E84C;
      *(_QWORD *)(v24 + 96) = v39;
      sub_2141D972C(v40);
      if ((v147 & 1) != 0)
      {
        v41 = 0;
        if ((v151 & 1) == 0)
          goto LABEL_29;
      }
      else
      {
        swift_retain();
        v41 = sub_2142357C4(v139, &qword_253F11A70);
        swift_release();
        if ((v151 & 1) == 0)
        {
LABEL_29:
          swift_retain();
          v42 = sub_2142357C4(v140, &qword_253F10F88);
          swift_release();
          if ((v152 & 1) == 0)
            goto LABEL_30;
          goto LABEL_33;
        }
      }
      v42 = 0;
      if ((v152 & 1) == 0)
      {
LABEL_30:
        swift_retain();
        v43 = sub_2142357C4(v141, &qword_253F11A98);
        swift_release();
        goto LABEL_34;
      }
LABEL_33:
      v43 = 0;
LABEL_34:
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      v153 = sub_21423CA2C(v155, v24, v157, a3, a5, v41, v42, v43, v26, a8);
      v45 = v44;
      v46 = v26;
      v48 = v47;
      v49 = swift_allocObject();
      *(_OWORD *)(v49 + 16) = xmmword_214428BD0;
      *(_QWORD *)(v49 + 32) = v155;
      *(_QWORD *)(v49 + 40) = v45;
      *(_QWORD *)(v49 + 48) = v48;
      *(_QWORD *)(v49 + 56) = a9;
      v163 = v49;
      sub_214424FF8();
      v50 = v163;
      v51 = (_QWORD *)swift_allocObject();
      v51[2] = sub_21424C844;
      v51[3] = v46;
      v51[4] = v155;
      v51[5] = v45;
      v51[6] = v48;
      v51[7] = a9;
      sub_2141D8BF8(&qword_253F0FE68);
      v12 = swift_allocObject();
      *(_WORD *)(v12 + 16) = 256;
      *(_OWORD *)(v12 + 40) = 0u;
      *(_OWORD *)(v12 + 56) = 0u;
      *(_OWORD *)(v12 + 72) = 0u;
      *(_OWORD *)(v12 + 88) = 0u;
      *(_OWORD *)(v12 + 104) = 0u;
      *(_QWORD *)(v12 + 120) = 0;
      *(_QWORD *)(v12 + 24) = v50;
      *(_QWORD *)(v12 + 32) = v14;
      if ((unint64_t)v50 >> 62)
      {
        if (v50 < 0)
          v14 = (void *)v50;
        else
          v14 = (void *)(v50 & 0xFFFFFFFFFFFFFF8);
        swift_retain_n();
        swift_retain_n();
        swift_retain_n();
        swift_retain_n();
        swift_retain();
        swift_bridgeObjectRetain();
        v15 = sub_2144256AC();
        if (v15)
        {
LABEL_36:
          if (v15 < 1)
            goto LABEL_131;
          if ((v50 & 0xC000000000000001) != 0)
          {
            v52 = 0;
            do
            {
              v53 = MEMORY[0x2199CCE3C](v52, v50);
              swift_weakInit();
              v54 = *(_QWORD **)(v53 + 32);
              v55 = swift_isUniquelyReferenced_nonNull_native();
              *(_QWORD *)(v53 + 32) = v54;
              if ((v55 & 1) == 0)
              {
                v54 = sub_214221F04(0, v54[2] + 1, 1, v54);
                *(_QWORD *)(v53 + 32) = v54;
              }
              v57 = v54[2];
              v56 = v54[3];
              if (v57 >= v56 >> 1)
              {
                v54 = sub_214221F04((_QWORD *)(v56 > 1), v57 + 1, 1, v54);
                *(_QWORD *)(v53 + 32) = v54;
              }
              ++v52;
              v54[2] = v57 + 1;
              sub_2141E801C((uint64_t)&v163, (uint64_t)&v54[v57 + 4], &qword_253F13188);
              swift_unknownObjectRelease();
            }
            while (v15 != v52);
          }
          else
          {
            v58 = 0;
            do
            {
              v59 = *(_QWORD *)(v50 + 8 * v58 + 32);
              swift_weakInit();
              v60 = *(_QWORD **)(v59 + 32);
              swift_retain();
              v61 = swift_isUniquelyReferenced_nonNull_native();
              *(_QWORD *)(v59 + 32) = v60;
              if ((v61 & 1) == 0)
              {
                v60 = sub_214221F04(0, v60[2] + 1, 1, v60);
                *(_QWORD *)(v59 + 32) = v60;
              }
              v63 = v60[2];
              v62 = v60[3];
              if (v63 >= v62 >> 1)
              {
                v60 = sub_214221F04((_QWORD *)(v62 > 1), v63 + 1, 1, v60);
                *(_QWORD *)(v59 + 32) = v60;
              }
              ++v58;
              v60[2] = v63 + 1;
              sub_2141E801C((uint64_t)&v163, (uint64_t)&v60[v63 + 4], &qword_253F13188);
              swift_release();
            }
            while (v15 != v58);
          }
        }
      }
      else
      {
        v14 = v45;
        v15 = *(_QWORD *)((v50 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_retain_n();
        swift_retain_n();
        swift_retain_n();
        swift_retain_n();
        swift_retain();
        swift_bridgeObjectRetain();
        if (v15)
          goto LABEL_36;
      }
      swift_bridgeObjectRelease();
      v15 = (uint64_t)v159;
      v13 = a2;
      v16 = a7;
      v64 = swift_allocObject();
      *(_QWORD *)(v64 + 16) = sub_21424C860;
      *(_QWORD *)(v64 + 24) = v51;
      v65 = *(_QWORD *)(v12 + 112);
      *(_QWORD *)(v12 + 112) = sub_21424C7F0;
      *(_QWORD *)(v12 + 120) = v64;
      sub_2141D972C(v65);
      v66 = swift_retain();
      MEMORY[0x2199CC8E4](v66);
      if (*(_QWORD *)((v164 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v164 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        sub_21442501C();
      sub_214425064();
      sub_214424FF8();
      swift_retain();
      swift_retain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v15 = (uint64_t)sub_214222060(0, v159[2] + 1, 1, v159);
      v67 = a4;
      v69 = *(_QWORD *)(v15 + 16);
      v68 = *(_QWORD *)(v15 + 24);
      if (v69 >= v68 >> 1)
        v15 = (uint64_t)sub_214222060((_QWORD *)(v68 > 1), v69 + 1, 1, (_QWORD *)v15);
      v17 = v157 + 1;
      *(_QWORD *)(v15 + 16) = v69 + 1;
      v70 = v15 + 32 * v69;
      v14 = (void *)v153;
      *(_QWORD *)(v70 + 32) = v153;
      *(_QWORD *)(v70 + 40) = v144;
      *(_BYTE *)(v70 + 48) = v143;
      *(_QWORD *)(v70 + 56) = v12;
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      if (v157 + 1 == v137)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v71 = v164;
        if (!(v164 >> 62))
          goto LABEL_65;
LABEL_124:
        type metadata accessor for AnySignal();
        swift_bridgeObjectRetain_n();
        v67 = a4;
        v72 = sub_214425634();
        swift_bridgeObjectRelease();
        goto LABEL_66;
      }
    }
  }
  v67 = a4;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v71 = MEMORY[0x24BEE4AF8];
  v15 = MEMORY[0x24BEE4AF8];
  if (MEMORY[0x24BEE4AF8] >> 62)
    goto LABEL_124;
LABEL_65:
  swift_bridgeObjectRetain_n();
  sub_21442579C();
  type metadata accessor for AnySignal();
  v72 = v71;
LABEL_66:
  v73 = (_QWORD *)swift_allocObject();
  v73[2] = sub_2143A2F4C;
  v73[3] = 0;
  v73[4] = v71;
  v74 = sub_21423EE98(v72, (uint64_t)sub_21424E6D0, (uint64_t)v73, &qword_253F11F30, (uint64_t)&unk_24D17FE80, (uint64_t)sub_21424C7F0, (void (*)(uint64_t, uint64_t))sub_2141FA1C4);
  v14 = &unk_214427000;
  v145 = *(_QWORD *)(v15 + 16);
  v146 = v74;
  if (v145)
  {
    v142 = v15 + 32;
    swift_bridgeObjectRetain();
    v75 = 0;
    v160 = v15;
    while (1)
    {
      if (v75 >= *(_QWORD *)(v15 + 16))
      {
        __break(1u);
LABEL_130:
        __break(1u);
LABEL_131:
        __break(1u);
LABEL_132:
        __break(1u);
LABEL_133:
        __break(1u);
LABEL_134:
        __break(1u);
LABEL_135:
        type metadata accessor for AnySignal();
        swift_bridgeObjectRetain();
        v120 = sub_214425634();
        swift_bridgeObjectRelease();
        goto LABEL_128;
      }
      v76 = v142 + 32 * v75;
      v77 = *(_QWORD *)(v76 + 24);
      v158 = *(_QWORD *)v76;
      if ((*(_BYTE *)(v76 + 16) & 1) != 0)
      {
        swift_retain();
        swift_retain();
        v12 = 0;
        v148 = sub_2142471C0;
        v14 = (void *)MEMORY[0x24BEE4AF8];
        v78 = MEMORY[0x24BEE4AF8];
      }
      else
      {
        v79 = *(_QWORD *)(v76 + 8);
        swift_retain();
        swift_retain();
        swift_retain();
        v12 = sub_2142357C4(v79, &qword_253F103E0);
        swift_release();
        sub_2141D8BF8(&qword_253F15D58);
        v80 = swift_allocObject();
        *(_OWORD *)(v80 + 16) = xmmword_2144271E0;
        *(_QWORD *)(v80 + 32) = v12;
        v163 = v80;
        sub_214424FF8();
        v78 = v163;
        v148 = sub_21424C900;
        v14 = (void *)MEMORY[0x24BEE4AF8];
      }
      v154 = v75;
      sub_2141D8BF8(&qword_253F11A90);
      v81 = swift_allocObject();
      *(_QWORD *)(v81 + 40) = 0;
      *(_QWORD *)(v81 + 48) = 0;
      *(_QWORD *)(v81 + 56) = 0;
      *(_QWORD *)(v81 + 64) = 1;
      *(_WORD *)(v81 + 16) = 256;
      *(_QWORD *)(v81 + 80) = 0;
      *(_QWORD *)(v81 + 88) = 0;
      *(_QWORD *)(v81 + 72) = 0;
      *(_QWORD *)(v81 + 24) = v78;
      *(_QWORD *)(v81 + 32) = v14;
      if ((unint64_t)v78 >> 62)
      {
        if (v78 < 0)
          v14 = (void *)v78;
        else
          v14 = (void *)(v78 & 0xFFFFFFFFFFFFFF8);
        swift_retain();
        swift_bridgeObjectRetain();
        v82 = sub_2144256AC();
      }
      else
      {
        v82 = *(_QWORD *)((v78 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_retain();
        swift_bridgeObjectRetain();
      }
      v15 = v146;
      v156 = v77;
      if (v82)
      {
        if (v82 < 1)
          goto LABEL_132;
        if ((v78 & 0xC000000000000001) != 0)
        {
          v83 = 0;
          do
          {
            v84 = MEMORY[0x2199CCE3C](v83, v78);
            swift_weakInit();
            v85 = *(_QWORD **)(v84 + 32);
            v86 = swift_isUniquelyReferenced_nonNull_native();
            *(_QWORD *)(v84 + 32) = v85;
            if ((v86 & 1) == 0)
            {
              v85 = sub_214221F04(0, v85[2] + 1, 1, v85);
              *(_QWORD *)(v84 + 32) = v85;
            }
            v88 = v85[2];
            v87 = v85[3];
            if (v88 >= v87 >> 1)
            {
              v85 = sub_214221F04((_QWORD *)(v87 > 1), v88 + 1, 1, v85);
              *(_QWORD *)(v84 + 32) = v85;
            }
            ++v83;
            v85[2] = v88 + 1;
            sub_2141E801C((uint64_t)&v163, (uint64_t)&v85[v88 + 4], &qword_253F13188);
            swift_unknownObjectRelease();
          }
          while (v82 != v83);
        }
        else
        {
          v90 = 0;
          do
          {
            v91 = *(_QWORD *)(v78 + 8 * v90 + 32);
            swift_weakInit();
            v92 = *(_QWORD **)(v91 + 32);
            swift_retain();
            v93 = swift_isUniquelyReferenced_nonNull_native();
            *(_QWORD *)(v91 + 32) = v92;
            if ((v93 & 1) == 0)
            {
              v92 = sub_214221F04(0, v92[2] + 1, 1, v92);
              *(_QWORD *)(v91 + 32) = v92;
            }
            v95 = v92[2];
            v94 = v92[3];
            if (v95 >= v94 >> 1)
            {
              v92 = sub_214221F04((_QWORD *)(v94 > 1), v95 + 1, 1, v92);
              *(_QWORD *)(v91 + 32) = v92;
            }
            ++v90;
            v92[2] = v95 + 1;
            sub_2141E801C((uint64_t)&v163, (uint64_t)&v92[v95 + 4], &qword_253F13188);
            swift_release();
          }
          while (v82 != v90);
        }
        v89 = v146;
        swift_bridgeObjectRelease();
        v67 = a4;
      }
      else
      {
        v89 = v146;
        swift_bridgeObjectRelease();
      }
      swift_unownedRetainStrong();
      swift_unownedRetain();
      swift_unownedRetain();
      swift_retain();
      swift_unownedRelease();
      swift_unownedRelease();
      swift_unownedRetain();
      swift_release();
      v96 = (_QWORD *)swift_allocObject();
      v96[2] = v148;
      v96[3] = v12;
      v96[4] = v81;
      v97 = *(_QWORD *)(v81 + 80);
      *(_QWORD *)(v81 + 80) = sub_21424E6D4;
      *(_QWORD *)(v81 + 88) = v96;
      sub_2141D972C(v97);
      swift_release();
      v98 = swift_allocObject();
      *(_BYTE *)(v98 + 16) = a5;
      *(_QWORD *)(v98 + 24) = v154;
      *(_BYTE *)(v98 + 32) = a3;
      sub_2141D8BF8(&qword_253F15D58);
      v99 = swift_allocObject();
      *(_OWORD *)(v99 + 16) = xmmword_214428C00;
      *(_QWORD *)(v99 + 32) = v158;
      *(_QWORD *)(v99 + 40) = v67;
      *(_QWORD *)(v99 + 48) = a11;
      *(_QWORD *)(v99 + 56) = a12;
      *(_QWORD *)(v99 + 64) = v89;
      *(_QWORD *)(v99 + 72) = v156;
      *(_QWORD *)(v99 + 80) = v81;
      v163 = v99;
      sub_214424FF8();
      v100 = v163;
      v101 = (_QWORD *)swift_allocObject();
      v101[2] = sub_21424E1AC;
      v101[3] = v98;
      v14 = a12;
      v101[4] = v158;
      v101[5] = v67;
      v101[6] = a11;
      v101[7] = a12;
      v101[8] = v89;
      v101[9] = v156;
      v101[10] = v81;
      sub_2141D8BF8(&qword_253F15838);
      v12 = swift_allocObject();
      *(_WORD *)(v12 + 16) = 256;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_QWORD *)(v12 + 40) = 0xF000000000000007;
      v102 = MEMORY[0x24BEE4AF8];
      *(_QWORD *)(v12 + 24) = v100;
      *(_QWORD *)(v12 + 32) = v102;
      if ((unint64_t)v100 >> 62)
      {
        if (v100 < 0)
          v14 = (void *)v100;
        else
          v14 = (void *)(v100 & 0xFFFFFFFFFFFFFF8);
        swift_retain_n();
        swift_retain_n();
        swift_retain_n();
        swift_retain_n();
        swift_retain_n();
        swift_retain_n();
        swift_retain_n();
        swift_bridgeObjectRetain();
        v15 = v67;
        v103 = sub_2144256AC();
        if (v103)
        {
LABEL_94:
          if (v103 < 1)
            goto LABEL_133;
          if ((v100 & 0xC000000000000001) != 0)
          {
            v104 = 0;
            do
            {
              v105 = MEMORY[0x2199CCE3C](v104, v100);
              swift_weakInit();
              v106 = *(_QWORD **)(v105 + 32);
              v107 = swift_isUniquelyReferenced_nonNull_native();
              *(_QWORD *)(v105 + 32) = v106;
              if ((v107 & 1) == 0)
              {
                v106 = sub_214221F04(0, v106[2] + 1, 1, v106);
                *(_QWORD *)(v105 + 32) = v106;
              }
              v109 = v106[2];
              v108 = v106[3];
              if (v109 >= v108 >> 1)
              {
                v106 = sub_214221F04((_QWORD *)(v108 > 1), v109 + 1, 1, v106);
                *(_QWORD *)(v105 + 32) = v106;
              }
              ++v104;
              v106[2] = v109 + 1;
              sub_2141E801C((uint64_t)&v163, (uint64_t)&v106[v109 + 4], &qword_253F13188);
              swift_unknownObjectRelease();
            }
            while (v103 != v104);
          }
          else
          {
            v110 = 0;
            do
            {
              v111 = *(_QWORD *)(v100 + 8 * v110 + 32);
              swift_weakInit();
              v112 = *(_QWORD **)(v111 + 32);
              swift_retain();
              v113 = swift_isUniquelyReferenced_nonNull_native();
              *(_QWORD *)(v111 + 32) = v112;
              if ((v113 & 1) == 0)
              {
                v112 = sub_214221F04(0, v112[2] + 1, 1, v112);
                *(_QWORD *)(v111 + 32) = v112;
              }
              v115 = v112[2];
              v114 = v112[3];
              if (v115 >= v114 >> 1)
              {
                v112 = sub_214221F04((_QWORD *)(v114 > 1), v115 + 1, 1, v112);
                *(_QWORD *)(v111 + 32) = v112;
              }
              ++v110;
              v112[2] = v115 + 1;
              sub_2141E801C((uint64_t)&v163, (uint64_t)&v112[v115 + 4], &qword_253F13188);
              swift_release();
            }
            while (v103 != v110);
          }
          swift_bridgeObjectRelease();
          v116 = a4;
          goto LABEL_119;
        }
      }
      else
      {
        v15 = v67;
        v103 = *(_QWORD *)((v100 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_retain_n();
        swift_retain_n();
        swift_retain_n();
        swift_retain_n();
        swift_retain_n();
        swift_retain_n();
        swift_retain_n();
        swift_bridgeObjectRetain();
        if (v103)
          goto LABEL_94;
      }
      v116 = v15;
      swift_bridgeObjectRelease();
LABEL_119:
      v117 = swift_allocObject();
      *(_QWORD *)(v117 + 16) = sub_21424E298;
      *(_QWORD *)(v117 + 24) = v101;
      v118 = *(_QWORD *)(v12 + 48);
      *(_QWORD *)(v12 + 48) = sub_21424E84C;
      *(_QWORD *)(v12 + 56) = v117;
      sub_2141D972C(v118);
      v119 = swift_retain();
      MEMORY[0x2199CC8E4](v119);
      v14 = *(void **)((v165 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v15 = v160;
      if ((unint64_t)v14 >= *(_QWORD *)((v165 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        sub_21442501C();
      v75 = v154 + 1;
      sub_214425064();
      sub_214424FF8();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      v67 = v116;
      if (v154 + 1 == v145)
      {
        swift_bridgeObjectRelease_n();
        goto LABEL_126;
      }
    }
  }
  swift_bridgeObjectRelease();
LABEL_126:
  swift_bridgeObjectRelease();
  v14 = (void *)v165;
  v12 = v146;
  v15 = (uint64_t)&unk_214427000;
  if (v165 >> 62)
    goto LABEL_135;
  swift_bridgeObjectRetain();
  sub_21442579C();
  type metadata accessor for AnySignal();
  v120 = (unint64_t)v14;
LABEL_128:
  v121 = (_QWORD *)swift_allocObject();
  v121[2] = sub_21423E220;
  v121[3] = 0;
  v121[4] = v14;
  v122 = sub_214240610(v120, (uint64_t)sub_21424E6CC, (uint64_t)v121);
  sub_2141D8BF8(&qword_253F15D58);
  v123 = swift_allocObject();
  v162 = *(_OWORD *)(v15 + 480);
  *(_OWORD *)(v123 + 16) = v162;
  *(_QWORD *)(v123 + 32) = v12;
  v163 = v123;
  sub_214424FF8();
  v124 = v163;
  v125 = (_QWORD *)swift_allocObject();
  v125[2] = sub_2143A3180;
  v125[3] = 0;
  v125[4] = v12;
  swift_retain_n();
  sub_214240350(v124, (uint64_t)sub_21424C8F0, (uint64_t)v125);
  v126 = swift_allocObject();
  *(_OWORD *)(v126 + 16) = v162;
  *(_QWORD *)(v126 + 32) = v12;
  v163 = v126;
  sub_214424FF8();
  v127 = v163;
  v128 = (_QWORD *)swift_allocObject();
  v128[2] = sub_2143A3344;
  v128[3] = 0;
  v128[4] = v12;
  swift_retain();
  sub_214240350(v127, (uint64_t)sub_21424C8F0, (uint64_t)v128);
  return v122;
}

uint64_t sub_21424C25C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_214248250(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_21424C264@<X0>(uint64_t a1@<X0>, const void *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, unint64_t *a7@<X8>)
{
  uint64_t v7;

  return sub_21423BBD4(a1, a2, a3, a4, a5, a6, v7, a7);
}

uint64_t sub_21424C26C()
{
  return sub_2141F9510((void (*)(_QWORD))MEMORY[0x24BEE4BC0]);
}

uint64_t sub_21424C27C@<X0>(uint64_t *a1@<X8>)
{
  return sub_21424D804((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_214244720, a1);
}

uint64_t sub_21424C288()
{
  return sub_2141F9510((void (*)(_QWORD))MEMORY[0x24BEE4BC0]);
}

uint64_t sub_21424C294@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_214247FC0(*(void (**)(uint64_t *__return_ptr, char *))(v1 + 16), *(_QWORD *)(v1 + 32), a1);
}

uint64_t sub_21424C2A0()
{
  return sub_2141F9510((void (*)(_QWORD))MEMORY[0x24BEE4BC0]);
}

uint64_t sub_21424C2AC()
{
  return sub_2141F9510((void (*)(_QWORD))MEMORY[0x24BEE4BC0]);
}

uint64_t sub_21424C2B8()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_21424C304@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = sub_2141F55DC(*(void (**)(uint64_t *__return_ptr, _OWORD *, __int128 *, uint64_t *, uint64_t *, uint64_t *))(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64));
  *a1 = v4;
  a1[1] = v5;
  a1[2] = v6;
  a1[3] = v7;
  return result;
}

uint64_t sub_21424C33C@<X0>(uint64_t a1@<X0>, const void *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, unint64_t *a7@<X8>)
{
  uint64_t v7;

  return sub_21423C148(a1, a2, a3, a4, a5, a6, v7, a7);
}

uint64_t sub_21424C344@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_2142481C0(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_21424C350@<X0>(uint64_t *a1@<X8>)
{
  return sub_21424E588((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))sub_2141F4B1C, a1);
}

uint64_t sub_21424C35C(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_21424C3A0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = sub_214247B74(*(_QWORD *)(v1 + 16));
  *a1 = result;
  return result;
}

uint64_t sub_21424C3E0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = sub_214245DA8(*(void (**)(uint64_t *__return_ptr, uint64_t *, uint64_t *, uint64_t *, uint64_t *))(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56));
  *a1 = result;
  return result;
}

uint64_t sub_21424C410()
{
  return sub_2141F9510((void (*)(_QWORD))MEMORY[0x24BEE4EF8]);
}

_QWORD *sub_21424C41C@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  _QWORD *result;
  uint64_t v4;

  result = sub_214243DFC(*(_QWORD *(**)(uint64_t *__return_ptr, __int128 *))(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
  *a1 = v4;
  return result;
}

uint64_t sub_21424C44C@<X0>(uint64_t *a1@<X0>, double *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;

  return sub_21423BF64(a1, a2, a3, v4 + 16, a4);
}

uint64_t sub_21424C45C(uint64_t a1, void (*a2)(uint64_t, unint64_t, unint64_t), uint64_t (*a3)(uint64_t, uint64_t, _QWORD), uint64_t (*a4)(uint64_t, uint64_t, _QWORD))
{
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;

  v7 = *(_QWORD *)(a1 + 64);
  v8 = *(_QWORD *)(a1 + 72);
  v9 = *(_BYTE *)(a1 + 80);
  sub_2141E7E88(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), a2);
  sub_2142496E8(v7, v8, v9, a3, a4);
  return a1;
}

uint64_t sub_21424C4CC()
{
  return sub_2141F9510((void (*)(_QWORD))MEMORY[0x24BEE4EF8]);
}

uint64_t sub_21424C4DC@<X0>(uint64_t *a1@<X0>, double *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;

  return sub_21423BE64(a1, a2, a3, v4 + 16, a4);
}

uint64_t sub_21424C4E8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = sub_214244518(*(void (**)(uint64_t *__return_ptr, uint64_t *, uint64_t *, _QWORD *))(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD **)(v1 + 48));
  *a1 = result;
  return result;
}

uint64_t sub_21424C518@<X0>(uint64_t a1@<X8>)
{
  swift_retain();
  return sub_21423618C(a1);
}

uint64_t sub_21424C540()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_21424C560@<X0>(uint64_t a1@<X8>)
{
  swift_retain();
  return sub_2142363C0(a1);
}

uint64_t sub_21424C588@<X0>(uint64_t a1@<X8>)
{
  swift_retain();
  return sub_2142365E8(a1);
}

uint64_t sub_21424C5B0@<X0>(uint64_t a1@<X8>)
{
  swift_retain();
  return sub_214236874(a1);
}

uint64_t sub_21424C5D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  if (a3)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_21424C608(uint64_t a1)
{
  sub_2141E7F20(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8), *(_BYTE *)(a1 + 9));
  return a1;
}

uint64_t sub_21424C638(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 v4;

  v2 = *(_QWORD *)(a1 + 64);
  v3 = *(_QWORD *)(a1 + 72);
  v4 = *(_BYTE *)(a1 + 80);
  sub_2141E7E88(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), (void (*)(uint64_t, unint64_t, unint64_t))sub_2141E7DC4);
  sub_2142496E8(v2, v3, v4, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7DF0, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7DD4);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t sub_21424C754()
{
  return sub_2141F9510((void (*)(_QWORD))MEMORY[0x24BEE4BC0]);
}

uint64_t sub_21424C760@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_21424849C(*(void (**)(uint64_t *__return_ptr, uint64_t))(v1 + 16), *(_QWORD *)(v1 + 32), &qword_253F12170, &qword_253F12038, MEMORY[0x24BEE13F8], (void (*)(BOOL, unint64_t, uint64_t))sub_2141D3B14, a1);
}

uint64_t sub_21424C7A0@<X0>(uint64_t *a1@<X8>)
{
  return sub_21424E588((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))sub_2141F4A0C, a1);
}

uint64_t sub_21424C7B0@<X0>(uint64_t *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;

  return sub_214238C7C(*a1, a2, a3, v4 + 16, a4);
}

uint64_t sub_21424C7BC()
{
  return sub_2141F9510((void (*)(_QWORD))MEMORY[0x24BEE4EF8]);
}

uint64_t sub_21424C7CC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_21424C7F0()
{
  uint64_t v0;

  (*(void (**)(void))(v0 + 16))();
  return 0;
}

uint64_t sub_21424C818()
{
  return swift_deallocObject();
}

uint64_t sub_21424C828@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;

  return sub_21423C834(a1, a2, *a3, *(_BYTE *)(v4 + 16), a4);
}

uint64_t sub_21424C838()
{
  return sub_21424E4B4((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_214244C04);
}

uint64_t sub_21424C844@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;

  return sub_2142483A0(a1, a2, a3, a4, v5, a5);
}

uint64_t sub_21424C864()
{
  return sub_2141F9510((void (*)(_QWORD))MEMORY[0x24BEE4BC0]);
}

uint64_t sub_21424C870@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_214248064(*(void (**)(uint64_t *__return_ptr, char *))(v1 + 16), *(_QWORD *)(v1 + 32), a1);
}

uint64_t sub_21424C87C()
{
  return sub_2141F9510((void (*)(_QWORD))MEMORY[0x24BEE4FF0]);
}

uint64_t sub_21424C888(uint64_t a1)
{
  uint64_t v1;

  return sub_214243514(a1, *(void (**)(void))(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_21424C894()
{
  return swift_deallocObject();
}

uint64_t sub_21424C8A4@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, double *a3@<X2>, double *a4@<X3>, _QWORD *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t *a8@<X8>)
{
  return sub_21424E1B8(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(uint64_t, _OWORD *, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double, double, double, double))sub_21423D644, a8);
}

uint64_t sub_21424C8B4@<X0>(uint64_t *a1@<X8>)
{
  return sub_21424E2BC((void (*)(uint64_t, uint64_t))sub_2141DD47C, &qword_253F10F70, &qword_253F11B48, (void (*)(uint64_t, uint64_t))sub_2141FA1C4, a1);
}

uint64_t sub_21424C8D8()
{
  return sub_2141F9510((void (*)(_QWORD))MEMORY[0x24BEE4BC0]);
}

uint64_t sub_21424C8E4()
{
  return sub_2141F9510((void (*)(_QWORD))MEMORY[0x24BEE4EF8]);
}

uint64_t sub_21424C8F4()
{
  return sub_2141F9510((void (*)(_QWORD))MEMORY[0x24BEE4EF8]);
}

uint64_t sub_21424C900@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_2142470F0(v1, a1);
}

uint64_t sub_21424C908@<X0>(uint64_t *a1@<X8>)
{
  return sub_21424E378((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21423DC44, a1);
}

uint64_t sub_21424C914(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 != -1)
    return sub_2141E60B8(a1, a2, a3);
  return a1;
}

uint64_t sub_21424C928()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v0 + 56))
    _s6Charts15AnyChartContentVwxx_0(v0 + 32);
  return swift_deallocObject();
}

unint64_t sub_21424C95C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD *v2;
  _QWORD v3[3];

  result = qword_254D69900;
  if (!qword_254D69900)
  {
    v1 = sub_2141D7924(&qword_254D698F8);
    v3[0] = &protocol witness table for AxisGridLine;
    v3[1] = &off_24D186010;
    v3[2] = &protocol witness table for AxisValueLabel<A>;
    v2 = v3;
    result = MEMORY[0x2199CD934](&protocol conformance descriptor for <each A> BuilderTuple<Pack{repeat A}>, v1, &v2);
    atomic_store(result, (unint64_t *)&qword_254D69900);
  }
  return result;
}

uint64_t sub_21424C9D4()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_21424CA0C(*(_QWORD *)(v0 + 288), *(_QWORD *)(v0 + 296), *(_BYTE *)(v0 + 304));
  return swift_deallocObject();
}

uint64_t sub_21424CA0C(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if (!a3)
    return swift_release();
  return result;
}

uint64_t sub_21424CA20@<X0>(uint64_t a1@<X8>)
{
  return sub_2143F8224(a1);
}

uint64_t sub_21424CA40()
{
  return 16;
}

__n128 sub_21424CA4C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_21424CA58(uint64_t a1, uint64_t a2)
{
  initializeWithTake for AxisMarksContentStorage(a2, a1);
  return a2;
}

uint64_t sub_21424CA94()
{
  return swift_deallocObject();
}

void sub_21424CAA4(char *a1@<X8>)
{
  uint64_t v1;

  sub_2143A3F58(*(_BYTE *)(v1 + 24), *(_BYTE *)(v1 + 25), a1);
}

uint64_t sub_21424CAB8()
{
  return swift_deallocObject();
}

void sub_21424CAC8(char *a1@<X8>)
{
  uint64_t v1;

  sub_2143A3F78(*(_BYTE *)(v1 + 24), *(_BYTE *)(v1 + 25), a1);
}

uint64_t sub_21424CAD8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_21424CAFC@<X0>(char *a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v5;

  return sub_2143A4008(a1, a2, a3, a4, *(_QWORD *)(v5 + 16), *(_BYTE *)(v5 + 24), a5);
}

uint64_t sub_21424CB0C@<X0>(uint64_t *a1@<X8>)
{
  return sub_21424E45C((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_214245564, a1);
}

uint64_t sub_21424CB18()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_21424CB3C@<X0>(uint64_t *a1@<X2>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_214248404(a1, *(_QWORD *)(v2 + 24), *(_BYTE *)(v2 + 32), (void (*)(void))sub_21424CB88, a2);
}

uint64_t sub_21424CB6C@<X0>(char *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v5;

  return sub_2143A410C(a1, a2, a3, a4, *(_QWORD *)(v5 + 16), *(_BYTE *)(v5 + 24), a5);
}

uint64_t sub_21424CB7C@<X0>(uint64_t *a1@<X8>)
{
  return sub_21424E45C((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2142453B8, a1);
}

uint64_t sub_21424CB88()
{
  return sub_21424E49C((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21423E67C);
}

uint64_t sub_21424CB94(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 != -1)
    return sub_2141DD14C(a1, a2, a3);
  return a1;
}

uint64_t sub_21424CBA8(uint64_t a1)
{
  sub_21424CBD8(*(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_BYTE *)(a1 + 128));
  return a1;
}

uint64_t sub_21424CBD8(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if (!a3)
    return swift_retain();
  return result;
}

uint64_t sub_21424CBEC(uint64_t a1)
{
  sub_21424CA0C(*(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_BYTE *)(a1 + 128));
  return a1;
}

uint64_t sub_21424CC20()
{
  return sub_21424E4B4((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_214244EEC);
}

unint64_t sub_21424CC2C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_253F12440;
  if (!qword_253F12440)
  {
    v1 = sub_214423B70();
    result = MEMORY[0x2199CD934](MEMORY[0x24BDCE948], v1);
    atomic_store(result, (unint64_t *)&qword_253F12440);
  }
  return result;
}

uint64_t sub_21424CC74()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_21424CC98@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_214247F80(a1, (uint64_t *)(v2 + 16), a2);
}

uint64_t sub_21424CCB0()
{
  return sub_2141F9510((void (*)(_QWORD))MEMORY[0x24BEE4EF8]);
}

uint64_t sub_21424CCBC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = sub_214243C58(*(void (**)(uint64_t *__return_ptr, uint64_t *))(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), (void (*)(uint64_t))sub_21424E6AC);
  *a1 = result;
  return result;
}

uint64_t sub_21424CCF0()
{
  return sub_2141F9510((void (*)(_QWORD))MEMORY[0x24BEE4EF8]);
}

uint64_t sub_21424CCFC()
{
  return sub_2141F9510((void (*)(_QWORD))MEMORY[0x24BEE4EF8]);
}

uint64_t sub_21424CD08@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;

  v4 = *a1;
  if (v4)
    v2 = v4;
  else
    swift_retain();
  *a2 = v2;
  return swift_retain();
}

uint64_t sub_21424CD44()
{
  return sub_2141F9510((void (*)(_QWORD))MEMORY[0x24BEE4EF8]);
}

uint64_t sub_21424CD50@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = sub_214243B8C(*(void (**)(uint64_t *__return_ptr, uint64_t *))(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
  *a1 = result;
  return result;
}

uint64_t sub_21424CD7C(uint64_t result)
{
  if (result != 1)
    return swift_release();
  return result;
}

uint64_t sub_21424CD8C()
{
  return sub_2141F9510((void (*)(_QWORD))MEMORY[0x24BEE4EF8]);
}

uint64_t sub_21424CD98()
{
  return sub_2141F9510((void (*)(_QWORD))MEMORY[0x24BEE4FF0]);
}

uint64_t sub_21424CDA4(_QWORD *a1)
{
  uint64_t v1;

  return sub_214243A14(a1, *(void (**)(uint64_t *__return_ptr))(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), (uint64_t (*)(uint64_t, uint64_t))sub_21420ED58) & 1;
}

uint64_t sub_21424CDCC()
{
  return 24;
}

__n128 sub_21424CDD8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_21424CDF0@<X0>(uint64_t *a1@<X8>)
{
  return sub_21424E588((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))sub_2141F4C34, a1);
}

uint64_t sub_21424CE04()
{
  return swift_deallocObject();
}

void sub_21424CE14(_QWORD *a1@<X8>)
{
  sub_2143A34A8(a1);
}

uint64_t sub_21424CE2C@<X0>(uint64_t *a1@<X8>)
{
  return sub_21424D804((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_214244868, a1);
}

uint64_t sub_21424CE38()
{
  return sub_2141F9510((void (*)(_QWORD))MEMORY[0x24BEE4FF0]);
}

uint64_t sub_21424CE44(uint64_t *a1)
{
  uint64_t v1;

  return sub_2142433F0(a1, *(void (**)(uint64_t *__return_ptr))(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_21424CE50(uint64_t result)
{
  if (result != 2)
    return sub_2141F9A40(result);
  return result;
}

uint64_t sub_21424CE60(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

uint64_t sub_21424CE78(uint64_t result)
{
  *(_BYTE *)(result + 128) = 1;
  return result;
}

uint64_t sub_21424CE84(uint64_t a1, void (*a2)(uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;

  v4 = *(_QWORD *)(a1 + 56);
  v5 = *(_QWORD *)(a1 + 64);
  v6 = *(_QWORD *)(a1 + 80);
  v7 = *(_BYTE *)(a1 + 88);
  swift_bridgeObjectRetain();
  swift_retain();
  a2(v4, v5);
  swift_bridgeObjectRetain();
  sub_2141E83DC(v6, v7);
  return a1;
}

uint64_t sub_21424CF00(uint64_t result)
{
  *(_BYTE *)(result + 128) = 0;
  return result;
}

uint64_t sub_21424CF08(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 v4;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 56);
  v4 = *(_BYTE *)(a1 + 64);
  swift_retain();
  sub_2141D975C(v2);
  swift_bridgeObjectRetain();
  sub_2141E83DC(v3, v4);
  return a1;
}

uint64_t sub_21424CF6C()
{
  return sub_2141F9510((void (*)(_QWORD))MEMORY[0x24BEE4FF0]);
}

uint64_t sub_21424CF78(_QWORD *a1)
{
  uint64_t v1;

  return sub_21424393C(a1, *(void (**)(uint64_t *__return_ptr))(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), sub_2143537C0) & 1;
}

uint64_t sub_21424CFA0()
{
  return 32;
}

__n128 sub_21424CFAC(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

unint64_t sub_21424CFB8()
{
  unint64_t result;

  result = qword_253F10C80[0];
  if (!qword_253F10C80[0])
  {
    result = MEMORY[0x2199CD934](&unk_214434488, &type metadata for AnyPrimitivePlottableArray);
    atomic_store(result, qword_253F10C80);
  }
  return result;
}

unint64_t sub_21424CFFC()
{
  unint64_t result;

  result = qword_253F130F8;
  if (!qword_253F130F8)
  {
    result = MEMORY[0x2199CD934](&unk_214432280, &type metadata for Spec.Channel);
    atomic_store(result, (unint64_t *)&qword_253F130F8);
  }
  return result;
}

uint64_t sub_21424D040(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned __int8 a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void (*a13)(uint64_t, uint64_t))
{
  if (result)
  {
    swift_retain();
    swift_retain();
    a13(a4, a5);
    swift_bridgeObjectRetain();
    return sub_2141E83DC(a7, a8);
  }
  return result;
}

uint64_t sub_21424D0C0(uint64_t *a1)
{
  uint64_t v1;
  int v2;

  v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  v2 = v1 - 1;
  if (v2 < 0)
    v2 = -1;
  return (v2 + 1);
}

uint64_t sub_21424D0E4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned __int8 a12)
{
  if (result)
  {
    swift_bridgeObjectRetain();
    swift_retain();
    sub_2141D975C(a8);
    swift_bridgeObjectRetain();
    return sub_2141E83DC(a11, a12);
  }
  return result;
}

uint64_t sub_21424D150(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void (*a14)(uint64_t, uint64_t))
{
  if (result)
  {
    swift_retain();
    a14(a5, a6);
    swift_bridgeObjectRetain();
    return sub_2141E83DC(a8, a9);
  }
  return result;
}

uint64_t sub_21424D1BC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (result != 1)
    return sub_21424D200(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, (void (*)(uint64_t, uint64_t))sub_2141FA1C4);
  return result;
}

uint64_t sub_21424D200(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void (*a14)(uint64_t, uint64_t))
{
  if (result)
  {
    swift_release();
    a14(a5, a6);
    swift_bridgeObjectRelease();
    return sub_21421BBC0(a8, a9);
  }
  return result;
}

_QWORD *sub_21424D26C(_QWORD *a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14], a1[15]);
  return a1;
}

uint64_t sub_21424D2C8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned __int8 a12)
{
  if (result != 1)
    return sub_21424D2F8(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
  return result;
}

uint64_t sub_21424D2F8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned __int8 a12)
{
  if (result)
  {
    swift_release();
    swift_bridgeObjectRelease();
    sub_2141D972C(a8);
    swift_bridgeObjectRelease();
    return sub_21421BBC0(a11, a12);
  }
  return result;
}

uint64_t sub_21424D364(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned __int8 a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void (*a13)(uint64_t, uint64_t))
{
  if (result)
  {
    swift_release();
    swift_release();
    a13(a4, a5);
    swift_bridgeObjectRelease();
    return sub_21421BBC0(a7, a8);
  }
  return result;
}

double sub_21424D3E4(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = 1;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_QWORD *)(a1 + 120) = 0;
  return result;
}

uint64_t sub_21424D414()
{
  return sub_2141F9510((void (*)(_QWORD))MEMORY[0x24BEE4FF0]);
}

uint64_t sub_21424D420(_QWORD *a1)
{
  uint64_t v1;

  return sub_21424393C(a1, *(void (**)(uint64_t *__return_ptr))(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), sub_214353940) & 1;
}

uint64_t sub_21424D448()
{
  return 32;
}

__n128 sub_21424D454(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

unint64_t sub_21424D460()
{
  unint64_t result;

  result = qword_253F12F68;
  if (!qword_253F12F68)
  {
    result = MEMORY[0x2199CD934](&unk_214433414, &type metadata for AnyFormatStyle);
    atomic_store(result, (unint64_t *)&qword_253F12F68);
  }
  return result;
}

unint64_t sub_21424D4A4()
{
  unint64_t result;

  result = qword_253F12F80[0];
  if (!qword_253F12F80[0])
  {
    result = MEMORY[0x2199CD934](&unk_214428208, &type metadata for EncodableProperty);
    atomic_store(result, qword_253F12F80);
  }
  return result;
}

uint64_t sub_21424D4E8(uint64_t a1)
{
  uint64_t result;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t i;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  char v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  _BYTE v21[48];
  uint64_t v22;

  sub_2141D8BF8(&qword_253F13C38);
  result = sub_2144256B8();
  v3 = (_QWORD *)result;
  v4 = 0;
  v5 = *(_QWORD *)(a1 + 64);
  v19 = a1 + 64;
  v6 = 1 << *(_BYTE *)(a1 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & v5;
  v20 = (unint64_t)(v6 + 63) >> 6;
  v9 = result + 64;
  if ((v7 & v5) == 0)
    goto LABEL_5;
LABEL_4:
  v10 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (i = v10 | (v4 << 6); ; i = __clz(__rbit64(v13)) + (v4 << 6))
  {
    v15 = *(_BYTE *)(*(_QWORD *)(a1 + 48) + i);
    v22 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * i);
    swift_retain();
    swift_getAtKeyPath();
    swift_release();
    *(_QWORD *)(v9 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    *(_BYTE *)(v3[6] + i) = v15;
    result = sub_21422F3C0((uint64_t)v21, v3[7] + 48 * i);
    v16 = v3[2];
    v17 = __OFADD__(v16, 1);
    v18 = v16 + 1;
    if (v17)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v3[2] = v18;
    if (v8)
      goto LABEL_4;
LABEL_5:
    v12 = v4 + 1;
    if (__OFADD__(v4, 1))
      goto LABEL_24;
    if (v12 >= v20)
      return (uint64_t)v3;
    v13 = *(_QWORD *)(v19 + 8 * v12);
    ++v4;
    if (!v13)
    {
      v4 = v12 + 1;
      if (v12 + 1 >= v20)
        return (uint64_t)v3;
      v13 = *(_QWORD *)(v19 + 8 * v4);
      if (!v13)
      {
        v4 = v12 + 2;
        if (v12 + 2 >= v20)
          return (uint64_t)v3;
        v13 = *(_QWORD *)(v19 + 8 * v4);
        if (!v13)
          break;
      }
    }
LABEL_18:
    v8 = (v13 - 1) & v13;
  }
  v14 = v12 + 3;
  if (v14 >= v20)
    return (uint64_t)v3;
  v13 = *(_QWORD *)(v19 + 8 * v14);
  if (v13)
  {
    v4 = v14;
    goto LABEL_18;
  }
  while (1)
  {
    v4 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v4 >= v20)
      return (uint64_t)v3;
    v13 = *(_QWORD *)(v19 + 8 * v4);
    ++v14;
    if (v13)
      goto LABEL_18;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_21424D6F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned __int8 a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unsigned __int8 a17)
{
  if (a17 != 255)
    return sub_21421B980(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
  return a1;
}

uint64_t sub_21424D734(uint64_t a1)
{
  sub_21424D78C(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_BYTE *)(a1 + 96));
  return a1;
}

uint64_t sub_21424D78C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned __int8 a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  if (a13 != 255)
    return sub_21421B808(a1, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

uint64_t sub_21424D7B8(uint64_t a1)
{
  destroy for AnyChartContent();
  return a1;
}

uint64_t sub_21424D7EC@<X0>(double *a1@<X0>, _OWORD *a2@<X1>, double *a3@<X2>, unint64_t *a4@<X8>)
{
  uint64_t v4;

  return sub_2143A3BA0(a1, a2, a3, v4, a4);
}

uint64_t sub_21424D7F8@<X0>(uint64_t *a1@<X8>)
{
  return sub_21424D804((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2142451D0, a1);
}

uint64_t sub_21424D804@<X0>(uint64_t (*a1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD)@<X0>, uint64_t *a2@<X8>)
{
  _QWORD *v2;
  uint64_t result;

  result = a1(v2[2], v2[3], v2[4], v2[5], v2[6]);
  *a2 = result;
  return result;
}

uint64_t sub_21424D83C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = sub_214246418(*(void (**)(uint64_t *__return_ptr, _BYTE *, _BYTE *, uint64_t *, _BYTE *, _BYTE *, _QWORD *))(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64), *(_QWORD *)(v1 + 72));
  *a1 = result;
  return result;
}

uint64_t sub_21424D870(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 24);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

uint64_t sub_21424D888(uint64_t a1)
{
  unsigned int v1;

  v1 = *(unsigned __int8 *)(a1 + 128);
  if (v1 <= 1)
    return 0;
  else
    return v1 ^ 0xFF;
}

uint64_t sub_21424D89C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned __int8 a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  if (a13 != 254)
    return sub_21421B874(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
  return result;
}

uint64_t sub_21424D8C4(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))
{
  char v4;

  v4 = *(_BYTE *)(a1 + 128);
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), v4);
  return a1;
}

uint64_t sub_21424D928(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned __int8 a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unsigned __int8 a17)
{
  if (a17 != 254)
    return sub_21421BA44(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17);
  return result;
}

uint64_t sub_21424D960(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v2 = *(_QWORD *)(a1 + 64);
  v25 = *(_QWORD *)(a1 + 88);
  v26 = *(_QWORD *)(a1 + 80);
  v3 = *(_QWORD *)(a1 + 104);
  v4 = *(_QWORD *)(a1 + 112);
  v5 = *(_QWORD *)(a1 + 120);
  v6 = *(_QWORD *)(a1 + 128);
  v23 = *(_QWORD *)(a1 + 136);
  v24 = *(_QWORD *)(a1 + 96);
  v21 = *(_OWORD *)(a1 + 160);
  v22 = *(_OWORD *)(a1 + 144);
  v19 = *(_OWORD *)(a1 + 192);
  v20 = *(_OWORD *)(a1 + 176);
  v17 = *(_OWORD *)(a1 + 224);
  v18 = *(_OWORD *)(a1 + 208);
  v16 = *(_OWORD *)(a1 + 240);
  v14 = *(_OWORD *)(a1 + 272);
  v15 = *(_OWORD *)(a1 + 256);
  v12 = *(_OWORD *)(a1 + 304);
  v13 = *(_OWORD *)(a1 + 288);
  v7 = *(_QWORD *)(a1 + 320);
  v8 = *(_QWORD *)(a1 + 328);
  v9 = *(_WORD *)(a1 + 336);
  swift_release();
  sub_21421C728(v2);
  LOWORD(v11) = v9;
  sub_21421C59C(v26, v25, v24, v3, v4, v5, v6, v23, v22, *((uint64_t *)&v22 + 1), v21, *((uint64_t *)&v21 + 1), v20, *((uint64_t *)&v20 + 1), v19, *((uint64_t *)&v19 + 1), v18, *((uint64_t *)&v18 + 1), v17,
    *((uint64_t *)&v17 + 1),
    v16,
    SBYTE8(v16),
    v15,
    *((uint64_t *)&v15 + 1),
    v14,
    *((uint64_t *)&v14 + 1),
    v13,
    *((uint64_t *)&v13 + 1),
    v12,
    *((uint64_t *)&v12 + 1),
    v7,
    v8,
    v11,
    (void (*)(uint64_t, uint64_t, uint64_t))sub_21421C6D4);
  return a1;
}

uint64_t sub_21424DAA8()
{
  return 24;
}

__n128 sub_21424DAB4(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_21424DAC8(uint64_t a1)
{
  uint64_t result;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t i;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  char v29;

  sub_2141D8BF8(&qword_253F132F0);
  result = sub_2144256B8();
  v3 = (_QWORD *)result;
  v4 = 0;
  v5 = *(_QWORD *)(a1 + 64);
  v20 = a1 + 64;
  v6 = 1 << *(_BYTE *)(a1 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & v5;
  v21 = (unint64_t)(v6 + 63) >> 6;
  v9 = result + 64;
  if ((v7 & v5) == 0)
    goto LABEL_5;
LABEL_4:
  v10 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (i = v10 | (v4 << 6); ; i = __clz(__rbit64(v13)) + (v4 << 6))
  {
    v15 = *(_BYTE *)(*(_QWORD *)(a1 + 48) + i);
    swift_retain();
    swift_getAtKeyPath();
    result = swift_release();
    *(_QWORD *)(v9 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    *(_BYTE *)(v3[6] + i) = v15;
    v16 = v3[7] + 112 * i;
    *(_OWORD *)v16 = v22;
    *(_OWORD *)(v16 + 16) = v23;
    *(_OWORD *)(v16 + 32) = v24;
    *(_OWORD *)(v16 + 48) = v25;
    *(_OWORD *)(v16 + 64) = v26;
    *(_OWORD *)(v16 + 80) = v27;
    *(_QWORD *)(v16 + 96) = v28;
    *(_BYTE *)(v16 + 104) = v29;
    v17 = v3[2];
    v18 = __OFADD__(v17, 1);
    v19 = v17 + 1;
    if (v18)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v3[2] = v19;
    if (v8)
      goto LABEL_4;
LABEL_5:
    v12 = v4 + 1;
    if (__OFADD__(v4, 1))
      goto LABEL_24;
    if (v12 >= v21)
      return (uint64_t)v3;
    v13 = *(_QWORD *)(v20 + 8 * v12);
    ++v4;
    if (!v13)
    {
      v4 = v12 + 1;
      if (v12 + 1 >= v21)
        return (uint64_t)v3;
      v13 = *(_QWORD *)(v20 + 8 * v4);
      if (!v13)
      {
        v4 = v12 + 2;
        if (v12 + 2 >= v21)
          return (uint64_t)v3;
        v13 = *(_QWORD *)(v20 + 8 * v4);
        if (!v13)
          break;
      }
    }
LABEL_18:
    v8 = (v13 - 1) & v13;
  }
  v14 = v12 + 3;
  if (v14 >= v21)
    return (uint64_t)v3;
  v13 = *(_QWORD *)(v20 + 8 * v14);
  if (v13)
  {
    v4 = v14;
    goto LABEL_18;
  }
  while (1)
  {
    v4 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v4 >= v21)
      return (uint64_t)v3;
    v13 = *(_QWORD *)(v20 + 8 * v4);
    ++v14;
    if (v13)
      goto LABEL_18;
  }
LABEL_25:
  __break(1u);
  return result;
}

double sub_21424DCF8(uint64_t a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 128) = -2;
  return result;
}

uint64_t sub_21424DD1C()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_21424DD70()
{
  uint64_t v0;

  return sub_214246808(*(void (**)(__int128 *, uint64_t *, uint64_t *, _OWORD *, _QWORD *, _BYTE *))(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72));
}

double sub_21424DD84(uint64_t a1)
{
  double result;

  *(_WORD *)(a1 + 336) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

uint64_t sub_21424DDBC(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 24);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return ((_DWORD)v1 - 1) & ~(((int)v1 - 1) >> 31);
}

uint64_t sub_21424DDD8(uint64_t a1)
{
  __int128 v3;
  uint64_t v4;

  LOWORD(v4) = *(_WORD *)(a1 + 256);
  v3 = *(_OWORD *)(a1 + 208);
  sub_21421C59C(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    *(_QWORD *)(a1 + 200),
    v3,
    *((uint64_t *)&v3 + 1),
    *(_QWORD *)(a1 + 224),
    *(_QWORD *)(a1 + 232),
    *(_QWORD *)(a1 + 240),
    *(_QWORD *)(a1 + 248),
    v4,
    (void (*)(uint64_t, uint64_t, uint64_t))sub_2141EF260);
  return a1;
}

uint64_t sub_21424DE64(uint64_t a1)
{
  __int128 v3;

  v3 = *(_OWORD *)(a1 + 208);
  sub_21424DEE4(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    *(_QWORD *)(a1 + 200),
    v3,
    *((uint64_t *)&v3 + 1),
    *(_QWORD *)(a1 + 224),
    *(_QWORD *)(a1 + 232),
    *(_QWORD *)(a1 + 240),
    *(_QWORD *)(a1 + 248),
    *(_WORD *)(a1 + 256));
  return a1;
}

uint64_t sub_21424DEE4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,__int16 a33)
{
  uint64_t v33;

  if (a4 != 2)
  {
    LOWORD(v33) = a33;
    return sub_21421C59C(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
             a20,
             a21,
             a22,
             a23,
             a24,
             a25,
             a26,
             a27,
             a28,
             a29,
             a30,
             a31,
             a32,
             v33,
             (void (*)(uint64_t, uint64_t, uint64_t))sub_21421C6D4);
  }
  return result;
}

uint64_t sub_21424DFB4(uint64_t result)
{
  if (result != 1)
    return sub_21421C728(result);
  return result;
}

uint64_t sub_21424DFC4()
{
  return sub_2141F9510((void (*)(_QWORD))MEMORY[0x24BEE4FF0]);
}

uint64_t sub_21424DFD0(float64x2_t *a1)
{
  uint64_t v1;

  return sub_21424388C(a1, *(void (**)(_OWORD *__return_ptr))(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

unint64_t sub_21424DFDC()
{
  unint64_t result;

  result = qword_253F131F0;
  if (!qword_253F131F0)
  {
    result = MEMORY[0x2199CD934](&unk_21442B950, &type metadata for SgPadding);
    atomic_store(result, (unint64_t *)&qword_253F131F0);
  }
  return result;
}

uint64_t sub_21424E020(uint64_t a1)
{
  sub_2141E7EB8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), (void (*)(uint64_t, unint64_t, unint64_t))sub_2141E7DC4);
  return a1;
}

uint64_t sub_21424E05C()
{
  return sub_2141F9510((void (*)(_QWORD))MEMORY[0x24BEE4BC0]);
}

uint64_t sub_21424E068@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_21424849C(*(void (**)(uint64_t *__return_ptr, uint64_t))(v1 + 16), *(_QWORD *)(v1 + 32), &qword_253F12250, &qword_254D699B8, MEMORY[0x24BEE0D28], (void (*)(BOOL, unint64_t, uint64_t))sub_2141D3AE8, a1);
}

uint64_t sub_21424E0A8()
{
  uint64_t v0;

  sub_2141E7E88(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), (void (*)(uint64_t, unint64_t, unint64_t))sub_2141E7F20);
  sub_2142496E8(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_BYTE *)(v0 + 96), (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7F98, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_2141E7F7C);
  return swift_deallocObject();
}

uint64_t sub_21424E0F8@<X0>(uint64_t *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;

  return sub_214238844(*a1, a2, a3, v4 + 16, a4);
}

uint64_t sub_21424E104()
{
  return sub_2141F9510((void (*)(_QWORD))MEMORY[0x24BEE4EF8]);
}

uint64_t sub_21424E110@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  char v4;

  result = sub_214243EC0(*(void (**)(uint64_t *__return_ptr, uint64_t *))(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v4;
  return result;
}

uint64_t sub_21424E140()
{
  return swift_deallocObject();
}

void sub_21424E150(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;

  sub_21423C730(a1, a2, *a3, *(_BYTE *)(v4 + 16), a4);
}

uint64_t sub_21424E164()
{
  uint64_t v0;

  return sub_21424626C(*(void (**)(uint64_t *, _BYTE *, char *, uint64_t *))(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));
}

uint64_t sub_21424E184()
{
  return sub_2141F9510((void (*)(_QWORD))MEMORY[0x24BEE4BC0]);
}

uint64_t sub_21424E190()
{
  return sub_2141F9510((void (*)(_QWORD))MEMORY[0x24BEE4FF0]);
}

uint64_t sub_21424E19C()
{
  return swift_deallocObject();
}

uint64_t sub_21424E1AC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, double *a3@<X2>, double *a4@<X3>, _QWORD *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t *a8@<X8>)
{
  return sub_21424E1B8(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(uint64_t, _OWORD *, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double, double, double, double))sub_21423D3A4, a8);
}

uint64_t sub_21424E1B8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, double *a3@<X2>, double *a4@<X3>, _QWORD *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t (*a8)(uint64_t, _OWORD *, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double, double, double, double)@<X7>, uint64_t *a9@<X8>)
{
  uint64_t v9;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t result;
  _OWORD v22[6];
  uint64_t v23;

  v14 = *(_QWORD *)(v9 + 24);
  v15 = *(unsigned __int8 *)(v9 + 32);
  v16 = *(unsigned __int8 *)(v9 + 16);
  v17 = *a1;
  v18 = *(_OWORD *)(a2 + 80);
  v22[4] = *(_OWORD *)(a2 + 64);
  v22[5] = v18;
  v23 = *(_QWORD *)(a2 + 96);
  v19 = *(_OWORD *)(a2 + 16);
  v22[0] = *(_OWORD *)a2;
  v22[1] = v19;
  v20 = *(_OWORD *)(a2 + 48);
  v22[2] = *(_OWORD *)(a2 + 32);
  v22[3] = v20;
  result = a8(v17, v22, *a5, a6, a7, v16, v14, v15, *a3, a3[1], *a4, a4[1]);
  *a9 = result;
  return result;
}

uint64_t sub_21424E23C()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_21424E298@<X0>(uint64_t *a1@<X8>)
{
  return sub_21424E2BC((void (*)(uint64_t, uint64_t))sub_2141DD47C, &qword_253F0FE60, &qword_253F10388, (void (*)(uint64_t, uint64_t))sub_2141FA1C4, a1);
}

uint64_t sub_21424E2BC@<X0>(void (*a1)(uint64_t, uint64_t)@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, void (*a4)(uint64_t, uint64_t)@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v5;
  uint64_t result;

  result = sub_214246A84(*(void (**)(_QWORD *__return_ptr, _QWORD *, _QWORD *, __int128 *, __int128 *, uint64_t *, _OWORD *, _OWORD *))(v5 + 16), *(_QWORD *)(v5 + 24), *(_QWORD *)(v5 + 32), *(_QWORD *)(v5 + 40), *(_QWORD *)(v5 + 48), *(_QWORD *)(v5 + 56), *(_QWORD *)(v5 + 64), *(_QWORD *)(v5 + 72), *(_QWORD *)(v5 + 80), a1, a2, a3, a4);
  *a5 = result;
  return result;
}

uint64_t sub_21424E318()
{
  return sub_2141F9510((void (*)(_QWORD))MEMORY[0x24BEE4BC0]);
}

uint64_t sub_21424E324()
{
  return sub_2141F9510((void (*)(_QWORD))MEMORY[0x24BEE4EF8]);
}

uint64_t sub_21424E330()
{
  return sub_2141F9510((void (*)(_QWORD))MEMORY[0x24BEE4EF8]);
}

uint64_t sub_21424E33C@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = sub_214243D30(*(void (**)(uint64_t *__return_ptr, uint64_t *))(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
  *a1 = v4;
  a1[1] = v5;
  a1[2] = v6;
  a1[3] = v7;
  return result;
}

uint64_t sub_21424E36C@<X0>(uint64_t *a1@<X8>)
{
  return sub_21424E378((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21423D8C8, a1);
}

uint64_t sub_21424E378@<X0>(uint64_t (*a1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = a1(*(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(unsigned __int8 *)(v2 + 32), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 56));
  *a2 = result;
  return result;
}

uint64_t sub_21424E3B0()
{
  return swift_deallocObject();
}

uint64_t sub_21424E3C0()
{
  return swift_deallocObject();
}

_QWORD *sub_21424E3D0@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  _QWORD *result;
  uint64_t v4;

  result = (*(_QWORD *(**)(uint64_t *__return_ptr))(v1 + 16))(&v4);
  *a1 = v4;
  return result;
}

uint64_t sub_21424E40C@<X0>(uint64_t *a1@<X2>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_214248404(a1, *(_QWORD *)(v2 + 24), *(_BYTE *)(v2 + 32), (void (*)(void))sub_21424E490, a2);
}

uint64_t sub_21424E438()
{
  uint64_t v0;

  return sub_214244A8C(*(void (**)(uint64_t *, _BYTE *, uint64_t *))(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
}

uint64_t sub_21424E45C@<X0>(uint64_t (*a1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD)@<X0>, uint64_t *a2@<X8>)
{
  _QWORD *v2;
  uint64_t result;

  result = a1(v2[2], v2[3], v2[4], v2[5], v2[6], v2[7]);
  *a2 = result;
  return result;
}

uint64_t sub_21424E490()
{
  return sub_21424E49C((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21423E244);
}

uint64_t sub_21424E49C(uint64_t (*a1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  uint64_t v1;

  return a1(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(unsigned __int8 *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48));
}

uint64_t sub_21424E4B4(uint64_t (*a1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v1;

  return a1(v1[2], v1[3], v1[4], v1[5], v1[6]);
}

uint64_t sub_21424E4D8()
{
  return sub_2141F9510((void (*)(_QWORD))MEMORY[0x24BEE4EF8]);
}

double sub_21424E4E4(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t sub_21424E4FC()
{
  return sub_2141F9510((void (*)(_QWORD))MEMORY[0x24BEE4FF0]);
}

uint64_t sub_21424E508(_QWORD *a1)
{
  uint64_t v1;

  return sub_214243A14(a1, *(void (**)(uint64_t *__return_ptr))(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), (uint64_t (*)(uint64_t, uint64_t))sub_21420EDC4) & 1;
}

uint64_t sub_21424E530(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v6 = sub_2141D7924(a2);
    v7 = a3;
    result = MEMORY[0x2199CD934](MEMORY[0x24BEE12C0], v6, &v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_21424E588@<X0>(uint64_t (*a1)(_QWORD, _QWORD, _QWORD, _QWORD)@<X0>, uint64_t *a2@<X8>)
{
  _QWORD *v2;
  uint64_t result;

  result = a1(v2[2], v2[3], v2[4], v2[5]);
  *a2 = result;
  return result;
}

uint64_t sub_21424E5BC()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_21424E600@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = sub_214245F48(*(void (**)(uint64_t *__return_ptr, char *, uint64_t *, uint64_t *, char *))(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56));
  *a1 = result;
  return result;
}

uint64_t sub_21424E630()
{
  return swift_deallocObject();
}

uint64_t sub_21424E644()
{
  return swift_deallocObject();
}

unsigned __int8 *sub_21424E654@<X0>(unsigned __int8 *result@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  int v3;

  v3 = *result;
  if (v3 == 2)
    LOBYTE(v3) = *(_BYTE *)(v2 + 16);
  *a2 = v3 & 1;
  return result;
}

uint64_t sub_21424E670()
{
  return sub_2141F9510((void (*)(_QWORD))MEMORY[0x24BEE4EF8]);
}

uint64_t sub_21424E67C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = sub_214243AD0(*(void (**)(uint64_t *__return_ptr, char *))(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
  *a1 = result & 1;
  return result;
}

uint64_t sub_21424E854@<X0>(void (*a1)(uint64_t)@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  unsigned int *v3;
  int OffsetAttribute2;

  sub_2143B36F4(v3);
  if (*(_QWORD *)(*(_QWORD *)(a2 - 8) + 64))
    a1(1);
  OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  return sub_2143B369C(OffsetAttribute2, a3);
}

uint64_t sub_21424E8D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t KeyPath;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  void (*v38)(char *, char *, uint64_t);
  char *v39;
  char *v40;
  char *v41;
  uint64_t result;
  uint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  void (*v48)(char *, char *, uint64_t);
  char *v49;
  void (*v50)(char *, uint64_t);
  char *v51;
  char *v52;
  char *v53;
  uint64_t TupleTypeMetadata2;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;

  v65 = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v8 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v55 = (char *)&v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v52 = (char *)&v52 - v10;
  v68 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) + 24) + 8);
  v11 = sub_214424EC0();
  v63 = *(_QWORD *)(v11 - 8);
  v64 = v11;
  MEMORY[0x24BDAC7A8](v11);
  v53 = (char *)&v52 - v12;
  v67 = sub_2144254FC();
  MEMORY[0x24BDAC7A8](v67);
  v66 = (char *)&v52 - v13;
  v14 = sub_2144256A0();
  v69 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v52 - v15;
  v17 = swift_getTupleTypeMetadata2();
  v59 = sub_214425388();
  v57 = *(_QWORD *)(v59 - 8);
  MEMORY[0x24BDAC7A8](v59);
  v19 = (char *)&v52 - v18;
  v58 = swift_getTupleTypeMetadata2();
  v20 = MEMORY[0x24BDAC7A8](v58);
  v56 = (char *)&v52 - v21;
  v62 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v22 = MEMORY[0x24BDAC7A8](v20);
  v61 = (char *)&v52 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v22);
  v60 = (char *)&v52 - v24;
  sub_214424F5C();
  v70 = a1;
  v71 = a2;
  v72 = a3;
  KeyPath = swift_getKeyPath();
  v26 = (_QWORD *)swift_allocObject();
  v26[2] = a1;
  v26[3] = a2;
  v27 = v68;
  v26[4] = a3;
  v26[5] = KeyPath;
  swift_retain();
  MEMORY[0x2199CD934](MEMORY[0x24BEE25B0], v67);
  sub_2144256E8();
  swift_release();
  swift_release();
  v28 = MEMORY[0x2199CD934](MEMORY[0x24BEE2FF8], v14);
  sub_2143E6B44(v14, v28, v27, v19);
  (*(void (**)(char *, uint64_t))(v69 + 8))(v16, v14);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 48))(v19, 1, v17) == 1)
  {
    (*(void (**)(char *, uint64_t))(v57 + 8))(v19, v59);
    v29 = 1;
    v31 = v64;
    v30 = v65;
    v32 = v63;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v32 + 56))(v30, v29, 1, v31);
  }
  v33 = &v19[*(int *)(v17 + 48)];
  v34 = v58;
  v35 = v56;
  v36 = &v56[*(int *)(v58 + 48)];
  v37 = v62;
  v38 = *(void (**)(char *, char *, uint64_t))(v62 + 32);
  v38(v56, v19, AssociatedTypeWitness);
  v38(v36, v33, AssociatedTypeWitness);
  v39 = &v35[*(int *)(v34 + 48)];
  v40 = v60;
  v38(v60, v35, AssociatedTypeWitness);
  v41 = v61;
  v38(v61, v39, AssociatedTypeWitness);
  result = sub_214424E84();
  if ((result & 1) != 0)
  {
    v43 = TupleTypeMetadata2;
    v44 = v52;
    v45 = &v52[*(int *)(TupleTypeMetadata2 + 48)];
    v38(v52, v40, AssociatedTypeWitness);
    v38(v45, v41, AssociatedTypeWitness);
    v46 = v55;
    v47 = &v55[*(int *)(v43 + 48)];
    v48 = *(void (**)(char *, char *, uint64_t))(v37 + 16);
    v48(v55, v44, AssociatedTypeWitness);
    v48(v47, v45, AssociatedTypeWitness);
    v49 = v53;
    v38(v53, v46, AssociatedTypeWitness);
    v50 = *(void (**)(char *, uint64_t))(v37 + 8);
    v50(v47, AssociatedTypeWitness);
    v51 = &v46[*(int *)(v43 + 48)];
    v38(v46, v44, AssociatedTypeWitness);
    v38(v51, v45, AssociatedTypeWitness);
    v31 = v64;
    v38(&v49[*(int *)(v64 + 36)], v51, AssociatedTypeWitness);
    v50(v46, AssociatedTypeWitness);
    v32 = v63;
    v30 = v65;
    (*(void (**)(uint64_t, char *, uint64_t))(v63 + 32))(v65, v49, v31);
    v29 = 0;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v32 + 56))(v30, v29, 1, v31);
  }
  __break(1u);
  return result;
}

uint64_t sub_21424EE30(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  _QWORD *v31;
  char *v32;
  char **v33;
  char *v34;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  char v50;
  unint64_t v51;
  uint64_t v52;
  _BOOL8 v53;
  uint64_t v54;
  char v55;
  unint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  BOOL v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  _QWORD *v69;
  uint64_t result;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  _QWORD v80[19];
  _BYTE v81[152];
  _QWORD v82[9];

  v2 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v3 = (_QWORD *)sub_2143692A8(MEMORY[0x24BEE4AF8]);
  v4 = a1;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_36:
    swift_bridgeObjectRelease();
    return (uint64_t)v2;
  }
  v6 = v4 + 32;
  swift_bridgeObjectRetain();
  v72 = v5 - 1;
  while (1)
  {
    v79 = v2;
    v71 = v6;
    sub_2141EF6B8(v6, (uint64_t)v80);
    sub_2141EF6B8((uint64_t)v80, (uint64_t)v81);
    v7 = sub_21421C2FC((uint64_t)v81);
    v8 = sub_21421C308((uint64_t)v81);
    if (v7 == 1)
    {
      v9 = *(_QWORD *)(v8 + 8);
      v10 = *(_QWORD *)(v8 + 16);
      v11 = *(unsigned __int8 *)(v8 + 24);
      v12 = *(_QWORD *)(v8 + 32);
      v13 = *(_QWORD *)(v8 + 80);
      v14 = *(_QWORD *)(v8 + 88);
      v15 = *(unsigned __int8 *)(v8 + 96);
      v16 = *(_QWORD *)(v8 + 104);
      v17 = v15 | 0x8000000000000000;
      sub_2141DD130(v9, v10, v11);
      swift_bridgeObjectRetain();
      v18 = v13;
      v19 = v15;
      v20 = v13;
      v21 = v12;
      v22 = v9;
      v23 = v17;
      sub_2141DD130(v18, v14, v19);
      v24 = v16;
    }
    else
    {
      v22 = *(_QWORD *)(v8 + 8);
      v10 = *(_QWORD *)(v8 + 16);
      v11 = *(unsigned __int8 *)(v8 + 24);
      v25 = *(_QWORD *)(v8 + 32);
      sub_2141DD130(v22, v10, v11);
      v20 = 0;
      v14 = 0;
      v23 = 0;
      v24 = 0;
      v21 = v25;
    }
    swift_bridgeObjectRetain();
    v26 = v11;
    v82[0] = v22;
    v82[1] = v10;
    v82[2] = v11;
    v82[3] = v21;
    v82[4] = v20;
    v82[5] = v14;
    v82[6] = v23;
    v82[7] = v24;
    v27 = v3[2];
    sub_21421C318(v80, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21420B7DC);
    v77 = v10;
    v78 = v21;
    v75 = v23;
    v76 = v22;
    if (v27)
    {
      v28 = sub_214336F60((uint64_t)v82);
      if ((v29 & 1) != 0)
      {
        v30 = *(_QWORD *)(v3[7] + 8 * v28);
        sub_21421C318(v80, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21420B7DC);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
          if ((v30 & 0x8000000000000000) != 0)
            goto LABEL_39;
        }
        else
        {
          v79 = sub_21434EBC0(v79);
          if ((v30 & 0x8000000000000000) != 0)
            goto LABEL_39;
        }
        if (v30 >= v79[2])
          goto LABEL_40;
        v31 = &v79[9 * v30];
        v34 = (char *)v31[12];
        v33 = (char **)(v31 + 12);
        v32 = v34;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *v33 = v34;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v32 = sub_214224028(0, *((_QWORD *)v32 + 2) + 1, 1, v32);
          *v33 = v32;
        }
        v37 = *((_QWORD *)v32 + 2);
        v36 = *((_QWORD *)v32 + 3);
        if (v37 >= v36 >> 1)
        {
          v32 = sub_214224028((char *)(v36 > 1), v37 + 1, 1, v32);
          *v33 = v32;
        }
        v38 = v72;
        v39 = v75;
        *((_QWORD *)v32 + 2) = v37 + 1;
        sub_2141EF6B8((uint64_t)v80, (uint64_t)&v32[152 * v37 + 32]);
        v40 = v78;
        v2 = v79;
        v41 = v20;
        v42 = v14;
        v43 = v22;
        v44 = v10;
        goto LABEL_31;
      }
    }
    v45 = v24;
    v46 = v79[2];
    v73 = v14;
    v74 = v20;
    v47 = v14;
    v48 = v45;
    sub_21421C1D8(v22, v10, v26, v21, v20, v47, v23);
    v49 = swift_isUniquelyReferenced_nonNull_native();
    v51 = sub_214336F60((uint64_t)v82);
    v52 = v3[2];
    v53 = (v50 & 1) == 0;
    v54 = v52 + v53;
    if (__OFADD__(v52, v53))
      break;
    v55 = v50;
    if (v3[3] >= v54)
    {
      if ((v49 & 1) == 0)
        sub_2142AA200();
    }
    else
    {
      sub_2142A08BC(v54, v49);
      v56 = sub_214336F60((uint64_t)v82);
      if ((v55 & 1) != (v57 & 1))
        goto LABEL_41;
      v51 = v56;
    }
    if ((v55 & 1) != 0)
    {
      *(_QWORD *)(v3[7] + 8 * v51) = v46;
      v58 = v73;
      v59 = v10;
      v60 = v21;
      v62 = v75;
      v61 = v76;
    }
    else
    {
      v3[(v51 >> 6) + 8] |= 1 << v51;
      sub_21421C19C((uint64_t)v82, v3[6] + (v51 << 6));
      *(_QWORD *)(v3[7] + 8 * v51) = v46;
      v63 = v3[2];
      v64 = __OFADD__(v63, 1);
      v65 = v63 + 1;
      if (v64)
        goto LABEL_38;
      v3[2] = v65;
      v61 = v22;
      v59 = v10;
      v60 = v78;
      v58 = v73;
      v62 = v75;
      sub_21421C1D8(v76, v77, v26, v78, v74, v73, v75);
    }
    swift_bridgeObjectRelease();
    sub_21421C24C(v61, v59, v26, v60, v74, v58, v62);
    sub_2141D8BF8(&qword_253F13580);
    v66 = swift_allocObject();
    *(_OWORD *)(v66 + 16) = xmmword_214426EF0;
    sub_2141EF6B8((uint64_t)v80, v66 + 32);
    sub_21421C318(v80, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21420B7DC);
    sub_21421C1D8(v61, v59, v26, v60, v74, v58, v62);
    v2 = v79;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v2 = sub_2142258BC(0, v79[2] + 1, 1, v79);
    v68 = v2[2];
    v67 = v2[3];
    if (v68 >= v67 >> 1)
      v2 = sub_2142258BC((_QWORD *)(v67 > 1), v68 + 1, 1, v2);
    v2[2] = v68 + 1;
    v69 = &v2[9 * v68];
    v43 = v76;
    v44 = v77;
    v69[4] = v76;
    v69[5] = v77;
    v40 = v78;
    v69[6] = v26;
    v69[7] = v78;
    v42 = v73;
    v41 = v74;
    v69[8] = v74;
    v69[9] = v73;
    v39 = v75;
    v69[10] = v75;
    v69[11] = v48;
    v69[12] = v66;
    v38 = v72;
LABEL_31:
    sub_21421C24C(v43, v44, v26, v40, v41, v42, v39);
    sub_21421C318(v80, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141EF5D4);
    if (!v38)
    {
      swift_bridgeObjectRelease();
      goto LABEL_36;
    }
    v72 = v38 - 1;
    v6 = v71 + 152;
  }
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  result = sub_214425820();
  __break(1u);
  return result;
}

uint64_t sub_21424F3A4(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v11;
  unint64_t v12;
  _QWORD *v13;
  char **v14;
  char *v15;
  char *v16;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  unint64_t v23;
  uint64_t v24;
  _BOOL8 v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  uint64_t result;
  uint64_t v39;
  _QWORD __dst[76];
  _QWORD v41[20];

  v2 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v3 = (_QWORD *)sub_2143693D4(MEMORY[0x24BEE4AF8]);
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_41:
    swift_bridgeObjectRelease();
    return (uint64_t)v2;
  }
  swift_bridgeObjectRetain();
  v5 = v4 - 1;
  v6 = 32;
  v39 = a1;
  while (1)
  {
    memcpy(__dst, (const void *)(a1 + v6), sizeof(__dst));
    v7 = (char *)__dst[15];
    sub_214251E04((uint64_t)&__dst[55], (uint64_t)v41);
    if (sub_21422C64C(v41) != 1)
      break;
    sub_2142302F8((uint64_t)__dst);
    swift_bridgeObjectRetain();
    if (!v3[2])
      goto LABEL_20;
LABEL_11:
    v10 = sub_214336FAC((uint64_t)v7);
    if ((v11 & 1) == 0)
      goto LABEL_20;
    v12 = *(_QWORD *)(v3[7] + 8 * v10);
    sub_2142302F8((uint64_t)__dst);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    {
      if ((v12 & 0x8000000000000000) != 0)
        goto LABEL_44;
    }
    else
    {
      v2 = sub_21434EBD4(v2);
      if ((v12 & 0x8000000000000000) != 0)
        goto LABEL_44;
    }
    if (v12 >= v2[2])
      goto LABEL_45;
    v13 = &v2[2 * v12];
    v16 = (char *)v13[5];
    v14 = (char **)(v13 + 5);
    v15 = v16;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *v14 = v16;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v15 = sub_214225B94(0, *((_QWORD *)v15 + 2) + 1, 1, v15);
      *v14 = v15;
    }
    v19 = *((_QWORD *)v15 + 2);
    v18 = *((_QWORD *)v15 + 3);
    if (v19 >= v18 >> 1)
    {
      v15 = sub_214225B94((char *)(v18 > 1), v19 + 1, 1, v15);
      *v14 = v15;
    }
    *((_QWORD *)v15 + 2) = v19 + 1;
    memcpy(&v15[608 * v19 + 32], __dst, 0x260uLL);
    a1 = v39;
LABEL_36:
    swift_bridgeObjectRelease();
    sub_2142305C0((uint64_t)__dst);
    if (!v5)
    {
      swift_bridgeObjectRelease();
      goto LABEL_41;
    }
    --v5;
    v6 += 608;
  }
  sub_21422F2B0((uint64_t)&__dst[55], (uint64_t (*)(void))sub_21420B7DC);
  sub_21422F2B0((uint64_t)&__dst[55], (uint64_t (*)(void))sub_21420B7DC);
  sub_21422F2B0((uint64_t)&__dst[55], (uint64_t (*)(void))sub_21420B7DC);
  sub_2142302F8((uint64_t)__dst);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v7 = sub_214224028(0, *((_QWORD *)v7 + 2) + 1, 1, v7);
  v9 = *((_QWORD *)v7 + 2);
  v8 = *((_QWORD *)v7 + 3);
  if (v9 >= v8 >> 1)
    v7 = sub_214224028((char *)(v8 > 1), v9 + 1, 1, v7);
  *((_QWORD *)v7 + 2) = v9 + 1;
  sub_2141EF6B8((uint64_t)v41, (uint64_t)&v7[152 * v9 + 32]);
  sub_21422F2B0((uint64_t)&__dst[55], (uint64_t (*)(void))sub_2141EF5D4);
  sub_21422F2B0((uint64_t)&__dst[55], (uint64_t (*)(void))sub_2141EF5D4);
  if (v3[2])
    goto LABEL_11;
LABEL_20:
  v20 = v2[2];
  swift_bridgeObjectRetain();
  v21 = swift_isUniquelyReferenced_nonNull_native();
  v23 = sub_214336FAC((uint64_t)v7);
  v24 = v3[2];
  v25 = (v22 & 1) == 0;
  v26 = v24 + v25;
  if (!__OFADD__(v24, v25))
  {
    v27 = v22;
    if (v3[3] >= v26)
    {
      if ((v21 & 1) != 0)
      {
        if ((v22 & 1) == 0)
          goto LABEL_29;
      }
      else
      {
        sub_2142AA3C4();
        if ((v27 & 1) == 0)
          goto LABEL_29;
      }
    }
    else
    {
      sub_2142A0C08(v26, v21);
      v28 = sub_214336FAC((uint64_t)v7);
      if ((v27 & 1) != (v29 & 1))
        goto LABEL_46;
      v23 = v28;
      if ((v27 & 1) == 0)
      {
LABEL_29:
        v3[(v23 >> 6) + 8] |= 1 << v23;
        v30 = 8 * v23;
        *(_QWORD *)(v3[6] + v30) = v7;
        *(_QWORD *)(v3[7] + v30) = v20;
        v31 = v3[2];
        v32 = __OFADD__(v31, 1);
        v33 = v31 + 1;
        if (v32)
          goto LABEL_43;
        v3[2] = v33;
        swift_bridgeObjectRetain();
        goto LABEL_31;
      }
    }
    *(_QWORD *)(v3[7] + 8 * v23) = v20;
LABEL_31:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_2141D8BF8(&qword_253F13590);
    v34 = swift_allocObject();
    *(_OWORD *)(v34 + 16) = xmmword_214426EF0;
    memcpy((void *)(v34 + 32), __dst, 0x260uLL);
    sub_2142302F8((uint64_t)__dst);
    swift_bridgeObjectRetain();
    a1 = v39;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v2 = sub_214225B80(0, v2[2] + 1, 1, v2);
    v36 = v2[2];
    v35 = v2[3];
    if (v36 >= v35 >> 1)
      v2 = sub_214225B80((_QWORD *)(v35 > 1), v36 + 1, 1, v2);
    v2[2] = v36 + 1;
    v37 = &v2[2 * v36];
    v37[4] = v7;
    v37[5] = v34;
    goto LABEL_36;
  }
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  sub_2141D8BF8(&qword_253F12240);
  result = sub_214425820();
  __break(1u);
  return result;
}

uint64_t sub_21424F838(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  unint64_t v21;
  _QWORD *v22;
  char **v23;
  char *v24;
  char *v25;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  char v40;
  char v41;
  unint64_t v42;
  uint64_t v43;
  _BOOL8 v44;
  uint64_t v45;
  char v46;
  unint64_t v47;
  char v48;
  _OWORD *v49;
  __int128 v50;
  uint64_t v51;
  BOOL v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  unint64_t v64;
  unint64_t v65;
  _QWORD *v66;
  uint64_t result;
  uint64_t v68;
  char v69;
  uint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  _BYTE v79[32];
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  char v84;
  __int128 v85;
  _BYTE v86[25];

  v2 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v3 = (_QWORD *)sub_214369658(MEMORY[0x24BEE4AF8]);
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_34:
    swift_bridgeObjectRelease();
    return (uint64_t)v2;
  }
  swift_bridgeObjectRetain();
  v5 = v4 - 1;
  v6 = 32;
  v68 = a1;
  while (1)
  {
    v70 = v6;
    v7 = *(_OWORD *)(a1 + v6 + 144);
    v81 = *(_OWORD *)(a1 + v6 + 128);
    v82 = v7;
    v83 = *(_OWORD *)(a1 + v6 + 160);
    v84 = *(_BYTE *)(a1 + v6 + 176);
    v8 = *(_OWORD *)(a1 + v6 + 80);
    v78 = *(_OWORD *)(a1 + v6 + 64);
    *(_OWORD *)v79 = v8;
    v9 = *(_OWORD *)(a1 + v6 + 112);
    *(_OWORD *)&v79[16] = *(_OWORD *)(a1 + v6 + 96);
    v80 = v9;
    v10 = *(_OWORD *)(a1 + v6 + 16);
    v74 = *(_OWORD *)(a1 + v6);
    v75 = v10;
    v11 = *(_OWORD *)(a1 + v6 + 48);
    v76 = *(_OWORD *)(a1 + v6 + 32);
    v77 = v11;
    v12 = *(_QWORD *)&v79[8];
    v13 = *(_QWORD *)&v79[16];
    v14 = v79[24];
    v15 = v80;
    v16 = v83;
    v17 = v84;
    v85 = *(_OWORD *)&v79[8];
    v86[0] = v79[24];
    *(_QWORD *)&v86[8] = v80;
    *(_QWORD *)&v86[16] = v83;
    v86[24] = v84;
    v18 = v3[2];
    sub_214251C5C((uint64_t)&v74);
    sub_2141DD130(v12, v13, v14);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v73 = v5;
    if (!v18)
      break;
    v19 = sub_21433768C((uint64_t)&v85);
    if ((v20 & 1) == 0)
      break;
    v21 = *(_QWORD *)(v3[7] + 8 * v19);
    sub_214251C5C((uint64_t)&v74);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    {
      if ((v21 & 0x8000000000000000) != 0)
        goto LABEL_37;
    }
    else
    {
      v2 = sub_21434EBFC(v2);
      if ((v21 & 0x8000000000000000) != 0)
        goto LABEL_37;
    }
    if (v21 >= v2[2])
      goto LABEL_38;
    v71 = v2;
    v22 = &v2[7 * v21];
    v25 = (char *)v22[10];
    v23 = (char **)(v22 + 10);
    v24 = v25;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *v23 = v25;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v24 = sub_214225DE8(0, *((_QWORD *)v24 + 2) + 1, 1, v24);
      *v23 = v24;
    }
    v28 = *((_QWORD *)v24 + 2);
    v27 = *((_QWORD *)v24 + 3);
    if (v28 >= v27 >> 1)
    {
      v24 = sub_214225DE8((char *)(v27 > 1), v28 + 1, 1, v24);
      *v23 = v24;
    }
    a1 = v68;
    *((_QWORD *)v24 + 2) = v28 + 1;
    v29 = &v24[184 * v28];
    v30 = v74;
    v31 = v75;
    v32 = v77;
    *((_OWORD *)v29 + 4) = v76;
    *((_OWORD *)v29 + 5) = v32;
    *((_OWORD *)v29 + 2) = v30;
    *((_OWORD *)v29 + 3) = v31;
    v33 = v78;
    v34 = *(_OWORD *)v79;
    v35 = v80;
    *((_OWORD *)v29 + 8) = *(_OWORD *)&v79[16];
    *((_OWORD *)v29 + 9) = v35;
    *((_OWORD *)v29 + 6) = v33;
    *((_OWORD *)v29 + 7) = v34;
    v36 = v81;
    v37 = v82;
    v38 = v83;
    v29[208] = v84;
    *((_OWORD *)v29 + 11) = v37;
    *((_OWORD *)v29 + 12) = v38;
    *((_OWORD *)v29 + 10) = v36;
    v2 = v71;
LABEL_29:
    sub_2141ED0BC(v12, v13, v14);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_214251D30((uint64_t)&v74);
    if (!v73)
    {
      swift_bridgeObjectRelease();
      goto LABEL_34;
    }
    v5 = v73 - 1;
    v6 = v70 + 184;
  }
  v69 = v17;
  v72 = v2;
  v39 = v2[2];
  sub_2141DD130(v12, v13, v14);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v40 = swift_isUniquelyReferenced_nonNull_native();
  v42 = sub_21433768C((uint64_t)&v85);
  v43 = v3[2];
  v44 = (v41 & 1) == 0;
  v45 = v43 + v44;
  if (!__OFADD__(v43, v44))
  {
    v46 = v41;
    if (v3[3] < v45)
    {
      sub_2142A12D4(v45, v40);
      v47 = sub_21433768C((uint64_t)&v85);
      if ((v46 & 1) != (v48 & 1))
        goto LABEL_39;
      v42 = v47;
      if ((v46 & 1) == 0)
        goto LABEL_22;
LABEL_20:
      *(_QWORD *)(v3[7] + 8 * v42) = v39;
LABEL_24:
      swift_bridgeObjectRelease();
      sub_2141ED0BC(v12, v13, v14);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_2141D8BF8(&qword_253F122C0);
      v54 = swift_allocObject();
      v55 = v81;
      v56 = v83;
      *(_OWORD *)(v54 + 176) = v82;
      *(_OWORD *)(v54 + 192) = v56;
      v57 = v78;
      v58 = *(_OWORD *)&v79[16];
      v59 = v80;
      *(_OWORD *)(v54 + 112) = *(_OWORD *)v79;
      *(_OWORD *)(v54 + 128) = v58;
      *(_OWORD *)(v54 + 144) = v59;
      *(_OWORD *)(v54 + 160) = v55;
      v60 = v74;
      v61 = v75;
      *(_OWORD *)(v54 + 16) = xmmword_214426EF0;
      *(_OWORD *)(v54 + 32) = v60;
      v62 = v76;
      v63 = v77;
      *(_OWORD *)(v54 + 48) = v61;
      *(_OWORD *)(v54 + 64) = v62;
      *(_BYTE *)(v54 + 208) = v84;
      *(_OWORD *)(v54 + 80) = v63;
      *(_OWORD *)(v54 + 96) = v57;
      sub_214251C5C((uint64_t)&v74);
      sub_2141DD130(v12, v13, v14);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v2 = v72;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v2 = sub_214226018(0, v72[2] + 1, 1, v72);
      v65 = v2[2];
      v64 = v2[3];
      if (v65 >= v64 >> 1)
        v2 = sub_214226018((_QWORD *)(v64 > 1), v65 + 1, 1, v2);
      v2[2] = v65 + 1;
      v66 = &v2[7 * v65];
      v66[4] = v12;
      v66[5] = v13;
      *((_BYTE *)v66 + 48) = v14;
      v66[7] = v15;
      v66[8] = v16;
      *((_BYTE *)v66 + 72) = v69;
      v66[10] = v54;
      a1 = v68;
      goto LABEL_29;
    }
    if ((v40 & 1) != 0)
    {
      if ((v41 & 1) != 0)
        goto LABEL_20;
    }
    else
    {
      sub_2142AA778();
      if ((v46 & 1) != 0)
        goto LABEL_20;
    }
LABEL_22:
    v3[(v42 >> 6) + 8] |= 1 << v42;
    v49 = (_OWORD *)(v3[6] + 48 * v42);
    v50 = *(_OWORD *)v86;
    *v49 = v85;
    v49[1] = v50;
    *(_OWORD *)((char *)v49 + 25) = *(_OWORD *)&v86[9];
    *(_QWORD *)(v3[7] + 8 * v42) = v39;
    v51 = v3[2];
    v52 = __OFADD__(v51, 1);
    v53 = v51 + 1;
    if (v52)
      goto LABEL_36;
    v3[2] = v53;
    sub_2141DD130(v12, v13, v14);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    goto LABEL_24;
  }
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  result = sub_214425820();
  __break(1u);
  return result;
}

uint64_t sub_21424FD54@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  void (*v32)(char *, char *, uint64_t);
  char *v33;
  uint64_t result;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  void (*v41)(char *, char *, uint64_t);
  char *v42;
  void (*v43)(char *, uint64_t);
  char *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t TupleTypeMetadata2;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v55 = a2;
  v53 = a4;
  v54 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v6 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v49 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v46 = (char *)&v45 - v8;
  v9 = sub_214424EC0();
  v51 = *(_QWORD *)(v9 - 8);
  v52 = v9;
  MEMORY[0x24BDAC7A8](v9);
  v47 = (char *)&v45 - v10;
  v11 = swift_getTupleTypeMetadata2();
  v12 = sub_214425388();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v45 - v14;
  v16 = swift_getTupleTypeMetadata2();
  v17 = MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v45 - v18;
  v50 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v20 = MEMORY[0x24BDAC7A8](v17);
  v22 = (char *)&v45 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v20);
  v24 = (char *)&v45 - v23;
  v25 = v55;
  v55 = a3;
  sub_2143E6B44(v54, v25, a3, v15);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v15, 1, v11) == 1)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    v26 = 1;
    v28 = v52;
    v27 = v53;
    v29 = v51;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v29 + 56))(v27, v26, 1, v28);
  }
  v30 = &v15[*(int *)(v11 + 48)];
  v31 = &v19[*(int *)(v16 + 48)];
  v32 = *(void (**)(char *, char *, uint64_t))(v50 + 32);
  v32(v19, v15, AssociatedTypeWitness);
  v32(v31, v30, AssociatedTypeWitness);
  v33 = &v19[*(int *)(v16 + 48)];
  v32(v24, v19, AssociatedTypeWitness);
  v32(v22, v33, AssociatedTypeWitness);
  result = sub_214424E84();
  if ((result & 1) != 0)
  {
    v35 = TupleTypeMetadata2;
    v36 = v46;
    v37 = &v46[*(int *)(TupleTypeMetadata2 + 48)];
    v32(v46, v24, AssociatedTypeWitness);
    v32(v37, v22, AssociatedTypeWitness);
    v39 = v49;
    v38 = v50;
    v40 = &v49[*(int *)(v35 + 48)];
    v41 = *(void (**)(char *, char *, uint64_t))(v50 + 16);
    v41(v49, v36, AssociatedTypeWitness);
    v41(v40, v37, AssociatedTypeWitness);
    v42 = v47;
    v32(v47, v39, AssociatedTypeWitness);
    v43 = *(void (**)(char *, uint64_t))(v38 + 8);
    v43(v40, AssociatedTypeWitness);
    v44 = &v39[*(int *)(v35 + 48)];
    v32(v39, v36, AssociatedTypeWitness);
    v32(v44, v37, AssociatedTypeWitness);
    v28 = v52;
    v32(&v42[*(int *)(v52 + 36)], v44, AssociatedTypeWitness);
    v43(v39, AssociatedTypeWitness);
    v29 = v51;
    v27 = v53;
    (*(void (**)(uint64_t, char *, uint64_t))(v51 + 32))(v53, v42, v28);
    v26 = 0;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v29 + 56))(v27, v26, 1, v28);
  }
  __break(1u);
  return result;
}

uint64_t sub_214250134@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  swift_getAssociatedTypeWitness();
  result = sub_214424DA0();
  *a1 = result & 1;
  return result;
}

uint64_t sub_214250190@<X0>(void (*a1)(char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X5>, char *a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  void (*v29)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t AssociatedConformanceWitness;
  uint64_t v33;
  uint64_t result;
  char *v35;
  unsigned int v36;
  char *v37;
  uint64_t v38;
  void (*v39)(char *, char *, uint64_t);
  char *v40;
  char *v41;
  uint64_t (*v42)(char *, uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  int v45;
  void (*v46)(char *, uint64_t);
  char *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  char v51;
  void (*v52)(char *, uint64_t);
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  void (*v59)(char *, _QWORD, uint64_t, uint64_t);
  void (*v60)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  char *v65;
  char *v66;
  char *v67;
  unsigned int (*v68)(char *, uint64_t, uint64_t);
  uint64_t v69;
  char *v70;
  uint64_t v71;
  void (*v72)(char *);
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  void (*v78)(char *, char *, uint64_t);
  uint64_t v79;
  char *v80;

  v57 = a4;
  v72 = a1;
  v73 = a2;
  v63 = a5;
  v55 = *(_QWORD *)(a3 - 8);
  v6 = MEMORY[0x24BDAC7A8](a1);
  v77 = (char *)&v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v80 = (char *)&v54 - v8;
  v10 = v9;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v56 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v13 = (char *)&v54 - v12;
  v14 = sub_214425388();
  v61 = *(_QWORD *)(v14 - 8);
  v62 = v14;
  v15 = MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v54 - v16;
  v75 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v54 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = swift_getAssociatedTypeWitness();
  v54 = *(_QWORD *)(v20 - 8);
  MEMORY[0x24BDAC7A8](v20);
  v22 = (char *)&v54 - v21;
  v79 = sub_214425388();
  v76 = *(_QWORD *)(v79 - 8);
  v23 = MEMORY[0x24BDAC7A8](v79);
  v58 = (char *)&v54 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = MEMORY[0x24BDAC7A8](v23);
  v70 = (char *)&v54 - v26;
  MEMORY[0x24BDAC7A8](v25);
  v28 = (char *)&v54 - v27;
  v60 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v56 + 56);
  v60((uint64_t)v63, 1, 1, AssociatedTypeWitness);
  v29 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v55 + 56);
  v71 = a3;
  v30 = a3;
  v31 = v55;
  v59 = v29;
  v29(v28, 1, 1, v30);
  (*(void (**)(char *, _QWORD, uint64_t))(v75 + 16))(v19, v78, v10);
  sub_214424F38();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v74 = v22;
  v75 = v20;
  v33 = v79;
  v69 = AssociatedConformanceWitness;
  sub_214425394();
  v68 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v56 + 48);
  if (v68(v17, 1, AssociatedTypeWitness) == 1)
  {
LABEL_2:
    (*(void (**)(char *, uint64_t))(v54 + 8))(v74, v75);
    return (*(uint64_t (**)(char *, uint64_t))(v76 + 8))(v28, v33);
  }
  v78 = *(void (**)(char *, char *, uint64_t))(v56 + 32);
  v65 = v28;
  v66 = v17;
  v67 = v13;
  v64 = AssociatedTypeWitness;
  v78(v13, v17, AssociatedTypeWitness);
  while (1)
  {
    v37 = v80;
    v72(v13);
    v38 = v76;
    v39 = *(void (**)(char *, char *, uint64_t))(v76 + 16);
    v40 = v70;
    v39(v70, v28, v33);
    v41 = v28;
    v42 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v31 + 48);
    v43 = v31;
    v44 = v71;
    v45 = v42(v40, 1, v71);
    v46 = *(void (**)(char *, uint64_t))(v38 + 8);
    v46(v40, v33);
    v47 = v77;
    (*(void (**)(char *, char *, uint64_t))(v43 + 16))(v77, v37, v44);
    if (v45 == 1)
    {
      (*(void (**)(char *, uint64_t))(v43 + 8))(v47, v44);
      v48 = v64;
      goto LABEL_11;
    }
    v49 = v58;
    v39(v58, v41, v33);
    result = v42(v49, 1, v44);
    if ((_DWORD)result == 1)
      break;
    v50 = v77;
    v51 = sub_214424E6C();
    v52 = *(void (**)(char *, uint64_t))(v43 + 8);
    v52(v50, v44);
    v52(v49, v44);
    v48 = v64;
    if ((v51 & 1) == 0)
    {
      v52(v80, v44);
      v13 = v67;
      (*(void (**)(char *, uint64_t))(v56 + 8))(v67, v48);
      v31 = v43;
      v28 = v65;
      goto LABEL_5;
    }
LABEL_11:
    v28 = v65;
    v46(v65, v79);
    v53 = v63;
    (*(void (**)(char *, uint64_t))(v61 + 8))(v63, v62);
    (*(void (**)(char *, char *, uint64_t))(v43 + 32))(v28, v80, v44);
    v59(v28, 0, 1, v44);
    v13 = v67;
    v78(v53, v67, v48);
    v60((uint64_t)v53, 0, 1, v48);
    v31 = v43;
LABEL_5:
    v35 = v66;
    sub_214425394();
    v36 = v68(v35, 1, v48);
    v33 = v79;
    if (v36 == 1)
      goto LABEL_2;
    v78(v13, v35, v48);
  }
  __break(1u);
  return result;
}

uint64_t sub_214250720(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  unsigned int (*v23)(char *, uint64_t, uint64_t);
  void (*v24)(char *, char *, uint64_t);
  char *v25;
  char *v26;
  void (*v27)(char *, uint64_t);
  uint64_t v28;
  uint64_t result;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  void (*v34)(char *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;

  v39 = a5;
  v40 = a2;
  v38 = a1;
  v7 = sub_214425388();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v43 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v35 - v12;
  v14 = *(_QWORD *)(a4 - 8);
  v15 = MEMORY[0x24BDAC7A8](v11);
  v17 = (char *)&v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x24BDAC7A8](v15);
  v41 = (char *)&v35 - v19;
  MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)&v35 - v20;
  v42 = a3;
  v44 = a3;
  v22 = sub_214425094();
  MEMORY[0x2199CD934](MEMORY[0x24BEE12E0], v22);
  sub_214425238();
  v23 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
  if (v23(v13, 1, a4) == 1)
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
    return 0;
  }
  v36 = v8;
  v37 = (char *)v7;
  v24 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
  v24(v21, v13, a4);
  v44 = v42;
  MEMORY[0x2199CD934](MEMORY[0x24BEE12B0], v22);
  v25 = v43;
  sub_214424E18();
  if (v23(v25, 1, a4) == 1)
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v21, a4);
    (*(void (**)(char *, char *))(v36 + 8))(v43, v37);
    return 0;
  }
  v37 = v21;
  v26 = v41;
  v24(v41, v43, a4);
  if (v40 < 2)
  {
    v27 = *(void (**)(char *, uint64_t))(v14 + 8);
    v27(v26, a4);
    v27(v37, a4);
    return 0;
  }
  v30 = v40 - 1;
  result = sub_214424E6C();
  v31 = v14;
  if ((result & 1) == 0)
  {
    v28 = 0;
    if ((unint64_t)v30 >= 2)
    {
      while (!__OFADD__(v28, v30))
      {
        sub_2144250B8();
        v33 = sub_214424E60();
        result = (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v17, a4);
        if ((v33 & 1) != 0)
          v30 = (v28 + v30) / 2;
        else
          v28 = (v28 + v30) / 2;
        if (v28 + 1 >= v30)
          goto LABEL_23;
      }
      goto LABEL_25;
    }
LABEL_23:
    v34 = *(void (**)(char *, uint64_t))(v31 + 8);
    v34(v41, a4);
    v34(v37, a4);
    return v28;
  }
  v28 = 0;
  if ((unint64_t)v30 < 2)
    goto LABEL_23;
  while (!__OFADD__(v28, v30))
  {
    sub_2144250B8();
    v32 = sub_214424E6C();
    result = (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v17, a4);
    if ((v32 & 1) != 0)
      v30 = (v28 + v30) / 2;
    else
      v28 = (v28 + v30) / 2;
    if (v28 + 1 >= v30)
      goto LABEL_23;
  }
  __break(1u);
LABEL_25:
  __break(1u);
  return result;
}

void sub_214250ABC(double a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, double *a4@<X8>)
{
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t TupleTypeMetadata2;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  vDSP_Length v28;
  double v29;
  double *v30;
  vDSP_Length v31;
  float v32;
  double *v33;
  char *v34;
  void (*v35)(char *, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t);
  char *v43;
  double *v44;
  _QWORD v45[3];
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  double *v54;
  double __SumOfSquares[2];
  double __Sum[2];

  v54 = a4;
  __Sum[1] = *(double *)MEMORY[0x24BDAC8D0];
  v53 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(*(_QWORD *)(v53 + 16) + 8);
  v51 = a3;
  v52 = v6;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  MEMORY[0x24BDAC7A8](v8);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v10 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v12 = (char *)v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v10);
  v15 = (char *)v45 - v14;
  v16 = MEMORY[0x24BDAC7A8](v13);
  v17 = MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)v45 - v18;
  v20 = MEMORY[0x24BDAC7A8](v17);
  MEMORY[0x24BDAC7A8](v20);
  v22 = MEMORY[0x24BDAC7A8]((char *)v45 - v21);
  if (a2 == MEMORY[0x24BEE13C8])
  {
    v28 = *(_QWORD *)(*(_QWORD *)&a1 + 16);
    v29 = 0.0;
    if (v28 >= 2)
    {
      __Sum[0] = NAN;
      __SumOfSquares[0] = NAN;
      vDSP_sve_svesqD((const double *)(*(_QWORD *)&a1 + 32), 1, __Sum, __SumOfSquares, v28);
      v29 = (__SumOfSquares[0] - __Sum[0] * (__Sum[0] / (double)(uint64_t)v28)) / (double)(uint64_t)(v28 - 1);
    }
    v30 = v54;
    *v54 = v29;
    *((_BYTE *)v30 + 8) = v28 < 2;
  }
  else if (a2 == MEMORY[0x24BEE14E8])
  {
    v31 = *(_QWORD *)(*(_QWORD *)&a1 + 16);
    v32 = 0.0;
    if (v31 >= 2)
    {
      LODWORD(__Sum[0]) = 2143289344;
      LODWORD(__SumOfSquares[0]) = 2143289344;
      vDSP_sve_svesq((const float *)(*(_QWORD *)&a1 + 32), 1, (float *)__Sum, (float *)__SumOfSquares, v31);
      v32 = (float)(*(float *)__SumOfSquares - (float)(*(float *)__Sum * (float)(*(float *)__Sum / (float)(uint64_t)v31)))
          / (float)(uint64_t)(v31 - 1);
    }
    v33 = v54;
    *(float *)v54 = v32;
    *((_BYTE *)v33 + 4) = v31 < 2;
  }
  else
  {
    v46 = (char *)v45 - v23;
    v47 = v22;
    v48 = v25;
    v49 = v26;
    v50 = v24;
    v27 = MEMORY[0x2199CC98C](*(_QWORD *)&a1, a2);
    if (v27 >= 2)
    {
      __Sum[0] = a1;
      v45[2] = v27;
      v45[1] = swift_getAssociatedConformanceWitness();
      sub_2144257D8();
      sub_214425754();
      sub_2144257D8();
      sub_214425754();
      v34 = &v12[*(int *)(TupleTypeMetadata2 + 48)];
      v35 = *(void (**)(char *, uint64_t, uint64_t))(v50 + 32);
      v35(v12, (uint64_t)v49, a2);
      v36 = ((uint64_t (*)(char *, char *, uint64_t))v35)(v34, v19, a2);
      MEMORY[0x24BDAC7A8](v36);
      v37 = v51;
      v45[-2] = a2;
      v45[-1] = v37;
      v38 = sub_214425094();
      MEMORY[0x2199CD934](MEMORY[0x24BEE12C8], v38);
      sub_214424F8C();
      v39 = &v15[*(int *)(TupleTypeMetadata2 + 48)];
      v40 = v46;
      v35(v46, (uint64_t)v15, a2);
      v41 = v47;
      v35((char *)v47, (uint64_t)v39, a2);
      sub_214424DAC();
      sub_214424D88();
      v42 = *(void (**)(char *, uint64_t))(v50 + 8);
      v42(v19, a2);
      v43 = v48;
      sub_214425160();
      sub_21442564C();
      v42(v43, a2);
      sub_214424DAC();
      v44 = v54;
      sub_214424D88();
      v42(v43, a2);
      v42(v19, a2);
      v42(v49, a2);
      v42((char *)v41, a2);
      v42(v40, a2);
      (*(void (**)(double *, _QWORD, uint64_t, uint64_t))(v50 + 56))(v44, 0, 1, a2);
    }
    else
    {
      (*(void (**)(double *, uint64_t, uint64_t, uint64_t))(v50 + 56))(v54, 1, 1, a2);
    }
  }
}

uint64_t sub_2142510B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  v4 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_214425658();
  sub_214425160();
  swift_getTupleTypeMetadata2();
  sub_214425658();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, a3);
}

void sub_2142511A0(double a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  vDSP_Length v17;
  double v18;
  vDSP_Length v19;
  float v20;
  double __SumOfSquares;
  double __Sum[3];

  __Sum[2] = *(double *)MEMORY[0x24BDAC8D0];
  v8 = sub_214425388();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (double *)((char *)&__Sum[-1] - v10);
  if (a2 == MEMORY[0x24BEE13C8])
  {
    v17 = *(_QWORD *)(*(_QWORD *)&a1 + 16);
    v18 = 0.0;
    if (v17 >= 2)
    {
      __SumOfSquares = NAN;
      __Sum[0] = NAN;
      vDSP_sve_svesqD((const double *)(*(_QWORD *)&a1 + 32), 1, __Sum, &__SumOfSquares, v17);
      v18 = sqrt((__SumOfSquares - __Sum[0] * (__Sum[0] / (double)(uint64_t)v17)) / (double)(uint64_t)(v17 - 1));
    }
    *(double *)a4 = v18;
    *(_BYTE *)(a4 + 8) = v17 < 2;
  }
  else if (a2 == MEMORY[0x24BEE14E8])
  {
    v19 = *(_QWORD *)(*(_QWORD *)&a1 + 16);
    v20 = 0.0;
    if (v19 >= 2)
    {
      LODWORD(__Sum[0]) = 2143289344;
      LODWORD(__SumOfSquares) = 2143289344;
      vDSP_sve_svesq((const float *)(*(_QWORD *)&a1 + 32), 1, (float *)__Sum, (float *)&__SumOfSquares, v19);
      v20 = sqrtf((float)(*(float *)&__SumOfSquares- (float)(*(float *)__Sum * (float)(*(float *)__Sum / (float)(uint64_t)v19)))/ (float)(uint64_t)(v19 - 1));
    }
    *(float *)a4 = v20;
    *(_BYTE *)(a4 + 4) = v19 < 2;
  }
  else
  {
    sub_214250ABC(a1, a2, a3, v11);
    v13 = MEMORY[0x24BDAC7A8](v12);
    v14 = *(_QWORD *)(a3 + 16);
    *((_QWORD *)&__SumOfSquares - 2) = a2;
    *((_QWORD *)&__SumOfSquares - 1) = v14;
    MEMORY[0x24BDAC7A8](v13);
    *((_QWORD *)&__SumOfSquares - 4) = a2;
    *((_QWORD *)&__SumOfSquares - 3) = a3;
    *((_QWORD *)&__SumOfSquares - 2) = sub_214251E90;
    *((_QWORD *)&__SumOfSquares - 1) = v15;
    sub_21440557C((void (*)(char *, char *))sub_214251E98, (uint64_t)(&__SumOfSquares - 6), MEMORY[0x24BEE4078], a2, v16, a4);
    (*(void (**)(double *, uint64_t))(v9 + 8))(v11, v8);
  }
}

uint64_t sub_2142513EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t (*v41)(char *, uint64_t, uint64_t);
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  double v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  double v51;
  uint64_t v52;
  char *v53;
  char v54;
  void (*v55)(char *, uint64_t);
  uint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t result;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  char *v71;
  uint64_t AssociatedTypeWitness;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  double v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  unint64_t v95;

  v74 = sub_214425760();
  v70 = *(_QWORD *)(v74 - 8);
  MEMORY[0x24BDAC7A8](v74);
  v77 = (char *)&v67 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v75 = *(_QWORD *)(a4 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v71 = (char *)&v67 - v9;
  v10 = *(_QWORD *)(a4 + 16);
  v86 = *(_QWORD *)(*(_QWORD *)(v10 + 16) + 8);
  v83 = *(_QWORD *)(v86 + 16);
  v82 = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](v82);
  v81 = (char *)&v67 - v11;
  v12 = sub_214425388();
  v79 = *(_QWORD *)(v12 - 8);
  v80 = v12;
  v13 = MEMORY[0x24BDAC7A8](v12);
  v88 = (uint64_t)&v67 - v14;
  v89 = *(_QWORD *)(a3 - 8);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v68 = (char *)&v67 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x24BDAC7A8](v15);
  v69 = (char *)&v67 - v18;
  v19 = MEMORY[0x24BDAC7A8](v17);
  v84 = (char *)&v67 - v20;
  v21 = MEMORY[0x24BDAC7A8](v19);
  v73 = (char *)&v67 - v22;
  v23 = MEMORY[0x24BDAC7A8](v21);
  v87 = (char *)&v67 - v24;
  v25 = MEMORY[0x24BDAC7A8](v23);
  v85 = (char *)&v67 - v26;
  MEMORY[0x24BDAC7A8](v25);
  v92 = (char *)&v67 - v27;
  v76 = v10;
  v78 = *(_QWORD *)(*(_QWORD *)(v10 + 24) + 8);
  v28 = sub_214424EC0();
  v29 = sub_214425388();
  v30 = *(_QWORD *)(v29 - 8);
  v31 = MEMORY[0x24BDAC7A8](v29);
  v33 = (char *)&v67 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = MEMORY[0x24BDAC7A8](v31);
  v36 = (char *)&v67 - v35;
  MEMORY[0x24BDAC7A8](v34);
  v93 = (char *)&v67 - v37;
  v38 = a1;
  v40 = v39;
  (*(void (**)(char *, uint64_t, uint64_t))(v30 + 16))(v33, v38, v29);
  v41 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v40 + 48);
  v42 = v41(v33, 1, v28);
  v90 = *(double *)&a2;
  v91 = a3;
  if (v42 == 1)
  {
    v94 = a2;
    v43 = a4;
    v44 = sub_214425094();
    v45 = MEMORY[0x2199CD934](MEMORY[0x24BEE12C8], v44);
    v46 = v44;
    a4 = v43;
    sub_21424E8D4(v46, v45, v43, (uint64_t)v36);
    (*(void (**)(char *, uint64_t))(v30 + 8))(v33, v29);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v40 + 32))(v36, v33, v28);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v40 + 56))(v36, 0, 1, v28);
  }
  v47 = *(double *)&v28;
  if (v41(v36, 1, v28) == 1)
  {
    (*(void (**)(char *, uint64_t))(v30 + 8))(v36, v29);
    return 1;
  }
  v48 = v93;
  (*(void (**)(char *, char *, uint64_t))(v40 + 32))(v93, v36, v28);
  v49 = v88;
  v51 = v90;
  v50 = v91;
  sub_2142511A0(v90, v91, a4, v88);
  v52 = v89;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v89 + 48))(v49, 1, v50) == 1)
  {
    (*(void (**)(char *, uint64_t))(v40 + 8))(v48, v28);
    (*(void (**)(uint64_t, uint64_t))(v79 + 8))(v49, v80);
    return 1;
  }
  v80 = v40;
  (*(void (**)(char *, uint64_t, uint64_t))(v52 + 32))(v92, v49, v50);
  swift_getAssociatedConformanceWitness();
  sub_2144257D8();
  v53 = v85;
  sub_214425754();
  v54 = sub_214424E60();
  v55 = *(void (**)(char *, uint64_t))(v52 + 8);
  v55(v53, v50);
  if ((v54 & 1) == 0)
  {
    v55(v92, v50);
    (*(void (**)(char *, uint64_t))(v80 + 8))(v93, v28);
    return 1;
  }
  sub_21442564C();
  sub_214424D34();
  v56 = MEMORY[0x2199CC98C](*(_QWORD *)&v51, v50);
  cbrt((double)v56);
  v57 = v69;
  sub_214424D28();
  sub_214425160();
  v55(v57, v50);
  v58 = v53;
  swift_getAssociatedConformanceWitness();
  sub_2144257CC();
  v59 = v68;
  sub_214425754();
  sub_214425160();
  v55(v59, v50);
  v60 = v84;
  v90 = v47;
  sub_214424D88();
  v55(v57, v50);
  v55(v60, v50);
  v61 = v70;
  v62 = v77;
  v63 = v74;
  (*(void (**)(char *, _QWORD, uint64_t))(v70 + 104))(v77, *MEMORY[0x24BEE38E0], v74);
  v64 = v73;
  sub_214424D94();
  (*(void (**)(char *, uint64_t))(v61 + 8))(v62, v63);
  v55(v58, v50);
  sub_214251E4C();
  sub_21442561C();
  if ((v95 & 1) == 0)
  {
    v55(v64, v50);
    v65 = v94;
    v55(v87, v50);
    v55(v92, v50);
    (*(void (**)(char *, double))(v80 + 8))(v93, COERCE_DOUBLE(*(_QWORD *)&v90));
    return v65;
  }
  v94 = 0;
  v95 = 0xE000000000000000;
  sub_2144254D8();
  sub_214425904();
  sub_214424F20();
  swift_bridgeObjectRelease();
  sub_214424F20();
  sub_214424F20();
  sub_214424F20();
  result = sub_214425628();
  __break(1u);
  return result;
}

uint64_t sub_214251C5C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  char v8;
  uint64_t v10;
  uint64_t v11;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(_QWORD *)(a1 + 88);
  v5 = *(_QWORD *)(a1 + 96);
  v6 = *(_BYTE *)(a1 + 104);
  v10 = *(_QWORD *)(a1 + 128);
  v11 = *(_QWORD *)(a1 + 120);
  v7 = *(_BYTE *)(a1 + 56);
  v8 = *(_BYTE *)(a1 + 136);
  sub_2141DD130(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
  swift_bridgeObjectRetain();
  sub_2141DD140(v2, v3, v7);
  sub_2141DD130(v4, v5, v6);
  swift_bridgeObjectRetain();
  sub_2141DD140(v11, v10, v8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_214251D30(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  char v8;
  uint64_t v10;
  uint64_t v11;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(_QWORD *)(a1 + 88);
  v5 = *(_QWORD *)(a1 + 96);
  v6 = *(_BYTE *)(a1 + 104);
  v10 = *(_QWORD *)(a1 + 128);
  v11 = *(_QWORD *)(a1 + 120);
  v7 = *(_BYTE *)(a1 + 56);
  v8 = *(_BYTE *)(a1 + 136);
  sub_2141ED0BC(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
  swift_bridgeObjectRelease();
  sub_2141EF1B0(v2, v3, v7);
  sub_2141ED0BC(v4, v5, v6);
  swift_bridgeObjectRelease();
  sub_2141EF1B0(v11, v10, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_214251E04(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_2141D8BF8(&qword_253F13428);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_214251E4C()
{
  unint64_t result;

  result = qword_254D699D0;
  if (!qword_254D699D0)
  {
    result = MEMORY[0x2199CD934](MEMORY[0x24BEE17C8], MEMORY[0x24BEE1768]);
    atomic_store(result, (unint64_t *)&qword_254D699D0);
  }
  return result;
}

uint64_t sub_214251E90()
{
  return sub_214423CD8();
}

uint64_t sub_214251E98()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 32))();
}

uint64_t sub_214251EC0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_2142510B8(a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t sub_214251EDC()
{
  return 24;
}

__n128 sub_214251EE8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_214251EFC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_214251F20()
{
  unsigned __int8 v1;

  swift_getAtKeyPath();
  return v1;
}

uint64_t sub_214251F48(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v10;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v10 = MEMORY[0x24BEE4AF8];
    sub_2141D3A14(0, v1, 0);
    v2 = v10;
    v4 = (uint64_t *)(a1 + 32);
    do
    {
      v6 = *v4++;
      v5 = v6;
      v8 = *(_QWORD *)(v10 + 16);
      v7 = *(_QWORD *)(v10 + 24);
      swift_retain();
      if (v8 >= v7 >> 1)
        sub_2141D3A14((char *)(v7 > 1), v8 + 1, 1);
      *(_QWORD *)(v10 + 16) = v8 + 1;
      *(_QWORD *)(v10 + 8 * v8 + 32) = v5;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_214252010@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v7 = *a5;
  *a6 = a1;
  a6[1] = a2;
  a6[2] = a3;
  a6[3] = a4;
  v8 = (uint64_t *)(v7 + *MEMORY[0x24BEE46A8]);
  v9 = *v8;
  v10 = v8[1];
  *(_QWORD *)((char *)a6 + *(int *)(type metadata accessor for VisualMapper(0, *v8, v10, a4) + 36)) = a5;
  type metadata accessor for VisualMapper.Mapping(0, v9, v10, v11);
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_214252090@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = a6;
  *(_QWORD *)(result + 24) = a5;
  *(_QWORD *)a7 = a1;
  *(_QWORD *)(a7 + 8) = a2;
  *(_QWORD *)(a7 + 16) = a3;
  *(_QWORD *)(a7 + 24) = a4;
  *(_QWORD *)(a7 + 32) = sub_21427402C;
  *(_QWORD *)(a7 + 40) = result;
  *(_BYTE *)(a7 + 48) = 2;
  return result;
}

uint64_t sub_214252110@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  MEMORY[0x24BDAC7A8](a1);
  swift_getAtKeyPath();
  result = sub_214423E10();
  *a2 = result;
  return result;
}

uint64_t sub_214252198@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (**v28)@<X0>(uint64_t@<X0>, uint64_t@<X2>, uint64_t@<X3>, uint64_t@<X8>);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t, uint64_t);
  uint64_t v38;
  void (*v39)(char *, uint64_t, uint64_t);
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t (*v43)@<X0>(uint64_t@<X0>, uint64_t@<X2>, uint64_t@<X3>, uint64_t@<X8>);
  char *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD v48[2];
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v11 = *(_QWORD *)(a5 - 8);
  v58 = a3;
  v59 = v11;
  MEMORY[0x24BDAC7A8](a1);
  v48[1] = v13;
  v49 = v12;
  v60 = (char *)v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = v14;
  v63 = type metadata accessor for PlottableProjection(0, v15, v12, v14);
  v16 = *(_QWORD *)(v63 - 8);
  v17 = *(_QWORD *)(v16 + 64);
  MEMORY[0x24BDAC7A8](v63);
  v57 = (char *)v48 - v18;
  v21 = type metadata accessor for AnyConcreteScale(0, a5, v19, v20);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = *(_QWORD *)(v22 + 64);
  MEMORY[0x24BDAC7A8](v21);
  v51 = (char *)v48 - v24;
  v64 = a4;
  v26 = type metadata accessor for VisualMapper.Mapping(0, a4, a5, v25);
  v61 = *(_QWORD *)(v26 - 8);
  v62 = v26;
  MEMORY[0x24BDAC7A8](v26);
  v28 = (uint64_t (**)@<X0>(uint64_t@<X0>, uint64_t@<X2>, uint64_t@<X3>, uint64_t@<X8>))((char *)v48 - v27);
  v29 = *(_QWORD *)a1;
  v31 = *(unsigned __int8 *)(a1 + 16);
  v32 = *(_QWORD *)(a1 + 24);
  v54 = *(_QWORD *)(a1 + 8);
  v30 = v54;
  v55 = v29;
  *a6 = v29;
  a6[1] = v30;
  v52 = a6;
  v53 = v31;
  a6[2] = v31;
  a6[3] = v32;
  v56 = v32;
  v33 = a2;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v22 + 48))(a2, 1, v21) == 1)
  {
    sub_2141DD130(v55, v54, v53);
    v34 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
    swift_bridgeObjectRetain();
    v34(a1, v63);
    (*(void (**)(uint64_t (**)@<X0>(uint64_t@<X0>, uint64_t@<X2>, uint64_t@<X3>, uint64_t@<X8>), uint64_t, uint64_t))(v59 + 32))(v28, v58, a5);
    v35 = v62;
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    v37 = *(void (**)(char *, uint64_t, uint64_t))(v22 + 32);
    v37(v51, v33, v21);
    v48[0] = *(_QWORD *)(v16 + 32);
    ((void (*)(char *, uint64_t, uint64_t))v48[0])(v57, a1, v63);
    v38 = v59;
    v39 = *(void (**)(char *, uint64_t, uint64_t))(v59 + 32);
    v39(v60, v58, a5);
    v40 = (*(unsigned __int8 *)(v22 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
    v41 = (v23 + *(unsigned __int8 *)(v16 + 80) + v40) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
    v42 = (v17 + *(unsigned __int8 *)(v38 + 80) + v41) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80);
    v43 = (uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X2>, uint64_t@<X3>, uint64_t@<X8>))swift_allocObject();
    *((_QWORD *)v43 + 2) = v64;
    *((_QWORD *)v43 + 3) = a5;
    v45 = v50;
    v44 = v51;
    *((_QWORD *)v43 + 4) = v49;
    *((_QWORD *)v43 + 5) = v45;
    v37((char *)v43 + v40, (uint64_t)v44, v21);
    ((void (*)(char *, char *, uint64_t))v48[0])((char *)v43 + v41, v57, v63);
    v39((char *)v43 + v42, (uint64_t)v60, a5);
    *v28 = sub_214273F3C;
    v28[1] = v43;
    v35 = v62;
    swift_storeEnumTagMultiPayload();
    sub_2141DD130(v55, v54, v53);
    swift_bridgeObjectRetain();
  }
  v46 = type metadata accessor for VisualMapper(0, v64, a5, v36);
  return (*(uint64_t (**)(char *, uint64_t (**)@<X0>(uint64_t@<X0>, uint64_t@<X2>, uint64_t@<X3>, uint64_t@<X8>), uint64_t))(v61 + 32))((char *)v52 + *(int *)(v46 + 36), v28, v35);
}

uint64_t sub_2142524B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  double v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  _OWORD v49[2];
  uint64_t v50;
  uint64_t v51;
  char v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  _BYTE v56[32];

  v46 = a4;
  v43 = a3;
  v45 = a2;
  v44 = a1;
  v42 = a9;
  v48 = *(_QWORD *)(a6 - 8);
  v13 = MEMORY[0x24BDAC7A8](a1);
  v47 = (char *)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v18 = (char *)&v40 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for PlottableProjection(0, v19, v20, v21);
  v23 = *(_QWORD *)(v22 - 8);
  MEMORY[0x24BDAC7A8](v22);
  v25 = (char *)&v40 - v24;
  v41 = sub_214425388();
  v40 = *(_QWORD *)(v41 - 8);
  MEMORY[0x24BDAC7A8](v41);
  v27 = (char *)&v40 - v26;
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))(v25, v43, v22);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, v44, a5);
  sub_2143D06EC((uint64_t)v25, (uint64_t)v18, a5, a7, a8, (uint64_t)v49);
  v28 = v50;
  v29 = v51;
  v30 = v52;
  if (v52 < 0)
  {
    v32 = 0;
    v33 = v52 & 1;
    v31 = (*(double *)&v50 + *(double *)&v51) * 0.5;
  }
  else
  {
    sub_2141DD14C(v50, v51, v52);
    v31 = *(double *)&v28;
    v32 = v29;
    v33 = v30;
  }
  v53 = v49[0];
  v54 = v49[1];
  sub_21421CC0C((uint64_t)&v53, (uint64_t)v56);
  sub_21421CC48((uint64_t)v56);
  v55 = *((_QWORD *)&v54 + 1);
  sub_2141F9244((uint64_t)&v55);
  sub_2141EF1B0(v28, v29, v30);
  v36 = type metadata accessor for AnyConcreteScale(0, a6, v34, v35);
  sub_21420468C(*(uint64_t *)&v31, v32, v33, v36, (uint64_t)v27);
  sub_2141E60B8(*(uint64_t *)&v31, v32, v33);
  v38 = v47;
  v37 = v48;
  (*(void (**)(char *, uint64_t, uint64_t))(v48 + 16))(v47, v46, a6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v27, 1, a6) == 1)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v37 + 32))(v42, v38, a6);
    return (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v27, v41);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v37 + 8))(v38, a6);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v37 + 32))(v42, v27, a6);
  }
}

double sub_2142527B8@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t, uint64_t);
  unint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  double result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v22 = a3;
  v23 = a4;
  v21 = a2;
  v7 = type metadata accessor for PlottableProjection(0, a2, a3, a4);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v20 - v9;
  v11 = *(_QWORD *)a1;
  v12 = *(_QWORD *)(a1 + 8);
  v20 = *(unsigned __int8 *)(a1 + 16);
  v13 = *(_QWORD *)(a1 + 24);
  v14 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 32);
  v14((char *)&v20 - v9, a1, v7);
  v15 = (*(unsigned __int8 *)(v8 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v16 = (char *)swift_allocObject();
  v17 = v22;
  *((_QWORD *)v16 + 2) = v21;
  *((_QWORD *)v16 + 3) = v17;
  *((_QWORD *)v16 + 4) = v23;
  v14(&v16[v15], (uint64_t)v10, v7);
  v18 = v20;
  sub_2141DD130(v11, v12, v20);
  swift_bridgeObjectRetain();
  *(_QWORD *)a5 = v11;
  *(_QWORD *)(a5 + 8) = v12;
  *(_QWORD *)(a5 + 16) = v18;
  *(_QWORD *)(a5 + 24) = v13;
  *(_QWORD *)(a5 + 32) = sub_214274AEC;
  *(_QWORD *)(a5 + 40) = v16;
  result = 0.0;
  *(_OWORD *)(a5 + 48) = 0u;
  *(_OWORD *)(a5 + 64) = 0u;
  *(_OWORD *)(a5 + 80) = 0u;
  *(_QWORD *)(a5 + 96) = 0;
  *(_BYTE *)(a5 + 104) = 2;
  return result;
}

__n128 sub_2142528F4@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  __int128 v22;
  __n128 result;
  uint64_t v24;
  _OWORD v25[4];
  uint64_t v26;

  v12 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for PlottableProjection(0, v15, v16, v17);
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v24 - v19;
  (*(void (**)(char *, uint64_t))(v21 + 16))((char *)&v24 - v19, a2);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a1, a3);
  sub_2143D06EC((uint64_t)v20, (uint64_t)v14, a3, a4, a5, (uint64_t)v25);
  v22 = v25[3];
  *(_OWORD *)(a6 + 32) = v25[2];
  *(_OWORD *)(a6 + 48) = v22;
  *(_QWORD *)(a6 + 64) = v26;
  result = (__n128)v25[1];
  *(_OWORD *)a6 = v25[0];
  *(__n128 *)(a6 + 16) = result;
  return result;
}

uint64_t sub_214252A18@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (**v11)(uint64_t);
  uint64_t v12;
  int EnumCaseMultiPayload;
  uint64_t v15;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = type metadata accessor for VisualMapper.Mapping(0, *(_QWORD *)(a2 + 16), v8, a3);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (void (**)(uint64_t))((char *)&v15 - v10);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)&v15 - v10, v4 + *(int *)(a2 + 36), v9);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
    return (*(uint64_t (**)(uint64_t, void (**)(uint64_t), uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a4, v11, v8);
  if (EnumCaseMultiPayload == 1)
    swift_getAtKeyPath();
  else
    (*v11)(a1);
  return swift_release();
}

double sub_214252B28(uint64_t a1, uint64_t a2, char a3)
{
  double v5;

  if ((a3 & 1) == 0)
    return *(double *)&a2;
  swift_retain();
  swift_getAtKeyPath();
  sub_2142637C0(a2, 1);
  return v5;
}

void sub_214252B84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(_QWORD);
  char *v8;
  uint64_t v9;

  v1 = type metadata accessor for SgVectorized(0);
  MEMORY[0x24BDAC7A8](v1);
  v2 = type metadata accessor for RulesRenderer(0);
  MEMORY[0x24BDAC7A8](v2);
  v3 = type metadata accessor for PointsRenderer(0);
  MEMORY[0x24BDAC7A8](v3);
  v4 = type metadata accessor for RectanglesRenderer(0);
  MEMORY[0x24BDAC7A8](v4);
  v5 = type metadata accessor for AnyVectorizedRenderer.MarkRenderer(0);
  MEMORY[0x24BDAC7A8](v5);
  sub_2141FDEA0(v0, (uint64_t)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
  v8 = (char *)sub_214252CE0 + 4 * byte_214428DA0[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_214252CE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_2141FE1E0(v1, v0, type metadata accessor for RectanglesRenderer);
  v2 = *(_QWORD *)(v0 + 56);
  sub_2141DD370(v0, type metadata accessor for RectanglesRenderer);
  return v2;
}

void sub_214252DAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD);
  char *v7;
  uint64_t v8;

  v1 = type metadata accessor for RulesRenderer(0);
  MEMORY[0x24BDAC7A8](v1);
  v2 = type metadata accessor for PointsRenderer(0);
  MEMORY[0x24BDAC7A8](v2);
  v3 = type metadata accessor for RectanglesRenderer(0);
  MEMORY[0x24BDAC7A8](v3);
  v4 = type metadata accessor for AnyVectorizedRenderer.MarkRenderer(0);
  MEMORY[0x24BDAC7A8](v4);
  sub_2141FDEA0(v0, (uint64_t)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  v7 = (char *)sub_214252EEC + 4 * byte_214428DA4[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_214252EEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_2141FE1E0(v5, v4, type metadata accessor for RectanglesRenderer);
  sub_2142EAF20(v3, v2, v1, v0);
  return sub_2141DD370(v4, type metadata accessor for RectanglesRenderer);
}

void sub_214252FBC()
{
  sub_214425628();
  __break(1u);
}

void sub_214253010()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(_QWORD);
  char *v8;
  uint64_t v9;

  v1 = type metadata accessor for SgVectorized(0);
  MEMORY[0x24BDAC7A8](v1);
  v2 = type metadata accessor for RulesRenderer(0);
  MEMORY[0x24BDAC7A8](v2);
  v3 = type metadata accessor for RectanglesRenderer(0);
  MEMORY[0x24BDAC7A8](v3);
  v4 = type metadata accessor for PointsRenderer(0);
  MEMORY[0x24BDAC7A8](v4);
  v5 = type metadata accessor for AnyVectorizedRenderer.MarkRenderer(0);
  MEMORY[0x24BDAC7A8](v5);
  sub_2141FDEA0(v0, (uint64_t)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
  v8 = (char *)sub_214253180 + 4 * byte_214428DA8[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_214253180()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_2141FE1E0(v3, v2, type metadata accessor for RectanglesRenderer);
  sub_2142EAF20(v0, v1, (uint64_t)&unk_24D17ADF8, MEMORY[0x24BEE4AF8]);
  return sub_2141DD370(v2, type metadata accessor for RectanglesRenderer);
}

__n128 sub_2142532B4@<Q0>(char a1@<W0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  __int128 v5;
  __int128 v6;
  __n128 result;
  __int128 v8;
  uint64_t v9;
  char v10;

  v5 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(a5 + 24) = *(_OWORD *)a4;
  *(_OWORD *)(a5 + 40) = v5;
  v6 = *(_OWORD *)(a4 + 48);
  *(_OWORD *)(a5 + 56) = *(_OWORD *)(a4 + 32);
  *(_OWORD *)(a5 + 72) = v6;
  result = *(__n128 *)(a4 + 64);
  v8 = *(_OWORD *)(a4 + 80);
  *(__n128 *)(a5 + 88) = result;
  v9 = *(_QWORD *)(a4 + 96);
  v10 = *(_BYTE *)(a4 + 104);
  *(_BYTE *)a5 = a1;
  *(_QWORD *)(a5 + 8) = a2;
  *(_BYTE *)(a5 + 16) = a3;
  *(_OWORD *)(a5 + 104) = v8;
  *(_QWORD *)(a5 + 120) = v9;
  *(_BYTE *)(a5 + 128) = v10;
  return result;
}

double sub_2142532F8@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double result;
  _BYTE v8[136];

  *(_OWORD *)a2 = 0u;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 1;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_BYTE *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_QWORD *)(a2 + 80) = 1;
  *(_OWORD *)(a2 + 88) = 0u;
  *(_BYTE *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  *(_OWORD *)(a2 + 120) = 0u;
  *(_QWORD *)(a2 + 136) = 1;
  *(_OWORD *)(a2 + 144) = 0u;
  *(_OWORD *)(a2 + 160) = 0u;
  *(_OWORD *)(a2 + 169) = 0u;
  *(_OWORD *)(a2 + 192) = 0u;
  *(_QWORD *)(a2 + 208) = 0;
  *(_QWORD *)(a2 + 216) = 1;
  *(_OWORD *)(a2 + 224) = 0u;
  *(_OWORD *)(a2 + 240) = 0u;
  *(_OWORD *)(a2 + 249) = 0u;
  *(_OWORD *)(a2 + 272) = 0u;
  *(_OWORD *)(a2 + 288) = 0u;
  *(_BYTE *)(a2 + 320) = -4;
  *(_OWORD *)(a2 + 304) = 0u;
  sub_21427384C((uint64_t)v8);
  type metadata accessor for TypedVectorizedProperties.Position(255, a1, v4, v5);
  v6 = sub_214425388();
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a2 + 328, v8, v6);
  *(_QWORD *)(a2 + 464) = 0;
  result = 0.0;
  *(_OWORD *)(a2 + 472) = 0u;
  *(_QWORD *)(a2 + 488) = 1;
  *(_OWORD *)(a2 + 496) = 0u;
  *(_BYTE *)(a2 + 512) = 0;
  *(_QWORD *)(a2 + 520) = 0;
  *(_OWORD *)(a2 + 528) = 0u;
  *(_QWORD *)(a2 + 544) = 1;
  *(_OWORD *)(a2 + 552) = 0u;
  *(_BYTE *)(a2 + 568) = 0;
  *(_QWORD *)(a2 + 576) = 0;
  *(_OWORD *)(a2 + 584) = 0u;
  *(_QWORD *)(a2 + 600) = 1;
  *(_BYTE *)(a2 + 640) = 0;
  *(_OWORD *)(a2 + 608) = 0u;
  *(_OWORD *)(a2 + 624) = 0u;
  *(_QWORD *)(a2 + 664) = 0;
  *(_OWORD *)(a2 + 648) = 0u;
  *(_QWORD *)(a2 + 672) = 1;
  *(_OWORD *)(a2 + 680) = 0u;
  *(_OWORD *)(a2 + 696) = 0u;
  *(_BYTE *)(a2 + 712) = 0;
  return result;
}

uint64_t sub_214253428@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v41)(uint64_t, uint64_t, uint64_t);

  type metadata accessor for VisualMapper(255, a12, MEMORY[0x24BEE50B0], a4);
  v21 = sub_214425388();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(a9, a1, v21);
  type metadata accessor for VisualMapper(255, a12, MEMORY[0x24BDEBF80], v22);
  v23 = sub_214425388();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(a9 + 56, a2, v23);
  type metadata accessor for VisualMapper(255, a12, MEMORY[0x24BDEB7D0], v24);
  v25 = sub_214425388();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 32))(a9 + 112, a3, v25);
  type metadata accessor for VisualMapper(255, a12, (uint64_t)&type metadata for AnyChartSymbolShape, v26);
  v27 = sub_214425388();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 32))(a9 + 192, a4, v27);
  type metadata accessor for TypedVectorizedProperties.SymbolSizeMapper(255, a12, v28, v29);
  v30 = sub_214425388();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 32))(a9 + 272, a5, v30);
  type metadata accessor for TypedVectorizedProperties.Position(255, a12, v31, v32);
  v33 = sub_214425388();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 32))(a9 + 328, a6, v33);
  type metadata accessor for VisualMapper(255, a12, MEMORY[0x24BEE0D00], v34);
  v35 = sub_214425388();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 32))(a9 + 464, a7, v35);
  type metadata accessor for VisualMapper(255, a12, MEMORY[0x24BEE1328], v36);
  v37 = sub_214425388();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 32))(a9 + 520, a8, v37);
  type metadata accessor for VisualMapper(255, a12, MEMORY[0x24BDF1FA8], v38);
  v39 = sub_214425388();
  v41 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 32);
  v41(a9 + 576, a10, v39);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v41)(a9 + 648, a11, v39);
}

void *sub_2142536C0@<X0>(const void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v7;

  a5[3] = type metadata accessor for TypedVectorizedProperties(0, a2, a3, a4);
  v7 = swift_allocObject();
  *a5 = v7;
  return memcpy((void *)(v7 + 16), a1, 0x2C9uLL);
}

void sub_214253714(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = v2;
  sub_21427362C(v3, (uint64_t)&v8);
  type metadata accessor for TypedVectorizedProperties(0, a1, v6, v7);
  if ((swift_dynamicCast() & 1) == 0)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    a2[3] = 2;
    bzero(a2 + 4, 0x2A9uLL);
  }
}

uint64_t sub_214253790@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  swift_beginAccess();
  return sub_2141E070C(v1 + 16, a1, &qword_254D69D00);
}

uint64_t sub_2142537E0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  swift_beginAccess();
  return sub_2141E070C(v1 + 72, a1, &qword_254D69D00);
}

uint64_t sub_214253830@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  swift_beginAccess();
  return sub_2141E070C(v1 + 128, a1, &qword_254D69D00);
}

uint64_t sub_214253880@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  swift_beginAccess();
  return sub_2141E070C(v1 + 184, a1, &qword_254D69D00);
}

uint64_t sub_2142538D0()
{
  uint64_t v0;

  sub_2141E0750(v0 + 16, &qword_254D69D00);
  sub_2141E0750(v0 + 72, &qword_254D69D00);
  sub_2141E0750(v0 + 128, &qword_254D69D00);
  sub_2141E0750(v0 + 184, &qword_254D69D00);
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for VectorizedModifiers()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for DimensionMapper(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2141D8E88(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DimensionMapper);
}

uint64_t destroy for VectorizedProperties(uint64_t a1)
{
  return _s6Charts15AnyChartContentVwxx_0(a1);
}

uint64_t initializeWithCopy for VectorizedProperties(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v3;
  (**(void (***)(void))(v3 - 8))();
  return a1;
}

uint64_t *assignWithCopy for VectorizedProperties(uint64_t *a1, uint64_t *a2)
{
  sub_21420D7CC(a1, a2);
  return a1;
}

_OWORD *assignWithTake for VectorizedProperties(_OWORD *a1, _OWORD *a2)
{
  __int128 v4;

  _s6Charts15AnyChartContentVwxx_0((uint64_t)a1);
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  return a1;
}

ValueMetadata *type metadata accessor for VectorizedProperties()
{
  return &type metadata for VectorizedProperties;
}

uint64_t destroy for VectorizedPlottables(uint64_t result)
{
  _QWORD *v1;

  v1 = (_QWORD *)result;
  if (*(_QWORD *)(result + 24))
    result = _s6Charts15AnyChartContentVwxx_0(result);
  if (v1[10])
    result = _s6Charts15AnyChartContentVwxx_0((uint64_t)(v1 + 7));
  if (v1[17])
    result = _s6Charts15AnyChartContentVwxx_0((uint64_t)(v1 + 14));
  if (v1[24])
    result = _s6Charts15AnyChartContentVwxx_0((uint64_t)(v1 + 21));
  if (v1[34])
    return _s6Charts15AnyChartContentVwxx_0((uint64_t)(v1 + 31));
  return result;
}

uint64_t initializeWithCopy for VectorizedPlottables(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  _OWORD *v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  _OWORD *v17;
  _OWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;

  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    v5 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 24) = v4;
    *(_QWORD *)(a1 + 32) = v5;
    (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1, a2);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  }
  v7 = (_OWORD *)(a1 + 56);
  v8 = (_OWORD *)(a2 + 56);
  v9 = *(_QWORD *)(a2 + 80);
  if (v9)
  {
    v10 = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 80) = v9;
    *(_QWORD *)(a1 + 88) = v10;
    (**(void (***)(_OWORD *, _OWORD *))(v9 - 8))(v7, v8);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  }
  else
  {
    v11 = *(_OWORD *)(a2 + 72);
    *v7 = *v8;
    *(_OWORD *)(a1 + 72) = v11;
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  }
  v12 = (_OWORD *)(a1 + 112);
  v13 = (_OWORD *)(a2 + 112);
  v14 = *(_QWORD *)(a2 + 136);
  if (v14)
  {
    v15 = *(_QWORD *)(a2 + 144);
    *(_QWORD *)(a1 + 136) = v14;
    *(_QWORD *)(a1 + 144) = v15;
    (**(void (***)(_OWORD *, _OWORD *))(v14 - 8))(v12, v13);
    *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  }
  else
  {
    v16 = *(_OWORD *)(a2 + 128);
    *v12 = *v13;
    *(_OWORD *)(a1 + 128) = v16;
    *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
    *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  }
  v17 = (_OWORD *)(a1 + 168);
  v18 = (_OWORD *)(a2 + 168);
  v19 = *(_QWORD *)(a2 + 192);
  if (!v19)
  {
    v23 = *(_OWORD *)(a2 + 184);
    *v17 = *v18;
    *(_OWORD *)(a1 + 184) = v23;
    *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
    *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
    v21 = *(_QWORD *)(a2 + 272);
    if (v21)
      goto LABEL_12;
LABEL_14:
    v24 = *(_OWORD *)(a2 + 272);
    *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
    *(_OWORD *)(a1 + 272) = v24;
    *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
    v25 = *(_OWORD *)(a2 + 240);
    *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
    *(_OWORD *)(a1 + 240) = v25;
    return a1;
  }
  v20 = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 192) = v19;
  *(_QWORD *)(a1 + 200) = v20;
  (**(void (***)(_OWORD *, _OWORD *))(v19 - 8))(v17, v18);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  v21 = *(_QWORD *)(a2 + 272);
  if (!v21)
    goto LABEL_14;
LABEL_12:
  *(_BYTE *)(a1 + 224) = *(_BYTE *)(a2 + 224);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  *(_BYTE *)(a1 + 240) = *(_BYTE *)(a2 + 240);
  v22 = *(_QWORD *)(a2 + 280);
  *(_QWORD *)(a1 + 272) = v21;
  *(_QWORD *)(a1 + 280) = v22;
  (**(void (***)(uint64_t, uint64_t))(v21 - 8))(a1 + 248, a2 + 248);
  *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
  return a1;
}

uint64_t assignWithCopy for VectorizedPlottables(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _OWORD *v11;
  __int128 *v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _OWORD *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _OWORD *v29;
  __int128 *v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _OWORD *v38;
  _OWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;

  v4 = *((_QWORD *)a2 + 3);
  if (*(_QWORD *)(a1 + 24))
  {
    if (v4)
    {
      sub_2141DEA14((uint64_t *)a1, (uint64_t *)a2);
LABEL_6:
      *(_OWORD *)(a1 + 40) = *(__int128 *)((char *)a2 + 40);
      goto LABEL_9;
    }
    sub_214253F64(a1);
    v6 = a2[1];
    v5 = a2[2];
    v7 = *a2;
    *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 6);
    *(_OWORD *)(a1 + 16) = v6;
    *(_OWORD *)(a1 + 32) = v5;
    *(_OWORD *)a1 = v7;
  }
  else
  {
    if (v4)
    {
      *(_QWORD *)(a1 + 24) = v4;
      *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
      (**(void (***)(uint64_t, __int128 *))(v4 - 8))(a1, a2);
      goto LABEL_6;
    }
    v8 = *a2;
    v9 = a2[1];
    v10 = a2[2];
    *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 6);
    *(_OWORD *)(a1 + 16) = v9;
    *(_OWORD *)(a1 + 32) = v10;
    *(_OWORD *)a1 = v8;
  }
LABEL_9:
  v11 = (_OWORD *)(a1 + 56);
  v12 = (__int128 *)((char *)a2 + 56);
  v13 = *((_QWORD *)a2 + 10);
  if (*(_QWORD *)(a1 + 80))
  {
    if (v13)
    {
      sub_2141DEA14((uint64_t *)(a1 + 56), (uint64_t *)a2 + 7);
LABEL_14:
      *(_OWORD *)(a1 + 96) = a2[6];
      goto LABEL_17;
    }
    sub_214253F64(a1 + 56);
    v15 = *(__int128 *)((char *)a2 + 72);
    v14 = *(__int128 *)((char *)a2 + 88);
    v16 = *v12;
    *(_QWORD *)(a1 + 104) = *((_QWORD *)a2 + 13);
    *(_OWORD *)(a1 + 72) = v15;
    *(_OWORD *)(a1 + 88) = v14;
    *v11 = v16;
  }
  else
  {
    if (v13)
    {
      *(_QWORD *)(a1 + 80) = v13;
      *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
      (**(void (***)(uint64_t, uint64_t))(v13 - 8))(a1 + 56, (uint64_t)a2 + 56);
      goto LABEL_14;
    }
    v17 = *v12;
    v18 = *(__int128 *)((char *)a2 + 72);
    v19 = *(__int128 *)((char *)a2 + 88);
    *(_QWORD *)(a1 + 104) = *((_QWORD *)a2 + 13);
    *(_OWORD *)(a1 + 72) = v18;
    *(_OWORD *)(a1 + 88) = v19;
    *v11 = v17;
  }
LABEL_17:
  v20 = (_OWORD *)(a1 + 112);
  v21 = a2 + 7;
  v22 = *((_QWORD *)a2 + 17);
  if (*(_QWORD *)(a1 + 136))
  {
    if (v22)
    {
      sub_2141DEA14((uint64_t *)(a1 + 112), (uint64_t *)a2 + 14);
LABEL_22:
      *(_OWORD *)(a1 + 152) = *(__int128 *)((char *)a2 + 152);
      goto LABEL_25;
    }
    sub_214253F64(a1 + 112);
    v24 = a2[8];
    v23 = a2[9];
    v25 = *v21;
    *(_QWORD *)(a1 + 160) = *((_QWORD *)a2 + 20);
    *(_OWORD *)(a1 + 128) = v24;
    *(_OWORD *)(a1 + 144) = v23;
    *v20 = v25;
  }
  else
  {
    if (v22)
    {
      *(_QWORD *)(a1 + 136) = v22;
      *(_QWORD *)(a1 + 144) = *((_QWORD *)a2 + 18);
      (**(void (***)(uint64_t, uint64_t))(v22 - 8))(a1 + 112, (uint64_t)(a2 + 7));
      goto LABEL_22;
    }
    v26 = *v21;
    v27 = a2[8];
    v28 = a2[9];
    *(_QWORD *)(a1 + 160) = *((_QWORD *)a2 + 20);
    *(_OWORD *)(a1 + 128) = v27;
    *(_OWORD *)(a1 + 144) = v28;
    *v20 = v26;
  }
LABEL_25:
  v29 = (_OWORD *)(a1 + 168);
  v30 = (__int128 *)((char *)a2 + 168);
  v31 = *((_QWORD *)a2 + 24);
  if (*(_QWORD *)(a1 + 192))
  {
    if (v31)
    {
      sub_2141DEA14((uint64_t *)(a1 + 168), (uint64_t *)a2 + 21);
LABEL_30:
      *(_OWORD *)(a1 + 208) = a2[13];
      goto LABEL_33;
    }
    sub_214253F64(a1 + 168);
    v33 = *(__int128 *)((char *)a2 + 184);
    v32 = *(__int128 *)((char *)a2 + 200);
    v34 = *v30;
    *(_QWORD *)(a1 + 216) = *((_QWORD *)a2 + 27);
    *(_OWORD *)(a1 + 184) = v33;
    *(_OWORD *)(a1 + 200) = v32;
    *v29 = v34;
  }
  else
  {
    if (v31)
    {
      *(_QWORD *)(a1 + 192) = v31;
      *(_QWORD *)(a1 + 200) = *((_QWORD *)a2 + 25);
      (**(void (***)(uint64_t, uint64_t))(v31 - 8))(a1 + 168, (uint64_t)a2 + 168);
      goto LABEL_30;
    }
    v35 = *v30;
    v36 = *(__int128 *)((char *)a2 + 184);
    v37 = *(__int128 *)((char *)a2 + 200);
    *(_QWORD *)(a1 + 216) = *((_QWORD *)a2 + 27);
    *(_OWORD *)(a1 + 184) = v36;
    *(_OWORD *)(a1 + 200) = v37;
    *v29 = v35;
  }
LABEL_33:
  v38 = (_OWORD *)(a1 + 224);
  v39 = a2 + 14;
  v40 = *((_QWORD *)a2 + 34);
  if (*(_QWORD *)(a1 + 272))
  {
    if (!v40)
    {
      sub_214253F98(a1 + 224);
      *v38 = *v39;
      v44 = a2[18];
      v46 = a2[15];
      v45 = a2[16];
      *(_OWORD *)(a1 + 272) = a2[17];
      *(_OWORD *)(a1 + 288) = v44;
      *(_OWORD *)(a1 + 240) = v46;
      *(_OWORD *)(a1 + 256) = v45;
      return a1;
    }
    *(_BYTE *)(a1 + 224) = *((_BYTE *)a2 + 224);
    v41 = *((_QWORD *)a2 + 29);
    *(_BYTE *)(a1 + 240) = *((_BYTE *)a2 + 240);
    *(_QWORD *)(a1 + 232) = v41;
    sub_2141DEA14((uint64_t *)(a1 + 248), (uint64_t *)a2 + 31);
  }
  else
  {
    if (!v40)
    {
      *v38 = *v39;
      v47 = a2[15];
      v48 = a2[16];
      v49 = a2[18];
      *(_OWORD *)(a1 + 272) = a2[17];
      *(_OWORD *)(a1 + 288) = v49;
      *(_OWORD *)(a1 + 240) = v47;
      *(_OWORD *)(a1 + 256) = v48;
      return a1;
    }
    *(_BYTE *)(a1 + 224) = *((_BYTE *)a2 + 224);
    v42 = *((_QWORD *)a2 + 29);
    *(_BYTE *)(a1 + 240) = *((_BYTE *)a2 + 240);
    *(_QWORD *)(a1 + 232) = v42;
    v43 = *((_QWORD *)a2 + 34);
    *(_QWORD *)(a1 + 272) = v43;
    *(_QWORD *)(a1 + 280) = *((_QWORD *)a2 + 35);
    (**(void (***)(uint64_t, uint64_t))(v43 - 8))(a1 + 248, (uint64_t)a2 + 248);
  }
  *(_OWORD *)(a1 + 288) = a2[18];
  return a1;
}

uint64_t sub_214253F64(uint64_t a1)
{
  destroy for AnyChartContent();
  return a1;
}

uint64_t sub_214253F98(uint64_t a1)
{
  _s6Charts15AnyChartContentVwxx_0(a1 + 24);
  return a1;
}

void *initializeWithTake for VectorizedPlottables(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x130uLL);
}

uint64_t assignWithTake for VectorizedPlottables(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  _OWORD *v6;
  _OWORD *v7;
  __int128 v8;
  __int128 v9;
  _OWORD *v10;
  _OWORD *v11;
  __int128 v12;
  __int128 v13;
  _OWORD *v14;
  _OWORD *v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  char v19;
  __int128 v20;
  __int128 v21;

  if (*(_QWORD *)(a1 + 24))
  {
    if (*(_QWORD *)(a2 + 24))
    {
      _s6Charts15AnyChartContentVwxx_0(a1);
      v4 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v4;
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      goto LABEL_6;
    }
    sub_214253F64(a1);
  }
  v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v5;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
LABEL_6:
  v6 = (_OWORD *)(a1 + 56);
  v7 = (_OWORD *)(a2 + 56);
  if (*(_QWORD *)(a1 + 80))
  {
    if (*(_QWORD *)(a2 + 80))
    {
      _s6Charts15AnyChartContentVwxx_0(a1 + 56);
      v8 = *(_OWORD *)(a2 + 72);
      *v6 = *v7;
      *(_OWORD *)(a1 + 72) = v8;
      *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
      goto LABEL_11;
    }
    sub_214253F64(a1 + 56);
  }
  v9 = *(_OWORD *)(a2 + 72);
  *v6 = *v7;
  *(_OWORD *)(a1 + 72) = v9;
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
LABEL_11:
  v10 = (_OWORD *)(a1 + 112);
  v11 = (_OWORD *)(a2 + 112);
  if (*(_QWORD *)(a1 + 136))
  {
    if (*(_QWORD *)(a2 + 136))
    {
      _s6Charts15AnyChartContentVwxx_0(a1 + 112);
      v12 = *(_OWORD *)(a2 + 128);
      *v10 = *v11;
      *(_OWORD *)(a1 + 128) = v12;
      *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
      *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
      goto LABEL_16;
    }
    sub_214253F64(a1 + 112);
  }
  v13 = *(_OWORD *)(a2 + 128);
  *v10 = *v11;
  *(_OWORD *)(a1 + 128) = v13;
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
LABEL_16:
  v14 = (_OWORD *)(a1 + 168);
  v15 = (_OWORD *)(a2 + 168);
  if (*(_QWORD *)(a1 + 192))
  {
    if (*(_QWORD *)(a2 + 192))
    {
      _s6Charts15AnyChartContentVwxx_0(a1 + 168);
      v16 = *(_OWORD *)(a2 + 184);
      *v14 = *v15;
      *(_OWORD *)(a1 + 184) = v16;
      *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
      *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
      goto LABEL_21;
    }
    sub_214253F64(a1 + 168);
  }
  v17 = *(_OWORD *)(a2 + 184);
  *v14 = *v15;
  *(_OWORD *)(a1 + 184) = v17;
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
LABEL_21:
  if (!*(_QWORD *)(a1 + 272))
  {
LABEL_25:
    v20 = *(_OWORD *)(a2 + 272);
    *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
    *(_OWORD *)(a1 + 272) = v20;
    *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
    v21 = *(_OWORD *)(a2 + 240);
    *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
    *(_OWORD *)(a1 + 240) = v21;
    return a1;
  }
  if (!*(_QWORD *)(a2 + 272))
  {
    sub_214253F98(a1 + 224);
    goto LABEL_25;
  }
  v19 = *(_BYTE *)(a2 + 224);
  v18 = a2 + 224;
  *(_BYTE *)(a1 + 224) = v19;
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(v18 + 8);
  *(_BYTE *)(a1 + 240) = *(_BYTE *)(v18 + 16);
  _s6Charts15AnyChartContentVwxx_0(a1 + 248);
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(v18 + 24);
  *(_OWORD *)(a1 + 264) = *(_OWORD *)(v18 + 40);
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(v18 + 56);
  *(_OWORD *)(a1 + 288) = *(_OWORD *)(v18 + 64);
  return a1;
}

uint64_t getEnumTagSinglePayload for VectorizedPlottables(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 304))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for VectorizedPlottables(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 296) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 304) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 304) = 0;
    if (a2)
      *(_QWORD *)(result + 24) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for VectorizedPlottables()
{
  return &type metadata for VectorizedPlottables;
}

uint64_t destroy for VectorizedPlottables.Position(uint64_t a1)
{
  return _s6Charts15AnyChartContentVwxx_0(a1 + 24);
}

uint64_t initializeWithCopy for VectorizedPlottables.Position(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 48) = v4;
  (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1 + 24, a2 + 24);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  return a1;
}

uint64_t assignWithCopy for VectorizedPlottables.Position(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  sub_2141DEA14((uint64_t *)(a1 + 24), (uint64_t *)(a2 + 24));
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  return a1;
}

uint64_t assignWithTake for VectorizedPlottables.Position(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  _s6Charts15AnyChartContentVwxx_0(a1 + 24);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  return a1;
}

uint64_t getEnumTagSinglePayload for VectorizedPlottables.Position(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 80))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 48);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for VectorizedPlottables.Position(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 48) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 80) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for VectorizedPlottables.Position()
{
  return &type metadata for VectorizedPlottables.Position;
}

uint64_t sub_2142544C8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) == 0)
  {
    v5 = (char *)&loc_214254528 + 4 * byte_214428DAC[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  v6 = *a2;
  *a1 = *a2;
  v7 = v6 + ((v4 + 16) & ~(unint64_t)v4);
  swift_retain();
  return v7;
}

uint64_t sub_214255A44(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  int v10;
  uint64_t v11;
  int *v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
      _s6Charts15AnyChartContentVwxx_0(a1);
      swift_release();
      v3 = type metadata accessor for RectanglesRenderer(0);
      v4 = a1 + *(int *)(v3 + 32);
      v5 = (int *)type metadata accessor for ChartContentRenderContext.Environment(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v5 - 1) + 48))(v4, 1, v5))
      {
        v6 = *(unsigned __int8 *)(v4 + 40);
        if (v6 != 255)
        {
          if ((v6 & 1) != 0)
            _s6Charts15AnyChartContentVwxx_0(v4);
          else
            swift_release();
        }
        swift_bridgeObjectRelease();
        v14 = *(unsigned __int8 *)(v4 + 128);
        if (v14 != 255)
        {
          if ((v14 & 1) != 0)
            swift_release();
          else
            _s6Charts15AnyChartContentVwxx_0(v4 + 88);
        }
        v17 = v4 + v5[11];
        v18 = sub_214424308();
        v19 = *(_QWORD *)(v18 - 8);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
          (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v17, v18);
        v20 = v4 + v5[14];
        v21 = sub_214424C68();
        v22 = *(_QWORD *)(v21 - 8);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
          (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v20, v21);
        swift_release();
        v23 = v4 + v5[18];
        if (*(_QWORD *)(v23 + 24))
        {
          sub_2141ED0BC(*(_QWORD *)v23, *(_QWORD *)(v23 + 8), *(_BYTE *)(v23 + 16));
          swift_bridgeObjectRelease();
          sub_2141EF1B0(*(_QWORD *)(v23 + 32), *(_QWORD *)(v23 + 40), *(_BYTE *)(v23 + 48));
        }
        v24 = v4 + v5[19];
        if (*(_QWORD *)(v24 + 24))
        {
          sub_2141ED0BC(*(_QWORD *)v24, *(_QWORD *)(v24 + 8), *(_BYTE *)(v24 + 16));
          swift_bridgeObjectRelease();
          sub_2141EF1B0(*(_QWORD *)(v24 + 32), *(_QWORD *)(v24 + 40), *(_BYTE *)(v24 + 48));
        }
        v25 = v4 + v5[20];
        if (*(_QWORD *)(v25 + 24))
        {
          sub_2141ED0BC(*(_QWORD *)v25, *(_QWORD *)(v25 + 8), *(_BYTE *)(v25 + 16));
          swift_bridgeObjectRelease();
          sub_2141EF1B0(*(_QWORD *)(v25 + 32), *(_QWORD *)(v25 + 40), *(_BYTE *)(v25 + 48));
        }
        v26 = v4 + v5[21];
        if (*(_QWORD *)(v26 + 24))
        {
          sub_2141ED0BC(*(_QWORD *)v26, *(_QWORD *)(v26 + 8), *(_BYTE *)(v26 + 16));
          swift_bridgeObjectRelease();
          sub_2141EF1B0(*(_QWORD *)(v26 + 32), *(_QWORD *)(v26 + 40), *(_BYTE *)(v26 + 48));
        }
        v27 = v4 + v5[24];
        if (*(_QWORD *)(v27 + 24))
        {
          sub_2141ED0BC(*(_QWORD *)v27, *(_QWORD *)(v27 + 8), *(_BYTE *)(v27 + 16));
          swift_bridgeObjectRelease();
        }
        v28 = v4 + v5[25];
        if (*(_QWORD *)(v28 + 24))
        {
          sub_2141ED0BC(*(_QWORD *)v28, *(_QWORD *)(v28 + 8), *(_BYTE *)(v28 + 16));
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        v29 = v4 + v5[27];
        if (*(_QWORD *)(v29 + 24))
          _s6Charts15AnyChartContentVwxx_0(v29);
      }
      v30 = a1 + *(int *)(v3 + 40);
      v31 = sub_214424308();
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 8))(v30, v31);
      break;
    case 1:
      _s6Charts15AnyChartContentVwxx_0(a1);
      swift_release();
      v7 = type metadata accessor for PointsRenderer(0);
      v8 = a1 + *(int *)(v7 + 32);
      v9 = (int *)type metadata accessor for ChartContentRenderContext.Environment(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v9 - 1) + 48))(v8, 1, v9))
      {
        v10 = *(unsigned __int8 *)(v8 + 40);
        if (v10 != 255)
        {
          if ((v10 & 1) != 0)
            _s6Charts15AnyChartContentVwxx_0(v8);
          else
            swift_release();
        }
        swift_bridgeObjectRelease();
        v15 = *(unsigned __int8 *)(v8 + 128);
        if (v15 != 255)
        {
          if ((v15 & 1) != 0)
            swift_release();
          else
            _s6Charts15AnyChartContentVwxx_0(v8 + 88);
        }
        v32 = v8 + v9[11];
        v33 = sub_214424308();
        v34 = *(_QWORD *)(v33 - 8);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
          (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v32, v33);
        v35 = v8 + v9[14];
        v36 = sub_214424C68();
        v37 = *(_QWORD *)(v36 - 8);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v35, 1, v36))
          (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v35, v36);
        swift_release();
        v38 = v8 + v9[18];
        if (*(_QWORD *)(v38 + 24))
        {
          sub_2141ED0BC(*(_QWORD *)v38, *(_QWORD *)(v38 + 8), *(_BYTE *)(v38 + 16));
          swift_bridgeObjectRelease();
          sub_2141EF1B0(*(_QWORD *)(v38 + 32), *(_QWORD *)(v38 + 40), *(_BYTE *)(v38 + 48));
        }
        v39 = v8 + v9[19];
        if (*(_QWORD *)(v39 + 24))
        {
          sub_2141ED0BC(*(_QWORD *)v39, *(_QWORD *)(v39 + 8), *(_BYTE *)(v39 + 16));
          swift_bridgeObjectRelease();
          sub_2141EF1B0(*(_QWORD *)(v39 + 32), *(_QWORD *)(v39 + 40), *(_BYTE *)(v39 + 48));
        }
        v40 = v8 + v9[20];
        if (*(_QWORD *)(v40 + 24))
        {
          sub_2141ED0BC(*(_QWORD *)v40, *(_QWORD *)(v40 + 8), *(_BYTE *)(v40 + 16));
          swift_bridgeObjectRelease();
          sub_2141EF1B0(*(_QWORD *)(v40 + 32), *(_QWORD *)(v40 + 40), *(_BYTE *)(v40 + 48));
        }
        v41 = v8 + v9[21];
        if (*(_QWORD *)(v41 + 24))
        {
          sub_2141ED0BC(*(_QWORD *)v41, *(_QWORD *)(v41 + 8), *(_BYTE *)(v41 + 16));
          swift_bridgeObjectRelease();
          sub_2141EF1B0(*(_QWORD *)(v41 + 32), *(_QWORD *)(v41 + 40), *(_BYTE *)(v41 + 48));
        }
        v42 = v8 + v9[24];
        if (*(_QWORD *)(v42 + 24))
        {
          sub_2141ED0BC(*(_QWORD *)v42, *(_QWORD *)(v42 + 8), *(_BYTE *)(v42 + 16));
          swift_bridgeObjectRelease();
        }
        v43 = v8 + v9[25];
        if (*(_QWORD *)(v43 + 24))
        {
          sub_2141ED0BC(*(_QWORD *)v43, *(_QWORD *)(v43 + 8), *(_BYTE *)(v43 + 16));
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        v44 = v8 + v9[27];
        if (*(_QWORD *)(v44 + 24))
          _s6Charts15AnyChartContentVwxx_0(v44);
      }
      result = a1 + *(int *)(v7 + 36);
      v45 = *(unsigned __int8 *)(result + 40);
      if (v45 != 255)
      {
        if ((v45 & 1) == 0)
          goto LABEL_87;
        goto LABEL_14;
      }
      break;
    case 2:
      _s6Charts15AnyChartContentVwxx_0(a1);
      swift_release();
      v11 = a1 + *(int *)(type metadata accessor for RulesRenderer(0) + 32);
      v12 = (int *)type metadata accessor for ChartContentRenderContext.Environment(0);
      result = (*(uint64_t (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v12 - 1) + 48))(v11, 1, v12);
      if (!(_DWORD)result)
      {
        v13 = *(unsigned __int8 *)(v11 + 40);
        if (v13 != 255)
        {
          if ((v13 & 1) != 0)
            _s6Charts15AnyChartContentVwxx_0(v11);
          else
            swift_release();
        }
        swift_bridgeObjectRelease();
        v16 = *(unsigned __int8 *)(v11 + 128);
        if (v16 != 255)
        {
          if ((v16 & 1) != 0)
            swift_release();
          else
            _s6Charts15AnyChartContentVwxx_0(v11 + 88);
        }
        v46 = v11 + v12[11];
        v47 = sub_214424308();
        v48 = *(_QWORD *)(v47 - 8);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v48 + 48))(v46, 1, v47))
          (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v46, v47);
        v49 = v11 + v12[14];
        v50 = sub_214424C68();
        v51 = *(_QWORD *)(v50 - 8);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v51 + 48))(v49, 1, v50))
          (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v49, v50);
        swift_release();
        v52 = v11 + v12[18];
        if (*(_QWORD *)(v52 + 24))
        {
          sub_2141ED0BC(*(_QWORD *)v52, *(_QWORD *)(v52 + 8), *(_BYTE *)(v52 + 16));
          swift_bridgeObjectRelease();
          sub_2141EF1B0(*(_QWORD *)(v52 + 32), *(_QWORD *)(v52 + 40), *(_BYTE *)(v52 + 48));
        }
        v53 = v11 + v12[19];
        if (*(_QWORD *)(v53 + 24))
        {
          sub_2141ED0BC(*(_QWORD *)v53, *(_QWORD *)(v53 + 8), *(_BYTE *)(v53 + 16));
          swift_bridgeObjectRelease();
          sub_2141EF1B0(*(_QWORD *)(v53 + 32), *(_QWORD *)(v53 + 40), *(_BYTE *)(v53 + 48));
        }
        v54 = v11 + v12[20];
        if (*(_QWORD *)(v54 + 24))
        {
          sub_2141ED0BC(*(_QWORD *)v54, *(_QWORD *)(v54 + 8), *(_BYTE *)(v54 + 16));
          swift_bridgeObjectRelease();
          sub_2141EF1B0(*(_QWORD *)(v54 + 32), *(_QWORD *)(v54 + 40), *(_BYTE *)(v54 + 48));
        }
        v55 = v11 + v12[21];
        if (*(_QWORD *)(v55 + 24))
        {
          sub_2141ED0BC(*(_QWORD *)v55, *(_QWORD *)(v55 + 8), *(_BYTE *)(v55 + 16));
          swift_bridgeObjectRelease();
          sub_2141EF1B0(*(_QWORD *)(v55 + 32), *(_QWORD *)(v55 + 40), *(_BYTE *)(v55 + 48));
        }
        v56 = v11 + v12[24];
        if (*(_QWORD *)(v56 + 24))
        {
          sub_2141ED0BC(*(_QWORD *)v56, *(_QWORD *)(v56 + 8), *(_BYTE *)(v56 + 16));
          swift_bridgeObjectRelease();
        }
        v57 = v11 + v12[25];
        if (*(_QWORD *)(v57 + 24))
        {
          sub_2141ED0BC(*(_QWORD *)v57, *(_QWORD *)(v57 + 8), *(_BYTE *)(v57 + 16));
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        result = v11 + v12[27];
        if (*(_QWORD *)(result + 24))
LABEL_87:
          result = _s6Charts15AnyChartContentVwxx_0(result);
      }
      break;
    case 3:
LABEL_14:
      result = swift_release();
      break;
    default:
      return result;
  }
  return result;
}

void sub_21425620C()
{
  char *v0;

  v0 = (char *)sub_214256264 + 4 * byte_214428DB4[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_214256264()
{
  uint64_t v0;
  uint64_t v1;
  __int128 v2;
  int *v3;
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int (*v10)(_OWORD *, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  int v13;
  __int128 v14;
  int *v15;
  __int128 v16;
  uint64_t v17;
  int v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  char v96;
  __int128 v97;
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  char v103;
  __int128 v104;
  uint64_t v105;
  _QWORD *v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  char *v111;
  uint64_t v112;
  __int128 v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  __int128 v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v123;
  int *v124;

  v2 = *(_OWORD *)(v1 + 24);
  *(_OWORD *)(v0 + 24) = v2;
  (**(void (***)(uint64_t, uint64_t))(v2 - 8))(v0, v1);
  *(_BYTE *)(v0 + 40) = *(_BYTE *)(v1 + 40);
  *(_QWORD *)(v0 + 48) = *(_QWORD *)(v1 + 48);
  *(_OWORD *)(v0 + 56) = *(_OWORD *)(v1 + 56);
  v3 = (int *)type metadata accessor for RectanglesRenderer(0);
  v4 = v3[8];
  v5 = v0;
  v6 = (_OWORD *)(v0 + v4);
  v7 = (_OWORD *)(v1 + v4);
  v8 = type metadata accessor for ChartContentRenderContext.Environment(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v9 + 48);
  swift_retain();
  if (v10(v7, 1, v8))
  {
    v11 = sub_2141D8BF8(qword_254D69B70);
    memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    v12 = v5;
  }
  else
  {
    v123 = v9;
    v124 = v3;
    v13 = *((unsigned __int8 *)v7 + 40);
    if (v13 == 255)
    {
      v14 = v7[1];
      *v6 = *v7;
      v6[1] = v14;
      *(_OWORD *)((char *)v6 + 25) = *(_OWORD *)((char *)v7 + 25);
      v15 = (int *)v8;
      v12 = v5;
    }
    else
    {
      v15 = (int *)v8;
      v12 = v5;
      if ((v13 & 1) != 0)
      {
        v16 = *(_OWORD *)((char *)v7 + 24);
        *(_OWORD *)((char *)v6 + 24) = v16;
        (**(void (***)(_OWORD *, _OWORD *))(v16 - 8))(v6, v7);
        *((_BYTE *)v6 + 40) = 1;
      }
      else
      {
        *(_QWORD *)v6 = *(_QWORD *)v7;
        *((_BYTE *)v6 + 40) = 0;
        swift_retain();
      }
    }
    *((_BYTE *)v6 + 41) = *((_BYTE *)v7 + 41);
    *((_QWORD *)v6 + 6) = *((_QWORD *)v7 + 6);
    *((_QWORD *)v6 + 7) = *((_QWORD *)v7 + 7);
    v17 = *((_QWORD *)v7 + 9);
    *((_QWORD *)v6 + 8) = *((_QWORD *)v7 + 8);
    *((_QWORD *)v6 + 9) = v17;
    *((_QWORD *)v6 + 10) = *((_QWORD *)v7 + 10);
    v18 = *((unsigned __int8 *)v7 + 128);
    swift_bridgeObjectRetain();
    if (v18 == 255)
    {
      v19 = *(_OWORD *)((char *)v7 + 104);
      *(_OWORD *)((char *)v6 + 88) = *(_OWORD *)((char *)v7 + 88);
      *(_OWORD *)((char *)v6 + 104) = v19;
      *(_OWORD *)((char *)v6 + 113) = *(_OWORD *)((char *)v7 + 113);
    }
    else if ((v18 & 1) != 0)
    {
      *((_QWORD *)v6 + 11) = *((_QWORD *)v7 + 11);
      v6[6] = v7[6];
      *((_BYTE *)v6 + 128) = 1;
      swift_retain();
    }
    else
    {
      v20 = v7[7];
      v6[7] = v20;
      (**(void (***)(uint64_t, uint64_t))(v20 - 8))((uint64_t)v6 + 88, (uint64_t)v7 + 88);
      *((_BYTE *)v6 + 128) = 0;
    }
    *(_OWORD *)((char *)v6 + 136) = *(_OWORD *)((char *)v7 + 136);
    *((_BYTE *)v6 + 152) = *((_BYTE *)v7 + 152);
    *((_QWORD *)v6 + 20) = *((_QWORD *)v7 + 20);
    *((_BYTE *)v6 + 168) = *((_BYTE *)v7 + 168);
    v21 = v7[12];
    v6[11] = v7[11];
    v6[12] = v21;
    *((_BYTE *)v6 + 208) = *((_BYTE *)v7 + 208);
    v22 = v15[11];
    v23 = (char *)v6 + v22;
    v24 = (char *)v7 + v22;
    v25 = sub_214424308();
    v26 = *(_QWORD *)(v25 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
    {
      v27 = sub_2141D8BF8(&qword_253F134C8);
      memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v23, v24, v25);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
    }
    v28 = v15[12];
    v29 = (char *)v6 + v28;
    v30 = (char *)v7 + v28;
    *(_QWORD *)v29 = *(_QWORD *)v30;
    v29[8] = v30[8];
    *(_QWORD *)((char *)v6 + v15[13]) = *(_QWORD *)((char *)v7 + v15[13]);
    v31 = v15[14];
    v32 = (char *)v6 + v31;
    v33 = (char *)v7 + v31;
    v34 = sub_214424C68();
    v35 = *(_QWORD *)(v34 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34))
    {
      v36 = sub_2141D8BF8(&qword_253F15C88);
      memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v35 + 16))(v32, v33, v34);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
    }
    v37 = v15[15];
    v38 = (char *)v6 + v37;
    v39 = (char *)v7 + v37;
    *(_QWORD *)v38 = *(_QWORD *)v39;
    *((_WORD *)v38 + 4) = *((_WORD *)v39 + 4);
    *(_QWORD *)((char *)v6 + v15[16]) = *(_QWORD *)((char *)v7 + v15[16]);
    *(_QWORD *)((char *)v6 + v15[17]) = *(_QWORD *)((char *)v7 + v15[17]);
    v40 = v15[18];
    v41 = (char *)v6 + v40;
    v42 = (char *)v7 + v40;
    v43 = *(_QWORD *)((char *)v7 + v40 + 24);
    swift_retain();
    if (v43)
    {
      v44 = *(_QWORD *)v42;
      v45 = *((_QWORD *)v42 + 1);
      v46 = v42[16];
      sub_2141DD130(*(_QWORD *)v42, v45, v46);
      *(_QWORD *)v41 = v44;
      *((_QWORD *)v41 + 1) = v45;
      v41[16] = v46;
      v47 = *((_QWORD *)v42 + 4);
      *((_QWORD *)v41 + 3) = *((_QWORD *)v42 + 3);
      v48 = *((_QWORD *)v42 + 5);
      v49 = v42[48];
      swift_bridgeObjectRetain();
      sub_2141DD140(v47, v48, v49);
      *((_QWORD *)v41 + 4) = v47;
      *((_QWORD *)v41 + 5) = v48;
      v41[48] = v49;
      *(_OWORD *)(v41 + 56) = *(_OWORD *)(v42 + 56);
    }
    else
    {
      v50 = *((_OWORD *)v42 + 3);
      *((_OWORD *)v41 + 2) = *((_OWORD *)v42 + 2);
      *((_OWORD *)v41 + 3) = v50;
      *((_QWORD *)v41 + 8) = *((_QWORD *)v42 + 8);
      v51 = *((_OWORD *)v42 + 1);
      *(_OWORD *)v41 = *(_OWORD *)v42;
      *((_OWORD *)v41 + 1) = v51;
    }
    v52 = v15[19];
    v53 = (char *)v6 + v52;
    v54 = (char *)v7 + v52;
    if (*(_QWORD *)((char *)v7 + v52 + 24))
    {
      v55 = *(_QWORD *)v54;
      v56 = *((_QWORD *)v54 + 1);
      v57 = v54[16];
      sub_2141DD130(*(_QWORD *)v54, v56, v57);
      *(_QWORD *)v53 = v55;
      *((_QWORD *)v53 + 1) = v56;
      v53[16] = v57;
      v58 = *((_QWORD *)v54 + 4);
      *((_QWORD *)v53 + 3) = *((_QWORD *)v54 + 3);
      v59 = *((_QWORD *)v54 + 5);
      v60 = v54[48];
      swift_bridgeObjectRetain();
      sub_2141DD140(v58, v59, v60);
      *((_QWORD *)v53 + 4) = v58;
      *((_QWORD *)v53 + 5) = v59;
      v53[48] = v60;
      *(_OWORD *)(v53 + 56) = *(_OWORD *)(v54 + 56);
    }
    else
    {
      v61 = *((_OWORD *)v54 + 3);
      *((_OWORD *)v53 + 2) = *((_OWORD *)v54 + 2);
      *((_OWORD *)v53 + 3) = v61;
      *((_QWORD *)v53 + 8) = *((_QWORD *)v54 + 8);
      v62 = *((_OWORD *)v54 + 1);
      *(_OWORD *)v53 = *(_OWORD *)v54;
      *((_OWORD *)v53 + 1) = v62;
    }
    v63 = v15[20];
    v64 = (char *)v6 + v63;
    v65 = (char *)v7 + v63;
    if (*(_QWORD *)((char *)v7 + v63 + 24))
    {
      v66 = *(_QWORD *)v65;
      v67 = *((_QWORD *)v65 + 1);
      v68 = v65[16];
      sub_2141DD130(*(_QWORD *)v65, v67, v68);
      *(_QWORD *)v64 = v66;
      *((_QWORD *)v64 + 1) = v67;
      v64[16] = v68;
      v69 = *((_QWORD *)v65 + 4);
      *((_QWORD *)v64 + 3) = *((_QWORD *)v65 + 3);
      v70 = *((_QWORD *)v65 + 5);
      v71 = v65[48];
      swift_bridgeObjectRetain();
      sub_2141DD140(v69, v70, v71);
      *((_QWORD *)v64 + 4) = v69;
      *((_QWORD *)v64 + 5) = v70;
      v64[48] = v71;
      *(_OWORD *)(v64 + 56) = *(_OWORD *)(v65 + 56);
    }
    else
    {
      v72 = *((_OWORD *)v65 + 3);
      *((_OWORD *)v64 + 2) = *((_OWORD *)v65 + 2);
      *((_OWORD *)v64 + 3) = v72;
      *((_QWORD *)v64 + 8) = *((_QWORD *)v65 + 8);
      v73 = *((_OWORD *)v65 + 1);
      *(_OWORD *)v64 = *(_OWORD *)v65;
      *((_OWORD *)v64 + 1) = v73;
    }
    v74 = v15[21];
    v75 = (char *)v6 + v74;
    v76 = (char *)v7 + v74;
    if (*(_QWORD *)((char *)v7 + v74 + 24))
    {
      v77 = *(_QWORD *)v76;
      v78 = *((_QWORD *)v76 + 1);
      v79 = v76[16];
      sub_2141DD130(*(_QWORD *)v76, v78, v79);
      *(_QWORD *)v75 = v77;
      *((_QWORD *)v75 + 1) = v78;
      v75[16] = v79;
      v80 = *((_QWORD *)v76 + 4);
      *((_QWORD *)v75 + 3) = *((_QWORD *)v76 + 3);
      v81 = *((_QWORD *)v76 + 5);
      v82 = v76[48];
      swift_bridgeObjectRetain();
      sub_2141DD140(v80, v81, v82);
      *((_QWORD *)v75 + 4) = v80;
      *((_QWORD *)v75 + 5) = v81;
      v75[48] = v82;
      *(_OWORD *)(v75 + 56) = *(_OWORD *)(v76 + 56);
    }
    else
    {
      v83 = *((_OWORD *)v76 + 3);
      *((_OWORD *)v75 + 2) = *((_OWORD *)v76 + 2);
      *((_OWORD *)v75 + 3) = v83;
      *((_QWORD *)v75 + 8) = *((_QWORD *)v76 + 8);
      v84 = *((_OWORD *)v76 + 1);
      *(_OWORD *)v75 = *(_OWORD *)v76;
      *((_OWORD *)v75 + 1) = v84;
    }
    v85 = v15[22];
    v86 = (char *)v6 + v85;
    v87 = (char *)v7 + v85;
    *(_OWORD *)v86 = *(_OWORD *)v87;
    *((_QWORD *)v86 + 2) = *((_QWORD *)v87 + 2);
    v88 = v15[23];
    v89 = (char *)v6 + v88;
    v90 = (char *)v7 + v88;
    *(_OWORD *)v89 = *(_OWORD *)v90;
    *((_QWORD *)v89 + 2) = *((_QWORD *)v90 + 2);
    v91 = v15[24];
    v92 = (char *)v6 + v91;
    v93 = (char *)v7 + v91;
    if (*(_QWORD *)((char *)v7 + v91 + 24))
    {
      v94 = *(_QWORD *)v93;
      v95 = *((_QWORD *)v93 + 1);
      v96 = v93[16];
      sub_2141DD130(*(_QWORD *)v93, v95, v96);
      *(_QWORD *)v92 = v94;
      *((_QWORD *)v92 + 1) = v95;
      v92[16] = v96;
      *((_QWORD *)v92 + 3) = *((_QWORD *)v93 + 3);
      swift_bridgeObjectRetain();
    }
    else
    {
      v97 = *((_OWORD *)v93 + 1);
      *(_OWORD *)v92 = *(_OWORD *)v93;
      *((_OWORD *)v92 + 1) = v97;
    }
    v98 = v15[25];
    v99 = (char *)v6 + v98;
    v100 = (char *)v7 + v98;
    if (*(_QWORD *)((char *)v7 + v98 + 24))
    {
      v101 = *(_QWORD *)v100;
      v102 = *((_QWORD *)v100 + 1);
      v103 = v100[16];
      sub_2141DD130(*(_QWORD *)v100, v102, v103);
      *(_QWORD *)v99 = v101;
      *((_QWORD *)v99 + 1) = v102;
      v99[16] = v103;
      *((_QWORD *)v99 + 3) = *((_QWORD *)v100 + 3);
      swift_bridgeObjectRetain();
    }
    else
    {
      v104 = *((_OWORD *)v100 + 1);
      *(_OWORD *)v99 = *(_OWORD *)v100;
      *((_OWORD *)v99 + 1) = v104;
    }
    v105 = v15[26];
    v106 = (_QWORD *)((char *)v6 + v105);
    v107 = (_QWORD *)((char *)v7 + v105);
    v108 = v107[1];
    *v106 = *v107;
    v106[1] = v108;
    v109 = v15[27];
    v110 = (char *)v6 + v109;
    v111 = (char *)v7 + v109;
    v112 = *((_QWORD *)v111 + 3);
    swift_bridgeObjectRetain();
    if (v112)
    {
      *((_QWORD *)v110 + 3) = v112;
      (**(void (***)(char *, char *, uint64_t))(v112 - 8))(v110, v111, v112);
    }
    else
    {
      v113 = *((_OWORD *)v111 + 1);
      *(_OWORD *)v110 = *(_OWORD *)v111;
      *((_OWORD *)v110 + 1) = v113;
    }
    v3 = v124;
    (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v123 + 56))(v6, 0, 1, v15);
  }
  v114 = v3[9];
  v115 = v12 + v114;
  v116 = v1 + v114;
  v117 = *(_OWORD *)(v116 + 16);
  *(_OWORD *)v115 = *(_OWORD *)v116;
  *(_OWORD *)(v115 + 16) = v117;
  *(_BYTE *)(v115 + 32) = *(_BYTE *)(v116 + 32);
  v118 = v3[10];
  v119 = v12 + v118;
  v120 = v1 + v118;
  v121 = sub_214424308();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v121 - 8) + 16))(v119, v120, v121);
  swift_storeEnumTagMultiPayload();
  return v12;
}

uint64_t sub_214257788(uint64_t result, uint64_t a2)
{
  char *v2;

  if (result != a2)
  {
    sub_2141DD370(result, type metadata accessor for AnyVectorizedRenderer.MarkRenderer);
    v2 = (char *)&loc_2142577F4 + 4 * byte_214428DB8[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  return result;
}

uint64_t type metadata accessor for AnyVectorizedRenderer.MarkRenderer(uint64_t a1)
{
  return sub_2141FE0D4(a1, (uint64_t *)&unk_253F130C8);
}

_OWORD *sub_214258DEC(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  __int128 v7;
  int *v8;
  uint64_t v9;
  _OWORD *v10;
  _OWORD *v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  _OWORD *v17;
  _OWORD *v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  int *v23;
  uint64_t v24;
  _OWORD *v25;
  _OWORD *v26;
  int *v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  char *v94;
  char *v95;
  __int128 v96;
  __int128 v97;
  uint64_t v98;
  char *v99;
  char *v100;
  __int128 v101;
  __int128 v102;
  uint64_t v103;
  char *v104;
  char *v105;
  __int128 v106;
  __int128 v107;
  uint64_t v108;
  char *v109;
  char *v110;
  __int128 v111;
  __int128 v112;
  uint64_t v113;
  char *v114;
  char *v115;
  uint64_t v116;
  char *v117;
  char *v118;
  uint64_t v119;
  _OWORD *v120;
  _OWORD *v121;
  __int128 v122;
  uint64_t v123;
  _OWORD *v124;
  _OWORD *v125;
  __int128 v126;
  uint64_t v127;
  _OWORD *v128;
  _OWORD *v129;
  __int128 v130;
  uint64_t v131;
  char *v132;
  char *v133;
  __int128 v134;
  uint64_t v135;
  char *v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  char *v141;
  uint64_t v142;
  char *v143;
  char *v144;
  __int128 v145;
  __int128 v146;
  uint64_t v147;
  char *v148;
  char *v149;
  __int128 v150;
  __int128 v151;
  uint64_t v152;
  char *v153;
  char *v154;
  __int128 v155;
  __int128 v156;
  uint64_t v157;
  char *v158;
  char *v159;
  __int128 v160;
  __int128 v161;
  uint64_t v162;
  char *v163;
  char *v164;
  uint64_t v165;
  char *v166;
  char *v167;
  uint64_t v168;
  _OWORD *v169;
  _OWORD *v170;
  __int128 v171;
  uint64_t v172;
  _OWORD *v173;
  _OWORD *v174;
  __int128 v175;
  uint64_t v176;
  _OWORD *v177;
  _OWORD *v178;
  __int128 v179;
  uint64_t v180;
  char *v181;
  char *v182;
  uint64_t v183;
  char *v184;
  char *v185;
  __int128 v186;
  __int128 v187;
  uint64_t v188;
  char *v189;
  char *v190;
  __int128 v191;
  __int128 v192;
  uint64_t v193;
  char *v194;
  char *v195;
  __int128 v196;
  __int128 v197;
  uint64_t v198;
  char *v199;
  char *v200;
  __int128 v201;
  __int128 v202;
  uint64_t v203;
  char *v204;
  char *v205;
  uint64_t v206;
  char *v207;
  char *v208;
  uint64_t v209;
  _OWORD *v210;
  _OWORD *v211;
  __int128 v212;
  uint64_t v213;
  _OWORD *v214;
  _OWORD *v215;
  __int128 v216;
  uint64_t v217;
  _OWORD *v218;
  _OWORD *v219;
  __int128 v220;
  uint64_t v221;
  _OWORD *v222;
  _OWORD *v223;
  __int128 v224;
  uint64_t v225;
  char *v226;
  char *v227;
  uint64_t v229;
  uint64_t v230;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 2:
      v15 = a2[1];
      *a1 = *a2;
      a1[1] = v15;
      *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
      *(_OWORD *)((char *)a1 + 40) = *(_OWORD *)((char *)a2 + 40);
      *(_OWORD *)((char *)a1 + 56) = *(_OWORD *)((char *)a2 + 56);
      v16 = *(int *)(type metadata accessor for RulesRenderer(0) + 32);
      v17 = (_OWORD *)((char *)a1 + v16);
      v18 = (_OWORD *)((char *)a2 + v16);
      v19 = (int *)type metadata accessor for ChartContentRenderContext.Environment(0);
      v20 = *((_QWORD *)v19 - 1);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v20 + 48))(v18, 1, v19))
      {
        v21 = sub_2141D8BF8(qword_254D69B70);
        memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
      }
      else
      {
        v41 = v18[1];
        *v17 = *v18;
        v17[1] = v41;
        *(_OWORD *)((char *)v17 + 25) = *(_OWORD *)((char *)v18 + 25);
        *((_BYTE *)v17 + 41) = *((_BYTE *)v18 + 41);
        v42 = v18[4];
        v17[3] = v18[3];
        v17[4] = v42;
        *((_QWORD *)v17 + 10) = *((_QWORD *)v18 + 10);
        v43 = *(_OWORD *)((char *)v18 + 88);
        v44 = *(_OWORD *)((char *)v18 + 104);
        *(_OWORD *)((char *)v17 + 113) = *(_OWORD *)((char *)v18 + 113);
        *(_OWORD *)((char *)v17 + 104) = v44;
        *(_OWORD *)((char *)v17 + 88) = v43;
        *(_OWORD *)((char *)v17 + 136) = *(_OWORD *)((char *)v18 + 136);
        *((_BYTE *)v17 + 152) = *((_BYTE *)v18 + 152);
        *((_QWORD *)v17 + 20) = *((_QWORD *)v18 + 20);
        *((_BYTE *)v17 + 168) = *((_BYTE *)v18 + 168);
        v45 = v18[12];
        v17[11] = v18[11];
        v17[12] = v45;
        *((_BYTE *)v17 + 208) = *((_BYTE *)v18 + 208);
        v46 = v19[11];
        v47 = (char *)v17 + v46;
        v48 = (char *)v18 + v46;
        v49 = sub_214424308();
        v50 = *(_QWORD *)(v49 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v50 + 48))(v48, 1, v49))
        {
          v51 = sub_2141D8BF8(&qword_253F134C8);
          memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v50 + 32))(v47, v48, v49);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v50 + 56))(v47, 0, 1, v49);
        }
        v72 = v19[12];
        v73 = (char *)v17 + v72;
        v74 = (char *)v18 + v72;
        *(_QWORD *)v73 = *(_QWORD *)v74;
        v73[8] = v74[8];
        *(_QWORD *)((char *)v17 + v19[13]) = *(_QWORD *)((char *)v18 + v19[13]);
        v75 = v19[14];
        v76 = (char *)v17 + v75;
        v77 = (char *)v18 + v75;
        v78 = sub_214424C68();
        v79 = *(_QWORD *)(v78 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v79 + 48))(v77, 1, v78))
        {
          v80 = sub_2141D8BF8(&qword_253F15C88);
          memcpy(v76, v77, *(_QWORD *)(*(_QWORD *)(v80 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v79 + 32))(v76, v77, v78);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v79 + 56))(v76, 0, 1, v78);
        }
        v139 = v19[15];
        v140 = (char *)v17 + v139;
        v141 = (char *)v18 + v139;
        *(_QWORD *)v140 = *(_QWORD *)v141;
        *((_WORD *)v140 + 4) = *((_WORD *)v141 + 4);
        *(_QWORD *)((char *)v17 + v19[16]) = *(_QWORD *)((char *)v18 + v19[16]);
        *(_QWORD *)((char *)v17 + v19[17]) = *(_QWORD *)((char *)v18 + v19[17]);
        v142 = v19[18];
        v143 = (char *)v17 + v142;
        v144 = (char *)v18 + v142;
        v145 = *((_OWORD *)v144 + 3);
        *((_OWORD *)v143 + 2) = *((_OWORD *)v144 + 2);
        *((_OWORD *)v143 + 3) = v145;
        *((_QWORD *)v143 + 8) = *((_QWORD *)v144 + 8);
        v146 = *((_OWORD *)v144 + 1);
        *(_OWORD *)v143 = *(_OWORD *)v144;
        *((_OWORD *)v143 + 1) = v146;
        v147 = v19[19];
        v148 = (char *)v17 + v147;
        v149 = (char *)v18 + v147;
        *((_QWORD *)v148 + 8) = *((_QWORD *)v149 + 8);
        v150 = *((_OWORD *)v149 + 3);
        *((_OWORD *)v148 + 2) = *((_OWORD *)v149 + 2);
        *((_OWORD *)v148 + 3) = v150;
        v151 = *((_OWORD *)v149 + 1);
        *(_OWORD *)v148 = *(_OWORD *)v149;
        *((_OWORD *)v148 + 1) = v151;
        v152 = v19[20];
        v153 = (char *)v17 + v152;
        v154 = (char *)v18 + v152;
        v155 = *((_OWORD *)v154 + 3);
        *((_OWORD *)v153 + 2) = *((_OWORD *)v154 + 2);
        *((_OWORD *)v153 + 3) = v155;
        *((_QWORD *)v153 + 8) = *((_QWORD *)v154 + 8);
        v156 = *((_OWORD *)v154 + 1);
        *(_OWORD *)v153 = *(_OWORD *)v154;
        *((_OWORD *)v153 + 1) = v156;
        v157 = v19[21];
        v158 = (char *)v17 + v157;
        v159 = (char *)v18 + v157;
        *((_QWORD *)v158 + 8) = *((_QWORD *)v159 + 8);
        v160 = *((_OWORD *)v159 + 3);
        *((_OWORD *)v158 + 2) = *((_OWORD *)v159 + 2);
        *((_OWORD *)v158 + 3) = v160;
        v161 = *((_OWORD *)v159 + 1);
        *(_OWORD *)v158 = *(_OWORD *)v159;
        *((_OWORD *)v158 + 1) = v161;
        v162 = v19[22];
        v163 = (char *)v17 + v162;
        v164 = (char *)v18 + v162;
        *(_OWORD *)v163 = *(_OWORD *)v164;
        *((_QWORD *)v163 + 2) = *((_QWORD *)v164 + 2);
        v165 = v19[23];
        v166 = (char *)v17 + v165;
        v167 = (char *)v18 + v165;
        *(_OWORD *)v166 = *(_OWORD *)v167;
        *((_QWORD *)v166 + 2) = *((_QWORD *)v167 + 2);
        v168 = v19[24];
        v169 = (_OWORD *)((char *)v17 + v168);
        v170 = (_OWORD *)((char *)v18 + v168);
        v171 = v170[1];
        *v169 = *v170;
        v169[1] = v171;
        v172 = v19[25];
        v173 = (_OWORD *)((char *)v17 + v172);
        v174 = (_OWORD *)((char *)v18 + v172);
        v175 = v174[1];
        *v173 = *v174;
        v173[1] = v175;
        *(_OWORD *)((char *)v17 + v19[26]) = *(_OWORD *)((char *)v18 + v19[26]);
        v176 = v19[27];
        v177 = (_OWORD *)((char *)v17 + v176);
        v178 = (_OWORD *)((char *)v18 + v176);
        v179 = v178[1];
        *v177 = *v178;
        v177[1] = v179;
        (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v20 + 56))(v17, 0, 1, v19);
      }
LABEL_35:
      swift_storeEnumTagMultiPayload();
      return a1;
    case 1:
      v22 = a2[1];
      *a1 = *a2;
      a1[1] = v22;
      *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
      *(_OWORD *)((char *)a1 + 40) = *(_OWORD *)((char *)a2 + 40);
      *(_OWORD *)((char *)a1 + 56) = *(_OWORD *)((char *)a2 + 56);
      v23 = (int *)type metadata accessor for PointsRenderer(0);
      v24 = v23[8];
      v25 = (_OWORD *)((char *)a1 + v24);
      v26 = (_OWORD *)((char *)a2 + v24);
      v27 = (int *)type metadata accessor for ChartContentRenderContext.Environment(0);
      v28 = *((_QWORD *)v27 - 1);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v28 + 48))(v26, 1, v27))
      {
        v29 = sub_2141D8BF8(qword_254D69B70);
        memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
      }
      else
      {
        v230 = v28;
        v52 = v26[1];
        *v25 = *v26;
        v25[1] = v52;
        *(_OWORD *)((char *)v25 + 25) = *(_OWORD *)((char *)v26 + 25);
        *((_BYTE *)v25 + 41) = *((_BYTE *)v26 + 41);
        v53 = v26[4];
        v25[3] = v26[3];
        v25[4] = v53;
        *((_QWORD *)v25 + 10) = *((_QWORD *)v26 + 10);
        v54 = *(_OWORD *)((char *)v26 + 88);
        v55 = *(_OWORD *)((char *)v26 + 104);
        *(_OWORD *)((char *)v25 + 113) = *(_OWORD *)((char *)v26 + 113);
        *(_OWORD *)((char *)v25 + 104) = v55;
        *(_OWORD *)((char *)v25 + 88) = v54;
        *(_OWORD *)((char *)v25 + 136) = *(_OWORD *)((char *)v26 + 136);
        *((_BYTE *)v25 + 152) = *((_BYTE *)v26 + 152);
        *((_QWORD *)v25 + 20) = *((_QWORD *)v26 + 20);
        *((_BYTE *)v25 + 168) = *((_BYTE *)v26 + 168);
        v56 = v26[12];
        v25[11] = v26[11];
        v25[12] = v56;
        *((_BYTE *)v25 + 208) = *((_BYTE *)v26 + 208);
        v57 = v27[11];
        v58 = (char *)v25 + v57;
        v59 = (char *)v26 + v57;
        v60 = sub_214424308();
        v61 = *(_QWORD *)(v60 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v61 + 48))(v59, 1, v60))
        {
          v62 = sub_2141D8BF8(&qword_253F134C8);
          memcpy(v58, v59, *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v61 + 32))(v58, v59, v60);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v61 + 56))(v58, 0, 1, v60);
        }
        v81 = v27[12];
        v82 = (char *)v25 + v81;
        v83 = (char *)v26 + v81;
        *(_QWORD *)v82 = *(_QWORD *)v83;
        v82[8] = v83[8];
        *(_QWORD *)((char *)v25 + v27[13]) = *(_QWORD *)((char *)v26 + v27[13]);
        v84 = v27[14];
        v85 = (char *)v25 + v84;
        v86 = (char *)v26 + v84;
        v87 = sub_214424C68();
        v88 = *(_QWORD *)(v87 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v88 + 48))(v86, 1, v87))
        {
          v89 = sub_2141D8BF8(&qword_253F15C88);
          memcpy(v85, v86, *(_QWORD *)(*(_QWORD *)(v89 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v88 + 32))(v85, v86, v87);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v88 + 56))(v85, 0, 1, v87);
        }
        v180 = v27[15];
        v181 = (char *)v25 + v180;
        v182 = (char *)v26 + v180;
        *(_QWORD *)v181 = *(_QWORD *)v182;
        *((_WORD *)v181 + 4) = *((_WORD *)v182 + 4);
        *(_QWORD *)((char *)v25 + v27[16]) = *(_QWORD *)((char *)v26 + v27[16]);
        *(_QWORD *)((char *)v25 + v27[17]) = *(_QWORD *)((char *)v26 + v27[17]);
        v183 = v27[18];
        v184 = (char *)v25 + v183;
        v185 = (char *)v26 + v183;
        v186 = *((_OWORD *)v185 + 3);
        *((_OWORD *)v184 + 2) = *((_OWORD *)v185 + 2);
        *((_OWORD *)v184 + 3) = v186;
        *((_QWORD *)v184 + 8) = *((_QWORD *)v185 + 8);
        v187 = *((_OWORD *)v185 + 1);
        *(_OWORD *)v184 = *(_OWORD *)v185;
        *((_OWORD *)v184 + 1) = v187;
        v188 = v27[19];
        v189 = (char *)v25 + v188;
        v190 = (char *)v26 + v188;
        *((_QWORD *)v189 + 8) = *((_QWORD *)v190 + 8);
        v191 = *((_OWORD *)v190 + 3);
        *((_OWORD *)v189 + 2) = *((_OWORD *)v190 + 2);
        *((_OWORD *)v189 + 3) = v191;
        v192 = *((_OWORD *)v190 + 1);
        *(_OWORD *)v189 = *(_OWORD *)v190;
        *((_OWORD *)v189 + 1) = v192;
        v193 = v27[20];
        v194 = (char *)v25 + v193;
        v195 = (char *)v26 + v193;
        v196 = *((_OWORD *)v195 + 3);
        *((_OWORD *)v194 + 2) = *((_OWORD *)v195 + 2);
        *((_OWORD *)v194 + 3) = v196;
        *((_QWORD *)v194 + 8) = *((_QWORD *)v195 + 8);
        v197 = *((_OWORD *)v195 + 1);
        *(_OWORD *)v194 = *(_OWORD *)v195;
        *((_OWORD *)v194 + 1) = v197;
        v198 = v27[21];
        v199 = (char *)v25 + v198;
        v200 = (char *)v26 + v198;
        *((_QWORD *)v199 + 8) = *((_QWORD *)v200 + 8);
        v201 = *((_OWORD *)v200 + 3);
        *((_OWORD *)v199 + 2) = *((_OWORD *)v200 + 2);
        *((_OWORD *)v199 + 3) = v201;
        v202 = *((_OWORD *)v200 + 1);
        *(_OWORD *)v199 = *(_OWORD *)v200;
        *((_OWORD *)v199 + 1) = v202;
        v203 = v27[22];
        v204 = (char *)v25 + v203;
        v205 = (char *)v26 + v203;
        *(_OWORD *)v204 = *(_OWORD *)v205;
        *((_QWORD *)v204 + 2) = *((_QWORD *)v205 + 2);
        v206 = v27[23];
        v207 = (char *)v25 + v206;
        v208 = (char *)v26 + v206;
        *(_OWORD *)v207 = *(_OWORD *)v208;
        *((_QWORD *)v207 + 2) = *((_QWORD *)v208 + 2);
        v209 = v27[24];
        v210 = (_OWORD *)((char *)v25 + v209);
        v211 = (_OWORD *)((char *)v26 + v209);
        v212 = v211[1];
        *v210 = *v211;
        v210[1] = v212;
        v213 = v27[25];
        v214 = (_OWORD *)((char *)v25 + v213);
        v215 = (_OWORD *)((char *)v26 + v213);
        v216 = v215[1];
        *v214 = *v215;
        v214[1] = v216;
        *(_OWORD *)((char *)v25 + v27[26]) = *(_OWORD *)((char *)v26 + v27[26]);
        v217 = v27[27];
        v218 = (_OWORD *)((char *)v25 + v217);
        v219 = (_OWORD *)((char *)v26 + v217);
        v220 = v219[1];
        *v218 = *v219;
        v218[1] = v220;
        (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v230 + 56))(v25, 0, 1, v27);
      }
      v221 = v23[9];
      v222 = (_OWORD *)((char *)a1 + v221);
      v223 = (_OWORD *)((char *)a2 + v221);
      v224 = v223[1];
      *v222 = *v223;
      v222[1] = v224;
      *(_OWORD *)((char *)v222 + 25) = *(_OWORD *)((char *)v223 + 25);
      v225 = v23[10];
      v226 = (char *)a1 + v225;
      v227 = (char *)a2 + v225;
      v226[16] = v227[16];
      *(_OWORD *)v226 = *(_OWORD *)v227;
      goto LABEL_35;
    case 0:
      v7 = a2[1];
      *a1 = *a2;
      a1[1] = v7;
      *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
      *(_OWORD *)((char *)a1 + 40) = *(_OWORD *)((char *)a2 + 40);
      *(_OWORD *)((char *)a1 + 56) = *(_OWORD *)((char *)a2 + 56);
      v8 = (int *)type metadata accessor for RectanglesRenderer(0);
      v9 = v8[8];
      v10 = (_OWORD *)((char *)a1 + v9);
      v11 = (_OWORD *)((char *)a2 + v9);
      v12 = (int *)type metadata accessor for ChartContentRenderContext.Environment(0);
      v13 = *((_QWORD *)v12 - 1);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v13 + 48))(v11, 1, v12))
      {
        v14 = sub_2141D8BF8(qword_254D69B70);
        memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
      }
      else
      {
        v229 = v13;
        v30 = v11[1];
        *v10 = *v11;
        v10[1] = v30;
        *(_OWORD *)((char *)v10 + 25) = *(_OWORD *)((char *)v11 + 25);
        *((_BYTE *)v10 + 41) = *((_BYTE *)v11 + 41);
        v31 = v11[4];
        v10[3] = v11[3];
        v10[4] = v31;
        *((_QWORD *)v10 + 10) = *((_QWORD *)v11 + 10);
        v32 = *(_OWORD *)((char *)v11 + 88);
        v33 = *(_OWORD *)((char *)v11 + 104);
        *(_OWORD *)((char *)v10 + 113) = *(_OWORD *)((char *)v11 + 113);
        *(_OWORD *)((char *)v10 + 104) = v33;
        *(_OWORD *)((char *)v10 + 88) = v32;
        *(_OWORD *)((char *)v10 + 136) = *(_OWORD *)((char *)v11 + 136);
        *((_BYTE *)v10 + 152) = *((_BYTE *)v11 + 152);
        *((_QWORD *)v10 + 20) = *((_QWORD *)v11 + 20);
        *((_BYTE *)v10 + 168) = *((_BYTE *)v11 + 168);
        v34 = v11[12];
        v10[11] = v11[11];
        v10[12] = v34;
        *((_BYTE *)v10 + 208) = *((_BYTE *)v11 + 208);
        v35 = v12[11];
        v36 = (char *)v10 + v35;
        v37 = (char *)v11 + v35;
        v38 = sub_214424308();
        v39 = *(_QWORD *)(v38 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v37, 1, v38))
        {
          v40 = sub_2141D8BF8(&qword_253F134C8);
          memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v36, v37, v38);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v38);
        }
        v63 = v12[12];
        v64 = (char *)v10 + v63;
        v65 = (char *)v11 + v63;
        *(_QWORD *)v64 = *(_QWORD *)v65;
        v64[8] = v65[8];
        *(_QWORD *)((char *)v10 + v12[13]) = *(_QWORD *)((char *)v11 + v12[13]);
        v66 = v12[14];
        v67 = (char *)v10 + v66;
        v68 = (char *)v11 + v66;
        v69 = sub_214424C68();
        v70 = *(_QWORD *)(v69 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v70 + 48))(v68, 1, v69))
        {
          v71 = sub_2141D8BF8(&qword_253F15C88);
          memcpy(v67, v68, *(_QWORD *)(*(_QWORD *)(v71 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v70 + 32))(v67, v68, v69);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v70 + 56))(v67, 0, 1, v69);
        }
        v90 = v12[15];
        v91 = (char *)v10 + v90;
        v92 = (char *)v11 + v90;
        *(_QWORD *)v91 = *(_QWORD *)v92;
        *((_WORD *)v91 + 4) = *((_WORD *)v92 + 4);
        *(_QWORD *)((char *)v10 + v12[16]) = *(_QWORD *)((char *)v11 + v12[16]);
        *(_QWORD *)((char *)v10 + v12[17]) = *(_QWORD *)((char *)v11 + v12[17]);
        v93 = v12[18];
        v94 = (char *)v10 + v93;
        v95 = (char *)v11 + v93;
        v96 = *((_OWORD *)v95 + 3);
        *((_OWORD *)v94 + 2) = *((_OWORD *)v95 + 2);
        *((_OWORD *)v94 + 3) = v96;
        *((_QWORD *)v94 + 8) = *((_QWORD *)v95 + 8);
        v97 = *((_OWORD *)v95 + 1);
        *(_OWORD *)v94 = *(_OWORD *)v95;
        *((_OWORD *)v94 + 1) = v97;
        v98 = v12[19];
        v99 = (char *)v10 + v98;
        v100 = (char *)v11 + v98;
        *((_QWORD *)v99 + 8) = *((_QWORD *)v100 + 8);
        v101 = *((_OWORD *)v100 + 3);
        *((_OWORD *)v99 + 2) = *((_OWORD *)v100 + 2);
        *((_OWORD *)v99 + 3) = v101;
        v102 = *((_OWORD *)v100 + 1);
        *(_OWORD *)v99 = *(_OWORD *)v100;
        *((_OWORD *)v99 + 1) = v102;
        v103 = v12[20];
        v104 = (char *)v10 + v103;
        v105 = (char *)v11 + v103;
        v106 = *((_OWORD *)v105 + 3);
        *((_OWORD *)v104 + 2) = *((_OWORD *)v105 + 2);
        *((_OWORD *)v104 + 3) = v106;
        *((_QWORD *)v104 + 8) = *((_QWORD *)v105 + 8);
        v107 = *((_OWORD *)v105 + 1);
        *(_OWORD *)v104 = *(_OWORD *)v105;
        *((_OWORD *)v104 + 1) = v107;
        v108 = v12[21];
        v109 = (char *)v10 + v108;
        v110 = (char *)v11 + v108;
        *((_QWORD *)v109 + 8) = *((_QWORD *)v110 + 8);
        v111 = *((_OWORD *)v110 + 3);
        *((_OWORD *)v109 + 2) = *((_OWORD *)v110 + 2);
        *((_OWORD *)v109 + 3) = v111;
        v112 = *((_OWORD *)v110 + 1);
        *(_OWORD *)v109 = *(_OWORD *)v110;
        *((_OWORD *)v109 + 1) = v112;
        v113 = v12[22];
        v114 = (char *)v10 + v113;
        v115 = (char *)v11 + v113;
        *(_OWORD *)v114 = *(_OWORD *)v115;
        *((_QWORD *)v114 + 2) = *((_QWORD *)v115 + 2);
        v116 = v12[23];
        v117 = (char *)v10 + v116;
        v118 = (char *)v11 + v116;
        *(_OWORD *)v117 = *(_OWORD *)v118;
        *((_QWORD *)v117 + 2) = *((_QWORD *)v118 + 2);
        v119 = v12[24];
        v120 = (_OWORD *)((char *)v10 + v119);
        v121 = (_OWORD *)((char *)v11 + v119);
        v122 = v121[1];
        *v120 = *v121;
        v120[1] = v122;
        v123 = v12[25];
        v124 = (_OWORD *)((char *)v10 + v123);
        v125 = (_OWORD *)((char *)v11 + v123);
        v126 = v125[1];
        *v124 = *v125;
        v124[1] = v126;
        *(_OWORD *)((char *)v10 + v12[26]) = *(_OWORD *)((char *)v11 + v12[26]);
        v127 = v12[27];
        v128 = (_OWORD *)((char *)v10 + v127);
        v129 = (_OWORD *)((char *)v11 + v127);
        v130 = v129[1];
        *v128 = *v129;
        v128[1] = v130;
        (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v229 + 56))(v10, 0, 1, v12);
      }
      v131 = v8[9];
      v132 = (char *)a1 + v131;
      v133 = (char *)a2 + v131;
      v134 = *((_OWORD *)v133 + 1);
      *(_OWORD *)v132 = *(_OWORD *)v133;
      *((_OWORD *)v132 + 1) = v134;
      v132[32] = v133[32];
      v135 = v8[10];
      v136 = (char *)a1 + v135;
      v137 = (char *)a2 + v135;
      v138 = sub_214424308();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v138 - 8) + 32))(v136, v137, v138);
      goto LABEL_35;
  }
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  return a1;
}

_OWORD *sub_2142599B8(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  __int128 v7;
  int *v8;
  uint64_t v9;
  _OWORD *v10;
  _OWORD *v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  _OWORD *v17;
  _OWORD *v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  int *v23;
  uint64_t v24;
  _OWORD *v25;
  _OWORD *v26;
  int *v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  char *v94;
  char *v95;
  __int128 v96;
  __int128 v97;
  uint64_t v98;
  char *v99;
  char *v100;
  __int128 v101;
  __int128 v102;
  uint64_t v103;
  char *v104;
  char *v105;
  __int128 v106;
  __int128 v107;
  uint64_t v108;
  char *v109;
  char *v110;
  __int128 v111;
  __int128 v112;
  uint64_t v113;
  char *v114;
  char *v115;
  uint64_t v116;
  char *v117;
  char *v118;
  uint64_t v119;
  _OWORD *v120;
  _OWORD *v121;
  __int128 v122;
  uint64_t v123;
  _OWORD *v124;
  _OWORD *v125;
  __int128 v126;
  uint64_t v127;
  _OWORD *v128;
  _OWORD *v129;
  __int128 v130;
  uint64_t v131;
  char *v132;
  char *v133;
  __int128 v134;
  uint64_t v135;
  char *v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  char *v141;
  uint64_t v142;
  char *v143;
  char *v144;
  __int128 v145;
  __int128 v146;
  uint64_t v147;
  char *v148;
  char *v149;
  __int128 v150;
  __int128 v151;
  uint64_t v152;
  char *v153;
  char *v154;
  __int128 v155;
  __int128 v156;
  uint64_t v157;
  char *v158;
  char *v159;
  __int128 v160;
  __int128 v161;
  uint64_t v162;
  char *v163;
  char *v164;
  uint64_t v165;
  char *v166;
  char *v167;
  uint64_t v168;
  _OWORD *v169;
  _OWORD *v170;
  __int128 v171;
  uint64_t v172;
  _OWORD *v173;
  _OWORD *v174;
  __int128 v175;
  uint64_t v176;
  _OWORD *v177;
  _OWORD *v178;
  __int128 v179;
  uint64_t v180;
  char *v181;
  char *v182;
  uint64_t v183;
  char *v184;
  char *v185;
  __int128 v186;
  __int128 v187;
  uint64_t v188;
  char *v189;
  char *v190;
  __int128 v191;
  __int128 v192;
  uint64_t v193;
  char *v194;
  char *v195;
  __int128 v196;
  __int128 v197;
  uint64_t v198;
  char *v199;
  char *v200;
  __int128 v201;
  __int128 v202;
  uint64_t v203;
  char *v204;
  char *v205;
  uint64_t v206;
  char *v207;
  char *v208;
  uint64_t v209;
  _OWORD *v210;
  _OWORD *v211;
  __int128 v212;
  uint64_t v213;
  _OWORD *v214;
  _OWORD *v215;
  __int128 v216;
  uint64_t v217;
  _OWORD *v218;
  _OWORD *v219;
  __int128 v220;
  uint64_t v221;
  _OWORD *v222;
  _OWORD *v223;
  __int128 v224;
  uint64_t v225;
  char *v226;
  char *v227;
  uint64_t v229;
  uint64_t v230;
  int *v231;
  int *v232;

  if (a1 != a2)
  {
    sub_2141DD370((uint64_t)a1, type metadata accessor for AnyVectorizedRenderer.MarkRenderer);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    switch(EnumCaseMultiPayload)
    {
      case 2:
        v15 = a2[1];
        *a1 = *a2;
        a1[1] = v15;
        *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
        *(_OWORD *)((char *)a1 + 40) = *(_OWORD *)((char *)a2 + 40);
        *(_OWORD *)((char *)a1 + 56) = *(_OWORD *)((char *)a2 + 56);
        v16 = *(int *)(type metadata accessor for RulesRenderer(0) + 32);
        v17 = (_OWORD *)((char *)a1 + v16);
        v18 = (_OWORD *)((char *)a2 + v16);
        v19 = (int *)type metadata accessor for ChartContentRenderContext.Environment(0);
        v20 = *((_QWORD *)v19 - 1);
        if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v20 + 48))(v18, 1, v19))
        {
          v21 = sub_2141D8BF8(qword_254D69B70);
          memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
        }
        else
        {
          v41 = v18[1];
          *v17 = *v18;
          v17[1] = v41;
          *(_OWORD *)((char *)v17 + 25) = *(_OWORD *)((char *)v18 + 25);
          *((_BYTE *)v17 + 41) = *((_BYTE *)v18 + 41);
          v42 = v18[4];
          v17[3] = v18[3];
          v17[4] = v42;
          *((_QWORD *)v17 + 10) = *((_QWORD *)v18 + 10);
          v43 = *(_OWORD *)((char *)v18 + 88);
          v44 = *(_OWORD *)((char *)v18 + 104);
          *(_OWORD *)((char *)v17 + 113) = *(_OWORD *)((char *)v18 + 113);
          *(_OWORD *)((char *)v17 + 104) = v44;
          *(_OWORD *)((char *)v17 + 88) = v43;
          *(_OWORD *)((char *)v17 + 136) = *(_OWORD *)((char *)v18 + 136);
          *((_BYTE *)v17 + 152) = *((_BYTE *)v18 + 152);
          *((_QWORD *)v17 + 20) = *((_QWORD *)v18 + 20);
          *((_BYTE *)v17 + 168) = *((_BYTE *)v18 + 168);
          v45 = v18[12];
          v17[11] = v18[11];
          v17[12] = v45;
          *((_BYTE *)v17 + 208) = *((_BYTE *)v18 + 208);
          v46 = v19[11];
          v47 = (char *)v17 + v46;
          v48 = (char *)v18 + v46;
          v49 = sub_214424308();
          v50 = *(_QWORD *)(v49 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v50 + 48))(v48, 1, v49))
          {
            v51 = sub_2141D8BF8(&qword_253F134C8);
            memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v50 + 32))(v47, v48, v49);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v50 + 56))(v47, 0, 1, v49);
          }
          v72 = v19[12];
          v73 = (char *)v17 + v72;
          v74 = (char *)v18 + v72;
          *(_QWORD *)v73 = *(_QWORD *)v74;
          v73[8] = v74[8];
          *(_QWORD *)((char *)v17 + v19[13]) = *(_QWORD *)((char *)v18 + v19[13]);
          v75 = v19[14];
          v76 = (char *)v17 + v75;
          v77 = (char *)v18 + v75;
          v78 = sub_214424C68();
          v79 = *(_QWORD *)(v78 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v79 + 48))(v77, 1, v78))
          {
            v80 = sub_2141D8BF8(&qword_253F15C88);
            memcpy(v76, v77, *(_QWORD *)(*(_QWORD *)(v80 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v79 + 32))(v76, v77, v78);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v79 + 56))(v76, 0, 1, v78);
          }
          v139 = v19[15];
          v140 = (char *)v17 + v139;
          v141 = (char *)v18 + v139;
          *(_QWORD *)v140 = *(_QWORD *)v141;
          *((_WORD *)v140 + 4) = *((_WORD *)v141 + 4);
          *(_QWORD *)((char *)v17 + v19[16]) = *(_QWORD *)((char *)v18 + v19[16]);
          *(_QWORD *)((char *)v17 + v19[17]) = *(_QWORD *)((char *)v18 + v19[17]);
          v142 = v19[18];
          v143 = (char *)v17 + v142;
          v144 = (char *)v18 + v142;
          v145 = *((_OWORD *)v144 + 3);
          *((_OWORD *)v143 + 2) = *((_OWORD *)v144 + 2);
          *((_OWORD *)v143 + 3) = v145;
          *((_QWORD *)v143 + 8) = *((_QWORD *)v144 + 8);
          v146 = *((_OWORD *)v144 + 1);
          *(_OWORD *)v143 = *(_OWORD *)v144;
          *((_OWORD *)v143 + 1) = v146;
          v147 = v19[19];
          v148 = (char *)v17 + v147;
          v149 = (char *)v18 + v147;
          *((_QWORD *)v148 + 8) = *((_QWORD *)v149 + 8);
          v150 = *((_OWORD *)v149 + 3);
          *((_OWORD *)v148 + 2) = *((_OWORD *)v149 + 2);
          *((_OWORD *)v148 + 3) = v150;
          v151 = *((_OWORD *)v149 + 1);
          *(_OWORD *)v148 = *(_OWORD *)v149;
          *((_OWORD *)v148 + 1) = v151;
          v152 = v19[20];
          v153 = (char *)v17 + v152;
          v154 = (char *)v18 + v152;
          v155 = *((_OWORD *)v154 + 3);
          *((_OWORD *)v153 + 2) = *((_OWORD *)v154 + 2);
          *((_OWORD *)v153 + 3) = v155;
          *((_QWORD *)v153 + 8) = *((_QWORD *)v154 + 8);
          v156 = *((_OWORD *)v154 + 1);
          *(_OWORD *)v153 = *(_OWORD *)v154;
          *((_OWORD *)v153 + 1) = v156;
          v157 = v19[21];
          v158 = (char *)v17 + v157;
          v159 = (char *)v18 + v157;
          *((_QWORD *)v158 + 8) = *((_QWORD *)v159 + 8);
          v160 = *((_OWORD *)v159 + 3);
          *((_OWORD *)v158 + 2) = *((_OWORD *)v159 + 2);
          *((_OWORD *)v158 + 3) = v160;
          v161 = *((_OWORD *)v159 + 1);
          *(_OWORD *)v158 = *(_OWORD *)v159;
          *((_OWORD *)v158 + 1) = v161;
          v162 = v19[22];
          v163 = (char *)v17 + v162;
          v164 = (char *)v18 + v162;
          *(_OWORD *)v163 = *(_OWORD *)v164;
          *((_QWORD *)v163 + 2) = *((_QWORD *)v164 + 2);
          v165 = v19[23];
          v166 = (char *)v17 + v165;
          v167 = (char *)v18 + v165;
          *(_OWORD *)v166 = *(_OWORD *)v167;
          *((_QWORD *)v166 + 2) = *((_QWORD *)v167 + 2);
          v168 = v19[24];
          v169 = (_OWORD *)((char *)v17 + v168);
          v170 = (_OWORD *)((char *)v18 + v168);
          v171 = v170[1];
          *v169 = *v170;
          v169[1] = v171;
          v172 = v19[25];
          v173 = (_OWORD *)((char *)v17 + v172);
          v174 = (_OWORD *)((char *)v18 + v172);
          v175 = v174[1];
          *v173 = *v174;
          v173[1] = v175;
          *(_OWORD *)((char *)v17 + v19[26]) = *(_OWORD *)((char *)v18 + v19[26]);
          v176 = v19[27];
          v177 = (_OWORD *)((char *)v17 + v176);
          v178 = (_OWORD *)((char *)v18 + v176);
          v179 = v178[1];
          *v177 = *v178;
          v177[1] = v179;
          (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v20 + 56))(v17, 0, 1, v19);
        }
LABEL_36:
        swift_storeEnumTagMultiPayload();
        return a1;
      case 1:
        v22 = a2[1];
        *a1 = *a2;
        a1[1] = v22;
        *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
        *(_OWORD *)((char *)a1 + 40) = *(_OWORD *)((char *)a2 + 40);
        *(_OWORD *)((char *)a1 + 56) = *(_OWORD *)((char *)a2 + 56);
        v23 = (int *)type metadata accessor for PointsRenderer(0);
        v24 = v23[8];
        v25 = (_OWORD *)((char *)a1 + v24);
        v26 = (_OWORD *)((char *)a2 + v24);
        v27 = (int *)type metadata accessor for ChartContentRenderContext.Environment(0);
        v28 = *((_QWORD *)v27 - 1);
        if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v28 + 48))(v26, 1, v27))
        {
          v29 = sub_2141D8BF8(qword_254D69B70);
          memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
        }
        else
        {
          v230 = v28;
          v232 = v23;
          v52 = v26[1];
          *v25 = *v26;
          v25[1] = v52;
          *(_OWORD *)((char *)v25 + 25) = *(_OWORD *)((char *)v26 + 25);
          *((_BYTE *)v25 + 41) = *((_BYTE *)v26 + 41);
          v53 = v26[4];
          v25[3] = v26[3];
          v25[4] = v53;
          *((_QWORD *)v25 + 10) = *((_QWORD *)v26 + 10);
          v54 = *(_OWORD *)((char *)v26 + 88);
          v55 = *(_OWORD *)((char *)v26 + 104);
          *(_OWORD *)((char *)v25 + 113) = *(_OWORD *)((char *)v26 + 113);
          *(_OWORD *)((char *)v25 + 104) = v55;
          *(_OWORD *)((char *)v25 + 88) = v54;
          *(_OWORD *)((char *)v25 + 136) = *(_OWORD *)((char *)v26 + 136);
          *((_BYTE *)v25 + 152) = *((_BYTE *)v26 + 152);
          *((_QWORD *)v25 + 20) = *((_QWORD *)v26 + 20);
          *((_BYTE *)v25 + 168) = *((_BYTE *)v26 + 168);
          v56 = v26[12];
          v25[11] = v26[11];
          v25[12] = v56;
          *((_BYTE *)v25 + 208) = *((_BYTE *)v26 + 208);
          v57 = v27[11];
          v58 = (char *)v25 + v57;
          v59 = (char *)v26 + v57;
          v60 = sub_214424308();
          v61 = *(_QWORD *)(v60 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v61 + 48))(v59, 1, v60))
          {
            v62 = sub_2141D8BF8(&qword_253F134C8);
            memcpy(v58, v59, *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v61 + 32))(v58, v59, v60);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v61 + 56))(v58, 0, 1, v60);
          }
          v81 = v27[12];
          v82 = (char *)v25 + v81;
          v83 = (char *)v26 + v81;
          *(_QWORD *)v82 = *(_QWORD *)v83;
          v82[8] = v83[8];
          *(_QWORD *)((char *)v25 + v27[13]) = *(_QWORD *)((char *)v26 + v27[13]);
          v84 = v27[14];
          v85 = (char *)v25 + v84;
          v86 = (char *)v26 + v84;
          v87 = sub_214424C68();
          v88 = *(_QWORD *)(v87 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v88 + 48))(v86, 1, v87))
          {
            v89 = sub_2141D8BF8(&qword_253F15C88);
            memcpy(v85, v86, *(_QWORD *)(*(_QWORD *)(v89 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v88 + 32))(v85, v86, v87);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v88 + 56))(v85, 0, 1, v87);
          }
          v23 = v232;
          v180 = v27[15];
          v181 = (char *)v25 + v180;
          v182 = (char *)v26 + v180;
          *(_QWORD *)v181 = *(_QWORD *)v182;
          *((_WORD *)v181 + 4) = *((_WORD *)v182 + 4);
          *(_QWORD *)((char *)v25 + v27[16]) = *(_QWORD *)((char *)v26 + v27[16]);
          *(_QWORD *)((char *)v25 + v27[17]) = *(_QWORD *)((char *)v26 + v27[17]);
          v183 = v27[18];
          v184 = (char *)v25 + v183;
          v185 = (char *)v26 + v183;
          v186 = *((_OWORD *)v185 + 3);
          *((_OWORD *)v184 + 2) = *((_OWORD *)v185 + 2);
          *((_OWORD *)v184 + 3) = v186;
          *((_QWORD *)v184 + 8) = *((_QWORD *)v185 + 8);
          v187 = *((_OWORD *)v185 + 1);
          *(_OWORD *)v184 = *(_OWORD *)v185;
          *((_OWORD *)v184 + 1) = v187;
          v188 = v27[19];
          v189 = (char *)v25 + v188;
          v190 = (char *)v26 + v188;
          *((_QWORD *)v189 + 8) = *((_QWORD *)v190 + 8);
          v191 = *((_OWORD *)v190 + 3);
          *((_OWORD *)v189 + 2) = *((_OWORD *)v190 + 2);
          *((_OWORD *)v189 + 3) = v191;
          v192 = *((_OWORD *)v190 + 1);
          *(_OWORD *)v189 = *(_OWORD *)v190;
          *((_OWORD *)v189 + 1) = v192;
          v193 = v27[20];
          v194 = (char *)v25 + v193;
          v195 = (char *)v26 + v193;
          v196 = *((_OWORD *)v195 + 3);
          *((_OWORD *)v194 + 2) = *((_OWORD *)v195 + 2);
          *((_OWORD *)v194 + 3) = v196;
          *((_QWORD *)v194 + 8) = *((_QWORD *)v195 + 8);
          v197 = *((_OWORD *)v195 + 1);
          *(_OWORD *)v194 = *(_OWORD *)v195;
          *((_OWORD *)v194 + 1) = v197;
          v198 = v27[21];
          v199 = (char *)v25 + v198;
          v200 = (char *)v26 + v198;
          *((_QWORD *)v199 + 8) = *((_QWORD *)v200 + 8);
          v201 = *((_OWORD *)v200 + 3);
          *((_OWORD *)v199 + 2) = *((_OWORD *)v200 + 2);
          *((_OWORD *)v199 + 3) = v201;
          v202 = *((_OWORD *)v200 + 1);
          *(_OWORD *)v199 = *(_OWORD *)v200;
          *((_OWORD *)v199 + 1) = v202;
          v203 = v27[22];
          v204 = (char *)v25 + v203;
          v205 = (char *)v26 + v203;
          *(_OWORD *)v204 = *(_OWORD *)v205;
          *((_QWORD *)v204 + 2) = *((_QWORD *)v205 + 2);
          v206 = v27[23];
          v207 = (char *)v25 + v206;
          v208 = (char *)v26 + v206;
          *(_OWORD *)v207 = *(_OWORD *)v208;
          *((_QWORD *)v207 + 2) = *((_QWORD *)v208 + 2);
          v209 = v27[24];
          v210 = (_OWORD *)((char *)v25 + v209);
          v211 = (_OWORD *)((char *)v26 + v209);
          v212 = v211[1];
          *v210 = *v211;
          v210[1] = v212;
          v213 = v27[25];
          v214 = (_OWORD *)((char *)v25 + v213);
          v215 = (_OWORD *)((char *)v26 + v213);
          v216 = v215[1];
          *v214 = *v215;
          v214[1] = v216;
          *(_OWORD *)((char *)v25 + v27[26]) = *(_OWORD *)((char *)v26 + v27[26]);
          v217 = v27[27];
          v218 = (_OWORD *)((char *)v25 + v217);
          v219 = (_OWORD *)((char *)v26 + v217);
          v220 = v219[1];
          *v218 = *v219;
          v218[1] = v220;
          (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v230 + 56))(v25, 0, 1, v27);
        }
        v221 = v23[9];
        v222 = (_OWORD *)((char *)a1 + v221);
        v223 = (_OWORD *)((char *)a2 + v221);
        v224 = v223[1];
        *v222 = *v223;
        v222[1] = v224;
        *(_OWORD *)((char *)v222 + 25) = *(_OWORD *)((char *)v223 + 25);
        v225 = v23[10];
        v226 = (char *)a1 + v225;
        v227 = (char *)a2 + v225;
        v226[16] = v227[16];
        *(_OWORD *)v226 = *(_OWORD *)v227;
        goto LABEL_36;
      case 0:
        v7 = a2[1];
        *a1 = *a2;
        a1[1] = v7;
        *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
        *(_OWORD *)((char *)a1 + 40) = *(_OWORD *)((char *)a2 + 40);
        *(_OWORD *)((char *)a1 + 56) = *(_OWORD *)((char *)a2 + 56);
        v8 = (int *)type metadata accessor for RectanglesRenderer(0);
        v9 = v8[8];
        v10 = (_OWORD *)((char *)a1 + v9);
        v11 = (_OWORD *)((char *)a2 + v9);
        v12 = (int *)type metadata accessor for ChartContentRenderContext.Environment(0);
        v13 = *((_QWORD *)v12 - 1);
        if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v13 + 48))(v11, 1, v12))
        {
          v14 = sub_2141D8BF8(qword_254D69B70);
          memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
        }
        else
        {
          v229 = v13;
          v231 = v8;
          v30 = v11[1];
          *v10 = *v11;
          v10[1] = v30;
          *(_OWORD *)((char *)v10 + 25) = *(_OWORD *)((char *)v11 + 25);
          *((_BYTE *)v10 + 41) = *((_BYTE *)v11 + 41);
          v31 = v11[4];
          v10[3] = v11[3];
          v10[4] = v31;
          *((_QWORD *)v10 + 10) = *((_QWORD *)v11 + 10);
          v32 = *(_OWORD *)((char *)v11 + 88);
          v33 = *(_OWORD *)((char *)v11 + 104);
          *(_OWORD *)((char *)v10 + 113) = *(_OWORD *)((char *)v11 + 113);
          *(_OWORD *)((char *)v10 + 104) = v33;
          *(_OWORD *)((char *)v10 + 88) = v32;
          *(_OWORD *)((char *)v10 + 136) = *(_OWORD *)((char *)v11 + 136);
          *((_BYTE *)v10 + 152) = *((_BYTE *)v11 + 152);
          *((_QWORD *)v10 + 20) = *((_QWORD *)v11 + 20);
          *((_BYTE *)v10 + 168) = *((_BYTE *)v11 + 168);
          v34 = v11[12];
          v10[11] = v11[11];
          v10[12] = v34;
          *((_BYTE *)v10 + 208) = *((_BYTE *)v11 + 208);
          v35 = v12[11];
          v36 = (char *)v10 + v35;
          v37 = (char *)v11 + v35;
          v38 = sub_214424308();
          v39 = *(_QWORD *)(v38 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v37, 1, v38))
          {
            v40 = sub_2141D8BF8(&qword_253F134C8);
            memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v36, v37, v38);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v38);
          }
          v63 = v12[12];
          v64 = (char *)v10 + v63;
          v65 = (char *)v11 + v63;
          *(_QWORD *)v64 = *(_QWORD *)v65;
          v64[8] = v65[8];
          *(_QWORD *)((char *)v10 + v12[13]) = *(_QWORD *)((char *)v11 + v12[13]);
          v66 = v12[14];
          v67 = (char *)v10 + v66;
          v68 = (char *)v11 + v66;
          v69 = sub_214424C68();
          v70 = *(_QWORD *)(v69 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v70 + 48))(v68, 1, v69))
          {
            v71 = sub_2141D8BF8(&qword_253F15C88);
            memcpy(v67, v68, *(_QWORD *)(*(_QWORD *)(v71 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v70 + 32))(v67, v68, v69);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v70 + 56))(v67, 0, 1, v69);
          }
          v8 = v231;
          v90 = v12[15];
          v91 = (char *)v10 + v90;
          v92 = (char *)v11 + v90;
          *(_QWORD *)v91 = *(_QWORD *)v92;
          *((_WORD *)v91 + 4) = *((_WORD *)v92 + 4);
          *(_QWORD *)((char *)v10 + v12[16]) = *(_QWORD *)((char *)v11 + v12[16]);
          *(_QWORD *)((char *)v10 + v12[17]) = *(_QWORD *)((char *)v11 + v12[17]);
          v93 = v12[18];
          v94 = (char *)v10 + v93;
          v95 = (char *)v11 + v93;
          v96 = *((_OWORD *)v95 + 3);
          *((_OWORD *)v94 + 2) = *((_OWORD *)v95 + 2);
          *((_OWORD *)v94 + 3) = v96;
          *((_QWORD *)v94 + 8) = *((_QWORD *)v95 + 8);
          v97 = *((_OWORD *)v95 + 1);
          *(_OWORD *)v94 = *(_OWORD *)v95;
          *((_OWORD *)v94 + 1) = v97;
          v98 = v12[19];
          v99 = (char *)v10 + v98;
          v100 = (char *)v11 + v98;
          *((_QWORD *)v99 + 8) = *((_QWORD *)v100 + 8);
          v101 = *((_OWORD *)v100 + 3);
          *((_OWORD *)v99 + 2) = *((_OWORD *)v100 + 2);
          *((_OWORD *)v99 + 3) = v101;
          v102 = *((_OWORD *)v100 + 1);
          *(_OWORD *)v99 = *(_OWORD *)v100;
          *((_OWORD *)v99 + 1) = v102;
          v103 = v12[20];
          v104 = (char *)v10 + v103;
          v105 = (char *)v11 + v103;
          v106 = *((_OWORD *)v105 + 3);
          *((_OWORD *)v104 + 2) = *((_OWORD *)v105 + 2);
          *((_OWORD *)v104 + 3) = v106;
          *((_QWORD *)v104 + 8) = *((_QWORD *)v105 + 8);
          v107 = *((_OWORD *)v105 + 1);
          *(_OWORD *)v104 = *(_OWORD *)v105;
          *((_OWORD *)v104 + 1) = v107;
          v108 = v12[21];
          v109 = (char *)v10 + v108;
          v110 = (char *)v11 + v108;
          *((_QWORD *)v109 + 8) = *((_QWORD *)v110 + 8);
          v111 = *((_OWORD *)v110 + 3);
          *((_OWORD *)v109 + 2) = *((_OWORD *)v110 + 2);
          *((_OWORD *)v109 + 3) = v111;
          v112 = *((_OWORD *)v110 + 1);
          *(_OWORD *)v109 = *(_OWORD *)v110;
          *((_OWORD *)v109 + 1) = v112;
          v113 = v12[22];
          v114 = (char *)v10 + v113;
          v115 = (char *)v11 + v113;
          *(_OWORD *)v114 = *(_OWORD *)v115;
          *((_QWORD *)v114 + 2) = *((_QWORD *)v115 + 2);
          v116 = v12[23];
          v117 = (char *)v10 + v116;
          v118 = (char *)v11 + v116;
          *(_OWORD *)v117 = *(_OWORD *)v118;
          *((_QWORD *)v117 + 2) = *((_QWORD *)v118 + 2);
          v119 = v12[24];
          v120 = (_OWORD *)((char *)v10 + v119);
          v121 = (_OWORD *)((char *)v11 + v119);
          v122 = v121[1];
          *v120 = *v121;
          v120[1] = v122;
          v123 = v12[25];
          v124 = (_OWORD *)((char *)v10 + v123);
          v125 = (_OWORD *)((char *)v11 + v123);
          v126 = v125[1];
          *v124 = *v125;
          v124[1] = v126;
          *(_OWORD *)((char *)v10 + v12[26]) = *(_OWORD *)((char *)v11 + v12[26]);
          v127 = v12[27];
          v128 = (_OWORD *)((char *)v10 + v127);
          v129 = (_OWORD *)((char *)v11 + v127);
          v130 = v129[1];
          *v128 = *v129;
          v128[1] = v130;
          (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v229 + 56))(v10, 0, 1, v12);
        }
        v131 = v8[9];
        v132 = (char *)a1 + v131;
        v133 = (char *)a2 + v131;
        v134 = *((_OWORD *)v133 + 1);
        *(_OWORD *)v132 = *(_OWORD *)v133;
        *((_OWORD *)v132 + 1) = v134;
        v132[32] = v133[32];
        v135 = v8[10];
        v136 = (char *)a1 + v135;
        v137 = (char *)a2 + v135;
        v138 = sub_214424308();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v138 - 8) + 32))(v136, v137, v138);
        goto LABEL_36;
    }
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

uint64_t sub_21425A59C()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  result = type metadata accessor for RectanglesRenderer(319);
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for PointsRenderer(319);
    if (v2 <= 0x3F)
    {
      result = type metadata accessor for RulesRenderer(319);
      if (v3 <= 0x3F)
      {
        swift_initEnumMetadataMultiPayload();
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_21425A640(uint64_t *a1, uint64_t *a2)
{
  int v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_DWORD *)(*(_QWORD *)(type metadata accessor for AnyVectorizedRenderer.MarkRenderer(0) - 8) + 80);
  if ((v4 & 0x20000) == 0)
  {
    v5 = (char *)&loc_21425A6A8 + 4 * byte_214428DBC[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  v6 = *a2;
  *a1 = *a2;
  v7 = v6 + ((v4 + 16) & ~(unint64_t)v4);
  swift_retain();
  return v7;
}

uint64_t sub_21425BBC4(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  int v10;
  uint64_t v11;
  int *v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  type metadata accessor for AnyVectorizedRenderer.MarkRenderer(0);
  result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
      _s6Charts15AnyChartContentVwxx_0(a1);
      swift_release();
      v3 = type metadata accessor for RectanglesRenderer(0);
      v4 = a1 + *(int *)(v3 + 32);
      v5 = (int *)type metadata accessor for ChartContentRenderContext.Environment(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v5 - 1) + 48))(v4, 1, v5))
      {
        v6 = *(unsigned __int8 *)(v4 + 40);
        if (v6 != 255)
        {
          if ((v6 & 1) != 0)
            _s6Charts15AnyChartContentVwxx_0(v4);
          else
            swift_release();
        }
        swift_bridgeObjectRelease();
        v14 = *(unsigned __int8 *)(v4 + 128);
        if (v14 != 255)
        {
          if ((v14 & 1) != 0)
            swift_release();
          else
            _s6Charts15AnyChartContentVwxx_0(v4 + 88);
        }
        v17 = v4 + v5[11];
        v18 = sub_214424308();
        v19 = *(_QWORD *)(v18 - 8);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
          (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v17, v18);
        v20 = v4 + v5[14];
        v21 = sub_214424C68();
        v22 = *(_QWORD *)(v21 - 8);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
          (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v20, v21);
        swift_release();
        v23 = v4 + v5[18];
        if (*(_QWORD *)(v23 + 24))
        {
          sub_2141ED0BC(*(_QWORD *)v23, *(_QWORD *)(v23 + 8), *(_BYTE *)(v23 + 16));
          swift_bridgeObjectRelease();
          sub_2141EF1B0(*(_QWORD *)(v23 + 32), *(_QWORD *)(v23 + 40), *(_BYTE *)(v23 + 48));
        }
        v24 = v4 + v5[19];
        if (*(_QWORD *)(v24 + 24))
        {
          sub_2141ED0BC(*(_QWORD *)v24, *(_QWORD *)(v24 + 8), *(_BYTE *)(v24 + 16));
          swift_bridgeObjectRelease();
          sub_2141EF1B0(*(_QWORD *)(v24 + 32), *(_QWORD *)(v24 + 40), *(_BYTE *)(v24 + 48));
        }
        v25 = v4 + v5[20];
        if (*(_QWORD *)(v25 + 24))
        {
          sub_2141ED0BC(*(_QWORD *)v25, *(_QWORD *)(v25 + 8), *(_BYTE *)(v25 + 16));
          swift_bridgeObjectRelease();
          sub_2141EF1B0(*(_QWORD *)(v25 + 32), *(_QWORD *)(v25 + 40), *(_BYTE *)(v25 + 48));
        }
        v26 = v4 + v5[21];
        if (*(_QWORD *)(v26 + 24))
        {
          sub_2141ED0BC(*(_QWORD *)v26, *(_QWORD *)(v26 + 8), *(_BYTE *)(v26 + 16));
          swift_bridgeObjectRelease();
          sub_2141EF1B0(*(_QWORD *)(v26 + 32), *(_QWORD *)(v26 + 40), *(_BYTE *)(v26 + 48));
        }
        v27 = v4 + v5[24];
        if (*(_QWORD *)(v27 + 24))
        {
          sub_2141ED0BC(*(_QWORD *)v27, *(_QWORD *)(v27 + 8), *(_BYTE *)(v27 + 16));
          swift_bridgeObjectRelease();
        }
        v28 = v4 + v5[25];
        if (*(_QWORD *)(v28 + 24))
        {
          sub_2141ED0BC(*(_QWORD *)v28, *(_QWORD *)(v28 + 8), *(_BYTE *)(v28 + 16));
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        v29 = v4 + v5[27];
        if (*(_QWORD *)(v29 + 24))
          _s6Charts15AnyChartContentVwxx_0(v29);
      }
      v30 = a1 + *(int *)(v3 + 40);
      v31 = sub_214424308();
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 8))(v30, v31);
      break;
    case 1:
      _s6Charts15AnyChartContentVwxx_0(a1);
      swift_release();
      v7 = type metadata accessor for PointsRenderer(0);
      v8 = a1 + *(int *)(v7 + 32);
      v9 = (int *)type metadata accessor for ChartContentRenderContext.Environment(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v9 - 1) + 48))(v8, 1, v9))
      {
        v10 = *(unsigned __int8 *)(v8 + 40);
        if (v10 != 255)
        {
          if ((v10 & 1) != 0)
            _s6Charts15AnyChartContentVwxx_0(v8);
          else
            swift_release();
        }
        swift_bridgeObjectRelease();
        v15 = *(unsigned __int8 *)(v8 + 128);
        if (v15 != 255)
        {
          if ((v15 & 1) != 0)
            swift_release();
          else
            _s6Charts15AnyChartContentVwxx_0(v8 + 88);
        }
        v32 = v8 + v9[11];
        v33 = sub_214424308();
        v34 = *(_QWORD *)(v33 - 8);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
          (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v32, v33);
        v35 = v8 + v9[14];
        v36 = sub_214424C68();
        v37 = *(_QWORD *)(v36 - 8);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v35, 1, v36))
          (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v35, v36);
        swift_release();
        v38 = v8 + v9[18];
        if (*(_QWORD *)(v38 + 24))
        {
          sub_2141ED0BC(*(_QWORD *)v38, *(_QWORD *)(v38 + 8), *(_BYTE *)(v38 + 16));
          swift_bridgeObjectRelease();
          sub_2141EF1B0(*(_QWORD *)(v38 + 32), *(_QWORD *)(v38 + 40), *(_BYTE *)(v38 + 48));
        }
        v39 = v8 + v9[19];
        if (*(_QWORD *)(v39 + 24))
        {
          sub_2141ED0BC(*(_QWORD *)v39, *(_QWORD *)(v39 + 8), *(_BYTE *)(v39 + 16));
          swift_bridgeObjectRelease();
          sub_2141EF1B0(*(_QWORD *)(v39 + 32), *(_QWORD *)(v39 + 40), *(_BYTE *)(v39 + 48));
        }
        v40 = v8 + v9[20];
        if (*(_QWORD *)(v40 + 24))
        {
          sub_2141ED0BC(*(_QWORD *)v40, *(_QWORD *)(v40 + 8), *(_BYTE *)(v40 + 16));
          swift_bridgeObjectRelease();
          sub_2141EF1B0(*(_QWORD *)(v40 + 32), *(_QWORD *)(v40 + 40), *(_BYTE *)(v40 + 48));
        }
        v41 = v8 + v9[21];
        if (*(_QWORD *)(v41 + 24))
        {
          sub_2141ED0BC(*(_QWORD *)v41, *(_QWORD *)(v41 + 8), *(_BYTE *)(v41 + 16));
          swift_bridgeObjectRelease();
          sub_2141EF1B0(*(_QWORD *)(v41 + 32), *(_QWORD *)(v41 + 40), *(_BYTE *)(v41 + 48));
        }
        v42 = v8 + v9[24];
        if (*(_QWORD *)(v42 + 24))
        {
          sub_2141ED0BC(*(_QWORD *)v42, *(_QWORD *)(v42 + 8), *(_BYTE *)(v42 + 16));
          swift_bridgeObjectRelease();
        }
        v43 = v8 + v9[25];
        if (*(_QWORD *)(v43 + 24))
        {
          sub_2141ED0BC(*(_QWORD *)v43, *(_QWORD *)(v43 + 8), *(_BYTE *)(v43 + 16));
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        v44 = v8 + v9[27];
        if (*(_QWORD *)(v44 + 24))
          _s6Charts15AnyChartContentVwxx_0(v44);
      }
      result = a1 + *(int *)(v7 + 36);
      v45 = *(unsigned __int8 *)(result + 40);
      if (v45 != 255)
      {
        if ((v45 & 1) == 0)
          goto LABEL_87;
        goto LABEL_14;
      }
      break;
    case 2:
      _s6Charts15AnyChartContentVwxx_0(a1);
      swift_release();
      v11 = a1 + *(int *)(type metadata accessor for RulesRenderer(0) + 32);
      v12 = (int *)type metadata accessor for ChartContentRenderContext.Environment(0);
      result = (*(uint64_t (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v12 - 1) + 48))(v11, 1, v12);
      if (!(_DWORD)result)
      {
        v13 = *(unsigned __int8 *)(v11 + 40);
        if (v13 != 255)
        {
          if ((v13 & 1) != 0)
            _s6Charts15AnyChartContentVwxx_0(v11);
          else
            swift_release();
        }
        swift_bridgeObjectRelease();
        v16 = *(unsigned __int8 *)(v11 + 128);
        if (v16 != 255)
        {
          if ((v16 & 1) != 0)
            swift_release();
          else
            _s6Charts15AnyChartContentVwxx_0(v11 + 88);
        }
        v46 = v11 + v12[11];
        v47 = sub_214424308();
        v48 = *(_QWORD *)(v47 - 8);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v48 + 48))(v46, 1, v47))
          (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v46, v47);
        v49 = v11 + v12[14];
        v50 = sub_214424C68();
        v51 = *(_QWORD *)(v50 - 8);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v51 + 48))(v49, 1, v50))
          (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v49, v50);
        swift_release();
        v52 = v11 + v12[18];
        if (*(_QWORD *)(v52 + 24))
        {
          sub_2141ED0BC(*(_QWORD *)v52, *(_QWORD *)(v52 + 8), *(_BYTE *)(v52 + 16));
          swift_bridgeObjectRelease();
          sub_2141EF1B0(*(_QWORD *)(v52 + 32), *(_QWORD *)(v52 + 40), *(_BYTE *)(v52 + 48));
        }
        v53 = v11 + v12[19];
        if (*(_QWORD *)(v53 + 24))
        {
          sub_2141ED0BC(*(_QWORD *)v53, *(_QWORD *)(v53 + 8), *(_BYTE *)(v53 + 16));
          swift_bridgeObjectRelease();
          sub_2141EF1B0(*(_QWORD *)(v53 + 32), *(_QWORD *)(v53 + 40), *(_BYTE *)(v53 + 48));
        }
        v54 = v11 + v12[20];
        if (*(_QWORD *)(v54 + 24))
        {
          sub_2141ED0BC(*(_QWORD *)v54, *(_QWORD *)(v54 + 8), *(_BYTE *)(v54 + 16));
          swift_bridgeObjectRelease();
          sub_2141EF1B0(*(_QWORD *)(v54 + 32), *(_QWORD *)(v54 + 40), *(_BYTE *)(v54 + 48));
        }
        v55 = v11 + v12[21];
        if (*(_QWORD *)(v55 + 24))
        {
          sub_2141ED0BC(*(_QWORD *)v55, *(_QWORD *)(v55 + 8), *(_BYTE *)(v55 + 16));
          swift_bridgeObjectRelease();
          sub_2141EF1B0(*(_QWORD *)(v55 + 32), *(_QWORD *)(v55 + 40), *(_BYTE *)(v55 + 48));
        }
        v56 = v11 + v12[24];
        if (*(_QWORD *)(v56 + 24))
        {
          sub_2141ED0BC(*(_QWORD *)v56, *(_QWORD *)(v56 + 8), *(_BYTE *)(v56 + 16));
          swift_bridgeObjectRelease();
        }
        v57 = v11 + v12[25];
        if (*(_QWORD *)(v57 + 24))
        {
          sub_2141ED0BC(*(_QWORD *)v57, *(_QWORD *)(v57 + 8), *(_BYTE *)(v57 + 16));
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        result = v11 + v12[27];
        if (*(_QWORD *)(result + 24))
LABEL_87:
          result = _s6Charts15AnyChartContentVwxx_0(result);
      }
      break;
    case 3:
LABEL_14:
      result = swift_release();
      break;
    default:
      return result;
  }
  return result;
}

void sub_21425C39C()
{
  char *v0;

  type metadata accessor for AnyVectorizedRenderer.MarkRenderer(0);
  v0 = (char *)sub_21425C3FC + 4 * byte_214428DC4[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_21425C3FC()
{
  uint64_t v0;
  uint64_t v1;
  __int128 v2;
  int *v3;
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int (*v10)(_OWORD *, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  int v13;
  __int128 v14;
  int *v15;
  __int128 v16;
  uint64_t v17;
  int v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  char v96;
  __int128 v97;
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  char v103;
  __int128 v104;
  uint64_t v105;
  _QWORD *v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  char *v111;
  uint64_t v112;
  __int128 v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  __int128 v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v123;
  int *v124;

  v2 = *(_OWORD *)(v1 + 24);
  *(_OWORD *)(v0 + 24) = v2;
  (**(void (***)(uint64_t, uint64_t))(v2 - 8))(v0, v1);
  *(_BYTE *)(v0 + 40) = *(_BYTE *)(v1 + 40);
  *(_QWORD *)(v0 + 48) = *(_QWORD *)(v1 + 48);
  *(_OWORD *)(v0 + 56) = *(_OWORD *)(v1 + 56);
  v3 = (int *)type metadata accessor for RectanglesRenderer(0);
  v4 = v3[8];
  v5 = v0;
  v6 = (_OWORD *)(v0 + v4);
  v7 = (_OWORD *)(v1 + v4);
  v8 = type metadata accessor for ChartContentRenderContext.Environment(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v9 + 48);
  swift_retain();
  if (v10(v7, 1, v8))
  {
    v11 = sub_2141D8BF8(qword_254D69B70);
    memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    v12 = v5;
  }
  else
  {
    v123 = v9;
    v124 = v3;
    v13 = *((unsigned __int8 *)v7 + 40);
    if (v13 == 255)
    {
      v14 = v7[1];
      *v6 = *v7;
      v6[1] = v14;
      *(_OWORD *)((char *)v6 + 25) = *(_OWORD *)((char *)v7 + 25);
      v15 = (int *)v8;
      v12 = v5;
    }
    else
    {
      v15 = (int *)v8;
      v12 = v5;
      if ((v13 & 1) != 0)
      {
        v16 = *(_OWORD *)((char *)v7 + 24);
        *(_OWORD *)((char *)v6 + 24) = v16;
        (**(void (***)(_OWORD *, _OWORD *))(v16 - 8))(v6, v7);
        *((_BYTE *)v6 + 40) = 1;
      }
      else
      {
        *(_QWORD *)v6 = *(_QWORD *)v7;
        *((_BYTE *)v6 + 40) = 0;
        swift_retain();
      }
    }
    *((_BYTE *)v6 + 41) = *((_BYTE *)v7 + 41);
    *((_QWORD *)v6 + 6) = *((_QWORD *)v7 + 6);
    *((_QWORD *)v6 + 7) = *((_QWORD *)v7 + 7);
    v17 = *((_QWORD *)v7 + 9);
    *((_QWORD *)v6 + 8) = *((_QWORD *)v7 + 8);
    *((_QWORD *)v6 + 9) = v17;
    *((_QWORD *)v6 + 10) = *((_QWORD *)v7 + 10);
    v18 = *((unsigned __int8 *)v7 + 128);
    swift_bridgeObjectRetain();
    if (v18 == 255)
    {
      v19 = *(_OWORD *)((char *)v7 + 104);
      *(_OWORD *)((char *)v6 + 88) = *(_OWORD *)((char *)v7 + 88);
      *(_OWORD *)((char *)v6 + 104) = v19;
      *(_OWORD *)((char *)v6 + 113) = *(_OWORD *)((char *)v7 + 113);
    }
    else if ((v18 & 1) != 0)
    {
      *((_QWORD *)v6 + 11) = *((_QWORD *)v7 + 11);
      v6[6] = v7[6];
      *((_BYTE *)v6 + 128) = 1;
      swift_retain();
    }
    else
    {
      v20 = v7[7];
      v6[7] = v20;
      (**(void (***)(uint64_t, uint64_t))(v20 - 8))((uint64_t)v6 + 88, (uint64_t)v7 + 88);
      *((_BYTE *)v6 + 128) = 0;
    }
    *(_OWORD *)((char *)v6 + 136) = *(_OWORD *)((char *)v7 + 136);
    *((_BYTE *)v6 + 152) = *((_BYTE *)v7 + 152);
    *((_QWORD *)v6 + 20) = *((_QWORD *)v7 + 20);
    *((_BYTE *)v6 + 168) = *((_BYTE *)v7 + 168);
    v21 = v7[12];
    v6[11] = v7[11];
    v6[12] = v21;
    *((_BYTE *)v6 + 208) = *((_BYTE *)v7 + 208);
    v22 = v15[11];
    v23 = (char *)v6 + v22;
    v24 = (char *)v7 + v22;
    v25 = sub_214424308();
    v26 = *(_QWORD *)(v25 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
    {
      v27 = sub_2141D8BF8(&qword_253F134C8);
      memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v23, v24, v25);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
    }
    v28 = v15[12];
    v29 = (char *)v6 + v28;
    v30 = (char *)v7 + v28;
    *(_QWORD *)v29 = *(_QWORD *)v30;
    v29[8] = v30[8];
    *(_QWORD *)((char *)v6 + v15[13]) = *(_QWORD *)((char *)v7 + v15[13]);
    v31 = v15[14];
    v32 = (char *)v6 + v31;
    v33 = (char *)v7 + v31;
    v34 = sub_214424C68();
    v35 = *(_QWORD *)(v34 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34))
    {
      v36 = sub_2141D8BF8(&qword_253F15C88);
      memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v35 + 16))(v32, v33, v34);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
    }
    v37 = v15[15];
    v38 = (char *)v6 + v37;
    v39 = (char *)v7 + v37;
    *(_QWORD *)v38 = *(_QWORD *)v39;
    *((_WORD *)v38 + 4) = *((_WORD *)v39 + 4);
    *(_QWORD *)((char *)v6 + v15[16]) = *(_QWORD *)((char *)v7 + v15[16]);
    *(_QWORD *)((char *)v6 + v15[17]) = *(_QWORD *)((char *)v7 + v15[17]);
    v40 = v15[18];
    v41 = (char *)v6 + v40;
    v42 = (char *)v7 + v40;
    v43 = *(_QWORD *)((char *)v7 + v40 + 24);
    swift_retain();
    if (v43)
    {
      v44 = *(_QWORD *)v42;
      v45 = *((_QWORD *)v42 + 1);
      v46 = v42[16];
      sub_2141DD130(*(_QWORD *)v42, v45, v46);
      *(_QWORD *)v41 = v44;
      *((_QWORD *)v41 + 1) = v45;
      v41[16] = v46;
      v47 = *((_QWORD *)v42 + 4);
      *((_QWORD *)v41 + 3) = *((_QWORD *)v42 + 3);
      v48 = *((_QWORD *)v42 + 5);
      v49 = v42[48];
      swift_bridgeObjectRetain();
      sub_2141DD140(v47, v48, v49);
      *((_QWORD *)v41 + 4) = v47;
      *((_QWORD *)v41 + 5) = v48;
      v41[48] = v49;
      *(_OWORD *)(v41 + 56) = *(_OWORD *)(v42 + 56);
    }
    else
    {
      v50 = *((_OWORD *)v42 + 3);
      *((_OWORD *)v41 + 2) = *((_OWORD *)v42 + 2);
      *((_OWORD *)v41 + 3) = v50;
      *((_QWORD *)v41 + 8) = *((_QWORD *)v42 + 8);
      v51 = *((_OWORD *)v42 + 1);
      *(_OWORD *)v41 = *(_OWORD *)v42;
      *((_OWORD *)v41 + 1) = v51;
    }
    v52 = v15[19];
    v53 = (char *)v6 + v52;
    v54 = (char *)v7 + v52;
    if (*(_QWORD *)((char *)v7 + v52 + 24))
    {
      v55 = *(_QWORD *)v54;
      v56 = *((_QWORD *)v54 + 1);
      v57 = v54[16];
      sub_2141DD130(*(_QWORD *)v54, v56, v57);
      *(_QWORD *)v53 = v55;
      *((_QWORD *)v53 + 1) = v56;
      v53[16] = v57;
      v58 = *((_QWORD *)v54 + 4);
      *((_QWORD *)v53 + 3) = *((_QWORD *)v54 + 3);
      v59 = *((_QWORD *)v54 + 5);
      v60 = v54[48];
      swift_bridgeObjectRetain();
      sub_2141DD140(v58, v59, v60);
      *((_QWORD *)v53 + 4) = v58;
      *((_QWORD *)v53 + 5) = v59;
      v53[48] = v60;
      *(_OWORD *)(v53 + 56) = *(_OWORD *)(v54 + 56);
    }
    else
    {
      v61 = *((_OWORD *)v54 + 3);
      *((_OWORD *)v53 + 2) = *((_OWORD *)v54 + 2);
      *((_OWORD *)v53 + 3) = v61;
      *((_QWORD *)v53 + 8) = *((_QWORD *)v54 + 8);
      v62 = *((_OWORD *)v54 + 1);
      *(_OWORD *)v53 = *(_OWORD *)v54;
      *((_OWORD *)v53 + 1) = v62;
    }
    v63 = v15[20];
    v64 = (char *)v6 + v63;
    v65 = (char *)v7 + v63;
    if (*(_QWORD *)((char *)v7 + v63 + 24))
    {
      v66 = *(_QWORD *)v65;
      v67 = *((_QWORD *)v65 + 1);
      v68 = v65[16];
      sub_2141DD130(*(_QWORD *)v65, v67, v68);
      *(_QWORD *)v64 = v66;
      *((_QWORD *)v64 + 1) = v67;
      v64[16] = v68;
      v69 = *((_QWORD *)v65 + 4);
      *((_QWORD *)v64 + 3) = *((_QWORD *)v65 + 3);
      v70 = *((_QWORD *)v65 + 5);
      v71 = v65[48];
      swift_bridgeObjectRetain();
      sub_2141DD140(v69, v70, v71);
      *((_QWORD *)v64 + 4) = v69;
      *((_QWORD *)v64 + 5) = v70;
      v64[48] = v71;
      *(_OWORD *)(v64 + 56) = *(_OWORD *)(v65 + 56);
    }
    else
    {
      v72 = *((_OWORD *)v65 + 3);
      *((_OWORD *)v64 + 2) = *((_OWORD *)v65 + 2);
      *((_OWORD *)v64 + 3) = v72;
      *((_QWORD *)v64 + 8) = *((_QWORD *)v65 + 8);
      v73 = *((_OWORD *)v65 + 1);
      *(_OWORD *)v64 = *(_OWORD *)v65;
      *((_OWORD *)v64 + 1) = v73;
    }
    v74 = v15[21];
    v75 = (char *)v6 + v74;
    v76 = (char *)v7 + v74;
    if (*(_QWORD *)((char *)v7 + v74 + 24))
    {
      v77 = *(_QWORD *)v76;
      v78 = *((_QWORD *)v76 + 1);
      v79 = v76[16];
      sub_2141DD130(*(_QWORD *)v76, v78, v79);
      *(_QWORD *)v75 = v77;
      *((_QWORD *)v75 + 1) = v78;
      v75[16] = v79;
      v80 = *((_QWORD *)v76 + 4);
      *((_QWORD *)v75 + 3) = *((_QWORD *)v76 + 3);
      v81 = *((_QWORD *)v76 + 5);
      v82 = v76[48];
      swift_bridgeObjectRetain();
      sub_2141DD140(v80, v81, v82);
      *((_QWORD *)v75 + 4) = v80;
      *((_QWORD *)v75 + 5) = v81;
      v75[48] = v82;
      *(_OWORD *)(v75 + 56) = *(_OWORD *)(v76 + 56);
    }
    else
    {
      v83 = *((_OWORD *)v76 + 3);
      *((_OWORD *)v75 + 2) = *((_OWORD *)v76 + 2);
      *((_OWORD *)v75 + 3) = v83;
      *((_QWORD *)v75 + 8) = *((_QWORD *)v76 + 8);
      v84 = *((_OWORD *)v76 + 1);
      *(_OWORD *)v75 = *(_OWORD *)v76;
      *((_OWORD *)v75 + 1) = v84;
    }
    v85 = v15[22];
    v86 = (char *)v6 + v85;
    v87 = (char *)v7 + v85;
    *(_OWORD *)v86 = *(_OWORD *)v87;
    *((_QWORD *)v86 + 2) = *((_QWORD *)v87 + 2);
    v88 = v15[23];
    v89 = (char *)v6 + v88;
    v90 = (char *)v7 + v88;
    *(_OWORD *)v89 = *(_OWORD *)v90;
    *((_QWORD *)v89 + 2) = *((_QWORD *)v90 + 2);
    v91 = v15[24];
    v92 = (char *)v6 + v91;
    v93 = (char *)v7 + v91;
    if (*(_QWORD *)((char *)v7 + v91 + 24))
    {
      v94 = *(_QWORD *)v93;
      v95 = *((_QWORD *)v93 + 1);
      v96 = v93[16];
      sub_2141DD130(*(_QWORD *)v93, v95, v96);
      *(_QWORD *)v92 = v94;
      *((_QWORD *)v92 + 1) = v95;
      v92[16] = v96;
      *((_QWORD *)v92 + 3) = *((_QWORD *)v93 + 3);
      swift_bridgeObjectRetain();
    }
    else
    {
      v97 = *((_OWORD *)v93 + 1);
      *(_OWORD *)v92 = *(_OWORD *)v93;
      *((_OWORD *)v92 + 1) = v97;
    }
    v98 = v15[25];
    v99 = (char *)v6 + v98;
    v100 = (char *)v7 + v98;
    if (*(_QWORD *)((char *)v7 + v98 + 24))
    {
      v101 = *(_QWORD *)v100;
      v102 = *((_QWORD *)v100 + 1);
      v103 = v100[16];
      sub_2141DD130(*(_QWORD *)v100, v102, v103);
      *(_QWORD *)v99 = v101;
      *((_QWORD *)v99 + 1) = v102;
      v99[16] = v103;
      *((_QWORD *)v99 + 3) = *((_QWORD *)v100 + 3);
      swift_bridgeObjectRetain();
    }
    else
    {
      v104 = *((_OWORD *)v100 + 1);
      *(_OWORD *)v99 = *(_OWORD *)v100;
      *((_OWORD *)v99 + 1) = v104;
    }
    v105 = v15[26];
    v106 = (_QWORD *)((char *)v6 + v105);
    v107 = (_QWORD *)((char *)v7 + v105);
    v108 = v107[1];
    *v106 = *v107;
    v106[1] = v108;
    v109 = v15[27];
    v110 = (char *)v6 + v109;
    v111 = (char *)v7 + v109;
    v112 = *((_QWORD *)v111 + 3);
    swift_bridgeObjectRetain();
    if (v112)
    {
      *((_QWORD *)v110 + 3) = v112;
      (**(void (***)(char *, char *, uint64_t))(v112 - 8))(v110, v111, v112);
    }
    else
    {
      v113 = *((_OWORD *)v111 + 1);
      *(_OWORD *)v110 = *(_OWORD *)v111;
      *((_OWORD *)v110 + 1) = v113;
    }
    v3 = v124;
    (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v123 + 56))(v6, 0, 1, v15);
  }
  v114 = v3[9];
  v115 = v12 + v114;
  v116 = v1 + v114;
  v117 = *(_OWORD *)(v116 + 16);
  *(_OWORD *)v115 = *(_OWORD *)v116;
  *(_OWORD *)(v115 + 16) = v117;
  *(_BYTE *)(v115 + 32) = *(_BYTE *)(v116 + 32);
  v118 = v3[10];
  v119 = v12 + v118;
  v120 = v1 + v118;
  v121 = sub_214424308();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v121 - 8) + 16))(v119, v120, v121);
  swift_storeEnumTagMultiPayload();
  return v12;
}

uint64_t sub_21425D920(uint64_t result, uint64_t a2)
{
  char *v2;

  if (result != a2)
  {
    sub_2141DD370(result, type metadata accessor for AnyVectorizedRenderer.MarkRenderer);
    type metadata accessor for AnyVectorizedRenderer.MarkRenderer(0);
    v2 = (char *)&loc_21425D994 + 4 * byte_214428DC8[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  return result;
}

_OWORD *sub_21425EF78(_OWORD *a1, _OWORD *a2)
{
  uint64_t v4;
  int EnumCaseMultiPayload;
  __int128 v6;
  int *v7;
  uint64_t v8;
  _OWORD *v9;
  _OWORD *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  int *v22;
  uint64_t v23;
  _OWORD *v24;
  _OWORD *v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  char *v93;
  char *v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;
  char *v98;
  char *v99;
  __int128 v100;
  __int128 v101;
  uint64_t v102;
  char *v103;
  char *v104;
  __int128 v105;
  __int128 v106;
  uint64_t v107;
  char *v108;
  char *v109;
  __int128 v110;
  __int128 v111;
  uint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  _OWORD *v119;
  _OWORD *v120;
  __int128 v121;
  uint64_t v122;
  _OWORD *v123;
  _OWORD *v124;
  __int128 v125;
  uint64_t v126;
  _OWORD *v127;
  _OWORD *v128;
  __int128 v129;
  uint64_t v130;
  char *v131;
  char *v132;
  __int128 v133;
  uint64_t v134;
  char *v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  char *v140;
  uint64_t v141;
  char *v142;
  char *v143;
  __int128 v144;
  __int128 v145;
  uint64_t v146;
  char *v147;
  char *v148;
  __int128 v149;
  __int128 v150;
  uint64_t v151;
  char *v152;
  char *v153;
  __int128 v154;
  __int128 v155;
  uint64_t v156;
  char *v157;
  char *v158;
  __int128 v159;
  __int128 v160;
  uint64_t v161;
  char *v162;
  char *v163;
  uint64_t v164;
  char *v165;
  char *v166;
  uint64_t v167;
  _OWORD *v168;
  _OWORD *v169;
  __int128 v170;
  uint64_t v171;
  _OWORD *v172;
  _OWORD *v173;
  __int128 v174;
  uint64_t v175;
  _OWORD *v176;
  _OWORD *v177;
  __int128 v178;
  uint64_t v179;
  char *v180;
  char *v181;
  uint64_t v182;
  char *v183;
  char *v184;
  __int128 v185;
  __int128 v186;
  uint64_t v187;
  char *v188;
  char *v189;
  __int128 v190;
  __int128 v191;
  uint64_t v192;
  char *v193;
  char *v194;
  __int128 v195;
  __int128 v196;
  uint64_t v197;
  char *v198;
  char *v199;
  __int128 v200;
  __int128 v201;
  uint64_t v202;
  char *v203;
  char *v204;
  uint64_t v205;
  char *v206;
  char *v207;
  uint64_t v208;
  _OWORD *v209;
  _OWORD *v210;
  __int128 v211;
  uint64_t v212;
  _OWORD *v213;
  _OWORD *v214;
  __int128 v215;
  uint64_t v216;
  _OWORD *v217;
  _OWORD *v218;
  __int128 v219;
  uint64_t v220;
  _OWORD *v221;
  _OWORD *v222;
  __int128 v223;
  uint64_t v224;
  char *v225;
  char *v226;
  uint64_t v228;
  uint64_t v229;

  v4 = type metadata accessor for AnyVectorizedRenderer.MarkRenderer(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 2:
      v14 = a2[1];
      *a1 = *a2;
      a1[1] = v14;
      *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
      *(_OWORD *)((char *)a1 + 40) = *(_OWORD *)((char *)a2 + 40);
      *(_OWORD *)((char *)a1 + 56) = *(_OWORD *)((char *)a2 + 56);
      v15 = *(int *)(type metadata accessor for RulesRenderer(0) + 32);
      v16 = (_OWORD *)((char *)a1 + v15);
      v17 = (_OWORD *)((char *)a2 + v15);
      v18 = (int *)type metadata accessor for ChartContentRenderContext.Environment(0);
      v19 = *((_QWORD *)v18 - 1);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v19 + 48))(v17, 1, v18))
      {
        v20 = sub_2141D8BF8(qword_254D69B70);
        memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
      }
      else
      {
        v40 = v17[1];
        *v16 = *v17;
        v16[1] = v40;
        *(_OWORD *)((char *)v16 + 25) = *(_OWORD *)((char *)v17 + 25);
        *((_BYTE *)v16 + 41) = *((_BYTE *)v17 + 41);
        v41 = v17[4];
        v16[3] = v17[3];
        v16[4] = v41;
        *((_QWORD *)v16 + 10) = *((_QWORD *)v17 + 10);
        v42 = *(_OWORD *)((char *)v17 + 88);
        v43 = *(_OWORD *)((char *)v17 + 104);
        *(_OWORD *)((char *)v16 + 113) = *(_OWORD *)((char *)v17 + 113);
        *(_OWORD *)((char *)v16 + 104) = v43;
        *(_OWORD *)((char *)v16 + 88) = v42;
        *(_OWORD *)((char *)v16 + 136) = *(_OWORD *)((char *)v17 + 136);
        *((_BYTE *)v16 + 152) = *((_BYTE *)v17 + 152);
        *((_QWORD *)v16 + 20) = *((_QWORD *)v17 + 20);
        *((_BYTE *)v16 + 168) = *((_BYTE *)v17 + 168);
        v44 = v17[12];
        v16[11] = v17[11];
        v16[12] = v44;
        *((_BYTE *)v16 + 208) = *((_BYTE *)v17 + 208);
        v45 = v18[11];
        v46 = (char *)v16 + v45;
        v47 = (char *)v17 + v45;
        v48 = sub_214424308();
        v49 = *(_QWORD *)(v48 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48))(v47, 1, v48))
        {
          v50 = sub_2141D8BF8(&qword_253F134C8);
          memcpy(v46, v47, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v49 + 32))(v46, v47, v48);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v49 + 56))(v46, 0, 1, v48);
        }
        v71 = v18[12];
        v72 = (char *)v16 + v71;
        v73 = (char *)v17 + v71;
        *(_QWORD *)v72 = *(_QWORD *)v73;
        v72[8] = v73[8];
        *(_QWORD *)((char *)v16 + v18[13]) = *(_QWORD *)((char *)v17 + v18[13]);
        v74 = v18[14];
        v75 = (char *)v16 + v74;
        v76 = (char *)v17 + v74;
        v77 = sub_214424C68();
        v78 = *(_QWORD *)(v77 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v78 + 48))(v76, 1, v77))
        {
          v79 = sub_2141D8BF8(&qword_253F15C88);
          memcpy(v75, v76, *(_QWORD *)(*(_QWORD *)(v79 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v78 + 32))(v75, v76, v77);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v78 + 56))(v75, 0, 1, v77);
        }
        v138 = v18[15];
        v139 = (char *)v16 + v138;
        v140 = (char *)v17 + v138;
        *(_QWORD *)v139 = *(_QWORD *)v140;
        *((_WORD *)v139 + 4) = *((_WORD *)v140 + 4);
        *(_QWORD *)((char *)v16 + v18[16]) = *(_QWORD *)((char *)v17 + v18[16]);
        *(_QWORD *)((char *)v16 + v18[17]) = *(_QWORD *)((char *)v17 + v18[17]);
        v141 = v18[18];
        v142 = (char *)v16 + v141;
        v143 = (char *)v17 + v141;
        v144 = *((_OWORD *)v143 + 3);
        *((_OWORD *)v142 + 2) = *((_OWORD *)v143 + 2);
        *((_OWORD *)v142 + 3) = v144;
        *((_QWORD *)v142 + 8) = *((_QWORD *)v143 + 8);
        v145 = *((_OWORD *)v143 + 1);
        *(_OWORD *)v142 = *(_OWORD *)v143;
        *((_OWORD *)v142 + 1) = v145;
        v146 = v18[19];
        v147 = (char *)v16 + v146;
        v148 = (char *)v17 + v146;
        *((_QWORD *)v147 + 8) = *((_QWORD *)v148 + 8);
        v149 = *((_OWORD *)v148 + 3);
        *((_OWORD *)v147 + 2) = *((_OWORD *)v148 + 2);
        *((_OWORD *)v147 + 3) = v149;
        v150 = *((_OWORD *)v148 + 1);
        *(_OWORD *)v147 = *(_OWORD *)v148;
        *((_OWORD *)v147 + 1) = v150;
        v151 = v18[20];
        v152 = (char *)v16 + v151;
        v153 = (char *)v17 + v151;
        v154 = *((_OWORD *)v153 + 3);
        *((_OWORD *)v152 + 2) = *((_OWORD *)v153 + 2);
        *((_OWORD *)v152 + 3) = v154;
        *((_QWORD *)v152 + 8) = *((_QWORD *)v153 + 8);
        v155 = *((_OWORD *)v153 + 1);
        *(_OWORD *)v152 = *(_OWORD *)v153;
        *((_OWORD *)v152 + 1) = v155;
        v156 = v18[21];
        v157 = (char *)v16 + v156;
        v158 = (char *)v17 + v156;
        *((_QWORD *)v157 + 8) = *((_QWORD *)v158 + 8);
        v159 = *((_OWORD *)v158 + 3);
        *((_OWORD *)v157 + 2) = *((_OWORD *)v158 + 2);
        *((_OWORD *)v157 + 3) = v159;
        v160 = *((_OWORD *)v158 + 1);
        *(_OWORD *)v157 = *(_OWORD *)v158;
        *((_OWORD *)v157 + 1) = v160;
        v161 = v18[22];
        v162 = (char *)v16 + v161;
        v163 = (char *)v17 + v161;
        *(_OWORD *)v162 = *(_OWORD *)v163;
        *((_QWORD *)v162 + 2) = *((_QWORD *)v163 + 2);
        v164 = v18[23];
        v165 = (char *)v16 + v164;
        v166 = (char *)v17 + v164;
        *(_OWORD *)v165 = *(_OWORD *)v166;
        *((_QWORD *)v165 + 2) = *((_QWORD *)v166 + 2);
        v167 = v18[24];
        v168 = (_OWORD *)((char *)v16 + v167);
        v169 = (_OWORD *)((char *)v17 + v167);
        v170 = v169[1];
        *v168 = *v169;
        v168[1] = v170;
        v171 = v18[25];
        v172 = (_OWORD *)((char *)v16 + v171);
        v173 = (_OWORD *)((char *)v17 + v171);
        v174 = v173[1];
        *v172 = *v173;
        v172[1] = v174;
        *(_OWORD *)((char *)v16 + v18[26]) = *(_OWORD *)((char *)v17 + v18[26]);
        v175 = v18[27];
        v176 = (_OWORD *)((char *)v16 + v175);
        v177 = (_OWORD *)((char *)v17 + v175);
        v178 = v177[1];
        *v176 = *v177;
        v176[1] = v178;
        (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v19 + 56))(v16, 0, 1, v18);
      }
LABEL_35:
      swift_storeEnumTagMultiPayload();
      return a1;
    case 1:
      v21 = a2[1];
      *a1 = *a2;
      a1[1] = v21;
      *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
      *(_OWORD *)((char *)a1 + 40) = *(_OWORD *)((char *)a2 + 40);
      *(_OWORD *)((char *)a1 + 56) = *(_OWORD *)((char *)a2 + 56);
      v22 = (int *)type metadata accessor for PointsRenderer(0);
      v23 = v22[8];
      v24 = (_OWORD *)((char *)a1 + v23);
      v25 = (_OWORD *)((char *)a2 + v23);
      v26 = (int *)type metadata accessor for ChartContentRenderContext.Environment(0);
      v27 = *((_QWORD *)v26 - 1);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v27 + 48))(v25, 1, v26))
      {
        v28 = sub_2141D8BF8(qword_254D69B70);
        memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
      }
      else
      {
        v229 = v27;
        v51 = v25[1];
        *v24 = *v25;
        v24[1] = v51;
        *(_OWORD *)((char *)v24 + 25) = *(_OWORD *)((char *)v25 + 25);
        *((_BYTE *)v24 + 41) = *((_BYTE *)v25 + 41);
        v52 = v25[4];
        v24[3] = v25[3];
        v24[4] = v52;
        *((_QWORD *)v24 + 10) = *((_QWORD *)v25 + 10);
        v53 = *(_OWORD *)((char *)v25 + 88);
        v54 = *(_OWORD *)((char *)v25 + 104);
        *(_OWORD *)((char *)v24 + 113) = *(_OWORD *)((char *)v25 + 113);
        *(_OWORD *)((char *)v24 + 104) = v54;
        *(_OWORD *)((char *)v24 + 88) = v53;
        *(_OWORD *)((char *)v24 + 136) = *(_OWORD *)((char *)v25 + 136);
        *((_BYTE *)v24 + 152) = *((_BYTE *)v25 + 152);
        *((_QWORD *)v24 + 20) = *((_QWORD *)v25 + 20);
        *((_BYTE *)v24 + 168) = *((_BYTE *)v25 + 168);
        v55 = v25[12];
        v24[11] = v25[11];
        v24[12] = v55;
        *((_BYTE *)v24 + 208) = *((_BYTE *)v25 + 208);
        v56 = v26[11];
        v57 = (char *)v24 + v56;
        v58 = (char *)v25 + v56;
        v59 = sub_214424308();
        v60 = *(_QWORD *)(v59 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v60 + 48))(v58, 1, v59))
        {
          v61 = sub_2141D8BF8(&qword_253F134C8);
          memcpy(v57, v58, *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v60 + 32))(v57, v58, v59);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v60 + 56))(v57, 0, 1, v59);
        }
        v80 = v26[12];
        v81 = (char *)v24 + v80;
        v82 = (char *)v25 + v80;
        *(_QWORD *)v81 = *(_QWORD *)v82;
        v81[8] = v82[8];
        *(_QWORD *)((char *)v24 + v26[13]) = *(_QWORD *)((char *)v25 + v26[13]);
        v83 = v26[14];
        v84 = (char *)v24 + v83;
        v85 = (char *)v25 + v83;
        v86 = sub_214424C68();
        v87 = *(_QWORD *)(v86 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v87 + 48))(v85, 1, v86))
        {
          v88 = sub_2141D8BF8(&qword_253F15C88);
          memcpy(v84, v85, *(_QWORD *)(*(_QWORD *)(v88 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v87 + 32))(v84, v85, v86);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v87 + 56))(v84, 0, 1, v86);
        }
        v179 = v26[15];
        v180 = (char *)v24 + v179;
        v181 = (char *)v25 + v179;
        *(_QWORD *)v180 = *(_QWORD *)v181;
        *((_WORD *)v180 + 4) = *((_WORD *)v181 + 4);
        *(_QWORD *)((char *)v24 + v26[16]) = *(_QWORD *)((char *)v25 + v26[16]);
        *(_QWORD *)((char *)v24 + v26[17]) = *(_QWORD *)((char *)v25 + v26[17]);
        v182 = v26[18];
        v183 = (char *)v24 + v182;
        v184 = (char *)v25 + v182;
        v185 = *((_OWORD *)v184 + 3);
        *((_OWORD *)v183 + 2) = *((_OWORD *)v184 + 2);
        *((_OWORD *)v183 + 3) = v185;
        *((_QWORD *)v183 + 8) = *((_QWORD *)v184 + 8);
        v186 = *((_OWORD *)v184 + 1);
        *(_OWORD *)v183 = *(_OWORD *)v184;
        *((_OWORD *)v183 + 1) = v186;
        v187 = v26[19];
        v188 = (char *)v24 + v187;
        v189 = (char *)v25 + v187;
        *((_QWORD *)v188 + 8) = *((_QWORD *)v189 + 8);
        v190 = *((_OWORD *)v189 + 3);
        *((_OWORD *)v188 + 2) = *((_OWORD *)v189 + 2);
        *((_OWORD *)v188 + 3) = v190;
        v191 = *((_OWORD *)v189 + 1);
        *(_OWORD *)v188 = *(_OWORD *)v189;
        *((_OWORD *)v188 + 1) = v191;
        v192 = v26[20];
        v193 = (char *)v24 + v192;
        v194 = (char *)v25 + v192;
        v195 = *((_OWORD *)v194 + 3);
        *((_OWORD *)v193 + 2) = *((_OWORD *)v194 + 2);
        *((_OWORD *)v193 + 3) = v195;
        *((_QWORD *)v193 + 8) = *((_QWORD *)v194 + 8);
        v196 = *((_OWORD *)v194 + 1);
        *(_OWORD *)v193 = *(_OWORD *)v194;
        *((_OWORD *)v193 + 1) = v196;
        v197 = v26[21];
        v198 = (char *)v24 + v197;
        v199 = (char *)v25 + v197;
        *((_QWORD *)v198 + 8) = *((_QWORD *)v199 + 8);
        v200 = *((_OWORD *)v199 + 3);
        *((_OWORD *)v198 + 2) = *((_OWORD *)v199 + 2);
        *((_OWORD *)v198 + 3) = v200;
        v201 = *((_OWORD *)v199 + 1);
        *(_OWORD *)v198 = *(_OWORD *)v199;
        *((_OWORD *)v198 + 1) = v201;
        v202 = v26[22];
        v203 = (char *)v24 + v202;
        v204 = (char *)v25 + v202;
        *(_OWORD *)v203 = *(_OWORD *)v204;
        *((_QWORD *)v203 + 2) = *((_QWORD *)v204 + 2);
        v205 = v26[23];
        v206 = (char *)v24 + v205;
        v207 = (char *)v25 + v205;
        *(_OWORD *)v206 = *(_OWORD *)v207;
        *((_QWORD *)v206 + 2) = *((_QWORD *)v207 + 2);
        v208 = v26[24];
        v209 = (_OWORD *)((char *)v24 + v208);
        v210 = (_OWORD *)((char *)v25 + v208);
        v211 = v210[1];
        *v209 = *v210;
        v209[1] = v211;
        v212 = v26[25];
        v213 = (_OWORD *)((char *)v24 + v212);
        v214 = (_OWORD *)((char *)v25 + v212);
        v215 = v214[1];
        *v213 = *v214;
        v213[1] = v215;
        *(_OWORD *)((char *)v24 + v26[26]) = *(_OWORD *)((char *)v25 + v26[26]);
        v216 = v26[27];
        v217 = (_OWORD *)((char *)v24 + v216);
        v218 = (_OWORD *)((char *)v25 + v216);
        v219 = v218[1];
        *v217 = *v218;
        v217[1] = v219;
        (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v229 + 56))(v24, 0, 1, v26);
      }
      v220 = v22[9];
      v221 = (_OWORD *)((char *)a1 + v220);
      v222 = (_OWORD *)((char *)a2 + v220);
      v223 = v222[1];
      *v221 = *v222;
      v221[1] = v223;
      *(_OWORD *)((char *)v221 + 25) = *(_OWORD *)((char *)v222 + 25);
      v224 = v22[10];
      v225 = (char *)a1 + v224;
      v226 = (char *)a2 + v224;
      v225[16] = v226[16];
      *(_OWORD *)v225 = *(_OWORD *)v226;
      goto LABEL_35;
    case 0:
      v6 = a2[1];
      *a1 = *a2;
      a1[1] = v6;
      *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
      *(_OWORD *)((char *)a1 + 40) = *(_OWORD *)((char *)a2 + 40);
      *(_OWORD *)((char *)a1 + 56) = *(_OWORD *)((char *)a2 + 56);
      v7 = (int *)type metadata accessor for RectanglesRenderer(0);
      v8 = v7[8];
      v9 = (_OWORD *)((char *)a1 + v8);
      v10 = (_OWORD *)((char *)a2 + v8);
      v11 = (int *)type metadata accessor for ChartContentRenderContext.Environment(0);
      v12 = *((_QWORD *)v11 - 1);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
      {
        v13 = sub_2141D8BF8(qword_254D69B70);
        memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
      }
      else
      {
        v228 = v12;
        v29 = v10[1];
        *v9 = *v10;
        v9[1] = v29;
        *(_OWORD *)((char *)v9 + 25) = *(_OWORD *)((char *)v10 + 25);
        *((_BYTE *)v9 + 41) = *((_BYTE *)v10 + 41);
        v30 = v10[4];
        v9[3] = v10[3];
        v9[4] = v30;
        *((_QWORD *)v9 + 10) = *((_QWORD *)v10 + 10);
        v31 = *(_OWORD *)((char *)v10 + 88);
        v32 = *(_OWORD *)((char *)v10 + 104);
        *(_OWORD *)((char *)v9 + 113) = *(_OWORD *)((char *)v10 + 113);
        *(_OWORD *)((char *)v9 + 104) = v32;
        *(_OWORD *)((char *)v9 + 88) = v31;
        *(_OWORD *)((char *)v9 + 136) = *(_OWORD *)((char *)v10 + 136);
        *((_BYTE *)v9 + 152) = *((_BYTE *)v10 + 152);
        *((_QWORD *)v9 + 20) = *((_QWORD *)v10 + 20);
        *((_BYTE *)v9 + 168) = *((_BYTE *)v10 + 168);
        v33 = v10[12];
        v9[11] = v10[11];
        v9[12] = v33;
        *((_BYTE *)v9 + 208) = *((_BYTE *)v10 + 208);
        v34 = v11[11];
        v35 = (char *)v9 + v34;
        v36 = (char *)v10 + v34;
        v37 = sub_214424308();
        v38 = *(_QWORD *)(v37 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v36, 1, v37))
        {
          v39 = sub_2141D8BF8(&qword_253F134C8);
          memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v35, v36, v37);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v37);
        }
        v62 = v11[12];
        v63 = (char *)v9 + v62;
        v64 = (char *)v10 + v62;
        *(_QWORD *)v63 = *(_QWORD *)v64;
        v63[8] = v64[8];
        *(_QWORD *)((char *)v9 + v11[13]) = *(_QWORD *)((char *)v10 + v11[13]);
        v65 = v11[14];
        v66 = (char *)v9 + v65;
        v67 = (char *)v10 + v65;
        v68 = sub_214424C68();
        v69 = *(_QWORD *)(v68 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v69 + 48))(v67, 1, v68))
        {
          v70 = sub_2141D8BF8(&qword_253F15C88);
          memcpy(v66, v67, *(_QWORD *)(*(_QWORD *)(v70 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v69 + 32))(v66, v67, v68);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v69 + 56))(v66, 0, 1, v68);
        }
        v89 = v11[15];
        v90 = (char *)v9 + v89;
        v91 = (char *)v10 + v89;
        *(_QWORD *)v90 = *(_QWORD *)v91;
        *((_WORD *)v90 + 4) = *((_WORD *)v91 + 4);
        *(_QWORD *)((char *)v9 + v11[16]) = *(_QWORD *)((char *)v10 + v11[16]);
        *(_QWORD *)((char *)v9 + v11[17]) = *(_QWORD *)((char *)v10 + v11[17]);
        v92 = v11[18];
        v93 = (char *)v9 + v92;
        v94 = (char *)v10 + v92;
        v95 = *((_OWORD *)v94 + 3);
        *((_OWORD *)v93 + 2) = *((_OWORD *)v94 + 2);
        *((_OWORD *)v93 + 3) = v95;
        *((_QWORD *)v93 + 8) = *((_QWORD *)v94 + 8);
        v96 = *((_OWORD *)v94 + 1);
        *(_OWORD *)v93 = *(_OWORD *)v94;
        *((_OWORD *)v93 + 1) = v96;
        v97 = v11[19];
        v98 = (char *)v9 + v97;
        v99 = (char *)v10 + v97;
        *((_QWORD *)v98 + 8) = *((_QWORD *)v99 + 8);
        v100 = *((_OWORD *)v99 + 3);
        *((_OWORD *)v98 + 2) = *((_OWORD *)v99 + 2);
        *((_OWORD *)v98 + 3) = v100;
        v101 = *((_OWORD *)v99 + 1);
        *(_OWORD *)v98 = *(_OWORD *)v99;
        *((_OWORD *)v98 + 1) = v101;
        v102 = v11[20];
        v103 = (char *)v9 + v102;
        v104 = (char *)v10 + v102;
        v105 = *((_OWORD *)v104 + 3);
        *((_OWORD *)v103 + 2) = *((_OWORD *)v104 + 2);
        *((_OWORD *)v103 + 3) = v105;
        *((_QWORD *)v103 + 8) = *((_QWORD *)v104 + 8);
        v106 = *((_OWORD *)v104 + 1);
        *(_OWORD *)v103 = *(_OWORD *)v104;
        *((_OWORD *)v103 + 1) = v106;
        v107 = v11[21];
        v108 = (char *)v9 + v107;
        v109 = (char *)v10 + v107;
        *((_QWORD *)v108 + 8) = *((_QWORD *)v109 + 8);
        v110 = *((_OWORD *)v109 + 3);
        *((_OWORD *)v108 + 2) = *((_OWORD *)v109 + 2);
        *((_OWORD *)v108 + 3) = v110;
        v111 = *((_OWORD *)v109 + 1);
        *(_OWORD *)v108 = *(_OWORD *)v109;
        *((_OWORD *)v108 + 1) = v111;
        v112 = v11[22];
        v113 = (char *)v9 + v112;
        v114 = (char *)v10 + v112;
        *(_OWORD *)v113 = *(_OWORD *)v114;
        *((_QWORD *)v113 + 2) = *((_QWORD *)v114 + 2);
        v115 = v11[23];
        v116 = (char *)v9 + v115;
        v117 = (char *)v10 + v115;
        *(_OWORD *)v116 = *(_OWORD *)v117;
        *((_QWORD *)v116 + 2) = *((_QWORD *)v117 + 2);
        v118 = v11[24];
        v119 = (_OWORD *)((char *)v9 + v118);
        v120 = (_OWORD *)((char *)v10 + v118);
        v121 = v120[1];
        *v119 = *v120;
        v119[1] = v121;
        v122 = v11[25];
        v123 = (_OWORD *)((char *)v9 + v122);
        v124 = (_OWORD *)((char *)v10 + v122);
        v125 = v124[1];
        *v123 = *v124;
        v123[1] = v125;
        *(_OWORD *)((char *)v9 + v11[26]) = *(_OWORD *)((char *)v10 + v11[26]);
        v126 = v11[27];
        v127 = (_OWORD *)((char *)v9 + v126);
        v128 = (_OWORD *)((char *)v10 + v126);
        v129 = v128[1];
        *v127 = *v128;
        v127[1] = v129;
        (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v228 + 56))(v9, 0, 1, v11);
      }
      v130 = v7[9];
      v131 = (char *)a1 + v130;
      v132 = (char *)a2 + v130;
      v133 = *((_OWORD *)v132 + 1);
      *(_OWORD *)v131 = *(_OWORD *)v132;
      *((_OWORD *)v131 + 1) = v133;
      v131[32] = v132[32];
      v134 = v7[10];
      v135 = (char *)a1 + v134;
      v136 = (char *)a2 + v134;
      v137 = sub_214424308();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v137 - 8) + 32))(v135, v136, v137);
      goto LABEL_35;
  }
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  return a1;
}

_OWORD *sub_21425FB4C(_OWORD *a1, _OWORD *a2)
{
  uint64_t v4;
  int EnumCaseMultiPayload;
  __int128 v6;
  int *v7;
  uint64_t v8;
  _OWORD *v9;
  _OWORD *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  int *v22;
  uint64_t v23;
  _OWORD *v24;
  _OWORD *v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  char *v93;
  char *v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;
  char *v98;
  char *v99;
  __int128 v100;
  __int128 v101;
  uint64_t v102;
  char *v103;
  char *v104;
  __int128 v105;
  __int128 v106;
  uint64_t v107;
  char *v108;
  char *v109;
  __int128 v110;
  __int128 v111;
  uint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  _OWORD *v119;
  _OWORD *v120;
  __int128 v121;
  uint64_t v122;
  _OWORD *v123;
  _OWORD *v124;
  __int128 v125;
  uint64_t v126;
  _OWORD *v127;
  _OWORD *v128;
  __int128 v129;
  uint64_t v130;
  char *v131;
  char *v132;
  __int128 v133;
  uint64_t v134;
  char *v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  char *v140;
  uint64_t v141;
  char *v142;
  char *v143;
  __int128 v144;
  __int128 v145;
  uint64_t v146;
  char *v147;
  char *v148;
  __int128 v149;
  __int128 v150;
  uint64_t v151;
  char *v152;
  char *v153;
  __int128 v154;
  __int128 v155;
  uint64_t v156;
  char *v157;
  char *v158;
  __int128 v159;
  __int128 v160;
  uint64_t v161;
  char *v162;
  char *v163;
  uint64_t v164;
  char *v165;
  char *v166;
  uint64_t v167;
  _OWORD *v168;
  _OWORD *v169;
  __int128 v170;
  uint64_t v171;
  _OWORD *v172;
  _OWORD *v173;
  __int128 v174;
  uint64_t v175;
  _OWORD *v176;
  _OWORD *v177;
  __int128 v178;
  uint64_t v179;
  char *v180;
  char *v181;
  uint64_t v182;
  char *v183;
  char *v184;
  __int128 v185;
  __int128 v186;
  uint64_t v187;
  char *v188;
  char *v189;
  __int128 v190;
  __int128 v191;
  uint64_t v192;
  char *v193;
  char *v194;
  __int128 v195;
  __int128 v196;
  uint64_t v197;
  char *v198;
  char *v199;
  __int128 v200;
  __int128 v201;
  uint64_t v202;
  char *v203;
  char *v204;
  uint64_t v205;
  char *v206;
  char *v207;
  uint64_t v208;
  _OWORD *v209;
  _OWORD *v210;
  __int128 v211;
  uint64_t v212;
  _OWORD *v213;
  _OWORD *v214;
  __int128 v215;
  uint64_t v216;
  _OWORD *v217;
  _OWORD *v218;
  __int128 v219;
  uint64_t v220;
  _OWORD *v221;
  _OWORD *v222;
  __int128 v223;
  uint64_t v224;
  char *v225;
  char *v226;
  uint64_t v228;
  uint64_t v229;

  if (a1 != a2)
  {
    sub_2141DD370((uint64_t)a1, type metadata accessor for AnyVectorizedRenderer.MarkRenderer);
    v4 = type metadata accessor for AnyVectorizedRenderer.MarkRenderer(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    switch(EnumCaseMultiPayload)
    {
      case 2:
        v14 = a2[1];
        *a1 = *a2;
        a1[1] = v14;
        *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
        *(_OWORD *)((char *)a1 + 40) = *(_OWORD *)((char *)a2 + 40);
        *(_OWORD *)((char *)a1 + 56) = *(_OWORD *)((char *)a2 + 56);
        v15 = *(int *)(type metadata accessor for RulesRenderer(0) + 32);
        v16 = (_OWORD *)((char *)a1 + v15);
        v17 = (_OWORD *)((char *)a2 + v15);
        v18 = (int *)type metadata accessor for ChartContentRenderContext.Environment(0);
        v19 = *((_QWORD *)v18 - 1);
        if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v19 + 48))(v17, 1, v18))
        {
          v20 = sub_2141D8BF8(qword_254D69B70);
          memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
        }
        else
        {
          v40 = v17[1];
          *v16 = *v17;
          v16[1] = v40;
          *(_OWORD *)((char *)v16 + 25) = *(_OWORD *)((char *)v17 + 25);
          *((_BYTE *)v16 + 41) = *((_BYTE *)v17 + 41);
          v41 = v17[4];
          v16[3] = v17[3];
          v16[4] = v41;
          *((_QWORD *)v16 + 10) = *((_QWORD *)v17 + 10);
          v42 = *(_OWORD *)((char *)v17 + 88);
          v43 = *(_OWORD *)((char *)v17 + 104);
          *(_OWORD *)((char *)v16 + 113) = *(_OWORD *)((char *)v17 + 113);
          *(_OWORD *)((char *)v16 + 104) = v43;
          *(_OWORD *)((char *)v16 + 88) = v42;
          *(_OWORD *)((char *)v16 + 136) = *(_OWORD *)((char *)v17 + 136);
          *((_BYTE *)v16 + 152) = *((_BYTE *)v17 + 152);
          *((_QWORD *)v16 + 20) = *((_QWORD *)v17 + 20);
          *((_BYTE *)v16 + 168) = *((_BYTE *)v17 + 168);
          v44 = v17[12];
          v16[11] = v17[11];
          v16[12] = v44;
          *((_BYTE *)v16 + 208) = *((_BYTE *)v17 + 208);
          v45 = v18[11];
          v46 = (char *)v16 + v45;
          v47 = (char *)v17 + v45;
          v48 = sub_214424308();
          v49 = *(_QWORD *)(v48 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48))(v47, 1, v48))
          {
            v50 = sub_2141D8BF8(&qword_253F134C8);
            memcpy(v46, v47, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v49 + 32))(v46, v47, v48);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v49 + 56))(v46, 0, 1, v48);
          }
          v71 = v18[12];
          v72 = (char *)v16 + v71;
          v73 = (char *)v17 + v71;
          *(_QWORD *)v72 = *(_QWORD *)v73;
          v72[8] = v73[8];
          *(_QWORD *)((char *)v16 + v18[13]) = *(_QWORD *)((char *)v17 + v18[13]);
          v74 = v18[14];
          v75 = (char *)v16 + v74;
          v76 = (char *)v17 + v74;
          v77 = sub_214424C68();
          v78 = *(_QWORD *)(v77 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v78 + 48))(v76, 1, v77))
          {
            v79 = sub_2141D8BF8(&qword_253F15C88);
            memcpy(v75, v76, *(_QWORD *)(*(_QWORD *)(v79 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v78 + 32))(v75, v76, v77);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v78 + 56))(v75, 0, 1, v77);
          }
          v138 = v18[15];
          v139 = (char *)v16 + v138;
          v140 = (char *)v17 + v138;
          *(_QWORD *)v139 = *(_QWORD *)v140;
          *((_WORD *)v139 + 4) = *((_WORD *)v140 + 4);
          *(_QWORD *)((char *)v16 + v18[16]) = *(_QWORD *)((char *)v17 + v18[16]);
          *(_QWORD *)((char *)v16 + v18[17]) = *(_QWORD *)((char *)v17 + v18[17]);
          v141 = v18[18];
          v142 = (char *)v16 + v141;
          v143 = (char *)v17 + v141;
          v144 = *((_OWORD *)v143 + 3);
          *((_OWORD *)v142 + 2) = *((_OWORD *)v143 + 2);
          *((_OWORD *)v142 + 3) = v144;
          *((_QWORD *)v142 + 8) = *((_QWORD *)v143 + 8);
          v145 = *((_OWORD *)v143 + 1);
          *(_OWORD *)v142 = *(_OWORD *)v143;
          *((_OWORD *)v142 + 1) = v145;
          v146 = v18[19];
          v147 = (char *)v16 + v146;
          v148 = (char *)v17 + v146;
          *((_QWORD *)v147 + 8) = *((_QWORD *)v148 + 8);
          v149 = *((_OWORD *)v148 + 3);
          *((_OWORD *)v147 + 2) = *((_OWORD *)v148 + 2);
          *((_OWORD *)v147 + 3) = v149;
          v150 = *((_OWORD *)v148 + 1);
          *(_OWORD *)v147 = *(_OWORD *)v148;
          *((_OWORD *)v147 + 1) = v150;
          v151 = v18[20];
          v152 = (char *)v16 + v151;
          v153 = (char *)v17 + v151;
          v154 = *((_OWORD *)v153 + 3);
          *((_OWORD *)v152 + 2) = *((_OWORD *)v153 + 2);
          *((_OWORD *)v152 + 3) = v154;
          *((_QWORD *)v152 + 8) = *((_QWORD *)v153 + 8);
          v155 = *((_OWORD *)v153 + 1);
          *(_OWORD *)v152 = *(_OWORD *)v153;
          *((_OWORD *)v152 + 1) = v155;
          v156 = v18[21];
          v157 = (char *)v16 + v156;
          v158 = (char *)v17 + v156;
          *((_QWORD *)v157 + 8) = *((_QWORD *)v158 + 8);
          v159 = *((_OWORD *)v158 + 3);
          *((_OWORD *)v157 + 2) = *((_OWORD *)v158 + 2);
          *((_OWORD *)v157 + 3) = v159;
          v160 = *((_OWORD *)v158 + 1);
          *(_OWORD *)v157 = *(_OWORD *)v158;
          *((_OWORD *)v157 + 1) = v160;
          v161 = v18[22];
          v162 = (char *)v16 + v161;
          v163 = (char *)v17 + v161;
          *(_OWORD *)v162 = *(_OWORD *)v163;
          *((_QWORD *)v162 + 2) = *((_QWORD *)v163 + 2);
          v164 = v18[23];
          v165 = (char *)v16 + v164;
          v166 = (char *)v17 + v164;
          *(_OWORD *)v165 = *(_OWORD *)v166;
          *((_QWORD *)v165 + 2) = *((_QWORD *)v166 + 2);
          v167 = v18[24];
          v168 = (_OWORD *)((char *)v16 + v167);
          v169 = (_OWORD *)((char *)v17 + v167);
          v170 = v169[1];
          *v168 = *v169;
          v168[1] = v170;
          v171 = v18[25];
          v172 = (_OWORD *)((char *)v16 + v171);
          v173 = (_OWORD *)((char *)v17 + v171);
          v174 = v173[1];
          *v172 = *v173;
          v172[1] = v174;
          *(_OWORD *)((char *)v16 + v18[26]) = *(_OWORD *)((char *)v17 + v18[26]);
          v175 = v18[27];
          v176 = (_OWORD *)((char *)v16 + v175);
          v177 = (_OWORD *)((char *)v17 + v175);
          v178 = v177[1];
          *v176 = *v177;
          v176[1] = v178;
          (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v19 + 56))(v16, 0, 1, v18);
        }
LABEL_36:
        swift_storeEnumTagMultiPayload();
        return a1;
      case 1:
        v21 = a2[1];
        *a1 = *a2;
        a1[1] = v21;
        *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
        *(_OWORD *)((char *)a1 + 40) = *(_OWORD *)((char *)a2 + 40);
        *(_OWORD *)((char *)a1 + 56) = *(_OWORD *)((char *)a2 + 56);
        v22 = (int *)type metadata accessor for PointsRenderer(0);
        v23 = v22[8];
        v24 = (_OWORD *)((char *)a1 + v23);
        v25 = (_OWORD *)((char *)a2 + v23);
        v26 = (int *)type metadata accessor for ChartContentRenderContext.Environment(0);
        v27 = *((_QWORD *)v26 - 1);
        if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v27 + 48))(v25, 1, v26))
        {
          v28 = sub_2141D8BF8(qword_254D69B70);
          memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
        }
        else
        {
          v229 = v27;
          v51 = v25[1];
          *v24 = *v25;
          v24[1] = v51;
          *(_OWORD *)((char *)v24 + 25) = *(_OWORD *)((char *)v25 + 25);
          *((_BYTE *)v24 + 41) = *((_BYTE *)v25 + 41);
          v52 = v25[4];
          v24[3] = v25[3];
          v24[4] = v52;
          *((_QWORD *)v24 + 10) = *((_QWORD *)v25 + 10);
          v53 = *(_OWORD *)((char *)v25 + 88);
          v54 = *(_OWORD *)((char *)v25 + 104);
          *(_OWORD *)((char *)v24 + 113) = *(_OWORD *)((char *)v25 + 113);
          *(_OWORD *)((char *)v24 + 104) = v54;
          *(_OWORD *)((char *)v24 + 88) = v53;
          *(_OWORD *)((char *)v24 + 136) = *(_OWORD *)((char *)v25 + 136);
          *((_BYTE *)v24 + 152) = *((_BYTE *)v25 + 152);
          *((_QWORD *)v24 + 20) = *((_QWORD *)v25 + 20);
          *((_BYTE *)v24 + 168) = *((_BYTE *)v25 + 168);
          v55 = v25[12];
          v24[11] = v25[11];
          v24[12] = v55;
          *((_BYTE *)v24 + 208) = *((_BYTE *)v25 + 208);
          v56 = v26[11];
          v57 = (char *)v24 + v56;
          v58 = (char *)v25 + v56;
          v59 = sub_214424308();
          v60 = *(_QWORD *)(v59 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v60 + 48))(v58, 1, v59))
          {
            v61 = sub_2141D8BF8(&qword_253F134C8);
            memcpy(v57, v58, *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v60 + 32))(v57, v58, v59);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v60 + 56))(v57, 0, 1, v59);
          }
          v80 = v26[12];
          v81 = (char *)v24 + v80;
          v82 = (char *)v25 + v80;
          *(_QWORD *)v81 = *(_QWORD *)v82;
          v81[8] = v82[8];
          *(_QWORD *)((char *)v24 + v26[13]) = *(_QWORD *)((char *)v25 + v26[13]);
          v83 = v26[14];
          v84 = (char *)v24 + v83;
          v85 = (char *)v25 + v83;
          v86 = sub_214424C68();
          v87 = *(_QWORD *)(v86 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v87 + 48))(v85, 1, v86))
          {
            v88 = sub_2141D8BF8(&qword_253F15C88);
            memcpy(v84, v85, *(_QWORD *)(*(_QWORD *)(v88 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v87 + 32))(v84, v85, v86);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v87 + 56))(v84, 0, 1, v86);
          }
          v179 = v26[15];
          v180 = (char *)v24 + v179;
          v181 = (char *)v25 + v179;
          *(_QWORD *)v180 = *(_QWORD *)v181;
          *((_WORD *)v180 + 4) = *((_WORD *)v181 + 4);
          *(_QWORD *)((char *)v24 + v26[16]) = *(_QWORD *)((char *)v25 + v26[16]);
          *(_QWORD *)((char *)v24 + v26[17]) = *(_QWORD *)((char *)v25 + v26[17]);
          v182 = v26[18];
          v183 = (char *)v24 + v182;
          v184 = (char *)v25 + v182;
          v185 = *((_OWORD *)v184 + 3);
          *((_OWORD *)v183 + 2) = *((_OWORD *)v184 + 2);
          *((_OWORD *)v183 + 3) = v185;
          *((_QWORD *)v183 + 8) = *((_QWORD *)v184 + 8);
          v186 = *((_OWORD *)v184 + 1);
          *(_OWORD *)v183 = *(_OWORD *)v184;
          *((_OWORD *)v183 + 1) = v186;
          v187 = v26[19];
          v188 = (char *)v24 + v187;
          v189 = (char *)v25 + v187;
          *((_QWORD *)v188 + 8) = *((_QWORD *)v189 + 8);
          v190 = *((_OWORD *)v189 + 3);
          *((_OWORD *)v188 + 2) = *((_OWORD *)v189 + 2);
          *((_OWORD *)v188 + 3) = v190;
          v191 = *((_OWORD *)v189 + 1);
          *(_OWORD *)v188 = *(_OWORD *)v189;
          *((_OWORD *)v188 + 1) = v191;
          v192 = v26[20];
          v193 = (char *)v24 + v192;
          v194 = (char *)v25 + v192;
          v195 = *((_OWORD *)v194 + 3);
          *((_OWORD *)v193 + 2) = *((_OWORD *)v194 + 2);
          *((_OWORD *)v193 + 3) = v195;
          *((_QWORD *)v193 + 8) = *((_QWORD *)v194 + 8);
          v196 = *((_OWORD *)v194 + 1);
          *(_OWORD *)v193 = *(_OWORD *)v194;
          *((_OWORD *)v193 + 1) = v196;
          v197 = v26[21];
          v198 = (char *)v24 + v197;
          v199 = (char *)v25 + v197;
          *((_QWORD *)v198 + 8) = *((_QWORD *)v199 + 8);
          v200 = *((_OWORD *)v199 + 3);
          *((_OWORD *)v198 + 2) = *((_OWORD *)v199 + 2);
          *((_OWORD *)v198 + 3) = v200;
          v201 = *((_OWORD *)v199 + 1);
          *(_OWORD *)v198 = *(_OWORD *)v199;
          *((_OWORD *)v198 + 1) = v201;
          v202 = v26[22];
          v203 = (char *)v24 + v202;
          v204 = (char *)v25 + v202;
          *(_OWORD *)v203 = *(_OWORD *)v204;
          *((_QWORD *)v203 + 2) = *((_QWORD *)v204 + 2);
          v205 = v26[23];
          v206 = (char *)v24 + v205;
          v207 = (char *)v25 + v205;
          *(_OWORD *)v206 = *(_OWORD *)v207;
          *((_QWORD *)v206 + 2) = *((_QWORD *)v207 + 2);
          v208 = v26[24];
          v209 = (_OWORD *)((char *)v24 + v208);
          v210 = (_OWORD *)((char *)v25 + v208);
          v211 = v210[1];
          *v209 = *v210;
          v209[1] = v211;
          v212 = v26[25];
          v213 = (_OWORD *)((char *)v24 + v212);
          v214 = (_OWORD *)((char *)v25 + v212);
          v215 = v214[1];
          *v213 = *v214;
          v213[1] = v215;
          *(_OWORD *)((char *)v24 + v26[26]) = *(_OWORD *)((char *)v25 + v26[26]);
          v216 = v26[27];
          v217 = (_OWORD *)((char *)v24 + v216);
          v218 = (_OWORD *)((char *)v25 + v216);
          v219 = v218[1];
          *v217 = *v218;
          v217[1] = v219;
          (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v229 + 56))(v24, 0, 1, v26);
        }
        v220 = v22[9];
        v221 = (_OWORD *)((char *)a1 + v220);
        v222 = (_OWORD *)((char *)a2 + v220);
        v223 = v222[1];
        *v221 = *v222;
        v221[1] = v223;
        *(_OWORD *)((char *)v221 + 25) = *(_OWORD *)((char *)v222 + 25);
        v224 = v22[10];
        v225 = (char *)a1 + v224;
        v226 = (char *)a2 + v224;
        v225[16] = v226[16];
        *(_OWORD *)v225 = *(_OWORD *)v226;
        goto LABEL_36;
      case 0:
        v6 = a2[1];
        *a1 = *a2;
        a1[1] = v6;
        *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
        *(_OWORD *)((char *)a1 + 40) = *(_OWORD *)((char *)a2 + 40);
        *(_OWORD *)((char *)a1 + 56) = *(_OWORD *)((char *)a2 + 56);
        v7 = (int *)type metadata accessor for RectanglesRenderer(0);
        v8 = v7[8];
        v9 = (_OWORD *)((char *)a1 + v8);
        v10 = (_OWORD *)((char *)a2 + v8);
        v11 = (int *)type metadata accessor for ChartContentRenderContext.Environment(0);
        v12 = *((_QWORD *)v11 - 1);
        if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
        {
          v13 = sub_2141D8BF8(qword_254D69B70);
          memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
        }
        else
        {
          v228 = v12;
          v29 = v10[1];
          *v9 = *v10;
          v9[1] = v29;
          *(_OWORD *)((char *)v9 + 25) = *(_OWORD *)((char *)v10 + 25);
          *((_BYTE *)v9 + 41) = *((_BYTE *)v10 + 41);
          v30 = v10[4];
          v9[3] = v10[3];
          v9[4] = v30;
          *((_QWORD *)v9 + 10) = *((_QWORD *)v10 + 10);
          v31 = *(_OWORD *)((char *)v10 + 88);
          v32 = *(_OWORD *)((char *)v10 + 104);
          *(_OWORD *)((char *)v9 + 113) = *(_OWORD *)((char *)v10 + 113);
          *(_OWORD *)((char *)v9 + 104) = v32;
          *(_OWORD *)((char *)v9 + 88) = v31;
          *(_OWORD *)((char *)v9 + 136) = *(_OWORD *)((char *)v10 + 136);
          *((_BYTE *)v9 + 152) = *((_BYTE *)v10 + 152);
          *((_QWORD *)v9 + 20) = *((_QWORD *)v10 + 20);
          *((_BYTE *)v9 + 168) = *((_BYTE *)v10 + 168);
          v33 = v10[12];
          v9[11] = v10[11];
          v9[12] = v33;
          *((_BYTE *)v9 + 208) = *((_BYTE *)v10 + 208);
          v34 = v11[11];
          v35 = (char *)v9 + v34;
          v36 = (char *)v10 + v34;
          v37 = sub_214424308();
          v38 = *(_QWORD *)(v37 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v36, 1, v37))
          {
            v39 = sub_2141D8BF8(&qword_253F134C8);
            memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v35, v36, v37);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v37);
          }
          v62 = v11[12];
          v63 = (char *)v9 + v62;
          v64 = (char *)v10 + v62;
          *(_QWORD *)v63 = *(_QWORD *)v64;
          v63[8] = v64[8];
          *(_QWORD *)((char *)v9 + v11[13]) = *(_QWORD *)((char *)v10 + v11[13]);
          v65 = v11[14];
          v66 = (char *)v9 + v65;
          v67 = (char *)v10 + v65;
          v68 = sub_214424C68();
          v69 = *(_QWORD *)(v68 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v69 + 48))(v67, 1, v68))
          {
            v70 = sub_2141D8BF8(&qword_253F15C88);
            memcpy(v66, v67, *(_QWORD *)(*(_QWORD *)(v70 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v69 + 32))(v66, v67, v68);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v69 + 56))(v66, 0, 1, v68);
          }
          v89 = v11[15];
          v90 = (char *)v9 + v89;
          v91 = (char *)v10 + v89;
          *(_QWORD *)v90 = *(_QWORD *)v91;
          *((_WORD *)v90 + 4) = *((_WORD *)v91 + 4);
          *(_QWORD *)((char *)v9 + v11[16]) = *(_QWORD *)((char *)v10 + v11[16]);
          *(_QWORD *)((char *)v9 + v11[17]) = *(_QWORD *)((char *)v10 + v11[17]);
          v92 = v11[18];
          v93 = (char *)v9 + v92;
          v94 = (char *)v10 + v92;
          v95 = *((_OWORD *)v94 + 3);
          *((_OWORD *)v93 + 2) = *((_OWORD *)v94 + 2);
          *((_OWORD *)v93 + 3) = v95;
          *((_QWORD *)v93 + 8) = *((_QWORD *)v94 + 8);
          v96 = *((_OWORD *)v94 + 1);
          *(_OWORD *)v93 = *(_OWORD *)v94;
          *((_OWORD *)v93 + 1) = v96;
          v97 = v11[19];
          v98 = (char *)v9 + v97;
          v99 = (char *)v10 + v97;
          *((_QWORD *)v98 + 8) = *((_QWORD *)v99 + 8);
          v100 = *((_OWORD *)v99 + 3);
          *((_OWORD *)v98 + 2) = *((_OWORD *)v99 + 2);
          *((_OWORD *)v98 + 3) = v100;
          v101 = *((_OWORD *)v99 + 1);
          *(_OWORD *)v98 = *(_OWORD *)v99;
          *((_OWORD *)v98 + 1) = v101;
          v102 = v11[20];
          v103 = (char *)v9 + v102;
          v104 = (char *)v10 + v102;
          v105 = *((_OWORD *)v104 + 3);
          *((_OWORD *)v103 + 2) = *((_OWORD *)v104 + 2);
          *((_OWORD *)v103 + 3) = v105;
          *((_QWORD *)v103 + 8) = *((_QWORD *)v104 + 8);
          v106 = *((_OWORD *)v104 + 1);
          *(_OWORD *)v103 = *(_OWORD *)v104;
          *((_OWORD *)v103 + 1) = v106;
          v107 = v11[21];
          v108 = (char *)v9 + v107;
          v109 = (char *)v10 + v107;
          *((_QWORD *)v108 + 8) = *((_QWORD *)v109 + 8);
          v110 = *((_OWORD *)v109 + 3);
          *((_OWORD *)v108 + 2) = *((_OWORD *)v109 + 2);
          *((_OWORD *)v108 + 3) = v110;
          v111 = *((_OWORD *)v109 + 1);
          *(_OWORD *)v108 = *(_OWORD *)v109;
          *((_OWORD *)v108 + 1) = v111;
          v112 = v11[22];
          v113 = (char *)v9 + v112;
          v114 = (char *)v10 + v112;
          *(_OWORD *)v113 = *(_OWORD *)v114;
          *((_QWORD *)v113 + 2) = *((_QWORD *)v114 + 2);
          v115 = v11[23];
          v116 = (char *)v9 + v115;
          v117 = (char *)v10 + v115;
          *(_OWORD *)v116 = *(_OWORD *)v117;
          *((_QWORD *)v116 + 2) = *((_QWORD *)v117 + 2);
          v118 = v11[24];
          v119 = (_OWORD *)((char *)v9 + v118);
          v120 = (_OWORD *)((char *)v10 + v118);
          v121 = v120[1];
          *v119 = *v120;
          v119[1] = v121;
          v122 = v11[25];
          v123 = (_OWORD *)((char *)v9 + v122);
          v124 = (_OWORD *)((char *)v10 + v122);
          v125 = v124[1];
          *v123 = *v124;
          v123[1] = v125;
          *(_OWORD *)((char *)v9 + v11[26]) = *(_OWORD *)((char *)v10 + v11[26]);
          v126 = v11[27];
          v127 = (_OWORD *)((char *)v9 + v126);
          v128 = (_OWORD *)((char *)v10 + v126);
          v129 = v128[1];
          *v127 = *v128;
          v127[1] = v129;
          (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v228 + 56))(v9, 0, 1, v11);
        }
        v130 = v7[9];
        v131 = (char *)a1 + v130;
        v132 = (char *)a2 + v130;
        v133 = *((_OWORD *)v132 + 1);
        *(_OWORD *)v131 = *(_OWORD *)v132;
        *((_OWORD *)v131 + 1) = v133;
        v131[32] = v132[32];
        v134 = v7[10];
        v135 = (char *)a1 + v134;
        v136 = (char *)a2 + v134;
        v137 = sub_214424308();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v137 - 8) + 32))(v135, v136, v137);
        goto LABEL_36;
    }
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  }
  return a1;
}

uint64_t sub_214260738()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_214260744(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AnyVectorizedRenderer.MarkRenderer(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_214260780()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_21426078C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AnyVectorizedRenderer.MarkRenderer(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for AnyVectorizedRenderer(uint64_t a1)
{
  return sub_2141FE0D4(a1, (uint64_t *)&unk_253F130D8);
}

uint64_t sub_2142607E0()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for AnyVectorizedRenderer.MarkRenderer(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_214260848()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_214260850(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t AssociatedTypeWitness;
  unint64_t v5;
  unint64_t v6;

  v2 = swift_checkMetadataState();
  if (v3 <= 0x3F)
  {
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v2 = type metadata accessor for BoundingSectionSpecification(319, AssociatedTypeWitness, a1[3], a1[6]);
    if (v5 <= 0x3F)
    {
      v2 = type metadata accessor for BoundingSectionSpecification(319, AssociatedTypeWitness, a1[4], a1[7]);
      if (v6 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return v2;
}

uint64_t *sub_214260954(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  _QWORD *v63;
  unint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  _QWORD *v70;
  _QWORD *v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  _QWORD *v77;
  unint64_t v78;
  _QWORD *v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  _QWORD *v85;
  unint64_t v86;
  _QWORD *v87;
  int v88;
  uint64_t v89;
  void (*v90)(_QWORD *, _QWORD *, uint64_t);
  char v91;
  unint64_t v92;
  unint64_t v93;
  void (*v94)(unint64_t, unint64_t, uint64_t);
  char v95;
  void (*v96)(_QWORD *, _QWORD *, uint64_t);
  char v97;
  unint64_t v98;
  unint64_t v99;
  void (*v100)(unint64_t, unint64_t, uint64_t);
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  _QWORD *v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  void (*v112)(unint64_t, unint64_t, uint64_t);
  char v113;
  void (*v114)(_QWORD *, _QWORD *, uint64_t);
  unint64_t v115;
  unint64_t v116;
  _OWORD *v117;
  _OWORD *v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  uint64_t v122;
  char v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  uint64_t v128;
  char v129;
  void (*v130)(_QWORD *, _QWORD *, uint64_t);
  char v131;
  unint64_t v132;
  unint64_t v133;
  void (*v134)(unint64_t, unint64_t, uint64_t);
  unint64_t v135;
  unint64_t v136;
  unsigned int v137;
  __int128 v138;
  uint64_t v139;
  uint64_t v140;
  unsigned int v141;
  __int128 v142;
  uint64_t v143;
  uint64_t v144;
  void (*v145)(_QWORD *, _QWORD *, uint64_t);
  unint64_t v146;
  unint64_t v147;
  void (*v148)(unint64_t, unint64_t, uint64_t);
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  __int128 v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char v157;
  _QWORD *v158;
  _QWORD *v159;
  int v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  char v164;
  _QWORD *v165;
  uint64_t v166;
  _QWORD *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  char v172;
  _QWORD *v173;
  _QWORD *v174;
  int v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  char v180;
  _QWORD *v181;
  _QWORD *v182;
  int v183;
  uint64_t v184;
  void (*v185)(_QWORD *, _QWORD *, uint64_t);
  unint64_t v186;
  unint64_t v187;
  void (*v188)(unint64_t, unint64_t, uint64_t);
  char v189;
  void (*v190)(_QWORD *, _QWORD *, uint64_t);
  char v191;
  unint64_t v192;
  unint64_t v193;
  void (*v194)(unint64_t, unint64_t, uint64_t);
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  char v200;
  _QWORD *v201;
  _QWORD *v202;
  int v203;
  uint64_t v204;
  unint64_t v205;
  unint64_t v206;
  void (*v207)(unint64_t, unint64_t, uint64_t);
  char v208;
  void (*v209)(_QWORD *, _QWORD *, uint64_t);
  unint64_t v210;
  unint64_t v211;
  _OWORD *v212;
  _OWORD *v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  uint64_t v217;
  char v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  uint64_t v223;
  char v224;
  void (*v225)(_QWORD *, _QWORD *, uint64_t);
  char v226;
  unint64_t v227;
  unint64_t v228;
  void (*v229)(unint64_t, unint64_t, uint64_t);
  unint64_t v230;
  unint64_t v231;
  unsigned int v232;
  __int128 v233;
  uint64_t v234;
  uint64_t v235;
  unsigned int v236;
  __int128 v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  void (*v241)(_QWORD *, _QWORD *, uint64_t);
  unint64_t v242;
  unint64_t v243;
  void (*v244)(unint64_t, unint64_t, uint64_t);
  uint64_t *result;
  unint64_t v246;
  unint64_t v247;
  unint64_t v248;
  uint64_t v249;
  uint64_t v250;
  unint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  unint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;

  v4 = a3[2];
  v5 = *(_QWORD *)(v4 - 8);
  v280 = *(_QWORD *)(v5 + 64);
  v273 = a3[3];
  v6 = *(_QWORD *)(v273 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  v8 = v7;
  v276 = sub_214423C48();
  v9 = *(_QWORD *)(v276 - 8);
  v10 = *(_DWORD *)(v9 + 80);
  v11 = v10;
  v12 = sub_214423C54();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_DWORD *)(v13 + 80);
  v15 = v14 | v10 | v7;
  v279 = v15 + 32;
  v16 = *(_QWORD *)(v6 + 64);
  v271 = v16 + v7;
  v272 = v6;
  if (((v16 + v8) & ~v8) + v16 > v16)
    v16 += (v16 + v7) & ~(unint64_t)v7;
  v274 = v10 + 8;
  v275 = v9;
  v17 = *(_QWORD *)(v9 + 64) + v14;
  v18 = ((v17 + (v274 & ~(unint64_t)v10)) & ~v14) + *(_QWORD *)(v13 + 64);
  if (v16 <= v18)
    v16 = ((v17 + ((v10 + 8) & ~(unint64_t)v10)) & ~v14)
        + *(_QWORD *)(v13 + 64);
  if (v16 <= 0x10)
    v19 = 16;
  else
    v19 = v16;
  v20 = v19 + ((v15 + 32) & ~(v15 | 7));
  v285 = v15 | 7;
  v21 = ((v20 + 1 + (v15 | 7)) & ~(v15 | 7)) + v20 + 1;
  v277 = v20 + 1;
  if (v20 + 1 > v21)
    v21 = v20 + 1;
  v22 = (v20 + 8) & 0xFFFFFFFFFFFFFFF8;
  if (v21 <= v22 + 113)
    v21 = v22 + 113;
  v23 = v22 + 49;
  if (v21 > v23)
    v23 = v21;
  if (v23 <= 0x19)
    v24 = 25;
  else
    v24 = v23;
  v25 = a3[4];
  v26 = *(_QWORD *)(v25 - 8);
  v27 = *(_DWORD *)(v26 + 80);
  v28 = v14 | v10 | v27;
  v29 = v28 | 7;
  v30 = v28 + 32;
  v31 = (v28 + 32) & ~(v28 | 7);
  v32 = *(_QWORD *)(v26 + 64);
  v33 = v32 + v27;
  if (((v32 + v27) & ~v27) + v32 > v32)
    v32 += (v32 + v27) & ~v27;
  if (v32 > v18)
    v18 = v32;
  if (v18 <= 0x10)
    v34 = 16;
  else
    v34 = v18;
  v35 = v34 + v31;
  v36 = v35 + 1 + v29;
  if (v35 + 1 > (v36 & (unint64_t)~v29) + v35 + 1)
    v37 = v35 + 1;
  else
    v37 = (v36 & ~v29) + v35 + 1;
  v38 = v35 + 8;
  v39 = (v35 + 8) & 0xFFFFFFFFFFFFFFF8;
  if (v37 <= v39 + 113)
    v37 = v39 + 113;
  v40 = v39 + 49;
  if (v37 > v40)
    v40 = v37;
  if (v40 <= 0x19)
    v41 = 25;
  else
    v41 = v40;
  v42 = v15 | *(_DWORD *)(v5 + 80) & 0xF8 | v27 | 7;
  if (v42 != 7
    || ((v10 | *(_DWORD *)(v13 + 80) | v7 | *(_DWORD *)(v26 + 80) | *(_DWORD *)(v5 + 80)) & 0x100000) != 0
    || (v43 = v285 + v280,
        v44 = v24 + v29 + 1,
        ((v41 + ((v44 + ((v285 + v280) & ~v285)) & ~v29) + 8) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18))
  {
    v51 = *a2;
    *a1 = *a2;
    v52 = (uint64_t *)(v51 + ((v42 + 16) & ~v42));
  }
  else
  {
    v269 = v30;
    v261 = v36;
    v262 = *(_QWORD *)(v25 - 8);
    v263 = a3[4];
    v264 = v38;
    v260 = v33;
    v266 = v17;
    v267 = *(_QWORD *)(v12 - 8);
    v268 = v12;
    v270 = v34;
    v281 = v41;
    v278 = v24;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, v4);
    v45 = (char *)a1 + v43;
    v46 = ((unint64_t)a1 + v43) & ~v285;
    v47 = (unint64_t)a2 + v43;
    v48 = ~v285;
    v49 = ((unint64_t)a2 + v43) & ~v285;
    v53 = v281;
    v265 = ~v11;
    v54 = ~v14;
    v55 = ~v29;
    v259 = ~v27;
    v56 = v281 + 1;
    switch(*(_BYTE *)((v47 & ~v285) + v278))
    {
      case 0:
        v57 = *(_QWORD *)v49;
        *(_BYTE *)(v46 + 8) = *(_BYTE *)((v47 & ~v285) + 8);
        *(_QWORD *)v46 = v57;
        *(_BYTE *)(v46 + v278) = 0;
        v58 = v270;
        break;
      case 1:
        v59 = *(_OWORD *)v49;
        *(_OWORD *)(v46 + 9) = *(_OWORD *)((v47 & ~v285) + 9);
        *(_OWORD *)v46 = v59;
        *(_BYTE *)(v46 + v278) = 1;
        v58 = v270;
        break;
      case 2:
        *(_QWORD *)v46 = *(_QWORD *)v49;
        *(_BYTE *)(v46 + v278) = 2;
        goto LABEL_48;
      case 3:
        *(_QWORD *)v46 = *(_QWORD *)v49;
        *(_QWORD *)(v46 + 8) = *(_QWORD *)((v47 & ~v285) + 8);
        *(_BYTE *)(v46 + v278) = 3;
        swift_retain();
LABEL_48:
        swift_retain();
        v53 = v281;
        v58 = v270;
        break;
      case 4:
        v283 = v281 + 1;
        v252 = ~v8;
        v256 = v44;
        v60 = *(_QWORD *)v49;
        v61 = *(_QWORD *)((v47 & ~v285) + 8);
        v62 = *(_BYTE *)((v47 & ~v285) + 0x10);
        sub_2141DD130(*(_QWORD *)(v47 & ~v285), v61, v62);
        *(_QWORD *)v46 = v60;
        *(_QWORD *)(v46 + 8) = v61;
        *(_BYTE *)(v46 + 16) = v62;
        *(_QWORD *)(v46 + 24) = *(_QWORD *)(v49 + 24);
        v251 = v46;
        v63 = (_QWORD *)((v279 + v46) & v48);
        v64 = v49;
        v65 = (_QWORD *)((v279 + v49) & v48);
        swift_bridgeObjectRetain();
        v58 = v270;
        switch((int)v49)
        {
          case 0:
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v272 + 16))(v63, v65, v273);
            *((_BYTE *)v63 + v19) = 0;
            goto LABEL_76;
          case 1:
            v90 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v272 + 16);
            v90(v63, v65, v273);
            v90((_QWORD *)(((unint64_t)v63 + v271) & v252), (_QWORD *)(((unint64_t)v65 + v271) & v252), v273);
            v49 = v64;
            v91 = 1;
            goto LABEL_75;
          case 2:
            *v63 = *v65;
            *((_BYTE *)v63 + v19) = 2;
            swift_retain();
            goto LABEL_76;
          case 3:
            *v63 = *v65;
            *(_QWORD *)(((v279 + v46) & v48) + 8) = *(_QWORD *)(((v279 + v49) & v48) + 8);
            *((_BYTE *)v63 + v19) = 3;
            swift_retain();
            swift_retain();
            goto LABEL_76;
          case 4:
            *v63 = *v65;
            v92 = ((unint64_t)v63 + v274) & v265;
            v93 = ((unint64_t)v65 + v274) & v265;
            v94 = *(void (**)(unint64_t, unint64_t, uint64_t))(v275 + 16);
            swift_retain();
            v94(v92, v93, v276);
            v49 = v64;
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v267 + 16))((v266 + v92) & v54, (v266 + v93) & v54, v268);
            v91 = 4;
LABEL_75:
            *((_BYTE *)v63 + v19) = v91;
LABEL_76:
            v95 = 4;
            break;
          default:
            if (v19 <= 3)
              v66 = v19;
            else
              v66 = 4;
            __asm { BR              X11 }
            return result;
        }
        goto LABEL_121;
      case 5:
        v283 = v281 + 1;
        v246 = (unint64_t)v45;
        v247 = v47;
        v253 = ~v8;
        v256 = v44;
        v67 = *(_QWORD *)v49;
        v68 = *(_QWORD *)((v47 & ~v285) + 8);
        v69 = *(_BYTE *)((v47 & ~v285) + 0x10);
        sub_2141DD130(*(_QWORD *)(v47 & ~v285), v68, v69);
        *(_QWORD *)v46 = v67;
        *(_QWORD *)(v46 + 8) = v68;
        *(_BYTE *)(v46 + 16) = v69;
        *(_QWORD *)(v46 + 24) = *(_QWORD *)(v49 + 24);
        v251 = v46;
        v70 = (_QWORD *)((v279 + v46) & v48);
        v248 = v49;
        v71 = (_QWORD *)((v279 + v49) & v48);
        v72 = *((unsigned __int8 *)v71 + v19);
        swift_bridgeObjectRetain();
        v249 = v55;
        switch(v72)
        {
          case 0:
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v272 + 16))(v70, v71, v273);
            *((_BYTE *)v70 + v19) = 0;
            goto LABEL_84;
          case 1:
            v96 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v272 + 16);
            v96(v70, v71, v273);
            v96((_QWORD *)(((unint64_t)v70 + v271) & v253), (_QWORD *)(((unint64_t)v71 + v271) & v253), v273);
            v97 = 1;
            goto LABEL_83;
          case 2:
            *v70 = *v71;
            *((_BYTE *)v70 + v19) = 2;
            swift_retain();
            goto LABEL_84;
          case 3:
            *v70 = *v71;
            *(_QWORD *)(((v279 + v46) & v48) + 8) = v71[1];
            *((_BYTE *)v70 + v19) = 3;
            swift_retain();
            swift_retain();
            goto LABEL_84;
          case 4:
            *v70 = *v71;
            v98 = ((unint64_t)v70 + v274) & v265;
            v99 = ((unint64_t)v71 + v274) & v265;
            v100 = *(void (**)(unint64_t, unint64_t, uint64_t))(v275 + 16);
            swift_retain();
            v100(v98, v99, v276);
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v267 + 16))((v266 + v98) & v54, (v266 + v99) & v54, v268);
            v97 = 4;
LABEL_83:
            *((_BYTE *)v70 + v19) = v97;
LABEL_84:
            v101 = ((v246 | v285) + v277) & v48;
            v102 = ((v247 | v285) + v277) & v48;
            v103 = *(_QWORD *)v102;
            v104 = *(_QWORD *)(v102 + 8);
            v105 = *(_BYTE *)(v102 + 0x10);
            sub_2141DD130(*(_QWORD *)v102, v104, v105);
            *(_QWORD *)v101 = v103;
            *(_QWORD *)(v101 + 8) = v104;
            *(_BYTE *)(v101 + 16) = v105;
            *(_QWORD *)(v101 + 24) = *(_QWORD *)(v102 + 0x18);
            v106 = (_QWORD *)((v279 + v101) & v48);
            v107 = (_QWORD *)((v279 + v102) & v48);
            swift_bridgeObjectRetain();
            v58 = v270;
            v55 = v249;
            v49 = v248;
            switch((int)v248)
            {
              case 0:
                (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v272 + 16))(v106, v107, v273);
                *((_BYTE *)v106 + v19) = 0;
                v95 = 5;
                goto LABEL_121;
              case 1:
                v145 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v272 + 16);
                v145(v106, v107, v273);
                v145((_QWORD *)(((unint64_t)v106 + v271) & v253), (_QWORD *)(((unint64_t)v107 + v271) & v253), v273);
                v49 = v248;
                *((_BYTE *)v106 + v19) = 1;
                v95 = 5;
                goto LABEL_121;
              case 2:
                *v106 = *v107;
                *((_BYTE *)v106 + v19) = 2;
                goto LABEL_119;
              case 3:
                *v106 = *v107;
                v106[1] = v107[1];
                *((_BYTE *)v106 + v19) = 3;
                swift_retain();
LABEL_119:
                swift_retain();
                v95 = 5;
                break;
              case 4:
                *v106 = *v107;
                v146 = ((unint64_t)v106 + v274) & v265;
                v147 = ((unint64_t)v107 + v274) & v265;
                v148 = *(void (**)(unint64_t, unint64_t, uint64_t))(v275 + 16);
                swift_retain();
                v148(v146, v147, v276);
                v49 = v248;
                (*(void (**)(unint64_t, unint64_t, uint64_t))(v267 + 16))((v266 + v146) & v54, (v266 + v147) & v54, v268);
                *((_BYTE *)v106 + v19) = 4;
                v95 = 5;
                break;
              default:
                if (v19 <= 3)
                  v108 = v19;
                else
                  v108 = 4;
                __asm { BR              X11 }
                return result;
            }
            return result;
          default:
            if (v19 <= 3)
              v73 = v19;
            else
              v73 = 4;
            __asm { BR              X11 }
            return result;
        }
LABEL_121:
        v46 = v251;
        *(_BYTE *)(v251 + v278) = v95;
        v53 = v281;
        v56 = v283;
        v44 = v256;
        break;
      case 6:
        v254 = ~v8;
        v286 = ~v14;
        v257 = v44;
        v74 = *(_QWORD *)v49;
        v75 = *(_QWORD *)(v49 + 8);
        v76 = *(_BYTE *)(v49 + 16);
        sub_2141DD130(*(_QWORD *)v49, v75, v76);
        *(_QWORD *)v46 = v74;
        *(_QWORD *)(v46 + 8) = v75;
        *(_BYTE *)(v46 + 16) = v76;
        *(_QWORD *)(v46 + 24) = *(_QWORD *)(v49 + 24);
        v77 = (_QWORD *)((v279 + v46) & v48);
        v78 = v49;
        v79 = (_QWORD *)((v279 + v49) & v48);
        v80 = *((unsigned __int8 *)v79 + v19);
        swift_bridgeObjectRetain();
        v58 = v270;
        switch(v80)
        {
          case 0:
            v109 = v55;
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v272 + 16))(v77, v79, v273);
            *((_BYTE *)v77 + v19) = 0;
            goto LABEL_96;
          case 1:
            v109 = v55;
            v114 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v272 + 16);
            v114(v77, v79, v273);
            v114((_QWORD *)(((unint64_t)v77 + v271) & v254), (_QWORD *)(((unint64_t)v79 + v271) & v254), v273);
            v113 = 1;
            goto LABEL_95;
          case 2:
            v109 = v55;
            *v77 = *v79;
            *((_BYTE *)v77 + v19) = 2;
            swift_retain();
            goto LABEL_96;
          case 3:
            v109 = v55;
            *v77 = *v79;
            *(_QWORD *)(((v279 + v46) & v48) + 8) = v79[1];
            *((_BYTE *)v77 + v19) = 3;
            swift_retain();
            swift_retain();
            goto LABEL_96;
          case 4:
            v109 = v55;
            *v77 = *v79;
            v110 = ((unint64_t)v77 + v274) & v265;
            v111 = ((unint64_t)v79 + v274) & v265;
            v112 = *(void (**)(unint64_t, unint64_t, uint64_t))(v275 + 16);
            swift_retain();
            v112(v110, v111, v276);
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v267 + 16))((v266 + v110) & v286, (v266 + v111) & v286, v268);
            v113 = 4;
LABEL_95:
            *((_BYTE *)v77 + v19) = v113;
LABEL_96:
            v56 = v281 + 1;
            v115 = ((v46 | 7) + v277) & 0xFFFFFFFFFFFFFFF8;
            v116 = ((v78 | 7) + v277) & 0xFFFFFFFFFFFFFFF8;
            *(_BYTE *)v115 = *(_BYTE *)v116;
            v117 = (_OWORD *)(v115 + 8);
            v118 = (_OWORD *)(v116 + 8);
            if (*(unsigned __int8 *)(v116 + 96) == 255)
            {
              v124 = *(_OWORD *)(v116 + 24);
              *v117 = *v118;
              *(_OWORD *)(v115 + 24) = v124;
              v125 = *(_OWORD *)(v116 + 40);
              v126 = *(_OWORD *)(v116 + 56);
              v127 = *(_OWORD *)(v116 + 72);
              *(_OWORD *)(v115 + 81) = *(_OWORD *)(v116 + 81);
              *(_OWORD *)(v115 + 56) = v126;
              *(_OWORD *)(v115 + 72) = v127;
              *(_OWORD *)(v115 + 40) = v125;
            }
            else
            {
              *v117 = *v118;
              v119 = *(_OWORD *)(v116 + 24);
              v120 = *(_OWORD *)(v116 + 40);
              v121 = *(_OWORD *)(v116 + 72);
              *(_OWORD *)(v115 + 56) = *(_OWORD *)(v116 + 56);
              *(_OWORD *)(v115 + 72) = v121;
              *(_OWORD *)(v115 + 24) = v119;
              *(_OWORD *)(v115 + 40) = v120;
              v122 = *(_QWORD *)(v116 + 88);
              v123 = *(_BYTE *)(v116 + 96);
              sub_2142625F8(v122, v123);
              *(_QWORD *)(v115 + 88) = v122;
              *(_BYTE *)(v115 + 96) = v123;
            }
            v128 = *(_QWORD *)(v116 + 104);
            v129 = *(_BYTE *)(v116 + 112);
            sub_2142625F8(v128, v129);
            *(_QWORD *)(v115 + 104) = v128;
            *(_BYTE *)(v115 + 112) = v129;
            *(_BYTE *)(v46 + v278) = 6;
            v53 = v281;
            v55 = v109;
            v44 = v257;
            v49 = v78;
            v54 = v286;
            break;
          default:
            if (v19 <= 3)
              v81 = v19;
            else
              v81 = 4;
            __asm { BR              X11 }
            return result;
        }
        return result;
      case 7:
        v255 = ~v8;
        v258 = v44;
        v82 = *(_QWORD *)v49;
        v83 = *(_QWORD *)((v47 & ~v285) + 8);
        v84 = *(_BYTE *)((v47 & ~v285) + 0x10);
        sub_2141DD130(*(_QWORD *)(v47 & ~v285), v83, v84);
        *(_QWORD *)v46 = v82;
        *(_QWORD *)(v46 + 8) = v83;
        *(_BYTE *)(v46 + 16) = v84;
        *(_QWORD *)(v46 + 24) = *(_QWORD *)(v49 + 24);
        v85 = (_QWORD *)((v279 + v46) & v48);
        v86 = v49;
        v87 = (_QWORD *)((v279 + v49) & v48);
        v88 = *((unsigned __int8 *)v87 + v19);
        swift_bridgeObjectRetain();
        v58 = v270;
        v250 = v55;
        switch(v88)
        {
          case 0:
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v272 + 16))(v85, v87, v273);
            *((_BYTE *)v85 + v19) = 0;
            goto LABEL_107;
          case 1:
            v130 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v272 + 16);
            v130(v85, v87, v273);
            v130((_QWORD *)(((unint64_t)v85 + v271) & v255), (_QWORD *)(((unint64_t)v87 + v271) & v255), v273);
            v131 = 1;
            goto LABEL_106;
          case 2:
            *v85 = *v87;
            *((_BYTE *)v85 + v19) = 2;
            swift_retain();
            goto LABEL_107;
          case 3:
            *v85 = *v87;
            *(_QWORD *)(((v279 + v46) & v48) + 8) = v87[1];
            *((_BYTE *)v85 + v19) = 3;
            swift_retain();
            swift_retain();
            goto LABEL_107;
          case 4:
            *v85 = *v87;
            v132 = ((unint64_t)v85 + v274) & v265;
            v133 = ((unint64_t)v87 + v274) & v265;
            v134 = *(void (**)(unint64_t, unint64_t, uint64_t))(v275 + 16);
            swift_retain();
            v134(v132, v133, v276);
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v267 + 16))((v266 + v132) & v54, (v266 + v133) & v54, v268);
            v131 = 4;
LABEL_106:
            *((_BYTE *)v85 + v19) = v131;
LABEL_107:
            v135 = ((v46 | 7) + v277) & 0xFFFFFFFFFFFFFFF8;
            v136 = ((v86 | 7) + v277) & 0xFFFFFFFFFFFFFFF8;
            *(_BYTE *)v135 = *(_BYTE *)v136;
            *(_BYTE *)(v135 + 1) = *(_BYTE *)(v136 + 1);
            *(_BYTE *)(v135 + 2) = *(_BYTE *)(v136 + 2);
            v137 = *(unsigned __int8 *)(v136 + 24);
            if (v137 <= 0xFB)
            {
              v139 = *(_QWORD *)(v136 + 8);
              v140 = *(_QWORD *)(v136 + 16);
              sub_2141DD140(v139, v140, *(_BYTE *)(v136 + 24));
              *(_QWORD *)(v135 + 8) = v139;
              *(_QWORD *)(v135 + 16) = v140;
              *(_BYTE *)(v135 + 24) = v137;
            }
            else
            {
              v138 = *(_OWORD *)(v136 + 8);
              *(_BYTE *)(v135 + 24) = *(_BYTE *)(v136 + 24);
              *(_OWORD *)(v135 + 8) = v138;
            }
            v141 = *(unsigned __int8 *)(v136 + 48);
            if (v141 <= 0xFB)
            {
              v143 = *(_QWORD *)(v136 + 32);
              v144 = *(_QWORD *)(v136 + 40);
              sub_2141DD140(v143, v144, *(_BYTE *)(v136 + 48));
              *(_QWORD *)(v135 + 32) = v143;
              *(_QWORD *)(v135 + 40) = v144;
              *(_BYTE *)(v135 + 48) = v141;
            }
            else
            {
              v142 = *(_OWORD *)(v136 + 32);
              *(_BYTE *)(v135 + 48) = *(_BYTE *)(v136 + 48);
              *(_OWORD *)(v135 + 32) = v142;
            }
            v53 = v281;
            v56 = v281 + 1;
            v44 = v258;
            *(_BYTE *)(v46 + v278) = 7;
            v55 = v250;
            v49 = v86;
            break;
          default:
            if (v19 <= 3)
              v89 = v19;
            else
              v89 = 4;
            __asm { BR              X11 }
            return result;
        }
        return result;
      default:
        if (v278 <= 3)
          v50 = v278;
        else
          v50 = 4;
        __asm { BR              X12 }
        return result;
    }
    v149 = (v44 + v46) & v55;
    v150 = (v44 + v49) & v55;
    switch(*(_BYTE *)(v150 + v53))
    {
      case 0:
        v152 = *(_QWORD *)v150;
        *(_BYTE *)(((v44 + v46) & v55) + 8) = *(_BYTE *)(v150 + 8);
        *(_QWORD *)v149 = v152;
        *(_BYTE *)(v149 + v53) = 0;
        v52 = a1;
        goto LABEL_206;
      case 1:
        v153 = *(_OWORD *)v150;
        *(_OWORD *)(((v44 + v46) & v55) + 9) = *(_OWORD *)(v150 + 9);
        *(_OWORD *)v149 = v153;
        *(_BYTE *)(v149 + v53) = 1;
        v52 = a1;
        goto LABEL_206;
      case 2:
        *(_QWORD *)v149 = *(_QWORD *)v150;
        *(_BYTE *)(v149 + v53) = 2;
        goto LABEL_132;
      case 3:
        *(_QWORD *)v149 = *(_QWORD *)v150;
        *(_QWORD *)(((v44 + v46) & v55) + 8) = *(_QWORD *)(v150 + 8);
        *(_BYTE *)(v149 + v53) = 3;
        swift_retain();
LABEL_132:
        swift_retain();
        v52 = a1;
        goto LABEL_206;
      case 4:
        v154 = v56;
        v155 = *(_QWORD *)v150;
        v156 = *(_QWORD *)(v150 + 8);
        v157 = *(_BYTE *)(v150 + 16);
        sub_2141DD130(*(_QWORD *)v150, v156, v157);
        *(_QWORD *)v149 = v155;
        *(_QWORD *)(v149 + 8) = v156;
        *(_BYTE *)(v149 + 16) = v157;
        *(_QWORD *)(v149 + 24) = *(_QWORD *)(v150 + 24);
        v158 = (_QWORD *)((v269 + v149) & v55);
        v159 = (_QWORD *)((v269 + v150) & v55);
        v160 = *((unsigned __int8 *)v159 + v58);
        swift_bridgeObjectRetain();
        v56 = v154;
        switch(v160)
        {
          case 0:
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v262 + 16))(v158, v159, v263);
            *((_BYTE *)v158 + v58) = 0;
            break;
          case 1:
            v185 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v262 + 16);
            v185(v158, v159, v263);
            v56 = v154;
            v185((_QWORD *)(((unint64_t)v158 + v260) & v259), (_QWORD *)(((unint64_t)v159 + v260) & v259), v263);
            *((_BYTE *)v158 + v58) = 1;
            break;
          case 2:
            *v158 = *v159;
            *((_BYTE *)v158 + v58) = 2;
            swift_retain();
            break;
          case 3:
            *v158 = *v159;
            v158[1] = v159[1];
            *((_BYTE *)v158 + v58) = 3;
            swift_retain();
            swift_retain();
            break;
          case 4:
            *v158 = *v159;
            v186 = ((unint64_t)v158 + v274) & v265;
            v187 = ((unint64_t)v159 + v274) & v265;
            v188 = *(void (**)(unint64_t, unint64_t, uint64_t))(v275 + 16);
            swift_retain();
            v188(v186, v187, v276);
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v267 + 16))((v266 + v186) & v54, (v266 + v187) & v54, v268);
            *((_BYTE *)v158 + v58) = 4;
            v56 = v154;
            break;
          default:
            if (v58 <= 3)
              v161 = v58;
            else
              v161 = 4;
            __asm { BR              X11 }
            return result;
        }
        v52 = a1;
        v189 = 4;
        goto LABEL_204;
      case 5:
        v284 = v56;
        v287 = v54;
        v162 = *(_QWORD *)v150;
        v163 = *(_QWORD *)(v150 + 8);
        v164 = *(_BYTE *)(v150 + 16);
        sub_2141DD130(*(_QWORD *)v150, v163, v164);
        *(_QWORD *)v149 = v162;
        *(_QWORD *)(v149 + 8) = v163;
        *(_BYTE *)(v149 + 16) = v164;
        *(_QWORD *)(v149 + 24) = *(_QWORD *)(v150 + 24);
        v165 = (_QWORD *)((v269 + v149) & v55);
        v166 = v55;
        v167 = (_QWORD *)((v269 + v150) & v55);
        swift_bridgeObjectRetain();
        switch((int)v55)
        {
          case 0:
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v262 + 16))(v165, v167, v263);
            *((_BYTE *)v165 + v58) = 0;
            goto LABEL_167;
          case 1:
            v190 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v262 + 16);
            v190(v165, v167, v263);
            v190((_QWORD *)(((unint64_t)v165 + v260) & v259), (_QWORD *)(((unint64_t)v167 + v260) & v259), v263);
            v55 = v166;
            v191 = 1;
            goto LABEL_166;
          case 2:
            *v165 = *v167;
            *((_BYTE *)v165 + v58) = 2;
            swift_retain();
            goto LABEL_167;
          case 3:
            *v165 = *v167;
            *(_QWORD *)(((v269 + v149) & v55) + 8) = *(_QWORD *)(((v269 + v150) & v55) + 8);
            *((_BYTE *)v165 + v58) = 3;
            swift_retain();
            swift_retain();
            goto LABEL_167;
          case 4:
            *v165 = *v167;
            v192 = ((unint64_t)v165 + v274) & v265;
            v193 = ((unint64_t)v167 + v274) & v265;
            v194 = *(void (**)(unint64_t, unint64_t, uint64_t))(v275 + 16);
            swift_retain();
            v194(v192, v193, v276);
            v55 = v166;
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v267 + 16))((v266 + v192) & v287, (v266 + v193) & v287, v268);
            v191 = 4;
LABEL_166:
            *((_BYTE *)v165 + v58) = v191;
LABEL_167:
            v195 = v55;
            v196 = (v261 + v149) & v55;
            v197 = (v261 + v150) & v195;
            v198 = *(_QWORD *)v197;
            v199 = *(_QWORD *)(v197 + 8);
            v200 = *(_BYTE *)(v197 + 0x10);
            sub_2141DD130(*(_QWORD *)v197, v199, v200);
            *(_QWORD *)v196 = v198;
            *(_QWORD *)(v196 + 8) = v199;
            *(_BYTE *)(v196 + 16) = v200;
            *(_QWORD *)(v196 + 24) = *(_QWORD *)(v197 + 0x18);
            v201 = (_QWORD *)((v269 + v196) & v195);
            v202 = (_QWORD *)((v269 + v197) & v195);
            v203 = *((unsigned __int8 *)v202 + v58);
            swift_bridgeObjectRetain();
            v56 = v284;
            switch(v203)
            {
              case 0:
                (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v262 + 16))(v201, v202, v263);
                *((_BYTE *)v201 + v58) = 0;
                break;
              case 1:
                v241 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v262 + 16);
                v241(v201, v202, v263);
                v56 = v284;
                v241((_QWORD *)(((unint64_t)v201 + v260) & v259), (_QWORD *)(((unint64_t)v202 + v260) & v259), v263);
                *((_BYTE *)v201 + v58) = 1;
                break;
              case 2:
                *v201 = *v202;
                *((_BYTE *)v201 + v58) = 2;
                swift_retain();
                break;
              case 3:
                *v201 = *v202;
                v201[1] = *(_QWORD *)(((v269 + v197) & v195) + 8);
                *((_BYTE *)v201 + v58) = 3;
                swift_retain();
                swift_retain();
                break;
              case 4:
                *v201 = *v202;
                v242 = ((unint64_t)v201 + v274) & v265;
                v243 = ((unint64_t)v202 + v274) & v265;
                v244 = *(void (**)(unint64_t, unint64_t, uint64_t))(v275 + 16);
                swift_retain();
                v244(v242, v243, v276);
                (*(void (**)(unint64_t, unint64_t, uint64_t))(v267 + 16))((v266 + v242) & v287, (v266 + v243) & v287, v268);
                *((_BYTE *)v201 + v58) = 4;
                v56 = v284;
                break;
              default:
                if (v58 <= 3)
                  v204 = v58;
                else
                  v204 = 4;
                __asm { BR              X11 }
                return result;
            }
            v52 = a1;
            v189 = 5;
            break;
          default:
            if (v58 <= 3)
              v168 = v58;
            else
              v168 = 4;
            __asm { BR              X11 }
            return result;
        }
LABEL_204:
        v240 = v281;
        goto LABEL_205;
      case 6:
        v169 = v56;
        v170 = *(_QWORD *)v150;
        v171 = *(_QWORD *)(v150 + 8);
        v172 = *(_BYTE *)(v150 + 16);
        sub_2141DD130(*(_QWORD *)v150, v171, v172);
        *(_QWORD *)v149 = v170;
        *(_QWORD *)(v149 + 8) = v171;
        *(_BYTE *)(v149 + 16) = v172;
        *(_QWORD *)(v149 + 24) = *(_QWORD *)(v150 + 24);
        v173 = (_QWORD *)((v269 + v149) & v55);
        v174 = (_QWORD *)((v269 + v150) & v55);
        v175 = *((unsigned __int8 *)v174 + v58);
        swift_bridgeObjectRetain();
        v56 = v169;
        switch(v175)
        {
          case 0:
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v262 + 16))(v173, v174, v263);
            *((_BYTE *)v173 + v58) = 0;
            goto LABEL_179;
          case 1:
            v209 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v262 + 16);
            v209(v173, v174, v263);
            v209((_QWORD *)(((unint64_t)v173 + v260) & v259), (_QWORD *)(((unint64_t)v174 + v260) & v259), v263);
            v208 = 1;
            goto LABEL_178;
          case 2:
            *v173 = *v174;
            *((_BYTE *)v173 + v58) = 2;
            swift_retain();
            goto LABEL_179;
          case 3:
            *v173 = *v174;
            v173[1] = v174[1];
            *((_BYTE *)v173 + v58) = 3;
            swift_retain();
            swift_retain();
            goto LABEL_179;
          case 4:
            *v173 = *v174;
            v205 = ((unint64_t)v173 + v274) & v265;
            v206 = ((unint64_t)v174 + v274) & v265;
            v207 = *(void (**)(unint64_t, unint64_t, uint64_t))(v275 + 16);
            swift_retain();
            v207(v205, v206, v276);
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v267 + 16))((v266 + v205) & v54, (v266 + v206) & v54, v268);
            v208 = 4;
LABEL_178:
            *((_BYTE *)v173 + v58) = v208;
LABEL_179:
            v210 = (v264 + v149) & 0xFFFFFFFFFFFFFFF8;
            v211 = (v264 + v150) & 0xFFFFFFFFFFFFFFF8;
            *(_BYTE *)v210 = *(_BYTE *)v211;
            v212 = (_OWORD *)(v210 + 8);
            v213 = (_OWORD *)(v211 + 8);
            if (*(unsigned __int8 *)(v211 + 96) == 255)
            {
              v219 = *(_OWORD *)(v211 + 24);
              *v212 = *v213;
              *(_OWORD *)(v210 + 24) = v219;
              v220 = *(_OWORD *)(v211 + 40);
              v221 = *(_OWORD *)(v211 + 56);
              v222 = *(_OWORD *)(v211 + 72);
              *(_OWORD *)(v210 + 81) = *(_OWORD *)(v211 + 81);
              *(_OWORD *)(v210 + 56) = v221;
              *(_OWORD *)(v210 + 72) = v222;
              *(_OWORD *)(v210 + 40) = v220;
            }
            else
            {
              *v212 = *v213;
              v214 = *(_OWORD *)(v211 + 24);
              v215 = *(_OWORD *)(v211 + 40);
              v216 = *(_OWORD *)(v211 + 72);
              *(_OWORD *)(v210 + 56) = *(_OWORD *)(v211 + 56);
              *(_OWORD *)(v210 + 72) = v216;
              *(_OWORD *)(v210 + 24) = v214;
              *(_OWORD *)(v210 + 40) = v215;
              v217 = *(_QWORD *)(v211 + 88);
              v218 = *(_BYTE *)(v211 + 96);
              sub_2142625F8(v217, v218);
              *(_QWORD *)(v210 + 88) = v217;
              *(_BYTE *)(v210 + 96) = v218;
            }
            v223 = *(_QWORD *)(v211 + 104);
            v224 = *(_BYTE *)(v211 + 112);
            sub_2142625F8(v223, v224);
            *(_QWORD *)(v210 + 104) = v223;
            *(_BYTE *)(v210 + 112) = v224;
            *(_BYTE *)(v149 + v281) = 6;
            v52 = a1;
            break;
          default:
            if (v58 <= 3)
              v176 = v58;
            else
              v176 = 4;
            __asm { BR              X11 }
            return result;
        }
        goto LABEL_206;
      case 7:
        v177 = v56;
        v178 = *(_QWORD *)v150;
        v179 = *(_QWORD *)(v150 + 8);
        v180 = *(_BYTE *)(v150 + 16);
        sub_2141DD130(*(_QWORD *)v150, v179, v180);
        *(_QWORD *)v149 = v178;
        *(_QWORD *)(v149 + 8) = v179;
        *(_BYTE *)(v149 + 16) = v180;
        *(_QWORD *)(v149 + 24) = *(_QWORD *)(v150 + 24);
        v181 = (_QWORD *)((v269 + v149) & v55);
        v182 = (_QWORD *)((v269 + v150) & v55);
        v183 = *((unsigned __int8 *)v182 + v58);
        swift_bridgeObjectRetain();
        v56 = v177;
        switch(v183)
        {
          case 0:
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v262 + 16))(v181, v182, v263);
            *((_BYTE *)v181 + v58) = 0;
            goto LABEL_190;
          case 1:
            v225 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v262 + 16);
            v225(v181, v182, v263);
            v225((_QWORD *)(((unint64_t)v181 + v260) & v259), (_QWORD *)(((unint64_t)v182 + v260) & v259), v263);
            v226 = 1;
            goto LABEL_189;
          case 2:
            *v181 = *v182;
            *((_BYTE *)v181 + v58) = 2;
            swift_retain();
            goto LABEL_190;
          case 3:
            *v181 = *v182;
            v181[1] = v182[1];
            *((_BYTE *)v181 + v58) = 3;
            swift_retain();
            swift_retain();
            goto LABEL_190;
          case 4:
            *v181 = *v182;
            v227 = ((unint64_t)v181 + v274) & v265;
            v228 = ((unint64_t)v182 + v274) & v265;
            v229 = *(void (**)(unint64_t, unint64_t, uint64_t))(v275 + 16);
            swift_retain();
            v229(v227, v228, v276);
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v267 + 16))((v266 + v227) & v54, (v266 + v228) & v54, v268);
            v226 = 4;
LABEL_189:
            *((_BYTE *)v181 + v58) = v226;
LABEL_190:
            v230 = (v264 + v149) & 0xFFFFFFFFFFFFFFF8;
            v231 = (v264 + v150) & 0xFFFFFFFFFFFFFFF8;
            *(_BYTE *)v230 = *(_BYTE *)v231;
            *(_BYTE *)(v230 + 1) = *(_BYTE *)(v231 + 1);
            *(_BYTE *)(v230 + 2) = *(_BYTE *)(v231 + 2);
            v232 = *(unsigned __int8 *)(v231 + 24);
            if (v232 <= 0xFB)
            {
              v234 = *(_QWORD *)(v231 + 8);
              v235 = *(_QWORD *)(v231 + 16);
              sub_2141DD140(v234, v235, *(_BYTE *)(v231 + 24));
              *(_QWORD *)(v230 + 8) = v234;
              *(_QWORD *)(v230 + 16) = v235;
              *(_BYTE *)(v230 + 24) = v232;
            }
            else
            {
              v233 = *(_OWORD *)(v231 + 8);
              *(_BYTE *)(v230 + 24) = *(_BYTE *)(v231 + 24);
              *(_OWORD *)(v230 + 8) = v233;
            }
            v236 = *(unsigned __int8 *)(v231 + 48);
            if (v236 <= 0xFB)
            {
              v238 = *(_QWORD *)(v231 + 32);
              v239 = *(_QWORD *)(v231 + 40);
              sub_2141DD140(v238, v239, *(_BYTE *)(v231 + 48));
              *(_QWORD *)(v230 + 32) = v238;
              *(_QWORD *)(v230 + 40) = v239;
              *(_BYTE *)(v230 + 48) = v236;
            }
            else
            {
              v237 = *(_OWORD *)(v231 + 32);
              *(_BYTE *)(v230 + 48) = *(_BYTE *)(v231 + 48);
              *(_OWORD *)(v230 + 32) = v237;
            }
            v52 = a1;
            v240 = v281;
            v189 = 7;
            break;
          default:
            if (v58 <= 3)
              v184 = v58;
            else
              v184 = 4;
            __asm { BR              X11 }
            return result;
        }
LABEL_205:
        *(_BYTE *)(v149 + v240) = v189;
LABEL_206:
        *(_QWORD *)(((v149 | 7) + v56) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((v150 | 7) + v56) & 0xFFFFFFFFFFFFF8);
        break;
      default:
        if (v53 <= 3)
          v151 = v53;
        else
          v151 = 4;
        __asm { BR              X12 }
        return result;
    }
  }
  swift_retain();
  return v52;
}

uint64_t sub_2142625F8(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) != 0)
    return swift_retain();
  return result;
}

uint64_t sub_214262604(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(uint64_t, uint64_t);
  void (*v52)(uint64_t, uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(uint64_t, uint64_t);
  unint64_t v58;
  int v59;
  void (*v60)(uint64_t, uint64_t);
  unint64_t v61;
  unsigned int v62;
  unsigned int v63;
  void (*v64)(uint64_t, uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void (*v98)(uint64_t, uint64_t);
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void (*v102)(uint64_t, uint64_t);
  unint64_t v103;
  int v104;
  void (*v105)(uint64_t, uint64_t);
  unint64_t v106;
  unsigned int v107;
  unsigned int v108;
  void (*v109)(uint64_t, uint64_t);
  uint64_t result;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  void (*v120)(uint64_t, uint64_t);
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;

  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v4 + 8))();
  v5 = *(_QWORD *)(v4 + 64) + a1;
  v133 = a2;
  v123 = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(v123 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v130 = sub_214423C48();
  v8 = *(_QWORD *)(v130 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v132 = sub_214423C54();
  v10 = *(_QWORD *)(v132 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = v11 | v9;
  v13 = v11 | v9 | v7;
  v14 = v13 | 7;
  v15 = v5 + (v13 | 7);
  v16 = v15 & ~(v13 | 7);
  v17 = v13 + 32;
  v18 = (v13 + 32) & ~(v13 | 7);
  v121 = v6;
  v19 = *(_QWORD *)(v6 + 64);
  v20 = v19 + v7;
  if (((v19 + v7) & ~v7) + v19 > v19)
    v19 += (v19 + v7) & ~v7;
  v127 = v9 + 8;
  v128 = *(_QWORD *)(v8 + 64) + v11;
  v129 = v8;
  v131 = *(_QWORD *)(v132 - 8);
  v21 = ((v128 + ((v9 + 8) & ~v9)) & ~v11) + *(_QWORD *)(v10 + 64);
  if (v19 <= v21)
    v19 = ((v128 + ((v9 + 8) & ~v9)) & ~v11) + *(_QWORD *)(v10 + 64);
  if (v19 <= 0x10)
    v22 = 16;
  else
    v22 = v19;
  v23 = v22 + v18;
  v24 = v23 + 1;
  v25 = ((v23 + 1 + v14) & ~v14) + v23 + 1;
  if (v23 + 1 > v25)
    v25 = v23 + 1;
  v26 = v23 + 8;
  v27 = (v23 + 8) & 0xFFFFFFFFFFFFFFF8;
  if (v25 <= v27 + 113)
    v25 = v27 + 113;
  v28 = v27 + 49;
  if (v25 > v28)
    v28 = v25;
  if (v28 <= 0x19)
    v29 = 25;
  else
    v29 = v28;
  v31 = ~v14;
  v32 = ~v7;
  v125 = ~v9;
  v126 = ~v11;
  switch(*(_BYTE *)(v16 + v29))
  {
    case 0:
    case 1:
      break;
    case 2:
      v33 = v11 | v9;
      v34 = v21;
      v35 = v29;
      goto LABEL_24;
    case 3:
      v33 = v11 | v9;
      v34 = v21;
      v35 = v29;
      swift_release();
LABEL_24:
      swift_release();
      v29 = v35;
      v21 = v34;
      v12 = v33;
      break;
    case 4:
      v111 = v32;
      v113 = v20;
      v36 = v29;
      v37 = ((v128 + ((v9 + 8) & ~v9)) & ~v11) + *(_QWORD *)(v10 + 64);
      v38 = v11 | v9;
      sub_2141ED0BC(*(_QWORD *)v16, *(_QWORD *)(v16 + 8), *(_BYTE *)(v16 + 16));
      swift_bridgeObjectRelease();
      v39 = (v17 + v16) & v31;
      switch(*(_BYTE *)(v39 + v22))
      {
        case 0:
          (*(void (**)(uint64_t, uint64_t))(v121 + 8))((v17 + v16) & v31, v123);
          break;
        case 1:
          v51 = *(void (**)(uint64_t, uint64_t))(v121 + 8);
          v51((v17 + v16) & v31, v123);
          v51((v113 + v39) & v111, v123);
          break;
        case 2:
          swift_release();
          break;
        case 3:
          swift_release();
          swift_release();
          break;
        case 4:
          swift_release();
          (*(void (**)(uint64_t, uint64_t))(v129 + 8))((v127 + v39) & v125, v130);
          (*(void (**)(uint64_t, uint64_t))(v131 + 8))((v128 + ((v127 + v39) & v125)) & v126, v132);
          break;
        default:
          if (v22 <= 3)
            v40 = v22;
          else
            v40 = 4;
          __asm { BR              X12 }
          return result;
      }
      v12 = v38;
      v21 = v37;
      v29 = v36;
      break;
    case 5:
      v114 = v20;
      v116 = v11 | v9;
      v117 = ((v128 + ((v9 + 8) & ~v9)) & ~v11) + *(_QWORD *)(v10 + 64);
      v118 = v29;
      sub_2141ED0BC(*(_QWORD *)v16, *(_QWORD *)(v16 + 8), *(_BYTE *)(v16 + 16));
      swift_bridgeObjectRelease();
      v41 = (v17 + v16) & v31;
      switch(*(_BYTE *)(v41 + v22))
      {
        case 0:
          (*(void (**)(uint64_t, uint64_t))(v121 + 8))((v17 + v16) & v31, v123);
          break;
        case 1:
          v52 = *(void (**)(uint64_t, uint64_t))(v121 + 8);
          v52((v17 + v16) & v31, v123);
          v52((v114 + v41) & v32, v123);
          break;
        case 2:
          swift_release();
          break;
        case 3:
          swift_release();
          swift_release();
          break;
        case 4:
          swift_release();
          v53 = (v127 + v41) & v125;
          (*(void (**)(uint64_t, uint64_t))(v129 + 8))(v53, v130);
          (*(void (**)(uint64_t, uint64_t))(v131 + 8))((v128 + v53) & v126, v132);
          break;
        default:
          if (v22 <= 3)
            v42 = v22;
          else
            v42 = 4;
          __asm { BR              X12 }
          return result;
      }
      v54 = ((v15 | v14) + v24) & v31;
      sub_2141ED0BC(*(_QWORD *)v54, *(_QWORD *)(v54 + 8), *(_BYTE *)(v54 + 0x10));
      swift_bridgeObjectRelease();
      v55 = (v17 + v54) & v31;
      switch(*(_BYTE *)(v55 + v22))
      {
        case 0:
          (*(void (**)(uint64_t, uint64_t))(v121 + 8))((v17 + v54) & v31, v123);
          break;
        case 1:
          v64 = *(void (**)(uint64_t, uint64_t))(v121 + 8);
          v64(v55, v123);
          v64((v114 + v55) & v32, v123);
          break;
        case 2:
          swift_release();
          break;
        case 3:
          swift_release();
          swift_release();
          break;
        case 4:
          swift_release();
          (*(void (**)(uint64_t, uint64_t))(v129 + 8))((v127 + v55) & v125, v130);
          (*(void (**)(uint64_t, uint64_t))(v131 + 8))((v128 + ((v127 + v55) & v125)) & v126, v132);
          break;
        default:
          if (v22 <= 3)
            v56 = v22;
          else
            v56 = 4;
          __asm { BR              X12 }
          return result;
      }
      goto LABEL_89;
    case 6:
      v43 = v32;
      v44 = v20;
      v117 = ((v128 + ((v9 + 8) & ~v9)) & ~v11) + *(_QWORD *)(v10 + 64);
      v118 = v29;
      v116 = v11 | v9;
      sub_2141ED0BC(*(_QWORD *)v16, *(_QWORD *)(v16 + 8), *(_BYTE *)(v16 + 16));
      swift_bridgeObjectRelease();
      v45 = (v17 + v16) & v31;
      switch(*(_BYTE *)(v45 + v22))
      {
        case 0:
          (*(void (**)(uint64_t, uint64_t))(v121 + 8))((v17 + v16) & v31, v123);
          break;
        case 1:
          v57 = *(void (**)(uint64_t, uint64_t))(v121 + 8);
          v57((v17 + v16) & v31, v123);
          v57((v44 + v45) & v43, v123);
          break;
        case 2:
          swift_release();
          break;
        case 3:
          swift_release();
          swift_release();
          break;
        case 4:
          swift_release();
          (*(void (**)(uint64_t, uint64_t))(v129 + 8))((v127 + v45) & v125, v130);
          (*(void (**)(uint64_t, uint64_t))(v131 + 8))((v128 + ((v127 + v45) & v125)) & v126, v132);
          break;
        default:
          if (v22 <= 3)
            v46 = v22;
          else
            v46 = 4;
          __asm { BR              X12 }
          return result;
      }
      v58 = (v26 + v16) & 0xFFFFFFFFFFFFFFF8;
      v59 = *(unsigned __int8 *)(v58 + 96);
      if (v59 != 255)
        sub_2142637C0(*(_QWORD *)(v58 + 88), v59 & 1);
      sub_2142637C0(*(_QWORD *)(v58 + 104), *(_BYTE *)(v58 + 112));
LABEL_89:
      v12 = v116;
      v21 = v117;
      v29 = v118;
      break;
    case 7:
      v112 = v32;
      v115 = v20;
      v119 = v29;
      v47 = ((v128 + ((v9 + 8) & ~v9)) & ~v11) + *(_QWORD *)(v10 + 64);
      v48 = v11 | v9;
      sub_2141ED0BC(*(_QWORD *)v16, *(_QWORD *)(v16 + 8), *(_BYTE *)(v16 + 16));
      swift_bridgeObjectRelease();
      v49 = (v17 + v16) & v31;
      switch(*(_BYTE *)(v49 + v22))
      {
        case 0:
          (*(void (**)(uint64_t, uint64_t))(v121 + 8))((v17 + v16) & v31, v123);
          break;
        case 1:
          v60 = *(void (**)(uint64_t, uint64_t))(v121 + 8);
          v60((v17 + v16) & v31, v123);
          v60((v115 + v49) & v112, v123);
          break;
        case 2:
          swift_release();
          break;
        case 3:
          swift_release();
          swift_release();
          break;
        case 4:
          swift_release();
          (*(void (**)(uint64_t, uint64_t))(v129 + 8))((v127 + v49) & v125, v130);
          (*(void (**)(uint64_t, uint64_t))(v131 + 8))((v128 + ((v127 + v49) & v125)) & v126, v132);
          break;
        default:
          if (v22 <= 3)
            v50 = v22;
          else
            v50 = 4;
          __asm { BR              X12 }
          return result;
      }
      v61 = (v26 + v16) & 0xFFFFFFFFFFFFFFF8;
      v62 = *(unsigned __int8 *)(v61 + 24);
      if (v62 <= 0xFB)
        sub_2141EF1B0(*(_QWORD *)(v61 + 8), *(_QWORD *)(v61 + 16), v62);
      v63 = *(unsigned __int8 *)(v61 + 48);
      v12 = v48;
      v21 = v47;
      v29 = v119;
      if (v63 <= 0xFB)
      {
        sub_2141EF1B0(*(_QWORD *)(v61 + 32), *(_QWORD *)(v61 + 40), v63);
        v29 = v119;
        v21 = v47;
        v12 = v48;
      }
      break;
    default:
      if (v29 <= 3)
        v30 = v29;
      else
        v30 = 4;
      __asm { BR              X13 }
      return result;
  }
  v65 = *(_QWORD *)(v133 + 32);
  v66 = *(_QWORD *)(v65 - 8);
  v67 = *(unsigned __int8 *)(v66 + 80);
  v68 = v12 | v67 | 7;
  v69 = (v16 | 1) + v68 + v29;
  v70 = v69 & ~v68;
  v71 = (v12 | v67) + 32;
  v72 = *(_QWORD *)(v66 + 64);
  v73 = v72 + v67;
  if (((v72 + v67) & ~v67) + v72 > v72)
    v72 += (v72 + v67) & ~v67;
  if (v72 <= v21)
    v72 = v21;
  if (v72 <= 0x10)
    v74 = 16;
  else
    v74 = v72;
  v75 = v74 + (v71 & ~v68);
  v76 = v75 + 1;
  v77 = ((v75 + 1 + v68) & ~v68) + v75 + 1;
  if (v75 + 1 > v77)
    v77 = v75 + 1;
  v78 = (v75 + 8) & 0xFFFFFFFFFFFFFFF8;
  if (v77 <= v78 + 113)
    v77 = v78 + 113;
  v79 = v78 + 49;
  if (v77 > v79)
    v79 = v77;
  if (v79 <= 0x19)
    v80 = 25;
  else
    v80 = v79;
  v82 = ~v68;
  switch(*(_BYTE *)(v70 + v80))
  {
    case 0:
    case 1:
      return swift_release();
    case 2:
LABEL_111:
      swift_release();
      break;
    case 3:
LABEL_112:
      swift_release();
      swift_release();
      break;
    case 4:
      v83 = ~v67;
      v84 = v73;
      v85 = *(_QWORD *)(v133 + 32);
      sub_2141ED0BC(*(_QWORD *)v70, *(_QWORD *)(v70 + 8), *(_BYTE *)(v70 + 16));
      swift_bridgeObjectRelease();
      v86 = (v71 + v70) & v82;
      switch(*(_BYTE *)(v86 + v74))
      {
        case 0:
          (*(void (**)(uint64_t, uint64_t))(v66 + 8))((v71 + v70) & v82, v85);
          return swift_release();
        case 1:
          v98 = *(void (**)(uint64_t, uint64_t))(v66 + 8);
          v98(v86, v85);
          v98((v84 + v86) & v83, v85);
          return swift_release();
        case 2:
          goto LABEL_111;
        case 3:
          goto LABEL_112;
        case 4:
          goto LABEL_169;
        default:
          if (v74 <= 3)
            v87 = v74;
          else
            v87 = 4;
          __asm { BR              X12 }
          return result;
      }
    case 5:
      v134 = ~v67;
      v122 = v73;
      v124 = v65;
      sub_2141ED0BC(*(_QWORD *)v70, *(_QWORD *)((v69 & ~v68) + 8), *(_BYTE *)((v69 & ~v68) + 0x10));
      swift_bridgeObjectRelease();
      v88 = (v71 + v70) & v82;
      switch(*(_BYTE *)(v88 + v74))
      {
        case 0:
          (*(void (**)(uint64_t, uint64_t))(v66 + 8))((v71 + v70) & v82, v124);
          break;
        case 1:
          v120 = *(void (**)(uint64_t, uint64_t))(v66 + 8);
          v120((v71 + v70) & v82, v124);
          v120((v122 + v88) & v134, v124);
          break;
        case 2:
          swift_release();
          break;
        case 3:
          swift_release();
          swift_release();
          break;
        case 4:
          swift_release();
          v99 = (v127 + v88) & v125;
          (*(void (**)(uint64_t, uint64_t))(v129 + 8))(v99, v130);
          (*(void (**)(uint64_t, uint64_t))(v131 + 8))((v128 + v99) & v126, v132);
          break;
        default:
          if (v74 <= 3)
            v89 = v74;
          else
            v89 = 4;
          __asm { BR              X12 }
          return result;
      }
      v100 = ((v69 | v68) + v76) & v82;
      sub_2141ED0BC(*(_QWORD *)v100, *(_QWORD *)(v100 + 8), *(_BYTE *)(v100 + 0x10));
      swift_bridgeObjectRelease();
      v86 = (v71 + v100) & v82;
      switch(*(_BYTE *)(v86 + v74))
      {
        case 0:
          (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v86, v124);
          return swift_release();
        case 1:
          v109 = *(void (**)(uint64_t, uint64_t))(v66 + 8);
          v109(v86, v124);
          v109((v122 + v86) & v134, v124);
          return swift_release();
        case 2:
          goto LABEL_111;
        case 3:
          goto LABEL_112;
        case 4:
LABEL_169:
          swift_release();
          (*(void (**)(uint64_t, uint64_t))(v129 + 8))((v127 + v86) & v125, v130);
          (*(void (**)(uint64_t, uint64_t))(v131 + 8))((v128 + ((v127 + v86) & v125)) & v126, v132);
          return swift_release();
        default:
          if (v74 <= 3)
            v101 = v74;
          else
            v101 = 4;
          __asm { BR              X12 }
          return result;
      }
    case 6:
      v135 = ~v67;
      v90 = v73;
      v91 = v65;
      sub_2141ED0BC(*(_QWORD *)v70, *(_QWORD *)(v70 + 8), *(_BYTE *)(v70 + 16));
      swift_bridgeObjectRelease();
      v92 = (v71 + v70) & v82;
      switch(*(_BYTE *)(v92 + v74))
      {
        case 0:
          (*(void (**)(uint64_t, uint64_t))(v66 + 8))((v71 + v70) & v82, v91);
          break;
        case 1:
          v102 = *(void (**)(uint64_t, uint64_t))(v66 + 8);
          v102(v92, v91);
          v102((v90 + v92) & v135, v91);
          break;
        case 2:
          swift_release();
          break;
        case 3:
          swift_release();
          swift_release();
          break;
        case 4:
          swift_release();
          (*(void (**)(uint64_t, uint64_t))(v129 + 8))((v127 + v92) & v125, v130);
          (*(void (**)(uint64_t, uint64_t))(v131 + 8))((v128 + ((v127 + v92) & v125)) & v126, v132);
          break;
        default:
          if (v74 <= 3)
            v93 = v74;
          else
            v93 = 4;
          __asm { BR              X12 }
          return result;
      }
      v103 = ((v70 | 7) + v76) & 0xFFFFFFFFFFFFFFF8;
      v104 = *(unsigned __int8 *)(v103 + 96);
      if (v104 != 255)
        sub_2142637C0(*(_QWORD *)(v103 + 88), v104 & 1);
      sub_2142637C0(*(_QWORD *)(v103 + 104), *(_BYTE *)(v103 + 112));
      break;
    case 7:
      v136 = ~v67;
      v94 = v73;
      v95 = v65;
      sub_2141ED0BC(*(_QWORD *)v70, *(_QWORD *)(v70 + 8), *(_BYTE *)(v70 + 16));
      swift_bridgeObjectRelease();
      v96 = (v71 + v70) & v82;
      switch(*(_BYTE *)(v96 + v74))
      {
        case 0:
          (*(void (**)(uint64_t, uint64_t))(v66 + 8))((v71 + v70) & v82, v95);
          break;
        case 1:
          v105 = *(void (**)(uint64_t, uint64_t))(v66 + 8);
          v105(v96, v95);
          v105((v94 + v96) & v136, v95);
          break;
        case 2:
          swift_release();
          break;
        case 3:
          swift_release();
          swift_release();
          break;
        case 4:
          swift_release();
          (*(void (**)(uint64_t, uint64_t))(v129 + 8))((v127 + v96) & v125, v130);
          (*(void (**)(uint64_t, uint64_t))(v131 + 8))((v128 + ((v127 + v96) & v125)) & v126, v132);
          break;
        default:
          if (v74 <= 3)
            v97 = v74;
          else
            v97 = 4;
          __asm { BR              X12 }
          return result;
      }
      v106 = ((v70 | 7) + v76) & 0xFFFFFFFFFFFFFFF8;
      v107 = *(unsigned __int8 *)(v106 + 24);
      if (v107 <= 0xFB)
        sub_2141EF1B0(*(_QWORD *)(v106 + 8), *(_QWORD *)(v106 + 16), v107);
      v108 = *(unsigned __int8 *)(v106 + 48);
      if (v108 <= 0xFB)
        sub_2141EF1B0(*(_QWORD *)(v106 + 32), *(_QWORD *)(v106 + 40), v108);
      break;
    default:
      if (v80 <= 3)
        v81 = v80;
      else
        v81 = 4;
      __asm { BR              X13 }
      return result;
  }
  return swift_release();
}

uint64_t sub_2142637C0(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) != 0)
    return swift_release();
  return result;
}

uint64_t sub_2142637CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  _QWORD *v77;
  _QWORD *v78;
  int v79;
  uint64_t v80;
  void (*v81)(_QWORD *, _QWORD *, uint64_t);
  char v82;
  unint64_t v83;
  unint64_t v84;
  void (*v85)(unint64_t, unint64_t, uint64_t);
  char v86;
  void (*v87)(_QWORD *, _QWORD *, uint64_t);
  char v88;
  unint64_t v89;
  unint64_t v90;
  void (*v91)(unint64_t, unint64_t, uint64_t);
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char v96;
  _QWORD *v97;
  _QWORD *v98;
  int v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  void (*v103)(unint64_t, unint64_t, uint64_t);
  char v104;
  void (*v105)(_QWORD *, _QWORD *, uint64_t);
  unint64_t v106;
  unint64_t v107;
  _OWORD *v108;
  _OWORD *v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  uint64_t v113;
  char v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  uint64_t v119;
  char v120;
  void (*v121)(_QWORD *, _QWORD *, uint64_t);
  char v122;
  unint64_t v123;
  unint64_t v124;
  void (*v125)(unint64_t, unint64_t, uint64_t);
  unint64_t v126;
  unint64_t v127;
  unsigned int v128;
  __int128 v129;
  uint64_t v130;
  uint64_t v131;
  unsigned int v132;
  __int128 v133;
  uint64_t v134;
  uint64_t v135;
  void (*v136)(_QWORD *, _QWORD *, uint64_t);
  char v137;
  unint64_t v138;
  unint64_t v139;
  void (*v140)(unint64_t, unint64_t, uint64_t);
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t v157;
  unint64_t v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  __int128 v164;
  char v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  char v171;
  uint64_t v172;
  _QWORD *v173;
  _QWORD *v174;
  int v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  char v181;
  uint64_t v182;
  _QWORD *v183;
  _QWORD *v184;
  int v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  char v193;
  _QWORD *v194;
  _QWORD *v195;
  int v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  char v203;
  _QWORD *v204;
  _QWORD *v205;
  int v206;
  uint64_t v207;
  void (*v208)(_QWORD *, _QWORD *, uint64_t);
  char v209;
  unint64_t v210;
  unint64_t v211;
  void (*v212)(unint64_t, unint64_t, uint64_t);
  void (*v213)(_QWORD *, uint64_t, uint64_t);
  char v214;
  unint64_t v215;
  unint64_t v216;
  void (*v217)(unint64_t, unint64_t, uint64_t);
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  char v222;
  _QWORD *v223;
  _QWORD *v224;
  int v225;
  uint64_t v226;
  unint64_t v227;
  unint64_t v228;
  void (*v229)(unint64_t, unint64_t, uint64_t);
  void (*v230)(_QWORD *, _QWORD *, uint64_t);
  unint64_t v231;
  unint64_t v232;
  _OWORD *v233;
  _OWORD *v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  uint64_t v238;
  char v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  uint64_t v244;
  char v245;
  void (*v246)(_QWORD *, _QWORD *, uint64_t);
  unint64_t v247;
  unint64_t v248;
  void (*v249)(unint64_t, unint64_t, uint64_t);
  unint64_t v250;
  unint64_t v251;
  unsigned int v252;
  __int128 v253;
  uint64_t v254;
  uint64_t v255;
  unsigned int v256;
  __int128 v257;
  uint64_t v258;
  uint64_t v259;
  void (*v260)(_QWORD *, _QWORD *, uint64_t);
  char v261;
  unint64_t v262;
  unint64_t v263;
  void (*v264)(unint64_t, unint64_t, uint64_t);
  uint64_t result;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 16))();
  v7 = *(_QWORD *)(v6 + 64);
  v301 = a3;
  v284 = *(_QWORD *)(a3 + 24);
  v8 = *(_QWORD *)(v284 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v298 = sub_214423C48();
  v10 = *(_QWORD *)(v298 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v300 = sub_214423C54();
  v12 = *(_QWORD *)(v300 - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = v13 | v11;
  v15 = v13 | v11 | v9;
  v16 = v15 | 7;
  v17 = (v15 | 7) + v7;
  v306 = a1;
  v18 = v17 + a1;
  v307 = v18 & ~(v15 | 7);
  v19 = v17 + a2;
  v20 = (v17 + a2) & ~(v15 | 7);
  v21 = v15 + 32;
  v22 = (v15 + 32) & ~(v15 | 7);
  v282 = v8;
  v23 = *(_QWORD *)(v8 + 64);
  v24 = v23 + v9;
  if (((v23 + v9) & ~v9) + v23 > v23)
    v23 += (v23 + v9) & ~v9;
  v295 = v11 + 8;
  v296 = v10;
  v297 = *(_QWORD *)(v10 + 64) + v13;
  v299 = *(_QWORD *)(v300 - 8);
  v25 = ((v297 + ((v11 + 8) & ~v11)) & ~v13) + *(_QWORD *)(v12 + 64);
  if (v23 <= v25)
    v23 = ((v297 + ((v11 + 8) & ~v11)) & ~v13) + *(_QWORD *)(v12 + 64);
  if (v23 <= 0x10)
    v26 = 16;
  else
    v26 = v23;
  v27 = v26 + v22;
  v28 = v27 + 1;
  v29 = ((v27 + 1 + v16) & ~v16) + v27 + 1;
  if (v27 + 1 > v29)
    v29 = v27 + 1;
  v30 = v27 + 8;
  v31 = (v27 + 8) & 0xFFFFFFFFFFFFFFF8;
  if (v29 <= v31 + 113)
    v29 = v31 + 113;
  v32 = v31 + 49;
  if (v29 > v32)
    v32 = v29;
  if (v32 <= 0x19)
    v33 = 25;
  else
    v33 = v32;
  v35 = ~v16;
  v293 = ~v11;
  v294 = ~v13;
  switch(*(_BYTE *)(v20 + v33))
  {
    case 0:
      v36 = *(_QWORD *)v20;
      v37 = v307;
      *(_BYTE *)(v307 + 8) = *(_BYTE *)(v20 + 8);
      *(_QWORD *)v307 = v36;
      *(_BYTE *)(v307 + v33) = 0;
      v38 = v301;
      break;
    case 1:
      v39 = *(_OWORD *)v20;
      v37 = v307;
      *(_OWORD *)(v307 + 9) = *(_OWORD *)(v20 + 9);
      *(_OWORD *)v307 = v39;
      *(_BYTE *)(v307 + v33) = 1;
      v38 = v301;
      break;
    case 2:
      v37 = v307;
      *(_QWORD *)v307 = *(_QWORD *)v20;
      *(_BYTE *)(v307 + v33) = 2;
      v40 = v14;
      v41 = v33;
      v42 = v20;
      goto LABEL_26;
    case 3:
      v37 = v307;
      *(_QWORD *)v307 = *(_QWORD *)v20;
      *(_QWORD *)(v307 + 8) = *(_QWORD *)(v20 + 8);
      *(_BYTE *)(v307 + v33) = 3;
      v40 = v14;
      v41 = v33;
      v42 = v20;
      swift_retain();
LABEL_26:
      swift_retain();
      v20 = v42;
      v33 = v41;
      v14 = v40;
      v38 = v301;
      break;
    case 4:
      v43 = ~v9;
      v44 = v24;
      v272 = v33;
      v276 = ((v297 + ((v11 + 8) & ~v11)) & ~v13) + *(_QWORD *)(v12 + 64);
      v279 = v13 | v11;
      v45 = *(_QWORD *)v20;
      v46 = *(_QWORD *)(v20 + 8);
      v47 = *(_BYTE *)(v20 + 16);
      v48 = v20;
      sub_2141DD130(*(_QWORD *)v20, v46, v47);
      *(_QWORD *)v307 = v45;
      *(_QWORD *)(v307 + 8) = v46;
      *(_BYTE *)(v307 + 16) = v47;
      v37 = v307;
      *(_QWORD *)(v307 + 24) = *(_QWORD *)(v48 + 24);
      v49 = (_QWORD *)((v21 + v307) & v35);
      v288 = v48;
      v50 = (_QWORD *)((v21 + v48) & v35);
      v51 = *((unsigned __int8 *)v50 + v26);
      swift_bridgeObjectRetain();
      switch(v51)
      {
        case 0:
          (*(void (**)(_QWORD *, uint64_t, uint64_t))(v282 + 16))(v49, (v21 + v48) & v35, v284);
          *((_BYTE *)v49 + v26) = 0;
          goto LABEL_54;
        case 1:
          v81 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v282 + 16);
          v81(v49, v50, v284);
          v81((_QWORD *)(((unint64_t)v49 + v44) & v43), (_QWORD *)(((unint64_t)v50 + v44) & v43), v284);
          v82 = 1;
          goto LABEL_53;
        case 2:
          *v49 = *v50;
          *((_BYTE *)v49 + v26) = 2;
          swift_retain();
          goto LABEL_54;
        case 3:
          *v49 = *v50;
          *(_QWORD *)(((v21 + v307) & v35) + 8) = *(_QWORD *)(((v21 + v48) & v35) + 8);
          *((_BYTE *)v49 + v26) = 3;
          swift_retain();
          swift_retain();
          goto LABEL_54;
        case 4:
          *v49 = *v50;
          v83 = ((unint64_t)v49 + v295) & v293;
          v84 = ((unint64_t)v50 + v295) & v293;
          v85 = *(void (**)(unint64_t, unint64_t, uint64_t))(v296 + 16);
          swift_retain();
          v85(v83, v84, v298);
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v299 + 16))((v297 + v83) & v294, (v297 + v84) & v294, v300);
          v82 = 4;
LABEL_53:
          *((_BYTE *)v49 + v26) = v82;
LABEL_54:
          v86 = 4;
          break;
        default:
          if (v26 <= 3)
            v52 = v26;
          else
            v52 = 4;
          __asm { BR              X11 }
          return result;
      }
      goto LABEL_101;
    case 5:
      v267 = v24;
      v268 = v19;
      v266 = ~v9;
      v272 = v33;
      v276 = ((v297 + ((v11 + 8) & ~v11)) & ~v13) + *(_QWORD *)(v12 + 64);
      v279 = v13 | v11;
      v53 = *(_QWORD *)v20;
      v54 = *(_QWORD *)(v20 + 8);
      v55 = *(_BYTE *)(v20 + 16);
      v56 = v20;
      sub_2141DD130(*(_QWORD *)v20, v54, v55);
      *(_QWORD *)v307 = v53;
      *(_QWORD *)(v307 + 8) = v54;
      *(_BYTE *)(v307 + 16) = v55;
      *(_QWORD *)(v307 + 24) = *(_QWORD *)(v56 + 24);
      v57 = (_QWORD *)((v21 + v307) & v35);
      v288 = v56;
      v58 = (_QWORD *)((v21 + v56) & v35);
      v59 = *((unsigned __int8 *)v58 + v26);
      swift_bridgeObjectRetain();
      switch(v59)
      {
        case 0:
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v282 + 16))(v57, v58, v284);
          *((_BYTE *)v57 + v26) = 0;
          goto LABEL_62;
        case 1:
          v87 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v282 + 16);
          v87(v57, v58, v284);
          v87((_QWORD *)(((unint64_t)v57 + v267) & v266), (_QWORD *)(((unint64_t)v58 + v267) & v266), v284);
          v88 = 1;
          goto LABEL_61;
        case 2:
          *v57 = *v58;
          *((_BYTE *)v57 + v26) = 2;
          swift_retain();
          goto LABEL_62;
        case 3:
          *v57 = *v58;
          *(_QWORD *)(((v21 + v307) & v35) + 8) = *(_QWORD *)(((v21 + v56) & v35) + 8);
          *((_BYTE *)v57 + v26) = 3;
          swift_retain();
          swift_retain();
          goto LABEL_62;
        case 4:
          *v57 = *v58;
          v89 = ((unint64_t)v57 + v295) & v293;
          v90 = ((unint64_t)v58 + v295) & v293;
          v91 = *(void (**)(unint64_t, unint64_t, uint64_t))(v296 + 16);
          swift_retain();
          v91(v89, v90, v298);
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v299 + 16))((v297 + v89) & v294, (v297 + v90) & v294, v300);
          v88 = 4;
LABEL_61:
          *((_BYTE *)v57 + v26) = v88;
LABEL_62:
          v92 = ((v18 | v16) + v28) & v35;
          v93 = ((v268 | v16) + v28) & v35;
          v94 = *(_QWORD *)v93;
          v95 = *(_QWORD *)(v93 + 8);
          v96 = *(_BYTE *)(v93 + 0x10);
          sub_2141DD130(*(_QWORD *)v93, v95, v96);
          *(_QWORD *)v92 = v94;
          *(_QWORD *)(v92 + 8) = v95;
          *(_BYTE *)(v92 + 16) = v96;
          *(_QWORD *)(v92 + 24) = *(_QWORD *)(v93 + 24);
          v97 = (_QWORD *)((v21 + v92) & v35);
          v98 = (_QWORD *)((v21 + v93) & v35);
          v99 = *((unsigned __int8 *)v98 + v26);
          swift_bridgeObjectRetain();
          v37 = v307;
          switch(v99)
          {
            case 0:
              (*(void (**)(_QWORD *, uint64_t, uint64_t))(v282 + 16))(v97, (v21 + v93) & v35, v284);
              *((_BYTE *)v97 + v26) = 0;
              break;
            case 1:
              v136 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v282 + 16);
              v136(v97, v98, v284);
              v136((_QWORD *)(((unint64_t)v97 + v267) & v266), (_QWORD *)(((unint64_t)v98 + v267) & v266), v284);
              v137 = 1;
              goto LABEL_99;
            case 2:
              *v97 = *v98;
              *((_BYTE *)v97 + v26) = 2;
              goto LABEL_97;
            case 3:
              *v97 = *v98;
              v97[1] = *(_QWORD *)(((v21 + v93) & v35) + 8);
              *((_BYTE *)v97 + v26) = 3;
              swift_retain();
LABEL_97:
              swift_retain();
              break;
            case 4:
              *v97 = *v98;
              v138 = ((unint64_t)v97 + v295) & v293;
              v139 = ((unint64_t)v98 + v295) & v293;
              v140 = *(void (**)(unint64_t, unint64_t, uint64_t))(v296 + 16);
              swift_retain();
              v140(v138, v139, v298);
              (*(void (**)(unint64_t, unint64_t, uint64_t))(v299 + 16))((v297 + v138) & v294, (v297 + v139) & v294, v300);
              v137 = 4;
LABEL_99:
              *((_BYTE *)v97 + v26) = v137;
              break;
            default:
              if (v26 <= 3)
                v100 = v26;
              else
                v100 = 4;
              __asm { BR              X11 }
              return result;
          }
          v86 = 5;
          break;
        default:
          if (v26 <= 3)
            v60 = v26;
          else
            v60 = 4;
          __asm { BR              X11 }
          return result;
      }
LABEL_101:
      v33 = v272;
      *(_BYTE *)(v37 + v272) = v86;
      v38 = v301;
      goto LABEL_102;
    case 6:
      v269 = v30;
      v273 = v33;
      v61 = ~v9;
      v62 = v24;
      v276 = ((v297 + ((v11 + 8) & ~v11)) & ~v13) + *(_QWORD *)(v12 + 64);
      v279 = v13 | v11;
      v63 = *(_QWORD *)v20;
      v64 = *(_QWORD *)(v20 + 8);
      v65 = *(_BYTE *)(v20 + 16);
      v66 = v20;
      sub_2141DD130(*(_QWORD *)v20, v64, v65);
      *(_QWORD *)v307 = v63;
      *(_QWORD *)(v307 + 8) = v64;
      *(_BYTE *)(v307 + 16) = v65;
      v37 = v307;
      *(_QWORD *)(v307 + 24) = *(_QWORD *)(v66 + 24);
      v67 = (_QWORD *)((v21 + v307) & v35);
      v288 = v66;
      v68 = (_QWORD *)((v21 + v66) & v35);
      v69 = *((unsigned __int8 *)v68 + v26);
      swift_bridgeObjectRetain();
      switch(v69)
      {
        case 0:
          (*(void (**)(_QWORD *, uint64_t, uint64_t))(v282 + 16))(v67, (v21 + v66) & v35, v284);
          *((_BYTE *)v67 + v26) = 0;
          goto LABEL_74;
        case 1:
          v105 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v282 + 16);
          v105(v67, v68, v284);
          v105((_QWORD *)(((unint64_t)v67 + v62) & v61), (_QWORD *)(((unint64_t)v68 + v62) & v61), v284);
          v104 = 1;
          goto LABEL_73;
        case 2:
          *v67 = *v68;
          *((_BYTE *)v67 + v26) = 2;
          swift_retain();
          goto LABEL_74;
        case 3:
          *v67 = *v68;
          *(_QWORD *)(((v21 + v307) & v35) + 8) = *(_QWORD *)(((v21 + v66) & v35) + 8);
          *((_BYTE *)v67 + v26) = 3;
          swift_retain();
          swift_retain();
          goto LABEL_74;
        case 4:
          *v67 = *v68;
          v101 = ((unint64_t)v67 + v295) & v293;
          v102 = ((unint64_t)v68 + v295) & v293;
          v103 = *(void (**)(unint64_t, unint64_t, uint64_t))(v296 + 16);
          swift_retain();
          v103(v101, v102, v298);
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v299 + 16))((v297 + v101) & v294, (v297 + v102) & v294, v300);
          v104 = 4;
LABEL_73:
          *((_BYTE *)v67 + v26) = v104;
LABEL_74:
          v38 = v301;
          v106 = (v269 + v307) & 0xFFFFFFFFFFFFFFF8;
          v107 = (v269 + v66) & 0xFFFFFFFFFFFFFFF8;
          *(_BYTE *)v106 = *(_BYTE *)v107;
          v108 = (_OWORD *)(v106 + 8);
          v109 = (_OWORD *)(v107 + 8);
          if (*(unsigned __int8 *)(v107 + 96) == 255)
          {
            v115 = *(_OWORD *)(v107 + 24);
            *v108 = *v109;
            *(_OWORD *)(v106 + 24) = v115;
            v116 = *(_OWORD *)(v107 + 40);
            v117 = *(_OWORD *)(v107 + 56);
            v118 = *(_OWORD *)(v107 + 72);
            *(_OWORD *)(v106 + 81) = *(_OWORD *)(v107 + 81);
            *(_OWORD *)(v106 + 56) = v117;
            *(_OWORD *)(v106 + 72) = v118;
            *(_OWORD *)(v106 + 40) = v116;
          }
          else
          {
            *v108 = *v109;
            v110 = *(_OWORD *)(v107 + 24);
            v111 = *(_OWORD *)(v107 + 40);
            v112 = *(_OWORD *)(v107 + 72);
            *(_OWORD *)(v106 + 56) = *(_OWORD *)(v107 + 56);
            *(_OWORD *)(v106 + 72) = v112;
            *(_OWORD *)(v106 + 24) = v110;
            *(_OWORD *)(v106 + 40) = v111;
            v113 = *(_QWORD *)(v107 + 88);
            v114 = *(_BYTE *)(v107 + 96);
            sub_2142625F8(v113, v114);
            *(_QWORD *)(v106 + 88) = v113;
            *(_BYTE *)(v106 + 96) = v114;
          }
          v119 = *(_QWORD *)(v107 + 104);
          v120 = *(_BYTE *)(v107 + 112);
          sub_2142625F8(v119, v120);
          *(_QWORD *)(v106 + 104) = v119;
          *(_BYTE *)(v106 + 112) = v120;
          v33 = v273;
          *(_BYTE *)(v307 + v273) = 6;
          break;
        default:
          if (v26 <= 3)
            v70 = v26;
          else
            v70 = 4;
          __asm { BR              X11 }
          return result;
      }
LABEL_102:
      v25 = v276;
      v14 = v279;
      v20 = v288;
      break;
    case 7:
      v270 = v30;
      v274 = v33;
      v71 = ~v9;
      v72 = v24;
      v277 = ((v297 + ((v11 + 8) & ~v11)) & ~v13) + *(_QWORD *)(v12 + 64);
      v280 = v13 | v11;
      v73 = *(_QWORD *)v20;
      v74 = *(_QWORD *)(v20 + 8);
      v75 = *(_BYTE *)(v20 + 16);
      v76 = v20;
      sub_2141DD130(*(_QWORD *)v20, v74, v75);
      *(_QWORD *)v307 = v73;
      *(_QWORD *)(v307 + 8) = v74;
      *(_BYTE *)(v307 + 16) = v75;
      v37 = v307;
      *(_QWORD *)(v307 + 24) = *(_QWORD *)(v76 + 24);
      v77 = (_QWORD *)((v21 + v307) & v35);
      v78 = (_QWORD *)((v21 + v76) & v35);
      v79 = *((unsigned __int8 *)v78 + v26);
      swift_bridgeObjectRetain();
      switch(v79)
      {
        case 0:
          (*(void (**)(_QWORD *, uint64_t, uint64_t))(v282 + 16))(v77, (v21 + v76) & v35, v284);
          *((_BYTE *)v77 + v26) = 0;
          goto LABEL_85;
        case 1:
          v121 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v282 + 16);
          v121(v77, v78, v284);
          v121((_QWORD *)(((unint64_t)v77 + v72) & v71), (_QWORD *)(((unint64_t)v78 + v72) & v71), v284);
          v122 = 1;
          goto LABEL_84;
        case 2:
          *v77 = *v78;
          *((_BYTE *)v77 + v26) = 2;
          swift_retain();
          goto LABEL_85;
        case 3:
          *v77 = *v78;
          *(_QWORD *)(((v21 + v307) & v35) + 8) = *(_QWORD *)(((v21 + v76) & v35) + 8);
          *((_BYTE *)v77 + v26) = 3;
          swift_retain();
          swift_retain();
          goto LABEL_85;
        case 4:
          *v77 = *v78;
          v123 = ((unint64_t)v77 + v295) & v293;
          v124 = ((unint64_t)v78 + v295) & v293;
          v125 = *(void (**)(unint64_t, unint64_t, uint64_t))(v296 + 16);
          swift_retain();
          v125(v123, v124, v298);
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v299 + 16))((v297 + v123) & v294, (v297 + v124) & v294, v300);
          v122 = 4;
LABEL_84:
          *((_BYTE *)v77 + v26) = v122;
LABEL_85:
          v126 = (v270 + v307) & 0xFFFFFFFFFFFFFFF8;
          v127 = (v270 + v76) & 0xFFFFFFFFFFFFFFF8;
          *(_BYTE *)v126 = *(_BYTE *)v127;
          *(_BYTE *)(v126 + 1) = *(_BYTE *)(v127 + 1);
          *(_BYTE *)(v126 + 2) = *(_BYTE *)(v127 + 2);
          v128 = *(unsigned __int8 *)(v127 + 24);
          if (v128 <= 0xFB)
          {
            v130 = *(_QWORD *)(v127 + 8);
            v131 = *(_QWORD *)(v127 + 16);
            sub_2141DD140(v130, v131, *(_BYTE *)(v127 + 24));
            *(_QWORD *)(v126 + 8) = v130;
            *(_QWORD *)(v126 + 16) = v131;
            *(_BYTE *)(v126 + 24) = v128;
          }
          else
          {
            v129 = *(_OWORD *)(v127 + 8);
            *(_BYTE *)(v126 + 24) = *(_BYTE *)(v127 + 24);
            *(_OWORD *)(v126 + 8) = v129;
          }
          v132 = *(unsigned __int8 *)(v127 + 48);
          if (v132 <= 0xFB)
          {
            v134 = *(_QWORD *)(v127 + 32);
            v135 = *(_QWORD *)(v127 + 40);
            sub_2141DD140(v134, v135, *(_BYTE *)(v127 + 48));
            *(_QWORD *)(v126 + 32) = v134;
            *(_QWORD *)(v126 + 40) = v135;
            *(_BYTE *)(v126 + 48) = v132;
          }
          else
          {
            v133 = *(_OWORD *)(v127 + 32);
            *(_BYTE *)(v126 + 48) = *(_BYTE *)(v127 + 48);
            *(_OWORD *)(v126 + 32) = v133;
          }
          v38 = v301;
          v25 = v277;
          v14 = v280;
          v33 = v274;
          v20 = v76;
          *(_BYTE *)(v307 + v274) = 7;
          break;
        default:
          if (v26 <= 3)
            v80 = v26;
          else
            v80 = 4;
          __asm { BR              X11 }
          return result;
      }
      return result;
    default:
      if (v33 <= 3)
        v34 = v33;
      else
        v34 = 4;
      __asm { BR              X13 }
      return result;
  }
  v141 = *(_QWORD *)(v38 + 32);
  v142 = *(_QWORD *)(v141 - 8);
  v143 = *(unsigned __int8 *)(v142 + 80);
  v144 = v14 | v143 | 7;
  v145 = v33 + v144 + 1;
  v146 = v145 + v37;
  v147 = (v145 + v37) & ~v144;
  v148 = v145 + v20;
  v149 = (v145 + v20) & ~v144;
  v150 = (v14 | v143) + 32;
  v151 = *(_QWORD *)(v142 + 64);
  v152 = v151 + v143;
  if (((v151 + v143) & ~v143) + v151 > v151)
    v151 += (v151 + v143) & ~v143;
  if (v151 <= v25)
    v151 = v25;
  if (v151 <= 0x10)
    v153 = 16;
  else
    v153 = v151;
  v154 = v153 + (v150 & ~v144);
  v155 = v154 + 1;
  v156 = ((v154 + 1 + v144) & ~v144) + v154 + 1;
  if (v154 + 1 > v156)
    v156 = v154 + 1;
  v157 = v154 + 8;
  v158 = (v154 + 8) & 0xFFFFFFFFFFFFFFF8;
  if (v156 <= v158 + 113)
    v156 = v158 + 113;
  v159 = v158 + 49;
  if (v156 > v159)
    v159 = v156;
  if (v159 <= 0x19)
    v160 = 25;
  else
    v160 = v159;
  v162 = ~v144;
  switch(*(_BYTE *)(v149 + v160))
  {
    case 0:
      v163 = *(_QWORD *)v149;
      *(_BYTE *)(v147 + 8) = *(_BYTE *)(v149 + 8);
      *(_QWORD *)v147 = v163;
      *(_BYTE *)(v147 + v160) = 0;
      goto LABEL_202;
    case 1:
      v164 = *(_OWORD *)v149;
      *(_OWORD *)(v147 + 9) = *(_OWORD *)(v149 + 9);
      *(_OWORD *)v147 = v164;
      v165 = 1;
      goto LABEL_201;
    case 2:
      *(_QWORD *)v147 = *(_QWORD *)v149;
      *(_BYTE *)(v147 + v160) = 2;
      swift_retain();
      goto LABEL_202;
    case 3:
      *(_QWORD *)v147 = *(_QWORD *)v149;
      *(_QWORD *)(v147 + 8) = *(_QWORD *)(v149 + 8);
      *(_BYTE *)(v147 + v160) = 3;
      swift_retain();
      swift_retain();
      goto LABEL_202;
    case 4:
      v289 = ~v143;
      v302 = v152;
      v166 = v141;
      v308 = v160;
      v167 = *(_QWORD *)v149;
      v168 = *(_QWORD *)(v149 + 8);
      v169 = v153;
      v170 = v147;
      v171 = *(_BYTE *)(v149 + 16);
      sub_2141DD130(*(_QWORD *)v149, v168, v171);
      *(_QWORD *)v170 = v167;
      *(_QWORD *)(v170 + 8) = v168;
      *(_BYTE *)(v170 + 16) = v171;
      v147 = v170;
      v172 = v169;
      *(_QWORD *)(v147 + 24) = *(_QWORD *)(v149 + 24);
      v173 = (_QWORD *)((v150 + v147) & v162);
      v174 = (_QWORD *)((v150 + v149) & v162);
      v175 = *((unsigned __int8 *)v174 + v169);
      swift_bridgeObjectRetain();
      switch(v175)
      {
        case 0:
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v142 + 16))(v173, v174, v166);
          *((_BYTE *)v173 + v169) = 0;
          v165 = 4;
          goto LABEL_200;
        case 1:
          v208 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v142 + 16);
          v208(v173, v174, v166);
          v208((_QWORD *)(((unint64_t)v173 + v302) & v289), (_QWORD *)(((unint64_t)v174 + v302) & v289), v166);
          v209 = 1;
          goto LABEL_155;
        case 2:
          *v173 = *v174;
          *((_BYTE *)v173 + v169) = 2;
          goto LABEL_153;
        case 3:
          *v173 = *v174;
          v173[1] = v174[1];
          *((_BYTE *)v173 + v169) = 3;
          swift_retain();
LABEL_153:
          swift_retain();
          v165 = 4;
          break;
        case 4:
          *v173 = *v174;
          v210 = ((unint64_t)v173 + v295) & v293;
          v211 = ((unint64_t)v174 + v295) & v293;
          v212 = *(void (**)(unint64_t, unint64_t, uint64_t))(v296 + 16);
          swift_retain();
          v212(v210, v211, v298);
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v299 + 16))((v297 + v210) & v294, (v297 + v211) & v294, v300);
          v209 = 4;
LABEL_155:
          *((_BYTE *)v173 + v172) = v209;
          v165 = 4;
          break;
        default:
          if (v169 <= 3)
            v176 = v169;
          else
            v176 = 4;
          __asm { BR              X11 }
          return result;
      }
      goto LABEL_200;
    case 5:
      v281 = v146;
      v283 = v148;
      v290 = ~v143;
      v271 = *(_QWORD *)(v141 - 8);
      v303 = v152;
      v275 = v141;
      v308 = v160;
      v177 = *(_QWORD *)v149;
      v178 = *(_QWORD *)(v149 + 8);
      v179 = v153;
      v180 = v149;
      v181 = *(_BYTE *)(v149 + 16);
      sub_2141DD130(v177, v178, v181);
      *(_QWORD *)v147 = v177;
      *(_QWORD *)(v147 + 8) = v178;
      *(_BYTE *)(v147 + 16) = v181;
      v149 = v180;
      v182 = v179;
      *(_QWORD *)(v147 + 24) = *(_QWORD *)(v149 + 24);
      v285 = v147;
      v183 = (_QWORD *)((v150 + v147) & v162);
      v184 = (_QWORD *)((v150 + v149) & v162);
      v185 = *((unsigned __int8 *)v184 + v179);
      swift_bridgeObjectRetain();
      v278 = v179;
      switch(v185)
      {
        case 0:
          (*(void (**)(_QWORD *, uint64_t, uint64_t))(v271 + 16))(v183, (v150 + v149) & v162, v275);
          *((_BYTE *)v183 + v179) = 0;
          goto LABEL_163;
        case 1:
          v213 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v271 + 16);
          v213(v183, (v150 + v149) & v162, v275);
          v213((_QWORD *)(((unint64_t)v183 + v303) & v290), ((unint64_t)v184 + v303) & v290, v275);
          v214 = 1;
          goto LABEL_162;
        case 2:
          *v183 = *v184;
          *((_BYTE *)v183 + v179) = 2;
          swift_retain();
          goto LABEL_163;
        case 3:
          *v183 = *v184;
          v183[1] = *(_QWORD *)(((v150 + v149) & v162) + 8);
          *((_BYTE *)v183 + v179) = 3;
          swift_retain();
          swift_retain();
          goto LABEL_163;
        case 4:
          *v183 = *v184;
          v215 = ((unint64_t)v183 + v295) & v293;
          v216 = ((unint64_t)v184 + v295) & v293;
          v217 = *(void (**)(unint64_t, unint64_t, uint64_t))(v296 + 16);
          swift_retain();
          v217(v215, v216, v298);
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v299 + 16))((v297 + v215) & v294, (v297 + v216) & v294, v300);
          v214 = 4;
LABEL_162:
          *((_BYTE *)v183 + v182) = v214;
LABEL_163:
          v218 = ((v281 | v144) + v155) & v162;
          v219 = ((v283 | v144) + v155) & v162;
          v220 = *(_QWORD *)v219;
          v221 = *(_QWORD *)(v219 + 8);
          v222 = *(_BYTE *)(v219 + 0x10);
          sub_2141DD130(*(_QWORD *)v219, v221, v222);
          *(_QWORD *)v218 = v220;
          *(_QWORD *)(v218 + 8) = v221;
          *(_BYTE *)(v218 + 16) = v222;
          *(_QWORD *)(v218 + 24) = *(_QWORD *)(v219 + 0x18);
          v223 = (_QWORD *)((v150 + v218) & v162);
          v224 = (_QWORD *)((v150 + v219) & v162);
          v225 = *((unsigned __int8 *)v224 + v278);
          swift_bridgeObjectRetain();
          v147 = v285;
          switch(v225)
          {
            case 0:
              (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v271 + 16))(v223, v224, v275);
              *((_BYTE *)v223 + v278) = 0;
              break;
            case 1:
              v260 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v271 + 16);
              v260(v223, v224, v275);
              v260((_QWORD *)(((unint64_t)v223 + v303) & v290), (_QWORD *)(((unint64_t)v224 + v303) & v290), v275);
              v261 = 1;
              goto LABEL_198;
            case 2:
              *v223 = *v224;
              *((_BYTE *)v223 + v278) = 2;
              goto LABEL_196;
            case 3:
              *v223 = *v224;
              v223[1] = v224[1];
              *((_BYTE *)v223 + v278) = 3;
              swift_retain();
LABEL_196:
              swift_retain();
              break;
            case 4:
              *v223 = *v224;
              v262 = ((unint64_t)v223 + v295) & v293;
              v263 = ((unint64_t)v224 + v295) & v293;
              v264 = *(void (**)(unint64_t, unint64_t, uint64_t))(v296 + 16);
              swift_retain();
              v264(v262, v263, v298);
              (*(void (**)(unint64_t, unint64_t, uint64_t))(v299 + 16))((v297 + v262) & v294, (v297 + v263) & v294, v300);
              v261 = 4;
LABEL_198:
              *((_BYTE *)v223 + v278) = v261;
              break;
            default:
              if (v278 <= 3)
                v226 = v278;
              else
                v226 = 4;
              __asm { BR              X11 }
              return result;
          }
          v165 = 5;
          break;
        default:
          if (v179 <= 3)
            v186 = v179;
          else
            v186 = 4;
          __asm { BR              X11 }
          return result;
      }
      goto LABEL_200;
    case 6:
      v286 = v157;
      v291 = ~v143;
      v187 = *(_QWORD *)(v141 - 8);
      v304 = v152;
      v188 = v141;
      v309 = v160;
      v189 = *(_QWORD *)v149;
      v190 = *(_QWORD *)(v149 + 8);
      v191 = v153;
      v192 = v147;
      v193 = *(_BYTE *)(v149 + 16);
      sub_2141DD130(*(_QWORD *)v149, v190, v193);
      *(_QWORD *)v192 = v189;
      *(_QWORD *)(v192 + 8) = v190;
      *(_BYTE *)(v192 + 16) = v193;
      v147 = v192;
      *(_QWORD *)(v192 + 24) = *(_QWORD *)(v149 + 24);
      v194 = (_QWORD *)((v150 + v192) & v162);
      v195 = (_QWORD *)((v150 + v149) & v162);
      v196 = *((unsigned __int8 *)v195 + v191);
      swift_bridgeObjectRetain();
      switch(v196)
      {
        case 0:
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v187 + 16))(v194, v195, v188);
          *((_BYTE *)v194 + v191) = 0;
          break;
        case 1:
          v230 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v187 + 16);
          v230(v194, v195, v188);
          v230((_QWORD *)(((unint64_t)v194 + v304) & v291), (_QWORD *)(((unint64_t)v195 + v304) & v291), v188);
          *((_BYTE *)v194 + v191) = 1;
          break;
        case 2:
          *v194 = *v195;
          *((_BYTE *)v194 + v191) = 2;
          swift_retain();
          break;
        case 3:
          *v194 = *v195;
          v194[1] = v195[1];
          *((_BYTE *)v194 + v191) = 3;
          swift_retain();
          swift_retain();
          break;
        case 4:
          *v194 = *v195;
          v227 = ((unint64_t)v194 + v295) & v293;
          v228 = ((unint64_t)v195 + v295) & v293;
          v229 = *(void (**)(unint64_t, unint64_t, uint64_t))(v296 + 16);
          swift_retain();
          v229(v227, v228, v298);
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v299 + 16))((v297 + v227) & v294, (v297 + v228) & v294, v300);
          *((_BYTE *)v194 + v191) = 4;
          break;
        default:
          if (v191 <= 3)
            v197 = v191;
          else
            v197 = 4;
          __asm { BR              X11 }
          return result;
      }
      v160 = v309;
      v231 = (v286 + v147) & 0xFFFFFFFFFFFFFFF8;
      v232 = (v286 + v149) & 0xFFFFFFFFFFFFFFF8;
      *(_BYTE *)v231 = *(_BYTE *)v232;
      v233 = (_OWORD *)(v231 + 8);
      v234 = (_OWORD *)(v232 + 8);
      if (*(unsigned __int8 *)(v232 + 96) == 255)
      {
        v240 = *(_OWORD *)(v232 + 24);
        *v233 = *v234;
        *(_OWORD *)(v231 + 24) = v240;
        v241 = *(_OWORD *)(v232 + 40);
        v242 = *(_OWORD *)(v232 + 56);
        v243 = *(_OWORD *)(v232 + 72);
        *(_OWORD *)(v231 + 81) = *(_OWORD *)(v232 + 81);
        *(_OWORD *)(v231 + 56) = v242;
        *(_OWORD *)(v231 + 72) = v243;
        *(_OWORD *)(v231 + 40) = v241;
      }
      else
      {
        *v233 = *v234;
        v235 = *(_OWORD *)(v232 + 24);
        v236 = *(_OWORD *)(v232 + 40);
        v237 = *(_OWORD *)(v232 + 72);
        *(_OWORD *)(v231 + 56) = *(_OWORD *)(v232 + 56);
        *(_OWORD *)(v231 + 72) = v237;
        *(_OWORD *)(v231 + 24) = v235;
        *(_OWORD *)(v231 + 40) = v236;
        v238 = *(_QWORD *)(v232 + 88);
        v239 = *(_BYTE *)(v232 + 96);
        sub_2142625F8(v238, v239);
        *(_QWORD *)(v231 + 88) = v238;
        *(_BYTE *)(v231 + 96) = v239;
      }
      v244 = *(_QWORD *)(v232 + 104);
      v245 = *(_BYTE *)(v232 + 112);
      sub_2142625F8(v244, v245);
      *(_QWORD *)(v231 + 104) = v244;
      *(_BYTE *)(v231 + 112) = v245;
      v165 = 6;
      goto LABEL_201;
    case 7:
      v287 = v157;
      v292 = ~v143;
      v305 = v152;
      v198 = v141;
      v308 = v160;
      v199 = *(_QWORD *)v149;
      v200 = *(_QWORD *)(v149 + 8);
      v201 = v153;
      v202 = v147;
      v203 = *(_BYTE *)(v149 + 16);
      sub_2141DD130(*(_QWORD *)v149, v200, v203);
      *(_QWORD *)v202 = v199;
      *(_QWORD *)(v202 + 8) = v200;
      *(_BYTE *)(v202 + 16) = v203;
      v147 = v202;
      *(_QWORD *)(v202 + 24) = *(_QWORD *)(v149 + 24);
      v204 = (_QWORD *)((v150 + v202) & v162);
      v205 = (_QWORD *)((v150 + v149) & v162);
      v206 = *((unsigned __int8 *)v205 + v201);
      swift_bridgeObjectRetain();
      switch(v206)
      {
        case 0:
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v142 + 16))(v204, v205, v198);
          *((_BYTE *)v204 + v201) = 0;
          break;
        case 1:
          v246 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v142 + 16);
          v246(v204, v205, v198);
          v246((_QWORD *)(((unint64_t)v204 + v305) & v292), (_QWORD *)(((unint64_t)v205 + v305) & v292), v198);
          *((_BYTE *)v204 + v201) = 1;
          break;
        case 2:
          *v204 = *v205;
          *((_BYTE *)v204 + v201) = 2;
          swift_retain();
          break;
        case 3:
          *v204 = *v205;
          v204[1] = v205[1];
          *((_BYTE *)v204 + v201) = 3;
          swift_retain();
          swift_retain();
          break;
        case 4:
          *v204 = *v205;
          v247 = ((unint64_t)v204 + v295) & v293;
          v248 = ((unint64_t)v205 + v295) & v293;
          v249 = *(void (**)(unint64_t, unint64_t, uint64_t))(v296 + 16);
          swift_retain();
          v249(v247, v248, v298);
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v299 + 16))((v297 + v247) & v294, (v297 + v248) & v294, v300);
          *((_BYTE *)v204 + v201) = 4;
          break;
        default:
          if (v201 <= 3)
            v207 = v201;
          else
            v207 = 4;
          __asm { BR              X11 }
          return result;
      }
      v250 = (v287 + v147) & 0xFFFFFFFFFFFFFFF8;
      v251 = (v287 + v149) & 0xFFFFFFFFFFFFFFF8;
      *(_BYTE *)v250 = *(_BYTE *)v251;
      *(_BYTE *)(v250 + 1) = *(_BYTE *)(v251 + 1);
      *(_BYTE *)(v250 + 2) = *(_BYTE *)(v251 + 2);
      v252 = *(unsigned __int8 *)(v251 + 24);
      if (v252 <= 0xFB)
      {
        v254 = *(_QWORD *)(v251 + 8);
        v255 = *(_QWORD *)(v251 + 16);
        sub_2141DD140(v254, v255, *(_BYTE *)(v251 + 24));
        *(_QWORD *)(v250 + 8) = v254;
        *(_QWORD *)(v250 + 16) = v255;
        *(_BYTE *)(v250 + 24) = v252;
      }
      else
      {
        v253 = *(_OWORD *)(v251 + 8);
        *(_BYTE *)(v250 + 24) = *(_BYTE *)(v251 + 24);
        *(_OWORD *)(v250 + 8) = v253;
      }
      v256 = *(unsigned __int8 *)(v251 + 48);
      if (v256 <= 0xFB)
      {
        v258 = *(_QWORD *)(v251 + 32);
        v259 = *(_QWORD *)(v251 + 40);
        sub_2141DD140(v258, v259, *(_BYTE *)(v251 + 48));
        *(_QWORD *)(v250 + 32) = v258;
        *(_QWORD *)(v250 + 40) = v259;
        *(_BYTE *)(v250 + 48) = v256;
      }
      else
      {
        v257 = *(_OWORD *)(v251 + 32);
        *(_BYTE *)(v250 + 48) = *(_BYTE *)(v251 + 48);
        *(_OWORD *)(v250 + 32) = v257;
      }
      v165 = 7;
LABEL_200:
      v160 = v308;
LABEL_201:
      *(_BYTE *)(v147 + v160) = v165;
LABEL_202:
      *(_QWORD *)(((v147 | 7) + v160 + 1) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((v149 | 7) + v160 + 1) & 0xFFFFFFFFFFFFF8);
      swift_retain();
      return v306;
    default:
      if (v160 <= 3)
        v161 = v160;
      else
        v161 = 4;
      __asm { BR              X13 }
      return result;
  }
}

uint64_t sub_214265330(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(uint64_t, uint64_t);
  unint64_t v55;
  void (*v56)(uint64_t, uint64_t);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(uint64_t, uint64_t);
  unint64_t v62;
  int v63;
  void (*v64)(uint64_t, uint64_t);
  uint64_t v65;
  unint64_t v66;
  unsigned int v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  _QWORD *v78;
  _QWORD *v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  _QWORD *v86;
  _QWORD *v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  _QWORD *v94;
  _QWORD *v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char v102;
  _QWORD *v103;
  _QWORD *v104;
  int v105;
  uint64_t v106;
  void (*v107)(_QWORD *, _QWORD *, uint64_t);
  uint64_t v108;
  char v109;
  unint64_t v110;
  unint64_t v111;
  void (*v112)(unint64_t, unint64_t, uint64_t);
  char v113;
  uint64_t v114;
  void (*v115)(_QWORD *, _QWORD *, uint64_t);
  unint64_t v116;
  char *v117;
  unint64_t v118;
  unint64_t v119;
  void (*v120)(unint64_t, unint64_t, uint64_t);
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char v125;
  _QWORD *v126;
  _QWORD *v127;
  int v128;
  uint64_t v129;
  unint64_t v130;
  unint64_t v131;
  void (*v132)(unint64_t, unint64_t, uint64_t);
  void (*v133)(_QWORD *, _QWORD *, uint64_t);
  unint64_t v134;
  unint64_t v135;
  _OWORD *v136;
  _OWORD *v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  uint64_t v141;
  char v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  uint64_t v147;
  char v148;
  void (*v149)(_QWORD *, _QWORD *, uint64_t);
  uint64_t v150;
  char v151;
  unint64_t v152;
  unint64_t v153;
  void (*v154)(unint64_t, unint64_t, uint64_t);
  unint64_t v155;
  unint64_t v156;
  unsigned int v157;
  __int128 v158;
  uint64_t v159;
  uint64_t v160;
  unsigned int v161;
  __int128 v162;
  uint64_t v163;
  uint64_t v164;
  void (*v165)(_QWORD *, _QWORD *, uint64_t);
  char v166;
  unint64_t v167;
  unint64_t v168;
  void (*v169)(unint64_t, unint64_t, uint64_t);
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  unint64_t v183;
  unint64_t v184;
  uint64_t v185;
  unint64_t v186;
  unint64_t v187;
  unint64_t v188;
  unint64_t v189;
  uint64_t v190;
  uint64_t v191;
  unint64_t v192;
  uint64_t v193;
  unint64_t v194;
  unint64_t v195;
  unint64_t v196;
  unint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  void (*v207)(uint64_t, uint64_t);
  uint64_t v208;
  uint64_t v209;
  unint64_t v210;
  uint64_t v211;
  void (*v212)(uint64_t, uint64_t);
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  void (*v218)(uint64_t, uint64_t);
  unint64_t v219;
  int v220;
  uint64_t v221;
  void (*v222)(uint64_t, uint64_t);
  uint64_t v223;
  unint64_t v224;
  unsigned int v225;
  unsigned int v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  __int128 v231;
  char v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  char v237;
  _QWORD *v238;
  _QWORD *v239;
  int v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  char v246;
  _QWORD *v247;
  _QWORD *v248;
  int v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  char v255;
  _QWORD *v256;
  _QWORD *v257;
  int v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  char v264;
  _QWORD *v265;
  _QWORD *v266;
  int v267;
  uint64_t v268;
  void (*v269)(_QWORD *, _QWORD *, uint64_t);
  char v270;
  unint64_t v271;
  unint64_t v272;
  void (*v273)(unint64_t, unint64_t, uint64_t);
  uint64_t v274;
  void (*v275)(_QWORD *, _QWORD *, uint64_t);
  char v276;
  unint64_t v277;
  unint64_t v278;
  void (*v279)(unint64_t, unint64_t, uint64_t);
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  char v284;
  _QWORD *v285;
  _QWORD *v286;
  int v287;
  uint64_t v288;
  unint64_t v289;
  unint64_t v290;
  void (*v291)(unint64_t, unint64_t, uint64_t);
  char v292;
  void (*v293)(_QWORD *, _QWORD *, uint64_t);
  unint64_t v294;
  unint64_t v295;
  _OWORD *v296;
  _OWORD *v297;
  __int128 v298;
  __int128 v299;
  __int128 v300;
  uint64_t v301;
  char v302;
  __int128 v303;
  __int128 v304;
  __int128 v305;
  __int128 v306;
  uint64_t v307;
  char v308;
  void (*v309)(_QWORD *, _QWORD *, uint64_t);
  char v310;
  unint64_t v311;
  unint64_t v312;
  void (*v313)(unint64_t, unint64_t, uint64_t);
  unint64_t v314;
  unint64_t v315;
  unsigned int v316;
  __int128 v317;
  uint64_t v318;
  uint64_t v319;
  unsigned int v320;
  __int128 v321;
  uint64_t v322;
  uint64_t v323;
  void (*v324)(_QWORD *, _QWORD *, uint64_t);
  char v325;
  unint64_t v326;
  unint64_t v327;
  void (*v328)(unint64_t, unint64_t, uint64_t);
  uint64_t result;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  unint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  unint64_t v346;
  unint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  unint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;

  v3 = a3;
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 24))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(v3 + 24);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v357 = sub_214423C48();
  v11 = *(_QWORD *)(v357 - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v13 = sub_214423C54();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(unsigned __int8 *)(v14 + 80);
  v16 = v15 | v12;
  v17 = v15 | v12 | v10;
  v18 = v17 | 7;
  v19 = (v17 | 7) + v7;
  v20 = a1;
  v21 = v19 + a1;
  v22 = ~(v17 | 7);
  v23 = (v19 + a1) & v22;
  v24 = v19 + a2;
  v25 = v24 & v22;
  v366 = v20;
  v358 = v14;
  v359 = v13;
  v356 = v15;
  v353 = v11;
  if (v23 == (v24 & v22))
  {
    v36 = *(_QWORD *)(v9 + 64);
    v37 = *(_QWORD *)(v11 + 64);
    v38 = *(_QWORD *)(v14 + 64);
    v39 = (v17 + 32) & v22;
    if (((v36 + v10) & ~v10) + v36 > v36)
      v36 += (v36 + v10) & ~v10;
    v352 = ~v12;
    v351 = v12 + 8;
    v354 = *(_QWORD *)(v11 + 64);
    v355 = ~v15;
    v40 = ((((v12 + 8) & ~v12) + v15 + v37) & ~v15) + v38;
    if (v36 <= v40)
      v36 = ((((v12 + 8) & ~v12) + v15 + v37) & ~v15) + v38;
    if (v36 <= 0x10)
      v36 = 16;
    v41 = (v39 | 1) + v36;
    v42 = ((v41 + v18) & v22) + v41;
    if (v41 > v42)
      v42 = v41;
    v43 = (v41 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (v42 <= v43 + 113)
      v42 = v43 + 113;
    v44 = v43 + 49;
    if (v42 > v44)
      v44 = v42;
    if (v44 <= 0x19)
      v34 = 25;
    else
      v34 = v44;
  }
  else
  {
    v332 = v24;
    v341 = v21;
    v345 = v8;
    v364 = v17 + 32;
    v26 = (v17 + 32) & v22;
    v343 = v9;
    v27 = *(_QWORD *)(v9 + 64);
    v331 = v27 + v10;
    v28 = ((v27 + v10) & ~v10) + v27;
    v333 = v27;
    if (v28 <= v27)
      v28 = *(_QWORD *)(v9 + 64);
    v352 = ~v12;
    v351 = v12 + 8;
    v354 = *(_QWORD *)(v11 + 64);
    v355 = ~v15;
    v347 = ((((v12 + 8) & ~v12) + v15 + v354) & ~v15) + *(_QWORD *)(v14 + 64);
    if (v28 <= v347)
      v28 = ((((v12 + 8) & ~v12) + v15 + v354) & ~v15) + *(_QWORD *)(v14 + 64);
    if (v28 <= 0x10)
      v29 = 16;
    else
      v29 = v28;
    v30 = (v26 | 1) + v29;
    v31 = ((v30 + v18) & v22) + v30;
    if (v30 > v31)
      v31 = v30;
    v32 = (v30 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (v31 <= v32 + 113)
      v31 = v32 + 113;
    v33 = v32 + 49;
    if (v31 <= v33)
      v31 = v33;
    if (v31 <= 0x19)
      v34 = 25;
    else
      v34 = v31;
    v360 = v29;
    v349 = v15 | v12;
    v336 = ~v10;
    v362 = v25;
    switch(*(_BYTE *)(v23 + v34))
    {
      case 0:
      case 1:
        break;
      case 2:
        swift_release();
        break;
      case 3:
        swift_release();
        swift_release();
        break;
      case 4:
        sub_2141ED0BC(*(_QWORD *)v23, *(_QWORD *)(v23 + 8), *(_BYTE *)(v23 + 16));
        swift_bridgeObjectRelease();
        v45 = (v364 + v23) & v22;
        switch(*(_BYTE *)(v45 + v360))
        {
          case 0:
            goto LABEL_94;
          case 1:
            v53 = v345;
            v54 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
            v54((v364 + v23) & v22, v345);
            v55 = v45 + v10 + v333;
            goto LABEL_98;
          case 2:
            goto LABEL_96;
          case 3:
            goto LABEL_95;
          case 4:
            goto LABEL_99;
          default:
            if (v360 <= 3)
              v46 = v360;
            else
              v46 = 4;
            __asm { BR              X12 }
            return result;
        }
      case 5:
        sub_2141ED0BC(*(_QWORD *)v23, *(_QWORD *)(v23 + 8), *(_BYTE *)(v23 + 16));
        swift_bridgeObjectRelease();
        v47 = (v364 + v23) & v22;
        switch(*(_BYTE *)(v47 + v360))
        {
          case 0:
            (*(void (**)(uint64_t, uint64_t))(v9 + 8))((v364 + v23) & v22, v345);
            break;
          case 1:
            v56 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
            v56((v364 + v23) & v22, v345);
            v56((v47 + v10 + v333) & v336, v345);
            break;
          case 2:
            swift_release();
            break;
          case 3:
            swift_release();
            swift_release();
            break;
          case 4:
            swift_release();
            v57 = (v351 + v47) & v352;
            (*(void (**)(uint64_t, uint64_t))(v353 + 8))(v57, v357);
            (*(void (**)(uint64_t, uint64_t))(v358 + 8))((v57 + v356 + v354) & v355, v359);
            break;
          default:
            if (v360 <= 3)
              v48 = v360;
            else
              v48 = 4;
            __asm { BR              X12 }
            return result;
        }
        v58 = ((v341 | v18) + v30) & v22;
        sub_2141ED0BC(*(_QWORD *)v58, *(_QWORD *)(v58 + 8), *(_BYTE *)(v58 + 0x10));
        swift_bridgeObjectRelease();
        v45 = (v364 + v58) & v22;
        switch(*(_BYTE *)(v45 + v360))
        {
          case 0:
LABEL_94:
            (*(void (**)(uint64_t, uint64_t))(v343 + 8))(v45, v345);
            break;
          case 1:
            v53 = v345;
            v54 = *(void (**)(uint64_t, uint64_t))(v343 + 8);
            v54(v45, v345);
            v55 = v331 + v45;
LABEL_98:
            v54(v55 & v336, v53);
            break;
          case 2:
            goto LABEL_96;
          case 3:
LABEL_95:
            swift_release();
LABEL_96:
            swift_release();
            break;
          case 4:
LABEL_99:
            swift_release();
            v69 = (v351 + v45) & v352;
            (*(void (**)(uint64_t, uint64_t))(v353 + 8))(v69, v357);
            (*(void (**)(uint64_t, uint64_t))(v358 + 8))((v354 + v356 + v69) & v355, v359);
            break;
          default:
            if (v360 <= 3)
              v59 = v360;
            else
              v59 = 4;
            __asm { BR              X12 }
            return result;
        }
        v25 = v362;
        break;
      case 6:
        sub_2141ED0BC(*(_QWORD *)v23, *(_QWORD *)(v23 + 8), *(_BYTE *)(v23 + 16));
        swift_bridgeObjectRelease();
        v49 = (v364 + v23) & v22;
        switch(*(_BYTE *)(v49 + v360))
        {
          case 0:
            (*(void (**)(uint64_t, uint64_t))(v9 + 8))((v364 + v23) & v22, v345);
            break;
          case 1:
            v61 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
            v61((v364 + v23) & v22, v345);
            v61((v49 + v10 + v333) & v336, v345);
            break;
          case 2:
            swift_release();
            break;
          case 3:
            swift_release();
            swift_release();
            break;
          case 4:
            swift_release();
            v60 = (v351 + v49) & v352;
            (*(void (**)(uint64_t, uint64_t))(v353 + 8))(v60, v357);
            (*(void (**)(uint64_t, uint64_t))(v358 + 8))((v60 + v356 + v354) & v355, v359);
            break;
          default:
            if (v360 <= 3)
              v50 = v360;
            else
              v50 = 4;
            __asm { BR              X12 }
            return result;
        }
        v25 = v362;
        v62 = ((v23 | 7) + v30) & 0xFFFFFFFFFFFFFFF8;
        v63 = *(unsigned __int8 *)(v62 + 96);
        if (v63 != 255)
          sub_2142637C0(*(_QWORD *)(v62 + 88), v63 & 1);
        sub_2142637C0(*(_QWORD *)(v62 + 104), *(_BYTE *)(v62 + 112));
        break;
      case 7:
        sub_2141ED0BC(*(_QWORD *)v23, *(_QWORD *)(v23 + 8), *(_BYTE *)(v23 + 16));
        swift_bridgeObjectRelease();
        v51 = (v364 + v23) & v22;
        switch(*(_BYTE *)(v51 + v360))
        {
          case 0:
            (*(void (**)(uint64_t, uint64_t))(v9 + 8))((v364 + v23) & v22, v345);
            break;
          case 1:
            v64 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
            v64((v364 + v23) & v22, v345);
            v64((v51 + v10 + v333) & v336, v345);
            break;
          case 2:
            swift_release();
            break;
          case 3:
            swift_release();
            swift_release();
            break;
          case 4:
            swift_release();
            v65 = (v351 + v51) & v352;
            (*(void (**)(uint64_t, uint64_t))(v353 + 8))(v65, v357);
            (*(void (**)(uint64_t, uint64_t))(v358 + 8))((v65 + v356 + v354) & v355, v359);
            break;
          default:
            if (v360 <= 3)
              v52 = v360;
            else
              v52 = 4;
            __asm { BR              X12 }
            return result;
        }
        v66 = ((v23 | 7) + v30) & 0xFFFFFFFFFFFFFFF8;
        v67 = *(unsigned __int8 *)(v66 + 24);
        v25 = v362;
        if (v67 <= 0xFB)
          sub_2141EF1B0(*(_QWORD *)(v66 + 8), *(_QWORD *)(v66 + 16), v67);
        v68 = *(unsigned __int8 *)(v66 + 48);
        if (v68 <= 0xFB)
          sub_2141EF1B0(*(_QWORD *)(v66 + 32), *(_QWORD *)(v66 + 40), v68);
        break;
      default:
        if (v34 <= 3)
          v35 = v34;
        else
          v35 = 4;
        __asm { BR              X12 }
        return result;
    }
    switch(*(_BYTE *)(v25 + v34))
    {
      case 0:
        v71 = *(_QWORD *)v25;
        *(_BYTE *)(v23 + 8) = *(_BYTE *)(v25 + 8);
        *(_QWORD *)v23 = v71;
        *(_BYTE *)(v23 + v34) = 0;
        goto LABEL_184;
      case 1:
        v72 = *(_OWORD *)v25;
        *(_OWORD *)(v23 + 9) = *(_OWORD *)(v25 + 9);
        *(_OWORD *)v23 = v72;
        *(_BYTE *)(v23 + v34) = 1;
        goto LABEL_184;
      case 2:
        *(_QWORD *)v23 = *(_QWORD *)v25;
        *(_BYTE *)(v23 + v34) = 2;
        swift_retain();
        goto LABEL_184;
      case 3:
        *(_QWORD *)v23 = *(_QWORD *)v25;
        *(_QWORD *)(v23 + 8) = *(_QWORD *)(v25 + 8);
        *(_BYTE *)(v23 + v34) = 3;
        swift_retain();
        swift_retain();
        goto LABEL_184;
      case 4:
        v73 = v3;
        v74 = v25;
        v75 = *(_QWORD *)v25;
        v76 = *(_QWORD *)(v74 + 8);
        v77 = *(_BYTE *)(v74 + 16);
        sub_2141DD130(v75, v76, v77);
        *(_QWORD *)v23 = v75;
        *(_QWORD *)(v23 + 8) = v76;
        *(_BYTE *)(v23 + 16) = v77;
        *(_QWORD *)(v23 + 24) = *(_QWORD *)(v74 + 24);
        v78 = (_QWORD *)((v364 + v23) & v22);
        v79 = (_QWORD *)((v364 + v74) & v22);
        v80 = *((unsigned __int8 *)v79 + v360);
        swift_bridgeObjectRetain();
        v3 = v73;
        switch(v80)
        {
          case 0:
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v343 + 16))(v78, v79, v345);
            *((_BYTE *)v78 + v360) = 0;
            goto LABEL_138;
          case 1:
            v107 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v343 + 16);
            v108 = v360;
            v107(v78, v79, v345);
            v107((_QWORD *)(((unint64_t)v78 + v10 + v333) & v336), (_QWORD *)(((unint64_t)v79 + v10 + v333) & v336), v345);
            v109 = 1;
            goto LABEL_137;
          case 2:
            *v78 = *v79;
            *((_BYTE *)v78 + v360) = 2;
            swift_retain();
            goto LABEL_138;
          case 3:
            *v78 = *v79;
            v78[1] = v79[1];
            *((_BYTE *)v78 + v360) = 3;
            swift_retain();
            swift_retain();
            goto LABEL_138;
          case 4:
            *v78 = *v79;
            v110 = ((unint64_t)v78 + v351) & v352;
            v111 = ((unint64_t)v79 + v351) & v352;
            v112 = *(void (**)(unint64_t, unint64_t, uint64_t))(v353 + 16);
            v108 = v360;
            swift_retain();
            v112(v110, v111, v357);
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v358 + 16))((v110 + v356 + v354) & v355, (v111 + v356 + v354) & v355, v359);
            v109 = 4;
LABEL_137:
            *((_BYTE *)v78 + v108) = v109;
LABEL_138:
            v113 = 4;
            break;
          default:
            if (v360 <= 3)
              v81 = v360;
            else
              v81 = 4;
            __asm { BR              X11 }
            return result;
        }
        goto LABEL_183;
      case 5:
        v330 = v3;
        v82 = v25;
        v83 = *(_QWORD *)v25;
        v84 = *(_QWORD *)(v82 + 8);
        v85 = *(_BYTE *)(v82 + 16);
        sub_2141DD130(v83, v84, v85);
        *(_QWORD *)v23 = v83;
        *(_QWORD *)(v23 + 8) = v84;
        *(_BYTE *)(v23 + 16) = v85;
        *(_QWORD *)(v23 + 24) = *(_QWORD *)(v82 + 24);
        v86 = (_QWORD *)((v364 + v23) & v22);
        v87 = (_QWORD *)((v364 + v82) & v22);
        v88 = *((unsigned __int8 *)v87 + v360);
        swift_bridgeObjectRetain();
        switch(v88)
        {
          case 0:
            v114 = v343;
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v343 + 16))(v86, v87, v345);
            *((_BYTE *)v86 + v360) = 0;
            goto LABEL_146;
          case 1:
            v115 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v343 + 16);
            v115(v86, v87, v345);
            v116 = ((unint64_t)v86 + v10 + v333) & v336;
            v117 = (char *)v87 + v10;
            v114 = v343;
            v115((_QWORD *)v116, (_QWORD *)((unint64_t)&v117[v333] & v336), v345);
            *((_BYTE *)v86 + v360) = 1;
            goto LABEL_146;
          case 2:
            *v86 = *v87;
            *((_BYTE *)v86 + v360) = 2;
            swift_retain();
            goto LABEL_145;
          case 3:
            *v86 = *v87;
            *(_QWORD *)(((v364 + v23) & v22) + 8) = v87[1];
            *((_BYTE *)v86 + v360) = 3;
            swift_retain();
            swift_retain();
            goto LABEL_145;
          case 4:
            *v86 = *v87;
            v118 = ((unint64_t)v86 + v351) & v352;
            v119 = ((unint64_t)v87 + v351) & v352;
            v120 = *(void (**)(unint64_t, unint64_t, uint64_t))(v353 + 16);
            swift_retain();
            v120(v118, v119, v357);
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v358 + 16))((v118 + v356 + v354) & v355, (v119 + v356 + v354) & v355, v359);
            *((_BYTE *)v86 + v360) = 4;
LABEL_145:
            v114 = v343;
LABEL_146:
            v121 = ((v341 | v18) + v30) & v22;
            v122 = ((v332 | v18) + v30) & v22;
            v123 = *(_QWORD *)v122;
            v124 = *(_QWORD *)(v122 + 8);
            v125 = *(_BYTE *)(v122 + 0x10);
            sub_2141DD130(*(_QWORD *)v122, v124, v125);
            *(_QWORD *)v121 = v123;
            *(_QWORD *)(v121 + 8) = v124;
            *(_BYTE *)(v121 + 16) = v125;
            *(_QWORD *)(v121 + 24) = *(_QWORD *)(v122 + 24);
            v126 = (_QWORD *)((v364 + v121) & v22);
            v127 = (_QWORD *)((v364 + v122) & v22);
            v128 = *((unsigned __int8 *)v127 + v360);
            swift_bridgeObjectRetain();
            v3 = v330;
            switch(v128)
            {
              case 0:
                (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v114 + 16))(v126, v127, v345);
                *((_BYTE *)v126 + v360) = 0;
                goto LABEL_182;
              case 1:
                v165 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v114 + 16);
                v165(v126, v127, v345);
                v165((_QWORD *)(((unint64_t)v126 + v331) & v336), (_QWORD *)(((unint64_t)v127 + v331) & v336), v345);
                v166 = 1;
                goto LABEL_181;
              case 2:
                *v126 = *v127;
                *((_BYTE *)v126 + v360) = 2;
                swift_retain();
                goto LABEL_182;
              case 3:
                *v126 = *v127;
                v126[1] = v127[1];
                *((_BYTE *)v126 + v360) = 3;
                swift_retain();
                swift_retain();
                goto LABEL_182;
              case 4:
                *v126 = *v127;
                v167 = ((unint64_t)v126 + v351) & v352;
                v168 = ((unint64_t)v127 + v351) & v352;
                v169 = *(void (**)(unint64_t, unint64_t, uint64_t))(v353 + 16);
                swift_retain();
                v169(v167, v168, v357);
                (*(void (**)(unint64_t, unint64_t, uint64_t))(v358 + 16))((v354 + v356 + v167) & v355, (v354 + v356 + v168) & v355, v359);
                v166 = 4;
LABEL_181:
                *((_BYTE *)v126 + v360) = v166;
LABEL_182:
                v113 = 5;
                break;
              default:
                if (v360 <= 3)
                  v129 = v360;
                else
                  v129 = 4;
                __asm { BR              X11 }
                return result;
            }
            return result;
          default:
            if (v360 <= 3)
              v89 = v360;
            else
              v89 = 4;
            __asm { BR              X11 }
            return result;
        }
        goto LABEL_183;
      case 6:
        v90 = v3;
        v91 = *(_QWORD *)v25;
        v92 = *(_QWORD *)(v25 + 8);
        v93 = *(_BYTE *)(v25 + 16);
        sub_2141DD130(*(_QWORD *)v25, v92, v93);
        *(_QWORD *)v23 = v91;
        *(_QWORD *)(v23 + 8) = v92;
        *(_BYTE *)(v23 + 16) = v93;
        *(_QWORD *)(v23 + 24) = *(_QWORD *)(v25 + 24);
        v94 = (_QWORD *)((v364 + v23) & v22);
        v95 = (_QWORD *)((v364 + v25) & v22);
        v96 = *((unsigned __int8 *)v95 + v360);
        swift_bridgeObjectRetain();
        v3 = v90;
        switch(v96)
        {
          case 0:
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v343 + 16))(v94, v95, v345);
            *((_BYTE *)v94 + v360) = 0;
            break;
          case 1:
            v133 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v343 + 16);
            v133(v94, v95, v345);
            v133((_QWORD *)(((unint64_t)v94 + v10 + v333) & v336), (_QWORD *)(((unint64_t)v95 + v10 + v333) & v336), v345);
            *((_BYTE *)v94 + v360) = 1;
            break;
          case 2:
            *v94 = *v95;
            *((_BYTE *)v94 + v360) = 2;
            swift_retain();
            break;
          case 3:
            *v94 = *v95;
            v94[1] = v95[1];
            *((_BYTE *)v94 + v360) = 3;
            swift_retain();
            swift_retain();
            break;
          case 4:
            *v94 = *v95;
            v130 = ((unint64_t)v94 + v351) & v352;
            v131 = ((unint64_t)v95 + v351) & v352;
            v132 = *(void (**)(unint64_t, unint64_t, uint64_t))(v353 + 16);
            swift_retain();
            v132(v130, v131, v357);
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v358 + 16))((v130 + v356 + v354) & v355, (v131 + v356 + v354) & v355, v359);
            *((_BYTE *)v94 + v360) = 4;
            break;
          default:
            if (v360 <= 3)
              v97 = v360;
            else
              v97 = 4;
            __asm { BR              X11 }
            return result;
        }
        v134 = ((v23 | 7) + v30) & 0xFFFFFFFFFFFFFFF8;
        v135 = ((v362 | 7) + v30) & 0xFFFFFFFFFFFFFFF8;
        *(_BYTE *)v134 = *(_BYTE *)v135;
        v136 = (_OWORD *)(v134 + 8);
        v137 = (_OWORD *)(v135 + 8);
        if (*(unsigned __int8 *)(v135 + 96) == 255)
        {
          v143 = *(_OWORD *)(v135 + 24);
          *v136 = *v137;
          *(_OWORD *)(v134 + 24) = v143;
          v144 = *(_OWORD *)(v135 + 40);
          v145 = *(_OWORD *)(v135 + 56);
          v146 = *(_OWORD *)(v135 + 72);
          *(_OWORD *)(v134 + 81) = *(_OWORD *)(v135 + 81);
          *(_OWORD *)(v134 + 56) = v145;
          *(_OWORD *)(v134 + 72) = v146;
          *(_OWORD *)(v134 + 40) = v144;
        }
        else
        {
          *v136 = *v137;
          v138 = *(_OWORD *)(v135 + 24);
          v139 = *(_OWORD *)(v135 + 40);
          v140 = *(_OWORD *)(v135 + 72);
          *(_OWORD *)(v134 + 56) = *(_OWORD *)(v135 + 56);
          *(_OWORD *)(v134 + 72) = v140;
          *(_OWORD *)(v134 + 24) = v138;
          *(_OWORD *)(v134 + 40) = v139;
          v141 = *(_QWORD *)(v135 + 88);
          v142 = *(_BYTE *)(v135 + 96);
          sub_2142625F8(v141, v142);
          *(_QWORD *)(v134 + 88) = v141;
          *(_BYTE *)(v134 + 96) = v142;
        }
        v147 = *(_QWORD *)(v135 + 104);
        v148 = *(_BYTE *)(v135 + 112);
        sub_2142625F8(v147, v148);
        *(_QWORD *)(v134 + 104) = v147;
        *(_BYTE *)(v134 + 112) = v148;
        v113 = 6;
LABEL_183:
        *(_BYTE *)(v23 + v34) = v113;
        v25 = v362;
LABEL_184:
        v40 = v347;
        v16 = v349;
        break;
      case 7:
        v98 = v3;
        v99 = v25;
        v100 = *(_QWORD *)v25;
        v101 = *(_QWORD *)(v99 + 8);
        v102 = *(_BYTE *)(v99 + 16);
        sub_2141DD130(v100, v101, v102);
        *(_QWORD *)v23 = v100;
        *(_QWORD *)(v23 + 8) = v101;
        *(_BYTE *)(v23 + 16) = v102;
        *(_QWORD *)(v23 + 24) = *(_QWORD *)(v99 + 24);
        v103 = (_QWORD *)((v364 + v23) & v22);
        v104 = (_QWORD *)((v364 + v99) & v22);
        v105 = *((unsigned __int8 *)v104 + v360);
        swift_bridgeObjectRetain();
        v3 = v98;
        switch(v105)
        {
          case 0:
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v343 + 16))(v103, v104, v345);
            *((_BYTE *)v103 + v360) = 0;
            goto LABEL_168;
          case 1:
            v149 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v343 + 16);
            v150 = v360;
            v149(v103, v104, v345);
            v149((_QWORD *)(((unint64_t)v103 + v10 + v333) & v336), (_QWORD *)(((unint64_t)v104 + v10 + v333) & v336), v345);
            v151 = 1;
            goto LABEL_167;
          case 2:
            *v103 = *v104;
            *((_BYTE *)v103 + v360) = 2;
            swift_retain();
            goto LABEL_168;
          case 3:
            *v103 = *v104;
            v103[1] = v104[1];
            *((_BYTE *)v103 + v360) = 3;
            swift_retain();
            swift_retain();
            goto LABEL_168;
          case 4:
            *v103 = *v104;
            v152 = ((unint64_t)v103 + v351) & v352;
            v153 = ((unint64_t)v104 + v351) & v352;
            v154 = *(void (**)(unint64_t, unint64_t, uint64_t))(v353 + 16);
            v150 = v360;
            swift_retain();
            v154(v152, v153, v357);
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v358 + 16))((v152 + v356 + v354) & v355, (v153 + v356 + v354) & v355, v359);
            v151 = 4;
LABEL_167:
            *((_BYTE *)v103 + v150) = v151;
LABEL_168:
            v155 = ((v23 | 7) + v30) & 0xFFFFFFFFFFFFFFF8;
            v156 = ((v362 | 7) + v30) & 0xFFFFFFFFFFFFFFF8;
            *(_BYTE *)v155 = *(_BYTE *)v156;
            *(_BYTE *)(v155 + 1) = *(_BYTE *)(v156 + 1);
            *(_BYTE *)(v155 + 2) = *(_BYTE *)(v156 + 2);
            v157 = *(unsigned __int8 *)(v156 + 24);
            if (v157 <= 0xFB)
            {
              v159 = *(_QWORD *)(v156 + 8);
              v160 = *(_QWORD *)(v156 + 16);
              sub_2141DD140(v159, v160, *(_BYTE *)(v156 + 24));
              *(_QWORD *)(v155 + 8) = v159;
              *(_QWORD *)(v155 + 16) = v160;
              *(_BYTE *)(v155 + 24) = v157;
            }
            else
            {
              v158 = *(_OWORD *)(v156 + 8);
              *(_BYTE *)(v155 + 24) = *(_BYTE *)(v156 + 24);
              *(_OWORD *)(v155 + 8) = v158;
            }
            v161 = *(unsigned __int8 *)(v156 + 48);
            if (v161 <= 0xFB)
            {
              v163 = *(_QWORD *)(v156 + 32);
              v164 = *(_QWORD *)(v156 + 40);
              sub_2141DD140(v163, v164, *(_BYTE *)(v156 + 48));
              *(_QWORD *)(v155 + 32) = v163;
              *(_QWORD *)(v155 + 40) = v164;
              *(_BYTE *)(v155 + 48) = v161;
            }
            else
            {
              v162 = *(_OWORD *)(v156 + 32);
              *(_BYTE *)(v155 + 48) = *(_BYTE *)(v156 + 48);
              *(_OWORD *)(v155 + 32) = v162;
            }
            v25 = v362;
            v40 = v347;
            v16 = v349;
            *(_BYTE *)(v23 + v34) = 7;
            break;
          default:
            if (v360 <= 3)
              v106 = v360;
            else
              v106 = 4;
            __asm { BR              X11 }
            return result;
        }
        return result;
      default:
        if (v34 <= 3)
          v70 = v34;
        else
          v70 = 4;
        __asm { BR              X12 }
        return result;
    }
  }
  v170 = *(_QWORD *)(v3 + 32);
  v171 = *(_QWORD *)(v170 - 8);
  v172 = *(unsigned __int8 *)(v171 + 80);
  v173 = v16 | v172;
  v174 = v16 | v172 | 7;
  v175 = v34 + v174 + 1;
  v176 = v175 + v23;
  v177 = ~v174;
  v178 = (v175 + v23) & ~v174;
  v179 = v175 + v25;
  v180 = v179 & ~v174;
  v181 = ~v172;
  if (v178 == v180)
  {
    v192 = *(_QWORD *)(v171 + 64);
    v193 = (v173 + 32) & v177;
    if (((v192 + v172) & v181) + v192 > v192)
      v192 += (v192 + v172) & v181;
    if (v192 <= v40)
      v192 = v40;
    if (v192 <= 0x10)
      v192 = 16;
    v194 = (v193 | 1) + v192;
    v195 = ((v194 + v174) & v177) + v194;
    if (v194 > v195)
      v195 = v194;
    v196 = (v194 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (v195 <= v196 + 113)
      v195 = v196 + 113;
    v197 = v196 + 49;
    if (v195 > v197)
      v197 = v195;
    if (v197 <= 0x19)
      v190 = 25;
    else
      v190 = v197;
  }
  else
  {
    v344 = v179;
    v361 = *(_QWORD *)(v3 + 32);
    v365 = v173 + 32;
    v182 = (v173 + 32) & v177;
    v350 = *(_QWORD *)(v170 - 8);
    v183 = *(_QWORD *)(v171 + 64);
    v342 = v183 + v172;
    v184 = ((v183 + v172) & v181) + v183;
    v346 = v183;
    if (v184 <= v183)
      v184 = *(_QWORD *)(v171 + 64);
    if (v184 <= v40)
      v184 = v40;
    if (v184 <= 0x10)
      v185 = 16;
    else
      v185 = v184;
    v186 = (v182 | 1) + v185;
    v187 = ((v186 + v174) & v177) + v186;
    if (v186 > v187)
      v187 = v186;
    v363 = v186;
    v188 = (v186 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (v187 <= v188 + 113)
      v187 = v188 + 113;
    v189 = v188 + 49;
    if (v187 <= v189)
      v187 = v189;
    if (v187 <= 0x19)
      v190 = 25;
    else
      v190 = v187;
    v348 = v176;
    switch(*(_BYTE *)(v178 + v190))
    {
      case 0:
      case 1:
        break;
      case 2:
LABEL_222:
        swift_release();
        break;
      case 3:
LABEL_223:
        swift_release();
        swift_release();
        break;
      case 4:
        sub_2141ED0BC(*(_QWORD *)v178, *(_QWORD *)(v178 + 8), *(_BYTE *)(v178 + 16));
        swift_bridgeObjectRelease();
        v198 = (v365 + v178) & v177;
        switch(*(_BYTE *)(v198 + v185))
        {
          case 0:
            goto LABEL_278;
          case 1:
            v334 = v180;
            v206 = v185;
            v207 = *(void (**)(uint64_t, uint64_t))(v350 + 8);
            v208 = ~v172;
            v209 = v361;
            v207((v365 + v178) & v177, v361);
            v210 = v198 + v172 + v346;
            goto LABEL_281;
          case 2:
            goto LABEL_222;
          case 3:
            goto LABEL_223;
          case 4:
            goto LABEL_279;
          default:
            if (v185 <= 3)
              v199 = v185;
            else
              v199 = 4;
            __asm { BR              X12 }
            return result;
        }
      case 5:
        sub_2141ED0BC(*(_QWORD *)v178, *(_QWORD *)(v178 + 8), *(_BYTE *)(v178 + 16));
        swift_bridgeObjectRelease();
        v200 = (v365 + v178) & v177;
        switch(*(_BYTE *)(v200 + v185))
        {
          case 0:
            (*(void (**)(uint64_t, uint64_t))(v350 + 8))((v365 + v178) & v177, v361);
            break;
          case 1:
            v211 = v185;
            v212 = *(void (**)(uint64_t, uint64_t))(v350 + 8);
            v212((v365 + v178) & v177, v361);
            v181 = ~v172;
            v212((v200 + v172 + v346) & ~v172, v361);
            v185 = v211;
            break;
          case 2:
            swift_release();
            break;
          case 3:
            swift_release();
            swift_release();
            break;
          case 4:
            swift_release();
            v213 = (v351 + v200) & v352;
            (*(void (**)(uint64_t, uint64_t))(v353 + 8))(v213, v357);
            (*(void (**)(uint64_t, uint64_t))(v358 + 8))((v354 + v356 + v213) & v355, v359);
            break;
          default:
            if (v185 <= 3)
              v201 = v185;
            else
              v201 = 4;
            __asm { BR              X12 }
            return result;
        }
        v214 = ((v348 | v174) + v363) & v177;
        sub_2141ED0BC(*(_QWORD *)v214, *(_QWORD *)(v214 + 8), *(_BYTE *)(v214 + 0x10));
        swift_bridgeObjectRelease();
        v198 = (v365 + v214) & v177;
        switch(*(_BYTE *)(v198 + v185))
        {
          case 0:
LABEL_278:
            (*(void (**)(uint64_t, uint64_t))(v350 + 8))(v198, v361);
            goto LABEL_287;
          case 1:
            v334 = v180;
            v206 = v185;
            v207 = *(void (**)(uint64_t, uint64_t))(v350 + 8);
            v208 = v181;
            v209 = v361;
            v207(v198, v361);
            v210 = v342 + v198;
LABEL_281:
            v228 = v209;
            v181 = v208;
            v207(v210 & v208, v228);
            v185 = v206;
            v180 = v334;
            goto LABEL_287;
          case 2:
            goto LABEL_222;
          case 3:
            goto LABEL_223;
          case 4:
LABEL_279:
            swift_release();
            v227 = (v351 + v198) & v352;
            (*(void (**)(uint64_t, uint64_t))(v353 + 8))(v227, v357);
            (*(void (**)(uint64_t, uint64_t))(v358 + 8))((v354 + v356 + v227) & v355, v359);
            goto LABEL_287;
          default:
            if (v185 <= 3)
              v215 = v185;
            else
              v215 = 4;
            __asm { BR              X12 }
            return result;
        }
      case 6:
        sub_2141ED0BC(*(_QWORD *)v178, *(_QWORD *)(v178 + 8), *(_BYTE *)(v178 + 16));
        swift_bridgeObjectRelease();
        v202 = (v365 + v178) & v177;
        switch(*(_BYTE *)(v202 + v185))
        {
          case 0:
            (*(void (**)(uint64_t, uint64_t))(v350 + 8))((v365 + v178) & v177, v361);
            break;
          case 1:
            v217 = v185;
            v218 = *(void (**)(uint64_t, uint64_t))(v350 + 8);
            v218((v365 + v178) & v177, v361);
            v181 = ~v172;
            v218((v202 + v172 + v346) & ~v172, v361);
            v185 = v217;
            break;
          case 2:
            swift_release();
            break;
          case 3:
            swift_release();
            swift_release();
            break;
          case 4:
            swift_release();
            v216 = (v351 + v202) & v352;
            (*(void (**)(uint64_t, uint64_t))(v353 + 8))(v216, v357);
            (*(void (**)(uint64_t, uint64_t))(v358 + 8))((v354 + v356 + v216) & v355, v359);
            break;
          default:
            if (v185 <= 3)
              v203 = v185;
            else
              v203 = 4;
            __asm { BR              X12 }
            return result;
        }
        v219 = ((v178 | 7) + v363) & 0xFFFFFFFFFFFFFFF8;
        v220 = *(unsigned __int8 *)(v219 + 96);
        if (v220 != 255)
          sub_2142637C0(*(_QWORD *)(v219 + 88), v220 & 1);
        sub_2142637C0(*(_QWORD *)(v219 + 104), *(_BYTE *)(v219 + 112));
        break;
      case 7:
        sub_2141ED0BC(*(_QWORD *)v178, *(_QWORD *)(v178 + 8), *(_BYTE *)(v178 + 16));
        swift_bridgeObjectRelease();
        v204 = (v365 + v178) & v177;
        switch(*(_BYTE *)(v204 + v185))
        {
          case 0:
            (*(void (**)(uint64_t, uint64_t))(v350 + 8))((v365 + v178) & v177, v361);
            break;
          case 1:
            v221 = v185;
            v222 = *(void (**)(uint64_t, uint64_t))(v350 + 8);
            v222((v365 + v178) & v177, v361);
            v181 = ~v172;
            v222((v204 + v172 + v346) & ~v172, v361);
            v185 = v221;
            break;
          case 2:
            swift_release();
            break;
          case 3:
            swift_release();
            swift_release();
            break;
          case 4:
            swift_release();
            v223 = (v351 + v204) & v352;
            (*(void (**)(uint64_t, uint64_t))(v353 + 8))(v223, v357);
            (*(void (**)(uint64_t, uint64_t))(v358 + 8))((v354 + v356 + v223) & v355, v359);
            break;
          default:
            if (v185 <= 3)
              v205 = v185;
            else
              v205 = 4;
            __asm { BR              X12 }
            return result;
        }
        v224 = ((v178 | 7) + v363) & 0xFFFFFFFFFFFFFFF8;
        v225 = *(unsigned __int8 *)(v224 + 24);
        if (v225 <= 0xFB)
          sub_2141EF1B0(*(_QWORD *)(v224 + 8), *(_QWORD *)(v224 + 16), v225);
        v226 = *(unsigned __int8 *)(v224 + 48);
        if (v226 <= 0xFB)
          sub_2141EF1B0(*(_QWORD *)(v224 + 32), *(_QWORD *)(v224 + 40), v226);
        break;
      default:
        if (v190 <= 3)
          v191 = v190;
        else
          v191 = 4;
        __asm { BR              X12 }
        return result;
    }
LABEL_287:
    switch(*(_BYTE *)(v180 + v190))
    {
      case 0:
        v230 = *(_QWORD *)v180;
        *(_BYTE *)(v178 + 8) = *(_BYTE *)(v180 + 8);
        *(_QWORD *)v178 = v230;
        *(_BYTE *)(v178 + v190) = 0;
        break;
      case 1:
        v231 = *(_OWORD *)v180;
        *(_OWORD *)(v178 + 9) = *(_OWORD *)(v180 + 9);
        *(_OWORD *)v178 = v231;
        v232 = 1;
        goto LABEL_366;
      case 2:
        *(_QWORD *)v178 = *(_QWORD *)v180;
        *(_BYTE *)(v178 + v190) = 2;
        swift_retain();
        break;
      case 3:
        *(_QWORD *)v178 = *(_QWORD *)v180;
        *(_QWORD *)(v178 + 8) = *(_QWORD *)(v180 + 8);
        *(_BYTE *)(v178 + v190) = 3;
        swift_retain();
        swift_retain();
        break;
      case 4:
        v337 = v181;
        v233 = v180;
        v234 = v185;
        v235 = *(_QWORD *)v180;
        v236 = *(_QWORD *)(v180 + 8);
        v237 = *(_BYTE *)(v180 + 16);
        sub_2141DD130(v235, v236, v237);
        *(_QWORD *)v178 = v235;
        *(_QWORD *)(v178 + 8) = v236;
        *(_BYTE *)(v178 + 16) = v237;
        *(_QWORD *)(v178 + 24) = *(_QWORD *)(v233 + 24);
        v238 = (_QWORD *)((v365 + v178) & v177);
        v180 = v233;
        v239 = (_QWORD *)((v365 + v233) & v177);
        v240 = *((unsigned __int8 *)v239 + v234);
        swift_bridgeObjectRetain();
        switch(v240)
        {
          case 0:
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v350 + 16))(v238, v239, v361);
            *((_BYTE *)v238 + v234) = 0;
            v232 = 4;
            goto LABEL_366;
          case 1:
            v269 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v350 + 16);
            v269(v238, v239, v361);
            v269((_QWORD *)(((unint64_t)v238 + v172 + v346) & v337), (_QWORD *)(((unint64_t)v239 + v172 + v346) & v337), v361);
            v270 = 1;
            goto LABEL_319;
          case 2:
            *v238 = *v239;
            *((_BYTE *)v238 + v234) = 2;
            goto LABEL_317;
          case 3:
            *v238 = *v239;
            *(_QWORD *)(((v365 + v178) & v177) + 8) = v239[1];
            *((_BYTE *)v238 + v234) = 3;
            swift_retain();
LABEL_317:
            swift_retain();
            v232 = 4;
            break;
          case 4:
            *v238 = *v239;
            v271 = ((unint64_t)v238 + v351) & v352;
            v272 = ((unint64_t)v239 + v351) & v352;
            v273 = *(void (**)(unint64_t, unint64_t, uint64_t))(v353 + 16);
            swift_retain();
            v273(v271, v272, v357);
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v358 + 16))((v354 + v356 + v271) & v355, (v354 + v356 + v272) & v355, v359);
            v270 = 4;
LABEL_319:
            *((_BYTE *)v238 + v234) = v270;
            v232 = 4;
            break;
          default:
            if (v234 <= 3)
              v241 = v234;
            else
              v241 = 4;
            __asm { BR              X11 }
            return result;
        }
        goto LABEL_366;
      case 5:
        v338 = v181;
        v242 = v180;
        v243 = v185;
        v244 = *(_QWORD *)v180;
        v245 = *(_QWORD *)(v180 + 8);
        v246 = *(_BYTE *)(v180 + 16);
        sub_2141DD130(v244, v245, v246);
        *(_QWORD *)v178 = v244;
        *(_QWORD *)(v178 + 8) = v245;
        *(_BYTE *)(v178 + 16) = v246;
        *(_QWORD *)(v178 + 24) = *(_QWORD *)(v242 + 24);
        v247 = (_QWORD *)((v365 + v178) & v177);
        v335 = v242;
        v248 = (_QWORD *)((v365 + v242) & v177);
        v249 = *((unsigned __int8 *)v248 + v243);
        swift_bridgeObjectRetain();
        switch(v249)
        {
          case 0:
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v350 + 16))(v247, v248, v361);
            v274 = v243;
            *((_BYTE *)v247 + v243) = 0;
            goto LABEL_327;
          case 1:
            v275 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v350 + 16);
            v275(v247, v248, v361);
            v275((_QWORD *)(((unint64_t)v247 + v172 + v346) & v338), (_QWORD *)(((unint64_t)v248 + v172 + v346) & v338), v361);
            v276 = 1;
            goto LABEL_326;
          case 2:
            *v247 = *v248;
            v274 = v243;
            *((_BYTE *)v247 + v243) = 2;
            swift_retain();
            goto LABEL_327;
          case 3:
            *v247 = *v248;
            *(_QWORD *)(((v365 + v178) & v177) + 8) = *(_QWORD *)(((v365 + v242) & v177) + 8);
            v274 = v243;
            *((_BYTE *)v247 + v243) = 3;
            swift_retain();
            swift_retain();
            goto LABEL_327;
          case 4:
            *v247 = *v248;
            v277 = ((unint64_t)v247 + v351) & v352;
            v278 = ((unint64_t)v248 + v351) & v352;
            v279 = *(void (**)(unint64_t, unint64_t, uint64_t))(v353 + 16);
            swift_retain();
            v279(v277, v278, v357);
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v358 + 16))((v354 + v356 + v277) & v355, (v354 + v356 + v278) & v355, v359);
            v276 = 4;
LABEL_326:
            v274 = v243;
            *((_BYTE *)v247 + v243) = v276;
LABEL_327:
            v280 = ((v348 | v174) + v363) & v177;
            v281 = ((v344 | v174) + v363) & v177;
            v282 = *(_QWORD *)v281;
            v283 = *(_QWORD *)(v281 + 8);
            v284 = *(_BYTE *)(v281 + 0x10);
            sub_2141DD130(*(_QWORD *)v281, v283, v284);
            *(_QWORD *)v280 = v282;
            *(_QWORD *)(v280 + 8) = v283;
            *(_BYTE *)(v280 + 16) = v284;
            *(_QWORD *)(v280 + 24) = *(_QWORD *)(v281 + 0x18);
            v285 = (_QWORD *)((v365 + v280) & v177);
            v286 = (_QWORD *)((v365 + v281) & v177);
            v287 = *((unsigned __int8 *)v286 + v274);
            swift_bridgeObjectRetain();
            v180 = v335;
            switch(v287)
            {
              case 0:
                (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v350 + 16))(v285, v286, v361);
                *((_BYTE *)v285 + v274) = 0;
                break;
              case 1:
                v324 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v350 + 16);
                v324(v285, v286, v361);
                v324((_QWORD *)(((unint64_t)v285 + v342) & v338), (_QWORD *)(((unint64_t)v286 + v342) & v338), v361);
                v325 = 1;
                goto LABEL_364;
              case 2:
                *v285 = *v286;
                *((_BYTE *)v285 + v274) = 2;
                goto LABEL_362;
              case 3:
                *v285 = *v286;
                *(_QWORD *)(((v365 + v280) & v177) + 8) = v286[1];
                *((_BYTE *)v285 + v274) = 3;
                swift_retain();
LABEL_362:
                swift_retain();
                break;
              case 4:
                *v285 = *v286;
                v326 = ((unint64_t)v285 + v351) & v352;
                v327 = ((unint64_t)v286 + v351) & v352;
                v328 = *(void (**)(unint64_t, unint64_t, uint64_t))(v353 + 16);
                swift_retain();
                v328(v326, v327, v357);
                (*(void (**)(unint64_t, unint64_t, uint64_t))(v358 + 16))((v354 + v356 + v326) & v355, (v354 + v356 + v327) & v355, v359);
                v325 = 4;
LABEL_364:
                *((_BYTE *)v285 + v274) = v325;
                break;
              default:
                if (v274 <= 3)
                  v288 = v274;
                else
                  v288 = 4;
                __asm { BR              X11 }
                return result;
            }
            v232 = 5;
            break;
          default:
            if (v243 <= 3)
              v250 = v243;
            else
              v250 = 4;
            __asm { BR              X11 }
            return result;
        }
        goto LABEL_366;
      case 6:
        v339 = v181;
        v251 = v180;
        v252 = v185;
        v253 = *(_QWORD *)v180;
        v254 = *(_QWORD *)(v180 + 8);
        v255 = *(_BYTE *)(v180 + 16);
        sub_2141DD130(v253, v254, v255);
        *(_QWORD *)v178 = v253;
        *(_QWORD *)(v178 + 8) = v254;
        *(_BYTE *)(v178 + 16) = v255;
        *(_QWORD *)(v178 + 24) = *(_QWORD *)(v251 + 24);
        v256 = (_QWORD *)((v365 + v178) & v177);
        v180 = v251;
        v257 = (_QWORD *)((v365 + v251) & v177);
        v258 = *((unsigned __int8 *)v257 + v252);
        swift_bridgeObjectRetain();
        switch(v258)
        {
          case 0:
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v350 + 16))(v256, v257, v361);
            *((_BYTE *)v256 + v252) = 0;
            goto LABEL_339;
          case 1:
            v293 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v350 + 16);
            v293(v256, v257, v361);
            v293((_QWORD *)(((unint64_t)v256 + v172 + v346) & v339), (_QWORD *)(((unint64_t)v257 + v172 + v346) & v339), v361);
            v292 = 1;
            goto LABEL_338;
          case 2:
            *v256 = *v257;
            *((_BYTE *)v256 + v252) = 2;
            swift_retain();
            goto LABEL_339;
          case 3:
            *v256 = *v257;
            *(_QWORD *)(((v365 + v178) & v177) + 8) = *(_QWORD *)(((v365 + v251) & v177) + 8);
            *((_BYTE *)v256 + v252) = 3;
            swift_retain();
            swift_retain();
            goto LABEL_339;
          case 4:
            *v256 = *v257;
            v289 = ((unint64_t)v256 + v351) & v352;
            v290 = ((unint64_t)v257 + v351) & v352;
            v291 = *(void (**)(unint64_t, unint64_t, uint64_t))(v353 + 16);
            swift_retain();
            v291(v289, v290, v357);
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v358 + 16))((v354 + v356 + v289) & v355, (v354 + v356 + v290) & v355, v359);
            v292 = 4;
LABEL_338:
            *((_BYTE *)v256 + v252) = v292;
LABEL_339:
            v294 = ((v178 | 7) + v363) & 0xFFFFFFFFFFFFFFF8;
            v295 = ((v251 | 7) + v363) & 0xFFFFFFFFFFFFFFF8;
            *(_BYTE *)v294 = *(_BYTE *)v295;
            v296 = (_OWORD *)(v294 + 8);
            v297 = (_OWORD *)(v295 + 8);
            if (*(unsigned __int8 *)(v295 + 96) == 255)
            {
              v303 = *(_OWORD *)(v295 + 24);
              *v296 = *v297;
              *(_OWORD *)(v294 + 24) = v303;
              v304 = *(_OWORD *)(v295 + 40);
              v305 = *(_OWORD *)(v295 + 56);
              v306 = *(_OWORD *)(v295 + 72);
              *(_OWORD *)(v294 + 81) = *(_OWORD *)(v295 + 81);
              *(_OWORD *)(v294 + 56) = v305;
              *(_OWORD *)(v294 + 72) = v306;
              *(_OWORD *)(v294 + 40) = v304;
            }
            else
            {
              *v296 = *v297;
              v298 = *(_OWORD *)(v295 + 24);
              v299 = *(_OWORD *)(v295 + 40);
              v300 = *(_OWORD *)(v295 + 72);
              *(_OWORD *)(v294 + 56) = *(_OWORD *)(v295 + 56);
              *(_OWORD *)(v294 + 72) = v300;
              *(_OWORD *)(v294 + 24) = v298;
              *(_OWORD *)(v294 + 40) = v299;
              v301 = *(_QWORD *)(v295 + 88);
              v302 = *(_BYTE *)(v295 + 96);
              sub_2142625F8(v301, v302);
              *(_QWORD *)(v294 + 88) = v301;
              *(_BYTE *)(v294 + 96) = v302;
            }
            v307 = *(_QWORD *)(v295 + 104);
            v308 = *(_BYTE *)(v295 + 112);
            sub_2142625F8(v307, v308);
            *(_QWORD *)(v294 + 104) = v307;
            *(_BYTE *)(v294 + 112) = v308;
            v232 = 6;
            break;
          default:
            if (v252 <= 3)
              v259 = v252;
            else
              v259 = 4;
            __asm { BR              X11 }
            return result;
        }
        goto LABEL_366;
      case 7:
        v340 = v181;
        v260 = v180;
        v261 = v185;
        v262 = *(_QWORD *)v180;
        v263 = *(_QWORD *)(v180 + 8);
        v264 = *(_BYTE *)(v180 + 16);
        sub_2141DD130(v262, v263, v264);
        *(_QWORD *)v178 = v262;
        *(_QWORD *)(v178 + 8) = v263;
        *(_BYTE *)(v178 + 16) = v264;
        *(_QWORD *)(v178 + 24) = *(_QWORD *)(v260 + 24);
        v265 = (_QWORD *)((v365 + v178) & v177);
        v180 = v260;
        v266 = (_QWORD *)((v365 + v260) & v177);
        v267 = *((unsigned __int8 *)v266 + v261);
        swift_bridgeObjectRetain();
        switch(v267)
        {
          case 0:
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v350 + 16))(v265, v266, v361);
            *((_BYTE *)v265 + v261) = 0;
            goto LABEL_350;
          case 1:
            v309 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v350 + 16);
            v309(v265, v266, v361);
            v309((_QWORD *)(((unint64_t)v265 + v172 + v346) & v340), (_QWORD *)(((unint64_t)v266 + v172 + v346) & v340), v361);
            v310 = 1;
            goto LABEL_349;
          case 2:
            *v265 = *v266;
            *((_BYTE *)v265 + v261) = 2;
            swift_retain();
            goto LABEL_350;
          case 3:
            *v265 = *v266;
            *(_QWORD *)(((v365 + v178) & v177) + 8) = *(_QWORD *)(((v365 + v260) & v177) + 8);
            *((_BYTE *)v265 + v261) = 3;
            swift_retain();
            swift_retain();
            goto LABEL_350;
          case 4:
            *v265 = *v266;
            v311 = ((unint64_t)v265 + v351) & v352;
            v312 = ((unint64_t)v266 + v351) & v352;
            v313 = *(void (**)(unint64_t, unint64_t, uint64_t))(v353 + 16);
            swift_retain();
            v313(v311, v312, v357);
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v358 + 16))((v354 + v356 + v311) & v355, (v354 + v356 + v312) & v355, v359);
            v310 = 4;
LABEL_349:
            *((_BYTE *)v265 + v261) = v310;
LABEL_350:
            v314 = ((v178 | 7) + v363) & 0xFFFFFFFFFFFFFFF8;
            v315 = ((v260 | 7) + v363) & 0xFFFFFFFFFFFFFFF8;
            *(_BYTE *)v314 = *(_BYTE *)v315;
            *(_BYTE *)(v314 + 1) = *(_BYTE *)(v315 + 1);
            *(_BYTE *)(v314 + 2) = *(_BYTE *)(v315 + 2);
            v316 = *(unsigned __int8 *)(v315 + 24);
            if (v316 <= 0xFB)
            {
              v318 = *(_QWORD *)(v315 + 8);
              v319 = *(_QWORD *)(v315 + 16);
              sub_2141DD140(v318, v319, *(_BYTE *)(v315 + 24));
              *(_QWORD *)(v314 + 8) = v318;
              *(_QWORD *)(v314 + 16) = v319;
              *(_BYTE *)(v314 + 24) = v316;
            }
            else
            {
              v317 = *(_OWORD *)(v315 + 8);
              *(_BYTE *)(v314 + 24) = *(_BYTE *)(v315 + 24);
              *(_OWORD *)(v314 + 8) = v317;
            }
            v320 = *(unsigned __int8 *)(v315 + 48);
            if (v320 <= 0xFB)
            {
              v322 = *(_QWORD *)(v315 + 32);
              v323 = *(_QWORD *)(v315 + 40);
              sub_2141DD140(v322, v323, *(_BYTE *)(v315 + 48));
              *(_QWORD *)(v314 + 32) = v322;
              *(_QWORD *)(v314 + 40) = v323;
              *(_BYTE *)(v314 + 48) = v320;
            }
            else
            {
              v321 = *(_OWORD *)(v315 + 32);
              *(_BYTE *)(v314 + 48) = *(_BYTE *)(v315 + 48);
              *(_OWORD *)(v314 + 32) = v321;
            }
            v232 = 7;
            break;
          default:
            if (v261 <= 3)
              v268 = v261;
            else
              v268 = 4;
            __asm { BR              X11 }
            return result;
        }
LABEL_366:
        *(_BYTE *)(v178 + v190) = v232;
        break;
      default:
        if (v190 <= 3)
          v229 = v190;
        else
          v229 = 4;
        __asm { BR              X12 }
        return result;
    }
  }
  *(_QWORD *)(((v178 | 7) + v190 + 1) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)(((v180 | 7) + v190 + 1) & 0xFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  return v366;
}

uint64_t sub_21426805C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  __int128 v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  __int128 v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  __int128 v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  void (*v68)(uint64_t, uint64_t, uint64_t);
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  char v84;
  void (*v85)(_QWORD *, uint64_t, uint64_t);
  _QWORD *v86;
  unint64_t v87;
  unint64_t v88;
  _QWORD *v89;
  _OWORD *v90;
  _OWORD *v91;
  __int128 v92;
  _QWORD *v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  char v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  void (*v111)(uint64_t, uint64_t, uint64_t);
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  _QWORD *v118;
  unint64_t v119;
  unint64_t v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  _QWORD *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  _QWORD *v134;
  char v135;
  void (*v136)(uint64_t, uint64_t, uint64_t);
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  unint64_t v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  _QWORD *v149;
  unint64_t v150;
  unint64_t v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  uint64_t v155;
  char v156;
  void (*v157)(_QWORD *, _QWORD *, uint64_t);
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  uint64_t v177;
  unint64_t v178;
  unint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  char v183;
  uint64_t v184;
  uint64_t result;
  __int128 v186;
  __int128 v187;
  _QWORD *v188;
  _QWORD *v189;
  uint64_t v190;
  __int128 v191;
  _QWORD *v192;
  _QWORD *v193;
  uint64_t v194;
  __int128 v195;
  _QWORD *v196;
  _QWORD *v197;
  uint64_t v198;
  __int128 v199;
  _QWORD *v200;
  _QWORD *v201;
  uint64_t v202;
  uint64_t v203;
  char v204;
  void (*v205)(uint64_t, uint64_t);
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  unint64_t v212;
  unint64_t v213;
  uint64_t v214;
  uint64_t v215;
  char v216;
  unint64_t v217;
  _OWORD *v218;
  _OWORD *v219;
  __int128 v220;
  _QWORD *v221;
  _QWORD *v222;
  uint64_t v223;
  uint64_t v224;
  char v225;
  unint64_t v226;
  unint64_t v227;
  uint64_t v228;
  void (*v229)(uint64_t, uint64_t);
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  unint64_t v235;
  unint64_t v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  uint64_t v243;
  char v244;
  void (*v245)(uint64_t, uint64_t);
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  unint64_t v251;
  unint64_t v252;
  uint64_t v253;
  unint64_t v254;
  unint64_t v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  uint64_t v259;
  char v260;
  void (*v261)(unint64_t, unint64_t, uint64_t);
  uint64_t v262;
  unint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  void (*v270)(uint64_t, uint64_t);
  unint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  unint64_t v276;
  unint64_t v277;
  unint64_t v278;
  unint64_t v279;
  unint64_t v280;
  unint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 32))();
  v7 = *(_QWORD *)(v6 + 64);
  v310 = *(_QWORD *)(a3 + 24);
  v312 = a3;
  v8 = *(_QWORD *)(v310 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v307 = sub_214423C48();
  v10 = *(_QWORD *)(v307 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v309 = sub_214423C54();
  v12 = *(_QWORD *)(v309 - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = v13 | v11;
  v15 = v13 | v11 | v9;
  v16 = v15 | 7;
  v17 = (v15 | 7) + v7;
  v314 = a1;
  v18 = v17 + a1;
  v19 = (v17 + a1) & ~(v15 | 7);
  v20 = v17 + a2;
  v21 = (v17 + a2) & ~(v15 | 7);
  v22 = v15 + 32;
  v23 = (v15 + 32) & ~(v15 | 7);
  v299 = v8;
  v24 = *(_QWORD *)(v8 + 64);
  v25 = v24 + v9;
  if (((v24 + v9) & ~v9) + v24 > v24)
    v24 += (v24 + v9) & ~v9;
  v26 = v11 + 8;
  v27 = *(_QWORD *)(v10 + 64) + v13;
  v305 = v10;
  v306 = v27;
  v308 = *(_QWORD *)(v309 - 8);
  v28 = ((v27 + ((v11 + 8) & ~v11)) & ~v13) + *(_QWORD *)(v12 + 64);
  if (v24 <= v28)
    v24 = ((v27 + ((v11 + 8) & ~v11)) & ~v13) + *(_QWORD *)(v12 + 64);
  if (v24 <= 0x10)
    v29 = 16;
  else
    v29 = v24;
  v30 = v29 + v23;
  v31 = v30 + 1;
  v32 = ((v30 + 1 + v16) & ~v16) + v30 + 1;
  if (v30 + 1 > v32)
    v32 = v30 + 1;
  v33 = v30 + 8;
  v34 = (v30 + 8) & 0xFFFFFFFFFFFFFFF8;
  if (v32 <= v34 + 113)
    v32 = v34 + 113;
  v35 = v34 + 49;
  if (v32 > v35)
    v35 = v32;
  if (v35 <= 0x19)
    v36 = 25;
  else
    v36 = v35;
  v38 = ~v16;
  v39 = ~v11;
  v304 = ~v13;
  switch(*(_BYTE *)(v21 + v36))
  {
    case 0:
      v40 = 0;
      v41 = *(_QWORD *)v21;
      *(_BYTE *)(v19 + 8) = *(_BYTE *)(v21 + 8);
      *(_QWORD *)v19 = v41;
      v42 = v312;
      break;
    case 1:
      v43 = *(_OWORD *)v21;
      *(_OWORD *)(v19 + 9) = *(_OWORD *)(v21 + 9);
      *(_OWORD *)v19 = v43;
      v40 = 1;
      v42 = v312;
      break;
    case 2:
      *(_QWORD *)v19 = *(_QWORD *)v21;
      v40 = 2;
      v42 = v312;
      break;
    case 3:
      *(_OWORD *)v19 = *(_OWORD *)v21;
      v40 = 3;
      v42 = v312;
      break;
    case 4:
      v44 = *(_OWORD *)(v21 + 16);
      *(_OWORD *)v19 = *(_OWORD *)v21;
      *(_OWORD *)(v19 + 16) = v44;
      v45 = (_QWORD *)((v22 + v19) & v38);
      v46 = (_QWORD *)((v22 + v21) & v38);
      switch(*((_BYTE *)v46 + v29))
      {
        case 0:
          v60 = v19;
          v61 = (v22 + v19) & v38;
          v62 = v28;
          v63 = (v22 + v21) & v38;
          v64 = v36;
          v65 = v13 | v11;
          v66 = v29;
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v299 + 32))(v61, v63, v310);
          v29 = v66;
          v36 = v64;
          v28 = v62;
          v19 = v60;
          v14 = v65;
          v39 = ~v11;
          v26 = v11 + 8;
          v67 = 0;
          break;
        case 1:
          v68 = *(void (**)(uint64_t, uint64_t, uint64_t))(v299 + 32);
          v276 = v28;
          v283 = v19;
          v69 = (v22 + v19) & v38;
          v70 = (v22 + v21) & v38;
          v272 = v36;
          v71 = v25;
          v72 = v13 | v11;
          v73 = v29;
          v68(v69, v70, v310);
          v68(((unint64_t)v45 + v71) & ~v9, ((unint64_t)v46 + v71) & ~v9, v310);
          v29 = v73;
          v36 = v272;
          v28 = v276;
          v19 = v283;
          v14 = v72;
          v39 = ~v11;
          v26 = v11 + 8;
          v67 = 1;
          break;
        case 2:
          *v45 = *v46;
          v67 = 2;
          break;
        case 3:
          *(_OWORD *)v45 = *(_OWORD *)v46;
          v67 = 3;
          break;
        case 4:
          *v45 = *v46;
          v74 = (_QWORD *)((v22 + v19) & v38);
          v75 = ((unint64_t)v45 + v26) & v39;
          v76 = ((unint64_t)v46 + v26) & v39;
          v284 = v19;
          v77 = v28;
          v78 = v36;
          v79 = v13 | v11;
          v80 = v29;
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v305 + 32))(v75, v76, v307);
          v81 = v306 + v75;
          v45 = v74;
          (*(void (**)(uint64_t, unint64_t, uint64_t))(v308 + 32))(v81 & v304, (v306 + v76) & v304, v309);
          v29 = v80;
          v36 = v78;
          v28 = v77;
          v19 = v284;
          v14 = v79;
          v39 = ~v11;
          v26 = v11 + 8;
          v67 = 4;
          break;
        default:
          if (v29 <= 3)
            v47 = v29;
          else
            v47 = 4;
          __asm { BR              X12 }
          return result;
      }
      v42 = v312;
      *((_BYTE *)v45 + v29) = v67;
      v40 = 4;
      break;
    case 5:
      v48 = *(_OWORD *)(v21 + 16);
      *(_OWORD *)v19 = *(_OWORD *)v21;
      *(_OWORD *)(v19 + 16) = v48;
      v49 = (_QWORD *)((v22 + v19) & v38);
      v50 = (_QWORD *)((v22 + v21) & v38);
      v267 = ~v9;
      v268 = v25;
      v273 = v36;
      v277 = v28;
      v285 = v19;
      v291 = ~v11;
      v269 = v13 | v11;
      v295 = v11 + 8;
      switch(*((_BYTE *)v50 + v29))
      {
        case 0:
          v82 = v29;
          v83 = (_QWORD *)((v22 + v19) & v38);
          (*(void (**)(_QWORD *, uint64_t, uint64_t))(v299 + 32))(v83, (v22 + v21) & v38, v310);
          v49 = v83;
          v29 = v82;
          v84 = 0;
          break;
        case 1:
          v85 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v299 + 32);
          v265 = v29;
          v86 = (_QWORD *)((v22 + v19) & v38);
          v85(v86, (v22 + v21) & v38, v310);
          v85((_QWORD *)(((unint64_t)v86 + v268) & v267), ((unint64_t)v50 + v268) & v267, v310);
          v49 = v86;
          v29 = v265;
          v84 = 1;
          break;
        case 2:
          *v49 = *v50;
          v84 = 2;
          break;
        case 3:
          *(_OWORD *)v49 = *(_OWORD *)v50;
          v84 = 3;
          break;
        case 4:
          *v49 = *v50;
          v87 = ((unint64_t)v49 + v26) & v39;
          v88 = ((unint64_t)v50 + v26) & v39;
          v266 = v29;
          v89 = (_QWORD *)((v22 + v19) & v38);
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v305 + 32))(v87, v88, v307);
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v308 + 32))((v306 + v87) & v304, (v306 + v88) & v304, v309);
          v49 = v89;
          v29 = v266;
          v84 = 4;
          break;
        default:
          if (v29 <= 3)
            v51 = v29;
          else
            v51 = 4;
          __asm { BR              X12 }
          return result;
      }
      *((_BYTE *)v49 + v29) = v84;
      v90 = (_OWORD *)(((v18 | v16) + v31) & v38);
      v91 = (_OWORD *)(((v20 | v16) + v31) & v38);
      v92 = v91[1];
      *v90 = *v91;
      v90[1] = v92;
      v93 = (_QWORD *)(((unint64_t)v90 + v22) & v38);
      v94 = (_QWORD *)(((unint64_t)v91 + v22) & v38);
      v39 = v291;
      v26 = v295;
      switch(*((_BYTE *)v94 + v29))
      {
        case 0:
          v155 = v29;
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v299 + 32))(v93, v94, v310);
          v29 = v155;
          v39 = v291;
          v26 = v295;
          v156 = 0;
          break;
        case 1:
          v157 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v299 + 32);
          v158 = v29;
          v157(v93, v94, v310);
          v157((_QWORD *)(((unint64_t)v93 + v268) & v267), (_QWORD *)(((unint64_t)v94 + v268) & v267), v310);
          v29 = v158;
          v39 = v291;
          v26 = v295;
          v156 = 1;
          break;
        case 2:
          *v93 = *v94;
          v156 = 2;
          break;
        case 3:
          *(_OWORD *)v93 = *(_OWORD *)v94;
          v156 = 3;
          break;
        case 4:
          *v93 = *v94;
          v159 = ((unint64_t)v94 + v295) & v291;
          v160 = v29;
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v305 + 32))(((unint64_t)v93 + v295) & v291, v159, v307);
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v308 + 32))((v306 + (((unint64_t)v93 + v295) & v291)) & v304, (v306 + v159) & v304, v309);
          v29 = v160;
          v39 = v291;
          v26 = v295;
          v156 = 4;
          break;
        default:
          if (v29 <= 3)
            v95 = v29;
          else
            v95 = 4;
          __asm { BR              X12 }
          return result;
      }
      v42 = v312;
      v14 = v269;
      v36 = v273;
      v28 = v277;
      v19 = v285;
      *((_BYTE *)v93 + v29) = v156;
      v40 = 5;
      break;
    case 6:
      v52 = *(_OWORD *)(v21 + 16);
      *(_OWORD *)v19 = *(_OWORD *)v21;
      *(_OWORD *)(v19 + 16) = v52;
      v53 = (_QWORD *)((v22 + v19) & v38);
      v54 = (_QWORD *)((v22 + v21) & v38);
      switch(*((_BYTE *)v54 + v29))
      {
        case 0:
          v96 = v19;
          v97 = (v22 + v19) & v38;
          v98 = v28;
          v99 = v54;
          v100 = v36;
          v101 = v13 | v11;
          v102 = v29;
          v103 = v53;
          (*(void (**)(uint64_t, _QWORD *, uint64_t))(v299 + 32))(v97, v99, v310);
          v53 = v103;
          v29 = v102;
          v36 = v100;
          v28 = v98;
          v19 = v96;
          v14 = v101;
          v39 = ~v11;
          v26 = v11 + 8;
          v104 = 0;
          break;
        case 1:
          v111 = *(void (**)(uint64_t, uint64_t, uint64_t))(v299 + 32);
          v279 = v28;
          v287 = v19;
          v112 = (v22 + v19) & v38;
          v113 = (v22 + v21) & v38;
          v274 = v36;
          v114 = v25;
          v292 = ~v11;
          v296 = v11 + 8;
          v115 = v13 | v11;
          v116 = v29;
          v117 = ~v9;
          v118 = v53;
          v111(v112, v113, v310);
          v111(((unint64_t)v118 + v114) & v117, ((unint64_t)v54 + v114) & v117, v310);
          v53 = v118;
          v29 = v116;
          v36 = v274;
          v28 = v279;
          v19 = v287;
          v39 = v292;
          v14 = v115;
          v26 = v296;
          v104 = 1;
          break;
        case 2:
          *v53 = *v54;
          v104 = 2;
          break;
        case 3:
          *(_OWORD *)v53 = *(_OWORD *)v54;
          v104 = 3;
          break;
        case 4:
          *v53 = *v54;
          v105 = ((unint64_t)v53 + v26) & v39;
          v106 = ((unint64_t)v54 + v26) & v39;
          v278 = v28;
          v286 = v19;
          v107 = v36;
          v108 = v13 | v11;
          v109 = v29;
          v110 = v53;
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v305 + 32))(v105, v106, v307);
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v308 + 32))((v306 + v105) & v304, (v306 + v106) & v304, v309);
          v53 = v110;
          v29 = v109;
          v36 = v107;
          v28 = v278;
          v19 = v286;
          v14 = v108;
          v39 = ~v11;
          v26 = v11 + 8;
          v104 = 4;
          break;
        default:
          if (v29 <= 3)
            v55 = v29;
          else
            v55 = 4;
          __asm { BR              X12 }
          return result;
      }
      v42 = v312;
      *((_BYTE *)v53 + v29) = v104;
      v119 = (v33 + v19) & 0xFFFFFFFFFFFFFFF8;
      v120 = (v33 + v21) & 0xFFFFFFFFFFFFFFF8;
      v121 = *(_OWORD *)v120;
      v122 = *(_OWORD *)(v120 + 16);
      v123 = *(_OWORD *)(v120 + 48);
      *(_OWORD *)(v119 + 32) = *(_OWORD *)(v120 + 32);
      *(_OWORD *)(v119 + 48) = v123;
      *(_OWORD *)v119 = v121;
      *(_OWORD *)(v119 + 16) = v122;
      v124 = *(_OWORD *)(v120 + 64);
      v125 = *(_OWORD *)(v120 + 80);
      v126 = *(_OWORD *)(v120 + 96);
      *(_BYTE *)(v119 + 112) = *(_BYTE *)(v120 + 112);
      *(_OWORD *)(v119 + 80) = v125;
      *(_OWORD *)(v119 + 96) = v126;
      *(_OWORD *)(v119 + 64) = v124;
      v40 = 6;
      break;
    case 7:
      v56 = *(_OWORD *)(v21 + 16);
      *(_OWORD *)v19 = *(_OWORD *)v21;
      *(_OWORD *)(v19 + 16) = v56;
      v57 = (_QWORD *)((v22 + v19) & v38);
      v58 = (_QWORD *)((v22 + v21) & v38);
      switch(*((_BYTE *)v58 + v29))
      {
        case 0:
          v127 = v19;
          v128 = (v22 + v19) & v38;
          v129 = v28;
          v130 = v58;
          v131 = v36;
          v132 = v13 | v11;
          v133 = v29;
          v134 = v57;
          (*(void (**)(uint64_t, _QWORD *, uint64_t))(v299 + 32))(v128, v130, v310);
          v57 = v134;
          v29 = v133;
          v36 = v131;
          v28 = v129;
          v19 = v127;
          v14 = v132;
          v39 = ~v11;
          v26 = v11 + 8;
          v135 = 0;
          break;
        case 1:
          v136 = *(void (**)(uint64_t, uint64_t, uint64_t))(v299 + 32);
          v280 = v28;
          v288 = v19;
          v137 = (v22 + v19) & v38;
          v138 = (v22 + v21) & v38;
          v275 = v36;
          v139 = v25;
          v293 = ~v11;
          v297 = v11 + 8;
          v140 = v13 | v11;
          v141 = v29;
          v142 = ~v9;
          v143 = v57;
          v136(v137, v138, v310);
          v136(((unint64_t)v143 + v139) & v142, ((unint64_t)v58 + v139) & v142, v310);
          v57 = v143;
          v29 = v141;
          v36 = v275;
          v28 = v280;
          v19 = v288;
          v39 = v293;
          v14 = v140;
          v26 = v297;
          v135 = 1;
          break;
        case 2:
          *v57 = *v58;
          v135 = 2;
          break;
        case 3:
          *(_OWORD *)v57 = *(_OWORD *)v58;
          v135 = 3;
          break;
        case 4:
          *v57 = *v58;
          v144 = ((unint64_t)v57 + v26) & v39;
          v145 = ((unint64_t)v58 + v26) & v39;
          v281 = v28;
          v289 = v19;
          v146 = v36;
          v147 = v13 | v11;
          v148 = v29;
          v149 = v57;
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v305 + 32))(v144, v145, v307);
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v308 + 32))((v306 + v144) & v304, (v306 + v145) & v304, v309);
          v57 = v149;
          v29 = v148;
          v36 = v146;
          v28 = v281;
          v19 = v289;
          v14 = v147;
          v39 = ~v11;
          v26 = v11 + 8;
          v135 = 4;
          break;
        default:
          if (v29 <= 3)
            v59 = v29;
          else
            v59 = 4;
          __asm { BR              X12 }
          return result;
      }
      v42 = v312;
      *((_BYTE *)v57 + v29) = v135;
      v150 = (v33 + v19) & 0xFFFFFFFFFFFFFFF8;
      v151 = (v33 + v21) & 0xFFFFFFFFFFFFFFF8;
      v152 = *(_OWORD *)v151;
      v153 = *(_OWORD *)(v151 + 16);
      v154 = *(_OWORD *)(v151 + 32);
      *(_BYTE *)(v150 + 48) = *(_BYTE *)(v151 + 48);
      *(_OWORD *)(v150 + 16) = v153;
      *(_OWORD *)(v150 + 32) = v154;
      *(_OWORD *)v150 = v152;
      v40 = 7;
      break;
    default:
      if (v36 <= 3)
        v37 = v36;
      else
        v37 = 4;
      __asm { BR              X13 }
      return result;
  }
  *(_BYTE *)(v19 + v36) = v40;
  v161 = *(_QWORD *)(v42 + 32);
  v162 = *(_QWORD *)(v161 - 8);
  v163 = *(unsigned __int8 *)(v162 + 80);
  v164 = v14 | v163 | 7;
  v165 = v36 + v164 + 1;
  v166 = v165 + v19;
  v167 = (v165 + v19) & ~v164;
  v168 = v165 + v21;
  v169 = (v165 + v21) & ~v164;
  v170 = (v14 | v163) + 32;
  v171 = *(_QWORD *)(v162 + 64);
  v172 = v171 + v163;
  if (((v171 + v163) & ~v163) + v171 > v171)
    v171 += (v171 + v163) & ~v163;
  if (v171 <= v28)
    v171 = v28;
  if (v171 <= 0x10)
    v173 = 16;
  else
    v173 = v171;
  v174 = v173 + (v170 & ~v164);
  v175 = v174 + 1;
  v176 = ((v174 + 1 + v164) & ~v164) + v174 + 1;
  if (v174 + 1 > v176)
    v176 = v174 + 1;
  v177 = v174 + 8;
  v178 = (v174 + 8) & 0xFFFFFFFFFFFFFFF8;
  if (v176 <= v178 + 113)
    v176 = v178 + 113;
  v179 = v178 + 49;
  if (v176 > v179)
    v179 = v176;
  if (v179 <= 0x19)
    v180 = 25;
  else
    v180 = v179;
  v182 = ~v164;
  switch(*(_BYTE *)(v169 + v180))
  {
    case 0:
      v183 = 0;
      v184 = *(_QWORD *)v169;
      *(_BYTE *)(v167 + 8) = *(_BYTE *)(v169 + 8);
      *(_QWORD *)v167 = v184;
      result = v314;
      break;
    case 1:
      v186 = *(_OWORD *)v169;
      *(_OWORD *)(v167 + 9) = *(_OWORD *)(v169 + 9);
      *(_OWORD *)v167 = v186;
      v183 = 1;
      result = v314;
      break;
    case 2:
      *(_QWORD *)v167 = *(_QWORD *)v169;
      v183 = 2;
      result = v314;
      break;
    case 3:
      *(_OWORD *)v167 = *(_OWORD *)v169;
      v183 = 3;
      result = v314;
      break;
    case 4:
      v187 = *(_OWORD *)(v169 + 16);
      *(_OWORD *)v167 = *(_OWORD *)v169;
      *(_OWORD *)(v167 + 16) = v187;
      v188 = (_QWORD *)((v170 + v167) & v182);
      v189 = (_QWORD *)((v170 + v169) & v182);
      switch(*((_BYTE *)v189 + v173))
      {
        case 0:
          v203 = v173;
          (*(void (**)(uint64_t, uint64_t))(v162 + 32))((v170 + v167) & v182, (v170 + v169) & v182);
          v173 = v203;
          v204 = 0;
          break;
        case 1:
          v205 = *(void (**)(uint64_t, uint64_t))(v162 + 32);
          v206 = v172;
          v207 = (v170 + v167) & v182;
          v208 = (v170 + v169) & v182;
          v209 = v173;
          v210 = v161;
          v211 = ~v163;
          v205(v207, v208);
          ((void (*)(unint64_t, unint64_t, uint64_t))v205)(((unint64_t)v188 + v206) & v211, ((unint64_t)v189 + v206) & v211, v210);
          v173 = v209;
          v204 = 1;
          break;
        case 2:
          *v188 = *v189;
          v204 = 2;
          break;
        case 3:
          *(_OWORD *)v188 = *(_OWORD *)v189;
          v204 = 3;
          break;
        case 4:
          *v188 = *v189;
          v212 = ((unint64_t)v188 + v26) & v39;
          v213 = ((unint64_t)v189 + v26) & v39;
          v214 = v173;
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v305 + 32))(v212, v213, v307);
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v308 + 32))((v306 + v212) & v304, (v306 + v213) & v304, v309);
          v173 = v214;
          v204 = 4;
          break;
        default:
          if (v173 <= 3)
            v190 = v173;
          else
            v190 = 4;
          __asm { BR              X12 }
          return result;
      }
      result = v314;
      *((_BYTE *)v188 + v173) = v204;
      v183 = 4;
      break;
    case 5:
      v191 = *(_OWORD *)(v169 + 16);
      *(_OWORD *)v167 = *(_OWORD *)v169;
      *(_OWORD *)(v167 + 16) = v191;
      v192 = (_QWORD *)((v170 + v167) & v182);
      v193 = (_QWORD *)((v170 + v169) & v182);
      v282 = ~v163;
      v290 = v172;
      v294 = v39;
      v298 = v26;
      v311 = v162;
      v313 = v161;
      switch(*((_BYTE *)v193 + v173))
      {
        case 0:
          v215 = v173;
          (*(void (**)(uint64_t, uint64_t))(v162 + 32))((v170 + v167) & v182, (v170 + v169) & v182);
          v192 = (_QWORD *)((v170 + v167) & v182);
          v173 = v215;
          v216 = 0;
          break;
        case 1:
          v270 = *(void (**)(uint64_t, uint64_t))(v162 + 32);
          v300 = v173;
          v270((v170 + v167) & v182, (v170 + v169) & v182);
          ((void (*)(uint64_t, unint64_t, uint64_t))v270)((v290 + ((v170 + v167) & v182)) & v282, ((unint64_t)v193 + v290) & v282, v313);
          v192 = (_QWORD *)((v170 + v167) & v182);
          v173 = v300;
          v216 = 1;
          break;
        case 2:
          *v192 = *v193;
          v216 = 2;
          break;
        case 3:
          *(_OWORD *)v192 = *(_OWORD *)v193;
          v216 = 3;
          break;
        case 4:
          *v192 = *v193;
          v271 = ((unint64_t)v192 + v26) & v39;
          v217 = ((unint64_t)v193 + v26) & v39;
          v301 = v173;
          (*(void (**)(void))(v305 + 32))();
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v308 + 32))((v306 + v271) & v304, (v306 + v217) & v304, v309);
          v192 = (_QWORD *)((v170 + v167) & v182);
          v173 = v301;
          v216 = 4;
          break;
        default:
          if (v173 <= 3)
            v194 = v173;
          else
            v194 = 4;
          __asm { BR              X12 }
          return result;
      }
      *((_BYTE *)v192 + v173) = v216;
      v218 = (_OWORD *)(((v166 | v164) + v175) & v182);
      v219 = (_OWORD *)(((v168 | v164) + v175) & v182);
      v220 = v219[1];
      *v218 = *v219;
      v218[1] = v220;
      v221 = (_QWORD *)(((unint64_t)v218 + v170) & v182);
      v222 = (_QWORD *)(((unint64_t)v219 + v170) & v182);
      switch(*((_BYTE *)v222 + v173))
      {
        case 0:
          v259 = v173;
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v311 + 32))(v221, v222, v313);
          v173 = v259;
          v260 = 0;
          break;
        case 1:
          v261 = *(void (**)(unint64_t, unint64_t, uint64_t))(v311 + 32);
          v262 = v173;
          ((void (*)(_QWORD *, _QWORD *))v261)(v221, v222);
          v261(((unint64_t)v221 + v290) & v282, ((unint64_t)v222 + v290) & v282, v313);
          v173 = v262;
          v260 = 1;
          break;
        case 2:
          *v221 = *v222;
          v260 = 2;
          break;
        case 3:
          *(_OWORD *)v221 = *(_OWORD *)v222;
          v260 = 3;
          break;
        case 4:
          *v221 = *v222;
          v263 = ((unint64_t)v222 + v298) & v294;
          v264 = v173;
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v305 + 32))(((unint64_t)v221 + v298) & v294, v263, v307);
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v308 + 32))((v306 + (((unint64_t)v221 + v298) & v294)) & v304, (v306 + v263) & v304, v309);
          v173 = v264;
          v260 = 4;
          break;
        default:
          if (v173 <= 3)
            v223 = v173;
          else
            v223 = 4;
          __asm { BR              X12 }
          return result;
      }
      result = v314;
      *((_BYTE *)v221 + v173) = v260;
      v183 = 5;
      break;
    case 6:
      v195 = *(_OWORD *)(v169 + 16);
      *(_OWORD *)v167 = *(_OWORD *)v169;
      *(_OWORD *)(v167 + 16) = v195;
      v196 = (_QWORD *)((v170 + v167) & v182);
      v197 = (_QWORD *)((v170 + v169) & v182);
      switch(*((_BYTE *)v197 + v173))
      {
        case 0:
          v224 = v173;
          (*(void (**)(uint64_t, uint64_t))(v162 + 32))((v170 + v167) & v182, (v170 + v169) & v182);
          v173 = v224;
          v225 = 0;
          break;
        case 1:
          v229 = *(void (**)(uint64_t, uint64_t))(v162 + 32);
          v230 = v172;
          v231 = (v170 + v167) & v182;
          v232 = (v170 + v169) & v182;
          v302 = v173;
          v233 = v161;
          v234 = ~v163;
          v229(v231, v232);
          ((void (*)(unint64_t, unint64_t, uint64_t))v229)(((unint64_t)v196 + v230) & v234, ((unint64_t)v197 + v230) & v234, v233);
          v173 = v302;
          v225 = 1;
          break;
        case 2:
          *v196 = *v197;
          v225 = 2;
          break;
        case 3:
          *(_OWORD *)v196 = *(_OWORD *)v197;
          v225 = 3;
          break;
        case 4:
          *v196 = *v197;
          v226 = ((unint64_t)v196 + v26) & v39;
          v227 = ((unint64_t)v197 + v26) & v39;
          v228 = v173;
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v305 + 32))(v226, v227, v307);
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v308 + 32))((v306 + v226) & v304, (v306 + v227) & v304, v309);
          v173 = v228;
          v225 = 4;
          break;
        default:
          if (v173 <= 3)
            v198 = v173;
          else
            v198 = 4;
          __asm { BR              X12 }
          return result;
      }
      result = v314;
      *((_BYTE *)v196 + v173) = v225;
      v235 = (v177 + v167) & 0xFFFFFFFFFFFFFFF8;
      v236 = (v177 + v169) & 0xFFFFFFFFFFFFFFF8;
      v237 = *(_OWORD *)v236;
      v238 = *(_OWORD *)(v236 + 16);
      v239 = *(_OWORD *)(v236 + 48);
      *(_OWORD *)(v235 + 32) = *(_OWORD *)(v236 + 32);
      *(_OWORD *)(v235 + 48) = v239;
      *(_OWORD *)v235 = v237;
      *(_OWORD *)(v235 + 16) = v238;
      v240 = *(_OWORD *)(v236 + 64);
      v241 = *(_OWORD *)(v236 + 80);
      v242 = *(_OWORD *)(v236 + 96);
      *(_BYTE *)(v235 + 112) = *(_BYTE *)(v236 + 112);
      *(_OWORD *)(v235 + 80) = v241;
      *(_OWORD *)(v235 + 96) = v242;
      *(_OWORD *)(v235 + 64) = v240;
      v183 = 6;
      break;
    case 7:
      v199 = *(_OWORD *)(v169 + 16);
      *(_OWORD *)v167 = *(_OWORD *)v169;
      *(_OWORD *)(v167 + 16) = v199;
      v200 = (_QWORD *)((v170 + v167) & v182);
      v201 = (_QWORD *)((v170 + v169) & v182);
      switch(*((_BYTE *)v201 + v173))
      {
        case 0:
          v243 = v173;
          (*(void (**)(uint64_t, uint64_t))(v162 + 32))((v170 + v167) & v182, (v170 + v169) & v182);
          v173 = v243;
          v244 = 0;
          break;
        case 1:
          v245 = *(void (**)(uint64_t, uint64_t))(v162 + 32);
          v246 = v172;
          v247 = (v170 + v167) & v182;
          v248 = (v170 + v169) & v182;
          v303 = v173;
          v249 = v161;
          v250 = ~v163;
          v245(v247, v248);
          ((void (*)(unint64_t, unint64_t, uint64_t))v245)(((unint64_t)v200 + v246) & v250, ((unint64_t)v201 + v246) & v250, v249);
          v173 = v303;
          v244 = 1;
          break;
        case 2:
          *v200 = *v201;
          v244 = 2;
          break;
        case 3:
          *(_OWORD *)v200 = *(_OWORD *)v201;
          v244 = 3;
          break;
        case 4:
          *v200 = *v201;
          v251 = ((unint64_t)v200 + v26) & v39;
          v252 = ((unint64_t)v201 + v26) & v39;
          v253 = v173;
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v305 + 32))(v251, v252, v307);
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v308 + 32))((v306 + v251) & v304, (v306 + v252) & v304, v309);
          v173 = v253;
          v244 = 4;
          break;
        default:
          if (v173 <= 3)
            v202 = v173;
          else
            v202 = 4;
          __asm { BR              X12 }
          return result;
      }
      result = v314;
      *((_BYTE *)v200 + v173) = v244;
      v254 = (v177 + v167) & 0xFFFFFFFFFFFFFFF8;
      v255 = (v177 + v169) & 0xFFFFFFFFFFFFFFF8;
      v256 = *(_OWORD *)v255;
      v257 = *(_OWORD *)(v255 + 16);
      v258 = *(_OWORD *)(v255 + 32);
      *(_BYTE *)(v254 + 48) = *(_BYTE *)(v255 + 48);
      *(_OWORD *)(v254 + 16) = v257;
      *(_OWORD *)(v254 + 32) = v258;
      *(_OWORD *)v254 = v256;
      v183 = 7;
      break;
    default:
      if (v180 <= 3)
        v181 = v180;
      else
        v181 = 4;
      __asm { BR              X13 }
      return result;
  }
  *(_BYTE *)(v167 + v180) = v183;
  *(_QWORD *)(((v167 | 7) + v180 + 1) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((v169 | 7) + v180 + 1) & 0xFFFFFFFFFFFFF8);
  return result;
}

uint64_t sub_214269814(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(uint64_t, uint64_t);
  unint64_t v53;
  void (*v54)(uint64_t, uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(uint64_t, uint64_t);
  unint64_t v60;
  int v61;
  void (*v62)(uint64_t, uint64_t);
  uint64_t v63;
  unint64_t v64;
  unsigned int v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  __int128 v73;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  __int128 v77;
  _QWORD *v78;
  _QWORD *v79;
  uint64_t v80;
  __int128 v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v84;
  __int128 v85;
  _QWORD *v86;
  _QWORD *v87;
  uint64_t v88;
  char v89;
  void (*v90)(_QWORD *, _QWORD *, uint64_t);
  unint64_t v91;
  char v92;
  void (*v93)(uint64_t, uint64_t, uint64_t);
  unint64_t v94;
  _OWORD *v95;
  _OWORD *v96;
  __int128 v97;
  _QWORD *v98;
  _QWORD *v99;
  uint64_t v100;
  char v101;
  unint64_t v102;
  void (*v103)(_QWORD *, _QWORD *, uint64_t);
  unint64_t v104;
  unint64_t v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  char v112;
  void (*v113)(_QWORD *, _QWORD *, uint64_t);
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  char v120;
  char v121;
  void (*v122)(_QWORD *, _QWORD *, uint64_t);
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  unint64_t v138;
  uint64_t v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  void (*v161)(uint64_t, uint64_t);
  unint64_t v162;
  void (*v163)(uint64_t, uint64_t);
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  void (*v168)(uint64_t, uint64_t);
  unint64_t v169;
  int v170;
  void (*v171)(uint64_t, uint64_t);
  uint64_t v172;
  unint64_t v173;
  unsigned int v174;
  unsigned int v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  __int128 v179;
  char v180;
  __int128 v181;
  _QWORD *v182;
  uint64_t v183;
  _QWORD *v184;
  uint64_t v185;
  __int128 v186;
  _QWORD *v187;
  uint64_t v188;
  _QWORD *v189;
  uint64_t v190;
  __int128 v191;
  _QWORD *v192;
  uint64_t v193;
  _QWORD *v194;
  uint64_t v195;
  __int128 v196;
  _QWORD *v197;
  uint64_t v198;
  _QWORD *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  char v203;
  void (*v204)(_QWORD *, _QWORD *, uint64_t);
  unint64_t v205;
  char v206;
  char v207;
  unint64_t v208;
  _OWORD *v209;
  _OWORD *v210;
  __int128 v211;
  _QWORD *v212;
  _QWORD *v213;
  uint64_t v214;
  char v215;
  unint64_t v216;
  void (*v217)(_QWORD *, _QWORD *, uint64_t);
  unint64_t v218;
  unint64_t v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  char v226;
  void (*v227)(_QWORD *, _QWORD *, uint64_t);
  unint64_t v228;
  unint64_t v229;
  unint64_t v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  char v234;
  void (*v235)(_QWORD *, _QWORD *, uint64_t);
  unint64_t v236;
  uint64_t result;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  void (*v244)(uint64_t, uint64_t, uint64_t);
  unint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;

  v3 = a3;
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 40))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(v3 + 24);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v266 = sub_214423C48();
  v11 = *(_QWORD *)(v266 - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v13 = sub_214423C54();
  v14 = v10;
  v268 = v13;
  v15 = *(_QWORD *)(v13 - 8);
  v16 = *(unsigned __int8 *)(v15 + 80);
  v17 = v16 | v12;
  v18 = v16 | v12 | v10;
  v19 = v18 | 7;
  v20 = (v18 | 7) + v7;
  v275 = a1;
  v21 = v20 + a1;
  v22 = ~(v18 | 7);
  v23 = (v20 + a1) & v22;
  v24 = v20 + a2;
  v25 = v24 & v22;
  v267 = v15;
  v264 = v11;
  v265 = v16;
  if (v23 == (v24 & v22))
  {
    v37 = *(_QWORD *)(v9 + 64);
    v38 = (v18 + 32) & v22;
    if (((v37 + v14) & ~v14) + v37 > v37)
      v37 += (v37 + v14) & ~v14;
    v261 = ~v12;
    v262 = *(_QWORD *)(v11 + 64);
    v260 = v12 + 8;
    v263 = ~v16;
    v29 = ((((v12 + 8) & ~v12) + v16 + v262) & ~v16) + *(_QWORD *)(v15 + 64);
    if (v37 <= v29)
      v37 = v29;
    if (v37 <= 0x10)
      v37 = 16;
    v39 = (v38 | 1) + v37;
    v40 = ((v39 + v19) & v22) + v39;
    if (v39 > v40)
      v40 = v39;
    v41 = (v39 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (v40 <= v41 + 113)
      v40 = v41 + 113;
    v42 = v41 + 49;
    if (v40 > v42)
      v42 = v40;
    if (v42 <= 0x19)
      v35 = 25;
    else
      v35 = v42;
  }
  else
  {
    v242 = v24;
    v254 = v21;
    v258 = v8;
    v271 = v18 + 32;
    v26 = (v18 + 32) & v22;
    v27 = *(_QWORD *)(v9 + 64);
    v241 = v27 + v14;
    v28 = ((v27 + v14) & ~v14) + v27;
    v245 = v27;
    if (v28 <= v27)
      v28 = *(_QWORD *)(v9 + 64);
    v261 = ~v12;
    v260 = v12 + 8;
    v262 = *(_QWORD *)(v11 + 64);
    v263 = ~v16;
    v29 = ((((v12 + 8) & ~v12) + v16 + v262) & ~v16) + *(_QWORD *)(v15 + 64);
    if (v28 <= v29)
      v28 = v29;
    if (v28 <= 0x10)
      v30 = 16;
    else
      v30 = v28;
    v31 = (v26 | 1) + v30;
    v32 = ((v31 + v19) & v22) + v31;
    if (v31 > v32)
      v32 = v31;
    v33 = (v31 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (v32 <= v33 + 113)
      v32 = v33 + 113;
    v34 = v33 + 49;
    if (v32 <= v34)
      v32 = v34;
    if (v32 <= 0x19)
      v35 = 25;
    else
      v35 = v32;
    v256 = v9;
    v273 = v30;
    v243 = v14;
    v252 = ~v14;
    v269 = v17;
    switch(*(_BYTE *)(v23 + v35))
    {
      case 0:
      case 1:
        goto LABEL_99;
      case 2:
LABEL_38:
        swift_release();
        goto LABEL_98;
      case 3:
LABEL_39:
        swift_release();
        swift_release();
        goto LABEL_98;
      case 4:
        sub_2141ED0BC(*(_QWORD *)v23, *(_QWORD *)(v23 + 8), *(_BYTE *)(v23 + 16));
        swift_bridgeObjectRelease();
        v43 = (v271 + v23) & v22;
        switch(*(_BYTE *)(v43 + v273))
        {
          case 0:
            goto LABEL_94;
          case 1:
            v238 = v3;
            v51 = v258;
            v52 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
            v52((v271 + v23) & v22, v258);
            v53 = v43 + v243 + v245;
            goto LABEL_96;
          case 2:
            goto LABEL_38;
          case 3:
            goto LABEL_39;
          case 4:
            goto LABEL_97;
          default:
            if (v273 <= 3)
              v44 = v273;
            else
              v44 = 4;
            __asm { BR              X12 }
            return result;
        }
      case 5:
        sub_2141ED0BC(*(_QWORD *)v23, *(_QWORD *)(v23 + 8), *(_BYTE *)(v23 + 16));
        swift_bridgeObjectRelease();
        v45 = (v271 + v23) & v22;
        switch(*(_BYTE *)(v45 + v273))
        {
          case 0:
            (*(void (**)(uint64_t, uint64_t))(v9 + 8))((v271 + v23) & v22, v258);
            break;
          case 1:
            v54 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
            v54((v271 + v23) & v22, v258);
            v54((v45 + v243 + v245) & v252, v258);
            break;
          case 2:
            swift_release();
            break;
          case 3:
            swift_release();
            swift_release();
            break;
          case 4:
            swift_release();
            v55 = (v260 + v45) & v261;
            (*(void (**)(uint64_t, uint64_t))(v264 + 8))(v55, v266);
            (*(void (**)(uint64_t, uint64_t))(v267 + 8))((v55 + v265 + v262) & v263, v268);
            break;
          default:
            if (v273 <= 3)
              v46 = v273;
            else
              v46 = 4;
            __asm { BR              X12 }
            return result;
        }
        v56 = ((v254 | v19) + v31) & v22;
        sub_2141ED0BC(*(_QWORD *)v56, *(_QWORD *)(v56 + 8), *(_BYTE *)(v56 + 0x10));
        swift_bridgeObjectRelease();
        v43 = (v271 + v56) & v22;
        switch(*(_BYTE *)(v43 + v273))
        {
          case 0:
LABEL_94:
            (*(void (**)(uint64_t, uint64_t))(v256 + 8))(v43, v258);
            goto LABEL_98;
          case 1:
            v238 = v3;
            v51 = v258;
            v52 = *(void (**)(uint64_t, uint64_t))(v256 + 8);
            v52(v43, v258);
            v53 = v241 + v43;
LABEL_96:
            v52(v53 & v252, v51);
            v3 = v238;
            goto LABEL_98;
          case 2:
            goto LABEL_38;
          case 3:
            goto LABEL_39;
          case 4:
LABEL_97:
            swift_release();
            v67 = (v260 + v43) & v261;
            (*(void (**)(uint64_t, uint64_t))(v264 + 8))(v67, v266);
            (*(void (**)(uint64_t, uint64_t))(v267 + 8))((v262 + v265 + v67) & v263, v268);
            goto LABEL_98;
          default:
            if (v273 <= 3)
              v57 = v273;
            else
              v57 = 4;
            __asm { BR              X12 }
            return result;
        }
      case 6:
        sub_2141ED0BC(*(_QWORD *)v23, *(_QWORD *)(v23 + 8), *(_BYTE *)(v23 + 16));
        swift_bridgeObjectRelease();
        v47 = (v271 + v23) & v22;
        switch(*(_BYTE *)(v47 + v273))
        {
          case 0:
            (*(void (**)(uint64_t, uint64_t))(v9 + 8))((v271 + v23) & v22, v258);
            break;
          case 1:
            v59 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
            v59((v271 + v23) & v22, v258);
            v59((v47 + v243 + v245) & v252, v258);
            break;
          case 2:
            swift_release();
            break;
          case 3:
            swift_release();
            swift_release();
            break;
          case 4:
            swift_release();
            v58 = (v260 + v47) & v261;
            (*(void (**)(uint64_t, uint64_t))(v264 + 8))(v58, v266);
            (*(void (**)(uint64_t, uint64_t))(v267 + 8))((v58 + v265 + v262) & v263, v268);
            break;
          default:
            if (v273 <= 3)
              v48 = v273;
            else
              v48 = 4;
            __asm { BR              X12 }
            return result;
        }
        v60 = ((v23 | 7) + v31) & 0xFFFFFFFFFFFFFFF8;
        v61 = *(unsigned __int8 *)(v60 + 96);
        if (v61 != 255)
          sub_2142637C0(*(_QWORD *)(v60 + 88), v61 & 1);
        sub_2142637C0(*(_QWORD *)(v60 + 104), *(_BYTE *)(v60 + 112));
        goto LABEL_98;
      case 7:
        sub_2141ED0BC(*(_QWORD *)v23, *(_QWORD *)(v23 + 8), *(_BYTE *)(v23 + 16));
        swift_bridgeObjectRelease();
        v49 = (v271 + v23) & v22;
        switch(*(_BYTE *)(v49 + v273))
        {
          case 0:
            (*(void (**)(uint64_t, uint64_t))(v9 + 8))((v271 + v23) & v22, v258);
            break;
          case 1:
            v62 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
            v62((v271 + v23) & v22, v258);
            v62((v49 + v243 + v245) & v252, v258);
            break;
          case 2:
            swift_release();
            break;
          case 3:
            swift_release();
            swift_release();
            break;
          case 4:
            swift_release();
            v63 = (v260 + v49) & v261;
            (*(void (**)(uint64_t, uint64_t))(v264 + 8))(v63, v266);
            (*(void (**)(uint64_t, uint64_t))(v267 + 8))((v63 + v265 + v262) & v263, v268);
            break;
          default:
            if (v273 <= 3)
              v50 = v273;
            else
              v50 = 4;
            __asm { BR              X12 }
            return result;
        }
        v64 = ((v23 | 7) + v31) & 0xFFFFFFFFFFFFFFF8;
        v65 = *(unsigned __int8 *)(v64 + 24);
        if (v65 <= 0xFB)
          sub_2141EF1B0(*(_QWORD *)(v64 + 8), *(_QWORD *)(v64 + 16), v65);
        v66 = *(unsigned __int8 *)(v64 + 48);
        v17 = v269;
        if (v66 > 0xFB)
          goto LABEL_99;
        sub_2141EF1B0(*(_QWORD *)(v64 + 32), *(_QWORD *)(v64 + 40), v66);
LABEL_98:
        v17 = v269;
LABEL_99:
        v69 = v273;
        switch(*(_BYTE *)(v25 + v35))
        {
          case 0:
            v70 = *(_QWORD *)v25;
            *(_BYTE *)(v23 + 8) = *(_BYTE *)(v25 + 8);
            *(_QWORD *)v23 = v70;
            *(_BYTE *)(v23 + v35) = 0;
            goto LABEL_169;
          case 1:
            v71 = *(_OWORD *)v25;
            *(_OWORD *)(v23 + 9) = *(_OWORD *)(v25 + 9);
            *(_OWORD *)v23 = v71;
            *(_BYTE *)(v23 + v35) = 1;
            goto LABEL_169;
          case 2:
            *(_QWORD *)v23 = *(_QWORD *)v25;
            *(_BYTE *)(v23 + v35) = 2;
            goto LABEL_169;
          case 3:
            *(_OWORD *)v23 = *(_OWORD *)v25;
            *(_BYTE *)(v23 + v35) = 3;
            goto LABEL_169;
          case 4:
            v72 = v3;
            v73 = *(_OWORD *)(v25 + 16);
            *(_OWORD *)v23 = *(_OWORD *)v25;
            *(_OWORD *)(v23 + 16) = v73;
            v74 = (_QWORD *)((v271 + v23) & v22);
            v75 = (_QWORD *)((v271 + v25) & v22);
            switch(*((_BYTE *)v75 + v273))
            {
              case 0:
                (*(void (**)(uint64_t, uint64_t, uint64_t))(v256 + 32))((v271 + v23) & v22, (v271 + v25) & v22, v258);
                v69 = v273;
                v17 = v269;
                v89 = 0;
                break;
              case 1:
                v90 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v256 + 32);
                v90(v74, v75, v258);
                v90((_QWORD *)(((unint64_t)v74 + v243 + v245) & v252), (_QWORD *)(((unint64_t)v75 + v243 + v245) & v252), v258);
                v69 = v273;
                v17 = v269;
                v89 = 1;
                break;
              case 2:
                *v74 = *v75;
                v89 = 2;
                break;
              case 3:
                *(_OWORD *)v74 = *(_OWORD *)v75;
                v89 = 3;
                break;
              case 4:
                *v74 = *v75;
                v91 = ((unint64_t)v75 + v260) & v261;
                (*(void (**)(unint64_t, unint64_t, uint64_t))(v264 + 32))(((unint64_t)v74 + v260) & v261, v91, v266);
                (*(void (**)(unint64_t, unint64_t, uint64_t))(v267 + 32))(((((unint64_t)v74 + v260) & v261) + v265 + v262) & v263, (v91 + v265 + v262) & v263, v268);
                v69 = v273;
                v17 = v269;
                v89 = 4;
                break;
              default:
                if (v273 <= 3)
                  v76 = v273;
                else
                  v76 = 4;
                __asm { BR              X12 }
                return result;
            }
            *((_BYTE *)v74 + v69) = v89;
            *(_BYTE *)(v23 + v35) = 4;
            v3 = v72;
            goto LABEL_169;
          case 5:
            v239 = v3;
            v77 = *(_OWORD *)(v25 + 16);
            *(_OWORD *)v23 = *(_OWORD *)v25;
            *(_OWORD *)(v23 + 16) = v77;
            v78 = (_QWORD *)((v271 + v23) & v22);
            v79 = (_QWORD *)((v271 + v25) & v22);
            switch(*((_BYTE *)v79 + v273))
            {
              case 0:
                (*(void (**)(uint64_t, uint64_t, uint64_t))(v256 + 32))((v271 + v23) & v22, (v271 + v25) & v22, v258);
                v69 = v273;
                v92 = 0;
                break;
              case 1:
                v93 = *(void (**)(uint64_t, uint64_t, uint64_t))(v256 + 32);
                v93((v271 + v23) & v22, (v271 + v25) & v22, v258);
                v93(((unint64_t)v78 + v243 + v245) & v252, ((unint64_t)v79 + v243 + v245) & v252, v258);
                v69 = v273;
                v92 = 1;
                break;
              case 2:
                *v78 = *v79;
                v92 = 2;
                break;
              case 3:
                *(_OWORD *)v78 = *(_OWORD *)v79;
                v92 = 3;
                break;
              case 4:
                *v78 = *v79;
                v94 = ((unint64_t)v79 + v260) & v261;
                (*(void (**)(unint64_t, unint64_t, uint64_t))(v264 + 32))(((unint64_t)v78 + v260) & v261, v94, v266);
                (*(void (**)(unint64_t, unint64_t, uint64_t))(v267 + 32))(((((unint64_t)v78 + v260) & v261) + v265 + v262) & v263, (v94 + v265 + v262) & v263, v268);
                v69 = v273;
                v92 = 4;
                break;
              default:
                if (v273 <= 3)
                  v80 = v273;
                else
                  v80 = 4;
                __asm { BR              X12 }
                return result;
            }
            *((_BYTE *)v78 + v69) = v92;
            v95 = (_OWORD *)(((v254 | v19) + v31) & v22);
            v96 = (_OWORD *)(((v242 | v19) + v31) & v22);
            v97 = v96[1];
            *v95 = *v96;
            v95[1] = v97;
            v98 = (_QWORD *)(((unint64_t)v95 + v271) & v22);
            v99 = (_QWORD *)(((unint64_t)v96 + v271) & v22);
            switch(*((_BYTE *)v99 + v69))
            {
              case 0:
                (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v256 + 32))(v98, v99, v258);
                v69 = v273;
                v121 = 0;
                break;
              case 1:
                v122 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v256 + 32);
                v122(v98, v99, v258);
                v122((_QWORD *)(((unint64_t)v98 + v241) & v252), (_QWORD *)(((unint64_t)v99 + v241) & v252), v258);
                v69 = v273;
                v121 = 1;
                break;
              case 2:
                *v98 = *v99;
                v121 = 2;
                break;
              case 3:
                *(_OWORD *)v98 = *(_OWORD *)v99;
                v121 = 3;
                break;
              case 4:
                *v98 = *v99;
                v123 = ((unint64_t)v99 + v260) & v261;
                (*(void (**)(unint64_t, unint64_t, uint64_t))(v264 + 32))(((unint64_t)v98 + v260) & v261, v123, v266);
                (*(void (**)(unint64_t, unint64_t, uint64_t))(v267 + 32))((v262 + v265 + (((unint64_t)v98 + v260) & v261)) & v263, (v262 + v265 + v123) & v263, v268);
                v69 = v273;
                v121 = 4;
                break;
              default:
                if (v69 <= 3)
                  v100 = v69;
                else
                  v100 = 4;
                __asm { BR              X12 }
                return result;
            }
            v17 = v269;
            *((_BYTE *)v98 + v69) = v121;
            v120 = 5;
            goto LABEL_168;
          case 6:
            v240 = v3;
            v81 = *(_OWORD *)(v25 + 16);
            *(_OWORD *)v23 = *(_OWORD *)v25;
            *(_OWORD *)(v23 + 16) = v81;
            v82 = (_QWORD *)((v271 + v23) & v22);
            v83 = (_QWORD *)((v271 + v25) & v22);
            switch(*((_BYTE *)v83 + v273))
            {
              case 0:
                (*(void (**)(uint64_t, uint64_t, uint64_t))(v256 + 32))((v271 + v23) & v22, (v271 + v25) & v22, v258);
                v69 = v273;
                v17 = v269;
                v101 = 0;
                break;
              case 1:
                v103 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v256 + 32);
                v103(v82, v83, v258);
                v103((_QWORD *)(((unint64_t)v82 + v243 + v245) & v252), (_QWORD *)(((unint64_t)v83 + v243 + v245) & v252), v258);
                v69 = v273;
                v17 = v269;
                v101 = 1;
                break;
              case 2:
                *v82 = *v83;
                v101 = 2;
                break;
              case 3:
                *(_OWORD *)v82 = *(_OWORD *)v83;
                v101 = 3;
                break;
              case 4:
                *v82 = *v83;
                v102 = ((unint64_t)v83 + v260) & v261;
                (*(void (**)(unint64_t, unint64_t, uint64_t))(v264 + 32))(((unint64_t)v82 + v260) & v261, v102, v266);
                (*(void (**)(unint64_t, unint64_t, uint64_t))(v267 + 32))(((((unint64_t)v82 + v260) & v261) + v265 + v262) & v263, (v102 + v265 + v262) & v263, v268);
                v69 = v273;
                v17 = v269;
                v101 = 4;
                break;
              default:
                if (v273 <= 3)
                  v84 = v273;
                else
                  v84 = 4;
                __asm { BR              X12 }
                return result;
            }
            v3 = v240;
            *((_BYTE *)v82 + v69) = v101;
            v104 = ((v23 | 7) + v31) & 0xFFFFFFFFFFFFFFF8;
            v105 = ((v25 | 7) + v31) & 0xFFFFFFFFFFFFFFF8;
            v106 = *(_OWORD *)v105;
            v107 = *(_OWORD *)(v105 + 16);
            v108 = *(_OWORD *)(v105 + 48);
            *(_OWORD *)(v104 + 32) = *(_OWORD *)(v105 + 32);
            *(_OWORD *)(v104 + 48) = v108;
            *(_OWORD *)v104 = v106;
            *(_OWORD *)(v104 + 16) = v107;
            v109 = *(_OWORD *)(v105 + 64);
            v110 = *(_OWORD *)(v105 + 80);
            v111 = *(_OWORD *)(v105 + 96);
            *(_BYTE *)(v104 + 112) = *(_BYTE *)(v105 + 112);
            *(_OWORD *)(v104 + 80) = v110;
            *(_OWORD *)(v104 + 96) = v111;
            *(_OWORD *)(v104 + 64) = v109;
            *(_BYTE *)(v23 + v35) = 6;
            goto LABEL_169;
          case 7:
            v239 = v3;
            v85 = *(_OWORD *)(v25 + 16);
            *(_OWORD *)v23 = *(_OWORD *)v25;
            *(_OWORD *)(v23 + 16) = v85;
            v86 = (_QWORD *)((v271 + v23) & v22);
            v87 = (_QWORD *)((v271 + v25) & v22);
            switch(*((_BYTE *)v87 + v273))
            {
              case 0:
                (*(void (**)(uint64_t, uint64_t, uint64_t))(v256 + 32))((v271 + v23) & v22, (v271 + v25) & v22, v258);
                v69 = v273;
                v17 = v269;
                v112 = 0;
                break;
              case 1:
                v113 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v256 + 32);
                v113(v86, v87, v258);
                v113((_QWORD *)(((unint64_t)v86 + v243 + v245) & v252), (_QWORD *)(((unint64_t)v87 + v243 + v245) & v252), v258);
                v69 = v273;
                v17 = v269;
                v112 = 1;
                break;
              case 2:
                *v86 = *v87;
                v112 = 2;
                break;
              case 3:
                *(_OWORD *)v86 = *(_OWORD *)v87;
                v112 = 3;
                break;
              case 4:
                *v86 = *v87;
                v114 = ((unint64_t)v87 + v260) & v261;
                (*(void (**)(unint64_t, unint64_t, uint64_t))(v264 + 32))(((unint64_t)v86 + v260) & v261, v114, v266);
                (*(void (**)(unint64_t, unint64_t, uint64_t))(v267 + 32))(((((unint64_t)v86 + v260) & v261) + v265 + v262) & v263, (v114 + v265 + v262) & v263, v268);
                v69 = v273;
                v17 = v269;
                v112 = 4;
                break;
              default:
                if (v273 <= 3)
                  v88 = v273;
                else
                  v88 = 4;
                __asm { BR              X12 }
                return result;
            }
            *((_BYTE *)v86 + v69) = v112;
            v115 = ((v23 | 7) + v31) & 0xFFFFFFFFFFFFFFF8;
            v116 = ((v25 | 7) + v31) & 0xFFFFFFFFFFFFFFF8;
            v117 = *(_OWORD *)v116;
            v118 = *(_OWORD *)(v116 + 16);
            v119 = *(_OWORD *)(v116 + 32);
            *(_BYTE *)(v115 + 48) = *(_BYTE *)(v116 + 48);
            *(_OWORD *)(v115 + 16) = v118;
            *(_OWORD *)(v115 + 32) = v119;
            *(_OWORD *)v115 = v117;
            v120 = 7;
LABEL_168:
            *(_BYTE *)(v23 + v35) = v120;
            v3 = v239;
            break;
          default:
            if (v35 <= 3)
              v68 = v35;
            else
              v68 = 4;
            __asm { BR              X12 }
            return result;
        }
        return result;
      default:
        if (v35 <= 3)
          v36 = v35;
        else
          v36 = 4;
        __asm { BR              X12 }
        return result;
    }
  }
LABEL_169:
  v124 = *(_QWORD *)(v3 + 32);
  v125 = *(_QWORD *)(v124 - 8);
  v126 = *(unsigned __int8 *)(v125 + 80);
  v127 = v17 | v126;
  v128 = v17 | v126 | 7;
  v129 = v35 + v128 + 1;
  v130 = v129 + v23;
  v131 = ~v128;
  v132 = (v129 + v23) & ~v128;
  v133 = v129 + v25;
  v134 = v133 & ~v128;
  v135 = ~v126;
  if (v132 == v134)
  {
    v146 = *(_QWORD *)(v125 + 64);
    v147 = (v127 + 32) & v131;
    if (((v146 + v126) & v135) + v146 > v146)
      v146 += (v146 + v126) & v135;
    if (v146 <= v29)
      v146 = v29;
    if (v146 <= 0x10)
      v146 = 16;
    v148 = (v147 | 1) + v146;
    v149 = ((v148 + v128) & v131) + v148;
    if (v148 > v149)
      v149 = v148;
    v150 = (v148 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (v149 <= v150 + 113)
      v149 = v150 + 113;
    v151 = v150 + 49;
    if (v149 > v151)
      v151 = v149;
    if (v151 <= 0x19)
      v144 = 25;
    else
      v144 = v151;
    v152 = v275;
  }
  else
  {
    v255 = v133;
    v272 = *(_QWORD *)(v3 + 32);
    v274 = v127 + 32;
    v136 = (v127 + 32) & v131;
    v137 = *(_QWORD *)(v125 + 64);
    v253 = v137 + v126;
    v138 = ((v137 + v126) & v135) + v137;
    if (v138 <= v137)
      v138 = *(_QWORD *)(v125 + 64);
    if (v138 <= v29)
      v138 = v29;
    if (v138 <= 0x10)
      v139 = 16;
    else
      v139 = v138;
    v140 = (v136 | 1) + v139;
    v141 = ((v140 + v128) & v131) + v140;
    if (v140 > v141)
      v141 = v140;
    v142 = (v140 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (v141 <= v142 + 113)
      v141 = v142 + 113;
    v143 = v142 + 49;
    if (v141 <= v143)
      v141 = v143;
    if (v141 <= 0x19)
      v144 = 25;
    else
      v144 = v141;
    v257 = ~v126;
    v259 = v130;
    v270 = *(_QWORD *)(v124 - 8);
    switch(*(_BYTE *)(v132 + v144))
    {
      case 0:
      case 1:
        break;
      case 2:
LABEL_208:
        swift_release();
        break;
      case 3:
LABEL_209:
        swift_release();
        swift_release();
        break;
      case 4:
        sub_2141ED0BC(*(_QWORD *)v132, *(_QWORD *)(v132 + 8), *(_BYTE *)(v132 + 16));
        swift_bridgeObjectRelease();
        v153 = (v274 + v132) & v131;
        switch(*(_BYTE *)(v153 + v139))
        {
          case 0:
            goto LABEL_264;
          case 1:
            v246 = v139;
            v161 = *(void (**)(uint64_t, uint64_t))(v270 + 8);
            v161((v274 + v132) & v131, v272);
            v162 = v153 + v126 + v137;
            goto LABEL_267;
          case 2:
            goto LABEL_208;
          case 3:
            goto LABEL_209;
          case 4:
            goto LABEL_265;
          default:
            if (v139 <= 3)
              v154 = v139;
            else
              v154 = 4;
            __asm { BR              X12 }
            return result;
        }
      case 5:
        sub_2141ED0BC(*(_QWORD *)v132, *(_QWORD *)(v132 + 8), *(_BYTE *)(v132 + 16));
        swift_bridgeObjectRelease();
        v155 = (v274 + v132) & v131;
        switch(*(_BYTE *)(v155 + v139))
        {
          case 0:
            (*(void (**)(uint64_t, uint64_t))(v270 + 8))((v274 + v132) & v131, v272);
            break;
          case 1:
            v247 = v139;
            v163 = *(void (**)(uint64_t, uint64_t))(v270 + 8);
            v163((v274 + v132) & v131, v272);
            v163((v155 + v126 + v137) & v257, v272);
            v139 = v247;
            break;
          case 2:
            swift_release();
            break;
          case 3:
            swift_release();
            swift_release();
            break;
          case 4:
            swift_release();
            v164 = (v260 + v155) & v261;
            (*(void (**)(uint64_t, uint64_t))(v264 + 8))(v164, v266);
            (*(void (**)(uint64_t, uint64_t))(v267 + 8))((v262 + v265 + v164) & v263, v268);
            break;
          default:
            if (v139 <= 3)
              v156 = v139;
            else
              v156 = 4;
            __asm { BR              X12 }
            return result;
        }
        v165 = ((v259 | v128) + v140) & v131;
        sub_2141ED0BC(*(_QWORD *)v165, *(_QWORD *)(v165 + 8), *(_BYTE *)(v165 + 0x10));
        swift_bridgeObjectRelease();
        v153 = (v274 + v165) & v131;
        switch(*(_BYTE *)(v153 + v139))
        {
          case 0:
LABEL_264:
            (*(void (**)(uint64_t, uint64_t))(v270 + 8))(v153, v272);
            goto LABEL_273;
          case 1:
            v246 = v139;
            v161 = *(void (**)(uint64_t, uint64_t))(v270 + 8);
            v161(v153, v272);
            v162 = v253 + v153;
LABEL_267:
            v161(v162 & v257, v272);
            v139 = v246;
            goto LABEL_273;
          case 2:
            goto LABEL_208;
          case 3:
            goto LABEL_209;
          case 4:
LABEL_265:
            swift_release();
            v176 = (v260 + v153) & v261;
            (*(void (**)(uint64_t, uint64_t))(v264 + 8))(v176, v266);
            (*(void (**)(uint64_t, uint64_t))(v267 + 8))((v262 + v265 + v176) & v263, v268);
            goto LABEL_273;
          default:
            if (v139 <= 3)
              v166 = v139;
            else
              v166 = 4;
            __asm { BR              X12 }
            return result;
        }
      case 6:
        sub_2141ED0BC(*(_QWORD *)v132, *(_QWORD *)(v132 + 8), *(_BYTE *)(v132 + 16));
        swift_bridgeObjectRelease();
        v157 = (v274 + v132) & v131;
        switch(*(_BYTE *)(v157 + v139))
        {
          case 0:
            (*(void (**)(uint64_t, uint64_t))(v270 + 8))((v274 + v132) & v131, v272);
            break;
          case 1:
            v248 = v139;
            v168 = *(void (**)(uint64_t, uint64_t))(v270 + 8);
            v168((v274 + v132) & v131, v272);
            v168((v157 + v126 + v137) & v257, v272);
            v139 = v248;
            break;
          case 2:
            swift_release();
            break;
          case 3:
            swift_release();
            swift_release();
            break;
          case 4:
            swift_release();
            v167 = (v260 + v157) & v261;
            (*(void (**)(uint64_t, uint64_t))(v264 + 8))(v167, v266);
            (*(void (**)(uint64_t, uint64_t))(v267 + 8))((v262 + v265 + v167) & v263, v268);
            break;
          default:
            if (v139 <= 3)
              v158 = v139;
            else
              v158 = 4;
            __asm { BR              X12 }
            return result;
        }
        v169 = ((v132 | 7) + v140) & 0xFFFFFFFFFFFFFFF8;
        v170 = *(unsigned __int8 *)(v169 + 96);
        if (v170 != 255)
          sub_2142637C0(*(_QWORD *)(v169 + 88), v170 & 1);
        sub_2142637C0(*(_QWORD *)(v169 + 104), *(_BYTE *)(v169 + 112));
        break;
      case 7:
        sub_2141ED0BC(*(_QWORD *)v132, *(_QWORD *)(v132 + 8), *(_BYTE *)(v132 + 16));
        swift_bridgeObjectRelease();
        v159 = (v274 + v132) & v131;
        switch(*(_BYTE *)(v159 + v139))
        {
          case 0:
            (*(void (**)(uint64_t, uint64_t))(v270 + 8))((v274 + v132) & v131, v272);
            break;
          case 1:
            v249 = v139;
            v171 = *(void (**)(uint64_t, uint64_t))(v270 + 8);
            v171((v274 + v132) & v131, v272);
            v171((v159 + v126 + v137) & v257, v272);
            v139 = v249;
            break;
          case 2:
            swift_release();
            break;
          case 3:
            swift_release();
            swift_release();
            break;
          case 4:
            swift_release();
            v172 = (v260 + v159) & v261;
            (*(void (**)(uint64_t, uint64_t))(v264 + 8))(v172, v266);
            (*(void (**)(uint64_t, uint64_t))(v267 + 8))((v262 + v265 + v172) & v263, v268);
            break;
          default:
            if (v139 <= 3)
              v160 = v139;
            else
              v160 = 4;
            __asm { BR              X12 }
            return result;
        }
        v173 = ((v132 | 7) + v140) & 0xFFFFFFFFFFFFFFF8;
        v174 = *(unsigned __int8 *)(v173 + 24);
        if (v174 <= 0xFB)
          sub_2141EF1B0(*(_QWORD *)(v173 + 8), *(_QWORD *)(v173 + 16), v174);
        v175 = *(unsigned __int8 *)(v173 + 48);
        if (v175 <= 0xFB)
          sub_2141EF1B0(*(_QWORD *)(v173 + 32), *(_QWORD *)(v173 + 40), v175);
        break;
      default:
        if (v144 <= 3)
          v145 = v144;
        else
          v145 = 4;
        __asm { BR              X12 }
        return result;
    }
LABEL_273:
    switch(*(_BYTE *)(v134 + v144))
    {
      case 0:
        v178 = *(_QWORD *)v134;
        *(_BYTE *)(v132 + 8) = *(_BYTE *)(v134 + 8);
        *(_QWORD *)v132 = v178;
        *(_BYTE *)(v132 + v144) = 0;
        v152 = v275;
        break;
      case 1:
        v179 = *(_OWORD *)v134;
        *(_OWORD *)(v132 + 9) = *(_OWORD *)(v134 + 9);
        *(_OWORD *)v132 = v179;
        v180 = 1;
        goto LABEL_278;
      case 2:
        *(_QWORD *)v132 = *(_QWORD *)v134;
        v180 = 2;
        goto LABEL_278;
      case 3:
        *(_OWORD *)v132 = *(_OWORD *)v134;
        v180 = 3;
LABEL_278:
        *(_BYTE *)(v132 + v144) = v180;
        v152 = v275;
        break;
      case 4:
        v181 = *(_OWORD *)(v134 + 16);
        *(_OWORD *)v132 = *(_OWORD *)v134;
        *(_OWORD *)(v132 + 16) = v181;
        v182 = (_QWORD *)((v274 + v132) & v131);
        v183 = v139;
        v184 = (_QWORD *)((v274 + v134) & v131);
        v201 = v183;
        switch(*((_BYTE *)v184 + v183))
        {
          case 0:
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v270 + 32))((v274 + v132) & v131, (v274 + v134) & v131, v272);
            v203 = 0;
            break;
          case 1:
            v204 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v270 + 32);
            v204(v182, v184, v272);
            v204((_QWORD *)(((unint64_t)v182 + v126 + v137) & v257), (_QWORD *)(((unint64_t)v184 + v126 + v137) & v257), v272);
            v203 = 1;
            break;
          case 2:
            *v182 = *v184;
            v203 = 2;
            break;
          case 3:
            *(_OWORD *)v182 = *(_OWORD *)v184;
            v203 = 3;
            break;
          case 4:
            *v182 = *v184;
            v205 = ((unint64_t)v184 + v260) & v261;
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v264 + 32))(((unint64_t)v182 + v260) & v261, v205, v266);
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v267 + 32))((v262 + v265 + (((unint64_t)v182 + v260) & v261)) & v263, (v262 + v265 + v205) & v263, v268);
            v203 = 4;
            break;
          default:
            if (v183 <= 3)
              v185 = v183;
            else
              v185 = 4;
            __asm { BR              X12 }
            return result;
        }
        v152 = v275;
        *((_BYTE *)v182 + v201) = v203;
        v206 = 4;
        goto LABEL_338;
      case 5:
        v186 = *(_OWORD *)(v134 + 16);
        *(_OWORD *)v132 = *(_OWORD *)v134;
        *(_OWORD *)(v132 + 16) = v186;
        v187 = (_QWORD *)((v274 + v132) & v131);
        v188 = v139;
        v189 = (_QWORD *)((v274 + v134) & v131);
        v250 = v188;
        switch(*((_BYTE *)v189 + v188))
        {
          case 0:
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v270 + 32))((v274 + v132) & v131, (v274 + v134) & v131, v272);
            v207 = 0;
            break;
          case 1:
            v244 = *(void (**)(uint64_t, uint64_t, uint64_t))(v270 + 32);
            v244((v274 + v132) & v131, (v274 + v134) & v131, v272);
            v244(((unint64_t)v187 + v126 + v137) & v257, ((unint64_t)v189 + v126 + v137) & v257, v272);
            v207 = 1;
            break;
          case 2:
            *v187 = *v189;
            v207 = 2;
            break;
          case 3:
            *(_OWORD *)v187 = *(_OWORD *)v189;
            v207 = 3;
            break;
          case 4:
            *v187 = *v189;
            v208 = ((unint64_t)v189 + v260) & v261;
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v264 + 32))(((unint64_t)v187 + v260) & v261, v208, v266);
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v267 + 32))((v262 + v265 + (((unint64_t)v187 + v260) & v261)) & v263, (v262 + v265 + v208) & v263, v268);
            v207 = 4;
            break;
          default:
            if (v188 <= 3)
              v190 = v188;
            else
              v190 = 4;
            __asm { BR              X12 }
            return result;
        }
        v152 = v275;
        *((_BYTE *)v187 + v250) = v207;
        v209 = (_OWORD *)(((v259 | v128) + v140) & v131);
        v210 = (_OWORD *)(((v255 | v128) + v140) & v131);
        v211 = v210[1];
        *v209 = *v210;
        v209[1] = v211;
        v212 = (_QWORD *)(((unint64_t)v209 + v274) & v131);
        v213 = (_QWORD *)(((unint64_t)v210 + v274) & v131);
        switch(*((_BYTE *)v213 + v250))
        {
          case 0:
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v270 + 32))(v212, v213, v272);
            v234 = 0;
            break;
          case 1:
            v235 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v270 + 32);
            v235(v212, v213, v272);
            v235((_QWORD *)(((unint64_t)v212 + v253) & v257), (_QWORD *)(((unint64_t)v213 + v253) & v257), v272);
            v234 = 1;
            break;
          case 2:
            *v212 = *v213;
            v234 = 2;
            break;
          case 3:
            *(_OWORD *)v212 = *(_OWORD *)v213;
            v234 = 3;
            break;
          case 4:
            *v212 = *v213;
            v236 = ((unint64_t)v213 + v260) & v261;
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v264 + 32))(((unint64_t)v212 + v260) & v261, v236, v266);
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v267 + 32))((v262 + v265 + (((unint64_t)v212 + v260) & v261)) & v263, (v262 + v265 + v236) & v263, v268);
            v234 = 4;
            break;
          default:
            if (v250 <= 3)
              v214 = v250;
            else
              v214 = 4;
            __asm { BR              X12 }
            return result;
        }
        *((_BYTE *)v212 + v250) = v234;
        v206 = 5;
        goto LABEL_338;
      case 6:
        v191 = *(_OWORD *)(v134 + 16);
        *(_OWORD *)v132 = *(_OWORD *)v134;
        *(_OWORD *)(v132 + 16) = v191;
        v192 = (_QWORD *)((v274 + v132) & v131);
        v193 = v139;
        v194 = (_QWORD *)((v274 + v134) & v131);
        v202 = v193;
        switch(*((_BYTE *)v194 + v193))
        {
          case 0:
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v270 + 32))(v192, v194, v272);
            v215 = 0;
            break;
          case 1:
            v217 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v270 + 32);
            v217(v192, v194, v272);
            v217((_QWORD *)(((unint64_t)v192 + v126 + v137) & v257), (_QWORD *)(((unint64_t)v194 + v126 + v137) & v257), v272);
            v215 = 1;
            break;
          case 2:
            *v192 = *v194;
            v215 = 2;
            break;
          case 3:
            *(_OWORD *)v192 = *(_OWORD *)v194;
            v215 = 3;
            break;
          case 4:
            *v192 = *v194;
            v216 = ((unint64_t)v194 + v260) & v261;
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v264 + 32))(((unint64_t)v192 + v260) & v261, v216, v266);
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v267 + 32))((v262 + v265 + (((unint64_t)v192 + v260) & v261)) & v263, (v262 + v265 + v216) & v263, v268);
            v215 = 4;
            break;
          default:
            if (v193 <= 3)
              v195 = v193;
            else
              v195 = 4;
            __asm { BR              X12 }
            return result;
        }
        v152 = v275;
        *((_BYTE *)v192 + v202) = v215;
        v218 = ((v132 | 7) + v140) & 0xFFFFFFFFFFFFFFF8;
        v219 = ((v134 | 7) + v140) & 0xFFFFFFFFFFFFFFF8;
        v220 = *(_OWORD *)v219;
        v221 = *(_OWORD *)(v219 + 16);
        v222 = *(_OWORD *)(v219 + 48);
        *(_OWORD *)(v218 + 32) = *(_OWORD *)(v219 + 32);
        *(_OWORD *)(v218 + 48) = v222;
        *(_OWORD *)v218 = v220;
        *(_OWORD *)(v218 + 16) = v221;
        v223 = *(_OWORD *)(v219 + 64);
        v224 = *(_OWORD *)(v219 + 80);
        v225 = *(_OWORD *)(v219 + 96);
        *(_BYTE *)(v218 + 112) = *(_BYTE *)(v219 + 112);
        *(_OWORD *)(v218 + 80) = v224;
        *(_OWORD *)(v218 + 96) = v225;
        *(_OWORD *)(v218 + 64) = v223;
        v206 = 6;
        goto LABEL_338;
      case 7:
        v196 = *(_OWORD *)(v134 + 16);
        *(_OWORD *)v132 = *(_OWORD *)v134;
        *(_OWORD *)(v132 + 16) = v196;
        v197 = (_QWORD *)((v274 + v132) & v131);
        v198 = v139;
        v199 = (_QWORD *)((v274 + v134) & v131);
        v251 = v198;
        switch(*((_BYTE *)v199 + v198))
        {
          case 0:
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v270 + 32))((v274 + v132) & v131, (v274 + v134) & v131, v272);
            v226 = 0;
            break;
          case 1:
            v227 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v270 + 32);
            v227(v197, v199, v272);
            v227((_QWORD *)(((unint64_t)v197 + v126 + v137) & v257), (_QWORD *)(((unint64_t)v199 + v126 + v137) & v257), v272);
            v226 = 1;
            break;
          case 2:
            *v197 = *v199;
            v226 = 2;
            break;
          case 3:
            *(_OWORD *)v197 = *(_OWORD *)v199;
            v226 = 3;
            break;
          case 4:
            *v197 = *v199;
            v228 = ((unint64_t)v199 + v260) & v261;
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v264 + 32))(((unint64_t)v197 + v260) & v261, v228, v266);
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v267 + 32))((v262 + v265 + (((unint64_t)v197 + v260) & v261)) & v263, (v262 + v265 + v228) & v263, v268);
            v226 = 4;
            break;
          default:
            if (v198 <= 3)
              v200 = v198;
            else
              v200 = 4;
            __asm { BR              X12 }
            return result;
        }
        v152 = v275;
        *((_BYTE *)v197 + v251) = v226;
        v229 = ((v132 | 7) + v140) & 0xFFFFFFFFFFFFFFF8;
        v230 = ((v134 | 7) + v140) & 0xFFFFFFFFFFFFFFF8;
        v231 = *(_OWORD *)v230;
        v232 = *(_OWORD *)(v230 + 16);
        v233 = *(_OWORD *)(v230 + 32);
        *(_BYTE *)(v229 + 48) = *(_BYTE *)(v230 + 48);
        *(_OWORD *)(v229 + 16) = v232;
        *(_OWORD *)(v229 + 32) = v233;
        *(_OWORD *)v229 = v231;
        v206 = 7;
LABEL_338:
        *(_BYTE *)(v132 + v144) = v206;
        break;
      default:
        if (v144 <= 3)
          v177 = v144;
        else
          v177 = 4;
        __asm { BR              X12 }
        return result;
    }
  }
  *(_QWORD *)(((v132 | 7) + v144 + 1) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)(((v134 | 7) + v144 + 1) & 0xFFFFFFFFFFFFF8);
  swift_release();
  return v152;
}

uint64_t sub_21426BF78(uint64_t a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  unint64_t v46;

  v6 = a3[2];
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int *)(v7 + 84);
  v9 = *(_QWORD *)(a3[3] - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = *(_QWORD *)(sub_214423C48() - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v13 = *(_QWORD *)(sub_214423C54() - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v15 = v14 | v12;
  v16 = v14 | v12 | v10;
  v17 = v16 | 7;
  v18 = (v16 + 32) & ~(v16 | 7);
  v19 = *(_QWORD *)(v9 + 64);
  if (((v19 + v10) & ~v10) + v19 > v19)
    v19 += (v19 + v10) & ~v10;
  v20 = ((*(_QWORD *)(v11 + 64) + v14 + ((v12 + 8) & ~v12)) & ~v14) + *(_QWORD *)(v13 + 64);
  if (v19 <= v20)
    v21 = v20;
  else
    v21 = v19;
  if (v21 <= 0x10)
    v21 = 16;
  v22 = v21 + v18;
  if (v22 + 1 > ((v22 + 1 + v17) & ~v17) + v22 + 1)
    v23 = v22 + 1;
  else
    v23 = ((v22 + 1 + v17) & ~v17) + v22 + 1;
  v24 = (v22 + 8) & 0xFFFFFFFFFFFFFFF8;
  if (v23 <= v24 + 113)
    v23 = v24 + 113;
  v25 = v24 + 49;
  if (v23 > v25)
    v25 = v23;
  if (v25 <= 0x19)
    v26 = 25;
  else
    v26 = v25;
  v27 = *(_QWORD *)(a3[4] - 8);
  v28 = *(unsigned __int8 *)(v27 + 80);
  v29 = v15 | v28;
  v30 = v29 | 7;
  v31 = (v29 + 32) & ~(v29 | 7);
  v32 = *(_QWORD *)(v27 + 64);
  v33 = ((v32 + v28) & ~v28) + v32;
  if (v33 > v32)
    v32 = v33;
  if (v32 > v20)
    v20 = v32;
  if (v20 <= 0x10)
    v20 = 16;
  v34 = v20 + v31;
  if (v34 + 1 > ((v34 + 1 + v30) & ~v30) + v34 + 1)
    v35 = v34 + 1;
  else
    v35 = ((v34 + 1 + v30) & ~v30) + v34 + 1;
  v36 = (v34 + 8) & 0xFFFFFFFFFFFFFFF8;
  if (v35 <= v36 + 113)
    v35 = v36 + 113;
  v37 = v36 + 49;
  if (v35 > v37)
    v37 = v35;
  if (v37 <= 0x19)
    v38 = 25;
  else
    v38 = v37;
  if (v8 <= 0x7FFFFFFF)
    v39 = 0x7FFFFFFF;
  else
    v39 = v8;
  if (!a2)
    return 0;
  v40 = *(_QWORD *)(v7 + 64) + v17;
  v41 = v26 + 1;
  if (v39 < a2)
  {
    if (((((v38 + ((v41 + v30 + (v40 & ~v17)) & ~v30) + 8) & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFF8) != 0)
      v42 = 2;
    else
      v42 = a2 - v39 + 1;
    if (v42 >= 0x10000)
      v43 = 4;
    else
      v43 = 2;
    if (v42 < 0x100)
      v43 = 1;
    if (v42 >= 2)
      v44 = v43;
    else
      v44 = 0;
    __asm { BR              X0 }
  }
  if (v8 >= 0x7FFFFFFF)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, v8, v6);
  v46 = *(_QWORD *)((((((v40 + a1) & ~v17) + v30 + v41) & ~v30 | 7) + v38 + 1) & 0xFFFFFFFFFFFFF8);
  if (v46 >= 0xFFFFFFFF)
    LODWORD(v46) = -1;
  return (v46 + 1);
}

void sub_21426C274(unsigned int *a1, unsigned int a2, unsigned int a3, _QWORD *a4)
{
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unsigned int v40;
  size_t v41;
  unsigned int v42;
  int v43;
  int v44;
  unsigned int v45;

  v8 = *(_QWORD *)(a4[2] - 8);
  v9 = *(_DWORD *)(v8 + 84);
  v10 = *(_QWORD *)(a4[3] - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = *(_QWORD *)(sub_214423C48() - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = *(_QWORD *)(sub_214423C54() - 8);
  v15 = *(unsigned __int8 *)(v14 + 80);
  v16 = v15 | v13;
  v17 = v15 | v13 | v11;
  v18 = v17 | 7;
  v19 = (v17 + 32) & ~(v17 | 7);
  v20 = *(_QWORD *)(v10 + 64);
  if (((v20 + v11) & ~v11) + v20 > v20)
    v20 += (v20 + v11) & ~v11;
  v21 = ((*(_QWORD *)(v12 + 64) + v15 + ((v13 + 8) & ~v13)) & ~v15) + *(_QWORD *)(v14 + 64);
  if (v20 <= v21)
    v22 = v21;
  else
    v22 = v20;
  if (v22 <= 0x10)
    v22 = 16;
  v23 = v22 + v19;
  if (v23 + 1 > ((v23 + 1 + v18) & ~v18) + v23 + 1)
    v24 = v23 + 1;
  else
    v24 = ((v23 + 1 + v18) & ~v18) + v23 + 1;
  v25 = (v23 + 8) & 0xFFFFFFFFFFFFFFF8;
  if (v24 <= v25 + 113)
    v24 = v25 + 113;
  v26 = v25 + 49;
  if (v24 > v26)
    v26 = v24;
  v27 = 25;
  if (v26 <= 0x19)
    v28 = 25;
  else
    v28 = v26;
  v29 = *(_QWORD *)(a4[4] - 8);
  v30 = *(unsigned __int8 *)(v29 + 80);
  v31 = v16 | v30;
  v32 = v31 | 7;
  v33 = (v31 + 32) & ~(v31 | 7);
  v34 = *(_QWORD *)(v29 + 64);
  v35 = ((v34 + v30) & ~v30) + v34;
  if (v35 > v34)
    v34 = v35;
  if (v34 > v21)
    v21 = v34;
  if (v21 <= 0x10)
    v21 = 16;
  v36 = v21 + v33;
  if (v36 + 1 > ((v36 + 1 + v32) & ~v32) + v36 + 1)
    v37 = v36 + 1;
  else
    v37 = ((v36 + 1 + v32) & ~v32) + v36 + 1;
  v38 = (v36 + 8) & 0xFFFFFFFFFFFFFFF8;
  if (v37 <= v38 + 113)
    v37 = v38 + 113;
  v39 = v38 + 49;
  if (v37 > v39)
    v39 = v37;
  if (v39 > 0x19)
    v27 = v39;
  if (v9 <= 0x7FFFFFFF)
    v40 = 0x7FFFFFFF;
  else
    v40 = v9;
  v41 = ((v27 + ((v28 + 1 + v32 + ((*(_QWORD *)(v8 + 64) + v18) & ~v18)) & ~v32) + 8) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v40 >= a3)
  {
    v44 = 0;
    if (a2 <= v40)
      goto LABEL_49;
  }
  else
  {
    if ((((_DWORD)v27
         + (((_DWORD)v28 + 1 + (_DWORD)v32 + ((*(_DWORD *)(v8 + 64) + (_DWORD)v18) & ~(_DWORD)v18)) & ~(_DWORD)v32)
         + 8) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v42 = a3 - v40 + 1;
    else
      v42 = 2;
    if (v42 >= 0x10000)
      v43 = 4;
    else
      v43 = 2;
    if (v42 < 0x100)
      v43 = 1;
    if (v42 >= 2)
      v44 = v43;
    else
      v44 = 0;
    if (a2 <= v40)
LABEL_49:
      __asm { BR              X16 }
  }
  if ((_DWORD)v41)
  {
    v45 = ~v40 + a2;
    bzero(a1, v41);
    *a1 = v45;
  }
  __asm { BR              X10 }
}

void sub_21426C500()
{
  uint64_t v0;
  char v1;
  uint64_t v2;

  *(_BYTE *)(v0 + v2) = v1;
  JUMPOUT(0x21426C5A0);
}

void sub_21426C508()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  *(_DWORD *)(v0 + v2) = 0;
  if (v1)
    JUMPOUT(0x21426C510);
  JUMPOUT(0x21426C5A0);
}

void sub_21426C57C()
{
  uint64_t v0;
  __int16 v1;
  uint64_t v2;

  *(_WORD *)(v0 + v2) = v1;
  JUMPOUT(0x21426C5A0);
}

void sub_21426C584()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  *(_DWORD *)(v0 + v2) = v1;
  JUMPOUT(0x21426C5A0);
}

uint64_t sub_21426C58C()
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_WORD *)(v1 + v4) = 0;
  if (!(_DWORD)v2)
    JUMPOUT(0x21426C5A0);
  if (v3 < 0x7FFFFFFF)
  {
    if ((v2 & 0x80000000) == 0)
      JUMPOUT(0x21426C59CLL);
    JUMPOUT(0x21426C598);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 56))(v1, v2, v3);
}

void type metadata accessor for XYRenderer()
{
  JUMPOUT(0x2199CD874);
}

uint64_t sub_21426C5D0()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_21426C64C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    v9 = *a2;
    *a1 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v10 = (_QWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    v11 = (_QWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    v12 = v11[1];
    *v10 = *v11;
    v10[1] = v12;
    v13 = (_QWORD *)(((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFFFF8);
    v14 = (_QWORD *)(((unint64_t)v11 + 23) & 0xFFFFFFFFFFFFFFF8);
    v15 = v14[1];
    *v13 = *v14;
    v13[1] = v15;
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t sub_21426C724(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))();
  swift_release();
  return swift_release();
}

uint64_t sub_21426C774(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v9 = v8[1];
  *v7 = *v8;
  v7[1] = v9;
  v10 = (_QWORD *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8);
  v11 = (_QWORD *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  v12 = v11[1];
  *v10 = *v11;
  v10[1] = v12;
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t sub_21426C7F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v9 = v8[1];
  *v7 = *v8;
  v7[1] = v9;
  swift_retain();
  swift_release();
  v10 = (_QWORD *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8);
  v11 = (_QWORD *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  v12 = v11[1];
  *v10 = *v11;
  v10[1] = v12;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_21426C888(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  *(_OWORD *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_21426C8F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  unint64_t v9;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = v6 + a2;
  v9 = (v8 & 0xFFFFFFFFFFFFFFF8) + 23;
  *v7 = *(_OWORD *)(v8 & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  *(_OWORD *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(v9 & 0xFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t sub_21426C974(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v12 = *(_QWORD *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_21426C9F8 + 4 * byte_2144292A6[v10]))();
  }
}

void sub_21426CA7C(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_21426CB78()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x21426CBF0);
}

void sub_21426CB80(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x21426CB88);
  JUMPOUT(0x21426CBF0);
}

void sub_21426CBC8()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x21426CBF0);
}

void sub_21426CBD0()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x21426CBF0);
}

uint64_t sub_21426CBD8(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_WORD *)(v5 + v6) = 0;
  if (!a2)
    JUMPOUT(0x21426CBF0);
  if (a3 < 0x7FFFFFFF)
  {
    if ((a2 & 0x80000000) == 0)
      JUMPOUT(0x21426CBECLL);
    JUMPOUT(0x21426CBE4);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v5);
}

uint64_t type metadata accessor for Vectorizer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2141D8E88(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Vectorizer);
}

void sub_21426CC14()
{
  type metadata accessor for XYRenderer();
}

uint64_t sub_21426CC70(int *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  _OWORD *v10;
  uint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  v9 = a1[19];
  type metadata accessor for VectorizedModifiers();
  v10 = (_OWORD *)swift_allocObject();
  v10[1] = 0u;
  v10[2] = 0u;
  v10[3] = 0u;
  v10[4] = 0u;
  v10[5] = 0u;
  v10[6] = 0u;
  v10[7] = 0u;
  v10[8] = 0u;
  v10[9] = 0u;
  v10[10] = 0u;
  v10[11] = 0u;
  v10[12] = 0u;
  v10[13] = 0u;
  v10[14] = 0u;
  *(_QWORD *)(v4 + v9) = v10;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v4, v1, v7);
  v11 = v4 + a1[17];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v13 = type metadata accessor for BoundingSectionSpecification(0, AssociatedTypeWitness, v6, v5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v17, v13);
  v14 = v4 + a1[18];
  v15 = type metadata accessor for BoundingSectionSpecification(0, AssociatedTypeWitness, v2, v3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v14, v18, v15);
}

uint64_t sub_21426CD78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE v45[56];

  v42 = a1;
  v7 = type metadata accessor for ConcreteScale(0, MEMORY[0x24BEE13C8], a4, a4);
  v40 = *(_QWORD *)(v7 - 8);
  v41 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v38 - v8;
  v11 = type metadata accessor for ConcreteScale(0, MEMORY[0x24BEE0D00], a4, v10);
  v38 = *(_QWORD *)(v11 - 8);
  v39 = v11;
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v38 - v12;
  v16 = type metadata accessor for AnyConcreteScale(0, a4, v14, v15);
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v38 - v18;
  v20 = *(int *)(a3 + 76);
  v43 = v4;
  v44 = *(_QWORD *)(v4 + v20);
  swift_retain();
  swift_getAtKeyPath();
  swift_release();
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v19, v42, v16);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v22 = v38;
    v21 = v39;
    v23 = (*(uint64_t (**)(char *, char *, uint64_t))(v38 + 32))(v13, v19, v39);
    MEMORY[0x24BDAC7A8](v23);
    *((_OWORD *)&v38 - 5) = *(_OWORD *)(a3 + 16);
    *(&v38 - 8) = *(_QWORD *)(a3 + 32);
    *(&v38 - 7) = a4;
    *((_OWORD *)&v38 - 3) = *(_OWORD *)(a3 + 40);
    v24 = v43;
    *(&v38 - 4) = *(_QWORD *)(a3 + 56);
    *(&v38 - 3) = v24;
    *(&v38 - 2) = (uint64_t)v13;
    sub_2141D8BF8(&qword_254D69D00);
    v27 = type metadata accessor for RepeatedValueCollection(0, a4, v25, v26);
    sub_21440557C((void (*)(char *, char *))sub_21427475C, (uint64_t)(&v38 - 12), MEMORY[0x24BEE4078], v27, v28, (uint64_t)&v44);
    sub_2141E0750((uint64_t)v45, &qword_254D69D00);
    (*(void (**)(char *, uint64_t))(v22 + 8))(v13, v21);
  }
  else
  {
    v30 = v40;
    v29 = v41;
    v31 = (*(uint64_t (**)(char *, char *, uint64_t))(v40 + 32))(v9, v19, v41);
    MEMORY[0x24BDAC7A8](v31);
    *((_OWORD *)&v38 - 5) = *(_OWORD *)(a3 + 16);
    *(&v38 - 8) = *(_QWORD *)(a3 + 32);
    *(&v38 - 7) = a4;
    *((_OWORD *)&v38 - 3) = *(_OWORD *)(a3 + 40);
    v32 = v43;
    *(&v38 - 4) = *(_QWORD *)(a3 + 56);
    *(&v38 - 3) = v32;
    *(&v38 - 2) = (uint64_t)v9;
    sub_2141D8BF8(&qword_254D69D00);
    v35 = type metadata accessor for RepeatedValueCollection(0, a4, v33, v34);
    sub_21440557C((void (*)(char *, char *))sub_214274730, (uint64_t)(&v38 - 12), MEMORY[0x24BEE4078], v35, v36, (uint64_t)&v44);
    sub_2141E0750((uint64_t)v45, &qword_254D69D00);
    (*(void (**)(char *, uint64_t))(v30 + 8))(v9, v29);
  }
  return v44;
}

double sub_21426D080@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t AssociatedTypeWitness;
  unint64_t v14;
  char v15;
  unsigned int v16;
  double result;
  __int128 v18;
  __int128 v19;
  _BYTE v20[24];
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;

  v6 = v5;
  v10 = *(_QWORD *)(a1 + 8);
  sub_2141E070C(a2, (uint64_t)v20, &qword_254D69D00);
  if (!v21)
  {
    sub_2141E0750((uint64_t)v20, &qword_254D69D00);
    v22 = 0u;
    v23 = 0u;
    v24 = 0u;
    v25 = 0;
    goto LABEL_10;
  }
  v11 = *(_QWORD *)(a4 + 40);
  v12 = *(_QWORD *)(a4 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  sub_21437289C(AssociatedTypeWitness, (uint64_t)&v22);
  sub_214253F64((uint64_t)v20);
  if (!*((_QWORD *)&v23 + 1))
  {
LABEL_10:
    sub_2141E0750((uint64_t)&v22, &qword_254D69D00);
    *(_QWORD *)(a5 + 48) = 0;
    result = 0.0;
    *(_OWORD *)(a5 + 16) = 0u;
    *(_OWORD *)(a5 + 32) = 0u;
    *(_OWORD *)a5 = 0u;
    return result;
  }
  v26 = v22;
  v27 = v23;
  v28 = v24;
  v29 = v25;
  if (!*(_QWORD *)(v10 + 16)
    || (v14 = sub_214336B74(a3), (v15 & 1) == 0)
    || (v16 = *(unsigned __int16 *)(*(_QWORD *)(v10 + 56) + 72 * v14 + 40), v16 >> 8 > 0xFE)
    || (v16 & 0xFF00) == 0x300)
  {
    sub_2142012A0((uint64_t)&v26, v6, a3, v12, v11);
  }
  result = *(double *)&v26;
  v18 = v27;
  v19 = v28;
  *(_OWORD *)a5 = v26;
  *(_OWORD *)(a5 + 16) = v18;
  *(_OWORD *)(a5 + 32) = v19;
  *(_QWORD *)(a5 + 48) = v29;
  return result;
}

uint64_t sub_21426D218(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  unsigned int (*v5)(char *, uint64_t, uint64_t);
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  unsigned int v33;
  unint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(char *, char *, uint64_t);
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  unsigned int (*v59)(char *, uint64_t, uint64_t);
  uint64_t AssociatedConformanceWitness;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  _BYTE v77[104];
  _BYTE v78[56];
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _BYTE v82[144];
  _BYTE v83[304];
  _BYTE v84[168];

  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2[5] + 8) + 8) + 8);
  v5 = (unsigned int (*)(char *, uint64_t, uint64_t))a2[2];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = a2[4];
  v69 = a2[7];
  v70 = v7;
  v8 = type metadata accessor for BoundingSectionSpecification(0, AssociatedTypeWitness, v7, v69);
  v67 = *(_QWORD *)(v8 - 8);
  v68 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v9 = a2[3];
  v71 = a2;
  v10 = a2[6];
  v65 = v9;
  v66 = (char *)&v54 - v11;
  v64 = v10;
  v12 = type metadata accessor for BoundingSectionSpecification(0, AssociatedTypeWitness, v9, v10);
  v62 = *(_QWORD *)(v12 - 8);
  v63 = v12;
  v13 = MEMORY[0x24BDAC7A8](v12);
  v61 = (char *)&v54 - v14;
  v15 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v16 = MEMORY[0x24BDAC7A8](v13);
  v18 = (char *)&v54 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)&v54 - v19;
  v21 = sub_214425388();
  v22 = MEMORY[0x24BDAC7A8](v21);
  v24 = (char *)&v54 - v23;
  v55 = *((_QWORD *)v5 - 1);
  MEMORY[0x24BDAC7A8](v22);
  v57 = (char *)&v54 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = v5;
  AssociatedConformanceWitness = v4;
  v72 = swift_getAssociatedTypeWitness();
  v26 = *(_QWORD *)(v72 - 8);
  MEMORY[0x24BDAC7A8](v72);
  v74 = (char *)&v54 - v27;
  v29 = *a1;
  v28 = a1[1];
  swift_beginAccess();
  sub_214273878(v29 + 888, (uint64_t)v78);
  v30 = *(_QWORD *)(v28 + 16);
  v56 = v28;
  if (v30
    && (v31 = sub_214336B74(0), (v32 & 1) != 0)
    && (v33 = *(unsigned __int16 *)(*(_QWORD *)(v28 + 56) + 72 * v31 + 40), v33 >> 8 <= 0xFE)
    && (v33 & 0xFF00) != 0x300
    && *(_QWORD *)(v28 + 16)
    && (v34 = sub_214336B74(1u), (v35 & 1) != 0)
    && (v36 = *(unsigned __int16 *)(*(_QWORD *)(v28 + 56) + 72 * v34 + 40), v36 >> 8 <= 0xFE)
    && (v36 & 0xFF00) != 0x300)
  {
    swift_retain();
  }
  else
  {
    v54 = v26;
    (*(void (**)(char *, uint64_t, unsigned int (*)(char *, uint64_t, uint64_t)))(v55 + 16))(v57, v73, v59);
    swift_retain();
    sub_214424F38();
    swift_beginAccess();
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    sub_214425394();
    v59 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
    if (v59(v24, 1, AssociatedTypeWitness) != 1)
    {
      v57 = *(char **)(v15 + 32);
      v58 = v24;
      v46 = (uint64_t)v71;
      ((void (*)(char *, char *, uint64_t))v57)(v20, v24, AssociatedTypeWitness);
      while (1)
      {
        v48 = v73;
        v49 = (uint64_t)v61;
        (*(void (**)(char *, uint64_t, uint64_t))(v62 + 16))(v61, v73 + *(int *)(v46 + 68), v63);
        v50 = *(void (**)(char *, char *, uint64_t))(v15 + 16);
        v50(v18, v20, AssociatedTypeWitness);
        sub_2143D1168(v49, (uint64_t)v18, AssociatedTypeWitness, v65, v64, (uint64_t)v82);
        v51 = v48 + *(int *)(v46 + 72);
        v52 = (uint64_t)v66;
        (*(void (**)(char *, uint64_t, uint64_t))(v67 + 16))(v66, v51, v68);
        v50(v18, v20, AssociatedTypeWitness);
        sub_2143D1168(v52, (uint64_t)v18, AssociatedTypeWitness, v70, v69, (uint64_t)v83);
        if (*(_BYTE *)(v29 + 881) == 8)
        {
          sub_2141EDFD8((uint64_t)v82, (uint64_t)v84);
          v53 = (char *)&loc_21426D728 + 4 * byte_2144292B5[sub_2141EF1D0((uint64_t)v84)];
          __asm { BR              X9 }
        }
        sub_214202388((uint64_t)v82);
        sub_214202388((uint64_t)v83);
        sub_2142742C8((uint64_t)v83);
        sub_2142742C8((uint64_t)v82);
        (*(void (**)(char *, uint64_t))(v15 + 8))(v20, AssociatedTypeWitness);
        v47 = v58;
        sub_214425394();
        if (v59(v47, 1, AssociatedTypeWitness) == 1)
          break;
        ((void (*)(char *, char *, uint64_t))v57)(v20, v47, AssociatedTypeWitness);
      }
    }
    (*(void (**)(char *, uint64_t))(v54 + 8))(v74, v72);
  }
  v37 = (uint64_t)v71;
  v38 = *((int *)v71 + 19);
  v39 = v73;
  v40 = *(_QWORD *)(v73 + v38);
  v41 = v56;
  v75 = v29;
  v76 = v56;
  sub_21426D080((uint64_t)&v75, (uint64_t)v78, 4, (uint64_t)v71, (uint64_t)v77);
  swift_beginAccess();
  sub_2141FA160((uint64_t)v77, v40 + 16, &qword_254D69D00);
  swift_endAccess();
  v42 = *(_QWORD *)(v39 + v38);
  v75 = v29;
  v76 = v41;
  sub_21426D080((uint64_t)&v75, (uint64_t)&v79, 7, v37, (uint64_t)v77);
  swift_beginAccess();
  sub_2141FA160((uint64_t)v77, v42 + 72, &qword_254D69D00);
  swift_endAccess();
  v43 = *(_QWORD *)(v39 + v38);
  v75 = v29;
  v76 = v41;
  sub_21426D080((uint64_t)&v75, (uint64_t)&v80, 5, v37, (uint64_t)v77);
  swift_beginAccess();
  sub_2141FA160((uint64_t)v77, v43 + 128, &qword_254D69D00);
  swift_endAccess();
  v44 = *(_QWORD *)(v39 + v38);
  v75 = v29;
  v76 = v41;
  sub_21426D080((uint64_t)&v75, (uint64_t)&v81, 6, v37, (uint64_t)v77);
  swift_release();
  sub_21421CA44((uint64_t)v78);
  swift_beginAccess();
  sub_2141FA160((uint64_t)v77, v44 + 184, &qword_254D69D00);
  return swift_endAccess();
}

uint64_t sub_21426D888()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  int v8;

  v3 = sub_2141EF754(v2 - 248);
  v4 = *(unsigned __int8 *)(v3 + 48);
  if ((v4 & 0x80) != 0)
    goto LABEL_8;
  v5 = v3;
  v6 = *(_QWORD *)(v3 + 32);
  if (v4)
  {
    if (v4 == 1)
    {
      v7 = 1;
      goto LABEL_6;
    }
LABEL_8:
    JUMPOUT(0x21426D730);
  }
  v7 = 0;
LABEL_6:
  sub_2141EF1B0(v6, *(_QWORD *)(v5 + 40), v7);
  if (*(_BYTE *)(v1 + 881) != 8)
    JUMPOUT(0x21426D734);
  sub_2141EDFD8(v0 + 744, v0 + 888);
  v8 = sub_2141EF1D0(v0 + 888);
  return ((uint64_t (*)(void))((char *)sub_21426D924 + 4 * byte_2144292BB[v8]))();
}

void sub_21426D924()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = sub_2141EF754(v0 + 888);
  v3 = *(unsigned __int8 *)(v2 + 48);
  if ((v3 & 0x80) == 0)
  {
    v4 = v2;
    v5 = *(_QWORD *)(v2 + 32);
    v6 = *(_QWORD *)(v4 + 40);
    if (!v3)
    {
      sub_2141EF1B0(v5, v6, 0);
LABEL_7:
      JUMPOUT(0x21426D734);
    }
    if (v3 == 1)
    {
      sub_2141EF1B0(v5, v6, 1);
      goto LABEL_7;
    }
  }
  *(_BYTE *)(v1 + 881) = 1;
  goto LABEL_7;
}

void sub_21426D9A0()
{
  type metadata accessor for XYRenderer();
}

void sub_21426DA08(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 32))(v2, v1, a1);
  type metadata accessor for XYRenderer.ResolvedKeyframe();
}

int *sub_21426DA38(int *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v3 + result[17]) = v4;
  *(_QWORD *)(v3 + result[18]) = v2;
  *(_QWORD *)(v3 + result[19]) = v1;
  v5 = (_QWORD *)(v3 + result[20]);
  *v5 = v6;
  v5[1] = v7;
  return result;
}

void sub_21426DA88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[21];
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t AssociatedTypeWitness;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  v48 = a1;
  v49 = a8;
  v45 = a6;
  v46 = a4;
  v35 = a3;
  v41 = a2;
  v50 = a9;
  v10 = a7[5];
  v11 = a7[2];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v54 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v12 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v33[12] = (char *)v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v59 = (char *)v33 - v14;
  v56 = swift_getAssociatedTypeWitness();
  v53 = *(_QWORD *)(v56 - 8);
  v15 = MEMORY[0x24BDAC7A8](v56);
  v33[11] = (char *)v33 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x24BDAC7A8](v15);
  v58 = (char *)v33 - v18;
  v33[1] = v19;
  MEMORY[0x24BDAC7A8](v17);
  v51 = (char *)v33 - v20;
  v21 = sub_2144240D4();
  v33[7] = *(_QWORD *)(v21 - 8);
  v33[8] = v21;
  MEMORY[0x24BDAC7A8](v21);
  v33[6] = (char *)v33 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = sub_21442402C();
  v40 = *(_QWORD *)(v42 - 8);
  v23 = MEMORY[0x24BDAC7A8](v42);
  v37 = (char *)v33 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = MEMORY[0x24BDAC7A8](v23);
  v39 = (char *)v33 - v26;
  MEMORY[0x24BDAC7A8](v25);
  v55 = (char *)v33 - v27;
  v34 = type metadata accessor for SgShapeStyle();
  MEMORY[0x24BDAC7A8](v34);
  v47 = (char *)v33 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = a7[3];
  v30 = a7[4];
  v31 = a7[6];
  v32 = a7[7];
  v60 = v11;
  v43 = v31;
  v44 = v29;
  v61 = v29;
  v38 = v30;
  v62 = v30;
  v52 = v10;
  v63 = v10;
  v64 = v31;
  v36 = v32;
  v65 = v32;
  type metadata accessor for XYRenderer.ResolvedKeyframe();
}

void sub_21426F460(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(_QWORD);
  char *v14;
  _QWORD v15[18];

  v15[17] = a7;
  v15[3] = a4;
  v15[4] = a6;
  v15[1] = a2;
  v15[2] = a3;
  v8 = type metadata accessor for RulesRenderer(0);
  MEMORY[0x24BDAC7A8](v8);
  v9 = type metadata accessor for PointsRenderer(0);
  MEMORY[0x24BDAC7A8](v9);
  v10 = type metadata accessor for RectanglesRenderer(0);
  MEMORY[0x24BDAC7A8](v10);
  v11 = type metadata accessor for AnyVectorizedRenderer.MarkRenderer(0);
  MEMORY[0x24BDAC7A8](v11);
  sub_2141FDEA0(a1, (uint64_t)v15 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v13);
  v14 = (char *)sub_21426F5AC + 4 * byte_2144292C1[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

void sub_21426F5AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_2141FE1E0(v1, v0, type metadata accessor for RectanglesRenderer);
  sub_2141D7878(v0, v3 - 168);
  sub_2141DD370(v0, type metadata accessor for RectanglesRenderer);
  v4 = *(_QWORD *)(v3 - 72);
  v6 = *(_QWORD *)(v3 - 184);
  v5 = *(_QWORD *)(v3 - 176);
  v7 = *(_QWORD *)(v3 - 192);
  sub_2141D8DC0((__int128 *)(v3 - 168), v3 - 120);
  sub_2141D8BF8(qword_254D69D20);
  *(_QWORD *)(v3 - 168) = *(_QWORD *)(v3 - 200);
  *(_QWORD *)(v3 - 160) = v7;
  *(_QWORD *)(v3 - 152) = v6;
  *(_QWORD *)(v3 - 144) = v5;
  *(_QWORD *)(v3 - 136) = v4;
  *(_QWORD *)(v3 - 128) = v2;
  type metadata accessor for XYRenderer();
}

uint64_t sub_21426F678(uint64_t a1)
{
  uint64_t v1;
  int v3;

  v3 = swift_dynamicCast();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 56))(v1, v3 ^ 1u, 1, a1);
}

void sub_21426F6D4()
{
  sub_214425628();
  __break(1u);
}

void sub_21426F728()
{
  type metadata accessor for XYRenderer();
}

uint64_t sub_21426F7A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t AssociatedTypeWitness;
  uint64_t v17;
  _OWORD *v18;
  int v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _BYTE v30[128];

  *(_QWORD *)(v1 + 96) = a1;
  v8 = *(_QWORD *)(a1 - 8);
  v9 = MEMORY[0x24BDAC7A8](a1);
  *(_QWORD *)(v1 + 72) = &v30[-v10];
  v11 = *(_QWORD *)(v4 - 8);
  result = MEMORY[0x24BDAC7A8](v9);
  v14 = &v30[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  *(_QWORD *)(v1 + 32) = v5;
  if ((v3 & 0xC000000000000001) == 0)
  {
    if ((v6 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10) > v6)
    {
      v15 = *(_QWORD *)(v3 + 8 * v6 + 32);
      swift_retain();
      goto LABEL_5;
    }
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v15 = MEMORY[0x2199CCE3C](v6, v3);
LABEL_5:
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v11 + 16))(v14, v2, v4);
  *(_QWORD *)(v1 + 48) = v7;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v17 = sub_2144250AC();
  v18 = (_OWORD *)(v15 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_foregroundStyleScale);
  v19 = *(unsigned __int8 *)(v15 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_foregroundStyleScale + 96);
  if (v19 != 255)
  {
    v20 = v18[1];
    v21 = v18[2];
    v22 = v18[3];
    v23 = v18[4];
    v24 = v18[5];
    *(_OWORD *)(v1 + 256) = *v18;
    *(_OWORD *)(v1 + 272) = v20;
    *(_OWORD *)(v1 + 288) = v21;
    *(_OWORD *)(v1 + 304) = v22;
    *(_OWORD *)(v1 + 320) = v23;
    *(_OWORD *)(v1 + 336) = v24;
    *(_BYTE *)(v1 + 352) = v19 & 1;
    sub_21426FB84();
  }
  result = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(v8 + 16))(*(_QWORD *)(v1 + 72), v2, *(_QWORD *)(v1 + 96));
  if ((v6 & 0x8000000000000000) != 0)
    goto LABEL_13;
  if (*(_QWORD *)(*(_QWORD *)(v1 + 40) + 16) > v6)
  {
    *(_QWORD *)(v1 + 40) = 0;
    *(_QWORD *)(v1 + 144) = v17;
    sub_2141E801C(v15 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_xScale, v1 + 256, &qword_253F149D8);
    *(_QWORD *)(v1 + 24) = 0;
    swift_beginAccess();
    type metadata accessor for ChartContentRenderContext.Environment(0);
    *(_QWORD *)(v1 + 8) = v2;
    *(_QWORD *)(v1 + 16) = v4;
    v25 = v17;
    v26 = (_QWORD *)type metadata accessor for BoundingSectionSpecification(0, AssociatedTypeWitness, *(_QWORD *)(v1 + 88), *(_QWORD *)(v1 + 80));
    v27 = sub_214425094();
    v28 = MEMORY[0x2199CD934](MEMORY[0x24BEE12D8], v27);
    sub_2143D17A8(v1 + 144, v1 + 256, v26, v27, v28);
    *(_QWORD *)(v1 + 112) = v25;
    sub_2141E801C(v15 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_yScale, v1 + 144, &qword_253F149D8);
    v29 = (_QWORD *)type metadata accessor for BoundingSectionSpecification(0, AssociatedTypeWitness, *(_QWORD *)(v1 + 64), *(_QWORD *)(v1 + 56));
    sub_2143D17A8(v1 + 112, v1 + 144, v29, v27, v28);
    swift_bridgeObjectRelease();
    swift_release();
    sub_21426D9A0();
  }
LABEL_14:
  __break(1u);
  return result;
}

void sub_21426FB84()
{
  swift_getKeyPath();
  type metadata accessor for XYRenderer();
}

uint64_t sub_21426FC10(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = sub_21426CD78((uint64_t)&v7, v2, a1, MEMORY[0x24BDEBF80]);
  v5 = v4;
  result = swift_release();
  *v1 = v3;
  v1[1] = v5;
  return result;
}

uint64_t sub_21426FC64(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  _BYTE v5[56];

  sub_2141E070C(a1, (uint64_t)v5, &qword_254D69D00);
  v3 = *a2 + 16;
  swift_beginAccess();
  sub_2141FA160((uint64_t)v5, v3, &qword_254D69D00);
  return swift_endAccess();
}

uint64_t sub_21426FCD0(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  void (*v15)(char *, char *, uint64_t);
  uint64_t AssociatedTypeWitness;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  uint64_t v31;
  char *v32;
  uint64_t result;
  char *v34;
  char *v35;
  char *v36;
  _QWORD v37[2];
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  char *v49;
  void (*v50)(char *, char *, uint64_t);
  char *v51;
  char *v52;
  uint64_t v53;
  void (*v54)(char *, char *);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v40 = a8;
  v41 = a5;
  v9 = v8;
  v53 = a4;
  v54 = a1;
  v55 = a2;
  v39 = *(_QWORD *)(a5 - 8);
  v10 = MEMORY[0x24BDAC7A8](a1);
  v52 = (char *)v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v51 = (char *)v37 - v12;
  v45 = v13;
  v15 = v14;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v17 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v38 = (char *)v37 - v18;
  v19 = sub_214425388();
  v42 = *(_QWORD *)(v19 - 8);
  v43 = v19;
  v20 = MEMORY[0x24BDAC7A8](v19);
  v49 = (char *)v37 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x24BDAC7A8](v20);
  v24 = (char *)v37 - v23;
  v25 = MEMORY[0x24BDAC7A8](v22);
  v37[1] = (char *)v37 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = MEMORY[0x24BDAC7A8](v25);
  v48 = *((_QWORD *)v15 - 1);
  MEMORY[0x24BDAC7A8](v27);
  v47 = (char *)v37 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = swift_getAssociatedTypeWitness();
  v44 = *(_QWORD *)(v56 - 8);
  MEMORY[0x24BDAC7A8](v56);
  v46 = (char *)v37 - v29;
  v30 = v15;
  v31 = sub_214424F44();
  v57 = sub_2144255E0();
  v53 = sub_2144255EC();
  sub_2144255A4();
  (*(void (**)(char *, _QWORD, _QWORD *))(v48 + 16))(v47, v50, v15);
  v32 = v46;
  v50 = v30;
  result = sub_214424F38();
  if (v31 < 0)
  {
    __break(1u);
LABEL_18:
    __break(1u);
    return result;
  }
  if (v31)
  {
    swift_getAssociatedConformanceWitness();
    while (1)
    {
      sub_214425394();
      result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v24, 1, AssociatedTypeWitness);
      if ((_DWORD)result == 1)
        goto LABEL_18;
      v54(v24, v52);
      if (v9)
      {
        (*(void (**)(char *, uint64_t))(v44 + 8))(v32, v56);
        swift_release();
        (*(void (**)(uint64_t, char *, uint64_t))(v39 + 32))(v40, v52, v41);
        return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v24, AssociatedTypeWitness);
      }
      v9 = 0;
      (*(void (**)(char *, uint64_t))(v17 + 8))(v24, AssociatedTypeWitness);
      sub_2144255D4();
      if (!--v31)
      {
        v34 = v49;
        goto LABEL_9;
      }
    }
  }
  swift_getAssociatedConformanceWitness();
  v34 = v49;
LABEL_9:
  sub_214425394();
  v52 = *(char **)(v17 + 48);
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v52)(v34, 1, AssociatedTypeWitness) == 1)
  {
    v35 = v49;
LABEL_14:
    (*(void (**)(char *, uint64_t))(v44 + 8))(v32, v56);
    (*(void (**)(char *, uint64_t))(v42 + 8))(v35, v43);
    return v57;
  }
  else
  {
    v50 = *(void (**)(char *, char *, uint64_t))(v17 + 32);
    v36 = v38;
    v35 = v49;
    while (1)
    {
      v50(v36, v35, AssociatedTypeWitness);
      v54(v36, v51);
      if (v9)
        break;
      v9 = 0;
      (*(void (**)(char *, uint64_t))(v17 + 8))(v36, AssociatedTypeWitness);
      sub_2144255D4();
      sub_214425394();
      if (((unsigned int (*)(char *, uint64_t, uint64_t))v52)(v35, 1, AssociatedTypeWitness) == 1)
        goto LABEL_14;
    }
    (*(void (**)(char *, uint64_t))(v17 + 8))(v36, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v44 + 8))(v32, v56);
    swift_release();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v39 + 32))(v40, v51, v41);
  }
}

char *sub_2142701DC(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int (*v26)(char *, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(_QWORD, _QWORD, _QWORD);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t AssociatedConformanceWitness;
  char *v75;
  uint64_t v76;
  int *v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char v99;
  uint64_t v100;
  uint64_t v101;
  char v102;
  uint64_t v103;
  char v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  uint64_t v117;
  char v118;
  uint64_t v119;
  uint64_t v120;
  char v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char v136;
  uint64_t v137;
  uint64_t v138;
  char v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  _QWORD *v152;
  uint64_t v153;
  uint64_t v154;
  void (*v155)(char *, char *, uint64_t);
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  unint64_t v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  _QWORD *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  int v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  int v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  int v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t *v210;
  uint64_t *v211;
  uint64_t *v212;
  char *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  int *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  void (*v226)(_QWORD, _QWORD, _QWORD);
  unsigned int (*v227)(char *, uint64_t, uint64_t);
  uint64_t v228;
  int v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  char *v235;
  char *v236;
  uint64_t v237;
  char *v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  char v247;
  __int128 v248;
  unsigned __int8 v249;
  uint64_t v250;
  _QWORD v251[4];
  uint64_t v252;
  _BYTE v253[144];
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  unsigned __int8 v262;

  v223 = a5;
  v216 = a4;
  v7 = a3[5];
  v8 = *(char **)(*(_QWORD *)(*(_QWORD *)(v7 + 8) + 8) + 8);
  v9 = a3[2];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = a3[7];
  v222 = a3[4];
  v215 = v11;
  v12 = type metadata accessor for BoundingSectionSpecification(0, AssociatedTypeWitness, v222, v11);
  v172 = *(_QWORD *)(v12 - 8);
  v173 = v12;
  MEMORY[0x24BDAC7A8](v12);
  v171 = (char *)&v164 - v13;
  v14 = a3[3];
  v175 = a3;
  v220 = a3[6];
  v221 = v14;
  v15 = type metadata accessor for BoundingSectionSpecification(0, AssociatedTypeWitness, v14, v220);
  v169 = *(_QWORD *)(v15 - 8);
  v170 = v15;
  v16 = MEMORY[0x24BDAC7A8](v15);
  v168 = (char *)&v164 - v17;
  v214 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v18 = MEMORY[0x24BDAC7A8](v16);
  v167 = (char *)&v164 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)&v164 - v20;
  v22 = sub_214425388();
  v23 = MEMORY[0x24BDAC7A8](v22);
  v235 = (char *)&v164 - v24;
  v183 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v23);
  v26 = (unsigned int (*)(char *, uint64_t, uint64_t))((char *)&v164 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  v237 = swift_getAssociatedTypeWitness();
  v27 = *(_QWORD *)(v237 - 8);
  MEMORY[0x24BDAC7A8](v237);
  v236 = (char *)&v164 - v28;
  v174 = a2;
  v29 = a2 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_environment;
  v219 = a2 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_environment;
  swift_beginAccess();
  v218 = (int *)type metadata accessor for ChartContentRenderContext.Environment(0);
  v30 = v29 + v218[27];
  v31 = *(_QWORD *)(v30 + 24);
  v184 = v27;
  v238 = v21;
  v213 = v8;
  v227 = v26;
  if (v31)
  {
    sub_21427362C(v30, (uint64_t)&v254);
    sub_214253714(AssociatedTypeWitness, v251);
    v32 = sub_21420D92C((uint64_t)&v254);
  }
  else
  {
    memset(v251, 0, 24);
    v251[3] = 2;
    bzero(&v252, 0x2A9uLL);
  }
  MEMORY[0x24BDAC7A8](v32);
  v33 = v221;
  *(&v164 - 8) = v9;
  *(&v164 - 7) = v33;
  v34 = v216;
  *(&v164 - 6) = v222;
  *(&v164 - 5) = v34;
  v226 = (void (*)(_QWORD, _QWORD, _QWORD))v7;
  v35 = v220;
  *(&v164 - 4) = v7;
  *(&v164 - 3) = v35;
  v36 = v35;
  type metadata accessor for TypedVectorizedProperties(255, AssociatedTypeWitness, v37, v38);
  v39 = v9;
  v217 = sub_214425388();
  v225 = type metadata accessor for VisualMapper(0, AssociatedTypeWitness, MEMORY[0x24BEE1328], v40);
  v42 = sub_2142B6920((void (*)(char *, char *))sub_214274034, (uint64_t)(&v164 - 10), MEMORY[0x24BEE4078], v225, v41, (uint64_t)&v254);
  v211 = 0;
  v212 = &v164;
  v234 = v254;
  v233 = v255;
  v43 = v257;
  v232 = v256;
  v231 = v258;
  v230 = v259;
  v229 = v260;
  MEMORY[0x24BDAC7A8](v42);
  v228 = v39;
  v45 = v221;
  v44 = v222;
  *(&v164 - 8) = v39;
  *(&v164 - 7) = v45;
  *(&v164 - 6) = v44;
  *(&v164 - 5) = v34;
  v46 = v226;
  *(&v164 - 4) = (uint64_t)v226;
  *(&v164 - 3) = v36;
  v47 = v215;
  v165 = type metadata accessor for VisualMapper(0, AssociatedTypeWitness, MEMORY[0x24BEE0D00], v48);
  v49 = (uint64_t)v211;
  v51 = sub_2142B6920((void (*)(char *, char *))sub_214274088, (uint64_t)(&v164 - 10), MEMORY[0x24BEE4078], v165, v50, (uint64_t)&v254);
  v210 = (uint64_t *)v49;
  v211 = &v164;
  v194 = v255;
  v195 = v254;
  v212 = (uint64_t *)v257;
  v192 = v258;
  v193 = v256;
  v191 = v259;
  v206 = v260;
  MEMORY[0x24BDAC7A8](v51);
  *(&v164 - 8) = v39;
  *(&v164 - 7) = v45;
  v52 = v216;
  *(&v164 - 6) = v44;
  *(&v164 - 5) = v52;
  v53 = v220;
  *(&v164 - 4) = (uint64_t)v46;
  *(&v164 - 3) = v53;
  v54 = v223;
  v56 = type metadata accessor for VisualMapper(0, AssociatedTypeWitness, MEMORY[0x24BDF1FA8], v55);
  v58 = sub_2142B6920((void (*)(char *, char *))sub_2142740D0, (uint64_t)(&v164 - 10), MEMORY[0x24BEE4078], v56, v57, (uint64_t)&v254);
  v210 = &v164;
  v189 = v255;
  v190 = v254;
  v188 = v256;
  v211 = (uint64_t *)v257;
  v204 = v259;
  v205 = v258;
  v202 = v261;
  v203 = v260;
  v201 = v262;
  MEMORY[0x24BDAC7A8](v58);
  v59 = v221;
  *(&v164 - 8) = v228;
  *(&v164 - 7) = v59;
  *(&v164 - 6) = v222;
  *(&v164 - 5) = v52;
  v60 = v220;
  *(&v164 - 4) = (uint64_t)v226;
  *(&v164 - 3) = v60;
  v162 = v47;
  v163 = v54;
  v166 = v56;
  sub_2142B6920((void (*)(char *, char *))sub_21427413C, (uint64_t)(&v164 - 10), MEMORY[0x24BEE4078], v56, v61, (uint64_t)&v254);
  v186 = v255;
  v187 = v254;
  v185 = v256;
  v210 = (uint64_t *)v257;
  v199 = v259;
  v200 = v258;
  v197 = v261;
  v198 = v260;
  v196 = v262;
  v62 = (uint64_t *)(v219 + v218[26]);
  v64 = *v62;
  v63 = v62[1];
  v180 = v64;
  v208 = v63;
  v65 = (uint64_t *)(v219 + v218[24]);
  v66 = *v65;
  v67 = v65[1];
  v69 = v65[2];
  v68 = v65[3];
  v70 = (uint64_t *)(v219 + v218[25]);
  v71 = v70[1];
  v209 = *v70;
  v72 = v70[2];
  v73 = v70[3];
  (*(void (**)(unsigned int (*)(char *, uint64_t, uint64_t), uint64_t, uint64_t))(v183 + 16))(v227, v207, v228);
  swift_bridgeObjectRetain();
  v176 = v66;
  v177 = v67;
  v178 = v69;
  v179 = v68;
  sub_2141EF2B4(v66, v67, v69, v68);
  v182 = v72;
  v183 = v71;
  v181 = v73;
  sub_2141EF2B4(v209, v71, v72, v73);
  sub_214424F38();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v75 = v235;
  v228 = AssociatedConformanceWitness;
  sub_214425394();
  v76 = v214;
  v227 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v214 + 48);
  if (v227(v75, 1, AssociatedTypeWitness) == 1)
  {
    v213 = (char *)MEMORY[0x24BEE4AF8];
  }
  else
  {
    v226 = *(void (**)(_QWORD, _QWORD, _QWORD))(v76 + 32);
    v213 = (char *)MEMORY[0x24BEE4AF8];
    v96 = (uint64_t)v238;
    v224 = AssociatedTypeWitness;
    do
    {
      v226(v96, v75, AssociatedTypeWitness);
      if (v43 == 1)
        goto LABEL_12;
      v97 = v234;
      v239 = v234;
      v98 = v233;
      v240 = v233;
      v99 = v232;
      v241 = v232;
      v242 = v43;
      v100 = v231;
      v243 = v231;
      v101 = v230;
      v244 = v230;
      v102 = v229;
      LOBYTE(v245) = v229;
      sub_2141EF2B4(v234, v233, v232, v43);
      sub_214274628(v100, v101, v102);
      sub_214252A18((uint64_t)v238, v225, v103, (uint64_t)&v248);
      v104 = v99;
      AssociatedTypeWitness = v224;
      sub_21422F7F0(v97, v98, v104, v43);
      v105 = v100;
      v96 = (uint64_t)v238;
      sub_214274588(v105, v101, v102);
      if (v248 != 1)
      {
LABEL_12:
        if (v212 != (uint64_t *)1)
        {
          v107 = v194;
          v106 = v195;
          v239 = v195;
          v240 = v194;
          v109 = v192;
          v108 = v193;
          v241 = v193;
          v110 = (uint64_t)v212;
          v242 = (uint64_t)v212;
          v243 = v192;
          v111 = v191;
          v244 = v191;
          v112 = v206;
          LOBYTE(v245) = v206;
          sub_2141EF2B4(v195, v194, v193, (uint64_t)v212);
          sub_214282C84(v109, v111, v112);
          sub_214252A18((uint64_t)v238, v165, v113, (uint64_t)&v248);
          sub_21422F7F0(v106, v107, v108, v110);
          sub_21427429C(v109, v111, v206);
          v114 = *((_QWORD *)&v248 + 1);
          v115 = (_QWORD *)(v219 + v218[26]);
          *v115 = v248;
          v115[1] = v114;
          swift_bridgeObjectRelease();
        }
        if (v211 != (uint64_t *)1)
        {
          v117 = v189;
          v116 = v190;
          v239 = v190;
          v240 = v189;
          v118 = v188;
          v241 = v188;
          v119 = (uint64_t)v211;
          v242 = (uint64_t)v211;
          v120 = v205;
          v243 = v205;
          v244 = v204;
          v122 = v202;
          v121 = v203;
          v245 = v203;
          v246 = v202;
          v247 = v201;
          sub_2141EF2B4(v190, v189, v188, (uint64_t)v211);
          v123 = v120;
          v124 = v204;
          v125 = v122;
          LOBYTE(v122) = v201;
          sub_214282CB0(v123, v204, v121, v125, v201);
          sub_214252A18((uint64_t)v238, v166, v126, (uint64_t)&v248);
          sub_21422F7F0(v116, v117, v118, v119);
          sub_214274208(v205, v124, v203, v202, v122);
          v127 = v249;
          v128 = v250;
          v129 = (uint64_t *)(v219 + v218[24]);
          v130 = *v129;
          v131 = v129[1];
          v132 = v129[2];
          v133 = v129[3];
          *(_OWORD *)v129 = v248;
          v129[2] = v127;
          v129[3] = v128;
          sub_21422F7F0(v130, v131, v132, v133);
        }
        if (v210 != (uint64_t *)1)
        {
          v135 = v186;
          v134 = v187;
          v239 = v187;
          v240 = v186;
          v136 = v185;
          v241 = v185;
          v137 = (uint64_t)v210;
          v242 = (uint64_t)v210;
          v138 = v200;
          v243 = v200;
          v244 = v199;
          v140 = v197;
          v139 = v198;
          v245 = v198;
          v246 = v197;
          v247 = v196;
          sub_2141EF2B4(v187, v186, v185, (uint64_t)v210);
          v141 = v138;
          v142 = v199;
          v143 = v140;
          LOBYTE(v140) = v196;
          sub_214282CB0(v141, v199, v139, v143, v196);
          sub_214252A18((uint64_t)v238, v166, v144, (uint64_t)&v248);
          sub_21422F7F0(v134, v135, v136, v137);
          sub_214274208(v200, v142, v198, v197, v140);
          v145 = v249;
          v146 = v250;
          v147 = (uint64_t *)(v219 + v218[25]);
          v148 = *v147;
          v149 = v147[1];
          v150 = v147[2];
          v151 = v147[3];
          *(_OWORD *)v147 = v248;
          v147[2] = v145;
          v147[3] = v146;
          sub_21422F7F0(v148, v149, v150, v151);
        }
        v152 = v175;
        v153 = v207;
        v154 = (uint64_t)v168;
        (*(void (**)(char *, uint64_t, uint64_t))(v169 + 16))(v168, v207 + *((int *)v175 + 17), v170);
        v155 = *(void (**)(char *, char *, uint64_t))(v214 + 16);
        v156 = (uint64_t)v167;
        v96 = (uint64_t)v238;
        v155(v167, v238, AssociatedTypeWitness);
        sub_2143D1168(v154, v156, AssociatedTypeWitness, v221, v220, (uint64_t)v253);
        v157 = (uint64_t)v171;
        (*(void (**)(char *, uint64_t, uint64_t))(v172 + 16))(v171, v153 + *((int *)v152 + 18), v173);
        v155((char *)v156, (char *)v96, AssociatedTypeWitness);
        sub_2143D1168(v157, v156, AssociatedTypeWitness, v222, v215, (uint64_t)&v254);
        v158 = (*(uint64_t (**)(_BYTE *, uint64_t *, uint64_t))(v223 + 8))(v253, &v254, v174);
        sub_2142742C8((uint64_t)&v254);
        sub_2142742C8((uint64_t)v253);
        v159 = v213;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v159 = sub_214222074(0, *((_QWORD *)v159 + 2) + 1, 1, v159);
        v161 = *((_QWORD *)v159 + 2);
        v160 = *((_QWORD *)v159 + 3);
        if (v161 >= v160 >> 1)
          v159 = sub_214222074((char *)(v160 > 1), v161 + 1, 1, v159);
        *((_QWORD *)v159 + 2) = v161 + 1;
        v213 = v159;
        *(_QWORD *)&v159[8 * v161 + 32] = v158;
        v76 = v214;
      }
      (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v96, AssociatedTypeWitness);
      v75 = v235;
      sub_214425394();
    }
    while (v227(v75, 1, AssociatedTypeWitness) != 1);
  }
  sub_2142741A8(v187, v186, v185, (uint64_t)v210, v200, v199, v198, v197, v196);
  sub_2142741A8(v190, v189, v188, (uint64_t)v211, v205, v204, v203, v202, v201);
  sub_214274254(v195, v194, v193, (uint64_t)v212, v192, v191, v206);
  sub_214274540(v234, v233, v232, v43, v231, v230, v229);
  (*(void (**)(char *, uint64_t))(v184 + 8))(v236, v237);
  (*(void (**)(_QWORD *))(*(_QWORD *)(v217 - 8) + 8))(v251);
  v77 = v218;
  v78 = v219;
  v79 = (_QWORD *)(v219 + v218[26]);
  v80 = v208;
  *v79 = v180;
  v79[1] = v80;
  swift_bridgeObjectRelease();
  v81 = (uint64_t *)(v78 + v77[24]);
  v82 = *v81;
  v83 = v81[1];
  v84 = v81[2];
  v85 = v81[3];
  v86 = v177;
  *v81 = v176;
  v81[1] = v86;
  v87 = v179;
  v81[2] = v178;
  v81[3] = v87;
  sub_21422F7F0(v82, v83, v84, v85);
  v88 = (uint64_t *)(v78 + v77[25]);
  v89 = *v88;
  v90 = v88[1];
  v91 = v88[2];
  v92 = v88[3];
  v93 = v183;
  *v88 = v209;
  v88[1] = v93;
  v94 = v181;
  v88[2] = v182;
  v88[3] = v94;
  sub_21422F7F0(v89, v90, v91, v92);
  return v213;
}

uint64_t sub_214270F30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_21426CD78(a1, a2, a4, a3);
}

void sub_214270F40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _QWORD *a9)
{
  sub_21426DA88(a1, a2, a3, a4, a5, a6, a9, a7, a8);
}

char *sub_214270F54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  return sub_2142701DC(a1, a2, a5, a3, a4);
}

void sub_214270F68(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  _QWORD v19[6];

  v19[1] = a1;
  v19[2] = a6;
  MEMORY[0x24BDAC7A8](a1);
  v13 = type metadata accessor for PlottableProjection.Storage(0, v11, v10, v12);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)v19 - v15;
  v19[3] = a5;
  v17 = type metadata accessor for PlottableProjection(0, a4, a3, a5);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, a2 + *(int *)(v17 + 44), v13);
  v18 = (char *)sub_214271060 + 4 * byte_2144292C5[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_214271060()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);

  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(*(_QWORD *)(v7 - 120), v4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 32))(v2, v5, v0);
  v8 = *(_QWORD *)v3;
  v9 = *(_QWORD *)(v3 + 8);
  v10 = *(_BYTE *)(v3 + 16);
  v11 = *(_QWORD *)(v3 + 24);
  sub_2141DD130(*(_QWORD *)v3, v9, v10);
  v12 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8);
  swift_bridgeObjectRetain();
  v12(v3, v6);
  return sub_21437293C(v8, v9, v10, v11, v2, v0, *(_QWORD *)(v7 - 104), *(_QWORD *)(v7 - 112));
}

void sub_21427118C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t TupleTypeMetadata2;
  void (*v4)(uint64_t, uint64_t);

  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v4 = *(void (**)(uint64_t, uint64_t))(v1 + 8);
  v4(v2 + *(int *)(TupleTypeMetadata2 + 48), v0);
  v4(v2, v0);
  sub_214425628();
  __break(1u);
}

void sub_2142712B0(uint64_t a1, uint64_t a2)
{
  __asm { BR              X9 }
}

uint64_t sub_214271314(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  double v18;

  v18 = sub_214252B28(a1, v12, v11);
  sub_2142748FC(v9, v10, v8, v17, a5, a6, a7, a8, v13, v14, v15, v16);
  sub_2142637C0(v12, v11);
  (*(void (**)(uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a1);
  return *(_QWORD *)&v18;
}

uint64_t sub_2142713FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t (*v19)(__int128 *, uint64_t, uint64_t);
  uint64_t (**v20)(__int128 *, uint64_t, uint64_t);
  uint64_t (*v21)(char *, uint64_t, uint64_t);
  uint64_t (**v22)(char *, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;

  v25 = a8;
  v15 = type metadata accessor for Vectorizer(0, a4, a6, a4);
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v24 - v17;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 32))((char *)&v24 - v17, a1, a4);
  v19 = (uint64_t (*)(__int128 *, uint64_t, uint64_t))swift_allocObject();
  *((_QWORD *)v19 + 2) = a4;
  *((_QWORD *)v19 + 3) = a5;
  *((_QWORD *)v19 + 4) = a6;
  *((_QWORD *)v19 + 5) = a7;
  *((_QWORD *)v19 + 6) = a2;
  *((_QWORD *)v19 + 7) = a3;
  v20 = (uint64_t (**)(__int128 *, uint64_t, uint64_t))&v18[*(int *)(v15 + 36)];
  *v20 = sub_2142747DC;
  v20[1] = v19;
  v21 = (uint64_t (*)(char *, uint64_t, uint64_t))swift_allocObject();
  *((_QWORD *)v21 + 2) = a4;
  *((_QWORD *)v21 + 3) = a5;
  *((_QWORD *)v21 + 4) = a6;
  *((_QWORD *)v21 + 5) = a7;
  *((_QWORD *)v21 + 6) = a2;
  *((_QWORD *)v21 + 7) = a3;
  v22 = (uint64_t (**)(char *, uint64_t, uint64_t))&v18[*(int *)(v15 + 40)];
  *v22 = sub_21427482C;
  v22[1] = v21;
  (*(void (**)(uint64_t, char *, uint64_t))(v16 + 32))(v25, v18, v15);
  return swift_retain();
}

uint64_t sub_214271534(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __int128 v10;
  _QWORD v12[9];
  __int128 v13;

  v10 = *a1;
  v12[2] = a6;
  v12[3] = a7;
  v12[4] = a8;
  v12[5] = a9;
  v12[6] = a4;
  v12[7] = a5;
  v12[8] = a2;
  v13 = v10;
  swift_retain();
  sub_21421FC18(a3, (void (*)(void))sub_2142748C8, (uint64_t)v12);
  return swift_release();
}

uint64_t sub_2142715A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  void (*v16)(uint64_t);
  _QWORD v18[2];

  v12 = *(_QWORD *)(a7 - 8);
  MEMORY[0x24BDAC7A8]();
  v14 = (char *)v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16(v15);
  v18[0] = a4;
  v18[1] = a5;
  (*(void (**)(char *, _QWORD *, uint64_t, uint64_t))(a9 + 32))(v14, v18, a7, a9);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, a7);
}

uint64_t sub_214271658(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  char v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  void (*v16)(uint64_t);
  _BYTE v18[8];
  uint64_t v19;

  v11 = a4 & 1;
  v12 = *(_QWORD *)(a7 - 8);
  MEMORY[0x24BDAC7A8]();
  v14 = &v18[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v16(v15);
  v18[0] = v11;
  v19 = a5;
  (*(void (**)(_BYTE *, _BYTE *, uint64_t, uint64_t))(a9 + 40))(v14, v18, a7, a9);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v12 + 8))(v14, a7);
}

uint64_t sub_21427171C(_QWORD *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 v22;
  uint64_t v23;
  int v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _BYTE *v38;
  uint64_t *v39;
  uint64_t result;
  uint64_t *v41;
  _QWORD *v42;
  _QWORD *v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v9 = (char *)&v41 - v8;
  v10 = sub_214425574();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v41 - v12;
  LODWORD(v53) = *a2;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a3, AssociatedTypeWitness);
  sub_214425580();
  v14 = MEMORY[0x2199CD934](MEMORY[0x24BEE28F8], v10);
  v15 = sub_214372580((uint64_t)v13, v10, v14);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  if (*(_QWORD *)(v15 + 16))
  {
    v16 = *(_QWORD *)(v15 + 32);
    v17 = *(_QWORD *)(v15 + 40);
    v18 = *(unsigned __int8 *)(v15 + 48);
    v19 = *(_QWORD *)(v15 + 56);
    v20 = *(_QWORD *)(v15 + 64);
    v21 = *(_QWORD *)(v15 + 72);
    v22 = *(_BYTE *)(v15 + 80);
    v47 = *(_QWORD *)(v15 + 88);
    v48 = v22;
    v46 = *(_QWORD *)(v15 + 96);
    swift_bridgeObjectRetain();
    sub_2141DD130(v16, v17, v18);
    sub_2141DD140(v20, v21, v22);
    swift_bridgeObjectRelease();
    v23 = *((_QWORD *)a2 + 1);
    v24 = a2[16];
    v25 = a1 + 78;
    swift_beginAccess();
    v51 = v17;
    v52 = v16;
    v49 = v19;
    v50 = v18;
    v45 = v23;
    v44 = v24;
    if ((_DWORD)v53 == 2)
    {
      v25 = a1 + 100;
      v26 = a1[100];
      v53 = a1 + 101;
      v27 = a1[101];
      v28 = a1[102];
      v42 = a1 + 103;
      v43 = a1 + 102;
      v29 = a1[103];
      v41 = a1 + 104;
      v30 = a1[104];
      v31 = a1 + 105;
      v32 = a1[105];
      v33 = a1 + 106;
      v34 = a1[106];
      v35 = a1 + 107;
      v36 = a1 + 108;
      v37 = a1 + 109;
      v38 = a1 + 110;
    }
    else if ((v53 & 1) != 0)
    {
      v25 = a1 + 89;
      v26 = a1[89];
      v53 = a1 + 90;
      v27 = a1[90];
      v28 = a1[91];
      v42 = a1 + 92;
      v43 = a1 + 91;
      v29 = a1[92];
      v41 = a1 + 93;
      v30 = a1[93];
      v31 = a1 + 94;
      v32 = a1[94];
      v33 = a1 + 95;
      v34 = a1[95];
      v35 = a1 + 96;
      v36 = a1 + 97;
      v37 = a1 + 98;
      v38 = a1 + 99;
    }
    else
    {
      v26 = a1[78];
      v53 = a1 + 79;
      v27 = a1[79];
      v28 = a1[80];
      v42 = a1 + 81;
      v43 = a1 + 80;
      v29 = a1[81];
      v41 = a1 + 82;
      v30 = a1[82];
      v31 = a1 + 83;
      v32 = a1[83];
      v33 = a1 + 84;
      v34 = a1[84];
      v35 = a1 + 85;
      v36 = a1 + 86;
      v37 = a1 + 87;
      v38 = a1 + 88;
    }
    sub_21421C6D4(v26, v27, v28, v29, v30, v32, v34);
    v39 = v53;
    *v25 = v52;
    *v39 = v51;
    *v43 = v50;
    *v42 = v49;
    *v41 = v20;
    *v31 = v21;
    *v33 = v48;
    *v35 = v47;
    *v36 = v46;
    *v37 = v45;
    *v38 = v44;
    return swift_endAccess();
  }
  else
  {
    result = swift_bridgeObjectRelease();
    __break(1u);
  }
  return result;
}

uint64_t sub_214271AB0(_QWORD *a1, __int128 *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t *v12;
  uint64_t TupleTypeMetadata2;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  void (*v26)(char *, _QWORD *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  void (*v43)(__int128 *, char *, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  _QWORD *v50;
  int v52;
  _QWORD *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  _BYTE *v96;
  _QWORD *v97;
  int v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  _QWORD *v108;
  _QWORD *v109;
  __int128 v110;
  _QWORD *v111;
  _QWORD *v112;
  _QWORD *v113;
  uint64_t *v114;
  _QWORD *v115;
  uint64_t v116;
  uint64_t *v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  _BYTE v128[104];
  _BYTE v129[56];
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  _BYTE v133[96];

  v114 = a4;
  v7 = *(_QWORD *)(*(_QWORD *)(a4[1] + 8) + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v11 = (char *)&v82 - v10;
  v117 = v12;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v14 = sub_214425388();
  v111 = *(_QWORD **)(v14 - 8);
  v112 = (_QWORD *)v14;
  v15 = MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v82 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v82 - v18;
  v96 = (_BYTE *)sub_214425694();
  MEMORY[0x24BDAC7A8](v96);
  v94 = v7;
  v95 = (char *)&v82 - v20;
  v113 = (_QWORD *)sub_214425688();
  v99 = (_QWORD *)*(v113 - 1);
  v21 = MEMORY[0x24BDAC7A8](v113);
  v115 = (uint64_t *)((char *)&v82 - v22);
  MEMORY[0x24BDAC7A8](v21);
  v24 = (char *)&v82 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v110 = *a2;
  v100 = v25;
  v26 = *(void (**)(char *, _QWORD *, uint64_t))(v25 + 16);
  v109 = a1;
  v26(v24, a1, a3);
  v27 = v110;
  swift_beginAccess();
  sub_214273878(v27 + 888, (uint64_t)v129);
  v97 = v133;
  sub_2141E070C((uint64_t)v133, (uint64_t)v128, &qword_254D69CF8);
  sub_2141E070C((uint64_t)v129, (uint64_t)&v118, &qword_254D69D00);
  v116 = a3;
  v107 = v24;
  if (*((_QWORD *)&v119 + 1))
  {
    v123 = v118;
    v124 = v119;
    v125 = v120;
    *(_QWORD *)&v126 = v121;
    swift_retain();
    v28 = v27;
    sub_2142012A0((uint64_t)&v123, (uint64_t)v24, 4, a3, (uint64_t)v114);
    sub_214253F64((uint64_t)&v123);
  }
  else
  {
    swift_retain();
    sub_2141E0750((uint64_t)&v118, &qword_254D69D00);
    v28 = v27;
  }
  sub_2141E070C((uint64_t)&v130, (uint64_t)&v118, &qword_254D69D00);
  if (*((_QWORD *)&v119 + 1))
  {
    v123 = v118;
    v124 = v119;
    v125 = v120;
    *(_QWORD *)&v126 = v121;
    v29 = (uint64_t)v107;
    sub_2142012A0((uint64_t)&v123, (uint64_t)v107, 7, v116, (uint64_t)v114);
    sub_214253F64((uint64_t)&v123);
  }
  else
  {
    sub_2141E0750((uint64_t)&v118, &qword_254D69D00);
    v29 = (uint64_t)v107;
  }
  sub_2141E070C((uint64_t)&v131, (uint64_t)&v118, &qword_254D69D00);
  if (*((_QWORD *)&v119 + 1))
  {
    v123 = v118;
    v124 = v119;
    v125 = v120;
    *(_QWORD *)&v126 = v121;
    sub_2142012A0((uint64_t)&v123, v29, 5, v116, (uint64_t)v114);
    sub_214253F64((uint64_t)&v123);
  }
  else
  {
    sub_2141E0750((uint64_t)&v118, &qword_254D69D00);
  }
  sub_2141E070C((uint64_t)&v132, (uint64_t)&v118, &qword_254D69D00);
  if (*((_QWORD *)&v119 + 1))
  {
    v123 = v118;
    v124 = v119;
    v125 = v120;
    *(_QWORD *)&v126 = v121;
    sub_2142012A0((uint64_t)&v123, v29, 6, v116, (uint64_t)v114);
    sub_214253F64((uint64_t)&v123);
  }
  else
  {
    sub_2141E0750((uint64_t)&v118, &qword_254D69D00);
  }
  sub_2141E070C((uint64_t)v128, (uint64_t)&v123, &qword_254D69CF8);
  v108 = (_QWORD *)v28;
  if ((_QWORD)v126)
  {
    v118 = v123;
    v119 = v124;
    v120 = v125;
    v121 = v126;
    v122 = v127;
    v30 = v123;
    swift_beginAccess();
    if (v30 == 2)
    {
      v31 = *(_QWORD *)(v28 + 800);
      v32 = *(_QWORD *)(v28 + 808);
      v33 = *(_QWORD *)(v28 + 816);
      v34 = *(_QWORD *)(v28 + 824);
      v35 = *(_QWORD *)(v28 + 832);
      v36 = *(_QWORD *)(v28 + 840);
      v37 = *(_QWORD *)(v28 + 848);
      v38 = *(_QWORD *)(v28 + 856);
      v39 = *(_QWORD *)(v28 + 864);
      v40 = *(_QWORD *)(v28 + 872);
      v41 = *(unsigned __int8 *)(v28 + 880);
    }
    else
    {
      v34 = *(_QWORD *)(v28 + 648);
      if ((v30 & 1) != 0)
        v31 = *(_QWORD *)(v28 + 712);
      else
        v31 = *(_QWORD *)(v28 + 624);
      if ((v30 & 1) != 0)
        v32 = *(_QWORD *)(v28 + 720);
      else
        v32 = *(_QWORD *)(v28 + 632);
      if ((v30 & 1) != 0)
        v33 = *(_QWORD *)(v28 + 728);
      else
        v33 = *(_QWORD *)(v28 + 640);
      if ((v30 & 1) != 0)
      {
        v34 = *(_QWORD *)(v28 + 736);
        v35 = *(_QWORD *)(v28 + 744);
      }
      else
      {
        v35 = *(_QWORD *)(v28 + 656);
      }
      if ((v30 & 1) != 0)
        v36 = *(_QWORD *)(v28 + 752);
      else
        v36 = *(_QWORD *)(v28 + 664);
      if ((v30 & 1) != 0)
        v37 = *(_QWORD *)(v28 + 760);
      else
        v37 = *(_QWORD *)(v28 + 672);
      if ((v30 & 1) != 0)
        v38 = *(_QWORD *)(v28 + 768);
      else
        v38 = *(_QWORD *)(v28 + 680);
      if ((v30 & 1) != 0)
        v39 = *(_QWORD *)(v28 + 776);
      else
        v39 = *(_QWORD *)(v28 + 688);
      if ((v30 & 1) != 0)
        v40 = *(_QWORD *)(v28 + 784);
      else
        v40 = *(_QWORD *)(v28 + 696);
      v41 = *(unsigned __int8 *)(v28 + 704);
      if ((v30 & 1) != 0)
        v41 = *(unsigned __int8 *)(v28 + 792);
    }
    v98 = v41;
    v101 = v40;
    v102 = v39;
    v92 = v32;
    v93 = v31;
    v103 = v33;
    v104 = v34;
    v105 = v36;
    v106 = v35;
    v90 = v38;
    v91 = v37;
    sub_2141EF260(v31, v32, v33, v34, v35, v36, v37);
    sub_214253F98((uint64_t)&v118);
  }
  else
  {
    v92 = 0;
    v93 = 0;
    v102 = 0;
    v103 = 0;
    v105 = 0;
    v106 = 0;
    v90 = 0;
    v91 = 0;
    v101 = 0;
    v98 = 0;
    v104 = 1;
  }
  sub_214424F5C();
  sub_214425670();
  while (1)
  {
    sub_21442567C();
    ((void (*)(char *, char *, _QWORD *))v111[4])(v19, v17, v112);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata2 - 8) + 48))(v19, 1, TupleTypeMetadata2) == 1)break;
    v44 = *(_QWORD *)v19;
    v45 = v9;
    (*(void (**)(char *, char *, uint64_t *))(v9 + 32))(v11, &v19[*(int *)(TupleTypeMetadata2 + 48)], v117);
    sub_2141E070C((uint64_t)v128, (uint64_t)&v123, &qword_254D69CF8);
    v47 = v116;
    v48 = v114;
    if ((_QWORD)v126)
    {
      v120 = v125;
      v121 = v126;
      v122 = v127;
      v118 = v123;
      v119 = v124;
      sub_21427171C(v108, (unsigned __int8 *)&v118, (uint64_t)v11);
      sub_214253F98((uint64_t)&v118);
    }
    v42 = type metadata accessor for Vectorizer(0, v47, (uint64_t)v48, v46);
    v43 = *(void (**)(__int128 *, char *, uint64_t))((char *)v109 + *(int *)(v42 + 36));
    v123 = v110;
    v43(&v123, v11, v44);
    v9 = v45;
    (*(void (**)(char *, uint64_t *))(v45 + 8))(v11, v117);
  }
  ((void (*)(_QWORD *, _QWORD *))v99[1])(v115, v113);
  sub_2141E070C((uint64_t)v97, (uint64_t)&v118, &qword_254D69CF8);
  if (!(_QWORD)v121)
  {
    swift_release();
    sub_2142738AC(v93, v92, v103, v104, v106, v105, v91);
    sub_2141E0750((uint64_t)v128, &qword_254D69CF8);
    sub_21421CA44((uint64_t)v129);
    (*(void (**)(char *, uint64_t))(v100 + 8))(v107, v116);
    return sub_2141E0750((uint64_t)&v118, &qword_254D69CF8);
  }
  v125 = v120;
  v126 = v121;
  v127 = v122;
  v123 = v118;
  v124 = v119;
  v49 = (uint64_t)v107;
  v50 = v108;
  if (v104 == 1)
  {
    swift_release();
    sub_214253F98((uint64_t)&v123);
    sub_2141E0750((uint64_t)v128, &qword_254D69CF8);
    sub_21421CA44((uint64_t)v129);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v100 + 8))(v49, v116);
  }
  v52 = v123;
  v53 = v108 + 78;
  swift_beginAccess();
  if (v52 == 2)
  {
    *(_QWORD *)&v110 = v50 + 100;
    v54 = v50[100];
    v117 = v50 + 101;
    v55 = (char *)v50[101];
    v94 = v50[102];
    v95 = v55;
    v114 = v50 + 103;
    v115 = v50 + 102;
    v56 = v50[103];
    v88 = v50[104];
    v89 = v56;
    v112 = v50 + 105;
    v113 = v50 + 104;
    v57 = v50[105];
    v111 = v50 + 106;
    v86 = v50[106];
    v87 = v57;
    v109 = v50 + 107;
    v58 = v50[107];
    v99 = v50 + 108;
    v84 = v50[108];
    v85 = v58;
    v83 = v50[109];
    v96 = v50 + 110;
    v97 = v50 + 109;
    v60 = v92;
    v59 = v93;
    v61 = v93;
    v62 = v92;
    v63 = v103;
    v64 = v104;
    v65 = v104;
    v67 = v105;
    v66 = v106;
    v68 = v106;
    v69 = v105;
    v70 = v91;
    v71 = v91;
    v72 = v90;
LABEL_61:
    sub_2141EF260(v59, v60, v63, v65, v68, v69, v70);
    v73 = v54;
    v75 = v94;
    v74 = (uint64_t)v95;
    v77 = v88;
    v76 = v89;
    v79 = v86;
    v78 = v87;
    goto LABEL_62;
  }
  v60 = v92;
  v61 = v93;
  v63 = v103;
  v67 = v105;
  v66 = v106;
  v72 = v90;
  v71 = v91;
  if ((v52 & 1) != 0)
  {
    *(_QWORD *)&v110 = v50 + 89;
    v54 = v50[89];
    v117 = v50 + 90;
    v95 = (char *)v50[90];
    v115 = v50 + 91;
    v94 = v50[91];
    v114 = v50 + 92;
    v89 = v50[92];
    v113 = v50 + 93;
    v88 = v50[93];
    v112 = v50 + 94;
    v87 = v50[94];
    v111 = v50 + 95;
    v86 = v50[95];
    v109 = v50 + 96;
    v85 = v50[96];
    v99 = v50 + 97;
    v84 = v50[97];
    v97 = v50 + 98;
    v83 = v50[98];
    v96 = v50 + 99;
    v59 = v93;
    v64 = v104;
    v65 = v104;
    v68 = v106;
    v69 = v105;
    v70 = v91;
    v62 = v92;
    goto LABEL_61;
  }
  v95 = (char *)v50[78];
  v117 = v50 + 79;
  v94 = v50[79];
  v115 = v50 + 80;
  v89 = v50[80];
  v114 = v50 + 81;
  v88 = v50[81];
  v113 = v50 + 82;
  v87 = v50[82];
  v112 = v50 + 83;
  v86 = v50[83];
  v111 = v50 + 84;
  v85 = v50[84];
  v109 = v50 + 85;
  v84 = v50[85];
  v99 = v50 + 86;
  v83 = v50[86];
  v97 = v50 + 87;
  v82 = v50[87];
  v96 = v50 + 88;
  v64 = v104;
  v62 = v92;
  *(_QWORD *)&v110 = v53;
  sub_2141EF260(v93, v92, v103, v104, v106, v105, v91);
  v74 = v94;
  v73 = (uint64_t)v95;
  v76 = v88;
  v75 = v89;
  v78 = v86;
  v77 = v87;
  v79 = v85;
LABEL_62:
  sub_21421C6D4(v73, v74, v75, v76, v77, v78, v79);
  v105 = v67;
  v106 = v66;
  *(_QWORD *)v110 = v61;
  *v117 = v62;
  v80 = v103;
  *v115 = v103;
  *v114 = v64;
  *v113 = v66;
  *v112 = v67;
  *v111 = v71;
  *v109 = v72;
  v81 = v101;
  *v99 = v102;
  *v97 = v81;
  *v96 = v98;
  swift_endAccess();
  swift_release();
  sub_2142738AC(v61, v62, v80, v64, v106, v105, v71);
  sub_214253F98((uint64_t)&v123);
  sub_2141E0750((uint64_t)v128, &qword_254D69CF8);
  sub_21421CA44((uint64_t)v129);
  return (*(uint64_t (**)(char *, uint64_t))(v100 + 8))(v107, v116);
}

uint64_t sub_2142726BC@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(void);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int *v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _BYTE v73[264];
  _BYTE v74[288];
  _QWORD v75[90];
  _BYTE v76[728];

  v68 = a5;
  v9 = sub_2141D8BF8(&qword_253F14280);
  MEMORY[0x24BDAC7A8](v9);
  v67 = (char *)&v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = a4;
  v11 = *(_QWORD *)(*(_QWORD *)(a4 + 8) + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v13 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v64 = AssociatedTypeWitness;
  v65 = v13;
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v62 = (char *)&v56 - v14;
  v15 = type metadata accessor for ChartContentRenderContext.Environment(0);
  v16 = MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v56 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)&v56 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = *a2;
  v21 = *((_QWORD *)a2 + 1);
  v22 = a3;
  v66 = v23;
  v24 = *(void (**)(void))(v23 + 16);
  v69 = v20;
  v61 = a1;
  v24();
  v25 = v21 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_environment;
  swift_beginAccess();
  v26 = v15;
  v27 = v25 + *(int *)(v15 + 108);
  if (!*(_QWORD *)(v27 + 24))
  {
    memset(v75, 0, 24);
    v75[3] = 2;
    bzero(&v75[4], 0x2A9uLL);
    v28 = v22;
    v29 = swift_getAssociatedTypeWitness();
    v30 = v21;
    swift_retain();
    goto LABEL_5;
  }
  sub_21427362C(v27, (uint64_t)v76);
  v28 = v22;
  v29 = swift_getAssociatedTypeWitness();
  v30 = v21;
  swift_retain();
  sub_214253714(v29, v75);
  sub_21420D92C((uint64_t)v76);
  if (v75[3] == 2)
  {
LABEL_5:
    sub_2142532F8(v29, (uint64_t)v76);
    type metadata accessor for TypedVectorizedProperties(255, v29, v31, v32);
    v33 = sub_214425388();
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v33 - 8) + 8))(v75, v33);
    goto LABEL_6;
  }
  memcpy(v76, v75, 0x2C9uLL);
LABEL_6:
  v57 = v18;
  sub_2141FDEA0(v25, (uint64_t)v18, type metadata accessor for ChartContentRenderContext.Environment);
  swift_beginAccess();
  memcpy(v73, (const void *)(v30 + 80), 0x102uLL);
  v59 = v26;
  *(_QWORD *)(v25 + *(int *)(v26 + 64)) = 0;
  v72 = 0;
  sub_21421CA78((uint64_t)v73, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char))sub_2141EF260);
  v34 = v62;
  v35 = v69;
  v36 = sub_2144251D8();
  v58 = v11;
  v70 = MEMORY[0x24BEE4AF8];
  MEMORY[0x24BDAC7A8](v36);
  v37 = v63;
  *(&v56 - 10) = v28;
  *(&v56 - 9) = v37;
  *(&v56 - 8) = (uint64_t)v35;
  *(&v56 - 7) = (uint64_t)v76;
  v38 = v61;
  *(&v56 - 6) = v30;
  *(&v56 - 5) = v38;
  *((_BYTE *)&v56 - 32) = v60;
  *(&v56 - 3) = v30;
  *(&v56 - 2) = (uint64_t)&v72;
  sub_2141D8BF8(&qword_253F132E0);
  v39 = v64;
  swift_getAssociatedConformanceWitness();
  sub_214424F8C();
  (*(void (**)(char *, uint64_t))(v65 + 8))(v34, v39);
  v40 = v71;
  swift_beginAccess();
  v41 = (uint64_t)v57;
  sub_2142735E8((uint64_t)v57, v25);
  swift_endAccess();
  memcpy(v74, (const void *)(v30 + 80), 0x102uLL);
  memcpy((void *)(v30 + 80), v73, 0x102uLL);
  sub_21421CA78((uint64_t)v73, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char))sub_2141EF260);
  sub_21421CA78((uint64_t)v74, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char))sub_21421C6D4);
  v42 = (int *)type metadata accessor for SgGroup(0);
  v43 = swift_allocBox();
  v45 = v44;
  v46 = *(_QWORD *)(*(_QWORD *)(v30 + 16) + 24);
  v47 = sub_214251F48(v40);
  swift_bridgeObjectRelease();
  v48 = type metadata accessor for SgClipRect(0);
  v49 = (uint64_t)v67;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 56))(v67, 1, 1, v48);
  swift_release();
  sub_21421CA78((uint64_t)v73, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char))sub_21421C6D4);
  v50 = *(_QWORD *)(v41 + *(int *)(v59 + 64));
  sub_2141DD370(v41, type metadata accessor for ChartContentRenderContext.Environment);
  *v45 = v46;
  v45[1] = v47;
  sub_2141E801C(v49, (uint64_t)v45 + v42[6], &qword_253F14280);
  *(_QWORD *)((char *)v45 + v42[7]) = 0x3FF0000000000000;
  *(_QWORD *)((char *)v45 + v42[8]) = v50;
  *(_QWORD *)((char *)v45 + v42[9]) = MEMORY[0x24BEE4AF8];
  *((_BYTE *)v45 + v42[10]) = 0;
  *v68 = v43;
  v51 = swift_getAssociatedTypeWitness();
  v54 = type metadata accessor for TypedVectorizedProperties(0, v51, v52, v53);
  (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)(v54 - 8) + 8))(v76, v54);
  return (*(uint64_t (**)(char *, uint64_t))(v66 + 8))(v69, v28);
}

uint64_t sub_214272C80(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t *a4, _QWORD *a5, uint64_t a6, int a7, uint64_t a8, _QWORD *a9, uint64_t a10, uint64_t a11)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void (*v16)(_QWORD, _QWORD);
  void (*v17)(_QWORD);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int8 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  char *v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  void (*v77)(_QWORD, _QWORD, _QWORD);
  uint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  _QWORD *v92;
  uint64_t v93;
  _QWORD *v94;
  _QWORD *v95;
  _BYTE *v96;
  _QWORD *v97;
  uint64_t v98;
  void (*v99)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD);
  _QWORD *v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t result;
  _QWORD *v105;
  _QWORD *v106;
  _QWORD *v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  __int128 v117;
  __int128 v118;
  uint64_t *v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  _QWORD *v126;
  char *v127;
  uint64_t v128;
  _OWORD v129[6];
  uint64_t v130;
  char v131;
  _QWORD v132[2];
  unsigned __int8 v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unsigned __int8 v137;
  uint64_t v138;
  uint64_t v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  _OWORD v143[5];
  __int128 v144;
  _BYTE v145[72];
  __int128 v146;
  __int128 v147;
  uint64_t v148;
  char v149;

  v119 = a1;
  v123 = a6;
  v124 = a8;
  v120 = a7;
  v126 = a5;
  v122 = a11;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v13 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v15 = (char *)&v105 - v14;
  v121 = a10;
  v16 = (void (*)(_QWORD, _QWORD))sub_2144252A4();
  v125 = v13;
  v17 = *(void (**)(_QWORD))(v13 + 16);
  v127 = v15;
  v128 = AssociatedTypeWitness;
  v17(v15);
  v16(&v144, 0);
  v19 = a4[3];
  if (v19 != 1)
  {
    v21 = a4[4];
    v20 = a4[5];
    *(_QWORD *)&v118 = v20;
    v22 = a4[1];
    v23 = a4[2];
    v25 = *((_BYTE *)a4 + 48);
    *(_QWORD *)&v144 = *a4;
    v24 = v144;
    *((_QWORD *)&v144 + 1) = v22;
    *(_QWORD *)v145 = v23;
    *(_QWORD *)&v145[8] = v19;
    *(_QWORD *)&v145[16] = v21;
    *(_QWORD *)&v145[24] = v20;
    v145[32] = v25;
    sub_2141EF2B4(v144, v22, v23, v19);
    sub_214274628(v21, v20, v25);
    v27 = type metadata accessor for VisualMapper(0, v128, MEMORY[0x24BEE50B0], v26);
    sub_214252A18((uint64_t)v127, v27, v28, (uint64_t)&v140);
    sub_21422F7F0(v24, v22, v23, v19);
    sub_214274588(v21, v118, v25);
    v29 = v140;
    v30 = (char *)v126 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_environment;
    swift_beginAccess();
    *(_QWORD *)&v30[*(int *)(type metadata accessor for ChartContentRenderContext.Environment(0) + 52)] = v29;
  }
  v31 = a4[10];
  if (v31 != 1)
  {
    v33 = a4[11];
    v32 = a4[12];
    v35 = a4[8];
    v34 = a4[9];
    v36 = a4[7];
    v37 = *((_BYTE *)a4 + 104);
    *(_QWORD *)&v144 = v36;
    *((_QWORD *)&v144 + 1) = v35;
    *(_QWORD *)v145 = v34;
    *(_QWORD *)&v145[8] = v31;
    *(_QWORD *)&v145[16] = v33;
    *(_QWORD *)&v145[24] = v32;
    *(_QWORD *)&v118 = v32;
    v145[32] = v37;
    *((_QWORD *)&v141 + 1) = MEMORY[0x24BDEBF80];
    *(_QWORD *)&v142 = MEMORY[0x24BDEBF68];
    sub_2141EF2B4(v36, v35, v34, v31);
    sub_21427460C(v33, v32, v37);
    v39 = type metadata accessor for VisualMapper(0, v128, MEMORY[0x24BDEBF80], v38);
    sub_214252A18((uint64_t)v127, v39, v40, (uint64_t)&v140);
    sub_21422F7F0(v36, v35, v34, v31);
    sub_2142745F0(v33, v118, v37);
    BYTE8(v142) = 1;
    v41 = (uint64_t)v126 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_environment;
    swift_beginAccess();
    sub_2141FA160((uint64_t)&v140, v41, &qword_253F14460);
    swift_endAccess();
  }
  v42 = a4[17];
  if (v42 != 1)
  {
    v43 = *((_BYTE *)a4 + 184);
    v44 = a4[22];
    v45 = a4[16];
    v144 = *((_OWORD *)a4 + 7);
    *(_QWORD *)v145 = v45;
    *(_QWORD *)&v145[8] = v42;
    v46 = *((_OWORD *)a4 + 10);
    *(_OWORD *)&v145[16] = *((_OWORD *)a4 + 9);
    *(_OWORD *)&v145[32] = v46;
    *(_QWORD *)&v145[48] = v44;
    v145[56] = v43;
    v47 = type metadata accessor for VisualMapper(0, v128, MEMORY[0x24BDEB7D0], v18);
    sub_214252A18((uint64_t)v127, v47, v48, (uint64_t)&v140);
    v117 = v141;
    v118 = v140;
    v49 = v142;
    v50 = (char *)v126 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_environment;
    swift_beginAccess();
    v51 = v117;
    *((_OWORD *)v50 + 3) = v118;
    *((_OWORD *)v50 + 4) = v51;
    *((_QWORD *)v50 + 10) = v49;
    swift_bridgeObjectRelease();
  }
  v52 = type metadata accessor for VisualMapper(255, v128, (uint64_t)&type metadata for AnyChartSymbolShape, v18);
  v53 = sub_214425388();
  v54 = *(_QWORD *)(v53 - 8);
  (*(void (**)(__int128 *, uint64_t *, uint64_t))(v54 + 16))(&v140, a4 + 24, v53);
  if (*((_QWORD *)&v141 + 1) == 1)
  {
    (*(void (**)(__int128 *, uint64_t))(v54 + 8))(&v140, v53);
    v58 = v126;
  }
  else
  {
    *(_OWORD *)v145 = v141;
    *(_OWORD *)&v145[16] = v142;
    *(_OWORD *)&v145[32] = v143[0];
    *(_OWORD *)&v145[41] = *(_OWORD *)((char *)v143 + 9);
    v144 = v140;
    sub_214252A18((uint64_t)v127, v52, v55, (uint64_t)&v140);
    (*(void (**)(__int128 *, uint64_t))(*(_QWORD *)(v52 - 8) + 8))(&v144, v52);
    BYTE8(v142) = 0;
    v58 = v126;
    v59 = (char *)v126 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_environment;
    swift_beginAccess();
    sub_2141FA160((uint64_t)&v140, (uint64_t)(v59 + 88), &qword_253F12208);
    swift_endAccess();
  }
  v126 = a9;
  v120 &= 1u;
  v60 = *((unsigned __int8 *)a4 + 320);
  if (v60 <= 0xFB)
  {
    v61 = a4[35];
    v63 = a4[36];
    v62 = a4[37];
    v65 = a4[38];
    v64 = a4[39];
    *(_QWORD *)&v144 = a4[34];
    *((_QWORD *)&v144 + 1) = v61;
    *(_QWORD *)v145 = v63;
    *(_QWORD *)&v145[8] = v62;
    *(_QWORD *)&v145[16] = v65;
    *(_QWORD *)&v145[24] = v64;
    if ((v60 & 0x80) != 0)
    {
      v145[32] = v60 & 0x7F;
      type metadata accessor for CGSize(255);
      v73 = type metadata accessor for VisualMapper(0, v128, v71, v72);
      sub_214252A18((uint64_t)v127, v73, v74, (uint64_t)&v140);
      v68 = *((_QWORD *)&v140 + 1);
      v70 = v140;
      v69 = 1;
    }
    else
    {
      v145[32] = v60;
      v66 = type metadata accessor for VisualMapper(0, v128, MEMORY[0x24BEE50B0], v57);
      sub_214252A18((uint64_t)v127, v66, v67, (uint64_t)&v140);
      v68 = 0;
      v69 = 0;
      v70 = v140;
    }
    v75 = (char *)v58 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_environment;
    swift_beginAccess();
    *((_QWORD *)v75 + 17) = v70;
    *((_QWORD *)v75 + 18) = v68;
    v75[152] = v69;
  }
  type metadata accessor for TypedVectorizedProperties.Position(255, v128, v56, v57);
  v76 = sub_214425388();
  v77 = *(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v76 - 8) + 32);
  v77(&v140, a4 + 41, v76);
  v77(&v144, &v140, v76);
  if (sub_214273680((uint64_t)&v144) != 1)
  {
    v79 = v144;
    v129[0] = *(_OWORD *)&v145[8];
    v129[1] = *(_OWORD *)&v145[24];
    v129[2] = *(_OWORD *)&v145[40];
    v129[3] = *(_OWORD *)&v145[56];
    v129[4] = v146;
    v129[5] = v147;
    v130 = v148;
    v131 = v149;
    sub_2142736A4((uint64_t)&v144);
    v81 = type metadata accessor for VisualMapper(0, v128, (uint64_t)&type metadata for AnyPlottableValue, v80);
    sub_214252A18((uint64_t)v127, v81, v82, (uint64_t)v132);
    v116 = v132[1];
    *(_QWORD *)&v117 = v132[0];
    *(_QWORD *)&v118 = v133;
    v113 = v135;
    v114 = v134;
    v115 = v137;
    v111 = v138;
    v112 = v136;
    v109 = *((_QWORD *)&v144 + 1);
    v110 = v139;
    v83 = v58 + 10;
    v108 = v145[0];
    swift_beginAccess();
    if (v79 == 2)
    {
      v83 = v58 + 32;
      v84 = v58[32];
      v85 = v58[33];
      v106 = v58 + 34;
      v107 = v58 + 33;
      v105 = v58 + 35;
      v86 = v58[34];
      v87 = v58[35];
      a4 = v58 + 36;
      v88 = v58 + 37;
      v89 = v58[36];
      v90 = v58[37];
      v91 = v58 + 38;
      v92 = v58 + 39;
      v93 = v58[38];
      v94 = v58;
      v95 = v58 + 40;
      v76 = (uint64_t)(v94 + 41);
      v96 = v94 + 42;
    }
    else
    {
      if ((v79 & 1) != 0)
      {
        v97 = v58 + 31;
        v83 = v97 - 10;
      }
      else
      {
        v97 = v58 + 20;
      }
      v84 = *(v97 - 10);
      v85 = *(v97 - 9);
      v107 = v97 - 9;
      v86 = *(v97 - 8);
      v106 = v97 - 8;
      v87 = *(v97 - 7);
      v105 = v97 - 7;
      a4 = v97 - 6;
      v89 = *(v97 - 6);
      v88 = v97 - 5;
      v90 = *(v97 - 5);
      v91 = v97 - 4;
      v93 = *(v97 - 4);
      v92 = v97 - 3;
      v96 = v97;
      v95 = v97 - 2;
      v76 = (uint64_t)(v96 - 8);
    }
    sub_21421C6D4(v84, v85, v86, v87, v89, v90, v93);
    *v83 = v117;
    *v107 = v116;
    *v106 = v118;
    *v105 = v114;
    *a4 = v113;
    *v88 = v112;
    *v91 = v115;
    *v92 = v111;
    *v95 = v110;
    *(_QWORD *)v76 = v109;
    *v96 = v108;
    swift_endAccess();
    sub_214273740((uint64_t)&v140);
  }
  v98 = type metadata accessor for Vectorizer(0, v121, v122, v78);
  v99 = *(void (**)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD))(v123 + *(int *)(v98 + 40));
  LOBYTE(v129[0]) = v120;
  *((_QWORD *)&v129[0] + 1) = v124;
  v100 = v126;
  v99(v132, v129, v127, *v126);
  v101 = v132[0];
  if (v132[0] == 0xE000000000000000)
    goto LABEL_28;
  a4 = v119;
  v76 = *v119;
  swift_retain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    goto LABEL_31;
  while (1)
  {
    v103 = *(_QWORD *)(v76 + 16);
    v102 = *(_QWORD *)(v76 + 24);
    if (v103 >= v102 >> 1)
      v76 = (uint64_t)sub_214224250((char *)(v102 > 1), v103 + 1, 1, (char *)v76);
    *(_QWORD *)(v76 + 16) = v103 + 1;
    *(_QWORD *)(v76 + 8 * v103 + 32) = v101;
    swift_release();
    *a4 = v76;
LABEL_28:
    result = (*(uint64_t (**)(char *, uint64_t))(v125 + 8))(v127, v128);
    if (!__OFADD__(*v100, 1))
      break;
    __break(1u);
LABEL_31:
    v76 = (uint64_t)sub_214224250(0, *(_QWORD *)(v76 + 16) + 1, 1, (char *)v76);
  }
  ++*v100;
  return result;
}

uint64_t sub_21427358C(_QWORD *a1, __int128 *a2, uint64_t a3)
{
  return sub_214271AB0(a1, a2, *(_QWORD *)(a3 + 16), *(uint64_t **)(a3 + 24));
}

uint64_t sub_214273598@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_2142726BC(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
}

uint64_t type metadata accessor for TypedVectorizedProperties(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2141D8E88(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TypedVectorizedProperties);
}

uint64_t sub_2142735B0(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;

  return sub_214272C80(a1, a2, *(_QWORD *)(v2 + 32), *(uint64_t **)(v2 + 40), *(_QWORD **)(v2 + 48), *(_QWORD *)(v2 + 56), *(unsigned __int8 *)(v2 + 64), *(_QWORD *)(v2 + 72), *(_QWORD **)(v2 + 80), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t sub_2142735E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ChartContentRenderContext.Environment(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_21427362C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t type metadata accessor for VisualMapper(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2141D8E88(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for VisualMapper);
}

uint64_t type metadata accessor for TypedVectorizedProperties.Position(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2141D8E88(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TypedVectorizedProperties.Position);
}

uint64_t sub_214273680(uint64_t a1)
{
  unint64_t v1;
  int v2;

  v1 = *(_QWORD *)(a1 + 48);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  v2 = v1 - 1;
  if (v2 < 0)
    v2 = -1;
  return (v2 + 1);
}

uint64_t sub_2142736A4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v12;

  v12 = *(_QWORD *)(a1 + 56);
  v2 = *(_QWORD *)(a1 + 64);
  v3 = *(_QWORD *)(a1 + 72);
  v4 = *(_QWORD *)(a1 + 80);
  v5 = *(_QWORD *)(a1 + 88);
  v6 = *(_QWORD *)(a1 + 96);
  v7 = *(_QWORD *)(a1 + 104);
  v8 = *(_QWORD *)(a1 + 112);
  v9 = *(_QWORD *)(a1 + 120);
  v10 = *(_BYTE *)(a1 + 128);
  sub_2141EF2B4(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  sub_214282BFC(v12, v2, v3, v4, v5, v6, v7, v8, v9, v10);
  return a1;
}

uint64_t sub_214273740(uint64_t a1)
{
  sub_2142737A0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_BYTE *)(a1 + 128));
  return a1;
}

uint64_t sub_2142737A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char a17)
{
  uint64_t result;

  if (a7 != 1)
  {
    sub_21422F7F0(a4, a5, a6, a7);
    return sub_214273B84(a8, a9, a10, a11, a12, a13, a14, a15, a16, a17);
  }
  return result;
}

uint64_t type metadata accessor for VisualMapper.Mapping(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2141D8E88(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for VisualMapper.Mapping);
}

double sub_21427384C(uint64_t a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_QWORD *)(a1 + 48) = 1;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 113) = 0u;
  return result;
}

uint64_t sub_214273878(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for VectorizedPlottables(a2, a1);
  return a2;
}

uint64_t sub_2142738AC(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  if (a4 != 1)
    return sub_21421C6D4(result, a2, a3, a4, a5, a6, a7);
  return result;
}

uint64_t sub_2142738CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + 40);
  if (v1)
  {
    if (v1 == 1)
      goto LABEL_5;
    sub_2141ED0BC(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32));
    swift_bridgeObjectRelease();
  }
  sub_214274588(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_BYTE *)(v0 + 64));
LABEL_5:
  v2 = *(_QWORD *)(v0 + 96);
  if (v2)
  {
    if (v2 == 1)
      goto LABEL_9;
    sub_2141ED0BC(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_BYTE *)(v0 + 88));
    swift_bridgeObjectRelease();
  }
  sub_2142745F0(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112), *(_BYTE *)(v0 + 120));
LABEL_9:
  v3 = *(_QWORD *)(v0 + 152);
  if (v3)
  {
    if (v3 == 1)
      goto LABEL_13;
    sub_2141ED0BC(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 136), *(_BYTE *)(v0 + 144));
    swift_bridgeObjectRelease();
  }
  sub_214273B58(*(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 192), *(_BYTE *)(v0 + 200));
LABEL_13:
  v4 = *(_QWORD *)(v0 + 232);
  if (v4)
  {
    if (v4 == 1)
      goto LABEL_21;
    sub_2141ED0BC(*(_QWORD *)(v0 + 208), *(_QWORD *)(v0 + 216), *(_BYTE *)(v0 + 224));
    swift_bridgeObjectRelease();
  }
  v5 = *(unsigned __int8 *)(v0 + 280);
  if (v5 == 2 || v5 == 1)
  {
    swift_release();
  }
  else if (!*(_BYTE *)(v0 + 280))
  {
    _s6Charts15AnyChartContentVwxx_0(v0 + 240);
  }
LABEL_21:
  v6 = *(unsigned __int8 *)(v0 + 336);
  if (v6 <= 0xFB)
    sub_214280EA8(*(_QWORD *)(v0 + 288), *(_QWORD *)(v0 + 296), *(_QWORD *)(v0 + 304), *(_QWORD *)(v0 + 312), *(_QWORD *)(v0 + 320), *(_QWORD *)(v0 + 328), v6, (void (*)(void))sub_21422F7F0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_214285A58, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_214285A58);
  v7 = *(_QWORD *)(v0 + 392);
  if (v7)
  {
    if (v7 == 1)
      goto LABEL_27;
    sub_2141ED0BC(*(_QWORD *)(v0 + 368), *(_QWORD *)(v0 + 376), *(_BYTE *)(v0 + 384));
    swift_bridgeObjectRelease();
  }
  sub_214273B84(*(_QWORD *)(v0 + 400), *(_QWORD *)(v0 + 408), *(_QWORD *)(v0 + 416), *(_QWORD *)(v0 + 424), *(_QWORD *)(v0 + 432), *(_QWORD *)(v0 + 440), *(_QWORD *)(v0 + 448), *(_QWORD *)(v0 + 456), *(_QWORD *)(v0 + 464), *(_BYTE *)(v0 + 472));
LABEL_27:
  v8 = *(_QWORD *)(v0 + 504);
  if (v8)
  {
    if (v8 == 1)
      goto LABEL_31;
    sub_2141ED0BC(*(_QWORD *)(v0 + 480), *(_QWORD *)(v0 + 488), *(_BYTE *)(v0 + 496));
    swift_bridgeObjectRelease();
  }
  sub_21427429C(*(_QWORD *)(v0 + 512), *(_QWORD *)(v0 + 520), *(_BYTE *)(v0 + 528));
LABEL_31:
  v9 = *(_QWORD *)(v0 + 560);
  if (v9)
  {
    if (v9 == 1)
      goto LABEL_35;
    sub_2141ED0BC(*(_QWORD *)(v0 + 536), *(_QWORD *)(v0 + 544), *(_BYTE *)(v0 + 552));
    swift_bridgeObjectRelease();
  }
  sub_214274588(*(_QWORD *)(v0 + 568), *(_QWORD *)(v0 + 576), *(_BYTE *)(v0 + 584));
LABEL_35:
  v10 = *(_QWORD *)(v0 + 616);
  if (v10)
  {
    if (v10 == 1)
      goto LABEL_39;
    sub_2141ED0BC(*(_QWORD *)(v0 + 592), *(_QWORD *)(v0 + 600), *(_BYTE *)(v0 + 608));
    swift_bridgeObjectRelease();
  }
  sub_214274208(*(_QWORD *)(v0 + 624), *(_QWORD *)(v0 + 632), *(_QWORD *)(v0 + 640), *(_QWORD *)(v0 + 648), *(_BYTE *)(v0 + 656));
LABEL_39:
  v11 = *(_QWORD *)(v0 + 688);
  if (!v11)
  {
LABEL_42:
    sub_214274208(*(_QWORD *)(v0 + 696), *(_QWORD *)(v0 + 704), *(_QWORD *)(v0 + 712), *(_QWORD *)(v0 + 720), *(_BYTE *)(v0 + 728));
    return swift_deallocObject();
  }
  if (v11 != 1)
  {
    sub_2141ED0BC(*(_QWORD *)(v0 + 664), *(_QWORD *)(v0 + 672), *(_BYTE *)(v0 + 680));
    swift_bridgeObjectRelease();
    goto LABEL_42;
  }
  return swift_deallocObject();
}

uint64_t sub_214273B58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t result;

  if (a6 == 2 || a6 == 1)
    return swift_release();
  if (!a6)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t sub_214273B84(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9, char a10)
{
  if (a10 == 2 || a10 == 1)
    return swift_release();
  if (!a10)
  {
    sub_2141ED0BC(result, a2, a3 & 1);
    swift_bridgeObjectRelease();
    return sub_2141EF1B0(a5, a6, a7);
  }
  return result;
}

uint64_t type metadata accessor for TypedVectorizedProperties.SymbolSizeMapper(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2141D8E88(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TypedVectorizedProperties.SymbolSizeMapper);
}

uint64_t sub_214273C18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  int EnumCaseMultiPayload;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  char *v21;
  char *v22;
  int v23;
  unint64_t v24;
  char *v25;
  void (*v26)(char *, uint64_t);
  uint64_t TupleTypeMetadata2;
  uint64_t v28;
  uint64_t v29;
  uint64_t TupleTypeMetadata3;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v6 = v4[2];
  v5 = v4[3];
  v7 = v4[4];
  v8 = v4[5];
  v9 = *(_QWORD *)(type metadata accessor for AnyConcreteScale(0, v5, a3, a4) - 8);
  v10 = (*(unsigned __int8 *)(v9 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v11 = *(_QWORD *)(v9 + 64);
  v32 = v6;
  v12 = type metadata accessor for PlottableProjection(0, v6, v7, v8);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = (v10 + v11 + *(unsigned __int8 *)(v13 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v34 = *(_QWORD *)(v13 + 64);
  v15 = *(_QWORD *)(v5 - 8);
  v33 = *(unsigned __int8 *)(v15 + 80);
  v16 = (char *)v4 + v10;
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  swift_release();
  if (EnumCaseMultiPayload == 1)
    v19 = MEMORY[0x24BEE0D00];
  else
    v19 = MEMORY[0x24BEE13C8];
  v20 = (int *)type metadata accessor for ConcreteScale(0, v19, v5, v18);
  v21 = &v16[v20[9]];
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v21, 1, v5))
    (*(void (**)(char *, uint64_t))(v15 + 8))(v21, v5);
  if (*(_QWORD *)&v16[v20[10]])
    swift_release();
  swift_bridgeObjectRelease();
  v22 = &v16[v20[12]];
  v23 = v22[8];
  v24 = v14;
  if (v23 != 255)
    sub_2141E833C(*(_QWORD *)v22, v23 & 1);
  sub_2141ED0BC(*(_QWORD *)((char *)v4 + v14), *(_QWORD *)((char *)v4 + v14 + 8), *((_BYTE *)v4 + v14 + 16));
  swift_bridgeObjectRelease();
  v25 = (char *)v4 + v14 + *(int *)(v12 + 44);
  type metadata accessor for PlottableProjection.Storage(0, v32, v7, v8);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v25, v7);
      break;
    case 1u:
      v26 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v7 - 8) + 8);
      v26(v25, v7);
      TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
      v26(&v25[*(int *)(TupleTypeMetadata2 + 48)], v7);
      break;
    case 2u:
      swift_release();
      break;
    case 3u:
      swift_release();
      swift_release();
      break;
    case 4u:
      swift_release();
      sub_2144258E0();
      v28 = sub_214423C48();
      v29 = sub_214423C54();
      TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v28 - 8) + 8))(&v25[*(int *)(TupleTypeMetadata3 + 48)], v28);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v29 - 8) + 8))(&v25[*(int *)(TupleTypeMetadata3 + 64)], v29);
      break;
    default:
      break;
  }
  (*(void (**)(char *, uint64_t))(v15 + 8))((char *)v4 + ((v24 + v34 + v33) & ~v33), v5);
  return swift_deallocObject();
}

uint64_t sub_214273F3C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  _QWORD *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;

  v7 = v4[2];
  v8 = v4[3];
  v9 = v4[4];
  v10 = v4[5];
  v11 = *(_QWORD *)(type metadata accessor for AnyConcreteScale(0, v8, a2, a3) - 8);
  v12 = (*(unsigned __int8 *)(v11 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v13 = *(_QWORD *)(v11 + 64);
  v14 = *(_QWORD *)(type metadata accessor for PlottableProjection(0, v7, v9, v10) - 8);
  v15 = (v12 + v13 + *(unsigned __int8 *)(v14 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  v16 = *(unsigned __int8 *)(*(_QWORD *)(v8 - 8) + 80);
  return sub_2142524B8(a1, (uint64_t)v4 + v12, (uint64_t)v4 + v15, (uint64_t)v4 + ((v15 + *(_QWORD *)(v14 + 64) + v16) & ~v16), v7, v8, v9, v10, a4);
}

uint64_t sub_214274008()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_21427402C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_214252110(a1, a2);
}

uint64_t sub_214274034@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v2 = *(_QWORD *)(a1 + 520);
  v3 = *(_QWORD *)(a1 + 528);
  v4 = *(_QWORD *)(a1 + 536);
  v5 = *(_QWORD *)(a1 + 544);
  v6 = *(_QWORD *)(a1 + 552);
  v7 = *(_QWORD *)(a1 + 560);
  *(_QWORD *)a2 = v2;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v4;
  *(_QWORD *)(a2 + 24) = v5;
  *(_QWORD *)(a2 + 32) = v6;
  *(_QWORD *)(a2 + 40) = v7;
  v8 = *(_BYTE *)(a1 + 568);
  *(_BYTE *)(a2 + 48) = v8;
  return sub_214274648(v2, v3, v4, v5, v6, v7, v8);
}

uint64_t sub_214274088@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = *(_QWORD *)(a1 + 464);
  v2 = *(_QWORD *)(a1 + 472);
  v4 = *(_QWORD *)(a1 + 480);
  v5 = *(_QWORD *)(a1 + 488);
  v6 = *(_QWORD *)(a1 + 496);
  v7 = *(_QWORD *)(a1 + 504);
  *(_QWORD *)a2 = v3;
  *(_QWORD *)(a2 + 8) = v2;
  *(_QWORD *)(a2 + 16) = v4;
  *(_QWORD *)(a2 + 24) = v5;
  *(_QWORD *)(a2 + 32) = v6;
  *(_QWORD *)(a2 + 40) = v7;
  v8 = *(_BYTE *)(a1 + 512);
  *(_BYTE *)(a2 + 48) = v8;
  return sub_214274380(v3, v2, v4, v5, v6, v7, v8);
}

uint64_t sub_2142740D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v2 = *(_QWORD *)(a1 + 576);
  v3 = *(_QWORD *)(a1 + 584);
  v4 = *(_QWORD *)(a1 + 592);
  v5 = *(_QWORD *)(a1 + 600);
  v6 = *(_QWORD *)(a1 + 608);
  v7 = *(_QWORD *)(a1 + 616);
  v8 = *(_QWORD *)(a1 + 624);
  v9 = *(_QWORD *)(a1 + 632);
  v10 = *(_BYTE *)(a1 + 640);
  *(_QWORD *)a2 = v2;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v4;
  *(_QWORD *)(a2 + 24) = v5;
  *(_QWORD *)(a2 + 32) = v6;
  *(_QWORD *)(a2 + 40) = v7;
  *(_QWORD *)(a2 + 48) = v8;
  *(_QWORD *)(a2 + 56) = v9;
  *(_BYTE *)(a2 + 64) = v10;
  return sub_214274320(v2, v3, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_21427413C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v2 = *(_QWORD *)(a1 + 648);
  v3 = *(_QWORD *)(a1 + 656);
  v4 = *(_QWORD *)(a1 + 664);
  v5 = *(_QWORD *)(a1 + 672);
  v6 = *(_QWORD *)(a1 + 680);
  v7 = *(_QWORD *)(a1 + 688);
  v8 = *(_QWORD *)(a1 + 696);
  v9 = *(_QWORD *)(a1 + 704);
  v10 = *(_BYTE *)(a1 + 712);
  *(_QWORD *)a2 = v2;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v4;
  *(_QWORD *)(a2 + 24) = v5;
  *(_QWORD *)(a2 + 32) = v6;
  *(_QWORD *)(a2 + 40) = v7;
  *(_QWORD *)(a2 + 48) = v8;
  *(_QWORD *)(a2 + 56) = v9;
  *(_BYTE *)(a2 + 64) = v10;
  return sub_214274320(v2, v3, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_2142741A8(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, char a9)
{
  if (a4 != 1)
  {
    sub_21422F7F0(result, a2, a3, a4);
    return sub_214274208(a5, a6, a7, a8, a9);
  }
  return result;
}

uint64_t sub_214274208(uint64_t result, uint64_t a2, char a3, uint64_t a4, char a5)
{
  if (a5 == 2 || a5 == 1)
    return swift_release();
  if (!a5)
  {
    sub_2141ED0BC(result, a2, a3 & 1);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_214274254(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  if (a4 != 1)
  {
    sub_21422F7F0(result, a2, a3, a4);
    return sub_21427429C(a5, a6, a7);
  }
  return result;
}

uint64_t sub_21427429C(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if (a3 == 2 || a3 == 1)
    return swift_release();
  if (!a3)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t sub_2142742C8(uint64_t a1)
{
  sub_2141EF040(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_OWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136));
  return a1;
}

uint64_t sub_214274320(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, char a9)
{
  if (a4 != 1)
  {
    sub_2141EF2B4(result, a2, a3, a4);
    return sub_214282CB0(a5, a6, a7, a8, a9);
  }
  return result;
}

uint64_t sub_214274380(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  if (a4 != 1)
  {
    sub_2141EF2B4(result, a2, a3, a4);
    return sub_214282C84(a5, a6, a7);
  }
  return result;
}

void type metadata accessor for XYRenderer.ResolvedKeyframe()
{
  JUMPOUT(0x2199CD874);
}

void sub_2142743D4(uint64_t a1)
{
  uint64_t *v1;

  sub_21426F460(a1, v1[2], v1[3], v1[4], v1[5], v1[6], v1[7]);
}

unint64_t sub_214274404()
{
  unint64_t result;
  uint64_t v1;

  result = qword_254D69D10;
  if (!qword_254D69D10)
  {
    v1 = sub_2141D7924(&qword_254D69D08);
    result = MEMORY[0x2199CD934](MEMORY[0x24BEE12C8], v1);
    atomic_store(result, (unint64_t *)&qword_254D69D10);
  }
  return result;
}

void sub_214274450()
{
  sub_21426F728();
}

void sub_21427448C()
{
  type metadata accessor for XYRenderer();
}

uint64_t sub_2142744E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);
  uint64_t TupleTypeMetadata2;

  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  return v2(v1, v0 + *(int *)(TupleTypeMetadata2 + 48));
}

uint64_t sub_214274540(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  if (a4 != 1)
  {
    sub_21422F7F0(result, a2, a3, a4);
    return sub_214274588(a5, a6, a7);
  }
  return result;
}

uint64_t sub_214274588(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if (a3 == 1 || a3 == 2)
    return swift_release();
  return result;
}

uint64_t sub_2142745A8(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned __int8 a7)
{
  if (a4 != 1)
  {
    sub_21422F7F0(result, a2, a3, a4);
    return sub_2142745F0(a5, a6, a7);
  }
  return result;
}

uint64_t sub_2142745F0(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 2u)
    return swift_release();
  return result;
}

uint64_t sub_21427460C(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 2u)
    return swift_retain();
  return result;
}

uint64_t sub_214274628(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if (a3 == 1 || a3 == 2)
    return swift_retain();
  return result;
}

uint64_t sub_214274648(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  if (a4 != 1)
  {
    sub_2141EF2B4(result, a2, a3, a4);
    return sub_214274628(a5, a6, a7);
  }
  return result;
}

uint64_t sub_214274690(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned __int8 a7)
{
  if (a4 != 1)
  {
    sub_2141EF2B4(result, a2, a3, a4);
    return sub_21427460C(a5, a6, a7);
  }
  return result;
}

uint64_t sub_2142746D8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;

  v3 = *a1 + 16;
  swift_beginAccess();
  return sub_2141E070C(v3, a2, &qword_254D69D00);
}

uint64_t sub_214274730@<X0>(uint64_t *a1@<X8>)
{
  return sub_214274788(MEMORY[0x24BEE13C8], (uint64_t)&protocol witness table for Double, MEMORY[0x24BEE13F8], a1);
}

uint64_t sub_21427475C@<X0>(uint64_t *a1@<X8>)
{
  return sub_214274788(MEMORY[0x24BEE0D00], (uint64_t)&protocol witness table for String, MEMORY[0x24BEE0D28], a1);
}

uint64_t sub_214274788@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t *a4@<X8>)
{
  uint64_t *v4;
  uint64_t result;
  uint64_t v7;

  result = sub_214372800(v4[9], v4[10], v4[2], a1, v4[5], v4[6], a2, a3);
  *a4 = result;
  a4[1] = v7;
  return result;
}

uint64_t sub_2142747DC(__int128 *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;

  return sub_214271534(a1, a2, a3, v3[6], v3[7], v3[2], v3[3], v3[4], v3[5]);
}

uint64_t sub_214274808()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_21427482C(char *a1, uint64_t a2, uint64_t a3)
{
  _OWORD *v3;
  char v4;
  uint64_t v5;
  __int128 v6;
  _OWORD v8[4];
  uint64_t v9;
  char v10;
  uint64_t v11;

  v4 = *a1;
  v5 = *((_QWORD *)a1 + 1);
  v6 = v3[2];
  v8[1] = v3[1];
  v8[2] = v6;
  v8[3] = v3[3];
  v9 = a2;
  v10 = v4;
  v11 = v5;
  return sub_21421FC18(a3, (void (*)(void))sub_214274890, (uint64_t)v8);
}

uint64_t sub_214274890()
{
  uint64_t v0;

  return sub_214271658(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_BYTE *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t sub_2142748C8()
{
  uint64_t *v0;

  return sub_2142715A0(v0[6], v0[7], v0[8], v0[9], v0[10], v0[2], v0[3], v0[4], v0[5]);
}

uint64_t sub_2142748FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned __int8 a12)
{
  uint64_t result;

  if (a12 != 255)
    return sub_2142637C0(a11, a12 & 1);
  return result;
}

uint64_t sub_214274918()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  void (*v8)(char *, uint64_t);
  uint64_t TupleTypeMetadata2;
  uint64_t v10;
  uint64_t v11;
  uint64_t TupleTypeMetadata3;

  v2 = v0[2];
  v1 = v0[3];
  v3 = v0[4];
  v4 = type metadata accessor for PlottableProjection(0, v2, v1, v3);
  v5 = *(unsigned __int8 *)(*(_QWORD *)(v4 - 8) + 80);
  v6 = (char *)v0 + ((v5 + 40) & ~v5);
  sub_2141ED0BC(*(_QWORD *)v6, *((_QWORD *)v6 + 1), v6[16]);
  swift_bridgeObjectRelease();
  v7 = &v6[*(int *)(v4 + 44)];
  type metadata accessor for PlottableProjection.Storage(0, v2, v1, v3);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v7, v1);
      break;
    case 1u:
      v8 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v1 - 8) + 8);
      v8(v7, v1);
      TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
      v8(&v7[*(int *)(TupleTypeMetadata2 + 48)], v1);
      break;
    case 2u:
      swift_release();
      break;
    case 3u:
      swift_release();
      swift_release();
      break;
    case 4u:
      swift_release();
      sub_2144258E0();
      v10 = sub_214423C48();
      v11 = sub_214423C54();
      TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(&v7[*(int *)(TupleTypeMetadata3 + 48)], v10);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(&v7[*(int *)(TupleTypeMetadata3 + 64)], v11);
      break;
    default:
      return swift_deallocObject();
  }
  return swift_deallocObject();
}

double sub_214274AEC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double result;

  v5 = v2[2];
  v6 = v2[3];
  v7 = v2[4];
  v8 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for PlottableProjection(0, v5, v6, v7) - 8) + 80);
  *(_QWORD *)&result = sub_2142528F4(a1, (uint64_t)v2 + ((v8 + 40) & ~v8), v5, v6, v7, a2).n128_u64[0];
  return result;
}

uint64_t sub_214274B60()
{
  return swift_allocateGenericValueMetadata();
}

void sub_214274B68()
{
  type metadata accessor for XYRenderer();
}

uint64_t *sub_214274C0C(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  _QWORD *v61;
  _QWORD *v62;
  int v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  _QWORD *v69;
  _QWORD *v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  unint64_t v76;
  _QWORD *v77;
  _QWORD *v78;
  int v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  unint64_t v85;
  _QWORD *v86;
  _QWORD *v87;
  int v88;
  uint64_t v89;
  void (*v90)(_QWORD *, _QWORD *, uint64_t);
  unint64_t v91;
  unint64_t v92;
  void (*v93)(unint64_t, unint64_t, uint64_t);
  uint64_t v94;
  char v95;
  void (*v96)(_QWORD *, _QWORD *, uint64_t);
  char v97;
  unint64_t v98;
  unint64_t v99;
  void (*v100)(unint64_t, unint64_t, uint64_t);
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  _QWORD *v106;
  _QWORD *v107;
  int v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  void (*v112)(unint64_t, unint64_t, uint64_t);
  void (*v113)(_QWORD *, _QWORD *, uint64_t);
  unint64_t v114;
  unint64_t v115;
  _OWORD *v116;
  _OWORD *v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  uint64_t v121;
  char v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  uint64_t v127;
  char v128;
  void (*v129)(_QWORD *, _QWORD *, uint64_t);
  unint64_t v130;
  unint64_t v131;
  void (*v132)(unint64_t, unint64_t, uint64_t);
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  unsigned int v136;
  __int128 v137;
  uint64_t v138;
  uint64_t v139;
  unsigned int v140;
  __int128 v141;
  uint64_t v142;
  uint64_t v143;
  void (*v144)(_QWORD *, _QWORD *, uint64_t);
  char v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t v148;
  void (*v149)(unint64_t, unint64_t, uint64_t);
  uint64_t v150;
  unint64_t v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  __int128 v155;
  uint64_t v156;
  uint64_t v157;
  char v158;
  _QWORD *v159;
  _QWORD *v160;
  int v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  char v166;
  _QWORD *v167;
  _QWORD *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  char v172;
  _QWORD *v173;
  _QWORD *v174;
  int v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  char v179;
  _QWORD *v180;
  _QWORD *v181;
  int v182;
  uint64_t v183;
  void (*v184)(_QWORD *, _QWORD *, uint64_t);
  char v185;
  unint64_t v186;
  unint64_t v187;
  void (*v188)(unint64_t, unint64_t, uint64_t);
  char v189;
  uint64_t v190;
  uint64_t v191;
  unint64_t v192;
  void (*v193)(unint64_t, unint64_t, uint64_t);
  unint64_t v194;
  unint64_t v195;
  void (*v196)(unint64_t, unint64_t, uint64_t);
  uint64_t v197;
  unint64_t v198;
  unint64_t v199;
  uint64_t v200;
  uint64_t v201;
  char v202;
  _QWORD *v203;
  _QWORD *v204;
  int v205;
  unint64_t v206;
  uint64_t v207;
  unint64_t v208;
  unint64_t v209;
  void (*v210)(unint64_t, unint64_t, uint64_t);
  char v211;
  void (*v212)(_QWORD *, _QWORD *, uint64_t);
  unint64_t v213;
  unint64_t v214;
  _OWORD *v215;
  _OWORD *v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  uint64_t v220;
  char v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  uint64_t v226;
  char v227;
  void (*v228)(_QWORD *, _QWORD *, uint64_t);
  char v229;
  unint64_t v230;
  unint64_t v231;
  void (*v232)(unint64_t, unint64_t, uint64_t);
  unint64_t v233;
  unint64_t v234;
  unsigned int v235;
  __int128 v236;
  uint64_t v237;
  uint64_t v238;
  unsigned int v239;
  __int128 v240;
  uint64_t v241;
  uint64_t v242;
  void (*v243)(_QWORD *, _QWORD *, uint64_t);
  char v244;
  unint64_t v245;
  unint64_t v246;
  void (*v247)(unint64_t, unint64_t, uint64_t);
  _QWORD *v248;
  _QWORD *v249;
  _QWORD *v250;
  _QWORD *v251;
  _QWORD *v252;
  _QWORD *v253;
  unint64_t v254;
  unint64_t *v255;
  unint64_t v256;
  uint64_t *result;
  unint64_t v258;
  unint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  unint64_t v270;
  unint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  unint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  unint64_t v295;
  unint64_t v296;
  unint64_t v297;

  v290 = a3[2];
  v4 = *(_QWORD *)(v290 - 8);
  v292 = *(_QWORD *)(v4 + 64);
  v283 = a3[3];
  v5 = *(_QWORD *)(v283 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = v6;
  v286 = sub_214423C48();
  v8 = *(_QWORD *)(v286 - 8);
  v9 = *(_DWORD *)(v8 + 80);
  v10 = sub_214423C54();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_DWORD *)(v11 + 80);
  v13 = v12 | v9 | v6;
  v289 = v13 + 32;
  v282 = v5;
  v14 = *(_QWORD *)(v5 + 64);
  v15 = v14 + v6;
  if (((v14 + v7) & ~v7) + v14 > v14)
    v14 += (v14 + v6) & ~(unint64_t)v6;
  v284 = v9 + 8;
  v285 = v8;
  v16 = *(_QWORD *)(v8 + 64) + v12;
  v17 = ((v16 + (v284 & ~(unint64_t)v9)) & ~v12) + *(_QWORD *)(v11 + 64);
  if (v14 <= v17)
    v14 = ((v16 + ((v9 + 8) & ~(unint64_t)v9)) & ~v12)
        + *(_QWORD *)(v11 + 64);
  if (v14 <= 0x10)
    v18 = 16;
  else
    v18 = v14;
  v19 = v18 + ((v13 + 32) & ~(v13 | 7));
  v294 = v13 | 7;
  v20 = ((v19 + 1 + (v13 | 7)) & ~(v13 | 7)) + v19 + 1;
  v287 = v19 + 1;
  if (v19 + 1 > v20)
    v20 = v19 + 1;
  v21 = (v19 + 8) & 0xFFFFFFFFFFFFFFF8;
  if (v20 <= v21 + 113)
    v20 = v21 + 113;
  v22 = v21 + 49;
  if (v20 > v22)
    v22 = v20;
  if (v22 <= 0x19)
    v23 = 25;
  else
    v23 = v22;
  v24 = a3[4];
  v25 = *(_QWORD *)(v24 - 8);
  v26 = *(_DWORD *)(v25 + 80);
  v27 = v12 | v9 | v26;
  v28 = v27 | 7;
  v29 = v27 + 32;
  v30 = (v27 + 32) & ~(v27 | 7);
  v31 = *(_QWORD *)(v25 + 64);
  v32 = v31 + v26;
  if (((v31 + v26) & ~v26) + v31 > v31)
    v31 += (v31 + v26) & ~v26;
  if (v31 > v17)
    v17 = v31;
  if (v17 <= 0x10)
    v17 = 16;
  v288 = v17;
  v33 = v17 + v30;
  v34 = v33 + 1 + v28;
  if (v33 + 1 > (v34 & ~v28) + v33 + 1)
    v35 = v33 + 1;
  else
    v35 = (v34 & ~v28) + v33 + 1;
  v36 = v33 + 8;
  v37 = (v33 + 8) & 0xFFFFFFFFFFFFFFF8;
  if (v35 <= v37 + 113)
    v35 = v37 + 113;
  v38 = v37 + 49;
  if (v35 > v38)
    v38 = v35;
  if (v38 <= 0x19)
    v39 = 25;
  else
    v39 = v38;
  v40 = v13 | *(_DWORD *)(v4 + 80) & 0xF8 | v26 | 7;
  if (v40 != 7
    || ((v9 | *(_DWORD *)(v11 + 80) | v6 | *(_DWORD *)(v25 + 80) | *(_DWORD *)(v4 + 80)) & 0x100000) != 0
    || (v41 = v294 + v292,
        v42 = (v39 + ((v23 + v28 + 1 + ((v294 + v292) & ~v294)) & ~v28) + 8) & 0xFFFFFFFFFFFFFFF8,
        ((((((((v42 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
      + 16 > 0x18))
  {
    v48 = *a2;
    *a1 = *a2;
    v49 = (uint64_t *)(v48 + ((v40 + 16) & ~v40));
    swift_retain();
  }
  else
  {
    v267 = v32;
    v275 = v10;
    v276 = v18;
    v280 = v24;
    v281 = v23 + v28 + 1;
    v268 = v34;
    v278 = v29;
    v279 = *(_QWORD *)(v24 - 8);
    v270 = v36;
    v273 = v16;
    v274 = *(_QWORD *)(v10 - 8);
    v43 = v290;
    v291 = v23;
    v293 = v39;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v4 + 16))(a1, a2, v43);
    v44 = ((unint64_t)a1 + v41) & ~v294;
    v45 = (char *)a2 + v41;
    v277 = ~v294;
    v46 = ((unint64_t)a2 + v41) & ~v294;
    v50 = v293;
    v271 = ~(unint64_t)v9;
    v272 = ~v12;
    v51 = ~v28;
    v269 = ~v26;
    v52 = v293 + 1;
    v53 = v42 + 8;
    switch(*(_BYTE *)(v46 + v291))
    {
      case 0:
        v54 = *(_QWORD *)v46;
        *(_BYTE *)((((unint64_t)a1 + v41) & ~v294) + 8) = *(_BYTE *)((((unint64_t)a2 + v41) & ~v294) + 8);
        *(_QWORD *)v44 = v54;
        *(_BYTE *)(v44 + v291) = 0;
        v55 = v281;
        break;
      case 1:
        v56 = *(_OWORD *)v46;
        *(_OWORD *)((((unint64_t)a1 + v41) & ~v294) + 9) = *(_OWORD *)((((unint64_t)a2 + v41) & ~v294) + 9);
        *(_OWORD *)v44 = v56;
        *(_BYTE *)(v44 + v291) = 1;
        v55 = v281;
        break;
      case 2:
        *(_QWORD *)v44 = *(_QWORD *)v46;
        *(_BYTE *)(v44 + v291) = 2;
        goto LABEL_47;
      case 3:
        *(_QWORD *)v44 = *(_QWORD *)v46;
        *(_QWORD *)((((unint64_t)a1 + v41) & ~v294) + 8) = *(_QWORD *)((((unint64_t)a2 + v41) & ~v294) + 8);
        *(_BYTE *)(v44 + v291) = 3;
        swift_retain();
LABEL_47:
        swift_retain();
        v50 = v293;
        v55 = v281;
        break;
      case 4:
        v57 = v53;
        v260 = ~v7;
        v58 = *(_QWORD *)v46;
        v59 = *(_QWORD *)((((unint64_t)a2 + v41) & ~v294) + 8);
        v60 = *(_BYTE *)((((unint64_t)a2 + v41) & ~v294) + 0x10);
        sub_2141DD130(*(_QWORD *)(((unint64_t)a2 + v41) & ~v294), v59, v60);
        *(_QWORD *)v44 = v58;
        *(_QWORD *)((((unint64_t)a1 + v41) & ~v294) + 8) = v59;
        *(_BYTE *)((((unint64_t)a1 + v41) & ~v294) + 0x10) = v60;
        *(_QWORD *)((((unint64_t)a1 + v41) & ~v294) + 0x18) = *(_QWORD *)((((unint64_t)a2 + v41) & ~v294)
                                                                               + 0x18);
        v259 = ((unint64_t)a1 + v41) & ~v294;
        v61 = (_QWORD *)((v289 + v44) & v277);
        v62 = (_QWORD *)((v289 + v46) & v277);
        v63 = *((unsigned __int8 *)v62 + v276);
        swift_bridgeObjectRetain();
        switch(v63)
        {
          case 0:
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v282 + 16))(v61, v62, v283);
            *((_BYTE *)v61 + v276) = 0;
            break;
          case 1:
            v90 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v282 + 16);
            v90(v61, v62, v283);
            v90((_QWORD *)(((unint64_t)v61 + v15) & v260), (_QWORD *)(((unint64_t)v62 + v15) & v260), v283);
            *((_BYTE *)v61 + v276) = 1;
            break;
          case 2:
            *v61 = *v62;
            *((_BYTE *)v61 + v276) = 2;
            swift_retain();
            break;
          case 3:
            *v61 = *v62;
            v61[1] = *(_QWORD *)(((v289 + v46) & v277) + 8);
            *((_BYTE *)v61 + v276) = 3;
            swift_retain();
            swift_retain();
            break;
          case 4:
            *v61 = *v62;
            v91 = ((unint64_t)v61 + v284) & v271;
            v92 = ((unint64_t)v62 + v284) & v271;
            v93 = *(void (**)(unint64_t, unint64_t, uint64_t))(v285 + 16);
            swift_retain();
            v93(v91, v92, v286);
            v94 = v273 + v91;
            v46 = ((unint64_t)a2 + v41) & ~v294;
            (*(void (**)(uint64_t, unint64_t, uint64_t))(v274 + 16))(v94 & v272, (v273 + v92) & v272, v275);
            *((_BYTE *)v61 + v276) = 4;
            break;
          default:
            if (v276 <= 3)
              v64 = v276;
            else
              v64 = 4;
            __asm { BR              X11 }
            return result;
        }
        v95 = 4;
        goto LABEL_119;
      case 5:
        v57 = v53;
        v65 = (unint64_t)a1 + v41;
        v258 = (unint64_t)v45;
        v261 = ~v7;
        v264 = v51;
        v66 = *(_QWORD *)v46;
        v67 = *(_QWORD *)(v46 + 8);
        v68 = *(_BYTE *)(v46 + 16);
        sub_2141DD130(*(_QWORD *)v46, v67, v68);
        *(_QWORD *)v44 = v66;
        *(_QWORD *)(v44 + 8) = v67;
        *(_BYTE *)(v44 + 16) = v68;
        *(_QWORD *)(v44 + 24) = *(_QWORD *)(v46 + 24);
        v259 = v44;
        v69 = (_QWORD *)((v289 + v44) & v277);
        v70 = (_QWORD *)((v289 + v46) & v277);
        v71 = *((unsigned __int8 *)v70 + v276);
        swift_bridgeObjectRetain();
        switch(v71)
        {
          case 0:
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v282 + 16))(v69, v70, v283);
            *((_BYTE *)v69 + v276) = 0;
            goto LABEL_82;
          case 1:
            v96 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v282 + 16);
            v96(v69, v70, v283);
            v96((_QWORD *)(((unint64_t)v69 + v15) & v261), (_QWORD *)(((unint64_t)v70 + v15) & v261), v283);
            v97 = 1;
            goto LABEL_81;
          case 2:
            *v69 = *v70;
            *((_BYTE *)v69 + v276) = 2;
            swift_retain();
            goto LABEL_82;
          case 3:
            *v69 = *v70;
            v69[1] = *(_QWORD *)(((v289 + v46) & v277) + 8);
            *((_BYTE *)v69 + v276) = 3;
            swift_retain();
            swift_retain();
            goto LABEL_82;
          case 4:
            *v69 = *v70;
            v98 = ((unint64_t)v69 + v284) & v271;
            v99 = ((unint64_t)v70 + v284) & v271;
            v100 = *(void (**)(unint64_t, unint64_t, uint64_t))(v285 + 16);
            swift_retain();
            v100(v98, v99, v286);
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v274 + 16))((v273 + v98) & v272, (v273 + v99) & v272, v275);
            v97 = 4;
LABEL_81:
            *((_BYTE *)v69 + v276) = v97;
LABEL_82:
            v101 = ((v65 | v294) + v287) & v277;
            v102 = ((v258 | v294) + v287) & v277;
            v103 = *(_QWORD *)v102;
            v104 = *(_QWORD *)(v102 + 8);
            v105 = *(_BYTE *)(v102 + 0x10);
            sub_2141DD130(*(_QWORD *)v102, v104, v105);
            *(_QWORD *)v101 = v103;
            *(_QWORD *)(v101 + 8) = v104;
            *(_BYTE *)(v101 + 16) = v105;
            *(_QWORD *)(v101 + 24) = *(_QWORD *)(v102 + 0x18);
            v106 = (_QWORD *)((v289 + v101) & v277);
            v107 = (_QWORD *)((v289 + v102) & v277);
            v108 = *((unsigned __int8 *)v107 + v276);
            swift_bridgeObjectRetain();
            v51 = v264;
            switch(v108)
            {
              case 0:
                (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v282 + 16))(v106, v107, v283);
                *((_BYTE *)v106 + v276) = 0;
                break;
              case 1:
                v144 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v282 + 16);
                v144(v106, v107, v283);
                v144((_QWORD *)(((unint64_t)v106 + v15) & v261), (_QWORD *)(((unint64_t)v107 + v15) & v261), v283);
                v51 = v264;
                v145 = 1;
                goto LABEL_117;
              case 2:
                *v106 = *v107;
                *((_BYTE *)v106 + v276) = 2;
                goto LABEL_115;
              case 3:
                *v106 = *v107;
                v106[1] = v107[1];
                *((_BYTE *)v106 + v276) = 3;
                swift_retain();
LABEL_115:
                swift_retain();
                break;
              case 4:
                *v106 = *v107;
                v146 = v46;
                v147 = ((unint64_t)v106 + v284) & v271;
                v148 = ((unint64_t)v107 + v284) & v271;
                v149 = *(void (**)(unint64_t, unint64_t, uint64_t))(v285 + 16);
                swift_retain();
                v149(v147, v148, v286);
                v51 = v264;
                v150 = v273 + v147;
                v46 = v146;
                (*(void (**)(uint64_t, unint64_t, uint64_t))(v274 + 16))(v150 & v272, (v273 + v148) & v272, v275);
                v145 = 4;
LABEL_117:
                *((_BYTE *)v106 + v276) = v145;
                break;
              default:
                if (v276 <= 3)
                  v109 = v276;
                else
                  v109 = 4;
                __asm { BR              X11 }
                return result;
            }
            v95 = 5;
            break;
          default:
            if (v276 <= 3)
              v72 = v276;
            else
              v72 = 4;
            __asm { BR              X11 }
            return result;
        }
LABEL_119:
        v50 = v293;
        v44 = v259;
        *(_BYTE *)(v259 + v291) = v95;
        v55 = v281;
        goto LABEL_120;
      case 6:
        v57 = v53;
        v262 = ~v7;
        v265 = v51;
        v73 = *(_QWORD *)v46;
        v74 = *(_QWORD *)((((unint64_t)a2 + v41) & ~v294) + 8);
        v75 = *(_BYTE *)((((unint64_t)a2 + v41) & ~v294) + 0x10);
        sub_2141DD130(*(_QWORD *)(((unint64_t)a2 + v41) & ~v294), v74, v75);
        *(_QWORD *)v44 = v73;
        *(_QWORD *)((((unint64_t)a1 + v41) & ~v294) + 8) = v74;
        *(_BYTE *)((((unint64_t)a1 + v41) & ~v294) + 0x10) = v75;
        *(_QWORD *)((((unint64_t)a1 + v41) & ~v294) + 0x18) = *(_QWORD *)((((unint64_t)a2 + v41) & ~v294)
                                                                               + 0x18);
        v76 = ((unint64_t)a1 + v41) & ~v294;
        v77 = (_QWORD *)((v289 + v44) & v277);
        v78 = (_QWORD *)((v289 + v46) & v277);
        v79 = *((unsigned __int8 *)v78 + v276);
        swift_bridgeObjectRetain();
        switch(v79)
        {
          case 0:
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v282 + 16))(v77, v78, v283);
            *((_BYTE *)v77 + v276) = 0;
            break;
          case 1:
            v113 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v282 + 16);
            v113(v77, v78, v283);
            v113((_QWORD *)(((unint64_t)v77 + v15) & v262), (_QWORD *)(((unint64_t)v78 + v15) & v262), v283);
            *((_BYTE *)v77 + v276) = 1;
            break;
          case 2:
            *v77 = *v78;
            *((_BYTE *)v77 + v276) = 2;
            swift_retain();
            break;
          case 3:
            *v77 = *v78;
            v77[1] = *(_QWORD *)(((v289 + v46) & v277) + 8);
            *((_BYTE *)v77 + v276) = 3;
            swift_retain();
            swift_retain();
            break;
          case 4:
            *v77 = *v78;
            v110 = ((unint64_t)v77 + v284) & v271;
            v111 = ((unint64_t)v78 + v284) & v271;
            v112 = *(void (**)(unint64_t, unint64_t, uint64_t))(v285 + 16);
            swift_retain();
            v112(v110, v111, v286);
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v274 + 16))((v273 + v110) & v272, (v273 + v111) & v272, v275);
            *((_BYTE *)v77 + v276) = 4;
            break;
          default:
            if (v276 <= 3)
              v80 = v276;
            else
              v80 = 4;
            __asm { BR              X11 }
            return result;
        }
        v114 = ((v76 | 7) + v287) & 0xFFFFFFFFFFFFFFF8;
        v115 = ((v46 | 7) + v287) & 0xFFFFFFFFFFFFFFF8;
        *(_BYTE *)v114 = *(_BYTE *)v115;
        v116 = (_OWORD *)(v114 + 8);
        v117 = (_OWORD *)(v115 + 8);
        if (*(unsigned __int8 *)(v115 + 96) == 255)
        {
          v123 = *(_OWORD *)(v115 + 24);
          *v116 = *v117;
          *(_OWORD *)(v114 + 24) = v123;
          v124 = *(_OWORD *)(v115 + 40);
          v125 = *(_OWORD *)(v115 + 56);
          v126 = *(_OWORD *)(v115 + 72);
          *(_OWORD *)(v114 + 81) = *(_OWORD *)(v115 + 81);
          *(_OWORD *)(v114 + 56) = v125;
          *(_OWORD *)(v114 + 72) = v126;
          *(_OWORD *)(v114 + 40) = v124;
        }
        else
        {
          *v116 = *v117;
          v118 = *(_OWORD *)(v115 + 24);
          v119 = *(_OWORD *)(v115 + 40);
          v120 = *(_OWORD *)(v115 + 72);
          *(_OWORD *)(v114 + 56) = *(_OWORD *)(v115 + 56);
          *(_OWORD *)(v114 + 72) = v120;
          *(_OWORD *)(v114 + 24) = v118;
          *(_OWORD *)(v114 + 40) = v119;
          v121 = *(_QWORD *)(v115 + 88);
          v122 = *(_BYTE *)(v115 + 96);
          sub_2142625F8(v121, v122);
          *(_QWORD *)(v114 + 88) = v121;
          *(_BYTE *)(v114 + 96) = v122;
        }
        v127 = *(_QWORD *)(v115 + 104);
        v128 = *(_BYTE *)(v115 + 112);
        sub_2142625F8(v127, v128);
        *(_QWORD *)(v114 + 104) = v127;
        *(_BYTE *)(v114 + 112) = v128;
        v50 = v293;
        v44 = ((unint64_t)a1 + v41) & ~v294;
        *(_BYTE *)(v76 + v291) = 6;
        v51 = v265;
        v55 = v281;
        v46 = ((unint64_t)a2 + v41) & ~v294;
LABEL_120:
        v53 = v57;
        break;
      case 7:
        v81 = v53;
        v263 = ~v7;
        v266 = v51;
        v82 = *(_QWORD *)v46;
        v83 = *(_QWORD *)((((unint64_t)a2 + v41) & ~v294) + 8);
        v84 = *(_BYTE *)((((unint64_t)a2 + v41) & ~v294) + 0x10);
        sub_2141DD130(*(_QWORD *)(((unint64_t)a2 + v41) & ~v294), v83, v84);
        *(_QWORD *)v44 = v82;
        *(_QWORD *)((((unint64_t)a1 + v41) & ~v294) + 8) = v83;
        *(_BYTE *)((((unint64_t)a1 + v41) & ~v294) + 0x10) = v84;
        *(_QWORD *)((((unint64_t)a1 + v41) & ~v294) + 0x18) = *(_QWORD *)((((unint64_t)a2 + v41) & ~v294)
                                                                               + 0x18);
        v85 = ((unint64_t)a1 + v41) & ~v294;
        v86 = (_QWORD *)((v289 + v44) & v277);
        v87 = (_QWORD *)((v289 + v46) & v277);
        v88 = *((unsigned __int8 *)v87 + v276);
        swift_bridgeObjectRetain();
        switch(v88)
        {
          case 0:
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v282 + 16))(v86, v87, v283);
            *((_BYTE *)v86 + v276) = 0;
            break;
          case 1:
            v129 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v282 + 16);
            v129(v86, v87, v283);
            v129((_QWORD *)(((unint64_t)v86 + v15) & v263), (_QWORD *)(((unint64_t)v87 + v15) & v263), v283);
            *((_BYTE *)v86 + v276) = 1;
            break;
          case 2:
            *v86 = *v87;
            *((_BYTE *)v86 + v276) = 2;
            swift_retain();
            break;
          case 3:
            *v86 = *v87;
            v86[1] = *(_QWORD *)(((v289 + v46) & v277) + 8);
            *((_BYTE *)v86 + v276) = 3;
            swift_retain();
            swift_retain();
            break;
          case 4:
            *v86 = *v87;
            v130 = ((unint64_t)v86 + v284) & v271;
            v131 = ((unint64_t)v87 + v284) & v271;
            v132 = *(void (**)(unint64_t, unint64_t, uint64_t))(v285 + 16);
            swift_retain();
            v132(v130, v131, v286);
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v274 + 16))((v273 + v130) & v272, (v273 + v131) & v272, v275);
            *((_BYTE *)v86 + v276) = 4;
            break;
          default:
            if (v276 <= 3)
              v89 = v276;
            else
              v89 = 4;
            __asm { BR              X11 }
            return result;
        }
        v133 = ((v85 | 7) + v287) & 0xFFFFFFFFFFFFFFF8;
        v134 = ((unint64_t)a2 + v41) & ~v294;
        v135 = ((v46 | 7) + v287) & 0xFFFFFFFFFFFFFFF8;
        *(_BYTE *)v133 = *(_BYTE *)v135;
        *(_BYTE *)(v133 + 1) = *(_BYTE *)(v135 + 1);
        *(_BYTE *)(v133 + 2) = *(_BYTE *)(v135 + 2);
        v136 = *(unsigned __int8 *)(v135 + 24);
        if (v136 <= 0xFB)
        {
          v138 = *(_QWORD *)(v135 + 8);
          v139 = *(_QWORD *)(v135 + 16);
          sub_2141DD140(v138, v139, *(_BYTE *)(v135 + 24));
          *(_QWORD *)(v133 + 8) = v138;
          *(_QWORD *)(v133 + 16) = v139;
          *(_BYTE *)(v133 + 24) = v136;
        }
        else
        {
          v137 = *(_OWORD *)(v135 + 8);
          *(_BYTE *)(v133 + 24) = *(_BYTE *)(v135 + 24);
          *(_OWORD *)(v133 + 8) = v137;
        }
        v140 = *(unsigned __int8 *)(v135 + 48);
        if (v140 <= 0xFB)
        {
          v142 = *(_QWORD *)(v135 + 32);
          v143 = *(_QWORD *)(v135 + 40);
          sub_2141DD140(v142, v143, *(_BYTE *)(v135 + 48));
          *(_QWORD *)(v133 + 32) = v142;
          *(_QWORD *)(v133 + 40) = v143;
          *(_BYTE *)(v133 + 48) = v140;
        }
        else
        {
          v141 = *(_OWORD *)(v135 + 32);
          *(_BYTE *)(v133 + 48) = *(_BYTE *)(v135 + 48);
          *(_OWORD *)(v133 + 32) = v141;
        }
        v50 = v293;
        v55 = v281;
        v44 = v85;
        v46 = v134;
        v53 = v81;
        *(_BYTE *)(v85 + v291) = 7;
        v51 = v266;
        break;
      default:
        if (v291 <= 3)
          v47 = v291;
        else
          v47 = 4;
        __asm { BR              X12 }
        return result;
    }
    v151 = (v55 + v44) & v51;
    v152 = (v55 + v46) & v51;
    switch(*(_BYTE *)(v152 + v50))
    {
      case 0:
        v154 = *(_QWORD *)v152;
        *(_BYTE *)(((v55 + v44) & v51) + 8) = *(_BYTE *)(((v55 + v46) & v51) + 8);
        *(_QWORD *)v151 = v154;
        *(_BYTE *)(v151 + v50) = 0;
        goto LABEL_205;
      case 1:
        v155 = *(_OWORD *)v152;
        *(_OWORD *)(((v55 + v44) & v51) + 9) = *(_OWORD *)(((v55 + v46) & v51) + 9);
        *(_OWORD *)v151 = v155;
        *(_BYTE *)(v151 + v50) = 1;
        goto LABEL_205;
      case 2:
        *(_QWORD *)v151 = *(_QWORD *)v152;
        *(_BYTE *)(v151 + v50) = 2;
        swift_retain();
        goto LABEL_205;
      case 3:
        *(_QWORD *)v151 = *(_QWORD *)v152;
        *(_QWORD *)(((v55 + v44) & v51) + 8) = *(_QWORD *)(((v55 + v46) & v51) + 8);
        *(_BYTE *)(v151 + v50) = 3;
        swift_retain();
        swift_retain();
        goto LABEL_205;
      case 4:
        v295 = v53;
        v156 = *(_QWORD *)v152;
        v157 = *(_QWORD *)(v152 + 8);
        v158 = *(_BYTE *)(v152 + 16);
        sub_2141DD130(*(_QWORD *)v152, v157, v158);
        *(_QWORD *)v151 = v156;
        *(_QWORD *)(v151 + 8) = v157;
        *(_BYTE *)(v151 + 16) = v158;
        *(_QWORD *)(v151 + 24) = *(_QWORD *)(v152 + 24);
        v159 = (_QWORD *)((v278 + v151) & v51);
        v160 = (_QWORD *)((v278 + v152) & v51);
        v161 = *((unsigned __int8 *)v160 + v288);
        swift_bridgeObjectRetain();
        switch(v161)
        {
          case 0:
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v279 + 16))(v159, v160, v280);
            *((_BYTE *)v159 + v288) = 0;
            goto LABEL_158;
          case 1:
            v184 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v279 + 16);
            v184(v159, v160, v280);
            v184((_QWORD *)(((unint64_t)v159 + v267) & v269), (_QWORD *)(((unint64_t)v160 + v267) & v269), v280);
            v185 = 1;
            goto LABEL_157;
          case 2:
            *v159 = *v160;
            *((_BYTE *)v159 + v288) = 2;
            swift_retain();
            goto LABEL_158;
          case 3:
            *v159 = *v160;
            *(_QWORD *)(((v278 + v151) & v51) + 8) = *(_QWORD *)(((v278 + v152) & v51) + 8);
            *((_BYTE *)v159 + v288) = 3;
            swift_retain();
            swift_retain();
            goto LABEL_158;
          case 4:
            *v159 = *v160;
            v186 = ((unint64_t)v159 + v284) & v271;
            v187 = ((unint64_t)v160 + v284) & v271;
            v188 = *(void (**)(unint64_t, unint64_t, uint64_t))(v285 + 16);
            swift_retain();
            v188(v186, v187, v286);
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v274 + 16))((v273 + v186) & v272, (v273 + v187) & v272, v275);
            v185 = 4;
LABEL_157:
            *((_BYTE *)v159 + v288) = v185;
LABEL_158:
            v189 = 4;
            v190 = v293;
            break;
          default:
            if (v288 <= 3)
              v162 = v288;
            else
              v162 = 4;
            __asm { BR              X11 }
            return result;
        }
        goto LABEL_196;
      case 5:
        v163 = v53;
        v164 = *(_QWORD *)v152;
        v165 = *(_QWORD *)(v152 + 8);
        v166 = *(_BYTE *)(v152 + 16);
        sub_2141DD130(*(_QWORD *)v152, v165, v166);
        *(_QWORD *)v151 = v164;
        *(_QWORD *)(v151 + 8) = v165;
        *(_BYTE *)(v151 + 16) = v166;
        *(_QWORD *)(v151 + 24) = *(_QWORD *)(v152 + 24);
        v167 = (_QWORD *)((v278 + v151) & v51);
        v168 = (_QWORD *)((v278 + v152) & v51);
        swift_bridgeObjectRetain();
        v297 = v163;
        v191 = v51;
        switch((int)v51)
        {
          case 0:
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v279 + 16))(v167, v168, v280);
            *((_BYTE *)v167 + v288) = 0;
            v192 = v288;
            break;
          case 1:
            v193 = *(void (**)(unint64_t, unint64_t, uint64_t))(v279 + 16);
            ((void (*)(_QWORD *, _QWORD *))v193)(v167, v168);
            v193(((unint64_t)v167 + v267) & v269, ((unint64_t)v168 + v267) & v269, v280);
            v191 = v51;
            *((_BYTE *)v167 + v288) = 1;
            v192 = v288;
            break;
          case 2:
            *v167 = *v168;
            *((_BYTE *)v167 + v288) = 2;
            goto LABEL_164;
          case 3:
            *v167 = *v168;
            *(_QWORD *)(((v278 + v151) & v51) + 8) = *(_QWORD *)(((v278 + v152) & v51) + 8);
            *((_BYTE *)v167 + v288) = 3;
            swift_retain();
LABEL_164:
            swift_retain();
            v192 = v288;
            break;
          case 4:
            *v167 = *v168;
            v192 = v288;
            v194 = ((unint64_t)v167 + v284) & v271;
            v195 = ((unint64_t)v168 + v284) & v271;
            v196 = *(void (**)(unint64_t, unint64_t, uint64_t))(v285 + 16);
            swift_retain();
            v196(v194, v195, v286);
            v191 = v51;
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v274 + 16))((v273 + v194) & v272, (v273 + v195) & v272, v275);
            *((_BYTE *)v167 + v288) = 4;
            break;
          default:
            if (v288 <= 3)
              v169 = v288;
            else
              v169 = 4;
            __asm { BR              X11 }
            return result;
        }
        v197 = v191;
        v198 = (v268 + v151) & v191;
        v199 = (v268 + v152) & v197;
        v200 = *(_QWORD *)v199;
        v201 = *(_QWORD *)(v199 + 8);
        v202 = *(_BYTE *)(v199 + 0x10);
        sub_2141DD130(*(_QWORD *)v199, v201, v202);
        *(_QWORD *)v198 = v200;
        *(_QWORD *)(v198 + 8) = v201;
        *(_BYTE *)(v198 + 16) = v202;
        *(_QWORD *)(v198 + 24) = *(_QWORD *)(v199 + 0x18);
        v203 = (_QWORD *)((v278 + v198) & v197);
        v204 = (_QWORD *)((v278 + v199) & v197);
        v205 = *((unsigned __int8 *)v204 + v192);
        swift_bridgeObjectRetain();
        v206 = v192;
        v52 = v293 + 1;
        switch(v205)
        {
          case 0:
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v279 + 16))(v203, v204, v280);
            *((_BYTE *)v203 + v192) = 0;
            goto LABEL_204;
          case 1:
            v243 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v279 + 16);
            v243(v203, v204, v280);
            v243((_QWORD *)(((unint64_t)v203 + v267) & v269), (_QWORD *)(((unint64_t)v204 + v267) & v269), v280);
            v244 = 1;
            goto LABEL_203;
          case 2:
            *v203 = *v204;
            *((_BYTE *)v203 + v192) = 2;
            swift_retain();
            goto LABEL_204;
          case 3:
            *v203 = *v204;
            v203[1] = v204[1];
            *((_BYTE *)v203 + v192) = 3;
            swift_retain();
            swift_retain();
            goto LABEL_204;
          case 4:
            *v203 = *v204;
            v245 = ((unint64_t)v203 + v284) & v271;
            v246 = ((unint64_t)v204 + v284) & v271;
            v247 = *(void (**)(unint64_t, unint64_t, uint64_t))(v285 + 16);
            swift_retain();
            v247(v245, v246, v286);
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v274 + 16))((v273 + v245) & v272, (v273 + v246) & v272, v275);
            v244 = 4;
LABEL_203:
            *((_BYTE *)v203 + v206) = v244;
LABEL_204:
            v53 = v297;
            *(_BYTE *)(v151 + v293) = 5;
            break;
          default:
            if (v192 <= 3)
              v207 = v192;
            else
              v207 = 4;
            __asm { BR              X11 }
            return result;
        }
        goto LABEL_205;
      case 6:
        v296 = v53;
        v170 = *(_QWORD *)v152;
        v171 = *(_QWORD *)(v152 + 8);
        v172 = *(_BYTE *)(v152 + 16);
        sub_2141DD130(*(_QWORD *)v152, v171, v172);
        *(_QWORD *)v151 = v170;
        *(_QWORD *)(v151 + 8) = v171;
        *(_BYTE *)(v151 + 16) = v172;
        *(_QWORD *)(v151 + 24) = *(_QWORD *)(v152 + 24);
        v173 = (_QWORD *)((v278 + v151) & v51);
        v174 = (_QWORD *)((v278 + v152) & v51);
        v175 = *((unsigned __int8 *)v174 + v288);
        swift_bridgeObjectRetain();
        switch(v175)
        {
          case 0:
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v279 + 16))(v173, v174, v280);
            *((_BYTE *)v173 + v288) = 0;
            goto LABEL_178;
          case 1:
            v212 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v279 + 16);
            v212(v173, v174, v280);
            v212((_QWORD *)(((unint64_t)v173 + v267) & v269), (_QWORD *)(((unint64_t)v174 + v267) & v269), v280);
            v211 = 1;
            goto LABEL_177;
          case 2:
            *v173 = *v174;
            *((_BYTE *)v173 + v288) = 2;
            swift_retain();
            goto LABEL_178;
          case 3:
            *v173 = *v174;
            *(_QWORD *)(((v278 + v151) & v51) + 8) = *(_QWORD *)(((v278 + v152) & v51) + 8);
            *((_BYTE *)v173 + v288) = 3;
            swift_retain();
            swift_retain();
            goto LABEL_178;
          case 4:
            *v173 = *v174;
            v208 = ((unint64_t)v173 + v284) & v271;
            v209 = ((unint64_t)v174 + v284) & v271;
            v210 = *(void (**)(unint64_t, unint64_t, uint64_t))(v285 + 16);
            swift_retain();
            v210(v208, v209, v286);
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v274 + 16))((v273 + v208) & v272, (v273 + v209) & v272, v275);
            v211 = 4;
LABEL_177:
            *((_BYTE *)v173 + v288) = v211;
LABEL_178:
            v53 = v296;
            v213 = (v270 + v151) & 0xFFFFFFFFFFFFFFF8;
            v214 = (v270 + v152) & 0xFFFFFFFFFFFFFFF8;
            *(_BYTE *)v213 = *(_BYTE *)v214;
            v215 = (_OWORD *)(v213 + 8);
            v216 = (_OWORD *)(v214 + 8);
            if (*(unsigned __int8 *)(v214 + 96) == 255)
            {
              v222 = *(_OWORD *)(v214 + 24);
              *v215 = *v216;
              *(_OWORD *)(v213 + 24) = v222;
              v223 = *(_OWORD *)(v214 + 40);
              v224 = *(_OWORD *)(v214 + 56);
              v225 = *(_OWORD *)(v214 + 72);
              *(_OWORD *)(v213 + 81) = *(_OWORD *)(v214 + 81);
              *(_OWORD *)(v213 + 56) = v224;
              *(_OWORD *)(v213 + 72) = v225;
              *(_OWORD *)(v213 + 40) = v223;
            }
            else
            {
              *v215 = *v216;
              v217 = *(_OWORD *)(v214 + 24);
              v218 = *(_OWORD *)(v214 + 40);
              v219 = *(_OWORD *)(v214 + 72);
              *(_OWORD *)(v213 + 56) = *(_OWORD *)(v214 + 56);
              *(_OWORD *)(v213 + 72) = v219;
              *(_OWORD *)(v213 + 24) = v217;
              *(_OWORD *)(v213 + 40) = v218;
              v220 = *(_QWORD *)(v214 + 88);
              v221 = *(_BYTE *)(v214 + 96);
              sub_2142625F8(v220, v221);
              *(_QWORD *)(v213 + 88) = v220;
              *(_BYTE *)(v213 + 96) = v221;
            }
            v226 = *(_QWORD *)(v214 + 104);
            v227 = *(_BYTE *)(v214 + 112);
            sub_2142625F8(v226, v227);
            *(_QWORD *)(v213 + 104) = v226;
            *(_BYTE *)(v213 + 112) = v227;
            *(_BYTE *)(v151 + v293) = 6;
            v52 = v293 + 1;
            break;
          default:
            if (v288 <= 3)
              v176 = v288;
            else
              v176 = 4;
            __asm { BR              X11 }
            return result;
        }
        goto LABEL_205;
      case 7:
        v295 = v53;
        v177 = *(_QWORD *)v152;
        v178 = *(_QWORD *)(v152 + 8);
        v179 = *(_BYTE *)(v152 + 16);
        sub_2141DD130(*(_QWORD *)v152, v178, v179);
        *(_QWORD *)v151 = v177;
        *(_QWORD *)(v151 + 8) = v178;
        *(_BYTE *)(v151 + 16) = v179;
        *(_QWORD *)(v151 + 24) = *(_QWORD *)(v152 + 24);
        v180 = (_QWORD *)((v278 + v151) & v51);
        v181 = (_QWORD *)((v278 + v152) & v51);
        v182 = *((unsigned __int8 *)v181 + v288);
        swift_bridgeObjectRetain();
        switch(v182)
        {
          case 0:
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v279 + 16))(v180, v181, v280);
            *((_BYTE *)v180 + v288) = 0;
            goto LABEL_189;
          case 1:
            v228 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v279 + 16);
            v228(v180, v181, v280);
            v228((_QWORD *)(((unint64_t)v180 + v267) & v269), (_QWORD *)(((unint64_t)v181 + v267) & v269), v280);
            v229 = 1;
            goto LABEL_188;
          case 2:
            *v180 = *v181;
            *((_BYTE *)v180 + v288) = 2;
            swift_retain();
            goto LABEL_189;
          case 3:
            *v180 = *v181;
            *(_QWORD *)(((v278 + v151) & v51) + 8) = *(_QWORD *)(((v278 + v152) & v51) + 8);
            *((_BYTE *)v180 + v288) = 3;
            swift_retain();
            swift_retain();
            goto LABEL_189;
          case 4:
            *v180 = *v181;
            v230 = ((unint64_t)v180 + v284) & v271;
            v231 = ((unint64_t)v181 + v284) & v271;
            v232 = *(void (**)(unint64_t, unint64_t, uint64_t))(v285 + 16);
            swift_retain();
            v232(v230, v231, v286);
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v274 + 16))((v273 + v230) & v272, (v273 + v231) & v272, v275);
            v229 = 4;
LABEL_188:
            *((_BYTE *)v180 + v288) = v229;
LABEL_189:
            v233 = (v270 + v151) & 0xFFFFFFFFFFFFFFF8;
            v234 = (v270 + v152) & 0xFFFFFFFFFFFFFFF8;
            *(_BYTE *)v233 = *(_BYTE *)v234;
            *(_BYTE *)(v233 + 1) = *(_BYTE *)(v234 + 1);
            *(_BYTE *)(v233 + 2) = *(_BYTE *)(v234 + 2);
            v235 = *(unsigned __int8 *)(v234 + 24);
            if (v235 <= 0xFB)
            {
              v237 = *(_QWORD *)(v234 + 8);
              v238 = *(_QWORD *)(v234 + 16);
              sub_2141DD140(v237, v238, *(_BYTE *)(v234 + 24));
              *(_QWORD *)(v233 + 8) = v237;
              *(_QWORD *)(v233 + 16) = v238;
              *(_BYTE *)(v233 + 24) = v235;
            }
            else
            {
              v236 = *(_OWORD *)(v234 + 8);
              *(_BYTE *)(v233 + 24) = *(_BYTE *)(v234 + 24);
              *(_OWORD *)(v233 + 8) = v236;
            }
            v239 = *(unsigned __int8 *)(v234 + 48);
            if (v239 <= 0xFB)
            {
              v241 = *(_QWORD *)(v234 + 32);
              v242 = *(_QWORD *)(v234 + 40);
              sub_2141DD140(v241, v242, *(_BYTE *)(v234 + 48));
              *(_QWORD *)(v233 + 32) = v241;
              *(_QWORD *)(v233 + 40) = v242;
              *(_BYTE *)(v233 + 48) = v239;
            }
            else
            {
              v240 = *(_OWORD *)(v234 + 32);
              *(_BYTE *)(v233 + 48) = *(_BYTE *)(v234 + 48);
              *(_OWORD *)(v233 + 32) = v240;
            }
            v190 = v293;
            v52 = v293 + 1;
            v189 = 7;
            break;
          default:
            if (v288 <= 3)
              v183 = v288;
            else
              v183 = 4;
            __asm { BR              X11 }
            return result;
        }
LABEL_196:
        *(_BYTE *)(v151 + v190) = v189;
        v53 = v295;
LABEL_205:
        *(_QWORD *)(((v151 | 7) + v52) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((v152 | 7) + v52) & 0xFFFFFFFFFFFFF8);
        v49 = a1;
        v248 = (_QWORD *)(((unint64_t)a2 + v53 + 7) & 0xFFFFFFFFFFFFF8);
        v249 = (_QWORD *)(((unint64_t)a1 + v53 + 7) & 0xFFFFFFFFFFFFF8);
        *v249 = *v248;
        v250 = (_QWORD *)(((unint64_t)v248 + 15) & 0xFFFFFFFFFFFFFFF8);
        v251 = (_QWORD *)(((unint64_t)v249 + 15) & 0xFFFFFFFFFFFFFFF8);
        *v251 = *v250;
        v252 = (_QWORD *)(((unint64_t)v250 + 15) & 0xFFFFFFFFFFFFF8);
        v253 = (_QWORD *)(((unint64_t)v251 + 15) & 0xFFFFFFFFFFFFF8);
        *v253 = *v252;
        v254 = ((unint64_t)v253 + 15) & 0xFFFFFFFFFFFFFFF8;
        v255 = (unint64_t *)(((unint64_t)v252 + 15) & 0xFFFFFFFFFFFFFFF8);
        v256 = *v255;
        swift_retain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v256 < 0xFFFFFFFF)
        {
          *(_OWORD *)v254 = *(_OWORD *)v255;
        }
        else
        {
          *(_QWORD *)v254 = v256;
          *(_QWORD *)(v254 + 8) = v255[1];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        break;
      default:
        if (v50 <= 3)
          v153 = v50;
        else
          v153 = 4;
        __asm { BR              X12 }
        return result;
    }
  }
  return v49;
}

unint64_t sub_214276944(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(uint64_t, uint64_t);
  void (*v52)(uint64_t, uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(uint64_t, uint64_t);
  unint64_t v58;
  int v59;
  void (*v60)(uint64_t, uint64_t);
  unint64_t v61;
  unsigned int v62;
  unsigned int v63;
  void (*v64)(uint64_t, uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void (*v98)(uint64_t, uint64_t);
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  void (*v103)(uint64_t, uint64_t);
  unint64_t v104;
  int v105;
  void (*v106)(uint64_t, uint64_t);
  unint64_t v107;
  unsigned int v108;
  unsigned int v109;
  void (*v110)(uint64_t, uint64_t);
  unint64_t result;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  void (*v115)(uint64_t, uint64_t);
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;

  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v4 + 8))();
  v5 = *(_QWORD *)(v4 + 64);
  v135 = a2;
  v121 = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(v121 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v130 = sub_214423C48();
  v8 = *(_QWORD *)(v130 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v132 = sub_214423C54();
  v10 = *(_QWORD *)(v132 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = v11 | v9;
  v13 = v11 | v9 | v7;
  v14 = v13 | 7;
  v134 = a1;
  v133 = (v13 | 7) + v5;
  v15 = v133 + a1;
  v16 = (v133 + a1) & ~(v13 | 7);
  v17 = v13 + 32;
  v18 = (v13 + 32) & ~(v13 | 7);
  v119 = v6;
  v19 = *(_QWORD *)(v6 + 64);
  v20 = v19 + v7;
  if (((v19 + v7) & ~v7) + v19 > v19)
    v19 += (v19 + v7) & ~v7;
  v127 = v9 + 8;
  v128 = *(_QWORD *)(v8 + 64) + v11;
  v129 = v8;
  v131 = *(_QWORD *)(v132 - 8);
  v21 = ((v128 + ((v9 + 8) & ~v9)) & ~v11) + *(_QWORD *)(v10 + 64);
  if (v19 <= v21)
    v19 = ((v128 + ((v9 + 8) & ~v9)) & ~v11) + *(_QWORD *)(v10 + 64);
  if (v19 <= 0x10)
    v22 = 16;
  else
    v22 = v19;
  v23 = v22 + v18;
  v24 = v23 + 1;
  v25 = ((v23 + 1 + v14) & ~v14) + v23 + 1;
  if (v23 + 1 > v25)
    v25 = v23 + 1;
  v26 = v23 + 8;
  v27 = (v23 + 8) & 0xFFFFFFFFFFFFFFF8;
  if (v25 <= v27 + 113)
    v25 = v27 + 113;
  v28 = v27 + 49;
  if (v25 > v28)
    v28 = v25;
  if (v28 <= 0x19)
    v29 = 25;
  else
    v29 = v28;
  v137 = ~v14;
  v31 = ~v7;
  v125 = ~v9;
  v126 = ~v11;
  switch(*(_BYTE *)(v16 + v29))
  {
    case 0:
    case 1:
      break;
    case 2:
      v32 = v11 | v9;
      v33 = v29;
      goto LABEL_24;
    case 3:
      v32 = v11 | v9;
      v33 = v29;
      swift_release();
LABEL_24:
      swift_release();
      v29 = v33;
      v12 = v32;
      break;
    case 4:
      v34 = v20;
      v35 = v29;
      v36 = v12;
      sub_2141ED0BC(*(_QWORD *)v16, *(_QWORD *)(v16 + 8), *(_BYTE *)(v16 + 16));
      swift_bridgeObjectRelease();
      v37 = (v17 + v16) & v137;
      switch(*(_BYTE *)(v37 + v22))
      {
        case 0:
          (*(void (**)(uint64_t, uint64_t))(v119 + 8))((v17 + v16) & v137, v121);
          break;
        case 1:
          v51 = *(void (**)(uint64_t, uint64_t))(v119 + 8);
          v51((v17 + v16) & v137, v121);
          v51((v34 + v37) & v31, v121);
          break;
        case 2:
          swift_release();
          break;
        case 3:
          swift_release();
          swift_release();
          break;
        case 4:
          swift_release();
          (*(void (**)(uint64_t, uint64_t))(v129 + 8))((v127 + v37) & v125, v130);
          (*(void (**)(uint64_t, uint64_t))(v131 + 8))((v128 + ((v127 + v37) & v125)) & v126, v132);
          break;
        default:
          if (v22 <= 3)
            v38 = v22;
          else
            v38 = 4;
          __asm { BR              X12 }
          return result;
      }
      v12 = v36;
      v29 = v35;
      break;
    case 5:
      v112 = v20;
      v114 = v11 | v9;
      v116 = v29;
      sub_2141ED0BC(*(_QWORD *)v16, *(_QWORD *)(v16 + 8), *(_BYTE *)(v16 + 16));
      swift_bridgeObjectRelease();
      v39 = (v17 + v16) & v137;
      switch(*(_BYTE *)(v39 + v22))
      {
        case 0:
          (*(void (**)(uint64_t, uint64_t))(v119 + 8))((v17 + v16) & v137, v121);
          break;
        case 1:
          v52 = *(void (**)(uint64_t, uint64_t))(v119 + 8);
          v52((v17 + v16) & v137, v121);
          v52((v112 + v39) & v31, v121);
          break;
        case 2:
          swift_release();
          break;
        case 3:
          swift_release();
          swift_release();
          break;
        case 4:
          swift_release();
          v53 = (v127 + v39) & v125;
          (*(void (**)(uint64_t, uint64_t))(v129 + 8))(v53, v130);
          (*(void (**)(uint64_t, uint64_t))(v131 + 8))((v128 + v53) & v126, v132);
          break;
        default:
          if (v22 <= 3)
            v40 = v22;
          else
            v40 = 4;
          __asm { BR              X12 }
          return result;
      }
      v54 = ((v15 | v14) + v24) & v137;
      sub_2141ED0BC(*(_QWORD *)v54, *(_QWORD *)(v54 + 8), *(_BYTE *)(v54 + 0x10));
      swift_bridgeObjectRelease();
      v55 = (v17 + v54) & v137;
      switch(*(_BYTE *)(v55 + v22))
      {
        case 0:
          (*(void (**)(uint64_t, uint64_t))(v119 + 8))((v17 + v54) & v137, v121);
          break;
        case 1:
          v64 = *(void (**)(uint64_t, uint64_t))(v119 + 8);
          v64(v55, v121);
          v64((v112 + v55) & v31, v121);
          break;
        case 2:
          swift_release();
          break;
        case 3:
          swift_release();
          swift_release();
          break;
        case 4:
          swift_release();
          (*(void (**)(uint64_t, uint64_t))(v129 + 8))((v127 + v55) & v125, v130);
          (*(void (**)(uint64_t, uint64_t))(v131 + 8))((v128 + ((v127 + v55) & v125)) & v126, v132);
          break;
        default:
          if (v22 <= 3)
            v56 = v22;
          else
            v56 = 4;
          __asm { BR              X12 }
          return result;
      }
      v12 = v114;
      v29 = v116;
      break;
    case 6:
      v41 = v31;
      v42 = v20;
      v117 = v29;
      v43 = v12;
      sub_2141ED0BC(*(_QWORD *)v16, *(_QWORD *)(v16 + 8), *(_BYTE *)(v16 + 16));
      swift_bridgeObjectRelease();
      v44 = (v17 + v16) & v137;
      switch(*(_BYTE *)(v44 + v22))
      {
        case 0:
          (*(void (**)(uint64_t, uint64_t))(v119 + 8))((v17 + v16) & v137, v121);
          break;
        case 1:
          v57 = *(void (**)(uint64_t, uint64_t))(v119 + 8);
          v57((v17 + v16) & v137, v121);
          v57((v42 + v44) & v41, v121);
          break;
        case 2:
          swift_release();
          break;
        case 3:
          swift_release();
          swift_release();
          break;
        case 4:
          swift_release();
          (*(void (**)(uint64_t, uint64_t))(v129 + 8))((v127 + v44) & v125, v130);
          (*(void (**)(uint64_t, uint64_t))(v131 + 8))((v128 + ((v127 + v44) & v125)) & v126, v132);
          break;
        default:
          if (v22 <= 3)
            v45 = v22;
          else
            v45 = 4;
          __asm { BR              X12 }
          return result;
      }
      v58 = (v26 + v16) & 0xFFFFFFFFFFFFFFF8;
      v59 = *(unsigned __int8 *)(v58 + 96);
      if (v59 != 255)
        sub_2142637C0(*(_QWORD *)(v58 + 88), v59 & 1);
      sub_2142637C0(*(_QWORD *)(v58 + 104), *(_BYTE *)(v58 + 112));
      v12 = v43;
      v29 = v117;
      break;
    case 7:
      v113 = v31;
      v46 = v20;
      v47 = v29;
      v48 = v12;
      sub_2141ED0BC(*(_QWORD *)v16, *(_QWORD *)(v16 + 8), *(_BYTE *)(v16 + 16));
      swift_bridgeObjectRelease();
      v49 = (v17 + v16) & v137;
      switch(*(_BYTE *)(v49 + v22))
      {
        case 0:
          (*(void (**)(uint64_t, uint64_t))(v119 + 8))((v17 + v16) & v137, v121);
          break;
        case 1:
          v60 = *(void (**)(uint64_t, uint64_t))(v119 + 8);
          v60((v17 + v16) & v137, v121);
          v60((v46 + v49) & v113, v121);
          break;
        case 2:
          swift_release();
          break;
        case 3:
          swift_release();
          swift_release();
          break;
        case 4:
          swift_release();
          (*(void (**)(uint64_t, uint64_t))(v129 + 8))((v127 + v49) & v125, v130);
          (*(void (**)(uint64_t, uint64_t))(v131 + 8))((v128 + ((v127 + v49) & v125)) & v126, v132);
          break;
        default:
          if (v22 <= 3)
            v50 = v22;
          else
            v50 = 4;
          __asm { BR              X12 }
          return result;
      }
      v61 = (v26 + v16) & 0xFFFFFFFFFFFFFFF8;
      v62 = *(unsigned __int8 *)(v61 + 24);
      if (v62 <= 0xFB)
        sub_2141EF1B0(*(_QWORD *)(v61 + 8), *(_QWORD *)(v61 + 16), v62);
      v63 = *(unsigned __int8 *)(v61 + 48);
      v12 = v48;
      v29 = v47;
      if (v63 <= 0xFB)
      {
        sub_2141EF1B0(*(_QWORD *)(v61 + 32), *(_QWORD *)(v61 + 40), v63);
        v29 = v47;
        v12 = v48;
      }
      break;
    default:
      if (v29 <= 3)
        v30 = v29;
      else
        v30 = 4;
      __asm { BR              X13 }
      return result;
  }
  v65 = *(_QWORD *)(v135 + 32);
  v66 = *(_QWORD *)(v65 - 8);
  v67 = *(unsigned __int8 *)(v66 + 80);
  v68 = v12 | v67 | 7;
  v69 = v29 + v68 + 1;
  v70 = v69 + v16;
  v71 = (v69 + v16) & ~v68;
  v72 = (v12 | v67) + 32;
  v73 = *(_QWORD *)(v66 + 64);
  v74 = v73 + v67;
  if (((v73 + v67) & ~v67) + v73 > v73)
    v73 += (v73 + v67) & ~v67;
  if (v73 <= v21)
    v73 = v21;
  if (v73 <= 0x10)
    v75 = 16;
  else
    v75 = v73;
  v76 = v75 + (v72 & ~v68);
  v77 = v76 + 1;
  v78 = ((v76 + 1 + v68) & ~v68) + v76 + 1;
  if (v76 + 1 > v78)
    v78 = v76 + 1;
  v79 = (v76 + 8) & 0xFFFFFFFFFFFFFFF8;
  if (v78 <= v79 + 113)
    v78 = v79 + 113;
  v80 = v79 + 49;
  if (v78 > v80)
    v80 = v78;
  if (v80 <= 0x19)
    v81 = 25;
  else
    v81 = v80;
  v136 = ~v68;
  switch(*(_BYTE *)(v71 + v81))
  {
    case 0:
    case 1:
      break;
    case 2:
      swift_release();
      break;
    case 3:
      swift_release();
      swift_release();
      break;
    case 4:
      v83 = ~v67;
      v84 = v74;
      v85 = v69;
      sub_2141ED0BC(*(_QWORD *)v71, *(_QWORD *)(v71 + 8), *(_BYTE *)(v71 + 16));
      swift_bridgeObjectRelease();
      v86 = (v72 + v71) & v136;
      switch(*(_BYTE *)(v86 + v75))
      {
        case 0:
          (*(void (**)(uint64_t, uint64_t))(v66 + 8))((v72 + v71) & v136, v65);
          goto LABEL_139;
        case 1:
          v98 = *(void (**)(uint64_t, uint64_t))(v66 + 8);
          v98((v72 + v71) & v136, v65);
          v98((v84 + v86) & v83, v65);
          v69 = v85;
          goto LABEL_178;
        case 2:
          goto LABEL_137;
        case 3:
          swift_release();
LABEL_137:
          swift_release();
          v69 = v85;
          break;
        case 4:
          swift_release();
          (*(void (**)(uint64_t, uint64_t))(v129 + 8))((v127 + v86) & v125, v130);
          (*(void (**)(uint64_t, uint64_t))(v131 + 8))((v128 + ((v127 + v86) & v125)) & v126, v132);
LABEL_139:
          v69 = v85;
          break;
        default:
          if (v75 <= 3)
            v87 = v75;
          else
            v87 = 4;
          __asm { BR              X12 }
          return result;
      }
      return result;
    case 5:
      v120 = v29 + v68 + 1;
      v122 = ~v67;
      v118 = v74;
      sub_2141ED0BC(*(_QWORD *)v71, *(_QWORD *)(v71 + 8), *(_BYTE *)(v71 + 16));
      swift_bridgeObjectRelease();
      v88 = (v72 + v71) & v136;
      switch(*(_BYTE *)(v88 + v75))
      {
        case 0:
          (*(void (**)(uint64_t, uint64_t))(v66 + 8))((v72 + v71) & v136, v65);
          break;
        case 1:
          v115 = *(void (**)(uint64_t, uint64_t))(v66 + 8);
          v115((v72 + v71) & v136, v65);
          v115((v118 + v88) & v122, v65);
          break;
        case 2:
          swift_release();
          break;
        case 3:
          swift_release();
          swift_release();
          break;
        case 4:
          swift_release();
          v99 = (v127 + v88) & v125;
          (*(void (**)(uint64_t, uint64_t))(v129 + 8))(v99, v130);
          (*(void (**)(uint64_t, uint64_t))(v131 + 8))((v128 + v99) & v126, v132);
          break;
        default:
          if (v75 <= 3)
            v89 = v75;
          else
            v89 = 4;
          __asm { BR              X12 }
          return result;
      }
      v100 = ((v70 | v68) + v77) & v136;
      sub_2141ED0BC(*(_QWORD *)v100, *(_QWORD *)(v100 + 8), *(_BYTE *)(v100 + 0x10));
      swift_bridgeObjectRelease();
      v101 = (v72 + v100) & v136;
      switch(*(_BYTE *)(v101 + v75))
      {
        case 0:
          (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v101, v65);
          break;
        case 1:
          v110 = *(void (**)(uint64_t, uint64_t))(v66 + 8);
          v110(v101, v65);
          v110((v118 + v101) & v122, v65);
          break;
        case 2:
          goto LABEL_175;
        case 3:
          swift_release();
LABEL_175:
          swift_release();
          break;
        case 4:
          swift_release();
          (*(void (**)(uint64_t, uint64_t))(v129 + 8))((v127 + v101) & v125, v130);
          (*(void (**)(uint64_t, uint64_t))(v131 + 8))((v128 + ((v127 + v101) & v125)) & v126, v132);
          break;
        default:
          if (v75 <= 3)
            v102 = v75;
          else
            v102 = 4;
          __asm { BR              X12 }
          return result;
      }
      v69 = v120;
      break;
    case 6:
      v123 = ~v67;
      v90 = v74;
      v91 = v69;
      sub_2141ED0BC(*(_QWORD *)v71, *(_QWORD *)(v71 + 8), *(_BYTE *)(v71 + 16));
      swift_bridgeObjectRelease();
      v92 = (v72 + v71) & v136;
      switch(*(_BYTE *)(v92 + v75))
      {
        case 0:
          (*(void (**)(uint64_t, uint64_t))(v66 + 8))((v72 + v71) & v136, v65);
          break;
        case 1:
          v103 = *(void (**)(uint64_t, uint64_t))(v66 + 8);
          v103((v72 + v71) & v136, v65);
          v103((v90 + v92) & v123, v65);
          break;
        case 2:
          swift_release();
          break;
        case 3:
          swift_release();
          swift_release();
          break;
        case 4:
          swift_release();
          (*(void (**)(uint64_t, uint64_t))(v129 + 8))((v127 + v92) & v125, v130);
          (*(void (**)(uint64_t, uint64_t))(v131 + 8))((v128 + ((v127 + v92) & v125)) & v126, v132);
          break;
        default:
          if (v75 <= 3)
            v93 = v75;
          else
            v93 = 4;
          __asm { BR              X12 }
          return result;
      }
      v69 = v91;
      v104 = ((v71 | 7) + v77) & 0xFFFFFFFFFFFFFFF8;
      v105 = *(unsigned __int8 *)(v104 + 96);
      if (v105 != 255)
        sub_2142637C0(*(_QWORD *)(v104 + 88), v105 & 1);
      sub_2142637C0(*(_QWORD *)(v104 + 104), *(_BYTE *)(v104 + 112));
      break;
    case 7:
      v124 = ~v67;
      v94 = v74;
      v95 = v69;
      sub_2141ED0BC(*(_QWORD *)v71, *(_QWORD *)(v71 + 8), *(_BYTE *)(v71 + 16));
      swift_bridgeObjectRelease();
      v96 = (v72 + v71) & v136;
      switch(*(_BYTE *)(v96 + v75))
      {
        case 0:
          (*(void (**)(uint64_t, uint64_t))(v66 + 8))((v72 + v71) & v136, v65);
          break;
        case 1:
          v106 = *(void (**)(uint64_t, uint64_t))(v66 + 8);
          v106((v72 + v71) & v136, v65);
          v106((v94 + v96) & v124, v65);
          break;
        case 2:
          swift_release();
          break;
        case 3:
          swift_release();
          swift_release();
          break;
        case 4:
          swift_release();
          (*(void (**)(uint64_t, uint64_t))(v129 + 8))((v127 + v96) & v125, v130);
          (*(void (**)(uint64_t, uint64_t))(v131 + 8))((v128 + ((v127 + v96) & v125)) & v126, v132);
          break;
        default:
          if (v75 <= 3)
            v97 = v75;
          else
            v97 = 4;
          __asm { BR              X12 }
          return result;
      }
      v107 = ((v71 | 7) + v77) & 0xFFFFFFFFFFFFFFF8;
      v108 = *(unsigned __int8 *)(v107 + 24);
      v69 = v95;
      if (v108 <= 0xFB)
        sub_2141EF1B0(*(_QWORD *)(v107 + 8), *(_QWORD *)(v107 + 16), v108);
      v109 = *(unsigned __int8 *)(v107 + 48);
      if (v109 <= 0xFB)
        sub_2141EF1B0(*(_QWORD *)(v107 + 32), *(_QWORD *)(v107 + 40), v109);
      break;
    default:
      if (v81 <= 3)
        v82 = v81;
      else
        v82 = 4;
      __asm { BR              X13 }
      return result;
  }
LABEL_178:
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = *(_QWORD *)((((((((v134 + ((v81 + ((v69 + (v133 & v137)) & v136) + 8) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                          + 15) & 0xFFFFFFFFFFFFFFF8)
                        + 15) & 0xFFFFFFFFFFFFF8)
                      + 15) & 0xFFFFFFFFFFFFFFF8);
  if (result >= 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_214277C20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  _QWORD *v48;
  _QWORD *v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  _QWORD *v55;
  _QWORD *v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  _QWORD *v64;
  _QWORD *v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  _QWORD *v73;
  _QWORD *v74;
  int v75;
  uint64_t v76;
  void (*v77)(_QWORD *, _QWORD *, uint64_t);
  char v78;
  unint64_t v79;
  unint64_t v80;
  void (*v81)(unint64_t, unint64_t, uint64_t);
  unint64_t v82;
  void (*v83)(_QWORD *, _QWORD *, uint64_t);
  char v84;
  unint64_t v85;
  unint64_t v86;
  void (*v87)(unint64_t, unint64_t, uint64_t);
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  _QWORD *v93;
  _QWORD *v94;
  int v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  void (*v100)(unint64_t, unint64_t, uint64_t);
  char v101;
  void (*v102)(_QWORD *, _QWORD *, uint64_t);
  unint64_t v103;
  unint64_t v104;
  _OWORD *v105;
  _OWORD *v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  uint64_t v110;
  char v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  uint64_t v116;
  char v117;
  char v118;
  void (*v119)(_QWORD *, _QWORD *, uint64_t);
  char v120;
  unint64_t v121;
  unint64_t v122;
  void (*v123)(unint64_t, unint64_t, uint64_t);
  unint64_t v124;
  unint64_t v125;
  unsigned int v126;
  __int128 v127;
  uint64_t v128;
  uint64_t v129;
  unsigned int v130;
  __int128 v131;
  uint64_t v132;
  uint64_t v133;
  void (*v134)(_QWORD *, _QWORD *, uint64_t);
  char v135;
  unint64_t v136;
  unint64_t v137;
  void (*v138)(unint64_t, unint64_t, uint64_t);
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t v155;
  unint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  __int128 v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char v167;
  _QWORD *v168;
  _QWORD *v169;
  int v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  char v174;
  _QWORD *v175;
  _QWORD *v176;
  int v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t v183;
  char v184;
  _QWORD *v185;
  _QWORD *v186;
  _QWORD *v187;
  int v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  _QWORD *v192;
  uint64_t v193;
  uint64_t v194;
  char v195;
  _QWORD *v196;
  _QWORD *v197;
  int v198;
  uint64_t v199;
  void (*v200)(_QWORD *, _QWORD *, uint64_t);
  unint64_t v201;
  unint64_t v202;
  void (*v203)(unint64_t, unint64_t, uint64_t);
  char v204;
  void (*v205)(_QWORD *, _QWORD *, uint64_t);
  char v206;
  unint64_t v207;
  unint64_t v208;
  void (*v209)(unint64_t, unint64_t, uint64_t);
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  char v214;
  _QWORD *v215;
  _QWORD *v216;
  int v217;
  uint64_t v218;
  unint64_t v219;
  unint64_t v220;
  void (*v221)(unint64_t, unint64_t, uint64_t);
  void (*v222)(_QWORD *, _QWORD *, uint64_t);
  unint64_t v223;
  unint64_t v224;
  _OWORD *v225;
  _OWORD *v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  uint64_t v230;
  char v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  uint64_t v236;
  char v237;
  void (*v238)(_QWORD *, _QWORD *, uint64_t);
  char v239;
  unint64_t v240;
  unint64_t v241;
  void (*v242)(unint64_t, unint64_t, uint64_t);
  unint64_t v243;
  unint64_t v244;
  unsigned int v245;
  __int128 v246;
  uint64_t v247;
  uint64_t v248;
  unsigned int v249;
  __int128 v250;
  uint64_t v251;
  uint64_t v252;
  void (*v253)(_QWORD *, _QWORD *, uint64_t);
  char v254;
  unint64_t v255;
  unint64_t v256;
  void (*v257)(unint64_t, unint64_t, uint64_t);
  unint64_t v258;
  uint64_t v259;
  _QWORD *v260;
  _QWORD *v261;
  _QWORD *v262;
  _QWORD *v263;
  _QWORD *v264;
  unint64_t v265;
  unint64_t *v266;
  unint64_t v267;
  uint64_t result;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  unint64_t v274;
  unint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  _QWORD *v283;
  unint64_t v284;
  unint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  unint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 16))();
  v7 = *(_QWORD *)(v6 + 64);
  v309 = a3;
  v298 = *(_QWORD *)(a3 + 24);
  v8 = *(_QWORD *)(v298 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v306 = sub_214423C48();
  v10 = *(_QWORD *)(v306 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v308 = sub_214423C54();
  v12 = *(_QWORD *)(v308 - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = v13 | v11;
  v15 = v13 | v11 | v9;
  v16 = v15 | 7;
  v17 = (v15 | 7) + v7;
  v18 = v17 + a1;
  v314 = (v17 + a1) & ~(v15 | 7);
  v311 = v17;
  v312 = a2;
  v19 = v17 + a2;
  v20 = v19 & ~(v15 | 7);
  v21 = v15 + 32;
  v22 = (v15 + 32) & ~(v15 | 7);
  v293 = v8;
  v23 = *(_QWORD *)(v8 + 64);
  v24 = v23 + v9;
  if (((v23 + v9) & ~v9) + v23 > v23)
    v23 += (v23 + v9) & ~v9;
  v303 = v11 + 8;
  v304 = v10;
  v305 = *(_QWORD *)(v10 + 64) + v13;
  v307 = *(_QWORD *)(v308 - 8);
  v25 = ((v305 + ((v11 + 8) & ~v11)) & ~v13) + *(_QWORD *)(v12 + 64);
  if (v23 <= v25)
    v23 = ((v305 + ((v11 + 8) & ~v11)) & ~v13) + *(_QWORD *)(v12 + 64);
  if (v23 <= 0x10)
    v23 = 16;
  v26 = v23;
  v27 = v23 + v22;
  v28 = v27 + 1;
  v29 = ((v27 + 1 + v16) & ~v16) + v27 + 1;
  if (v27 + 1 > v29)
    v29 = v27 + 1;
  v30 = v27 + 8;
  v31 = (v27 + 8) & 0xFFFFFFFFFFFFFFF8;
  if (v29 <= v31 + 113)
    v29 = v31 + 113;
  v32 = v31 + 49;
  if (v29 > v32)
    v32 = v29;
  if (v32 <= 0x19)
    v33 = 25;
  else
    v33 = v32;
  v316 = ~v16;
  v301 = ~v11;
  v302 = ~v13;
  v313 = a1;
  switch(*(_BYTE *)(v20 + v33))
  {
    case 0:
      v35 = *(_QWORD *)v20;
      v36 = v314;
      *(_BYTE *)(v314 + 8) = *(_BYTE *)(v20 + 8);
      *(_QWORD *)v314 = v35;
      *(_BYTE *)(v314 + v33) = 0;
      v37 = v309;
      break;
    case 1:
      v38 = *(_OWORD *)v20;
      v36 = v314;
      *(_OWORD *)(v314 + 9) = *(_OWORD *)(v20 + 9);
      *(_OWORD *)v314 = v38;
      *(_BYTE *)(v314 + v33) = 1;
      v37 = v309;
      break;
    case 2:
      v36 = v314;
      *(_QWORD *)v314 = *(_QWORD *)v20;
      *(_BYTE *)(v314 + v33) = 2;
      v39 = v13 | v11;
      v40 = v25;
      v41 = v33;
      goto LABEL_25;
    case 3:
      v36 = v314;
      *(_QWORD *)v314 = *(_QWORD *)v20;
      *(_QWORD *)(v314 + 8) = *(_QWORD *)(v20 + 8);
      *(_BYTE *)(v314 + v33) = 3;
      v39 = v13 | v11;
      v40 = v25;
      v41 = v33;
      swift_retain();
LABEL_25:
      swift_retain();
      v33 = v41;
      v25 = v40;
      v14 = v39;
      v37 = v309;
      break;
    case 4:
      v42 = ~v9;
      v43 = v24;
      v44 = v33;
      v280 = ((v305 + ((v11 + 8) & ~v11)) & ~v13) + *(_QWORD *)(v12 + 64);
      v286 = v13 | v11;
      v45 = *(_QWORD *)v20;
      v46 = *(_QWORD *)(v20 + 8);
      v47 = *(_BYTE *)(v20 + 16);
      sub_2141DD130(*(_QWORD *)v20, v46, v47);
      *(_QWORD *)v314 = v45;
      *(_QWORD *)(v314 + 8) = v46;
      *(_BYTE *)(v314 + 16) = v47;
      v36 = v314;
      *(_QWORD *)(v314 + 24) = *(_QWORD *)(v20 + 24);
      v48 = (_QWORD *)((v21 + v314) & v316);
      v49 = (_QWORD *)((v21 + v20) & v316);
      v50 = *((unsigned __int8 *)v49 + v26);
      swift_bridgeObjectRetain();
      switch(v50)
      {
        case 0:
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v293 + 16))(v48, v49, v298);
          *((_BYTE *)v48 + v26) = 0;
          goto LABEL_53;
        case 1:
          v77 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v293 + 16);
          v77(v48, v49, v298);
          v77((_QWORD *)(((unint64_t)v48 + v43) & v42), (_QWORD *)(((unint64_t)v49 + v43) & v42), v298);
          v78 = 1;
          goto LABEL_52;
        case 2:
          *v48 = *v49;
          *((_BYTE *)v48 + v26) = 2;
          swift_retain();
          goto LABEL_53;
        case 3:
          *v48 = *v49;
          *(_QWORD *)(((v21 + v314) & v316) + 8) = *(_QWORD *)(((v21 + v20) & v316) + 8);
          *((_BYTE *)v48 + v26) = 3;
          swift_retain();
          swift_retain();
          goto LABEL_53;
        case 4:
          *v48 = *v49;
          v79 = ((unint64_t)v48 + v303) & v301;
          v80 = ((unint64_t)v49 + v303) & v301;
          v81 = *(void (**)(unint64_t, unint64_t, uint64_t))(v304 + 16);
          swift_retain();
          v81(v79, v80, v306);
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v307 + 16))((v305 + v79) & v302, (v305 + v80) & v302, v308);
          v78 = 4;
LABEL_52:
          *((_BYTE *)v48 + v26) = v78;
LABEL_53:
          v33 = v44;
          *(_BYTE *)(v314 + v44) = 4;
          v25 = v280;
          v14 = v286;
          v37 = v309;
          break;
        default:
          if (v26 <= 3)
            v51 = v26;
          else
            v51 = 4;
          __asm { BR              X11 }
          return result;
      }
      break;
    case 5:
      v269 = ~v9;
      v271 = v24;
      v277 = v33;
      v281 = ((v305 + ((v11 + 8) & ~v11)) & ~v13) + *(_QWORD *)(v12 + 64);
      v287 = v13 | v11;
      v52 = *(_QWORD *)v20;
      v53 = *(_QWORD *)(v20 + 8);
      v54 = *(_BYTE *)(v20 + 16);
      sub_2141DD130(*(_QWORD *)v20, v53, v54);
      *(_QWORD *)v314 = v52;
      *(_QWORD *)(v314 + 8) = v53;
      *(_BYTE *)(v314 + 16) = v54;
      *(_QWORD *)(v314 + 24) = *(_QWORD *)(v20 + 24);
      v55 = (_QWORD *)((v21 + v314) & v316);
      v273 = v20;
      v56 = (_QWORD *)((v21 + v20) & v316);
      v57 = *((unsigned __int8 *)v56 + v26);
      swift_bridgeObjectRetain();
      switch(v57)
      {
        case 0:
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v293 + 16))(v55, v56, v298);
          v82 = v26;
          *((_BYTE *)v55 + v26) = 0;
          goto LABEL_61;
        case 1:
          v83 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v293 + 16);
          v83(v55, v56, v298);
          v83((_QWORD *)(((unint64_t)v55 + v271) & v269), (_QWORD *)(((unint64_t)v56 + v271) & v269), v298);
          v84 = 1;
          goto LABEL_60;
        case 2:
          *v55 = *v56;
          v82 = v26;
          *((_BYTE *)v55 + v26) = 2;
          swift_retain();
          goto LABEL_61;
        case 3:
          *v55 = *v56;
          *(_QWORD *)(((v21 + v314) & v316) + 8) = *(_QWORD *)(((v21 + v20) & v316) + 8);
          v82 = v26;
          *((_BYTE *)v55 + v26) = 3;
          swift_retain();
          swift_retain();
          goto LABEL_61;
        case 4:
          *v55 = *v56;
          v85 = ((unint64_t)v55 + v303) & v301;
          v86 = ((unint64_t)v56 + v303) & v301;
          v87 = *(void (**)(unint64_t, unint64_t, uint64_t))(v304 + 16);
          swift_retain();
          v87(v85, v86, v306);
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v307 + 16))((v305 + v85) & v302, (v305 + v86) & v302, v308);
          v84 = 4;
LABEL_60:
          v82 = v26;
          *((_BYTE *)v55 + v26) = v84;
LABEL_61:
          v88 = ((v18 | v16) + v28) & v316;
          v89 = ((v19 | v16) + v28) & v316;
          v90 = *(_QWORD *)v89;
          v91 = *(_QWORD *)(v89 + 8);
          v92 = *(_BYTE *)(v89 + 0x10);
          sub_2141DD130(*(_QWORD *)v89, v91, v92);
          *(_QWORD *)v88 = v90;
          *(_QWORD *)(v88 + 8) = v91;
          *(_BYTE *)(v88 + 16) = v92;
          *(_QWORD *)(v88 + 24) = *(_QWORD *)(v89 + 24);
          v93 = (_QWORD *)((v21 + v88) & v316);
          v94 = (_QWORD *)((v21 + v89) & v316);
          v95 = *((unsigned __int8 *)v94 + v82);
          swift_bridgeObjectRetain();
          v96 = v82;
          v37 = v309;
          v36 = v314;
          v20 = v273;
          switch(v95)
          {
            case 0:
              (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v293 + 16))(v93, v94, v298);
              *((_BYTE *)v93 + v96) = 0;
              goto LABEL_98;
            case 1:
              v134 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v293 + 16);
              v134(v93, v94, v298);
              v134((_QWORD *)(((unint64_t)v93 + v271) & v269), (_QWORD *)(((unint64_t)v94 + v271) & v269), v298);
              v135 = 1;
              goto LABEL_97;
            case 2:
              *v93 = *v94;
              *((_BYTE *)v93 + v96) = 2;
              swift_retain();
              goto LABEL_98;
            case 3:
              *v93 = *v94;
              v93[1] = v94[1];
              *((_BYTE *)v93 + v96) = 3;
              swift_retain();
              swift_retain();
              goto LABEL_98;
            case 4:
              *v93 = *v94;
              v136 = ((unint64_t)v93 + v303) & v301;
              v137 = ((unint64_t)v94 + v303) & v301;
              v138 = *(void (**)(unint64_t, unint64_t, uint64_t))(v304 + 16);
              swift_retain();
              v138(v136, v137, v306);
              (*(void (**)(unint64_t, unint64_t, uint64_t))(v307 + 16))((v305 + v136) & v302, (v305 + v137) & v302, v308);
              v135 = 4;
LABEL_97:
              *((_BYTE *)v93 + v96) = v135;
LABEL_98:
              v118 = 5;
              break;
            default:
              if (v96 <= 3)
                v97 = v96;
              else
                v97 = 4;
              __asm { BR              X11 }
              return result;
          }
          return result;
        default:
          if (v26 <= 3)
            v58 = v26;
          else
            v58 = 4;
          __asm { BR              X11 }
          return result;
      }
      goto LABEL_99;
    case 6:
      v274 = v30;
      v277 = v33;
      v59 = ~v9;
      v60 = v24;
      v281 = ((v305 + ((v11 + 8) & ~v11)) & ~v13) + *(_QWORD *)(v12 + 64);
      v287 = v13 | v11;
      v61 = *(_QWORD *)v20;
      v62 = *(_QWORD *)(v20 + 8);
      v63 = *(_BYTE *)(v20 + 16);
      sub_2141DD130(*(_QWORD *)v20, v62, v63);
      *(_QWORD *)v314 = v61;
      *(_QWORD *)(v314 + 8) = v62;
      *(_BYTE *)(v314 + 16) = v63;
      v36 = v314;
      *(_QWORD *)(v314 + 24) = *(_QWORD *)(v20 + 24);
      v64 = (_QWORD *)((v21 + v314) & v316);
      v65 = (_QWORD *)((v21 + v20) & v316);
      v66 = *((unsigned __int8 *)v65 + v26);
      swift_bridgeObjectRetain();
      switch(v66)
      {
        case 0:
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v293 + 16))(v64, v65, v298);
          *((_BYTE *)v64 + v26) = 0;
          goto LABEL_73;
        case 1:
          v102 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v293 + 16);
          v102(v64, v65, v298);
          v102((_QWORD *)(((unint64_t)v64 + v60) & v59), (_QWORD *)(((unint64_t)v65 + v60) & v59), v298);
          v101 = 1;
          goto LABEL_72;
        case 2:
          *v64 = *v65;
          *((_BYTE *)v64 + v26) = 2;
          swift_retain();
          goto LABEL_73;
        case 3:
          *v64 = *v65;
          *(_QWORD *)(((v21 + v314) & v316) + 8) = *(_QWORD *)(((v21 + v20) & v316) + 8);
          *((_BYTE *)v64 + v26) = 3;
          swift_retain();
          swift_retain();
          goto LABEL_73;
        case 4:
          *v64 = *v65;
          v98 = ((unint64_t)v64 + v303) & v301;
          v99 = ((unint64_t)v65 + v303) & v301;
          v100 = *(void (**)(unint64_t, unint64_t, uint64_t))(v304 + 16);
          swift_retain();
          v100(v98, v99, v306);
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v307 + 16))((v305 + v98) & v302, (v305 + v99) & v302, v308);
          v101 = 4;
LABEL_72:
          *((_BYTE *)v64 + v26) = v101;
LABEL_73:
          v37 = v309;
          v103 = (v274 + v314) & 0xFFFFFFFFFFFFFFF8;
          v104 = (v274 + v20) & 0xFFFFFFFFFFFFFFF8;
          *(_BYTE *)v103 = *(_BYTE *)v104;
          v105 = (_OWORD *)(v103 + 8);
          v106 = (_OWORD *)(v104 + 8);
          if (*(unsigned __int8 *)(v104 + 96) == 255)
          {
            v112 = *(_OWORD *)(v104 + 24);
            *v105 = *v106;
            *(_OWORD *)(v103 + 24) = v112;
            v113 = *(_OWORD *)(v104 + 40);
            v114 = *(_OWORD *)(v104 + 56);
            v115 = *(_OWORD *)(v104 + 72);
            *(_OWORD *)(v103 + 81) = *(_OWORD *)(v104 + 81);
            *(_OWORD *)(v103 + 56) = v114;
            *(_OWORD *)(v103 + 72) = v115;
            *(_OWORD *)(v103 + 40) = v113;
          }
          else
          {
            *v105 = *v106;
            v107 = *(_OWORD *)(v104 + 24);
            v108 = *(_OWORD *)(v104 + 40);
            v109 = *(_OWORD *)(v104 + 72);
            *(_OWORD *)(v103 + 56) = *(_OWORD *)(v104 + 56);
            *(_OWORD *)(v103 + 72) = v109;
            *(_OWORD *)(v103 + 24) = v107;
            *(_OWORD *)(v103 + 40) = v108;
            v110 = *(_QWORD *)(v104 + 88);
            v111 = *(_BYTE *)(v104 + 96);
            sub_2142625F8(v110, v111);
            *(_QWORD *)(v103 + 88) = v110;
            *(_BYTE *)(v103 + 96) = v111;
          }
          v116 = *(_QWORD *)(v104 + 104);
          v117 = *(_BYTE *)(v104 + 112);
          sub_2142625F8(v116, v117);
          *(_QWORD *)(v103 + 104) = v116;
          *(_BYTE *)(v103 + 112) = v117;
          v118 = 6;
          break;
        default:
          if (v26 <= 3)
            v67 = v26;
          else
            v67 = 4;
          __asm { BR              X11 }
          return result;
      }
LABEL_99:
      v33 = v277;
      v25 = v281;
      *(_BYTE *)(v36 + v277) = v118;
      v14 = v287;
      break;
    case 7:
      v275 = v30;
      v278 = v33;
      v68 = ~v9;
      v69 = v24;
      v282 = ((v305 + ((v11 + 8) & ~v11)) & ~v13) + *(_QWORD *)(v12 + 64);
      v288 = v13 | v11;
      v70 = *(_QWORD *)v20;
      v71 = *(_QWORD *)(v20 + 8);
      v72 = *(_BYTE *)(v20 + 16);
      sub_2141DD130(*(_QWORD *)v20, v71, v72);
      *(_QWORD *)v314 = v70;
      *(_QWORD *)(v314 + 8) = v71;
      *(_BYTE *)(v314 + 16) = v72;
      v36 = v314;
      *(_QWORD *)(v314 + 24) = *(_QWORD *)(v20 + 24);
      v73 = (_QWORD *)((v21 + v314) & v316);
      v74 = (_QWORD *)((v21 + v20) & v316);
      v75 = *((unsigned __int8 *)v74 + v26);
      swift_bridgeObjectRetain();
      switch(v75)
      {
        case 0:
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v293 + 16))(v73, v74, v298);
          *((_BYTE *)v73 + v26) = 0;
          goto LABEL_84;
        case 1:
          v119 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v293 + 16);
          v119(v73, v74, v298);
          v119((_QWORD *)(((unint64_t)v73 + v69) & v68), (_QWORD *)(((unint64_t)v74 + v69) & v68), v298);
          v120 = 1;
          goto LABEL_83;
        case 2:
          *v73 = *v74;
          *((_BYTE *)v73 + v26) = 2;
          swift_retain();
          goto LABEL_84;
        case 3:
          *v73 = *v74;
          *(_QWORD *)(((v21 + v314) & v316) + 8) = *(_QWORD *)(((v21 + v20) & v316) + 8);
          *((_BYTE *)v73 + v26) = 3;
          swift_retain();
          swift_retain();
          goto LABEL_84;
        case 4:
          *v73 = *v74;
          v121 = ((unint64_t)v73 + v303) & v301;
          v122 = ((unint64_t)v74 + v303) & v301;
          v123 = *(void (**)(unint64_t, unint64_t, uint64_t))(v304 + 16);
          swift_retain();
          v123(v121, v122, v306);
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v307 + 16))((v305 + v121) & v302, (v305 + v122) & v302, v308);
          v120 = 4;
LABEL_83:
          *((_BYTE *)v73 + v26) = v120;
LABEL_84:
          v124 = (v275 + v314) & 0xFFFFFFFFFFFFFFF8;
          v125 = (v275 + v20) & 0xFFFFFFFFFFFFFFF8;
          *(_BYTE *)v124 = *(_BYTE *)v125;
          *(_BYTE *)(v124 + 1) = *(_BYTE *)(v125 + 1);
          *(_BYTE *)(v124 + 2) = *(_BYTE *)(v125 + 2);
          v126 = *(unsigned __int8 *)(v125 + 24);
          v37 = v309;
          if (v126 <= 0xFB)
          {
            v128 = *(_QWORD *)(v125 + 8);
            v129 = *(_QWORD *)(v125 + 16);
            sub_2141DD140(v128, v129, *(_BYTE *)(v125 + 24));
            *(_QWORD *)(v124 + 8) = v128;
            *(_QWORD *)(v124 + 16) = v129;
            *(_BYTE *)(v124 + 24) = v126;
          }
          else
          {
            v127 = *(_OWORD *)(v125 + 8);
            *(_BYTE *)(v124 + 24) = *(_BYTE *)(v125 + 24);
            *(_OWORD *)(v124 + 8) = v127;
          }
          v130 = *(unsigned __int8 *)(v125 + 48);
          if (v130 <= 0xFB)
          {
            v132 = *(_QWORD *)(v125 + 32);
            v133 = *(_QWORD *)(v125 + 40);
            sub_2141DD140(v132, v133, *(_BYTE *)(v125 + 48));
            *(_QWORD *)(v124 + 32) = v132;
            *(_QWORD *)(v124 + 40) = v133;
            *(_BYTE *)(v124 + 48) = v130;
          }
          else
          {
            v131 = *(_OWORD *)(v125 + 32);
            *(_BYTE *)(v124 + 48) = *(_BYTE *)(v125 + 48);
            *(_OWORD *)(v124 + 32) = v131;
          }
          v25 = v282;
          v14 = v288;
          v33 = v278;
          *(_BYTE *)(v314 + v278) = 7;
          break;
        default:
          if (v26 <= 3)
            v76 = v26;
          else
            v76 = 4;
          __asm { BR              X11 }
          return result;
      }
      return result;
    default:
      if (v33 <= 3)
        v34 = v33;
      else
        v34 = 4;
      __asm { BR              X13 }
      return result;
  }
  v139 = *(_QWORD *)(v37 + 32);
  v140 = *(_QWORD *)(v139 - 8);
  v141 = *(unsigned __int8 *)(v140 + 80);
  v142 = v14 | v141 | 7;
  v143 = v33 + v142 + 1;
  v144 = v143 + v36;
  v145 = v144 & ~v142;
  v146 = v143 + v20;
  v147 = (v143 + v20) & ~v142;
  v148 = (v14 | v141) + 32;
  v149 = *(_QWORD *)(v140 + 64);
  v150 = v149 + v141;
  if (((v149 + v141) & ~v141) + v149 > v149)
    v149 += (v149 + v141) & ~v141;
  if (v149 <= v25)
    v149 = v25;
  if (v149 <= 0x10)
    v149 = 16;
  v310 = v149;
  v151 = v149 + (v148 & ~v142);
  v152 = v151 + 1;
  v153 = ((v151 + 1 + v142) & ~v142) + v151 + 1;
  if (v151 + 1 > v153)
    v153 = v151 + 1;
  v154 = v151 + 8;
  v155 = (v151 + 8) & 0xFFFFFFFFFFFFFFF8;
  if (v153 <= v155 + 113)
    v153 = v155 + 113;
  v156 = v155 + 49;
  if (v153 > v156)
    v156 = v153;
  if (v156 <= 0x19)
    v157 = 25;
  else
    v157 = v156;
  v315 = ~v142;
  switch(*(_BYTE *)(v147 + v157))
  {
    case 0:
      v159 = *(_QWORD *)v147;
      *(_BYTE *)((v144 & ~v142) + 8) = *(_BYTE *)(v147 + 8);
      *(_QWORD *)v145 = v159;
      *(_BYTE *)(v145 + v157) = 0;
      v160 = v313;
      goto LABEL_198;
    case 1:
      v161 = *(_OWORD *)v147;
      *(_OWORD *)((v144 & ~v142) + 9) = *(_OWORD *)(v147 + 9);
      *(_OWORD *)v145 = v161;
      *(_BYTE *)(v145 + v157) = 1;
      v160 = v313;
      goto LABEL_198;
    case 2:
      *(_QWORD *)v145 = *(_QWORD *)v147;
      *(_BYTE *)(v145 + v157) = 2;
      goto LABEL_124;
    case 3:
      *(_QWORD *)v145 = *(_QWORD *)v147;
      *(_QWORD *)((v144 & ~v142) + 8) = *(_QWORD *)(v147 + 8);
      *(_BYTE *)(v145 + v157) = 3;
      swift_retain();
LABEL_124:
      swift_retain();
      v160 = v313;
      goto LABEL_198;
    case 4:
      v289 = ~v141;
      v294 = v150;
      v162 = *(_QWORD *)(v139 - 8);
      v163 = v139;
      v299 = v143;
      v164 = v145;
      v165 = *(_QWORD *)v147;
      v166 = *(_QWORD *)(v147 + 8);
      v167 = *(_BYTE *)(v147 + 16);
      sub_2141DD130(*(_QWORD *)v147, v166, v167);
      *(_QWORD *)v164 = v165;
      *(_QWORD *)(v164 + 8) = v166;
      *(_BYTE *)(v164 + 16) = v167;
      *(_QWORD *)(v164 + 24) = *(_QWORD *)(v147 + 24);
      v283 = (_QWORD *)v164;
      v168 = (_QWORD *)((v148 + v164) & v315);
      v169 = (_QWORD *)((v148 + v147) & v315);
      v170 = *((unsigned __int8 *)v169 + v310);
      swift_bridgeObjectRetain();
      v160 = v313;
      switch(v170)
      {
        case 0:
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v162 + 16))(v168, v169, v163);
          *((_BYTE *)v168 + v310) = 0;
          break;
        case 1:
          v200 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v162 + 16);
          v200(v168, v169, v163);
          v200((_QWORD *)(((unint64_t)v168 + v294) & v289), (_QWORD *)(((unint64_t)v169 + v294) & v289), v163);
          *((_BYTE *)v168 + v310) = 1;
          break;
        case 2:
          *v168 = *v169;
          *((_BYTE *)v168 + v310) = 2;
          swift_retain();
          break;
        case 3:
          *v168 = *v169;
          v168[1] = v169[1];
          *((_BYTE *)v168 + v310) = 3;
          swift_retain();
          swift_retain();
          break;
        case 4:
          *v168 = *v169;
          v201 = ((unint64_t)v168 + v303) & v301;
          v202 = ((unint64_t)v169 + v303) & v301;
          v203 = *(void (**)(unint64_t, unint64_t, uint64_t))(v304 + 16);
          swift_retain();
          v203(v201, v202, v306);
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v307 + 16))((v305 + v201) & v302, (v305 + v202) & v302, v308);
          *((_BYTE *)v168 + v310) = 4;
          break;
        default:
          if (v310 <= 3)
            v171 = v310;
          else
            v171 = 4;
          __asm { BR              X11 }
          return result;
      }
      v204 = 4;
      goto LABEL_196;
    case 5:
      v290 = ~v141;
      v295 = v150;
      v270 = *(_QWORD *)(v139 - 8);
      v272 = v139;
      v279 = v157;
      v299 = v33 + v142 + 1;
      v172 = *(_QWORD *)v147;
      v173 = *(_QWORD *)(v147 + 8);
      v174 = *(_BYTE *)(v147 + 16);
      sub_2141DD130(*(_QWORD *)v147, v173, v174);
      *(_QWORD *)v145 = v172;
      *(_QWORD *)((v144 & ~v142) + 8) = v173;
      *(_BYTE *)((v144 & ~v142) + 0x10) = v174;
      *(_QWORD *)((v144 & ~v142) + 0x18) = *(_QWORD *)(v147 + 24);
      v283 = (_QWORD *)(v144 & ~v142);
      v175 = (_QWORD *)((v148 + v145) & v315);
      v176 = (_QWORD *)((v148 + v147) & v315);
      v177 = *((unsigned __int8 *)v176 + v310);
      swift_bridgeObjectRetain();
      v157 = v279;
      v276 = v147;
      switch(v177)
      {
        case 0:
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v270 + 16))(v175, v176, v272);
          *((_BYTE *)v175 + v310) = 0;
          goto LABEL_159;
        case 1:
          v205 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v270 + 16);
          v205(v175, v176, v272);
          v205((_QWORD *)(((unint64_t)v175 + v295) & v290), (_QWORD *)(((unint64_t)v176 + v295) & v290), v272);
          v206 = 1;
          goto LABEL_158;
        case 2:
          *v175 = *v176;
          *((_BYTE *)v175 + v310) = 2;
          swift_retain();
          goto LABEL_159;
        case 3:
          *v175 = *v176;
          v175[1] = *(_QWORD *)(((v148 + v147) & v315) + 8);
          *((_BYTE *)v175 + v310) = 3;
          swift_retain();
          swift_retain();
          goto LABEL_159;
        case 4:
          *v175 = *v176;
          v207 = ((unint64_t)v175 + v303) & v301;
          v208 = ((unint64_t)v176 + v303) & v301;
          v209 = *(void (**)(unint64_t, unint64_t, uint64_t))(v304 + 16);
          swift_retain();
          v209(v207, v208, v306);
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v307 + 16))((v305 + v207) & v302, (v305 + v208) & v302, v308);
          v206 = 4;
LABEL_158:
          *((_BYTE *)v175 + v310) = v206;
LABEL_159:
          v210 = ((v144 | v142) + v152) & v315;
          v211 = ((v146 | v142) + v152) & v315;
          v212 = *(_QWORD *)v211;
          v213 = *(_QWORD *)(v211 + 8);
          v214 = *(_BYTE *)(v211 + 0x10);
          sub_2141DD130(*(_QWORD *)v211, v213, v214);
          *(_QWORD *)v210 = v212;
          *(_QWORD *)(v210 + 8) = v213;
          *(_BYTE *)(v210 + 16) = v214;
          *(_QWORD *)(v210 + 24) = *(_QWORD *)(v211 + 24);
          v215 = (_QWORD *)((v148 + v210) & v315);
          v216 = (_QWORD *)((v148 + v211) & v315);
          v217 = *((unsigned __int8 *)v216 + v310);
          swift_bridgeObjectRetain();
          v160 = v313;
          v147 = v276;
          switch(v217)
          {
            case 0:
              (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v270 + 16))(v215, v216, v272);
              *((_BYTE *)v215 + v310) = 0;
              goto LABEL_195;
            case 1:
              v253 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v270 + 16);
              v253(v215, v216, v272);
              v253((_QWORD *)(((unint64_t)v215 + v295) & v290), (_QWORD *)(((unint64_t)v216 + v295) & v290), v272);
              v254 = 1;
              goto LABEL_194;
            case 2:
              *v215 = *v216;
              *((_BYTE *)v215 + v310) = 2;
              swift_retain();
              goto LABEL_195;
            case 3:
              *v215 = *v216;
              v215[1] = v216[1];
              *((_BYTE *)v215 + v310) = 3;
              swift_retain();
              swift_retain();
              goto LABEL_195;
            case 4:
              *v215 = *v216;
              v255 = ((unint64_t)v215 + v303) & v301;
              v256 = ((unint64_t)v216 + v303) & v301;
              v257 = *(void (**)(unint64_t, unint64_t, uint64_t))(v304 + 16);
              swift_retain();
              v257(v255, v256, v306);
              (*(void (**)(unint64_t, unint64_t, uint64_t))(v307 + 16))((v305 + v255) & v302, (v305 + v256) & v302, v308);
              v254 = 4;
LABEL_194:
              *((_BYTE *)v215 + v310) = v254;
LABEL_195:
              v204 = 5;
              break;
            default:
              if (v310 <= 3)
                v218 = v310;
              else
                v218 = 4;
              __asm { BR              X11 }
              return result;
          }
          return result;
        default:
          if (v279 <= 3)
            v178 = v279;
          else
            v178 = 4;
          __asm { BR              X11 }
          return result;
      }
LABEL_196:
      v145 = (unint64_t)v283;
      goto LABEL_197;
    case 6:
      v284 = v154;
      v291 = ~v141;
      v179 = *(_QWORD *)(v139 - 8);
      v296 = v150;
      v300 = v33 + v142 + 1;
      v180 = v139;
      v181 = v145;
      v182 = *(_QWORD *)v147;
      v183 = *(_QWORD *)(v147 + 8);
      v184 = *(_BYTE *)(v147 + 16);
      sub_2141DD130(*(_QWORD *)v147, v183, v184);
      *(_QWORD *)v181 = v182;
      *(_QWORD *)(v181 + 8) = v183;
      *(_BYTE *)(v181 + 16) = v184;
      *(_QWORD *)(v181 + 24) = *(_QWORD *)(v147 + 24);
      v185 = (_QWORD *)v181;
      v186 = (_QWORD *)((v148 + v181) & v315);
      v187 = (_QWORD *)((v148 + v147) & v315);
      v188 = *((unsigned __int8 *)v187 + v310);
      swift_bridgeObjectRetain();
      v160 = v313;
      switch(v188)
      {
        case 0:
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v179 + 16))(v186, v187, v180);
          *((_BYTE *)v186 + v310) = 0;
          break;
        case 1:
          v222 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v179 + 16);
          v222(v186, v187, v180);
          v222((_QWORD *)(((unint64_t)v186 + v296) & v291), (_QWORD *)(((unint64_t)v187 + v296) & v291), v180);
          *((_BYTE *)v186 + v310) = 1;
          break;
        case 2:
          *v186 = *v187;
          *((_BYTE *)v186 + v310) = 2;
          swift_retain();
          break;
        case 3:
          *v186 = *v187;
          v186[1] = v187[1];
          *((_BYTE *)v186 + v310) = 3;
          swift_retain();
          swift_retain();
          break;
        case 4:
          *v186 = *v187;
          v219 = ((unint64_t)v186 + v303) & v301;
          v220 = ((unint64_t)v187 + v303) & v301;
          v221 = *(void (**)(unint64_t, unint64_t, uint64_t))(v304 + 16);
          swift_retain();
          v221(v219, v220, v306);
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v307 + 16))((v305 + v219) & v302, (v305 + v220) & v302, v308);
          *((_BYTE *)v186 + v310) = 4;
          break;
        default:
          if (v310 <= 3)
            v189 = v310;
          else
            v189 = 4;
          __asm { BR              X11 }
          return result;
      }
      v143 = v300;
      v145 = (unint64_t)v185;
      v223 = ((unint64_t)v185 + v284) & 0xFFFFFFFFFFFFFFF8;
      v224 = (v284 + v147) & 0xFFFFFFFFFFFFFFF8;
      *(_BYTE *)v223 = *(_BYTE *)v224;
      v225 = (_OWORD *)(v223 + 8);
      v226 = (_OWORD *)(v224 + 8);
      if (*(unsigned __int8 *)(v224 + 96) == 255)
      {
        v232 = *(_OWORD *)(v224 + 24);
        *v225 = *v226;
        *(_OWORD *)(v223 + 24) = v232;
        v233 = *(_OWORD *)(v224 + 40);
        v234 = *(_OWORD *)(v224 + 56);
        v235 = *(_OWORD *)(v224 + 72);
        *(_OWORD *)(v223 + 81) = *(_OWORD *)(v224 + 81);
        *(_OWORD *)(v223 + 56) = v234;
        *(_OWORD *)(v223 + 72) = v235;
        *(_OWORD *)(v223 + 40) = v233;
      }
      else
      {
        *v225 = *v226;
        v227 = *(_OWORD *)(v224 + 24);
        v228 = *(_OWORD *)(v224 + 40);
        v229 = *(_OWORD *)(v224 + 72);
        *(_OWORD *)(v223 + 56) = *(_OWORD *)(v224 + 56);
        *(_OWORD *)(v223 + 72) = v229;
        *(_OWORD *)(v223 + 24) = v227;
        *(_OWORD *)(v223 + 40) = v228;
        v230 = *(_QWORD *)(v224 + 88);
        v231 = *(_BYTE *)(v224 + 96);
        sub_2142625F8(v230, v231);
        *(_QWORD *)(v223 + 88) = v230;
        *(_BYTE *)(v223 + 96) = v231;
      }
      v236 = *(_QWORD *)(v224 + 104);
      v237 = *(_BYTE *)(v224 + 112);
      sub_2142625F8(v236, v237);
      *(_QWORD *)(v223 + 104) = v236;
      *(_BYTE *)(v223 + 112) = v237;
      *(_BYTE *)(v145 + v157) = 6;
      goto LABEL_198;
    case 7:
      v285 = v154;
      v292 = ~v141;
      v190 = *(_QWORD *)(v139 - 8);
      v297 = v150;
      v299 = v33 + v142 + 1;
      v191 = v139;
      v192 = (_QWORD *)v145;
      v193 = *(_QWORD *)v147;
      v194 = *(_QWORD *)(v147 + 8);
      v195 = *(_BYTE *)(v147 + 16);
      sub_2141DD130(*(_QWORD *)v147, v194, v195);
      *v192 = v193;
      v192[1] = v194;
      *((_BYTE *)v192 + 16) = v195;
      v192[3] = *(_QWORD *)(v147 + 24);
      v196 = (_QWORD *)(((unint64_t)v192 + v148) & v315);
      v197 = (_QWORD *)((v148 + v147) & v315);
      v198 = *((unsigned __int8 *)v197 + v310);
      swift_bridgeObjectRetain();
      v160 = v313;
      switch(v198)
      {
        case 0:
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v190 + 16))(v196, v197, v191);
          *((_BYTE *)v196 + v310) = 0;
          goto LABEL_181;
        case 1:
          v238 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v190 + 16);
          v238(v196, v197, v191);
          v238((_QWORD *)(((unint64_t)v196 + v297) & v292), (_QWORD *)(((unint64_t)v197 + v297) & v292), v191);
          v239 = 1;
          goto LABEL_180;
        case 2:
          *v196 = *v197;
          *((_BYTE *)v196 + v310) = 2;
          swift_retain();
          goto LABEL_181;
        case 3:
          *v196 = *v197;
          v196[1] = v197[1];
          *((_BYTE *)v196 + v310) = 3;
          swift_retain();
          swift_retain();
          goto LABEL_181;
        case 4:
          *v196 = *v197;
          v240 = ((unint64_t)v196 + v303) & v301;
          v241 = ((unint64_t)v197 + v303) & v301;
          v242 = *(void (**)(unint64_t, unint64_t, uint64_t))(v304 + 16);
          swift_retain();
          v242(v240, v241, v306);
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v307 + 16))((v305 + v240) & v302, (v305 + v241) & v302, v308);
          v239 = 4;
LABEL_180:
          *((_BYTE *)v196 + v310) = v239;
LABEL_181:
          v145 = (unint64_t)v192;
          v243 = ((unint64_t)v192 + v285) & 0xFFFFFFFFFFFFFFF8;
          v244 = (v285 + v147) & 0xFFFFFFFFFFFFFFF8;
          *(_BYTE *)v243 = *(_BYTE *)v244;
          *(_BYTE *)(v243 + 1) = *(_BYTE *)(v244 + 1);
          *(_BYTE *)(v243 + 2) = *(_BYTE *)(v244 + 2);
          v245 = *(unsigned __int8 *)(v244 + 24);
          if (v245 <= 0xFB)
          {
            v247 = *(_QWORD *)(v244 + 8);
            v248 = *(_QWORD *)(v244 + 16);
            sub_2141DD140(v247, v248, *(_BYTE *)(v244 + 24));
            *(_QWORD *)(v243 + 8) = v247;
            *(_QWORD *)(v243 + 16) = v248;
            *(_BYTE *)(v243 + 24) = v245;
          }
          else
          {
            v246 = *(_OWORD *)(v244 + 8);
            *(_BYTE *)(v243 + 24) = *(_BYTE *)(v244 + 24);
            *(_OWORD *)(v243 + 8) = v246;
          }
          v249 = *(unsigned __int8 *)(v244 + 48);
          if (v249 <= 0xFB)
          {
            v251 = *(_QWORD *)(v244 + 32);
            v252 = *(_QWORD *)(v244 + 40);
            sub_2141DD140(v251, v252, *(_BYTE *)(v244 + 48));
            *(_QWORD *)(v243 + 32) = v251;
            *(_QWORD *)(v243 + 40) = v252;
            *(_BYTE *)(v243 + 48) = v249;
          }
          else
          {
            v250 = *(_OWORD *)(v244 + 32);
            *(_BYTE *)(v243 + 48) = *(_BYTE *)(v244 + 48);
            *(_OWORD *)(v243 + 32) = v250;
          }
          v204 = 7;
          break;
        default:
          if (v310 <= 3)
            v199 = v310;
          else
            v199 = 4;
          __asm { BR              X11 }
          return result;
      }
LABEL_197:
      *(_BYTE *)(v145 + v157) = v204;
      v143 = v299;
LABEL_198:
      *(_QWORD *)(((v145 | 7) + v157 + 1) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((v147 | 7) + v157 + 1) & 0xFFFFFFFFFFFFF8);
      v258 = ((v157 + ((v143 + (v311 & v316)) & v315) + 8) & 0xFFFFFFFFFFFFFFF8) + 8;
      v259 = v160 + v258 + 7;
      v260 = (_QWORD *)((v312 + v258 + 7) & 0xFFFFFFFFFFFFFFF8);
      v259 &= 0xFFFFFFFFFFFFF8uLL;
      *(_QWORD *)v259 = *v260;
      v261 = (_QWORD *)(((unint64_t)v260 + 15) & 0xFFFFFFFFFFFFFFF8);
      v262 = (_QWORD *)((v259 + 15) & 0xFFFFFFFFFFFFFFF8);
      *v262 = *v261;
      v263 = (_QWORD *)(((unint64_t)v261 + 15) & 0xFFFFFFFFFFFFFFF8);
      v264 = (_QWORD *)(((unint64_t)v262 + 15) & 0xFFFFFFFFFFFFF8);
      *v264 = *v263;
      v265 = ((unint64_t)v264 + 15) & 0xFFFFFFFFFFFFFFF8;
      v266 = (unint64_t *)(((unint64_t)v263 + 15) & 0xFFFFFFFFFFFFFFF8);
      v267 = *v266;
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v267 < 0xFFFFFFFF)
      {
        *(_OWORD *)v265 = *(_OWORD *)v266;
      }
      else
      {
        *(_QWORD *)v265 = v267;
        *(_QWORD *)(v265 + 8) = v266[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      return v160;
    default:
      if (v157 <= 3)
        v158 = v157;
      else
        v158 = 4;
      __asm { BR              X13 }
      return result;
  }
}

uint64_t sub_21427984C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(uint64_t, uint64_t);
  unint64_t v54;
  void (*v55)(uint64_t, uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(uint64_t, uint64_t);
  unint64_t v61;
  int v62;
  void (*v63)(uint64_t, uint64_t);
  uint64_t v64;
  unint64_t v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  _QWORD *v76;
  _QWORD *v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  _QWORD *v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  _QWORD *v89;
  _QWORD *v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  _QWORD *v96;
  _QWORD *v97;
  int v98;
  uint64_t v99;
  void (*v100)(_QWORD *, _QWORD *, uint64_t);
  char v101;
  unint64_t v102;
  unint64_t v103;
  void (*v104)(unint64_t, unint64_t, uint64_t);
  char v105;
  uint64_t v106;
  unint64_t v107;
  void (*v108)(_QWORD *, _QWORD *, uint64_t);
  char v109;
  unint64_t v110;
  unint64_t v111;
  void (*v112)(unint64_t, unint64_t, uint64_t);
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char v118;
  _QWORD *v119;
  _QWORD *v120;
  int v121;
  unint64_t v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  void (*v126)(unint64_t, unint64_t, uint64_t);
  char v127;
  void (*v128)(_QWORD *, _QWORD *, uint64_t);
  unint64_t v129;
  unint64_t v130;
  _OWORD *v131;
  _OWORD *v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  uint64_t v136;
  char v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  uint64_t v142;
  char v143;
  void (*v144)(_QWORD *, _QWORD *, uint64_t);
  char v145;
  unint64_t v146;
  unint64_t v147;
  void (*v148)(unint64_t, unint64_t, uint64_t);
  unint64_t v149;
  unint64_t v150;
  unsigned int v151;
  __int128 v152;
  uint64_t v153;
  uint64_t v154;
  unsigned int v155;
  __int128 v156;
  uint64_t v157;
  uint64_t v158;
  void (*v159)(_QWORD *, _QWORD *, uint64_t);
  char v160;
  unint64_t v161;
  unint64_t v162;
  void (*v163)(unint64_t, unint64_t, uint64_t);
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t v177;
  unint64_t v178;
  uint64_t v179;
  unint64_t v180;
  unint64_t v181;
  unint64_t v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t v186;
  uint64_t v187;
  unint64_t v188;
  unint64_t v189;
  unint64_t v190;
  unint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  void (*v200)(uint64_t, uint64_t);
  unint64_t v201;
  void (*v202)(uint64_t, uint64_t);
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  void (*v207)(uint64_t, uint64_t);
  unint64_t v208;
  int v209;
  void (*v210)(uint64_t, uint64_t);
  uint64_t v211;
  unint64_t v212;
  unsigned int v213;
  unsigned int v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  __int128 v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  char v222;
  _QWORD *v223;
  _QWORD *v224;
  int v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  char v229;
  _QWORD *v230;
  _QWORD *v231;
  int v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  char v236;
  _QWORD *v237;
  _QWORD *v238;
  int v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  char v243;
  _QWORD *v244;
  _QWORD *v245;
  int v246;
  uint64_t v247;
  void (*v248)(_QWORD *, _QWORD *, uint64_t);
  char v249;
  unint64_t v250;
  unint64_t v251;
  void (*v252)(unint64_t, unint64_t, uint64_t);
  char v253;
  void (*v254)(_QWORD *, _QWORD *, uint64_t);
  char v255;
  unint64_t v256;
  unint64_t v257;
  void (*v258)(unint64_t, unint64_t, uint64_t);
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  char v263;
  _QWORD *v264;
  _QWORD *v265;
  int v266;
  uint64_t v267;
  unint64_t v268;
  unint64_t v269;
  void (*v270)(unint64_t, unint64_t, uint64_t);
  void (*v271)(_QWORD *, _QWORD *, uint64_t);
  unint64_t v272;
  unint64_t v273;
  _OWORD *v274;
  _OWORD *v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  uint64_t v279;
  char v280;
  __int128 v281;
  __int128 v282;
  __int128 v283;
  __int128 v284;
  uint64_t v285;
  char v286;
  void (*v287)(_QWORD *, _QWORD *, uint64_t);
  unint64_t v288;
  unint64_t v289;
  void (*v290)(unint64_t, unint64_t, uint64_t);
  unint64_t v291;
  unint64_t v292;
  unsigned int v293;
  __int128 v294;
  uint64_t v295;
  uint64_t v296;
  unsigned int v297;
  __int128 v298;
  uint64_t v299;
  uint64_t v300;
  void (*v301)(_QWORD *, _QWORD *, uint64_t);
  char v302;
  unint64_t v303;
  unint64_t v304;
  void (*v305)(unint64_t, unint64_t, uint64_t);
  unint64_t v306;
  uint64_t v307;
  unint64_t v308;
  uint64_t v309;
  uint64_t v310;
  unint64_t v311;
  _QWORD *v312;
  unint64_t *v313;
  unint64_t v314;
  uint64_t result;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  unint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  unint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  unint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;

  v3 = a3;
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 24))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(v3 + 24);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v359 = sub_214423C48();
  v11 = *(_QWORD *)(v359 - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v361 = sub_214423C54();
  v13 = *(_QWORD *)(v361 - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v15 = v14 | v12;
  v16 = v14 | v12 | v10;
  v17 = v16 | 7;
  v18 = (v16 | 7) + v7;
  v19 = a1;
  v20 = v18 + a1;
  v21 = ~(v16 | 7);
  v22 = v20 & v21;
  v366 = v18;
  v367 = a2;
  v23 = v18 + a2;
  v24 = v23 & v21;
  v368 = v21;
  v360 = v13;
  v358 = v14;
  v355 = v11;
  if ((v20 & v21) == (v23 & v21))
  {
    v34 = *(_QWORD *)(v9 + 64);
    v35 = *(_QWORD *)(v11 + 64);
    v36 = *(_QWORD *)(v13 + 64);
    v37 = (v16 + 32) & v21;
    if (((v34 + v10) & ~v10) + v34 > v34)
      v34 += (v34 + v10) & ~v10;
    v354 = ~v12;
    v353 = v12 + 8;
    v356 = *(_QWORD *)(v11 + 64);
    v357 = ~v14;
    v38 = ((((v12 + 8) & ~v12) + v14 + v35) & ~v14) + v36;
    if (v34 <= v38)
      v34 = ((((v12 + 8) & ~v12) + v14 + v35) & ~v14) + v36;
    if (v34 <= 0x10)
      v34 = 16;
    v39 = (v37 | 1) + v34;
    v40 = ((v39 + v17) & v21) + v39;
    if (v39 > v40)
      v40 = v39;
    v41 = (v39 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (v40 <= v41 + 113)
      v40 = v41 + 113;
    v42 = v41 + 49;
    if (v40 > v42)
      v42 = v40;
    if (v42 <= 0x19)
      v32 = 25;
    else
      v32 = v42;
    v43 = v19;
  }
  else
  {
    v319 = v23;
    v325 = v20;
    v327 = v8;
    v351 = v3;
    v362 = v16 + 32;
    v25 = (v16 + 32) & v21;
    v335 = v9;
    v26 = *(_QWORD *)(v9 + 64);
    v317 = v26 + v10;
    v27 = ((v26 + v10) & ~v10) + v26;
    if (v27 <= v26)
      v27 = *(_QWORD *)(v9 + 64);
    v354 = ~v12;
    v353 = v12 + 8;
    v356 = *(_QWORD *)(v11 + 64);
    v357 = ~v14;
    v347 = ((((v12 + 8) & ~v12) + v14 + v356) & ~v14) + *(_QWORD *)(v13 + 64);
    if (v27 <= v347)
      v27 = ((((v12 + 8) & ~v12) + v14 + v356) & ~v14) + *(_QWORD *)(v13 + 64);
    if (v27 <= 0x10)
      v27 = 16;
    v364 = v27;
    v28 = (v25 | 1) + v27;
    v29 = ((v28 + v17) & v21) + v28;
    if (v28 > v29)
      v29 = v28;
    v30 = (v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (v29 <= v30 + 113)
      v29 = v30 + 113;
    v31 = v30 + 49;
    if (v29 <= v31)
      v29 = v31;
    if (v29 <= 0x19)
      v32 = 25;
    else
      v32 = v29;
    v43 = v19;
    v349 = v15;
    v323 = ~v10;
    switch(*(_BYTE *)(v22 + v32))
    {
      case 0:
      case 1:
        break;
      case 2:
LABEL_39:
        swift_release();
        break;
      case 3:
LABEL_40:
        swift_release();
        swift_release();
        break;
      case 4:
        sub_2141ED0BC(*(_QWORD *)(v20 & v21), *(_QWORD *)((v20 & v21) + 8), *(_BYTE *)((v20 & v21) + 0x10));
        swift_bridgeObjectRelease();
        v44 = (v362 + v22) & v21;
        switch(*(_BYTE *)(v44 + v364))
        {
          case 0:
            goto LABEL_95;
          case 1:
            v337 = v43;
            v52 = v327;
            v53 = *(void (**)(uint64_t, uint64_t))(v335 + 8);
            v53(v44, v327);
            v54 = v44 + v10 + v26;
            goto LABEL_97;
          case 2:
            goto LABEL_39;
          case 3:
            goto LABEL_40;
          case 4:
            goto LABEL_98;
          default:
            if (v364 <= 3)
              v45 = v364;
            else
              v45 = 4;
            __asm { BR              X12 }
            return result;
        }
      case 5:
        sub_2141ED0BC(*(_QWORD *)(v20 & v21), *(_QWORD *)((v20 & v21) + 8), *(_BYTE *)((v20 & v21) + 0x10));
        swift_bridgeObjectRelease();
        v46 = (v362 + v22) & v21;
        switch(*(_BYTE *)(v46 + v364))
        {
          case 0:
            (*(void (**)(uint64_t, uint64_t))(v335 + 8))((v362 + v22) & v21, v327);
            break;
          case 1:
            v338 = v43;
            v55 = *(void (**)(uint64_t, uint64_t))(v335 + 8);
            v55(v46, v327);
            v55((v46 + v10 + v26) & v323, v327);
            v43 = v338;
            break;
          case 2:
            swift_release();
            break;
          case 3:
            swift_release();
            swift_release();
            break;
          case 4:
            swift_release();
            v56 = (v353 + v46) & v354;
            (*(void (**)(uint64_t, uint64_t))(v355 + 8))(v56, v359);
            (*(void (**)(uint64_t, uint64_t))(v360 + 8))((v56 + v358 + v356) & v357, v361);
            break;
          default:
            if (v364 <= 3)
              v47 = v364;
            else
              v47 = 4;
            __asm { BR              X12 }
            return result;
        }
        v57 = ((v325 | v17) + v28) & v21;
        sub_2141ED0BC(*(_QWORD *)v57, *(_QWORD *)(v57 + 8), *(_BYTE *)(v57 + 0x10));
        swift_bridgeObjectRelease();
        v44 = (v362 + v57) & v21;
        switch(*(_BYTE *)(v44 + v364))
        {
          case 0:
LABEL_95:
            (*(void (**)(uint64_t, uint64_t))(v335 + 8))(v44, v327);
            goto LABEL_104;
          case 1:
            v337 = v43;
            v52 = v327;
            v53 = *(void (**)(uint64_t, uint64_t))(v335 + 8);
            v53(v44, v327);
            v54 = v317 + v44;
LABEL_97:
            v53(v54 & v323, v52);
            v43 = v337;
            goto LABEL_104;
          case 2:
            goto LABEL_39;
          case 3:
            goto LABEL_40;
          case 4:
LABEL_98:
            swift_release();
            v68 = (v353 + v44) & v354;
            (*(void (**)(uint64_t, uint64_t))(v355 + 8))(v68, v359);
            (*(void (**)(uint64_t, uint64_t))(v360 + 8))((v356 + v358 + v68) & v357, v361);
            goto LABEL_104;
          default:
            if (v364 <= 3)
              v58 = v364;
            else
              v58 = 4;
            __asm { BR              X12 }
            return result;
        }
      case 6:
        sub_2141ED0BC(*(_QWORD *)(v20 & v21), *(_QWORD *)((v20 & v21) + 8), *(_BYTE *)((v20 & v21) + 0x10));
        swift_bridgeObjectRelease();
        v48 = (v362 + v22) & v21;
        switch(*(_BYTE *)(v48 + v364))
        {
          case 0:
            (*(void (**)(uint64_t, uint64_t))(v335 + 8))((v362 + v22) & v21, v327);
            break;
          case 1:
            v339 = v43;
            v60 = *(void (**)(uint64_t, uint64_t))(v335 + 8);
            v60(v48, v327);
            v60((v48 + v10 + v26) & v323, v327);
            v43 = v339;
            break;
          case 2:
            swift_release();
            break;
          case 3:
            swift_release();
            swift_release();
            break;
          case 4:
            swift_release();
            v59 = (v353 + v48) & v354;
            (*(void (**)(uint64_t, uint64_t))(v355 + 8))(v59, v359);
            (*(void (**)(uint64_t, uint64_t))(v360 + 8))((v59 + v358 + v356) & v357, v361);
            break;
          default:
            if (v364 <= 3)
              v49 = v364;
            else
              v49 = 4;
            __asm { BR              X12 }
            return result;
        }
        v61 = ((v22 | 7) + v28) & 0xFFFFFFFFFFFFFFF8;
        v62 = *(unsigned __int8 *)(v61 + 96);
        if (v62 != 255)
          sub_2142637C0(*(_QWORD *)(v61 + 88), v62 & 1);
        sub_2142637C0(*(_QWORD *)(v61 + 104), *(_BYTE *)(v61 + 112));
        break;
      case 7:
        sub_2141ED0BC(*(_QWORD *)(v20 & v21), *(_QWORD *)((v20 & v21) + 8), *(_BYTE *)((v20 & v21) + 0x10));
        swift_bridgeObjectRelease();
        v50 = (v362 + v22) & v21;
        switch(*(_BYTE *)(v50 + v364))
        {
          case 0:
            (*(void (**)(uint64_t, uint64_t))(v335 + 8))((v362 + v22) & v21, v327);
            break;
          case 1:
            v340 = v43;
            v63 = *(void (**)(uint64_t, uint64_t))(v335 + 8);
            v63(v50, v327);
            v63((v50 + v10 + v26) & v323, v327);
            v43 = v340;
            break;
          case 2:
            swift_release();
            break;
          case 3:
            swift_release();
            swift_release();
            break;
          case 4:
            swift_release();
            v64 = (v353 + v50) & v354;
            (*(void (**)(uint64_t, uint64_t))(v355 + 8))(v64, v359);
            (*(void (**)(uint64_t, uint64_t))(v360 + 8))((v64 + v358 + v356) & v357, v361);
            break;
          default:
            if (v364 <= 3)
              v51 = v364;
            else
              v51 = 4;
            __asm { BR              X12 }
            return result;
        }
        v65 = ((v22 | 7) + v28) & 0xFFFFFFFFFFFFFFF8;
        v66 = *(unsigned __int8 *)(v65 + 24);
        if (v66 <= 0xFB)
          sub_2141EF1B0(*(_QWORD *)(v65 + 8), *(_QWORD *)(v65 + 16), v66);
        v67 = *(unsigned __int8 *)(v65 + 48);
        if (v67 <= 0xFB)
          sub_2141EF1B0(*(_QWORD *)(v65 + 32), *(_QWORD *)(v65 + 40), v67);
        break;
      default:
        if (v32 <= 3)
          v33 = v32;
        else
          v33 = 4;
        __asm { BR              X12 }
        return result;
    }
LABEL_104:
    switch(*(_BYTE *)(v24 + v32))
    {
      case 0:
        v70 = *(_QWORD *)v24;
        *(_BYTE *)(v22 + 8) = *(_BYTE *)(v24 + 8);
        *(_QWORD *)v22 = v70;
        *(_BYTE *)(v22 + v32) = 0;
        goto LABEL_161;
      case 1:
        v71 = *(_OWORD *)v24;
        *(_OWORD *)(v22 + 9) = *(_OWORD *)(v24 + 9);
        *(_OWORD *)v22 = v71;
        v72 = 1;
        goto LABEL_160;
      case 2:
        *(_QWORD *)v22 = *(_QWORD *)v24;
        *(_BYTE *)(v22 + v32) = 2;
        swift_retain();
        goto LABEL_161;
      case 3:
        *(_QWORD *)v22 = *(_QWORD *)v24;
        *(_QWORD *)(v22 + 8) = *(_QWORD *)(v24 + 8);
        *(_BYTE *)(v22 + v32) = 3;
        swift_retain();
        swift_retain();
        goto LABEL_161;
      case 4:
        v341 = v43;
        v73 = *(_QWORD *)v24;
        v74 = *(_QWORD *)(v24 + 8);
        v75 = *(_BYTE *)(v24 + 16);
        sub_2141DD130(*(_QWORD *)v24, v74, v75);
        *(_QWORD *)v22 = v73;
        *(_QWORD *)(v22 + 8) = v74;
        *(_BYTE *)(v22 + 16) = v75;
        *(_QWORD *)(v22 + 24) = *(_QWORD *)(v24 + 24);
        v76 = (_QWORD *)((v362 + v22) & v368);
        v77 = (_QWORD *)((v362 + v24) & v368);
        v78 = *((unsigned __int8 *)v77 + v364);
        swift_bridgeObjectRetain();
        switch(v78)
        {
          case 0:
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v335 + 16))(v76, v77, v327);
            *((_BYTE *)v76 + v364) = 0;
            goto LABEL_136;
          case 1:
            v100 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v335 + 16);
            v100(v76, v77, v327);
            v100((_QWORD *)(((unint64_t)v76 + v10 + v26) & v323), (_QWORD *)(((unint64_t)v77 + v10 + v26) & v323), v327);
            v101 = 1;
            goto LABEL_135;
          case 2:
            *v76 = *v77;
            *((_BYTE *)v76 + v364) = 2;
            swift_retain();
            goto LABEL_136;
          case 3:
            *v76 = *v77;
            *(_QWORD *)(((v362 + v22) & v368) + 8) = *(_QWORD *)(((v362 + v24) & v368) + 8);
            *((_BYTE *)v76 + v364) = 3;
            swift_retain();
            swift_retain();
            goto LABEL_136;
          case 4:
            *v76 = *v77;
            v102 = ((unint64_t)v76 + v353) & v354;
            v103 = ((unint64_t)v77 + v353) & v354;
            v104 = *(void (**)(unint64_t, unint64_t, uint64_t))(v355 + 16);
            swift_retain();
            v104(v102, v103, v359);
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v360 + 16))((v102 + v358 + v356) & v357, (v103 + v358 + v356) & v357, v361);
            v101 = 4;
LABEL_135:
            *((_BYTE *)v76 + v364) = v101;
LABEL_136:
            v3 = v351;
            v105 = 4;
            break;
          default:
            if (v364 <= 3)
              v79 = v364;
            else
              v79 = 4;
            __asm { BR              X11 }
            return result;
        }
        goto LABEL_185;
      case 5:
        v316 = v32;
        v341 = v43;
        v80 = *(_QWORD *)v24;
        v81 = *(_QWORD *)(v24 + 8);
        v82 = *(_BYTE *)(v24 + 16);
        sub_2141DD130(*(_QWORD *)v24, v81, v82);
        *(_QWORD *)v22 = v80;
        *(_QWORD *)(v22 + 8) = v81;
        *(_BYTE *)(v22 + 16) = v82;
        *(_QWORD *)(v22 + 24) = *(_QWORD *)(v24 + 24);
        v83 = (_QWORD *)((v362 + v22) & v368);
        v84 = (_QWORD *)((v362 + v24) & v368);
        swift_bridgeObjectRetain();
        v106 = v368;
        switch((int)v368)
        {
          case 0:
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v335 + 16))(v83, v84, v327);
            v107 = v364;
            *((_BYTE *)v83 + v364) = 0;
            goto LABEL_144;
          case 1:
            v108 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v335 + 16);
            v108(v83, v84, v327);
            v108((_QWORD *)(((unint64_t)v83 + v10 + v26) & v323), (_QWORD *)(((unint64_t)v84 + v10 + v26) & v323), v327);
            v106 = v368;
            v109 = 1;
            goto LABEL_143;
          case 2:
            *v83 = *v84;
            v107 = v364;
            *((_BYTE *)v83 + v364) = 2;
            swift_retain();
            goto LABEL_144;
          case 3:
            *v83 = *v84;
            *(_QWORD *)(((v362 + v22) & v368) + 8) = *(_QWORD *)(((v362 + v24) & v368) + 8);
            v107 = v364;
            *((_BYTE *)v83 + v364) = 3;
            swift_retain();
            swift_retain();
            goto LABEL_144;
          case 4:
            *v83 = *v84;
            v110 = ((unint64_t)v83 + v353) & v354;
            v111 = ((unint64_t)v84 + v353) & v354;
            v112 = *(void (**)(unint64_t, unint64_t, uint64_t))(v355 + 16);
            swift_retain();
            v112(v110, v111, v359);
            v113 = v110 + v358 + v356;
            v106 = v368;
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v360 + 16))(v113 & v357, (v111 + v358 + v356) & v357, v361);
            v109 = 4;
LABEL_143:
            v107 = v364;
            *((_BYTE *)v83 + v364) = v109;
LABEL_144:
            v3 = v351;
            v114 = ((v325 | v17) + v28) & v106;
            v115 = ((v319 | v17) + v28) & v106;
            v116 = *(_QWORD *)v115;
            v117 = *(_QWORD *)(v115 + 8);
            v118 = *(_BYTE *)(v115 + 0x10);
            sub_2141DD130(*(_QWORD *)v115, v117, v118);
            *(_QWORD *)v114 = v116;
            *(_QWORD *)(v114 + 8) = v117;
            *(_BYTE *)(v114 + 16) = v118;
            *(_QWORD *)(v114 + 24) = *(_QWORD *)(v115 + 24);
            v119 = (_QWORD *)((v362 + v114) & v368);
            v120 = (_QWORD *)((v362 + v115) & v368);
            v121 = *((unsigned __int8 *)v120 + v107);
            swift_bridgeObjectRetain();
            v122 = v107;
            v32 = v316;
            switch(v121)
            {
              case 0:
                (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v335 + 16))(v119, v120, v327);
                *((_BYTE *)v119 + v122) = 0;
                break;
              case 1:
                v159 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v335 + 16);
                v159(v119, v120, v327);
                v159((_QWORD *)(((unint64_t)v119 + v317) & v323), (_QWORD *)(((unint64_t)v120 + v317) & v323), v327);
                v160 = 1;
                goto LABEL_183;
              case 2:
                *v119 = *v120;
                *((_BYTE *)v119 + v122) = 2;
                goto LABEL_181;
              case 3:
                *v119 = *v120;
                v119[1] = v120[1];
                *((_BYTE *)v119 + v122) = 3;
                swift_retain();
                v3 = v351;
LABEL_181:
                swift_retain();
                break;
              case 4:
                *v119 = *v120;
                v161 = ((unint64_t)v119 + v353) & v354;
                v162 = ((unint64_t)v120 + v353) & v354;
                v163 = *(void (**)(unint64_t, unint64_t, uint64_t))(v355 + 16);
                swift_retain();
                v163(v161, v162, v359);
                v164 = v356 + v358 + v161;
                v3 = v351;
                (*(void (**)(unint64_t, unint64_t, uint64_t))(v360 + 16))(v164 & v357, (v356 + v358 + v162) & v357, v361);
                v160 = 4;
LABEL_183:
                *((_BYTE *)v119 + v122) = v160;
                break;
              default:
                if (v122 <= 3)
                  v123 = v122;
                else
                  v123 = 4;
                __asm { BR              X11 }
                return result;
            }
            v105 = 5;
            break;
          default:
            if (v327 <= 3)
              v85 = v327;
            else
              v85 = 4;
            __asm { BR              X11 }
            return result;
        }
LABEL_185:
        *(_BYTE *)(v22 + v32) = v105;
        v43 = v341;
        goto LABEL_186;
      case 6:
        v342 = v43;
        v86 = *(_QWORD *)v24;
        v87 = *(_QWORD *)(v24 + 8);
        v88 = *(_BYTE *)(v24 + 16);
        sub_2141DD130(*(_QWORD *)v24, v87, v88);
        *(_QWORD *)v22 = v86;
        *(_QWORD *)(v22 + 8) = v87;
        *(_BYTE *)(v22 + 16) = v88;
        *(_QWORD *)(v22 + 24) = *(_QWORD *)(v24 + 24);
        v89 = (_QWORD *)((v362 + v22) & v368);
        v90 = (_QWORD *)((v362 + v24) & v368);
        v91 = *((unsigned __int8 *)v90 + v364);
        swift_bridgeObjectRetain();
        switch(v91)
        {
          case 0:
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v335 + 16))(v89, v90, v327);
            *((_BYTE *)v89 + v364) = 0;
            goto LABEL_156;
          case 1:
            v128 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v335 + 16);
            v128(v89, v90, v327);
            v128((_QWORD *)(((unint64_t)v89 + v10 + v26) & v323), (_QWORD *)(((unint64_t)v90 + v10 + v26) & v323), v327);
            v127 = 1;
            goto LABEL_155;
          case 2:
            *v89 = *v90;
            *((_BYTE *)v89 + v364) = 2;
            swift_retain();
            goto LABEL_156;
          case 3:
            *v89 = *v90;
            *(_QWORD *)(((v362 + v22) & v368) + 8) = *(_QWORD *)(((v362 + v24) & v368) + 8);
            *((_BYTE *)v89 + v364) = 3;
            swift_retain();
            swift_retain();
            goto LABEL_156;
          case 4:
            *v89 = *v90;
            v124 = ((unint64_t)v89 + v353) & v354;
            v125 = ((unint64_t)v90 + v353) & v354;
            v126 = *(void (**)(unint64_t, unint64_t, uint64_t))(v355 + 16);
            swift_retain();
            v126(v124, v125, v359);
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v360 + 16))((v124 + v358 + v356) & v357, (v125 + v358 + v356) & v357, v361);
            v127 = 4;
LABEL_155:
            *((_BYTE *)v89 + v364) = v127;
LABEL_156:
            v43 = v342;
            v129 = ((v22 | 7) + v28) & 0xFFFFFFFFFFFFFFF8;
            v130 = ((v24 | 7) + v28) & 0xFFFFFFFFFFFFFFF8;
            *(_BYTE *)v129 = *(_BYTE *)v130;
            v131 = (_OWORD *)(v129 + 8);
            v132 = (_OWORD *)(v130 + 8);
            if (*(unsigned __int8 *)(v130 + 96) == 255)
            {
              v138 = *(_OWORD *)(v130 + 24);
              *v131 = *v132;
              *(_OWORD *)(v129 + 24) = v138;
              v139 = *(_OWORD *)(v130 + 40);
              v140 = *(_OWORD *)(v130 + 56);
              v141 = *(_OWORD *)(v130 + 72);
              *(_OWORD *)(v129 + 81) = *(_OWORD *)(v130 + 81);
              *(_OWORD *)(v129 + 56) = v140;
              *(_OWORD *)(v129 + 72) = v141;
              *(_OWORD *)(v129 + 40) = v139;
            }
            else
            {
              *v131 = *v132;
              v133 = *(_OWORD *)(v130 + 24);
              v134 = *(_OWORD *)(v130 + 40);
              v135 = *(_OWORD *)(v130 + 72);
              *(_OWORD *)(v129 + 56) = *(_OWORD *)(v130 + 56);
              *(_OWORD *)(v129 + 72) = v135;
              *(_OWORD *)(v129 + 24) = v133;
              *(_OWORD *)(v129 + 40) = v134;
              v136 = *(_QWORD *)(v130 + 88);
              v137 = *(_BYTE *)(v130 + 96);
              sub_2142625F8(v136, v137);
              *(_QWORD *)(v129 + 88) = v136;
              *(_BYTE *)(v129 + 96) = v137;
            }
            v142 = *(_QWORD *)(v130 + 104);
            v143 = *(_BYTE *)(v130 + 112);
            sub_2142625F8(v142, v143);
            *(_QWORD *)(v129 + 104) = v142;
            *(_BYTE *)(v129 + 112) = v143;
            v72 = 6;
            break;
          default:
            if (v364 <= 3)
              v92 = v364;
            else
              v92 = 4;
            __asm { BR              X11 }
            return result;
        }
LABEL_160:
        *(_BYTE *)(v22 + v32) = v72;
LABEL_161:
        v3 = v351;
LABEL_186:
        v38 = v347;
        v15 = v349;
        break;
      case 7:
        v343 = v43;
        v93 = *(_QWORD *)v24;
        v94 = *(_QWORD *)(v24 + 8);
        v95 = *(_BYTE *)(v24 + 16);
        sub_2141DD130(*(_QWORD *)v24, v94, v95);
        *(_QWORD *)v22 = v93;
        *(_QWORD *)(v22 + 8) = v94;
        *(_BYTE *)(v22 + 16) = v95;
        *(_QWORD *)(v22 + 24) = *(_QWORD *)(v24 + 24);
        v96 = (_QWORD *)((v362 + v22) & v368);
        v97 = (_QWORD *)((v362 + v24) & v368);
        v98 = *((unsigned __int8 *)v97 + v364);
        swift_bridgeObjectRetain();
        switch(v98)
        {
          case 0:
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v335 + 16))(v96, v97, v327);
            *((_BYTE *)v96 + v364) = 0;
            goto LABEL_169;
          case 1:
            v144 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v335 + 16);
            v144(v96, v97, v327);
            v144((_QWORD *)(((unint64_t)v96 + v10 + v26) & v323), (_QWORD *)(((unint64_t)v97 + v10 + v26) & v323), v327);
            v145 = 1;
            goto LABEL_168;
          case 2:
            *v96 = *v97;
            *((_BYTE *)v96 + v364) = 2;
            swift_retain();
            goto LABEL_169;
          case 3:
            *v96 = *v97;
            *(_QWORD *)(((v362 + v22) & v368) + 8) = *(_QWORD *)(((v362 + v24) & v368) + 8);
            *((_BYTE *)v96 + v364) = 3;
            swift_retain();
            swift_retain();
            goto LABEL_169;
          case 4:
            *v96 = *v97;
            v146 = ((unint64_t)v96 + v353) & v354;
            v147 = ((unint64_t)v97 + v353) & v354;
            v148 = *(void (**)(unint64_t, unint64_t, uint64_t))(v355 + 16);
            swift_retain();
            v148(v146, v147, v359);
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v360 + 16))((v146 + v358 + v356) & v357, (v147 + v358 + v356) & v357, v361);
            v145 = 4;
LABEL_168:
            *((_BYTE *)v96 + v364) = v145;
LABEL_169:
            v149 = ((v22 | 7) + v28) & 0xFFFFFFFFFFFFFFF8;
            v150 = ((v24 | 7) + v28) & 0xFFFFFFFFFFFFFFF8;
            *(_BYTE *)v149 = *(_BYTE *)v150;
            *(_BYTE *)(v149 + 1) = *(_BYTE *)(v150 + 1);
            *(_BYTE *)(v149 + 2) = *(_BYTE *)(v150 + 2);
            v151 = *(unsigned __int8 *)(v150 + 24);
            if (v151 <= 0xFB)
            {
              v153 = *(_QWORD *)(v150 + 8);
              v154 = *(_QWORD *)(v150 + 16);
              sub_2141DD140(v153, v154, *(_BYTE *)(v150 + 24));
              *(_QWORD *)(v149 + 8) = v153;
              *(_QWORD *)(v149 + 16) = v154;
              *(_BYTE *)(v149 + 24) = v151;
            }
            else
            {
              v152 = *(_OWORD *)(v150 + 8);
              *(_BYTE *)(v149 + 24) = *(_BYTE *)(v150 + 24);
              *(_OWORD *)(v149 + 8) = v152;
            }
            v155 = *(unsigned __int8 *)(v150 + 48);
            if (v155 <= 0xFB)
            {
              v157 = *(_QWORD *)(v150 + 32);
              v158 = *(_QWORD *)(v150 + 40);
              sub_2141DD140(v157, v158, *(_BYTE *)(v150 + 48));
              *(_QWORD *)(v149 + 32) = v157;
              *(_QWORD *)(v149 + 40) = v158;
              *(_BYTE *)(v149 + 48) = v155;
            }
            else
            {
              v156 = *(_OWORD *)(v150 + 32);
              *(_BYTE *)(v149 + 48) = *(_BYTE *)(v150 + 48);
              *(_OWORD *)(v149 + 32) = v156;
            }
            v43 = v343;
            v38 = v347;
            v15 = v349;
            v3 = v351;
            *(_BYTE *)(v22 + v32) = 7;
            break;
          default:
            if (v364 <= 3)
              v99 = v364;
            else
              v99 = 4;
            __asm { BR              X11 }
            return result;
        }
        return result;
      default:
        if (v32 <= 3)
          v69 = v32;
        else
          v69 = 4;
        __asm { BR              X12 }
        return result;
    }
  }
  v165 = *(_QWORD *)(v3 + 32);
  v166 = *(_QWORD *)(v165 - 8);
  v167 = *(unsigned __int8 *)(v166 + 80);
  v168 = v15 | v167;
  v169 = v15 | v167 | 7;
  v170 = v32 + v169 + 1;
  v171 = v170 + v22;
  v172 = ~v169;
  v173 = v171 & ~v169;
  v174 = (v170 + v24) & ~v169;
  v175 = ~v167;
  if (v173 == v174)
  {
    v186 = *(_QWORD *)(v166 + 64);
    v187 = (v168 + 32) & v172;
    if (((v186 + v167) & v175) + v186 > v186)
      v186 += (v186 + v167) & v175;
    if (v186 <= v38)
      v186 = v38;
    if (v186 <= 0x10)
      v186 = 16;
    v188 = (v187 | 1) + v186;
    v189 = ((v188 + v169) & v172) + v188;
    if (v188 > v189)
      v189 = v188;
    v190 = (v188 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (v189 <= v190 + 113)
      v189 = v190 + 113;
    v191 = v190 + 49;
    if (v189 > v191)
      v191 = v189;
    if (v191 <= 0x19)
      v184 = 25;
    else
      v184 = v191;
  }
  else
  {
    v324 = v170 + v24;
    v348 = v171;
    v352 = *(_QWORD *)(v3 + 32);
    v365 = v168 + 32;
    v176 = (v168 + 32) & v172;
    v350 = *(_QWORD *)(v165 - 8);
    v177 = *(_QWORD *)(v166 + 64);
    v318 = v177 + v167;
    v178 = ((v177 + v167) & v175) + v177;
    v326 = v177;
    if (v178 <= v177)
      v178 = *(_QWORD *)(v166 + 64);
    if (v178 <= v38)
      v178 = v38;
    if (v178 <= 0x10)
      v179 = 16;
    else
      v179 = v178;
    v180 = (v176 | 1) + v179;
    v181 = ((v180 + v169) & v172) + v180;
    if (v180 > v181)
      v181 = v180;
    v182 = (v180 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (v181 <= v182 + 113)
      v181 = v182 + 113;
    v183 = v182 + 49;
    if (v181 <= v183)
      v181 = v183;
    if (v181 <= 0x19)
      v184 = 25;
    else
      v184 = v181;
    v336 = ~v167;
    v363 = v179;
    switch(*(_BYTE *)(v173 + v184))
    {
      case 0:
      case 1:
        break;
      case 2:
LABEL_225:
        swift_release();
        break;
      case 3:
LABEL_226:
        swift_release();
        swift_release();
        break;
      case 4:
        sub_2141ED0BC(*(_QWORD *)v173, *(_QWORD *)(v173 + 8), *(_BYTE *)(v173 + 16));
        swift_bridgeObjectRelease();
        v192 = (v365 + v173) & v172;
        switch(*(_BYTE *)(v192 + v363))
        {
          case 0:
            goto LABEL_281;
          case 1:
            v328 = v170;
            v200 = *(void (**)(uint64_t, uint64_t))(v350 + 8);
            v200((v365 + v173) & v172, v352);
            v201 = v192 + v167 + v326;
            goto LABEL_284;
          case 2:
            goto LABEL_225;
          case 3:
            goto LABEL_226;
          case 4:
            goto LABEL_282;
          default:
            if (v363 <= 3)
              v193 = v363;
            else
              v193 = 4;
            __asm { BR              X12 }
            return result;
        }
      case 5:
        sub_2141ED0BC(*(_QWORD *)v173, *(_QWORD *)(v173 + 8), *(_BYTE *)(v173 + 16));
        swift_bridgeObjectRelease();
        v194 = (v365 + v173) & v172;
        switch(*(_BYTE *)(v194 + v363))
        {
          case 0:
            (*(void (**)(uint64_t, uint64_t))(v350 + 8))((v365 + v173) & v172, v352);
            break;
          case 1:
            v329 = v170;
            v202 = *(void (**)(uint64_t, uint64_t))(v350 + 8);
            v202((v365 + v173) & v172, v352);
            v202((v194 + v167 + v326) & v336, v352);
            v170 = v329;
            break;
          case 2:
            swift_release();
            break;
          case 3:
            swift_release();
            swift_release();
            break;
          case 4:
            swift_release();
            v203 = (v353 + v194) & v354;
            (*(void (**)(uint64_t, uint64_t))(v355 + 8))(v203, v359);
            (*(void (**)(uint64_t, uint64_t))(v360 + 8))((v356 + v358 + v203) & v357, v361);
            break;
          default:
            if (v363 <= 3)
              v195 = v363;
            else
              v195 = 4;
            __asm { BR              X12 }
            return result;
        }
        v204 = ((v348 | v169) + v180) & v172;
        sub_2141ED0BC(*(_QWORD *)v204, *(_QWORD *)(v204 + 8), *(_BYTE *)(v204 + 0x10));
        swift_bridgeObjectRelease();
        v192 = (v365 + v204) & v172;
        switch(*(_BYTE *)(v192 + v363))
        {
          case 0:
LABEL_281:
            (*(void (**)(uint64_t, uint64_t))(v350 + 8))(v192, v352);
            goto LABEL_290;
          case 1:
            v328 = v170;
            v200 = *(void (**)(uint64_t, uint64_t))(v350 + 8);
            v200(v192, v352);
            v201 = v318 + v192;
LABEL_284:
            v200(v201 & v336, v352);
            v170 = v328;
            goto LABEL_290;
          case 2:
            goto LABEL_225;
          case 3:
            goto LABEL_226;
          case 4:
LABEL_282:
            swift_release();
            v215 = (v353 + v192) & v354;
            (*(void (**)(uint64_t, uint64_t))(v355 + 8))(v215, v359);
            (*(void (**)(uint64_t, uint64_t))(v360 + 8))((v356 + v358 + v215) & v357, v361);
            goto LABEL_290;
          default:
            if (v363 <= 3)
              v205 = v363;
            else
              v205 = 4;
            __asm { BR              X12 }
            return result;
        }
      case 6:
        sub_2141ED0BC(*(_QWORD *)v173, *(_QWORD *)(v173 + 8), *(_BYTE *)(v173 + 16));
        swift_bridgeObjectRelease();
        v196 = (v365 + v173) & v172;
        switch(*(_BYTE *)(v196 + v363))
        {
          case 0:
            (*(void (**)(uint64_t, uint64_t))(v350 + 8))((v365 + v173) & v172, v352);
            break;
          case 1:
            v330 = v170;
            v207 = *(void (**)(uint64_t, uint64_t))(v350 + 8);
            v207((v365 + v173) & v172, v352);
            v207((v196 + v167 + v326) & v336, v352);
            v170 = v330;
            break;
          case 2:
            swift_release();
            break;
          case 3:
            swift_release();
            swift_release();
            break;
          case 4:
            swift_release();
            v206 = (v353 + v196) & v354;
            (*(void (**)(uint64_t, uint64_t))(v355 + 8))(v206, v359);
            (*(void (**)(uint64_t, uint64_t))(v360 + 8))((v356 + v358 + v206) & v357, v361);
            break;
          default:
            if (v363 <= 3)
              v197 = v363;
            else
              v197 = 4;
            __asm { BR              X12 }
            return result;
        }
        v208 = ((v173 | 7) + v180) & 0xFFFFFFFFFFFFFFF8;
        v209 = *(unsigned __int8 *)(v208 + 96);
        if (v209 != 255)
          sub_2142637C0(*(_QWORD *)(v208 + 88), v209 & 1);
        sub_2142637C0(*(_QWORD *)(v208 + 104), *(_BYTE *)(v208 + 112));
        break;
      case 7:
        sub_2141ED0BC(*(_QWORD *)v173, *(_QWORD *)(v173 + 8), *(_BYTE *)(v173 + 16));
        swift_bridgeObjectRelease();
        v198 = (v365 + v173) & v172;
        switch(*(_BYTE *)(v198 + v363))
        {
          case 0:
            (*(void (**)(uint64_t, uint64_t))(v350 + 8))((v365 + v173) & v172, v352);
            break;
          case 1:
            v331 = v170;
            v210 = *(void (**)(uint64_t, uint64_t))(v350 + 8);
            v210((v365 + v173) & v172, v352);
            v210((v198 + v167 + v326) & v336, v352);
            v170 = v331;
            break;
          case 2:
            swift_release();
            break;
          case 3:
            swift_release();
            swift_release();
            break;
          case 4:
            swift_release();
            v211 = (v353 + v198) & v354;
            (*(void (**)(uint64_t, uint64_t))(v355 + 8))(v211, v359);
            (*(void (**)(uint64_t, uint64_t))(v360 + 8))((v356 + v358 + v211) & v357, v361);
            break;
          default:
            if (v363 <= 3)
              v199 = v363;
            else
              v199 = 4;
            __asm { BR              X12 }
            return result;
        }
        v212 = ((v173 | 7) + v180) & 0xFFFFFFFFFFFFFFF8;
        v213 = *(unsigned __int8 *)(v212 + 24);
        if (v213 <= 0xFB)
          sub_2141EF1B0(*(_QWORD *)(v212 + 8), *(_QWORD *)(v212 + 16), v213);
        v214 = *(unsigned __int8 *)(v212 + 48);
        if (v214 <= 0xFB)
          sub_2141EF1B0(*(_QWORD *)(v212 + 32), *(_QWORD *)(v212 + 40), v214);
        break;
      default:
        if (v184 <= 3)
          v185 = v184;
        else
          v185 = 4;
        __asm { BR              X12 }
        return result;
    }
LABEL_290:
    switch(*(_BYTE *)(v174 + v184))
    {
      case 0:
        v217 = *(_QWORD *)v174;
        *(_BYTE *)(v173 + 8) = *(_BYTE *)(v174 + 8);
        *(_QWORD *)v173 = v217;
        *(_BYTE *)(v173 + v184) = 0;
        break;
      case 1:
        v218 = *(_OWORD *)v174;
        *(_OWORD *)(v173 + 9) = *(_OWORD *)(v174 + 9);
        *(_OWORD *)v173 = v218;
        *(_BYTE *)(v173 + v184) = 1;
        break;
      case 2:
        *(_QWORD *)v173 = *(_QWORD *)v174;
        *(_BYTE *)(v173 + v184) = 2;
        swift_retain();
        break;
      case 3:
        *(_QWORD *)v173 = *(_QWORD *)v174;
        *(_QWORD *)(v173 + 8) = *(_QWORD *)(v174 + 8);
        *(_BYTE *)(v173 + v184) = 3;
        swift_retain();
        swift_retain();
        break;
      case 4:
        v332 = v170;
        v219 = v43;
        v220 = *(_QWORD *)v174;
        v221 = *(_QWORD *)(v174 + 8);
        v222 = *(_BYTE *)(v174 + 16);
        sub_2141DD130(*(_QWORD *)v174, v221, v222);
        *(_QWORD *)v173 = v220;
        *(_QWORD *)(v173 + 8) = v221;
        *(_BYTE *)(v173 + 16) = v222;
        *(_QWORD *)(v173 + 24) = *(_QWORD *)(v174 + 24);
        v223 = (_QWORD *)((v365 + v173) & v172);
        v224 = (_QWORD *)((v365 + v174) & v172);
        v225 = *((unsigned __int8 *)v224 + v363);
        swift_bridgeObjectRetain();
        v43 = v219;
        switch(v225)
        {
          case 0:
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v350 + 16))(v223, v224, v352);
            *((_BYTE *)v223 + v363) = 0;
            goto LABEL_322;
          case 1:
            v248 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v350 + 16);
            v248(v223, v224, v352);
            v248((_QWORD *)(((unint64_t)v223 + v167 + v326) & v336), (_QWORD *)(((unint64_t)v224 + v167 + v326) & v336), v352);
            v249 = 1;
            goto LABEL_321;
          case 2:
            *v223 = *v224;
            *((_BYTE *)v223 + v363) = 2;
            swift_retain();
            goto LABEL_322;
          case 3:
            *v223 = *v224;
            *(_QWORD *)(((v365 + v173) & v172) + 8) = *(_QWORD *)(((v365 + v174) & v172) + 8);
            *((_BYTE *)v223 + v363) = 3;
            swift_retain();
            swift_retain();
            goto LABEL_322;
          case 4:
            *v223 = *v224;
            v250 = ((unint64_t)v223 + v353) & v354;
            v251 = ((unint64_t)v224 + v353) & v354;
            v252 = *(void (**)(unint64_t, unint64_t, uint64_t))(v355 + 16);
            swift_retain();
            v252(v250, v251, v359);
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v360 + 16))((v356 + v358 + v250) & v357, (v356 + v358 + v251) & v357, v361);
            v249 = 4;
LABEL_321:
            *((_BYTE *)v223 + v363) = v249;
LABEL_322:
            v253 = 4;
            break;
          default:
            if (v363 <= 3)
              v226 = v363;
            else
              v226 = 4;
            __asm { BR              X11 }
            return result;
        }
        goto LABEL_358;
      case 5:
        v333 = v170;
        v344 = v43;
        v227 = *(_QWORD *)v174;
        v228 = *(_QWORD *)(v174 + 8);
        v229 = *(_BYTE *)(v174 + 16);
        sub_2141DD130(*(_QWORD *)v174, v228, v229);
        *(_QWORD *)v173 = v227;
        *(_QWORD *)(v173 + 8) = v228;
        *(_BYTE *)(v173 + 16) = v229;
        *(_QWORD *)(v173 + 24) = *(_QWORD *)(v174 + 24);
        v230 = (_QWORD *)((v365 + v173) & v172);
        v320 = ~v169;
        v231 = (_QWORD *)((v365 + v174) & v172);
        v232 = *((unsigned __int8 *)v231 + v363);
        swift_bridgeObjectRetain();
        switch(v232)
        {
          case 0:
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v350 + 16))(v230, v231, v352);
            *((_BYTE *)v230 + v363) = 0;
            goto LABEL_330;
          case 1:
            v254 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v350 + 16);
            v254(v230, v231, v352);
            v254((_QWORD *)(((unint64_t)v230 + v167 + v326) & v336), (_QWORD *)(((unint64_t)v231 + v167 + v326) & v336), v352);
            v255 = 1;
            goto LABEL_329;
          case 2:
            *v230 = *v231;
            *((_BYTE *)v230 + v363) = 2;
            swift_retain();
            goto LABEL_330;
          case 3:
            *v230 = *v231;
            *(_QWORD *)(((v365 + v173) & v172) + 8) = *(_QWORD *)(((v365 + v174) & v172) + 8);
            *((_BYTE *)v230 + v363) = 3;
            swift_retain();
            swift_retain();
            goto LABEL_330;
          case 4:
            *v230 = *v231;
            v256 = ((unint64_t)v230 + v353) & v354;
            v257 = ((unint64_t)v231 + v353) & v354;
            v258 = *(void (**)(unint64_t, unint64_t, uint64_t))(v355 + 16);
            swift_retain();
            v258(v256, v257, v359);
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v360 + 16))((v356 + v358 + v256) & v357, (v356 + v358 + v257) & v357, v361);
            v255 = 4;
LABEL_329:
            *((_BYTE *)v230 + v363) = v255;
LABEL_330:
            v259 = ((v348 | v169) + v180) & v320;
            v260 = ((v324 | v169) + v180) & v320;
            v261 = *(_QWORD *)v260;
            v262 = *(_QWORD *)(v260 + 8);
            v263 = *(_BYTE *)(v260 + 0x10);
            sub_2141DD130(*(_QWORD *)v260, v262, v263);
            *(_QWORD *)v259 = v261;
            *(_QWORD *)(v259 + 8) = v262;
            *(_BYTE *)(v259 + 16) = v263;
            *(_QWORD *)(v259 + 24) = *(_QWORD *)(v260 + 24);
            v264 = (_QWORD *)((v365 + v259) & v320);
            v265 = (_QWORD *)((v365 + v260) & v320);
            v266 = *((unsigned __int8 *)v265 + v363);
            swift_bridgeObjectRetain();
            v43 = v344;
            switch(v266)
            {
              case 0:
                (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v350 + 16))(v264, v265, v352);
                *((_BYTE *)v264 + v363) = 0;
                goto LABEL_366;
              case 1:
                v301 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v350 + 16);
                v301(v264, v265, v352);
                v301((_QWORD *)(((unint64_t)v264 + v318) & v336), (_QWORD *)(((unint64_t)v265 + v318) & v336), v352);
                v302 = 1;
                goto LABEL_365;
              case 2:
                *v264 = *v265;
                *((_BYTE *)v264 + v363) = 2;
                swift_retain();
                goto LABEL_366;
              case 3:
                *v264 = *v265;
                *(_QWORD *)(((v365 + v259) & v320) + 8) = v265[1];
                *((_BYTE *)v264 + v363) = 3;
                swift_retain();
                swift_retain();
                goto LABEL_366;
              case 4:
                *v264 = *v265;
                v303 = ((unint64_t)v264 + v353) & v354;
                v304 = ((unint64_t)v265 + v353) & v354;
                v305 = *(void (**)(unint64_t, unint64_t, uint64_t))(v355 + 16);
                swift_retain();
                v305(v303, v304, v359);
                (*(void (**)(unint64_t, unint64_t, uint64_t))(v360 + 16))((v356 + v358 + v303) & v357, (v356 + v358 + v304) & v357, v361);
                v302 = 4;
LABEL_365:
                *((_BYTE *)v264 + v363) = v302;
LABEL_366:
                *(_BYTE *)(v173 + v184) = 5;
                v170 = v333;
                v172 = v320;
                break;
              default:
                if (v363 <= 3)
                  v267 = v363;
                else
                  v267 = 4;
                __asm { BR              X11 }
                return result;
            }
            return result;
          default:
            if (v363 <= 3)
              v233 = v363;
            else
              v233 = 4;
            __asm { BR              X11 }
            return result;
        }
        break;
      case 6:
        v334 = v170;
        v345 = v43;
        v234 = *(_QWORD *)v174;
        v235 = *(_QWORD *)(v174 + 8);
        v236 = *(_BYTE *)(v174 + 16);
        sub_2141DD130(*(_QWORD *)v174, v235, v236);
        *(_QWORD *)v173 = v234;
        *(_QWORD *)(v173 + 8) = v235;
        *(_BYTE *)(v173 + 16) = v236;
        *(_QWORD *)(v173 + 24) = *(_QWORD *)(v174 + 24);
        v237 = (_QWORD *)((v365 + v173) & v172);
        v321 = ~v169;
        v238 = (_QWORD *)((v365 + v174) & v172);
        v239 = *((unsigned __int8 *)v238 + v363);
        swift_bridgeObjectRetain();
        v43 = v345;
        switch(v239)
        {
          case 0:
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v350 + 16))(v237, v238, v352);
            *((_BYTE *)v237 + v363) = 0;
            break;
          case 1:
            v271 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v350 + 16);
            v271(v237, v238, v352);
            v271((_QWORD *)(((unint64_t)v237 + v167 + v326) & v336), (_QWORD *)(((unint64_t)v238 + v167 + v326) & v336), v352);
            *((_BYTE *)v237 + v363) = 1;
            break;
          case 2:
            *v237 = *v238;
            *((_BYTE *)v237 + v363) = 2;
            swift_retain();
            break;
          case 3:
            *v237 = *v238;
            *(_QWORD *)(((v365 + v173) & v172) + 8) = *(_QWORD *)(((v365 + v174) & v172) + 8);
            *((_BYTE *)v237 + v363) = 3;
            swift_retain();
            swift_retain();
            break;
          case 4:
            *v237 = *v238;
            v268 = ((unint64_t)v237 + v353) & v354;
            v269 = ((unint64_t)v238 + v353) & v354;
            v270 = *(void (**)(unint64_t, unint64_t, uint64_t))(v355 + 16);
            swift_retain();
            v270(v268, v269, v359);
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v360 + 16))((v356 + v358 + v268) & v357, (v356 + v358 + v269) & v357, v361);
            *((_BYTE *)v237 + v363) = 4;
            break;
          default:
            if (v363 <= 3)
              v240 = v363;
            else
              v240 = 4;
            __asm { BR              X11 }
            return result;
        }
        v170 = v334;
        v172 = v321;
        v272 = ((v173 | 7) + v180) & 0xFFFFFFFFFFFFFFF8;
        v273 = ((v174 | 7) + v180) & 0xFFFFFFFFFFFFFFF8;
        *(_BYTE *)v272 = *(_BYTE *)v273;
        v274 = (_OWORD *)(v272 + 8);
        v275 = (_OWORD *)(v273 + 8);
        if (*(unsigned __int8 *)(v273 + 96) == 255)
        {
          v281 = *(_OWORD *)(v273 + 24);
          *v274 = *v275;
          *(_OWORD *)(v272 + 24) = v281;
          v282 = *(_OWORD *)(v273 + 40);
          v283 = *(_OWORD *)(v273 + 56);
          v284 = *(_OWORD *)(v273 + 72);
          *(_OWORD *)(v272 + 81) = *(_OWORD *)(v273 + 81);
          *(_OWORD *)(v272 + 56) = v283;
          *(_OWORD *)(v272 + 72) = v284;
          *(_OWORD *)(v272 + 40) = v282;
        }
        else
        {
          *v274 = *v275;
          v276 = *(_OWORD *)(v273 + 24);
          v277 = *(_OWORD *)(v273 + 40);
          v278 = *(_OWORD *)(v273 + 72);
          *(_OWORD *)(v272 + 56) = *(_OWORD *)(v273 + 56);
          *(_OWORD *)(v272 + 72) = v278;
          *(_OWORD *)(v272 + 24) = v276;
          *(_OWORD *)(v272 + 40) = v277;
          v279 = *(_QWORD *)(v273 + 88);
          v280 = *(_BYTE *)(v273 + 96);
          sub_2142625F8(v279, v280);
          *(_QWORD *)(v272 + 88) = v279;
          *(_BYTE *)(v272 + 96) = v280;
        }
        v285 = *(_QWORD *)(v273 + 104);
        v286 = *(_BYTE *)(v273 + 112);
        sub_2142625F8(v285, v286);
        *(_QWORD *)(v272 + 104) = v285;
        *(_BYTE *)(v272 + 112) = v286;
        *(_BYTE *)(v173 + v184) = 6;
        break;
      case 7:
        v332 = v170;
        v346 = v43;
        v241 = *(_QWORD *)v174;
        v242 = *(_QWORD *)(v174 + 8);
        v243 = *(_BYTE *)(v174 + 16);
        sub_2141DD130(*(_QWORD *)v174, v242, v243);
        *(_QWORD *)v173 = v241;
        *(_QWORD *)(v173 + 8) = v242;
        *(_BYTE *)(v173 + 16) = v243;
        *(_QWORD *)(v173 + 24) = *(_QWORD *)(v174 + 24);
        v244 = (_QWORD *)((v365 + v173) & v172);
        v322 = ~v169;
        v245 = (_QWORD *)((v365 + v174) & v172);
        v246 = *((unsigned __int8 *)v245 + v363);
        swift_bridgeObjectRetain();
        v43 = v346;
        switch(v246)
        {
          case 0:
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v350 + 16))(v244, v245, v352);
            *((_BYTE *)v244 + v363) = 0;
            break;
          case 1:
            v287 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v350 + 16);
            v287(v244, v245, v352);
            v287((_QWORD *)(((unint64_t)v244 + v167 + v326) & v336), (_QWORD *)(((unint64_t)v245 + v167 + v326) & v336), v352);
            *((_BYTE *)v244 + v363) = 1;
            break;
          case 2:
            *v244 = *v245;
            *((_BYTE *)v244 + v363) = 2;
            swift_retain();
            break;
          case 3:
            *v244 = *v245;
            *(_QWORD *)(((v365 + v173) & v172) + 8) = *(_QWORD *)(((v365 + v174) & v172) + 8);
            *((_BYTE *)v244 + v363) = 3;
            swift_retain();
            swift_retain();
            break;
          case 4:
            *v244 = *v245;
            v288 = ((unint64_t)v244 + v353) & v354;
            v289 = ((unint64_t)v245 + v353) & v354;
            v290 = *(void (**)(unint64_t, unint64_t, uint64_t))(v355 + 16);
            swift_retain();
            v290(v288, v289, v359);
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v360 + 16))((v356 + v358 + v288) & v357, (v356 + v358 + v289) & v357, v361);
            *((_BYTE *)v244 + v363) = 4;
            break;
          default:
            if (v363 <= 3)
              v247 = v363;
            else
              v247 = 4;
            __asm { BR              X11 }
            return result;
        }
        v172 = v322;
        v291 = ((v173 | 7) + v180) & 0xFFFFFFFFFFFFFFF8;
        v292 = ((v174 | 7) + v180) & 0xFFFFFFFFFFFFFFF8;
        *(_BYTE *)v291 = *(_BYTE *)v292;
        *(_BYTE *)(v291 + 1) = *(_BYTE *)(v292 + 1);
        *(_BYTE *)(v291 + 2) = *(_BYTE *)(v292 + 2);
        v293 = *(unsigned __int8 *)(v292 + 24);
        if (v293 <= 0xFB)
        {
          v295 = *(_QWORD *)(v292 + 8);
          v296 = *(_QWORD *)(v292 + 16);
          sub_2141DD140(v295, v296, *(_BYTE *)(v292 + 24));
          *(_QWORD *)(v291 + 8) = v295;
          *(_QWORD *)(v291 + 16) = v296;
          *(_BYTE *)(v291 + 24) = v293;
        }
        else
        {
          v294 = *(_OWORD *)(v292 + 8);
          *(_BYTE *)(v291 + 24) = *(_BYTE *)(v292 + 24);
          *(_OWORD *)(v291 + 8) = v294;
        }
        v297 = *(unsigned __int8 *)(v292 + 48);
        if (v297 <= 0xFB)
        {
          v299 = *(_QWORD *)(v292 + 32);
          v300 = *(_QWORD *)(v292 + 40);
          sub_2141DD140(v299, v300, *(_BYTE *)(v292 + 48));
          *(_QWORD *)(v291 + 32) = v299;
          *(_QWORD *)(v291 + 40) = v300;
          *(_BYTE *)(v291 + 48) = v297;
        }
        else
        {
          v298 = *(_OWORD *)(v292 + 32);
          *(_BYTE *)(v291 + 48) = *(_BYTE *)(v292 + 48);
          *(_OWORD *)(v291 + 32) = v298;
        }
        v253 = 7;
LABEL_358:
        *(_BYTE *)(v173 + v184) = v253;
        v170 = v332;
        break;
      default:
        if (v184 <= 3)
          v216 = v184;
        else
          v216 = 4;
        __asm { BR              X12 }
        return result;
    }
  }
  *(_QWORD *)(((v173 | 7) + v184 + 1) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)(((v174 | 7) + v184 + 1) & 0xFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  v306 = ((v184 + ((v170 + (v366 & v368)) & v172) + 8) & 0xFFFFFFFFFFFFFFF8) + 8;
  v307 = (v43 + v306 + 7) & 0xFFFFFFFFFFFFF8;
  v308 = (v367 + v306 + 7) & 0xFFFFFFFFFFFFFFF8;
  v309 = *(_QWORD *)v308;
  v308 += 15;
  *(_QWORD *)v307 = v309;
  v307 += 15;
  v310 = (v308 & 0xFFFFFFFFFFFFF8) + 15;
  *(_QWORD *)(v307 & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)(v308 & 0xFFFFFFFFFFFFF8);
  v311 = (v307 & 0xFFFFFFFFFFFFFFF8) + 15;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v311 &= 0xFFFFFFFFFFFFFFF8;
  v310 &= 0xFFFFFFFFFFFFF8uLL;
  *(_QWORD *)v311 = *(_QWORD *)v310;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v312 = (_QWORD *)((v311 + 15) & 0xFFFFFFFFFFFFFFF8);
  v313 = (unint64_t *)((v310 + 15) & 0xFFFFFFFFFFFFFFF8);
  v314 = *v313;
  if (*v312 < 0xFFFFFFFFuLL)
  {
    if (v314 >= 0xFFFFFFFF)
    {
      *v312 = v314;
      v312[1] = v313[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      return v43;
    }
LABEL_373:
    *(_OWORD *)v312 = *(_OWORD *)v313;
    return v43;
  }
  if (v314 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_373;
  }
  *v312 = v314;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v312[1] = v313[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return v43;
}

__n128 sub_21427C660(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  __int128 v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  __int128 v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  __int128 v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  char v71;
  void (*v72)(_QWORD *, _QWORD *, uint64_t);
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  char v86;
  unint64_t v87;
  _OWORD *v88;
  _OWORD *v89;
  __int128 v90;
  _QWORD *v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  char v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  void (*v111)(uint64_t, uint64_t, uint64_t);
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  unint64_t v117;
  unint64_t v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  _QWORD *v133;
  char v134;
  void (*v135)(uint64_t, uint64_t, uint64_t);
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  _QWORD *v140;
  unint64_t v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  _QWORD *v147;
  unint64_t v148;
  unint64_t v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  uint64_t v153;
  uint64_t v154;
  char v155;
  uint64_t v156;
  void (*v157)(_QWORD *, _QWORD *, uint64_t);
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t v180;
  uint64_t v181;
  unint64_t v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  char v187;
  uint64_t v188;
  __int128 v189;
  uint64_t v190;
  uint64_t v191;
  unint64_t v192;
  _QWORD *v193;
  _QWORD *v194;
  _QWORD *v195;
  _QWORD *v196;
  _QWORD *v197;
  _QWORD *v198;
  __n128 *v199;
  __n128 result;
  __int128 v201;
  _QWORD *v202;
  _QWORD *v203;
  uint64_t v204;
  __int128 v205;
  _QWORD *v206;
  _QWORD *v207;
  uint64_t v208;
  __int128 v209;
  _QWORD *v210;
  _QWORD *v211;
  uint64_t v212;
  __int128 v213;
  _QWORD *v214;
  _QWORD *v215;
  uint64_t v216;
  void (*v217)(uint64_t, uint64_t);
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  char v225;
  void (*v226)(unint64_t, unint64_t, uint64_t);
  _QWORD *v227;
  uint64_t v228;
  uint64_t v229;
  _QWORD *v230;
  uint64_t v231;
  uint64_t v232;
  unint64_t v233;
  unint64_t v234;
  unint64_t v235;
  unint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  char v243;
  unint64_t v244;
  _OWORD *v245;
  _OWORD *v246;
  __int128 v247;
  _QWORD *v248;
  _QWORD *v249;
  uint64_t v250;
  void (*v251)(uint64_t, uint64_t);
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  char v259;
  unint64_t v260;
  unint64_t v261;
  void (*v262)(unint64_t, unint64_t, uint64_t);
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  void (*v267)(unint64_t, unint64_t, uint64_t);
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  unint64_t v271;
  unint64_t v272;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  void (*v279)(uint64_t, uint64_t);
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  char v287;
  void (*v288)(unint64_t, unint64_t, uint64_t);
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  unint64_t v292;
  unint64_t v293;
  void (*v294)(unint64_t, unint64_t, uint64_t);
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  unint64_t v299;
  unint64_t v300;
  __int128 v301;
  __int128 v302;
  __int128 v303;
  uint64_t v304;
  uint64_t v305;
  char v306;
  void (*v307)(unint64_t, unint64_t, uint64_t);
  uint64_t v308;
  uint64_t v309;
  unint64_t v310;
  uint64_t v311;
  uint64_t v312;
  void (*v313)(_QWORD *, uint64_t, uint64_t);
  _QWORD *v314;
  unint64_t v315;
  uint64_t v316;
  uint64_t v317;
  void (*v318)(unint64_t, unint64_t, uint64_t);
  unint64_t v319;
  uint64_t v320;
  _QWORD *v321;
  _QWORD *v322;
  _QWORD *v323;
  unint64_t v324;
  unint64_t v325;
  unint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  _QWORD *v386;
  _QWORD *v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  _QWORD *v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 32))();
  v7 = *(_QWORD *)(v6 + 64);
  v392 = a3;
  v380 = *(_QWORD *)(a3 + 24);
  v8 = *(_QWORD *)(v380 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v389 = sub_214423C48();
  v10 = *(_QWORD *)(v389 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v391 = sub_214423C54();
  v12 = *(_QWORD *)(v391 - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = v13 | v11;
  v15 = v13 | v11 | v9;
  v16 = v15 | 7;
  v17 = (v15 | 7) + v7;
  v400 = a2;
  v401 = a1;
  v18 = v17 + a1;
  v19 = (v17 + a1) & ~(v15 | 7);
  v20 = v17 + a2;
  v21 = (v17 + a2) & ~(v15 | 7);
  v22 = v15 + 32;
  v23 = (v15 + 32) & ~(v15 | 7);
  v378 = v8;
  v24 = *(_QWORD *)(v8 + 64);
  v25 = v24 + v9;
  if (((v24 + v9) & ~v9) + v24 > v24)
    v24 += (v24 + v9) & ~v9;
  v26 = v11 + 8;
  v27 = *(_QWORD *)(v10 + 64) + v13;
  v385 = v10;
  v388 = v27;
  v390 = *(_QWORD *)(v391 - 8);
  v28 = ((v27 + ((v11 + 8) & ~v11)) & ~v13) + *(_QWORD *)(v12 + 64);
  if (v24 <= v28)
    v24 = ((v27 + ((v11 + 8) & ~v11)) & ~v13) + *(_QWORD *)(v12 + 64);
  if (v24 <= 0x10)
    v29 = 16;
  else
    v29 = v24;
  v30 = v29 + v23;
  v31 = v30 + 1;
  v32 = ((v30 + 1 + v16) & ~v16) + v30 + 1;
  if (v30 + 1 > v32)
    v32 = v30 + 1;
  v33 = v30 + 8;
  v34 = (v30 + 8) & 0xFFFFFFFFFFFFFFF8;
  if (v32 <= v34 + 113)
    v32 = v34 + 113;
  v35 = v34 + 49;
  if (v32 > v35)
    v35 = v32;
  if (v35 <= 0x19)
    v36 = 25;
  else
    v36 = v35;
  v38 = ~v16;
  v39 = ~v9;
  v40 = ~v11;
  v384 = ~v13;
  switch(*(_BYTE *)(v21 + v36))
  {
    case 0:
      v41 = 0;
      v42 = *(_QWORD *)v21;
      *(_BYTE *)(v19 + 8) = *(_BYTE *)(v21 + 8);
      *(_QWORD *)v19 = v42;
      v43 = v392;
      break;
    case 1:
      v44 = *(_OWORD *)v21;
      *(_OWORD *)(v19 + 9) = *(_OWORD *)(v21 + 9);
      *(_OWORD *)v19 = v44;
      v41 = 1;
      v43 = v392;
      break;
    case 2:
      *(_QWORD *)v19 = *(_QWORD *)v21;
      v41 = 2;
      v43 = v392;
      break;
    case 3:
      *(_OWORD *)v19 = *(_OWORD *)v21;
      v41 = 3;
      v43 = v392;
      break;
    case 4:
      v45 = *(_OWORD *)(v21 + 16);
      *(_OWORD *)v19 = *(_OWORD *)v21;
      *(_OWORD *)(v19 + 16) = v45;
      v46 = (_QWORD *)((v22 + v19) & v38);
      v47 = (_QWORD *)((v22 + v21) & v38);
      switch(*((_BYTE *)v47 + v29))
      {
        case 0:
          v369 = ~v11;
          v61 = (v22 + v19) & v38;
          v62 = v13 | v11;
          v63 = (v22 + v21) & v38;
          v64 = v19;
          v65 = v17;
          v66 = ~v16;
          v67 = v26;
          v68 = v28;
          v69 = v29;
          v70 = v46;
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v378 + 32))(v61, v63, v380);
          v46 = v70;
          v29 = v69;
          v28 = v68;
          v19 = v64;
          v14 = v62;
          v40 = v369;
          v26 = v67;
          v38 = v66;
          v17 = v65;
          v71 = 0;
          break;
        case 1:
          v72 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v378 + 32);
          v359 = v17;
          v370 = ~v11;
          v328 = v19;
          v336 = v13 | v11;
          v73 = v25;
          v349 = v26;
          v352 = ~v16;
          v74 = v28;
          v75 = v29;
          v76 = v46;
          v72(v46, v47, v380);
          v72((_QWORD *)(((unint64_t)v76 + v73) & v39), (_QWORD *)(((unint64_t)v47 + v73) & v39), v380);
          v46 = v76;
          v29 = v75;
          v28 = v74;
          v19 = v328;
          v14 = v336;
          v17 = v359;
          v40 = v370;
          v26 = v349;
          v38 = v352;
          v71 = 1;
          break;
        case 2:
          *v46 = *v47;
          v71 = 2;
          break;
        case 3:
          *(_OWORD *)v46 = *(_OWORD *)v47;
          v71 = 3;
          break;
        case 4:
          *v46 = *v47;
          v77 = ((unint64_t)v46 + v26) & v40;
          v78 = ((unint64_t)v47 + v26) & v40;
          v371 = ~v11;
          v329 = v19;
          v337 = v13 | v11;
          v79 = v17;
          v80 = ~v16;
          v81 = v26;
          v82 = v28;
          v83 = v29;
          v84 = v46;
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v385 + 32))(v77, v78, v389);
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v390 + 32))((v388 + v77) & v384, (v388 + v78) & v384, v391);
          v46 = v84;
          v29 = v83;
          v28 = v82;
          v19 = v329;
          v14 = v337;
          v40 = v371;
          v26 = v81;
          v38 = v80;
          v17 = v79;
          v71 = 4;
          break;
        default:
          if (v29 <= 3)
            v48 = v29;
          else
            v48 = 4;
          __asm { BR              X12 }
          return result;
      }
      v43 = v392;
      *((_BYTE *)v46 + v29) = v71;
      v41 = 4;
      break;
    case 5:
      v49 = *(_OWORD *)(v21 + 16);
      *(_OWORD *)v19 = *(_OWORD *)v21;
      *(_OWORD *)(v19 + 16) = v49;
      v50 = (_QWORD *)((v22 + v19) & v38);
      v51 = (_QWORD *)((v22 + v21) & v38);
      v320 = v25;
      v324 = v28;
      v330 = v19;
      v338 = v14;
      v360 = v17;
      v372 = v40;
      v350 = v26;
      switch(*((_BYTE *)v51 + v29))
      {
        case 0:
          v85 = v29;
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v378 + 32))((v22 + v19) & v38, (v22 + v21) & v38, v380);
          v29 = v85;
          v38 = ~v16;
          v86 = 0;
          break;
        case 1:
          v313 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v378 + 32);
          v314 = (_QWORD *)((v22 + v19) & v38);
          v316 = v29;
          v313(v314, (v22 + v21) & v38, v380);
          v50 = v314;
          v313((_QWORD *)(((unint64_t)v314 + v320) & v39), ((unint64_t)v51 + v320) & v39, v380);
          v29 = v316;
          v38 = ~v16;
          v86 = 1;
          break;
        case 2:
          *v50 = *v51;
          v86 = 2;
          break;
        case 3:
          *(_OWORD *)v50 = *(_OWORD *)v51;
          v86 = 3;
          break;
        case 4:
          *v50 = *v51;
          v315 = ((unint64_t)v50 + v26) & v40;
          v317 = v29;
          v87 = ((unint64_t)v51 + v26) & v40;
          (*(void (**)(void))(v385 + 32))();
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v390 + 32))((v388 + v315) & v384, (v388 + v87) & v384, v391);
          v29 = v317;
          v38 = ~v16;
          v86 = 4;
          break;
        default:
          if (v29 <= 3)
            v52 = v29;
          else
            v52 = 4;
          __asm { BR              X12 }
          return result;
      }
      *((_BYTE *)v50 + v29) = v86;
      v88 = (_OWORD *)(((v18 | v16) + v31) & v38);
      v89 = (_OWORD *)(((v20 | v16) + v31) & v38);
      v90 = v89[1];
      *v88 = *v89;
      v88[1] = v90;
      v91 = (_QWORD *)(((unint64_t)v88 + v22) & v38);
      v92 = (_QWORD *)(((unint64_t)v89 + v22) & v38);
      v26 = v350;
      v40 = v372;
      switch(*((_BYTE *)v92 + v29))
      {
        case 0:
          v153 = v38;
          v154 = v29;
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v378 + 32))(v91, v92, v380);
          v29 = v154;
          v40 = v372;
          v26 = v350;
          v38 = v153;
          v155 = 0;
          break;
        case 1:
          v156 = v39;
          v157 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v378 + 32);
          v158 = v38;
          v159 = v29;
          v157(v91, v92, v380);
          v157((_QWORD *)(((unint64_t)v91 + v320) & v156), (_QWORD *)(((unint64_t)v92 + v320) & v156), v380);
          v29 = v159;
          v40 = v372;
          v26 = v350;
          v38 = v158;
          v155 = 1;
          break;
        case 2:
          *v91 = *v92;
          v155 = 2;
          break;
        case 3:
          *(_OWORD *)v91 = *(_OWORD *)v92;
          v155 = 3;
          break;
        case 4:
          *v91 = *v92;
          v160 = ((unint64_t)v92 + v350) & v372;
          v161 = v38;
          v162 = v29;
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v385 + 32))(((unint64_t)v91 + v350) & v372, v160, v389);
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v390 + 32))((v388 + (((unint64_t)v91 + v350) & v372)) & v384, (v388 + v160) & v384, v391);
          v29 = v162;
          v40 = v372;
          v26 = v350;
          v38 = v161;
          v155 = 4;
          break;
        default:
          if (v29 <= 3)
            v93 = v29;
          else
            v93 = 4;
          __asm { BR              X12 }
          return result;
      }
      v17 = v360;
      v43 = v392;
      v19 = v330;
      v14 = v338;
      v28 = v324;
      *((_BYTE *)v91 + v29) = v155;
      v41 = 5;
      break;
    case 6:
      v53 = *(_OWORD *)(v21 + 16);
      *(_OWORD *)v19 = *(_OWORD *)v21;
      *(_OWORD *)(v19 + 16) = v53;
      v54 = (_QWORD *)((v22 + v19) & v38);
      v55 = (_QWORD *)((v22 + v21) & v38);
      switch(*((_BYTE *)v55 + v29))
      {
        case 0:
          v373 = ~v11;
          v94 = (v22 + v19) & v38;
          v339 = v13 | v11;
          v95 = (v22 + v21) & v38;
          v96 = v19;
          v97 = v17;
          v98 = ~v16;
          v99 = v26;
          v100 = v28;
          v101 = v29;
          v102 = v54;
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v378 + 32))(v94, v95, v380);
          v54 = v102;
          v29 = v101;
          v28 = v100;
          v19 = v96;
          v14 = v339;
          v40 = v373;
          v26 = v99;
          v38 = v98;
          v17 = v97;
          v103 = 0;
          break;
        case 1:
          v111 = *(void (**)(uint64_t, uint64_t, uint64_t))(v378 + 32);
          v362 = v17;
          v112 = (v22 + v19) & v38;
          v332 = v19;
          v341 = v13 | v11;
          v113 = (v22 + v21) & v38;
          v114 = v25;
          v353 = v38;
          v325 = v28;
          v115 = v29;
          v116 = v54;
          v111(v112, v113, v380);
          v111(((unint64_t)v116 + v114) & v39, ((unint64_t)v55 + v114) & v39, v380);
          v54 = v116;
          v29 = v115;
          v28 = v325;
          v19 = v332;
          v14 = v341;
          v26 = v11 + 8;
          v17 = v362;
          v40 = ~v11;
          v38 = v353;
          v103 = 1;
          break;
        case 2:
          *v54 = *v55;
          v103 = 2;
          break;
        case 3:
          *(_OWORD *)v54 = *(_OWORD *)v55;
          v103 = 3;
          break;
        case 4:
          *v54 = *v55;
          v104 = ((unint64_t)v54 + v26) & v40;
          v105 = ((unint64_t)v55 + v26) & v40;
          v361 = v17;
          v374 = ~v11;
          v331 = v19;
          v340 = v13 | v11;
          v106 = ~v16;
          v107 = v11 + 8;
          v108 = v28;
          v109 = v29;
          v110 = v54;
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v385 + 32))(v104, v105, v389);
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v390 + 32))((v388 + v104) & v384, (v388 + v105) & v384, v391);
          v54 = v110;
          v29 = v109;
          v28 = v108;
          v19 = v331;
          v14 = v340;
          v17 = v361;
          v40 = v374;
          v26 = v107;
          v38 = v106;
          v103 = 4;
          break;
        default:
          if (v29 <= 3)
            v56 = v29;
          else
            v56 = 4;
          __asm { BR              X12 }
          return result;
      }
      v43 = v392;
      *((_BYTE *)v54 + v29) = v103;
      v117 = (v33 + v19) & 0xFFFFFFFFFFFFFFF8;
      v118 = (v33 + v21) & 0xFFFFFFFFFFFFFFF8;
      v119 = *(_OWORD *)v118;
      v120 = *(_OWORD *)(v118 + 16);
      v121 = *(_OWORD *)(v118 + 48);
      *(_OWORD *)(v117 + 32) = *(_OWORD *)(v118 + 32);
      *(_OWORD *)(v117 + 48) = v121;
      *(_OWORD *)v117 = v119;
      *(_OWORD *)(v117 + 16) = v120;
      v122 = *(_OWORD *)(v118 + 64);
      v123 = *(_OWORD *)(v118 + 80);
      v124 = *(_OWORD *)(v118 + 96);
      *(_BYTE *)(v117 + 112) = *(_BYTE *)(v118 + 112);
      *(_OWORD *)(v117 + 80) = v123;
      *(_OWORD *)(v117 + 96) = v124;
      *(_OWORD *)(v117 + 64) = v122;
      v41 = 6;
      break;
    case 7:
      v57 = *(_OWORD *)(v21 + 16);
      *(_OWORD *)v19 = *(_OWORD *)v21;
      *(_OWORD *)(v19 + 16) = v57;
      v58 = (_QWORD *)((v22 + v19) & v38);
      v59 = (_QWORD *)((v22 + v21) & v38);
      switch(*((_BYTE *)v59 + v29))
      {
        case 0:
          v375 = ~v11;
          v125 = (v22 + v19) & v38;
          v342 = v13 | v11;
          v126 = (v22 + v21) & v38;
          v127 = v19;
          v128 = v17;
          v129 = ~v16;
          v130 = v26;
          v131 = v28;
          v132 = v29;
          v133 = v58;
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v378 + 32))(v125, v126, v380);
          v58 = v133;
          v29 = v132;
          v28 = v131;
          v19 = v127;
          v14 = v342;
          v40 = v375;
          v26 = v130;
          v38 = v129;
          v17 = v128;
          v134 = 0;
          break;
        case 1:
          v135 = *(void (**)(uint64_t, uint64_t, uint64_t))(v378 + 32);
          v363 = v17;
          v136 = (v22 + v19) & v38;
          v333 = v19;
          v343 = v13 | v11;
          v137 = (v22 + v21) & v38;
          v138 = v25;
          v354 = v38;
          v326 = v28;
          v139 = v29;
          v140 = v58;
          v135(v136, v137, v380);
          v135(((unint64_t)v140 + v138) & v39, ((unint64_t)v59 + v138) & v39, v380);
          v58 = v140;
          v29 = v139;
          v28 = v326;
          v19 = v333;
          v14 = v343;
          v26 = v11 + 8;
          v17 = v363;
          v40 = ~v11;
          v38 = v354;
          v134 = 1;
          break;
        case 2:
          *v58 = *v59;
          v134 = 2;
          break;
        case 3:
          *(_OWORD *)v58 = *(_OWORD *)v59;
          v134 = 3;
          break;
        case 4:
          *v58 = *v59;
          v141 = ((unint64_t)v58 + v26) & v40;
          v142 = ((unint64_t)v59 + v26) & v40;
          v364 = v17;
          v376 = ~v11;
          v334 = v19;
          v344 = v13 | v11;
          v143 = ~v16;
          v144 = v11 + 8;
          v145 = v28;
          v146 = v29;
          v147 = v58;
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v385 + 32))(v141, v142, v389);
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v390 + 32))((v388 + v141) & v384, (v388 + v142) & v384, v391);
          v58 = v147;
          v29 = v146;
          v28 = v145;
          v19 = v334;
          v14 = v344;
          v17 = v364;
          v40 = v376;
          v26 = v144;
          v38 = v143;
          v134 = 4;
          break;
        default:
          if (v29 <= 3)
            v60 = v29;
          else
            v60 = 4;
          __asm { BR              X12 }
          return result;
      }
      v43 = v392;
      *((_BYTE *)v58 + v29) = v134;
      v148 = (v33 + v19) & 0xFFFFFFFFFFFFFFF8;
      v149 = (v33 + v21) & 0xFFFFFFFFFFFFFFF8;
      v150 = *(_OWORD *)v149;
      v151 = *(_OWORD *)(v149 + 16);
      v152 = *(_OWORD *)(v149 + 32);
      *(_BYTE *)(v148 + 48) = *(_BYTE *)(v149 + 48);
      *(_OWORD *)(v148 + 16) = v151;
      *(_OWORD *)(v148 + 32) = v152;
      *(_OWORD *)v148 = v150;
      v41 = 7;
      break;
    default:
      if (v36 <= 3)
        v37 = v36;
      else
        v37 = 4;
      __asm { BR              X13 }
      return result;
  }
  *(_BYTE *)(v19 + v36) = v41;
  v163 = *(_QWORD *)(v43 + 32);
  v164 = *(_QWORD *)(v163 - 8);
  v165 = *(unsigned __int8 *)(v164 + 80);
  v166 = v14 | v165;
  v167 = v14 | v165 | 7;
  v168 = v36 + v167 + 1;
  v169 = v168 + v19;
  v170 = (v168 + v19) & ~v167;
  v171 = v168 + v21;
  v172 = (v168 + v21) & ~v167;
  v173 = v166 + 32;
  v174 = (v166 + 32) & ~v167;
  v175 = *(_QWORD *)(v164 + 64);
  v176 = v175 + v165;
  if (((v175 + v165) & ~v165) + v175 > v175)
    v175 += (v175 + v165) & ~v165;
  if (v175 <= v28)
    v175 = v28;
  if (v175 <= 0x10)
    v177 = 16;
  else
    v177 = v175;
  v178 = v177 + v174;
  v179 = v178 + 1;
  v180 = ((v178 + 1 + v167) & ~v167) + v178 + 1;
  if (v178 + 1 > v180)
    v180 = v178 + 1;
  v181 = v178 + 8;
  v182 = (v178 + 8) & 0xFFFFFFFFFFFFFFF8;
  if (v180 <= v182 + 113)
    v180 = v182 + 113;
  v183 = v182 + 49;
  if (v180 > v183)
    v183 = v180;
  if (v183 <= 0x19)
    v184 = 25;
  else
    v184 = v183;
  v186 = ~v167;
  switch(*(_BYTE *)(v172 + v184))
  {
    case 0:
      v187 = 0;
      v188 = *(_QWORD *)v172;
      *(_BYTE *)(v170 + 8) = *(_BYTE *)(v172 + 8);
      *(_QWORD *)v170 = v188;
      goto LABEL_110;
    case 1:
      v189 = *(_OWORD *)v172;
      *(_OWORD *)(v170 + 9) = *(_OWORD *)(v172 + 9);
      *(_OWORD *)v170 = v189;
      v187 = 1;
      goto LABEL_110;
    case 2:
      *(_QWORD *)v170 = *(_QWORD *)v172;
      v187 = 2;
      goto LABEL_110;
    case 3:
      *(_OWORD *)v170 = *(_OWORD *)v172;
      v187 = 3;
LABEL_110:
      v191 = v400;
      v190 = v401;
      break;
    case 4:
      v201 = *(_OWORD *)(v172 + 16);
      *(_OWORD *)v170 = *(_OWORD *)v172;
      *(_OWORD *)(v170 + 16) = v201;
      v202 = (_QWORD *)((v173 + v170) & v186);
      v203 = (_QWORD *)((v173 + v172) & v186);
      switch(*((_BYTE *)v203 + v177))
      {
        case 0:
          v217 = *(void (**)(uint64_t, uint64_t))(v164 + 32);
          v218 = (v173 + v170) & v186;
          v219 = v168;
          v220 = (v173 + v172) & v186;
          v221 = ~v167;
          v222 = v17;
          v223 = v38;
          v224 = v177;
          v217(v218, v220);
          v177 = v224;
          v186 = v221;
          v168 = v219;
          v38 = v223;
          v17 = v222;
          v225 = 0;
          break;
        case 1:
          v226 = *(void (**)(unint64_t, unint64_t, uint64_t))(v164 + 32);
          v227 = v202;
          v393 = v168;
          v381 = ~v167;
          v355 = v38;
          v365 = v17;
          v228 = v177;
          v229 = v163;
          v230 = v202;
          v231 = v176;
          v232 = ~v165;
          ((void (*)(_QWORD *, _QWORD *))v226)(v227, v203);
          v233 = ((unint64_t)v230 + v231) & v232;
          v234 = (unint64_t)v203 + v231;
          v202 = v230;
          v226(v233, v234 & v232, v229);
          v177 = v228;
          v186 = v381;
          v168 = v393;
          v38 = v355;
          v17 = v365;
          v225 = 1;
          break;
        case 2:
          *v202 = *v203;
          v225 = 2;
          break;
        case 3:
          *(_OWORD *)v202 = *(_OWORD *)v203;
          v225 = 3;
          break;
        case 4:
          *v202 = *v203;
          v235 = ((unint64_t)v202 + v26) & v40;
          v236 = ((unint64_t)v203 + v26) & v40;
          v237 = v168;
          v394 = (_QWORD *)((v173 + v170) & v186);
          v238 = ~v167;
          v239 = v17;
          v240 = v38;
          v241 = v177;
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v385 + 32))(v235, v236, v389);
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v390 + 32))((v388 + v235) & v384, (v388 + v236) & v384, v391);
          v177 = v241;
          v186 = v238;
          v202 = v394;
          v168 = v237;
          v38 = v240;
          v17 = v239;
          v225 = 4;
          break;
        default:
          if (v177 <= 3)
            v204 = v177;
          else
            v204 = 4;
          __asm { BR              X12 }
          return result;
      }
      v191 = v400;
      v190 = v401;
      *((_BYTE *)v202 + v177) = v225;
      v187 = 4;
      break;
    case 5:
      v205 = *(_OWORD *)(v172 + 16);
      *(_OWORD *)v170 = *(_OWORD *)v172;
      *(_OWORD *)(v170 + 16) = v205;
      v206 = (_QWORD *)((v173 + v170) & v186);
      v207 = (_QWORD *)((v173 + v172) & v186);
      v327 = ~v165;
      v335 = v176;
      v395 = v168;
      v356 = v38;
      v366 = v17;
      v351 = v26;
      v377 = v40;
      v379 = v163;
      switch(*((_BYTE *)v207 + v177))
      {
        case 0:
          v242 = v177;
          v321 = (_QWORD *)((v173 + v170) & v186);
          (*(void (**)(_QWORD *, uint64_t))(v164 + 32))(v321, (v173 + v172) & v186);
          v206 = v321;
          v177 = v242;
          v186 = ~v167;
          v243 = 0;
          break;
        case 1:
          v318 = *(void (**)(unint64_t, unint64_t, uint64_t))(v164 + 32);
          v322 = (_QWORD *)((v173 + v170) & v186);
          v345 = v177;
          ((void (*)(_QWORD *, uint64_t))v318)(v322, (v173 + v172) & v186);
          v318(((unint64_t)v322 + v335) & v327, ((unint64_t)v207 + v335) & v327, v379);
          v206 = v322;
          v177 = v345;
          v186 = ~v167;
          v243 = 1;
          break;
        case 2:
          *v206 = *v207;
          v243 = 2;
          break;
        case 3:
          *(_OWORD *)v206 = *(_OWORD *)v207;
          v243 = 3;
          break;
        case 4:
          *v206 = *v207;
          v319 = ((unint64_t)v206 + v26) & v40;
          v323 = (_QWORD *)((v173 + v170) & v186);
          v244 = ((unint64_t)v207 + v26) & v40;
          v346 = v177;
          (*(void (**)(void))(v385 + 32))();
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v390 + 32))((v388 + v319) & v384, (v388 + v244) & v384, v391);
          v206 = v323;
          v177 = v346;
          v186 = ~v167;
          v243 = 4;
          break;
        default:
          if (v177 <= 3)
            v208 = v177;
          else
            v208 = 4;
          __asm { BR              X12 }
          return result;
      }
      *((_BYTE *)v206 + v177) = v243;
      v245 = (_OWORD *)(((v169 | v167) + v179) & v186);
      v246 = (_OWORD *)(((v171 | v167) + v179) & v186);
      v247 = v246[1];
      *v245 = *v246;
      v245[1] = v247;
      v248 = (_QWORD *)(((unint64_t)v245 + v173) & v186);
      v249 = (_QWORD *)(((unint64_t)v246 + v173) & v186);
      switch(*((_BYTE *)v249 + v177))
      {
        case 0:
          v304 = v186;
          v305 = v177;
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v164 + 32))(v248, v249, v379);
          v177 = v305;
          v186 = v304;
          v306 = 0;
          break;
        case 1:
          v307 = *(void (**)(unint64_t, unint64_t, uint64_t))(v164 + 32);
          v308 = v186;
          v309 = v177;
          ((void (*)(_QWORD *, _QWORD *))v307)(v248, v249);
          v307(((unint64_t)v248 + v335) & v327, ((unint64_t)v249 + v335) & v327, v379);
          v177 = v309;
          v186 = v308;
          v306 = 1;
          break;
        case 2:
          *v248 = *v249;
          v306 = 2;
          break;
        case 3:
          *(_OWORD *)v248 = *(_OWORD *)v249;
          v306 = 3;
          break;
        case 4:
          *v248 = *v249;
          v310 = ((unint64_t)v249 + v351) & v377;
          v311 = v186;
          v312 = v177;
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v385 + 32))(((unint64_t)v248 + v351) & v377, v310, v389);
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v390 + 32))((v388 + (((unint64_t)v248 + v351) & v377)) & v384, (v388 + v310) & v384, v391);
          v177 = v312;
          v186 = v311;
          v306 = 4;
          break;
        default:
          if (v177 <= 3)
            v250 = v177;
          else
            v250 = 4;
          __asm { BR              X12 }
          return result;
      }
      v191 = v400;
      v190 = v401;
      v38 = v356;
      v17 = v366;
      v168 = v395;
      *((_BYTE *)v248 + v177) = v306;
      v187 = 5;
      break;
    case 6:
      v209 = *(_OWORD *)(v172 + 16);
      *(_OWORD *)v170 = *(_OWORD *)v172;
      *(_OWORD *)(v170 + 16) = v209;
      v210 = (_QWORD *)((v173 + v170) & v186);
      v211 = (_QWORD *)((v173 + v172) & v186);
      switch(*((_BYTE *)v211 + v177))
      {
        case 0:
          v251 = *(void (**)(uint64_t, uint64_t))(v164 + 32);
          v252 = (v173 + v170) & v186;
          v253 = v168;
          v254 = (v173 + v172) & v186;
          v255 = ~v167;
          v256 = v17;
          v257 = v38;
          v258 = v177;
          v251(v252, v254);
          v177 = v258;
          v186 = v255;
          v168 = v253;
          v38 = v257;
          v17 = v256;
          v259 = 0;
          break;
        case 1:
          v267 = *(void (**)(unint64_t, unint64_t, uint64_t))(v164 + 32);
          v397 = v168;
          v382 = ~v167;
          v357 = v38;
          v367 = v17;
          v347 = v177;
          v268 = v163;
          v269 = v176;
          v270 = ~v165;
          ((void (*)(_QWORD *, _QWORD *))v267)(v210, v211);
          v267(((unint64_t)v210 + v269) & v270, ((unint64_t)v211 + v269) & v270, v268);
          v177 = v347;
          v186 = v382;
          v168 = v397;
          v38 = v357;
          v17 = v367;
          v259 = 1;
          break;
        case 2:
          *v210 = *v211;
          v259 = 2;
          break;
        case 3:
          *(_OWORD *)v210 = *(_OWORD *)v211;
          v259 = 3;
          break;
        case 4:
          *v210 = *v211;
          v260 = ((unint64_t)v210 + v26) & v40;
          v261 = ((unint64_t)v211 + v26) & v40;
          v262 = *(void (**)(unint64_t, unint64_t, uint64_t))(v385 + 32);
          v396 = v168;
          v386 = v210;
          v263 = ~v167;
          v264 = v17;
          v265 = v38;
          v266 = v177;
          v262(v260, v261, v389);
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v390 + 32))((v388 + v260) & v384, (v388 + v261) & v384, v391);
          v177 = v266;
          v186 = v263;
          v210 = v386;
          v168 = v396;
          v38 = v265;
          v17 = v264;
          v259 = 4;
          break;
        default:
          if (v177 <= 3)
            v212 = v177;
          else
            v212 = 4;
          __asm { BR              X12 }
          return result;
      }
      v191 = v400;
      v190 = v401;
      *((_BYTE *)v210 + v177) = v259;
      v271 = (v181 + v170) & 0xFFFFFFFFFFFFFFF8;
      v272 = (v181 + v172) & 0xFFFFFFFFFFFFFFF8;
      v273 = *(_OWORD *)v272;
      v274 = *(_OWORD *)(v272 + 16);
      v275 = *(_OWORD *)(v272 + 48);
      *(_OWORD *)(v271 + 32) = *(_OWORD *)(v272 + 32);
      *(_OWORD *)(v271 + 48) = v275;
      *(_OWORD *)v271 = v273;
      *(_OWORD *)(v271 + 16) = v274;
      v276 = *(_OWORD *)(v272 + 64);
      v277 = *(_OWORD *)(v272 + 80);
      v278 = *(_OWORD *)(v272 + 96);
      *(_BYTE *)(v271 + 112) = *(_BYTE *)(v272 + 112);
      *(_OWORD *)(v271 + 80) = v277;
      *(_OWORD *)(v271 + 96) = v278;
      *(_OWORD *)(v271 + 64) = v276;
      v187 = 6;
      break;
    case 7:
      v213 = *(_OWORD *)(v172 + 16);
      *(_OWORD *)v170 = *(_OWORD *)v172;
      *(_OWORD *)(v170 + 16) = v213;
      v214 = (_QWORD *)((v173 + v170) & v186);
      v215 = (_QWORD *)((v173 + v172) & v186);
      switch(*((_BYTE *)v215 + v177))
      {
        case 0:
          v279 = *(void (**)(uint64_t, uint64_t))(v164 + 32);
          v280 = (v173 + v170) & v186;
          v281 = v168;
          v282 = (v173 + v172) & v186;
          v283 = ~v167;
          v284 = v17;
          v285 = v38;
          v286 = v177;
          v279(v280, v282);
          v177 = v286;
          v186 = v283;
          v168 = v281;
          v38 = v285;
          v17 = v284;
          v287 = 0;
          break;
        case 1:
          v288 = *(void (**)(unint64_t, unint64_t, uint64_t))(v164 + 32);
          v398 = v168;
          v383 = ~v167;
          v358 = v38;
          v368 = v17;
          v348 = v177;
          v289 = v163;
          v290 = v176;
          v291 = ~v165;
          ((void (*)(_QWORD *, _QWORD *))v288)(v214, v215);
          v288(((unint64_t)v214 + v290) & v291, ((unint64_t)v215 + v290) & v291, v289);
          v177 = v348;
          v186 = v383;
          v168 = v398;
          v38 = v358;
          v17 = v368;
          v287 = 1;
          break;
        case 2:
          *v214 = *v215;
          v287 = 2;
          break;
        case 3:
          *(_OWORD *)v214 = *(_OWORD *)v215;
          v287 = 3;
          break;
        case 4:
          *v214 = *v215;
          v292 = ((unint64_t)v214 + v26) & v40;
          v293 = ((unint64_t)v215 + v26) & v40;
          v294 = *(void (**)(unint64_t, unint64_t, uint64_t))(v385 + 32);
          v399 = v168;
          v387 = v214;
          v295 = ~v167;
          v296 = v17;
          v297 = v38;
          v298 = v177;
          v294(v292, v293, v389);
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v390 + 32))((v388 + v292) & v384, (v388 + v293) & v384, v391);
          v177 = v298;
          v186 = v295;
          v214 = v387;
          v168 = v399;
          v38 = v297;
          v17 = v296;
          v287 = 4;
          break;
        default:
          if (v177 <= 3)
            v216 = v177;
          else
            v216 = 4;
          __asm { BR              X12 }
          return result;
      }
      v191 = v400;
      v190 = v401;
      *((_BYTE *)v214 + v177) = v287;
      v299 = (v181 + v170) & 0xFFFFFFFFFFFFFFF8;
      v300 = (v181 + v172) & 0xFFFFFFFFFFFFFFF8;
      v301 = *(_OWORD *)v300;
      v302 = *(_OWORD *)(v300 + 16);
      v303 = *(_OWORD *)(v300 + 32);
      *(_BYTE *)(v299 + 48) = *(_BYTE *)(v300 + 48);
      *(_OWORD *)(v299 + 16) = v302;
      *(_OWORD *)(v299 + 32) = v303;
      *(_OWORD *)v299 = v301;
      v187 = 7;
      break;
    default:
      if (v184 <= 3)
        v185 = v184;
      else
        v185 = 4;
      __asm { BR              X13 }
      return result;
  }
  *(_BYTE *)(v170 + v184) = v187;
  *(_QWORD *)(((v170 | 7) + v184 + 1) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((v172 | 7) + v184 + 1) & 0xFFFFFFFFFFFFF8);
  v192 = ((v184 + ((v168 + (v17 & v38)) & v186) + 8) & 0xFFFFFFFFFFFFFFF8) + 8;
  v193 = (_QWORD *)((v190 + v192 + 7) & 0xFFFFFFFFFFFFF8);
  v194 = (_QWORD *)((v191 + v192 + 7) & 0xFFFFFFFFFFFFFFF8);
  *v193 = *v194;
  v195 = (_QWORD *)(((unint64_t)v193 + 15) & 0xFFFFFFFFFFFFFFF8);
  v196 = (_QWORD *)(((unint64_t)v194 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v195 = *v196;
  v197 = (_QWORD *)(((unint64_t)v195 + 15) & 0xFFFFFFFFFFFFF8);
  v198 = (_QWORD *)(((unint64_t)v196 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v197 = *v198;
  v199 = (__n128 *)(((unint64_t)v198 + 15) & 0xFFFFFFFFFFFFF8);
  result = *v199;
  *(__n128 *)(((unint64_t)v197 + 15) & 0xFFFFFFFFFFFFF8) = *v199;
  return result;
}

uint64_t sub_21427E008(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(uint64_t, uint64_t);
  unint64_t v55;
  void (*v56)(uint64_t, uint64_t);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(uint64_t, uint64_t);
  unint64_t v62;
  int v63;
  void (*v64)(uint64_t, uint64_t);
  uint64_t v65;
  unint64_t v66;
  unsigned int v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  __int128 v73;
  char v74;
  __int128 v75;
  _QWORD *v76;
  _QWORD *v77;
  uint64_t v78;
  __int128 v79;
  _QWORD *v80;
  _QWORD *v81;
  uint64_t v82;
  __int128 v83;
  _QWORD *v84;
  _QWORD *v85;
  uint64_t v86;
  __int128 v87;
  _QWORD *v88;
  _QWORD *v89;
  uint64_t v90;
  char v91;
  void (*v92)(_QWORD *, _QWORD *, uint64_t);
  unint64_t v93;
  char v94;
  uint64_t v95;
  char v96;
  void (*v97)(unint64_t, unint64_t, uint64_t);
  void (*v98)(unint64_t, unint64_t, uint64_t);
  unint64_t v99;
  _OWORD *v100;
  _OWORD *v101;
  __int128 v102;
  _QWORD *v103;
  _QWORD *v104;
  uint64_t v105;
  char v106;
  unint64_t v107;
  void (*v108)(_QWORD *, _QWORD *, uint64_t);
  unint64_t v109;
  unint64_t v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  char v117;
  void (*v118)(_QWORD *, _QWORD *, uint64_t);
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  char v125;
  void (*v126)(_QWORD *, _QWORD *, uint64_t);
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  unint64_t v142;
  uint64_t v143;
  unint64_t v144;
  unint64_t v145;
  unint64_t v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  void (*v165)(uint64_t, uint64_t);
  unint64_t v166;
  void (*v167)(uint64_t, uint64_t);
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  void (*v172)(uint64_t, uint64_t);
  unint64_t v173;
  int v174;
  void (*v175)(uint64_t, uint64_t);
  uint64_t v176;
  unint64_t v177;
  unsigned int v178;
  unsigned int v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  __int128 v184;
  char v185;
  __int128 v186;
  _QWORD *v187;
  _QWORD *v188;
  uint64_t v189;
  __int128 v190;
  _QWORD *v191;
  _QWORD *v192;
  uint64_t v193;
  __int128 v194;
  _QWORD *v195;
  _QWORD *v196;
  uint64_t v197;
  __int128 v198;
  _QWORD *v199;
  _QWORD *v200;
  uint64_t v201;
  char v202;
  void (*v203)(uint64_t, uint64_t, uint64_t);
  unint64_t v204;
  char v205;
  char v206;
  unint64_t v207;
  _OWORD *v208;
  _OWORD *v209;
  __int128 v210;
  _QWORD *v211;
  _QWORD *v212;
  uint64_t v213;
  char v214;
  unint64_t v215;
  void (*v216)(uint64_t, uint64_t, uint64_t);
  unint64_t v217;
  unint64_t v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  char v225;
  void (*v226)(uint64_t, uint64_t, uint64_t);
  unint64_t v227;
  unint64_t v228;
  unint64_t v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  char v233;
  void (*v234)(_QWORD *, _QWORD *, uint64_t);
  unint64_t v235;
  unint64_t v236;
  uint64_t v237;
  _QWORD *v238;
  _QWORD *v239;
  unint64_t v240;
  _QWORD *v241;
  _QWORD *v242;
  unint64_t v243;
  uint64_t result;
  uint64_t v245;
  uint64_t v246;
  void (*v247)(uint64_t, uint64_t, uint64_t);
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;

  v3 = a3;
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 40))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(v3 + 24);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v271 = sub_214423C48();
  v11 = *(_QWORD *)(v271 - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v13 = sub_214423C54();
  v14 = v10;
  v273 = v13;
  v15 = *(_QWORD *)(v13 - 8);
  v16 = *(unsigned __int8 *)(v15 + 80);
  v17 = v16 | v12;
  v18 = v16 | v12 | v10;
  v19 = v18 | 7;
  v20 = (v18 | 7) + v7;
  v281 = a2;
  v282 = a1;
  v21 = v20 + a1;
  v22 = ~(v18 | 7);
  v23 = (v20 + a1) & v22;
  v280 = v20;
  v24 = v20 + a2;
  v25 = v24 & v22;
  v283 = v22;
  v272 = v15;
  v269 = v11;
  v270 = v16;
  if (v23 == (v24 & v22))
  {
    v37 = *(_QWORD *)(v9 + 64);
    v38 = *(_QWORD *)(v11 + 64);
    v39 = *(_QWORD *)(v15 + 64);
    v40 = (v18 + 32) & v22;
    if (((v37 + v14) & ~v14) + v37 > v37)
      v37 += (v37 + v14) & ~v14;
    v266 = ~v12;
    v267 = *(_QWORD *)(v11 + 64);
    v265 = v12 + 8;
    v268 = ~v16;
    v29 = ((((v12 + 8) & ~v12) + v16 + v38) & ~v16) + v39;
    if (v37 <= v29)
      v37 = ((((v12 + 8) & ~v12) + v16 + v38) & ~v16) + v39;
    if (v37 <= 0x10)
      v37 = 16;
    v41 = (v40 | 1) + v37;
    v42 = ((v41 + v19) & v22) + v41;
    if (v41 > v42)
      v42 = v41;
    v43 = (v41 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (v42 <= v43 + 113)
      v42 = v43 + 113;
    v44 = v43 + 49;
    if (v42 > v44)
      v44 = v42;
    if (v44 <= 0x19)
      v35 = 25;
    else
      v35 = v44;
  }
  else
  {
    v246 = v24;
    v252 = v21;
    v261 = v8;
    v263 = v3;
    v276 = v18 + 32;
    v26 = (v18 + 32) & v22;
    v259 = v9;
    v27 = *(_QWORD *)(v9 + 64);
    v245 = v27 + v14;
    v28 = ((v27 + v14) & ~v14) + v27;
    if (v28 <= v27)
      v28 = *(_QWORD *)(v9 + 64);
    v266 = ~v12;
    v265 = v12 + 8;
    v267 = *(_QWORD *)(v11 + 64);
    v268 = ~v16;
    v29 = ((((v12 + 8) & ~v12) + v16 + v267) & ~v16) + *(_QWORD *)(v15 + 64);
    if (v28 <= v29)
      v28 = ((((v12 + 8) & ~v12) + v16 + v267) & ~v16) + *(_QWORD *)(v15 + 64);
    if (v28 <= 0x10)
      v30 = 16;
    else
      v30 = v28;
    v31 = (v26 | 1) + v30;
    v32 = ((v31 + v19) & v22) + v31;
    if (v31 > v32)
      v32 = v31;
    v33 = (v31 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (v32 <= v33 + 113)
      v32 = v33 + 113;
    v34 = v33 + 49;
    if (v32 <= v34)
      v32 = v34;
    if (v32 <= 0x19)
      v35 = 25;
    else
      v35 = v32;
    v278 = v30;
    v248 = v14;
    v250 = ~v14;
    v274 = v17;
    switch(*(_BYTE *)(v23 + v35))
    {
      case 0:
      case 1:
        goto LABEL_99;
      case 2:
LABEL_38:
        swift_release();
        goto LABEL_98;
      case 3:
LABEL_39:
        swift_release();
        swift_release();
        goto LABEL_98;
      case 4:
        sub_2141ED0BC(*(_QWORD *)v23, *(_QWORD *)(v23 + 8), *(_BYTE *)(v23 + 16));
        swift_bridgeObjectRelease();
        v45 = (v276 + v23) & v22;
        switch(*(_BYTE *)(v45 + v278))
        {
          case 0:
            goto LABEL_94;
          case 1:
            v53 = v261;
            v54 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
            v54(v45, v261);
            v55 = v45 + v248 + v27;
            goto LABEL_96;
          case 2:
            goto LABEL_38;
          case 3:
            goto LABEL_39;
          case 4:
            goto LABEL_97;
          default:
            if (v278 <= 3)
              v46 = v278;
            else
              v46 = 4;
            __asm { BR              X12 }
            return result;
        }
      case 5:
        sub_2141ED0BC(*(_QWORD *)v23, *(_QWORD *)(v23 + 8), *(_BYTE *)(v23 + 16));
        swift_bridgeObjectRelease();
        v47 = (v276 + v23) & v22;
        switch(*(_BYTE *)(v47 + v278))
        {
          case 0:
            (*(void (**)(uint64_t, uint64_t))(v9 + 8))((v276 + v23) & v22, v261);
            break;
          case 1:
            v56 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
            v56(v47, v261);
            v56((v47 + v248 + v27) & v250, v261);
            break;
          case 2:
            swift_release();
            break;
          case 3:
            swift_release();
            swift_release();
            break;
          case 4:
            swift_release();
            v57 = (v265 + v47) & v266;
            (*(void (**)(uint64_t, uint64_t))(v269 + 8))(v57, v271);
            (*(void (**)(uint64_t, uint64_t))(v272 + 8))((v57 + v270 + v267) & v268, v273);
            break;
          default:
            if (v278 <= 3)
              v48 = v278;
            else
              v48 = 4;
            __asm { BR              X12 }
            return result;
        }
        v58 = ((v252 | v19) + v31) & v22;
        sub_2141ED0BC(*(_QWORD *)v58, *(_QWORD *)(v58 + 8), *(_BYTE *)(v58 + 0x10));
        swift_bridgeObjectRelease();
        v45 = (v276 + v58) & v22;
        switch(*(_BYTE *)(v45 + v278))
        {
          case 0:
LABEL_94:
            (*(void (**)(uint64_t, uint64_t))(v259 + 8))(v45, v261);
            goto LABEL_98;
          case 1:
            v53 = v261;
            v54 = *(void (**)(uint64_t, uint64_t))(v259 + 8);
            v54(v45, v261);
            v55 = v245 + v45;
LABEL_96:
            v54(v55 & v250, v53);
            v22 = v283;
            goto LABEL_98;
          case 2:
            goto LABEL_38;
          case 3:
            goto LABEL_39;
          case 4:
LABEL_97:
            swift_release();
            v69 = (v265 + v45) & v266;
            (*(void (**)(uint64_t, uint64_t))(v269 + 8))(v69, v271);
            (*(void (**)(uint64_t, uint64_t))(v272 + 8))((v267 + v270 + v69) & v268, v273);
            goto LABEL_98;
          default:
            if (v278 <= 3)
              v59 = v278;
            else
              v59 = 4;
            __asm { BR              X12 }
            return result;
        }
      case 6:
        sub_2141ED0BC(*(_QWORD *)v23, *(_QWORD *)(v23 + 8), *(_BYTE *)(v23 + 16));
        swift_bridgeObjectRelease();
        v49 = (v276 + v23) & v22;
        switch(*(_BYTE *)(v49 + v278))
        {
          case 0:
            (*(void (**)(uint64_t, uint64_t))(v9 + 8))((v276 + v23) & v22, v261);
            break;
          case 1:
            v61 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
            v61(v49, v261);
            v61((v49 + v248 + v27) & v250, v261);
            break;
          case 2:
            swift_release();
            break;
          case 3:
            swift_release();
            swift_release();
            break;
          case 4:
            swift_release();
            v60 = (v265 + v49) & v266;
            (*(void (**)(uint64_t, uint64_t))(v269 + 8))(v60, v271);
            (*(void (**)(uint64_t, uint64_t))(v272 + 8))((v60 + v270 + v267) & v268, v273);
            break;
          default:
            if (v278 <= 3)
              v50 = v278;
            else
              v50 = 4;
            __asm { BR              X12 }
            return result;
        }
        v62 = ((v23 | 7) + v31) & 0xFFFFFFFFFFFFFFF8;
        v63 = *(unsigned __int8 *)(v62 + 96);
        if (v63 != 255)
          sub_2142637C0(*(_QWORD *)(v62 + 88), v63 & 1);
        sub_2142637C0(*(_QWORD *)(v62 + 104), *(_BYTE *)(v62 + 112));
        goto LABEL_98;
      case 7:
        sub_2141ED0BC(*(_QWORD *)v23, *(_QWORD *)(v23 + 8), *(_BYTE *)(v23 + 16));
        swift_bridgeObjectRelease();
        v51 = (v276 + v23) & v22;
        switch(*(_BYTE *)(v51 + v278))
        {
          case 0:
            (*(void (**)(uint64_t, uint64_t))(v9 + 8))((v276 + v23) & v22, v261);
            break;
          case 1:
            v64 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
            v64(v51, v261);
            v64((v51 + v248 + v27) & v250, v261);
            break;
          case 2:
            swift_release();
            break;
          case 3:
            swift_release();
            swift_release();
            break;
          case 4:
            swift_release();
            v65 = (v265 + v51) & v266;
            (*(void (**)(uint64_t, uint64_t))(v269 + 8))(v65, v271);
            (*(void (**)(uint64_t, uint64_t))(v272 + 8))((v65 + v270 + v267) & v268, v273);
            break;
          default:
            if (v278 <= 3)
              v52 = v278;
            else
              v52 = 4;
            __asm { BR              X12 }
            return result;
        }
        v66 = ((v23 | 7) + v31) & 0xFFFFFFFFFFFFFFF8;
        v67 = *(unsigned __int8 *)(v66 + 24);
        if (v67 <= 0xFB)
          sub_2141EF1B0(*(_QWORD *)(v66 + 8), *(_QWORD *)(v66 + 16), v67);
        v68 = *(unsigned __int8 *)(v66 + 48);
        v17 = v274;
        if (v68 > 0xFB)
          goto LABEL_99;
        sub_2141EF1B0(*(_QWORD *)(v66 + 32), *(_QWORD *)(v66 + 40), v68);
LABEL_98:
        v17 = v274;
LABEL_99:
        v71 = v278;
        switch(*(_BYTE *)(v25 + v35))
        {
          case 0:
            v72 = *(_QWORD *)v25;
            *(_BYTE *)(v23 + 8) = *(_BYTE *)(v25 + 8);
            *(_QWORD *)v23 = v72;
            *(_BYTE *)(v23 + v35) = 0;
            v3 = v263;
            goto LABEL_171;
          case 1:
            v73 = *(_OWORD *)v25;
            *(_OWORD *)(v23 + 9) = *(_OWORD *)(v25 + 9);
            *(_OWORD *)v23 = v73;
            v74 = 1;
            goto LABEL_109;
          case 2:
            *(_QWORD *)v23 = *(_QWORD *)v25;
            v74 = 2;
            goto LABEL_109;
          case 3:
            *(_OWORD *)v23 = *(_OWORD *)v25;
            v74 = 3;
LABEL_109:
            *(_BYTE *)(v23 + v35) = v74;
            v3 = v263;
            goto LABEL_171;
          case 4:
            v75 = *(_OWORD *)(v25 + 16);
            *(_OWORD *)v23 = *(_OWORD *)v25;
            *(_OWORD *)(v23 + 16) = v75;
            v76 = (_QWORD *)((v276 + v23) & v22);
            v77 = (_QWORD *)((v276 + v25) & v22);
            switch(*((_BYTE *)v77 + v278))
            {
              case 0:
                (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v259 + 32))(v76, v77, v261);
                v71 = v278;
                v17 = v274;
                v91 = 0;
                break;
              case 1:
                v92 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v259 + 32);
                v92(v76, v77, v261);
                v92((_QWORD *)(((unint64_t)v76 + v248 + v27) & v250), (_QWORD *)(((unint64_t)v77 + v248 + v27) & v250), v261);
                v71 = v278;
                v17 = v274;
                v91 = 1;
                break;
              case 2:
                *v76 = *v77;
                v91 = 2;
                break;
              case 3:
                *(_OWORD *)v76 = *(_OWORD *)v77;
                v91 = 3;
                break;
              case 4:
                *v76 = *v77;
                v93 = ((unint64_t)v77 + v265) & v266;
                (*(void (**)(unint64_t, unint64_t, uint64_t))(v269 + 32))(((unint64_t)v76 + v265) & v266, v93, v271);
                (*(void (**)(unint64_t, unint64_t, uint64_t))(v272 + 32))(((((unint64_t)v76 + v265) & v266) + v270 + v267) & v268, (v93 + v270 + v267) & v268, v273);
                v71 = v278;
                v17 = v274;
                v91 = 4;
                break;
              default:
                if (v278 <= 3)
                  v78 = v278;
                else
                  v78 = 4;
                __asm { BR              X12 }
                return result;
            }
            v3 = v263;
            *((_BYTE *)v76 + v71) = v91;
            v94 = 4;
            goto LABEL_170;
          case 5:
            v79 = *(_OWORD *)(v25 + 16);
            *(_OWORD *)v23 = *(_OWORD *)v25;
            *(_OWORD *)(v23 + 16) = v79;
            v80 = (_QWORD *)((v276 + v23) & v22);
            v81 = (_QWORD *)((v276 + v25) & v22);
            switch(*((_BYTE *)v81 + v278))
            {
              case 0:
                v95 = v259;
                (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v259 + 32))(v80, v81, v261);
                v71 = v278;
                v96 = 0;
                v3 = v263;
                goto LABEL_144;
              case 1:
                v97 = *(void (**)(unint64_t, unint64_t, uint64_t))(v259 + 32);
                v97((unint64_t)v80, (unint64_t)v81, v261);
                v98 = v97;
                v95 = v259;
                v98(((unint64_t)v80 + v248 + v27) & v250, ((unint64_t)v81 + v248 + v27) & v250, v261);
                v71 = v278;
                v96 = 1;
                v3 = v263;
                goto LABEL_144;
              case 2:
                *v80 = *v81;
                v96 = 2;
                goto LABEL_143;
              case 3:
                *(_OWORD *)v80 = *(_OWORD *)v81;
                v96 = 3;
                goto LABEL_143;
              case 4:
                *v80 = *v81;
                v99 = ((unint64_t)v81 + v265) & v266;
                (*(void (**)(unint64_t, unint64_t, uint64_t))(v269 + 32))(((unint64_t)v80 + v265) & v266, v99, v271);
                (*(void (**)(unint64_t, unint64_t, uint64_t))(v272 + 32))(((((unint64_t)v80 + v265) & v266) + v270 + v267) & v268, (v99 + v270 + v267) & v268, v273);
                v71 = v278;
                v96 = 4;
LABEL_143:
                v3 = v263;
                v95 = v259;
LABEL_144:
                *((_BYTE *)v80 + v71) = v96;
                v100 = (_OWORD *)(((v252 | v19) + v31) & v283);
                v101 = (_OWORD *)(((v246 | v19) + v31) & v283);
                v102 = v101[1];
                *v100 = *v101;
                v100[1] = v102;
                v103 = (_QWORD *)(((unint64_t)v100 + v276) & v283);
                v104 = (_QWORD *)(((unint64_t)v101 + v276) & v283);
                switch(*((_BYTE *)v104 + v71))
                {
                  case 0:
                    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v95 + 32))(v103, v104, v261);
                    v71 = v278;
                    v125 = 0;
                    break;
                  case 1:
                    v126 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v95 + 32);
                    v126(v103, v104, v261);
                    v126((_QWORD *)(((unint64_t)v103 + v245) & v250), (_QWORD *)(((unint64_t)v104 + v245) & v250), v261);
                    v71 = v278;
                    v125 = 1;
                    break;
                  case 2:
                    *v103 = *v104;
                    v125 = 2;
                    break;
                  case 3:
                    *(_OWORD *)v103 = *(_OWORD *)v104;
                    v125 = 3;
                    break;
                  case 4:
                    *v103 = *v104;
                    v127 = ((unint64_t)v104 + v265) & v266;
                    (*(void (**)(unint64_t, unint64_t, uint64_t))(v269 + 32))(((unint64_t)v103 + v265) & v266, v127, v271);
                    (*(void (**)(unint64_t, unint64_t, uint64_t))(v272 + 32))((v267 + v270 + (((unint64_t)v103 + v265) & v266)) & v268, (v267 + v270 + v127) & v268, v273);
                    v71 = v278;
                    v125 = 4;
                    break;
                  default:
                    if (v71 <= 3)
                      v105 = v71;
                    else
                      v105 = 4;
                    __asm { BR              X12 }
                    return result;
                }
                v17 = v274;
                *((_BYTE *)v103 + v71) = v125;
                v94 = 5;
                break;
              default:
                if (v278 <= 3)
                  v82 = v278;
                else
                  v82 = 4;
                __asm { BR              X12 }
                return result;
            }
            goto LABEL_170;
          case 6:
            v83 = *(_OWORD *)(v25 + 16);
            *(_OWORD *)v23 = *(_OWORD *)v25;
            *(_OWORD *)(v23 + 16) = v83;
            v84 = (_QWORD *)((v276 + v23) & v22);
            v85 = (_QWORD *)((v276 + v25) & v22);
            switch(*((_BYTE *)v85 + v278))
            {
              case 0:
                (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v259 + 32))(v84, v85, v261);
                v71 = v278;
                v17 = v274;
                v106 = 0;
                break;
              case 1:
                v108 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v259 + 32);
                v108(v84, v85, v261);
                v108((_QWORD *)(((unint64_t)v84 + v248 + v27) & v250), (_QWORD *)(((unint64_t)v85 + v248 + v27) & v250), v261);
                v71 = v278;
                v17 = v274;
                v106 = 1;
                break;
              case 2:
                *v84 = *v85;
                v106 = 2;
                break;
              case 3:
                *(_OWORD *)v84 = *(_OWORD *)v85;
                v106 = 3;
                break;
              case 4:
                *v84 = *v85;
                v107 = ((unint64_t)v85 + v265) & v266;
                (*(void (**)(unint64_t, unint64_t, uint64_t))(v269 + 32))(((unint64_t)v84 + v265) & v266, v107, v271);
                (*(void (**)(unint64_t, unint64_t, uint64_t))(v272 + 32))(((((unint64_t)v84 + v265) & v266) + v270 + v267) & v268, (v107 + v270 + v267) & v268, v273);
                v71 = v278;
                v17 = v274;
                v106 = 4;
                break;
              default:
                if (v278 <= 3)
                  v86 = v278;
                else
                  v86 = 4;
                __asm { BR              X12 }
                return result;
            }
            v3 = v263;
            *((_BYTE *)v84 + v71) = v106;
            v109 = ((v23 | 7) + v31) & 0xFFFFFFFFFFFFFFF8;
            v110 = ((v25 | 7) + v31) & 0xFFFFFFFFFFFFFFF8;
            v111 = *(_OWORD *)v110;
            v112 = *(_OWORD *)(v110 + 16);
            v113 = *(_OWORD *)(v110 + 48);
            *(_OWORD *)(v109 + 32) = *(_OWORD *)(v110 + 32);
            *(_OWORD *)(v109 + 48) = v113;
            *(_OWORD *)v109 = v111;
            *(_OWORD *)(v109 + 16) = v112;
            v114 = *(_OWORD *)(v110 + 64);
            v115 = *(_OWORD *)(v110 + 80);
            v116 = *(_OWORD *)(v110 + 96);
            *(_BYTE *)(v109 + 112) = *(_BYTE *)(v110 + 112);
            *(_OWORD *)(v109 + 80) = v115;
            *(_OWORD *)(v109 + 96) = v116;
            *(_OWORD *)(v109 + 64) = v114;
            v94 = 6;
            goto LABEL_170;
          case 7:
            v87 = *(_OWORD *)(v25 + 16);
            *(_OWORD *)v23 = *(_OWORD *)v25;
            *(_OWORD *)(v23 + 16) = v87;
            v88 = (_QWORD *)((v276 + v23) & v22);
            v89 = (_QWORD *)((v276 + v25) & v22);
            switch(*((_BYTE *)v89 + v278))
            {
              case 0:
                (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v259 + 32))(v88, v89, v261);
                v71 = v278;
                v17 = v274;
                v117 = 0;
                break;
              case 1:
                v118 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v259 + 32);
                v118(v88, v89, v261);
                v118((_QWORD *)(((unint64_t)v88 + v248 + v27) & v250), (_QWORD *)(((unint64_t)v89 + v248 + v27) & v250), v261);
                v71 = v278;
                v17 = v274;
                v117 = 1;
                break;
              case 2:
                *v88 = *v89;
                v117 = 2;
                break;
              case 3:
                *(_OWORD *)v88 = *(_OWORD *)v89;
                v117 = 3;
                break;
              case 4:
                *v88 = *v89;
                v119 = ((unint64_t)v89 + v265) & v266;
                (*(void (**)(unint64_t, unint64_t, uint64_t))(v269 + 32))(((unint64_t)v88 + v265) & v266, v119, v271);
                (*(void (**)(unint64_t, unint64_t, uint64_t))(v272 + 32))(((((unint64_t)v88 + v265) & v266) + v270 + v267) & v268, (v119 + v270 + v267) & v268, v273);
                v71 = v278;
                v17 = v274;
                v117 = 4;
                break;
              default:
                if (v278 <= 3)
                  v90 = v278;
                else
                  v90 = 4;
                __asm { BR              X12 }
                return result;
            }
            v3 = v263;
            *((_BYTE *)v88 + v71) = v117;
            v120 = ((v23 | 7) + v31) & 0xFFFFFFFFFFFFFFF8;
            v121 = ((v25 | 7) + v31) & 0xFFFFFFFFFFFFFFF8;
            v122 = *(_OWORD *)v121;
            v123 = *(_OWORD *)(v121 + 16);
            v124 = *(_OWORD *)(v121 + 32);
            *(_BYTE *)(v120 + 48) = *(_BYTE *)(v121 + 48);
            *(_OWORD *)(v120 + 16) = v123;
            *(_OWORD *)(v120 + 32) = v124;
            *(_OWORD *)v120 = v122;
            v94 = 7;
LABEL_170:
            *(_BYTE *)(v23 + v35) = v94;
            break;
          default:
            if (v35 <= 3)
              v70 = v35;
            else
              v70 = 4;
            __asm { BR              X12 }
            return result;
        }
        return result;
      default:
        if (v35 <= 3)
          v36 = v35;
        else
          v36 = 4;
        __asm { BR              X12 }
        return result;
    }
  }
LABEL_171:
  v128 = *(_QWORD *)(v3 + 32);
  v129 = *(_QWORD *)(v128 - 8);
  v130 = *(unsigned __int8 *)(v129 + 80);
  v131 = v17 | v130;
  v132 = v17 | v130 | 7;
  v133 = v35 + v132 + 1;
  v134 = v133 + v23;
  v135 = ~v132;
  v136 = v134 & ~v132;
  v137 = v133 + v25;
  v138 = (v133 + v25) & ~v132;
  v139 = ~v130;
  if (v136 == v138)
  {
    v150 = *(_QWORD *)(v129 + 64);
    v151 = (v131 + 32) & v135;
    if (((v150 + v130) & v139) + v150 > v150)
      v150 += (v150 + v130) & v139;
    if (v150 <= v29)
      v150 = v29;
    if (v150 <= 0x10)
      v150 = 16;
    v152 = (v151 | 1) + v150;
    v153 = ((v152 + v132) & v135) + v152;
    if (v152 > v153)
      v153 = v152;
    v154 = (v152 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (v153 <= v154 + 113)
      v153 = v154 + 113;
    v155 = v154 + 49;
    if (v153 > v155)
      v155 = v153;
    if (v155 <= 0x19)
      v148 = 25;
    else
      v148 = v155;
    v156 = v283;
  }
  else
  {
    v251 = v137;
    v262 = v134;
    v277 = v131 + 32;
    v140 = (v131 + 32) & v135;
    v264 = *(_QWORD *)(v128 - 8);
    v141 = *(_QWORD *)(v129 + 64);
    v249 = v141 + v130;
    v142 = ((v141 + v130) & v139) + v141;
    if (v142 <= v141)
      v142 = *(_QWORD *)(v129 + 64);
    if (v142 <= v29)
      v142 = v29;
    if (v142 <= 0x10)
      v143 = 16;
    else
      v143 = v142;
    v144 = (v140 | 1) + v143;
    v145 = ((v144 + v132) & v135) + v144;
    if (v144 > v145)
      v145 = v144;
    v146 = (v144 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (v145 <= v146 + 113)
      v145 = v146 + 113;
    v147 = v146 + 49;
    if (v145 <= v147)
      v145 = v147;
    if (v145 <= 0x19)
      v148 = 25;
    else
      v148 = v145;
    v275 = v128;
    v260 = ~v130;
    v279 = v143;
    switch(*(_BYTE *)(v136 + v148))
    {
      case 0:
      case 1:
        break;
      case 2:
LABEL_210:
        swift_release();
        break;
      case 3:
LABEL_211:
        swift_release();
        swift_release();
        break;
      case 4:
        sub_2141ED0BC(*(_QWORD *)v136, *(_QWORD *)(v136 + 8), *(_BYTE *)(v136 + 16));
        swift_bridgeObjectRelease();
        v157 = (v277 + v136) & v135;
        switch(*(_BYTE *)(v157 + v279))
        {
          case 0:
            goto LABEL_266;
          case 1:
            v253 = v133;
            v165 = *(void (**)(uint64_t, uint64_t))(v264 + 8);
            v165((v277 + v136) & v135, v275);
            v166 = v157 + v130 + v141;
            goto LABEL_269;
          case 2:
            goto LABEL_210;
          case 3:
            goto LABEL_211;
          case 4:
            goto LABEL_267;
          default:
            if (v279 <= 3)
              v158 = v279;
            else
              v158 = 4;
            __asm { BR              X12 }
            return result;
        }
      case 5:
        sub_2141ED0BC(*(_QWORD *)v136, *(_QWORD *)(v136 + 8), *(_BYTE *)(v136 + 16));
        swift_bridgeObjectRelease();
        v159 = (v277 + v136) & v135;
        switch(*(_BYTE *)(v159 + v279))
        {
          case 0:
            (*(void (**)(uint64_t, uint64_t))(v264 + 8))((v277 + v136) & v135, v275);
            break;
          case 1:
            v254 = v133;
            v167 = *(void (**)(uint64_t, uint64_t))(v264 + 8);
            v167((v277 + v136) & v135, v275);
            v167((v159 + v130 + v141) & v260, v275);
            v133 = v254;
            break;
          case 2:
            swift_release();
            break;
          case 3:
            swift_release();
            swift_release();
            break;
          case 4:
            swift_release();
            v168 = (v265 + v159) & v266;
            (*(void (**)(uint64_t, uint64_t))(v269 + 8))(v168, v271);
            (*(void (**)(uint64_t, uint64_t))(v272 + 8))((v267 + v270 + v168) & v268, v273);
            break;
          default:
            if (v279 <= 3)
              v160 = v279;
            else
              v160 = 4;
            __asm { BR              X12 }
            return result;
        }
        v169 = ((v262 | v132) + v144) & v135;
        sub_2141ED0BC(*(_QWORD *)v169, *(_QWORD *)(v169 + 8), *(_BYTE *)(v169 + 0x10));
        swift_bridgeObjectRelease();
        v157 = (v277 + v169) & v135;
        switch(*(_BYTE *)(v157 + v279))
        {
          case 0:
LABEL_266:
            (*(void (**)(uint64_t, uint64_t))(v264 + 8))(v157, v275);
            goto LABEL_270;
          case 1:
            v253 = v133;
            v165 = *(void (**)(uint64_t, uint64_t))(v264 + 8);
            v165(v157, v275);
            v166 = v249 + v157;
LABEL_269:
            v165(v166 & v260, v275);
            v133 = v253;
            goto LABEL_270;
          case 2:
            goto LABEL_210;
          case 3:
            goto LABEL_211;
          case 4:
LABEL_267:
            swift_release();
            v180 = (v265 + v157) & v266;
            (*(void (**)(uint64_t, uint64_t))(v269 + 8))(v180, v271);
            (*(void (**)(uint64_t, uint64_t))(v272 + 8))((v267 + v270 + v180) & v268, v273);
            goto LABEL_270;
          default:
            if (v279 <= 3)
              v170 = v279;
            else
              v170 = 4;
            __asm { BR              X12 }
            return result;
        }
      case 6:
        sub_2141ED0BC(*(_QWORD *)v136, *(_QWORD *)(v136 + 8), *(_BYTE *)(v136 + 16));
        swift_bridgeObjectRelease();
        v161 = (v277 + v136) & v135;
        switch(*(_BYTE *)(v161 + v279))
        {
          case 0:
            (*(void (**)(uint64_t, uint64_t))(v264 + 8))((v277 + v136) & v135, v275);
            break;
          case 1:
            v255 = v133;
            v172 = *(void (**)(uint64_t, uint64_t))(v264 + 8);
            v172((v277 + v136) & v135, v275);
            v172((v161 + v130 + v141) & v260, v275);
            v133 = v255;
            break;
          case 2:
            swift_release();
            break;
          case 3:
            swift_release();
            swift_release();
            break;
          case 4:
            swift_release();
            v171 = (v265 + v161) & v266;
            (*(void (**)(uint64_t, uint64_t))(v269 + 8))(v171, v271);
            (*(void (**)(uint64_t, uint64_t))(v272 + 8))((v267 + v270 + v171) & v268, v273);
            break;
          default:
            if (v279 <= 3)
              v162 = v279;
            else
              v162 = 4;
            __asm { BR              X12 }
            return result;
        }
        v173 = ((v136 | 7) + v144) & 0xFFFFFFFFFFFFFFF8;
        v174 = *(unsigned __int8 *)(v173 + 96);
        if (v174 != 255)
          sub_2142637C0(*(_QWORD *)(v173 + 88), v174 & 1);
        sub_2142637C0(*(_QWORD *)(v173 + 104), *(_BYTE *)(v173 + 112));
        break;
      case 7:
        sub_2141ED0BC(*(_QWORD *)v136, *(_QWORD *)(v136 + 8), *(_BYTE *)(v136 + 16));
        swift_bridgeObjectRelease();
        v163 = (v277 + v136) & v135;
        switch(*(_BYTE *)(v163 + v279))
        {
          case 0:
            (*(void (**)(uint64_t, uint64_t))(v264 + 8))((v277 + v136) & v135, v275);
            break;
          case 1:
            v256 = v133;
            v175 = *(void (**)(uint64_t, uint64_t))(v264 + 8);
            v175((v277 + v136) & v135, v275);
            v175((v163 + v130 + v141) & v260, v275);
            v133 = v256;
            break;
          case 2:
            swift_release();
            break;
          case 3:
            swift_release();
            swift_release();
            break;
          case 4:
            swift_release();
            v176 = (v265 + v163) & v266;
            (*(void (**)(uint64_t, uint64_t))(v269 + 8))(v176, v271);
            (*(void (**)(uint64_t, uint64_t))(v272 + 8))((v267 + v270 + v176) & v268, v273);
            break;
          default:
            if (v279 <= 3)
              v164 = v279;
            else
              v164 = 4;
            __asm { BR              X12 }
            return result;
        }
        v177 = ((v136 | 7) + v144) & 0xFFFFFFFFFFFFFFF8;
        v178 = *(unsigned __int8 *)(v177 + 24);
        if (v178 <= 0xFB)
          sub_2141EF1B0(*(_QWORD *)(v177 + 8), *(_QWORD *)(v177 + 16), v178);
        v179 = *(unsigned __int8 *)(v177 + 48);
        if (v179 <= 0xFB)
          sub_2141EF1B0(*(_QWORD *)(v177 + 32), *(_QWORD *)(v177 + 40), v179);
        break;
      default:
        if (v148 <= 3)
          v149 = v148;
        else
          v149 = 4;
        __asm { BR              X12 }
        return result;
    }
LABEL_270:
    v182 = v279;
    switch(*(_BYTE *)(v138 + v148))
    {
      case 0:
        v183 = *(_QWORD *)v138;
        *(_BYTE *)(v136 + 8) = *(_BYTE *)(v138 + 8);
        *(_QWORD *)v136 = v183;
        *(_BYTE *)(v136 + v148) = 0;
        v156 = v283;
        break;
      case 1:
        v184 = *(_OWORD *)v138;
        *(_OWORD *)(v136 + 9) = *(_OWORD *)(v138 + 9);
        *(_OWORD *)v136 = v184;
        v185 = 1;
        goto LABEL_280;
      case 2:
        *(_QWORD *)v136 = *(_QWORD *)v138;
        v185 = 2;
        goto LABEL_280;
      case 3:
        *(_OWORD *)v136 = *(_OWORD *)v138;
        v185 = 3;
LABEL_280:
        *(_BYTE *)(v136 + v148) = v185;
        v156 = v283;
        break;
      case 4:
        v257 = v133;
        v186 = *(_OWORD *)(v138 + 16);
        *(_OWORD *)v136 = *(_OWORD *)v138;
        *(_OWORD *)(v136 + 16) = v186;
        v187 = (_QWORD *)((v277 + v136) & v135);
        v188 = (_QWORD *)((v277 + v138) & v135);
        switch(*((_BYTE *)v188 + v279))
        {
          case 0:
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v264 + 32))((v277 + v136) & v135, (v277 + v138) & v135, v275);
            v182 = v279;
            v202 = 0;
            break;
          case 1:
            v203 = *(void (**)(uint64_t, uint64_t, uint64_t))(v264 + 32);
            v203((v277 + v136) & v135, (v277 + v138) & v135, v275);
            v203(((unint64_t)v187 + v130 + v141) & v260, ((unint64_t)v188 + v130 + v141) & v260, v275);
            v182 = v279;
            v202 = 1;
            break;
          case 2:
            *v187 = *v188;
            v202 = 2;
            break;
          case 3:
            *(_OWORD *)v187 = *(_OWORD *)v188;
            v202 = 3;
            break;
          case 4:
            *v187 = *v188;
            v204 = ((unint64_t)v188 + v265) & v266;
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v269 + 32))(((unint64_t)v187 + v265) & v266, v204, v271);
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v272 + 32))((v267 + v270 + (((unint64_t)v187 + v265) & v266)) & v268, (v267 + v270 + v204) & v268, v273);
            v182 = v279;
            v202 = 4;
            break;
          default:
            if (v279 <= 3)
              v189 = v279;
            else
              v189 = 4;
            __asm { BR              X12 }
            return result;
        }
        v156 = v283;
        *((_BYTE *)v187 + v182) = v202;
        v205 = 4;
        goto LABEL_340;
      case 5:
        v257 = v133;
        v190 = *(_OWORD *)(v138 + 16);
        *(_OWORD *)v136 = *(_OWORD *)v138;
        *(_OWORD *)(v136 + 16) = v190;
        v191 = (_QWORD *)((v277 + v136) & v135);
        v192 = (_QWORD *)((v277 + v138) & v135);
        switch(*((_BYTE *)v192 + v279))
        {
          case 0:
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v264 + 32))((v277 + v136) & v135, (v277 + v138) & v135, v275);
            v182 = v279;
            v206 = 0;
            break;
          case 1:
            v247 = *(void (**)(uint64_t, uint64_t, uint64_t))(v264 + 32);
            v247((v277 + v136) & v135, (v277 + v138) & v135, v275);
            v247(((unint64_t)v191 + v130 + v141) & v260, ((unint64_t)v192 + v130 + v141) & v260, v275);
            v182 = v279;
            v206 = 1;
            break;
          case 2:
            *v191 = *v192;
            v206 = 2;
            break;
          case 3:
            *(_OWORD *)v191 = *(_OWORD *)v192;
            v206 = 3;
            break;
          case 4:
            *v191 = *v192;
            v207 = ((unint64_t)v192 + v265) & v266;
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v269 + 32))(((unint64_t)v191 + v265) & v266, v207, v271);
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v272 + 32))((v267 + v270 + (((unint64_t)v191 + v265) & v266)) & v268, (v267 + v270 + v207) & v268, v273);
            v182 = v279;
            v206 = 4;
            break;
          default:
            if (v279 <= 3)
              v193 = v279;
            else
              v193 = 4;
            __asm { BR              X12 }
            return result;
        }
        v156 = v283;
        *((_BYTE *)v191 + v182) = v206;
        v208 = (_OWORD *)(((v262 | v132) + v144) & v135);
        v209 = (_OWORD *)(((v251 | v132) + v144) & v135);
        v210 = v209[1];
        *v208 = *v209;
        v208[1] = v210;
        v211 = (_QWORD *)(((unint64_t)v208 + v277) & v135);
        v212 = (_QWORD *)(((unint64_t)v209 + v277) & v135);
        switch(*((_BYTE *)v212 + v182))
        {
          case 0:
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v264 + 32))(v211, v212, v275);
            v182 = v279;
            v233 = 0;
            break;
          case 1:
            v234 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v264 + 32);
            v234(v211, v212, v275);
            v234((_QWORD *)(((unint64_t)v211 + v249) & v260), (_QWORD *)(((unint64_t)v212 + v249) & v260), v275);
            v182 = v279;
            v233 = 1;
            break;
          case 2:
            *v211 = *v212;
            v233 = 2;
            break;
          case 3:
            *(_OWORD *)v211 = *(_OWORD *)v212;
            v233 = 3;
            break;
          case 4:
            *v211 = *v212;
            v235 = ((unint64_t)v212 + v265) & v266;
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v269 + 32))(((unint64_t)v211 + v265) & v266, v235, v271);
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v272 + 32))((v267 + v270 + (((unint64_t)v211 + v265) & v266)) & v268, (v267 + v270 + v235) & v268, v273);
            v182 = v279;
            v233 = 4;
            break;
          default:
            if (v182 <= 3)
              v213 = v182;
            else
              v213 = 4;
            __asm { BR              X12 }
            return result;
        }
        *((_BYTE *)v211 + v182) = v233;
        v205 = 5;
        goto LABEL_340;
      case 6:
        v258 = v133;
        v194 = *(_OWORD *)(v138 + 16);
        *(_OWORD *)v136 = *(_OWORD *)v138;
        *(_OWORD *)(v136 + 16) = v194;
        v195 = (_QWORD *)((v277 + v136) & v135);
        v196 = (_QWORD *)((v277 + v138) & v135);
        switch(*((_BYTE *)v196 + v279))
        {
          case 0:
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v264 + 32))((v277 + v136) & v135, (v277 + v138) & v135, v275);
            v182 = v279;
            v214 = 0;
            break;
          case 1:
            v216 = *(void (**)(uint64_t, uint64_t, uint64_t))(v264 + 32);
            v216((v277 + v136) & v135, (v277 + v138) & v135, v275);
            v216(((unint64_t)v195 + v130 + v141) & v260, ((unint64_t)v196 + v130 + v141) & v260, v275);
            v182 = v279;
            v214 = 1;
            break;
          case 2:
            *v195 = *v196;
            v214 = 2;
            break;
          case 3:
            *(_OWORD *)v195 = *(_OWORD *)v196;
            v214 = 3;
            break;
          case 4:
            *v195 = *v196;
            v215 = ((unint64_t)v196 + v265) & v266;
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v269 + 32))(((unint64_t)v195 + v265) & v266, v215, v271);
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v272 + 32))((v267 + v270 + (((unint64_t)v195 + v265) & v266)) & v268, (v267 + v270 + v215) & v268, v273);
            v182 = v279;
            v214 = 4;
            break;
          default:
            if (v279 <= 3)
              v197 = v279;
            else
              v197 = 4;
            __asm { BR              X12 }
            return result;
        }
        v156 = v283;
        v133 = v258;
        *((_BYTE *)v195 + v182) = v214;
        v217 = ((v136 | 7) + v144) & 0xFFFFFFFFFFFFFFF8;
        v218 = ((v138 | 7) + v144) & 0xFFFFFFFFFFFFFFF8;
        v219 = *(_OWORD *)v218;
        v220 = *(_OWORD *)(v218 + 16);
        v221 = *(_OWORD *)(v218 + 48);
        *(_OWORD *)(v217 + 32) = *(_OWORD *)(v218 + 32);
        *(_OWORD *)(v217 + 48) = v221;
        *(_OWORD *)v217 = v219;
        *(_OWORD *)(v217 + 16) = v220;
        v222 = *(_OWORD *)(v218 + 64);
        v223 = *(_OWORD *)(v218 + 80);
        v224 = *(_OWORD *)(v218 + 96);
        *(_BYTE *)(v217 + 112) = *(_BYTE *)(v218 + 112);
        *(_OWORD *)(v217 + 80) = v223;
        *(_OWORD *)(v217 + 96) = v224;
        *(_OWORD *)(v217 + 64) = v222;
        *(_BYTE *)(v136 + v148) = 6;
        break;
      case 7:
        v257 = v133;
        v198 = *(_OWORD *)(v138 + 16);
        *(_OWORD *)v136 = *(_OWORD *)v138;
        *(_OWORD *)(v136 + 16) = v198;
        v199 = (_QWORD *)((v277 + v136) & v135);
        v200 = (_QWORD *)((v277 + v138) & v135);
        switch(*((_BYTE *)v200 + v279))
        {
          case 0:
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v264 + 32))((v277 + v136) & v135, (v277 + v138) & v135, v275);
            v182 = v279;
            v225 = 0;
            break;
          case 1:
            v226 = *(void (**)(uint64_t, uint64_t, uint64_t))(v264 + 32);
            v226((v277 + v136) & v135, (v277 + v138) & v135, v275);
            v226(((unint64_t)v199 + v130 + v141) & v260, ((unint64_t)v200 + v130 + v141) & v260, v275);
            v182 = v279;
            v225 = 1;
            break;
          case 2:
            *v199 = *v200;
            v225 = 2;
            break;
          case 3:
            *(_OWORD *)v199 = *(_OWORD *)v200;
            v225 = 3;
            break;
          case 4:
            *v199 = *v200;
            v227 = ((unint64_t)v200 + v265) & v266;
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v269 + 32))(((unint64_t)v199 + v265) & v266, v227, v271);
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v272 + 32))((v267 + v270 + (((unint64_t)v199 + v265) & v266)) & v268, (v267 + v270 + v227) & v268, v273);
            v182 = v279;
            v225 = 4;
            break;
          default:
            if (v279 <= 3)
              v201 = v279;
            else
              v201 = 4;
            __asm { BR              X12 }
            return result;
        }
        v156 = v283;
        *((_BYTE *)v199 + v182) = v225;
        v228 = ((v136 | 7) + v144) & 0xFFFFFFFFFFFFFFF8;
        v229 = ((v138 | 7) + v144) & 0xFFFFFFFFFFFFFFF8;
        v230 = *(_OWORD *)v229;
        v231 = *(_OWORD *)(v229 + 16);
        v232 = *(_OWORD *)(v229 + 32);
        *(_BYTE *)(v228 + 48) = *(_BYTE *)(v229 + 48);
        *(_OWORD *)(v228 + 16) = v231;
        *(_OWORD *)(v228 + 32) = v232;
        *(_OWORD *)v228 = v230;
        v205 = 7;
LABEL_340:
        *(_BYTE *)(v136 + v148) = v205;
        v133 = v257;
        break;
      default:
        if (v148 <= 3)
          v181 = v148;
        else
          v181 = 4;
        __asm { BR              X12 }
        return result;
    }
  }
  *(_QWORD *)(((v136 | 7) + v148 + 1) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)(((v138 | 7) + v148 + 1) & 0xFFFFFFFFFFFFF8);
  swift_release();
  v236 = ((v148 + ((v133 + (v280 & v156)) & v135) + 8) & 0xFFFFFFFFFFFFFFF8) + 8;
  v237 = (v282 + v236 + 7) & 0xFFFFFFFFFFFFF8;
  v238 = (_QWORD *)((v281 + v236 + 7) & 0xFFFFFFFFFFFFFFF8);
  *(_QWORD *)v237 = *v238;
  v237 += 15;
  v239 = (_QWORD *)(((unint64_t)v238 + 15) & 0xFFFFFFFFFFFFFFF8);
  *(_QWORD *)(v237 & 0xFFFFFFFFFFFFFFF8) = *v239;
  v240 = (v237 & 0xFFFFFFFFFFFFFFF8) + 15;
  swift_bridgeObjectRelease();
  v240 &= 0xFFFFFFFFFFFFFFF8;
  v241 = (_QWORD *)(((unint64_t)v239 + 15) & 0xFFFFFFFFFFFFF8);
  *(_QWORD *)v240 = *v241;
  swift_bridgeObjectRelease();
  v242 = (_QWORD *)((v240 + 15) & 0xFFFFFFFFFFFFFFF8);
  v243 = ((unint64_t)v241 + 15) & 0xFFFFFFFFFFFFFFF8;
  if (*v242 < 0xFFFFFFFFuLL)
    goto LABEL_345;
  if (*(_QWORD *)v243 < 0xFFFFFFFFuLL)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_345:
    *(_OWORD *)v242 = *(_OWORD *)v243;
    return v282;
  }
  *v242 = *(_QWORD *)v243;
  swift_bridgeObjectRelease();
  v242[1] = *(_QWORD *)(v243 + 8);
  swift_bridgeObjectRelease();
  return v282;
}

uint64_t sub_21428081C(uint64_t a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  unint64_t v46;

  v6 = a3[2];
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int *)(v7 + 84);
  v9 = *(_QWORD *)(a3[3] - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = *(_QWORD *)(sub_214423C48() - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v13 = *(_QWORD *)(sub_214423C54() - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v15 = v14 | v12;
  v16 = v14 | v12 | v10;
  v17 = v16 | 7;
  v18 = (v16 + 32) & ~(v16 | 7);
  v19 = *(_QWORD *)(v9 + 64);
  if (((v19 + v10) & ~v10) + v19 > v19)
    v19 += (v19 + v10) & ~v10;
  v20 = ((*(_QWORD *)(v11 + 64) + v14 + ((v12 + 8) & ~v12)) & ~v14) + *(_QWORD *)(v13 + 64);
  if (v19 <= v20)
    v21 = v20;
  else
    v21 = v19;
  if (v21 <= 0x10)
    v21 = 16;
  v22 = v21 + v18;
  if (v22 + 1 > ((v22 + 1 + v17) & ~v17) + v22 + 1)
    v23 = v22 + 1;
  else
    v23 = ((v22 + 1 + v17) & ~v17) + v22 + 1;
  v24 = (v22 + 8) & 0xFFFFFFFFFFFFFFF8;
  if (v23 <= v24 + 113)
    v23 = v24 + 113;
  v25 = v24 + 49;
  if (v23 > v25)
    v25 = v23;
  if (v25 <= 0x19)
    v26 = 25;
  else
    v26 = v25;
  v27 = *(_QWORD *)(a3[4] - 8);
  v28 = *(unsigned __int8 *)(v27 + 80);
  v29 = v15 | v28;
  v30 = v29 | 7;
  v31 = (v29 + 32) & ~(v29 | 7);
  v32 = *(_QWORD *)(v27 + 64);
  v33 = ((v32 + v28) & ~v28) + v32;
  if (v33 > v32)
    v32 = v33;
  if (v32 > v20)
    v20 = v32;
  if (v20 <= 0x10)
    v20 = 16;
  v34 = v20 + v31;
  if (v34 + 1 > ((v34 + 1 + v30) & ~v30) + v34 + 1)
    v35 = v34 + 1;
  else
    v35 = ((v34 + 1 + v30) & ~v30) + v34 + 1;
  v36 = (v34 + 8) & 0xFFFFFFFFFFFFFFF8;
  if (v35 <= v36 + 113)
    v35 = v36 + 113;
  v37 = v36 + 49;
  if (v35 > v37)
    v37 = v35;
  if (v37 <= 0x19)
    v38 = 25;
  else
    v38 = v37;
  if (v8 <= 0x7FFFFFFF)
    v39 = 0x7FFFFFFF;
  else
    v39 = v8;
  if (!a2)
    return 0;
  v40 = *(_QWORD *)(v7 + 64) + v17;
  v41 = v26 + 1;
  if (v39 < a2)
  {
    if (((((((((((((v38 + ((v41 + v30 + (v40 & ~v17)) & ~v30) + 8) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
               + 15) & 0xFFFFFFFFFFFFFFF8)
             + 15) & 0xFFFFFFFFFFFFFFF8)
           + 15) & 0xFFFFFFFFFFFFFFF8)
         + 16) & 0xFFFFFFF8) != 0)
      v42 = 2;
    else
      v42 = a2 - v39 + 1;
    if (v42 >= 0x10000)
      v43 = 4;
    else
      v43 = 2;
    if (v42 < 0x100)
      v43 = 1;
    if (v42 >= 2)
      v44 = v43;
    else
      v44 = 0;
    __asm { BR              X0 }
  }
  if (v8 >= 0x7FFFFFFF)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, v8, v6);
  v46 = *(_QWORD *)((((((v40 + a1) & ~v17) + v30 + v41) & ~v30 | 7) + v38 + 1) & 0xFFFFFFFFFFFFF8);
  if (v46 >= 0xFFFFFFFF)
    LODWORD(v46) = -1;
  return (v46 + 1);
}

void sub_214280B38(unsigned int *a1, unsigned int a2, unsigned int a3, _QWORD *a4)
{
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unsigned int v40;
  size_t v41;
  unsigned int v42;
  int v43;
  int v44;
  unsigned int v45;

  v8 = *(_QWORD *)(a4[2] - 8);
  v9 = *(_DWORD *)(v8 + 84);
  v10 = *(_QWORD *)(a4[3] - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = *(_QWORD *)(sub_214423C48() - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = *(_QWORD *)(sub_214423C54() - 8);
  v15 = *(unsigned __int8 *)(v14 + 80);
  v16 = v15 | v13;
  v17 = v15 | v13 | v11;
  v18 = v17 | 7;
  v19 = (v17 + 32) & ~(v17 | 7);
  v20 = *(_QWORD *)(v10 + 64);
  if (((v20 + v11) & ~v11) + v20 > v20)
    v20 += (v20 + v11) & ~v11;
  v21 = ((*(_QWORD *)(v12 + 64) + v15 + ((v13 + 8) & ~v13)) & ~v15) + *(_QWORD *)(v14 + 64);
  if (v20 <= v21)
    v22 = v21;
  else
    v22 = v20;
  if (v22 <= 0x10)
    v22 = 16;
  v23 = v22 + v19;
  if (v23 + 1 > ((v23 + 1 + v18) & ~v18) + v23 + 1)
    v24 = v23 + 1;
  else
    v24 = ((v23 + 1 + v18) & ~v18) + v23 + 1;
  v25 = (v23 + 8) & 0xFFFFFFFFFFFFFFF8;
  if (v24 <= v25 + 113)
    v24 = v25 + 113;
  v26 = v25 + 49;
  if (v24 > v26)
    v26 = v24;
  v27 = 25;
  if (v26 <= 0x19)
    v28 = 25;
  else
    v28 = v26;
  v29 = *(_QWORD *)(a4[4] - 8);
  v30 = *(unsigned __int8 *)(v29 + 80);
  v31 = v16 | v30;
  v32 = v31 | 7;
  v33 = (v31 + 32) & ~(v31 | 7);
  v34 = *(_QWORD *)(v29 + 64);
  v35 = ((v34 + v30) & ~v30) + v34;
  if (v35 > v34)
    v34 = v35;
  if (v34 > v21)
    v21 = v34;
  if (v21 <= 0x10)
    v21 = 16;
  v36 = v21 + v33;
  if (v36 + 1 > ((v36 + 1 + v32) & ~v32) + v36 + 1)
    v37 = v36 + 1;
  else
    v37 = ((v36 + 1 + v32) & ~v32) + v36 + 1;
  v38 = (v36 + 8) & 0xFFFFFFFFFFFFFFF8;
  if (v37 <= v38 + 113)
    v37 = v38 + 113;
  v39 = v38 + 49;
  if (v37 > v39)
    v39 = v37;
  if (v39 > 0x19)
    v27 = v39;
  if (v9 <= 0x7FFFFFFF)
    v40 = 0x7FFFFFFF;
  else
    v40 = v9;
  v41 = ((((((((((v27 + ((v28 + 1 + v32 + ((*(_QWORD *)(v8 + 64) + v18) & ~v18)) & ~v32) + 8) & 0xFFFFFFFFFFFFFFF8)
              + 15) & 0xFFFFFFFFFFFFFFF8)
            + 15) & 0xFFFFFFFFFFFFFFF8)
          + 15) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  if (v40 >= a3)
  {
    v44 = 0;
    if (a2 <= v40)
      goto LABEL_49;
  }
  else
  {
    if ((((((((((((_DWORD)v27
                 + (((_DWORD)v28 + 1 + (_DWORD)v32 + ((*(_DWORD *)(v8 + 64) + (_DWORD)v18) & ~(_DWORD)v18)) & ~(_DWORD)v32)
                 + 8) & 0xFFFFFFF8)
               + 15) & 0xFFFFFFF8)
             + 15) & 0xFFFFFFF8)
           + 15) & 0xFFFFFFF8)
         + 15) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v42 = a3 - v40 + 1;
    else
      v42 = 2;
    if (v42 >= 0x10000)
      v43 = 4;
    else
      v43 = 2;
    if (v42 < 0x100)
      v43 = 1;
    if (v42 >= 2)
      v44 = v43;
    else
      v44 = 0;
    if (a2 <= v40)
LABEL_49:
      __asm { BR              X16 }
  }
  if ((_DWORD)v41)
  {
    v45 = ~v40 + a2;
    bzero(a1, v41);
    *a1 = v45;
  }
  __asm { BR              X10 }
}

void sub_214280DE4()
{
  uint64_t v0;
  char v1;
  uint64_t v2;

  *(_BYTE *)(v0 + v2) = v1;
  JUMPOUT(0x214280E84);
}

void sub_214280DEC()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  *(_DWORD *)(v0 + v2) = 0;
  if (v1)
    JUMPOUT(0x214280DF4);
  JUMPOUT(0x214280E84);
}

void sub_214280E60()
{
  uint64_t v0;
  __int16 v1;
  uint64_t v2;

  *(_WORD *)(v0 + v2) = v1;
  JUMPOUT(0x214280E84);
}

void sub_214280E68()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  *(_DWORD *)(v0 + v2) = v1;
  JUMPOUT(0x214280E84);
}

uint64_t sub_214280E70()
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_WORD *)(v1 + v4) = 0;
  if (!(_DWORD)v2)
    JUMPOUT(0x214280E84);
  if (v3 < 0x7FFFFFFF)
  {
    if ((v2 & 0x80000000) == 0)
      JUMPOUT(0x214280E80);
    JUMPOUT(0x214280E7CLL);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 56))(v1, v2, v3);
}

uint64_t sub_214280EA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void (*a8)(void), uint64_t (*a9)(uint64_t, uint64_t, uint64_t), uint64_t (*a10)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v10;

  v10 = a7;
  if ((a7 & 0x80) != 0)
  {
    a9 = a10;
    v10 = a7 & 0x7F;
  }
  a8();
  return a9(a5, a6, v10);
}

uint64_t sub_214280F0C(uint64_t a1)
{
  return sub_214280EA8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 48), (void (*)(void))sub_21422F7F0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_214285A58, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_214285A58);
}

uint64_t sub_214280F58(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(unsigned __int8 *)(a2 + 48);
  sub_214280EA8(*(_QWORD *)a2, v4, v5, v6, v7, v8, v9, (void (*)(void))sub_2141EF2B4, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_214285A5C, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_214285A5C);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_BYTE *)(a1 + 48) = v9;
  return a1;
}

uint64_t sub_214280FF4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(unsigned __int8 *)(a2 + 48);
  sub_214280EA8(*(_QWORD *)a2, v4, v5, v6, v7, v8, v9, (void (*)(void))sub_2141EF2B4, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_214285A5C, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_214285A5C);
  v10 = *(_QWORD *)a1;
  v11 = *(_QWORD *)(a1 + 8);
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(_QWORD *)(a1 + 24);
  v14 = *(_QWORD *)(a1 + 32);
  v15 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  v16 = *(unsigned __int8 *)(a1 + 48);
  *(_BYTE *)(a1 + 48) = v9;
  sub_214280EA8(v10, v11, v12, v13, v14, v15, v16, (void (*)(void))sub_21422F7F0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_214285A58, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_214285A58);
  return a1;
}

uint64_t sub_2142810C0(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;

  v3 = *(_BYTE *)(a2 + 48);
  v4 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v10;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  v11 = *(unsigned __int8 *)(a1 + 48);
  *(_BYTE *)(a1 + 48) = v3;
  sub_214280EA8(v4, v6, v5, v7, v8, v9, v11, (void (*)(void))sub_21422F7F0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_214285A58, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_214285A58);
  return a1;
}

uint64_t sub_214281138(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x3F && *(_BYTE *)(a1 + 49))
    return (*(_DWORD *)a1 + 63);
  v3 = ((*(unsigned __int8 *)(a1 + 48) >> 1) & 0x3E | (*(unsigned __int8 *)(a1 + 48) >> 7)) ^ 0x3F;
  if (v3 >= 0x3E)
    v3 = -1;
  return v3 + 1;
}

uint64_t sub_21428118C(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x3E)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 48) = 0;
    *(_QWORD *)result = a2 - 63;
    if (a3 >= 0x3F)
      *(_BYTE *)(result + 49) = 1;
  }
  else
  {
    if (a3 >= 0x3F)
      *(_BYTE *)(result + 49) = 0;
    if (a2)
    {
      *(_OWORD *)(result + 16) = 0u;
      *(_OWORD *)(result + 32) = 0u;
      *(_OWORD *)result = 0u;
      *(_BYTE *)(result + 48) = 4 * (((-a2 >> 1) & 0x1F) - 32 * a2);
    }
  }
  return result;
}

uint64_t sub_2142811F8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 48) >> 7;
}

uint64_t sub_214281204(uint64_t result)
{
  *(_BYTE *)(result + 48) &= ~0x80u;
  return result;
}

uint64_t sub_214281214(uint64_t result, char a2)
{
  *(_BYTE *)(result + 48) = *(_BYTE *)(result + 48) & 3 | (a2 << 7);
  return result;
}

uint64_t sub_214281228()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t *sub_2142812AC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  char v11;
  uint64_t v12;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  if (*(_QWORD *)(v4 + 64) <= 0x10uLL)
    v5 = 16;
  else
    v5 = *(_QWORD *)(v4 + 64);
  v6 = *(_DWORD *)(v4 + 80);
  if ((v6 & 0x1000F8) != 0 || (unint64_t)(v5 + 1) > 0x18)
  {
    v8 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v8 + ((unsigned __int16)((v6 & 0xF8) + 23) & (unsigned __int16)~(v6 & 0xF8) & 0x1F8));
  }
  else
  {
    v9 = *((unsigned __int8 *)a2 + v5);
    if (v9 >= 3)
    {
      if (v5 <= 3)
        v10 = v5;
      else
        v10 = 4;
      __asm { BR              X13 }
    }
    if (v9 == 2)
    {
      v12 = a2[1];
      *v3 = *a2;
      v3[1] = v12;
      v11 = 2;
    }
    else
    {
      if (v9 != 1)
      {
        (*(void (**)(uint64_t *))(v4 + 16))(a1);
        *((_BYTE *)v3 + v5) = 0;
        return v3;
      }
      *a1 = *a2;
      v11 = 1;
    }
    *((_BYTE *)v3 + v5) = v11;
  }
  swift_retain();
  return v3;
}

uint64_t sub_2142813D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unsigned int v4;
  uint64_t v5;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) - 8);
  v3 = *(_QWORD *)(v2 + 64);
  if (v3 <= 0x10)
    v3 = 16;
  v4 = *(unsigned __int8 *)(a1 + v3);
  if (v4 < 3)
  {
    if (v4 == 2 || v4 == 1)
      return swift_release();
    else
      return (*(uint64_t (**)(void))(v2 + 8))();
  }
  else
  {
    if (v3 <= 3)
      v5 = v3;
    else
      v5 = 4;
    return ((uint64_t (*)(void))((char *)&loc_214281420 + 4 * byte_2144297BD[v5]))();
  }
}

_QWORD *sub_214281488(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  uint64_t v9;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  if (*(_QWORD *)(v4 + 64) <= 0x10uLL)
    v5 = 16;
  else
    v5 = *(_QWORD *)(v4 + 64);
  v6 = *((unsigned __int8 *)a2 + v5);
  if (v6 >= 3)
  {
    if (v5 <= 3)
      v7 = v5;
    else
      v7 = 4;
    __asm { BR              X13 }
  }
  if (v6 == 2)
  {
    v9 = a2[1];
    *a1 = *a2;
    a1[1] = v9;
    v8 = 2;
  }
  else
  {
    if (v6 != 1)
    {
      (*(void (**)(_QWORD *))(v4 + 16))(a1);
      *((_BYTE *)a1 + v5) = 0;
      return a1;
    }
    *a1 = *a2;
    v8 = 1;
  }
  *((_BYTE *)a1 + v5) = v8;
  swift_retain();
  return a1;
}

_QWORD *sub_214281578(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  char v12;
  uint64_t v13;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 24);
    v6 = *(_QWORD *)(v5 - 8);
    if (*(_QWORD *)(v6 + 64) <= 0x10uLL)
      v7 = 16;
    else
      v7 = *(_QWORD *)(v6 + 64);
    v8 = *((unsigned __int8 *)a1 + v7);
    if (v8 >= 3)
    {
      if (v7 <= 3)
        v9 = v7;
      else
        v9 = 4;
      __asm { BR              X12 }
    }
    if (v8 == 2 || v8 == 1)
      swift_release();
    else
      (*(void (**)(_QWORD *, _QWORD))(v6 + 8))(a1, *(_QWORD *)(a3 + 24));
    v10 = *((unsigned __int8 *)a2 + v7);
    if (v10 >= 3)
    {
      if (v7 <= 3)
        v11 = v7;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    if (v10 == 2)
    {
      v13 = a2[1];
      *a1 = *a2;
      a1[1] = v13;
      v12 = 2;
    }
    else
    {
      if (v10 != 1)
      {
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v6 + 16))(a1, a2, v5);
        *((_BYTE *)a1 + v7) = 0;
        return a1;
      }
      *a1 = *a2;
      v12 = 1;
    }
    *((_BYTE *)a1 + v7) = v12;
    swift_retain();
  }
  return a1;
}

_OWORD *sub_214281730(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  if (*(_QWORD *)(v4 + 64) <= 0x10uLL)
    v5 = 16;
  else
    v5 = *(_QWORD *)(v4 + 64);
  v6 = *((unsigned __int8 *)a2 + v5);
  if (v6 >= 3)
  {
    if (v5 <= 3)
      v7 = v5;
    else
      v7 = 4;
    __asm { BR              X13 }
  }
  if (v6 == 2)
  {
    *a1 = *a2;
    v8 = 2;
  }
  else if (v6 == 1)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v8 = 1;
  }
  else
  {
    (*(void (**)(_OWORD *))(v4 + 32))(a1);
    v8 = 0;
  }
  *((_BYTE *)a1 + v5) = v8;
  return a1;
}

_OWORD *sub_21428181C(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  char v12;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 24);
    v6 = *(_QWORD *)(v5 - 8);
    if (*(_QWORD *)(v6 + 64) <= 0x10uLL)
      v7 = 16;
    else
      v7 = *(_QWORD *)(v6 + 64);
    v8 = *((unsigned __int8 *)a1 + v7);
    if (v8 >= 3)
    {
      if (v7 <= 3)
        v9 = v7;
      else
        v9 = 4;
      __asm { BR              X12 }
    }
    if (v8 == 2 || v8 == 1)
      swift_release();
    else
      (*(void (**)(_OWORD *, _QWORD))(v6 + 8))(a1, *(_QWORD *)(a3 + 24));
    v10 = *((unsigned __int8 *)a2 + v7);
    if (v10 >= 3)
    {
      if (v7 <= 3)
        v11 = v7;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    if (v10 == 2)
    {
      *a1 = *a2;
      v12 = 2;
    }
    else if (v10 == 1)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v12 = 1;
    }
    else
    {
      (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v6 + 32))(a1, a2, v5);
      v12 = 0;
    }
    *((_BYTE *)a1 + v7) = v12;
  }
  return a1;
}

uint64_t sub_2142819D0(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  int v6;
  unsigned int v8;
  int v9;
  unsigned int v10;

  v3 = 16;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 64) > 0x10uLL)
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 64);
  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_21;
  v4 = v3 + 1;
  v5 = 8 * (v3 + 1);
  if ((v3 + 1) <= 3)
  {
    v8 = ((a2 + ~(-1 << v5) - 253) >> v5) + 1;
    if (HIWORD(v8))
    {
      v6 = *(_DWORD *)(a1 + v4);
      if (!v6)
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v8 > 0xFF)
    {
      v6 = *(unsigned __int16 *)(a1 + v4);
      if (!*(_WORD *)(a1 + v4))
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v8 < 2)
    {
LABEL_21:
      v10 = *(unsigned __int8 *)(a1 + v3);
      if (v10 >= 3)
        return (v10 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v6 = *(unsigned __int8 *)(a1 + v4);
  if (!*(_BYTE *)(a1 + v4))
    goto LABEL_21;
LABEL_14:
  v9 = (v6 - 1) << v5;
  if (v4 > 3)
    v9 = 0;
  if (!(_DWORD)v4)
    return (v9 + 254);
  if (v4 > 3)
    LODWORD(v4) = 4;
  return ((uint64_t (*)(void))((char *)&loc_214281A94 + 4 * byte_2144297E0[(v4 - 1)]))();
}

void sub_214281AE0(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5;
  size_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 24) - 8) + 64);
  if (v5 <= 0x10)
    v5 = 16;
  v6 = v5 + 1;
  if (a3 < 0xFE)
  {
    v7 = 0;
  }
  else if (v6 <= 3)
  {
    v9 = ((a3 + ~(-1 << (8 * v6)) - 253) >> (8 * v6)) + 1;
    if (HIWORD(v9))
    {
      v7 = 4u;
    }
    else if (v9 >= 0x100)
    {
      v7 = 2;
    }
    else
    {
      v7 = v9 > 1;
    }
  }
  else
  {
    v7 = 1u;
  }
  if (a2 <= 0xFD)
    __asm { BR              X11 }
  v8 = a2 - 254;
  if (v6 < 4)
  {
    if ((_DWORD)v5 != -1)
    {
      v10 = v8 & ~(-1 << (8 * v6));
      bzero(a1, v6);
      if ((_DWORD)v6 == 3)
      {
        *a1 = v10;
        *((_BYTE *)a1 + 2) = BYTE2(v10);
      }
      else if ((_DWORD)v6 == 2)
      {
        *a1 = v10;
      }
      else
      {
        *(_BYTE *)a1 = v10;
      }
    }
  }
  else
  {
    bzero(a1, v5 + 1);
    *(_DWORD *)a1 = v8;
  }
  __asm { BR              X10 }
}

uint64_t sub_214281C88(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = 16;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 64) > 0x10uLL)
    v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 64);
  if (*(unsigned __int8 *)(a1 + v2) < 3u)
    return *(unsigned __int8 *)(a1 + v2);
  if (v2 <= 3)
    v3 = v2;
  else
    v3 = 4;
  return ((uint64_t (*)(void))((char *)&loc_214281CD0 + 4 * byte_2144297EE[v3]))();
}

void sub_214281D18(_BYTE *a1, unsigned int a2, uint64_t a3)
{
  size_t v4;
  unsigned int v5;
  unsigned int v6;
  int v7;

  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 64) <= 0x10uLL)
    v4 = 16;
  else
    v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 64);
  if (a2 > 2)
  {
    v5 = a2 - 3;
    if (v4 < 4)
    {
      v6 = v5 >> (8 * v4);
      v7 = v5 & ~(-1 << (8 * v4));
      a1[v4] = v6 + 3;
      bzero(a1, v4);
      if ((_DWORD)v4 == 3)
      {
        *(_WORD *)a1 = v7;
        a1[2] = BYTE2(v7);
      }
      else if ((_DWORD)v4 == 2)
      {
        *(_WORD *)a1 = v7;
      }
      else
      {
        *a1 = v7;
      }
    }
    else
    {
      a1[v4] = 3;
      bzero(a1, v4);
      *(_DWORD *)a1 = v5;
    }
  }
  else
  {
    a1[v4] = a2;
  }
}

uint64_t sub_214281DE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v5;

  result = type metadata accessor for VisualMapper.Mapping(319, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_OWORD *sub_214281E58(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  _OWORD *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  __int128 v16;
  _QWORD *v17;
  _QWORD *v18;
  unsigned int v19;
  uint64_t v20;
  char v21;
  uint64_t v22;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = v6 & 0xF8 | 7;
  v8 = ~v7;
  if (*(_QWORD *)(v5 + 64) <= 0x10uLL)
    v9 = 16;
  else
    v9 = *(_QWORD *)(v5 + 64);
  if ((v6 & 0x1000F8) != 0 || v9 + (((v6 & 0xF8) + 39) & (unint64_t)~v7) + 1 > 0x18)
  {
    v11 = *(_QWORD *)a2;
    *(_QWORD *)v4 = *(_QWORD *)a2;
    v4 = (_OWORD *)(v11 + ((v7 + 16) & v8));
  }
  else
  {
    v12 = *(_QWORD *)(a2 + 24);
    if (v12 < 0xFFFFFFFF)
    {
      v16 = *(_OWORD *)(a2 + 16);
      *a1 = *(_OWORD *)a2;
      a1[1] = v16;
    }
    else
    {
      v13 = *(_QWORD *)a2;
      v14 = *(_QWORD *)(a2 + 8);
      v15 = *(_BYTE *)(a2 + 16);
      sub_2141DD130(*(_QWORD *)a2, v14, v15);
      *(_QWORD *)v4 = v13;
      *((_QWORD *)v4 + 1) = v14;
      *((_BYTE *)v4 + 16) = v15;
      *((_QWORD *)v4 + 3) = v12;
      swift_bridgeObjectRetain();
    }
    v17 = (_QWORD *)(((unint64_t)v4 + 39) & v8);
    v18 = (_QWORD *)((a2 + 39) & v8);
    v19 = *((unsigned __int8 *)v18 + v9);
    if (v19 >= 3)
    {
      if (v9 <= 3)
        v20 = v9;
      else
        v20 = 4;
      __asm { BR              X12 }
    }
    if (v19 == 2)
    {
      v22 = *(_QWORD *)(((a2 + 39) & v8) + 8);
      *v17 = *v18;
      *(_QWORD *)((((unint64_t)v4 + 39) & v8) + 8) = v22;
      v21 = 2;
    }
    else
    {
      if (v19 != 1)
      {
        (*(void (**)(unint64_t))(v5 + 16))(((unint64_t)v4 + 39) & v8);
        *((_BYTE *)v17 + v9) = 0;
        return v4;
      }
      *v17 = *v18;
      v21 = 1;
    }
    *((_BYTE *)v17 + v9) = v21;
  }
  swift_retain();
  return v4;
}

uint64_t sub_214282014(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int v8;
  uint64_t v9;

  if (*(_QWORD *)(a1 + 24) >= 0xFFFFFFFFuLL)
  {
    sub_2141ED0BC(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
    swift_bridgeObjectRelease();
  }
  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 24) - 8);
  v5 = *(_DWORD *)(v4 + 80) & 0xF8 | 7;
  v6 = (a1 + v5 + 32) & ~v5;
  v7 = *(_QWORD *)(v4 + 64);
  if (v7 <= 0x10)
    v7 = 16;
  v8 = *(unsigned __int8 *)(v6 + v7);
  if (v8 >= 3)
  {
    if (v7 <= 3)
      v9 = v7;
    else
      v9 = 4;
    __asm { BR              X14 }
  }
  if (v8 == 2 || v8 == 1)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_214282130(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  char v21;
  uint64_t v22;

  v6 = a2[3];
  if (v6 < 0xFFFFFFFF)
  {
    v10 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v10;
  }
  else
  {
    v7 = *a2;
    v8 = a2[1];
    v9 = *((_BYTE *)a2 + 16);
    sub_2141DD130(*a2, v8, v9);
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v8;
    *(_BYTE *)(a1 + 16) = v9;
    *(_QWORD *)(a1 + 24) = v6;
    swift_bridgeObjectRetain();
  }
  v11 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v12 = *(_DWORD *)(v11 + 80) & 0xF8;
  v13 = v12 + 39;
  v14 = v12 + 39 + a1;
  v15 = ~v12 & 0xFFFFFFFFFFFFFFF8;
  v16 = (_QWORD *)(v14 & v15);
  v17 = (_QWORD *)(((unint64_t)a2 + v13) & v15);
  if (*(_QWORD *)(v11 + 64) <= 0x10uLL)
    v18 = 16;
  else
    v18 = *(_QWORD *)(v11 + 64);
  v19 = *((unsigned __int8 *)v17 + v18);
  if (v19 >= 3)
  {
    if (v18 <= 3)
      v20 = v18;
    else
      v20 = 4;
    __asm { BR              X13 }
  }
  if (v19 == 2)
  {
    v22 = v17[1];
    *v16 = *v17;
    *(_QWORD *)((v14 & v15) + 8) = v22;
    v21 = 2;
  }
  else
  {
    if (v19 != 1)
    {
      (*(void (**)(_QWORD *))(v11 + 16))(v16);
      *((_BYTE *)v16 + v18) = 0;
      return a1;
    }
    *v16 = *v17;
    v21 = 1;
  }
  *((_BYTE *)v16 + v18) = v21;
  swift_retain();
  return a1;
}

uint64_t sub_2142822AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  char v31;
  uint64_t v32;

  v6 = *(_QWORD *)(a2 + 24);
  if (*(_QWORD *)(a1 + 24) < 0xFFFFFFFFuLL)
  {
    if (v6 >= 0xFFFFFFFF)
    {
      v13 = *(_QWORD *)a2;
      v14 = *(_QWORD *)(a2 + 8);
      v15 = *(_BYTE *)(a2 + 16);
      sub_2141DD130(*(_QWORD *)a2, v14, v15);
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v14;
      *(_BYTE *)(a1 + 16) = v15;
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      swift_bridgeObjectRetain();
      goto LABEL_8;
    }
  }
  else
  {
    if (v6 >= 0xFFFFFFFF)
    {
      v7 = *(_QWORD *)a2;
      v8 = *(_QWORD *)(a2 + 8);
      v9 = *(_BYTE *)(a2 + 16);
      sub_2141DD130(*(_QWORD *)a2, v8, v9);
      v10 = *(_QWORD *)a1;
      v11 = *(_QWORD *)(a1 + 8);
      v12 = *(_BYTE *)(a1 + 16);
      *(_QWORD *)a1 = v7;
      *(_QWORD *)(a1 + 8) = v8;
      *(_BYTE *)(a1 + 16) = v9;
      sub_2141ED0BC(v10, v11, v12);
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_8;
    }
    sub_2141ED0BC(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
    swift_bridgeObjectRelease();
  }
  v16 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v16;
LABEL_8:
  v17 = *(_QWORD *)(a3 + 24);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(_DWORD *)(v18 + 80) & 0xF8;
  v20 = v19 + 39;
  v21 = v19 + 39 + a1;
  v22 = ~v19 & 0xFFFFFFFFFFFFFFF8;
  v23 = (_QWORD *)(v21 & v22);
  v24 = v20 + a2;
  v25 = (_QWORD *)(v24 & v22);
  if ((v21 & v22) != (v24 & v22))
  {
    if (*(_QWORD *)(v18 + 64) <= 0x10uLL)
      v26 = 16;
    else
      v26 = *(_QWORD *)(v18 + 64);
    v27 = *((unsigned __int8 *)v23 + v26);
    if (v27 >= 3)
    {
      if (v26 <= 3)
        v28 = v26;
      else
        v28 = 4;
      __asm { BR              X12 }
    }
    if (v27 == 2 || v27 == 1)
      swift_release();
    else
      (*(void (**)(_QWORD *, uint64_t))(v18 + 8))(v23, v17);
    v29 = *((unsigned __int8 *)v25 + v26);
    if (v29 >= 3)
    {
      if (v26 <= 3)
        v30 = v26;
      else
        v30 = 4;
      __asm { BR              X12 }
    }
    if (v29 == 2)
    {
      v32 = v25[1];
      *v23 = *v25;
      v23[1] = v32;
      v31 = 2;
    }
    else
    {
      if (v29 != 1)
      {
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v18 + 16))(v23, v25, v17);
        *((_BYTE *)v23 + v26) = 0;
        return a1;
      }
      *v23 = *v25;
      v31 = 1;
    }
    *((_BYTE *)v23 + v26) = v31;
    swift_retain();
  }
  return a1;
}

_OWORD *sub_21428254C(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _OWORD *v10;
  _OWORD *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  char v15;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v6 = *(_DWORD *)(v5 + 80) & 0xF8;
  v7 = v6 + 39;
  v8 = (unint64_t)a1 + v6 + 39;
  v9 = ~v6 & 0xFFFFFFFFFFFFFFF8;
  v10 = (_OWORD *)(v8 & v9);
  v11 = (_OWORD *)(((unint64_t)a2 + v7) & v9);
  if (*(_QWORD *)(v5 + 64) <= 0x10uLL)
    v12 = 16;
  else
    v12 = *(_QWORD *)(v5 + 64);
  v13 = *((unsigned __int8 *)v11 + v12);
  if (v13 >= 3)
  {
    if (v12 <= 3)
      v14 = v12;
    else
      v14 = 4;
    __asm { BR              X13 }
  }
  if (v13 == 2)
  {
    *v10 = *v11;
    v15 = 2;
  }
  else if (v13 == 1)
  {
    *(_QWORD *)v10 = *(_QWORD *)v11;
    v15 = 1;
  }
  else
  {
    (*(void (**)(_OWORD *))(v5 + 32))(v10);
    v15 = 0;
  }
  *((_BYTE *)v10 + v12) = v15;
  return a1;
}

uint64_t sub_21428266C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _OWORD *v17;
  uint64_t v18;
  _OWORD *v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  char v25;

  if (*(_QWORD *)(a1 + 24) >= 0xFFFFFFFFuLL)
  {
    if (*(_QWORD *)(a2 + 24) >= 0xFFFFFFFFuLL)
    {
      v6 = *(_BYTE *)(a2 + 16);
      v7 = *(_QWORD *)a1;
      v8 = *(_QWORD *)(a1 + 8);
      v9 = *(_BYTE *)(a1 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_BYTE *)(a1 + 16) = v6;
      sub_2141ED0BC(v7, v8, v9);
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    sub_2141ED0BC(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
    swift_bridgeObjectRelease();
  }
  v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v10;
LABEL_6:
  v11 = *(_QWORD *)(a3 + 24);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_DWORD *)(v12 + 80) & 0xF8;
  v14 = v13 + 39;
  v15 = v13 + 39 + a1;
  v16 = ~v13 & 0xFFFFFFFFFFFFFFF8;
  v17 = (_OWORD *)(v15 & v16);
  v18 = v14 + a2;
  v19 = (_OWORD *)(v18 & v16);
  if ((v15 & v16) != (v18 & v16))
  {
    if (*(_QWORD *)(v12 + 64) <= 0x10uLL)
      v20 = 16;
    else
      v20 = *(_QWORD *)(v12 + 64);
    v21 = *((unsigned __int8 *)v17 + v20);
    if (v21 >= 3)
    {
      if (v20 <= 3)
        v22 = v20;
      else
        v22 = 4;
      __asm { BR              X12 }
    }
    if (v21 == 2 || v21 == 1)
      swift_release();
    else
      (*(void (**)(_OWORD *, uint64_t))(v12 + 8))(v17, v11);
    v23 = *((unsigned __int8 *)v19 + v20);
    if (v23 >= 3)
    {
      if (v20 <= 3)
        v24 = v20;
      else
        v24 = 4;
      __asm { BR              X12 }
    }
    if (v23 == 2)
    {
      *v17 = *v19;
      v25 = 2;
    }
    else if (v23 == 1)
    {
      *(_QWORD *)v17 = *(_QWORD *)v19;
      v25 = 1;
    }
    else
    {
      (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v12 + 32))(v17, v19, v11);
      v25 = 0;
    }
    *((_BYTE *)v17 + v20) = v25;
  }
  return a1;
}

uint64_t sub_2142828B4(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  char v6;
  int v7;
  unsigned int v9;
  int v10;
  unint64_t v11;

  v3 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v4 = *(_QWORD *)(v3 + 64);
  if (v4 <= 0x10)
    v4 = 16;
  if (!a2)
    return 0;
  if (a2 < 0x7FFFFFFF)
    goto LABEL_21;
  v5 = v4
     + ((unsigned __int16)((*(_WORD *)(v3 + 80) & 0xF8) + 39) & (unsigned __int16)~(*(_WORD *)(v3 + 80) & 0xF8) & 0x1F8)
     + 1;
  v6 = 8 * v5;
  if (v5 > 3)
    goto LABEL_6;
  v9 = (a2 - 2147483646 + ~(-1 << v6)) >> v6;
  if (v9 > 0xFFFE)
  {
    v7 = *(_DWORD *)(a1 + v5);
    if (v7)
      goto LABEL_14;
LABEL_21:
    v11 = *(_QWORD *)(a1 + 24);
    if (v11 >= 0xFFFFFFFF)
      LODWORD(v11) = -1;
    if ((v11 + 1) >= 2)
      return v11;
    else
      return 0;
  }
  if (v9 > 0xFE)
  {
    v7 = *(unsigned __int16 *)(a1 + v5);
    if (*(_WORD *)(a1 + v5))
      goto LABEL_14;
    goto LABEL_21;
  }
  if (!v9)
    goto LABEL_21;
LABEL_6:
  v7 = *(unsigned __int8 *)(a1 + v5);
  if (!*(_BYTE *)(a1 + v5))
    goto LABEL_21;
LABEL_14:
  v10 = (v7 - 1) << v6;
  if (v5 > 3)
    v10 = 0;
  if (!(_DWORD)v5)
    return (v10 + 0x7FFFFFFF);
  if (v5 > 3)
    LODWORD(v5) = 4;
  return ((uint64_t (*)(void))((char *)&loc_214282998 + 4 * byte_21442981B[(v5 - 1)]))();
}

void sub_2142829F4(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unint64_t v6;
  size_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  if (v6 <= 0x10)
    v6 = 16;
  v7 = v6
     + ((unsigned __int16)((*(_WORD *)(v5 + 80) & 0xF8) + 39) & (unsigned __int16)~(*(_WORD *)(v5 + 80) & 0xF8) & 0x1F8)
     + 1;
  if (a3 < 0x7FFFFFFF)
  {
    v8 = 0;
  }
  else if (v7 <= 3)
  {
    v10 = (a3 - 2147483646 + ~(-1 << (8 * v7))) >> (8 * v7);
    if (v10 > 0xFFFE)
    {
      v8 = 4u;
    }
    else if (v10 >= 0xFF)
    {
      v8 = 2;
    }
    else
    {
      v8 = v10 != 0;
    }
  }
  else
  {
    v8 = 1u;
  }
  if (a2 <= 0x7FFFFFFE)
    __asm { BR              X10 }
  v9 = a2 - 0x7FFFFFFF;
  if (v7 < 4)
  {
    if ((_DWORD)v7)
    {
      v11 = v9 & ~(-1 << (8 * v7));
      bzero(a1, v7);
      if ((_DWORD)v7 == 3)
      {
        *a1 = v11;
        *((_BYTE *)a1 + 2) = BYTE2(v11);
      }
      else if ((_DWORD)v7 == 2)
      {
        *a1 = v11;
      }
      else
      {
        *(_BYTE *)a1 = v11;
      }
    }
  }
  else
  {
    bzero(a1, v7);
    *(_DWORD *)a1 = v9;
  }
  __asm { BR              X10 }
}

uint64_t sub_214282BC8()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_214282BD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t result;

  if (a6 == 2 || a6 == 1)
    return swift_retain();
  if (!a6)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t sub_214282BFC(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9, char a10)
{
  if (a10 == 2 || a10 == 1)
    return swift_retain();
  if (!a10)
  {
    sub_2141DD130(result, a2, a3 & 1);
    swift_bridgeObjectRetain();
    return sub_2141DD140(a5, a6, a7);
  }
  return result;
}

uint64_t sub_214282C84(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if (a3 == 2 || a3 == 1)
    return swift_retain();
  if (!a3)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t sub_214282CB0(uint64_t result, uint64_t a2, char a3, uint64_t a4, char a5)
{
  if (a5 == 2 || a5 == 1)
    return swift_retain();
  if (!a5)
  {
    sub_2141DD130(result, a2, a3 & 1);
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_214282CFC(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = result;
  v2 = *(_QWORD *)(result + 24);
  if (v2)
  {
    if (v2 == 1)
      goto LABEL_5;
    sub_2141ED0BC(*(_QWORD *)result, *(_QWORD *)(result + 8), *(_BYTE *)(result + 16));
    swift_bridgeObjectRelease();
  }
  result = sub_214274588(*(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_BYTE *)(v1 + 48));
LABEL_5:
  v3 = *(_QWORD *)(v1 + 80);
  if (v3)
  {
    if (v3 == 1)
      goto LABEL_9;
    sub_2141ED0BC(*(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64), *(_BYTE *)(v1 + 72));
    swift_bridgeObjectRelease();
  }
  result = sub_2142745F0(*(_QWORD *)(v1 + 88), *(_QWORD *)(v1 + 96), *(_BYTE *)(v1 + 104));
LABEL_9:
  v4 = *(_QWORD *)(v1 + 136);
  if (v4)
  {
    if (v4 == 1)
      goto LABEL_13;
    sub_2141ED0BC(*(_QWORD *)(v1 + 112), *(_QWORD *)(v1 + 120), *(_BYTE *)(v1 + 128));
    swift_bridgeObjectRelease();
  }
  result = sub_214273B58(*(_QWORD *)(v1 + 144), *(_QWORD *)(v1 + 152), *(_QWORD *)(v1 + 160), *(_QWORD *)(v1 + 168), *(_QWORD *)(v1 + 176), *(_BYTE *)(v1 + 184));
LABEL_13:
  v5 = *(_QWORD *)(v1 + 216);
  if (v5)
  {
    if (v5 == 1)
      goto LABEL_21;
    sub_2141ED0BC(*(_QWORD *)(v1 + 192), *(_QWORD *)(v1 + 200), *(_BYTE *)(v1 + 208));
    swift_bridgeObjectRelease();
  }
  v6 = *(unsigned __int8 *)(v1 + 264);
  if (v6 == 2 || (result = v1 + 224, v6 == 1))
  {
    result = swift_release();
  }
  else if (!*(_BYTE *)(v1 + 264))
  {
    result = _s6Charts15AnyChartContentVwxx_0(result);
  }
LABEL_21:
  v7 = *(unsigned __int8 *)(v1 + 320);
  if (v7 <= 0xFB)
    result = sub_214280EA8(*(_QWORD *)(v1 + 272), *(_QWORD *)(v1 + 280), *(_QWORD *)(v1 + 288), *(_QWORD *)(v1 + 296), *(_QWORD *)(v1 + 304), *(_QWORD *)(v1 + 312), v7, (void (*)(void))sub_21422F7F0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_214285A58, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_214285A58);
  v8 = *(_QWORD *)(v1 + 376);
  if (v8)
  {
    if (v8 == 1)
      goto LABEL_27;
    sub_2141ED0BC(*(_QWORD *)(v1 + 352), *(_QWORD *)(v1 + 360), *(_BYTE *)(v1 + 368));
    swift_bridgeObjectRelease();
  }
  result = sub_214273B84(*(_QWORD *)(v1 + 384), *(_QWORD *)(v1 + 392), *(_QWORD *)(v1 + 400), *(_QWORD *)(v1 + 408), *(_QWORD *)(v1 + 416), *(_QWORD *)(v1 + 424), *(_QWORD *)(v1 + 432), *(_QWORD *)(v1 + 440), *(_QWORD *)(v1 + 448), *(_BYTE *)(v1 + 456));
LABEL_27:
  v9 = *(_QWORD *)(v1 + 488);
  if (v9)
  {
    if (v9 == 1)
      goto LABEL_31;
    sub_2141ED0BC(*(_QWORD *)(v1 + 464), *(_QWORD *)(v1 + 472), *(_BYTE *)(v1 + 480));
    swift_bridgeObjectRelease();
  }
  result = sub_21427429C(*(_QWORD *)(v1 + 496), *(_QWORD *)(v1 + 504), *(_BYTE *)(v1 + 512));
LABEL_31:
  v10 = *(_QWORD *)(v1 + 544);
  if (v10)
  {
    if (v10 == 1)
      goto LABEL_35;
    sub_2141ED0BC(*(_QWORD *)(v1 + 520), *(_QWORD *)(v1 + 528), *(_BYTE *)(v1 + 536));
    swift_bridgeObjectRelease();
  }
  result = sub_214274588(*(_QWORD *)(v1 + 552), *(_QWORD *)(v1 + 560), *(_BYTE *)(v1 + 568));
LABEL_35:
  v11 = *(_QWORD *)(v1 + 600);
  if (v11)
  {
    if (v11 == 1)
      goto LABEL_39;
    sub_2141ED0BC(*(_QWORD *)(v1 + 576), *(_QWORD *)(v1 + 584), *(_BYTE *)(v1 + 592));
    swift_bridgeObjectRelease();
  }
  result = sub_214274208(*(_QWORD *)(v1 + 608), *(_QWORD *)(v1 + 616), *(_QWORD *)(v1 + 624), *(_QWORD *)(v1 + 632), *(_BYTE *)(v1 + 640));
LABEL_39:
  v12 = *(_QWORD *)(v1 + 672);
  if (v12)
  {
    if (v12 == 1)
      return result;
    sub_2141ED0BC(*(_QWORD *)(v1 + 648), *(_QWORD *)(v1 + 656), *(_BYTE *)(v1 + 664));
    swift_bridgeObjectRelease();
  }
  return sub_214274208(*(_QWORD *)(v1 + 680), *(_QWORD *)(v1 + 688), *(_QWORD *)(v1 + 696), *(_QWORD *)(v1 + 704), *(_BYTE *)(v1 + 712));
}

uint64_t sub_214282F7C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 v23;
  _OWORD *v24;
  _OWORD *v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  _OWORD *v39;
  _OWORD *v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  int v48;
  _QWORD *v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _OWORD *v79;
  _OWORD *v80;
  uint64_t v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  _OWORD *v90;
  _OWORD *v91;
  uint64_t v92;
  __int128 v93;
  __int128 v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  uint64_t v98;
  uint64_t v99;
  char v100;
  _OWORD *v101;
  _OWORD *v102;
  uint64_t v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  uint64_t v107;
  uint64_t v108;
  char v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char v114;
  _OWORD *v115;
  _OWORD *v116;
  uint64_t v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  uint64_t v121;
  uint64_t v122;
  char v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char v128;
  uint64_t v130;
  char v131;

  v4 = a2[3];
  if (v4)
  {
    if (v4 == 1)
    {
      v5 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v5;
      *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
      *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
      goto LABEL_7;
    }
    v7 = *a2;
    v8 = a2[1];
    v9 = *((_BYTE *)a2 + 16);
    sub_2141DD130(*a2, v8, v9);
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v8;
    *(_BYTE *)(a1 + 16) = v9;
    *(_QWORD *)(a1 + 24) = a2[3];
    swift_bridgeObjectRetain();
  }
  else
  {
    v6 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
  }
  v10 = a2[4];
  v11 = a2[5];
  v12 = *((_BYTE *)a2 + 48);
  sub_214274628(v10, v11, v12);
  *(_QWORD *)(a1 + 32) = v10;
  *(_QWORD *)(a1 + 40) = v11;
  *(_BYTE *)(a1 + 48) = v12;
LABEL_7:
  v13 = (_OWORD *)(a1 + 56);
  v14 = a2 + 7;
  v15 = a2[10];
  if (v15)
  {
    if (v15 == 1)
    {
      v16 = *(_OWORD *)(a2 + 9);
      *v13 = *v14;
      *(_OWORD *)(a1 + 72) = v16;
      *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 11);
      *(_BYTE *)(a1 + 104) = *((_BYTE *)a2 + 104);
      goto LABEL_13;
    }
    v18 = a2[7];
    v19 = a2[8];
    v20 = *((_BYTE *)a2 + 72);
    sub_2141DD130(v18, v19, v20);
    *(_QWORD *)(a1 + 56) = v18;
    *(_QWORD *)(a1 + 64) = v19;
    *(_BYTE *)(a1 + 72) = v20;
    *(_QWORD *)(a1 + 80) = a2[10];
    swift_bridgeObjectRetain();
  }
  else
  {
    v17 = *(_OWORD *)(a2 + 9);
    *v13 = *v14;
    *(_OWORD *)(a1 + 72) = v17;
  }
  v21 = a2[11];
  v22 = a2[12];
  v23 = *((_BYTE *)a2 + 104);
  sub_21427460C(v21, v22, v23);
  *(_QWORD *)(a1 + 88) = v21;
  *(_QWORD *)(a1 + 96) = v22;
  *(_BYTE *)(a1 + 104) = v23;
LABEL_13:
  v24 = (_OWORD *)(a1 + 112);
  v25 = a2 + 14;
  v26 = a2[17];
  if (v26)
  {
    if (v26 == 1)
    {
      v27 = *((_OWORD *)a2 + 10);
      *(_OWORD *)(a1 + 144) = *((_OWORD *)a2 + 9);
      *(_OWORD *)(a1 + 160) = v27;
      *(_OWORD *)(a1 + 169) = *(_OWORD *)((char *)a2 + 169);
      v28 = *((_OWORD *)a2 + 8);
      *v24 = *v25;
      *(_OWORD *)(a1 + 128) = v28;
      goto LABEL_19;
    }
    v30 = a2[14];
    v31 = a2[15];
    v32 = *((_BYTE *)a2 + 128);
    sub_2141DD130(v30, v31, v32);
    *(_QWORD *)(a1 + 112) = v30;
    *(_QWORD *)(a1 + 120) = v31;
    *(_BYTE *)(a1 + 128) = v32;
    *(_QWORD *)(a1 + 136) = a2[17];
    swift_bridgeObjectRetain();
  }
  else
  {
    v29 = *((_OWORD *)a2 + 8);
    *v24 = *v25;
    *(_OWORD *)(a1 + 128) = v29;
  }
  v33 = a2[18];
  v34 = a2[19];
  v35 = a2[20];
  v36 = a2[21];
  v37 = a2[22];
  v38 = *((_BYTE *)a2 + 184);
  sub_214282BD0(v33, v34, v35, v36, v37, v38);
  *(_QWORD *)(a1 + 144) = v33;
  *(_QWORD *)(a1 + 152) = v34;
  *(_QWORD *)(a1 + 160) = v35;
  *(_QWORD *)(a1 + 168) = v36;
  *(_QWORD *)(a1 + 176) = v37;
  *(_BYTE *)(a1 + 184) = v38;
LABEL_19:
  v39 = (_OWORD *)(a1 + 192);
  v40 = a2 + 24;
  v41 = a2[27];
  if (v41)
  {
    if (v41 == 1)
    {
      v42 = *((_OWORD *)a2 + 15);
      *(_OWORD *)(a1 + 224) = *((_OWORD *)a2 + 14);
      *(_OWORD *)(a1 + 240) = v42;
      *(_OWORD *)(a1 + 249) = *(_OWORD *)((char *)a2 + 249);
      v43 = *((_OWORD *)a2 + 13);
      *v39 = *v40;
      *(_OWORD *)(a1 + 208) = v43;
      goto LABEL_30;
    }
    v45 = a2[24];
    v46 = a2[25];
    v47 = *((_BYTE *)a2 + 208);
    sub_2141DD130(v45, v46, v47);
    *(_QWORD *)(a1 + 192) = v45;
    *(_QWORD *)(a1 + 200) = v46;
    *(_BYTE *)(a1 + 208) = v47;
    *(_QWORD *)(a1 + 216) = a2[27];
    swift_bridgeObjectRetain();
  }
  else
  {
    v44 = *((_OWORD *)a2 + 13);
    *v39 = *v40;
    *(_OWORD *)(a1 + 208) = v44;
  }
  v48 = *((unsigned __int8 *)a2 + 264);
  if (v48 == 2)
  {
    v50 = a2[29];
    *(_QWORD *)(a1 + 224) = a2[28];
    *(_QWORD *)(a1 + 232) = v50;
    LOBYTE(v48) = 2;
    goto LABEL_28;
  }
  v49 = a2 + 28;
  if (v48 == 1)
  {
    *(_QWORD *)(a1 + 224) = *v49;
LABEL_28:
    *(_BYTE *)(a1 + 264) = v48;
    swift_retain();
    goto LABEL_30;
  }
  v51 = *(_OWORD *)(a2 + 31);
  *(_OWORD *)(a1 + 248) = v51;
  (**(void (***)(uint64_t, _QWORD *))(v51 - 8))(a1 + 224, v49);
  *(_BYTE *)(a1 + 264) = 0;
LABEL_30:
  v52 = *((unsigned __int8 *)a2 + 320);
  if (v52 <= 0xFB)
  {
    v54 = a2[34];
    v55 = a2[35];
    v56 = a2[36];
    v57 = a2[37];
    v58 = a2[38];
    v59 = a2[39];
    sub_214280EA8(v54, v55, v56, v57, v58, v59, v52, (void (*)(void))sub_2141EF2B4, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_214285A5C, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_214285A5C);
    *(_QWORD *)(a1 + 272) = v54;
    *(_QWORD *)(a1 + 280) = v55;
    *(_QWORD *)(a1 + 288) = v56;
    *(_QWORD *)(a1 + 296) = v57;
    *(_QWORD *)(a1 + 304) = v58;
    *(_QWORD *)(a1 + 312) = v59;
    *(_BYTE *)(a1 + 320) = v52;
  }
  else
  {
    v53 = *((_OWORD *)a2 + 18);
    *(_OWORD *)(a1 + 272) = *((_OWORD *)a2 + 17);
    *(_OWORD *)(a1 + 288) = v53;
    *(_OWORD *)(a1 + 304) = *((_OWORD *)a2 + 19);
    *(_BYTE *)(a1 + 320) = *((_BYTE *)a2 + 320);
  }
  v60 = (char *)(a1 + 368);
  v61 = (char *)(a2 + 46);
  v62 = a2[47];
  if (v62 == 1)
  {
    v63 = *(_OWORD *)(a2 + 55);
    *(_OWORD *)(a1 + 424) = *(_OWORD *)(a2 + 53);
    *(_OWORD *)(a1 + 440) = v63;
    *(_BYTE *)(a1 + 456) = *((_BYTE *)a2 + 456);
    v64 = *(_OWORD *)(a2 + 47);
    *(_OWORD *)(a1 + 360) = *(_OWORD *)(a2 + 45);
    *(_OWORD *)(a1 + 376) = v64;
    v65 = *(_OWORD *)(a2 + 51);
    *(_OWORD *)(a1 + 392) = *(_OWORD *)(a2 + 49);
    *(_OWORD *)(a1 + 408) = v65;
    v66 = *(_OWORD *)(a2 + 43);
    *(_OWORD *)(a1 + 328) = *(_OWORD *)(a2 + 41);
    *(_OWORD *)(a1 + 344) = v66;
  }
  else
  {
    *(_BYTE *)(a1 + 328) = *((_BYTE *)a2 + 328);
    *(_QWORD *)(a1 + 336) = a2[42];
    *(_BYTE *)(a1 + 344) = *((_BYTE *)a2 + 344);
    if (v62)
    {
      v67 = a2[44];
      v68 = a2[45];
      v69 = *v61;
      sub_2141DD130(v67, v68, *v61);
      *(_QWORD *)(a1 + 352) = v67;
      *(_QWORD *)(a1 + 360) = v68;
      *v60 = v69;
      *(_QWORD *)(a1 + 376) = a2[47];
      swift_bridgeObjectRetain();
    }
    else
    {
      v70 = *((_OWORD *)a2 + 23);
      *(_OWORD *)(a1 + 352) = *((_OWORD *)a2 + 22);
      *(_OWORD *)(a1 + 368) = v70;
    }
    v71 = a2[48];
    v72 = a2[49];
    v73 = a2[50];
    v74 = a2[51];
    v75 = a2[52];
    v76 = a2[53];
    v77 = a2[54];
    v78 = a2[55];
    v130 = a2[56];
    v131 = *((_BYTE *)a2 + 456);
    sub_214282BFC(v71, v72, v73, v74, v75, v76, v77, v78, v130, v131);
    *(_QWORD *)(a1 + 384) = v71;
    *(_QWORD *)(a1 + 392) = v72;
    *(_QWORD *)(a1 + 400) = v73;
    *(_QWORD *)(a1 + 408) = v74;
    *(_QWORD *)(a1 + 416) = v75;
    *(_QWORD *)(a1 + 424) = v76;
    *(_QWORD *)(a1 + 432) = v77;
    *(_QWORD *)(a1 + 440) = v78;
    *(_QWORD *)(a1 + 448) = v130;
    *(_BYTE *)(a1 + 456) = v131;
    v61 = (char *)(a2 + 46);
    v60 = (char *)(a1 + 368);
  }
  v79 = (_OWORD *)(a1 + 464);
  v80 = a2 + 58;
  v81 = a2[61];
  if (v81)
  {
    if (v81 == 1)
    {
      v82 = *((_OWORD *)a2 + 30);
      *v79 = *v80;
      *(_OWORD *)(a1 + 480) = v82;
      *(_OWORD *)(a1 + 496) = *((_OWORD *)a2 + 31);
      *(_BYTE *)(a1 + 512) = *((_BYTE *)a2 + 512);
      goto LABEL_45;
    }
    v84 = a2[58];
    v85 = a2[59];
    v86 = v61[112];
    sub_2141DD130(v84, v85, v86);
    *(_QWORD *)(a1 + 464) = v84;
    *(_QWORD *)(a1 + 472) = v85;
    v60[112] = v86;
    *(_QWORD *)(a1 + 488) = a2[61];
    swift_bridgeObjectRetain();
  }
  else
  {
    v83 = *((_OWORD *)a2 + 30);
    *v79 = *v80;
    *(_OWORD *)(a1 + 480) = v83;
  }
  v87 = a2[62];
  v88 = a2[63];
  v89 = *((_BYTE *)a2 + 512);
  sub_214282C84(v87, v88, v89);
  *(_QWORD *)(a1 + 496) = v87;
  *(_QWORD *)(a1 + 504) = v88;
  *(_BYTE *)(a1 + 512) = v89;
LABEL_45:
  v90 = (_OWORD *)(a1 + 520);
  v91 = a2 + 65;
  v92 = a2[68];
  if (v92)
  {
    if (v92 == 1)
    {
      v93 = *(_OWORD *)(a2 + 67);
      *v90 = *v91;
      *(_OWORD *)(a1 + 536) = v93;
      *(_OWORD *)(a1 + 552) = *(_OWORD *)(a2 + 69);
      *(_BYTE *)(a1 + 568) = *((_BYTE *)a2 + 568);
      goto LABEL_51;
    }
    v95 = a2[65];
    v96 = a2[66];
    v97 = v61[168];
    sub_2141DD130(v95, v96, v97);
    *(_QWORD *)(a1 + 520) = v95;
    *(_QWORD *)(a1 + 528) = v96;
    v60[168] = v97;
    *(_QWORD *)(a1 + 544) = a2[68];
    swift_bridgeObjectRetain();
  }
  else
  {
    v94 = *(_OWORD *)(a2 + 67);
    *v90 = *v91;
    *(_OWORD *)(a1 + 536) = v94;
  }
  v98 = a2[69];
  v99 = a2[70];
  v100 = *((_BYTE *)a2 + 568);
  sub_214274628(v98, v99, v100);
  *(_QWORD *)(a1 + 552) = v98;
  *(_QWORD *)(a1 + 560) = v99;
  *(_BYTE *)(a1 + 568) = v100;
LABEL_51:
  v101 = (_OWORD *)(a1 + 576);
  v102 = a2 + 72;
  v103 = a2[75];
  if (v103)
  {
    if (v103 == 1)
    {
      v104 = *((_OWORD *)a2 + 39);
      *(_OWORD *)(a1 + 608) = *((_OWORD *)a2 + 38);
      *(_OWORD *)(a1 + 624) = v104;
      *(_BYTE *)(a1 + 640) = *((_BYTE *)a2 + 640);
      v105 = *((_OWORD *)a2 + 37);
      *v101 = *v102;
      *(_OWORD *)(a1 + 592) = v105;
      goto LABEL_57;
    }
    v107 = a2[72];
    v108 = a2[73];
    v109 = v61[224];
    sub_2141DD130(v107, v108, v109);
    *(_QWORD *)(a1 + 576) = v107;
    *(_QWORD *)(a1 + 584) = v108;
    v60[224] = v109;
    *(_QWORD *)(a1 + 600) = a2[75];
    swift_bridgeObjectRetain();
  }
  else
  {
    v106 = *((_OWORD *)a2 + 37);
    *v101 = *v102;
    *(_OWORD *)(a1 + 592) = v106;
  }
  v110 = a2[76];
  v111 = a2[77];
  v112 = a2[78];
  v113 = a2[79];
  v114 = *((_BYTE *)a2 + 640);
  sub_214282CB0(v110, v111, v112, v113, v114);
  *(_QWORD *)(a1 + 608) = v110;
  *(_QWORD *)(a1 + 616) = v111;
  *(_QWORD *)(a1 + 624) = v112;
  *(_QWORD *)(a1 + 632) = v113;
  *(_BYTE *)(a1 + 640) = v114;
LABEL_57:
  v115 = (_OWORD *)(a1 + 648);
  v116 = a2 + 81;
  v117 = a2[84];
  if (!v117)
  {
    v120 = *(_OWORD *)(a2 + 83);
    *v115 = *v116;
    *(_OWORD *)(a1 + 664) = v120;
LABEL_62:
    v124 = a2[85];
    v125 = a2[86];
    v126 = a2[87];
    v127 = a2[88];
    v128 = *((_BYTE *)a2 + 712);
    sub_214282CB0(v124, v125, v126, v127, v128);
    *(_QWORD *)(a1 + 680) = v124;
    *(_QWORD *)(a1 + 688) = v125;
    *(_QWORD *)(a1 + 696) = v126;
    *(_QWORD *)(a1 + 704) = v127;
    *(_BYTE *)(a1 + 712) = v128;
    return a1;
  }
  if (v117 != 1)
  {
    v121 = a2[81];
    v122 = a2[82];
    v123 = v61[296];
    sub_2141DD130(v121, v122, v123);
    *(_QWORD *)(a1 + 648) = v121;
    *(_QWORD *)(a1 + 656) = v122;
    v60[296] = v123;
    *(_QWORD *)(a1 + 672) = a2[84];
    swift_bridgeObjectRetain();
    goto LABEL_62;
  }
  v118 = *(_OWORD *)(a2 + 87);
  *(_OWORD *)(a1 + 680) = *(_OWORD *)(a2 + 85);
  *(_OWORD *)(a1 + 696) = v118;
  *(_BYTE *)(a1 + 712) = *((_BYTE *)a2 + 712);
  v119 = *(_OWORD *)(a2 + 83);
  *v115 = *v116;
  *(_OWORD *)(a1 + 664) = v119;
  return a1;
}

uint64_t sub_214283678(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  _OWORD *v37;
  _OWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  unsigned __int8 v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  unsigned __int8 v65;
  uint64_t v66;
  uint64_t v67;
  unsigned __int8 v68;
  _OWORD *v69;
  _OWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  __int128 v96;
  __int128 v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char v109;
  _OWORD *v110;
  _OWORD *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char v116;
  uint64_t v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  uint64_t v121;
  uint64_t v122;
  char v123;
  uint64_t v124;
  uint64_t v125;
  char v126;
  __int128 v127;
  int v128;
  _QWORD *v129;
  uint64_t v130;
  uint64_t v131;
  char v132;
  __int128 v133;
  __int128 v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  char v171;
  uint64_t v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  uint64_t v179;
  _OWORD *v180;
  _OWORD *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  char v185;
  uint64_t v186;
  uint64_t v187;
  char v188;
  __int128 v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  char v200;
  __int128 v201;
  __int128 v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  char v220;
  _OWORD *v221;
  _OWORD *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  char v227;
  uint64_t v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  uint64_t v232;
  uint64_t v233;
  char v234;
  uint64_t v235;
  uint64_t v236;
  char v237;
  __int128 v238;
  uint64_t v239;
  uint64_t v240;
  char v241;
  uint64_t v242;
  uint64_t v243;
  char v244;
  __int128 v245;
  __int128 v246;
  uint64_t v247;
  uint64_t v248;
  char v249;
  uint64_t v250;
  uint64_t v251;
  char v252;
  _OWORD *v253;
  _OWORD *v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  char v259;
  uint64_t v260;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  uint64_t v264;
  uint64_t v265;
  char v266;
  uint64_t v267;
  uint64_t v268;
  char v269;
  __int128 v270;
  uint64_t v271;
  uint64_t v272;
  char v273;
  uint64_t v274;
  uint64_t v275;
  char v276;
  __int128 v277;
  __int128 v278;
  uint64_t v279;
  uint64_t v280;
  char v281;
  uint64_t v282;
  uint64_t v283;
  char v284;
  _OWORD *v285;
  _OWORD *v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  char v291;
  uint64_t v292;
  __int128 v293;
  __int128 v294;
  __int128 v295;
  uint64_t v296;
  uint64_t v297;
  char v298;
  uint64_t v299;
  uint64_t v300;
  char v301;
  __int128 v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  char v307;
  uint64_t v308;
  uint64_t v309;
  char v310;
  __int128 v311;
  __int128 v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  char v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  char v322;
  _OWORD *v323;
  _OWORD *v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  char v329;
  uint64_t v330;
  __int128 v331;
  __int128 v332;
  __int128 v333;
  uint64_t v334;
  uint64_t v335;
  char v336;
  uint64_t v337;
  uint64_t v338;
  char v339;
  __int128 v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  char v345;
  uint64_t v346;
  uint64_t v347;
  char v348;
  __int128 v349;
  __int128 v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  char v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  char v360;
  uint64_t v362;
  uint64_t v363;
  char v364;
  char v365;
  char *v366;
  char *v367;
  uint64_t v368;

  v4 = a3;
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *((_QWORD *)a2 + 3);
  if (v7 == 1)
  {
    if (v8 != 1)
    {
      if (v8)
      {
        v9 = *(_QWORD *)a2;
        v10 = *((_QWORD *)a2 + 1);
        v11 = *((_BYTE *)a2 + 16);
        sub_2141DD130(*(_QWORD *)a2, v10, v11);
        *(_QWORD *)a1 = v9;
        *(_QWORD *)(a1 + 8) = v10;
        *(_BYTE *)(a1 + 16) = v11;
        *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
        swift_bridgeObjectRetain();
      }
      else
      {
        v22 = a2[1];
        *(_OWORD *)a1 = *a2;
        *(_OWORD *)(a1 + 16) = v22;
      }
      v23 = *((_QWORD *)a2 + 4);
      v24 = *((_QWORD *)a2 + 5);
      v25 = *((_BYTE *)a2 + 48);
      sub_214274628(v23, v24, v25);
      *(_QWORD *)(a1 + 32) = v23;
      *(_QWORD *)(a1 + 40) = v24;
      *(_BYTE *)(a1 + 48) = v25;
      goto LABEL_18;
    }
LABEL_7:
    v13 = *a2;
    v14 = a2[1];
    v15 = a2[2];
    *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
    *(_OWORD *)(a1 + 16) = v14;
    *(_OWORD *)(a1 + 32) = v15;
    *(_OWORD *)a1 = v13;
    goto LABEL_18;
  }
  if (v8 == 1)
  {
    v12 = type metadata accessor for VisualMapper(0, *(_QWORD *)(a3 + 16), MEMORY[0x24BEE50B0], a4);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(a1, v12);
    goto LABEL_7;
  }
  if (v7)
  {
    if (v8)
    {
      v16 = *(_QWORD *)a2;
      v17 = *((_QWORD *)a2 + 1);
      v18 = *((_BYTE *)a2 + 16);
      sub_2141DD130(*(_QWORD *)a2, v17, v18);
      v19 = *(_QWORD *)a1;
      v20 = *(_QWORD *)(a1 + 8);
      v21 = *(_BYTE *)(a1 + 16);
      *(_QWORD *)a1 = v16;
      *(_QWORD *)(a1 + 8) = v17;
      *(_BYTE *)(a1 + 16) = v18;
      sub_2141ED0BC(v19, v20, v21);
      *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_21420D798(a1);
      v29 = a2[1];
      *(_OWORD *)a1 = *a2;
      *(_OWORD *)(a1 + 16) = v29;
    }
  }
  else if (v8)
  {
    v26 = *(_QWORD *)a2;
    v27 = *((_QWORD *)a2 + 1);
    v28 = *((_BYTE *)a2 + 16);
    sub_2141DD130(*(_QWORD *)a2, v27, v28);
    *(_QWORD *)a1 = v26;
    *(_QWORD *)(a1 + 8) = v27;
    *(_BYTE *)(a1 + 16) = v28;
    *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
    swift_bridgeObjectRetain();
  }
  else
  {
    v30 = a2[1];
    *(_OWORD *)a1 = *a2;
    *(_OWORD *)(a1 + 16) = v30;
  }
  v31 = *((_QWORD *)a2 + 4);
  v32 = *((_QWORD *)a2 + 5);
  v33 = *((_BYTE *)a2 + 48);
  sub_214274628(v31, v32, v33);
  v34 = *(_QWORD *)(a1 + 32);
  v35 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = v31;
  *(_QWORD *)(a1 + 40) = v32;
  v36 = *(_BYTE *)(a1 + 48);
  *(_BYTE *)(a1 + 48) = v33;
  sub_214274588(v34, v35, v36);
LABEL_18:
  v37 = (_OWORD *)(a1 + 56);
  v38 = (__int128 *)((char *)a2 + 56);
  v39 = *(_QWORD *)(a1 + 80);
  v40 = *((_QWORD *)a2 + 10);
  if (v39 == 1)
  {
    if (!v40)
    {
      v54 = *(__int128 *)((char *)a2 + 72);
      *v37 = *v38;
      *(_OWORD *)(a1 + 72) = v54;
      goto LABEL_29;
    }
    if (v40 != 1)
    {
      v41 = *((_QWORD *)a2 + 7);
      v42 = *((_QWORD *)a2 + 8);
      v43 = *((_BYTE *)a2 + 72);
      sub_2141DD130(v41, v42, v43);
      *(_QWORD *)(a1 + 56) = v41;
      *(_QWORD *)(a1 + 64) = v42;
      *(_BYTE *)(a1 + 72) = v43;
      *(_QWORD *)(a1 + 80) = *((_QWORD *)a2 + 10);
      swift_bridgeObjectRetain();
LABEL_29:
      v55 = *((_QWORD *)a2 + 11);
      v56 = *((_QWORD *)a2 + 12);
      v57 = *((_BYTE *)a2 + 104);
      sub_21427460C(v55, v56, v57);
      *(_QWORD *)(a1 + 88) = v55;
      *(_QWORD *)(a1 + 96) = v56;
      *(_BYTE *)(a1 + 104) = v57;
      goto LABEL_35;
    }
LABEL_24:
    v45 = *v38;
    v46 = *(__int128 *)((char *)a2 + 72);
    v47 = *(__int128 *)((char *)a2 + 88);
    *(_BYTE *)(a1 + 104) = *((_BYTE *)a2 + 104);
    *(_OWORD *)(a1 + 72) = v46;
    *(_OWORD *)(a1 + 88) = v47;
    *v37 = v45;
    goto LABEL_35;
  }
  if (v40 == 1)
  {
    v44 = type metadata accessor for VisualMapper(0, *(_QWORD *)(v4 + 16), MEMORY[0x24BDEBF80], a4);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 8))(a1 + 56, v44);
    goto LABEL_24;
  }
  if (v39)
  {
    if (v40)
    {
      v48 = *((_QWORD *)a2 + 7);
      v49 = *((_QWORD *)a2 + 8);
      v50 = *((_BYTE *)a2 + 72);
      sub_2141DD130(v48, v49, v50);
      v51 = *(_QWORD *)(a1 + 56);
      v52 = *(_QWORD *)(a1 + 64);
      v53 = *(_BYTE *)(a1 + 72);
      *(_QWORD *)(a1 + 56) = v48;
      *(_QWORD *)(a1 + 64) = v49;
      *(_BYTE *)(a1 + 72) = v50;
      sub_2141ED0BC(v51, v52, v53);
      *(_QWORD *)(a1 + 80) = *((_QWORD *)a2 + 10);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_21420D798(a1 + 56);
      v61 = *(__int128 *)((char *)a2 + 72);
      *v37 = *v38;
      *(_OWORD *)(a1 + 72) = v61;
    }
  }
  else if (v40)
  {
    v58 = *((_QWORD *)a2 + 7);
    v59 = *((_QWORD *)a2 + 8);
    v60 = *((_BYTE *)a2 + 72);
    sub_2141DD130(v58, v59, v60);
    *(_QWORD *)(a1 + 56) = v58;
    *(_QWORD *)(a1 + 64) = v59;
    *(_BYTE *)(a1 + 72) = v60;
    *(_QWORD *)(a1 + 80) = *((_QWORD *)a2 + 10);
    swift_bridgeObjectRetain();
  }
  else
  {
    v62 = *(__int128 *)((char *)a2 + 72);
    *v37 = *v38;
    *(_OWORD *)(a1 + 72) = v62;
  }
  v63 = *((_QWORD *)a2 + 11);
  v64 = *((_QWORD *)a2 + 12);
  v65 = *((_BYTE *)a2 + 104);
  sub_21427460C(v63, v64, v65);
  v66 = *(_QWORD *)(a1 + 88);
  v67 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = v63;
  *(_QWORD *)(a1 + 96) = v64;
  v68 = *(_BYTE *)(a1 + 104);
  *(_BYTE *)(a1 + 104) = v65;
  sub_2142745F0(v66, v67, v68);
LABEL_35:
  v69 = (_OWORD *)(a1 + 112);
  v70 = a2 + 7;
  v71 = *(_QWORD *)(a1 + 136);
  v72 = *((_QWORD *)a2 + 17);
  if (v71 == 1)
  {
    if (!v72)
    {
      v86 = a2[8];
      *v69 = *v70;
      *(_OWORD *)(a1 + 128) = v86;
      goto LABEL_46;
    }
    if (v72 != 1)
    {
      v73 = *((_QWORD *)a2 + 14);
      v74 = *((_QWORD *)a2 + 15);
      v75 = *((_BYTE *)a2 + 128);
      sub_2141DD130(v73, v74, v75);
      *(_QWORD *)(a1 + 112) = v73;
      *(_QWORD *)(a1 + 120) = v74;
      *(_BYTE *)(a1 + 128) = v75;
      *(_QWORD *)(a1 + 136) = *((_QWORD *)a2 + 17);
      swift_bridgeObjectRetain();
LABEL_46:
      v87 = *((_QWORD *)a2 + 18);
      v88 = *((_QWORD *)a2 + 19);
      v89 = *((_QWORD *)a2 + 20);
      v90 = *((_QWORD *)a2 + 21);
      v91 = *((_QWORD *)a2 + 22);
      v92 = *((_BYTE *)a2 + 184);
      sub_214282BD0(v87, v88, v89, v90, v91, v92);
      *(_QWORD *)(a1 + 144) = v87;
      *(_QWORD *)(a1 + 152) = v88;
      *(_QWORD *)(a1 + 160) = v89;
      *(_QWORD *)(a1 + 168) = v90;
      *(_QWORD *)(a1 + 176) = v91;
      *(_BYTE *)(a1 + 184) = v92;
      goto LABEL_52;
    }
LABEL_41:
    *v69 = *v70;
    v77 = a2[8];
    v78 = a2[9];
    v79 = a2[10];
    *(_OWORD *)(a1 + 169) = *(__int128 *)((char *)a2 + 169);
    *(_OWORD *)(a1 + 144) = v78;
    *(_OWORD *)(a1 + 160) = v79;
    *(_OWORD *)(a1 + 128) = v77;
    goto LABEL_52;
  }
  if (v72 == 1)
  {
    v76 = type metadata accessor for VisualMapper(0, *(_QWORD *)(v4 + 16), MEMORY[0x24BDEB7D0], a4);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v76 - 8) + 8))(a1 + 112, v76);
    goto LABEL_41;
  }
  if (v71)
  {
    if (v72)
    {
      v80 = *((_QWORD *)a2 + 14);
      v81 = *((_QWORD *)a2 + 15);
      v82 = *((_BYTE *)a2 + 128);
      sub_2141DD130(v80, v81, v82);
      v83 = *(_QWORD *)(a1 + 112);
      v84 = *(_QWORD *)(a1 + 120);
      v85 = *(_BYTE *)(a1 + 128);
      *(_QWORD *)(a1 + 112) = v80;
      *(_QWORD *)(a1 + 120) = v81;
      *(_BYTE *)(a1 + 128) = v82;
      sub_2141ED0BC(v83, v84, v85);
      *(_QWORD *)(a1 + 136) = *((_QWORD *)a2 + 17);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_21420D798(a1 + 112);
      v96 = a2[8];
      *v69 = *v70;
      *(_OWORD *)(a1 + 128) = v96;
    }
  }
  else if (v72)
  {
    v93 = *((_QWORD *)a2 + 14);
    v94 = *((_QWORD *)a2 + 15);
    v95 = *((_BYTE *)a2 + 128);
    sub_2141DD130(v93, v94, v95);
    *(_QWORD *)(a1 + 112) = v93;
    *(_QWORD *)(a1 + 120) = v94;
    *(_BYTE *)(a1 + 128) = v95;
    *(_QWORD *)(a1 + 136) = *((_QWORD *)a2 + 17);
    swift_bridgeObjectRetain();
  }
  else
  {
    v97 = a2[8];
    *v69 = *v70;
    *(_OWORD *)(a1 + 128) = v97;
  }
  v98 = *((_QWORD *)a2 + 18);
  v99 = *((_QWORD *)a2 + 19);
  v100 = *((_QWORD *)a2 + 20);
  v101 = *((_QWORD *)a2 + 21);
  v102 = *((_QWORD *)a2 + 22);
  v103 = *((_BYTE *)a2 + 184);
  sub_214282BD0(v98, v99, v100, v101, v102, v103);
  v104 = *(_QWORD *)(a1 + 144);
  v105 = *(_QWORD *)(a1 + 152);
  v106 = *(_QWORD *)(a1 + 160);
  v107 = *(_QWORD *)(a1 + 168);
  v108 = *(_QWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 144) = v98;
  *(_QWORD *)(a1 + 152) = v99;
  *(_QWORD *)(a1 + 160) = v100;
  *(_QWORD *)(a1 + 168) = v101;
  *(_QWORD *)(a1 + 176) = v102;
  v109 = *(_BYTE *)(a1 + 184);
  *(_BYTE *)(a1 + 184) = v103;
  sub_214273B58(v104, v105, v106, v107, v108, v109);
LABEL_52:
  v110 = (_OWORD *)(a1 + 192);
  v111 = a2 + 12;
  v112 = *(_QWORD *)(a1 + 216);
  v113 = *((_QWORD *)a2 + 27);
  if (v112 == 1)
  {
    if (!v113)
    {
      v127 = a2[13];
      *v110 = *v111;
      *(_OWORD *)(a1 + 208) = v127;
LABEL_64:
      v128 = *((unsigned __int8 *)a2 + 264);
      if (v128 != 2)
      {
        v129 = a2 + 14;
        if (v128 != 1)
          goto LABEL_78;
LABEL_75:
        *(_QWORD *)(a1 + 224) = *v129;
LABEL_77:
        *(_BYTE *)(a1 + 264) = v128;
        swift_retain();
        goto LABEL_79;
      }
      goto LABEL_76;
    }
    if (v113 != 1)
    {
      v114 = *((_QWORD *)a2 + 24);
      v115 = *((_QWORD *)a2 + 25);
      v116 = *((_BYTE *)a2 + 208);
      sub_2141DD130(v114, v115, v116);
      *(_QWORD *)(a1 + 192) = v114;
      *(_QWORD *)(a1 + 200) = v115;
      *(_BYTE *)(a1 + 208) = v116;
      *(_QWORD *)(a1 + 216) = *((_QWORD *)a2 + 27);
      swift_bridgeObjectRetain();
      goto LABEL_64;
    }
LABEL_58:
    *v110 = *v111;
    v118 = a2[13];
    v119 = a2[14];
    v120 = a2[15];
    *(_OWORD *)(a1 + 249) = *(__int128 *)((char *)a2 + 249);
    *(_OWORD *)(a1 + 224) = v119;
    *(_OWORD *)(a1 + 240) = v120;
    *(_OWORD *)(a1 + 208) = v118;
    goto LABEL_79;
  }
  if (v113 == 1)
  {
    v117 = type metadata accessor for VisualMapper(0, *(_QWORD *)(v4 + 16), (uint64_t)&type metadata for AnyChartSymbolShape, a4);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v117 - 8) + 8))(a1 + 192, v117);
    goto LABEL_58;
  }
  if (v112)
  {
    if (v113)
    {
      v121 = *((_QWORD *)a2 + 24);
      v122 = *((_QWORD *)a2 + 25);
      v123 = *((_BYTE *)a2 + 208);
      sub_2141DD130(v121, v122, v123);
      v124 = *(_QWORD *)(a1 + 192);
      v125 = *(_QWORD *)(a1 + 200);
      v126 = *(_BYTE *)(a1 + 208);
      *(_QWORD *)(a1 + 192) = v121;
      *(_QWORD *)(a1 + 200) = v122;
      *(_BYTE *)(a1 + 208) = v123;
      sub_2141ED0BC(v124, v125, v126);
      *(_QWORD *)(a1 + 216) = *((_QWORD *)a2 + 27);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if ((__int128 *)a1 == a2)
        goto LABEL_79;
LABEL_73:
      v135 = type metadata accessor for VisualMapper.Mapping(0, *(_QWORD *)(v4 + 16), (uint64_t)&type metadata for AnyChartSymbolShape, a4);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v135 - 8) + 8))(a1 + 224, v135);
      v128 = *((unsigned __int8 *)a2 + 264);
      if (v128 != 2)
      {
        v129 = a2 + 14;
        if (v128 != 1)
        {
LABEL_78:
          v137 = *((_QWORD *)a2 + 31);
          *(_QWORD *)(a1 + 248) = v137;
          *(_QWORD *)(a1 + 256) = *((_QWORD *)a2 + 32);
          (**(void (***)(uint64_t, _QWORD *))(v137 - 8))(a1 + 224, v129);
          *(_BYTE *)(a1 + 264) = 0;
          goto LABEL_79;
        }
        goto LABEL_75;
      }
LABEL_76:
      v136 = *((_QWORD *)a2 + 29);
      *(_QWORD *)(a1 + 224) = *((_QWORD *)a2 + 28);
      *(_QWORD *)(a1 + 232) = v136;
      LOBYTE(v128) = 2;
      goto LABEL_77;
    }
    sub_21420D798(a1 + 192);
    v133 = a2[13];
    *v110 = *v111;
    *(_OWORD *)(a1 + 208) = v133;
    if ((__int128 *)a1 != a2)
      goto LABEL_73;
  }
  else
  {
    if (!v113)
    {
      v134 = a2[13];
      *v110 = *v111;
      *(_OWORD *)(a1 + 208) = v134;
      if ((__int128 *)a1 == a2)
        goto LABEL_79;
      goto LABEL_73;
    }
    v130 = *((_QWORD *)a2 + 24);
    v131 = *((_QWORD *)a2 + 25);
    v132 = *((_BYTE *)a2 + 208);
    sub_2141DD130(v130, v131, v132);
    *(_QWORD *)(a1 + 192) = v130;
    *(_QWORD *)(a1 + 200) = v131;
    *(_BYTE *)(a1 + 208) = v132;
    *(_QWORD *)(a1 + 216) = *((_QWORD *)a2 + 27);
    swift_bridgeObjectRetain();
    if ((__int128 *)a1 != a2)
      goto LABEL_73;
  }
LABEL_79:
  v138 = *((unsigned __int8 *)a2 + 320);
  if (*(unsigned __int8 *)(a1 + 320) > 0xFBu)
  {
    if (v138 <= 0xFB)
    {
      v139 = *((_QWORD *)a2 + 34);
      v140 = *((_QWORD *)a2 + 35);
      v141 = *((_QWORD *)a2 + 36);
      v142 = *((_QWORD *)a2 + 37);
      v143 = v4;
      v144 = *((_QWORD *)a2 + 38);
      v145 = *((_QWORD *)a2 + 39);
      sub_214280EA8(v139, v140, v141, v142, v144, v145, v138, (void (*)(void))sub_2141EF2B4, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_214285A5C, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_214285A5C);
      *(_QWORD *)(a1 + 272) = v139;
      *(_QWORD *)(a1 + 280) = v140;
      *(_QWORD *)(a1 + 288) = v141;
      *(_QWORD *)(a1 + 296) = v142;
      *(_QWORD *)(a1 + 304) = v144;
      *(_QWORD *)(a1 + 312) = v145;
      v4 = v143;
      *(_BYTE *)(a1 + 320) = v138;
      goto LABEL_86;
    }
    goto LABEL_84;
  }
  if (v138 > 0xFB)
  {
    v146 = type metadata accessor for TypedVectorizedProperties.SymbolSizeMapper(0, *(_QWORD *)(v4 + 16), a3, a4);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v146 - 8) + 8))(a1 + 272, v146);
LABEL_84:
    v147 = a2[17];
    v148 = a2[18];
    v149 = a2[19];
    *(_BYTE *)(a1 + 320) = *((_BYTE *)a2 + 320);
    *(_OWORD *)(a1 + 288) = v148;
    *(_OWORD *)(a1 + 304) = v149;
    *(_OWORD *)(a1 + 272) = v147;
    goto LABEL_86;
  }
  v150 = *((_QWORD *)a2 + 34);
  v151 = *((_QWORD *)a2 + 35);
  v152 = *((_QWORD *)a2 + 36);
  v153 = *((_QWORD *)a2 + 37);
  v154 = v4;
  v155 = *((_QWORD *)a2 + 38);
  v156 = *((_QWORD *)a2 + 39);
  sub_214280EA8(v150, v151, v152, v153, v155, v156, v138, (void (*)(void))sub_2141EF2B4, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_214285A5C, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_214285A5C);
  v157 = *(_QWORD *)(a1 + 272);
  v158 = *(_QWORD *)(a1 + 280);
  v159 = *(_QWORD *)(a1 + 288);
  v160 = *(_QWORD *)(a1 + 296);
  v161 = *(_QWORD *)(a1 + 304);
  v162 = *(_QWORD *)(a1 + 312);
  *(_QWORD *)(a1 + 272) = v150;
  *(_QWORD *)(a1 + 280) = v151;
  *(_QWORD *)(a1 + 288) = v152;
  *(_QWORD *)(a1 + 296) = v153;
  *(_QWORD *)(a1 + 304) = v155;
  *(_QWORD *)(a1 + 312) = v156;
  v4 = v154;
  v163 = *(unsigned __int8 *)(a1 + 320);
  *(_BYTE *)(a1 + 320) = v138;
  sub_214280EA8(v157, v158, v159, v160, v161, v162, v163, (void (*)(void))sub_21422F7F0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_214285A58, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_214285A58);
LABEL_86:
  v164 = (char *)(a1 + 368);
  v165 = (char *)(a2 + 23);
  v166 = *(_QWORD *)(a1 + 376);
  v167 = *((_QWORD *)a2 + 47);
  if (v166 != 1)
  {
    if (v167 != 1)
    {
      *(_BYTE *)(a1 + 328) = *((_BYTE *)a2 + 328);
      v179 = *((_QWORD *)a2 + 42);
      *(_BYTE *)(a1 + 344) = *((_BYTE *)a2 + 344);
      *(_QWORD *)(a1 + 336) = v179;
      v180 = (_OWORD *)(a1 + 352);
      v181 = a2 + 22;
      v182 = *((_QWORD *)a2 + 47);
      v367 = (char *)(a1 + 368);
      v368 = v4;
      v366 = (char *)(a2 + 23);
      if (v166)
      {
        if (v182)
        {
          v183 = *((_QWORD *)a2 + 44);
          v184 = *((_QWORD *)a2 + 45);
          v185 = *v165;
          sub_2141DD130(v183, v184, *v165);
          v186 = *(_QWORD *)(a1 + 352);
          v187 = *(_QWORD *)(a1 + 360);
          v188 = *v164;
          *(_QWORD *)(a1 + 352) = v183;
          *(_QWORD *)(a1 + 360) = v184;
          *v164 = v185;
          sub_2141ED0BC(v186, v187, v188);
          *(_QWORD *)(a1 + 376) = *((_QWORD *)a2 + 47);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
        }
        else
        {
          sub_21420D798(a1 + 352);
          v201 = a2[23];
          *v180 = *v181;
          *(_OWORD *)(a1 + 368) = v201;
        }
      }
      else if (v182)
      {
        v198 = *((_QWORD *)a2 + 44);
        v199 = *((_QWORD *)a2 + 45);
        v200 = *v165;
        sub_2141DD130(v198, v199, *v165);
        *(_QWORD *)(a1 + 352) = v198;
        *(_QWORD *)(a1 + 360) = v199;
        *v164 = v200;
        *(_QWORD *)(a1 + 376) = *((_QWORD *)a2 + 47);
        swift_bridgeObjectRetain();
      }
      else
      {
        v202 = a2[23];
        *v180 = *v181;
        *(_OWORD *)(a1 + 368) = v202;
      }
      v203 = *((_QWORD *)a2 + 48);
      v204 = *((_QWORD *)a2 + 49);
      v205 = *((_QWORD *)a2 + 50);
      v206 = *((_QWORD *)a2 + 51);
      v207 = *((_QWORD *)a2 + 52);
      v208 = *((_QWORD *)a2 + 53);
      v210 = *((_QWORD *)a2 + 54);
      v209 = *((_QWORD *)a2 + 55);
      v363 = *((_QWORD *)a2 + 56);
      v365 = *((_BYTE *)a2 + 456);
      sub_214282BFC(v203, v204, v205, v206, v207, v208, v210, v209, v363, v365);
      v211 = *(_QWORD *)(a1 + 384);
      v212 = *(_QWORD *)(a1 + 392);
      v213 = *(_QWORD *)(a1 + 400);
      v214 = *(_QWORD *)(a1 + 408);
      v215 = *(_QWORD *)(a1 + 416);
      v216 = *(_QWORD *)(a1 + 424);
      v217 = *(_QWORD *)(a1 + 432);
      v218 = *(_QWORD *)(a1 + 440);
      v219 = *(_QWORD *)(a1 + 448);
      v220 = *(_BYTE *)(a1 + 456);
      *(_QWORD *)(a1 + 384) = v203;
      *(_QWORD *)(a1 + 392) = v204;
      *(_QWORD *)(a1 + 400) = v205;
      *(_QWORD *)(a1 + 408) = v206;
      *(_QWORD *)(a1 + 416) = v207;
      *(_QWORD *)(a1 + 424) = v208;
      *(_QWORD *)(a1 + 432) = v210;
      *(_QWORD *)(a1 + 440) = v209;
      *(_QWORD *)(a1 + 448) = v363;
      *(_BYTE *)(a1 + 456) = v365;
      sub_214273B84(v211, v212, v213, v214, v215, v216, v217, v218, v219, v220);
      goto LABEL_103;
    }
    v172 = type metadata accessor for TypedVectorizedProperties.Position(0, *(_QWORD *)(v4 + 16), a3, a4);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v172 - 8) + 8))(a1 + 328, v172);
LABEL_92:
    *(_OWORD *)(a1 + 328) = *(__int128 *)((char *)a2 + 328);
    v173 = *(__int128 *)((char *)a2 + 344);
    v174 = *(__int128 *)((char *)a2 + 360);
    v175 = *(__int128 *)((char *)a2 + 392);
    *(_OWORD *)(a1 + 376) = *(__int128 *)((char *)a2 + 376);
    *(_OWORD *)(a1 + 392) = v175;
    *(_OWORD *)(a1 + 344) = v173;
    *(_OWORD *)(a1 + 360) = v174;
    v176 = *(__int128 *)((char *)a2 + 408);
    v177 = *(__int128 *)((char *)a2 + 424);
    v178 = *(__int128 *)((char *)a2 + 440);
    *(_BYTE *)(a1 + 456) = *((_BYTE *)a2 + 456);
    *(_OWORD *)(a1 + 424) = v177;
    *(_OWORD *)(a1 + 440) = v178;
    *(_OWORD *)(a1 + 408) = v176;
    goto LABEL_104;
  }
  if (v167 == 1)
    goto LABEL_92;
  *(_BYTE *)(a1 + 328) = *((_BYTE *)a2 + 328);
  v168 = *((_QWORD *)a2 + 42);
  *(_BYTE *)(a1 + 344) = *((_BYTE *)a2 + 344);
  *(_QWORD *)(a1 + 336) = v168;
  v367 = (char *)(a1 + 368);
  v368 = v4;
  v366 = (char *)(a2 + 23);
  if (*((_QWORD *)a2 + 47))
  {
    v169 = *((_QWORD *)a2 + 44);
    v170 = *((_QWORD *)a2 + 45);
    v171 = *v165;
    sub_2141DD130(v169, v170, *v165);
    *(_QWORD *)(a1 + 352) = v169;
    *(_QWORD *)(a1 + 360) = v170;
    *v164 = v171;
    *(_QWORD *)(a1 + 376) = *((_QWORD *)a2 + 47);
    swift_bridgeObjectRetain();
  }
  else
  {
    v189 = a2[23];
    *(_OWORD *)(a1 + 352) = a2[22];
    *(_OWORD *)(a1 + 368) = v189;
  }
  v190 = *((_QWORD *)a2 + 48);
  v191 = *((_QWORD *)a2 + 49);
  v192 = *((_QWORD *)a2 + 50);
  v193 = *((_QWORD *)a2 + 51);
  v194 = *((_QWORD *)a2 + 52);
  v195 = *((_QWORD *)a2 + 53);
  v196 = *((_QWORD *)a2 + 54);
  v197 = *((_QWORD *)a2 + 55);
  v362 = *((_QWORD *)a2 + 56);
  v364 = *((_BYTE *)a2 + 456);
  sub_214282BFC(v190, v191, v192, v193, v194, v195, v196, v197, v362, v364);
  *(_QWORD *)(a1 + 384) = v190;
  *(_QWORD *)(a1 + 392) = v191;
  *(_QWORD *)(a1 + 400) = v192;
  *(_QWORD *)(a1 + 408) = v193;
  *(_QWORD *)(a1 + 416) = v194;
  *(_QWORD *)(a1 + 424) = v195;
  *(_QWORD *)(a1 + 432) = v196;
  *(_QWORD *)(a1 + 440) = v197;
  *(_QWORD *)(a1 + 448) = v362;
  *(_BYTE *)(a1 + 456) = v364;
LABEL_103:
  v164 = v367;
  v4 = v368;
  v165 = v366;
LABEL_104:
  v221 = (_OWORD *)(a1 + 464);
  v222 = a2 + 29;
  v223 = *(_QWORD *)(a1 + 488);
  v224 = *((_QWORD *)a2 + 61);
  if (v223 == 1)
  {
    if (!v224)
    {
      v238 = a2[30];
      *v221 = *v222;
      *(_OWORD *)(a1 + 480) = v238;
      goto LABEL_115;
    }
    if (v224 != 1)
    {
      v225 = *((_QWORD *)a2 + 58);
      v226 = *((_QWORD *)a2 + 59);
      v227 = v165[112];
      sub_2141DD130(v225, v226, v227);
      *(_QWORD *)(a1 + 464) = v225;
      *(_QWORD *)(a1 + 472) = v226;
      v164[112] = v227;
      *(_QWORD *)(a1 + 488) = *((_QWORD *)a2 + 61);
      swift_bridgeObjectRetain();
LABEL_115:
      v239 = *((_QWORD *)a2 + 62);
      v240 = *((_QWORD *)a2 + 63);
      v241 = *((_BYTE *)a2 + 512);
      sub_214282C84(v239, v240, v241);
      *(_QWORD *)(a1 + 496) = v239;
      *(_QWORD *)(a1 + 504) = v240;
      *(_BYTE *)(a1 + 512) = v241;
      goto LABEL_121;
    }
LABEL_110:
    v229 = *v222;
    v230 = a2[30];
    v231 = a2[31];
    *(_BYTE *)(a1 + 512) = *((_BYTE *)a2 + 512);
    *(_OWORD *)(a1 + 480) = v230;
    *(_OWORD *)(a1 + 496) = v231;
    *v221 = v229;
    goto LABEL_121;
  }
  if (v224 == 1)
  {
    v228 = type metadata accessor for VisualMapper(0, *(_QWORD *)(v4 + 16), MEMORY[0x24BEE0D00], a4);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v228 - 8) + 8))(a1 + 464, v228);
    goto LABEL_110;
  }
  if (v223)
  {
    if (v224)
    {
      v232 = *((_QWORD *)a2 + 58);
      v233 = *((_QWORD *)a2 + 59);
      v234 = v165[112];
      sub_2141DD130(v232, v233, v234);
      v235 = *(_QWORD *)(a1 + 464);
      v236 = *(_QWORD *)(a1 + 472);
      v237 = v164[112];
      *(_QWORD *)(a1 + 464) = v232;
      *(_QWORD *)(a1 + 472) = v233;
      v164[112] = v234;
      sub_2141ED0BC(v235, v236, v237);
      *(_QWORD *)(a1 + 488) = *((_QWORD *)a2 + 61);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_21420D798(a1 + 464);
      v245 = a2[30];
      *v221 = *v222;
      *(_OWORD *)(a1 + 480) = v245;
    }
  }
  else if (v224)
  {
    v242 = *((_QWORD *)a2 + 58);
    v243 = *((_QWORD *)a2 + 59);
    v244 = v165[112];
    sub_2141DD130(v242, v243, v244);
    *(_QWORD *)(a1 + 464) = v242;
    *(_QWORD *)(a1 + 472) = v243;
    v164[112] = v244;
    *(_QWORD *)(a1 + 488) = *((_QWORD *)a2 + 61);
    swift_bridgeObjectRetain();
  }
  else
  {
    v246 = a2[30];
    *v221 = *v222;
    *(_OWORD *)(a1 + 480) = v246;
  }
  v247 = *((_QWORD *)a2 + 62);
  v248 = *((_QWORD *)a2 + 63);
  v249 = *((_BYTE *)a2 + 512);
  sub_214282C84(v247, v248, v249);
  v250 = *(_QWORD *)(a1 + 496);
  v251 = *(_QWORD *)(a1 + 504);
  *(_QWORD *)(a1 + 496) = v247;
  *(_QWORD *)(a1 + 504) = v248;
  v252 = *(_BYTE *)(a1 + 512);
  *(_BYTE *)(a1 + 512) = v249;
  sub_21427429C(v250, v251, v252);
LABEL_121:
  v253 = (_OWORD *)(a1 + 520);
  v254 = (__int128 *)((char *)a2 + 520);
  v255 = *(_QWORD *)(a1 + 544);
  v256 = *((_QWORD *)a2 + 68);
  if (v255 == 1)
  {
    if (!v256)
    {
      v270 = *(__int128 *)((char *)a2 + 536);
      *v253 = *v254;
      *(_OWORD *)(a1 + 536) = v270;
      goto LABEL_132;
    }
    if (v256 != 1)
    {
      v257 = *((_QWORD *)a2 + 65);
      v258 = *((_QWORD *)a2 + 66);
      v259 = v165[168];
      sub_2141DD130(v257, v258, v259);
      *(_QWORD *)(a1 + 520) = v257;
      *(_QWORD *)(a1 + 528) = v258;
      v164[168] = v259;
      *(_QWORD *)(a1 + 544) = *((_QWORD *)a2 + 68);
      swift_bridgeObjectRetain();
LABEL_132:
      v271 = *((_QWORD *)a2 + 69);
      v272 = *((_QWORD *)a2 + 70);
      v273 = *((_BYTE *)a2 + 568);
      sub_214274628(v271, v272, v273);
      *(_QWORD *)(a1 + 552) = v271;
      *(_QWORD *)(a1 + 560) = v272;
      *(_BYTE *)(a1 + 568) = v273;
      goto LABEL_138;
    }
LABEL_127:
    v261 = *v254;
    v262 = *(__int128 *)((char *)a2 + 536);
    v263 = *(__int128 *)((char *)a2 + 552);
    *(_BYTE *)(a1 + 568) = *((_BYTE *)a2 + 568);
    *(_OWORD *)(a1 + 536) = v262;
    *(_OWORD *)(a1 + 552) = v263;
    *v253 = v261;
    goto LABEL_138;
  }
  if (v256 == 1)
  {
    v260 = type metadata accessor for VisualMapper(0, *(_QWORD *)(v4 + 16), MEMORY[0x24BEE1328], a4);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v260 - 8) + 8))(a1 + 520, v260);
    goto LABEL_127;
  }
  if (v255)
  {
    if (v256)
    {
      v264 = *((_QWORD *)a2 + 65);
      v265 = *((_QWORD *)a2 + 66);
      v266 = v165[168];
      sub_2141DD130(v264, v265, v266);
      v267 = *(_QWORD *)(a1 + 520);
      v268 = *(_QWORD *)(a1 + 528);
      v269 = v164[168];
      *(_QWORD *)(a1 + 520) = v264;
      *(_QWORD *)(a1 + 528) = v265;
      v164[168] = v266;
      sub_2141ED0BC(v267, v268, v269);
      *(_QWORD *)(a1 + 544) = *((_QWORD *)a2 + 68);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_21420D798(a1 + 520);
      v277 = *(__int128 *)((char *)a2 + 536);
      *v253 = *v254;
      *(_OWORD *)(a1 + 536) = v277;
    }
  }
  else if (v256)
  {
    v274 = *((_QWORD *)a2 + 65);
    v275 = *((_QWORD *)a2 + 66);
    v276 = v165[168];
    sub_2141DD130(v274, v275, v276);
    *(_QWORD *)(a1 + 520) = v274;
    *(_QWORD *)(a1 + 528) = v275;
    v164[168] = v276;
    *(_QWORD *)(a1 + 544) = *((_QWORD *)a2 + 68);
    swift_bridgeObjectRetain();
  }
  else
  {
    v278 = *(__int128 *)((char *)a2 + 536);
    *v253 = *v254;
    *(_OWORD *)(a1 + 536) = v278;
  }
  v279 = *((_QWORD *)a2 + 69);
  v280 = *((_QWORD *)a2 + 70);
  v281 = *((_BYTE *)a2 + 568);
  sub_214274628(v279, v280, v281);
  v282 = *(_QWORD *)(a1 + 552);
  v283 = *(_QWORD *)(a1 + 560);
  *(_QWORD *)(a1 + 552) = v279;
  *(_QWORD *)(a1 + 560) = v280;
  v284 = *(_BYTE *)(a1 + 568);
  *(_BYTE *)(a1 + 568) = v281;
  sub_214274588(v282, v283, v284);
LABEL_138:
  v285 = (_OWORD *)(a1 + 576);
  v286 = a2 + 36;
  v287 = *(_QWORD *)(a1 + 600);
  v288 = *((_QWORD *)a2 + 75);
  if (v287 == 1)
  {
    if (!v288)
    {
      v302 = a2[37];
      *v285 = *v286;
      *(_OWORD *)(a1 + 592) = v302;
      goto LABEL_149;
    }
    if (v288 != 1)
    {
      v289 = *((_QWORD *)a2 + 72);
      v290 = *((_QWORD *)a2 + 73);
      v291 = v165[224];
      sub_2141DD130(v289, v290, v291);
      *(_QWORD *)(a1 + 576) = v289;
      *(_QWORD *)(a1 + 584) = v290;
      v164[224] = v291;
      *(_QWORD *)(a1 + 600) = *((_QWORD *)a2 + 75);
      swift_bridgeObjectRetain();
LABEL_149:
      v303 = *((_QWORD *)a2 + 76);
      v304 = *((_QWORD *)a2 + 77);
      v305 = *((_QWORD *)a2 + 78);
      v306 = *((_QWORD *)a2 + 79);
      v307 = *((_BYTE *)a2 + 640);
      sub_214282CB0(v303, v304, v305, v306, v307);
      *(_QWORD *)(a1 + 608) = v303;
      *(_QWORD *)(a1 + 616) = v304;
      *(_QWORD *)(a1 + 624) = v305;
      *(_QWORD *)(a1 + 632) = v306;
      *(_BYTE *)(a1 + 640) = v307;
      goto LABEL_155;
    }
LABEL_144:
    *v285 = *v286;
    v293 = a2[37];
    v294 = a2[38];
    v295 = a2[39];
    *(_BYTE *)(a1 + 640) = *((_BYTE *)a2 + 640);
    *(_OWORD *)(a1 + 608) = v294;
    *(_OWORD *)(a1 + 624) = v295;
    *(_OWORD *)(a1 + 592) = v293;
    goto LABEL_155;
  }
  if (v288 == 1)
  {
    v292 = type metadata accessor for VisualMapper(0, *(_QWORD *)(v4 + 16), MEMORY[0x24BDF1FA8], a4);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v292 - 8) + 8))(a1 + 576, v292);
    goto LABEL_144;
  }
  if (v287)
  {
    if (v288)
    {
      v296 = *((_QWORD *)a2 + 72);
      v297 = *((_QWORD *)a2 + 73);
      v298 = v165[224];
      sub_2141DD130(v296, v297, v298);
      v299 = *(_QWORD *)(a1 + 576);
      v300 = *(_QWORD *)(a1 + 584);
      v301 = v164[224];
      *(_QWORD *)(a1 + 576) = v296;
      *(_QWORD *)(a1 + 584) = v297;
      v164[224] = v298;
      sub_2141ED0BC(v299, v300, v301);
      *(_QWORD *)(a1 + 600) = *((_QWORD *)a2 + 75);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_21420D798(a1 + 576);
      v311 = a2[37];
      *v285 = *v286;
      *(_OWORD *)(a1 + 592) = v311;
    }
  }
  else if (v288)
  {
    v308 = *((_QWORD *)a2 + 72);
    v309 = *((_QWORD *)a2 + 73);
    v310 = v165[224];
    sub_2141DD130(v308, v309, v310);
    *(_QWORD *)(a1 + 576) = v308;
    *(_QWORD *)(a1 + 584) = v309;
    v164[224] = v310;
    *(_QWORD *)(a1 + 600) = *((_QWORD *)a2 + 75);
    swift_bridgeObjectRetain();
  }
  else
  {
    v312 = a2[37];
    *v285 = *v286;
    *(_OWORD *)(a1 + 592) = v312;
  }
  v313 = *((_QWORD *)a2 + 76);
  v314 = *((_QWORD *)a2 + 77);
  v315 = *((_QWORD *)a2 + 78);
  v316 = *((_QWORD *)a2 + 79);
  v317 = *((_BYTE *)a2 + 640);
  sub_214282CB0(v313, v314, v315, v316, v317);
  v318 = *(_QWORD *)(a1 + 608);
  v319 = *(_QWORD *)(a1 + 616);
  v320 = *(_QWORD *)(a1 + 624);
  v321 = *(_QWORD *)(a1 + 632);
  *(_QWORD *)(a1 + 608) = v313;
  *(_QWORD *)(a1 + 616) = v314;
  *(_QWORD *)(a1 + 624) = v315;
  *(_QWORD *)(a1 + 632) = v316;
  v322 = *(_BYTE *)(a1 + 640);
  *(_BYTE *)(a1 + 640) = v317;
  sub_214274208(v318, v319, v320, v321, v322);
LABEL_155:
  v323 = (_OWORD *)(a1 + 648);
  v324 = (__int128 *)((char *)a2 + 648);
  v325 = *(_QWORD *)(a1 + 672);
  v326 = *((_QWORD *)a2 + 84);
  if (v325 == 1)
  {
    if (!v326)
    {
      v340 = *(__int128 *)((char *)a2 + 664);
      *v323 = *v324;
      *(_OWORD *)(a1 + 664) = v340;
      goto LABEL_166;
    }
    if (v326 != 1)
    {
      v327 = *((_QWORD *)a2 + 81);
      v328 = *((_QWORD *)a2 + 82);
      v329 = v165[296];
      sub_2141DD130(v327, v328, v329);
      *(_QWORD *)(a1 + 648) = v327;
      *(_QWORD *)(a1 + 656) = v328;
      v164[296] = v329;
      *(_QWORD *)(a1 + 672) = *((_QWORD *)a2 + 84);
      swift_bridgeObjectRetain();
LABEL_166:
      v341 = *((_QWORD *)a2 + 85);
      v342 = *((_QWORD *)a2 + 86);
      v343 = *((_QWORD *)a2 + 87);
      v344 = *((_QWORD *)a2 + 88);
      v345 = *((_BYTE *)a2 + 712);
      sub_214282CB0(v341, v342, v343, v344, v345);
      *(_QWORD *)(a1 + 680) = v341;
      *(_QWORD *)(a1 + 688) = v342;
      *(_QWORD *)(a1 + 696) = v343;
      *(_QWORD *)(a1 + 704) = v344;
      *(_BYTE *)(a1 + 712) = v345;
      return a1;
    }
    goto LABEL_161;
  }
  if (v326 == 1)
  {
    v330 = type metadata accessor for VisualMapper(0, *(_QWORD *)(v4 + 16), MEMORY[0x24BDF1FA8], a4);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v330 - 8) + 8))(a1 + 648, v330);
LABEL_161:
    *v323 = *v324;
    v331 = *(__int128 *)((char *)a2 + 664);
    v332 = *(__int128 *)((char *)a2 + 680);
    v333 = *(__int128 *)((char *)a2 + 696);
    *(_BYTE *)(a1 + 712) = *((_BYTE *)a2 + 712);
    *(_OWORD *)(a1 + 680) = v332;
    *(_OWORD *)(a1 + 696) = v333;
    *(_OWORD *)(a1 + 664) = v331;
    return a1;
  }
  if (v325)
  {
    if (v326)
    {
      v334 = *((_QWORD *)a2 + 81);
      v335 = *((_QWORD *)a2 + 82);
      v336 = v165[296];
      sub_2141DD130(v334, v335, v336);
      v337 = *(_QWORD *)(a1 + 648);
      v338 = *(_QWORD *)(a1 + 656);
      v339 = v164[296];
      *(_QWORD *)(a1 + 648) = v334;
      *(_QWORD *)(a1 + 656) = v335;
      v164[296] = v336;
      sub_2141ED0BC(v337, v338, v339);
      *(_QWORD *)(a1 + 672) = *((_QWORD *)a2 + 84);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_21420D798(a1 + 648);
      v349 = *(__int128 *)((char *)a2 + 664);
      *v323 = *v324;
      *(_OWORD *)(a1 + 664) = v349;
    }
  }
  else if (v326)
  {
    v346 = *((_QWORD *)a2 + 81);
    v347 = *((_QWORD *)a2 + 82);
    v348 = v165[296];
    sub_2141DD130(v346, v347, v348);
    *(_QWORD *)(a1 + 648) = v346;
    *(_QWORD *)(a1 + 656) = v347;
    v164[296] = v348;
    *(_QWORD *)(a1 + 672) = *((_QWORD *)a2 + 84);
    swift_bridgeObjectRetain();
  }
  else
  {
    v350 = *(__int128 *)((char *)a2 + 664);
    *v323 = *v324;
    *(_OWORD *)(a1 + 664) = v350;
  }
  v351 = *((_QWORD *)a2 + 85);
  v352 = *((_QWORD *)a2 + 86);
  v353 = *((_QWORD *)a2 + 87);
  v354 = *((_QWORD *)a2 + 88);
  v355 = *((_BYTE *)a2 + 712);
  sub_214282CB0(v351, v352, v353, v354, v355);
  v356 = *(_QWORD *)(a1 + 680);
  v357 = *(_QWORD *)(a1 + 688);
  v358 = *(_QWORD *)(a1 + 696);
  v359 = *(_QWORD *)(a1 + 704);
  *(_QWORD *)(a1 + 680) = v351;
  *(_QWORD *)(a1 + 688) = v352;
  *(_QWORD *)(a1 + 696) = v353;
  *(_QWORD *)(a1 + 704) = v354;
  v360 = *(_BYTE *)(a1 + 712);
  *(_BYTE *)(a1 + 712) = v355;
  sub_214274208(v356, v357, v358, v359, v360);
  return a1;
}

void *sub_21428498C(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x2C9uLL);
}

uint64_t sub_214284994(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  __int128 v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  _OWORD *v20;
  _OWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  __int128 v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 v34;
  _OWORD *v35;
  _OWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  __int128 v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  char v55;
  _OWORD *v56;
  _OWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  char *v63;
  uint64_t v64;
  unsigned int v65;
  uint64_t v66;
  __int128 v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __int128 v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  __int128 v90;
  uint64_t v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  char v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  __int128 v106;
  __int128 v107;
  _OWORD *v108;
  _OWORD *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  __int128 v113;
  char v114;
  uint64_t v115;
  uint64_t v116;
  char v117;
  __int128 v118;
  char v119;
  uint64_t v120;
  uint64_t v121;
  char v122;
  _OWORD *v123;
  _OWORD *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  __int128 v128;
  char v129;
  uint64_t v130;
  uint64_t v131;
  char v132;
  __int128 v133;
  char v134;
  uint64_t v135;
  uint64_t v136;
  char v137;
  _OWORD *v138;
  _OWORD *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  __int128 v143;
  __int128 v144;
  char v145;
  uint64_t v146;
  uint64_t v147;
  char v148;
  __int128 v149;
  char v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  __int128 v155;
  char v156;
  _OWORD *v157;
  _OWORD *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  __int128 v162;
  __int128 v163;
  char v164;
  uint64_t v165;
  uint64_t v166;
  char v167;
  __int128 v168;
  char v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  __int128 v174;
  char v175;

  v7 = *(_QWORD *)(a1 + 24);
  if (v7 == 1)
    goto LABEL_4;
  v8 = *(_QWORD *)(a2 + 24);
  if (v8 == 1)
  {
    v9 = type metadata accessor for VisualMapper(0, *(_QWORD *)(a3 + 16), MEMORY[0x24BEE50B0], a4);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(a1, v9);
LABEL_4:
    v10 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v10;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
    goto LABEL_11;
  }
  if (!v7)
    goto LABEL_9;
  if (!v8)
  {
    sub_21420D798(a1);
LABEL_9:
    v15 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v15;
    goto LABEL_10;
  }
  v11 = *(_BYTE *)(a2 + 16);
  v12 = *(_QWORD *)a1;
  v13 = *(_QWORD *)(a1 + 8);
  v14 = *(_BYTE *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v11;
  sub_2141ED0BC(v12, v13, v14);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
LABEL_10:
  v16 = *(_BYTE *)(a2 + 48);
  v17 = *(_QWORD *)(a1 + 32);
  v18 = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  v19 = *(_BYTE *)(a1 + 48);
  *(_BYTE *)(a1 + 48) = v16;
  sub_214274588(v17, v18, v19);
LABEL_11:
  v20 = (_OWORD *)(a1 + 56);
  v21 = (_OWORD *)(a2 + 56);
  v22 = *(_QWORD *)(a1 + 80);
  if (v22 == 1)
  {
LABEL_14:
    v25 = *(_OWORD *)(a2 + 72);
    *v20 = *v21;
    *(_OWORD *)(a1 + 72) = v25;
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
    goto LABEL_21;
  }
  v23 = *(_QWORD *)(a2 + 80);
  if (v23 == 1)
  {
    v24 = type metadata accessor for VisualMapper(0, *(_QWORD *)(a3 + 16), MEMORY[0x24BDEBF80], a4);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 8))(a1 + 56, v24);
    goto LABEL_14;
  }
  if (!v22)
    goto LABEL_19;
  if (!v23)
  {
    sub_21420D798(a1 + 56);
LABEL_19:
    v30 = *(_OWORD *)(a2 + 72);
    *v20 = *v21;
    *(_OWORD *)(a1 + 72) = v30;
    goto LABEL_20;
  }
  v26 = *(_BYTE *)(a2 + 72);
  v27 = *(_QWORD *)(a1 + 56);
  v28 = *(_QWORD *)(a1 + 64);
  v29 = *(_BYTE *)(a1 + 72);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 72) = v26;
  sub_2141ED0BC(v27, v28, v29);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRelease();
LABEL_20:
  v31 = *(_BYTE *)(a2 + 104);
  v32 = *(_QWORD *)(a1 + 88);
  v33 = *(_QWORD *)(a1 + 96);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  v34 = *(_BYTE *)(a1 + 104);
  *(_BYTE *)(a1 + 104) = v31;
  sub_2142745F0(v32, v33, v34);
LABEL_21:
  v35 = (_OWORD *)(a1 + 112);
  v36 = (_OWORD *)(a2 + 112);
  v37 = *(_QWORD *)(a1 + 136);
  if (v37 == 1)
  {
LABEL_24:
    v40 = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 160) = v40;
    *(_OWORD *)(a1 + 169) = *(_OWORD *)(a2 + 169);
    v41 = *(_OWORD *)(a2 + 128);
    *v35 = *v36;
    *(_OWORD *)(a1 + 128) = v41;
    goto LABEL_31;
  }
  v38 = *(_QWORD *)(a2 + 136);
  if (v38 == 1)
  {
    v39 = type metadata accessor for VisualMapper(0, *(_QWORD *)(a3 + 16), MEMORY[0x24BDEB7D0], a4);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 8))(a1 + 112, v39);
    goto LABEL_24;
  }
  if (!v37)
    goto LABEL_29;
  if (!v38)
  {
    sub_21420D798(a1 + 112);
LABEL_29:
    v46 = *(_OWORD *)(a2 + 128);
    *v35 = *v36;
    *(_OWORD *)(a1 + 128) = v46;
    goto LABEL_30;
  }
  v42 = *(_BYTE *)(a2 + 128);
  v43 = *(_QWORD *)(a1 + 112);
  v44 = *(_QWORD *)(a1 + 120);
  v45 = *(_BYTE *)(a1 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 128) = v42;
  sub_2141ED0BC(v43, v44, v45);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  swift_bridgeObjectRelease();
LABEL_30:
  v47 = *(_QWORD *)(a2 + 176);
  v48 = *(_BYTE *)(a2 + 184);
  v49 = *(_QWORD *)(a1 + 144);
  v50 = *(_QWORD *)(a1 + 152);
  v51 = *(_QWORD *)(a1 + 160);
  v52 = *(_QWORD *)(a1 + 168);
  v53 = *(_QWORD *)(a1 + 176);
  v54 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 160) = v54;
  *(_QWORD *)(a1 + 176) = v47;
  v55 = *(_BYTE *)(a1 + 184);
  *(_BYTE *)(a1 + 184) = v48;
  sub_214273B58(v49, v50, v51, v52, v53, v55);
LABEL_31:
  v56 = (_OWORD *)(a1 + 192);
  v57 = (_OWORD *)(a2 + 192);
  v58 = *(_QWORD *)(a1 + 216);
  if (v58 == 1)
  {
LABEL_34:
    v61 = *(_OWORD *)(a2 + 240);
    *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
    *(_OWORD *)(a1 + 240) = v61;
    *(_OWORD *)(a1 + 249) = *(_OWORD *)(a2 + 249);
    v62 = *(_OWORD *)(a2 + 208);
    *v56 = *v57;
    *(_OWORD *)(a1 + 208) = v62;
    goto LABEL_35;
  }
  v59 = *(_QWORD *)(a2 + 216);
  if (v59 == 1)
  {
    v60 = type metadata accessor for VisualMapper(0, *(_QWORD *)(a3 + 16), (uint64_t)&type metadata for AnyChartSymbolShape, a4);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v60 - 8) + 8))(a1 + 192, v60);
    goto LABEL_34;
  }
  if (!v58)
  {
LABEL_52:
    v90 = *(_OWORD *)(a2 + 208);
    *v56 = *v57;
    *(_OWORD *)(a1 + 208) = v90;
    if (a1 == a2)
      goto LABEL_35;
    goto LABEL_53;
  }
  if (!v59)
  {
    sub_21420D798(a1 + 192);
    goto LABEL_52;
  }
  v68 = *(_BYTE *)(a2 + 208);
  v69 = *(_QWORD *)(a1 + 192);
  v70 = *(_QWORD *)(a1 + 200);
  v71 = *(_BYTE *)(a1 + 208);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_BYTE *)(a1 + 208) = v68;
  sub_2141ED0BC(v69, v70, v71);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
LABEL_53:
    v91 = type metadata accessor for VisualMapper.Mapping(0, *(_QWORD *)(a3 + 16), (uint64_t)&type metadata for AnyChartSymbolShape, a4);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v91 - 8) + 8))(a1 + 224, v91);
    v92 = *(_OWORD *)(a2 + 240);
    *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
    *(_OWORD *)(a1 + 240) = v92;
    *(_OWORD *)(a1 + 249) = *(_OWORD *)(a2 + 249);
  }
LABEL_35:
  v63 = (char *)(a1 + 368);
  v64 = *(unsigned __int8 *)(a1 + 320);
  if (v64 > 0xFB)
  {
LABEL_38:
    v67 = *(_OWORD *)(a2 + 288);
    *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
    *(_OWORD *)(a1 + 288) = v67;
    *(_OWORD *)(a1 + 304) = *(_OWORD *)(a2 + 304);
    *(_BYTE *)(a1 + 320) = *(_BYTE *)(a2 + 320);
    goto LABEL_44;
  }
  v65 = *(unsigned __int8 *)(a2 + 320);
  if (v65 > 0xFB)
  {
    v66 = type metadata accessor for TypedVectorizedProperties.SymbolSizeMapper(0, *(_QWORD *)(a3 + 16), a3, a4);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v66 - 8) + 8))(a1 + 272, v66);
    goto LABEL_38;
  }
  v72 = *(_QWORD *)(a1 + 272);
  v73 = *(_QWORD *)(a1 + 280);
  v74 = *(_QWORD *)(a1 + 288);
  v75 = *(_QWORD *)(a1 + 296);
  v76 = *(_QWORD *)(a1 + 304);
  v77 = *(_QWORD *)(a1 + 312);
  v78 = *(_OWORD *)(a2 + 288);
  *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
  *(_OWORD *)(a1 + 288) = v78;
  *(_OWORD *)(a1 + 304) = *(_OWORD *)(a2 + 304);
  *(_BYTE *)(a1 + 320) = v65;
  sub_214280EA8(v72, v73, v74, v75, v76, v77, v64, (void (*)(void))sub_21422F7F0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_214285A58, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_214285A58);
LABEL_44:
  v79 = *(_QWORD *)(a1 + 376);
  if (v79 == 1)
  {
LABEL_47:
    v82 = *(_OWORD *)(a2 + 440);
    *(_OWORD *)(a1 + 424) = *(_OWORD *)(a2 + 424);
    *(_OWORD *)(a1 + 440) = v82;
    *(_BYTE *)(a1 + 456) = *(_BYTE *)(a2 + 456);
    v83 = *(_OWORD *)(a2 + 376);
    *(_OWORD *)(a1 + 360) = *(_OWORD *)(a2 + 360);
    *(_OWORD *)(a1 + 376) = v83;
    v84 = *(_OWORD *)(a2 + 408);
    *(_OWORD *)(a1 + 392) = *(_OWORD *)(a2 + 392);
    *(_OWORD *)(a1 + 408) = v84;
    v85 = *(_OWORD *)(a2 + 344);
    *(_OWORD *)(a1 + 328) = *(_OWORD *)(a2 + 328);
    *(_OWORD *)(a1 + 344) = v85;
    goto LABEL_57;
  }
  v80 = *(_QWORD *)(a2 + 376);
  if (v80 == 1)
  {
    v81 = type metadata accessor for TypedVectorizedProperties.Position(0, *(_QWORD *)(a3 + 16), a3, a4);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v81 - 8) + 8))(a1 + 328, v81);
    goto LABEL_47;
  }
  *(_BYTE *)(a1 + 328) = *(_BYTE *)(a2 + 328);
  *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
  *(_BYTE *)(a1 + 344) = *(_BYTE *)(a2 + 344);
  if (!v79)
    goto LABEL_55;
  if (!v80)
  {
    sub_21420D798(a1 + 352);
LABEL_55:
    v93 = *(_OWORD *)(a2 + 368);
    *(_OWORD *)(a1 + 352) = *(_OWORD *)(a2 + 352);
    *(_OWORD *)(a1 + 368) = v93;
    goto LABEL_56;
  }
  v86 = *(_BYTE *)(a2 + 368);
  v87 = *(_QWORD *)(a1 + 352);
  v88 = *(_QWORD *)(a1 + 360);
  v89 = *v63;
  *(_OWORD *)(a1 + 352) = *(_OWORD *)(a2 + 352);
  *v63 = v86;
  sub_2141ED0BC(v87, v88, v89);
  *(_QWORD *)(a1 + 376) = *(_QWORD *)(a2 + 376);
  swift_bridgeObjectRelease();
LABEL_56:
  v94 = *(_QWORD *)(a2 + 448);
  v95 = *(_BYTE *)(a2 + 456);
  v96 = *(_QWORD *)(a1 + 384);
  v97 = *(_QWORD *)(a1 + 392);
  v98 = *(_QWORD *)(a1 + 400);
  v99 = *(_QWORD *)(a1 + 408);
  v100 = *(_QWORD *)(a1 + 416);
  v101 = *(_QWORD *)(a1 + 424);
  v102 = *(_QWORD *)(a1 + 432);
  v103 = *(_QWORD *)(a1 + 440);
  v104 = *(_QWORD *)(a1 + 448);
  v105 = *(_BYTE *)(a1 + 456);
  v106 = *(_OWORD *)(a2 + 400);
  *(_OWORD *)(a1 + 384) = *(_OWORD *)(a2 + 384);
  *(_OWORD *)(a1 + 400) = v106;
  v107 = *(_OWORD *)(a2 + 432);
  *(_OWORD *)(a1 + 416) = *(_OWORD *)(a2 + 416);
  *(_OWORD *)(a1 + 432) = v107;
  *(_QWORD *)(a1 + 448) = v94;
  *(_BYTE *)(a1 + 456) = v95;
  sub_214273B84(v96, v97, v98, v99, v100, v101, v102, v103, v104, v105);
LABEL_57:
  v108 = (_OWORD *)(a1 + 464);
  v109 = (_OWORD *)(a2 + 464);
  v110 = *(_QWORD *)(a1 + 488);
  if (v110 == 1)
  {
LABEL_60:
    v113 = *(_OWORD *)(a2 + 480);
    *v108 = *v109;
    *(_OWORD *)(a1 + 480) = v113;
    *(_OWORD *)(a1 + 496) = *(_OWORD *)(a2 + 496);
    *(_BYTE *)(a1 + 512) = *(_BYTE *)(a2 + 512);
    goto LABEL_67;
  }
  v111 = *(_QWORD *)(a2 + 488);
  if (v111 == 1)
  {
    v112 = type metadata accessor for VisualMapper(0, *(_QWORD *)(a3 + 16), MEMORY[0x24BEE0D00], a4);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v112 - 8) + 8))(a1 + 464, v112);
    goto LABEL_60;
  }
  if (!v110)
    goto LABEL_65;
  if (!v111)
  {
    sub_21420D798(a1 + 464);
LABEL_65:
    v118 = *(_OWORD *)(a2 + 480);
    *v108 = *v109;
    *(_OWORD *)(a1 + 480) = v118;
    goto LABEL_66;
  }
  v114 = *(_BYTE *)(a2 + 480);
  v115 = *(_QWORD *)(a1 + 464);
  v116 = *(_QWORD *)(a1 + 472);
  v117 = *(_BYTE *)(a1 + 480);
  *(_OWORD *)(a1 + 464) = *(_OWORD *)(a2 + 464);
  *(_BYTE *)(a1 + 480) = v114;
  sub_2141ED0BC(v115, v116, v117);
  *(_QWORD *)(a1 + 488) = *(_QWORD *)(a2 + 488);
  swift_bridgeObjectRelease();
LABEL_66:
  v119 = *(_BYTE *)(a2 + 512);
  v120 = *(_QWORD *)(a1 + 496);
  v121 = *(_QWORD *)(a1 + 504);
  *(_OWORD *)(a1 + 496) = *(_OWORD *)(a2 + 496);
  v122 = *(_BYTE *)(a1 + 512);
  *(_BYTE *)(a1 + 512) = v119;
  sub_21427429C(v120, v121, v122);
LABEL_67:
  v123 = (_OWORD *)(a1 + 520);
  v124 = (_OWORD *)(a2 + 520);
  v125 = *(_QWORD *)(a1 + 544);
  if (v125 == 1)
  {
LABEL_70:
    v128 = *(_OWORD *)(a2 + 536);
    *v123 = *v124;
    *(_OWORD *)(a1 + 536) = v128;
    *(_OWORD *)(a1 + 552) = *(_OWORD *)(a2 + 552);
    *(_BYTE *)(a1 + 568) = *(_BYTE *)(a2 + 568);
    goto LABEL_77;
  }
  v126 = *(_QWORD *)(a2 + 544);
  if (v126 == 1)
  {
    v127 = type metadata accessor for VisualMapper(0, *(_QWORD *)(a3 + 16), MEMORY[0x24BEE1328], a4);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v127 - 8) + 8))(a1 + 520, v127);
    goto LABEL_70;
  }
  if (!v125)
    goto LABEL_75;
  if (!v126)
  {
    sub_21420D798(a1 + 520);
LABEL_75:
    v133 = *(_OWORD *)(a2 + 536);
    *v123 = *v124;
    *(_OWORD *)(a1 + 536) = v133;
    goto LABEL_76;
  }
  v129 = *(_BYTE *)(a2 + 536);
  v130 = *(_QWORD *)(a1 + 520);
  v131 = *(_QWORD *)(a1 + 528);
  v132 = *(_BYTE *)(a1 + 536);
  *(_OWORD *)(a1 + 520) = *(_OWORD *)(a2 + 520);
  *(_BYTE *)(a1 + 536) = v129;
  sub_2141ED0BC(v130, v131, v132);
  *(_QWORD *)(a1 + 544) = *(_QWORD *)(a2 + 544);
  swift_bridgeObjectRelease();
LABEL_76:
  v134 = *(_BYTE *)(a2 + 568);
  v135 = *(_QWORD *)(a1 + 552);
  v136 = *(_QWORD *)(a1 + 560);
  *(_OWORD *)(a1 + 552) = *(_OWORD *)(a2 + 552);
  v137 = *(_BYTE *)(a1 + 568);
  *(_BYTE *)(a1 + 568) = v134;
  sub_214274588(v135, v136, v137);
LABEL_77:
  v138 = (_OWORD *)(a1 + 576);
  v139 = (_OWORD *)(a2 + 576);
  v140 = *(_QWORD *)(a1 + 600);
  if (v140 == 1)
  {
LABEL_80:
    v143 = *(_OWORD *)(a2 + 624);
    *(_OWORD *)(a1 + 608) = *(_OWORD *)(a2 + 608);
    *(_OWORD *)(a1 + 624) = v143;
    *(_BYTE *)(a1 + 640) = *(_BYTE *)(a2 + 640);
    v144 = *(_OWORD *)(a2 + 592);
    *v138 = *v139;
    *(_OWORD *)(a1 + 592) = v144;
    goto LABEL_87;
  }
  v141 = *(_QWORD *)(a2 + 600);
  if (v141 == 1)
  {
    v142 = type metadata accessor for VisualMapper(0, *(_QWORD *)(a3 + 16), MEMORY[0x24BDF1FA8], a4);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v142 - 8) + 8))(a1 + 576, v142);
    goto LABEL_80;
  }
  if (!v140)
    goto LABEL_85;
  if (!v141)
  {
    sub_21420D798(a1 + 576);
LABEL_85:
    v149 = *(_OWORD *)(a2 + 592);
    *v138 = *v139;
    *(_OWORD *)(a1 + 592) = v149;
    goto LABEL_86;
  }
  v145 = *(_BYTE *)(a2 + 592);
  v146 = *(_QWORD *)(a1 + 576);
  v147 = *(_QWORD *)(a1 + 584);
  v148 = *(_BYTE *)(a1 + 592);
  *(_OWORD *)(a1 + 576) = *(_OWORD *)(a2 + 576);
  *(_BYTE *)(a1 + 592) = v145;
  sub_2141ED0BC(v146, v147, v148);
  *(_QWORD *)(a1 + 600) = *(_QWORD *)(a2 + 600);
  swift_bridgeObjectRelease();
LABEL_86:
  v150 = *(_BYTE *)(a2 + 640);
  v151 = *(_QWORD *)(a1 + 608);
  v152 = *(_QWORD *)(a1 + 616);
  v153 = *(_QWORD *)(a1 + 624);
  v154 = *(_QWORD *)(a1 + 632);
  v155 = *(_OWORD *)(a2 + 624);
  *(_OWORD *)(a1 + 608) = *(_OWORD *)(a2 + 608);
  *(_OWORD *)(a1 + 624) = v155;
  v156 = *(_BYTE *)(a1 + 640);
  *(_BYTE *)(a1 + 640) = v150;
  sub_214274208(v151, v152, v153, v154, v156);
LABEL_87:
  v157 = (_OWORD *)(a1 + 648);
  v158 = (_OWORD *)(a2 + 648);
  v159 = *(_QWORD *)(a1 + 672);
  if (v159 != 1)
  {
    v160 = *(_QWORD *)(a2 + 672);
    if (v160 == 1)
    {
      v161 = type metadata accessor for VisualMapper(0, *(_QWORD *)(a3 + 16), MEMORY[0x24BDF1FA8], a4);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v161 - 8) + 8))(a1 + 648, v161);
      goto LABEL_90;
    }
    if (v159)
    {
      if (v160)
      {
        v164 = *(_BYTE *)(a2 + 664);
        v165 = *(_QWORD *)(a1 + 648);
        v166 = *(_QWORD *)(a1 + 656);
        v167 = *(_BYTE *)(a1 + 664);
        *v157 = *v158;
        *(_BYTE *)(a1 + 664) = v164;
        sub_2141ED0BC(v165, v166, v167);
        *(_QWORD *)(a1 + 672) = *(_QWORD *)(a2 + 672);
        swift_bridgeObjectRelease();
LABEL_96:
        v169 = *(_BYTE *)(a2 + 712);
        v170 = *(_QWORD *)(a1 + 680);
        v171 = *(_QWORD *)(a1 + 688);
        v172 = *(_QWORD *)(a1 + 696);
        v173 = *(_QWORD *)(a1 + 704);
        v174 = *(_OWORD *)(a2 + 696);
        *(_OWORD *)(a1 + 680) = *(_OWORD *)(a2 + 680);
        *(_OWORD *)(a1 + 696) = v174;
        v175 = *(_BYTE *)(a1 + 712);
        *(_BYTE *)(a1 + 712) = v169;
        sub_214274208(v170, v171, v172, v173, v175);
        return a1;
      }
      sub_21420D798(a1 + 648);
    }
    v168 = *(_OWORD *)(a2 + 664);
    *v157 = *v158;
    *(_OWORD *)(a1 + 664) = v168;
    goto LABEL_96;
  }
LABEL_90:
  v162 = *(_OWORD *)(a2 + 696);
  *(_OWORD *)(a1 + 680) = *(_OWORD *)(a2 + 680);
  *(_OWORD *)(a1 + 696) = v162;
  *(_BYTE *)(a1 + 712) = *(_BYTE *)(a2 + 712);
  v163 = *(_OWORD *)(a2 + 664);
  *v157 = *v158;
  *(_OWORD *)(a1 + 664) = v163;
  return a1;
}

uint64_t sub_214285238(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;
  BOOL v5;
  int v6;

  if (!a2)
    return 0;
  if (a2 > 0x7FFFFFFD && *(_BYTE *)(a1 + 713))
    return (*(_DWORD *)a1 + 2147483646);
  v3 = *(_QWORD *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  v5 = __OFSUB__(v4, 1);
  v6 = v4 - 1;
  if (v6 < 0 != v5)
    v6 = -1;
  return (v6 + 1);
}

uint64_t sub_21428529C(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 712) = 0;
    *(_OWORD *)(result + 696) = 0u;
    *(_OWORD *)(result + 680) = 0u;
    *(_OWORD *)(result + 664) = 0u;
    *(_OWORD *)(result + 648) = 0u;
    *(_OWORD *)(result + 632) = 0u;
    *(_OWORD *)(result + 616) = 0u;
    *(_OWORD *)(result + 600) = 0u;
    *(_OWORD *)(result + 584) = 0u;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 - 2147483646;
    if (a3 > 0x7FFFFFFD)
      *(_BYTE *)(result + 713) = 1;
  }
  else
  {
    if (a3 > 0x7FFFFFFD)
      *(_BYTE *)(result + 713) = 0;
    if (a2)
      *(_QWORD *)(result + 24) = a2 + 1;
  }
  return result;
}

uint64_t sub_2142853A8(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 48))
  {
    sub_2141ED0BC(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
    swift_bridgeObjectRelease();
  }
  return sub_214273B84(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_BYTE *)(a1 + 128));
}

uint64_t sub_21428540C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v19;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 48);
  if (v4)
  {
    v5 = *(_QWORD *)(a2 + 24);
    v6 = *(_QWORD *)(a2 + 32);
    v7 = *(_BYTE *)(a2 + 40);
    sub_2141DD130(v5, v6, v7);
    *(_QWORD *)(a1 + 24) = v5;
    *(_QWORD *)(a1 + 32) = v6;
    *(_BYTE *)(a1 + 40) = v7;
    *(_QWORD *)(a1 + 48) = v4;
    swift_bridgeObjectRetain();
  }
  else
  {
    v8 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 40) = v8;
  }
  v9 = *(_QWORD *)(a2 + 56);
  v10 = *(_QWORD *)(a2 + 64);
  v11 = *(_QWORD *)(a2 + 72);
  v12 = *(_QWORD *)(a2 + 80);
  v13 = *(_QWORD *)(a2 + 88);
  v14 = *(_QWORD *)(a2 + 96);
  v15 = *(_QWORD *)(a2 + 104);
  v16 = *(_QWORD *)(a2 + 112);
  v19 = *(_QWORD *)(a2 + 120);
  v17 = *(_BYTE *)(a2 + 128);
  sub_214282BFC(v9, v10, v11, v12, v13, v14, v15, v16, v19, v17);
  *(_QWORD *)(a1 + 56) = v9;
  *(_QWORD *)(a1 + 64) = v10;
  *(_QWORD *)(a1 + 72) = v11;
  *(_QWORD *)(a1 + 80) = v12;
  *(_QWORD *)(a1 + 88) = v13;
  *(_QWORD *)(a1 + 96) = v14;
  *(_QWORD *)(a1 + 104) = v15;
  *(_QWORD *)(a1 + 112) = v16;
  *(_QWORD *)(a1 + 120) = v19;
  *(_BYTE *)(a1 + 128) = v17;
  return a1;
}

uint64_t sub_21428551C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _OWORD *v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v39;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  v5 = (_OWORD *)(a1 + 24);
  v6 = (_OWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 48);
  if (*(_QWORD *)(a1 + 48))
  {
    if (v7)
    {
      v8 = *(_QWORD *)(a2 + 24);
      v9 = *(_QWORD *)(a2 + 32);
      v10 = *(_BYTE *)(a2 + 40);
      sub_2141DD130(v8, v9, v10);
      v11 = *(_QWORD *)(a1 + 24);
      v12 = *(_QWORD *)(a1 + 32);
      v13 = *(_BYTE *)(a1 + 40);
      *(_QWORD *)(a1 + 24) = v8;
      *(_QWORD *)(a1 + 32) = v9;
      *(_BYTE *)(a1 + 40) = v10;
      sub_2141ED0BC(v11, v12, v13);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_21420D798(a1 + 24);
      v17 = v6[1];
      *v5 = *v6;
      v5[1] = v17;
    }
  }
  else if (v7)
  {
    v14 = *(_QWORD *)(a2 + 24);
    v15 = *(_QWORD *)(a2 + 32);
    v16 = *(_BYTE *)(a2 + 40);
    sub_2141DD130(v14, v15, v16);
    *(_QWORD *)(a1 + 24) = v14;
    *(_QWORD *)(a1 + 32) = v15;
    *(_BYTE *)(a1 + 40) = v16;
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    swift_bridgeObjectRetain();
  }
  else
  {
    v18 = *(_OWORD *)(a2 + 40);
    *v5 = *v6;
    *(_OWORD *)(a1 + 40) = v18;
  }
  v19 = *(_QWORD *)(a2 + 56);
  v20 = *(_QWORD *)(a2 + 64);
  v21 = *(_QWORD *)(a2 + 72);
  v22 = *(_QWORD *)(a2 + 80);
  v23 = *(_QWORD *)(a2 + 88);
  v24 = *(_QWORD *)(a2 + 96);
  v25 = *(_QWORD *)(a2 + 104);
  v26 = *(_QWORD *)(a2 + 112);
  v39 = *(_QWORD *)(a2 + 120);
  v27 = *(_BYTE *)(a2 + 128);
  sub_214282BFC(v19, v20, v21, v22, v23, v24, v25, v26, v39, v27);
  v28 = *(_QWORD *)(a1 + 56);
  v29 = *(_QWORD *)(a1 + 64);
  v30 = *(_QWORD *)(a1 + 72);
  v31 = *(_QWORD *)(a1 + 80);
  v32 = *(_QWORD *)(a1 + 88);
  v33 = *(_QWORD *)(a1 + 96);
  v34 = *(_QWORD *)(a1 + 104);
  v35 = *(_QWORD *)(a1 + 112);
  v36 = *(_QWORD *)(a1 + 120);
  v37 = *(_BYTE *)(a1 + 128);
  *(_QWORD *)(a1 + 56) = v19;
  *(_QWORD *)(a1 + 64) = v20;
  *(_QWORD *)(a1 + 72) = v21;
  *(_QWORD *)(a1 + 80) = v22;
  *(_QWORD *)(a1 + 88) = v23;
  *(_QWORD *)(a1 + 96) = v24;
  *(_QWORD *)(a1 + 104) = v25;
  *(_QWORD *)(a1 + 112) = v26;
  *(_QWORD *)(a1 + 120) = v39;
  *(_BYTE *)(a1 + 128) = v27;
  sub_214273B84(v28, v29, v30, v31, v32, v33, v34, v35, v36, v37);
  return a1;
}

__n128 sub_2142856B8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  result = *(__n128 *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 80) = result;
  return result;
}

uint64_t sub_2142856EC(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  _OWORD *v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  __int128 v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v4 = (_OWORD *)(a1 + 24);
  v5 = (_OWORD *)(a2 + 24);
  if (!*(_QWORD *)(a1 + 48))
    goto LABEL_5;
  v6 = *(_QWORD *)(a2 + 48);
  if (!v6)
  {
    sub_21420D798(a1 + 24);
LABEL_5:
    v11 = v5[1];
    *v4 = *v5;
    v4[1] = v11;
    goto LABEL_6;
  }
  v7 = *(_BYTE *)(a2 + 40);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_BYTE *)(a1 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 40) = v7;
  sub_2141ED0BC(v8, v9, v10);
  *(_QWORD *)(a1 + 48) = v6;
  swift_bridgeObjectRelease();
LABEL_6:
  v12 = *(_QWORD *)(a2 + 120);
  v13 = *(_BYTE *)(a2 + 128);
  v14 = *(_QWORD *)(a1 + 56);
  v15 = *(_QWORD *)(a1 + 64);
  v16 = *(_QWORD *)(a1 + 72);
  v17 = *(_QWORD *)(a1 + 80);
  v18 = *(_QWORD *)(a1 + 88);
  v19 = *(_QWORD *)(a1 + 96);
  v20 = *(_QWORD *)(a1 + 104);
  v21 = *(_QWORD *)(a1 + 112);
  v22 = *(_QWORD *)(a1 + 120);
  v23 = *(_BYTE *)(a1 + 128);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 120) = v12;
  *(_BYTE *)(a1 + 128) = v13;
  sub_214273B84(v14, v15, v16, v17, v18, v19, v20, v21, v22, v23);
  return a1;
}

uint64_t sub_2142857E8(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 129))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 48);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t sub_214285844(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 120) = 0;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 128) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 129) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 129) = 0;
    if (a2)
      *(_QWORD *)(result + 48) = a2;
  }
  return result;
}

uint64_t sub_2142858BC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;

  v3 = *(_QWORD *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  sub_2142625F8(*(_QWORD *)a2, v4);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return a1;
}

uint64_t sub_214285900(uint64_t a1)
{
  return sub_2142637C0(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
}

uint64_t sub_214285910(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;

  v3 = *(_QWORD *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  sub_2142625F8(*(_QWORD *)a2, v4);
  v5 = *(_QWORD *)a1;
  v6 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  sub_2142637C0(v5, v6);
  return a1;
}

uint64_t sub_214285960(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;

  v3 = *a2;
  v4 = *((_BYTE *)a2 + 8);
  v5 = *(_QWORD *)a1;
  v6 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  sub_2142637C0(v5, v6);
  return a1;
}

uint64_t sub_21428599C(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t sub_2142859E4(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

uint64_t sub_214285A28(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t sub_214285A30(uint64_t result, char a2)
{
  *(_BYTE *)(result + 8) = a2 & 1;
  return result;
}

uint64_t type metadata accessor for DimensionMapper.Mapping(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2141D8E88(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DimensionMapper.Mapping);
}

uint64_t AreaPlot<A>.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2142D7304(v2, v4, (uint64_t)v7);
  sub_2142D6BB0((uint64_t)v7, v4, a2);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_214285AFC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return AreaPlot<A>.body.getter(a1, a2);
}

uint64_t AreaPlot.init<A, B, C>(_:x:y:stacking:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v46 = a8;
  v56 = a4;
  v60 = a2;
  v61 = a3;
  v59 = a1;
  v57 = a9;
  v49 = a6;
  v50 = a10;
  v52 = a7;
  v53 = a11;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v48 = type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, a7, a11);
  v15 = *(_QWORD *)(v48 - 8);
  v16 = *(_QWORD *)(v15 + 64);
  MEMORY[0x24BDAC7A8](v48);
  v58 = (char *)&v44 - v17;
  v18 = type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, a6, a10);
  v19 = *(_QWORD *)(v18 - 8);
  v44 = v18;
  v20 = *(_QWORD *)(v19 + 64);
  v21 = MEMORY[0x24BDAC7A8](v18);
  v23 = (char *)&v44 - v22;
  v51 = *(_QWORD *)(a5 - 8);
  v24 = v51;
  MEMORY[0x24BDAC7A8](v21);
  v26 = (char *)&v44 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = v26;
  v27 = v46;
  v29 = type metadata accessor for VectorizedAreaPlotContent(0, a5, v46, v28);
  v30 = *(_QWORD *)(v29 - 8);
  v54 = v29;
  v55 = v30;
  MEMORY[0x24BDAC7A8](v29);
  v47 = (uint64_t)&v44 - v31;
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v26, v59, a5);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v23, v60, v18);
  v32 = v48;
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v58, v61, v48);
  v33 = (*(unsigned __int8 *)(v19 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v34 = (v20 + *(unsigned __int8 *)(v15 + 80) + v33) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  v35 = v34 + v16;
  v36 = (char *)swift_allocObject();
  v37 = v49;
  *((_QWORD *)v36 + 2) = a5;
  *((_QWORD *)v36 + 3) = v37;
  *((_QWORD *)v36 + 4) = v52;
  *((_QWORD *)v36 + 5) = v27;
  v38 = v53;
  *((_QWORD *)v36 + 6) = v50;
  *((_QWORD *)v36 + 7) = v38;
  v39 = v23;
  v40 = v44;
  (*(void (**)(char *, char *, uint64_t))(v19 + 32))(&v36[v33], v39, v44);
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(&v36[v34], v58, v32);
  v36[v35] = v56;
  v41 = v47;
  sub_2142868CC((uint64_t)v45, (uint64_t)sub_21428645C, (uint64_t)v36, a5, (uint64_t)&type metadata for AreaMark, v27, (uint64_t)&protocol witness table for AreaMark, v47);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v61, v32);
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v60, v40);
  (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v59, a5);
  v42 = v54;
  MEMORY[0x2199CD934](&protocol conformance descriptor for VectorizedAreaPlotContent<A>, v54);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v55 + 32))(v57, v41, v42);
}

uint64_t type metadata accessor for VectorizedAreaPlotContent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2141D8E88(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for VectorizedAreaPlotContent);
}

void *sub_214285E14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X5>, uint64_t a6@<X6>, void *a7@<X8>, uint64_t a8, uint64_t a9)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  void (*v30)(char *, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  void *v53;
  _BYTE v54[320];

  v45 = a6;
  v52 = a4;
  v50 = a2;
  v51 = a3;
  v48 = a1;
  v53 = a7;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v46 = a9;
  v49 = type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, a6, a9);
  v47 = *(_QWORD *)(v49 - 8);
  MEMORY[0x24BDAC7A8](v49);
  v44 = (char *)&v40 - v12;
  v14 = type metadata accessor for PlottableValue(0, a6, a9, v13);
  MEMORY[0x24BDAC7A8](v14);
  v42 = a8;
  v43 = (uint64_t)&v40 - v15;
  v16 = a5;
  v17 = type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, a5, a8);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = MEMORY[0x24BDAC7A8](v17);
  v21 = (char *)&v40 - v20;
  v22 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](v19);
  v24 = (char *)&v40 - v23;
  v25 = v16;
  v41 = v16;
  v27 = type metadata accessor for PlottableValue(0, v16, a8, v26);
  MEMORY[0x24BDAC7A8](v27);
  v29 = (char *)&v40 - v28;
  v30 = *(void (**)(char *, uint64_t, uint64_t))(v22 + 16);
  v31 = v48;
  v30(v24, v48, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v21, v50, v17);
  v32 = v25;
  v33 = v42;
  sub_214270F68((uint64_t)v24, (uint64_t)v21, v32, AssociatedTypeWitness, v42, (uint64_t)v29);
  v30(v24, v31, AssociatedTypeWitness);
  v34 = v44;
  (*(void (**)(char *, uint64_t, uint64_t))(v47 + 16))(v44, v51, v49);
  v35 = v43;
  v36 = (uint64_t)v34;
  v37 = v45;
  v38 = v46;
  sub_214270F68((uint64_t)v24, v36, v45, AssociatedTypeWitness, v46, v43);
  AreaMark.init<A, B>(x:y:stacking:)((uint64_t)v29, v35, v52, v41, v37, v33, v38, v54);
  return memcpy(v53, v54, 0x131uLL);
}

uint64_t sub_2142860B0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  void (*v14)(char *, uint64_t);
  uint64_t TupleTypeMetadata2;
  uint64_t v16;
  uint64_t v17;
  uint64_t TupleTypeMetadata3;
  char *v19;
  void (*v20)(char *, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v1 = v0[3];
  v2 = v0[4];
  v4 = v0[6];
  v3 = v0[7];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, v1, v4);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = (*(unsigned __int8 *)(v7 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v7 + 64);
  v10 = type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, v2, v3);
  v11 = (v8 + v9 + *(unsigned __int8 *)(*(_QWORD *)(v10 - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v10 - 8) + 80);
  v12 = (char *)v0 + v8;
  sub_2141ED0BC(*(_QWORD *)v12, *((_QWORD *)v12 + 1), v12[16]);
  swift_bridgeObjectRelease();
  v13 = &v12[*(int *)(v6 + 44)];
  type metadata accessor for PlottableProjection.Storage(0, AssociatedTypeWitness, v1, v4);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v13, v1);
      break;
    case 1u:
      v14 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v1 - 8) + 8);
      v14(v13, v1);
      TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
      v14(&v13[*(int *)(TupleTypeMetadata2 + 48)], v1);
      break;
    case 2u:
      swift_release();
      break;
    case 3u:
      swift_release();
      swift_release();
      break;
    case 4u:
      swift_release();
      sub_2144258E0();
      v16 = sub_214423C48();
      v17 = sub_214423C54();
      TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(&v13[*(int *)(TupleTypeMetadata3 + 48)], v16);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(&v13[*(int *)(TupleTypeMetadata3 + 64)], v17);
      break;
    default:
      break;
  }
  sub_2141ED0BC(*(_QWORD *)((char *)v0 + v11), *(_QWORD *)((char *)v0 + v11 + 8), *((_BYTE *)v0 + v11 + 16));
  swift_bridgeObjectRelease();
  v19 = (char *)v0 + v11 + *(int *)(v10 + 44);
  type metadata accessor for PlottableProjection.Storage(0, AssociatedTypeWitness, v2, v3);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v19, v2);
      break;
    case 1u:
      v20 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8);
      v20(v19, v2);
      v21 = swift_getTupleTypeMetadata2();
      v20(&v19[*(int *)(v21 + 48)], v2);
      break;
    case 2u:
      swift_release();
      break;
    case 3u:
      swift_release();
      swift_release();
      break;
    case 4u:
      swift_release();
      sub_2144258E0();
      v22 = sub_214423C48();
      v23 = sub_214423C54();
      v24 = swift_getTupleTypeMetadata3();
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(&v19[*(int *)(v24 + 48)], v22);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v23 - 8) + 8))(&v19[*(int *)(v24 + 64)], v23);
      break;
    default:
      return swift_deallocObject();
  }
  return swift_deallocObject();
}

void *sub_21428645C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v3 = v2[3];
  v4 = v2[4];
  v5 = v2[6];
  v6 = v2[7];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, v3, v5) - 8);
  v9 = (*(unsigned __int8 *)(v8 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v10 = *(_QWORD *)(v8 + 64);
  v11 = *(_QWORD *)(type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, v4, v6) - 8);
  v12 = (v9 + v10 + *(unsigned __int8 *)(v11 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  return sub_214285E14(a1, (uint64_t)v2 + v9, (uint64_t)v2 + v12, *((unsigned __int8 *)v2 + v12 + *(_QWORD *)(v11 + 64)), v3, v4, a2, v5, v6);
}

void *sub_214286558@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, void *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD __src[39];
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  _UNKNOWN **v40;
  char v41;
  __int16 v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  _BYTE v49[144];
  _BYTE v50[152];

  v7 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v8 = *(_BYTE *)(a1 + 16);
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(unsigned __int8 *)(a1 + 48);
  if (v10 == 1)
  {
    v26 = *(_QWORD *)(a1 + 40);
    v27 = 0x80;
  }
  else
  {
    v26 = 0;
    v27 = 0;
  }
  v28 = *(_QWORD *)(a1 + 32);
  sub_2141DD130(v7, v6, v8);
  swift_bridgeObjectRetain();
  v12 = *(_QWORD *)a2;
  v11 = *(_QWORD *)(a2 + 8);
  v13 = *(_BYTE *)(a2 + 16);
  v14 = v8;
  v15 = v9;
  v16 = *(_QWORD *)(a2 + 24);
  v29 = *(_QWORD *)(a2 + 32);
  if ((*(_BYTE *)(a2 + 48) & 1) != 0)
  {
    v22 = v7;
    v23 = v15;
    v17 = *(_QWORD *)(a2 + 40);
    v18 = v14;
    sub_2141DD130(v12, v11, v13);
    swift_bridgeObjectRetain();
    if (v10)
    {
      sub_21428F944(a2);
      sub_21428F944(a1);
      v32 = v22;
      v33 = v6;
      v34 = v18;
      v35 = v23;
      v36 = v28;
      v37 = v26;
      v38 = v27;
      v19 = MEMORY[0x24BEE13C8];
      v39 = MEMORY[0x24BEE13C8];
      v40 = &protocol witness table for Double;
      sub_21428F980((uint64_t)&v32);
    }
    else
    {
      sub_2141EF1B0(v28, v26, v27);
      sub_21428F944(a2);
      sub_21428F944(a1);
      v32 = v22;
      v33 = v6;
      v34 = v18;
      v35 = v23;
      v36 = v28;
      v37 = v26;
      v38 = v27;
      v19 = MEMORY[0x24BEE13C8];
      v39 = MEMORY[0x24BEE13C8];
      v40 = &protocol witness table for Double;
      v41 = a3;
      v42 = 256;
      v43 = v29;
      v44 = v17;
      v45 = 0x80;
      v47 = 0;
      v46 = 0;
      v48 = -4;
      sub_2141EFEF4((uint64_t)&v32);
    }
    __src[0] = v12;
    __src[1] = v11;
    LOBYTE(__src[2]) = v13;
    __src[3] = v16;
    __src[4] = v29;
    __src[5] = v17;
    LOBYTE(__src[6]) = 0x80;
    __src[7] = v19;
    __src[8] = &protocol witness table for Double;
    sub_21428F980((uint64_t)__src);
  }
  else
  {
    v24 = v14;
    sub_2141DD130(v12, v11, v13);
    swift_bridgeObjectRetain();
    sub_2141DD140(v28, v26, v27);
    sub_21428F944(a2);
    sub_21428F944(a1);
    v32 = v7;
    v33 = v6;
    v34 = v24;
    v35 = v15;
    v36 = v28;
    v37 = v26;
    v38 = v27;
    v20 = MEMORY[0x24BEE13C8];
    v39 = MEMORY[0x24BEE13C8];
    v40 = &protocol witness table for Double;
    sub_21428F980((uint64_t)&v32);
    __src[0] = v12;
    __src[1] = v11;
    LOBYTE(__src[2]) = v13;
    __src[3] = v16;
    __src[4] = v29;
    __src[5] = 0;
    LOBYTE(__src[6]) = 0;
    __src[7] = v20;
    __src[8] = &protocol witness table for Double;
    LOBYTE(__src[9]) = a3;
    *(_WORD *)((char *)&__src[9] + 1) = 257;
    __src[10] = v28;
    __src[11] = v26;
    LOBYTE(__src[12]) = v27;
    __src[13] = 0;
    __src[14] = 0;
    LOBYTE(__src[15]) = -4;
    sub_2141EFEF4((uint64_t)__src);
  }
  sub_2141EDFD8((uint64_t)__src, (uint64_t)v49);
  sub_2141EDFD8((uint64_t)&v32, (uint64_t)v50);
  sub_2141EDFD8((uint64_t)v50, (uint64_t)__src);
  sub_2141EDFD8((uint64_t)v49, (uint64_t)&__src[18]);
  __src[36] = 0;
  __src[37] = 0;
  LOBYTE(__src[38]) = -1;
  return memcpy(a4, __src, 0x131uLL);
}

uint64_t sub_2142868CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v24 = a5;
  v25 = a7;
  v26 = a8;
  v13 = *(_QWORD *)(a4 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v15 = (char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for Vectorizer(0, v16, v17, v16);
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)&v23 - v20;
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a1, a4);
  sub_2142713FC((uint64_t)v15, a2, a3, a4, v24, a6, v25, (uint64_t)v21);
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a1, a4);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v19 + 32))(v26, v21, v18);
}

uint64_t AreaPlot.init<A, B, C>(_:xStart:xEnd:y:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  void (*v32)(char *, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  void (*v44)(char *, char *, uint64_t);
  uint64_t v45;
  uint64_t v46;
  void (*v47)(uint64_t, uint64_t);
  uint64_t v48;
  char *v50;
  char *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;

  v68 = a4;
  v69 = a3;
  v70 = a2;
  v67 = a1;
  v64 = a9;
  v57 = a6;
  v58 = a10;
  v60 = a7;
  v61 = a11;
  v52 = a8;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v16 = type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, a7, a11);
  v55 = *(_QWORD *)(v16 - 8);
  v56 = v16;
  MEMORY[0x24BDAC7A8](v16);
  v66 = (char *)&v50 - v17;
  v18 = type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, a6, a10);
  v65 = *(_QWORD **)(v18 - 8);
  v19 = v65[8];
  v20 = MEMORY[0x24BDAC7A8](v18);
  v51 = (char *)&v50 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = MEMORY[0x24BDAC7A8](v20);
  v23 = (char *)&v50 - v22;
  v50 = (char *)&v50 - v22;
  v59 = *(_QWORD *)(a5 - 8);
  v24 = v59;
  MEMORY[0x24BDAC7A8](v21);
  v26 = (char *)&v50 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = v26;
  v28 = type metadata accessor for VectorizedAreaPlotContent(0, a5, a8, v27);
  v29 = *(_QWORD *)(v28 - 8);
  v62 = v28;
  v63 = v29;
  MEMORY[0x24BDAC7A8](v28);
  v54 = (uint64_t)&v50 - v30;
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v26, v67, a5);
  v31 = v65;
  v32 = (void (*)(char *, uint64_t, uint64_t))v65[2];
  v32(v23, v70, v18);
  v32((char *)&v50 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0), v69, v18);
  v34 = v55;
  v33 = v56;
  (*(void (**)(char *, uint64_t, uint64_t))(v55 + 16))(v66, v68, v56);
  v35 = *((unsigned __int8 *)v31 + 80);
  v36 = (v35 + 64) & ~v35;
  v37 = (v19 + v35 + v36) & ~v35;
  v38 = (v19 + *(unsigned __int8 *)(v34 + 80) + v37) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80);
  v39 = (char *)swift_allocObject();
  v40 = v57;
  *((_QWORD *)v39 + 2) = a5;
  *((_QWORD *)v39 + 3) = v40;
  v41 = v52;
  *((_QWORD *)v39 + 4) = v60;
  *((_QWORD *)v39 + 5) = v41;
  v42 = v61;
  *((_QWORD *)v39 + 6) = v58;
  *((_QWORD *)v39 + 7) = v42;
  v43 = &v39[v36];
  v44 = (void (*)(char *, char *, uint64_t))v31[4];
  v44(v43, v50, v18);
  v44(&v39[v37], v51, v18);
  v45 = v33;
  (*(void (**)(char *, char *, uint64_t))(v34 + 32))(&v39[v38], v66, v33);
  v46 = v54;
  sub_2142868CC((uint64_t)v53, (uint64_t)sub_21428755C, (uint64_t)v39, a5, (uint64_t)&type metadata for AreaMark, v41, (uint64_t)&protocol witness table for AreaMark, v54);
  (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v68, v45);
  v47 = (void (*)(uint64_t, uint64_t))v65[1];
  v47(v69, v18);
  v47(v70, v18);
  (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v67, a5);
  v48 = v62;
  MEMORY[0x2199CD934](&protocol conformance descriptor for VectorizedAreaPlotContent<A>, v62);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v63 + 32))(v64, v46, v48);
}

void *sub_214286D40@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X6>, void *a7@<X8>, uint64_t a8, uint64_t a9)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  void (*v30)(char *, uint64_t, uint64_t);
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  _BYTE v62[320];

  v55 = a6;
  v59 = a3;
  v60 = a4;
  v52 = a1;
  v53 = a2;
  v61 = a7;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v56 = a9;
  v12 = type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, a6, a9);
  v57 = *(_QWORD *)(v12 - 8);
  v58 = v12;
  MEMORY[0x24BDAC7A8](v12);
  v54 = (char *)&v46 - v13;
  v15 = type metadata accessor for PlottableValue(0, a6, a9, v14);
  MEMORY[0x24BDAC7A8](v15);
  v51 = (uint64_t)&v46 - v16;
  v47 = a8;
  v50 = type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, a5, a8);
  v17 = *(_QWORD *)(v50 - 8);
  v18 = MEMORY[0x24BDAC7A8](v50);
  v20 = (char *)&v46 - v19;
  v21 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](v18);
  v23 = (char *)&v46 - v22;
  v25 = type metadata accessor for PlottableValue(0, a5, a8, v24);
  v26 = MEMORY[0x24BDAC7A8](v25);
  v48 = (uint64_t)&v46 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v26);
  v29 = (char *)&v46 - v28;
  v49 = (uint64_t)&v46 - v28;
  v30 = *(void (**)(char *, uint64_t, uint64_t))(v21 + 16);
  v31 = v52;
  v30(v23, v52, AssociatedTypeWitness);
  v32 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 16);
  v33 = v50;
  v32(v20, v53, v50);
  v34 = (uint64_t)v29;
  v35 = a5;
  v36 = a5;
  v37 = v47;
  sub_214270F68((uint64_t)v23, (uint64_t)v20, v35, AssociatedTypeWitness, v47, v34);
  v30(v23, v31, AssociatedTypeWitness);
  v32(v20, v59, v33);
  v38 = v48;
  sub_214270F68((uint64_t)v23, (uint64_t)v20, v36, AssociatedTypeWitness, v37, v48);
  v30(v23, v31, AssociatedTypeWitness);
  v39 = v54;
  (*(void (**)(char *, uint64_t, uint64_t))(v57 + 16))(v54, v60, v58);
  v40 = v51;
  v41 = (uint64_t)v23;
  v42 = (uint64_t)v39;
  v43 = v55;
  v44 = v56;
  sub_214270F68(v41, v42, v55, AssociatedTypeWitness, v56, v51);
  AreaMark.init<A, B>(xStart:xEnd:y:)(v49, v38, v40, v36, v43, v37, v44, v62);
  return memcpy(v61, v62, 0x131uLL);
}

uint64_t sub_214287038()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  void (*v16)(char *, uint64_t);
  uint64_t TupleTypeMetadata2;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t TupleTypeMetadata3;
  uint64_t v22;
  char *v23;
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  void (*v29)(char *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  void (*v35)(char *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v1 = v0[3];
  v2 = v0[4];
  v3 = v0[6];
  v4 = v0[7];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, v1, v3);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v8 + 64) & ~v8;
  v10 = *(_QWORD *)(v7 + 64);
  v11 = (v10 + v8 + v9) & ~v8;
  v42 = v4;
  v43 = v2;
  v12 = type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, v2, v4);
  v44 = *(unsigned __int8 *)(*(_QWORD *)(v12 - 8) + 80);
  v13 = v10 + v44 + v11;
  v14 = (char *)v0 + v9;
  sub_2141ED0BC(*(_QWORD *)v14, *((_QWORD *)v14 + 1), v14[16]);
  swift_bridgeObjectRelease();
  v15 = &v14[*(int *)(v6 + 44)];
  v45 = AssociatedTypeWitness;
  type metadata accessor for PlottableProjection.Storage(0, AssociatedTypeWitness, v1, v3);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v15, v1);
      break;
    case 1u:
      v16 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v1 - 8) + 8);
      v16(v15, v1);
      TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
      v16(&v15[*(int *)(TupleTypeMetadata2 + 48)], v1);
      break;
    case 2u:
      swift_release();
      break;
    case 3u:
      swift_release();
      swift_release();
      break;
    case 4u:
      swift_release();
      sub_2144258E0();
      v18 = sub_214423C48();
      v41 = v12;
      v19 = sub_214423C54();
      v20 = v13;
      TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(&v15[*(int *)(TupleTypeMetadata3 + 48)], v18);
      v22 = *(int *)(TupleTypeMetadata3 + 64);
      v13 = v20;
      v23 = &v15[v22];
      v24 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v19 - 8) + 8);
      v25 = v19;
      v12 = v41;
      v24(v23, v25);
      break;
    default:
      break;
  }
  v26 = v13 & ~v44;
  v27 = (char *)v0 + v11;
  sub_2141ED0BC(*(_QWORD *)v27, *((_QWORD *)v27 + 1), v27[16]);
  swift_bridgeObjectRelease();
  v28 = &v27[*(int *)(v6 + 44)];
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v28, v1);
      break;
    case 1u:
      v29 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v1 - 8) + 8);
      v29(v28, v1);
      v30 = swift_getTupleTypeMetadata2();
      v29(&v28[*(int *)(v30 + 48)], v1);
      break;
    case 2u:
      swift_release();
      break;
    case 3u:
      swift_release();
      swift_release();
      break;
    case 4u:
      swift_release();
      sub_2144258E0();
      v31 = sub_214423C48();
      v32 = sub_214423C54();
      v33 = swift_getTupleTypeMetadata3();
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v31 - 8) + 8))(&v28[*(int *)(v33 + 48)], v31);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v32 - 8) + 8))(&v28[*(int *)(v33 + 64)], v32);
      break;
    default:
      break;
  }
  sub_2141ED0BC(*(_QWORD *)((char *)v0 + v26), *(_QWORD *)((char *)v0 + v26 + 8), *((_BYTE *)v0 + v26 + 16));
  swift_bridgeObjectRelease();
  v34 = (char *)v0 + v26 + *(int *)(v12 + 44);
  type metadata accessor for PlottableProjection.Storage(0, v45, v43, v42);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v43 - 8) + 8))(v34, v43);
      break;
    case 1u:
      v35 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v43 - 8) + 8);
      v35(v34, v43);
      v36 = swift_getTupleTypeMetadata2();
      v35(&v34[*(int *)(v36 + 48)], v43);
      break;
    case 2u:
      swift_release();
      break;
    case 3u:
      swift_release();
      swift_release();
      break;
    case 4u:
      swift_release();
      sub_2144258E0();
      v37 = sub_214423C48();
      v38 = sub_214423C54();
      v39 = swift_getTupleTypeMetadata3();
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v37 - 8) + 8))(&v34[*(int *)(v39 + 48)], v37);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v38 - 8) + 8))(&v34[*(int *)(v39 + 64)], v38);
      break;
    default:
      return swift_deallocObject();
  }
  return swift_deallocObject();
}

void *sub_21428755C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = v2[3];
  v4 = v2[4];
  v5 = v2[6];
  v6 = v2[7];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, v3, v5) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v9 + 64) & ~v9;
  v11 = *(_QWORD *)(v8 + 64);
  v12 = (v11 + v9 + v10) & ~v9;
  v13 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, v4, v6)- 8)+ 80);
  return sub_214286D40(a1, (uint64_t)v2 + v10, (uint64_t)v2 + v12, (uint64_t)v2 + ((v11 + v13 + v12) & ~v13), v3, v4, a2, v5, v6);
}

uint64_t AreaPlot.init<A, B, C>(_:x:yStart:yEnd:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t, uint64_t);
  char *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  void (*v50)(char *, char *, uint64_t);
  uint64_t v51;
  char *v52;
  void (*v53)(char *, char *, uint64_t);
  uint64_t v54;
  void (*v55)(uint64_t, uint64_t);
  uint64_t v56;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;

  v74 = a8;
  v75 = a1;
  v76 = a4;
  v77 = a3;
  v78 = a2;
  v73 = a9;
  v66 = a7;
  v67 = a11;
  v69 = a6;
  v70 = a10;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v15 = type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, a6, a10);
  v16 = *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64);
  v17 = *(_QWORD *)(v15 - 8);
  v18 = MEMORY[0x24BDAC7A8](v15);
  v63 = (char *)&v58 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v58 - v19;
  v62 = (char *)&v58 - v19;
  v21 = type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, a7, a11);
  v59 = *(_QWORD *)(v21 - 8);
  v60 = v21;
  v22 = *(_QWORD *)(v59 + 64);
  v23 = MEMORY[0x24BDAC7A8](v21);
  v25 = (char *)&v58 - v24;
  v61 = (char *)&v58 - v24;
  v68 = *(_QWORD *)(a5 - 8);
  v26 = v68;
  MEMORY[0x24BDAC7A8](v23);
  v28 = (char *)&v58 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = v28;
  v30 = type metadata accessor for VectorizedAreaPlotContent(0, a5, v74, v29);
  v31 = *(_QWORD *)(v30 - 8);
  v71 = v30;
  v72 = v31;
  MEMORY[0x24BDAC7A8](v30);
  v65 = (uint64_t)&v58 - v32;
  v33 = v28;
  v34 = a5;
  (*(void (**)(char *, uint64_t, uint64_t))(v26 + 16))(v33, v75, a5);
  v35 = v59;
  (*(void (**)(char *, uint64_t, uint64_t))(v59 + 16))(v25, v78, v21);
  v36 = v17;
  v37 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 16);
  v37(v20, v77, v15);
  v38 = v63;
  v37(v63, v76, v15);
  v39 = v35;
  v40 = (*(unsigned __int8 *)(v35 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80);
  v41 = *(unsigned __int8 *)(v36 + 80);
  v42 = (v22 + v41 + v40) & ~v41;
  v43 = (v16 + v41 + v42) & ~v41;
  v44 = (char *)swift_allocObject();
  v45 = v69;
  *((_QWORD *)v44 + 2) = v34;
  *((_QWORD *)v44 + 3) = v45;
  v46 = v74;
  *((_QWORD *)v44 + 4) = v66;
  *((_QWORD *)v44 + 5) = v46;
  v47 = v67;
  *((_QWORD *)v44 + 6) = v70;
  *((_QWORD *)v44 + 7) = v47;
  v48 = &v44[v40];
  v49 = v39;
  v50 = *(void (**)(char *, char *, uint64_t))(v39 + 32);
  v51 = v60;
  v50(v48, v61, v60);
  v52 = &v44[v42];
  v53 = *(void (**)(char *, char *, uint64_t))(v36 + 32);
  v53(v52, v62, v15);
  v53(&v44[v43], v38, v15);
  v54 = v65;
  sub_2142868CC((uint64_t)v64, (uint64_t)sub_2142881C4, (uint64_t)v44, v34, (uint64_t)&type metadata for AreaMark, v46, (uint64_t)&protocol witness table for AreaMark, v65);
  v55 = *(void (**)(uint64_t, uint64_t))(v36 + 8);
  v55(v76, v15);
  v55(v77, v15);
  (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v78, v51);
  (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v75, v34);
  v56 = v71;
  MEMORY[0x2199CD934](&protocol conformance descriptor for VectorizedAreaPlotContent<A>, v71);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v72 + 32))(v73, v54, v56);
}

void *sub_2142879B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X6>, void *a7@<X8>, uint64_t a8, uint64_t a9)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  void (*v31)(char *, uint64_t, uint64_t);
  void (*v32)(char *, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  _BYTE v56[320];

  v46 = a5;
  v52 = a3;
  v53 = a4;
  v51 = a2;
  v54 = a7;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v47 = a8;
  v50 = type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, a5, a8);
  v48 = *(_QWORD *)(v50 - 8);
  MEMORY[0x24BDAC7A8](v50);
  v45 = (char *)&v40 - v13;
  v15 = type metadata accessor for PlottableValue(0, a5, a8, v14);
  v16 = MEMORY[0x24BDAC7A8](v15);
  v49 = (uint64_t)&v40 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v44 = (uint64_t)&v40 - v18;
  v55 = a6;
  v19 = type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, a6, a9);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = MEMORY[0x24BDAC7A8](v19);
  v23 = (char *)&v40 - v22;
  v24 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](v21);
  v26 = (char *)&v40 - v25;
  v43 = a9;
  v28 = type metadata accessor for PlottableValue(0, a6, a9, v27);
  MEMORY[0x24BDAC7A8](v28);
  v30 = (char *)&v40 - v29;
  v41 = a1;
  v42 = (uint64_t)&v40 - v29;
  v31 = *(void (**)(char *, uint64_t, uint64_t))(v24 + 16);
  v31(v26, a1, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v23, v51, v19);
  sub_214270F68((uint64_t)v26, (uint64_t)v23, v55, AssociatedTypeWitness, a9, (uint64_t)v30);
  v31(v26, a1, AssociatedTypeWitness);
  v32 = *(void (**)(char *, uint64_t, uint64_t))(v48 + 16);
  v33 = (uint64_t)v45;
  v34 = v50;
  v32(v45, v52, v50);
  v35 = v44;
  v37 = v46;
  v36 = v47;
  sub_214270F68((uint64_t)v26, v33, v46, AssociatedTypeWitness, v47, v44);
  v31(v26, v41, AssociatedTypeWitness);
  v32((char *)v33, v53, v34);
  v38 = v49;
  sub_214270F68((uint64_t)v26, v33, v37, AssociatedTypeWitness, v36, v49);
  AreaMark.init<A, B>(x:yStart:yEnd:)(v42, v35, v38, v55, v37, v43, v36, v56);
  return memcpy(v54, v56, 0x131uLL);
}

uint64_t sub_214287CAC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  void (*v15)(char *, uint64_t);
  uint64_t TupleTypeMetadata2;
  uint64_t v17;
  uint64_t v18;
  uint64_t TupleTypeMetadata3;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  char *v32;
  void (*v33)(char *, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v39;
  uint64_t v40;

  v1 = v0[3];
  v2 = v0[4];
  v3 = v0[6];
  v4 = v0[7];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, v2, v4);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = (*(unsigned __int8 *)(v7 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v7 + 64);
  v40 = type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, v1, v3);
  v10 = *(_QWORD *)(v40 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = (v8 + v9 + v11) & ~v11;
  v39 = *(_QWORD *)(v10 + 64) + v11 + v12;
  v13 = (char *)v0 + v8;
  sub_2141ED0BC(*(_QWORD *)v13, *((_QWORD *)v13 + 1), v13[16]);
  swift_bridgeObjectRelease();
  v14 = &v13[*(int *)(v6 + 44)];
  type metadata accessor for PlottableProjection.Storage(0, AssociatedTypeWitness, v2, v4);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v14, v2);
      break;
    case 1u:
      v15 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8);
      v15(v14, v2);
      TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
      v15(&v14[*(int *)(TupleTypeMetadata2 + 48)], v2);
      break;
    case 2u:
      swift_release();
      break;
    case 3u:
      swift_release();
      swift_release();
      break;
    case 4u:
      swift_release();
      sub_2144258E0();
      v17 = sub_214423C48();
      v18 = sub_214423C54();
      TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(&v14[*(int *)(TupleTypeMetadata3 + 48)], v17);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(&v14[*(int *)(TupleTypeMetadata3 + 64)], v18);
      break;
    default:
      break;
  }
  v20 = v39 & ~v11;
  v21 = (char *)v0 + v12;
  sub_2141ED0BC(*(_QWORD *)v21, *((_QWORD *)v21 + 1), v21[16]);
  swift_bridgeObjectRelease();
  v22 = v40;
  v23 = &v21[*(int *)(v40 + 44)];
  type metadata accessor for PlottableProjection.Storage(0, AssociatedTypeWitness, v1, v3);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v23, v1);
      break;
    case 1u:
      v24 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v1 - 8) + 8);
      v24(v23, v1);
      v25 = swift_getTupleTypeMetadata2();
      v24(&v23[*(int *)(v25 + 48)], v1);
      break;
    case 2u:
      swift_release();
      break;
    case 3u:
      swift_release();
      swift_release();
      break;
    case 4u:
      swift_release();
      sub_2144258E0();
      v26 = sub_214423C48();
      v27 = sub_214423C54();
      v28 = swift_getTupleTypeMetadata3();
      v29 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v26 - 8) + 8);
      v30 = v26;
      v20 = v39 & ~v11;
      v29(&v23[*(int *)(v28 + 48)], v30);
      v31 = *(int *)(v28 + 64);
      v22 = v40;
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v27 - 8) + 8))(&v23[v31], v27);
      break;
    default:
      break;
  }
  sub_2141ED0BC(*(_QWORD *)((char *)v0 + v20), *(_QWORD *)((char *)v0 + v20 + 8), *((_BYTE *)v0 + v20 + 16));
  swift_bridgeObjectRelease();
  v32 = (char *)v0 + v20 + *(int *)(v22 + 44);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v32, v1);
      break;
    case 1u:
      v33 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v1 - 8) + 8);
      v33(v32, v1);
      v34 = swift_getTupleTypeMetadata2();
      v33(&v32[*(int *)(v34 + 48)], v1);
      break;
    case 2u:
      swift_release();
      break;
    case 3u:
      swift_release();
      swift_release();
      break;
    case 4u:
      swift_release();
      sub_2144258E0();
      v35 = sub_214423C48();
      v36 = sub_214423C54();
      v37 = swift_getTupleTypeMetadata3();
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v35 - 8) + 8))(&v32[*(int *)(v37 + 48)], v35);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v36 - 8) + 8))(&v32[*(int *)(v37 + 64)], v36);
      break;
    default:
      return swift_deallocObject();
  }
  return swift_deallocObject();
}

void *sub_2142881C4@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = v2[3];
  v4 = v2[4];
  v5 = v2[6];
  v6 = v2[7];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, v4, v6) - 8);
  v9 = (*(unsigned __int8 *)(v8 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v10 = *(_QWORD *)(v8 + 64);
  v11 = *(_QWORD *)(type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, v3, v5) - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  return sub_2142879B8(a1, (uint64_t)v2 + v9, (uint64_t)v2 + ((v9 + v10 + v12) & ~v12), (uint64_t)v2 + ((*(_QWORD *)(v11 + 64) + v12 + ((v9 + v10 + v12) & ~v12)) & ~v12), v3, v4, a2, v5, v6);
}

uint64_t AreaPlot.init<A, B, C, D>(_:x:y:series:stacking:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;

  v69 = a5;
  v78 = a3;
  v79 = a4;
  v76 = a1;
  v77 = a2;
  v70 = a9;
  v59 = a7;
  v60 = a12;
  v63 = a8;
  v64 = a13;
  v68 = a14;
  v66 = a10;
  v72 = a11;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v75 = type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, a10, a14);
  v71 = *(_QWORD *)(v75 - 8);
  v61 = *(_QWORD *)(v71 + 64);
  MEMORY[0x24BDAC7A8](v75);
  v74 = (char *)&v55 - v18;
  v73 = type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, a8, a13);
  v19 = *(_QWORD *)(v73 - 8);
  v20 = *(_QWORD *)(v19 + 64);
  MEMORY[0x24BDAC7A8](v73);
  v22 = (char *)&v55 - v21;
  v56 = (char *)&v55 - v21;
  v23 = type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, a7, a12);
  v24 = *(_QWORD *)(v23 - 8);
  v55 = v23;
  v25 = *(_QWORD *)(v24 + 64);
  v26 = MEMORY[0x24BDAC7A8](v23);
  v28 = (char *)&v55 - v27;
  v62 = *(_QWORD *)(a6 - 8);
  v29 = v62;
  MEMORY[0x24BDAC7A8](v26);
  v31 = (char *)&v55 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = v31;
  v65 = type metadata accessor for VectorizedAreaPlotContent(0, a6, v72, v32);
  v67 = *(_QWORD *)(v65 - 8);
  MEMORY[0x24BDAC7A8](v65);
  v58 = (uint64_t)&v55 - v33;
  (*(void (**)(char *, uint64_t, uint64_t))(v29 + 16))(v31, v76, a6);
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v28, v77, v23);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v22, v78, v73);
  v34 = v71;
  (*(void (**)(char *, uint64_t, uint64_t))(v71 + 16))(v74, v79, v75);
  v35 = (*(unsigned __int8 *)(v24 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80);
  v36 = (v25 + *(unsigned __int8 *)(v19 + 80) + v35) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v37 = (v20 + *(unsigned __int8 *)(v34 + 80) + v36) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80);
  v38 = v37 + v61;
  v39 = (_QWORD *)swift_allocObject();
  v40 = v59;
  v39[2] = a6;
  v39[3] = v40;
  v41 = v66;
  v39[4] = v63;
  v39[5] = v41;
  v42 = v72;
  v43 = v60;
  v39[6] = v72;
  v39[7] = v43;
  v44 = v68;
  v39[8] = v64;
  v39[9] = v44;
  v45 = (char *)v39 + v35;
  v46 = v55;
  (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v45, v28, v55);
  v47 = (char *)v39 + v36;
  v48 = v73;
  (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v47, v56, v73);
  v49 = (char *)v39 + v37;
  v50 = v71;
  v51 = v75;
  (*(void (**)(char *, char *, uint64_t))(v71 + 32))(v49, v74, v75);
  *((_BYTE *)v39 + v38) = v69;
  v52 = v58;
  sub_2142868CC((uint64_t)v57, (uint64_t)sub_214288F84, (uint64_t)v39, a6, (uint64_t)&type metadata for AreaMark, v42, (uint64_t)&protocol witness table for AreaMark, v58);
  (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v79, v51);
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v78, v48);
  (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v77, v46);
  (*(void (**)(uint64_t, uint64_t))(v62 + 8))(v76, a6);
  v53 = v65;
  MEMORY[0x2199CD934](&protocol conformance descriptor for VectorizedAreaPlotContent<A>, v65);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v67 + 32))(v70, v52, v53);
}

void *sub_2142886A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X6>, uint64_t a7@<X7>, void *a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  void (*v37)(char *, uint64_t, uint64_t);
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  void *v72;
  _BYTE v73[320];

  v71 = a5;
  v69 = a3;
  v70 = a4;
  v64 = a2;
  v62 = a1;
  v72 = a8;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v65 = a9;
  v66 = a13;
  v16 = type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, a9, a13);
  v67 = *(_QWORD *)(v16 - 8);
  v68 = v16;
  MEMORY[0x24BDAC7A8](v16);
  v63 = (char *)&v51 - v17;
  v19 = type metadata accessor for PlottableValue(0, a9, a13, v18);
  MEMORY[0x24BDAC7A8](v19);
  v61 = (uint64_t)&v51 - v20;
  v57 = a7;
  v58 = a12;
  v21 = type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, a7, a12);
  v59 = *(_QWORD *)(v21 - 8);
  v60 = v21;
  MEMORY[0x24BDAC7A8](v21);
  v56 = (char *)&v51 - v22;
  v24 = type metadata accessor for PlottableValue(0, a7, a12, v23);
  MEMORY[0x24BDAC7A8](v24);
  v55 = (uint64_t)&v51 - v25;
  v52 = type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, a6, a11);
  v26 = *(_QWORD *)(v52 - 8);
  v27 = MEMORY[0x24BDAC7A8](v52);
  v29 = (char *)&v51 - v28;
  v30 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](v27);
  v32 = (char *)&v51 - v31;
  v54 = a6;
  v34 = type metadata accessor for PlottableValue(0, a6, a11, v33);
  MEMORY[0x24BDAC7A8](v34);
  v36 = (char *)&v51 - v35;
  v53 = (uint64_t)&v51 - v35;
  v37 = *(void (**)(char *, uint64_t, uint64_t))(v30 + 16);
  v38 = v62;
  v37(v32, v62, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v26 + 16))(v29, v64, v52);
  sub_214270F68((uint64_t)v32, (uint64_t)v29, a6, AssociatedTypeWitness, a11, (uint64_t)v36);
  v37(v32, v38, AssociatedTypeWitness);
  v39 = v56;
  (*(void (**)(char *, uint64_t, uint64_t))(v59 + 16))(v56, v69, v60);
  v40 = v55;
  v41 = (uint64_t)v39;
  v42 = v57;
  v43 = v58;
  sub_214270F68((uint64_t)v32, v41, v57, AssociatedTypeWitness, v58, v55);
  v37(v32, v38, AssociatedTypeWitness);
  v44 = v63;
  (*(void (**)(char *, uint64_t, uint64_t))(v67 + 16))(v63, v70, v68);
  v45 = v61;
  v46 = (uint64_t)v44;
  v47 = v65;
  v48 = AssociatedTypeWitness;
  v49 = v66;
  sub_214270F68((uint64_t)v32, v46, v65, v48, v66, v61);
  AreaMark.init<A, B, C>(x:y:series:stacking:)(v53, v40, v45, v71, v54, v42, v47, a11, v73, v43, v49);
  return memcpy(v72, v73, 0x131uLL);
}

uint64_t sub_214288A18()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  void (*v22)(char *, uint64_t);
  uint64_t TupleTypeMetadata2;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t TupleTypeMetadata3;
  void (*v28)(char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  void (*v33)(char *, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t);
  uint64_t v39;
  char *v40;
  void (*v41)(char *, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v1 = v0[3];
  v3 = v0[4];
  v2 = v0[5];
  v4 = v0[7];
  v5 = v0[8];
  v47 = v0[9];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, v1, v4);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = (*(unsigned __int8 *)(v8 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v10 = *(_QWORD *)(v8 + 64);
  v49 = v5;
  v50 = v3;
  v48 = type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, v3, v5);
  v11 = *(_QWORD *)(v48 - 8);
  v12 = (v9 + v10 + *(unsigned __int8 *)(v11 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v13 = *(_QWORD *)(v11 + 64);
  v52 = v2;
  v14 = v2;
  v15 = v47;
  v51 = type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, v14, v47);
  v16 = *(_QWORD *)(v51 - 8);
  v17 = v13 + *(unsigned __int8 *)(v16 + 80);
  v18 = *(unsigned __int8 *)(v16 + 80);
  v19 = v12 + v17;
  v20 = (char *)v0 + v9;
  sub_2141ED0BC(*(_QWORD *)v20, *((_QWORD *)v20 + 1), v20[16]);
  swift_bridgeObjectRelease();
  v21 = &v20[*(int *)(v7 + 44)];
  type metadata accessor for PlottableProjection.Storage(0, AssociatedTypeWitness, v1, v4);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v21, v1);
      break;
    case 1u:
      v22 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v1 - 8) + 8);
      v22(v21, v1);
      TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
      v22(&v21[*(int *)(TupleTypeMetadata2 + 48)], v1);
      break;
    case 2u:
      swift_release();
      break;
    case 3u:
      swift_release();
      swift_release();
      break;
    case 4u:
      swift_release();
      sub_2144258E0();
      v24 = v19;
      v25 = sub_214423C48();
      v26 = sub_214423C54();
      TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
      v28 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v25 - 8) + 8);
      v29 = v25;
      v19 = v24;
      v28(&v21[*(int *)(TupleTypeMetadata3 + 48)], v29);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v26 - 8) + 8))(&v21[*(int *)(TupleTypeMetadata3 + 64)], v26);
      break;
    default:
      break;
  }
  v30 = v19 & ~v18;
  v31 = (char *)v0 + v12;
  sub_2141ED0BC(*(_QWORD *)v31, *((_QWORD *)v31 + 1), v31[16]);
  swift_bridgeObjectRelease();
  v32 = &v31[*(int *)(v48 + 44)];
  type metadata accessor for PlottableProjection.Storage(0, AssociatedTypeWitness, v50, v49);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v50 - 8) + 8))(v32, v50);
      break;
    case 1u:
      v33 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v50 - 8) + 8);
      v33(v32, v50);
      v34 = swift_getTupleTypeMetadata2();
      v33(&v32[*(int *)(v34 + 48)], v50);
      break;
    case 2u:
      swift_release();
      break;
    case 3u:
      swift_release();
      swift_release();
      break;
    case 4u:
      swift_release();
      sub_2144258E0();
      v35 = sub_214423C48();
      v36 = sub_214423C54();
      v37 = swift_getTupleTypeMetadata3();
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v35 - 8) + 8))(&v32[*(int *)(v37 + 48)], v35);
      v38 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v36 - 8) + 8);
      v39 = v36;
      v15 = v47;
      v38(&v32[*(int *)(v37 + 64)], v39);
      break;
    default:
      break;
  }
  sub_2141ED0BC(*(_QWORD *)((char *)v0 + v30), *(_QWORD *)((char *)v0 + v30 + 8), *((_BYTE *)v0 + v30 + 16));
  swift_bridgeObjectRelease();
  v40 = (char *)v0 + v30 + *(int *)(v51 + 44);
  type metadata accessor for PlottableProjection.Storage(0, AssociatedTypeWitness, v52, v15);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v52 - 8) + 8))(v40, v52);
      break;
    case 1u:
      v41 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v52 - 8) + 8);
      v41(v40, v52);
      v42 = swift_getTupleTypeMetadata2();
      v41(&v40[*(int *)(v42 + 48)], v52);
      break;
    case 2u:
      swift_release();
      break;
    case 3u:
      swift_release();
      swift_release();
      break;
    case 4u:
      swift_release();
      sub_2144258E0();
      v43 = sub_214423C48();
      v44 = sub_214423C54();
      v45 = swift_getTupleTypeMetadata3();
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v43 - 8) + 8))(&v40[*(int *)(v45 + 48)], v43);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v44 - 8) + 8))(&v40[*(int *)(v45 + 64)], v44);
      break;
    default:
      return swift_deallocObject();
  }
  return swift_deallocObject();
}

void *sub_214288F84@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v20;
  uint64_t v21;

  v3 = v2[3];
  v21 = v3;
  v5 = v2[4];
  v4 = v2[5];
  v20 = v5;
  v6 = v2[6];
  v7 = v2[7];
  v8 = v2[8];
  v9 = v2[9];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, v3, v7) - 8);
  v12 = (*(unsigned __int8 *)(v11 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v13 = *(_QWORD *)(v11 + 64);
  v14 = *(_QWORD *)(type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, v5, v8) - 8);
  v15 = (v12 + v13 + *(unsigned __int8 *)(v14 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  v16 = *(_QWORD *)(v14 + 64);
  v17 = *(_QWORD *)(type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, v4, v9) - 8);
  v18 = (v15 + v16 + *(unsigned __int8 *)(v17 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
  return sub_2142886A8(a1, (uint64_t)v2 + v12, (uint64_t)v2 + v15, (uint64_t)v2 + v18, *((unsigned __int8 *)v2 + v18 + *(_QWORD *)(v17 + 64)), v21, v20, a2, v4, v6, v7, v8, v9);
}

uint64_t AreaPlot.init<A, B, C, D>(_:xStart:xEnd:y:series:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  void (*v50)(char *, char *, uint64_t);
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(uint64_t, uint64_t);
  uint64_t v59;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;

  v72 = a8;
  v88 = a5;
  v89 = a4;
  v86 = a2;
  v87 = a3;
  v83 = a1;
  v79 = a9;
  v69 = a7;
  v70 = a12;
  v77 = a14;
  v74 = a13;
  v75 = a10;
  v81 = a11;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v85 = type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, a10, a14);
  v68 = *(_QWORD *)(v85 - 8);
  v71 = *(_QWORD *)(v68 + 64);
  MEMORY[0x24BDAC7A8](v85);
  v84 = (char *)&v61 - v18;
  v82 = type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, a8, a13);
  v80 = *(_QWORD *)(v82 - 8);
  v19 = *(_QWORD *)(v80 + 64);
  MEMORY[0x24BDAC7A8](v82);
  v21 = (char *)&v61 - v20;
  v65 = (char *)&v61 - v20;
  v22 = type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, a7, a12);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = *(_QWORD *)(v23 + 64);
  v25 = MEMORY[0x24BDAC7A8](v22);
  v64 = (char *)&v61 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = MEMORY[0x24BDAC7A8](v25);
  v28 = (char *)&v61 - v27;
  v73 = *(_QWORD *)(a6 - 8);
  v29 = v73;
  MEMORY[0x24BDAC7A8](v26);
  v31 = (char *)&v61 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = v31;
  v63 = a6;
  v76 = type metadata accessor for VectorizedAreaPlotContent(0, a6, v81, v32);
  v78 = *(_QWORD *)(v76 - 8);
  MEMORY[0x24BDAC7A8](v76);
  v67 = (uint64_t)&v61 - v33;
  (*(void (**)(char *, uint64_t, uint64_t))(v29 + 16))(v31, v83, a6);
  v34 = *(void (**)(char *, uint64_t, uint64_t))(v23 + 16);
  v62 = v22;
  v34(v28, v86, v22);
  v34((char *)&v61 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0), v87, v22);
  v35 = v80;
  (*(void (**)(char *, uint64_t, uint64_t))(v80 + 16))(v21, v89, v82);
  v36 = v68;
  (*(void (**)(char *, uint64_t, uint64_t))(v68 + 16))(v84, v88, v85);
  v37 = *(unsigned __int8 *)(v23 + 80);
  v61 = v23;
  v38 = (v37 + 80) & ~v37;
  v39 = (v24 + v37 + v38) & ~v37;
  v40 = (v24 + *(unsigned __int8 *)(v35 + 80) + v39) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80);
  v41 = (v19 + *(unsigned __int8 *)(v36 + 80) + v40) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80);
  v42 = (char *)swift_allocObject();
  v43 = v63;
  v44 = v69;
  *((_QWORD *)v42 + 2) = v63;
  *((_QWORD *)v42 + 3) = v44;
  v45 = v75;
  *((_QWORD *)v42 + 4) = v72;
  *((_QWORD *)v42 + 5) = v45;
  v46 = v81;
  v47 = v70;
  *((_QWORD *)v42 + 6) = v81;
  *((_QWORD *)v42 + 7) = v47;
  v48 = v77;
  *((_QWORD *)v42 + 8) = v74;
  *((_QWORD *)v42 + 9) = v48;
  v49 = &v42[v38];
  v50 = *(void (**)(char *, char *, uint64_t))(v23 + 32);
  v51 = v62;
  v50(v49, v28, v62);
  v50(&v42[v39], v64, v51);
  v52 = &v42[v40];
  v53 = v80;
  v54 = v82;
  (*(void (**)(char *, char *, uint64_t))(v80 + 32))(v52, v65, v82);
  v55 = &v42[v41];
  v56 = v85;
  (*(void (**)(char *, char *, uint64_t))(v36 + 32))(v55, v84, v85);
  v57 = v67;
  sub_2142868CC((uint64_t)v66, (uint64_t)sub_214289FC4, (uint64_t)v42, v43, (uint64_t)&type metadata for AreaMark, v46, (uint64_t)&protocol witness table for AreaMark, v67);
  (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v88, v56);
  (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v89, v54);
  v58 = *(void (**)(uint64_t, uint64_t))(v61 + 8);
  v58(v87, v51);
  v58(v86, v51);
  (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v83, v43);
  v59 = v76;
  MEMORY[0x2199CD934](&protocol conformance descriptor for VectorizedAreaPlotContent<A>, v76);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v78 + 32))(v79, v57, v59);
}

void *sub_21428951C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X6>, uint64_t a7@<X7>, void *a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  void (*v40)(char *, uint64_t, uint64_t);
  uint64_t v41;
  void (*v42)(char *, uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  uint64_t v82;
  _BYTE v83[320];

  v79 = a4;
  v80 = a5;
  v74 = a3;
  v70 = a1;
  v71 = a2;
  v81 = a8;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v75 = a9;
  v76 = a13;
  v16 = type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, a9, a13);
  v77 = *(_QWORD *)(v16 - 8);
  v78 = v16;
  MEMORY[0x24BDAC7A8](v16);
  v73 = (char *)&v59 - v17;
  v19 = type metadata accessor for PlottableValue(0, a9, a13, v18);
  MEMORY[0x24BDAC7A8](v19);
  v72 = (uint64_t)&v59 - v20;
  v66 = a7;
  v67 = a12;
  v21 = type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, a7, a12);
  v68 = *(_QWORD *)(v21 - 8);
  v69 = v21;
  MEMORY[0x24BDAC7A8](v21);
  v65 = (char *)&v59 - v22;
  v24 = type metadata accessor for PlottableValue(0, a7, a12, v23);
  MEMORY[0x24BDAC7A8](v24);
  v64 = (uint64_t)&v59 - v25;
  v26 = a6;
  v60 = a6;
  v61 = a11;
  v62 = type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, a6, a11);
  v27 = *(_QWORD *)(v62 - 8);
  v28 = MEMORY[0x24BDAC7A8](v62);
  v30 = (char *)&v59 - v29;
  v31 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](v28);
  v33 = (char *)&v59 - v32;
  v35 = type metadata accessor for PlottableValue(0, v26, a11, v34);
  v36 = MEMORY[0x24BDAC7A8](v35);
  v82 = (uint64_t)&v59 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v36);
  v39 = (char *)&v59 - v38;
  v63 = (uint64_t)&v59 - v38;
  v40 = *(void (**)(char *, uint64_t, uint64_t))(v31 + 16);
  v41 = v70;
  v40(v33, v70, AssociatedTypeWitness);
  v42 = *(void (**)(char *, uint64_t, uint64_t))(v27 + 16);
  v43 = v62;
  v42(v30, v71, v62);
  v44 = (uint64_t)v39;
  v45 = v60;
  v46 = v61;
  sub_214270F68((uint64_t)v33, (uint64_t)v30, v60, AssociatedTypeWitness, v61, v44);
  v40(v33, v41, AssociatedTypeWitness);
  v42(v30, v74, v43);
  sub_214270F68((uint64_t)v33, (uint64_t)v30, v45, AssociatedTypeWitness, v46, v82);
  v40(v33, v41, AssociatedTypeWitness);
  v47 = v65;
  (*(void (**)(char *, uint64_t, uint64_t))(v68 + 16))(v65, v79, v69);
  v48 = v64;
  v49 = (uint64_t)v47;
  v50 = v66;
  v51 = v67;
  sub_214270F68((uint64_t)v33, v49, v66, AssociatedTypeWitness, v67, v64);
  v40(v33, v41, AssociatedTypeWitness);
  v52 = (uint64_t)v73;
  (*(void (**)(char *, uint64_t, uint64_t))(v77 + 16))(v73, v80, v78);
  v53 = v72;
  v54 = (uint64_t)v33;
  v55 = v75;
  v56 = AssociatedTypeWitness;
  v57 = v76;
  sub_214270F68(v54, v52, v75, v56, v76, v72);
  AreaMark.init<A, B, C>(xStart:xEnd:y:series:)(v63, v82, v48, v53, v45, v50, v55, v46, v83, v51, v57);
  return memcpy(v81, v83, 0x131uLL);
}

uint64_t sub_2142898F0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  void (*v21)(char *, uint64_t);
  uint64_t TupleTypeMetadata2;
  uint64_t v23;
  uint64_t v24;
  uint64_t TupleTypeMetadata3;
  void (*v26)(char *, uint64_t);
  uint64_t v27;
  void (*v28)(char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  char *v31;
  void (*v32)(char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  void (*v39)(char *, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  void (*v45)(char *, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v1 = v0[3];
  v2 = v0[4];
  v3 = v0[5];
  v4 = v0[7];
  v51 = v4;
  v5 = v0[9];
  v59 = v0[8];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, v1, v4);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v9 + 80) & ~v9;
  v11 = *(_QWORD *)(v8 + 64);
  v53 = (v11 + v9 + v10) & ~v9;
  v54 = type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, v2, v59);
  v12 = *(_QWORD *)(v54 - 8);
  v13 = (v11 + *(unsigned __int8 *)(v12 + 80) + v53) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v14 = *(_QWORD *)(v12 + 64);
  v56 = v5;
  v57 = v3;
  v15 = v3;
  v16 = v1;
  v55 = type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, v15, v5);
  v17 = *(_QWORD *)(v55 - 8);
  v18 = v14 + *(unsigned __int8 *)(v17 + 80);
  v58 = *(unsigned __int8 *)(v17 + 80);
  v19 = (char *)v0 + v10;
  sub_2141ED0BC(*(_QWORD *)v19, *((_QWORD *)v19 + 1), v19[16]);
  swift_bridgeObjectRelease();
  v20 = &v19[*(int *)(v7 + 44)];
  type metadata accessor for PlottableProjection.Storage(0, AssociatedTypeWitness, v1, v51);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v20, v1);
      break;
    case 1u:
      v21 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v1 - 8) + 8);
      v21(v20, v1);
      TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
      v21(&v20[*(int *)(TupleTypeMetadata2 + 48)], v1);
      break;
    case 2u:
      swift_release();
      break;
    case 3u:
      swift_release();
      swift_release();
      break;
    case 4u:
      swift_release();
      sub_2144258E0();
      v23 = sub_214423C48();
      v52 = v18;
      v24 = sub_214423C54();
      TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
      v26 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v23 - 8) + 8);
      v27 = v23;
      v16 = v1;
      v26(&v20[*(int *)(TupleTypeMetadata3 + 48)], v27);
      v28 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v24 - 8) + 8);
      v29 = v24;
      v18 = v52;
      v28(&v20[*(int *)(TupleTypeMetadata3 + 64)], v29);
      break;
    default:
      break;
  }
  v30 = v13 + v18;
  sub_2141ED0BC(*(_QWORD *)((char *)v0 + v53), *(_QWORD *)((char *)v0 + v53 + 8), *((_BYTE *)v0 + v53 + 16));
  swift_bridgeObjectRelease();
  v31 = (char *)v0 + v53 + *(int *)(v7 + 44);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v31, v16);
      break;
    case 1u:
      v32 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v16 - 8) + 8);
      v32(v31, v16);
      v33 = swift_getTupleTypeMetadata2();
      v32(&v31[*(int *)(v33 + 48)], v16);
      break;
    case 2u:
      swift_release();
      break;
    case 3u:
      swift_release();
      swift_release();
      break;
    case 4u:
      swift_release();
      sub_2144258E0();
      v34 = sub_214423C48();
      v35 = sub_214423C54();
      v36 = swift_getTupleTypeMetadata3();
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v34 - 8) + 8))(&v31[*(int *)(v36 + 48)], v34);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v35 - 8) + 8))(&v31[*(int *)(v36 + 64)], v35);
      break;
    default:
      break;
  }
  v37 = v30 & ~v58;
  sub_2141ED0BC(*(_QWORD *)((char *)v0 + v13), *(_QWORD *)((char *)v0 + v13 + 8), *((_BYTE *)v0 + v13 + 16));
  swift_bridgeObjectRelease();
  v38 = (char *)v0 + v13 + *(int *)(v54 + 44);
  type metadata accessor for PlottableProjection.Storage(0, AssociatedTypeWitness, v2, v59);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v38, v2);
      break;
    case 1u:
      v39 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8);
      v39(v38, v2);
      v40 = swift_getTupleTypeMetadata2();
      v39(&v38[*(int *)(v40 + 48)], v2);
      break;
    case 2u:
      swift_release();
      break;
    case 3u:
      swift_release();
      swift_release();
      break;
    case 4u:
      swift_release();
      sub_2144258E0();
      v41 = sub_214423C48();
      v42 = sub_214423C54();
      v43 = swift_getTupleTypeMetadata3();
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v41 - 8) + 8))(&v38[*(int *)(v43 + 48)], v41);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v42 - 8) + 8))(&v38[*(int *)(v43 + 64)], v42);
      break;
    default:
      break;
  }
  sub_2141ED0BC(*(_QWORD *)((char *)v0 + v37), *(_QWORD *)((char *)v0 + v37 + 8), *((_BYTE *)v0 + v37 + 16));
  swift_bridgeObjectRelease();
  v44 = (char *)v0 + v37 + *(int *)(v55 + 44);
  type metadata accessor for PlottableProjection.Storage(0, AssociatedTypeWitness, v57, v56);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v57 - 8) + 8))(v44, v57);
      break;
    case 1u:
      v45 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v57 - 8) + 8);
      v45(v44, v57);
      v46 = swift_getTupleTypeMetadata2();
      v45(&v44[*(int *)(v46 + 48)], v57);
      break;
    case 2u:
      swift_release();
      break;
    case 3u:
      swift_release();
      swift_release();
      break;
    case 4u:
      swift_release();
      sub_2144258E0();
      v47 = sub_214423C48();
      v48 = sub_214423C54();
      v49 = swift_getTupleTypeMetadata3();
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v47 - 8) + 8))(&v44[*(int *)(v49 + 48)], v47);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v48 - 8) + 8))(&v44[*(int *)(v49 + 64)], v48);
      break;
    default:
      return swift_deallocObject();
  }
  return swift_deallocObject();
}

void *sub_214289FC4@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v3 = v2[3];
  v22 = v3;
  v4 = v2[4];
  v20 = v4;
  v21 = v2[5];
  v5 = v2[6];
  v6 = v2[7];
  v7 = v2[8];
  v8 = v2[9];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = *(_QWORD *)(type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, v3, v6) - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = (v11 + 80) & ~v11;
  v13 = *(_QWORD *)(v10 + 64);
  v14 = (v13 + v11 + v12) & ~v11;
  v15 = *(_QWORD *)(type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, v4, v7) - 8);
  v16 = (v13 + *(unsigned __int8 *)(v15 + 80) + v14) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  v17 = *(_QWORD *)(v15 + 64);
  v18 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, v21, v8)- 8)+ 80);
  return sub_21428951C(a1, (uint64_t)v2 + v12, (uint64_t)v2 + v14, (uint64_t)v2 + v16, (uint64_t)v2 + ((v16 + v17 + v18) & ~v18), v22, v20, a2, v21, v5, v6, v7, v8);
}

uint64_t AreaPlot.init<A, B, C, D>(_:x:yStart:yEnd:series:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  void (*v36)(char *, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  void (*v53)(char *, char *, uint64_t);
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(uint64_t, uint64_t);
  uint64_t v59;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;

  v68 = a8;
  v88 = a5;
  v89 = a4;
  v86 = a2;
  v87 = a3;
  v84 = a1;
  v78 = a9;
  v69 = a13;
  v71 = a7;
  v72 = a12;
  v76 = a14;
  v74 = a10;
  v82 = a11;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v85 = type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, a10, a14);
  v80 = *(_QWORD *)(v85 - 8);
  v70 = *(_QWORD *)(v80 + 64);
  MEMORY[0x24BDAC7A8](v85);
  v83 = (char *)&v61 - v18;
  v19 = type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, a7, a12);
  v79 = *(_QWORD **)(v19 - 8);
  v20 = v79[8];
  v21 = MEMORY[0x24BDAC7A8](v19);
  v81 = (char *)&v61 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v21);
  v23 = (char *)&v61 - v22;
  v65 = (char *)&v61 - v22;
  v24 = type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, a8, a13);
  v25 = *(_QWORD *)(v24 - 8);
  v63 = v24;
  v26 = *(_QWORD *)(v25 + 64);
  v27 = MEMORY[0x24BDAC7A8](v24);
  v29 = (char *)&v61 - v28;
  v64 = (char *)&v61 - v28;
  v73 = *(_QWORD *)(a6 - 8);
  v30 = v73;
  MEMORY[0x24BDAC7A8](v27);
  v32 = (char *)&v61 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = v32;
  v61 = a6;
  v75 = type metadata accessor for VectorizedAreaPlotContent(0, a6, v82, v33);
  v77 = *(_QWORD *)(v75 - 8);
  MEMORY[0x24BDAC7A8](v75);
  v67 = (uint64_t)&v61 - v34;
  (*(void (**)(char *, uint64_t, uint64_t))(v30 + 16))(v32, v84, a6);
  (*(void (**)(char *, uint64_t, uint64_t))(v25 + 16))(v29, v86, v24);
  v35 = v79;
  v36 = (void (*)(char *, uint64_t, uint64_t))v79[2];
  v36(v23, v87, v19);
  v36(v81, v89, v19);
  v37 = v80;
  (*(void (**)(char *, uint64_t, uint64_t))(v80 + 16))(v83, v88, v85);
  v38 = *(unsigned __int8 *)(v25 + 80);
  v62 = v25;
  v39 = (v38 + 80) & ~v38;
  v40 = *((unsigned __int8 *)v35 + 80);
  v41 = (v26 + v40 + v39) & ~v40;
  v42 = (v20 + v40 + v41) & ~v40;
  v43 = (v20 + *(unsigned __int8 *)(v37 + 80) + v42) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80);
  v44 = (char *)swift_allocObject();
  v45 = v61;
  v46 = v71;
  *((_QWORD *)v44 + 2) = v61;
  *((_QWORD *)v44 + 3) = v46;
  v47 = v74;
  *((_QWORD *)v44 + 4) = v68;
  *((_QWORD *)v44 + 5) = v47;
  v48 = v82;
  v49 = v72;
  *((_QWORD *)v44 + 6) = v82;
  *((_QWORD *)v44 + 7) = v49;
  v50 = v76;
  *((_QWORD *)v44 + 8) = v69;
  *((_QWORD *)v44 + 9) = v50;
  v51 = v63;
  (*(void (**)(char *, char *, uint64_t))(v25 + 32))(&v44[v39], v64, v63);
  v52 = v79;
  v53 = (void (*)(char *, char *, uint64_t))v79[4];
  v53(&v44[v41], v65, v19);
  v53(&v44[v42], v81, v19);
  v54 = &v44[v43];
  v55 = v80;
  v56 = v85;
  (*(void (**)(char *, char *, uint64_t))(v80 + 32))(v54, v83, v85);
  v57 = v67;
  sub_2142868CC((uint64_t)v66, (uint64_t)sub_21428B018, (uint64_t)v44, v45, (uint64_t)&type metadata for AreaMark, v48, (uint64_t)&protocol witness table for AreaMark, v67);
  (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v88, v56);
  v58 = (void (*)(uint64_t, uint64_t))v52[1];
  v58(v89, v19);
  v58(v87, v19);
  (*(void (**)(uint64_t, uint64_t))(v62 + 8))(v86, v51);
  (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v84, v45);
  v59 = v75;
  MEMORY[0x2199CD934](&protocol conformance descriptor for VectorizedAreaPlotContent<A>, v75);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v77 + 32))(v78, v57, v59);
}

void *sub_21428A574@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X6>, uint64_t a7@<X7>, void *a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  void (*v38)(char *, uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  _BYTE v78[320];

  v74 = a4;
  v75 = a5;
  v69 = a3;
  v65 = a1;
  v66 = a2;
  v76 = a8;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v70 = a9;
  v71 = a13;
  v16 = type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, a9, a13);
  v72 = *(_QWORD *)(v16 - 8);
  v73 = v16;
  MEMORY[0x24BDAC7A8](v16);
  v68 = (char *)&v54 - v17;
  v19 = type metadata accessor for PlottableValue(0, a9, a13, v18);
  MEMORY[0x24BDAC7A8](v19);
  v67 = (uint64_t)&v54 - v20;
  v60 = a6;
  v61 = a11;
  v64 = type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, a6, a11);
  v62 = *(_QWORD *)(v64 - 8);
  MEMORY[0x24BDAC7A8](v64);
  v59 = (char *)&v54 - v21;
  v23 = type metadata accessor for PlottableValue(0, a6, a11, v22);
  v24 = MEMORY[0x24BDAC7A8](v23);
  v63 = (uint64_t)&v54 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v24);
  v77 = (uint64_t)&v54 - v26;
  v55 = type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, a7, a12);
  v27 = *(_QWORD *)(v55 - 8);
  v28 = MEMORY[0x24BDAC7A8](v55);
  v30 = (char *)&v54 - v29;
  v31 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](v28);
  v33 = (char *)&v54 - v32;
  v57 = a7;
  v58 = a12;
  v35 = type metadata accessor for PlottableValue(0, a7, a12, v34);
  MEMORY[0x24BDAC7A8](v35);
  v37 = (char *)&v54 - v36;
  v56 = (uint64_t)&v54 - v36;
  v38 = *(void (**)(char *, uint64_t, uint64_t))(v31 + 16);
  v39 = v65;
  v38(v33, v65, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v27 + 16))(v30, v66, v55);
  sub_214270F68((uint64_t)v33, (uint64_t)v30, a7, AssociatedTypeWitness, a12, (uint64_t)v37);
  v40 = v39;
  v38(v33, v39, AssociatedTypeWitness);
  v41 = *(void (**)(char *, uint64_t, uint64_t))(v62 + 16);
  v42 = (uint64_t)v59;
  v43 = v64;
  v41(v59, v69, v64);
  v44 = v60;
  v45 = v61;
  sub_214270F68((uint64_t)v33, v42, v60, AssociatedTypeWitness, v61, v77);
  v38(v33, v40, AssociatedTypeWitness);
  v41((char *)v42, v74, v43);
  v46 = v63;
  sub_214270F68((uint64_t)v33, v42, v44, AssociatedTypeWitness, v45, v63);
  v38(v33, v40, AssociatedTypeWitness);
  v47 = v68;
  (*(void (**)(char *, uint64_t, uint64_t))(v72 + 16))(v68, v75, v73);
  v48 = v67;
  v49 = (uint64_t)v47;
  v50 = v70;
  v51 = AssociatedTypeWitness;
  v52 = v71;
  sub_214270F68((uint64_t)v33, v49, v70, v51, v71, v67);
  AreaMark.init<A, B, C>(x:yStart:yEnd:series:)(v56, v77, v46, v48, v57, v44, v50, v58, v78, v45, v52);
  return memcpy(v76, v78, 0x131uLL);
}

uint64_t sub_21428A94C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  void (*v20)(char *, uint64_t);
  uint64_t TupleTypeMetadata2;
  uint64_t v22;
  uint64_t v23;
  uint64_t TupleTypeMetadata3;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t);
  uint64_t v37;
  char *v38;
  void (*v39)(char *, uint64_t);
  uint64_t v40;
  uint64_t v41;
  char *v42;
  void (*v43)(char *, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(char *, uint64_t);
  uint64_t v50;
  char *v51;
  void (*v52)(char *, uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;

  v1 = v0[3];
  v2 = v0[4];
  v3 = v0[5];
  v58 = v2;
  v4 = v0[7];
  v5 = v0[8];
  v6 = v0[9];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, v2, v5);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = (*(unsigned __int8 *)(v9 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v11 = *(_QWORD *)(v9 + 64);
  v62 = v1;
  v59 = v4;
  v61 = type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, v1, v4);
  v12 = *(_QWORD *)(v61 - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = (v10 + v11 + v13) & ~v13;
  v15 = *(_QWORD *)(v12 + 64);
  v64 = (v15 + v13 + v14) & ~v13;
  v60 = v6;
  v16 = type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, v3, v6);
  v63 = *(unsigned __int8 *)(*(_QWORD *)(v16 - 8) + 80);
  v17 = v15 + v63;
  v18 = (char *)v0 + v10;
  sub_2141ED0BC(*(_QWORD *)v18, *((_QWORD *)v18 + 1), v18[16]);
  swift_bridgeObjectRelease();
  v19 = &v18[*(int *)(v8 + 44)];
  type metadata accessor for PlottableProjection.Storage(0, AssociatedTypeWitness, v58, v5);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v58 - 8) + 8))(v19, v58);
      break;
    case 1u:
      v20 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v58 - 8) + 8);
      v20(v19, v58);
      TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
      v20(&v19[*(int *)(TupleTypeMetadata2 + 48)], v58);
      break;
    case 2u:
      swift_release();
      break;
    case 3u:
      swift_release();
      swift_release();
      break;
    case 4u:
      swift_release();
      sub_2144258E0();
      v22 = sub_214423C48();
      v23 = sub_214423C54();
      TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(&v19[*(int *)(TupleTypeMetadata3 + 48)], v22);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v23 - 8) + 8))(&v19[*(int *)(TupleTypeMetadata3 + 64)], v23);
      break;
    default:
      break;
  }
  v25 = v17 + v64;
  v26 = (char *)v0 + v14;
  sub_2141ED0BC(*(_QWORD *)v26, *((_QWORD *)v26 + 1), v26[16]);
  swift_bridgeObjectRelease();
  v28 = v61;
  v27 = v62;
  v29 = &v26[*(int *)(v61 + 44)];
  type metadata accessor for PlottableProjection.Storage(0, AssociatedTypeWitness, v62, v59);
  v30 = v63;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v62 - 8) + 8))(v29, v62);
      break;
    case 1u:
      v31 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v62 - 8) + 8);
      v31(v29, v62);
      v32 = swift_getTupleTypeMetadata2();
      v31(&v29[*(int *)(v32 + 48)], v62);
      break;
    case 2u:
      swift_release();
      break;
    case 3u:
      swift_release();
      swift_release();
      break;
    case 4u:
      swift_release();
      sub_2144258E0();
      v33 = sub_214423C48();
      v34 = sub_214423C54();
      v35 = swift_getTupleTypeMetadata3();
      v36 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v33 - 8) + 8);
      v37 = v33;
      v28 = v61;
      v36(&v29[*(int *)(v35 + 48)], v37);
      v38 = &v29[*(int *)(v35 + 64)];
      v39 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v34 - 8) + 8);
      v40 = v34;
      v27 = v62;
      v30 = v63;
      v39(v38, v40);
      break;
    default:
      break;
  }
  v41 = v25 & ~v30;
  sub_2141ED0BC(*(_QWORD *)((char *)v0 + v64), *(_QWORD *)((char *)v0 + v64 + 8), *((_BYTE *)v0 + v64 + 16));
  swift_bridgeObjectRelease();
  v42 = (char *)v0 + v64 + *(int *)(v28 + 44);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v27 - 8) + 8))(v42, v27);
      break;
    case 1u:
      v43 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v27 - 8) + 8);
      v43(v42, v27);
      v44 = swift_getTupleTypeMetadata2();
      v43(&v42[*(int *)(v44 + 48)], v27);
      break;
    case 2u:
      swift_release();
      break;
    case 3u:
      swift_release();
      swift_release();
      break;
    case 4u:
      swift_release();
      sub_2144258E0();
      v45 = sub_214423C48();
      v46 = v16;
      v47 = sub_214423C54();
      v48 = swift_getTupleTypeMetadata3();
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v45 - 8) + 8))(&v42[*(int *)(v48 + 48)], v45);
      v49 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v47 - 8) + 8);
      v50 = v47;
      v16 = v46;
      v49(&v42[*(int *)(v48 + 64)], v50);
      break;
    default:
      break;
  }
  sub_2141ED0BC(*(_QWORD *)((char *)v0 + v41), *(_QWORD *)((char *)v0 + v41 + 8), *((_BYTE *)v0 + v41 + 16));
  swift_bridgeObjectRelease();
  v51 = (char *)v0 + v41 + *(int *)(v16 + 44);
  type metadata accessor for PlottableProjection.Storage(0, AssociatedTypeWitness, v3, v60);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v51, v3);
      break;
    case 1u:
      v52 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v3 - 8) + 8);
      v52(v51, v3);
      v53 = swift_getTupleTypeMetadata2();
      v52(&v51[*(int *)(v53 + 48)], v3);
      break;
    case 2u:
      swift_release();
      break;
    case 3u:
      swift_release();
      swift_release();
      break;
    case 4u:
      swift_release();
      sub_2144258E0();
      v54 = sub_214423C48();
      v55 = sub_214423C54();
      v56 = swift_getTupleTypeMetadata3();
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v54 - 8) + 8))(&v51[*(int *)(v56 + 48)], v54);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v55 - 8) + 8))(&v51[*(int *)(v56 + 64)], v55);
      break;
    default:
      return swift_deallocObject();
  }
  return swift_deallocObject();
}

void *sub_21428B018@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v3 = v2[3];
  v4 = v2[4];
  v22 = v4;
  v20 = v3;
  v21 = v2[5];
  v5 = v2[6];
  v6 = v2[7];
  v7 = v2[8];
  v8 = v2[9];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = *(_QWORD *)(type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, v4, v7) - 8);
  v11 = (*(unsigned __int8 *)(v10 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v12 = *(_QWORD *)(v10 + 64);
  v13 = *(_QWORD *)(type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, v3, v6) - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v15 = (v11 + v12 + v14) & ~v14;
  v16 = *(_QWORD *)(v13 + 64);
  v17 = (v16 + v14 + v15) & ~v14;
  v18 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, v21, v8)- 8)+ 80);
  return sub_21428A574(a1, (uint64_t)v2 + v11, (uint64_t)v2 + v15, (uint64_t)v2 + v17, (uint64_t)v2 + ((v16 + v18 + v17) & ~v18), v20, v22, a2, v21, v5, v6, v7, v8);
}

uint64_t AreaPlot<A>.init(x:yStart:yEnd:domain:function:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, char a12, __int128 a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17)
{
  _QWORD v19[2];
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  __int128 v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;

  v19[0] = a1;
  v19[1] = a2;
  v20 = a3 & 1;
  v21 = a4;
  v22 = a5;
  v23 = a6;
  v24 = a7 & 1;
  v25 = a8;
  v26 = a10;
  v27 = a11;
  v28 = a12 & 1;
  v29 = a13;
  v30 = a14;
  v31 = a15 & 1;
  v32 = a16;
  v33 = a17;
  sub_21428B1F4(v19);
  return sub_21428B22C((uint64_t)v19, a9);
}

_QWORD *sub_21428B1F4(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = result[6] & 1;
  v2 = result[10] & 1;
  v3 = result[14] & 1 | 0x8000000000000000;
  result[2] &= 1uLL;
  result[6] = v1;
  result[10] = v2;
  result[14] = v3;
  return result;
}

uint64_t sub_21428B22C(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  *(_OWORD *)a2 = *(_OWORD *)a1;
  v2 = *(_OWORD *)(a1 + 16);
  v3 = *(_OWORD *)(a1 + 32);
  v4 = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a2 + 48) = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 64) = v4;
  *(_OWORD *)(a2 + 16) = v2;
  *(_OWORD *)(a2 + 32) = v3;
  v5 = *(_OWORD *)(a1 + 80);
  v6 = *(_OWORD *)(a1 + 96);
  v7 = *(_OWORD *)(a1 + 112);
  *(_QWORD *)(a2 + 128) = *(_QWORD *)(a1 + 128);
  *(_OWORD *)(a2 + 96) = v6;
  *(_OWORD *)(a2 + 112) = v7;
  *(_OWORD *)(a2 + 80) = v5;
  return a2;
}

uint64_t AreaPlot<A>.init(x:yStart:yEnd:domain:function:)@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  _QWORD v21[2];
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;

  v21[0] = sub_21442480C();
  v21[1] = v10;
  v22 = v11 & 1;
  v23 = v12;
  v24 = sub_21442480C();
  v25 = v13;
  v26 = v14 & 1;
  v27 = v15;
  v28 = sub_21442480C();
  v29 = v16;
  v30 = v17 & 1;
  v31 = v18;
  v32 = a6;
  v33 = a7;
  v34 = a8 & 1;
  v35 = a9;
  v36 = a10;
  sub_21428B1F4(v21);
  return sub_21428B22C((uint64_t)v21, a1);
}

uint64_t AreaPlot<A>.init<A, B, C>(x:yStart:yEnd:domain:function:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  char v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  char v60;
  char v61;
  char v62;
  _QWORD v63[2];
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  uint64_t v78;

  v57 = a8;
  v56 = a7;
  v53 = a6;
  v55 = a5;
  v54 = a4;
  v51 = a3;
  v45 = a2;
  v46 = a1;
  v58 = a9;
  v52 = a15;
  v50 = a14;
  v15 = *(_QWORD *)(a12 - 8);
  v16 = MEMORY[0x24BDAC7A8](a1);
  v18 = (char *)&v39 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = *(_QWORD *)(a11 - 8);
  v20 = MEMORY[0x24BDAC7A8](v16);
  v22 = (char *)&v39 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = *(_QWORD *)(a10 - 8);
  MEMORY[0x24BDAC7A8](v20);
  (*(void (**)(char *))(v23 + 16))((char *)&v39 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  v49 = sub_214424818();
  v48 = v25;
  v44 = v26;
  v47 = v27;
  v28 = v45;
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v22, v45, a11);
  v50 = sub_214424818();
  v43 = v29;
  v41 = v30;
  v42 = v31;
  v32 = v51;
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v18, v51, a12);
  v33 = sub_214424818();
  v52 = v34;
  v36 = v35;
  v40 = v37;
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v32, a12);
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v28, a11);
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v46, a10);
  v62 = v44 & 1;
  v61 = v41 & 1;
  v60 = v36 & 1;
  v59 = v53 & 1;
  v63[0] = v49;
  v63[1] = v48;
  v64 = v44 & 1;
  v65 = v47;
  v66 = v50;
  v67 = v43;
  v68 = v41 & 1;
  v69 = v42;
  v70 = v33;
  v71 = v52;
  v72 = v36 & 1;
  v73 = v40;
  v74 = v54;
  v75 = v55;
  v76 = v53 & 1;
  v77 = v56;
  v78 = v57;
  sub_21428B1F4(v63);
  return sub_21428B22C((uint64_t)v63, v58);
}

uint64_t AreaPlot<A>.init(x:y:domain:function:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14)
{
  _QWORD v16[2];
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;

  v16[0] = a1;
  v16[1] = a2;
  v17 = a3 & 1;
  v18 = a4;
  v19 = a5;
  v20 = a6;
  v21 = a7 & 1;
  v22 = a8;
  v23 = a10;
  v24 = a11;
  v25 = a12 & 1;
  v26 = a13;
  v27 = a14;
  sub_21428B79C(v16);
  return sub_21428B22C((uint64_t)v16, a9);
}

_QWORD *sub_21428B79C(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = result[6] & 1;
  v2 = result[10] & 1;
  v3 = result[14] & 1;
  result[2] &= 1uLL;
  result[6] = v1;
  result[10] = v2;
  result[14] = v3;
  return result;
}

uint64_t AreaPlot<A>.init(x:y:domain:function:)@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  _QWORD v14[2];
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;

  v14[0] = sub_21442480C();
  v14[1] = v6;
  v15 = v7 & 1;
  v16 = v8;
  v17 = sub_21442480C();
  v18 = v9;
  v19 = v10 & 1;
  v20 = v11;
  v21 = a2;
  v22 = a3;
  v23 = a4 & 1;
  v24 = a5;
  v25 = a6;
  sub_21428B79C(v14);
  return sub_21428B22C((uint64_t)v14, a1);
}

uint64_t AreaPlot<A>.init<A, B>(x:y:domain:function:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD v41[2];
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;

  v38 = a6;
  v39 = a7;
  v37 = a5;
  v36 = a4;
  v35 = a3;
  v34 = a1;
  v40 = a9;
  v12 = *(_QWORD *)(a10 - 8);
  v13 = MEMORY[0x24BDAC7A8](a1);
  v15 = (char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v13);
  (*(void (**)(char *))(v17 + 16))((char *)&v31 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  v32 = sub_214424818();
  v31 = v19;
  v21 = v20;
  v33 = v22;
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, a2, a10);
  v23 = sub_214424818();
  v25 = v24;
  v27 = v26;
  v29 = v28;
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a2, a10);
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v34, a8);
  v41[0] = v32;
  v41[1] = v31;
  v42 = v21 & 1;
  v43 = v33;
  v44 = v23;
  v45 = v25;
  v46 = v27 & 1;
  v47 = v29;
  v48 = v35;
  v49 = v36;
  v50 = v37 & 1;
  v51 = v38;
  v52 = v39;
  sub_21428B79C(v41);
  return sub_21428B22C((uint64_t)v41, v40);
}

void sub_21428BAD8(double (*a1)(double), uint64_t a2)
{
  double v3;
  char v4;
  double v5;
  double v6;
  char v7;
  char v8;
  double v9;
  char v10;
  __n128 v11;
  double v12;

  sub_21437F8AC(a1, 0.014959965, 659.734457, a2, 1000);
  if ((v4 & 1) == 0)
  {
    if (v3 * -1.5 <= v3 * 1.5)
      return;
    __break(1u);
  }
  sub_21437FEE0((double (*)(void))a1);
  v6 = v5;
  v8 = v7;
  sub_21438056C(a1);
  if ((v8 & 1) != 0)
    goto LABEL_10;
  v12 = v6;
  if ((v10 & 1) != 0)
  {
LABEL_13:
    if (v12 < 0.0)
      __break(1u);
    return;
  }
  v11.n128_f64[0] = v9;
  if (v6 <= v9)
    v12 = v9;
  if (v12 < 0.0)
  {
    __break(1u);
LABEL_10:
    if ((v10 & 1) != 0)
    {
      sub_214380DA0((uint64_t (*)(__n128))a1, v11);
      return;
    }
    v12 = v9;
    if (v9 >= 0.0)
      return;
    __break(1u);
    goto LABEL_13;
  }
}

uint64_t sub_21428BBB4(uint64_t a1, uint64_t a2, double a3, double a4)
{
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  uint64_t result;
  double v15;
  double v16;

  swift_retain();
  v8 = sub_21437C60C(0, 0, 0, 1, a1, a2, a3, a4);
  v10 = v9;
  swift_release();
  swift_retain();
  v11 = sub_21437C610(0, 0, 0, 1, a1, a2, a3, a4);
  v13 = v12;
  result = swift_release();
  if (v11 >= v8)
    v15 = v8;
  else
    v15 = v11;
  if (v10 > v13)
    v16 = v10;
  else
    v16 = v13;
  if (v15 > v16)
    __break(1u);
  return result;
}

uint64_t sub_21428BC80(uint64_t (*a1)(double))
{
  double v2;
  char v3;
  double v4;
  uint64_t result;
  double v6;
  double v7;
  char v8;
  char v9;
  double v10;
  double v11;
  char v12;
  char v13;
  double v14;
  __n128 v15;
  double v16;
  __n128 v17;
  double v18;
  double v19;
  __n128 v20;
  double v21;
  double v22;
  __n128 v23;
  double v24;
  double v25;
  __n128 v26;
  double v27;
  double v28;
  __n128 v29;
  double v30;
  double v31;
  __n128 v32;
  double v33;
  double v34;
  __n128 v35;

  swift_retain_n();
  sub_2143810D0(1000, a1, 0.014959965, 659.734457);
  if ((v3 & 1) == 0)
  {
    v4 = v2;
    result = swift_release_n();
    if (v4 * -1.5 <= v4 * 1.5)
      return result;
    __break(1u);
  }
  swift_retain();
  sub_214381344((void (*)(void))a1);
  v7 = v6;
  v9 = v8;
  swift_release();
  sub_21438056C((double (*)(double))sub_21428FC18);
  v11 = v10;
  v13 = v12;
  if ((v9 & 1) != 0)
    goto LABEL_10;
  result = swift_release_n();
  v14 = v7;
  if ((v13 & 1) != 0)
  {
LABEL_13:
    if (v14 >= 0.0)
      return result;
    __break(1u);
LABEL_32:
    __break(1u);
    return result;
  }
  if (v7 <= v11)
    v14 = v11;
  if (v14 < 0.0)
  {
    __break(1u);
LABEL_10:
    if ((v13 & 1) == 0)
    {
      result = swift_release_n();
      v14 = v11;
      if (v11 >= 0.0)
        return result;
      __break(1u);
      goto LABEL_13;
    }
    swift_retain_n();
    v15.n128_u64[0] = 0xC0F86A0000000000;
    sub_2143819D0((uint64_t)a1, v15, 100000.0);
    if (v16 <= 0.1)
    {
      swift_retain();
      v17.n128_u64[0] = -10.0;
      sub_2143819D0((uint64_t)a1, v17, 10.0);
      v19 = v18;
      result = swift_release();
      if (v19 < 0.4)
      {
        if (8.0 < 0.0)
          goto LABEL_32;
        swift_retain();
        v20.n128_f64[0] = -8.0;
        sub_2143819D0((uint64_t)a1, v20, 8.0);
        v22 = v21;
        result = swift_release();
        if (v22 < 0.4)
        {
          if (6.0 < 0.0)
            goto LABEL_32;
          swift_retain();
          v23.n128_f64[0] = -6.0;
          sub_2143819D0((uint64_t)a1, v23, 6.0);
          v25 = v24;
          result = swift_release();
          if (v25 < 0.4)
          {
            if (4.0 < 0.0)
              goto LABEL_32;
            swift_retain();
            v26.n128_f64[0] = -4.0;
            sub_2143819D0((uint64_t)a1, v26, 4.0);
            v28 = v27;
            result = swift_release();
            if (v28 < 0.4)
            {
              if (2.0 < 0.0)
                goto LABEL_32;
              swift_retain();
              v29.n128_f64[0] = -2.0;
              sub_2143819D0((uint64_t)a1, v29, 2.0);
              v31 = v30;
              result = swift_release();
              if (v31 < 0.4)
              {
                if (1.0 < 0.0)
                  goto LABEL_32;
                swift_retain();
                v32.n128_f64[0] = -1.0;
                sub_2143819D0((uint64_t)a1, v32, 1.0);
                v34 = v33;
                result = swift_release();
                if (v34 < 0.4)
                {
                  if (0.5 < 0.0)
                    goto LABEL_32;
                  swift_retain();
                  v35.n128_f64[0] = -0.5;
                  sub_2143819D0((uint64_t)a1, v35, 0.5);
                  swift_release();
                }
              }
            }
          }
        }
      }
    }
    return swift_release_n();
  }
  return result;
}

uint64_t static FunctionAreaPlotContent._renderChartContent(_:_:)@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t result;
  uint64_t v16;
  double v17;
  double v18;
  double v19;
  double v20;
  uint64_t *v21;
  int v22;
  uint64_t *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  double v46;
  double v47;
  double v48;
  double v49;
  uint64_t v50;
  __n128 v51;
  __n128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  int64_t v60;
  int64_t v61;
  int64_t v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t i;
  char v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unsigned __int8 v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int *v93;
  uint64_t v94;
  uint64_t v95;
  char v96;
  uint64_t v97;
  char v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  char v102;
  char v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char v126;
  uint64_t v127;
  uint64_t v128;
  char v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  int v146;
  int v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t KeyPath;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t *v155;
  _QWORD *v156;
  uint64_t v157;
  uint64_t v158;
  int *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  int v170;
  uint64_t *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  int v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  char v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  unsigned __int8 v198;
  _BYTE v199[136];
  _OWORD v200[2];
  char v201;
  _OWORD v202[2];
  char v203;
  _BYTE v204[136];
  uint64_t v205;
  _QWORD v206[3];
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  _BYTE v210[152];

  v6 = sub_2141D8BF8(qword_254D6A0A8);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  *(_QWORD *)&v190 = (char *)&v145 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ChartContentRenderContext.Environment(0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v145 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for SgShapeStyle();
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v145 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21428B22C(a1, (uint64_t)v204);
  result = sub_21428B22C(a1, (uint64_t)v210);
  v16 = *((_QWORD *)a2 + 1);
  v17 = *(double *)(v16 + 24);
  v18 = *(double *)(v16 + 32);
  if (v18 >= v17)
    v19 = *(double *)(v16 + 24);
  else
    v19 = *(double *)(v16 + 32);
  if (v17 > v18)
    v20 = *(double *)(v16 + 24);
  else
    v20 = *(double *)(v16 + 32);
  if (v19 > v20)
  {
LABEL_55:
    __break(1u);
LABEL_56:
    __break(1u);
LABEL_57:
    __break(1u);
LABEL_58:
    __break(1u);
LABEL_59:
    __break(1u);
LABEL_60:
    __break(1u);
    return result;
  }
  v21 = (uint64_t *)(v16 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_xScale);
  v22 = *(unsigned __int8 *)(v16 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_xScale + 104);
  if ((v22 & 1) != 0
    || (v23 = (uint64_t *)(v16 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_yScale),
        v24 = *(unsigned __int8 *)(v16 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_yScale + 104),
        (v24 & 1) != 0)
    || (v189 = v7, v25 = v21[10], *((_BYTE *)v21 + 80) == 0xFF)
    || (v26 = v23[10], *((_BYTE *)v23 + 80) == 0xFF))
  {
    *a3 = 0xE000000000000000;
    return result;
  }
  v158 = v6;
  LODWORD(v171) = *a2;
  v27 = *v21;
  v28 = v21[1];
  v29 = v21[2];
  v30 = v21[3];
  v31 = v21[4];
  v32 = v21[5];
  v33 = v21[6];
  v34 = v21[7];
  v35 = v21[8];
  v36 = v21[9];
  v187 = v26;
  v188 = v36;
  v185 = v24;
  v38 = v21[11];
  v37 = v21[12];
  v39 = v23[1];
  v177 = *v23;
  v178 = v39;
  v40 = v23[3];
  v179 = v23[2];
  v180 = v40;
  v41 = v23[5];
  v181 = v23[4];
  v182 = v41;
  v42 = v23[7];
  v43 = v23[8];
  v183 = v23[6];
  v184 = v42;
  v45 = v23[11];
  v44 = v23[12];
  v46 = *(double *)&v37;
  v47 = *(double *)&v38;
  v48 = *(double *)&v45;
  v49 = *(double *)&v44;
  v186 = v23[9];
  v170 = v22;
  v174 = v37;
  v175 = v38;
  v161 = v35;
  v162 = v27;
  v163 = v28;
  v164 = v29;
  v165 = v30;
  v166 = v31;
  v167 = v32;
  v168 = v33;
  v169 = v34;
  sub_21421C7C0(v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v25, v38, v37, v22);
  v172 = v44;
  v144 = v44;
  v173 = v45;
  v143 = v45;
  LODWORD(v44) = v187;
  v50 = v186;
  v160 = v43;
  sub_21421C7C0(v177, v178, v179, v180, v181, v182, v183, v184, v43, v186, v187, v143, v144, v185);
  v176 = v25;
  v51.n128_f64[0] = v19;
  v52.n128_f64[0] = v20;
  result = sub_21428CCEC(v188, v25, v50, v44, v47, v46, v48, v49, v51, v52);
  v53 = result;
  if ((v171 & 1) == 0)
  {
    v171 = a3;
    result = sub_214424770();
    v67 = *(_QWORD *)(v53 + 16);
    if (!v67)
    {
LABEL_47:
      swift_bridgeObjectRelease();
      v159 = (int *)type metadata accessor for SgPath(0);
      v77 = swift_allocBox();
      v79 = v78;
      v189 = *(_QWORD *)(*(_QWORD *)(v16 + 16) + 24);
      *(_QWORD *)&v190 = v77;
      v81 = v194;
      v80 = v195;
      v82 = v197;
      v156 = (_QWORD *)v196;
      v157 = v194;
      v158 = v197;
      v83 = v16 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_environment;
      v84 = v198;
      swift_beginAccess();
      sub_2141EEEC4(v83, (uint64_t)v11);
      v85 = v81;
      v86 = (uint64_t)v156;
      sub_2141FE3EC(v85, v80, (uint64_t)v156, v82, v84);
      sub_2141FFC88((uint64_t)v11, (uint64_t)v14);
      sub_21421BB38(v177, v178, v179, v180, v181, v182, v183, v184, v160, v186, v187, v173, v172, v185);
      sub_21421BB38(v162, v163, v164, v165, v166, v167, v168, v169, v161, v188, v176, v175, v174, v170);
      v87 = v157;
      v88 = v86;
      v89 = v86;
      v90 = v158;
      sub_2141EEF3C(v157, v80, v89, v158, v84);
      v91 = *(_QWORD *)(v83 + *(int *)(v9 + 64));
      v92 = *(_QWORD *)(v83 + *(int *)(v9 + 68));
      *(_QWORD *)v79 = v189;
      *(_QWORD *)(v79 + 8) = v87;
      *(_QWORD *)(v79 + 16) = v80;
      *(_QWORD *)(v79 + 24) = v88;
      *(_QWORD *)(v79 + 32) = v90;
      *(_BYTE *)(v79 + 40) = v84;
      v93 = v159;
      result = sub_21428EC0C((uint64_t)v14, v79 + v159[6]);
      *(_QWORD *)(v79 + v93[7]) = v91;
      *(_QWORD *)(v79 + v93[8]) = v92;
      *(_BYTE *)(v79 + v93[9]) = 0;
      *v171 = v190 | 0x9000000000000000;
      return result;
    }
    v68 = 0;
    v69 = v53 + 32;
    v155 = &v207;
    v156 = v206;
    v158 = v67;
    v159 = (int *)v53;
    v157 = v53 + 32;
    while (v68 < *(_QWORD *)(v53 + 16))
    {
      v72 = *(_QWORD *)(v69 + 8 * v68);
      if (*(_QWORD *)(v72 + 16) >= 2uLL)
      {
        v189 = v68;
        swift_bridgeObjectRetain();
        sub_214424770();
        v73 = *(_QWORD *)(v72 + 16);
        if (v73)
        {
          swift_bridgeObjectRetain();
          for (i = 0; i != v73; ++i)
          {
            v190 = *(_OWORD *)(v72 + 32 * i + 32);
            v202[0] = v191;
            v202[1] = v192;
            v203 = v193;
            sub_2141FE3B0((uint64_t)v202, (uint64_t)&v208);
            sub_2141FE404((uint64_t)&v208, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141FE3EC);
            v75 = sub_214424728();
            sub_2141FE404((uint64_t)v202, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141EEF3C);
            if ((v75 & 1) != 0)
              sub_2144246F8();
            else
              sub_21442471C();
          }
          result = swift_bridgeObjectRelease();
          while (1)
          {
            v76 = v73 - 1;
            if (v73 < 1)
              break;
            if (v76 >= *(_QWORD *)(v72 + 16))
              goto LABEL_54;
            result = sub_21442471C();
            --v73;
            if (!v76)
              goto LABEL_32;
          }
          __break(1u);
LABEL_54:
          __break(1u);
          goto LABEL_55;
        }
LABEL_32:
        swift_bridgeObjectRelease();
        sub_2144246E0();
        v200[0] = v191;
        v200[1] = v192;
        v201 = v193;
        v70 = (uint64_t)v156;
        *v156 = 0;
        *(_QWORD *)(v70 + 8) = 0;
        v205 = 0x3FF0000000000000;
        v206[2] = 0x3FF0000000000000;
        v71 = (uint64_t)v155;
        *v155 = 0;
        *(_QWORD *)(v71 + 8) = 0;
        sub_2141FE3B0((uint64_t)v200, (uint64_t)v199);
        sub_2141FE404((uint64_t)v199, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141FE3EC);
        sub_2144246A4();
        sub_2141FE404((uint64_t)v200, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141EEF3C);
        result = sub_2141FE404((uint64_t)v200, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141EEF3C);
        v67 = v158;
        v53 = (uint64_t)v159;
        v68 = v189;
        v69 = v157;
      }
      if (++v68 == v67)
        goto LABEL_47;
    }
    goto LABEL_60;
  }
  v54 = *(_QWORD *)(result + 16);
  v159 = (int *)result;
  if (v54)
  {
    v55 = result + 32;
    v56 = MEMORY[0x24BEE4AF8];
    while (1)
    {
      v57 = a3;
      v58 = *(_QWORD *)v55;
      v59 = *(_QWORD *)(*(_QWORD *)v55 + 16);
      v60 = *(_QWORD *)(v56 + 16);
      v61 = v60 + v59;
      if (__OFADD__(v60, v59))
        goto LABEL_56;
      swift_bridgeObjectRetain();
      result = swift_isUniquelyReferenced_nonNull_native();
      if (!(_DWORD)result || v61 > *(_QWORD *)(v56 + 24) >> 1)
      {
        if (v60 <= v61)
          v62 = v60 + v59;
        else
          v62 = v60;
        result = (uint64_t)sub_214224264((char *)result, v62, 1, (char *)v56);
        v56 = result;
      }
      a3 = v57;
      if (*(_QWORD *)(v58 + 16))
      {
        v63 = *(_QWORD *)(v56 + 16);
        if ((*(_QWORD *)(v56 + 24) >> 1) - v63 < v59)
          goto LABEL_58;
        result = (uint64_t)memcpy((void *)(v56 + 32 * v63 + 32), (const void *)(v58 + 32), 32 * v59);
        if (v59)
        {
          v64 = *(_QWORD *)(v56 + 16);
          v65 = __OFADD__(v64, v59);
          v66 = v64 + v59;
          if (v65)
            goto LABEL_59;
          *(_QWORD *)(v56 + 16) = v66;
        }
      }
      else if (v59)
      {
        goto LABEL_57;
      }
      result = swift_bridgeObjectRelease();
      v55 += 8;
      if (!--v54)
        goto LABEL_49;
    }
  }
  v56 = MEMORY[0x24BEE4AF8];
LABEL_49:
  swift_bridgeObjectRelease();
  sub_21428B22C((uint64_t)v204, (uint64_t)&v205);
  if (sub_21428E9B8((uint64_t)&v205) == 1)
  {
    v94 = sub_21428E9C4((uint64_t)&v205);
    v95 = *(_QWORD *)v94;
    v159 = *(int **)(v94 + 8);
    v96 = *(_BYTE *)(v94 + 16);
    v171 = *(uint64_t **)(v94 + 24);
    v97 = *(_QWORD *)(v94 + 32);
    v155 = *(uint64_t **)(v94 + 40);
    v156 = (_QWORD *)v97;
    v98 = *(_BYTE *)(v94 + 48);
    v99 = *(_QWORD *)(v94 + 64);
    v157 = *(_QWORD *)(v94 + 56);
    v100 = v157;
    v153 = *(_QWORD *)(v94 + 72);
    v154 = v99;
    LOBYTE(v97) = *(_BYTE *)(v94 + 80);
    v149 = *(_QWORD *)(v94 + 88);
    v101 = v96 & 1;
    v102 = v98 & 1;
    v103 = v97 & 1;
    v146 = v97 & 1;
    v147 = v98 & 1;
    sub_21428B22C((uint64_t)v210, (uint64_t)v199);
    v104 = sub_21428E9C4((uint64_t)v199);
    sub_21428E9D4(v104);
    swift_release();
    v148 = *(_QWORD *)(v56 + 16);
    KeyPath = swift_getKeyPath();
    v105 = swift_allocObject();
    *(_QWORD *)(v105 + 16) = v56;
    v106 = v95;
    v152 = v95;
    v107 = (uint64_t)v159;
    *(_QWORD *)(v105 + 24) = v95;
    *(_QWORD *)(v105 + 32) = v107;
    v108 = v101;
    LODWORD(v151) = v101;
    *(_BYTE *)(v105 + 40) = v101;
    v109 = v188;
    *(_QWORD *)(v105 + 48) = v171;
    *(_QWORD *)(v105 + 56) = v109;
    *(_BYTE *)(v105 + 64) = v176;
    v110 = v174;
    *(_QWORD *)(v105 + 72) = v175;
    *(_QWORD *)(v105 + 80) = v110;
    v111 = (uint64_t)v155;
    v112 = (uint64_t)v156;
    *(_QWORD *)(v105 + 88) = v156;
    *(_QWORD *)(v105 + 96) = v111;
    *(_BYTE *)(v105 + 104) = v102;
    v113 = v186;
    *(_QWORD *)(v105 + 112) = v100;
    *(_QWORD *)(v105 + 120) = v113;
    *(_BYTE *)(v105 + 128) = v187;
    v114 = v172;
    *(_QWORD *)(v105 + 136) = v173;
    *(_QWORD *)(v105 + 144) = v114;
    v116 = v153;
    v115 = v154;
    *(_QWORD *)(v105 + 152) = v154;
    *(_QWORD *)(v105 + 160) = v116;
    *(_BYTE *)(v105 + 168) = v103;
    v117 = v148;
    *(_QWORD *)(v105 + 176) = v149;
    v208 = 0;
    v209 = v117;
    sub_2141DD130(v106, v107, v108);
    swift_bridgeObjectRetain();
    v118 = v111;
    LOBYTE(v111) = v147;
    sub_2141DD130(v112, v118, v147);
    swift_bridgeObjectRetain();
    LOBYTE(v112) = v146;
    sub_2141DD130(v115, v116, v146);
    swift_bridgeObjectRetain();
    sub_2141D8BF8(&qword_253F13548);
    sub_2141FE010();
    v119 = v190;
    sub_214424B54();
    swift_release();
    swift_release();
    sub_21428DA08(v119, 1, v16, qword_254D6A0A8, (void (*)(void))sub_21428F9C4, a3);
    sub_2141ED0BC(v154, v153, v112);
    swift_bridgeObjectRelease();
    sub_2141ED0BC((uint64_t)v156, (uint64_t)v155, v111);
    swift_bridgeObjectRelease();
    sub_2141ED0BC(v152, (uint64_t)v159, v151);
  }
  else
  {
    v120 = sub_21428E9C4((uint64_t)&v205);
    v159 = *(int **)v120;
    v157 = *(_QWORD *)(v120 + 8);
    LODWORD(v156) = *(unsigned __int8 *)(v120 + 16);
    v122 = *(_QWORD *)(v120 + 24);
    v121 = *(_QWORD *)(v120 + 32);
    v153 = *(_QWORD *)(v120 + 40);
    v154 = v121;
    LODWORD(v171) = *(unsigned __int8 *)(v120 + 48);
    v155 = *(uint64_t **)(v120 + 56);
    sub_21428B22C((uint64_t)v210, (uint64_t)v199);
    v123 = sub_21428E9C4((uint64_t)v199);
    v125 = *(_QWORD *)v123;
    v124 = *(_QWORD *)(v123 + 8);
    v126 = *(_BYTE *)(v123 + 16);
    v127 = *(_QWORD *)(v123 + 32);
    v128 = *(_QWORD *)(v123 + 40);
    v129 = *(_BYTE *)(v123 + 48);
    v130 = *(_QWORD *)(v123 + 96);
    KeyPath = *(_QWORD *)(v123 + 56);
    v151 = v130;
    sub_2141DD130(v125, v124, v126);
    swift_bridgeObjectRetain();
    sub_2141DD130(v127, v128, v129);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_release();
    v131 = *(_QWORD *)(v56 + 16);
    v151 = swift_getKeyPath();
    v132 = swift_allocObject();
    *(_QWORD *)(v132 + 16) = v56;
    v133 = (uint64_t)v159;
    v134 = v157;
    *(_QWORD *)(v132 + 24) = v159;
    *(_QWORD *)(v132 + 32) = v134;
    v135 = (char)v156;
    *(_BYTE *)(v132 + 40) = (_BYTE)v156;
    v152 = v122;
    v136 = v188;
    *(_QWORD *)(v132 + 48) = v122;
    *(_QWORD *)(v132 + 56) = v136;
    *(_BYTE *)(v132 + 64) = v176;
    v137 = v174;
    *(_QWORD *)(v132 + 72) = v175;
    *(_QWORD *)(v132 + 80) = v137;
    v138 = v153;
    v139 = v154;
    *(_QWORD *)(v132 + 88) = v154;
    *(_QWORD *)(v132 + 96) = v138;
    v140 = (char)v171;
    *(_BYTE *)(v132 + 104) = (_BYTE)v171;
    v141 = v186;
    *(_QWORD *)(v132 + 112) = v155;
    *(_QWORD *)(v132 + 120) = v141;
    *(_BYTE *)(v132 + 128) = v187;
    v142 = v172;
    *(_QWORD *)(v132 + 136) = v173;
    *(_QWORD *)(v132 + 144) = v142;
    v208 = 0;
    v209 = v131;
    sub_2141DD130(v133, v134, v135);
    swift_bridgeObjectRetain();
    sub_2141DD130(v139, v138, v140);
    swift_bridgeObjectRetain();
    sub_2141D8BF8(&qword_253F13548);
    sub_2141FE010();
    v119 = v190;
    sub_214424B54();
    swift_release();
    swift_release();
    sub_21428DA08(v119, 1, v16, qword_254D6A0A8, (void (*)(void))sub_21428F9C4, a3);
    sub_2141ED0BC(v139, v138, (char)v171);
    swift_bridgeObjectRelease();
    sub_2141ED0BC((uint64_t)v159, v157, (char)v156);
  }
  swift_bridgeObjectRelease();
  sub_21421BB38(v177, v178, v179, v180, v181, v182, v183, v184, v160, v186, v187, v173, v172, v185);
  sub_21421BB38(v162, v163, v164, v165, v166, v167, v168, v169, v161, v188, v176, v175, v174, v170);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v189 + 8))(v119, v158);
}

unint64_t sub_21428CCEC(uint64_t a1, int a2, uint64_t a3, int a4, double a5, double a6, double a7, double a8, __n128 a9, __n128 a10)
{
  uint64_t v10;
  void (*v11)(__n128);
  uint64_t v12;
  int v17;
  uint64_t v18;
  __n128 v19;
  __n128 v20;
  double *v21;
  double *v22;
  long double v23;
  double v24;
  long double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  int v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  float64x2_t v40;
  double v41;
  float64x2_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  int64_t v46;
  uint64_t v47;
  float64_t v48;
  unint64_t v49;
  double v50;
  long double v51;
  uint64_t v52;
  int64_t v53;
  __n128 v54;
  uint64_t v55;
  unint64_t v56;
  double v57;
  double v58;
  double v59;
  unint64_t v60;
  unint64_t v61;
  __int128 v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  double v66;
  uint64_t v67;
  void (*v68)(__n128);
  uint64_t v69;
  char v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  double v76;
  float64x2_t v77;
  double v78;
  float64x2_t v79;
  uint64_t v80;
  _QWORD *v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  int64_t v85;
  double v86;
  uint64_t v87;
  long double v88;
  __n128 v89;
  double v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  int64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  int64_t v99;
  int64x2_t v100;
  int64x2_t v101;
  unint64_t v102;
  int64x2_t v103;
  int64x2_t *v104;
  unint64_t v105;
  unint64_t v106;
  _BYTE v108[16];
  long double v109;
  char v110;
  double v111;
  double v112;
  void (*v113)(__n128);
  uint64_t v114;
  uint64_t v115;
  char v116;
  double v117;
  double v118;
  double v119;
  uint64_t *v120;
  float64x2_t v121;
  float64x2_t v122;
  __n128 v123;
  int64x2_t v124;
  long double v125;
  float64x2_t v126;
  int v127;
  __n128 v128;
  unint64_t v129;
  unint64_t v130;
  _BYTE v131[136];
  _BYTE v132[144];

  v128 = a10;
  v123 = a9;
  v127 = a4;
  v124.i64[0] = a3;
  LODWORD(v126.f64[0]) = a2;
  v125 = *(double *)&a1;
  sub_21428B22C(v10, (uint64_t)v132);
  v17 = sub_21428E9B8((uint64_t)v132);
  v18 = sub_21428E9C4((uint64_t)v132);
  if (v17 == 1)
  {
    if ((*(_BYTE *)(v18 + 112) & 1) != 0)
      goto LABEL_25;
    v21 = (double *)(v18 + 96);
    v22 = (double *)(v18 + 104);
  }
  else
  {
    if ((*(_BYTE *)(v18 + 80) & 1) != 0)
      goto LABEL_25;
    v21 = (double *)(v18 + 64);
    v22 = (double *)(v18 + 72);
  }
  v23 = *v21;
  v24 = *v22;
  v25 = *v22;
  if (!LOBYTE(v126.f64[0]))
  {
    v27 = pow(v23, v125) * a5 + a6;
    v25 = pow(v25, v125);
    goto LABEL_19;
  }
  if (LOBYTE(v126.f64[0]) == 1)
  {
    v26 = v125 * v23;
    if ((*(_QWORD *)&v23 & 0x8000000000000000) != 0)
      v27 = a6 - log(1.0 - v26) * a5;
    else
      v27 = log(v26 + 1.0) * a5 + a6;
    v29 = v125 * v25;
    if ((*(_QWORD *)&v24 & 0x8000000000000000) == 0)
    {
      v28 = v29 + 1.0;
      goto LABEL_16;
    }
    v25 = -log(1.0 - v29);
  }
  else
  {
    if (v125 != 0.0)
    {
      v27 = log(v23) * a5 + a6;
      v28 = v25;
LABEL_16:
      v25 = log(v28);
      goto LABEL_19;
    }
    v27 = v23 * a5 + a6;
  }
LABEL_19:
  v19.n128_f64[0] = v25 * a5 + a6;
  if (v19.n128_f64[0] >= v27)
    v20.n128_f64[0] = v27;
  else
    v20.n128_f64[0] = v25 * a5 + a6;
  if (v27 > v19.n128_f64[0])
    v19.n128_f64[0] = v27;
  v128 = v19;
  v123 = v20;
  if (v20.n128_f64[0] > v19.n128_f64[0])
  {
    __break(1u);
LABEL_92:
    v24 = COERCE_DOUBLE(sub_21422423C(0, *(_QWORD *)(*(_QWORD *)&v24 + 16) + 1, 1, *(_QWORD **)&v24));
    goto LABEL_28;
  }
LABEL_25:
  sub_21428B22C(v10, (uint64_t)v131);
  v30 = sub_21428E9B8((uint64_t)v131);
  v31 = (_QWORD *)sub_21428E9C4((uint64_t)v131);
  if (v30 != 1)
  {
    *(_QWORD *)&v121.f64[0] = &v119;
    v68 = (void (*)(__n128))v31[11];
    v67 = v31[12];
    MEMORY[0x24BDAC7A8](v31);
    v120 = (uint64_t *)v108;
    v69 = *(_QWORD *)&v125;
    v109 = v125;
    v70 = LOBYTE(v126.f64[0]);
    v110 = LOBYTE(v126.f64[0]);
    v111 = a5;
    v112 = a6;
    v113 = v68;
    v114 = v67;
    v71 = v124.i64[0];
    v115 = v124.i64[0];
    v72 = v127;
    v116 = v127;
    v117 = a7;
    v118 = a8;
    v73 = swift_allocObject();
    v74 = MEMORY[0x24BEE4AF8];
    *(_QWORD *)(v73 + 16) = MEMORY[0x24BEE4AF8];
    *(_QWORD *)(v73 + 24) = v74;
    v75 = swift_allocObject();
    *(_QWORD *)(v75 + 16) = 0x78ABBF7B5AEAE776;
    swift_retain();
    v76 = sub_21428DEAC(v69, v70, v68, v123, a5, a6, a7, a8, v67, v71, v72);
    *(_QWORD *)&v77.f64[0] = v123.n128_u64[0];
    v77.f64[1] = v76;
    v122 = v77;
    v125 = *(double *)&v67;
    v78 = sub_21428DEAC(v69, v70, v68, v128, a5, a6, a7, a8, v67, v71, v72);
    *(_QWORD *)&v79.f64[0] = v128.n128_u64[0];
    v79.f64[1] = v78;
    v126 = v79;
    sub_21437C614(v73, 1, v122, 0.190983006);
    sub_21437CB1C(1, v75, 4, 7, 11, v73, 1, (void (*)(void))sub_21428FB94, v123.n128_f64[0], v122, v128.n128_f64[0], v126, 0.00137046525, 20.0, v123.n128_f64[0], v128.n128_f64[0], 0.190983006, (uint64_t)v120);
    sub_21437C614(v73, 1, v126, 0.190983006);
    swift_beginAccess();
    v80 = *(_QWORD *)(v73 + 16);
    v81 = *(_QWORD **)(v73 + 24);
    if (*(_QWORD *)(v80 + 16))
    {
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v81 = sub_21422423C(0, v81[2] + 1, 1, v81);
      v83 = v81[2];
      v82 = v81[3];
      if (v83 >= v82 >> 1)
        v81 = sub_21422423C((_QWORD *)(v82 > 1), v83 + 1, 1, v81);
      v81[2] = v83 + 1;
      v81[v83 + 4] = v80;
      *(_QWORD *)(v73 + 24) = v81;
    }
    v84 = MEMORY[0x24BEE4AF8];
    *(_QWORD *)(v73 + 16) = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    swift_release();
    swift_release();
    v85 = v81[2];
    if (!v85)
    {
      swift_bridgeObjectRelease();
      swift_release();
      return MEMORY[0x24BEE4AF8];
    }
    v130 = v84;
    sub_2141D3B40(0, v85, 0);
    v49 = v130;
    v123.n128_u64[0] = (unint64_t)v81;
    *(_QWORD *)&v126.f64[0] = v81 + 4;
    v86 = log(0.0);
    v87 = v124.i64[0];
    v88 = *(double *)v124.i64;
    v90 = log(*(double *)v124.i64 * 0.0 + 1.0);
    v91 = 0;
    if (!v87)
      v86 = 0.0;
    v92 = v84;
    while (1)
    {
      v93 = *(_QWORD *)(*(_QWORD *)&v126.f64[0] + 8 * v91);
      if ((_BYTE)v127)
      {
        if (v127 == 1)
          v89.n128_f64[0] = v90;
        else
          v89.n128_f64[0] = v86;
        v94 = *(_QWORD *)(v93 + 16);
        if (v94)
        {
LABEL_76:
          v95 = v49;
          v89.n128_f64[0] = v89.n128_f64[0] * a7 + a8;
          v128 = v89;
          v129 = v92;
          swift_bridgeObjectRetain();
          sub_2141D3B6C(0, v94, 0);
          v96 = v128.n128_u64[0];
          v97 = 0;
          v98 = v129;
          v99 = *(_QWORD *)(v129 + 16) + 1;
          v100 = 0uLL;
          do
          {
            v101 = *(int64x2_t *)(v93 + 16 * v97 + 32);
            v129 = v98;
            v102 = *(_QWORD *)(v98 + 24);
            if (v99 - 1 >= v102 >> 1)
            {
              v124 = v101;
              sub_2141D3B6C((char *)(v102 > 1), v99, 1);
              v101 = v124;
              v96 = v128.n128_u64[0];
              v100 = 0uLL;
              v98 = v129;
            }
            ++v97;
            v103 = vzip2q_s64(v101, v100);
            v101.i64[1] = v96;
            *(_QWORD *)(v98 + 16) = v99;
            v104 = (int64x2_t *)(v98 + 32 * v99);
            *v104 = v101;
            v104[1] = v103;
            ++v99;
          }
          while (v94 != v97);
          swift_bridgeObjectRelease();
          v49 = v95;
          v92 = MEMORY[0x24BEE4AF8];
          goto LABEL_83;
        }
      }
      else
      {
        v89.n128_f64[0] = pow(0.0, v88);
        v94 = *(_QWORD *)(v93 + 16);
        if (v94)
          goto LABEL_76;
      }
      v98 = v92;
LABEL_83:
      v130 = v49;
      v106 = *(_QWORD *)(v49 + 16);
      v105 = *(_QWORD *)(v49 + 24);
      if (v106 >= v105 >> 1)
      {
        sub_2141D3B40((_QWORD *)(v105 > 1), v106 + 1, 1);
        v92 = MEMORY[0x24BEE4AF8];
        v49 = v130;
      }
      ++v91;
      *(_QWORD *)(v49 + 16) = v106 + 1;
      *(_QWORD *)(v49 + 8 * v106 + 32) = v98;
      if (v91 == v85)
      {
        swift_bridgeObjectRelease();
        swift_release();
        return v49;
      }
    }
  }
  v120 = (uint64_t *)&v119;
  v11 = (void (*)(__n128))v31[15];
  v32 = v31[16];
  MEMORY[0x24BDAC7A8](v31);
  v119 = COERCE_DOUBLE(v108);
  v33 = *(_QWORD *)&v125;
  v109 = v125;
  v34 = LOBYTE(v126.f64[0]);
  v110 = LOBYTE(v126.f64[0]);
  v111 = a5;
  v112 = a6;
  v113 = v11;
  v114 = v32;
  v35 = v124.i64[0];
  v115 = v124.i64[0];
  v36 = v127;
  v116 = v127;
  v117 = a7;
  v118 = a8;
  v10 = swift_allocObject();
  v37 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v10 + 16) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v10 + 24) = v37;
  v38 = swift_allocObject();
  *(_QWORD *)(v38 + 16) = 0x78ABBF7B5AEAE776;
  swift_retain();
  v39 = sub_21428DFB8(v33, v34, v11, v123, a5, a6, a7, a8, v32, v35, v36);
  *(_QWORD *)&v40.f64[0] = v123.n128_u64[0];
  v40.f64[1] = v39;
  v122 = v40;
  v41 = sub_21428DFB8(v33, v34, v11, v128, a5, a6, a7, a8, v32, v35, v36);
  *(_QWORD *)&v42.f64[0] = v128.n128_u64[0];
  v42.f64[1] = v41;
  v121 = v42;
  sub_21437C614(v10, 1, v122, 0.190983006);
  sub_21437CB1C(1, v38, 4, 7, 11, v10, 1, (void (*)(void))sub_21428FB4C, v123.n128_f64[0], v122, v128.n128_f64[0], v121, 0.00137046525, 20.0, v123.n128_f64[0], v128.n128_f64[0], 0.190983006, *(uint64_t *)&v119);
  sub_21437C614(v10, 1, v121, 0.190983006);
  swift_beginAccess();
  v12 = *(_QWORD *)(v10 + 16);
  v24 = *(double *)(v10 + 24);
  if (!*(_QWORD *)(v12 + 16))
    goto LABEL_31;
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    goto LABEL_92;
LABEL_28:
  v44 = *(_QWORD *)(*(_QWORD *)&v24 + 16);
  v43 = *(_QWORD *)(*(_QWORD *)&v24 + 24);
  if (v44 >= v43 >> 1)
    v24 = COERCE_DOUBLE(sub_21422423C((_QWORD *)(v43 > 1), v44 + 1, 1, *(_QWORD **)&v24));
  *(_QWORD *)(*(_QWORD *)&v24 + 16) = v44 + 1;
  *(_QWORD *)(*(_QWORD *)&v24 + 8 * v44 + 32) = v12;
  *(double *)(v10 + 24) = v24;
LABEL_31:
  v45 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v10 + 16) = MEMORY[0x24BEE4AF8];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_release();
  swift_release();
  v46 = *(_QWORD *)(*(_QWORD *)&v24 + 16);
  if (!v46)
  {
    swift_release();
    swift_bridgeObjectRelease();
    return MEMORY[0x24BEE4AF8];
  }
  v130 = v45;
  v120 = (uint64_t *)v46;
  sub_2141D3B40(0, v46, 0);
  v47 = (uint64_t)v120;
  v48 = 0.0;
  v49 = v130;
  v119 = v24;
  *(_QWORD *)&v121.f64[0] = *(_QWORD *)&v24 + 32;
  v50 = v125;
  v51 = *(double *)v124.i64;
  do
  {
    v123.n128_u64[0] = v49;
    v52 = *(_QWORD *)(*(_QWORD *)&v121.f64[0] + 8 * *(_QWORD *)&v48);
    v53 = *(_QWORD *)(v52 + 16);
    if (v53)
    {
      v122.f64[0] = v48;
      v129 = v45;
      swift_bridgeObjectRetain();
      sub_2141D3B6C(0, v53, 0);
      v55 = 0;
      v56 = v129;
      while (1)
      {
        v54.n128_f64[0] = (*(double *)(v52 + 16 * v55 + 32) - a6) / a5;
        v128 = *(__n128 *)(v52 + 16 * v55 + 32);
        if (LOBYTE(v126.f64[0]))
        {
          if (LOBYTE(v126.f64[0]) == 1)
          {
            if ((v54.n128_u64[0] & 0x8000000000000000) != 0)
              v54.n128_f64[0] = 1.0 - exp(-v54.n128_f64[0]);
            else
              v54.n128_f64[0] = exp(v54.n128_f64[0]) + -1.0;
            v54.n128_f64[0] = v54.n128_f64[0] / v50;
          }
          else if (v125 != 0.0)
          {
            v54.n128_f64[0] = exp(v54.n128_f64[0]);
          }
        }
        else
        {
          v54.n128_f64[0] = pow(v54.n128_f64[0], 1.0 / v50);
        }
        v57 = ((double (*)(__n128))v11)(v54);
        v58 = v57;
        if ((_BYTE)v127)
        {
          if (v127 == 1)
          {
            v59 = v57 * v51;
            if ((*(_QWORD *)&v58 & 0x8000000000000000) != 0)
            {
              v58 = -log(1.0 - v59);
              goto LABEL_52;
            }
            v57 = v59 + 1.0;
LABEL_50:
            v58 = log(v57);
            goto LABEL_52;
          }
          if (v124.i64[0])
            goto LABEL_50;
        }
        else
        {
          v58 = pow(v57, v51);
        }
LABEL_52:
        v129 = v56;
        v61 = *(_QWORD *)(v56 + 16);
        v60 = *(_QWORD *)(v56 + 24);
        if (v61 >= v60 >> 1)
        {
          sub_2141D3B6C((char *)(v60 > 1), v61 + 1, 1);
          v56 = v129;
        }
        ++v55;
        *(_QWORD *)&v62 = v128.n128_u64[0];
        *((double *)&v62 + 1) = v58 * a7 + a8;
        v54 = (__n128)vzip2q_s64((int64x2_t)v128, (int64x2_t)0);
        *(_QWORD *)(v56 + 16) = v61 + 1;
        v63 = v56 + 32 * v61;
        *(_OWORD *)(v63 + 32) = v62;
        *(__n128 *)(v63 + 48) = v54;
        if (v53 == v55)
        {
          swift_bridgeObjectRelease();
          v45 = MEMORY[0x24BEE4AF8];
          v47 = (uint64_t)v120;
          v48 = v122.f64[0];
          goto LABEL_57;
        }
      }
    }
    v56 = v45;
LABEL_57:
    v49 = v123.n128_u64[0];
    v130 = v123.n128_u64[0];
    v65 = *(_QWORD *)(v123.n128_u64[0] + 16);
    v64 = *(_QWORD *)(v123.n128_u64[0] + 24);
    if (v65 >= v64 >> 1)
    {
      v66 = v48;
      sub_2141D3B40((_QWORD *)(v64 > 1), v65 + 1, 1);
      v48 = v66;
      v47 = (uint64_t)v120;
      v49 = v130;
    }
    ++*(_QWORD *)&v48;
    *(_QWORD *)(v49 + 16) = v65 + 1;
    *(_QWORD *)(v49 + 8 * v65 + 32) = v56;
  }
  while (*(_QWORD *)&v48 != v47);
  swift_release();
  swift_bridgeObjectRelease();
  return v49;
}

unint64_t *sub_21428D890@<X0>(unint64_t *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char a8@<W7>, void *a9@<X8>, double a10@<D0>, double a11@<D1>, double a12@<D2>, double a13@<D3>, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char a19)
{
  unint64_t v19;
  uint64_t v26;
  double v27;
  double v28;
  _QWORD v30[2];
  char v31;
  uint64_t v32;
  double v33;
  char v34;
  _QWORD v35[2];
  char v36;
  uint64_t v37;
  double v38;
  char v39;
  _BYTE __src[320];

  v19 = *result;
  if ((*result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v19 < *(_QWORD *)(a2 + 16))
  {
    v26 = a2 + 32 * v19;
    v27 = *(double *)(v26 + 48);
    v28 = sub_21421EAA4(a7, a8, *(double *)(v26 + 32), a10, a11);
    v30[0] = a3;
    v30[1] = a4;
    v31 = a5 & 1;
    v32 = a6;
    v33 = v28;
    v34 = 0;
    v35[0] = a14;
    v35[1] = a15;
    v36 = a16 & 1;
    v37 = a17;
    v38 = sub_21421EAA4(a18, a19, v27, a12, a13);
    v39 = 0;
    sub_2141DD130(a3, a4, a5 & 1);
    swift_bridgeObjectRetain();
    sub_2141DD130(a14, a15, a16 & 1);
    swift_bridgeObjectRetain();
    sub_214286558((uint64_t)v30, (uint64_t)v35, 0, __src);
    return (unint64_t *)memcpy(a9, __src, 0x131uLL);
  }
  __break(1u);
  return result;
}

uint64_t sub_21428D9F4@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_21428DA08(a1, a2, a3, qword_254D6A2A0, (void (*)(void))sub_21428F930, a4);
}

uint64_t sub_21428DA08@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, void (*a5)(void)@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  int *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  char *v32;
  char *v33;

  v12 = a3 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_environment;
  swift_beginAccess();
  v31 = type metadata accessor for ChartContentRenderContext.Environment(0);
  v13 = *(int *)(v31 + 64);
  v14 = *(_QWORD *)(v12 + v13);
  *(_QWORD *)(v12 + v13) = 0;
  sub_2141D8BF8(a4);
  result = sub_214424B60();
  v16 = v32;
  v32 = (char *)MEMORY[0x24BEE4AF8];
  v17 = (char *)(v16 - v33);
  if (v16 == v33)
  {
    v18 = (char *)MEMORY[0x24BEE4AF8];
    v19 = MEMORY[0x24BEE4AF8];
LABEL_9:
    *(_QWORD *)(v12 + *(int *)(v31 + 64)) = v14;
    v22 = (int *)type metadata accessor for SgGroup(0);
    v23 = swift_allocBox();
    v25 = v24;
    v26 = *(_QWORD *)(*(_QWORD *)(a3 + 16) + 24);
    v27 = sub_214251F48((uint64_t)v18);
    swift_bridgeObjectRelease();
    v28 = (char *)v25 + v22[6];
    v29 = type metadata accessor for SgClipRect(0);
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v28, 1, 1, v29);
    *v25 = v26;
    v25[1] = v27;
    *(_QWORD *)((char *)v25 + v22[7]) = 0x3FF0000000000000;
    *(_QWORD *)((char *)v25 + v22[8]) = v14;
    *(_QWORD *)((char *)v25 + v22[9]) = v19;
    *((_BYTE *)v25 + v22[10]) = 0;
    *a6 = v23;
  }
  else
  {
    if ((uint64_t)v33 >= (uint64_t)v16)
    {
      v30 = a6;
      v20 = 0;
      v21 = a2 & 1;
      while (&v17[v20])
      {
        if (__OFADD__(v20, 1))
          goto LABEL_11;
        result = sub_21428E17C(&v32, v20, (uint64_t)&v16[v20], v21, a3, a1, a4, a5);
        if (!&v17[++v20])
        {
          v18 = v32;
          a6 = v30;
          v19 = MEMORY[0x24BEE4AF8];
          goto LABEL_9;
        }
      }
      __break(1u);
LABEL_11:
      __break(1u);
    }
    __break(1u);
  }
  return result;
}

unint64_t *sub_21428DBF8@<X0>(unint64_t *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char a8@<W7>, void *a9@<X8>, double a10@<D0>, double a11@<D1>, double a12@<D2>, double a13@<D3>, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23)
{
  unint64_t v23;
  uint64_t v27;
  double v28;
  double v32;
  double v33;
  double v34;
  __int128 v35;
  _QWORD v39[2];
  char v40;
  uint64_t v41;
  double v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  _UNKNOWN **v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  double v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  _UNKNOWN **v55;
  _QWORD __src[39];
  char v57;
  char v58;
  _BYTE v59[144];
  _QWORD v60[2];
  char v61;
  uint64_t v62;
  double v63;
  char v64;
  _BYTE v65[152];

  v23 = *result;
  if ((*result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v23 < *(_QWORD *)(a2 + 16))
  {
    v27 = a2 + 32 * v23;
    v35 = *(_OWORD *)(v27 + 32);
    v28 = *(double *)(v27 + 48);
    v32 = sub_21421EAA4(a7, a8, *(double *)(v27 + 32), a10, a11);
    v58 = a5 & 1;
    v57 = 0;
    v60[0] = a3;
    v60[1] = a4;
    v61 = a5 & 1;
    v62 = a6;
    v63 = v32;
    v64 = 0;
    v33 = sub_21421EAA4(a18, a19, *((double *)&v35 + 1), a12, a13);
    v34 = sub_21421EAA4(a18, a19, v28, a12, a13);
    sub_2143DE094((uint64_t)v60, (uint64_t)v59);
    sub_2141EDFD8((uint64_t)v59, (uint64_t)v65);
    sub_2141DD130(a14, a15, a16 & 1);
    swift_bridgeObjectRetain();
    sub_2141DD130(a20, a21, a22 & 1);
    swift_bridgeObjectRetain();
    sub_2141DD130(a3, a4, a5 & 1);
    swift_bridgeObjectRetain();
    sub_2141DD130(a14, a15, a16 & 1);
    swift_bridgeObjectRetain();
    sub_2141DD130(a20, a21, a22 & 1);
    swift_bridgeObjectRetain();
    sub_2141ED0BC(a20, a21, a22 & 1);
    swift_bridgeObjectRelease();
    sub_2141ED0BC(a14, a15, a16 & 1);
    swift_bridgeObjectRelease();
    sub_21428F944((uint64_t)v60);
    v39[0] = a14;
    v39[1] = a15;
    v40 = a16 & 1;
    v41 = a17;
    v42 = v33;
    v43 = 0;
    v44 = 0;
    v45 = MEMORY[0x24BEE13C8];
    v46 = &protocol witness table for Double;
    v47 = a20;
    v48 = a21;
    v49 = a22 & 1;
    v50 = a23;
    v51 = v34;
    v52 = 0;
    v53 = 0;
    v54 = MEMORY[0x24BEE13C8];
    v55 = &protocol witness table for Double;
    sub_21428FB04((uint64_t)v39);
    sub_2141EDFD8((uint64_t)v65, (uint64_t)__src);
    sub_2141EDFD8((uint64_t)v39, (uint64_t)&__src[18]);
    __src[37] = 0;
    __src[36] = 0;
    LOBYTE(__src[38]) = -1;
    return (unint64_t *)memcpy(a9, __src, 0x131uLL);
  }
  __break(1u);
  return result;
}

double sub_21428DEAC(uint64_t a1, char a2, void (*a3)(__n128), __n128 a4, double a5, double a6, double a7, double a8, uint64_t a9, uint64_t a10, char a11)
{
  double v17;
  double v18;
  double v19;

  a4.n128_f64[0] = (a4.n128_f64[0] - a6) / a5;
  if (a2)
  {
    if (a2 == 1)
    {
      if ((a4.n128_u64[0] & 0x8000000000000000) != 0)
        a4.n128_f64[0] = 1.0 - exp(-a4.n128_f64[0]);
      else
        a4.n128_f64[0] = exp(a4.n128_f64[0]) + -1.0;
      a4.n128_f64[0] = a4.n128_f64[0] / *(double *)&a1;
    }
    else if (*(double *)&a1 != 0.0)
    {
      a4.n128_f64[0] = exp(a4.n128_f64[0]);
    }
  }
  else
  {
    a4.n128_f64[0] = pow(a4.n128_f64[0], 1.0 / *(double *)&a1);
  }
  a3(a4);
  if (a11)
  {
    if (a11 == 1)
    {
      v18 = v17;
      v19 = v17 * *(double *)&a10;
      if ((*(_QWORD *)&v18 & 0x8000000000000000) != 0)
      {
        v17 = -log(1.0 - v19);
        return v17 * a7 + a8;
      }
      v17 = v19 + 1.0;
      goto LABEL_16;
    }
    if (*(double *)&a10 != 0.0)
LABEL_16:
      v17 = log(v17);
  }
  else
  {
    v17 = pow(v17, *(long double *)&a10);
  }
  return v17 * a7 + a8;
}

double sub_21428DFB8(uint64_t a1, char a2, void (*a3)(__n128), __n128 a4, double a5, double a6, double a7, double a8, uint64_t a9, uint64_t a10, char a11)
{
  long double v17;
  double v18;
  double v19;

  a4.n128_f64[0] = (a4.n128_f64[0] - a6) / a5;
  if (a2)
  {
    if (a2 == 1)
    {
      if ((a4.n128_u64[0] & 0x8000000000000000) != 0)
        a4.n128_f64[0] = 1.0 - exp(-a4.n128_f64[0]);
      else
        a4.n128_f64[0] = exp(a4.n128_f64[0]) + -1.0;
      a4.n128_f64[0] = a4.n128_f64[0] / *(double *)&a1;
    }
    else if (*(double *)&a1 != 0.0)
    {
      a4.n128_f64[0] = exp(a4.n128_f64[0]);
    }
  }
  else
  {
    a4.n128_f64[0] = pow(a4.n128_f64[0], 1.0 / *(double *)&a1);
  }
  a3(a4);
  v18 = v17;
  if (a11)
  {
    if (a11 == 1)
    {
      v19 = v17 * *(double *)&a10;
      if ((*(_QWORD *)&v17 & 0x8000000000000000) != 0)
      {
        v18 = -log(1.0 - v19);
        return v18 * a7 + a8;
      }
      v18 = v19 + 1.0;
      goto LABEL_16;
    }
    if (*(double *)&a10 != 0.0)
LABEL_16:
      v18 = log(v18);
  }
  else
  {
    v18 = pow(v17, *(long double *)&a10);
  }
  return v18 * a7 + a8;
}

uint64_t VectorizedAreaPlotContent.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;

  v5 = type metadata accessor for Vectorizer(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v10 - v7;
  sub_2142D7304(v3, v5, (uint64_t)&v10 - v7);
  sub_2142D6BB0((uint64_t)v8, v5, a3);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_21428E17C(char **a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t *a7, void (*a8)(void))
{
  char v12;
  uint64_t result;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD v18[4];
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v23 = a3;
  v12 = a4 & 1;
  sub_2141D8BF8(a7);
  sub_214424B6C();
  v18[2] = a6;
  v18[3] = &v23;
  v19 = v12;
  v20 = a5;
  result = sub_21421FC18(v21, a8, (uint64_t)v18);
  v14 = v22;
  if (v22 != 0xE000000000000000)
  {
    v15 = *a1;
    swift_retain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v15 = sub_214224250(0, *((_QWORD *)v15 + 2) + 1, 1, v15);
    v17 = *((_QWORD *)v15 + 2);
    v16 = *((_QWORD *)v15 + 3);
    if (v17 >= v16 >> 1)
      v15 = sub_214224250((char *)(v16 > 1), v17 + 1, 1, v15);
    *((_QWORD *)v15 + 2) = v17 + 1;
    *(_QWORD *)&v15[8 * v17 + 32] = v14;
    result = swift_release();
    *a1 = v15;
  }
  return result;
}

uint64_t sub_21428E2B8(uint64_t a1, uint64_t *a2, char a3, uint64_t a4, uint64_t *a5, void (*a6)(_QWORD *, _QWORD *))
{
  char v8;
  uint64_t v9;
  void (*v10)(_QWORD *__return_ptr, _QWORD *);
  _QWORD v12[2];
  _QWORD __src[39];
  _BYTE __dst[312];

  v8 = a3 & 1;
  v9 = *a2;
  sub_2141D8BF8(a5);
  v10 = (void (*)(_QWORD *__return_ptr, _QWORD *))sub_214424B78();
  sub_214424B60();
  v12[0] = v9;
  v10(__src, v12);
  swift_release();
  LOBYTE(v12[0]) = v8;
  v12[1] = a4;
  a6(__src, v12);
  memcpy(__dst, __src, 0x131uLL);
  return sub_21428FA00((uint64_t)__dst);
}

unint64_t _s6Charts23FunctionAreaPlotContentV012_layoutChartE0yyAC_AA01_gE12LayoutInputsVtFZ_0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  BOOL v6;
  char v7;
  unsigned int v8;
  unsigned int v9;
  BOOL v10;
  unint64_t result;
  char v12;
  unsigned int v13;
  BOOL v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  double v28;
  double v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  double v44;
  double v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v54;
  unint64_t v55;
  char *v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  char v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  double (*v76)(double);
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _BYTE v80[136];
  _BYTE v81[136];
  _BYTE v82[144];

  sub_21428B22C(a1, (uint64_t)v82);
  v4 = *a2;
  v3 = a2[1];
  if (!*(_QWORD *)(v3 + 16))
    goto LABEL_10;
  v5 = sub_214336B74(0);
  v6 = 0;
  if ((v7 & 1) != 0)
  {
    v8 = *(unsigned __int16 *)(*(_QWORD *)(v3 + 56) + 72 * v5 + 40);
    v9 = v8 >> 8;
    v10 = (v8 & 0xFF00) != 768;
    v6 = v9 <= 0xFE && v10;
  }
  if (*(_QWORD *)(v3 + 16)
    && (result = sub_214336B74(1u), (v12 & 1) != 0)
    && (v13 = *(unsigned __int16 *)(*(_QWORD *)(v3 + 56) + 72 * result + 40), v13 >> 8 <= 0xFE))
  {
    v68 = v13 & 0xFF00;
    v14 = v68 != 768;
    if (!v6)
    {
LABEL_11:
      sub_21428B22C((uint64_t)v82, (uint64_t)v81);
      v15 = sub_21428E9B8((uint64_t)v81);
      result = sub_21428E9C4((uint64_t)v81);
      v16 = 64;
      if (v15 == 1)
        v16 = 96;
      v17 = 72;
      if (v15 == 1)
        v17 = 104;
      v18 = 80;
      if (v15 == 1)
        v18 = 112;
      if ((*(_BYTE *)(result + v18) & 1) == 0)
      {
        v19 = *(_QWORD *)(result + v17);
        sub_214203104(*(_QWORD *)(result + v16), 0, 0, 1);
        result = sub_214203104(v19, 0, 0, 1);
      }
      if (v14)
        return result;
      goto LABEL_20;
    }
    if (v68 != 768)
      return result;
  }
  else if (!v6)
  {
LABEL_10:
    v14 = 0;
    goto LABEL_11;
  }
LABEL_20:
  v79 = v4;
  sub_21428B22C((uint64_t)v82, (uint64_t)v81);
  if (sub_21428E9B8((uint64_t)v81) != 1)
  {
    v40 = sub_21428E9C4((uint64_t)v81);
    v70 = *(_QWORD *)(v40 + 8);
    v72 = *(_QWORD *)v40;
    v69 = *(_BYTE *)(v40 + 16);
    v41 = *(_QWORD *)(v40 + 32);
    v42 = *(_QWORD *)(v40 + 40);
    v43 = *(_BYTE *)(v40 + 48);
    v44 = *(double *)(v40 + 64);
    v45 = *(double *)(v40 + 72);
    v75 = *(_BYTE *)(v40 + 80);
    v76 = *(double (**)(double))(v40 + 88);
    v78 = *(_QWORD *)(v40 + 96);
    sub_21428B22C((uint64_t)v82, (uint64_t)v80);
    v46 = sub_21428E9C4((uint64_t)v80);
    v47 = *(_QWORD *)(v46 + 32);
    v48 = *(_QWORD *)(v46 + 40);
    v49 = *(_BYTE *)(v46 + 48);
    sub_2141DD130(*(_QWORD *)v46, *(_QWORD *)(v46 + 8), *(_BYTE *)(v46 + 16));
    swift_bridgeObjectRetain();
    sub_2141DD130(v47, v48, v49);
    swift_bridgeObjectRetain();
    swift_retain();
    sub_2141ED0BC(v41, v42, v43);
    swift_bridgeObjectRelease();
    sub_2141ED0BC(v72, v70, v69);
    swift_bridgeObjectRelease();
    sub_214203104(0, 1, 0, 0);
    if ((v75 & 1) != 0)
    {
      v50 = swift_allocObject();
      *(_QWORD *)(v50 + 16) = v76;
      *(_QWORD *)(v50 + 24) = v78;
      v51 = swift_allocObject();
      *(_QWORD *)(v51 + 16) = v76;
      *(_QWORD *)(v51 + 24) = v78;
      v52 = *(char **)(v79 + 168);
      swift_retain_n();
      swift_retain();
      swift_retain();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)(v79 + 168) = v52;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v52 = sub_214221E04(0, *((_QWORD *)v52 + 2) + 1, 1, v52);
        *(_QWORD *)(v79 + 168) = v52;
      }
      v55 = *((_QWORD *)v52 + 2);
      v54 = *((_QWORD *)v52 + 3);
      if (v55 >= v54 >> 1)
      {
        v52 = sub_214221E04((char *)(v54 > 1), v55 + 1, 1, v52);
        *(_QWORD *)(v79 + 168) = v52;
      }
      *((_QWORD *)v52 + 2) = v55 + 1;
      v56 = &v52[32 * v55];
      *((_QWORD *)v56 + 4) = sub_21428FBF8;
      *((_QWORD *)v56 + 5) = v50;
      *((_QWORD *)v56 + 6) = sub_21428FC10;
      *((_QWORD *)v56 + 7) = v51;
      swift_release();
      swift_release();
    }
    else
    {
      sub_21437C100(0, 0, 0, 1, v76, v44, v45);
      v66 = v65;
      sub_214203104(0, 1, v67, 0);
      sub_214203104(0, 1, v66, 0);
    }
    return swift_release();
  }
  v20 = sub_21428E9C4((uint64_t)v81);
  sub_21428B22C((uint64_t)v82, (uint64_t)v80);
  v21 = sub_21428E9C4((uint64_t)v80);
  v73 = *(_QWORD *)(v20 + 8);
  v74 = *(_QWORD *)v20;
  v71 = *(_BYTE *)(v20 + 16);
  v22 = *(_QWORD *)(v20 + 32);
  v23 = *(_QWORD *)(v20 + 40);
  v24 = *(_BYTE *)(v20 + 48);
  v25 = *(_QWORD *)(v20 + 64);
  v26 = *(_QWORD *)(v20 + 72);
  v27 = *(_BYTE *)(v20 + 80);
  v28 = *(double *)(v20 + 96);
  v29 = *(double *)(v20 + 104);
  v30 = *(_BYTE *)(v20 + 112);
  v31 = *(_QWORD *)(v20 + 120);
  v32 = *(_QWORD *)(v20 + 128);
  v77 = v31;
  sub_21428E9D4(v21);
  sub_2141ED0BC(v25, v26, v27);
  swift_bridgeObjectRelease();
  sub_2141ED0BC(v22, v23, v24);
  swift_bridgeObjectRelease();
  sub_2141ED0BC(v74, v73, v71);
  swift_bridgeObjectRelease();
  if ((v30 & 1) != 0)
  {
    v33 = swift_allocObject();
    *(_QWORD *)(v33 + 16) = v77;
    *(_QWORD *)(v33 + 24) = v32;
    v34 = swift_allocObject();
    *(_QWORD *)(v34 + 16) = v77;
    *(_QWORD *)(v34 + 24) = v32;
    v35 = *(char **)(v4 + 168);
    swift_retain_n();
    swift_retain();
    swift_retain();
    v36 = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v79 + 168) = v35;
    if ((v36 & 1) == 0)
    {
      v35 = sub_214221E04(0, *((_QWORD *)v35 + 2) + 1, 1, v35);
      *(_QWORD *)(v79 + 168) = v35;
    }
    v38 = *((_QWORD *)v35 + 2);
    v37 = *((_QWORD *)v35 + 3);
    if (v38 >= v37 >> 1)
    {
      v35 = sub_214221E04((char *)(v37 > 1), v38 + 1, 1, v35);
      *(_QWORD *)(v79 + 168) = v35;
    }
    *((_QWORD *)v35 + 2) = v38 + 1;
    v39 = &v35[32 * v38];
    *((_QWORD *)v39 + 4) = sub_21428FBE8;
    *((_QWORD *)v39 + 5) = v33;
    *((_QWORD *)v39 + 6) = sub_21428FBF0;
    *((_QWORD *)v39 + 7) = v34;
    swift_release();
    swift_release();
    return swift_release();
  }
  swift_retain();
  v57 = sub_21437C60C(0, 0, 0, 1, v77, v32, v28, v29);
  v59 = v58;
  swift_release();
  v60 = sub_21437C610(0, 0, 0, 1, v77, v32, v28, v29);
  v62 = v61;
  swift_release();
  if (v60 >= v57)
    *(double *)&v63 = v57;
  else
    *(double *)&v63 = v60;
  sub_214203104(0, 1, v63, 0);
  if (v59 > v62)
    *(double *)&v64 = v59;
  else
    *(double *)&v64 = v62;
  return sub_214203104(0, 1, v64, 0);
}

uint64_t sub_21428E9B8(uint64_t a1)
{
  return *(_QWORD *)(a1 + 112) >> 63;
}

uint64_t sub_21428E9C4(uint64_t result)
{
  *(_QWORD *)(result + 112) &= ~0x8000000000000000;
  return result;
}

uint64_t sub_21428E9D4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(_BYTE *)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 64);
  v6 = *(_QWORD *)(a1 + 72);
  v7 = *(_BYTE *)(a1 + 80);
  sub_2141DD130(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_bridgeObjectRetain();
  sub_2141DD130(v2, v3, v4);
  swift_bridgeObjectRetain();
  sub_2141DD130(v5, v6, v7);
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t sub_21428EA90()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  sub_2141ED0BC(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40));
  swift_bridgeObjectRelease();
  sub_2141ED0BC(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96), *(_BYTE *)(v0 + 104));
  swift_bridgeObjectRelease();
  sub_2141ED0BC(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 160), *(_BYTE *)(v0 + 168));
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

unint64_t *sub_21428EAF0@<X0>(unint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2;

  return sub_21428DBF8(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_BYTE *)(v2 + 40), *(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 56), *(_BYTE *)(v2 + 64), a2, *(double *)(v2 + 72), *(double *)(v2 + 80), *(double *)(v2 + 136), *(double *)(v2 + 144), *(_QWORD *)(v2 + 88), *(_QWORD *)(v2 + 96), *(_BYTE *)(v2 + 104), *(_QWORD *)(v2 + 112), *(_QWORD *)(v2 + 120), *(_BYTE *)(v2 + 128),
           *(_QWORD *)(v2 + 152),
           *(_QWORD *)(v2 + 160),
           *(_BYTE *)(v2 + 168),
           *(_QWORD *)(v2 + 176));
}

uint64_t sub_21428EB68()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  sub_2141ED0BC(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40));
  swift_bridgeObjectRelease();
  sub_2141ED0BC(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96), *(_BYTE *)(v0 + 104));
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

unint64_t *sub_21428EBB4@<X0>(unint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2;

  return sub_21428D890(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_BYTE *)(v2 + 40), *(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 56), *(_BYTE *)(v2 + 64), a2, *(double *)(v2 + 72), *(double *)(v2 + 80), *(double *)(v2 + 136), *(double *)(v2 + 144), *(_QWORD *)(v2 + 88), *(_QWORD *)(v2 + 96), *(_BYTE *)(v2 + 104), *(_QWORD *)(v2 + 112), *(_QWORD *)(v2 + 120), *(_BYTE *)(v2 + 128));
}

uint64_t sub_21428EC0C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SgShapeStyle();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_21428EC50()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_21428EC88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)a3 + 8);
  result = MEMORY[0x2199CD934](&protocol conformance descriptor for <A> AreaPlot<A>, a2, &v5);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_21428ECCC(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x2199CD934](&protocol conformance descriptor for VectorizedAreaPlotContent<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_21428ECF8()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_21428ED2C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_21428EDDC + 4 * byte_214429C0F[(v7 - 1)]))();
}

void sub_21428EE2C(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t type metadata accessor for AreaPlot(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2141D8E88(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AreaPlot);
}

uint64_t sub_21428EFE8(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  char v17;
  char v18;

  if (a15 < 0)
  {
    v18 = a7 & 1;
    sub_2141DD130(a1, a2, a3 & 1);
    swift_bridgeObjectRetain();
    sub_2141DD130(a5, a6, v18);
    swift_bridgeObjectRetain();
    sub_2141DD130(a9, a10, a11 & 1);
  }
  else
  {
    v17 = a7 & 1;
    sub_2141DD130(a1, a2, a3 & 1);
    swift_bridgeObjectRetain();
    sub_2141DD130(a5, a6, v17);
  }
  swift_bridgeObjectRetain();
  return swift_retain();
}

uint64_t sub_21428F0C4(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  char v17;
  char v18;

  if (a15 < 0)
  {
    v18 = a7 & 1;
    sub_2141ED0BC(a1, a2, a3 & 1);
    swift_bridgeObjectRelease();
    sub_2141ED0BC(a5, a6, v18);
    swift_bridgeObjectRelease();
    sub_2141ED0BC(a9, a10, a11 & 1);
  }
  else
  {
    v17 = a7 & 1;
    sub_2141ED0BC(a1, a2, a3 & 1);
    swift_bridgeObjectRelease();
    sub_2141ED0BC(a5, a6, v17);
  }
  swift_release();
  return swift_bridgeObjectRelease();
}

__n128 initializeWithTake for FunctionAreaPlotContent.FunctionAreaRepresentation(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  result = *(__n128 *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 80) = result;
  return result;
}

ValueMetadata *type metadata accessor for FunctionAreaPlotContent()
{
  return &type metadata for FunctionAreaPlotContent;
}

uint64_t sub_21428F1F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v5;

  result = type metadata accessor for Vectorizer(319, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_21428F260(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v12 = *(_QWORD *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_21428F2E4 + 4 * byte_214429C1D[v10]))();
  }
}

void sub_21428F368(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_21428F464()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x21428F4DCLL);
}

void sub_21428F46C(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x21428F474);
  JUMPOUT(0x21428F4DCLL);
}

void sub_21428F4B4()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x21428F4DCLL);
}

void sub_21428F4BC()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x21428F4DCLL);
}

uint64_t sub_21428F4C4(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_WORD *)(v5 + v6) = 0;
  if (!a2)
    JUMPOUT(0x21428F4DCLL);
  if (a3 < 0x7FFFFFFF)
  {
    if ((a2 & 0x80000000) == 0)
      JUMPOUT(0x21428F4D8);
    JUMPOUT(0x21428F4D0);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v5);
}

uint64_t sub_21428F4F4(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

_UNKNOWN **sub_21428F4FC()
{
  return &off_254D69CB8;
}

uint64_t _s6Charts23FunctionAreaPlotContentV26FunctionAreaRepresentationOwxx_0(uint64_t a1)
{
  return sub_21428F0C4(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_OWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112));
}

uint64_t *_s6Charts23FunctionAreaPlotContentV26FunctionAreaRepresentationOwcp_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  v8 = a2[5];
  v9 = a2[6];
  v10 = a2[7];
  v11 = a2[8];
  v13 = a2[9];
  v14 = a2[10];
  v15 = a2[11];
  v16 = a2[12];
  v17 = a2[13];
  v18 = a2[14];
  v19 = a2[15];
  v20 = a2[16];
  sub_21428EFE8(*a2, v4, v5, v6, v7, v8, v9, v10, v11, v13, v14, v15, v16, v17, v18);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  a1[6] = v9;
  a1[7] = v10;
  a1[8] = v11;
  a1[9] = v13;
  a1[10] = v14;
  a1[11] = v15;
  a1[12] = v16;
  a1[13] = v17;
  a1[14] = v18;
  a1[15] = v19;
  a1[16] = v20;
  return a1;
}

uint64_t _s6Charts23FunctionAreaPlotContentV26FunctionAreaRepresentationOwca_0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  v8 = a2[5];
  v9 = a2[6];
  v10 = a2[7];
  v11 = a2[8];
  v25 = a2[9];
  v26 = a2[10];
  v27 = a2[11];
  v28 = a2[12];
  v29 = a2[13];
  v30 = a2[14];
  v31 = a2[15];
  v32 = a2[16];
  sub_21428EFE8(*a2, v4, v5, v6, v7, v8, v9, v10, v11, v25, v26, v27, v28, v29, v30);
  v12 = *(_QWORD *)a1;
  v13 = *(_QWORD *)(a1 + 8);
  v14 = *(_QWORD *)(a1 + 16);
  v15 = *(_QWORD *)(a1 + 24);
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 40);
  v18 = *(_QWORD *)(a1 + 48);
  v19 = *(_QWORD *)(a1 + 56);
  v20 = *(_OWORD *)(a1 + 64);
  v21 = *(_OWORD *)(a1 + 80);
  v22 = *(_OWORD *)(a1 + 96);
  v23 = *(_OWORD *)(a1 + 112);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  *(_QWORD *)(a1 + 64) = v11;
  *(_QWORD *)(a1 + 72) = v25;
  *(_QWORD *)(a1 + 80) = v26;
  *(_QWORD *)(a1 + 88) = v27;
  *(_QWORD *)(a1 + 96) = v28;
  *(_QWORD *)(a1 + 104) = v29;
  *(_QWORD *)(a1 + 112) = v30;
  *(_QWORD *)(a1 + 120) = v31;
  *(_QWORD *)(a1 + 128) = v32;
  sub_21428F0C4(v12, v13, v14, v15, v16, v17, v18, v19, v20, *((uint64_t *)&v20 + 1), v21, *((uint64_t *)&v21 + 1), v22, *((uint64_t *)&v22 + 1), v23);
  return a1;
}

uint64_t _s6Charts23FunctionAreaPlotContentV26FunctionAreaRepresentationOwta_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;

  v3 = *(_QWORD *)(a2 + 128);
  v4 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  v10 = *(_QWORD *)(a1 + 48);
  v11 = *(_QWORD *)(a1 + 56);
  v12 = *(_OWORD *)(a1 + 64);
  v13 = *(_OWORD *)(a1 + 80);
  v14 = *(_OWORD *)(a1 + 96);
  v15 = *(_OWORD *)(a1 + 112);
  v16 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v16;
  v17 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v17;
  v18 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v18;
  v19 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v19;
  *(_QWORD *)(a1 + 128) = v3;
  sub_21428F0C4(v4, v6, v5, v7, v8, v9, v10, v11, v12, *((uint64_t *)&v12 + 1), v13, *((uint64_t *)&v13 + 1), v14, *((uint64_t *)&v14 + 1), v15);
  return a1;
}

uint64_t _s6Charts23FunctionAreaPlotContentV26FunctionAreaRepresentationOwet_0(uint64_t a1, int a2)
{
  uint64_t v2;
  int v3;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 136))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16) >> 1;
  if (v2 > 0x80000000)
    v3 = ~(_DWORD)v2;
  else
    v3 = -1;
  return (v3 + 1);
}

double sub_21428F860(uint64_t a1, int a2, int a3)
{
  double result;

  if (a2 < 0)
  {
    result = 0.0;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_QWORD *)a1 = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(a1 + 136) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 2 * -a2;
      result = 0.0;
      *(_OWORD *)(a1 + 24) = 0u;
      *(_OWORD *)(a1 + 40) = 0u;
      *(_OWORD *)(a1 + 56) = 0u;
      *(_OWORD *)(a1 + 72) = 0u;
      *(_OWORD *)(a1 + 88) = 0u;
      *(_OWORD *)(a1 + 104) = 0u;
      *(_OWORD *)(a1 + 120) = 0u;
      return result;
    }
    *(_BYTE *)(a1 + 136) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

_QWORD *sub_21428F8E8(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = result[6] & 1;
  v3 = result[10] & 1;
  v4 = result[14] & 1 | (a2 << 63);
  result[2] &= 1uLL;
  result[6] = v2;
  result[10] = v3;
  result[14] = v4;
  return result;
}

ValueMetadata *type metadata accessor for FunctionAreaPlotContent.FunctionAreaRepresentation()
{
  return &type metadata for FunctionAreaPlotContent.FunctionAreaRepresentation;
}

uint64_t sub_21428F930()
{
  return sub_21428F9D8(qword_254D6A2A0, (void (*)(_QWORD *, _QWORD *))static LineMark._renderChartContent(_:_:));
}

uint64_t sub_21428F944(uint64_t a1)
{
  sub_2141ED0BC(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_bridgeObjectRelease();
  return a1;
}

int8x16_t sub_21428F980(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int8x16_t result;

  v1 = *(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFFF8;
  v2 = *(_QWORD *)(a1 + 136) & 0xFFFFFFFFFFFFFF8;
  *(int8x16_t *)(a1 + 48) = vandq_s8(*(int8x16_t *)(a1 + 48), (int8x16_t)xmmword_214427820);
  *(_QWORD *)(a1 + 64) = v1;
  result = vandq_s8(*(int8x16_t *)(a1 + 120), (int8x16_t)xmmword_214427830);
  *(int8x16_t *)(a1 + 120) = result;
  *(_QWORD *)(a1 + 136) = v2;
  return result;
}

uint64_t sub_21428F9C4()
{
  return sub_21428F9D8(qword_254D6A0A8, (void (*)(_QWORD *, _QWORD *))static AreaMark._renderChartContent(_:_:));
}

uint64_t sub_21428F9D8(uint64_t *a1, void (*a2)(_QWORD *, _QWORD *))
{
  uint64_t v2;

  return sub_21428E2B8(*(_QWORD *)(v2 + 16), *(uint64_t **)(v2 + 24), *(_BYTE *)(v2 + 32), *(_QWORD *)(v2 + 40), a1, a2);
}

uint64_t sub_21428FA00(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v18 = *(_QWORD *)(a1 + 152);
  v19 = *(_QWORD *)(a1 + 144);
  v2 = *(_QWORD *)(a1 + 176);
  v16 = *(_QWORD *)(a1 + 168);
  v17 = *(_QWORD *)(a1 + 160);
  v3 = *(_QWORD *)(a1 + 184);
  v4 = *(_QWORD *)(a1 + 192);
  v5 = *(_QWORD *)(a1 + 200);
  v14 = *(_OWORD *)(a1 + 224);
  v15 = *(_OWORD *)(a1 + 208);
  v12 = *(_OWORD *)(a1 + 256);
  v13 = *(_OWORD *)(a1 + 240);
  v6 = *(_QWORD *)(a1 + 272);
  v7 = *(_QWORD *)(a1 + 280);
  v9 = *(_QWORD *)(a1 + 288);
  v8 = *(_QWORD *)(a1 + 296);
  v10 = *(_BYTE *)(a1 + 304);
  sub_2141EF040(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_OWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136));
  sub_2141EF040(v19, v18, v17, v16, v2, v3, v4, v5, v15, *((uint64_t *)&v15 + 1), v14, *((uint64_t *)&v14 + 1), v13, *((uint64_t *)&v13 + 1), v12, SBYTE8(v12), v6, v7);
  sub_2141E60A4(v9, v8, v10);
  return a1;
}

int8x16_t sub_21428FB04(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int8x16_t result;

  v1 = *(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFFF8;
  v2 = *(_QWORD *)(a1 + 136) & 0xFFFFFFFFFFFFFF8 | 0x6000000000000000;
  *(int8x16_t *)(a1 + 48) = vandq_s8(*(int8x16_t *)(a1 + 48), (int8x16_t)xmmword_214427820);
  *(_QWORD *)(a1 + 64) = v1;
  result = vandq_s8(*(int8x16_t *)(a1 + 120), (int8x16_t)xmmword_214427830);
  *(int8x16_t *)(a1 + 120) = result;
  *(_QWORD *)(a1 + 136) = v2;
  return result;
}

uint64_t sub_21428FB4C(__n128 a1)
{
  return sub_21428FBA0((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __n128, double, double, double, double))sub_21428DFB8, a1);
}

uint64_t sub_21428FB58()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_21428FB84()
{
  return swift_deallocObject();
}

uint64_t sub_21428FB94(__n128 a1)
{
  return sub_21428FBA0((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __n128, double, double, double, double))sub_21428DEAC, a1);
}

uint64_t sub_21428FBA0(uint64_t (*a1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __n128, double, double, double, double), __n128 a2)
{
  uint64_t v2;

  return a1(*(_QWORD *)(v2 + 16), *(unsigned __int8 *)(v2 + 24), *(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 64), *(unsigned __int8 *)(v2 + 72), a2, *(double *)(v2 + 32), *(double *)(v2 + 40), *(double *)(v2 + 80), *(double *)(v2 + 88));
}

uint64_t sub_21428FBC4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_21428FBE8(double a1, double a2)
{
  uint64_t v2;

  return sub_21428BBB4(*(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a1, a2);
}

uint64_t sub_21428FBF0()
{
  uint64_t v0;

  return sub_21428BC80(*(uint64_t (**)(double))(v0 + 16));
}

char *sub_21428FBF8(double a1, double a2)
{
  uint64_t v2;

  return sub_21437C100(0, 0, 0, 1, *(double (**)(double))(v2 + 16), a1, a2);
}

void sub_21428FC10()
{
  uint64_t v0;

  sub_21428BAD8(*(double (**)(double))(v0 + 16), *(_QWORD *)(v0 + 24));
}

double sub_21428FC18()
{
  uint64_t v0;
  double v1;

  (*(void (**)(void))(v0 + 16))();
  return v1;
}

uint64_t destroy for SgShapeStyle.Shading(uint64_t a1)
{
  unsigned int v1;

  v1 = *(unsigned __int8 *)(a1 + 40);
  if (v1 >= 2)
    v1 = *(_DWORD *)a1 + 2;
  if (v1 == 1)
    return _s6Charts15AnyChartContentVwxx_0(a1);
  else
    return swift_release();
}

uint64_t initializeWithCopy for SgShapeStyle.Shading(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  __int128 v4;
  char v5;

  v3 = *(unsigned __int8 *)(a2 + 40);
  if (v3 >= 2)
    v3 = *(_DWORD *)a2 + 2;
  if (v3 == 1)
  {
    v4 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v4;
    (**(void (***)(uint64_t))(v4 - 8))(a1);
    v5 = 1;
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    swift_retain();
    v5 = 0;
  }
  *(_BYTE *)(a1 + 40) = v5;
  return a1;
}

uint64_t assignWithCopy for SgShapeStyle.Shading(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;

  if (a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 2)
      v4 = *(_DWORD *)a1 + 2;
    if (v4 == 1)
      _s6Charts15AnyChartContentVwxx_0(a1);
    else
      swift_release();
    v5 = *(unsigned __int8 *)(a2 + 40);
    if (v5 >= 2)
      v5 = *(_DWORD *)a2 + 2;
    if (v5 == 1)
    {
      v6 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 24) = v6;
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1, a2);
      *(_BYTE *)(a1 + 40) = 1;
    }
    else
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_BYTE *)(a1 + 40) = 0;
      swift_retain();
    }
  }
  return a1;
}

__n128 initializeWithTake for AxisMarksContentStorage(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for SgShapeStyle.Shading(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  __int128 v6;
  char v7;

  if (a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 2)
      v4 = *(_DWORD *)a1 + 2;
    if (v4 == 1)
      _s6Charts15AnyChartContentVwxx_0(a1);
    else
      swift_release();
    v5 = *(unsigned __int8 *)(a2 + 40);
    if (v5 >= 2)
      v5 = *(_DWORD *)a2 + 2;
    if (v5 == 1)
    {
      v6 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v6;
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      v7 = 1;
    }
    else
    {
      v7 = 0;
      *(_QWORD *)a1 = *(_QWORD *)a2;
    }
    *(_BYTE *)(a1 + 40) = v7;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for SgShapeStyle.Shading(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 41))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 >= 2)
    return (v3 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for SgShapeStyle.Shading(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 25) = 0u;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 41) = 0;
    if (a2)
      *(_BYTE *)(result + 40) = -(char)a2;
  }
  return result;
}

uint64_t sub_21428FED8(uint64_t a1)
{
  uint64_t result;

  result = *(unsigned __int8 *)(a1 + 40);
  if (result >= 2)
    return (*(_DWORD *)a1 + 2);
  return result;
}

uint64_t sub_21428FEF4(uint64_t result, unsigned int a2)
{
  if (a2 > 1)
  {
    *(_QWORD *)(result + 32) = 0;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(_BYTE *)(result + 40) = a2;
  return result;
}

ValueMetadata *type metadata accessor for SgShapeStyle.Shading()
{
  return &type metadata for SgShapeStyle.Shading;
}

uint64_t sub_21428FF2C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  char v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int (*v16)(const void *, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *(_QWORD *)v4 = *a2;
    v4 = v9 + ((v5 + 16) & ~(unint64_t)v5);
  }
  else
  {
    v7 = *((_BYTE *)a2 + 40);
    if ((v7 & 1) != 0)
    {
      v8 = *(_OWORD *)(a2 + 3);
      *(_OWORD *)(a1 + 24) = v8;
      (**(void (***)(uint64_t, uint64_t *))(v8 - 8))(a1, a2);
    }
    else
    {
      *(_QWORD *)a1 = *a2;
      swift_retain();
    }
    *(_BYTE *)(v4 + 40) = v7;
    *(_BYTE *)(v4 + 41) = *((_BYTE *)a2 + 41);
    *(_QWORD *)(v4 + 48) = a2[6];
    *(_QWORD *)(v4 + 56) = a2[7];
    v10 = a2[9];
    *(_QWORD *)(v4 + 64) = a2[8];
    *(_QWORD *)(v4 + 72) = v10;
    v11 = *(int *)(a3 + 32);
    v12 = (void *)(v4 + v11);
    v13 = (char *)a2 + v11;
    *(_OWORD *)(v4 + 80) = *((_OWORD *)a2 + 5);
    v14 = sub_214424C68();
    v15 = *(_QWORD *)(v14 - 8);
    v16 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v15 + 48);
    swift_bridgeObjectRetain();
    if (v16(v13, 1, v14))
    {
      v17 = sub_2141D8BF8(&qword_253F15C88);
      memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v15 + 16))(v12, v13, v14);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
    }
    v18 = *(int *)(a3 + 36);
    v19 = v4 + v18;
    v20 = (uint64_t)a2 + v18;
    *(_QWORD *)v19 = *(_QWORD *)v20;
    *(_WORD *)(v19 + 8) = *(_WORD *)(v20 + 8);
  }
  swift_retain();
  return v4;
}

uint64_t sub_2142900AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 40) & 1) != 0)
    _s6Charts15AnyChartContentVwxx_0(a1);
  else
    swift_release();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 32);
  v5 = sub_214424C68();
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  return swift_release();
}

uint64_t sub_214290148(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(const void *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = *(_BYTE *)(a2 + 40);
  if ((v6 & 1) != 0)
  {
    v7 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v7;
    (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1, a2);
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    swift_retain();
  }
  *(_BYTE *)(a1 + 40) = v6;
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v8 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v8;
  v9 = *(int *)(a3 + 32);
  v10 = (void *)(a1 + v9);
  v11 = (const void *)(a2 + v9);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  v12 = sub_214424C68();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v13 + 48);
  swift_bridgeObjectRetain();
  if (v14(v11, 1, v12))
  {
    v15 = sub_2141D8BF8(&qword_253F15C88);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v13 + 16))(v10, v11, v12);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  }
  v16 = *(int *)(a3 + 36);
  v17 = a1 + v16;
  v18 = a2 + v16;
  *(_QWORD *)v17 = *(_QWORD *)v18;
  *(_WORD *)(v17 + 8) = *(_WORD *)(v18 + 8);
  swift_retain();
  return a1;
}

uint64_t sub_2142902A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(void *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 != a2)
  {
    sub_21420D6FC(a1);
    if ((*(_BYTE *)(a2 + 40) & 1) != 0)
    {
      v6 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 24) = v6;
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1, a2);
      *(_BYTE *)(a1 + 40) = 1;
    }
    else
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_BYTE *)(a1 + 40) = 0;
      swift_retain();
    }
  }
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  v7 = *(int *)(a3 + 32);
  v8 = (void *)(a1 + v7);
  v9 = (void *)(a2 + v7);
  v10 = sub_214424C68();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (!v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 24))(v8, v9, v10);
      goto LABEL_11;
    }
    (*(void (**)(void *, uint64_t))(v11 + 8))(v8, v10);
    goto LABEL_10;
  }
  if (v14)
  {
LABEL_10:
    v15 = sub_2141D8BF8(&qword_253F15C88);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_11;
  }
  (*(void (**)(void *, void *, uint64_t))(v11 + 16))(v8, v9, v10);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
LABEL_11:
  v16 = *(int *)(a3 + 36);
  v17 = a1 + v16;
  v18 = a2 + v16;
  *(_QWORD *)(a1 + v16) = *(_QWORD *)(a2 + v16);
  swift_retain();
  swift_release();
  *(_BYTE *)(v17 + 8) = *(_BYTE *)(v18 + 8);
  *(_BYTE *)(v17 + 9) = *(_BYTE *)(v18 + 9);
  return a1;
}

uint64_t sub_21429048C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  v7 = *(_OWORD *)(a2 + 48);
  v8 = *(_OWORD *)(a2 + 64);
  v9 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v9;
  v10 = *(int *)(a3 + 32);
  v11 = (void *)(a1 + v10);
  v12 = (const void *)(a2 + v10);
  *(_OWORD *)(a1 + 48) = v7;
  *(_OWORD *)(a1 + 64) = v8;
  v13 = sub_214424C68();
  v14 = *(_QWORD *)(v13 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
  {
    v15 = sub_2141D8BF8(&qword_253F15C88);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v14 + 32))(v11, v12, v13);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  }
  v16 = *(int *)(a3 + 36);
  v17 = a1 + v16;
  v18 = a2 + v16;
  *(_QWORD *)v17 = *(_QWORD *)v18;
  *(_WORD *)(v17 + 8) = *(_WORD *)(v18 + 8);
  return a1;
}

uint64_t sub_214290594(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(void *, uint64_t, uint64_t);
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if (a1 != a2)
  {
    sub_21420D6FC(a1);
    v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  }
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  v7 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v7;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  v8 = *(int *)(a3 + 32);
  v9 = (void *)(a1 + v8);
  v10 = (void *)(a2 + v8);
  v11 = sub_214424C68();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (!v15)
    {
      (*(void (**)(void *, void *, uint64_t))(v12 + 40))(v9, v10, v11);
      goto LABEL_9;
    }
    (*(void (**)(void *, uint64_t))(v12 + 8))(v9, v11);
    goto LABEL_8;
  }
  if (v15)
  {
LABEL_8:
    v16 = sub_2141D8BF8(&qword_253F15C88);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_9;
  }
  (*(void (**)(void *, void *, uint64_t))(v12 + 32))(v9, v10, v11);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
LABEL_9:
  v17 = *(int *)(a3 + 36);
  v18 = a1 + v17;
  v19 = a2 + v17;
  *(_QWORD *)(a1 + v17) = *(_QWORD *)v19;
  swift_release();
  *(_BYTE *)(v18 + 8) = *(_BYTE *)(v19 + 8);
  *(_BYTE *)(v18 + 9) = *(_BYTE *)(v19 + 9);
  return a1;
}

uint64_t sub_214290720()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21429072C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  int v5;
  uint64_t v9;

  if ((_DWORD)a2 == 2147483646)
  {
    v4 = *(_QWORD *)(a1 + 72);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    v5 = v4 - 1;
    if (v5 < 0)
      v5 = -1;
    return (v5 + 1);
  }
  else
  {
    v9 = sub_2141D8BF8(&qword_253F15C88);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(a1 + *(int *)(a3 + 32), a2, v9);
  }
}

uint64_t sub_2142907B8()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_2142907C4(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 2147483646)
  {
    *(_QWORD *)(result + 72) = a2;
  }
  else
  {
    v7 = sub_2141D8BF8(&qword_253F15C88);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 32), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for SgShapeStyle()
{
  uint64_t result;

  result = qword_253F14468;
  if (!qword_253F14468)
    return swift_getSingletonMetadata();
  return result;
}

void sub_214290878()
{
  unint64_t v0;

  sub_214290914();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

void sub_214290914()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_253F15C90)
  {
    sub_214424C68();
    v0 = sub_214425388();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_253F15C90);
  }
}

uint64_t RectanglePlot<A>.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2142D7304(v2, v4, (uint64_t)v7);
  sub_2142D6BB0((uint64_t)v7, v4, a2);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

void sub_214290A04()
{
  type metadata accessor for XYRenderer();
}

void sub_214290A58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;

  v13 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v15 = (char *)&a9 - v14;
  v17 = type metadata accessor for VectorizedRectanglePlotContent(0, v11, v9, v16);
  MEMORY[0x24BDAC7A8](v17);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v10, a1);
  sub_214290B38();
}

uint64_t sub_214290AF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v4, v5);
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(v3 + 32))(*(_QWORD *)(v6 - 136), v1, v0);
}

void sub_214290B38()
{
  type metadata accessor for XYRenderer();
}

uint64_t sub_214290B6C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v1 + 24) = a1;
  *(_QWORD *)(v1 + 32) = &off_24D1814F0;
  v4 = sub_2141D8DD8((uint64_t *)v1);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 32))(v4, v2, a1);
  v5 = (int *)type metadata accessor for RectanglesRenderer(0);
  *(_OWORD *)(v1 + 40) = 0u;
  *(_OWORD *)(v1 + 56) = 0u;
  v6 = v1 + v5[8];
  v7 = type metadata accessor for ChartContentRenderContext.Environment(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  v8 = v1 + v5[9];
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_BYTE *)(v8 + 32) = 1;
  v9 = v1 + v5[10];
  v10 = *MEMORY[0x24BDEEB68];
  v11 = sub_214424308();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 104))(v9, v10, v11);
}

uint64_t sub_214290C3C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return RectanglePlot<A>.body.getter(a1, a2);
}

void RectanglePlot.init<A, B, C>(_:x:y:width:height:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, uint64_t a7@<X8>, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v28 = a3;
  v29 = a7;
  v31 = a2;
  v32 = a1;
  v19 = a10;
  v30 = a8;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v27 = type metadata accessor for BoundingSectionSpecification(0, AssociatedTypeWitness, a6, a10);
  MEMORY[0x24BDAC7A8](v27);
  v26 = (char *)&v18 - v14;
  v24 = type metadata accessor for BoundingSectionSpecification(0, AssociatedTypeWitness, a5, a9);
  v15 = MEMORY[0x24BDAC7A8](v24);
  v20 = (char *)&v18 - v16;
  v25 = *(_QWORD *)(a4 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v22 = (char *)&v18 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = a4;
  v33 = a4;
  v34 = a5;
  v21 = a5;
  v35 = a6;
  v36 = v30;
  v37 = a9;
  v38 = v19;
  type metadata accessor for XYRenderer();
}

void sub_214290DB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t TupleTypeMetadata2;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  MEMORY[0x24BDAC7A8](a1);
  *(_QWORD *)(v19 - 208) = (char *)&a9 - v20;
  *(_DWORD *)(v19 - 388) = *v10;
  *(_OWORD *)(v19 - 416) = *(_OWORD *)(v10 + 8);
  *(_OWORD *)(v19 - 432) = *(_OWORD *)(v10 + 24);
  *(_OWORD *)(v19 - 448) = *(_OWORD *)(v10 + 40);
  *(_OWORD *)(v19 - 464) = *(_OWORD *)(v10 + 56);
  *(_OWORD *)(v19 - 480) = *(_OWORD *)(v10 + 72);
  *(_QWORD *)(v19 - 488) = *((_QWORD *)v10 + 11);
  *(_DWORD *)(v19 - 492) = v10[96];
  *(_QWORD *)(v19 - 504) = *((_QWORD *)v10 + 13);
  *(_DWORD *)(v19 - 508) = v10[112];
  *(_DWORD *)(v19 - 260) = *v13;
  *(_OWORD *)(v19 - 288) = *(_OWORD *)(v13 + 8);
  *(_OWORD *)(v19 - 304) = *(_OWORD *)(v13 + 24);
  *(_OWORD *)(v19 - 320) = *(_OWORD *)(v13 + 40);
  *(_OWORD *)(v19 - 336) = *(_OWORD *)(v13 + 56);
  *(_OWORD *)(v19 - 352) = *(_OWORD *)(v13 + 72);
  *(_QWORD *)(v19 - 360) = *((_QWORD *)v13 + 11);
  *(_DWORD *)(v19 - 364) = v13[96];
  *(_QWORD *)(v19 - 376) = *((_QWORD *)v13 + 13);
  v21 = v13[112];
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v16 + 16))(v11, *(_QWORD *)(v19 - 144), v9);
  v22 = type metadata accessor for PlottableProjection(255, v12, v18, v14);
  type metadata accessor for MarkDimensions(255, v12, v23, v24);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v26 = *(_QWORD *)(v19 - 384);
  v27 = v26 + *(int *)(TupleTypeMetadata2 + 48);
  *(_QWORD *)(v19 - 256) = v22;
  v28 = *(_QWORD *)(v22 - 8);
  *(_QWORD *)(v19 - 240) = v28;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v28 + 16))(v26, *(_QWORD *)(v19 - 152), v22);
  *(_BYTE *)v27 = *(_DWORD *)(v19 - 388);
  *(_OWORD *)(v27 + 8) = *(_OWORD *)(v19 - 416);
  *(_OWORD *)(v27 + 24) = *(_OWORD *)(v19 - 432);
  *(_OWORD *)(v27 + 40) = *(_OWORD *)(v19 - 448);
  *(_OWORD *)(v27 + 56) = *(_OWORD *)(v19 - 464);
  *(_OWORD *)(v27 + 72) = *(_OWORD *)(v19 - 480);
  *(_QWORD *)(v27 + 88) = *(_QWORD *)(v19 - 488);
  *(_BYTE *)(v27 + 96) = *(_DWORD *)(v19 - 492);
  *(_QWORD *)(v27 + 104) = *(_QWORD *)(v19 - 504);
  *(_BYTE *)(v27 + 112) = *(_DWORD *)(v19 - 508);
  swift_storeEnumTagMultiPayload();
  v29 = type metadata accessor for PlottableProjection(255, v12, v17, v15);
  v30 = *(_QWORD *)(v19 - 192) + *(int *)(swift_getTupleTypeMetadata2() + 48);
  (*(void (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)(v29 - 8) + 16))(*(_QWORD *)(v19 - 192), *(_QWORD *)(v19 - 176), v29);
  *(_BYTE *)v30 = *(_DWORD *)(v19 - 260);
  *(_OWORD *)(v30 + 8) = *(_OWORD *)(v19 - 288);
  *(_OWORD *)(v30 + 24) = *(_OWORD *)(v19 - 304);
  *(_OWORD *)(v30 + 40) = *(_OWORD *)(v19 - 320);
  *(_OWORD *)(v30 + 56) = *(_OWORD *)(v19 - 336);
  *(_OWORD *)(v30 + 72) = *(_OWORD *)(v19 - 352);
  *(_QWORD *)(v30 + 88) = *(_QWORD *)(v19 - 360);
  *(_BYTE *)(v30 + 96) = *(_DWORD *)(v19 - 364);
  *(_QWORD *)(v30 + 104) = *(_QWORD *)(v19 - 376);
  *(_BYTE *)(v30 + 112) = v21;
  swift_storeEnumTagMultiPayload();
  sub_21426CC14();
}

void sub_2142910F0()
{
  sub_214290A04();
}

uint64_t sub_214291118()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v3, v1);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v4 - 240) + 8))(*(_QWORD *)(v4 - 152), *(_QWORD *)(v4 - 256));
  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(v4 - 200) + 8))(*(_QWORD *)(v4 - 144), v0);
}

void RectanglePlot.init<A, B, C>(_:xStart:xEnd:y:height:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[19];
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v25 = a4;
  v26 = a8;
  v29 = a3;
  v30 = a2;
  v28 = a1;
  v18[0] = a11;
  v27 = a9;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v18[1] = a7;
  v24 = type metadata accessor for BoundingSectionSpecification(0, AssociatedTypeWitness, a7, a11);
  MEMORY[0x24BDAC7A8](v24);
  v22 = (char *)v18 - v15;
  v19 = type metadata accessor for BoundingSectionSpecification(0, AssociatedTypeWitness, a6, a10);
  v16 = MEMORY[0x24BDAC7A8](v19);
  v23 = *(_QWORD *)(a5 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)v18 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = a5;
  v31 = a5;
  v32 = a6;
  v33 = a7;
  v34 = v27;
  v18[18] = a10;
  v35 = a10;
  v36 = v18[0];
  type metadata accessor for XYRenderer();
}

void sub_2142912D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, _QWORD, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t TupleTypeMetadata2;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  MEMORY[0x24BDAC7A8](a1);
  *(_QWORD *)(v18 - 216) = (char *)&a9 - v19;
  *(_DWORD *)(v18 - 260) = *v13;
  *(_OWORD *)(v18 - 288) = *(_OWORD *)(v13 + 8);
  *(_OWORD *)(v18 - 304) = *(_OWORD *)(v13 + 24);
  *(_OWORD *)(v18 - 320) = *(_OWORD *)(v13 + 40);
  *(_OWORD *)(v18 - 336) = *(_OWORD *)(v13 + 56);
  *(_OWORD *)(v18 - 352) = *(_OWORD *)(v13 + 72);
  *(_QWORD *)(v18 - 360) = *((_QWORD *)v13 + 11);
  *(_DWORD *)(v18 - 364) = v13[96];
  *(_QWORD *)(v18 - 376) = *((_QWORD *)v13 + 13);
  *(_DWORD *)(v18 - 380) = v13[112];
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v10 + 16))(v15, *(_QWORD *)(v18 - 160), v9);
  v20 = type metadata accessor for PlottableProjection(255, v12, v14, v16);
  v21 = v11 + *(int *)(swift_getTupleTypeMetadata2() + 48);
  v22 = *(_QWORD *)(v20 - 8);
  *(_QWORD *)(v18 - 224) = v22;
  v23 = *(void (**)(uint64_t, _QWORD, uint64_t))(v22 + 16);
  v23(v11, *(_QWORD *)(v18 - 144), v20);
  v23(v21, *(_QWORD *)(v18 - 152), v20);
  swift_storeEnumTagMultiPayload();
  v24 = type metadata accessor for PlottableProjection(255, v12, *(_QWORD *)(v18 - 392), v17);
  type metadata accessor for MarkDimensions(255, v12, v25, v26);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v28 = *(_QWORD *)(v18 - 208);
  v29 = v28 + *(int *)(TupleTypeMetadata2 + 48);
  v30 = *(_QWORD *)(v24 - 8);
  *(_QWORD *)(v18 - 248) = v30;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v30 + 16))(v28, *(_QWORD *)(v18 - 184), v24);
  *(_BYTE *)v29 = *(_DWORD *)(v18 - 260);
  *(_OWORD *)(v29 + 8) = *(_OWORD *)(v18 - 288);
  *(_OWORD *)(v29 + 24) = *(_OWORD *)(v18 - 304);
  *(_OWORD *)(v29 + 40) = *(_OWORD *)(v18 - 320);
  *(_OWORD *)(v29 + 56) = *(_OWORD *)(v18 - 336);
  *(_OWORD *)(v29 + 72) = *(_OWORD *)(v18 - 352);
  *(_QWORD *)(v29 + 88) = *(_QWORD *)(v18 - 360);
  *(_BYTE *)(v29 + 96) = *(_DWORD *)(v18 - 364);
  *(_QWORD *)(v29 + 104) = *(_QWORD *)(v18 - 376);
  *(_BYTE *)(v29 + 112) = *(_DWORD *)(v18 - 380);
  swift_storeEnumTagMultiPayload();
  sub_21426CC14();
}

void sub_214291544()
{
  sub_214290A04();
}

uint64_t sub_21429156C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(_QWORD, uint64_t);

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 248) + 8))(v1, v3);
  v5 = *(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v4 - 224) + 8);
  v5(*(_QWORD *)(v4 - 152), v2);
  v5(*(_QWORD *)(v4 - 144), v2);
  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(v4 - 200) + 8))(*(_QWORD *)(v4 - 160), v0);
}

void RectanglePlot.init<A, B, C>(_:x:yStart:yEnd:width:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[22];
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v23 = a4;
  v24 = a8;
  v27 = a3;
  v28 = a2;
  v25 = a9;
  v26 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v18[15] = a6;
  v18[14] = a10;
  v22 = type metadata accessor for BoundingSectionSpecification(0, AssociatedTypeWitness, a6, a10);
  MEMORY[0x24BDAC7A8](v22);
  v20 = (char *)v18 - v15;
  v19 = type metadata accessor for BoundingSectionSpecification(0, AssociatedTypeWitness, a7, a11);
  v16 = MEMORY[0x24BDAC7A8](v19);
  v21 = *(_QWORD *)(a5 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v18[19] = (char *)v18 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18[20] = a5;
  v29 = a5;
  v30 = a7;
  v18[16] = a7;
  v31 = a6;
  v32 = v25;
  v18[17] = a11;
  v33 = a11;
  v34 = a10;
  type metadata accessor for XYRenderer();
}

void sub_214291740(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 v20;
  unsigned __int8 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, _QWORD, uint64_t);

  MEMORY[0x24BDAC7A8](a1);
  *(_QWORD *)(v17 - 216) = (char *)&a9 - v18;
  *(_DWORD *)(v17 - 292) = *v14;
  *(_OWORD *)(v17 - 320) = *(_OWORD *)(v14 + 8);
  *(_OWORD *)(v17 - 336) = *(_OWORD *)(v14 + 24);
  *(_OWORD *)(v17 - 352) = *(_OWORD *)(v14 + 40);
  *(_OWORD *)(v17 - 368) = *(_OWORD *)(v14 + 56);
  *(_OWORD *)(v17 - 384) = *(_OWORD *)(v14 + 72);
  v19 = *((_QWORD *)v14 + 11);
  v20 = v14[96];
  *(_QWORD *)(v17 - 392) = *((_QWORD *)v14 + 13);
  v21 = v14[112];
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v16 + 16))(v10, *(_QWORD *)(v17 - 160), v9);
  v22 = type metadata accessor for PlottableProjection(255, v13, v15, v11);
  type metadata accessor for MarkDimensions(255, v13, v23, v24);
  v25 = v12 + *(int *)(swift_getTupleTypeMetadata2() + 48);
  *(_QWORD *)(v17 - 256) = v22;
  v26 = *(_QWORD *)(v22 - 8);
  *(_QWORD *)(v17 - 232) = v26;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v26 + 16))(v12, *(_QWORD *)(v17 - 144), v22);
  *(_BYTE *)v25 = *(_DWORD *)(v17 - 292);
  *(_OWORD *)(v25 + 8) = *(_OWORD *)(v17 - 320);
  *(_OWORD *)(v25 + 24) = *(_OWORD *)(v17 - 336);
  *(_OWORD *)(v25 + 40) = *(_OWORD *)(v17 - 352);
  *(_OWORD *)(v25 + 56) = *(_OWORD *)(v17 - 368);
  *(_OWORD *)(v25 + 72) = *(_OWORD *)(v17 - 384);
  *(_QWORD *)(v25 + 88) = v19;
  *(_BYTE *)(v25 + 96) = v20;
  *(_QWORD *)(v25 + 104) = *(_QWORD *)(v17 - 392);
  *(_BYTE *)(v25 + 112) = v21;
  swift_storeEnumTagMultiPayload();
  v27 = type metadata accessor for PlottableProjection(255, v13, *(_QWORD *)(v17 - 280), *(_QWORD *)(v17 - 288));
  v28 = *(_QWORD *)(v17 - 208) + *(int *)(swift_getTupleTypeMetadata2() + 48);
  v29 = *(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v27 - 8) + 16);
  v29(*(_QWORD *)(v17 - 208), *(_QWORD *)(v17 - 152), v27);
  v29(v28, *(_QWORD *)(v17 - 184), v27);
  swift_storeEnumTagMultiPayload();
  sub_21426CC14();
}

void sub_214291984()
{
  sub_214290A04();
}

uint64_t sub_2142919AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);

  v5 = *(void (**)(uint64_t, uint64_t))(v1 + 8);
  v5(v3, v2);
  v5(*(_QWORD *)(v4 - 152), v2);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v4 - 232) + 8))(*(_QWORD *)(v4 - 144), *(_QWORD *)(v4 - 256));
  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(v4 - 200) + 8))(*(_QWORD *)(v4 - 160), v0);
}

void RectanglePlot.init<A, B, C>(_:xStart:xEnd:yStart:yEnd:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[4];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v23 = a5;
  v24 = a9;
  v28 = a4;
  v29 = a3;
  v26 = a1;
  v27 = a2;
  v18[1] = a12;
  v20 = a10;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v25 = a8;
  v22 = type metadata accessor for BoundingSectionSpecification(0, AssociatedTypeWitness, a8, a12);
  MEMORY[0x24BDAC7A8](v22);
  v19 = type metadata accessor for BoundingSectionSpecification(0, AssociatedTypeWitness, a7, a11);
  v16 = MEMORY[0x24BDAC7A8](v19);
  v21 = *(_QWORD *)(a6 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v18[2] = a11;
  v18[3] = (char *)v18 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = a6;
  v31 = a7;
  v32 = a8;
  v33 = a10;
  v34 = a11;
  v35 = a12;
  type metadata accessor for XYRenderer();
}

void sub_214291B70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, _QWORD, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, _QWORD, uint64_t);

  MEMORY[0x24BDAC7A8](a1);
  *(_QWORD *)(v18 - 232) = (char *)&a9 - v19;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v10 + 16))(v9, *(_QWORD *)(v18 - 168), v15);
  v20 = type metadata accessor for PlottableProjection(255, v14, v17, v16);
  v21 = v13 + *(int *)(swift_getTupleTypeMetadata2() + 48);
  v22 = *(_QWORD *)(v20 - 8);
  *(_QWORD *)(v18 - 224) = v22;
  v23 = *(void (**)(uint64_t, _QWORD, uint64_t))(v22 + 16);
  v23(v13, *(_QWORD *)(v18 - 160), v20);
  v23(v21, *(_QWORD *)(v18 - 144), v20);
  swift_storeEnumTagMultiPayload();
  v24 = type metadata accessor for PlottableProjection(255, v14, *(_QWORD *)(v18 - 176), v12);
  v25 = v11 + *(int *)(swift_getTupleTypeMetadata2() + 48);
  v26 = *(_QWORD *)(v24 - 8);
  *(_QWORD *)(v18 - 240) = v26;
  v27 = *(void (**)(uint64_t, _QWORD, uint64_t))(v26 + 16);
  v27(v11, *(_QWORD *)(v18 - 152), v24);
  v27(v25, *(_QWORD *)(v18 - 192), v24);
  swift_storeEnumTagMultiPayload();
  sub_21426CC14();
}

void sub_214291CE4()
{
  sub_214290A04();
}

uint64_t sub_214291D0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  void (*v6)(_QWORD, uint64_t);

  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 240) + 8);
  v5(v3, v2);
  v5(*(_QWORD *)(v4 - 152), v2);
  v6 = *(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v4 - 224) + 8);
  v6(*(_QWORD *)(v4 - 144), v1);
  v6(*(_QWORD *)(v4 - 160), v1);
  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(v4 - 208) + 8))(*(_QWORD *)(v4 - 168), v0);
}

void RectanglePlot.init<A, B>(_:x:yStart:yEnd:width:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v14 = type metadata accessor for BoundingSectionSpecification(0, AssociatedTypeWitness, MEMORY[0x24BEE13C8], (uint64_t)&protocol witness table for Double);
  MEMORY[0x24BDAC7A8](v14);
  v13 = type metadata accessor for BoundingSectionSpecification(0, AssociatedTypeWitness, a9, a11);
  v12 = MEMORY[0x24BDAC7A8](v13);
  MEMORY[0x24BDAC7A8](v12);
  type metadata accessor for XYRenderer();
}

void sub_214291EE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  MEMORY[0x24BDAC7A8](a1);
  *(_QWORD *)(v18 - 232) = (char *)&a9 - v19;
  *(_DWORD *)(v18 - 252) = *v16;
  *(_OWORD *)(v18 - 272) = *(_OWORD *)(v16 + 8);
  *(_OWORD *)(v18 - 288) = *(_OWORD *)(v16 + 24);
  *(_OWORD *)(v18 - 304) = *(_OWORD *)(v16 + 40);
  *(_OWORD *)(v18 - 320) = *(_OWORD *)(v16 + 56);
  *(_OWORD *)(v18 - 336) = *(_OWORD *)(v16 + 72);
  *(_QWORD *)(v18 - 344) = *((_QWORD *)v16 + 11);
  *(_DWORD *)(v18 - 348) = v16[96];
  *(_QWORD *)(v18 - 360) = *((_QWORD *)v16 + 13);
  *(_DWORD *)(v18 - 364) = v16[112];
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v12 + 16))(v13, *(_QWORD *)(v18 - 144), v9);
  v20 = type metadata accessor for PlottableProjection(255, v14, v11, v10);
  type metadata accessor for MarkDimensions(255, v14, v21, v22);
  v23 = v15 + *(int *)(swift_getTupleTypeMetadata2() + 48);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v15, *(_QWORD *)(v18 - 192), v20);
  *(_BYTE *)v23 = *(_DWORD *)(v18 - 252);
  *(_OWORD *)(v23 + 8) = *(_OWORD *)(v18 - 272);
  *(_OWORD *)(v23 + 24) = *(_OWORD *)(v18 - 288);
  *(_OWORD *)(v23 + 40) = *(_OWORD *)(v18 - 304);
  *(_OWORD *)(v23 + 56) = *(_OWORD *)(v18 - 320);
  *(_OWORD *)(v23 + 72) = *(_OWORD *)(v18 - 336);
  *(_QWORD *)(v23 + 88) = *(_QWORD *)(v18 - 344);
  *(_BYTE *)(v23 + 96) = *(_DWORD *)(v18 - 348);
  *(_QWORD *)(v23 + 104) = *(_QWORD *)(v18 - 360);
  *(_BYTE *)(v23 + 112) = *(_DWORD *)(v18 - 364);
  swift_storeEnumTagMultiPayload();
  *(_QWORD *)v17 = *(_QWORD *)(v18 - 184);
  *(_BYTE *)(v17 + 8) = *(_DWORD *)(v18 - 172) & 1;
  *(_QWORD *)(v17 + 16) = *(_QWORD *)(v18 - 168);
  *(_BYTE *)(v17 + 24) = *(_DWORD *)(v18 - 156) & 1;
  swift_storeEnumTagMultiPayload();
  sub_21426CC14();
}

void sub_2142920F0()
{
  sub_214290A04();
}

uint64_t sub_214292118()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v0, v2);
  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(v4 - 224) + 8))(*(_QWORD *)(v4 - 144), v3);
}

void RectanglePlot.init<A, B>(_:xStart:xEnd:y:height:)(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[17];
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _UNKNOWN **v33;
  uint64_t v34;

  v26 = a6;
  v27 = a8;
  v24 = a5;
  v23 = a4;
  v22 = a3;
  v21 = a2;
  v28 = a1;
  v16[1] = a11;
  v20 = a10;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v25 = type metadata accessor for BoundingSectionSpecification(0, AssociatedTypeWitness, a9, a11);
  MEMORY[0x24BDAC7A8](v25);
  v13 = MEMORY[0x24BEE13C8];
  v17 = type metadata accessor for BoundingSectionSpecification(0, AssociatedTypeWitness, MEMORY[0x24BEE13C8], (uint64_t)&protocol witness table for Double);
  v14 = MEMORY[0x24BDAC7A8](v17);
  v19 = *(_QWORD *)(a7 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)v16 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = a7;
  v30 = v13;
  v31 = a9;
  v32 = a10;
  v33 = &protocol witness table for Double;
  v34 = a11;
  type metadata accessor for XYRenderer();
}

void sub_2142922CC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  MEMORY[0x24BDAC7A8](a1);
  *(_DWORD *)(v10 - 236) = *v3;
  *(_OWORD *)(v10 - 256) = *(_OWORD *)(v3 + 8);
  *(_OWORD *)(v10 - 272) = *(_OWORD *)(v3 + 24);
  *(_OWORD *)(v10 - 288) = *(_OWORD *)(v3 + 40);
  *(_OWORD *)(v10 - 304) = *(_OWORD *)(v3 + 56);
  *(_OWORD *)(v10 - 320) = *(_OWORD *)(v3 + 72);
  *(_QWORD *)(v10 - 328) = *((_QWORD *)v3 + 11);
  *(_DWORD *)(v10 - 332) = v3[96];
  *(_QWORD *)(v10 - 344) = *((_QWORD *)v3 + 13);
  *(_DWORD *)(v10 - 348) = v3[112];
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v8 + 16))(v5, *(_QWORD *)(v10 - 144), v1);
  *(_QWORD *)v2 = *(_QWORD *)(v10 - 200);
  *(_BYTE *)(v2 + 8) = *(_DWORD *)(v10 - 188) & 1;
  *(_QWORD *)(v2 + 16) = *(_QWORD *)(v10 - 184);
  *(_BYTE *)(v2 + 24) = *(_DWORD *)(v10 - 172) & 1;
  swift_storeEnumTagMultiPayload();
  v11 = type metadata accessor for PlottableProjection(255, v7, v6, v4);
  type metadata accessor for MarkDimensions(255, v7, v12, v13);
  v14 = v9 + *(int *)(swift_getTupleTypeMetadata2() + 48);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, *(_QWORD *)(v10 - 160), v11);
  *(_BYTE *)v14 = *(_DWORD *)(v10 - 236);
  *(_OWORD *)(v14 + 8) = *(_OWORD *)(v10 - 256);
  *(_OWORD *)(v14 + 24) = *(_OWORD *)(v10 - 272);
  *(_OWORD *)(v14 + 40) = *(_OWORD *)(v10 - 288);
  *(_OWORD *)(v14 + 56) = *(_OWORD *)(v10 - 304);
  *(_OWORD *)(v14 + 72) = *(_OWORD *)(v10 - 320);
  *(_QWORD *)(v14 + 88) = *(_QWORD *)(v10 - 328);
  *(_BYTE *)(v14 + 96) = *(_DWORD *)(v10 - 332);
  *(_QWORD *)(v14 + 104) = *(_QWORD *)(v10 - 344);
  *(_BYTE *)(v14 + 112) = *(_DWORD *)(v10 - 348);
  swift_storeEnumTagMultiPayload();
  sub_21426CC14();
}

void sub_2142924E0()
{
  sub_214290A04();
}

uint64_t sub_214292508()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v1);
  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(v4 - 216) + 8))(*(_QWORD *)(v4 - 144), v0);
}

void RectanglePlot.init<A, B>(_:xStart:xEnd:yStart:yEnd:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, int a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[3];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _UNKNOWN **v34;

  v26 = a7;
  v25 = a6;
  v24 = a5;
  v22 = a3;
  v23 = a4;
  v21 = a2;
  v27 = a9;
  v28 = a1;
  v18 = a11;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v20 = type metadata accessor for BoundingSectionSpecification(0, AssociatedTypeWitness, MEMORY[0x24BEE13C8], (uint64_t)&protocol witness table for Double);
  MEMORY[0x24BDAC7A8](v20);
  v17 = type metadata accessor for BoundingSectionSpecification(0, AssociatedTypeWitness, a10, a12);
  v14 = MEMORY[0x24BDAC7A8](v17);
  v19 = *(_QWORD *)(a8 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v16[1] = a10;
  v16[2] = (char *)v16 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = a8;
  v30 = a10;
  v31 = MEMORY[0x24BEE13C8];
  v32 = a11;
  v33 = a12;
  v34 = &protocol witness table for Double;
  type metadata accessor for XYRenderer();
}

void sub_2142926B0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, _QWORD, uint64_t);

  MEMORY[0x24BDAC7A8](a1);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v5 + 16))(v4, *(_QWORD *)(v9 - 144), v1);
  v10 = type metadata accessor for PlottableProjection(255, v3, v6, v2);
  v11 = v7 + *(int *)(swift_getTupleTypeMetadata2() + 48);
  v12 = *(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  v12(v7, *(_QWORD *)(v9 - 200), v10);
  v12(v11, *(_QWORD *)(v9 - 192), v10);
  swift_storeEnumTagMultiPayload();
  *(_QWORD *)v8 = *(_QWORD *)(v9 - 184);
  *(_BYTE *)(v8 + 8) = *(_DWORD *)(v9 - 172) & 1;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v9 - 168);
  *(_BYTE *)(v8 + 24) = *(_DWORD *)(v9 - 156) & 1;
  swift_storeEnumTagMultiPayload();
  sub_21426CC14();
}

void sub_2142927DC()
{
  sub_214290A04();
}

uint64_t sub_214292808()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);

  v6 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v6(v2, v1);
  v6(v3, v1);
  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(v5 - 216) + 8))(*(_QWORD *)(v5 - 144), v0);
}

void RectanglePlot.init<A, B>(_:xStart:xEnd:yStart:yEnd:)(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[7];
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _UNKNOWN **v30;
  uint64_t v31;

  v22 = a7;
  v23 = a9;
  v24 = a1;
  v25 = a6;
  v20 = a5;
  v19 = a4;
  v18 = a3;
  v17[6] = a2;
  v17[4] = a11;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v21 = type metadata accessor for BoundingSectionSpecification(0, AssociatedTypeWitness, a10, a12);
  MEMORY[0x24BDAC7A8](v21);
  v14 = type metadata accessor for BoundingSectionSpecification(0, AssociatedTypeWitness, MEMORY[0x24BEE13C8], (uint64_t)&protocol witness table for Double);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v17[5] = *(_QWORD *)(a8 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v17[2] = (char *)v17 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = a8;
  v27 = MEMORY[0x24BEE13C8];
  v28 = a10;
  v17[1] = a10;
  v29 = a11;
  v30 = &protocol witness table for Double;
  v31 = a12;
  type metadata accessor for XYRenderer();
}

void sub_2142929C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, _QWORD, uint64_t);

  MEMORY[0x24BDAC7A8](a1);
  *(_QWORD *)(v17 - 232) = (char *)&a9 - v18;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v13 + 16))(v12, *(_QWORD *)(v17 - 152), v9);
  *(_QWORD *)v10 = *(_QWORD *)(v17 - 208);
  *(_BYTE *)(v10 + 8) = *(_DWORD *)(v17 - 196) & 1;
  *(_QWORD *)(v10 + 16) = *(_QWORD *)(v17 - 192);
  *(_BYTE *)(v10 + 24) = *(_DWORD *)(v17 - 180) & 1;
  swift_storeEnumTagMultiPayload();
  v19 = type metadata accessor for PlottableProjection(255, v11, v16, v15);
  v20 = v14 + *(int *)(swift_getTupleTypeMetadata2() + 48);
  v21 = *(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v19 - 8) + 16);
  v21(v14, *(_QWORD *)(v17 - 144), v19);
  v21(v20, *(_QWORD *)(v17 - 168), v19);
  swift_storeEnumTagMultiPayload();
  sub_21426CC14();
}

void sub_214292AF8()
{
  sub_214290A04();
}

uint64_t sub_214292B20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);

  v5 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v5(v3, v1);
  v5(*(_QWORD *)(v4 - 144), v1);
  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(v4 - 216) + 8))(*(_QWORD *)(v4 - 152), v0);
}

void RectanglePlot.init<A, B>(_:x:yStart:yEnd:width:)(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[19];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _UNKNOWN **v28;

  v21 = a7;
  v22 = a1;
  v18 = a3;
  v19 = a4;
  v16 = a2;
  v20 = a8;
  v11 = *(_QWORD *)(*a3 + *MEMORY[0x24BEE46A8]);
  v17 = type metadata accessor for BoundingSectionSpecification(0, v11, MEMORY[0x24BEE13C8], (uint64_t)&protocol witness table for Double);
  MEMORY[0x24BDAC7A8](v17);
  v15 = type metadata accessor for BoundingSectionSpecification(0, v11, a6, a9);
  v12 = MEMORY[0x24BDAC7A8](v15);
  v14[18] = *(_QWORD *)(a5 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v14[17] = (char *)v14 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = a5;
  v24 = a6;
  v14[15] = a6;
  v25 = MEMORY[0x24BEE13C8];
  v26 = v21;
  v14[16] = a9;
  v27 = a9;
  v28 = &protocol witness table for Double;
  type metadata accessor for XYRenderer();
}

void sub_214292CBC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  MEMORY[0x24BDAC7A8](a1);
  *(_DWORD *)(v10 - 236) = *v4;
  *(_OWORD *)(v10 - 256) = *(_OWORD *)(v4 + 8);
  *(_OWORD *)(v10 - 272) = *(_OWORD *)(v4 + 24);
  *(_OWORD *)(v10 - 288) = *(_OWORD *)(v4 + 40);
  *(_OWORD *)(v10 - 304) = *(_OWORD *)(v4 + 56);
  *(_OWORD *)(v10 - 320) = *(_OWORD *)(v4 + 72);
  *(_QWORD *)(v10 - 328) = *((_QWORD *)v4 + 11);
  *(_DWORD *)(v10 - 332) = v4[96];
  *(_QWORD *)(v10 - 344) = *((_QWORD *)v4 + 13);
  *(_DWORD *)(v10 - 348) = v4[112];
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v2 + 16))(v1, *(_QWORD *)(v10 - 144), v5);
  v11 = type metadata accessor for PlottableProjection(255, v7, v6, v3);
  type metadata accessor for MarkDimensions(255, v7, v12, v13);
  v14 = v8 + *(int *)(swift_getTupleTypeMetadata2() + 48);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v8, *(_QWORD *)(v10 - 192), v11);
  *(_BYTE *)v14 = *(_DWORD *)(v10 - 236);
  *(_OWORD *)(v14 + 8) = *(_OWORD *)(v10 - 256);
  *(_OWORD *)(v14 + 24) = *(_OWORD *)(v10 - 272);
  *(_OWORD *)(v14 + 40) = *(_OWORD *)(v10 - 288);
  *(_OWORD *)(v14 + 56) = *(_OWORD *)(v10 - 304);
  *(_OWORD *)(v14 + 72) = *(_OWORD *)(v10 - 320);
  *(_QWORD *)(v14 + 88) = *(_QWORD *)(v10 - 328);
  *(_BYTE *)(v14 + 96) = *(_DWORD *)(v10 - 332);
  *(_QWORD *)(v14 + 104) = *(_QWORD *)(v10 - 344);
  *(_BYTE *)(v14 + 112) = *(_DWORD *)(v10 - 348);
  swift_storeEnumTagMultiPayload();
  v15 = *(_QWORD *)(v10 - 168);
  *v9 = *(_QWORD *)(v10 - 176);
  v9[1] = v15;
  swift_storeEnumTagMultiPayload();
  sub_21426CC14();
}

void sub_214292EA8()
{
  sub_214290A04();
}

uint64_t sub_214292ED0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v1);
  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(v4 - 208) + 8))(*(_QWORD *)(v4 - 144), v0);
}

void RectanglePlot.init<A, B>(_:xStart:xEnd:y:height:)(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[25];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _UNKNOWN **v25;
  uint64_t v26;

  v16[23] = a3;
  v16[24] = a7;
  v18 = a4;
  v19 = a8;
  v16[21] = a2;
  v20 = a1;
  v16[1] = a9;
  v12 = *(_QWORD *)(*a2 + *MEMORY[0x24BEE46A8]);
  v17 = type metadata accessor for BoundingSectionSpecification(0, v12, a6, a9);
  MEMORY[0x24BDAC7A8](v17);
  v13 = type metadata accessor for BoundingSectionSpecification(0, v12, MEMORY[0x24BEE13C8], (uint64_t)&protocol witness table for Double);
  v14 = MEMORY[0x24BDAC7A8](v13);
  v16[22] = *(_QWORD *)(a5 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v16[18] = (char *)v16 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16[19] = a5;
  v21 = a5;
  v22 = MEMORY[0x24BEE13C8];
  v23 = a6;
  v24 = a7;
  v25 = &protocol witness table for Double;
  v26 = a9;
  type metadata accessor for XYRenderer();
}

void sub_214293060(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  MEMORY[0x24BDAC7A8](a1);
  *(_QWORD *)(v18 - 208) = (char *)&a9 - v19;
  *(_DWORD *)(v18 - 228) = *v12;
  *(_OWORD *)(v18 - 256) = *(_OWORD *)(v12 + 8);
  *(_OWORD *)(v18 - 272) = *(_OWORD *)(v12 + 24);
  *(_OWORD *)(v18 - 288) = *(_OWORD *)(v12 + 40);
  *(_OWORD *)(v18 - 304) = *(_OWORD *)(v12 + 56);
  *(_OWORD *)(v18 - 320) = *(_OWORD *)(v12 + 72);
  *(_QWORD *)(v18 - 328) = *((_QWORD *)v12 + 11);
  *(_DWORD *)(v18 - 332) = v12[96];
  *(_QWORD *)(v18 - 344) = *((_QWORD *)v12 + 13);
  *(_DWORD *)(v18 - 348) = v12[112];
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v14 + 16))(v13, *(_QWORD *)(v18 - 144), v16);
  v20 = *(_QWORD *)(v18 - 184);
  *v10 = *(_QWORD *)(v18 - 200);
  v10[1] = v20;
  swift_storeEnumTagMultiPayload();
  v21 = type metadata accessor for PlottableProjection(255, v11, v15, v9);
  type metadata accessor for MarkDimensions(255, v11, v22, v23);
  v24 = v17 + *(int *)(swift_getTupleTypeMetadata2() + 48);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v17, *(_QWORD *)(v18 - 160), v21);
  *(_BYTE *)v24 = *(_DWORD *)(v18 - 228);
  *(_OWORD *)(v24 + 8) = *(_OWORD *)(v18 - 256);
  *(_OWORD *)(v24 + 24) = *(_OWORD *)(v18 - 272);
  *(_OWORD *)(v24 + 40) = *(_OWORD *)(v18 - 288);
  *(_OWORD *)(v24 + 56) = *(_OWORD *)(v18 - 304);
  *(_OWORD *)(v24 + 72) = *(_OWORD *)(v18 - 320);
  *(_QWORD *)(v24 + 88) = *(_QWORD *)(v18 - 328);
  *(_BYTE *)(v24 + 96) = *(_DWORD *)(v18 - 332);
  *(_QWORD *)(v24 + 104) = *(_QWORD *)(v18 - 344);
  *(_BYTE *)(v24 + 112) = *(_DWORD *)(v18 - 348);
  swift_storeEnumTagMultiPayload();
  sub_21426CC14();
}

void sub_21429325C()
{
  sub_214290A04();
}

uint64_t sub_214293284()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v1);
  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(v4 - 192) + 8))(*(_QWORD *)(v4 - 144), v0);
}

void RectanglePlot.init<A, B>(_:xStart:xEnd:yStart:yEnd:)(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v10 = *(_QWORD *)(*a4 + *MEMORY[0x24BEE46A8]);
  v13 = type metadata accessor for BoundingSectionSpecification(0, v10, MEMORY[0x24BEE13C8], (uint64_t)&protocol witness table for Double);
  MEMORY[0x24BDAC7A8](v13);
  v12 = type metadata accessor for BoundingSectionSpecification(0, v10, a7, a9);
  v11 = MEMORY[0x24BDAC7A8](v12);
  MEMORY[0x24BDAC7A8](v11);
  type metadata accessor for XYRenderer();
}

void sub_214293408(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, _QWORD, uint64_t);
  uint64_t v13;

  MEMORY[0x24BDAC7A8](a1);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v5 + 16))(v1, *(_QWORD *)(v9 - 136), v3);
  v10 = type metadata accessor for PlottableProjection(255, v7, v6, v4);
  v11 = v2 + *(int *)(swift_getTupleTypeMetadata2() + 48);
  v12 = *(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  v12(v2, *(_QWORD *)(v9 - 184), v10);
  v12(v11, *(_QWORD *)(v9 - 168), v10);
  swift_storeEnumTagMultiPayload();
  v13 = *(_QWORD *)(v9 - 152);
  *v8 = *(_QWORD *)(v9 - 160);
  v8[1] = v13;
  swift_storeEnumTagMultiPayload();
  sub_21426CC14();
}

void sub_214293520()
{
  sub_214290A04();
}

uint64_t sub_21429354C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);

  v6 = *(void (**)(uint64_t, uint64_t))(v1 + 8);
  v6(v2, v4);
  v6(v3, v4);
  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(v5 - 192) + 8))(*(_QWORD *)(v5 - 136), v0);
}

void RectanglePlot.init<A, B>(_:xStart:xEnd:yStart:yEnd:)(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v9 = *(_QWORD *)(*a2 + *MEMORY[0x24BEE46A8]);
  v12 = type metadata accessor for BoundingSectionSpecification(0, v9, a7, a9);
  MEMORY[0x24BDAC7A8](v12);
  v10 = type metadata accessor for BoundingSectionSpecification(0, v9, MEMORY[0x24BEE13C8], (uint64_t)&protocol witness table for Double);
  v11 = MEMORY[0x24BDAC7A8](v10);
  MEMORY[0x24BDAC7A8](v11);
  type metadata accessor for XYRenderer();
}

void sub_2142936D0(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, _QWORD, uint64_t);

  MEMORY[0x24BDAC7A8](a1);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 16))(v7, *(_QWORD *)(v9 - 136), v1);
  v10 = *(_QWORD *)(v9 - 192);
  *v2 = *(_QWORD *)(v9 - 208);
  v2[1] = v10;
  swift_storeEnumTagMultiPayload();
  v11 = type metadata accessor for PlottableProjection(255, v3, v8, v5);
  v12 = v6 + *(int *)(swift_getTupleTypeMetadata2() + 48);
  v13 = *(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  v13(v6, *(_QWORD *)(v9 - 144), v11);
  v13(v12, *(_QWORD *)(v9 - 168), v11);
  swift_storeEnumTagMultiPayload();
  sub_21426CC14();
}

void sub_2142937E0()
{
  sub_214290A04();
}

uint64_t sub_214293808()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);

  v5 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v5(v2, v1);
  v5(*(_QWORD *)(v4 - 144), v1);
  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(v4 - 184) + 8))(*(_QWORD *)(v4 - 136), v0);
}

void RectanglePlot.init<A>(_:xStart:xEnd:yStart:yEnd:)(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = type metadata accessor for BoundingSectionSpecification(0, *(_QWORD *)(*a2 + *MEMORY[0x24BEE46A8]), MEMORY[0x24BEE13C8], (uint64_t)&protocol witness table for Double);
  v3 = MEMORY[0x24BDAC7A8](v2);
  v4 = MEMORY[0x24BDAC7A8](v3);
  MEMORY[0x24BDAC7A8](v4);
  type metadata accessor for XYRenderer();
}

void sub_214293958(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  MEMORY[0x24BDAC7A8](a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v5, v6, v1);
  v8 = *(_QWORD *)(v7 - 160);
  *v4 = *(_QWORD *)(v7 - 168);
  v4[1] = v8;
  swift_storeEnumTagMultiPayload();
  v9 = *(_QWORD *)(v7 - 144);
  *v3 = *(_QWORD *)(v7 - 152);
  v3[1] = v9;
  swift_storeEnumTagMultiPayload();
  sub_21426CC14();
}

void sub_2142939FC()
{
  sub_214290A04();
}

uint64_t sub_214293A24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v2, v0);
}

uint64_t static VectorizedRectanglePlotContent._layoutChartContent(_:_:)(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;

  v4 = type metadata accessor for RectanglesRenderer(0);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (_QWORD *)((char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_214293B10(a1, (uint64_t)v6);
  v7 = v6[3];
  v8 = v6[4];
  sub_2141E88D0(v6, v7);
  v10 = *a2;
  (*(void (**)(__int128 *, uint64_t, uint64_t))(v8 + 8))(&v10, v7, v8);
  return sub_2141DD370((uint64_t)v6, type metadata accessor for RectanglesRenderer);
}

uint64_t sub_214293B10(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for RectanglesRenderer(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t static VectorizedRectanglePlotContent._renderChartContent(_:_:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unsigned __int8 v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  unsigned __int8 v32[8];
  uint64_t v33;

  v6 = sub_2141D8BF8(&qword_253F14280);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for RectanglesRenderer(0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_BYTE *)a2;
  v13 = *(_QWORD *)(a2 + 8);
  sub_214293B10((uint64_t)a1, (uint64_t)v11);
  v32[0] = v12;
  v33 = v13;
  sub_2142ECE80(v32);
  if ((v12 & 1) != 0)
  {
    v14 = type metadata accessor for SgGroup(0);
    v31 = a3;
    v15 = (int *)v14;
    v16 = swift_allocBox();
    v18 = v17;
    v30 = *(_QWORD *)(*(_QWORD *)(v13 + 16) + 24);
    v20 = a1[3];
    v19 = a1[4];
    sub_2141E88D0(a1, v20);
    v21 = (*(uint64_t (**)(ValueMetadata *, uint64_t, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t))(v19 + 32))(&type metadata for RectangleMark, v13, &type metadata for RectangleMark, &off_24D18A6F0, v20, v19);
    v22 = type metadata accessor for SgClipRect(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v8, 1, 1, v22);
    v23 = v13 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_environment;
    swift_beginAccess();
    v24 = *(_QWORD *)(v23 + *(int *)(type metadata accessor for ChartContentRenderContext.Environment(0) + 64));
    sub_2141DD370((uint64_t)v11, type metadata accessor for RectanglesRenderer);
    *v18 = v30;
    v18[1] = v21;
    result = sub_2141ED100((uint64_t)v8, (uint64_t)v18 + v15[6]);
    *(_QWORD *)((char *)v18 + v15[7]) = 0x3FF0000000000000;
    *(_QWORD *)((char *)v18 + v15[8]) = v24;
    *(_QWORD *)((char *)v18 + v15[9]) = MEMORY[0x24BEE4AF8];
    v26 = v15[10];
    a3 = v31;
    *((_BYTE *)v18 + v26) = 0;
  }
  else
  {
    type metadata accessor for AnyVectorizedRenderer(0);
    v27 = swift_allocBox();
    sub_214293D98((uint64_t)v11, v28);
    type metadata accessor for AnyVectorizedRenderer.MarkRenderer(0);
    result = swift_storeEnumTagMultiPayload();
    v16 = v27 | 0xD000000000000000;
  }
  *a3 = v16;
  return result;
}

uint64_t sub_214293D98(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for RectanglesRenderer(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_214293DDC()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_214293E14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)a3 + 8);
  result = MEMORY[0x2199CD934](&protocol conformance descriptor for <A> RectanglePlot<A>, a2, &v5);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_214293E60(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_214293F10 + 4 * byte_214429E70[(v7 - 1)]))();
}

void sub_214293F60(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t type metadata accessor for RectanglePlot(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2141D8E88(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for RectanglePlot);
}

uint64_t sub_21429411C()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for RectanglesRenderer(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_214294184(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  int *v6;
  __int128 v7;
  uint64_t v8;
  _OWORD *v9;
  _OWORD *v10;
  int *v11;
  uint64_t v12;
  unsigned int (*v13)(_OWORD *, uint64_t, int *);
  uint64_t v14;
  uint64_t v15;
  int v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  int v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  __int128 v74;
  __int128 v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  __int128 v99;
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  __int128 v106;
  uint64_t v107;
  _QWORD *v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  __int128 v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  __int128 v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v125;
  int *v126;

  v4 = type metadata accessor for RectanglesRenderer(0);
  v5 = *(_DWORD *)(*(_QWORD *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v15 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    v6 = (int *)v4;
    v7 = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 24) = v7;
    (**(void (***)(uint64_t, uint64_t *))(v7 - 8))(a1, a2);
    *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
    *(_QWORD *)(a1 + 48) = a2[6];
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 7);
    v8 = v6[8];
    v9 = (_OWORD *)(a1 + v8);
    v10 = (_OWORD *)((char *)a2 + v8);
    v11 = (int *)type metadata accessor for ChartContentRenderContext.Environment(0);
    v12 = *((_QWORD *)v11 - 1);
    v13 = *(unsigned int (**)(_OWORD *, uint64_t, int *))(v12 + 48);
    swift_retain();
    if (v13(v10, 1, v11))
    {
      v14 = sub_2141D8BF8(qword_254D69B70);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      v16 = *((unsigned __int8 *)v10 + 40);
      v126 = v6;
      if (v16 == 255)
      {
        v17 = v10[1];
        *v9 = *v10;
        v9[1] = v17;
        *(_OWORD *)((char *)v9 + 25) = *(_OWORD *)((char *)v10 + 25);
      }
      else if ((v16 & 1) != 0)
      {
        v18 = *(_OWORD *)((char *)v10 + 24);
        *(_OWORD *)((char *)v9 + 24) = v18;
        (**(void (***)(_OWORD *, _OWORD *))(v18 - 8))(v9, v10);
        *((_BYTE *)v9 + 40) = 1;
      }
      else
      {
        *(_QWORD *)v9 = *(_QWORD *)v10;
        *((_BYTE *)v9 + 40) = 0;
        swift_retain();
      }
      *((_BYTE *)v9 + 41) = *((_BYTE *)v10 + 41);
      *((_QWORD *)v9 + 6) = *((_QWORD *)v10 + 6);
      *((_QWORD *)v9 + 7) = *((_QWORD *)v10 + 7);
      v19 = *((_QWORD *)v10 + 9);
      *((_QWORD *)v9 + 8) = *((_QWORD *)v10 + 8);
      *((_QWORD *)v9 + 9) = v19;
      *((_QWORD *)v9 + 10) = *((_QWORD *)v10 + 10);
      v20 = *((unsigned __int8 *)v10 + 128);
      swift_bridgeObjectRetain();
      v125 = v12;
      if (v20 == 255)
      {
        v21 = *(_OWORD *)((char *)v10 + 104);
        *(_OWORD *)((char *)v9 + 88) = *(_OWORD *)((char *)v10 + 88);
        *(_OWORD *)((char *)v9 + 104) = v21;
        *(_OWORD *)((char *)v9 + 113) = *(_OWORD *)((char *)v10 + 113);
      }
      else if ((v20 & 1) != 0)
      {
        *((_QWORD *)v9 + 11) = *((_QWORD *)v10 + 11);
        v9[6] = v10[6];
        *((_BYTE *)v9 + 128) = 1;
        swift_retain();
      }
      else
      {
        v22 = v10[7];
        v9[7] = v22;
        (**(void (***)(uint64_t, uint64_t))(v22 - 8))((uint64_t)v9 + 88, (uint64_t)v10 + 88);
        *((_BYTE *)v9 + 128) = 0;
      }
      *(_OWORD *)((char *)v9 + 136) = *(_OWORD *)((char *)v10 + 136);
      *((_BYTE *)v9 + 152) = *((_BYTE *)v10 + 152);
      *((_QWORD *)v9 + 20) = *((_QWORD *)v10 + 20);
      *((_BYTE *)v9 + 168) = *((_BYTE *)v10 + 168);
      v23 = v10[12];
      v9[11] = v10[11];
      v9[12] = v23;
      *((_BYTE *)v9 + 208) = *((_BYTE *)v10 + 208);
      v24 = v11[11];
      v25 = (char *)v9 + v24;
      v26 = (char *)v10 + v24;
      v27 = sub_214424308();
      v28 = *(_QWORD *)(v27 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
      {
        v29 = sub_2141D8BF8(&qword_253F134C8);
        memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v28 + 16))(v25, v26, v27);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
      }
      v30 = v11[12];
      v31 = (char *)v9 + v30;
      v32 = (char *)v10 + v30;
      *(_QWORD *)v31 = *(_QWORD *)v32;
      v31[8] = v32[8];
      *(_QWORD *)((char *)v9 + v11[13]) = *(_QWORD *)((char *)v10 + v11[13]);
      v33 = v11[14];
      v34 = (char *)v9 + v33;
      v35 = (char *)v10 + v33;
      v36 = sub_214424C68();
      v37 = *(_QWORD *)(v36 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v35, 1, v36))
      {
        v38 = sub_2141D8BF8(&qword_253F15C88);
        memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v37 + 16))(v34, v35, v36);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, v36);
      }
      v39 = v11[15];
      v40 = (char *)v9 + v39;
      v41 = (char *)v10 + v39;
      *(_QWORD *)v40 = *(_QWORD *)v41;
      *((_WORD *)v40 + 4) = *((_WORD *)v41 + 4);
      *(_QWORD *)((char *)v9 + v11[16]) = *(_QWORD *)((char *)v10 + v11[16]);
      *(_QWORD *)((char *)v9 + v11[17]) = *(_QWORD *)((char *)v10 + v11[17]);
      v42 = v11[18];
      v43 = (char *)v9 + v42;
      v44 = (char *)v10 + v42;
      v45 = *(_QWORD *)((char *)v10 + v42 + 24);
      swift_retain();
      if (v45)
      {
        v46 = *(_QWORD *)v44;
        v47 = *((_QWORD *)v44 + 1);
        v48 = v44[16];
        sub_2141DD130(*(_QWORD *)v44, v47, v48);
        *(_QWORD *)v43 = v46;
        *((_QWORD *)v43 + 1) = v47;
        v43[16] = v48;
        v49 = *((_QWORD *)v44 + 4);
        *((_QWORD *)v43 + 3) = *((_QWORD *)v44 + 3);
        v50 = *((_QWORD *)v44 + 5);
        v51 = v44[48];
        swift_bridgeObjectRetain();
        sub_2141DD140(v49, v50, v51);
        *((_QWORD *)v43 + 4) = v49;
        *((_QWORD *)v43 + 5) = v50;
        v43[48] = v51;
        *(_OWORD *)(v43 + 56) = *(_OWORD *)(v44 + 56);
      }
      else
      {
        v52 = *((_OWORD *)v44 + 3);
        *((_OWORD *)v43 + 2) = *((_OWORD *)v44 + 2);
        *((_OWORD *)v43 + 3) = v52;
        *((_QWORD *)v43 + 8) = *((_QWORD *)v44 + 8);
        v53 = *((_OWORD *)v44 + 1);
        *(_OWORD *)v43 = *(_OWORD *)v44;
        *((_OWORD *)v43 + 1) = v53;
      }
      v54 = v11[19];
      v55 = (char *)v9 + v54;
      v56 = (char *)v10 + v54;
      if (*(_QWORD *)((char *)v10 + v54 + 24))
      {
        v57 = *(_QWORD *)v56;
        v58 = *((_QWORD *)v56 + 1);
        v59 = v56[16];
        sub_2141DD130(*(_QWORD *)v56, v58, v59);
        *(_QWORD *)v55 = v57;
        *((_QWORD *)v55 + 1) = v58;
        v55[16] = v59;
        v60 = *((_QWORD *)v56 + 4);
        *((_QWORD *)v55 + 3) = *((_QWORD *)v56 + 3);
        v61 = *((_QWORD *)v56 + 5);
        v62 = v56[48];
        swift_bridgeObjectRetain();
        sub_2141DD140(v60, v61, v62);
        *((_QWORD *)v55 + 4) = v60;
        *((_QWORD *)v55 + 5) = v61;
        v55[48] = v62;
        *(_OWORD *)(v55 + 56) = *(_OWORD *)(v56 + 56);
      }
      else
      {
        v63 = *((_OWORD *)v56 + 3);
        *((_OWORD *)v55 + 2) = *((_OWORD *)v56 + 2);
        *((_OWORD *)v55 + 3) = v63;
        *((_QWORD *)v55 + 8) = *((_QWORD *)v56 + 8);
        v64 = *((_OWORD *)v56 + 1);
        *(_OWORD *)v55 = *(_OWORD *)v56;
        *((_OWORD *)v55 + 1) = v64;
      }
      v65 = v11[20];
      v66 = (char *)v9 + v65;
      v67 = (char *)v10 + v65;
      if (*(_QWORD *)((char *)v10 + v65 + 24))
      {
        v68 = *(_QWORD *)v67;
        v69 = *((_QWORD *)v67 + 1);
        v70 = v67[16];
        sub_2141DD130(*(_QWORD *)v67, v69, v70);
        *(_QWORD *)v66 = v68;
        *((_QWORD *)v66 + 1) = v69;
        v66[16] = v70;
        v71 = *((_QWORD *)v67 + 4);
        *((_QWORD *)v66 + 3) = *((_QWORD *)v67 + 3);
        v72 = *((_QWORD *)v67 + 5);
        v73 = v67[48];
        swift_bridgeObjectRetain();
        sub_2141DD140(v71, v72, v73);
        *((_QWORD *)v66 + 4) = v71;
        *((_QWORD *)v66 + 5) = v72;
        v66[48] = v73;
        *(_OWORD *)(v66 + 56) = *(_OWORD *)(v67 + 56);
      }
      else
      {
        v74 = *((_OWORD *)v67 + 3);
        *((_OWORD *)v66 + 2) = *((_OWORD *)v67 + 2);
        *((_OWORD *)v66 + 3) = v74;
        *((_QWORD *)v66 + 8) = *((_QWORD *)v67 + 8);
        v75 = *((_OWORD *)v67 + 1);
        *(_OWORD *)v66 = *(_OWORD *)v67;
        *((_OWORD *)v66 + 1) = v75;
      }
      v76 = v11[21];
      v77 = (char *)v9 + v76;
      v78 = (char *)v10 + v76;
      if (*(_QWORD *)((char *)v10 + v76 + 24))
      {
        v79 = *(_QWORD *)v78;
        v80 = *((_QWORD *)v78 + 1);
        v81 = v78[16];
        sub_2141DD130(*(_QWORD *)v78, v80, v81);
        *(_QWORD *)v77 = v79;
        *((_QWORD *)v77 + 1) = v80;
        v77[16] = v81;
        v82 = *((_QWORD *)v78 + 4);
        *((_QWORD *)v77 + 3) = *((_QWORD *)v78 + 3);
        v83 = *((_QWORD *)v78 + 5);
        v84 = v78[48];
        swift_bridgeObjectRetain();
        sub_2141DD140(v82, v83, v84);
        *((_QWORD *)v77 + 4) = v82;
        *((_QWORD *)v77 + 5) = v83;
        v77[48] = v84;
        *(_OWORD *)(v77 + 56) = *(_OWORD *)(v78 + 56);
      }
      else
      {
        v85 = *((_OWORD *)v78 + 3);
        *((_OWORD *)v77 + 2) = *((_OWORD *)v78 + 2);
        *((_OWORD *)v77 + 3) = v85;
        *((_QWORD *)v77 + 8) = *((_QWORD *)v78 + 8);
        v86 = *((_OWORD *)v78 + 1);
        *(_OWORD *)v77 = *(_OWORD *)v78;
        *((_OWORD *)v77 + 1) = v86;
      }
      v87 = v11[22];
      v88 = (char *)v9 + v87;
      v89 = (char *)v10 + v87;
      *(_OWORD *)v88 = *(_OWORD *)v89;
      *((_QWORD *)v88 + 2) = *((_QWORD *)v89 + 2);
      v90 = v11[23];
      v91 = (char *)v9 + v90;
      v92 = (char *)v10 + v90;
      *(_OWORD *)v91 = *(_OWORD *)v92;
      *((_QWORD *)v91 + 2) = *((_QWORD *)v92 + 2);
      v93 = v11[24];
      v94 = (char *)v9 + v93;
      v95 = (char *)v10 + v93;
      if (*(_QWORD *)((char *)v10 + v93 + 24))
      {
        v96 = *(_QWORD *)v95;
        v97 = *((_QWORD *)v95 + 1);
        v98 = v95[16];
        sub_2141DD130(*(_QWORD *)v95, v97, v98);
        *(_QWORD *)v94 = v96;
        *((_QWORD *)v94 + 1) = v97;
        v94[16] = v98;
        *((_QWORD *)v94 + 3) = *((_QWORD *)v95 + 3);
        swift_bridgeObjectRetain();
      }
      else
      {
        v99 = *((_OWORD *)v95 + 1);
        *(_OWORD *)v94 = *(_OWORD *)v95;
        *((_OWORD *)v94 + 1) = v99;
      }
      v100 = v11[25];
      v101 = (char *)v9 + v100;
      v102 = (char *)v10 + v100;
      if (*(_QWORD *)((char *)v10 + v100 + 24))
      {
        v103 = *(_QWORD *)v102;
        v104 = *((_QWORD *)v102 + 1);
        v105 = v102[16];
        sub_2141DD130(*(_QWORD *)v102, v104, v105);
        *(_QWORD *)v101 = v103;
        *((_QWORD *)v101 + 1) = v104;
        v101[16] = v105;
        *((_QWORD *)v101 + 3) = *((_QWORD *)v102 + 3);
        swift_bridgeObjectRetain();
      }
      else
      {
        v106 = *((_OWORD *)v102 + 1);
        *(_OWORD *)v101 = *(_OWORD *)v102;
        *((_OWORD *)v101 + 1) = v106;
      }
      v107 = v11[26];
      v108 = (_QWORD *)((char *)v9 + v107);
      v109 = (_QWORD *)((char *)v10 + v107);
      v110 = v109[1];
      *v108 = *v109;
      v108[1] = v110;
      v111 = v11[27];
      v112 = (char *)v9 + v111;
      v113 = (char *)v10 + v111;
      v114 = *((_QWORD *)v113 + 3);
      swift_bridgeObjectRetain();
      if (v114)
      {
        *((_QWORD *)v112 + 3) = v114;
        (**(void (***)(char *, char *, uint64_t))(v114 - 8))(v112, v113, v114);
      }
      else
      {
        v115 = *((_OWORD *)v113 + 1);
        *(_OWORD *)v112 = *(_OWORD *)v113;
        *((_OWORD *)v112 + 1) = v115;
      }
      v6 = v126;
      (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v125 + 56))(v9, 0, 1, v11);
    }
    v116 = v6[9];
    v117 = a1 + v116;
    v118 = (uint64_t)a2 + v116;
    v119 = *(_OWORD *)(v118 + 16);
    *(_OWORD *)v117 = *(_OWORD *)v118;
    *(_OWORD *)(v117 + 16) = v119;
    *(_BYTE *)(v117 + 32) = *(_BYTE *)(v118 + 32);
    v120 = v6[10];
    v121 = a1 + v120;
    v122 = (uint64_t)a2 + v120;
    v123 = sub_214424308();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v123 - 8) + 16))(v121, v122, v123);
  }
  return a1;
}

uint64_t sub_2142948D8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int *v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  _s6Charts15AnyChartContentVwxx_0(a1);
  swift_release();
  v2 = type metadata accessor for RectanglesRenderer(0);
  v3 = a1 + *(int *)(v2 + 32);
  v4 = (int *)type metadata accessor for ChartContentRenderContext.Environment(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v4 - 1) + 48))(v3, 1, v4))
  {
    v5 = *(unsigned __int8 *)(v3 + 40);
    if (v5 != 255)
    {
      if ((v5 & 1) != 0)
        _s6Charts15AnyChartContentVwxx_0(v3);
      else
        swift_release();
    }
    swift_bridgeObjectRelease();
    v6 = *(unsigned __int8 *)(v3 + 128);
    if (v6 != 255)
    {
      if ((v6 & 1) != 0)
        swift_release();
      else
        _s6Charts15AnyChartContentVwxx_0(v3 + 88);
    }
    v7 = v3 + v4[11];
    v8 = sub_214424308();
    v9 = *(_QWORD *)(v8 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
    v10 = v3 + v4[14];
    v11 = sub_214424C68();
    v12 = *(_QWORD *)(v11 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
      (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
    swift_release();
    v13 = v3 + v4[18];
    if (*(_QWORD *)(v13 + 24))
    {
      sub_2141ED0BC(*(_QWORD *)v13, *(_QWORD *)(v13 + 8), *(_BYTE *)(v13 + 16));
      swift_bridgeObjectRelease();
      sub_2141EF1B0(*(_QWORD *)(v13 + 32), *(_QWORD *)(v13 + 40), *(_BYTE *)(v13 + 48));
    }
    v14 = v3 + v4[19];
    if (*(_QWORD *)(v14 + 24))
    {
      sub_2141ED0BC(*(_QWORD *)v14, *(_QWORD *)(v14 + 8), *(_BYTE *)(v14 + 16));
      swift_bridgeObjectRelease();
      sub_2141EF1B0(*(_QWORD *)(v14 + 32), *(_QWORD *)(v14 + 40), *(_BYTE *)(v14 + 48));
    }
    v15 = v3 + v4[20];
    if (*(_QWORD *)(v15 + 24))
    {
      sub_2141ED0BC(*(_QWORD *)v15, *(_QWORD *)(v15 + 8), *(_BYTE *)(v15 + 16));
      swift_bridgeObjectRelease();
      sub_2141EF1B0(*(_QWORD *)(v15 + 32), *(_QWORD *)(v15 + 40), *(_BYTE *)(v15 + 48));
    }
    v16 = v3 + v4[21];
    if (*(_QWORD *)(v16 + 24))
    {
      sub_2141ED0BC(*(_QWORD *)v16, *(_QWORD *)(v16 + 8), *(_BYTE *)(v16 + 16));
      swift_bridgeObjectRelease();
      sub_2141EF1B0(*(_QWORD *)(v16 + 32), *(_QWORD *)(v16 + 40), *(_BYTE *)(v16 + 48));
    }
    v17 = v3 + v4[24];
    if (*(_QWORD *)(v17 + 24))
    {
      sub_2141ED0BC(*(_QWORD *)v17, *(_QWORD *)(v17 + 8), *(_BYTE *)(v17 + 16));
      swift_bridgeObjectRelease();
    }
    v18 = v3 + v4[25];
    if (*(_QWORD *)(v18 + 24))
    {
      sub_2141ED0BC(*(_QWORD *)v18, *(_QWORD *)(v18 + 8), *(_BYTE *)(v18 + 16));
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    v19 = v3 + v4[27];
    if (*(_QWORD *)(v19 + 24))
      _s6Charts15AnyChartContentVwxx_0(v19);
  }
  v20 = a1 + *(int *)(v2 + 40);
  v21 = sub_214424308();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(v20, v21);
}

uint64_t sub_214294B7C(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  int *v5;
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  int *v9;
  uint64_t v10;
  unsigned int (*v11)(_OWORD *, uint64_t, int *);
  uint64_t v12;
  int v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  int v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  __int128 v96;
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  char v102;
  __int128 v103;
  uint64_t v104;
  _QWORD *v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  __int128 v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  __int128 v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v122;
  int *v123;

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  v5 = (int *)type metadata accessor for RectanglesRenderer(0);
  v6 = v5[8];
  v7 = (_OWORD *)(a1 + v6);
  v8 = (_OWORD *)(a2 + v6);
  v9 = (int *)type metadata accessor for ChartContentRenderContext.Environment(0);
  v10 = *((_QWORD *)v9 - 1);
  v11 = *(unsigned int (**)(_OWORD *, uint64_t, int *))(v10 + 48);
  swift_retain();
  if (v11(v8, 1, v9))
  {
    v12 = sub_2141D8BF8(qword_254D69B70);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    v13 = *((unsigned __int8 *)v8 + 40);
    v122 = v10;
    if (v13 == 255)
    {
      v14 = v8[1];
      *v7 = *v8;
      v7[1] = v14;
      *(_OWORD *)((char *)v7 + 25) = *(_OWORD *)((char *)v8 + 25);
    }
    else if ((v13 & 1) != 0)
    {
      v15 = *(_OWORD *)((char *)v8 + 24);
      *(_OWORD *)((char *)v7 + 24) = v15;
      (**(void (***)(_OWORD *, _OWORD *))(v15 - 8))(v7, v8);
      *((_BYTE *)v7 + 40) = 1;
    }
    else
    {
      *(_QWORD *)v7 = *(_QWORD *)v8;
      *((_BYTE *)v7 + 40) = 0;
      swift_retain();
    }
    *((_BYTE *)v7 + 41) = *((_BYTE *)v8 + 41);
    *((_QWORD *)v7 + 6) = *((_QWORD *)v8 + 6);
    *((_QWORD *)v7 + 7) = *((_QWORD *)v8 + 7);
    v16 = *((_QWORD *)v8 + 9);
    *((_QWORD *)v7 + 8) = *((_QWORD *)v8 + 8);
    *((_QWORD *)v7 + 9) = v16;
    *((_QWORD *)v7 + 10) = *((_QWORD *)v8 + 10);
    v17 = *((unsigned __int8 *)v8 + 128);
    swift_bridgeObjectRetain();
    if (v17 == 255)
    {
      v18 = *(_OWORD *)((char *)v8 + 104);
      *(_OWORD *)((char *)v7 + 88) = *(_OWORD *)((char *)v8 + 88);
      *(_OWORD *)((char *)v7 + 104) = v18;
      *(_OWORD *)((char *)v7 + 113) = *(_OWORD *)((char *)v8 + 113);
    }
    else if ((v17 & 1) != 0)
    {
      *((_QWORD *)v7 + 11) = *((_QWORD *)v8 + 11);
      v7[6] = v8[6];
      *((_BYTE *)v7 + 128) = 1;
      swift_retain();
    }
    else
    {
      v19 = v8[7];
      v7[7] = v19;
      (**(void (***)(uint64_t, uint64_t))(v19 - 8))((uint64_t)v7 + 88, (uint64_t)v8 + 88);
      *((_BYTE *)v7 + 128) = 0;
    }
    *(_OWORD *)((char *)v7 + 136) = *(_OWORD *)((char *)v8 + 136);
    *((_BYTE *)v7 + 152) = *((_BYTE *)v8 + 152);
    *((_QWORD *)v7 + 20) = *((_QWORD *)v8 + 20);
    *((_BYTE *)v7 + 168) = *((_BYTE *)v8 + 168);
    v20 = v8[12];
    v7[11] = v8[11];
    v7[12] = v20;
    *((_BYTE *)v7 + 208) = *((_BYTE *)v8 + 208);
    v21 = v9[11];
    v22 = (char *)v7 + v21;
    v23 = (char *)v8 + v21;
    v24 = sub_214424308();
    v25 = *(_QWORD *)(v24 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
    {
      v26 = sub_2141D8BF8(&qword_253F134C8);
      memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v22, v23, v24);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
    }
    v27 = v9[12];
    v28 = (char *)v7 + v27;
    v29 = (char *)v8 + v27;
    *(_QWORD *)v28 = *(_QWORD *)v29;
    v28[8] = v29[8];
    *(_QWORD *)((char *)v7 + v9[13]) = *(_QWORD *)((char *)v8 + v9[13]);
    v30 = v9[14];
    v31 = (char *)v7 + v30;
    v32 = (char *)v8 + v30;
    v33 = sub_214424C68();
    v34 = *(_QWORD *)(v33 - 8);
    v123 = v5;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
    {
      v35 = sub_2141D8BF8(&qword_253F15C88);
      memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v34 + 16))(v31, v32, v33);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
    }
    v36 = v9[15];
    v37 = (char *)v7 + v36;
    v38 = (char *)v8 + v36;
    *(_QWORD *)v37 = *(_QWORD *)v38;
    *((_WORD *)v37 + 4) = *((_WORD *)v38 + 4);
    *(_QWORD *)((char *)v7 + v9[16]) = *(_QWORD *)((char *)v8 + v9[16]);
    *(_QWORD *)((char *)v7 + v9[17]) = *(_QWORD *)((char *)v8 + v9[17]);
    v39 = v9[18];
    v40 = (char *)v7 + v39;
    v41 = (char *)v8 + v39;
    v42 = *(_QWORD *)((char *)v8 + v39 + 24);
    swift_retain();
    if (v42)
    {
      v43 = *(_QWORD *)v41;
      v44 = *((_QWORD *)v41 + 1);
      v45 = v41[16];
      sub_2141DD130(*(_QWORD *)v41, v44, v45);
      *(_QWORD *)v40 = v43;
      *((_QWORD *)v40 + 1) = v44;
      v40[16] = v45;
      v46 = *((_QWORD *)v41 + 4);
      *((_QWORD *)v40 + 3) = *((_QWORD *)v41 + 3);
      v47 = *((_QWORD *)v41 + 5);
      v48 = v41[48];
      swift_bridgeObjectRetain();
      sub_2141DD140(v46, v47, v48);
      *((_QWORD *)v40 + 4) = v46;
      *((_QWORD *)v40 + 5) = v47;
      v40[48] = v48;
      *(_OWORD *)(v40 + 56) = *(_OWORD *)(v41 + 56);
    }
    else
    {
      v49 = *((_OWORD *)v41 + 3);
      *((_OWORD *)v40 + 2) = *((_OWORD *)v41 + 2);
      *((_OWORD *)v40 + 3) = v49;
      *((_QWORD *)v40 + 8) = *((_QWORD *)v41 + 8);
      v50 = *((_OWORD *)v41 + 1);
      *(_OWORD *)v40 = *(_OWORD *)v41;
      *((_OWORD *)v40 + 1) = v50;
    }
    v51 = v9[19];
    v52 = (char *)v7 + v51;
    v53 = (char *)v8 + v51;
    if (*(_QWORD *)((char *)v8 + v51 + 24))
    {
      v54 = *(_QWORD *)v53;
      v55 = *((_QWORD *)v53 + 1);
      v56 = v53[16];
      sub_2141DD130(*(_QWORD *)v53, v55, v56);
      *(_QWORD *)v52 = v54;
      *((_QWORD *)v52 + 1) = v55;
      v52[16] = v56;
      v57 = *((_QWORD *)v53 + 4);
      *((_QWORD *)v52 + 3) = *((_QWORD *)v53 + 3);
      v58 = *((_QWORD *)v53 + 5);
      v59 = v53[48];
      swift_bridgeObjectRetain();
      sub_2141DD140(v57, v58, v59);
      *((_QWORD *)v52 + 4) = v57;
      *((_QWORD *)v52 + 5) = v58;
      v52[48] = v59;
      *(_OWORD *)(v52 + 56) = *(_OWORD *)(v53 + 56);
    }
    else
    {
      v60 = *((_OWORD *)v53 + 3);
      *((_OWORD *)v52 + 2) = *((_OWORD *)v53 + 2);
      *((_OWORD *)v52 + 3) = v60;
      *((_QWORD *)v52 + 8) = *((_QWORD *)v53 + 8);
      v61 = *((_OWORD *)v53 + 1);
      *(_OWORD *)v52 = *(_OWORD *)v53;
      *((_OWORD *)v52 + 1) = v61;
    }
    v62 = v9[20];
    v63 = (char *)v7 + v62;
    v64 = (char *)v8 + v62;
    if (*(_QWORD *)((char *)v8 + v62 + 24))
    {
      v65 = *(_QWORD *)v64;
      v66 = *((_QWORD *)v64 + 1);
      v67 = v64[16];
      sub_2141DD130(*(_QWORD *)v64, v66, v67);
      *(_QWORD *)v63 = v65;
      *((_QWORD *)v63 + 1) = v66;
      v63[16] = v67;
      v68 = *((_QWORD *)v64 + 4);
      *((_QWORD *)v63 + 3) = *((_QWORD *)v64 + 3);
      v69 = *((_QWORD *)v64 + 5);
      v70 = v64[48];
      swift_bridgeObjectRetain();
      sub_2141DD140(v68, v69, v70);
      *((_QWORD *)v63 + 4) = v68;
      *((_QWORD *)v63 + 5) = v69;
      v63[48] = v70;
      *(_OWORD *)(v63 + 56) = *(_OWORD *)(v64 + 56);
    }
    else
    {
      v71 = *((_OWORD *)v64 + 3);
      *((_OWORD *)v63 + 2) = *((_OWORD *)v64 + 2);
      *((_OWORD *)v63 + 3) = v71;
      *((_QWORD *)v63 + 8) = *((_QWORD *)v64 + 8);
      v72 = *((_OWORD *)v64 + 1);
      *(_OWORD *)v63 = *(_OWORD *)v64;
      *((_OWORD *)v63 + 1) = v72;
    }
    v73 = v9[21];
    v74 = (char *)v7 + v73;
    v75 = (char *)v8 + v73;
    if (*(_QWORD *)((char *)v8 + v73 + 24))
    {
      v76 = *(_QWORD *)v75;
      v77 = *((_QWORD *)v75 + 1);
      v78 = v75[16];
      sub_2141DD130(*(_QWORD *)v75, v77, v78);
      *(_QWORD *)v74 = v76;
      *((_QWORD *)v74 + 1) = v77;
      v74[16] = v78;
      v79 = *((_QWORD *)v75 + 4);
      *((_QWORD *)v74 + 3) = *((_QWORD *)v75 + 3);
      v80 = *((_QWORD *)v75 + 5);
      v81 = v75[48];
      swift_bridgeObjectRetain();
      sub_2141DD140(v79, v80, v81);
      *((_QWORD *)v74 + 4) = v79;
      *((_QWORD *)v74 + 5) = v80;
      v74[48] = v81;
      *(_OWORD *)(v74 + 56) = *(_OWORD *)(v75 + 56);
    }
    else
    {
      v82 = *((_OWORD *)v75 + 3);
      *((_OWORD *)v74 + 2) = *((_OWORD *)v75 + 2);
      *((_OWORD *)v74 + 3) = v82;
      *((_QWORD *)v74 + 8) = *((_QWORD *)v75 + 8);
      v83 = *((_OWORD *)v75 + 1);
      *(_OWORD *)v74 = *(_OWORD *)v75;
      *((_OWORD *)v74 + 1) = v83;
    }
    v84 = v9[22];
    v85 = (char *)v7 + v84;
    v86 = (char *)v8 + v84;
    *(_OWORD *)v85 = *(_OWORD *)v86;
    *((_QWORD *)v85 + 2) = *((_QWORD *)v86 + 2);
    v87 = v9[23];
    v88 = (char *)v7 + v87;
    v89 = (char *)v8 + v87;
    *(_OWORD *)v88 = *(_OWORD *)v89;
    *((_QWORD *)v88 + 2) = *((_QWORD *)v89 + 2);
    v90 = v9[24];
    v91 = (char *)v7 + v90;
    v92 = (char *)v8 + v90;
    if (*(_QWORD *)((char *)v8 + v90 + 24))
    {
      v93 = *(_QWORD *)v92;
      v94 = *((_QWORD *)v92 + 1);
      v95 = v92[16];
      sub_2141DD130(*(_QWORD *)v92, v94, v95);
      *(_QWORD *)v91 = v93;
      *((_QWORD *)v91 + 1) = v94;
      v91[16] = v95;
      *((_QWORD *)v91 + 3) = *((_QWORD *)v92 + 3);
      swift_bridgeObjectRetain();
    }
    else
    {
      v96 = *((_OWORD *)v92 + 1);
      *(_OWORD *)v91 = *(_OWORD *)v92;
      *((_OWORD *)v91 + 1) = v96;
    }
    v97 = v9[25];
    v98 = (char *)v7 + v97;
    v99 = (char *)v8 + v97;
    if (*(_QWORD *)((char *)v8 + v97 + 24))
    {
      v100 = *(_QWORD *)v99;
      v101 = *((_QWORD *)v99 + 1);
      v102 = v99[16];
      sub_2141DD130(*(_QWORD *)v99, v101, v102);
      *(_QWORD *)v98 = v100;
      *((_QWORD *)v98 + 1) = v101;
      v98[16] = v102;
      *((_QWORD *)v98 + 3) = *((_QWORD *)v99 + 3);
      swift_bridgeObjectRetain();
    }
    else
    {
      v103 = *((_OWORD *)v99 + 1);
      *(_OWORD *)v98 = *(_OWORD *)v99;
      *((_OWORD *)v98 + 1) = v103;
    }
    v5 = v123;
    v104 = v9[26];
    v105 = (_QWORD *)((char *)v7 + v104);
    v106 = (_QWORD *)((char *)v8 + v104);
    v107 = v106[1];
    *v105 = *v106;
    v105[1] = v107;
    v108 = v9[27];
    v109 = (char *)v7 + v108;
    v110 = (char *)v8 + v108;
    v111 = *((_QWORD *)v110 + 3);
    swift_bridgeObjectRetain();
    if (v111)
    {
      *((_QWORD *)v109 + 3) = v111;
      (**(void (***)(char *, char *, uint64_t))(v111 - 8))(v109, v110, v111);
    }
    else
    {
      v112 = *((_OWORD *)v110 + 1);
      *(_OWORD *)v109 = *(_OWORD *)v110;
      *((_OWORD *)v109 + 1) = v112;
    }
    (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v122 + 56))(v7, 0, 1, v9);
  }
  v113 = v5[9];
  v114 = a1 + v113;
  v115 = a2 + v113;
  v116 = *(_OWORD *)(v115 + 16);
  *(_OWORD *)v114 = *(_OWORD *)v115;
  *(_OWORD *)(v114 + 16) = v116;
  *(_BYTE *)(v114 + 32) = *(_BYTE *)(v115 + 32);
  v117 = v5[10];
  v118 = a1 + v117;
  v119 = a2 + v117;
  v120 = sub_214424308();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v120 - 8) + 16))(v118, v119, v120);
  return a1;
}

uint64_t sub_21429529C(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int *v8;
  _QWORD *v9;
  uint64_t (*v10)(uint64_t, uint64_t, int *);
  int v11;
  int v12;
  int v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  int v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  int v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  void *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  __int128 v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  __int128 v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  char v110;
  __int128 v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  char v117;
  __int128 v118;
  uint64_t v119;
  _QWORD *v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  __int128 v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  __int128 v130;
  __int128 v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  __int128 v137;
  __int128 v138;
  uint64_t v139;
  __int128 *v140;
  __int128 *v141;
  int v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  uint64_t v147;
  __int128 v148;
  uint64_t v149;
  __int128 v150;
  __int128 v151;
  uint64_t v152;
  void *v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t (*v157)(void *, uint64_t, uint64_t);
  int v158;
  int v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  void *v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t (*v170)(void *, uint64_t, uint64_t);
  int v171;
  size_t v172;
  void *v173;
  uint64_t v174;
  uint64_t v175;
  char *v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  char v184;
  uint64_t v185;
  uint64_t v186;
  char v187;
  uint64_t v188;
  uint64_t v189;
  char v190;
  uint64_t v191;
  uint64_t v192;
  char v193;
  uint64_t v194;
  uint64_t v195;
  char v196;
  uint64_t v197;
  uint64_t v198;
  char v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  uint64_t v206;
  uint64_t v207;
  char *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  char v213;
  uint64_t v214;
  uint64_t v215;
  char v216;
  uint64_t v217;
  uint64_t v218;
  char v219;
  uint64_t v220;
  uint64_t v221;
  char v222;
  uint64_t v223;
  uint64_t v224;
  char v225;
  uint64_t v226;
  uint64_t v227;
  char v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  uint64_t v235;
  uint64_t v236;
  char *v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  char v242;
  uint64_t v243;
  uint64_t v244;
  char v245;
  uint64_t v246;
  uint64_t v247;
  char v248;
  uint64_t v249;
  uint64_t v250;
  char v251;
  uint64_t v252;
  uint64_t v253;
  char v254;
  uint64_t v255;
  uint64_t v256;
  char v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  uint64_t v264;
  uint64_t v265;
  char *v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  char v271;
  uint64_t v272;
  uint64_t v273;
  char v274;
  uint64_t v275;
  uint64_t v276;
  char v277;
  uint64_t v278;
  uint64_t v279;
  char v280;
  uint64_t v281;
  uint64_t v282;
  char v283;
  uint64_t v284;
  uint64_t v285;
  char v286;
  __int128 v287;
  __int128 v288;
  __int128 v289;
  __int128 v290;
  __int128 v291;
  __int128 v292;
  uint64_t v293;
  _QWORD *v294;
  char *v295;
  uint64_t v296;
  _QWORD *v297;
  char *v298;
  uint64_t v299;
  uint64_t v300;
  char *v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  char v306;
  uint64_t v307;
  uint64_t v308;
  char v309;
  uint64_t v310;
  uint64_t v311;
  char v312;
  __int128 v313;
  __int128 v314;
  uint64_t v315;
  uint64_t v316;
  char *v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  char v322;
  uint64_t v323;
  uint64_t v324;
  char v325;
  uint64_t v326;
  uint64_t v327;
  char v328;
  __int128 v329;
  __int128 v330;
  uint64_t v331;
  _QWORD *v332;
  char *v333;
  uint64_t v334;
  uint64_t v335;
  char *v336;
  uint64_t v337;
  __int128 v338;
  __int128 v339;
  uint64_t *v340;
  void *v341;
  void (**__src)(uint64_t, _QWORD, uint64_t, int *);
  int *v343;
  int *v344;

  v2 = a2;
  sub_2141DEA14((uint64_t *)a1, a2);
  *(_BYTE *)(a1 + 40) = *((_BYTE *)v2 + 40);
  *(_QWORD *)(a1 + 48) = v2[6];
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 56) = v2[7];
  *(_QWORD *)(a1 + 64) = v2[8];
  v4 = (int *)type metadata accessor for RectanglesRenderer(0);
  v5 = v4[8];
  v6 = a1 + v5;
  v7 = (char *)v2 + v5;
  v8 = (int *)type metadata accessor for ChartContentRenderContext.Environment(0);
  v9 = (_QWORD *)*((_QWORD *)v8 - 1);
  v10 = (uint64_t (*)(uint64_t, uint64_t, int *))v9[6];
  v11 = v10(v6, 1, v8);
  v12 = v10((uint64_t)v7, 1, v8);
  if (v11)
  {
    if (!v12)
    {
      v13 = v7[40];
      v343 = v4;
      if (v13 == 255)
      {
        v14 = *(_OWORD *)v7;
        v15 = *((_OWORD *)v7 + 1);
        *(_OWORD *)(v6 + 25) = *(_OWORD *)(v7 + 25);
        *(_OWORD *)v6 = v14;
        *(_OWORD *)(v6 + 16) = v15;
      }
      else if ((v13 & 1) != 0)
      {
        v20 = *((_QWORD *)v7 + 3);
        *(_QWORD *)(v6 + 24) = v20;
        *(_QWORD *)(v6 + 32) = *((_QWORD *)v7 + 4);
        (**(void (***)(uint64_t, char *))(v20 - 8))(v6, v7);
        *(_BYTE *)(v6 + 40) = 1;
      }
      else
      {
        *(_QWORD *)v6 = *(_QWORD *)v7;
        *(_BYTE *)(v6 + 40) = 0;
        swift_retain();
      }
      *(_BYTE *)(v6 + 41) = v7[41];
      *(_QWORD *)(v6 + 48) = *((_QWORD *)v7 + 6);
      *(_DWORD *)(v6 + 56) = *((_DWORD *)v7 + 14);
      *(_DWORD *)(v6 + 60) = *((_DWORD *)v7 + 15);
      *(_QWORD *)(v6 + 64) = *((_QWORD *)v7 + 8);
      *(_QWORD *)(v6 + 72) = *((_QWORD *)v7 + 9);
      *(_QWORD *)(v6 + 80) = *((_QWORD *)v7 + 10);
      v21 = v7[128];
      swift_bridgeObjectRetain();
      __src = (void (**)(uint64_t, _QWORD, uint64_t, int *))v9;
      if (v21 == 255)
      {
        v22 = *(_OWORD *)(v7 + 88);
        v23 = *(_OWORD *)(v7 + 104);
        *(_OWORD *)(v6 + 113) = *(_OWORD *)(v7 + 113);
        *(_OWORD *)(v6 + 88) = v22;
        *(_OWORD *)(v6 + 104) = v23;
      }
      else if ((v21 & 1) != 0)
      {
        *(_QWORD *)(v6 + 88) = *((_QWORD *)v7 + 11);
        *(_OWORD *)(v6 + 96) = *((_OWORD *)v7 + 6);
        *(_BYTE *)(v6 + 128) = 1;
        swift_retain();
      }
      else
      {
        v24 = *((_QWORD *)v7 + 14);
        *(_QWORD *)(v6 + 112) = v24;
        *(_QWORD *)(v6 + 120) = *((_QWORD *)v7 + 15);
        (**(void (***)(uint64_t, uint64_t))(v24 - 8))(v6 + 88, (uint64_t)(v7 + 88));
        *(_BYTE *)(v6 + 128) = 0;
      }
      v25 = *(_OWORD *)(v7 + 136);
      *(_BYTE *)(v6 + 152) = v7[152];
      *(_OWORD *)(v6 + 136) = v25;
      v26 = *((_QWORD *)v7 + 20);
      *(_BYTE *)(v6 + 168) = v7[168];
      *(_QWORD *)(v6 + 160) = v26;
      v27 = *((_OWORD *)v7 + 11);
      v28 = *((_OWORD *)v7 + 12);
      *(_BYTE *)(v6 + 208) = v7[208];
      *(_OWORD *)(v6 + 176) = v27;
      *(_OWORD *)(v6 + 192) = v28;
      v29 = v8[11];
      v30 = (void *)(v6 + v29);
      v31 = &v7[v29];
      v32 = sub_214424308();
      v33 = *(_QWORD *)(v32 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32))
      {
        v34 = sub_2141D8BF8(&qword_253F134C8);
        memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, char *, uint64_t))(v33 + 16))(v30, v31, v32);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
      }
      v35 = v8[12];
      v36 = v6 + v35;
      v37 = &v7[v35];
      v38 = *(_QWORD *)v37;
      *(_BYTE *)(v36 + 8) = v37[8];
      *(_QWORD *)v36 = v38;
      *(_QWORD *)(v6 + v8[13]) = *(_QWORD *)&v7[v8[13]];
      v39 = v8[14];
      v40 = (void *)(v6 + v39);
      v41 = &v7[v39];
      v42 = sub_214424C68();
      v43 = *(_QWORD *)(v42 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v41, 1, v42))
      {
        v44 = sub_2141D8BF8(&qword_253F15C88);
        memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, char *, uint64_t))(v43 + 16))(v40, v41, v42);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v43 + 56))(v40, 0, 1, v42);
      }
      v45 = v8[15];
      v46 = v6 + v45;
      v47 = &v7[v45];
      *(_QWORD *)v46 = *(_QWORD *)v47;
      *(_WORD *)(v46 + 8) = *((_WORD *)v47 + 4);
      *(_QWORD *)(v6 + v8[16]) = *(_QWORD *)&v7[v8[16]];
      *(_QWORD *)(v6 + v8[17]) = *(_QWORD *)&v7[v8[17]];
      v48 = v8[18];
      v49 = v6 + v48;
      v50 = &v7[v48];
      v51 = *(_QWORD *)&v7[v48 + 24];
      swift_retain();
      if (v51)
      {
        v52 = *(_QWORD *)v50;
        v53 = *((_QWORD *)v50 + 1);
        v54 = v50[16];
        sub_2141DD130(*(_QWORD *)v50, v53, v54);
        *(_QWORD *)v49 = v52;
        *(_QWORD *)(v49 + 8) = v53;
        *(_BYTE *)(v49 + 16) = v54;
        *(_QWORD *)(v49 + 24) = *((_QWORD *)v50 + 3);
        v55 = *((_QWORD *)v50 + 4);
        v56 = *((_QWORD *)v50 + 5);
        v57 = v50[48];
        swift_bridgeObjectRetain();
        sub_2141DD140(v55, v56, v57);
        *(_QWORD *)(v49 + 32) = v55;
        *(_QWORD *)(v49 + 40) = v56;
        *(_BYTE *)(v49 + 48) = v57;
        *(_OWORD *)(v49 + 56) = *(_OWORD *)(v50 + 56);
      }
      else
      {
        *(_OWORD *)v49 = *(_OWORD *)v50;
        v58 = *((_OWORD *)v50 + 1);
        v59 = *((_OWORD *)v50 + 2);
        v60 = *((_OWORD *)v50 + 3);
        *(_QWORD *)(v49 + 64) = *((_QWORD *)v50 + 8);
        *(_OWORD *)(v49 + 32) = v59;
        *(_OWORD *)(v49 + 48) = v60;
        *(_OWORD *)(v49 + 16) = v58;
      }
      v61 = v8[19];
      v62 = v6 + v61;
      v63 = &v7[v61];
      if (*(_QWORD *)&v7[v61 + 24])
      {
        v64 = *(_QWORD *)v63;
        v65 = *((_QWORD *)v63 + 1);
        v66 = v63[16];
        sub_2141DD130(*(_QWORD *)v63, v65, v66);
        *(_QWORD *)v62 = v64;
        *(_QWORD *)(v62 + 8) = v65;
        *(_BYTE *)(v62 + 16) = v66;
        *(_QWORD *)(v62 + 24) = *((_QWORD *)v63 + 3);
        v67 = *((_QWORD *)v63 + 4);
        v68 = *((_QWORD *)v63 + 5);
        v69 = v63[48];
        swift_bridgeObjectRetain();
        sub_2141DD140(v67, v68, v69);
        *(_QWORD *)(v62 + 32) = v67;
        *(_QWORD *)(v62 + 40) = v68;
        *(_BYTE *)(v62 + 48) = v69;
        *(_OWORD *)(v62 + 56) = *(_OWORD *)(v63 + 56);
      }
      else
      {
        *(_OWORD *)v62 = *(_OWORD *)v63;
        v70 = *((_OWORD *)v63 + 1);
        v71 = *((_OWORD *)v63 + 2);
        v72 = *((_OWORD *)v63 + 3);
        *(_QWORD *)(v62 + 64) = *((_QWORD *)v63 + 8);
        *(_OWORD *)(v62 + 32) = v71;
        *(_OWORD *)(v62 + 48) = v72;
        *(_OWORD *)(v62 + 16) = v70;
      }
      v73 = v8[20];
      v74 = v6 + v73;
      v75 = &v7[v73];
      if (*(_QWORD *)&v7[v73 + 24])
      {
        v76 = *(_QWORD *)v75;
        v77 = *((_QWORD *)v75 + 1);
        v78 = v75[16];
        sub_2141DD130(*(_QWORD *)v75, v77, v78);
        *(_QWORD *)v74 = v76;
        *(_QWORD *)(v74 + 8) = v77;
        *(_BYTE *)(v74 + 16) = v78;
        *(_QWORD *)(v74 + 24) = *((_QWORD *)v75 + 3);
        v79 = *((_QWORD *)v75 + 4);
        v80 = *((_QWORD *)v75 + 5);
        v81 = v75[48];
        swift_bridgeObjectRetain();
        sub_2141DD140(v79, v80, v81);
        *(_QWORD *)(v74 + 32) = v79;
        *(_QWORD *)(v74 + 40) = v80;
        *(_BYTE *)(v74 + 48) = v81;
        *(_OWORD *)(v74 + 56) = *(_OWORD *)(v75 + 56);
      }
      else
      {
        *(_OWORD *)v74 = *(_OWORD *)v75;
        v82 = *((_OWORD *)v75 + 1);
        v83 = *((_OWORD *)v75 + 2);
        v84 = *((_OWORD *)v75 + 3);
        *(_QWORD *)(v74 + 64) = *((_QWORD *)v75 + 8);
        *(_OWORD *)(v74 + 32) = v83;
        *(_OWORD *)(v74 + 48) = v84;
        *(_OWORD *)(v74 + 16) = v82;
      }
      v85 = v8[21];
      v86 = v6 + v85;
      v87 = &v7[v85];
      if (*(_QWORD *)&v7[v85 + 24])
      {
        v88 = *(_QWORD *)v87;
        v89 = *((_QWORD *)v87 + 1);
        v90 = v87[16];
        sub_2141DD130(*(_QWORD *)v87, v89, v90);
        *(_QWORD *)v86 = v88;
        *(_QWORD *)(v86 + 8) = v89;
        *(_BYTE *)(v86 + 16) = v90;
        *(_QWORD *)(v86 + 24) = *((_QWORD *)v87 + 3);
        v91 = *((_QWORD *)v87 + 4);
        v92 = *((_QWORD *)v87 + 5);
        v93 = v87[48];
        swift_bridgeObjectRetain();
        sub_2141DD140(v91, v92, v93);
        *(_QWORD *)(v86 + 32) = v91;
        *(_QWORD *)(v86 + 40) = v92;
        *(_BYTE *)(v86 + 48) = v93;
        *(_OWORD *)(v86 + 56) = *(_OWORD *)(v87 + 56);
      }
      else
      {
        *(_OWORD *)v86 = *(_OWORD *)v87;
        v94 = *((_OWORD *)v87 + 1);
        v95 = *((_OWORD *)v87 + 2);
        v96 = *((_OWORD *)v87 + 3);
        *(_QWORD *)(v86 + 64) = *((_QWORD *)v87 + 8);
        *(_OWORD *)(v86 + 32) = v95;
        *(_OWORD *)(v86 + 48) = v96;
        *(_OWORD *)(v86 + 16) = v94;
      }
      v97 = v8[22];
      v98 = v6 + v97;
      v99 = &v7[v97];
      v100 = *(_OWORD *)v99;
      *(_QWORD *)(v98 + 16) = *((_QWORD *)v99 + 2);
      *(_OWORD *)v98 = v100;
      v101 = v8[23];
      v102 = v6 + v101;
      v103 = &v7[v101];
      v104 = *(_OWORD *)v103;
      *(_QWORD *)(v102 + 16) = *((_QWORD *)v103 + 2);
      *(_OWORD *)v102 = v104;
      v105 = v8[24];
      v106 = v6 + v105;
      v107 = &v7[v105];
      if (*(_QWORD *)&v7[v105 + 24])
      {
        v108 = *(_QWORD *)v107;
        v109 = *((_QWORD *)v107 + 1);
        v110 = v107[16];
        sub_2141DD130(*(_QWORD *)v107, v109, v110);
        *(_QWORD *)v106 = v108;
        *(_QWORD *)(v106 + 8) = v109;
        *(_BYTE *)(v106 + 16) = v110;
        *(_QWORD *)(v106 + 24) = *((_QWORD *)v107 + 3);
        swift_bridgeObjectRetain();
      }
      else
      {
        v111 = *((_OWORD *)v107 + 1);
        *(_OWORD *)v106 = *(_OWORD *)v107;
        *(_OWORD *)(v106 + 16) = v111;
      }
      v112 = v8[25];
      v113 = v6 + v112;
      v114 = &v7[v112];
      if (*(_QWORD *)&v7[v112 + 24])
      {
        v115 = *(_QWORD *)v114;
        v116 = *((_QWORD *)v114 + 1);
        v117 = v114[16];
        sub_2141DD130(*(_QWORD *)v114, v116, v117);
        *(_QWORD *)v113 = v115;
        *(_QWORD *)(v113 + 8) = v116;
        *(_BYTE *)(v113 + 16) = v117;
        *(_QWORD *)(v113 + 24) = *((_QWORD *)v114 + 3);
        swift_bridgeObjectRetain();
      }
      else
      {
        v118 = *((_OWORD *)v114 + 1);
        *(_OWORD *)v113 = *(_OWORD *)v114;
        *(_OWORD *)(v113 + 16) = v118;
      }
      v119 = v8[26];
      v120 = (_QWORD *)(v6 + v119);
      v121 = &v7[v119];
      *v120 = *(_QWORD *)v121;
      v120[1] = *((_QWORD *)v121 + 1);
      v122 = v8[27];
      v123 = v6 + v122;
      v124 = &v7[v122];
      v125 = *((_QWORD *)v124 + 3);
      swift_bridgeObjectRetain();
      if (v125)
      {
        *(_QWORD *)(v123 + 24) = v125;
        (**(void (***)(uint64_t, char *, uint64_t))(v125 - 8))(v123, v124, v125);
      }
      else
      {
        v126 = *((_OWORD *)v124 + 1);
        *(_OWORD *)v123 = *(_OWORD *)v124;
        *(_OWORD *)(v123 + 16) = v126;
      }
      v4 = v343;
      __src[7](v6, 0, 1, v8);
      goto LABEL_47;
    }
LABEL_7:
    v16 = sub_2141D8BF8(qword_254D69B70);
    memcpy((void *)v6, v7, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_47;
  }
  if (v12)
  {
    sub_2141DD370(v6, type metadata accessor for ChartContentRenderContext.Environment);
    goto LABEL_7;
  }
  v17 = v7[40];
  if (*(unsigned __int8 *)(v6 + 40) == 255)
  {
    if (v17 == 255)
    {
      v137 = *(_OWORD *)v7;
      v138 = *((_OWORD *)v7 + 1);
      *(_OWORD *)(v6 + 25) = *(_OWORD *)(v7 + 25);
      *(_OWORD *)v6 = v137;
      *(_OWORD *)(v6 + 16) = v138;
      goto LABEL_55;
    }
    if ((v17 & 1) != 0)
      goto LABEL_52;
LABEL_54:
    *(_QWORD *)v6 = *(_QWORD *)v7;
    *(_BYTE *)(v6 + 40) = 0;
    swift_retain();
    goto LABEL_55;
  }
  if (v17 == 255)
  {
    sub_21420D6FC(v6);
    v18 = *(_OWORD *)(v7 + 25);
    v19 = *((_OWORD *)v7 + 1);
    *(_OWORD *)v6 = *(_OWORD *)v7;
    *(_OWORD *)(v6 + 16) = v19;
    *(_OWORD *)(v6 + 25) = v18;
    goto LABEL_55;
  }
  if ((uint64_t *)a1 != v2)
  {
    sub_21420D6FC(v6);
    if ((v7[40] & 1) != 0)
    {
LABEL_52:
      v139 = *((_QWORD *)v7 + 3);
      *(_QWORD *)(v6 + 24) = v139;
      *(_QWORD *)(v6 + 32) = *((_QWORD *)v7 + 4);
      (**(void (***)(uint64_t, char *))(v139 - 8))(v6, v7);
      *(_BYTE *)(v6 + 40) = 1;
      goto LABEL_55;
    }
    goto LABEL_54;
  }
LABEL_55:
  v344 = v4;
  *(_BYTE *)(v6 + 41) = v7[41];
  *(_QWORD *)(v6 + 48) = *((_QWORD *)v7 + 6);
  *(_DWORD *)(v6 + 56) = *((_DWORD *)v7 + 14);
  *(_DWORD *)(v6 + 60) = *((_DWORD *)v7 + 15);
  *(_QWORD *)(v6 + 64) = *((_QWORD *)v7 + 8);
  *(_QWORD *)(v6 + 72) = *((_QWORD *)v7 + 9);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v6 + 80) = *((_QWORD *)v7 + 10);
  v140 = (__int128 *)(v6 + 88);
  v141 = (__int128 *)(v7 + 88);
  v142 = v7[128];
  if (*(unsigned __int8 *)(v6 + 128) == 255)
  {
    if (v142 == 255)
    {
      v145 = *v141;
      v146 = *(_OWORD *)(v7 + 104);
      *(_OWORD *)(v6 + 113) = *(_OWORD *)(v7 + 113);
      *v140 = v145;
      *(_OWORD *)(v6 + 104) = v146;
      goto LABEL_65;
    }
    if ((v142 & 1) != 0)
      goto LABEL_62;
LABEL_64:
    v147 = *((_QWORD *)v7 + 14);
    *(_QWORD *)(v6 + 112) = v147;
    *(_QWORD *)(v6 + 120) = *((_QWORD *)v7 + 15);
    (**(void (***)(uint64_t, uint64_t))(v147 - 8))(v6 + 88, (uint64_t)(v7 + 88));
    *(_BYTE *)(v6 + 128) = 0;
    goto LABEL_65;
  }
  if (v142 == 255)
  {
    sub_21420D730(v6 + 88);
    v143 = *(_OWORD *)(v7 + 113);
    v144 = *(_OWORD *)(v7 + 104);
    *v140 = *v141;
    *(_OWORD *)(v6 + 104) = v144;
    *(_OWORD *)(v6 + 113) = v143;
    goto LABEL_65;
  }
  if ((uint64_t *)a1 != v2)
  {
    sub_21420D730(v6 + 88);
    if ((v7[128] & 1) != 0)
    {
LABEL_62:
      *(_QWORD *)(v6 + 88) = *((_QWORD *)v7 + 11);
      *(_OWORD *)(v6 + 96) = *((_OWORD *)v7 + 6);
      *(_BYTE *)(v6 + 128) = 1;
      swift_retain();
      goto LABEL_65;
    }
    goto LABEL_64;
  }
LABEL_65:
  v340 = v2;
  v148 = *(_OWORD *)(v7 + 136);
  *(_BYTE *)(v6 + 152) = v7[152];
  *(_OWORD *)(v6 + 136) = v148;
  v149 = *((_QWORD *)v7 + 20);
  *(_BYTE *)(v6 + 168) = v7[168];
  *(_QWORD *)(v6 + 160) = v149;
  v150 = *((_OWORD *)v7 + 11);
  v151 = *((_OWORD *)v7 + 12);
  *(_BYTE *)(v6 + 208) = v7[208];
  *(_OWORD *)(v6 + 176) = v150;
  *(_OWORD *)(v6 + 192) = v151;
  v152 = v8[11];
  v153 = (void *)(v6 + v152);
  v154 = &v7[v152];
  v155 = sub_214424308();
  v156 = *(_QWORD *)(v155 - 8);
  v157 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v156 + 48);
  v158 = v157(v153, 1, v155);
  v159 = v157(v154, 1, v155);
  if (v158)
  {
    if (!v159)
    {
      (*(void (**)(void *, char *, uint64_t))(v156 + 16))(v153, v154, v155);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v156 + 56))(v153, 0, 1, v155);
      goto LABEL_71;
    }
    goto LABEL_70;
  }
  if (v159)
  {
    (*(void (**)(void *, uint64_t))(v156 + 8))(v153, v155);
LABEL_70:
    v160 = sub_2141D8BF8(&qword_253F134C8);
    memcpy(v153, v154, *(_QWORD *)(*(_QWORD *)(v160 - 8) + 64));
    goto LABEL_71;
  }
  (*(void (**)(void *, char *, uint64_t))(v156 + 24))(v153, v154, v155);
LABEL_71:
  v2 = v340;
  v161 = v8[12];
  v162 = v6 + v161;
  v163 = &v7[v161];
  v164 = *(_QWORD *)v163;
  *(_BYTE *)(v162 + 8) = v163[8];
  *(_QWORD *)v162 = v164;
  *(_QWORD *)(v6 + v8[13]) = *(_QWORD *)&v7[v8[13]];
  v165 = v8[14];
  v166 = (void *)(v6 + v165);
  v167 = &v7[v165];
  v168 = sub_214424C68();
  v169 = *(_QWORD *)(v168 - 8);
  v170 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v169 + 48);
  v341 = v166;
  LODWORD(v166) = v170(v166, 1, v168);
  v171 = v170(v167, 1, v168);
  if ((_DWORD)v166)
  {
    if (v171)
    {
      v172 = *(_QWORD *)(*(_QWORD *)(sub_2141D8BF8(&qword_253F15C88) - 8) + 64);
      v173 = v341;
LABEL_76:
      memcpy(v173, v167, v172);
      goto LABEL_80;
    }
    (*(void (**)(void *, char *, uint64_t))(v169 + 16))(v341, v167, v168);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v169 + 56))(v341, 0, 1, v168);
  }
  else
  {
    if (v171)
    {
      (*(void (**)(void *, uint64_t))(v169 + 8))(v341, v168);
      v172 = *(_QWORD *)(*(_QWORD *)(sub_2141D8BF8(&qword_253F15C88) - 8) + 64);
      v173 = v341;
      goto LABEL_76;
    }
    (*(void (**)(void *, char *, uint64_t))(v169 + 24))(v341, v167, v168);
  }
LABEL_80:
  v174 = v8[15];
  v175 = v6 + v174;
  v176 = &v7[v174];
  *(_QWORD *)(v6 + v174) = *(_QWORD *)&v7[v174];
  swift_retain();
  swift_release();
  *(_BYTE *)(v175 + 8) = v176[8];
  *(_BYTE *)(v175 + 9) = v176[9];
  *(_QWORD *)(v6 + v8[16]) = *(_QWORD *)&v7[v8[16]];
  *(_QWORD *)(v6 + v8[17]) = *(_QWORD *)&v7[v8[17]];
  v177 = v8[18];
  v178 = v6 + v177;
  v179 = &v7[v177];
  v180 = *(_QWORD *)(v6 + v177 + 24);
  v181 = *(_QWORD *)&v7[v177 + 24];
  if (v180)
  {
    if (v181)
    {
      v182 = *(_QWORD *)v179;
      v183 = *((_QWORD *)v179 + 1);
      v184 = v179[16];
      sub_2141DD130(*(_QWORD *)v179, v183, v184);
      v185 = *(_QWORD *)v178;
      v186 = *(_QWORD *)(v178 + 8);
      v187 = *(_BYTE *)(v178 + 16);
      *(_QWORD *)v178 = v182;
      *(_QWORD *)(v178 + 8) = v183;
      *(_BYTE *)(v178 + 16) = v184;
      sub_2141ED0BC(v185, v186, v187);
      *(_QWORD *)(v178 + 24) = *((_QWORD *)v179 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v188 = *((_QWORD *)v179 + 4);
      v189 = *((_QWORD *)v179 + 5);
      v190 = v179[48];
      sub_2141DD140(v188, v189, v190);
      v191 = *(_QWORD *)(v178 + 32);
      v192 = *(_QWORD *)(v178 + 40);
      *(_QWORD *)(v178 + 32) = v188;
      *(_QWORD *)(v178 + 40) = v189;
      v193 = *(_BYTE *)(v178 + 48);
      *(_BYTE *)(v178 + 48) = v190;
      sub_2141EF1B0(v191, v192, v193);
LABEL_85:
      *(_OWORD *)(v178 + 56) = *(_OWORD *)(v179 + 56);
      goto LABEL_88;
    }
    sub_21420D764(v178);
    *(_OWORD *)v178 = *(_OWORD *)v179;
    v201 = *((_OWORD *)v179 + 2);
    v200 = *((_OWORD *)v179 + 3);
    v202 = *((_OWORD *)v179 + 1);
    *(_QWORD *)(v178 + 64) = *((_QWORD *)v179 + 8);
    *(_OWORD *)(v178 + 32) = v201;
    *(_OWORD *)(v178 + 48) = v200;
    *(_OWORD *)(v178 + 16) = v202;
  }
  else
  {
    if (v181)
    {
      v194 = *(_QWORD *)v179;
      v195 = *((_QWORD *)v179 + 1);
      v196 = v179[16];
      sub_2141DD130(*(_QWORD *)v179, v195, v196);
      *(_QWORD *)v178 = v194;
      *(_QWORD *)(v178 + 8) = v195;
      *(_BYTE *)(v178 + 16) = v196;
      *(_QWORD *)(v178 + 24) = *((_QWORD *)v179 + 3);
      v197 = *((_QWORD *)v179 + 4);
      v198 = *((_QWORD *)v179 + 5);
      v199 = v179[48];
      swift_bridgeObjectRetain();
      sub_2141DD140(v197, v198, v199);
      *(_QWORD *)(v178 + 32) = v197;
      *(_QWORD *)(v178 + 40) = v198;
      *(_BYTE *)(v178 + 48) = v199;
      goto LABEL_85;
    }
    *(_OWORD *)v178 = *(_OWORD *)v179;
    v203 = *((_OWORD *)v179 + 1);
    v204 = *((_OWORD *)v179 + 2);
    v205 = *((_OWORD *)v179 + 3);
    *(_QWORD *)(v178 + 64) = *((_QWORD *)v179 + 8);
    *(_OWORD *)(v178 + 32) = v204;
    *(_OWORD *)(v178 + 48) = v205;
    *(_OWORD *)(v178 + 16) = v203;
  }
LABEL_88:
  v206 = v8[19];
  v207 = v6 + v206;
  v208 = &v7[v206];
  v209 = *(_QWORD *)(v6 + v206 + 24);
  v210 = *(_QWORD *)&v7[v206 + 24];
  if (v209)
  {
    if (v210)
    {
      v211 = *(_QWORD *)v208;
      v212 = *((_QWORD *)v208 + 1);
      v213 = v208[16];
      sub_2141DD130(*(_QWORD *)v208, v212, v213);
      v214 = *(_QWORD *)v207;
      v215 = *(_QWORD *)(v207 + 8);
      v216 = *(_BYTE *)(v207 + 16);
      *(_QWORD *)v207 = v211;
      *(_QWORD *)(v207 + 8) = v212;
      *(_BYTE *)(v207 + 16) = v213;
      sub_2141ED0BC(v214, v215, v216);
      *(_QWORD *)(v207 + 24) = *((_QWORD *)v208 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v217 = *((_QWORD *)v208 + 4);
      v218 = *((_QWORD *)v208 + 5);
      v219 = v208[48];
      sub_2141DD140(v217, v218, v219);
      v220 = *(_QWORD *)(v207 + 32);
      v221 = *(_QWORD *)(v207 + 40);
      *(_QWORD *)(v207 + 32) = v217;
      *(_QWORD *)(v207 + 40) = v218;
      v222 = *(_BYTE *)(v207 + 48);
      *(_BYTE *)(v207 + 48) = v219;
      sub_2141EF1B0(v220, v221, v222);
LABEL_93:
      *(_OWORD *)(v207 + 56) = *(_OWORD *)(v208 + 56);
      goto LABEL_96;
    }
    sub_21420D764(v207);
    *(_OWORD *)v207 = *(_OWORD *)v208;
    v230 = *((_OWORD *)v208 + 2);
    v229 = *((_OWORD *)v208 + 3);
    v231 = *((_OWORD *)v208 + 1);
    *(_QWORD *)(v207 + 64) = *((_QWORD *)v208 + 8);
    *(_OWORD *)(v207 + 32) = v230;
    *(_OWORD *)(v207 + 48) = v229;
    *(_OWORD *)(v207 + 16) = v231;
  }
  else
  {
    if (v210)
    {
      v223 = *(_QWORD *)v208;
      v224 = *((_QWORD *)v208 + 1);
      v225 = v208[16];
      sub_2141DD130(*(_QWORD *)v208, v224, v225);
      *(_QWORD *)v207 = v223;
      *(_QWORD *)(v207 + 8) = v224;
      *(_BYTE *)(v207 + 16) = v225;
      *(_QWORD *)(v207 + 24) = *((_QWORD *)v208 + 3);
      v226 = *((_QWORD *)v208 + 4);
      v227 = *((_QWORD *)v208 + 5);
      v228 = v208[48];
      swift_bridgeObjectRetain();
      sub_2141DD140(v226, v227, v228);
      *(_QWORD *)(v207 + 32) = v226;
      *(_QWORD *)(v207 + 40) = v227;
      *(_BYTE *)(v207 + 48) = v228;
      goto LABEL_93;
    }
    *(_OWORD *)v207 = *(_OWORD *)v208;
    v232 = *((_OWORD *)v208 + 1);
    v233 = *((_OWORD *)v208 + 2);
    v234 = *((_OWORD *)v208 + 3);
    *(_QWORD *)(v207 + 64) = *((_QWORD *)v208 + 8);
    *(_OWORD *)(v207 + 32) = v233;
    *(_OWORD *)(v207 + 48) = v234;
    *(_OWORD *)(v207 + 16) = v232;
  }
LABEL_96:
  v235 = v8[20];
  v236 = v6 + v235;
  v237 = &v7[v235];
  v238 = *(_QWORD *)(v6 + v235 + 24);
  v239 = *(_QWORD *)&v7[v235 + 24];
  if (v238)
  {
    if (v239)
    {
      v240 = *(_QWORD *)v237;
      v241 = *((_QWORD *)v237 + 1);
      v242 = v237[16];
      sub_2141DD130(*(_QWORD *)v237, v241, v242);
      v243 = *(_QWORD *)v236;
      v244 = *(_QWORD *)(v236 + 8);
      v245 = *(_BYTE *)(v236 + 16);
      *(_QWORD *)v236 = v240;
      *(_QWORD *)(v236 + 8) = v241;
      *(_BYTE *)(v236 + 16) = v242;
      sub_2141ED0BC(v243, v244, v245);
      *(_QWORD *)(v236 + 24) = *((_QWORD *)v237 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v246 = *((_QWORD *)v237 + 4);
      v247 = *((_QWORD *)v237 + 5);
      v248 = v237[48];
      sub_2141DD140(v246, v247, v248);
      v249 = *(_QWORD *)(v236 + 32);
      v250 = *(_QWORD *)(v236 + 40);
      *(_QWORD *)(v236 + 32) = v246;
      *(_QWORD *)(v236 + 40) = v247;
      v251 = *(_BYTE *)(v236 + 48);
      *(_BYTE *)(v236 + 48) = v248;
      sub_2141EF1B0(v249, v250, v251);
LABEL_101:
      *(_OWORD *)(v236 + 56) = *(_OWORD *)(v237 + 56);
      goto LABEL_104;
    }
    sub_21420D764(v236);
    *(_OWORD *)v236 = *(_OWORD *)v237;
    v259 = *((_OWORD *)v237 + 2);
    v258 = *((_OWORD *)v237 + 3);
    v260 = *((_OWORD *)v237 + 1);
    *(_QWORD *)(v236 + 64) = *((_QWORD *)v237 + 8);
    *(_OWORD *)(v236 + 32) = v259;
    *(_OWORD *)(v236 + 48) = v258;
    *(_OWORD *)(v236 + 16) = v260;
  }
  else
  {
    if (v239)
    {
      v252 = *(_QWORD *)v237;
      v253 = *((_QWORD *)v237 + 1);
      v254 = v237[16];
      sub_2141DD130(*(_QWORD *)v237, v253, v254);
      *(_QWORD *)v236 = v252;
      *(_QWORD *)(v236 + 8) = v253;
      *(_BYTE *)(v236 + 16) = v254;
      *(_QWORD *)(v236 + 24) = *((_QWORD *)v237 + 3);
      v255 = *((_QWORD *)v237 + 4);
      v256 = *((_QWORD *)v237 + 5);
      v257 = v237[48];
      swift_bridgeObjectRetain();
      sub_2141DD140(v255, v256, v257);
      *(_QWORD *)(v236 + 32) = v255;
      *(_QWORD *)(v236 + 40) = v256;
      *(_BYTE *)(v236 + 48) = v257;
      goto LABEL_101;
    }
    *(_OWORD *)v236 = *(_OWORD *)v237;
    v261 = *((_OWORD *)v237 + 1);
    v262 = *((_OWORD *)v237 + 2);
    v263 = *((_OWORD *)v237 + 3);
    *(_QWORD *)(v236 + 64) = *((_QWORD *)v237 + 8);
    *(_OWORD *)(v236 + 32) = v262;
    *(_OWORD *)(v236 + 48) = v263;
    *(_OWORD *)(v236 + 16) = v261;
  }
LABEL_104:
  v264 = v8[21];
  v265 = v6 + v264;
  v266 = &v7[v264];
  v267 = *(_QWORD *)(v6 + v264 + 24);
  v268 = *(_QWORD *)&v7[v264 + 24];
  if (v267)
  {
    if (!v268)
    {
      sub_21420D764(v265);
      *(_OWORD *)v265 = *(_OWORD *)v266;
      v288 = *((_OWORD *)v266 + 2);
      v287 = *((_OWORD *)v266 + 3);
      v289 = *((_OWORD *)v266 + 1);
      *(_QWORD *)(v265 + 64) = *((_QWORD *)v266 + 8);
      *(_OWORD *)(v265 + 32) = v288;
      *(_OWORD *)(v265 + 48) = v287;
      *(_OWORD *)(v265 + 16) = v289;
      goto LABEL_112;
    }
    v269 = *(_QWORD *)v266;
    v270 = *((_QWORD *)v266 + 1);
    v271 = v266[16];
    sub_2141DD130(*(_QWORD *)v266, v270, v271);
    v272 = *(_QWORD *)v265;
    v273 = *(_QWORD *)(v265 + 8);
    v274 = *(_BYTE *)(v265 + 16);
    *(_QWORD *)v265 = v269;
    *(_QWORD *)(v265 + 8) = v270;
    *(_BYTE *)(v265 + 16) = v271;
    sub_2141ED0BC(v272, v273, v274);
    *(_QWORD *)(v265 + 24) = *((_QWORD *)v266 + 3);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v275 = *((_QWORD *)v266 + 4);
    v276 = *((_QWORD *)v266 + 5);
    v277 = v266[48];
    sub_2141DD140(v275, v276, v277);
    v278 = *(_QWORD *)(v265 + 32);
    v279 = *(_QWORD *)(v265 + 40);
    *(_QWORD *)(v265 + 32) = v275;
    *(_QWORD *)(v265 + 40) = v276;
    v280 = *(_BYTE *)(v265 + 48);
    *(_BYTE *)(v265 + 48) = v277;
    sub_2141EF1B0(v278, v279, v280);
  }
  else
  {
    if (!v268)
    {
      *(_OWORD *)v265 = *(_OWORD *)v266;
      v290 = *((_OWORD *)v266 + 1);
      v291 = *((_OWORD *)v266 + 2);
      v292 = *((_OWORD *)v266 + 3);
      *(_QWORD *)(v265 + 64) = *((_QWORD *)v266 + 8);
      *(_OWORD *)(v265 + 32) = v291;
      *(_OWORD *)(v265 + 48) = v292;
      *(_OWORD *)(v265 + 16) = v290;
      goto LABEL_112;
    }
    v281 = *(_QWORD *)v266;
    v282 = *((_QWORD *)v266 + 1);
    v283 = v266[16];
    sub_2141DD130(*(_QWORD *)v266, v282, v283);
    *(_QWORD *)v265 = v281;
    *(_QWORD *)(v265 + 8) = v282;
    *(_BYTE *)(v265 + 16) = v283;
    *(_QWORD *)(v265 + 24) = *((_QWORD *)v266 + 3);
    v284 = *((_QWORD *)v266 + 4);
    v285 = *((_QWORD *)v266 + 5);
    v286 = v266[48];
    swift_bridgeObjectRetain();
    sub_2141DD140(v284, v285, v286);
    *(_QWORD *)(v265 + 32) = v284;
    *(_QWORD *)(v265 + 40) = v285;
    *(_BYTE *)(v265 + 48) = v286;
  }
  *(_OWORD *)(v265 + 56) = *(_OWORD *)(v266 + 56);
LABEL_112:
  v293 = v8[22];
  v294 = (_QWORD *)(v6 + v293);
  v295 = &v7[v293];
  *v294 = *(_QWORD *)v295;
  v294[1] = *((_QWORD *)v295 + 1);
  v294[2] = *((_QWORD *)v295 + 2);
  v296 = v8[23];
  v297 = (_QWORD *)(v6 + v296);
  v298 = &v7[v296];
  *v297 = *(_QWORD *)v298;
  v297[1] = *((_QWORD *)v298 + 1);
  v297[2] = *((_QWORD *)v298 + 2);
  v299 = v8[24];
  v300 = v6 + v299;
  v301 = &v7[v299];
  v302 = *(_QWORD *)(v6 + v299 + 24);
  v303 = *(_QWORD *)&v7[v299 + 24];
  if (v302)
  {
    if (v303)
    {
      v304 = *(_QWORD *)v301;
      v305 = *((_QWORD *)v301 + 1);
      v306 = v301[16];
      sub_2141DD130(*(_QWORD *)v301, v305, v306);
      v307 = *(_QWORD *)v300;
      v308 = *(_QWORD *)(v300 + 8);
      v309 = *(_BYTE *)(v300 + 16);
      *(_QWORD *)v300 = v304;
      *(_QWORD *)(v300 + 8) = v305;
      *(_BYTE *)(v300 + 16) = v306;
      sub_2141ED0BC(v307, v308, v309);
      *(_QWORD *)(v300 + 24) = *((_QWORD *)v301 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_21420D798(v300);
      v313 = *((_OWORD *)v301 + 1);
      *(_OWORD *)v300 = *(_OWORD *)v301;
      *(_OWORD *)(v300 + 16) = v313;
    }
  }
  else if (v303)
  {
    v310 = *(_QWORD *)v301;
    v311 = *((_QWORD *)v301 + 1);
    v312 = v301[16];
    sub_2141DD130(*(_QWORD *)v301, v311, v312);
    *(_QWORD *)v300 = v310;
    *(_QWORD *)(v300 + 8) = v311;
    *(_BYTE *)(v300 + 16) = v312;
    *(_QWORD *)(v300 + 24) = *((_QWORD *)v301 + 3);
    swift_bridgeObjectRetain();
  }
  else
  {
    v314 = *((_OWORD *)v301 + 1);
    *(_OWORD *)v300 = *(_OWORD *)v301;
    *(_OWORD *)(v300 + 16) = v314;
  }
  v315 = v8[25];
  v316 = v6 + v315;
  v317 = &v7[v315];
  v318 = *(_QWORD *)(v6 + v315 + 24);
  v319 = *(_QWORD *)&v7[v315 + 24];
  if (v318)
  {
    if (v319)
    {
      v320 = *(_QWORD *)v317;
      v321 = *((_QWORD *)v317 + 1);
      v322 = v317[16];
      sub_2141DD130(*(_QWORD *)v317, v321, v322);
      v323 = *(_QWORD *)v316;
      v324 = *(_QWORD *)(v316 + 8);
      v325 = *(_BYTE *)(v316 + 16);
      *(_QWORD *)v316 = v320;
      *(_QWORD *)(v316 + 8) = v321;
      *(_BYTE *)(v316 + 16) = v322;
      sub_2141ED0BC(v323, v324, v325);
      *(_QWORD *)(v316 + 24) = *((_QWORD *)v317 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_21420D798(v316);
      v329 = *((_OWORD *)v317 + 1);
      *(_OWORD *)v316 = *(_OWORD *)v317;
      *(_OWORD *)(v316 + 16) = v329;
    }
  }
  else if (v319)
  {
    v326 = *(_QWORD *)v317;
    v327 = *((_QWORD *)v317 + 1);
    v328 = v317[16];
    sub_2141DD130(*(_QWORD *)v317, v327, v328);
    *(_QWORD *)v316 = v326;
    *(_QWORD *)(v316 + 8) = v327;
    *(_BYTE *)(v316 + 16) = v328;
    *(_QWORD *)(v316 + 24) = *((_QWORD *)v317 + 3);
    swift_bridgeObjectRetain();
  }
  else
  {
    v330 = *((_OWORD *)v317 + 1);
    *(_OWORD *)v316 = *(_OWORD *)v317;
    *(_OWORD *)(v316 + 16) = v330;
  }
  v4 = v344;
  v331 = v8[26];
  v332 = (_QWORD *)(v6 + v331);
  v333 = &v7[v331];
  *v332 = *(_QWORD *)v333;
  v332[1] = *((_QWORD *)v333 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v334 = v8[27];
  v335 = v6 + v334;
  v336 = &v7[v334];
  v337 = *((_QWORD *)v336 + 3);
  if (*(_QWORD *)(v335 + 24))
  {
    if (v337)
    {
      sub_21420D7CC((uint64_t *)v335, (uint64_t *)v336);
    }
    else
    {
      sub_21420D92C(v335);
      v338 = *((_OWORD *)v336 + 1);
      *(_OWORD *)v335 = *(_OWORD *)v336;
      *(_OWORD *)(v335 + 16) = v338;
    }
  }
  else if (v337)
  {
    *(_QWORD *)(v335 + 24) = v337;
    (**(void (***)(uint64_t, char *))(v337 - 8))(v335, v336);
  }
  else
  {
    v339 = *((_OWORD *)v336 + 1);
    *(_OWORD *)v335 = *(_OWORD *)v336;
    *(_OWORD *)(v335 + 16) = v339;
  }
LABEL_47:
  v127 = v4[9];
  v128 = a1 + v127;
  v129 = (char *)v2 + v127;
  v130 = *(_OWORD *)v129;
  v131 = *((_OWORD *)v129 + 1);
  *(_BYTE *)(v128 + 32) = v129[32];
  *(_OWORD *)v128 = v130;
  *(_OWORD *)(v128 + 16) = v131;
  v132 = v4[10];
  v133 = a1 + v132;
  v134 = (char *)v2 + v132;
  v135 = sub_214424308();
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v135 - 8) + 24))(v133, v134, v135);
  return a1;
}

uint64_t sub_214296568(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  int *v5;
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  char *v41;
  char *v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  char *v46;
  char *v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  char *v51;
  char *v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  _OWORD *v62;
  _OWORD *v63;
  __int128 v64;
  uint64_t v65;
  _OWORD *v66;
  _OWORD *v67;
  __int128 v68;
  uint64_t v69;
  _OWORD *v70;
  _OWORD *v71;
  __int128 v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v82;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  v5 = (int *)type metadata accessor for RectanglesRenderer(0);
  v6 = v5[8];
  v7 = (_OWORD *)(a1 + v6);
  v8 = (_OWORD *)(a2 + v6);
  v9 = (int *)type metadata accessor for ChartContentRenderContext.Environment(0);
  v10 = *((_QWORD *)v9 - 1);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v10 + 48))(v8, 1, v9))
  {
    v11 = sub_2141D8BF8(qword_254D69B70);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    v82 = v10;
    v12 = v8[1];
    *v7 = *v8;
    v7[1] = v12;
    *(_OWORD *)((char *)v7 + 25) = *(_OWORD *)((char *)v8 + 25);
    *((_BYTE *)v7 + 41) = *((_BYTE *)v8 + 41);
    v13 = v8[4];
    v7[3] = v8[3];
    v7[4] = v13;
    *((_QWORD *)v7 + 10) = *((_QWORD *)v8 + 10);
    v14 = *(_OWORD *)((char *)v8 + 88);
    v15 = *(_OWORD *)((char *)v8 + 104);
    *(_OWORD *)((char *)v7 + 113) = *(_OWORD *)((char *)v8 + 113);
    *(_OWORD *)((char *)v7 + 104) = v15;
    *(_OWORD *)((char *)v7 + 88) = v14;
    *(_OWORD *)((char *)v7 + 136) = *(_OWORD *)((char *)v8 + 136);
    *((_BYTE *)v7 + 152) = *((_BYTE *)v8 + 152);
    *((_QWORD *)v7 + 20) = *((_QWORD *)v8 + 20);
    *((_BYTE *)v7 + 168) = *((_BYTE *)v8 + 168);
    v16 = v8[12];
    v7[11] = v8[11];
    v7[12] = v16;
    *((_BYTE *)v7 + 208) = *((_BYTE *)v8 + 208);
    v17 = v9[11];
    v18 = (char *)v7 + v17;
    v19 = (char *)v8 + v17;
    v20 = sub_214424308();
    v21 = *(_QWORD *)(v20 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
    {
      v22 = sub_2141D8BF8(&qword_253F134C8);
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v18, v19, v20);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
    }
    v23 = v9[12];
    v24 = (char *)v7 + v23;
    v25 = (char *)v8 + v23;
    *(_QWORD *)v24 = *(_QWORD *)v25;
    v24[8] = v25[8];
    *(_QWORD *)((char *)v7 + v9[13]) = *(_QWORD *)((char *)v8 + v9[13]);
    v26 = v9[14];
    v27 = (char *)v7 + v26;
    v28 = (char *)v8 + v26;
    v29 = sub_214424C68();
    v30 = *(_QWORD *)(v29 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
    {
      v31 = sub_2141D8BF8(&qword_253F15C88);
      memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v30 + 32))(v27, v28, v29);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
    }
    v32 = v9[15];
    v33 = (char *)v7 + v32;
    v34 = (char *)v8 + v32;
    *(_QWORD *)v33 = *(_QWORD *)v34;
    *((_WORD *)v33 + 4) = *((_WORD *)v34 + 4);
    *(_QWORD *)((char *)v7 + v9[16]) = *(_QWORD *)((char *)v8 + v9[16]);
    *(_QWORD *)((char *)v7 + v9[17]) = *(_QWORD *)((char *)v8 + v9[17]);
    v35 = v9[18];
    v36 = (char *)v7 + v35;
    v37 = (char *)v8 + v35;
    v38 = *((_OWORD *)v37 + 3);
    *((_OWORD *)v36 + 2) = *((_OWORD *)v37 + 2);
    *((_OWORD *)v36 + 3) = v38;
    *((_QWORD *)v36 + 8) = *((_QWORD *)v37 + 8);
    v39 = *((_OWORD *)v37 + 1);
    *(_OWORD *)v36 = *(_OWORD *)v37;
    *((_OWORD *)v36 + 1) = v39;
    v40 = v9[19];
    v41 = (char *)v7 + v40;
    v42 = (char *)v8 + v40;
    *((_QWORD *)v41 + 8) = *((_QWORD *)v42 + 8);
    v43 = *((_OWORD *)v42 + 3);
    *((_OWORD *)v41 + 2) = *((_OWORD *)v42 + 2);
    *((_OWORD *)v41 + 3) = v43;
    v44 = *((_OWORD *)v42 + 1);
    *(_OWORD *)v41 = *(_OWORD *)v42;
    *((_OWORD *)v41 + 1) = v44;
    v45 = v9[20];
    v46 = (char *)v7 + v45;
    v47 = (char *)v8 + v45;
    v48 = *((_OWORD *)v47 + 3);
    *((_OWORD *)v46 + 2) = *((_OWORD *)v47 + 2);
    *((_OWORD *)v46 + 3) = v48;
    *((_QWORD *)v46 + 8) = *((_QWORD *)v47 + 8);
    v49 = *((_OWORD *)v47 + 1);
    *(_OWORD *)v46 = *(_OWORD *)v47;
    *((_OWORD *)v46 + 1) = v49;
    v50 = v9[21];
    v51 = (char *)v7 + v50;
    v52 = (char *)v8 + v50;
    *((_QWORD *)v51 + 8) = *((_QWORD *)v52 + 8);
    v53 = *((_OWORD *)v52 + 3);
    *((_OWORD *)v51 + 2) = *((_OWORD *)v52 + 2);
    *((_OWORD *)v51 + 3) = v53;
    v54 = *((_OWORD *)v52 + 1);
    *(_OWORD *)v51 = *(_OWORD *)v52;
    *((_OWORD *)v51 + 1) = v54;
    v55 = v9[22];
    v56 = (char *)v7 + v55;
    v57 = (char *)v8 + v55;
    *(_OWORD *)v56 = *(_OWORD *)v57;
    *((_QWORD *)v56 + 2) = *((_QWORD *)v57 + 2);
    v58 = v9[23];
    v59 = (char *)v7 + v58;
    v60 = (char *)v8 + v58;
    *(_OWORD *)v59 = *(_OWORD *)v60;
    *((_QWORD *)v59 + 2) = *((_QWORD *)v60 + 2);
    v61 = v9[24];
    v62 = (_OWORD *)((char *)v7 + v61);
    v63 = (_OWORD *)((char *)v8 + v61);
    v64 = v63[1];
    *v62 = *v63;
    v62[1] = v64;
    v65 = v9[25];
    v66 = (_OWORD *)((char *)v7 + v65);
    v67 = (_OWORD *)((char *)v8 + v65);
    v68 = v67[1];
    *v66 = *v67;
    v66[1] = v68;
    *(_OWORD *)((char *)v7 + v9[26]) = *(_OWORD *)((char *)v8 + v9[26]);
    v69 = v9[27];
    v70 = (_OWORD *)((char *)v7 + v69);
    v71 = (_OWORD *)((char *)v8 + v69);
    v72 = v71[1];
    *v70 = *v71;
    v70[1] = v72;
    (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v82 + 56))(v7, 0, 1, v9);
  }
  v73 = v5[9];
  v74 = a1 + v73;
  v75 = a2 + v73;
  v76 = *(_OWORD *)(v75 + 16);
  *(_OWORD *)v74 = *(_OWORD *)v75;
  *(_OWORD *)(v74 + 16) = v76;
  *(_BYTE *)(v74 + 32) = *(_BYTE *)(v75 + 32);
  v77 = v5[10];
  v78 = a1 + v77;
  v79 = a2 + v77;
  v80 = sub_214424308();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v80 - 8) + 32))(v78, v79, v80);
  return a1;
}

uint64_t sub_214296984(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, int *);
  int v12;
  int v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  void *v20;
  const void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  void *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(void *, uint64_t, uint64_t);
  int v37;
  size_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  const void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _OWORD *v79;
  _OWORD *v80;
  __int128 v81;
  uint64_t v82;
  _OWORD *v83;
  _OWORD *v84;
  __int128 v85;
  uint64_t v86;
  _OWORD *v87;
  _OWORD *v88;
  __int128 v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t (*v98)(void *, uint64_t, uint64_t);
  int v99;
  size_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char v108;
  uint64_t v109;
  uint64_t v110;
  char v111;
  char v112;
  uint64_t v113;
  uint64_t v114;
  char v115;
  __int128 v116;
  __int128 v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char v121;
  uint64_t v122;
  uint64_t v123;
  char v124;
  char v125;
  uint64_t v126;
  uint64_t v127;
  char v128;
  __int128 v129;
  __int128 v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char v134;
  uint64_t v135;
  uint64_t v136;
  char v137;
  char v138;
  uint64_t v139;
  uint64_t v140;
  char v141;
  __int128 v142;
  __int128 v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char v147;
  uint64_t v148;
  uint64_t v149;
  char v150;
  char v151;
  uint64_t v152;
  uint64_t v153;
  char v154;
  __int128 v155;
  __int128 v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  char v166;
  uint64_t v167;
  uint64_t v168;
  char v169;
  __int128 v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  char v174;
  uint64_t v175;
  uint64_t v176;
  char v177;
  __int128 v178;
  uint64_t v179;
  _QWORD *v180;
  uint64_t *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  __int128 v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  __int128 v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  void *v197;
  void *v198;
  int *v199;
  int *v200;

  _s6Charts15AnyChartContentVwxx_0(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_release();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v5 = (int *)type metadata accessor for RectanglesRenderer(0);
  v6 = v5[8];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = (int *)type metadata accessor for ChartContentRenderContext.Environment(0);
  v10 = *((_QWORD *)v9 - 1);
  v11 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      v199 = v5;
      v14 = *(_OWORD *)(v8 + 16);
      *(_OWORD *)v7 = *(_OWORD *)v8;
      *(_OWORD *)(v7 + 16) = v14;
      *(_OWORD *)(v7 + 25) = *(_OWORD *)(v8 + 25);
      *(_BYTE *)(v7 + 41) = *(_BYTE *)(v8 + 41);
      v15 = *(_OWORD *)(v8 + 64);
      *(_OWORD *)(v7 + 48) = *(_OWORD *)(v8 + 48);
      *(_OWORD *)(v7 + 64) = v15;
      *(_QWORD *)(v7 + 80) = *(_QWORD *)(v8 + 80);
      v16 = *(_OWORD *)(v8 + 88);
      v17 = *(_OWORD *)(v8 + 104);
      *(_OWORD *)(v7 + 113) = *(_OWORD *)(v8 + 113);
      *(_OWORD *)(v7 + 104) = v17;
      *(_OWORD *)(v7 + 88) = v16;
      *(_OWORD *)(v7 + 136) = *(_OWORD *)(v8 + 136);
      *(_BYTE *)(v7 + 152) = *(_BYTE *)(v8 + 152);
      *(_QWORD *)(v7 + 160) = *(_QWORD *)(v8 + 160);
      *(_BYTE *)(v7 + 168) = *(_BYTE *)(v8 + 168);
      v18 = *(_OWORD *)(v8 + 192);
      *(_OWORD *)(v7 + 176) = *(_OWORD *)(v8 + 176);
      *(_OWORD *)(v7 + 192) = v18;
      *(_BYTE *)(v7 + 208) = *(_BYTE *)(v8 + 208);
      v19 = v9[11];
      v20 = (void *)(v7 + v19);
      v21 = (const void *)(v8 + v19);
      v22 = sub_214424308();
      v23 = *(_QWORD *)(v22 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
      {
        v24 = sub_2141D8BF8(&qword_253F134C8);
        memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v23 + 32))(v20, v21, v22);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
      }
      v40 = v9[12];
      v41 = v7 + v40;
      v42 = v8 + v40;
      *(_QWORD *)v41 = *(_QWORD *)v42;
      *(_BYTE *)(v41 + 8) = *(_BYTE *)(v42 + 8);
      *(_QWORD *)(v7 + v9[13]) = *(_QWORD *)(v8 + v9[13]);
      v43 = v9[14];
      v44 = (void *)(v7 + v43);
      v45 = (const void *)(v8 + v43);
      v46 = sub_214424C68();
      v47 = *(_QWORD *)(v46 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v47 + 48))(v45, 1, v46))
      {
        v48 = sub_2141D8BF8(&qword_253F15C88);
        memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v47 + 32))(v44, v45, v46);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v47 + 56))(v44, 0, 1, v46);
      }
      v49 = v9[15];
      v50 = v7 + v49;
      v51 = v8 + v49;
      *(_QWORD *)v50 = *(_QWORD *)v51;
      *(_WORD *)(v50 + 8) = *(_WORD *)(v51 + 8);
      *(_QWORD *)(v7 + v9[16]) = *(_QWORD *)(v8 + v9[16]);
      *(_QWORD *)(v7 + v9[17]) = *(_QWORD *)(v8 + v9[17]);
      v52 = v9[18];
      v53 = v7 + v52;
      v54 = v8 + v52;
      v55 = *(_OWORD *)(v54 + 48);
      *(_OWORD *)(v53 + 32) = *(_OWORD *)(v54 + 32);
      *(_OWORD *)(v53 + 48) = v55;
      *(_QWORD *)(v53 + 64) = *(_QWORD *)(v54 + 64);
      v56 = *(_OWORD *)(v54 + 16);
      *(_OWORD *)v53 = *(_OWORD *)v54;
      *(_OWORD *)(v53 + 16) = v56;
      v57 = v9[19];
      v58 = v7 + v57;
      v59 = v8 + v57;
      *(_QWORD *)(v58 + 64) = *(_QWORD *)(v59 + 64);
      v60 = *(_OWORD *)(v59 + 48);
      *(_OWORD *)(v58 + 32) = *(_OWORD *)(v59 + 32);
      *(_OWORD *)(v58 + 48) = v60;
      v61 = *(_OWORD *)(v59 + 16);
      *(_OWORD *)v58 = *(_OWORD *)v59;
      *(_OWORD *)(v58 + 16) = v61;
      v62 = v9[20];
      v63 = v7 + v62;
      v64 = v8 + v62;
      v65 = *(_OWORD *)(v64 + 48);
      *(_OWORD *)(v63 + 32) = *(_OWORD *)(v64 + 32);
      *(_OWORD *)(v63 + 48) = v65;
      *(_QWORD *)(v63 + 64) = *(_QWORD *)(v64 + 64);
      v66 = *(_OWORD *)(v64 + 16);
      *(_OWORD *)v63 = *(_OWORD *)v64;
      *(_OWORD *)(v63 + 16) = v66;
      v67 = v9[21];
      v68 = v7 + v67;
      v69 = v8 + v67;
      *(_QWORD *)(v68 + 64) = *(_QWORD *)(v69 + 64);
      v70 = *(_OWORD *)(v69 + 48);
      *(_OWORD *)(v68 + 32) = *(_OWORD *)(v69 + 32);
      *(_OWORD *)(v68 + 48) = v70;
      v71 = *(_OWORD *)(v69 + 16);
      *(_OWORD *)v68 = *(_OWORD *)v69;
      *(_OWORD *)(v68 + 16) = v71;
      v72 = v9[22];
      v73 = v7 + v72;
      v74 = v8 + v72;
      *(_OWORD *)v73 = *(_OWORD *)v74;
      *(_QWORD *)(v73 + 16) = *(_QWORD *)(v74 + 16);
      v75 = v9[23];
      v76 = v7 + v75;
      v77 = v8 + v75;
      *(_OWORD *)v76 = *(_OWORD *)v77;
      *(_QWORD *)(v76 + 16) = *(_QWORD *)(v77 + 16);
      v78 = v9[24];
      v79 = (_OWORD *)(v7 + v78);
      v80 = (_OWORD *)(v8 + v78);
      v81 = v80[1];
      *v79 = *v80;
      v79[1] = v81;
      v82 = v9[25];
      v83 = (_OWORD *)(v7 + v82);
      v84 = (_OWORD *)(v8 + v82);
      v85 = v84[1];
      *v83 = *v84;
      v83[1] = v85;
      *(_OWORD *)(v7 + v9[26]) = *(_OWORD *)(v8 + v9[26]);
      v86 = v9[27];
      v87 = (_OWORD *)(v7 + v86);
      v88 = (_OWORD *)(v8 + v86);
      v89 = v88[1];
      *v87 = *v88;
      v87[1] = v89;
      (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v10 + 56))(v7, 0, 1, v9);
      v5 = v199;
      goto LABEL_76;
    }
LABEL_7:
    v25 = sub_2141D8BF8(qword_254D69B70);
    memcpy((void *)v7, (const void *)v8, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    goto LABEL_76;
  }
  if (v13)
  {
    sub_2141DD370(v7, type metadata accessor for ChartContentRenderContext.Environment);
    goto LABEL_7;
  }
  if (*(unsigned __int8 *)(v7 + 40) == 255)
    goto LABEL_14;
  if (*(unsigned __int8 *)(v8 + 40) == 255 || a1 != a2)
  {
    sub_21420D6FC(v7);
LABEL_14:
    v27 = *(_OWORD *)(v8 + 16);
    *(_OWORD *)v7 = *(_OWORD *)v8;
    *(_OWORD *)(v7 + 16) = v27;
    *(_OWORD *)(v7 + 25) = *(_OWORD *)(v8 + 25);
  }
  *(_BYTE *)(v7 + 41) = *(_BYTE *)(v8 + 41);
  v28 = *(_QWORD *)(v8 + 56);
  *(_QWORD *)(v7 + 48) = *(_QWORD *)(v8 + 48);
  *(_QWORD *)(v7 + 56) = v28;
  *(_QWORD *)(v7 + 64) = *(_QWORD *)(v8 + 64);
  *(_QWORD *)(v7 + 72) = *(_QWORD *)(v8 + 72);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v7 + 80) = *(_QWORD *)(v8 + 80);
  if (*(unsigned __int8 *)(v7 + 128) == 255)
  {
LABEL_19:
    v29 = *(_OWORD *)(v8 + 104);
    *(_OWORD *)(v7 + 88) = *(_OWORD *)(v8 + 88);
    *(_OWORD *)(v7 + 104) = v29;
    *(_OWORD *)(v7 + 113) = *(_OWORD *)(v8 + 113);
    goto LABEL_20;
  }
  if (*(unsigned __int8 *)(v8 + 128) == 255 || a1 != a2)
  {
    sub_21420D730(v7 + 88);
    goto LABEL_19;
  }
LABEL_20:
  v200 = v5;
  *(_OWORD *)(v7 + 136) = *(_OWORD *)(v8 + 136);
  *(_BYTE *)(v7 + 152) = *(_BYTE *)(v8 + 152);
  *(_QWORD *)(v7 + 160) = *(_QWORD *)(v8 + 160);
  *(_BYTE *)(v7 + 168) = *(_BYTE *)(v8 + 168);
  v30 = *(_OWORD *)(v8 + 192);
  *(_OWORD *)(v7 + 176) = *(_OWORD *)(v8 + 176);
  *(_OWORD *)(v7 + 192) = v30;
  *(_BYTE *)(v7 + 208) = *(_BYTE *)(v8 + 208);
  v31 = v9[11];
  v32 = (void *)(v7 + v31);
  v33 = (void *)(v8 + v31);
  v34 = sub_214424308();
  v35 = *(_QWORD *)(v34 - 8);
  v36 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v35 + 48);
  v197 = v32;
  LODWORD(v32) = v36(v32, 1, v34);
  v37 = v36(v33, 1, v34);
  if ((_DWORD)v32)
  {
    if (v37)
    {
      v38 = *(_QWORD *)(*(_QWORD *)(sub_2141D8BF8(&qword_253F134C8) - 8) + 64);
      v39 = v197;
LABEL_30:
      memcpy(v39, v33, v38);
      goto LABEL_33;
    }
    (*(void (**)(void *, void *, uint64_t))(v35 + 32))(v197, v33, v34);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v197, 0, 1, v34);
  }
  else
  {
    if (v37)
    {
      (*(void (**)(void *, uint64_t))(v35 + 8))(v197, v34);
      v38 = *(_QWORD *)(*(_QWORD *)(sub_2141D8BF8(&qword_253F134C8) - 8) + 64);
      v39 = v197;
      goto LABEL_30;
    }
    (*(void (**)(void *, void *, uint64_t))(v35 + 40))(v197, v33, v34);
  }
LABEL_33:
  v90 = v9[12];
  v91 = v7 + v90;
  v92 = v8 + v90;
  *(_QWORD *)v91 = *(_QWORD *)v92;
  *(_BYTE *)(v91 + 8) = *(_BYTE *)(v92 + 8);
  *(_QWORD *)(v7 + v9[13]) = *(_QWORD *)(v8 + v9[13]);
  v93 = v9[14];
  v94 = (void *)(v7 + v93);
  v95 = (void *)(v8 + v93);
  v96 = sub_214424C68();
  v97 = *(_QWORD *)(v96 - 8);
  v98 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v97 + 48);
  v198 = v94;
  LODWORD(v94) = v98(v94, 1, v96);
  v99 = v98(v95, 1, v96);
  if ((_DWORD)v94)
  {
    if (v99)
    {
      v100 = *(_QWORD *)(*(_QWORD *)(sub_2141D8BF8(&qword_253F15C88) - 8) + 64);
      v101 = v198;
LABEL_38:
      memcpy(v101, v95, v100);
      goto LABEL_41;
    }
    (*(void (**)(void *, void *, uint64_t))(v97 + 32))(v198, v95, v96);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v97 + 56))(v198, 0, 1, v96);
  }
  else
  {
    if (v99)
    {
      (*(void (**)(void *, uint64_t))(v97 + 8))(v198, v96);
      v100 = *(_QWORD *)(*(_QWORD *)(sub_2141D8BF8(&qword_253F15C88) - 8) + 64);
      v101 = v198;
      goto LABEL_38;
    }
    (*(void (**)(void *, void *, uint64_t))(v97 + 40))(v198, v95, v96);
  }
LABEL_41:
  v102 = v9[15];
  v103 = v7 + v102;
  v104 = v8 + v102;
  *(_QWORD *)(v7 + v102) = *(_QWORD *)(v8 + v102);
  swift_release();
  *(_BYTE *)(v103 + 8) = *(_BYTE *)(v104 + 8);
  *(_BYTE *)(v103 + 9) = *(_BYTE *)(v104 + 9);
  *(_QWORD *)(v7 + v9[16]) = *(_QWORD *)(v8 + v9[16]);
  *(_QWORD *)(v7 + v9[17]) = *(_QWORD *)(v8 + v9[17]);
  v105 = v9[18];
  v106 = v7 + v105;
  v107 = v8 + v105;
  if (*(_QWORD *)(v7 + v105 + 24))
  {
    if (*(_QWORD *)(v107 + 24))
    {
      v108 = *(_BYTE *)(v107 + 16);
      v109 = *(_QWORD *)v106;
      v110 = *(_QWORD *)(v106 + 8);
      v111 = *(_BYTE *)(v106 + 16);
      *(_OWORD *)v106 = *(_OWORD *)v107;
      *(_BYTE *)(v106 + 16) = v108;
      sub_2141ED0BC(v109, v110, v111);
      *(_QWORD *)(v106 + 24) = *(_QWORD *)(v107 + 24);
      swift_bridgeObjectRelease();
      v112 = *(_BYTE *)(v107 + 48);
      v113 = *(_QWORD *)(v106 + 32);
      v114 = *(_QWORD *)(v106 + 40);
      *(_OWORD *)(v106 + 32) = *(_OWORD *)(v107 + 32);
      v115 = *(_BYTE *)(v106 + 48);
      *(_BYTE *)(v106 + 48) = v112;
      sub_2141EF1B0(v113, v114, v115);
      *(_OWORD *)(v106 + 56) = *(_OWORD *)(v107 + 56);
      goto LABEL_46;
    }
    sub_21420D764(v106);
  }
  v116 = *(_OWORD *)(v107 + 48);
  *(_OWORD *)(v106 + 32) = *(_OWORD *)(v107 + 32);
  *(_OWORD *)(v106 + 48) = v116;
  *(_QWORD *)(v106 + 64) = *(_QWORD *)(v107 + 64);
  v117 = *(_OWORD *)(v107 + 16);
  *(_OWORD *)v106 = *(_OWORD *)v107;
  *(_OWORD *)(v106 + 16) = v117;
LABEL_46:
  v118 = v9[19];
  v119 = v7 + v118;
  v120 = v8 + v118;
  if (*(_QWORD *)(v7 + v118 + 24))
  {
    if (*(_QWORD *)(v120 + 24))
    {
      v121 = *(_BYTE *)(v120 + 16);
      v122 = *(_QWORD *)v119;
      v123 = *(_QWORD *)(v119 + 8);
      v124 = *(_BYTE *)(v119 + 16);
      *(_OWORD *)v119 = *(_OWORD *)v120;
      *(_BYTE *)(v119 + 16) = v121;
      sub_2141ED0BC(v122, v123, v124);
      *(_QWORD *)(v119 + 24) = *(_QWORD *)(v120 + 24);
      swift_bridgeObjectRelease();
      v125 = *(_BYTE *)(v120 + 48);
      v126 = *(_QWORD *)(v119 + 32);
      v127 = *(_QWORD *)(v119 + 40);
      *(_OWORD *)(v119 + 32) = *(_OWORD *)(v120 + 32);
      v128 = *(_BYTE *)(v119 + 48);
      *(_BYTE *)(v119 + 48) = v125;
      sub_2141EF1B0(v126, v127, v128);
      *(_OWORD *)(v119 + 56) = *(_OWORD *)(v120 + 56);
      goto LABEL_51;
    }
    sub_21420D764(v119);
  }
  v129 = *(_OWORD *)(v120 + 48);
  *(_OWORD *)(v119 + 32) = *(_OWORD *)(v120 + 32);
  *(_OWORD *)(v119 + 48) = v129;
  *(_QWORD *)(v119 + 64) = *(_QWORD *)(v120 + 64);
  v130 = *(_OWORD *)(v120 + 16);
  *(_OWORD *)v119 = *(_OWORD *)v120;
  *(_OWORD *)(v119 + 16) = v130;
LABEL_51:
  v131 = v9[20];
  v132 = v7 + v131;
  v133 = v8 + v131;
  if (*(_QWORD *)(v7 + v131 + 24))
  {
    if (*(_QWORD *)(v133 + 24))
    {
      v134 = *(_BYTE *)(v133 + 16);
      v135 = *(_QWORD *)v132;
      v136 = *(_QWORD *)(v132 + 8);
      v137 = *(_BYTE *)(v132 + 16);
      *(_OWORD *)v132 = *(_OWORD *)v133;
      *(_BYTE *)(v132 + 16) = v134;
      sub_2141ED0BC(v135, v136, v137);
      *(_QWORD *)(v132 + 24) = *(_QWORD *)(v133 + 24);
      swift_bridgeObjectRelease();
      v138 = *(_BYTE *)(v133 + 48);
      v139 = *(_QWORD *)(v132 + 32);
      v140 = *(_QWORD *)(v132 + 40);
      *(_OWORD *)(v132 + 32) = *(_OWORD *)(v133 + 32);
      v141 = *(_BYTE *)(v132 + 48);
      *(_BYTE *)(v132 + 48) = v138;
      sub_2141EF1B0(v139, v140, v141);
      *(_OWORD *)(v132 + 56) = *(_OWORD *)(v133 + 56);
      goto LABEL_56;
    }
    sub_21420D764(v132);
  }
  v142 = *(_OWORD *)(v133 + 48);
  *(_OWORD *)(v132 + 32) = *(_OWORD *)(v133 + 32);
  *(_OWORD *)(v132 + 48) = v142;
  *(_QWORD *)(v132 + 64) = *(_QWORD *)(v133 + 64);
  v143 = *(_OWORD *)(v133 + 16);
  *(_OWORD *)v132 = *(_OWORD *)v133;
  *(_OWORD *)(v132 + 16) = v143;
LABEL_56:
  v144 = v9[21];
  v145 = v7 + v144;
  v146 = v8 + v144;
  if (*(_QWORD *)(v7 + v144 + 24))
  {
    if (*(_QWORD *)(v146 + 24))
    {
      v147 = *(_BYTE *)(v146 + 16);
      v148 = *(_QWORD *)v145;
      v149 = *(_QWORD *)(v145 + 8);
      v150 = *(_BYTE *)(v145 + 16);
      *(_OWORD *)v145 = *(_OWORD *)v146;
      *(_BYTE *)(v145 + 16) = v147;
      sub_2141ED0BC(v148, v149, v150);
      *(_QWORD *)(v145 + 24) = *(_QWORD *)(v146 + 24);
      swift_bridgeObjectRelease();
      v151 = *(_BYTE *)(v146 + 48);
      v152 = *(_QWORD *)(v145 + 32);
      v153 = *(_QWORD *)(v145 + 40);
      *(_OWORD *)(v145 + 32) = *(_OWORD *)(v146 + 32);
      v154 = *(_BYTE *)(v145 + 48);
      *(_BYTE *)(v145 + 48) = v151;
      sub_2141EF1B0(v152, v153, v154);
      *(_OWORD *)(v145 + 56) = *(_OWORD *)(v146 + 56);
      goto LABEL_61;
    }
    sub_21420D764(v145);
  }
  v155 = *(_OWORD *)(v146 + 48);
  *(_OWORD *)(v145 + 32) = *(_OWORD *)(v146 + 32);
  *(_OWORD *)(v145 + 48) = v155;
  *(_QWORD *)(v145 + 64) = *(_QWORD *)(v146 + 64);
  v156 = *(_OWORD *)(v146 + 16);
  *(_OWORD *)v145 = *(_OWORD *)v146;
  *(_OWORD *)(v145 + 16) = v156;
LABEL_61:
  v157 = v9[22];
  v158 = v7 + v157;
  v159 = v8 + v157;
  *(_OWORD *)v158 = *(_OWORD *)v159;
  *(_QWORD *)(v158 + 16) = *(_QWORD *)(v159 + 16);
  v160 = v9[23];
  v161 = v7 + v160;
  v162 = v8 + v160;
  *(_OWORD *)v161 = *(_OWORD *)v162;
  *(_QWORD *)(v161 + 16) = *(_QWORD *)(v162 + 16);
  v163 = v9[24];
  v164 = v7 + v163;
  v165 = v8 + v163;
  v5 = v200;
  if (*(_QWORD *)(v7 + v163 + 24))
  {
    if (*(_QWORD *)(v165 + 24))
    {
      v166 = *(_BYTE *)(v165 + 16);
      v167 = *(_QWORD *)v164;
      v168 = *(_QWORD *)(v164 + 8);
      v169 = *(_BYTE *)(v164 + 16);
      *(_OWORD *)v164 = *(_OWORD *)v165;
      *(_BYTE *)(v164 + 16) = v166;
      sub_2141ED0BC(v167, v168, v169);
      *(_QWORD *)(v164 + 24) = *(_QWORD *)(v165 + 24);
      swift_bridgeObjectRelease();
      goto LABEL_66;
    }
    sub_21420D798(v164);
  }
  v170 = *(_OWORD *)(v165 + 16);
  *(_OWORD *)v164 = *(_OWORD *)v165;
  *(_OWORD *)(v164 + 16) = v170;
LABEL_66:
  v171 = v9[25];
  v172 = v7 + v171;
  v173 = v8 + v171;
  if (!*(_QWORD *)(v7 + v171 + 24))
  {
LABEL_70:
    v178 = *(_OWORD *)(v173 + 16);
    *(_OWORD *)v172 = *(_OWORD *)v173;
    *(_OWORD *)(v172 + 16) = v178;
    goto LABEL_71;
  }
  if (!*(_QWORD *)(v173 + 24))
  {
    sub_21420D798(v172);
    goto LABEL_70;
  }
  v174 = *(_BYTE *)(v173 + 16);
  v175 = *(_QWORD *)v172;
  v176 = *(_QWORD *)(v172 + 8);
  v177 = *(_BYTE *)(v172 + 16);
  *(_OWORD *)v172 = *(_OWORD *)v173;
  *(_BYTE *)(v172 + 16) = v174;
  sub_2141ED0BC(v175, v176, v177);
  *(_QWORD *)(v172 + 24) = *(_QWORD *)(v173 + 24);
  swift_bridgeObjectRelease();
LABEL_71:
  v179 = v9[26];
  v180 = (_QWORD *)(v7 + v179);
  v181 = (uint64_t *)(v8 + v179);
  v183 = *v181;
  v182 = v181[1];
  *v180 = v183;
  v180[1] = v182;
  swift_bridgeObjectRelease();
  v184 = v9[27];
  v185 = v7 + v184;
  v186 = v8 + v184;
  if (*(_QWORD *)(v185 + 24))
  {
    if (*(_QWORD *)(v186 + 24))
      _s6Charts15AnyChartContentVwxx_0(v185);
    else
      sub_21420D92C(v185);
  }
  v187 = *(_OWORD *)(v186 + 16);
  *(_OWORD *)v185 = *(_OWORD *)v186;
  *(_OWORD *)(v185 + 16) = v187;
LABEL_76:
  v188 = v5[9];
  v189 = a1 + v188;
  v190 = a2 + v188;
  v191 = *(_OWORD *)(v190 + 16);
  *(_OWORD *)v189 = *(_OWORD *)v190;
  *(_OWORD *)(v189 + 16) = v191;
  *(_BYTE *)(v189 + 32) = *(_BYTE *)(v190 + 32);
  v192 = v5[10];
  v193 = a1 + v192;
  v194 = a2 + v192;
  v195 = sub_214424308();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v195 - 8) + 40))(v193, v194, v195);
  return a1;
}

uint64_t sub_214297490()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21429749C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for RectanglesRenderer(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_2142974D8()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_2142974E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for RectanglesRenderer(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for VectorizedRectanglePlotContent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2141D8E88(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for VectorizedRectanglePlotContent);
}

uint64_t sub_214297530(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

void static AxisValueLabelCollisionResolution.automatic.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 18) = 1;
}

void static AxisValueLabelOrientation.automatic.getter(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

__n128 AxisValueLabel.init<>(centered:anchor:multiLabelAlignment:collisionResolution:offsetsMarks:orientation:horizontalSpacing:verticalSpacing:)@<Q0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, __n128 *a8@<X7>, uint64_t a9@<X8>, char a10, char *a11, uint64_t a12, char a13, uint64_t a14, char a15)
{
  unsigned __int16 v15;
  char v16;
  __n128 result;
  unsigned __int8 v18;

  v15 = a8[1].n128_u16[0];
  v16 = *a11;
  v18 = a8[1].n128_u8[2];
  *(_BYTE *)a9 = a1;
  *(_QWORD *)(a9 + 8) = a2;
  *(_QWORD *)(a9 + 16) = a3;
  *(_BYTE *)(a9 + 24) = a4 & 1;
  *(_QWORD *)(a9 + 32) = a5;
  *(_QWORD *)(a9 + 40) = a6;
  *(_BYTE *)(a9 + 48) = a7 & 1;
  result = *a8;
  *(__n128 *)(a9 + 56) = *a8;
  *(_WORD *)(a9 + 72) = v15;
  *(_BYTE *)(a9 + 74) = v18;
  *(_BYTE *)(a9 + 75) = a10;
  *(_BYTE *)(a9 + 76) = v16;
  *(_QWORD *)(a9 + 80) = a12;
  *(_BYTE *)(a9 + 88) = a13 & 1;
  *(_QWORD *)(a9 + 96) = a14;
  *(_BYTE *)(a9 + 104) = a15 & 1;
  *(_QWORD *)(a9 + 112) = 0;
  *(_QWORD *)(a9 + 120) = 0;
  *(_BYTE *)(a9 + 128) = 2;
  return result;
}

uint64_t AxisValueLabel.init(centered:anchor:multiLabelAlignment:collisionResolution:offsetsMarks:orientation:horizontalSpacing:verticalSpacing:content:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, char a10, char *a11, uint64_t a12, char a13, uint64_t a14, char a15, void (*a16)(void), uint64_t a17, uint64_t a18, uint64_t a19)
{
  __int16 v19;
  char v20;
  char v21;
  uint64_t v22;

  v19 = *(_WORD *)(a8 + 16);
  v20 = *(_BYTE *)(a8 + 18);
  v21 = *a11;
  *(_BYTE *)a9 = a1;
  *(_QWORD *)(a9 + 8) = a2;
  *(_QWORD *)(a9 + 16) = a3;
  *(_BYTE *)(a9 + 24) = a4 & 1;
  *(_QWORD *)(a9 + 32) = a5;
  *(_QWORD *)(a9 + 40) = a6;
  *(_BYTE *)(a9 + 48) = a7 & 1;
  *(_OWORD *)(a9 + 56) = *(_OWORD *)a8;
  *(_WORD *)(a9 + 72) = v19;
  *(_BYTE *)(a9 + 74) = v20;
  *(_BYTE *)(a9 + 75) = a10;
  *(_BYTE *)(a9 + 76) = v21;
  *(_QWORD *)(a9 + 80) = a12;
  *(_BYTE *)(a9 + 88) = a13 & 1;
  *(_QWORD *)(a9 + 96) = a14;
  *(_BYTE *)(a9 + 104) = a15 & 1;
  type metadata accessor for AxisValueLabel(0, a18, a19, a4);
  a16();
  type metadata accessor for AxisValueLabel.LabelContent(0, a18, a19, v22);
  return swift_storeEnumTagMultiPayload();
}

uint64_t type metadata accessor for AxisValueLabel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2141D8E88(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AxisValueLabel);
}

uint64_t type metadata accessor for AxisValueLabel.LabelContent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2141D8E88(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AxisValueLabel.LabelContent);
}

uint64_t AxisValueLabel.init<>(_:centered:anchor:multiLabelAlignment:collisionResolution:offsetsMarks:orientation:horizontalSpacing:verticalSpacing:)@<X0>(char a1@<W4>, uint64_t a2@<X5>, uint64_t a3@<X6>, char a4@<W7>, uint64_t a5@<X8>, uint64_t a6, uint64_t a7, char a8, uint64_t *a9, char a10, char *a11, uint64_t a12, char a13, uint64_t a14, char a15)
{
  uint64_t v17;
  uint64_t v18;
  __int16 v19;
  char v20;
  char v21;
  uint64_t result;
  char v23;
  uint64_t v24;
  uint64_t v25;

  v17 = *a9;
  v18 = a9[1];
  v19 = *((_WORD *)a9 + 8);
  v20 = *((_BYTE *)a9 + 18);
  v21 = *a11;
  result = sub_21442480C();
  *(_BYTE *)a5 = a1;
  *(_QWORD *)(a5 + 8) = a2;
  *(_QWORD *)(a5 + 16) = a3;
  *(_BYTE *)(a5 + 24) = a4 & 1;
  *(_QWORD *)(a5 + 32) = a6;
  *(_QWORD *)(a5 + 40) = a7;
  *(_BYTE *)(a5 + 48) = a8 & 1;
  *(_QWORD *)(a5 + 56) = v17;
  *(_QWORD *)(a5 + 64) = v18;
  *(_WORD *)(a5 + 72) = v19;
  *(_BYTE *)(a5 + 74) = v20;
  *(_BYTE *)(a5 + 75) = a10;
  *(_BYTE *)(a5 + 76) = v21;
  *(_QWORD *)(a5 + 80) = a12;
  *(_BYTE *)(a5 + 88) = a13 & 1;
  *(_QWORD *)(a5 + 96) = a14;
  *(_BYTE *)(a5 + 104) = a15 & 1;
  *(_QWORD *)(a5 + 112) = result;
  *(_QWORD *)(a5 + 120) = v24;
  *(_QWORD *)(a5 + 128) = v23 & 1;
  *(_QWORD *)(a5 + 136) = v25;
  *(_BYTE *)(a5 + 144) = 1;
  return result;
}

uint64_t AxisValueLabel.init<A>(_:centered:anchor:multiLabelAlignment:collisionResolution:offsetsMarks:orientation:horizontalSpacing:verticalSpacing:)@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, int a8@<W7>, uint64_t a9@<X8>, uint64_t a10, unsigned __int8 a11, uint64_t a12, uint64_t a13, unsigned __int8 a14, uint64_t a15, unsigned __int8 a16, uint64_t a17)
{
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  char v23;
  unsigned __int8 *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t result;
  char v33;
  char v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;

  v44 = a5;
  v45 = a8;
  v51 = a6;
  v52 = a7;
  v47 = a3;
  v48 = a4;
  v46 = a2;
  v53 = a15;
  v50 = a11;
  v42 = a14;
  v43 = a16;
  v49 = a13;
  v19 = *(_QWORD *)(a17 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v22 = *v21;
  v40 = v21[1];
  v39 = *((unsigned __int16 *)v21 + 8);
  v23 = *((_BYTE *)v21 + 18);
  v41 = *v24;
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))((char *)&v38 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a17);
  v25 = sub_214424818();
  v27 = v26;
  v29 = v28;
  v31 = v30 & 1;
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 8))(a1, a17);
  v33 = v44 & 1;
  v34 = v45 & 1;
  v35 = v42 & 1;
  v54 = v43 & 1;
  *(_BYTE *)a9 = v46;
  *(_QWORD *)(a9 + 8) = v47;
  *(_QWORD *)(a9 + 16) = v48;
  *(_BYTE *)(a9 + 24) = v33;
  v36 = v52;
  *(_QWORD *)(a9 + 32) = v51;
  *(_QWORD *)(a9 + 40) = v36;
  *(_BYTE *)(a9 + 48) = v34;
  v37 = v40;
  *(_QWORD *)(a9 + 56) = v22;
  *(_QWORD *)(a9 + 64) = v37;
  *(_WORD *)(a9 + 72) = v39;
  *(_BYTE *)(a9 + 74) = v23;
  *(_BYTE *)(a9 + 75) = v50;
  *(_BYTE *)(a9 + 76) = v41;
  *(_QWORD *)(a9 + 80) = v49;
  *(_BYTE *)(a9 + 88) = v35;
  *(_QWORD *)(a9 + 96) = v53;
  *(_BYTE *)(a9 + 104) = v54;
  *(_QWORD *)(a9 + 112) = v25;
  *(_QWORD *)(a9 + 120) = v27;
  *(_QWORD *)(a9 + 128) = v31;
  *(_QWORD *)(a9 + 136) = v29;
  *(_BYTE *)(a9 + 144) = 1;
  return result;
}

uint64_t AxisValueLabel.init<A>(format:centered:anchor:multiLabelAlignment:collisionResolution:offsetsMarks:orientation:horizontalSpacing:verticalSpacing:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, uint64_t *a10, char a11, char *a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  char v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t result;
  __int16 v26;
  uint64_t v27;
  uint64_t v28;
  char v30;

  v27 = a10[1];
  v28 = *a10;
  v26 = *((_WORD *)a10 + 8);
  v21 = *((_BYTE *)a10 + 18);
  v30 = *a12;
  v22 = *(_QWORD *)(a17 - 8);
  v23 = (*(unsigned __int8 *)(v22 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  v24 = (char *)swift_allocObject();
  *((_QWORD *)v24 + 2) = a17;
  *((_QWORD *)v24 + 3) = a18;
  *((_QWORD *)v24 + 4) = a19;
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 32))(&v24[v23], a1, a17);
  *(_BYTE *)a9 = a2;
  *(_QWORD *)(a9 + 8) = a3;
  *(_QWORD *)(a9 + 16) = a4;
  *(_BYTE *)(a9 + 24) = a5 & 1;
  *(_QWORD *)(a9 + 32) = a6;
  *(_QWORD *)(a9 + 40) = a7;
  *(_BYTE *)(a9 + 48) = a8 & 1;
  *(_QWORD *)(a9 + 56) = v28;
  *(_QWORD *)(a9 + 64) = v27;
  *(_WORD *)(a9 + 72) = v26;
  *(_BYTE *)(a9 + 74) = v21;
  *(_BYTE *)(a9 + 75) = a11;
  *(_BYTE *)(a9 + 76) = v30;
  *(_QWORD *)(a9 + 80) = a13;
  *(_BYTE *)(a9 + 88) = a14 & 1;
  *(_QWORD *)(a9 + 96) = a15;
  *(_BYTE *)(a9 + 104) = a16 & 1;
  *(_QWORD *)(a9 + 112) = sub_214297D7C;
  *(_QWORD *)(a9 + 120) = v24;
  *(_BYTE *)(a9 + 128) = 0;
  return result;
}

uint64_t sub_214297BA0(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  _QWORD v21[5];

  v21[1] = a4;
  v21[2] = a5;
  v21[3] = a6;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v12 = sub_214425388();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)v21 - v15;
  v17 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](v14);
  v19 = (char *)v21 - v18;
  sub_2141DD14C(a1, a2, a3);
  sub_2143F9FE4(a1, a2, a3, AssociatedTypeWitness, a7, (uint64_t)v16);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v16, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
    return 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v19, v16, AssociatedTypeWitness);
    sub_2144238C4();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v19, AssociatedTypeWitness);
    return v21[4];
  }
}

uint64_t sub_214297D24()
{
  uint64_t v0;

  (*(void (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 80)));
  return swift_deallocObject();
}

uint64_t sub_214297D7C(uint64_t a1, uint64_t a2, int a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v4 = v3[2];
  v5 = *(unsigned __int8 *)(*(_QWORD *)(v4 - 8) + 80);
  return sub_214297BA0(a1, a2, a3, (uint64_t)v3 + ((v5 + 40) & ~v5), v4, v3[3], v3[4]);
}

uint64_t sub_214297D9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X8>)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int EnumCaseMultiPayload;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t result;
  uint64_t (*v30)(uint64_t, uint64_t, uint64_t);
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  char v37;
  unint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  char v47;
  uint64_t v48;
  _QWORD v49[2];
  uint64_t v50;
  unint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  unsigned __int8 v57;
  __n128 v58;
  __int128 v59;
  unint64_t v60;
  char v61;

  v51 = a4;
  v52 = a2;
  v7 = *(_QWORD *)(a3 + 16);
  v50 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v9 = (char *)v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(uint64_t **)(v10 + 24);
  v13 = type metadata accessor for AxisValueLabel.LabelContent(0, v7, (uint64_t)v11, v12);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)v49 - v14;
  v16 = *(_QWORD *)a1;
  v17 = *(_QWORD *)(a1 + 8);
  v18 = *(unsigned __int8 *)(a1 + 16);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))((char *)v49 - v14, v4 + *(int *)(a3 + 64), v13);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    v30 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))v15;
    v50 = *((_QWORD *)v15 + 1);
    v58.n128_u64[0] = v30(v16, v17, v18);
    v58.n128_u64[1] = v31;
    sub_2141DCE8C();
    v32 = sub_214424818();
    v34 = v33;
    v49[1] = v35;
    v53 = v32;
    v54 = v33;
    v37 = v36 & 1;
    v55 = v36 & 1;
    v56 = v35;
    sub_2142980C8((uint64_t)&v53, v52, MEMORY[0x24BDF1FA8], MEMORY[0x24BDF1F80], &v58);
    v25 = v58.n128_u64[1];
    v24 = v58.n128_u64[0];
    v26 = *((_QWORD *)&v59 + 1);
    v27 = v59;
    v28 = v60;
    swift_release();
    sub_2141ED0BC(v32, v34, v37);
    result = swift_bridgeObjectRelease();
    goto LABEL_5;
  }
  v21 = v52;
  if (EnumCaseMultiPayload == 1)
  {
    v22 = v50;
    (*(void (**)(char *, char *, uint64_t))(v50 + 32))(v9, v15, v7);
    v23 = sub_2142980C8((uint64_t)v9, v21, v7, v11, &v58);
    v25 = v58.n128_u64[1];
    v24 = v58.n128_u64[0];
    v26 = *((_QWORD *)&v59 + 1);
    v27 = v59;
    v28 = v60;
    result = (*(uint64_t (**)(char *, uint64_t, __n128))(v22 + 8))(v9, v7, v23);
LABEL_5:
    v38 = v51;
    goto LABEL_10;
  }
  swift_beginAccess();
  sub_2141E070C(v21 + 72, (uint64_t)&v53, &qword_253F146B8);
  if (v57 == 255)
  {
    v60 = 0;
    v58 = 0u;
    v59 = 0u;
    v61 = 3;
    sub_2141E0750((uint64_t)&v53, &qword_253F146B8);
  }
  else
  {
    sub_21422F3C0((uint64_t)&v53, (uint64_t)&v58);
  }
  v39 = v16;
  v38 = v51;
  v40 = sub_2143F486C(v39, v17, v18);
  v42 = v41;
  sub_21422F27C((uint64_t)&v58);
  v58.n128_u64[0] = v40;
  v58.n128_u64[1] = v42;
  sub_2141DCE8C();
  v43 = sub_214424818();
  v45 = v44;
  v53 = v43;
  v54 = v44;
  v47 = v46 & 1;
  v55 = v46 & 1;
  v56 = v48;
  sub_2142980C8((uint64_t)&v53, v52, MEMORY[0x24BDF1FA8], MEMORY[0x24BDF1F80], &v58);
  v25 = v58.n128_u64[1];
  v24 = v58.n128_u64[0];
  v26 = *((_QWORD *)&v59 + 1);
  v27 = v59;
  v28 = v60;
  sub_2141ED0BC(v43, v45, v47);
  result = swift_bridgeObjectRelease();
LABEL_10:
  *v38 = v24;
  v38[1] = v25;
  v38[2] = v27;
  v38[3] = v26;
  v38[4] = v28;
  return result;
}

__n128 sub_2142980C8@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t *a4@<X5>, __n128 *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  __n128 result;
  __n128 v20;
  _BYTE v21[24];
  __n128 v22[2];
  unint64_t v23;

  v10 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v12 = &v21[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = (uint64_t *)(v13 + 32);
  swift_beginAccess();
  if (*(_QWORD *)(a2 + 40))
  {
    v15 = *v14;
    if (v15)
    {
LABEL_3:
      (*(void (**)(_BYTE *, uint64_t, uint64_t))(v10 + 16))(v12, a1, a3);
      swift_retain();
      swift_retain();
      sub_2142ED198((uint64_t)v12, v15, a3, a4, (uint64_t *)v22);
      goto LABEL_10;
    }
  }
  else
  {
    if (qword_253F10C00 != -1)
      swift_once();
    swift_retain();
    v15 = *v14;
    if (v15)
      goto LABEL_3;
  }
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v10 + 16))(v12, a1, a3);
  v16 = qword_253F10C08;
  swift_retain();
  if (v16 != -1)
    swift_once();
  v17 = qword_253F1C938;
  swift_retain();
  sub_2142ED48C((uint64_t)v12, v17, a3, (uint64_t)a4, (uint64_t *)v22);
LABEL_10:
  v18 = v23;
  result = v22[0];
  v20 = v22[1];
  *a5 = v22[0];
  a5[1] = v20;
  a5[2].n128_u64[0] = v18;
  return result;
}

uint64_t sub_214298280(char a1, char a2, unsigned int a3, double a4)
{
  uint64_t v4;
  uint64_t result;
  int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;

  if ((*(_BYTE *)(v4 + 24) & 1) != 0 || (result = sub_21429834C(), result == 3))
  {
    if (a2)
    {
      if ((a1 & 1) != 0)
        v10 = 1;
      else
        v10 = 2 * (a4 <= 0.0);
      if (a3 == 2)
        v11 = 0;
      else
        v11 = 2;
      if (a3 < 2u)
        v11 = v10;
      if (a2 == 1)
        return 0x20101u >> (8 * a3);
      else
        return v11;
    }
    else
    {
      if ((a1 & 1) != 0)
        v12 = 1;
      else
        v12 = 2 * (a4 <= 0.0);
      if (a3 == 2)
        v13 = a3;
      else
        v13 = 0;
      if (a3 >= 2u)
        return v13;
      else
        return v12;
    }
  }
  return result;
}

uint64_t sub_21429834C()
{
  sub_214424CEC();
  if ((sub_214424CBC() & 1) != 0)
    return 0;
  sub_214424C8C();
  if ((sub_214424CBC() & 1) != 0)
    return 0;
  sub_214424CA4();
  if ((sub_214424CBC() & 1) != 0)
    return 0;
  sub_214424CF8();
  if ((sub_214424CBC() & 1) != 0)
    return 2;
  sub_214424C98();
  if ((sub_214424CBC() & 1) != 0)
    return 2;
  sub_214424CB0();
  if ((sub_214424CBC() & 1) != 0)
    return 2;
  sub_214424CC8();
  if ((sub_214424CBC() & 1) != 0)
    return 1;
  sub_214424CD4();
  if ((sub_214424CBC() & 1) != 0)
    return 1;
  sub_2143836AC(4);
  return 3;
}

uint64_t sub_214298430(char a1, char a2, unsigned int a3, double a4)
{
  uint64_t v4;
  uint64_t result;
  int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;

  if ((*(_BYTE *)(v4 + 24) & 1) != 0 || (result = sub_214298510(), result == 3))
  {
    if (a2)
    {
      if ((a1 & 1) != 0)
        v10 = 1;
      else
        v10 = 2 * (a4 <= 0.0);
      if ((_BYTE)a3)
        v11 = 2;
      else
        v11 = a3;
      if (a3 - 2 < 2)
        v11 = v10;
      if (a2 == 1)
        return 0x1010002u >> (8 * a3);
      else
        return v11;
    }
    else
    {
      if ((a1 & 1) != 0)
        v12 = 1;
      else
        v12 = 2 * (a4 <= 0.0);
      if ((_BYTE)a3)
        v13 = 0;
      else
        v13 = 2;
      if (a3 - 2 >= 2)
        return v13;
      else
        return v12;
    }
  }
  return result;
}

uint64_t sub_214298510()
{
  sub_214424CC8();
  if ((sub_214424CBC() & 1) != 0)
    return 0;
  sub_214424C8C();
  if ((sub_214424CBC() & 1) != 0)
    return 0;
  sub_214424C98();
  if ((sub_214424CBC() & 1) != 0)
    return 0;
  sub_214424CD4();
  if ((sub_214424CBC() & 1) != 0)
    return 2;
  sub_214424CA4();
  if ((sub_214424CBC() & 1) != 0)
    return 2;
  sub_214424CB0();
  if ((sub_214424CBC() & 1) != 0)
    return 2;
  sub_214424CEC();
  if ((sub_214424CBC() & 1) != 0)
    return 1;
  sub_214424CF8();
  if ((sub_214424CBC() & 1) != 0)
    return 1;
  sub_2143836AC(4);
  return 3;
}

uint64_t sub_2142985F4(char a1, unsigned __int8 a2)
{
  uint64_t v2;

  if (*(_BYTE *)(v2 + 48) != 1)
    return *(_QWORD *)(v2 + 32);
  if (a1 || a2 < 2u)
    return 0;
  if (a2 == 2)
    return sub_214424C50();
  return sub_214424C5C();
}

double sub_21429865C(unsigned __int8 a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t *v3;
  double v4;

  if (a1 <= 1u)
  {
    if ((*(_BYTE *)(v1 + 88) & 1) != 0)
    {
      if (qword_253F10C10 != -1)
        swift_once();
      v2 = &qword_253F1C918;
    }
    else
    {
      v2 = (uint64_t *)(v1 + 80);
    }
    v4 = *(double *)v2;
    if ((*(_BYTE *)(v1 + 104) & 1) == 0 || qword_253F10458 == -1)
      return v4;
LABEL_18:
    swift_once();
    return v4;
  }
  if ((*(_BYTE *)(v1 + 88) & 1) != 0)
  {
    if (qword_253F10458 != -1)
      swift_once();
    v3 = &qword_253F1C8A0;
  }
  else
  {
    v3 = (uint64_t *)(v1 + 80);
  }
  v4 = *(double *)v3;
  if ((*(_BYTE *)(v1 + 104) & 1) != 0 && qword_253F10C10 != -1)
    goto LABEL_18;
  return v4;
}

uint64_t static AxisValueLabel._layoutAxisMark(_:_:)(unsigned __int8 *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t *v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  unsigned __int8 v38;
  uint64_t v39;
  double v40;
  double v41;
  double v42;
  uint64_t KeyPath;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t *v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  unsigned int v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  uint64_t v60;
  char isUniquelyReferenced_nonNull_native;
  int v62;
  double v63;
  double v64;
  double v65;
  unsigned int v66;
  double v67;
  _QWORD v68[2];
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t *v72;
  int v73;
  uint64_t v74;
  unsigned int v75;
  int v76;
  uint64_t v77;
  char v78;
  char v79;
  char v80;
  uint64_t v81[5];
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;

  v71 = sub_2141D8BF8(&qword_253F12228);
  MEMORY[0x24BDAC7A8](v71);
  v9 = (_QWORD *)((char *)v68 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v70 = sub_2141D8BF8(&qword_253F12220);
  result = MEMORY[0x24BDAC7A8](v70);
  v72 = (_QWORD *)((char *)v68 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = *a2;
  v13 = *(_QWORD *)(v12 + 160);
  if (*(_BYTE *)(v12 + 160) == 0xFF)
  {
    __break(1u);
    return result;
  }
  v15 = *(_QWORD *)(v12 + 168);
  v14 = *(_QWORD *)(v12 + 176);
  v17 = *(_QWORD *)(v12 + 152);
  v82 = *(_QWORD *)(v12 + 144);
  v16 = v82;
  v83 = v17;
  LOBYTE(v84) = v13;
  v85 = v15;
  v86 = v14;
  swift_retain();
  sub_21424CB94(v16, v17, v13);
  v19 = type metadata accessor for AxisValueLabel(0, a3, a4, v18);
  sub_214297D9C((uint64_t)&v82, v12, v19, (unint64_t *)v81);
  v20 = v81[0];
  sub_21424C914(v16, v17, v13);
  v21 = *(unsigned __int8 *)(v12 + 24);
  v22 = *a1;
  if (v22 != 2)
  {
    v23 = v22 & 1;
LABEL_9:
    v73 = v23;
    goto LABEL_10;
  }
  if (*(unsigned __int8 *)(v12 + 136) >= 2u)
  {
    v23 = v21 != 2 || (*(_BYTE *)(v12 + 64) & 0xFE) != 2;
    goto LABEL_9;
  }
  v73 = 0;
LABEL_10:
  v24 = v21 == 2;
  if (a1[75] != 2)
    v24 = a1[75];
  v76 = v24;
  v25 = 9u >> (a1[76] & 0xF);
  v26 = *(_QWORD *)(v12 + 120);
  v27 = *(_QWORD *)(*(_QWORD *)(v12 + 16) + 24);
  swift_retain();
  v28 = sub_214424134();
  v75 = v25;
  if ((v25 & 1) != 0)
    v32 = v28;
  else
    v32 = v30;
  if ((v25 & 1) != 0)
    v33 = v29 & 1;
  else
    v33 = v31 & 1;
  if ((v25 & 1) != 0)
    v34 = v30;
  else
    v34 = v28;
  v74 = v34;
  if ((v25 & 1) != 0)
    v35 = v31 & 1;
  else
    v35 = v29 & 1;
  sub_2141ECF88((uint64_t)v81, (uint64_t)&v82);
  if (v84 < 0)
  {
    v84 &= ~0x8000000000000000;
    v69 = v82;
    KeyPath = swift_getKeyPath();
    v68[1] = v20;
    v44 = v26 + OBJC_IVAR____TtC6Charts14SgMeasurements__dynamicTypeSize;
    swift_beginAccess();
    v45 = *(int *)(v71 + 28);
    v71 = v27;
    v46 = (char *)v9 + v45;
    v47 = sub_214423F24();
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 16))(v46, v44, v47);
    *v9 = KeyPath;
    v48 = v72;
    sub_2141E070C((uint64_t)v9, (uint64_t)v72 + *(int *)(v70 + 36), &qword_253F12228);
    *v48 = v69;
    swift_retain();
    sub_2141E0750((uint64_t)v9, &qword_253F12228);
    v79 = v33;
    v78 = v35;
    v40 = sub_214299CE4((uint64_t)v48, v71, v32, v33, v74, v35);
    v42 = v49;
    sub_2141E0750((uint64_t)v48, &qword_253F12220);
    swift_release();
  }
  else
  {
    v36 = v82;
    v37 = v83;
    v38 = v84 & 1;
    v39 = v85;
    sub_2141DD130(v82, v83, v84 & 1);
    swift_bridgeObjectRetain();
    v80 = v33;
    v79 = v35;
    v40 = sub_2143C87D0(v36, v37, v38, v39);
    v42 = v41;
    sub_2141ED0BC(v36, v37, v38);
    swift_release();
    swift_bridgeObjectRelease();
  }
  if ((v75 & 1) != 0)
    v50 = v42;
  else
    v50 = v40;
  if ((v75 & 1) != 0)
    v51 = v40;
  else
    v51 = v42;
  swift_beginAccess();
  v52 = *(double *)(v12 + 192);
  v53 = *(double *)(v12 + 200);
  if (v52 <= v51)
    v52 = v51;
  if (v53 <= v50)
    v53 = v50;
  *(double *)(v12 + 192) = v52;
  *(double *)(v12 + 200) = v53;
  if (*(unsigned __int8 *)(v12 + 24) <= 1u)
  {
    v54 = *(unsigned __int8 *)(v12 + 64);
    v55 = sub_21429865C(*(_BYTE *)(v12 + 64));
    if (v54 >= 2)
      v57 = v51;
    else
      v57 = v50;
    if (v54 < 2)
      v55 = v56;
    v58 = v57 + v55;
    if (*(double *)(v12 + 208) > v57 + v55)
      v59 = *(double *)(v12 + 208);
    else
      v59 = v57 + v55;
    swift_beginAccess();
    *(double *)(v12 + 208) = v59;
    v60 = *(_QWORD *)(v12 + 128);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v77 = *(_QWORD *)(v12 + 216);
    *(_QWORD *)(v12 + 216) = 0x8000000000000000;
    sub_2142A3B54(v60, isUniquelyReferenced_nonNull_native, v58);
    *(_QWORD *)(v12 + 216) = v77;
    swift_bridgeObjectRelease();
    swift_endAccess();
  }
  if ((v76 & 1) != 0 && (v73 & 1) == 0)
  {
    v62 = *(unsigned __int8 *)(v12 + 64);
    if (*(_BYTE *)(v12 + 64) && v62 != 1)
      v51 = v50;
    v63 = sub_21429865C(v62);
    v65 = v64;
    sub_21429A05C(v81);
    v66 = *(unsigned __int8 *)(v12 + 64);
    result = swift_release();
    if (v66 <= 1)
      v65 = v63;
    v67 = v51 + v65;
    if (*(double *)(v12 + 232) > v51 + v65)
      v67 = *(double *)(v12 + 232);
    *(double *)(v12 + 232) = v67;
  }
  else
  {
    sub_21429A05C(v81);
    return swift_release();
  }
  return result;
}

uint64_t static AxisValueLabel._renderAxisMark(_:_:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t *a5@<X8>)
{
  uint64_t v9;
  uint64_t *v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 v34;
  uint64_t v35;
  double v36;
  char *v37;
  char *v38;
  char v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  double v46;
  double v47;
  int v48;
  unsigned int v49;
  unsigned __int8 *v50;
  int v51;
  int v52;
  unsigned __int8 v53;
  unsigned __int8 v54;
  char v55;
  char v56;
  double v57;
  double v58;
  double v59;
  double v60;
  unsigned int v61;
  double v62;
  double v63;
  double v64;
  double v65;
  uint64_t v66;
  BOOL v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t *v70;
  double v71;
  double v72;
  double v73;
  double v74;
  unsigned int v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  uint64_t v82;
  double v83;
  double v84;
  double v85;
  char v86;
  double v87;
  char v88;
  double v89;
  double v90;
  double v91;
  char v92;
  unsigned int v93;
  __int128 v94;
  unsigned int v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  double v100;
  uint64_t v101;
  double v102;
  double v103;
  double v104;
  unsigned int v105;
  uint64_t v106;
  double v107;
  double v108;
  double v109;
  double v110;
  double v111;
  double v112;
  double v113;
  double v114;
  double v115;
  double v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  double v120;
  double v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t KeyPath;
  uint64_t v125;
  double v126;
  double v127;
  double v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t *v135;
  double v136;
  unsigned __int8 *v137;
  char v138;
  char v139;
  char v140;
  uint64_t v141[5];
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;

  v135 = a5;
  v127 = COERCE_DOUBLE(sub_2141D8BF8(&qword_253F12228));
  MEMORY[0x24BDAC7A8](*(_QWORD *)&v127);
  v10 = (uint64_t *)((char *)&KeyPath - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v126 = COERCE_DOUBLE(sub_2141D8BF8(&qword_253F12220));
  result = MEMORY[0x24BDAC7A8](*(_QWORD *)&v126);
  *(_QWORD *)&v128 = (char *)&KeyPath - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *a2;
  v14 = *(_QWORD *)(v13 + 160);
  if (*(_BYTE *)(v13 + 160) == 0xFF)
    goto LABEL_134;
  v16 = *(_QWORD *)(v13 + 168);
  v15 = *(_QWORD *)(v13 + 176);
  v17 = *(_QWORD *)(v13 + 152);
  v142 = *(_QWORD *)(v13 + 144);
  v21 = v142;
  v143 = v17;
  LOBYTE(v144) = v14;
  v145 = v16;
  v146 = v15;
  swift_retain();
  sub_21424CB94(v21, v17, v14);
  v19 = type metadata accessor for AxisValueLabel(0, a3, a4, v18);
  sub_214297D9C((uint64_t)&v142, v13, v19, (unint64_t *)v141);
  v20 = v141[0];
  v133 = v141[1];
  v132 = v141[2];
  v131 = v141[3];
  v130 = v141[4];
  sub_21424C914(v21, v17, v14);
  v137 = a1;
  v129 = a1[76];
  LODWORD(v21) = 9u >> (v129 & 0xF);
  v22 = *(_QWORD *)(v13 + 120);
  v23 = *(double *)(*(_QWORD *)(v13 + 16) + 24);
  swift_retain();
  v24 = sub_214424134();
  if ((v21 & 1) != 0)
    v28 = v24;
  else
    v28 = v26;
  if ((v21 & 1) != 0)
    v29 = v25 & 1;
  else
    v29 = v27 & 1;
  if ((v21 & 1) != 0)
    v30 = v26;
  else
    v30 = v24;
  v136 = *(double *)&v30;
  if ((v21 & 1) != 0)
    v31 = v27 & 1;
  else
    v31 = v25 & 1;
  sub_2141ECF88((uint64_t)v141, (uint64_t)&v142);
  v134 = v20;
  if (v144 < 0)
  {
    v144 &= ~0x8000000000000000;
    v125 = v142;
    KeyPath = swift_getKeyPath();
    v39 = v21;
    v21 = v22 + OBJC_IVAR____TtC6Charts14SgMeasurements__dynamicTypeSize;
    swift_beginAccess();
    v40 = *(int *)(*(_QWORD *)&v127 + 28);
    v127 = v23;
    v41 = (char *)v10 + v40;
    v42 = sub_214423F24();
    v43 = v21;
    LOBYTE(v21) = v39;
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 16))(v41, v43, v42);
    *v10 = KeyPath;
    v44 = *(_QWORD *)&v128;
    sub_2141E070C((uint64_t)v10, *(_QWORD *)&v128 + *(int *)(*(_QWORD *)&v126 + 36), &qword_253F12228);
    *(_QWORD *)v44 = v125;
    swift_retain();
    sub_2141E0750((uint64_t)v10, &qword_253F12228);
    v139 = v29;
    v138 = v31;
    v36 = sub_214299CE4(v44, *(unint64_t *)&v127, v28, v29, *(uint64_t *)&v136, v31);
    v38 = v45;
    sub_2141E0750(v44, &qword_253F12220);
    swift_release();
  }
  else
  {
    v32 = v142;
    v33 = v143;
    v34 = v144 & 1;
    v35 = v145;
    sub_2141DD130(v142, v143, v144 & 1);
    swift_bridgeObjectRetain();
    v140 = v29;
    v139 = v31;
    v36 = sub_2143C87D0(v32, v33, v34, v35);
    v38 = v37;
    sub_2141ED0BC(v32, v33, v34);
    swift_release();
    swift_bridgeObjectRelease();
  }
  if ((v21 & 1) != 0)
    v46 = *(double *)&v38;
  else
    v46 = v36;
  if ((v21 & 1) != 0)
    v47 = v36;
  else
    v47 = *(double *)&v38;
  v48 = *(unsigned __int8 *)(v13 + 24);
  v49 = *(unsigned __int8 *)(v13 + 64);
  v50 = v137;
  v51 = *v137;
  if (v51 == 2)
  {
    if (*(unsigned __int8 *)(v13 + 136) >= 2u)
      v52 = v48 != 2 || (v49 & 0xFE) != 2;
    else
      v52 = 0;
  }
  else
  {
    v52 = v51 & 1;
  }
  v53 = sub_214298280(v52, *(_BYTE *)(v13 + 24), v49, *(double *)(v13 + 344));
  v54 = sub_214298430(v52, v48, *(unsigned __int8 *)(v13 + 64), *(double *)(v13 + 344));
  result = sub_2142985F4(v48, *(_BYTE *)(v13 + 64));
  v56 = v55;
  v57 = *(double *)(v13 + 352);
  if (v52)
  {
    v58 = *(double *)(v13 + 360);
    v59 = (v57 + *(double *)(v13 + 368)) * 0.5;
    v60 = (v58 + *(double *)(v13 + 376)) * 0.5;
  }
  else
  {
    v60 = *(double *)(v13 + 360);
    v59 = *(double *)(v13 + 352);
    v58 = v60;
  }
  v61 = *(unsigned __int8 *)(v13 + 64);
  if (v61 > 1)
  {
    if (v54 == 2)
    {
      v65 = *(double *)(v13 + 320);
      if (*(double *)(v13 + 336) < v65)
        v65 = *(double *)(v13 + 336);
      if (v58 <= v65 + 1.0)
        goto LABEL_58;
    }
    else if (!v54)
    {
      v63 = *(double *)(v13 + 320);
      if (v63 <= *(double *)(v13 + 336))
        v63 = *(double *)(v13 + 336);
      if (v63 + -1.0 <= v58)
        goto LABEL_58;
    }
  }
  else if (v53 == 2)
  {
    v64 = *(double *)(v13 + 312);
    if (*(double *)(v13 + 328) < v64)
      v64 = *(double *)(v13 + 328);
    if (v57 <= v64 + 1.0)
      goto LABEL_58;
  }
  else if (!v53)
  {
    v62 = *(double *)(v13 + 312);
    if (v62 <= *(double *)(v13 + 328))
      v62 = *(double *)(v13 + 328);
    if (v62 + -1.0 <= v57)
      goto LABEL_58;
  }
  if (v52 && *(_BYTE *)(v13 + 136) != 2)
  {
    if (*(_BYTE *)(v13 + 160) == 0xFF)
    {
LABEL_137:
      __break(1u);
      goto LABEL_138;
    }
    v66 = *(_QWORD *)(v13 + 176);
    v67 = __OFSUB__(v66, 1);
    v68 = v66 - 1;
    if (!v67)
    {
      if (*(_QWORD *)(v13 + 168) == v68)
      {
LABEL_58:
        sub_21429A05C(v141);
        result = swift_release();
        v69 = 0xE000000000000000;
        v70 = v135;
LABEL_132:
        *v70 = v69;
        return result;
      }
      goto LABEL_59;
    }
    __break(1u);
LABEL_134:
    __break(1u);
    goto LABEL_135;
  }
LABEL_59:
  swift_beginAccess();
  v71 = *(double *)(v13 + 56);
  v136 = *(double *)(v13 + 48);
  v72 = sub_21429865C(v61);
  v74 = v73;
  v75 = *(unsigned __int8 *)(v13 + 64);
  if (v75 <= 1 && v53 == 1)
  {
    result = swift_beginAccess();
    if (*(_QWORD *)(v13 + 216))
    {
      v74 = v74 + *(double *)(v13 + 224);
LABEL_72:
      v127 = v60;
      if (v54)
      {
        if (v54 != 1)
          v71 = v71 - v74;
      }
      else
      {
        v71 = v71 + v74;
      }
      v77 = v46;
      v128 = v47;
      v126 = v59;
      if ((v56 & 1) != 0)
      {
        v84 = dbl_21442A238[v53];
        v85 = dbl_21442A238[v54];
        v70 = v135;
        v82 = v134;
        goto LABEL_90;
      }
      result = swift_beginAccess();
      if (*(_QWORD *)(v13 + 216))
      {
        v79 = *(double *)(v13 + 192);
        v78 = *(double *)(v13 + 200);
        v80 = v79 * dbl_21442A238[v53];
        v81 = dbl_21442A238[v54];
        sub_21442432C();
        if ((sub_214424248() & 1) != 0)
        {
          v82 = v134;
          v83 = v128;
        }
        else
        {
          sub_214424338();
          v86 = sub_214424248();
          v82 = v134;
          if ((v86 & 1) != 0)
          {
            v83 = v128;
            v80 = v80 - (v79 - v128);
          }
          else
          {
            sub_214424320();
            sub_214424248();
            v83 = v128;
            v80 = v80 + (v79 - v128) * -0.5;
          }
        }
        v87 = v78 * v81;
        v84 = v80 / v83;
        sub_214424254();
        v88 = sub_214424248();
        v70 = v135;
        if ((v88 & 1) != 0)
        {
          v46 = v77;
          v85 = v87 / v77;
        }
        else
        {
          sub_214424260();
          if ((sub_214424248() & 1) != 0)
          {
            v89 = v78 - v77;
            v46 = v77;
            v90 = v87 - v89;
          }
          else
          {
            sub_21442426C();
            sub_214424248();
            v91 = v78 - v77;
            v46 = v77;
            v90 = v87 + v91 * -0.5;
          }
          v85 = v90 / v77;
        }
LABEL_90:
        v92 = 8 * v129;
        if ((v50[74] & 1) != 0)
        {
          LOBYTE(v93) = 0;
          v94 = v48 == 1;
          v95 = 0x20100u >> v92;
        }
        else
        {
          v94 = *(_OWORD *)(v50 + 56);
          v93 = *((unsigned __int16 *)v50 + 36);
          v95 = 0x20100u >> v92;
          if (((v93 >> 8) & 1) == 0)
          {
            v105 = *(unsigned __int8 *)(v13 + 64);
            if (v105 >= 2)
              *(double *)&v106 = v74;
            else
              *(double *)&v106 = v72;
            if (v105 > 1)
            {
              v109 = v46 * 0.5 + 1.0;
              v110 = *(double *)(v13 + 256);
              v111 = *(double *)(v13 + 264);
              if (v111 >= v110)
                v112 = *(double *)(v13 + 256);
              else
                v112 = *(double *)(v13 + 264);
              v100 = v112 - v109;
              if (v110 <= v111)
                v110 = *(double *)(v13 + 264);
              v102 = v109 + v110;
              v97 = 0xFFF0000000000000;
              v101 = 0x7FF0000000000000;
            }
            else
            {
              v107 = *(double *)(v13 + 240);
              v108 = *(double *)(v13 + 248);
              if (v108 >= v107)
                v97 = *(_QWORD *)(v13 + 240);
              else
                v97 = *(_QWORD *)(v13 + 248);
              if (v107 > v108)
                v101 = *(_QWORD *)(v13 + 240);
              else
                v101 = *(_QWORD *)(v13 + 248);
              v100 = -INFINITY;
              v102 = INFINITY;
            }
            v98 = 0;
            if ((v93 & 1) != 0)
              v99 = v106;
            else
              v99 = *((_QWORD *)v50 + 8);
            v96 = *((_QWORD *)v50 + 7);
            goto LABEL_131;
          }
        }
        v96 = 0;
        v97 = 0;
        v98 = 2;
        v99 = 0;
        v100 = 0.0;
        v101 = 0;
        v102 = 0.0;
        if (v94 == 0 && !(_BYTE)v93)
        {
          if (*(unsigned __int8 *)(v13 + 64) > 1u)
          {
            v96 = 0;
            v113 = v77 * 0.5 + 1.0;
            v114 = *(double *)(v13 + 256);
            v115 = *(double *)(v13 + 264);
            if (v115 >= v114)
              v116 = *(double *)(v13 + 256);
            else
              v116 = *(double *)(v13 + 264);
            v100 = v116 - v113;
            if (v114 <= v115)
              v114 = *(double *)(v13 + 264);
            v102 = v113 + v114;
            v99 = 0x3FF0000000000000;
            v101 = 0x7FF0000000000000;
            v97 = 0xFFF0000000000000;
          }
          else
          {
            v96 = 0;
            v103 = *(double *)(v13 + 240);
            v104 = *(double *)(v13 + 248);
            if (v104 >= v103)
              v97 = *(_QWORD *)(v13 + 240);
            else
              v97 = *(_QWORD *)(v13 + 248);
            if (v103 > v104)
              v101 = *(_QWORD *)(v13 + 240);
            else
              v101 = *(_QWORD *)(v13 + 248);
            v99 = 0x3FF0000000000000;
            v102 = INFINITY;
            v100 = -INFINITY;
          }
          v98 = 1;
        }
LABEL_131:
        v117 = swift_allocObject();
        v118 = *(_QWORD *)(v13 + 16);
        swift_retain();
        swift_release();
        v119 = *(_QWORD *)(v118 + 24);
        result = swift_release();
        v120 = v126 + v136;
        *(_QWORD *)(v117 + 16) = v119;
        v121 = v127 + v71;
        *(double *)(v117 + 24) = v120;
        *(double *)(v117 + 32) = v121;
        *(double *)(v117 + 40) = v84;
        *(double *)(v117 + 48) = v85;
        v122 = v133;
        *(_QWORD *)(v117 + 56) = v82;
        *(_QWORD *)(v117 + 64) = v122;
        v123 = v131;
        *(_QWORD *)(v117 + 72) = v132;
        *(_QWORD *)(v117 + 80) = v123;
        *(_QWORD *)(v117 + 88) = v130;
        *(_BYTE *)(v117 + 96) = v95;
        *(double *)(v117 + 104) = v128;
        *(double *)(v117 + 112) = v77;
        *(_QWORD *)(v117 + 120) = v98;
        *(_QWORD *)(v117 + 128) = v96;
        *(_QWORD *)(v117 + 136) = v99;
        *(_QWORD *)(v117 + 144) = v97;
        *(double *)(v117 + 152) = v100;
        *(_QWORD *)(v117 + 160) = v101;
        *(double *)(v117 + 168) = v102;
        *(_WORD *)(v117 + 176) = 6;
        v69 = v117 | 0xA000000000000000;
        *(_QWORD *)(v117 + 184) = 0;
        goto LABEL_132;
      }
      goto LABEL_136;
    }
LABEL_135:
    __break(1u);
LABEL_136:
    __break(1u);
    goto LABEL_137;
  }
  if ((v75 & 0xFE) != 2 || v54 != 1)
  {
LABEL_67:
    if (v53)
    {
      if (v53 == 1)
        goto LABEL_72;
      v76 = v136 - v72;
    }
    else
    {
      v76 = v136 + v72;
    }
    v136 = v76;
    goto LABEL_72;
  }
  result = swift_beginAccess();
  if (*(_QWORD *)(v13 + 216))
  {
    v72 = v72 + *(double *)(v13 + 224);
    goto LABEL_67;
  }
LABEL_138:
  __break(1u);
  return result;
}

uint64_t sub_2142997B4(unsigned __int8 *a1, uint64_t *a2, uint64_t a3)
{
  return static AxisValueLabel._layoutAxisMark(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t sub_2142997C0@<X0>(unsigned __int8 *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X8>)
{
  return static AxisValueLabel._renderAxisMark(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
}

void static AxisValueLabelOrientation.horizontal.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void static AxisValueLabelOrientation.vertical.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

void static AxisValueLabelOrientation.verticalReversed.getter(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t AxisValueLabelOrientation.description.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_214299820 + 4 * byte_214429F80[*v0]))(0x746E6F7A69726F68, 0xEA00000000006C61);
}

uint64_t sub_214299820()
{
  return 0x6C61636974726576;
}

unint64_t sub_214299838()
{
  return 0xD000000000000010;
}

uint64_t sub_214299854()
{
  return 0x6974616D6F747561;
}

uint64_t sub_214299870()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_2142998A4 + 4 * byte_214429F84[*v0]))(0x6974616D6F747561, 0xE900000000000063);
}

uint64_t sub_2142998A4()
{
  return 0x746E6F7A69726F68;
}

unint64_t sub_2142998C0()
{
  return 0xD000000000000010;
}

uint64_t sub_2142998DC()
{
  return 0x6C61636974726576;
}

void static AxisValueLabelCollisionResolution.greedy.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 1;
  *(_BYTE *)(a1 + 18) = 0;
}

uint64_t static AxisValueLabelCollisionResolution.greedy(priority:minimumSpacing:)@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t a3@<X8>, double a4@<D0>)
{
  *(double *)a3 = a4;
  *(_QWORD *)(a3 + 8) = result;
  *(_WORD *)(a3 + 16) = a2 & 1;
  *(_BYTE *)(a3 + 18) = 0;
  return result;
}

void static AxisValueLabelCollisionResolution.truncate.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 256;
  *(_BYTE *)(a1 + 18) = 0;
}

double static AxisValueLabelCollisionResolution.disabled.getter@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)&result = 1;
  *(_OWORD *)a1 = xmmword_21442A250;
  *(_WORD *)(a1 + 16) = 256;
  *(_BYTE *)(a1 + 18) = 0;
  return result;
}

uint64_t AxisValueLabelCollisionResolution.description.getter()
{
  uint64_t v0;
  __int16 v2;
  BOOL v3;

  if ((*(_BYTE *)(v0 + 18) & 1) != 0)
    return 0x6974616D6F747561;
  v2 = *(_WORD *)(v0 + 16);
  if ((v2 & 0x100) != 0)
  {
    if ((_BYTE)v2)
      v3 = 0;
    else
      v3 = *(_OWORD *)v0 == 0;
    if (v3)
      return 0x657461636E757274;
    else
      return 0x64656C6261736964;
  }
  else
  {
    if ((v2 & 1) != 0)
    {
      if (*(double *)v0 == 0.0)
        return 0x796465657267;
      sub_2144254D8();
      sub_214424F20();
      sub_2144250E8();
    }
    else
    {
      sub_2144254D8();
      sub_214424F20();
      sub_2144250E8();
      sub_214424F20();
      sub_2144250C4();
      sub_214424F20();
      swift_bridgeObjectRelease();
    }
    sub_214424F20();
    return 0;
  }
}

uint64_t sub_214299B14(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  unint64_t v6;
  _QWORD *v7;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v11[2];

  v2 = v1;
  v3 = *(_QWORD *)(v1 + 32);
  if (!*(_QWORD *)(v3 + 16))
    return 0;
  v4 = sub_21433AB28(a1);
  if ((v5 & 1) == 0)
    return 0;
  v6 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + 8 * v4);
  if ((v6 & 0x8000000000000000) != 0)
    return 0;
  v7 = *(_QWORD **)(v2 + 8);
  if (v6 == *(_QWORD *)(v2 + 16))
    goto LABEL_7;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v2 + 8) = v7;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    goto LABEL_12;
  while (1)
  {
    v9 = v7[2];
    v11[0] = (uint64_t)(v7 + 4);
    v11[1] = v9;
    sub_214369964(v11, v6, v2);
    *(_QWORD *)(v2 + 8) = v7;
LABEL_7:
    if (v6 < v7[2])
      break;
    __break(1u);
LABEL_12:
    v7 = sub_21434EAD0(v7);
    *(_QWORD *)(v2 + 8) = v7;
  }
  return swift_retain();
}

uint64_t sub_214299BD8(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13[2];

  v3 = v2;
  v6 = *(_QWORD *)(v2 + 32);
  if (!*(_QWORD *)(v6 + 16))
    return sub_214369F28(a1, a2);
  v7 = sub_21433AB28(a2);
  if ((v8 & 1) == 0)
    return sub_214369F28(a1, a2);
  v9 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v7);
  if ((v9 & 0x8000000000000000) != 0)
    return sub_214369F28(a1, a2);
  v10 = *(_QWORD **)(v3 + 8);
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    result = (uint64_t)sub_21434EAD0(v10);
    v10 = (_QWORD *)result;
  }
  if (v9 >= v10[2])
  {
    __break(1u);
  }
  else
  {
    swift_retain();
    result = swift_release();
    v10[4 * v9 + 7] = a1;
    *(_QWORD *)(v3 + 8) = v10;
    if (v9 != *(_QWORD *)(v3 + 16))
    {
      v12 = v10[2];
      v13[0] = (uint64_t)(v10 + 4);
      v13[1] = v12;
      result = (uint64_t)sub_214369964(v13, v9, v3);
      *(_QWORD *)(v3 + 8) = v10;
    }
  }
  return result;
}

double sub_214299CE4(uint64_t a1, unint64_t a2, uint64_t a3, char a4, uint64_t a5, char a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v22[2];
  char v23;
  double v24;
  uint64_t v25;

  v22[1] = a5;
  v10 = sub_2141D8BF8(&qword_253F12220);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)v22 - v14;
  swift_beginAccess();
  v16 = sub_214299B14(a2);
  swift_endAccess();
  if (!v16)
    goto LABEL_5;
  sub_2141D8BF8(&qword_253F11E38);
  if (!swift_dynamicCastClass())
  {
    swift_release();
LABEL_5:
    sub_2141E070C(a1, (uint64_t)v15, &qword_253F12220);
    sub_2141D8BF8(&qword_253F11E38);
    v18 = swift_allocObject();
    sub_2141E070C((uint64_t)v15, (uint64_t)v13, &qword_253F12220);
    sub_2141D8BF8(&qword_253F11F68);
    swift_allocObject();
    v19 = sub_214423E4C();
    swift_retain();
    sub_2141E0750((uint64_t)v15, &qword_253F12220);
    *(_QWORD *)(v18 + 16) = v19;
    swift_release();
    swift_beginAccess();
    sub_214299BD8(v18, a2);
    swift_endAccess();
    LOBYTE(v24) = a4 & 1;
    v23 = a6 & 1;
    v20 = sub_214423E34();
    v24 = 0.0;
    v25 = 0;
    MEMORY[0x24BDAC7A8](v20);
    v22[-2] = &v24;
    sub_214423E40();
    goto LABEL_6;
  }
  sub_2141E070C(a1, (uint64_t)v15, &qword_253F12220);
  sub_214423E58();
  LOBYTE(v24) = a4 & 1;
  v23 = a6 & 1;
  v17 = sub_214423E34();
  v24 = 0.0;
  v25 = 0;
  MEMORY[0x24BDAC7A8](v17);
  v22[-2] = &v24;
  sub_214423E40();
LABEL_6:
  swift_release();
  return v24;
}

uint64_t sub_214299F9C()
{
  return sub_2144241B8();
}

uint64_t sub_214299FBC()
{
  return sub_2144241B8();
}

uint64_t sub_214299FDC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v2 = sub_214423F24();
  MEMORY[0x24BDAC7A8](v2);
  (*(void (**)(char *, uint64_t))(v4 + 16))((char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  return sub_2144241C4();
}

uint64_t *sub_21429A05C(uint64_t *a1)
{
  sub_2141ED07C(*a1, a1[1], a1[2]);
  return a1;
}

uint64_t sub_21429A08C(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  __int16 v17;
  uint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  int64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int16 v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  int64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  int64_t v47;
  char v48;
  uint64_t v49;

  v4 = *v2;
  sub_2141D8BF8(&qword_253F13570);
  v45 = a2;
  result = sub_2144256C4();
  v6 = result;
  if (*(_QWORD *)(v4 + 16))
  {
    v7 = 0;
    v42 = (_QWORD *)(v4 + 64);
    v43 = v4;
    v8 = 1 << *(_BYTE *)(v4 + 32);
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v4 + 64);
    v41 = (unint64_t)(v8 + 63) >> 6;
    v11 = result + 64;
    v44 = result;
    while (1)
    {
      if (v10)
      {
        v46 = (v10 - 1) & v10;
        v47 = v7;
        v19 = __clz(__rbit64(v10)) | (v7 << 6);
      }
      else
      {
        v20 = v7 + 1;
        if (__OFADD__(v7, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        result = (uint64_t)v42;
        if (v20 >= v41)
          goto LABEL_33;
        v21 = v42[v20];
        v22 = v7 + 1;
        if (!v21)
        {
          v22 = v20 + 1;
          if (v20 + 1 >= v41)
            goto LABEL_33;
          v21 = v42[v22];
          if (!v21)
          {
            v23 = v20 + 2;
            if (v23 >= v41)
            {
LABEL_33:
              if ((v45 & 1) == 0)
                break;
              v38 = 1 << *(_BYTE *)(v4 + 32);
              if (v38 >= 64)
                bzero(v42, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v42 = -1 << v38;
              v39 = v40;
              *(_QWORD *)(v4 + 16) = 0;
              result = swift_release();
              goto LABEL_39;
            }
            v21 = v42[v23];
            if (!v21)
            {
              while (1)
              {
                v22 = v23 + 1;
                if (__OFADD__(v23, 1))
                  goto LABEL_41;
                if (v22 >= v41)
                  goto LABEL_33;
                v21 = v42[v22];
                ++v23;
                if (v21)
                  goto LABEL_30;
              }
            }
            v22 = v23;
          }
        }
LABEL_30:
        v46 = (v21 - 1) & v21;
        v47 = v22;
        v19 = __clz(__rbit64(v21)) + (v22 << 6);
      }
      v28 = *(_QWORD *)(v4 + 56);
      v29 = *(_BYTE *)(*(_QWORD *)(v4 + 48) + v19);
      v30 = (uint64_t *)(v28 + 72 * v19);
      v49 = *v30;
      v48 = *((_BYTE *)v30 + 8);
      v31 = v30[2];
      v32 = v30[3];
      v33 = v30[4];
      v34 = *((_WORD *)v30 + 20);
      v35 = v30[6];
      v36 = v30[7];
      v37 = *((unsigned __int8 *)v30 + 64);
      if ((v45 & 1) == 0)
      {
        sub_2141D8CE8(v31, v32, v33, v34);
        sub_2141D8CFC(v35, v36, v37);
      }
      v6 = v44;
      sub_214425874();
      sub_214425880();
      v12 = sub_2144258B0();
      v13 = -1 << *(_BYTE *)(v44 + 32);
      v14 = v12 & ~v13;
      v15 = v14 >> 6;
      if (((-1 << v14) & ~*(_QWORD *)(v11 + 8 * (v14 >> 6))) != 0)
      {
        v16 = __clz(__rbit64((-1 << v14) & ~*(_QWORD *)(v11 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
        v17 = v34;
        result = v37;
      }
      else
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v13) >> 6;
        v17 = v34;
        result = v37;
        do
        {
          if (++v15 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          v26 = v15 == v25;
          if (v15 == v25)
            v15 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v11 + 8 * v15);
        }
        while (v27 == -1);
        v16 = __clz(__rbit64(~v27)) + (v15 << 6);
      }
      *(_QWORD *)(v11 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(_BYTE *)(*(_QWORD *)(v44 + 48) + v16) = v29;
      v18 = *(_QWORD *)(v44 + 56) + 72 * v16;
      *(_QWORD *)v18 = v49;
      *(_BYTE *)(v18 + 8) = v48;
      *(_QWORD *)(v18 + 16) = v31;
      *(_QWORD *)(v18 + 24) = v32;
      *(_QWORD *)(v18 + 32) = v33;
      *(_WORD *)(v18 + 40) = v17;
      *(_QWORD *)(v18 + 48) = v35;
      *(_QWORD *)(v18 + 56) = v36;
      *(_BYTE *)(v18 + 64) = result;
      ++*(_QWORD *)(v44 + 16);
      v4 = v43;
      v10 = v46;
      v7 = v47;
    }
  }
  result = swift_release();
  v39 = v40;
LABEL_39:
  *v39 = v6;
  return result;
}

uint64_t sub_21429A408(uint64_t a1, int a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t result;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  _QWORD *v38;
  uint64_t v39;
  int v40;

  v3 = v2;
  v5 = type metadata accessor for CalendarCache.Key(0);
  v39 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v2;
  sub_2141D8BF8(&qword_253F11968);
  v40 = a2;
  v9 = sub_2144256C4();
  v10 = v9;
  if (!*(_QWORD *)(v8 + 16))
    goto LABEL_41;
  v11 = 1 << *(_BYTE *)(v8 + 32);
  v12 = *(_QWORD *)(v8 + 64);
  v38 = (_QWORD *)(v8 + 64);
  if (v11 < 64)
    v13 = ~(-1 << v11);
  else
    v13 = -1;
  v14 = v13 & v12;
  v36 = v2;
  v37 = (unint64_t)(v11 + 63) >> 6;
  v15 = v9 + 64;
  result = swift_retain();
  v17 = 0;
  while (1)
  {
    if (v14)
    {
      v19 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v20 = v19 | (v17 << 6);
      goto LABEL_22;
    }
    v21 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v21 >= v37)
      break;
    v22 = v38;
    v23 = v38[v21];
    ++v17;
    if (!v23)
    {
      v17 = v21 + 1;
      if (v21 + 1 >= v37)
        goto LABEL_34;
      v23 = v38[v17];
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v37)
        {
LABEL_34:
          swift_release();
          v3 = v36;
          if ((v40 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v23 = v38[v24];
        if (!v23)
        {
          while (1)
          {
            v17 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_43;
            if (v17 >= v37)
              goto LABEL_34;
            v23 = v38[v17];
            ++v24;
            if (v23)
              goto LABEL_21;
          }
        }
        v17 = v24;
      }
    }
LABEL_21:
    v14 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v17 << 6);
LABEL_22:
    v25 = *(_QWORD *)(v39 + 72);
    v26 = *(_QWORD *)(v8 + 48) + v25 * v20;
    if ((v40 & 1) != 0)
      sub_2141FE1E0(v26, (uint64_t)v7, type metadata accessor for CalendarCache.Key);
    else
      sub_2141FDEA0(v26, (uint64_t)v7, type metadata accessor for CalendarCache.Key);
    v27 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v20);
    sub_214425874();
    sub_2142C58CC();
    result = sub_2144258B0();
    v28 = -1 << *(_BYTE *)(v10 + 32);
    v29 = result & ~v28;
    v30 = v29 >> 6;
    if (((-1 << v29) & ~*(_QWORD *)(v15 + 8 * (v29 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v29) & ~*(_QWORD *)(v15 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v31 = 0;
      v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v33 = v30 == v32;
        if (v30 == v32)
          v30 = 0;
        v31 |= v33;
        v34 = *(_QWORD *)(v15 + 8 * v30);
      }
      while (v34 == -1);
      v18 = __clz(__rbit64(~v34)) + (v30 << 6);
    }
    *(_QWORD *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    result = sub_2141FE1E0((uint64_t)v7, *(_QWORD *)(v10 + 48) + v25 * v18, type metadata accessor for CalendarCache.Key);
    *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v18) = v27;
    ++*(_QWORD *)(v10 + 16);
  }
  swift_release();
  v3 = v36;
  v22 = v38;
  if ((v40 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v35 = 1 << *(_BYTE *)(v8 + 32);
  if (v35 >= 64)
    bzero(v22, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v35;
  *(_QWORD *)(v8 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v10;
  return result;
}

uint64_t sub_21429A774(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  char v15;
  char v16;
  char v17;
  uint64_t v18;
  unint64_t v19;
  int64_t v20;
  _QWORD *v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  char v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char v42;
  unint64_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  int64_t v47;
  _QWORD *v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  int64_t v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;

  v3 = v2;
  v5 = *v2;
  sub_2141D8BF8(&qword_253F10B98);
  v49 = a2;
  v6 = sub_2144256C4();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_61;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v48 = (_QWORD *)(v5 + 64);
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v47 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  v50 = v5;
  while (1)
  {
    if (v10)
    {
      v51 = (v10 - 1) & v10;
      v52 = v13;
      v19 = __clz(__rbit64(v10)) | (v13 << 6);
      goto LABEL_22;
    }
    v20 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_62:
      __break(1u);
LABEL_63:
      __break(1u);
      return result;
    }
    if (v20 >= v47)
      break;
    v21 = v48;
    v22 = v48[v20];
    v23 = v13 + 1;
    if (!v22)
    {
      v23 = v13 + 2;
      if (v13 + 2 >= v47)
        goto LABEL_54;
      v22 = v48[v23];
      if (!v22)
      {
        v24 = v13 + 3;
        if (v13 + 3 >= v47)
        {
LABEL_54:
          swift_release();
          v3 = v2;
          if ((v49 & 1) == 0)
            goto LABEL_61;
          goto LABEL_55;
        }
        v22 = v48[v24];
        if (!v22)
        {
          while (1)
          {
            v23 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_63;
            if (v23 >= v47)
              goto LABEL_54;
            v22 = v48[v23];
            ++v24;
            if (v22)
              goto LABEL_21;
          }
        }
        v23 = v13 + 3;
      }
    }
LABEL_21:
    v51 = (v22 - 1) & v22;
    v52 = v23;
    v19 = __clz(__rbit64(v22)) + (v23 << 6);
LABEL_22:
    v25 = *(_QWORD *)(v50 + 48) + 56 * v19;
    v26 = *(_BYTE *)v25;
    v27 = *(_BYTE *)(v25 + 1);
    v28 = *(_BYTE *)(v25 + 2);
    v29 = *(_QWORD *)(v25 + 8);
    v54 = *(_QWORD *)(v25 + 16);
    v30 = *(unsigned __int8 *)(v25 + 24);
    v31 = *(_QWORD *)(v25 + 32);
    v55 = *(_QWORD *)(v25 + 40);
    v32 = *(unsigned __int8 *)(v25 + 48);
    v53 = *(_OWORD *)(*(_QWORD *)(v50 + 56) + 16 * v19);
    if ((v49 & 1) == 0)
    {
      sub_2141DD164(v29, v54, v30);
      sub_2141DD164(v31, v55, v32);
    }
    sub_214425874();
    sub_214425880();
    sub_214425880();
    sub_214425880();
    if (v30 < 0xFC)
    {
      sub_21442588C();
      if ((v30 & 0x80) != 0)
      {
        sub_214425880();
        sub_2143FD828();
        v33 = v29;
        v34 = v54;
        v35 = v30;
      }
      else
      {
        sub_214425880();
        if (v30)
        {
          sub_214425880();
          if (v30 == 1)
          {
            sub_214425898();
            v33 = v29;
            v34 = v54;
            v35 = 1;
          }
          else
          {
            sub_2141DD14C(v29, v54, 2);
            sub_214424F14();
            v33 = v29;
            v34 = v54;
            v35 = 2;
          }
        }
        else
        {
          sub_214425880();
          sub_214425898();
          v33 = v29;
          v34 = v54;
          v35 = 0;
        }
      }
      sub_2141EF1BC(v33, v34, v35);
    }
    else
    {
      sub_21442588C();
    }
    if (v32 < 0xFC)
    {
      sub_21442588C();
      if ((v32 & 0x80) != 0)
      {
        sub_214425880();
        sub_2143FD828();
        v36 = v31;
        v37 = v55;
        v38 = v32;
      }
      else
      {
        sub_214425880();
        if (v32)
        {
          sub_214425880();
          if (v32 == 1)
          {
            sub_214425898();
            v36 = v31;
            v37 = v55;
            v38 = 1;
          }
          else
          {
            sub_2141DD14C(v31, v55, 2);
            sub_214424F14();
            v36 = v31;
            v37 = v55;
            v38 = 2;
          }
        }
        else
        {
          sub_214425880();
          sub_214425898();
          v36 = v31;
          v37 = v55;
          v38 = 0;
        }
      }
      sub_2141EF1BC(v36, v37, v38);
    }
    else
    {
      sub_21442588C();
    }
    result = sub_2144258B0();
    v39 = -1 << *(_BYTE *)(v7 + 32);
    v40 = result & ~v39;
    v41 = v40 >> 6;
    if (((-1 << v40) & ~*(_QWORD *)(v11 + 8 * (v40 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v40) & ~*(_QWORD *)(v11 + 8 * (v40 >> 6)))) | v40 & 0x7FFFFFFFFFFFFFC0;
      v16 = v27;
      v15 = v28;
      v17 = v26;
    }
    else
    {
      v42 = 0;
      v43 = (unint64_t)(63 - v39) >> 6;
      v16 = v27;
      v15 = v28;
      v17 = v26;
      do
      {
        if (++v41 == v43 && (v42 & 1) != 0)
        {
          __break(1u);
          goto LABEL_62;
        }
        v44 = v41 == v43;
        if (v41 == v43)
          v41 = 0;
        v42 |= v44;
        v45 = *(_QWORD *)(v11 + 8 * v41);
      }
      while (v45 == -1);
      v14 = __clz(__rbit64(~v45)) + (v41 << 6);
    }
    *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    v18 = *(_QWORD *)(v7 + 48) + 56 * v14;
    *(_BYTE *)v18 = v17;
    *(_BYTE *)(v18 + 1) = v16;
    *(_BYTE *)(v18 + 2) = v15;
    *(_QWORD *)(v18 + 8) = v29;
    *(_QWORD *)(v18 + 16) = v54;
    *(_BYTE *)(v18 + 24) = v30;
    *(_QWORD *)(v18 + 32) = v31;
    *(_QWORD *)(v18 + 40) = v55;
    *(_BYTE *)(v18 + 48) = v32;
    *(_OWORD *)(*(_QWORD *)(v7 + 56) + 16 * v14) = v53;
    ++*(_QWORD *)(v7 + 16);
    v10 = v51;
    v13 = v52;
  }
  swift_release();
  v3 = v2;
  v21 = v48;
  if ((v49 & 1) == 0)
    goto LABEL_61;
LABEL_55:
  v46 = 1 << *(_BYTE *)(v50 + 32);
  if (v46 >= 64)
    bzero(v21, ((unint64_t)(v46 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v21 = -1 << v46;
  *(_QWORD *)(v50 + 16) = 0;
LABEL_61:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_21429AD3C(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;

  v3 = v2;
  v5 = *v2;
  sub_2141D8BF8(&qword_253F12688);
  result = sub_2144256C4();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v9 = (uint64_t *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    v31 = -1 << v10;
    v32 = v10;
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v33 = (unint64_t)(v10 + 63) >> 6;
    v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        v19 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v20 = v19 | (v8 << 6);
      }
      else
      {
        v21 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v21 >= v33)
          goto LABEL_33;
        v22 = v9[v21];
        ++v8;
        if (!v22)
        {
          v8 = v21 + 1;
          if (v21 + 1 >= v33)
            goto LABEL_33;
          v22 = v9[v8];
          if (!v22)
          {
            v23 = v21 + 2;
            if (v23 >= v33)
            {
LABEL_33:
              if ((a2 & 1) != 0)
              {
                if (v32 >= 64)
                  bzero((void *)(v5 + 64), 8 * v33);
                else
                  *v9 = v31;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v22 = v9[v23];
            if (!v22)
            {
              while (1)
              {
                v8 = v23 + 1;
                if (__OFADD__(v23, 1))
                  goto LABEL_41;
                if (v8 >= v33)
                  goto LABEL_33;
                v22 = v9[v8];
                ++v23;
                if (v22)
                  goto LABEL_30;
              }
            }
            v8 = v23;
          }
        }
LABEL_30:
        v12 = (v22 - 1) & v22;
        v20 = __clz(__rbit64(v22)) + (v8 << 6);
      }
      v28 = 8 * v20;
      v29 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + v28);
      v30 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + v28);
      if ((a2 & 1) == 0)
        swift_bridgeObjectRetain();
      result = sub_214425868();
      v14 = -1 << *(_BYTE *)(v7 + 32);
      v15 = result & ~v14;
      v16 = v15 >> 6;
      if (((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          v26 = v16 == v25;
          if (v16 == v25)
            v16 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v13 + 8 * v16);
        }
        while (v27 == -1);
        v17 = __clz(__rbit64(~v27)) + (v16 << 6);
      }
      *(_QWORD *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      v18 = 8 * v17;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + v18) = v29;
      *(_QWORD *)(*(_QWORD *)(v7 + 56) + v18) = v30;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_21429AFF0(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  _OWORD *v15;
  __int128 v16;
  __int128 v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  _QWORD *v21;
  unint64_t v22;
  int64_t v23;
  __int128 *v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  uint64_t v38;
  char v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;

  v3 = v2;
  v5 = *v2;
  sub_2141D8BF8(&qword_253F15D00);
  v39 = a2;
  v6 = sub_2144256C4();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_41;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v38 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v36 = v2;
  v37 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v18 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v19 = v18 | (v13 << 6);
      goto LABEL_22;
    }
    v20 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v20 >= v37)
      break;
    v21 = (_QWORD *)(v5 + 64);
    v22 = *(_QWORD *)(v38 + 8 * v20);
    ++v13;
    if (!v22)
    {
      v13 = v20 + 1;
      if (v20 + 1 >= v37)
        goto LABEL_34;
      v22 = *(_QWORD *)(v38 + 8 * v13);
      if (!v22)
      {
        v23 = v20 + 2;
        if (v23 >= v37)
        {
LABEL_34:
          swift_release();
          v3 = v36;
          if ((v39 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v22 = *(_QWORD *)(v38 + 8 * v23);
        if (!v22)
        {
          while (1)
          {
            v13 = v23 + 1;
            if (__OFADD__(v23, 1))
              goto LABEL_43;
            if (v13 >= v37)
              goto LABEL_34;
            v22 = *(_QWORD *)(v38 + 8 * v13);
            ++v23;
            if (v22)
              goto LABEL_21;
          }
        }
        v13 = v23;
      }
    }
LABEL_21:
    v10 = (v22 - 1) & v22;
    v19 = __clz(__rbit64(v22)) + (v13 << 6);
LABEL_22:
    v24 = (__int128 *)(*(_QWORD *)(v5 + 48) + 48 * v19);
    if ((v39 & 1) != 0)
    {
      v25 = *v24;
      v26 = v24[2];
      v41 = v24[1];
      v42 = v26;
      v40 = v25;
    }
    else
    {
      sub_2141ED7E0((uint64_t)v24, (uint64_t)&v40);
    }
    v27 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v19);
    sub_214425874();
    sub_214425898();
    sub_21442546C();
    result = sub_2144258B0();
    v28 = -1 << *(_BYTE *)(v7 + 32);
    v29 = result & ~v28;
    v30 = v29 >> 6;
    if (((-1 << v29) & ~*(_QWORD *)(v11 + 8 * (v29 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v29) & ~*(_QWORD *)(v11 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v31 = 0;
      v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v33 = v30 == v32;
        if (v30 == v32)
          v30 = 0;
        v31 |= v33;
        v34 = *(_QWORD *)(v11 + 8 * v30);
      }
      while (v34 == -1);
      v14 = __clz(__rbit64(~v34)) + (v30 << 6);
    }
    *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    v15 = (_OWORD *)(*(_QWORD *)(v7 + 48) + 48 * v14);
    v16 = v40;
    v17 = v42;
    v15[1] = v41;
    v15[2] = v17;
    *v15 = v16;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v14) = v27;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v36;
  v21 = (_QWORD *)(v5 + 64);
  if ((v39 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v35 = 1 << *(_BYTE *)(v5 + 32);
  if (v35 >= 64)
    bzero(v21, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v21 = -1 << v35;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_21429B328(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  const void *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _BYTE __src[792];

  v3 = v2;
  v5 = *v2;
  sub_2141D8BF8(&qword_253F13318);
  result = sub_2144256C4();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v30 = (_QWORD *)(v5 + 64);
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v12 = (unint64_t)(v9 + 63) >> 6;
    v13 = result + 64;
    while (1)
    {
      if (v11)
      {
        v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v16 = v15 | (v8 << 6);
      }
      else
      {
        v17 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v17 >= v12)
          goto LABEL_34;
        v18 = v30[v17];
        ++v8;
        if (!v18)
        {
          v8 = v17 + 1;
          if (v17 + 1 >= v12)
            goto LABEL_34;
          v18 = v30[v8];
          if (!v18)
          {
            v19 = v17 + 2;
            if (v19 >= v12)
            {
LABEL_34:
              if ((a2 & 1) != 0)
              {
                v29 = 1 << *(_BYTE *)(v5 + 32);
                if (v29 >= 64)
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v30 = -1 << v29;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v18 = v30[v19];
            if (!v18)
            {
              while (1)
              {
                v8 = v19 + 1;
                if (__OFADD__(v19, 1))
                  goto LABEL_42;
                if (v8 >= v12)
                  goto LABEL_34;
                v18 = v30[v8];
                ++v19;
                if (v18)
                  goto LABEL_21;
              }
            }
            v8 = v19;
          }
        }
LABEL_21:
        v11 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v8 << 6);
      }
      v20 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v16);
      v21 = (const void *)(*(_QWORD *)(v5 + 56) + 784 * v16);
      if ((a2 & 1) != 0)
        memcpy(__src, v21, 0x309uLL);
      else
        sub_2142AAF2C((uint64_t)v21, (uint64_t)__src);
      result = sub_214425868();
      v22 = -1 << *(_BYTE *)(v7 + 32);
      v23 = result & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v13 + 8 * (v23 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v13 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v27 = v24 == v26;
          if (v24 == v26)
            v24 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v13 + 8 * v24);
        }
        while (v28 == -1);
        v14 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(_QWORD *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v14) = v20;
      result = (uint64_t)memcpy((void *)(*(_QWORD *)(v7 + 56) + 784 * v14), __src, 0x309uLL);
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_21429B600(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  __int128 *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  __int128 v31[2];

  v3 = v2;
  v5 = *v2;
  sub_2141D8BF8(&qword_253F13310);
  result = sub_2144256C4();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v30 = (_QWORD *)(v5 + 64);
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v12 = (unint64_t)(v9 + 63) >> 6;
    v13 = result + 64;
    while (1)
    {
      if (v11)
      {
        v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v16 = v15 | (v8 << 6);
      }
      else
      {
        v17 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v17 >= v12)
          goto LABEL_34;
        v18 = v30[v17];
        ++v8;
        if (!v18)
        {
          v8 = v17 + 1;
          if (v17 + 1 >= v12)
            goto LABEL_34;
          v18 = v30[v8];
          if (!v18)
          {
            v19 = v17 + 2;
            if (v19 >= v12)
            {
LABEL_34:
              if ((a2 & 1) != 0)
              {
                v29 = 1 << *(_BYTE *)(v5 + 32);
                if (v29 >= 64)
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v30 = -1 << v29;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v18 = v30[v19];
            if (!v18)
            {
              while (1)
              {
                v8 = v19 + 1;
                if (__OFADD__(v19, 1))
                  goto LABEL_42;
                if (v8 >= v12)
                  goto LABEL_34;
                v18 = v30[v8];
                ++v19;
                if (v18)
                  goto LABEL_21;
              }
            }
            v8 = v19;
          }
        }
LABEL_21:
        v11 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v8 << 6);
      }
      v20 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v16);
      v21 = (__int128 *)(*(_QWORD *)(v5 + 56) + 40 * v16);
      if ((a2 & 1) != 0)
        sub_2141D8DC0(v21, (uint64_t)v31);
      else
        sub_2141D7878((uint64_t)v21, (uint64_t)v31);
      result = sub_214425868();
      v22 = -1 << *(_BYTE *)(v7 + 32);
      v23 = result & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v13 + 8 * (v23 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v13 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v27 = v24 == v26;
          if (v24 == v26)
            v24 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v13 + 8 * v24);
        }
        while (v28 == -1);
        v14 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(_QWORD *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v14) = v20;
      result = sub_2141D8DC0(v31, *(_QWORD *)(v7 + 56) + 40 * v14);
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_21429B8C4(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  int64_t v34;
  _QWORD *v35;

  v3 = v2;
  v5 = *v2;
  sub_2141D8BF8(&qword_253F13568);
  result = sub_2144256C4();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v33 = a2;
    v8 = 0;
    v35 = (_QWORD *)(v5 + 64);
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v34 = (unint64_t)(v9 + 63) >> 6;
    v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v16 = v15 | (v8 << 6);
      }
      else
      {
        v17 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v17 >= v34)
          goto LABEL_31;
        v18 = v35[v17];
        ++v8;
        if (!v18)
        {
          v8 = v17 + 1;
          if (v17 + 1 >= v34)
            goto LABEL_31;
          v18 = v35[v8];
          if (!v18)
          {
            v19 = v17 + 2;
            if (v19 >= v34)
            {
LABEL_31:
              if ((v33 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_38;
              }
              v32 = 1 << *(_BYTE *)(v5 + 32);
              if (v32 >= 64)
                bzero(v35, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v35 = -1 << v32;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v18 = v35[v19];
            if (!v18)
            {
              while (1)
              {
                v8 = v19 + 1;
                if (__OFADD__(v19, 1))
                  goto LABEL_40;
                if (v8 >= v34)
                  goto LABEL_31;
                v18 = v35[v8];
                ++v19;
                if (v18)
                  goto LABEL_21;
              }
            }
            v8 = v19;
          }
        }
LABEL_21:
        v11 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v8 << 6);
      }
      v20 = *(_QWORD *)(v5 + 56) + 16 * v16;
      v21 = *(_BYTE *)(*(_QWORD *)(v5 + 48) + v16);
      v22 = *(_BYTE *)(v20 + 9);
      v23 = *(_BYTE *)(v20 + 8);
      v24 = *(_QWORD *)v20;
      sub_214425874();
      sub_214425880();
      result = sub_2144258B0();
      v25 = -1 << *(_BYTE *)(v7 + 32);
      v26 = result & ~v25;
      v27 = v26 >> 6;
      if (((-1 << v26) & ~*(_QWORD *)(v12 + 8 * (v26 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v12 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v30 = v27 == v29;
          if (v27 == v29)
            v27 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v12 + 8 * v27);
        }
        while (v31 == -1);
        v13 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(_QWORD *)(v12 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      *(_BYTE *)(*(_QWORD *)(v7 + 48) + v13) = v21;
      v14 = *(_QWORD *)(v7 + 56) + 16 * v13;
      *(_QWORD *)v14 = v24;
      *(_BYTE *)(v14 + 8) = v23;
      *(_BYTE *)(v14 + 9) = v22;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_38:
  *v3 = v7;
  return result;
}

uint64_t sub_21429BBA8(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  int64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  __int16 v39;
  uint64_t v40;
  uint64_t v41;
  char v42;

  v3 = v2;
  v5 = *v2;
  sub_2141D8BF8(&qword_253F13560);
  result = sub_2144256C4();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v34 = a2;
    v8 = 0;
    v36 = (_QWORD *)(v5 + 64);
    v37 = v5;
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v35 = (unint64_t)(v9 + 63) >> 6;
    v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v16 = v15 | (v8 << 6);
      }
      else
      {
        v17 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        result = (uint64_t)v36;
        if (v17 >= v35)
          goto LABEL_31;
        v18 = v36[v17];
        ++v8;
        if (!v18)
        {
          v8 = v17 + 1;
          if (v17 + 1 >= v35)
            goto LABEL_31;
          v18 = v36[v8];
          if (!v18)
          {
            v19 = v17 + 2;
            if (v19 >= v35)
            {
LABEL_31:
              if ((v34 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_38;
              }
              v33 = 1 << *(_BYTE *)(v5 + 32);
              if (v33 >= 64)
                bzero(v36, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v36 = -1 << v33;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v18 = v36[v19];
            if (!v18)
            {
              while (1)
              {
                v8 = v19 + 1;
                if (__OFADD__(v19, 1))
                  goto LABEL_40;
                if (v8 >= v35)
                  goto LABEL_31;
                v18 = v36[v8];
                ++v19;
                if (v18)
                  goto LABEL_21;
              }
            }
            v8 = v19;
          }
        }
LABEL_21:
        v11 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v8 << 6);
      }
      v20 = *(_QWORD *)(v5 + 56) + 72 * v16;
      v21 = *(_BYTE *)(*(_QWORD *)(v5 + 48) + v16);
      v42 = *(_BYTE *)(v20 + 64);
      v40 = *(_QWORD *)(v20 + 48);
      v41 = *(_QWORD *)(v20 + 56);
      v39 = *(_WORD *)(v20 + 40);
      v22 = *(_QWORD *)(v20 + 24);
      v38 = *(_QWORD *)(v20 + 32);
      v23 = *(_QWORD *)(v20 + 16);
      v24 = *(_BYTE *)(v20 + 8);
      v25 = *(_QWORD *)v20;
      sub_214425874();
      sub_214425880();
      result = sub_2144258B0();
      v26 = -1 << *(_BYTE *)(v7 + 32);
      v27 = result & ~v26;
      v28 = v27 >> 6;
      if (((-1 << v27) & ~*(_QWORD *)(v12 + 8 * (v27 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v12 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v29 = 0;
        v30 = (unint64_t)(63 - v26) >> 6;
        do
        {
          if (++v28 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v31 = v28 == v30;
          if (v28 == v30)
            v28 = 0;
          v29 |= v31;
          v32 = *(_QWORD *)(v12 + 8 * v28);
        }
        while (v32 == -1);
        v13 = __clz(__rbit64(~v32)) + (v28 << 6);
      }
      *(_QWORD *)(v12 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      *(_BYTE *)(*(_QWORD *)(v7 + 48) + v13) = v21;
      v14 = *(_QWORD *)(v7 + 56) + 72 * v13;
      *(_QWORD *)v14 = v25;
      *(_BYTE *)(v14 + 8) = v24;
      *(_QWORD *)(v14 + 16) = v23;
      *(_QWORD *)(v14 + 24) = v22;
      v5 = v37;
      *(_QWORD *)(v14 + 32) = v38;
      *(_WORD *)(v14 + 40) = v39;
      *(_QWORD *)(v14 + 48) = v40;
      *(_QWORD *)(v14 + 56) = v41;
      *(_BYTE *)(v14 + 64) = v42;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_38:
  *v3 = v7;
  return result;
}

uint64_t sub_21429BEDC(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  _QWORD *v34;
  char v35;

  v3 = v2;
  v5 = *v2;
  sub_2141D8BF8(&qword_253F15D20);
  v35 = a2;
  result = sub_2144256C4();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v34 = (_QWORD *)(v5 + 64);
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v33 = (unint64_t)(v9 + 63) >> 6;
    v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v19 = v18 | (v8 << 6);
      }
      else
      {
        v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v20 >= v33)
          goto LABEL_33;
        v21 = v34[v20];
        ++v8;
        if (!v21)
        {
          v8 = v20 + 1;
          if (v20 + 1 >= v33)
            goto LABEL_33;
          v21 = v34[v8];
          if (!v21)
          {
            v22 = v20 + 2;
            if (v22 >= v33)
            {
LABEL_33:
              if ((v35 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_40;
              }
              v32 = 1 << *(_BYTE *)(v5 + 32);
              if (v32 >= 64)
                bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v34 = -1 << v32;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v21 = v34[v22];
            if (!v21)
            {
              while (1)
              {
                v8 = v22 + 1;
                if (__OFADD__(v22, 1))
                  goto LABEL_42;
                if (v8 >= v33)
                  goto LABEL_33;
                v21 = v34[v8];
                ++v22;
                if (v21)
                  goto LABEL_30;
              }
            }
            v8 = v22;
          }
        }
LABEL_30:
        v11 = (v21 - 1) & v21;
        v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      v27 = *(_BYTE *)(*(_QWORD *)(v5 + 48) + v19);
      v28 = *(_QWORD *)(v5 + 56) + 24 * v19;
      v29 = *(_BYTE *)v28;
      v30 = *(_QWORD *)(v28 + 8);
      v31 = *(_QWORD *)(v28 + 16);
      if ((v35 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      sub_214425874();
      sub_214425880();
      result = sub_2144258B0();
      v13 = -1 << *(_BYTE *)(v7 + 32);
      v14 = result & ~v13;
      v15 = v14 >> 6;
      if (((-1 << v14) & ~*(_QWORD *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        v16 = __clz(__rbit64((-1 << v14) & ~*(_QWORD *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v23 = 0;
        v24 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v25 = v15 == v24;
          if (v15 == v24)
            v15 = 0;
          v23 |= v25;
          v26 = *(_QWORD *)(v12 + 8 * v15);
        }
        while (v26 == -1);
        v16 = __clz(__rbit64(~v26)) + (v15 << 6);
      }
      *(_QWORD *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(_BYTE *)(*(_QWORD *)(v7 + 48) + v16) = v27;
      v17 = *(_QWORD *)(v7 + 56) + 24 * v16;
      *(_BYTE *)v17 = v29;
      *(_QWORD *)(v17 + 8) = v30;
      *(_QWORD *)(v17 + 16) = v31;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_40:
  *v3 = v7;
  return result;
}

uint64_t sub_21429C1DC(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  _QWORD *v31;

  v3 = v2;
  v5 = *v2;
  sub_2141D8BF8(&qword_253F15D18);
  result = sub_2144256C4();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v30 = a2;
    v8 = 0;
    v31 = (_QWORD *)(v5 + 64);
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v12 = (unint64_t)(v9 + 63) >> 6;
    v13 = result + 64;
    while (1)
    {
      if (v11)
      {
        v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v16 = v15 | (v8 << 6);
      }
      else
      {
        v17 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v17 >= v12)
          goto LABEL_31;
        v18 = v31[v17];
        ++v8;
        if (!v18)
        {
          v8 = v17 + 1;
          if (v17 + 1 >= v12)
            goto LABEL_31;
          v18 = v31[v8];
          if (!v18)
          {
            v19 = v17 + 2;
            if (v19 >= v12)
            {
LABEL_31:
              if ((v30 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_38;
              }
              v29 = 1 << *(_BYTE *)(v5 + 32);
              if (v29 >= 64)
                bzero(v31, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v31 = -1 << v29;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v18 = v31[v19];
            if (!v18)
            {
              while (1)
              {
                v8 = v19 + 1;
                if (__OFADD__(v19, 1))
                  goto LABEL_40;
                if (v8 >= v12)
                  goto LABEL_31;
                v18 = v31[v8];
                ++v19;
                if (v18)
                  goto LABEL_21;
              }
            }
            v8 = v19;
          }
        }
LABEL_21:
        v11 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v8 << 6);
      }
      v20 = *(_BYTE *)(*(_QWORD *)(v5 + 48) + v16);
      v21 = *(_BYTE *)(*(_QWORD *)(v5 + 56) + v16);
      sub_214425874();
      sub_214425880();
      result = sub_2144258B0();
      v22 = -1 << *(_BYTE *)(v7 + 32);
      v23 = result & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v13 + 8 * (v23 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v13 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v27 = v24 == v26;
          if (v24 == v26)
            v24 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v13 + 8 * v24);
        }
        while (v28 == -1);
        v14 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(_QWORD *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      *(_BYTE *)(*(_QWORD *)(v7 + 48) + v14) = v20;
      *(_BYTE *)(*(_QWORD *)(v7 + 56) + v14) = v21;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_38:
  *v3 = v7;
  return result;
}

uint64_t sub_21429C4A0(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  __int128 v31;

  v3 = v2;
  v5 = *v2;
  sub_2141D8BF8(&qword_253F13308);
  result = sub_2144256C4();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v30 = v3;
    v8 = 0;
    v9 = (_QWORD *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v13 = (unint64_t)(v10 + 63) >> 6;
    v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        v19 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v20 = v19 | (v8 << 6);
      }
      else
      {
        v21 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v21 >= v13)
          goto LABEL_33;
        v22 = v9[v21];
        ++v8;
        if (!v22)
        {
          v8 = v21 + 1;
          if (v21 + 1 >= v13)
            goto LABEL_33;
          v22 = v9[v8];
          if (!v22)
          {
            v23 = v21 + 2;
            if (v23 >= v13)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                result = swift_release();
                v3 = v30;
                goto LABEL_40;
              }
              v29 = 1 << *(_BYTE *)(v5 + 32);
              if (v29 >= 64)
                bzero((void *)(v5 + 64), ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v9 = -1 << v29;
              v3 = v30;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v22 = v9[v23];
            if (!v22)
            {
              while (1)
              {
                v8 = v23 + 1;
                if (__OFADD__(v23, 1))
                  goto LABEL_42;
                if (v8 >= v13)
                  goto LABEL_33;
                v22 = v9[v8];
                ++v23;
                if (v22)
                  goto LABEL_30;
              }
            }
            v8 = v23;
          }
        }
LABEL_30:
        v12 = (v22 - 1) & v22;
        v20 = __clz(__rbit64(v22)) + (v8 << 6);
      }
      v28 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v20);
      v31 = *(_OWORD *)(*(_QWORD *)(v5 + 56) + 16 * v20);
      if ((a2 & 1) == 0)
        swift_retain();
      result = sub_214425868();
      v15 = -1 << *(_BYTE *)(v7 + 32);
      v16 = result & ~v15;
      v17 = v16 >> 6;
      if (((-1 << v16) & ~*(_QWORD *)(v14 + 8 * (v16 >> 6))) != 0)
      {
        v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v14 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v26 = v17 == v25;
          if (v17 == v25)
            v17 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v14 + 8 * v17);
        }
        while (v27 == -1);
        v18 = __clz(__rbit64(~v27)) + (v17 << 6);
      }
      *(_QWORD *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v18) = v28;
      *(_OWORD *)(*(_QWORD *)(v7 + 56) + 16 * v18) = v31;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_40:
  *v3 = v7;
  return result;
}

uint64_t sub_21429C760(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  char v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  _QWORD *v32;
  char v33;

  v4 = *v2;
  sub_2141D8BF8(&qword_253F11AA0);
  v33 = a2;
  result = sub_2144256C4();
  v6 = result;
  if (*(_QWORD *)(v4 + 16))
  {
    v7 = 0;
    v32 = (_QWORD *)(v4 + 64);
    v8 = 1 << *(_BYTE *)(v4 + 32);
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v4 + 64);
    v31 = (unint64_t)(v8 + 63) >> 6;
    v11 = result + 64;
    while (1)
    {
      if (v10)
      {
        v17 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v18 = v17 | (v7 << 6);
      }
      else
      {
        v19 = v7 + 1;
        if (__OFADD__(v7, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        result = v4 + 64;
        if (v19 >= v31)
          goto LABEL_33;
        v20 = v32[v19];
        ++v7;
        if (!v20)
        {
          v7 = v19 + 1;
          if (v19 + 1 >= v31)
            goto LABEL_33;
          v20 = v32[v7];
          if (!v20)
          {
            v21 = v19 + 2;
            if (v21 >= v31)
            {
LABEL_33:
              if ((v33 & 1) != 0)
              {
                v30 = 1 << *(_BYTE *)(v4 + 32);
                if (v30 >= 64)
                  bzero(v32, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v32 = -1 << v30;
                *(_QWORD *)(v4 + 16) = 0;
              }
              break;
            }
            v20 = v32[v21];
            if (!v20)
            {
              while (1)
              {
                v7 = v21 + 1;
                if (__OFADD__(v21, 1))
                  goto LABEL_41;
                if (v7 >= v31)
                  goto LABEL_33;
                v20 = v32[v7];
                ++v21;
                if (v20)
                  goto LABEL_30;
              }
            }
            v7 = v21;
          }
        }
LABEL_30:
        v10 = (v20 - 1) & v20;
        v18 = __clz(__rbit64(v20)) + (v7 << 6);
      }
      v26 = *(_BYTE *)(*(_QWORD *)(v4 + 48) + v18);
      v27 = (uint64_t *)(*(_QWORD *)(v4 + 56) + 16 * v18);
      v28 = *v27;
      v29 = v27[1];
      if ((v33 & 1) == 0)
      {
        swift_retain();
        swift_retain();
      }
      sub_214425874();
      sub_214425880();
      result = sub_2144258B0();
      v12 = -1 << *(_BYTE *)(v6 + 32);
      v13 = result & ~v12;
      v14 = v13 >> 6;
      if (((-1 << v13) & ~*(_QWORD *)(v11 + 8 * (v13 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v13) & ~*(_QWORD *)(v11 + 8 * (v13 >> 6)))) | v13 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v22 = 0;
        v23 = (unint64_t)(63 - v12) >> 6;
        do
        {
          if (++v14 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          v24 = v14 == v23;
          if (v14 == v23)
            v14 = 0;
          v22 |= v24;
          v25 = *(_QWORD *)(v11 + 8 * v14);
        }
        while (v25 == -1);
        v15 = __clz(__rbit64(~v25)) + (v14 << 6);
      }
      *(_QWORD *)(v11 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(_BYTE *)(*(_QWORD *)(v6 + 48) + v15) = v26;
      v16 = (_QWORD *)(*(_QWORD *)(v6 + 56) + 16 * v15);
      *v16 = v28;
      v16[1] = v29;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  result = swift_release();
  *v2 = v6;
  return result;
}

uint64_t sub_21429CA4C(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  char v37;

  v3 = v2;
  v5 = *v2;
  sub_2141D8BF8(&qword_253F105D8);
  v37 = a2;
  v6 = sub_2144256C4();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v35 = v2;
  v36 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  v12 = v6 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v10)
    {
      v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v11)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v11)
        goto LABEL_33;
      v24 = *(_QWORD *)(v36 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v11)
        {
LABEL_33:
          swift_release();
          v3 = v35;
          if ((v37 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v24 = *(_QWORD *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_42;
            if (v14 >= v11)
              goto LABEL_33;
            v24 = *(_QWORD *)(v36 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_30;
          }
        }
        v14 = v25;
      }
    }
LABEL_30:
    v10 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
      swift_bridgeObjectRetain();
    sub_214425874();
    sub_214424F14();
    result = sub_2144258B0();
    v15 = -1 << *(_BYTE *)(v7 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v18) = v33;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v35;
  v23 = (_QWORD *)(v5 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_21429CD50(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  int64_t v40;
  uint64_t v41;
  char v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;

  v3 = v2;
  v5 = *v2;
  sub_2141D8BF8(&qword_254D6A478);
  v42 = a2;
  v6 = sub_2144256C4();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_41;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v41 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v39 = v2;
  v40 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v13 << 6);
      goto LABEL_22;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v21 >= v40)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v41 + 8 * v21);
    ++v13;
    if (!v23)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v40)
        goto LABEL_34;
      v23 = *(_QWORD *)(v41 + 8 * v13);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v40)
        {
LABEL_34:
          swift_release();
          v3 = v39;
          if ((v42 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v23 = *(_QWORD *)(v41 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v13 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_43;
            if (v13 >= v40)
              goto LABEL_34;
            v23 = *(_QWORD *)(v41 + 8 * v13);
            ++v24;
            if (v23)
              goto LABEL_21;
          }
        }
        v13 = v24;
      }
    }
LABEL_21:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_22:
    v25 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v20);
    v27 = *v25;
    v26 = v25[1];
    v28 = *(_QWORD *)(v5 + 56) + 40 * v20;
    if ((v42 & 1) != 0)
    {
      v29 = *(_OWORD *)v28;
      v30 = *(_OWORD *)(v28 + 16);
      v45 = *(_QWORD *)(v28 + 32);
      v43 = v29;
      v44 = v30;
    }
    else
    {
      sub_2141F9E40(v28, (uint64_t)&v43);
      swift_bridgeObjectRetain();
    }
    sub_214425874();
    sub_214424F14();
    result = sub_2144258B0();
    v31 = -1 << *(_BYTE *)(v7 + 32);
    v32 = result & ~v31;
    v33 = v32 >> 6;
    if (((-1 << v32) & ~*(_QWORD *)(v11 + 8 * (v32 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v32) & ~*(_QWORD *)(v11 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v34 = 0;
      v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v36 = v33 == v35;
        if (v33 == v35)
          v33 = 0;
        v34 |= v36;
        v37 = *(_QWORD *)(v11 + 8 * v33);
      }
      while (v37 == -1);
      v14 = __clz(__rbit64(~v37)) + (v33 << 6);
    }
    *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    v15 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v14);
    *v15 = v27;
    v15[1] = v26;
    v16 = *(_QWORD *)(v7 + 56) + 40 * v14;
    v17 = v43;
    v18 = v44;
    *(_QWORD *)(v16 + 32) = v45;
    *(_OWORD *)v16 = v17;
    *(_OWORD *)(v16 + 16) = v18;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v39;
  v22 = (_QWORD *)(v5 + 64);
  if ((v42 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v38 = 1 << *(_BYTE *)(v5 + 32);
  if (v38 >= 64)
    bzero(v22, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v38;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_21429D084(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int64_t v39;
  _QWORD *v40;
  char v41;

  v3 = v2;
  v5 = *v2;
  sub_2141D8BF8(&qword_254D6A480);
  v41 = a2;
  v6 = sub_2144256C4();
  v7 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v40 = (_QWORD *)(v5 + 64);
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v5 + 64);
    v39 = (unint64_t)(v8 + 63) >> 6;
    v11 = v6 + 64;
    result = swift_retain();
    v13 = 0;
    while (1)
    {
      if (v10)
      {
        v20 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v21 = v20 | (v13 << 6);
      }
      else
      {
        v22 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v22 >= v39)
          goto LABEL_33;
        v23 = v40[v22];
        ++v13;
        if (!v23)
        {
          v13 = v22 + 1;
          if (v22 + 1 >= v39)
            goto LABEL_33;
          v23 = v40[v13];
          if (!v23)
          {
            v24 = v22 + 2;
            if (v24 >= v39)
            {
LABEL_33:
              swift_release();
              v3 = v2;
              if ((v41 & 1) != 0)
              {
                v38 = 1 << *(_BYTE *)(v5 + 32);
                if (v38 >= 64)
                  bzero(v40, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v40 = -1 << v38;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v23 = v40[v24];
            if (!v23)
            {
              while (1)
              {
                v13 = v24 + 1;
                if (__OFADD__(v24, 1))
                  goto LABEL_40;
                if (v13 >= v39)
                  goto LABEL_33;
                v23 = v40[v13];
                ++v24;
                if (v23)
                  goto LABEL_30;
              }
            }
            v13 = v24;
          }
        }
LABEL_30:
        v10 = (v23 - 1) & v23;
        v21 = __clz(__rbit64(v23)) + (v13 << 6);
      }
      v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
      v31 = *v29;
      v30 = v29[1];
      v32 = (uint64_t *)(*(_QWORD *)(v5 + 56) + 40 * v21);
      v34 = *v32;
      v33 = v32[1];
      v35 = v32[2];
      v36 = v32[3];
      v37 = v32[4];
      if ((v41 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      sub_214425874();
      sub_214424F14();
      result = sub_2144258B0();
      v14 = -1 << *(_BYTE *)(v7 + 32);
      v15 = result & ~v14;
      v16 = v15 >> 6;
      if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v27 = v16 == v26;
          if (v16 == v26)
            v16 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v11 + 8 * v16);
        }
        while (v28 == -1);
        v17 = __clz(__rbit64(~v28)) + (v16 << 6);
      }
      *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
      *v18 = v31;
      v18[1] = v30;
      v19 = (_QWORD *)(*(_QWORD *)(v7 + 56) + 40 * v17);
      *v19 = v34;
      v19[1] = v33;
      v19[2] = v35;
      v19[3] = v36;
      v19[4] = v37;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_21429D3B8(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  char v36;

  v3 = v2;
  v5 = *v2;
  sub_2141D8BF8(&qword_253F105E0);
  v36 = a2;
  v6 = sub_2144256C4();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v35 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v34 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v34)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v35 + 8 * v21);
    ++v13;
    if (!v23)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v34)
        goto LABEL_33;
      v23 = *(_QWORD *)(v35 + 8 * v13);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v34)
        {
LABEL_33:
          swift_release();
          if ((v36 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v23 = *(_QWORD *)(v35 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v13 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_42;
            if (v13 >= v34)
              goto LABEL_33;
            v23 = *(_QWORD *)(v35 + 8 * v13);
            ++v24;
            if (v23)
              goto LABEL_30;
          }
        }
        v13 = v24;
      }
    }
LABEL_30:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v20);
    v31 = *v29;
    v30 = v29[1];
    v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v20);
    if ((v36 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_retain();
    }
    sub_214425874();
    sub_214424F14();
    result = sub_2144258B0();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v27 = v16 == v26;
        if (v16 == v26)
          v16 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
    *v18 = v31;
    v18[1] = v30;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v17) = v32;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v22 = (_QWORD *)(v5 + 64);
  if ((v36 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v33 = 1 << *(_BYTE *)(v5 + 32);
  if (v33 >= 64)
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v33;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_21429D6CC(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  _QWORD *v30;

  v3 = v2;
  v5 = *v2;
  sub_2141D8BF8(&qword_253F11FD0);
  result = sub_2144256C4();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v30 = (_QWORD *)(v5 + 64);
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v29 = (unint64_t)(v9 + 63) >> 6;
    v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        v17 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v18 = v17 | (v8 << 6);
      }
      else
      {
        v19 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v19 >= v29)
          goto LABEL_33;
        v20 = v30[v19];
        ++v8;
        if (!v20)
        {
          v8 = v19 + 1;
          if (v19 + 1 >= v29)
            goto LABEL_33;
          v20 = v30[v8];
          if (!v20)
          {
            v21 = v19 + 2;
            if (v21 >= v29)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_40;
              }
              v28 = 1 << *(_BYTE *)(v5 + 32);
              if (v28 >= 64)
                bzero(v30, ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v30 = -1 << v28;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v20 = v30[v21];
            if (!v20)
            {
              while (1)
              {
                v8 = v21 + 1;
                if (__OFADD__(v21, 1))
                  goto LABEL_42;
                if (v8 >= v29)
                  goto LABEL_33;
                v20 = v30[v8];
                ++v21;
                if (v20)
                  goto LABEL_30;
              }
            }
            v8 = v21;
          }
        }
LABEL_30:
        v11 = (v20 - 1) & v20;
        v18 = __clz(__rbit64(v20)) + (v8 << 6);
      }
      v26 = *(_BYTE *)(*(_QWORD *)(v5 + 48) + v18);
      v27 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v18);
      if ((a2 & 1) == 0)
        swift_bridgeObjectRetain();
      sub_214425874();
      sub_214425880();
      result = sub_2144258B0();
      v13 = -1 << *(_BYTE *)(v7 + 32);
      v14 = result & ~v13;
      v15 = v14 >> 6;
      if (((-1 << v14) & ~*(_QWORD *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        v16 = __clz(__rbit64((-1 << v14) & ~*(_QWORD *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v22 = 0;
        v23 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v24 = v15 == v23;
          if (v15 == v23)
            v15 = 0;
          v22 |= v24;
          v25 = *(_QWORD *)(v12 + 8 * v15);
        }
        while (v25 == -1);
        v16 = __clz(__rbit64(~v25)) + (v15 << 6);
      }
      *(_QWORD *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(_BYTE *)(*(_QWORD *)(v7 + 48) + v16) = v26;
      *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v16) = v27;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_40:
  *v3 = v7;
  return result;
}

uint64_t sub_21429D99C(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  _QWORD *v30;

  v3 = v2;
  v5 = *v2;
  sub_2141D8BF8(&qword_253F15D08);
  result = sub_2144256C4();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v30 = (_QWORD *)(v5 + 64);
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v29 = (unint64_t)(v9 + 63) >> 6;
    v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        v17 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v18 = v17 | (v8 << 6);
      }
      else
      {
        v19 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v19 >= v29)
          goto LABEL_33;
        v20 = v30[v19];
        ++v8;
        if (!v20)
        {
          v8 = v19 + 1;
          if (v19 + 1 >= v29)
            goto LABEL_33;
          v20 = v30[v8];
          if (!v20)
          {
            v21 = v19 + 2;
            if (v21 >= v29)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_40;
              }
              v28 = 1 << *(_BYTE *)(v5 + 32);
              if (v28 >= 64)
                bzero(v30, ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v30 = -1 << v28;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v20 = v30[v21];
            if (!v20)
            {
              while (1)
              {
                v8 = v21 + 1;
                if (__OFADD__(v21, 1))
                  goto LABEL_42;
                if (v8 >= v29)
                  goto LABEL_33;
                v20 = v30[v8];
                ++v21;
                if (v20)
                  goto LABEL_30;
              }
            }
            v8 = v21;
          }
        }
LABEL_30:
        v11 = (v20 - 1) & v20;
        v18 = __clz(__rbit64(v20)) + (v8 << 6);
      }
      v26 = *(_BYTE *)(*(_QWORD *)(v5 + 48) + v18);
      v27 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v18);
      if ((a2 & 1) == 0)
        swift_retain();
      sub_214425874();
      sub_214425880();
      result = sub_2144258B0();
      v13 = -1 << *(_BYTE *)(v7 + 32);
      v14 = result & ~v13;
      v15 = v14 >> 6;
      if (((-1 << v14) & ~*(_QWORD *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        v16 = __clz(__rbit64((-1 << v14) & ~*(_QWORD *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v22 = 0;
        v23 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v24 = v15 == v23;
          if (v15 == v23)
            v15 = 0;
          v22 |= v24;
          v25 = *(_QWORD *)(v12 + 8 * v15);
        }
        while (v25 == -1);
        v16 = __clz(__rbit64(~v25)) + (v15 << 6);
      }
      *(_QWORD *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(_BYTE *)(*(_QWORD *)(v7 + 48) + v16) = v26;
      *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v16) = v27;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_40:
  *v3 = v7;
  return result;
}

uint64_t sub_21429DC6C(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  _QWORD *v31;

  v4 = v3;
  v6 = *v3;
  sub_2141D8BF8(a3);
  result = sub_2144256C4();
  v8 = result;
  if (*(_QWORD *)(v6 + 16))
  {
    v9 = 0;
    v31 = (_QWORD *)(v6 + 64);
    v10 = 1 << *(_BYTE *)(v6 + 32);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v6 + 64);
    v30 = (unint64_t)(v10 + 63) >> 6;
    v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        v18 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v19 = v18 | (v9 << 6);
      }
      else
      {
        v20 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        result = v6 + 64;
        if (v20 >= v30)
          goto LABEL_33;
        v21 = v31[v20];
        ++v9;
        if (!v21)
        {
          v9 = v20 + 1;
          if (v20 + 1 >= v30)
            goto LABEL_33;
          v21 = v31[v9];
          if (!v21)
          {
            v22 = v20 + 2;
            if (v22 >= v30)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                result = swift_release();
                v4 = v3;
                goto LABEL_40;
              }
              v29 = 1 << *(_BYTE *)(v6 + 32);
              if (v29 >= 64)
                bzero(v31, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v31 = -1 << v29;
              v4 = v3;
              *(_QWORD *)(v6 + 16) = 0;
              break;
            }
            v21 = v31[v22];
            if (!v21)
            {
              while (1)
              {
                v9 = v22 + 1;
                if (__OFADD__(v22, 1))
                  goto LABEL_42;
                if (v9 >= v30)
                  goto LABEL_33;
                v21 = v31[v9];
                ++v22;
                if (v21)
                  goto LABEL_30;
              }
            }
            v9 = v22;
          }
        }
LABEL_30:
        v12 = (v21 - 1) & v21;
        v19 = __clz(__rbit64(v21)) + (v9 << 6);
      }
      v27 = *(_BYTE *)(*(_QWORD *)(v6 + 48) + v19);
      v28 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v19);
      if ((a2 & 1) == 0)
        swift_retain();
      sub_214425874();
      sub_214425880();
      result = sub_2144258B0();
      v14 = -1 << *(_BYTE *)(v8 + 32);
      v15 = result & ~v14;
      v16 = v15 >> 6;
      if (((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v23 = 0;
        v24 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v25 = v16 == v24;
          if (v16 == v24)
            v16 = 0;
          v23 |= v25;
          v26 = *(_QWORD *)(v13 + 8 * v16);
        }
        while (v26 == -1);
        v17 = __clz(__rbit64(~v26)) + (v16 << 6);
      }
      *(_QWORD *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      *(_BYTE *)(*(_QWORD *)(v8 + 48) + v17) = v27;
      *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v17) = v28;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release();
LABEL_40:
  *v4 = v8;
  return result;
}

uint64_t sub_21429DF38(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  _QWORD *v34;
  char v35;

  v3 = v2;
  v5 = *v2;
  sub_2141D8BF8(&qword_253F15D10);
  v35 = a2;
  result = sub_2144256C4();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v34 = (_QWORD *)(v5 + 64);
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v33 = (unint64_t)(v9 + 63) >> 6;
    v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v19 = v18 | (v8 << 6);
      }
      else
      {
        v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v20 >= v33)
          goto LABEL_33;
        v21 = v34[v20];
        ++v8;
        if (!v21)
        {
          v8 = v20 + 1;
          if (v20 + 1 >= v33)
            goto LABEL_33;
          v21 = v34[v8];
          if (!v21)
          {
            v22 = v20 + 2;
            if (v22 >= v33)
            {
LABEL_33:
              if ((v35 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_40;
              }
              v32 = 1 << *(_BYTE *)(v5 + 32);
              if (v32 >= 64)
                bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v34 = -1 << v32;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v21 = v34[v22];
            if (!v21)
            {
              while (1)
              {
                v8 = v22 + 1;
                if (__OFADD__(v22, 1))
                  goto LABEL_42;
                if (v8 >= v33)
                  goto LABEL_33;
                v21 = v34[v8];
                ++v22;
                if (v21)
                  goto LABEL_30;
              }
            }
            v8 = v22;
          }
        }
LABEL_30:
        v11 = (v21 - 1) & v21;
        v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      v27 = *(_BYTE *)(*(_QWORD *)(v5 + 48) + v19);
      v28 = *(_QWORD *)(v5 + 56) + 24 * v19;
      v29 = *(_BYTE *)v28;
      v30 = *(_QWORD *)(v28 + 8);
      v31 = *(_QWORD *)(v28 + 16);
      if ((v35 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      sub_214425874();
      sub_214425880();
      result = sub_2144258B0();
      v13 = -1 << *(_BYTE *)(v7 + 32);
      v14 = result & ~v13;
      v15 = v14 >> 6;
      if (((-1 << v14) & ~*(_QWORD *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        v16 = __clz(__rbit64((-1 << v14) & ~*(_QWORD *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v23 = 0;
        v24 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v25 = v15 == v24;
          if (v15 == v24)
            v15 = 0;
          v23 |= v25;
          v26 = *(_QWORD *)(v12 + 8 * v15);
        }
        while (v26 == -1);
        v16 = __clz(__rbit64(~v26)) + (v15 << 6);
      }
      *(_QWORD *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(_BYTE *)(*(_QWORD *)(v7 + 48) + v16) = v27;
      v17 = *(_QWORD *)(v7 + 56) + 24 * v16;
      *(_BYTE *)v17 = v29;
      *(_QWORD *)(v17 + 8) = v30;
      *(_QWORD *)(v17 + 16) = v31;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_40:
  *v3 = v7;
  return result;
}

uint64_t sub_21429E238(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  char v35;

  v3 = v2;
  v5 = *v2;
  sub_2141D8BF8(&qword_253F11FE0);
  result = sub_2144256C4();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v35 = a2;
    v34 = v3;
    v8 = 0;
    v9 = (uint64_t *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    v32 = -1 << v10;
    v33 = v10;
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v13 = (unint64_t)(v10 + 63) >> 6;
    v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        v17 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v18 = v17 | (v8 << 6);
      }
      else
      {
        v19 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v19 >= v13)
          goto LABEL_31;
        v20 = v9[v19];
        ++v8;
        if (!v20)
        {
          v8 = v19 + 1;
          if (v19 + 1 >= v13)
            goto LABEL_31;
          v20 = v9[v8];
          if (!v20)
          {
            v21 = v19 + 2;
            if (v21 >= v13)
            {
LABEL_31:
              if ((v35 & 1) == 0)
              {
                result = swift_release();
                v3 = v34;
                goto LABEL_38;
              }
              if (v33 >= 64)
                bzero((void *)(v5 + 64), 8 * v13);
              else
                *v9 = v32;
              v3 = v34;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v20 = v9[v21];
            if (!v20)
            {
              while (1)
              {
                v8 = v21 + 1;
                if (__OFADD__(v21, 1))
                  goto LABEL_40;
                if (v8 >= v13)
                  goto LABEL_31;
                v20 = v9[v8];
                ++v21;
                if (v20)
                  goto LABEL_21;
              }
            }
            v8 = v21;
          }
        }
LABEL_21:
        v12 = (v20 - 1) & v20;
        v18 = __clz(__rbit64(v20)) + (v8 << 6);
      }
      v22 = 8 * v18;
      v23 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + v22);
      v24 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + v22);
      result = sub_214425868();
      v25 = -1 << *(_BYTE *)(v7 + 32);
      v26 = result & ~v25;
      v27 = v26 >> 6;
      if (((-1 << v26) & ~*(_QWORD *)(v14 + 8 * (v26 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v14 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v30 = v27 == v29;
          if (v27 == v29)
            v27 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v14 + 8 * v27);
        }
        while (v31 == -1);
        v15 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(_QWORD *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      v16 = 8 * v15;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + v16) = v23;
      *(_QWORD *)(*(_QWORD *)(v7 + 56) + v16) = v24;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_38:
  *v3 = v7;
  return result;
}

uint64_t sub_21429E4DC(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  int64_t v33;
  _QWORD *v34;

  v3 = v2;
  v5 = *v2;
  sub_2141D8BF8(qword_254D6A488);
  result = sub_2144256C4();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v32 = a2;
    v8 = 0;
    v34 = (_QWORD *)(v5 + 64);
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v33 = (unint64_t)(v9 + 63) >> 6;
    v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v16 = v15 | (v8 << 6);
      }
      else
      {
        v17 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v17 >= v33)
          goto LABEL_31;
        v18 = v34[v17];
        ++v8;
        if (!v18)
        {
          v8 = v17 + 1;
          if (v17 + 1 >= v33)
            goto LABEL_31;
          v18 = v34[v8];
          if (!v18)
          {
            v19 = v17 + 2;
            if (v19 >= v33)
            {
LABEL_31:
              if ((v32 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_38;
              }
              v31 = 1 << *(_BYTE *)(v5 + 32);
              if (v31 >= 64)
                bzero(v34, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v34 = -1 << v31;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v18 = v34[v19];
            if (!v18)
            {
              while (1)
              {
                v8 = v19 + 1;
                if (__OFADD__(v19, 1))
                  goto LABEL_40;
                if (v8 >= v33)
                  goto LABEL_31;
                v18 = v34[v8];
                ++v19;
                if (v18)
                  goto LABEL_21;
              }
            }
            v8 = v19;
          }
        }
LABEL_21:
        v11 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v8 << 6);
      }
      v20 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v16);
      v22 = *v20;
      v21 = v20[1];
      v23 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v16);
      sub_214425874();
      sub_214425898();
      sub_214425898();
      result = sub_2144258B0();
      v24 = -1 << *(_BYTE *)(v7 + 32);
      v25 = result & ~v24;
      v26 = v25 >> 6;
      if (((-1 << v25) & ~*(_QWORD *)(v12 + 8 * (v25 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v12 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v29 = v26 == v28;
          if (v26 == v28)
            v26 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v12 + 8 * v26);
        }
        while (v30 == -1);
        v13 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(_QWORD *)(v12 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      v14 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v13);
      *v14 = v22;
      v14[1] = v21;
      *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v13) = v23;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_38:
  *v3 = v7;
  return result;
}

uint64_t sub_21429E7C0(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char v40;
  unint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  int64_t v46;
  _QWORD *v47;
  uint64_t i;
  char v49;
  uint64_t v50;

  v3 = v2;
  v5 = *v2;
  sub_2141D8BF8(&qword_253F10758);
  v49 = a2;
  v6 = sub_2144256C4();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_64;
  v45 = v2;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v47 = (_QWORD *)(v5 + 64);
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v46 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  for (i = v5; ; v5 = i)
  {
    if (v10)
    {
      v17 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v18 = v17 | (v13 << 6);
      goto LABEL_22;
    }
    v19 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_65:
      __break(1u);
LABEL_66:
      __break(1u);
      return result;
    }
    if (v19 >= v46)
      break;
    v20 = v47;
    v21 = v47[v19];
    ++v13;
    if (!v21)
    {
      v13 = v19 + 1;
      if (v19 + 1 >= v46)
        goto LABEL_57;
      v21 = v47[v13];
      if (!v21)
      {
        v22 = v19 + 2;
        if (v22 >= v46)
        {
LABEL_57:
          swift_release();
          v3 = v45;
          if ((v49 & 1) == 0)
            goto LABEL_64;
          goto LABEL_60;
        }
        v21 = v47[v22];
        if (!v21)
        {
          while (1)
          {
            v13 = v22 + 1;
            if (__OFADD__(v22, 1))
              goto LABEL_66;
            if (v13 >= v46)
              goto LABEL_57;
            v21 = v47[v13];
            ++v22;
            if (v21)
              goto LABEL_21;
          }
        }
        v13 = v22;
      }
    }
LABEL_21:
    v10 = (v21 - 1) & v21;
    v18 = __clz(__rbit64(v21)) + (v13 << 6);
LABEL_22:
    v23 = *(_QWORD *)(v5 + 56);
    v24 = *(_QWORD *)(v5 + 48) + 48 * v18;
    v25 = *(_QWORD *)v24;
    v26 = *(_QWORD *)(v24 + 8);
    v27 = *(_QWORD *)(v24 + 16);
    v28 = *(_QWORD *)(v24 + 24);
    v50 = *(_QWORD *)(v24 + 32);
    v29 = *(unsigned __int8 *)(v24 + 40);
    v30 = *(_QWORD *)(v23 + 8 * v18);
    if ((v49 & 1) == 0)
    {
      sub_2142AB508(v25, v26, v27, v28, v50, *(_BYTE *)(v24 + 40));
      swift_retain();
    }
    sub_214425874();
    if (v27 < 0)
    {
      sub_214425880();
      if (v27 <= 0xFBu)
      {
        sub_21442588C();
        if ((v27 & 0x80) != 0)
        {
          sub_214425880();
          sub_2143FD828();
          v31 = v25;
          v32 = v26;
          v33 = v27;
        }
        else
        {
          sub_214425880();
          if ((_BYTE)v27)
          {
            sub_214425880();
            if (v27 == 1)
            {
              sub_214425898();
              v31 = v25;
              v32 = v26;
              v33 = 1;
            }
            else
            {
              sub_2141DD14C(v25, v26, 2);
              sub_214424F14();
              v31 = v25;
              v32 = v26;
              v33 = 2;
            }
          }
          else
          {
            sub_214425880();
            sub_214425898();
            v31 = v25;
            v32 = v26;
            v33 = 0;
          }
        }
        sub_2141EF1BC(v31, v32, v33);
      }
      else
      {
        sub_21442588C();
      }
      if (v29 < 0xFC)
      {
        sub_21442588C();
        if ((v29 & 0x80) != 0)
        {
          sub_214425880();
          sub_2143FD828();
          v34 = v28;
          v35 = v50;
          v36 = v29;
        }
        else
        {
          sub_214425880();
          if (v29)
          {
            sub_214425880();
            if (v29 == 1)
            {
              sub_214425898();
              v34 = v28;
              v35 = v50;
              v36 = 1;
            }
            else
            {
              sub_2141DD14C(v28, v50, 2);
              sub_214424F14();
              v34 = v28;
              v35 = v50;
              v36 = 2;
            }
          }
          else
          {
            sub_214425880();
            sub_214425898();
            v34 = v28;
            v35 = v50;
            v36 = 0;
          }
        }
        sub_2141EF1BC(v34, v35, v36);
      }
      else
      {
        sub_21442588C();
      }
    }
    else
    {
      sub_214425880();
      sub_214425880();
      if (v27 > 1u)
        sub_214424F14();
      else
        sub_214425898();
    }
    result = sub_2144258B0();
    v37 = -1 << *(_BYTE *)(v7 + 32);
    v38 = result & ~v37;
    v39 = v38 >> 6;
    if (((-1 << v38) & ~*(_QWORD *)(v11 + 8 * (v38 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v38) & ~*(_QWORD *)(v11 + 8 * (v38 >> 6)))) | v38 & 0x7FFFFFFFFFFFFFC0;
      v15 = v30;
    }
    else
    {
      v40 = 0;
      v41 = (unint64_t)(63 - v37) >> 6;
      v15 = v30;
      do
      {
        if (++v39 == v41 && (v40 & 1) != 0)
        {
          __break(1u);
          goto LABEL_65;
        }
        v42 = v39 == v41;
        if (v39 == v41)
          v39 = 0;
        v40 |= v42;
        v43 = *(_QWORD *)(v11 + 8 * v39);
      }
      while (v43 == -1);
      v14 = __clz(__rbit64(~v43)) + (v39 << 6);
    }
    *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    v16 = *(_QWORD *)(v7 + 48) + 48 * v14;
    *(_QWORD *)v16 = v25;
    *(_QWORD *)(v16 + 8) = v26;
    *(_QWORD *)(v16 + 16) = v27;
    *(_QWORD *)(v16 + 24) = v28;
    *(_QWORD *)(v16 + 32) = v50;
    *(_BYTE *)(v16 + 40) = v29;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v14) = v15;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v45;
  v20 = v47;
  if ((v49 & 1) == 0)
    goto LABEL_64;
LABEL_60:
  v44 = 1 << *(_BYTE *)(v5 + 32);
  if (v44 >= 64)
    bzero(v20, ((unint64_t)(v44 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v20 = -1 << v44;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_64:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_21429ED80(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t *v39;
  int64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  int64_t v46;
  uint64_t v47;
  char v48[72];
  _QWORD v49[8];
  char v50;

  v3 = v2;
  v5 = *v2;
  sub_2141D8BF8(&qword_253F11C80);
  v44 = a2;
  v6 = sub_2144256C4();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v41 = (_QWORD *)(v5 + 64);
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v39 = v2;
  v40 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  v42 = v5;
  v43 = v7;
  while (1)
  {
    if (v10)
    {
      v45 = (v10 - 1) & v10;
      v46 = v13;
      v18 = __clz(__rbit64(v10)) | (v13 << 6);
      goto LABEL_31;
    }
    v19 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v19 >= v40)
      break;
    v20 = v41[v19];
    v21 = v13 + 1;
    if (!v20)
    {
      v21 = v13 + 2;
      if (v13 + 2 >= v40)
        goto LABEL_33;
      v20 = v41[v21];
      if (!v20)
      {
        v22 = v13 + 3;
        if (v13 + 3 >= v40)
        {
LABEL_33:
          swift_release();
          v3 = v39;
          v7 = v43;
          if ((v44 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v20 = v41[v22];
        if (!v20)
        {
          while (1)
          {
            v21 = v22 + 1;
            if (__OFADD__(v22, 1))
              goto LABEL_42;
            if (v21 >= v40)
              goto LABEL_33;
            v20 = v41[v21];
            ++v22;
            if (v20)
              goto LABEL_30;
          }
        }
        v21 = v13 + 3;
      }
    }
LABEL_30:
    v45 = (v20 - 1) & v20;
    v46 = v21;
    v18 = __clz(__rbit64(v20)) + (v21 << 6);
LABEL_31:
    v27 = *(_QWORD *)(v5 + 56);
    v28 = *(_QWORD *)(v5 + 48) + 72 * v18;
    v29 = *(_QWORD *)v28;
    v30 = *(_QWORD *)(v28 + 8);
    v32 = *(_QWORD *)(v28 + 16);
    v31 = *(_QWORD *)(v28 + 24);
    v34 = *(_QWORD *)(v28 + 32);
    v33 = *(_QWORD *)(v28 + 40);
    v36 = *(_QWORD *)(v28 + 48);
    v35 = *(_QWORD *)(v28 + 56);
    v37 = *(_BYTE *)(v28 + 64);
    v47 = *(_QWORD *)(v27 + 8 * v18);
    if ((v44 & 1) == 0)
    {
      sub_2142AB430(v29, v30, v32, v31, v34, v33, v36, v35, v37);
      swift_retain();
    }
    v49[0] = v29;
    v49[1] = v30;
    v49[2] = v32;
    v49[3] = v31;
    v49[4] = v34;
    v49[5] = v33;
    v49[6] = v36;
    v49[7] = v35;
    v50 = v37;
    v7 = v43;
    sub_214425874();
    sub_214390788((uint64_t)v48);
    result = sub_2144258B0();
    v14 = -1 << *(_BYTE *)(v43 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      v5 = v42;
    }
    else
    {
      v23 = 0;
      v24 = (unint64_t)(63 - v14) >> 6;
      v5 = v42;
      do
      {
        if (++v16 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v25 = v16 == v24;
        if (v16 == v24)
          v16 = 0;
        v23 |= v25;
        v26 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v26 == -1);
      v17 = __clz(__rbit64(~v26)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    result = sub_2142AB498((uint64_t)v49, *(_QWORD *)(v43 + 48) + 72 * v17);
    v13 = v46;
    *(_QWORD *)(*(_QWORD *)(v43 + 56) + 8 * v17) = v47;
    ++*(_QWORD *)(v43 + 16);
    v10 = v45;
  }
  swift_release();
  v3 = v39;
  if ((v44 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v38 = 1 << *(_BYTE *)(v5 + 32);
  if (v38 >= 64)
    bzero(v41, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v41 = -1 << v38;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_21429F108(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  __int128 v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  __int128 v31;

  v3 = v2;
  v5 = *v2;
  sub_2141D8BF8(&qword_253F103B8);
  result = sub_2144256C4();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v30 = (_QWORD *)(v5 + 64);
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v12 = (unint64_t)(v9 + 63) >> 6;
    v13 = result + 64;
    while (1)
    {
      if (v11)
      {
        v19 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v20 = v19 | (v8 << 6);
      }
      else
      {
        v21 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v21 >= v12)
          goto LABEL_33;
        v22 = v30[v21];
        ++v8;
        if (!v22)
        {
          v8 = v21 + 1;
          if (v21 + 1 >= v12)
            goto LABEL_33;
          v22 = v30[v8];
          if (!v22)
          {
            v23 = v21 + 2;
            if (v23 >= v12)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_40;
              }
              v29 = 1 << *(_BYTE *)(v5 + 32);
              if (v29 >= 64)
                bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v30 = -1 << v29;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v22 = v30[v23];
            if (!v22)
            {
              while (1)
              {
                v8 = v23 + 1;
                if (__OFADD__(v23, 1))
                  goto LABEL_42;
                if (v8 >= v12)
                  goto LABEL_33;
                v22 = v30[v8];
                ++v23;
                if (v22)
                  goto LABEL_30;
              }
            }
            v8 = v23;
          }
        }
LABEL_30:
        v11 = (v22 - 1) & v22;
        v20 = __clz(__rbit64(v22)) + (v8 << 6);
      }
      v31 = *(_OWORD *)(*(_QWORD *)(v5 + 48) + 16 * v20);
      v28 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v20);
      if ((a2 & 1) == 0)
        swift_bridgeObjectRetain();
      sub_214425874();
      sub_214425898();
      sub_214425898();
      result = sub_2144258B0();
      v14 = -1 << *(_BYTE *)(v7 + 32);
      v15 = result & ~v14;
      v16 = v15 >> 6;
      if (((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
        v18 = v31;
      }
      else
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v14) >> 6;
        v18 = v31;
        do
        {
          if (++v16 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v26 = v16 == v25;
          if (v16 == v25)
            v16 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v13 + 8 * v16);
        }
        while (v27 == -1);
        v17 = __clz(__rbit64(~v27)) + (v16 << 6);
      }
      *(_QWORD *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      *(_OWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17) = v18;
      *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v17) = v28;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_40:
  *v3 = v7;
  return result;
}

uint64_t sub_21429F3F0(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  char v37;

  v3 = v2;
  v5 = *v2;
  sub_2141D8BF8(&qword_254D6A470);
  v37 = a2;
  v6 = sub_2144256C4();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v35 = v2;
  v36 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  v12 = v6 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v10)
    {
      v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v11)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v11)
        goto LABEL_33;
      v24 = *(_QWORD *)(v36 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v11)
        {
LABEL_33:
          swift_release();
          v3 = v35;
          if ((v37 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v24 = *(_QWORD *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_42;
            if (v14 >= v11)
              goto LABEL_33;
            v24 = *(_QWORD *)(v36 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_30;
          }
        }
        v14 = v25;
      }
    }
LABEL_30:
    v10 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
      swift_bridgeObjectRetain();
    sub_214425874();
    sub_214424F14();
    result = sub_2144258B0();
    v15 = -1 << *(_BYTE *)(v7 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v18) = v33;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v35;
  v23 = (_QWORD *)(v5 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_21429F6F4(uint64_t a1, char a2)
{
  return sub_21429F70C(a1, a2, &qword_253F10BA0);
}

uint64_t sub_21429F700(uint64_t a1, char a2)
{
  return sub_21429F70C(a1, a2, &qword_254D6A468);
}

uint64_t sub_21429F70C(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  int64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;

  v4 = v3;
  v6 = *v3;
  sub_2141D8BF8(a3);
  result = sub_2144256C4();
  v8 = result;
  if (*(_QWORD *)(v6 + 16))
  {
    v9 = 0;
    v10 = (uint64_t *)(v6 + 64);
    v11 = 1 << *(_BYTE *)(v6 + 32);
    v32 = -1 << v11;
    v33 = v11;
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v13 = v12 & *(_QWORD *)(v6 + 64);
    v34 = (unint64_t)(v11 + 63) >> 6;
    v14 = result + 64;
    while (1)
    {
      if (v13)
      {
        v20 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        v21 = v20 | (v9 << 6);
      }
      else
      {
        v22 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v22 >= v34)
          goto LABEL_33;
        v23 = v10[v22];
        ++v9;
        if (!v23)
        {
          v9 = v22 + 1;
          if (v22 + 1 >= v34)
            goto LABEL_33;
          v23 = v10[v9];
          if (!v23)
          {
            v24 = v22 + 2;
            if (v24 >= v34)
            {
LABEL_33:
              if ((a2 & 1) != 0)
              {
                if (v33 >= 64)
                  bzero((void *)(v6 + 64), 8 * v34);
                else
                  *v10 = v32;
                *(_QWORD *)(v6 + 16) = 0;
              }
              break;
            }
            v23 = v10[v24];
            if (!v23)
            {
              while (1)
              {
                v9 = v24 + 1;
                if (__OFADD__(v24, 1))
                  goto LABEL_41;
                if (v9 >= v34)
                  goto LABEL_33;
                v23 = v10[v9];
                ++v24;
                if (v23)
                  goto LABEL_30;
              }
            }
            v9 = v24;
          }
        }
LABEL_30:
        v13 = (v23 - 1) & v23;
        v21 = __clz(__rbit64(v23)) + (v9 << 6);
      }
      v29 = 8 * v21;
      v30 = *(_QWORD *)(*(_QWORD *)(v6 + 48) + v29);
      v31 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + v29);
      if ((a2 & 1) == 0)
        swift_bridgeObjectRetain();
      result = sub_214425868();
      v15 = -1 << *(_BYTE *)(v8 + 32);
      v16 = result & ~v15;
      v17 = v16 >> 6;
      if (((-1 << v16) & ~*(_QWORD *)(v14 + 8 * (v16 >> 6))) != 0)
      {
        v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v14 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          v27 = v17 == v26;
          if (v17 == v26)
            v17 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v14 + 8 * v17);
        }
        while (v28 == -1);
        v18 = __clz(__rbit64(~v28)) + (v17 << 6);
      }
      *(_QWORD *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      v19 = 8 * v18;
      *(_QWORD *)(*(_QWORD *)(v8 + 48) + v19) = v30;
      *(_QWORD *)(*(_QWORD *)(v8 + 56) + v19) = v31;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release();
  *v4 = v8;
  return result;
}

uint64_t sub_21429F9BC(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _BYTE v31[48];

  v3 = v2;
  v5 = *v2;
  sub_2141D8BF8(&qword_254D6A460);
  result = sub_2144256C4();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v30 = (_QWORD *)(v5 + 64);
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v12 = (unint64_t)(v9 + 63) >> 6;
    v13 = result + 64;
    while (1)
    {
      if (v11)
      {
        v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v16 = v15 | (v8 << 6);
      }
      else
      {
        v17 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v17 >= v12)
          goto LABEL_34;
        v18 = v30[v17];
        ++v8;
        if (!v18)
        {
          v8 = v17 + 1;
          if (v17 + 1 >= v12)
            goto LABEL_34;
          v18 = v30[v8];
          if (!v18)
          {
            v19 = v17 + 2;
            if (v19 >= v12)
            {
LABEL_34:
              if ((a2 & 1) != 0)
              {
                v29 = 1 << *(_BYTE *)(v5 + 32);
                if (v29 >= 64)
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v30 = -1 << v29;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v18 = v30[v19];
            if (!v18)
            {
              while (1)
              {
                v8 = v19 + 1;
                if (__OFADD__(v19, 1))
                  goto LABEL_42;
                if (v8 >= v12)
                  goto LABEL_34;
                v18 = v30[v8];
                ++v19;
                if (v18)
                  goto LABEL_21;
              }
            }
            v8 = v19;
          }
        }
LABEL_21:
        v11 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v8 << 6);
      }
      v20 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v16);
      v21 = *(_QWORD *)(v5 + 56) + 48 * v16;
      if ((a2 & 1) != 0)
        sub_2142AAEF0(v21, (uint64_t)v31);
      else
        sub_2142AAEB4(v21, (uint64_t)v31);
      result = sub_214425868();
      v22 = -1 << *(_BYTE *)(v7 + 32);
      v23 = result & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v13 + 8 * (v23 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v13 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v27 = v24 == v26;
          if (v24 == v26)
            v24 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v13 + 8 * v24);
        }
        while (v28 == -1);
        v14 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(_QWORD *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v14) = v20;
      result = sub_2142AAEF0((uint64_t)v31, *(_QWORD *)(v7 + 56) + 48 * v14);
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_21429FC80(uint64_t a1, char a2)
{
  return sub_21429FC98(a1, a2, &qword_253F101A8);
}

uint64_t sub_21429FC8C(uint64_t a1, char a2)
{
  return sub_21429FC98(a1, a2, &qword_253F10410);
}

uint64_t sub_21429FC98(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  uint64_t *v35;

  v4 = v3;
  v6 = *v3;
  sub_2141D8BF8(a3);
  result = sub_2144256C4();
  v8 = result;
  if (*(_QWORD *)(v6 + 16))
  {
    v9 = 0;
    v35 = (uint64_t *)(v6 + 64);
    v10 = 1 << *(_BYTE *)(v6 + 32);
    v32 = -1 << v10;
    v33 = v10;
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v6 + 64);
    v34 = (unint64_t)(v10 + 63) >> 6;
    v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        v19 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v20 = v19 | (v9 << 6);
      }
      else
      {
        v21 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        result = v6 + 64;
        if (v21 >= v34)
          goto LABEL_33;
        v22 = v35[v21];
        ++v9;
        if (!v22)
        {
          v9 = v21 + 1;
          if (v21 + 1 >= v34)
            goto LABEL_33;
          v22 = v35[v9];
          if (!v22)
          {
            v23 = v21 + 2;
            if (v23 >= v34)
            {
LABEL_33:
              if ((a2 & 1) != 0)
              {
                if (v33 >= 64)
                  bzero(v35, 8 * v34);
                else
                  *v35 = v32;
                *(_QWORD *)(v6 + 16) = 0;
              }
              break;
            }
            v22 = v35[v23];
            if (!v22)
            {
              while (1)
              {
                v9 = v23 + 1;
                if (__OFADD__(v23, 1))
                  goto LABEL_41;
                if (v9 >= v34)
                  goto LABEL_33;
                v22 = v35[v9];
                ++v23;
                if (v22)
                  goto LABEL_30;
              }
            }
            v9 = v23;
          }
        }
LABEL_30:
        v12 = (v22 - 1) & v22;
        v20 = __clz(__rbit64(v22)) + (v9 << 6);
      }
      v28 = *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v20);
      v29 = (uint64_t *)(*(_QWORD *)(v6 + 56) + 16 * v20);
      v30 = *v29;
      v31 = v29[1];
      if ((a2 & 1) == 0)
        swift_bridgeObjectRetain();
      result = sub_214425868();
      v14 = -1 << *(_BYTE *)(v8 + 32);
      v15 = result & ~v14;
      v16 = v15 >> 6;
      if (((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          v26 = v16 == v25;
          if (v16 == v25)
            v16 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v13 + 8 * v16);
        }
        while (v27 == -1);
        v17 = __clz(__rbit64(~v27)) + (v16 << 6);
      }
      *(_QWORD *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v17) = v28;
      v18 = (_QWORD *)(*(_QWORD *)(v8 + 56) + 16 * v17);
      *v18 = v30;
      v18[1] = v31;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release();
  *v4 = v8;
  return result;
}

uint64_t sub_21429FF48(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;

  v3 = v2;
  v5 = *v2;
  sub_2141D8BF8(&qword_253F11FD8);
  result = sub_2144256C4();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v9 = (uint64_t *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    v31 = -1 << v10;
    v32 = v10;
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v33 = (unint64_t)(v10 + 63) >> 6;
    v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        v19 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v20 = v19 | (v8 << 6);
      }
      else
      {
        v21 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v21 >= v33)
          goto LABEL_33;
        v22 = v9[v21];
        ++v8;
        if (!v22)
        {
          v8 = v21 + 1;
          if (v21 + 1 >= v33)
            goto LABEL_33;
          v22 = v9[v8];
          if (!v22)
          {
            v23 = v21 + 2;
            if (v23 >= v33)
            {
LABEL_33:
              if ((a2 & 1) != 0)
              {
                if (v32 >= 64)
                  bzero((void *)(v5 + 64), 8 * v33);
                else
                  *v9 = v31;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v22 = v9[v23];
            if (!v22)
            {
              while (1)
              {
                v8 = v23 + 1;
                if (__OFADD__(v23, 1))
                  goto LABEL_41;
                if (v8 >= v33)
                  goto LABEL_33;
                v22 = v9[v8];
                ++v23;
                if (v22)
                  goto LABEL_30;
              }
            }
            v8 = v23;
          }
        }
LABEL_30:
        v12 = (v22 - 1) & v22;
        v20 = __clz(__rbit64(v22)) + (v8 << 6);
      }
      v28 = 8 * v20;
      v29 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + v28);
      v30 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + v28);
      if ((a2 & 1) == 0)
        swift_retain();
      result = sub_214425868();
      v14 = -1 << *(_BYTE *)(v7 + 32);
      v15 = result & ~v14;
      v16 = v15 >> 6;
      if (((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          v26 = v16 == v25;
          if (v16 == v25)
            v16 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v13 + 8 * v16);
        }
        while (v27 == -1);
        v17 = __clz(__rbit64(~v27)) + (v16 << 6);
      }
      *(_QWORD *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      v18 = 8 * v17;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + v18) = v29;
      *(_QWORD *)(*(_QWORD *)(v7 + 56) + v18) = v30;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_2142A01FC(uint64_t a1, int a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t result;
  int64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  int64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;

  v3 = v2;
  v5 = sub_214423C54();
  v43 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v2;
  sub_2141D8BF8(&qword_253F11960);
  v9 = sub_2144256C4();
  v10 = v9;
  if (!*(_QWORD *)(v8 + 16))
    goto LABEL_40;
  v39 = v2;
  v11 = 1 << *(_BYTE *)(v8 + 32);
  v12 = *(_QWORD *)(v8 + 64);
  v41 = (_QWORD *)(v8 + 64);
  if (v11 < 64)
    v13 = ~(-1 << v11);
  else
    v13 = -1;
  v14 = v13 & v12;
  v40 = (unint64_t)(v11 + 63) >> 6;
  v15 = a2;
  v16 = v9 + 64;
  result = swift_retain();
  v18 = 0;
  HIDWORD(v38) = v15;
  v19 = 16;
  if ((v15 & 1) != 0)
    v19 = 32;
  v42 = v19;
  while (1)
  {
    if (v14)
    {
      v21 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v22 = v21 | (v18 << 6);
      goto LABEL_24;
    }
    v23 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v23 >= v40)
      break;
    v24 = v41;
    v25 = v41[v23];
    ++v18;
    if (!v25)
    {
      v18 = v23 + 1;
      if (v23 + 1 >= v40)
        goto LABEL_33;
      v25 = v41[v18];
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v40)
        {
LABEL_33:
          swift_release();
          v3 = v39;
          if ((v38 & 0x100000000) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v25 = v41[v26];
        if (!v25)
        {
          while (1)
          {
            v18 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_42;
            if (v18 >= v40)
              goto LABEL_33;
            v25 = v41[v18];
            ++v26;
            if (v25)
              goto LABEL_23;
          }
        }
        v18 = v26;
      }
    }
LABEL_23:
    v14 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v18 << 6);
LABEL_24:
    v27 = *(_QWORD *)(v43 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v43 + v42))(v7, *(_QWORD *)(v8 + 48) + v27 * v22, v5);
    v28 = v8;
    v29 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v22);
    sub_2142AB588();
    result = sub_214424DB8();
    v30 = -1 << *(_BYTE *)(v10 + 32);
    v31 = result & ~v30;
    v32 = v31 >> 6;
    if (((-1 << v31) & ~*(_QWORD *)(v16 + 8 * (v31 >> 6))) != 0)
    {
      v20 = __clz(__rbit64((-1 << v31) & ~*(_QWORD *)(v16 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v33 = 0;
      v34 = (unint64_t)(63 - v30) >> 6;
      do
      {
        if (++v32 == v34 && (v33 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v35 = v32 == v34;
        if (v32 == v34)
          v32 = 0;
        v33 |= v35;
        v36 = *(_QWORD *)(v16 + 8 * v32);
      }
      while (v36 == -1);
      v20 = __clz(__rbit64(~v36)) + (v32 << 6);
    }
    *(_QWORD *)(v16 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v43 + 32))(*(_QWORD *)(v10 + 48) + v27 * v20, v7, v5);
    *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v20) = v29;
    ++*(_QWORD *)(v10 + 16);
    v8 = v28;
  }
  swift_release();
  v3 = v39;
  v24 = v41;
  if ((v38 & 0x100000000) == 0)
    goto LABEL_40;
LABEL_36:
  v37 = 1 << *(_BYTE *)(v8 + 32);
  if (v37 >= 64)
    bzero(v24, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v37;
  *(_QWORD *)(v8 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v10;
  return result;
}

uint64_t sub_2142A057C(uint64_t a1, int a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  _QWORD *v36;
  uint64_t v37;
  int v38;

  v3 = v2;
  v5 = type metadata accessor for ChartContentRenderContext.Bins(0);
  v37 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v2;
  sub_2141D8BF8(&qword_253F12288);
  v38 = a2;
  result = sub_2144256C4();
  v10 = result;
  if (*(_QWORD *)(v8 + 16))
  {
    v11 = 0;
    v12 = *(_QWORD *)(v8 + 64);
    v36 = (_QWORD *)(v8 + 64);
    v13 = 1 << *(_BYTE *)(v8 + 32);
    if (v13 < 64)
      v14 = ~(-1 << v13);
    else
      v14 = -1;
    v15 = v14 & v12;
    v34 = v2;
    v35 = (unint64_t)(v13 + 63) >> 6;
    v16 = result + 64;
    while (1)
    {
      if (v15)
      {
        v18 = __clz(__rbit64(v15));
        v15 &= v15 - 1;
        v19 = v18 | (v11 << 6);
      }
      else
      {
        v20 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        result = (uint64_t)v36;
        if (v20 >= v35)
          goto LABEL_34;
        v21 = v36[v20];
        ++v11;
        if (!v21)
        {
          v11 = v20 + 1;
          if (v20 + 1 >= v35)
            goto LABEL_34;
          v21 = v36[v11];
          if (!v21)
          {
            v22 = v20 + 2;
            if (v22 >= v35)
            {
LABEL_34:
              if ((v38 & 1) == 0)
              {
                result = swift_release();
                v3 = v34;
                goto LABEL_41;
              }
              v33 = 1 << *(_BYTE *)(v8 + 32);
              if (v33 >= 64)
                bzero(v36, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v36 = -1 << v33;
              v3 = v34;
              *(_QWORD *)(v8 + 16) = 0;
              break;
            }
            v21 = v36[v22];
            if (!v21)
            {
              while (1)
              {
                v11 = v22 + 1;
                if (__OFADD__(v22, 1))
                  goto LABEL_43;
                if (v11 >= v35)
                  goto LABEL_34;
                v21 = v36[v11];
                ++v22;
                if (v21)
                  goto LABEL_21;
              }
            }
            v11 = v22;
          }
        }
LABEL_21:
        v15 = (v21 - 1) & v21;
        v19 = __clz(__rbit64(v21)) + (v11 << 6);
      }
      v23 = *(_BYTE *)(*(_QWORD *)(v8 + 48) + v19);
      v24 = *(_QWORD *)(v37 + 72);
      v25 = *(_QWORD *)(v8 + 56) + v24 * v19;
      if ((v38 & 1) != 0)
        sub_2141FE1E0(v25, (uint64_t)v7, type metadata accessor for ChartContentRenderContext.Bins);
      else
        sub_2141FDEA0(v25, (uint64_t)v7, type metadata accessor for ChartContentRenderContext.Bins);
      sub_214425874();
      sub_214425880();
      result = sub_2144258B0();
      v26 = -1 << *(_BYTE *)(v10 + 32);
      v27 = result & ~v26;
      v28 = v27 >> 6;
      if (((-1 << v27) & ~*(_QWORD *)(v16 + 8 * (v27 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v16 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v29 = 0;
        v30 = (unint64_t)(63 - v26) >> 6;
        do
        {
          if (++v28 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          v31 = v28 == v30;
          if (v28 == v30)
            v28 = 0;
          v29 |= v31;
          v32 = *(_QWORD *)(v16 + 8 * v28);
        }
        while (v32 == -1);
        v17 = __clz(__rbit64(~v32)) + (v28 << 6);
      }
      *(_QWORD *)(v16 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      *(_BYTE *)(*(_QWORD *)(v10 + 48) + v17) = v23;
      result = sub_2141FE1E0((uint64_t)v7, *(_QWORD *)(v10 + 56) + v24 * v17, type metadata accessor for ChartContentRenderContext.Bins);
      ++*(_QWORD *)(v10 + 16);
    }
  }
  result = swift_release();
LABEL_41:
  *v3 = v10;
  return result;
}

uint64_t sub_2142A08BC(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  int64_t v40;
  _QWORD *v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  int64_t v45;
  uint64_t v46;

  v3 = v2;
  v5 = *v2;
  sub_2141D8BF8(&qword_253F11FC0);
  v43 = a2;
  result = sub_2144256C4();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v41 = (_QWORD *)(v5 + 64);
    v42 = v5;
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v39 = v3;
    v40 = (unint64_t)(v9 + 63) >> 6;
    v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        v44 = (v11 - 1) & v11;
        v45 = v8;
        v19 = __clz(__rbit64(v11)) | (v8 << 6);
      }
      else
      {
        v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        result = (uint64_t)v41;
        if (v20 >= v40)
          goto LABEL_33;
        v21 = v41[v20];
        v22 = v8 + 1;
        if (!v21)
        {
          v22 = v8 + 2;
          if (v8 + 2 >= v40)
            goto LABEL_33;
          v21 = v41[v22];
          if (!v21)
          {
            v23 = v8 + 3;
            if (v8 + 3 >= v40)
            {
LABEL_33:
              if ((v43 & 1) == 0)
              {
                result = swift_release();
                v3 = v39;
                goto LABEL_40;
              }
              v38 = 1 << *(_BYTE *)(v5 + 32);
              if (v38 >= 64)
                bzero(v41, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v41 = -1 << v38;
              v3 = v39;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v21 = v41[v23];
            if (!v21)
            {
              while (1)
              {
                v22 = v23 + 1;
                if (__OFADD__(v23, 1))
                  goto LABEL_42;
                if (v22 >= v40)
                  goto LABEL_33;
                v21 = v41[v22];
                ++v23;
                if (v21)
                  goto LABEL_30;
              }
            }
            v22 = v8 + 3;
          }
        }
LABEL_30:
        v44 = (v21 - 1) & v21;
        v45 = v22;
        v19 = __clz(__rbit64(v21)) + (v22 << 6);
      }
      v28 = *(_QWORD *)(v5 + 56);
      v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + (v19 << 6));
      v31 = *v29;
      v30 = v29[1];
      v32 = v29[2];
      v33 = v29[3];
      v34 = v29[4];
      v35 = v29[5];
      v37 = v29[6];
      v36 = v29[7];
      v46 = *(_QWORD *)(v28 + 8 * v19);
      if ((v43 & 1) == 0)
        sub_21421C1D8(v31, v30, v32, v33, v34, v35, v37);
      sub_214425874();
      result = sub_2144258B0();
      v13 = -1 << *(_BYTE *)(v7 + 32);
      v14 = result & ~v13;
      v15 = v14 >> 6;
      if (((-1 << v14) & ~*(_QWORD *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        v16 = __clz(__rbit64((-1 << v14) & ~*(_QWORD *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
        v17 = v31;
      }
      else
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v13) >> 6;
        v17 = v31;
        do
        {
          if (++v15 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v26 = v15 == v25;
          if (v15 == v25)
            v15 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v12 + 8 * v15);
        }
        while (v27 == -1);
        v16 = __clz(__rbit64(~v27)) + (v15 << 6);
      }
      *(_QWORD *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      v18 = (uint64_t *)(*(_QWORD *)(v7 + 48) + (v16 << 6));
      *v18 = v17;
      v18[1] = v30;
      v18[2] = v32;
      v18[3] = v33;
      v18[4] = v34;
      v18[5] = v35;
      v18[6] = v37;
      v18[7] = v36;
      v8 = v45;
      *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v16) = v46;
      ++*(_QWORD *)(v7 + 16);
      v5 = v42;
      v11 = v44;
    }
  }
  result = swift_release();
LABEL_40:
  *v3 = v7;
  return result;
}

unint64_t sub_2142A0C08(uint64_t a1, char a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t result;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v3 = v2;
  v5 = *v2;
  sub_2141D8BF8(&qword_253F10D10);
  v6 = (_QWORD *)sub_2144256C4();
  if (*(_QWORD *)(v5 + 16))
  {
    v7 = 1 << *(_BYTE *)(v5 + 32);
    v8 = (_QWORD *)(v5 + 64);
    v9 = -1;
    if (v7 < 64)
      v9 = ~(-1 << v7);
    v10 = v9 & *(_QWORD *)(v5 + 64);
    v11 = (unint64_t)(v7 + 63) >> 6;
    result = swift_retain();
    v13 = 0;
    while (1)
    {
      if (v10)
      {
        v14 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v15 = v14 | (v13 << 6);
      }
      else
      {
        v16 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
          __break(1u);
LABEL_29:
          __break(1u);
          return result;
        }
        if (v16 >= v11)
          goto LABEL_22;
        v17 = v8[v16];
        ++v13;
        if (!v17)
        {
          v13 = v16 + 1;
          if (v16 + 1 >= v11)
            goto LABEL_22;
          v17 = v8[v13];
          if (!v17)
          {
            v18 = v16 + 2;
            if (v18 >= v11)
            {
LABEL_22:
              swift_release();
              if ((a2 & 1) != 0)
              {
                v22 = 1 << *(_BYTE *)(v5 + 32);
                if (v22 > 63)
                  bzero((void *)(v5 + 64), ((unint64_t)(v22 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v8 = -1 << v22;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v17 = v8[v18];
            if (!v17)
            {
              while (1)
              {
                v13 = v18 + 1;
                if (__OFADD__(v18, 1))
                  goto LABEL_29;
                if (v13 >= v11)
                  goto LABEL_22;
                v17 = v8[v13];
                ++v18;
                if (v17)
                  goto LABEL_19;
              }
            }
            v13 = v18;
          }
        }
LABEL_19:
        v10 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v13 << 6);
      }
      v19 = 8 * v15;
      v20 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + v19);
      v21 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + v19);
      if ((a2 & 1) == 0)
        v20 = swift_bridgeObjectRetain();
      result = sub_2142A5A20(v20, v21, v6);
    }
  }
  result = swift_release();
  *v3 = v6;
  return result;
}

uint64_t sub_2142A0DE4(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  int64_t v30;
  _QWORD *v31;
  unint64_t v32;
  int64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char v37;
  unint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  int64_t v43;
  _QWORD *v44;
  uint64_t i;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD __src[36];
  _QWORD __dst[38];
  _BYTE v58[152];
  _BYTE v59[152];
  _BYTE v60[160];

  v3 = v2;
  v5 = *v2;
  sub_2141D8BF8(&qword_253F12290);
  v46 = a2;
  v6 = sub_2144256C4();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v44 = (_QWORD *)(v5 + 64);
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v42 = v2;
  v43 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  for (i = v5; ; v5 = i)
  {
    if (v10)
    {
      v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v17 = v16 | (v13 << 6);
      if ((v46 & 1) != 0)
        goto LABEL_10;
      goto LABEL_23;
    }
    v30 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v30 >= v43)
      break;
    v31 = v44;
    v32 = v44[v30];
    ++v13;
    if (!v32)
    {
      v13 = v30 + 1;
      if (v30 + 1 >= v43)
        goto LABEL_33;
      v32 = v44[v13];
      if (!v32)
      {
        v33 = v30 + 2;
        if (v33 >= v43)
        {
LABEL_33:
          swift_release();
          v3 = v42;
          if ((v46 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v32 = v44[v33];
        if (!v32)
        {
          while (1)
          {
            v13 = v33 + 1;
            if (__OFADD__(v33, 1))
              goto LABEL_42;
            if (v13 >= v43)
              goto LABEL_33;
            v32 = v44[v13];
            ++v33;
            if (v32)
              goto LABEL_22;
          }
        }
        v13 = v33;
      }
    }
LABEL_22:
    v10 = (v32 - 1) & v32;
    v17 = __clz(__rbit64(v32)) + (v13 << 6);
    if ((v46 & 1) != 0)
    {
LABEL_10:
      sub_2141EF6B8(*(_QWORD *)(v5 + 48) + 152 * v17, (uint64_t)__src);
      v18 = (uint64_t *)(*(_QWORD *)(v5 + 56) + 304 * v17);
      v54 = *v18;
      v19 = v18[2];
      v20 = v18[3];
      v21 = v18[4];
      v22 = v18[5];
      v23 = v18[8];
      v47 = v18[7];
      v24 = v18[9];
      v48 = v18[10];
      v49 = v18[6];
      v25 = v18[12];
      v51 = v18[1];
      v52 = v18[11];
      v27 = v18[13];
      v26 = v18[14];
      v50 = v18[15];
      sub_214251E04((uint64_t)(v18 + 16), (uint64_t)__dst);
      v53 = v18[35];
      v28 = v18[36];
      v55 = v18[37];
      sub_2141EF6B8((uint64_t)__src, (uint64_t)v58);
      v29 = __dst;
      goto LABEL_24;
    }
LABEL_23:
    sub_2141EF6B8(*(_QWORD *)(v5 + 48) + 152 * v17, (uint64_t)__src);
    memcpy(__dst, (const void *)(*(_QWORD *)(v5 + 56) + 304 * v17), sizeof(__dst));
    v55 = __dst[37];
    v28 = __dst[36];
    v27 = __dst[13];
    v26 = __dst[14];
    v23 = __dst[8];
    v24 = __dst[9];
    v25 = __dst[12];
    v52 = __dst[11];
    v53 = __dst[35];
    v49 = __dst[6];
    v50 = __dst[15];
    v47 = __dst[7];
    v48 = __dst[10];
    v19 = __dst[2];
    v20 = __dst[3];
    v21 = __dst[4];
    v22 = __dst[5];
    v54 = __dst[0];
    v51 = __dst[1];
    sub_21421C318(__src, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21420B7DC);
    sub_21422F46C((uint64_t)__dst);
    sub_2141EF6B8((uint64_t)__src, (uint64_t)v58);
    v29 = &__dst[16];
LABEL_24:
    sub_214251E04((uint64_t)v29, (uint64_t)v59);
    sub_2141EF6B8((uint64_t)v58, (uint64_t)v60);
    sub_214425874();
    sub_2142FFD88((uint64_t)__dst);
    result = sub_2144258B0();
    v34 = -1 << *(_BYTE *)(v7 + 32);
    v35 = result & ~v34;
    v36 = v35 >> 6;
    if (((-1 << v35) & ~*(_QWORD *)(v11 + 8 * (v35 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v35) & ~*(_QWORD *)(v11 + 8 * (v35 >> 6)))) | v35 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v37 = 0;
      v38 = (unint64_t)(63 - v34) >> 6;
      do
      {
        if (++v36 == v38 && (v37 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v39 = v36 == v38;
        if (v36 == v38)
          v36 = 0;
        v37 |= v39;
        v40 = *(_QWORD *)(v11 + 8 * v36);
      }
      while (v40 == -1);
      v14 = __clz(__rbit64(~v40)) + (v36 << 6);
    }
    __src[0] = v51;
    __src[1] = v19;
    __src[2] = v20;
    __src[3] = v21;
    __src[4] = v22;
    __src[5] = v49;
    __src[6] = v47;
    __src[7] = v23;
    __src[8] = v24;
    __src[9] = v48;
    __src[10] = v52;
    __src[11] = v25;
    __src[12] = v27;
    __src[13] = v26;
    __src[14] = v50;
    sub_214251E04((uint64_t)v59, (uint64_t)&__src[15]);
    __src[34] = v53;
    __src[35] = v28;
    memcpy(__dst, __src, 0x120uLL);
    *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    sub_2141EF6B8((uint64_t)v60, *(_QWORD *)(v7 + 48) + 152 * v14);
    v15 = (_QWORD *)(*(_QWORD *)(v7 + 56) + 304 * v14);
    *v15 = v54;
    result = (uint64_t)memcpy(v15 + 1, __dst, 0x120uLL);
    v15[37] = v55;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v42;
  v31 = v44;
  if ((v46 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v41 = 1 << *(_BYTE *)(v5 + 32);
  if (v41 >= 64)
    bzero(v31, ((unint64_t)(v41 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v31 = -1 << v41;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_2142A12D4(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  int64_t v38;
  _QWORD *v39;
  uint64_t v40;
  char v41;
  int64_t v42;
  uint64_t v43;
  char v44[72];

  v3 = v2;
  v5 = *v2;
  sub_2141D8BF8(&qword_253F12298);
  v41 = a2;
  v6 = sub_2144256C4();
  v7 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v39 = (_QWORD *)(v5 + 64);
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v5 + 64);
    v38 = (unint64_t)(v8 + 63) >> 6;
    v11 = v6 + 64;
    result = swift_retain();
    v13 = 0;
    v40 = v5;
    while (1)
    {
      if (v10)
      {
        v19 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v42 = v13;
        v20 = v19 | (v13 << 6);
      }
      else
      {
        v21 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v21 >= v38)
          goto LABEL_33;
        v22 = v39[v21];
        v23 = v13 + 1;
        if (!v22)
        {
          v23 = v13 + 2;
          if (v13 + 2 >= v38)
            goto LABEL_33;
          v22 = v39[v23];
          if (!v22)
          {
            v24 = v13 + 3;
            if (v13 + 3 >= v38)
            {
LABEL_33:
              swift_release();
              v3 = v2;
              if ((v41 & 1) != 0)
              {
                v37 = 1 << *(_BYTE *)(v5 + 32);
                if (v37 >= 64)
                  bzero(v39, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v39 = -1 << v37;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v22 = v39[v24];
            if (!v22)
            {
              while (1)
              {
                v23 = v24 + 1;
                if (__OFADD__(v24, 1))
                  goto LABEL_40;
                if (v23 >= v38)
                  goto LABEL_33;
                v22 = v39[v23];
                ++v24;
                if (v22)
                  goto LABEL_30;
              }
            }
            v23 = v13 + 3;
          }
        }
LABEL_30:
        v10 = (v22 - 1) & v22;
        v42 = v23;
        v20 = __clz(__rbit64(v22)) + (v23 << 6);
      }
      v29 = *(_QWORD *)(v5 + 56);
      v30 = *(_QWORD *)(v5 + 48) + 48 * v20;
      v32 = *(_QWORD *)v30;
      v31 = *(_QWORD *)(v30 + 8);
      v33 = *(_BYTE *)(v30 + 16);
      v35 = *(_QWORD *)(v30 + 24);
      v34 = *(_QWORD *)(v30 + 32);
      v36 = *(_BYTE *)(v30 + 40);
      v43 = *(_QWORD *)(v29 + 8 * v20);
      if ((v41 & 1) == 0)
      {
        sub_2141DD130(v32, v31, v33);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      sub_214425874();
      sub_21420F564((uint64_t)v44, v34);
      sub_21442588C();
      result = sub_2144258B0();
      v14 = -1 << *(_BYTE *)(v7 + 32);
      v15 = result & ~v14;
      v16 = v15 >> 6;
      if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v27 = v16 == v26;
          if (v16 == v26)
            v16 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v11 + 8 * v16);
        }
        while (v28 == -1);
        v17 = __clz(__rbit64(~v28)) + (v16 << 6);
      }
      *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      v18 = *(_QWORD *)(v7 + 48) + 48 * v17;
      *(_QWORD *)v18 = v32;
      *(_QWORD *)(v18 + 8) = v31;
      *(_BYTE *)(v18 + 16) = v33;
      *(_QWORD *)(v18 + 24) = v35;
      *(_QWORD *)(v18 + 32) = v34;
      *(_BYTE *)(v18 + 40) = v36;
      *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v17) = v43;
      ++*(_QWORD *)(v7 + 16);
      v5 = v40;
      v13 = v42;
    }
  }
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_2142A1628(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  char v35;

  v3 = v2;
  v5 = *v2;
  sub_2141D8BF8(&qword_253F11978);
  result = sub_2144256C4();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v35 = a2;
    v34 = v3;
    v8 = 0;
    v9 = (uint64_t *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    v32 = -1 << v10;
    v33 = v10;
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v13 = (unint64_t)(v10 + 63) >> 6;
    v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        v17 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v18 = v17 | (v8 << 6);
      }
      else
      {
        v19 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v19 >= v13)
          goto LABEL_31;
        v20 = v9[v19];
        ++v8;
        if (!v20)
        {
          v8 = v19 + 1;
          if (v19 + 1 >= v13)
            goto LABEL_31;
          v20 = v9[v8];
          if (!v20)
          {
            v21 = v19 + 2;
            if (v21 >= v13)
            {
LABEL_31:
              if ((v35 & 1) == 0)
              {
                result = swift_release();
                v3 = v34;
                goto LABEL_38;
              }
              if (v33 >= 64)
                bzero((void *)(v5 + 64), 8 * v13);
              else
                *v9 = v32;
              v3 = v34;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v20 = v9[v21];
            if (!v20)
            {
              while (1)
              {
                v8 = v21 + 1;
                if (__OFADD__(v21, 1))
                  goto LABEL_40;
                if (v8 >= v13)
                  goto LABEL_31;
                v20 = v9[v8];
                ++v21;
                if (v20)
                  goto LABEL_21;
              }
            }
            v8 = v21;
          }
        }
LABEL_21:
        v12 = (v20 - 1) & v20;
        v18 = __clz(__rbit64(v20)) + (v8 << 6);
      }
      v22 = 8 * v18;
      v23 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + v22);
      v24 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + v22);
      result = sub_214425868();
      v25 = -1 << *(_BYTE *)(v7 + 32);
      v26 = result & ~v25;
      v27 = v26 >> 6;
      if (((-1 << v26) & ~*(_QWORD *)(v14 + 8 * (v26 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v14 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v30 = v27 == v29;
          if (v27 == v29)
            v27 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v14 + 8 * v27);
        }
        while (v31 == -1);
        v15 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(_QWORD *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      v16 = 8 * v15;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + v16) = v23;
      *(_QWORD *)(*(_QWORD *)(v7 + 56) + v16) = v24;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_38:
  *v3 = v7;
  return result;
}

uint64_t sub_2142A18D0(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  _QWORD *v34;
  char v35;
  __int128 v36;
  __int128 v37;

  v3 = v2;
  v5 = *v2;
  sub_2141D8BF8(&qword_253F11970);
  v35 = a2;
  result = sub_2144256C4();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v34 = (_QWORD *)(v5 + 64);
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v33 = (unint64_t)(v9 + 63) >> 6;
    v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v19 = v18 | (v8 << 6);
      }
      else
      {
        v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v20 >= v33)
          goto LABEL_33;
        v21 = v34[v20];
        ++v8;
        if (!v21)
        {
          v8 = v20 + 1;
          if (v20 + 1 >= v33)
            goto LABEL_33;
          v21 = v34[v8];
          if (!v21)
          {
            v22 = v20 + 2;
            if (v22 >= v33)
            {
LABEL_33:
              if ((v35 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_40;
              }
              v32 = 1 << *(_BYTE *)(v5 + 32);
              if (v32 >= 64)
                bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v34 = -1 << v32;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v21 = v34[v22];
            if (!v21)
            {
              while (1)
              {
                v8 = v22 + 1;
                if (__OFADD__(v22, 1))
                  goto LABEL_42;
                if (v8 >= v33)
                  goto LABEL_33;
                v21 = v34[v8];
                ++v22;
                if (v21)
                  goto LABEL_30;
              }
            }
            v8 = v22;
          }
        }
LABEL_30:
        v11 = (v21 - 1) & v21;
        v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      v27 = *(_BYTE *)(*(_QWORD *)(v5 + 48) + v19);
      v28 = *(_QWORD *)(v5 + 56) + 56 * v19;
      v29 = *(_BYTE *)v28;
      v30 = *(_QWORD *)(v28 + 24);
      v31 = *(_QWORD *)(v28 + 32);
      v36 = *(_OWORD *)(v28 + 40);
      v37 = *(_OWORD *)(v28 + 8);
      if ((v35 & 1) == 0)
        swift_bridgeObjectRetain();
      sub_214425874();
      sub_214425880();
      result = sub_2144258B0();
      v13 = -1 << *(_BYTE *)(v7 + 32);
      v14 = result & ~v13;
      v15 = v14 >> 6;
      if (((-1 << v14) & ~*(_QWORD *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        v16 = __clz(__rbit64((-1 << v14) & ~*(_QWORD *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v23 = 0;
        v24 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v25 = v15 == v24;
          if (v15 == v24)
            v15 = 0;
          v23 |= v25;
          v26 = *(_QWORD *)(v12 + 8 * v15);
        }
        while (v26 == -1);
        v16 = __clz(__rbit64(~v26)) + (v15 << 6);
      }
      *(_QWORD *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(_BYTE *)(*(_QWORD *)(v7 + 48) + v16) = v27;
      v17 = *(_QWORD *)(v7 + 56) + 56 * v16;
      *(_BYTE *)v17 = v29;
      *(_OWORD *)(v17 + 8) = v37;
      *(_QWORD *)(v17 + 24) = v30;
      *(_QWORD *)(v17 + 32) = v31;
      *(_OWORD *)(v17 + 40) = v36;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_40:
  *v3 = v7;
  return result;
}

uint64_t sub_2142A1BF0(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unsigned __int8 v19;
  uint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned __int8 v39;
  uint64_t v40;
  uint64_t *v41;
  int64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  int64_t v48;
  char v49;
  uint64_t v50;
  unsigned __int8 v51;
  char v52;

  v3 = v2;
  v5 = *v2;
  sub_2141D8BF8(&qword_253F15D28);
  v46 = a2;
  result = sub_2144256C4();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v43 = (_QWORD *)(v5 + 64);
    v44 = v5;
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v41 = v2;
    v42 = (unint64_t)(v9 + 63) >> 6;
    v12 = result + 64;
    v45 = result;
    while (1)
    {
      if (v11)
      {
        v47 = (v11 - 1) & v11;
        v48 = v8;
        v21 = __clz(__rbit64(v11)) | (v8 << 6);
      }
      else
      {
        v22 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        result = (uint64_t)v43;
        if (v22 >= v42)
          goto LABEL_33;
        v23 = v43[v22];
        v24 = v8 + 1;
        if (!v23)
        {
          v24 = v22 + 1;
          if (v22 + 1 >= v42)
            goto LABEL_33;
          v23 = v43[v24];
          if (!v23)
          {
            v25 = v22 + 2;
            if (v25 >= v42)
            {
LABEL_33:
              if ((v46 & 1) == 0)
              {
                result = swift_release();
                v3 = v41;
                goto LABEL_40;
              }
              v40 = 1 << *(_BYTE *)(v5 + 32);
              if (v40 >= 64)
                bzero(v43, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v43 = -1 << v40;
              v3 = v41;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v23 = v43[v25];
            if (!v23)
            {
              while (1)
              {
                v24 = v25 + 1;
                if (__OFADD__(v25, 1))
                  goto LABEL_42;
                if (v24 >= v42)
                  goto LABEL_33;
                v23 = v43[v24];
                ++v25;
                if (v23)
                  goto LABEL_30;
              }
            }
            v24 = v25;
          }
        }
LABEL_30:
        v47 = (v23 - 1) & v23;
        v48 = v24;
        v21 = __clz(__rbit64(v23)) + (v24 << 6);
      }
      v52 = *(_BYTE *)(*(_QWORD *)(v5 + 48) + v21);
      v30 = *(_QWORD *)(v5 + 56) + 88 * v21;
      v50 = *(_QWORD *)v30;
      v49 = *(_BYTE *)(v30 + 8);
      v31 = *(_QWORD *)(v30 + 16);
      v32 = *(_QWORD *)(v30 + 24);
      v33 = *(_QWORD *)(v30 + 32);
      v34 = *(_QWORD *)(v30 + 40);
      v35 = *(_QWORD *)(v30 + 48);
      v36 = *(_QWORD *)(v30 + 56);
      v38 = *(_QWORD *)(v30 + 64);
      v37 = *(_QWORD *)(v30 + 72);
      v39 = *(_BYTE *)(v30 + 80);
      if ((v46 & 1) == 0)
      {
        sub_2142AB324(v31, v32, v33, v34, v35);
        sub_2142AB39C(v38, v37, v39);
      }
      v51 = v39;
      v7 = v45;
      sub_214425874();
      sub_214425880();
      v13 = sub_2144258B0();
      v14 = -1 << *(_BYTE *)(v45 + 32);
      v15 = v13 & ~v14;
      v16 = v15 >> 6;
      if (((-1 << v15) & ~*(_QWORD *)(v12 + 8 * (v15 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v12 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
        result = v38;
        v18 = v37;
        v19 = v51;
      }
      else
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v14) >> 6;
        result = v38;
        v18 = v37;
        v19 = v51;
        do
        {
          if (++v16 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v28 = v16 == v27;
          if (v16 == v27)
            v16 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v12 + 8 * v16);
        }
        while (v29 == -1);
        v17 = __clz(__rbit64(~v29)) + (v16 << 6);
      }
      *(_QWORD *)(v12 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      *(_BYTE *)(*(_QWORD *)(v45 + 48) + v17) = v52;
      v20 = *(_QWORD *)(v45 + 56) + 88 * v17;
      *(_QWORD *)v20 = v50;
      *(_BYTE *)(v20 + 8) = v49;
      *(_QWORD *)(v20 + 16) = v31;
      *(_QWORD *)(v20 + 24) = v32;
      *(_QWORD *)(v20 + 32) = v33;
      *(_QWORD *)(v20 + 40) = v34;
      *(_QWORD *)(v20 + 48) = v35;
      *(_QWORD *)(v20 + 56) = v36;
      *(_QWORD *)(v20 + 64) = result;
      *(_QWORD *)(v20 + 72) = v18;
      *(_BYTE *)(v20 + 80) = v19;
      ++*(_QWORD *)(v45 + 16);
      v5 = v44;
      v11 = v47;
      v8 = v48;
    }
  }
  result = swift_release();
LABEL_40:
  *v3 = v7;
  return result;
}

uint64_t sub_2142A1F94(uint64_t a1, unsigned __int8 a2, char a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t result;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  char v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  v4 = v3;
  v8 = *v3;
  v10 = sub_214336B74(a2);
  v11 = *(_QWORD *)(v8 + 16);
  v12 = (v9 & 1) == 0;
  result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v14 = v9;
  v15 = *(_QWORD *)(v8 + 24);
  if (v15 >= result && (a3 & 1) != 0)
    goto LABEL_7;
  if (v15 >= result && (a3 & 1) == 0)
  {
    result = (uint64_t)sub_2142A6790();
LABEL_7:
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
      return sub_2142A6984(a1, v16[7] + 72 * v10);
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    *(_BYTE *)(v16[6] + v10) = a2;
    v18 = v16[7] + 72 * v10;
    *(_OWORD *)v18 = *(_OWORD *)a1;
    v19 = *(_OWORD *)(a1 + 16);
    v20 = *(_OWORD *)(a1 + 32);
    v21 = *(_OWORD *)(a1 + 48);
    *(_BYTE *)(v18 + 64) = *(_BYTE *)(a1 + 64);
    *(_OWORD *)(v18 + 32) = v20;
    *(_OWORD *)(v18 + 48) = v21;
    *(_OWORD *)(v18 + 16) = v19;
    v22 = v16[2];
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (!v23)
    {
      v16[2] = v24;
      return result;
    }
    goto LABEL_14;
  }
  sub_21429A08C(result, a3 & 1);
  result = sub_214336B74(a2);
  if ((v14 & 1) == (v17 & 1))
  {
    v10 = result;
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
      return sub_2142A6984(a1, v16[7] + 72 * v10);
    goto LABEL_11;
  }
LABEL_15:
  result = sub_214425820();
  __break(1u);
  return result;
}

uint64_t sub_2142A20FC(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t result;
  char v17;
  uint64_t v18;
  _QWORD *v19;
  char v20;
  uint64_t v21;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for CalendarCache.Key(0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (_QWORD *)*v3;
  v13 = sub_214336C24(a2);
  v14 = v11[2];
  v15 = (v12 & 1) == 0;
  result = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
    goto LABEL_14;
  }
  v17 = v12;
  v18 = v11[3];
  if (v18 >= result && (a3 & 1) != 0)
  {
LABEL_7:
    v19 = *v4;
    if ((v17 & 1) != 0)
    {
LABEL_8:
      *(_QWORD *)(v19[7] + 8 * v13) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v18 >= result && (a3 & 1) == 0)
  {
    result = (uint64_t)sub_2142A69C0();
    goto LABEL_7;
  }
  sub_21429A408(result, a3 & 1);
  result = sub_214336C24(a2);
  if ((v17 & 1) != (v20 & 1))
  {
LABEL_14:
    result = sub_214425820();
    __break(1u);
    return result;
  }
  v13 = result;
  v19 = *v4;
  if ((v17 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  sub_2141FDEA0(a2, (uint64_t)v10, type metadata accessor for CalendarCache.Key);
  return sub_2142A60AC(v13, (uint64_t)v10, a1, v19);
}

uint64_t sub_2142A224C(double *a1, char a2, double a3, double a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  double *v19;
  char v20;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = sub_214336BCC(a1);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= result && (a2 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = (double *)(v18[7] + 16 * v12);
        *v19 = a3;
        v19[1] = a4;
        return result;
      }
      goto LABEL_11;
    }
    if (v17 >= result && (a2 & 1) == 0)
    {
      result = (uint64_t)sub_2142A6BF0();
      goto LABEL_7;
    }
    sub_21429A774(result, a2 & 1);
    result = sub_214336BCC(a1);
    if ((v16 & 1) == (v20 & 1))
    {
      v12 = result;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_2142A6144(v12, (uint64_t)a1, v18, a3, a4);
      return sub_2142AB61C((uint64_t)a1);
    }
  }
  result = sub_214425820();
  __break(1u);
  return result;
}

uint64_t sub_2142A2364(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t result;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  v4 = v3;
  v8 = *v3;
  v10 = sub_214336CE4(a2);
  v11 = *(_QWORD *)(v8 + 16);
  v12 = (v9 & 1) == 0;
  result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v14 = v9;
  v15 = *(_QWORD *)(v8 + 24);
  if (v15 >= result && (a3 & 1) != 0)
    goto LABEL_7;
  if (v15 >= result && (a3 & 1) == 0)
  {
    result = (uint64_t)sub_2142A6DE0();
LABEL_7:
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
    {
LABEL_8:
      v17 = v16[7];
      result = swift_bridgeObjectRelease();
      *(_QWORD *)(v17 + 8 * v10) = a1;
      return result;
    }
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    v19 = 8 * v10;
    *(_QWORD *)(v16[6] + v19) = a2;
    *(_QWORD *)(v16[7] + v19) = a1;
    v20 = v16[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (!v21)
    {
      v16[2] = v22;
      return result;
    }
    goto LABEL_14;
  }
  sub_21429AD3C(result, a3 & 1);
  result = sub_214336CE4(a2);
  if ((v14 & 1) == (v18 & 1))
  {
    v10 = result;
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = sub_214425820();
  __break(1u);
  return result;
}

uint64_t sub_2142A249C(uint64_t a1, _QWORD *a2, char a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t result;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  char v17;
  _OWORD *v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  _OWORD v24[3];

  v4 = v3;
  v8 = *v3;
  v10 = sub_214336C7C(a2);
  v11 = *(_QWORD *)(v8 + 16);
  v12 = (v9 & 1) == 0;
  result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_15;
  }
  v14 = v9;
  v15 = *(_QWORD *)(v8 + 24);
  if (v15 >= result && (a3 & 1) != 0)
    goto LABEL_7;
  if (v15 >= result && (a3 & 1) == 0)
  {
    result = (uint64_t)sub_2142A6F80();
LABEL_7:
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
    {
LABEL_8:
      *(_QWORD *)(v16[7] + 8 * v10) = a1;
      return result;
    }
    goto LABEL_11;
  }
  sub_21429AFF0(result, a3 & 1);
  result = sub_214336C7C(a2);
  if ((v14 & 1) != (v17 & 1))
  {
LABEL_16:
    result = sub_214425820();
    __break(1u);
    return result;
  }
  v10 = result;
  v16 = (_QWORD *)*v4;
  if ((v14 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  result = sub_2141ED7E0((uint64_t)a2, (uint64_t)v24);
  v16[(v10 >> 6) + 8] |= 1 << v10;
  v18 = (_OWORD *)(v16[6] + 48 * v10);
  v20 = v24[1];
  v19 = v24[2];
  *v18 = v24[0];
  v18[1] = v20;
  v18[2] = v19;
  *(_QWORD *)(v16[7] + 8 * v10) = a1;
  v21 = v16[2];
  v22 = __OFADD__(v21, 1);
  v23 = v21 + 1;
  if (v22)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v16[2] = v23;
  return result;
}

uint64_t sub_2142A25EC(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v14;

  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = sub_2142AB2FC(a1, v7);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v12 + 16))(v11);
  sub_2142AB150((uint64_t)v11, a2, a3, v3, v7, v8);
  return _s6Charts15AnyChartContentVwxx_0(a1);
}

uint64_t sub_2142A269C(uint64_t a1, __int16 a2, char a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  char v20;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = sub_214336B74(a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= result && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = v18[7] + 16 * v12;
        *(_QWORD *)v19 = a1;
        *(_BYTE *)(v19 + 8) = a2;
        *(_BYTE *)(v19 + 9) = HIBYTE(a2) & 1;
        return result;
      }
      return sub_2142A6214(v12, a3, a1, a2 & 0x1FF, v18);
    }
    if (v17 >= result && (a4 & 1) == 0)
    {
      result = (uint64_t)sub_2142A74F0();
      goto LABEL_7;
    }
    sub_21429B8C4(result, a4 & 1);
    result = sub_214336B74(a3);
    if ((v16 & 1) == (v20 & 1))
    {
      v12 = result;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
      return sub_2142A6214(v12, a3, a1, a2 & 0x1FF, v18);
    }
  }
  result = sub_214425820();
  __break(1u);
  return result;
}

uint64_t sub_2142A27BC(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  char v20;
  _QWORD *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  v5 = v4;
  v10 = *v4;
  v12 = sub_214336CE4(a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= result && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= result && (a4 & 1) == 0)
  {
    result = (uint64_t)sub_2142A7BA0();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      v19 = (_QWORD *)(v18[7] + 16 * v12);
      result = swift_release();
      *v19 = a1;
      v19[1] = a2;
      return result;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    *(_QWORD *)(v18[6] + 8 * v12) = a3;
    v21 = (_QWORD *)(v18[7] + 16 * v12);
    *v21 = a1;
    v21[1] = a2;
    v22 = v18[2];
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (!v23)
    {
      v18[2] = v24;
      return result;
    }
    goto LABEL_14;
  }
  sub_21429C4A0(result, a4 & 1);
  result = sub_214336CE4(a3);
  if ((v16 & 1) == (v20 & 1))
  {
    v12 = result;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = sub_214425820();
  __break(1u);
  return result;
}

uint64_t sub_2142A28F8(uint64_t a1, uint64_t a2, unsigned __int8 a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  char v20;
  _QWORD *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  v5 = v4;
  v10 = *v4;
  v12 = sub_214336B74(a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= result && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= result && (a4 & 1) == 0)
  {
    result = (uint64_t)sub_2142A7D48();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      v19 = (_QWORD *)(v18[7] + 16 * v12);
      swift_release();
      result = swift_release();
      *v19 = a1;
      v19[1] = a2;
      return result;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    *(_BYTE *)(v18[6] + v12) = a3;
    v21 = (_QWORD *)(v18[7] + 16 * v12);
    *v21 = a1;
    v21[1] = a2;
    v22 = v18[2];
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (!v23)
    {
      v18[2] = v24;
      return result;
    }
    goto LABEL_14;
  }
  sub_21429C760(result, a4 & 1);
  result = sub_214336B74(a3);
  if ((v16 & 1) == (v20 & 1))
  {
    v12 = result;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = sub_214425820();
  __break(1u);
  return result;
}

uint64_t sub_2142A2A3C(uint64_t a1, unsigned __int8 a2, char a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t result;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;

  v4 = v3;
  v8 = *v3;
  v10 = sub_214336B74(a2);
  v11 = *(_QWORD *)(v8 + 16);
  v12 = (v9 & 1) == 0;
  result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v14 = v9;
  v15 = *(_QWORD *)(v8 + 24);
  if (v15 >= result && (a3 & 1) != 0)
    goto LABEL_7;
  if (v15 >= result && (a3 & 1) == 0)
  {
    result = (uint64_t)sub_2142A8624();
LABEL_7:
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
    {
LABEL_8:
      v17 = v16[7];
      result = swift_bridgeObjectRelease();
      *(_QWORD *)(v17 + 8 * v10) = a1;
      return result;
    }
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    *(_BYTE *)(v16[6] + v10) = a2;
    *(_QWORD *)(v16[7] + 8 * v10) = a1;
    v19 = v16[2];
    v20 = __OFADD__(v19, 1);
    v21 = v19 + 1;
    if (!v20)
    {
      v16[2] = v21;
      return result;
    }
    goto LABEL_14;
  }
  sub_21429D6CC(result, a3 & 1);
  result = sub_214336B74(a2);
  if ((v14 & 1) == (v18 & 1))
  {
    v10 = result;
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = sub_214425820();
  __break(1u);
  return result;
}

uint64_t sub_2142A2B70(uint64_t a1, unsigned __int8 a2, char a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t result;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;

  v4 = v3;
  v8 = *v3;
  v10 = sub_214336B74(a2);
  v11 = *(_QWORD *)(v8 + 16);
  v12 = (v9 & 1) == 0;
  result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v14 = v9;
  v15 = *(_QWORD *)(v8 + 24);
  if (v15 >= result && (a3 & 1) != 0)
    goto LABEL_7;
  if (v15 >= result && (a3 & 1) == 0)
  {
    result = (uint64_t)sub_2142A87C4();
LABEL_7:
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
    {
LABEL_8:
      v17 = v16[7];
      result = swift_release();
      *(_QWORD *)(v17 + 8 * v10) = a1;
      return result;
    }
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    *(_BYTE *)(v16[6] + v10) = a2;
    *(_QWORD *)(v16[7] + 8 * v10) = a1;
    v19 = v16[2];
    v20 = __OFADD__(v19, 1);
    v21 = v19 + 1;
    if (!v20)
    {
      v16[2] = v21;
      return result;
    }
    goto LABEL_14;
  }
  sub_21429D99C(result, a3 & 1);
  result = sub_214336B74(a2);
  if ((v14 & 1) == (v18 & 1))
  {
    v10 = result;
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = sub_214425820();
  __break(1u);
  return result;
}

uint64_t sub_2142A2CA4(uint64_t a1, unsigned __int8 a2, char a3)
{
  return sub_2142A2CBC(a1, a2, a3, &qword_253F132F8);
}

uint64_t sub_2142A2CB0(uint64_t a1, unsigned __int8 a2, char a3)
{
  return sub_2142A2CBC(a1, a2, a3, &qword_253F11FC8);
}

uint64_t sub_2142A2CBC(uint64_t a1, unsigned __int8 a2, char a3, uint64_t *a4)
{
  _QWORD *v4;
  _QWORD *v6;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  v6 = v4;
  v10 = *v4;
  v12 = sub_214336B74(a2);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= result && (a3 & 1) != 0)
    goto LABEL_7;
  if (v17 >= result && (a3 & 1) == 0)
  {
    result = (uint64_t)sub_2142A8970(a4);
LABEL_7:
    v18 = (_QWORD *)*v6;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      v19 = v18[7];
      result = swift_release();
      *(_QWORD *)(v19 + 8 * v12) = a1;
      return result;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    *(_BYTE *)(v18[6] + v12) = a2;
    *(_QWORD *)(v18[7] + 8 * v12) = a1;
    v21 = v18[2];
    v22 = __OFADD__(v21, 1);
    v23 = v21 + 1;
    if (!v22)
    {
      v18[2] = v23;
      return result;
    }
    goto LABEL_14;
  }
  sub_21429DC6C(result, a3 & 1, a4);
  result = sub_214336B74(a2);
  if ((v16 & 1) == (v20 & 1))
  {
    v12 = result;
    v18 = (_QWORD *)*v6;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = sub_214425820();
  __break(1u);
  return result;
}

uint64_t sub_2142A2DFC(char a1, uint64_t a2, uint64_t a3, char a4, char a5)
{
  _QWORD *v5;
  _QWORD **v6;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t result;
  unint64_t v23;
  char v24;

  v6 = (_QWORD **)v5;
  v12 = (_QWORD *)*v5;
  v14 = sub_214336B74(a4);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
  }
  else
  {
    v18 = v13;
    v19 = v12[3];
    if (v19 >= v17 && (a5 & 1) != 0)
    {
LABEL_7:
      v20 = *v6;
      if ((v18 & 1) != 0)
      {
LABEL_8:
        v21 = v20[7] + 24 * v14;
        swift_bridgeObjectRelease();
        result = swift_bridgeObjectRelease();
        *(_BYTE *)v21 = a1;
        *(_QWORD *)(v21 + 8) = a2;
        *(_QWORD *)(v21 + 16) = a3;
        return result;
      }
      return sub_2142A62F8(v14, a4, a1, a2, a3, v20);
    }
    if (v19 >= v17 && (a5 & 1) == 0)
    {
      sub_2142A8B08();
      goto LABEL_7;
    }
    sub_21429DF38(v17, a5 & 1);
    v23 = sub_214336B74(a4);
    if ((v18 & 1) == (v24 & 1))
    {
      v14 = v23;
      v20 = *v6;
      if ((v18 & 1) != 0)
        goto LABEL_8;
      return sub_2142A62F8(v14, a4, a1, a2, a3, v20);
    }
  }
  result = sub_214425820();
  __break(1u);
  return result;
}

uint64_t sub_2142A2F3C(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t result;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;

  v4 = v3;
  v8 = *v3;
  v10 = sub_21433AB28(a2);
  v11 = *(_QWORD *)(v8 + 16);
  v12 = (v9 & 1) == 0;
  result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v14 = v9;
  v15 = *(_QWORD *)(v8 + 24);
  if (v15 >= result && (a3 & 1) != 0)
    goto LABEL_7;
  if (v15 >= result && (a3 & 1) == 0)
  {
    result = (uint64_t)sub_2142A8CC4();
LABEL_7:
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
    {
LABEL_8:
      *(_QWORD *)(v16[7] + 8 * v10) = a1;
      return result;
    }
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    v18 = 8 * v10;
    *(_QWORD *)(v16[6] + v18) = a2;
    *(_QWORD *)(v16[7] + v18) = a1;
    v19 = v16[2];
    v20 = __OFADD__(v19, 1);
    v21 = v19 + 1;
    if (!v20)
    {
      v16[2] = v21;
      return result;
    }
    goto LABEL_14;
  }
  sub_21429E238(result, a3 & 1);
  result = sub_21433AB28(a2);
  if ((v14 & 1) == (v17 & 1))
  {
    v10 = result;
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = sub_214425820();
  __break(1u);
  return result;
}

uint64_t sub_2142A3068(uint64_t a1, char a2, double a3, double a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  char v19;
  double *v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  v5 = v4;
  v10 = *v4;
  v12 = sub_214336D80(a3, a4);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= result && (a2 & 1) != 0)
    goto LABEL_7;
  if (v17 >= result && (a2 & 1) == 0)
  {
    result = (uint64_t)sub_2142A8E50();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      *(_QWORD *)(v18[7] + 8 * v12) = a1;
      return result;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    v20 = (double *)(v18[6] + 16 * v12);
    *v20 = a3;
    v20[1] = a4;
    *(_QWORD *)(v18[7] + 8 * v12) = a1;
    v21 = v18[2];
    v22 = __OFADD__(v21, 1);
    v23 = v21 + 1;
    if (!v22)
    {
      v18[2] = v23;
      return result;
    }
    goto LABEL_14;
  }
  sub_21429E4DC(result, a2 & 1);
  result = sub_214336D80(a3, a4);
  if ((v16 & 1) == (v19 & 1))
  {
    v12 = result;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = sub_214425820();
  __break(1u);
  return result;
}

uint64_t sub_2142A3198(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t result;
  unint64_t v19;
  char v20;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = sub_214336DE0(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        v17 = v16[7];
        result = swift_release();
        *(_QWORD *)(v17 + 8 * v10) = a1;
        return result;
      }
      goto LABEL_11;
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_2142A8FE0();
      goto LABEL_7;
    }
    sub_21429E7C0(v13, a3 & 1);
    v19 = sub_214336DE0(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      v10 = v19;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_2142A6348(v10, a2, a1, v16);
      return sub_2142AB4D4(a2);
    }
  }
  result = sub_214425820();
  __break(1u);
  return result;
}

uint64_t sub_2142A32B4(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t result;
  unint64_t v19;
  char v20;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = sub_214336E38(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        v17 = v16[7];
        result = swift_release();
        *(_QWORD *)(v17 + 8 * v10) = a1;
        return result;
      }
      goto LABEL_11;
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_2142A91B0();
      goto LABEL_7;
    }
    sub_21429ED80(v13, a3 & 1);
    v19 = sub_214336E38(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      v10 = v19;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_2142A63C4(v10, a2, a1, v16);
      return sub_2142AB3E8(a2);
    }
  }
  result = sub_214425820();
  __break(1u);
  return result;
}

uint64_t sub_2142A33D0(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t result;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  v4 = v3;
  v8 = *v3;
  v10 = sub_21433AB28(a2);
  v11 = *(_QWORD *)(v8 + 16);
  v12 = (v9 & 1) == 0;
  result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v14 = v9;
  v15 = *(_QWORD *)(v8 + 24);
  if (v15 >= result && (a3 & 1) != 0)
    goto LABEL_7;
  if (v15 >= result && (a3 & 1) == 0)
  {
    result = (uint64_t)sub_2142A9C14();
LABEL_7:
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
    {
LABEL_8:
      v17 = v16[7];
      result = swift_release();
      *(_QWORD *)(v17 + 8 * v10) = a1;
      return result;
    }
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    v19 = 8 * v10;
    *(_QWORD *)(v16[6] + v19) = a2;
    *(_QWORD *)(v16[7] + v19) = a1;
    v20 = v16[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (!v21)
    {
      v16[2] = v22;
      return result;
    }
    goto LABEL_14;
  }
  sub_21429FF48(result, a3 & 1);
  result = sub_21433AB28(a2);
  if ((v14 & 1) == (v18 & 1))
  {
    v10 = result;
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = sub_214425820();
  __break(1u);
  return result;
}

uint64_t sub_2142A3508(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t result;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  uint64_t v22;

  v4 = (_QWORD **)v3;
  v8 = sub_214423C54();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)*v3;
  v14 = sub_214336EFC(a2);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  result = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  v18 = v13;
  v19 = v12[3];
  if (v19 >= result && (a3 & 1) != 0)
  {
LABEL_7:
    v20 = *v4;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      *(_QWORD *)(v20[7] + 8 * v14) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= result && (a3 & 1) == 0)
  {
    result = (uint64_t)sub_2142A9DB4();
    goto LABEL_7;
  }
  sub_2142A01FC(result, a3 & 1);
  result = sub_214336EFC(a2);
  if ((v18 & 1) != (v21 & 1))
  {
LABEL_14:
    result = sub_214425820();
    __break(1u);
    return result;
  }
  v14 = result;
  v20 = *v4;
  if ((v18 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  return sub_2142A6488(v14, (uint64_t)v11, a1, v20);
}

uint64_t sub_2142A3658(uint64_t a1, char a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  unint64_t v20;
  char v21;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = sub_214336B74(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        v17 = v16[7];
        v18 = v17
            + *(_QWORD *)(*(_QWORD *)(type metadata accessor for ChartContentRenderContext.Bins(0) - 8) + 72) * v10;
        return sub_2142AB5D8(a1, v18);
      }
      return sub_2142A6520(v10, a2, a1, v16);
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_2142A9FD8();
      goto LABEL_7;
    }
    sub_2142A057C(v13, a3 & 1);
    v20 = sub_214336B74(a2);
    if ((v14 & 1) == (v21 & 1))
    {
      v10 = v20;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
      return sub_2142A6520(v10, a2, a1, v16);
    }
  }
  result = sub_214425820();
  __break(1u);
  return result;
}

_QWORD *sub_2142A3774(uint64_t *a1, _QWORD *a2, char a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unint64_t v18;
  uint64_t v19;
  _BOOL8 v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t *v24;
  _QWORD *result;
  unint64_t v26;
  char v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _BYTE __dst[304];
  uint64_t v59[39];

  v4 = v3;
  v8 = *a1;
  v7 = a1[1];
  v10 = a1[2];
  v9 = a1[3];
  v12 = a1[4];
  v11 = a1[5];
  v14 = a1[6];
  v13 = a1[7];
  v29 = a1[8];
  v30 = a1[9];
  v31 = a1[10];
  v32 = a1[11];
  v33 = a1[12];
  v34 = a1[13];
  v35 = a1[14];
  v36 = a1[15];
  v37 = a1[16];
  v38 = a1[17];
  v39 = a1[18];
  v40 = a1[19];
  v41 = a1[20];
  v42 = a1[21];
  v43 = a1[22];
  v44 = a1[23];
  v46 = a1[24];
  v47 = a1[25];
  v51 = a1[27];
  v52 = a1[28];
  v15 = a1[36];
  v45 = a1[30];
  v48 = a1[31];
  v49 = a1[26];
  v50 = a1[32];
  v53 = a1[33];
  v54 = a1[29];
  v55 = a1[34];
  v56 = a1[35];
  v57 = a1[37];
  v16 = *v3;
  v18 = sub_214337634((uint64_t)a2);
  v19 = *(_QWORD *)(v16 + 16);
  v20 = (v17 & 1) == 0;
  v21 = v19 + v20;
  if (__OFADD__(v19, v20))
  {
    __break(1u);
  }
  else
  {
    v22 = v17;
    v23 = *(_QWORD *)(v16 + 24);
    if (v23 >= v21 && (a3 & 1) != 0)
    {
LABEL_7:
      if ((v22 & 1) != 0)
      {
LABEL_8:
        v24 = (uint64_t *)(*(_QWORD *)(*v4 + 56) + 304 * v18);
        memcpy(__dst, v24, sizeof(__dst));
        result = (_QWORD *)sub_2142AAF68((uint64_t)__dst);
        *v24 = v8;
        v24[1] = v7;
        v24[6] = v14;
        v24[7] = v13;
        v24[2] = v10;
        v24[3] = v9;
        v24[4] = v12;
        v24[5] = v11;
        v24[8] = v29;
        v24[9] = v30;
        v24[10] = v31;
        v24[11] = v32;
        v24[12] = v33;
        v24[13] = v34;
        v24[14] = v35;
        v24[15] = v36;
        v24[16] = v37;
        v24[17] = v38;
        v24[18] = v39;
        v24[19] = v40;
        v24[20] = v41;
        v24[21] = v42;
        v24[22] = v43;
        v24[23] = v44;
        v24[24] = v46;
        v24[25] = v47;
        v24[26] = v49;
        v24[27] = v51;
        v24[28] = v52;
        v24[29] = v54;
        v24[30] = v45;
        v24[31] = v48;
        v24[32] = v50;
        v24[33] = v53;
        v24[34] = v55;
        v24[35] = v56;
        v24[36] = v15;
        v24[37] = v57;
        return result;
      }
      goto LABEL_11;
    }
    if (v23 >= v21 && (a3 & 1) == 0)
    {
      sub_2142AA564();
      goto LABEL_7;
    }
    sub_2142A0DE4(v21, a3 & 1);
    v26 = sub_214337634((uint64_t)a2);
    if ((v22 & 1) == (v27 & 1))
    {
      v18 = v26;
      if ((v22 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      v59[0] = v8;
      v59[1] = v7;
      v59[6] = v14;
      v59[7] = v13;
      v28 = (_QWORD *)*v4;
      v59[2] = v10;
      v59[3] = v9;
      v59[4] = v12;
      v59[5] = v11;
      v59[8] = v29;
      v59[9] = v30;
      v59[10] = v31;
      v59[11] = v32;
      v59[12] = v33;
      v59[13] = v34;
      v59[14] = v35;
      v59[15] = v36;
      v59[16] = v37;
      v59[17] = v38;
      v59[18] = v39;
      v59[19] = v40;
      v59[20] = v41;
      v59[21] = v42;
      v59[22] = v43;
      v59[23] = v44;
      v59[24] = v46;
      v59[25] = v47;
      v59[26] = v49;
      v59[27] = v51;
      v59[28] = v52;
      v59[29] = v54;
      v59[30] = v45;
      v59[31] = v48;
      v59[32] = v50;
      v59[33] = v53;
      v59[34] = v55;
      v59[35] = v56;
      v59[36] = v15;
      v59[37] = v57;
      sub_2142A65AC(v18, (uint64_t)a2, v59, v28);
      return sub_21421C318(a2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21420B7DC);
    }
  }
  result = (_QWORD *)sub_214425820();
  __break(1u);
  return result;
}

uint64_t sub_2142A3B54(uint64_t a1, char a2, double a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t result;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;

  v4 = v3;
  v8 = *v3;
  v10 = sub_21433AB28(a1);
  v11 = *(_QWORD *)(v8 + 16);
  v12 = (v9 & 1) == 0;
  result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v14 = v9;
  v15 = *(_QWORD *)(v8 + 24);
  if (v15 >= result && (a2 & 1) != 0)
    goto LABEL_7;
  if (v15 >= result && (a2 & 1) == 0)
  {
    result = (uint64_t)sub_2142AA958();
LABEL_7:
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
    {
LABEL_8:
      *(double *)(v16[7] + 8 * v10) = a3;
      return result;
    }
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    v18 = 8 * v10;
    *(_QWORD *)(v16[6] + v18) = a1;
    *(double *)(v16[7] + v18) = a3;
    v19 = v16[2];
    v20 = __OFADD__(v19, 1);
    v21 = v19 + 1;
    if (!v20)
    {
      v16[2] = v21;
      return result;
    }
    goto LABEL_14;
  }
  sub_2142A1628(result, a2 & 1);
  result = sub_21433AB28(a1);
  if ((v14 & 1) == (v17 & 1))
  {
    v10 = result;
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = sub_214425820();
  __break(1u);
  return result;
}

uint64_t sub_2142A3C7C()
{
  uint64_t *v0;

  sub_2141ED07C(v0[7], v0[8], v0[9]);
  return swift_deallocObject();
}

uint64_t sub_2142A3CA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v5;

  result = type metadata accessor for AxisValueLabel.LabelContent(319, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *sub_2142A3D4C(unint64_t a1, unint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;

  v3 = (_QWORD *)a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  v6 = v5 & 0xF8 | 7;
  v7 = ~v6;
  if (*(_QWORD *)(v4 + 64) <= 0x10uLL)
    v8 = 16;
  else
    v8 = *(_QWORD *)(v4 + 64);
  if ((v5 & 0x1000F8) != 0 || (((v5 & 0xF8) + 112) & (unint64_t)~v6) + v8 + 1 > 0x18)
  {
    v10 = *(_QWORD *)a2;
    *v3 = *(_QWORD *)a2;
    v3 = (_QWORD *)(v10 + ((v6 + 16) & v7));
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v11 = a1 & 0xFFFFFFFFFFFFFFF8;
    v12 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
    *(_BYTE *)(v11 + 24) = *(_BYTE *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
    *(_OWORD *)(v11 + 8) = v12;
    v13 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 32);
    *(_BYTE *)(v11 + 48) = *(_BYTE *)((a2 & 0xFFFFFFFFFFFFFFF8) + 48);
    *(_OWORD *)(v11 + 32) = v13;
    v14 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 56);
    *(_DWORD *)(v11 + 71) = *(_DWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 71);
    *(_OWORD *)(v11 + 56) = v14;
    *(_BYTE *)(v11 + 75) = *(_BYTE *)((a2 & 0xFFFFFFFFFFFFFFF8) + 75);
    *(_BYTE *)(v11 + 76) = *(_BYTE *)((a2 & 0xFFFFFFFFFFFFFFF8) + 76);
    v15 = ((a1 & 0xFFFFFFFFFFFFFFF8) + 84) & 0xFFFFFFFFFFFFFFF8;
    v16 = ((a2 & 0xFFFFFFFFFFFFFFF8) + 84) & 0xFFFFFFFFFFFFFFF8;
    v17 = *(_QWORD *)v16;
    *(_BYTE *)(v15 + 8) = *(_BYTE *)(v16 + 8);
    *(_QWORD *)v15 = v17;
    v18 = ((a1 & 0xFFFFFFFFFFFFFFF8) + 100) & 0xFFFFFFFFFFFFFFF8;
    v19 = ((a2 & 0xFFFFFFFFFFFFFFF8) + 100) & 0xFFFFFFFFFFFFFFF8;
    v20 = *(_QWORD *)v19;
    *(_BYTE *)(v18 + 8) = *(_BYTE *)(v19 + 8);
    *(_QWORD *)v18 = v20;
    v21 = (_QWORD *)(((a1 & 0xFFFFFFFFFFFFFFF8) + 116) & v7);
    v22 = (_QWORD *)(((a2 & 0xFFFFFFFFFFFFFFF8) + 116) & v7);
    v23 = *((unsigned __int8 *)v22 + v8);
    if (v23 >= 2)
    {
      if (v8 <= 3)
        v24 = v8;
      else
        v24 = 4;
      __asm { BR              X14 }
    }
    if (v23 == 1)
    {
      (*(void (**)(_QWORD *))(v4 + 16))(v21);
      *((_BYTE *)v21 + v8) = 1;
      return v3;
    }
    v25 = v22[1];
    *v21 = *v22;
    v21[1] = v25;
    *((_BYTE *)v21 + v8) = 0;
  }
  swift_retain();
  return v3;
}

uint64_t sub_2142A3F2C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  uint64_t v7;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v3 = *(_DWORD *)(v2 + 80) & 0xF8 | 7;
  v4 = ((((a1 & 0xFFFFFFFFFFFFFFF8) + 100) & 0xFFFFFFFFFFFFFFF8) + v3 + 9) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  if (v5 <= 0x10)
    v5 = 16;
  v6 = *(unsigned __int8 *)(v4 + v5);
  if (v6 < 2)
  {
    if (v6 == 1)
      return (*(uint64_t (**)(void))(v2 + 8))();
    else
      return swift_release();
  }
  else
  {
    if (v5 <= 3)
      v7 = v5;
    else
      v7 = 4;
    return ((uint64_t (*)(void))((char *)&loc_2142A3F98 + 4 * byte_214429F8D[v7]))();
  }
}

unint64_t sub_2142A3FF8(unint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = a1 & 0xFFFFFFFFFFFFFFF8;
  v5 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
  *(_BYTE *)(v4 + 24) = *(_BYTE *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
  *(_OWORD *)(v4 + 8) = v5;
  v6 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 32);
  *(_BYTE *)(v4 + 48) = *(_BYTE *)((a2 & 0xFFFFFFFFFFFFFFF8) + 48);
  *(_OWORD *)(v4 + 32) = v6;
  v7 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 56);
  *(_DWORD *)(v4 + 71) = *(_DWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 71);
  *(_OWORD *)(v4 + 56) = v7;
  *(_BYTE *)(v4 + 75) = *(_BYTE *)((a2 & 0xFFFFFFFFFFFFFFF8) + 75);
  *(_BYTE *)(v4 + 76) = *(_BYTE *)((a2 & 0xFFFFFFFFFFFFFFF8) + 76);
  v8 = ((a1 & 0xFFFFFFFFFFFFFFF8) + 84) & 0xFFFFFFFFFFFFFFF8;
  v9 = ((a2 & 0xFFFFFFFFFFFFFFF8) + 84) & 0xFFFFFFFFFFFFFFF8;
  v10 = *(_QWORD *)v9;
  *(_BYTE *)(v8 + 8) = *(_BYTE *)(v9 + 8);
  *(_QWORD *)v8 = v10;
  v11 = ((a1 & 0xFFFFFFFFFFFFFFF8) + 100) & 0xFFFFFFFFFFFFFFF8;
  v12 = ((a2 & 0xFFFFFFFFFFFFFFF8) + 100) & 0xFFFFFFFFFFFFFFF8;
  v13 = *(_QWORD *)v12;
  *(_BYTE *)(v11 + 8) = *(_BYTE *)(v12 + 8);
  *(_QWORD *)v11 = v13;
  v14 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v15 = *(_DWORD *)(v14 + 80) & 0xF8;
  v16 = v15 + 16;
  v17 = v15 + 16 + v11;
  v18 = ~v15 & 0xFFFFFFFFFFFFFFF8;
  v19 = (_QWORD *)(v17 & v18);
  v20 = (_QWORD *)((v16 + v12) & v18);
  if (*(_QWORD *)(v14 + 64) <= 0x10uLL)
    v21 = 16;
  else
    v21 = *(_QWORD *)(v14 + 64);
  v22 = *((unsigned __int8 *)v20 + v21);
  if (v22 >= 2)
  {
    if (v21 <= 3)
      v23 = v21;
    else
      v23 = 4;
    __asm { BR              X13 }
  }
  if (v22 == 1)
  {
    (*(void (**)(_QWORD *))(v14 + 16))(v19);
    *((_BYTE *)v19 + v21) = 1;
  }
  else
  {
    v24 = *(_QWORD *)(((v16 + v12) & v18) + 8);
    *v19 = *v20;
    v19[1] = v24;
    *((_BYTE *)v19 + v21) = 0;
    swift_retain();
  }
  return a1;
}

unint64_t sub_2142A41A0(unint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = a1 & 0xFFFFFFFFFFFFFFF8;
  v5 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
  *(_BYTE *)(v4 + 24) = *(_BYTE *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
  *(_OWORD *)(v4 + 8) = v5;
  v6 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 32);
  *(_BYTE *)(v4 + 48) = *(_BYTE *)((a2 & 0xFFFFFFFFFFFFFFF8) + 48);
  *(_OWORD *)(v4 + 32) = v6;
  v7 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 56);
  *(_DWORD *)(v4 + 71) = *(_DWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 71);
  *(_OWORD *)(v4 + 56) = v7;
  *(_BYTE *)(v4 + 75) = *(_BYTE *)((a2 & 0xFFFFFFFFFFFFFFF8) + 75);
  *(_BYTE *)(v4 + 76) = *(_BYTE *)((a2 & 0xFFFFFFFFFFFFFFF8) + 76);
  v8 = ((a1 & 0xFFFFFFFFFFFFFFF8) + 84) & 0xFFFFFFFFFFFFFFF8;
  v9 = ((a2 & 0xFFFFFFFFFFFFFFF8) + 84) & 0xFFFFFFFFFFFFFFF8;
  v10 = *(_QWORD *)v9;
  *(_BYTE *)(v8 + 8) = *(_BYTE *)(v9 + 8);
  *(_QWORD *)v8 = v10;
  v11 = ((a1 & 0xFFFFFFFFFFFFFFF8) + 100) & 0xFFFFFFFFFFFFFFF8;
  v12 = ((a2 & 0xFFFFFFFFFFFFFFF8) + 100) & 0xFFFFFFFFFFFFFFF8;
  v13 = *(_QWORD *)v12;
  *(_BYTE *)(v11 + 8) = *(_BYTE *)(v12 + 8);
  *(_QWORD *)v11 = v13;
  v14 = *(_QWORD *)(a3 + 16);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(_DWORD *)(v15 + 80) & 0xF8;
  v17 = v16 + 16;
  v18 = v16 + 16 + v11;
  v19 = ~v16 & 0xFFFFFFFFFFFFFFF8;
  v20 = (_QWORD *)(v18 & v19);
  v21 = (_QWORD *)((v17 + v12) & v19);
  if ((_QWORD *)(v18 & v19) != v21)
  {
    if (*(_QWORD *)(v15 + 64) <= 0x10uLL)
      v22 = 16;
    else
      v22 = *(_QWORD *)(v15 + 64);
    v23 = *((unsigned __int8 *)v20 + v22);
    if (v23 >= 2)
    {
      if (v22 <= 3)
        v24 = v22;
      else
        v24 = 4;
      __asm { BR              X12 }
    }
    if (v23 == 1)
      (*(void (**)(_QWORD *, _QWORD))(v15 + 8))(v20, *(_QWORD *)(a3 + 16));
    else
      swift_release();
    v25 = *((unsigned __int8 *)v21 + v22);
    if (v25 >= 2)
    {
      if (v22 <= 3)
        v26 = v22;
      else
        v26 = 4;
      __asm { BR              X12 }
    }
    if (v25 == 1)
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v15 + 16))(v20, v21, v14);
      *((_BYTE *)v20 + v22) = 1;
    }
    else
    {
      v27 = v21[1];
      *v20 = *v21;
      v20[1] = v27;
      *((_BYTE *)v20 + v22) = 0;
      swift_retain();
    }
  }
  return a1;
}

unint64_t sub_2142A43FC(unint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _OWORD *v19;
  _OWORD *v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = a1 & 0xFFFFFFFFFFFFFFF8;
  v5 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
  *(_BYTE *)(v4 + 24) = *(_BYTE *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
  *(_OWORD *)(v4 + 8) = v5;
  v6 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 32);
  *(_BYTE *)(v4 + 48) = *(_BYTE *)((a2 & 0xFFFFFFFFFFFFFFF8) + 48);
  *(_OWORD *)(v4 + 32) = v6;
  v7 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 56);
  *(_DWORD *)(v4 + 71) = *(_DWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 71);
  *(_OWORD *)(v4 + 56) = v7;
  *(_BYTE *)(v4 + 75) = *(_BYTE *)((a2 & 0xFFFFFFFFFFFFFFF8) + 75);
  *(_BYTE *)(v4 + 76) = *(_BYTE *)((a2 & 0xFFFFFFFFFFFFFFF8) + 76);
  v8 = ((a1 & 0xFFFFFFFFFFFFFFF8) + 84) & 0xFFFFFFFFFFFFFFF8;
  v9 = ((a2 & 0xFFFFFFFFFFFFFFF8) + 84) & 0xFFFFFFFFFFFFFFF8;
  v10 = *(_QWORD *)v9;
  *(_BYTE *)(v8 + 8) = *(_BYTE *)(v9 + 8);
  *(_QWORD *)v8 = v10;
  v11 = ((a1 & 0xFFFFFFFFFFFFFFF8) + 100) & 0xFFFFFFFFFFFFFFF8;
  v12 = ((a2 & 0xFFFFFFFFFFFFFFF8) + 100) & 0xFFFFFFFFFFFFFFF8;
  v13 = *(_QWORD *)v12;
  *(_BYTE *)(v11 + 8) = *(_BYTE *)(v12 + 8);
  *(_QWORD *)v11 = v13;
  v14 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v15 = *(_DWORD *)(v14 + 80) & 0xF8;
  v16 = v15 + 16;
  v17 = v15 + 16 + v11;
  v18 = ~v15 & 0xFFFFFFFFFFFFFFF8;
  v19 = (_OWORD *)(v17 & v18);
  v20 = (_OWORD *)((v16 + v12) & v18);
  if (*(_QWORD *)(v14 + 64) <= 0x10uLL)
    v21 = 16;
  else
    v21 = *(_QWORD *)(v14 + 64);
  v22 = *((unsigned __int8 *)v20 + v21);
  if (v22 >= 2)
  {
    if (v21 <= 3)
      v23 = v21;
    else
      v23 = 4;
    __asm { BR              X13 }
  }
  if (v22 == 1)
  {
    (*(void (**)(_OWORD *))(v14 + 32))(v19);
    *((_BYTE *)v19 + v21) = 1;
  }
  else
  {
    *v19 = *v20;
    *((_BYTE *)v19 + v21) = 0;
  }
  return a1;
}

unint64_t sub_2142A45A0(unint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _OWORD *v20;
  _OWORD *v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = a1 & 0xFFFFFFFFFFFFFFF8;
  v5 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
  *(_BYTE *)(v4 + 24) = *(_BYTE *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
  *(_OWORD *)(v4 + 8) = v5;
  v6 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 32);
  *(_BYTE *)(v4 + 48) = *(_BYTE *)((a2 & 0xFFFFFFFFFFFFFFF8) + 48);
  *(_OWORD *)(v4 + 32) = v6;
  v7 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 56);
  *(_DWORD *)(v4 + 71) = *(_DWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 71);
  *(_OWORD *)(v4 + 56) = v7;
  *(_BYTE *)(v4 + 75) = *(_BYTE *)((a2 & 0xFFFFFFFFFFFFFFF8) + 75);
  *(_BYTE *)(v4 + 76) = *(_BYTE *)((a2 & 0xFFFFFFFFFFFFFFF8) + 76);
  v8 = ((a1 & 0xFFFFFFFFFFFFFFF8) + 84) & 0xFFFFFFFFFFFFFFF8;
  v9 = ((a2 & 0xFFFFFFFFFFFFFFF8) + 84) & 0xFFFFFFFFFFFFFFF8;
  v10 = *(_QWORD *)v9;
  *(_BYTE *)(v8 + 8) = *(_BYTE *)(v9 + 8);
  *(_QWORD *)v8 = v10;
  v11 = ((a1 & 0xFFFFFFFFFFFFFFF8) + 100) & 0xFFFFFFFFFFFFFFF8;
  v12 = ((a2 & 0xFFFFFFFFFFFFFFF8) + 100) & 0xFFFFFFFFFFFFFFF8;
  v13 = *(_QWORD *)v12;
  *(_BYTE *)(v11 + 8) = *(_BYTE *)(v12 + 8);
  *(_QWORD *)v11 = v13;
  v14 = *(_QWORD *)(a3 + 16);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(_DWORD *)(v15 + 80) & 0xF8;
  v17 = v16 + 16;
  v18 = v16 + 16 + v11;
  v19 = ~v16 & 0xFFFFFFFFFFFFFFF8;
  v20 = (_OWORD *)(v18 & v19);
  v21 = (_OWORD *)((v17 + v12) & v19);
  if ((_OWORD *)(v18 & v19) != v21)
  {
    if (*(_QWORD *)(v15 + 64) <= 0x10uLL)
      v22 = 16;
    else
      v22 = *(_QWORD *)(v15 + 64);
    v23 = *((unsigned __int8 *)v20 + v22);
    if (v23 >= 2)
    {
      if (v22 <= 3)
        v24 = v22;
      else
        v24 = 4;
      __asm { BR              X12 }
    }
    if (v23 == 1)
      (*(void (**)(_OWORD *, _QWORD))(v15 + 8))(v20, *(_QWORD *)(a3 + 16));
    else
      swift_release();
    v25 = *((unsigned __int8 *)v21 + v22);
    if (v25 >= 2)
    {
      if (v22 <= 3)
        v26 = v22;
      else
        v26 = 4;
      __asm { BR              X12 }
    }
    if (v25 == 1)
    {
      (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v15 + 32))(v20, v21, v14);
      *((_BYTE *)v20 + v22) = 1;
    }
    else
    {
      *v20 = *v21;
      *((_BYTE *)v20 + v22) = 0;
    }
  }
  return a1;
}

uint64_t sub_2142A47F8(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  int v8;
  unsigned int v10;
  int v11;
  unsigned int v12;
  BOOL v13;
  unsigned int v14;

  v3 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v4 = *(_QWORD *)(v3 + 64);
  if (v4 <= 0x10)
    v4 = 16;
  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_21;
  v5 = *(_DWORD *)(v3 + 80) & 0xF8;
  v6 = v4 + (~(_DWORD)v5 & (unint64_t)(v5 + 112)) + 1;
  v7 = 8 * v6;
  if (v6 > 3)
    goto LABEL_6;
  v10 = ((a2 + ~(-1 << v7) - 253) >> v7) + 1;
  if (HIWORD(v10))
  {
    v8 = *(_DWORD *)&a1[v6];
    if (v8)
      goto LABEL_14;
LABEL_21:
    v12 = *a1;
    v13 = v12 >= 2;
    v14 = (v12 + 2147483646) & 0x7FFFFFFF;
    if (!v13)
      v14 = -1;
    if (v14 + 1 >= 2)
      return v14;
    else
      return 0;
  }
  if (v10 > 0xFF)
  {
    v8 = *(unsigned __int16 *)&a1[v6];
    if (*(_WORD *)&a1[v6])
      goto LABEL_14;
    goto LABEL_21;
  }
  if (v10 < 2)
    goto LABEL_21;
LABEL_6:
  v8 = a1[v6];
  if (!a1[v6])
    goto LABEL_21;
LABEL_14:
  v11 = (v8 - 1) << v7;
  if (v6 > 3)
    v11 = 0;
  if (!(_DWORD)v6)
    return (v11 + 254);
  if (v6 > 3)
    LODWORD(v6) = 4;
  return ((uint64_t (*)(void))((char *)&loc_2142A48D4 + 4 * byte_214429FB0[(v6 - 1)]))();
}

void sub_2142A4938(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  if (v6 <= 0x10)
    v6 = 16;
  v7 = *(_DWORD *)(v5 + 80) & 0xF8;
  v8 = v6 + (~(_DWORD)v7 & (unint64_t)(v7 + 112)) + 1;
  if (a3 < 0xFE)
  {
    v9 = 0;
  }
  else if (v8 <= 3)
  {
    v11 = ((a3 + ~(-1 << (8 * v8)) - 253) >> (8 * v8)) + 1;
    if (HIWORD(v11))
    {
      v9 = 4u;
    }
    else if (v11 >= 0x100)
    {
      v9 = 2;
    }
    else
    {
      v9 = v11 > 1;
    }
  }
  else
  {
    v9 = 1u;
  }
  if (a2 <= 0xFD)
    __asm { BR              X10 }
  v10 = a2 - 254;
  if (v8 < 4)
  {
    if ((_DWORD)v8)
    {
      v12 = v10 & ~(-1 << (8 * v8));
      bzero(a1, v8);
      if ((_DWORD)v8 == 3)
      {
        *a1 = v12;
        *((_BYTE *)a1 + 2) = BYTE2(v12);
      }
      else if ((_DWORD)v8 == 2)
      {
        *a1 = v12;
      }
      else
      {
        *(_BYTE *)a1 = v12;
      }
    }
  }
  else
  {
    bzero(a1, v8);
    *(_DWORD *)a1 = v10;
  }
  __asm { BR              X10 }
}

uint64_t getEnumTagSinglePayload for AxisMarkPreset(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v6;
  int v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  if (*a1 <= 3u)
    v6 = 3;
  else
    v6 = *a1;
  v7 = v6 - 4;
  if (*a1 < 3u)
    v8 = -1;
  else
    v8 = v7;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for AxisValueLabelOrientation(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_2142A4BE4 + 4 * byte_214429FC3[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_2142A4C18 + 4 * byte_214429FBE[v4]))();
}

uint64_t sub_2142A4C18(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2142A4C20(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2142A4C28);
  return result;
}

uint64_t sub_2142A4C34(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2142A4C3CLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_2142A4C40(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2142A4C48(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AxisValueLabelOrientation()
{
  return &type metadata for AxisValueLabelOrientation;
}

__n128 initializeBufferWithCopyOfBuffer for AxisValueLabelCollisionResolution(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_DWORD *)(a1 + 15) = *(_DWORD *)(a2 + 15);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for AxisValueLabelCollisionResolution(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 19))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for AxisValueLabelCollisionResolution(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_BYTE *)(result + 18) = 0;
    *(_WORD *)(result + 16) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 19) = v3;
  return result;
}

ValueMetadata *type metadata accessor for AxisValueLabelCollisionResolution()
{
  return &type metadata for AxisValueLabelCollisionResolution;
}

uint64_t storeEnumTagSinglePayload for AxisValueLabelOrientation.Storage(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_2142A4D24 + 4 * byte_214429FCD[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_2142A4D58 + 4 * byte_214429FC8[v4]))();
}

uint64_t sub_2142A4D58(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2142A4D60(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2142A4D68);
  return result;
}

uint64_t sub_2142A4D74(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2142A4D7CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_2142A4D80(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2142A4D88(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AxisValueLabelOrientation.Storage()
{
  return &type metadata for AxisValueLabelOrientation.Storage;
}

__n128 initializeBufferWithCopyOfBuffer for AxisValueLabelCollisionResolution.Storage(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u16[0] = a2[1].n128_u16[0];
  *a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for AxisValueLabelCollisionResolution.Storage(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 18))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for AxisValueLabelCollisionResolution.Storage(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 0;
    *(_DWORD *)result = a2 - 1;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 18) = v3;
  return result;
}

uint64_t sub_2142A4E08(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_2142A4E24(uint64_t result, int a2)
{
  if (a2)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    *(_BYTE *)(result + 17) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for AxisValueLabelCollisionResolution.Storage()
{
  return &type metadata for AxisValueLabelCollisionResolution.Storage;
}

uint64_t sub_2142A4E58()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t *sub_2142A4ED0(uint64_t *__dst, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;

  v3 = __dst;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v4 + 64) <= 0x10uLL)
    v5 = 16;
  else
    v5 = *(_QWORD *)(v4 + 64);
  v6 = *(_DWORD *)(v4 + 80);
  if ((v6 & 0x1000F8) != 0 || (unint64_t)(v5 + 1) > 0x18)
  {
    v8 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v8 + ((unsigned __int16)((v6 & 0xF8) + 23) & (unsigned __int16)~(v6 & 0xF8) & 0x1F8));
  }
  else
  {
    v9 = *((unsigned __int8 *)a2 + v5);
    if (v9 >= 2)
    {
      if (v5 <= 3)
        v10 = v5;
      else
        v10 = 4;
      __asm { BR              X14 }
    }
    if (v9 == 1)
    {
      (*(void (**)(uint64_t *))(v4 + 16))(__dst);
      *((_BYTE *)v3 + v5) = 1;
      return v3;
    }
    v11 = a2[1];
    *v3 = *a2;
    v3[1] = v11;
    *((_BYTE *)v3 + v5) = 0;
  }
  swift_retain();
  return v3;
}

uint64_t sub_2142A4FF8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unsigned int v4;
  uint64_t v5;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v3 = *(_QWORD *)(v2 + 64);
  if (v3 <= 0x10)
    v3 = 16;
  v4 = *(unsigned __int8 *)(a1 + v3);
  if (v4 < 2)
  {
    if (v4 == 1)
      return (*(uint64_t (**)(void))(v2 + 8))();
    else
      return swift_release();
  }
  else
  {
    if (v3 <= 3)
      v5 = v3;
    else
      v5 = 4;
    return ((uint64_t (*)(void))((char *)&loc_2142A5040 + 4 * byte_214429FD7[v5]))();
  }
}

_BYTE *sub_2142A50A0(_BYTE *__dst, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v4 + 64) <= 0x10uLL)
    v5 = 16;
  else
    v5 = *(_QWORD *)(v4 + 64);
  v6 = *((unsigned __int8 *)a2 + v5);
  if (v6 >= 2)
  {
    if (v5 <= 3)
      v7 = v5;
    else
      v7 = 4;
    __asm { BR              X13 }
  }
  if (v6 == 1)
  {
    (*(void (**)(_BYTE *))(v4 + 16))(__dst);
    __dst[v5] = 1;
  }
  else
  {
    v8 = a2[1];
    *(_QWORD *)__dst = *a2;
    *((_QWORD *)__dst + 1) = v8;
    __dst[v5] = 0;
    swift_retain();
  }
  return __dst;
}

_BYTE *sub_2142A518C(_BYTE *__dst, _QWORD *__src, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;

  if (__dst != (_BYTE *)__src)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    if (*(_QWORD *)(v6 + 64) <= 0x10uLL)
      v7 = 16;
    else
      v7 = *(_QWORD *)(v6 + 64);
    v8 = __dst[v7];
    if (v8 >= 2)
    {
      if (v7 <= 3)
        v9 = v7;
      else
        v9 = 4;
      __asm { BR              X12 }
    }
    if (v8 == 1)
      (*(void (**)(_BYTE *, _QWORD))(v6 + 8))(__dst, *(_QWORD *)(a3 + 16));
    else
      swift_release();
    v10 = *((unsigned __int8 *)__src + v7);
    if (v10 >= 2)
    {
      if (v7 <= 3)
        v11 = v7;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    if (v10 == 1)
    {
      (*(void (**)(_BYTE *, _QWORD *, uint64_t))(v6 + 16))(__dst, __src, v5);
      __dst[v7] = 1;
    }
    else
    {
      v12 = __src[1];
      *(_QWORD *)__dst = *__src;
      *((_QWORD *)__dst + 1) = v12;
      __dst[v7] = 0;
      swift_retain();
    }
  }
  return __dst;
}

_BYTE *sub_2142A5338(_BYTE *__dst, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v4 + 64) <= 0x10uLL)
    v5 = 16;
  else
    v5 = *(_QWORD *)(v4 + 64);
  v6 = *((unsigned __int8 *)a2 + v5);
  if (v6 >= 2)
  {
    if (v5 <= 3)
      v7 = v5;
    else
      v7 = 4;
    __asm { BR              X13 }
  }
  if (v6 == 1)
  {
    (*(void (**)(_BYTE *))(v4 + 32))(__dst);
    __dst[v5] = 1;
  }
  else
  {
    *(_OWORD *)__dst = *a2;
    __dst[v5] = 0;
  }
  return __dst;
}

unsigned __int8 *sub_2142A5420(unsigned __int8 *__dst, unsigned __int8 *__src, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;

  if (__dst != __src)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    if (*(_QWORD *)(v6 + 64) <= 0x10uLL)
      v7 = 16;
    else
      v7 = *(_QWORD *)(v6 + 64);
    v8 = __dst[v7];
    if (v8 >= 2)
    {
      if (v7 <= 3)
        v9 = v7;
      else
        v9 = 4;
      __asm { BR              X12 }
    }
    if (v8 == 1)
      (*(void (**)(unsigned __int8 *, _QWORD))(v6 + 8))(__dst, *(_QWORD *)(a3 + 16));
    else
      swift_release();
    v10 = __src[v7];
    if (v10 >= 2)
    {
      if (v7 <= 3)
        v11 = v7;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    if (v10 == 1)
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32))(__dst, __src, v5);
      __dst[v7] = 1;
    }
    else
    {
      *(_OWORD *)__dst = *(_OWORD *)__src;
      __dst[v7] = 0;
    }
  }
  return __dst;
}

uint64_t sub_2142A55C8(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  int v6;
  unsigned int v8;
  int v9;
  unsigned int v10;

  v3 = 16;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64) > 0x10uLL)
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_21;
  v4 = v3 + 1;
  v5 = 8 * (v3 + 1);
  if ((v3 + 1) <= 3)
  {
    v8 = ((a2 + ~(-1 << v5) - 253) >> v5) + 1;
    if (HIWORD(v8))
    {
      v6 = *(_DWORD *)(a1 + v4);
      if (!v6)
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v8 > 0xFF)
    {
      v6 = *(unsigned __int16 *)(a1 + v4);
      if (!*(_WORD *)(a1 + v4))
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v8 < 2)
    {
LABEL_21:
      v10 = *(unsigned __int8 *)(a1 + v3);
      if (v10 >= 3)
        return (v10 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v6 = *(unsigned __int8 *)(a1 + v4);
  if (!*(_BYTE *)(a1 + v4))
    goto LABEL_21;
LABEL_14:
  v9 = (v6 - 1) << v5;
  if (v4 > 3)
    v9 = 0;
  if (!(_DWORD)v4)
    return (v9 + 254);
  if (v4 > 3)
    LODWORD(v4) = 4;
  return ((uint64_t (*)(void))((char *)&loc_2142A568C + 4 * byte_214429FFA[(v4 - 1)]))();
}

void sub_2142A56D8(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5;
  size_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) - 8) + 64);
  if (v5 <= 0x10)
    v5 = 16;
  v6 = v5 + 1;
  if (a3 < 0xFE)
  {
    v7 = 0;
  }
  else if (v6 <= 3)
  {
    v9 = ((a3 + ~(-1 << (8 * v6)) - 253) >> (8 * v6)) + 1;
    if (HIWORD(v9))
    {
      v7 = 4u;
    }
    else if (v9 >= 0x100)
    {
      v7 = 2;
    }
    else
    {
      v7 = v9 > 1;
    }
  }
  else
  {
    v7 = 1u;
  }
  if (a2 <= 0xFD)
    __asm { BR              X11 }
  v8 = a2 - 254;
  if (v6 < 4)
  {
    if ((_DWORD)v5 != -1)
    {
      v10 = v8 & ~(-1 << (8 * v6));
      bzero(a1, v6);
      if ((_DWORD)v6 == 3)
      {
        *a1 = v10;
        *((_BYTE *)a1 + 2) = BYTE2(v10);
      }
      else if ((_DWORD)v6 == 2)
      {
        *a1 = v10;
      }
      else
      {
        *(_BYTE *)a1 = v10;
      }
    }
  }
  else
  {
    bzero(a1, v5 + 1);
    *(_DWORD *)a1 = v8;
  }
  __asm { BR              X10 }
}

uint64_t sub_2142A5880(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = 16;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64) > 0x10uLL)
    v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64);
  if (*(unsigned __int8 *)(a1 + v2) < 2u)
    return *(unsigned __int8 *)(a1 + v2);
  if (v2 <= 3)
    v3 = v2;
  else
    v3 = 4;
  return ((uint64_t (*)(void))((char *)&loc_2142A58C8 + 4 * byte_21442A008[v3]))();
}

void sub_2142A5910(_BYTE *a1, unsigned int a2, uint64_t a3)
{
  size_t v4;
  unsigned int v5;
  unsigned int v6;
  int v7;

  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64) <= 0x10uLL)
    v4 = 16;
  else
    v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  if (a2 > 1)
  {
    v5 = a2 - 2;
    if (v4 < 4)
    {
      v6 = v5 >> (8 * v4);
      v7 = v5 & ~(-1 << (8 * v4));
      a1[v4] = v6 + 2;
      bzero(a1, v4);
      if ((_DWORD)v4 == 3)
      {
        *(_WORD *)a1 = v7;
        a1[2] = BYTE2(v7);
      }
      else if ((_DWORD)v4 == 2)
      {
        *(_WORD *)a1 = v7;
      }
      else
      {
        *a1 = v7;
      }
    }
    else
    {
      a1[v4] = 2;
      bzero(a1, v4);
      *(_DWORD *)a1 = v5;
    }
  }
  else
  {
    a1[v4] = a2;
  }
}

unint64_t sub_2142A59DC()
{
  unint64_t result;

  result = qword_254D6A458;
  if (!qword_254D6A458)
  {
    result = MEMORY[0x2199CD934](&unk_21442A208, &type metadata for AxisValueLabelOrientation.Storage);
    atomic_store(result, (unint64_t *)&qword_254D6A458);
  }
  return result;
}

unint64_t sub_2142A5A20(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  char v12;
  int v13;
  int v14;
  char v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  char v28;
  unint64_t result;
  uint64_t v30;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD v44[19];
  _BYTE v45[152];

  sub_214425874();
  sub_214425880();
  v33 = a1;
  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    v5 = a1 + 32;
    while (1)
    {
      sub_2141EF6B8(v5, (uint64_t)v44);
      sub_2141EF6B8((uint64_t)v44, (uint64_t)v45);
      v10 = sub_21421C2FC((uint64_t)v45);
      v11 = sub_21421C308((uint64_t)v45);
      if (v10 != 1)
      {
        v21 = *(_QWORD *)(v11 + 16);
        v22 = *(_BYTE *)(v11 + 24);
        v23 = *(_QWORD *)(v11 + 40);
        v43 = *(_QWORD *)(v11 + 8);
        v24 = *(_QWORD *)(v11 + 48);
        v25 = *(char *)(v11 + 56);
        v26 = *(unsigned __int8 *)(v11 + 56);
        sub_214425880();
        sub_214425880();
        if (v25 < 0)
        {
          sub_214425880();
          sub_214425880();
          sub_214425898();
          sub_214425898();
          sub_21421C318(v44, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21420B7DC);
          sub_2141DD130(v43, v21, v22);
          swift_bridgeObjectRetain();
          v6 = v26;
        }
        else
        {
          sub_214425880();
          v6 = v26;
          sub_214425880();
          if (v26 > 1)
          {
            sub_21421C318(v44, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21420B7DC);
            sub_2141DD130(v43, v21, v22);
            swift_bridgeObjectRetain();
            sub_2141DD140(v23, v24, 2);
            sub_214424F14();
          }
          else
          {
            sub_214425898();
            sub_21421C318(v44, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21420B7DC);
            sub_2141DD130(v43, v21, v22);
            swift_bridgeObjectRetain();
          }
        }
        sub_214425880();
        sub_2141ED0BC(v43, v21, v22);
        swift_bridgeObjectRelease();
        v7 = v23;
        v8 = v24;
        v9 = v6;
        goto LABEL_5;
      }
      v12 = *(_BYTE *)(v11 + 24);
      v37 = *(_QWORD *)(v11 + 8);
      v38 = *(_QWORD *)(v11 + 48);
      v13 = *(char *)(v11 + 56);
      v14 = *(unsigned __int8 *)(v11 + 56);
      v39 = *(_QWORD *)(v11 + 40);
      v40 = *(_QWORD *)(v11 + 80);
      v35 = *(_QWORD *)(v11 + 16);
      v36 = *(_QWORD *)(v11 + 88);
      v15 = *(_BYTE *)(v11 + 96);
      v41 = *(_QWORD *)(v11 + 120);
      v42 = *(_QWORD *)(v11 + 112);
      v16 = *(unsigned __int8 *)(v11 + 128);
      sub_214425880();
      sub_214425880();
      v34 = v14;
      if (v13 < 0)
      {
        sub_214425880();
        sub_214425880();
        sub_214425898();
        sub_214425898();
        sub_21421C318(v44, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21420B7DC);
        v27 = v35;
        sub_2141DD130(v37, v35, v12);
        swift_bridgeObjectRetain();
        v17 = v36;
        sub_2141DD130(v40, v36, v15);
        swift_bridgeObjectRetain();
        sub_2141DD140(v42, v41, v16);
        v18 = v16;
        v19 = v37;
        if ((v18 & 0x80) != 0)
          goto LABEL_15;
        goto LABEL_18;
      }
      v17 = v36;
      v18 = v16;
      sub_214425880();
      if (!v14)
        break;
      v19 = v37;
      if (v14 == 1)
      {
        sub_214425880();
        sub_214425898();
        sub_21421C318(v44, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21420B7DC);
        v20 = v37;
        goto LABEL_17;
      }
      sub_214425880();
      sub_21421C318(v44, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21420B7DC);
      v27 = v35;
      sub_2141DD130(v37, v35, v12);
      swift_bridgeObjectRetain();
      sub_2141DD130(v40, v36, v15);
      swift_bridgeObjectRetain();
      sub_2141DD140(v42, v41, v18);
      sub_2141DD140(v39, v38, 2);
      sub_214424F14();
      if ((v18 & 0x80) != 0)
      {
LABEL_15:
        sub_214425880();
        sub_214425880();
        sub_214425898();
        sub_214425898();
        v27 = v35;
        v17 = v36;
        v19 = v37;
        goto LABEL_27;
      }
LABEL_18:
      sub_214425880();
      if (v18)
      {
        sub_214425880();
        if (v18 == 1)
          sub_214425898();
        else
          sub_214424F14();
        v28 = v34;
        goto LABEL_28;
      }
      sub_214425880();
      sub_214425898();
LABEL_27:
      v28 = v34;
LABEL_28:
      sub_2141ED0BC(v19, v27, v12);
      swift_bridgeObjectRelease();
      sub_2141EF1B0(v39, v38, v28);
      sub_2141ED0BC(v40, v17, v15);
      swift_bridgeObjectRelease();
      v8 = v41;
      v7 = v42;
      v9 = v18;
LABEL_5:
      sub_2141EF1B0(v7, v8, v9);
      sub_21421C318(v44, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141EF5D4);
      v5 += 152;
      if (!--v4)
        goto LABEL_29;
    }
    sub_214425880();
    sub_214425898();
    sub_21421C318(v44, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21420B7DC);
    v19 = v37;
    v20 = v37;
LABEL_17:
    v27 = v35;
    sub_2141DD130(v20, v35, v12);
    swift_bridgeObjectRetain();
    sub_2141DD130(v40, v36, v15);
    swift_bridgeObjectRetain();
    sub_2141DD140(v42, v41, v18);
    if ((v18 & 0x80) != 0)
      goto LABEL_15;
    goto LABEL_18;
  }
LABEL_29:
  sub_2144258B0();
  result = sub_214425430();
  *(_QWORD *)((char *)a3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
  v30 = 8 * result;
  *(_QWORD *)(a3[6] + v30) = v33;
  *(_QWORD *)(a3[7] + v30) = a2;
  ++a3[2];
  return result;
}

uint64_t sub_2142A60AC(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = type metadata accessor for CalendarCache.Key(0);
  result = sub_2141FE1E0(a2, v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, type metadata accessor for CalendarCache.Key);
  *(_QWORD *)(a4[7] + 8 * a1) = a3;
  v11 = a4[2];
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  if (v12)
    __break(1u);
  else
    a4[2] = v13;
  return result;
}

unint64_t sub_2142A6144(unint64_t result, uint64_t a2, _QWORD *a3, double a4, double a5)
{
  uint64_t v5;
  __int128 v6;
  double *v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a3[(result >> 6) + 8] |= 1 << result;
  v5 = a3[6] + 56 * result;
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v5 = *(_OWORD *)a2;
  *(_OWORD *)(v5 + 16) = v6;
  *(_OWORD *)(v5 + 32) = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(v5 + 48) = *(_BYTE *)(a2 + 48);
  v7 = (double *)(a3[7] + 16 * result);
  *v7 = a4;
  v7[1] = a5;
  v8 = a3[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a3[2] = v10;
  return result;
}

void *sub_2142A61A8(unint64_t a1, uint64_t a2, void *__src, _QWORD *a4)
{
  void *result;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(_QWORD *)(a4[6] + 8 * a1) = a2;
  result = memcpy((void *)(a4[7] + 784 * a1), __src, 0x309uLL);
  v6 = a4[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a4[2] = v8;
  return result;
}

unint64_t sub_2142A6214(unint64_t result, char a2, uint64_t a3, __int16 a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a5[(result >> 6) + 8] |= 1 << result;
  *(_BYTE *)(a5[6] + result) = a2;
  v5 = a5[7] + 16 * result;
  *(_QWORD *)v5 = a3;
  *(_BYTE *)(v5 + 8) = a4;
  *(_BYTE *)(v5 + 9) = HIBYTE(a4) & 1;
  v6 = a5[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a5[2] = v8;
  return result;
}

unint64_t sub_2142A6268(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a5[(result >> 6) + 8] |= 1 << result;
  *(_QWORD *)(a5[6] + 8 * result) = a2;
  v5 = (_QWORD *)(a5[7] + 16 * result);
  *v5 = a3;
  v5[1] = a4;
  v6 = a5[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a5[2] = v8;
  return result;
}

unint64_t sub_2142A62B0(unint64_t result, char a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a5[(result >> 6) + 8] |= 1 << result;
  *(_BYTE *)(a5[6] + result) = a2;
  v5 = (_QWORD *)(a5[7] + 16 * result);
  *v5 = a3;
  v5[1] = a4;
  v6 = a5[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a5[2] = v8;
  return result;
}

unint64_t sub_2142A62F8(unint64_t result, char a2, char a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;

  a6[(result >> 6) + 8] |= 1 << result;
  *(_BYTE *)(a6[6] + result) = a2;
  v6 = a6[7] + 24 * result;
  *(_BYTE *)v6 = a3;
  *(_QWORD *)(v6 + 8) = a4;
  *(_QWORD *)(v6 + 16) = a5;
  v7 = a6[2];
  v8 = __OFADD__(v7, 1);
  v9 = v7 + 1;
  if (v8)
    __break(1u);
  else
    a6[2] = v9;
  return result;
}

uint64_t sub_2142A6348(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  result = sub_2142AB54C(a2, a4[6] + 48 * a1);
  *(_QWORD *)(a4[7] + 8 * a1) = a3;
  v8 = a4[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a4[2] = v10;
  return result;
}

uint64_t sub_2142A63C4(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  result = sub_2142AB498(a2, a4[6] + 72 * a1);
  *(_QWORD *)(a4[7] + 8 * a1) = a3;
  v8 = a4[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a4[2] = v10;
  return result;
}

unint64_t sub_2142A6440(unint64_t result, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  a4[(result >> 6) + 8] |= 1 << result;
  v4 = 8 * result;
  *(_QWORD *)(a4[6] + v4) = a2;
  *(_QWORD *)(a4[7] + v4) = a3;
  v5 = a4[2];
  v6 = __OFADD__(v5, 1);
  v7 = v5 + 1;
  if (v6)
    __break(1u);
  else
    a4[2] = v7;
  return result;
}

uint64_t sub_2142A6488(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = sub_214423C54();
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, a2, v9);
  *(_QWORD *)(a4[7] + 8 * a1) = a3;
  v11 = a4[2];
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  if (v12)
    __break(1u);
  else
    a4[2] = v13;
  return result;
}

uint64_t sub_2142A6520(unint64_t a1, char a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(_BYTE *)(a4[6] + a1) = a2;
  v7 = a4[7];
  v8 = type metadata accessor for ChartContentRenderContext.Bins(0);
  result = sub_2141FE1E0(a3, v7 + *(_QWORD *)(*(_QWORD *)(v8 - 8) + 72) * a1, type metadata accessor for ChartContentRenderContext.Bins);
  v10 = a4[2];
  v11 = __OFADD__(v10, 1);
  v12 = v10 + 1;
  if (v11)
    __break(1u);
  else
    a4[2] = v12;
  return result;
}

uint64_t sub_2142A65AC(unint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;

  v7 = *a3;
  v8 = a3[1];
  v9 = a3[4];
  v10 = a3[5];
  v34 = *((_OWORD *)a3 + 3);
  v35 = *((_OWORD *)a3 + 1);
  v32 = *((_OWORD *)a3 + 5);
  v33 = *((_OWORD *)a3 + 4);
  v30 = *((_OWORD *)a3 + 7);
  v31 = *((_OWORD *)a3 + 6);
  v28 = *((_OWORD *)a3 + 9);
  v29 = *((_OWORD *)a3 + 8);
  v26 = *((_OWORD *)a3 + 11);
  v27 = *((_OWORD *)a3 + 10);
  v24 = *((_OWORD *)a3 + 13);
  v25 = *((_OWORD *)a3 + 12);
  v22 = *((_OWORD *)a3 + 15);
  v23 = *((_OWORD *)a3 + 14);
  v21 = *((_OWORD *)a3 + 16);
  v11 = a4[6] + 152 * a1;
  v12 = a3[34];
  v13 = a3[35];
  v14 = a3[36];
  v15 = a3[37];
  a4[(a1 >> 6) + 8] |= 1 << a1;
  result = sub_2141EF6B8(a2, v11);
  v17 = a4[7] + 304 * a1;
  *(_QWORD *)v17 = v7;
  *(_QWORD *)(v17 + 8) = v8;
  *(_OWORD *)(v17 + 16) = v35;
  *(_QWORD *)(v17 + 32) = v9;
  *(_QWORD *)(v17 + 40) = v10;
  *(_OWORD *)(v17 + 48) = v34;
  *(_OWORD *)(v17 + 64) = v33;
  *(_OWORD *)(v17 + 80) = v32;
  *(_OWORD *)(v17 + 96) = v31;
  *(_OWORD *)(v17 + 112) = v30;
  *(_OWORD *)(v17 + 128) = v29;
  *(_OWORD *)(v17 + 144) = v28;
  *(_OWORD *)(v17 + 160) = v27;
  *(_OWORD *)(v17 + 176) = v26;
  *(_OWORD *)(v17 + 192) = v25;
  *(_OWORD *)(v17 + 208) = v24;
  *(_OWORD *)(v17 + 224) = v23;
  *(_OWORD *)(v17 + 240) = v22;
  *(_OWORD *)(v17 + 256) = v21;
  *(_QWORD *)(v17 + 272) = v12;
  *(_QWORD *)(v17 + 280) = v13;
  *(_QWORD *)(v17 + 288) = v14;
  *(_QWORD *)(v17 + 296) = v15;
  v18 = a4[2];
  v19 = __OFADD__(v18, 1);
  v20 = v18 + 1;
  if (v19)
    __break(1u);
  else
    a4[2] = v20;
  return result;
}

unint64_t sub_2142A6730(unint64_t result, char a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a4[(result >> 6) + 8] |= 1 << result;
  *(_BYTE *)(a4[6] + result) = a2;
  v4 = a4[7] + 56 * result;
  v5 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)v4 = *(_OWORD *)a3;
  *(_OWORD *)(v4 + 16) = v5;
  *(_OWORD *)(v4 + 32) = *(_OWORD *)(a3 + 32);
  *(_QWORD *)(v4 + 48) = *(_QWORD *)(a3 + 48);
  v6 = a4[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a4[2] = v8;
  return result;
}

void *sub_2142A6790()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int16 v24;
  unsigned __int8 v25;
  uint64_t v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;

  v1 = v0;
  sub_2141D8BF8(&qword_253F13570);
  v2 = *v0;
  v3 = sub_2144256B8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v27 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v27 >= v13)
      goto LABEL_26;
    v28 = *(_QWORD *)(v6 + 8 * v27);
    ++v9;
    if (!v28)
    {
      v9 = v27 + 1;
      if (v27 + 1 >= v13)
        goto LABEL_26;
      v28 = *(_QWORD *)(v6 + 8 * v9);
      if (!v28)
        break;
    }
LABEL_25:
    v12 = (v28 - 1) & v28;
    v15 = __clz(__rbit64(v28)) + (v9 << 6);
LABEL_12:
    v16 = *(_QWORD *)(v2 + 56) + 72 * v15;
    v17 = *(_QWORD *)v16;
    v18 = *(_BYTE *)(v16 + 8);
    v19 = *(_QWORD *)(v16 + 16);
    v20 = *(_QWORD *)(v16 + 24);
    v21 = *(_QWORD *)(v16 + 32);
    v22 = *(_QWORD *)(v16 + 48);
    v23 = *(_QWORD *)(v16 + 56);
    v24 = *(_WORD *)(v16 + 40);
    v25 = *(_BYTE *)(v16 + 64);
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
    v26 = *(_QWORD *)(v4 + 56) + 72 * v15;
    *(_QWORD *)v26 = v17;
    *(_BYTE *)(v26 + 8) = v18;
    *(_QWORD *)(v26 + 16) = v19;
    *(_QWORD *)(v26 + 24) = v20;
    *(_QWORD *)(v26 + 32) = v21;
    *(_WORD *)(v26 + 40) = v24;
    *(_QWORD *)(v26 + 48) = v22;
    *(_QWORD *)(v26 + 56) = v23;
    *(_BYTE *)(v26 + 64) = v25;
    sub_2141D8CE8(v19, v20, v21, v24);
    result = (void *)sub_2141D8CFC(v22, v23, v25);
  }
  v29 = v27 + 2;
  if (v29 >= v13)
    goto LABEL_26;
  v28 = *(_QWORD *)(v6 + 8 * v29);
  if (v28)
  {
    v9 = v29;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v29 + 1;
    if (__OFADD__(v29, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v28 = *(_QWORD *)(v6 + 8 * v9);
    ++v29;
    if (v28)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_2142A6984(uint64_t a1, uint64_t a2)
{
  assignWithTake for ChartInternal.ScaleDef(a2, a1);
  return a2;
}

void *sub_2142A69C0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;

  v1 = v0;
  v2 = type metadata accessor for CalendarCache.Key(0);
  v27 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2141D8BF8(&qword_253F11968);
  v5 = *v0;
  v6 = sub_2144256B8();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v1 = v7;
    return result;
  }
  v25 = v1;
  result = (void *)(v6 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9)
    result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  v26 = v5 + 64;
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v12 = 1 << *(_BYTE *)(v5 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v5 + 64);
  v15 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      v16 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v17 = v16 | (v11 << 6);
      goto LABEL_12;
    }
    v21 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v21 >= v15)
      goto LABEL_26;
    v22 = *(_QWORD *)(v26 + 8 * v21);
    ++v11;
    if (!v22)
    {
      v11 = v21 + 1;
      if (v21 + 1 >= v15)
        goto LABEL_26;
      v22 = *(_QWORD *)(v26 + 8 * v11);
      if (!v22)
        break;
    }
LABEL_25:
    v14 = (v22 - 1) & v22;
    v17 = __clz(__rbit64(v22)) + (v11 << 6);
LABEL_12:
    v18 = *(_QWORD *)(v27 + 72) * v17;
    sub_2141FDEA0(*(_QWORD *)(v5 + 48) + v18, (uint64_t)v4, type metadata accessor for CalendarCache.Key);
    v19 = 8 * v17;
    v20 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + v19);
    result = (void *)sub_2141FE1E0((uint64_t)v4, *(_QWORD *)(v7 + 48) + v18, type metadata accessor for CalendarCache.Key);
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + v19) = v20;
  }
  v23 = v21 + 2;
  if (v23 >= v15)
  {
LABEL_26:
    result = (void *)swift_release();
    v1 = v25;
    goto LABEL_28;
  }
  v22 = *(_QWORD *)(v26 + 8 * v23);
  if (v22)
  {
    v11 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v11 >= v15)
      goto LABEL_26;
    v22 = *(_QWORD *)(v26 + 8 * v11);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_2142A6BF0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  char v26;
  char v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;

  v1 = v0;
  sub_2141D8BF8(&qword_253F10B98);
  v2 = *v0;
  v3 = sub_2144256B8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v28 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v28 >= v13)
      goto LABEL_26;
    v29 = *(_QWORD *)(v6 + 8 * v28);
    ++v9;
    if (!v29)
    {
      v9 = v28 + 1;
      if (v28 + 1 >= v13)
        goto LABEL_26;
      v29 = *(_QWORD *)(v6 + 8 * v9);
      if (!v29)
        break;
    }
LABEL_25:
    v12 = (v29 - 1) & v29;
    v15 = __clz(__rbit64(v29)) + (v9 << 6);
LABEL_12:
    v16 = 56 * v15;
    v17 = *(_QWORD *)(v2 + 48) + 56 * v15;
    v18 = *(_BYTE *)(v17 + 2);
    v19 = *(_QWORD *)(v17 + 8);
    v20 = *(_QWORD *)(v17 + 16);
    v21 = *(_QWORD *)(v17 + 32);
    v22 = *(_QWORD *)(v17 + 40);
    v23 = 16 * v15;
    v24 = *(_QWORD *)(v4 + 48) + v16;
    v25 = *(_OWORD *)(*(_QWORD *)(v2 + 56) + v23);
    v26 = *(_BYTE *)(v17 + 24);
    v27 = *(_BYTE *)(v17 + 48);
    *(_WORD *)v24 = *(_WORD *)v17;
    *(_BYTE *)(v24 + 2) = v18;
    *(_QWORD *)(v24 + 8) = v19;
    *(_QWORD *)(v24 + 16) = v20;
    *(_BYTE *)(v24 + 24) = v26;
    *(_QWORD *)(v24 + 32) = v21;
    *(_QWORD *)(v24 + 40) = v22;
    *(_BYTE *)(v24 + 48) = v27;
    *(_OWORD *)(*(_QWORD *)(v4 + 56) + v23) = v25;
    sub_2141DD164(v19, v20, v26);
    result = (void *)sub_2141DD164(v21, v22, v27);
  }
  v30 = v28 + 2;
  if (v30 >= v13)
    goto LABEL_26;
  v29 = *(_QWORD *)(v6 + 8 * v30);
  if (v29)
  {
    v9 = v30;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v30 + 1;
    if (__OFADD__(v30, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v29 = *(_QWORD *)(v6 + 8 * v9);
    ++v30;
    if (v29)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_2142A6DE0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  v1 = v0;
  sub_2141D8BF8(&qword_253F12688);
  v2 = *v0;
  v3 = sub_2144256B8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_26;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
        break;
    }
LABEL_25:
    v12 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v17;
    result = (void *)swift_bridgeObjectRetain();
  }
  v20 = v18 + 2;
  if (v20 >= v13)
    goto LABEL_26;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_2142A6F80()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  __int128 v18;
  __int128 v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  _OWORD v23[3];

  v1 = v0;
  sub_2141D8BF8(&qword_253F15D00);
  v2 = *v0;
  v3 = sub_2144256B8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    result = (void *)sub_2141ED7E0(*(_QWORD *)(v2 + 48) + 48 * v15, (uint64_t)v23);
    v16 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v15);
    v17 = (_OWORD *)(*(_QWORD *)(v4 + 48) + 48 * v15);
    v18 = v23[0];
    v19 = v23[2];
    v17[1] = v23[1];
    v17[2] = v19;
    *v17 = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v15) = v16;
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_2142A7150()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t *v22;
  _BYTE __src[792];

  v1 = v0;
  sub_2141D8BF8(&qword_253F13318);
  v2 = *v0;
  v3 = sub_2144256B8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v1 = v4;
    return result;
  }
  v22 = v1;
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v19 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      v9 = v19 + 1;
      if (v19 + 1 >= v13)
        goto LABEL_26;
      v20 = *(_QWORD *)(v6 + 8 * v9);
      if (!v20)
        break;
    }
LABEL_25:
    v12 = (v20 - 1) & v20;
    v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 784 * v15;
    sub_2142AAF2C(*(_QWORD *)(v2 + 56) + 784 * v15, (uint64_t)__src);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    result = memcpy((void *)(*(_QWORD *)(v4 + 56) + v18), __src, 0x309uLL);
  }
  v21 = v19 + 2;
  if (v21 >= v13)
  {
LABEL_26:
    result = (void *)swift_release();
    v1 = v22;
    goto LABEL_28;
  }
  v20 = *(_QWORD *)(v6 + 8 * v21);
  if (v20)
  {
    v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v9);
    ++v21;
    if (v20)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_2142A732C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  __int128 v22[2];

  v1 = v0;
  sub_2141D8BF8(&qword_253F13310);
  v2 = *v0;
  v3 = sub_2144256B8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      v9 = v19 + 1;
      if (v19 + 1 >= v13)
        goto LABEL_26;
      v20 = *(_QWORD *)(v6 + 8 * v9);
      if (!v20)
        break;
    }
LABEL_25:
    v12 = (v20 - 1) & v20;
    v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 40 * v15;
    sub_2141D7878(*(_QWORD *)(v2 + 56) + 40 * v15, (uint64_t)v22);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    result = (void *)sub_2141D8DC0(v22, *(_QWORD *)(v4 + 56) + v18);
  }
  v21 = v19 + 2;
  if (v21 >= v13)
    goto LABEL_26;
  v20 = *(_QWORD *)(v6 + 8 * v21);
  if (v20)
  {
    v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v9);
    ++v21;
    if (v20)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_2142A74F0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;

  v1 = v0;
  sub_2141D8BF8(&qword_253F13568);
  v2 = *v0;
  v3 = sub_2144256B8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v23 = __clz(__rbit64(v21));
    v12 = (v21 - 1) & v21;
    v15 = v23 + (v9 << 6);
LABEL_12:
    v16 = *(_QWORD *)(v2 + 56) + 16 * v15;
    v17 = *(_QWORD *)v16;
    v18 = *(_BYTE *)(v16 + 8);
    LOBYTE(v16) = *(_BYTE *)(v16 + 9);
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
    v19 = *(_QWORD *)(v4 + 56) + 16 * v15;
    *(_QWORD *)v19 = v17;
    *(_BYTE *)(v19 + 8) = v18;
    *(_BYTE *)(v19 + 9) = v16;
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

unint64_t sub_2142A7694()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;

  v1 = v0;
  sub_2141D8BF8(&qword_253F13560);
  v2 = *v0;
  v3 = sub_2144256B8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = swift_release();
    *v1 = v4;
    return result;
  }
  result = v3 + 64;
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || result >= v2 + 64 + 8 * v7)
    result = (unint64_t)memmove((void *)result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v24 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v24 >= v13)
      goto LABEL_26;
    v25 = *(_QWORD *)(v6 + 8 * v24);
    ++v9;
    if (!v25)
    {
      v9 = v24 + 1;
      if (v24 + 1 >= v13)
        goto LABEL_26;
      v25 = *(_QWORD *)(v6 + 8 * v9);
      if (!v25)
        break;
    }
LABEL_25:
    v27 = __clz(__rbit64(v25));
    v12 = (v25 - 1) & v25;
    v15 = v27 + (v9 << 6);
LABEL_12:
    v16 = *(_QWORD *)(v2 + 56) + 72 * v15;
    v17 = *(_QWORD *)v16;
    v18 = *(_BYTE *)(v16 + 8);
    v19 = *(_QWORD *)(v16 + 32);
    result = *(unsigned __int16 *)(v16 + 40);
    v20 = *(_BYTE *)(v16 + 64);
    v21 = *(_OWORD *)(v16 + 16);
    v22 = *(_OWORD *)(v16 + 48);
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
    v23 = *(_QWORD *)(v4 + 56) + 72 * v15;
    *(_QWORD *)v23 = v17;
    *(_BYTE *)(v23 + 8) = v18;
    *(_OWORD *)(v23 + 16) = v21;
    *(_QWORD *)(v23 + 32) = v19;
    *(_WORD *)(v23 + 40) = result;
    *(_OWORD *)(v23 + 48) = v22;
    *(_BYTE *)(v23 + 64) = v20;
  }
  v26 = v24 + 2;
  if (v26 >= v13)
    goto LABEL_26;
  v25 = *(_QWORD *)(v6 + 8 * v26);
  if (v25)
  {
    v9 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v25 = *(_QWORD *)(v6 + 8 * v9);
    ++v26;
    if (v25)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_2142A785C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;

  v1 = v0;
  sub_2141D8BF8(&qword_253F15D20);
  v2 = *v0;
  v3 = sub_2144256B8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      v9 = v21 + 1;
      if (v21 + 1 >= v13)
        goto LABEL_26;
      v22 = *(_QWORD *)(v6 + 8 * v9);
      if (!v22)
        break;
    }
LABEL_25:
    v12 = (v22 - 1) & v22;
    v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    v16 = *(_QWORD *)(v2 + 56) + 24 * v15;
    v17 = *(_BYTE *)v16;
    v18 = *(_QWORD *)(v16 + 8);
    v19 = *(_QWORD *)(v16 + 16);
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
    v20 = *(_QWORD *)(v4 + 56) + 24 * v15;
    *(_BYTE *)v20 = v17;
    *(_QWORD *)(v20 + 8) = v18;
    *(_QWORD *)(v20 + 16) = v19;
    swift_bridgeObjectRetain();
    result = (void *)swift_bridgeObjectRetain();
  }
  v23 = v21 + 2;
  if (v23 >= v13)
    goto LABEL_26;
  v22 = *(_QWORD *)(v6 + 8 * v23);
  if (v22)
  {
    v9 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v9);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_2142A7A18()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;

  v1 = v0;
  sub_2141D8BF8(&qword_253F15D18);
  v2 = *v0;
  v3 = sub_2144256B8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      v9 = v17 + 1;
      if (v17 + 1 >= v13)
        goto LABEL_26;
      v18 = *(_QWORD *)(v6 + 8 * v9);
      if (!v18)
        break;
    }
LABEL_25:
    v20 = __clz(__rbit64(v18));
    v12 = (v18 - 1) & v18;
    v15 = v20 + (v9 << 6);
LABEL_12:
    v16 = *(_BYTE *)(*(_QWORD *)(v2 + 56) + v15);
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
    *(_BYTE *)(*(_QWORD *)(v4 + 56) + v15) = v16;
  }
  v19 = v17 + 2;
  if (v19 >= v13)
    goto LABEL_26;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
    v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_2142A7BA0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  sub_2141D8BF8(&qword_253F13308);
  v2 = *v0;
  v3 = sub_2144256B8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 16 * v15;
    v19 = *(_OWORD *)(*(_QWORD *)(v2 + 56) + v18);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    *(_OWORD *)(*(_QWORD *)(v4 + 56) + v18) = v19;
    result = (void *)swift_retain();
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_2142A7D48()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  sub_2141D8BF8(&qword_253F11AA0);
  v2 = *v0;
  v3 = sub_2144256B8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = (uint64_t *)(*(_QWORD *)(v2 + 56) + 16 * v15);
    v18 = *v16;
    v17 = v16[1];
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
    v19 = (_QWORD *)(*(_QWORD *)(v4 + 56) + 16 * v15);
    *v19 = v18;
    v19[1] = v17;
    swift_retain();
    result = (void *)swift_retain();
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_2142A7EF8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  sub_2141D8BF8(&qword_253F105D8);
  v2 = *v0;
  v3 = sub_2144256B8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    result = (void *)swift_bridgeObjectRetain();
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_2142A80A4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t *v28;
  _OWORD v29[2];
  uint64_t v30;

  v1 = v0;
  sub_2141D8BF8(&qword_254D6A478);
  v2 = *v0;
  v3 = sub_2144256B8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v1 = v4;
    return result;
  }
  v28 = v1;
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v25 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      v9 = v25 + 1;
      if (v25 + 1 >= v13)
        goto LABEL_26;
      v26 = *(_QWORD *)(v6 + 8 * v9);
      if (!v26)
        break;
    }
LABEL_25:
    v12 = (v26 - 1) & v26;
    v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 40 * v15;
    sub_2141F9E40(*(_QWORD *)(v2 + 56) + 40 * v15, (uint64_t)v29);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = v19;
    v21[1] = v18;
    v22 = *(_QWORD *)(v4 + 56) + v20;
    v23 = v30;
    v24 = v29[1];
    *(_OWORD *)v22 = v29[0];
    *(_OWORD *)(v22 + 16) = v24;
    *(_QWORD *)(v22 + 32) = v23;
    result = (void *)swift_bridgeObjectRetain();
  }
  v27 = v25 + 2;
  if (v27 >= v13)
  {
LABEL_26:
    result = (void *)swift_release();
    v1 = v28;
    goto LABEL_28;
  }
  v26 = *(_QWORD *)(v6 + 8 * v27);
  if (v26)
  {
    v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v9);
    ++v27;
    if (v26)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_2142A8298()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  int64_t v29;
  unint64_t v30;
  int64_t v31;

  v1 = v0;
  sub_2141D8BF8(&qword_254D6A480);
  v2 = *v0;
  v3 = sub_2144256B8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v29 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v29 >= v13)
      goto LABEL_26;
    v30 = *(_QWORD *)(v6 + 8 * v29);
    ++v9;
    if (!v30)
    {
      v9 = v29 + 1;
      if (v29 + 1 >= v13)
        goto LABEL_26;
      v30 = *(_QWORD *)(v6 + 8 * v9);
      if (!v30)
        break;
    }
LABEL_25:
    v12 = (v30 - 1) & v30;
    v15 = __clz(__rbit64(v30)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 40 * v15;
    v21 = (uint64_t *)(*(_QWORD *)(v2 + 56) + v20);
    v23 = v21[1];
    v22 = v21[2];
    v24 = v21[3];
    v25 = v21[4];
    v26 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    v27 = *v21;
    *v26 = v19;
    v26[1] = v18;
    v28 = (_QWORD *)(*(_QWORD *)(v4 + 56) + v20);
    *v28 = v27;
    v28[1] = v23;
    v28[2] = v22;
    v28[3] = v24;
    v28[4] = v25;
    swift_bridgeObjectRetain();
    result = (void *)swift_bridgeObjectRetain();
  }
  v31 = v29 + 2;
  if (v31 >= v13)
    goto LABEL_26;
  v30 = *(_QWORD *)(v6 + 8 * v31);
  if (v30)
  {
    v9 = v31;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v31 + 1;
    if (__OFADD__(v31, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v30 = *(_QWORD *)(v6 + 8 * v9);
    ++v31;
    if (v30)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_2142A8470()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  sub_2141D8BF8(&qword_253F105E0);
  v2 = *v0;
  v3 = sub_2144256B8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    result = (void *)swift_retain();
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_2142A8624()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;

  v1 = v0;
  sub_2141D8BF8(&qword_253F11FD0);
  v2 = *v0;
  v3 = sub_2144256B8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      v9 = v17 + 1;
      if (v17 + 1 >= v13)
        goto LABEL_26;
      v18 = *(_QWORD *)(v6 + 8 * v9);
      if (!v18)
        break;
    }
LABEL_25:
    v12 = (v18 - 1) & v18;
    v15 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_12:
    v16 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v15);
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v15) = v16;
    result = (void *)swift_bridgeObjectRetain();
  }
  v19 = v17 + 2;
  if (v19 >= v13)
    goto LABEL_26;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
    v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_2142A87C4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;

  v1 = v0;
  sub_2141D8BF8(&qword_253F15D08);
  v2 = *v0;
  v3 = sub_2144256B8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      v9 = v17 + 1;
      if (v17 + 1 >= v13)
        goto LABEL_26;
      v18 = *(_QWORD *)(v6 + 8 * v9);
      if (!v18)
        break;
    }
LABEL_25:
    v12 = (v18 - 1) & v18;
    v15 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_12:
    v16 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v15);
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v15) = v16;
    result = (void *)swift_retain();
  }
  v19 = v17 + 2;
  if (v19 >= v13)
    goto LABEL_26;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
    v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_2142A8964()
{
  return sub_2142A8970(&qword_253F11FC8);
}

void *sub_2142A8970(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  v2 = v1;
  sub_2141D8BF8(a1);
  v3 = *v1;
  v4 = sub_2144256B8();
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v2 = v5;
    return result;
  }
  result = (void *)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v18 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v14)
      goto LABEL_26;
    v19 = *(_QWORD *)(v7 + 8 * v18);
    ++v10;
    if (!v19)
    {
      v10 = v18 + 1;
      if (v18 + 1 >= v14)
        goto LABEL_26;
      v19 = *(_QWORD *)(v7 + 8 * v10);
      if (!v19)
        break;
    }
LABEL_25:
    v13 = (v19 - 1) & v19;
    v16 = __clz(__rbit64(v19)) + (v10 << 6);
LABEL_12:
    v17 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + 8 * v16);
    *(_BYTE *)(*(_QWORD *)(v5 + 48) + v16) = *(_BYTE *)(*(_QWORD *)(v3 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v16) = v17;
    result = (void *)swift_retain();
  }
  v20 = v18 + 2;
  if (v20 >= v14)
    goto LABEL_26;
  v19 = *(_QWORD *)(v7 + 8 * v20);
  if (v19)
  {
    v10 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v19 = *(_QWORD *)(v7 + 8 * v10);
    ++v20;
    if (v19)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_2142A8B08()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;

  v1 = v0;
  sub_2141D8BF8(&qword_253F15D10);
  v2 = *v0;
  v3 = sub_2144256B8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      v9 = v21 + 1;
      if (v21 + 1 >= v13)
        goto LABEL_26;
      v22 = *(_QWORD *)(v6 + 8 * v9);
      if (!v22)
        break;
    }
LABEL_25:
    v12 = (v22 - 1) & v22;
    v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    v16 = *(_QWORD *)(v2 + 56) + 24 * v15;
    v17 = *(_BYTE *)v16;
    v18 = *(_QWORD *)(v16 + 8);
    v19 = *(_QWORD *)(v16 + 16);
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
    v20 = *(_QWORD *)(v4 + 56) + 24 * v15;
    *(_BYTE *)v20 = v17;
    *(_QWORD *)(v20 + 8) = v18;
    *(_QWORD *)(v20 + 16) = v19;
    swift_bridgeObjectRetain();
    result = (void *)swift_bridgeObjectRetain();
  }
  v23 = v21 + 2;
  if (v23 >= v13)
    goto LABEL_26;
  v22 = *(_QWORD *)(v6 + 8 * v23);
  if (v22)
  {
    v9 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v9);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_2142A8CC4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;

  v1 = v0;
  sub_2141D8BF8(&qword_253F11FE0);
  v2 = *v0;
  v3 = sub_2144256B8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_26;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
        break;
    }
LABEL_25:
    v21 = __clz(__rbit64(v19));
    v12 = (v19 - 1) & v19;
    v15 = v21 + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v17;
  }
  v20 = v18 + 2;
  if (v20 >= v13)
    goto LABEL_26;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_2142A8E50()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;

  v1 = v0;
  sub_2141D8BF8(qword_254D6A488);
  v2 = *v0;
  v3 = sub_2144256B8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      v9 = v19 + 1;
      if (v19 + 1 >= v13)
        goto LABEL_26;
      v20 = *(_QWORD *)(v6 + 8 * v9);
      if (!v20)
        break;
    }
LABEL_25:
    v22 = __clz(__rbit64(v20));
    v12 = (v20 - 1) & v20;
    v15 = v22 + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = 8 * v15;
    v18 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v17);
    *(_OWORD *)(*(_QWORD *)(v4 + 48) + v16) = *(_OWORD *)(*(_QWORD *)(v2 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v17) = v18;
  }
  v21 = v19 + 2;
  if (v21 >= v13)
    goto LABEL_26;
  v20 = *(_QWORD *)(v6 + 8 * v21);
  if (v20)
  {
    v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v9);
    ++v21;
    if (v20)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_2142A8FE0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;

  v1 = v0;
  sub_2141D8BF8(&qword_253F10758);
  v2 = *v0;
  v3 = sub_2144256B8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v27 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v27 >= v13)
      goto LABEL_26;
    v28 = *(_QWORD *)(v6 + 8 * v27);
    ++v9;
    if (!v28)
    {
      v9 = v27 + 1;
      if (v27 + 1 >= v13)
        goto LABEL_26;
      v28 = *(_QWORD *)(v6 + 8 * v9);
      if (!v28)
        break;
    }
LABEL_25:
    v12 = (v28 - 1) & v28;
    v15 = __clz(__rbit64(v28)) + (v9 << 6);
LABEL_12:
    v16 = 48 * v15;
    v17 = *(_QWORD *)(v2 + 48) + 48 * v15;
    v18 = *(_QWORD *)v17;
    v19 = *(_QWORD *)(v17 + 8);
    v20 = *(_QWORD *)(v17 + 16);
    v21 = *(_QWORD *)(v17 + 24);
    v22 = *(_QWORD *)(v17 + 32);
    v23 = 8 * v15;
    v24 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v23);
    v25 = *(_QWORD *)(v4 + 48) + v16;
    v26 = *(_BYTE *)(v17 + 40);
    *(_QWORD *)v25 = *(_QWORD *)v17;
    *(_QWORD *)(v25 + 8) = v19;
    *(_QWORD *)(v25 + 16) = v20;
    *(_QWORD *)(v25 + 24) = v21;
    *(_QWORD *)(v25 + 32) = v22;
    *(_BYTE *)(v25 + 40) = v26;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v23) = v24;
    sub_2142AB508(v18, v19, v20, v21, v22, v26);
    result = (void *)swift_retain();
  }
  v29 = v27 + 2;
  if (v29 >= v13)
    goto LABEL_26;
  v28 = *(_QWORD *)(v6 + 8 * v29);
  if (v28)
  {
    v9 = v29;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v29 + 1;
    if (__OFADD__(v29, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v28 = *(_QWORD *)(v6 + 8 * v9);
    ++v29;
    if (v28)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_2142A91B0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  unint64_t v30;
  int64_t v31;

  v1 = v0;
  sub_2141D8BF8(&qword_253F11C80);
  v2 = *v0;
  v3 = sub_2144256B8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v29 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v29 >= v13)
      goto LABEL_26;
    v30 = *(_QWORD *)(v6 + 8 * v29);
    ++v9;
    if (!v30)
    {
      v9 = v29 + 1;
      if (v29 + 1 >= v13)
        goto LABEL_26;
      v30 = *(_QWORD *)(v6 + 8 * v9);
      if (!v30)
        break;
    }
LABEL_25:
    v12 = (v30 - 1) & v30;
    v15 = __clz(__rbit64(v30)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = 72 * v15;
    v18 = *(_QWORD *)(v2 + 48) + v17;
    v19 = *(_QWORD *)v18;
    v20 = *(_QWORD *)(v18 + 8);
    v21 = *(_QWORD *)(v18 + 16);
    v22 = *(_QWORD *)(v18 + 24);
    v23 = *(_QWORD *)(v18 + 32);
    v24 = *(_QWORD *)(v18 + 40);
    v25 = *(_QWORD *)(v18 + 48);
    v26 = *(_QWORD *)(v18 + 56);
    LOBYTE(v18) = *(_BYTE *)(v18 + 64);
    v27 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v16);
    v28 = *(_QWORD *)(v4 + 48) + v17;
    *(_QWORD *)v28 = v19;
    *(_QWORD *)(v28 + 8) = v20;
    *(_QWORD *)(v28 + 16) = v21;
    *(_QWORD *)(v28 + 24) = v22;
    *(_QWORD *)(v28 + 32) = v23;
    *(_QWORD *)(v28 + 40) = v24;
    *(_QWORD *)(v28 + 48) = v25;
    *(_QWORD *)(v28 + 56) = v26;
    *(_BYTE *)(v28 + 64) = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v27;
    sub_2142AB430(v19, v20, v21, v22, v23, v24, v25, v26, v18);
    result = (void *)swift_retain();
  }
  v31 = v29 + 2;
  if (v31 >= v13)
    goto LABEL_26;
  v30 = *(_QWORD *)(v6 + 8 * v31);
  if (v30)
  {
    v9 = v31;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v31 + 1;
    if (__OFADD__(v31, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v30 = *(_QWORD *)(v6 + 8 * v9);
    ++v31;
    if (v30)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_2142A9394()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;

  v1 = v0;
  sub_2141D8BF8(&qword_253F103B8);
  v2 = *v0;
  v3 = sub_2144256B8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      v9 = v19 + 1;
      if (v19 + 1 >= v13)
        goto LABEL_26;
      v20 = *(_QWORD *)(v6 + 8 * v9);
      if (!v20)
        break;
    }
LABEL_25:
    v12 = (v20 - 1) & v20;
    v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = 8 * v15;
    v18 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v17);
    *(_OWORD *)(*(_QWORD *)(v4 + 48) + v16) = *(_OWORD *)(*(_QWORD *)(v2 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v17) = v18;
    result = (void *)swift_bridgeObjectRetain();
  }
  v21 = v19 + 2;
  if (v21 >= v13)
    goto LABEL_26;
  v20 = *(_QWORD *)(v6 + 8 * v21);
  if (v20)
  {
    v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v9);
    ++v21;
    if (v20)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_2142A9538()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  sub_2141D8BF8(&qword_254D6A470);
  v2 = *v0;
  v3 = sub_2144256B8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    result = (void *)swift_bridgeObjectRetain();
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_2142A96E4()
{
  return sub_2142A96FC(&qword_253F10BA0);
}

void *sub_2142A96F0()
{
  return sub_2142A96FC(&qword_254D6A468);
}

void *sub_2142A96FC(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;

  v2 = v1;
  sub_2141D8BF8(a1);
  v3 = *v1;
  v4 = sub_2144256B8();
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v2 = v5;
    return result;
  }
  result = (void *)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v14)
      goto LABEL_26;
    v20 = *(_QWORD *)(v7 + 8 * v19);
    ++v10;
    if (!v20)
    {
      v10 = v19 + 1;
      if (v19 + 1 >= v14)
        goto LABEL_26;
      v20 = *(_QWORD *)(v7 + 8 * v10);
      if (!v20)
        break;
    }
LABEL_25:
    v13 = (v20 - 1) & v20;
    v16 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_12:
    v17 = 8 * v16;
    v18 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + v17);
    *(_QWORD *)(*(_QWORD *)(v5 + 48) + v17) = *(_QWORD *)(*(_QWORD *)(v3 + 48) + v17);
    *(_QWORD *)(*(_QWORD *)(v5 + 56) + v17) = v18;
    result = (void *)swift_bridgeObjectRetain();
  }
  v21 = v19 + 2;
  if (v21 >= v14)
    goto LABEL_26;
  v20 = *(_QWORD *)(v7 + 8 * v21);
  if (v20)
  {
    v10 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v20 = *(_QWORD *)(v7 + 8 * v10);
    ++v21;
    if (v20)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_2142A9894()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  _BYTE v22[48];

  v1 = v0;
  sub_2141D8BF8(&qword_254D6A460);
  v2 = *v0;
  v3 = sub_2144256B8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      v9 = v19 + 1;
      if (v19 + 1 >= v13)
        goto LABEL_26;
      v20 = *(_QWORD *)(v6 + 8 * v9);
      if (!v20)
        break;
    }
LABEL_25:
    v12 = (v20 - 1) & v20;
    v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 48 * v15;
    sub_2142AAEB4(*(_QWORD *)(v2 + 56) + 48 * v15, (uint64_t)v22);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    result = (void *)sub_2142AAEF0((uint64_t)v22, *(_QWORD *)(v4 + 56) + v18);
  }
  v21 = v19 + 2;
  if (v21 >= v13)
    goto LABEL_26;
  v20 = *(_QWORD *)(v6 + 8 * v21);
  if (v20)
  {
    v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v9);
    ++v21;
    if (v20)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_2142A9A58()
{
  return sub_2142A9A70(&qword_253F101A8);
}

void *sub_2142A9A64()
{
  return sub_2142A9A70(&qword_253F10410);
}

void *sub_2142A9A70(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;

  v2 = v1;
  sub_2141D8BF8(a1);
  v3 = *v1;
  v4 = sub_2144256B8();
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v2 = v5;
    return result;
  }
  result = (void *)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v24 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v24 >= v14)
      goto LABEL_26;
    v25 = *(_QWORD *)(v7 + 8 * v24);
    ++v10;
    if (!v25)
    {
      v10 = v24 + 1;
      if (v24 + 1 >= v14)
        goto LABEL_26;
      v25 = *(_QWORD *)(v7 + 8 * v10);
      if (!v25)
        break;
    }
LABEL_25:
    v13 = (v25 - 1) & v25;
    v16 = __clz(__rbit64(v25)) + (v10 << 6);
LABEL_12:
    v17 = 8 * v16;
    v18 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v16);
    v19 = 16 * v16;
    v20 = (uint64_t *)(*(_QWORD *)(v3 + 56) + v19);
    v22 = *v20;
    v21 = v20[1];
    *(_QWORD *)(*(_QWORD *)(v5 + 48) + v17) = v18;
    v23 = (_QWORD *)(*(_QWORD *)(v5 + 56) + v19);
    *v23 = v22;
    v23[1] = v21;
    result = (void *)swift_bridgeObjectRetain();
  }
  v26 = v24 + 2;
  if (v26 >= v14)
    goto LABEL_26;
  v25 = *(_QWORD *)(v7 + 8 * v26);
  if (v25)
  {
    v10 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v25 = *(_QWORD *)(v7 + 8 * v10);
    ++v26;
    if (v25)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_2142A9C14()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  v1 = v0;
  sub_2141D8BF8(&qword_253F11FD8);
  v2 = *v0;
  v3 = sub_2144256B8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_26;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
        break;
    }
LABEL_25:
    v12 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v17;
    result = (void *)swift_retain();
  }
  v20 = v18 + 2;
  if (v20 >= v13)
    goto LABEL_26;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_2142A9DB4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  int64_t v26;

  v1 = sub_214423C54();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2141D8BF8(&qword_253F11960);
  v24 = v0;
  v5 = *v0;
  v6 = sub_2144256B8();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v24 = v7;
    return result;
  }
  result = (void *)(v6 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9)
    result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v12 = 1 << *(_BYTE *)(v5 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v5 + 64);
  v25 = v5 + 64;
  v26 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v16 = v15 | (v11 << 6);
      goto LABEL_12;
    }
    v20 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v26)
      goto LABEL_26;
    v21 = *(_QWORD *)(v25 + 8 * v20);
    ++v11;
    if (!v21)
    {
      v11 = v20 + 1;
      if (v20 + 1 >= v26)
        goto LABEL_26;
      v21 = *(_QWORD *)(v25 + 8 * v11);
      if (!v21)
        break;
    }
LABEL_25:
    v14 = (v21 - 1) & v21;
    v16 = __clz(__rbit64(v21)) + (v11 << 6);
LABEL_12:
    v17 = *(_QWORD *)(v2 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(_QWORD *)(v5 + 48) + v17, v1);
    v18 = 8 * v16;
    v19 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + v18);
    result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(_QWORD *)(v7 + 48) + v17, v4, v1);
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + v18) = v19;
  }
  v22 = v20 + 2;
  if (v22 >= v26)
    goto LABEL_26;
  v21 = *(_QWORD *)(v25 + 8 * v22);
  if (v21)
  {
    v11 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v11 >= v26)
      goto LABEL_26;
    v21 = *(_QWORD *)(v25 + 8 * v11);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_2142A9FD8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;

  v1 = v0;
  v2 = type metadata accessor for ChartContentRenderContext.Bins(0);
  v26 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2141D8BF8(&qword_253F12288);
  v5 = *v0;
  v6 = sub_2144256B8();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v1 = v7;
    return result;
  }
  v24 = v1;
  result = (void *)(v6 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9)
    result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  v25 = v5 + 64;
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v12 = 1 << *(_BYTE *)(v5 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v5 + 64);
  v15 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      v16 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v17 = v16 | (v11 << 6);
      goto LABEL_12;
    }
    v20 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v15)
      goto LABEL_26;
    v21 = *(_QWORD *)(v25 + 8 * v20);
    ++v11;
    if (!v21)
    {
      v11 = v20 + 1;
      if (v20 + 1 >= v15)
        goto LABEL_26;
      v21 = *(_QWORD *)(v25 + 8 * v11);
      if (!v21)
        break;
    }
LABEL_25:
    v14 = (v21 - 1) & v21;
    v17 = __clz(__rbit64(v21)) + (v11 << 6);
LABEL_12:
    v18 = *(_BYTE *)(*(_QWORD *)(v5 + 48) + v17);
    v19 = *(_QWORD *)(v26 + 72) * v17;
    sub_2141FDEA0(*(_QWORD *)(v5 + 56) + v19, (uint64_t)v4, type metadata accessor for ChartContentRenderContext.Bins);
    *(_BYTE *)(*(_QWORD *)(v7 + 48) + v17) = v18;
    result = (void *)sub_2141FE1E0((uint64_t)v4, *(_QWORD *)(v7 + 56) + v19, type metadata accessor for ChartContentRenderContext.Bins);
  }
  v22 = v20 + 2;
  if (v22 >= v15)
  {
LABEL_26:
    result = (void *)swift_release();
    v1 = v24;
    goto LABEL_28;
  }
  v21 = *(_QWORD *)(v25 + 8 * v22);
  if (v21)
  {
    v11 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v11 >= v15)
      goto LABEL_26;
    v21 = *(_QWORD *)(v25 + 8 * v11);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_2142AA200()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  int64_t v29;
  unint64_t v30;
  int64_t v31;

  v1 = v0;
  sub_2141D8BF8(&qword_253F11FC0);
  v2 = *v0;
  v3 = sub_2144256B8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v29 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v29 >= v13)
      goto LABEL_26;
    v30 = *(_QWORD *)(v6 + 8 * v29);
    ++v9;
    if (!v30)
    {
      v9 = v29 + 1;
      if (v29 + 1 >= v13)
        goto LABEL_26;
      v30 = *(_QWORD *)(v6 + 8 * v9);
      if (!v30)
        break;
    }
LABEL_25:
    v12 = (v30 - 1) & v30;
    v15 = __clz(__rbit64(v30)) + (v9 << 6);
LABEL_12:
    v16 = v15 << 6;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + (v15 << 6));
    v18 = *v17;
    v19 = v17[1];
    v20 = v17[2];
    v21 = v17[3];
    v22 = v17[4];
    v23 = v17[5];
    v24 = v17[6];
    v25 = v17[7];
    v26 = 8 * v15;
    v27 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v26);
    v28 = (uint64_t *)(*(_QWORD *)(v4 + 48) + v16);
    *v28 = v18;
    v28[1] = v19;
    v28[2] = v20;
    v28[3] = v21;
    v28[4] = v22;
    v28[5] = v23;
    v28[6] = v24;
    v28[7] = v25;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v26) = v27;
    result = (void *)sub_21421C1D8(v18, v19, v20, v21, v22, v23, v24);
  }
  v31 = v29 + 2;
  if (v31 >= v13)
    goto LABEL_26;
  v30 = *(_QWORD *)(v6 + 8 * v31);
  if (v30)
  {
    v9 = v31;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v31 + 1;
    if (__OFADD__(v31, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v30 = *(_QWORD *)(v6 + 8 * v9);
    ++v31;
    if (v30)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_2142AA3C4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  v1 = v0;
  sub_2141D8BF8(&qword_253F10D10);
  v2 = *v0;
  v3 = sub_2144256B8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_26;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
        break;
    }
LABEL_25:
    v12 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v17;
    result = (void *)swift_bridgeObjectRetain();
  }
  v20 = v18 + 2;
  if (v20 >= v13)
    goto LABEL_26;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_2142AA564()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  _QWORD v22[19];
  _BYTE __dst[312];

  v1 = v0;
  sub_2141D8BF8(&qword_253F12290);
  v2 = *v0;
  v3 = sub_2144256B8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v1 = v4;
    return result;
  }
  v21 = v1;
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v18 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_26;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
        break;
    }
LABEL_25:
    v12 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    v16 = 152 * v15;
    sub_2141EF6B8(*(_QWORD *)(v2 + 48) + 152 * v15, (uint64_t)v22);
    v17 = 304 * v15;
    memcpy(__dst, (const void *)(*(_QWORD *)(v2 + 56) + v17), 0x130uLL);
    sub_2141EF6B8((uint64_t)v22, *(_QWORD *)(v4 + 48) + v16);
    memcpy((void *)(*(_QWORD *)(v4 + 56) + v17), __dst, 0x130uLL);
    sub_21421C318(v22, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21420B7DC);
    result = (void *)sub_21422F46C((uint64_t)__dst);
  }
  v20 = v18 + 2;
  if (v20 >= v13)
  {
LABEL_26:
    result = (void *)swift_release();
    v1 = v21;
    goto LABEL_28;
  }
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_2142AA778()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;

  v1 = v0;
  sub_2141D8BF8(&qword_253F12298);
  v2 = *v0;
  v3 = sub_2144256B8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v26 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v26 >= v13)
      goto LABEL_26;
    v27 = *(_QWORD *)(v6 + 8 * v26);
    ++v9;
    if (!v27)
    {
      v9 = v26 + 1;
      if (v26 + 1 >= v13)
        goto LABEL_26;
      v27 = *(_QWORD *)(v6 + 8 * v9);
      if (!v27)
        break;
    }
LABEL_25:
    v12 = (v27 - 1) & v27;
    v15 = __clz(__rbit64(v27)) + (v9 << 6);
LABEL_12:
    v16 = 48 * v15;
    v17 = *(_QWORD *)(v2 + 48) + 48 * v15;
    v18 = *(_QWORD *)v17;
    v19 = *(_QWORD *)(v17 + 8);
    v20 = *(_BYTE *)(v17 + 16);
    v21 = *(_QWORD *)(v17 + 24);
    v22 = *(_QWORD *)(v17 + 32);
    v23 = 8 * v15;
    v24 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v23);
    LOBYTE(v17) = *(_BYTE *)(v17 + 40);
    v25 = *(_QWORD *)(v4 + 48) + v16;
    *(_QWORD *)v25 = v18;
    *(_QWORD *)(v25 + 8) = v19;
    *(_BYTE *)(v25 + 16) = v20;
    *(_QWORD *)(v25 + 24) = v21;
    *(_QWORD *)(v25 + 32) = v22;
    *(_BYTE *)(v25 + 40) = v17;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v23) = v24;
    sub_2141DD130(v18, v19, v20);
    swift_bridgeObjectRetain();
    result = (void *)swift_bridgeObjectRetain();
  }
  v28 = v26 + 2;
  if (v28 >= v13)
    goto LABEL_26;
  v27 = *(_QWORD *)(v6 + 8 * v28);
  if (v27)
  {
    v9 = v28;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v27 = *(_QWORD *)(v6 + 8 * v9);
    ++v28;
    if (v27)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_2142AA958()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;

  v1 = v0;
  sub_2141D8BF8(&qword_253F11978);
  v2 = *v0;
  v3 = sub_2144256B8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_26;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
        break;
    }
LABEL_25:
    v21 = __clz(__rbit64(v19));
    v12 = (v19 - 1) & v19;
    v15 = v21 + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v17;
  }
  v20 = v18 + 2;
  if (v20 >= v13)
    goto LABEL_26;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_2142AAAE4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v1 = v0;
  sub_2141D8BF8(&qword_253F11970);
  v2 = *v0;
  v3 = sub_2144256B8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      v9 = v23 + 1;
      if (v23 + 1 >= v13)
        goto LABEL_26;
      v24 = *(_QWORD *)(v6 + 8 * v9);
      if (!v24)
        break;
    }
LABEL_25:
    v12 = (v24 - 1) & v24;
    v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    v16 = *(_QWORD *)(v2 + 56) + 56 * v15;
    v17 = *(_BYTE *)v16;
    v18 = *(_QWORD *)(v16 + 24);
    v19 = *(_QWORD *)(v16 + 32);
    v20 = *(_OWORD *)(v16 + 8);
    v21 = *(_OWORD *)(v16 + 40);
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
    v22 = *(_QWORD *)(v4 + 56) + 56 * v15;
    *(_BYTE *)v22 = v17;
    *(_OWORD *)(v22 + 8) = v20;
    *(_QWORD *)(v22 + 24) = v18;
    *(_QWORD *)(v22 + 32) = v19;
    *(_OWORD *)(v22 + 40) = v21;
    result = (void *)swift_bridgeObjectRetain();
  }
  v25 = v23 + 2;
  if (v25 >= v13)
    goto LABEL_26;
  v24 = *(_QWORD *)(v6 + 8 * v25);
  if (v24)
  {
    v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v9);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_2142AACB0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *result;
  uint64_t v5;
  unint64_t v6;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 v26;
  uint64_t v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;
  uint64_t *v31;

  sub_2141D8BF8(&qword_253F15D28);
  v31 = v0;
  v1 = *v0;
  v2 = sub_2144256B8();
  v3 = v2;
  if (!*(_QWORD *)(v1 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v31 = v3;
    return result;
  }
  result = (void *)(v2 + 64);
  v5 = v1 + 64;
  v6 = (unint64_t)((1 << *(_BYTE *)(v3 + 32)) + 63) >> 6;
  if (v3 != v1 || (unint64_t)result >= v1 + 64 + 8 * v6)
    result = memmove(result, (const void *)(v1 + 64), 8 * v6);
  v8 = 0;
  *(_QWORD *)(v3 + 16) = *(_QWORD *)(v1 + 16);
  v9 = 1 << *(_BYTE *)(v1 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & *(_QWORD *)(v1 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  while (1)
  {
    if (v11)
    {
      v13 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v14 = v13 | (v8 << 6);
      goto LABEL_12;
    }
    v28 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v28 >= v12)
      goto LABEL_26;
    v29 = *(_QWORD *)(v5 + 8 * v28);
    ++v8;
    if (!v29)
    {
      v8 = v28 + 1;
      if (v28 + 1 >= v12)
        goto LABEL_26;
      v29 = *(_QWORD *)(v5 + 8 * v8);
      if (!v29)
        break;
    }
LABEL_25:
    v11 = (v29 - 1) & v29;
    v14 = __clz(__rbit64(v29)) + (v8 << 6);
LABEL_12:
    v15 = *(_QWORD *)(v1 + 56) + 88 * v14;
    v16 = *(_QWORD *)v15;
    v17 = *(_BYTE *)(v15 + 8);
    v18 = *(_QWORD *)(v15 + 16);
    v19 = *(_QWORD *)(v15 + 24);
    v20 = *(_QWORD *)(v15 + 32);
    v21 = *(_QWORD *)(v15 + 40);
    v22 = *(_QWORD *)(v15 + 48);
    v23 = *(_QWORD *)(v15 + 56);
    v24 = *(_QWORD *)(v15 + 64);
    v25 = *(_QWORD *)(v15 + 72);
    v26 = *(_BYTE *)(v15 + 80);
    *(_BYTE *)(*(_QWORD *)(v3 + 48) + v14) = *(_BYTE *)(*(_QWORD *)(v1 + 48) + v14);
    v27 = *(_QWORD *)(v3 + 56) + 88 * v14;
    *(_QWORD *)v27 = v16;
    *(_BYTE *)(v27 + 8) = v17;
    *(_QWORD *)(v27 + 16) = v18;
    *(_QWORD *)(v27 + 24) = v19;
    *(_QWORD *)(v27 + 32) = v20;
    *(_QWORD *)(v27 + 40) = v21;
    *(_QWORD *)(v27 + 48) = v22;
    *(_QWORD *)(v27 + 56) = v23;
    *(_QWORD *)(v27 + 64) = v24;
    *(_QWORD *)(v27 + 72) = v25;
    *(_BYTE *)(v27 + 80) = v26;
    sub_2142AB324(v18, v19, v20, v21, v22);
    result = (void *)sub_2142AB39C(v24, v25, v26);
  }
  v30 = v28 + 2;
  if (v30 >= v12)
    goto LABEL_26;
  v29 = *(_QWORD *)(v5 + 8 * v30);
  if (v29)
  {
    v8 = v30;
    goto LABEL_25;
  }
  while (1)
  {
    v8 = v30 + 1;
    if (__OFADD__(v30, 1))
      break;
    if (v8 >= v12)
      goto LABEL_26;
    v29 = *(_QWORD *)(v5 + 8 * v8);
    ++v30;
    if (v29)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_2142AAEB4(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for SgSymbol(a2, a1);
  return a2;
}

uint64_t sub_2142AAEF0(uint64_t a1, uint64_t a2)
{
  initializeWithTake for AxisMarksContentStorage(a2, a1);
  return a2;
}

uint64_t sub_2142AAF2C(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for SgAnimatableData.Item(a2, a1);
  return a2;
}

uint64_t sub_2142AAF68(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v2 = *(_QWORD *)(a1 + 64);
  v3 = *(_QWORD *)(a1 + 72);
  v4 = *(_QWORD *)(a1 + 80);
  v5 = *(_QWORD *)(a1 + 88);
  v6 = *(_QWORD *)(a1 + 96);
  v7 = *(_QWORD *)(a1 + 104);
  v8 = *(_QWORD *)(a1 + 112);
  v9 = *(_QWORD *)(a1 + 120);
  v23 = *(_QWORD *)(a1 + 136);
  v24 = *(_QWORD *)(a1 + 128);
  v21 = *(_QWORD *)(a1 + 152);
  v22 = *(_QWORD *)(a1 + 144);
  v19 = *(_QWORD *)(a1 + 168);
  v20 = *(_QWORD *)(a1 + 160);
  v17 = *(_QWORD *)(a1 + 184);
  v18 = *(_QWORD *)(a1 + 176);
  v15 = *(_OWORD *)(a1 + 208);
  v16 = *(_OWORD *)(a1 + 192);
  v13 = *(_OWORD *)(a1 + 240);
  v14 = *(_OWORD *)(a1 + 224);
  v12 = *(_OWORD *)(a1 + 256);
  v10 = *(_QWORD *)(a1 + 272);
  swift_bridgeObjectRelease();
  sub_21422F7F0(v2, v3, v4, v5);
  sub_21422F7F0(v6, v7, v8, v9);
  sub_21422F314(v24, v23, v22, v21, v20, v19, v18, v17, v16, *((uint64_t *)&v16 + 1), v15, *((uint64_t *)&v15 + 1), v14, *((uint64_t *)&v14 + 1), v13, *((uint64_t *)&v13 + 1), v12, *((uint64_t *)&v12 + 1), v10,
    (uint64_t (*)(void))sub_2141EF5D4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_2142AB0A0(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;

  v17 = a5;
  v18 = a6;
  v11 = sub_2141D8DD8((uint64_t *)&v16);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 32))(v11, a3, a5);
  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(_QWORD *)(a4[6] + 8 * a1) = a2;
  result = sub_2141D8DC0(&v16, a4[7] + 40 * a1);
  v13 = a4[2];
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
    __break(1u);
  else
    a4[2] = v15;
  return result;
}

uint64_t sub_2142AB150(uint64_t a1, uint64_t a2, char a3, _QWORD *a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v12;
  _QWORD *v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t result;
  unint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;

  v32 = a5;
  v33 = a6;
  v12 = sub_2141D8DD8((uint64_t *)&v31);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 32))(v12, a1, a5);
  v13 = (_QWORD *)*a4;
  v15 = sub_214336CE4(a2);
  v16 = v13[2];
  v17 = (v14 & 1) == 0;
  v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_14;
  }
  v19 = v14;
  v20 = v13[3];
  if (v20 >= v18 && (a3 & 1) != 0)
  {
LABEL_7:
    v21 = (_QWORD *)*a4;
    if ((v19 & 1) != 0)
    {
LABEL_8:
      v22 = v21[7] + 40 * v15;
      _s6Charts15AnyChartContentVwxx_0(v22);
      return sub_2141D8DC0(&v31, v22);
    }
    goto LABEL_11;
  }
  if (v20 >= v18 && (a3 & 1) == 0)
  {
    sub_2142A732C();
    goto LABEL_7;
  }
  sub_21429B600(v18, a3 & 1);
  v24 = sub_214336CE4(a2);
  if ((v19 & 1) != (v25 & 1))
  {
LABEL_14:
    result = sub_214425820();
    __break(1u);
    return result;
  }
  v15 = v24;
  v21 = (_QWORD *)*a4;
  if ((v19 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  v26 = sub_2142AB2FC((uint64_t)&v31, v32);
  MEMORY[0x24BDAC7A8](v26);
  v28 = (char *)&v30 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v29 + 16))(v28);
  sub_2142AB0A0(v15, a2, (uint64_t)v28, v21, a5, a6);
  return _s6Charts15AnyChartContentVwxx_0((uint64_t)&v31);
}

uint64_t sub_2142AB2FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t sub_2142AB324(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v5;

  v5 = (a5 >> 61) & 3;
  if (!(_DWORD)v5)
    return sub_2142AB348(result, a2, a3, a4, a5);
  if ((_DWORD)v5 == 2 || (_DWORD)v5 == 1)
  {
    a5 &= 0x9FFFFFFFFFFFFFFFLL;
    return sub_2142AB348(result, a2, a3, a4, a5);
  }
  return result;
}

uint64_t sub_2142AB348(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v7;
  uint64_t result;

  if ((a5 & 0x8000000000000000) == 0)
  {
    v7 = a5 >> 8;
    sub_2141E7DC4(a2, a3, SBYTE1(a3));
    return sub_2141E7DC4(a4, a5, v7);
  }
  return result;
}

uint64_t sub_2142AB39C(uint64_t result, uint64_t a2, unsigned __int8 a3)
{
  switch(a3 >> 5)
  {
    case 1:
    case 2:
    case 3:
    case 4:
    case 6:
      result = sub_2141E7DF0(result, a2, a3 & 0x1F);
      break;
    case 5:
      result = sub_2141E7DD4(result, a2, a3 & 0x1F);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_2142AB3E8(uint64_t a1)
{
  sub_2142AB430(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_BYTE *)(a1 + 64));
  return a1;
}

uint64_t sub_2142AB430(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  char v12;

  if ((a6 & 0x8000000000000000) == 0)
    return sub_2141DD14C(a1, a2, a3);
  v12 = a6;
  sub_2141DD164(a1, a2, a3);
  sub_2141DD164(a4, a5, v12);
  return sub_2141DD164(a7, a8, a9);
}

uint64_t sub_2142AB498(uint64_t a1, uint64_t a2)
{
  initializeWithTake for ChartInternal.ScaleDef(a2, a1);
  return a2;
}

uint64_t sub_2142AB4D4(uint64_t a1)
{
  sub_2142AB508(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
  return a1;
}

uint64_t sub_2142AB508(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  if ((a3 & 0x8000000000000000) == 0)
    return sub_2141DD14C(a1, a2, a3);
  sub_2141DD164(a1, a2, a3);
  return sub_2141DD164(a4, a5, a6);
}

uint64_t sub_2142AB54C(uint64_t a1, uint64_t a2)
{
  initializeWithTake for AxisMarksContentStorage(a2, a1);
  return a2;
}

unint64_t sub_2142AB588()
{
  unint64_t result;
  uint64_t v1;

  result = qword_253F11000;
  if (!qword_253F11000)
  {
    v1 = sub_214423C54();
    result = MEMORY[0x2199CD934](MEMORY[0x24BDCF300], v1);
    atomic_store(result, (unint64_t *)&qword_253F11000);
  }
  return result;
}

void sub_2142AB5D0(uint64_t a1, uint64_t a2, double a3, double a4)
{
  uint64_t v4;

  sub_2143C879C(a3, a4, a1, a2, *(double **)(v4 + 16));
}

uint64_t sub_2142AB5D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ChartContentRenderContext.Bins(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_2142AB61C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(_BYTE *)(a1 + 48);
  sub_2141DD164(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
  sub_2141DD164(v2, v3, v4);
  return a1;
}

ValueMetadata *type metadata accessor for VersionSeed()
{
  return &type metadata for VersionSeed;
}

uint64_t sub_2142AB680()
{
  _DWORD *v0;

  if (*v0 == -1)
    return 0x64696C61766E69;
  if (*v0)
    return sub_21442573C();
  return 0x7974706D65;
}

uint64_t AxisMark.foregroundStyle<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *KeyPath;
  uint64_t v20;
  uint64_t v21;

  v10 = *(_QWORD *)(a3 - 8);
  v11 = MEMORY[0x24BDAC7A8](a1);
  v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v15, v17, a2);
  KeyPath = (uint64_t *)swift_getKeyPath();
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, a1, a3);
  v21 = sub_214423E10();
  return sub_2142AB814((uint64_t)v15, KeyPath, (uint64_t)&v21, a2, a4, a5);
}

uint64_t sub_2142AB814@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v11 = *a2;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 32))(a6, a1, a4);
  v12 = *(_QWORD *)(*MEMORY[0x24BEE2B70] + v11 + 8);
  v13 = type metadata accessor for ModifiedAxisMark(0, a4, v12, a5);
  *(_QWORD *)(a6 + *(int *)(v13 + 44)) = a2;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(a6 + *(int *)(v13 + 48), a3, v12);
}

uint64_t AxisMark.font(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t *KeyPath;
  uint64_t v14;
  uint64_t v15;

  MEMORY[0x24BDAC7A8](a1);
  v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v10, v4, a2);
  KeyPath = (uint64_t *)swift_getKeyPath();
  v15 = a1;
  sub_2142AB814((uint64_t)v10, KeyPath, (uint64_t)&v15, a2, a3, a4);
  return swift_retain();
}

uint64_t AxisMark.offset(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t result;
  double *v16;
  uint64_t v17;

  v11 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v5, a1);
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(a3, v13, a1);
  result = type metadata accessor for OffsetAxisMark(0, a1, a2, v14);
  v16 = (double *)(a3 + *(int *)(result + 36));
  *v16 = a4;
  v16[1] = a5;
  return result;
}

_UNKNOWN **sub_2142ABA24()
{
  return &off_24D182368;
}

_UNKNOWN **sub_2142ABA30()
{
  return &off_24D182368;
}

_UNKNOWN **sub_2142ABA3C()
{
  return &off_24D182350;
}

uint64_t sub_2142ABA48()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_2142ABABC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    *(_OWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFF8);
  }
  return v4;
}

uint64_t sub_2142ABB6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  *(_OWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_2142ABBC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v7[1] = v8[1];
  return a1;
}

uint64_t sub_2142ABC2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  *(_OWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_2142ABC88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v7[1] = v8[1];
  return a1;
}

uint64_t sub_2142ABCEC(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 >= a2)
  {
    if (v5)
      return (*(uint64_t (**)(void))(v4 + 48))();
    return 0;
  }
  if (((((*(_QWORD *)(v4 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFF8) != 0)
    v6 = 2;
  else
    v6 = a2 - v5 + 1;
  if (v6 >= 0x10000)
    v7 = 4;
  else
    v7 = 2;
  if (v6 < 0x100)
    v7 = 1;
  if (v6 >= 2)
    v8 = v7;
  else
    v8 = 0;
  return ((uint64_t (*)(void))((char *)&loc_2142ABD5C + 4 * byte_21442A2A0[v8]))();
}

void sub_2142ABDB4(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 >= a3)
  {
    v11 = 0;
    if (a2 <= v7)
      goto LABEL_14;
  }
  else
  {
    v8 = a3 - v7;
    if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v9 = v8 + 1;
    else
      v9 = 2;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    if (a2 <= v7)
LABEL_14:
      __asm { BR              X11 }
  }
  if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v12 = ~v7 + a2;
    bzero(a1, ((*(_QWORD *)(v6 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
    *a1 = v12;
  }
  __asm { BR              X10 }
}

void sub_2142ABE9C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_2142ABEA4(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x2142ABEACLL);
}

void sub_2142ABEC8()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

void sub_2142ABED0()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
}

uint64_t sub_2142ABED8(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_WORD *)(v4 + v5) = 0;
  if (!a2)
    JUMPOUT(0x2142ABEE0);
  return (*(uint64_t (**)(uint64_t))(v3 + 56))(v4);
}

uint64_t type metadata accessor for OffsetAxisMark(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2141D8E88(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for OffsetAxisMark);
}

uint64_t sub_2142ABF04()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_2142ABF9C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  BOOL v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;

  v4 = a1;
  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v7 = *(_QWORD *)(v5 - 8);
  v8 = *(_DWORD *)(v7 + 80);
  v9 = v8 | *(_DWORD *)(v6 + 80) & 0xF8;
  if (((*(_DWORD *)(v6 + 80) | *(_DWORD *)(v7 + 80)) & 0x100000) != 0
    || ((v10 = *(_QWORD *)(v6 + 64), ((v8 + ((v10 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v8) + *(_QWORD *)(v7 + 64) <= 0x18)
      ? (v11 = v9 > 7)
      : (v11 = 1),
        v11))
  {
    v17 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v17 + (((v9 | 7) + 16) & ~(unint64_t)(v9 | 7)));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v6 + 16))(a1, a2);
    v12 = (_QWORD *)(((unint64_t)v4 + v10 + 7) & 0xFFFFFFFFFFFFFFF8);
    v13 = (_QWORD *)(((unint64_t)a2 + v10 + 7) & 0xFFFFFFFFFFFFFFF8);
    *v12 = *v13;
    v14 = ((unint64_t)v12 + v8 + 8) & ~v8;
    v15 = ((unint64_t)v13 + v8 + 8) & ~v8;
    v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
    swift_retain();
    v16(v14, v15, v5);
  }
  return v4;
}

uint64_t sub_2142AC0B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;

  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v4 + 8))();
  v5 = (a1 + *(_QWORD *)(v4 + 64) + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 8))((v5 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 80));
}

uint64_t sub_2142AC124(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 16))();
  v7 = *(_QWORD *)(v6 + 64) + 7;
  v8 = (_QWORD *)((v7 + a1) & 0xFFFFFFFFFFFFFFF8);
  v9 = (_QWORD *)((v7 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v8 = *v9;
  v10 = *(_QWORD *)(a3 + 24);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v13 = ((unint64_t)v8 + v12 + 8) & ~v12;
  v14 = ((unint64_t)v9 + v12 + 8) & ~v12;
  v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16);
  swift_retain();
  v15(v13, v14, v10);
  return a1;
}

uint64_t sub_2142AC1C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 24))();
  v7 = *(_QWORD *)(v6 + 64) + 7;
  v8 = (_QWORD *)((v7 + a1) & 0xFFFFFFFFFFFFFFF8);
  v9 = (_QWORD *)((v7 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v8 = *v9;
  swift_retain();
  swift_release();
  v10 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v10 + 24))(((unint64_t)v8 + *(unsigned __int8 *)(v10 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80), ((unint64_t)v9 + *(unsigned __int8 *)(v10 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
  return a1;
}

uint64_t sub_2142AC264(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 32))();
  v7 = *(_QWORD *)(v6 + 64) + 7;
  v8 = (_QWORD *)((v7 + a1) & 0xFFFFFFFFFFFFFFF8);
  v9 = (_QWORD *)((v7 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v8 = *v9;
  v10 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v10 + 32))(((unint64_t)v8 + *(unsigned __int8 *)(v10 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80), ((unint64_t)v9 + *(unsigned __int8 *)(v10 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
  return a1;
}

uint64_t sub_2142AC2EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 40))();
  v7 = *(_QWORD *)(v6 + 64) + 7;
  v8 = (_QWORD *)((v7 + a1) & 0xFFFFFFFFFFFFFFF8);
  v9 = (_QWORD *)((v7 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v8 = *v9;
  swift_release();
  v10 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v10 + 40))(((unint64_t)v8 + *(unsigned __int8 *)(v10 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80), ((unint64_t)v9 + *(unsigned __int8 *)(v10 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
  return a1;
}

uint64_t sub_2142AC37C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  int v12;
  unsigned int v14;
  int v15;
  int v16;
  unint64_t *v17;
  unint64_t v18;

  v3 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v4 = *(_DWORD *)(v3 + 84);
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  if (v4 <= *(_DWORD *)(v5 + 84))
    v6 = *(_DWORD *)(v5 + 84);
  else
    v6 = *(_DWORD *)(v3 + 84);
  if (v6 <= 0x7FFFFFFF)
    v7 = 0x7FFFFFFF;
  else
    v7 = v6;
  if (!a2)
    return 0;
  v8 = *(_QWORD *)(v3 + 64);
  v9 = *(unsigned __int8 *)(v5 + 80);
  if (a2 <= v7)
    goto LABEL_27;
  v10 = ((v9 + ((v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v9) + *(_QWORD *)(v5 + 64);
  v11 = 8 * v10;
  if (v10 <= 3)
  {
    v14 = ((a2 - v7 + ~(-1 << v11)) >> v11) + 1;
    if (HIWORD(v14))
    {
      v12 = *(_DWORD *)(a1 + v10);
      if (!v12)
        goto LABEL_27;
      goto LABEL_18;
    }
    if (v14 > 0xFF)
    {
      v12 = *(unsigned __int16 *)(a1 + v10);
      if (!*(_WORD *)(a1 + v10))
        goto LABEL_27;
      goto LABEL_18;
    }
    if (v14 < 2)
    {
LABEL_27:
      if (v4 == v7)
        return (*(uint64_t (**)(void))(v3 + 48))();
      v17 = (unint64_t *)((a1 + v8 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((v6 & 0x80000000) != 0)
        return (*(uint64_t (**)(unint64_t))(v5 + 48))(((unint64_t)v17 + v9 + 8) & ~v9);
      v18 = *v17;
      if (v18 >= 0xFFFFFFFF)
        LODWORD(v18) = -1;
      return (v18 + 1);
    }
  }
  v12 = *(unsigned __int8 *)(a1 + v10);
  if (!*(_BYTE *)(a1 + v10))
    goto LABEL_27;
LABEL_18:
  v15 = (v12 - 1) << v11;
  if (v10 > 3)
    v15 = 0;
  if (!(_DWORD)v10)
    return v7 + v15 + 1;
  if (v10 <= 3)
    v16 = ((v9 + ((v8 + 7) & 0xFFFFFFF8) + 8) & ~(_DWORD)v9) + *(_DWORD *)(v5 + 64);
  else
    v16 = 4;
  return ((uint64_t (*)(void))((char *)&loc_2142AC470 + 4 * byte_21442A2AF[v16 - 1]))();
}

void sub_2142AC50C(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  size_t v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  int v13;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v5 + 84) <= *(_DWORD *)(v6 + 84))
    v7 = *(_DWORD *)(v6 + 84);
  else
    v7 = *(_DWORD *)(v5 + 84);
  if (v7 <= 0x7FFFFFFF)
    v8 = 0x7FFFFFFF;
  else
    v8 = v7;
  v9 = ((*(unsigned __int8 *)(v6 + 80) + ((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
     + *(_QWORD *)(v6 + 64);
  if (a3 > v8)
  {
    if (v9 <= 3)
    {
      v12 = ((a3 - v8 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v12))
      {
        v10 = 4u;
      }
      else if (v12 >= 0x100)
      {
        v10 = 2;
      }
      else
      {
        v10 = v12 > 1;
      }
    }
    else
    {
      v10 = 1u;
    }
  }
  else
  {
    v10 = 0;
  }
  if (v8 < a2)
  {
    v11 = ~v8 + a2;
    if (v9 < 4)
    {
      if ((_DWORD)v9)
      {
        v13 = v11 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if ((_DWORD)v9 == 3)
        {
          *a1 = v13;
          *((_BYTE *)a1 + 2) = BYTE2(v13);
        }
        else if ((_DWORD)v9 == 2)
        {
          *a1 = v13;
        }
        else
        {
          *(_BYTE *)a1 = v13;
        }
      }
    }
    else
    {
      bzero(a1, v9);
      *(_DWORD *)a1 = v11;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X4 }
}

uint64_t type metadata accessor for ModifiedAxisMark(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2141D8E88(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ModifiedAxisMark);
}

uint64_t sub_2142AC754(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(_BYTE *, _QWORD);
  void (*v20)(char *);
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE v28[32];
  _QWORD v29[2];
  __int128 v30;

  v26 = a5;
  v27 = a3;
  v6 = *(_QWORD *)(a4 - 8);
  v24 = a1;
  v25 = v6;
  v7 = MEMORY[0x24BDAC7A8](a1);
  v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v23 - v10;
  v13 = *v12;
  v17 = type metadata accessor for ModifiedAxisMark(0, v14, v15, v16);
  swift_beginAccess();
  v18 = *(_QWORD *)(v13 + 40);
  v29[0] = *(_QWORD *)(v13 + 32);
  v29[1] = v18;
  v30 = *(_OWORD *)(v13 + 48);
  swift_retain();
  swift_retain();
  v19 = (void (*)(_BYTE *, _QWORD))swift_readAtKeyPath();
  v20 = *(void (**)(char *))(v6 + 16);
  v20(v11);
  v19(v28, 0);
  swift_release();
  swift_release();
  v21 = v24;
  ((void (*)(char *, uint64_t, uint64_t))v20)(v9, v24 + *(int *)(v17 + 48), a4);
  swift_beginAccess();
  swift_setAtWritableKeyPath();
  swift_endAccess();
  v29[0] = v13;
  (*(void (**)(uint64_t, _QWORD *))(v26 + 8))(v21, v29);
  ((void (*)(char *, char *, uint64_t))v20)(v9, v11, a4);
  swift_beginAccess();
  swift_setAtWritableKeyPath();
  swift_endAccess();
  return (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v11, a4);
}

uint64_t sub_2142AC934@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, _QWORD *a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(_QWORD *, _QWORD);
  void (*v20)(char *);
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD v29[4];
  _QWORD v30[2];
  __int128 v31;

  v26 = a4;
  v27 = a2;
  v28 = a5;
  v6 = *(_QWORD *)(a3 - 8);
  v24 = a1;
  v25 = v6;
  v7 = MEMORY[0x24BDAC7A8](a1);
  v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v24 - v10;
  v13 = *v12;
  v17 = type metadata accessor for ModifiedAxisMark(0, v14, v15, v16);
  swift_beginAccess();
  v18 = *(_QWORD *)(v13 + 40);
  v30[0] = *(_QWORD *)(v13 + 32);
  v30[1] = v18;
  v31 = *(_OWORD *)(v13 + 48);
  swift_retain();
  swift_retain();
  v19 = (void (*)(_QWORD *, _QWORD))swift_readAtKeyPath();
  v20 = *(void (**)(char *))(v6 + 16);
  v20(v11);
  v19(v29, 0);
  swift_release();
  swift_release();
  v21 = v24;
  ((void (*)(char *, uint64_t, uint64_t))v20)(v9, v24 + *(int *)(v17 + 48), a3);
  swift_beginAccess();
  swift_setAtWritableKeyPath();
  swift_endAccess();
  v29[0] = v13;
  (*(void (**)(_QWORD *__return_ptr, uint64_t, _QWORD *))(v26 + 16))(v30, v21, v29);
  v22 = v30[0];
  ((void (*)(char *, char *, uint64_t))v20)(v9, v11, a3);
  swift_beginAccess();
  swift_setAtWritableKeyPath();
  swift_endAccess();
  result = (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v11, a3);
  *v28 = v22;
  return result;
}

uint64_t sub_2142ACB28(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_2142AC754(a1, a2, a3[2], a3[3], a3[4]);
}

uint64_t sub_2142ACB38@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  return sub_2142AC934(a1, a2[2], a2[3], a2[4], a3);
}

uint64_t sub_2142ACB48(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  double v8;
  double v9;
  uint64_t v10;
  double *v11;
  uint64_t result;
  uint64_t v13;

  v7 = *a2;
  swift_beginAccess();
  v8 = *(double *)(v7 + 48);
  v9 = *(double *)(v7 + 56);
  v11 = (double *)(a1 + *(int *)(type metadata accessor for OffsetAxisMark(0, a3, a4, v10) + 36));
  *(double *)(v7 + 48) = v8 + *v11;
  *(double *)(v7 + 56) = v9 + v11[1];
  v13 = v7;
  result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(a4 + 8))(a1, &v13, a3, a4);
  *(double *)(v7 + 48) = v8;
  *(double *)(v7 + 56) = v9;
  return result;
}

_QWORD *sub_2142ACBF0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v9;
  double v10;
  double v11;
  uint64_t v12;
  double *v13;
  _QWORD *result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v9 = *a2;
  swift_beginAccess();
  v10 = *(double *)(v9 + 48);
  v11 = *(double *)(v9 + 56);
  v13 = (double *)(a1 + *(int *)(type metadata accessor for OffsetAxisMark(0, a3, a4, v12) + 36));
  *(double *)(v9 + 48) = v10 + *v13;
  *(double *)(v9 + 56) = v11 + v13[1];
  v16 = v9;
  result = (*(_QWORD *(**)(uint64_t *__return_ptr, uint64_t, uint64_t *, uint64_t, uint64_t))(a4 + 16))(&v17, a1, &v16, a3, a4);
  v15 = v17;
  *(double *)(v9 + 48) = v10;
  *(double *)(v9 + 56) = v11;
  *a5 = v15;
  return result;
}

uint64_t sub_2142ACCB0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return sub_2142ACB48(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

_QWORD *sub_2142ACCBC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  return sub_2142ACBF0(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
}

uint64_t ChartModifiedContent.content.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t ChartModifiedContent.content.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*ChartModifiedContent.content.modify())()
{
  return nullsub_1;
}

uint64_t ChartModifiedContent.modifier.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 24) - 8) + 16))(a2, v2 + *(int *)(a1 + 36));
}

uint64_t ChartModifiedContent.modifier.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 40))(v2 + *(int *)(a2 + 36), a1);
}

uint64_t (*ChartModifiedContent.modifier.modify())()
{
  return nullsub_1;
}

uint64_t ChartModifiedContent.init(content:modifier:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(a5, a1);
  v10 = a5 + *(int *)(type metadata accessor for ChartModifiedContent(0, a3, a4, v9) + 36);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 32))(v10, a2, a4);
}

uint64_t type metadata accessor for ChartModifiedContent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2141D8E88(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ChartModifiedContent);
}

uint64_t sub_2142ACDD4()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_2142ACE60(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v13;
  uint64_t v14;

  v4 = a1;
  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v7 = *(_QWORD *)(v5 - 8);
  v8 = *(_DWORD *)(v7 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = (*(_BYTE *)(v6 + 80) | *(_BYTE *)(v7 + 80));
  if (v10 > 7
    || ((*(_DWORD *)(v6 + 80) | *(_DWORD *)(v7 + 80)) & 0x100000) != 0
    || (v9 & (unint64_t)~v8) + *(_QWORD *)(v7 + 64) > 0x18)
  {
    v13 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v13 + ((v10 + 16) & ~v10));
    swift_retain();
  }
  else
  {
    v14 = ~v8;
    (*(void (**)(uint64_t *, uint64_t *))(v6 + 16))(a1, a2);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 16))(((unint64_t)v4 + v9) & v14, ((unint64_t)a2 + v9) & v14, v5);
  }
  return v4;
}

uint64_t sub_2142ACF30(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v4 + 8))();
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 8))((*(_QWORD *)(v4 + 64) + a1 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 80));
}

uint64_t sub_2142ACF88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 16))();
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 16))((*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v7 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v7 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t sub_2142ACFF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 24))();
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 24))((*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v7 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v7 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t sub_2142AD060(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 32))();
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 32))((*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v7 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v7 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t sub_2142AD0CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 40))();
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 40))((*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v7 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v7 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t sub_2142AD138(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= v5)
    v8 = *(_DWORD *)(v4 + 84);
  else
    v8 = *(_DWORD *)(v6 + 84);
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = *(_QWORD *)(v4 + 64) + v9;
  v11 = a2 - v8;
  if (a2 <= v8)
    goto LABEL_23;
  v12 = (v10 & ~v9) + *(_QWORD *)(v6 + 64);
  v13 = 8 * v12;
  if (v12 <= 3)
  {
    v15 = ((v11 + ~(-1 << v13)) >> v13) + 1;
    if (HIWORD(v15))
    {
      v14 = *(_DWORD *)(a1 + v12);
      if (!v14)
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 > 0xFF)
    {
      v14 = *(unsigned __int16 *)(a1 + v12);
      if (!*(_WORD *)(a1 + v12))
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 < 2)
    {
LABEL_23:
      if (v8)
      {
        if (v5 >= v7)
          return (*(uint64_t (**)(void))(v4 + 48))();
        else
          return (*(uint64_t (**)(uint64_t))(v6 + 48))((v10 + a1) & ~v9);
      }
      return 0;
    }
  }
  v14 = *(unsigned __int8 *)(a1 + v12);
  if (!*(_BYTE *)(a1 + v12))
    goto LABEL_23;
LABEL_14:
  v16 = (v14 - 1) << v13;
  if (v12 > 3)
    v16 = 0;
  if (!(_DWORD)v12)
    return v8 + v16 + 1;
  if (v12 <= 3)
    v17 = (v10 & ~(_DWORD)v9) + *(_DWORD *)(v6 + 64);
  else
    v17 = 4;
  return ((uint64_t (*)(void))((char *)&loc_2142AD214 + 4 * byte_21442A390[v17 - 1]))();
}

void sub_2142AD290(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84))
    v7 = *(_DWORD *)(v5 + 84);
  else
    v7 = *(_DWORD *)(v6 + 84);
  v8 = ((*(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
     + *(_QWORD *)(v6 + 64);
  if (a3 > v7)
  {
    if (v8 <= 3)
    {
      v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v11))
      {
        v9 = 4u;
      }
      else if (v11 >= 0x100)
      {
        v9 = 2;
      }
      else
      {
        v9 = v11 > 1;
      }
    }
    else
    {
      v9 = 1u;
    }
  }
  else
  {
    v9 = 0;
  }
  if (v7 < a2)
  {
    v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v12;
        }
        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X16 }
}

void destroy for ChartInternal.ScaleDef(uint64_t a1)
{
  unsigned int v2;
  unsigned int v3;

  v2 = *(unsigned __int16 *)(a1 + 40);
  if (v2 >> 8 <= 0xFE)
    sub_2141D77B4(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), v2, SBYTE1(v2));
  v3 = *(unsigned __int8 *)(a1 + 64);
  if (v3 <= 0xFB)
    sub_2141D7760(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), v3);
}

uint64_t initializeWithCopy for ChartInternal.ScaleDef(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = *(unsigned __int16 *)(a2 + 40);
  if (v4 >> 8 <= 0xFE)
  {
    v5 = *(_QWORD *)(a2 + 16);
    v6 = *(_QWORD *)(a2 + 24);
    v7 = *(_QWORD *)(a2 + 32);
    sub_2141D7C08(v5, v6, v7, v4, SBYTE1(v4));
    *(_QWORD *)(a1 + 16) = v5;
    *(_QWORD *)(a1 + 24) = v6;
    *(_QWORD *)(a1 + 32) = v7;
    *(_WORD *)(a1 + 40) = v4;
  }
  else
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 26) = *(_OWORD *)(a2 + 26);
  }
  v8 = *(unsigned __int8 *)(a2 + 64);
  if (v8 <= 0xFB)
  {
    v10 = *(_QWORD *)(a2 + 48);
    v9 = *(_QWORD *)(a2 + 56);
    sub_2141D83D0(v10, v9, v8);
    *(_QWORD *)(a1 + 48) = v10;
    *(_QWORD *)(a1 + 56) = v9;
    *(_BYTE *)(a1 + 64) = v8;
  }
  else
  {
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  }
  return a1;
}

uint64_t assignWithCopy for ChartInternal.ScaleDef(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  __int128 *v5;
  __int128 *v6;
  unsigned int v7;
  unsigned int v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 v20;
  char v21;
  _OWORD *v22;
  _OWORD *v23;
  unsigned int v24;
  __int128 v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 v33;

  v4 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v4;
  v5 = (__int128 *)(a1 + 16);
  v6 = (__int128 *)(a2 + 2);
  v7 = *((unsigned __int16 *)a2 + 20);
  v8 = v7 >> 8;
  if (*(unsigned __int8 *)(a1 + 41) == 255)
  {
    if (v8 <= 0xFE)
    {
      v11 = a2[2];
      v12 = a2[3];
      v13 = a2[4];
      sub_2141D7C08(v11, v12, v13, v7, SBYTE1(v7));
      *(_QWORD *)(a1 + 16) = v11;
      *(_QWORD *)(a1 + 24) = v12;
      *(_QWORD *)(a1 + 32) = v13;
      *(_WORD *)(a1 + 40) = v7;
    }
    else
    {
      v9 = *v6;
      *(_OWORD *)(a1 + 26) = *(_OWORD *)((char *)a2 + 26);
      *v5 = v9;
    }
  }
  else if (v8 <= 0xFE)
  {
    v14 = a2[2];
    v15 = a2[3];
    v16 = a2[4];
    sub_2141D7C08(v14, v15, v16, v7, SBYTE1(v7));
    v17 = *(_QWORD *)(a1 + 16);
    v18 = *(_QWORD *)(a1 + 24);
    v19 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 16) = v14;
    *(_QWORD *)(a1 + 24) = v15;
    *(_QWORD *)(a1 + 32) = v16;
    v20 = *(_BYTE *)(a1 + 40);
    *(_BYTE *)(a1 + 40) = v7;
    v21 = *(_BYTE *)(a1 + 41);
    *(_BYTE *)(a1 + 41) = BYTE1(v7);
    sub_2141D77B4(v17, v18, v19, v20, v21);
  }
  else
  {
    sub_2141D8734(a1 + 16);
    v10 = *(__int128 *)((char *)v6 + 10);
    *v5 = *v6;
    *(__int128 *)((char *)v5 + 10) = v10;
  }
  v22 = (_OWORD *)(a1 + 48);
  v23 = a2 + 6;
  v24 = *((unsigned __int8 *)a2 + 64);
  if (*(unsigned __int8 *)(a1 + 64) <= 0xFBu)
  {
    if (v24 <= 0xFB)
    {
      v30 = a2[6];
      v29 = a2[7];
      sub_2141D83D0(v30, v29, v24);
      v31 = *(_QWORD *)(a1 + 48);
      v32 = *(_QWORD *)(a1 + 56);
      *(_QWORD *)(a1 + 48) = v30;
      *(_QWORD *)(a1 + 56) = v29;
      v33 = *(_BYTE *)(a1 + 64);
      *(_BYTE *)(a1 + 64) = v24;
      sub_2141D7760(v31, v32, v33);
    }
    else
    {
      sub_2141D8768(a1 + 48);
      v26 = *((_BYTE *)a2 + 64);
      *v22 = *v23;
      *(_BYTE *)(a1 + 64) = v26;
    }
  }
  else if (v24 <= 0xFB)
  {
    v28 = a2[6];
    v27 = a2[7];
    sub_2141D83D0(v28, v27, v24);
    *(_QWORD *)(a1 + 48) = v28;
    *(_QWORD *)(a1 + 56) = v27;
    *(_BYTE *)(a1 + 64) = v24;
  }
  else
  {
    v25 = *v23;
    *(_BYTE *)(a1 + 64) = *((_BYTE *)a2 + 64);
    *v22 = v25;
  }
  return a1;
}

__n128 initializeWithTake for ChartInternal.ScaleDef(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for ChartInternal.ScaleDef(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  _OWORD *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = (_OWORD *)(a1 + 16);
  v5 = (_OWORD *)(a2 + 16);
  v6 = *(unsigned __int16 *)(a1 + 40);
  if (v6 >> 8 > 0xFE)
    goto LABEL_4;
  v7 = *(unsigned __int16 *)(a2 + 40);
  if (v7 >> 8 > 0xFE)
  {
    sub_2141D8734(a1 + 16);
LABEL_4:
    *v4 = *v5;
    *(_OWORD *)((char *)v4 + 10) = *(_OWORD *)((char *)v5 + 10);
    goto LABEL_6;
  }
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = v8;
  *(_WORD *)(a1 + 40) = v7;
  sub_2141D77B4(v9, v10, v11, v6, SBYTE1(v6));
LABEL_6:
  v12 = (_OWORD *)(a2 + 48);
  v13 = *(unsigned __int8 *)(a1 + 64);
  if (v13 <= 0xFB)
  {
    v14 = *(unsigned __int8 *)(a2 + 64);
    if (v14 <= 0xFB)
    {
      v15 = *(_QWORD *)(a1 + 48);
      v16 = *(_QWORD *)(a1 + 56);
      *(_OWORD *)(a1 + 48) = *v12;
      *(_BYTE *)(a1 + 64) = v14;
      sub_2141D7760(v15, v16, v13);
      return a1;
    }
    sub_2141D8768(a1 + 48);
  }
  *(_OWORD *)(a1 + 48) = *v12;
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  return a1;
}

uint64_t getEnumTagSinglePayload for ChartInternal.ScaleDef(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 65))
    return (*(_DWORD *)a1 + 253);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = (v3 ^ 0xFF) - 1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ChartInternal.ScaleDef(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 64) = 0;
    *(_QWORD *)result = a2 - 253;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 65) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 65) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = ~(_BYTE)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ChartInternal.ScaleDef()
{
  return &type metadata for ChartInternal.ScaleDef;
}

uint64_t initializeBufferWithCopyOfBuffer for ChartInternal.ScaleRange(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return sub_2142B0C58(a1, a2, a3, (void (*)(_QWORD, uint64_t, uint64_t))sub_2141D83D0);
}

uint64_t destroy for ChartInternal.ScaleRange(uint64_t a1)
{
  return sub_2141D7760(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t *assignWithCopy for ChartInternal.ScaleRange(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_2142B0CB4(a1, a2, a3, (void (*)(_QWORD, uint64_t, uint64_t))sub_2141D83D0, (void (*)(uint64_t, uint64_t, uint64_t))sub_2141D7760);
}

uint64_t *assignWithTake for ChartInternal.ScaleRange(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return sub_2142B0D20(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))sub_2141D7760);
}

uint64_t getEnumTagSinglePayload for ChartInternal.ScaleRange(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x39 && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 57);
  v3 = ((*(unsigned __int8 *)(a1 + 16) >> 5) & 0xFFFFFFC7 | (8 * ((*(unsigned __int8 *)(a1 + 16) >> 2) & 7))) ^ 0x3F;
  if (v3 >= 0x38)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for ChartInternal.ScaleRange(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x38)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 57;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x39)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0x39)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      *(_BYTE *)(result + 16) = 4 * (((-a2 >> 3) & 7) - 8 * a2);
    }
  }
  return result;
}

uint64_t sub_2142ADA40(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16) >> 5;
}

uint64_t sub_2142ADA4C(uint64_t result)
{
  *(_BYTE *)(result + 16) &= 0x1Fu;
  return result;
}

uint64_t sub_2142ADA5C(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = *(_BYTE *)(result + 16) & 3 | (32 * a2);
  return result;
}

ValueMetadata *type metadata accessor for ChartInternal.ScaleRange()
{
  return &type metadata for ChartInternal.ScaleRange;
}

uint64_t sub_2142ADA80(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 25);
}

uint64_t sub_2142ADA88(uint64_t result, char a2)
{
  *(_BYTE *)(result + 25) = a2;
  return result;
}

ValueMetadata *type metadata accessor for ChartInternal.ScaleDomain()
{
  return &type metadata for ChartInternal.ScaleDomain;
}

uint64_t sub_2142ADAA0(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4;
  int v5;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  int v14;
  __int128 v15;
  __int128 v16;
  _OWORD *v17;
  _OWORD *v18;
  int v19;
  __int128 v20;
  __int128 v21;
  _OWORD *v22;
  _OWORD *v23;
  int v24;
  __int128 v25;
  __int128 v26;
  BOOL *v27;
  _OWORD *v28;
  _OWORD *v29;
  int v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  _OWORD *v34;
  _OWORD *v35;
  int v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  _OWORD *v40;
  _OWORD *v41;
  int v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *(_QWORD *)v4 = *a2;
    v4 = v11 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 24) = v7;
    (**(void (***)(uint64_t, uint64_t *))(v7 - 8))(a1, a2);
    v8 = a2[6];
    *(_QWORD *)(v4 + 40) = a2[5];
    *(_QWORD *)(v4 + 48) = v8;
    v9 = a2[13];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v9 == 1)
    {
      v10 = *(_OWORD *)(a2 + 9);
      *(_OWORD *)(v4 + 56) = *(_OWORD *)(a2 + 7);
      *(_OWORD *)(v4 + 72) = v10;
      *(_OWORD *)(v4 + 88) = *(_OWORD *)(a2 + 11);
      *(_QWORD *)(v4 + 104) = a2[13];
    }
    else
    {
      *(_WORD *)(v4 + 56) = *((_WORD *)a2 + 28);
      *(_OWORD *)(v4 + 64) = *((_OWORD *)a2 + 4);
      *(_BYTE *)(v4 + 80) = *((_BYTE *)a2 + 80);
      *(_QWORD *)(v4 + 88) = a2[11];
      *(_BYTE *)(v4 + 96) = *((_BYTE *)a2 + 96);
      *(_QWORD *)(v4 + 104) = v9;
      swift_retain();
    }
    v12 = (_OWORD *)(v4 + 112);
    v13 = a2 + 14;
    v14 = *((unsigned __int8 *)a2 + 152);
    if (v14 == 255)
    {
      v15 = *((_OWORD *)a2 + 8);
      *v12 = *v13;
      *(_OWORD *)(v4 + 128) = v15;
      *(_OWORD *)(v4 + 137) = *(_OWORD *)((char *)a2 + 137);
    }
    else
    {
      v16 = *(_OWORD *)(a2 + 17);
      *(_OWORD *)(v4 + 136) = v16;
      (**(void (***)(_OWORD *, _OWORD *))(v16 - 8))(v12, v13);
      *(_BYTE *)(v4 + 152) = (v14 & 1) != 0;
    }
    v17 = (_OWORD *)(v4 + 160);
    v18 = a2 + 20;
    v19 = *((unsigned __int8 *)a2 + 200);
    if (v19 == 255)
    {
      v20 = *((_OWORD *)a2 + 11);
      *v17 = *v18;
      *(_OWORD *)(v4 + 176) = v20;
      *(_OWORD *)(v4 + 185) = *(_OWORD *)((char *)a2 + 185);
    }
    else
    {
      v21 = *(_OWORD *)(a2 + 23);
      *(_OWORD *)(v4 + 184) = v21;
      (**(void (***)(_OWORD *, _OWORD *))(v21 - 8))(v17, v18);
      *(_BYTE *)(v4 + 200) = (v19 & 1) != 0;
    }
    v22 = (_OWORD *)(v4 + 208);
    v23 = a2 + 26;
    v24 = *((unsigned __int8 *)a2 + 248);
    if (v24 == 255)
    {
      v25 = *((_OWORD *)a2 + 14);
      *v22 = *v23;
      *(_OWORD *)(v4 + 224) = v25;
      *(_OWORD *)(v4 + 233) = *(_OWORD *)((char *)a2 + 233);
    }
    else
    {
      v26 = *(_OWORD *)(a2 + 29);
      *(_OWORD *)(v4 + 232) = v26;
      (**(void (***)(_OWORD *, _OWORD *))(v26 - 8))(v22, v23);
      *(_BYTE *)(v4 + 248) = (v24 & 1) != 0;
    }
    v27 = (BOOL *)(v4 + 296);
    v28 = (_OWORD *)(v4 + 256);
    v29 = a2 + 32;
    v30 = *((unsigned __int8 *)a2 + 296);
    if (v30 == 255)
    {
      v31 = *((_OWORD *)a2 + 17);
      *v28 = *v29;
      *(_OWORD *)(v4 + 272) = v31;
      *(_OWORD *)(v4 + 281) = *(_OWORD *)((char *)a2 + 281);
    }
    else
    {
      v32 = a2[35];
      v33 = a2[36];
      *(_QWORD *)(v4 + 280) = v32;
      *(_QWORD *)(v4 + 288) = v33;
      (**(void (***)(_OWORD *, _OWORD *))(v32 - 8))(v28, v29);
      *v27 = (v30 & 1) != 0;
    }
    v34 = (_OWORD *)(v4 + 304);
    v35 = a2 + 38;
    v36 = *((unsigned __int8 *)a2 + 344);
    if (v36 == 255)
    {
      v37 = *((_OWORD *)a2 + 20);
      *v34 = *v35;
      *(_OWORD *)(v4 + 320) = v37;
      *(_OWORD *)(v4 + 329) = *(_OWORD *)((char *)a2 + 329);
    }
    else
    {
      v38 = a2[41];
      v39 = a2[42];
      *(_QWORD *)(v4 + 328) = v38;
      *(_QWORD *)(v4 + 336) = v39;
      (**(void (***)(_OWORD *, _OWORD *))(v38 - 8))(v34, v35);
      *(_BYTE *)(v4 + 344) = (v36 & 1) != 0;
    }
    v40 = (_OWORD *)(v4 + 352);
    v41 = a2 + 44;
    v42 = *((unsigned __int8 *)a2 + 392);
    if (v42 == 255)
    {
      v43 = *((_OWORD *)a2 + 23);
      *v40 = *v41;
      *(_OWORD *)(v4 + 368) = v43;
      *(_OWORD *)(v4 + 377) = *(_OWORD *)((char *)a2 + 377);
    }
    else
    {
      v44 = a2[47];
      v45 = a2[48];
      *(_QWORD *)(v4 + 376) = v44;
      *(_QWORD *)(v4 + 384) = v45;
      (**(void (***)(_OWORD *, _OWORD *))(v44 - 8))(v40, v41);
      *(_BYTE *)(v4 + 392) = (v42 & 1) != 0;
    }
    *(_WORD *)(v4 + 393) = *(_WORD *)((char *)a2 + 393);
    v46 = a3[9];
    v47 = v4 + v46;
    v48 = (uint64_t)a2 + v46;
    v49 = sub_214423B94();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 16))(v47, v48, v49);
    v50 = (int *)type metadata accessor for ChartEnvironmentValues(0);
    v51 = v50[5];
    v52 = v47 + v51;
    v53 = v48 + v51;
    v54 = sub_214423C54();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 16))(v52, v53, v54);
    v55 = v50[6];
    v56 = v47 + v55;
    v57 = v48 + v55;
    v58 = sub_2144240D4();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 16))(v56, v57, v58);
    *(_QWORD *)(v47 + v50[7]) = *(_QWORD *)(v48 + v50[7]);
    v59 = v50[8];
    v60 = v47 + v59;
    v61 = v48 + v59;
    v62 = sub_214423F24();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v62 - 8) + 16))(v60, v61, v62);
    *(_BYTE *)(v47 + v50[9]) = *(_BYTE *)(v48 + v50[9]);
    v63 = a3[11];
    *(_BYTE *)(v4 + a3[10]) = *((_BYTE *)a2 + a3[10]);
    v64 = v4 + v63;
    v65 = (uint64_t)a2 + v63;
    *(_BYTE *)(v64 + 8) = *(_BYTE *)(v65 + 8);
    *(_QWORD *)v64 = *(_QWORD *)v65;
    v66 = a3[12];
    v67 = v4 + v66;
    v68 = (uint64_t)a2 + v66;
    *(_QWORD *)v67 = *(_QWORD *)v68;
    *(_BYTE *)(v67 + 8) = *(_BYTE *)(v68 + 8);
  }
  return v4;
}

uint64_t sub_2142ADEB4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  _s6Charts15AnyChartContentVwxx_0(a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 104) != 1)
    swift_release();
  if (*(unsigned __int8 *)(a1 + 152) != 255)
    _s6Charts15AnyChartContentVwxx_0(a1 + 112);
  if (*(unsigned __int8 *)(a1 + 200) != 255)
    _s6Charts15AnyChartContentVwxx_0(a1 + 160);
  if (*(unsigned __int8 *)(a1 + 248) != 255)
    _s6Charts15AnyChartContentVwxx_0(a1 + 208);
  if (*(unsigned __int8 *)(a1 + 296) != 255)
    _s6Charts15AnyChartContentVwxx_0(a1 + 256);
  if (*(unsigned __int8 *)(a1 + 344) != 255)
    _s6Charts15AnyChartContentVwxx_0(a1 + 304);
  if (*(unsigned __int8 *)(a1 + 392) != 255)
    _s6Charts15AnyChartContentVwxx_0(a1 + 352);
  v4 = a1 + *(int *)(a2 + 36);
  v5 = sub_214423B94();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = (int *)type metadata accessor for ChartEnvironmentValues(0);
  v7 = v4 + v6[5];
  v8 = sub_214423C54();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = v4 + v6[6];
  v10 = sub_2144240D4();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  v11 = v4 + v6[8];
  v12 = sub_214423F24();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
}

uint64_t sub_2142AE010(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  _OWORD *v10;
  _OWORD *v11;
  int v12;
  __int128 v13;
  __int128 v14;
  _OWORD *v15;
  _OWORD *v16;
  int v17;
  __int128 v18;
  __int128 v19;
  _OWORD *v20;
  _OWORD *v21;
  int v22;
  __int128 v23;
  __int128 v24;
  BOOL *v25;
  _OWORD *v26;
  _OWORD *v27;
  int v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  _OWORD *v32;
  _OWORD *v33;
  int v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  _OWORD *v38;
  _OWORD *v39;
  int v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  v6 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v6;
  (**(void (***)(void))(v6 - 8))();
  v7 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v7;
  v8 = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v8 == 1)
  {
    v9 = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = v9;
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  }
  else
  {
    *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
    *(_QWORD *)(a1 + 104) = v8;
    swift_retain();
  }
  v10 = (_OWORD *)(a1 + 112);
  v11 = (_OWORD *)(a2 + 112);
  v12 = *(unsigned __int8 *)(a2 + 152);
  if (v12 == 255)
  {
    v13 = *(_OWORD *)(a2 + 128);
    *v10 = *v11;
    *(_OWORD *)(a1 + 128) = v13;
    *(_OWORD *)(a1 + 137) = *(_OWORD *)(a2 + 137);
  }
  else
  {
    v14 = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 136) = v14;
    (**(void (***)(_OWORD *, _OWORD *))(v14 - 8))(v10, v11);
    *(_BYTE *)(a1 + 152) = (v12 & 1) != 0;
  }
  v15 = (_OWORD *)(a1 + 160);
  v16 = (_OWORD *)(a2 + 160);
  v17 = *(unsigned __int8 *)(a2 + 200);
  if (v17 == 255)
  {
    v18 = *(_OWORD *)(a2 + 176);
    *v15 = *v16;
    *(_OWORD *)(a1 + 176) = v18;
    *(_OWORD *)(a1 + 185) = *(_OWORD *)(a2 + 185);
  }
  else
  {
    v19 = *(_OWORD *)(a2 + 184);
    *(_OWORD *)(a1 + 184) = v19;
    (**(void (***)(_OWORD *, _OWORD *))(v19 - 8))(v15, v16);
    *(_BYTE *)(a1 + 200) = (v17 & 1) != 0;
  }
  v20 = (_OWORD *)(a1 + 208);
  v21 = (_OWORD *)(a2 + 208);
  v22 = *(unsigned __int8 *)(a2 + 248);
  if (v22 == 255)
  {
    v23 = *(_OWORD *)(a2 + 224);
    *v20 = *v21;
    *(_OWORD *)(a1 + 224) = v23;
    *(_OWORD *)(a1 + 233) = *(_OWORD *)(a2 + 233);
  }
  else
  {
    v24 = *(_OWORD *)(a2 + 232);
    *(_OWORD *)(a1 + 232) = v24;
    (**(void (***)(_OWORD *, _OWORD *))(v24 - 8))(v20, v21);
    *(_BYTE *)(a1 + 248) = (v22 & 1) != 0;
  }
  v25 = (BOOL *)(a1 + 296);
  v26 = (_OWORD *)(a1 + 256);
  v27 = (_OWORD *)(a2 + 256);
  v28 = *(unsigned __int8 *)(a2 + 296);
  if (v28 == 255)
  {
    v29 = *(_OWORD *)(a2 + 272);
    *v26 = *v27;
    *(_OWORD *)(a1 + 272) = v29;
    *(_OWORD *)(a1 + 281) = *(_OWORD *)(a2 + 281);
  }
  else
  {
    v30 = *(_QWORD *)(a2 + 280);
    v31 = *(_QWORD *)(a2 + 288);
    *(_QWORD *)(a1 + 280) = v30;
    *(_QWORD *)(a1 + 288) = v31;
    (**(void (***)(_OWORD *, _OWORD *))(v30 - 8))(v26, v27);
    *v25 = (v28 & 1) != 0;
  }
  v32 = (_OWORD *)(a1 + 304);
  v33 = (_OWORD *)(a2 + 304);
  v34 = *(unsigned __int8 *)(a2 + 344);
  if (v34 == 255)
  {
    v35 = *(_OWORD *)(a2 + 320);
    *v32 = *v33;
    *(_OWORD *)(a1 + 320) = v35;
    *(_OWORD *)(a1 + 329) = *(_OWORD *)(a2 + 329);
  }
  else
  {
    v36 = *(_QWORD *)(a2 + 328);
    v37 = *(_QWORD *)(a2 + 336);
    *(_QWORD *)(a1 + 328) = v36;
    *(_QWORD *)(a1 + 336) = v37;
    (**(void (***)(_OWORD *, _OWORD *))(v36 - 8))(v32, v33);
    *(_BYTE *)(a1 + 344) = (v34 & 1) != 0;
  }
  v38 = (_OWORD *)(a1 + 352);
  v39 = (_OWORD *)(a2 + 352);
  v40 = *(unsigned __int8 *)(a2 + 392);
  if (v40 == 255)
  {
    v41 = *(_OWORD *)(a2 + 368);
    *v38 = *v39;
    *(_OWORD *)(a1 + 368) = v41;
    *(_OWORD *)(a1 + 377) = *(_OWORD *)(a2 + 377);
  }
  else
  {
    v42 = *(_QWORD *)(a2 + 376);
    v43 = *(_QWORD *)(a2 + 384);
    *(_QWORD *)(a1 + 376) = v42;
    *(_QWORD *)(a1 + 384) = v43;
    (**(void (***)(_OWORD *, _OWORD *))(v42 - 8))(v38, v39);
    *(_BYTE *)(a1 + 392) = (v40 & 1) != 0;
  }
  *(_WORD *)(a1 + 393) = *(_WORD *)(a2 + 393);
  v44 = a3[9];
  v45 = a1 + v44;
  v46 = a2 + v44;
  v47 = sub_214423B94();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 16))(v45, v46, v47);
  v48 = (int *)type metadata accessor for ChartEnvironmentValues(0);
  v49 = v48[5];
  v50 = v45 + v49;
  v51 = v46 + v49;
  v52 = sub_214423C54();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 16))(v50, v51, v52);
  v53 = v48[6];
  v54 = v45 + v53;
  v55 = v46 + v53;
  v56 = sub_2144240D4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v56 - 8) + 16))(v54, v55, v56);
  *(_QWORD *)(v45 + v48[7]) = *(_QWORD *)(v46 + v48[7]);
  v57 = v48[8];
  v58 = v45 + v57;
  v59 = v46 + v57;
  v60 = sub_214423F24();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v60 - 8) + 16))(v58, v59, v60);
  *(_BYTE *)(v45 + v48[9]) = *(_BYTE *)(v46 + v48[9]);
  v61 = a3[11];
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  v62 = a1 + v61;
  v63 = a2 + v61;
  *(_BYTE *)(v62 + 8) = *(_BYTE *)(v63 + 8);
  *(_QWORD *)v62 = *(_QWORD *)v63;
  v64 = a3[12];
  v65 = a1 + v64;
  v66 = a2 + v64;
  *(_QWORD *)v65 = *(_QWORD *)v66;
  *(_BYTE *)(v65 + 8) = *(_BYTE *)(v66 + 8);
  return a1;
}

uint64_t sub_2142AE3F0(uint64_t a1, uint64_t a2, int *a3)
{
  _OWORD *v6;
  __int128 *v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  __int128 *v19;
  __int128 *v20;
  int v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  __int128 *v27;
  __int128 *v28;
  int v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  __int128 *v35;
  __int128 *v36;
  int v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  BOOL *v43;
  __int128 *v44;
  __int128 *v45;
  int v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  __int128 *v52;
  __int128 *v53;
  int v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  __int128 *v60;
  __int128 *v61;
  int v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char v92;

  sub_2141DEA14((uint64_t *)a1, (uint64_t *)a2);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = (_OWORD *)(a1 + 56);
  v7 = (__int128 *)(a2 + 56);
  v8 = *(_QWORD *)(a2 + 104);
  if (*(_QWORD *)(a1 + 104) == 1)
  {
    if (v8 == 1)
    {
      v9 = *v7;
      v10 = *(_OWORD *)(a2 + 72);
      v11 = *(_OWORD *)(a2 + 88);
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
      *(_OWORD *)(a1 + 72) = v10;
      *(_OWORD *)(a1 + 88) = v11;
      *v6 = v9;
    }
    else
    {
      *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
      *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
      v15 = *(_OWORD *)(a2 + 64);
      *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
      *(_OWORD *)(a1 + 64) = v15;
      v16 = *(_QWORD *)(a2 + 88);
      *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
      *(_QWORD *)(a1 + 88) = v16;
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
      swift_retain();
    }
  }
  else if (v8 == 1)
  {
    sub_2142AEA58(a1 + 56);
    v13 = *(_OWORD *)(a2 + 72);
    v12 = *(_OWORD *)(a2 + 88);
    v14 = *v7;
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 72) = v13;
    *(_OWORD *)(a1 + 88) = v12;
    *v6 = v14;
  }
  else
  {
    *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
    *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
    v17 = *(_OWORD *)(a2 + 64);
    *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = v17;
    v18 = *(_QWORD *)(a2 + 88);
    *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
    *(_QWORD *)(a1 + 88) = v18;
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    swift_retain();
    swift_release();
  }
  v19 = (__int128 *)(a1 + 112);
  v20 = (__int128 *)(a2 + 112);
  v21 = *(unsigned __int8 *)(a2 + 152);
  if (*(unsigned __int8 *)(a1 + 152) == 255)
  {
    if (v21 == 255)
    {
      v24 = *v20;
      v25 = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 137) = *(_OWORD *)(a2 + 137);
      *v19 = v24;
      *(_OWORD *)(a1 + 128) = v25;
      goto LABEL_18;
    }
    goto LABEL_15;
  }
  if (v21 == 255)
  {
    sub_2141E61B0(a1 + 112);
    v22 = *(_OWORD *)(a2 + 137);
    v23 = *(_OWORD *)(a2 + 128);
    *v19 = *v20;
    *(_OWORD *)(a1 + 128) = v23;
    *(_OWORD *)(a1 + 137) = v22;
    goto LABEL_18;
  }
  if (a1 != a2)
  {
    sub_2141E61B0(a1 + 112);
    LOBYTE(v21) = *(_BYTE *)(a2 + 152);
LABEL_15:
    v26 = *(_QWORD *)(a2 + 136);
    *(_QWORD *)(a1 + 136) = v26;
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
    (**(void (***)(uint64_t, uint64_t))(v26 - 8))(a1 + 112, a2 + 112);
    *(_BYTE *)(a1 + 152) = (v21 & 1) != 0;
  }
LABEL_18:
  v27 = (__int128 *)(a1 + 160);
  v28 = (__int128 *)(a2 + 160);
  v29 = *(unsigned __int8 *)(a2 + 200);
  if (*(unsigned __int8 *)(a1 + 200) == 255)
  {
    if (v29 == 255)
    {
      v32 = *v28;
      v33 = *(_OWORD *)(a2 + 176);
      *(_OWORD *)(a1 + 185) = *(_OWORD *)(a2 + 185);
      *v27 = v32;
      *(_OWORD *)(a1 + 176) = v33;
      goto LABEL_28;
    }
    goto LABEL_25;
  }
  if (v29 == 255)
  {
    sub_2141E625C(a1 + 160);
    v30 = *(_OWORD *)(a2 + 185);
    v31 = *(_OWORD *)(a2 + 176);
    *v27 = *v28;
    *(_OWORD *)(a1 + 176) = v31;
    *(_OWORD *)(a1 + 185) = v30;
    goto LABEL_28;
  }
  if (a1 != a2)
  {
    sub_2141E625C(a1 + 160);
    LOBYTE(v29) = *(_BYTE *)(a2 + 200);
LABEL_25:
    v34 = *(_QWORD *)(a2 + 184);
    *(_QWORD *)(a1 + 184) = v34;
    *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
    (**(void (***)(uint64_t, uint64_t))(v34 - 8))(a1 + 160, a2 + 160);
    *(_BYTE *)(a1 + 200) = (v29 & 1) != 0;
  }
LABEL_28:
  v35 = (__int128 *)(a1 + 208);
  v36 = (__int128 *)(a2 + 208);
  v37 = *(unsigned __int8 *)(a2 + 248);
  if (*(unsigned __int8 *)(a1 + 248) == 255)
  {
    if (v37 == 255)
    {
      v40 = *v36;
      v41 = *(_OWORD *)(a2 + 224);
      *(_OWORD *)(a1 + 233) = *(_OWORD *)(a2 + 233);
      *v35 = v40;
      *(_OWORD *)(a1 + 224) = v41;
      goto LABEL_38;
    }
    goto LABEL_35;
  }
  if (v37 == 255)
  {
    sub_2141E61B0(a1 + 208);
    v38 = *(_OWORD *)(a2 + 233);
    v39 = *(_OWORD *)(a2 + 224);
    *v35 = *v36;
    *(_OWORD *)(a1 + 224) = v39;
    *(_OWORD *)(a1 + 233) = v38;
    goto LABEL_38;
  }
  if (a1 != a2)
  {
    sub_2141E61B0(a1 + 208);
    LOBYTE(v37) = *(_BYTE *)(a2 + 248);
LABEL_35:
    v42 = *(_QWORD *)(a2 + 232);
    *(_QWORD *)(a1 + 232) = v42;
    *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
    (**(void (***)(uint64_t, uint64_t))(v42 - 8))(a1 + 208, a2 + 208);
    *(_BYTE *)(a1 + 248) = (v37 & 1) != 0;
  }
LABEL_38:
  v43 = (BOOL *)(a1 + 296);
  v44 = (__int128 *)(a1 + 256);
  v45 = (__int128 *)(a2 + 256);
  v46 = *(unsigned __int8 *)(a2 + 296);
  if (*(unsigned __int8 *)(a1 + 296) == 255)
  {
    if (v46 == 255)
    {
      v49 = *v45;
      v50 = *(_OWORD *)(a2 + 272);
      *(_OWORD *)(a1 + 281) = *(_OWORD *)(a2 + 281);
      *v44 = v49;
      *(_OWORD *)(a1 + 272) = v50;
      goto LABEL_48;
    }
    goto LABEL_45;
  }
  if (v46 == 255)
  {
    sub_2141E625C(a1 + 256);
    v47 = *(_OWORD *)(a2 + 281);
    v48 = *(_OWORD *)(a2 + 272);
    *v44 = *v45;
    *(_OWORD *)(a1 + 272) = v48;
    *(_OWORD *)(a1 + 281) = v47;
    goto LABEL_48;
  }
  if (a1 != a2)
  {
    sub_2141E625C(a1 + 256);
    LOBYTE(v46) = *(_BYTE *)(a2 + 296);
LABEL_45:
    v51 = *(_QWORD *)(a2 + 280);
    *(_QWORD *)(a1 + 280) = v51;
    *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
    (**(void (***)(uint64_t, uint64_t))(v51 - 8))(a1 + 256, a2 + 256);
    *v43 = (v46 & 1) != 0;
  }
LABEL_48:
  v52 = (__int128 *)(a1 + 304);
  v53 = (__int128 *)(a2 + 304);
  v54 = *(unsigned __int8 *)(a2 + 344);
  if (*(unsigned __int8 *)(a1 + 344) == 255)
  {
    if (v54 == 255)
    {
      v57 = *v53;
      v58 = *(_OWORD *)(a2 + 320);
      *(_OWORD *)(a1 + 329) = *(_OWORD *)(a2 + 329);
      *v52 = v57;
      *(_OWORD *)(a1 + 320) = v58;
      goto LABEL_58;
    }
    goto LABEL_55;
  }
  if (v54 == 255)
  {
    sub_2141E61B0(a1 + 304);
    v55 = *(_OWORD *)(a2 + 329);
    v56 = *(_OWORD *)(a2 + 320);
    *v52 = *v53;
    *(_OWORD *)(a1 + 320) = v56;
    *(_OWORD *)(a1 + 329) = v55;
    goto LABEL_58;
  }
  if (a1 != a2)
  {
    sub_2141E61B0(a1 + 304);
    LOBYTE(v54) = *(_BYTE *)(a2 + 344);
LABEL_55:
    v59 = *(_QWORD *)(a2 + 328);
    *(_QWORD *)(a1 + 328) = v59;
    *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
    (**(void (***)(uint64_t, uint64_t))(v59 - 8))(a1 + 304, a2 + 304);
    *(_BYTE *)(a1 + 344) = (v54 & 1) != 0;
  }
LABEL_58:
  v60 = (__int128 *)(a1 + 352);
  v61 = (__int128 *)(a2 + 352);
  v62 = *(unsigned __int8 *)(a2 + 392);
  if (*(unsigned __int8 *)(a1 + 392) == 255)
  {
    if (v62 == 255)
    {
      v65 = *v61;
      v66 = *(_OWORD *)(a2 + 368);
      *(_OWORD *)(a1 + 377) = *(_OWORD *)(a2 + 377);
      *v60 = v65;
      *(_OWORD *)(a1 + 368) = v66;
      goto LABEL_68;
    }
  }
  else
  {
    if (v62 == 255)
    {
      sub_2141E625C(a1 + 352);
      v63 = *(_OWORD *)(a2 + 377);
      v64 = *(_OWORD *)(a2 + 368);
      *v60 = *v61;
      *(_OWORD *)(a1 + 368) = v64;
      *(_OWORD *)(a1 + 377) = v63;
      goto LABEL_68;
    }
    if (a1 == a2)
      goto LABEL_68;
    sub_2141E625C(a1 + 352);
    LOBYTE(v62) = *(_BYTE *)(a2 + 392);
  }
  v67 = *(_QWORD *)(a2 + 376);
  *(_QWORD *)(a1 + 376) = v67;
  *(_QWORD *)(a1 + 384) = *(_QWORD *)(a2 + 384);
  (**(void (***)(uint64_t, uint64_t))(v67 - 8))(a1 + 352, a2 + 352);
  *(_BYTE *)(a1 + 392) = (v62 & 1) != 0;
LABEL_68:
  *(_BYTE *)(a1 + 393) = *(_BYTE *)(a2 + 393);
  *(_BYTE *)(a1 + 394) = *(_BYTE *)(a2 + 394);
  v68 = a3[9];
  v69 = a1 + v68;
  v70 = a2 + v68;
  v71 = sub_214423B94();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v71 - 8) + 24))(v69, v70, v71);
  v72 = (int *)type metadata accessor for ChartEnvironmentValues(0);
  v73 = v72[5];
  v74 = v69 + v73;
  v75 = v70 + v73;
  v76 = sub_214423C54();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v76 - 8) + 24))(v74, v75, v76);
  v77 = v72[6];
  v78 = v69 + v77;
  v79 = v70 + v77;
  v80 = sub_2144240D4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v80 - 8) + 24))(v78, v79, v80);
  *(_QWORD *)(v69 + v72[7]) = *(_QWORD *)(v70 + v72[7]);
  v81 = v72[8];
  v82 = v69 + v81;
  v83 = v70 + v81;
  v84 = sub_214423F24();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v84 - 8) + 24))(v82, v83, v84);
  *(_BYTE *)(v69 + v72[9]) = *(_BYTE *)(v70 + v72[9]);
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  v85 = a3[11];
  v86 = a1 + v85;
  v87 = a2 + v85;
  v88 = *(_BYTE *)(v87 + 8);
  *(_QWORD *)v86 = *(_QWORD *)v87;
  *(_BYTE *)(v86 + 8) = v88;
  v89 = a3[12];
  v90 = a1 + v89;
  v91 = a2 + v89;
  v92 = *(_BYTE *)(v91 + 8);
  *(_QWORD *)v90 = *(_QWORD *)v91;
  *(_BYTE *)(v90 + 8) = v92;
  return a1;
}

uint64_t sub_2142AEA58(uint64_t a1)
{
  destroy for ChartLegendConfiguration();
  return a1;
}

uint64_t sub_2142AEA8C(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  v7 = *(_OWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = v7;
  memcpy((void *)(a1 + 112), (const void *)(a2 + 112), 0x11BuLL);
  v8 = a3[9];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = sub_214423B94();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
  v12 = (int *)type metadata accessor for ChartEnvironmentValues(0);
  v13 = v12[5];
  v14 = v9 + v13;
  v15 = v10 + v13;
  v16 = sub_214423C54();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v14, v15, v16);
  v17 = v12[6];
  v18 = v9 + v17;
  v19 = v10 + v17;
  v20 = sub_2144240D4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v18, v19, v20);
  *(_QWORD *)(v9 + v12[7]) = *(_QWORD *)(v10 + v12[7]);
  v21 = v12[8];
  v22 = v9 + v21;
  v23 = v10 + v21;
  v24 = sub_214423F24();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 32))(v22, v23, v24);
  *(_BYTE *)(v9 + v12[9]) = *(_BYTE *)(v10 + v12[9]);
  v25 = a3[11];
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  v26 = a1 + v25;
  v27 = a2 + v25;
  *(_BYTE *)(v26 + 8) = *(_BYTE *)(v27 + 8);
  *(_QWORD *)v26 = *(_QWORD *)v27;
  v28 = a3[12];
  v29 = a1 + v28;
  v30 = a2 + v28;
  *(_QWORD *)v29 = *(_QWORD *)v30;
  *(_BYTE *)(v29 + 8) = *(_BYTE *)(v30 + 8);
  return a1;
}

uint64_t sub_2142AEC28(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  _s6Charts15AnyChartContentVwxx_0(a1);
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  v7 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v7;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 104) == 1)
    goto LABEL_4;
  v8 = *(_QWORD *)(a2 + 104);
  if (v8 == 1)
  {
    sub_2142AEA58(a1 + 56);
LABEL_4:
    v9 = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = v9;
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    goto LABEL_6;
  }
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v8;
  swift_release();
LABEL_6:
  if (*(unsigned __int8 *)(a1 + 152) == 255)
  {
LABEL_10:
    v10 = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 128) = v10;
    *(_OWORD *)(a1 + 137) = *(_OWORD *)(a2 + 137);
    goto LABEL_11;
  }
  if (*(unsigned __int8 *)(a2 + 152) == 255 || a1 != a2)
  {
    sub_2141E61B0(a1 + 112);
    goto LABEL_10;
  }
LABEL_11:
  if (*(unsigned __int8 *)(a1 + 200) == 255)
  {
LABEL_15:
    v11 = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 176) = v11;
    *(_OWORD *)(a1 + 185) = *(_OWORD *)(a2 + 185);
    goto LABEL_16;
  }
  if (*(unsigned __int8 *)(a2 + 200) == 255 || a1 != a2)
  {
    sub_2141E625C(a1 + 160);
    goto LABEL_15;
  }
LABEL_16:
  if (*(unsigned __int8 *)(a1 + 248) == 255)
  {
LABEL_20:
    v12 = *(_OWORD *)(a2 + 224);
    *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
    *(_OWORD *)(a1 + 224) = v12;
    *(_OWORD *)(a1 + 233) = *(_OWORD *)(a2 + 233);
    goto LABEL_21;
  }
  if (*(unsigned __int8 *)(a2 + 248) == 255 || a1 != a2)
  {
    sub_2141E61B0(a1 + 208);
    goto LABEL_20;
  }
LABEL_21:
  if (*(unsigned __int8 *)(a1 + 296) == 255)
  {
LABEL_25:
    v13 = *(_OWORD *)(a2 + 272);
    *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
    *(_OWORD *)(a1 + 272) = v13;
    *(_OWORD *)(a1 + 281) = *(_OWORD *)(a2 + 281);
    goto LABEL_26;
  }
  if (*(unsigned __int8 *)(a2 + 296) == 255 || a1 != a2)
  {
    sub_2141E625C(a1 + 256);
    goto LABEL_25;
  }
LABEL_26:
  if (*(unsigned __int8 *)(a1 + 344) == 255)
  {
LABEL_30:
    v14 = *(_OWORD *)(a2 + 320);
    *(_OWORD *)(a1 + 304) = *(_OWORD *)(a2 + 304);
    *(_OWORD *)(a1 + 320) = v14;
    *(_OWORD *)(a1 + 329) = *(_OWORD *)(a2 + 329);
    goto LABEL_31;
  }
  if (*(unsigned __int8 *)(a2 + 344) == 255 || a1 != a2)
  {
    sub_2141E61B0(a1 + 304);
    goto LABEL_30;
  }
LABEL_31:
  if (*(unsigned __int8 *)(a1 + 392) == 255)
  {
LABEL_35:
    v15 = *(_OWORD *)(a2 + 368);
    *(_OWORD *)(a1 + 352) = *(_OWORD *)(a2 + 352);
    *(_OWORD *)(a1 + 368) = v15;
    *(_OWORD *)(a1 + 377) = *(_OWORD *)(a2 + 377);
    goto LABEL_36;
  }
  if (*(unsigned __int8 *)(a2 + 392) == 255 || a1 != a2)
  {
    sub_2141E625C(a1 + 352);
    goto LABEL_35;
  }
LABEL_36:
  *(_BYTE *)(a1 + 393) = *(_BYTE *)(a2 + 393);
  *(_BYTE *)(a1 + 394) = *(_BYTE *)(a2 + 394);
  v16 = a3[9];
  v17 = a1 + v16;
  v18 = a2 + v16;
  v19 = sub_214423B94();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 40))(v17, v18, v19);
  v20 = (int *)type metadata accessor for ChartEnvironmentValues(0);
  v21 = v20[5];
  v22 = v17 + v21;
  v23 = v18 + v21;
  v24 = sub_214423C54();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 40))(v22, v23, v24);
  v25 = v20[6];
  v26 = v17 + v25;
  v27 = v18 + v25;
  v28 = sub_2144240D4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 40))(v26, v27, v28);
  *(_QWORD *)(v17 + v20[7]) = *(_QWORD *)(v18 + v20[7]);
  v29 = v20[8];
  v30 = v17 + v29;
  v31 = v18 + v29;
  v32 = sub_214423F24();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 40))(v30, v31, v32);
  *(_BYTE *)(v17 + v20[9]) = *(_BYTE *)(v18 + v20[9]);
  v33 = a3[11];
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  v34 = a1 + v33;
  v35 = a2 + v33;
  *(_BYTE *)(v34 + 8) = *(_BYTE *)(v35 + 8);
  *(_QWORD *)v34 = *(_QWORD *)v35;
  v36 = a3[12];
  v37 = a1 + v36;
  v38 = a2 + v36;
  *(_QWORD *)v37 = *(_QWORD *)v38;
  *(_BYTE *)(v37 + 8) = *(_BYTE *)(v38 + 8);
  return a1;
}

uint64_t sub_2142AEFB0()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2142AEFBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for ChartEnvironmentValues(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 36), a2, v8);
  }
}

uint64_t sub_2142AF038()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_2142AF044(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 24) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for ChartEnvironmentValues(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 36), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for ChartInternal()
{
  uint64_t result;

  result = qword_253F14508;
  if (!qword_253F14508)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_2142AF0F4()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for ChartEnvironmentValues(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for ChartInternal.ScaleType()
{
  return &type metadata for ChartInternal.ScaleType;
}

uint64_t sub_2142AF1B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t result;
  uint64_t v16;

  v8 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a2);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = sub_2144250AC();
  v12 = sub_214400830(v11, AssociatedTypeWitness, a3);
  v14 = v13;
  swift_bridgeObjectRelease();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(a1, a2);
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)a4 = v12;
  *(_BYTE *)(a4 + 24) = 0;
  *(_BYTE *)(a4 + 25) = v14;
  return result;
}

uint64_t (*sub_2142AF2B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6))(uint64_t a1, uint64_t a2, int a3)
{
  _QWORD *v12;

  v12 = (_QWORD *)swift_allocObject();
  v12[2] = a3;
  v12[3] = a4;
  v12[4] = a5;
  v12[5] = a6;
  v12[6] = a1;
  v12[7] = a2;
  return sub_2142B0BEC;
}

uint64_t (*sub_2142AF320(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6))@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _QWORD *v12;

  v12 = (_QWORD *)swift_allocObject();
  v12[2] = a3;
  v12[3] = a4;
  v12[4] = a5;
  v12[5] = a6;
  v12[6] = a1;
  v12[7] = a2;
  return sub_2142B0B30;
}

uint64_t (*sub_2142AF390(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4))@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _QWORD *v8;

  v8 = (_QWORD *)swift_allocObject();
  v8[2] = a3;
  v8[3] = a4;
  v8[4] = a1;
  v8[5] = a2;
  return sub_2142B0AAC;
}

double (*sub_2142AF3EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t a1, uint64_t a2, int a3)
{
  _QWORD *v8;

  v8 = (_QWORD *)swift_allocObject();
  v8[2] = a3;
  v8[3] = a4;
  v8[4] = a1;
  v8[5] = a2;
  return sub_2142B0A68;
}

uint64_t sub_2142AF448(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  _BYTE v23[16];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v21 = a4;
  v22 = a5;
  v15 = sub_214425388();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v21 - v17;
  sub_2141DD14C(a1, a2, a3);
  sub_2143F9FE4(a1, a2, a3, a6, a8, (uint64_t)v18);
  v24 = a6;
  v25 = a7;
  v26 = a8;
  v27 = a9;
  v28 = v21;
  v29 = v22;
  sub_21440557C((void (*)(char *, char *))sub_2142B0C18, (uint64_t)v23, MEMORY[0x24BEE4078], MEMORY[0x24BDEBF80], v19, (uint64_t)&v31);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  result = v31;
  if (!v31)
  {
    v30 = sub_2144249A4();
    return sub_214423E10();
  }
  return result;
}

uint64_t sub_2142AF590@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  void (*v4)(uint64_t);
  uint64_t result;

  v3 = MEMORY[0x24BDAC7A8](a1);
  v4(v3);
  result = sub_214423E10();
  *a2 = result;
  return result;
}

uint64_t sub_2142AF61C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE v29[16];
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE v34[8];
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v28 = a5;
  v15 = sub_214425388();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v27 - v17;
  sub_2141DD14C(a1, a2, a3);
  sub_2143F9FE4(a1, a2, a3, a6, a7, (uint64_t)v18);
  v30 = a6;
  v31 = a7;
  v32 = a4;
  v33 = v28;
  sub_21440557C((void (*)(char *, char *))sub_2142B0AB8, (uint64_t)v29, MEMORY[0x24BEE4078], MEMORY[0x24BDEB7D0], v19, (uint64_t)v34);
  result = (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  v21 = v38;
  if (v38)
  {
    v22 = v39;
    v23 = v37;
    v24 = v34;
    v25 = v35;
    v26 = v36;
  }
  else
  {
    v24 = &v40;
    result = sub_214423D80();
    v25 = v41;
    v26 = v42;
    v23 = v43;
    v21 = v44;
    v22 = v45;
  }
  *(_QWORD *)a8 = *(_QWORD *)v24;
  *(_DWORD *)(a8 + 8) = v25;
  *(_DWORD *)(a8 + 12) = v26;
  *(_QWORD *)(a8 + 16) = v23;
  *(_QWORD *)(a8 + 24) = v21;
  *(_QWORD *)(a8 + 32) = v22;
  return result;
}

uint64_t sub_2142AF7A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t result;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE v27[16];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;

  v24 = a7;
  v25 = a4;
  v26 = a5;
  v16 = sub_214425388();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v23 - v18;
  sub_2141DD14C(a1, a2, a3);
  sub_2143F9FE4(a1, a2, a3, a6, a8, (uint64_t)v19);
  v28 = a6;
  v29 = v24;
  v30 = a8;
  v31 = a10;
  v32 = v25;
  v33 = v26;
  sub_21440557C((void (*)(char *, char *))sub_2142B0B5C, (uint64_t)v27, MEMORY[0x24BEE4078], (uint64_t)&type metadata for AnyChartSymbolShape, v20, (uint64_t)&v34);
  result = (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v19, v16);
  if (*((_QWORD *)&v35 + 1))
  {
    v22 = v35;
    *(_OWORD *)a9 = v34;
    *(_OWORD *)(a9 + 16) = v22;
    *(_QWORD *)(a9 + 32) = v36;
  }
  else
  {
    if (qword_253F10D60 != -1)
      swift_once();
    sub_2141F9E40((uint64_t)&qword_253F1C950, a9);
    return sub_2142B0BAC((uint64_t)&v34);
  }
  return result;
}

double sub_2142AF928(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  double result;
  _BYTE v20[16];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  char v26;

  v14 = sub_214425388();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v17 = &v20[-v16];
  sub_2141DD14C(a1, a2, a3);
  sub_2143F9FE4(a1, a2, a3, a6, a7, (uint64_t)v17);
  v21 = a6;
  v22 = a7;
  v23 = a4;
  v24 = a5;
  sub_21440557C((void (*)(char *, char *))sub_2142B0A74, (uint64_t)v20, MEMORY[0x24BEE4078], MEMORY[0x24BEE50B0], v18, (uint64_t)&v25);
  (*(void (**)(_BYTE *, uint64_t))(v15 + 8))(v17, v14);
  result = v25;
  if (v26)
    return 0.0;
  return result;
}

uint64_t sub_2142AFA4C@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(_QWORD, _QWORD, _QWORD)@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;

  result = a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(unsigned __int8 *)(a1 + 16));
  *a3 = result;
  return result;
}

double sub_2142AFA84@<D0>(uint64_t a1@<X0>, void (*a2)(_OWORD *__return_ptr, _QWORD, _QWORD, _QWORD)@<X1>, uint64_t a3@<X8>)
{
  double result;
  __int128 v5;
  _OWORD v6[2];
  uint64_t v7;

  a2(v6, *(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(unsigned __int8 *)(a1 + 16));
  result = *(double *)v6;
  v5 = v6[1];
  *(_OWORD *)a3 = v6[0];
  *(_OWORD *)(a3 + 16) = v5;
  *(_QWORD *)(a3 + 32) = v7;
  return result;
}

uint64_t sub_2142AFAD8(uint64_t a1, uint64_t (*a2)(_QWORD, _QWORD, _QWORD))
{
  return a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(unsigned __int8 *)(a1 + 16));
}

void sub_2142AFB08(uint64_t a1@<X0>, double (*a2)(_QWORD, _QWORD, _QWORD)@<X1>, double *a3@<X8>)
{
  *a3 = a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(unsigned __int8 *)(a1 + 16));
}

uint64_t sub_2142AFB40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2142AFB5C(a1, a2, a3, a4, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2142AFB98);
}

uint64_t sub_2142AFB50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2142AFB5C(a1, a2, a3, a4, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2142AFE88);
}

uint64_t sub_2142AFB5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  return a5(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(unsigned __int8 *)(a1 + 16), *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(unsigned __int8 *)(a2 + 16));
}

uint64_t sub_2142AFB7C(uint64_t a1, uint64_t a2)
{
  return sub_2142B0954(*(_QWORD *)a1, *(_BYTE *)(a1 + 8), *(_QWORD *)a2, *(_BYTE *)(a2 + 8));
}

void sub_2142AFB98(uint64_t a1, uint64_t a2, char a3)
{
  __asm { BR              X10 }
}

uint64_t sub_2142AFBF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (a6)
    return 0;
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = v9;
  *(_QWORD *)(v10 + 24) = v8;
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = v7;
  *(_QWORD *)(v11 + 24) = v6;
  sub_2141D8BF8(&qword_254D6A530);
  sub_2141D840C(v9, v8, 0);
  sub_2141D840C(v7, v6, 0);
  v12 = AGCompareValues();
  swift_release();
  swift_release();
  return v12;
}

void sub_2142AFE88(uint64_t a1, uint64_t a2, char a3)
{
  __asm { BR              X10 }
}

BOOL sub_2142AFEE8()
{
  double v0;
  double v1;
  unsigned __int8 v2;
  double v3;
  double v4;
  _BOOL4 v5;

  v5 = v3 == v4;
  if (v0 != v1)
    v5 = 0;
  return v2 < 0x20u && v5;
}

void sub_2142B014C(uint64_t a1)
{
  __asm { BR              X9 }
}

BOOL sub_2142B01B4()
{
  unsigned __int8 v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  int v9;
  BOOL v10;

  if (v9)
  {
    sub_2141D7C08(v3, v2, v1, v0, v9);
    sub_2141D7C08(v7, v6, v5, v4, v8);
    sub_2141D77B4(v7, v6, v5, v4, v8);
    sub_2141D77B4(v3, v2, v1, v0, v9);
    return 0;
  }
  else
  {
    v10 = sub_21420ED58(v7, v3);
    sub_2141D7C08(v3, v2, v1, v0, 0);
    sub_2141D7C08(v7, v6, v5, v4, 0);
    sub_2141D77B4(v7, v6, v5, v4, 0);
    sub_2141D77B4(v3, v2, v1, v0, 0);
    return v10;
  }
}

uint64_t sub_2142B04EC(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  double v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int16 v37;

  v2 = *(unsigned __int8 *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(unsigned __int16 *)(a1 + 40);
  v7 = *(_QWORD *)(a1 + 48);
  v8 = *(_QWORD *)(a1 + 56);
  v9 = *(unsigned __int8 *)(a1 + 64);
  v10 = *(unsigned __int8 *)(a2 + 8);
  v12 = *(_QWORD *)(a2 + 16);
  v11 = *(_QWORD *)(a2 + 24);
  v13 = *(_QWORD *)(a2 + 32);
  v14 = *(unsigned __int16 *)(a2 + 40);
  v16 = *(_QWORD *)(a2 + 48);
  v15 = *(_QWORD *)(a2 + 56);
  v17 = *(unsigned __int8 *)(a2 + 64);
  if (v2 == 255)
  {
    if (v10 != 255)
      return 0;
    goto LABEL_11;
  }
  if (v10 == 255)
    return 0;
  v18 = *(double *)a1;
  if (!*(_BYTE *)(a1 + 8))
  {
    result = 0;
    if (*(_BYTE *)(a2 + 8))
      return result;
LABEL_10:
    if (v18 != *(double *)a2)
      return result;
LABEL_11:
    if (v6 >> 8 > 0xFE)
    {
      if (v14 >> 8 > 0xFE)
      {
LABEL_18:
        if (v9 <= 0xFB)
        {
          if (v17 > 0xFB)
            return 0;
          v25 = v9;
          v26 = v7;
          v27 = v8;
          v28 = v16;
          v29 = v15;
          sub_2141D8CFC(v16, v15, v17);
          sub_2141D8CFC(v26, v27, v25);
          sub_2142AFE88(v26, v27, v25);
          v31 = v30;
          sub_2141D774C(v28, v29, v17);
          sub_2141D774C(v26, v27, v25);
          if ((v31 & 1) == 0)
            return 0;
        }
        else if (v17 <= 0xFB)
        {
          return 0;
        }
        return 1;
      }
      goto LABEL_16;
    }
    v34 = v4;
    v35 = v3;
    v36 = v5;
    v37 = v6;
    if (v14 >> 8 > 0xFE)
    {
      sub_2141D7C08(v4, v3, v5, v6, SBYTE1(v6));
      sub_2141D7C08(v4, v3, v5, v6, SBYTE1(v6));
      sub_2141D77B4(v4, v3, v5, v6, SBYTE1(v6));
LABEL_16:
      sub_2141D8CE8(v12, v11, v13, v14);
      sub_2141D7864(v4, v3, v5, v6);
      sub_2141D7864(v12, v11, v13, v14);
      return 0;
    }
    v33 = v9;
    v32 = v16;
    v20 = v7;
    v21 = v8;
    v22 = v15;
    sub_2141D8CE8(v4, v3, v5, v6);
    sub_2141D7C08(v4, v3, v5, v6, SBYTE1(v6));
    sub_2142B014C((uint64_t)&v34);
    v24 = v23;
    sub_2141D77B4(v34, v35, v36, v37, SHIBYTE(v37));
    sub_2141D7864(v4, v3, v5, v6);
    v15 = v22;
    v16 = v32;
    v9 = v33;
    v8 = v21;
    v7 = v20;
    if ((v24 & 1) != 0)
      goto LABEL_18;
    return 0;
  }
  if (v2 != 1)
    __asm { BR              X12 }
  result = 0;
  if (v10 == 1)
    goto LABEL_10;
  return result;
}

uint64_t sub_2142B083C()
{
  swift_release();
  return swift_deallocObject();
}

void sub_2142B0864(uint64_t a1@<X0>, double *a2@<X8>)
{
  uint64_t v2;

  *a2 = (*(double (**)(_QWORD, _QWORD, _QWORD))(v2 + 16))(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(unsigned __int8 *)(a1 + 16));
}

uint64_t sub_2142B089C(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v1 + 16))(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(unsigned __int8 *)(a1 + 16));
}

double sub_2142B08CC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  uint64_t v7;

  (*(void (**)(_OWORD *__return_ptr, _QWORD, _QWORD, _QWORD))(v2 + 16))(v6, *(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(unsigned __int8 *)(a1 + 16));
  result = *(double *)v6;
  v5 = v6[1];
  *(_OWORD *)a2 = v6[0];
  *(_OWORD *)(a2 + 16) = v5;
  *(_QWORD *)(a2 + 32) = v7;
  return result;
}

uint64_t sub_2142B0920@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v2 + 16))(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(unsigned __int8 *)(a1 + 16));
  *a2 = result;
  return result;
}

uint64_t sub_2142B0954(uint64_t a1, char a2, uint64_t a3, char a4)
{
  double v4;
  double v5;

  if (!a2)
  {
    if (!a4)
    {
      v4 = *(double *)&a1;
      v5 = *(double *)&a3;
      return v4 == v5;
    }
    return 0;
  }
  if (a2 != 1)
    return ((uint64_t (*)(void))((char *)&loc_2142B09A4 + 4 * byte_21442A3FB[a1]))();
  if (a4 != 1)
    return 0;
  v4 = *(double *)&a1;
  v5 = *(double *)&a3;
  return v4 == v5;
}

uint64_t sub_2142B0A44()
{
  swift_release();
  return swift_deallocObject();
}

double sub_2142B0A68(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t *v3;

  return sub_2142AF928(a1, a2, a3, v3[4], v3[5], v3[2], v3[3]);
}

void sub_2142B0A74(double *a1@<X8>)
{
  uint64_t v1;

  *a1 = (*(double (**)(void))(v1 + 32))();
}

uint64_t sub_2142B0AAC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t *v4;

  return sub_2142AF61C(a1, a2, a3, v4[4], v4[5], v4[2], v4[3], a4);
}

double sub_2142B0AB8@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  double result;
  __int128 v4;
  _OWORD v5[2];
  uint64_t v6;

  (*(void (**)(_OWORD *__return_ptr))(v1 + 32))(v5);
  result = *(double *)v5;
  v4 = v5[1];
  *(_OWORD *)a1 = v5[0];
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = v6;
  return result;
}

uint64_t sub_2142B0B0C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2142B0B30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t *v4;

  return sub_2142AF7A0(a1, a2, a3, v4[6], v4[7], v4[2], v4[3], v4[4], a4, v4[5]);
}

uint64_t sub_2142B0B5C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);

  v4 = v2[5];
  v5 = (uint64_t (*)(uint64_t))v2[6];
  a2[3] = v2[3];
  a2[4] = v4;
  sub_2141D8DD8(a2);
  return v5(a1);
}

uint64_t sub_2142B0BAC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_2141D8BF8((uint64_t *)&unk_253F0FF58);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_2142B0BEC(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t *v3;

  return sub_2142AF448(a1, a2, a3, v3[6], v3[7], v3[2], v3[3], v3[4], v3[5]);
}

uint64_t sub_2142B0C18@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_2142AF590(a1, a2);
}

uint64_t initializeBufferWithCopyOfBuffer for ChartInternalScaleMapping(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return sub_2142B0C58(a1, a2, a3, (void (*)(_QWORD, uint64_t, uint64_t))sub_2141D840C);
}

uint64_t destroy for ChartInternalScaleMapping(uint64_t a1)
{
  return sub_2141D779C(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t sub_2142B0C58(uint64_t a1, uint64_t *a2, uint64_t a3, void (*a4)(_QWORD, uint64_t, uint64_t))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *a2;
  v6 = a2[1];
  v7 = *((unsigned __int8 *)a2 + 16);
  a4(*a2, v6, v7);
  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = v7;
  return a1;
}

uint64_t *assignWithCopy for ChartInternalScaleMapping(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_2142B0CB4(a1, a2, a3, (void (*)(_QWORD, uint64_t, uint64_t))sub_2141D840C, (void (*)(uint64_t, uint64_t, uint64_t))sub_2141D779C);
}

uint64_t *sub_2142B0CB4(uint64_t *a1, uint64_t *a2, uint64_t a3, void (*a4)(_QWORD, uint64_t, uint64_t), void (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v7 = *a2;
  v8 = a2[1];
  v9 = *((unsigned __int8 *)a2 + 16);
  a4(*a2, v8, v9);
  v10 = *a1;
  v11 = a1[1];
  *a1 = v7;
  a1[1] = v8;
  v12 = *((unsigned __int8 *)a1 + 16);
  *((_BYTE *)a1 + 16) = v9;
  a5(v10, v11, v12);
  return a1;
}

uint64_t *assignWithTake for ChartInternalScaleMapping(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return sub_2142B0D20(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))sub_2141D779C);
}

uint64_t *sub_2142B0D20(uint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t))
{
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_BYTE *)(a2 + 16);
  v6 = *a1;
  v7 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v8 = *((unsigned __int8 *)a1 + 16);
  *((_BYTE *)a1 + 16) = v5;
  a4(v6, v7, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for ChartInternalScaleMapping(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 253);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 3)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ChartInternalScaleMapping(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 253;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ChartInternalScaleMapping()
{
  return &type metadata for ChartInternalScaleMapping;
}

uint64_t static MarkStackingMethod.standard.getter()
{
  return 0;
}

uint64_t static MarkDimension.automatic.getter()
{
  return 0;
}

uint64_t MarkStackingMethod.Storage.hash(into:)()
{
  return sub_214425880();
}

uint64_t static MarkStackingMethod.unstacked.getter()
{
  return 3;
}

BOOL static MarkStackingMethod.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

uint64_t static InterpolationMethod.linear.getter()
{
  return 0;
}

double static MarkDimensions.automatic.getter@<D0>(uint64_t a1@<X8>)
{
  double result;
  uint64_t v3;
  char v4;

  sub_214252B14();
  *(_BYTE *)a1 = 3;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_QWORD *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 96) = -1;
  *(_QWORD *)(a1 + 104) = v3;
  *(_BYTE *)(a1 + 112) = v4 & 1;
  return result;
}

BOOL static MarkStackingMethod.Storage.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

uint64_t MarkStackingMethod.Storage.hashValue.getter()
{
  sub_214425874();
  sub_214425880();
  return sub_2144258B0();
}

uint64_t static MarkStackingMethod.normalized.getter()
{
  return 1;
}

uint64_t static MarkStackingMethod.center.getter()
{
  return 2;
}

uint64_t MarkStackingMethod.description.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_2142B0FA0 + 4 * byte_21442A5B0[a1]))(0x647261646E617473, 0xE800000000000000);
}

uint64_t sub_2142B0FA0()
{
  return 0x7A696C616D726F6ELL;
}

uint64_t sub_2142B0FBC()
{
  return 0x7265746E6563;
}

uint64_t sub_2142B0FD0()
{
  return 0x656B636174736E75;
}

uint64_t sub_2142B0FEC()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_2142B101C + 4 * byte_21442A5B4[*v0]))(0x647261646E617473, 0xE800000000000000);
}

uint64_t sub_2142B101C()
{
  return 0x7A696C616D726F6ELL;
}

uint64_t sub_2142B1038()
{
  return 0x7265746E6563;
}

uint64_t sub_2142B104C()
{
  return 0x656B636174736E75;
}

double MarkDimension.init(integerLiteral:)(uint64_t a1)
{
  return (double)a1;
}

_QWORD *sub_2142B108C@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

double sub_2142B109C@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  double result;

  result = (double)*a1;
  *(double *)a2 = result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

double sub_2142B10B0@<D0>(uint64_t a1@<X8>)
{
  char v2;
  double result;
  uint64_t v9;

  if (qword_254D68EE0 != -1)
    swift_once();
  sub_214252B14();
  __asm { FMOV            V0.2D, #0.5 }
  *(_OWORD *)a1 = _Q0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  result = -0.5;
  *(_OWORD *)(a1 + 32) = xmmword_21442A950;
  *(_QWORD *)(a1 + 48) = 0x3FE0000000000000;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0x3FE0000000000000;
  *(_QWORD *)(a1 + 80) = v9;
  *(_BYTE *)(a1 + 88) = v2 & 1;
  return result;
}

double sub_2142B1144@<D0>(uint64_t a1@<X8>)
{
  char v2;
  double result;
  uint64_t v9;

  sub_214252B14();
  __asm { FMOV            V0.2D, #0.5 }
  *(_OWORD *)a1 = _Q0;
  *(_OWORD *)(a1 + 16) = xmmword_214427B80;
  *(_OWORD *)(a1 + 32) = xmmword_21442A960;
  *(_OWORD *)(a1 + 48) = xmmword_214427B80;
  result = 0.5;
  *(_OWORD *)(a1 + 64) = xmmword_21442A970;
  *(_QWORD *)(a1 + 80) = v9;
  *(_BYTE *)(a1 + 88) = v2 & 1;
  return result;
}

double sub_2142B11B0(uint64_t a1, double a2, double a3)
{
  uint64_t v3;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;

  v6 = *(double *)v3;
  v7 = *(double *)(v3 + 8);
  v8 = *(double *)(v3 + 16);
  v9 = *(double *)(v3 + 24);
  v10 = *(double *)(v3 + 32);
  v11 = sub_214252B28(a1, *(_QWORD *)(v3 + 80), *(_BYTE *)(v3 + 88));
  return v10 * v11 + v9 * (v11 * a3) + v6 * a2 + v7 * a3 + v8 * (v11 * a2);
}

uint64_t static MarkDimensions.ratio(_:)@<X0>(uint64_t a1@<X8>)
{
  char v2;
  uint64_t v8;

  sub_214252B14();
  *(_BYTE *)a1 = 1;
  v2 &= 1u;
  __asm { FMOV            V0.2D, #0.5 }
  *(_OWORD *)(a1 + 8) = _Q0;
  *(_OWORD *)(a1 + 24) = xmmword_214427B80;
  *(_OWORD *)(a1 + 40) = xmmword_21442A960;
  *(_OWORD *)(a1 + 56) = xmmword_214427B80;
  *(_OWORD *)(a1 + 72) = xmmword_21442A970;
  *(_QWORD *)(a1 + 88) = v8;
  *(_BYTE *)(a1 + 96) = v2;
  *(_QWORD *)(a1 + 104) = v8;
  *(_BYTE *)(a1 + 112) = v2;
  return sub_2142625F8(v8, v2);
}

{
  char v2;
  uint64_t v8;

  sub_214252B20();
  *(_BYTE *)a1 = 1;
  v2 &= 1u;
  __asm { FMOV            V0.2D, #0.5 }
  *(_OWORD *)(a1 + 8) = _Q0;
  *(_OWORD *)(a1 + 24) = xmmword_214427B80;
  *(_OWORD *)(a1 + 40) = xmmword_21442A960;
  *(_OWORD *)(a1 + 56) = xmmword_214427B80;
  *(_OWORD *)(a1 + 72) = xmmword_21442A970;
  *(_QWORD *)(a1 + 88) = v8;
  *(_BYTE *)(a1 + 96) = v2;
  *(_QWORD *)(a1 + 104) = v8;
  *(_BYTE *)(a1 + 112) = v2;
  sub_2142625F8(v8, v2);
  return swift_retain();
}

uint64_t static MarkDimensions.inset(_:)@<X0>(uint64_t a1@<X8>)
{
  char v2;
  uint64_t v3;

  sub_214252B14();
  *(_BYTE *)a1 = 2;
  v2 &= 1u;
  *(_QWORD *)(a1 + 8) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)(a1 + 40) = xmmword_21442A980;
  *(_QWORD *)(a1 + 56) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 88) = v3;
  *(_BYTE *)(a1 + 96) = v2;
  *(_QWORD *)(a1 + 104) = v3;
  *(_BYTE *)(a1 + 112) = v2;
  return sub_2142625F8(v3, v2);
}

{
  char v2;
  uint64_t v3;

  sub_214252B20();
  *(_BYTE *)a1 = 2;
  v2 &= 1u;
  *(_QWORD *)(a1 + 8) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)(a1 + 40) = xmmword_21442A980;
  *(_QWORD *)(a1 + 56) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 88) = v3;
  *(_BYTE *)(a1 + 96) = v2;
  *(_QWORD *)(a1 + 104) = v3;
  *(_BYTE *)(a1 + 112) = v2;
  sub_2142625F8(v3, v2);
  return swift_retain();
}

uint64_t static MarkDimensions.fixed(_:)@<X0>(uint64_t a1@<X8>)
{
  char v7;
  uint64_t v8;

  sub_214252B14();
  *(_BYTE *)a1 = 0;
  __asm { FMOV            V0.2D, #0.5 }
  *(_OWORD *)(a1 + 8) = _Q0;
  v7 &= 1u;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)(a1 + 40) = xmmword_21442A950;
  *(_QWORD *)(a1 + 56) = 0x3FE0000000000000;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0x3FE0000000000000;
  *(_QWORD *)(a1 + 88) = v8;
  *(_BYTE *)(a1 + 96) = v7;
  *(_QWORD *)(a1 + 104) = v8;
  *(_BYTE *)(a1 + 112) = v7;
  return sub_2142625F8(v8, v7);
}

{
  char v7;
  uint64_t v8;

  sub_214252B20();
  *(_BYTE *)a1 = 0;
  __asm { FMOV            V0.2D, #0.5 }
  *(_OWORD *)(a1 + 8) = _Q0;
  v7 &= 1u;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)(a1 + 40) = xmmword_21442A950;
  *(_QWORD *)(a1 + 56) = 0x3FE0000000000000;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0x3FE0000000000000;
  *(_QWORD *)(a1 + 88) = v8;
  *(_BYTE *)(a1 + 96) = v7;
  *(_QWORD *)(a1 + 104) = v8;
  *(_BYTE *)(a1 + 112) = v7;
  sub_2142625F8(v8, v7);
  return swift_retain();
}

uint64_t MarkDimensions.init(integerLiteral:)@<X0>(uint64_t a1@<X8>)
{
  return static MarkDimensions.fixed(_:)(a1);
}

uint64_t sub_2142B1510(double *a1, uint64_t a2)
{
  return MarkDimensions.init(floatLiteral:)(*(_QWORD *)(a2 + 16), *a1);
}

uint64_t sub_2142B151C@<X0>(uint64_t a1@<X8>)
{
  return MarkDimensions.init(integerLiteral:)(a1);
}

void MarkDimension.description.getter(uint64_t a1, char a2)
{
  __asm { BR              X11 }
}

uint64_t sub_2142B1574()
{
  sub_2144250C4();
  sub_214424F20();
  swift_bridgeObjectRelease();
  sub_214424F20();
  return 0x286465786966;
}

void sub_2142B15F0()
{
  uint64_t v0;

  MarkDimension.description.getter(*(_QWORD *)v0, *(_BYTE *)(v0 + 8));
}

uint64_t static InterpolationMethod.cardinal.getter()
{
  return 0;
}

uint64_t static InterpolationMethod.catmullRom.getter()
{
  return 0x3FE0000000000000;
}

uint64_t static InterpolationMethod.monotone.getter()
{
  return 1;
}

uint64_t static InterpolationMethod.stepStart.getter()
{
  return 0;
}

uint64_t static InterpolationMethod.stepCenter.getter()
{
  return 0x3FE0000000000000;
}

uint64_t static InterpolationMethod.stepEnd.getter()
{
  return 0x3FF0000000000000;
}

void InterpolationMethod.description.getter(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_2142B1674(uint64_t a1)
{
  if (*(double *)&a1 == 0.0)
    return 0x6C616E6964726163;
  sub_2144254D8();
  swift_bridgeObjectRelease();
  sub_2144250C4();
  sub_214424F20();
  swift_bridgeObjectRelease();
  sub_214424F20();
  return 0xD000000000000012;
}

unint64_t sub_2142B1854()
{
  unint64_t result;

  result = qword_254D6A538[0];
  if (!qword_254D6A538[0])
  {
    result = MEMORY[0x2199CD934](&protocol conformance descriptor for MarkStackingMethod.Storage, &type metadata for MarkStackingMethod.Storage);
    atomic_store(result, qword_254D6A538);
  }
  return result;
}

uint64_t sub_2142B1898()
{
  return MEMORY[0x24BEE1440];
}

uint64_t sub_2142B18A4()
{
  return MEMORY[0x24BEE17E8];
}

void sub_2142B18B0()
{
  uint64_t v0;

  InterpolationMethod.description.getter(*(_QWORD *)v0, *(_BYTE *)(v0 + 8));
}

ValueMetadata *type metadata accessor for MarkStackingMethod()
{
  return &type metadata for MarkStackingMethod;
}

ValueMetadata *type metadata accessor for MarkStackingMethod.Storage()
{
  return &type metadata for MarkStackingMethod.Storage;
}

ValueMetadata *type metadata accessor for MarkDimension()
{
  return &type metadata for MarkDimension;
}

uint64_t sub_2142B18FC(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 8) <= 2u)
    return *(unsigned __int8 *)(a1 + 8);
  else
    return (*(_DWORD *)a1 + 3);
}

uint64_t sub_2142B1914(uint64_t result, unsigned int a2)
{
  if (a2 >= 3)
  {
    *(_QWORD *)result = a2 - 3;
    LOBYTE(a2) = 3;
  }
  *(_BYTE *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for MarkDimension.Storage()
{
  return &type metadata for MarkDimension.Storage;
}

uint64_t sub_2142B193C(uint64_t a1)
{
  int v2;

  v2 = *(unsigned __int8 *)(a1 + 96);
  if (v2 != 255)
    sub_2142637C0(*(_QWORD *)(a1 + 88), v2 & 1);
  return sub_2142637C0(*(_QWORD *)(a1 + 104), *(_BYTE *)(a1 + 112));
}

uint64_t sub_2142B1978(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  _OWORD *v5;
  int v6;
  __int128 v7;
  __int128 v8;
  char v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  char v14;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = (_OWORD *)(a1 + 8);
  v5 = (_OWORD *)(a2 + 8);
  v6 = *(unsigned __int8 *)(a2 + 96);
  if (v6 == 255)
  {
    v7 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = v7;
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 81) = *(_OWORD *)(a2 + 81);
    v8 = *(_OWORD *)(a2 + 24);
    *v4 = *v5;
    *(_OWORD *)(a1 + 24) = v8;
  }
  else
  {
    v9 = v6 & 1;
    v10 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = v10;
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    v11 = *(_OWORD *)(a2 + 24);
    *v4 = *v5;
    *(_OWORD *)(a1 + 24) = v11;
    v12 = *(_QWORD *)(a2 + 88);
    sub_2142625F8(v12, v6 & 1);
    *(_QWORD *)(a1 + 88) = v12;
    *(_BYTE *)(a1 + 96) = v9;
  }
  v13 = *(_QWORD *)(a2 + 104);
  v14 = *(_BYTE *)(a2 + 112);
  sub_2142625F8(v13, v14);
  *(_QWORD *)(a1 + 104) = v13;
  *(_BYTE *)(a1 + 112) = v14;
  return a1;
}

uint64_t sub_2142B1A34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _OWORD *v6;
  _OWORD *v7;
  int v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  char v26;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = (_OWORD *)(a1 + 8);
  v7 = (_OWORD *)(a2 + 8);
  v8 = *(unsigned __int8 *)(a2 + 96);
  if (*(unsigned __int8 *)(a1 + 96) == 255)
  {
    if (v8 != 255)
    {
      *v6 = *v7;
      v13 = *(_OWORD *)(a2 + 24);
      v14 = *(_OWORD *)(a2 + 40);
      v15 = *(_OWORD *)(a2 + 72);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      *(_OWORD *)(a1 + 72) = v15;
      *(_OWORD *)(a1 + 24) = v13;
      *(_OWORD *)(a1 + 40) = v14;
      v16 = *(_QWORD *)(a2 + 88);
      v17 = *(_BYTE *)(a2 + 96);
      sub_2142625F8(v16, v17);
      *(_QWORD *)(a1 + 88) = v16;
      *(_BYTE *)(a1 + 96) = v17;
      goto LABEL_8;
    }
LABEL_7:
    v19 = v7[1];
    *v6 = *v7;
    v6[1] = v19;
    v20 = v7[2];
    v21 = v7[3];
    v22 = v7[4];
    *(_OWORD *)((char *)v6 + 73) = *(_OWORD *)((char *)v7 + 73);
    v6[3] = v21;
    v6[4] = v22;
    v6[2] = v20;
    goto LABEL_8;
  }
  if (v8 == 255)
  {
    v18 = type metadata accessor for MappedCoefficients(0, *(_QWORD *)(a3 + 16), a3, a4);
    (*(void (**)(_OWORD *, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v6, v18);
    goto LABEL_7;
  }
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v9 = *(_QWORD *)(a2 + 88);
  v10 = *(_BYTE *)(a2 + 96);
  sub_2142625F8(v9, v10);
  v11 = *(_QWORD *)(a1 + 88);
  v12 = *(_BYTE *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = v9;
  *(_BYTE *)(a1 + 96) = v10;
  sub_2142637C0(v11, v12);
LABEL_8:
  v23 = *(_QWORD *)(a2 + 104);
  v24 = *(_BYTE *)(a2 + 112);
  sub_2142625F8(v23, v24);
  v25 = *(_QWORD *)(a1 + 104);
  v26 = *(_BYTE *)(a1 + 112);
  *(_QWORD *)(a1 + 104) = v23;
  *(_BYTE *)(a1 + 112) = v24;
  sub_2142637C0(v25, v26);
  return a1;
}

uint64_t type metadata accessor for MappedCoefficients(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2141D8E88(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MappedCoefficients);
}

__n128 sub_2142B1BB8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  result = (__n128)a2[4];
  v6 = a2[5];
  v7 = a2[6];
  *(_BYTE *)(a1 + 112) = *((_BYTE *)a2 + 112);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t sub_2142B1BE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _OWORD *v6;
  _OWORD *v7;
  int v8;
  int v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = (_OWORD *)(a1 + 8);
  v7 = (_OWORD *)(a2 + 8);
  v8 = *(unsigned __int8 *)(a1 + 96);
  if (v8 != 255)
  {
    v9 = *(unsigned __int8 *)(a2 + 96);
    if (v9 != 255)
    {
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
      v13 = *(_QWORD *)(a1 + 88);
      *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
      *(_BYTE *)(a1 + 96) = v9 & 1;
      sub_2142637C0(v13, v8 & 1);
      goto LABEL_6;
    }
    v10 = type metadata accessor for MappedCoefficients(0, *(_QWORD *)(a3 + 16), a3, a4);
    (*(void (**)(_OWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v6, v10);
  }
  v11 = v7[3];
  v6[2] = v7[2];
  v6[3] = v11;
  v6[4] = v7[4];
  *(_OWORD *)((char *)v6 + 73) = *(_OWORD *)((char *)v7 + 73);
  v12 = v7[1];
  *v6 = *v7;
  v6[1] = v12;
LABEL_6:
  v14 = *(_BYTE *)(a2 + 112);
  v15 = *(_QWORD *)(a1 + 104);
  v16 = *(_BYTE *)(a1 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 112) = v14;
  sub_2142637C0(v15, v16);
  return a1;
}

uint64_t sub_2142B1CDC(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 113))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 112);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t sub_2142B1D24(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 112) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 113) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 113) = 0;
    if (a2)
      *(_BYTE *)(result + 112) = -(char)a2;
  }
  return result;
}

uint64_t type metadata accessor for MarkDimensions(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2141D8E88(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MarkDimensions);
}

ValueMetadata *type metadata accessor for InterpolationMethod()
{
  return &type metadata for InterpolationMethod;
}

uint64_t getEnumTagSinglePayload for PartialSpecScaleMapping(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 253);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 3)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PartialSpecScaleMapping(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 253;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for InterpolationMethod.Storage()
{
  return &type metadata for InterpolationMethod.Storage;
}

uint64_t sub_2142B1E40(uint64_t result)
{
  unsigned int v1;

  v1 = *(unsigned __int8 *)(result + 88);
  if (v1 <= 1)
    return sub_2142637C0(*(_QWORD *)(result + 80), v1 != 0);
  return result;
}

uint64_t sub_2142B1E60(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  BOOL v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;

  v3 = *(unsigned __int8 *)(a2 + 88);
  if (v3 > 1)
  {
    v8 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v8;
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 + 73);
    v9 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v9;
  }
  else
  {
    v4 = v3 != 0;
    v5 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v5;
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    v7 = *(_QWORD *)(a2 + 80);
    sub_2142625F8(v7, v3 != 0);
    *(_QWORD *)(a1 + 80) = v7;
    *(_BYTE *)(a1 + 88) = v4;
  }
  return a1;
}

uint64_t sub_2142B1EF0(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  char v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  v4 = *(unsigned __int8 *)(a1 + 88);
  v5 = *(unsigned __int8 *)(a2 + 88);
  if (v4 > 1)
  {
    if (v5 <= 1)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      v10 = *(_OWORD *)(a2 + 16);
      v11 = *(_OWORD *)(a2 + 32);
      v12 = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 64) = v12;
      *(_OWORD *)(a1 + 16) = v10;
      *(_OWORD *)(a1 + 32) = v11;
      v13 = *(_QWORD *)(a2 + 80);
      v14 = *(_BYTE *)(a2 + 88);
      sub_2142625F8(v13, v14);
      *(_QWORD *)(a1 + 80) = v13;
      *(_BYTE *)(a1 + 88) = v14;
      return a1;
    }
LABEL_7:
    v15 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v15;
    v16 = *(_OWORD *)(a2 + 32);
    v17 = *(_OWORD *)(a2 + 48);
    v18 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 + 73);
    *(_OWORD *)(a1 + 48) = v17;
    *(_OWORD *)(a1 + 64) = v18;
    *(_OWORD *)(a1 + 32) = v16;
    return a1;
  }
  if (v5 > 1)
  {
    sub_2142637C0(*(_QWORD *)(a1 + 80), v4 & 1);
    goto LABEL_7;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v6 = *(_QWORD *)(a2 + 80);
  v7 = *(_BYTE *)(a2 + 88);
  sub_2142625F8(v6, v7);
  v8 = *(_QWORD *)(a1 + 80);
  v9 = *(_BYTE *)(a1 + 88);
  *(_QWORD *)(a1 + 80) = v6;
  *(_BYTE *)(a1 + 88) = v7;
  sub_2142637C0(v8, v9);
  return a1;
}

__n128 initializeWithTake for ChartSelectionAxisConfiguration(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 + 73);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t sub_2142B2040(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  char v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;

  v4 = *(unsigned __int8 *)(a1 + 88);
  if (v4 > 1)
    goto LABEL_5;
  v5 = *(unsigned __int8 *)(a2 + 88);
  v6 = v4 & 1;
  if (v5 > 1)
  {
    sub_2142637C0(*(_QWORD *)(a1 + 80), v6);
LABEL_5:
    v10 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v10;
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 + 73);
    v11 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v11;
    return a1;
  }
  v7 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v7;
  v8 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v8;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  v9 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = v5 != 0;
  sub_2142637C0(v9, v6);
  return a1;
}

uint64_t sub_2142B20E0(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  unsigned int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 89))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 88);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  if (v4 + 1 >= 2)
    return v4;
  else
    return 0;
}

uint64_t sub_2142B2128(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_OWORD *)(result + 73) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)result = 0u;
    *(_DWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 89) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 89) = 0;
    if (a2)
      *(_BYTE *)(result + 88) = ~(_BYTE)a2;
  }
  return result;
}

uint64_t sub_2142B217C(uint64_t a1)
{
  unsigned int v1;

  v1 = *(unsigned __int8 *)(a1 + 88);
  if (v1 > 1)
    return (v1 ^ 0xFF) + 1;
  else
    return 0;
}

double sub_2142B2190(uint64_t a1, unsigned int a2)
{
  double result;

  if (a2 > 0xFE)
  {
    result = 0.0;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_BYTE *)(a1 + 88) = 0;
    *(_QWORD *)a1 = a2 - 255;
  }
  else if (a2)
  {
    *(_BYTE *)(a1 + 88) = -(char)a2;
  }
  return result;
}

uint64_t type metadata accessor for MarkDimensions.Storage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2141D8E88(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MarkDimensions.Storage);
}

uint64_t getEnumTagSinglePayload for AxisMarkPosition.Storage(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s6Charts18MarkStackingMethodV7StorageOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_2142B22B8 + 4 * byte_21442A5C5[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_2142B22EC + 4 * byte_21442A5C0[v4]))();
}

uint64_t sub_2142B22EC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2142B22F4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2142B22FCLL);
  return result;
}

uint64_t sub_2142B2308(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2142B2310);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_2142B2314(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2142B231C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MarkDimensionKind()
{
  return &type metadata for MarkDimensionKind;
}

uint64_t sub_2142B2338(uint64_t a1)
{
  return sub_2142637C0(*(_QWORD *)(a1 + 80), *(_BYTE *)(a1 + 88));
}

uint64_t sub_2142B2348(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  char v6;

  v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v3;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 80);
  v6 = *(_BYTE *)(a2 + 88);
  sub_2142625F8(v5, v6);
  *(_QWORD *)(a1 + 80) = v5;
  *(_BYTE *)(a1 + 88) = v6;
  return a1;
}

uint64_t sub_2142B23A4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v3 = *(_QWORD *)(a2 + 80);
  v4 = *(_BYTE *)(a2 + 88);
  sub_2142625F8(v3, v4);
  v5 = *(_QWORD *)(a1 + 80);
  v6 = *(_BYTE *)(a1 + 88);
  *(_QWORD *)(a1 + 80) = v3;
  *(_BYTE *)(a1 + 88) = v4;
  sub_2142637C0(v5, v6);
  return a1;
}

uint64_t sub_2142B2444(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  char v8;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  v5 = *(_QWORD *)(a2 + 80);
  v6 = *(_BYTE *)(a2 + 88);
  v7 = *(_QWORD *)(a1 + 80);
  v8 = *(_BYTE *)(a1 + 88);
  *(_QWORD *)(a1 + 80) = v5;
  *(_BYTE *)(a1 + 88) = v6;
  sub_2142637C0(v7, v8);
  return a1;
}

uint64_t sub_2142B2498(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 89))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 88);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t sub_2142B24E0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 88) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 89) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 89) = 0;
    if (a2)
      *(_BYTE *)(result + 88) = -(char)a2;
  }
  return result;
}

unint64_t sub_2142B2540()
{
  unint64_t result;

  result = qword_254D6A6C0;
  if (!qword_254D6A6C0)
  {
    result = MEMORY[0x2199CD934](&unk_21442A900, &type metadata for MarkDimensionKind);
    atomic_store(result, (unint64_t *)&qword_254D6A6C0);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for RangeCoefficients(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 80))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for RangeCoefficients(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 80) = v3;
  return result;
}

ValueMetadata *type metadata accessor for RangeCoefficients()
{
  return &type metadata for RangeCoefficients;
}

uint64_t getEnumTagSinglePayload for SgArea.Points.Element(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 40))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for SgArea.Points.Element(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 40) = v3;
  return result;
}

ValueMetadata *type metadata accessor for RangeCoefficients.Coefficients()
{
  return &type metadata for RangeCoefficients.Coefficients;
}

unint64_t sub_2142B2670(unsigned __int8 a1, uint64_t a2, uint64_t a3)
{
  unint64_t result;
  char v7;
  char v8;

  if (!*(_QWORD *)(a2 + 16))
    return 0;
  result = sub_214336B74(a1);
  if ((v7 & 1) == 0 || (*(_BYTE *)(*(_QWORD *)(a2 + 56) + 88 * result + 55) & 0x40) == 0)
    return 0;
  if (*(_QWORD *)(a3 + 16))
  {
    result = sub_214336B74(a1);
    if ((v8 & 1) != 0)
      return swift_retain();
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t sub_2142B26F4(unsigned __int8 a1, uint64_t a2, uint64_t a3)
{
  unint64_t result;
  char v7;
  char v8;

  if (!*(_QWORD *)(a2 + 16))
    return 0;
  result = sub_214336B74(a1);
  if ((v7 & 1) == 0 || (*(_BYTE *)(*(_QWORD *)(a2 + 56) + 88 * result + 55) & 0x60) != 0)
    return 0;
  if (*(_QWORD *)(a3 + 16))
  {
    result = sub_214336B74(a1);
    if ((v8 & 1) != 0)
      return swift_retain();
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_2142B277C(uint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  BOOL v23;
  uint64_t v24;
  unint64_t i;
  uint64_t v26;
  _QWORD *v27;
  BOOL v28;
  uint64_t v29;
  int64_t v30;
  int64_t v31;

  if (result == a2)
    return 1;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v3 = 0;
  v29 = result + 56;
  v4 = 1 << *(_BYTE *)(result + 32);
  if (v4 < 64)
    v5 = ~(-1 << v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(result + 56);
  v30 = (unint64_t)(v4 + 63) >> 6;
  v7 = a2 + 56;
  while (1)
  {
    if (v6)
    {
      v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v31 = v3;
      v9 = v8 | (v3 << 6);
      goto LABEL_26;
    }
    v10 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_45;
    }
    if (v10 >= v30)
      return 1;
    v11 = *(_QWORD *)(v29 + 8 * v10);
    v12 = v3 + 1;
    if (!v11)
    {
      v12 = v3 + 2;
      if (v3 + 2 >= v30)
        return 1;
      v11 = *(_QWORD *)(v29 + 8 * v12);
      if (!v11)
      {
        v12 = v3 + 3;
        if (v3 + 3 >= v30)
          return 1;
        v11 = *(_QWORD *)(v29 + 8 * v12);
        if (!v11)
        {
          v12 = v3 + 4;
          if (v3 + 4 >= v30)
            return 1;
          v11 = *(_QWORD *)(v29 + 8 * v12);
          if (!v11)
            break;
        }
      }
    }
LABEL_25:
    v6 = (v11 - 1) & v11;
    v31 = v12;
    v9 = __clz(__rbit64(v11)) + (v12 << 6);
LABEL_26:
    v14 = result;
    v15 = (uint64_t *)(*(_QWORD *)(result + 48) + 16 * v9);
    v17 = *v15;
    v16 = v15[1];
    sub_214425874();
    swift_bridgeObjectRetain();
    sub_214424F14();
    v18 = sub_2144258B0();
    v19 = -1 << *(_BYTE *)(a2 + 32);
    v20 = v18 & ~v19;
    if (((*(_QWORD *)(v7 + ((v20 >> 3) & 0xFFFFFFFFFFFFF8)) >> v20) & 1) == 0)
      goto LABEL_41;
    v21 = *(_QWORD *)(a2 + 48);
    v22 = (_QWORD *)(v21 + 16 * v20);
    v23 = *v22 == v17 && v22[1] == v16;
    if (!v23 && (sub_214425790() & 1) == 0)
    {
      v24 = ~v19;
      for (i = v20 + 1; ; i = v26 + 1)
      {
        v26 = i & v24;
        if (((*(_QWORD *)(v7 + (((i & v24) >> 3) & 0xFFFFFFFFFFFFF8)) >> (i & v24)) & 1) == 0)
          break;
        v27 = (_QWORD *)(v21 + 16 * v26);
        v28 = *v27 == v17 && v27[1] == v16;
        if (v28 || (sub_214425790() & 1) != 0)
          goto LABEL_7;
      }
LABEL_41:
      swift_bridgeObjectRelease();
      return 0;
    }
LABEL_7:
    swift_bridgeObjectRelease();
    result = v14;
    v3 = v31;
  }
  v13 = v3 + 5;
  if (v3 + 5 >= v30)
    return 1;
  v11 = *(_QWORD *)(v29 + 8 * v13);
  if (v11)
  {
    v12 = v3 + 5;
    goto LABEL_25;
  }
  while (1)
  {
    v12 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v12 >= v30)
      return 1;
    v11 = *(_QWORD *)(v29 + 8 * v12);
    ++v13;
    if (v11)
      goto LABEL_25;
  }
LABEL_45:
  __break(1u);
  return result;
}

uint64_t sub_2142B2A1C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, char **a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  char v33;
  uint64_t result;
  uint64_t v35;
  char *v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char isUniquelyReferenced_nonNull_native;
  uint64_t *v51;
  __int128 *v52;
  unint64_t v53;
  unint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  char v59;
  char *v60;
  char *v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  unint64_t v66;
  unint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  unsigned __int8 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  char *v77;
  uint64_t v78;
  char v79;
  unint64_t v80;
  unint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  __int128 *v85;
  _QWORD v86[3];
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char **v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t *v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  __int128 v112;
  uint64_t v113;
  char *v114;
  uint64_t v115[3];
  _OWORD v116[4];
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  _OWORD v121[4];
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  _QWORD v145[7];
  char v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  _QWORD v151[17];

  v94 = a5;
  v111 = 0;
  v8 = *a1;
  v7 = a1[1];
  v9 = a1[3];
  v102 = a1[2];
  v103 = v7;
  v10 = a1[4];
  v11 = a1[5];
  v105 = (uint64_t *)a1[6];
  v106 = (_QWORD *)v10;
  v12 = a1[8];
  v104 = a1[7];
  v14 = a1[9];
  v13 = a1[10];
  v15 = a1[11];
  v16 = sub_2141E801C(a3, (uint64_t)v151, &qword_253F12F50);
  v17 = a4[1];
  *(_QWORD *)&v112 = *a4;
  *((_QWORD *)&v112 + 1) = v17;
  v18 = a4[3];
  v109 = a4[2];
  v110 = v18;
  v19 = a4[4];
  v107 = a4[5];
  v108 = v19;
  v20 = a4[6];
  v100 = a4[7];
  v101 = v20;
  v21 = a4[8];
  v98 = a4[9];
  v99 = v21;
  v22 = a4[10];
  v96 = a4[11];
  v97 = v22;
  v95 = a4[12];
  if (!v8)
  {
    v32 = v111;
    v36 = (char *)MEMORY[0x24BEE4AF8];
    goto LABEL_6;
  }
  v93 = a2;
  v86[2] = v86;
  v145[0] = v8;
  v23 = v102;
  v30 = v103;
  v145[1] = v103;
  v145[2] = v102;
  v145[3] = v9;
  v145[4] = v106;
  v145[5] = v11;
  v145[6] = v105;
  v146 = v104;
  v147 = v12;
  v148 = v14;
  v149 = v13;
  v150 = v15;
  MEMORY[0x24BDAC7A8](v16);
  v86[1] = &v84;
  v85 = (__int128 *)v145;
  v25 = v24;
  swift_bridgeObjectRetain();
  v87 = v15;
  v88 = v13;
  v89 = v14;
  v90 = v12;
  v83 = v12;
  v91 = v25;
  v92 = v9;
  v26 = v30;
  v27 = v9;
  v29 = (unint64_t)v105;
  v28 = (uint64_t)v106;
  LOBYTE(v30) = v104;
  sub_21424D040(v25, v26, v23, v27, (uint64_t)v106, v11, (uint64_t)v105, v104, v83, v14, v13, v15, (void (*)(uint64_t, uint64_t))sub_2141DD47C);
  v31 = sub_21439864C(v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v32 = v111;
  sub_2142B593C(MEMORY[0x24BEE4AF8], v31);
  LOBYTE(v25) = v33;
  result = swift_bridgeObjectRelease_n();
  if ((v25 & 1) == 0)
    goto LABEL_81;
  swift_bridgeObjectRetain_n();
  v35 = sub_2142B48F0(v11, (void (*)(__int128 *))sub_2142B5AC8);
  swift_bridgeObjectRelease();
  v36 = sub_214226154(0, 1, 1, MEMORY[0x24BEE4AF8]);
  v38 = *((_QWORD *)v36 + 2);
  v37 = *((_QWORD *)v36 + 3);
  v39 = (char *)(v38 + 1);
  if (v38 >= v37 >> 1)
    goto LABEL_71;
  while (1)
  {
    v41 = v87;
    v40 = v88;
    *((_QWORD *)v36 + 2) = v39;
    v42 = &v36[16 * v38];
    *((_QWORD *)v42 + 4) = v11;
    *((_QWORD *)v42 + 5) = v35;
    sub_21424D364(v91, v103, v102, v92, v28, v11, v29, v30, v90, v89, v40, v41, (void (*)(uint64_t, uint64_t))sub_2141FA1C4);
    a2 = v93;
LABEL_6:
    v43 = sub_2142B58EC(a2, (uint64_t)&v137);
    v29 = (unint64_t)v32;
    if (!(_QWORD)v137)
    {
      v51 = &qword_253F12F60;
      v52 = &v137;
      goto LABEL_26;
    }
    v38 = (unint64_t)v86;
    v122 = v141;
    v123 = v142;
    v124 = v143;
    v125 = v144;
    v121[0] = v137;
    v121[1] = v138;
    v121[2] = v139;
    v121[3] = v140;
    MEMORY[0x24BDAC7A8](v43);
    v39 = (char *)&v84;
    v85 = v121;
    v11 = *((_QWORD *)&v122 + 1);
    v44 = swift_bridgeObjectRetain();
    v45 = sub_21439864C(v44);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v46 = swift_bridgeObjectRetain();
    v35 = sub_2142B593C(v46, v45);
    v28 = v47;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    if ((v28 & 1) != 0)
    {
      swift_bridgeObjectRetain_n();
      v35 = sub_2142B48F0(v11, (void (*)(__int128 *))sub_2142B5A78);
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        goto LABEL_22;
    }
    else
    {
      if ((v35 & 0x8000000000000000) == 0)
      {
        if ((unint64_t)v35 < *((_QWORD *)v36 + 2))
        {
          v30 = *(_QWORD *)(*(_QWORD *)&v36[16 * v35 + 40] + 16);
          if (!v30)
            goto LABEL_25;
          v106 = v86;
          v111 = v32;
          v28 = 0;
          v29 = 0;
          while (1)
          {
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v36 = sub_21434EC24((uint64_t)v36);
            v37 = *((_QWORD *)v36 + 2);
            if (v35 >= (uint64_t)v37)
              break;
            v48 = &v36[16 * v35];
            v49 = *((_QWORD *)v48 + 5);
            v39 = v48 + 40;
            v11 = v49;
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            *(_QWORD *)v39 = v49;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              v11 = (uint64_t)sub_21434EC10(v11);
              *(_QWORD *)v39 = v11;
            }
            v37 = *(_QWORD *)(v11 + 16);
            if (v29 >= v37)
              goto LABEL_66;
            ++v29;
            v32 = (uint64_t *)(v11 + v28);
            v39 = *(char **)(v11 + v28 + 40);
            *(_QWORD *)&v116[0] = *(_QWORD *)(v11 + v28 + 32);
            *((_QWORD *)&v116[0] + 1) = v39;
            v11 = *((_QWORD *)&v121[0] + 1);
            v38 = *(_QWORD *)&v121[0];
            swift_bridgeObjectRetain();
            ((void (*)(__int128 *__return_ptr, _OWORD *))v38)(&v137, v116);
            swift_bridgeObjectRelease();
            sub_2142B5A80((uint64_t)&v137, (uint64_t)(v32 + 11));
            v28 += 152;
            if (v30 == v29)
            {
              v29 = (unint64_t)v111;
              goto LABEL_25;
            }
          }
          __break(1u);
LABEL_66:
          __break(1u);
          goto LABEL_67;
        }
        __break(1u);
LABEL_75:
        __break(1u);
        goto LABEL_76;
      }
      __break(1u);
    }
    v36 = sub_214226154(0, *((_QWORD *)v36 + 2) + 1, 1, v36);
LABEL_22:
    v54 = *((_QWORD *)v36 + 2);
    v53 = *((_QWORD *)v36 + 3);
    if (v54 >= v53 >> 1)
      v36 = sub_214226154((char *)(v53 > 1), v54 + 1, 1, v36);
    *((_QWORD *)v36 + 2) = v54 + 1;
    v55 = &v36[16 * v54];
    *((_QWORD *)v55 + 4) = v11;
    *((_QWORD *)v55 + 5) = v35;
LABEL_25:
    v51 = (uint64_t *)&unk_254D6A6C8;
    v52 = v121;
LABEL_26:
    sub_2141E0750((uint64_t)v52, v51);
    sub_2141E801C((uint64_t)v151, (uint64_t)v116, &qword_253F12F50);
    result = sub_21424CE60((uint64_t *)v116);
    if ((_DWORD)result == 1)
      goto LABEL_45;
    v38 = (unint64_t)v86;
    v141 = v117;
    v142 = v118;
    v143 = v119;
    v144 = v120;
    v137 = v116[0];
    v138 = v116[1];
    v139 = v116[2];
    v140 = v116[3];
    MEMORY[0x24BDAC7A8](result);
    v39 = (char *)&v84;
    v85 = &v137;
    v11 = *((_QWORD *)&v117 + 1);
    swift_bridgeObjectRetain();
    sub_21424D26C(v151, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21424D0E4);
    v56 = sub_21439864C(v11);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v57 = swift_bridgeObjectRetain();
    v35 = sub_2142B593C(v57, v56);
    v59 = v58;
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease_n();
    if ((v59 & 1) != 0)
    {
      swift_bridgeObjectRetain_n();
      v35 = sub_2142B48F0(v11, (void (*)(__int128 *))sub_2142B5A70);
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        goto LABEL_41;
      goto LABEL_79;
    }
    if (v35 < 0)
      goto LABEL_78;
    if ((unint64_t)v35 >= *((_QWORD *)v36 + 2))
    {
      __break(1u);
LABEL_81:
      __break(1u);
      return result;
    }
    v30 = *(_QWORD *)(*(_QWORD *)&v36[16 * v35 + 40] + 16);
    if (!v30)
      break;
    v106 = v86;
    v111 = (uint64_t *)v29;
    v28 = 0;
    v29 = 0;
    v11 = *((_QWORD *)&v116[0] + 1);
    v32 = *(uint64_t **)&v116[0];
    while (1)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v36 = sub_21434EC24((uint64_t)v36);
      v37 = *((_QWORD *)v36 + 2);
      if (v35 >= (uint64_t)v37)
        break;
      v60 = &v36[16 * v35];
      v61 = (char *)*((_QWORD *)v60 + 5);
      v38 = (unint64_t)(v60 + 40);
      v39 = v61;
      v62 = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)v38 = v61;
      if ((v62 & 1) == 0)
      {
        v39 = sub_21434EC10((uint64_t)v39);
        *(_QWORD *)v38 = v39;
      }
      v37 = *((_QWORD *)v39 + 2);
      if (v29 >= v37)
        goto LABEL_70;
      ++v29;
      v38 = (unint64_t)&v39[v28];
      v63 = *(_QWORD *)&v39[v28 + 32];
      v39 = *(char **)&v39[v28 + 40];
      v113 = v63;
      v114 = v39;
      swift_bridgeObjectRetain();
      ((void (*)(__int128 *__return_ptr, uint64_t *))v32)(&v126, &v113);
      swift_bridgeObjectRelease();
      v64 = v128;
      v65 = v127;
      *(_OWORD *)(v38 + 128) = v126;
      *(_OWORD *)(v38 + 144) = v65;
      *(_QWORD *)(v38 + 160) = v64;
      swift_bridgeObjectRelease();
      v28 += 152;
      if (v30 == v29)
      {
        v29 = (unint64_t)v111;
        goto LABEL_44;
      }
    }
LABEL_69:
    __break(1u);
LABEL_70:
    __break(1u);
LABEL_71:
    v36 = sub_214226154((char *)(v37 > 1), (int64_t)v39, 1, v36);
  }
LABEL_44:
  while (1)
  {
    result = (uint64_t)sub_21424D26C(v151, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21424D2F8);
LABEL_45:
    v69 = v112;
    if (!(_QWORD)v112)
      goto LABEL_64;
    v106 = v86;
    BYTE8(v127) = v110 & 1;
    v126 = v112;
    *(_QWORD *)&v127 = v109;
    v128 = v108;
    v129 = v107;
    v70 = v100;
    v28 = v101;
    v130 = v101;
    v131 = v100;
    v11 = v98;
    v71 = v99;
    v132 = v99;
    v133 = v98;
    v111 = (uint64_t *)v29;
    v72 = v96;
    v29 = v97;
    v134 = v97;
    v135 = v96;
    v73 = v95;
    v136 = v95;
    MEMORY[0x24BDAC7A8](result);
    v105 = &v84;
    swift_bridgeObjectRetain();
    sub_21424D150(v69, *((uint64_t *)&v112 + 1), v109, v110, v108, v107, v28, v70, v71, v11, v29, v72, v73, (void (*)(uint64_t, uint64_t))sub_2141DD47C);
    v74 = sub_21439864C(v28);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v75 = swift_bridgeObjectRetain();
    v32 = v111;
    v35 = sub_2142B593C(v75, v74);
    LOBYTE(v73) = v76;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    if ((v73 & 1) != 0)
      break;
    if (v35 < 0)
      goto LABEL_75;
    if ((unint64_t)v35 < *((_QWORD *)v36 + 2))
    {
      v39 = *(char **)(*(_QWORD *)&v36[16 * v35 + 40] + 16);
      if (!v39)
        goto LABEL_63;
      v30 = 0;
      v38 = 0;
      while (1)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v36 = sub_21434EC24((uint64_t)v36);
        v37 = *((_QWORD *)v36 + 2);
        if (v35 >= (uint64_t)v37)
          break;
        v77 = &v36[16 * v35];
        v78 = *((_QWORD *)v77 + 5);
        v32 = (uint64_t *)(v77 + 40);
        v11 = v78;
        v79 = swift_isUniquelyReferenced_nonNull_native();
        *v32 = v78;
        if ((v79 & 1) == 0)
        {
          v11 = (uint64_t)sub_21434EC10(v11);
          *v32 = v11;
        }
        v37 = *(_QWORD *)(v11 + 16);
        if (v38 >= v37)
          goto LABEL_68;
        ++v38;
        v29 = v11 + v30;
        v32 = *(uint64_t **)(v11 + v30 + 40);
        v113 = *(_QWORD *)(v11 + v30 + 32);
        v114 = (char *)v32;
        swift_bridgeObjectRetain();
        v11 = *((_QWORD *)&v112 + 1);
        ((void (*)(uint64_t *__return_ptr, uint64_t *))v112)(v115, &v113);
        swift_bridgeObjectRelease();
        *(_QWORD *)(v29 + 168) = v115[0];
        *(_BYTE *)(v29 + 176) = 0;
        v30 += 152;
        if (v39 == (char *)v38)
          goto LABEL_63;
      }
LABEL_67:
      __break(1u);
LABEL_68:
      __break(1u);
      goto LABEL_69;
    }
    __break(1u);
LABEL_78:
    __break(1u);
LABEL_79:
    v36 = sub_214226154(0, *((_QWORD *)v36 + 2) + 1, 1, v36);
LABEL_41:
    v67 = *((_QWORD *)v36 + 2);
    v66 = *((_QWORD *)v36 + 3);
    if (v67 >= v66 >> 1)
      v36 = sub_214226154((char *)(v66 > 1), v67 + 1, 1, v36);
    *((_QWORD *)v36 + 2) = v67 + 1;
    v68 = &v36[16 * v67];
    *((_QWORD *)v68 + 4) = v11;
    *((_QWORD *)v68 + 5) = v35;
  }
  swift_bridgeObjectRetain_n();
  v11 = sub_2142B48F0(v28, (void (*)(__int128 *))sub_2142B5934);
  swift_bridgeObjectRelease();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_76:
    v36 = sub_214226154(0, *((_QWORD *)v36 + 2) + 1, 1, v36);
  v81 = *((_QWORD *)v36 + 2);
  v80 = *((_QWORD *)v36 + 3);
  if (v81 >= v80 >> 1)
    v36 = sub_214226154((char *)(v80 > 1), v81 + 1, 1, v36);
  *((_QWORD *)v36 + 2) = v81 + 1;
  v82 = &v36[16 * v81];
  *((_QWORD *)v82 + 4) = v28;
  *((_QWORD *)v82 + 5) = v11;
LABEL_63:
  result = sub_21424D200(v112, *((uint64_t *)&v112 + 1), v109, v110, v108, v107, v101, v100, v99, v98, v97, v96, v95, (void (*)(uint64_t, uint64_t))sub_2141FA1C4);
LABEL_64:
  *v94 = v36;
  return result;
}

uint64_t sub_2142B3530(_QWORD *a1, void (**a2)(uint64_t *__return_ptr, _QWORD *))
{
  uint64_t v3;
  void (*v4)(uint64_t *__return_ptr, _QWORD *);
  uint64_t v5;
  uint64_t result;
  _QWORD v7[2];
  uint64_t v8;

  v3 = a1[1];
  v7[0] = *a1;
  v7[1] = v3;
  v4 = *a2;
  swift_bridgeObjectRetain();
  v4(&v8, v7);
  swift_bridgeObjectRelease();
  v5 = v8;
  result = swift_release();
  a1[6] = v5;
  return result;
}

uint64_t sub_2142B3594(_QWORD *a1, void (**a2)(_QWORD *__return_ptr, _QWORD *))
{
  uint64_t v3;
  void (*v4)(_QWORD *__return_ptr, _QWORD *);
  _QWORD v6[2];
  _QWORD v7[5];

  v3 = a1[1];
  v6[0] = *a1;
  v6[1] = v3;
  v4 = *a2;
  swift_bridgeObjectRetain();
  v4(v7, v6);
  swift_bridgeObjectRelease();
  return sub_2142B5A80((uint64_t)v7, (uint64_t)(a1 + 7));
}

__n128 sub_2142B35F4(uint64_t a1, void (**a2)(_OWORD *__return_ptr, _QWORD *))
{
  uint64_t v3;
  void (*v4)(_OWORD *__return_ptr, _QWORD *);
  uint64_t v5;
  __n128 result;
  __n128 v7;
  __int128 v8;
  _QWORD v9[2];
  _OWORD v10[2];
  uint64_t v11;

  v3 = *(_QWORD *)(a1 + 8);
  v9[0] = *(_QWORD *)a1;
  v9[1] = v3;
  v4 = *a2;
  swift_bridgeObjectRetain();
  v4(v10, v9);
  swift_bridgeObjectRelease();
  v7 = (__n128)v10[1];
  v8 = v10[0];
  v5 = v11;
  swift_bridgeObjectRelease();
  result = v7;
  *(_OWORD *)(a1 + 96) = v8;
  *(__n128 *)(a1 + 112) = v7;
  *(_QWORD *)(a1 + 128) = v5;
  return result;
}

uint64_t sub_2142B3670(uint64_t a1, void (**a2)(uint64_t *__return_ptr, _QWORD *))
{
  uint64_t v3;
  void (*v4)(uint64_t *__return_ptr, _QWORD *);
  uint64_t result;
  _QWORD v6[2];
  uint64_t v7;

  v3 = *(_QWORD *)(a1 + 8);
  v6[0] = *(_QWORD *)a1;
  v6[1] = v3;
  v4 = *a2;
  swift_bridgeObjectRetain();
  v4(&v7, v6);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 136) = v7;
  *(_BYTE *)(a1 + 144) = 0;
  return result;
}

uint64_t sub_2142B36D0@<X0>(char **a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, _QWORD *a7@<X8>)
{
  char *v7;
  uint64_t v8;
  _QWORD *(*v9)(double *__return_ptr, uint64_t *);
  _QWORD *(*v10)(double *__return_ptr, uint64_t *);
  uint64_t v11;
  _QWORD *(*v12)(double *__return_ptr, uint64_t *);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  double v34;
  char v35;
  double v36;
  double v37;
  uint64_t v38;
  uint64_t v39;
  double *v40;
  double v41;
  double v42;
  double v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  char *v56;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v58;
  unint64_t v59;
  char *v60;
  int64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  int64_t v68;
  uint64_t v69;
  _BYTE *v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t result;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *(*v92)(double *__return_ptr, uint64_t *);
  _QWORD *(*v93)(double *__return_ptr, uint64_t *);
  uint64_t v94;
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  _QWORD *v99;
  _QWORD *(*v100)(double *__return_ptr, uint64_t *);
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  __int128 v107;
  uint64_t v108;
  unint64_t v109;
  char *v110;
  _QWORD v111[7];
  _QWORD *(*v112[3])(double *__return_ptr, uint64_t *);
  char v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  _BYTE v123[72];

  v95 = a4;
  v7 = *a1;
  v8 = *a2;
  v9 = *(_QWORD *(**)(double *__return_ptr, uint64_t *))a3;
  v10 = *(_QWORD *(**)(double *__return_ptr, uint64_t *))(a3 + 8);
  v12 = *(_QWORD *(**)(double *__return_ptr, uint64_t *))(a3 + 16);
  v11 = *(_QWORD *)(a3 + 24);
  v14 = *(_QWORD *)(a3 + 32);
  v13 = *(_QWORD *)(a3 + 40);
  v15 = *(_QWORD *)(a3 + 48);
  v103 = *(_QWORD *)(a3 + 56);
  v104 = v13;
  v16 = *(_QWORD *)(a3 + 64);
  v106 = *(_QWORD *)(a3 + 72);
  *(_QWORD *)&v107 = v16;
  v105 = *(_QWORD *)(a3 + 80);
  v17 = *(_QWORD *)(a3 + 88);
  v101 = *(_QWORD *)(a3 + 96);
  v102 = v17;
  v99 = a7;
  if (!v8)
  {
    swift_bridgeObjectRetain();
    v19 = (char *)MEMORY[0x24BEE4AF8];
    if (!v9)
      goto LABEL_44;
LABEL_17:
    v112[0] = v9;
    v112[1] = v10;
    v112[2] = v12;
    v113 = v11 & 1;
    v114 = v14;
    v115 = v104;
    v116 = v15;
    v117 = v103;
    v118 = v107;
    v119 = v106;
    v120 = v105;
    v121 = v102;
    v122 = v101;
    v34 = COERCE_DOUBLE(sub_2143EDF48(v15));
    v36 = 0.0;
    if ((v35 & 1) != 0)
      v37 = 0.0;
    else
      v37 = v34;
    v38 = *(_QWORD *)(v15 + 16);
    if (v38)
    {
      v36 = *(double *)(v15 + 32);
      v39 = v38 - 1;
      if (v39)
      {
        v40 = (double *)(v15 + 40);
        do
        {
          v41 = *v40++;
          v42 = v41;
          if (v36 < v41)
            v36 = v42;
          --v39;
        }
        while (v39);
      }
    }
    if ((~*(_QWORD *)&v37 & 0x7FF0000000000000) == 0)
      goto LABEL_44;
    if ((~*(_QWORD *)&v36 & 0x7FF0000000000000) == 0 || v37 >= v36)
      goto LABEL_44;
    v98 = v14;
    v100 = v12;
    v96 = v19;
    if (v37 > v36)
    {
      __break(1u);
    }
    else
    {
      v94 = v11;
      sub_21424D150((uint64_t)v9, (uint64_t)v10, (uint64_t)v100, v11, v98, v104, v15, v103, v107, v106, v105, v102, v101, (void (*)(uint64_t, uint64_t))sub_2141DD47C);
      v44 = sub_2143872F4(4, v37, v36, 0.0, 1, 1);
      sub_2142D057C((uint64_t)v123, v44, v37, v36);
      sub_21421CF8C((uint64_t)v123, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2142085E4);
      sub_2142CDD00();
      v46 = v45;
      v97 = (char *)v45;
      sub_21421CF8C((uint64_t)v123, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_214208738);
      sub_21424D150((uint64_t)v9, (uint64_t)v10, (uint64_t)v100, v11, v98, v104, v15, v103, v107, v106, v105, v102, v101, (void (*)(uint64_t, uint64_t))sub_2141DD47C);
      v92 = v10;
      v93 = v9;
      v47 = sub_2142B541C(v46, v112);
      sub_21424D200((uint64_t)v9, (uint64_t)v10, (uint64_t)v100, v11, v98, v104, v15, v103, v107, v106, v105, v102, v101, (void (*)(uint64_t, uint64_t))sub_2141FA1C4);
      swift_bridgeObjectRelease();
      sub_2143EDF8C(v95, (uint64_t)v111);
      MEMORY[0x24BDAC7A8](v48);
      v81 = v111;
      v49 = sub_2142342DC((void (*)(_QWORD *__return_ptr, uint64_t *))sub_2142B5538, (uint64_t)&v79, v47);
      v95 = v49;
      v50 = *(_QWORD *)(v47 + 16);
      v19 = (char *)MEMORY[0x24BEE4AF8];
      if (v50)
      {
        v89 = v15;
        v90 = 0;
        v97 = v7;
        v110 = (char *)MEMORY[0x24BEE4AF8];
        sub_2141D3A84(0, v50, 0);
        v19 = v110;
        v91 = v47;
        v51 = v47 + 32;
        do
        {
          v108 = 0;
          v109 = 0xE000000000000000;
          sub_2144250E8();
          v49 = sub_214424F20();
          v53 = v108;
          v52 = v109;
          v110 = v19;
          v55 = *((_QWORD *)v19 + 2);
          v54 = *((_QWORD *)v19 + 3);
          if (v55 >= v54 >> 1)
          {
            v49 = (uint64_t)sub_2141D3A84((char *)(v54 > 1), v55 + 1, 1);
            v19 = v110;
          }
          *((_QWORD *)v19 + 2) = v55 + 1;
          v56 = &v19[16 * v55];
          *((_QWORD *)v56 + 4) = v53;
          *((_QWORD *)v56 + 5) = v52;
          v51 += 8;
          --v50;
        }
        while (v50);
        v7 = v97;
        v11 = v94;
        v15 = v89;
        v47 = v91;
      }
      else
      {
        v11 = v94;
      }
      MEMORY[0x24BDAC7A8](v49);
      v81 = v112;
      v8 = sub_2142B555C(v47, v95, (void (*)(__int128 *__return_ptr, uint64_t, uint64_t, double))sub_2142B5554);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v10 = v92;
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        goto LABEL_41;
    }
    v7 = sub_214226154(0, *((_QWORD *)v7 + 2) + 1, 1, v7);
LABEL_41:
    v59 = *((_QWORD *)v7 + 2);
    v58 = *((_QWORD *)v7 + 3);
    if (v59 >= v58 >> 1)
      v7 = sub_214226154((char *)(v58 > 1), v59 + 1, 1, v7);
    *((_QWORD *)v7 + 2) = v59 + 1;
    v60 = &v7[16 * v59];
    *((_QWORD *)v60 + 4) = v19;
    *((_QWORD *)v60 + 5) = v8;
    sub_21424D200((uint64_t)v93, (uint64_t)v10, (uint64_t)v100, v11, v98, v104, v15, v103, v107, v106, v105, v102, v101, (void (*)(uint64_t, uint64_t))sub_2141FA1C4);
    sub_21421CF8C((uint64_t)v123, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_214208738);
    sub_21422F27C((uint64_t)v111);
    v19 = v96;
    goto LABEL_44;
  }
  v98 = v14;
  v100 = v12;
  v18 = a2[7];
  if (*((_BYTE *)a2 + 56) != 0xFF && (v18 & 1) != 0)
  {
    v92 = v10;
    v93 = v9;
    v94 = v11;
    v96 = (char *)a2[1];
    v91 = a2[2];
    v20 = a2[3];
    v89 = v15;
    v90 = v20;
    v21 = a2[5];
    v82 = a2[4];
    v22 = a2[6];
    v23 = a2[8];
    v24 = a2[9];
    if (a6 == 255)
      a5 = 1;
    v84 = a5;
    if (a6 == 255)
      v26 = 2;
    else
      v26 = a6;
    v83 = v26;
    v28 = a2[10];
    v27 = a2[11];
    sub_2141E83DC(v22, v18);
    swift_bridgeObjectRetain();
    v97 = v7;
    swift_bridgeObjectRetain();
    sub_2141E83DC(v22, v18);
    swift_bridgeObjectRetain();
    v85 = v27;
    v80 = v27;
    v86 = v28;
    v87 = v24;
    v88 = v23;
    v29 = v82;
    sub_21424D040(v8, (uint64_t)v96, v91, v90, v82, v21, v22, v18, v23, v24, v28, v80, (void (*)(uint64_t, uint64_t))sub_2141DD47C);
    v30 = sub_214226380(0, 1, 1, MEMORY[0x24BEE4AF8]);
    v32 = *((_QWORD *)v30 + 2);
    v31 = *((_QWORD *)v30 + 3);
    v19 = v30;
    if (v32 >= v31 >> 1)
      v19 = sub_214226380((char *)(v31 > 1), v32 + 1, 1, v30);
    *((_QWORD *)v19 + 2) = v32 + 1;
    v33 = &v19[32 * v32];
    *((_QWORD *)v33 + 4) = v21;
    *((_QWORD *)v33 + 5) = v22;
    *((_QWORD *)v33 + 6) = v84;
    v33[56] = v83;
    sub_21424D364(v8, (uint64_t)v96, v91, v90, v29, v21, v22, v18, v88, v87, v86, v85, (void (*)(uint64_t, uint64_t))sub_2141FA1C4);
    swift_bridgeObjectRelease();
    sub_21421BBC0(v22, v18);
    v7 = v97;
    v9 = v93;
    v11 = v94;
    v15 = v89;
    v10 = v92;
  }
  else
  {
    swift_bridgeObjectRetain();
    v19 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v100;
  v14 = v98;
  if (v9)
    goto LABEL_17;
LABEL_44:
  v61 = *((_QWORD *)v7 + 2);
  v62 = MEMORY[0x24BEE4AF8];
  if (v61)
  {
    v111[0] = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    sub_2141D4190(0, v61, 0);
    v63 = 0;
    v64 = v111[0];
    do
    {
      v107 = *(_OWORD *)&v7[16 * v63 + 32];
      v111[0] = v64;
      v66 = *(_QWORD *)(v64 + 16);
      v65 = *(_QWORD *)(v64 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v66 >= v65 >> 1)
      {
        sub_2141D4190((char *)(v65 > 1), v66 + 1, 1);
        v64 = v111[0];
      }
      *(_QWORD *)(v64 + 16) = v66 + 1;
      v67 = v64 + 32 * v66;
      *(_OWORD *)(v67 + 32) = v107;
      ++v63;
      *(_QWORD *)(v67 + 48) = 0;
      *(_BYTE *)(v67 + 56) = 0;
    }
    while (v61 != v63);
    swift_bridgeObjectRelease();
    v68 = *((_QWORD *)v19 + 2);
    if (v68)
      goto LABEL_50;
LABEL_56:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v69 = MEMORY[0x24BEE4AF8];
    v77 = v99;
    goto LABEL_57;
  }
  v64 = MEMORY[0x24BEE4AF8];
  v68 = *((_QWORD *)v19 + 2);
  if (!v68)
    goto LABEL_56;
LABEL_50:
  v106 = v64;
  v97 = v7;
  v111[0] = v62;
  swift_bridgeObjectRetain();
  sub_2141D4190(0, v68, 0);
  v69 = v111[0];
  v96 = v19;
  v70 = v19 + 56;
  do
  {
    v71 = *((_QWORD *)v70 - 3);
    v72 = *((_QWORD *)v70 - 2);
    *(_QWORD *)&v107 = *((_QWORD *)v70 - 1);
    v73 = *v70;
    v111[0] = v69;
    v75 = *(_QWORD *)(v69 + 16);
    v74 = *(_QWORD *)(v69 + 24);
    swift_bridgeObjectRetain();
    swift_retain();
    if (v75 >= v74 >> 1)
    {
      sub_2141D4190((char *)(v74 > 1), v75 + 1, 1);
      v69 = v111[0];
    }
    v70 += 32;
    *(_QWORD *)(v69 + 16) = v75 + 1;
    v76 = v69 + 32 * v75;
    *(_QWORD *)(v76 + 32) = v71;
    *(_QWORD *)(v76 + 40) = v72;
    *(_QWORD *)(v76 + 48) = v107;
    *(_BYTE *)(v76 + 56) = v73 | 0x80;
    --v68;
  }
  while (v68);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  v77 = v99;
  v64 = v106;
LABEL_57:
  v111[0] = v64;
  result = sub_2143EB30C(v69);
  *v77 = v111[0];
  return result;
}

uint64_t sub_2142B402C(uint64_t a1)
{
  uint64_t v1;
  double v2;
  uint64_t v3;
  double *v4;
  double v5;
  double v6;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return 0;
  v2 = *(double *)(a1 + 32);
  v3 = v1 - 1;
  if (v1 != 1)
  {
    v4 = (double *)(a1 + 40);
    do
    {
      v5 = *v4++;
      v6 = v5;
      if (v2 < v5)
        v2 = v6;
      --v3;
    }
    while (v3);
  }
  return *(_QWORD *)&v2;
}

int64_t sub_2142B4070(uint64_t a1)
{
  unint64_t v1;
  int64_t v2;
  unint64_t v3;
  unint64_t v4;
  int64x2_t v5;
  int64x2_t *v6;
  unint64_t v7;
  int64x2_t v8;
  int8x16_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t *v12;
  int64_t v13;
  int64_t v14;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(a1 + 32);
  v3 = v1 - 1;
  if (v1 != 1)
  {
    if (v1 >= 5)
    {
      v4 = v3 & 0xFFFFFFFFFFFFFFFCLL | 1;
      v5 = vdupq_n_s64(v2);
      v6 = (int64x2_t *)(a1 + 56);
      v7 = v3 & 0xFFFFFFFFFFFFFFFCLL;
      v8 = v5;
      do
      {
        v5 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v5, v6[-1]), (int8x16_t)v5, (int8x16_t)v6[-1]);
        v8 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v8, *v6), (int8x16_t)v8, *(int8x16_t *)v6);
        v6 += 2;
        v7 -= 4;
      }
      while (v7);
      v9 = vbslq_s8((int8x16_t)vcgtq_s64(v5, v8), (int8x16_t)v5, (int8x16_t)v8);
      v10 = vextq_s8(v9, v9, 8uLL).u64[0];
      v2 = (int64_t)vbsl_s8((int8x8_t)vcgtd_s64(v9.i64[0], v10), *(int8x8_t *)v9.i8, (int8x8_t)v10);
      if (v3 == (v3 & 0xFFFFFFFFFFFFFFFCLL))
        return v2;
    }
    else
    {
      v4 = 1;
    }
    v11 = v1 - v4;
    v12 = (int64_t *)(a1 + 8 * v4 + 32);
    do
    {
      v14 = *v12++;
      v13 = v14;
      if (v2 <= v14)
        v2 = v13;
      --v11;
    }
    while (v11);
  }
  return v2;
}

uint64_t sub_2142B4124@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  _OWORD v17[2];
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  unsigned __int8 v22;
  uint64_t v23;

  v6 = sub_214423B94();
  MEMORY[0x24BDAC7A8](v6);
  v7 = sub_2141D8BF8(qword_253F13A80);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *a1;
  sub_21422F3FC(a2, (uint64_t)&v19);
  if (v22 - 1 >= 2)
  {
    if (v22)
    {
      v23 = v11;
      sub_214423B7C();
      sub_2142B585C();
      sub_21442396C();
      sub_2142B58A0();
      sub_214424D04();
      result = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
      v14 = *((_QWORD *)&v17[0] + 1);
      v13 = *(_QWORD *)&v17[0];
    }
    else
    {
      v17[0] = v19;
      v17[1] = v20;
      v18 = v21;
      v23 = v11;
      v15 = sub_2141E88D0(v17, *((uint64_t *)&v20 + 1));
      v13 = sub_2143F54C0((uint64_t)v15, (uint64_t)&v23, MEMORY[0x24BEE13C8]);
      v14 = v16;
      result = sub_2141E0750((uint64_t)v17, qword_253F12450);
    }
  }
  else
  {
    result = sub_21422F27C((uint64_t)&v19);
    v13 = 0;
    v14 = 0xE000000000000000;
  }
  *a3 = v13;
  a3[1] = v14;
  return result;
}

_QWORD *sub_2142B42E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *(**a3)(_QWORD *__return_ptr, double *)@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *result;
  double v22;
  _QWORD v23[2];

  sub_2144250E8();
  sub_214424F20();
  *(_QWORD *)(a4 + 128) = 0;
  *(_OWORD *)(a4 + 96) = 0u;
  *(_OWORD *)(a4 + 112) = 0u;
  *(_OWORD *)(a4 + 64) = 0u;
  *(_OWORD *)(a4 + 80) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0xE000000000000000;
  sub_2141DCE8C();
  swift_bridgeObjectRetain();
  v10 = sub_214424818();
  v12 = v11;
  v14 = v13 & 1;
  v23[0] = a1;
  v23[1] = a2;
  swift_bridgeObjectRetain();
  v15 = sub_214424818();
  v17 = v16;
  LOBYTE(a1) = v18;
  v20 = v19;
  sub_2141ED0BC(v10, v12, v14);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a4 + 16) = v15;
  *(_QWORD *)(a4 + 24) = v17;
  *(_BYTE *)(a4 + 32) = a1 & 1;
  *(_QWORD *)(a4 + 40) = v20;
  v22 = a5;
  result = (*a3)(v23, &v22);
  *(_QWORD *)(a4 + 136) = v23[0];
  *(_BYTE *)(a4 + 144) = 0;
  return result;
}

uint64_t sub_2142B4450@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t, uint64_t)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t result;

  sub_2143F8874();
  swift_beginAccess();
  v6 = *(_QWORD *)(a1 + 40);
  if (v6)
  {
    v7 = *(_OWORD *)(a1 + 128);
    *(_OWORD *)(a3 + 72) = *(_OWORD *)(a1 + 112);
    v9 = *(_QWORD *)(a1 + 88);
    v8 = *(_QWORD *)(a1 + 96);
    v11 = *(_QWORD *)(a1 + 72);
    v10 = *(_QWORD *)(a1 + 80);
    v12 = *(_DWORD *)(a1 + 64);
    v13 = *(_QWORD *)(a1 + 48);
    v14 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)a3 = v6;
    *(_QWORD *)(a3 + 8) = v13;
    *(_QWORD *)(a3 + 16) = v14;
    *(_BYTE *)(a3 + 24) = v12 & 1;
    *(_QWORD *)(a3 + 32) = v11;
    *(_QWORD *)(a3 + 40) = v10;
    *(_QWORD *)(a3 + 48) = v9;
    *(_QWORD *)(a3 + 56) = v8;
    v15 = *(_BYTE *)(a1 + 104);
    *(_BYTE *)(a3 + 64) = v15;
    *(_OWORD *)(a3 + 88) = v7;
    swift_retain();
    a2(v11, v10);
    swift_bridgeObjectRetain();
    return sub_2141E83DC(v8, v15);
  }
  else
  {
    result = sub_214425628();
    __break(1u);
  }
  return result;
}

uint64_t sub_2142B4560@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t result;
  _OWORD v10[8];
  _BYTE v11[128];
  uint64_t v12[16];

  sub_2143F8874();
  swift_beginAccess();
  sub_2141E801C(a1 + 40, (uint64_t)v11, &qword_253F12F50);
  sub_2141E801C((uint64_t)v11, (uint64_t)v12, &qword_253F12F50);
  if (sub_21424CE60(v12) == 1)
  {
    result = sub_214425628();
    __break(1u);
  }
  else
  {
    sub_2141E801C((uint64_t)v11, (uint64_t)v10, &qword_253F12F50);
    v4 = v10[5];
    a2[4] = v10[4];
    a2[5] = v4;
    v5 = v10[7];
    a2[6] = v10[6];
    a2[7] = v5;
    v6 = v10[1];
    *a2 = v10[0];
    a2[1] = v6;
    v7 = v10[3];
    a2[2] = v10[2];
    a2[3] = v7;
    nullsub_1(a2, v8);
    return sub_2142B53A4((uint64_t)v10);
  }
  return result;
}

uint64_t sub_2142B4684@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _OWORD v9[8];

  sub_2143F8874();
  swift_beginAccess();
  result = sub_2142B58EC(a1 + 40, (uint64_t)v9);
  if (*(_QWORD *)&v9[0])
  {
    v5 = v9[5];
    a2[4] = v9[4];
    a2[5] = v5;
    v6 = v9[7];
    a2[6] = v9[6];
    a2[7] = v6;
    v7 = v9[1];
    *a2 = v9[0];
    a2[1] = v7;
    v8 = v9[3];
    a2[2] = v9[2];
    a2[3] = v8;
  }
  else
  {
    sub_2141E0750((uint64_t)v9, &qword_253F12F60);
    result = sub_214425628();
    __break(1u);
  }
  return result;
}

uint64_t sub_2142B4758@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t, uint64_t)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;
  __int128 v14;
  uint64_t result;

  sub_2143F8874();
  swift_beginAccess();
  v6 = *(_QWORD *)(a1 + 40);
  if (v6)
  {
    v8 = *(_QWORD *)(a1 + 80);
    v7 = *(_QWORD *)(a1 + 88);
    v10 = *(_QWORD *)(a1 + 64);
    v9 = *(_QWORD *)(a1 + 72);
    v12 = *(_QWORD *)(a1 + 48);
    v11 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)a3 = v6;
    *(_QWORD *)(a3 + 8) = v12;
    *(_QWORD *)(a3 + 16) = v11;
    *(_QWORD *)(a3 + 24) = v10;
    *(_QWORD *)(a3 + 32) = v9;
    *(_QWORD *)(a3 + 40) = v8;
    *(_QWORD *)(a3 + 48) = v7;
    v13 = *(_BYTE *)(a1 + 96);
    *(_BYTE *)(a3 + 56) = v13;
    v14 = *(_OWORD *)(a1 + 120);
    *(_OWORD *)(a3 + 64) = *(_OWORD *)(a1 + 104);
    *(_OWORD *)(a3 + 80) = v14;
    swift_retain();
    swift_retain();
    a2(v10, v9);
    swift_bridgeObjectRetain();
    return sub_2141E83DC(v7, v13);
  }
  else
  {
    result = sub_214425628();
    __break(1u);
  }
  return result;
}

double sub_2142B486C@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)(a1 + 96) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

double sub_2142B4884@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t sub_2142B4898@<X0>(uint64_t a1@<X8>)
{
  _OWORD v3[8];

  sub_21424E4E4(v3);
  return sub_2141E801C((uint64_t)v3, a1, &qword_253F12F50);
}

double sub_2142B48D8@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t sub_2142B48F0(uint64_t a1, void (*a2)(__int128 *))
{
  int64_t v2;
  uint64_t v3;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  char v32;
  uint64_t v33;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = MEMORY[0x24BEE4AF8];
  if (v2)
  {
    v33 = MEMORY[0x24BEE4AF8];
    sub_2141D4174(0, v2, 0);
    v3 = v33;
    sub_2141DCE8C();
    v6 = (uint64_t *)(a1 + 40);
    do
    {
      v7 = *(v6 - 1);
      v8 = *v6;
      v26 = 0u;
      v27 = 0u;
      v28 = 0u;
      v29 = 0u;
      v30 = 0u;
      v31 = 0u;
      v32 = 1;
      *(_QWORD *)&v23 = v7;
      *((_QWORD *)&v23 + 1) = v8;
      swift_bridgeObjectRetain_n();
      *(_QWORD *)&v24 = sub_214424818();
      *((_QWORD *)&v24 + 1) = v9;
      LOBYTE(v25) = v10 & 1;
      *((_QWORD *)&v25 + 1) = v11;
      a2(&v23);
      swift_bridgeObjectRelease();
      v33 = v3;
      v13 = *(_QWORD *)(v3 + 16);
      v12 = *(_QWORD *)(v3 + 24);
      if (v13 >= v12 >> 1)
      {
        sub_2141D4174((char *)(v12 > 1), v13 + 1, 1);
        v3 = v33;
      }
      v6 += 2;
      *(_QWORD *)(v3 + 16) = v13 + 1;
      v14 = v3 + 152 * v13;
      v15 = v24;
      *(_OWORD *)(v14 + 32) = v23;
      *(_OWORD *)(v14 + 48) = v15;
      v16 = v25;
      v17 = v26;
      v18 = v28;
      *(_OWORD *)(v14 + 96) = v27;
      *(_OWORD *)(v14 + 112) = v18;
      *(_OWORD *)(v14 + 64) = v16;
      *(_OWORD *)(v14 + 80) = v17;
      v19 = v29;
      v20 = v30;
      v21 = v31;
      *(_BYTE *)(v14 + 176) = v32;
      *(_OWORD *)(v14 + 144) = v20;
      *(_OWORD *)(v14 + 160) = v21;
      *(_OWORD *)(v14 + 128) = v19;
      --v2;
    }
    while (v2);
  }
  return v3;
}

uint64_t sub_2142B4A70(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  char v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;

  v2 = MEMORY[0x24BEE4AF8];
  if (a1)
  {
    sub_2141D8BF8(&qword_253F15D58);
    v3 = swift_allocObject();
    *(_OWORD *)(v3 + 16) = xmmword_2144271E0;
    *(_QWORD *)(v3 + 32) = a1;
    v25 = v3;
    sub_214424FF8();
    v4 = v25;
    v5 = sub_2142B5AF4;
    v6 = a1;
  }
  else
  {
    v6 = 0;
    v5 = sub_2142B48D8;
    v4 = MEMORY[0x24BEE4AF8];
  }
  sub_2141D8BF8(&qword_253F13458);
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 32) = v2;
  *(_QWORD *)(v7 + 40) = 1;
  *(_WORD *)(v7 + 16) = 256;
  *(_OWORD *)(v7 + 48) = 0u;
  *(_OWORD *)(v7 + 64) = 0u;
  *(_OWORD *)(v7 + 80) = 0u;
  *(_OWORD *)(v7 + 96) = 0u;
  *(_OWORD *)(v7 + 112) = 0u;
  *(_OWORD *)(v7 + 128) = 0u;
  *(_OWORD *)(v7 + 144) = 0u;
  *(_OWORD *)(v7 + 160) = 0u;
  *(_QWORD *)(v7 + 176) = 0;
  *(_QWORD *)(v7 + 24) = v4;
  if (!(v4 >> 62))
  {
    v8 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_retain_n();
    result = swift_bridgeObjectRetain();
    if (v8)
      goto LABEL_6;
LABEL_23:
    swift_bridgeObjectRelease();
LABEL_24:
    v22 = swift_allocObject();
    *(_QWORD *)(v22 + 16) = v5;
    *(_QWORD *)(v22 + 24) = v6;
    v23 = *(_QWORD *)(v7 + 168);
    *(_QWORD *)(v7 + 168) = sub_2141E7E10;
    *(_QWORD *)(v7 + 176) = v22;
    sub_2141D972C(v23);
    return v7;
  }
  swift_retain_n();
  swift_bridgeObjectRetain();
  result = sub_2144256AC();
  v8 = result;
  if (!result)
    goto LABEL_23;
LABEL_6:
  if (v8 >= 1)
  {
    v24 = v5;
    if ((v4 & 0xC000000000000001) != 0)
    {
      v10 = 0;
      do
      {
        v11 = MEMORY[0x2199CCE3C](v10, v4);
        swift_weakInit();
        v12 = *(_QWORD **)(v11 + 32);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v11 + 32) = v12;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v12 = sub_214221F04(0, v12[2] + 1, 1, v12);
          *(_QWORD *)(v11 + 32) = v12;
        }
        v15 = v12[2];
        v14 = v12[3];
        if (v15 >= v14 >> 1)
        {
          v12 = sub_214221F04((_QWORD *)(v14 > 1), v15 + 1, 1, v12);
          *(_QWORD *)(v11 + 32) = v12;
        }
        ++v10;
        v12[2] = v15 + 1;
        sub_2141E801C((uint64_t)&v25, (uint64_t)&v12[v15 + 4], &qword_253F13188);
        swift_unknownObjectRelease();
      }
      while (v8 != v10);
    }
    else
    {
      v16 = 0;
      do
      {
        v17 = *(_QWORD *)(v4 + 8 * v16 + 32);
        swift_weakInit();
        v18 = *(_QWORD **)(v17 + 32);
        swift_retain();
        v19 = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v17 + 32) = v18;
        if ((v19 & 1) == 0)
        {
          v18 = sub_214221F04(0, v18[2] + 1, 1, v18);
          *(_QWORD *)(v17 + 32) = v18;
        }
        v21 = v18[2];
        v20 = v18[3];
        if (v21 >= v20 >> 1)
        {
          v18 = sub_214221F04((_QWORD *)(v20 > 1), v21 + 1, 1, v18);
          *(_QWORD *)(v17 + 32) = v18;
        }
        ++v16;
        v18[2] = v21 + 1;
        sub_2141E801C((uint64_t)&v25, (uint64_t)&v18[v21 + 4], &qword_253F13188);
        swift_release();
      }
      while (v8 != v16);
    }
    swift_bridgeObjectRelease();
    v5 = v24;
    goto LABEL_24;
  }
  __break(1u);
  return result;
}

uint64_t sub_2142B4DA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  char v47;
  uint64_t v48;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;

  v5 = sub_2142B2670(4u, a1, a2);
  sub_2142B2670(5u, a1, a2);
  v51 = sub_2142B2670(7u, a1, a2);
  v50 = sub_2142B2670(6u, a1, a2);
  v6 = sub_2142B26F4(4u, a1, a2);
  v7 = sub_2142B26F4(6u, a1, a2);
  if (*(_QWORD *)(a1 + 16) && (v8 = sub_214336B74(4u), (v9 & 1) != 0))
  {
    v10 = *(_QWORD *)(a1 + 56) + 88 * v8;
    v48 = *(_QWORD *)v10;
    v11 = *(_BYTE *)(v10 + 8);
  }
  else
  {
    v48 = 0;
    v11 = -1;
  }
  v47 = v11;
  if (v5)
  {
    sub_2141D8BF8(&qword_253F15D58);
    v12 = swift_allocObject();
    *(_OWORD *)(v12 + 16) = xmmword_2144271E0;
    *(_QWORD *)(v12 + 32) = v5;
    v52 = v12;
    sub_214424FF8();
    v13 = v52;
    v14 = sub_2142B537C;
    v15 = v5;
  }
  else
  {
    v15 = 0;
    v13 = MEMORY[0x24BEE4AF8];
    v14 = sub_2142B4884;
  }
  swift_retain_n();
  v16 = sub_2142414E8(v13, (uint64_t)v14, v15);
  v17 = swift_retain();
  v18 = sub_2142B4A70(v17);
  swift_release();
  if (v51)
  {
    sub_2141D8BF8(&qword_253F15D58);
    v19 = swift_allocObject();
    *(_OWORD *)(v19 + 16) = xmmword_2144271E0;
    *(_QWORD *)(v19 + 32) = v51;
    v53 = v19;
    sub_214424FF8();
    v20 = v53;
    v21 = sub_2142B539C;
    v22 = v51;
  }
  else
  {
    v22 = 0;
    v20 = MEMORY[0x24BEE4AF8];
    v21 = sub_2142B4898;
  }
  swift_retain_n();
  v23 = sub_21424121C(v20, (uint64_t)v21, v22);
  if (v50)
  {
    sub_2141D8BF8(&qword_253F15D58);
    v24 = swift_allocObject();
    *(_OWORD *)(v24 + 16) = xmmword_2144271E0;
    *(_QWORD *)(v24 + 32) = v50;
    v54 = v24;
    sub_214424FF8();
    v25 = v54;
    v26 = sub_2142B535C;
    v27 = v50;
  }
  else
  {
    v27 = 0;
    v25 = MEMORY[0x24BEE4AF8];
    v26 = sub_2142B486C;
  }
  swift_retain_n();
  v28 = sub_214240F30(v25, (uint64_t)v26, v27);
  sub_2141D8BF8(&qword_253F15D58);
  v29 = swift_allocObject();
  *(_OWORD *)(v29 + 16) = xmmword_214428BD0;
  *(_QWORD *)(v29 + 32) = v16;
  *(_QWORD *)(v29 + 40) = v18;
  *(_QWORD *)(v29 + 48) = v23;
  *(_QWORD *)(v29 + 56) = v28;
  v55 = v29;
  sub_214424FF8();
  v30 = (_QWORD *)swift_allocObject();
  v30[2] = sub_2142B2A1C;
  v30[3] = 0;
  v30[4] = v16;
  v30[5] = v18;
  v30[6] = v23;
  v30[7] = v28;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  v31 = sub_214240F0C(v55, (uint64_t)sub_2142B52DC, (uint64_t)v30);
  if (v6)
  {
    v32 = swift_allocObject();
    *(_OWORD *)(v32 + 16) = xmmword_2144271E0;
    *(_QWORD *)(v32 + 32) = v6;
    v56 = v32;
    sub_214424FF8();
    v33 = v56;
    v34 = sub_2142B537C;
    v35 = v6;
  }
  else
  {
    v35 = 0;
    v33 = MEMORY[0x24BEE4AF8];
    v34 = sub_2142B4884;
  }
  swift_retain_n();
  v36 = sub_214240EE8(v33, (uint64_t)v34, v35);
  if (v7)
  {
    v37 = swift_allocObject();
    *(_OWORD *)(v37 + 16) = xmmword_2144271E0;
    *(_QWORD *)(v37 + 32) = v7;
    v57 = v37;
    sub_214424FF8();
    v38 = v57;
    v39 = sub_2142B535C;
    v40 = v7;
  }
  else
  {
    v40 = 0;
    v38 = MEMORY[0x24BEE4AF8];
    v39 = sub_2142B486C;
  }
  swift_retain_n();
  v41 = sub_214240EC4(v38, (uint64_t)v39, v40);
  v42 = swift_allocObject();
  *(_QWORD *)(v42 + 16) = v48;
  *(_BYTE *)(v42 + 24) = v47;
  v43 = swift_allocObject();
  *(_OWORD *)(v43 + 16) = xmmword_214428BD0;
  *(_QWORD *)(v43 + 32) = v31;
  *(_QWORD *)(v43 + 40) = v36;
  *(_QWORD *)(v43 + 48) = v41;
  *(_QWORD *)(v43 + 56) = a3;
  v58 = v43;
  sub_214424FF8();
  v44 = (_QWORD *)swift_allocObject();
  v44[2] = sub_2142B531C;
  v44[3] = v42;
  v44[4] = v31;
  v44[5] = v36;
  v44[6] = v41;
  v44[7] = a3;
  swift_retain_n();
  swift_retain();
  swift_retain();
  swift_retain();
  v45 = sub_214240EA0(v58, (uint64_t)sub_2142B532C, (uint64_t)v44);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v45;
}

uint64_t sub_2142B52DC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = sub_214245A6C(*(void (**)(uint64_t *__return_ptr, uint64_t *, _BYTE *, _BYTE *, _QWORD *))(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD **)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD **)(v1 + 56));
  *a1 = result;
  return result;
}

uint64_t sub_2142B530C()
{
  return swift_deallocObject();
}

uint64_t sub_2142B531C@<X0>(char **a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v5;

  return sub_2142B36D0(a1, a2, a3, a4, *(_QWORD *)(v5 + 16), *(unsigned __int8 *)(v5 + 24), a5);
}

uint64_t sub_2142B532C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = sub_21424570C(*(void (**)(uint64_t *__return_ptr, uint64_t *, uint64_t *, uint64_t *, char *))(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD **)(v1 + 40), *(_QWORD **)(v1 + 48), *(_QWORD *)(v1 + 56));
  *a1 = result;
  return result;
}

uint64_t sub_2142B535C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_2142B4450(v1, (void (*)(uint64_t, uint64_t))sub_2141DD47C, a1);
}

uint64_t sub_2142B537C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_2142B4758(v1, (void (*)(uint64_t, uint64_t))sub_2141DD47C, a1);
}

uint64_t sub_2142B539C@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_2142B4560(v1, a1);
}

uint64_t sub_2142B53A4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 v4;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(a1 + 80);
  v4 = *(_BYTE *)(a1 + 88);
  swift_bridgeObjectRetain();
  swift_retain();
  sub_2141DD47C(v2);
  swift_bridgeObjectRetain();
  sub_2141E83DC(v3, v4);
  return a1;
}

uint64_t sub_2142B541C(uint64_t result, _QWORD *(**a2)(double *__return_ptr, uint64_t *))
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;

  v3 = 0;
  v4 = *(_QWORD *)(result + 16);
  v5 = result + 32;
  v6 = MEMORY[0x24BEE4AF8];
LABEL_2:
  if (v3 <= v4)
    v7 = v4;
  else
    v7 = v3;
  while (1)
  {
    if (v4 == v3)
      return v6;
    if (v7 == v3)
      break;
    v8 = *(_QWORD *)(v5 + 8 * v3++);
    v11 = v8;
    result = (uint64_t)(*a2)(&v12, &v11);
    if (v12 > 0.0)
    {
      result = swift_isUniquelyReferenced_nonNull_native();
      v13 = v6;
      if ((result & 1) == 0)
      {
        result = (uint64_t)sub_2141D3AA0(0, *(_QWORD *)(v6 + 16) + 1, 1);
        v6 = v13;
      }
      v10 = *(_QWORD *)(v6 + 16);
      v9 = *(_QWORD *)(v6 + 24);
      if (v10 >= v9 >> 1)
      {
        result = (uint64_t)sub_2141D3AA0((char *)(v9 > 1), v10 + 1, 1);
        v6 = v13;
      }
      *(_QWORD *)(v6 + 16) = v10 + 1;
      *(_QWORD *)(v6 + 8 * v10 + 32) = v8;
      goto LABEL_2;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_2142B5538@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_2142B4124(a1, *(_QWORD *)(v2 + 16), a2);
}

_QWORD *sub_2142B5554@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  uint64_t v4;

  return sub_2142B42E4(a1, a2, *(_QWORD *(***)(_QWORD *__return_ptr, double *))(v4 + 16), a3, a4);
}

uint64_t sub_2142B555C(uint64_t a1, uint64_t a2, void (*a3)(__int128 *__return_ptr, uint64_t, uint64_t, double))
{
  unint64_t v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  double *v9;
  uint64_t result;
  uint64_t *v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  int64_t v29;
  unint64_t v30;
  uint64_t *v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  int64_t v45;
  int64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  int64_t v50;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  char v61;
  uint64_t v62;

  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a2 + 16);
  if (v6 >= v5)
    v7 = *(_QWORD *)(a1 + 16);
  else
    v7 = *(_QWORD *)(a2 + 16);
  v62 = MEMORY[0x24BEE4AF8];
  sub_2141D4174(0, v7, 0);
  v8 = v62;
  v45 = v7;
  v47 = a2;
  v48 = a1;
  v49 = v5;
  v46 = v6;
  if (v7)
  {
    v9 = (double *)(a1 + 32);
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRetain();
    v11 = (uint64_t *)(a2 + 40);
    v12 = v5;
    v13 = v7;
    v14 = v6;
    while (v12)
    {
      if (!v14)
        goto LABEL_26;
      v15 = *v9;
      v16 = *(v11 - 1);
      v17 = *v11;
      swift_bridgeObjectRetain();
      a3(&v52, v16, v17, v15);
      result = swift_bridgeObjectRelease();
      v62 = v8;
      v19 = *(_QWORD *)(v8 + 16);
      v18 = *(_QWORD *)(v8 + 24);
      if (v19 >= v18 >> 1)
      {
        result = (uint64_t)sub_2141D4174((char *)(v18 > 1), v19 + 1, 1);
        v8 = v62;
      }
      *(_QWORD *)(v8 + 16) = v19 + 1;
      v20 = v8 + 152 * v19;
      v21 = v53;
      *(_OWORD *)(v20 + 32) = v52;
      *(_OWORD *)(v20 + 48) = v21;
      v22 = v54;
      v23 = v55;
      v24 = v57;
      *(_OWORD *)(v20 + 96) = v56;
      *(_OWORD *)(v20 + 112) = v24;
      *(_OWORD *)(v20 + 64) = v22;
      *(_OWORD *)(v20 + 80) = v23;
      v25 = v58;
      v26 = v59;
      v27 = v60;
      *(_BYTE *)(v20 + 176) = v61;
      *(_OWORD *)(v20 + 144) = v26;
      *(_OWORD *)(v20 + 160) = v27;
      --v14;
      *(_OWORD *)(v20 + 128) = v25;
      --v12;
      v11 += 2;
      ++v9;
      if (!--v13)
        goto LABEL_13;
    }
    __break(1u);
LABEL_26:
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRetain();
LABEL_13:
    if (v49 <= v46)
    {
LABEL_24:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v8;
    }
    v28 = 0;
    if (v45 <= v46)
      v29 = v46;
    else
      v29 = v45;
    v50 = v29 - v45;
    v30 = v49 - v45;
    v31 = (uint64_t *)(v47 + 16 * v45 + 40);
    while (v30 != v28)
    {
      if (v46 - v45 == v28)
        goto LABEL_24;
      if (v50 == v28)
        goto LABEL_28;
      v32 = *(double *)(v48 + 8 * v45 + 32 + 8 * v28);
      v33 = *(v31 - 1);
      v34 = *v31;
      swift_bridgeObjectRetain();
      a3(&v52, v33, v34, v32);
      result = swift_bridgeObjectRelease();
      v62 = v8;
      v36 = *(_QWORD *)(v8 + 16);
      v35 = *(_QWORD *)(v8 + 24);
      if (v36 >= v35 >> 1)
      {
        result = (uint64_t)sub_2141D4174((char *)(v35 > 1), v36 + 1, 1);
        v8 = v62;
      }
      *(_QWORD *)(v8 + 16) = v36 + 1;
      v37 = v8 + 152 * v36;
      v38 = v53;
      *(_OWORD *)(v37 + 32) = v52;
      *(_OWORD *)(v37 + 48) = v38;
      v39 = v54;
      v40 = v55;
      v41 = v57;
      *(_OWORD *)(v37 + 96) = v56;
      *(_OWORD *)(v37 + 112) = v41;
      *(_OWORD *)(v37 + 64) = v39;
      *(_OWORD *)(v37 + 80) = v40;
      v42 = v58;
      v43 = v59;
      v44 = v60;
      *(_BYTE *)(v37 + 176) = v61;
      *(_OWORD *)(v37 + 144) = v43;
      *(_OWORD *)(v37 + 160) = v44;
      *(_OWORD *)(v37 + 128) = v42;
      ++v28;
      v31 += 2;
      if (v30 == v28)
        goto LABEL_24;
    }
  }
  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

unint64_t sub_2142B585C()
{
  unint64_t result;

  result = qword_253F12658;
  if (!qword_253F12658)
  {
    result = MEMORY[0x2199CD934](MEMORY[0x24BEE13D0], MEMORY[0x24BEE13C8]);
    atomic_store(result, (unint64_t *)&qword_253F12658);
  }
  return result;
}

unint64_t sub_2142B58A0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_253F12438;
  if (!qword_253F12438)
  {
    v1 = sub_2141D7924(qword_253F13A80);
    result = MEMORY[0x2199CD934](MEMORY[0x24BDCD4C0], v1);
    atomic_store(result, (unint64_t *)&qword_253F12438);
  }
  return result;
}

uint64_t sub_2142B58EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_2141D8BF8(&qword_253F12F60);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_2142B5934(uint64_t a1)
{
  uint64_t v1;

  return sub_2142B3670(a1, *(void (***)(uint64_t *__return_ptr, _QWORD *))(v1 + 16));
}

uint64_t sub_2142B593C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    return 0;
  v4 = 0;
  v15 = a1 + 32;
  while (1)
  {
    v5 = (uint64_t *)(v15 + 16 * v4);
    v6 = *v5;
    v7 = *(_QWORD *)(*v5 + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v8 = sub_21442510C();
    v17 = v8;
    if (v7)
    {
      v9 = (uint64_t *)(v6 + 40);
      do
      {
        v11 = *(v9 - 1);
        v10 = *v9;
        swift_bridgeObjectRetain();
        sub_21420FCB4(&v16, v11, v10);
        swift_bridgeObjectRelease();
        v9 += 2;
        --v7;
      }
      while (v7);
      v12 = v17;
    }
    else
    {
      v12 = v8;
    }
    v13 = sub_2142B277C(v12, a2);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v13 & 1) != 0)
      break;
    if (++v4 == v2)
      return 0;
  }
  return v4;
}

double sub_2142B5A70(uint64_t a1)
{
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_2142B35F4(a1, (void (**)(_OWORD *__return_ptr, _QWORD *))*(_QWORD *)(v1 + 16)).n128_u64[0];
  return result;
}

uint64_t sub_2142B5A78(_QWORD *a1)
{
  uint64_t v1;

  return sub_2142B3594(a1, *(void (***)(_QWORD *__return_ptr, _QWORD *))(v1 + 16));
}

uint64_t sub_2142B5A80(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_2141D8BF8((uint64_t *)&unk_253F0FF58);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_2142B5AC8(_QWORD *a1)
{
  uint64_t v1;

  return sub_2142B3530(a1, *(void (***)(uint64_t *__return_ptr, _QWORD *))(v1 + 16));
}

uint64_t sub_2142B5AD0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2142B5AF4@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_2142B4684(v1, a1);
}

uint64_t AxisValue.index.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

uint64_t AxisValue.count.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

void AxisValue.as<A>(_:)(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  int v9;

  v7 = *(_QWORD *)v3;
  v8 = *(_QWORD *)(v3 + 8);
  v9 = *(unsigned __int8 *)(v3 + 16);
  sub_2141DD14C(v7, v8, v9);
  sub_2143F9FE4(v7, v8, v9, a1, a2, a3);
}

uint64_t destroy for AnyPrimitivePlottable(uint64_t a1)
{
  return sub_2141E60B8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t initializeWithCopy for AxisValue(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_BYTE *)(a2 + 16);
  sub_2141DD14C(*(_QWORD *)a2, v5, v6);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  return a1;
}

uint64_t assignWithCopy for AxisValue(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_BYTE *)(a2 + 16);
  sub_2141DD14C(*(_QWORD *)a2, v5, v6);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  v9 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v6;
  sub_2141E60B8(v7, v8, v9);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

uint64_t assignWithTake for AxisValue(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v4 = *(_BYTE *)(a2 + 16);
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v7 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v4;
  sub_2141E60B8(v5, v6, v7);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for AxisValue(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 40))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AxisValue(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 40) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for AxisValue()
{
  return &type metadata for AxisValue;
}

uint64_t *initializeBufferWithCopyOfBuffer for _ChartContentInputs(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_21442423C();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_214423DB0();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = a3[6];
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = sub_2144244D0();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
    *(_DWORD *)((char *)a1 + a3[7]) = *(_DWORD *)((char *)a2 + a3[7]);
  }
  return a1;
}

uint64_t destroy for _ChartContentInputs(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = sub_21442423C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = sub_214423DB0();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = a1 + *(int *)(a2 + 24);
  v8 = sub_2144244D0();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
}

uint64_t initializeWithCopy for _ChartContentInputs(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_21442423C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_214423DB0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_2144244D0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  *(_DWORD *)(a1 + a3[7]) = *(_DWORD *)(a2 + a3[7]);
  return a1;
}

uint64_t assignWithCopy for _ChartContentInputs(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_21442423C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_214423DB0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_2144244D0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  *(_DWORD *)(a1 + a3[7]) = *(_DWORD *)(a2 + a3[7]);
  return a1;
}

uint64_t initializeWithTake for _ChartContentInputs(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_21442423C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_214423DB0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_2144244D0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  *(_DWORD *)(a1 + a3[7]) = *(_DWORD *)(a2 + a3[7]);
  return a1;
}

uint64_t assignWithTake for _ChartContentInputs(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_21442423C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_214423DB0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_2144244D0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  *(_DWORD *)(a1 + a3[7]) = *(_DWORD *)(a2 + a3[7]);
  return a1;
}

uint64_t getEnumTagSinglePayload for _ChartContentInputs()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2142B61B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = sub_21442423C();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = sub_214423DB0();
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = *(int *)(a3 + 20);
    }
    else
    {
      v8 = sub_2144244D0();
      v12 = *(_QWORD *)(v8 - 8);
      v13 = *(int *)(a3 + 24);
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for _ChartContentInputs()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_2142B6254(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v8 = sub_21442423C();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = sub_214423DB0();
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = sub_2144244D0();
      v14 = *(_QWORD *)(v10 - 8);
      v15 = *(int *)(a4 + 24);
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for _ChartContentInputs(uint64_t a1)
{
  return sub_2141FE0D4(a1, qword_254D6A728);
}

uint64_t sub_2142B6308()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  result = sub_21442423C();
  if (v1 <= 0x3F)
  {
    result = sub_214423DB0();
    if (v2 <= 0x3F)
    {
      result = sub_2144244D0();
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for _ChartContentOutputs(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_214424500();
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t destroy for _ChartContentOutputs(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_214424500();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t initializeWithCopy for _ChartContentOutputs(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_214424500();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t assignWithCopy for _ChartContentOutputs(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_214424500();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t initializeWithTake for _ChartContentOutputs(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_214424500();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t assignWithTake for _ChartContentOutputs(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_214424500();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for _ChartContentOutputs()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2142B6540(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_214424500();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for _ChartContentOutputs()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_2142B6588(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_214424500();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for _ChartContentOutputs(uint64_t a1)
{
  return sub_2141FE0D4(a1, qword_254D6A7C0);
}

uint64_t sub_2142B65DC()
{
  uint64_t result;
  unint64_t v1;

  result = sub_214424500();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

