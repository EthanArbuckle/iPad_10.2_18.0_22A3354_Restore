void *AreaMark.init<A, B>(xStart:xEnd:y:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, void *a8@<X8>)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t);
  _BYTE v23[312];
  _BYTE v24[144];
  _BYTE v25[144];
  _BYTE v26[144];
  _BYTE v27[144];
  _QWORD __src[39];

  sub_2143D8D5C(a1, a2, a4, a6, (uint64_t)v24);
  sub_2141EDFD8((uint64_t)v24, (uint64_t)v23);
  sub_2143D8C7C(a3, a5, a7, v16, (uint64_t)v25);
  sub_2141EDFD8((uint64_t)v25, (uint64_t)v26);
  v18 = type metadata accessor for PlottableValue(0, a5, a7, v17);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(a3, v18);
  v20 = type metadata accessor for PlottableValue(0, a4, a6, v19);
  v21 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 8);
  v21(a2, v20);
  v21(a1, v20);
  sub_2141EDFD8((uint64_t)v23, (uint64_t)v27);
  sub_2141EDFD8((uint64_t)v27, (uint64_t)__src);
  sub_2141EDFD8((uint64_t)v26, (uint64_t)&__src[18]);
  __src[37] = 0;
  __src[36] = 0;
  LOBYTE(__src[38]) = -1;
  return memcpy(a8, __src, 0x131uLL);
}

void *AreaMark.init<A, B>(x:yStart:yEnd:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, void *a8@<X8>)
{
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  _BYTE v22[312];
  _BYTE v23[144];
  _BYTE v24[144];
  _BYTE v25[144];
  _BYTE v26[144];
  _QWORD __src[39];

  sub_2143D8C7C(a1, a4, a6, a4, (uint64_t)v23);
  sub_2141EDFD8((uint64_t)v23, (uint64_t)v22);
  sub_2143D8D5C(a2, a3, a5, a7, (uint64_t)v24);
  sub_2141EDFD8((uint64_t)v24, (uint64_t)v25);
  v17 = type metadata accessor for PlottableValue(0, a5, a7, v16);
  v18 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8);
  v18(a3, v17);
  v18(a2, v17);
  v20 = type metadata accessor for PlottableValue(0, a4, a6, v19);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(a1, v20);
  sub_2141EDFD8((uint64_t)v22, (uint64_t)v26);
  sub_2141EDFD8((uint64_t)v26, (uint64_t)__src);
  sub_2141EDFD8((uint64_t)v25, (uint64_t)&__src[18]);
  __src[37] = 0;
  __src[36] = 0;
  LOBYTE(__src[38]) = -1;
  return memcpy(a8, __src, 0x131uLL);
}

void *AreaMark.init<A, B, C>(x:y:series:stacking:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t);
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  char v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  __int128 v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  __int128 v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  void *v111;
  _BYTE v112[144];
  _BYTE v113[305];
  __int128 v114;
  char v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char v119;
  uint64_t v120;
  uint64_t v121;
  char v122;
  __int16 v123;
  uint64_t v124;
  uint64_t v125;
  char v126;
  uint64_t v127;
  uint64_t v128;
  char v129;
  _BYTE v130[144];
  _BYTE v131[168];
  __int128 v132;
  __int128 v133;
  uint64_t v134;
  uint64_t v135;
  unsigned __int8 v136;
  uint64_t v137;
  uint64_t v138;
  __int128 v139;
  __int128 v140;
  uint64_t v141;
  uint64_t v142;
  char v143;
  uint64_t v144;
  uint64_t v145;
  __int128 v146;
  __int128 v147;
  uint64_t v148;
  _BYTE v149[24];
  __int128 v150;
  __int128 v151;
  uint64_t v152;
  _BYTE v153[40];

  v99 = a6;
  v87 = a4;
  v108 = a3;
  v111 = a9;
  v100 = a11;
  v102 = *(_QWORD *)(a7 - 8);
  v103 = a7;
  MEMORY[0x24BDAC7A8](a1);
  v101 = (uint64_t)&v83 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for PlottableValue(0, v17, a10, v16);
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)&v83 - v20;
  v23 = type metadata accessor for PlottableValue(0, a5, a8, v22);
  MEMORY[0x24BDAC7A8](v23);
  v25 = (char *)&v83 - v24;
  v104 = v26;
  v27 = *(void (**)(char *, uint64_t))(v26 + 16);
  v110 = a1;
  v106 = v28;
  v27(v25, a1);
  sub_2143D046C((uint64_t)v25, a5, a8, (uint64_t)&v132);
  v93 = v132;
  v29 = v133;
  v94 = *((_QWORD *)&v133 + 1);
  v95 = v134;
  v96 = v135;
  v97 = v136;
  v30 = v137;
  v31 = v138;
  v105 = v19;
  v32 = *(void (**)(char *, uint64_t, uint64_t))(v19 + 16);
  v109 = a2;
  v107 = v18;
  v32(v21, a2, v18);
  sub_2143D046C((uint64_t)v21, v99, a10, (uint64_t)&v139);
  v98 = v139;
  LODWORD(v99) = v140;
  v33 = *((_QWORD *)&v140 + 1);
  v34 = v141;
  v35 = v142;
  v36 = v143;
  v37 = v144;
  v38 = v145;
  if ((v143 & 0x80000000) == 0)
  {
    if (!v143)
    {
      v84 = v142;
      v85 = v141;
      sub_2141EF1B0(v141, v142, 0);
      v150 = v132;
      v151 = v133;
      sub_21421CC0C((uint64_t)&v150, (uint64_t)v153);
      v152 = *((_QWORD *)&v151 + 1);
      v61 = v134;
      v62 = v135;
      v114 = v93;
      v115 = v29;
      v116 = v94;
      v117 = v95;
      v118 = v96;
      v119 = v97;
      v120 = v30;
      v121 = v31;
      v63 = v136;
      sub_21428F980((uint64_t)&v114);
      sub_2141EDFD8((uint64_t)&v114, (uint64_t)v130);
      v146 = v139;
      v147 = v140;
      sub_21421CC0C((uint64_t)&v146, (uint64_t)v149);
      v148 = *((_QWORD *)&v147 + 1);
      v112[0] = v99;
      *(_OWORD *)v113 = v98;
      v113[16] = v99;
      *(_QWORD *)&v113[24] = v33;
      v64 = v84;
      v65 = v85;
      *(_QWORD *)&v113[32] = v85;
      *(_QWORD *)&v113[40] = v84;
      v113[48] = 0;
      *(_QWORD *)&v113[56] = v37;
      *(_QWORD *)&v113[64] = v38;
      v113[72] = v87;
      *(_WORD *)&v113[73] = 257;
      v91 = v62;
      v92 = v61;
      *(_QWORD *)&v113[80] = v61;
      *(_QWORD *)&v113[88] = v62;
      v113[96] = v63;
      *(_QWORD *)&v113[104] = 0;
      *(_QWORD *)&v113[112] = 0;
      v113[120] = -4;
      sub_2141EFEF4((uint64_t)v113);
      sub_2141EDFD8((uint64_t)v113, (uint64_t)v131);
      sub_2141DD140(v61, v62, v63);
      sub_2141DD140(v61, v62, v63);
      sub_21421CE7C((uint64_t)v153);
      sub_2141F92E8((uint64_t)&v152);
      sub_21421CE7C((uint64_t)v149);
      sub_2141F92E8((uint64_t)&v148);
      v66 = v65;
      v67 = v64;
      sub_2141DD140(v65, v64, 0);
      v68 = v103;
      v69 = v100;
      v48 = type metadata accessor for PlottableValue(0, v103, v100, v70);
      v71 = v101;
      v50 = v108;
      sub_2143729C8(v48, v72, v101);
      v57 = sub_214400B9C(v71, v68, v69);
      v100 = v73;
      v55 = v74;
      (*(void (**)(uint64_t, uint64_t))(v102 + 8))(v71, v68);
      sub_21421CC48((uint64_t)v149);
      sub_2141F9244((uint64_t)&v148);
      sub_2141EF1B0(v66, v67, 0);
      sub_21421CC48((uint64_t)v153);
      sub_2141F9244((uint64_t)&v152);
      v59 = v91;
      v58 = v92;
      v60 = v63;
      goto LABEL_12;
    }
    if (v143 == 1)
      sub_2141EF1B0(v141, v142, 1);
  }
  v91 = v33;
  v92 = v37;
  v39 = v134;
  v40 = v135;
  v41 = v136;
  v89 = v135;
  v90 = v38;
  v88 = v134;
  if (((char)v136 & 0x80000000) == 0)
  {
    if (!v136)
    {
      sub_2141EF1B0(v134, v135, 0);
      v150 = v139;
      v151 = v140;
      sub_21421CC0C((uint64_t)&v150, (uint64_t)v153);
      v152 = *((_QWORD *)&v151 + 1);
      v146 = v132;
      v147 = v133;
      sub_21421CC0C((uint64_t)&v146, (uint64_t)v149);
      v148 = *((_QWORD *)&v147 + 1);
      v112[0] = v29;
      v114 = v93;
      v115 = v29;
      v116 = v94;
      v117 = v95;
      v118 = v96;
      v119 = v97;
      v120 = v30;
      v121 = v31;
      v122 = v87;
      v123 = 256;
      v124 = v34;
      v125 = v35;
      v126 = v36;
      v128 = 0;
      v127 = 0;
      v129 = -4;
      sub_2141EFEF4((uint64_t)&v114);
      sub_2141EDFD8((uint64_t)&v114, (uint64_t)v130);
      *(_OWORD *)v113 = v98;
      v113[16] = v99;
      *(_QWORD *)&v113[24] = v91;
      *(_QWORD *)&v113[32] = v34;
      *(_QWORD *)&v113[40] = v35;
      v113[48] = v36;
      *(_QWORD *)&v113[56] = v92;
      *(_QWORD *)&v113[64] = v90;
      sub_21428F980((uint64_t)v113);
      sub_2141EDFD8((uint64_t)v113, (uint64_t)v131);
      sub_2141DD140(v34, v35, v36);
      sub_2141DD140(v34, v35, v36);
      sub_21421CE7C((uint64_t)v153);
      sub_2141F92E8((uint64_t)&v152);
      sub_21421CE7C((uint64_t)v149);
      sub_2141F92E8((uint64_t)&v148);
      sub_2141DD140(v39, v40, 0);
      v75 = v103;
      v76 = v100;
      v48 = type metadata accessor for PlottableValue(0, v103, v100, v77);
      v78 = v101;
      v50 = v108;
      sub_2143729C8(v48, v79, v101);
      v57 = sub_214400B9C(v78, v75, v76);
      v100 = v80;
      v55 = v81;
      (*(void (**)(uint64_t, uint64_t))(v102 + 8))(v78, v75);
      sub_21421CC48((uint64_t)v153);
      sub_2141F9244((uint64_t)&v152);
      sub_2141EF1B0(v34, v35, v36);
      sub_21421CC48((uint64_t)v149);
      sub_2141F9244((uint64_t)&v148);
      v58 = v88;
      v59 = v89;
      v60 = 0;
      goto LABEL_12;
    }
    if (v136 == 1)
    {
      sub_2141EF1B0(v134, v135, 1);
      v41 = 1;
    }
  }
  v150 = v132;
  v151 = v133;
  v42 = v41;
  v86 = v41;
  sub_21421CC0C((uint64_t)&v150, (uint64_t)v153);
  v152 = *((_QWORD *)&v151 + 1);
  v114 = v93;
  v115 = v29;
  v116 = v94;
  v117 = v95;
  v118 = v96;
  v119 = v97;
  v120 = v30;
  v121 = v31;
  sub_21428F980((uint64_t)&v114);
  sub_2141EDFD8((uint64_t)&v114, (uint64_t)v130);
  v146 = v139;
  v147 = v140;
  sub_21421CC0C((uint64_t)&v146, (uint64_t)v149);
  v148 = *((_QWORD *)&v147 + 1);
  *(_OWORD *)v113 = v98;
  v113[16] = v99;
  *(_QWORD *)&v113[24] = v91;
  *(_QWORD *)&v113[32] = v34;
  *(_QWORD *)&v113[40] = v35;
  v113[48] = v36;
  *(_QWORD *)&v113[56] = v92;
  *(_QWORD *)&v113[64] = v90;
  sub_21428F980((uint64_t)v113);
  sub_2141EDFD8((uint64_t)v113, (uint64_t)v131);
  sub_2141DD140(v34, v35, v36);
  sub_2141DD140(v39, v40, v42);
  sub_21421CE7C((uint64_t)v153);
  sub_2141F92E8((uint64_t)&v152);
  sub_21421CE7C((uint64_t)v149);
  sub_2141F92E8((uint64_t)&v148);
  v43 = v103;
  v44 = v36;
  v45 = v35;
  v46 = v100;
  v48 = type metadata accessor for PlottableValue(0, v103, v100, v47);
  v49 = v101;
  v50 = v108;
  sub_2143729C8(v48, v51, v101);
  v52 = sub_214400B9C(v49, v43, v46);
  v100 = v53;
  v55 = v54;
  v56 = v49;
  v57 = v52;
  (*(void (**)(uint64_t, uint64_t))(v102 + 8))(v56, v43);
  sub_21421CC48((uint64_t)v149);
  sub_2141F9244((uint64_t)&v148);
  sub_2141EF1B0(v34, v45, v44);
  sub_21421CC48((uint64_t)v153);
  sub_2141F9244((uint64_t)&v152);
  v58 = v88;
  v59 = v89;
  v60 = v86;
LABEL_12:
  sub_2141EF1B0(v58, v59, v60);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 8))(v50, v48);
  (*(void (**)(uint64_t, uint64_t))(v105 + 8))(v109, v107);
  (*(void (**)(uint64_t, uint64_t))(v104 + 8))(v110, v106);
  sub_2141EDFD8((uint64_t)v130, (uint64_t)v112);
  sub_2141EDFD8((uint64_t)v131, (uint64_t)&v114);
  sub_2141EDFD8((uint64_t)v112, (uint64_t)v113);
  sub_2141EDFD8((uint64_t)&v114, (uint64_t)&v113[144]);
  *(_QWORD *)&v113[288] = v57;
  *(_QWORD *)&v113[296] = v100;
  v113[304] = v55;
  return memcpy(v111, v113, 0x131uLL);
}

void *AreaMark.init<A, B, C>(xStart:xEnd:y:series:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  _BYTE v44[144];
  _BYTE v45[168];
  _BYTE v46[144];
  _BYTE v47[144];
  _BYTE v48[144];
  _BYTE v49[144];
  _QWORD v50[40];

  v39 = a5;
  v40 = a8;
  v36 = a3;
  v41 = a2;
  v42 = a1;
  v43 = a9;
  v15 = *(_QWORD *)(a7 - 8);
  v16 = MEMORY[0x24BDAC7A8](a1);
  v18 = (char *)&v35 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2143D8D5C(v16, v19, v20, v21, (uint64_t)v46);
  sub_2141EDFD8((uint64_t)v46, (uint64_t)v44);
  sub_2143D8C7C(a3, a6, a10, v22, (uint64_t)v47);
  sub_2141EDFD8((uint64_t)v47, (uint64_t)v45);
  v24 = type metadata accessor for PlottableValue(0, a7, a11, v23);
  sub_2143729C8(v24, v25, (uint64_t)v18);
  v26 = sub_214400B9C(v18, a7, a11);
  v38 = v27;
  v37 = v28;
  (*(void (**)(char *, uint64_t))(v15 + 8))(v18, a7);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 8))(a4, v24);
  v30 = type metadata accessor for PlottableValue(0, a6, a10, v29);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 8))(v36, v30);
  v32 = type metadata accessor for PlottableValue(0, v39, v40, v31);
  v33 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 8);
  v33(v41, v32);
  v33(v42, v32);
  sub_2141EDFD8((uint64_t)v44, (uint64_t)v48);
  sub_2141EDFD8((uint64_t)v45, (uint64_t)v49);
  sub_2141EDFD8((uint64_t)v48, (uint64_t)v50);
  sub_2141EDFD8((uint64_t)v49, (uint64_t)&v50[18]);
  v50[36] = v26;
  v50[37] = v38;
  LOBYTE(v50[38]) = v37;
  return memcpy(v43, v50, 0x131uLL);
}

void *AreaMark.init<A, B, C>(x:yStart:yEnd:series:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  _BYTE v44[144];
  _BYTE v45[168];
  _BYTE v46[144];
  _BYTE v47[144];
  _BYTE v48[144];
  _BYTE v49[144];
  _QWORD v50[40];

  v40 = a5;
  v41 = a8;
  v36 = a3;
  v37 = a2;
  v42 = a1;
  v43 = a9;
  v16 = *(_QWORD *)(a7 - 8);
  v17 = MEMORY[0x24BDAC7A8](a1);
  v19 = (char *)&v35 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2143D8C7C(v17, v21, v22, v20, (uint64_t)v46);
  sub_2141EDFD8((uint64_t)v46, (uint64_t)v44);
  sub_2143D8D5C(a2, a3, a6, a10, (uint64_t)v47);
  sub_2141EDFD8((uint64_t)v47, (uint64_t)v45);
  v24 = type metadata accessor for PlottableValue(0, a7, a11, v23);
  sub_2143729C8(v24, v25, (uint64_t)v19);
  v26 = sub_214400B9C(v19, a7, a11);
  v39 = v27;
  v38 = v28;
  (*(void (**)(char *, uint64_t))(v16 + 8))(v19, a7);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 8))(a4, v24);
  v30 = type metadata accessor for PlottableValue(0, a6, a10, v29);
  v31 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 8);
  v31(v36, v30);
  v31(v37, v30);
  v33 = type metadata accessor for PlottableValue(0, v40, v41, v32);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 8))(v42, v33);
  sub_2141EDFD8((uint64_t)v44, (uint64_t)v48);
  sub_2141EDFD8((uint64_t)v45, (uint64_t)v49);
  sub_2141EDFD8((uint64_t)v48, (uint64_t)v50);
  sub_2141EDFD8((uint64_t)v49, (uint64_t)&v50[18]);
  v50[36] = v26;
  v50[37] = v39;
  LOBYTE(v50[38]) = v38;
  return memcpy(v43, v50, 0x131uLL);
}

void static AreaMark._layoutChartContent(_:_:)(uint64_t a1)
{
  _BYTE v2[144];
  _BYTE v3[144];

  sub_2141EDFD8(a1, (uint64_t)v3);
  sub_2141EDFD8(a1 + 144, (uint64_t)v2);
  swift_beginAccess();
  sub_214200BC0((uint64_t)v3);
  sub_214200BC0((uint64_t)v2);
  sub_214202388((uint64_t)v3);
  sub_214202388((uint64_t)v2);
}

uint64_t static AreaMark._renderChartContent(_:_:)@<X0>(const void *a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  BOOL v37;
  int v38;
  _BYTE *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _BYTE *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _BYTE *v53;
  uint64_t v54;
  double v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  _BYTE *v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t result;
  char v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  uint64_t v89;
  double v90;
  uint64_t v91;
  _BYTE *v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t *v99;
  int *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  uint64_t v106;
  uint64_t v107;
  _BYTE *v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  _BYTE *v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  char v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char isUniquelyReferenced_nonNull_native;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  char v130;
  uint64_t v131;
  int *v132;
  unint64_t v133;
  unint64_t v134;
  char *v135;
  unsigned int v136;
  unint64_t *v137;
  unsigned int v138;
  _BYTE *v139;
  char v140;
  uint64_t v141;
  uint64_t v142;
  char v143;
  _BYTE *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  _BYTE v150[12];
  unsigned int v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  _BYTE *v160;
  _QWORD *v161;
  _BYTE *v162;
  _QWORD *v163;
  uint64_t v164;
  int *v165;
  _BYTE *v166;
  unint64_t *v167;
  uint64_t v168;
  _BYTE v169[152];
  _BYTE v170[152];
  _BYTE v171[152];
  _QWORD v172[76];
  _BYTE v173[144];
  _QWORD v174[21];
  double v175;
  double v176;
  uint64_t v177;
  char v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  char v182;
  uint64_t v183;
  uint64_t v184;
  char v185;
  _BYTE v186[144];
  _BYTE v187[152];
  _BYTE v188[152];
  _QWORD v189[18];
  _QWORD v190[33];
  uint64_t v191;
  uint64_t v192;
  _BYTE v193[144];
  _BYTE v194[144];
  _BYTE v195[144];
  __int128 v196;
  char v197;
  uint64_t v198;
  _BYTE *v199;
  uint64_t v200;
  char v201;
  __int128 v202;
  _BYTE v203[144];
  _QWORD v204[40];

  v6 = type metadata accessor for SgShapeStyle();
  MEMORY[0x24BDAC7A8](v6);
  v162 = &v150[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = type metadata accessor for SgArea(0);
  MEMORY[0x24BDAC7A8](v8);
  v161 = &v150[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = type metadata accessor for ChartContentRenderContext.Environment(0);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v160 = &v150[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = MEMORY[0x24BDAC7A8](v11);
  v15 = &v150[-v14];
  MEMORY[0x24BDAC7A8](v13);
  v17 = &v150[-v16];
  memcpy(v204, a1, 0x131uLL);
  LOBYTE(a1) = *(_BYTE *)a2;
  v18 = *(_QWORD *)(a2 + 8);
  v19 = v18 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_environment;
  swift_beginAccess();
  sub_2141EEEC4(v19, (uint64_t)v17);
  sub_2141EDFD8((uint64_t)v204, (uint64_t)v193);
  swift_retain();
  sub_2141FF3BC((uint64_t)v193);
  v20 = v190[21];
  v21 = v190[22];
  sub_2141EDFD8((uint64_t)&v204[18], (uint64_t)v194);
  sub_2141FF3BC((uint64_t)v194);
  v166 = v17;
  v167 = a3;
  v168 = v18;
  v165 = (int *)v10;
  v163 = &v204[18];
  if ((a1 & 1) != 0)
  {
    v22 = v204;
    v151 = sub_2141EF1D0((uint64_t)v204);
    if (v151 <= 2)
    {
      if (sub_2141EF1D0((uint64_t)&v204[18]) > 2)
      {
        LODWORD(v164) = 0;
        v23 = 1;
        v24 = v204;
        v22 = &v204[18];
      }
      else
      {
        sub_21432C2C8((uint64_t)v204, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t))sub_2141DCFC0, (void (*)(uint64_t, uint64_t, uint64_t))sub_21432C2B4);
        v36 = sub_2143E5A38();
        sub_21432C2C8((uint64_t)v204, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t))sub_2141EF040, (void (*)(uint64_t, uint64_t, uint64_t))sub_2141E60A4);
        v37 = (v36 & 1) == 0;
        if ((v36 & 1) != 0)
          v22 = &v204[18];
        else
          v22 = v204;
        if ((v36 & 1) != 0)
          v24 = v204;
        else
          v24 = &v204[18];
        v23 = !v37;
        v38 = v37;
        LODWORD(v164) = v38;
      }
    }
    else
    {
      v23 = 0;
      LODWORD(v164) = 1;
      v24 = &v204[18];
    }
    sub_2141EDFD8((uint64_t)v22, (uint64_t)v189);
    sub_2141EDFD8((uint64_t)v24, (uint64_t)v190);
    sub_2141EDFD8((uint64_t)v189, (uint64_t)v203);
    sub_2141EDFD8((uint64_t)v190, (uint64_t)v195);
    sub_2141D8BF8(&qword_253F13588);
    v41 = swift_allocObject();
    *(_OWORD *)(v41 + 16) = xmmword_214427810;
    sub_2141EF2E4(v189, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141DCFC0);
    sub_2141EF2E4(v189, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141DCFC0);
    sub_2141EF2E4(v190, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141DCFC0);
    sub_2143036C0(v23, (uint64_t)v203);
    sub_2141E801C((uint64_t)&v191, v41 + 32, &qword_253F13428);
    v42 = &v17[*(int *)(v10 + 72)];
    v43 = *(_BYTE **)v42;
    v44 = v42[1];
    v45 = (_QWORD *)v42[2];
    v46 = v42[3];
    v47 = v42[4];
    v48 = v42[5];
    v49 = v42[6];
    v50 = v42[7];
    v51 = v42[8];
    v161 = v45;
    v162 = (_BYTE *)(v41 + 32);
    v159 = v44;
    v160 = v43;
    v157 = v49;
    v158 = v46;
    v155 = v48;
    v156 = v47;
    v153 = v51;
    v154 = v50;
    if (v46)
    {
      LOBYTE(v175) = 4;
      v176 = *(double *)&v43;
      v177 = v44;
      v178 = v45 & 1;
      v179 = v46;
      v180 = v47;
      v181 = v48;
      v182 = v49;
      v183 = v50;
      v184 = v51;
      v185 = 3;
      sub_2141EF6F4((uint64_t)&v175);
      sub_2141EF6B8((uint64_t)&v175, (uint64_t)v172);
      nullsub_1(v172, v52);
    }
    else
    {
      sub_2141EF22C((uint64_t)v172);
    }
    sub_2141E801C((uint64_t)v172, (uint64_t)v188, &qword_253F13428);
    sub_2141E801C((uint64_t)v188, v41 + 184, &qword_253F13428);
    v53 = &v17[*(int *)(v10 + 76)];
    v55 = *(double *)v53;
    v54 = *((_QWORD *)v53 + 1);
    v56 = *((_QWORD *)v53 + 2);
    v57 = *((_QWORD *)v53 + 3);
    v58 = *((_QWORD *)v53 + 4);
    v59 = *((_QWORD *)v53 + 5);
    v61 = *((_QWORD *)v53 + 6);
    v60 = *((_QWORD *)v53 + 7);
    v62 = *((_QWORD *)v53 + 8);
    v152 = v61;
    if (v57)
    {
      LOBYTE(v175) = 5;
      v176 = v55;
      v177 = v54;
      v178 = v56 & 1;
      v179 = v57;
      v180 = v58;
      v181 = v59;
      v182 = v61;
      v183 = v60;
      v184 = v62;
      v185 = 3;
      sub_2141EF6F4((uint64_t)&v175);
      sub_2141EF6B8((uint64_t)&v175, (uint64_t)v172);
      nullsub_1(v172, v63);
    }
    else
    {
      sub_2141EF22C((uint64_t)v172);
    }
    sub_2141E801C((uint64_t)v172, (uint64_t)v187, &qword_253F13428);
    sub_2141E801C((uint64_t)v187, v41 + 336, &qword_253F13428);
    sub_2141EF260((uint64_t)v160, v159, (char)v161, v158, v156, v155, v157);
    sub_2141EF260(*(uint64_t *)&v55, v54, v56, v57, v58, v59, v152);
    v160 = (_BYTE *)sub_2142E91DC(v41);
    v161 = v64;
    swift_setDeallocating();
    sub_2141D8BF8(&qword_253F13428);
    swift_arrayDestroy();
    swift_deallocClassInstance();
    sub_2141EDFD8((uint64_t)v190, (uint64_t)v186);
    if (!sub_2141EF1D0((uint64_t)v186))
    {
      v65 = sub_2141EF754((uint64_t)v186);
      v66 = *(_QWORD *)(v65 + 8);
      v68 = *(unsigned __int8 *)(v65 + 16);
      v70 = *(_QWORD *)(v65 + 24);
      v69 = *(_BYTE **)(v65 + 32);
      v71 = *(_QWORD *)(v65 + 40);
      v72 = *(unsigned __int8 *)(v65 + 48);
      *(_QWORD *)&v196 = *(_QWORD *)v65;
      v67 = v196;
      *((_QWORD *)&v196 + 1) = v66;
      v197 = v68;
      v198 = v70;
      v199 = v69;
      v200 = v71;
      v201 = v72;
      v202 = *(_OWORD *)(v65 + 56);
      sub_2141EDFD8((uint64_t)v190, (uint64_t)v173);
      v73 = sub_2141EF754((uint64_t)v173);
      v74 = *(_QWORD *)v73;
      v154 = *(_QWORD *)(v73 + 8);
      v155 = v74;
      LODWORD(v153) = *(unsigned __int8 *)(v73 + 16);
      v75 = *(_QWORD *)(v73 + 32);
      v157 = *(_QWORD *)(v73 + 40);
      v158 = v75;
      LODWORD(v156) = *(unsigned __int8 *)(v73 + 48);
      v76 = v168;
      swift_retain();
      v159 = v70;
      v77 = v67;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_2141DD130(v67, v66, v68);
      v162 = v69;
      sub_2141DD140((uint64_t)v69, v71, v72);
      sub_2141DD130(v155, v154, v153);
      sub_2141DD140(v158, v157, v156);
      v78 = v164;
      sub_214205DD8(v164, (_OWORD *)v76, v76, v164, &v196, (uint64_t)v172);
      sub_2141E801C((uint64_t)v172, (uint64_t)v174, qword_253F12398);
      sub_2141E801C((uint64_t)v174, (uint64_t)&v175, qword_253F12398);
      if (sub_2141EF214((uint64_t)&v175) != 1)
      {
        LODWORD(v155) = v68;
        v156 = v66;
        v157 = v77;
        LODWORD(v158) = v72;
        LODWORD(v164) = v78;
        v152 = v71;
        if (v151 <= 2
          && (sub_2141EF1D0((uint64_t)v163) > 2
           || (sub_21432C2C8((uint64_t)v204, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t))sub_2141DCFC0, (void (*)(uint64_t, uint64_t, uint64_t))sub_21432C2B4), v80 = sub_2143E5A38(), sub_21432C2C8((uint64_t)v204, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t))sub_2141EF040, (void (*)(uint64_t, uint64_t, uint64_t))sub_2141E60A4), (v80 & 1) != 0)))
        {
          if (v176 >= v175)
            v83 = v175;
          else
            v83 = v176;
          v87 = *(double *)(v76 + 40);
          v88 = *(double *)(v76 + 48);
          if (v88 >= v87)
            v84 = *(double *)(v76 + 40);
          else
            v84 = *(double *)(v76 + 48);
          v85 = vabdd_f64(v176, v175);
          v86 = v88 - v87;
        }
        else
        {
          v81 = *(double *)(v76 + 24);
          v82 = *(double *)(v76 + 32);
          if (v82 >= v81)
            v83 = *(double *)(v76 + 24);
          else
            v83 = *(double *)(v76 + 32);
          if (v176 >= v175)
            v84 = v175;
          else
            v84 = v176;
          v85 = vabdd_f64(v82, v81);
          v86 = v176 - v175;
        }
        v89 = (uint64_t)v166;
        v90 = fabs(v86);
        v91 = *(_QWORD *)(*(_QWORD *)(v76 + 16) + 24);
        v92 = &v166[v165[26]];
        v93 = *((_QWORD *)v92 + 1);
        v163 = *(_QWORD **)v92;
        v153 = v93;
        v154 = v91;
        v94 = (uint64_t *)&v166[v165[24]];
        v96 = *v94;
        v95 = v94[1];
        v97 = v94[2];
        v98 = v94[3];
        v99 = (uint64_t *)&v166[v165[25]];
        v101 = *v99;
        v165 = (int *)v99[1];
        v100 = v165;
        v102 = v99[2];
        v103 = v99[3];
        swift_bridgeObjectRetain();
        sub_2141EF2B4(v96, v95, v97, v98);
        v104 = (uint64_t)v100;
        v105 = v102;
        v106 = v102;
        v107 = v103;
        sub_2141EF2B4(v101, v104, v105, v103);
        v108 = v160;
        swift_bridgeObjectRetain();
        sub_2143036C0(v164, (uint64_t)v195);
        sub_2141E801C((uint64_t)&v192, (uint64_t)v169, &qword_253F13428);
        sub_2141ED0BC(v157, v156, v155);
        swift_bridgeObjectRelease();
        sub_2141EF1B0((uint64_t)v162, v152, v158);
        swift_release();
        sub_2141EF2E4(v189, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141EF040);
        sub_21432C3DC(v89);
        swift_bridgeObjectRelease();
        sub_2141EF6B8((uint64_t)&v177, (uint64_t)v170);
        nullsub_1(v170, v109);
        sub_2141EF22C((uint64_t)v171);
        v172[0] = v154;
        *(double *)&v172[1] = v83;
        *(double *)&v172[2] = v84;
        *(double *)&v172[3] = v85;
        *(double *)&v172[4] = v90;
        v172[5] = v163;
        v172[6] = v153;
        v172[7] = v96;
        v172[8] = v95;
        v172[9] = v97;
        v172[10] = v98;
        v172[11] = v101;
        v172[12] = v165;
        v172[13] = v106;
        v172[14] = v107;
        v172[15] = v108;
        sub_2141E801C((uint64_t)v169, (uint64_t)&v172[16], &qword_253F13428);
        v172[35] = v161;
        sub_2141E801C((uint64_t)v170, (uint64_t)&v172[36], &qword_253F13428);
        sub_2141E801C((uint64_t)v171, (uint64_t)&v172[55], &qword_253F13428);
        LOWORD(v172[74]) = 257;
        v172[75] = 0;
        v110 = swift_allocObject();
        result = (uint64_t)memcpy((void *)(v110 + 16), v172, 0x260uLL);
        v111 = v110 | 0xC000000000000000;
        goto LABEL_65;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_2141ED0BC(v77, v66, v68);
      swift_bridgeObjectRelease();
      sub_2141EF1B0((uint64_t)v162, v71, v72);
      swift_release();
      sub_2141EF2E4(v189, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141EF040);
      sub_2141EF2E4(v190, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141EF040);
      result = sub_21432C3DC((uint64_t)v166);
LABEL_64:
      v111 = 0xE000000000000000;
LABEL_65:
      *v167 = v111;
      return result;
    }
    sub_2141EF2E4(v189, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141EF040);
    result = (uint64_t)sub_2141EF2E4(v190, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141EF040);
    __break(1u);
  }
  else
  {
    v159 = v8;
    v25 = v190[27];
    v26 = v190[28];
    v27 = v204[36];
    v28 = v204[37];
    v29 = LOBYTE(v204[38]);
    sub_2141EEEC4((uint64_t)v17, (uint64_t)v15);
    if (v29 == 255)
    {
      v39 = &v15[*(int *)(v10 + 72)];
      if (*((_QWORD *)v39 + 3))
      {
        v40 = v39[48];
        v33 = *((_QWORD *)v39 + 4);
        v34 = *((_QWORD *)v39 + 5);
        sub_2141DD140(v33, v34, v39[48]);
        v35 = v40 | 0x8000000000000000;
      }
      else
      {
        v33 = 0;
        v34 = 0;
        v35 = 0x80000000000000FCLL;
      }
      v112 = &v15[*(int *)(v10 + 76)];
      if (*((_QWORD *)v112 + 3))
      {
        v30 = *((_QWORD *)v112 + 4);
        v31 = *((_QWORD *)v112 + 5);
        v32 = v112[48];
        v164 = v33;
        v113 = v34;
        v114 = v35;
        sub_2141DD140(v30, v31, v32);
        v35 = v114;
        v34 = v113;
        v33 = v164;
      }
      else
      {
        v30 = 0;
        v31 = 0;
        v32 = 252;
      }
    }
    else
    {
      v30 = 0;
      v31 = 0;
      v32 = 0;
      v33 = v27;
      v34 = v28;
      v35 = v29;
    }
    v164 = v33;
    v172[0] = v33;
    v115 = v34;
    v172[1] = v34;
    v116 = v35;
    v172[2] = v35;
    v172[3] = v30;
    v172[4] = v31;
    LOBYTE(v172[5]) = v32;
    sub_21432C2B4(v27, v28, v29);
    sub_21432C3DC((uint64_t)v15);
    v117 = v168 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_areaSeriesContext;
    swift_beginAccess();
    v118 = *(_QWORD *)v117;
    if (*(_QWORD *)(*(_QWORD *)v117 + 16) && (v119 = sub_214336DE0((uint64_t)v172), (v120 & 1) != 0))
    {
      v121 = *(_QWORD *)(*(_QWORD *)(v118 + 56) + 8 * v119);
      swift_retain();
      v122 = v116;
      v123 = v115;
      v124 = v164;
    }
    else
    {
      type metadata accessor for SgArea.Points();
      v121 = swift_allocObject();
      *(_QWORD *)(v121 + 16) = MEMORY[0x24BEE4AF8];
      v125 = v115;
      v124 = v164;
      v122 = v116;
      v123 = v125;
      sub_21432C670(v164, v125, v122, v30, v31, v32, (uint64_t (*)(void))sub_2141DD14C, (void (*)(void))sub_2141DD164);
      swift_retain();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v174[0] = *(_QWORD *)v117;
      *(_QWORD *)v117 = 0x8000000000000000;
      sub_2142A3198(v121, (uint64_t)v172, isUniquelyReferenced_nonNull_native);
      *(_QWORD *)v117 = v174[0];
      swift_bridgeObjectRelease();
      sub_21432C670(v124, v123, v122, v30, v31, v32, (uint64_t (*)(void))sub_2141E60B8, (void (*)(void))sub_2141EF1BC);
    }
    swift_endAccess();
    sub_21432C670(v124, v123, v122, v30, v31, v32, (uint64_t (*)(void))sub_2141E60B8, (void (*)(void))sub_2141EF1BC);
    v127 = *(char **)(v121 + 16);
    v128 = *((_QWORD *)v127 + 2);
    v129 = *(_QWORD *)(*(_QWORD *)(v168 + 16) + 24);
    v130 = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v121 + 16) = v127;
    if ((v130 & 1) == 0)
    {
      v127 = sub_214224490(0, *((_QWORD *)v127 + 2) + 1, 1, v127);
      *(_QWORD *)(v121 + 16) = v127;
    }
    v132 = v165;
    v131 = (uint64_t)v166;
    v134 = *((_QWORD *)v127 + 2);
    v133 = *((_QWORD *)v127 + 3);
    if (v134 >= v133 >> 1)
    {
      v127 = sub_214224490((char *)(v133 > 1), v134 + 1, 1, v127);
      *(_QWORD *)(v121 + 16) = v127;
    }
    *((_QWORD *)v127 + 2) = v134 + 1;
    v135 = &v127[40 * v134];
    *((_QWORD *)v135 + 4) = v129;
    *((_QWORD *)v135 + 5) = v20;
    *((_QWORD *)v135 + 6) = v25;
    *((_QWORD *)v135 + 7) = v21;
    *((_QWORD *)v135 + 8) = v26;
    if (v128)
    {
      sub_21432C3DC(v131);
      swift_release();
      result = swift_release();
      goto LABEL_64;
    }
    v136 = sub_2141EF1D0((uint64_t)v204);
    v137 = v167;
    if (v136 > 2)
    {
      v140 = 0;
      v139 = v162;
    }
    else
    {
      v138 = sub_2141EF1D0((uint64_t)v163);
      v139 = v162;
      if (v138 >= 3)
      {
        v140 = 1;
      }
      else
      {
        sub_21432C2C8((uint64_t)v204, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t))sub_2141DCFC0, (void (*)(uint64_t, uint64_t, uint64_t))sub_21432C2B4);
        v140 = sub_2143E5A38() & 1;
        sub_21432C2C8((uint64_t)v204, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t))sub_2141EF040, (void (*)(uint64_t, uint64_t, uint64_t))sub_2141E60A4);
      }
    }
    v141 = v131 + v132[12];
    v142 = *(_QWORD *)v141;
    v143 = *(_BYTE *)(v141 + 8);
    v144 = v160;
    sub_2141EEEC4(v131, (uint64_t)v160);
    sub_2141FFC88((uint64_t)v144, (uint64_t)v139);
    swift_release();
    v145 = *(_QWORD *)(v131 + v132[16]);
    sub_21432C3DC(v131);
    v146 = (uint64_t)v161;
    *v161 = 0;
    *(_QWORD *)(v146 + 8) = v121;
    *(_BYTE *)(v146 + 16) = v140;
    *(_QWORD *)(v146 + 24) = v142;
    *(_BYTE *)(v146 + 32) = v143;
    v147 = v159;
    sub_2141FE1E0((uint64_t)v139, v146 + *(int *)(v159 + 32), (uint64_t (*)(_QWORD))type metadata accessor for SgShapeStyle);
    *(_QWORD *)(v146 + *(int *)(v147 + 36)) = v145;
    v148 = swift_allocBox();
    result = sub_2141FE1E0(v146, v149, type metadata accessor for SgArea);
    *v137 = v148 | 0x8000000000000000;
  }
  return result;
}

uint64_t sub_21432BC58(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 v18;

  v2 = v1;
  sub_2142AB54C(v2, (uint64_t)&v13);
  v4 = v15;
  if ((v15 & 0x8000000000000000) == 0)
  {
    v5 = v13;
    v6 = v14;
    sub_214425880();
    return sub_2143FD1BC(a1, v5, v6, v4);
  }
  v15 &= ~0x8000000000000000;
  v9 = v13;
  v8 = v14;
  v11 = v16;
  v10 = v17;
  v12 = v18;
  sub_214425880();
  if (v4 < 0xFCu)
  {
    sub_21442588C();
    sub_214425880();
    if ((v4 & 0x80) != 0)
    {
      sub_2143FD828();
    }
    else
    {
      sub_2141DD14C(v9, v8, v4);
      sub_2143FD1BC(a1, v9, v8, v4);
    }
    sub_2141EF1BC(v9, v8, v4);
    if (v12 <= 0xFB)
      goto LABEL_5;
    return sub_21442588C();
  }
  sub_21442588C();
  if (v12 > 0xFB)
    return sub_21442588C();
LABEL_5:
  sub_21442588C();
  sub_214425880();
  if ((v12 & 0x80) != 0)
  {
    sub_2143FD828();
  }
  else
  {
    sub_2141DD14C(v11, v10, v12);
    sub_2143FD1BC(a1, v11, v10, v12);
  }
  return sub_2141EF1BC(v11, v10, v12);
}

void sub_21432BDF4(uint64_t a1)
{
  _BYTE v2[144];
  _BYTE v3[144];

  sub_2141EDFD8(a1, (uint64_t)v3);
  sub_2141EDFD8(a1 + 144, (uint64_t)v2);
  swift_beginAccess();
  sub_214200BC0((uint64_t)v3);
  sub_214200BC0((uint64_t)v2);
  sub_214202388((uint64_t)v3);
  sub_214202388((uint64_t)v2);
}

uint64_t sub_21432BE8C()
{
  uint64_t v0;
  _BYTE v2[72];
  _BYTE v3[48];

  sub_2142AB54C(v0, (uint64_t)v3);
  sub_214425874();
  sub_21432BC58((uint64_t)v2);
  return sub_2144258B0();
}

uint64_t sub_21432BED8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v4;

  sub_2142AB54C(v1, (uint64_t)&v4);
  return sub_21432BC58(a1);
}

uint64_t sub_21432BF14()
{
  uint64_t v0;
  _BYTE v2[72];
  _BYTE v3[48];

  sub_2142AB54C(v0, (uint64_t)v3);
  sub_214425874();
  sub_21432BC58((uint64_t)v2);
  return sub_2144258B0();
}

uint64_t sub_21432BF64(uint64_t a1, uint64_t a2)
{
  _BYTE v4[48];
  _BYTE v5[48];

  sub_2142AB54C(a1, (uint64_t)v4);
  sub_2142AB54C(a2, (uint64_t)v5);
  return sub_21432BFAC((uint64_t)v4, (uint64_t)v5) & 1;
}

uint64_t sub_21432BFAC(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v3;
  double v4;
  __n128 v5;
  double v6;
  double v7;
  unsigned int v8;
  unsigned __int8 v9;
  unsigned int v10;
  double v11;
  double v12;
  unsigned int v13;
  uint64_t result;
  __n128 v15;
  double v16;
  double v17;
  char v18;
  __n128 v19;
  __n128 v20;
  char v21;
  __n128 v22;
  uint64_t v23;
  double v24;
  double v25;
  unsigned __int8 v26;
  __n128 v27;
  uint64_t v28;
  double v29;
  double v30;
  unsigned __int8 v31;
  __n128 v32;
  __n128 v33;
  char v34;

  sub_2142AB54C(a1, (uint64_t)&v27);
  v3 = v28;
  if ((v28 & 0x8000000000000000) == 0)
  {
    sub_21421CFC8(&v27, &v32);
    sub_2142AB54C(a2, (uint64_t)&v22);
    if (v23 < 0)
      return 0;
    sub_21421CFC8(&v22, &v19);
    sub_21421CFC8(&v32, &v33);
    if (!v34)
    {
      v4 = v33.n128_f64[0];
      sub_21421CFC8(&v19, &v20);
      if (v21)
        return 0;
      return v4 == v20.n128_f64[0];
    }
    if (v34 == 1)
    {
      v4 = v33.n128_f64[0];
      sub_21421CFC8(&v19, &v20);
      if (v21 != 1)
        return 0;
      return v4 == v20.n128_f64[0];
    }
    v15 = v33;
    sub_21421CFC8(&v19, &v20);
    if (v21 != 2)
      return 0;
    if (*(_OWORD *)&v15 == *(_OWORD *)&v20)
      return 1;
    return (sub_214425790() & 1) != 0;
  }
  v28 &= ~0x8000000000000000;
  v5 = v27;
  v7 = v29;
  v6 = v30;
  v8 = v31;
  sub_2142AB54C(a2, (uint64_t)&v22);
  v9 = v23;
  if ((v23 & 0x8000000000000000) == 0)
  {
    sub_21421CFC8(&v22, &v33);
    return 0;
  }
  v10 = v3;
  v23 &= ~0x8000000000000000;
  v12 = v24;
  v11 = v25;
  v13 = v26;
  if (v10 > 0xFB)
  {
    if (v9 <= 0xFBu)
      return 0;
LABEL_11:
    if (v8 <= 0xFB)
    {
      if (v13 > 0xFB)
        return 0;
      if ((v8 & 0x80) == 0)
      {
        if ((v13 & 0x80) != 0)
          return 0;
        if (v8)
        {
          if (v8 != 1)
          {
            if (v13 != 2)
              return 0;
            if (*(_QWORD *)&v7 == *(_QWORD *)&v12 && *(_QWORD *)&v6 == *(_QWORD *)&v11)
              return 1;
            return (sub_214425790() & 1) != 0;
          }
          if (v13 != 1)
            return 0;
        }
        else if (v13)
        {
          return 0;
        }
        return v7 == v12;
      }
      if ((v13 & 0x80) == 0)
        return 0;
      if ((v8 & 1) != 0)
      {
        if ((v13 & 1) == 0)
          return 0;
      }
      else if ((v13 & 1) != 0)
      {
        return 0;
      }
      if (v7 != v12 || v6 != v11)
        return 0;
    }
    else if (v13 <= 0xFB)
    {
      return 0;
    }
    return 1;
  }
  if (v9 > 0xFBu)
    return 0;
  if ((v10 & 0x80) != 0)
  {
    if ((v9 & 0x80) == 0)
      return 0;
    if ((v10 & 1) != 0)
    {
      if ((v9 & 1) == 0)
        return 0;
    }
    else if ((v9 & 1) != 0)
    {
      return 0;
    }
    result = 0;
    if (v5.n128_f64[0] != v22.n128_f64[0])
      return result;
    v16 = v5.n128_f64[1];
    v17 = v22.n128_f64[1];
LABEL_52:
    if (v16 == v17)
      goto LABEL_11;
    return result;
  }
  if ((v9 & 0x80) != 0)
    return 0;
  if (!v10)
  {
    result = 0;
    if (v9)
      return result;
LABEL_40:
    v16 = v5.n128_f64[0];
    v17 = v22.n128_f64[0];
    goto LABEL_52;
  }
  if (v10 == 1)
  {
    result = 0;
    if (v9 != 1)
      return result;
    goto LABEL_40;
  }
  if (v9 != 2)
    return 0;
  if (*(_OWORD *)&v5 == *(_OWORD *)&v22)
    goto LABEL_11;
  v18 = sub_214425790();
  result = 0;
  if ((v18 & 1) != 0)
    goto LABEL_11;
  return result;
}

uint64_t sub_21432C2B4(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 != -1)
    return sub_2141DD14C(a1, a2, a3);
  return a1;
}

uint64_t sub_21432C2C8(uint64_t a1, void (*a2)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t), void (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v21 = *(_QWORD *)(a1 + 152);
  v22 = *(_QWORD *)(a1 + 144);
  v5 = *(_QWORD *)(a1 + 176);
  v19 = *(_QWORD *)(a1 + 168);
  v20 = *(_QWORD *)(a1 + 160);
  v6 = *(_QWORD *)(a1 + 184);
  v7 = *(_QWORD *)(a1 + 192);
  v18 = *(_QWORD *)(a1 + 200);
  v16 = *(_OWORD *)(a1 + 224);
  v17 = *(_OWORD *)(a1 + 208);
  v14 = *(_OWORD *)(a1 + 256);
  v15 = *(_OWORD *)(a1 + 240);
  v8 = *(_QWORD *)(a1 + 272);
  v9 = *(_QWORD *)(a1 + 280);
  v10 = *(_QWORD *)(a1 + 288);
  v11 = *(_QWORD *)(a1 + 296);
  v12 = *(unsigned __int8 *)(a1 + 304);
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136));
  a2(v22, v21, v20, v19, v5, v6, v7, v18, v17, *((_QWORD *)&v17 + 1), v16, *((_QWORD *)&v16 + 1), v15, *((_QWORD *)&v15 + 1), v14, *((_QWORD *)&v14 + 1), v8, v9);
  a3(v10, v11, v12);
  return a1;
}

uint64_t sub_21432C3DC(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ChartContentRenderContext.Environment(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_21432C418()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;

  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v0 + 96))
  {
    sub_2141ED0BC(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_BYTE *)(v0 + 88));
    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(v0 + 128))
  {
    sub_2141ED0BC(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112), *(_BYTE *)(v0 + 120));
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  v1 = *(_QWORD *)(v0 + 144);
  v2 = *(_QWORD *)(v0 + 168);
  v3 = *(_QWORD *)(v0 + 200);
  v4 = *(_QWORD *)(v0 + 208);
  v5 = *(_QWORD *)(v0 + 216);
  v6 = *(_QWORD *)(v0 + 240);
  v7 = *(_QWORD *)(v0 + 272);
  v8 = *(_QWORD *)(v0 + 288);
  if (v6 > 1
    || (v1 & 0xFFFFFFFFFFFFFFF8) != 0x7FFFFFFF8
    || v2 > 1
    || (v5 | v4) & 0xF000000000000007 | v3 & 0xFFFFFFFFFFFFFF7CLL
    || (v8 | *(_QWORD *)(v0 + 280)) & 0xF000000000000007 | v7 & 0xFFFFFFFFFFFFFF7CLL)
  {
    sub_2141EF5D4(v1, *(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 160), v2, *(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 192), v3, v4, v5, *(_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 232), v6, *(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 256), *(_QWORD *)(v0 + 264), v7, *(_QWORD *)(v0 + 280), v8);
  }
  swift_bridgeObjectRelease();
  v9 = *(_QWORD *)(v0 + 304);
  v10 = *(_QWORD *)(v0 + 328);
  v11 = *(_QWORD *)(v0 + 360);
  v12 = *(_QWORD *)(v0 + 368);
  v13 = *(_QWORD *)(v0 + 376);
  v14 = *(_QWORD *)(v0 + 400);
  v15 = *(_QWORD *)(v0 + 432);
  v16 = *(_QWORD *)(v0 + 448);
  if (v14 > 1
    || (v9 & 0xFFFFFFFFFFFFFFF8) != 0x7FFFFFFF8
    || v10 > 1
    || (v13 | v12) & 0xF000000000000007 | v11 & 0xFFFFFFFFFFFFFF7CLL
    || (v16 | *(_QWORD *)(v0 + 440)) & 0xF000000000000007 | v15 & 0xFFFFFFFFFFFFFF7CLL)
  {
    sub_2141EF5D4(v9, *(_QWORD *)(v0 + 312), *(_QWORD *)(v0 + 320), v10, *(_QWORD *)(v0 + 336), *(_QWORD *)(v0 + 344), *(_QWORD *)(v0 + 352), v11, v12, v13, *(_QWORD *)(v0 + 384), *(_QWORD *)(v0 + 392), v14, *(_QWORD *)(v0 + 408), *(_QWORD *)(v0 + 416), *(_QWORD *)(v0 + 424), v15, *(_QWORD *)(v0 + 440), v16);
  }
  v17 = *(_QWORD *)(v0 + 456);
  v18 = *(_QWORD *)(v0 + 480);
  v19 = *(_QWORD *)(v0 + 512);
  v20 = *(_QWORD *)(v0 + 520);
  v21 = *(_QWORD *)(v0 + 528);
  v22 = *(_QWORD *)(v0 + 552);
  v23 = *(_QWORD *)(v0 + 584);
  v24 = *(_QWORD *)(v0 + 600);
  if (v22 > 1
    || (v17 & 0xFFFFFFFFFFFFFFF8) != 0x7FFFFFFF8
    || v18 > 1
    || (v21 | v20) & 0xF000000000000007 | v19 & 0xFFFFFFFFFFFFFF7CLL
    || (v24 | *(_QWORD *)(v0 + 592)) & 0xF000000000000007 | v23 & 0xFFFFFFFFFFFFFF7CLL)
  {
    sub_2141EF5D4(v17, *(_QWORD *)(v0 + 464), *(_QWORD *)(v0 + 472), v18, *(_QWORD *)(v0 + 488), *(_QWORD *)(v0 + 496), *(_QWORD *)(v0 + 504), v19, v20, v21, *(_QWORD *)(v0 + 536), *(_QWORD *)(v0 + 544), v22, *(_QWORD *)(v0 + 560), *(_QWORD *)(v0 + 568), *(_QWORD *)(v0 + 576), v23, *(_QWORD *)(v0 + 592), v24);
  }
  return swift_deallocObject();
}

uint64_t sub_21432C670(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(void), void (*a8)(void))
{
  if ((a3 & 0x8000000000000000) == 0)
    return a7();
  a8();
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))a8)(a4, a5, a6);
}

uint64_t destroy for AreaMark(uint64_t a1)
{
  uint64_t result;
  int v3;

  sub_2141EF040(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_OWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136));
  result = sub_2141EF040(*(_QWORD *)(a1 + 144), *(_QWORD *)(a1 + 152), *(_QWORD *)(a1 + 160), *(_QWORD *)(a1 + 168), *(_QWORD *)(a1 + 176), *(_QWORD *)(a1 + 184), *(_QWORD *)(a1 + 192), *(_QWORD *)(a1 + 200), *(_QWORD *)(a1 + 208), *(_QWORD *)(a1 + 216), *(_QWORD *)(a1 + 224), *(_QWORD *)(a1 + 232), *(_OWORD *)(a1 + 240), *(_QWORD *)(a1 + 248), *(_QWORD *)(a1 + 256), *(_QWORD *)(a1 + 264), *(_QWORD *)(a1 + 272), *(_QWORD *)(a1 + 280));
  v3 = *(unsigned __int8 *)(a1 + 304);
  if (v3 != 255)
    return sub_2141E60B8(*(_QWORD *)(a1 + 288), *(_QWORD *)(a1 + 296), v3);
  return result;
}

uint64_t initializeWithCopy for AreaMark(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a2 + 56);
  v24 = *(_QWORD *)(a2 + 64);
  v26 = *(_QWORD *)(a2 + 72);
  v28 = *(_QWORD *)(a2 + 80);
  v30 = *(_QWORD *)(a2 + 88);
  v32 = *(_QWORD *)(a2 + 96);
  v34 = *(_QWORD *)(a2 + 104);
  v36 = *(_QWORD *)(a2 + 112);
  v38 = *(_QWORD *)(a2 + 120);
  v40 = *(_QWORD *)(a2 + 128);
  v42 = *(_QWORD *)(a2 + 136);
  sub_2141DCFC0(*(_QWORD *)a2, v5, v6, v7, v8, v9, v10, v11, v24, v26, v28, v30, v32, v34, v36, v38, v40, v42);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v9;
  *(_QWORD *)(a1 + 48) = v10;
  *(_QWORD *)(a1 + 56) = v11;
  *(_QWORD *)(a1 + 64) = v24;
  *(_QWORD *)(a1 + 72) = v26;
  *(_QWORD *)(a1 + 80) = v28;
  *(_QWORD *)(a1 + 88) = v30;
  *(_QWORD *)(a1 + 96) = v32;
  *(_QWORD *)(a1 + 104) = v34;
  *(_QWORD *)(a1 + 112) = v36;
  *(_QWORD *)(a1 + 120) = v38;
  *(_QWORD *)(a1 + 128) = v40;
  *(_QWORD *)(a1 + 136) = v42;
  v12 = *(_QWORD *)(a2 + 144);
  v13 = *(_QWORD *)(a2 + 152);
  v14 = *(_QWORD *)(a2 + 160);
  v15 = *(_QWORD *)(a2 + 168);
  v16 = *(_QWORD *)(a2 + 176);
  v17 = *(_QWORD *)(a2 + 184);
  v18 = *(_QWORD *)(a2 + 192);
  v19 = *(_QWORD *)(a2 + 200);
  v25 = *(_QWORD *)(a2 + 208);
  v27 = *(_QWORD *)(a2 + 216);
  v29 = *(_QWORD *)(a2 + 224);
  v31 = *(_QWORD *)(a2 + 232);
  v33 = *(_QWORD *)(a2 + 240);
  v35 = *(_QWORD *)(a2 + 248);
  v37 = *(_QWORD *)(a2 + 256);
  v39 = *(_QWORD *)(a2 + 264);
  v41 = *(_QWORD *)(a2 + 272);
  v43 = *(_QWORD *)(a2 + 280);
  sub_2141DCFC0(v12, v13, v14, v15, v16, v17, v18, v19, v25, v27, v29, v31, v33, v35, v37, v39, v41, v43);
  *(_QWORD *)(a1 + 144) = v12;
  *(_QWORD *)(a1 + 152) = v13;
  *(_QWORD *)(a1 + 160) = v14;
  *(_QWORD *)(a1 + 168) = v15;
  *(_QWORD *)(a1 + 176) = v16;
  *(_QWORD *)(a1 + 184) = v17;
  *(_QWORD *)(a1 + 192) = v18;
  *(_QWORD *)(a1 + 200) = v19;
  *(_QWORD *)(a1 + 208) = v25;
  *(_QWORD *)(a1 + 216) = v27;
  *(_QWORD *)(a1 + 224) = v29;
  *(_QWORD *)(a1 + 232) = v31;
  *(_QWORD *)(a1 + 240) = v33;
  *(_QWORD *)(a1 + 248) = v35;
  *(_QWORD *)(a1 + 256) = v37;
  *(_QWORD *)(a1 + 264) = v39;
  *(_QWORD *)(a1 + 272) = v41;
  *(_QWORD *)(a1 + 280) = v43;
  v20 = *(unsigned __int8 *)(a2 + 304);
  if (v20 == 255)
  {
    *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
    *(_BYTE *)(a1 + 304) = *(_BYTE *)(a2 + 304);
  }
  else
  {
    v22 = *(_QWORD *)(a2 + 288);
    v21 = *(_QWORD *)(a2 + 296);
    sub_2141DD14C(v22, v21, v20);
    *(_QWORD *)(a1 + 288) = v22;
    *(_QWORD *)(a1 + 296) = v21;
    *(_BYTE *)(a1 + 304) = v20;
  }
  return a1;
}

uint64_t assignWithCopy for AreaMark(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  unint64_t v47;
  __int128 *v48;
  __int128 *v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  __int128 v59;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a2 + 56);
  v61 = *(_QWORD *)(a2 + 64);
  v63 = *(_QWORD *)(a2 + 72);
  v65 = *(_QWORD *)(a2 + 80);
  v67 = *(_QWORD *)(a2 + 88);
  v69 = *(_QWORD *)(a2 + 96);
  v71 = *(_QWORD *)(a2 + 104);
  v73 = *(_QWORD *)(a2 + 112);
  v75 = *(_QWORD *)(a2 + 120);
  v77 = *(_QWORD *)(a2 + 128);
  v79 = *(_QWORD *)(a2 + 136);
  sub_2141DCFC0(*(_QWORD *)a2, v5, v6, v7, v8, v9, v10, v11, v61, v63, v65, v67, v69, v71, v73, v75, v77, v79);
  v12 = *(_QWORD *)a1;
  v13 = *(_QWORD *)(a1 + 8);
  v14 = *(_QWORD *)(a1 + 16);
  v15 = *(_QWORD *)(a1 + 24);
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 40);
  v18 = *(_QWORD *)(a1 + 48);
  v19 = *(_QWORD *)(a1 + 56);
  v20 = *(_OWORD *)(a1 + 64);
  v21 = *(_OWORD *)(a1 + 80);
  v22 = *(_OWORD *)(a1 + 96);
  v23 = *(_OWORD *)(a1 + 112);
  v24 = *(_QWORD *)(a1 + 128);
  v25 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v9;
  *(_QWORD *)(a1 + 48) = v10;
  *(_QWORD *)(a1 + 56) = v11;
  *(_QWORD *)(a1 + 64) = v61;
  *(_QWORD *)(a1 + 72) = v63;
  *(_QWORD *)(a1 + 80) = v65;
  *(_QWORD *)(a1 + 88) = v67;
  *(_QWORD *)(a1 + 96) = v69;
  *(_QWORD *)(a1 + 104) = v71;
  *(_QWORD *)(a1 + 112) = v73;
  *(_QWORD *)(a1 + 120) = v75;
  *(_QWORD *)(a1 + 128) = v77;
  *(_QWORD *)(a1 + 136) = v79;
  sub_2141EF040(v12, v13, v14, v15, v16, v17, v18, v19, v20, *((uint64_t *)&v20 + 1), v21, *((uint64_t *)&v21 + 1), v22, *((uint64_t *)&v22 + 1), v23, SBYTE8(v23), v24, v25);
  v26 = *(_QWORD *)(a2 + 144);
  v27 = *(_QWORD *)(a2 + 152);
  v28 = *(_QWORD *)(a2 + 160);
  v29 = *(_QWORD *)(a2 + 168);
  v30 = *(_QWORD *)(a2 + 176);
  v31 = *(_QWORD *)(a2 + 184);
  v32 = *(_QWORD *)(a2 + 192);
  v33 = *(_QWORD *)(a2 + 200);
  v62 = *(_QWORD *)(a2 + 208);
  v64 = *(_QWORD *)(a2 + 216);
  v66 = *(_QWORD *)(a2 + 224);
  v68 = *(_QWORD *)(a2 + 232);
  v70 = *(_QWORD *)(a2 + 240);
  v72 = *(_QWORD *)(a2 + 248);
  v74 = *(_QWORD *)(a2 + 256);
  v76 = *(_QWORD *)(a2 + 264);
  v78 = *(_QWORD *)(a2 + 272);
  v80 = *(_QWORD *)(a2 + 280);
  sub_2141DCFC0(v26, v27, v28, v29, v30, v31, v32, v33, v62, v64, v66, v68, v70, v72, v74, v76, v78, v80);
  v34 = *(_QWORD *)(a1 + 144);
  v35 = *(_QWORD *)(a1 + 152);
  v36 = *(_QWORD *)(a1 + 160);
  v37 = *(_QWORD *)(a1 + 168);
  v38 = *(_QWORD *)(a1 + 176);
  v39 = *(_QWORD *)(a1 + 184);
  v40 = *(_QWORD *)(a1 + 192);
  v41 = *(_QWORD *)(a1 + 200);
  v42 = *(_OWORD *)(a1 + 208);
  v43 = *(_OWORD *)(a1 + 224);
  v44 = *(_OWORD *)(a1 + 240);
  v45 = *(_OWORD *)(a1 + 256);
  v46 = *(_QWORD *)(a1 + 272);
  v47 = *(_QWORD *)(a1 + 280);
  *(_QWORD *)(a1 + 144) = v26;
  *(_QWORD *)(a1 + 152) = v27;
  *(_QWORD *)(a1 + 160) = v28;
  *(_QWORD *)(a1 + 168) = v29;
  *(_QWORD *)(a1 + 176) = v30;
  *(_QWORD *)(a1 + 184) = v31;
  *(_QWORD *)(a1 + 192) = v32;
  *(_QWORD *)(a1 + 200) = v33;
  *(_QWORD *)(a1 + 208) = v62;
  *(_QWORD *)(a1 + 216) = v64;
  *(_QWORD *)(a1 + 224) = v66;
  *(_QWORD *)(a1 + 232) = v68;
  *(_QWORD *)(a1 + 240) = v70;
  *(_QWORD *)(a1 + 248) = v72;
  *(_QWORD *)(a1 + 256) = v74;
  *(_QWORD *)(a1 + 264) = v76;
  *(_QWORD *)(a1 + 272) = v78;
  *(_QWORD *)(a1 + 280) = v80;
  sub_2141EF040(v34, v35, v36, v37, v38, v39, v40, v41, v42, *((uint64_t *)&v42 + 1), v43, *((uint64_t *)&v43 + 1), v44, *((uint64_t *)&v44 + 1), v45, SBYTE8(v45), v46, v47);
  v48 = (__int128 *)(a1 + 288);
  v49 = (__int128 *)(a2 + 288);
  v50 = *(unsigned __int8 *)(a2 + 304);
  if (*(unsigned __int8 *)(a1 + 304) == 255)
  {
    if (v50 == 255)
    {
      v59 = *v49;
      *(_BYTE *)(a1 + 304) = *(_BYTE *)(a2 + 304);
      *v48 = v59;
    }
    else
    {
      v57 = *(_QWORD *)(a2 + 288);
      v56 = *(_QWORD *)(a2 + 296);
      sub_2141DD14C(v57, v56, v50);
      *(_QWORD *)(a1 + 288) = v57;
      *(_QWORD *)(a1 + 296) = v56;
      *(_BYTE *)(a1 + 304) = v50;
    }
  }
  else if (v50 == 255)
  {
    sub_21432CC7C(a1 + 288);
    v58 = *(_BYTE *)(a2 + 304);
    *v48 = *v49;
    *(_BYTE *)(a1 + 304) = v58;
  }
  else
  {
    v52 = *(_QWORD *)(a2 + 288);
    v51 = *(_QWORD *)(a2 + 296);
    sub_2141DD14C(v52, v51, v50);
    v53 = *(_QWORD *)(a1 + 288);
    v54 = *(_QWORD *)(a1 + 296);
    *(_QWORD *)(a1 + 288) = v52;
    *(_QWORD *)(a1 + 296) = v51;
    v55 = *(_BYTE *)(a1 + 304);
    *(_BYTE *)(a1 + 304) = v50;
    sub_2141E60B8(v53, v54, v55);
  }
  return a1;
}

uint64_t sub_21432CC7C(uint64_t a1)
{
  destroy for AnyPrimitivePlottable(a1);
  return a1;
}

void *initializeWithTake for AreaMark(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x131uLL);
}

uint64_t assignWithTake for AreaMark(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  unint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  unint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  _OWORD *v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;

  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  v10 = *(_QWORD *)(a1 + 48);
  v11 = *(_QWORD *)(a1 + 56);
  v12 = *(_OWORD *)(a1 + 64);
  v13 = *(_OWORD *)(a1 + 80);
  v14 = *(_OWORD *)(a1 + 96);
  v15 = *(_OWORD *)(a1 + 112);
  v16 = *(_QWORD *)(a1 + 128);
  v17 = *(_QWORD *)(a1 + 136);
  v18 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v18;
  v19 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v19;
  v20 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v20;
  v21 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v21;
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  sub_2141EF040(v4, v5, v6, v7, v8, v9, v10, v11, v12, *((uint64_t *)&v12 + 1), v13, *((uint64_t *)&v13 + 1), v14, *((uint64_t *)&v14 + 1), v15, SBYTE8(v15), v16, v17);
  v22 = *(_QWORD *)(a1 + 144);
  v23 = *(_QWORD *)(a1 + 152);
  v24 = *(_QWORD *)(a1 + 160);
  v25 = *(_QWORD *)(a1 + 168);
  v26 = *(_QWORD *)(a1 + 176);
  v27 = *(_QWORD *)(a1 + 184);
  v28 = *(_QWORD *)(a1 + 192);
  v29 = *(_QWORD *)(a1 + 200);
  v30 = *(_OWORD *)(a1 + 208);
  v31 = *(_OWORD *)(a1 + 224);
  v32 = *(_OWORD *)(a1 + 240);
  v33 = *(_OWORD *)(a1 + 256);
  v34 = *(_QWORD *)(a1 + 272);
  v35 = *(_QWORD *)(a1 + 280);
  v36 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 160) = v36;
  v37 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v37;
  v38 = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 224) = v38;
  v39 = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 256) = v39;
  *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
  sub_2141EF040(v22, v23, v24, v25, v26, v27, v28, v29, v30, *((uint64_t *)&v30 + 1), v31, *((uint64_t *)&v31 + 1), v32, *((uint64_t *)&v32 + 1), v33, SBYTE8(v33), v34, v35);
  v40 = (_OWORD *)(a2 + 288);
  v41 = *(unsigned __int8 *)(a1 + 304);
  if (v41 == 255)
    goto LABEL_5;
  v42 = *(unsigned __int8 *)(a2 + 304);
  if (v42 == 255)
  {
    sub_21432CC7C(a1 + 288);
LABEL_5:
    *(_OWORD *)(a1 + 288) = *v40;
    *(_BYTE *)(a1 + 304) = *(_BYTE *)(a2 + 304);
    return a1;
  }
  v43 = *(_QWORD *)(a1 + 288);
  v44 = *(_QWORD *)(a1 + 296);
  *(_OWORD *)(a1 + 288) = *v40;
  *(_BYTE *)(a1 + 304) = v42;
  sub_2141E60B8(v43, v44, v41);
  return a1;
}

uint64_t getEnumTagSinglePayload for AreaMark(uint64_t a1, int a2)
{
  unsigned int v2;
  int v3;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 305))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = (*(_QWORD *)(a1 + 48) >> 3) & 0xFFFFFFE0 | (*(_QWORD *)(a1 + 48) >> 2) & 0x1F;
  if (v2 > 0x80000000)
    v3 = ~v2;
  else
    v3 = -1;
  return (v3 + 1);
}

double storeEnumTagSinglePayload for AreaMark(uint64_t a1, int a2, int a3)
{
  double result;

  if (a2 < 0)
  {
    *(_QWORD *)(a1 + 296) = 0;
    result = 0.0;
    *(_OWORD *)(a1 + 248) = 0u;
    *(_OWORD *)(a1 + 232) = 0u;
    *(_OWORD *)(a1 + 216) = 0u;
    *(_OWORD *)(a1 + 200) = 0u;
    *(_OWORD *)(a1 + 184) = 0u;
    *(_OWORD *)(a1 + 168) = 0u;
    *(_OWORD *)(a1 + 152) = 0u;
    *(_OWORD *)(a1 + 136) = 0u;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_BYTE *)(a1 + 304) = 0;
    *(_OWORD *)(a1 + 280) = 0u;
    *(_OWORD *)(a1 + 264) = 0u;
    *(_QWORD *)a1 = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(a1 + 305) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      result = 0.0;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)a1 = 0u;
      *(_QWORD *)(a1 + 48) = (8 * -a2) & 0x7FFFFFF00 | (4 * (-a2 & 0x1FLL));
      *(_OWORD *)(a1 + 56) = 0u;
      *(_OWORD *)(a1 + 72) = 0u;
      *(_OWORD *)(a1 + 88) = 0u;
      *(_OWORD *)(a1 + 104) = 0u;
      *(_OWORD *)(a1 + 120) = 0u;
      *(_QWORD *)(a1 + 136) = 0;
      return result;
    }
    *(_BYTE *)(a1 + 305) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AreaMark()
{
  return &type metadata for AreaMark;
}

uint64_t destroy for AreaSeriesKey(uint64_t a1)
{
  return sub_21432C670(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 40), (uint64_t (*)(void))sub_2141E60B8, (void (*)(void))sub_2141EF1BC);
}

uint64_t initializeWithCopy for AreaSeriesKey(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(unsigned __int8 *)(a2 + 40);
  sub_21432C670(*(_QWORD *)a2, v4, v5, v6, v7, v8, (uint64_t (*)(void))sub_2141DD14C, (void (*)(void))sub_2141DD164);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_BYTE *)(a1 + 40) = v8;
  return a1;
}

uint64_t assignWithCopy for AreaSeriesKey(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(unsigned __int8 *)(a2 + 40);
  sub_21432C670(*(_QWORD *)a2, v4, v5, v6, v7, v8, (uint64_t (*)(void))sub_2141DD14C, (void (*)(void))sub_2141DD164);
  v9 = *(_QWORD *)a1;
  v10 = *(_QWORD *)(a1 + 8);
  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(_QWORD *)(a1 + 24);
  v13 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  v14 = *(unsigned __int8 *)(a1 + 40);
  *(_BYTE *)(a1 + 40) = v8;
  sub_21432C670(v9, v10, v11, v12, v13, v14, (uint64_t (*)(void))sub_2141E60B8, (void (*)(void))sub_2141EF1BC);
  return a1;
}

uint64_t assignWithTake for AreaSeriesKey(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;

  v3 = *(_QWORD *)(a2 + 32);
  v4 = *(_BYTE *)(a2 + 40);
  v5 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v10;
  *(_QWORD *)(a1 + 32) = v3;
  v11 = *(unsigned __int8 *)(a1 + 40);
  *(_BYTE *)(a1 + 40) = v4;
  sub_21432C670(v5, v7, v6, v8, v9, v11, (uint64_t (*)(void))sub_2141E60B8, (void (*)(void))sub_2141EF1BC);
  return a1;
}

uint64_t getEnumTagSinglePayload for AreaSeriesKey(uint64_t a1, int a2)
{
  unsigned int v2;
  int v3;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 41))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_DWORD *)(a1 + 17);
  if (v2 > 0x80000000)
    v3 = ~v2;
  else
    v3 = -1;
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for AreaSeriesKey(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 40) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      *(_QWORD *)(result + 24) = 0;
      *(_QWORD *)(result + 32) = 0;
      *(_QWORD *)(result + 16) = (unint64_t)-a2 << 8;
      *(_BYTE *)(result + 40) = 0;
      return result;
    }
    *(_BYTE *)(result + 41) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t sub_21432D17C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 16) = *(unsigned __int8 *)(result + 16) | (unint64_t)(a2 << 63);
  return result;
}

ValueMetadata *type metadata accessor for AreaSeriesKey()
{
  return &type metadata for AreaSeriesKey;
}

unint64_t sub_21432D1A0()
{
  unint64_t result;

  result = qword_253F10750;
  if (!qword_253F10750)
  {
    result = MEMORY[0x2199CD934](&unk_21442C7B0, &type metadata for AreaSeriesKey);
    atomic_store(result, (unint64_t *)&qword_253F10750);
  }
  return result;
}

double sub_21432D1E4(uint64_t a1, CGFloat a2, CGFloat a3, CGFloat a4, double a5)
{
  uint64_t v5;
  CGFloat *v8;
  double v9;
  double v10;
  CGFloat v11;
  CGFloat v12;
  CGFloat v13;
  CGFloat v14;
  double v15;
  double v16;
  CGRect v20;
  CGRect v21;
  CGRect v22;
  CGRect v23;
  CGRect v24;
  CGRect v25;

  v5 = *(_QWORD *)(a1 + 16);
  if (v5)
  {
    v8 = (CGFloat *)(swift_bridgeObjectRetain() + 56);
    v9 = -INFINITY;
    v10 = INFINITY;
    do
    {
      v12 = *(v8 - 1);
      v11 = *v8;
      v13 = *(v8 - 3);
      v14 = *(v8 - 2);
      v20.origin.x = v13;
      v20.origin.y = v14;
      v20.size.width = v12;
      v20.size.height = *v8;
      if (CGRectGetMaxY(v20) > a3)
      {
        v21.origin.x = v13;
        v21.origin.y = v14;
        v21.size.width = v12;
        v21.size.height = v11;
        if (CGRectGetMinY(v21) < a4)
        {
          v22.origin.x = v13;
          v22.origin.y = v14;
          v22.size.width = v12;
          v22.size.height = v11;
          if (CGRectGetMaxX(v22) + a5 < a2)
          {
            v23.origin.x = v13;
            v23.origin.y = v14;
            v23.size.width = v12;
            v23.size.height = v11;
            v15 = CGRectGetMaxX(v23) + a5;
            if (v9 <= v15)
              v9 = v15;
          }
          v24.origin.x = v13;
          v24.origin.y = v14;
          v24.size.width = v12;
          v24.size.height = v11;
          if (CGRectGetMinX(v24) - a5 > a2)
          {
            v25.origin.x = v13;
            v25.origin.y = v14;
            v25.size.width = v12;
            v25.size.height = v11;
            v16 = CGRectGetMinX(v25) - a5;
            if (v16 < v10)
              v10 = v16;
          }
          if (v10 < v9)
          {
            swift_bridgeObjectRelease();
            return a2;
          }
        }
      }
      v8 += 4;
      --v5;
    }
    while (v5);
    swift_bridgeObjectRelease();
    if (v9 <= v10)
      return v9;
    __break(1u);
  }
  return -INFINITY;
}

uint64_t sub_21432D390(uint64_t a1)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  char *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t result;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  CGFloat v20;
  CGFloat v21;
  CGFloat v22;
  CGFloat v23;
  double v24;
  double v25;
  double v26;
  double v27;
  CGFloat v28;
  CGFloat v29;
  CGFloat v30;
  CGFloat v31;
  CGFloat v32;
  CGFloat v33;
  CGFloat v34;
  CGFloat v35;
  CGFloat v36;
  unint64_t v37;
  unint64_t v38;
  CGFloat *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  int *v57;
  _QWORD *v58;
  CGFloat height;
  CGFloat width;
  CGFloat y;
  CGFloat x;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  double v66;
  char *v67;
  char *v68;
  _QWORD v69[2];
  char *v70;
  CGRect v71;
  CGRect v72;
  CGRect v73;
  CGRect v74;
  CGRect v75;
  CGRect v76;
  CGRect v77;
  CGRect v78;
  CGRect v79;
  CGRect v80;

  v2 = (int *)type metadata accessor for SgGroup(0);
  v3 = MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v55 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v3);
  v64 = (uint64_t)&v55 - v6;
  v7 = swift_allocBox();
  v9 = v8;
  v10 = (char *)v8 + v2[6];
  v11 = type metadata accessor for SgClipRect(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
  *v9 = 0;
  v9[1] = a1;
  *(_QWORD *)((char *)v9 + v2[7]) = 0x3FF0000000000000;
  *(_QWORD *)((char *)v9 + v2[8]) = 0;
  v12 = (char *)MEMORY[0x24BEE4AF8];
  *(_QWORD *)((char *)v9 + v2[9]) = MEMORY[0x24BEE4AF8];
  *((_BYTE *)v9 + v2[10]) = 0;
  v70 = v12;
  swift_bridgeObjectRetain();
  v65 = v7;
  sub_2143442B0(v7);
  sub_21432D98C(&v70);
  v63 = 0;
  v68 = v12;
  v69[0] = MEMORY[0x24BEE4B08];
  v13 = v70;
  v14 = *((_QWORD *)v70 + 2);
  if (!v14)
  {
LABEL_29:
    v67 = v12;
    sub_214344694(v65);
    MEMORY[0x24BDAC7A8](v43);
    *(&v55 - 2) = (uint64_t)v69;
    *(&v55 - 1) = (uint64_t)&v67;
    v44 = v64;
    sub_21423145C((uint64_t)v9, v64);
    sub_21423145C(v44, (uint64_t)v5);
    v45 = swift_bridgeObjectRetain();
    v46 = sub_21432F560(v45, (uint64_t)sub_21432DDD0, (uint64_t)(&v55 - 4));
    swift_bridgeObjectRelease();
    sub_2142314A0(v44);
    swift_bridgeObjectRelease();
    *((_QWORD *)v5 + 1) = v46;
    v47 = swift_allocBox();
    v49 = v48;
    v50 = sub_2141ED148((uint64_t)v5, v48);
    if (*(_QWORD *)(v69[0] + 16))
    {
      MEMORY[0x24BDAC7A8](v50);
      *(&v55 - 2) = (uint64_t)v69;
      sub_21423145C(v49, v44);
      sub_21423145C(v44, (uint64_t)v5);
      v51 = swift_bridgeObjectRetain();
      v52 = sub_214330528(v51, (uint64_t (*)(uint64_t))sub_21432F9B0, (uint64_t)(&v55 - 4));
      swift_bridgeObjectRelease();
      sub_2142314A0(v44);
      swift_bridgeObjectRelease();
      *((_QWORD *)v5 + 1) = v52;
      v53 = swift_allocBox();
      sub_2141ED148((uint64_t)v5, v54);
      swift_release();
      swift_release();
      v47 = v53;
    }
    else
    {
      swift_release();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v47;
  }
  v56 = v5;
  v57 = v2;
  result = swift_bridgeObjectRetain();
  v16 = 0;
  v17 = MEMORY[0x24BEE4AF8];
  v58 = v9;
  while (1)
  {
    if (v16 >= *((_QWORD *)v13 + 2))
    {
      __break(1u);
      goto LABEL_34;
    }
    v18 = (uint64_t)&v13[96 * v16 + 32];
    v19 = *(_QWORD *)(v18 + 16);
    v20 = *(double *)(v18 + 24);
    v21 = *(double *)(v18 + 32);
    v22 = *(double *)(v18 + 40);
    v23 = *(double *)(v18 + 48);
    v24 = *(double *)(v18 + 72);
    v25 = *(double *)(v18 + 80);
    v26 = *(double *)(v18 + 88);
    v27 = *(double *)(v18 + 64);
    v66 = *(double *)(v18 + 56);
    v71.origin.x = v20;
    v71.origin.y = v21;
    v71.size.width = v22;
    v71.size.height = v23;
    if (CGRectGetMinX(v71) >= v27)
    {
      v72.origin.x = v20;
      v72.origin.y = v21;
      v72.size.width = v22;
      v72.size.height = v23;
      if (v25 >= CGRectGetMaxX(v72))
      {
        v73.origin.x = v20;
        v73.origin.y = v21;
        v73.size.width = v22;
        v73.size.height = v23;
        if (CGRectGetMinY(v73) >= v24)
        {
          v74.origin.x = v20;
          v74.origin.y = v21;
          v74.size.width = v22;
          v74.size.height = v23;
          if (v26 >= CGRectGetMaxY(v74))
            break;
        }
      }
    }
    result = sub_21420FE60((uint64_t *)&v67, v19);
LABEL_9:
    if (++v16 == v14)
    {
      swift_bridgeObjectRelease();
      v5 = v56;
      v12 = (char *)MEMORY[0x24BEE4AF8];
      goto LABEL_29;
    }
  }
  v28 = -v66;
  swift_bridgeObjectRetain();
  v75.origin.x = v20;
  v75.origin.y = v21;
  v75.size.width = v22;
  v75.size.height = v23;
  v76 = CGRectInset(v75, v28, v28);
  v66 = *(double *)(v17 + 16);
  if (v66 == 0.0)
  {
    swift_bridgeObjectRelease();
LABEL_17:
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (uint64_t)sub_2142245B0(0, *(_QWORD *)(v17 + 16) + 1, 1, (char *)v17);
      v17 = result;
    }
    v38 = *(_QWORD *)(v17 + 16);
    v37 = *(_QWORD *)(v17 + 24);
    if (v38 >= v37 >> 1)
    {
      result = (uint64_t)sub_2142245B0((char *)(v37 > 1), v38 + 1, 1, (char *)v17);
      v17 = result;
    }
    *(_QWORD *)(v17 + 16) = v38 + 1;
    v39 = (CGFloat *)(v17 + 32 * v38);
    v39[4] = v20;
    v39[5] = v21;
    v39[6] = v22;
    v39[7] = v23;
    v68 = (char *)v17;
    goto LABEL_9;
  }
  y = v76.origin.y;
  x = v76.origin.x;
  v29 = *(double *)(v17 + 32);
  v30 = *(double *)(v17 + 40);
  width = v76.size.width;
  v31 = *(double *)(v17 + 48);
  v32 = *(double *)(v17 + 56);
  height = v76.size.height;
  swift_bridgeObjectRetain();
  v77.origin.x = v29;
  v77.origin.y = v30;
  v34 = y;
  v33 = x;
  v77.size.width = v31;
  v35 = width;
  v77.size.height = v32;
  v36 = height;
  v78.origin.x = x;
  v78.origin.y = y;
  v78.size.width = width;
  v78.size.height = height;
  if (CGRectIntersectsRect(v77, v78))
    goto LABEL_13;
  if (*(_QWORD *)&v66 == 1)
    goto LABEL_16;
  v79.origin.x = v33;
  v79.origin.y = v34;
  v79.size.width = v35;
  v79.size.height = v36;
  result = CGRectIntersectsRect(*(CGRect *)(v17 + 64), v79);
  if ((result & 1) != 0)
  {
LABEL_13:
    swift_bridgeObjectRelease_n();
    result = sub_21420FE60((uint64_t *)&v67, v19);
    v9 = v58;
    goto LABEL_9;
  }
  if (*(_QWORD *)&v66 == 2)
  {
LABEL_16:
    swift_bridgeObjectRelease_n();
    v9 = v58;
    goto LABEL_17;
  }
  v40 = v17 + 120;
  v41 = 2;
  while (1)
  {
    v42 = v41 + 1;
    if (__OFADD__(v41, 1))
      break;
    v80.origin.x = v33;
    v80.origin.y = v34;
    v80.size.width = v35;
    v80.size.height = v36;
    result = CGRectIntersectsRect(*(CGRect *)(v40 - 24), v80);
    if ((result & 1) != 0)
      goto LABEL_13;
    v40 += 32;
    ++v41;
    if (v42 == *(_QWORD *)&v66)
      goto LABEL_16;
  }
LABEL_34:
  __break(1u);
  return result;
}

uint64_t sub_21432D98C(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_21434EC38((uint64_t)v2);
  v3 = *((_QWORD *)v2 + 2);
  v5[0] = (uint64_t)(v2 + 32);
  v5[1] = v3;
  result = sub_21432DDD8(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_21432D9F8(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  double v8;
  double v9;
  double v10;
  double v11;
  CGFloat v12;
  CGFloat v13;
  double v14;
  double v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  CGFloat *v28;
  double v29;
  double v30;
  double v31;
  double v32;
  uint64_t v33;
  CGRect v34;
  CGRect v35;
  CGRect v36;
  CGRect v37;
  CGRect v38;
  CGRect v39;

  v8 = *(double *)(a1 + 8);
  v9 = *(double *)(a1 + 16);
  v10 = *(double *)(a1 + 24);
  v11 = *(double *)(a1 + 32);
  if (v10 >= v8)
    v12 = *(double *)(a1 + 8);
  else
    v12 = *(double *)(a1 + 24);
  if (v11 >= v9)
    v13 = *(double *)(a1 + 16);
  else
    v13 = *(double *)(a1 + 32);
  v14 = vabdd_f64(v10, v8);
  v15 = vabdd_f64(v11, v9);
  v34.origin.x = v12;
  v34.origin.y = v13;
  v34.size.width = v14;
  v34.size.height = v15;
  result = CGRectEqualToRect(v34, *MEMORY[0x24BDBF070]);
  if ((result & 1) != 0)
    return result;
  v17 = *a2;
  swift_bridgeObjectRetain();
  v35.origin.x = v12;
  v35.origin.y = v13;
  v35.size.width = v14;
  v35.size.height = v15;
  v36 = CGRectInset(v35, -1.0, -1.0);
  v18 = *(_QWORD *)(v17 + 16);
  if (v18)
  {
    x = v36.origin.x;
    y = v36.origin.y;
    width = v36.size.width;
    height = v36.size.height;
    v29 = v15;
    v30 = v14;
    v31 = v13;
    v32 = v12;
    v12 = *(double *)(v17 + 32);
    v13 = *(double *)(v17 + 40);
    v14 = *(double *)(v17 + 48);
    v15 = *(double *)(v17 + 56);
    swift_bridgeObjectRetain();
    v37.origin.x = v12;
    v37.origin.y = v13;
    v37.size.width = v14;
    v37.size.height = v15;
    v38.origin.x = x;
    v38.origin.y = y;
    v38.size.width = width;
    v38.size.height = height;
    if (CGRectIntersectsRect(v37, v38))
    {
LABEL_10:
      swift_bridgeObjectRelease_n();
      return sub_21420FE60(&v33, *(_QWORD *)a1);
    }
    if (v18 != 1)
    {
      v23 = v17 + 88;
      v24 = 1;
      while (1)
      {
        v25 = v24 + 1;
        if (__OFADD__(v24, 1))
          break;
        v39.origin.x = x;
        v39.origin.y = y;
        v39.size.width = width;
        v39.size.height = height;
        if (CGRectIntersectsRect(*(CGRect *)(v23 - 24), v39))
          goto LABEL_10;
        v23 += 32;
        ++v24;
        if (v25 == v18)
          goto LABEL_16;
      }
      __break(1u);
      goto LABEL_23;
    }
LABEL_16:
    swift_bridgeObjectRelease();
    v13 = v31;
    v12 = v32;
    v15 = v29;
    v14 = v30;
  }
  swift_bridgeObjectRelease();
  a3 = *a4;
  result = swift_isUniquelyReferenced_nonNull_native();
  *a4 = a3;
  if ((result & 1) == 0)
  {
LABEL_23:
    result = (uint64_t)sub_2142245B0(0, *(_QWORD *)(a3 + 16) + 1, 1, (char *)a3);
    a3 = result;
    *a4 = result;
  }
  v27 = *(_QWORD *)(a3 + 16);
  v26 = *(_QWORD *)(a3 + 24);
  if (v27 >= v26 >> 1)
  {
    result = (uint64_t)sub_2142245B0((char *)(v26 > 1), v27 + 1, 1, (char *)a3);
    a3 = result;
  }
  *(_QWORD *)(a3 + 16) = v27 + 1;
  v28 = (CGFloat *)(a3 + 32 * v27);
  v28[4] = v12;
  v28[5] = v13;
  v28[6] = v14;
  v28[7] = v15;
  *a4 = a3;
  return result;
}

void sub_21432DC24(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  uint64_t v13;
  double MinY;
  double MaxY;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  uint64_t v25;
  CGRect v26;
  CGRect v27;
  CGRect v28;

  v3 = *(unsigned __int8 *)(a1 + 104);
  if (v3 != 2 && (v3 & 1) != 0)
  {
    v6 = *(double *)(a1 + 144);
    v7 = *(double *)(a1 + 120);
    v24 = *(double *)(a1 + 128);
    v8 = *(double *)(a1 + 8);
    v9 = *(double *)(a1 + 24);
    v10 = *(double *)(a1 + 88);
    v11 = *(double *)(a1 + 96);
    v12 = *(double *)(a1 + 16) - *(double *)(a1 + 32) * v11;
    v26.origin.x = v8 - v9 * v10;
    v26.origin.y = v12;
    v26.size.width = v10;
    v26.size.height = v11;
    if (CGRectIsEmpty(v26))
      goto LABEL_24;
    v23 = v6;
    v13 = *a3;
    swift_bridgeObjectRetain();
    v27.origin.x = v8 - v9 * v10;
    v27.origin.y = v12;
    v27.size.width = v10;
    v27.size.height = v11;
    MinY = CGRectGetMinY(v27);
    v28.origin.x = v8 - v9 * v10;
    v28.origin.y = v12;
    v28.size.width = v10;
    v28.size.height = v11;
    MaxY = CGRectGetMaxY(v28);
    if (MinY > MaxY)
    {
      __break(1u);
      return;
    }
    v16 = sub_21432D1E4(v13, v8, MinY, MaxY, v7);
    v18 = v17;
    swift_bridgeObjectRelease();
    if (v16 > v24)
      v19 = v16;
    else
      v19 = v24;
    v20 = v23;
    if (v23 >= v18)
      v20 = v18;
    if (v19 >= v20)
      goto LABEL_24;
    if (v9 > 0.0)
    {
      v21 = (v8 - v19) / v9;
      if (v21 < 0.0)
        v21 = 0.0;
      if (v21 < v10)
        v10 = v21;
      *(double *)(a1 + 88) = v10;
    }
    if (v9 < 1.0)
    {
      v22 = (v8 - v20) / (v9 + -1.0);
      if (v22 < 0.0)
        v22 = 0.0;
      if (v22 < v10)
        v10 = v22;
      *(double *)(a1 + 88) = v10;
    }
    if (v10 < 2.22044605e-16)
LABEL_24:
      sub_21420FE60(&v25, *(_QWORD *)a1);
  }
}

void sub_21432DDD0(uint64_t a1)
{
  uint64_t v1;

  sub_21432DC24(a1, *(_QWORD *)(v1 + 16), *(uint64_t **)(v1 + 24));
}

uint64_t sub_21432DDD8(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  double v15;
  uint64_t v16;
  double v17;
  _BOOL4 v18;
  int v19;
  double *v20;
  double v21;
  double v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double *v32;
  uint64_t v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  double *v37;
  double v38;
  _BOOL4 v39;
  uint64_t v40;
  double v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  BOOL v64;
  unint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  BOOL v74;
  uint64_t v75;
  char v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  BOOL v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  double *v116;
  uint64_t v117;

  v3 = a1[1];
  result = sub_214425730();
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_138;
    if (v3)
      return sub_21432E510(0, v3, 1, a1);
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_137;
  v109 = result;
  v106 = a1;
  if (v3 > 1)
  {
    v6 = v5 >> 1;
    sub_2141D8BF8(&qword_253F10270);
    result = sub_21442504C();
    *(_QWORD *)(result + 16) = v6;
    v108 = result;
    v116 = (double *)(result + 32);
LABEL_13:
    v8 = 0;
    v9 = *a1;
    v107 = *a1 + 200;
    v105 = *a1 + 88;
    v10 = MEMORY[0x24BEE4AF8];
    v110 = v3;
    v117 = v9;
    while (1)
    {
      v12 = v8++;
      if (v8 < v3)
      {
        v13 = v9 + 96 * v8;
        v14 = *(double *)v13;
        v15 = *(double *)(v13 + 8);
        v16 = v9 + 96 * v12;
        v17 = *(double *)v16;
        v18 = *(double *)v16 < v14;
        v19 = *(_QWORD *)&v15 < *(_QWORD *)(v16 + 8);
        if (v14 != v17)
          v19 = v18;
        v8 = v12 + 2;
        if (v12 + 2 < v3)
        {
          v20 = (double *)(v107 + 96 * v12);
          while (1)
          {
            v21 = v14;
            v14 = *(v20 - 1);
            v22 = *v20;
            v23 = *(_QWORD *)v20 < *(_QWORD *)&v15;
            if (v14 != v21)
              v23 = v21 < v14;
            if (v19 != v23)
              break;
            v20 += 12;
            ++v8;
            v15 = v22;
            if (v3 == v8)
            {
              v8 = v3;
              break;
            }
          }
        }
        if (v19)
        {
          if (v8 < v12)
            goto LABEL_139;
          if (v12 < v8)
          {
            v24 = 96 * v8;
            v25 = 96 * v12;
            v26 = v8;
            v27 = v12;
            do
            {
              if (v27 != --v26)
              {
                if (!v9)
                  goto LABEL_144;
                v28 = v9 + v24;
                v29 = *(_QWORD *)(v9 + v25);
                v30 = *(_QWORD *)(v9 + v25 + 88);
                v114 = *(_OWORD *)(v9 + v25 + 24);
                v115 = *(_OWORD *)(v9 + v25 + 8);
                v112 = *(_OWORD *)(v9 + v25 + 56);
                v113 = *(_OWORD *)(v9 + v25 + 40);
                v111 = *(_OWORD *)(v9 + v25 + 72);
                result = (uint64_t)memmove((void *)(v9 + v25), (const void *)(v9 + v24 - 96), 0x60uLL);
                v9 = v117;
                *(_QWORD *)(v28 - 96) = v29;
                *(_OWORD *)(v28 - 88) = v115;
                *(_OWORD *)(v28 - 72) = v114;
                *(_OWORD *)(v28 - 56) = v113;
                *(_OWORD *)(v28 - 40) = v112;
                *(_OWORD *)(v28 - 24) = v111;
                *(_QWORD *)(v28 - 8) = v30;
              }
              ++v27;
              v24 -= 96;
              v25 += 96;
            }
            while (v27 < v26);
            v3 = v110;
          }
        }
      }
      if (v8 < v3)
      {
        if (__OFSUB__(v8, v12))
          goto LABEL_136;
        if (v8 - v12 < v109)
        {
          v31 = v12 + v109;
          if (__OFADD__(v12, v109))
            goto LABEL_140;
          if (v31 >= v3)
            v31 = v3;
          if (v31 < v12)
          {
LABEL_141:
            __break(1u);
LABEL_142:
            __break(1u);
LABEL_143:
            __break(1u);
LABEL_144:
            __break(1u);
LABEL_145:
            __break(1u);
            return result;
          }
          if (v8 != v31)
          {
            v32 = (double *)(v105 + 96 * v8);
            do
            {
              v33 = v9 + 96 * v8;
              v34 = *(double *)v33;
              v35 = *(_QWORD *)(v33 + 8);
              v36 = v12;
              v37 = v32;
              do
              {
                v38 = *(v37 - 23);
                v39 = v35 < *((_QWORD *)v37 - 22);
                if (v34 != v38)
                  v39 = v38 < v34;
                if (!v39)
                  break;
                if (!v9)
                  goto LABEL_142;
                v40 = *((_QWORD *)v37 - 9);
                v41 = *v37;
                v42 = *((_OWORD *)v37 - 4);
                v43 = *((_OWORD *)v37 - 3);
                v44 = *((_OWORD *)v37 - 2);
                v45 = *((_OWORD *)v37 - 1);
                v46 = *(_OWORD *)(v37 - 17);
                *(_OWORD *)(v37 - 7) = *(_OWORD *)(v37 - 19);
                *(_OWORD *)(v37 - 5) = v46;
                v47 = *(_OWORD *)(v37 - 13);
                *(_OWORD *)(v37 - 3) = *(_OWORD *)(v37 - 15);
                *(_OWORD *)(v37 - 1) = v47;
                v48 = *(_OWORD *)(v37 - 21);
                *(_OWORD *)(v37 - 11) = *(_OWORD *)(v37 - 23);
                *(_OWORD *)(v37 - 9) = v48;
                *(v37 - 12) = v41;
                v37 -= 12;
                *(v37 - 11) = v34;
                *((_QWORD *)v37 - 10) = v35;
                *((_QWORD *)v37 - 9) = v40;
                *((_OWORD *)v37 - 4) = v42;
                *((_OWORD *)v37 - 3) = v43;
                ++v36;
                *((_OWORD *)v37 - 2) = v44;
                *((_OWORD *)v37 - 1) = v45;
              }
              while (v8 != v36);
              ++v8;
              v32 += 12;
            }
            while (v8 != v31);
            v8 = v31;
          }
        }
      }
      if (v8 < v12)
        goto LABEL_131;
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        result = (uint64_t)sub_214224E24(0, *(_QWORD *)(v10 + 16) + 1, 1, (char *)v10);
        v10 = result;
      }
      v50 = *(_QWORD *)(v10 + 16);
      v49 = *(_QWORD *)(v10 + 24);
      v11 = v50 + 1;
      v9 = v117;
      if (v50 >= v49 >> 1)
      {
        result = (uint64_t)sub_214224E24((char *)(v49 > 1), v50 + 1, 1, (char *)v10);
        v9 = v117;
        v10 = result;
      }
      *(_QWORD *)(v10 + 16) = v11;
      v51 = v10 + 32;
      v52 = (uint64_t *)(v10 + 32 + 16 * v50);
      *v52 = v12;
      v52[1] = v8;
      if (v50)
      {
        while (1)
        {
          v53 = v11 - 1;
          if (v11 >= 4)
          {
            v58 = v51 + 16 * v11;
            v59 = *(_QWORD *)(v58 - 64);
            v60 = *(_QWORD *)(v58 - 56);
            v64 = __OFSUB__(v60, v59);
            v61 = v60 - v59;
            if (v64)
              goto LABEL_120;
            v63 = *(_QWORD *)(v58 - 48);
            v62 = *(_QWORD *)(v58 - 40);
            v64 = __OFSUB__(v62, v63);
            v56 = v62 - v63;
            v57 = v64;
            if (v64)
              goto LABEL_121;
            v65 = v11 - 2;
            v66 = (uint64_t *)(v51 + 16 * (v11 - 2));
            v68 = *v66;
            v67 = v66[1];
            v64 = __OFSUB__(v67, v68);
            v69 = v67 - v68;
            if (v64)
              goto LABEL_122;
            v64 = __OFADD__(v56, v69);
            v70 = v56 + v69;
            if (v64)
              goto LABEL_124;
            if (v70 >= v61)
            {
              v88 = (uint64_t *)(v51 + 16 * v53);
              v90 = *v88;
              v89 = v88[1];
              v64 = __OFSUB__(v89, v90);
              v91 = v89 - v90;
              if (v64)
                goto LABEL_130;
              v81 = v56 < v91;
              goto LABEL_90;
            }
          }
          else
          {
            if (v11 != 3)
            {
              v82 = *(_QWORD *)(v10 + 32);
              v83 = *(_QWORD *)(v10 + 40);
              v64 = __OFSUB__(v83, v82);
              v75 = v83 - v82;
              v76 = v64;
              goto LABEL_84;
            }
            v55 = *(_QWORD *)(v10 + 32);
            v54 = *(_QWORD *)(v10 + 40);
            v64 = __OFSUB__(v54, v55);
            v56 = v54 - v55;
            v57 = v64;
          }
          if ((v57 & 1) != 0)
            goto LABEL_123;
          v65 = v11 - 2;
          v71 = (uint64_t *)(v51 + 16 * (v11 - 2));
          v73 = *v71;
          v72 = v71[1];
          v74 = __OFSUB__(v72, v73);
          v75 = v72 - v73;
          v76 = v74;
          if (v74)
            goto LABEL_125;
          v77 = (uint64_t *)(v51 + 16 * v53);
          v79 = *v77;
          v78 = v77[1];
          v64 = __OFSUB__(v78, v79);
          v80 = v78 - v79;
          if (v64)
            goto LABEL_127;
          if (__OFADD__(v75, v80))
            goto LABEL_129;
          if (v75 + v80 >= v56)
          {
            v81 = v56 < v80;
LABEL_90:
            if (v81)
              v53 = v65;
            goto LABEL_92;
          }
LABEL_84:
          if ((v76 & 1) != 0)
            goto LABEL_126;
          v84 = (uint64_t *)(v51 + 16 * v53);
          v86 = *v84;
          v85 = v84[1];
          v64 = __OFSUB__(v85, v86);
          v87 = v85 - v86;
          if (v64)
            goto LABEL_128;
          if (v87 < v75)
            goto LABEL_15;
LABEL_92:
          v92 = v53 - 1;
          if (v53 - 1 >= v11)
          {
            __break(1u);
LABEL_117:
            __break(1u);
LABEL_118:
            __break(1u);
LABEL_119:
            __break(1u);
LABEL_120:
            __break(1u);
LABEL_121:
            __break(1u);
LABEL_122:
            __break(1u);
LABEL_123:
            __break(1u);
LABEL_124:
            __break(1u);
LABEL_125:
            __break(1u);
LABEL_126:
            __break(1u);
LABEL_127:
            __break(1u);
LABEL_128:
            __break(1u);
LABEL_129:
            __break(1u);
LABEL_130:
            __break(1u);
LABEL_131:
            __break(1u);
LABEL_132:
            __break(1u);
LABEL_133:
            __break(1u);
LABEL_134:
            __break(1u);
LABEL_135:
            __break(1u);
LABEL_136:
            __break(1u);
LABEL_137:
            __break(1u);
LABEL_138:
            __break(1u);
LABEL_139:
            __break(1u);
LABEL_140:
            __break(1u);
            goto LABEL_141;
          }
          if (!v9)
            goto LABEL_143;
          v93 = (uint64_t *)(v51 + 16 * v92);
          v94 = *v93;
          v95 = (_QWORD *)(v51 + 16 * v53);
          v96 = v95[1];
          result = sub_21432E5D8((double *)(v9 + 96 * *v93), (double *)(v9 + 96 * *v95), v9 + 96 * v96, v116);
          if (v1)
            goto LABEL_100;
          if (v96 < v94)
            goto LABEL_117;
          if (v53 > *(_QWORD *)(v10 + 16))
            goto LABEL_118;
          *v93 = v94;
          *(_QWORD *)(v51 + 16 * v92 + 8) = v96;
          v97 = *(_QWORD *)(v10 + 16);
          if (v53 >= v97)
            goto LABEL_119;
          v11 = v97 - 1;
          result = (uint64_t)memmove((void *)(v51 + 16 * v53), v95 + 2, 16 * (v97 - 1 - v53));
          *(_QWORD *)(v10 + 16) = v97 - 1;
          v9 = v117;
          if (v97 <= 2)
            goto LABEL_15;
        }
      }
      v11 = 1;
LABEL_15:
      v3 = v110;
      if (v8 >= v110)
      {
        v7 = v108;
        goto LABEL_103;
      }
    }
  }
  v7 = MEMORY[0x24BEE4AF8];
  v116 = (double *)(MEMORY[0x24BEE4AF8] + 32);
  if (v3 == 1)
  {
    v108 = MEMORY[0x24BEE4AF8];
    goto LABEL_13;
  }
  v11 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
  v10 = MEMORY[0x24BEE4AF8];
LABEL_103:
  result = v10;
  v108 = v7;
  if (v11 >= 2)
  {
    v98 = *v106;
    do
    {
      v99 = v11 - 2;
      if (v11 < 2)
        goto LABEL_132;
      if (!v98)
        goto LABEL_145;
      v100 = result;
      v101 = *(_QWORD *)(result + 32 + 16 * v99);
      v102 = *(_QWORD *)(result + 32 + 16 * (v11 - 1) + 8);
      result = sub_21432E5D8((double *)(v98 + 96 * v101), (double *)(v98 + 96 * *(_QWORD *)(result + 32 + 16 * (v11 - 1))), v98 + 96 * v102, v116);
      if (v1)
        break;
      if (v102 < v101)
        goto LABEL_133;
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        result = (uint64_t)sub_21435010C(v100);
        v100 = result;
      }
      if (v99 >= *(_QWORD *)(v100 + 16))
        goto LABEL_134;
      v103 = (_QWORD *)(v100 + 32 + 16 * v99);
      *v103 = v101;
      v103[1] = v102;
      v104 = *(_QWORD *)(v100 + 16);
      if (v11 > v104)
        goto LABEL_135;
      memmove((void *)(v100 + 32 + 16 * (v11 - 1)), (const void *)(v100 + 32 + 16 * v11), 16 * (v104 - v11));
      result = v100;
      *(_QWORD *)(v100 + 16) = v104 - 1;
      v11 = v104 - 1;
    }
    while (v104 > 2);
  }
LABEL_100:
  swift_bridgeObjectRelease();
  *(_QWORD *)(v108 + 16) = 0;
  return swift_bridgeObjectRelease();
}

uint64_t sub_21432E510(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  double *v10;
  double v11;
  _BOOL4 v12;
  uint64_t v13;
  double v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;

  if (a3 != a2)
  {
    v4 = *a4;
    v5 = *a4 + 96 * a3 + 88;
LABEL_5:
    v6 = v4 + 96 * a3;
    v7 = *(double *)v6;
    v8 = *(_QWORD *)(v6 + 8);
    v9 = result;
    v10 = (double *)v5;
    while (1)
    {
      v11 = *(v10 - 23);
      v12 = v8 < *((_QWORD *)v10 - 22);
      if (v7 != v11)
        v12 = v11 < v7;
      if (!v12)
      {
LABEL_4:
        ++a3;
        v5 += 96;
        if (a3 == a2)
          return result;
        goto LABEL_5;
      }
      if (!v4)
        break;
      v13 = *((_QWORD *)v10 - 9);
      v14 = *v10;
      v15 = *((_OWORD *)v10 - 4);
      v16 = *((_OWORD *)v10 - 3);
      v17 = *((_OWORD *)v10 - 2);
      v18 = *((_OWORD *)v10 - 1);
      v19 = *(_OWORD *)(v10 - 17);
      *(_OWORD *)(v10 - 7) = *(_OWORD *)(v10 - 19);
      *(_OWORD *)(v10 - 5) = v19;
      v20 = *(_OWORD *)(v10 - 13);
      *(_OWORD *)(v10 - 3) = *(_OWORD *)(v10 - 15);
      *(_OWORD *)(v10 - 1) = v20;
      v21 = *(_OWORD *)(v10 - 21);
      *(_OWORD *)(v10 - 11) = *(_OWORD *)(v10 - 23);
      *(_OWORD *)(v10 - 9) = v21;
      *(v10 - 12) = v14;
      v10 -= 12;
      *(v10 - 11) = v7;
      *((_QWORD *)v10 - 10) = v8;
      *((_QWORD *)v10 - 9) = v13;
      *((_OWORD *)v10 - 4) = v15;
      *((_OWORD *)v10 - 3) = v16;
      ++v9;
      *((_OWORD *)v10 - 2) = v17;
      *((_OWORD *)v10 - 1) = v18;
      if (a3 == v9)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_21432E5D8(double *__dst, double *__src, unint64_t a3, double *a4)
{
  double *v4;
  double *v6;
  double *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _BOOL4 v13;
  double *v14;
  BOOL v15;
  char *v16;
  char *v17;
  double v18;
  double *v19;
  double v20;
  _BOOL4 v21;
  BOOL v22;
  uint64_t v23;

  v4 = a4;
  v6 = __src;
  v7 = __dst;
  v8 = (char *)__src - (char *)__dst;
  v9 = ((char *)__src - (char *)__dst) / 96;
  v10 = a3 - (_QWORD)__src;
  v11 = (uint64_t)(a3 - (_QWORD)__src) / 96;
  if (v9 >= v11)
  {
    if (a4 != __src || &__src[12 * v11] <= a4)
      memmove(a4, __src, 96 * v11);
    v12 = (char *)&v4[12 * v11];
    if (v7 >= v6 || v10 < 96)
      goto LABEL_40;
    v16 = (char *)(a3 - 96);
    while (1)
    {
      v17 = v16 + 96;
      v18 = *((double *)v12 - 12);
      v19 = v6 - 12;
      v20 = *(v6 - 12);
      v21 = *((_QWORD *)v12 - 11) < *((_QWORD *)v6 - 11);
      if (v18 != v20)
        v21 = v20 < v18;
      if (v21)
      {
        if (v17 != (char *)v6)
        {
          v6 -= 12;
LABEL_37:
          memmove(v16, v19, 0x60uLL);
          goto LABEL_38;
        }
        v22 = v16 >= (char *)v6;
        v6 -= 12;
        if (v22)
          goto LABEL_37;
      }
      else
      {
        v19 = (double *)(v12 - 96);
        if (v17 != v12)
        {
          v12 -= 96;
          goto LABEL_37;
        }
        v22 = v16 >= v12;
        v12 -= 96;
        if (v22)
          goto LABEL_37;
      }
LABEL_38:
      if (v6 > v7)
      {
        v16 -= 96;
        if (v12 > (char *)v4)
          continue;
      }
      goto LABEL_40;
    }
  }
  if (a4 != __dst || &__dst[12 * v9] <= a4)
    memmove(a4, __dst, 96 * v9);
  v12 = (char *)&v4[12 * v9];
  if ((unint64_t)v6 < a3 && v8 >= 96)
  {
    while (1)
    {
      v13 = *((_QWORD *)v6 + 1) < *((_QWORD *)v4 + 1);
      if (*v6 != *v4)
        v13 = *v4 < *v6;
      if (!v13)
        break;
      v14 = v6;
      v15 = v7 == v6;
      v6 += 12;
      if (!v15)
        goto LABEL_14;
LABEL_15:
      v7 += 12;
      if (v4 >= (double *)v12 || (unint64_t)v6 >= a3)
        goto LABEL_17;
    }
    v14 = v4;
    v15 = v7 == v4;
    v4 += 12;
    if (v15)
      goto LABEL_15;
LABEL_14:
    memmove(v7, v14, 0x60uLL);
    goto LABEL_15;
  }
LABEL_17:
  v6 = v7;
LABEL_40:
  v23 = (v12 - (char *)v4) / 96;
  if (v6 != v4 || v6 >= &v4[12 * v23])
    memmove(v6, v4, 96 * v23);
  return 1;
}

uint64_t sub_21432E854(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  _QWORD v9[56];

  v9[6] = a2;
  v9[7] = a3;
  v9[0] = type metadata accessor for SgGroup(0);
  v4 = MEMORY[0x24BDAC7A8](v9[0]);
  v9[5] = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v9[4] = (char *)v9 - v6;
  v7 = *(_QWORD *)(a1 + 16);
  if (v7)
  {
    v9[54] = MEMORY[0x24BEE4AF8];
    sub_2141D3A14(0, v7, 0);
    __asm { BR              X9 }
  }
  return MEMORY[0x24BEE4AF8];
}

uint64_t sub_21432ECB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  _QWORD v9[56];

  v9[6] = a2;
  v9[7] = a3;
  v9[0] = type metadata accessor for SgGroup(0);
  v4 = MEMORY[0x24BDAC7A8](v9[0]);
  v9[5] = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v9[4] = (char *)v9 - v6;
  v7 = *(_QWORD *)(a1 + 16);
  if (v7)
  {
    v9[54] = MEMORY[0x24BEE4AF8];
    sub_2141D3A14(0, v7, 0);
    __asm { BR              X9 }
  }
  return MEMORY[0x24BEE4AF8];
}

uint64_t sub_21432F10C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  _QWORD v9[58];

  v9[6] = a2;
  v9[7] = a3;
  v9[0] = type metadata accessor for SgGroup(0);
  v4 = MEMORY[0x24BDAC7A8](v9[0]);
  v9[5] = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v9[4] = (char *)v9 - v6;
  v7 = *(_QWORD *)(a1 + 16);
  if (v7)
  {
    v9[56] = MEMORY[0x24BEE4AF8];
    sub_2141D3A14(0, v7, 0);
    __asm { BR              X9 }
  }
  return MEMORY[0x24BEE4AF8];
}

uint64_t sub_21432F560(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  _QWORD v9[2];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v11 = a2;
  v12 = a3;
  v10 = type metadata accessor for SgGroup(0);
  v4 = MEMORY[0x24BDAC7A8](v10);
  v9[1] = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v9[0] = (char *)v9 - v6;
  v7 = *(_QWORD *)(a1 + 16);
  if (v7)
  {
    v13 = MEMORY[0x24BEE4AF8];
    sub_2141D3A14(0, v7, 0);
    __asm { BR              X9 }
  }
  return MEMORY[0x24BEE4AF8];
}

BOOL sub_21432F9B0(uint64_t a1)
{
  uint64_t v1;

  return !sub_2141FF2F4(a1, **(_QWORD **)(v1 + 16));
}

uint64_t sub_21432F9D4(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD v18[6];
  uint64_t v19;

  v18[5] = a3;
  v18[0] = type metadata accessor for SgGroup(0);
  v5 = MEMORY[0x24BDAC7A8](v18[0]);
  v18[4] = (char *)v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v18[3] = (char *)v18 - v7;
  v8 = *(_QWORD *)(a1 + 16);
  v9 = MEMORY[0x24BEE4AF8];
  if (v8)
  {
    v19 = MEMORY[0x24BEE4AF8];
    sub_2141D3A14(0, v8, 0);
    v9 = v19;
    v10 = (unint64_t *)(a1 + 32);
    do
    {
      v12 = *v10++;
      v11 = v12;
      v13 = v12 >> 60;
      if ((v12 >> 60) - 3 >= 0xB)
        __asm { BR              X9 }
      swift_retain();
      sub_2142E9C84(v11);
      if ((a2(v14) & 1) == 0)
      {
        swift_release();
        v11 = 0xE000000000000000;
      }
      v19 = v9;
      v16 = *(_QWORD *)(v9 + 16);
      v15 = *(_QWORD *)(v9 + 24);
      if (v16 >= v15 >> 1)
      {
        sub_2141D3A14((char *)(v15 > 1), v16 + 1, 1);
        v9 = v19;
      }
      *(_QWORD *)(v9 + 16) = v16 + 1;
      *(_QWORD *)(v9 + 8 * v16 + 32) = v11;
      --v8;
    }
    while (v8);
  }
  return v9;
}

uint64_t sub_21432FD98(uint64_t a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;

  v21 = a3;
  v18 = type metadata accessor for SgGroup(0);
  v5 = MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v19 = (char *)&v17 - v7;
  v8 = *(_QWORD *)(a1 + 16);
  v9 = MEMORY[0x24BEE4AF8];
  if (v8)
  {
    v22 = MEMORY[0x24BEE4AF8];
    sub_2141D3A14(0, v8, 0);
    v9 = v22;
    v10 = (unint64_t *)(a1 + 32);
    do
    {
      v12 = *v10++;
      v11 = v12;
      v13 = v12 >> 60;
      if ((v12 >> 60) - 3 >= 0xB)
        __asm { BR              X9 }
      swift_retain();
      sub_2142E9C84(v11);
      if ((a2() & 1) == 0)
      {
        swift_release();
        v11 = 0xE000000000000000;
      }
      v22 = v9;
      v15 = *(_QWORD *)(v9 + 16);
      v14 = *(_QWORD *)(v9 + 24);
      if (v15 >= v14 >> 1)
      {
        sub_2141D3A14((char *)(v14 > 1), v15 + 1, 1);
        v9 = v22;
      }
      *(_QWORD *)(v9 + 16) = v15 + 1;
      *(_QWORD *)(v9 + 8 * v15 + 32) = v11;
      --v8;
    }
    while (v8);
  }
  return v9;
}

uint64_t sub_214330168(uint64_t a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;

  v21 = a3;
  v18 = type metadata accessor for SgGroup(0);
  v5 = MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v19 = (char *)&v17 - v7;
  v8 = *(_QWORD *)(a1 + 16);
  v9 = MEMORY[0x24BEE4AF8];
  if (v8)
  {
    v22 = MEMORY[0x24BEE4AF8];
    sub_2141D3A14(0, v8, 0);
    v9 = v22;
    v10 = (unint64_t *)(a1 + 32);
    do
    {
      v12 = *v10++;
      v11 = v12;
      v13 = v12 >> 60;
      if ((v12 >> 60) - 3 >= 0xB)
        __asm { BR              X9 }
      swift_retain();
      sub_2142E9C84(v11);
      if ((a2() & 1) == 0)
      {
        swift_release();
        v11 = 0xE000000000000000;
      }
      v22 = v9;
      v15 = *(_QWORD *)(v9 + 16);
      v14 = *(_QWORD *)(v9 + 24);
      if (v15 >= v14 >> 1)
      {
        sub_2141D3A14((char *)(v14 > 1), v15 + 1, 1);
        v9 = v22;
      }
      *(_QWORD *)(v9 + 16) = v15 + 1;
      *(_QWORD *)(v9 + 8 * v15 + 32) = v11;
      --v8;
    }
    while (v8);
  }
  return v9;
}

uint64_t sub_214330528(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD v18[2];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v20 = a3;
  v19 = type metadata accessor for SgGroup(0);
  v5 = MEMORY[0x24BDAC7A8](v19);
  v18[1] = (char *)v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v18[0] = (char *)v18 - v7;
  v8 = *(_QWORD *)(a1 + 16);
  v9 = MEMORY[0x24BEE4AF8];
  if (v8)
  {
    v21 = MEMORY[0x24BEE4AF8];
    sub_2141D3A14(0, v8, 0);
    v9 = v21;
    v10 = (unint64_t *)(a1 + 32);
    do
    {
      v12 = *v10++;
      v11 = v12;
      v13 = v12 >> 60;
      if ((v12 >> 60) - 3 >= 0xB)
        __asm { BR              X9 }
      swift_retain();
      sub_2142E9C84(v11);
      if ((a2(v14) & 1) == 0)
      {
        swift_release();
        v11 = 0xE000000000000000;
      }
      v21 = v9;
      v16 = *(_QWORD *)(v9 + 16);
      v15 = *(_QWORD *)(v9 + 24);
      if (v16 >= v15 >> 1)
      {
        sub_2141D3A14((char *)(v15 > 1), v16 + 1, 1);
        v9 = v21;
      }
      *(_QWORD *)(v9 + 16) = v16 + 1;
      *(_QWORD *)(v9 + 8 * v16 + 32) = v11;
      --v8;
    }
    while (v8);
  }
  return v9;
}

uint64_t sub_214330900()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_21433092C()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v0 + 56))
    _s6Charts15AnyChartContentVwxx_0(v0 + 32);
  return swift_deallocObject();
}

uint64_t sub_214330960()
{
  uint64_t *v0;

  sub_2141ED07C(v0[7], v0[8], v0[9]);
  return swift_deallocObject();
}

unint64_t sub_21433098C(unint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  BOOL v4;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (*(_QWORD *)(a3 + 16) <= result)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  v3 = *(_QWORD *)(a3 + 8 * result + 32);
  if ((v3 & 0x8000000000000000) == 0)
    return sub_2144250B8();
  v4 = __OFSUB__(0, v3);
  result = -v3;
  if (!v4)
    return sub_2144250B8();
LABEL_8:
  __break(1u);
  return result;
}

uint64_t sub_2143309C4()
{
  return sub_214425040();
}

uint64_t sub_2143309E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char **v3;
  char *v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;

  v5 = *(char **)(a3 + 16);
  v6 = *((_QWORD *)v5 - 1);
  result = MEMORY[0x24BDAC7A8](a1);
  v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = v10 - 1;
  if (v10 < 1)
    return result;
  v12 = MEMORY[0x2199CC9A4](*v3, v5);
  (*(void (**)(char *, uint64_t, char *))(v6 + 16))(v9, a1, v5);
  sub_214425094();
  sub_21442507C();
  if (__OFSUB__(0, v12))
  {
    __break(1u);
    goto LABEL_9;
  }
  v13 = v3[1];
  ++v3;
  v5 = v13;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_9:
    v5 = sub_214224894(0, *((_QWORD *)v5 + 2) + 1, 1, v5);
  v15 = *((_QWORD *)v5 + 2);
  v14 = *((_QWORD *)v5 + 3);
  if (v15 >= v14 >> 1)
    v5 = sub_214224894((char *)(v14 > 1), v15 + 1, 1, v5);
  *((_QWORD *)v5 + 2) = v15 + 1;
  *(_QWORD *)&v5[8 * v15 + 32] = -(uint64_t)v12;
  *v3 = v5;
  return sub_2143EB0B8(v11, v12);
}

uint64_t sub_214330B1C(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t sub_214330B24()
{
  return sub_214425178();
}

uint64_t sub_214330B34()
{
  return sub_214425190();
}

_QWORD *sub_214330B40@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  if (__OFSUB__(*result, 1))
    __break(1u);
  else
    *a2 = *result - 1;
  return result;
}

_QWORD *sub_214330B58(_QWORD *result)
{
  if (__OFSUB__(*result, 1))
    __break(1u);
  else
    --*result;
  return result;
}

uint64_t sub_214330B70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x2199CD934](&unk_21442CA78, a3);
  return sub_214425178();
}

uint64_t sub_214330BD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  MEMORY[0x2199CD934](&unk_21442CA78, a4);
  return sub_21442516C();
}

uint64_t sub_214330C38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x2199CD934](&unk_21442CA78, a3);
  return sub_214425190();
}

void sub_214330C8C(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_214330C94@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = sub_214330B1C(a1, *(_QWORD *)(v2 + 8));
  *a2 = result;
  return result;
}

void (*sub_214330CBC(_QWORD *a1, unint64_t *a2, uint64_t a3))(_QWORD *a1)
{
  uint64_t *v3;
  _QWORD *v7;

  v7 = malloc(0x28uLL);
  *a1 = v7;
  v7[4] = sub_214330D1C(v7, *a2, *v3, v3[1], *(_QWORD *)(a3 + 16));
  return sub_2141FC880;
}

void (*sub_214330D1C(_QWORD *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))(_QWORD *a1)
{
  uint64_t v8;

  v8 = *(_QWORD *)(a5 - 8);
  *a1 = a5;
  a1[1] = v8;
  a1[2] = malloc(*(_QWORD *)(v8 + 64));
  sub_21433098C(a2, a3, a4);
  return sub_2142D5F70;
}

uint64_t sub_214330D94(uint64_t a1)
{
  MEMORY[0x2199CD934](&unk_21442CA78, a1);
  return sub_214425184();
}

void sub_214330DE0(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_WORD *)(a1 + 8) = 256;
}

_QWORD *sub_214330DF8@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  if (__OFADD__(*result, 1))
    __break(1u);
  else
    *a2 = *result + 1;
  return result;
}

_QWORD *sub_214330E10(_QWORD *result)
{
  if (__OFADD__(*result, 1))
    __break(1u);
  else
    ++*result;
  return result;
}

__n128 sub_214330E28@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  __n128 result;

  result = *v1;
  *a1 = *v1;
  a1[1].n128_u64[0] = 0;
  return result;
}

uint64_t sub_214330E38(uint64_t a1)
{
  MEMORY[0x2199CD934](&unk_21442C938, a1);
  return sub_214425220();
}

uint64_t sub_214330E6C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = MEMORY[0x2199CD934](&unk_21442C938, a1);
  v4 = sub_2142D6850(v1, a1, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_214330EC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;

  sub_2141D38DC(a3, a3);
  v6 = *(_QWORD *)(a3 - 8);
  swift_allocObject();
  v7 = sub_214425004();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v8, a1, a3);
  result = sub_2141D08A8(v7);
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    v10 = result;
    if (a2)
    {
      v11 = sub_21442504C();
      *(_QWORD *)(v11 + 16) = a2;
      bzero((void *)(v11 + 32), 8 * a2);
    }
    return v10;
  }
  return result;
}

_OWORD *_s6Charts22LegendRenderingContextV10CategoriesVwta_0(_OWORD *a1, _OWORD *a2)
{
  swift_bridgeObjectRelease();
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t type metadata accessor for RepeatedValueCollection(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2141D8E88(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for RepeatedValueCollection);
}

void sub_214330FE4()
{
  JUMPOUT(0x2199CD934);
}

uint64_t sub_214330FF4()
{
  return MEMORY[0x24BEE1780];
}

uint64_t sub_214331000()
{
  return sub_2143310D4(&qword_254D6ACE0, MEMORY[0x24BEE1BD8]);
}

void sub_214331024()
{
  JUMPOUT(0x2199CD934);
}

uint64_t sub_214331034()
{
  return sub_2143310D4(qword_254D6ACE8, MEMORY[0x24BEE1BA8]);
}

uint64_t sub_214331058(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x2199CD934](&unk_21442CA18);
  return MEMORY[0x2199CD934](MEMORY[0x24BEE4218], a1, &v3);
}

void sub_2143310A0()
{
  JUMPOUT(0x2199CD934);
}

uint64_t sub_2143310B0()
{
  return sub_2143310D4((unint64_t *)&qword_253F13550, MEMORY[0x24BEE1BD0]);
}

uint64_t sub_2143310D4(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  unint64_t v6;
  _QWORD v7[2];

  result = *a1;
  if (!result)
  {
    v5 = sub_2141D7924(&qword_253F13548);
    v6 = sub_2141FE07C();
    v7[0] = MEMORY[0x24BEE17A8];
    v7[1] = v6;
    result = MEMORY[0x2199CD934](a2, v5, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_214331140(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x2199CD934](&unk_21442CA78);
  return MEMORY[0x2199CD934](MEMORY[0x24BEE4230], a1, &v3);
}

uint64_t sub_214331198(uint64_t a1)
{
  int64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x24BEE4AF8];
  if (v2)
  {
    v9 = MEMORY[0x24BEE4AF8];
    sub_2141D3D60(0, v2, 0);
    result = v9;
    v4 = (uint64_t *)(a1 + 40);
    do
    {
      v6 = *v4;
      v4 += 2;
      v5 = v6;
      v10 = result;
      v8 = *(_QWORD *)(result + 16);
      v7 = *(_QWORD *)(result + 24);
      if (v8 >= v7 >> 1)
      {
        sub_2141D3D60((char *)(v7 > 1), v8 + 1, 1);
        result = v10;
      }
      *(_QWORD *)(result + 16) = v8 + 1;
      *(_QWORD *)(result + 8 * v8 + 32) = v5;
      --v2;
    }
    while (v2);
  }
  return result;
}

BOOL sub_214331254()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v4)(_QWORD);
  int EnumCaseMultiPayload;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v1 = type metadata accessor for DateBins.Storage(0);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (uint64_t *)((char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_2141FDEA0(v0, (uint64_t)v3, v4);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      v6 = *(_QWORD *)((char *)v3 + *(int *)(sub_2141D8BF8(&qword_253F11570) + 64));
      sub_2141DD370((uint64_t)v3, type metadata accessor for CalendarBinningUnit);
    }
    else
    {
      v7 = *(_QWORD *)(*v3 + 16);
      swift_bridgeObjectRelease();
      v6 = v7 - 1;
    }
  }
  else
  {
    v6 = v3[2];
  }
  return v6 == 0;
}

uint64_t DateBins.init(range:desiredCount:calendar:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t result;
  uint64_t v21;
  char *v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v40 = a4;
  v7 = sub_2141D8BF8((uint64_t *)&unk_253F15EB0);
  v8 = MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDAC7A8](v8);
  v13 = (char *)&v37 - v12;
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v37 - v14;
  v16 = type metadata accessor for CalendarBinningUnit(0);
  v17 = MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v37 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = MEMORY[0x24BDAC7A8](v17);
  v22 = (char *)&v37 - v21;
  v23 = __OFADD__(a2, 1);
  v24 = a2 + 1;
  if (v23)
  {
    __break(1u);
    goto LABEL_10;
  }
  v38 = a3;
  v25 = sub_2142CA04C(a1, a3);
  sub_2143325F8(a1, v25, v24, (uint64_t)v22);
  swift_bridgeObjectRelease();
  sub_2141FDEA0((uint64_t)v22, (uint64_t)v19, type metadata accessor for CalendarBinningUnit);
  v39 = a1;
  sub_2141E070C(a1, (uint64_t)v15, (uint64_t *)&unk_253F15EB0);
  v37 = sub_2142C47D0((uint64_t)v15);
  v26 = sub_2142C47D0((uint64_t)v15);
  v27 = sub_2142C47D0((uint64_t)&v15[*(int *)(v7 + 36)]);
  sub_2142C491C(v26, (uint64_t)v13);
  result = sub_2142C491C(v27, (uint64_t)v10);
  v28 = v27 - v26;
  if (__OFSUB__(v27, v26))
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v29 = v28 + 1;
  if (__OFADD__(v28, 1))
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  result = sub_214423B40();
  if ((result & 1) != 0)
  {
    v23 = __OFSUB__(v29--, 1);
    if (v23)
      goto LABEL_12;
  }
  v30 = sub_214423B40();
  sub_2141E0750((uint64_t)v10, (uint64_t *)&unk_253F15EB0);
  result = sub_2141E0750((uint64_t)v13, (uint64_t *)&unk_253F15EB0);
  if ((v30 & 1) == 0 || (v23 = __OFSUB__(v29, 1), --v29, !v23))
  {
    sub_2141E0750((uint64_t)v15, (uint64_t *)&unk_253F15EB0);
    v31 = sub_2141D8BF8(&qword_253F11570);
    v32 = *(int *)(v31 + 48);
    v33 = *(int *)(v31 + 64);
    v34 = (uint64_t)v19;
    v35 = v40;
    sub_2141FE1E0(v34, v40, type metadata accessor for CalendarBinningUnit);
    *(_QWORD *)(v35 + v32) = v37;
    *(_QWORD *)(v35 + v33) = v29;
    type metadata accessor for DateBins.Storage(0);
    swift_storeEnumTagMultiPayload();
    v36 = sub_214423C54();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 8))(v38, v36);
    sub_2141E0750(v39, (uint64_t *)&unk_253F15EB0);
    return sub_2141DD370((uint64_t)v22, type metadata accessor for CalendarBinningUnit);
  }
LABEL_13:
  __break(1u);
  return result;
}

uint64_t DateBins.index(for:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  double *v8;
  uint64_t (*v9)(_QWORD);
  int EnumCaseMultiPayload;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  double v15;
  double v16;
  uint64_t result;
  double v18;
  double v19;
  char v20;
  char v21;
  uint64_t v22;

  v3 = type metadata accessor for CalendarBinningUnit(0);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DateBins.Storage(0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (double *)((char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_2141FDEA0(v1, (uint64_t)v8, v9);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
    goto LABEL_6;
  if (EnumCaseMultiPayload == 1)
  {
    v11 = *(_QWORD *)((char *)v8 + *(int *)(sub_2141D8BF8(&qword_253F11570) + 48));
    sub_2141FE1E0((uint64_t)v8, (uint64_t)v5, type metadata accessor for CalendarBinningUnit);
    v12 = sub_2142C47D0(a1);
    sub_2141DD370((uint64_t)v5, type metadata accessor for CalendarBinningUnit);
    v13 = __OFSUB__(v12, v11);
    v14 = v12 - v11;
    if (!v13)
      return v14;
    __break(1u);
LABEL_6:
    v15 = *v8;
    v16 = v8[1];
    result = sub_2144239F0();
    v19 = floor((v18 - v16) / v15);
    if ((~*(_QWORD *)&v19 & 0x7FF0000000000000) != 0)
    {
      if (v19 > -9.22337204e18)
      {
        if (v19 < 9.22337204e18)
          return (uint64_t)v19;
        goto LABEL_14;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v14 = sub_214331F84(a1, *(_QWORD *)(*(_QWORD *)v8 + 16), *(_QWORD *)v8);
  v21 = v20;
  result = swift_bridgeObjectRelease();
  if ((v21 & 1) == 0)
    return v14;
LABEL_15:
  __break(1u);
  return result;
}

uint64_t DateBins.subscript.getter@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, char *, uint64_t);
  uint64_t (*v15)(_QWORD);
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  void (*v32)(uint64_t, unint64_t, uint64_t);
  uint64_t v33;

  v3 = v2;
  v6 = sub_2141D8BF8((uint64_t *)&unk_253F15EB0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CalendarBinningUnit(0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DateBins.Storage(0);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (void (*)(uint64_t, char *, uint64_t))((char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_2141FDEA0(v3, (uint64_t)v14, v15);
  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result)
  {
    if ((_DWORD)result != 1)
      goto LABEL_11;
    v17 = sub_2141D8BF8(&qword_253F11570);
    v18 = *(_QWORD *)((char *)v14 + *(int *)(v17 + 48));
    v19 = *(_QWORD *)((char *)v14 + *(int *)(v17 + 64));
    sub_2141FE1E0((uint64_t)v14, (uint64_t)v11, type metadata accessor for CalendarBinningUnit);
    result = v18 + a1;
    if (__OFADD__(v18, a1))
    {
      __break(1u);
      goto LABEL_18;
    }
    sub_2142C491C(result, (uint64_t)v8);
    sub_2141DD370((uint64_t)v11, type metadata accessor for CalendarBinningUnit);
    v20 = sub_214423B70();
    v14 = *(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32);
    v14(a2, v8, v20);
    v21 = &v8[*(int *)(v6 + 36)];
    v22 = sub_2141D8BF8(&qword_253F13358);
    result = ((uint64_t (*)(uint64_t, char *, uint64_t))v14)(a2 + *(int *)(v22 + 36), v21, v20);
    v23 = v19 - 1;
    if (!__OFSUB__(v19, 1))
      goto LABEL_16;
    __break(1u);
  }
  if (__OFADD__(a1, 1))
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v24 = *((_QWORD *)v14 + 2);
  sub_2144239E4();
  v22 = sub_2141D8BF8(&qword_253F13358);
  result = sub_2144239E4();
  v23 = v24 - 1;
  if (!__OFSUB__(v24, 1))
    goto LABEL_16;
  __break(1u);
LABEL_11:
  if ((a1 & 0x8000000000000000) != 0)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v25 = *(_QWORD *)v14;
  v26 = *(_QWORD *)(*(_QWORD *)v14 + 16);
  if ((uint64_t)(v26 - 1) <= (uint64_t)a1)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  if (v26 <= a1)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  result = sub_214423B70();
  if (a1 + 1 < v26)
  {
    v27 = result;
    v28 = *(_QWORD *)(result - 8);
    v29 = v25 + ((*(unsigned __int8 *)(v28 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80));
    v30 = *(_QWORD *)(v28 + 72);
    v31 = v29 + v30 * (a1 + 1);
    v32 = *(void (**)(uint64_t, unint64_t, uint64_t))(v28 + 16);
    v32(a2, v29 + v30 * a1, result);
    v22 = sub_2141D8BF8(&qword_253F13358);
    v32(a2 + *(int *)(v22 + 36), v31, v27);
    result = swift_bridgeObjectRelease();
    v23 = v26 - 2;
LABEL_16:
    *(_BYTE *)(a2 + *(int *)(v22 + 40)) = v23 == a1;
    return result;
  }
LABEL_22:
  __break(1u);
  return result;
}

uint64_t sub_214331ACC(uint64_t a1)
{
  uint64_t result;
  double v2;
  char v3;

  *(double *)&result = COERCE_DOUBLE(sub_214331EB0(a1));
  if ((v3 & 1) == 0)
  {
    if (*(double *)&result <= v2)
      return result;
    __break(1u);
  }
  *(double *)&result = 0.0;
  return result;
}

uint64_t sub_214331B04@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  void (*v24)(char *, char *, uint64_t);
  char *v25;
  uint64_t result;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  void (*v32)(char *, char *, uint64_t);
  uint64_t v33;
  void (*v34)(char *, uint64_t);
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;

  v39 = sub_2141D8BF8(&qword_253F15D60);
  v2 = MEMORY[0x24BDAC7A8](v39);
  v40 = (char *)&v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v36 - v4;
  v6 = sub_2141D8BF8((uint64_t *)&unk_253F15EB0);
  v42 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v38 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_2141D8BF8(&qword_253F103F8);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_2141D8BF8(&qword_253F10BF0);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_214423B70();
  v41 = *(_QWORD *)(v14 - 8);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v36 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v36 - v18;
  sub_2143E5CB4(v10);
  v20 = sub_2141D8BF8(&qword_253F103F0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 48))(v10, 1, v20) == 1)
  {
    sub_2141E0750((uint64_t)v10, &qword_253F103F8);
    v21 = 1;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v42 + 56))(a1, v21, 1, v6);
  }
  v36 = v6;
  v37 = a1;
  v22 = &v10[*(int *)(v20 + 48)];
  v23 = &v13[*(int *)(v11 + 48)];
  v24 = *(void (**)(char *, char *, uint64_t))(v41 + 32);
  v24(v13, v10, v14);
  v24(v23, v22, v14);
  v25 = &v13[*(int *)(v11 + 48)];
  v24(v19, v13, v14);
  v24(v17, v25, v14);
  sub_2141FED10((unint64_t *)&qword_253F12440, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE948]);
  result = sub_214424E84();
  if ((result & 1) != 0)
  {
    v27 = v39;
    v28 = &v5[*(int *)(v39 + 48)];
    v24(v5, v19, v14);
    v24(v28, v17, v14);
    v29 = v40;
    v30 = v41;
    v31 = &v40[*(int *)(v27 + 48)];
    v32 = *(void (**)(char *, char *, uint64_t))(v41 + 16);
    v32(v40, v5, v14);
    v32(v31, v28, v14);
    v33 = (uint64_t)v38;
    v24(v38, v29, v14);
    v34 = *(void (**)(char *, uint64_t))(v30 + 8);
    v34(v31, v14);
    v35 = &v29[*(int *)(v27 + 48)];
    v24(v29, v5, v14);
    v24(v35, v28, v14);
    v6 = v36;
    v24((char *)(v33 + *(int *)(v36 + 36)), v35, v14);
    v34(v29, v14);
    a1 = v37;
    sub_2141E801C(v33, v37, (uint64_t *)&unk_253F15EB0);
    v21 = 0;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v42 + 56))(a1, v21, 1, v6);
  }
  __break(1u);
  return result;
}

uint64_t sub_214331EB0(uint64_t result)
{
  unint64_t v1;
  uint64_t v2;
  double v3;
  double v4;
  double v5;
  unint64_t v6;
  double v7;
  double v8;
  double v9;
  double v10;
  unint64_t v11;
  double v12;

  v1 = *(_QWORD *)(result + 16);
  if (!v1)
    return 0;
  v2 = result + 32;
  v3 = *(double *)(result + 32);
  if (v1 == 1)
    return *(_QWORD *)(result + 32);
  v4 = *(double *)(result + 40);
  if (v4 >= v3)
    v5 = *(double *)(result + 40);
  else
    v5 = *(double *)(result + 32);
  if (v4 < v3)
    v3 = *(double *)(result + 40);
  if (v1 == 2)
    return *(_QWORD *)&v3;
  v6 = 2;
  v7 = v3;
  v8 = v5;
  while (v6 < v1)
  {
    v10 = *(double *)(v2 + 8 * v6);
    v11 = *(_QWORD *)(result + 16);
    v12 = v10;
    if (v6 + 1 != v1)
    {
      if (v6 + 1 >= v1)
        goto LABEL_28;
      v12 = *(double *)(v2 + 8 * (v6 + 1));
      v11 = v6 + 2;
    }
    if (v12 >= v10)
      v9 = v12;
    else
      v9 = *(double *)(v2 + 8 * v6);
    if (v12 < v10)
      v10 = v12;
    if (v10 < v7)
    {
      v3 = v10;
      v7 = v10;
    }
    if (v9 >= v8)
      v8 = v9;
    v6 = v11;
    if (v11 == v1)
      return *(_QWORD *)&v3;
  }
  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_214331F84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t, uint64_t);
  void (*v20)(char *, _QWORD, uint64_t, uint64_t);
  unsigned int (*v21)(char *, uint64_t, uint64_t);
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  char *v26;
  void (*v27)(uint64_t, uint64_t);
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t);
  uint64_t v36;
  void (*v37)(char *, char *, uint64_t);
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;

  v6 = sub_2141D8BF8(&qword_253F13340);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v36 - v10;
  v12 = sub_214423B70();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x24BDAC7A8](v12);
  MEMORY[0x24BDAC7A8](v14);
  v17 = *(_QWORD *)(a3 + 16);
  if (!v17)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v11, 1, 1, v12);
    goto LABEL_6;
  }
  v40 = v16;
  v41 = (char *)&v36 - v15;
  v39 = a1;
  v18 = a3 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
  v19 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v19(v11, v18, v12);
  v20 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56);
  v20(v11, 0, 1, v12);
  v21 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
  if (v21(v11, 1, v12) == 1)
  {
LABEL_6:
    v23 = (uint64_t)v11;
    goto LABEL_7;
  }
  v38 = a2;
  v22 = v41;
  v37 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
  v37(v41, v11, v12);
  v19(v9, v18 + *(_QWORD *)(v13 + 72) * (v17 - 1), v12);
  v20(v9, 0, 1, v12);
  if (v21(v9, 1, v12) == 1)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v22, v12);
    v23 = (uint64_t)v9;
LABEL_7:
    sub_2141E0750(v23, &qword_253F13340);
    return 0;
  }
  v26 = v40;
  v37(v40, v9, v12);
  if (v38 < 2)
  {
    v27 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v27((uint64_t)v26, v12);
    v27((uint64_t)v41, v12);
    return 0;
  }
  v28 = v38 - 1;
  sub_2141FED10((unint64_t *)&qword_253F12440, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE948]);
  result = sub_214424E6C();
  if ((result & 1) == 0)
  {
    v24 = 0;
    if (v28 >= 2)
    {
      do
      {
        v32 = v24 + v28;
        if (__OFADD__(v24, v28))
          goto LABEL_39;
        if (v32 >= 0)
          v33 = v24 + v28;
        else
          v33 = v32 + 1;
        if (v32 < -1)
          goto LABEL_40;
        v34 = v33 >> 1;
        if (v33 >> 1 >= v17)
          goto LABEL_40;
        result = sub_214424E60();
        if ((result & 1) != 0)
          v28 = v34;
        else
          v24 = v34;
      }
      while (v24 + 1 < (uint64_t)v28);
    }
LABEL_36:
    v35 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v35((uint64_t)v40, v12);
    v35((uint64_t)v41, v12);
    return v24;
  }
  v24 = 0;
  if (v28 < 2)
    goto LABEL_36;
  while (1)
  {
    v29 = v24 + v28;
    if (__OFADD__(v24, v28))
      break;
    if (v29 >= 0)
      v30 = v24 + v28;
    else
      v30 = v29 + 1;
    if (v29 < -1)
      goto LABEL_38;
    v31 = v30 >> 1;
    if (v30 >> 1 >= v17)
      goto LABEL_38;
    result = sub_214424E6C();
    if ((result & 1) != 0)
      v28 = v31;
    else
      v24 = v31;
    if (v24 + 1 >= (uint64_t)v28)
      goto LABEL_36;
  }
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_214332314(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *(_QWORD *)(a2 + 16);
  if (!v3 || a1 < 2)
    return 0;
  v5 = a2 + 32;
  v6 = a1 - 1;
  if (*(double *)(a2 + 32) >= *(double *)(a2 + 32 + 8 * v3 - 8))
  {
    if ((unint64_t)v6 >= 2)
    {
      result = 0;
      while (1)
      {
        v9 = result + v6;
        if (__OFADD__(result, v6))
          goto LABEL_34;
        if (v9 >= 0)
          v10 = result + v6;
        else
          v10 = v9 + 1;
        if (v9 < -1 || v10 >> 1 >= v3)
          goto LABEL_35;
        if (*(double *)(v5 + 8 * (v10 >> 1)) < a3)
          v6 = v10 >> 1;
        else
          result = v10 >> 1;
        if (result + 1 >= v6)
          return result;
      }
    }
    return 0;
  }
  if ((unint64_t)v6 < 2)
    return 0;
  result = 0;
  while (1)
  {
    v7 = result + v6;
    if (__OFADD__(result, v6))
      break;
    if (v7 >= 0)
      v8 = result + v6;
    else
      v8 = v7 + 1;
    if (v7 < -1 || v8 >> 1 >= v3)
      goto LABEL_33;
    if (*(double *)(v5 + 8 * (v8 >> 1)) > a3)
      v6 = v8 >> 1;
    else
      result = v8 >> 1;
    if (result + 1 >= v6)
      return result;
  }
  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
  return result;
}

uint64_t sub_214332410(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char v9;
  int64_t v10;
  uint64_t v11;
  const double *v12;
  double v13;
  long double v14;
  uint64_t result;
  double __SumOfSquares;
  double __Sum;
  unint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if ((a3 & 1) != 0)
  {
    v7 = sub_2142E95B8(a4);
    if ((v9 & 1) != 0)
      return 1;
    a1 = v7;
    a2 = v8;
  }
  v10 = *(_QWORD *)(a4 + 16);
  if ((unint64_t)v10 < 2)
    return 1;
  v12 = (const double *)(a4 + 32);
  __SumOfSquares = NAN;
  __Sum = NAN;
  v11 = 1;
  vDSP_sve_svesqD(v12, 1, &__Sum, &__SumOfSquares, v10);
  v13 = sqrt((__SumOfSquares - __Sum * (__Sum / (double)v10)) / (double)(v10 - 1));
  if (v13 <= 0.0)
    return v11;
  v14 = cbrt((double)v10);
  sub_2142D171C(&__Sum, ceil((*(double *)&a2 - *(double *)&a1) * v14 / (v13 * 3.49)));
  if ((v18 & 1) == 0)
    return *(_QWORD *)&__Sum;
  __Sum = 0.0;
  v18 = 0xE000000000000000;
  sub_2144254D8();
  sub_214424F20();
  sub_214424F20();
  sub_214424F20();
  sub_214424F20();
  result = sub_214425628();
  __break(1u);
  return result;
}

uint64_t sub_2143325F8@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  int v11;
  char v12;
  char v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  char v27;
  unint64_t v28;
  unint64_t v29;
  int64_t v30;
  uint64_t v31;
  _BOOL4 v32;
  uint64_t v33;
  _QWORD v34[3];
  char v35;
  char v36;
  uint64_t v37;
  _QWORD v38[2];
  unint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v6 = *(_QWORD *)(a2 + 16);
  if (v6 == 1)
  {
    v7 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for CalendarBinningUnit(0) - 8) + 80);
    v8 = a2 + ((v7 + 32) & ~v7);
    return sub_2141FDEA0(v8, a4, type metadata accessor for CalendarBinningUnit);
  }
  if (!v6)
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v10 = result;
  v39 = *(_QWORD *)(a2 + 16);
  v38[0] = a4;
  v34[2] = MEMORY[0x24BDAC7A8](result);
  v40 = v11;
  v12 = v11 & 1;
  v35 = v11 & 1;
  v14 = v13;
  v15 = v13 & 1;
  v36 = v13 & 1;
  v37 = v16;
  v43 = sub_2142343E4((void (*)(__int128 *__return_ptr, uint64_t))sub_214335E9C, (uint64_t)v34, a2);
  v17 = sub_214331198(v43);
  v42 = sub_2143EDE94(v17);
  v19 = v18;
  result = swift_bridgeObjectRelease();
  if ((v19 & 1) == 0)
  {
    v38[1] = v38;
    v20 = sub_21433470C(0, v43, v42, a2, v10, v12, v15, a3);
    v22 = v21;
    v41 = v10;
    v23 = a2;
    v24 = 0;
    v25 = 1;
    v26 = v14;
    v27 = v40;
    v28 = v39;
    do
    {
      v29 = v25 + 1;
      v30 = sub_21433470C(v25, v43, v42, v23, v41, v27 & 1, v26 & 1, a3);
      v32 = v22 < v31;
      if (v30 != v20)
        v32 = v30 < v20;
      if (v32)
      {
        v20 = v30;
        v22 = v31;
        v24 = v25;
      }
      ++v25;
    }
    while (v28 != v29);
    result = swift_bridgeObjectRelease();
    if (v24 < v28)
    {
      v33 = type metadata accessor for CalendarBinningUnit(0);
      v8 = v23
         + ((*(unsigned __int8 *)(*(_QWORD *)(v33 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v33 - 8) + 80))
         + *(_QWORD *)(*(_QWORD *)(v33 - 8) + 72) * v24;
      a4 = v38[0];
      return sub_2141FDEA0(v8, a4, type metadata accessor for CalendarBinningUnit);
    }
    goto LABEL_15;
  }
LABEL_16:
  __break(1u);
  return result;
}

uint64_t sub_214332800(uint64_t result, uint64_t a2, double a3, double a4)
{
  uint64_t v4;
  uint64_t v5;
  int v7;
  char v8;
  char v9;
  char v10;
  char v11;
  uint64_t v12;
  char v13;
  char v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  double v20;
  double v21;
  uint64_t v22;
  char v23;
  char v24;
  unint64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  _BOOL4 v29;
  _QWORD v30[3];
  char v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  double v40;

  v4 = result;
  v39 = a3;
  v40 = a4;
  v5 = *(_QWORD *)(result + 16);
  if (v5 == 1)
    return result;
  if (!v5)
  {
    __break(1u);
    goto LABEL_13;
  }
  v35 = *(_QWORD *)(result + 16);
  MEMORY[0x24BDAC7A8](result);
  v30[2] = &v39;
  v36 = v7;
  v8 = v7 & 1;
  v31 = v7 & 1;
  v10 = v9;
  v11 = v9 & 1;
  v32 = v9 & 1;
  v33 = a2;
  v38 = sub_21423450C((void (*)(__int128 *__return_ptr, uint64_t *))sub_214335E3C, (uint64_t)v30, v4);
  v12 = sub_214331198(v38);
  v37 = sub_2143EDE94(v12);
  v14 = v13;
  result = swift_bridgeObjectRelease();
  if ((v14 & 1) != 0)
  {
LABEL_14:
    __break(1u);
    return result;
  }
  v34 = (uint64_t)&v34;
  v15 = sub_2143347F8(0, v38, v37, v4, v8, v11, a2, v39, v40);
  v17 = v16;
  v18 = 0;
  v19 = 1;
  v20 = v39;
  v21 = v40;
  v22 = a2;
  v23 = v10;
  v24 = v36;
  v25 = v35;
  do
  {
    v26 = v19 + 1;
    v27 = sub_2143347F8(v19, v38, v37, v4, v24 & 1, v23 & 1, v22, v20, v21);
    v29 = v17 < v28;
    if (v27 != v15)
      v29 = v27 < v15;
    if (v29)
    {
      v15 = v27;
      v17 = v28;
      v18 = v19;
    }
    ++v19;
  }
  while (v25 != v26);
  result = swift_bridgeObjectRelease();
  if (v18 >= v25)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  return result;
}

uint64_t DateBins.init(unit:by:range:calendar:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  void (*v31)(char *, uint64_t, uint64_t);
  char *v32;
  void (*v33)(char *, uint64_t, uint64_t);
  void (*v34)(char *, uint64_t, uint64_t);
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  size_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t result;
  uint64_t v56;
  uint64_t v57;
  BOOL v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(char *, char *, uint64_t);
  char *v67;
  char *v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;

  v82 = a4;
  v84 = (char *)a2;
  v85 = a3;
  v64 = a5;
  v80 = sub_2141D8BF8((uint64_t *)&unk_253F15EB0);
  v6 = MEMORY[0x24BDAC7A8](v80);
  v79 = (char *)&v64 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v77 = (uint64_t)&v64 - v9;
  MEMORY[0x24BDAC7A8](v8);
  v78 = (char *)&v64 - v10;
  v81 = sub_214423C54();
  v69 = *(_QWORD *)(v81 - 8);
  v11 = v69;
  v12 = MEMORY[0x24BDAC7A8](v81);
  v76 = (char *)&v64 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v71 = (char *)&v64 - v14;
  v15 = sub_214423B70();
  v72 = *(_QWORD *)(v15 - 8);
  v16 = v72;
  v17 = MEMORY[0x24BDAC7A8](v15);
  v74 = (char *)&v64 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v20 = (char *)&v64 - v19;
  v21 = sub_214423C48();
  v73 = *(_QWORD *)(v21 - 8);
  v22 = v73;
  v23 = MEMORY[0x24BDAC7A8](v21);
  v70 = (char *)&v64 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v23);
  v26 = (char *)&v64 - v25;
  v83 = type metadata accessor for CalendarBinningUnit(0);
  v27 = MEMORY[0x24BDAC7A8](v83);
  v75 = (uint64_t)&v64 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v27);
  v30 = (char *)&v64 - v29;
  v31 = *(void (**)(char *, uint64_t, uint64_t))(v22 + 16);
  v32 = v26;
  v65 = a1;
  v86 = v21;
  v31(v26, a1, v21);
  v66 = (void (*)(char *, char *, uint64_t))v31;
  v33 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 16);
  v33(v20, v85, v15);
  v34 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v35 = v71;
  v36 = v81;
  v34(v71, v82, v81);
  v68 = v32;
  v31(v30, (uint64_t)v32, v21);
  v37 = v83;
  *(_QWORD *)&v30[*(int *)(v83 + 20)] = v84;
  v38 = v37;
  v39 = &v30[*(int *)(v37 + 24)];
  v67 = v20;
  v40 = v15;
  v33(v39, (uint64_t)v20, v15);
  v41 = v36;
  v34(&v30[*(int *)(v38 + 28)], (uint64_t)v35, v36);
  v42 = (uint64_t)v70;
  v66(v70, v32, v86);
  v43 = (uint64_t)v74;
  v33(v74, (uint64_t)v20, v40);
  v44 = (size_t)v76;
  v34(v76, (uint64_t)v35, v41);
  type metadata accessor for CalendarBinningImpl(0);
  swift_allocObject();
  v45 = sub_2142C6A38(v42, (uint64_t)v84, v43, v44);
  v46 = v35;
  v47 = (uint64_t)v78;
  v48 = (uint64_t)v79;
  v76 = *(char **)(v69 + 8);
  ((void (*)(char *, uint64_t))v76)(v46, v41);
  v49 = v85;
  (*(void (**)(char *, uint64_t))(v72 + 8))(v67, v40);
  v74 = *(char **)(v73 + 8);
  ((void (*)(char *, uint64_t))v74)(v68, v86);
  *(_QWORD *)&v30[*(int *)(v83 + 32)] = v45;
  v84 = v30;
  v50 = (uint64_t)v30;
  v51 = v75;
  sub_2141FDEA0(v50, v75, type metadata accessor for CalendarBinningUnit);
  sub_2141E070C(v49, v47, (uint64_t *)&unk_253F15EB0);
  v83 = sub_2142C47D0(v47);
  v52 = sub_2142C47D0(v47);
  v53 = sub_2142C47D0(v47 + *(int *)(v80 + 36));
  v54 = v77;
  sub_2142C491C(v52, v77);
  result = sub_2142C491C(v53, v48);
  v56 = v53 - v52;
  if (__OFSUB__(v53, v52))
  {
    __break(1u);
    goto LABEL_9;
  }
  v57 = v56 + 1;
  if (__OFADD__(v56, 1))
  {
LABEL_9:
    __break(1u);
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  result = sub_214423B40();
  if ((result & 1) != 0)
  {
    v58 = __OFSUB__(v57--, 1);
    if (v58)
      goto LABEL_10;
  }
  v59 = sub_214423B40();
  sub_2141E0750(v48, (uint64_t *)&unk_253F15EB0);
  result = sub_2141E0750(v54, (uint64_t *)&unk_253F15EB0);
  if ((v59 & 1) == 0 || (v58 = __OFSUB__(v57, 1), --v57, !v58))
  {
    sub_2141E0750(v47, (uint64_t *)&unk_253F15EB0);
    v60 = sub_2141D8BF8(&qword_253F11570);
    v61 = *(int *)(v60 + 48);
    v62 = *(int *)(v60 + 64);
    v63 = v64;
    sub_2141FE1E0(v51, v64, type metadata accessor for CalendarBinningUnit);
    *(_QWORD *)(v63 + v61) = v83;
    *(_QWORD *)(v63 + v62) = v57;
    type metadata accessor for DateBins.Storage(0);
    swift_storeEnumTagMultiPayload();
    ((void (*)(uint64_t, uint64_t))v76)(v82, v81);
    sub_2141E0750(v49, (uint64_t *)&unk_253F15EB0);
    ((void (*)(uint64_t, uint64_t))v74)(v65, v86);
    return sub_2141DD370((uint64_t)v84, type metadata accessor for CalendarBinningUnit);
  }
LABEL_11:
  __break(1u);
  return result;
}

uint64_t DateBins.thresholds.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  char *v22;
  uint64_t (*v23)(_QWORD);
  int EnumCaseMultiPayload;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t result;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t, uint64_t);
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char *v43;
  void (*v44)(char *, char *, uint64_t);
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v58 = sub_214423B70();
  v54 = *(_QWORD *)(v58 - 8);
  v1 = MEMORY[0x24BDAC7A8](v58);
  v52 = (char *)&v49 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v1);
  v55 = (char *)&v49 - v3;
  v50 = sub_2141D8BF8(&qword_253F13358);
  MEMORY[0x24BDAC7A8](v50);
  v57 = (uint64_t)&v49 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_2141D8BF8(&qword_253F11928);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_2141D8BF8(&qword_253F11958);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v49 - v12;
  v14 = type metadata accessor for DateBins.Storage(0);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v17 = (uint64_t *)((char *)&v49 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = MEMORY[0x24BDAC7A8](v15);
  v20 = (uint64_t *)((char *)&v49 - v19);
  MEMORY[0x24BDAC7A8](v18);
  v22 = (char *)&v49 - v21;
  v56 = v0;
  sub_2141FDEA0(v0, (uint64_t)&v49 - v21, v23);
  v53 = v14;
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload != 1)
      return *(_QWORD *)v22;
    sub_2141DD370((uint64_t)v22, type metadata accessor for CalendarBinningUnit);
  }
  v25 = v56;
  sub_2141FDEA0(v56, (uint64_t)v7, type metadata accessor for DateBins);
  v26 = *(int *)(v5 + 36);
  *(_QWORD *)&v7[v26] = 0;
  sub_2141FDEA0(v25, (uint64_t)v20, type metadata accessor for DateBins.Storage);
  v27 = swift_getEnumCaseMultiPayload();
  if (v27)
  {
    if (v27 == 1)
    {
      v28 = *(_QWORD *)((char *)v20 + *(int *)(sub_2141D8BF8(&qword_253F11570) + 64));
      sub_2141DD370((uint64_t)v20, type metadata accessor for CalendarBinningUnit);
    }
    else
    {
      v30 = *(_QWORD *)(*v20 + 16);
      swift_bridgeObjectRelease();
      v28 = v30 - 1;
    }
  }
  else
  {
    v28 = v20[2];
  }
  *(_QWORD *)&v7[*(int *)(v5 + 40)] = v28;
  sub_2141E070C((uint64_t)v7, (uint64_t)v11, &qword_253F11928);
  v31 = *(_QWORD *)&v7[v26];
  sub_2141E0750((uint64_t)v7, &qword_253F11928);
  *(_QWORD *)&v11[*(int *)(v8 + 36)] = v31;
  result = sub_2141E801C((uint64_t)v11, (uint64_t)v13, &qword_253F11958);
  v33 = *(int *)(v8 + 36);
  v34 = *(int *)(v5 + 40);
  v35 = *(_QWORD *)&v13[v33];
  v29 = (char *)MEMORY[0x24BEE4AF8];
  if (v35 == *(_QWORD *)&v13[v34])
  {
LABEL_11:
    sub_2141E0750((uint64_t)v13, &qword_253F11958);
    return (uint64_t)v29;
  }
  v51 = v13;
  while (!__OFADD__(v35, 1))
  {
    v36 = v33;
    *(_QWORD *)&v13[v33] = v35 + 1;
    v37 = v57;
    DateBins.subscript.getter(v35, v57);
    v38 = *(void (**)(char *, uint64_t, uint64_t))(v54 + 16);
    v38(v55, v37, v58);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v29 = (char *)sub_214226498(0, *((_QWORD *)v29 + 2) + 1, 1, v29);
    v40 = *((_QWORD *)v29 + 2);
    v39 = *((_QWORD *)v29 + 3);
    if (v40 >= v39 >> 1)
      v29 = (char *)sub_214226498(v39 > 1, v40 + 1, 1, v29);
    *((_QWORD *)v29 + 2) = v40 + 1;
    v41 = (*(unsigned __int8 *)(v54 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v54 + 80);
    v42 = *(_QWORD *)(v54 + 72);
    v43 = &v29[v41 + v42 * v40];
    v44 = *(void (**)(char *, char *, uint64_t))(v54 + 32);
    v44(v43, v55, v58);
    sub_2141FDEA0(v56, (uint64_t)v17, type metadata accessor for DateBins.Storage);
    result = swift_getEnumCaseMultiPayload();
    if ((_DWORD)result)
    {
      if ((_DWORD)result == 1)
      {
        v45 = *(_QWORD *)((char *)v17 + *(int *)(sub_2141D8BF8(&qword_253F11570) + 64));
        result = sub_2141DD370((uint64_t)v17, type metadata accessor for CalendarBinningUnit);
      }
      else
      {
        v46 = *(_QWORD *)(*v17 + 16);
        result = swift_bridgeObjectRelease();
        v45 = v46 - 1;
      }
    }
    else
    {
      v45 = v17[2];
    }
    if (v45 < 0)
      goto LABEL_31;
    if (v35 == v45 - 1)
    {
      v38(v52, v57 + *(int *)(v50 + 36), v58);
      v48 = *((_QWORD *)v29 + 2);
      v47 = *((_QWORD *)v29 + 3);
      if (v48 >= v47 >> 1)
        v29 = (char *)sub_214226498(v47 > 1, v48 + 1, 1, v29);
      *((_QWORD *)v29 + 2) = v48 + 1;
      v44(&v29[v41 + v48 * v42], v52, v58);
    }
    result = sub_2141E0750(v57, &qword_253F13358);
    v13 = v51;
    v33 = v36;
    v35 = *(_QWORD *)&v51[v36];
    if (v35 == *(_QWORD *)&v51[v34])
      goto LABEL_11;
  }
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

uint64_t sub_214333440@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t (*v11)(_QWORD);
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = v3;
  v8 = type metadata accessor for DateBins.Storage(0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (uint64_t *)((char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_2141FDEA0(v4, (uint64_t)v10, v11);
  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result)
  {
    if ((_DWORD)result == 1)
    {
      v13 = *(_QWORD *)((char *)v10 + *(int *)(sub_2141D8BF8(&qword_253F11570) + 64));
      result = sub_2141DD370((uint64_t)v10, type metadata accessor for CalendarBinningUnit);
    }
    else
    {
      v14 = *(_QWORD *)(*v10 + 16);
      result = swift_bridgeObjectRelease();
      v13 = v14 - 1;
    }
  }
  else
  {
    v13 = v10[2];
  }
  if (v13 < 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (a1 < 0)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (v13 >= a2)
  {
    v15 = sub_2141D8BF8(&qword_254D6AD48);
    result = sub_2141FDEA0(v4, (uint64_t)a3 + *(int *)(v15 + 40), type metadata accessor for DateBins);
    *a3 = a1;
    a3[1] = a2;
    return result;
  }
LABEL_12:
  __break(1u);
  return result;
}

uint64_t sub_214333564()
{
  uint64_t v0;
  uint64_t v1;

  if (*(_BYTE *)(v0 + 56))
  {
    if (*(_BYTE *)(v0 + 56) != 1)
      return 0;
    v1 = *(_QWORD *)(*(_QWORD *)v0 + 16) - 1;
  }
  else
  {
    v1 = *(_QWORD *)(v0 + 16);
    sub_214335E04(v0);
    swift_release();
    swift_release();
  }
  if (v1 < 0)
  {
    __break(1u);
    return 0;
  }
  return v1;
}

uint64_t sub_2143335D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v4)(_QWORD);
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = type metadata accessor for DateBins.Storage(0);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (uint64_t *)((char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_2141FDEA0(v0, (uint64_t)v3, v4);
  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result)
  {
    if ((_DWORD)result == 1)
    {
      v6 = *(_QWORD *)((char *)v3 + *(int *)(sub_2141D8BF8(&qword_253F11570) + 64));
      result = sub_2141DD370((uint64_t)v3, type metadata accessor for CalendarBinningUnit);
    }
    else
    {
      v7 = *(_QWORD *)(*v3 + 16);
      result = swift_bridgeObjectRelease();
      v6 = v7 - 1;
    }
  }
  else
  {
    v6 = v3[2];
  }
  if ((v6 & 0x8000000000000000) == 0)
    return v6;
  __break(1u);
  return result;
}

uint64_t sub_2143336B0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = v1;
  v4 = type metadata accessor for DateBins.Storage(0);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (uint64_t *)((char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_2141FDEA0(v1, a1, type metadata accessor for DateBins);
  v7 = sub_2141D8BF8(&qword_253F11928);
  *(_QWORD *)(a1 + *(int *)(v7 + 36)) = 0;
  sub_2141FDEA0(v2, (uint64_t)v6, type metadata accessor for DateBins.Storage);
  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result)
  {
    if ((_DWORD)result == 1)
    {
      v9 = *(_QWORD *)((char *)v6 + *(int *)(sub_2141D8BF8(&qword_253F11570) + 64));
      result = sub_2141DD370((uint64_t)v6, type metadata accessor for CalendarBinningUnit);
    }
    else
    {
      v10 = *(_QWORD *)(*v6 + 16);
      result = swift_bridgeObjectRelease();
      v9 = v10 - 1;
    }
  }
  else
  {
    v9 = v6[2];
  }
  *(_QWORD *)(a1 + *(int *)(v7 + 40)) = v9;
  return result;
}

uint64_t DateBins.init(thresholds:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = a1;
  type metadata accessor for DateBins.Storage(0);
  return swift_storeEnumTagMultiPayload();
}

uint64_t DateBins.init(timeInterval:range:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  double v6;
  double v7;
  double v8;
  double v9;
  uint64_t result;

  sub_2144239F0();
  v7 = v6;
  sub_2141D8BF8((uint64_t *)&unk_253F15EB0);
  sub_2144239F0();
  v9 = ceil((v8 - v7) / a3);
  result = sub_2141E0750(a1, (uint64_t *)&unk_253F15EB0);
  if ((~*(_QWORD *)&v9 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v9 <= -9.22337204e18)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v9 < 9.22337204e18)
  {
    *(double *)a2 = a3;
    *(double *)(a2 + 8) = v7;
    *(_QWORD *)(a2 + 16) = (uint64_t)v9;
    type metadata accessor for DateBins.Storage(0);
    return swift_storeEnumTagMultiPayload();
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t DateBins.init(data:desiredCount:calendar:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  unsigned int (*v33)(char *, uint64_t, uint64_t);
  char *v34;
  uint64_t result;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  void (*v40)(char *, char *, uint64_t);
  char *v41;
  char *v42;
  void (*v43)(char *, char *, uint64_t);
  uint64_t v44;
  void (*v45)(char *, uint64_t);
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  char *v65;
  char *v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;

  v71 = a5;
  v72 = a4;
  v67 = a3;
  v58 = a2;
  v64 = sub_2141D8BF8(&qword_253F15D60);
  v6 = MEMORY[0x24BDAC7A8](v64);
  v60 = (char *)&v58 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v63 = (char *)&v58 - v8;
  v9 = sub_214423B70();
  v62 = *(_QWORD *)(v9 - 8);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v66 = (char *)&v58 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v58 - v12;
  v14 = sub_214423C54();
  v69 = *(_QWORD *)(v14 - 8);
  v70 = v14;
  MEMORY[0x24BDAC7A8](v14);
  v65 = (char *)&v58 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_2141D8BF8(&qword_253F12390);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v58 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_2141D8BF8((uint64_t *)&unk_253F15EB0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = MEMORY[0x24BDAC7A8](v19);
  v59 = (char *)&v58 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = MEMORY[0x24BDAC7A8](v21);
  v61 = (uint64_t)&v58 - v24;
  v25 = MEMORY[0x24BDAC7A8](v23);
  v27 = (char *)&v58 - v26;
  v28 = MEMORY[0x24BDAC7A8](v25);
  v30 = (char *)&v58 - v29;
  MEMORY[0x24BDAC7A8](v28);
  v32 = (char *)&v58 - v31;
  sub_214331B04((uint64_t)v18);
  v33 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48);
  v68 = v19;
  if (v33(v18, 1, v19) == 1)
  {
    swift_bridgeObjectRelease();
    sub_2141E0750((uint64_t)v18, &qword_253F12390);
    sub_2144239E4();
    v34 = v66;
    sub_2144239E4();
    sub_2141FED10((unint64_t *)&qword_253F12440, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE948]);
    result = sub_214424E84();
    if ((result & 1) != 0)
    {
      v37 = v63;
      v36 = v64;
      v38 = &v63[*(int *)(v64 + 48)];
      v39 = v62;
      v40 = *(void (**)(char *, char *, uint64_t))(v62 + 32);
      v40(v63, v13, v9);
      v40(v38, v34, v9);
      v41 = v60;
      v42 = &v60[*(int *)(v36 + 48)];
      v43 = *(void (**)(char *, char *, uint64_t))(v39 + 16);
      v43(v60, v37, v9);
      v43(v42, v38, v9);
      v44 = (uint64_t)v59;
      v40(v59, v41, v9);
      v45 = *(void (**)(char *, uint64_t))(v39 + 8);
      v45(v42, v9);
      v46 = &v41[*(int *)(v36 + 48)];
      v40(v41, v37, v9);
      v40(v46, v38, v9);
      v40((char *)(v44 + *(int *)(v68 + 36)), v46, v9);
      v45(v41, v9);
      v47 = v61;
      sub_2141E801C(v44, v61, (uint64_t *)&unk_253F15EB0);
      DateBins.init(timeInterval:range:)(v47, v71, 1.0);
      return (*(uint64_t (**)(uint64_t, uint64_t))(v69 + 8))(v72, v70);
    }
    __break(1u);
    goto LABEL_13;
  }
  sub_2141E801C((uint64_t)v18, (uint64_t)v32, (uint64_t *)&unk_253F15EB0);
  sub_2141E070C((uint64_t)v32, (uint64_t)v30, (uint64_t *)&unk_253F15EB0);
  sub_2141E070C((uint64_t)v32, (uint64_t)v27, (uint64_t *)&unk_253F15EB0);
  if ((v67 & 1) == 0)
  {
    sub_2141E0750((uint64_t)v27, (uint64_t *)&unk_253F15EB0);
    swift_bridgeObjectRelease();
    v48 = v58;
LABEL_11:
    v55 = v69;
    v54 = v70;
    v56 = (uint64_t)v65;
    v57 = v72;
    (*(void (**)(char *, uint64_t, uint64_t))(v69 + 16))(v65, v72, v70);
    DateBins.init(range:desiredCount:calendar:)((uint64_t)v30, v48, v56, v71);
    (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v57, v54);
    return sub_2141E0750((uint64_t)v32, (uint64_t *)&unk_253F15EB0);
  }
  v49 = sub_2142CD0F4(a1);
  swift_bridgeObjectRelease();
  sub_2144239F0();
  v51 = v50;
  result = sub_2144239F0();
  if (*(double *)&v51 <= *(double *)&v52)
  {
    v53 = sub_214332410(v51, v52, 0, v49);
    swift_bridgeObjectRelease();
    if (v53 >= 200)
      v48 = 200;
    else
      v48 = v53;
    sub_2141E0750((uint64_t)v27, (uint64_t *)&unk_253F15EB0);
    goto LABEL_11;
  }
LABEL_13:
  __break(1u);
  return result;
}

Swift::Int __swiftcall DateBins.index(after:)(Swift::Int after)
{
  BOOL v1;
  Swift::Int result;

  v1 = __OFADD__(after, 1);
  result = after + 1;
  if (v1)
    __break(1u);
  return result;
}

uint64_t DateBins.startIndex.getter()
{
  return 0;
}

uint64_t DateBins.endIndex.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v4)(_QWORD);
  int EnumCaseMultiPayload;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v1 = type metadata accessor for DateBins.Storage(0);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (uint64_t *)((char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_2141FDEA0(v0, (uint64_t)v3, v4);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
    return v3[2];
  if (EnumCaseMultiPayload == 1)
  {
    v6 = *(_QWORD *)((char *)v3 + *(int *)(sub_2141D8BF8(&qword_253F11570) + 64));
    sub_2141DD370((uint64_t)v3, type metadata accessor for CalendarBinningUnit);
  }
  else
  {
    v7 = *(_QWORD *)(*v3 + 16);
    swift_bridgeObjectRelease();
    return v7 - 1;
  }
  return v6;
}

uint64_t sub_214333ED8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = DateBins.endIndex.getter();
  *a1 = result;
  return result;
}

void (*sub_214333EFC(_QWORD *a1, unint64_t *a2))(uint64_t *a1)
{
  uint64_t v4;
  void *v5;

  v4 = sub_2141D8BF8(&qword_253F13358);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  *a1 = v5;
  DateBins.subscript.getter(*a2, (uint64_t)v5);
  return sub_214333F5C;
}

void sub_214333F5C(uint64_t *a1)
{
  void *v1;

  v1 = (void *)*a1;
  sub_2141E0750(*a1, &qword_253F13358);
  free(v1);
}

uint64_t sub_214333F8C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_214333440(*a1, a1[1], a2);
}

uint64_t sub_214333FA0()
{
  return sub_2143335D8();
}

uint64_t *sub_214333FB4@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  if ((a2 & 0x8000000000000000) == 0)
  {
    v3 = *result;
    if (!a2)
    {
LABEL_6:
      *a3 = v3;
      return result;
    }
    v4 = v3 ^ 0x7FFFFFFFFFFFFFFFLL;
    v5 = a2 - 1;
    while (v4 > v5)
    {
      ++v3;
      if (!--a2)
        goto LABEL_6;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_214333FEC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  char v6;

  result = sub_214334020(*a1, a2, *a3);
  *(_QWORD *)a4 = result;
  *(_BYTE *)(a4 + 8) = v6 & 1;
  return result;
}

uint64_t sub_214334020(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64x2_t v8;
  int64x2_t v9;
  int64x2_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (a2 < 0)
  {
LABEL_21:
    __break(1u);
    return result;
  }
  if (a2)
  {
    v3 = a3 - result;
    if (a3 - result >= (unint64_t)(a2 - 1))
      v3 = a2 - 1;
    if (v3 >= (result ^ 0x7FFFFFFFFFFFFFFFuLL))
      v3 = result ^ 0x7FFFFFFFFFFFFFFFLL;
    v4 = v3 + 1;
    if (v4 >= 5)
    {
      v7 = v4 & 3;
      if ((v4 & 3) == 0)
        v7 = 4;
      v5 = v4 - v7;
      v8 = 0uLL;
      v9 = (int64x2_t)(unint64_t)result;
      v10 = vdupq_n_s64(1uLL);
      v11 = v5;
      do
      {
        v9 = vaddq_s64(v9, v10);
        v8 = vaddq_s64(v8, v10);
        v11 -= 4;
      }
      while (v11);
      v6 = vaddvq_s64(vaddq_s64(v8, v9));
    }
    else
    {
      v5 = 0;
      v6 = result;
    }
    v12 = v5 + result - 0x7FFFFFFFFFFFFFFFLL;
    v13 = v5 + result - a3;
    v14 = a2 - v5;
    result = v6;
    while (1)
    {
      if (!v13)
        return 0;
      if (!v12)
        break;
      ++result;
      ++v12;
      ++v13;
      if (!--v14)
        return result;
    }
    __break(1u);
    goto LABEL_21;
  }
  return result;
}

uint64_t *sub_2143340F0(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;

  v2 = *result;
  v3 = *a2;
  if (*a2 < *result)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (*a2 == *result)
    return 0;
  v4 = (uint64_t *)(v3 - v2);
  if (v3 > v2)
  {
    result = 0;
    v5 = v3 + ~v2;
    while (v5 <= 0x7FFFFFFFFFFFFFFELL)
    {
      result = (uint64_t *)((char *)result + 1);
      if (v4 == result)
        return result;
    }
    __break(1u);
    goto LABEL_10;
  }
LABEL_11:
  __break(1u);
  return result;
}

uint64_t *sub_214334148(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  BOOL v5;

  v2 = *result;
  v3 = a2[1];
  if (*result >= *a2)
  {
    v5 = __OFSUB__(v2, v3);
    v4 = v2 - v3 < 0;
  }
  else
  {
    v5 = 0;
    v4 = 0;
  }
  if (v4 == v5)
    __break(1u);
  return result;
}

_QWORD *sub_214334164(_QWORD *result, _QWORD *a2)
{
  if (*result < *a2 || a2[1] < *result)
    __break(1u);
  return result;
}

_QWORD *sub_214334180(_QWORD *result, _QWORD *a2)
{
  if (*result < *a2 || a2[1] < result[1])
    __break(1u);
  return result;
}

uint64_t sub_21433419C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  sub_2141FE1E0(v1, a1, type metadata accessor for DateBins);
  result = sub_2141D8BF8(qword_254D6AD58);
  *(_QWORD *)(a1 + *(int *)(result + 36)) = 0;
  return result;
}

size_t sub_2143341E0()
{
  uint64_t v0;
  size_t v1;

  v1 = sub_214397868(v0);
  sub_2141DD370(v0, type metadata accessor for DateBins);
  return v1;
}

uint64_t sub_21433421C(char a1, int a2, double a3, double a4, double a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  _BYTE *v20;
  unsigned int *v21;
  void (*v22)(_BYTE *, _QWORD, uint64_t);
  BOOL v23;
  unsigned int *v24;
  double v25;
  void (*v26)(_BYTE *, _BYTE *, uint64_t);
  uint64_t (*v27)(_BYTE *, uint64_t);
  int v28;
  int v29;
  double v30;
  double v31;
  double v32;
  void (*v33)(_BYTE *, uint64_t);
  unsigned int *v34;
  double v35;
  _BYTE *v36;
  int v37;
  double v38;
  double v39;
  double v40;
  uint64_t result;
  _BYTE v42[4];
  int v43;
  _BYTE *v44;
  double v45;
  unint64_t v46;

  v43 = a2;
  v9 = sub_214425760();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v44 = &v42[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = MEMORY[0x24BDAC7A8](v11);
  v15 = &v42[-v14];
  v16 = MEMORY[0x24BDAC7A8](v13);
  v18 = &v42[-v17];
  MEMORY[0x24BDAC7A8](v16);
  v20 = &v42[-v19];
  v21 = (unsigned int *)MEMORY[0x24BEE38E8];
  v22 = *(void (**)(_BYTE *, _QWORD, uint64_t))(v10 + 104);
  v23 = (a1 & 1) == 0;
  v24 = (unsigned int *)MEMORY[0x24BEE38E8];
  if (v23)
    v21 = (unsigned int *)MEMORY[0x24BEE38E0];
  v22(&v42[-v19], *v21, v9);
  v25 = a3 / a5;
  v45 = v25;
  v26 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 16);
  v26(v18, v20, v9);
  v27 = *(uint64_t (**)(_BYTE *, uint64_t))(v10 + 88);
  v28 = v27(v18, v9);
  v29 = *MEMORY[0x24BEE38D0];
  if (v28 == *MEMORY[0x24BEE38D0])
  {
    v30 = round(v25);
  }
  else if (v28 == *MEMORY[0x24BEE38C8])
  {
    v30 = rint(v25);
  }
  else if (v28 == *MEMORY[0x24BEE38E0])
  {
    v30 = ceil(v25);
  }
  else if (v28 == *v24)
  {
    v30 = floor(v25);
  }
  else if (v28 == *MEMORY[0x24BEE38B8])
  {
    v30 = trunc(v25);
  }
  else if (v28 == *MEMORY[0x24BEE38C0])
  {
    v31 = ceil(v25);
    v32 = floor(v25);
    if (v25 < 0.0)
      v30 = v32;
    else
      v30 = v31;
  }
  else
  {
    sub_2144250D0();
    v24 = (unsigned int *)MEMORY[0x24BEE38E8];
    (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v18, v9);
    v30 = v45;
  }
  v33 = *(void (**)(_BYTE *, uint64_t))(v10 + 8);
  v33(v20, v9);
  v34 = (unsigned int *)MEMORY[0x24BEE38E0];
  if ((v43 & 1) == 0)
    v34 = v24;
  v22(v15, *v34, v9);
  v35 = a4 / a5;
  v45 = v35;
  v36 = v44;
  v26(v44, v15, v9);
  v37 = v27(v36, v9);
  if (v37 == v29)
  {
    v38 = round(v35);
  }
  else if (v37 == *MEMORY[0x24BEE38C8])
  {
    v38 = rint(v35);
  }
  else if (v37 == *MEMORY[0x24BEE38E0])
  {
    v38 = ceil(v35);
  }
  else if (v37 == *v24)
  {
    v38 = floor(v35);
  }
  else if (v37 == *MEMORY[0x24BEE38B8])
  {
    v38 = trunc(v35);
  }
  else if (v37 == *MEMORY[0x24BEE38C0])
  {
    v39 = ceil(v35);
    v40 = floor(v35);
    if (v35 < 0.0)
      v38 = v40;
    else
      v38 = v39;
  }
  else
  {
    sub_2144250D0();
    v33(v36, v9);
    v38 = v45;
  }
  v33(v15, v9);
  sub_2142D171C(&v45, v38 - v30);
  if ((v46 & 1) != 0)
    goto LABEL_40;
  result = *(_QWORD *)&v45 + 1;
  if (__OFADD__(*(_QWORD *)&v45, 1))
  {
    __break(1u);
LABEL_40:
    v45 = 0.0;
    v46 = 0xE000000000000000;
    sub_2144254D8();
    sub_214424F20();
    sub_214424F20();
    sub_214424F20();
    sub_214424F20();
    result = sub_214425628();
    __break(1u);
  }
  return result;
}

uint64_t sub_21433464C(uint64_t a1, uint64_t a2, char a3, char a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  type metadata accessor for CalendarBinningUnit(0);
  result = sub_2142C5728();
  v10 = v9;
  if ((a3 & 1) != 0 || (a4 & 1) != 0)
    goto LABEL_7;
  v11 = result - 1;
  if (__OFSUB__(result, 1))
  {
    __break(1u);
    goto LABEL_12;
  }
  v12 = v10 + 1;
  if (__OFADD__(v10, 1))
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (v12 >= v11)
    return sub_2143E6F34(a5, v11, v12);
  __break(1u);
LABEL_7:
  v11 = result + 1;
  if (__OFADD__(result, 1))
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v12 = v10 + 1;
  if (__OFADD__(v10, 1))
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (v12 >= v11)
    return sub_2143E6F34(a5, v11, v12);
LABEL_15:
  __break(1u);
  return result;
}

unint64_t sub_21433470C(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, char a7, uint64_t a8)
{
  uint64_t v12;
  BOOL v13;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (*(_QWORD *)(a2 + 16) <= result)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (*(_QWORD *)(a2 + 16 * result + 32) > a3)
    return qword_254D6E0C0;
  if (*(_QWORD *)(a4 + 16) <= result)
    goto LABEL_12;
  type metadata accessor for CalendarBinningUnit(0);
  v12 = sub_2142C5308(a5, (char *)(a6 & 1), a7 & 1);
  result = v12 - a8;
  if (__OFSUB__(v12, a8))
  {
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
    return result;
  }
  if ((result & 0x8000000000000000) != 0)
  {
    v13 = __OFSUB__(0, result);
    result = a8 - v12;
    if (v13)
      goto LABEL_14;
  }
  return result;
}

unint64_t sub_2143347F8(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, char a5, char a6, uint64_t a7, double a8, double a9)
{
  uint64_t v10;
  BOOL v11;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (*(_QWORD *)(a2 + 16) <= result)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (*(_QWORD *)(a2 + 16 * result + 32) > a3)
    return qword_254D6E0C0;
  if (*(_QWORD *)(a4 + 16) <= result)
    goto LABEL_12;
  v10 = sub_21433421C(a5 & 1, a6 & 1, a8, a9, *(double *)(a4 + 8 * result + 32));
  result = v10 - a7;
  if (__OFSUB__(v10, a7))
  {
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
    return result;
  }
  if ((result & 0x8000000000000000) != 0)
  {
    v11 = __OFSUB__(0, result);
    result = a7 - v10;
    if (v11)
      goto LABEL_14;
  }
  return result;
}

uint64_t _s6Charts8DateBinsV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  double *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  int EnumCaseMultiPayload;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  BOOL v30;
  double v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v36;

  v4 = type metadata accessor for CalendarBinningUnit(0);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DateBins.Storage(0);
  v8 = MEMORY[0x24BDAC7A8](v7);
  v10 = (uint64_t *)((char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = MEMORY[0x24BDAC7A8](v8);
  v13 = (char *)&v36 - v12;
  MEMORY[0x24BDAC7A8](v11);
  v15 = (double *)((char *)&v36 - v14);
  v16 = sub_2141D8BF8(&qword_254D6AD88);
  v17 = MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v36 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = (uint64_t)&v19[*(int *)(v17 + 48)];
  sub_2141FDEA0(a1, (uint64_t)v19, type metadata accessor for DateBins.Storage);
  sub_2141FDEA0(a2, v20, type metadata accessor for DateBins.Storage);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    sub_2141FDEA0((uint64_t)v19, (uint64_t)v15, type metadata accessor for DateBins.Storage);
    v31 = v15[1];
    v32 = *((_QWORD *)v15 + 2);
    if (!swift_getEnumCaseMultiPayload())
    {
      if (*v15 == *(double *)v20 && v31 == *(double *)(v20 + 8))
      {
        v30 = v32 == *(_QWORD *)(v20 + 16);
LABEL_11:
        v33 = v30;
        goto LABEL_16;
      }
      goto LABEL_17;
    }
LABEL_20:
    sub_2141E0750((uint64_t)v19, &qword_254D6AD88);
    goto LABEL_21;
  }
  if (EnumCaseMultiPayload == 1)
  {
    sub_2141FDEA0((uint64_t)v19, (uint64_t)v13, type metadata accessor for DateBins.Storage);
    v22 = sub_2141D8BF8(&qword_253F11570);
    v23 = *(int *)(v22 + 48);
    v24 = *(_QWORD *)&v13[v23];
    v25 = *(int *)(v22 + 64);
    v26 = *(_QWORD *)&v13[v25];
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v27 = *(_QWORD *)(v20 + v23);
      v28 = *(_QWORD *)(v20 + v25);
      sub_2141FE1E0(v20, (uint64_t)v6, type metadata accessor for CalendarBinningUnit);
      v29 = sub_2142C9D20((uint64_t)v13, (uint64_t)v6);
      sub_2141DD370((uint64_t)v6, type metadata accessor for CalendarBinningUnit);
      sub_2141DD370((uint64_t)v13, type metadata accessor for CalendarBinningUnit);
      if ((v29 & 1) != 0 && v24 == v27)
      {
        v30 = v26 == v28;
        goto LABEL_11;
      }
LABEL_17:
      sub_2141DD370((uint64_t)v19, type metadata accessor for DateBins.Storage);
LABEL_21:
      v33 = 0;
      return v33 & 1;
    }
    sub_2141DD370((uint64_t)v13, type metadata accessor for CalendarBinningUnit);
    goto LABEL_20;
  }
  sub_2141FDEA0((uint64_t)v19, (uint64_t)v10, type metadata accessor for DateBins.Storage);
  v34 = *v10;
  if (swift_getEnumCaseMultiPayload() != 2)
  {
    swift_bridgeObjectRelease();
    goto LABEL_20;
  }
  v33 = sub_21420E9D8(v34, *(_QWORD *)v20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_16:
  sub_2141DD370((uint64_t)v19, type metadata accessor for DateBins.Storage);
  return v33 & 1;
}

uint64_t type metadata accessor for DateBins.Storage(uint64_t a1)
{
  return sub_2141FE0D4(a1, qword_253F15E08);
}

uint64_t type metadata accessor for DateBins(uint64_t a1)
{
  return sub_2141FE0D4(a1, (uint64_t *)&unk_253F159B0);
}

uint64_t sub_214334BC4(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_2141FED10(&qword_254D6AD28, type metadata accessor for DateBins, (uint64_t)&protocol conformance descriptor for DateBins);
  result = sub_2141FED10(&qword_254D6AD30, type metadata accessor for DateBins, (uint64_t)&protocol conformance descriptor for DateBins);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_214334C20()
{
  return sub_2141FED10(&qword_253F118F8, type metadata accessor for DateBins, (uint64_t)&protocol conformance descriptor for DateBins);
}

uint64_t sub_214334C4C()
{
  return sub_2141D9054(&qword_254D6AD38, &qword_253F11928, MEMORY[0x24BEE0670]);
}

uint64_t sub_214334C78()
{
  return sub_2141D9054(&qword_254D6AD40, &qword_254D6AD48, MEMORY[0x24BEE4238]);
}

uint64_t sub_214334CA4()
{
  return sub_2141D9054(&qword_254D6AD50, qword_254D6AD58, MEMORY[0x24BEE2C18]);
}

uint64_t *initializeBufferWithCopyOfBuffer for DateBins(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  int EnumCaseMultiPayload;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v4 = *(_QWORD *)(type metadata accessor for DateBins.Storage(0) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *a1 = *a2;
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v7 = sub_214423C48();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = (int *)type metadata accessor for CalendarBinningUnit(0);
      *(uint64_t *)((char *)a1 + v8[5]) = *(uint64_t *)((char *)a2 + v8[5]);
      v9 = v8[6];
      v10 = (char *)a1 + v9;
      v11 = (char *)a2 + v9;
      v12 = sub_214423B70();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
      v13 = v8[7];
      v14 = (char *)a1 + v13;
      v15 = (char *)a2 + v13;
      v16 = sub_214423C54();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v14, v15, v16);
      *(uint64_t *)((char *)a1 + v8[8]) = *(uint64_t *)((char *)a2 + v8[8]);
      swift_retain();
      v17 = sub_2141D8BF8(&qword_253F11570);
      *(uint64_t *)((char *)a1 + *(int *)(v17 + 48)) = *(uint64_t *)((char *)a2 + *(int *)(v17 + 48));
      *(uint64_t *)((char *)a1 + *(int *)(v17 + 64)) = *(uint64_t *)((char *)a2 + *(int *)(v17 + 64));
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(v4 + 64));
    }
  }
  return a1;
}

uint64_t destroy for DateBins(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  type metadata accessor for DateBins.Storage(0);
  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 2)
    return swift_bridgeObjectRelease();
  if ((_DWORD)result == 1)
  {
    v3 = sub_214423C48();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
    v4 = type metadata accessor for CalendarBinningUnit(0);
    v5 = a1 + *(int *)(v4 + 24);
    v6 = sub_214423B70();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
    v7 = a1 + *(int *)(v4 + 28);
    v8 = sub_214423C54();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
    return swift_release();
  }
  return result;
}

_QWORD *initializeWithCopy for DateBins(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  int EnumCaseMultiPayload;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;

  v4 = type metadata accessor for DateBins.Storage(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    *a1 = *a2;
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload == 1)
  {
    v6 = sub_214423C48();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
    v7 = (int *)type metadata accessor for CalendarBinningUnit(0);
    *(_QWORD *)((char *)a1 + v7[5]) = *(_QWORD *)((char *)a2 + v7[5]);
    v8 = v7[6];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_214423B70();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = v7[7];
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = sub_214423C54();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
    *(_QWORD *)((char *)a1 + v7[8]) = *(_QWORD *)((char *)a2 + v7[8]);
    swift_retain();
    v16 = sub_2141D8BF8(&qword_253F11570);
    *(_QWORD *)((char *)a1 + *(int *)(v16 + 48)) = *(_QWORD *)((char *)a2 + *(int *)(v16 + 48));
    *(_QWORD *)((char *)a1 + *(int *)(v16 + 64)) = *(_QWORD *)((char *)a2 + *(int *)(v16 + 64));
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  }
  return a1;
}

_QWORD *assignWithCopy for DateBins(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  int EnumCaseMultiPayload;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;

  if (a1 != a2)
  {
    sub_2141DD370((uint64_t)a1, type metadata accessor for DateBins.Storage);
    v4 = type metadata accessor for DateBins.Storage(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *a1 = *a2;
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v6 = sub_214423C48();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
      v7 = (int *)type metadata accessor for CalendarBinningUnit(0);
      *(_QWORD *)((char *)a1 + v7[5]) = *(_QWORD *)((char *)a2 + v7[5]);
      v8 = v7[6];
      v9 = (char *)a1 + v8;
      v10 = (char *)a2 + v8;
      v11 = sub_214423B70();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
      v12 = v7[7];
      v13 = (char *)a1 + v12;
      v14 = (char *)a2 + v12;
      v15 = sub_214423C54();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
      *(_QWORD *)((char *)a1 + v7[8]) = *(_QWORD *)((char *)a2 + v7[8]);
      swift_retain();
      v16 = sub_2141D8BF8(&qword_253F11570);
      *(_QWORD *)((char *)a1 + *(int *)(v16 + 48)) = *(_QWORD *)((char *)a2 + *(int *)(v16 + 48));
      *(_QWORD *)((char *)a1 + *(int *)(v16 + 64)) = *(_QWORD *)((char *)a2 + *(int *)(v16 + 64));
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
    }
  }
  return a1;
}

char *initializeWithTake for DateBins(char *a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;

  v4 = type metadata accessor for DateBins.Storage(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v5 = sub_214423C48();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a1, a2, v5);
    v6 = (int *)type metadata accessor for CalendarBinningUnit(0);
    *(_QWORD *)&a1[v6[5]] = *(_QWORD *)&a2[v6[5]];
    v7 = v6[6];
    v8 = &a1[v7];
    v9 = &a2[v7];
    v10 = sub_214423B70();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
    v11 = v6[7];
    v12 = &a1[v11];
    v13 = &a2[v11];
    v14 = sub_214423C54();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
    *(_QWORD *)&a1[v6[8]] = *(_QWORD *)&a2[v6[8]];
    v15 = sub_2141D8BF8(&qword_253F11570);
    *(_QWORD *)&a1[*(int *)(v15 + 48)] = *(_QWORD *)&a2[*(int *)(v15 + 48)];
    *(_QWORD *)&a1[*(int *)(v15 + 64)] = *(_QWORD *)&a2[*(int *)(v15 + 64)];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  }
  return a1;
}

char *assignWithTake for DateBins(char *a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;

  if (a1 != a2)
  {
    sub_2141DD370((uint64_t)a1, type metadata accessor for DateBins.Storage);
    v4 = type metadata accessor for DateBins.Storage(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v5 = sub_214423C48();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a1, a2, v5);
      v6 = (int *)type metadata accessor for CalendarBinningUnit(0);
      *(_QWORD *)&a1[v6[5]] = *(_QWORD *)&a2[v6[5]];
      v7 = v6[6];
      v8 = &a1[v7];
      v9 = &a2[v7];
      v10 = sub_214423B70();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
      v11 = v6[7];
      v12 = &a1[v11];
      v13 = &a2[v11];
      v14 = sub_214423C54();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
      *(_QWORD *)&a1[v6[8]] = *(_QWORD *)&a2[v6[8]];
      v15 = sub_2141D8BF8(&qword_253F11570);
      *(_QWORD *)&a1[*(int *)(v15 + 48)] = *(_QWORD *)&a2[*(int *)(v15 + 48)];
      *(_QWORD *)&a1[*(int *)(v15 + 64)] = *(_QWORD *)&a2[*(int *)(v15 + 64)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for DateBins()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2143354C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DateBins.Storage(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for DateBins()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_214335510(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DateBins.Storage(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t sub_214335550()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for DateBins.Storage(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_2143355B8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v19 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v19 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *a1 = *a2;
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v8 = sub_214423C48();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = (int *)type metadata accessor for CalendarBinningUnit(0);
      *(uint64_t *)((char *)a1 + v9[5]) = *(uint64_t *)((char *)a2 + v9[5]);
      v10 = v9[6];
      v11 = (char *)a1 + v10;
      v12 = (char *)a2 + v10;
      v13 = sub_214423B70();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v12, v13);
      v14 = v9[7];
      v15 = (char *)a1 + v14;
      v16 = (char *)a2 + v14;
      v17 = sub_214423C54();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v15, v16, v17);
      *(uint64_t *)((char *)a1 + v9[8]) = *(uint64_t *)((char *)a2 + v9[8]);
      swift_retain();
      v18 = sub_2141D8BF8(&qword_253F11570);
      *(uint64_t *)((char *)a1 + *(int *)(v18 + 48)) = *(uint64_t *)((char *)a2 + *(int *)(v18 + 48));
      *(uint64_t *)((char *)a1 + *(int *)(v18 + 64)) = *(uint64_t *)((char *)a2 + *(int *)(v18 + 64));
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(v5 + 64));
    }
  }
  return a1;
}

uint64_t sub_214335740(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 2)
    return swift_bridgeObjectRelease();
  if ((_DWORD)result == 1)
  {
    v3 = sub_214423C48();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
    v4 = type metadata accessor for CalendarBinningUnit(0);
    v5 = a1 + *(int *)(v4 + 24);
    v6 = sub_214423B70();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
    v7 = a1 + *(int *)(v4 + 28);
    v8 = sub_214423C54();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
    return swift_release();
  }
  return result;
}

_QWORD *sub_214335814(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    *a1 = *a2;
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload == 1)
  {
    v7 = sub_214423C48();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = (int *)type metadata accessor for CalendarBinningUnit(0);
    *(_QWORD *)((char *)a1 + v8[5]) = *(_QWORD *)((char *)a2 + v8[5]);
    v9 = v8[6];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = sub_214423B70();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
    v13 = v8[7];
    v14 = (char *)a1 + v13;
    v15 = (char *)a2 + v13;
    v16 = sub_214423C54();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v14, v15, v16);
    *(_QWORD *)((char *)a1 + v8[8]) = *(_QWORD *)((char *)a2 + v8[8]);
    swift_retain();
    v17 = sub_2141D8BF8(&qword_253F11570);
    *(_QWORD *)((char *)a1 + *(int *)(v17 + 48)) = *(_QWORD *)((char *)a2 + *(int *)(v17 + 48));
    *(_QWORD *)((char *)a1 + *(int *)(v17 + 64)) = *(_QWORD *)((char *)a2 + *(int *)(v17 + 64));
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

_QWORD *sub_214335974(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;

  if (a1 != a2)
  {
    sub_2141DD370((uint64_t)a1, type metadata accessor for DateBins.Storage);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *a1 = *a2;
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v7 = sub_214423C48();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = (int *)type metadata accessor for CalendarBinningUnit(0);
      *(_QWORD *)((char *)a1 + v8[5]) = *(_QWORD *)((char *)a2 + v8[5]);
      v9 = v8[6];
      v10 = (char *)a1 + v9;
      v11 = (char *)a2 + v9;
      v12 = sub_214423B70();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
      v13 = v8[7];
      v14 = (char *)a1 + v13;
      v15 = (char *)a2 + v13;
      v16 = sub_214423C54();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v14, v15, v16);
      *(_QWORD *)((char *)a1 + v8[8]) = *(_QWORD *)((char *)a2 + v8[8]);
      swift_retain();
      v17 = sub_2141D8BF8(&qword_253F11570);
      *(_QWORD *)((char *)a1 + *(int *)(v17 + 48)) = *(_QWORD *)((char *)a2 + *(int *)(v17 + 48));
      *(_QWORD *)((char *)a1 + *(int *)(v17 + 64)) = *(_QWORD *)((char *)a2 + *(int *)(v17 + 64));
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

char *sub_214335AEC(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v6 = sub_214423C48();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    v7 = (int *)type metadata accessor for CalendarBinningUnit(0);
    *(_QWORD *)&a1[v7[5]] = *(_QWORD *)&a2[v7[5]];
    v8 = v7[6];
    v9 = &a1[v8];
    v10 = &a2[v8];
    v11 = sub_214423B70();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
    v12 = v7[7];
    v13 = &a1[v12];
    v14 = &a2[v12];
    v15 = sub_214423C54();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v13, v14, v15);
    *(_QWORD *)&a1[v7[8]] = *(_QWORD *)&a2[v7[8]];
    v16 = sub_2141D8BF8(&qword_253F11570);
    *(_QWORD *)&a1[*(int *)(v16 + 48)] = *(_QWORD *)&a2[*(int *)(v16 + 48)];
    *(_QWORD *)&a1[*(int *)(v16 + 64)] = *(_QWORD *)&a2[*(int *)(v16 + 64)];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

char *sub_214335C20(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;

  if (a1 != a2)
  {
    sub_2141DD370((uint64_t)a1, type metadata accessor for DateBins.Storage);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v6 = sub_214423C48();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      v7 = (int *)type metadata accessor for CalendarBinningUnit(0);
      *(_QWORD *)&a1[v7[5]] = *(_QWORD *)&a2[v7[5]];
      v8 = v7[6];
      v9 = &a1[v8];
      v10 = &a2[v8];
      v11 = sub_214423B70();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
      v12 = v7[7];
      v13 = &a1[v12];
      v14 = &a2[v12];
      v15 = sub_214423C54();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v13, v14, v15);
      *(_QWORD *)&a1[v7[8]] = *(_QWORD *)&a2[v7[8]];
      v16 = sub_2141D8BF8(&qword_253F11570);
      *(_QWORD *)&a1[*(int *)(v16 + 48)] = *(_QWORD *)&a2[*(int *)(v16 + 48)];
      *(_QWORD *)&a1[*(int *)(v16 + 64)] = *(_QWORD *)&a2[*(int *)(v16 + 64)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_214335D6C()
{
  uint64_t result;
  unint64_t v1;
  char v2;
  void *v3;
  char *v4;
  uint64_t v5;

  v3 = &unk_21442CC70;
  result = type metadata accessor for CalendarBinningUnit(319);
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout3();
    v4 = &v2;
    v5 = MEMORY[0x24BEE0158] + 64;
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t sub_214335E04(uint64_t a1)
{
  sub_2142085E4(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_BYTE *)(a1 + 56));
  return a1;
}

uint64_t sub_214335E3C@<X0>(double *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  double *v4;
  char v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v4 = *(double **)(v2 + 16);
  v5 = *(_BYTE *)(v2 + 24);
  v6 = *(unsigned __int8 *)(v2 + 25);
  v7 = *(_QWORD *)(v2 + 32);
  v8 = sub_21433421C(v5, v6, *v4, v4[1], *a1);
  result = sub_2143E6F34(v7, v8, v8);
  *a2 = result;
  a2[1] = v10;
  return result;
}

uint64_t sub_214335E9C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v6;

  result = sub_21433464C(a1, *(_QWORD *)(v2 + 16), *(_BYTE *)(v2 + 24), *(_BYTE *)(v2 + 25), *(_QWORD *)(v2 + 32));
  if (!v3)
  {
    *a2 = result;
    a2[1] = v6;
  }
  return result;
}

uint64_t AxisTick.init(centered:length:stroke:snapToPixel:pixelOffset:)@<X0>(char a1@<W0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, uint64_t a7@<X8>)
{
  uint64_t result;
  double v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  _OWORD v19[2];
  uint64_t v20;

  result = sub_2141E801C(a3, (uint64_t)v19, &qword_253F11F60);
  v14 = a5;
  if ((a6 & 1) != 0)
    v14 = 0.0;
  v15 = v19[1];
  *(_OWORD *)(a7 + 24) = v19[0];
  v16 = v20;
  v17 = *a2;
  v18 = *((_BYTE *)a2 + 8);
  *(_BYTE *)a7 = a1;
  *(_QWORD *)(a7 + 8) = v17;
  *(_BYTE *)(a7 + 16) = v18;
  *(_OWORD *)(a7 + 40) = v15;
  *(_QWORD *)(a7 + 56) = v16;
  *(_BYTE *)(a7 + 64) = 0;
  *(_BYTE *)(a7 + 65) = a4 & 1;
  *(double *)(a7 + 72) = v14;
  return result;
}

double AxisTick.init(centered:length:stroke:)@<D0>(char a1@<W0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char v9;
  double result;
  __int128 v11;
  _OWORD v12[2];
  uint64_t v13;

  sub_2141E801C(a3, (uint64_t)v12, &qword_253F11F60);
  v7 = v13;
  v8 = *a2;
  v9 = *((_BYTE *)a2 + 8);
  *(_BYTE *)a4 = a1;
  *(_QWORD *)(a4 + 8) = v8;
  *(_BYTE *)(a4 + 16) = v9;
  result = *(double *)v12;
  v11 = v12[1];
  *(_OWORD *)(a4 + 24) = v12[0];
  *(_OWORD *)(a4 + 40) = v11;
  *(_QWORD *)(a4 + 56) = v7;
  *(_WORD *)(a4 + 64) = 0;
  *(_QWORD *)(a4 + 72) = 0;
  return result;
}

void static AxisTick._renderAxisMark(_:_:)(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[5];
  int v17;
  uint64_t v18;
  uint64_t v19;

  v18 = a3;
  v5 = sub_2141D8BF8(&qword_253F14280);
  MEMORY[0x24BDAC7A8](v5);
  v16[3] = (char *)v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for SgShapeStyle();
  MEMORY[0x24BDAC7A8](v7);
  v8 = *(unsigned __int8 *)(a1 + 16);
  v9 = *(_QWORD *)(a1 + 48);
  v10 = *(_BYTE *)(a1 + 64);
  v17 = *(unsigned __int8 *)(a1 + 65);
  v11 = *(_QWORD *)(a1 + 72);
  v12 = *a2;
  if (v8 > 1)
  {
    if (v8 == 2)
      goto LABEL_16;
    if (*(unsigned __int8 *)(v12 + 24) - 1 <= 1)
    {
      v15 = qword_253F106B8;
      swift_retain();
      if (v15 != -1)
        swift_once();
      if (v9)
      {
LABEL_17:
        v16[4] = v11;
        if ((v10 & 1) != 0)
          __asm { BR              X10 }
        __asm { BR              X10 }
      }
LABEL_14:
      sub_2143C9138(*(_BYTE *)(v12 + 64), (double *)&v19);
      goto LABEL_17;
    }
  }
  else if (!v8)
  {
    v13 = *(_QWORD *)(v12 + 128);
    swift_beginAccess();
    v14 = *(_QWORD *)(v12 + 216);
    if (v14)
    {
      if (*(_QWORD *)(v14 + 16))
        sub_214336CE4(v13);
      swift_endAccess();
LABEL_16:
      swift_retain();
      if (v9)
        goto LABEL_17;
      goto LABEL_14;
    }
LABEL_21:
    __break(1u);
    JUMPOUT(0x2143367FCLL);
  }
  swift_beginAccess();
  if (*(_QWORD *)(v12 + 216))
    goto LABEL_16;
  __break(1u);
  goto LABEL_21;
}

void static AxisTick.Length.automatic.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = -1;
}

uint64_t AxisTick.init(centered:length:stroke:snapToPixel:pixelOffset:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, char a3@<W2>, double a4@<X3>, char a5@<W4>, uint64_t a6@<X8>, double a7@<D0>)
{
  uint64_t result;
  uint64_t v14;
  double v15;
  __int128 v16;
  _OWORD v17[2];
  uint64_t v18;

  result = sub_2141E801C(a2, (uint64_t)v17, &qword_253F11F60);
  v14 = v18;
  v15 = a4;
  *(_BYTE *)a6 = a1;
  if ((a5 & 1) != 0)
    v15 = 0.0;
  *(double *)(a6 + 8) = a7;
  *(_BYTE *)(a6 + 16) = 2;
  v16 = v17[1];
  *(_OWORD *)(a6 + 24) = v17[0];
  *(_OWORD *)(a6 + 40) = v16;
  *(_QWORD *)(a6 + 56) = v14;
  *(_BYTE *)(a6 + 64) = 0;
  *(_BYTE *)(a6 + 65) = a3 & 1;
  *(double *)(a6 + 72) = v15;
  return result;
}

double AxisTick.init(centered:length:stroke:)@<D0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  uint64_t v7;
  double result;
  __int128 v9;
  _OWORD v10[2];
  uint64_t v11;

  sub_2141E801C(a2, (uint64_t)v10, &qword_253F11F60);
  v7 = v11;
  *(_BYTE *)a3 = a1;
  *(double *)(a3 + 8) = a4;
  *(_BYTE *)(a3 + 16) = 2;
  result = *(double *)v10;
  v9 = v10[1];
  *(_OWORD *)(a3 + 24) = v10[0];
  *(_OWORD *)(a3 + 40) = v9;
  *(_QWORD *)(a3 + 56) = v7;
  *(_WORD *)(a3 + 64) = 0;
  *(_QWORD *)(a3 + 72) = 0;
  return result;
}

void static AxisTick.Length.label.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
}

void static AxisTick.Length.label(extendPastBy:)(uint64_t a1@<X8>, double a2@<D0>)
{
  *(double *)a1 = a2;
  *(_BYTE *)(a1 + 8) = 0;
}

void static AxisTick.Length.longestLabel.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 1;
}

void static AxisTick.Length.longestLabel(extendPastBy:)(uint64_t a1@<X8>, double a2@<D0>)
{
  *(double *)a1 = a2;
  *(_BYTE *)(a1 + 8) = 1;
}

uint64_t AxisTick.Length.description.getter()
{
  uint64_t v0;
  double v1;
  unint64_t v3;
  unint64_t v4;

  v1 = *(double *)v0;
  if (*(unsigned __int8 *)(v0 + 8) > 1u)
  {
    if (*(_BYTE *)(v0 + 8) == 2)
      return sub_2144250C4();
    else
      return 0x6974616D6F747561;
  }
  else
  {
    if (*(_BYTE *)(v0 + 8))
    {
      if (v1 == 0.0)
        return 0x4C747365676E6F6CLL;
      sub_2144254D8();
      swift_bridgeObjectRelease();
      v3 = 0xD00000000000001BLL;
    }
    else
    {
      if (v1 == 0.0)
        return 0x6C6562616CLL;
      sub_2144254D8();
      swift_bridgeObjectRelease();
      v3 = 0xD000000000000014;
    }
    v4 = v3;
    sub_2144250C4();
    sub_214424F20();
    swift_bridgeObjectRelease();
    sub_214424F20();
    return v4;
  }
}

double sub_214336AEC@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  double result;
  uint64_t v11;
  _BYTE v12[8];
  uint64_t v13;
  char v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;

  v3 = *a2;
  if (*(_BYTE *)(*a2 + 24))
  {
    *a3 = 0xE000000000000000;
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 72);
    v5 = *(_BYTE *)(a1 + 65);
    v6 = *(_BYTE *)(a1 + 64);
    v7 = *(_QWORD *)(a1 + 56);
    v8 = *(_BYTE *)(a1 + 16);
    v9 = *(_QWORD *)(a1 + 8);
    v12[0] = *(_BYTE *)a1;
    v13 = v9;
    v14 = v8;
    v15 = *(_OWORD *)(a1 + 24);
    v16 = *(_OWORD *)(a1 + 40);
    v17 = v7;
    v18 = v6;
    v19 = v5;
    v20 = v4;
    v11 = v3;
    static AxisTick._renderAxisMark(_:_:)((uint64_t)v12, &v11, (uint64_t)a3);
  }
  return result;
}

unint64_t sub_214336B74(unsigned __int8 a1)
{
  uint64_t v2;

  sub_214425874();
  sub_214425880();
  v2 = sub_2144258B0();
  return sub_2143376F4(a1, v2);
}

unint64_t sub_214336BCC(double *a1)
{
  uint64_t v2;
  _BYTE v4[72];

  sub_214425874();
  sub_214200508((uint64_t)v4);
  v2 = sub_2144258B0();
  return sub_214337794(a1, v2);
}

unint64_t sub_214336C24(uint64_t a1)
{
  uint64_t v2;

  sub_214425874();
  sub_2142C58CC();
  v2 = sub_2144258B0();
  return sub_214337A14(a1, v2);
}

unint64_t sub_214336C7C(_QWORD *a1)
{
  uint64_t v2;

  sub_214425874();
  sub_214425898();
  sub_21442546C();
  v2 = sub_2144258B0();
  return sub_214337B24(a1, v2);
}

unint64_t sub_214336CE4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_214425868();
  return sub_214337CEC(a1, v2);
}

unint64_t sub_214336D1C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_214425874();
  sub_214424F14();
  v4 = sub_2144258B0();
  return sub_214337C0C(a1, a2, v4);
}

unint64_t sub_214336D80(double a1, double a2)
{
  uint64_t v4;

  sub_214425874();
  sub_21436BBC8();
  v4 = sub_2144258B0();
  return sub_214337D88(v4, a1, a2);
}

unint64_t sub_214336DE0(uint64_t a1)
{
  uint64_t v2;
  _BYTE v4[72];

  sub_214425874();
  sub_21432BC58((uint64_t)v4);
  v2 = sub_2144258B0();
  return sub_214337DFC(a1, v2);
}

unint64_t sub_214336E38(uint64_t a1)
{
  uint64_t v2;
  _BYTE v4[72];

  sub_214425874();
  sub_214390788((uint64_t)v4);
  v2 = sub_2144258B0();
  return sub_214338130(a1, v2);
}

unint64_t sub_214336E90(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_214425874();
  sub_214425898();
  sub_214425898();
  v4 = sub_2144258B0();
  return sub_214338224(a1, a2, v4);
}

unint64_t sub_214336EFC(uint64_t a1)
{
  uint64_t v2;

  sub_214423C54();
  sub_21433AAE4((unint64_t *)&qword_253F11000, MEMORY[0x24BDCF300]);
  v2 = sub_214424DB8();
  return sub_2143382A0(a1, v2);
}

unint64_t sub_214336F60(uint64_t a1)
{
  uint64_t v2;

  sub_214425874();
  v2 = sub_2144258B0();
  return sub_2143383D8(a1, v2);
}

unint64_t sub_214336FAC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  int v13;
  int v14;
  char v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD v41[19];
  _BYTE v42[152];

  sub_214425874();
  v29 = a1;
  v2 = *(_QWORD *)(a1 + 16);
  sub_214425880();
  if (v2)
  {
    v3 = a1 + 32;
    do
    {
      sub_2141EF6B8(v3, (uint64_t)v41);
      sub_2141EF6B8((uint64_t)v41, (uint64_t)v42);
      v9 = sub_21421C2FC((uint64_t)v42);
      v10 = sub_21421C308((uint64_t)v42);
      if (v9 != 1)
      {
        v21 = *(_QWORD *)(v10 + 16);
        v22 = *(_BYTE *)(v10 + 24);
        v23 = *(_QWORD *)(v10 + 40);
        v40 = *(_QWORD *)(v10 + 8);
        v24 = *(_QWORD *)(v10 + 48);
        v25 = *(char *)(v10 + 56);
        v26 = *(unsigned __int8 *)(v10 + 56);
        sub_214425880();
        sub_214425880();
        if (v25 < 0)
        {
          sub_214425880();
          sub_214425880();
          sub_214425898();
          sub_214425898();
          sub_21421C318(v41, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21420B7DC);
          sub_2141DD130(v40, v21, v22);
LABEL_24:
          swift_bridgeObjectRetain();
        }
        else
        {
          sub_214425880();
          if (v26 <= 1)
          {
            sub_214425880();
            sub_214425898();
            sub_21421C318(v41, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21420B7DC);
            sub_2141DD130(v40, v21, v22);
            goto LABEL_24;
          }
          sub_214425880();
          sub_21421C318(v41, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21420B7DC);
          sub_2141DD130(v40, v21, v22);
          swift_bridgeObjectRetain();
          sub_2141DD140(v23, v24, 2);
          sub_214424F14();
        }
        sub_214425880();
        sub_2141ED0BC(v40, v21, v22);
        swift_bridgeObjectRelease();
        v6 = v23;
        v7 = v24;
        v8 = v26;
        goto LABEL_6;
      }
      v32 = v3;
      v11 = *(_QWORD *)(v10 + 16);
      v12 = *(_BYTE *)(v10 + 24);
      v33 = *(_QWORD *)(v10 + 8);
      v34 = *(_QWORD *)(v10 + 48);
      v13 = *(char *)(v10 + 56);
      v14 = *(unsigned __int8 *)(v10 + 56);
      v36 = *(_QWORD *)(v10 + 40);
      v37 = *(_QWORD *)(v10 + 80);
      v31 = *(_QWORD *)(v10 + 88);
      v15 = *(_BYTE *)(v10 + 96);
      v38 = *(_QWORD *)(v10 + 120);
      v39 = *(_QWORD *)(v10 + 112);
      v16 = *(unsigned __int8 *)(v10 + 128);
      sub_214425880();
      sub_214425880();
      v30 = v14;
      v35 = v11;
      if (v13 < 0)
      {
        sub_214425880();
        sub_214425880();
        sub_214425898();
        sub_214425898();
        sub_21421C318(v41, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21420B7DC);
        sub_2141DD130(v33, v11, v12);
        swift_bridgeObjectRetain();
        sub_2141DD130(v37, v31, v15);
        swift_bridgeObjectRetain();
        sub_2141DD140(v39, v38, v16);
        v17 = v16;
        v18 = v33;
        v19 = v31;
        v20 = v15;
        v3 = v32;
        if ((v17 & 0x80) == 0)
          goto LABEL_17;
      }
      else
      {
        v17 = v16;
        sub_214425880();
        if (v14)
        {
          v18 = v33;
          v19 = v31;
          v3 = v32;
          if (v14 == 1)
          {
            sub_214425880();
            sub_214425898();
            sub_21421C318(v41, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21420B7DC);
            sub_2141DD130(v33, v35, v12);
            swift_bridgeObjectRetain();
            v20 = v15;
            sub_2141DD130(v37, v31, v15);
            swift_bridgeObjectRetain();
            sub_2141DD140(v39, v38, v17);
            if ((v17 & 0x80) == 0)
              goto LABEL_17;
          }
          else
          {
            sub_214425880();
            sub_21421C318(v41, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21420B7DC);
            sub_2141DD130(v33, v35, v12);
            swift_bridgeObjectRetain();
            v20 = v15;
            sub_2141DD130(v37, v31, v15);
            swift_bridgeObjectRetain();
            sub_2141DD140(v39, v38, v17);
            sub_2141DD140(v36, v34, 2);
            sub_214424F14();
            if ((v17 & 0x80) == 0)
            {
LABEL_17:
              sub_214425880();
              sub_214425880();
              if (v17 > 1)
                sub_214424F14();
              else
                sub_214425898();
              v4 = v30;
              v5 = v35;
              goto LABEL_5;
            }
          }
        }
        else
        {
          sub_214425880();
          sub_214425898();
          sub_21421C318(v41, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21420B7DC);
          v18 = v33;
          sub_2141DD130(v33, v11, v12);
          swift_bridgeObjectRetain();
          v19 = v31;
          v20 = v15;
          sub_2141DD130(v37, v31, v15);
          swift_bridgeObjectRetain();
          sub_2141DD140(v39, v38, v17);
          v3 = v32;
          if ((v17 & 0x80) == 0)
            goto LABEL_17;
        }
      }
      sub_214425880();
      sub_214425880();
      sub_214425898();
      sub_214425898();
      v4 = v30;
      v18 = v33;
      v5 = v35;
LABEL_5:
      sub_2141ED0BC(v18, v5, v12);
      swift_bridgeObjectRelease();
      sub_2141EF1B0(v36, v34, v4);
      sub_2141ED0BC(v37, v19, v20);
      swift_bridgeObjectRelease();
      v7 = v38;
      v6 = v39;
      v8 = v17;
LABEL_6:
      sub_2141EF1B0(v6, v7, v8);
      sub_21421C318(v41, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141EF5D4);
      v3 += 152;
      --v2;
    }
    while (v2);
  }
  v27 = sub_2144258B0();
  return sub_214338830(v29, v27);
}

unint64_t sub_214337634(uint64_t a1)
{
  uint64_t v2;
  _BYTE v4[72];

  sub_214425874();
  sub_2142FFD88((uint64_t)v4);
  v2 = sub_2144258B0();
  return sub_214339934(a1, v2);
}

unint64_t sub_21433768C(uint64_t a1)
{
  uint64_t v2;
  _BYTE v4[72];

  sub_214425874();
  sub_21420F564((uint64_t)v4, *(_QWORD *)(a1 + 32));
  sub_21442588C();
  v2 = sub_2144258B0();
  return sub_21433A70C(a1, v2);
}

unint64_t sub_2143376F4(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(unsigned __int8 *)(v7 + result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(unsigned __int8 *)(v7 + result) == a1)
          break;
      }
    }
  }
  return result;
}

unint64_t sub_214337794(double *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  double *v11;
  BOOL v12;
  unsigned int v13;
  double v14;
  double v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  char v26;
  double v30;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  v5 = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
  {
    v7 = ~v4;
    v8 = *(unsigned __int8 *)a1;
    v9 = *(_QWORD *)(v2 + 48);
    v10 = *((unsigned __int8 *)a1 + 1);
    do
    {
      v11 = (double *)(v9 + 56 * v5);
      v12 = *(unsigned __int8 *)v11 == v8 && *((unsigned __int8 *)v11 + 1) == v10;
      if (!v12 || *((unsigned __int8 *)v11 + 2) != *((unsigned __int8 *)a1 + 2))
        goto LABEL_4;
      v13 = *((unsigned __int8 *)v11 + 24);
      v14 = v11[4];
      v15 = v11[5];
      v16 = *((unsigned __int8 *)v11 + 48);
      v17 = *((unsigned __int8 *)a1 + 24);
      if (v13 <= 0xFB)
      {
        if (v17 > 0xFB)
          goto LABEL_4;
        v21 = v11[1];
        v22 = v11[2];
        v23 = a1[1];
        v24 = a1[2];
        if ((v13 & 0x80) != 0)
        {
          if ((v17 & 0x80) == 0)
            goto LABEL_4;
          if ((v13 & 1) != 0)
          {
            if ((v17 & 1) == 0)
              goto LABEL_4;
          }
          else if ((v17 & 1) != 0)
          {
            goto LABEL_4;
          }
          if (v21 != v23 || v22 != v24)
            goto LABEL_4;
        }
        else
        {
          if ((v17 & 0x80) != 0)
            goto LABEL_4;
          if (*((_BYTE *)v11 + 24))
          {
            if (v13 != 1)
            {
              if (v17 != 2)
                goto LABEL_4;
              if (*(_QWORD *)&v21 != *(_QWORD *)&v23 || *(_QWORD *)&v22 != *(_QWORD *)&v24)
              {
                v30 = v11[4];
                v26 = sub_214425790();
                v14 = v30;
                if ((v26 & 1) == 0)
                  goto LABEL_4;
              }
              goto LABEL_13;
            }
            if (v17 != 1)
              goto LABEL_4;
          }
          else if (*((_BYTE *)a1 + 24))
          {
            goto LABEL_4;
          }
          if (v21 != v23)
            goto LABEL_4;
        }
      }
      else if (v17 <= 0xFB)
      {
        goto LABEL_4;
      }
LABEL_13:
      v18 = *((unsigned __int8 *)a1 + 48);
      if (v16 > 0xFB)
      {
        if (v18 > 0xFB)
          return v5;
        goto LABEL_4;
      }
      if (v18 <= 0xFB)
      {
        v20 = a1[4];
        v19 = a1[5];
        if ((v16 & 0x80) != 0)
        {
          if ((v18 & 0x80) != 0)
          {
            if ((v16 & 1) != 0)
            {
              if ((v18 & 1) == 0)
              {
LABEL_66:
                sub_2141DD140(*((_QWORD *)a1 + 4), *((_QWORD *)a1 + 5), v18);
                goto LABEL_4;
              }
            }
            else if ((v18 & 1) != 0)
            {
              goto LABEL_66;
            }
            if (v14 == v20 && v15 == v19)
            {
              sub_2141DD140(*((_QWORD *)a1 + 4), *((_QWORD *)a1 + 5), v18);
              return v5;
            }
            goto LABEL_66;
          }
        }
        else
        {
          if ((v18 & 0x80) != 0)
            goto LABEL_4;
          if (!v16)
          {
            if (*((_BYTE *)a1 + 48))
              goto LABEL_4;
            goto LABEL_54;
          }
          if (v16 == 1)
          {
            if (v18 != 1)
              goto LABEL_4;
LABEL_54:
            if (v14 == v20)
              return v5;
            goto LABEL_4;
          }
          if (v18 == 2
            && (*(_QWORD *)&v14 == *(_QWORD *)&v20 && *(_QWORD *)&v15 == *(_QWORD *)&v19 || (sub_214425790() & 1) != 0))
          {
            return v5;
          }
        }
      }
LABEL_4:
      v5 = (v5 + 1) & v7;
    }
    while (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0);
  }
  return v5;
}

unint64_t sub_214337A14(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v15;

  v5 = type metadata accessor for CalendarCache.Key(0);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = -1 << *(_BYTE *)(v2 + 32);
  v10 = a2 & ~v9;
  if (((*(_QWORD *)(v2 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = ~v9;
    v12 = *(_QWORD *)(v6 + 72);
    do
    {
      sub_2141FDEA0(*(_QWORD *)(v2 + 48) + v12 * v10, (uint64_t)v8, type metadata accessor for CalendarCache.Key);
      v13 = sub_2142C9530((uint64_t)v8, a1);
      sub_2141DD370((uint64_t)v8, type metadata accessor for CalendarCache.Key);
      if ((v13 & 1) != 0)
        break;
      v10 = (v10 + 1) & v11;
    }
    while (((*(_QWORD *)(v2 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
  }
  return v10;
}

unint64_t sub_214337B24(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v6 = ~v3;
    v7 = a1 + 1;
    while (1)
    {
      sub_2141ED7E0(*(_QWORD *)(v2 + 48) + 48 * v4, (uint64_t)&v9);
      if (v9 == *a1 && (MEMORY[0x2199CCD7C](&v10, v7) & 1) != 0)
        break;
      sub_2141ED82C((uint64_t)&v9);
      v4 = (v4 + 1) & v6;
      if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) == 0)
        return v4;
    }
    sub_2141ED82C((uint64_t)&v9);
  }
  return v4;
}

unint64_t sub_214337C0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (sub_214425790() & 1) == 0)
    {
      v12 = ~v5;
      do
      {
        v6 = (v6 + 1) & v12;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v13 = (_QWORD *)(v9 + 16 * v6);
        v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (sub_214425790() & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_214337CEC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(_QWORD *)(v7 + 8 * result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(_QWORD *)(v7 + 8 * result) == a1)
          break;
      }
    }
  }
  return result;
}

unint64_t sub_214337D88(uint64_t a1, double a2, double a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  double *v7;
  double v8;
  BOOL v9;

  v4 = -1 << *(_BYTE *)(v3 + 32);
  result = a1 & ~v4;
  if (((*(_QWORD *)(v3 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v6 = ~v4;
    do
    {
      v7 = (double *)(*(_QWORD *)(v3 + 48) + 16 * result);
      v8 = v7[1];
      v9 = *v7 == a2;
      if (v8 == a3 && v9)
        break;
      result = (result + 1) & v6;
    }
    while (((*(_QWORD *)(v3 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0);
  }
  return result;
}

unint64_t sub_214337DFC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  double v10;
  uint64_t v11;
  double v12;
  double v13;
  unsigned int v14;
  unsigned __int8 v15;
  double v16;
  double v17;
  unsigned int v18;
  BOOL v20;
  double v24;
  double v25;
  unsigned int v26;
  __n128 v28;
  uint64_t v29;
  __n128 v30;
  __n128 v31;
  char v32;
  __n128 v33;
  char v34;
  __n128 v35;
  char v36;
  __n128 v37;
  uint64_t v38;
  double v39;
  double v40;
  unsigned __int8 v41;
  __n128 v42[2];

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  v5 = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
  {
    v6 = ~v4;
    v7 = *(_QWORD *)(v2 + 48);
    do
    {
      v8 = v7 + 48 * v5;
      v9 = *(double *)v8;
      v10 = *(double *)(v8 + 8);
      v11 = *(_QWORD *)(v8 + 16);
      if ((v11 & 0x8000000000000000) == 0)
      {
        sub_2142AB54C(a1, (uint64_t)&v28);
        if (v29 < 0)
        {
          v29 &= ~0x8000000000000000;
          goto LABEL_4;
        }
        sub_21421CFC8(&v28, &v30);
        if ((_BYTE)v11)
        {
          if (v11 != 1)
          {
            sub_21421CFC8(&v30, &v35);
            if (v36 != 2)
              goto LABEL_4;
            if (*(_QWORD *)&v9 == v35.n128_u64[0] && *(_QWORD *)&v10 == v35.n128_u64[1])
              return v5;
            goto LABEL_27;
          }
          sub_21421CFC8(&v30, &v33);
          if (v34 == 1 && v33.n128_f64[0] == v9)
            return v5;
        }
        else
        {
          sub_21421CFC8(&v30, &v31);
          if (!v32 && v31.n128_f64[0] == v9)
            return v5;
        }
        goto LABEL_4;
      }
      v12 = *(double *)(v8 + 24);
      v13 = *(double *)(v8 + 32);
      v14 = *(unsigned __int8 *)(v8 + 40);
      sub_2142AB54C(a1, (uint64_t)&v37);
      v15 = v38;
      if ((v38 & 0x8000000000000000) == 0)
      {
        sub_21421CFC8(&v37, v42);
        goto LABEL_4;
      }
      v26 = v14;
      v24 = v13;
      v25 = v12;
      v38 &= ~0x8000000000000000;
      v16 = v39;
      v17 = v40;
      v18 = v41;
      if (v11 <= 0xFBu)
      {
        if (v15 > 0xFBu)
          goto LABEL_4;
        if ((v11 & 0x80) != 0)
        {
          if ((v15 & 0x80) == 0)
            goto LABEL_4;
          if ((v11 & 1) != 0)
          {
            if ((v15 & 1) == 0)
              goto LABEL_4;
          }
          else if ((v15 & 1) != 0)
          {
            goto LABEL_4;
          }
          if (v9 != v37.n128_f64[0] || v10 != v37.n128_f64[1])
            goto LABEL_4;
        }
        else
        {
          if ((v15 & 0x80) != 0)
            goto LABEL_4;
          if ((_BYTE)v11)
          {
            if (v11 != 1)
            {
              if (v15 != 2)
                goto LABEL_4;
              v20 = *(_QWORD *)&v9 == v37.n128_u64[0] && *(_QWORD *)&v10 == v37.n128_u64[1];
              if (!v20 && (sub_214425790() & 1) == 0)
                goto LABEL_4;
              goto LABEL_16;
            }
            if (v15 != 1)
              goto LABEL_4;
          }
          else if (v15)
          {
            goto LABEL_4;
          }
          if (v9 != v37.n128_f64[0])
            goto LABEL_4;
        }
      }
      else if (v15 <= 0xFBu)
      {
        goto LABEL_4;
      }
LABEL_16:
      if (v26 > 0xFB)
      {
        if (v18 > 0xFB)
          return v5;
        goto LABEL_4;
      }
      if (v18 > 0xFB)
        goto LABEL_4;
      if ((v26 & 0x80) != 0)
      {
        if ((v18 & 0x80) != 0)
        {
          if ((v26 & 1) != 0)
          {
            if ((v18 & 1) == 0)
              goto LABEL_4;
          }
          else if ((v18 & 1) != 0)
          {
            goto LABEL_4;
          }
          if (v25 == v16 && v24 == v17)
            return v5;
        }
      }
      else
      {
        if ((v18 & 0x80) != 0)
          goto LABEL_4;
        if (v26)
        {
          if (v26 != 1)
          {
            if (v18 != 2)
              goto LABEL_4;
            if (*(_QWORD *)&v25 == *(_QWORD *)&v16 && *(_QWORD *)&v24 == *(_QWORD *)&v17)
              return v5;
LABEL_27:
            if ((sub_214425790() & 1) != 0)
              return v5;
            goto LABEL_4;
          }
          if (v18 != 1)
            goto LABEL_4;
        }
        else if (v18)
        {
          goto LABEL_4;
        }
        if (v25 == v16)
          return v5;
      }
LABEL_4:
      v5 = (v5 + 1) & v6;
    }
    while (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0);
  }
  return v5;
}

unint64_t sub_214338130(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t i;
  uint64_t v7;
  uint64_t v8;
  _BYTE v10[72];
  _BYTE v11[72];

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  i = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    sub_2142AB498(v7 + 72 * i, (uint64_t)v11);
    if ((sub_214390B0C((uint64_t)v11, a1) & 1) == 0)
    {
      v8 = ~v4;
      for (i = (i + 1) & v8; ((*(_QWORD *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v8)
      {
        sub_2142AB498(v7 + 72 * i, (uint64_t)v10);
        if ((sub_214390B0C((uint64_t)v10, a1) & 1) != 0)
          break;
      }
    }
  }
  return i;
}

unint64_t sub_214338224(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  v5 = -1 << *(_BYTE *)(v3 + 32);
  result = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = ~v5;
    do
    {
      v8 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * result);
      v10 = *v8;
      v9 = v8[1];
      if (v10 == a1 && v9 == a2)
        break;
      result = (result + 1) & v7;
    }
    while (((*(_QWORD *)(v3 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0);
  }
  return result;
}

unint64_t sub_2143382A0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, unint64_t, uint64_t);
  char v14;
  _QWORD v16[2];

  v3 = v2;
  v16[1] = a1;
  v5 = sub_214423C54();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = -1 << *(_BYTE *)(v3 + 32);
  v10 = a2 & ~v9;
  if (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = ~v9;
    v12 = *(_QWORD *)(v6 + 72);
    v13 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    do
    {
      v13(v8, *(_QWORD *)(v3 + 48) + v12 * v10, v5);
      sub_21433AAE4(&qword_253F13D80, MEMORY[0x24BDCF308]);
      v14 = sub_214424ED8();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      if ((v14 & 1) != 0)
        break;
      v10 = (v10 + 1) & v11;
    }
    while (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
  }
  return v10;
}

unint64_t sub_2143383D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  _QWORD *v13;
  char v14;
  char v15;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[2];
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  v26 = v2 + 64;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v24 = ~v3;
    v25 = a1;
    do
    {
      v5 = (uint64_t *)(*(_QWORD *)(v2 + 48) + (v4 << 6));
      v6 = *v5;
      v7 = v5[1];
      v8 = v5[2];
      v28 = v5[3];
      v9 = v5[4];
      v10 = v5[5];
      v11 = v5[6];
      if (v11 < 0)
      {
        sub_21421C19C(a1, (uint64_t)v31);
        v15 = v35;
        if (v35 < 0)
        {
          v35 &= ~0x8000000000000000;
          v20 = v31[0];
          v21 = v32;
          v23 = v31[1];
          v18 = v33;
          v19 = v34;
          sub_21421C1D8(v6, v7, v8, v28, v9, v10, v11);
          sub_2141DD130(v6, v7, v8 & 1);
          swift_bridgeObjectRetain();
          sub_2141DD130(v20, v23, v21);
          swift_bridgeObjectRetain();
          sub_2141DD130(v9, v10, v11 & 1);
          swift_bridgeObjectRetain();
          sub_2141DD130(v18, v19, v15 & 1);
          swift_bridgeObjectRetain();
          if ((sub_2144247F4() & 1) != 0)
          {
            v17 = sub_2144247F4();
            sub_2141ED0BC(v18, v19, v15 & 1);
            swift_bridgeObjectRelease();
            sub_2141ED0BC(v9, v10, v11 & 1);
            swift_bridgeObjectRelease();
            sub_2141ED0BC(v20, v23, v21);
            swift_bridgeObjectRelease();
            sub_2141ED0BC(v6, v7, v8 & 1);
            swift_bridgeObjectRelease();
            sub_21421C24C(v6, v7, v8, v28, v9, v10, v11);
            v2 = v22;
            if ((v17 & 1) != 0)
              return v4;
          }
          else
          {
            sub_2141ED0BC(v18, v19, v15 & 1);
            swift_bridgeObjectRelease();
            sub_2141ED0BC(v9, v10, v11 & 1);
            swift_bridgeObjectRelease();
            sub_2141ED0BC(v20, v23, v21);
            swift_bridgeObjectRelease();
            sub_2141ED0BC(v6, v7, v8 & 1);
            swift_bridgeObjectRelease();
            sub_21421C24C(v6, v7, v8, v28, v9, v10, v11);
            v2 = v22;
          }
        }
      }
      else
      {
        v12 = v5[2];
        v13 = (_QWORD *)a1;
        sub_21421C19C(a1, (uint64_t)&v29);
        if (v30 < 0)
        {
          v30 &= ~0x8000000000000000;
        }
        else
        {
          v27 = v10;
          sub_21421C1D8(v6, v7, v12, v28, v9, v10, v11);
          sub_21421C2C0(v13, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21421C1D8);
          v2 = v22;
          v14 = sub_2144247F4();
          sub_21421C2C0(v13, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21421C24C);
          sub_21421C24C(v6, v7, v12, v28, v9, v27, v11);
          if ((v14 & 1) != 0)
            return v4;
        }
      }
      a1 = v25;
      v4 = (v4 + 1) & v24;
    }
    while (((*(_QWORD *)(v26 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

unint64_t sub_214338830(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  int v17;
  unsigned __int8 *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  int v27;
  char v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 *v34;
  int v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  unsigned __int8 *v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  int v44;
  uint64_t v45;
  double v46;
  double v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  int v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  char v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  int v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  int v98;
  int v99;
  uint64_t v100;
  int v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char v114;
  int v115;
  _BYTE v116[152];
  _QWORD v117[19];
  _QWORD v118[19];
  _BYTE v119[160];

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = ~v5;
    v8 = *(_QWORD *)(a1 + 16);
    v78 = v8 - 1;
    v83 = a1;
    v75 = ~v5;
    v76 = v2 + 64;
    v74 = v8;
    while (1)
    {
      v13 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * result);
      if (*(_QWORD *)(v13 + 16) == v8)
        break;
LABEL_10:
      result = (result + 1) & v7;
      if (((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) == 0)
        return result;
    }
    if (v8 && v13 != a1)
    {
      v79 = result;
      swift_bridgeObjectRetain();
      v14 = v78;
      v15 = 32;
      v85 = v13;
      while (1)
      {
        sub_2141EF6B8(v13 + v15, (uint64_t)v117);
        sub_2141EF6B8(a1 + v15, (uint64_t)v118);
        sub_2141EF6B8((uint64_t)v117, (uint64_t)v119);
        v104 = v15;
        v105 = v14;
        if (sub_21421C2FC((uint64_t)v119) != 1)
          break;
        v16 = (unsigned __int8 *)sub_21421C308((uint64_t)v119);
        sub_2141EF6B8((uint64_t)v118, (uint64_t)v116);
        v17 = sub_21421C2FC((uint64_t)v116);
        v18 = (unsigned __int8 *)sub_21421C308((uint64_t)v116);
        if (v17 != 1 || *v16 != *v18)
          goto LABEL_8;
        v20 = *((_QWORD *)v16 + 1);
        v19 = *((_QWORD *)v16 + 2);
        v21 = v16[24];
        v89 = v21;
        v22 = *((_QWORD *)v16 + 6);
        v113 = *((uint64_t *)v16 + 5);
        v23 = v16[56];
        v87 = v23;
        v24 = *((_QWORD *)v16 + 10);
        v25 = *((_QWORD *)v16 + 11);
        v26 = v16[96];
        v100 = *((uint64_t *)v16 + 14);
        v88 = *((uint64_t *)v16 + 15);
        v27 = v16[128];
        v99 = (char)v27;
        v90 = *((_QWORD *)v18 + 1);
        v91 = *((_QWORD *)v18 + 2);
        v92 = v18[24];
        v95 = v24;
        v97 = *((uint64_t *)v18 + 5);
        v103 = *((_QWORD *)v18 + 6);
        v115 = (char)v18[56];
        v106 = *((_QWORD *)v18 + 10);
        v108 = *((_QWORD *)v18 + 11);
        v110 = v18[96];
        v94 = *((uint64_t *)v18 + 14);
        v93 = *((uint64_t *)v18 + 15);
        v101 = (char)v18[128];
        sub_21421C318(v118, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21420B7DC);
        sub_21421C318(v117, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21420B7DC);
        sub_2141DD130(v20, v19, v21);
        swift_bridgeObjectRetain();
        v86 = v22;
        sub_2141DD140(v113, v22, v23);
        v84 = v25;
        v82 = v26;
        sub_2141DD130(v95, v25, v26);
        swift_bridgeObjectRetain();
        v80 = v27;
        sub_2141DD140(v100, v88, v27);
        sub_2141DD130(v90, v91, v92);
        swift_bridgeObjectRetain();
        sub_2141DD140(v97, v103, v115);
        sub_2141DD130(v106, v108, v110);
        swift_bridgeObjectRetain();
        sub_2141DD140(v94, v93, v101);
        v81 = v20;
        if ((sub_2144247F4() & 1) == 0)
        {
          v28 = v23;
LABEL_98:
          v63 = v20;
          v64 = v88;
          v65 = v100;
          v66 = v26;
          v67 = v84;
          v68 = v95;
          goto LABEL_121;
        }
        v28 = v23;
        if ((char)v23 < 0)
        {
          if ((v115 & 0x80000000) == 0)
            goto LABEL_98;
          v29 = v95;
          if ((v23 & 1) != 0)
          {
            v30 = v26;
            v31 = v25;
            v33 = v103;
            v32 = v97;
            if ((v115 & 1) == 0)
              goto LABEL_119;
          }
          else
          {
            v30 = v26;
            v31 = v25;
            v33 = v103;
            v32 = v97;
            if ((v115 & 1) != 0)
              goto LABEL_119;
          }
          if (*(double *)&v113 != *(double *)&v32 || *(double *)&v86 != *(double *)&v33)
          {
            v63 = v20;
            v64 = v88;
            v65 = v100;
            v28 = v87;
LABEL_120:
            v68 = v29;
            v66 = v30;
            v67 = v31;
LABEL_121:
            sub_2141ED0BC(v106, v108, v110);
            swift_bridgeObjectRelease();
            sub_2141EF1B0(v94, v93, v101);
            sub_2141ED0BC(v90, v91, v92);
            swift_bridgeObjectRelease();
            sub_2141EF1B0(v97, v103, v115);
            sub_2141ED0BC(v68, v67, v66);
            swift_bridgeObjectRelease();
            sub_2141EF1B0(v65, v64, v99);
            sub_2141ED0BC(v63, v19, v89);
            swift_bridgeObjectRelease();
            sub_2141EF1B0(v113, v86, v28);
LABEL_122:
            sub_21421C318(v118, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141EF5D4);
            sub_21421C318(v117, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141EF5D4);
            swift_bridgeObjectRelease();
            result = v79;
            v2 = v77;
            a1 = v83;
LABEL_9:
            v7 = v75;
            v4 = v76;
            v8 = v74;
            goto LABEL_10;
          }
        }
        else
        {
          if (v115 < 0)
            goto LABEL_98;
          v29 = v95;
          if (v23)
          {
            v30 = v26;
            v31 = v25;
            v32 = v97;
            if (v23 == 1)
            {
              if (v115 != 1)
              {
                v28 = 1;
                goto LABEL_119;
              }
              v33 = v103;
              if (*(double *)&v113 != *(double *)&v97)
              {
                v28 = 1;
                v72 = 1;
                goto LABEL_118;
              }
            }
            else
            {
              if (v115 != 2)
              {
                v28 = 2;
                goto LABEL_119;
              }
              v33 = v103;
              if (v113 != v97 || v86 != v103)
              {
                v52 = sub_214425790();
                v31 = v25;
                v30 = v26;
                v29 = v95;
                if ((v52 & 1) == 0)
                {
                  v28 = 2;
                  v72 = 2;
LABEL_118:
                  LOBYTE(v115) = v72;
LABEL_119:
                  v63 = v20;
                  v64 = v88;
                  v65 = v100;
                  goto LABEL_120;
                }
              }
            }
          }
          else
          {
            v30 = v26;
            v31 = v25;
            v32 = v97;
            if (v115)
            {
              v28 = 0;
              goto LABEL_119;
            }
            v33 = v103;
            if (*(double *)&v113 != *(double *)&v97)
            {
              v28 = 0;
              LOBYTE(v115) = 0;
              goto LABEL_119;
            }
          }
        }
        v53 = v29;
        v54 = v31;
        v55 = v30;
        if ((sub_2144247F4() & 1) == 0)
          goto LABEL_3;
        if (v99 < 0)
        {
          if ((v101 & 0x80000000) == 0)
          {
LABEL_3:
            sub_2141ED0BC(v106, v108, v110);
            swift_bridgeObjectRelease();
            sub_2141EF1B0(v94, v93, v101);
            a1 = v83;
            v9 = v90;
            v10 = v92;
            v11 = v91;
            goto LABEL_4;
          }
          sub_2141ED0BC(v106, v108, v110);
          swift_bridgeObjectRelease();
          sub_2141ED0BC(v90, v91, v92);
          swift_bridgeObjectRelease();
          sub_2141EF1B0(v32, v33, v115);
          sub_2141ED0BC(v53, v54, v55);
          if ((v99 & 1) != 0)
          {
            if ((v101 & 1) == 0)
            {
LABEL_104:
              a1 = v83;
              goto LABEL_5;
            }
          }
          else if ((v101 & 1) != 0)
          {
            goto LABEL_104;
          }
          a1 = v83;
          v13 = v85;
          v12 = v88;
          if (*(double *)&v100 != *(double *)&v94)
            goto LABEL_6;
          v56 = v100;
          if (*(double *)&v88 != *(double *)&v93)
            goto LABEL_6;
        }
        else
        {
          v56 = v100;
          if (v101 < 0)
          {
            sub_2141ED0BC(v106, v108, v110);
            swift_bridgeObjectRelease();
            goto LABEL_117;
          }
          if (v80)
          {
            if (v80 == 1)
            {
              if (v101 != 1)
              {
                sub_2141ED0BC(v106, v108, v110);
                swift_bridgeObjectRelease();
                sub_2141EF1B0(v94, v93, v101);
                v73 = 1;
                goto LABEL_116;
              }
              sub_2141ED0BC(v106, v108, v110);
              swift_bridgeObjectRelease();
              sub_2141EF1B0(v94, v93, 1);
              sub_2141ED0BC(v90, v91, v92);
              swift_bridgeObjectRelease();
              sub_2141EF1B0(v32, v103, v115);
              sub_2141ED0BC(v53, v54, v55);
              a1 = v83;
              v13 = v85;
              v12 = v88;
              if (*(double *)&v100 != *(double *)&v94)
              {
                LOBYTE(v99) = 1;
                goto LABEL_6;
              }
            }
            else
            {
              if (v101 != 2)
              {
                sub_2141ED0BC(v106, v108, v110);
                swift_bridgeObjectRelease();
                sub_2141EF1B0(v94, v93, v101);
                v73 = 2;
LABEL_116:
                LOBYTE(v99) = v73;
LABEL_117:
                a1 = v83;
                v9 = v90;
                v10 = v92;
                v11 = v91;
                v33 = v103;
LABEL_4:
                sub_2141ED0BC(v9, v11, v10);
                swift_bridgeObjectRelease();
                sub_2141EF1B0(v97, v33, v115);
                sub_2141ED0BC(v95, v25, v82);
LABEL_5:
                v12 = v88;
                goto LABEL_6;
              }
              v12 = v88;
              if (v100 == v94 && v88 == v93)
              {
                sub_2141ED0BC(v106, v108, v110);
                swift_bridgeObjectRelease();
                sub_2141EF1B0(v100, v88, 2);
                sub_2141ED0BC(v90, v91, v92);
                swift_bridgeObjectRelease();
                sub_2141EF1B0(v32, v103, v115);
                sub_2141ED0BC(v53, v54, v55);
                a1 = v83;
                v13 = v85;
              }
              else
              {
                v62 = sub_214425790();
                sub_2141ED0BC(v106, v108, v110);
                swift_bridgeObjectRelease();
                sub_2141EF1B0(v94, v93, 2);
                sub_2141ED0BC(v90, v91, v92);
                swift_bridgeObjectRelease();
                sub_2141EF1B0(v32, v103, v115);
                sub_2141ED0BC(v53, v54, v55);
                a1 = v83;
                v13 = v85;
                if ((v62 & 1) == 0)
                {
                  LOBYTE(v99) = 2;
LABEL_6:
                  swift_bridgeObjectRelease();
                  sub_2141EF1B0(v100, v12, v99);
                  sub_2141ED0BC(v81, v19, v21);
                  swift_bridgeObjectRelease();
                  sub_2141EF1B0(v113, v86, v87);
LABEL_7:
                  sub_21421C318(v118, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141EF5D4);
                  sub_21421C318(v117, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141EF5D4);
LABEL_8:
                  swift_bridgeObjectRelease();
                  result = v79;
                  v2 = v77;
                  goto LABEL_9;
                }
              }
            }
          }
          else
          {
            if (v101)
            {
              sub_2141ED0BC(v106, v108, v110);
              swift_bridgeObjectRelease();
              sub_2141EF1B0(v94, v93, v101);
              LOBYTE(v99) = 0;
              goto LABEL_117;
            }
            sub_2141ED0BC(v106, v108, v110);
            swift_bridgeObjectRelease();
            sub_2141EF1B0(v94, v93, 0);
            sub_2141ED0BC(v90, v91, v92);
            swift_bridgeObjectRelease();
            sub_2141EF1B0(v32, v103, v115);
            sub_2141ED0BC(v53, v54, v55);
            a1 = v83;
            v13 = v85;
            v12 = v88;
            if (*(double *)&v100 != *(double *)&v94)
            {
              LOBYTE(v99) = 0;
              goto LABEL_6;
            }
          }
        }
        swift_bridgeObjectRelease();
        sub_2141EF1B0(v56, v12, v99);
        sub_2141ED0BC(v81, v19, v21);
        swift_bridgeObjectRelease();
        sub_2141EF1B0(v113, v86, v87);
        sub_21421C318(v118, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141EF5D4);
        sub_21421C318(v117, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141EF5D4);
        v61 = v104;
        v60 = v105;
        if (!v105)
          goto LABEL_125;
LABEL_96:
        v15 = v61 + 152;
        v14 = v60 - 1;
      }
      v34 = (unsigned __int8 *)sub_21421C308((uint64_t)v119);
      v35 = *v34;
      v111 = *((_QWORD *)v34 + 1);
      v112 = *((_QWORD *)v34 + 2);
      v114 = v34[24];
      v36 = *((uint64_t *)v34 + 5);
      v109 = *((uint64_t *)v34 + 6);
      v37 = v34[56];
      v38 = v34[80];
      sub_2141EF6B8((uint64_t)v118, (uint64_t)v116);
      v39 = sub_21421C2FC((uint64_t)v116);
      v40 = (unsigned __int8 *)sub_21421C308((uint64_t)v116);
      if (v39 == 1 || v35 != *v40)
        goto LABEL_8;
      v98 = v38;
      v41 = *((_QWORD *)v40 + 1);
      v42 = *((_QWORD *)v40 + 2);
      v43 = v40[24];
      v107 = *((uint64_t *)v40 + 5);
      v44 = v37;
      v45 = *((uint64_t *)v40 + 6);
      v102 = (char)v40[56];
      v96 = v40[80];
      sub_21421C318(v118, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21420B7DC);
      sub_21421C318(v117, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21420B7DC);
      sub_2141DD130(v111, v112, v114);
      swift_bridgeObjectRetain();
      sub_2141DD140(v36, v109, v44);
      sub_2141DD130(v41, v42, v43);
      swift_bridgeObjectRetain();
      sub_2141DD140(v107, v45, v102);
      if ((sub_2144247F4() & 1) == 0)
      {
        sub_2141ED0BC(v41, v42, v43);
        swift_bridgeObjectRelease();
        sub_2141EF1B0(v107, v45, v102);
        sub_2141ED0BC(v111, v112, v114);
        swift_bridgeObjectRelease();
        v69 = v36;
        v70 = v109;
        v71 = v44;
        goto LABEL_111;
      }
      if ((v44 & 0x80) != 0)
      {
        if ((v102 & 0x80000000) == 0)
        {
          sub_2141ED0BC(v41, v42, v43);
          swift_bridgeObjectRelease();
          sub_2141EF1B0(v107, v45, v102);
          sub_2141ED0BC(v111, v112, v114);
          swift_bridgeObjectRelease();
          goto LABEL_112;
        }
        sub_2141ED0BC(v41, v42, v43);
        swift_bridgeObjectRelease();
        sub_2141ED0BC(v111, v112, v114);
        swift_bridgeObjectRelease();
        if ((v44 & 1) != 0)
        {
          v51 = v98;
          if ((v102 & 1) == 0)
            goto LABEL_122;
        }
        else
        {
          v51 = v98;
          if ((v102 & 1) != 0)
            goto LABEL_122;
        }
        if (*(double *)&v36 != *(double *)&v107)
          goto LABEL_122;
        a1 = v83;
        v13 = v85;
        if (*(double *)&v109 != *(double *)&v45)
          goto LABEL_7;
        goto LABEL_91;
      }
      if (v102 < 0)
      {
        sub_2141ED0BC(v41, v42, v43);
        swift_bridgeObjectRelease();
        sub_2141ED0BC(v111, v112, v114);
        swift_bridgeObjectRelease();
        v69 = v36;
        v70 = v109;
        v71 = v44;
        goto LABEL_111;
      }
      if (v44)
      {
        if (v44 != 1)
        {
          if (v102 != 2)
          {
            sub_2141ED0BC(v41, v42, v43);
            swift_bridgeObjectRelease();
            sub_2141EF1B0(v107, v45, v102);
            sub_2141ED0BC(v111, v112, v114);
            swift_bridgeObjectRelease();
            v69 = v36;
            v70 = v109;
            v71 = 2;
LABEL_111:
            sub_2141EF1B0(v69, v70, v71);
LABEL_112:
            a1 = v83;
            goto LABEL_7;
          }
          if (v36 == v107 && v109 == v45)
          {
            sub_2141ED0BC(v41, v42, v43);
            swift_bridgeObjectRelease();
            sub_2141EF1B0(v36, v109, 2);
            sub_2141ED0BC(v111, v112, v114);
            swift_bridgeObjectRelease();
            sub_2141EF1B0(v36, v109, 2);
            a1 = v83;
            v13 = v85;
            v51 = v98;
          }
          else
          {
            v57 = sub_214425790();
            v58 = v41;
            v59 = v57;
            sub_2141ED0BC(v58, v42, v43);
            swift_bridgeObjectRelease();
            sub_2141EF1B0(v107, v45, 2);
            sub_2141ED0BC(v111, v112, v114);
            swift_bridgeObjectRelease();
            sub_2141EF1B0(v36, v109, 2);
            a1 = v83;
            v13 = v85;
            v51 = v98;
            if ((v59 & 1) == 0)
              goto LABEL_7;
          }
          goto LABEL_91;
        }
        if (v102 != 1)
        {
          sub_2141ED0BC(v41, v42, v43);
          swift_bridgeObjectRelease();
          sub_2141EF1B0(v107, v45, v102);
          sub_2141ED0BC(v111, v112, v114);
          swift_bridgeObjectRelease();
          v69 = v36;
          v70 = v109;
          v71 = 1;
          goto LABEL_111;
        }
        v46 = *(double *)&v36;
        v47 = *(double *)&v107;
        sub_2141ED0BC(v41, v42, v43);
        swift_bridgeObjectRelease();
        sub_2141EF1B0(v107, v45, 1);
        sub_2141ED0BC(v111, v112, v114);
        swift_bridgeObjectRelease();
        v48 = v36;
        v49 = v109;
        v50 = 1;
      }
      else
      {
        if (v102)
        {
          sub_2141ED0BC(v41, v42, v43);
          swift_bridgeObjectRelease();
          sub_2141EF1B0(v107, v45, v102);
          sub_2141ED0BC(v111, v112, v114);
          swift_bridgeObjectRelease();
          v69 = v36;
          v70 = v109;
          v71 = 0;
          goto LABEL_111;
        }
        v46 = *(double *)&v36;
        v47 = *(double *)&v107;
        sub_2141ED0BC(v41, v42, v43);
        swift_bridgeObjectRelease();
        sub_2141EF1B0(v107, v45, 0);
        sub_2141ED0BC(v111, v112, v114);
        swift_bridgeObjectRelease();
        v48 = v36;
        v49 = v109;
        v50 = 0;
      }
      sub_2141EF1B0(v48, v49, v50);
      a1 = v83;
      v13 = v85;
      v51 = v98;
      if (v46 != v47)
        goto LABEL_7;
LABEL_91:
      sub_21421C318(v118, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141EF5D4);
      sub_21421C318(v117, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141EF5D4);
      if (v51 != v96)
        goto LABEL_8;
      v61 = v104;
      v60 = v105;
      if (!v105)
      {
LABEL_125:
        swift_bridgeObjectRelease();
        return v79;
      }
      goto LABEL_96;
    }
  }
  return result;
}

unint64_t sub_214339934(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  BOOL v6;
  int v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  int v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  int v25;
  int v26;
  unsigned __int8 *v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  char v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  double v46;
  double v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  char v51;
  uint64_t v52;
  char v53;
  unsigned __int8 v55;
  unsigned __int8 v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  int v75;
  char v76;
  uint64_t v77;
  int v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD v89[19];
  _BYTE v90[152];
  _BYTE v91[152];
  _BYTE v92[152];
  _QWORD v93[20];

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  v88 = v2 + 64;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) == 0)
    return v4;
  sub_2141EF6B8(*(_QWORD *)(v2 + 48) + 152 * v4, (uint64_t)v93);
  sub_21421C318(v93, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21420B7DC);
  v6 = sub_214302F90((uint64_t)v93, a1);
  sub_21421C318(v93, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141EF5D4);
  if (v6)
    return v4;
  v87 = ~v3;
  v4 = (v4 + 1) & ~v3;
  if (((*(_QWORD *)(v88 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) == 0)
    return v4;
  v65 = a1;
  v66 = v2;
  while (1)
  {
    sub_2141EF6B8(*(_QWORD *)(v2 + 48) + 152 * v4, (uint64_t)v89);
    sub_2141EF6B8((uint64_t)v89, (uint64_t)v90);
    v7 = sub_21421C2FC((uint64_t)v90);
    v8 = (unsigned __int8 *)sub_21421C308((uint64_t)v90);
    v9 = v8;
    if (v7 == 1)
      break;
    v21 = *v8;
    v23 = *((_QWORD *)v8 + 1);
    v22 = *((_QWORD *)v8 + 2);
    v24 = v8[24];
    v84 = *((uint64_t *)v8 + 5);
    v83 = *((_QWORD *)v8 + 6);
    v86 = v8[56];
    v25 = v8[80];
    sub_2141EF6B8(a1, (uint64_t)v91);
    v26 = sub_21421C2FC((uint64_t)v91);
    v27 = (unsigned __int8 *)sub_21421C308((uint64_t)v91);
    if (v26 == 1 || v21 != *v27)
      goto LABEL_8;
    v73 = v25;
    v29 = *((_QWORD *)v27 + 1);
    v28 = *((_QWORD *)v27 + 2);
    v30 = v27[24];
    v80 = *((uint64_t *)v27 + 5);
    v31 = *((_QWORD *)v27 + 6);
    v78 = (char)v27[56];
    v71 = v27[80];
    sub_21421C318(v89, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21420B7DC);
    sub_2141DD130(v23, v22, v24);
    swift_bridgeObjectRetain();
    sub_2141DD140(v84, v83, v86);
    sub_2141DD130(v29, v28, v30);
    swift_bridgeObjectRetain();
    v74 = v31;
    sub_2141DD140(v80, v31, v78);
    if ((sub_2144247F4() & 1) == 0)
    {
      sub_2141ED0BC(v29, v28, v30);
      swift_bridgeObjectRelease();
      sub_2141EF1B0(v80, v31, v78);
      v33 = v84;
      v32 = v23;
LABEL_68:
      sub_2141ED0BC(v32, v22, v24);
      swift_bridgeObjectRelease();
      a1 = v65;
      v2 = v66;
      v39 = v86;
      v40 = v83;
LABEL_69:
      sub_2141EF1B0(v33, v40, v39);
LABEL_7:
      sub_21421C318(v89, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141EF5D4);
      goto LABEL_8;
    }
    if ((v86 & 0x80) != 0)
    {
      v32 = v23;
      if ((v78 & 0x80000000) == 0)
        goto LABEL_47;
      sub_2141ED0BC(v29, v28, v30);
      swift_bridgeObjectRelease();
      sub_2141ED0BC(v23, v22, v24);
      swift_bridgeObjectRelease();
      v39 = v86;
      v33 = v84;
      if ((v86 & 1) != 0)
      {
        a1 = v65;
        v2 = v66;
        v40 = v83;
        v41 = v73;
        if ((v78 & 1) == 0)
          goto LABEL_69;
      }
      else
      {
        a1 = v65;
        v2 = v66;
        v40 = v83;
        v41 = v73;
        if ((v78 & 1) != 0)
          goto LABEL_69;
      }
      if (*(double *)&v84 != *(double *)&v80 || *(double *)&v40 != *(double *)&v74)
        goto LABEL_69;
    }
    else
    {
      v32 = v23;
      if (v78 < 0)
      {
        sub_2141ED0BC(v29, v28, v30);
        swift_bridgeObjectRelease();
        v33 = v84;
        goto LABEL_68;
      }
      if (!v86)
      {
        if (v78)
        {
LABEL_47:
          sub_2141ED0BC(v29, v28, v30);
          swift_bridgeObjectRelease();
          sub_2141EF1B0(v80, v74, v78);
          v33 = v84;
          goto LABEL_68;
        }
        v33 = v84;
        v34 = *(double *)&v84;
        v35 = *(double *)&v80;
        sub_2141ED0BC(v29, v28, v30);
        swift_bridgeObjectRelease();
        v36 = v80;
        v37 = v74;
        v38 = 0;
        goto LABEL_71;
      }
      if (v86 == 1)
      {
        v33 = v84;
        if (v78 != 1)
          goto LABEL_67;
        v34 = *(double *)&v84;
        v35 = *(double *)&v80;
        sub_2141ED0BC(v29, v28, v30);
        swift_bridgeObjectRelease();
        v36 = v80;
        v37 = v74;
        v38 = 1;
LABEL_71:
        sub_2141EF1B0(v36, v37, v38);
        sub_2141ED0BC(v23, v22, v24);
        swift_bridgeObjectRelease();
        a1 = v65;
        v2 = v66;
        v39 = v86;
        v40 = v83;
        v41 = v73;
        if (v34 != v35)
          goto LABEL_69;
        goto LABEL_72;
      }
      v33 = v84;
      if (v78 != 2)
      {
LABEL_67:
        sub_2141ED0BC(v29, v28, v30);
        swift_bridgeObjectRelease();
        sub_2141EF1B0(v80, v74, v78);
        goto LABEL_68;
      }
      if (v84 == v80 && v83 == v74)
      {
        sub_2141ED0BC(v29, v28, v30);
        swift_bridgeObjectRelease();
        sub_2141EF1B0(v84, v83, 2);
        sub_2141ED0BC(v23, v22, v24);
        swift_bridgeObjectRelease();
        a1 = v65;
        v2 = v66;
        v39 = v86;
        v40 = v83;
        v33 = v84;
        v41 = v73;
      }
      else
      {
        v79 = sub_214425790();
        sub_2141ED0BC(v29, v28, v30);
        swift_bridgeObjectRelease();
        sub_2141EF1B0(v80, v74, 2);
        sub_2141ED0BC(v23, v22, v24);
        swift_bridgeObjectRelease();
        a1 = v65;
        v2 = v66;
        v39 = v86;
        v40 = v83;
        v33 = v84;
        v41 = v73;
        if ((v79 & 1) == 0)
          goto LABEL_69;
      }
    }
LABEL_72:
    sub_2141EF1B0(v33, v40, v39);
    sub_21421C318(v89, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141EF5D4);
    if (v41 == v71)
      return v4;
LABEL_8:
    v4 = (v4 + 1) & v87;
    if (((*(_QWORD *)(v88 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) == 0)
      return v4;
  }
  sub_2141EF6B8(a1, (uint64_t)v92);
  v10 = sub_21421C2FC((uint64_t)v92);
  v11 = (unsigned __int8 *)sub_21421C308((uint64_t)v92);
  if (v10 != 1 || *v9 != *v11)
    goto LABEL_8;
  v57 = v4;
  v59 = *((_QWORD *)v11 + 2);
  v60 = *((_QWORD *)v11 + 1);
  v85 = *((uint64_t *)v11 + 5);
  v62 = *((uint64_t *)v11 + 6);
  v61 = (char)v11[56];
  v77 = *((_QWORD *)v11 + 11);
  v81 = *((_QWORD *)v11 + 10);
  v68 = *((uint64_t *)v11 + 15);
  v69 = *((uint64_t *)v11 + 14);
  v75 = (char)v11[128];
  v55 = v11[24];
  v56 = v11[96];
  v12 = *((_QWORD *)v9 + 1);
  v13 = *((_QWORD *)v9 + 2);
  v14 = v9[24];
  v15 = *((uint64_t *)v9 + 5);
  v64 = v15;
  v16 = *((uint64_t *)v9 + 6);
  v18 = *((_QWORD *)v9 + 10);
  v17 = *((_QWORD *)v9 + 11);
  v19 = v9[96];
  v70 = *((uint64_t *)v9 + 14);
  v72 = *((_QWORD *)v9 + 15);
  v82 = v9[128];
  v20 = v9[56];
  sub_21421C318(v89, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21420B7DC);
  sub_2141DD130(v12, v13, v14);
  swift_bridgeObjectRetain();
  v63 = v16;
  v67 = v20;
  sub_2141DD140(v15, v16, v20);
  sub_2141DD130(v18, v17, v19);
  swift_bridgeObjectRetain();
  sub_2141DD140(v70, v72, v82);
  sub_2141DD130(v60, v59, v55 & 1);
  swift_bridgeObjectRetain();
  sub_2141DD140(v85, v62, v61);
  sub_2141DD130(v81, v77, v56 & 1);
  swift_bridgeObjectRetain();
  sub_2141DD140(v69, v68, v75);
  if ((sub_2144247F4() & 1) == 0)
    goto LABEL_6;
  if ((v20 & 0x80) != 0)
  {
    if (v61 < 0)
    {
      if ((v20 & 1) != 0)
      {
        if ((v61 & 1) == 0)
          goto LABEL_6;
      }
      else if ((v61 & 1) != 0)
      {
        goto LABEL_6;
      }
      if (*(double *)&v15 != *(double *)&v85 || *(double *)&v16 != *(double *)&v62)
        goto LABEL_6;
      goto LABEL_55;
    }
    goto LABEL_6;
  }
  if (v61 < 0)
    goto LABEL_6;
  if (!v20)
  {
    if (!v61)
      goto LABEL_39;
    goto LABEL_6;
  }
  if (v20 != 1)
  {
    if (v61 != 2 || (v15 != v85 || v16 != v62) && (sub_214425790() & 1) == 0)
      goto LABEL_6;
    goto LABEL_55;
  }
  if (v61 != 1)
  {
LABEL_6:
    sub_2141ED0BC(v81, v77, v56 & 1);
    swift_bridgeObjectRelease();
    sub_2141EF1B0(v69, v68, v75);
    sub_2141ED0BC(v60, v59, v55 & 1);
    swift_bridgeObjectRelease();
    sub_2141EF1B0(v85, v62, v61);
    sub_2141ED0BC(v18, v17, v19);
    swift_bridgeObjectRelease();
    sub_2141EF1B0(v70, v72, v82);
    sub_2141ED0BC(v12, v13, v14);
    swift_bridgeObjectRelease();
    sub_2141EF1B0(v15, v16, v20);
    a1 = v65;
    v2 = v66;
    v4 = v57;
    goto LABEL_7;
  }
LABEL_39:
  if (*(double *)&v15 != *(double *)&v85)
    goto LABEL_6;
LABEL_55:
  v58 = v12;
  if ((sub_2144247F4() & 1) == 0)
  {
    v43 = v70;
    sub_2141ED0BC(v81, v77, v56 & 1);
    swift_bridgeObjectRelease();
    sub_2141EF1B0(v69, v68, v75);
    v42 = v62;
    v4 = v57;
    goto LABEL_93;
  }
  if ((v82 & 0x80) != 0)
  {
    v43 = v70;
    v42 = v62;
    v4 = v57;
    if (v75 < 0)
    {
      sub_2141ED0BC(v81, v77, v56 & 1);
      swift_bridgeObjectRelease();
      sub_2141ED0BC(v60, v59, v55 & 1);
      swift_bridgeObjectRelease();
      if ((v82 & 1) != 0)
      {
        v42 = v62;
        v52 = v72;
        if ((v75 & 1) == 0)
          goto LABEL_94;
      }
      else
      {
        v42 = v62;
        v52 = v72;
        if ((v75 & 1) != 0)
          goto LABEL_94;
      }
      if (*(double *)&v70 == *(double *)&v69 && *(double *)&v52 == *(double *)&v68)
        goto LABEL_101;
      goto LABEL_94;
    }
    v51 = v56 & 1;
    v44 = v81;
    goto LABEL_92;
  }
  v42 = v62;
  v4 = v57;
  if (v75 < 0)
  {
    v43 = v70;
    sub_2141ED0BC(v81, v77, v56 & 1);
    swift_bridgeObjectRelease();
    goto LABEL_93;
  }
  if (!v82)
  {
    v43 = v70;
    v44 = v81;
    if (!v75)
    {
      v45 = v55 & 1;
      v46 = *(double *)&v70;
      v47 = *(double *)&v69;
      sub_2141ED0BC(v81, v77, v56 & 1);
      swift_bridgeObjectRelease();
      v48 = v69;
      v49 = v68;
      v50 = 0;
      goto LABEL_84;
    }
    goto LABEL_91;
  }
  v43 = v70;
  v44 = v81;
  if (v82 == 1)
  {
    if (v75 == 1)
    {
      v45 = v55 & 1;
      v46 = *(double *)&v70;
      v47 = *(double *)&v69;
      sub_2141ED0BC(v81, v77, v56 & 1);
      swift_bridgeObjectRelease();
      v48 = v69;
      v49 = v68;
      v50 = 1;
LABEL_84:
      sub_2141EF1B0(v48, v49, v50);
      v53 = v45;
      v42 = v62;
      sub_2141ED0BC(v60, v59, v53);
      swift_bridgeObjectRelease();
      v52 = v72;
      if (v46 == v47)
        goto LABEL_101;
LABEL_94:
      sub_2141EF1B0(v85, v42, v61);
      sub_2141ED0BC(v18, v17, v19);
      swift_bridgeObjectRelease();
      sub_2141EF1B0(v43, v52, v82);
      sub_2141ED0BC(v58, v13, v14);
      swift_bridgeObjectRelease();
      sub_2141EF1B0(v64, v63, v67);
      a1 = v65;
      v2 = v66;
      goto LABEL_7;
    }
LABEL_91:
    v51 = v56 & 1;
LABEL_92:
    sub_2141ED0BC(v44, v77, v51);
    swift_bridgeObjectRelease();
    sub_2141EF1B0(v69, v68, v75);
LABEL_93:
    sub_2141ED0BC(v60, v59, v55 & 1);
    swift_bridgeObjectRelease();
    v52 = v72;
    goto LABEL_94;
  }
  if (v75 != 2)
    goto LABEL_91;
  v52 = v72;
  if (v70 != v69 || v72 != v68)
  {
    v76 = sub_214425790();
    sub_2141ED0BC(v81, v77, v56 & 1);
    swift_bridgeObjectRelease();
    sub_2141EF1B0(v69, v68, 2);
    sub_2141ED0BC(v60, v59, v55 & 1);
    swift_bridgeObjectRelease();
    v42 = v62;
    if ((v76 & 1) != 0)
      goto LABEL_101;
    goto LABEL_94;
  }
  sub_2141ED0BC(v81, v77, v56 & 1);
  swift_bridgeObjectRelease();
  v52 = v68;
  v43 = v69;
  sub_2141EF1B0(v69, v68, 2);
  sub_2141ED0BC(v60, v59, v55 & 1);
  swift_bridgeObjectRelease();
  v42 = v62;
LABEL_101:
  sub_2141EF1B0(v85, v42, v61);
  sub_2141ED0BC(v18, v17, v19);
  swift_bridgeObjectRelease();
  sub_2141EF1B0(v43, v52, v82);
  sub_2141ED0BC(v58, v13, v14);
  swift_bridgeObjectRelease();
  sub_2141EF1B0(v64, v63, v67);
  sub_21421C318(v89, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141EF5D4);
  return v4;
}

unint64_t sub_21433A70C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  int v10;
  char v11;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v14 = ~v3;
    do
    {
      v5 = *(_QWORD *)(v16 + 48) + 48 * v4;
      v7 = *(_QWORD *)v5;
      v6 = *(_QWORD *)(v5 + 8);
      v8 = *(_BYTE *)(v5 + 16);
      v9 = *(_QWORD *)(v5 + 32);
      v10 = *(unsigned __int8 *)(v5 + 40);
      sub_2141DD130(*(_QWORD *)v5, v6, v8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if ((sub_2144247F4() & 1) != 0)
      {
        v11 = sub_21420E694(v9, *(_QWORD *)(a1 + 32));
        sub_2141ED0BC(v7, v6, v8);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v11 & 1) != 0 && v10 == (*(_BYTE *)(a1 + 40) & 1))
          return v4;
      }
      else
      {
        sub_2141ED0BC(v7, v6, v8);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      v4 = (v4 + 1) & v14;
    }
    while (((*(_QWORD *)(v15 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

uint64_t sub_21433A89C(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  double v3;
  double v4;

  v2 = *a2;
  if (!*(_BYTE *)(*a2 + 24) && *(_BYTE *)(result + 16) == 2)
  {
    v3 = *(double *)(result + 8);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_beginAccess();
    v4 = *(double *)(v2 + 224);
    if (v4 <= v3)
      v4 = v3;
    *(double *)(v2 + 224) = v4;
    swift_bridgeObjectRelease();
    return swift_release();
  }
  return result;
}

uint64_t _s6Charts8AxisTickV07_layoutB4MarkyyAC_AA01_bE12LayoutInputsVtFZ_0(uint64_t result, uint64_t *a2)
{
  int v2;
  uint64_t v3;
  double v4;
  uint64_t v5;
  double v6;

  v2 = *(unsigned __int8 *)(result + 16);
  v3 = *a2;
  if (v2 == 255)
  {
    if (*(unsigned __int8 *)(v3 + 24) - 1 > 1)
      return result;
    v5 = qword_253F106B8;
    swift_retain();
    if (v5 != -1)
      swift_once();
    v4 = *(double *)&qword_253F1C8C0;
  }
  else
  {
    if (v2 != 2)
      return result;
    v4 = *(double *)(result + 8);
    swift_retain();
  }
  swift_beginAccess();
  v6 = *(double *)(v3 + 224);
  if (v6 <= v4)
    v6 = v4;
  *(double *)(v3 + 224) = v6;
  return swift_release();
}

ValueMetadata *type metadata accessor for AxisTick()
{
  return &type metadata for AxisTick;
}

uint64_t getEnumTagSinglePayload for AxisTick.Length(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 253);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = (v3 ^ 0xFF) - 1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AxisTick.Length(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 253;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = ~(_BYTE)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for AxisTick.Length()
{
  return &type metadata for AxisTick.Length;
}

uint64_t sub_21433AABC(uint64_t result, char a2)
{
  *(_BYTE *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for AxisTick.Length.Storage()
{
  return &type metadata for AxisTick.Length.Storage;
}

ValueMetadata *type metadata accessor for AxisTickForExtended()
{
  return &type metadata for AxisTickForExtended;
}

uint64_t sub_21433AAE4(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = sub_214423C54();
    result = MEMORY[0x2199CD934](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_21433AB2C()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_21433AB54(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *sub_21433AB98(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_21433AC0C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_21433AC58(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_21433ACA0(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata accessor for LRUCache(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2141D8E88(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for LRUCache);
}

uint64_t sub_21433ACF4()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_21433AD90(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;

  v3 = a1;
  v4 = *(_QWORD *)(a3 + 24);
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = *(_QWORD *)(v4 - 8);
  v8 = *(_DWORD *)(v7 + 80);
  v9 = *(_QWORD *)(v5 + 64) + v8;
  if ((v8 | v6) > 7
    || ((*(_DWORD *)(v7 + 80) | *(_DWORD *)(v5 + 80)) & 0x100000) != 0
    || ((v9 + ((v6 + 16) & ~v6)) & ~v8) + *(_QWORD *)(v7 + 64) > 0x18)
  {
    v12 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v12 + (((v8 | v6) & 0xF8 ^ 0x1F8) & ((v8 | v6) + 16)));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    v13 = ~v8;
    v14 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    v15 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v14 = *v15;
    v16 = ((unint64_t)v14 + v6 + 8) & ~v6;
    v17 = ((unint64_t)v15 + v6 + 8) & ~v6;
    (*(void (**)(uint64_t, uint64_t))(v5 + 16))(v16, v17);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))((v16 + v9) & v13, (v17 + v9) & v13, v4);
  }
  return v3;
}

uint64_t sub_21433AEB4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v4 = (((a1 + 15) & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v3 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  (*(void (**)(unint64_t))(v3 + 8))(v4);
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 8))((v4 + *(_QWORD *)(v3 + 64) + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 80));
}

_QWORD *sub_21433AF24(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *a1 = *a2;
  v5 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v6 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v5 = *v6;
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = ((unint64_t)v5 + v8 + 8) & ~v8;
  v10 = ((unint64_t)v6 + v8 + 8) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v7 + 16))(v9, v10);
  v11 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v11 + 16))((*(_QWORD *)(v7 + 64) + *(unsigned __int8 *)(v11 + 80) + v9) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80), (*(_QWORD *)(v7 + 64) + *(unsigned __int8 *)(v11 + 80) + v10) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
  return a1;
}

_QWORD *sub_21433AFD0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *a1 = *a2;
  v5 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v6 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v5 = *v6;
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = ((unint64_t)v5 + v8 + 8) & ~v8;
  v10 = ((unint64_t)v6 + v8 + 8) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v7 + 24))(v9, v10);
  v11 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v11 + 24))((*(_QWORD *)(v7 + 64) + *(unsigned __int8 *)(v11 + 80) + v9) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80), (*(_QWORD *)(v7 + 64) + *(unsigned __int8 *)(v11 + 80) + v10) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
  return a1;
}

_QWORD *sub_21433B07C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *a1 = *a2;
  v5 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v6 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v5 = *v6;
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = ((unint64_t)v5 + v8 + 8) & ~v8;
  v10 = ((unint64_t)v6 + v8 + 8) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v7 + 32))(v9, v10);
  v11 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v11 + 32))((*(_QWORD *)(v7 + 64) + *(unsigned __int8 *)(v11 + 80) + v9) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80), (*(_QWORD *)(v7 + 64) + *(unsigned __int8 *)(v11 + 80) + v10) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
  return a1;
}

_QWORD *sub_21433B128(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *a1 = *a2;
  v5 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v6 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v5 = *v6;
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = ((unint64_t)v5 + v8 + 8) & ~v8;
  v10 = ((unint64_t)v6 + v8 + 8) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v7 + 40))(v9, v10);
  v11 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v11 + 40))((*(_QWORD *)(v7 + 64) + *(unsigned __int8 *)(v11 + 80) + v9) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80), (*(_QWORD *)(v7 + 64) + *(unsigned __int8 *)(v11 + 80) + v10) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
  return a1;
}

uint64_t sub_21433B1D4(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  char v14;
  int v15;
  unsigned int v16;
  int v17;
  int v18;
  unint64_t v20;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= v5)
    v8 = *(_DWORD *)(v4 + 84);
  else
    v8 = *(_DWORD *)(v6 + 84);
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v4 + 80);
  v10 = *(_QWORD *)(v4 + 64);
  v11 = *(unsigned __int8 *)(v6 + 80);
  v12 = a2 - v8;
  if (a2 <= v8)
    goto LABEL_23;
  v13 = ((v10 + v11 + ((v9 + 16) & ~v9)) & ~v11) + *(_QWORD *)(v6 + 64);
  v14 = 8 * v13;
  if (v13 <= 3)
  {
    v16 = ((v12 + ~(-1 << v14)) >> v14) + 1;
    if (HIWORD(v16))
    {
      v15 = *(_DWORD *)(a1 + v13);
      if (!v15)
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v16 > 0xFF)
    {
      v15 = *(unsigned __int16 *)(a1 + v13);
      if (!*(_WORD *)(a1 + v13))
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v16 < 2)
    {
LABEL_23:
      if (v8)
      {
        v20 = (((a1 + 15) & 0xFFFFFFFFFFFFFFF8) + v9 + 8) & ~v9;
        if (v5 >= v7)
          return (*(uint64_t (**)(unint64_t, _QWORD))(v4 + 48))(v20, *(unsigned int *)(v4 + 84));
        else
          return (*(uint64_t (**)(unint64_t))(v6 + 48))((v20 + v10 + v11) & ~v11);
      }
      return 0;
    }
  }
  v15 = *(unsigned __int8 *)(a1 + v13);
  if (!*(_BYTE *)(a1 + v13))
    goto LABEL_23;
LABEL_14:
  v17 = (v15 - 1) << v14;
  if (v13 > 3)
    v17 = 0;
  if (!(_DWORD)v13)
    return v8 + v17 + 1;
  if (v13 <= 3)
    v18 = ((v10 + v11 + ((v9 + 16) & ~(_DWORD)v9)) & ~(_DWORD)v11) + *(_DWORD *)(v6 + 64);
  else
    v18 = 4;
  return ((uint64_t (*)(void))((char *)&loc_21433B2C0 + 4 * byte_21442CD38[v18 - 1]))();
}

void sub_21433B358(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84))
    v7 = *(_DWORD *)(v5 + 84);
  else
    v7 = *(_DWORD *)(v6 + 84);
  v8 = ((*(_QWORD *)(v5 + 64)
       + *(unsigned __int8 *)(v6 + 80)
       + ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
     + *(_QWORD *)(v6 + 64);
  if (a3 > v7)
  {
    if (v8 <= 3)
    {
      v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v11))
      {
        v9 = 4u;
      }
      else if (v11 >= 0x100)
      {
        v9 = 2;
      }
      else
      {
        v9 = v11 > 1;
      }
    }
    else
    {
      v9 = 1u;
    }
  }
  else
  {
    v9 = 0;
  }
  if (v7 < a2)
  {
    v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v12;
        }
        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X4 }
}

uint64_t type metadata accessor for LRUCache.Element(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2141D8E88(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for LRUCache.Element);
}

void static ForEach<>._makeChartContent(content:inputs:)()
{
  _s21AttachCombinerVisitorVMa();
}

void sub_21433B5F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)(v15 - 192) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v15 - 184) = a1;
  MEMORY[0x24BDAC7A8](a1);
  *(_QWORD *)(v15 - 200) = (char *)&a9 - v16;
  v17 = type metadata accessor for _ChartContentInputs(0);
  MEMORY[0x24BDAC7A8](v17);
  *(_QWORD *)(v15 - 144) = v9;
  *(_QWORD *)(v15 - 136) = v14;
  *(_QWORD *)(v15 - 128) = v13;
  *(_QWORD *)(v15 - 120) = v12;
  *(_QWORD *)(v15 - 112) = v11;
  *(_QWORD *)(v15 - 104) = v10;
  _s9MakeStateVMa();
}

void sub_21433B670(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  *(_QWORD *)(v15 - 216) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v15 - 208) = a1;
  MEMORY[0x24BDAC7A8](a1);
  *(_QWORD *)(v15 - 224) = (char *)&a9 - v16;
  v17 = type metadata accessor for _ChartContentOutputs(0);
  v18 = MEMORY[0x24BDAC7A8](v17);
  MEMORY[0x24BDAC7A8](v18);
  *(_QWORD *)(v15 - 144) = v9;
  *(_QWORD *)(v15 - 136) = v14;
  *(_QWORD *)(v15 - 128) = v13;
  *(_QWORD *)(v15 - 120) = v12;
  *(_QWORD *)(v15 - 112) = v11;
  *(_QWORD *)(v15 - 104) = v10;
  *(_QWORD *)(v15 - 240) = v10;
  _s18AddCombinerVisitorVMa();
}

void sub_21433B70C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;

  MEMORY[0x24BDAC7A8](a1);
  v12 = (char *)&v14 - v11;
  _s6Charts11BuilderPairVA2A12ChartContentRzAaDR_rlE05_makedE07content6inputsAA01_dE7OutputsV7SwiftUI11_GraphValueVyACyxq_GG_AA01_dE6InputsVtFZ_0();
  *(_QWORD *)(v9 - 232) = v7;
  sub_2141FE1E0(v7, (uint64_t)v12, type metadata accessor for _ChartContentOutputs);
  MEMORY[0x2199CD934](&unk_21442CF88, a1);
  v13 = *(_QWORD *)(v9 - 168);
  sub_2142B67B0();
  *(_QWORD *)(v9 - 144) = v1;
  *(_QWORD *)(v9 - 136) = v8;
  *(_QWORD *)(v9 - 128) = v6;
  *(_QWORD *)(v9 - 120) = v5;
  *(_QWORD *)(v9 - 112) = v3;
  sub_214424B9C();
  *(_DWORD *)(v9 - 244) = sub_2143B36F4(*(unsigned int **)(v9 - 160));
  sub_2141FDEA0(v13, v4, type metadata accessor for _ChartContentInputs);
  *(_QWORD *)(v9 - 160) = v12;
  sub_2141FDEA0((uint64_t)v12, v2, type metadata accessor for _ChartContentOutputs);
  if ((id)AGSubgraphGetCurrent())
    sub_21433BD28();
  __break(1u);
  JUMPOUT(0x21433B9FCLL);
}

void _s21AttachCombinerVisitorVMa()
{
  JUMPOUT(0x2199CD874);
}

void _s9MakeStateVMa()
{
  JUMPOUT(0x2199CD874);
}

void _s18AddCombinerVisitorVMa()
{
  JUMPOUT(0x2199CD874);
}

void sub_21433BA24(int a1@<W0>, _DWORD *a2@<X8>)
{
  *a2 = a1;
  _s9MakeStateVMa();
}

uint64_t sub_21433BA84(int *a1)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v10;

  sub_2141FE1E0(v6, v7 + a1[17], type metadata accessor for _ChartContentInputs);
  result = sub_2141FE1E0(v5, v7 + a1[18], type metadata accessor for _ChartContentOutputs);
  *(_QWORD *)(v7 + a1[19]) = v4;
  v10 = v7 + a1[20];
  *(_QWORD *)v10 = v3;
  *(_QWORD *)(v10 + 8) = v2;
  *(_DWORD *)(v10 + 16) = v1;
  return result;
}

_QWORD *sub_21433BAEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  swift_allocObject();
  return sub_21433BB64(a1, a2, a3, a4, a5, a6);
}

_QWORD *sub_21433BB64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  _QWORD *v6;
  uint64_t v11;
  char *v12;
  uint64_t AssociatedTypeWitness;

  v11 = *v6;
  *((_BYTE *)v6 + *(_QWORD *)(*v6 + 176)) = 0;
  v6[2] = a1;
  sub_2141FE1E0(a2, (uint64_t)v6 + qword_254D6AD90, type metadata accessor for _ChartContentOutputs);
  v12 = (char *)v6 + *(_QWORD *)(*v6 + 152);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(v12, a4, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v11 + 88) - 8) + 32))((char *)v6 + *(_QWORD *)(*v6 + 144), a3);
  *(_QWORD *)((char *)v6 + *(_QWORD *)(*v6 + 160)) = a5;
  *(_DWORD *)((char *)v6 + *(_QWORD *)(*v6 + 168)) = a6;
  return v6;
}

id *sub_21433BC5C()
{
  id *v0;
  _QWORD *v1;
  char *v2;
  uint64_t AssociatedTypeWitness;

  v1 = *v0;

  sub_2141DD370((uint64_t)v0 + qword_254D6AD90, type metadata accessor for _ChartContentOutputs);
  (*(void (**)(char *))(*(_QWORD *)(v1[11] - 8) + 8))((char *)v0 + *((_QWORD *)*v0 + 18));
  v2 = (char *)v0 + *((_QWORD *)*v0 + 19);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v2, AssociatedTypeWitness);
  return v0;
}

uint64_t sub_21433BD08()
{
  sub_21433BC5C();
  return swift_deallocClassInstance();
}

void sub_21433BD28()
{
  _s4ItemCMa();
}

uint64_t sub_21433BD5C()
{
  uint64_t v0;

  v0 = sub_214425040();
  swift_getTupleTypeMetadata2();
  sub_214425040();
  sub_214424D4C();
  return v0;
}

uint64_t sub_21433BDC4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char v11;
  uint64_t result;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[4];
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 48);
  v17[0] = *(_QWORD *)(a1 + 16);
  v19 = v17[0];
  v20 = v3;
  v21 = v4;
  v22 = v5;
  v23 = v6;
  v7 = sub_214424B9C();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)v17 - v9;
  sub_21433DD08((uint64_t)v17 - v9);
  v11 = sub_21433BF84((uint64_t)v10, a1);
  result = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  if ((v11 & 1) != 0)
  {
    v13 = (uint64_t *)(v1 + *(int *)(a1 + 80));
    v14 = *v13;
    v15 = v13[1];
    LODWORD(v13) = *((_DWORD *)v13 + 4);
    v17[2] = v14;
    v17[3] = v15;
    v18 = (int)v13;
    MEMORY[0x24BDAC7A8](result);
    v17[-2] = a1;
    v17[-1] = MEMORY[0x2199CD934](&unk_21442CF48, a1);
    v16 = *(_QWORD *)(a1 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v19 = v17[0];
    v20 = v3;
    v21 = v4;
    v22 = v5;
    v23 = v6;
    v24 = v16;
    _s9ItemStateVMa();
  }
  return result;
}

uint64_t sub_21433BF84(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[3];
  int v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v52 = a1;
  v3 = *(_QWORD *)(a2 + 24);
  v45 = *(_QWORD *)(v3 - 8);
  v4 = MEMORY[0x24BDAC7A8](a1);
  v39 = (char *)v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v44 = (char *)v30 - v6;
  v43 = sub_214425388();
  v42 = *(_QWORD *)(v43 - 8);
  v7 = MEMORY[0x24BDAC7A8](v43);
  v48 = (char *)v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v41 = (char *)v30 - v9;
  v51 = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(*(_QWORD *)(v51 + 8) + 8);
  v11 = *(_QWORD *)(a2 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v38 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v13 = sub_214425388();
  MEMORY[0x24BDAC7A8](v13);
  v14 = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](v14);
  v36 = (char *)v30 - v15;
  v40 = v10;
  v34 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 8);
  v37 = v14;
  v35 = swift_getAssociatedTypeWitness();
  v16 = *(_QWORD *)(v35 - 8);
  v17 = MEMORY[0x24BDAC7A8](v35);
  v46 = (char *)v30 - v18;
  v19 = v11;
  v20 = *(_QWORD *)(v11 - 8);
  v21 = v50;
  MEMORY[0x24BDAC7A8](v17);
  v23 = (char *)v30 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = AGSubgraphIsValid();
  if ((_DWORD)result)
  {
    v32 = v16;
    v30[1] = v20;
    v25 = v21 + *(int *)(a2 + 80);
    v31 = *(_DWORD *)(v25 + 16);
    *(_DWORD *)(v25 + 16) = v31 + 1;
    v26 = a2;
    v47 = *(_QWORD *)(a2 + 32);
    v27 = *(_QWORD *)(a2 + 48);
    v53 = v19;
    v54 = v3;
    v28 = v51;
    v55 = v47;
    v56 = v51;
    v57 = v27;
    sub_214424B9C();
    v33 = v23;
    sub_214424B60();
    v49 = v26;
    v29 = *(_QWORD *)(v26 + 56);
    v53 = v19;
    v54 = v3;
    v55 = v47;
    v56 = v28;
    v57 = v27;
    v58 = v29;
    _s4ItemCMa();
  }
  return result;
}

void sub_21433C82C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[9];
  uint64_t AssociatedTypeWitness;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v37 = a1;
  v38 = a2;
  v5 = *(_QWORD *)(a3 + 40);
  v36 = *(_QWORD *)(a3 + 16);
  v6 = v36;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v25[8] = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v25[7] = (char *)v25 - v7;
  v8 = type metadata accessor for _ChartContentOutputs(0);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v25[6] = (char *)v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v28 = (char *)v25 - v11;
  v12 = type metadata accessor for _ChartContentInputs(0);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v29 = (char *)v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(_QWORD *)(a3 + 24);
  v35 = *(_QWORD *)(v15 - 8);
  v16 = MEMORY[0x24BDAC7A8](v13);
  v27 = (char *)v25 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v18 = *(_QWORD *)(a3 + 32);
  v19 = *(_QWORD *)(a3 + 48);
  v39 = v6;
  v40 = v15;
  v41 = v18;
  v42 = v5;
  v43 = v19;
  v20 = sub_214424B9C();
  v31 = *(_QWORD *)(v20 - 8);
  MEMORY[0x24BDAC7A8](v20);
  v22 = (char *)v25 - v21;
  sub_21433DD08((uint64_t)v25 - v21);
  v32 = v20;
  v34 = v22;
  sub_214424B6C();
  v23 = *(int *)(a3 + 80);
  v33 = v3;
  v30 = v3 + v23;
  v24 = *(_QWORD *)(a3 + 56);
  v39 = v36;
  v40 = v15;
  v41 = v18;
  v42 = v5;
  v25[5] = v5;
  v43 = v19;
  v44 = v24;
  _s4ItemCMa();
}

uint64_t sub_21433CA64(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  int v25;
  int v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  *(_QWORD *)(v9 - 200) = v5;
  *(_QWORD *)(v9 - 232) = v3;
  v11 = v1;
  MEMORY[0x2199CC68C](v5, v2, v3, a1, v1);
  v12 = *(uint64_t **)(v9 - 96);
  if (v12)
  {
    v13 = *v12;
    v14 = *(_QWORD *)(*v12 + 176);
    if (*((_BYTE *)v12 + v14) == 1)
    {
      *((_BYTE *)v12 + v14) = 0;
      AGSubgraphAddChild();
      v13 = *v12;
    }
    v15 = *(_QWORD *)(v13 + 168);
    v16 = *(_DWORD *)((char *)v12 + v15);
    v17 = *(_QWORD *)(v9 - 224);
    v18 = *(_DWORD *)(v17 + 16);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v9 - 216) + 8))(*(_QWORD *)(v9 - 184), *(_QWORD *)(v9 - 208));
    if (v16 == v18)
    {
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v9 - 176) + 8))(*(_QWORD *)(v9 - 200), *(_QWORD *)(v9 - 232));
    }
    else
    {
      v28 = (uint64_t)v12 + *(_QWORD *)(*v12 + 152);
      swift_beginAccess();
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v9 - 272) + 24))(v28, *(_QWORD *)(v9 - 160), *(_QWORD *)(v9 - 264));
      swift_endAccess();
      *(uint64_t *)((char *)v12 + *(_QWORD *)(*v12 + 160)) = *(_QWORD *)(v9 - 152);
      v29 = *(_QWORD *)(v9 - 176);
      v30 = *(_QWORD *)(v9 - 256);
      v31 = *(_QWORD *)(v9 - 232);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v29 + 32))(v30, *(_QWORD *)(v9 - 200), v31);
      v32 = (uint64_t)v12 + *(_QWORD *)(*v12 + 144);
      swift_beginAccess();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 40))(v32, v30, v31);
      swift_endAccess();
      *(_DWORD *)((char *)v12 + v15) = *(_DWORD *)(v17 + 16);
    }
    return (uint64_t)v12;
  }
  else
  {
    *(_QWORD *)(v9 - 328) = v4;
    *(_QWORD *)(v9 - 320) = v6;
    *(_QWORD *)(v9 - 312) = a1;
    *(_QWORD *)(v9 - 304) = v7;
    v19 = *(_QWORD *)(v9 - 240);
    v20 = *(int **)(v9 - 192);
    v21 = (id)AGSubgraphGetGraph();
    v22 = AGSubgraphCreate();

    v23 = v22;
    AGSubgraphAddChild();
    result = AGGraphGetCurrentAttribute();
    if ((_DWORD)result != *MEMORY[0x24BE096C0])
    {
      v25 = result;
      v26 = *v20;
      sub_2141FDEA0((uint64_t)v20 + *(int *)(v8 + 68), v19, type metadata accessor for _ChartContentInputs);
      AGGraphClearUpdate();
      v27 = (id)AGSubgraphGetCurrent();
      *(_QWORD *)(v9 - 336) = v23;
      AGSubgraphSetCurrent();
      sub_21433CE68(v26, v19, *(_QWORD *)(v9 - 200), *(_QWORD *)(v9 - 152), *(_QWORD *)(v9 - 184), *(_QWORD *)(v9 - 160), v25, *(_QWORD *)(v9 - 168), *(_QWORD *)(v9 - 248), *(_QWORD *)(v9 - 232), *(_QWORD *)(v9 - 320), *(_QWORD *)(v9 - 296), v11, *(_QWORD *)(v9 - 328));
    }
    __break(1u);
  }
  return result;
}

void sub_21433CE68(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15;
  _QWORD v16[24];
  int v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v17 = a7;
  v16[20] = a6;
  v16[18] = a5;
  v16[12] = a4;
  v22 = a3;
  v16[9] = a2;
  v23 = a1;
  v21 = a9;
  v30 = *MEMORY[0x24BDAC8D0];
  v20 = sub_214423DA4();
  v19 = *(_QWORD *)(v20 - 8);
  MEMORY[0x24BDAC7A8](v20);
  v18 = (char *)v16 - v15;
  v24 = a8;
  v25 = a10;
  v26 = a11;
  v27 = a12;
  v28 = a13;
  v29 = a14;
  _s5ChildVMa();
}

void sub_21433CF54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t AssociatedTypeWitness;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  *(_QWORD *)(v15 - 360) = a1;
  *(_QWORD *)(v15 - 344) = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  *(_QWORD *)(v15 - 392) = (char *)&a9 - v16;
  *(_QWORD *)(v15 - 408) = *(_QWORD *)(*(_QWORD *)(v11 + 8) + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  *(_QWORD *)(v15 - 416) = AssociatedTypeWitness;
  *(_QWORD *)(v15 - 432) = *(_QWORD *)(AssociatedTypeWitness - 8);
  v18 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  *(_QWORD *)(v15 - 440) = (char *)&a9 - v19;
  v20 = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(v15 - 536) = v12;
  *(_QWORD *)(v15 - 424) = v20;
  v21 = MEMORY[0x24BDAC7A8](v18);
  *(_QWORD *)(v15 - 464) = (char *)&a9 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v15 - 304) = v9;
  *(_QWORD *)(v15 - 368) = *(_QWORD *)(v9 - 8);
  v23 = MEMORY[0x24BDAC7A8](v21);
  *(_QWORD *)(v15 - 376) = (char *)&a9 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v23);
  *(_QWORD *)(v15 - 288) = (char *)&a9 - v25;
  v26 = type metadata accessor for _ChartContentInputs(0);
  *(_QWORD *)(v15 - 512) = v26;
  v27 = MEMORY[0x24BDAC7A8](v26);
  *(_QWORD *)(v15 - 296) = (char *)&a9 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v15 - 456) = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v27);
  *(_QWORD *)(v15 - 144) = v12;
  *(_QWORD *)(v15 - 136) = v14;
  *(_QWORD *)(v15 - 128) = v9;
  *(_QWORD *)(v15 - 120) = v11;
  *(_QWORD *)(v15 - 528) = v10;
  *(_QWORD *)(v15 - 112) = v10;
  *(_QWORD *)(v15 - 104) = v13;
  *(_QWORD *)(v15 - 480) = v13;
  _s20ChildContainerValuesVMa_0();
}

void sub_21433D158(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  int v17;
  void (*v18)(uint64_t, _QWORD, uint64_t);
  int v19;

  *(_QWORD *)(v14 - 520) = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v16 = (_DWORD *)((char *)&a9 - v15);
  v17 = *(_DWORD *)(*(_QWORD *)(v14 - 472) + *(int *)(v9 + 28));
  v18 = *(void (**)(uint64_t, _QWORD, uint64_t))(v11 + 16);
  *(_QWORD *)(v14 - 488) = v18;
  *(_QWORD *)(v14 - 496) = v12;
  v18(v12, *(_QWORD *)(v14 - 280), v13);
  v19 = *(_DWORD *)(v14 - 268);
  *(_QWORD *)(v14 - 504) = v10;
  sub_21433D604(v19, v17, v16);
}

void sub_21433D210()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t);
  uint64_t v16;
  void (*v17)(uint64_t, _QWORD);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;

  *(_QWORD *)(v7 - 160) = v4;
  *(_QWORD *)(v7 - 152) = MEMORY[0x2199CD934](&unk_21442D150, v4);
  v8 = sub_2141D8BF8(&qword_254D69840);
  sub_2141DB52C(v1, (uint64_t)sub_214226BB4, v7 - 176, v4, MEMORY[0x24BEE4078], v8, MEMORY[0x24BEE40A8], v9);
  *(_QWORD *)(v7 - 448) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 520) + 8))(v1, v4);
  v10 = *(_DWORD *)(v7 - 144);
  v11 = v0;
  v12 = *(_QWORD *)(v7 - 296);
  sub_2141FDEA0(v11, v12, type metadata accessor for _ChartContentInputs);
  *(_DWORD *)(v12 + *(int *)(*(_QWORD *)(v7 - 512) + 28)) = v10;
  *(_QWORD *)(v7 - 144) = v5;
  *(_QWORD *)(v7 - 136) = v6;
  v13 = v6;
  *(_QWORD *)(v7 - 128) = v3;
  *(_QWORD *)(v7 - 120) = v2;
  v14 = *(_QWORD *)(v7 - 528);
  *(_QWORD *)(v7 - 112) = v14;
  sub_214424B9C();
  v15 = (void (*)(uint64_t))sub_214424B78();
  v16 = *(_QWORD *)(v7 - 464);
  sub_214424B60();
  v17 = (void (*)(uint64_t, _QWORD))sub_2144252A4();
  v18 = *(_QWORD *)(v7 - 432);
  v19 = *(_QWORD *)(v7 - 440);
  v20 = *(_QWORD *)(v7 - 416);
  (*(void (**)(uint64_t))(v18 + 16))(v19);
  v17(v7 - 144, 0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 424) + 8))(v16, v5);
  v15(v19);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v19, v20);
  (*(void (**)(_QWORD, _QWORD, uint64_t))(v7 - 488))(*(_QWORD *)(v7 - 496), *(_QWORD *)(v7 - 280), v13);
  v21 = *(_DWORD **)(v7 - 392);
  v22 = *(_DWORD *)(v7 - 268);
  *v21 = *(_DWORD *)(v7 - 348);
  v21[1] = v22;
  *(_QWORD *)(v7 - 144) = v5;
  *(_QWORD *)(v7 - 136) = v13;
  v23 = *(_QWORD *)(v7 - 504);
  *(_QWORD *)(v7 - 128) = *(_QWORD *)(v7 - 304);
  *(_QWORD *)(v7 - 120) = v23;
  v24 = *(_QWORD *)(v7 - 480);
  *(_QWORD *)(v7 - 112) = v14;
  *(_QWORD *)(v7 - 104) = v24;
  _s5ChildVMa();
}

uint64_t sub_21433D424(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 456) + 32))(v4 + *(int *)(a1 + 72), v3, v2);
  v7 = *(_QWORD *)(v6 - 360);
  *(_QWORD *)(v6 - 208) = v1;
  *(_QWORD *)(v6 - 200) = v7;
  *(_QWORD *)(v6 - 192) = MEMORY[0x2199CD934](&unk_21442D110, v7);
  v8 = sub_214423C9C();
  v9 = MEMORY[0x24BEE4078];
  v10 = MEMORY[0x24BEE40A8];
  sub_2141DB52C(v4, (uint64_t)sub_21433ED68, v6 - 224, v7, MEMORY[0x24BEE4078], v8, MEMORY[0x24BEE40A8], v11);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 344) + 8))(v4, v7);
  v12 = *(_DWORD *)(v6 - 144);
  v13 = *(_QWORD *)(v6 - 368);
  v14 = *(_QWORD *)(v6 - 376);
  v15 = *(_QWORD *)(v6 - 288);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v14, v15, v1);
  *(_QWORD *)(v6 - 240) = v1;
  *(_DWORD *)(v6 - 232) = v12;
  sub_2141DB52C(v14, (uint64_t)sub_21433FE3C, v6 - 256, v1, v9, MEMORY[0x24BEE1328], v10, v16);
  v17 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
  v17(v14, v1);
  v18 = *(_QWORD *)(v6 - 336);
  sub_2143B369C(v12, v18);
  v19 = *(_QWORD *)(v6 - 296);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 48))(v18, v19, v1, v5);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v6 - 328) + 8))(v18, *(_QWORD *)(v6 - 320));
  v17(v15, v1);
  return sub_2141DD370(v19, type metadata accessor for _ChartContentInputs);
}

void sub_21433D604(int a1@<W0>, int a2@<W1>, _DWORD *a3@<X8>)
{
  *a3 = a1;
  a3[1] = a2;
  _s20ChildContainerValuesVMa_0();
}

double sub_21433D64C(int *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  double result;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 32))(v4 + a1[18], v3, v1);
  *(_QWORD *)(v4 + a1[19]) = v2;
  v6 = a1[20];
  sub_2141D8BF8(qword_254D69850);
  v7 = swift_allocObject();
  *(_QWORD *)&result = 1;
  *(_OWORD *)(v7 + 16) = xmmword_214426EF0;
  *(_QWORD *)(v7 + 32) = -1;
  *(_BYTE *)(v7 + 72) = 0;
  *(_QWORD *)(v4 + v6) = v7;
  return result;
}

void sub_21433D6C4(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
}

void sub_21433D6D4()
{
  _s9ItemStateVMa();
}

uint64_t sub_21433D708()
{
  uint64_t v0;

  v0 = *(_QWORD *)AGGraphGetValue();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t sub_21433D750@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t Value;

  v2 = sub_214424B9C();
  Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, Value, v2);
}

void sub_21433D7C8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[5];
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v3 = a1[4];
  v32 = *(_QWORD *)(v3 - 8);
  v4 = MEMORY[0x24BDAC7A8](a1);
  v31 = (char *)v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v30 = (char *)v23 - v7;
  v8 = *(_QWORD *)(v6 + 40);
  v9 = *(_QWORD *)(*(_QWORD *)(v8 + 8) + 8);
  v10 = *(_QWORD *)(v6 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v28 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v29 = AssociatedTypeWitness;
  v12 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v25 = (char *)v23 - v13;
  v26 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v23[4] = (char *)v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = a1[3];
  v16 = a1[6];
  v36 = v10;
  v37 = v15;
  v38 = v3;
  v39 = v8;
  v40 = v16;
  v24 = sub_214424B9C();
  v23[2] = *(_QWORD *)(v24 - 8);
  MEMORY[0x24BDAC7A8](v24);
  v23[3] = (char *)v23 - v17;
  v27 = v9;
  v18 = swift_getAssociatedTypeWitness();
  v34 = *(_QWORD *)(v18 - 8);
  v35 = v18;
  v19 = MEMORY[0x24BDAC7A8](v18);
  v33 = (char *)v23 - v20;
  MEMORY[0x24BDAC7A8](v19);
  (*(void (**)(char *, uint64_t, _QWORD *))(v22 + 16))((char *)v23 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0), v1, a1);
  sub_21433D6D4();
}

void sub_21433D9FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *(_QWORD *)(v0 + 56);
  *(_QWORD *)(v6 - 144) = v4;
  *(_QWORD *)(v6 - 136) = v1;
  *(_QWORD *)(v6 - 232) = v3;
  *(_QWORD *)(v6 - 128) = v3;
  *(_QWORD *)(v6 - 120) = v2;
  *(_QWORD *)(v6 - 112) = v5;
  *(_QWORD *)(v6 - 104) = v7;
  _s4ItemCMa();
}

uint64_t sub_21433DA24(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  MEMORY[0x2199CC68C](v3, v1, v2, a1, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v3, v2);
  if (*(_QWORD *)(v5 - 168))
    sub_21433D6D4();
  return result;
}

uint64_t sub_21433DD08@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t Value;

  v2 = sub_214424B9C();
  Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, Value, v2);
}

uint64_t sub_21433DD80@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t Value;

  v3 = *(_DWORD *)(v1 + 4);
  v4 = *MEMORY[0x24BE096C0];
  v5 = sub_214424530();
  v6 = v5;
  if (v3 == v4)
  {
    v7 = *(_QWORD *)(v5 - 8);
    v8 = 1;
  }
  else
  {
    Value = AGGraphGetValue();
    v7 = *(_QWORD *)(v6 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(a1, Value, v6);
    v8 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a1, v8, 1, v6);
}

uint64_t sub_21433DE10@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 32) - 8) + 56))(a2, 1, 1);
}

uint64_t sub_21433DE30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  char v35;

  v3 = v2;
  v30 = a2;
  v26 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  v5 = MEMORY[0x24BDAC7A8](a1);
  v27 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = v7;
  v8 = *(_QWORD *)(v5 + 48);
  v31 = *(_QWORD *)(v5 + 16);
  v32 = v7;
  v33 = *(_OWORD *)(v5 + 32);
  v25 = v8;
  v34 = v8;
  v9 = sub_214424B9C();
  v29 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v25 - v10;
  v12 = sub_2141D8BF8(&qword_254D698D8);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v25 - v16;
  sub_21433DD80((uint64_t)&v25 - v16);
  v18 = sub_214424530();
  v19 = *(_QWORD *)(v18 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18) == 1)
  {
    sub_214424524();
    sub_214226CE8((uint64_t)v17);
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v19 + 32))(v30, v17, v18);
  }
  v20 = *(int *)(a1 + 76);
  v31 = *(_QWORD *)(v2 + v20);
  LOBYTE(v32) = 0;
  sub_214340D60();
  v21 = v30;
  sub_214424548();
  sub_21433DD08((uint64_t)v11);
  v22 = sub_214424B48();
  (*(void (**)(char *, uint64_t))(v29 + 8))(v11, v9);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v15, v21, v18);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v15, 0, 1, v18);
  if ((v22 & 1) != 0)
  {
    v31 = *(_QWORD *)(v3 + v20);
    v35 = 0;
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v26 + 16))(v27, v3 + *(int *)(a1 + 72), v28);
    sub_214425478();
    v35 = 1;
  }
  v23 = sub_2143982E8((uint64_t)v15, (uint64_t)&v31);
  sub_214219E50((uint64_t)&v31);
  sub_214226CE8((uint64_t)v15);
  v31 = v23;
  sub_214226D28();
  return sub_214424548();
}

void sub_21433E0EC()
{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  sub_214423DA4();
  v0 = sub_214425388();
  MEMORY[0x24BDAC7A8](v0);
  _s25ForEachPreferenceCombinerVMa();
}

uint64_t sub_21433E1C8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v3 - 168) = a1;
  *(_QWORD *)(v3 - 160) = MEMORY[0x2199CD934](&unk_21442D190, a1);
  v5 = sub_214423C9C();
  sub_2141DB52C(v3 - 196, (uint64_t)sub_21433FD60, v3 - 192, a1, MEMORY[0x24BEE4078], v5, MEMORY[0x24BEE40A8], v6);
  sub_2143B369C(*(_DWORD *)(v3 - 144), v2);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 56))(v2, 0, 1, v1);
  return sub_214424518();
}

void sub_21433E29C()
{
  sub_21433E0EC();
}

uint64_t sub_21433E2B0(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v25[10];

  v25[1] = swift_getAssociatedTypeWitness();
  v8 = sub_214423DA4();
  v9 = sub_214425388();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)v25 - v12;
  v14 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v16 = (unsigned int *)((char *)v25 - v15);
  sub_21442450C();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v13, 1, v8) != 1)
  {
    (*(void (**)(unsigned int *, char *, uint64_t))(v14 + 32))(v16, v13, v8);
    v17 = sub_2143B36F4(v16);
    MEMORY[0x24BDAC7A8](v17);
    v18 = a2[2];
    v19 = a2[3];
    v25[-10] = v18;
    v25[-9] = v19;
    v20 = a2[4];
    v21 = a2[5];
    v25[-8] = v20;
    v25[-7] = a3;
    v22 = a2[6];
    v23 = a2[7];
    v25[-6] = v21;
    v25[-5] = v22;
    v25[-4] = v23;
    v25[-3] = a4;
    v25[-2] = v4;
    v25[2] = v18;
    v25[3] = v19;
    v25[4] = v20;
    v25[5] = a3;
    v25[6] = v21;
    v25[7] = v22;
    v25[8] = v23;
    v25[9] = a4;
    _s25ForEachPreferenceCombinerVMa();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9);
}

void sub_21433E4A4()
{
  _s21AttachCombinerVisitorVMa();
}

void sub_21433E500()
{
  _s25ForEachPreferenceCombinerVMa();
}

void sub_21433E524()
{
  int v0;
  _DWORD *v1;

  *v1 = v0;
}

uint64_t sub_21433E55C(int a1)
{
  if (*MEMORY[0x24BE096C0] != a1)
    _s9ItemStateVMa();
  return 0;
}

uint64_t sub_21433E5F8(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  return sub_21433E2B0(a1, a4, a2, a3);
}

uint64_t sub_21433E60C@<X0>(uint64_t a1@<X8>)
{
  uint64_t AssociatedTypeWitness;

  sub_214423E94();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(a1, 0, 1, AssociatedTypeWitness);
}

uint64_t sub_21433E67C@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  _QWORD v28[8];
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  LODWORD(v38) = a1;
  v34 = a9;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v28[7] = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v28[6] = (char *)v28 - v18;
  v32 = v19;
  v20 = sub_214423DA4();
  v21 = sub_214425388();
  v31 = *(_QWORD *)(v21 - 8);
  MEMORY[0x24BDAC7A8](v21);
  v33 = (char *)v28 - v22;
  v23 = type metadata accessor for _ChartContentOutputs(0);
  v24 = MEMORY[0x24BDAC7A8](v23);
  v36 = (char *)v28 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = *(_QWORD *)(v20 - 8);
  MEMORY[0x24BDAC7A8](v24);
  v30 = (char *)v28 - v26;
  v28[0] = a3;
  v29 = a4;
  result = sub_21433E55C(v38);
  if (result)
  {
    v37 = a10;
    v38 = a5;
    sub_214423E94();
    swift_bridgeObjectRelease();
    v39 = a2;
    v40 = v28[0];
    v41 = v29;
    v42 = a6;
    v28[3] = a6;
    v28[4] = a7;
    v43 = a7;
    v44 = a8;
    v28[5] = a8;
    _s4ItemCMa();
  }
  __break(1u);
  return result;
}

uint64_t sub_21433EB10@<X0>(uint64_t a1@<X8>)
{
  return sub_21433E60C(a1);
}

uint64_t sub_21433EB28@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  int *v2;

  return sub_21433E67C(*v2, a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a2, a1[9]);
}

uint64_t sub_21433EB60(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[2];

  v15[1] = *MEMORY[0x24BDAC8D0];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v4 = sub_214425388();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)v15 - v7;
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](v6);
  v11 = (char *)v15 - v10;
  sub_21433E60C((uint64_t)v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v8, 1, AssociatedTypeWitness) == 1)
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  v13 = (*(uint64_t (**)(char *, char *, uint64_t))(v9 + 32))(v11, v8, AssociatedTypeWitness);
  MEMORY[0x24BDAC7A8](v13);
  v15[-2] = a2;
  v15[-1] = MEMORY[0x2199CD934](&unk_21442D190, a2);
  sub_2141DB52C((uint64_t)v11, (uint64_t)sub_214340DA4, (uint64_t)&v15[-4], AssociatedTypeWitness, MEMORY[0x24BEE4078], MEMORY[0x24BEE4AE0] + 8, MEMORY[0x24BEE40A8], v14);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, AssociatedTypeWitness);
}

void sub_21433ED44()
{
  static ForEach<>._makeChartContent(content:inputs:)();
}

void _s9ItemStateVMa()
{
  JUMPOUT(0x2199CD874);
}

uint64_t sub_21433ED68@<X0>(_DWORD *a1@<X8>)
{
  return sub_21433FDBC(a1);
}

uint64_t sub_21433ED80()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  result = sub_214424500();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      result = swift_getAssociatedTypeWitness();
      if (v3 <= 0x3F)
        return swift_initClassMetadata2();
    }
  }
  return result;
}

void _s4ItemCMa()
{
  JUMPOUT(0x2199CD874);
}

uint64_t sub_21433EE88(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_21433EEC4(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return a1;
}

__n128 sub_21433EF28(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u32[0] = a2[1].n128_u32[0];
  *a1 = result;
  return result;
}

uint64_t sub_21433EF3C(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return a1;
}

uint64_t sub_21433EF80(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 20))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_21433EFC8(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_DWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 20) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 20) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t sub_21433F008()
{
  uint64_t result;
  unint64_t v1;

  result = sub_214424500();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_21433F074()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21433F084()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_21433F094()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for _ChartContentInputs(319);
  if (v1 <= 0x3F)
  {
    result = sub_214424500();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_21433F140(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  id v30;
  uint64_t v31;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v31 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v31 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    v7 = a3[17];
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = sub_21442423C();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    v11 = (int *)type metadata accessor for _ChartContentInputs(0);
    v12 = v11[5];
    v13 = &v8[v12];
    v14 = &v9[v12];
    v15 = sub_214423DB0();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
    v16 = v11[6];
    v17 = &v8[v16];
    v18 = &v9[v16];
    v19 = sub_2144244D0();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
    *(_DWORD *)&v8[v11[7]] = *(_DWORD *)&v9[v11[7]];
    v20 = a3[18];
    v21 = (char *)v4 + v20;
    v22 = (char *)a2 + v20;
    v23 = sub_214424500();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v21, v22, v23);
    v24 = a3[19];
    v25 = a3[20];
    v26 = *(void **)((char *)a2 + v24);
    *(uint64_t *)((char *)v4 + v24) = (uint64_t)v26;
    v27 = (char *)v4 + v25;
    v28 = (char *)a2 + v25;
    v29 = *((_QWORD *)v28 + 1);
    *(_QWORD *)v27 = *(_QWORD *)v28;
    *((_QWORD *)v27 + 1) = v29;
    *((_DWORD *)v27 + 4) = *((_DWORD *)v28 + 4);
    v30 = v26;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t sub_21433F2B4(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = a1 + a2[17];
  v5 = sub_21442423C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = type metadata accessor for _ChartContentInputs(0);
  v7 = v4 + *(int *)(v6 + 20);
  v8 = sub_214423DB0();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = v4 + *(int *)(v6 + 24);
  v10 = sub_2144244D0();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  v11 = a1 + a2[18];
  v12 = sub_214424500();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);

  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_DWORD *sub_21433F3A0(_DWORD *a1, _DWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  id v29;

  *a1 = *a2;
  v6 = a3[17];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_21442423C();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
  v10 = (int *)type metadata accessor for _ChartContentInputs(0);
  v11 = v10[5];
  v12 = &v7[v11];
  v13 = &v8[v11];
  v14 = sub_214423DB0();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  v15 = v10[6];
  v16 = &v7[v15];
  v17 = &v8[v15];
  v18 = sub_2144244D0();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
  *(_DWORD *)&v7[v10[7]] = *(_DWORD *)&v8[v10[7]];
  v19 = a3[18];
  v20 = (char *)a1 + v19;
  v21 = (char *)a2 + v19;
  v22 = sub_214424500();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v20, v21, v22);
  v23 = a3[19];
  v24 = a3[20];
  v25 = *(void **)((char *)a2 + v23);
  *(_QWORD *)((char *)a1 + v23) = v25;
  v26 = (char *)a1 + v24;
  v27 = (char *)a2 + v24;
  v28 = *((_QWORD *)v27 + 1);
  *(_QWORD *)v26 = *(_QWORD *)v27;
  *((_QWORD *)v26 + 1) = v28;
  *((_DWORD *)v26 + 4) = *((_DWORD *)v27 + 4);
  v29 = v25;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_DWORD *sub_21433F4E8(_DWORD *a1, _DWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  id v26;
  uint64_t v27;
  char *v28;
  char *v29;

  *a1 = *a2;
  v6 = a3[17];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_21442423C();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  v10 = (int *)type metadata accessor for _ChartContentInputs(0);
  v11 = v10[5];
  v12 = &v7[v11];
  v13 = &v8[v11];
  v14 = sub_214423DB0();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  v15 = v10[6];
  v16 = &v7[v15];
  v17 = &v8[v15];
  v18 = sub_2144244D0();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 24))(v16, v17, v18);
  *(_DWORD *)&v7[v10[7]] = *(_DWORD *)&v8[v10[7]];
  v19 = a3[18];
  v20 = (char *)a1 + v19;
  v21 = (char *)a2 + v19;
  v22 = sub_214424500();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 24))(v20, v21, v22);
  v23 = a3[19];
  v24 = *(void **)((char *)a2 + v23);
  v25 = *(void **)((char *)a1 + v23);
  *(_QWORD *)((char *)a1 + v23) = v24;
  v26 = v24;

  v27 = a3[20];
  v28 = (char *)a1 + v27;
  v29 = (char *)a2 + v27;
  *(_QWORD *)((char *)a1 + v27) = *(_QWORD *)((char *)a2 + v27);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v28 + 1) = *((_QWORD *)v29 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_DWORD *)v28 + 4) = *((_DWORD *)v29 + 4);
  return a1;
}

_DWORD *sub_21433F654(_DWORD *a1, _DWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;

  *a1 = *a2;
  v6 = a3[17];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_21442423C();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = (int *)type metadata accessor for _ChartContentInputs(0);
  v11 = v10[5];
  v12 = &v7[v11];
  v13 = &v8[v11];
  v14 = sub_214423DB0();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  v15 = v10[6];
  v16 = &v7[v15];
  v17 = &v8[v15];
  v18 = sub_2144244D0();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
  *(_DWORD *)&v7[v10[7]] = *(_DWORD *)&v8[v10[7]];
  v19 = a3[18];
  v20 = (char *)a1 + v19;
  v21 = (char *)a2 + v19;
  v22 = sub_214424500();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v20, v21, v22);
  v23 = a3[20];
  *(_QWORD *)((char *)a1 + a3[19]) = *(_QWORD *)((char *)a2 + a3[19]);
  v24 = (char *)a1 + v23;
  v25 = (char *)a2 + v23;
  *(_OWORD *)v24 = *(_OWORD *)v25;
  *((_DWORD *)v24 + 4) = *((_DWORD *)v25 + 4);
  return a1;
}

_DWORD *sub_21433F788(_DWORD *a1, _DWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  char *v26;
  char *v27;

  *a1 = *a2;
  v6 = a3[17];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_21442423C();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  v10 = (int *)type metadata accessor for _ChartContentInputs(0);
  v11 = v10[5];
  v12 = &v7[v11];
  v13 = &v8[v11];
  v14 = sub_214423DB0();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  v15 = v10[6];
  v16 = &v7[v15];
  v17 = &v8[v15];
  v18 = sub_2144244D0();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 40))(v16, v17, v18);
  *(_DWORD *)&v7[v10[7]] = *(_DWORD *)&v8[v10[7]];
  v19 = a3[18];
  v20 = (char *)a1 + v19;
  v21 = (char *)a2 + v19;
  v22 = sub_214424500();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 40))(v20, v21, v22);
  v23 = a3[19];
  v24 = *(void **)((char *)a1 + v23);
  *(_QWORD *)((char *)a1 + v23) = *(_QWORD *)((char *)a2 + v23);

  v25 = a3[20];
  v26 = (char *)a1 + v25;
  v27 = (char *)a2 + v25;
  *(_QWORD *)((char *)a1 + v25) = *(_QWORD *)v27;
  swift_bridgeObjectRelease();
  *((_QWORD *)v26 + 1) = *((_QWORD *)v27 + 1);
  swift_bridgeObjectRelease();
  *((_DWORD *)v26 + 4) = *((_DWORD *)v27 + 4);
  return a1;
}

uint64_t sub_21433F8E0()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21433F8EC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;

  v6 = type metadata accessor for _ChartContentInputs(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = a3[17];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v10 = type metadata accessor for _ChartContentOutputs(0);
  v7 = *(_QWORD *)(v10 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v10;
    v9 = a3[18];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v12 = *(_QWORD *)(a1 + a3[19]);
  if (v12 >= 0xFFFFFFFF)
    LODWORD(v12) = -1;
  return (v12 + 1);
}

uint64_t sub_21433F990()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_21433F99C(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  v8 = type metadata accessor for _ChartContentInputs(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = a4[17];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
  }
  result = type metadata accessor for _ChartContentOutputs(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = a4[18];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
  }
  *(_QWORD *)(a1 + a4[19]) = (a2 - 1);
  return result;
}

uint64_t sub_21433FA3C()
{
  uint64_t result;
  unint64_t v1;

  result = sub_214424500();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_21433FAB0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_214424500();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    *(_DWORD *)((char *)a1 + *(int *)(a3 + 68)) = *(_DWORD *)((char *)a2 + *(int *)(a3 + 68));
  }
  return a1;
}

uint64_t sub_21433FB38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_214424500();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  *(_DWORD *)(a1 + *(int *)(a3 + 68)) = *(_DWORD *)(a2 + *(int *)(a3 + 68));
  return a1;
}

uint64_t sub_21433FB94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_214424500();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_DWORD *)(a1 + *(int *)(a3 + 68)) = *(_DWORD *)(a2 + *(int *)(a3 + 68));
  return a1;
}

uint64_t sub_21433FBF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_214424500();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  *(_DWORD *)(a1 + *(int *)(a3 + 68)) = *(_DWORD *)(a2 + *(int *)(a3 + 68));
  return a1;
}

uint64_t sub_21433FC4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_214424500();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  *(_DWORD *)(a1 + *(int *)(a3 + 68)) = *(_DWORD *)(a2 + *(int *)(a3 + 68));
  return a1;
}

uint64_t sub_21433FCA8()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21433FCB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for _ChartContentOutputs(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_21433FCF4()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_21433FD04(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for _ChartContentOutputs(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

void sub_21433FD44()
{
  JUMPOUT(0x2199CD934);
}

void _s25ForEachPreferenceCombinerVMa()
{
  JUMPOUT(0x2199CD874);
}

uint64_t sub_21433FD60@<X0>(_DWORD *a1@<X8>)
{
  return sub_2141DC238(a1);
}

uint64_t sub_21433FD80()
{
  return sub_214340DC8();
}

void _s5ChildVMa()
{
  JUMPOUT(0x2199CD874);
}

void _s20ChildContainerValuesVMa_0()
{
  JUMPOUT(0x2199CD874);
}

uint64_t sub_21433FDBC@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result;

  sub_2141DAC40();
  result = sub_214423C90();
  *a1 = result;
  return result;
}

uint64_t sub_21433FE3C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = AGGraphSetValue();
  *a1 = result;
  return result;
}

void sub_21433FE74()
{
  sub_21433E4A4();
}

uint64_t sub_21433FEA8()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 24))();
}

uint64_t (*sub_21433FEC8())()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = v1;
  v3 = *(_OWORD *)(v0 + 24);
  *(_OWORD *)(v2 + 24) = v3;
  *(_QWORD *)(v2 + 40) = v3;
  return sub_21433FF24;
}

uint64_t sub_21433FF14()
{
  return swift_deallocObject();
}

uint64_t sub_21433FF24()
{
  return sub_214423CA8();
}

uint64_t sub_21433FF4C()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_21433FFE4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  _DWORD *v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  v6 = *(_QWORD *)(v4 + 64) + 7;
  if (v5 > 7
    || (*(_DWORD *)(v4 + 80) & 0x100000) != 0
    || ((((v6 + ((v5 + 8) & ~v5)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    v9 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v9 + ((v5 & 0xF8 ^ 0x1F8) & (v5 + 16)));
    swift_retain();
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    v10 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    v11 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    *v10 = *v11;
    v12 = ((unint64_t)v10 + v5 + 4) & ~v5;
    v13 = ((unint64_t)v11 + v5 + 4) & ~v5;
    (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v12, v13);
    v14 = (_QWORD *)((v6 + v12) & 0xFFFFFFFFFFFFF8);
    v15 = (_QWORD *)((v6 + v13) & 0xFFFFFFFFFFFFF8);
    *v14 = *v15;
    *(_QWORD *)(((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFF8);
    swift_bridgeObjectRetain();
  }
  return v3;
}

uint64_t sub_2143400EC(uint64_t a1, uint64_t a2)
{
  (*(void (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 8))((((a1 + 7) & 0xFFFFFFFFFFFFFFFCLL)
                                                                                            + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 80)
                                                                                            + 4) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 80));
  return swift_bridgeObjectRelease();
}

_DWORD *sub_21434014C(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;

  *a1 = *a2;
  v4 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v5 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v4 = *v5;
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = ((unint64_t)v4 + v7 + 4) & ~v7;
  v9 = ((unint64_t)v5 + v7 + 4) & ~v7;
  (*(void (**)(uint64_t, uint64_t))(v6 + 16))(v8, v9);
  v10 = *(_QWORD *)(v6 + 64) + 7;
  v11 = (_QWORD *)((v10 + v8) & 0xFFFFFFFFFFFFFFF8);
  v12 = (_QWORD *)((v10 + v9) & 0xFFFFFFFFFFFFFFF8);
  *v11 = *v12;
  *(_QWORD *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  return a1;
}

_DWORD *sub_2143401F4(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;

  *a1 = *a2;
  v4 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v5 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v4 = *v5;
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = ((unint64_t)v4 + v7 + 4) & ~v7;
  v9 = ((unint64_t)v5 + v7 + 4) & ~v7;
  (*(void (**)(uint64_t, uint64_t))(v6 + 24))(v8, v9);
  v10 = *(_QWORD *)(v6 + 64) + 7;
  v11 = (_QWORD *)((v10 + v8) & 0xFFFFFFFFFFFFFFF8);
  v12 = (_QWORD *)((v10 + v9) & 0xFFFFFFFFFFFFFFF8);
  *v11 = *v12;
  *(_QWORD *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_DWORD *sub_2143402A8(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;

  *a1 = *a2;
  v4 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v5 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v4 = *v5;
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = ((unint64_t)v4 + v7 + 4) & ~v7;
  v9 = ((unint64_t)v5 + v7 + 4) & ~v7;
  (*(void (**)(uint64_t, uint64_t))(v6 + 32))(v8, v9);
  v10 = *(_QWORD *)(v6 + 64) + 7;
  v11 = (_QWORD *)((v10 + v8) & 0xFFFFFFFFFFFFFFF8);
  v12 = (_QWORD *)((v10 + v9) & 0xFFFFFFFFFFFFFFF8);
  *v11 = *v12;
  *(_QWORD *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFF8);
  return a1;
}

_DWORD *sub_21434034C(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;

  *a1 = *a2;
  v4 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v5 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v4 = *v5;
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = ((unint64_t)v4 + v7 + 4) & ~v7;
  v9 = ((unint64_t)v5 + v7 + 4) & ~v7;
  (*(void (**)(uint64_t, uint64_t))(v6 + 40))(v8, v9);
  v10 = *(_QWORD *)(v6 + 64) + 7;
  v11 = (_QWORD *)((v10 + v8) & 0xFFFFFFFFFFFFFFF8);
  v12 = (_QWORD *)((v10 + v9) & 0xFFFFFFFFFFFFFFF8);
  *v11 = *v12;
  *(_QWORD *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFF8);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_2143403F8(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v13;
  unint64_t v14;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = *(_QWORD *)(v4 + 64) + 7;
  if (v6 >= a2)
  {
    v13 = (((a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + v7 + 4) & ~v7;
    if (v5 < 0x7FFFFFFF)
    {
      v14 = *(_QWORD *)((((v8 + v13) & 0xFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFF8);
      if (v14 >= 0xFFFFFFFF)
        LODWORD(v14) = -1;
      return (v14 + 1);
    }
    else
    {
      return (*(uint64_t (**)(unint64_t))(v4 + 48))(v13);
    }
  }
  else
  {
    if (((((((v8 + ((v7 + 8) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFF8) != 0)
      v9 = 2;
    else
      v9 = a2 - v6 + 1;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    return ((uint64_t (*)(void))((char *)&loc_21434048C + 4 * byte_21442CDA0[v11]))();
  }
}

void sub_21434052C(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = *(unsigned __int8 *)(v5 + 80);
  if (v6 >= a3)
  {
    v10 = 0;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((((*(_DWORD *)(v5 + 64) + 7 + (((_DWORD)v7 + 8) & ~(_DWORD)v7)) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v8 = a3 - v6 + 1;
    else
      v8 = 2;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X14 }
  }
  if (((((*(_DWORD *)(v5 + 64) + 7 + (((_DWORD)v7 + 8) & ~(_DWORD)v7)) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    v11 = ~v6 + a2;
    bzero(a1, ((((*(_QWORD *)(v5 + 64) + 7 + ((v7 + 8) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8);
    *a1 = v11;
  }
  __asm { BR              X10 }
}

void sub_21434063C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x2143406C4);
}

void sub_214340644(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x21434064CLL);
  JUMPOUT(0x2143406C4);
}

void sub_2143406A0()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x2143406C4);
}

void sub_2143406A8()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x2143406C4);
}

uint64_t sub_2143406B0@<X0>(int a1@<W1>, unsigned int a2@<W2>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_WORD *)(v6 + v7) = 0;
  if (!a1)
    JUMPOUT(0x2143406C4);
  if (a2 < 0x7FFFFFFF)
  {
    if ((a1 & 0x80000000) == 0)
      JUMPOUT(0x2143406C0);
    JUMPOUT(0x2143406BCLL);
  }
  return (*(uint64_t (**)(unint64_t))(v4 + 56))((((v6 + 7) & 0xFFFFFFFFFFFFFFFCLL) + v5 + 4) & a3);
}

uint64_t sub_2143406DC()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_214340758(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v10;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  if ((v5 | 3uLL) > 7
    || (*(_DWORD *)(v4 + 80) & 0x100000) != 0
    || ((v5 + 8) & (unint64_t)~v5) + *(_QWORD *)(v4 + 64) > 0x18)
  {
    v8 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v8 + ((v5 + 16) & ~(v5 | 3)));
    swift_retain();
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    v9 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    v10 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    *v9 = *v10;
    (*(void (**)(unint64_t, unint64_t))(v4 + 16))(((unint64_t)v9 + v5 + 4) & ~v5, ((unint64_t)v10 + v5 + 4) & ~v5);
  }
  return v3;
}

uint64_t sub_21434080C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 8))((((a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 80));
}

_DWORD *sub_214340834(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;

  *a1 = *a2;
  v4 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v5 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v4 = *v5;
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 16))(((unint64_t)v4 + *(unsigned __int8 *)(v6 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)v5 + *(unsigned __int8 *)(v6 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

_DWORD *sub_214340898(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;

  *a1 = *a2;
  v4 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v5 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v4 = *v5;
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 24))(((unint64_t)v4 + *(unsigned __int8 *)(v6 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)v5 + *(unsigned __int8 *)(v6 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

_DWORD *sub_2143408FC(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;

  *a1 = *a2;
  v4 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v5 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v4 = *v5;
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 32))(((unint64_t)v4 + *(unsigned __int8 *)(v6 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)v5 + *(unsigned __int8 *)(v6 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

_DWORD *sub_214340960(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;

  *a1 = *a2;
  v4 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v5 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v4 = *v5;
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 40))(((unint64_t)v4 + *(unsigned __int8 *)(v6 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)v5 + *(unsigned __int8 *)(v6 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

uint64_t sub_2143409C4(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  char v9;
  int v10;
  unsigned int v11;
  int v12;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v8 = ((v6 + 8) & ~v6) + *(_QWORD *)(v4 + 64);
  v9 = 8 * v8;
  if (v8 <= 3)
  {
    v11 = ((v7 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      v10 = *(_DWORD *)(a1 + v8);
      if (!v10)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v11 > 0xFF)
    {
      v10 = *(unsigned __int16 *)(a1 + v8);
      if (!*(_WORD *)(a1 + v8))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v11 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(unint64_t))(v4 + 48))((((a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + v6 + 4) & ~v6);
      return 0;
    }
  }
  v10 = *(unsigned __int8 *)(a1 + v8);
  if (!*(_BYTE *)(a1 + v8))
    goto LABEL_18;
LABEL_11:
  v12 = (v10 - 1) << v9;
  if (v8 > 3)
    v12 = 0;
  if (!(_DWORD)v8)
    return v5 + v12 + 1;
  if (v8 > 3)
    LODWORD(v8) = 4;
  return ((uint64_t (*)(void))((char *)&loc_214340A84 + 4 * byte_21442CDAF[(v8 - 1)]))();
}

void sub_214340AEC(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  size_t v9;
  BOOL v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(unsigned __int8 *)(v6 + 80);
  v9 = ((v8 + 8) & ~v8) + *(_QWORD *)(v6 + 64);
  v10 = a3 >= v7;
  v11 = a3 - v7;
  if (v11 != 0 && v10)
  {
    if (v9 <= 3)
    {
      v14 = ((v11 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v14))
      {
        v12 = 4u;
      }
      else if (v14 >= 0x100)
      {
        v12 = 2;
      }
      else
      {
        v12 = v14 > 1;
      }
    }
    else
    {
      v12 = 1u;
    }
  }
  else
  {
    v12 = 0;
  }
  if (v7 < a2)
  {
    v13 = ~v7 + a2;
    if (v9 < 4)
    {
      if ((_DWORD)v9)
      {
        v15 = v13 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if ((_DWORD)v9 == 3)
        {
          *a1 = v15;
          *((_BYTE *)a1 + 2) = BYTE2(v15);
        }
        else if ((_DWORD)v9 == 2)
        {
          *a1 = v15;
        }
        else
        {
          *(_BYTE *)a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, ((v8 + 8) & ~v8) + *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v13;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

void sub_214340CC0()
{
  JUMPOUT(0x2199CD934);
}

void sub_214340CD0()
{
  JUMPOUT(0x2199CD934);
}

void sub_214340CE0()
{
  JUMPOUT(0x2199CD934);
}

uint64_t sub_214340CF0@<X0>(uint64_t a1@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t Value;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(a1, Value, AssociatedTypeWitness);
}

unint64_t sub_214340D60()
{
  unint64_t result;

  result = qword_254D6B198[0];
  if (!qword_254D6B198[0])
  {
    result = MEMORY[0x2199CD934](&unk_214430284, &type metadata for DynamicViewContentOffsetTraitKey);
    atomic_store(result, qword_254D6B198);
  }
  return result;
}

uint64_t sub_214340DA4()
{
  return sub_214340DC8();
}

uint64_t sub_214340DC8()
{
  swift_getAssociatedTypeWitness();
  return AGGraphSetOutputValue();
}

uint64_t ChartContent.accessibilityLabel(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return sub_2143415D4(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t ChartContent.accessibilityLabel(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_214341670(a1, a2, a3, a4, a5, a6, (void (*)(uint64_t, uint64_t))ChartContent.accessibilityLabel(_:));
}

uint64_t ChartContent.accessibilityLabel<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_214341754(a1, a2, a3, a4, a5, (void (*)(void))ChartContent.accessibilityLabel(_:));
}

uint64_t VectorizedChartContent.accessibilityLabel(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_2143425F4(a1, a2, a3, type metadata accessor for ModifiedChartContent_AccessibilityLabel, a4);
}

uint64_t VectorizedChartContent.accessibilityLabel(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_21434184C(a1, a2, a3, type metadata accessor for ModifiedChartContent_AccessibilityLabel, a4);
}

uint64_t sub_214340E48()
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return sub_21442480C();
}

uint64_t sub_214340EC4@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  char v4;
  uint64_t v5;

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  result = sub_21442480C();
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = v4 & 1;
  *(_QWORD *)(a1 + 24) = v5;
  return result;
}

uint64_t VectorizedChartContent.accessibilityLabel<A>(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return sub_21434197C(a1, a2, a3, a4, type metadata accessor for ModifiedChartContent_AccessibilityLabel, a5);
}

uint64_t sub_214340F64(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  MEMORY[0x24BDAC7A8](a1);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))((char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v1, a1);
  return sub_214424818();
}

uint64_t sub_214340FE8@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t result;
  uint64_t v5;
  char v6;
  uint64_t v7;

  result = sub_214340F64(*(_QWORD *)(a2 + a1 - 24));
  *(_QWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = v6 & 1;
  *(_QWORD *)(a3 + 24) = v7;
  return result;
}

uint64_t sub_214341028()
{
  return 32;
}

__n128 sub_214341034(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_214341040(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65[4];
  __int128 v66;
  _BYTE v67[25];
  uint64_t v68[90];
  _BYTE v69[136];
  _QWORD __src[90];
  _QWORD __dst[90];
  _QWORD v72[6];
  char v73;
  _QWORD v74[6];
  char v75;
  _QWORD v76[4];
  __int128 v77;
  _BYTE v78[25];
  _OWORD v79[3];
  char v80;
  _BYTE v81[136];
  _QWORD v82[6];
  char v83;
  _QWORD v84[6];
  char v85;
  _QWORD v86[8];
  char v87;
  _QWORD v88[4];
  __int128 v89;
  __int128 v90;
  char v91;

  v58 = *a2;
  v7 = *((_QWORD *)a2 + 1);
  v8 = type metadata accessor for ModifiedChartContent_AccessibilityLabel(0, a3, a4, a5);
  v60 = a1;
  sub_214252010(0, 0, 0, 0, *(uint64_t **)(a1 + *(int *)(v8 + 44)), __dst);
  v9 = __dst[0];
  v10 = __dst[1];
  v11 = __dst[2];
  v12 = __dst[3];
  v13 = __dst[4];
  v57 = __dst[5];
  v14 = __dst[6];
  v15 = __dst[7];
  v62 = __dst[8];
  v59 = v7;
  v16 = v7 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_environment;
  swift_beginAccess();
  v54 = type metadata accessor for ChartContentRenderContext.Environment(0);
  v55 = v16;
  v17 = v16 + *(int *)(v54 + 108);
  v56 = v14;
  v63 = v10;
  v64 = v15;
  v53 = v11;
  if (!*(_QWORD *)(v17 + 24))
  {
    memset(__src, 0, 24);
    __src[3] = 2;
    bzero(&__src[4], 0x2A9uLL);
    swift_retain();
    goto LABEL_5;
  }
  sub_21427362C(v17, (uint64_t)v68);
  swift_retain();
  sub_214253714(a4, __src);
  sub_21420D92C((uint64_t)v68);
  if (__src[3] == 2)
  {
LABEL_5:
    type metadata accessor for TypedVectorizedProperties(255, a4, v18, v19);
    v35 = sub_214425388();
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v35 - 8) + 8))(__src, v35);
    memset(v72, 0, 24);
    v72[3] = 1;
    v72[5] = 0;
    v72[4] = 0;
    v73 = 0;
    memset(v74, 0, 24);
    v74[3] = 1;
    v74[5] = 0;
    v74[4] = 0;
    v75 = 0;
    memset(v76, 0, 24);
    v76[3] = 1;
    v77 = 0u;
    memset(v78, 0, sizeof(v78));
    memset(v65, 0, 24);
    v65[3] = 1;
    v66 = 0u;
    memset(v67, 0, sizeof(v67));
    memset(v79, 0, sizeof(v79));
    v80 = -4;
    sub_21427384C((uint64_t)v69);
    type metadata accessor for TypedVectorizedProperties.Position(255, a4, v36, v37);
    v38 = sub_214425388();
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v38 - 8) + 32))(v81, v69, v38);
    memset(v82, 0, 24);
    v82[3] = 1;
    v82[5] = 0;
    v82[4] = 0;
    v83 = 0;
    memset(v84, 0, 24);
    v84[3] = 1;
    v84[5] = 0;
    v84[4] = 0;
    v85 = 0;
    v86[0] = v9;
    v86[1] = v10;
    v86[2] = v11;
    v86[3] = v12;
    v39 = v13;
    v86[4] = v13;
    v86[5] = v57;
    v21 = v9;
    v86[6] = v14;
    v86[7] = v15;
    v34 = v62;
    v87 = v62;
    memset(v88, 0, 24);
    v88[3] = 1;
    v89 = 0u;
    v90 = 0u;
    v91 = 0;
    sub_214253428((uint64_t)v72, (uint64_t)v74, (uint64_t)v76, (uint64_t)v65, (uint64_t)v79, (uint64_t)v81, (uint64_t)v82, (uint64_t)v84, (uint64_t)v68, (uint64_t)v86, (uint64_t)v88, a4);
    v40 = a4;
    v32 = v12;
    v27 = v63;
    sub_2142536C0(v68, v40, v41, v42, v65);
    swift_beginAccess();
    v33 = v53;
    v43 = v16 + *(int *)(v54 + 108);
    sub_2141EF2B4(v9, v63, v53, v32);
    v28 = v56;
    v29 = v57;
    v26 = v39;
    sub_214282CB0(v39, v57, v56, v64, v62);
    sub_2143438F0((uint64_t)v65, v43);
    swift_endAccess();
    goto LABEL_6;
  }
  memcpy(__dst, __src, 0x2C9uLL);
  v51 = __dst[73];
  v52 = __dst[72];
  v49 = __dst[75];
  v50 = __dst[74];
  v47 = __dst[77];
  v48 = __dst[76];
  v45 = __dst[79];
  v46 = __dst[78];
  v20 = __dst[80];
  sub_2141EF2B4(v9, v10, v11, v12);
  v21 = v9;
  sub_214282CB0(v13, v57, v56, v15, v62);
  sub_214343980(v52, v51, v50, v49, v48, v47, v46, v45, v20);
  __dst[72] = v9;
  __dst[73] = v63;
  __dst[74] = v11;
  __dst[75] = v12;
  __dst[76] = v13;
  __dst[77] = v57;
  __dst[78] = v56;
  __dst[79] = v15;
  LOBYTE(__dst[80]) = v62;
  v24 = type metadata accessor for TypedVectorizedProperties(0, a4, v22, v23);
  v25 = *(_QWORD *)(v24 - 8);
  (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v25 + 16))(__src, __dst, v24);
  v26 = v13;
  v27 = v63;
  v28 = v56;
  v29 = v57;
  sub_2142536C0(__src, a4, v30, v31, v68);
  swift_beginAccess();
  v32 = v12;
  v33 = v11;
  v34 = v62;
  sub_2143438F0((uint64_t)v68, v55 + *(int *)(v54 + 108));
  swift_endAccess();
  (*(void (**)(_QWORD *, uint64_t))(v25 + 8))(__dst, v24);
LABEL_6:
  LOBYTE(__dst[0]) = v58;
  __dst[1] = v59;
  (*(void (**)(uint64_t, _QWORD *))(a5 + 40))(v60, __dst);
  sub_21422F7F0(v21, v27, v33, v32);
  return sub_214274208(v26, v29, v28, v64, v34);
}

uint64_t sub_214341598(uint64_t a1, __int128 *a2, uint64_t *a3)
{
  return sub_214343344(a1, a2, a3[2], a3[3], a3[4]);
}

uint64_t sub_2143415B8(uint64_t a1, char *a2, uint64_t *a3)
{
  return sub_214341040(a1, a2, a3[2], a3[3], a3[4]);
}

uint64_t ChartContent.accessibilityValue(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return sub_2143415D4(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t sub_2143415D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t *KeyPath;
  _QWORD v16[4];

  KeyPath = (uint64_t *)swift_getKeyPath();
  v16[0] = a1;
  v16[1] = a2;
  v16[2] = a3 & 1;
  v16[3] = a4;
  sub_21435898C(KeyPath, (uint64_t)v16, a5, a6, a7);
  return swift_release();
}

uint64_t ChartContent.accessibilityValue(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_214341670(a1, a2, a3, a4, a5, a6, (void (*)(uint64_t, uint64_t))ChartContent.accessibilityValue(_:));
}

uint64_t sub_214341670(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(uint64_t, uint64_t))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v8 = sub_21442480C();
  v10 = v9;
  v12 = v11 & 1;
  a7(v8, v9);
  sub_2141ED0BC(v8, v10, v12);
  return swift_bridgeObjectRelease();
}

uint64_t ChartContent.accessibilityValue<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_214341754(a1, a2, a3, a4, a5, (void (*)(void))ChartContent.accessibilityValue(_:));
}

uint64_t sub_214341754(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(void))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v15;

  MEMORY[0x24BDAC7A8](a1);
  (*(void (**)(char *))(v8 + 16))((char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = sub_214424818();
  v11 = v10;
  v13 = v12 & 1;
  a6();
  sub_2141ED0BC(v9, v11, v13);
  return swift_bridgeObjectRelease();
}

uint64_t VectorizedChartContent.accessibilityValue(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_2143425F4(a1, a2, a3, type metadata accessor for ModifiedChartContent_AccessibilityValue, a4);
}

uint64_t VectorizedChartContent.accessibilityValue(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_21434184C(a1, a2, a3, type metadata accessor for ModifiedChartContent_AccessibilityValue, a4);
}

uint64_t sub_21434184C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (*a4)(_QWORD, uint64_t, _QWORD, uint64_t)@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t (*v18)(_QWORD, uint64_t, _QWORD, uint64_t);

  v18 = a4;
  v9 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v5, a2);
  swift_getKeyPath();
  v12 = (_QWORD *)MEMORY[0x24BEE46A8];
  sub_2144258E0();
  v13 = (uint64_t *)sub_21442555C();
  swift_release();
  v14 = *(_QWORD *)(a3 + 8);
  v15 = *v13;
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(a5, v11, a2);
  result = v18(0, a2, *(_QWORD *)(v15 + *v12), v14);
  *(_QWORD *)(a5 + *(int *)(result + 44)) = v13;
  return result;
}

uint64_t VectorizedChartContent.accessibilityValue<A>(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return sub_21434197C(a1, a2, a3, a4, type metadata accessor for ModifiedChartContent_AccessibilityValue, a5);
}

uint64_t sub_21434197C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (*a5)(_QWORD, uint64_t, _QWORD, uint64_t)@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t (*v21)(_QWORD, uint64_t, _QWORD, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v21 = a5;
  v11 = *a1;
  v12 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v14 = (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, v6, a2);
  v22 = a2;
  v15 = (_QWORD *)MEMORY[0x24BEE46A8];
  v23 = *(_QWORD *)(*MEMORY[0x24BEE46A8] + v11 + 8);
  v24 = a3;
  v25 = a4;
  swift_getKeyPath();
  sub_2144258E0();
  v16 = (uint64_t *)sub_21442555C();
  swift_release();
  v17 = *(_QWORD *)(a3 + 8);
  v18 = *v16;
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(a6, v14, a2);
  result = v21(0, a2, *(_QWORD *)(v18 + *v15), v17);
  *(_QWORD *)(a6 + *(int *)(result + 44)) = v16;
  return result;
}

uint64_t sub_214341ABC(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59[4];
  __int128 v60;
  _BYTE v61[25];
  uint64_t v62[90];
  _BYTE v63[136];
  _QWORD __src[90];
  _QWORD __dst[90];
  _QWORD v66[6];
  char v67;
  _QWORD v68[6];
  char v69;
  _QWORD v70[4];
  __int128 v71;
  _BYTE v72[25];
  _OWORD v73[3];
  char v74;
  _BYTE v75[136];
  _QWORD v76[6];
  char v77;
  _QWORD v78[6];
  char v79;
  _QWORD v80[4];
  __int128 v81;
  __int128 v82;
  char v83;
  _QWORD v84[8];
  char v85;

  v53 = *a2;
  v7 = *((_QWORD *)a2 + 1);
  v8 = type metadata accessor for ModifiedChartContent_AccessibilityValue(0, a3, a4, a5);
  v55 = a1;
  sub_214252010(0, 0, 0, 0, *(uint64_t **)(a1 + *(int *)(v8 + 44)), __dst);
  v9 = __dst[0];
  v10 = __dst[1];
  v11 = __dst[2];
  v12 = __dst[3];
  v13 = __dst[4];
  v52 = __dst[5];
  v57 = __dst[7];
  v58 = __dst[6];
  v14 = __dst[8];
  v54 = v7;
  v15 = v7 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_environment;
  swift_beginAccess();
  v50 = type metadata accessor for ChartContentRenderContext.Environment(0);
  v51 = v15;
  v16 = v15 + *(int *)(v50 + 108);
  if (!*(_QWORD *)(v16 + 24))
  {
    memset(__src, 0, 24);
    __src[3] = 2;
    bzero(&__src[4], 0x2A9uLL);
    swift_retain();
    goto LABEL_5;
  }
  sub_21427362C(v16, (uint64_t)v62);
  swift_retain();
  sub_214253714(a4, __src);
  sub_21420D92C((uint64_t)v62);
  if (__src[3] == 2)
  {
LABEL_5:
    type metadata accessor for TypedVectorizedProperties(255, a4, v17, v18);
    v32 = sub_214425388();
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v32 - 8) + 8))(__src, v32);
    memset(v66, 0, 24);
    v66[3] = 1;
    v66[5] = 0;
    v66[4] = 0;
    v67 = 0;
    memset(v68, 0, 24);
    v68[3] = 1;
    v68[5] = 0;
    v68[4] = 0;
    v69 = 0;
    memset(v70, 0, 24);
    v70[3] = 1;
    v71 = 0u;
    memset(v72, 0, sizeof(v72));
    memset(v59, 0, 24);
    v59[3] = 1;
    v60 = 0u;
    memset(v61, 0, sizeof(v61));
    memset(v73, 0, sizeof(v73));
    v74 = -4;
    sub_21427384C((uint64_t)v63);
    type metadata accessor for TypedVectorizedProperties.Position(255, a4, v33, v34);
    v35 = sub_214425388();
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v35 - 8) + 32))(v75, v63, v35);
    memset(v76, 0, 24);
    v76[3] = 1;
    v76[5] = 0;
    v76[4] = 0;
    v77 = 0;
    memset(v78, 0, 24);
    v78[3] = 1;
    v78[5] = 0;
    v78[4] = 0;
    v79 = 0;
    memset(v80, 0, 24);
    v80[3] = 1;
    v81 = 0u;
    v82 = 0u;
    v83 = 0;
    v84[0] = v9;
    v84[1] = v10;
    v84[2] = v11;
    v84[3] = v12;
    v84[4] = v13;
    v84[5] = v52;
    v20 = v12;
    v84[6] = v58;
    v84[7] = v57;
    v85 = v14;
    sub_214253428((uint64_t)v66, (uint64_t)v68, (uint64_t)v70, (uint64_t)v59, (uint64_t)v73, (uint64_t)v75, (uint64_t)v76, (uint64_t)v78, (uint64_t)v62, (uint64_t)v80, (uint64_t)v84, a4);
    v36 = a4;
    v29 = v13;
    v23 = v52;
    sub_2142536C0(v62, v36, v37, v38, v59);
    swift_beginAccess();
    v39 = v15 + *(int *)(v50 + 108);
    sub_2141EF2B4(v9, v10, v11, v12);
    sub_214282CB0(v29, v52, v58, v57, v14);
    sub_2143438F0((uint64_t)v59, v39);
    swift_endAccess();
    goto LABEL_6;
  }
  memcpy(__dst, __src, 0x2C9uLL);
  v47 = __dst[82];
  v48 = __dst[81];
  v45 = __dst[84];
  v46 = __dst[83];
  v43 = __dst[86];
  v44 = __dst[85];
  v41 = __dst[88];
  v42 = __dst[87];
  v19 = __dst[89];
  sub_2141EF2B4(v9, v10, v11, v12);
  v49 = v10;
  v20 = v12;
  v21 = v13;
  v22 = v13;
  v23 = v52;
  sub_214282CB0(v22, v52, v58, v57, v14);
  sub_214343980(v48, v47, v46, v45, v44, v43, v42, v41, v19);
  __dst[81] = v9;
  __dst[82] = v49;
  __dst[83] = v11;
  __dst[84] = v12;
  __dst[85] = v21;
  __dst[86] = v52;
  __dst[87] = v58;
  __dst[88] = v57;
  LOBYTE(__dst[89]) = v14;
  v26 = type metadata accessor for TypedVectorizedProperties(0, a4, v24, v25);
  v27 = *(_QWORD *)(v26 - 8);
  (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v27 + 16))(__src, __dst, v26);
  v28 = a4;
  v29 = v21;
  v10 = v49;
  sub_2142536C0(__src, v28, v30, v31, v62);
  swift_beginAccess();
  sub_2143438F0((uint64_t)v62, v51 + *(int *)(v50 + 108));
  swift_endAccess();
  (*(void (**)(_QWORD *, uint64_t))(v27 + 8))(__dst, v26);
LABEL_6:
  LOBYTE(__dst[0]) = v53;
  __dst[1] = v54;
  (*(void (**)(uint64_t, _QWORD *))(a5 + 40))(v55, __dst);
  sub_21422F7F0(v9, v10, v11, v20);
  return sub_214274208(v29, v23, v58, v57, v14);
}

uint64_t sub_214341FE4(uint64_t a1, char *a2, uint64_t *a3)
{
  return sub_214341ABC(a1, a2, a3[2], a3[3], a3[4]);
}

uint64_t ChartContent.accessibilityIdentifier(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t *KeyPath;
  _QWORD v12[2];

  KeyPath = (uint64_t *)swift_getKeyPath();
  v12[0] = a1;
  v12[1] = a2;
  sub_21435898C(KeyPath, (uint64_t)v12, a3, a4, a5);
  return swift_release();
}

uint64_t VectorizedChartContent.accessibilityIdentifier(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_2143425F4(a1, a2, a3, type metadata accessor for ModifiedChartContent_AccessibilityIdentifier, a4);
}

uint64_t sub_21434207C(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(_QWORD *, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52[4];
  __int128 v53;
  _BYTE v54[25];
  uint64_t v55[90];
  _BYTE v56[136];
  _QWORD __src[90];
  _QWORD __dst[90];
  _QWORD v59[6];
  char v60;
  _QWORD v61[6];
  char v62;
  _QWORD v63[4];
  __int128 v64;
  _BYTE v65[25];
  _OWORD v66[3];
  char v67;
  _BYTE v68[136];
  _QWORD v69[6];
  char v70;
  _QWORD v71[6];
  char v72;
  _QWORD v73[4];
  __int128 v74;
  __int128 v75;
  char v76;

  v49 = *a2;
  v7 = *((_QWORD *)a2 + 1);
  v8 = type metadata accessor for ModifiedChartContent_AccessibilityIdentifier(0, a3, a4, a5);
  v51 = a1;
  sub_214252010(0, 0, 0, 0, *(uint64_t **)(a1 + *(int *)(v8 + 44)), __dst);
  v9 = __dst[0];
  v10 = __dst[1];
  v11 = __dst[2];
  v12 = __dst[3];
  v13 = __dst[4];
  v14 = __dst[5];
  v47 = __dst[6];
  v50 = v7;
  v15 = v7 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_environment;
  swift_beginAccess();
  v46 = type metadata accessor for ChartContentRenderContext.Environment(0);
  v16 = v15 + *(int *)(v46 + 108);
  if (!*(_QWORD *)(v16 + 24))
  {
    memset(__src, 0, 24);
    __src[3] = 2;
    bzero(&__src[4], 0x2A9uLL);
    swift_retain();
    goto LABEL_5;
  }
  sub_21427362C(v16, (uint64_t)v55);
  swift_retain();
  sub_214253714(a4, __src);
  sub_21420D92C((uint64_t)v55);
  if (__src[3] == 2)
  {
LABEL_5:
    type metadata accessor for TypedVectorizedProperties(255, a4, v17, v18);
    v32 = sub_214425388();
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v32 - 8) + 8))(__src, v32);
    memset(v59, 0, 24);
    v59[3] = 1;
    v59[5] = 0;
    v59[4] = 0;
    v60 = 0;
    memset(v61, 0, 24);
    v61[3] = 1;
    v61[5] = 0;
    v61[4] = 0;
    v62 = 0;
    memset(v63, 0, 24);
    v63[3] = 1;
    v64 = 0u;
    memset(v65, 0, sizeof(v65));
    memset(v52, 0, 24);
    v52[3] = 1;
    v53 = 0u;
    memset(v54, 0, sizeof(v54));
    memset(v66, 0, sizeof(v66));
    v67 = -4;
    sub_21427384C((uint64_t)v56);
    type metadata accessor for TypedVectorizedProperties.Position(255, a4, v33, v34);
    v35 = sub_214425388();
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v35 - 8) + 32))(v68, v56, v35);
    v69[0] = v9;
    v69[1] = v10;
    v69[2] = v11;
    v69[3] = v12;
    v69[4] = v13;
    v69[5] = v14;
    v70 = v47;
    memset(v71, 0, 24);
    v71[3] = 1;
    v71[4] = 0;
    v71[5] = 0;
    v72 = 0;
    memset(v73, 0, 24);
    v73[3] = 1;
    v31 = v14;
    v23 = v47;
    v76 = 0;
    v74 = 0u;
    v75 = 0u;
    sub_214253428((uint64_t)v59, (uint64_t)v61, (uint64_t)v63, (uint64_t)v52, (uint64_t)v66, (uint64_t)v68, (uint64_t)v69, (uint64_t)v71, (uint64_t)v55, (uint64_t)v73, (uint64_t)v73, a4);
    sub_2142536C0(v55, a4, v36, v37, v52);
    swift_beginAccess();
    v38 = v15 + *(int *)(v46 + 108);
    sub_2141EF2B4(v9, v10, v11, v12);
    sub_214282C84(v13, v31, v47);
    sub_2143438F0((uint64_t)v52, v38);
    swift_endAccess();
    goto LABEL_6;
  }
  memcpy(__dst, __src, 0x2C9uLL);
  v19 = __dst[58];
  v43 = __dst[60];
  v44 = __dst[59];
  v20 = __dst[62];
  v41 = __dst[63];
  v42 = __dst[61];
  v40 = __dst[64];
  sub_2141EF2B4(v9, v10, v11, v12);
  v45 = v9;
  v21 = v14;
  v22 = v14;
  v23 = v47;
  sub_214282C84(v13, v22, v47);
  sub_214343938(v19, v44, v43, v42, v20, v41, v40);
  __dst[58] = v45;
  __dst[59] = v10;
  __dst[60] = v11;
  __dst[61] = v12;
  __dst[62] = v13;
  __dst[63] = v21;
  LOBYTE(__dst[64]) = v47;
  v26 = type metadata accessor for TypedVectorizedProperties(0, a4, v24, v25);
  v27 = *(_QWORD *)(v26 - 8);
  (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v27 + 16))(__src, __dst, v26);
  sub_2142536C0(__src, a4, v28, v29, v55);
  swift_beginAccess();
  sub_2143438F0((uint64_t)v55, v15 + *(int *)(v46 + 108));
  swift_endAccess();
  v30 = *(void (**)(_QWORD *, uint64_t))(v27 + 8);
  v31 = v21;
  v9 = v45;
  v30(__dst, v26);
LABEL_6:
  LOBYTE(__dst[0]) = v49;
  __dst[1] = v50;
  (*(void (**)(uint64_t, _QWORD *))(a5 + 40))(v51, __dst);
  sub_21422F7F0(v9, v10, v11, v12);
  return sub_21427429C(v13, v31, v23);
}

uint64_t sub_214342528(uint64_t a1, char *a2, uint64_t *a3)
{
  return sub_21434207C(a1, a2, a3[2], a3[3], a3[4]);
}

uint64_t ChartContent.accessibilityHidden(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  char v7;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v7 = a1;
  v9 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v4, a2);
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(a4, v11, a2);
  result = type metadata accessor for AXHiddenModifier(0, a2, a3, v12);
  *(_BYTE *)(a4 + *(int *)(result + 36)) = v7;
  return result;
}

uint64_t VectorizedChartContent.accessibilityHidden(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_2143425F4(a1, a2, a3, type metadata accessor for ModifiedChartContent_AccessibilityHidden, a4);
}

uint64_t sub_2143425F4@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (*a4)(_QWORD, uint64_t, _QWORD, uint64_t)@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v11 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v5, a2);
  v14 = *(_QWORD *)(a3 + 8);
  v15 = *a1;
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(a5, v13, a2);
  *(_QWORD *)(a5 + *(int *)(a4(0, a2, *(_QWORD *)(v15 + *MEMORY[0x24BEE46A8]), v14) + 44)) = a1;
  return swift_retain();
}

_UNKNOWN **sub_2143426C8()
{
  return &off_254D6C490;
}

_UNKNOWN **sub_2143426D4()
{
  return &off_254D6C490;
}

void sub_2143426E0(uint64_t *a1)
{
  sub_214342800(a1, (void (*)(uint64_t, uint64_t, uint64_t, _QWORD))type metadata accessor for ModifiedChartContent_AccessibilityLabel);
}

uint64_t type metadata accessor for ModifiedChartContent_AccessibilityLabel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2141D8E88(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ModifiedChartContent_AccessibilityLabel);
}

void sub_214342700(uint64_t *a1)
{
  sub_214342748(a1, (void (*)(uint64_t, uint64_t, uint64_t, _QWORD))type metadata accessor for ModifiedChartContent_AccessibilityLabel);
}

void sub_214342714(uint64_t *a1)
{
  sub_214342800(a1, (void (*)(uint64_t, uint64_t, uint64_t, _QWORD))type metadata accessor for ModifiedChartContent_AccessibilityValue);
}

uint64_t type metadata accessor for ModifiedChartContent_AccessibilityValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2141D8E88(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ModifiedChartContent_AccessibilityValue);
}

void sub_214342734(uint64_t *a1)
{
  sub_214342748(a1, (void (*)(uint64_t, uint64_t, uint64_t, _QWORD))type metadata accessor for ModifiedChartContent_AccessibilityValue);
}

void sub_214342748(uint64_t *a1, void (*a2)(uint64_t, uint64_t, uint64_t, _QWORD))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;

  v3 = *a1;
  v4 = a1[2];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  a2(255, v3, AssociatedTypeWitness, *(_QWORD *)(v4 + 8));
  JUMPOUT(0x2199CD934);
}

_UNKNOWN **sub_2143427B4()
{
  return &off_254D6C490;
}

void sub_2143427C0(uint64_t *a1)
{
  sub_214342800(a1, (void (*)(uint64_t, uint64_t, uint64_t, _QWORD))type metadata accessor for ModifiedChartContent_AccessibilityIdentifier);
}

uint64_t type metadata accessor for ModifiedChartContent_AccessibilityIdentifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2141D8E88(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ModifiedChartContent_AccessibilityIdentifier);
}

_UNKNOWN **sub_2143427E0()
{
  return &off_254D6B4B8;
}

void sub_2143427EC(uint64_t *a1)
{
  sub_214342800(a1, (void (*)(uint64_t, uint64_t, uint64_t, _QWORD))type metadata accessor for ModifiedChartContent_AccessibilityHidden);
}

void sub_214342800(uint64_t *a1, void (*a2)(uint64_t, uint64_t, uint64_t, _QWORD))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;

  v3 = *a1;
  v4 = a1[1];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  a2(255, v3, AssociatedTypeWitness, *(_QWORD *)(v4 + 8));
  JUMPOUT(0x2199CD934);
}

uint64_t type metadata accessor for ModifiedChartContent_AccessibilityHidden(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2141D8E88(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ModifiedChartContent_AccessibilityHidden);
}

uint64_t sub_214342898()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *sub_21434290C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if (v7 <= 7 && (unint64_t)(v6 + 1) <= 0x18 && (*(_DWORD *)(v5 + 80) & 0x100000) == 0)
  {
    (*(void (**)(_QWORD *, _QWORD *))(v5 + 16))(a1, a2);
    *((_BYTE *)v4 + v6) = *((_BYTE *)a2 + v6);
  }
  else
  {
    v10 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v10 + ((v7 + 16) & ~v7));
    swift_retain();
  }
  return v4;
}

uint64_t sub_214342998(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  *(_BYTE *)(*(_QWORD *)(v5 + 64) + a1) = *(_BYTE *)(*(_QWORD *)(v5 + 64) + a2);
  return a1;
}

uint64_t sub_2143429E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  *(_BYTE *)(*(_QWORD *)(v5 + 64) + a1) = *(_BYTE *)(*(_QWORD *)(v5 + 64) + a2);
  return a1;
}

uint64_t sub_214342A28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  *(_BYTE *)(*(_QWORD *)(v5 + 64) + a1) = *(_BYTE *)(*(_QWORD *)(v5 + 64) + a2);
  return a1;
}

uint64_t sub_214342A70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  *(_BYTE *)(*(_QWORD *)(v5 + 64) + a1) = *(_BYTE *)(*(_QWORD *)(v5 + 64) + a2);
  return a1;
}

uint64_t sub_214342AB8(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v12;
  int v13;
  unsigned int v15;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0xFE)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_21;
  v9 = v7 + 1;
  v10 = 8 * (v7 + 1);
  if ((v7 + 1) > 3)
    goto LABEL_7;
  v12 = ((v8 + ~(-1 << v10)) >> v10) + 1;
  if (HIWORD(v12))
  {
    v11 = *(_DWORD *)(a1 + v9);
    if (v11)
      goto LABEL_14;
  }
  else
  {
    if (v12 <= 0xFF)
    {
      if (v12 < 2)
        goto LABEL_21;
LABEL_7:
      v11 = *(unsigned __int8 *)(a1 + v9);
      if (!*(_BYTE *)(a1 + v9))
        goto LABEL_21;
LABEL_14:
      v13 = (v11 - 1) << v10;
      if (v9 > 3)
        v13 = 0;
      if ((_DWORD)v7 == -1)
        return v6 + v13 + 1;
      if (v9 > 3)
        LODWORD(v9) = 4;
      return ((uint64_t (*)(void))((char *)&loc_214342B78 + 4 * byte_21442D1D0[(v9 - 1)]))();
    }
    v11 = *(unsigned __int16 *)(a1 + v9);
    if (*(_WORD *)(a1 + v9))
      goto LABEL_14;
  }
LABEL_21:
  if (v5 >= 0xFE)
    return (*(uint64_t (**)(void))(v4 + 48))();
  v15 = *(unsigned __int8 *)(v7 + a1);
  if (v15 < 2)
    return 0;
  return ((v15 + 2147483646) & 0x7FFFFFFF) + 1;
}

void sub_214342BEC(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  size_t v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0xFEu)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = v7 + 1;
  if (a3 > v6)
  {
    if (v8 <= 3)
    {
      v11 = ((a3 - v6 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v11))
      {
        v9 = 4u;
      }
      else if (v11 >= 0x100)
      {
        v9 = 2;
      }
      else
      {
        v9 = v11 > 1;
      }
    }
    else
    {
      v9 = 1u;
    }
  }
  else
  {
    v9 = 0;
  }
  if (v6 < a2)
  {
    v10 = ~v6 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v7 != -1)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v12;
        }
        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v7 + 1);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X12 }
}

uint64_t type metadata accessor for AXHiddenModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2141D8E88(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AXHiddenModifier);
}

uint64_t sub_214342DD0()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_214342E48(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    *(_QWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFF8);
  }
  swift_retain();
  return v4;
}

uint64_t sub_214342EF8(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))();
  return swift_release();
}

uint64_t sub_214342F38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  swift_retain();
  return a1;
}

uint64_t sub_214342F98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_214343004(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_214343060(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t sub_2143430C4(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v12 = *(_QWORD *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_214343140 + 4 * byte_21442D1DE[v10]))();
  }
}

void sub_2143431C4(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_2143432B8()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x21434332CLL);
}

void sub_2143432C0(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x2143432C8);
  JUMPOUT(0x21434332CLL);
}

void sub_214343308()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x21434332CLL);
}

void sub_214343310()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x21434332CLL);
}

uint64_t sub_214343318(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_WORD *)(v5 + v6) = 0;
  if (!a2)
    JUMPOUT(0x21434332CLL);
  if (a3 < 0x7FFFFFFF)
  {
    if ((a2 & 0x80000000) == 0)
      JUMPOUT(0x214343328);
    JUMPOUT(0x214343324);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v5);
}

uint64_t sub_214343344(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __int128 v6;

  v6 = *a2;
  return (*(uint64_t (**)(uint64_t, __int128 *))(a5 + 32))(a1, &v6);
}

uint64_t sub_214343380(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(_QWORD *, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52[4];
  __int128 v53;
  _BYTE v54[25];
  uint64_t v55[90];
  _BYTE v56[136];
  _QWORD __src[90];
  _QWORD __dst[90];
  _QWORD v59[6];
  char v60;
  _QWORD v61[6];
  char v62;
  _QWORD v63[4];
  __int128 v64;
  _BYTE v65[25];
  _OWORD v66[3];
  char v67;
  _BYTE v68[136];
  _QWORD v69[6];
  char v70;
  _QWORD v71[6];
  char v72;
  _QWORD v73[4];
  __int128 v74;
  __int128 v75;
  char v76;

  v49 = *a2;
  v7 = *((_QWORD *)a2 + 1);
  v8 = type metadata accessor for ModifiedChartContent_AccessibilityHidden(0, a3, a4, a5);
  v51 = a1;
  sub_214252010(0, 0, 0, 0, *(uint64_t **)(a1 + *(int *)(v8 + 44)), __dst);
  v9 = __dst[0];
  v10 = __dst[1];
  v11 = __dst[2];
  v12 = __dst[3];
  v13 = __dst[4];
  v14 = __dst[5];
  v47 = __dst[6];
  v50 = v7;
  v15 = v7 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_environment;
  swift_beginAccess();
  v46 = type metadata accessor for ChartContentRenderContext.Environment(0);
  v16 = v15 + *(int *)(v46 + 108);
  if (!*(_QWORD *)(v16 + 24))
  {
    memset(__src, 0, 24);
    __src[3] = 2;
    bzero(&__src[4], 0x2A9uLL);
    swift_retain();
    goto LABEL_5;
  }
  sub_21427362C(v16, (uint64_t)v55);
  swift_retain();
  sub_214253714(a4, __src);
  sub_21420D92C((uint64_t)v55);
  if (__src[3] == 2)
  {
LABEL_5:
    type metadata accessor for TypedVectorizedProperties(255, a4, v17, v18);
    v32 = sub_214425388();
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v32 - 8) + 8))(__src, v32);
    memset(v59, 0, 24);
    v59[3] = 1;
    v59[5] = 0;
    v59[4] = 0;
    v60 = 0;
    memset(v61, 0, 24);
    v61[3] = 1;
    v61[5] = 0;
    v61[4] = 0;
    v62 = 0;
    memset(v63, 0, 24);
    v63[3] = 1;
    v64 = 0u;
    memset(v65, 0, sizeof(v65));
    memset(v52, 0, 24);
    v52[3] = 1;
    v53 = 0u;
    memset(v54, 0, sizeof(v54));
    memset(v66, 0, sizeof(v66));
    v67 = -4;
    sub_21427384C((uint64_t)v56);
    type metadata accessor for TypedVectorizedProperties.Position(255, a4, v33, v34);
    v35 = sub_214425388();
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v35 - 8) + 32))(v68, v56, v35);
    memset(v69, 0, 24);
    v69[3] = 1;
    v69[5] = 0;
    v69[4] = 0;
    v70 = 0;
    v71[0] = v9;
    v71[1] = v10;
    v71[2] = v11;
    v71[3] = v12;
    v71[4] = v13;
    v71[5] = v14;
    v72 = v47;
    memset(v73, 0, 24);
    v73[3] = 1;
    v31 = v14;
    v23 = v47;
    v74 = 0u;
    v75 = 0u;
    v76 = 0;
    sub_214253428((uint64_t)v59, (uint64_t)v61, (uint64_t)v63, (uint64_t)v52, (uint64_t)v66, (uint64_t)v68, (uint64_t)v69, (uint64_t)v71, (uint64_t)v55, (uint64_t)v73, (uint64_t)v73, a4);
    sub_2142536C0(v55, a4, v36, v37, v52);
    swift_beginAccess();
    v38 = v15 + *(int *)(v46 + 108);
    sub_2141EF2B4(v9, v10, v11, v12);
    sub_214274628(v13, v31, v47);
    sub_2143438F0((uint64_t)v52, v38);
    swift_endAccess();
    goto LABEL_6;
  }
  memcpy(__dst, __src, 0x2C9uLL);
  v19 = __dst[65];
  v43 = __dst[67];
  v44 = __dst[66];
  v20 = __dst[69];
  v41 = __dst[70];
  v42 = __dst[68];
  v40 = __dst[71];
  sub_2141EF2B4(v9, v10, v11, v12);
  v45 = v9;
  v21 = v14;
  v22 = v14;
  v23 = v47;
  sub_214274628(v13, v22, v47);
  sub_214274540(v19, v44, v43, v42, v20, v41, v40);
  __dst[65] = v45;
  __dst[66] = v10;
  __dst[67] = v11;
  __dst[68] = v12;
  __dst[69] = v13;
  __dst[70] = v21;
  LOBYTE(__dst[71]) = v47;
  v26 = type metadata accessor for TypedVectorizedProperties(0, a4, v24, v25);
  v27 = *(_QWORD *)(v26 - 8);
  (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v27 + 16))(__src, __dst, v26);
  sub_2142536C0(__src, a4, v28, v29, v55);
  swift_beginAccess();
  sub_2143438F0((uint64_t)v55, v15 + *(int *)(v46 + 108));
  swift_endAccess();
  v30 = *(void (**)(_QWORD *, uint64_t))(v27 + 8);
  v31 = v21;
  v9 = v45;
  v30(__dst, v26);
LABEL_6:
  LOBYTE(__dst[0]) = v49;
  __dst[1] = v50;
  (*(void (**)(uint64_t, _QWORD *))(a5 + 40))(v51, __dst);
  sub_21422F7F0(v9, v10, v11, v12);
  return sub_214274588(v13, v31, v23);
}

uint64_t sub_21434382C(uint64_t a1, char *a2, uint64_t *a3)
{
  return sub_214343380(a1, a2, a3[2], a3[3], a3[4]);
}

_QWORD *sub_21434383C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t *a5@<X8>)
{
  uint64_t v9;
  _QWORD *result;
  unint64_t v11;
  char v12[8];
  uint64_t v13;
  unint64_t v14;

  v9 = *(_QWORD *)(a2 + 8);
  if ((*(_BYTE *)a2 & 1) == 0)
  {
    v12[0] = 0;
LABEL_6:
    v13 = v9;
    result = (*(_QWORD *(**)(unint64_t *__return_ptr, uint64_t, char *, uint64_t, uint64_t))(a4 + 40))(&v14, a1, v12, a3, a4);
    v11 = v14;
    goto LABEL_7;
  }
  result = (_QWORD *)type metadata accessor for AXHiddenModifier(0, a3, a4, a4);
  if ((*(_BYTE *)(a1 + *((int *)result + 9)) & 1) == 0)
  {
    v12[0] = 1;
    goto LABEL_6;
  }
  v11 = 0xE000000000000000;
LABEL_7:
  *a5 = v11;
  return result;
}

_QWORD *sub_2143438E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X8>)
{
  return sub_21434383C(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
}

uint64_t sub_2143438F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_2141D8BF8(&qword_254D69D18);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_214343938(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  if (a4 != 1)
  {
    sub_21422F7F0(result, a2, a3, a4);
    return sub_21427429C(a5, a6, a7);
  }
  return result;
}

uint64_t sub_214343980(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, char a9)
{
  if (a4 != 1)
  {
    sub_21422F7F0(result, a2, a3, a4);
    return sub_214274208(a5, a6, a7, a8, a9);
  }
  return result;
}

uint64_t sub_2143439E4(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v11;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v11 = MEMORY[0x24BEE4AF8];
    sub_2141D3A14(0, v1, 0);
    v2 = v11;
    v4 = (uint64_t *)(a1 + 32);
    do
    {
      v5 = *v4++;
      swift_retain();
      sub_214344974(v5);
      v7 = v6;
      swift_release();
      v9 = *(_QWORD *)(v11 + 16);
      v8 = *(_QWORD *)(v11 + 24);
      if (v9 >= v8 >> 1)
        sub_2141D3A14((char *)(v8 > 1), v9 + 1, 1);
      *(_QWORD *)(v11 + 16) = v9 + 1;
      *(_QWORD *)(v11 + 8 * v9 + 32) = v7;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_214343B0C(uint64_t a1, double a2, double a3, double a4, double a5, double a6, double a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  double v18;
  double v19;
  double v20;
  _QWORD v22[16];
  uint64_t v23;
  uint64_t v24;
  _BYTE v25[142];

  v23 = type metadata accessor for SgGroup(0);
  v14 = MEMORY[0x24BDAC7A8](v23);
  v22[15] = (char *)v22 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v22[14] = (char *)v22 - v16;
  v17 = *(_QWORD *)(a1 + 16);
  if (v17)
  {
    *(_QWORD *)&v25[134] = MEMORY[0x24BEE4AF8];
    sub_2141D3A14(0, v17, 0);
    v22[9] = v25;
    v22[10] = &v24;
    v18 = 0.0;
    v19 = fmin(a6, 0.0);
    if (a6 < 0.0)
      v20 = 0.0;
    else
      v20 = a6;
    *(double *)&v22[5] = v19;
    v22[6] = fmin(a7, 0.0);
    if (a7 >= 0.0)
      v18 = a7;
    *(double *)&v22[3] = v20;
    *(double *)&v22[4] = v18;
    *(double *)&v22[7] = a7;
    *(double *)&v22[8] = a5;
    *(double *)&v22[12] = a3;
    *(double *)&v22[13] = a4;
    *(double *)&v22[11] = a2;
    __asm { BR              X9 }
  }
  return MEMORY[0x24BEE4AF8];
}

void sub_2143442B0(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for SgGroup(0);
  MEMORY[0x24BDAC7A8](v2);
  __asm { BR              X10 }
}

void sub_214344360()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = swift_projectBox();
  sub_2141FDEA0(v1, v0, type metadata accessor for SgGroup);
  v2 = *(_QWORD *)(v0 + 8);
  v3 = *(_QWORD *)(v2 + 16);
  if (v3)
  {
    swift_bridgeObjectRetain();
    v4 = 0;
    do
    {
      v5 = *(_QWORD *)(v2 + 8 * v4++ + 32);
      swift_retain();
      sub_2143442B0(v5);
      swift_release();
    }
    while (v3 != v4);
    swift_bridgeObjectRelease();
  }
  sub_2141DD370(v0, type metadata accessor for SgGroup);
  sub_214344334();
}

void sub_2143443E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(v0 + 24);
  v1 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v2 + 16);
  if (v3)
  {
    swift_bridgeObjectRetain();
    v4 = 0;
    do
    {
      v5 = *(_QWORD *)(v2 + 8 * v4++ + 32);
      swift_retain();
      sub_2143442B0(v5);
      swift_release();
    }
    while (v3 != v4);
    swift_bridgeObjectRelease();
  }
  v6 = *(_QWORD *)(v1 + 16);
  if (v6)
  {
    swift_bridgeObjectRetain();
    v7 = 0;
    do
    {
      v8 = *(_QWORD *)(v1 + 8 * v7++ + 32);
      swift_retain();
      sub_2143442B0(v8);
      swift_release();
    }
    while (v6 != v7);
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_214344334();
  }
}

void sub_2143444AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_2141FE108((_QWORD *)((v0 & 0xFFFFFFFFFFFFFFFLL) + 16), v1 - 304);
  v2 = *(_QWORD *)(v1 - 296);
  v3 = *(_QWORD *)(v2 + 16);
  if (v3)
  {
    swift_bridgeObjectRetain();
    v4 = 0;
    do
    {
      v5 = *(_QWORD *)(v2 + 8 * v4++ + 32);
      swift_retain();
      sub_2143442B0(v5);
      swift_release();
    }
    while (v3 != v4);
    swift_bridgeObjectRelease();
  }
  sub_2141FE470(v1 - 304);
  sub_214344334();
}

void sub_214344520()
{
  char **v0;
  _OWORD *v1;
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  char *v17;
  uint64_t v18;
  char isUniquelyReferenced_nonNull_native;
  double v20;
  double v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;

  v3 = v1[9];
  *(_OWORD *)(v2 - 192) = v1[8];
  *(_OWORD *)(v2 - 176) = v3;
  v4 = v1[11];
  *(_OWORD *)(v2 - 160) = v1[10];
  *(_OWORD *)(v2 - 144) = v4;
  v5 = v1[5];
  *(_OWORD *)(v2 - 256) = v1[4];
  *(_OWORD *)(v2 - 240) = v5;
  v6 = v1[7];
  *(_OWORD *)(v2 - 224) = v1[6];
  *(_OWORD *)(v2 - 208) = v6;
  v7 = v1[2];
  *(_OWORD *)(v2 - 304) = v1[1];
  *(_OWORD *)(v2 - 288) = v7;
  *(_OWORD *)(v2 - 272) = v1[3];
  v8 = *(unsigned __int8 *)(v2 - 200);
  if (v8 != 2 && (v8 & 1) == 0)
  {
    v9 = *(_QWORD *)(v2 - 152);
    *(_OWORD *)(v2 - 320) = *(_OWORD *)(v2 - 168);
    *(_OWORD *)(v2 - 336) = *(_OWORD *)(v2 - 184);
    v10 = *(_QWORD *)(v2 - 192);
    v11 = *(double *)(v2 - 216);
    v12 = *(double *)(v2 - 208);
    v13 = *(double *)(v2 - 280) * v11;
    v14 = *(double *)(v2 - 296);
    v15 = *(double *)(v2 - 288);
    v16 = *(double *)(v2 - 272) * v12;
    v17 = *v0;
    v18 = *((_QWORD *)*v0 + 2);
    sub_214303620((_QWORD *)(v2 - 304), (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141ED014);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *v0 = v17;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v17 = sub_2142265BC(0, v18 + 1, 1, v17);
      *v0 = v17;
    }
    v20 = v14 - v13;
    v21 = v15 - v16;
    v23 = *((_QWORD *)v17 + 2);
    v22 = *((_QWORD *)v17 + 3);
    if (v23 >= v22 >> 1)
      v17 = sub_2142265BC((char *)(v22 > 1), v23 + 1, 1, v17);
    v24 = *(_QWORD *)(v2 - 304);
    *((_QWORD *)v17 + 2) = v23 + 1;
    v25 = &v17[96 * v23];
    *((_QWORD *)v25 + 4) = v10;
    *((_QWORD *)v25 + 5) = v18;
    *((_QWORD *)v25 + 6) = v24;
    *((double *)v25 + 7) = v20;
    *((double *)v25 + 8) = v21;
    *((double *)v25 + 9) = v11;
    *((double *)v25 + 10) = v12;
    *(_OWORD *)(v25 + 88) = *(_OWORD *)(v2 - 336);
    *(_OWORD *)(v25 + 104) = *(_OWORD *)(v2 - 320);
    *((_QWORD *)v25 + 15) = v9;
    *v0 = v17;
    sub_214303620((_QWORD *)(v2 - 304), (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141ED07C);
  }
  sub_214344334();
}

void sub_214344694(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = type metadata accessor for SgGroup(0);
  MEMORY[0x24BDAC7A8](v2);
  v3 = type metadata accessor for SgRule(0);
  MEMORY[0x24BDAC7A8](v3);
  __asm { BR              X10 }
}

void sub_214344768()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = swift_projectBox();
  sub_2141FDEA0(v1, v0, type metadata accessor for SgGroup);
  v2 = *(_QWORD *)(v0 + 8);
  v3 = *(_QWORD *)(v2 + 16);
  if (v3)
  {
    swift_bridgeObjectRetain();
    v4 = 0;
    do
    {
      v5 = *(_QWORD *)(v2 + 8 * v4++ + 32);
      swift_retain();
      sub_214344694(v5);
      swift_release();
    }
    while (v3 != v4);
    swift_bridgeObjectRelease();
  }
  sub_2141DD370(v0, type metadata accessor for SgGroup);
  sub_214344748();
}

void sub_214344974(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = type metadata accessor for SgGroup(0);
  v3 = MEMORY[0x24BDAC7A8](v2);
  MEMORY[0x24BDAC7A8](v3);
  __asm { BR              X10 }
}

uint64_t sub_214344A34()
{
  uint64_t v0;

  swift_retain();
  return v0;
}

void sub_214344A6C()
{
  uint64_t v0;
  uint64_t v1;
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;

  sub_2141FE108((_QWORD *)((v1 & 0xFFFFFFFFFFFFFFFLL) + 16), v0 + 208);
  sub_2141FE108((_QWORD *)(v0 + 208), v0 + 32);
  v8 = swift_bridgeObjectRetain();
  v9 = sub_214343B0C(v8, v7, v6, v4, v3, v5, v2);
  swift_bridgeObjectRelease();
  sub_2141FE470(v0 + 208);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 40) = v9;
  v10 = (_OWORD *)swift_allocObject();
  v11 = *(_OWORD *)(v0 + 48);
  v10[1] = *(_OWORD *)(v0 + 32);
  v10[2] = v11;
  v12 = *(_OWORD *)(v0 + 80);
  v10[3] = *(_OWORD *)(v0 + 64);
  v10[4] = v12;
  JUMPOUT(0x214344A3CLL);
}

void sub_214344B00()
{
  uint64_t v0;
  uint64_t v1;
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  int v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  double v24;
  double v25;
  CGFloat v26;
  CGFloat v27;
  unsigned __int8 v28;
  double v29;
  double v30;
  __int16 v31;
  _OWORD *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;

  v8 = *(_OWORD *)((v1 & 0xFFFFFFFFFFFFFFFLL) + 0x90);
  *(_OWORD *)(v0 + 320) = *(_OWORD *)((v1 & 0xFFFFFFFFFFFFFFFLL) + 0x80);
  *(_OWORD *)(v0 + 336) = v8;
  v9 = *(_OWORD *)((v1 & 0xFFFFFFFFFFFFFFFLL) + 0xB0);
  *(_OWORD *)(v0 + 352) = *(_OWORD *)((v1 & 0xFFFFFFFFFFFFFFFLL) + 0xA0);
  *(_OWORD *)(v0 + 368) = v9;
  v10 = *(_OWORD *)((v1 & 0xFFFFFFFFFFFFFFFLL) + 0x50);
  *(_OWORD *)(v0 + 256) = *(_OWORD *)((v1 & 0xFFFFFFFFFFFFFFFLL) + 0x40);
  *(_OWORD *)(v0 + 272) = v10;
  v11 = *(_OWORD *)((v1 & 0xFFFFFFFFFFFFFFFLL) + 0x70);
  *(_OWORD *)(v0 + 288) = *(_OWORD *)((v1 & 0xFFFFFFFFFFFFFFFLL) + 0x60);
  *(_OWORD *)(v0 + 304) = v11;
  v12 = *(_OWORD *)((v1 & 0xFFFFFFFFFFFFFFFLL) + 0x20);
  *(_OWORD *)(v0 + 208) = *(_OWORD *)((v1 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
  *(_OWORD *)(v0 + 224) = v12;
  *(_OWORD *)(v0 + 240) = *(_OWORD *)((v1 & 0xFFFFFFFFFFFFFFFLL) + 0x30);
  v13 = *(unsigned __int8 *)(v0 + 368);
  v14 = *(double *)(v0 + 296);
  v15 = *(double *)(v0 + 304);
  v16 = *(double *)(v0 + 232);
  *(_QWORD *)&v12 = *(_QWORD *)(v0 + 240);
  v18 = *(double *)(v0 + 216);
  v17 = *(double *)(v0 + 224);
  v19 = *(_OWORD *)((v1 & 0xFFFFFFFFFFFFFFFLL) + 0x90);
  *(_OWORD *)(v0 + 144) = *(_OWORD *)((v1 & 0xFFFFFFFFFFFFFFFLL) + 0x80);
  *(_OWORD *)(v0 + 160) = v19;
  v20 = *(_OWORD *)((v1 & 0xFFFFFFFFFFFFFFFLL) + 0xB0);
  *(_OWORD *)(v0 + 176) = *(_OWORD *)((v1 & 0xFFFFFFFFFFFFFFFLL) + 0xA0);
  *(_OWORD *)(v0 + 192) = v20;
  v21 = *(_OWORD *)((v1 & 0xFFFFFFFFFFFFFFFLL) + 0x50);
  *(_OWORD *)(v0 + 80) = *(_OWORD *)((v1 & 0xFFFFFFFFFFFFFFFLL) + 0x40);
  *(_OWORD *)(v0 + 96) = v21;
  v22 = *(_OWORD *)((v1 & 0xFFFFFFFFFFFFFFFLL) + 0x70);
  *(_OWORD *)(v0 + 112) = *(_OWORD *)((v1 & 0xFFFFFFFFFFFFFFFLL) + 0x60);
  *(_OWORD *)(v0 + 128) = v22;
  v23 = *(_OWORD *)((v1 & 0xFFFFFFFFFFFFFFFLL) + 0x20);
  *(_OWORD *)(v0 + 32) = *(_OWORD *)((v1 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
  *(_OWORD *)(v0 + 48) = v23;
  *(_OWORD *)(v0 + 64) = *(_OWORD *)((v1 & 0xFFFFFFFFFFFFFFFLL) + 0x30);
  *(double *)v0 = v15;
  *(double *)(v0 + 8) = v14;
  v24 = v18 - v14 * v16;
  v25 = v17 - v15 * *(double *)&v12;
  if (v13 == 6)
  {
    sub_214303620((_QWORD *)(v0 + 208), (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141ED014);
    v27 = *(double *)v0;
    v26 = *(double *)(v0 + 8);
  }
  else
  {
    v28 = *(_BYTE *)(v0 + 192);
    sub_214303620((_QWORD *)(v0 + 208), (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141ED014);
    v29 = v6;
    v30 = v5;
    v27 = *(double *)v0;
    v26 = *(double *)(v0 + 8);
    sub_214344DB0(v28, v0 + 32, v7, v29, v30, v24, v25, v26, *(CGFloat *)v0);
  }
  v31 = *(_WORD *)(v0 + 192);
  if (v31 != 6)
    sub_214344EE4(HIBYTE(v31), v0 + 32, v4, v3, v2, v24, v25, v26, v27);
  v32 = (_OWORD *)swift_allocObject();
  v33 = *(_OWORD *)(v0 + 176);
  v32[9] = *(_OWORD *)(v0 + 160);
  v32[10] = v33;
  v32[11] = *(_OWORD *)(v0 + 192);
  v34 = *(_OWORD *)(v0 + 112);
  v32[5] = *(_OWORD *)(v0 + 96);
  v32[6] = v34;
  v35 = *(_OWORD *)(v0 + 144);
  v32[7] = *(_OWORD *)(v0 + 128);
  v32[8] = v35;
  v36 = *(_OWORD *)(v0 + 48);
  v32[1] = *(_OWORD *)(v0 + 32);
  v32[2] = v36;
  v37 = *(_OWORD *)(v0 + 80);
  v32[3] = *(_OWORD *)(v0 + 64);
  v32[4] = v37;
  JUMPOUT(0x214344A3CLL);
}

uint64_t sub_214344DB0(unsigned __int8 a1, uint64_t a2, double a3, double a4, double a5, CGFloat a6, CGFloat a7, CGFloat a8, CGFloat a9)
{
  uint64_t result;
  double MinX;
  double MaxX;
  double v20;
  double v21;
  double v22;
  CGRect v23;
  CGRect v24;

  if (a1 - 3 < 2)
    return 0;
  if (a1 != 1)
  {
    if (a1 == 5)
      return 1;
    if (qword_254D68EB0 != -1)
      swift_once();
    a4 = *((double *)&xmmword_254D76020 + 1);
    a3 = *(double *)&xmmword_254D76020;
  }
  v23.origin.x = a6;
  v23.origin.y = a7;
  v23.size.width = a8;
  v23.size.height = a9;
  MinX = CGRectGetMinX(v23);
  v24.origin.x = a6;
  v24.origin.y = a7;
  v24.size.width = a8;
  v24.size.height = a9;
  MaxX = CGRectGetMaxX(v24);
  v20 = 0.0;
  v21 = fmin(a5, 0.0) - a3;
  if (a5 < 0.0)
    v22 = 0.0;
  else
    v22 = a5;
  if (MinX >= v21)
  {
    if (v22 + a4 < MaxX)
      v20 = MaxX - (v22 + a4);
  }
  else
  {
    v20 = MinX - v21;
  }
  result = 0;
  *(double *)(a2 + 8) = *(double *)(a2 + 8) - v20;
  return result;
}

uint64_t sub_214344EE4(unsigned __int8 a1, uint64_t a2, double a3, double a4, double a5, CGFloat a6, CGFloat a7, CGFloat a8, CGFloat a9)
{
  uint64_t result;
  double MinY;
  double MaxY;
  double v20;
  double v21;
  double v22;
  CGRect v23;
  CGRect v24;

  if (a1 - 3 < 2)
    return 0;
  if (a1 != 1)
  {
    if (a1 == 5)
      return 1;
    if (qword_254D68EB0 != -1)
      swift_once();
    a3 = *(double *)&qword_254D76030;
    a4 = *(double *)algn_254D76038;
  }
  v23.origin.x = a6;
  v23.origin.y = a7;
  v23.size.width = a8;
  v23.size.height = a9;
  MinY = CGRectGetMinY(v23);
  v24.origin.x = a6;
  v24.origin.y = a7;
  v24.size.width = a8;
  v24.size.height = a9;
  MaxY = CGRectGetMaxY(v24);
  v20 = 0.0;
  v21 = fmin(a5, 0.0) - a3;
  if (a5 < 0.0)
    v22 = 0.0;
  else
    v22 = a5;
  if (MinY >= v21)
  {
    if (v22 + a4 < MaxY)
      v20 = MaxY - (v22 + a4);
  }
  else
  {
    v20 = MinY - v21;
  }
  result = 0;
  *(double *)(a2 + 16) = *(double *)(a2 + 16) - v20;
  return result;
}

void sub_214345018(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for SgGroup(0);
  MEMORY[0x24BDAC7A8](v2);
  __asm { BR              X10 }
}

uint64_t sub_2143450A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = swift_projectBox();
  sub_2141FDEA0(v5, v3, type metadata accessor for SgGroup);
  v6 = *(_QWORD *)(v3 + 8);
  v7 = *(_QWORD *)(v6 + 16);
  if (v7)
  {
    swift_retain();
    swift_bridgeObjectRetain();
    v8 = 0;
    do
    {
      v9 = *(_QWORD *)(v6 + 8 * v8++ + 32);
      swift_retain();
      swift_retain();
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, double))sub_214345018)(v9, v2, v0, v1, v4);
      swift_release();
      swift_release();
    }
    while (v7 != v8);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_retain();
  }
  sub_2141DD370(v3, type metadata accessor for SgGroup);
  return swift_release();
}

uint64_t sub_2143453D8()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v0 + 56))
    _s6Charts15AnyChartContentVwxx_0(v0 + 32);
  return swift_deallocObject();
}

uint64_t sub_21434540C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_214345438()
{
  uint64_t *v0;

  sub_2141ED07C(v0[7], v0[8], v0[9]);
  return swift_deallocObject();
}

uint64_t BarPlot<A>.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2142D7304(v2, v4, (uint64_t)v7);
  sub_2142D6BB0((uint64_t)v7, v4, a2);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_214345500@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return BarPlot<A>.body.getter(a1, a2);
}

uint64_t BarPlot.init<A, B, C>(_:x:y:width:height:stacking:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, __int128 *a4@<X3>, __int128 *a5@<X4>, int a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  char *v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  char *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  char v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  char v106;

  v76 = a8;
  v84 = a6;
  v89 = a3;
  v90 = a2;
  v88 = a1;
  v85 = a9;
  v77 = a12;
  v81 = a13;
  v80 = a10;
  v87 = a11;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v18 = type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, a10, a13);
  v86 = *(_QWORD *)(v18 - 8);
  v19 = *(_QWORD *)(v86 + 64);
  v74 = v18;
  v75 = v19;
  MEMORY[0x24BDAC7A8](v18);
  v72 = (char *)&v69 - v20;
  v21 = type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, a8, a12);
  v22 = *(_QWORD *)(v21 - 8);
  v70 = v21;
  v23 = *(_QWORD *)(v22 + 64);
  v24 = MEMORY[0x24BDAC7A8](v21);
  v71 = (char *)&v69 - v25;
  v78 = *(_QWORD *)(a7 - 8);
  v26 = v78;
  MEMORY[0x24BDAC7A8](v24);
  v28 = (char *)&v69 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = v28;
  v30 = type metadata accessor for VectorizedBarPlotContent(0, a7, a11, v29);
  v82 = *(_QWORD *)(v30 - 8);
  v83 = v30;
  MEMORY[0x24BDAC7A8](v30);
  v79 = (uint64_t)&v69 - v31;
  v32 = a4[5];
  v95 = a4[4];
  v96 = v32;
  v97 = a4[6];
  v98 = *((_BYTE *)a4 + 112);
  v33 = a4[1];
  v91 = *a4;
  v92 = v33;
  v34 = a4[3];
  v93 = a4[2];
  v94 = v34;
  v35 = *a5;
  v36 = a5[1];
  v37 = a5[3];
  v101 = a5[2];
  v102 = v37;
  v99 = v35;
  v100 = v36;
  v38 = a5[4];
  v39 = a5[5];
  v40 = a5[6];
  v106 = *((_BYTE *)a5 + 112);
  v104 = v39;
  v105 = v40;
  v103 = v38;
  (*(void (**)(char *, uint64_t, uint64_t))(v26 + 16))(v28, v88, a7);
  v41 = v71;
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v71, v90, v21);
  v42 = v86;
  v43 = v72;
  v44 = v74;
  (*(void (**)(char *, uint64_t, uint64_t))(v86 + 16))(v72, v89, v74);
  v45 = (*(unsigned __int8 *)(v22 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  v46 = (v23 + *(unsigned __int8 *)(v42 + 80) + v45) & ~(unint64_t)*(unsigned __int8 *)(v42 + 80);
  v47 = v46 + v75;
  v75 = (v46 + v75 + 7) & 0xFFFFFFFFFFFFFFF8;
  v48 = (v47 + 127) & 0xFFFFFFFFFFFFFFF8;
  v49 = (char *)swift_allocObject();
  v50 = v76;
  *((_QWORD *)v49 + 2) = a7;
  *((_QWORD *)v49 + 3) = v50;
  v51 = v87;
  *((_QWORD *)v49 + 4) = v80;
  *((_QWORD *)v49 + 5) = v51;
  v52 = v81;
  *((_QWORD *)v49 + 6) = v77;
  *((_QWORD *)v49 + 7) = v52;
  v53 = v41;
  v54 = v70;
  (*(void (**)(char *, char *, uint64_t))(v22 + 32))(&v49[v45], v53, v70);
  v55 = &v49[v46];
  v56 = v86;
  v57 = v44;
  (*(void (**)(char *, char *, uint64_t))(v86 + 32))(v55, v43, v44);
  v58 = &v49[v75];
  v59 = v94;
  *((_OWORD *)v58 + 2) = v93;
  *((_OWORD *)v58 + 3) = v59;
  v60 = v92;
  *(_OWORD *)v58 = v91;
  *((_OWORD *)v58 + 1) = v60;
  v58[112] = v98;
  v61 = v97;
  v62 = v95;
  *((_OWORD *)v58 + 5) = v96;
  *((_OWORD *)v58 + 6) = v61;
  *((_OWORD *)v58 + 4) = v62;
  v63 = &v49[v48];
  v64 = v104;
  *((_OWORD *)v63 + 4) = v103;
  *((_OWORD *)v63 + 5) = v64;
  *((_OWORD *)v63 + 6) = v105;
  v63[112] = v106;
  v65 = v100;
  *(_OWORD *)v63 = v99;
  *((_OWORD *)v63 + 1) = v65;
  v66 = v102;
  *((_OWORD *)v63 + 2) = v101;
  *((_OWORD *)v63 + 3) = v66;
  v63[113] = v84;
  v67 = v79;
  sub_2142868CC((uint64_t)v73, (uint64_t)sub_214346084, (uint64_t)v49, a7, (uint64_t)&type metadata for BarMark, v87, (uint64_t)&protocol witness table for BarMark, v79);
  (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v89, v57);
  (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v90, v54);
  (*(void (**)(uint64_t, uint64_t))(v78 + 8))(v88, a7);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v82 + 32))(v85, v67, v83);
}

uint64_t type metadata accessor for VectorizedBarPlotContent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2141D8E88(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for VectorizedBarPlotContent);
}

void *sub_2143458F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, uint64_t a7@<X7>, void *a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  void (*v30)(char *, uint64_t, uint64_t);
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  int v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  void *v65;
  uint64_t v66;
  _OWORD v67[19];

  v64 = a6;
  v62 = a3;
  v63 = a5;
  v61 = a2;
  v59 = a1;
  v65 = a8;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v54 = a9;
  v55 = a12;
  v58 = type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, a9, a12);
  v56 = *(_QWORD *)(v58 - 8);
  MEMORY[0x24BDAC7A8](v58);
  v53 = (char *)&v49 - v15;
  v17 = type metadata accessor for PlottableValue(0, a9, a12, v16);
  MEMORY[0x24BDAC7A8](v17);
  v66 = (uint64_t)&v49 - v18;
  v19 = type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, a7, a11);
  v51 = *(_QWORD *)(v19 - 8);
  v52 = v19;
  v20 = MEMORY[0x24BDAC7A8](v19);
  v22 = (char *)&v49 - v21;
  v23 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](v20);
  v25 = (char *)&v49 - v24;
  v50 = a7;
  v57 = a11;
  v27 = type metadata accessor for PlottableValue(0, a7, a11, v26);
  MEMORY[0x24BDAC7A8](v27);
  v29 = (char *)&v49 - v28;
  v60 = (uint64_t)&v49 - v28;
  v30 = *(void (**)(char *, uint64_t, uint64_t))(v23 + 16);
  v31 = v59;
  v30(v25, v59, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v51 + 16))(v22, v61, v52);
  sub_214270F68((uint64_t)v25, (uint64_t)v22, a7, AssociatedTypeWitness, a11, (uint64_t)v29);
  v30(v25, v31, AssociatedTypeWitness);
  v32 = v53;
  (*(void (**)(char *, uint64_t, uint64_t))(v56 + 16))(v53, v62, v58);
  v33 = (uint64_t)v32;
  v34 = v54;
  v35 = v55;
  sub_214270F68((uint64_t)v25, v33, v54, AssociatedTypeWitness, v55, v66);
  v30(v25, v31, AssociatedTypeWitness);
  v36 = *(_OWORD *)(a4 + 80);
  v67[4] = *(_OWORD *)(a4 + 64);
  v67[5] = v36;
  v67[6] = *(_OWORD *)(a4 + 96);
  LOBYTE(v67[7]) = *(_BYTE *)(a4 + 112);
  v37 = *(_OWORD *)(a4 + 16);
  v67[0] = *(_OWORD *)a4;
  v67[1] = v37;
  v38 = *(_OWORD *)(a4 + 48);
  v67[2] = *(_OWORD *)(a4 + 32);
  v67[3] = v38;
  sub_21434C9B8(a4, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_21434CA34, (void (*)(uint64_t, uint64_t))sub_2142625F8);
  sub_2142712B0((uint64_t)v25, (uint64_t)v67);
  v40 = v39;
  v42 = v41;
  v30(v25, v31, AssociatedTypeWitness);
  v43 = *(_OWORD *)(v63 + 80);
  v67[4] = *(_OWORD *)(v63 + 64);
  v67[5] = v43;
  v67[6] = *(_OWORD *)(v63 + 96);
  LOBYTE(v67[7]) = *(_BYTE *)(v63 + 112);
  v44 = *(_OWORD *)(v63 + 16);
  v67[0] = *(_OWORD *)v63;
  v67[1] = v44;
  v45 = *(_OWORD *)(v63 + 48);
  v67[2] = *(_OWORD *)(v63 + 32);
  v67[3] = v45;
  sub_21434C9B8(v63, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_21434CA34, (void (*)(uint64_t, uint64_t))sub_2142625F8);
  sub_2142712B0((uint64_t)v25, (uint64_t)v67);
  BarMark.init<A, B>(x:y:width:height:stacking:)(v60, v66, v40, v42, v46, v47, v64, v50, v67, v34, v57, v35);
  return memcpy(v65, v67, 0x120uLL);
}

uint64_t sub_214345C68()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  void (*v16)(char *, uint64_t);
  uint64_t TupleTypeMetadata2;
  uint64_t v18;
  uint64_t v19;
  uint64_t TupleTypeMetadata3;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  int v31;
  char *v32;
  int v33;
  uint64_t v35;

  v1 = v0[3];
  v2 = v0[4];
  v4 = v0[6];
  v3 = v0[7];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, v1, v4);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = (*(unsigned __int8 *)(v7 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v7 + 64);
  v35 = v3;
  v10 = type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, v2, v3);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = (v8 + v9 + *(unsigned __int8 *)(v11 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v13 = v12 + *(_QWORD *)(v11 + 64);
  v14 = (char *)v0 + v8;
  sub_2141ED0BC(*(_QWORD *)v14, *((_QWORD *)v14 + 1), v14[16]);
  swift_bridgeObjectRelease();
  v15 = &v14[*(int *)(v6 + 44)];
  type metadata accessor for PlottableProjection.Storage(0, AssociatedTypeWitness, v1, v4);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v15, v1);
      break;
    case 1u:
      v16 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v1 - 8) + 8);
      v16(v15, v1);
      TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
      v16(&v15[*(int *)(TupleTypeMetadata2 + 48)], v1);
      break;
    case 2u:
      swift_release();
      break;
    case 3u:
      swift_release();
      swift_release();
      break;
    case 4u:
      swift_release();
      sub_2144258E0();
      v18 = sub_214423C48();
      v19 = sub_214423C54();
      TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(&v15[*(int *)(TupleTypeMetadata3 + 48)], v18);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(&v15[*(int *)(TupleTypeMetadata3 + 64)], v19);
      break;
    default:
      break;
  }
  v21 = v13 + 127;
  v22 = (v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_2141ED0BC(*(_QWORD *)((char *)v0 + v12), *(_QWORD *)((char *)v0 + v12 + 8), *((_BYTE *)v0 + v12 + 16));
  swift_bridgeObjectRelease();
  v23 = (char *)v0 + v12 + *(int *)(v10 + 44);
  type metadata accessor for PlottableProjection.Storage(0, AssociatedTypeWitness, v2, v35);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v23, v2);
      break;
    case 1u:
      v24 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8);
      v24(v23, v2);
      v25 = swift_getTupleTypeMetadata2();
      v24(&v23[*(int *)(v25 + 48)], v2);
      break;
    case 2u:
      swift_release();
      break;
    case 3u:
      swift_release();
      swift_release();
      break;
    case 4u:
      swift_release();
      sub_2144258E0();
      v26 = sub_214423C48();
      v27 = sub_214423C54();
      v28 = swift_getTupleTypeMetadata3();
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v26 - 8) + 8))(&v23[*(int *)(v28 + 48)], v26);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v27 - 8) + 8))(&v23[*(int *)(v28 + 64)], v27);
      break;
    default:
      break;
  }
  v29 = v21 & 0xFFFFFFFFFFFFFFF8;
  v30 = (char *)v0 + v22;
  v31 = *((unsigned __int8 *)v0 + v22 + 96);
  if (v31 != 255)
    sub_2142637C0(*((_QWORD *)v30 + 11), v31 & 1);
  sub_2142637C0(*((_QWORD *)v30 + 13), v30[112]);
  v32 = (char *)v0 + v29;
  v33 = *((unsigned __int8 *)v0 + v29 + 96);
  if (v33 != 255)
    sub_2142637C0(*((_QWORD *)v32 + 11), v33 & 1);
  sub_2142637C0(*((_QWORD *)v32 + 13), v32[112]);
  return swift_deallocObject();
}

void *sub_214346084@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v3 = v2[3];
  v4 = v2[4];
  v5 = v2[5];
  v6 = v2[6];
  v7 = v2[7];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, v3, v6) - 8);
  v10 = (*(unsigned __int8 *)(v9 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v11 = *(_QWORD *)(v9 + 64);
  v12 = *(_QWORD *)(type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, v4, v7) - 8);
  v13 = (v10 + v11 + *(unsigned __int8 *)(v12 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  return sub_2143458F4(a1, (uint64_t)v2 + v10, (uint64_t)v2 + v13, (uint64_t)v2 + ((v13 + *(_QWORD *)(v12 + 64) + 7) & 0xFFFFFFFFFFFFFFF8), (uint64_t)v2 + ((v13 + *(_QWORD *)(v12 + 64) + 127) & 0xFFFFFFFFFFFFFFF8), *((unsigned __int8 *)v2 + ((v13 + *(_QWORD *)(v12 + 64) + 127) & 0xFFFFFFFFFFFFFFF8) + 113), v3, a2, v4, v5, v6, v7);
}

uint64_t BarPlot.init<A, B, C>(_:xStart:xEnd:y:height:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, __int128 *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  void (*v34)(char *, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  void (*v47)(char *, char *, uint64_t);
  uint64_t v48;
  char *v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  void (*v54)(uint64_t, uint64_t);
  char *v56;
  char *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  char v85;

  v66 = a8;
  v63 = a7;
  v75 = a4;
  v76 = a3;
  v77 = a2;
  v74 = a1;
  v70 = a9;
  v67 = a12;
  v64 = a11;
  v73 = a10;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v60 = type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, a8, a12);
  v72 = *(_QWORD *)(v60 - 8);
  v61 = *(_QWORD *)(v72 + 64);
  MEMORY[0x24BDAC7A8](v60);
  v71 = (char *)&v56 - v17;
  v18 = type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, a7, a11);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(_QWORD *)(v19 + 64);
  v21 = MEMORY[0x24BDAC7A8](v18);
  v57 = (char *)&v56 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x24BDAC7A8](v21);
  v24 = (char *)&v56 - v23;
  v56 = (char *)&v56 - v23;
  v25 = a6;
  v65 = *(_QWORD *)(a6 - 8);
  v26 = v65;
  MEMORY[0x24BDAC7A8](v22);
  v28 = (char *)&v56 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = v28;
  v69 = type metadata accessor for VectorizedBarPlotContent(0, v25, v73, v29);
  v68 = *(_QWORD *)(v69 - 8);
  MEMORY[0x24BDAC7A8](v69);
  v62 = (uint64_t)&v56 - v30;
  v31 = a5[5];
  v82 = a5[4];
  v83 = v31;
  v84 = a5[6];
  v85 = *((_BYTE *)a5 + 112);
  v32 = a5[1];
  v78 = *a5;
  v79 = v32;
  v33 = a5[3];
  v80 = a5[2];
  v81 = v33;
  (*(void (**)(char *, uint64_t, uint64_t))(v26 + 16))(v28, v74, v25);
  v34 = *(void (**)(char *, uint64_t, uint64_t))(v19 + 16);
  v34(v24, v77, v18);
  v34((char *)&v56 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0), v76, v18);
  v35 = v72;
  v36 = v60;
  (*(void (**)(char *, uint64_t, uint64_t))(v72 + 16))(v71, v75, v60);
  v37 = *(unsigned __int8 *)(v19 + 80);
  v58 = v19;
  v38 = (v37 + 64) & ~v37;
  v39 = (v20 + v37 + v38) & ~v37;
  v40 = (v20 + *(unsigned __int8 *)(v35 + 80) + v39) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80);
  v41 = (v61 + v40 + 7) & 0xFFFFFFFFFFFFFFF8;
  v42 = (char *)swift_allocObject();
  v43 = v63;
  *((_QWORD *)v42 + 2) = v25;
  *((_QWORD *)v42 + 3) = v43;
  v44 = v73;
  *((_QWORD *)v42 + 4) = v66;
  *((_QWORD *)v42 + 5) = v44;
  v45 = v67;
  *((_QWORD *)v42 + 6) = v64;
  *((_QWORD *)v42 + 7) = v45;
  v46 = &v42[v38];
  v47 = *(void (**)(char *, char *, uint64_t))(v19 + 32);
  v47(v46, v56, v18);
  v47(&v42[v39], v57, v18);
  v48 = v72;
  (*(void (**)(char *, char *, uint64_t))(v72 + 32))(&v42[v40], v71, v36);
  v49 = &v42[v41];
  v50 = v83;
  *((_OWORD *)v49 + 4) = v82;
  *((_OWORD *)v49 + 5) = v50;
  *((_OWORD *)v49 + 6) = v84;
  v49[112] = v85;
  v51 = v79;
  *(_OWORD *)v49 = v78;
  *((_OWORD *)v49 + 1) = v51;
  v52 = v81;
  *((_OWORD *)v49 + 2) = v80;
  *((_OWORD *)v49 + 3) = v52;
  v53 = v62;
  sub_2142868CC((uint64_t)v59, (uint64_t)sub_214346E98, (uint64_t)v42, v25, (uint64_t)&type metadata for BarMark, v44, (uint64_t)&protocol witness table for BarMark, v62);
  (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v75, v36);
  v54 = *(void (**)(uint64_t, uint64_t))(v58 + 8);
  v54(v76, v18);
  v54(v77, v18);
  (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v74, v25);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v68 + 32))(v70, v53, v69);
}

void *sub_2143465E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X6>, uint64_t a7@<X7>, void *a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  void (*v34)(char *, uint64_t, uint64_t);
  uint64_t v35;
  void (*v36)(char *, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  char v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  _OWORD v67[19];

  v59 = a7;
  v53 = a5;
  v63 = a3;
  v64 = a4;
  v56 = a1;
  v57 = a2;
  v65 = a8;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v60 = a11;
  v14 = type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, a7, a11);
  v61 = *(_QWORD *)(v14 - 8);
  v62 = v14;
  MEMORY[0x24BDAC7A8](v14);
  v58 = (char *)&v51 - v15;
  v17 = type metadata accessor for PlottableValue(0, a7, a11, v16);
  MEMORY[0x24BDAC7A8](v17);
  v55 = (uint64_t)&v51 - v18;
  v19 = a6;
  v52 = a6;
  v20 = type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, a6, a10);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = MEMORY[0x24BDAC7A8](v20);
  v24 = (char *)&v51 - v23;
  v25 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](v22);
  v27 = (char *)&v51 - v26;
  v29 = type metadata accessor for PlottableValue(0, v19, a10, v28);
  v30 = MEMORY[0x24BDAC7A8](v29);
  v66 = (uint64_t)&v51 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v30);
  v33 = (char *)&v51 - v32;
  v54 = (uint64_t)&v51 - v32;
  v34 = *(void (**)(char *, uint64_t, uint64_t))(v25 + 16);
  v35 = v56;
  v34(v27, v56, AssociatedTypeWitness);
  v36 = *(void (**)(char *, uint64_t, uint64_t))(v21 + 16);
  v36(v24, v57, v20);
  v37 = (uint64_t)v33;
  v38 = v52;
  sub_214270F68((uint64_t)v27, (uint64_t)v24, v52, AssociatedTypeWitness, a10, v37);
  v34(v27, v35, AssociatedTypeWitness);
  v36(v24, v63, v20);
  sub_214270F68((uint64_t)v27, (uint64_t)v24, v38, AssociatedTypeWitness, a10, v66);
  v39 = v35;
  v34(v27, v35, AssociatedTypeWitness);
  v40 = v58;
  (*(void (**)(char *, uint64_t, uint64_t))(v61 + 16))(v58, v64, v62);
  v41 = v55;
  v42 = (uint64_t)v40;
  v43 = v59;
  v44 = v60;
  sub_214270F68((uint64_t)v27, v42, v59, AssociatedTypeWitness, v60, v55);
  v34(v27, v39, AssociatedTypeWitness);
  v45 = *(_OWORD *)(v53 + 80);
  v67[4] = *(_OWORD *)(v53 + 64);
  v67[5] = v45;
  v67[6] = *(_OWORD *)(v53 + 96);
  LOBYTE(v67[7]) = *(_BYTE *)(v53 + 112);
  v46 = *(_OWORD *)(v53 + 16);
  v67[0] = *(_OWORD *)v53;
  v67[1] = v46;
  v47 = *(_OWORD *)(v53 + 48);
  v67[2] = *(_OWORD *)(v53 + 32);
  v67[3] = v47;
  sub_21434C9B8(v53, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_21434CA34, (void (*)(uint64_t, uint64_t))sub_2142625F8);
  sub_2142712B0((uint64_t)v27, (uint64_t)v67);
  BarMark.init<A, B>(xStart:xEnd:y:height:)(v54, v66, v41, v48, v49, v38, v43, a10, v67, v44);
  return memcpy(v65, v67, 0x120uLL);
}

uint64_t sub_214346948()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  void (*v17)(char *, uint64_t);
  uint64_t TupleTypeMetadata2;
  uint64_t v19;
  uint64_t v20;
  uint64_t TupleTypeMetadata3;
  char *v22;
  void (*v23)(char *, uint64_t);
  uint64_t v24;
  char *v25;
  char *v26;
  void (*v27)(char *, uint64_t);
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t);
  uint64_t v34;
  unint64_t v35;
  char *v36;
  void (*v37)(char *, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  int v43;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v1 = v0[3];
  v2 = v0[4];
  v3 = v0[6];
  v4 = v0[7];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, v1, v3);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v8 + 64) & ~v8;
  v10 = *(_QWORD *)(v7 + 64);
  v11 = (v10 + v8 + v9) & ~v8;
  v48 = v4;
  v49 = v2;
  v12 = type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, v2, v4);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = (v10 + *(unsigned __int8 *)(v13 + 80) + v11) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v47 = *(_QWORD *)(v13 + 64) + v14;
  v15 = (char *)v0 + v9;
  sub_2141ED0BC(*(_QWORD *)v15, *((_QWORD *)v15 + 1), v15[16]);
  swift_bridgeObjectRelease();
  v16 = &v15[*(int *)(v6 + 44)];
  type metadata accessor for PlottableProjection.Storage(0, AssociatedTypeWitness, v1, v3);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v16, v1);
      break;
    case 1u:
      v17 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v1 - 8) + 8);
      v17(v16, v1);
      TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
      v17(&v16[*(int *)(TupleTypeMetadata2 + 48)], v1);
      break;
    case 2u:
      swift_release();
      break;
    case 3u:
      swift_release();
      swift_release();
      break;
    case 4u:
      swift_release();
      sub_2144258E0();
      v19 = sub_214423C48();
      v46 = v12;
      v20 = sub_214423C54();
      v45 = v14;
      TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(&v16[*(int *)(TupleTypeMetadata3 + 48)], v19);
      v22 = &v16[*(int *)(TupleTypeMetadata3 + 64)];
      v23 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v20 - 8) + 8);
      v24 = v20;
      v14 = v45;
      v12 = v46;
      v23(v22, v24);
      break;
    default:
      break;
  }
  v25 = (char *)v0 + v11;
  sub_2141ED0BC(*(_QWORD *)v25, *((_QWORD *)v25 + 1), v25[16]);
  swift_bridgeObjectRelease();
  v26 = &v25[*(int *)(v6 + 44)];
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v26, v1);
      break;
    case 1u:
      v27 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v1 - 8) + 8);
      v27(v26, v1);
      v28 = swift_getTupleTypeMetadata2();
      v27(&v26[*(int *)(v28 + 48)], v1);
      break;
    case 2u:
      swift_release();
      break;
    case 3u:
      swift_release();
      swift_release();
      break;
    case 4u:
      swift_release();
      sub_2144258E0();
      v29 = v14;
      v30 = sub_214423C48();
      v31 = sub_214423C54();
      v32 = swift_getTupleTypeMetadata3();
      v33 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v30 - 8) + 8);
      v34 = v30;
      v14 = v29;
      v33(&v26[*(int *)(v32 + 48)], v34);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v31 - 8) + 8))(&v26[*(int *)(v32 + 64)], v31);
      break;
    default:
      break;
  }
  v35 = (v47 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_2141ED0BC(*(_QWORD *)((char *)v0 + v14), *(_QWORD *)((char *)v0 + v14 + 8), *((_BYTE *)v0 + v14 + 16));
  swift_bridgeObjectRelease();
  v36 = (char *)v0 + v14 + *(int *)(v12 + 44);
  type metadata accessor for PlottableProjection.Storage(0, AssociatedTypeWitness, v49, v48);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v49 - 8) + 8))(v36, v49);
      break;
    case 1u:
      v37 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v49 - 8) + 8);
      v37(v36, v49);
      v38 = swift_getTupleTypeMetadata2();
      v37(&v36[*(int *)(v38 + 48)], v49);
      break;
    case 2u:
      swift_release();
      break;
    case 3u:
      swift_release();
      swift_release();
      break;
    case 4u:
      swift_release();
      sub_2144258E0();
      v39 = sub_214423C48();
      v40 = sub_214423C54();
      v41 = swift_getTupleTypeMetadata3();
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v39 - 8) + 8))(&v36[*(int *)(v41 + 48)], v39);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v40 - 8) + 8))(&v36[*(int *)(v41 + 64)], v40);
      break;
    default:
      break;
  }
  v42 = (char *)v0 + v35;
  v43 = *((unsigned __int8 *)v0 + v35 + 96);
  if (v43 != 255)
    sub_2142637C0(*((_QWORD *)v42 + 11), v43 & 1);
  sub_2142637C0(*((_QWORD *)v42 + 13), v42[112]);
  return swift_deallocObject();
}

void *sub_214346E98@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;

  v3 = v2[3];
  v4 = v2[4];
  v5 = v2[5];
  v6 = v2[6];
  v7 = v2[7];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, v3, v6) - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = (v10 + 64) & ~v10;
  v12 = *(_QWORD *)(v9 + 64);
  v13 = (v12 + v10 + v11) & ~v10;
  v14 = *(_QWORD *)(type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, v4, v7) - 8);
  v15 = (v12 + *(unsigned __int8 *)(v14 + 80) + v13) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  return sub_2143465E4(a1, (uint64_t)v2 + v11, (uint64_t)v2 + v13, (uint64_t)v2 + v15, (uint64_t)v2 + ((*(_QWORD *)(v14 + 64) + v15 + 7) & 0xFFFFFFFFFFFFFFF8), v3, v4, a2, v5, v6, v7);
}

uint64_t BarPlot.init<A, B, C>(_:x:yStart:yEnd:width:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, __int128 *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  _QWORD *v35;
  void (*v36)(char *, uint64_t, uint64_t);
  char *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  void (*v49)(char *, char *, uint64_t);
  char *v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  void (*v55)(uint64_t, uint64_t);
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  char v86;

  v62 = a8;
  v66 = a7;
  v76 = a4;
  v77 = a3;
  v78 = a2;
  v75 = a1;
  v70 = a9;
  v63 = a12;
  v67 = a11;
  v60 = a10;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v17 = type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, a7, a11);
  v73 = *(_QWORD **)(v17 - 8);
  v18 = v73[8];
  v19 = MEMORY[0x24BDAC7A8](v17);
  v74 = (char *)&v57 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v19);
  v59 = (char *)&v57 - v20;
  v21 = type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, a8, a12);
  v72 = *(_QWORD *)(v21 - 8);
  v71 = v21;
  v22 = *(_QWORD *)(v72 + 64);
  v23 = MEMORY[0x24BDAC7A8](v21);
  v25 = (char *)&v57 - v24;
  v58 = (char *)&v57 - v24;
  v65 = *(_QWORD *)(a6 - 8);
  v26 = v65;
  MEMORY[0x24BDAC7A8](v23);
  v28 = (char *)&v57 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = v28;
  v69 = type metadata accessor for VectorizedBarPlotContent(0, a6, a10, v29);
  v68 = *(_QWORD *)(v69 - 8);
  MEMORY[0x24BDAC7A8](v69);
  v64 = (uint64_t)&v57 - v30;
  v31 = a5[5];
  v83 = a5[4];
  v84 = v31;
  v85 = a5[6];
  v86 = *((_BYTE *)a5 + 112);
  v32 = a5[1];
  v79 = *a5;
  v80 = v32;
  v33 = a5[3];
  v81 = a5[2];
  v82 = v33;
  (*(void (**)(char *, uint64_t, uint64_t))(v26 + 16))(v28, v75, a6);
  v34 = v72;
  (*(void (**)(char *, uint64_t, uint64_t))(v72 + 16))(v25, v78, v21);
  v35 = v73;
  v36 = (void (*)(char *, uint64_t, uint64_t))v73[2];
  v37 = v59;
  v38 = v17;
  v36(v59, v77, v17);
  v36(v74, v76, v17);
  v39 = (*(unsigned __int8 *)(v34 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80);
  v40 = *((unsigned __int8 *)v35 + 80);
  v41 = (v22 + v40 + v39) & ~v40;
  v42 = (v18 + v40 + v41) & ~v40;
  v43 = (v18 + v42 + 7) & 0xFFFFFFFFFFFFFFF8;
  v44 = (char *)swift_allocObject();
  v45 = v66;
  *((_QWORD *)v44 + 2) = a6;
  *((_QWORD *)v44 + 3) = v45;
  v46 = v60;
  *((_QWORD *)v44 + 4) = v62;
  *((_QWORD *)v44 + 5) = v46;
  v47 = v63;
  *((_QWORD *)v44 + 6) = v67;
  *((_QWORD *)v44 + 7) = v47;
  (*(void (**)(char *, char *, uint64_t))(v34 + 32))(&v44[v39], v58, v71);
  v48 = v73;
  v49 = (void (*)(char *, char *, uint64_t))v73[4];
  v49(&v44[v41], v37, v38);
  v49(&v44[v42], v74, v38);
  v50 = &v44[v43];
  v51 = v84;
  *((_OWORD *)v50 + 4) = v83;
  *((_OWORD *)v50 + 5) = v51;
  *((_OWORD *)v50 + 6) = v85;
  v50[112] = v86;
  v52 = v80;
  *(_OWORD *)v50 = v79;
  *((_OWORD *)v50 + 1) = v52;
  v53 = v82;
  *((_OWORD *)v50 + 2) = v81;
  *((_OWORD *)v50 + 3) = v53;
  v54 = v64;
  sub_2142868CC((uint64_t)v61, (uint64_t)sub_214347CA4, (uint64_t)v44, a6, (uint64_t)&type metadata for BarMark, v46, (uint64_t)&protocol witness table for BarMark, v64);
  v55 = (void (*)(uint64_t, uint64_t))v48[1];
  v55(v76, v38);
  v55(v77, v38);
  (*(void (**)(uint64_t, uint64_t))(v72 + 8))(v78, v71);
  (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v75, a6);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v68 + 32))(v70, v54, v69);
}

void *sub_2143473FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X6>, uint64_t a7@<X7>, void *a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  void (*v31)(char *, uint64_t, uint64_t);
  uint64_t v32;
  void (*v33)(char *, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  char v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  _OWORD v63[19];

  v51 = a6;
  v58 = a5;
  v59 = a3;
  v60 = a4;
  v61 = a8;
  v56 = a1;
  v57 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v52 = a10;
  v55 = type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, a6, a10);
  v53 = *(_QWORD *)(v55 - 8);
  MEMORY[0x24BDAC7A8](v55);
  v50 = (char *)&v45 - v14;
  v16 = type metadata accessor for PlottableValue(0, a6, a10, v15);
  v17 = MEMORY[0x24BDAC7A8](v16);
  v54 = (uint64_t)&v45 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v62 = (uint64_t)&v45 - v19;
  v46 = type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, a7, a11);
  v20 = *(_QWORD *)(v46 - 8);
  v21 = MEMORY[0x24BDAC7A8](v46);
  v23 = (char *)&v45 - v22;
  v24 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](v21);
  v26 = (char *)&v45 - v25;
  v48 = a7;
  v49 = a11;
  v28 = type metadata accessor for PlottableValue(0, a7, a11, v27);
  MEMORY[0x24BDAC7A8](v28);
  v30 = (char *)&v45 - v29;
  v47 = (uint64_t)&v45 - v29;
  v31 = *(void (**)(char *, uint64_t, uint64_t))(v24 + 16);
  v32 = v56;
  v31(v26, v56, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v23, v57, v46);
  sub_214270F68((uint64_t)v26, (uint64_t)v23, a7, AssociatedTypeWitness, a11, (uint64_t)v30);
  v31(v26, v32, AssociatedTypeWitness);
  v33 = *(void (**)(char *, uint64_t, uint64_t))(v53 + 16);
  v34 = (uint64_t)v50;
  v35 = v55;
  v33(v50, v59, v55);
  v37 = v51;
  v36 = v52;
  sub_214270F68((uint64_t)v26, v34, v51, AssociatedTypeWitness, v52, v62);
  v31(v26, v32, AssociatedTypeWitness);
  v33((char *)v34, v60, v35);
  v38 = v54;
  sub_214270F68((uint64_t)v26, v34, v37, AssociatedTypeWitness, v36, v54);
  v31(v26, v32, AssociatedTypeWitness);
  v39 = *(_OWORD *)(v58 + 80);
  v63[4] = *(_OWORD *)(v58 + 64);
  v63[5] = v39;
  v63[6] = *(_OWORD *)(v58 + 96);
  LOBYTE(v63[7]) = *(_BYTE *)(v58 + 112);
  v40 = *(_OWORD *)(v58 + 16);
  v63[0] = *(_OWORD *)v58;
  v63[1] = v40;
  v41 = *(_OWORD *)(v58 + 48);
  v63[2] = *(_OWORD *)(v58 + 32);
  v63[3] = v41;
  sub_21434C9B8(v58, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_21434CA34, (void (*)(uint64_t, uint64_t))sub_2142625F8);
  sub_2142712B0((uint64_t)v26, (uint64_t)v63);
  BarMark.init<A, B>(x:yStart:yEnd:width:)(v47, v62, v38, v42, v43, v48, v37, v49, v63, v36);
  return memcpy(v61, v63, 0x120uLL);
}

uint64_t sub_214347754()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  void (*v16)(char *, uint64_t);
  uint64_t TupleTypeMetadata2;
  uint64_t v18;
  uint64_t v19;
  uint64_t TupleTypeMetadata3;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t);
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  void (*v35)(char *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  int v41;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;

  v1 = v0[3];
  v2 = v0[4];
  v3 = v0[6];
  v4 = v0[7];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, v2, v4);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = (*(unsigned __int8 *)(v7 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v7 + 64);
  v45 = type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, v1, v3);
  v10 = *(_QWORD *)(v45 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = (v8 + v9 + v11) & ~v11;
  v13 = *(_QWORD *)(v10 + 64);
  v43 = v13 + ((v13 + v11 + v12) & ~v11);
  v44 = (v13 + v11 + v12) & ~v11;
  v14 = (char *)v0 + v8;
  sub_2141ED0BC(*(_QWORD *)v14, *((_QWORD *)v14 + 1), v14[16]);
  swift_bridgeObjectRelease();
  v15 = &v14[*(int *)(v6 + 44)];
  type metadata accessor for PlottableProjection.Storage(0, AssociatedTypeWitness, v2, v4);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v15, v2);
      break;
    case 1u:
      v16 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8);
      v16(v15, v2);
      TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
      v16(&v15[*(int *)(TupleTypeMetadata2 + 48)], v2);
      break;
    case 2u:
      swift_release();
      break;
    case 3u:
      swift_release();
      swift_release();
      break;
    case 4u:
      swift_release();
      sub_2144258E0();
      v18 = sub_214423C48();
      v19 = sub_214423C54();
      TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(&v15[*(int *)(TupleTypeMetadata3 + 48)], v18);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(&v15[*(int *)(TupleTypeMetadata3 + 64)], v19);
      break;
    default:
      break;
  }
  v21 = v43 + 7;
  v22 = (char *)v0 + v12;
  sub_2141ED0BC(*(_QWORD *)v22, *((_QWORD *)v22 + 1), v22[16]);
  swift_bridgeObjectRelease();
  v23 = v45;
  v24 = &v22[*(int *)(v45 + 44)];
  type metadata accessor for PlottableProjection.Storage(0, AssociatedTypeWitness, v1, v3);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v24, v1);
      break;
    case 1u:
      v25 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v1 - 8) + 8);
      v25(v24, v1);
      v26 = swift_getTupleTypeMetadata2();
      v25(&v24[*(int *)(v26 + 48)], v1);
      break;
    case 2u:
      swift_release();
      break;
    case 3u:
      swift_release();
      swift_release();
      break;
    case 4u:
      swift_release();
      sub_2144258E0();
      v27 = sub_214423C48();
      v28 = sub_214423C54();
      v29 = swift_getTupleTypeMetadata3();
      v30 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v27 - 8) + 8);
      v31 = v27;
      v21 = v43 + 7;
      v30(&v24[*(int *)(v29 + 48)], v31);
      v32 = *(int *)(v29 + 64);
      v23 = v45;
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v28 - 8) + 8))(&v24[v32], v28);
      break;
    default:
      break;
  }
  v33 = v21 & 0xFFFFFFFFFFFFFFF8;
  sub_2141ED0BC(*(_QWORD *)((char *)v0 + v44), *(_QWORD *)((char *)v0 + v44 + 8), *((_BYTE *)v0 + v44 + 16));
  swift_bridgeObjectRelease();
  v34 = (char *)v0 + v44 + *(int *)(v23 + 44);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v34, v1);
      break;
    case 1u:
      v35 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v1 - 8) + 8);
      v35(v34, v1);
      v36 = swift_getTupleTypeMetadata2();
      v35(&v34[*(int *)(v36 + 48)], v1);
      break;
    case 2u:
      swift_release();
      break;
    case 3u:
      swift_release();
      swift_release();
      break;
    case 4u:
      swift_release();
      sub_2144258E0();
      v37 = sub_214423C48();
      v38 = sub_214423C54();
      v39 = swift_getTupleTypeMetadata3();
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v37 - 8) + 8))(&v34[*(int *)(v39 + 48)], v37);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v38 - 8) + 8))(&v34[*(int *)(v39 + 64)], v38);
      break;
    default:
      break;
  }
  v40 = (char *)v0 + v33;
  v41 = *((unsigned __int8 *)v0 + v33 + 96);
  if (v41 != 255)
    sub_2142637C0(*((_QWORD *)v40 + 11), v41 & 1);
  sub_2142637C0(*((_QWORD *)v40 + 13), v40[112]);
  return swift_deallocObject();
}

void *sub_214347CA4@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = v2[3];
  v4 = v2[4];
  v5 = v2[5];
  v6 = v2[6];
  v7 = v2[7];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, v4, v7) - 8);
  v10 = (*(unsigned __int8 *)(v9 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v11 = *(_QWORD *)(v9 + 64);
  v12 = *(_QWORD *)(type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, v3, v6) - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  return sub_2143473FC(a1, (uint64_t)v2 + v10, (uint64_t)v2 + ((v10 + v11 + v13) & ~v13), (uint64_t)v2 + ((*(_QWORD *)(v12 + 64) + v13 + ((v10 + v11 + v13) & ~v13)) & ~v13), (uint64_t)v2+ ((*(_QWORD *)(v12 + 64) + ((*(_QWORD *)(v12 + 64) + v13 + ((v10 + v11 + v13) & ~v13)) & ~v13) + 7) & 0xFFFFFFFFFFFFFFF8), v3, v4, a2, v5, v6, v7);
}

uint64_t BarPlot.init<A, B>(_:x:yStart:yEnd:width:stacking:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, int a6@<W5>, __int128 *a7@<X6>, int a8@<W7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  char v68;

  v57 = a6;
  v58 = a8;
  v56 = a5;
  v55 = a4;
  v54 = a3;
  v60 = a2;
  v47 = a1;
  v59 = a9;
  v50 = a11;
  v51 = a13;
  v45 = a12;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v16 = type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, a11, a13);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(_QWORD *)(v17 + 64);
  v19 = MEMORY[0x24BDAC7A8](v16);
  v21 = (char *)&v44 - v20;
  v48 = *(_QWORD *)(a10 - 8);
  v22 = v48;
  MEMORY[0x24BDAC7A8](v19);
  v24 = (char *)&v44 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = v24;
  v53 = type metadata accessor for VectorizedBarPlotContent(0, a10, a12, v25);
  v52 = *(_QWORD *)(v53 - 8);
  MEMORY[0x24BDAC7A8](v53);
  v49 = (uint64_t)&v44 - v26;
  v27 = a7[5];
  v65 = a7[4];
  v66 = v27;
  v67 = a7[6];
  v68 = *((_BYTE *)a7 + 112);
  v28 = a7[1];
  v61 = *a7;
  v62 = v28;
  v29 = a7[3];
  v63 = a7[2];
  v64 = v29;
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v24, a1, a10);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v21, v60, v16);
  v30 = (*(unsigned __int8 *)(v17 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
  v31 = (char *)swift_allocObject();
  v32 = v50;
  *((_QWORD *)v31 + 2) = a10;
  *((_QWORD *)v31 + 3) = v32;
  v33 = v45;
  v34 = v51;
  *((_QWORD *)v31 + 4) = v45;
  *((_QWORD *)v31 + 5) = v34;
  (*(void (**)(char *, char *, uint64_t))(v17 + 32))(&v31[v30], v21, v16);
  v35 = &v31[(v30 + v18 + 7) & 0xFFFFFFFFFFFFFFF8];
  *(_QWORD *)v35 = v54;
  v35[8] = v55 & 1;
  v36 = &v31[(v30 + v18 + 23) & 0xFFFFFFFFFFFFFFF8];
  *(_QWORD *)v36 = v56;
  v36[8] = v57 & 1;
  v37 = &v31[(v30 + v18 + 39) & 0xFFFFFFFFFFFFFFF8];
  v38 = v64;
  *((_OWORD *)v37 + 2) = v63;
  *((_OWORD *)v37 + 3) = v38;
  v39 = v62;
  *(_OWORD *)v37 = v61;
  *((_OWORD *)v37 + 1) = v39;
  v37[112] = v68;
  v40 = v67;
  v41 = v65;
  *((_OWORD *)v37 + 5) = v66;
  *((_OWORD *)v37 + 6) = v40;
  *((_OWORD *)v37 + 4) = v41;
  v37[113] = v58;
  v42 = v49;
  sub_2142868CC((uint64_t)v46, (uint64_t)sub_21434853C, (uint64_t)v31, a10, (uint64_t)&type metadata for BarMark, v33, (uint64_t)&protocol witness table for BarMark, v49);
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v60, v16);
  (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v47, a10);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v52 + 32))(v59, v42, v53);
}

void *sub_2143480F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X6>, int a8@<W7>, void *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  void (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  int v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  int v48;
  _OWORD v49[19];

  v48 = a8;
  v45 = a3;
  v46 = a5;
  v41 = a1;
  v42 = a2;
  v47 = a9;
  v43 = a4 & 1;
  v44 = a6 & 1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v39 = a11;
  v40 = a13;
  v15 = type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, a11, a13);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v38 - v18;
  v20 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](v17);
  v22 = (char *)&v38 - v21;
  v24 = type metadata accessor for PlottableValue(0, a11, a13, v23);
  MEMORY[0x24BDAC7A8](v24);
  v26 = (char *)&v38 - v25;
  v27 = *(void (**)(char *, uint64_t, uint64_t))(v20 + 16);
  v28 = v41;
  v27(v22, v41, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v19, v42, v15);
  v29 = (uint64_t)v19;
  v30 = v39;
  v31 = v40;
  sub_214270F68((uint64_t)v22, v29, v39, AssociatedTypeWitness, v40, (uint64_t)v26);
  v27(v22, v28, AssociatedTypeWitness);
  v32 = *(_OWORD *)(a7 + 80);
  v49[4] = *(_OWORD *)(a7 + 64);
  v49[5] = v32;
  v49[6] = *(_OWORD *)(a7 + 96);
  LOBYTE(v49[7]) = *(_BYTE *)(a7 + 112);
  v33 = *(_OWORD *)(a7 + 16);
  v49[0] = *(_OWORD *)a7;
  v49[1] = v33;
  v34 = *(_OWORD *)(a7 + 48);
  v49[2] = *(_OWORD *)(a7 + 32);
  v49[3] = v34;
  sub_21434C9B8(a7, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_21434CA54, (void (*)(uint64_t, uint64_t))sub_21434CA50);
  sub_2142712B0((uint64_t)v22, (uint64_t)v49);
  BarMark.init<A>(x:yStart:yEnd:width:stacking:)((uint64_t)v26, v45, v43, v46, v44, v35, v36, v48, v49, v30, v31);
  return memcpy(v47, v49, 0x120uLL);
}

uint64_t sub_21434830C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t TupleTypeMetadata2;
  uint64_t v12;
  uint64_t v13;
  uint64_t TupleTypeMetadata3;
  uint64_t v15;
  int v16;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(v0 + 40);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v4 = type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, v1, v2);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = (*(_QWORD *)(v5 + 64) + v6 + 39) & 0xFFFFFFFFFFFFFFF8;
  v8 = v0 + v6;
  sub_2141ED0BC(*(_QWORD *)(v0 + v6), *(_QWORD *)(v0 + v6 + 8), *(_BYTE *)(v0 + v6 + 16));
  swift_bridgeObjectRelease();
  v9 = v8 + *(int *)(v4 + 44);
  type metadata accessor for PlottableProjection.Storage(0, AssociatedTypeWitness, v1, v2);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v9, v1);
      break;
    case 1u:
      v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8);
      v10(v9, v1);
      TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
      v10(v9 + *(int *)(TupleTypeMetadata2 + 48), v1);
      break;
    case 2u:
      swift_release();
      break;
    case 3u:
      swift_release();
      swift_release();
      break;
    case 4u:
      swift_release();
      sub_2144258E0();
      v12 = sub_214423C48();
      v13 = sub_214423C54();
      TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v9 + *(int *)(TupleTypeMetadata3 + 48), v12);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v9 + *(int *)(TupleTypeMetadata3 + 64), v13);
      break;
    default:
      break;
  }
  v15 = v0 + v7;
  v16 = *(unsigned __int8 *)(v0 + v7 + 96);
  if (v16 != 255)
    sub_2142637C0(*(_QWORD *)(v15 + 88), v16 & 1);
  sub_2142637C0(*(_QWORD *)(v15 + 104), *(_BYTE *)(v15 + 112));
  return swift_deallocObject();
}

void *sub_21434853C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  v5 = v2[2];
  v6 = v2[3];
  v8 = v2[4];
  v7 = v2[5];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = *(_QWORD *)(type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, v6, v7) - 8);
  v11 = (*(unsigned __int8 *)(v10 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v12 = v11 + *(_QWORD *)(v10 + 64);
  return sub_2143480F0(a1, (uint64_t)v2 + v11, *(_QWORD *)((char *)v2 + ((v12 + 7) & 0xFFFFFFFFFFFFFFF8)), *((_BYTE *)v2 + ((v12 + 7) & 0xFFFFFFFFFFFFFFF8) + 8), *(_QWORD *)((char *)v2 + ((v12 + 23) & 0xFFFFFFFFFFFFFFF8)), *((_BYTE *)v2 + ((v12 + 23) & 0xFFFFFFFFFFFFFFF8) + 8), (uint64_t)v2 + ((v12 + 39) & 0xFFFFFFFFFFFFFFF8), *((unsigned __int8 *)v2 + ((v12 + 39) & 0xFFFFFFFFFFFFFFF8) + 113), a2, v5, v6, v8, v7);
}

uint64_t BarPlot.init<A, B>(_:xStart:xEnd:y:height:stacking:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, __int128 *a7@<X6>, int a8@<W7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  char v65;

  v54 = a5;
  v55 = a8;
  v53 = a4;
  v52 = a3;
  v50 = a2;
  v56 = a9;
  v57 = a1;
  v47 = a11;
  v48 = a13;
  v44 = a12;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v16 = type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, a11, a13);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(_QWORD *)(v17 + 64);
  v19 = MEMORY[0x24BDAC7A8](v16);
  v21 = (char *)&v43 - v20;
  v45 = *(_QWORD *)(a10 - 8);
  v22 = v45;
  MEMORY[0x24BDAC7A8](v19);
  v24 = (char *)&v43 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = type metadata accessor for VectorizedBarPlotContent(0, a10, a12, v25);
  v49 = *(_QWORD *)(v51 - 8);
  MEMORY[0x24BDAC7A8](v51);
  v46 = (uint64_t)&v43 - v26;
  v27 = a7[5];
  v62 = a7[4];
  v63 = v27;
  v64 = a7[6];
  v65 = *((_BYTE *)a7 + 112);
  v28 = a7[1];
  v58 = *a7;
  v59 = v28;
  v29 = a7[3];
  v60 = a7[2];
  v61 = v29;
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v24, v57, a10);
  v30 = a6;
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v21, a6, v16);
  v31 = (*(unsigned __int8 *)(v17 + 80) + 73) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
  v32 = (v18 + v31 + 7) & 0xFFFFFFFFFFFFFFF8;
  v33 = swift_allocObject();
  v34 = v47;
  *(_QWORD *)(v33 + 16) = a10;
  *(_QWORD *)(v33 + 24) = v34;
  v35 = v44;
  v36 = v48;
  *(_QWORD *)(v33 + 32) = v44;
  *(_QWORD *)(v33 + 40) = v36;
  *(_QWORD *)(v33 + 48) = v50;
  *(_BYTE *)(v33 + 56) = v52 & 1;
  *(_QWORD *)(v33 + 64) = v53;
  *(_BYTE *)(v33 + 72) = v54 & 1;
  (*(void (**)(unint64_t, char *, uint64_t))(v17 + 32))(v33 + v31, v21, v16);
  v37 = v33 + v32;
  v38 = v63;
  *(_OWORD *)(v37 + 64) = v62;
  *(_OWORD *)(v37 + 80) = v38;
  *(_OWORD *)(v37 + 96) = v64;
  *(_BYTE *)(v37 + 112) = v65;
  v39 = v59;
  *(_OWORD *)v37 = v58;
  *(_OWORD *)(v37 + 16) = v39;
  v40 = v61;
  *(_OWORD *)(v37 + 32) = v60;
  *(_OWORD *)(v37 + 48) = v40;
  *(_BYTE *)(v37 + 113) = v55;
  v41 = v46;
  sub_2142868CC((uint64_t)v24, (uint64_t)sub_214348D80, v33, a10, (uint64_t)&type metadata for BarMark, v35, (uint64_t)&protocol witness table for BarMark, v46);
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v30, v16);
  (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v57, a10);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v49 + 32))(v56, v41, v51);
}

void *sub_214348930@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, int a8@<W7>, void *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  void (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  int v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  int v48;
  _OWORD v49[19];

  v48 = a8;
  v41 = a1;
  v42 = a6;
  v45 = a2;
  v46 = a4;
  v47 = a9;
  v43 = a3 & 1;
  v44 = a5 & 1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v39 = a11;
  v40 = a13;
  v15 = type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, a11, a13);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v38 - v18;
  v20 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](v17);
  v22 = (char *)&v38 - v21;
  v24 = type metadata accessor for PlottableValue(0, a11, a13, v23);
  MEMORY[0x24BDAC7A8](v24);
  v26 = (char *)&v38 - v25;
  v27 = *(void (**)(char *, uint64_t, uint64_t))(v20 + 16);
  v28 = v41;
  v27(v22, v41, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v19, v42, v15);
  v29 = (uint64_t)v19;
  v30 = v39;
  v31 = v40;
  sub_214270F68((uint64_t)v22, v29, v39, AssociatedTypeWitness, v40, (uint64_t)v26);
  v27(v22, v28, AssociatedTypeWitness);
  v32 = *(_OWORD *)(a7 + 80);
  v49[4] = *(_OWORD *)(a7 + 64);
  v49[5] = v32;
  v49[6] = *(_OWORD *)(a7 + 96);
  LOBYTE(v49[7]) = *(_BYTE *)(a7 + 112);
  v33 = *(_OWORD *)(a7 + 16);
  v49[0] = *(_OWORD *)a7;
  v49[1] = v33;
  v34 = *(_OWORD *)(a7 + 48);
  v49[2] = *(_OWORD *)(a7 + 32);
  v49[3] = v34;
  sub_21434C9B8(a7, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_21434CA54, (void (*)(uint64_t, uint64_t))sub_21434CA50);
  sub_2142712B0((uint64_t)v22, (uint64_t)v49);
  BarMark.init<A>(xStart:xEnd:y:height:stacking:)(v45, v43, v46, v44, (uint64_t)v26, v35, v36, v48, v49, v30, v31);
  return memcpy(v47, v49, 0x120uLL);
}

uint64_t sub_214348B50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t TupleTypeMetadata2;
  uint64_t v12;
  uint64_t v13;
  uint64_t TupleTypeMetadata3;
  uint64_t v15;
  int v16;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(v0 + 40);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v4 = type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, v1, v2);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 73) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = (*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  v8 = v0 + v6;
  sub_2141ED0BC(*(_QWORD *)(v0 + v6), *(_QWORD *)(v0 + v6 + 8), *(_BYTE *)(v0 + v6 + 16));
  swift_bridgeObjectRelease();
  v9 = v8 + *(int *)(v4 + 44);
  type metadata accessor for PlottableProjection.Storage(0, AssociatedTypeWitness, v1, v2);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v9, v1);
      break;
    case 1u:
      v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8);
      v10(v9, v1);
      TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
      v10(v9 + *(int *)(TupleTypeMetadata2 + 48), v1);
      break;
    case 2u:
      swift_release();
      break;
    case 3u:
      swift_release();
      swift_release();
      break;
    case 4u:
      swift_release();
      sub_2144258E0();
      v12 = sub_214423C48();
      v13 = sub_214423C54();
      TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v9 + *(int *)(TupleTypeMetadata3 + 48), v12);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v9 + *(int *)(TupleTypeMetadata3 + 64), v13);
      break;
    default:
      break;
  }
  v15 = v0 + v7;
  v16 = *(unsigned __int8 *)(v0 + v7 + 96);
  if (v16 != 255)
    sub_2142637C0(*(_QWORD *)(v15 + 88), v16 & 1);
  sub_2142637C0(*(_QWORD *)(v15 + 104), *(_BYTE *)(v15 + 112));
  return swift_deallocObject();
}

void *sub_214348D80@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  v5 = *(_QWORD *)(v2 + 16);
  v6 = *(_QWORD *)(v2 + 24);
  v8 = *(_QWORD *)(v2 + 32);
  v7 = *(_QWORD *)(v2 + 40);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = *(_QWORD *)(type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, v6, v7) - 8);
  v11 = (*(unsigned __int8 *)(v10 + 80) + 73) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v12 = v2 + ((*(_QWORD *)(v10 + 64) + v11 + 7) & 0xFFFFFFFFFFFFFFF8);
  return sub_214348930(a1, *(_QWORD *)(v2 + 48), *(_BYTE *)(v2 + 56), *(_QWORD *)(v2 + 64), *(_BYTE *)(v2 + 72), v2 + v11, v12, *(unsigned __int8 *)(v12 + 113), a2, v5, v6, v8, v7);
}

uint64_t BarPlot.init<A, B>(_:xStart:xEnd:yStart:yEnd:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, int a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  void (*v39)(char *, char *, uint64_t);
  char *v40;
  char *v41;
  uint64_t v42;
  void (*v43)(uint64_t, uint64_t);
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v58 = a7;
  v57 = a6;
  v56 = a5;
  v55 = a4;
  v60 = a2;
  v61 = a3;
  v49 = a1;
  v59 = a9;
  v51 = a10;
  v52 = a12;
  v46 = a11;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v15 = type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, a10, a12);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(_QWORD *)(v16 + 64);
  v18 = MEMORY[0x24BDAC7A8](v15);
  v45 = (char *)&v45 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)&v45 - v20;
  v50 = *(_QWORD *)(a8 - 8);
  v22 = v50;
  MEMORY[0x24BDAC7A8](v19);
  v24 = (char *)&v45 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = v24;
  v26 = type metadata accessor for VectorizedBarPlotContent(0, a8, a11, v25);
  v53 = *(_QWORD *)(v26 - 8);
  v54 = v26;
  MEMORY[0x24BDAC7A8](v26);
  v48 = (uint64_t)&v45 - v27;
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v24, a1, a8);
  v28 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 16);
  v28(v21, v60, v15);
  v28((char *)&v45 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0), v61, v15);
  v29 = *(unsigned __int8 *)(v16 + 80);
  v30 = (v29 + 48) & ~v29;
  v31 = (v17 + v29 + v30) & ~v29;
  v32 = (v31 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  v33 = (v31 + v17 + 23) & 0xFFFFFFFFFFFFFFF8;
  v34 = (char *)swift_allocObject();
  v35 = v51;
  *((_QWORD *)v34 + 2) = a8;
  *((_QWORD *)v34 + 3) = v35;
  v36 = v46;
  v37 = v52;
  *((_QWORD *)v34 + 4) = v46;
  *((_QWORD *)v34 + 5) = v37;
  v38 = &v34[v30];
  v39 = *(void (**)(char *, char *, uint64_t))(v16 + 32);
  v39(v38, v21, v15);
  v39(&v34[v31], v45, v15);
  v40 = &v34[v32];
  *(_QWORD *)v40 = v55;
  v40[8] = v56 & 1;
  v41 = &v34[v33];
  *(_QWORD *)v41 = v57;
  v41[8] = v58 & 1;
  v42 = v48;
  sub_2142868CC((uint64_t)v47, (uint64_t)sub_2143496A8, (uint64_t)v34, a8, (uint64_t)&type metadata for BarMark, v36, (uint64_t)&protocol witness table for BarMark, v48);
  v43 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
  v43(v61, v15);
  v43(v60, v15);
  (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v49, a8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v53 + 32))(v59, v42, v54);
}

void *sub_21434911C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, char a7@<W6>, void *a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  void (*v26)(char *, uint64_t, uint64_t);
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  _BYTE v43[296];

  v40 = a4;
  v41 = a6;
  v36 = a2;
  v37 = a3;
  v32 = a1;
  v42 = a8;
  v38 = a5 & 1;
  v39 = a7 & 1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v13 = type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, a9, a11);
  v34 = *(_QWORD *)(v13 - 8);
  v35 = v13;
  v14 = MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v31 - v15;
  v17 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](v14);
  v19 = (char *)&v31 - v18;
  v21 = type metadata accessor for PlottableValue(0, a9, a11, v20);
  v22 = MEMORY[0x24BDAC7A8](v21);
  v33 = (uint64_t)&v31 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v22);
  v25 = (char *)&v31 - v24;
  v26 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 16);
  v26(v19, a1, AssociatedTypeWitness);
  v27 = v35;
  v28 = *(void (**)(char *, uint64_t, uint64_t))(v34 + 16);
  v28(v16, v36, v35);
  sub_214270F68((uint64_t)v19, (uint64_t)v16, a9, AssociatedTypeWitness, a11, (uint64_t)v25);
  v26(v19, v32, AssociatedTypeWitness);
  v28(v16, v37, v27);
  v29 = v33;
  sub_214270F68((uint64_t)v19, (uint64_t)v16, a9, AssociatedTypeWitness, a11, v33);
  BarMark.init<A>(xStart:xEnd:yStart:yEnd:)((uint64_t)v25, v29, v40, v38, v41, v39, a9, a11, v43);
  return memcpy(v42, v43, 0x120uLL);
}

uint64_t sub_214349330()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t TupleTypeMetadata2;
  uint64_t v13;
  uint64_t v14;
  uint64_t TupleTypeMetadata3;
  void (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(v0 + 40);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v4 = type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, v1, v2);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (v6 + 48) & ~v6;
  v8 = (*(_QWORD *)(v5 + 64) + v6 + v7) & ~v6;
  v9 = v0 + v7;
  sub_2141ED0BC(*(_QWORD *)(v0 + v7), *(_QWORD *)(v0 + v7 + 8), *(_BYTE *)(v0 + v7 + 16));
  swift_bridgeObjectRelease();
  v10 = v9 + *(int *)(v4 + 44);
  type metadata accessor for PlottableProjection.Storage(0, AssociatedTypeWitness, v1, v2);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v10, v1);
      break;
    case 1u:
      v11 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8);
      v11(v10, v1);
      TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
      v11(v10 + *(int *)(TupleTypeMetadata2 + 48), v1);
      break;
    case 2u:
      swift_release();
      break;
    case 3u:
      swift_release();
      swift_release();
      break;
    case 4u:
      swift_release();
      sub_2144258E0();
      v13 = sub_214423C48();
      v25 = v8;
      v14 = sub_214423C54();
      TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v10 + *(int *)(TupleTypeMetadata3 + 48), v13);
      v16 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8);
      v17 = v14;
      v8 = v25;
      v16(v10 + *(int *)(TupleTypeMetadata3 + 64), v17);
      break;
    default:
      break;
  }
  sub_2141ED0BC(*(_QWORD *)(v0 + v8), *(_QWORD *)(v0 + v8 + 8), *(_BYTE *)(v0 + v8 + 16));
  swift_bridgeObjectRelease();
  v18 = v0 + v8 + *(int *)(v4 + 44);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v18, v1);
      break;
    case 1u:
      v19 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8);
      v19(v18, v1);
      v20 = swift_getTupleTypeMetadata2();
      v19(v18 + *(int *)(v20 + 48), v1);
      break;
    case 2u:
      swift_release();
      break;
    case 3u:
      swift_release();
      swift_release();
      break;
    case 4u:
      swift_release();
      sub_2144258E0();
      v21 = sub_214423C48();
      v22 = sub_214423C54();
      v23 = swift_getTupleTypeMetadata3();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(v18 + *(int *)(v23 + 48), v21);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(v18 + *(int *)(v23 + 64), v22);
      break;
    default:
      return swift_deallocObject();
  }
  return swift_deallocObject();
}

void *sub_2143496A8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = v2[3];
  v7 = v2[4];
  v6 = v2[5];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, v5, v6) - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = (v10 + 48) & ~v10;
  v12 = *(_QWORD *)(v9 + 64);
  v13 = (v12 + v10 + v11) & ~v10;
  return sub_21434911C(a1, (uint64_t)v2 + v11, (uint64_t)v2 + v13, *(_QWORD *)((char *)v2 + ((v13 + v12 + 7) & 0xFFFFFFFFFFFFFFF8)), *((_BYTE *)v2 + ((v13 + v12 + 7) & 0xFFFFFFFFFFFFFFF8) + 8), *(_QWORD *)((char *)v2 + ((v13 + v12 + 23) & 0xFFFFFFFFFFFFFFF8)), *((_BYTE *)v2 + ((v13 + v12 + 23) & 0xFFFFFFFFFFFFFFF8) + 8), a2, v5, v7, v6);
}

uint64_t BarPlot.init<A, B>(_:xStart:xEnd:yStart:yEnd:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(uint64_t, char *, uint64_t);
  uint64_t v39;
  void (*v40)(uint64_t, uint64_t);
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;

  v56 = a9;
  v57 = a6;
  v55 = a5;
  v54 = a4;
  v53 = a3;
  v52 = a2;
  v45 = a1;
  v48 = a12;
  v49 = a7;
  v47 = a10;
  v43 = a11;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v15 = type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, a10, a12);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(_QWORD *)(v16 + 64);
  v18 = MEMORY[0x24BDAC7A8](v15);
  v42 = (char *)&v42 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)&v42 - v20;
  v46 = *(_QWORD *)(a8 - 8);
  v22 = v46;
  MEMORY[0x24BDAC7A8](v19);
  v24 = (char *)&v42 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for VectorizedBarPlotContent(0, a8, a11, v25);
  v50 = *(_QWORD *)(v26 - 8);
  v51 = v26;
  MEMORY[0x24BDAC7A8](v26);
  v44 = (uint64_t)&v42 - v27;
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v24, a1, a8);
  v28 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 16);
  v28(v21, v57, v15);
  v29 = v49;
  v28((char *)&v42 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0), v49, v15);
  v30 = *(unsigned __int8 *)(v16 + 80);
  v31 = (v30 + 73) & ~v30;
  v32 = (v17 + v30 + v31) & ~v30;
  v33 = swift_allocObject();
  v34 = v47;
  *(_QWORD *)(v33 + 16) = a8;
  *(_QWORD *)(v33 + 24) = v34;
  v35 = v43;
  v36 = v48;
  *(_QWORD *)(v33 + 32) = v43;
  *(_QWORD *)(v33 + 40) = v36;
  *(_QWORD *)(v33 + 48) = v52;
  *(_BYTE *)(v33 + 56) = v53 & 1;
  *(_QWORD *)(v33 + 64) = v54;
  *(_BYTE *)(v33 + 72) = v55 & 1;
  v37 = v33 + v31;
  v38 = *(void (**)(uint64_t, char *, uint64_t))(v16 + 32);
  v38(v37, v21, v15);
  v38(v33 + v32, v42, v15);
  v39 = v44;
  sub_2142868CC((uint64_t)v24, (uint64_t)sub_214349FC8, v33, a8, (uint64_t)&type metadata for BarMark, v35, (uint64_t)&protocol witness table for BarMark, v44);
  v40 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
  v40(v29, v15);
  v40(v57, v15);
  (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v45, a8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v50 + 32))(v56, v39, v51);
}

void *sub_214349A4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, void *a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  void (*v26)(char *, uint64_t, uint64_t);
  void (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  _BYTE v41[296];

  v34 = a6;
  v35 = a7;
  v38 = a2;
  v39 = a4;
  v31 = a1;
  v40 = a8;
  v36 = a3 & 1;
  v37 = a5 & 1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v33 = type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, a9, a11);
  v13 = *(_QWORD *)(v33 - 8);
  v14 = MEMORY[0x24BDAC7A8](v33);
  v16 = (char *)&v31 - v15;
  v17 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](v14);
  v19 = (char *)&v31 - v18;
  v21 = type metadata accessor for PlottableValue(0, a9, a11, v20);
  v22 = MEMORY[0x24BDAC7A8](v21);
  v32 = (uint64_t)&v31 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v22);
  v25 = (char *)&v31 - v24;
  v26 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 16);
  v26(v19, a1, AssociatedTypeWitness);
  v27 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v28 = v33;
  v27(v16, v34, v33);
  sub_214270F68((uint64_t)v19, (uint64_t)v16, a9, AssociatedTypeWitness, a11, (uint64_t)v25);
  v26(v19, v31, AssociatedTypeWitness);
  v27(v16, v35, v28);
  v29 = v32;
  sub_214270F68((uint64_t)v19, (uint64_t)v16, a9, AssociatedTypeWitness, a11, v32);
  BarMark.init<A>(xStart:xEnd:yStart:yEnd:)(v38, v36, v39, v37, (uint64_t)v25, v29, a9, a11, v41);
  return memcpy(v40, v41, 0x120uLL);
}

uint64_t sub_214349C5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t TupleTypeMetadata2;
  uint64_t v13;
  uint64_t v14;
  uint64_t TupleTypeMetadata3;
  void (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(v0 + 40);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v4 = type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, v1, v2);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (v6 + 73) & ~v6;
  v8 = (*(_QWORD *)(v5 + 64) + v6 + v7) & ~v6;
  v9 = v0 + v7;
  sub_2141ED0BC(*(_QWORD *)(v0 + v7), *(_QWORD *)(v0 + v7 + 8), *(_BYTE *)(v0 + v7 + 16));
  swift_bridgeObjectRelease();
  v10 = v9 + *(int *)(v4 + 44);
  type metadata accessor for PlottableProjection.Storage(0, AssociatedTypeWitness, v1, v2);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v10, v1);
      break;
    case 1u:
      v11 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8);
      v11(v10, v1);
      TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
      v11(v10 + *(int *)(TupleTypeMetadata2 + 48), v1);
      break;
    case 2u:
      swift_release();
      break;
    case 3u:
      swift_release();
      swift_release();
      break;
    case 4u:
      swift_release();
      sub_2144258E0();
      v13 = sub_214423C48();
      v25 = v8;
      v14 = sub_214423C54();
      TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v10 + *(int *)(TupleTypeMetadata3 + 48), v13);
      v16 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8);
      v17 = v14;
      v8 = v25;
      v16(v10 + *(int *)(TupleTypeMetadata3 + 64), v17);
      break;
    default:
      break;
  }
  sub_2141ED0BC(*(_QWORD *)(v0 + v8), *(_QWORD *)(v0 + v8 + 8), *(_BYTE *)(v0 + v8 + 16));
  swift_bridgeObjectRelease();
  v18 = v0 + v8 + *(int *)(v4 + 44);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v18, v1);
      break;
    case 1u:
      v19 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8);
      v19(v18, v1);
      v20 = swift_getTupleTypeMetadata2();
      v19(v18 + *(int *)(v20 + 48), v1);
      break;
    case 2u:
      swift_release();
      break;
    case 3u:
      swift_release();
      swift_release();
      break;
    case 4u:
      swift_release();
      sub_2144258E0();
      v21 = sub_214423C48();
      v22 = sub_214423C54();
      v23 = swift_getTupleTypeMetadata3();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(v18 + *(int *)(v23 + 48), v21);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(v18 + *(int *)(v23 + 64), v22);
      break;
    default:
      return swift_deallocObject();
  }
  return swift_deallocObject();
}

void *sub_214349FC8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;

  v5 = *(_QWORD *)(v2 + 24);
  v7 = *(_QWORD *)(v2 + 32);
  v6 = *(_QWORD *)(v2 + 40);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, v5, v6) - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  return sub_214349A4C(a1, *(_QWORD *)(v2 + 48), *(_BYTE *)(v2 + 56), *(_QWORD *)(v2 + 64), *(_BYTE *)(v2 + 72), v2 + ((v10 + 73) & ~v10), v2 + ((*(_QWORD *)(v9 + 64) + v10 + ((v10 + 73) & ~v10)) & ~v10), a2, v5, v7, v6);
}

uint64_t BarPlot.init<A, B>(_:x:yStart:yEnd:width:stacking:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, __int128 *a5@<X4>, int a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  char v63;

  v47 = a8;
  v53 = a6;
  v52 = a4;
  v49 = a3;
  v55 = a2;
  v44 = a1;
  v54 = a9;
  v42 = a10;
  v48 = a11;
  v14 = type metadata accessor for PlottableProjection(0, *(_QWORD *)(*a3 + *MEMORY[0x24BEE46A8]), a8, a11);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(_QWORD *)(v15 + 64);
  v17 = MEMORY[0x24BDAC7A8](v14);
  v19 = (char *)&v42 - v18;
  v45 = *(_QWORD *)(a7 - 8);
  v20 = v45;
  MEMORY[0x24BDAC7A8](v17);
  v22 = (char *)&v42 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = v22;
  v24 = type metadata accessor for VectorizedBarPlotContent(0, a7, a10, v23);
  v50 = *(_QWORD *)(v24 - 8);
  v51 = v24;
  MEMORY[0x24BDAC7A8](v24);
  v46 = (uint64_t)&v42 - v25;
  v26 = a5[5];
  v60 = a5[4];
  v61 = v26;
  v62 = a5[6];
  v63 = *((_BYTE *)a5 + 112);
  v27 = a5[1];
  v56 = *a5;
  v57 = v27;
  v28 = a5[3];
  v58 = a5[2];
  v59 = v28;
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v22, a1, a7);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v19, v55, v14);
  v29 = (*(unsigned __int8 *)(v15 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  v30 = (v16 + v29 + 7) & 0xFFFFFFFFFFFFFFF8;
  v31 = (v30 + 15) & 0xFFFFFFFFFFFFFFF8;
  v32 = (char *)swift_allocObject();
  v33 = v47;
  *((_QWORD *)v32 + 2) = a7;
  *((_QWORD *)v32 + 3) = v33;
  v34 = v42;
  v35 = v48;
  *((_QWORD *)v32 + 4) = v42;
  *((_QWORD *)v32 + 5) = v35;
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(&v32[v29], v19, v14);
  *(_QWORD *)&v32[v30] = v49;
  *(_QWORD *)&v32[v31] = v52;
  v36 = &v32[(v31 + 15) & 0xFFFFFFFFFFFFFFF8];
  v37 = v61;
  *((_OWORD *)v36 + 4) = v60;
  *((_OWORD *)v36 + 5) = v37;
  *((_OWORD *)v36 + 6) = v62;
  v36[112] = v63;
  v38 = v57;
  *(_OWORD *)v36 = v56;
  *((_OWORD *)v36 + 1) = v38;
  v39 = v59;
  *((_OWORD *)v36 + 2) = v58;
  *((_OWORD *)v36 + 3) = v39;
  v36[113] = v53;
  v40 = v46;
  sub_2142868CC((uint64_t)v43, (uint64_t)sub_21434A808, (uint64_t)v32, a7, (uint64_t)&type metadata for BarMark, v34, (uint64_t)&protocol witness table for BarMark, v46);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v55, v14);
  (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v44, a7);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v50 + 32))(v54, v40, v51);
}

void *sub_21434A380@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, uint64_t a7@<X7>, void *a8@<X8>, uint64_t a9, uint64_t a10)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  int v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  int v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  _OWORD v46[19];

  v42 = a6;
  v40 = a3;
  v41 = a4;
  v38 = a2;
  v43 = a8;
  v13 = *(_QWORD *)(*a3 + *MEMORY[0x24BEE46A8]);
  v14 = type metadata accessor for PlottableProjection(0, v13, a7, a10);
  v36 = *(_QWORD *)(v14 - 8);
  v37 = v14;
  v15 = MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v36 - v16;
  v18 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v20 = (char *)&v36 - v19;
  v22 = type metadata accessor for PlottableValue(0, a7, a10, v21);
  MEMORY[0x24BDAC7A8](v22);
  v24 = (char *)&v36 - v23;
  v39 = (uint64_t)&v36 - v23;
  v25 = *(void (**)(char *, uint64_t, uint64_t))(v18 + 16);
  v25(v20, a1, v13);
  (*(void (**)(char *, uint64_t, uint64_t))(v36 + 16))(v17, v38, v37);
  v26 = (uint64_t)v24;
  v27 = a7;
  sub_214270F68((uint64_t)v20, (uint64_t)v17, a7, v13, a10, v26);
  swift_getAtKeyPath();
  v28 = v45;
  swift_getAtKeyPath();
  v29 = v44;
  v25(v20, a1, v13);
  v30 = *(_OWORD *)(a5 + 80);
  v46[4] = *(_OWORD *)(a5 + 64);
  v46[5] = v30;
  v46[6] = *(_OWORD *)(a5 + 96);
  LOBYTE(v46[7]) = *(_BYTE *)(a5 + 112);
  v31 = *(_OWORD *)(a5 + 16);
  v46[0] = *(_OWORD *)a5;
  v46[1] = v31;
  v32 = *(_OWORD *)(a5 + 48);
  v46[2] = *(_OWORD *)(a5 + 32);
  v46[3] = v32;
  sub_21434C9B8(a5, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_21434CA54, (void (*)(uint64_t, uint64_t))sub_21434CA50);
  sub_2142712B0((uint64_t)v20, (uint64_t)v46);
  BarMark.init<A>(x:yStart:yEnd:width:stacking:)(v39, v28, 0, v29, 0, v33, v34, v42, v46, v27, a10);
  return memcpy(v43, v46, 0x120uLL);
}

uint64_t sub_21434A5B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t TupleTypeMetadata2;
  uint64_t v12;
  uint64_t v13;
  uint64_t TupleTypeMetadata3;
  uint64_t v15;
  int v16;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(v0 + 40);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v4 = type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, v1, v2);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = (((((*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  v8 = v0 + v6;
  sub_2141ED0BC(*(_QWORD *)(v0 + v6), *(_QWORD *)(v0 + v6 + 8), *(_BYTE *)(v0 + v6 + 16));
  swift_bridgeObjectRelease();
  v9 = v8 + *(int *)(v4 + 44);
  type metadata accessor for PlottableProjection.Storage(0, AssociatedTypeWitness, v1, v2);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v9, v1);
      break;
    case 1u:
      v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8);
      v10(v9, v1);
      TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
      v10(v9 + *(int *)(TupleTypeMetadata2 + 48), v1);
      break;
    case 2u:
      swift_release();
      break;
    case 3u:
      swift_release();
      swift_release();
      break;
    case 4u:
      swift_release();
      sub_2144258E0();
      v12 = sub_214423C48();
      v13 = sub_214423C54();
      TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v9 + *(int *)(TupleTypeMetadata3 + 48), v12);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v9 + *(int *)(TupleTypeMetadata3 + 64), v13);
      break;
    default:
      break;
  }
  swift_release();
  swift_release();
  v15 = v0 + v7;
  v16 = *(unsigned __int8 *)(v0 + v7 + 96);
  if (v16 != 255)
    sub_2142637C0(*(_QWORD *)(v15 + 88), v16 & 1);
  sub_2142637C0(*(_QWORD *)(v15 + 104), *(_BYTE *)(v15 + 112));
  return swift_deallocObject();
}

void *sub_21434A808@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v5 = v2[3];
  v7 = v2[4];
  v6 = v2[5];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, v5, v6) - 8);
  v10 = (*(unsigned __int8 *)(v9 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v11 = (*(_QWORD *)(v9 + 64) + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_21434A380(a1, (uint64_t)v2 + v10, *(_QWORD **)((char *)v2 + v11), *(_QWORD *)((char *)v2 + ((v11 + 15) & 0xFFFFFFFFFFFFFFF8)), (uint64_t)v2 + ((((v11 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8), *((unsigned __int8 *)v2 + ((((v11 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 113), v5, a2, v7, v6);
}

uint64_t BarPlot.init<A, B>(_:xStart:xEnd:y:height:stacking:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, __int128 *a5@<X4>, int a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  char v60;

  v45 = a8;
  v51 = a6;
  v44 = a4;
  v47 = a2;
  v48 = a3;
  v41 = a1;
  v52 = a9;
  v46 = a11;
  v14 = type metadata accessor for PlottableProjection(0, *(_QWORD *)(*a2 + *MEMORY[0x24BEE46A8]), a8, a11);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(_QWORD *)(v15 + 64);
  v17 = MEMORY[0x24BDAC7A8](v14);
  v19 = (char *)&v41 - v18;
  v42 = *(_QWORD *)(a7 - 8);
  v20 = v42;
  MEMORY[0x24BDAC7A8](v17);
  v22 = (char *)&v41 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for VectorizedBarPlotContent(0, a7, a10, v23);
  v49 = *(_QWORD *)(v24 - 8);
  v50 = v24;
  MEMORY[0x24BDAC7A8](v24);
  v43 = (uint64_t)&v41 - v25;
  v26 = a5[5];
  v57 = a5[4];
  v58 = v26;
  v59 = a5[6];
  v60 = *((_BYTE *)a5 + 112);
  v27 = a5[1];
  v53 = *a5;
  v54 = v27;
  v28 = a5[3];
  v55 = a5[2];
  v56 = v28;
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v22, a1, a7);
  v29 = v44;
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v19, v44, v14);
  v30 = (*(unsigned __int8 *)(v15 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  v31 = (char *)swift_allocObject();
  v32 = v45;
  *((_QWORD *)v31 + 2) = a7;
  *((_QWORD *)v31 + 3) = v32;
  v33 = v46;
  *((_QWORD *)v31 + 4) = a10;
  *((_QWORD *)v31 + 5) = v33;
  v34 = v48;
  *((_QWORD *)v31 + 6) = v47;
  *((_QWORD *)v31 + 7) = v34;
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(&v31[v30], v19, v14);
  v35 = &v31[(v16 + v30 + 7) & 0xFFFFFFFFFFFFFFF8];
  v36 = v58;
  *((_OWORD *)v35 + 4) = v57;
  *((_OWORD *)v35 + 5) = v36;
  *((_OWORD *)v35 + 6) = v59;
  v35[112] = v60;
  v37 = v54;
  *(_OWORD *)v35 = v53;
  *((_OWORD *)v35 + 1) = v37;
  v38 = v56;
  *((_OWORD *)v35 + 2) = v55;
  *((_OWORD *)v35 + 3) = v38;
  v35[113] = v51;
  v39 = v43;
  sub_2142868CC((uint64_t)v22, (uint64_t)sub_21434B00C, (uint64_t)v31, a7, (uint64_t)&type metadata for BarMark, a10, (uint64_t)&protocol witness table for BarMark, v43);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v29, v14);
  (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v41, a7);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v49 + 32))(v52, v39, v50);
}

void *sub_21434AB9C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, uint64_t a7@<X7>, void *a8@<X8>, uint64_t a9, uint64_t a10)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  int v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  _OWORD v45[19];

  v41 = a6;
  v39 = a3;
  v40 = a4;
  v42 = a8;
  v13 = *(_QWORD *)(*a2 + *MEMORY[0x24BEE46A8]);
  v36 = a10;
  v14 = type metadata accessor for PlottableProjection(0, v13, a7, a10);
  v37 = *(_QWORD *)(v14 - 8);
  v38 = v14;
  v15 = MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v35 - v16;
  v18 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v20 = (char *)&v35 - v19;
  v22 = type metadata accessor for PlottableValue(0, a7, a10, v21);
  MEMORY[0x24BDAC7A8](v22);
  v24 = (char *)&v35 - v23;
  swift_getAtKeyPath();
  v25 = v44;
  swift_getAtKeyPath();
  v39 = v43;
  v26 = *(void (**)(char *, uint64_t, uint64_t))(v18 + 16);
  v26(v20, a1, v13);
  (*(void (**)(char *, uint64_t, uint64_t))(v37 + 16))(v17, v40, v38);
  v27 = (uint64_t)v17;
  v28 = v36;
  sub_214270F68((uint64_t)v20, v27, a7, v13, v36, (uint64_t)v24);
  v26(v20, a1, v13);
  v29 = *(_OWORD *)(a5 + 80);
  v45[4] = *(_OWORD *)(a5 + 64);
  v45[5] = v29;
  v45[6] = *(_OWORD *)(a5 + 96);
  LOBYTE(v45[7]) = *(_BYTE *)(a5 + 112);
  v30 = *(_OWORD *)(a5 + 16);
  v45[0] = *(_OWORD *)a5;
  v45[1] = v30;
  v31 = *(_OWORD *)(a5 + 48);
  v45[2] = *(_OWORD *)(a5 + 32);
  v45[3] = v31;
  sub_21434C9B8(a5, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_21434CA54, (void (*)(uint64_t, uint64_t))sub_21434CA50);
  sub_2142712B0((uint64_t)v20, (uint64_t)v45);
  BarMark.init<A>(xStart:xEnd:y:height:stacking:)(v25, 0, v39, 0, (uint64_t)v24, v32, v33, v41, v45, a7, v28);
  return memcpy(v42, v45, 0x120uLL);
}

uint64_t sub_21434ADCC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t TupleTypeMetadata2;
  uint64_t v12;
  uint64_t v13;
  uint64_t TupleTypeMetadata3;
  uint64_t v15;
  int v16;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(v0 + 40);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v4 = type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, v1, v2);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = (*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  swift_release();
  v8 = v0 + v6;
  sub_2141ED0BC(*(_QWORD *)v8, *(_QWORD *)(v8 + 8), *(_BYTE *)(v8 + 16));
  swift_bridgeObjectRelease();
  v9 = v8 + *(int *)(v4 + 44);
  type metadata accessor for PlottableProjection.Storage(0, AssociatedTypeWitness, v1, v2);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v9, v1);
      break;
    case 1u:
      v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8);
      v10(v9, v1);
      TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
      v10(v9 + *(int *)(TupleTypeMetadata2 + 48), v1);
      break;
    case 2u:
      swift_release();
      break;
    case 3u:
      swift_release();
      swift_release();
      break;
    case 4u:
      swift_release();
      sub_2144258E0();
      v12 = sub_214423C48();
      v13 = sub_214423C54();
      TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v9 + *(int *)(TupleTypeMetadata3 + 48), v12);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v9 + *(int *)(TupleTypeMetadata3 + 64), v13);
      break;
    default:
      break;
  }
  v15 = v0 + v7;
  v16 = *(unsigned __int8 *)(v0 + v7 + 96);
  if (v16 != 255)
    sub_2142637C0(*(_QWORD *)(v15 + 88), v16 & 1);
  sub_2142637C0(*(_QWORD *)(v15 + 104), *(_BYTE *)(v15 + 112));
  return swift_deallocObject();
}

void *sub_21434B00C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  v5 = *(_QWORD *)(v2 + 24);
  v7 = *(_QWORD *)(v2 + 32);
  v6 = *(_QWORD *)(v2 + 40);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, v5, v6) - 8);
  v10 = (*(unsigned __int8 *)(v9 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v11 = v2 + ((*(_QWORD *)(v9 + 64) + v10 + 7) & 0xFFFFFFFFFFFFFFF8);
  return sub_21434AB9C(a1, *(_QWORD **)(v2 + 48), *(_QWORD *)(v2 + 56), v2 + v10, v11, *(unsigned __int8 *)(v11 + 113), v5, a2, v7, v6);
}

uint64_t BarPlot.init<A, B>(_:xStart:xEnd:yStart:yEnd:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  void (*v36)(char *, char *, uint64_t);
  uint64_t v37;
  void (*v38)(uint64_t, uint64_t);
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v42 = a8;
  v51 = a4;
  v52 = a5;
  v54 = a2;
  v55 = a3;
  v45 = a1;
  v53 = a9;
  v47 = a7;
  v48 = a10;
  v13 = type metadata accessor for PlottableProjection(0, *(_QWORD *)(*a4 + *MEMORY[0x24BEE46A8]), a7, a10);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  v16 = MEMORY[0x24BDAC7A8](v13);
  v41 = (char *)&v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v40 - v18;
  v46 = *(_QWORD *)(a6 - 8);
  v20 = v46;
  MEMORY[0x24BDAC7A8](v17);
  v22 = (char *)&v40 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = v22;
  v24 = type metadata accessor for VectorizedBarPlotContent(0, a6, a8, v23);
  v49 = *(_QWORD *)(v24 - 8);
  v50 = v24;
  MEMORY[0x24BDAC7A8](v24);
  v44 = (uint64_t)&v40 - v25;
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v22, a1, a6);
  v26 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  v26(v19, v54, v13);
  v26((char *)&v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), v55, v13);
  v27 = *(unsigned __int8 *)(v14 + 80);
  v28 = (v27 + 48) & ~v27;
  v29 = (v15 + v27 + v28) & ~v27;
  v30 = (v15 + v29 + 7) & 0xFFFFFFFFFFFFFFF8;
  v31 = (char *)swift_allocObject();
  v32 = v47;
  *((_QWORD *)v31 + 2) = a6;
  *((_QWORD *)v31 + 3) = v32;
  v33 = v42;
  v34 = v48;
  *((_QWORD *)v31 + 4) = v42;
  *((_QWORD *)v31 + 5) = v34;
  v35 = &v31[v28];
  v36 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
  v36(v35, v19, v13);
  v36(&v31[v29], v41, v13);
  *(_QWORD *)&v31[v30] = v51;
  *(_QWORD *)&v31[(v30 + 15) & 0xFFFFFFFFFFFFFFF8] = v52;
  v37 = v44;
  sub_2142868CC((uint64_t)v43, (uint64_t)sub_21434B914, (uint64_t)v31, a6, (uint64_t)&type metadata for BarMark, v33, (uint64_t)&protocol witness table for BarMark, v44);
  v38 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
  v38(v55, v13);
  v38(v54, v13);
  (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v45, a6);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v49 + 32))(v53, v37, v50);
}

void *sub_21434B35C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X6>, void *a7@<X8>, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  void (*v24)(char *, uint64_t, uint64_t);
  void (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE v43[296];

  v38 = a4;
  v39 = a5;
  v36 = a2;
  v37 = a3;
  v40 = a7;
  v10 = *(_QWORD *)(*a4 + *MEMORY[0x24BEE46A8]);
  v32 = a6;
  v35 = type metadata accessor for PlottableProjection(0, v10, a6, a8);
  v11 = *(_QWORD *)(v35 - 8);
  v12 = MEMORY[0x24BDAC7A8](v35);
  v14 = (char *)&v32 - v13;
  v15 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v17 = (char *)&v32 - v16;
  v19 = type metadata accessor for PlottableValue(0, a6, a8, v18);
  v20 = MEMORY[0x24BDAC7A8](v19);
  v33 = (uint64_t)&v32 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v20);
  v23 = (char *)&v32 - v22;
  v34 = (uint64_t)&v32 - v22;
  v24 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  v24(v17, a1, v10);
  v25 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v26 = v35;
  v25(v14, v36, v35);
  v27 = (uint64_t)v23;
  v28 = v32;
  sub_214270F68((uint64_t)v17, (uint64_t)v14, v32, v10, a8, v27);
  v24(v17, a1, v10);
  v25(v14, v37, v26);
  v29 = v33;
  sub_214270F68((uint64_t)v17, (uint64_t)v14, v28, v10, a8, v33);
  swift_getAtKeyPath();
  v30 = v42;
  swift_getAtKeyPath();
  BarMark.init<A>(xStart:xEnd:yStart:yEnd:)(v34, v29, v30, 0, v41, 0, v28, a8, v43);
  return memcpy(v40, v43, 0x120uLL);
}

uint64_t sub_21434B57C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t TupleTypeMetadata2;
  uint64_t v13;
  uint64_t v14;
  uint64_t TupleTypeMetadata3;
  void (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(v0 + 40);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v4 = type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, v1, v2);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (v6 + 48) & ~v6;
  v8 = (*(_QWORD *)(v5 + 64) + v6 + v7) & ~v6;
  v9 = v0 + v7;
  sub_2141ED0BC(*(_QWORD *)(v0 + v7), *(_QWORD *)(v0 + v7 + 8), *(_BYTE *)(v0 + v7 + 16));
  swift_bridgeObjectRelease();
  v10 = v9 + *(int *)(v4 + 44);
  type metadata accessor for PlottableProjection.Storage(0, AssociatedTypeWitness, v1, v2);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v10, v1);
      break;
    case 1u:
      v11 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8);
      v11(v10, v1);
      TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
      v11(v10 + *(int *)(TupleTypeMetadata2 + 48), v1);
      break;
    case 2u:
      swift_release();
      break;
    case 3u:
      swift_release();
      swift_release();
      break;
    case 4u:
      swift_release();
      sub_2144258E0();
      v13 = sub_214423C48();
      v25 = v8;
      v14 = sub_214423C54();
      TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v10 + *(int *)(TupleTypeMetadata3 + 48), v13);
      v16 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8);
      v17 = v14;
      v8 = v25;
      v16(v10 + *(int *)(TupleTypeMetadata3 + 64), v17);
      break;
    default:
      break;
  }
  sub_2141ED0BC(*(_QWORD *)(v0 + v8), *(_QWORD *)(v0 + v8 + 8), *(_BYTE *)(v0 + v8 + 16));
  swift_bridgeObjectRelease();
  v18 = v0 + v8 + *(int *)(v4 + 44);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v18, v1);
      break;
    case 1u:
      v19 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8);
      v19(v18, v1);
      v20 = swift_getTupleTypeMetadata2();
      v19(v18 + *(int *)(v20 + 48), v1);
      break;
    case 2u:
      swift_release();
      break;
    case 3u:
      swift_release();
      swift_release();
      break;
    case 4u:
      swift_release();
      sub_2144258E0();
      v21 = sub_214423C48();
      v22 = sub_214423C54();
      v23 = swift_getTupleTypeMetadata3();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(v18 + *(int *)(v23 + 48), v21);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(v18 + *(int *)(v23 + 64), v22);
      break;
    default:
      break;
  }
  swift_release();
  swift_release();
  return swift_deallocObject();
}

void *sub_21434B914@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = *(_QWORD *)(v2 + 24);
  v6 = *(_QWORD *)(v2 + 40);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, v5, v6) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v9 + 48) & ~v9;
  v11 = *(_QWORD *)(v8 + 64);
  return sub_21434B35C(a1, v2 + v10, v2 + ((v11 + v9 + v10) & ~v9), *(_QWORD **)(v2 + ((v11 + ((v11 + v9 + v10) & ~v9) + 7) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v2 + ((((v11 + ((v11 + v9 + v10) & ~v9) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFF8)), v5, a2, v6);
}

uint64_t BarPlot.init<A, B>(_:xStart:xEnd:yStart:yEnd:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  void (*v35)(char *, char *, uint64_t);
  uint64_t v36;
  void (*v37)(uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v49 = a5;
  v50 = a4;
  v47 = a3;
  v48 = a9;
  v45 = a2;
  v40 = a1;
  v42 = a7;
  v43 = a10;
  v13 = type metadata accessor for PlottableProjection(0, *(_QWORD *)(*a2 + *MEMORY[0x24BEE46A8]), a7, a10);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  v16 = MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)&v39 - v19;
  v41 = *(_QWORD *)(a6 - 8);
  v21 = v41;
  MEMORY[0x24BDAC7A8](v18);
  v23 = (char *)&v39 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = type metadata accessor for VectorizedBarPlotContent(0, a6, a8, v24);
  v44 = *(_QWORD *)(v46 - 8);
  MEMORY[0x24BDAC7A8](v46);
  v39 = (uint64_t)&v39 - v25;
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v23, a1, a6);
  v26 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  v26(v20, v50, v13);
  v26(v17, v49, v13);
  v27 = *(unsigned __int8 *)(v14 + 80);
  v28 = (v27 + 64) & ~v27;
  v29 = (v15 + v27 + v28) & ~v27;
  v30 = (char *)swift_allocObject();
  v31 = v42;
  *((_QWORD *)v30 + 2) = a6;
  *((_QWORD *)v30 + 3) = v31;
  v32 = v43;
  *((_QWORD *)v30 + 4) = a8;
  *((_QWORD *)v30 + 5) = v32;
  v33 = v47;
  *((_QWORD *)v30 + 6) = v45;
  *((_QWORD *)v30 + 7) = v33;
  v34 = &v30[v28];
  v35 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
  v35(v34, v20, v13);
  v35(&v30[v29], v17, v13);
  v36 = v39;
  sub_2142868CC((uint64_t)v23, (uint64_t)sub_21434C200, (uint64_t)v30, a6, (uint64_t)&type metadata for BarMark, a8, (uint64_t)&protocol witness table for BarMark, v39);
  v37 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
  v37(v49, v13);
  v37(v50, v13);
  (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v40, a6);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v44 + 32))(v48, v36, v46);
}

void *sub_21434BC5C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X6>, void *a7@<X8>, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  void (*v24)(char *, uint64_t, uint64_t);
  void (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE v41[296];

  v36 = a4;
  v37 = a5;
  v33 = a2;
  v34 = a3;
  v38 = a7;
  v10 = *(_QWORD *)(*a2 + *MEMORY[0x24BEE46A8]);
  v31 = a8;
  v35 = type metadata accessor for PlottableProjection(0, v10, a6, a8);
  v11 = *(_QWORD *)(v35 - 8);
  v12 = MEMORY[0x24BDAC7A8](v35);
  v14 = (char *)&v30 - v13;
  v15 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v17 = (char *)&v30 - v16;
  v19 = type metadata accessor for PlottableValue(0, a6, a8, v18);
  v20 = MEMORY[0x24BDAC7A8](v19);
  v32 = (uint64_t)&v30 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v20);
  v23 = (char *)&v30 - v22;
  v30 = a1;
  swift_getAtKeyPath();
  v33 = (_QWORD *)v40;
  swift_getAtKeyPath();
  v34 = v39;
  v24 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  v24(v17, a1, v10);
  v25 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v26 = v35;
  v25(v14, v36, v35);
  v27 = v31;
  sub_214270F68((uint64_t)v17, (uint64_t)v14, a6, v10, v31, (uint64_t)v23);
  v24(v17, v30, v10);
  v25(v14, v37, v26);
  v28 = v32;
  sub_214270F68((uint64_t)v17, (uint64_t)v14, a6, v10, v27, v32);
  BarMark.init<A>(xStart:xEnd:yStart:yEnd:)((uint64_t)v33, 0, v34, 0, (uint64_t)v23, v28, a6, v27, v41);
  return memcpy(v38, v41, 0x120uLL);
}

uint64_t sub_21434BE84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t TupleTypeMetadata2;
  uint64_t v13;
  uint64_t v14;
  uint64_t TupleTypeMetadata3;
  void (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(v0 + 40);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v4 = type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, v1, v2);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (v6 + 64) & ~v6;
  v8 = (*(_QWORD *)(v5 + 64) + v6 + v7) & ~v6;
  swift_release();
  swift_release();
  v9 = v0 + v7;
  sub_2141ED0BC(*(_QWORD *)v9, *(_QWORD *)(v9 + 8), *(_BYTE *)(v9 + 16));
  swift_bridgeObjectRelease();
  v10 = v9 + *(int *)(v4 + 44);
  type metadata accessor for PlottableProjection.Storage(0, AssociatedTypeWitness, v1, v2);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v10, v1);
      break;
    case 1u:
      v11 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8);
      v11(v10, v1);
      TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
      v11(v10 + *(int *)(TupleTypeMetadata2 + 48), v1);
      break;
    case 2u:
      swift_release();
      break;
    case 3u:
      swift_release();
      swift_release();
      break;
    case 4u:
      swift_release();
      sub_2144258E0();
      v13 = sub_214423C48();
      v25 = v8;
      v14 = sub_214423C54();
      TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v10 + *(int *)(TupleTypeMetadata3 + 48), v13);
      v16 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8);
      v17 = v14;
      v8 = v25;
      v16(v10 + *(int *)(TupleTypeMetadata3 + 64), v17);
      break;
    default:
      break;
  }
  sub_2141ED0BC(*(_QWORD *)(v0 + v8), *(_QWORD *)(v0 + v8 + 8), *(_BYTE *)(v0 + v8 + 16));
  swift_bridgeObjectRelease();
  v18 = v0 + v8 + *(int *)(v4 + 44);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v18, v1);
      break;
    case 1u:
      v19 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8);
      v19(v18, v1);
      v20 = swift_getTupleTypeMetadata2();
      v19(v18 + *(int *)(v20 + 48), v1);
      break;
    case 2u:
      swift_release();
      break;
    case 3u:
      swift_release();
      swift_release();
      break;
    case 4u:
      swift_release();
      sub_2144258E0();
      v21 = sub_214423C48();
      v22 = sub_214423C54();
      v23 = swift_getTupleTypeMetadata3();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(v18 + *(int *)(v23 + 48), v21);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(v18 + *(int *)(v23 + 64), v22);
      break;
    default:
      return swift_deallocObject();
  }
  return swift_deallocObject();
}

void *sub_21434C200@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;

  v5 = *(_QWORD *)(v2 + 24);
  v6 = *(_QWORD *)(v2 + 40);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, v5, v6) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  return sub_21434BC5C(a1, *(_QWORD **)(v2 + 48), *(_QWORD *)(v2 + 56), v2 + ((v9 + 64) & ~v9), v2 + ((*(_QWORD *)(v8 + 64) + v9 + ((v9 + 64) & ~v9)) & ~v9), v5, a2, v6);
}

uint64_t VectorizedBarPlotContent.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;

  v5 = type metadata accessor for Vectorizer(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v10 - v7;
  sub_2142D7304(v3, v5, (uint64_t)&v10 - v7);
  sub_2142D6BB0((uint64_t)v8, v5, a3);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_21434C374()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_21434C3AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)a3 + 8);
  result = MEMORY[0x2199CD934](&protocol conformance descriptor for <A> BarPlot<A>, a2, &v5);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_21434C3F0(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x2199CD934](&protocol conformance descriptor for VectorizedBarPlotContent<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_21434C41C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_21434C454(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_21434C504 + 4 * byte_21442D604[(v7 - 1)]))();
}

void sub_21434C554(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t type metadata accessor for BarPlot(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2141D8E88(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for BarPlot);
}

uint64_t sub_21434C710(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v12 = *(_QWORD *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_21434C794 + 4 * byte_21442D612[v10]))();
  }
}

void sub_21434C818(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_21434C914()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x21434C98CLL);
}

void sub_21434C91C(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x21434C924);
  JUMPOUT(0x21434C98CLL);
}

void sub_21434C964()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x21434C98CLL);
}

void sub_21434C96C()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x21434C98CLL);
}

uint64_t sub_21434C974(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_WORD *)(v5 + v6) = 0;
  if (!a2)
    JUMPOUT(0x21434C98CLL);
  if (a3 < 0x7FFFFFFF)
  {
    if ((a2 & 0x80000000) == 0)
      JUMPOUT(0x21434C988);
    JUMPOUT(0x21434C980);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v5);
}

uint64_t sub_21434C9A4(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

_UNKNOWN **sub_21434C9AC()
{
  return &off_254D69CB8;
}

uint64_t sub_21434C9B8(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char), void (*a3)(uint64_t, uint64_t))
{
  uint64_t v5;
  uint64_t v6;
  char v8;

  v5 = *(_QWORD *)(a1 + 104);
  v6 = *(unsigned __int8 *)(a1 + 112);
  v8 = *(_BYTE *)(a1 + 96);
  a2(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), v8);
  a3(v5, v6);
  return a1;
}

uint64_t sub_21434CA34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned __int8 a12)
{
  uint64_t result;

  if (a12 != 255)
    return sub_2142625F8(a11, a12 & 1);
  return result;
}

uint64_t sub_21434CA54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned __int8 a12)
{
  return sub_21434CA34(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
}

char *sub_21434CA70(uint64_t a1, uint64_t a2)
{
  int64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *result;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  __int128 v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = MEMORY[0x24BEE4AF8];
  if (!v2)
    return (char *)MEMORY[0x24BEE4AF8];
  v20 = *(_QWORD *)(a1 + 16);
  v23 = (char *)MEMORY[0x24BEE4AF8];
  sub_2141D3BF4(0, v2, 0);
  v6 = v20;
  v7 = 0;
  result = v23;
  v21 = a1 + 32;
  while (1)
  {
    v9 = *(_QWORD *)(v21 + 8 * v7);
    v10 = *(_QWORD *)(v9 + 16);
    if (v10)
      break;
LABEL_11:
    v24 = result;
    v18 = *((_QWORD *)result + 2);
    v17 = *((_QWORD *)result + 3);
    if (v18 >= v17 >> 1)
    {
      sub_2141D3BF4((char *)(v17 > 1), v18 + 1, 1);
      v6 = v20;
      result = v24;
    }
    ++v7;
    *((_QWORD *)result + 2) = v18 + 1;
    *(_QWORD *)&result[8 * v18 + 32] = v3;
    v3 = MEMORY[0x24BEE4AF8];
    if (v7 == v6)
      return result;
  }
  v22 = result;
  swift_bridgeObjectRetain();
  result = sub_2141D3BB4(0, v10, 0);
  v11 = 0;
  while (1)
  {
    v12 = *(_QWORD *)(v9 + 8 * v11 + 32);
    if ((v12 & 0x8000000000000000) != 0)
      break;
    v13 = *(_QWORD *)(a2 + 16);
    if (v12 >= *(_QWORD *)(v13 + 16))
      goto LABEL_17;
    v14 = *(_OWORD *)(v13 + 16 * v12 + 32);
    v16 = *(_QWORD *)(v3 + 16);
    v15 = *(_QWORD *)(v3 + 24);
    if (v16 >= v15 >> 1)
    {
      v19 = v14;
      result = sub_2141D3BB4((char *)(v15 > 1), v16 + 1, 1);
      v14 = v19;
    }
    ++v11;
    *(_QWORD *)(v3 + 16) = v16 + 1;
    *(_OWORD *)(v3 + 16 * v16 + 32) = v14;
    if (v10 == v11)
    {
      swift_bridgeObjectRelease();
      v6 = v20;
      result = v22;
      goto LABEL_11;
    }
  }
  __break(1u);
LABEL_17:
  __break(1u);
  return result;
}

void sub_21434CC2C(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;

  if ((*(_BYTE *)(v1 + 80) & 1) != 0)
  {
    v3 = 0;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 0;
LABEL_13:
    *a1 = v3;
    a1[1] = v4;
    a1[2] = v5;
    a1[3] = v6;
    a1[4] = v7;
    a1[5] = v8;
    a1[6] = v9;
    return;
  }
  v10 = *(_QWORD *)(v1 + 32);
  v11 = *(_QWORD *)(v1 + 24) >> 1;
  if (v10 == v11)
  {
LABEL_9:
    v3 = 0;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    *(_BYTE *)(v1 + 80) = 1;
    goto LABEL_13;
  }
  if (v10 >= v11 || v10 < *(_QWORD *)(v1 + 16))
  {
    __break(1u);
  }
  else
  {
    v13 = (uint64_t *)(*(_QWORD *)(v1 + 8) + 48 * v10);
    v3 = *v13;
    v4 = v13[1];
    v5 = v13[2];
    v6 = v13[3];
    v7 = v13[4];
    v8 = v13[5];
    *(_QWORD *)(v1 + 32) = v10 + 1;
    v14 = *(_QWORD *)(v1 + 72);
    v15 = *(_QWORD *)(v1 + 64) >> 1;
    if (v14 == v15)
      goto LABEL_9;
    if (v14 < v15 && v14 >= *(_QWORD *)(v1 + 56))
    {
      *(_QWORD *)(v1 + 72) = v14 + 1;
      v9 = swift_bridgeObjectRetain();
      goto LABEL_13;
    }
  }
  __break(1u);
}

uint64_t sub_21434CD38()
{
  int64_t v0;
  int64_t v1;
  int64_t v2;
  uint64_t v3;
  int64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;

  if ((*(_BYTE *)(v2 + 56) & 1) == 0)
  {
    v4 = *(_QWORD *)(v2 + 24);
    v5 = *(_QWORD *)(v2 + 32);
    if (v5)
    {
      v6 = (v5 - 1) & v5;
      v7 = __clz(__rbit64(v5)) | (v4 << 6);
LABEL_5:
      v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v2 + 56) + 16 * v7);
      *(_QWORD *)(v2 + 24) = v4;
      *(_QWORD *)(v2 + 32) = v6;
      v9 = *(_QWORD *)(v2 + 40);
      v8 = *(_QWORD *)(v2 + 48);
      v10 = *(_QWORD *)(v9 + 16);
      if (v8 == v10)
      {
LABEL_30:
        v3 = 0;
        *(_BYTE *)(v2 + 56) = 1;
        return v3;
      }
      if (v8 < v10)
      {
        v11 = *(_QWORD *)(v9 + 8 * v8 + 32);
        *(_QWORD *)(v2 + 48) = v8 + 1;
        swift_retain();
        swift_retain();
        sub_2141F9A40(v11);
        return v3;
      }
      __break(1u);
      goto LABEL_27;
    }
    v12 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
LABEL_27:
      __break(1u);
LABEL_28:
      v2 = v1;
      goto LABEL_29;
    }
    v13 = (unint64_t)(*(_QWORD *)(v2 + 16) + 64) >> 6;
    v0 = *(_QWORD *)(v2 + 24);
    if (v12 < v13)
    {
      v14 = *(_QWORD *)(v2 + 8);
      v15 = *(_QWORD *)(v14 + 8 * v12);
      if (v15)
      {
LABEL_11:
        v6 = (v15 - 1) & v15;
        v7 = __clz(__rbit64(v15)) + (v12 << 6);
        v4 = v12;
        goto LABEL_5;
      }
      v1 = v4 + 2;
      v0 = v4 + 1;
      if (v4 + 2 < v13)
      {
        v15 = *(_QWORD *)(v14 + 8 * v1);
        if (v15)
        {
LABEL_14:
          v12 = v1;
          goto LABEL_11;
        }
        v0 = v4 + 2;
        if (v4 + 3 < v13)
        {
          v15 = *(_QWORD *)(v14 + 8 * (v4 + 3));
          if (v15)
          {
            v12 = v4 + 3;
            goto LABEL_11;
          }
          v1 = v4 + 4;
          v0 = v4 + 3;
          if (v4 + 4 < v13)
          {
            v15 = *(_QWORD *)(v14 + 8 * v1);
            if (v15)
              goto LABEL_14;
            v12 = v4 + 5;
            v0 = v4 + 4;
            if (v4 + 5 < v13)
            {
              v15 = *(_QWORD *)(v14 + 8 * v12);
              if (!v15)
              {
                v1 = v2;
                v0 = v13 - 1;
                v16 = v4 + 6;
                while (v13 != v16)
                {
                  v15 = *(_QWORD *)(v14 + 8 * v16++);
                  if (v15)
                  {
                    v12 = v16 - 1;
                    goto LABEL_11;
                  }
                }
                goto LABEL_28;
              }
              goto LABEL_11;
            }
          }
        }
      }
    }
LABEL_29:
    *(_QWORD *)(v2 + 24) = v0;
    *(_QWORD *)(v2 + 32) = 0;
    goto LABEL_30;
  }
  return 0;
}

char *sub_21434CEF4(uint64_t a1)
{
  unint64_t v1;
  char *v2;
  uint64_t v3;
  char *v4;
  double v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  simd_double2 v11;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v2 = (char *)a1;
    if (qword_253F10590 != -1)
      goto LABEL_22;
    while (1)
    {
      v3 = 0;
      v4 = v2 + 32;
      v5 = *(double *)&qword_253F1C8B0;
      v2 = (char *)MEMORY[0x24BEE4AF8];
      while (1)
      {
        v6 = v3 - 1;
        if (v3 <= 0)
          v6 = v1 - 1;
        v7 = v3 < (uint64_t)(v1 - 1) ? v3 + 1 : 0;
        if (v6 >= (uint64_t)v1)
          break;
        if (v7 >= v1)
          goto LABEL_21;
        v11 = *(simd_double2 *)&v4[16 * v3];
        if (fabs(_simd_orient_pd2(*(simd_double2 *)&v4[16 * v6], v11, *(simd_double2 *)&v4[16 * v7])) >= v5)
        {
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v2 = sub_214224144(0, *((_QWORD *)v2 + 2) + 1, 1, v2);
          v9 = *((_QWORD *)v2 + 2);
          v8 = *((_QWORD *)v2 + 3);
          if (v9 >= v8 >> 1)
            v2 = sub_214224144((char *)(v8 > 1), v9 + 1, 1, v2);
          *((_QWORD *)v2 + 2) = v9 + 1;
          *(simd_double2 *)&v2[16 * v9 + 32] = v11;
        }
        if (++v3 == v1)
          return v2;
      }
      __break(1u);
LABEL_21:
      __break(1u);
LABEL_22:
      swift_once();
    }
  }
  return (char *)MEMORY[0x24BEE4AF8];
}

void sub_21434D058(char **a1, uint64_t a2, float64x2_t a3)
{
  char *v5;
  uint64_t v6;
  uint64_t v8[2];

  v5 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v5 = sub_21434EB0C((uint64_t)v5);
  v6 = *((_QWORD *)v5 + 2);
  v8[0] = (uint64_t)(v5 + 32);
  v8[1] = v6;
  sub_21434EC74(v8, a2, a3);
  *a1 = v5;
}

uint64_t sub_21434D0D4(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t result;
  _QWORD v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_214350134((uint64_t)v2);
  v3 = *((_QWORD *)v2 + 2);
  v5[0] = v2 + 32;
  v5[1] = v3;
  result = sub_21434F46C(v5);
  *a1 = v2;
  return result;
}

_QWORD *sub_21434D13C(_QWORD *result, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;

  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    v3 = result;
    if (a2)
    {
      sub_2141D8BF8(&qword_253F105B0);
      v4 = (_QWORD *)sub_21442504C();
      v5 = v4;
      v4[2] = a2;
      v4[4] = v3;
      if (a2 != 1)
      {
        v4[5] = v3;
        v6 = a2 - 2;
        if (v6)
        {
          v7 = v4 + 6;
          do
          {
            *v7++ = v3;
            swift_bridgeObjectRetain();
            --v6;
          }
          while (v6);
        }
        swift_bridgeObjectRetain();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      return (_QWORD *)MEMORY[0x24BEE4AF8];
    }
    return v5;
  }
  return result;
}

uint64_t sub_21434D1E0()
{
  sub_214425874();
  sub_214425898();
  sub_214425898();
  return sub_2144258B0();
}

uint64_t sub_21434D238()
{
  sub_214425898();
  return sub_214425898();
}

uint64_t sub_21434D270()
{
  sub_214425874();
  sub_214425898();
  sub_214425898();
  return sub_2144258B0();
}

BOOL sub_21434D2C4(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

uint64_t sub_21434D2DC(float64x2_t a1)
{
  uint64_t v1;
  uint64_t v2;
  double v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float64x2_t v14;
  double v15;
  double v16;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(_QWORD *@<X8>);
  uint64_t i;
  BOOL v26;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v28;
  char v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  unint64_t v34;
  char v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  char *v43;
  char v44;
  unint64_t v45;
  unint64_t v46;
  __n128 *v47;
  uint64_t result;
  uint64_t v49;
  uint64_t v50;

  v2 = v1;
  v4 = *(double *)v1;
  v3 = *(double *)(v1 + 8);
  v6 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v7 = sub_2143502E4(a1.f64[0], v3);
  v8 = sub_2143502E4(a1.f64[1], v3);
  if (*(_QWORD *)(v5 + 16)
    && (v9 = sub_214336E90(v7, v8), (v10 & 1) != 0)
    && (v11 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v9), (v12 = *(_QWORD *)(v11 + 16)) != 0))
  {
    v13 = v11 + 48;
    while (1)
    {
      v14 = vsubq_f64(a1, *(float64x2_t *)(v13 - 16));
      v15 = fabs(v14.f64[0]);
      v16 = fabs(v14.f64[1]);
      if (v15 < v4 && v16 < v4)
        return *(_QWORD *)v13;
      v13 += 32;
      if (!--v12)
        goto LABEL_10;
    }
  }
  else
  {
LABEL_10:
    v18 = *(_QWORD *)(v6 + 16);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      goto LABEL_44;
    while (1)
    {
      v20 = *(_QWORD *)(v6 + 16);
      v19 = *(_QWORD *)(v6 + 24);
      if (v20 >= v19 >> 1)
        v6 = (uint64_t)sub_214224144((char *)(v19 > 1), v20 + 1, 1, (char *)v6);
      *(_QWORD *)(v6 + 16) = v20 + 1;
      *(float64x2_t *)(v6 + 16 * v20 + 32) = a1;
      *(_QWORD *)(v2 + 16) = v6;
      v6 = sub_2143502E4(a1.f64[0] - v4, v3);
      v49 = sub_2143502E4(a1.f64[0] + v4, v3);
      if (v49 < v6)
        break;
      v21 = sub_2143502E4(a1.f64[1] - v4, v3);
      v22 = sub_2143502E4(a1.f64[1] + v4, v3);
      v50 = v21;
      if (v22 < v21)
        goto LABEL_46;
      v23 = v22;
      v24 = 0;
      for (i = v21; ; i = v50)
      {
        while (1)
        {
          sub_2141D972C((uint64_t)v24);
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v28 = *(_QWORD *)(v2 + 24);
          *(_QWORD *)(v2 + 24) = 0x8000000000000000;
          v30 = sub_214336E90(v6, i);
          v31 = *(_QWORD *)(v28 + 16);
          v13 = (v29 & 1) == 0;
          v32 = v31 + v13;
          if (__OFADD__(v31, v13))
          {
            __break(1u);
LABEL_39:
            __break(1u);
LABEL_40:
            __break(1u);
            return *(_QWORD *)v13;
          }
          v33 = v29;
          if (*(_QWORD *)(v28 + 24) >= v32)
          {
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
              sub_2142A9394();
          }
          else
          {
            sub_21429F108(v32, isUniquelyReferenced_nonNull_native);
            v34 = sub_214336E90(v6, i);
            if ((v33 & 1) != (v35 & 1))
              goto LABEL_47;
            v30 = v34;
          }
          *(_QWORD *)(v2 + 24) = v28;
          swift_bridgeObjectRelease();
          v36 = *(_QWORD **)(v2 + 24);
          if ((v33 & 1) != 0)
          {
            v37 = swift_bridgeObjectRetain();
          }
          else
          {
            v36[(v30 >> 6) + 8] |= 1 << v30;
            v38 = (uint64_t *)(v36[6] + 16 * v30);
            *v38 = v6;
            v38[1] = i;
            *(_QWORD *)(v36[7] + 8 * v30) = MEMORY[0x24BEE4AF8];
            v39 = v36[2];
            v40 = v39 + 1;
            v41 = __OFADD__(v39, 1);
            v37 = swift_bridgeObjectRetain();
            if (v41)
              goto LABEL_40;
            *(_QWORD *)(v37 + 16) = v40;
          }
          v42 = *(_QWORD *)(v37 + 56);
          swift_bridgeObjectRelease();
          v43 = *(char **)(v42 + 8 * v30);
          v44 = swift_isUniquelyReferenced_nonNull_native();
          *(_QWORD *)(v42 + 8 * v30) = v43;
          if ((v44 & 1) == 0)
          {
            v43 = sub_2142247A0(0, *((_QWORD *)v43 + 2) + 1, 1, v43);
            *(_QWORD *)(v42 + 8 * v30) = v43;
          }
          v46 = *((_QWORD *)v43 + 2);
          v45 = *((_QWORD *)v43 + 3);
          if (v46 >= v45 >> 1)
          {
            v43 = sub_2142247A0((char *)(v45 > 1), v46 + 1, 1, v43);
            *(_QWORD *)(v42 + 8 * v30) = v43;
          }
          *((_QWORD *)v43 + 2) = v46 + 1;
          v47 = (__n128 *)&v43[32 * v46];
          v47[2] = (__n128)a1;
          v47[3].n128_u64[0] = v18;
          if (v23 == i)
            break;
          v24 = sub_21431DA34;
          v26 = __OFADD__(i++, 1);
          if (v26)
            goto LABEL_39;
        }
        if (v6 == v49)
          return v18;
        v24 = sub_21431DA34;
        v26 = __OFADD__(v6++, 1);
        if (v26)
          break;
      }
      __break(1u);
LABEL_44:
      v6 = (uint64_t)sub_214224144(0, v18 + 1, 1, (char *)v6);
    }
    __break(1u);
LABEL_46:
    __break(1u);
LABEL_47:
    result = sub_214425820();
    __break(1u);
  }
  return result;
}

uint64_t sub_21434D694(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v4 = (uint64_t *)(a2 + 16);
  result = swift_beginAccess();
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(v6 + 16);
  if (!v7 || *(_QWORD *)(v6 + 8 * v7 + 24) != a1)
  {
    swift_beginAccess();
    v8 = *v4;
    result = swift_isUniquelyReferenced_nonNull_native();
    *v4 = v8;
    if ((result & 1) == 0)
    {
      result = (uint64_t)sub_214224894(0, *(_QWORD *)(v8 + 16) + 1, 1, (char *)v8);
      v8 = result;
      *v4 = result;
    }
    v10 = *(_QWORD *)(v8 + 16);
    v9 = *(_QWORD *)(v8 + 24);
    if (v10 >= v9 >> 1)
    {
      result = (uint64_t)sub_214224894((char *)(v9 > 1), v10 + 1, 1, (char *)v8);
      v8 = result;
      *v4 = result;
    }
    *(_QWORD *)(v8 + 16) = v10 + 1;
    *(_QWORD *)(v8 + 8 * v10 + 32) = a1;
  }
  return result;
}

uint64_t sub_21434D78C()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t result;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE v46[40];
  _QWORD v47[4];
  char v48;

  v45 = MEMORY[0x24BEE4B08];
  v41 = *(_QWORD *)(*(_QWORD *)(v0 + 24) + 16);
  if (!v41)
    return MEMORY[0x24BEE4AF8];
  v1 = 0;
  v42 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_4:
  while (1)
  {
    sub_21434E8C0(v1, v43, &v45, (uint64_t)v46);
    sub_2141E801C((uint64_t)v46, (uint64_t)v47, &qword_253F105A8);
    if ((v48 & 1) == 0)
      break;
LABEL_3:
    if (++v1 == v41)
    {
      swift_bridgeObjectRelease();
      return (uint64_t)v42;
    }
  }
LABEL_5:
  v3 = v47[0];
  v2 = v47[1];
  sub_2141D8BF8(&qword_253F15D50);
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_214426EF0;
  *(_QWORD *)(v4 + 32) = v2;
  swift_beginAccess();
  sub_21420FF90(&v44, v3);
  swift_endAccess();
  while ((v2 & 0x8000000000000000) == 0)
  {
    v5 = *(_QWORD *)(v43 + 40);
    if (v2 >= *(_QWORD *)(v5 + 16))
      goto LABEL_57;
    v6 = *(_QWORD *)(v5 + 8 * v2 + 32);
    v7 = *(_QWORD *)(v6 + 16);
    if (!v7)
      goto LABEL_45;
    v8 = 0;
    v9 = v6 + 32;
    while (1)
    {
      v10 = (uint64_t *)(v9 + 40 * v8);
      if (v10[2] >= 1 && (v10[4] & 1) == 0 && !v10[3])
      {
        v11 = *v10;
        v2 = v10[1];
        v12 = v45;
        if (!*(_QWORD *)(v45 + 16))
          goto LABEL_20;
        v13 = sub_214425868();
        v14 = -1 << *(_BYTE *)(v12 + 32);
        v15 = v13 & ~v14;
        if (((*(_QWORD *)(v12 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) == 0)
          goto LABEL_20;
        v16 = *(_QWORD *)(v12 + 48);
        if (*(_QWORD *)(v16 + 8 * v15) != v11)
          break;
      }
LABEL_9:
      if (++v8 == v7)
        goto LABEL_45;
    }
    v17 = ~v14;
    while (1)
    {
      v15 = (v15 + 1) & v17;
      if (((*(_QWORD *)(v12 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) == 0)
        break;
      if (*(_QWORD *)(v16 + 8 * v15) == v11)
        goto LABEL_9;
    }
LABEL_20:
    v19 = *(_QWORD *)(v4 + 16);
    v18 = *(_QWORD *)(v4 + 24);
    if (v19 >= v18 >> 1)
      v4 = (uint64_t)sub_214224894((char *)(v18 > 1), v19 + 1, 1, (char *)v4);
    *(_QWORD *)(v4 + 16) = v19 + 1;
    *(_QWORD *)(v4 + 8 * v19 + 32) = v2;
    swift_beginAccess();
    v20 = v45;
    v21 = sub_214425868();
    v22 = -1 << *(_BYTE *)(v20 + 32);
    v23 = v21 & ~v22;
    if (((*(_QWORD *)(v20 + 56 + ((v23 >> 3) & 0xFFFFFFFFFFFFF8)) >> v23) & 1) != 0)
    {
      v24 = *(_QWORD *)(v20 + 48);
      if (*(_QWORD *)(v24 + 8 * v23) == v11)
        goto LABEL_42;
      v25 = ~v22;
      while (1)
      {
        v23 = (v23 + 1) & v25;
        if (((*(_QWORD *)(v20 + 56 + ((v23 >> 3) & 0xFFFFFFFFFFFFF8)) >> v23) & 1) == 0)
          break;
        if (*(_QWORD *)(v24 + 8 * v23) == v11)
          goto LABEL_42;
      }
    }
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v27 = v45;
    v44 = v45;
    v45 = 0x8000000000000000;
    v28 = *(_QWORD *)(v44 + 16);
    if (*(_QWORD *)(v44 + 24) <= v28)
    {
      v29 = v28 + 1;
      if (isUniquelyReferenced_nonNull_native)
        sub_214213528(v29);
      else
        sub_214218C24(v29);
      v27 = v44;
      v30 = sub_214425868();
      v31 = -1 << *(_BYTE *)(v27 + 32);
      v23 = v30 & ~v31;
      if (((*(_QWORD *)(v27 + 56 + ((v23 >> 3) & 0xFFFFFFFFFFFFF8)) >> v23) & 1) != 0)
      {
        v32 = *(_QWORD *)(v27 + 48);
        if (*(_QWORD *)(v32 + 8 * v23) == v11)
          goto LABEL_59;
        v33 = ~v31;
        while (1)
        {
          v23 = (v23 + 1) & v33;
          if (((*(_QWORD *)(v27 + 56 + ((v23 >> 3) & 0xFFFFFFFFFFFFF8)) >> v23) & 1) == 0)
            break;
          if (*(_QWORD *)(v32 + 8 * v23) == v11)
            goto LABEL_59;
        }
      }
    }
    else if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_214217CB8();
      v27 = v44;
    }
    *(_QWORD *)(v27 + ((v23 >> 3) & 0xFFFFFFFFFFFFFF8) + 56) |= 1 << v23;
    *(_QWORD *)(*(_QWORD *)(v27 + 48) + 8 * v23) = v11;
    v34 = *(_QWORD *)(v27 + 16);
    v35 = __OFADD__(v34, 1);
    v36 = v34 + 1;
    if (v35)
      goto LABEL_58;
    *(_QWORD *)(v27 + 16) = v36;
    v45 = v27;
    swift_bridgeObjectRelease();
LABEL_42:
    swift_endAccess();
    if (v2 == v1)
    {
LABEL_45:
      if (*(_QWORD *)(v4 + 16) >= 3uLL)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
          v37 = v42;
        else
          v37 = sub_214224ACC(0, v42[2] + 1, 1, v42);
        v39 = v37[2];
        v38 = v37[3];
        if (v39 >= v38 >> 1)
          v37 = sub_214224ACC((_QWORD *)(v38 > 1), v39 + 1, 1, v37);
        v37[2] = v39 + 1;
        v42 = v37;
        v37[v39 + 4] = v4;
        goto LABEL_4;
      }
      swift_bridgeObjectRelease();
      sub_21434E8C0(v1, v43, &v45, (uint64_t)v46);
      sub_2141E801C((uint64_t)v46, (uint64_t)v47, &qword_253F105A8);
      if (v48 != 1)
        goto LABEL_5;
      goto LABEL_3;
    }
  }
  __break(1u);
LABEL_57:
  __break(1u);
LABEL_58:
  __break(1u);
LABEL_59:
  result = sub_214425814();
  __break(1u);
  return result;
}

uint64_t sub_21434DC64()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char isUniquelyReferenced_nonNull_native;
  char *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  char v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  unint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  char *v50;
  char v51;
  unint64_t v52;
  unint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  float64x2_t v61;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  _QWORD *v75;

  v1 = (uint64_t)v0;
  v2 = v0[3];
  i = (uint64_t)sub_21434D13C(MEMORY[0x24BEE4AF8], *(_QWORD *)(v2 + 16));
  swift_bridgeObjectRelease();
  v0[5] = i;
  v65 = v0;
  v66 = *(_QWORD *)(*v0 + 16);
  if (!v66)
    goto LABEL_65;
  v63 = v2;
  v67 = *v0 + 32;
  v4 = swift_bridgeObjectRetain();
  v5 = 0;
  v6 = 0;
  v7 = 40;
  v64 = v4;
  while (1)
  {
    if (v6 >= *(_QWORD *)(v4 + 16))
      goto LABEL_119;
    v8 = *(_QWORD *)(v67 + 8 * v6);
    v9 = *(_QWORD *)(v8 + 16);
    if (v9)
      break;
LABEL_3:
    if (++v6 == v66)
      goto LABEL_64;
  }
  v68 = v6;
  v75 = (_QWORD *)(v8 + 32);
  v70 = v5 ^ 0x7FFFFFFFFFFFFFFFLL;
  swift_bridgeObjectRetain();
  v10 = 0;
  v72 = v9;
  v73 = v8;
  while (1)
  {
    v11 = v10 + 1;
    if (v10 + 1 < v9)
      v12 = v10 + 1;
    else
      v12 = 0;
    v13 = *(_QWORD *)(v8 + 16);
    if (v10 >= v13)
      goto LABEL_98;
    if (v12 >= v13)
    {
LABEL_99:
      __break(1u);
LABEL_100:
      __break(1u);
LABEL_101:
      __break(1u);
LABEL_102:
      __break(1u);
LABEL_103:
      __break(1u);
LABEL_104:
      __break(1u);
LABEL_105:
      __break(1u);
LABEL_106:
      __break(1u);
LABEL_107:
      __break(1u);
LABEL_108:
      __break(1u);
LABEL_109:
      __break(1u);
LABEL_110:
      __break(1u);
LABEL_111:
      __break(1u);
LABEL_112:
      __break(1u);
      goto LABEL_113;
    }
    v14 = v75[v10];
    v15 = v75[v12];
    if (v14 == v15)
      goto LABEL_100;
    if (v14 < 0)
      goto LABEL_101;
    v16 = *(_QWORD *)(i + 16);
    if (v14 >= v16)
      goto LABEL_102;
    v17 = *(_QWORD **)(i + 32 + 8 * v14);
    v18 = v17[2];
    if (v18)
    {
      if (v17[5] == v15)
      {
        v19 = 0;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
          goto LABEL_18;
        goto LABEL_57;
      }
      if (v18 != 1)
      {
        v26 = v17 + 10;
        v19 = 1;
        while (1)
        {
          v27 = *v26;
          v26 += 5;
          if (v27 == v15)
            break;
          v28 = v19 + 1;
          if (__OFADD__(v19, 1))
          {
            __break(1u);
LABEL_94:
            __break(1u);
LABEL_95:
            __break(1u);
LABEL_96:
            __break(1u);
LABEL_97:
            __break(1u);
LABEL_98:
            __break(1u);
            goto LABEL_99;
          }
          ++v19;
          if (v28 == v18)
            goto LABEL_30;
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
LABEL_18:
          if (v14 >= *(_QWORD *)(i + 16))
            goto LABEL_105;
          v20 = *(char **)(i + 32 + 8 * v14);
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *(_QWORD *)(i + 32 + 8 * v14) = v20;
          if ((isUniquelyReferenced_nonNull_native & 1) != 0)
          {
            if ((v19 & 0x8000000000000000) != 0)
              goto LABEL_107;
          }
          else
          {
            v20 = sub_21434EB0C((uint64_t)v20);
            *(_QWORD *)(i + 32 + 8 * v14) = v20;
            if ((v19 & 0x8000000000000000) != 0)
              goto LABEL_107;
          }
          if (v19 >= *((_QWORD *)v20 + 2))
            goto LABEL_106;
          v22 = &v20[40 * v19];
          v23 = *((_QWORD *)v22 + 6);
          v24 = __OFSUB__(v23, 1);
          v25 = v23 - 1;
          if (v24)
            goto LABEL_108;
          goto LABEL_39;
        }
LABEL_57:
        i = (uint64_t)sub_21434EB20((_QWORD *)i);
        goto LABEL_18;
      }
    }
LABEL_30:
    if (v15 >= v16)
      goto LABEL_104;
    v29 = *(_QWORD **)(i + 32 + 8 * v15);
    v30 = v29[2];
    if (!v30)
    {
LABEL_45:
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        i = (uint64_t)sub_21434EB20((_QWORD *)i);
      if (v14 >= *(_QWORD *)(i + 16))
        goto LABEL_109;
      v38 = i;
      v39 = i + 32;
      v40 = *(char **)(v39 + 8 * v14);
      v41 = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)(v39 + 8 * v14) = v40;
      if ((v41 & 1) == 0)
      {
        v40 = sub_2142248A0(0, *((_QWORD *)v40 + 2) + 1, 1, v40);
        *(_QWORD *)(v39 + 8 * v14) = v40;
      }
      v43 = *((_QWORD *)v40 + 2);
      v42 = *((_QWORD *)v40 + 3);
      if (v43 >= v42 >> 1)
      {
        v40 = sub_2142248A0((char *)(v42 > 1), v43 + 1, 1, v40);
        *(_QWORD *)(v39 + 8 * v14) = v40;
      }
      i = v38;
      *((_QWORD *)v40 + 2) = v43 + 1;
      v7 = 40;
      v44 = &v40[40 * v43];
      *((_QWORD *)v44 + 4) = v5;
      *((_QWORD *)v44 + 5) = v15;
      *((_OWORD *)v44 + 3) = xmmword_21442D700;
      v44[64] = 1;
      goto LABEL_53;
    }
    if (v29[5] == v14)
    {
      v31 = 0;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        goto LABEL_34;
LABEL_59:
      i = (uint64_t)sub_21434EB20((_QWORD *)i);
      goto LABEL_34;
    }
    if (v30 == 1)
      goto LABEL_45;
    v35 = v29 + 10;
    v31 = 1;
    while (1)
    {
      v36 = *v35;
      v35 += 5;
      if (v36 == v14)
        break;
      v37 = v31 + 1;
      if (__OFADD__(v31, 1))
        goto LABEL_94;
      ++v31;
      if (v37 == v30)
        goto LABEL_45;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      goto LABEL_59;
LABEL_34:
    if ((int64_t)v15 >= *(_QWORD *)(i + 16))
      goto LABEL_110;
    v1 = 8 * v15;
    v32 = *(char **)(i + 32 + 8 * v15);
    v33 = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(i + 32 + 8 * v15) = v32;
    if ((v33 & 1) == 0)
      break;
    if ((v31 & 0x8000000000000000) != 0)
      goto LABEL_63;
LABEL_37:
    if (v31 >= *((_QWORD *)v32 + 2))
      goto LABEL_111;
    v22 = &v32[40 * v31];
    v34 = *((_QWORD *)v22 + 6);
    v24 = __OFADD__(v34, 1);
    v25 = v34 + 1;
    if (v24)
      goto LABEL_112;
LABEL_39:
    *((_QWORD *)v22 + 6) = v25;
LABEL_53:
    v9 = v72;
    v8 = v73;
    if (v10 == v70)
      goto LABEL_103;
    ++v5;
    ++v10;
    if (v11 == v72)
    {
      swift_bridgeObjectRelease();
      v4 = v64;
      v1 = (uint64_t)v65;
      v65[5] = i;
      v6 = v68;
      goto LABEL_3;
    }
  }
  v32 = sub_21434EB0C((uint64_t)v32);
  *(_QWORD *)(i + 32 + 8 * v15) = v32;
  if ((v31 & 0x8000000000000000) == 0)
    goto LABEL_37;
LABEL_63:
  __break(1u);
LABEL_64:
  swift_bridgeObjectRelease();
  v2 = v63;
LABEL_65:
  v5 = (unint64_t)sub_21434D13C(MEMORY[0x24BEE4AF8], *(_QWORD *)(v2 + 16));
  v7 = *(_QWORD *)(v2 + 16);
  v75 = (_QWORD *)i;
  if (!v7)
    goto LABEL_83;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    goto LABEL_120;
  while (1)
  {
    v45 = 0;
    v71 = i + 32;
    v46 = (_QWORD *)(v5 + 32);
    v74 = (_QWORD *)v5;
    v69 = v7;
    do
    {
      if (v45 == v7)
        goto LABEL_117;
      if (v45 >= *(_QWORD *)(i + 16))
        goto LABEL_118;
      v47 = *(_QWORD *)(*(_QWORD *)(v71 + 8 * v45) + 16);
      if (v47)
      {
        v7 = swift_bridgeObjectRetain() + 48;
        while (1)
        {
          v5 = -*(_QWORD *)v7;
          if (__OFSUB__(0, *(_QWORD *)v7))
            goto LABEL_95;
          v48 = *(_QWORD *)(v7 - 8);
          if ((v48 & 0x8000000000000000) != 0)
            goto LABEL_96;
          if (v48 >= v74[2])
            goto LABEL_97;
          v49 = *(_QWORD *)(v7 - 16);
          v50 = (char *)v46[v48];
          v51 = swift_isUniquelyReferenced_nonNull_native();
          v46[v48] = v50;
          if ((v51 & 1) == 0)
          {
            v50 = sub_2142248A0(0, *((_QWORD *)v50 + 2) + 1, 1, v50);
            v46[v48] = v50;
          }
          v53 = *((_QWORD *)v50 + 2);
          v52 = *((_QWORD *)v50 + 3);
          if (v53 >= v52 >> 1)
          {
            v50 = sub_2142248A0((char *)(v52 > 1), v53 + 1, 1, v50);
            v46[v48] = v50;
          }
          v7 += 40;
          *((_QWORD *)v50 + 2) = v53 + 1;
          v54 = &v50[40 * v53];
          *((_QWORD *)v54 + 4) = v49;
          *((_QWORD *)v54 + 5) = v45;
          *((_QWORD *)v54 + 6) = v5;
          *((_QWORD *)v54 + 7) = 0;
          v54[64] = 1;
          --v47;
          i = (uint64_t)v75;
          if (!v47)
          {
            swift_bridgeObjectRelease();
            v5 = (unint64_t)v74;
            v7 = v69;
            break;
          }
        }
      }
      ++v45;
    }
    while (v45 != v7);
    v1 = (uint64_t)v65;
LABEL_83:
    v55 = *(_QWORD *)(i + 16);
    if (!v55)
      return swift_bridgeObjectRelease();
    v56 = -v55;
    v57 = 2;
    for (i = 32; ; i += 8)
    {
      v58 = v57 - 2;
      if ((unint64_t)(v57 - 2) >= *(_QWORD *)(v5 + 16))
        break;
      v59 = *(_QWORD *)(v5 + i);
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v75 = sub_21434EB20(v75);
      if (v58 >= v75[2])
        goto LABEL_114;
      v7 = (uint64_t)v75 + i;
      sub_2143EAA6C(v59);
      v60 = *(_QWORD *)(v1 + 24);
      if (v58 >= *(_QWORD *)(v60 + 16))
        goto LABEL_115;
      v61 = *(float64x2_t *)(v60 + 16 * v57);
      *(_QWORD *)(v1 + 40) = v75;
      if (v58 >= v75[2])
        goto LABEL_116;
      sub_21434D058((char **)((char *)v75 + i), v1, v61);
      v75 = *(_QWORD **)(v1 + 40);
      ++v57;
      if (v56 + v57 == 2)
        return swift_bridgeObjectRelease();
    }
LABEL_113:
    __break(1u);
LABEL_114:
    __break(1u);
LABEL_115:
    __break(1u);
LABEL_116:
    __break(1u);
LABEL_117:
    __break(1u);
LABEL_118:
    __break(1u);
LABEL_119:
    __break(1u);
LABEL_120:
    v5 = (unint64_t)sub_21434EB20((_QWORD *)v5);
  }
}

void sub_21434E308()
{
  uint64_t v0;
  size_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  double *v8;
  char v9;
  double v10;
  BOOL v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  int64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  char *v26;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t *v35;
  uint64_t *v36;
  char v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  _QWORD v64[3];
  uint64_t v65;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 24) + 16);
  if (v1
    && (v2 = sub_21442504C(),
        *(_QWORD *)(v2 + 16) = v1,
        bzero((void *)(v2 + 32), v1),
        v3 = *(_QWORD *)(v0 + 24),
        (v4 = *(_QWORD *)(v3 + 16)) != 0))
  {
    v5 = (char *)MEMORY[0x24BEE4AF8];
    v60 = v0;
    v61 = v2 + 32;
    while (1)
    {
      v6 = 0;
      v7 = 0;
      v8 = (double *)(v3 + 40);
      v9 = 1;
      v10 = INFINITY;
      do
      {
        if (*(_QWORD *)(v2 + 16) <= (unint64_t)(v4 - 1))
        {
LABEL_88:
          __break(1u);
LABEL_89:
          __break(1u);
LABEL_90:
          __break(1u);
LABEL_91:
          __break(1u);
LABEL_92:
          __break(1u);
LABEL_93:
          __break(1u);
LABEL_94:
          __break(1u);
LABEL_95:
          __break(1u);
LABEL_96:
          __break(1u);
LABEL_97:
          __break(1u);
LABEL_98:
          __break(1u);
LABEL_99:
          __break(1u);
LABEL_100:
          __break(1u);
LABEL_101:
          __break(1u);
LABEL_102:
          __break(1u);
LABEL_103:
          __break(1u);
LABEL_104:
          __break(1u);
LABEL_105:
          __break(1u);
LABEL_106:
          __break(1u);
LABEL_107:
          __break(1u);
LABEL_108:
          __break(1u);
LABEL_109:
          __break(1u);
          goto LABEL_110;
        }
        if ((*(_BYTE *)(v2 + v7 + 32) & 1) == 0)
        {
          v11 = *v8 >= v10;
          if (*v8 < v10)
          {
            v10 = *v8;
            v6 = v7;
          }
          v9 &= v11;
        }
        ++v7;
        v8 += 2;
      }
      while (v4 != v7);
      if ((v9 & 1) != 0)
        goto LABEL_82;
      v12 = sub_2142249B8(0, 1, 1, v5);
      v14 = *((_QWORD *)v12 + 2);
      v13 = *((_QWORD *)v12 + 3);
      if (v14 >= v13 >> 1)
        v12 = sub_2142249B8((char *)(v13 > 1), v14 + 1, 1, v12);
      *((_QWORD *)v12 + 2) = v14 + 1;
      v15 = &v12[24 * v14];
      *((_QWORD *)v15 + 5) = 0;
      *((_QWORD *)v15 + 6) = 0;
      *((_QWORD *)v15 + 4) = v6;
      if ((v6 & 0x8000000000000000) != 0)
        break;
      if (v6 >= *(_QWORD *)(v2 + 16))
        goto LABEL_111;
      v16 = v61;
      *(_BYTE *)(v61 + v6) = 1;
      v17 = *((_QWORD *)v12 + 2);
      if (v17)
      {
LABEL_20:
        v18 = v17 - 1;
        v19 = &v12[24 * v17 - 24];
        v21 = *((_QWORD *)v19 + 4);
        v20 = *((_QWORD *)v19 + 5);
        v22 = *((_QWORD *)v19 + 6);
        *((_QWORD *)v12 + 2) = v18;
        if (v21 < 0)
          goto LABEL_104;
        if ((unint64_t)v21 >= *(_QWORD *)(v2 + 16))
          goto LABEL_105;
        *(_BYTE *)(v16 + v21) = 1;
        v23 = *(_QWORD **)(v0 + 40);
        if ((unint64_t)v21 >= v23[2])
          goto LABEL_106;
        v24 = *(_QWORD *)(v23[v21 + 4] + 16);
        if (v24 < v20)
          goto LABEL_107;
        v64[0] = v20;
        v64[1] = v24;
        if (v20 < 0)
          goto LABEL_108;
        v64[2] = 0;
        v65 = v20;
        v25 = v23;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v25 = sub_21434EB20(v25);
        v62 = v25;
        v26 = (char *)v25[v21 + 4];
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v63 = v25 + 4;
        v25[v21 + 4] = v26;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v26 = sub_21434EB0C((uint64_t)v26);
          v63[v21] = v26;
        }
        v28 = 0;
        v29 = 0;
        v30 = 0;
        v31 = 0;
        v32 = 1;
        v33 = v62;
        while (1)
        {
          if ((v32 & 1) != 0 || v28 == v29)
          {
            if (v31 == 2)
              goto LABEL_52;
            v34 = v31 + 1;
            v35 = &v64[2 * v31];
            v28 = *v35;
            v29 = v35[1];
            if (*v35 == v29)
            {
              v36 = &v65 + 2 * v31;
              while (v34 != 2)
              {
                ++v34;
                v28 = *(v36 - 1);
                v29 = *v36;
                v36 += 2;
                if (v28 != v29)
                  goto LABEL_37;
              }
LABEL_52:
              v0 = v60;
              *(_QWORD *)(v60 + 40) = v33;
              if (v21 >= v33[2])
                goto LABEL_109;
              v42 = v63[v21];
              v43 = *(_QWORD *)(v42 + 16);
              if (v43)
              {
                swift_bridgeObjectRetain();
                v44 = 0;
                v16 = v61;
                do
                {
                  if (v44 >= *(_QWORD *)(v42 + 16))
                  {
LABEL_85:
                    __break(1u);
LABEL_86:
                    __break(1u);
LABEL_87:
                    __break(1u);
                    goto LABEL_88;
                  }
                  v45 = v42 + 32 + 40 * v44;
                  v46 = *(_QWORD *)(v45 + 8);
                  if ((v46 & 0x8000000000000000) != 0)
                    goto LABEL_86;
                  if (v46 >= *(_QWORD *)(v2 + 16))
                    goto LABEL_87;
                  if ((*(_BYTE *)(v16 + v46) & 1) == 0)
                  {
                    if (v46 >= v62[2])
                      goto LABEL_89;
                    v47 = (_QWORD *)v63[v46];
                    v48 = v47[2];
                    if (!v48)
                      goto LABEL_90;
                    v49 = *(_QWORD *)v45;
                    v50 = *(_QWORD *)(v45 + 16);
                    v51 = *(_QWORD *)(v45 + 24);
                    v52 = *(_BYTE *)(v45 + 32);
                    if (v47[4] == v49)
                    {
                      v53 = 0;
                    }
                    else
                    {
                      if (v48 == 1)
                        goto LABEL_102;
                      if (v47[9] == v49)
                      {
                        v53 = 1;
                      }
                      else
                      {
                        if (v48 == 2)
                          goto LABEL_103;
                        v57 = v47 + 14;
                        v53 = 2;
                        while (1)
                        {
                          v58 = *v57;
                          v57 += 5;
                          if (v58 == v49)
                            break;
                          v59 = v53 + 1;
                          if (__OFADD__(v53, 1))
                          {
                            __break(1u);
LABEL_84:
                            __break(1u);
                            goto LABEL_85;
                          }
                          ++v53;
                          if (v59 == v48)
                            goto LABEL_84;
                        }
                      }
                    }
                    if ((v52 & 1) != 0)
                      goto LABEL_112;
                    v54 = v51 + v50;
                    if (__OFADD__(v51, v50))
                      goto LABEL_91;
                    v55 = v2;
                    v56 = *((_QWORD *)v12 + 2);
                    if (v56 >= *((_QWORD *)v12 + 3) >> 1)
                    {
                      v12 = sub_2142249B8((char *)1, v56 + 1, 1, v12);
                      v56 = *((_QWORD *)v12 + 2);
                    }
                    memmove(v12 + 56, v12 + 32, 24 * v56);
                    *((_QWORD *)v12 + 2) = v56 + 1;
                    *((_QWORD *)v12 + 4) = v46;
                    *((_QWORD *)v12 + 5) = v53;
                    *((_QWORD *)v12 + 6) = v54;
                    if ((int64_t)v46 >= *(_QWORD *)(v55 + 16))
                      goto LABEL_92;
                    v2 = v55;
                    v16 = v61;
                    *(_BYTE *)(v61 + v46) = 1;
                  }
                  ++v44;
                }
                while (v44 != v43);
                swift_bridgeObjectRelease();
                v0 = v60;
                v17 = *((_QWORD *)v12 + 2);
                if (!v17)
                  break;
              }
              else
              {
                v16 = v61;
                v17 = *((_QWORD *)v12 + 2);
                if (!v17)
                  break;
              }
              goto LABEL_20;
            }
LABEL_37:
            v30 = v28;
            v31 = v34;
          }
          if (v29 < v30)
            goto LABEL_93;
          if ((uint64_t)v28 < v30)
            goto LABEL_94;
          if ((uint64_t)v28 >= v29)
            goto LABEL_95;
          if (v21 >= v33[2])
            goto LABEL_96;
          v37 = swift_isUniquelyReferenced_nonNull_native();
          v63[v21] = v26;
          if ((v37 & 1) != 0)
          {
            v33 = v62;
            if ((v28 & 0x8000000000000000) != 0)
              goto LABEL_97;
          }
          else
          {
            v26 = sub_21434EB0C((uint64_t)v26);
            v63[v21] = v26;
            v33 = v62;
            if ((v28 & 0x8000000000000000) != 0)
              goto LABEL_97;
          }
          if (v28 >= *((_QWORD *)v26 + 2))
            goto LABEL_98;
          v38 = 40 * v28;
          v39 = &v26[40 * v28];
          *((_QWORD *)v39 + 7) = v22;
          v39[64] = 0;
          if (v21 >= v33[2])
            goto LABEL_99;
          v26 = (char *)v63[v21];
          if (v28 >= *((_QWORD *)v26 + 2))
            goto LABEL_100;
          v32 = 0;
          ++v28;
          v40 = *(_QWORD *)&v26[v38 + 48];
          v41 = __OFADD__(v22, v40);
          v22 += v40;
          if (v41)
            goto LABEL_101;
        }
      }
      swift_bridgeObjectRelease();
      v3 = *(_QWORD *)(v0 + 24);
      v4 = *(_QWORD *)(v3 + 16);
      v5 = (char *)MEMORY[0x24BEE4AF8];
      if (!v4)
        goto LABEL_82;
    }
LABEL_110:
    __break(1u);
LABEL_111:
    __break(1u);
LABEL_112:
    __break(1u);
  }
  else
  {
LABEL_82:
    swift_bridgeObjectRelease();
  }
}

unint64_t sub_21434E8C0@<X0>(unint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v10;
  uint64_t v11;
  __int128 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  __int128 v24;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_23;
  }
  v5 = *(_QWORD *)(a2 + 40);
  if (*(_QWORD *)(v5 + 16) <= result)
  {
LABEL_23:
    __break(1u);
    return result;
  }
  v6 = *(_QWORD *)(v5 + 8 * result + 32);
  v7 = *(_QWORD *)(v6 + 16);
  v8 = 0uLL;
  if (!v7)
  {
    v13 = 0;
    LOBYTE(v15) = 1;
    goto LABEL_21;
  }
  v10 = v6 + 32;
  result = swift_beginAccess();
  v11 = 0;
  while (1)
  {
    v12 = (__int128 *)(v10 + 40 * v11);
    v13 = *((_QWORD *)v12 + 2);
    if (v13 >= 1 && (v12[2] & 1) == 0 && !*((_QWORD *)v12 + 3))
      break;
LABEL_5:
    if (++v11 == v7)
    {
      v13 = 0;
      LOBYTE(v15) = 1;
      v8 = 0uLL;
      goto LABEL_21;
    }
  }
  v8 = *v12;
  v14 = *a3;
  v15 = *(_QWORD *)(*a3 + 16);
  if (!v15)
    goto LABEL_21;
  v24 = v8;
  v16 = v8;
  result = sub_214425868();
  v17 = -1 << *(_BYTE *)(v14 + 32);
  v18 = result & ~v17;
  v19 = v14 + 56;
  if (((*(_QWORD *)(v14 + 56 + ((v18 >> 3) & 0xFFFFFFFFFFFFF8)) >> v18) & 1) != 0)
  {
    v20 = *(_QWORD *)(v14 + 48);
    v8 = v24;
    if (*(_QWORD *)(v20 + 8 * v18) != v16)
    {
      v21 = ~v17;
      v22 = (v18 + 1) & v21;
      if (((*(_QWORD *)(v19 + ((v22 >> 3) & 0xFFFFFFFFFFFFF8)) >> v22) & 1) == 0)
        goto LABEL_17;
      if (*(_QWORD *)(v20 + 8 * v22) != v16)
      {
        v23 = (v22 + 1) & v21;
        if (((*(_QWORD *)(v19 + ((v23 >> 3) & 0xFFFFFFFFFFFFF8)) >> v23) & 1) == 0)
        {
LABEL_17:
          LOBYTE(v15) = 0;
          goto LABEL_21;
        }
        while (*(_QWORD *)(v20 + 8 * v23) != v16)
        {
          v23 = (v23 + 1) & v21;
          if (((*(_QWORD *)(v19 + ((v23 >> 3) & 0xFFFFFFFFFFFFF8)) >> v23) & 1) == 0)
            goto LABEL_17;
        }
      }
    }
    goto LABEL_5;
  }
  LOBYTE(v15) = 0;
  v8 = v24;
LABEL_21:
  *(_OWORD *)a4 = v8;
  *(_QWORD *)(a4 + 16) = v13;
  *(_QWORD *)(a4 + 24) = 0;
  *(_BYTE *)(a4 + 32) = 0;
  *(_BYTE *)(a4 + 33) = v15;
  return result;
}

size_t sub_21434EA94(_QWORD *a1)
{
  return sub_2142219C8(0, a1[2], 0, a1);
}

char *sub_21434EAA8(uint64_t a1)
{
  return sub_214221D0C(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

size_t sub_21434EABC(_QWORD *a1)
{
  return sub_214223DF0(0, a1[2], 0, a1);
}

_QWORD *sub_21434EAD0(_QWORD *a1)
{
  return sub_214223F08(0, a1[2], 0, a1);
}

char *sub_21434EAE4(uint64_t a1)
{
  return sub_214224144(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

_QWORD *sub_21434EAF8(_QWORD *a1)
{
  return sub_21422435C(0, a1[2], 0, a1);
}

char *sub_21434EB0C(uint64_t a1)
{
  return sub_2142248A0(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

_QWORD *sub_21434EB20(_QWORD *a1)
{
  return sub_2142249A4(0, a1[2], 0, a1);
}

char *sub_21434EB34(uint64_t a1)
{
  return sub_214224894(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

_QWORD *sub_21434EB48(_QWORD *a1)
{
  return sub_214224BD8(0, a1[2], 0, a1);
}

char *sub_21434EB5C(uint64_t a1)
{
  return sub_2142245B0(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

char *sub_21434EB70(uint64_t a1)
{
  return sub_214224AE0(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

char *sub_21434EB84(uint64_t a1)
{
  return sub_214221AF8(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

char *sub_21434EB98(uint64_t a1)
{
  return sub_21422449C(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

size_t sub_21434EBAC(_QWORD *a1)
{
  return sub_214225694(0, a1[2], 0, a1);
}

_QWORD *sub_21434EBC0(_QWORD *a1)
{
  return sub_2142258BC(0, a1[2], 0, a1);
}

_QWORD *sub_21434EBD4(_QWORD *a1)
{
  return sub_214225B80(0, a1[2], 0, a1);
}

size_t sub_21434EBE8(_QWORD *a1)
{
  return sub_2142259F8(0, a1[2], 0, a1);
}

_QWORD *sub_21434EBFC(_QWORD *a1)
{
  return sub_214226018(0, a1[2], 0, a1);
}

char *sub_21434EC10(uint64_t a1)
{
  return sub_214226254(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

char *sub_21434EC24(uint64_t a1)
{
  return sub_214226154(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

char *sub_21434EC38(uint64_t a1)
{
  return sub_2142265BC(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

char *sub_21434EC4C(uint64_t a1)
{
  return sub_21422689C(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

char *sub_21434EC60(uint64_t a1)
{
  return sub_214223E10(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

void sub_21434EC74(uint64_t *a1, uint64_t a2, float64x2_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  float64x2_t v20;
  double v21;
  float64x2_t v22;
  double v23;
  unint64_t *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  float64x2_t v29;
  double v30;
  float64x2_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  char *v48;
  char *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  BOOL v61;
  unint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  BOOL v71;
  uint64_t v72;
  char v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  BOOL v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  float64x2_t v105;
  double v106;
  float64x2_t v107;
  __int128 v108;
  __int128 v109;
  uint64_t v110;
  char v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  char *v130;

  v6 = a1[1];
  v7 = sub_214425730();
  if (v7 >= v6)
  {
    if ((v6 & 0x8000000000000000) == 0)
    {
      if (v6)
        sub_21434FAB8(0, v6, 1, a1, a2, a3);
      return;
    }
LABEL_148:
    __break(1u);
LABEL_149:
    __break(1u);
LABEL_150:
    __break(1u);
    goto LABEL_151;
  }
  if (v6 >= 0)
    v8 = v6;
  else
    v8 = v6 + 1;
  if (v6 < -1)
  {
LABEL_147:
    __break(1u);
    goto LABEL_148;
  }
  v124 = v7;
  v125 = v6;
  v120 = a1;
  if (v6 <= 1)
  {
    v11 = MEMORY[0x24BEE4AF8];
    v128 = (char *)(MEMORY[0x24BEE4AF8] + 32);
    if (v6 != 1)
    {
      v47 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
      v130 = (char *)MEMORY[0x24BEE4AF8];
LABEL_106:
      v123 = v11;
      if (v47 < 2)
      {
LABEL_117:
        swift_bridgeObjectRelease();
        *(_QWORD *)(v123 + 16) = 0;
        swift_bridgeObjectRelease();
        return;
      }
      v113 = *v120;
      while (1)
      {
        v114 = v47 - 2;
        if (v47 < 2)
          goto LABEL_138;
        if (!v113)
          goto LABEL_155;
        v115 = *(_QWORD *)&v130[16 * v114 + 32];
        v116 = *(_QWORD *)&v130[16 * v47 + 24];
        sub_21434FBFC((char *)(v113 + 40 * v115), (char *)(v113 + 40 * *(_QWORD *)&v130[16 * v47 + 16]), v113 + 40 * v116, v128, a2, a3);
        if (v3)
          goto LABEL_117;
        if (v116 < v115)
          goto LABEL_139;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v130 = sub_21435010C((uint64_t)v130);
        if (v114 >= *((_QWORD *)v130 + 2))
          goto LABEL_140;
        v117 = &v130[16 * v114 + 32];
        *(_QWORD *)v117 = v115;
        *((_QWORD *)v117 + 1) = v116;
        v118 = *((_QWORD *)v130 + 2);
        if (v47 > v118)
          goto LABEL_141;
        memmove(&v130[16 * v47 + 16], &v130[16 * v47 + 32], 16 * (v118 - v47));
        *((_QWORD *)v130 + 2) = v118 - 1;
        v47 = v118 - 1;
        if (v118 <= 2)
          goto LABEL_117;
      }
    }
    v123 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    v9 = v8 >> 1;
    v10 = sub_21442504C();
    *(_QWORD *)(v10 + 16) = v9;
    v123 = v10;
    v128 = (char *)(v10 + 32);
  }
  v12 = 0;
  v121 = *a1 + 48;
  v122 = *a1 + 8;
  v129 = *a1;
  v119 = *a1 - 40;
  v130 = (char *)MEMORY[0x24BEE4AF8];
  v13 = v125;
  while (1)
  {
    v14 = v12++;
    if (v12 >= v13)
      goto LABEL_33;
    v15 = *(_QWORD *)(v122 + 40 * v12);
    if ((v15 & 0x8000000000000000) != 0)
      goto LABEL_143;
    v16 = *(_QWORD *)(a2 + 24);
    v17 = *(_QWORD *)(v16 + 16);
    if (v15 >= v17)
      goto LABEL_144;
    v18 = *(_QWORD *)(v122 + 40 * v14);
    if (v18 >= v17)
      goto LABEL_145;
    v19 = v16 + 32;
    v20 = vsubq_f64(*(float64x2_t *)(v16 + 32 + 16 * v15), a3);
    v21 = atan2(v20.f64[1], v20.f64[0]);
    v22 = vsubq_f64(*(float64x2_t *)(v19 + 16 * v18), a3);
    v23 = atan2(v22.f64[1], v22.f64[0]);
    v12 = v14 + 2;
    if (v14 + 2 >= v13)
      goto LABEL_25;
    v24 = (unint64_t *)(v121 + 40 * v14);
    v25 = v24;
    do
    {
      v27 = v25[5];
      v25 += 5;
      v26 = v27;
      if (v27 >= v17)
        goto LABEL_125;
      v28 = *v24;
      if (*v24 >= v17)
      {
LABEL_126:
        __break(1u);
LABEL_127:
        __break(1u);
LABEL_128:
        __break(1u);
LABEL_129:
        __break(1u);
LABEL_130:
        __break(1u);
LABEL_131:
        __break(1u);
LABEL_132:
        __break(1u);
LABEL_133:
        __break(1u);
LABEL_134:
        __break(1u);
LABEL_135:
        __break(1u);
LABEL_136:
        __break(1u);
LABEL_137:
        __break(1u);
LABEL_138:
        __break(1u);
LABEL_139:
        __break(1u);
LABEL_140:
        __break(1u);
LABEL_141:
        __break(1u);
LABEL_142:
        __break(1u);
LABEL_143:
        __break(1u);
LABEL_144:
        __break(1u);
LABEL_145:
        __break(1u);
LABEL_146:
        __break(1u);
        goto LABEL_147;
      }
      v29 = vsubq_f64(*(float64x2_t *)(v19 + 16 * v26), a3);
      v30 = atan2(v29.f64[1], v29.f64[0]);
      v31 = vsubq_f64(*(float64x2_t *)(v19 + 16 * v28), a3);
      if (v21 < v23 == v30 >= atan2(v31.f64[1], v31.f64[0]))
        goto LABEL_25;
      ++v12;
      v24 = v25;
    }
    while (v13 != v12);
    v12 = v13;
LABEL_25:
    if (v21 < v23)
      break;
LABEL_33:
    if (v12 >= v13)
      goto LABEL_42;
    if (__OFSUB__(v12, v14))
      goto LABEL_146;
    if (v12 - v14 >= v124)
      goto LABEL_42;
    if (__OFADD__(v14, v124))
      goto LABEL_149;
    if (v14 + v124 >= v13)
      v43 = v13;
    else
      v43 = v14 + v124;
    if (v43 < v14)
      goto LABEL_150;
    if (v12 == v43)
    {
LABEL_42:
      v44 = v129;
      if (v12 < v14)
        goto LABEL_142;
    }
    else
    {
      v126 = v43;
      v127 = v14;
      v97 = v119 + 40 * v12;
      v44 = v129;
      do
      {
        v98 = v127;
        v99 = v97;
        do
        {
          v100 = *(_QWORD *)(v99 + 48);
          if ((v100 & 0x8000000000000000) != 0)
          {
            __break(1u);
LABEL_119:
            __break(1u);
LABEL_120:
            __break(1u);
LABEL_121:
            __break(1u);
LABEL_122:
            __break(1u);
LABEL_123:
            __break(1u);
LABEL_124:
            __break(1u);
LABEL_125:
            __break(1u);
            goto LABEL_126;
          }
          v101 = *(_QWORD *)(a2 + 24);
          v102 = *(_QWORD *)(v101 + 16);
          if (v100 >= v102)
            goto LABEL_119;
          v103 = *(_QWORD *)(v99 + 8);
          if (v103 >= v102)
            goto LABEL_120;
          v104 = v101 + 32;
          v105 = vsubq_f64(*(float64x2_t *)(v101 + 32 + 16 * v100), a3);
          v106 = atan2(v105.f64[1], v105.f64[0]);
          v107 = vsubq_f64(*(float64x2_t *)(v104 + 16 * v103), a3);
          if (v106 >= atan2(v107.f64[1], v107.f64[0]))
            break;
          if (!v129)
            goto LABEL_152;
          v108 = *(_OWORD *)v99;
          v109 = *(_OWORD *)(v99 + 16);
          *(_OWORD *)(v99 + 16) = *(_OWORD *)(v99 + 56);
          v110 = v99 + 40;
          v111 = *(_BYTE *)(v99 + 72);
          v112 = *(_QWORD *)(v99 + 32);
          *(_QWORD *)v99 = *(_QWORD *)(v99 + 40);
          *(_QWORD *)(v99 + 8) = v100;
          *(_BYTE *)(v99 + 32) = v111;
          v99 -= 40;
          *(_OWORD *)v110 = v108;
          *(_OWORD *)(v110 + 16) = v109;
          ++v98;
          *(_QWORD *)(v110 + 32) = v112;
        }
        while (v12 != v98);
        ++v12;
        v97 += 40;
      }
      while (v12 != v126);
      v12 = v126;
      v14 = v127;
      if (v126 < v127)
        goto LABEL_142;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v130 = sub_214224E24(0, *((_QWORD *)v130 + 2) + 1, 1, v130);
    v46 = *((_QWORD *)v130 + 2);
    v45 = *((_QWORD *)v130 + 3);
    v47 = v46 + 1;
    if (v46 >= v45 >> 1)
      v130 = sub_214224E24((char *)(v45 > 1), v46 + 1, 1, v130);
    *((_QWORD *)v130 + 2) = v47;
    v48 = v130 + 32;
    v49 = &v130[16 * v46 + 32];
    *(_QWORD *)v49 = v14;
    *((_QWORD *)v49 + 1) = v12;
    if (v46)
    {
      while (1)
      {
        v50 = v47 - 1;
        if (v47 >= 4)
        {
          v55 = &v48[16 * v47];
          v56 = *((_QWORD *)v55 - 8);
          v57 = *((_QWORD *)v55 - 7);
          v61 = __OFSUB__(v57, v56);
          v58 = v57 - v56;
          if (v61)
            goto LABEL_127;
          v60 = *((_QWORD *)v55 - 6);
          v59 = *((_QWORD *)v55 - 5);
          v61 = __OFSUB__(v59, v60);
          v53 = v59 - v60;
          v54 = v61;
          if (v61)
            goto LABEL_128;
          v62 = v47 - 2;
          v63 = &v48[16 * v47 - 32];
          v65 = *(_QWORD *)v63;
          v64 = *((_QWORD *)v63 + 1);
          v61 = __OFSUB__(v64, v65);
          v66 = v64 - v65;
          if (v61)
            goto LABEL_129;
          v61 = __OFADD__(v53, v66);
          v67 = v53 + v66;
          if (v61)
            goto LABEL_131;
          if (v67 >= v58)
          {
            v85 = &v48[16 * v50];
            v87 = *(_QWORD *)v85;
            v86 = *((_QWORD *)v85 + 1);
            v61 = __OFSUB__(v86, v87);
            v88 = v86 - v87;
            if (v61)
              goto LABEL_137;
            v78 = v53 < v88;
            goto LABEL_79;
          }
        }
        else
        {
          if (v47 != 3)
          {
            v79 = *((_QWORD *)v130 + 4);
            v80 = *((_QWORD *)v130 + 5);
            v61 = __OFSUB__(v80, v79);
            v72 = v80 - v79;
            v73 = v61;
            goto LABEL_73;
          }
          v52 = *((_QWORD *)v130 + 4);
          v51 = *((_QWORD *)v130 + 5);
          v61 = __OFSUB__(v51, v52);
          v53 = v51 - v52;
          v54 = v61;
        }
        if ((v54 & 1) != 0)
          goto LABEL_130;
        v62 = v47 - 2;
        v68 = &v48[16 * v47 - 32];
        v70 = *(_QWORD *)v68;
        v69 = *((_QWORD *)v68 + 1);
        v71 = __OFSUB__(v69, v70);
        v72 = v69 - v70;
        v73 = v71;
        if (v71)
          goto LABEL_132;
        v74 = &v48[16 * v50];
        v76 = *(_QWORD *)v74;
        v75 = *((_QWORD *)v74 + 1);
        v61 = __OFSUB__(v75, v76);
        v77 = v75 - v76;
        if (v61)
          goto LABEL_134;
        if (__OFADD__(v72, v77))
          goto LABEL_136;
        if (v72 + v77 >= v53)
        {
          v78 = v53 < v77;
LABEL_79:
          if (v78)
            v50 = v62;
          goto LABEL_81;
        }
LABEL_73:
        if ((v73 & 1) != 0)
          goto LABEL_133;
        v81 = &v48[16 * v50];
        v83 = *(_QWORD *)v81;
        v82 = *((_QWORD *)v81 + 1);
        v61 = __OFSUB__(v82, v83);
        v84 = v82 - v83;
        if (v61)
          goto LABEL_135;
        if (v84 < v72)
          goto LABEL_90;
LABEL_81:
        v89 = v50 - 1;
        if (v50 - 1 >= v47)
          goto LABEL_121;
        v90 = v44;
        if (!v44)
          goto LABEL_153;
        v91 = a2;
        v92 = &v48[16 * v89];
        v93 = *(_QWORD *)v92;
        v94 = &v48[16 * v50];
        v95 = *((_QWORD *)v94 + 1);
        sub_21434FBFC((char *)(v90 + 40 * *(_QWORD *)v92), (char *)(v90 + 40 * *(_QWORD *)v94), v90 + 40 * v95, v128, v91, a3);
        if (v3)
          goto LABEL_117;
        if (v95 < v93)
          goto LABEL_122;
        if (v50 > *((_QWORD *)v130 + 2))
          goto LABEL_123;
        *(_QWORD *)v92 = v93;
        *(_QWORD *)&v48[16 * v89 + 8] = v95;
        v96 = *((_QWORD *)v130 + 2);
        if (v50 >= v96)
          goto LABEL_124;
        v47 = v96 - 1;
        memmove(&v48[16 * v50], v94 + 16, 16 * (v96 - 1 - v50));
        *((_QWORD *)v130 + 2) = v96 - 1;
        a2 = v91;
        v44 = v129;
        if (v96 <= 2)
          goto LABEL_90;
      }
    }
    v47 = 1;
LABEL_90:
    v13 = v125;
    if (v12 >= v125)
    {
      v11 = v123;
      goto LABEL_106;
    }
  }
  if (v12 >= v14)
  {
    if (v14 < v12)
    {
      v32 = 40 * v12;
      v33 = 40 * v14;
      v34 = v12;
      v35 = v14;
      while (1)
      {
        if (v35 != --v34)
        {
          if (!v129)
            goto LABEL_154;
          v36 = v129 + v33;
          v37 = *(_BYTE *)(v129 + v33 + 32);
          v38 = v129 + v32;
          v39 = *(_OWORD *)(v129 + v33);
          v40 = *(_OWORD *)(v129 + v33 + 16);
          v41 = *(_QWORD *)(v129 + v32 - 8);
          v42 = *(_OWORD *)(v129 + v32 - 24);
          *(_OWORD *)v36 = *(_OWORD *)(v129 + v32 - 40);
          *(_OWORD *)(v36 + 16) = v42;
          *(_QWORD *)(v36 + 32) = v41;
          *(_OWORD *)(v38 - 40) = v39;
          *(_OWORD *)(v38 - 24) = v40;
          *(_BYTE *)(v38 - 8) = v37;
        }
        ++v35;
        v32 -= 40;
        v33 += 40;
        if (v35 >= v34)
          goto LABEL_33;
      }
    }
    goto LABEL_33;
  }
LABEL_151:
  __break(1u);
LABEL_152:
  __break(1u);
LABEL_153:
  __break(1u);
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
}

uint64_t sub_21434F46C(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  double v13;
  double v14;
  double v15;
  double v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  double *v23;
  double v24;
  uint64_t v25;
  double *v26;
  double v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  unint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  BOOL v53;
  uint64_t v54;
  char v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t i;
  double v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  unint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  double *v98;

  v2 = a1;
  v3 = a1[1];
  result = sub_214425730();
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_137;
    if ((unint64_t)v3 >= 2)
    {
      v78 = 0;
      v79 = *v2;
      for (i = 1; i != v3; ++i)
      {
        v81 = *(double *)(v79 + 8 * i);
        v82 = v78;
        do
        {
          v83 = v79 + 8 * v82;
          if (v81 >= *(double *)v83)
            break;
          if (!v79)
            goto LABEL_141;
          *(_QWORD *)(v83 + 8) = *(_QWORD *)v83;
          *(double *)(v79 + 8 * v82--) = v81;
        }
        while (v82 != -1);
        ++v78;
      }
    }
  }
  else
  {
    if (v3 >= 0)
      v5 = v3;
    else
      v5 = v3 + 1;
    if (v3 < -1)
      goto LABEL_136;
    v95 = result;
    v96 = v3;
    if (v3 > 1)
    {
      v6 = v5 >> 1;
      result = sub_21442504C();
      *(_QWORD *)(result + 16) = v6;
      v3 = v96;
      v94 = result;
      v98 = (double *)(result + 32);
LABEL_13:
      v8 = 0;
      v9 = *v2;
      v92 = v2;
      v93 = *v2 - 8;
      v10 = MEMORY[0x24BEE4AF8];
      v97 = *v2;
      while (1)
      {
        v12 = v8++;
        if (v8 < v3)
        {
          v13 = *(double *)(v9 + 8 * v8);
          v14 = *(double *)(v9 + 8 * v12);
          v8 = v12 + 2;
          if (v12 + 2 < v3)
          {
            v15 = v13;
            while (1)
            {
              v16 = v15;
              v15 = *(double *)(v9 + 8 * v8);
              if (v13 < v14 == v15 >= v16)
                break;
              if (v3 == ++v8)
              {
                v8 = v3;
                break;
              }
            }
          }
          if (v13 < v14)
          {
            if (v8 < v12)
              goto LABEL_138;
            if (v12 < v8)
            {
              v17 = (uint64_t *)(v93 + 8 * v8);
              v18 = v8;
              v19 = v12;
              v20 = (uint64_t *)(v9 + 8 * v12);
              do
              {
                if (v19 != --v18)
                {
                  if (!v9)
                    goto LABEL_144;
                  v21 = *v20;
                  *v20 = *v17;
                  *v17 = v21;
                }
                ++v19;
                --v17;
                ++v20;
              }
              while (v19 < v18);
            }
          }
        }
        if (v8 < v3)
        {
          if (__OFSUB__(v8, v12))
            goto LABEL_135;
          if (v8 - v12 < v95)
          {
            v22 = v12 + v95;
            if (__OFADD__(v12, v95))
              goto LABEL_139;
            if (v22 >= v3)
              v22 = v3;
            if (v22 < v12)
            {
LABEL_140:
              __break(1u);
LABEL_141:
              __break(1u);
LABEL_142:
              __break(1u);
LABEL_143:
              __break(1u);
LABEL_144:
              __break(1u);
LABEL_145:
              __break(1u);
              return result;
            }
            if (v8 != v22)
            {
              v23 = (double *)(v93 + 8 * v8);
              do
              {
                v24 = *(double *)(v9 + 8 * v8);
                v25 = v12;
                v26 = v23;
                do
                {
                  v27 = *v26;
                  if (v24 >= *v26)
                    break;
                  if (!v9)
                    goto LABEL_142;
                  *v26 = v24;
                  v26[1] = v27;
                  --v26;
                  ++v25;
                }
                while (v8 != v25);
                ++v8;
                ++v23;
              }
              while (v8 != v22);
              v8 = v22;
            }
          }
        }
        if (v8 < v12)
          goto LABEL_130;
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          result = (uint64_t)sub_214224E24(0, *(_QWORD *)(v10 + 16) + 1, 1, (char *)v10);
          v10 = result;
        }
        v29 = *(_QWORD *)(v10 + 16);
        v28 = *(_QWORD *)(v10 + 24);
        v11 = v29 + 1;
        v9 = v97;
        if (v29 >= v28 >> 1)
        {
          result = (uint64_t)sub_214224E24((char *)(v28 > 1), v29 + 1, 1, (char *)v10);
          v9 = v97;
          v10 = result;
        }
        *(_QWORD *)(v10 + 16) = v11;
        v30 = v10 + 32;
        v31 = (uint64_t *)(v10 + 32 + 16 * v29);
        *v31 = v12;
        v31[1] = v8;
        if (v29)
        {
          while (1)
          {
            v32 = v11 - 1;
            if (v11 >= 4)
            {
              v37 = v30 + 16 * v11;
              v38 = *(_QWORD *)(v37 - 64);
              v39 = *(_QWORD *)(v37 - 56);
              v43 = __OFSUB__(v39, v38);
              v40 = v39 - v38;
              if (v43)
                goto LABEL_119;
              v42 = *(_QWORD *)(v37 - 48);
              v41 = *(_QWORD *)(v37 - 40);
              v43 = __OFSUB__(v41, v42);
              v35 = v41 - v42;
              v36 = v43;
              if (v43)
                goto LABEL_120;
              v44 = v11 - 2;
              v45 = (uint64_t *)(v30 + 16 * (v11 - 2));
              v47 = *v45;
              v46 = v45[1];
              v43 = __OFSUB__(v46, v47);
              v48 = v46 - v47;
              if (v43)
                goto LABEL_121;
              v43 = __OFADD__(v35, v48);
              v49 = v35 + v48;
              if (v43)
                goto LABEL_123;
              if (v49 >= v40)
              {
                v67 = (uint64_t *)(v30 + 16 * v32);
                v69 = *v67;
                v68 = v67[1];
                v43 = __OFSUB__(v68, v69);
                v70 = v68 - v69;
                if (v43)
                  goto LABEL_129;
                v60 = v35 < v70;
                goto LABEL_83;
              }
            }
            else
            {
              if (v11 != 3)
              {
                v61 = *(_QWORD *)(v10 + 32);
                v62 = *(_QWORD *)(v10 + 40);
                v43 = __OFSUB__(v62, v61);
                v54 = v62 - v61;
                v55 = v43;
                goto LABEL_77;
              }
              v34 = *(_QWORD *)(v10 + 32);
              v33 = *(_QWORD *)(v10 + 40);
              v43 = __OFSUB__(v33, v34);
              v35 = v33 - v34;
              v36 = v43;
            }
            if ((v36 & 1) != 0)
              goto LABEL_122;
            v44 = v11 - 2;
            v50 = (uint64_t *)(v30 + 16 * (v11 - 2));
            v52 = *v50;
            v51 = v50[1];
            v53 = __OFSUB__(v51, v52);
            v54 = v51 - v52;
            v55 = v53;
            if (v53)
              goto LABEL_124;
            v56 = (uint64_t *)(v30 + 16 * v32);
            v58 = *v56;
            v57 = v56[1];
            v43 = __OFSUB__(v57, v58);
            v59 = v57 - v58;
            if (v43)
              goto LABEL_126;
            if (__OFADD__(v54, v59))
              goto LABEL_128;
            if (v54 + v59 >= v35)
            {
              v60 = v35 < v59;
LABEL_83:
              if (v60)
                v32 = v44;
              goto LABEL_85;
            }
LABEL_77:
            if ((v55 & 1) != 0)
              goto LABEL_125;
            v63 = (uint64_t *)(v30 + 16 * v32);
            v65 = *v63;
            v64 = v63[1];
            v43 = __OFSUB__(v64, v65);
            v66 = v64 - v65;
            if (v43)
              goto LABEL_127;
            if (v66 < v54)
              goto LABEL_15;
LABEL_85:
            v71 = v32 - 1;
            if (v32 - 1 >= v11)
            {
              __break(1u);
LABEL_116:
              __break(1u);
LABEL_117:
              __break(1u);
LABEL_118:
              __break(1u);
LABEL_119:
              __break(1u);
LABEL_120:
              __break(1u);
LABEL_121:
              __break(1u);
LABEL_122:
              __break(1u);
LABEL_123:
              __break(1u);
LABEL_124:
              __break(1u);
LABEL_125:
              __break(1u);
LABEL_126:
              __break(1u);
LABEL_127:
              __break(1u);
LABEL_128:
              __break(1u);
LABEL_129:
              __break(1u);
LABEL_130:
              __break(1u);
LABEL_131:
              __break(1u);
LABEL_132:
              __break(1u);
LABEL_133:
              __break(1u);
LABEL_134:
              __break(1u);
LABEL_135:
              __break(1u);
LABEL_136:
              __break(1u);
LABEL_137:
              __break(1u);
LABEL_138:
              __break(1u);
LABEL_139:
              __break(1u);
              goto LABEL_140;
            }
            if (!v9)
              goto LABEL_143;
            v72 = (uint64_t *)(v30 + 16 * v71);
            v73 = *v72;
            v74 = v30;
            v75 = (_QWORD *)(v30 + 16 * v32);
            v76 = v75[1];
            result = sub_21434FF0C((double *)(v9 + 8 * *v72), (double *)(v9 + 8 * *v75), v9 + 8 * v76, v98);
            if (v1)
              goto LABEL_113;
            if (v76 < v73)
              goto LABEL_116;
            if (v32 > *(_QWORD *)(v10 + 16))
              goto LABEL_117;
            *v72 = v73;
            *(_QWORD *)(v74 + 16 * v71 + 8) = v76;
            v77 = *(_QWORD *)(v10 + 16);
            if (v32 >= v77)
              goto LABEL_118;
            v11 = v77 - 1;
            result = (uint64_t)memmove(v75, v75 + 2, 16 * (v77 - 1 - v32));
            v30 = v74;
            *(_QWORD *)(v10 + 16) = v77 - 1;
            v9 = v97;
            if (v77 <= 2)
              goto LABEL_15;
          }
        }
        v11 = 1;
LABEL_15:
        v3 = v96;
        if (v8 >= v96)
        {
          v7 = v94;
          v2 = v92;
          goto LABEL_102;
        }
      }
    }
    v7 = MEMORY[0x24BEE4AF8];
    v98 = (double *)(MEMORY[0x24BEE4AF8] + 32);
    if (v3 == 1)
    {
      v94 = MEMORY[0x24BEE4AF8];
      goto LABEL_13;
    }
    v11 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
    v10 = MEMORY[0x24BEE4AF8];
LABEL_102:
    v94 = v7;
    if (v11 >= 2)
    {
      v84 = *v2;
      do
      {
        v85 = v11 - 2;
        if (v11 < 2)
          goto LABEL_131;
        if (!v84)
          goto LABEL_145;
        v86 = v10;
        v87 = v10 + 32;
        v88 = *(_QWORD *)(v10 + 32 + 16 * v85);
        v89 = *(_QWORD *)(v10 + 32 + 16 * (v11 - 1) + 8);
        result = sub_21434FF0C((double *)(v84 + 8 * v88), (double *)(v84 + 8 * *(_QWORD *)(v87 + 16 * (v11 - 1))), v84 + 8 * v89, v98);
        if (v1)
          break;
        if (v89 < v88)
          goto LABEL_132;
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          result = (uint64_t)sub_21435010C(v86);
          v86 = result;
        }
        if (v85 >= *(_QWORD *)(v86 + 16))
          goto LABEL_133;
        v90 = (_QWORD *)(v86 + 32 + 16 * v85);
        *v90 = v88;
        v90[1] = v89;
        v91 = *(_QWORD *)(v86 + 16);
        if (v11 > v91)
          goto LABEL_134;
        result = (uint64_t)memmove((void *)(v86 + 32 + 16 * (v11 - 1)), (const void *)(v86 + 32 + 16 * v11), 16 * (v91 - v11));
        v10 = v86;
        *(_QWORD *)(v86 + 16) = v91 - 1;
        v11 = v91 - 1;
      }
      while (v91 > 2);
    }
LABEL_113:
    swift_bridgeObjectRelease();
    *(_QWORD *)(v94 + 16) = 0;
    return swift_bridgeObjectRelease();
  }
  return result;
}

void sub_21434FAB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, float64x2_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  float64x2_t v17;
  double v18;
  float64x2_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  char v23;
  uint64_t v24;

  if (a3 != a2)
  {
    v7 = a3;
    v8 = *a4;
    v9 = *a4 + 40 * a3 - 40;
LABEL_5:
    v10 = a1;
    v11 = v9;
    while (1)
    {
      v12 = *(_QWORD *)(v11 + 48);
      if ((v12 & 0x8000000000000000) != 0)
        break;
      v13 = *(_QWORD *)(a5 + 24);
      v14 = *(_QWORD *)(v13 + 16);
      if (v12 >= v14)
        goto LABEL_14;
      v15 = *(_QWORD *)(v11 + 8);
      if (v15 >= v14)
        goto LABEL_15;
      v16 = v13 + 32;
      v17 = vsubq_f64(*(float64x2_t *)(v13 + 32 + 16 * v12), a6);
      v18 = atan2(v17.f64[1], v17.f64[0]);
      v19 = vsubq_f64(*(float64x2_t *)(v16 + 16 * v15), a6);
      if (v18 < atan2(v19.f64[1], v19.f64[0]))
      {
        if (!v8)
          goto LABEL_16;
        v20 = *(_OWORD *)v11;
        v21 = *(_OWORD *)(v11 + 16);
        *(_OWORD *)(v11 + 16) = *(_OWORD *)(v11 + 56);
        v22 = v11 + 40;
        v23 = *(_BYTE *)(v11 + 72);
        v24 = *(_QWORD *)(v11 + 32);
        *(_QWORD *)v11 = *(_QWORD *)(v11 + 40);
        *(_QWORD *)(v11 + 8) = v12;
        *(_BYTE *)(v11 + 32) = v23;
        v11 -= 40;
        *(_OWORD *)v22 = v20;
        *(_OWORD *)(v22 + 16) = v21;
        ++v10;
        *(_QWORD *)(v22 + 32) = v24;
        if (v7 != v10)
          continue;
      }
      ++v7;
      v9 += 40;
      if (v7 == a2)
        return;
      goto LABEL_5;
    }
    __break(1u);
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
  }
}

void sub_21434FBFC(char *__dst, char *__src, unint64_t a3, char *a4, uint64_t a5, float64x2_t a6)
{
  char *v7;
  char *v9;
  char *v10;
  int64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  float64x2_t v22;
  double v23;
  float64x2_t v24;
  char *v25;
  char *v26;
  char *v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  float64x2_t v38;
  double v39;
  float64x2_t v40;
  char *v41;
  BOOL v42;
  __int128 v43;
  __int128 v44;
  size_t v45;

  v7 = a4;
  v9 = __src;
  v10 = __dst;
  v11 = __src - __dst;
  v12 = (__src - __dst) / 40;
  v13 = a3 - (_QWORD)__src;
  v14 = (uint64_t)(a3 - (_QWORD)__src) / 40;
  if (v12 < v14)
  {
    v15 = 40 * v12;
    if (a4 != __dst || &__dst[v15] <= a4)
      memmove(a4, __dst, v15);
    v16 = &v7[v15];
    if ((unint64_t)v9 < a3 && v11 >= 40)
    {
      while (1)
      {
        v17 = *((_QWORD *)v9 + 1);
        if ((v17 & 0x8000000000000000) != 0)
        {
          __break(1u);
LABEL_50:
          __break(1u);
LABEL_51:
          __break(1u);
LABEL_52:
          __break(1u);
          goto LABEL_53;
        }
        v18 = *(_QWORD *)(a5 + 24);
        v19 = *(_QWORD *)(v18 + 16);
        if (v17 >= v19)
          goto LABEL_50;
        v20 = *((_QWORD *)v7 + 1);
        if (v20 >= v19)
          goto LABEL_51;
        v21 = v18 + 32;
        v22 = vsubq_f64(*(float64x2_t *)(v18 + 32 + 16 * v17), a6);
        v23 = atan2(v22.f64[1], v22.f64[0]);
        v24 = vsubq_f64(*(float64x2_t *)(v21 + 16 * v20), a6);
        if (v23 >= atan2(v24.f64[1], v24.f64[0]))
        {
          v27 = v7 + 40;
          v26 = v7;
          v25 = v9;
          if (v10 == v7)
          {
            v7 += 40;
            if (v10 < v27)
              goto LABEL_19;
          }
          else
          {
            v7 += 40;
          }
        }
        else
        {
          v25 = v9 + 40;
          v26 = v9;
          if (v10 == v9 && v10 < v25)
            goto LABEL_19;
        }
        v28 = *(_OWORD *)v26;
        v29 = *((_OWORD *)v26 + 1);
        *((_QWORD *)v10 + 4) = *((_QWORD *)v26 + 4);
        *(_OWORD *)v10 = v28;
        *((_OWORD *)v10 + 1) = v29;
LABEL_19:
        v10 += 40;
        if (v7 < v16)
        {
          v9 = v25;
          if ((unint64_t)v25 < a3)
            continue;
        }
        break;
      }
    }
    v9 = v10;
LABEL_45:
    v45 = 40 * ((v16 - v7) / 40);
    if (v9 != v7 || v9 >= &v7[v45])
      memmove(v9, v7, v45);
    return;
  }
  v30 = 40 * v14;
  if (a4 != __src || &__src[v30] <= a4)
    memmove(a4, __src, 40 * v14);
  v16 = &v7[v30];
  if (v10 >= v9 || v13 < 40)
    goto LABEL_45;
  v31 = a3 - 40;
  while (1)
  {
    v32 = *((_QWORD *)v16 - 4);
    if ((v32 & 0x8000000000000000) != 0)
      goto LABEL_52;
    v33 = *(_QWORD *)(a5 + 24);
    v34 = *(_QWORD *)(v33 + 16);
    if (v32 >= v34)
      break;
    v35 = *((_QWORD *)v9 - 4);
    if (v35 >= v34)
      goto LABEL_54;
    v36 = (char *)(v31 + 40);
    v37 = v33 + 32;
    v38 = vsubq_f64(*(float64x2_t *)(v33 + 32 + 16 * v32), a6);
    v39 = atan2(v38.f64[1], v38.f64[0]);
    v40 = vsubq_f64(*(float64x2_t *)(v37 + 16 * v35), a6);
    if (v39 >= atan2(v40.f64[1], v40.f64[0]))
    {
      v41 = v16 - 40;
      if (v36 != v16)
      {
        v16 -= 40;
        goto LABEL_42;
      }
      v42 = v31 >= (unint64_t)v16;
      v16 -= 40;
      if (v42)
        goto LABEL_42;
    }
    else
    {
      v41 = v9 - 40;
      if (v36 != v9)
      {
        v9 -= 40;
LABEL_42:
        v43 = *(_OWORD *)v41;
        v44 = *((_OWORD *)v41 + 1);
        *(_QWORD *)(v31 + 32) = *((_QWORD *)v41 + 4);
        *(_OWORD *)v31 = v43;
        *(_OWORD *)(v31 + 16) = v44;
        goto LABEL_43;
      }
      v42 = v31 >= (unint64_t)v9;
      v9 -= 40;
      if (v42)
        goto LABEL_42;
    }
LABEL_43:
    if (v9 > v10)
    {
      v31 -= 40;
      if (v16 > v7)
        continue;
    }
    goto LABEL_45;
  }
LABEL_53:
  __break(1u);
LABEL_54:
  __break(1u);
}

uint64_t sub_21434FF0C(double *__dst, double *__src, unint64_t a3, double *a4)
{
  double *v4;
  double *v6;
  double *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double *v14;
  double v15;
  BOOL v16;
  double *v17;
  double *v18;
  double *v19;
  double v20;
  double v21;
  int64_t v23;

  v4 = a4;
  v6 = __src;
  v7 = __dst;
  v8 = (char *)__src - (char *)__dst;
  v9 = (char *)__src - (char *)__dst + 7;
  if ((char *)__src - (char *)__dst >= 0)
    v9 = (char *)__src - (char *)__dst;
  v10 = v9 >> 3;
  v11 = a3 - (_QWORD)__src;
  v12 = a3 - (_QWORD)__src + 7;
  if ((uint64_t)(a3 - (_QWORD)__src) >= 0)
    v12 = a3 - (_QWORD)__src;
  v13 = v12 >> 3;
  if (v10 >= v12 >> 3)
  {
    if (a4 != __src || &__src[v13] <= a4)
      memmove(a4, __src, 8 * v13);
    v14 = &v4[v13];
    if (v7 >= v6 || v11 < 8)
      goto LABEL_39;
    v17 = (double *)(a3 - 8);
    v18 = v6;
    while (1)
    {
      v19 = v17 + 1;
      v20 = *--v18;
      v21 = v20;
      if (*(v14 - 1) < v20)
        break;
      v21 = *(v14 - 1);
      v18 = v6;
      if (v19 != v14)
      {
        --v14;
LABEL_35:
        *v17 = v21;
        goto LABEL_36;
      }
      if (v17 >= v14--)
        goto LABEL_35;
LABEL_36:
      if (v18 > v7)
      {
        --v17;
        v6 = v18;
        if (v14 > v4)
          continue;
      }
      v6 = v18;
      goto LABEL_39;
    }
    if (v19 == v6 && v17 < v6)
      goto LABEL_36;
    goto LABEL_35;
  }
  if (a4 != __dst || &__dst[v10] <= a4)
    memmove(a4, __dst, 8 * v10);
  v14 = &v4[v10];
  if ((unint64_t)v6 < a3 && v8 >= 8)
  {
    while (1)
    {
      v15 = *v6;
      if (*v6 >= *v4)
        break;
      v16 = v7 == v6++;
      if (!v16)
        goto LABEL_16;
LABEL_17:
      ++v7;
      if (v4 >= v14 || (unint64_t)v6 >= a3)
        goto LABEL_19;
    }
    v15 = *v4;
    v16 = v7 == v4++;
    if (v16)
      goto LABEL_17;
LABEL_16:
    *v7 = v15;
    goto LABEL_17;
  }
LABEL_19:
  v6 = v7;
LABEL_39:
  v23 = (char *)v14 - (char *)v4 + ((char *)v14 - (char *)v4 < 0 ? 7uLL : 0);
  if (v6 != v4 || v6 >= (double *)((char *)v4 + (v23 & 0xFFFFFFFFFFFFFFF8)))
    memmove(v6, v4, 8 * (v23 >> 3));
  return 1;
}

char *sub_21435010C(uint64_t a1)
{
  return sub_214224E24(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

char *sub_214350120(uint64_t a1)
{
  return sub_2141D44E0(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

char *sub_214350134(uint64_t a1)
{
  return sub_2141D4BF0(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

char *sub_214350148(uint64_t a1)
{
  return sub_2141D530C(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

char *sub_21435015C(uint64_t a1)
{
  return sub_2141D5B48(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

char *sub_214350170(uint64_t a1)
{
  return sub_2141D5C5C(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

_QWORD *sub_214350184(_QWORD *a1)
{
  return sub_2141D60AC(0, a1[2], 0, a1);
}

_QWORD *sub_214350198(_QWORD *a1)
{
  return sub_2141D62E8(0, a1[2], 0, a1);
}

_QWORD *sub_2143501AC(_QWORD *a1)
{
  return sub_2141D6AB0(0, a1[2], 0, a1);
}

size_t sub_2143501C0(_QWORD *a1)
{
  return sub_2141D4CE8(0, a1[2], 0, a1);
}

uint64_t sub_2143501D4(uint64_t a1, void (*a2)(uint64_t, __n128))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  unint64_t v10;
  unint64_t v11;
  _OWORD *v12;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  v17 = MEMORY[0x24BEE4AF8];
  sub_2141D3C20(0, 0, 0);
  v4 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain();
  if (v4)
  {
    v5 = 0;
    v6 = a1 + 32;
    do
    {
      a2(v5, *(__n128 *)(v6 + 16 * v5));
      v11 = *(_QWORD *)(v17 + 16);
      v10 = *(_QWORD *)(v17 + 24);
      if (v11 >= v10 >> 1)
      {
        v15 = v8;
        v16 = v7;
        v14 = v9;
        sub_2141D3C20((char *)(v10 > 1), v11 + 1, 1);
        v9 = v14;
        v8 = v15;
        v7 = v16;
      }
      ++v5;
      *(_QWORD *)(v17 + 16) = v11 + 1;
      v12 = (_OWORD *)(v17 + 48 * v11);
      v12[2] = v7;
      v12[3] = v8;
      v12[4] = v9;
    }
    while (v4 != v5);
  }
  swift_bridgeObjectRelease();
  return v17;
}

uint64_t sub_2143502E4(double a1, double a2)
{
  double v2;
  uint64_t result;
  double v4;

  v2 = a1 / a2;
  if ((~*(_QWORD *)&v2 & 0x7FF0000000000000) == 0)
    return 0;
  v4 = floor(v2);
  if ((~*(_QWORD *)&v4 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (v4 <= -9.22337204e18)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 9.22337204e18)
    return (uint64_t)v4;
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_214350348(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char *v21;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  char v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  char *v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v40;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  float64x2_t v46;
  float64x2_t v47;
  uint64_t v48;
  float64x2_t v49;
  double v50;
  double v51;
  unint64_t v52;
  char *v53;
  double v54;
  uint64_t v55;
  double v56;
  uint64_t v57;
  double v58;
  unint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  float64x2_t *v63;
  float64x2_t v64;
  double v65;
  double v66;
  unint64_t v68;
  unint64_t v69;
  double v70;
  uint64_t v71;
  double v72;
  double v73;
  uint64_t v74;
  double v75;
  double v76;
  uint64_t v77;
  double v78;
  void (*v79)(_QWORD *@<X8>);
  char *v80;
  uint64_t v81;
  char v82;
  char v83;
  uint64_t v84;
  _BOOL8 v85;
  uint64_t v86;
  char v87;
  unint64_t v88;
  char v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  char v94;
  unint64_t v95;
  char *v96;
  BOOL v97;
  char *v98;
  char *v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  char *v103;
  uint64_t v104;
  char *v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  const double *v111;
  float64x2_t v112;
  unint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  char *v116;
  uint64_t result;
  _QWORD *v118;
  _QWORD *v119;
  _QWORD *v120;
  char *v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  uint64_t v126;
  float64x2_t v127;
  _QWORD *v128;
  uint64_t v129;
  char **v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  float64_t v134;
  float64x2_t v135;
  float64x2_t v136;
  uint64_t v137;
  float64x2_t v138;
  char *v139;
  unint64_t v140;
  float64x2_t v141;
  uint64_t v142;
  unint64_t v143;
  unint64_t v144;
  _QWORD *v145;
  unint64_t v146;
  uint64_t v147;
  unint64_t v148;
  char v149;
  double v150;
  double v151;
  char *v152;
  unint64_t v153;
  _QWORD *v154;
  _QWORD *v155;
  _QWORD v156[8];
  float64x2_t v157[3];
  char *v158;

  v1 = MEMORY[0x24BEE4AF8];
  v154 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v155 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    v1 = a1 + 32;
    v3 = MEMORY[0x24BEE4AF8];
    v133 = (char *)MEMORY[0x24BEE4AF8];
    while (1)
    {
      MEMORY[0x24BDAC7A8](a1);
      v4 = swift_bridgeObjectRetain();
      v5 = sub_2143501D4(v4, (void (*)(uint64_t, __n128))sub_2143511D0);
      swift_bridgeObjectRelease();
      v6 = v155[2];
      v7 = *(_QWORD *)(v5 + 16);
      v8 = v6 + v7;
      if (__OFADD__(v6, v7))
        break;
      if (v8 < v6)
        goto LABEL_165;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        v9 = v133;
      else
        v9 = sub_214224E24(0, *((_QWORD *)v133 + 2) + 1, 1, v133);
      v11 = *((_QWORD *)v9 + 2);
      v10 = *((_QWORD *)v9 + 3);
      if (v11 >= v10 >> 1)
        v9 = sub_214224E24((char *)(v10 > 1), v11 + 1, 1, v9);
      *((_QWORD *)v9 + 2) = v11 + 1;
      v133 = v9;
      v12 = &v9[16 * v11];
      *((_QWORD *)v12 + 4) = v6;
      *((_QWORD *)v12 + 5) = v8;
      sub_2143EAB54(v5);
      a1 = sub_2143EAC3C(v7, v3);
      v1 += 8;
      if (!--v2)
      {
        v2 = (unint64_t)v155;
        v1 = MEMORY[0x24BEE4AF8];
        goto LABEL_13;
      }
    }
    __break(1u);
LABEL_165:
    __break(1u);
LABEL_166:
    __break(1u);
LABEL_167:
    __break(1u);
  }
  else
  {
    v2 = MEMORY[0x24BEE4AF8];
    v133 = (char *)MEMORY[0x24BEE4AF8];
LABEL_13:
    v13 = swift_bridgeObjectRetain();
    v14 = sub_2143C9840(v13);
    swift_bridgeObjectRelease();
    v15 = *(_QWORD *)(v14 + 16);
    v128 = (_QWORD *)v2;
    if (!v15)
    {
      swift_bridgeObjectRelease();
LABEL_33:
      if (qword_253F11F50 == -1)
        goto LABEL_34;
      goto LABEL_173;
    }
    v16 = v154;
    v2 = v14 + 56;
    while (1)
    {
      v17 = *(_QWORD *)(v2 - 24);
      v1 = *(_QWORD *)(v2 - 16);
      v19 = *(_QWORD *)(v2 - 8);
      v18 = *(_QWORD *)v2;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      {
        if ((v17 & 0x8000000000000000) != 0)
          goto LABEL_166;
      }
      else
      {
        v16 = sub_21434EB48(v16);
        if ((v17 & 0x8000000000000000) != 0)
          goto LABEL_166;
      }
      if (v17 >= v16[2])
        goto LABEL_167;
      v20 = v16 + 4;
      v21 = (char *)v16[v17 + 4];
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v16[v17 + 4] = v21;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v21 = sub_214224AE0(0, *((_QWORD *)v21 + 2) + 1, 1, v21);
        v20[v17] = v21;
      }
      v24 = *((_QWORD *)v21 + 2);
      v23 = *((_QWORD *)v21 + 3);
      if (v24 >= v23 >> 1)
      {
        v21 = sub_214224AE0((char *)(v23 > 1), v24 + 1, 1, v21);
        v20[v17] = v21;
      }
      *((_QWORD *)v21 + 2) = v24 + 1;
      *(_QWORD *)&v21[8 * v24 + 32] = v19;
      if ((v1 & 0x8000000000000000) != 0)
        break;
      if (v1 >= v16[2])
        goto LABEL_169;
      v25 = (char *)v20[v1];
      v26 = swift_isUniquelyReferenced_nonNull_native();
      v20[v1] = v25;
      if ((v26 & 1) == 0)
      {
        v25 = sub_214224AE0(0, *((_QWORD *)v25 + 2) + 1, 1, v25);
        v20[v1] = v25;
      }
      v28 = *((_QWORD *)v25 + 2);
      v27 = *((_QWORD *)v25 + 3);
      if (v28 >= v27 >> 1)
      {
        v25 = sub_214224AE0((char *)(v27 > 1), v28 + 1, 1, v25);
        v20[v1] = v25;
      }
      *((_QWORD *)v25 + 2) = v28 + 1;
      *(_QWORD *)&v25[8 * v28 + 32] = v18;
      v2 += 32;
      if (!--v15)
      {
        swift_bridgeObjectRelease();
        v154 = v16;
        v1 = MEMORY[0x24BEE4AF8];
        v2 = (unint64_t)v128;
        goto LABEL_33;
      }
    }
  }
  __break(1u);
LABEL_169:
  __break(1u);
LABEL_170:
  __break(1u);
  while (2)
  {
    __break(1u);
LABEL_172:
    __break(1u);
LABEL_173:
    swift_once();
LABEL_34:
    v137 = qword_253F1C988;
    v29 = sub_21436CCE8((_QWORD *)v1);
    v150 = *(double *)&v137;
    v151 = 0.01;
    v152 = (char *)v1;
    v153 = v29;
    v122 = *((_QWORD *)v133 + 2);
    if (!v122)
    {
      v111 = (const double *)&qword_21442D710;
      v112 = vld1q_dup_f64(v111);
      *(_QWORD *)&v112.f64[0] = v137;
      v113 = v1;
      v114 = (_QWORD *)v1;
LABEL_159:
      v140 = (unint64_t)v114;
      v141 = v112;
      v142 = v113;
      v143 = v29;
      v144 = v1;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_21434DC64();
      sub_21434E308();
      v115 = sub_21434D78C();
      v116 = sub_21434CA70(v115, (uint64_t)&v150);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return (uint64_t)v116;
    }
    v30 = (unint64_t)&v150;
    v31 = (_QWORD *)(v2 + 32);
    v32 = v154;
    v125 = v154 + 4;
    v33 = v133;
    swift_bridgeObjectRetain();
    v34 = 0;
    v118 = (_QWORD *)v1;
    while (1)
    {
      if (v34 >= *((_QWORD *)v33 + 2))
      {
        __break(1u);
LABEL_175:
        __break(1u);
LABEL_176:
        __break(1u);
LABEL_177:
        __break(1u);
LABEL_178:
        __break(1u);
LABEL_179:
        __break(1u);
LABEL_180:
        __break(1u);
LABEL_181:
        __break(1u);
LABEL_182:
        __break(1u);
LABEL_183:
        __break(1u);
LABEL_184:
        __break(1u);
LABEL_185:
        __break(1u);
        goto LABEL_186;
      }
      v35 = (unint64_t *)&v133[16 * v34 + 32];
      v36 = *v35;
      if ((*v35 & 0x8000000000000000) != 0)
        goto LABEL_175;
      v37 = v35[1];
      v38 = *(_QWORD *)(v2 + 16);
      if (v38 < v36 || (uint64_t)v38 < (uint64_t)v37)
        goto LABEL_176;
      if ((v37 & 0x8000000000000000) != 0)
        goto LABEL_177;
      v40 = v32[2];
      if (v40 < v36 || v40 < v37)
        goto LABEL_178;
      v123 = v34;
      v42 = (2 * v37) | 1;
      v129 = swift_allocObject();
      *(_QWORD *)(v129 + 16) = v1;
      v130 = (char **)(v129 + 16);
      v140 = v2;
      *(_QWORD *)&v141.f64[0] = v31;
      *(_QWORD *)&v141.f64[1] = v36;
      v142 = v42;
      v143 = v36;
      v144 = (unint64_t)v32;
      v145 = v125;
      v146 = v36;
      v147 = v42;
      v148 = v36;
      v149 = 0;
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      sub_21434CC2C(v156);
      sub_2141E801C((uint64_t)v156, (uint64_t)v157, &qword_253F103B0);
      v43 = v158;
      if (v158)
        break;
LABEL_142:
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      swift_beginAccess();
      v105 = *v130;
      v106 = *((_QWORD *)*v130 + 2);
      if (!v106)
        goto LABEL_153;
      v107 = v123;
      if (*((_QWORD *)v105 + 4) == *(_QWORD *)&v105[8 * v106 + 24])
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
          v108 = *((_QWORD *)v105 + 2);
          if (!v108)
            goto LABEL_197;
        }
        else
        {
          v105 = sub_21434EB34((uint64_t)v105);
          v108 = *((_QWORD *)v105 + 2);
          if (!v108)
            goto LABEL_197;
        }
        *((_QWORD *)v105 + 2) = v108 - 1;
        *v130 = v105;
        v106 = *((_QWORD *)v105 + 2);
      }
      if (v106 >= 3)
      {
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v118 = sub_214224ACC(0, v118[2] + 1, 1, v118);
        v110 = v118[2];
        v109 = v118[3];
        if (v110 >= v109 >> 1)
          v118 = sub_214224ACC((_QWORD *)(v109 > 1), v110 + 1, 1, v118);
        v118[2] = v110 + 1;
        v118[v110 + 4] = v105;
LABEL_153:
        v107 = v123;
      }
      v34 = v107 + 1;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      v33 = v133;
      if (v34 == v122)
        goto LABEL_163;
    }
    v119 = v32;
    v120 = v31;
    while (1)
    {
      v127 = v157[1];
      v136 = v157[0];
      v44 = sub_21434D2DC(v157[0]);
      sub_21434D694(v44, v129);
      v139 = v43;
      swift_bridgeObjectRetain();
      sub_21434D0D4(&v139);
      sub_21435122C((uint64_t)v156);
      v124 = *((_QWORD *)v139 + 2);
      if (v124)
        break;
LABEL_141:
      swift_release();
      v104 = sub_21434D2DC(v127);
      sub_21434D694(v104, v129);
      sub_21434CC2C(v156);
      sub_2141E801C((uint64_t)v156, (uint64_t)v157, &qword_253F103B0);
      v43 = v158;
      if (!v158)
        goto LABEL_142;
    }
    v45 = v139 + 32;
    v135 = vsubq_f64(v127, v136);
    swift_beginAccess();
    v47 = v135;
    v46 = v136;
    v48 = 0;
    v121 = v45;
    while (1)
    {
      v49 = vaddq_f64(v46, vmulq_n_f64(v47, *(double *)&v45[8 * v48]));
      v50 = v150;
      v51 = v151;
      v53 = v152;
      v52 = v153;
      v138 = v49;
      v54 = v49.f64[0] / v151;
      if ((~*(_QWORD *)&v54 & 0x7FF0000000000000) != 0)
      {
        v56 = floor(v54);
        if ((~*(_QWORD *)&v56 & 0x7FF0000000000000) == 0)
          goto LABEL_179;
        if (v56 <= -9.22337204e18)
          goto LABEL_180;
        if (v56 >= 9.22337204e18)
          goto LABEL_182;
        v55 = (uint64_t)v56;
      }
      else
      {
        v55 = 0;
      }
      if ((~COERCE__INT64(v138.f64[1] / v151) & 0x7FF0000000000000) != 0)
      {
        v58 = floor(v138.f64[1] / v151);
        if ((~*(_QWORD *)&v58 & 0x7FF0000000000000) == 0)
          goto LABEL_181;
        if (v58 <= -9.22337204e18)
          goto LABEL_183;
        if (v58 >= 9.22337204e18)
          goto LABEL_184;
        v57 = (uint64_t)v58;
      }
      else
      {
        v57 = 0;
      }
      v126 = v48;
      if (!*(_QWORD *)(v153 + 16))
        break;
      v59 = sub_214336E90(v55, v57);
      if ((v60 & 1) == 0)
        break;
      v61 = *(_QWORD *)(*(_QWORD *)(v52 + 56) + 8 * v59);
      v62 = *(_QWORD *)(v61 + 16);
      if (!v62)
        break;
      v63 = (float64x2_t *)(v61 + 48);
      while (1)
      {
        v64 = vsubq_f64(v138, v63[-1]);
        v65 = fabs(v64.f64[0]);
        v66 = fabs(v64.f64[1]);
        if (v65 < v50 && v66 < v50)
          break;
        v63 += 2;
        if (!--v62)
          goto LABEL_73;
      }
      v134 = v63->f64[0];
      v47 = v135;
      v46 = v136;
LABEL_131:
      v99 = *v130;
      v100 = *((_QWORD *)*v130 + 2);
      if (!v100 || *(_QWORD *)&v99[8 * v100 + 24] != *(_QWORD *)&v134)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v99 = sub_214224894(0, *((_QWORD *)v99 + 2) + 1, 1, v99);
        v102 = *((_QWORD *)v99 + 2);
        v101 = *((_QWORD *)v99 + 3);
        v47 = v135;
        v46 = v136;
        if (v102 >= v101 >> 1)
        {
          v103 = sub_214224894((char *)(v101 > 1), v102 + 1, 1, v99);
          v47 = v135;
          v46 = v136;
          v99 = v103;
        }
        *((_QWORD *)v99 + 2) = v102 + 1;
        *(float64_t *)&v99[8 * v102 + 32] = v134;
        *v130 = v99;
        v48 = v126;
      }
      ++v48;
      v45 = v121;
      if (v48 == v124)
        goto LABEL_141;
    }
LABEL_73:
    v134 = *((double *)v53 + 2);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v53 = sub_214224144(0, *(_QWORD *)&v134 + 1, 1, v53);
    v69 = *((_QWORD *)v53 + 2);
    v68 = *((_QWORD *)v53 + 3);
    if (v69 >= v68 >> 1)
      v53 = sub_214224144((char *)(v68 > 1), v69 + 1, 1, v53);
    *((_QWORD *)v53 + 2) = v69 + 1;
    *(float64x2_t *)&v53[16 * v69 + 32] = v138;
    v152 = v53;
    v70 = (v138.f64[0] - v50) / v51;
    if ((~*(_QWORD *)&v70 & 0x7FF0000000000000) == 0)
    {
      v71 = 0;
      goto LABEL_83;
    }
    v72 = floor(v70);
    if ((~*(_QWORD *)&v72 & 0x7FF0000000000000) == 0)
      goto LABEL_185;
    if (v72 <= -9.22337204e18)
    {
LABEL_186:
      __break(1u);
      goto LABEL_187;
    }
    if (v72 >= 9.22337204e18)
    {
LABEL_188:
      __break(1u);
      goto LABEL_189;
    }
    v71 = (uint64_t)v72;
LABEL_83:
    v73 = (v50 + v138.f64[0]) / v51;
    if ((~*(_QWORD *)&v73 & 0x7FF0000000000000) == 0)
    {
      v74 = 0;
      goto LABEL_89;
    }
    v75 = floor(v73);
    if ((~*(_QWORD *)&v75 & 0x7FF0000000000000) == 0)
    {
LABEL_187:
      __break(1u);
      goto LABEL_188;
    }
    if (v75 <= -9.22337204e18)
    {
LABEL_189:
      __break(1u);
      goto LABEL_190;
    }
    if (v75 >= 9.22337204e18)
    {
LABEL_190:
      __break(1u);
LABEL_191:
      __break(1u);
      goto LABEL_192;
    }
    v74 = (uint64_t)v75;
LABEL_89:
    if (v74 < v71)
      continue;
    break;
  }
  if ((~COERCE__INT64((v138.f64[1] - v50) / v51) & 0x7FF0000000000000) == 0)
  {
    v132 = 0;
    goto LABEL_96;
  }
  v76 = floor((v138.f64[1] - v50) / v51);
  if ((~*(_QWORD *)&v76 & 0x7FF0000000000000) == 0)
    goto LABEL_191;
  if (v76 <= -9.22337204e18)
  {
LABEL_192:
    __break(1u);
    goto LABEL_193;
  }
  if (v76 >= 9.22337204e18)
  {
LABEL_194:
    __break(1u);
    goto LABEL_195;
  }
  v132 = (uint64_t)v76;
LABEL_96:
  if ((~COERCE__INT64((v50 + v138.f64[1]) / v51) & 0x7FF0000000000000) == 0)
  {
    v77 = 0;
LABEL_102:
    if (v77 < v132)
      goto LABEL_172;
    v79 = 0;
    v80 = (char *)v153;
    v131 = v74;
LABEL_104:
    v81 = v132;
    while (1)
    {
      sub_2141D972C((uint64_t)v79);
      v82 = swift_isUniquelyReferenced_nonNull_native();
      v139 = v80;
      v30 = sub_214336E90(v71, v81);
      v84 = *((_QWORD *)v80 + 2);
      v85 = (v83 & 1) == 0;
      v86 = v84 + v85;
      if (__OFADD__(v84, v85))
        break;
      v87 = v83;
      if (*((_QWORD *)v80 + 3) >= v86)
      {
        if ((v82 & 1) == 0)
          sub_2142A9394();
      }
      else
      {
        sub_21429F108(v86, v82);
        v88 = sub_214336E90(v71, v81);
        if ((v87 & 1) != (v89 & 1))
          goto LABEL_198;
        v30 = v88;
      }
      v80 = v139;
      swift_bridgeObjectRelease();
      if ((v87 & 1) != 0)
      {
        swift_bridgeObjectRetain();
      }
      else
      {
        *(_QWORD *)&v80[8 * (v30 >> 6) + 64] |= 1 << v30;
        v90 = (uint64_t *)(*((_QWORD *)v80 + 6) + 16 * v30);
        *v90 = v71;
        v90[1] = v81;
        *(_QWORD *)(*((_QWORD *)v80 + 7) + 8 * v30) = MEMORY[0x24BEE4AF8];
        v91 = *((_QWORD *)v80 + 2);
        v92 = v91 + 1;
        v1 = __OFADD__(v91, 1);
        swift_bridgeObjectRetain();
        if ((v1 & 1) != 0)
          goto LABEL_162;
        *((_QWORD *)v80 + 2) = v92;
      }
      v1 = *((_QWORD *)v80 + 7);
      swift_bridgeObjectRelease();
      v93 = *(char **)(v1 + 8 * v30);
      v94 = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)(v1 + 8 * v30) = v93;
      if ((v94 & 1) == 0)
      {
        v93 = sub_2142247A0(0, *((_QWORD *)v93 + 2) + 1, 1, v93);
        *(_QWORD *)(v1 + 8 * v30) = v93;
      }
      v2 = *((_QWORD *)v93 + 2);
      v95 = *((_QWORD *)v93 + 3);
      v47 = v135;
      v46 = v136;
      if (v2 >= v95 >> 1)
      {
        v98 = sub_2142247A0((char *)(v95 > 1), v2 + 1, 1, v93);
        v47 = v135;
        v46 = v136;
        v93 = v98;
        *(_QWORD *)(v1 + 8 * v30) = v98;
      }
      *((_QWORD *)v93 + 2) = v2 + 1;
      v96 = &v93[32 * v2];
      *((float64x2_t *)v96 + 2) = v138;
      *((float64_t *)v96 + 6) = v134;
      if (v77 == v81)
      {
        if (v71 == v131)
        {
          v153 = (unint64_t)v80;
          v1 = MEMORY[0x24BEE4AF8];
          v2 = (unint64_t)v128;
          v30 = (unint64_t)&v150;
          v32 = v119;
          v31 = v120;
          v48 = v126;
          goto LABEL_131;
        }
        v79 = sub_21431DA34;
        v97 = __OFADD__(v71++, 1);
        if (v97)
          goto LABEL_170;
        goto LABEL_104;
      }
      v79 = sub_21431DA34;
      v97 = __OFADD__(v81++, 1);
      if (v97)
        goto LABEL_161;
    }
    __break(1u);
LABEL_161:
    __break(1u);
LABEL_162:
    __break(1u);
LABEL_163:
    swift_bridgeObjectRelease();
    v112 = *(float64x2_t *)v30;
    v113 = (unint64_t)v152;
    v29 = v153;
    v114 = v118;
    goto LABEL_159;
  }
  v78 = floor((v50 + v138.f64[1]) / v51);
  if ((~*(_QWORD *)&v78 & 0x7FF0000000000000) == 0)
  {
LABEL_193:
    __break(1u);
    goto LABEL_194;
  }
  if (v78 <= -9.22337204e18)
  {
LABEL_195:
    __break(1u);
    goto LABEL_196;
  }
  if (v78 < 9.22337204e18)
  {
    v77 = (uint64_t)v78;
    goto LABEL_102;
  }
LABEL_196:
  __break(1u);
LABEL_197:
  __break(1u);
LABEL_198:
  sub_214425820();
  __break(1u);
  result = swift_release();
  __break(1u);
  return result;
}

uint64_t sub_2143511D0(uint64_t result)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v2 = result + 1;
  if (__OFADD__(result, 1))
  {
    __break(1u);
LABEL_7:
    __break(1u);
    return result;
  }
  v3 = *(_QWORD *)(*(_QWORD *)(v1 + 16) + 16);
  if ((uint64_t)v2 >= (uint64_t)v3)
    v2 = 0;
  if (v2 >= v3)
    goto LABEL_7;
  return result;
}

uint64_t sub_214351208()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_21435122C(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *_s7PolygonVMa()
{
  return &_s7PolygonVN;
}

uint64_t _s5GraphVwxx()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t _s5GraphVwcp(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v3;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *_s5GraphVwca(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s5GraphVwta(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s5GraphVwet(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t _s5GraphVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *_s5GraphVMa()
{
  return &_s5GraphVN;
}

uint64_t _s5GraphV4EdgeVwet(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 33))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t _s5GraphV4EdgeVwst(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 33) = v3;
  return result;
}

ValueMetadata *_s5GraphV4EdgeVMa()
{
  return &_s5GraphV4EdgeVN;
}

uint64_t _s10PointIndexVwcp(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *_s10PointIndexVwca(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *_s10PointIndexVwta(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s10PointIndexVwet(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t _s10PointIndexVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *_s10PointIndexVMa()
{
  return &_s10PointIndexVN;
}

ValueMetadata *_s10PointIndexV7GridKeyVMa()
{
  return &_s10PointIndexV7GridKeyVN;
}

unint64_t sub_21435169C()
{
  unint64_t result;

  result = qword_253F10598;
  if (!qword_253F10598)
  {
    result = MEMORY[0x2199CD934](&unk_21442D740, &_s10PointIndexV7GridKeyVN);
    atomic_store(result, (unint64_t *)&qword_253F10598);
  }
  return result;
}

ValueMetadata *type metadata accessor for PartialSpec()
{
  return &type metadata for PartialSpec;
}

uint64_t destroy for PartialSpec.Chart()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PartialSpec.Chart(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v3 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v3;
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_BYTE *)(a1 + 81) = *(_BYTE *)(a2 + 81);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PartialSpec.Chart(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_BYTE *)(a1 + 49) = *(_BYTE *)(a2 + 49);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_BYTE *)(a1 + 81) = *(_BYTE *)(a2 + 81);
  return a1;
}

__n128 initializeWithTake for PartialSpec.Chart(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for PartialSpec.Chart(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_BYTE *)(a1 + 49) = *(_BYTE *)(a2 + 49);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_BYTE *)(a1 + 81) = *(_BYTE *)(a2 + 81);
  return a1;
}

uint64_t getEnumTagSinglePayload for PartialSpec.Chart(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 82))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PartialSpec.Chart(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 80) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 82) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 32) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 82) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PartialSpec.Chart()
{
  return &type metadata for PartialSpec.Chart;
}

uint64_t sub_2143519C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int v30;
  BOOL v31;
  double v32;
  __int16 v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned __int8 v46;
  char v47;
  uint64_t v48;
  BOOL v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  double *v60;
  double *v61;
  uint64_t v62;
  double v63;
  double v64;
  double v65;
  double *v66;
  double *v67;
  uint64_t v68;
  double v69;
  double v70;
  double v71;
  _QWORD *v72;
  _QWORD *v73;
  uint64_t v75;
  char v76;
  char v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int v87;
  __int16 v88;
  char v89;
  unsigned int v90;
  uint64_t v91;
  uint64_t v92;
  int64_t v93;
  uint64_t v96;
  int64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unsigned int v101;

  if (a1 == a2)
    return 1;
  v2 = a2;
  v3 = a1;
  if (*(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16))
  {
    v4 = 0;
    v91 = a1 + 64;
    v5 = 1 << *(_BYTE *)(a1 + 32);
    v6 = -1;
    if (v5 < 64)
      v6 = ~(-1 << v5);
    v7 = v6 & *(_QWORD *)(a1 + 64);
    v93 = (unint64_t)(v5 + 63) >> 6;
    while (2)
    {
      if (v7)
      {
        v96 = (v7 - 1) & v7;
        v97 = v4;
        v8 = __clz(__rbit64(v7)) | (v4 << 6);
        goto LABEL_22;
      }
      v9 = v4 + 1;
      if (__OFADD__(v4, 1))
      {
        __break(1u);
        goto LABEL_106;
      }
      if (v9 < v93)
      {
        v10 = *(_QWORD *)(v91 + 8 * v9);
        v11 = v4 + 1;
        if (v10)
          goto LABEL_21;
        v11 = v4 + 2;
        if (v4 + 2 >= v93)
          return 1;
        v10 = *(_QWORD *)(v91 + 8 * v11);
        if (v10)
          goto LABEL_21;
        v11 = v4 + 3;
        if (v4 + 3 >= v93)
          return 1;
        v10 = *(_QWORD *)(v91 + 8 * v11);
        if (v10)
        {
LABEL_21:
          v96 = (v10 - 1) & v10;
          v97 = v11;
          v8 = __clz(__rbit64(v10)) + (v11 << 6);
LABEL_22:
          v13 = *(_QWORD *)(v3 + 56) + 72 * v8;
          v14 = *(double *)v13;
          v15 = *(unsigned __int8 *)(v13 + 8);
          v16 = *(_QWORD *)(v13 + 16);
          v100 = *(_QWORD *)(v13 + 24);
          v17 = *(_QWORD *)(v13 + 32);
          v101 = *(unsigned __int16 *)(v13 + 40);
          v18 = *(_QWORD *)(v13 + 48);
          v19 = *(_QWORD *)(v13 + 56);
          v20 = *(unsigned __int8 *)(v13 + 64);
          v21 = sub_214336B74(*(_BYTE *)(*(_QWORD *)(v3 + 48) + v8));
          if ((v22 & 1) == 0)
          {
            v79 = v16;
            v80 = v100;
LABEL_100:
            v81 = v80;
            v82 = v17;
            v33 = v101;
            goto LABEL_101;
          }
          v99 = v17;
          v23 = *(_QWORD *)(v2 + 56) + 72 * v21;
          v24 = *(unsigned __int8 *)(v23 + 8);
          v25 = *(_QWORD *)(v23 + 16);
          v26 = *(_QWORD *)(v23 + 24);
          v27 = *(_QWORD *)(v23 + 32);
          v28 = *(unsigned __int16 *)(v23 + 40);
          v29 = *(_QWORD *)(v23 + 48);
          v30 = *(unsigned __int8 *)(v23 + 64);
          if (v24 == 255)
          {
            v31 = v15 == 255;
LABEL_32:
            v33 = v101;
            if (v31)
            {
              v34 = v28 >> 8;
              v37 = v101 >> 8;
              if (v101 >> 8 > 0xFE)
              {
LABEL_98:
                v83 = v27;
                v80 = v100;
                sub_2141D8CE8(v16, v100, v99, v101);
                sub_2141D8CFC(v18, v19, v20);
                sub_2141D8CE8(v25, v26, v83, v28);
                sub_2141D8CE8(v16, v100, v99, v101);
                v84 = v26;
                v17 = v99;
                v33 = v101;
                sub_2141D7864(v25, v84, v83, v28);
                sub_2141D7864(v16, v100, v99, v101);
              }
              else
              {
                v90 = v30;
                v92 = v19;
                switch(v34)
                {
                  case 0u:
                    if (v37)
                      goto LABEL_104;
                    LOBYTE(v87) = v20;
                    v88 = v28;
                    v38 = v26;
                    v39 = v27;
                    v40 = *(_QWORD *)(v25 + 16);
                    if (v40 != *(_QWORD *)(v16 + 16))
                      goto LABEL_96;
                    if (v40)
                      v41 = v25 == v16;
                    else
                      v41 = 1;
                    if (v41)
                      goto LABEL_46;
                    if (*(double *)(v25 + 32) != *(double *)(v16 + 32))
                      goto LABEL_96;
                    v60 = (double *)(v25 + 40);
                    v61 = (double *)(v16 + 40);
                    v62 = v40 - 1;
                    while (v62)
                    {
                      v63 = *v60++;
                      v64 = v63;
                      v65 = *v61++;
                      --v62;
                      if (v64 != v65)
                        goto LABEL_96;
                    }
LABEL_46:
                    sub_2141D8CE8(v25, v38, v27, v88);
                    sub_2141D8CE8(v16, v100, v99, v101);
                    sub_2141D8CFC(v18, v19, v20);
                    sub_2141D8CE8(v16, v100, v99, v101);
                    v42 = v39;
                    v80 = v100;
                    v17 = v99;
                    v33 = v101;
                    sub_2141D77B4(v25, v38, v42, v88, 0);
                    v43 = v16;
                    v44 = v100;
                    v45 = v99;
                    v46 = v101;
                    v47 = 0;
                    goto LABEL_69;
                  case 1u:
                    if (v37 != 1)
                      goto LABEL_104;
                    LOBYTE(v87) = v20;
                    v88 = v28;
                    v38 = v26;
                    v39 = v27;
                    v48 = *(_QWORD *)(v25 + 16);
                    if (v48 != *(_QWORD *)(v16 + 16))
                      goto LABEL_96;
                    if (v48)
                      v49 = v25 == v16;
                    else
                      v49 = 1;
                    if (v49)
                      goto LABEL_55;
                    if (*(double *)(v25 + 32) != *(double *)(v16 + 32))
                      goto LABEL_96;
                    v66 = (double *)(v25 + 40);
                    v67 = (double *)(v16 + 40);
                    v68 = v48 - 1;
                    while (v68)
                    {
                      v69 = *v66++;
                      v70 = v69;
                      v71 = *v67++;
                      --v68;
                      if (v70 != v71)
                        goto LABEL_96;
                    }
LABEL_55:
                    sub_2141D8CE8(v25, v38, v27, v88);
                    sub_2141D8CE8(v16, v100, v99, v101);
                    sub_2141D8CFC(v18, v19, v20);
                    sub_2141D8CE8(v16, v100, v99, v101);
                    v50 = v39;
                    v80 = v100;
                    v17 = v99;
                    v33 = v101;
                    sub_2141D77B4(v25, v38, v50, v88, 1);
                    v43 = v16;
                    v44 = v100;
                    v45 = v99;
                    v46 = v101;
                    v47 = 1;
                    goto LABEL_69;
                  case 2u:
                    if (v37 != 2)
                      goto LABEL_104;
                    v87 = v20;
                    v88 = v28;
                    v38 = v26;
                    v39 = v27;
                    v51 = *(_QWORD *)(v25 + 16);
                    if (v51 != *(_QWORD *)(v16 + 16))
                      goto LABEL_96;
                    if (v51)
                      v52 = v25 == v16;
                    else
                      v52 = 1;
                    if (v52)
                      goto LABEL_68;
                    if (*(_QWORD *)(v25 + 32) != *(_QWORD *)(v16 + 32)
                      || *(_QWORD *)(v25 + 40) != *(_QWORD *)(v16 + 40))
                    {
                      v54 = v29;
                      v55 = sub_214425790();
                      v29 = v54;
                      if ((v55 & 1) == 0)
                        goto LABEL_96;
                    }
                    v56 = v51 - 1;
                    if (!v56)
                      goto LABEL_68;
                    v72 = (_QWORD *)(v16 + 56);
                    v73 = (_QWORD *)(v25 + 56);
                    break;
                  case 3u:
                    if (v37 == 3)
                    {
                      v33 = v101;
                      v58 = v27;
                      sub_2141D8CE8(v25, v26, v27, v28);
                      sub_2141D8CE8(v25, v26, v58, v28);
                      sub_2141D8CE8(v25, v26, v58, v28);
                      sub_2141D8CE8(v16, v100, v99, v101);
                      sub_2141D8CE8(v16, v100, v99, v101);
                      sub_2141D8CFC(v18, v19, v20);
                      sub_2141D8CE8(v25, v26, v58, v28);
                      sub_2141D8CE8(v16, v100, v99, v101);
                      v89 = AGCompareValues();
                      sub_2141D77B4(v25, v26, v58, v28, 3);
                      sub_2141D77B4(v16, v100, v99, v101, 3);
                      sub_2141D7864(v16, v100, v99, v101);
                      sub_2141D7864(v25, v26, v58, v28);
                      sub_2141D7864(v25, v26, v58, v28);
                      v59 = v26;
                      v17 = v99;
                      v80 = v100;
                      sub_2141D77B4(v25, v59, v58, v28, 3);
                      v36 = v90;
                      v2 = a2;
                      if ((v89 & 1) != 0)
                        goto LABEL_72;
                    }
                    else
                    {
LABEL_104:
                      v86 = v27;
                      sub_2141D8CE8(v25, v26, v27, v28);
                      v98 = v26;
                      v17 = v99;
                      v33 = v101;
                      sub_2141D8CE8(v16, v100, v99, v101);
                      sub_2141D8CFC(v18, v19, v20);
                      sub_2141D8CE8(v16, v100, v99, v101);
                      v80 = v100;
                      sub_2141D77B4(v25, v98, v86, v28, SBYTE1(v28));
                      sub_2141D77B4(v16, v100, v99, v101, SBYTE1(v101));
                    }
                    goto LABEL_102;
                  default:
                    if (v101 >> 8 <= 0xFE)
                      goto LABEL_98;
                    v17 = v99;
                    v80 = v100;
                    v35 = v30;
                    sub_2141D8CE8(v16, v100, v99, v101);
                    sub_2141D8CFC(v18, v19, v20);
                    v36 = v35;
                    v2 = a2;
                    goto LABEL_72;
                }
                do
                {
                  if (*(v73 - 1) != *(v72 - 1) || *v73 != *v72)
                  {
                    v75 = v29;
                    v76 = sub_214425790();
                    v29 = v75;
                    if ((v76 & 1) == 0)
                    {
LABEL_96:
                      v85 = v39;
                      sub_2141D8CE8(v25, v38, v39, v88);
                      v17 = v99;
                      v33 = v101;
                      sub_2141D8CE8(v16, v100, v99, v101);
                      v19 = v92;
                      LOBYTE(v20) = v87;
                      sub_2141D8CFC(v18, v92, v87);
                      sub_2141D8CE8(v16, v100, v99, v101);
                      sub_2141D77B4(v25, v38, v85, v88, v34);
                      v78 = v34;
                      v80 = v100;
                      sub_2141D77B4(v16, v100, v99, v101, v78);
                      goto LABEL_102;
                    }
                  }
                  v72 += 2;
                  v73 += 2;
                  --v56;
                }
                while (v56);
LABEL_68:
                sub_2141D8CE8(v25, v38, v39, v88);
                sub_2141D8CE8(v16, v100, v99, v101);
                v20 = v87;
                sub_2141D8CFC(v18, v92, v87);
                sub_2141D8CE8(v16, v100, v99, v101);
                v19 = v92;
                v57 = v39;
                v80 = v100;
                v17 = v99;
                v33 = v101;
                sub_2141D77B4(v25, v38, v57, v88, 2);
                v43 = v16;
                v44 = v100;
                v45 = v99;
                v46 = v101;
                v47 = 2;
LABEL_69:
                sub_2141D77B4(v43, v44, v45, v46, v47);
                v2 = a2;
                v36 = v90;
LABEL_72:
                if (v36 <= 0xFB)
                {
                  if (v20 <= 0xFB)
                    __asm { BR              X9 }
                }
                else if (v20 > 0xFB)
                {
                  sub_2141D7864(v16, v80, v17, v33);
                  sub_2141D774C(v18, v19, v20);
                  v3 = a1;
                  v7 = v96;
                  v4 = v97;
                  continue;
                }
              }
              goto LABEL_102;
            }
            v79 = v16;
            v17 = v99;
            v80 = v100;
            v81 = v100;
            v82 = v99;
LABEL_101:
            sub_2141D8CE8(v79, v81, v82, v33);
            sub_2141D8CFC(v18, v19, v20);
LABEL_102:
            sub_2141D7864(v16, v80, v17, v33);
            sub_2141D774C(v18, v19, v20);
            return 0;
          }
          if (v15 != 255)
          {
            v32 = *(double *)v23;
            if (v24)
            {
              if (v24 != 1)
                __asm { BR              X9 }
              if (v15 != 1)
                goto LABEL_99;
LABEL_31:
              v31 = v32 == v14;
              goto LABEL_32;
            }
            if (!v15)
              goto LABEL_31;
          }
LABEL_99:
          v79 = v16;
          v17 = v99;
          v80 = v100;
          goto LABEL_100;
        }
        v12 = v4 + 4;
        if (v4 + 4 < v93)
        {
          v10 = *(_QWORD *)(v91 + 8 * v12);
          if (v10)
          {
            v11 = v4 + 4;
            goto LABEL_21;
          }
          while (1)
          {
            v11 = v12 + 1;
            if (__OFADD__(v12, 1))
              break;
            if (v11 >= v93)
              return 1;
            v10 = *(_QWORD *)(v91 + 8 * v11);
            ++v12;
            if (v10)
              goto LABEL_21;
          }
LABEL_106:
          __break(1u);
        }
      }
      return 1;
    }
  }
  return 0;
}

uint64_t sub_2143529B0(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  double v16;
  char v17;

  if (result == a2)
    return 1;
  v3 = result;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v4 = 0;
  v5 = result + 64;
  v6 = 1 << *(_BYTE *)(result + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(result + 64);
  v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v11 = v10 | (v4 << 6);
      goto LABEL_22;
    }
    v12 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v12 >= v9)
      return 1;
    v13 = *(_QWORD *)(v5 + 8 * v12);
    ++v4;
    if (!v13)
    {
      v4 = v12 + 1;
      if (v12 + 1 >= v9)
        return 1;
      v13 = *(_QWORD *)(v5 + 8 * v4);
      if (!v13)
      {
        v4 = v12 + 2;
        if (v12 + 2 >= v9)
          return 1;
        v13 = *(_QWORD *)(v5 + 8 * v4);
        if (!v13)
          break;
      }
    }
LABEL_21:
    v8 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v4 << 6);
LABEL_22:
    v15 = 8 * v11;
    v16 = *(double *)(*(_QWORD *)(v3 + 56) + v15);
    result = sub_21433AB28(*(_QWORD *)(*(_QWORD *)(v3 + 48) + v15));
    if ((v17 & 1) == 0 || *(double *)(*(_QWORD *)(a2 + 56) + 8 * result) != v16)
      return 0;
  }
  v14 = v12 + 3;
  if (v14 >= v9)
    return 1;
  v13 = *(_QWORD *)(v5 + 8 * v14);
  if (v13)
  {
    v4 = v14;
    goto LABEL_21;
  }
  while (1)
  {
    v4 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v4 >= v9)
      return 1;
    v13 = *(_QWORD *)(v5 + 8 * v4);
    ++v14;
    if (v13)
      goto LABEL_21;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_214352B1C(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  unsigned __int16 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double *v20;
  double v21;
  double v22;
  uint64_t v23;
  unsigned __int8 v24;
  char v25;
  unint64_t v26;
  char v27;
  char v28;
  double *v29;
  double v31[6];
  char v32;

  if (result == a2)
    return 1;
  v3 = result;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v4 = 0;
  v5 = result + 64;
  v6 = 1 << *(_BYTE *)(result + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(result + 64);
  v9 = (unint64_t)(v6 + 63) >> 6;
  while (v8)
  {
    v10 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    v11 = v10 | (v4 << 6);
LABEL_22:
    v15 = (unsigned __int16 *)(*(_QWORD *)(v3 + 48) + 56 * v11);
    v16 = *((_QWORD *)v15 + 1);
    v17 = *((_QWORD *)v15 + 2);
    v18 = *((_QWORD *)v15 + 4);
    v19 = *((_QWORD *)v15 + 5);
    v20 = (double *)(*(_QWORD *)(v3 + 56) + 16 * v11);
    v22 = *v20;
    v21 = v20[1];
    if (*((_BYTE *)v15 + 2))
      v23 = 0x10000;
    else
      v23 = 0;
    v24 = *((_BYTE *)v15 + 24);
    v25 = *((_BYTE *)v15 + 48);
    *(_QWORD *)&v31[0] = *v15 | (unint64_t)v23;
    *(_QWORD *)&v31[1] = v16;
    *(_QWORD *)&v31[2] = v17;
    *(_QWORD *)&v31[3] = v24;
    *(_QWORD *)&v31[4] = v18;
    *(_QWORD *)&v31[5] = v19;
    v32 = v25;
    sub_2141DD164(v16, v17, v24);
    sub_2141DD164(v18, v19, v25);
    v26 = sub_214336BCC(v31);
    v28 = v27;
    result = sub_214355224((uint64_t)v31);
    if ((v28 & 1) != 0)
    {
      v29 = (double *)(*(_QWORD *)(a2 + 56) + 16 * v26);
      if (*v29 == v22 && v29[1] == v21)
        continue;
    }
    return 0;
  }
  v12 = v4 + 1;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
    goto LABEL_33;
  }
  if (v12 >= v9)
    return 1;
  v13 = *(_QWORD *)(v5 + 8 * v12);
  ++v4;
  if (v13)
    goto LABEL_21;
  v4 = v12 + 1;
  if (v12 + 1 >= v9)
    return 1;
  v13 = *(_QWORD *)(v5 + 8 * v4);
  if (v13)
    goto LABEL_21;
  v4 = v12 + 2;
  if (v12 + 2 >= v9)
    return 1;
  v13 = *(_QWORD *)(v5 + 8 * v4);
  if (v13)
  {
LABEL_21:
    v8 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v4 << 6);
    goto LABEL_22;
  }
  v14 = v12 + 3;
  if (v14 >= v9)
    return 1;
  v13 = *(_QWORD *)(v5 + 8 * v14);
  if (v13)
  {
    v4 = v14;
    goto LABEL_21;
  }
  while (1)
  {
    v4 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v4 >= v9)
      return 1;
    v13 = *(_QWORD *)(v5 + 8 * v4);
    ++v14;
    if (v13)
      goto LABEL_21;
  }
LABEL_33:
  __break(1u);
  return result;
}

uint64_t sub_214352D10(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;

  if (result == a2)
    return 1;
  v3 = result;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v4 = 0;
  v5 = result + 64;
  v6 = 1 << *(_BYTE *)(result + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(result + 64);
  v9 = (unint64_t)(v6 + 63) >> 6;
  while (v8)
  {
    v10 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    v11 = v10 | (v4 << 6);
LABEL_24:
    v15 = *(_QWORD *)(v3 + 56) + 16 * v11;
    v16 = *(_QWORD *)v15;
    v17 = *(unsigned __int8 *)(v15 + 8);
    v18 = *(unsigned __int8 *)(v15 + 9);
    v19 = sub_214336B74(*(_BYTE *)(*(_QWORD *)(v3 + 48) + v11));
    if ((v20 & 1) == 0)
      return 0;
    v21 = *(_QWORD *)(a2 + 56) + 16 * v19;
    v22 = *(_QWORD *)v21;
    v23 = *(unsigned __int8 *)(v21 + 8);
    v24 = *(unsigned __int8 *)(v21 + 9);
    if (v23)
    {
      if (v23 == 1)
      {
        if (v17 != 1)
          return 0;
      }
      else if (v17 != 2)
      {
        return 0;
      }
    }
    else if (v17)
    {
      return 0;
    }
    result = 0;
    if (v22 != v16 || ((v18 ^ v24) & 1) != 0)
      return result;
  }
  v12 = v4 + 1;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
    goto LABEL_39;
  }
  if (v12 >= v9)
    return 1;
  v13 = *(_QWORD *)(v5 + 8 * v12);
  ++v4;
  if (v13)
    goto LABEL_23;
  v4 = v12 + 1;
  if (v12 + 1 >= v9)
    return 1;
  v13 = *(_QWORD *)(v5 + 8 * v4);
  if (v13)
    goto LABEL_23;
  v4 = v12 + 2;
  if (v12 + 2 >= v9)
    return 1;
  v13 = *(_QWORD *)(v5 + 8 * v4);
  if (v13)
    goto LABEL_23;
  v4 = v12 + 3;
  if (v12 + 3 >= v9)
    return 1;
  v13 = *(_QWORD *)(v5 + 8 * v4);
  if (v13)
  {
LABEL_23:
    v8 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v4 << 6);
    goto LABEL_24;
  }
  v14 = v12 + 4;
  if (v14 >= v9)
    return 1;
  v13 = *(_QWORD *)(v5 + 8 * v14);
  if (v13)
  {
    v4 = v14;
    goto LABEL_23;
  }
  while (1)
  {
    v4 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v4 >= v9)
      return 1;
    v13 = *(_QWORD *)(v5 + 8 * v4);
    ++v14;
    if (v13)
      goto LABEL_23;
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_214352EE4(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t i;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  unsigned __int8 *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  unsigned __int8 *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  char v27;
  char v28;
  char v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  char v39;
  uint64_t v40;
  int64_t v41;
  int64_t v42;

  if (result == a2)
    return 1;
  v3 = result;
  if (*(_QWORD *)(result + 16) == *(_QWORD *)(a2 + 16))
  {
    v4 = 0;
    v5 = *(_QWORD *)(result + 64);
    v40 = result + 64;
    v6 = 1 << *(_BYTE *)(result + 32);
    v7 = -1;
    if (v6 < 64)
      v7 = ~(-1 << v6);
    v8 = v7 & v5;
    v41 = (unint64_t)(v6 + 63) >> 6;
    if ((v7 & v5) == 0)
      goto LABEL_7;
LABEL_6:
    v9 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    for (i = v9 | (v4 << 6); ; i = __clz(__rbit64(v12)) + (v4 << 6))
    {
      v14 = (unsigned __int8 *)(*(_QWORD *)(v3 + 56) + 24 * i);
      v15 = *v14;
      v16 = *((_QWORD *)v14 + 1);
      v17 = *((_QWORD *)v14 + 2);
      v18 = sub_214336B74(*(_BYTE *)(*(_QWORD *)(v3 + 48) + i));
      if ((v19 & 1) == 0)
        return 0;
      v20 = (unsigned __int8 *)(*(_QWORD *)(a2 + 56) + 24 * v18);
      if (v15 != *v20)
        return 0;
      v42 = v4;
      v21 = *((_QWORD *)v20 + 1);
      v22 = *((_QWORD *)v20 + 2);
      if (v21)
      {
        if (!v16)
          return 0;
        v23 = *(_QWORD *)(v21 + 16);
        if (v23 != *(_QWORD *)(v16 + 16))
          return 0;
        if (v23 && v21 != v16)
        {
          v24 = 0;
          do
          {
            if ((*(_BYTE *)(v21 + v24 + 40) & 1) != 0)
            {
              if (!*(_BYTE *)(v16 + v24 + 40))
                return 0;
            }
            else
            {
              if (*(_QWORD *)(v21 + v24 + 32) == *(_QWORD *)(v16 + v24 + 32))
                v25 = *(_BYTE *)(v16 + v24 + 40);
              else
                v25 = 1;
              if ((v25 & 1) != 0)
                return 0;
            }
            if ((*(_BYTE *)(v21 + v24 + 56) & 1) != 0)
            {
              if (!*(_BYTE *)(v16 + v24 + 56))
                return 0;
            }
            else
            {
              if (*(_QWORD *)(v21 + v24 + 48) == *(_QWORD *)(v16 + v24 + 48))
                v26 = *(_BYTE *)(v16 + v24 + 56);
              else
                v26 = 1;
              if ((v26 & 1) != 0)
                return 0;
            }
            if ((*(_BYTE *)(v21 + v24 + 72) & 1) != 0)
            {
              if (!*(_BYTE *)(v16 + v24 + 72))
                return 0;
            }
            else
            {
              if (*(_QWORD *)(v21 + v24 + 64) == *(_QWORD *)(v16 + v24 + 64))
                v27 = *(_BYTE *)(v16 + v24 + 72);
              else
                v27 = 1;
              if ((v27 & 1) != 0)
                return 0;
            }
            if ((*(_BYTE *)(v21 + v24 + 88) & 1) != 0)
            {
              if (!*(_BYTE *)(v16 + v24 + 88))
                return 0;
            }
            else
            {
              if (*(_QWORD *)(v21 + v24 + 80) == *(_QWORD *)(v16 + v24 + 80))
                v28 = *(_BYTE *)(v16 + v24 + 88);
              else
                v28 = 1;
              if ((v28 & 1) != 0)
                return 0;
            }
            if ((*(_BYTE *)(v21 + v24 + 104) & 1) != 0)
            {
              if (!*(_BYTE *)(v16 + v24 + 104))
                return 0;
            }
            else
            {
              if (*(_QWORD *)(v21 + v24 + 96) == *(_QWORD *)(v16 + v24 + 96))
                v29 = *(_BYTE *)(v16 + v24 + 104);
              else
                v29 = 1;
              if ((v29 & 1) != 0)
                return 0;
            }
            v24 += 80;
            --v23;
          }
          while (v23);
        }
        swift_bridgeObjectRetain();
      }
      else if (v16)
      {
        return 0;
      }
      v30 = *(_QWORD *)(v22 + 16);
      if (v30 != *(_QWORD *)(v17 + 16))
      {
LABEL_102:
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return 0;
      }
      if (v30)
        v31 = v22 == v17;
      else
        v31 = 1;
      if (!v31)
      {
        v32 = 0;
        do
        {
          v34 = *(unsigned __int8 *)(v22 + v32 + 32);
          v35 = *(_QWORD *)(v22 + v32 + 72);
          v36 = *(unsigned __int8 *)(v17 + v32 + 32);
          v37 = *(_QWORD *)(v17 + v32 + 72);
          if (v34 == 9)
          {
            if (v36 != 9)
              goto LABEL_102;
          }
          else if (v36 == 9 || v34 != v36)
          {
            goto LABEL_102;
          }
          if ((*(_BYTE *)(v22 + v32 + 48) & 1) != 0)
          {
            if (!*(_BYTE *)(v17 + v32 + 48))
              goto LABEL_102;
          }
          else
          {
            if (*(_QWORD *)(v22 + v32 + 40) == *(_QWORD *)(v17 + v32 + 40))
              v39 = *(_BYTE *)(v17 + v32 + 48);
            else
              v39 = 1;
            if ((v39 & 1) != 0)
              goto LABEL_102;
          }
          if ((*(_BYTE *)(v22 + v32 + 64) & 1) != 0)
          {
            if (v35 == v37)
              v33 = *(unsigned __int8 *)(v17 + v32 + 64);
            else
              v33 = 0;
            if (v33 != 1)
              goto LABEL_102;
          }
          else if ((*(_BYTE *)(v17 + v32 + 64) & 1) != 0
                 || *(_QWORD *)(v22 + v32 + 56) != *(_QWORD *)(v17 + v32 + 56)
                 || v35 != v37)
          {
            goto LABEL_102;
          }
          v32 += 48;
          --v30;
        }
        while (v30);
      }
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      v4 = v42;
      if (v8)
        goto LABEL_6;
LABEL_7:
      v11 = v4 + 1;
      if (__OFADD__(v4, 1))
        break;
      if (v11 >= v41)
        return 1;
      v12 = *(_QWORD *)(v40 + 8 * v11);
      ++v4;
      if (!v12)
      {
        v4 = v11 + 1;
        if (v11 + 1 >= v41)
          return 1;
        v12 = *(_QWORD *)(v40 + 8 * v4);
        if (!v12)
        {
          v4 = v11 + 2;
          if (v11 + 2 >= v41)
            return 1;
          v12 = *(_QWORD *)(v40 + 8 * v4);
          if (!v12)
          {
            v4 = v11 + 3;
            if (v11 + 3 >= v41)
              return 1;
            v12 = *(_QWORD *)(v40 + 8 * v4);
            if (!v12)
            {
              v13 = v11 + 4;
              if (v13 >= v41)
                return 1;
              v12 = *(_QWORD *)(v40 + 8 * v13);
              if (!v12)
              {
                while (1)
                {
                  v4 = v13 + 1;
                  if (__OFADD__(v13, 1))
                    goto LABEL_106;
                  if (v4 >= v41)
                    return 1;
                  v12 = *(_QWORD *)(v40 + 8 * v4);
                  ++v13;
                  if (v12)
                    goto LABEL_22;
                }
              }
              v4 = v13;
            }
          }
        }
      }
LABEL_22:
      v8 = (v12 - 1) & v12;
    }
    __break(1u);
LABEL_106:
    __break(1u);
    return result;
  }
  return 0;
}

uint64_t sub_2143532E0(uint64_t a1, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  double v30;
  double v31;
  double v32;
  BOOL v33;
  unsigned int v35;
  BOOL v36;
  uint64_t result;
  uint64_t v40;
  int64_t v41;
  uint64_t v42;
  int64_t v43;

  if (a1 == a2)
    return 1;
  if (*(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v3 = 0;
  v40 = a1 + 64;
  v4 = 1 << *(_BYTE *)(a1 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v41 = (unint64_t)(v4 + 63) >> 6;
  while (2)
  {
    if (v6)
    {
      v42 = (v6 - 1) & v6;
      v43 = v3;
      v7 = __clz(__rbit64(v6)) | (v3 << 6);
      goto LABEL_24;
    }
    v8 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_78;
    }
    if (v8 >= v41)
      return 1;
    v9 = *(_QWORD *)(v40 + 8 * v8);
    v10 = v3 + 1;
    if (v9)
      goto LABEL_23;
    v10 = v3 + 2;
    if (v3 + 2 >= v41)
      return 1;
    v9 = *(_QWORD *)(v40 + 8 * v10);
    if (v9)
      goto LABEL_23;
    v10 = v3 + 3;
    if (v3 + 3 >= v41)
      return 1;
    v9 = *(_QWORD *)(v40 + 8 * v10);
    if (v9)
      goto LABEL_23;
    v10 = v3 + 4;
    if (v3 + 4 >= v41)
      return 1;
    v9 = *(_QWORD *)(v40 + 8 * v10);
    if (v9)
      goto LABEL_23;
    v11 = v3 + 5;
    if (v3 + 5 >= v41)
      return 1;
    v9 = *(_QWORD *)(v40 + 8 * v11);
    if (!v9)
    {
      while (1)
      {
        v10 = v11 + 1;
        if (__OFADD__(v11, 1))
          break;
        if (v10 >= v41)
          return 1;
        v9 = *(_QWORD *)(v40 + 8 * v10);
        ++v11;
        if (v9)
          goto LABEL_23;
      }
LABEL_78:
      __break(1u);
      JUMPOUT(0x21435376CLL);
    }
    v10 = v3 + 5;
LABEL_23:
    v42 = (v9 - 1) & v9;
    v43 = v10;
    v7 = __clz(__rbit64(v9)) + (v10 << 6);
LABEL_24:
    v12 = a1;
    v13 = *(_QWORD *)(a1 + 56) + 72 * v7;
    v14 = *(double *)v13;
    v15 = *(unsigned __int8 *)(v13 + 8);
    v17 = *(_QWORD *)(v13 + 16);
    v16 = *(_QWORD *)(v13 + 24);
    v18 = *(_QWORD *)(v13 + 32);
    v19 = *(unsigned __int16 *)(v13 + 40);
    v20 = *(unsigned __int8 *)(v13 + 64);
    v21 = sub_214336B74(*(_BYTE *)(*(_QWORD *)(a1 + 48) + v7));
    if ((v22 & 1) == 0)
      return 0;
    v23 = *(_QWORD *)(a2 + 56) + 72 * v21;
    v24 = *(unsigned __int8 *)(v23 + 8);
    v25 = *(_QWORD *)(v23 + 16);
    v26 = *(_QWORD *)(v23 + 24);
    v27 = *(_QWORD *)(v23 + 32);
    v28 = *(unsigned __int16 *)(v23 + 40);
    v29 = *(unsigned __int8 *)(v23 + 64);
    if (v24 == 255)
    {
      if (v15 != 255)
        return 0;
    }
    else
    {
      if (v15 == 255)
        return 0;
      v30 = *(double *)v23;
      if (v24)
      {
        if (v24 != 1)
          __asm { BR              X15 }
        v31 = v30;
        v32 = v14;
        v33 = v15 == 1;
      }
      else
      {
        v31 = v30;
        v32 = v14;
        v33 = v15 == 0;
      }
      if (!v33 || v31 != v32)
        return 0;
    }
    v35 = v19 >> 8;
    if (v19 >> 8 > 0xFE)
      return 0;
    switch(v28 >> 8)
    {
      case 0u:
        v36 = (v19 & 0xFF00) == 0;
        goto LABEL_44;
      case 1u:
        v36 = v35 == 1;
        goto LABEL_44;
      case 2u:
        v36 = v35 == 2;
LABEL_44:
        if (!v36 || v25 != v17)
          return 0;
        goto LABEL_49;
      case 3u:
        if (v35 != 3)
          return 0;
        if (v25 != v17 || v26 != v16)
          return 0;
        if ((_BYTE)v28 == 0xFF)
        {
          if (v19 != 255)
            return 0;
        }
        else
        {
          if (v19 == 255)
            return 0;
          if ((_BYTE)v28)
          {
            if (v28 == 1)
            {
              result = 0;
              if (v19 != 1)
                return result;
            }
            else
            {
              result = 0;
              if (v19 != 2)
                return result;
            }
          }
          else
          {
            result = 0;
            if ((_BYTE)v19)
              return result;
          }
          if (v27 != v18)
            return result;
        }
LABEL_49:
        if ((_DWORD)v29 == 255)
        {
          a1 = v12;
          v3 = v43;
          v6 = v42;
          if (v20 != 255)
            return 0;
          continue;
        }
        if (v20 != 255)
          __asm { BR              X11 }
        return 0;
      default:
        return 0;
    }
  }
}

uint64_t sub_2143537C0(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;

  if (result == a2)
    return 1;
  v3 = result;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v4 = 0;
  v5 = result + 64;
  v6 = 1 << *(_BYTE *)(result + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(result + 64);
  v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v11 = v10 | (v4 << 6);
      goto LABEL_24;
    }
    v12 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v12 >= v9)
      return 1;
    v13 = *(_QWORD *)(v5 + 8 * v12);
    ++v4;
    if (!v13)
    {
      v4 = v12 + 1;
      if (v12 + 1 >= v9)
        return 1;
      v13 = *(_QWORD *)(v5 + 8 * v4);
      if (!v13)
      {
        v4 = v12 + 2;
        if (v12 + 2 >= v9)
          return 1;
        v13 = *(_QWORD *)(v5 + 8 * v4);
        if (!v13)
        {
          v4 = v12 + 3;
          if (v12 + 3 >= v9)
            return 1;
          v13 = *(_QWORD *)(v5 + 8 * v4);
          if (!v13)
            break;
        }
      }
    }
LABEL_23:
    v8 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v4 << 6);
LABEL_24:
    v15 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + 8 * v11);
    v16 = sub_214336B74(*(_BYTE *)(*(_QWORD *)(v3 + 48) + v11));
    if ((v17 & 1) != 0)
    {
      result = sub_21420F32C(*(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v16), v15);
      if ((result & 1) != 0)
        continue;
    }
    return 0;
  }
  v14 = v12 + 4;
  if (v14 >= v9)
    return 1;
  v13 = *(_QWORD *)(v5 + 8 * v14);
  if (v13)
  {
    v4 = v14;
    goto LABEL_23;
  }
  while (1)
  {
    v4 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v4 >= v9)
      return 1;
    v13 = *(_QWORD *)(v5 + 8 * v4);
    ++v14;
    if (v13)
      goto LABEL_23;
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_214353940(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  unsigned __int8 v15;
  unint64_t v16;
  char v17;
  char v18;
  char v19;
  uint64_t v20;
  _BYTE v21[48];
  _OWORD v22[3];
  char v23;
  unsigned __int8 v24[8];
  _BYTE v25[56];

  if (result == a2)
    return 1;
  v3 = result;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v4 = 0;
  v20 = result + 64;
  v5 = 1 << *(_BYTE *)(result + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(result + 64);
  v8 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v10 = v9 | (v4 << 6);
LABEL_8:
      v11 = *(_QWORD *)(v3 + 56);
      LOBYTE(v22[0]) = *(_BYTE *)(*(_QWORD *)(v3 + 48) + v10);
      sub_21422F3FC(v11 + 48 * v10, (uint64_t)v22 + 8);
      goto LABEL_30;
    }
    v12 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_39;
    }
    if (v12 < v8)
    {
      v13 = *(_QWORD *)(v20 + 8 * v12);
      if (v13)
        goto LABEL_12;
      v14 = v4 + 2;
      ++v4;
      if (v12 + 1 < v8)
      {
        v13 = *(_QWORD *)(v20 + 8 * v14);
        if (v13)
          goto LABEL_15;
        v4 = v12 + 1;
        if (v12 + 2 < v8)
        {
          v13 = *(_QWORD *)(v20 + 8 * (v12 + 2));
          if (v13)
          {
            v12 += 2;
            goto LABEL_12;
          }
          v4 = v12 + 2;
          if (v12 + 3 < v8)
          {
            v13 = *(_QWORD *)(v20 + 8 * (v12 + 3));
            if (v13)
            {
              v12 += 3;
              goto LABEL_12;
            }
            v14 = v12 + 4;
            v4 = v12 + 3;
            if (v12 + 4 < v8)
              break;
          }
        }
      }
    }
LABEL_29:
    v7 = 0;
    memset(v22, 0, sizeof(v22));
    v23 = -1;
LABEL_30:
    sub_2141E801C((uint64_t)v22, (uint64_t)v24, &qword_253F12420);
    if (v25[40] == 255)
      return 1;
    v15 = v24[0];
    sub_21422F3C0((uint64_t)v25, (uint64_t)v22);
    v16 = sub_214336B74(v15);
    if ((v17 & 1) == 0)
    {
      sub_21422F27C((uint64_t)v22);
      return 0;
    }
    sub_21422F3FC(*(_QWORD *)(a2 + 56) + 48 * v16, (uint64_t)v21);
    sub_2143F5788((uint64_t)v21, (uint64_t)v22);
    v19 = v18;
    sub_21422F27C((uint64_t)v21);
    result = sub_21422F27C((uint64_t)v22);
    if ((v19 & 1) == 0)
      return 0;
  }
  v13 = *(_QWORD *)(v20 + 8 * v14);
  if (v13)
  {
LABEL_15:
    v12 = v14;
LABEL_12:
    v7 = (v13 - 1) & v13;
    v10 = __clz(__rbit64(v13)) + (v12 << 6);
    v4 = v12;
    goto LABEL_8;
  }
  while (1)
  {
    v12 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v12 >= v8)
    {
      v4 = v8 - 1;
      goto LABEL_29;
    }
    v13 = *(_QWORD *)(v20 + 8 * v12);
    ++v14;
    if (v13)
      goto LABEL_12;
  }
LABEL_39:
  __break(1u);
  return result;
}

BOOL sub_214353BBC(uint64_t a1, uint64_t a2)
{
  return sub_214355274(*(_QWORD *)a1, *(_BYTE *)(a1 + 8), *(_QWORD *)a2, *(_BYTE *)(a2 + 8));
}

BOOL sub_214353BD4(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(a2 + 8) == *(unsigned __int8 *)(a1 + 8) && *(_QWORD *)a1 == *(_QWORD *)a2;
}

uint64_t sub_214353BF4(uint64_t a1, uint64_t a2)
{
  return sub_214354D54(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24), *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), *(_BYTE *)(a2 + 24));
}

uint64_t sub_214353C18(uint64_t a1)
{
  return sub_214354DDC(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_WORD *)(a1 + 24));
}

uint64_t sub_214353C3C(uint64_t a1)
{
  return sub_214354C44(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t sub_214353C58(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[4];
  char v8;
  _OWORD v9[4];
  char v10;

  v2 = *(_OWORD *)(a1 + 48);
  v7[2] = *(_OWORD *)(a1 + 32);
  v7[3] = v2;
  v8 = *(_BYTE *)(a1 + 64);
  v3 = *(_OWORD *)(a1 + 16);
  v7[0] = *(_OWORD *)a1;
  v7[1] = v3;
  v4 = *(_OWORD *)(a2 + 48);
  v9[2] = *(_OWORD *)(a2 + 32);
  v9[3] = v4;
  v10 = *(_BYTE *)(a2 + 64);
  v5 = *(_OWORD *)(a2 + 16);
  v9[0] = *(_OWORD *)a2;
  v9[1] = v5;
  return sub_214354FD8((uint64_t)v7, (uint64_t)v9) & 1;
}

uint64_t sub_214353CB0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  uint64_t v21;
  uint64_t v22;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  _OWORD *v52;
  uint64_t v53;
  _OWORD *v54;
  __int128 v55;
  char v56;
  unint64_t v57;
  uint64_t v58;
  _BOOL8 v59;
  uint64_t v60;
  char v61;
  unint64_t v62;
  char v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _OWORD *v68;
  uint64_t v69;
  _OWORD *v70;
  __int128 v71;
  uint64_t v72;
  BOOL v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  int64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  BOOL v89;
  BOOL v90;
  int v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t result;
  _BYTE *v97;
  _QWORD v98[2];
  int v99;
  uint64_t v100;
  _BYTE *v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int64_t v111;
  char *v112;
  int v113;
  int v114;
  unsigned __int8 *v115;
  int *v116;
  uint64_t v117;
  __int128 v118;
  uint64_t v119;
  _UNKNOWN **v120;
  __int128 v121;
  uint64_t v122;
  _UNKNOWN **v123;
  _QWORD *v124;
  __int128 v125;
  __int128 v126;
  _UNKNOWN **v127;
  __int128 v128;
  __int128 v129;
  _UNKNOWN **v130;
  uint64_t v131;

  v101 = a4;
  v105 = type metadata accessor for AxisMarkValues.Storage(0);
  v104 = *(_QWORD *)(v105 - 8);
  MEMORY[0x24BDAC7A8](v105);
  v8 = (char *)v98 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_2141D8BF8(&qword_253F147A8);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)v98 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v116 = (int *)type metadata accessor for AxisMarksConfiguration();
  v12 = *((_QWORD *)v116 - 1);
  MEMORY[0x24BDAC7A8](v116);
  v115 = (unsigned __int8 *)v98 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(a1 + 8);
  v100 = *(_QWORD *)(a1 + 16);
  if ((*(_BYTE *)(a2 + 1194) & 1) != 0)
  {
    v99 = 0;
    if (v14)
      goto LABEL_3;
LABEL_43:
    v16 = 0;
    goto LABEL_44;
  }
  if (*(_BYTE *)a1 == 3)
  {
    v91 = 1;
  }
  else
  {
    v92 = v14;
    v93 = sub_214423D2C();
    v14 = v92;
    v91 = v93 ^ 1;
  }
  v99 = v91;
  if (!v14)
    goto LABEL_43;
LABEL_3:
  v15 = *(_QWORD *)(v14 + 16);
  v16 = MEMORY[0x24BEE4AF8];
  if (!v15)
  {
LABEL_44:
    swift_retain();
    v94 = swift_bridgeObjectRetain();
    v95 = sub_214355E38(v94, a3);
    swift_bridgeObjectRelease();
    result = swift_release();
    v97 = v101;
    *v101 = v99 & 1;
    *((_QWORD *)v97 + 1) = v16;
    *((_QWORD *)v97 + 2) = v95;
    return result;
  }
  v131 = MEMORY[0x24BEE4AF8];
  v17 = v14;
  swift_bridgeObjectRetain();
  v111 = v15;
  sub_2141D41E4(0, v15, 0);
  v18 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v98[1] = v17;
  v19 = v17 + v18;
  v117 = a3 + 24;
  v102 = *(_QWORD *)(v12 + 72);
  v103 = v11;
  v112 = v8;
  while (1)
  {
    v110 = v19;
    v20 = v115;
    sub_2141FDEA0(v19, (uint64_t)v115, (uint64_t (*)(_QWORD))type metadata accessor for AxisMarksConfiguration);
    v114 = *v20;
    if (v114 == 3)
    {
      v109 = 0;
    }
    else
    {
      v21 = *(_QWORD *)(a3 + 16);
      v22 = v21 + 1;
      if (__OFADD__(v21, 1))
        goto LABEL_48;
      *(_QWORD *)(a3 + 16) = v22;
      *((_QWORD *)&v129 + 1) = sub_2141D8BF8(&qword_253F10390);
      v130 = &off_24D17F2F8;
      LOBYTE(v128) = v114;
      swift_beginAccess();
      sub_2141D8DC0(&v128, (uint64_t)&v125);
      swift_retain();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)&v118 = *(_QWORD *)(a3 + 24);
      *(_QWORD *)(a3 + 24) = 0x8000000000000000;
      v24 = sub_2142AB2FC((uint64_t)&v125, *((uint64_t *)&v126 + 1));
      MEMORY[0x24BDAC7A8](v24);
      v26 = (char *)v98 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *))(v27 + 16))(v26);
      v8 = v112;
      sub_214355938(*v26, v22, isUniquelyReferenced_nonNull_native, &v118, &qword_253F10390);
      _s6Charts15AnyChartContentVwxx_0((uint64_t)&v125);
      *(_QWORD *)(a3 + 24) = v118;
      swift_bridgeObjectRelease();
      swift_endAccess();
      v109 = *(_QWORD *)(a3 + 16);
      swift_release();
    }
    v113 = v20[1];
    if (v113 == 4)
    {
      v108 = 0;
    }
    else
    {
      v28 = *(_QWORD *)(a3 + 16);
      v29 = v28 + 1;
      if (__OFADD__(v28, 1))
        goto LABEL_49;
      *(_QWORD *)(a3 + 16) = v29;
      *((_QWORD *)&v129 + 1) = sub_2141D8BF8(&qword_253F10198);
      v130 = &off_24D17F2F8;
      LOBYTE(v128) = v113;
      swift_beginAccess();
      sub_2141D8DC0(&v128, (uint64_t)&v125);
      swift_retain();
      v30 = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)&v118 = *(_QWORD *)(a3 + 24);
      *(_QWORD *)(a3 + 24) = 0x8000000000000000;
      v31 = sub_2142AB2FC((uint64_t)&v125, *((uint64_t *)&v126 + 1));
      MEMORY[0x24BDAC7A8](v31);
      v33 = (char *)v98 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *))(v34 + 16))(v33);
      v8 = v112;
      sub_214355938(*v33, v29, v30, &v118, &qword_253F10198);
      _s6Charts15AnyChartContentVwxx_0((uint64_t)&v125);
      *(_QWORD *)(a3 + 24) = v118;
      swift_bridgeObjectRelease();
      swift_endAccess();
      v108 = *(_QWORD *)(a3 + 16);
      swift_release();
    }
    sub_2141E070C((uint64_t)&v20[v116[6]], (uint64_t)v11, &qword_253F147A8);
    v107 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v104 + 48))(v11, 1, v105);
    if (v107 == 1)
    {
      v35 = 0;
    }
    else
    {
      sub_2141E078C((uint64_t)v11, (uint64_t)v8);
      v36 = *(_QWORD *)(a3 + 16);
      v37 = v36 + 1;
      if (__OFADD__(v36, 1))
        goto LABEL_50;
      *(_QWORD *)(a3 + 16) = v37;
      *((_QWORD *)&v129 + 1) = sub_2141D8BF8(&qword_253F12028);
      v130 = &off_24D17F2F8;
      v38 = sub_2141D8DD8((uint64_t *)&v128);
      sub_2141FDEA0((uint64_t)v8, (uint64_t)v38, type metadata accessor for AxisMarkValues.Storage);
      swift_beginAccess();
      sub_2141D8DC0(&v128, (uint64_t)&v125);
      swift_retain();
      v39 = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)&v118 = *(_QWORD *)(a3 + 24);
      *(_QWORD *)(a3 + 24) = 0x8000000000000000;
      v40 = sub_2142AB2FC((uint64_t)&v125, *((uint64_t *)&v126 + 1));
      MEMORY[0x24BDAC7A8](v40);
      v42 = (char *)v98 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *))(v43 + 16))(v42);
      sub_214355AD4((uint64_t)v42, v37, v39, &v118);
      _s6Charts15AnyChartContentVwxx_0((uint64_t)&v125);
      *(_QWORD *)(a3 + 24) = v118;
      swift_bridgeObjectRelease();
      swift_endAccess();
      v35 = *(_QWORD *)(a3 + 16);
      sub_2141DD370((uint64_t)v8, type metadata accessor for AxisMarkValues.Storage);
      swift_release();
    }
    v44 = *(_QWORD *)(a3 + 16);
    v45 = v44 + 1;
    if (__OFADD__(v44, 1))
      break;
    v106 = v35;
    v46 = (uint64_t)&v20[v116[7]];
    *(_QWORD *)(a3 + 16) = v45;
    v47 = sub_2141D8BF8(&qword_253F12030);
    *((_QWORD *)&v129 + 1) = v47;
    v130 = &off_24D17F2F8;
    *(_QWORD *)&v128 = swift_allocObject();
    sub_2141DFD94(v46, v128 + 16);
    swift_beginAccess();
    sub_2141D8DC0(&v128, (uint64_t)&v125);
    v48 = swift_isUniquelyReferenced_nonNull_native();
    v124 = *(_QWORD **)(a3 + 24);
    v49 = v124;
    *(_QWORD *)(a3 + 24) = 0x8000000000000000;
    v50 = sub_2142AB2FC((uint64_t)&v125, *((uint64_t *)&v126 + 1));
    MEMORY[0x24BDAC7A8](v50);
    v52 = (_OWORD *)((char *)v98 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(_OWORD *))(v53 + 16))(v52);
    v122 = v47;
    v123 = &off_24D17F2F8;
    v54 = (_OWORD *)swift_allocObject();
    *(_QWORD *)&v121 = v54;
    v55 = v52[1];
    v54[1] = *v52;
    v54[2] = v55;
    *(_OWORD *)((char *)v54 + 41) = *(_OWORD *)((char *)v52 + 25);
    v57 = sub_214336CE4(v45);
    v58 = v49[2];
    v59 = (v56 & 1) == 0;
    v60 = v58 + v59;
    if (__OFADD__(v58, v59))
      goto LABEL_46;
    v61 = v56;
    if (v49[3] >= v60)
    {
      if ((v48 & 1) != 0)
      {
        v64 = v124;
        if ((v56 & 1) != 0)
          goto LABEL_25;
      }
      else
      {
        sub_2142A732C();
        v64 = v124;
        if ((v61 & 1) != 0)
          goto LABEL_25;
      }
    }
    else
    {
      sub_21429B600(v60, v48);
      v62 = sub_214336CE4(v45);
      if ((v61 & 1) != (v63 & 1))
        goto LABEL_52;
      v57 = v62;
      v64 = v124;
      if ((v61 & 1) != 0)
      {
LABEL_25:
        v65 = v64[7] + 40 * v57;
        _s6Charts15AnyChartContentVwxx_0(v65);
        sub_2141D8DC0(&v121, v65);
        goto LABEL_29;
      }
    }
    v66 = sub_2142AB2FC((uint64_t)&v121, v122);
    MEMORY[0x24BDAC7A8](v66);
    v68 = (_OWORD *)((char *)v98 - ((v67 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(_OWORD *))(v69 + 16))(v68);
    v119 = v47;
    v120 = &off_24D17F2F8;
    v70 = (_OWORD *)swift_allocObject();
    *(_QWORD *)&v118 = v70;
    *(_OWORD *)((char *)v70 + 41) = *(_OWORD *)((char *)v68 + 25);
    v71 = v68[1];
    v70[1] = *v68;
    v70[2] = v71;
    v64[(v57 >> 6) + 8] |= 1 << v57;
    *(_QWORD *)(v64[6] + 8 * v57) = v45;
    sub_2141D8DC0(&v118, v64[7] + 40 * v57);
    v72 = v64[2];
    v73 = __OFADD__(v72, 1);
    v74 = v72 + 1;
    if (v73)
      goto LABEL_51;
    v64[2] = v74;
    _s6Charts15AnyChartContentVwxx_0((uint64_t)&v121);
LABEL_29:
    _s6Charts15AnyChartContentVwxx_0((uint64_t)&v125);
    *(_QWORD *)(a3 + 24) = v64;
    swift_bridgeObjectRelease();
    swift_endAccess();
    v75 = *(_QWORD *)(a3 + 16);
    sub_2141E070C((uint64_t)&v115[v116[8]], (uint64_t)&v128, &qword_253F11E60);
    v76 = *((_QWORD *)&v129 + 1);
    v8 = v112;
    if (*((_QWORD *)&v129 + 1))
    {
      v125 = v128;
      v126 = v129;
      v127 = v130;
      v77 = *(_QWORD *)(a3 + 16);
      v78 = v77 + 1;
      if (__OFADD__(v77, 1))
        goto LABEL_47;
      *(_QWORD *)(a3 + 16) = v78;
      v122 = sub_2141D8BF8(&qword_253F103D8);
      v123 = &off_24D17F2F8;
      *(_QWORD *)&v121 = swift_allocObject();
      sub_214357A60((uint64_t)&v125, v121 + 16);
      swift_beginAccess();
      sub_2141D8DC0(&v121, (uint64_t)&v118);
      swift_retain();
      v79 = swift_isUniquelyReferenced_nonNull_native();
      v124 = *(_QWORD **)(a3 + 24);
      *(_QWORD *)(a3 + 24) = 0x8000000000000000;
      v80 = sub_2142AB2FC((uint64_t)&v118, v119);
      MEMORY[0x24BDAC7A8](v80);
      v82 = (char *)v98 - ((v81 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *))(v83 + 16))(v82);
      sub_214355C7C((uint64_t)v82, v78, v79, &v124);
      _s6Charts15AnyChartContentVwxx_0((uint64_t)&v118);
      *(_QWORD *)(a3 + 24) = v124;
      swift_bridgeObjectRelease();
      swift_endAccess();
      v84 = *(_QWORD *)(a3 + 16);
      sub_2141DEB7C((uint64_t)&v125);
      swift_release();
    }
    else
    {
      v84 = 0;
    }
    sub_2141DD370((uint64_t)v115, (uint64_t (*)(_QWORD))type metadata accessor for AxisMarksConfiguration);
    v16 = v131;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_2141D41E4(0, *(_QWORD *)(v16 + 16) + 1, 1);
      v16 = v131;
    }
    v85 = v111;
    v87 = *(_QWORD *)(v16 + 16);
    v86 = *(_QWORD *)(v16 + 24);
    if (v87 >= v86 >> 1)
    {
      sub_2141D41E4((char *)(v86 > 1), v87 + 1, 1);
      v85 = v111;
      v16 = v131;
    }
    *(_QWORD *)(v16 + 16) = v87 + 1;
    v88 = v16 + 80 * v87;
    *(_QWORD *)(v88 + 32) = v109;
    v89 = v107 == 1;
    v90 = v113 == 4;
    *(_BYTE *)(v88 + 40) = v114 == 3;
    *(_QWORD *)(v88 + 48) = v108;
    *(_BYTE *)(v88 + 56) = v90;
    *(_QWORD *)(v88 + 64) = v106;
    *(_BYTE *)(v88 + 72) = v89;
    *(_QWORD *)(v88 + 80) = v75;
    *(_BYTE *)(v88 + 88) = 0;
    *(_QWORD *)(v88 + 96) = v84;
    *(_BYTE *)(v88 + 104) = v76 == 0;
    v19 = v110 + v102;
    v111 = v85 - 1;
    v11 = v103;
    if (v85 == 1)
    {
      swift_bridgeObjectRelease();
      goto LABEL_44;
    }
  }
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  result = sub_214425820();
  __break(1u);
  return result;
}

uint64_t sub_214354948(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[5];
  __int16 v8;
  _OWORD v9[5];
  __int16 v10;

  v2 = *(_OWORD *)(a1 + 48);
  v7[2] = *(_OWORD *)(a1 + 32);
  v7[3] = v2;
  v7[4] = *(_OWORD *)(a1 + 64);
  v8 = *(_WORD *)(a1 + 80);
  v3 = *(_OWORD *)(a1 + 16);
  v7[0] = *(_OWORD *)a1;
  v7[1] = v3;
  v4 = *(_OWORD *)(a2 + 48);
  v9[2] = *(_OWORD *)(a2 + 32);
  v9[3] = v4;
  v9[4] = *(_OWORD *)(a2 + 64);
  v10 = *(_WORD *)(a2 + 80);
  v5 = *(_OWORD *)(a2 + 16);
  v9[0] = *(_OWORD *)a2;
  v9[1] = v5;
  return sub_214354EB4((uint64_t)v7, (uint64_t)v9) & 1;
}

uint64_t sub_2143549B0()
{
  sub_214425874();
  sub_214425880();
  sub_214425880();
  sub_21442588C();
  return sub_2144258B0();
}

uint64_t sub_214354A18()
{
  sub_214425874();
  sub_214425880();
  sub_214425880();
  return sub_2144258B0();
}

uint64_t sub_214354A74()
{
  sub_214425880();
  return sub_214425880();
}

uint64_t sub_214354AB0()
{
  sub_214425874();
  sub_214425880();
  sub_214425880();
  return sub_2144258B0();
}

uint64_t sub_214354B08()
{
  return sub_2143549B0();
}

uint64_t sub_214354B28()
{
  sub_214425880();
  sub_214425880();
  return sub_21442588C();
}

uint64_t sub_214354B70()
{
  sub_214425874();
  sub_214425880();
  sub_214425880();
  sub_21442588C();
  return sub_2144258B0();
}

uint64_t sub_214354BD8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  BOOL v7;

  v2 = *a1;
  v3 = *a2;
  v4 = *((unsigned __int8 *)a2 + 8);
  if (*((_BYTE *)a1 + 8))
  {
    if (*((_BYTE *)a1 + 8) == 1)
    {
      if (v4 != 1 || v2 != v3)
        return 0;
    }
    else if (v4 != 2 || v2 != v3)
    {
      return 0;
    }
  }
  else
  {
    if (*((_BYTE *)a2 + 8))
      v7 = 0;
    else
      v7 = v2 == v3;
    if (!v7)
      return 0;
  }
  return *((unsigned __int8 *)a1 + 9) ^ *((unsigned __int8 *)a2 + 9) ^ 1u;
}

uint64_t sub_214354C44(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  return ((uint64_t (*)(void))((char *)sub_214354C60 + 4 * byte_21442D7B0[a3]))();
}

BOOL sub_214354C60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  BOOL v6;

  if (a6)
    v6 = 0;
  else
    v6 = a1 == a4;
  return v6 && a2 == a5;
}

BOOL sub_214354C74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  return a6 == 1 && a1 == a4;
}

BOOL sub_214354D34@<W0>(uint64_t a1@<X0>, uint64_t a2@<X3>, int a3@<W8>)
{
  return a3 == 3 && a1 == a2;
}

uint64_t sub_214354D54(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  uint64_t result;

  result = 0;
  if (a1 == a5 && a2 == a6)
  {
    if (a4 == -1)
    {
      if (a8 == -1)
        return 1;
    }
    else if (a8 != -1)
    {
      if (a4)
      {
        if (a4 == 1)
        {
          if (a8 != 1)
            return 0;
        }
        else if (a8 != 2)
        {
          return 0;
        }
      }
      else if (a8)
      {
        return 0;
      }
      if (a3 == a7)
        return 1;
    }
    return 0;
  }
  return result;
}

uint64_t sub_214354DDC(uint64_t a1, uint64_t a2, uint64_t a3, __int16 a4)
{
  return ((uint64_t (*)(void))((char *)sub_214354E04 + 4 * byte_21442D7BC[HIBYTE(a4)]))();
}

BOOL sub_214354E04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v5;

  return !v5 && a1 == a5;
}

uint64_t sub_214354EB4(uint64_t a1, uint64_t a2)
{
  char v2;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;

  v2 = 0;
  if (*(_QWORD *)a1 == *(_QWORD *)a2
    && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8)
    && *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16))
  {
    if (((*(unsigned __int8 *)(a1 + 24) ^ *(unsigned __int8 *)(a2 + 24)) & 1) != 0)
      goto LABEL_8;
    v5 = *(_QWORD *)(a1 + 40);
    v6 = *(unsigned __int16 *)(a1 + 48);
    v8 = *(_QWORD *)(a1 + 56);
    v7 = *(_QWORD *)(a1 + 64);
    v9 = *(_QWORD *)(a2 + 40);
    v10 = *(unsigned __int16 *)(a2 + 48);
    v12 = *(_QWORD *)(a2 + 56);
    v11 = *(_QWORD *)(a2 + 64);
    if ((sub_214352D10(*(_QWORD *)(a1 + 32), *(_QWORD *)(a2 + 32)) & 1) == 0
      || (sub_214352EE4(v5, v9) & 1) == 0
      || ((v6 ^ v10) & 1) != 0)
    {
LABEL_8:
      v2 = 0;
      return v2 & 1;
    }
    v2 = 0;
    if (((v6 & 0x100) == 0) != (unsigned __int16)(v10 & 0x100) >> 8 && v8 == v12 && v7 == v11)
    {
      if ((sub_2143532E0(*(_QWORD *)(a1 + 72), *(_QWORD *)(a2 + 72)) & 1) != 0
        && ((*(unsigned __int8 *)(a1 + 80) ^ *(unsigned __int8 *)(a2 + 80)) & 1) == 0)
      {
        v2 = ((*(_BYTE *)(a1 + 81) & 1) == 0) ^ *(_BYTE *)(a2 + 81);
        return v2 & 1;
      }
      goto LABEL_8;
    }
  }
  return v2 & 1;
}

uint64_t sub_214354FD8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  double v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;

  v2 = *(unsigned __int8 *)(a1 + 8);
  v3 = *(unsigned __int8 *)(a2 + 8);
  if ((_DWORD)v2 == 255)
  {
    if (v3 != 255)
      return 0;
  }
  else
  {
    if (v3 == 255)
      return 0;
    v4 = *(double *)a1;
    if (*(_BYTE *)(a1 + 8))
    {
      if ((_DWORD)v2 != 1)
        __asm { BR              X12 }
      v2 = 0;
      if (v3 != 1)
        return v2;
    }
    else if (*(_BYTE *)(a2 + 8))
    {
      return v2;
    }
    if (v4 != *(double *)a2)
      return v2;
  }
  v5 = *(unsigned __int16 *)(a1 + 40);
  v6 = *(unsigned __int16 *)(a2 + 40);
  v7 = v6 >> 8;
  if (v6 >> 8 > 0xFE)
    return 0;
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(a2 + 16);
  v10 = *(_WORD *)(a2 + 40);
  switch(v5 >> 8)
  {
    case 0u:
    case 4u:
    case 5u:
    case 6u:
    case 7u:
    case 8u:
    case 9u:
    case 0xAu:
    case 0xBu:
    case 0xCu:
    case 0xDu:
    case 0xEu:
    case 0xFu:
    case 0x10u:
      v2 = 0;
      if ((v6 & 0xFF00) == 0)
        goto LABEL_22;
      break;
    case 1u:
      v2 = 0;
      if (v7 == 1)
        goto LABEL_22;
      break;
    case 2u:
      v2 = 0;
      if (v7 == 2)
      {
LABEL_22:
        if (v8 == v9)
          goto LABEL_23;
      }
      break;
    case 3u:
      if (v7 != 3)
        return 0;
      v2 = 0;
      if (v8 == v9 && *(_QWORD *)(a1 + 24) == *(_QWORD *)(a2 + 24))
      {
        if ((_BYTE)v5 == 0xFF)
        {
          if (v10 == 255)
            goto LABEL_23;
          return 0;
        }
        if (v10 == 255)
          return 0;
        v2 = *(_WORD *)(a1 + 40);
        if (*(_WORD *)(a1 + 40))
        {
          if ((_DWORD)v2 == 1)
          {
            v2 = 0;
            if (v10 != 1)
              return v2;
          }
          else
          {
            v2 = 0;
            if (v10 != 2)
              return v2;
          }
        }
        else if (*(_WORD *)(a2 + 40))
        {
          return v2;
        }
        if (*(_QWORD *)(a1 + 32) == *(_QWORD *)(a2 + 32))
          goto LABEL_23;
      }
      break;
    default:
      if (v6 >> 8 <= 0xFE)
        return 0;
LABEL_23:
      v11 = *(unsigned __int8 *)(a1 + 64);
      v12 = *(unsigned __int8 *)(a2 + 64);
      if (v11 == 255)
      {
        if (v12 != 255)
          return 0;
      }
      else if (v12 == 255 || (sub_214354C44(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), v11) & 1) == 0)
      {
        return 0;
      }
      v2 = 1;
      break;
  }
  return v2;
}

uint64_t sub_214355224(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(_BYTE *)(a1 + 48);
  sub_2141EF1BC(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
  sub_2141EF1BC(v2, v3, v4);
  return a1;
}

BOOL sub_214355274(uint64_t a1, char a2, uint64_t a3, char a4)
{
  return a4 == a2 && a1 == a3;
}

uint64_t sub_214355288(unint64_t a1, uint64_t a2, _QWORD *a3, double a4)
{
  uint64_t result;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  _UNKNOWN **v14;

  v13 = sub_2141D8BF8(&qword_253F13008);
  v14 = &off_24D17F2F8;
  *(double *)&v12 = a4;
  a3[(a1 >> 6) + 8] |= 1 << a1;
  *(_QWORD *)(a3[6] + 8 * a1) = a2;
  result = sub_2141D8DC0(&v12, a3[7] + 40 * a1);
  v9 = a3[2];
  v10 = __OFADD__(v9, 1);
  v11 = v9 + 1;
  if (v10)
    __break(1u);
  else
    a3[2] = v11;
  return result;
}

uint64_t sub_214355330(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  _UNKNOWN **v16;

  v15 = sub_2141D8BF8(&qword_254D6B6F8);
  v16 = &off_24D17F2F8;
  *(_QWORD *)&v14 = a3;
  *((_QWORD *)&v14 + 1) = a4;
  a5[(a1 >> 6) + 8] |= 1 << a1;
  *(_QWORD *)(a5[6] + 8 * a1) = a2;
  result = sub_2141D8DC0(&v14, a5[7] + 40 * a1);
  v11 = a5[2];
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  if (v12)
    __break(1u);
  else
    a5[2] = v13;
  return result;
}

uint64_t sub_2143553DC(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  __int128 v9;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  _UNKNOWN **v16;

  v15 = sub_2141D8BF8(&qword_253F103D8);
  v16 = &off_24D17F2F8;
  v8 = swift_allocObject();
  *(_QWORD *)&v14 = v8;
  v9 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(v8 + 16) = *(_OWORD *)a3;
  *(_OWORD *)(v8 + 32) = v9;
  *(_QWORD *)(v8 + 48) = *(_QWORD *)(a3 + 32);
  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(_QWORD *)(a4[6] + 8 * a1) = a2;
  result = sub_2141D8DC0(&v14, a4[7] + 40 * a1);
  v11 = a4[2];
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  if (v12)
    __break(1u);
  else
    a4[2] = v13;
  return result;
}

uint64_t sub_2143554A0(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t *v8;
  uint64_t result;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  _UNKNOWN **v15;

  v14 = sub_2141D8BF8(&qword_253F12028);
  v15 = &off_24D17F2F8;
  v8 = sub_2141D8DD8((uint64_t *)&v13);
  sub_2141E801C(a3, (uint64_t)v8, &qword_253F12028);
  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(_QWORD *)(a4[6] + 8 * a1) = a2;
  result = sub_2141D8DC0(&v13, a4[7] + 40 * a1);
  v10 = a4[2];
  v11 = __OFADD__(v10, 1);
  v12 = v10 + 1;
  if (v11)
    __break(1u);
  else
    a4[2] = v12;
  return result;
}

uint64_t sub_214355560(unint64_t a1, uint64_t a2, char a3, _QWORD *a4, uint64_t *a5)
{
  uint64_t result;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  _UNKNOWN **v15;

  v14 = sub_2141D8BF8(a5);
  v15 = &off_24D17F2F8;
  LOBYTE(v13) = a3;
  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(_QWORD *)(a4[6] + 8 * a1) = a2;
  result = sub_2141D8DC0(&v13, a4[7] + 40 * a1);
  v10 = a4[2];
  v11 = __OFADD__(v10, 1);
  v12 = v10 + 1;
  if (v11)
    __break(1u);
  else
    a4[2] = v12;
  return result;
}

uint64_t sub_2143555FC(uint64_t a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5)
{
  uint64_t v10;
  _QWORD *v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t result;
  unint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  _UNKNOWN **v31;

  v10 = sub_2141D8BF8(&qword_254D6B6F8);
  v30 = v10;
  v31 = &off_24D17F2F8;
  *(_QWORD *)&v29 = a1;
  *((_QWORD *)&v29 + 1) = a2;
  v11 = (_QWORD *)*a5;
  v13 = sub_214336CE4(a3);
  v14 = v11[2];
  v15 = (v12 & 1) == 0;
  v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
    goto LABEL_14;
  }
  v17 = v12;
  v18 = v11[3];
  if (v18 >= v16 && (a4 & 1) != 0)
  {
LABEL_7:
    v19 = (_QWORD *)*a5;
    if ((v17 & 1) != 0)
    {
LABEL_8:
      v20 = v19[7] + 40 * v13;
      _s6Charts15AnyChartContentVwxx_0(v20);
      return sub_2141D8DC0(&v29, v20);
    }
    goto LABEL_11;
  }
  if (v18 >= v16 && (a4 & 1) == 0)
  {
    sub_2142A732C();
    goto LABEL_7;
  }
  sub_21429B600(v16, a4 & 1);
  v22 = sub_214336CE4(a3);
  if ((v17 & 1) != (v23 & 1))
  {
LABEL_14:
    result = sub_214425820();
    __break(1u);
    return result;
  }
  v13 = v22;
  v19 = (_QWORD *)*a5;
  if ((v17 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  v24 = sub_2142AB2FC((uint64_t)&v29, v10);
  MEMORY[0x24BDAC7A8](v24);
  v26 = (uint64_t *)((char *)&v28 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v27 + 16))(v26);
  sub_214355330(v13, a3, *v26, v26[1], v19);
  return _s6Charts15AnyChartContentVwxx_0((uint64_t)&v29);
}

uint64_t sub_214355798(uint64_t a1, char a2, _QWORD *a3, double a4)
{
  uint64_t v8;
  _QWORD *v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t result;
  unint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  double *v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  _UNKNOWN **v29;

  v8 = sub_2141D8BF8(&qword_253F13008);
  v28 = v8;
  v29 = &off_24D17F2F8;
  *(double *)&v27 = a4;
  v9 = (_QWORD *)*a3;
  v11 = sub_214336CE4(a1);
  v12 = v9[2];
  v13 = (v10 & 1) == 0;
  v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
  }
  else
  {
    v15 = v10;
    v16 = v9[3];
    if (v16 >= v14 && (a2 & 1) != 0)
    {
LABEL_7:
      v17 = (_QWORD *)*a3;
      if ((v15 & 1) != 0)
      {
LABEL_8:
        v18 = v17[7] + 40 * v11;
        _s6Charts15AnyChartContentVwxx_0(v18);
        return sub_2141D8DC0(&v27, v18);
      }
      goto LABEL_11;
    }
    if (v16 >= v14 && (a2 & 1) == 0)
    {
      sub_2142A732C();
      goto LABEL_7;
    }
    sub_21429B600(v14, a2 & 1);
    v20 = sub_214336CE4(a1);
    if ((v15 & 1) == (v21 & 1))
    {
      v11 = v20;
      v17 = (_QWORD *)*a3;
      if ((v15 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      v22 = sub_2142AB2FC((uint64_t)&v27, v8);
      MEMORY[0x24BDAC7A8](v22);
      v24 = (double *)((char *)&v26 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
      (*(void (**)(double *))(v25 + 16))(v24);
      sub_214355288(v11, a1, v17, *v24);
      return _s6Charts15AnyChartContentVwxx_0((uint64_t)&v27);
    }
  }
  result = sub_214425820();
  __break(1u);
  return result;
}

uint64_t sub_214355938(char a1, uint64_t a2, char a3, _QWORD *a4, uint64_t *a5)
{
  uint64_t v10;
  _QWORD *v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t result;
  unint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  _UNKNOWN **v31;

  v10 = sub_2141D8BF8(a5);
  v30 = v10;
  v31 = &off_24D17F2F8;
  LOBYTE(v29) = a1;
  v11 = (_QWORD *)*a4;
  v13 = sub_214336CE4(a2);
  v14 = v11[2];
  v15 = (v12 & 1) == 0;
  v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
    goto LABEL_14;
  }
  v17 = v12;
  v18 = v11[3];
  if (v18 >= v16 && (a3 & 1) != 0)
  {
LABEL_7:
    v19 = (_QWORD *)*a4;
    if ((v17 & 1) != 0)
    {
LABEL_8:
      v20 = v19[7] + 40 * v13;
      _s6Charts15AnyChartContentVwxx_0(v20);
      return sub_2141D8DC0(&v29, v20);
    }
    goto LABEL_11;
  }
  if (v18 >= v16 && (a3 & 1) == 0)
  {
    sub_2142A732C();
    goto LABEL_7;
  }
  sub_21429B600(v16, a3 & 1);
  v22 = sub_214336CE4(a2);
  if ((v17 & 1) != (v23 & 1))
  {
LABEL_14:
    result = sub_214425820();
    __break(1u);
    return result;
  }
  v13 = v22;
  v19 = (_QWORD *)*a4;
  if ((v17 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  v24 = sub_2142AB2FC((uint64_t)&v29, v10);
  MEMORY[0x24BDAC7A8](v24);
  v26 = (char *)&v28 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v27 + 16))(v26);
  sub_214355560(v13, a2, *v26, v19, a5);
  return _s6Charts15AnyChartContentVwxx_0((uint64_t)&v29);
}

uint64_t sub_214355AD4(uint64_t a1, uint64_t a2, char a3, _QWORD *a4)
{
  uint64_t *v8;
  _QWORD *v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t result;
  unint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  _UNKNOWN **v29;

  v28 = sub_2141D8BF8(&qword_253F12028);
  v29 = &off_24D17F2F8;
  v8 = sub_2141D8DD8((uint64_t *)&v27);
  sub_2141E801C(a1, (uint64_t)v8, &qword_253F12028);
  v9 = (_QWORD *)*a4;
  v11 = sub_214336CE4(a2);
  v12 = v9[2];
  v13 = (v10 & 1) == 0;
  v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
    goto LABEL_14;
  }
  v15 = v10;
  v16 = v9[3];
  if (v16 >= v14 && (a3 & 1) != 0)
  {
LABEL_7:
    v17 = (_QWORD *)*a4;
    if ((v15 & 1) != 0)
    {
LABEL_8:
      v18 = v17[7] + 40 * v11;
      _s6Charts15AnyChartContentVwxx_0(v18);
      return sub_2141D8DC0(&v27, v18);
    }
    goto LABEL_11;
  }
  if (v16 >= v14 && (a3 & 1) == 0)
  {
    sub_2142A732C();
    goto LABEL_7;
  }
  sub_21429B600(v14, a3 & 1);
  v20 = sub_214336CE4(a2);
  if ((v15 & 1) != (v21 & 1))
  {
LABEL_14:
    result = sub_214425820();
    __break(1u);
    return result;
  }
  v11 = v20;
  v17 = (_QWORD *)*a4;
  if ((v15 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  v22 = sub_2142AB2FC((uint64_t)&v27, v28);
  MEMORY[0x24BDAC7A8](v22);
  v24 = (char *)&v26 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v25 + 16))(v24);
  sub_2143554A0(v11, a2, (uint64_t)v24, v17);
  return _s6Charts15AnyChartContentVwxx_0((uint64_t)&v27);
}

uint64_t sub_214355C7C(uint64_t a1, uint64_t a2, char a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  _QWORD *v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t result;
  unint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  _UNKNOWN **v31;

  v8 = sub_2141D8BF8(&qword_253F103D8);
  v30 = v8;
  v31 = &off_24D17F2F8;
  v9 = swift_allocObject();
  *(_QWORD *)&v29 = v9;
  v10 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v9 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v9 + 32) = v10;
  *(_QWORD *)(v9 + 48) = *(_QWORD *)(a1 + 32);
  v11 = (_QWORD *)*a4;
  v13 = sub_214336CE4(a2);
  v14 = v11[2];
  v15 = (v12 & 1) == 0;
  v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
    goto LABEL_14;
  }
  v17 = v12;
  v18 = v11[3];
  if (v18 >= v16 && (a3 & 1) != 0)
  {
LABEL_7:
    v19 = (_QWORD *)*a4;
    if ((v17 & 1) != 0)
    {
LABEL_8:
      v20 = v19[7] + 40 * v13;
      _s6Charts15AnyChartContentVwxx_0(v20);
      return sub_2141D8DC0(&v29, v20);
    }
    goto LABEL_11;
  }
  if (v18 >= v16 && (a3 & 1) == 0)
  {
    sub_2142A732C();
    goto LABEL_7;
  }
  sub_21429B600(v16, a3 & 1);
  v22 = sub_214336CE4(a2);
  if ((v17 & 1) != (v23 & 1))
  {
LABEL_14:
    result = sub_214425820();
    __break(1u);
    return result;
  }
  v13 = v22;
  v19 = (_QWORD *)*a4;
  if ((v17 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  v24 = sub_2142AB2FC((uint64_t)&v29, v8);
  MEMORY[0x24BDAC7A8](v24);
  v26 = (char *)&v28 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v27 + 16))(v26);
  sub_2143553DC(v13, a2, (uint64_t)v26, v19);
  return _s6Charts15AnyChartContentVwxx_0((uint64_t)&v29);
}

uint64_t sub_214355E38(uint64_t a1, uint64_t a2)
{
  int64_t v2;
  uint64_t v3;
  unsigned __int8 *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;
  uint64_t v22;
  double *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  _QWORD *v29;
  char v30;
  unint64_t v31;
  uint64_t v32;
  _BOOL8 v33;
  uint64_t v34;
  char v35;
  unint64_t v36;
  char v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  int64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t result;
  _QWORD v56[2];
  uint64_t v57;
  int64_t v58;
  int v59;
  uint64_t v60;
  int v61;
  int v62;
  __int128 v63;
  uint64_t v64;
  _UNKNOWN **v65;
  _QWORD *v66;
  __int128 v67;
  uint64_t v68;
  _QWORD v69[3];
  __int128 v70;
  uint64_t v71;
  _UNKNOWN **v72;
  uint64_t v73;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = MEMORY[0x24BEE4AF8];
  if (!v2)
    return v3;
  v73 = MEMORY[0x24BEE4AF8];
  sub_2141D41C8(0, v2, 0);
  v6 = (unsigned __int8 *)(a1 + 112);
  v56[1] = a2 + 24;
  while (1)
  {
    v7 = *(v6 - 16);
    v61 = *(v6 - 40);
    v62 = v7;
    if ((v7 & 1) != 0)
    {
      v60 = 0;
    }
    else
    {
      v8 = *(_QWORD *)(a2 + 16);
      v9 = v8 + 1;
      if (__OFADD__(v8, 1))
        goto LABEL_30;
      v10 = *((_QWORD *)v6 - 4);
      v11 = *((_QWORD *)v6 - 3);
      *(_QWORD *)(a2 + 16) = v9;
      v71 = sub_2141D8BF8(&qword_254D6B6F8);
      v72 = &off_24D17F2F8;
      *(_QWORD *)&v70 = v10;
      *((_QWORD *)&v70 + 1) = v11;
      swift_beginAccess();
      sub_2141D8DC0(&v70, (uint64_t)&v67);
      swift_retain();
      LOBYTE(v10) = swift_isUniquelyReferenced_nonNull_native();
      v69[0] = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a2 + 24) = 0x8000000000000000;
      v12 = sub_2142AB2FC((uint64_t)&v67, v68);
      MEMORY[0x24BDAC7A8](v12);
      v14 = (_QWORD *)((char *)v56 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
      (*(void (**)(uint64_t *))(v15 + 16))(v14);
      sub_2143555FC(*v14, v14[1], v9, v10, v69);
      _s6Charts15AnyChartContentVwxx_0((uint64_t)&v67);
      *(_QWORD *)(a2 + 24) = v69[0];
      swift_bridgeObjectRelease();
      swift_endAccess();
      v60 = *(_QWORD *)(a2 + 16);
      swift_release();
    }
    v59 = *v6;
    if ((v59 & 1) != 0)
    {
      v16 = 0;
    }
    else
    {
      v17 = *(_QWORD *)(a2 + 16);
      v18 = v17 + 1;
      if (__OFADD__(v17, 1))
        goto LABEL_31;
      v19 = *((_QWORD *)v6 - 1);
      *(_QWORD *)(a2 + 16) = v18;
      v71 = sub_2141D8BF8(&qword_253F13008);
      v72 = &off_24D17F2F8;
      *(_QWORD *)&v70 = v19;
      swift_beginAccess();
      sub_2141D8DC0(&v70, (uint64_t)&v67);
      swift_retain();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v69[0] = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a2 + 24) = 0x8000000000000000;
      v21 = sub_2142AB2FC((uint64_t)&v67, v68);
      MEMORY[0x24BDAC7A8](v21);
      v23 = (double *)((char *)v56 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
      (*(void (**)(double *))(v24 + 16))(v23);
      sub_214355798(v18, isUniquelyReferenced_nonNull_native, v69, *v23);
      _s6Charts15AnyChartContentVwxx_0((uint64_t)&v67);
      *(_QWORD *)(a2 + 24) = v69[0];
      swift_bridgeObjectRelease();
      swift_endAccess();
      v16 = *(_QWORD *)(a2 + 16);
      swift_release();
    }
    v25 = *(_QWORD *)(a2 + 16);
    v26 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    v58 = v2;
    *(_QWORD *)(a2 + 16) = v26;
    v27 = sub_2141D8BF8(&qword_254D6B6F0);
    v71 = v27;
    v72 = &off_24D17F2F8;
    *(_QWORD *)&v70 = swift_allocObject();
    sub_2141D7878((uint64_t)(v6 - 80), v70 + 16);
    swift_beginAccess();
    sub_2141D8DC0(&v70, (uint64_t)&v67);
    v28 = swift_isUniquelyReferenced_nonNull_native();
    v66 = *(_QWORD **)(a2 + 24);
    v29 = v66;
    *(_QWORD *)(a2 + 24) = 0x8000000000000000;
    v31 = sub_214336CE4(v26);
    v32 = v29[2];
    v33 = (v30 & 1) == 0;
    v34 = v32 + v33;
    if (__OFADD__(v32, v33))
      goto LABEL_29;
    v35 = v30;
    if (v29[3] >= v34)
    {
      if ((v28 & 1) == 0)
        sub_2142A732C();
    }
    else
    {
      sub_21429B600(v34, v28);
      v36 = sub_214336CE4(v26);
      if ((v35 & 1) != (v37 & 1))
        goto LABEL_33;
      v31 = v36;
    }
    v57 = v16;
    v38 = v66;
    if ((v35 & 1) != 0)
    {
      v39 = v66[7] + 40 * v31;
      _s6Charts15AnyChartContentVwxx_0(v39);
      sub_2141D8DC0(&v67, v39);
    }
    else
    {
      v40 = sub_2142AB2FC((uint64_t)&v67, v68);
      MEMORY[0x24BDAC7A8](v40);
      v42 = (char *)v56 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *))(v43 + 16))(v42);
      v64 = v27;
      v65 = &off_24D17F2F8;
      v44 = swift_allocObject();
      *(_QWORD *)&v63 = v44;
      *(_QWORD *)(v44 + 48) = *((_QWORD *)v42 + 4);
      v45 = *((_OWORD *)v42 + 1);
      *(_OWORD *)(v44 + 16) = *(_OWORD *)v42;
      *(_OWORD *)(v44 + 32) = v45;
      v38[(v31 >> 6) + 8] |= 1 << v31;
      *(_QWORD *)(v38[6] + 8 * v31) = v26;
      sub_2141D8DC0(&v63, v38[7] + 40 * v31);
      v46 = v38[2];
      v47 = __OFADD__(v46, 1);
      v48 = v46 + 1;
      if (v47)
        goto LABEL_32;
      v38[2] = v48;
      _s6Charts15AnyChartContentVwxx_0((uint64_t)&v67);
    }
    *(_QWORD *)(a2 + 24) = v38;
    swift_bridgeObjectRelease();
    swift_endAccess();
    v49 = *(_QWORD *)(a2 + 16);
    v3 = v73;
    v50 = swift_isUniquelyReferenced_nonNull_native();
    v51 = v58;
    if ((v50 & 1) == 0)
    {
      sub_2141D41C8(0, *(_QWORD *)(v3 + 16) + 1, 1);
      v3 = v73;
    }
    v53 = *(_QWORD *)(v3 + 16);
    v52 = *(_QWORD *)(v3 + 24);
    if (v53 >= v52 >> 1)
    {
      sub_2141D41C8((char *)(v52 > 1), v53 + 1, 1);
      v3 = v73;
    }
    *(_QWORD *)(v3 + 16) = v53 + 1;
    v54 = v3 + 48 * v53;
    *(_BYTE *)(v54 + 32) = v61;
    *(_QWORD *)(v54 + 40) = v60;
    *(_BYTE *)(v54 + 48) = v62;
    *(_QWORD *)(v54 + 56) = v57;
    *(_BYTE *)(v54 + 64) = v59;
    *(_QWORD *)(v54 + 72) = v49;
    v6 += 88;
    v2 = v51 - 1;
    if (!v2)
      return v3;
  }
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
LABEL_33:
  result = sub_214425820();
  __break(1u);
  return result;
}

uint64_t sub_21435643C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v11[2];
  __int128 v12;
  char v13;
  _BYTE v14[24];
  __int128 v15;
  char v16;
  _BYTE v17[24];
  _QWORD v18[2];
  char v19;
  _QWORD v20[2];
  char v21;
  __int16 v22;

  v15 = *(_OWORD *)a1;
  v16 = *(_BYTE *)(a1 + 16);
  sub_2141E801C((uint64_t)&v15, (uint64_t)v17, &qword_253F13A78);
  sub_2141E801C((uint64_t)v17, (uint64_t)v18, &qword_253F13A78);
  if (v19 == 1)
  {
    v12 = *(_OWORD *)(a1 + 24);
    v13 = *(_BYTE *)(a1 + 40);
    sub_2141E801C((uint64_t)&v12, (uint64_t)v14, &qword_253F13A78);
    sub_2141E801C((uint64_t)v14, (uint64_t)v20, &qword_253F13A78);
    if (v21 == 1)
    {
      v2 = *(_QWORD *)(a1 + 48);
      if (!*(_QWORD *)(v2 + 16))
      {
        swift_release();
        sub_214357A9C(a1);
        return 0;
      }
      swift_bridgeObjectRetain_n();
      v3 = sub_2143DEC24(v2);
      swift_bridgeObjectRelease_n();
    }
    else
    {
      v7 = v20[0];
      v8 = v20[1];
      sub_2141D8BF8(&qword_253F15D48);
      v9 = swift_allocObject();
      *(_OWORD *)(v9 + 16) = xmmword_2144271D0;
      *(_QWORD *)(v9 + 32) = v7;
      *(_QWORD *)(v9 + 40) = v8;
      v3 = sub_2143DEC18(v9);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    v4 = v18[0];
    v5 = v18[1];
    sub_2141D8BF8(&qword_253F15D48);
    v6 = swift_allocObject();
    *(_OWORD *)(v6 + 16) = xmmword_2144271D0;
    *(_QWORD *)(v6 + 32) = v4;
    *(_QWORD *)(v6 + 40) = v5;
    v3 = sub_2143DEC18(v6);
    swift_bridgeObjectRelease();
  }
  swift_release();
  sub_214357A9C(a1);
  sub_2141E801C(a1 + 64, (uint64_t)v11, &qword_253F13360);
  sub_2141E801C((uint64_t)v11, (uint64_t)&v22, &qword_253F13360);
  return v3;
}

uint64_t sub_214356630(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t result;
  _QWORD *v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t i;
  BOOL v16;
  unint64_t v17;
  int64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v33[8];
  uint64_t v34;
  uint64_t v35;
  char v36[8];
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v39 = a3;
  sub_2141D8BF8(&qword_253F15D20);
  result = sub_2144256B8();
  v6 = (_QWORD *)result;
  v7 = 0;
  v31 = a1;
  v10 = *(_QWORD *)(a1 + 64);
  v9 = a1 + 64;
  v8 = v10;
  v11 = 1 << *(_BYTE *)(v9 - 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & v8;
  v28 = v9;
  v29 = (unint64_t)(v11 + 63) >> 6;
  v30 = result + 64;
  if ((v12 & v8) == 0)
    goto LABEL_5;
LABEL_4:
  v14 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (i = v14 | (v7 << 6); ; i = __clz(__rbit64(v17)) + (v7 << 6))
  {
    v19 = *(_BYTE *)(*(_QWORD *)(v31 + 48) + i);
    v20 = *(_QWORD *)(v31 + 56) + 24 * i;
    v21 = *(_QWORD *)(v20 + 8);
    v22 = *(_QWORD *)(v20 + 16);
    v36[0] = *(_BYTE *)v20;
    v37 = v21;
    v38 = v22;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_214353CB0((uint64_t)v36, a2, v39, v33);
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    if (v3)
    {
      swift_release();
      return (uint64_t)v6;
    }
    *(_QWORD *)(v30 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    *(_BYTE *)(v6[6] + i) = v19;
    v23 = v6[7] + 24 * i;
    v24 = v34;
    v25 = v35;
    *(_BYTE *)v23 = v33[0];
    *(_QWORD *)(v23 + 8) = v24;
    *(_QWORD *)(v23 + 16) = v25;
    v26 = v6[2];
    v16 = __OFADD__(v26, 1);
    v27 = v26 + 1;
    if (v16)
    {
      __break(1u);
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }
    v6[2] = v27;
    if (v13)
      goto LABEL_4;
LABEL_5:
    v16 = __OFADD__(v7++, 1);
    if (v16)
      goto LABEL_27;
    if (v7 >= v29)
      return (uint64_t)v6;
    v17 = *(_QWORD *)(v28 + 8 * v7);
    if (!v17)
      break;
LABEL_15:
    v13 = (v17 - 1) & v17;
  }
  v18 = v7 + 1;
  if (v7 + 1 >= v29)
    return (uint64_t)v6;
  v17 = *(_QWORD *)(v28 + 8 * v18);
  if (v17)
    goto LABEL_14;
  v18 = v7 + 2;
  if (v7 + 2 >= v29)
    return (uint64_t)v6;
  v17 = *(_QWORD *)(v28 + 8 * v18);
  if (v17)
    goto LABEL_14;
  v18 = v7 + 3;
  if (v7 + 3 >= v29)
    return (uint64_t)v6;
  v17 = *(_QWORD *)(v28 + 8 * v18);
  if (v17)
  {
LABEL_14:
    v7 = v18;
    goto LABEL_15;
  }
  while (1)
  {
    v7 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v7 >= v29)
      return (uint64_t)v6;
    v17 = *(_QWORD *)(v28 + 8 * v7);
    ++v18;
    if (v17)
      goto LABEL_15;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_21435688C(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a3)
  {
    if (a3 != 1)
    {
      v9 = swift_allocObject();
      *(_QWORD *)(v9 + 16) = a1;
      *(_QWORD *)(v9 + 24) = a2;
      swift_retain_n();
      v8 = sub_2143DEB20((uint64_t)sub_2143579A8, v9);
      goto LABEL_7;
    }
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = a1;
    *(_QWORD *)(v6 + 24) = a2;
    swift_retain_n();
    v7 = sub_2143579B0;
  }
  else
  {
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = a1;
    *(_QWORD *)(v6 + 24) = a2;
    swift_retain_n();
    v7 = sub_214357DD8;
  }
  v8 = sub_2143DEB0C((uint64_t)v7, v6);
LABEL_7:
  v10 = v8;
  swift_release();
  sub_2141D7808(a1, a2, a3);
  sub_2141D7808(a1, a2, a3);
  swift_release();
  return v10;
}

void sub_2143569B8(uint64_t a1)
{
  __asm { BR              X9 }
}

uint64_t sub_214356A04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 v3;
  uint64_t v4;
  uint64_t v5;

  v4 = swift_bridgeObjectRetain();
  v5 = sub_2143DEC18(v4);
  swift_release();
  sub_2141D77B4(v2, v1, v0, v3, 0);
  sub_2141D77B4(v2, v1, v0, v3, 0);
  return v5;
}

void sub_214356C74(uint64_t a1, uint64_t a2, char a3)
{
  __asm { BR              X9 }
}

uint64_t sub_214357104@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  int64_t v37;
  int64_t v38;
  _QWORD *v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t i;
  int v43;
  int64_t v45;
  unint64_t v46;
  int64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int16 v62;
  char isUniquelyReferenced_nonNull_native;
  char v64;
  unint64_t v65;
  uint64_t v66;
  _BOOL8 v67;
  uint64_t v68;
  char v69;
  unint64_t v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  BOOL v75;
  uint64_t v76;
  uint64_t result;
  char v78;
  char v79;
  char v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  __int16 v100;
  uint64_t v101;
  char v102;
  uint64_t v103;
  __int16 v104;
  uint64_t v105;
  unint64_t v106;
  _QWORD *v107;
  unsigned int v108;
  char v109;
  uint64_t v110;
  char v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _UNKNOWN **v116;
  char v117;
  char v118;
  char v119;
  char v120;
  _BYTE v121[264];
  _QWORD __dst[33];
  _BYTE v123[272];

  v8 = a2 + 1193;
  v106 = sub_21436C1E8(MEMORY[0x24BEE4AF8]);
  v118 = *(_BYTE *)(a2 + 1193);
  v117 = *(_BYTE *)(v8 + 1);
  sub_214357900(a1, (uint64_t)v123);
  v9 = *(_QWORD *)(a3 + 16);
  v10 = v9 + 1;
  if (__OFADD__(v9, 1))
    goto LABEL_48;
  *(_QWORD *)(a3 + 16) = v10;
  __dst[3] = sub_2141D8BF8(&qword_253F13020);
  __dst[4] = &off_24D17F2F8;
  __dst[0] = swift_allocObject();
  sub_2141E070C((uint64_t)v123, __dst[0] + 16, &qword_253F12F70);
  swift_beginAccess();
  sub_214233D18((uint64_t)__dst, v10);
  swift_endAccess();
  v90 = *(_QWORD *)(a3 + 16);
  sub_214357968((uint64_t)v123);
  swift_beginAccess();
  v11 = *(_QWORD *)(a2 + 608);
  v105 = v8;
  v12 = *(_QWORD *)(a2 + 616);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v89 = sub_2143DEC30(v11, v12);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  memcpy(__dst, (const void *)(a2 + 624), 0x102uLL);
  memcpy(v123, (const void *)(a2 + 624), 0x102uLL);
  nullsub_1(v123, v13);
  sub_2141E801C((uint64_t)v123, (uint64_t)v121, &qword_253F14B70);
  sub_21421CA78((uint64_t)__dst, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char))sub_2141EF260);
  v14 = sub_2143DEA08((uint64_t)v121);
  sub_21421CA78((uint64_t)__dst, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char))sub_21421C6D4);
  v109 = *(_BYTE *)(v105 + 1);
  v88 = sub_214203F28();
  v15 = *(_QWORD *)(a1 + 48);
  swift_retain();
  swift_retain();
  v87 = sub_214356630(v15, a2, a3);
  swift_release();
  swift_release();
  v16 = *(_BYTE *)(a1 + 393);
  v17 = *(_BYTE *)(a1 + 394);
  v18 = type metadata accessor for ChartInternal();
  v19 = *(_QWORD *)(a3 + 16);
  v20 = v19 + 1;
  if (__OFADD__(v19, 1))
  {
LABEL_49:
    __break(1u);
  }
  else
  {
    v21 = v18;
    v85 = v14;
    v86 = a4;
    v22 = a1 + *(int *)(v18 + 44);
    v23 = *(_BYTE *)(v22 + 8);
    v24 = a1;
    v25 = *(_QWORD **)v22;
    *(_QWORD *)(a3 + 16) = v20;
    v26 = sub_2141D8BF8(&qword_253F13030);
    v115 = v26;
    v116 = &off_24D17F2F8;
    v112 = v25;
    LOBYTE(v113) = v23;
    swift_beginAccess();
    sub_214233D18((uint64_t)&v112, v20);
    v27 = *(_QWORD *)(a3 + 16);
    v28 = v27 + 1;
    if (!__OFADD__(v27, 1))
    {
      v83 = *(_QWORD *)(a3 + 16);
      v29 = v24 + *(int *)(v21 + 48);
      v30 = *(_BYTE *)(v29 + 8);
      v31 = *(_QWORD **)v29;
      *(_QWORD *)(a3 + 16) = v28;
      v115 = v26;
      v116 = &off_24D17F2F8;
      v112 = v31;
      LOBYTE(v113) = v30;
      sub_214233D18((uint64_t)&v112, v28);
      swift_endAccess();
      v82 = *(_QWORD *)(a3 + 16);
      v111 = v109;
      v120 = v16;
      v119 = v17;
      v84 = v24;
      v32 = *(_QWORD *)(v24 + 40);
      v33 = v32 + 64;
      v34 = 1 << *(_BYTE *)(v32 + 32);
      v35 = -1;
      if (v34 < 64)
        v35 = ~(-1 << v34);
      v36 = v35 & *(_QWORD *)(v32 + 64);
      v37 = (unint64_t)(v34 + 63) >> 6;
      swift_bridgeObjectRetain();
      v38 = 0;
      v39 = (_QWORD *)v106;
      v40 = v105;
      if (!v36)
        goto LABEL_13;
LABEL_7:
      v41 = __clz(__rbit64(v36));
      v36 &= v36 - 1;
      for (i = v41 | (v38 << 6); ; i = __clz(__rbit64(v46)) + (v38 << 6))
      {
        v43 = *(unsigned __int8 *)(*(_QWORD *)(v32 + 48) + i);
        if (*(_BYTE *)(v40 + 1) == 1 && v43 != 4)
        {
          if (v36)
            goto LABEL_7;
          goto LABEL_13;
        }
        v107 = v39;
        v48 = *(_QWORD *)(v32 + 56) + 72 * i;
        v101 = *(_QWORD *)v48;
        v102 = *(_BYTE *)(v48 + 8);
        v50 = *(_QWORD *)(v48 + 16);
        v49 = *(_QWORD *)(v48 + 24);
        v51 = *(_QWORD *)(v48 + 32);
        v52 = *(unsigned __int16 *)(v48 + 40);
        v53 = *(_QWORD *)(v48 + 56);
        v110 = *(_QWORD *)(v48 + 48);
        v108 = *(unsigned __int8 *)(v48 + 64);
        v104 = *(_WORD *)(v48 + 40);
        v103 = v53;
        v92 = v49;
        v93 = v50;
        v91 = v51;
        if (v52 >> 8 <= 0xFE)
        {
          v112 = *(_QWORD **)(v48 + 16);
          v113 = v49;
          v114 = v51;
          LOWORD(v115) = v52;
          swift_retain();
          sub_2141D8CE8(v50, v49, v51, v104);
          sub_2141D8CFC(v110, v53, v108);
          sub_2141D8CE8(v50, v49, v51, v104);
          sub_2143569B8((uint64_t)&v112);
          v97 = v59;
          v98 = v60;
          v99 = v61;
          v100 = v62;
          v55 = v108;
          v54 = v110;
          if (v108 > 0xFB)
          {
LABEL_31:
            v94 = 0;
            v95 = 0;
            v96 = -1;
            goto LABEL_32;
          }
        }
        else
        {
          sub_2141D8CE8(v50, v49, v51, v52);
          v54 = v110;
          v55 = v108;
          sub_2141D8CFC(v110, v53, v108);
          v97 = 0;
          v98 = 0;
          v99 = 0;
          v100 = -256;
          if (v108 > 0xFB)
            goto LABEL_31;
        }
        swift_retain();
        sub_2141D8CFC(v54, v53, v55);
        sub_214356C74(v54, v53, v55);
        v94 = v56;
        v95 = v57;
        v96 = v58;
LABEL_32:
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v112 = v107;
        v65 = sub_214336B74(v43);
        v66 = v107[2];
        v67 = (v64 & 1) == 0;
        v68 = v66 + v67;
        if (__OFADD__(v66, v67))
          goto LABEL_47;
        v69 = v64;
        if (v107[3] >= v68)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            sub_2142A7694();
        }
        else
        {
          sub_21429BBA8(v68, isUniquelyReferenced_nonNull_native);
          v70 = sub_214336B74(v43);
          if ((v69 & 1) != (v71 & 1))
            goto LABEL_52;
          v65 = v70;
        }
        v40 = v105;
        v39 = v112;
        if ((v69 & 1) != 0)
        {
          v72 = v112[7] + 72 * v65;
          *(_QWORD *)v72 = v101;
          *(_BYTE *)(v72 + 8) = v102;
          *(_QWORD *)(v72 + 16) = v97;
          *(_QWORD *)(v72 + 24) = v98;
          *(_QWORD *)(v72 + 32) = v99;
          *(_WORD *)(v72 + 40) = v100;
          *(_QWORD *)(v72 + 48) = v94;
          *(_QWORD *)(v72 + 56) = v95;
          *(_BYTE *)(v72 + 64) = v96;
        }
        else
        {
          v112[(v65 >> 6) + 8] |= 1 << v65;
          *(_BYTE *)(v39[6] + v65) = v43;
          v73 = v39[7] + 72 * v65;
          *(_QWORD *)v73 = v101;
          *(_BYTE *)(v73 + 8) = v102;
          *(_QWORD *)(v73 + 16) = v97;
          *(_QWORD *)(v73 + 24) = v98;
          *(_QWORD *)(v73 + 32) = v99;
          *(_WORD *)(v73 + 40) = v100;
          *(_QWORD *)(v73 + 48) = v94;
          *(_QWORD *)(v73 + 56) = v95;
          *(_BYTE *)(v73 + 64) = v96;
          v74 = v39[2];
          v75 = __OFADD__(v74, 1);
          v76 = v74 + 1;
          if (v75)
            goto LABEL_51;
          v39[2] = v76;
        }
        swift_bridgeObjectRelease();
        sub_2141D7864(v93, v92, v91, v104);
        sub_2141D774C(v110, v103, v108);
        if (v36)
          goto LABEL_7;
LABEL_13:
        v45 = v38 + 1;
        if (__OFADD__(v38, 1))
        {
          __break(1u);
          goto LABEL_46;
        }
        if (v45 >= v37)
          goto LABEL_44;
        v46 = *(_QWORD *)(v33 + 8 * v45);
        ++v38;
        if (!v46)
        {
          v38 = v45 + 1;
          if (v45 + 1 >= v37)
            goto LABEL_44;
          v46 = *(_QWORD *)(v33 + 8 * v38);
          if (!v46)
          {
            v38 = v45 + 2;
            if (v45 + 2 >= v37)
              goto LABEL_44;
            v46 = *(_QWORD *)(v33 + 8 * v38);
            if (!v46)
            {
              v47 = v45 + 3;
              if (v47 >= v37)
              {
LABEL_44:
                swift_release();
                swift_release();
                swift_release();
                result = sub_2141DD370(v84, (uint64_t (*)(_QWORD))type metadata accessor for ChartInternal);
                v78 = v120;
                v79 = v119;
                v80 = v118;
                v81 = v117;
                *(_QWORD *)v86 = v90;
                *(_QWORD *)(v86 + 8) = v89;
                *(_QWORD *)(v86 + 16) = v85;
                *(_BYTE *)(v86 + 24) = v111;
                *(_QWORD *)(v86 + 32) = v88;
                *(_QWORD *)(v86 + 40) = v87;
                *(_BYTE *)(v86 + 48) = v78;
                *(_BYTE *)(v86 + 49) = v79;
                *(_QWORD *)(v86 + 56) = v83;
                *(_QWORD *)(v86 + 64) = v82;
                *(_QWORD *)(v86 + 72) = v39;
                *(_BYTE *)(v86 + 80) = v80;
                *(_BYTE *)(v86 + 81) = v81;
                return result;
              }
              v46 = *(_QWORD *)(v33 + 8 * v47);
              if (!v46)
              {
                while (1)
                {
                  v38 = v47 + 1;
                  if (__OFADD__(v47, 1))
                    break;
                  if (v38 >= v37)
                    goto LABEL_44;
                  v46 = *(_QWORD *)(v33 + 8 * v38);
                  ++v47;
                  if (v46)
                    goto LABEL_26;
                }
LABEL_46:
                __break(1u);
LABEL_47:
                __break(1u);
LABEL_48:
                __break(1u);
                goto LABEL_49;
              }
              v38 = v47;
            }
          }
        }
LABEL_26:
        v36 = (v46 - 1) & v46;
      }
    }
  }
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  result = sub_214425820();
  __break(1u);
  return result;
}

uint64_t sub_214357900(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for AnyChartContent(a2, a1);
  return a2;
}

uint64_t sub_21435793C()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 40))
    _s6Charts15AnyChartContentVwxx_0(v0 + 16);
  return swift_deallocObject();
}

uint64_t sub_214357968(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_2141D8BF8(&qword_253F12F70);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_2143579A8@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_2143F9FB8(a1, *(uint64_t (**)(_QWORD))(v2 + 16), a2);
}

uint64_t sub_2143579B0(uint64_t a1)
{
  uint64_t v1;

  return sub_214404260(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_2143579B8()
{
  swift_release();
  return swift_deallocObject();
}

void sub_2143579DC(uint64_t a1@<X0>, double *a2@<X8>)
{
  uint64_t v2;

  sub_2142AFB08(a1, *(double (**)(_QWORD, _QWORD, _QWORD))(v2 + 16), a2);
}

double sub_2143579E4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_2142AFA84(a1, *(void (**)(_OWORD *__return_ptr, _QWORD, _QWORD, _QWORD))(v2 + 16), a2);
}

uint64_t sub_2143579EC(uint64_t a1)
{
  uint64_t v1;

  return sub_2142AFAD8(a1, *(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v1 + 16));
}

uint64_t sub_2143579F4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_2142AFA4C(a1, *(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v2 + 16), a2);
}

uint64_t sub_2143579FC()
{
  uint64_t v0;

  if (*(_BYTE *)(v0 + 56) == 1)
  {
    swift_release();
  }
  else if (!*(_BYTE *)(v0 + 56))
  {
    _s6Charts15AnyChartContentVwxx_0(v0 + 16);
  }
  return swift_deallocObject();
}

uint64_t sub_214357A3C()
{
  uint64_t v0;

  _s6Charts15AnyChartContentVwxx_0(v0 + 16);
  return swift_deallocObject();
}

uint64_t sub_214357A60(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for AnyChartContent(a2, a1);
  return a2;
}

uint64_t sub_214357A9C(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PartialSpec.ScaleRange(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xF9 && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 249);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 7)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PartialSpec.ScaleRange(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF8)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 249;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xF9)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xF9)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for PartialSpec.ScaleRange()
{
  return &type metadata for PartialSpec.ScaleRange;
}

uint64_t initializeBufferWithCopyOfBuffer for PartialSpec.Values(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_WORD *)(result + 8) = *((_WORD *)a2 + 4);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for PartialSpec.Values(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 10))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 9);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for PartialSpec.Values(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_WORD *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 10) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 10) = 0;
    if (a2)
      *(_BYTE *)(result + 9) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for PartialSpec.Values()
{
  return &type metadata for PartialSpec.Values;
}

ValueMetadata *type metadata accessor for PartialSpecScaleMapping()
{
  return &type metadata for PartialSpecScaleMapping;
}

ValueMetadata *type metadata accessor for PartialSpec.Scale()
{
  return &type metadata for PartialSpec.Scale;
}

unint64_t sub_214357C48()
{
  unint64_t result;

  result = qword_254D6B700;
  if (!qword_254D6B700)
  {
    result = MEMORY[0x2199CD934](&unk_21442D8A0, &type metadata for PartialSpec.Values);
    atomic_store(result, (unint64_t *)&qword_254D6B700);
  }
  return result;
}

ValueMetadata *type metadata accessor for PartialSpec.Values.Extents()
{
  return &type metadata for PartialSpec.Values.Extents;
}

ValueMetadata *type metadata accessor for PartialSpec.ScaleDomain()
{
  return &type metadata for PartialSpec.ScaleDomain;
}

unint64_t sub_214357CB8()
{
  unint64_t result;

  result = qword_254D6B708;
  if (!qword_254D6B708)
  {
    result = MEMORY[0x2199CD934](&unk_21442D96C, &type metadata for PartialSpec.Values.Extents);
    atomic_store(result, (unint64_t *)&qword_254D6B708);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for PartialSpec.ScaleDomain.InferredDomain(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 25))
    return (*(_DWORD *)a1 + 253);
  v3 = *(unsigned __int8 *)(a1 + 24);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = (v3 ^ 0xFF) - 1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PartialSpec.ScaleDomain.InferredDomain(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 253;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 25) = 0;
    if (a2)
      *(_BYTE *)(result + 24) = ~(_BYTE)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for PartialSpec.ScaleDomain.InferredDomain()
{
  return &type metadata for PartialSpec.ScaleDomain.InferredDomain;
}

ValueMetadata *type metadata accessor for PartialSpec.ScaleDomain.Transform()
{
  return &type metadata for PartialSpec.ScaleDomain.Transform;
}

void sub_214357DDC(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_214357E14()
{
  uint64_t *v0;
  double v1;
  double v2;
  CGMutablePathRef Mutable;
  uint64_t result;
  int64x2_t v5;

  v2 = v1;
  Mutable = CGPathCreateMutable();
  v0[3] = (uint64_t)&_s8CardinalVN;
  v0[4] = (uint64_t)&off_24D1831E8;
  result = swift_allocObject();
  *v0 = result;
  *(_QWORD *)(result + 16) = Mutable;
  *(double *)(result + 24) = (1.0 - v2) / 6.0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = 0;
  v5 = vdupq_n_s64(0x7FF8000000000000uLL);
  *(int64x2_t *)(result + 48) = v5;
  *(int64x2_t *)(result + 64) = v5;
  *(int64x2_t *)(result + 80) = v5;
  return result;
}

uint64_t sub_214357FFC@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v7;
  char v8;
  unint64_t v9;
  double *v10;
  __int128 v12;
  __int128 v13;
  char v14;

  v7 = 0;
  v8 = 0;
  v9 = *(_QWORD *)(result + 16);
  v10 = (double *)(result + 48);
  do
  {
    if (v7 >= v9)
    {
      if ((v8 & 1) != 0)
      {
LABEL_2:
        result = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 16))(a2, a3);
        if (v9 == v7)
          goto LABEL_15;
      }
      else if (v9 == v7)
      {
        goto LABEL_15;
      }
      v8 = 0;
      goto LABEL_4;
    }
    if ((v8 & 1) == *(_BYTE *)v10)
    {
      if (!*(_BYTE *)v10)
        goto LABEL_14;
    }
    else
    {
      if (!*(_BYTE *)v10)
        goto LABEL_2;
      (*(void (**)(uint64_t, uint64_t))(a3 + 8))(a2, a3);
      v8 = 1;
    }
    result = (*(uint64_t (**)(uint64_t, uint64_t, double, double))(a3 + 40))(a2, a3, *(v10 - 2), *(v10 - 1));
LABEL_14:
    if (v9 == v7)
    {
LABEL_15:
      (*(void (**)(uint64_t, uint64_t))(a3 + 48))(a2, a3);
      result = sub_214424788();
      *(_OWORD *)a4 = v12;
      *(_OWORD *)(a4 + 16) = v13;
      *(_BYTE *)(a4 + 32) = v14;
      return result;
    }
LABEL_4:
    v10 += 3;
  }
  while (!__OFADD__(v7++, 1));
  __break(1u);
  return result;
}

uint64_t sub_214358114()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_214358138()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_21435815C()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_214358180@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  char v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t (*v14)(uint64_t, uint64_t, double, double);
  uint64_t v15;
  unint64_t v16;
  __int128 v18;
  __int128 v19;
  char v20;

  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = *(_QWORD *)(result + 16);
  v10 = result + 32;
  while (v8 < v9)
  {
    v12 = v10 + 40 * v8;
    if ((v7 & 1) == *(_BYTE *)(v12 + 32))
    {
      if (!*(_BYTE *)(v12 + 32))
        goto LABEL_21;
    }
    else
    {
      if (!*(_BYTE *)(v12 + 32))
        goto LABEL_10;
      (*(void (**)(uint64_t, uint64_t))(a3 + 24))(a2, a3);
      (*(void (**)(uint64_t, uint64_t))(a3 + 8))(a2, a3);
      v6 = 0;
      v7 = 1;
    }
    result = (*(uint64_t (**)(uint64_t, uint64_t, double, double))(a3 + 40))(a2, a3, *(double *)(v12 + 16), *(double *)(v12 + 24));
    v11 = __OFADD__(v6++, 1);
    if (v11)
      goto LABEL_31;
LABEL_21:
    if (v8 == v9)
      goto LABEL_24;
LABEL_4:
    v11 = __OFADD__(v8++, 1);
    if (v11)
      goto LABEL_27;
  }
  if ((v7 & 1) == 0)
  {
    if (v8 == v9)
    {
LABEL_24:
      (*(void (**)(uint64_t, uint64_t))(a3 + 48))(a2, a3);
      result = sub_214424788();
      *(_OWORD *)a4 = v18;
      *(_OWORD *)(a4 + 16) = v19;
      *(_BYTE *)(a4 + 32) = v20;
      return result;
    }
    goto LABEL_3;
  }
LABEL_10:
  v13 = *(void (**)(uint64_t, uint64_t))(a3 + 16);
  v13(a2, a3);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 8))(a2, a3);
  if (v6 < 1)
    goto LABEL_28;
  if (!v8)
    goto LABEL_29;
  if (v8 > v9)
    goto LABEL_30;
  v14 = *(uint64_t (**)(uint64_t, uint64_t, double, double))(a3 + 40);
  result = v14(a2, a3, *(double *)(v10 + 40 * v8 - 40), *(double *)(v10 + 40 * v8 - 32));
  if (v6 == 1)
  {
LABEL_2:
    v13(a2, a3);
    result = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 32))(a2, a3);
    if (v8 == v9)
      goto LABEL_24;
LABEL_3:
    v7 = 0;
    goto LABEL_4;
  }
  v15 = 1;
  while (1)
  {
    ++v15;
    v16 = v8 - v15;
    if (__OFSUB__(v8, v15))
      break;
    if (v16 >= v9)
      goto LABEL_26;
    result = v14(a2, a3, *(double *)(v10 + 40 * v16), *(double *)(v10 + 40 * v16 + 8));
    if (v6 == v15)
      goto LABEL_2;
  }
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

uint64_t getEnumTagSinglePayload for CurvePointArea(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 33))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 32);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for CurvePointArea(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 33) = 0;
    if (a2)
      *(_BYTE *)(result + 32) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for CurvePointArea()
{
  return &type metadata for CurvePointArea;
}

ValueMetadata *type metadata accessor for CurveFamilies()
{
  return &type metadata for CurveFamilies;
}

uint64_t sub_214358438(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_2143584E8 + 4 * byte_21442DA44[(v7 - 1)]))();
}

void sub_214358538(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t type metadata accessor for CurveFamilies.FlippedCurveFamily(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2141D8E88(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CurveFamilies.FlippedCurveFamily);
}

uint64_t getEnumTagSinglePayload for CurvePointLine(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 16);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for CurvePointLine(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for CurvePointLine()
{
  return &type metadata for CurvePointLine;
}

uint64_t sub_21435879C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(a1 + 24) + 8))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_2143587A8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(a1 + 24) + 16))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_2143587B4(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(a1 + 24) + 24))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_2143587C0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(a1 + 24) + 32))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_2143587CC(uint64_t a1, double a2, double a3)
{
  return (*(uint64_t (**)(_QWORD, double, double))(*(_QWORD *)(a1 + 24) + 40))(*(_QWORD *)(a1 + 16), a3, a2);
}

CGMutablePathRef sub_2143587E4(uint64_t a1)
{
  void *v1;
  CGMutablePathRef Mutable;

  v1 = (void *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)(a1 + 24) + 48))(*(_QWORD *)(a1 + 16));
  Mutable = CGPathCreateMutable();
  sub_2144252F8();

  return Mutable;
}

ValueMetadata *type metadata accessor for ChartEncodingConfigurations()
{
  return &type metadata for ChartEncodingConfigurations;
}

uint64_t sub_214358878()
{
  uint64_t v1;

  sub_2141DD178();
  sub_214424224();
  return v1;
}

uint64_t sub_2143588B0(uint64_t *a1, uint64_t *a2)
{
  return sub_2143519C8(*a1, *a2);
}

ValueMetadata *type metadata accessor for ChartEncodingConfigurationsKey()
{
  return &type metadata for ChartEncodingConfigurationsKey;
}

_QWORD *sub_2143588CC@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  result = sub_21436BF4C(MEMORY[0x24BEE4AF8]);
  *a1 = result;
  return result;
}

uint64_t sub_2143588F8()
{
  sub_214358948();
  return sub_214423EE8();
}

unint64_t sub_214358948()
{
  unint64_t result;

  result = qword_253F12200;
  if (!qword_253F12200)
  {
    result = MEMORY[0x2199CD934](&unk_21442DB0C, &type metadata for ChartEncodingConfigurations);
    atomic_store(result, (unint64_t *)&qword_253F12200);
  }
  return result;
}

uint64_t sub_21435898C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v20;

  v11 = *(_QWORD *)(*MEMORY[0x24BEE2B70] + *a1 + 8);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = MEMORY[0x24BDAC7A8](a1);
  v15 = (char *)&v20 - v14;
  MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v20 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v18 + 16))(v17, v5);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, a2, v11);
  sub_214362710((uint64_t)v17, a1, (uint64_t)v15, a3, a4, a5);
  return swift_retain();
}

uint64_t ChartContent.foregroundStyle<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return sub_214359660(a1, a2, a3, a4, a5, 1, &qword_253F14460, a6);
}

double ChartContent.foregroundStyle<A>(by:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  double result;

  *(_QWORD *)&result = sub_214359A90(a1, a2, a3, a4, a5, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedChartContent_ForegroundStyle, a6).n128_u64[0];
  return result;
}

void VectorizedChartContent.foregroundStyle<A>(_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;

  MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v7, v3, a2);
  sub_214358B60((uint64_t)v7, a2, a3);
}

uint64_t sub_214358B3C()
{
  return swift_retain();
}

void sub_214358B60(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
  type metadata accessor for ModifiedChartContent_ForegroundStyles();
}

uint64_t sub_214358BCC(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + *(int *)(result + 60)) = v1;
  return result;
}

uint64_t VectorizedChartContent.foregroundStyle<A>(by:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;

  v7 = v6;
  v22 = a1;
  v23 = a6;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v13 = type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, a3, a5);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v22 - v16;
  MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v22 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v19, v7, a2);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v17, v22, v13);
  return sub_214359C00((uint64_t)v19, (uint64_t)v17, a2, AssociatedTypeWitness, a3, a4, a5, (uint64_t (*)(_QWORD, _QWORD *))type metadata accessor for ModifiedChartContent_ForegroundStyles_Plottable, v23);
}

uint64_t ChartContent.alignsMarkStylesWithPlotArea(_:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *KeyPath;
  char v10;

  KeyPath = (uint64_t *)swift_getKeyPath();
  v10 = a1;
  sub_21435898C(KeyPath, (uint64_t)&v10, a2, a3, a4);
  return swift_release();
}

void ChartContent.position<A>(by:axis:span:)(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v9;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  _DWORD v21[2];
  uint64_t v22;
  int v23;
  uint64_t v24;

  v24 = a7;
  v23 = a4;
  v22 = a3;
  v21[1] = a2;
  v13 = type metadata accessor for PlottableValue(0, a6, a8, a4);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)v21 - v16;
  MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)v21 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v19, v9, a5);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v17, a1, v13);
  sub_214358EC0((uint64_t)v19, a5, a9);
}

void sub_214358EC0(uint64_t a1@<X0>, uint64_t a2@<X5>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1, a2);
  type metadata accessor for ModifiedChartContent_Position();
}

uint64_t sub_214358F44(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;

  v12 = v9 + a1[17];
  v13 = type metadata accessor for PlottableValue(0, v4, v10, a4);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v12, v8, v13);
  *(_BYTE *)(v9 + a1[18]) = v7;
  v15 = v9 + a1[19];
  *(_QWORD *)v15 = v6;
  *(_BYTE *)(v15 + 8) = v5;
  return result;
}

void VectorizedChartContent.position<A>(by:axis:span:)(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  _QWORD v23[2];
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;

  v24 = a9;
  v27 = a4;
  v26 = a3;
  v25 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v15 = type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, a6, a8);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)v23 - v18;
  MEMORY[0x24BDAC7A8](v17);
  v21 = (char *)v23 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t))(v22 + 16))(v21, v23[1], a5);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v19, a1, v15);
  sub_2143590FC((uint64_t)v21, v25, v26, v27, (uint64_t)v19, a5, AssociatedTypeWitness, a6, v24, a7, a8);
}

void sub_2143590FC(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[2];
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33[12];

  v27 = a4;
  v26 = a3;
  v25 = a2;
  v23[0] = a1;
  v23[1] = a9;
  v24 = a10;
  v16 = type metadata accessor for PlottableProjection(0, a7, a8, a11);
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)v23 - v18;
  v20 = *(_QWORD *)(a6 - 8);
  v21 = a9;
  v22 = v23[0];
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v20 + 16))(v21, v23[0], a6);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v19, a5, v16);
  sub_214372AC8((uint64_t)v19, a7, a8, a11, v33);
  (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v22, a6);
  v28 = a6;
  v29 = a7;
  v30 = a8;
  v31 = v24;
  v32 = a11;
  type metadata accessor for ModifiedChartContent_Positions();
}

__n128 sub_214359240(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __n128 result;

  v7 = *(_QWORD *)(v5 - 376);
  v8 = v7 + *(int *)(a1 + 60);
  v9 = *(_DWORD *)(v5 - 356);
  *(_BYTE *)v8 = v9;
  v10 = *(_QWORD *)(v5 - 352);
  *(_QWORD *)(v8 + 8) = v10;
  v11 = *(_DWORD *)(v5 - 340);
  *(_BYTE *)(v8 + 16) = v11;
  v12 = *(_OWORD *)(v5 - 208);
  *(_OWORD *)(v8 + 24) = *(_OWORD *)(v5 - 224);
  *(_OWORD *)(v8 + 40) = v12;
  *(_OWORD *)(v8 + 56) = *(_OWORD *)(v5 - 192);
  *(_QWORD *)(v8 + 72) = *(_QWORD *)(v5 - 176);
  sub_2142527B8(v2, v1, v3, v4, v5 - 336);
  sub_2142532B4(v9, v10, v11, v5 - 336, v5 - 224);
  v13 = v7 + *(int *)(a1 + 64);
  v14 = *(_OWORD *)(v5 - 112);
  *(_OWORD *)(v13 + 96) = *(_OWORD *)(v5 - 128);
  *(_OWORD *)(v13 + 112) = v14;
  *(_BYTE *)(v13 + 128) = *(_BYTE *)(v5 - 96);
  v15 = *(_OWORD *)(v5 - 176);
  *(_OWORD *)(v13 + 32) = *(_OWORD *)(v5 - 192);
  *(_OWORD *)(v13 + 48) = v15;
  v16 = *(_OWORD *)(v5 - 144);
  *(_OWORD *)(v13 + 64) = *(_OWORD *)(v5 - 160);
  *(_OWORD *)(v13 + 80) = v16;
  result = *(__n128 *)(v5 - 208);
  *(_OWORD *)v13 = *(_OWORD *)(v5 - 224);
  *(__n128 *)(v13 + 16) = result;
  return result;
}

uint64_t ChartContent.opacity(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  uint64_t *KeyPath;
  double v10;

  KeyPath = (uint64_t *)swift_getKeyPath();
  v10 = a4;
  sub_21435898C(KeyPath, (uint64_t)&v10, a1, a2, a3);
  return swift_release();
}

uint64_t VectorizedChartContent.opacity(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_2143425F4(a1, a2, a3, type metadata accessor for ModifiedChartContent_Opacities_KeyPath, a4);
}

uint64_t ChartContent.blendMode(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t *KeyPath;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v8 = sub_2141D8BF8(&qword_253F15C88);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  KeyPath = (uint64_t *)swift_getKeyPath();
  v12 = sub_214424C68();
  v13 = *(_QWORD *)(v12 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v10, a1, v12);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  sub_21435898C(KeyPath, (uint64_t)v10, a2, a3, a4);
  swift_release();
  return sub_2141E0750((uint64_t)v10, &qword_253F15C88);
}

uint64_t ChartContent.clipShape<A>(_:style:)@<X0>(uint64_t a1@<X0>, __int16 a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t *KeyPath;
  uint64_t v17;
  uint64_t v18;
  __int16 v19;

  v12 = *(_QWORD *)(a4 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v14 = (char *)&v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  KeyPath = (uint64_t *)swift_getKeyPath();
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a1, a4);
  v18 = sub_214424BB4();
  v19 = a2 & 0x101;
  sub_21435898C(KeyPath, (uint64_t)&v18, a3, a5, a6);
  swift_release();
  return swift_release();
}

uint64_t ChartContent.lineStyle(_:)@<X0>(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t *KeyPath;
  __int128 v10;
  __int128 v11;
  _OWORD v12[2];
  uint64_t v13;

  v10 = a1[1];
  v11 = *a1;
  v7 = *((_QWORD *)a1 + 4);
  KeyPath = (uint64_t *)swift_getKeyPath();
  v12[0] = v11;
  v12[1] = v10;
  v13 = v7;
  sub_21435898C(KeyPath, (uint64_t)v12, a2, a3, a4);
  return swift_release();
}

double ChartContent.lineStyle<A>(by:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  double result;

  *(_QWORD *)&result = sub_214359A90(a1, a2, a3, a4, a5, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedChartContent_LineStyle, a6).n128_u64[0];
  return result;
}

uint64_t VectorizedChartContent.lineStyle(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_2143425F4(a1, a2, a3, type metadata accessor for ModifiedChartContent_StrokeStyles, a4);
}

uint64_t VectorizedChartContent.lineStyle<A>(by:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return sub_214359848(a1, a2, a3, a4, a5, (uint64_t (*)(_QWORD, _QWORD *))type metadata accessor for ModifiedChartContent_LineStyle_Plottable, a6);
}

uint64_t ChartContent.symbol<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return sub_214359660(a1, a2, a3, a4, a5, 0, &qword_253F12208, a6);
}

uint64_t sub_214359660@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W6>, uint64_t *a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t *KeyPath;
  uint64_t *v17;
  uint64_t v19[5];
  char v20;

  KeyPath = (uint64_t *)swift_getKeyPath();
  v19[3] = a3;
  v19[4] = a5;
  v17 = sub_2141D8DD8(v19);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))(v17, a1, a3);
  v20 = a6;
  sub_21435898C(KeyPath, (uint64_t)v19, a2, a4, a8);
  swift_release();
  return sub_2141E0750((uint64_t)v19, a7);
}

double ChartContent.symbol<A>(by:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  double result;

  *(_QWORD *)&result = sub_214359A90(a1, a2, a3, a4, a5, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedChartContent_Symbol, a6).n128_u64[0];
  return result;
}

void ChartContent.symbol<A>(symbol:)(void (*a1)(uint64_t)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v17 = a4;
  v18 = a5;
  v11 = MEMORY[0x24BDAC7A8](a1);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v17 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = (*(uint64_t (**)(char *, uint64_t))(v13 + 16))(v15, v6);
  a1(v16);
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(a6, v15, a2);
  v19 = a2;
  v20 = a3;
  v21 = v17;
  v22 = v18;
  type metadata accessor for ModifiedChartContent_SymbolView();
}

uint64_t sub_214359804(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v3 + *(int *)(a1 + 52), v4, v1);
}

uint64_t VectorizedChartContent.symbol<A>(by:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return sub_214359848(a1, a2, a3, a4, a5, (uint64_t (*)(_QWORD, _QWORD *))type metadata accessor for ModifiedChartContent_Symbols_Plottable, a6);
}

uint64_t sub_214359848@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t (*a6)(_QWORD, _QWORD *)@<X5>, uint64_t a7@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(_QWORD, _QWORD *);

  v25 = a7;
  v26 = a6;
  v8 = v7;
  v24 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v14 = type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, a3, a5);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v23 - v17;
  MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)&v23 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v20, v8, a2);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v18, v24, v14);
  return sub_214359C00((uint64_t)v20, (uint64_t)v18, a2, AssociatedTypeWitness, a3, *(_QWORD *)(a4 + 8), a5, v26, v25);
}

uint64_t ChartContent.symbolSize(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  uint64_t *KeyPath;
  _QWORD v10[2];
  char v11;

  KeyPath = (uint64_t *)swift_getKeyPath();
  *(double *)v10 = a4;
  v10[1] = 0;
  v11 = 0;
  sub_21435898C(KeyPath, (uint64_t)v10, a1, a2, a3);
  return swift_release();
}

uint64_t ChartContent.symbolSize(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  uint64_t *KeyPath;
  _QWORD v12[2];
  char v13;

  KeyPath = (uint64_t *)swift_getKeyPath();
  *(double *)v12 = a4;
  *(double *)&v12[1] = a5;
  v13 = 1;
  sub_21435898C(KeyPath, (uint64_t)v12, a1, a2, a3);
  return swift_release();
}

double ChartContent.symbolSize<A>(by:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  double result;

  *(_QWORD *)&result = sub_214359A90(a1, a2, a3, a4, a5, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ModifiedChartContent_SymbolSize, a6).n128_u64[0];
  return result;
}

__n128 sub_214359A90@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t (*a6)(_QWORD, uint64_t, uint64_t)@<X5>, uint64_t a7@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  __int128 v22;
  __n128 result;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(_QWORD, uint64_t, uint64_t);
  _OWORD v27[4];
  uint64_t v28;

  v25 = a4;
  v26 = a6;
  v8 = v7;
  v24 = a1;
  v13 = type metadata accessor for PlottableValue(0, a3, a5, a4);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v24 - v16;
  v18 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v20 = (char *)&v24 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v20, v8, a2);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v17, v24, v13);
  sub_2143D046C((uint64_t)v17, a3, a5, (uint64_t)v27);
  (*(void (**)(uint64_t, char *, uint64_t))(v18 + 32))(a7, v20, a2);
  v21 = a7 + *(int *)(v26(0, a2, v25) + 36);
  v22 = v27[3];
  *(_OWORD *)(v21 + 32) = v27[2];
  *(_OWORD *)(v21 + 48) = v22;
  *(_QWORD *)(v21 + 64) = v28;
  result = (__n128)v27[1];
  *(_OWORD *)v21 = v27[0];
  *(__n128 *)(v21 + 16) = result;
  return result;
}

uint64_t VectorizedChartContent.symbolSize(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_2143425F4(a1, a2, a3, type metadata accessor for ModifiedChartContent_SymbolAreas_KeyPath, a4);
}

{
  return sub_2143425F4(a1, a2, a3, type metadata accessor for ModifiedChartContent_SymbolSizes_KeyPath, a4);
}

uint64_t VectorizedChartContent.symbolSize<A>(by:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return sub_214359848(a1, a2, a3, a4, a5, (uint64_t (*)(_QWORD, _QWORD *))type metadata accessor for ModifiedChartContent_SymbolSizes_Plottable, a6);
}

uint64_t sub_214359C00@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t (*a8)(_QWORD, _QWORD *)@<X7>, uint64_t a9@<X8>)
{
  uint64_t v17;
  uint64_t v18;
  _QWORD v20[5];

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(a9, a1);
  v20[0] = a3;
  v20[1] = a4;
  v20[2] = a5;
  v20[3] = a6;
  v20[4] = a7;
  v17 = a9 + *(int *)(a8(0, v20) + 60);
  v18 = type metadata accessor for PlottableProjection(0, a4, a5, a7);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v17, a2, v18);
}

uint64_t ChartContent.offset(x:y:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  float64_t (**v17)(uint64_t);
  uint64_t v18;

  v11 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v5, a1);
  v14 = swift_allocObject();
  *(double *)(v14 + 16) = a4;
  *(double *)(v14 + 24) = a5;
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(a3, v13, a1);
  result = type metadata accessor for ModifiedChartContent_TransformEnvironment(0, a1, a2, v15);
  v17 = (float64_t (**)(uint64_t))(a3 + *(int *)(result + 36));
  *v17 = sub_214359E24;
  v17[1] = (float64_t (*)(uint64_t))v14;
  return result;
}

float64_t sub_214359D94(uint64_t a1, double a2, double a3)
{
  uint64_t v4;
  float64x2_t *v5;
  float64x2_t *v6;
  float64_t result;

  v4 = type metadata accessor for ChartContentRenderContext.Environment(0);
  v5 = (float64x2_t *)(a1 + *(int *)(v4 + 88));
  *v5 = vaddq_f64(*v5, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&a2, 0));
  v5[1].f64[0] = v5[1].f64[0] + a2;
  v6 = (float64x2_t *)(a1 + *(int *)(v4 + 92));
  *v6 = vaddq_f64(*v6, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&a3, 0));
  result = v6[1].f64[0] + a3;
  v6[1].f64[0] = result;
  return result;
}

uint64_t sub_214359E14()
{
  return swift_deallocObject();
}

float64_t sub_214359E24(uint64_t a1)
{
  uint64_t v1;

  return sub_214359D94(a1, *(double *)(v1 + 16), *(double *)(v1 + 24));
}

uint64_t ChartContent.offset(x:yStart:yEnd:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>, double a6@<D2>)
{
  return sub_214359EDC(a1, a2, (uint64_t)sub_214359E54, a3, a4, a5, a6);
}

uint64_t sub_214359E44()
{
  return swift_deallocObject();
}

float64x2_t sub_214359E54(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  float64x2_t *v4;
  double v5;
  float64x2_t v6;
  uint64_t v7;
  float64x2_t result;
  uint64_t v9;

  v9 = *(uint64_t *)(v1 + 16);
  v3 = type metadata accessor for ChartContentRenderContext.Environment(0);
  v4 = (float64x2_t *)(a1 + *(int *)(v3 + 88));
  v5 = *(double *)&v9 + v4[1].f64[0];
  v6 = *(float64x2_t *)(v1 + 24);
  *v4 = vaddq_f64((float64x2_t)vdupq_lane_s64(v9, 0), *v4);
  v4[1].f64[0] = v5;
  v7 = a1 + *(int *)(v3 + 92);
  result = vaddq_f64(v6, *(float64x2_t *)(v7 + 8));
  *(float64x2_t *)(v7 + 8) = result;
  return result;
}

uint64_t ChartContent.offset(xStart:xEnd:y:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>, double a6@<D2>)
{
  return sub_214359EDC(a1, a2, (uint64_t)sub_214359FDC, a3, a4, a5, a6);
}

uint64_t sub_214359EDC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>, double a5@<D0>, double a6@<D1>, double a7@<D2>)
{
  uint64_t v7;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  double *v18;
  uint64_t v19;
  uint64_t result;
  _QWORD *v21;
  uint64_t v22;

  v15 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v17 = (char *)&v22 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, v7, a1);
  v18 = (double *)swift_allocObject();
  v18[2] = a5;
  v18[3] = a6;
  v18[4] = a7;
  (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(a4, v17, a1);
  result = type metadata accessor for ModifiedChartContent_TransformEnvironment(0, a1, a2, v19);
  v21 = (_QWORD *)(a4 + *(int *)(result + 36));
  *v21 = a3;
  v21[1] = v18;
  return result;
}

uint64_t sub_214359FCC()
{
  return swift_deallocObject();
}

double sub_214359FDC(uint64_t a1)
{
  float64x2_t *v1;
  uint64_t v3;
  float64x2_t *v4;
  double result;
  uint64_t v6;

  v6 = *(uint64_t *)&v1[2].f64[0];
  v3 = type metadata accessor for ChartContentRenderContext.Environment(0);
  *(float64x2_t *)(a1 + *(int *)(v3 + 88) + 8) = vaddq_f64(v1[1], *(float64x2_t *)(a1 + *(int *)(v3 + 88) + 8));
  v4 = (float64x2_t *)(a1 + *(int *)(v3 + 92));
  *v4 = vaddq_f64((float64x2_t)vdupq_lane_s64(v6, 0), *v4);
  result = *(double *)&v6 + v4[1].f64[0];
  v4[1].f64[0] = result;
  return result;
}

uint64_t ChartContent.offset(xStart:xEnd:yStart:yEnd:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>, double a6@<D2>, double a7@<D3>)
{
  uint64_t v7;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  double *v18;
  uint64_t v19;
  uint64_t result;
  float64x2_t (**v21)(uint64_t);
  uint64_t v22;

  v15 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v17 = (char *)&v22 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, v7, a1);
  v18 = (double *)swift_allocObject();
  v18[2] = a4;
  v18[3] = a5;
  v18[4] = a6;
  v18[5] = a7;
  (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(a3, v17, a1);
  result = type metadata accessor for ModifiedChartContent_TransformEnvironment(0, a1, a2, v19);
  v21 = (float64x2_t (**)(uint64_t))(a3 + *(int *)(result + 36));
  *v21 = sub_21435A150;
  v21[1] = (float64x2_t (*)(uint64_t))v18;
  return result;
}

uint64_t sub_21435A140()
{
  return swift_deallocObject();
}

float64x2_t sub_21435A150(uint64_t a1)
{
  float64x2_t *v1;
  uint64_t v3;
  float64x2_t v4;
  uint64_t v5;
  float64x2_t result;

  v3 = type metadata accessor for ChartContentRenderContext.Environment(0);
  v4 = v1[2];
  *(float64x2_t *)(a1 + *(int *)(v3 + 88) + 8) = vaddq_f64(v1[1], *(float64x2_t *)(a1 + *(int *)(v3 + 88) + 8));
  v5 = a1 + *(int *)(v3 + 92);
  result = vaddq_f64(v4, *(float64x2_t *)(v5 + 8));
  *(float64x2_t *)(v5 + 8) = result;
  return result;
}

uint64_t ChartContent.cornerRadius(_:style:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t *KeyPath;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  double v23;
  char v24;

  v10 = sub_2141D8BF8(&qword_253F134C8);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_2141D7924(qword_253F11010);
  v14 = type metadata accessor for ModifiedChartContent_Environment(0, a2, v13, a3);
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v23 - v16;
  KeyPath = (uint64_t *)swift_getKeyPath();
  v23 = a5;
  v24 = 0;
  sub_21435898C(KeyPath, (uint64_t)&v23, a2, a3, (uint64_t)v17);
  swift_release();
  v19 = (uint64_t *)swift_getKeyPath();
  v20 = sub_214424308();
  v21 = *(_QWORD *)(v20 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v12, a1, v20);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v12, 0, 1, v20);
  sub_21435898C(v19, (uint64_t)v12, v14, (uint64_t)&off_254D6C490, a4);
  swift_release();
  sub_2141E0750((uint64_t)v12, &qword_253F134C8);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v14);
}

uint64_t type metadata accessor for ModifiedChartContent_Environment(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2141D8E88(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ModifiedChartContent_Environment);
}

uint64_t ChartContent.rectangleCornerRadii(_:style:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>, double a6@<D1>, double a7@<D2>, double a8@<D3>)
{
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t *KeyPath;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v30[4];
  char v31;

  v16 = sub_2141D8BF8(&qword_253F134C8);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v30[-1] - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_2141D7924(&qword_253F100A8);
  v20 = type metadata accessor for ModifiedChartContent_Environment(0, a2, v19, a3);
  v21 = *(_QWORD *)(v20 - 8);
  MEMORY[0x24BDAC7A8](v20);
  v23 = (char *)&v30[-1] - v22;
  KeyPath = (uint64_t *)swift_getKeyPath();
  *(double *)v30 = a5;
  *(double *)&v30[1] = a6;
  *(double *)&v30[2] = a7;
  *(double *)&v30[3] = a8;
  v31 = 0;
  sub_21435898C(KeyPath, (uint64_t)v30, a2, a3, (uint64_t)v23);
  swift_release();
  v25 = (uint64_t *)swift_getKeyPath();
  v26 = sub_214424308();
  v27 = *(_QWORD *)(v26 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v27 + 16))(v18, a1, v26);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v18, 0, 1, v26);
  sub_21435898C(v25, (uint64_t)v18, v20, (uint64_t)&off_254D6C490, a4);
  swift_release();
  sub_2141E0750((uint64_t)v18, &qword_253F134C8);
  return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v23, v20);
}

uint64_t ChartContent.interpolationMethod(_:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t *KeyPath;
  uint64_t v12;
  char v13;

  KeyPath = (uint64_t *)swift_getKeyPath();
  v12 = a1;
  v13 = a2;
  sub_21435898C(KeyPath, (uint64_t)&v12, a3, a4, a5);
  return swift_release();
}

uint64_t ChartContent.blur(radius:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;

  v6 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v9, a1);
  sub_2141D8BF8(qword_254D6B798);
  sub_214423FE4();
  v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_214426EF0;
  sub_214423FCC();
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(a3, v8, a1);
  result = type metadata accessor for ModifiedChartContent_Filters(0, a1, a2, v11);
  *(_QWORD *)(a3 + *(int *)(result + 36)) = v10;
  return result;
}

uint64_t ChartContent.shadow(color:radius:x:y:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v7 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v10, a2);
  sub_2141D8BF8(qword_254D6B798);
  sub_214423FE4();
  v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_214426EF0;
  sub_214423FD8();
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a4, v9, a2);
  result = type metadata accessor for ModifiedChartContent_Filters(0, a2, a3, v12);
  *(_QWORD *)(a4 + *(int *)(result + 36)) = v11;
  return result;
}

uint64_t ChartContent.zIndex(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  return sub_21435A800(a1, a2, a3, a4);
}

uint64_t ChartContent.functionGraphProgress(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  return sub_21435A800(a1, a2, a3, a4);
}

uint64_t sub_21435A800@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  uint64_t *KeyPath;
  double v10;

  KeyPath = (uint64_t *)swift_getKeyPath();
  v10 = a4;
  sub_21435898C(KeyPath, (uint64_t)&v10, a1, a2, a3);
  return swift_release();
}

_UNKNOWN **sub_21435A874()
{
  return &off_254D6C490;
}

_UNKNOWN **sub_21435A880()
{
  return &off_254D6C450;
}

void sub_21435A88C(uint64_t a1)
{
  sub_21435A8F8(a1, (void (*)(uint64_t, _QWORD *))type metadata accessor for ModifiedChartContent_ForegroundStyles);
}

void type metadata accessor for ModifiedChartContent_ForegroundStyles()
{
  JUMPOUT(0x2199CD874);
}

void sub_21435A8AC(uint64_t a1)
{
  sub_21435A8F8(a1, (void (*)(uint64_t, _QWORD *))type metadata accessor for ModifiedChartContent_ForegroundStyles_Plottable);
}

void type metadata accessor for ModifiedChartContent_ForegroundStyles_Plottable()
{
  JUMPOUT(0x2199CD874);
}

_UNKNOWN **sub_21435A8CC()
{
  return &off_254D6C490;
}

_UNKNOWN **sub_21435A8D8()
{
  return &off_254D6C3E0;
}

void sub_21435A8E4(uint64_t a1)
{
  sub_21435A8F8(a1, (void (*)(uint64_t, _QWORD *))type metadata accessor for ModifiedChartContent_Positions);
}

void sub_21435A8F8(uint64_t a1, void (*a2)(uint64_t, _QWORD *))
{
  uint64_t v3;
  __int128 v4;
  _QWORD v5[3];
  __int128 v6;

  v3 = *(_QWORD *)(a1 + 8);
  v5[0] = *(_QWORD *)a1;
  v5[2] = v3;
  v4 = *(_OWORD *)(a1 + 16);
  v5[1] = swift_getAssociatedTypeWitness();
  v6 = v4;
  a2(255, v5);
  JUMPOUT(0x21435A958);
}

void type metadata accessor for ModifiedChartContent_Positions()
{
  JUMPOUT(0x2199CD874);
}

_UNKNOWN **sub_21435A980()
{
  return &off_254D6C490;
}

void sub_21435A98C(uint64_t *a1)
{
  sub_214342800(a1, (void (*)(uint64_t, uint64_t, uint64_t, _QWORD))type metadata accessor for ModifiedChartContent_Opacities_KeyPath);
}

uint64_t type metadata accessor for ModifiedChartContent_Opacities_KeyPath(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2141D8E88(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ModifiedChartContent_Opacities_KeyPath);
}

_UNKNOWN **sub_21435A9AC()
{
  return &off_254D6C490;
}

_UNKNOWN **sub_21435A9B8()
{
  return &off_254D6C490;
}

_UNKNOWN **sub_21435A9C4()
{
  return &off_254D6C490;
}

_UNKNOWN **sub_21435A9D0()
{
  return &off_254D6C370;
}

void sub_21435A9DC(uint64_t *a1)
{
  sub_214342800(a1, (void (*)(uint64_t, uint64_t, uint64_t, _QWORD))type metadata accessor for ModifiedChartContent_StrokeStyles);
}

uint64_t type metadata accessor for ModifiedChartContent_StrokeStyles(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2141D8E88(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ModifiedChartContent_StrokeStyles);
}

void sub_21435A9FC(uint64_t *a1)
{
  sub_21435AACC(a1, (void (*)(uint64_t, _QWORD *))type metadata accessor for ModifiedChartContent_LineStyle_Plottable);
}

void type metadata accessor for ModifiedChartContent_LineStyle_Plottable()
{
  JUMPOUT(0x2199CD874);
}

_UNKNOWN **sub_21435AA1C()
{
  return &off_254D6C490;
}

_UNKNOWN **sub_21435AA28()
{
  return &off_254D6C300;
}

_UNKNOWN **sub_21435AA34()
{
  return &off_254D6C2C0;
}

void sub_21435AA40(uint64_t *a1)
{
  sub_21435AACC(a1, (void (*)(uint64_t, _QWORD *))type metadata accessor for ModifiedChartContent_Symbols_Plottable);
}

void type metadata accessor for ModifiedChartContent_Symbols_Plottable()
{
  JUMPOUT(0x2199CD874);
}

_UNKNOWN **sub_21435AA60()
{
  return &off_254D6C490;
}

_UNKNOWN **sub_21435AA6C()
{
  return &off_254D6C268;
}

void sub_21435AA78(uint64_t *a1)
{
  sub_214342800(a1, (void (*)(uint64_t, uint64_t, uint64_t, _QWORD))type metadata accessor for ModifiedChartContent_SymbolAreas_KeyPath);
}

uint64_t type metadata accessor for ModifiedChartContent_SymbolAreas_KeyPath(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2141D8E88(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ModifiedChartContent_SymbolAreas_KeyPath);
}

void sub_21435AA98(uint64_t *a1)
{
  sub_214342800(a1, (void (*)(uint64_t, uint64_t, uint64_t, _QWORD))type metadata accessor for ModifiedChartContent_SymbolSizes_KeyPath);
}

uint64_t type metadata accessor for ModifiedChartContent_SymbolSizes_KeyPath(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2141D8E88(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ModifiedChartContent_SymbolSizes_KeyPath);
}

void sub_21435AAB8(uint64_t *a1)
{
  sub_21435AACC(a1, (void (*)(uint64_t, _QWORD *))type metadata accessor for ModifiedChartContent_SymbolSizes_Plottable);
}

void sub_21435AACC(uint64_t *a1, void (*a2)(uint64_t, _QWORD *))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  _QWORD v9[5];

  v3 = *a1;
  v4 = a1[1];
  v5 = a1[2];
  v6 = a1[3];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(v5 + 8);
  v9[0] = v3;
  v9[1] = AssociatedTypeWitness;
  v9[2] = v4;
  v9[3] = v8;
  v9[4] = v6;
  a2(255, v9);
  JUMPOUT(0x21435AB30);
}

void type metadata accessor for ModifiedChartContent_SymbolSizes_Plottable()
{
  JUMPOUT(0x2199CD874);
}

_UNKNOWN **sub_21435AB60()
{
  return &off_254D6C1E0;
}

_UNKNOWN **sub_21435AB6C()
{
  return &off_254D6C490;
}

_UNKNOWN **sub_21435AB78()
{
  return &off_254D6C490;
}

_UNKNOWN **sub_21435AB84()
{
  return &off_254D6C490;
}

_UNKNOWN **sub_21435AB90()
{
  return &off_254D6C1A0;
}

_UNKNOWN **sub_21435AB9C()
{
  return &off_254D6C490;
}

uint64_t sub_21435ABA8()
{
  return sub_21435F104();
}

uint64_t *sub_21435ABB8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    *(_QWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFF8);
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t sub_21435AC6C(uint64_t a1, uint64_t a2)
{
  return sub_21435EDCC(a1, a2, (uint64_t (*)(_QWORD))MEMORY[0x24BEE4BC0]);
}

uint64_t sub_21435AC78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_21435ACD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_21435AD44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_21435EE1C(a1, a2, a3, (void (*)(uint64_t))MEMORY[0x24BEE4BC0]);
}

uint64_t type metadata accessor for ModifiedChartContent_Filters(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2141D8E88(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ModifiedChartContent_Filters);
}

uint64_t sub_21435AD64()
{
  return sub_21435F104();
}

uint64_t *sub_21435AD74(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v10 = (_QWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    v11 = v10[1];
    v12 = (_QWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    *v12 = *v10;
    v12[1] = v11;
  }
  swift_retain();
  return v4;
}

uint64_t sub_21435AE24(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))();
  return swift_release();
}

uint64_t sub_21435AE64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v9 = v8[1];
  *v7 = *v8;
  v7[1] = v9;
  swift_retain();
  return a1;
}

uint64_t sub_21435AEC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v9 = v8[1];
  *v7 = *v8;
  v7[1] = v9;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_21435AF30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  *(_OWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t sub_21435AF94(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v12 = *(_QWORD *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_21435B010 + 4 * byte_21442DBA0[v10]))();
  }
}

void sub_21435B094(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_21435B188()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x21435B200);
}

void sub_21435B190(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x21435B198);
  JUMPOUT(0x21435B200);
}

void sub_21435B1D8()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x21435B200);
}

void sub_21435B1E0()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x21435B200);
}

uint64_t sub_21435B1E8(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_WORD *)(v5 + v6) = 0;
  if (!a2)
    JUMPOUT(0x21435B200);
  if (a3 < 0x7FFFFFFF)
  {
    if ((a2 & 0x80000000) == 0)
      JUMPOUT(0x21435B1FCLL);
    JUMPOUT(0x21435B1F4);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v5);
}

uint64_t type metadata accessor for ModifiedChartContent_TransformEnvironment(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2141D8E88(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ModifiedChartContent_TransformEnvironment);
}

uint64_t sub_21435B248(uint64_t a1, uint64_t a2)
{
  return sub_21435EDCC(a1, a2, (uint64_t (*)(_QWORD))MEMORY[0x24BEE4EF8]);
}

uint64_t sub_21435B254(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_21435EE1C(a1, a2, a3, (void (*)(uint64_t))MEMORY[0x24BEE4EF8]);
}

uint64_t sub_21435B260()
{
  return sub_21435F104();
}

uint64_t type metadata accessor for ModifiedChartContent_SymbolSize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2141D8E88(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ModifiedChartContent_SymbolSize);
}

uint64_t sub_21435B298(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= v5)
    v8 = *(_DWORD *)(v4 + 84);
  else
    v8 = *(_DWORD *)(v6 + 84);
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = *(_QWORD *)(v4 + 64) + v9;
  v11 = a2 - v8;
  if (a2 <= v8)
    goto LABEL_23;
  v12 = (v10 & ~v9) + *(_QWORD *)(v6 + 64);
  v13 = 8 * v12;
  if (v12 <= 3)
  {
    v15 = ((v11 + ~(-1 << v13)) >> v13) + 1;
    if (HIWORD(v15))
    {
      v14 = *(_DWORD *)(a1 + v12);
      if (!v14)
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 > 0xFF)
    {
      v14 = *(unsigned __int16 *)(a1 + v12);
      if (!*(_WORD *)(a1 + v12))
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 < 2)
    {
LABEL_23:
      if (v8)
      {
        if (v5 >= v7)
          return (*(uint64_t (**)(void))(v4 + 48))();
        else
          return (*(uint64_t (**)(uint64_t))(v6 + 48))((v10 + a1) & ~v9);
      }
      return 0;
    }
  }
  v14 = *(unsigned __int8 *)(a1 + v12);
  if (!*(_BYTE *)(a1 + v12))
    goto LABEL_23;
LABEL_14:
  v16 = (v14 - 1) << v13;
  if (v12 > 3)
    v16 = 0;
  if (!(_DWORD)v12)
    return v8 + v16 + 1;
  if (v12 <= 3)
    v17 = (v10 & ~(_DWORD)v9) + *(_DWORD *)(v6 + 64);
  else
    v17 = 4;
  return ((uint64_t (*)(void))((char *)&loc_21435B374 + 4 * byte_21442DBAF[v17 - 1]))();
}

void sub_21435B3F0(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84))
    v7 = *(_DWORD *)(v5 + 84);
  else
    v7 = *(_DWORD *)(v6 + 84);
  v8 = ((*(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
     + *(_QWORD *)(v6 + 64);
  if (a3 > v7)
  {
    if (v8 <= 3)
    {
      v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v11))
      {
        v9 = 4u;
      }
      else if (v11 >= 0x100)
      {
        v9 = 2;
      }
      else
      {
        v9 = v11 > 1;
      }
    }
    else
    {
      v9 = 1u;
    }
  }
  else
  {
    v9 = 0;
  }
  if (v7 < a2)
  {
    v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v12;
        }
        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X16 }
}

void type metadata accessor for ModifiedChartContent_SymbolView()
{
  JUMPOUT(0x2199CD874);
}

uint64_t type metadata accessor for ModifiedChartContent_Symbol(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2141D8E88(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ModifiedChartContent_Symbol);
}

uint64_t type metadata accessor for ModifiedChartContent_LineStyle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2141D8E88(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ModifiedChartContent_LineStyle);
}

uint64_t sub_21435B614()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_21435B694(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v32;
  uint64_t *v33;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 87) & 0xFFFFFFFFFFFFFFF8) + 129 > 0x18)
  {
    v9 = *a2;
    *a1 = *a2;
    v10 = v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8);
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v33 = a1;
    v11 = ((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    v12 = ((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    *(_BYTE *)v11 = *(_BYTE *)v12;
    v13 = *(_QWORD *)(v12 + 8);
    *(_BYTE *)(v11 + 16) = *(_BYTE *)(v12 + 16);
    *(_QWORD *)(v11 + 8) = v13;
    v14 = *(_QWORD *)(v12 + 48);
    *(_QWORD *)(v11 + 48) = v14;
    *(_QWORD *)(v11 + 56) = *(_QWORD *)(v12 + 56);
    (**(void (***)(uint64_t, uint64_t))(v14 - 8))(v11 + 24, v12 + 24);
    *(_OWORD *)(v11 + 64) = *(_OWORD *)(v12 + 64);
    v15 = (v11 + 87) & 0xFFFFFFFFFFFFFFF8;
    v16 = (v12 + 87) & 0xFFFFFFFFFFFFFFF8;
    *(_BYTE *)v15 = *(_BYTE *)v16;
    v17 = *(_QWORD *)(v16 + 8);
    *(_BYTE *)(v15 + 16) = *(_BYTE *)(v16 + 16);
    *(_QWORD *)(v15 + 8) = v17;
    if (*(_QWORD *)(v16 + 48))
    {
      v18 = *(_QWORD *)(v16 + 24);
      v19 = *(_QWORD *)(v16 + 32);
      v20 = *(_BYTE *)(v16 + 40);
      sub_2141DD130(v18, v19, v20);
      *(_QWORD *)(v15 + 24) = v18;
      *(_QWORD *)(v15 + 32) = v19;
      *(_BYTE *)(v15 + 40) = v20;
      *(_QWORD *)(v15 + 48) = *(_QWORD *)(v16 + 48);
      swift_bridgeObjectRetain();
    }
    else
    {
      v21 = *(_OWORD *)(v16 + 40);
      *(_OWORD *)(v15 + 24) = *(_OWORD *)(v16 + 24);
      *(_OWORD *)(v15 + 40) = v21;
    }
    v22 = *(_QWORD *)(v16 + 56);
    v23 = *(_QWORD *)(v16 + 64);
    v24 = *(_QWORD *)(v16 + 72);
    v25 = *(_QWORD *)(v16 + 80);
    v26 = *(_QWORD *)(v16 + 88);
    v27 = *(_QWORD *)(v16 + 96);
    v28 = *(_QWORD *)(v16 + 104);
    v29 = *(_QWORD *)(v16 + 112);
    v32 = *(_QWORD *)(v16 + 120);
    v30 = *(_BYTE *)(v16 + 128);
    sub_214282BFC(v22, v23, v24, v25, v26, v27, v28, v29, v32, v30);
    *(_QWORD *)(v15 + 56) = v22;
    *(_QWORD *)(v15 + 64) = v23;
    *(_QWORD *)(v15 + 72) = v24;
    *(_QWORD *)(v15 + 80) = v25;
    *(_QWORD *)(v15 + 88) = v26;
    *(_QWORD *)(v15 + 96) = v27;
    *(_QWORD *)(v15 + 104) = v28;
    *(_QWORD *)(v15 + 112) = v29;
    *(_QWORD *)(v15 + 120) = v32;
    *(_BYTE *)(v15 + 128) = v30;
    return v33;
  }
  return (uint64_t *)v10;
}

uint64_t sub_21435B884(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v3 + 8))();
  v4 = (a1 + *(_QWORD *)(v3 + 64) + 7) & 0xFFFFFFFFFFFFFFF8;
  _s6Charts15AnyChartContentVwxx_0(v4 + 24);
  v5 = (v4 + 87) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v5 + 48))
  {
    sub_2141ED0BC(*(_QWORD *)(v5 + 24), *(_QWORD *)(v5 + 32), *(_BYTE *)(v5 + 40));
    swift_bridgeObjectRelease();
  }
  return sub_214273B84(*(_QWORD *)(v5 + 56), *(_QWORD *)(v5 + 64), *(_QWORD *)(v5 + 72), *(_QWORD *)(v5 + 80), *(_QWORD *)(v5 + 88), *(_QWORD *)(v5 + 96), *(_QWORD *)(v5 + 104), *(_QWORD *)(v5 + 112), *(_QWORD *)(v5 + 120), *(_BYTE *)(v5 + 128));
}

uint64_t sub_21435B918(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v28 = a1;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(_BYTE *)v7 = *(_BYTE *)v8;
  LOBYTE(v6) = *(_BYTE *)(v8 + 16);
  *(_QWORD *)(v7 + 8) = *(_QWORD *)(v8 + 8);
  *(_BYTE *)(v7 + 16) = v6;
  v9 = *(_QWORD *)(v8 + 48);
  *(_QWORD *)(v7 + 48) = v9;
  *(_QWORD *)(v7 + 56) = *(_QWORD *)(v8 + 56);
  (**(void (***)(uint64_t, uint64_t))(v9 - 8))(v7 + 24, v8 + 24);
  *(_OWORD *)(v7 + 64) = *(_OWORD *)(v8 + 64);
  v10 = (v7 + 87) & 0xFFFFFFFFFFFFFFF8;
  v11 = (v8 + 87) & 0xFFFFFFFFFFFFFFF8;
  *(_BYTE *)v10 = *(_BYTE *)v11;
  v12 = *(_QWORD *)(v11 + 8);
  *(_BYTE *)(v10 + 16) = *(_BYTE *)(v11 + 16);
  *(_QWORD *)(v10 + 8) = v12;
  if (*(_QWORD *)(v11 + 48))
  {
    v13 = *(_QWORD *)(v11 + 24);
    v14 = *(_QWORD *)(v11 + 32);
    v15 = *(_BYTE *)(v11 + 40);
    sub_2141DD130(v13, v14, v15);
    *(_QWORD *)(v10 + 24) = v13;
    *(_QWORD *)(v10 + 32) = v14;
    *(_BYTE *)(v10 + 40) = v15;
    *(_QWORD *)(v10 + 48) = *(_QWORD *)(v11 + 48);
    swift_bridgeObjectRetain();
  }
  else
  {
    v16 = *(_OWORD *)(v11 + 40);
    *(_OWORD *)(v10 + 24) = *(_OWORD *)(v11 + 24);
    *(_OWORD *)(v10 + 40) = v16;
  }
  v17 = *(_QWORD *)(v11 + 56);
  v18 = *(_QWORD *)(v11 + 64);
  v19 = *(_QWORD *)(v11 + 72);
  v20 = *(_QWORD *)(v11 + 80);
  v21 = *(_QWORD *)(v11 + 88);
  v22 = *(_QWORD *)(v11 + 96);
  v23 = *(_QWORD *)(v11 + 104);
  v24 = *(_QWORD *)(v11 + 112);
  v27 = *(_QWORD *)(v11 + 120);
  v25 = *(_BYTE *)(v11 + 128);
  sub_214282BFC(v17, v18, v19, v20, v21, v22, v23, v24, v27, v25);
  *(_QWORD *)(v10 + 56) = v17;
  *(_QWORD *)(v10 + 64) = v18;
  *(_QWORD *)(v10 + 72) = v19;
  *(_QWORD *)(v10 + 80) = v20;
  *(_QWORD *)(v10 + 88) = v21;
  *(_QWORD *)(v10 + 96) = v22;
  *(_QWORD *)(v10 + 104) = v23;
  *(_QWORD *)(v10 + 112) = v24;
  result = v28;
  *(_QWORD *)(v10 + 120) = v27;
  *(_BYTE *)(v10 + 128) = v25;
  return result;
}

uint64_t sub_21435BAA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v46;
  uint64_t v47;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v47 = a1;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(_BYTE *)v7 = *(_BYTE *)v8;
  LOBYTE(v6) = *(_BYTE *)(v8 + 16);
  *(_QWORD *)(v7 + 8) = *(_QWORD *)(v8 + 8);
  *(_BYTE *)(v7 + 16) = v6;
  sub_2141DEA14((uint64_t *)(v7 + 24), (uint64_t *)(v8 + 24));
  *(_OWORD *)(v7 + 64) = *(_OWORD *)(v8 + 64);
  v9 = (v7 + 87) & 0xFFFFFFFFFFFFFFF8;
  v10 = (v8 + 87) & 0xFFFFFFFFFFFFFFF8;
  *(_BYTE *)v9 = *(_BYTE *)v10;
  v11 = *(_QWORD *)(v10 + 8);
  *(_BYTE *)(v9 + 16) = *(_BYTE *)(v10 + 16);
  *(_QWORD *)(v9 + 8) = v11;
  v12 = (_OWORD *)(v9 + 24);
  v13 = (_OWORD *)(v10 + 24);
  v14 = *(_QWORD *)(v10 + 48);
  if (*(_QWORD *)(v9 + 48))
  {
    if (v14)
    {
      v15 = *(_QWORD *)(v10 + 24);
      v16 = *(_QWORD *)(v10 + 32);
      v17 = *(_BYTE *)(v10 + 40);
      sub_2141DD130(v15, v16, v17);
      v18 = *(_QWORD *)(v9 + 24);
      v19 = *(_QWORD *)(v9 + 32);
      v20 = *(_BYTE *)(v9 + 40);
      *(_QWORD *)(v9 + 24) = v15;
      *(_QWORD *)(v9 + 32) = v16;
      *(_BYTE *)(v9 + 40) = v17;
      sub_2141ED0BC(v18, v19, v20);
      *(_QWORD *)(v9 + 48) = *(_QWORD *)(v10 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_21420D798(v9 + 24);
      v24 = *(_OWORD *)(v10 + 40);
      *v12 = *v13;
      *(_OWORD *)(v9 + 40) = v24;
    }
  }
  else if (v14)
  {
    v21 = *(_QWORD *)(v10 + 24);
    v22 = *(_QWORD *)(v10 + 32);
    v23 = *(_BYTE *)(v10 + 40);
    sub_2141DD130(v21, v22, v23);
    *(_QWORD *)(v9 + 24) = v21;
    *(_QWORD *)(v9 + 32) = v22;
    *(_BYTE *)(v9 + 40) = v23;
    *(_QWORD *)(v9 + 48) = *(_QWORD *)(v10 + 48);
    swift_bridgeObjectRetain();
  }
  else
  {
    v25 = *(_OWORD *)(v10 + 40);
    *v12 = *v13;
    *(_OWORD *)(v9 + 40) = v25;
  }
  v26 = *(_QWORD *)(v10 + 56);
  v27 = *(_QWORD *)(v10 + 64);
  v28 = *(_QWORD *)(v10 + 72);
  v29 = *(_QWORD *)(v10 + 80);
  v30 = *(_QWORD *)(v10 + 88);
  v31 = *(_QWORD *)(v10 + 96);
  v32 = *(_QWORD *)(v10 + 104);
  v33 = *(_QWORD *)(v10 + 112);
  v46 = *(_QWORD *)(v10 + 120);
  v34 = *(_BYTE *)(v10 + 128);
  sub_214282BFC(v26, v27, v28, v29, v30, v31, v32, v33, v46, v34);
  v35 = *(_QWORD *)(v9 + 56);
  v36 = *(_QWORD *)(v9 + 64);
  v37 = *(_QWORD *)(v9 + 72);
  v38 = *(_QWORD *)(v9 + 80);
  v39 = *(_QWORD *)(v9 + 88);
  v40 = *(_QWORD *)(v9 + 96);
  v41 = *(_QWORD *)(v9 + 104);
  v42 = *(_QWORD *)(v9 + 112);
  v43 = *(_QWORD *)(v9 + 120);
  v44 = *(_BYTE *)(v9 + 128);
  *(_QWORD *)(v9 + 56) = v26;
  *(_QWORD *)(v9 + 64) = v27;
  *(_QWORD *)(v9 + 72) = v28;
  *(_QWORD *)(v9 + 80) = v29;
  *(_QWORD *)(v9 + 88) = v30;
  *(_QWORD *)(v9 + 96) = v31;
  *(_QWORD *)(v9 + 104) = v32;
  *(_QWORD *)(v9 + 112) = v33;
  *(_QWORD *)(v9 + 120) = v46;
  *(_BYTE *)(v9 + 128) = v34;
  sub_214273B84(v35, v36, v37, v38, v39, v40, v41, v42, v43, v44);
  return v47;
}

uint64_t sub_21435BCA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  unint64_t v12;
  unint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v9 = v8[4];
  v11 = v8[1];
  v10 = v8[2];
  v7[3] = v8[3];
  v7[4] = v9;
  v7[1] = v11;
  v7[2] = v10;
  v12 = ((unint64_t)v7 + 87) & 0xFFFFFFFFFFFFFFF8;
  v13 = ((unint64_t)v8 + 87) & 0xFFFFFFFFFFFFFFF8;
  *(_OWORD *)v12 = *(_OWORD *)v13;
  v14 = *(_OWORD *)(v13 + 64);
  v16 = *(_OWORD *)(v13 + 16);
  v15 = *(_OWORD *)(v13 + 32);
  *(_OWORD *)(v12 + 48) = *(_OWORD *)(v13 + 48);
  *(_OWORD *)(v12 + 64) = v14;
  *(_OWORD *)(v12 + 16) = v16;
  *(_OWORD *)(v12 + 32) = v15;
  v18 = *(_OWORD *)(v13 + 96);
  v17 = *(_OWORD *)(v13 + 112);
  v19 = *(_OWORD *)(v13 + 80);
  *(_BYTE *)(v12 + 128) = *(_BYTE *)(v13 + 128);
  *(_OWORD *)(v12 + 96) = v18;
  *(_OWORD *)(v12 + 112) = v17;
  *(_OWORD *)(v12 + 80) = v19;
  return a1;
}

uint64_t sub_21435BD54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  _OWORD *v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(_BYTE *)v7 = *(_BYTE *)v8;
  LOBYTE(v6) = *(_BYTE *)(v8 + 16);
  *(_QWORD *)(v7 + 8) = *(_QWORD *)(v8 + 8);
  *(_BYTE *)(v7 + 16) = v6;
  _s6Charts15AnyChartContentVwxx_0(v7 + 24);
  v9 = *(_OWORD *)(v8 + 24);
  v10 = *(_OWORD *)(v8 + 40);
  *(_QWORD *)(v7 + 56) = *(_QWORD *)(v8 + 56);
  *(_OWORD *)(v7 + 40) = v10;
  *(_OWORD *)(v7 + 24) = v9;
  *(_OWORD *)(v7 + 64) = *(_OWORD *)(v8 + 64);
  v11 = (v7 + 87) & 0xFFFFFFFFFFFFFFF8;
  v12 = (v8 + 87) & 0xFFFFFFFFFFFFFFF8;
  *(_BYTE *)v11 = *(_BYTE *)v12;
  v13 = *(_QWORD *)(v12 + 8);
  *(_BYTE *)(v11 + 16) = *(_BYTE *)(v12 + 16);
  *(_QWORD *)(v11 + 8) = v13;
  v14 = (_OWORD *)(v11 + 24);
  v15 = (_OWORD *)(v12 + 24);
  if (*(_QWORD *)(v11 + 48))
  {
    if (*(_QWORD *)(v12 + 48))
    {
      v16 = *(_BYTE *)(v12 + 40);
      v17 = *(_QWORD *)(v11 + 24);
      v18 = *(_QWORD *)(v11 + 32);
      v19 = *(_BYTE *)(v11 + 40);
      *(_OWORD *)(v11 + 24) = *(_OWORD *)(v12 + 24);
      *(_BYTE *)(v11 + 40) = v16;
      sub_2141ED0BC(v17, v18, v19);
      *(_QWORD *)(v11 + 48) = *(_QWORD *)(v12 + 48);
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_21420D798(v11 + 24);
      v21 = *(_OWORD *)(v12 + 40);
      *v14 = *v15;
      *(_OWORD *)(v11 + 40) = v21;
    }
  }
  else
  {
    v20 = *(_OWORD *)(v12 + 40);
    *v14 = *v15;
    *(_OWORD *)(v11 + 40) = v20;
  }
  v22 = *(_QWORD *)(v12 + 120);
  v23 = *(_BYTE *)(v12 + 128);
  v24 = *(_QWORD *)(v11 + 56);
  v25 = *(_QWORD *)(v11 + 64);
  v26 = *(_QWORD *)(v11 + 72);
  v27 = *(_QWORD *)(v11 + 80);
  v28 = *(_QWORD *)(v11 + 88);
  v29 = *(_QWORD *)(v11 + 96);
  v30 = *(_QWORD *)(v11 + 104);
  v31 = *(_QWORD *)(v11 + 112);
  v32 = *(_QWORD *)(v11 + 120);
  v33 = *(_BYTE *)(v11 + 128);
  v34 = *(_OWORD *)(v12 + 72);
  v35 = *(_OWORD *)(v12 + 88);
  v36 = *(_OWORD *)(v12 + 104);
  *(_OWORD *)(v11 + 56) = *(_OWORD *)(v12 + 56);
  *(_OWORD *)(v11 + 72) = v34;
  *(_OWORD *)(v11 + 88) = v35;
  *(_OWORD *)(v11 + 104) = v36;
  *(_QWORD *)(v11 + 120) = v22;
  *(_BYTE *)(v11 + 128) = v23;
  sub_214273B84(v24, v25, v26, v27, v28, v29, v30, v31, v32, v33);
  return a1;
}

uint64_t sub_21435BED8(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v13;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v13 = *(_QWORD *)(((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8) + 0x30);
      if (v13 >= 0xFFFFFFFF)
        LODWORD(v13) = -1;
      return (v13 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    v8 = (a2 - v6 + 255) >> (8 * (((((v7 + 7) & 0xF8) + 87) & 0xF8) - 127));
    if ((((((_DWORD)v7 + 7) & 0xFFFFFFF8) + 87) & 0xFFFFFFF8) + 129 < 4)
      v9 = v8 + 1;
    else
      v9 = 2;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    return ((uint64_t (*)(void))((char *)&loc_21435BF68 + 4 * byte_21442DBBD[v11]))();
  }
}

void sub_21435BFFC(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 87) & 0xFFFFFFFFFFFFFFF8) + 129;
  if (v6 >= a3)
  {
    v10 = 0;
    if (v6 >= a2)
      goto LABEL_17;
  }
  else
  {
    if (v7 <= 3)
      v8 = ((a3 - v6 + 255) >> (8 * (((((*(_BYTE *)(v5 + 64) + 7) & 0xF8) + 87) & 0xF8) - 127))) + 1;
    else
      v8 = 2;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    if (v6 >= a2)
LABEL_17:
      __asm { BR              X12 }
  }
  if (v7 >= 4)
    v11 = ~v6 + a2;
  else
    v11 = (~(_BYTE)v6 + a2);
  bzero(a1, v7);
  if ((_DWORD)v7 == 1)
    *a1 = v11;
  else
    *(_DWORD *)a1 = v11;
  __asm { BR              X10 }
}

void sub_21435C120()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x21435C1B0);
}

void sub_21435C128(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x21435C130);
  JUMPOUT(0x21435C1B0);
}

void sub_21435C174()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x21435C1B0);
}

void sub_21435C17C()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x21435C1B0);
}

uint64_t sub_21435C184(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_WORD *)(v6 + v7) = 0;
  if (!a2)
    goto LABEL_6;
  if (a3 < 0x7FFFFFFF)
  {
    if (a2 < 0)
      JUMPOUT(0x21435C190);
    *(_QWORD *)(((v6 + v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 48) = (a2 - 1);
LABEL_6:
    JUMPOUT(0x21435C1B0);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v6);
}

uint64_t sub_21435C1C8(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  result = swift_checkMetadataState();
  if (v4 <= 0x3F)
  {
    result = type metadata accessor for PlottableValue(319, *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 48), v3);
    if (v5 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_21435C26C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int v25;
  uint64_t v26;
  void (*v27)(unint64_t, unint64_t, uint64_t);
  char v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v35 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(v35 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  v8 = (v7 | 7) + *(_QWORD *)(v5 + 64);
  v9 = v7 + 32;
  v10 = *(_QWORD *)(v6 + 64);
  if (((v10 + v7) & ~v7) + v10 <= v10)
    v11 = *(_QWORD *)(v6 + 64);
  else
    v11 = ((v10 + v7) & ~v7) + v10;
  v12 = v7 | *(_DWORD *)(v5 + 80) & 0xF8;
  if (v12 > 7
    || ((*(_DWORD *)(v5 + 80) | *(_DWORD *)(v6 + 80)) & 0x100000) != 0
    || ((((v7 + 32) & ~v7) + v11 + 1 + (v8 & ~(v7 | 7))) & 0xFFFFFFFFFFFFFFF8) + 17 > 0x18)
  {
    v15 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v15 + (((v12 | 7) + 16) & ~(unint64_t)(v12 | 7)));
    swift_retain();
  }
  else
  {
    v33 = v10 + v7;
    v34 = ((v7 + 32) & ~v7) + v11 + 1;
    v16 = ~(v7 | 7);
    v17 = ~v7;
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v18 = ((unint64_t)v4 + v8) & v16;
    v19 = ((unint64_t)a2 + v8) & v16;
    v20 = *(_QWORD *)v19;
    v21 = *(_QWORD *)(v19 + 8);
    v22 = *(_BYTE *)(v19 + 16);
    sub_2141DD130(*(_QWORD *)v19, v21, v22);
    *(_QWORD *)v18 = v20;
    *(_QWORD *)(v18 + 8) = v21;
    *(_BYTE *)(v18 + 16) = v22;
    *(_QWORD *)(v18 + 24) = *(_QWORD *)(v19 + 24);
    v23 = (v9 + v18) & v17;
    v24 = (v9 + v19) & v17;
    v25 = *(unsigned __int8 *)(v24 + v11);
    swift_bridgeObjectRetain();
    if (v25 >= 2)
    {
      if (v11 <= 3)
        v26 = v11;
      else
        v26 = 4;
      __asm { BR              X11 }
    }
    v27 = *(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 16);
    v27(v23, v24, v35);
    if (v25 == 1)
    {
      v27((v33 + v23) & v17, (v33 + v24) & v17, v35);
      v28 = 1;
    }
    else
    {
      v28 = 0;
    }
    *(_BYTE *)(v23 + v11) = v28;
    *(_BYTE *)(v34 + v18) = *(_BYTE *)(v34 + v19);
    v29 = (v34 + v18) & 0xFFFFFFFFFFFFFFF8;
    v30 = (v34 + v19) & 0xFFFFFFFFFFFFFFF8;
    v31 = *(_QWORD *)(v30 + 8);
    *(_BYTE *)(v29 + 16) = *(_BYTE *)(v30 + 16);
    *(_QWORD *)(v29 + 8) = v31;
  }
  return v4;
}

uint64_t sub_21435C4B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t result;
  uint64_t (*v16)(uint64_t, uint64_t);

  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v4 + 8))();
  v5 = *(_QWORD *)(v4 + 64) + a1;
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v5 + (v8 | 7)) & ~(v8 | 7);
  sub_2141ED0BC(*(_QWORD *)v9, *(_QWORD *)(v9 + 8), *(_BYTE *)(v9 + 0x10));
  swift_bridgeObjectRelease();
  v10 = (v8 + v9 + 32) & ~v8;
  v11 = *(_QWORD *)(v7 + 64);
  v12 = v11 + v8;
  if (((v11 + v8) & ~v8) + v11 > v11)
    v11 += (v11 + v8) & ~v8;
  v13 = *(unsigned __int8 *)(v10 + v11);
  if (v13 >= 2)
  {
    if (v11 <= 3)
      v14 = v11;
    else
      v14 = 4;
    __asm { BR              X12 }
  }
  v16 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 8);
  result = v16(v10, v6);
  if (v13 == 1)
    return v16((v12 + v10) & ~v8, v6);
  return result;
}

uint64_t sub_21435C60C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t, uint64_t);
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 16))();
  v31 = *(_QWORD *)(a3 + 24);
  v32 = a1;
  v7 = *(_QWORD *)(v31 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v8 | 7) + *(_QWORD *)(v6 + 64);
  v10 = (v9 + a1) & ~(v8 | 7);
  v11 = (v9 + a2) & ~(v8 | 7);
  v12 = *(_QWORD *)v11;
  v13 = *(_QWORD *)(v11 + 8);
  v14 = *(_BYTE *)(v11 + 0x10);
  sub_2141DD130(*(_QWORD *)v11, v13, v14);
  *(_QWORD *)v10 = v12;
  *(_QWORD *)(v10 + 8) = v13;
  *(_BYTE *)(v10 + 16) = v14;
  *(_QWORD *)(v10 + 24) = *(_QWORD *)(v11 + 24);
  v15 = v8 + 32;
  v16 = (v8 + 32 + v10) & ~v8;
  v17 = (v8 + 32 + v11) & ~v8;
  v18 = *(_QWORD *)(v7 + 64);
  v30 = v18 + v8;
  if (((v18 + v8) & ~v8) + v18 <= v18)
    v19 = *(_QWORD *)(v7 + 64);
  else
    v19 = ((v18 + v8) & ~v8) + v18;
  v20 = *(unsigned __int8 *)(v17 + v19);
  swift_bridgeObjectRetain();
  if (v20 >= 2)
  {
    if (v19 <= 3)
      v21 = v19;
    else
      v21 = 4;
    __asm { BR              X11 }
  }
  v22 = ~v8;
  v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
  v23(v16, v17, v31);
  if (v20 == 1)
  {
    v23((v30 + v16) & v22, (v30 + v17) & v22, v31);
    v24 = 1;
  }
  else
  {
    v24 = 0;
  }
  *(_BYTE *)(v16 + v19) = v24;
  v25 = (v15 & v22) + v19 + 1;
  v26 = v25 + v10;
  v27 = v25 + v11;
  *(_BYTE *)v26 = *(_BYTE *)v27;
  v26 &= 0xFFFFFFFFFFFFFFF8;
  v27 &= 0xFFFFFFFFFFFFFFF8;
  v28 = *(_QWORD *)(v27 + 8);
  *(_BYTE *)(v26 + 16) = *(_BYTE *)(v27 + 16);
  *(_QWORD *)(v26 + 8) = v28;
  return v32;
}

uint64_t sub_21435C7F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t);
  unsigned int v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t, uint64_t);
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 24))();
  v39 = a1;
  v40 = *(_QWORD *)(a3 + 24);
  v7 = *(_QWORD *)(v40 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v8 | 7) + *(_QWORD *)(v6 + 64);
  v10 = (v9 + a1) & ~(v8 | 7);
  v11 = (v9 + a2) & ~(v8 | 7);
  v12 = *(_QWORD *)v11;
  v13 = *(_QWORD *)(v11 + 8);
  v14 = *(_BYTE *)(v11 + 0x10);
  sub_2141DD130(*(_QWORD *)v11, v13, v14);
  v15 = *(_QWORD *)v10;
  v16 = *(_QWORD *)(v10 + 8);
  v17 = *(_BYTE *)(v10 + 16);
  *(_QWORD *)v10 = v12;
  *(_QWORD *)(v10 + 8) = v13;
  *(_BYTE *)(v10 + 16) = v14;
  sub_2141ED0BC(v15, v16, v17);
  *(_QWORD *)(v10 + 24) = *(_QWORD *)(v11 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v18 = v8 + 32;
  v19 = v8 + 32 + v10;
  v20 = ~v8;
  v21 = v19 & ~v8;
  v22 = (v8 + 32 + v11) & ~v8;
  v23 = *(_QWORD *)(v7 + 64);
  if (((v23 + v8) & ~v8) + v23 <= v23)
    v24 = *(_QWORD *)(v7 + 64);
  else
    v24 = ((v23 + v8) & ~v8) + v23;
  if (v21 != v22)
  {
    v38 = ~v8;
    v25 = *(unsigned __int8 *)(v21 + v24);
    v37 = v8 + 32 + v10;
    if (v25 >= 2)
    {
      if (v24 <= 3)
        v26 = v24;
      else
        v26 = 4;
      __asm { BR              X11 }
    }
    v27 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
    v27(v19 & ~v8, v40);
    if (v25 == 1)
      v27(((v37 | v8) + v23) & v38, v40);
    v28 = *(unsigned __int8 *)(v22 + v24);
    if (v28 >= 2)
    {
      if (v24 <= 3)
        v29 = v24;
      else
        v29 = 4;
      __asm { BR              X11 }
    }
    v30 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
    v30(v21, v22, v40);
    if (v28 == 1)
    {
      v20 = ~v8;
      v30(((v37 | v8) + v23) & v38, (((v8 + 32 + v11) | v8) + v23) & v38, v40);
      v31 = 1;
      v18 = v8 + 32;
    }
    else
    {
      v31 = 0;
      v18 = v8 + 32;
      v20 = ~v8;
    }
    *(_BYTE *)(v21 + v24) = v31;
  }
  v32 = (v18 & v20) + v24 + 1;
  v33 = v32 + v10;
  v34 = v32 + v11;
  *(_BYTE *)v33 = *(_BYTE *)v34;
  v33 &= 0xFFFFFFFFFFFFFFF8;
  v34 &= 0xFFFFFFFFFFFFFFF8;
  v35 = *(_QWORD *)(v34 + 8);
  *(_BYTE *)(v33 + 16) = *(_BYTE *)(v34 + 16);
  *(_QWORD *)(v33 + 8) = v35;
  return v39;
}

uint64_t sub_21435CAAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  _OWORD *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(unint64_t, unint64_t, uint64_t);
  uint64_t v23;
  char v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 32))();
  v7 = *(_QWORD *)(a3 + 24);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v9 | 7) + *(_QWORD *)(v6 + 64);
  v31 = a1;
  v11 = (_OWORD *)((v10 + a1) & ~(v9 | 7));
  v12 = (_OWORD *)((v10 + a2) & ~(v9 | 7));
  v13 = v12[1];
  *v11 = *v12;
  v11[1] = v13;
  v14 = v9 + 32;
  v15 = ((unint64_t)v11 + v9 + 32) & ~v9;
  v16 = ((unint64_t)v12 + v9 + 32) & ~v9;
  v17 = *(_QWORD *)(v8 + 64);
  v30 = v17 + v9;
  if (((v17 + v9) & ~v9) + v17 <= v17)
    v18 = *(_QWORD *)(v8 + 64);
  else
    v18 = ((v17 + v9) & ~v9) + v17;
  v19 = *(unsigned __int8 *)(v16 + v18);
  if (v19 >= 2)
  {
    if (v18 <= 3)
      v20 = v18;
    else
      v20 = 4;
    __asm { BR              X13 }
  }
  v21 = ~v9;
  v22 = *(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 32);
  v23 = v7;
  v22(((unint64_t)v11 + v9 + 32) & ~v9, ((unint64_t)v12 + v9 + 32) & ~v9, v7);
  if (v19 == 1)
  {
    v22((v30 + v15) & v21, (v30 + v16) & v21, v23);
    v24 = 1;
  }
  else
  {
    v24 = 0;
  }
  *(_BYTE *)(v15 + v18) = v24;
  v25 = (v14 & v21) + v18 + 1;
  v26 = (unint64_t)v11 + v25;
  v27 = (unint64_t)v12 + v25;
  *(_BYTE *)v26 = *(_BYTE *)v27;
  v26 &= 0xFFFFFFFFFFFFFFF8;
  v27 &= 0xFFFFFFFFFFFFFFF8;
  v28 = *(_QWORD *)(v27 + 8);
  *(_BYTE *)(v26 + 16) = *(_BYTE *)(v27 + 16);
  *(_QWORD *)(v26 + 8) = v28;
  return v31;
}

uint64_t sub_21435CC64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t);
  unsigned int v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t, uint64_t);
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 40))();
  v7 = *(_QWORD *)(v6 + 64);
  v39 = *(_QWORD *)(a3 + 24);
  v8 = *(_QWORD *)(v39 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v9 | 7) + v7;
  v11 = (v10 + a1) & ~(v9 | 7);
  v12 = (v10 + a2) & ~(v9 | 7);
  LOBYTE(v10) = *(_BYTE *)(v12 + 0x10);
  v13 = *(_QWORD *)v11;
  v14 = *(_QWORD *)(v11 + 8);
  v15 = *(_BYTE *)(v11 + 16);
  *(_OWORD *)v11 = *(_OWORD *)v12;
  *(_BYTE *)(v11 + 16) = v10;
  sub_2141ED0BC(v13, v14, v15);
  *(_QWORD *)(v11 + 24) = *(_QWORD *)(v12 + 24);
  swift_bridgeObjectRelease();
  v16 = v9 + 32;
  v17 = v9 + 32 + v11;
  v18 = ~v9;
  v19 = v17 & ~v9;
  v20 = (v9 + 32 + v12) & ~v9;
  v38 = v8;
  v21 = *(_QWORD *)(v8 + 64);
  if (((v21 + v9) & ~v9) + v21 <= v21)
    v22 = v21;
  else
    v22 = ((v21 + v9) & ~v9) + v21;
  if (v19 != v20)
  {
    v37 = ~v9;
    v23 = *(unsigned __int8 *)(v19 + v22);
    v36 = v9 + 32 + v11;
    if (v23 >= 2)
    {
      if (v22 <= 3)
        v24 = v22;
      else
        v24 = 4;
      __asm { BR              X11 }
    }
    v25 = a1;
    v26 = *(void (**)(uint64_t, uint64_t))(v38 + 8);
    v26(v17 & ~v9, v39);
    if (v23 == 1)
      v26(((v36 | v9) + v21) & v37, v39);
    v27 = *(unsigned __int8 *)(v20 + v22);
    if (v27 >= 2)
    {
      if (v22 <= 3)
        v28 = v22;
      else
        v28 = 4;
      __asm { BR              X11 }
    }
    a1 = v25;
    v29 = *(void (**)(uint64_t, uint64_t, uint64_t))(v38 + 32);
    v29(v19, v20, v39);
    if (v27 == 1)
    {
      v18 = ~v9;
      v29(((v36 | v9) + v21) & v37, (((v9 + 32 + v12) | v9) + v21) & v37, v39);
      v30 = 1;
      v16 = v9 + 32;
    }
    else
    {
      v30 = 0;
      v16 = v9 + 32;
      v18 = ~v9;
    }
    *(_BYTE *)(v19 + v22) = v30;
  }
  v31 = (v16 & v18) + v22 + 1;
  v32 = v31 + v11;
  v33 = v31 + v12;
  *(_BYTE *)v32 = *(_BYTE *)v33;
  v32 &= 0xFFFFFFFFFFFFFFF8;
  v33 &= 0xFFFFFFFFFFFFFFF8;
  v34 = *(_QWORD *)(v33 + 8);
  *(_BYTE *)(v32 + 16) = *(_BYTE *)(v33 + 16);
  *(_QWORD *)(v32 + 8) = v34;
  return a1;
}

uint64_t sub_21435CF20(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  unint64_t v19;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(unsigned __int8 *)(v6 + 80);
  if (((v7 + v8) & ~v8) + v7 <= v7)
    v9 = *(_QWORD *)(v6 + 64);
  else
    LODWORD(v9) = ((v7 + v8) & ~(_DWORD)v8) + v7;
  if (v5 <= 0x7FFFFFFF)
    v10 = 0x7FFFFFFF;
  else
    v10 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v11 = v8 | 7;
  v12 = (v8 | 7) + *(_QWORD *)(v4 + 64);
  if (v10 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v19 = *(_QWORD *)(((v12 + a1) & ~v11) + 0x18);
      if (v19 >= 0xFFFFFFFF)
        LODWORD(v19) = -1;
      return (v19 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    v13 = ((((v8 + 32) & ~(_DWORD)v8) + (v12 & ~(_DWORD)v11) + v9 + 1) & 0xFFFFFFF8) + 17;
    v14 = (a2 - v10 + 255) >> (8 * v13);
    if (v13 < 4)
      v15 = v14 + 1;
    else
      v15 = 2;
    if (v15 >= 0x10000)
      v16 = 4;
    else
      v16 = 2;
    if (v15 < 0x100)
      v16 = 1;
    if (v15 >= 2)
      v17 = v16;
    else
      v17 = 0;
    return ((uint64_t (*)(void))((char *)&loc_21435CFEC + 4 * byte_21442DBF4[v17]))();
  }
}

void sub_21435D080(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  size_t v11;
  unsigned int v12;
  int v13;
  int v14;
  unsigned int v15;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(unsigned __int8 *)(v6 + 80);
  if (((v7 + v8) & ~v8) + v7 <= v7)
    v9 = v7;
  else
    v9 = ((v7 + v8) & ~v8) + v7;
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v10 = 0x7FFFFFFF;
  else
    v10 = *(_DWORD *)(v5 + 84);
  v11 = ((((v8 + 32) & ~v8) + v9 + 1 + (((v8 | 7) + *(_QWORD *)(v5 + 64)) & ~(v8 | 7))) & 0xFFFFFFFFFFFFFFF8) + 17;
  if (v10 >= a3)
  {
    v14 = 0;
    if (v10 >= a2)
      goto LABEL_20;
  }
  else
  {
    if (v11 <= 3)
      v12 = ((a3 - v10 + 255) >> (8 * v11)) + 1;
    else
      v12 = 2;
    if (v12 >= 0x10000)
      v13 = 4;
    else
      v13 = 2;
    if (v12 < 0x100)
      v13 = 1;
    if (v12 >= 2)
      v14 = v13;
    else
      v14 = 0;
    if (v10 >= a2)
LABEL_20:
      __asm { BR              X14 }
  }
  if (v11 >= 4)
    v15 = ~v10 + a2;
  else
    v15 = (~(_BYTE)v10 + a2);
  bzero(a1, v11);
  if ((_DWORD)v11 == 1)
    *a1 = v15;
  else
    *(_DWORD *)a1 = v15;
  __asm { BR              X10 }
}

void sub_21435D1E4()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_21435D1EC(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x21435D1F4);
}

void sub_21435D234()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

void sub_21435D23C()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
}

uint64_t sub_21435D244(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_WORD *)(v8 + v9) = 0;
  if (a2)
  {
    if (a3 < 0x7FFFFFFF)
    {
      v4 = (v7 + v8) & v5;
      if (a2 < 0)
        JUMPOUT(0x21435D250);
      *(_QWORD *)(v4 + 24) = (a2 - 1);
    }
    else
    {
      return (*(uint64_t (**)(uint64_t))(v6 + 56))(v8);
    }
  }
  return result;
}

void sub_21435D2A0()
{
  _BYTE *v0;
  char v1;

  *v0 = v1;
}

void sub_21435D2A8()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
}

void sub_21435D2B0()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
}

void type metadata accessor for ModifiedChartContent_Position()
{
  JUMPOUT(0x2199CD874);
}

uint64_t sub_21435D2E8(uint64_t *a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;

  result = swift_checkMetadataState();
  if (v3 <= 0x3F)
  {
    result = type metadata accessor for PlottableProjection(319, a1[3], a1[4], a1[6]);
    if (v4 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_21435D378(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  _QWORD *v36;
  _QWORD *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  void (*v45)(unint64_t, unint64_t, uint64_t);
  char v46;
  void (*v47)(unint64_t, _QWORD *, uint64_t);
  uint64_t *result;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;

  v57 = *(_QWORD *)(a3 + 16);
  v4 = *(_QWORD *)(v57 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  v56 = *(_QWORD *)(a3 + 32);
  v6 = *(_QWORD *)(v56 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  v54 = sub_214423C48();
  v8 = *(_QWORD *)(v54 - 8);
  v9 = *(_DWORD *)(v8 + 80);
  v10 = sub_214423C54();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_DWORD *)(v11 + 80);
  v13 = v9 | v12 | v7;
  v14 = v13 | 7;
  v15 = (v13 | 7) + v5;
  v16 = v15 & ~(v13 | 7);
  v17 = v13 + 32;
  v18 = (v13 + 32) & ~(v13 | 7);
  v55 = v6;
  v19 = *(_QWORD *)(v6 + 64);
  v20 = v19 + v7;
  v59 = v9;
  v60 = v7;
  if (((v19 + v60) & ~v60) + v19 > v19)
    v19 += (v19 + v7) & ~(unint64_t)v7;
  v21 = v9 + 8;
  v52 = *(_QWORD *)(v8 + 64) + v12;
  v53 = v8;
  if (v19 <= ((v52 + (v21 & ~(unint64_t)v9)) & ~v12) + *(_QWORD *)(v11 + 64))
    v19 = ((v52 + ((v9 + 8) & ~(unint64_t)v9)) & ~v12)
        + *(_QWORD *)(v11 + 64);
  if (v19 <= 0x10)
    v22 = 16;
  else
    v22 = v19;
  v23 = v22 + v16 + v18 + 1;
  v24 = v14 | *(_DWORD *)(v4 + 80);
  if (v24 != 7 || ((v9 | *(_DWORD *)(v11 + 80) | v7 | *(_DWORD *)(v4 + 80)) & 0x100000) != 0 || v23 > 0x18)
  {
    v27 = *a2;
    *a1 = *a2;
    v28 = v27 + ((v24 + 16) & ~v24);
    swift_retain();
  }
  else
  {
    v29 = *(_DWORD *)(v11 + 80);
    v49 = v20;
    v50 = *(_QWORD *)(v10 - 8);
    v51 = v10;
    v30 = ~v14;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v4 + 16))(a1, a2, v57);
    v58 = a1;
    v31 = ((unint64_t)a1 + v15) & v30;
    v32 = ((unint64_t)a2 + v15) & v30;
    v33 = *(_QWORD *)v32;
    v34 = *(_QWORD *)(v32 + 8);
    v35 = *(_BYTE *)(v32 + 16);
    sub_2141DD130(*(_QWORD *)v32, v34, v35);
    *(_QWORD *)v31 = v33;
    *(_QWORD *)(v31 + 8) = v34;
    *(_BYTE *)(v31 + 16) = v35;
    *(_QWORD *)(v31 + 24) = *(_QWORD *)(v32 + 24);
    v36 = (_QWORD *)((v17 + v31) & v30);
    v37 = (_QWORD *)((v17 + v32) & v30);
    v38 = *((unsigned __int8 *)v37 + v22);
    swift_bridgeObjectRetain();
    v39 = v22;
    v41 = ~v59;
    v42 = ~v29;
    switch(v38)
    {
      case 0:
        (*(void (**)(unint64_t, _QWORD *, uint64_t))(v55 + 16))((v17 + v31) & v30, v37, v56);
        *((_BYTE *)v36 + v22) = 0;
        return v58;
      case 1:
        v47 = *(void (**)(unint64_t, _QWORD *, uint64_t))(v55 + 16);
        v47((v17 + v31) & v30, v37, v56);
        v47(((unint64_t)v36 + v49) & ~v60, (_QWORD *)(((unint64_t)v37 + v49) & ~v60), v56);
        v46 = 1;
        goto LABEL_28;
      case 2:
        *v36 = *v37;
        *((_BYTE *)v36 + v22) = 2;
        goto LABEL_25;
      case 3:
        *v36 = *v37;
        *(_QWORD *)(((v17 + v31) & v30) + 8) = v37[1];
        *((_BYTE *)v36 + v22) = 3;
        swift_retain();
LABEL_25:
        swift_retain();
        break;
      case 4:
        *v36 = *v37;
        v43 = ((unint64_t)v36 + v21) & v41;
        v44 = ((unint64_t)v37 + v21) & v41;
        v45 = *(void (**)(unint64_t, unint64_t, uint64_t))(v53 + 16);
        swift_retain();
        v45(v43, v44, v54);
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v50 + 16))((v52 + v43) & v42, (v52 + v44) & v42, v51);
        v46 = 4;
LABEL_28:
        *((_BYTE *)v36 + v39) = v46;
        break;
      default:
        if (v22 <= 3)
          v40 = v22;
        else
          v40 = 4;
        __asm { BR              X11 }
        return result;
    }
    return v58;
  }
  return (uint64_t *)v28;
}

uint64_t sub_21435D6EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t (*v23)(uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t);
  uint64_t v32;

  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v4 + 8))();
  v5 = *(_QWORD *)(v4 + 64) + a1;
  v32 = *(_QWORD *)(a2 + 32);
  v6 = *(_QWORD *)(v32 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v30 = sub_214423C48();
  v8 = *(_QWORD *)(v30 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v29 = sub_214423C54();
  v10 = *(_QWORD *)(v29 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = v7 | v9 | v11;
  v13 = (v5 + (v12 | 7)) & ~(v12 | 7);
  sub_2141ED0BC(*(_QWORD *)v13, *(_QWORD *)(v13 + 8), *(_BYTE *)(v13 + 0x10));
  swift_bridgeObjectRelease();
  v14 = (v12 + v13 + 32) & ~(v12 | 7);
  v15 = *(_QWORD *)(v6 + 64);
  v16 = v15 + v7;
  if (((v15 + v7) & ~v7) + v15 > v15)
    v15 += (v15 + v7) & ~v7;
  v17 = v9 + 8;
  v18 = *(_QWORD *)(v8 + 64) + v11;
  if (v15 <= ((v18 + ((v9 + 8) & ~v9)) & (unint64_t)~v11) + *(_QWORD *)(v10 + 64))
    v15 = ((v18 + ((v9 + 8) & ~v9)) & ~v11) + *(_QWORD *)(v10 + 64);
  if (v15 <= 0x10)
    v15 = 16;
  v19 = *(unsigned __int8 *)(v14 + v15);
  v21 = ~v9;
  v22 = *(unsigned __int8 *)(v14 + v15);
  switch(v19)
  {
    case 0:
      v23 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8);
      v24 = v14;
      v25 = v32;
      goto LABEL_18;
    case 1:
      v31 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
      v26 = v16;
      v31(v14, v32);
      v24 = (v26 + v14) & ~v7;
      v25 = v32;
      v23 = (uint64_t (*)(uint64_t, uint64_t))v31;
      goto LABEL_18;
    case 2:
      goto LABEL_16;
    case 3:
      swift_release();
LABEL_16:
      result = swift_release();
      break;
    case 4:
      swift_release();
      v28 = (v17 + v14) & v21;
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v28, v30);
      v24 = (v18 + v28) & ~v11;
      v23 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 8);
      v25 = v29;
LABEL_18:
      result = v23(v24, v25);
      break;
    default:
      if (v22 <= 3)
        v20 = v22;
      else
        v20 = 4;
      __asm { BR              X13 }
      return result;
  }
  return result;
}

uint64_t sub_21435D940(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(_QWORD *, _QWORD *, uint64_t);
  unint64_t v27;
  unint64_t v28;
  void (*v29)(unint64_t, unint64_t, uint64_t);
  uint64_t result;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 16))();
  v7 = *(_QWORD *)(v6 + 64);
  v35 = *(_QWORD *)(a3 + 32);
  v38 = *(_QWORD *)(v35 - 8);
  v8 = *(unsigned __int8 *)(v38 + 80);
  v36 = v8;
  v33 = sub_214423C48();
  v37 = *(_QWORD *)(v33 - 8);
  v9 = *(unsigned __int8 *)(v37 + 80);
  v34 = sub_214423C54();
  v10 = *(_QWORD *)(v34 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = v8 | v9 | v11;
  v13 = (v12 | 7) + v7;
  v39 = a1;
  v14 = (v13 + a1) & ~(v12 | 7);
  v15 = (v13 + a2) & ~(v12 | 7);
  v16 = *(_QWORD *)v15;
  v17 = *(_QWORD *)(v15 + 8);
  LOBYTE(a1) = *(_BYTE *)(v15 + 0x10);
  sub_2141DD130(*(_QWORD *)v15, v17, a1);
  *(_QWORD *)v14 = v16;
  *(_QWORD *)(v14 + 8) = v17;
  *(_BYTE *)(v14 + 16) = a1;
  *(_QWORD *)(v14 + 24) = *(_QWORD *)(v15 + 24);
  v40 = (_QWORD *)((v12 + 32 + v14) & ~(v12 | 7));
  v18 = (_QWORD *)((v12 + 32 + v15) & ~(v12 | 7));
  v19 = *(_QWORD *)(v38 + 64);
  v31 = v19 + v36;
  if (((v19 + v36) & ~v36) + v19 > v19)
    v19 += (v19 + v36) & ~v36;
  v20 = v9 + 8;
  v32 = *(_QWORD *)(v37 + 64) + v11;
  if (v19 <= ((v32 + ((v9 + 8) & ~v9)) & (unint64_t)~v11) + *(_QWORD *)(v10 + 64))
    v19 = ((v32 + ((v9 + 8) & ~v9)) & ~v11) + *(_QWORD *)(v10 + 64);
  if (v19 <= 0x10)
    v21 = 16;
  else
    v21 = v19;
  v22 = *((unsigned __int8 *)v18 + v21);
  swift_bridgeObjectRetain();
  v24 = ~v9;
  v25 = ~v11;
  switch(v22)
  {
    case 0:
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v38 + 16))(v40, v18, v35);
      *((_BYTE *)v40 + v21) = 0;
      break;
    case 1:
      v26 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v38 + 16);
      v26(v40, v18, v35);
      v26((_QWORD *)(((unint64_t)v40 + v31) & ~v36), (_QWORD *)(((unint64_t)v18 + v31) & ~v36), v35);
      *((_BYTE *)v40 + v21) = 1;
      break;
    case 2:
      *v40 = *v18;
      *((_BYTE *)v40 + v21) = 2;
      swift_retain();
      break;
    case 3:
      *v40 = *v18;
      v40[1] = v18[1];
      *((_BYTE *)v40 + v21) = 3;
      swift_retain();
      swift_retain();
      break;
    case 4:
      *v40 = *v18;
      v27 = ((unint64_t)v40 + v20) & v24;
      v28 = ((unint64_t)v18 + v20) & v24;
      v29 = *(void (**)(unint64_t, unint64_t, uint64_t))(v37 + 16);
      swift_retain();
      v29(v27, v28, v33);
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v10 + 16))((v32 + v27) & v25, (v32 + v28) & v25, v34);
      *((_BYTE *)v40 + v21) = 4;
      break;
    default:
      if (v21 <= 3)
        v23 = v21;
      else
        v23 = 4;
      __asm { BR              X11 }
      return result;
  }
  return v39;
}

uint64_t sub_21435DC50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(_QWORD *, uint64_t);
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  void (*v35)(unint64_t, unint64_t, uint64_t);
  char v36;
  void (*v37)(_QWORD *, _QWORD *, uint64_t);
  uint64_t result;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 24))();
  v7 = *(_QWORD *)(v6 + 64);
  v45 = *(_QWORD *)(a3 + 32);
  v46 = *(_QWORD *)(v45 - 8);
  v8 = *(unsigned __int8 *)(v46 + 80);
  v43 = sub_214423C48();
  v47 = *(_QWORD *)(v43 - 8);
  v9 = *(unsigned __int8 *)(v47 + 80);
  v44 = sub_214423C54();
  v48 = *(_QWORD *)(v44 - 8);
  v49 = a1;
  v10 = *(unsigned __int8 *)(v48 + 80);
  v11 = v8 | v9 | v10;
  v12 = (v11 | 7) + v7;
  v13 = (v12 + a1) & ~(v11 | 7);
  v14 = (v12 + a2) & ~(v11 | 7);
  v15 = *(_QWORD *)v14;
  v16 = *(_QWORD *)(v14 + 8);
  v17 = *(_BYTE *)(v14 + 0x10);
  sub_2141DD130(*(_QWORD *)v14, v16, v17);
  v18 = *(_QWORD *)v13;
  v19 = *(_QWORD *)(v13 + 8);
  v20 = *(_BYTE *)(v13 + 16);
  *(_QWORD *)v13 = v15;
  *(_QWORD *)(v13 + 8) = v16;
  *(_BYTE *)(v13 + 16) = v17;
  sub_2141ED0BC(v18, v19, v20);
  *(_QWORD *)(v13 + 24) = *(_QWORD *)(v14 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v21 = (_QWORD *)((v11 + 32 + v13) & ~(v11 | 7));
  v22 = (_QWORD *)((v11 + 32 + v14) & ~(v11 | 7));
  if (v21 != v22)
  {
    v23 = v46;
    v24 = *(_QWORD *)(v46 + 64);
    v25 = ((v24 + v8) & ~v8) + v24;
    if (v25 <= v24)
      v25 = *(_QWORD *)(v46 + 64);
    v41 = v9 + 8;
    v42 = *(_QWORD *)(v47 + 64);
    if (v25 <= ((((v9 + 8) & ~v9) + v10 + v42) & (unint64_t)~v10) + *(_QWORD *)(v48 + 64))
      v25 = ((((v9 + 8) & ~v9) + v10 + v42) & ~v10) + *(_QWORD *)(v48 + 64);
    if (v25 <= 0x10)
      v26 = 16;
    else
      v26 = v25;
    v27 = v10;
    v39 = v10;
    v40 = ~v8;
    v29 = ~v9;
    v30 = ~v27;
    switch(*((_BYTE *)v21 + v26))
    {
      case 0:
        (*(void (**)(_QWORD *, uint64_t))(v46 + 8))(v21, v45);
        break;
      case 1:
        v31 = *(void (**)(_QWORD *, uint64_t))(v46 + 8);
        v31(v21, v45);
        v23 = v46;
        v31((_QWORD *)(((unint64_t)v21 + v8 + v24) & v40), v45);
        v30 = ~v27;
        break;
      case 2:
        swift_release();
        break;
      case 3:
        swift_release();
        swift_release();
        break;
      case 4:
        swift_release();
        (*(void (**)(unint64_t, uint64_t))(v47 + 8))(((unint64_t)v21 + v41) & v29, v43);
        v30 = ~v27;
        (*(void (**)(unint64_t, uint64_t))(v48 + 8))(((((unint64_t)v21 + v41) & v29) + v27 + v42) & ~v27, v44);
        break;
      default:
        if (v26 <= 3)
          v28 = v26;
        else
          v28 = 4;
        __asm { BR              X12 }
        return result;
    }
    switch(*((_BYTE *)v22 + v26))
    {
      case 0:
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v23 + 16))(v21, v22, v45);
        *((_BYTE *)v21 + v26) = 0;
        return v49;
      case 1:
        v37 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v23 + 16);
        v37(v21, v22, v45);
        v37((_QWORD *)(((unint64_t)v21 + v8 + v24) & v40), (_QWORD *)(((unint64_t)v22 + v8 + v24) & v40), v45);
        v36 = 1;
        goto LABEL_32;
      case 2:
        *v21 = *v22;
        *((_BYTE *)v21 + v26) = 2;
        swift_retain();
        return v49;
      case 3:
        *v21 = *v22;
        v21[1] = v22[1];
        *((_BYTE *)v21 + v26) = 3;
        swift_retain();
        swift_retain();
        return v49;
      case 4:
        *v21 = *v22;
        v33 = ((unint64_t)v21 + v41) & v29;
        v34 = ((unint64_t)v22 + v41) & v29;
        v35 = *(void (**)(unint64_t, unint64_t, uint64_t))(v47 + 16);
        swift_retain();
        v35(v33, v34, v43);
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v48 + 16))((v33 + v39 + v42) & v30, (v34 + v39 + v42) & v30, v44);
        v36 = 4;
LABEL_32:
        *((_BYTE *)v21 + v26) = v36;
        break;
      default:
        if (v26 <= 3)
          v32 = v26;
        else
          v32 = 4;
        __asm { BR              X12 }
        return result;
    }
  }
  return v49;
}

uint64_t sub_21435E0F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  _OWORD *v19;
  __int128 v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  char v34;
  void (*v35)(_QWORD *, _QWORD *, uint64_t);
  _QWORD *v36;
  unint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t result;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 32))();
  v7 = *(_QWORD *)(v6 + 64);
  v43 = *(_QWORD *)(a3 + 32);
  v8 = *(_QWORD *)(v43 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v42 = sub_214423C48();
  v10 = *(_QWORD *)(v42 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = sub_214423C54();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v15 = v9 | v11 | v14;
  v16 = v15 | 7;
  v17 = (v15 | 7) + v7;
  v44 = a1;
  v18 = (_OWORD *)((v17 + a1) & ~(v15 | 7));
  v19 = (_OWORD *)((v17 + a2) & ~(v15 | 7));
  v20 = v19[1];
  *v18 = *v19;
  v18[1] = v20;
  v15 += 32;
  v21 = (_QWORD *)(((unint64_t)v18 + v15) & ~v16);
  v22 = (_QWORD *)(((unint64_t)v19 + v15) & ~v16);
  v23 = *(_QWORD *)(v8 + 64);
  v24 = v23 + v9;
  v25 = ((v23 + v9) & ~v9) + v23;
  if (v25 <= v23)
    v25 = *(_QWORD *)(v8 + 64);
  v26 = v11 + 8;
  v27 = *(_QWORD *)(v10 + 64) + v14;
  if (v25 <= ((v27 + ((v11 + 8) & ~v11)) & (unint64_t)~v14) + *(_QWORD *)(v13 + 64))
    v25 = ((v27 + ((v11 + 8) & ~v11)) & ~v14) + *(_QWORD *)(v13 + 64);
  if (v25 <= 0x10)
    v28 = 16;
  else
    v28 = v25;
  v30 = ~v9;
  v31 = ~v11;
  v32 = ~v14;
  switch(*((_BYTE *)v22 + v28))
  {
    case 0:
      v33 = v21;
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v8 + 32))(v21, v22, v43);
      v21 = v33;
      v34 = 0;
      break;
    case 1:
      v35 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v8 + 32);
      v36 = v21;
      v35(v21, v22, v43);
      v35((_QWORD *)(((unint64_t)v36 + v24) & v30), (_QWORD *)(((unint64_t)v22 + v24) & v30), v43);
      v21 = v36;
      v34 = 1;
      break;
    case 2:
      *v21 = *v22;
      v34 = 2;
      break;
    case 3:
      *(_OWORD *)v21 = *(_OWORD *)v22;
      v34 = 3;
      break;
    case 4:
      *v21 = *v22;
      v37 = ((unint64_t)v21 + v26) & v31;
      v38 = ((unint64_t)v22 + v26) & v31;
      v39 = v21;
      v40 = v12;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v10 + 32))(v37, v38, v42);
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v13 + 32))((v27 + v37) & v32, (v27 + v38) & v32, v40);
      v21 = v39;
      v34 = 4;
      break;
    default:
      if (v28 <= 3)
        v29 = v28;
      else
        v29 = 4;
      __asm { BR              X14 }
      return result;
  }
  *((_BYTE *)v21 + v28) = v34;
  return v44;
}

uint64_t sub_21435E38C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(_QWORD *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  void (*v40)(_QWORD *, _QWORD *, uint64_t);
  uint64_t result;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 40))();
  v7 = *(_QWORD *)(v6 + 64);
  v50 = *(_QWORD *)(a3 + 32);
  v51 = *(_QWORD *)(v50 - 8);
  v8 = *(unsigned __int8 *)(v51 + 80);
  v48 = sub_214423C48();
  v9 = *(_QWORD *)(v48 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v49 = sub_214423C54();
  v11 = *(_QWORD *)(v49 - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v13 = v8 | v10 | v12;
  v14 = v13 | 7;
  v15 = (v13 | 7) + v7;
  v52 = a1;
  v16 = (v15 + a1) & ~(v13 | 7);
  v17 = (v15 + a2) & ~(v13 | 7);
  LOBYTE(v15) = *(_BYTE *)(v17 + 16);
  v18 = *(_QWORD *)v16;
  v19 = *(_QWORD *)(v16 + 8);
  v20 = *(_BYTE *)(v16 + 16);
  *(_OWORD *)v16 = *(_OWORD *)v17;
  *(_BYTE *)(v16 + 16) = v15;
  sub_2141ED0BC(v18, v19, v20);
  *(_QWORD *)(v16 + 24) = *(_QWORD *)(v17 + 24);
  swift_bridgeObjectRelease();
  v21 = v13 + 32;
  v22 = (_QWORD *)((v13 + 32 + v16) & ~(v13 | 7));
  v23 = (_QWORD *)((v21 + v17) & ~v14);
  if (v22 != v23)
  {
    v24 = *(_QWORD *)(v51 + 64);
    v25 = ((v24 + v8) & ~v8) + v24;
    if (v25 <= v24)
      v25 = *(_QWORD *)(v51 + 64);
    v45 = v10 + 8;
    v46 = *(_QWORD *)(v9 + 64);
    if (v25 <= ((((v10 + 8) & ~v10) + v12 + v46) & (unint64_t)~v12) + *(_QWORD *)(v11 + 64))
      v25 = ((((v10 + 8) & ~v10) + v12 + v46) & ~v12) + *(_QWORD *)(v11 + 64);
    if (v25 <= 0x10)
      v26 = 16;
    else
      v26 = v25;
    v27 = v11;
    v28 = v51;
    v29 = v12;
    v43 = v12;
    v44 = ~v8;
    v31 = ~v10;
    v32 = ~v12;
    v47 = v27;
    v42 = v8;
    switch(*((_BYTE *)v22 + v26))
    {
      case 0:
        (*(void (**)(_QWORD *, uint64_t))(v51 + 8))(v22, v50);
        break;
      case 1:
        v34 = *(void (**)(_QWORD *, uint64_t))(v51 + 8);
        v35 = v31;
        v36 = ~v29;
        v34(v22, v50);
        v32 = v36;
        v31 = v35;
        v28 = v51;
        v34((_QWORD *)(((unint64_t)v22 + v8 + v24) & v44), v50);
        break;
      case 2:
        swift_release();
        break;
      case 3:
        swift_release();
        swift_release();
        break;
      case 4:
        v33 = v29;
        swift_release();
        (*(void (**)(unint64_t, uint64_t))(v9 + 8))(((unint64_t)v22 + v45) & v31, v48);
        v28 = v51;
        (*(void (**)(unint64_t, uint64_t))(v47 + 8))(((((unint64_t)v22 + v45) & v31) + v33 + v46) & v32, v49);
        break;
      default:
        if (v26 <= 3)
          v30 = v26;
        else
          v30 = 4;
        __asm { BR              X12 }
        return result;
    }
    switch(*((_BYTE *)v23 + v26))
    {
      case 0:
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v28 + 32))(v22, v23, v50);
        v38 = 0;
        break;
      case 1:
        v40 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v28 + 32);
        v40(v22, v23, v50);
        v40((_QWORD *)(((unint64_t)v22 + v42 + v24) & v44), (_QWORD *)(((unint64_t)v23 + v42 + v24) & v44), v50);
        v38 = 1;
        break;
      case 2:
        *v22 = *v23;
        v38 = 2;
        break;
      case 3:
        *(_OWORD *)v22 = *(_OWORD *)v23;
        v38 = 3;
        break;
      case 4:
        *v22 = *v23;
        v39 = ((unint64_t)v23 + v45) & v31;
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 32))(((unint64_t)v22 + v45) & v31, v39, v48);
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v47 + 32))(((((unint64_t)v22 + v45) & v31) + v43 + v46) & v32, (v39 + v43 + v46) & v32, v49);
        v38 = 4;
        break;
      default:
        if (v26 <= 3)
          v37 = v26;
        else
          v37 = 4;
        __asm { BR              X12 }
        return result;
    }
    *((_BYTE *)v22 + v26) = v38;
  }
  return v52;
}

uint64_t sub_21435E7E0(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  int v25;
  unsigned int v27;
  int v28;
  int v29;
  unint64_t v30;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int *)(v6 + 84);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 32) - 8);
  v9 = *(_QWORD *)(v8 + 64);
  v10 = *(unsigned __int8 *)(v8 + 80);
  if (((v9 + v10) & ~v10) + v9 <= v9)
    v11 = *(_QWORD *)(v8 + 64);
  else
    v11 = ((v9 + v10) & ~v10) + v9;
  v12 = *(_QWORD *)(sub_214423C48() - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = *(_QWORD *)(v12 + 64);
  v15 = *(_QWORD *)(sub_214423C54() - 8);
  v16 = *(unsigned __int8 *)(v15 + 80);
  v17 = ((((v13 + 8) & ~v13) + v14 + v16) & ~v16) + *(_QWORD *)(v15 + 64);
  if (v11 > v17)
    v17 = v11;
  if (v17 <= 0x10)
    v18 = 16;
  else
    v18 = v17;
  if (v7 <= 0x7FFFFFFF)
    v19 = 0x7FFFFFFF;
  else
    v19 = v7;
  if (!a2)
    return 0;
  v20 = v13 | v16 | v10;
  v21 = v20 | 7;
  v22 = (v20 | 7) + *(_QWORD *)(v6 + 64);
  if (a2 <= v19)
    goto LABEL_32;
  v23 = v18 + ((v20 + 32) & ~v21) + (v22 & ~v21) + 1;
  v24 = 8 * v23;
  if (v23 <= 3)
  {
    v27 = ((a2 - v19 + ~(-1 << v24)) >> v24) + 1;
    if (HIWORD(v27))
    {
      v25 = *(_DWORD *)(a1 + v23);
      if (!v25)
        goto LABEL_32;
      goto LABEL_23;
    }
    if (v27 > 0xFF)
    {
      v25 = *(unsigned __int16 *)(a1 + v23);
      if (!*(_WORD *)(a1 + v23))
        goto LABEL_32;
      goto LABEL_23;
    }
    if (v27 < 2)
    {
LABEL_32:
      if (v7 >= 0x7FFFFFFF)
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, v7, v5);
      v30 = *(_QWORD *)(((v22 + a1) & ~v21) + 0x18);
      if (v30 >= 0xFFFFFFFF)
        LODWORD(v30) = -1;
      return (v30 + 1);
    }
  }
  v25 = *(unsigned __int8 *)(a1 + v23);
  if (!*(_BYTE *)(a1 + v23))
    goto LABEL_32;
LABEL_23:
  v28 = (v25 - 1) << v24;
  if (v23 > 3)
    v28 = 0;
  if ((_DWORD)v23)
  {
    if (v23 <= 3)
      v29 = v23;
    else
      v29 = 4;
    __asm { BR              X12 }
  }
  return v19 + v28 + 1;
}

void sub_21435EA1C(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int v20;
  size_t v21;
  _BYTE *v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  int v26;

  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = *(_QWORD *)(*(_QWORD *)(a4 + 32) - 8);
  v10 = *(_QWORD *)(v9 + 64);
  v11 = *(unsigned __int8 *)(v9 + 80);
  if (((v10 + v11) & ~v11) + v10 <= v10)
    v12 = *(_QWORD *)(v9 + 64);
  else
    v12 = ((v10 + v11) & ~v11) + v10;
  v13 = *(_QWORD *)(sub_214423C48() - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v15 = *(_QWORD *)(v13 + 64);
  v16 = *(_QWORD *)(sub_214423C54() - 8);
  v17 = *(unsigned __int8 *)(v16 + 80);
  v18 = ((((v14 + 8) & ~v14) + v15 + v17) & ~v17) + *(_QWORD *)(v16 + 64);
  if (v12 > v18)
    v18 = v12;
  if (v18 <= 0x10)
    v19 = 16;
  else
    v19 = v18;
  if (v8 <= 0x7FFFFFFF)
    v20 = 0x7FFFFFFF;
  else
    v20 = v8;
  v21 = v19
      + (((v14 | v17 | v11) + 32) & ~(v14 | v17 | v11 | 7))
      + 1
      + (((v14 | v17 | v11 | 7) + *(_QWORD *)(v7 + 64)) & ~(v14 | v17 | v11 | 7));
  if (a3 <= v20)
  {
    v23 = 0;
    v22 = a1;
  }
  else
  {
    v22 = a1;
    if (v21 <= 3)
    {
      v25 = ((a3 - v20 + ~(-1 << (8 * v21))) >> (8 * v21)) + 1;
      if (HIWORD(v25))
      {
        v23 = 4u;
      }
      else if (v25 >= 0x100)
      {
        v23 = 2;
      }
      else
      {
        v23 = v25 > 1;
      }
    }
    else
    {
      v23 = 1u;
    }
  }
  if (v20 < a2)
  {
    v24 = ~v20 + a2;
    if (v21 < 4)
    {
      if ((_DWORD)v21)
      {
        v26 = v24 & ~(-1 << (8 * v21));
        bzero(v22, v21);
        if ((_DWORD)v21 == 3)
        {
          *(_WORD *)v22 = v26;
          v22[2] = BYTE2(v26);
        }
        else if ((_DWORD)v21 == 2)
        {
          *(_WORD *)v22 = v26;
        }
        else
        {
          *v22 = v26;
        }
      }
    }
    else
    {
      bzero(v22, v21);
      *(_DWORD *)v22 = v24;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X12 }
}

void sub_21435ED30()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
  JUMPOUT(0x21435ED10);
}

void sub_21435ED38()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
  JUMPOUT(0x21435ED10);
}

void sub_21435ED48()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
  JUMPOUT(0x21435ED10);
}

uint64_t sub_21435ED54()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_21435EDCC(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v4;

  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v4 + 8))();
  return a3(*(_QWORD *)((a1 + *(_QWORD *)(v4 + 64) + 7) & 0xFFFFFFFFFFFFF8));
}

uint64_t sub_21435EE1C(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;

  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v7 + 40))();
  v8 = *(_QWORD *)(v7 + 64) + 7;
  v9 = (uint64_t *)((v8 + a1) & 0xFFFFFFFFFFFFFFF8);
  v10 = *v9;
  *v9 = *(_QWORD *)((v8 + a2) & 0xFFFFFFFFFFFFF8);
  a4(v10);
  return a1;
}

uint64_t sub_21435EE84(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v12 = *(_QWORD *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_21435EF00 + 4 * byte_21442DC69[v10]))();
  }
}

void sub_21435EF84(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_21435F078()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x21435F0ECLL);
}

void sub_21435F080(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x21435F088);
  JUMPOUT(0x21435F0ECLL);
}

void sub_21435F0C8()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x21435F0ECLL);
}

void sub_21435F0D0()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x21435F0ECLL);
}

uint64_t sub_21435F0D8(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_WORD *)(v5 + v6) = 0;
  if (!a2)
    JUMPOUT(0x21435F0ECLL);
  if (a3 < 0x7FFFFFFF)
  {
    if ((a2 & 0x80000000) == 0)
      JUMPOUT(0x21435F0E8);
    JUMPOUT(0x21435F0E4);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v5);
}

uint64_t sub_21435F104()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_21435F174(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  char v17;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 72 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v10 = ((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    v11 = ((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    v12 = *(_QWORD *)v11;
    v13 = *(_QWORD *)(v11 + 8);
    v14 = *(_BYTE *)(v11 + 16);
    sub_2141DD130(*(_QWORD *)v11, v13, v14);
    *(_QWORD *)v10 = v12;
    *(_QWORD *)(v10 + 8) = v13;
    *(_BYTE *)(v10 + 16) = v14;
    *(_QWORD *)(v10 + 24) = *(_QWORD *)(v11 + 24);
    v15 = *(_QWORD *)(v11 + 32);
    v16 = *(_QWORD *)(v11 + 40);
    v17 = *(_BYTE *)(v11 + 48);
    swift_bridgeObjectRetain();
    sub_2141DD140(v15, v16, v17);
    *(_QWORD *)(v10 + 32) = v15;
    *(_QWORD *)(v10 + 40) = v16;
    *(_BYTE *)(v10 + 48) = v17;
    *(_OWORD *)(v10 + 56) = *(_OWORD *)(v11 + 56);
  }
  return v4;
}

uint64_t sub_21435F278(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v3 + 8))();
  v4 = (a1 + *(_QWORD *)(v3 + 64) + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_2141ED0BC(*(_QWORD *)v4, *(_QWORD *)(v4 + 8), *(_BYTE *)(v4 + 16));
  swift_bridgeObjectRelease();
  return sub_2141EF1B0(*(_QWORD *)(v4 + 32), *(_QWORD *)(v4 + 40), *(_BYTE *)(v4 + 48));
}

uint64_t sub_21435F2D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_QWORD *)v8;
  v10 = *(_QWORD *)(v8 + 8);
  v11 = *(_BYTE *)(v8 + 16);
  sub_2141DD130(*(_QWORD *)v8, v10, v11);
  *(_QWORD *)v7 = v9;
  *(_QWORD *)(v7 + 8) = v10;
  *(_BYTE *)(v7 + 16) = v11;
  *(_QWORD *)(v7 + 24) = *(_QWORD *)(v8 + 24);
  v12 = *(_QWORD *)(v8 + 32);
  v13 = *(_QWORD *)(v8 + 40);
  v14 = *(_BYTE *)(v8 + 48);
  swift_bridgeObjectRetain();
  sub_2141DD140(v12, v13, v14);
  *(_QWORD *)(v7 + 32) = v12;
  *(_QWORD *)(v7 + 40) = v13;
  *(_BYTE *)(v7 + 48) = v14;
  *(_OWORD *)(v7 + 56) = *(_OWORD *)(v8 + 56);
  return a1;
}

uint64_t sub_21435F380(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char v20;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_QWORD *)v8;
  v10 = *(_QWORD *)(v8 + 8);
  v11 = *(_BYTE *)(v8 + 16);
  sub_2141DD130(*(_QWORD *)v8, v10, v11);
  v12 = *(_QWORD *)v7;
  v13 = *(_QWORD *)(v7 + 8);
  v14 = *(_BYTE *)(v7 + 16);
  *(_QWORD *)v7 = v9;
  *(_QWORD *)(v7 + 8) = v10;
  *(_BYTE *)(v7 + 16) = v11;
  sub_2141ED0BC(v12, v13, v14);
  *(_QWORD *)(v7 + 24) = *(_QWORD *)(v8 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v15 = *(_QWORD *)(v8 + 32);
  v16 = *(_QWORD *)(v8 + 40);
  v17 = *(_BYTE *)(v8 + 48);
  sub_2141DD140(v15, v16, v17);
  v18 = *(_QWORD *)(v7 + 32);
  v19 = *(_QWORD *)(v7 + 40);
  *(_QWORD *)(v7 + 32) = v15;
  *(_QWORD *)(v7 + 40) = v16;
  v20 = *(_BYTE *)(v7 + 48);
  *(_BYTE *)(v7 + 48) = v17;
  sub_2141EF1B0(v18, v19, v20);
  *(_OWORD *)(v7 + 56) = *(_OWORD *)(v8 + 56);
  return a1;
}

uint64_t sub_21435F454(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(_OWORD *)v7 = *(_OWORD *)v8;
  v10 = *(_OWORD *)(v8 + 32);
  v9 = *(_OWORD *)(v8 + 48);
  v11 = *(_OWORD *)(v8 + 16);
  *(_QWORD *)(v7 + 64) = *(_QWORD *)(v8 + 64);
  *(_OWORD *)(v7 + 32) = v10;
  *(_OWORD *)(v7 + 48) = v9;
  *(_OWORD *)(v7 + 16) = v11;
  return a1;
}

uint64_t sub_21435F4C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  LOBYTE(v6) = *(_BYTE *)(v8 + 16);
  v9 = *(_QWORD *)v7;
  v10 = *(_QWORD *)(v7 + 8);
  v11 = *(_BYTE *)(v7 + 16);
  *(_OWORD *)v7 = *(_OWORD *)v8;
  *(_BYTE *)(v7 + 16) = v6;
  sub_2141ED0BC(v9, v10, v11);
  *(_QWORD *)(v7 + 24) = *(_QWORD *)(v8 + 24);
  swift_bridgeObjectRelease();
  v12 = *(_BYTE *)(v8 + 48);
  v13 = *(_QWORD *)(v7 + 32);
  v14 = *(_QWORD *)(v7 + 40);
  *(_OWORD *)(v7 + 32) = *(_OWORD *)(v8 + 32);
  v15 = *(_BYTE *)(v7 + 48);
  *(_BYTE *)(v7 + 48) = v12;
  sub_2141EF1B0(v13, v14, v15);
  *(_OWORD *)(v7 + 56) = *(_OWORD *)(v8 + 56);
  return a1;
}

uint64_t sub_21435F56C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v12 = *(_QWORD *)(((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8) + 0x18);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 72) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_21435F5E8 + 4 * byte_21442DC78[v10]))();
  }
}

void sub_21435F66C(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFB8)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFB8)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 72);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_21435F760()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x21435F7ECLL);
}

void sub_21435F768(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x21435F770);
  JUMPOUT(0x21435F7ECLL);
}

void sub_21435F7B4()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x21435F7ECLL);
}

void sub_21435F7BC()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x21435F7ECLL);
}

uint64_t sub_21435F7C4(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_WORD *)(v6 + v7) = 0;
  if (!a2)
    goto LABEL_6;
  if (a3 < 0x7FFFFFFF)
  {
    if (a2 < 0)
      JUMPOUT(0x21435F7D0);
    *(_QWORD *)(((v6 + v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 24) = (a2 - 1);
LABEL_6:
    JUMPOUT(0x21435F7ECLL);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v6);
}

uint64_t type metadata accessor for ModifiedChartContent_ForegroundStyle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2141D8E88(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ModifiedChartContent_ForegroundStyle);
}

uint64_t sub_21435F810(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  int v12;
  unsigned int v14;
  int v15;
  int v16;
  unint64_t *v17;
  unint64_t v18;

  v3 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v4 = *(_DWORD *)(v3 + 84);
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  if (v4 <= *(_DWORD *)(v5 + 84))
    v6 = *(_DWORD *)(v5 + 84);
  else
    v6 = *(_DWORD *)(v3 + 84);
  if (v6 <= 0x7FFFFFFF)
    v7 = 0x7FFFFFFF;
  else
    v7 = v6;
  if (!a2)
    return 0;
  v8 = *(_QWORD *)(v3 + 64);
  v9 = *(unsigned __int8 *)(v5 + 80);
  if (a2 <= v7)
    goto LABEL_27;
  v10 = ((v9 + ((v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v9) + *(_QWORD *)(v5 + 64);
  v11 = 8 * v10;
  if (v10 <= 3)
  {
    v14 = ((a2 - v7 + ~(-1 << v11)) >> v11) + 1;
    if (HIWORD(v14))
    {
      v12 = *(_DWORD *)(a1 + v10);
      if (!v12)
        goto LABEL_27;
      goto LABEL_18;
    }
    if (v14 > 0xFF)
    {
      v12 = *(unsigned __int16 *)(a1 + v10);
      if (!*(_WORD *)(a1 + v10))
        goto LABEL_27;
      goto LABEL_18;
    }
    if (v14 < 2)
    {
LABEL_27:
      if (v4 == v7)
        return (*(uint64_t (**)(void))(v3 + 48))();
      v17 = (unint64_t *)((a1 + v8 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((v6 & 0x80000000) != 0)
        return (*(uint64_t (**)(unint64_t))(v5 + 48))(((unint64_t)v17 + v9 + 8) & ~v9);
      v18 = *v17;
      if (v18 >= 0xFFFFFFFF)
        LODWORD(v18) = -1;
      return (v18 + 1);
    }
  }
  v12 = *(unsigned __int8 *)(a1 + v10);
  if (!*(_BYTE *)(a1 + v10))
    goto LABEL_27;
LABEL_18:
  v15 = (v12 - 1) << v11;
  if (v10 > 3)
    v15 = 0;
  if (!(_DWORD)v10)
    return v7 + v15 + 1;
  if (v10 <= 3)
    v16 = ((v9 + ((v8 + 7) & 0xFFFFFFF8) + 8) & ~(_DWORD)v9) + *(_DWORD *)(v5 + 64);
  else
    v16 = 4;
  return ((uint64_t (*)(void))((char *)&loc_21435F904 + 4 * byte_21442DC87[v16 - 1]))();
}

void sub_21435F9A0(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  size_t v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  int v13;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v5 + 84) <= *(_DWORD *)(v6 + 84))
    v7 = *(_DWORD *)(v6 + 84);
  else
    v7 = *(_DWORD *)(v5 + 84);
  if (v7 <= 0x7FFFFFFF)
    v8 = 0x7FFFFFFF;
  else
    v8 = v7;
  v9 = ((*(unsigned __int8 *)(v6 + 80) + ((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
     + *(_QWORD *)(v6 + 64);
  if (a3 > v8)
  {
    if (v9 <= 3)
    {
      v12 = ((a3 - v8 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v12))
      {
        v10 = 4u;
      }
      else if (v12 >= 0x100)
      {
        v10 = 2;
      }
      else
      {
        v10 = v12 > 1;
      }
    }
    else
    {
      v10 = 1u;
    }
  }
  else
  {
    v10 = 0;
  }
  if (v8 < a2)
  {
    v11 = ~v8 + a2;
    if (v9 < 4)
    {
      if ((_DWORD)v9)
      {
        v13 = v11 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if ((_DWORD)v9 == 3)
        {
          *a1 = v13;
          *((_BYTE *)a1 + 2) = BYTE2(v13);
        }
        else if ((_DWORD)v9 == 2)
        {
          *a1 = v13;
        }
        else
        {
          *(_BYTE *)a1 = v13;
        }
      }
    }
    else
    {
      bzero(a1, v9);
      *(_DWORD *)a1 = v11;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X4 }
}

uint64_t sub_21435FBDC(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  _BYTE *v20;
  double v21;
  double v22;
  double v23;
  double v24;
  float64x2_t v25;
  float64x2_t v26;
  int8x16_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;

  v29 = *a2;
  v7 = a1 + *(int *)(type metadata accessor for ModifiedChartContent_ForegroundStyle(0, a3, a4, a4) + 36);
  v9 = *(unint64_t *)(v7 + 32);
  v8 = *(_QWORD *)(v7 + 40);
  v10 = *(char *)(v7 + 48);
  v11 = *(_QWORD *)(v7 + 56);
  v12 = *(_QWORD *)(v7 + 64);
  if (v10 < 0)
  {
    v16 = *(_QWORD *)(v7 + 64);
    v17 = *(_QWORD *)(v7 + 32);
    v28 = *(uint64_t *)(v7 + 40);
    v18 = v9 & 0x7FF0000000000000;
    if ((v10 & 1) != 0)
    {
      swift_beginAccess();
      v19 = v18 == 0x7FF0000000000000;
      v12 = v16;
      if (!v19)
      {
        if ((*(_BYTE *)(v29 + 360) & 1) != 0)
        {
          v22 = *(double *)&v9;
        }
        else
        {
          v22 = *(double *)(v29 + 344);
          if (v22 >= *(double *)&v9)
            v22 = *(double *)&v9;
          if (*(double *)(v29 + 352) >= *(double *)&v9)
            v17 = *(_QWORD *)(v29 + 352);
        }
        *(double *)(v29 + 344) = v22;
        *(_QWORD *)(v29 + 352) = v17;
        *(_BYTE *)(v29 + 360) = 0;
      }
      v13 = v29;
      if ((~v8 & 0x7FF0000000000000) != 0)
      {
        if ((*(_BYTE *)(v29 + 360) & 1) != 0)
        {
          *(_QWORD *)(v29 + 344) = v8;
          *(_QWORD *)(v29 + 352) = v8;
        }
        else
        {
          v25 = *(float64x2_t *)(v29 + 344);
          v26 = (float64x2_t)vdupq_lane_s64(v28, 0);
          v27.i64[0] = vmovn_s64(vcgtq_f64(v26, v25)).i32[0];
          v27.i64[1] = vmovn_s64(vcgeq_f64(v25, v26)).i32[1];
          *(int8x16_t *)(v29 + 344) = vbslq_s8(v27, (int8x16_t)v25, (int8x16_t)v26);
        }
        *(_BYTE *)(v29 + 360) = 0;
      }
    }
    else
    {
      swift_beginAccess();
      v19 = v18 == 0x7FF0000000000000;
      v12 = v16;
      v20 = (_BYTE *)(v29 + 336);
      if (!v19)
      {
        if ((*v20 & 1) != 0)
        {
          v21 = *(double *)&v9;
        }
        else
        {
          v21 = *(double *)(v29 + 320);
          if (v21 >= *(double *)&v9)
            v21 = *(double *)&v9;
          if (*(double *)(v29 + 328) >= *(double *)&v9)
            v17 = *(_QWORD *)(v29 + 328);
        }
        *(double *)(v29 + 320) = v21;
        *(_QWORD *)(v29 + 328) = v17;
        *v20 = 0;
      }
      v13 = v29;
      if ((~v8 & 0x7FF0000000000000) != 0)
      {
        if ((*v20 & 1) != 0)
        {
          *(_QWORD *)(v29 + 320) = v8;
          *(_QWORD *)(v29 + 328) = v8;
          *v20 = 0;
        }
        else
        {
          v24 = *(double *)(v29 + 320);
          v23 = *(double *)(v29 + 328);
          if (v24 >= *(double *)&v28)
            v24 = *(double *)&v28;
          if (v23 < *(double *)&v28)
            v23 = *(double *)&v28;
          *(double *)(v29 + 320) = v24;
          *(double *)(v29 + 328) = v23;
          *v20 = 0;
        }
      }
    }
  }
  else
  {
    swift_beginAccess();
    sub_2141DD14C(v9, v8, v10);
    sub_214200CB8(v9, v8, v10);
    swift_endAccess();
    sub_2141EF1B0(v9, v8, v10);
    v13 = v29;
  }
  v14 = v13;
  swift_beginAccess();
  if (*(unsigned __int8 *)(v14 + 385) << 8 == 512)
    sub_21420233C(v11, (_WORD *)(v14 + 384), v11, v12);
  swift_endAccess();
  v30 = v29;
  return (*(uint64_t (**)(uint64_t, __int128 *, uint64_t, uint64_t))(a4 + 32))(a1, &v30, a3, a4);
}

uint64_t sub_21435FE8C@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t result;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v60;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD v66[5];
  char v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77[3];
  _BYTE v78[48];
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;

  v58 = *a2;
  v63 = *((_QWORD *)a2 + 1);
  v6 = v63 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_environment;
  v60 = v63 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_environment;
  swift_beginAccess();
  sub_2141E070C(v6, (uint64_t)v78, &qword_253F14460);
  v65 = type metadata accessor for ChartContentRenderContext.Environment(0);
  v7 = (uint64_t *)(v6 + *(int *)(v65 + 72));
  v8 = *v7;
  v9 = v7[1];
  v11 = v7[2];
  v10 = v7[3];
  v13 = v7[4];
  v12 = v7[5];
  v14 = v7[6];
  v15 = v7[7];
  v16 = v7[8];
  v79 = v8;
  v80 = v9;
  v56 = v9;
  v57 = v8;
  v81 = v11;
  v82 = v10;
  v55 = v11;
  v83 = v13;
  v84 = v12;
  v85 = v14;
  v86 = v15;
  v87 = v16;
  v53 = v16;
  v18 = a1 + *(int *)(type metadata accessor for ModifiedChartContent_ForegroundStyle(0, a3, a4, v17) + 36);
  v45 = *(_QWORD *)(v18 + 40);
  v46 = *(_QWORD *)(v18 + 32);
  v44 = *(unsigned __int8 *)(v18 + 48);
  v54 = v15;
  sub_2141EF260(v8, v9, v11, v10, v13, v12, v14);
  sub_2141EF260(v8, v9, v11, v10, v13, v12, v14);
  v19 = sub_21421B624(v46, v45, v44, 4);
  v66[3] = MEMORY[0x24BDEBF80];
  v66[4] = MEMORY[0x24BDEBF68];
  v66[0] = v19;
  v67 = 1;
  swift_beginAccess();
  sub_2141FA160((uint64_t)v66, v60, &qword_253F14460);
  v20 = *(_QWORD *)v18;
  v21 = *(_QWORD *)(v18 + 8);
  v22 = *(unsigned __int8 *)(v18 + 16);
  v23 = *(_QWORD *)(v18 + 24);
  v24 = v60 + *(int *)(v65 + 72);
  v25 = *(_QWORD *)v24;
  v51 = *(_QWORD *)(v24 + 16);
  v52 = *(_QWORD *)(v24 + 8);
  v49 = *(_QWORD *)(v24 + 32);
  v50 = *(_QWORD *)(v24 + 24);
  v47 = *(_QWORD *)(v24 + 48);
  v48 = *(_QWORD *)(v24 + 40);
  v26 = *(_OWORD *)(v18 + 56);
  *(_QWORD *)v24 = *(_QWORD *)v18;
  *(_QWORD *)(v24 + 8) = v21;
  *(_QWORD *)(v24 + 16) = v22;
  *(_QWORD *)(v24 + 24) = v23;
  *(_QWORD *)(v24 + 32) = v46;
  *(_QWORD *)(v24 + 40) = v45;
  *(_QWORD *)(v24 + 48) = v44;
  *(_OWORD *)(v24 + 56) = v26;
  swift_endAccess();
  sub_2141DD130(v20, v21, v22);
  swift_bridgeObjectRetain();
  sub_2141DD140(v46, v45, v44);
  sub_21421C6D4(v25, v52, v51, v50, v49, v48, v47);
  LOBYTE(v66[0]) = v58;
  v66[1] = v63;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD *))(a4 + 40))(v77, a1, v66);
  v64 = v77[0];
  sub_2141E070C((uint64_t)v78, (uint64_t)v66, &qword_253F14460);
  sub_21421C6D4(v57, v56, v55, v10, v13, v12, v14);
  v68 = v57;
  v69 = v56;
  v70 = v55;
  v71 = v10;
  v72 = v13;
  v73 = v12;
  v74 = v14;
  v75 = v54;
  v76 = v53;
  swift_beginAccess();
  sub_2141FA160((uint64_t)v66, v60, &qword_253F14460);
  sub_2141E801C((uint64_t)v78, (uint64_t)v66, &qword_253F14460);
  v27 = v80;
  v28 = v81;
  v29 = v82;
  v30 = v83;
  v31 = v84;
  v32 = v85;
  v33 = v86;
  v34 = v87;
  v68 = v79;
  v69 = v80;
  v70 = v81;
  v71 = v82;
  v72 = v83;
  v73 = v84;
  v74 = v85;
  v75 = v86;
  v76 = v87;
  v35 = (uint64_t *)(v60 + *(int *)(v65 + 72));
  v36 = *v35;
  v37 = v35[1];
  v38 = v35[2];
  v39 = v35[3];
  v40 = v35[4];
  v41 = v35[5];
  v42 = v35[6];
  *v35 = v79;
  v35[1] = v27;
  v35[2] = v28;
  v35[3] = v29;
  v35[4] = v30;
  v35[5] = v31;
  v35[6] = v32;
  v35[7] = v33;
  v35[8] = v34;
  swift_endAccess();
  sub_21421C6D4(v36, v37, v38, v39, v40, v41, v42);
  result = sub_2141E0750((uint64_t)v66, &qword_253F14460);
  *a5 = v64;
  return result;
}

uint64_t sub_214360290(uint64_t a1, __int128 *a2, uint64_t a3)
{
  return sub_21435FBDC(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t sub_21436029C@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  return sub_21435FE8C(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
}

uint64_t sub_2143602A8(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;

  v7 = *a2;
  v8 = a2[1];
  v9 = a1 + *(int *)(type metadata accessor for ModifiedChartContent_Symbol(0, a3, a4, a4) + 36);
  v10 = *(unsigned __int8 *)(v9 + 48);
  if ((v10 & 0x80) != 0)
    goto LABEL_4;
  v11 = *(_QWORD *)(v9 + 32);
  v12 = *(_QWORD *)(v9 + 40);
  if (v10 < 2)
  {
    sub_2141EF1B0(*(_QWORD *)(v9 + 32), *(_QWORD *)(v9 + 40), v10);
LABEL_4:
    sub_2143836AC(1);
    v17 = v7;
    v18 = v8;
    return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(a4 + 32))(a1, &v17, a3, a4);
  }
  v14 = *(_QWORD *)(v9 + 56);
  v15 = *(_QWORD *)(v9 + 64);
  swift_beginAccess();
  sub_2141DD14C(v11, v12, 2);
  sub_214200CB8(v11, v12, 2);
  swift_endAccess();
  sub_2141EF1B0(v11, v12, 2);
  swift_beginAccess();
  if (*(unsigned __int8 *)(v7 + 457) << 8 == 512)
    sub_21420233C(v14, (_WORD *)(v7 + 456), v14, v15);
  swift_endAccess();
  v16 = *(_BYTE *)(v7 + 1192);
  *(_BYTE *)(v7 + 1192) = 1;
  v17 = v7;
  v18 = v8;
  result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(a4 + 32))(a1, &v17, a3, a4);
  *(_BYTE *)(v7 + 1192) = v16;
  return result;
}

uint64_t sub_214360420@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v8;
  __int128 *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  char v77[8];
  uint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89[3];
  char v90[8];
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  __int128 v101;
  char v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  __int128 v107;

  v74 = *a2;
  v8 = *((_QWORD *)a2 + 1);
  v9 = (__int128 *)(a1 + *(int *)(type metadata accessor for ModifiedChartContent_Symbol(0, a3, a4, a4) + 36));
  v10 = *((unsigned __int8 *)v9 + 48);
  if ((v10 & 0x80) != 0)
    goto LABEL_4;
  v12 = *((_QWORD *)v9 + 4);
  v11 = *((_QWORD *)v9 + 5);
  if (v10 < 2)
  {
    sub_2141EF1B0(*((_QWORD *)v9 + 4), *((_QWORD *)v9 + 5), v10);
LABEL_4:
    v90[0] = v74;
    v91 = v8;
    return (*(uint64_t (**)(uint64_t, char *, uint64_t, uint64_t))(a4 + 40))(a1, v90, a3, a4);
  }
  v69 = a1;
  v14 = v8 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_environment;
  swift_beginAccess();
  v71 = v8;
  v72 = v14 + 88;
  v70 = v14;
  sub_2141E070C(v14 + 88, (uint64_t)v90, &qword_253F12208);
  v73 = type metadata accessor for ChartContentRenderContext.Environment(0);
  v15 = (uint64_t *)(v14 + *(int *)(v73 + 76));
  v16 = v15[1];
  v17 = v15[2];
  v18 = v15[3];
  v20 = v15[4];
  v19 = v15[5];
  v21 = v15[6];
  v22 = v15[7];
  v23 = v15[8];
  v92 = *v15;
  v93 = v16;
  v94 = v17;
  v95 = v18;
  v96 = v20;
  v97 = v19;
  v98 = v21;
  v99 = v22;
  v100 = v23;
  LOBYTE(v15) = *((_BYTE *)v9 + 16);
  v24 = *((_QWORD *)v9 + 3);
  v101 = *v9;
  v102 = (char)v15;
  v103 = v24;
  v104 = v12;
  v105 = v11;
  v106 = 2;
  v107 = *(__int128 *)((char *)v9 + 56);
  v67 = v92;
  v68 = v23;
  v25 = v92;
  v65 = v17;
  v66 = v16;
  v63 = v20;
  v64 = v18;
  v59 = a4;
  v26 = v19;
  v61 = v21;
  v62 = v19;
  v27 = v21;
  v60 = v22;
  sub_2141EF260(v92, v16, v17, v18, v20, v19, v21);
  sub_2141EF260(v25, v16, v17, v18, v20, v26, v27);
  sub_2142062C4((uint64_t)&v101, 5, (uint64_t)v77);
  v79 = 0;
  swift_beginAccess();
  sub_2141FA160((uint64_t)v77, v72, &qword_253F12208);
  v28 = *(_QWORD *)v9;
  v29 = *((_QWORD *)v9 + 1);
  v30 = *((unsigned __int8 *)v9 + 16);
  v32 = *((_QWORD *)v9 + 3);
  v31 = *((_QWORD *)v9 + 4);
  v33 = *((_QWORD *)v9 + 5);
  LOBYTE(v18) = *((_BYTE *)v9 + 48);
  v34 = v70 + *(int *)(v73 + 76);
  v35 = *(_QWORD *)v34;
  v36 = *(_QWORD *)(v34 + 8);
  v57 = *(_QWORD *)(v34 + 24);
  v58 = *(_QWORD *)(v34 + 16);
  v55 = *(_QWORD *)(v34 + 40);
  v56 = *(_QWORD *)(v34 + 32);
  v54 = *(_QWORD *)(v34 + 48);
  v37 = *(__int128 *)((char *)v9 + 56);
  *(_QWORD *)v34 = *(_QWORD *)v9;
  *(_QWORD *)(v34 + 8) = v29;
  *(_QWORD *)(v34 + 16) = v30;
  *(_QWORD *)(v34 + 24) = v32;
  *(_QWORD *)(v34 + 32) = v31;
  *(_QWORD *)(v34 + 40) = v33;
  *(_QWORD *)(v34 + 48) = v18;
  *(_OWORD *)(v34 + 56) = v37;
  swift_endAccess();
  sub_2141DD130(v28, v29, v30);
  swift_bridgeObjectRetain();
  sub_2141DD140(v31, v33, v18);
  sub_21421C6D4(v35, v36, v58, v57, v56, v55, v54);
  v77[0] = v74;
  v78 = v71;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, char *))(v59 + 40))(v89, v69, v77);
  v75 = v89[0];
  sub_2141E070C((uint64_t)v90, (uint64_t)v77, &qword_253F12208);
  sub_21421C6D4(v67, v66, v65, v64, v63, v62, v61);
  v80 = v67;
  v81 = v66;
  v82 = v65;
  v83 = v64;
  v84 = v63;
  v85 = v62;
  v86 = v61;
  v87 = v60;
  v88 = v68;
  swift_beginAccess();
  sub_2141FA160((uint64_t)v77, v72, &qword_253F12208);
  sub_2141E801C((uint64_t)v90, (uint64_t)v77, &qword_253F12208);
  v38 = v93;
  v39 = v94;
  v40 = v95;
  v41 = v96;
  v42 = v97;
  v43 = v98;
  v44 = v99;
  v45 = v100;
  v80 = v92;
  v81 = v93;
  v82 = v94;
  v83 = v95;
  v84 = v96;
  v85 = v97;
  v86 = v98;
  v87 = v99;
  v88 = v100;
  v46 = (uint64_t *)(v70 + *(int *)(v73 + 76));
  v47 = *v46;
  v48 = v46[1];
  v49 = v46[2];
  v50 = v46[3];
  v51 = v46[4];
  v52 = v46[5];
  v53 = v46[6];
  *v46 = v92;
  v46[1] = v38;
  v46[2] = v39;
  v46[3] = v40;
  v46[4] = v41;
  v46[5] = v42;
  v46[6] = v43;
  v46[7] = v44;
  v46[8] = v45;
  swift_endAccess();
  sub_21421C6D4(v47, v48, v49, v50, v51, v52, v53);
  result = sub_2141E0750((uint64_t)v77, &qword_253F12208);
  *a5 = v75;
  return result;
}

uint64_t sub_214360880(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return sub_2143602A8(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t sub_21436088C@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  return sub_214360420(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
}

uint64_t sub_214360898(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  _BYTE *v20;
  double v21;
  double v22;
  double v23;
  double v24;
  float64x2_t v25;
  float64x2_t v26;
  int8x16_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;

  v29 = *a2;
  v7 = a1 + *(int *)(type metadata accessor for ModifiedChartContent_SymbolSize(0, a3, a4, a4) + 36);
  v9 = *(unint64_t *)(v7 + 32);
  v8 = *(_QWORD *)(v7 + 40);
  v10 = *(char *)(v7 + 48);
  v11 = *(_QWORD *)(v7 + 56);
  v12 = *(_QWORD *)(v7 + 64);
  if (v10 < 0)
  {
    v16 = *(_QWORD *)(v7 + 64);
    v17 = *(_QWORD *)(v7 + 32);
    v28 = *(uint64_t *)(v7 + 40);
    v18 = v9 & 0x7FF0000000000000;
    if ((v10 & 1) != 0)
    {
      swift_beginAccess();
      v19 = v18 == 0x7FF0000000000000;
      v12 = v16;
      if (!v19)
      {
        if ((*(_BYTE *)(v29 + 504) & 1) != 0)
        {
          v22 = *(double *)&v9;
        }
        else
        {
          v22 = *(double *)(v29 + 488);
          if (v22 >= *(double *)&v9)
            v22 = *(double *)&v9;
          if (*(double *)(v29 + 496) >= *(double *)&v9)
            v17 = *(_QWORD *)(v29 + 496);
        }
        *(double *)(v29 + 488) = v22;
        *(_QWORD *)(v29 + 496) = v17;
        *(_BYTE *)(v29 + 504) = 0;
      }
      v13 = v29;
      if ((~v8 & 0x7FF0000000000000) != 0)
      {
        if ((*(_BYTE *)(v29 + 504) & 1) != 0)
        {
          *(_QWORD *)(v29 + 488) = v8;
          *(_QWORD *)(v29 + 496) = v8;
        }
        else
        {
          v25 = *(float64x2_t *)(v29 + 488);
          v26 = (float64x2_t)vdupq_lane_s64(v28, 0);
          v27.i64[0] = vmovn_s64(vcgtq_f64(v26, v25)).i32[0];
          v27.i64[1] = vmovn_s64(vcgeq_f64(v25, v26)).i32[1];
          *(int8x16_t *)(v29 + 488) = vbslq_s8(v27, (int8x16_t)v25, (int8x16_t)v26);
        }
        *(_BYTE *)(v29 + 504) = 0;
      }
    }
    else
    {
      swift_beginAccess();
      v19 = v18 == 0x7FF0000000000000;
      v12 = v16;
      v20 = (_BYTE *)(v29 + 480);
      if (!v19)
      {
        if ((*v20 & 1) != 0)
        {
          v21 = *(double *)&v9;
        }
        else
        {
          v21 = *(double *)(v29 + 464);
          if (v21 >= *(double *)&v9)
            v21 = *(double *)&v9;
          if (*(double *)(v29 + 472) >= *(double *)&v9)
            v17 = *(_QWORD *)(v29 + 472);
        }
        *(double *)(v29 + 464) = v21;
        *(_QWORD *)(v29 + 472) = v17;
        *v20 = 0;
      }
      v13 = v29;
      if ((~v8 & 0x7FF0000000000000) != 0)
      {
        if ((*v20 & 1) != 0)
        {
          *(_QWORD *)(v29 + 464) = v8;
          *(_QWORD *)(v29 + 472) = v8;
          *v20 = 0;
        }
        else
        {
          v24 = *(double *)(v29 + 464);
          v23 = *(double *)(v29 + 472);
          if (v24 >= *(double *)&v28)
            v24 = *(double *)&v28;
          if (v23 < *(double *)&v28)
            v23 = *(double *)&v28;
          *(double *)(v29 + 464) = v24;
          *(double *)(v29 + 472) = v23;
          *v20 = 0;
        }
      }
    }
  }
  else
  {
    swift_beginAccess();
    sub_2141DD14C(v9, v8, v10);
    sub_214200CB8(v9, v8, v10);
    swift_endAccess();
    sub_2141EF1B0(v9, v8, v10);
    v13 = v29;
  }
  v14 = v13;
  swift_beginAccess();
  if (*(unsigned __int8 *)(v14 + 529) << 8 == 512)
    sub_21420233C(v11, (_WORD *)(v14 + 528), v11, v12);
  swift_endAccess();
  v30 = v29;
  return (*(uint64_t (**)(uint64_t, __int128 *, uint64_t, uint64_t))(a4 + 32))(a1, &v30, a3, a4);
}

uint64_t sub_214360B48@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _BYTE v56[8];
  uint64_t v57;
  uint64_t v58;

  v7 = a1;
  v51 = *a2;
  v43 = *((_QWORD *)a2 + 1);
  v8 = v43 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_environment;
  swift_beginAccess();
  v49 = *(_QWORD *)(v8 + 144);
  v50 = *(_QWORD *)(v8 + 136);
  v48 = *(_BYTE *)(v8 + 152);
  v42 = type metadata accessor for ChartContentRenderContext.Environment(0);
  v9 = (uint64_t *)(v8 + *(int *)(v42 + 80));
  v11 = *v9;
  v10 = v9[1];
  v46 = *v9;
  v13 = v9[2];
  v12 = v9[3];
  v55 = v9[5];
  v14 = v9[7];
  v53 = v9[4];
  v54 = v9[6];
  v47 = v9[8];
  v16 = v7 + *(int *)(type metadata accessor for ModifiedChartContent_SymbolSize(0, a3, a4, v15) + 36);
  v39 = *(_QWORD *)(v16 + 8);
  v40 = *(_QWORD *)v16;
  v38 = *(unsigned __int8 *)(v16 + 16);
  v17 = *(_QWORD *)(v16 + 32);
  v41 = *(_QWORD *)(v16 + 24);
  v18 = *(_QWORD *)(v16 + 40);
  LOBYTE(v7) = *(_BYTE *)(v16 + 48);
  v37 = *(_OWORD *)(v16 + 56);
  sub_2141EF260(v11, v10, v13, v12, v53, v55, v54);
  *(double *)(v8 + 136) = sub_21421B450(v17, v18, v7, 6);
  *(_QWORD *)(v8 + 144) = 0;
  *(_BYTE *)(v8 + 152) = 0;
  v19 = v8 + *(int *)(v42 + 80);
  v20 = *(_QWORD *)(v19 + 8);
  v35 = *(_QWORD *)(v19 + 16);
  v36 = *(_QWORD *)v19;
  v33 = *(_QWORD *)(v19 + 32);
  v34 = *(_QWORD *)(v19 + 24);
  v31 = *(_QWORD *)(v19 + 48);
  v32 = *(_QWORD *)(v19 + 40);
  *(_QWORD *)v19 = v40;
  *(_QWORD *)(v19 + 8) = v39;
  *(_QWORD *)(v19 + 16) = v38;
  *(_QWORD *)(v19 + 24) = v41;
  *(_QWORD *)(v19 + 32) = v17;
  *(_QWORD *)(v19 + 40) = v18;
  *(_QWORD *)(v19 + 48) = v7;
  *(_OWORD *)(v19 + 56) = v37;
  sub_2141DD130(v40, v39, v38);
  swift_bridgeObjectRetain();
  sub_2141DD140(v17, v18, v7);
  sub_21421C6D4(v36, v20, v35, v34, v33, v32, v31);
  v56[0] = v51;
  v57 = v43;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _BYTE *))(a4 + 40))(&v58, a1, v56);
  v21 = v58;
  *(_QWORD *)(v8 + 136) = v50;
  *(_QWORD *)(v8 + 144) = v49;
  *(_BYTE *)(v8 + 152) = v48;
  v22 = (uint64_t *)(v8 + *(int *)(v42 + 80));
  v23 = *v22;
  v24 = v22[1];
  v25 = v22[2];
  v26 = v22[3];
  v27 = v22[4];
  v28 = v22[5];
  v29 = v22[6];
  *v22 = v46;
  v22[1] = v10;
  v22[2] = v13;
  v22[3] = v12;
  v22[4] = v53;
  v22[5] = v55;
  v22[6] = v54;
  v22[7] = v14;
  v22[8] = v47;
  result = sub_21421C6D4(v23, v24, v25, v26, v27, v28, v29);
  *a5 = v21;
  return result;
}

uint64_t sub_214360DF0(uint64_t a1, __int128 *a2, uint64_t a3)
{
  return sub_214360898(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t sub_214360DFC@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  return sub_214360B48(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
}

uint64_t sub_214360E08(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  _BYTE *v20;
  double v21;
  double v22;
  double v23;
  double v24;
  float64x2_t v25;
  float64x2_t v26;
  int8x16_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;

  v29 = *a2;
  v7 = a1 + *(int *)(type metadata accessor for ModifiedChartContent_LineStyle(0, a3, a4, a4) + 36);
  v9 = *(unint64_t *)(v7 + 32);
  v8 = *(_QWORD *)(v7 + 40);
  v10 = *(char *)(v7 + 48);
  v11 = *(_QWORD *)(v7 + 56);
  v12 = *(_QWORD *)(v7 + 64);
  if (v10 < 0)
  {
    v16 = *(_QWORD *)(v7 + 64);
    v17 = *(_QWORD *)(v7 + 32);
    v28 = *(uint64_t *)(v7 + 40);
    v18 = v9 & 0x7FF0000000000000;
    if ((v10 & 1) != 0)
    {
      swift_beginAccess();
      v19 = v18 == 0x7FF0000000000000;
      v12 = v16;
      if (!v19)
      {
        if ((*(_BYTE *)(v29 + 576) & 1) != 0)
        {
          v22 = *(double *)&v9;
        }
        else
        {
          v22 = *(double *)(v29 + 560);
          if (v22 >= *(double *)&v9)
            v22 = *(double *)&v9;
          if (*(double *)(v29 + 568) >= *(double *)&v9)
            v17 = *(_QWORD *)(v29 + 568);
        }
        *(double *)(v29 + 560) = v22;
        *(_QWORD *)(v29 + 568) = v17;
        *(_BYTE *)(v29 + 576) = 0;
      }
      v13 = v29;
      if ((~v8 & 0x7FF0000000000000) != 0)
      {
        if ((*(_BYTE *)(v29 + 576) & 1) != 0)
        {
          *(_QWORD *)(v29 + 560) = v8;
          *(_QWORD *)(v29 + 568) = v8;
        }
        else
        {
          v25 = *(float64x2_t *)(v29 + 560);
          v26 = (float64x2_t)vdupq_lane_s64(v28, 0);
          v27.i64[0] = vmovn_s64(vcgtq_f64(v26, v25)).i32[0];
          v27.i64[1] = vmovn_s64(vcgeq_f64(v25, v26)).i32[1];
          *(int8x16_t *)(v29 + 560) = vbslq_s8(v27, (int8x16_t)v25, (int8x16_t)v26);
        }
        *(_BYTE *)(v29 + 576) = 0;
      }
    }
    else
    {
      swift_beginAccess();
      v19 = v18 == 0x7FF0000000000000;
      v12 = v16;
      v20 = (_BYTE *)(v29 + 552);
      if (!v19)
      {
        if ((*v20 & 1) != 0)
        {
          v21 = *(double *)&v9;
        }
        else
        {
          v21 = *(double *)(v29 + 536);
          if (v21 >= *(double *)&v9)
            v21 = *(double *)&v9;
          if (*(double *)(v29 + 544) >= *(double *)&v9)
            v17 = *(_QWORD *)(v29 + 544);
        }
        *(double *)(v29 + 536) = v21;
        *(_QWORD *)(v29 + 544) = v17;
        *v20 = 0;
      }
      v13 = v29;
      if ((~v8 & 0x7FF0000000000000) != 0)
      {
        if ((*v20 & 1) != 0)
        {
          *(_QWORD *)(v29 + 536) = v8;
          *(_QWORD *)(v29 + 544) = v8;
          *v20 = 0;
        }
        else
        {
          v23 = *(double *)(v29 + 544);
          v24 = *(double *)(v29 + 536);
          if (v24 >= *(double *)&v28)
            v24 = *(double *)&v28;
          *(double *)(v29 + 536) = v24;
          if (v23 < *(double *)&v28)
            v23 = *(double *)&v28;
          *(double *)(v29 + 544) = v23;
          *v20 = 0;
        }
      }
    }
  }
  else
  {
    swift_beginAccess();
    sub_2141DD14C(v9, v8, v10);
    sub_214200CB8(v9, v8, v10);
    swift_endAccess();
    sub_2141EF1B0(v9, v8, v10);
    v13 = v29;
  }
  v14 = v13;
  swift_beginAccess();
  if (*(unsigned __int8 *)(v14 + 601) << 8 == 512)
    sub_21420233C(v11, (_WORD *)(v14 + 600), v11, v12);
  swift_endAccess();
  v30 = v29;
  return (*(uint64_t (**)(uint64_t, __int128 *, uint64_t, uint64_t))(a4 + 32))(a1, &v30, a3, a4);
}

uint64_t sub_2143610D8@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  char v53;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _BYTE v61[8];
  uint64_t v62;
  uint64_t v63;
  _OWORD v64[2];
  uint64_t v65;

  v53 = *a2;
  v44 = *((_QWORD *)a2 + 1);
  v6 = v44 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_environment;
  swift_beginAccess();
  v52 = *(_OWORD *)(v6 + 48);
  v51 = *(_QWORD *)(v6 + 64);
  v58 = *(_QWORD *)(v6 + 72);
  v50 = *(_QWORD *)(v6 + 80);
  v55 = type metadata accessor for ChartContentRenderContext.Environment(0);
  v7 = (uint64_t *)(v6 + *(int *)(v55 + 84));
  v8 = v7[1];
  v57 = *v7;
  v9 = v7[2];
  v10 = v7[3];
  v47 = v9;
  v48 = v8;
  v11 = v7[4];
  v12 = v7[5];
  v46 = v10;
  v13 = v7[6];
  v45 = v12;
  v56 = v7[7];
  v49 = v7[8];
  v15 = a1 + *(int *)(type metadata accessor for ModifiedChartContent_LineStyle(0, a3, a4, v14) + 36);
  v41 = *(_QWORD *)(v15 + 8);
  v42 = *(_QWORD *)v15;
  v40 = *(unsigned __int8 *)(v15 + 16);
  v43 = *(_QWORD *)(v15 + 24);
  v34 = *(_QWORD *)(v15 + 40);
  v35 = *(_QWORD *)(v15 + 32);
  v16 = *(_BYTE *)(v15 + 48);
  swift_bridgeObjectRetain();
  v39 = *(_OWORD *)(v15 + 56);
  sub_2141EF260(v57, v8, v9, v10, v11, v12, v13);
  sub_21421B218(*(double *)&v35, *(double *)&v34, v16, 7, (uint64_t)v64);
  v17 = v65;
  v18 = v64[1];
  *(_OWORD *)(v6 + 48) = v64[0];
  *(_OWORD *)(v6 + 64) = v18;
  *(_QWORD *)(v6 + 80) = v17;
  swift_bridgeObjectRelease();
  v19 = v6 + *(int *)(v55 + 84);
  v20 = *(_QWORD *)v19;
  v21 = *(_QWORD *)(v19 + 8);
  v22 = *(_QWORD *)(v19 + 32);
  v37 = *(_QWORD *)(v19 + 24);
  v38 = *(_QWORD *)(v19 + 16);
  v23 = *(_QWORD *)(v19 + 40);
  v36 = *(_QWORD *)(v19 + 48);
  *(_QWORD *)v19 = v42;
  *(_QWORD *)(v19 + 8) = v41;
  *(_QWORD *)(v19 + 16) = v40;
  *(_QWORD *)(v19 + 24) = v43;
  *(_QWORD *)(v19 + 32) = v35;
  *(_QWORD *)(v19 + 40) = v34;
  *(_QWORD *)(v19 + 48) = v16;
  *(_OWORD *)(v19 + 56) = v39;
  sub_2141DD130(v42, v41, v40);
  swift_bridgeObjectRetain();
  sub_2141DD140(v35, v34, v16);
  sub_21421C6D4(v20, v21, v38, v37, v22, v23, v36);
  v61[0] = v53;
  v62 = v44;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _BYTE *))(a4 + 40))(&v63, a1, v61);
  v24 = v63;
  *(_OWORD *)(v6 + 48) = v52;
  *(_QWORD *)(v6 + 64) = v51;
  *(_QWORD *)(v6 + 72) = v58;
  *(_QWORD *)(v6 + 80) = v50;
  swift_bridgeObjectRelease();
  v25 = (uint64_t *)(v6 + *(int *)(v55 + 84));
  v26 = *v25;
  v27 = v25[1];
  v28 = v25[2];
  v29 = v25[3];
  v30 = v25[4];
  v31 = v25[5];
  v32 = v25[6];
  *v25 = v57;
  v25[1] = v48;
  v25[2] = v47;
  v25[3] = v46;
  v25[4] = v11;
  v25[5] = v45;
  v25[6] = v13;
  v25[7] = v56;
  v25[8] = v49;
  result = sub_21421C6D4(v26, v27, v28, v29, v30, v31, v32);
  *a5 = v24;
  return result;
}

uint64_t sub_2143613C0(uint64_t a1, __int128 *a2, uint64_t a3)
{
  return sub_214360E08(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t sub_2143613CC@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  return sub_2143610D8(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
}

void sub_2143613D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[10];
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  *(_QWORD *)&v21 = a2;
  v20[9] = a1;
  v12 = type metadata accessor for PlottableValue(0, a5, a7, a4);
  MEMORY[0x24BDAC7A8](v12);
  v20[1] = (char *)v20 - v13;
  v14 = type metadata accessor for PlottableProjection.Storage(0, a4, a5, a7);
  v20[6] = *(_QWORD *)(v14 - 8);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v20[2] = *(_QWORD *)(a5 - 8);
  v16 = MEMORY[0x24BDAC7A8](v15);
  v20[0] = (char *)v20 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v20[3] = (char *)v20 - v18;
  v19 = type metadata accessor for PlottableProjection(0, a4, a5, a7);
  MEMORY[0x24BDAC7A8](v19);
  v21 = *(_OWORD *)v21;
  v20[4] = a3;
  v22 = a3;
  v23 = a4;
  v24 = a5;
  v25 = a6;
  v20[5] = a6;
  v26 = a7;
  type metadata accessor for ModifiedChartContent_LineStyle_Plottable();
}

uint64_t sub_214361584(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  unint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  _BYTE *v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  double v37;
  uint64_t v38;
  double v39;
  uint64_t v40;
  double v41;
  double v42;
  __int128 v43;
  float64x2_t v44;
  float64x2_t v45;
  int8x16_t v46;

  v10 = *(_QWORD *)(v9 - 328) + *(int *)(a1 + 60);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v3, v10, v1);
  sub_214372AC8(v3, v4, v5, v2, (uint64_t *)(v9 - 248));
  v11 = *(_QWORD *)(v9 - 320);
  swift_beginAccess();
  sub_2141FA160(v9 - 248, v11 + 944, &qword_254D69D00);
  swift_endAccess();
  v12 = *(int *)(v1 + 44);
  v13 = *(_QWORD *)(v9 - 352);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v8, v10 + v12, v7);
  if (swift_getEnumCaseMultiPayload())
  {
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v8, v7);
    v14 = *(_QWORD *)(v9 - 360);
    v15 = *(_QWORD *)(v9 - 368);
    v16 = *(_QWORD *)(v9 - 328);
  }
  else
  {
    v17 = *(_QWORD *)(v9 - 384);
    v18 = *(_QWORD *)(v9 - 376);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 32))(v18, v8, v5);
    v19 = *(_QWORD *)v10;
    v20 = *(_QWORD *)(v10 + 8);
    v21 = *(_BYTE *)(v10 + 16);
    v22 = *(_QWORD *)(v10 + 24);
    v23 = *(_QWORD *)(v9 - 400);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(v23, v18, v5);
    v24 = *(_QWORD *)(v9 - 392);
    sub_21437293C(v19, v20, v21, v22, v23, v5, v2, v24);
    swift_bridgeObjectRetain();
    sub_2141DD130(v19, v20, v21);
    sub_2143D046C(v24, v5, v2, v9 - 248);
    v27 = *(unint64_t *)(v9 - 216);
    v26 = *(_QWORD *)(v9 - 208);
    v28 = *(char *)(v9 - 200);
    if (v28 < 0)
    {
      v33 = (_BYTE *)(v11 + 552);
      v34 = *(_QWORD *)(v9 - 216);
      *(_QWORD *)&v25 = *(_QWORD *)(v9 - 208);
      v35 = v27 & 0x7FF0000000000000;
      *(_OWORD *)(v9 - 352) = v25;
      if ((v28 & 1) != 0)
      {
        swift_beginAccess();
        v36 = v35 == 0x7FF0000000000000;
        v14 = *(_QWORD *)(v9 - 360);
        v15 = *(_QWORD *)(v9 - 368);
        v16 = *(_QWORD *)(v9 - 328);
        if (!v36)
        {
          if ((*(_BYTE *)(v11 + 576) & 1) != 0)
          {
            v39 = *(double *)&v27;
            v40 = v11;
          }
          else
          {
            v40 = v11;
            v39 = *(double *)(v11 + 560);
            if (v39 >= *(double *)&v27)
              v39 = *(double *)&v27;
            if (*(double *)(v11 + 568) >= *(double *)&v27)
              v34 = *(_QWORD *)(v11 + 568);
          }
          *(double *)(v40 + 560) = v39;
          *(_QWORD *)(v40 + 568) = v34;
          *(_BYTE *)(v11 + 576) = 0;
        }
        if ((~v26 & 0x7FF0000000000000) != 0)
        {
          if ((*(_BYTE *)(v11 + 576) & 1) != 0)
          {
            *(_QWORD *)(v11 + 560) = v26;
            *(_QWORD *)(v11 + 568) = v26;
          }
          else
          {
            v44 = *(float64x2_t *)(v11 + 560);
            v45 = (float64x2_t)vdupq_lane_s64(*(_QWORD *)(v9 - 352), 0);
            v46.i64[0] = vmovn_s64(vcgtq_f64(v45, v44)).i32[0];
            v46.i64[1] = vmovn_s64(vcgeq_f64(v44, v45)).i32[1];
            *(int8x16_t *)(v11 + 560) = vbslq_s8(v46, (int8x16_t)v44, (int8x16_t)v45);
          }
          *(_BYTE *)(v11 + 576) = 0;
        }
      }
      else
      {
        swift_beginAccess();
        v36 = v35 == 0x7FF0000000000000;
        v14 = *(_QWORD *)(v9 - 360);
        v15 = *(_QWORD *)(v9 - 368);
        v16 = *(_QWORD *)(v9 - 328);
        if (!v36)
        {
          if ((*v33 & 1) != 0)
          {
            v37 = *(double *)&v27;
            v38 = v11;
          }
          else
          {
            v38 = v11;
            v37 = *(double *)(v11 + 536);
            if (v37 >= *(double *)&v27)
              v37 = *(double *)&v27;
            if (*(double *)(v11 + 544) >= *(double *)&v27)
              v34 = *(_QWORD *)(v11 + 544);
          }
          *(double *)(v38 + 536) = v37;
          *(_QWORD *)(v38 + 544) = v34;
          *v33 = 0;
        }
        if ((~v26 & 0x7FF0000000000000) != 0)
        {
          if ((*v33 & 1) != 0)
          {
            *(_QWORD *)(v11 + 536) = v26;
            *(_QWORD *)(v11 + 544) = v26;
            *v33 = 0;
          }
          else
          {
            v41 = *(double *)(v11 + 544);
            v42 = *(double *)(v11 + 536);
            v43 = *(_OWORD *)(v9 - 352);
            if (v42 >= *(double *)&v43)
              v42 = *(double *)(v9 - 352);
            *(double *)(v11 + 536) = v42;
            if (v41 < *(double *)&v43)
              v41 = *(double *)&v43;
            *(double *)(v11 + 544) = v41;
            *v33 = 0;
          }
        }
      }
    }
    else
    {
      swift_beginAccess();
      sub_2141DD14C(v27, v26, v28);
      sub_214200CB8(v27, v26, v28);
      swift_endAccess();
      sub_2141EF1B0(v27, v26, v28);
      v14 = *(_QWORD *)(v9 - 360);
      v15 = *(_QWORD *)(v9 - 368);
      v16 = *(_QWORD *)(v9 - 328);
    }
    v29 = *(_QWORD *)(v9 - 192);
    v30 = *(_QWORD *)(v9 - 184);
    swift_beginAccess();
    if (*(unsigned __int8 *)(v11 + 601) << 8 == 512)
      sub_21420233C(v29, (_WORD *)(v11 + 600), v29, v30);
    swift_endAccess();
    v31 = *(_OWORD *)(v9 - 232);
    *(_OWORD *)(v9 - 176) = *(_OWORD *)(v9 - 248);
    *(_OWORD *)(v9 - 160) = v31;
    sub_21421CC0C(v9 - 176, v9 - 128);
    sub_21421CC48(v9 - 128);
    *(_QWORD *)(v9 - 136) = *(_QWORD *)(v9 - 152);
    sub_2141F9244(v9 - 136);
    sub_2141EF1B0(v27, v26, v28);
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v9 - 384) + 8))(*(_QWORD *)(v9 - 376), v5);
  }
  *(_OWORD *)(v9 - 272) = *(_OWORD *)(v9 - 320);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 32))(v16, v9 - 272, v15, v14);
}

void sub_214361A14(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[25];
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v27 = a1;
  v28 = a6;
  v25 = a8;
  v13 = type metadata accessor for PlottableValue(0, a5, a7, a4);
  v14 = MEMORY[0x24BDAC7A8](v13);
  v21[18] = (char *)v21 - v15;
  v26 = *(_QWORD *)(a5 - 8);
  v16 = MEMORY[0x24BDAC7A8](v14);
  v21[16] = (char *)v21 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v21[19] = (char *)v21 - v18;
  v22 = type metadata accessor for PlottableProjection.Storage(0, a4, a5, a7);
  v21[23] = *(_QWORD *)(v22 - 8);
  MEMORY[0x24BDAC7A8](v22);
  v21[24] = (char *)v21 - v19;
  v20 = type metadata accessor for PlottableProjection(0, a4, a5, a7);
  MEMORY[0x24BDAC7A8](v20);
  v23 = *a2;
  v24 = a3;
  v29 = a3;
  v30 = a4;
  v31 = a5;
  v32 = v28;
  v33 = a7;
  type metadata accessor for ModifiedChartContent_LineStyle_Plottable();
}

uint64_t sub_214361BA0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t result;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  __int128 v91;
  __int128 v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;

  v10 = *(_QWORD *)(v1 + 288) + *(int *)(a1 + 60);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16);
  v12 = v6;
  *(_QWORD *)(v1 + 168) = v8;
  v11(v5, v10, v8);
  sub_2141E801C(v4 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_lineStyleScale, v9 - 232, &qword_253F149E8);
  sub_2141E801C(v9 - 232, v1 + 2056, &qword_253F149E8);
  swift_retain();
  sub_21424D8C4(v9 - 232, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_21424D6F8);
  sub_214423D80();
  v13 = MEMORY[0x24BDEB7D0];
  *(_QWORD *)(v1 + 160) = v3;
  *(_QWORD *)(v1 + 136) = v7;
  sub_214252198(v5, v1 + 2056, v1 + 448, v6, v13, (uint64_t *)(v1 + 1328));
  v14 = *(_QWORD *)(v1 + 1328);
  v15 = *(_QWORD *)(v1 + 1336);
  v16 = *(_QWORD *)(v1 + 1352);
  *(_QWORD *)(v1 + 272) = *(_QWORD *)(v1 + 1344);
  *(_QWORD *)(v1 + 280) = v16;
  v17 = *(_QWORD *)(v1 + 1360);
  *(_QWORD *)(v1 + 248) = v15;
  *(_QWORD *)(v1 + 256) = v17;
  *(_QWORD *)(v1 + 264) = *(_QWORD *)(v1 + 1368);
  v18 = *(_QWORD *)(v1 + 1376);
  v19 = *(_QWORD *)(v1 + 1384);
  *(_QWORD *)(v1 + 312) = v14;
  *(_QWORD *)(v1 + 320) = v19;
  *(_QWORD *)(v1 + 328) = *(_QWORD *)(v1 + 1392);
  *(_QWORD *)(v1 + 336) = v18;
  *(_DWORD *)(v1 + 348) = *(unsigned __int8 *)(v1 + 1400);
  v20 = OBJC_IVAR____TtC6Charts25ChartContentRenderContext_environment;
  *(_QWORD *)(v1 + 224) = v4;
  v21 = v4 + v20;
  swift_beginAccess();
  v22 = type metadata accessor for ChartContentRenderContext.Environment(0);
  *(_QWORD *)(v1 + 304) = v22;
  v23 = v21 + *(int *)(v22 + 108);
  v24 = *(_QWORD *)(v23 + 24);
  *(_QWORD *)(v1 + 176) = v10;
  if (v24)
  {
    sub_21427362C(v23, v1 + 448);
    sub_214253714(v6, (_QWORD *)(v1 + 1328));
    sub_21420D92C(v1 + 448);
    if (*(_QWORD *)(v1 + 1352) != 2)
    {
      memcpy((void *)(v1 + 2056), (const void *)(v1 + 1328), 0x2C9uLL);
      v27 = *(_QWORD *)(v1 + 2168);
      v28 = *(_QWORD *)(v1 + 328);
      v29 = *(_QWORD *)(v1 + 336);
      *(_QWORD *)(v1 + 104) = *(_QWORD *)(v1 + 2176);
      *(_QWORD *)(v1 + 112) = v27;
      v31 = *(_QWORD *)(v1 + 256);
      v30 = *(_QWORD *)(v1 + 264);
      *(_QWORD *)(v1 + 96) = *(_QWORD *)(v1 + 2184);
      v32 = *(_QWORD *)(v1 + 2192);
      *(_QWORD *)(v1 + 72) = *(_QWORD *)(v1 + 2200);
      *(_QWORD *)(v1 + 80) = v32;
      v33 = *(_QWORD *)(v1 + 2208);
      *(_QWORD *)(v1 + 56) = *(_QWORD *)(v1 + 2216);
      *(_QWORD *)(v1 + 64) = v33;
      *(_QWORD *)(v1 + 48) = *(_QWORD *)(v1 + 2224);
      *(_QWORD *)(v1 + 32) = *(_QWORD *)(v1 + 2232);
      *(_DWORD *)(v1 + 24) = *(unsigned __int8 *)(v1 + 2240);
      v34 = *(_QWORD *)(v1 + 312);
      *(_QWORD *)(v1 + 120) = v21;
      v35 = *(_QWORD *)(v1 + 248);
      v37 = *(_QWORD *)(v1 + 272);
      v36 = *(_QWORD *)(v1 + 280);
      sub_2141EF2B4(v34, v35, v37, v36);
      v38 = *(_QWORD *)(v1 + 320);
      *(_QWORD *)(v1 + 40) = v12;
      v39 = v38;
      v40 = *(_DWORD *)(v1 + 348);
      sub_214282BD0(v31, v30, v29, v38, v28, v40);
      sub_21436847C(*(_QWORD *)(v1 + 112), *(_QWORD *)(v1 + 104), *(_QWORD *)(v1 + 96), *(_QWORD *)(v1 + 80), *(_QWORD *)(v1 + 72), *(_QWORD *)(v1 + 64), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 32), *(_DWORD *)(v1 + 24));
      *(_QWORD *)(v1 + 2168) = *(_QWORD *)(v1 + 312);
      *(_QWORD *)(v1 + 2176) = v35;
      v21 = *(_QWORD *)(v1 + 120);
      *(_QWORD *)(v1 + 2184) = v37;
      *(_QWORD *)(v1 + 2192) = v36;
      *(_QWORD *)(v1 + 2200) = v31;
      *(_QWORD *)(v1 + 2208) = v30;
      *(_QWORD *)(v1 + 2216) = v29;
      *(_QWORD *)(v1 + 2224) = v39;
      *(_QWORD *)(v1 + 2232) = v28;
      *(_BYTE *)(v1 + 2240) = v40;
      v41 = *(_QWORD *)(v1 + 40);
      v44 = type metadata accessor for TypedVectorizedProperties(0, v41, v42, v43);
      v45 = *(_QWORD *)(v44 - 8);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v45 + 16))(v1 + 1328, v1 + 2056, v44);
      sub_2142536C0((const void *)(v1 + 1328), v41, v46, v47, (uint64_t *)(v1 + 448));
      swift_beginAccess();
      sub_2141FA160(v1 + 448, v21 + *(int *)(*(_QWORD *)(v1 + 304) + 108), &qword_254D69D18);
      swift_endAccess();
      (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v1 + 2056, v44);
      goto LABEL_6;
    }
  }
  else
  {
    *(_QWORD *)(v1 + 1336) = 0;
    *(_QWORD *)(v1 + 1328) = 0;
    *(_QWORD *)(v1 + 1344) = 0;
    *(_QWORD *)(v1 + 1352) = 2;
    bzero((void *)(v1 + 1360), 0x2A9uLL);
  }
  type metadata accessor for TypedVectorizedProperties(255, v6, v25, v26);
  v48 = sub_214425388();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 8))(v1 + 1328, v48);
  *(_QWORD *)(v1 + 2784) = 0;
  *(_QWORD *)(v1 + 2792) = 0;
  *(_QWORD *)(v1 + 2800) = 0;
  *(_QWORD *)(v1 + 2808) = 1;
  *(_QWORD *)(v1 + 2824) = 0;
  *(_QWORD *)(v1 + 2816) = 0;
  *(_BYTE *)(v1 + 2832) = 0;
  *(_QWORD *)(v1 + 2840) = 0;
  *(_QWORD *)(v1 + 2848) = 0;
  *(_QWORD *)(v1 + 2856) = 0;
  *(_QWORD *)(v1 + 2864) = 1;
  *(_QWORD *)(v1 + 2880) = 0;
  *(_QWORD *)(v1 + 2872) = 0;
  *(_BYTE *)(v1 + 2888) = 0;
  v49 = *(_QWORD *)(v1 + 312);
  *(_QWORD *)(v1 + 2896) = v49;
  v50 = *(_QWORD *)(v1 + 248);
  v51 = *(_QWORD *)(v1 + 256);
  *(_QWORD *)(v1 + 2904) = v50;
  v53 = *(_QWORD *)(v1 + 272);
  v52 = *(_QWORD *)(v1 + 280);
  *(_QWORD *)(v1 + 2912) = v53;
  *(_QWORD *)(v1 + 2920) = v52;
  *(_QWORD *)(v1 + 2928) = v51;
  v54 = *(_QWORD *)(v1 + 264);
  *(_QWORD *)(v1 + 2936) = v54;
  *(_QWORD *)(v1 + 2944) = *(_QWORD *)(v1 + 336);
  *(_QWORD *)(v1 + 2952) = *(_QWORD *)(v1 + 320);
  *(_QWORD *)(v1 + 2960) = *(_QWORD *)(v1 + 328);
  *(_BYTE *)(v1 + 2968) = *(_DWORD *)(v1 + 348);
  *(_QWORD *)(v1 + 368) = 0;
  *(_QWORD *)(v1 + 376) = 0;
  *(_QWORD *)(v1 + 384) = 0;
  *(_QWORD *)(v1 + 392) = 1;
  *(_OWORD *)(v1 + 400) = 0u;
  *(_OWORD *)(v1 + 416) = 0u;
  *(_OWORD *)(v1 + 425) = 0u;
  *(_OWORD *)(v1 + 2976) = 0u;
  *(_OWORD *)(v1 + 2992) = 0u;
  *(_OWORD *)(v1 + 3008) = 0u;
  *(_BYTE *)(v1 + 3024) = -4;
  sub_21427384C(v1 + 1168);
  type metadata accessor for TypedVectorizedProperties.Position(255, v12, v55, v56);
  v57 = sub_214425388();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 32))(v1 + 3032, v1 + 1168, v57);
  *(_QWORD *)(v1 + 3168) = 0;
  *(_QWORD *)(v1 + 3176) = 0;
  *(_QWORD *)(v1 + 3184) = 0;
  *(_QWORD *)(v1 + 3192) = 1;
  *(_QWORD *)(v1 + 3208) = 0;
  *(_QWORD *)(v1 + 3200) = 0;
  *(_BYTE *)(v1 + 3216) = 0;
  *(_QWORD *)(v1 + 3224) = 0;
  *(_QWORD *)(v1 + 3232) = 0;
  *(_QWORD *)(v1 + 3240) = 0;
  *(_QWORD *)(v1 + 3248) = 1;
  *(_QWORD *)(v1 + 3264) = 0;
  *(_QWORD *)(v1 + 3256) = 0;
  *(_BYTE *)(v1 + 3272) = 0;
  *(_QWORD *)(v1 + 3280) = 0;
  *(_QWORD *)(v1 + 3288) = 0;
  *(_QWORD *)(v1 + 3296) = 0;
  *(_QWORD *)(v1 + 3304) = 1;
  *(_OWORD *)(v1 + 3312) = 0u;
  *(_OWORD *)(v1 + 3328) = 0u;
  *(_BYTE *)(v1 + 3344) = 0;
  sub_214253428(v1 + 2784, v1 + 2840, v1 + 2896, v1 + 368, v1 + 2976, v1 + 3032, v1 + 3168, v1 + 3224, v1 + 448, v1 + 3280, v1 + 3280, v12);
  sub_2142536C0((const void *)(v1 + 448), v12, v58, v59, (uint64_t *)(v1 + 368));
  swift_beginAccess();
  v60 = v21 + *(int *)(*(_QWORD *)(v1 + 304) + 108);
  sub_2141EF2B4(v49, v50, v53, v52);
  sub_214282BD0(v51, v54, *(_QWORD *)(v1 + 336), *(_QWORD *)(v1 + 320), *(_QWORD *)(v1 + 328), *(_DWORD *)(v1 + 348));
  sub_2141FA160(v1 + 368, v60, &qword_254D69D18);
  swift_endAccess();
LABEL_6:
  v61 = *(_QWORD *)(v1 + 176);
  v62 = *(_QWORD *)(v1 + 184);
  v63 = *(_QWORD *)(v1 + 192);
  v64 = *(_QWORD *)(v1 + 200);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v62 + 16))(v63, v61 + *(int *)(*(_QWORD *)(v1 + 168) + 44), v64);
  if (swift_getEnumCaseMultiPayload())
  {
    *(_BYTE *)(v1 + 2056) = *(_DWORD *)(v1 + 212);
    *(_QWORD *)(v1 + 2064) = *(_QWORD *)(v1 + 224);
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v1 + 296) + 40))(*(_QWORD *)(v1 + 288), v1 + 2056);
    swift_release();
    sub_21422F7F0(*(_QWORD *)(v1 + 312), *(_QWORD *)(v1 + 248), *(_QWORD *)(v1 + 272), *(_QWORD *)(v1 + 280));
    sub_214273B58(*(_QWORD *)(v1 + 256), *(_QWORD *)(v1 + 264), *(_QWORD *)(v1 + 336), *(_QWORD *)(v1 + 320), *(_QWORD *)(v1 + 328), *(_DWORD *)(v1 + 348));
    return (*(uint64_t (**)(uint64_t, uint64_t))(v62 + 8))(v63, v64);
  }
  else
  {
    v66 = *(_QWORD *)(v1 + 152);
    v67 = v63;
    v68 = *(_QWORD *)(v1 + 160);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 + 240) + 32))(v66, v67, v68);
    *(_OWORD *)(v1 + 80) = *(_OWORD *)(v21 + 48);
    v69 = *(_QWORD *)(v21 + 64);
    *(_QWORD *)(v1 + 48) = *(_QWORD *)(v21 + 72);
    *(_QWORD *)(v1 + 64) = *(_QWORD *)(v21 + 80);
    *(_QWORD *)(v1 + 72) = v69;
    v70 = (uint64_t *)(v21 + *(int *)(*(_QWORD *)(v1 + 304) + 84));
    v71 = *v70;
    *(_QWORD *)(v1 + 96) = v70[1];
    *(_QWORD *)(v1 + 104) = v71;
    v72 = v70[2];
    *(_QWORD *)(v1 + 192) = v70[3];
    *(_QWORD *)(v1 + 200) = v72;
    *(_QWORD *)(v1 + 184) = v70[4];
    *(_QWORD *)(v1 + 168) = v70[5];
    v73 = v70[6];
    v74 = v70[8];
    *(_QWORD *)(v1 + 112) = v70[7];
    *(_QWORD *)(v1 + 120) = v73;
    *(_QWORD *)(v1 + 56) = v74;
    v75 = *(_QWORD *)v61;
    v76 = *(_QWORD *)(v61 + 8);
    v77 = *(_BYTE *)(v61 + 16);
    v78 = v68;
    v79 = *(_QWORD *)(v61 + 24);
    v80 = *(_QWORD *)(v1 + 128);
    v81 = v66;
    v82 = v78;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 + 240) + 16))(v80, v81);
    v83 = v80;
    v84 = *(_QWORD *)(v1 + 136);
    sub_21437293C(v75, v76, v77, v79, v83, v82, v84, *(_QWORD *)(v1 + 144));
    swift_bridgeObjectRetain();
    sub_2141EF260(*(_QWORD *)(v1 + 104), *(_QWORD *)(v1 + 96), *(_QWORD *)(v1 + 200), *(_QWORD *)(v1 + 192), *(_QWORD *)(v1 + 184), *(_QWORD *)(v1 + 168), *(_QWORD *)(v1 + 120));
    sub_2141DD130(v75, v76, v77);
    swift_bridgeObjectRetain();
    sub_2143D046C(*(_QWORD *)(v1 + 144), v82, v84, v1 + 2056);
    *(_QWORD *)(v1 + 176) = *(_QWORD *)(v1 + 2056);
    v85 = *(_QWORD *)(v1 + 2064);
    *(_QWORD *)(v1 + 136) = *(unsigned __int8 *)(v1 + 2072);
    *(_QWORD *)(v1 + 144) = v85;
    *(_QWORD *)(v1 + 128) = *(_QWORD *)(v1 + 2080);
    v86 = *(_QWORD *)(v1 + 2088);
    v87 = *(_QWORD *)(v1 + 2096);
    v88 = *(unsigned __int8 *)(v1 + 2104);
    v89 = *(_QWORD *)(v1 + 224);
    sub_21421B218(*(double *)&v86, *(double *)&v87, *(_BYTE *)(v1 + 2104), 7, v1 + 1328);
    v90 = *(_QWORD *)(v1 + 1360);
    v91 = *(_OWORD *)(v1 + 1344);
    *(_OWORD *)(v21 + 48) = *(_OWORD *)(v1 + 1328);
    *(_OWORD *)(v21 + 64) = v91;
    *(_QWORD *)(v21 + 80) = v90;
    swift_bridgeObjectRelease();
    v92 = *(_OWORD *)(v1 + 2072);
    *(_OWORD *)(v1 + 448) = *(_OWORD *)(v1 + 2056);
    *(_OWORD *)(v1 + 464) = v92;
    sub_21421CC0C(v1 + 448, v1 + 1168);
    *(_QWORD *)(v1 + 2776) = *(_QWORD *)(v1 + 472);
    v93 = *(_QWORD *)(v1 + 296);
    v94 = (_QWORD *)(v21 + *(int *)(*(_QWORD *)(v1 + 304) + 84));
    v95 = *v94;
    v96 = v94[2];
    *(_QWORD *)(v1 + 32) = v94[1];
    *(_QWORD *)(v1 + 40) = v95;
    v97 = v94[3];
    v98 = v94[4];
    *(_QWORD *)(v1 + 16) = v94[5];
    *(_QWORD *)(v1 + 24) = v97;
    v99 = v94[6];
    *(_QWORD *)v1 = v94[7];
    *(_QWORD *)(v1 + 8) = v99;
    v100 = *(_QWORD *)(v1 + 144);
    *v94 = *(_QWORD *)(v1 + 176);
    v94[1] = v100;
    v101 = *(_QWORD *)(v1 + 128);
    v94[2] = *(_QWORD *)(v1 + 136);
    v94[3] = v101;
    v94[4] = v86;
    v94[5] = v87;
    v94[6] = v88;
    *(_OWORD *)(v94 + 7) = *(_OWORD *)(v1 + 2112);
    sub_21421CE7C(v1 + 1168);
    sub_2141F92E8(v1 + 2776);
    sub_2141DD140(v86, v87, v88);
    sub_21421C6D4(*(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 32), v96, *(_QWORD *)(v1 + 24), v98, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 8));
    *(_BYTE *)(v1 + 368) = *(_DWORD *)(v1 + 212);
    *(_QWORD *)(v1 + 376) = v89;
    (*(void (**)(_QWORD, uint64_t))(v93 + 40))(*(_QWORD *)(v1 + 288), v1 + 368);
    sub_21421CC48(v1 + 1168);
    sub_2141F9244(v1 + 2776);
    sub_2141EF1B0(v86, v87, v88);
    sub_21422F7F0(*(_QWORD *)(v1 + 312), *(_QWORD *)(v1 + 248), *(_QWORD *)(v1 + 272), *(_QWORD *)(v1 + 280));
    sub_214273B58(*(_QWORD *)(v1 + 256), *(_QWORD *)(v1 + 264), *(_QWORD *)(v1 + 336), *(_QWORD *)(v1 + 320), *(_QWORD *)(v1 + 328), *(_DWORD *)(v1 + 348));
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v1 + 240) + 8))(*(_QWORD *)(v1 + 152), *(_QWORD *)(v1 + 160));
    v102 = *(_QWORD *)(v1 + 352);
    *(_OWORD *)(v21 + 48) = *(_OWORD *)(v1 + 80);
    v103 = *(_QWORD *)(v1 + 48);
    *(_QWORD *)(v21 + 64) = *(_QWORD *)(v1 + 72);
    *(_QWORD *)(v21 + 72) = v103;
    *(_QWORD *)(v21 + 80) = *(_QWORD *)(v1 + 64);
    swift_bridgeObjectRelease();
    v104 = (uint64_t *)(v21 + *(int *)(*(_QWORD *)(v1 + 304) + 84));
    v105 = *v104;
    v106 = v104[1];
    v107 = v104[2];
    v108 = v104[3];
    v109 = v104[4];
    v110 = v104[5];
    v111 = v104[6];
    v112 = *(_QWORD *)(v1 + 96);
    *v104 = *(_QWORD *)(v1 + 104);
    v104[1] = v112;
    v113 = *(_QWORD *)(v1 + 192);
    v104[2] = *(_QWORD *)(v1 + 200);
    v104[3] = v113;
    v114 = *(_QWORD *)(v1 + 168);
    v104[4] = *(_QWORD *)(v1 + 184);
    v104[5] = v114;
    v115 = *(_QWORD *)(v1 + 112);
    v104[6] = *(_QWORD *)(v1 + 120);
    v104[7] = v115;
    v104[8] = *(_QWORD *)(v1 + 56);
    sub_21421C6D4(v105, v106, v107, v108, v109, v110, v111);
    result = swift_release();
    **(_QWORD **)(v1 + 232) = v102;
  }
  return result;
}

uint64_t sub_214362508(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  return sub_21436746C(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2143613D8);
}

uint64_t sub_214362514(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  return sub_214367490(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_214361A14);
}

uint64_t sub_214362520@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, _QWORD *a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(_BYTE *, _QWORD);
  void (*v19)(char *);
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _BYTE v29[8];
  uint64_t v30;
  _QWORD v31[3];

  v24 = a4;
  v28 = a5;
  v7 = *(_QWORD *)(a3 - 8);
  v26 = a2;
  v27 = v7;
  v8 = MEMORY[0x24BDAC7A8](a1);
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v22 - v11;
  v25 = *v13;
  v23 = *((_QWORD *)v13 + 1);
  v17 = type metadata accessor for ModifiedChartContent_Environment(0, v14, v15, v16);
  swift_beginAccess();
  v18 = (void (*)(_BYTE *, _QWORD))swift_readAtKeyPath();
  v19 = *(void (**)(char *))(v7 + 16);
  v19(v12);
  v18(v29, 0);
  swift_endAccess();
  ((void (*)(char *, uint64_t, uint64_t))v19)(v10, a1 + *(int *)(v17 + 48), a3);
  swift_beginAccess();
  swift_setAtWritableKeyPath();
  swift_endAccess();
  v29[0] = v25;
  v30 = v23;
  (*(void (**)(_QWORD *__return_ptr, uint64_t, _BYTE *))(v24 + 40))(v31, a1, v29);
  v20 = v31[0];
  ((void (*)(char *, char *, uint64_t))v19)(v10, v12, a3);
  swift_beginAccess();
  swift_setAtWritableKeyPath();
  swift_endAccess();
  result = (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v12, a3);
  *v28 = v20;
  return result;
}

uint64_t sub_214362710@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v11 = *a2;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 32))(a6, a1, a4);
  v12 = *(_QWORD *)(*MEMORY[0x24BEE2B70] + v11 + 8);
  v13 = type metadata accessor for ModifiedChartContent_Environment(0, a4, v12, a5);
  *(_QWORD *)(a6 + *(int *)(v13 + 44)) = a2;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(a6 + *(int *)(v13 + 48), a3, v12);
}

uint64_t sub_2143627B0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  return sub_214362520(a1, a2[2], a2[3], a2[4], a3);
}

uint64_t sub_2143627C0@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t);
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  _BYTE v22[8];
  uint64_t v23;

  v10 = type metadata accessor for ChartContentRenderContext.Environment(0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *a2;
  v14 = *((_QWORD *)a2 + 1);
  v15 = v14 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_environment;
  swift_beginAccess();
  sub_2141EEEC4(v15, (uint64_t)v12);
  v17 = *(void (**)(uint64_t))(a1
                                       + *(int *)(type metadata accessor for ModifiedChartContent_TransformEnvironment(0, a3, a4, v16)+ 36));
  swift_beginAccess();
  v17(v15);
  swift_endAccess();
  v22[0] = v13;
  v23 = v14;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _BYTE *, uint64_t, uint64_t))(a4 + 40))(&v21, a1, v22, a3, a4);
  v18 = v21;
  swift_beginAccess();
  sub_214368360((uint64_t)v12, v15);
  result = swift_endAccess();
  *a5 = v18;
  return result;
}

uint64_t sub_214362918@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  return sub_2143627C0(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
}

void sub_214362924(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;

  v7 = type metadata accessor for PlottableValue(0, a4, a7, a4);
  MEMORY[0x24BDAC7A8](v7);
  type metadata accessor for ModifiedChartContent_Position();
}

uint64_t sub_2143629E0(int *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t *v25;
  _QWORD *v26;
  _QWORD *v27;
  unsigned __int8 *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  _BYTE *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  __int128 v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  _BYTE *v54;
  _QWORD *v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t *v67;
  _QWORD *v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  unsigned __int8 *v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  __int128 v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  BOOL v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t *v110;
  _QWORD *v111;
  _QWORD *v112;
  uint64_t *v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  _QWORD *v118;
  _BYTE *v119;
  uint64_t *v120;
  uint64_t *v121;
  __int128 v122;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v7, v3 + a1[17], v6);
  sub_2143D046C(v7, v4, v2, v1 + 624);
  v11 = *(_QWORD *)(v1 + 632);
  *(_QWORD *)(v1 + 184) = *(_QWORD *)(v1 + 624);
  *(_QWORD *)(v1 + 192) = v11;
  *(_QWORD *)(v1 + 200) = *(unsigned __int8 *)(v1 + 640);
  *(_QWORD *)(v1 + 544) = v5 + 32;
  v12 = *(_QWORD *)(v1 + 656);
  *(_QWORD *)(v1 + 208) = *(_QWORD *)(v1 + 648);
  *(_QWORD *)(v1 + 216) = v12;
  v13 = *(unsigned __int8 *)(v1 + 672);
  *(_QWORD *)(v1 + 224) = *(_QWORD *)(v1 + 664);
  *(_QWORD *)(v1 + 232) = v13;
  v14 = *(_QWORD *)(v1 + 688);
  *(_QWORD *)(v1 + 240) = *(_QWORD *)(v1 + 680);
  *(_QWORD *)(v1 + 248) = v14;
  v15 = a1[18];
  v16 = v3 + a1[19];
  *(_QWORD *)(v1 + 264) = *(_QWORD *)v16;
  v17 = *(_QWORD *)(v1 + 512);
  *(_DWORD *)(v1 + 260) = *(unsigned __int8 *)(v16 + 8);
  *(_QWORD *)(v1 + 376) = v3;
  v18 = *(unsigned __int8 *)(v3 + v15);
  *(_QWORD *)(v1 + 568) = v17 + 624;
  swift_beginAccess();
  v19 = (_QWORD *)(v17 + 640);
  v20 = (uint64_t *)(v17 + 648);
  v21 = (uint64_t *)(v17 + 664);
  v22 = (_QWORD *)(v17 + 688);
  v23 = (_QWORD *)(v17 + 696);
  *(_QWORD *)(v1 + 400) = v17 + 704;
  *(_QWORD *)(v1 + 272) = v17 + 712;
  *(_QWORD *)(v1 + 280) = v17 + 720;
  *(_QWORD *)(v1 + 288) = v17 + 728;
  *(_QWORD *)(v1 + 296) = v17 + 736;
  *(_QWORD *)(v1 + 304) = v17 + 744;
  *(_QWORD *)(v1 + 312) = v17 + 752;
  *(_QWORD *)(v1 + 320) = v17 + 760;
  *(_QWORD *)(v1 + 328) = v17 + 768;
  *(_QWORD *)(v1 + 160) = v17 + 776;
  *(_QWORD *)(v1 + 336) = v17 + 784;
  *(_QWORD *)(v1 + 344) = v17 + 792;
  *(_QWORD *)(v1 + 560) = v17 + 800;
  *(_QWORD *)(v1 + 552) = v17 + 808;
  *(_QWORD *)(v1 + 576) = v17 + 816;
  *(_QWORD *)(v1 + 536) = v17 + 824;
  v24 = (_QWORD *)(v17 + 832);
  v25 = (uint64_t *)(v17 + 840);
  v26 = (_QWORD *)(v17 + 856);
  v27 = (_QWORD *)(v17 + 872);
  v28 = (unsigned __int8 *)(v17 + 880);
  *(_QWORD *)(v1 + 360) = v17 + 864;
  *(_QWORD *)(v1 + 368) = v17 + 832;
  *(_QWORD *)(v1 + 592) = v17 + 848;
  *(_QWORD *)(v1 + 584) = v17 + 856;
  *(_QWORD *)(v1 + 408) = v17 + 880;
  *(_QWORD *)(v1 + 416) = v17 + 872;
  *(_QWORD *)(v1 + 144) = v17 + 672;
  *(_QWORD *)(v1 + 152) = v17 + 688;
  *(_DWORD *)(v1 + 356) = v18;
  *(_QWORD *)(v1 + 168) = v17 + 680;
  *(_QWORD *)(v1 + 176) = v17 + 696;
  *(_QWORD *)(v1 + 128) = v17 + 656;
  *(_QWORD *)(v1 + 136) = v17 + 664;
  *(_QWORD *)(v1 + 112) = v17 + 640;
  *(_QWORD *)(v1 + 120) = v17 + 648;
  *(_QWORD *)(v1 + 104) = v17 + 632;
  if (v18 == 2)
  {
    *(_DWORD *)(v1 + 504) = *v28;
    v29 = *v27;
    *(_QWORD *)(v1 + 488) = *(_QWORD *)(v17 + 864);
    *(_QWORD *)(v1 + 496) = v29;
    v30 = *v26;
    *(_QWORD *)(v1 + 472) = *(_QWORD *)(v17 + 848);
    *(_QWORD *)(v1 + 480) = v30;
    v31 = *v25;
    *(_QWORD *)(v1 + 456) = *v24;
    *(_QWORD *)(v1 + 464) = v31;
    v32 = *(uint64_t **)(v1 + 536);
    v33 = *v32;
    v34 = (uint64_t *)(v17 + 848);
    *(_QWORD *)(v1 + 440) = **(_QWORD **)(v1 + 576);
    *(_QWORD *)(v1 + 448) = v33;
    v35 = *(uint64_t **)(v1 + 552);
    v36 = *v35;
    v37 = *(_QWORD **)(v1 + 560);
    *(_QWORD *)(v1 + 424) = *v37;
    *(_QWORD *)(v1 + 432) = v36;
    v38 = v26;
    v39 = v28;
    swift_beginAccess();
    v40 = *v37;
    *(_QWORD *)(v1 + 88) = *v35;
    *(_QWORD *)(v1 + 96) = v40;
    v41 = v9 - 256;
    v42 = **(_QWORD **)(v1 + 576);
    *(_QWORD *)(v1 + 72) = *v32;
    *(_QWORD *)(v1 + 80) = v42;
    v43 = *v24;
    *(_QWORD *)(v1 + 56) = *v25;
    *(_QWORD *)(v1 + 64) = v43;
    v44 = *v34;
    *(_QWORD *)(v1 + 40) = *v38;
    *(_QWORD *)(v1 + 48) = v44;
    v45 = *(_QWORD **)(v1 + 360);
    v46 = *(_OWORD *)(v1 + 640);
    *(_OWORD *)(v41 + 96) = *(_OWORD *)(v1 + 624);
    *(_OWORD *)(v41 + 112) = v46;
    sub_21421CC0C(v9 - 160, v9 - 120);
    *(_QWORD *)(v9 - 128) = *(_QWORD *)(v9 - 136);
    sub_21421CDBC(*(__n128 **)(v1 + 544), (__n128 *)(v9 - 184));
    sub_2141EF260(*(_QWORD *)(v1 + 424), *(_QWORD *)(v1 + 432), *(_QWORD *)(v1 + 440), *(_QWORD *)(v1 + 448), *(_QWORD *)(v1 + 456), *(_QWORD *)(v1 + 464), *(_QWORD *)(v1 + 472));
    sub_21421CE7C(v9 - 120);
    sub_2141F92E8(v9 - 128);
    sub_21421D0FC(v9 - 184);
    v47 = v25;
    v48 = *(uint64_t **)(v1 + 368);
    sub_21421C6D4(*(_QWORD *)(v1 + 96), *(_QWORD *)(v1 + 88), *(_QWORD *)(v1 + 80), *(_QWORD *)(v1 + 72), *(_QWORD *)(v1 + 64), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 48));
    **(_QWORD **)(v1 + 560) = *(_QWORD *)(v1 + 184);
    **(_QWORD **)(v1 + 552) = *(_QWORD *)(v1 + 192);
    **(_QWORD **)(v1 + 576) = *(_QWORD *)(v1 + 200);
    *v32 = *(_QWORD *)(v1 + 208);
    v49 = v48;
    *v48 = *(_QWORD *)(v1 + 216);
    *v25 = *(_QWORD *)(v1 + 224);
    v50 = *(uint64_t **)(v1 + 592);
    *v50 = *(_QWORD *)(v1 + 232);
    v51 = *(_QWORD *)(v1 + 248);
    v52 = *(_QWORD **)(v1 + 584);
    *v52 = *(_QWORD *)(v1 + 240);
    v53 = v27;
    v54 = v39;
    v55 = v45;
    *v45 = v51;
    v56 = v50;
  }
  else
  {
    *(_QWORD *)(v1 + 88) = *(_QWORD *)(v17 + 712);
    *(_QWORD *)(v1 + 96) = v25;
    v57 = *(_QWORD *)(v17 + 720);
    *(_QWORD *)(v1 + 72) = *(_QWORD *)(v17 + 728);
    *(_QWORD *)(v1 + 80) = v57;
    v58 = *(_QWORD *)(v17 + 736);
    *(_QWORD *)(v1 + 56) = *(_QWORD *)(v17 + 744);
    *(_QWORD *)(v1 + 64) = v58;
    v59 = *(_QWORD *)(v17 + 752);
    *(_QWORD *)(v1 + 40) = *(_QWORD *)(v17 + 760);
    *(_QWORD *)(v1 + 48) = v59;
    v60 = *(_QWORD *)(v17 + 768);
    *(_QWORD *)(v1 + 24) = *(_QWORD *)(v17 + 776);
    *(_QWORD *)(v1 + 32) = v60;
    *(_QWORD *)(v1 + 16) = *(_QWORD *)(v17 + 784);
    *(_DWORD *)(v1 + 12) = *(unsigned __int8 *)(v17 + 792);
    *(_DWORD *)(v1 + 504) = **(unsigned __int8 **)(v1 + 400);
    v61 = *v23;
    *(_QWORD *)(v1 + 488) = *v22;
    *(_QWORD *)(v1 + 496) = v61;
    v62 = *(_QWORD *)(v17 + 680);
    *(_QWORD *)(v1 + 472) = *(_QWORD *)(v17 + 672);
    *(_QWORD *)(v1 + 480) = v62;
    v63 = *v21;
    *(_QWORD *)(v1 + 456) = *(_QWORD *)(v17 + 656);
    *(_QWORD *)(v1 + 464) = v63;
    v64 = *v20;
    *(_QWORD *)(v1 + 440) = *v19;
    *(_QWORD *)(v1 + 448) = v64;
    v65 = *(_QWORD *)(v17 + 632);
    *(_QWORD *)(v1 + 424) = **(_QWORD **)(v1 + 568);
    *(_QWORD *)(v1 + 432) = v65;
    v66 = (uint64_t *)(v17 + 672);
    v67 = (uint64_t *)(v17 + 656);
    v68 = (_QWORD *)(v17 + 632);
    v69 = v23;
    swift_beginAccess();
    if ((v18 & 1) == 0)
    {
      v70 = v69;
      v71 = **(_QWORD **)(v1 + 568);
      v72 = v68;
      *(_QWORD *)(v1 + 80) = *v68;
      *(_QWORD *)(v1 + 88) = v71;
      v73 = *v19;
      *(_QWORD *)(v1 + 64) = *v20;
      *(_QWORD *)(v1 + 72) = v73;
      v74 = *v67;
      *(_QWORD *)(v1 + 48) = *v21;
      *(_QWORD *)(v1 + 56) = v74;
      v75 = *v66;
      v76 = *(_QWORD **)(v1 + 168);
      *(_QWORD *)(v1 + 32) = *v76;
      *(_QWORD *)(v1 + 40) = v75;
      v77 = *v22;
      *(_QWORD *)(v1 + 16) = *v70;
      *(_QWORD *)(v1 + 24) = v77;
      v78 = *(unsigned __int8 **)(v1 + 400);
      *(_DWORD *)(v1 + 12) = *v78;
      v79 = *(_OWORD *)(v1 + 640);
      v80 = v9 - 256;
      *(_OWORD *)(v80 + 96) = *(_OWORD *)(v1 + 624);
      *(_OWORD *)(v80 + 112) = v79;
      sub_21421CC0C(v9 - 160, v9 - 120);
      *(_QWORD *)(v9 - 128) = *(_QWORD *)(v9 - 136);
      sub_21421CDBC(*(__n128 **)(v1 + 544), (__n128 *)(v9 - 184));
      sub_2141EF260(*(_QWORD *)(v1 + 424), *(_QWORD *)(v1 + 432), *(_QWORD *)(v1 + 440), *(_QWORD *)(v1 + 448), *(_QWORD *)(v1 + 456), *(_QWORD *)(v1 + 464), *(_QWORD *)(v1 + 472));
      sub_21421CE7C(v9 - 120);
      sub_2141F92E8(v9 - 128);
      sub_21421D0FC(v9 - 184);
      sub_21421C6D4(*(_QWORD *)(v1 + 88), *(_QWORD *)(v1 + 80), *(_QWORD *)(v1 + 72), *(_QWORD *)(v1 + 64), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 40));
      **(_QWORD **)(v1 + 568) = *(_QWORD *)(v1 + 184);
      *v72 = *(_QWORD *)(v1 + 192);
      *v19 = *(_QWORD *)(v1 + 200);
      *v20 = *(_QWORD *)(v1 + 208);
      *v67 = *(_QWORD *)(v1 + 216);
      *v21 = *(_QWORD *)(v1 + 224);
      *v66 = *(_QWORD *)(v1 + 232);
      v81 = *(_QWORD *)(v1 + 248);
      *v76 = *(_QWORD *)(v1 + 240);
      v82 = *(_QWORD **)(v1 + 176);
      v53 = v82;
      v54 = v78;
      *v22 = v81;
      v55 = *(_QWORD **)(v1 + 360);
      v49 = *(uint64_t **)(v1 + 368);
      v47 = *(uint64_t **)(v1 + 96);
      v56 = *(uint64_t **)(v1 + 592);
      v52 = *(_QWORD **)(v1 + 584);
      goto LABEL_7;
    }
    v83 = **(_QWORD **)(v1 + 272);
    *(_QWORD *)(v1 + 496) = **(_QWORD **)(v1 + 280);
    *(_QWORD *)(v1 + 504) = v83;
    v84 = **(_QWORD **)(v1 + 288);
    *(_QWORD *)(v1 + 480) = **(_QWORD **)(v1 + 296);
    *(_QWORD *)(v1 + 488) = v84;
    v85 = **(_QWORD **)(v1 + 304);
    v86 = v9 - 256;
    *(_QWORD *)(v1 + 464) = **(_QWORD **)(v1 + 312);
    *(_QWORD *)(v1 + 472) = v85;
    v87 = **(_QWORD **)(v1 + 320);
    *(_QWORD *)(v1 + 448) = **(_QWORD **)(v1 + 328);
    *(_QWORD *)(v1 + 456) = v87;
    v88 = *(uint64_t **)(v1 + 160);
    v89 = *v88;
    *(_QWORD *)(v1 + 432) = **(_QWORD **)(v1 + 336);
    *(_QWORD *)(v1 + 440) = v89;
    *(_DWORD *)(v1 + 424) = **(unsigned __int8 **)(v1 + 344);
    v90 = *(_OWORD *)(v1 + 640);
    *(_OWORD *)(v86 + 96) = *(_OWORD *)(v1 + 624);
    *(_OWORD *)(v86 + 112) = v90;
    sub_21421CC0C(v9 - 160, v9 - 120);
    *(_QWORD *)(v9 - 128) = *(_QWORD *)(v9 - 136);
    sub_21421CDBC(*(__n128 **)(v1 + 544), (__n128 *)(v9 - 184));
    v91 = *(_DWORD *)(v1 + 12);
    v92 = *(_QWORD *)(v1 + 16);
    v93 = *(_QWORD *)(v1 + 24);
    v94 = *(_QWORD *)(v1 + 64);
    v96 = *(_QWORD *)(v1 + 48);
    v95 = *(_QWORD *)(v1 + 56);
    v97 = *(_QWORD *)(v1 + 32);
    v98 = *(_QWORD *)(v1 + 40);
    sub_2141EF260(*(_QWORD *)(v1 + 88), *(_QWORD *)(v1 + 80), *(_QWORD *)(v1 + 72), v94, v95, v96, v98);
    sub_21421CE7C(v9 - 120);
    sub_2141F92E8(v9 - 128);
    sub_21421D0FC(v9 - 184);
    sub_21421C6D4(*(_QWORD *)(v1 + 504), *(_QWORD *)(v1 + 496), *(_QWORD *)(v1 + 488), *(_QWORD *)(v1 + 480), *(_QWORD *)(v1 + 472), *(_QWORD *)(v1 + 464), *(_QWORD *)(v1 + 456));
    **(_QWORD **)(v1 + 272) = *(_QWORD *)(v1 + 184);
    **(_QWORD **)(v1 + 280) = *(_QWORD *)(v1 + 192);
    v99 = *(_QWORD *)(v1 + 208);
    v100 = *(_QWORD **)(v1 + 296);
    **(_QWORD **)(v1 + 288) = *(_QWORD *)(v1 + 200);
    v53 = *(_QWORD **)(v1 + 336);
    v54 = *(_BYTE **)(v1 + 344);
    *v100 = v99;
    *(_DWORD *)(v1 + 504) = v91;
    *(_QWORD *)(v1 + 488) = v93;
    *(_QWORD *)(v1 + 496) = v92;
    **(_QWORD **)(v1 + 304) = *(_QWORD *)(v1 + 216);
    *(_QWORD *)(v1 + 472) = v98;
    *(_QWORD *)(v1 + 480) = v97;
    **(_QWORD **)(v1 + 312) = *(_QWORD *)(v1 + 224);
    *(_QWORD *)(v1 + 456) = v95;
    *(_QWORD *)(v1 + 464) = v96;
    **(_QWORD **)(v1 + 320) = *(_QWORD *)(v1 + 232);
    **(_QWORD **)(v1 + 328) = *(_QWORD *)(v1 + 240);
    *(_QWORD *)(v1 + 440) = *(_QWORD *)(v1 + 72);
    *(_QWORD *)(v1 + 448) = v94;
    v101 = *(_QWORD *)(v1 + 80);
    v47 = *(uint64_t **)(v1 + 96);
    *(_QWORD *)(v1 + 424) = *(_QWORD *)(v1 + 88);
    *(_QWORD *)(v1 + 432) = v101;
    *v88 = *(_QWORD *)(v1 + 248);
    v55 = *(_QWORD **)(v1 + 360);
    v49 = *(uint64_t **)(v1 + 368);
    v56 = *(uint64_t **)(v1 + 592);
    v52 = *(_QWORD **)(v1 + 584);
  }
  v82 = *(_QWORD **)(v1 + 176);
LABEL_7:
  *v53 = *(_QWORD *)(v1 + 264);
  *v54 = *(_DWORD *)(v1 + 260);
  swift_endAccess();
  *(_OWORD *)(v9 - 256) = *(_OWORD *)(v1 + 512);
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v1 + 392) + 32))(*(_QWORD *)(v1 + 376), v9 - 256);
  swift_beginAccess();
  if (*(_DWORD *)(v1 + 356) != 2)
  {
    v102 = (*(_DWORD *)(v1 + 356) & 1) == 0;
    v103 = *(_QWORD *)(v1 + 272);
    if ((*(_DWORD *)(v1 + 356) & 1) == 0)
      v103 = *(_QWORD *)(v1 + 568);
    *(_QWORD *)(v1 + 560) = v103;
    v104 = *(_QWORD *)(v1 + 104);
    if (!v102)
      v104 = *(_QWORD *)(v1 + 280);
    *(_QWORD *)(v1 + 552) = v104;
    v105 = *(_QWORD *)(v1 + 112);
    if (!v102)
      v105 = *(_QWORD *)(v1 + 288);
    *(_QWORD *)(v1 + 576) = v105;
    v106 = *(_QWORD *)(v1 + 120);
    if (!v102)
      v106 = *(_QWORD *)(v1 + 296);
    *(_QWORD *)(v1 + 536) = v106;
    if (v102)
      v49 = *(uint64_t **)(v1 + 128);
    else
      v49 = *(uint64_t **)(v1 + 304);
    if (v102)
      v47 = *(uint64_t **)(v1 + 136);
    else
      v47 = *(uint64_t **)(v1 + 312);
    if (v102)
      v56 = *(uint64_t **)(v1 + 144);
    else
      v56 = *(uint64_t **)(v1 + 320);
    if (v102)
      v52 = *(_QWORD **)(v1 + 168);
    else
      v52 = *(_QWORD **)(v1 + 328);
    if (v102)
      v55 = *(_QWORD **)(v1 + 152);
    else
      v55 = *(_QWORD **)(v1 + 160);
    if (v102)
      v107 = v82;
    else
      v107 = *(_QWORD **)(v1 + 336);
    v108 = *(_QWORD *)(v1 + 400);
    if (!v102)
      v108 = *(_QWORD *)(v1 + 344);
    *(_QWORD *)(v1 + 408) = v108;
    *(_QWORD *)(v1 + 416) = v107;
  }
  *(_QWORD *)(v1 + 592) = v56;
  *(_QWORD *)(v1 + 584) = v52;
  v109 = *(uint64_t **)(v1 + 560);
  v110 = *(uint64_t **)(v1 + 552);
  v111 = v55;
  v112 = *(_QWORD **)(v1 + 576);
  v113 = *(uint64_t **)(v1 + 536);
  v114 = v49;
  v115 = *v49;
  v116 = *v47;
  v117 = *v56;
  v119 = *(_BYTE **)(v1 + 408);
  v118 = *(_QWORD **)(v1 + 416);
  v120 = v47;
  v121 = v114;
  sub_21421C6D4(*v109, *v110, *v112, *v113, v115, v116, v117);
  *v109 = *(_QWORD *)(v1 + 424);
  *v110 = *(_QWORD *)(v1 + 432);
  *v112 = *(_QWORD *)(v1 + 440);
  *v113 = *(_QWORD *)(v1 + 448);
  *v121 = *(_QWORD *)(v1 + 456);
  *v120 = *(_QWORD *)(v1 + 464);
  **(_QWORD **)(v1 + 592) = *(_QWORD *)(v1 + 472);
  **(_QWORD **)(v1 + 584) = *(_QWORD *)(v1 + 480);
  *v111 = *(_QWORD *)(v1 + 488);
  *v118 = *(_QWORD *)(v1 + 496);
  *v119 = *(_DWORD *)(v1 + 504);
  swift_endAccess();
  v122 = *(_OWORD *)(v1 + 640);
  *(_OWORD *)(v9 - 256) = *(_OWORD *)(v1 + 624);
  *(_OWORD *)(v9 - 240) = v122;
  sub_21421CC0C(v9 - 256, v9 - 208);
  sub_21421CC48(v9 - 208);
  *(_QWORD *)(v9 - 216) = *(_QWORD *)(v9 - 232);
  sub_2141F9244(v9 - 216);
  sub_21421CDBC(*(__n128 **)(v1 + 544), (__n128 *)(v1 + 696));
  return sub_21421CDF8(v1 + 696);
}

void sub_214363350(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;

  v7 = type metadata accessor for PlottableValue(0, a4, a7, a4);
  MEMORY[0x24BDAC7A8](v7);
  type metadata accessor for ModifiedChartContent_Position();
}

uint64_t sub_214363414(int *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  _QWORD *v40;
  __int128 v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t *v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  _BYTE *v48;
  uint64_t *v49;
  _QWORD *v50;
  _QWORD *v51;
  int v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t *v65;
  __int128 v66;
  uint64_t v67;
  int v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  __int128 v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  _QWORD *v87;
  _QWORD *v88;
  _QWORD *v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t *v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  _QWORD *v104;
  _BYTE *v105;
  _QWORD *v106;
  __int128 v107;
  uint64_t result;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v7, v3 + a1[17], v6);
  sub_2143D046C(v7, v4, v2, (uint64_t)(v1 + 76));
  v12 = v1[77];
  v1[20] = v1[76];
  v1[21] = v12;
  v1[22] = *((unsigned __int8 *)v1 + 624);
  v1[70] = v9 + 32;
  v13 = v1[80];
  v1[23] = v1[79];
  v1[24] = v13;
  v14 = *((unsigned __int8 *)v1 + 656);
  v1[25] = v1[81];
  v1[26] = v14;
  v15 = v1[84];
  v1[27] = v1[83];
  v1[28] = v15;
  v16 = a1[18];
  v17 = v3 + a1[19];
  v1[30] = *(_QWORD *)v17;
  *((_DWORD *)v1 + 59) = *(unsigned __int8 *)(v17 + 8);
  v1[46] = v3;
  v18 = *(unsigned __int8 *)(v3 + v16);
  v1[71] = v5 + 80;
  swift_beginAccess();
  v19 = (uint64_t *)(v5 + 104);
  v1[50] = v5 + 112;
  v20 = *(_QWORD *)(v5 + 168);
  v1[40] = v5 + 168;
  v1[41] = v5 + 120;
  v21 = *(_QWORD *)(v5 + 176);
  v1[39] = v5 + 176;
  v22 = *(_QWORD *)(v5 + 184);
  v1[38] = v5 + 184;
  v23 = *(_QWORD *)(v5 + 192);
  v1[37] = v5 + 192;
  v24 = *(_QWORD *)(v5 + 200);
  v1[36] = v5 + 200;
  v25 = *(_QWORD *)(v5 + 208);
  v1[35] = v5 + 208;
  v26 = *(_QWORD *)(v5 + 216);
  v1[34] = v5 + 216;
  v27 = *(_QWORD *)(v5 + 224);
  v1[33] = v5 + 224;
  v1[10] = *(_QWORD *)(v5 + 232);
  v1[11] = v27;
  v1[14] = v5 + 232;
  v1[9] = *(_QWORD *)(v5 + 240);
  v1[32] = v5 + 240;
  *((_DWORD *)v1 + 16) = *(unsigned __int8 *)(v5 + 248);
  v1[31] = v5 + 248;
  v28 = (uint64_t *)(v5 + 264);
  v29 = (uint64_t *)(v5 + 272);
  v30 = (uint64_t *)(v5 + 280);
  v31 = (uint64_t *)(v5 + 288);
  *((_DWORD *)v1 + 102) = v18;
  v1[56] = v5 + 264;
  v1[57] = v5 + 256;
  v1[44] = v5 + 320;
  v1[45] = v5 + 272;
  v1[72] = v5 + 296;
  v1[54] = v5 + 312;
  v1[55] = v5 + 304;
  v1[52] = v5 + 336;
  v1[53] = v5 + 328;
  v1[42] = v5 + 160;
  v1[18] = v5 + 144;
  v1[19] = v5 + 152;
  v1[16] = v5 + 104;
  v1[17] = v5 + 136;
  v1[12] = v5 + 96;
  v1[13] = v5 + 128;
  v1[15] = v5 + 88;
  if (v18 == 2)
  {
    *((_DWORD *)v1 + 136) = *(unsigned __int8 *)(v5 + 336);
    v1[67] = *(_QWORD *)(v5 + 328);
    v1[66] = *(_QWORD *)(v5 + 320);
    v1[65] = *(_QWORD *)(v5 + 312);
    v32 = *(_QWORD *)(v5 + 304);
    v1[63] = *(_QWORD *)(v5 + 296);
    v1[64] = v32;
    v33 = *v31;
    v1[61] = *v30;
    v1[62] = v33;
    v34 = *v29;
    v1[59] = *v28;
    v1[60] = v34;
    v1[58] = *(_QWORD *)(v5 + 256);
    swift_beginAccess();
    v1[69] = *(_QWORD *)(v5 + 256);
    v35 = *v28;
    v1[10] = *v29;
    v1[11] = v35;
    v36 = *v30;
    v1[8] = *v31;
    v1[9] = v36;
    v37 = *(_QWORD *)(v5 + 296);
    v38 = (uint64_t *)v1[54];
    v1[6] = *(_QWORD *)v1[55];
    v1[7] = v37;
    v39 = *v38;
    v1[4] = *(_QWORD *)(v5 + 320);
    v1[5] = v39;
    v40 = (_QWORD *)v1[53];
    v1[3] = *v40;
    *((_DWORD *)v1 + 4) = *(unsigned __int8 *)(v5 + 336);
    v41 = *((_OWORD *)v1 + 39);
    v42 = v10 - 256;
    *(_OWORD *)(v42 + 96) = *((_OWORD *)v1 + 38);
    *(_OWORD *)(v42 + 112) = v41;
    sub_21421CC0C(v10 - 160, v10 - 120);
    *(_QWORD *)(v10 - 128) = *(_QWORD *)(v10 - 136);
    sub_21421CDBC((__n128 *)v1[70], (__n128 *)(v10 - 184));
    sub_2141EF260(v1[58], v1[59], v1[60], v1[61], v1[62], v1[63], v1[64]);
    sub_21421CE7C(v10 - 120);
    sub_2141F92E8(v10 - 128);
    sub_21421D0FC(v10 - 184);
    sub_21421C6D4(v1[69], v1[11], v1[10], v1[9], v1[8], v1[7], v1[6]);
    *(_QWORD *)(v5 + 256) = v1[20];
    *v28 = v1[21];
    v43 = (_QWORD *)v1[45];
    *v43 = v1[22];
    *v30 = v1[23];
    *v31 = v1[24];
    v44 = (uint64_t *)v1[72];
    *v44 = v1[25];
    v45 = (_QWORD *)v1[55];
    *v45 = v1[26];
    v46 = v1[28];
    *v38 = v1[27];
    v47 = v40;
    v48 = (_BYTE *)(v5 + 336);
    *(_QWORD *)(v5 + 320) = v46;
    v49 = v44;
    v50 = v45;
    v51 = (_QWORD *)v1[71];
    v52 = *((_DWORD *)v1 + 102);
  }
  else
  {
    *v1 = v26;
    v1[1] = v25;
    v1[2] = v24;
    v1[3] = v23;
    v1[4] = v22;
    v1[5] = v21;
    v1[6] = v20;
    v1[7] = (uint64_t)v30;
    v1[69] = (uint64_t)v31;
    *((_DWORD *)v1 + 136) = *(unsigned __int8 *)(v5 + 160);
    v1[67] = *(_QWORD *)(v5 + 152);
    v1[66] = *(_QWORD *)(v5 + 144);
    v1[65] = *(_QWORD *)(v5 + 136);
    v53 = *(_QWORD *)(v5 + 128);
    v54 = (uint64_t *)v1[41];
    v1[63] = *v54;
    v1[64] = v53;
    v55 = (uint64_t *)v1[50];
    v56 = *v55;
    v1[61] = *v19;
    v1[62] = v56;
    v57 = *(_QWORD *)(v5 + 96);
    v1[59] = *(_QWORD *)(v5 + 88);
    v1[60] = v57;
    v1[58] = *(_QWORD *)v1[71];
    v58 = (uint64_t *)(v5 + 96);
    v59 = (uint64_t *)(v5 + 128);
    swift_beginAccess();
    if ((v1[51] & 1) != 0)
    {
      v1[68] = *(_QWORD *)v1[40];
      v1[67] = *(_QWORD *)v1[39];
      v1[66] = *(_QWORD *)v1[38];
      v1[65] = *(_QWORD *)v1[37];
      v71 = *(_QWORD *)v1[36];
      v1[63] = *(_QWORD *)v1[35];
      v1[64] = v71;
      v72 = *(_QWORD *)v1[34];
      v1[61] = *(_QWORD *)v1[33];
      v1[62] = v72;
      v73 = (uint64_t *)v1[14];
      v74 = *v73;
      v1[59] = *(_QWORD *)v1[32];
      v1[60] = v74;
      *((_DWORD *)v1 + 116) = *(unsigned __int8 *)v1[31];
      v75 = *((_OWORD *)v1 + 39);
      v76 = v10 - 256;
      *(_OWORD *)(v76 + 96) = *((_OWORD *)v1 + 38);
      *(_OWORD *)(v76 + 112) = v75;
      sub_21421CC0C(v10 - 160, v10 - 120);
      *(_QWORD *)(v10 - 128) = *(_QWORD *)(v10 - 136);
      sub_21421CDBC((__n128 *)v1[70], (__n128 *)(v10 - 184));
      v77 = *((_DWORD *)v1 + 16);
      v78 = v1[9];
      v79 = v1[10];
      v80 = v1[1];
      v81 = v1[2];
      v82 = *v1;
      v83 = v1[11];
      sub_2141EF260(v1[6], v1[5], v1[4], v1[3], v81, v80, *v1);
      sub_21421CE7C(v10 - 120);
      sub_2141F92E8(v10 - 128);
      sub_21421D0FC(v10 - 184);
      sub_21421C6D4(v1[68], v1[67], v1[66], v1[65], v1[64], v1[63], v1[62]);
      *(_QWORD *)v1[40] = v1[20];
      *(_QWORD *)v1[39] = v1[21];
      v84 = v1[23];
      v85 = (_QWORD *)v1[37];
      *(_QWORD *)v1[38] = v1[22];
      v48 = (_BYTE *)v1[31];
      v47 = (_QWORD *)v1[32];
      *v85 = v84;
      *((_DWORD *)v1 + 136) = v77;
      v1[67] = v78;
      *(_QWORD *)v1[36] = v1[24];
      v1[66] = v79;
      v1[65] = v83;
      *(_QWORD *)v1[35] = v1[25];
      v1[63] = v80;
      v1[64] = v82;
      *(_QWORD *)v1[34] = v1[26];
      v1[61] = v1[3];
      v1[62] = v81;
      *(_QWORD *)v1[33] = v1[27];
      v86 = v1[4];
      v1[59] = v1[5];
      v1[60] = v86;
      v30 = (uint64_t *)v1[7];
      v1[58] = v1[6];
      *v73 = v1[28];
      v43 = (_QWORD *)v1[45];
      v31 = (uint64_t *)v1[69];
      v49 = (uint64_t *)v1[72];
      v50 = (_QWORD *)v1[55];
      v52 = *((_DWORD *)v1 + 102);
      v51 = (_QWORD *)v1[71];
    }
    else
    {
      v60 = *(_QWORD *)v1[71];
      v1[10] = *(_QWORD *)(v5 + 88);
      v1[11] = v60;
      v61 = *v58;
      v1[8] = *v19;
      v1[9] = v61;
      v62 = *v55;
      v1[5] = *v54;
      v1[6] = v62;
      v63 = *v59;
      v65 = (uint64_t *)v1[18];
      v64 = (_QWORD *)v1[19];
      v1[3] = *v65;
      v1[4] = v63;
      v66 = *((_OWORD *)v1 + 39);
      v67 = v10 - 256;
      *(_OWORD *)(v67 + 96) = *((_OWORD *)v1 + 38);
      *(_OWORD *)(v67 + 112) = v66;
      sub_21421CC0C(v10 - 160, v10 - 120);
      *(_QWORD *)(v10 - 128) = *(_QWORD *)(v10 - 136);
      sub_21421CDBC((__n128 *)v1[70], (__n128 *)(v10 - 184));
      sub_2141EF260(v1[58], v1[59], v1[60], v1[61], v1[62], v1[63], v1[64]);
      sub_21421CE7C(v10 - 120);
      sub_2141F92E8(v10 - 128);
      sub_21421D0FC(v10 - 184);
      v68 = *((_DWORD *)v1 + 102);
      v69 = (_QWORD *)v1[71];
      sub_21421C6D4(v1[11], v1[10], v1[9], v1[8], v1[6], v1[5], v1[4]);
      *v69 = v1[20];
      *(_QWORD *)v1[15] = v1[21];
      *v58 = v1[22];
      *(_QWORD *)v1[16] = v1[23];
      v51 = v69;
      *(_QWORD *)v1[50] = v1[24];
      *v54 = v1[25];
      *v59 = v1[26];
      v52 = v68;
      v70 = v1[28];
      *(_QWORD *)v1[17] = v1[27];
      v47 = v64;
      v48 = (_BYTE *)v1[42];
      *v65 = v70;
      v43 = (_QWORD *)v1[45];
      v30 = (uint64_t *)v1[7];
      v31 = (uint64_t *)v1[69];
      v49 = (uint64_t *)v1[72];
      v50 = (_QWORD *)v1[55];
    }
  }
  *v47 = v1[30];
  *v48 = *((_DWORD *)v1 + 59);
  swift_endAccess();
  *(_BYTE *)(v10 - 256) = *((_DWORD *)v1 + 87);
  *(_QWORD *)(v10 - 248) = v5;
  (*(void (**)(uint64_t, uint64_t))(v1[48] + 40))(v1[46], v10 - 256);
  v1[51] = *(_QWORD *)(v10 - 208);
  swift_beginAccess();
  v87 = (_QWORD *)v1[53];
  v88 = (_QWORD *)v1[54];
  v89 = (_QWORD *)v1[44];
  if (v52 != 2)
  {
    if ((v52 & 1) != 0)
      v90 = (_QWORD *)v1[40];
    else
      v90 = v51;
    v91 = v1[15];
    if ((v52 & 1) != 0)
      v91 = v1[39];
    v1[56] = v91;
    v1[57] = (uint64_t)v90;
    if ((v52 & 1) != 0)
      v43 = (_QWORD *)v1[38];
    else
      v43 = (_QWORD *)v1[12];
    if ((v52 & 1) != 0)
      v30 = (uint64_t *)v1[37];
    else
      v30 = (uint64_t *)v1[16];
    if ((v52 & 1) != 0)
      v31 = (uint64_t *)v1[36];
    else
      v31 = (uint64_t *)v1[50];
    if ((v52 & 1) != 0)
      v49 = (uint64_t *)v1[35];
    else
      v49 = (uint64_t *)v1[41];
    if ((v52 & 1) != 0)
      v50 = (_QWORD *)v1[34];
    else
      v50 = (_QWORD *)v1[13];
    if ((v52 & 1) != 0)
      v88 = (_QWORD *)v1[33];
    else
      v88 = (_QWORD *)v1[17];
    if ((v52 & 1) != 0)
      v89 = (_QWORD *)v1[14];
    else
      v89 = (_QWORD *)v1[18];
    v87 = (_QWORD *)v1[19];
    if ((v52 & 1) != 0)
      v87 = (_QWORD *)v1[32];
    v92 = v1[42];
    if ((v52 & 1) != 0)
      v92 = v1[31];
    v1[52] = v92;
  }
  v94 = (uint64_t *)v1[56];
  v93 = (uint64_t *)v1[57];
  v95 = *v93;
  v96 = *v94;
  v1[72] = (uint64_t)v49;
  v97 = v31;
  v1[69] = (uint64_t)v31;
  v98 = v30;
  v99 = v43;
  v100 = *v43;
  v101 = *v49;
  v102 = v50;
  v103 = *v50;
  v104 = v87;
  v105 = (_BYTE *)v1[52];
  v106 = v88;
  sub_21421C6D4(v95, v96, v100, *v98, *v97, v101, v103);
  *v93 = v1[58];
  *v94 = v1[59];
  *v99 = v1[60];
  *v98 = v1[61];
  *(_QWORD *)v1[69] = v1[62];
  *(_QWORD *)v1[72] = v1[63];
  *v102 = v1[64];
  *v106 = v1[65];
  *v89 = v1[66];
  *v104 = v1[67];
  *v105 = *((_DWORD *)v1 + 136);
  swift_endAccess();
  v107 = *((_OWORD *)v1 + 39);
  *(_OWORD *)(v10 - 256) = *((_OWORD *)v1 + 38);
  *(_OWORD *)(v10 - 240) = v107;
  sub_21421CC0C(v10 - 256, v10 - 208);
  sub_21421CC48(v10 - 208);
  *(_QWORD *)(v10 - 216) = *(_QWORD *)(v10 - 232);
  sub_2141F9244(v10 - 216);
  sub_21421CDBC((__n128 *)v1[70], (__n128 *)(v1 + 85));
  result = sub_21421CDF8((uint64_t)(v1 + 85));
  *(_QWORD *)v1[49] = v1[51];
  return result;
}

void sub_214363DF4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_214362924(a1, a2, a3[2], a3[3], a3[4], a3[5], a3[6]);
}

void sub_214363E08(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_214363350(a1, a2, a3[2], a3[3], a3[4], a3[5], a3[6]);
}

void sub_214363E1C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  _BYTE v3[80];

  v2 = *a2;
  swift_beginAccess();
  sub_2141E070C(v2 + 1112, (uint64_t)v3, &qword_254D69CF8);
  type metadata accessor for ModifiedChartContent_Positions();
}

uint64_t sub_214363EAC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v7;
  _OWORD v8[7];
  uint64_t v9;

  sub_21436857C(v4 + *(int *)(a1 + 60), (uint64_t)v8);
  swift_beginAccess();
  sub_2141FA160((uint64_t)v8, v2, v3);
  swift_endAccess();
  v8[0] = v7;
  (*(void (**)(uint64_t, _OWORD *, uint64_t))(*(_QWORD *)(v5 + 8) + 32))(v4, v8, v1);
  swift_beginAccess();
  sub_2141FA160((uint64_t)&v9, v2, v3);
  return swift_endAccess();
}

void sub_214363F54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD __src[90];
  _QWORD __dst[96];
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  _BYTE v37[96];

  v12 = *(_QWORD *)(a2 + 8) + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_environment;
  swift_beginAccess();
  v13 = v12 + *(int *)(type metadata accessor for ChartContentRenderContext.Environment(0) + 108);
  if (*(_QWORD *)(v13 + 24))
  {
    sub_21427362C(v13, (uint64_t)&v17);
    swift_retain();
    sub_214253714(a4, __src);
    sub_21420D92C((uint64_t)&v17);
    if (__src[3] != 2)
    {
      memcpy(__dst, __src, 0x2C9uLL);
      v17 = a3;
      v18 = a4;
      v19 = a5;
      v20 = a6;
      v21 = a7;
      type metadata accessor for ModifiedChartContent_Positions();
    }
  }
  else
  {
    memset(__src, 0, 24);
    __src[3] = 2;
    bzero(&__src[4], 0x2A9uLL);
    swift_retain();
  }
  type metadata accessor for TypedVectorizedProperties(255, a4, v14, v15);
  v16 = sub_214425388();
  (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(__src, v16);
  memset(&__dst[90], 0, 24);
  __dst[93] = 1;
  __dst[95] = 0;
  __dst[94] = 0;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v28 = 1;
  v30 = 0;
  v29 = 0;
  v31 = 0;
  v32 = 0;
  v33 = 0;
  v34 = 0;
  v35 = 1;
  v36 = 0u;
  memset(v37, 0, 25);
  memset(&v37[32], 0, 48);
  v37[80] = -4;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v20 = a6;
  v21 = a7;
  type metadata accessor for ModifiedChartContent_Positions();
}

#error "214364398: call analysis failed (funcsize=89)"

uint64_t sub_214364440(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  return sub_21436746C(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_214363E1C);
}

uint64_t sub_21436444C(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  return sub_214367490(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_214363F54);
}

void sub_214364458(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v7[56];

  v5 = sub_2141D8BF8(&qword_253F12228);
  MEMORY[0x24BDAC7A8](v5);
  v4 = sub_2141D8BF8(&qword_253F12220);
  v3 = MEMORY[0x24BDAC7A8](v4);
  MEMORY[0x24BDAC7A8](v3);
  v6 = *(_QWORD *)(a2 + 8) + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_environment;
  swift_beginAccess();
  sub_2141E070C(v6 + 88, (uint64_t)v7, &qword_253F12208);
  type metadata accessor for ModifiedChartContent_SymbolView();
}

uint64_t sub_2143645D8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t KeyPath;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v3, v6 + *(int *)(a1 + 52), v4);
  v9 = sub_214424B18();
  v10 = *(_QWORD *)(v5 + 56);
  *(_QWORD *)(v8 - 352) = *(_QWORD *)(*(_QWORD *)(v5 + 16) + 24);
  swift_retain_n();
  *(_QWORD *)(v8 - 360) = sub_214424134();
  v12 = v11;
  *(_QWORD *)(v8 - 368) = v13;
  v15 = v14;
  KeyPath = swift_getKeyPath();
  v17 = v10 + OBJC_IVAR____TtC6Charts14SgMeasurements__dynamicTypeSize;
  swift_beginAccess();
  v18 = (char *)v1 + *(int *)(*(_QWORD *)(v8 - 336) + 28);
  v19 = sub_214423F24();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v18, v17, v19);
  *v1 = KeyPath;
  sub_2141E070C((uint64_t)v1, (uint64_t)v7 + *(int *)(*(_QWORD *)(v8 - 344) + 36), &qword_253F12228);
  *v7 = v9;
  swift_retain();
  sub_2141E0750((uint64_t)v1, &qword_253F12228);
  *(_BYTE *)(v8 - 224) = v12 & 1;
  *(_BYTE *)(v8 - 272) = v15 & 1;
  v20 = sub_214299CE4((uint64_t)v7, *(_QWORD *)(v8 - 352), *(_QWORD *)(v8 - 360), v12 & 1, *(_QWORD *)(v8 - 368), *(_BYTE *)(v8 - 272));
  v22 = v21;
  sub_2141E0750((uint64_t)v7, &qword_253F12220);
  swift_release();
  *(_QWORD *)(v8 - 224) = v9;
  *(double *)(v8 - 216) = v20;
  *(_QWORD *)(v8 - 208) = v22;
  *(_BYTE *)(v8 - 184) = 1;
  swift_beginAccess();
  v23 = *(_QWORD *)(v8 - 320);
  sub_2141FA160(v8 - 224, v23, &qword_253F12208);
  swift_endAccess();
  *(_BYTE *)(v8 - 224) = *(_DWORD *)(v8 - 284);
  *(_QWORD *)(v8 - 216) = v5;
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v8 - 304) + 40))(*(_QWORD *)(v8 - 312), v8 - 224);
  swift_release();
  v24 = *(_QWORD *)(v8 - 272);
  swift_beginAccess();
  sub_2141FA160(v8 - 152, v23, &qword_253F12208);
  result = swift_endAccess();
  **(_QWORD **)(v8 - 280) = v24;
  return result;
}

uint64_t sub_214364834(uint64_t a1, __int128 *a2, uint64_t *a3)
{
  return sub_214343344(a1, a2, a3[2], a3[3], a3[4]);
}

void sub_214364844(uint64_t a1, uint64_t a2)
{
  sub_214364458(a1, a2);
}

_QWORD *sub_214364854@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  int *v10;
  uint64_t v11;
  char *v12;
  char v13;
  uint64_t v14;
  _QWORD *result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v25[8];
  uint64_t v26;
  uint64_t v27;

  v10 = (int *)type metadata accessor for SgGroup(0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = &v25[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v14 = *((_QWORD *)a2 + 1);
  v25[0] = *a2;
  v13 = v25[0];
  v26 = v14;
  result = (*(_QWORD *(**)(uint64_t *__return_ptr, uint64_t, char *, uint64_t, uint64_t))(a4 + 40))(&v27, a1, v25, a3, a4);
  v16 = v27;
  if ((v13 & 1) == 0)
  {
    v17 = *(_QWORD *)(*(_QWORD *)(v14 + 16) + 24);
    sub_2141D8BF8(&qword_253F15D40);
    v18 = swift_allocObject();
    *(_OWORD *)(v18 + 16) = xmmword_214426EF0;
    *(_QWORD *)(v18 + 32) = v16;
    v19 = &v12[v10[6]];
    v20 = type metadata accessor for SgClipRect(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v19, 1, 1, v20);
    v22 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for ModifiedChartContent_Filters(0, a3, a4, v21) + 36));
    *(_QWORD *)v12 = v17;
    *((_QWORD *)v12 + 1) = v18;
    *(_QWORD *)&v12[v10[7]] = 0x3FF0000000000000;
    *(_QWORD *)&v12[v10[8]] = 0;
    *(_QWORD *)&v12[v10[9]] = v22;
    v12[v10[10]] = 1;
    v16 = swift_allocBox();
    sub_2141ED148((uint64_t)v12, v23);
    result = (_QWORD *)swift_bridgeObjectRetain();
  }
  *a5 = v16;
  return result;
}

uint64_t sub_2143649D8(uint64_t a1, __int128 *a2, uint64_t a3)
{
  return sub_2142E7DF4(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

_QWORD *sub_2143649F4@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_214364854(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
}

uint64_t sub_214364A00(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __int128 v7;

  v7 = *a2;
  return (*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)(a6 + 8) + 32))(a1, &v7);
}

void sub_214364A3C()
{
  type metadata accessor for ModifiedChartContent_ForegroundStyles();
}

uint64_t sub_214364A9C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  _BYTE v52[25];
  uint64_t v53[90];
  _BYTE v54[160];
  _QWORD v55[90];
  uint64_t v56[90];
  _QWORD v57[4];
  _QWORD v58[2];
  char v59;
  _BYTE v60[24];
  _BYTE v61[24];
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  _QWORD v66[6];
  char v67;
  _BYTE v68[24];
  uint64_t v69;
  __int128 v70;
  _BYTE v71[25];
  _BYTE v72[64];
  uint64_t v73[17];
  _BYTE v74[24];
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;

  v46 = v2;
  sub_214252090(0, 0, 0, 0, *(_QWORD *)(v2 + *(int *)(a1 + 60)), v3, (uint64_t)v57);
  v6 = v57[0];
  v7 = v57[1];
  v8 = v57[2];
  v40 = v57[3];
  v9 = v58[0];
  v10 = v58[1];
  v41 = v59;
  v44 = v4;
  v11 = v4 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_environment;
  swift_beginAccess();
  v42 = type metadata accessor for ChartContentRenderContext.Environment(0);
  v12 = v11 + *(int *)(v42 + 108);
  if (!*(_QWORD *)(v12 + 24))
  {
    memset(v55, 0, 24);
    v55[3] = 2;
    bzero(&v55[4], 0x2A9uLL);
    swift_retain();
    goto LABEL_5;
  }
  sub_21427362C(v12, (uint64_t)v53);
  swift_retain();
  sub_214253714(v1, v55);
  sub_21420D92C((uint64_t)v53);
  if (v55[3] == 2)
  {
LABEL_5:
    type metadata accessor for TypedVectorizedProperties(255, v1, v13, v14);
    v24 = sub_214425388();
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v24 - 8) + 8))(v55, v24);
    memset(v61, 0, sizeof(v61));
    v62 = 1;
    v64 = 0;
    v63 = 0;
    v65 = 0;
    v66[0] = v6;
    v66[1] = v7;
    v66[2] = v8;
    v66[3] = v40;
    v66[4] = v9;
    v66[5] = v10;
    v67 = v41;
    memset(v68, 0, sizeof(v68));
    v69 = 1;
    v70 = 0u;
    memset(v71, 0, sizeof(v71));
    v47 = 0;
    v48 = 0;
    v49 = 0;
    v50 = 1;
    v51 = 0u;
    memset(v52, 0, sizeof(v52));
    memset(v72, 0, 48);
    v72[48] = -4;
    sub_21427384C((uint64_t)v54);
    type metadata accessor for TypedVectorizedProperties.Position(255, v1, v25, v26);
    v27 = sub_214425388();
    (*(void (**)(uint64_t *, _BYTE *, uint64_t))(*(_QWORD *)(v27 - 8) + 32))(v73, v54, v27);
    memset(v74, 0, sizeof(v74));
    v75 = 1;
    v77 = 0;
    v76 = 0;
    v78 = 0;
    *(_QWORD *)(v5 - 224) = 0;
    *(_QWORD *)(v5 - 216) = 0;
    *(_QWORD *)(v5 - 208) = 0;
    *(_QWORD *)(v5 - 200) = 1;
    *(_QWORD *)(v5 - 192) = 0;
    *(_QWORD *)(v5 - 184) = 0;
    *(_BYTE *)(v5 - 176) = 0;
    *(_QWORD *)(v5 - 168) = 0;
    *(_QWORD *)(v5 - 160) = 0;
    *(_QWORD *)(v5 - 152) = 0;
    *(_QWORD *)(v5 - 144) = 1;
    *(_OWORD *)(v5 - 136) = 0u;
    *(_OWORD *)(v5 - 120) = 0u;
    *(_BYTE *)(v5 - 104) = 0;
    sub_214253428((uint64_t)v61, (uint64_t)v66, (uint64_t)v68, (uint64_t)&v47, (uint64_t)v72, (uint64_t)v73, (uint64_t)v74, v5 - 224, (uint64_t)v53, v5 - 168, v5 - 168, v1);
    sub_2142536C0(v53, v1, v28, v29, &v47);
    swift_beginAccess();
    v30 = v11 + *(int *)(v42 + 108);
    sub_2141E801C((uint64_t)v57, (uint64_t)v53, &qword_253F13518);
    v17 = type metadata accessor for VisualMapper.Mapping(0, v1, MEMORY[0x24BDEBF80], v31);
    (*(void (**)(_BYTE *, _QWORD *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v60, v58, v17);
    sub_21423142C(v53);
    sub_2143685B8((uint64_t)v60);
    sub_2141FA160((uint64_t)&v47, v30, &qword_254D69D18);
    swift_endAccess();
    goto LABEL_6;
  }
  memcpy(v56, v55, 0x2C9uLL);
  v15 = v56[7];
  v38 = v56[9];
  v39 = v56[8];
  v36 = v56[11];
  v37 = v56[10];
  v35 = v56[12];
  v34 = v56[13];
  sub_2141E801C((uint64_t)v57, (uint64_t)v53, &qword_253F13518);
  v17 = type metadata accessor for VisualMapper.Mapping(0, v1, MEMORY[0x24BDEBF80], v16);
  (*(void (**)(_BYTE *, _QWORD *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v54, v58, v17);
  sub_21423142C(v53);
  sub_2143685B8((uint64_t)v54);
  sub_2142745A8(v15, v39, v38, v37, v36, v35, v34);
  v56[7] = v6;
  v56[8] = v7;
  v56[9] = v8;
  v56[10] = v40;
  v56[11] = v9;
  v56[12] = v10;
  LOBYTE(v56[13]) = v41;
  v20 = type metadata accessor for TypedVectorizedProperties(0, v1, v18, v19);
  v21 = *(_QWORD *)(v20 - 8);
  (*(void (**)(_QWORD *, uint64_t *, uint64_t))(v21 + 16))(v55, v56, v20);
  sub_2142536C0(v55, v1, v22, v23, v73);
  swift_beginAccess();
  sub_2141FA160((uint64_t)v73, v11 + *(int *)(v42 + 108), &qword_254D69D18);
  swift_endAccess();
  (*(void (**)(uint64_t *, uint64_t))(v21 + 8))(v56, v20);
LABEL_6:
  LOBYTE(v47) = v43;
  v48 = v44;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)(v45 + 8) + 40))(v46, &v47);
  sub_2141E801C((uint64_t)v57, (uint64_t)v56, &qword_253F13518);
  sub_2143685E8(v56);
  type metadata accessor for VisualMapper.Mapping(0, v1, MEMORY[0x24BDEBF80], v32);
  (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v55, v58, v17);
  return sub_214368618((uint64_t)v55);
}

uint64_t sub_214364F8C(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  return sub_21436746C(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_214364A00);
}

uint64_t sub_214364F98(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  return sub_214367490(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_214364A3C);
}

uint64_t sub_214364FA4(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62[4];
  __int128 v63;
  _BYTE v64[25];
  uint64_t v65[90];
  _BYTE v66[136];
  _QWORD __src[90];
  _QWORD __dst[90];
  _QWORD v69[6];
  char v70;
  _QWORD v71[6];
  char v72;
  _QWORD v73[9];
  char v74;
  _OWORD v75[3];
  char v76;
  _BYTE v77[136];
  _QWORD v78[6];
  char v79;
  _QWORD v80[6];
  char v81;
  _QWORD v82[4];
  __int128 v83;
  __int128 v84;
  char v85;

  v54 = *a2;
  v7 = *((_QWORD *)a2 + 1);
  v8 = type metadata accessor for ModifiedChartContent_StrokeStyles(0, a3, a4, a5);
  v56 = a1;
  sub_214252010(0, 0, 0, 0, *(uint64_t **)(a1 + *(int *)(v8 + 44)), __dst);
  v58 = __dst[0];
  v9 = __dst[1];
  v10 = __dst[2];
  v11 = __dst[3];
  v12 = __dst[4];
  v53 = __dst[5];
  v13 = __dst[6];
  v60 = __dst[8];
  v61 = __dst[7];
  v59 = __dst[9];
  v55 = v7;
  v14 = v7 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_environment;
  swift_beginAccess();
  v50 = type metadata accessor for ChartContentRenderContext.Environment(0);
  v51 = v14;
  v15 = v14 + *(int *)(v50 + 108);
  v52 = v13;
  if (!*(_QWORD *)(v15 + 24))
  {
    memset(__src, 0, 24);
    __src[3] = 2;
    bzero(&__src[4], 0x2A9uLL);
    swift_retain();
    goto LABEL_5;
  }
  sub_21427362C(v15, (uint64_t)v65);
  swift_retain();
  sub_214253714(a4, __src);
  sub_21420D92C((uint64_t)v65);
  if (__src[3] == 2)
  {
LABEL_5:
    type metadata accessor for TypedVectorizedProperties(255, a4, v16, v17);
    v31 = sub_214425388();
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v31 - 8) + 8))(__src, v31);
    memset(v69, 0, 24);
    v69[3] = 1;
    v69[5] = 0;
    v69[4] = 0;
    v70 = 0;
    memset(v71, 0, 24);
    v71[3] = 1;
    v71[5] = 0;
    v71[4] = 0;
    v72 = 0;
    v73[0] = v58;
    v73[1] = v9;
    v73[2] = v10;
    v73[3] = v11;
    v73[4] = v12;
    v73[5] = v53;
    v73[6] = v13;
    v73[7] = v61;
    v73[8] = v60;
    v74 = v59;
    memset(v62, 0, 24);
    v62[3] = 1;
    v63 = 0u;
    memset(v64, 0, sizeof(v64));
    memset(v75, 0, sizeof(v75));
    v76 = -4;
    sub_21427384C((uint64_t)v66);
    type metadata accessor for TypedVectorizedProperties.Position(255, a4, v32, v33);
    v34 = sub_214425388();
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v34 - 8) + 32))(v77, v66, v34);
    memset(v78, 0, 24);
    v78[3] = 1;
    v78[5] = 0;
    v78[4] = 0;
    v79 = 0;
    memset(v80, 0, 24);
    v80[3] = 1;
    v80[4] = 0;
    v80[5] = 0;
    v81 = 0;
    memset(v82, 0, 24);
    v82[3] = 1;
    v83 = 0u;
    v84 = 0u;
    v85 = 0;
    sub_214253428((uint64_t)v69, (uint64_t)v71, (uint64_t)v73, (uint64_t)v62, (uint64_t)v75, (uint64_t)v77, (uint64_t)v78, (uint64_t)v80, (uint64_t)v65, (uint64_t)v82, (uint64_t)v82, a4);
    v35 = a4;
    v28 = v12;
    v21 = v53;
    v22 = v13;
    v18 = v9;
    sub_2142536C0(v65, v35, v36, v37, v62);
    swift_beginAccess();
    v38 = v14 + *(int *)(v50 + 108);
    sub_2141EF2B4(v58, v9, v10, v11);
    sub_214282BD0(v28, v53, v52, v61, v60, v59);
    sub_2141FA160((uint64_t)v62, v38, &qword_254D69D18);
    swift_endAccess();
    goto LABEL_6;
  }
  memcpy(__dst, __src, 0x2C9uLL);
  v48 = __dst[15];
  v49 = __dst[14];
  v46 = __dst[17];
  v47 = __dst[16];
  v44 = __dst[19];
  v45 = __dst[18];
  v42 = __dst[21];
  v43 = __dst[20];
  v41 = __dst[22];
  v40 = __dst[23];
  v18 = v9;
  sub_2141EF2B4(v58, v9, v10, v11);
  v19 = v12;
  v20 = v12;
  v22 = v52;
  v21 = v53;
  sub_214282BD0(v20, v53, v52, v61, v60, v59);
  sub_21436847C(v49, v48, v47, v46, v45, v44, v43, v42, v41, v40);
  __dst[14] = v58;
  __dst[15] = v18;
  __dst[16] = v10;
  __dst[17] = v11;
  __dst[18] = v19;
  __dst[19] = v53;
  __dst[20] = v52;
  __dst[21] = v61;
  __dst[22] = v60;
  LOBYTE(__dst[23]) = v59;
  v25 = type metadata accessor for TypedVectorizedProperties(0, a4, v23, v24);
  v26 = *(_QWORD *)(v25 - 8);
  (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v26 + 16))(__src, __dst, v25);
  v27 = a4;
  v28 = v19;
  sub_2142536C0(__src, v27, v29, v30, v65);
  swift_beginAccess();
  sub_2141FA160((uint64_t)v65, v51 + *(int *)(v50 + 108), &qword_254D69D18);
  swift_endAccess();
  (*(void (**)(_QWORD *, uint64_t))(v26 + 8))(__dst, v25);
LABEL_6:
  LOBYTE(__dst[0]) = v54;
  __dst[1] = v55;
  (*(void (**)(uint64_t, _QWORD *))(a5 + 40))(v56, __dst);
  sub_21422F7F0(v58, v18, v10, v11);
  return sub_214273B58(v28, v21, v22, v61, v60, v59);
}

uint64_t sub_214365500(uint64_t a1, char *a2, uint64_t *a3)
{
  return sub_214364FA4(a1, a2, a3[2], a3[3], a3[4]);
}

void sub_214365510(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[10];
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  *(_QWORD *)&v21 = a2;
  v22 = a1;
  v12 = type metadata accessor for PlottableValue(0, a5, a7, a4);
  MEMORY[0x24BDAC7A8](v12);
  v20[4] = (char *)v20 - v13;
  v14 = type metadata accessor for PlottableProjection.Storage(0, a4, a5, a7);
  v20[9] = *(_QWORD *)(v14 - 8);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v20[6] = *(_QWORD *)(a5 - 8);
  v16 = MEMORY[0x24BDAC7A8](v15);
  v20[2] = (char *)v20 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v20[3] = (char *)v20 - v18;
  v19 = type metadata accessor for PlottableProjection(0, a4, a5, a7);
  MEMORY[0x24BDAC7A8](v19);
  v21 = *(_OWORD *)v21;
  v20[8] = a3;
  v23 = a3;
  v24 = a4;
  v25 = a5;
  v26 = a6;
  v20[7] = a6;
  v27 = a7;
  type metadata accessor for ModifiedChartContent_ForegroundStyles_Plottable();
}

uint64_t sub_2143656BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  unint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  double v39;
  uint64_t v40;
  double v41;
  uint64_t v42;
  double v43;
  double v44;
  __int128 v45;
  float64x2_t v46;
  float64x2_t v47;
  int8x16_t v48;

  v10 = *(_QWORD *)(v9 - 312) + *(int *)(a1 + 60);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v1, v10, v4);
  sub_214372AC8(v1, v3, v5, v2, (uint64_t *)(v9 - 248));
  v11 = *(_QWORD *)(v9 - 336);
  swift_beginAccess();
  v12 = *(_QWORD *)(v9 - 344);
  sub_2141FA160(v9 - 248, v11 + 888, &qword_254D69D00);
  swift_endAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v8, v10 + *(int *)(v4 + 44), v7);
  if (swift_getEnumCaseMultiPayload())
  {
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v8, v7);
    v13 = *(_QWORD *)(v9 - 352);
    v14 = *(_QWORD *)(v9 - 360);
  }
  else
  {
    *(_QWORD *)(v9 - 344) = v11;
    v15 = *(_QWORD *)(v9 - 368);
    v16 = *(_QWORD *)(v9 - 392);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 32))(v16, v8, v5);
    v17 = *(_QWORD *)v10;
    v18 = *(_QWORD *)(v10 + 8);
    v19 = *(_BYTE *)(v10 + 16);
    v20 = *(_QWORD *)(v10 + 24);
    v21 = *(_QWORD *)(v9 - 400);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v21, v16, v5);
    v22 = *(_QWORD *)(v9 - 384);
    sub_21437293C(v17, v18, v19, v20, v21, v5, v2, v22);
    swift_bridgeObjectRetain();
    sub_2141DD130(v17, v18, v19);
    sub_2143D046C(v22, v5, v2, v9 - 248);
    v24 = *(unint64_t *)(v9 - 216);
    v25 = *(_QWORD *)(v9 - 208);
    v26 = *(char *)(v9 - 200);
    v27 = v5;
    v28 = *(_QWORD *)(v9 - 368);
    *(_QWORD *)(v9 - 408) = v27;
    if (v26 < 0)
    {
      v35 = *(_QWORD *)(v9 - 344);
      v36 = v24;
      *(_QWORD *)&v23 = v25;
      v37 = v24 & 0x7FF0000000000000;
      *(_OWORD *)(v9 - 384) = v23;
      v29 = v16;
      if ((v26 & 1) != 0)
      {
        swift_beginAccess();
        v13 = *(_QWORD *)(v9 - 352);
        v14 = *(_QWORD *)(v9 - 360);
        if (v37 != 0x7FF0000000000000)
        {
          if ((*(_BYTE *)(v35 + 360) & 1) != 0)
          {
            v41 = *(double *)&v24;
            v42 = v35;
          }
          else
          {
            v42 = v35;
            v41 = *(double *)(v35 + 344);
            if (v41 >= *(double *)&v24)
              v41 = *(double *)&v24;
            if (*(double *)(v35 + 352) >= *(double *)&v24)
              v36 = *(_QWORD *)(v35 + 352);
          }
          *(double *)(v42 + 344) = v41;
          *(_QWORD *)(v42 + 352) = v36;
          *(_BYTE *)(v35 + 360) = 0;
        }
        v30 = v35;
        if ((~v25 & 0x7FF0000000000000) != 0)
        {
          if ((*(_BYTE *)(v35 + 360) & 1) != 0)
          {
            v30 = v35;
            *(_QWORD *)(v35 + 344) = v25;
            *(_QWORD *)(v35 + 352) = v25;
            *(_BYTE *)(v35 + 360) = 0;
          }
          else
          {
            v46 = *(float64x2_t *)(v35 + 344);
            v47 = (float64x2_t)vdupq_lane_s64(*(_QWORD *)(v9 - 384), 0);
            v48.i64[0] = vmovn_s64(vcgtq_f64(v47, v46)).i32[0];
            v48.i64[1] = vmovn_s64(vcgeq_f64(v46, v47)).i32[1];
            *(int8x16_t *)(v35 + 344) = vbslq_s8(v48, (int8x16_t)v46, (int8x16_t)v47);
            *(_BYTE *)(v35 + 360) = 0;
            v30 = v35;
          }
        }
      }
      else
      {
        swift_beginAccess();
        v38 = (_BYTE *)(v35 + 336);
        v13 = *(_QWORD *)(v9 - 352);
        v14 = *(_QWORD *)(v9 - 360);
        if (v37 != 0x7FF0000000000000)
        {
          if ((*v38 & 1) != 0)
          {
            v39 = *(double *)&v24;
            v40 = v35;
          }
          else
          {
            v40 = v35;
            v39 = *(double *)(v35 + 320);
            if (v39 >= *(double *)&v24)
              v39 = *(double *)&v24;
            if (*(double *)(v35 + 328) >= *(double *)&v24)
              v36 = *(_QWORD *)(v35 + 328);
          }
          *(double *)(v40 + 320) = v39;
          *(_QWORD *)(v40 + 328) = v36;
          *v38 = 0;
        }
        v30 = v35;
        if ((~v25 & 0x7FF0000000000000) != 0)
        {
          if ((*v38 & 1) != 0)
          {
            v30 = v35;
            *(_QWORD *)(v35 + 320) = v25;
            *(_QWORD *)(v35 + 328) = v25;
            *v38 = 0;
          }
          else
          {
            v30 = v35;
            v44 = *(double *)(v35 + 320);
            v43 = *(double *)(v35 + 328);
            v45 = *(_OWORD *)(v9 - 384);
            if (v44 >= *(double *)&v45)
              v44 = *(double *)(v9 - 384);
            if (v43 < *(double *)&v45)
              v43 = *(double *)(v9 - 384);
            *(double *)(v35 + 320) = v44;
            *(double *)(v35 + 328) = v43;
            *v38 = 0;
          }
        }
      }
    }
    else
    {
      v29 = v16;
      v30 = *(_QWORD *)(v9 - 344);
      swift_beginAccess();
      sub_2141DD14C(v24, v25, v26);
      sub_214200CB8(v24, v25, v26);
      swift_endAccess();
      sub_2141EF1B0(v24, v25, v26);
      v13 = *(_QWORD *)(v9 - 352);
      v14 = *(_QWORD *)(v9 - 360);
    }
    v31 = *(_QWORD *)(v9 - 192);
    v32 = *(_QWORD *)(v9 - 184);
    swift_beginAccess();
    if (*(unsigned __int8 *)(v30 + 385) << 8 == 512)
      sub_21420233C(v31, (_WORD *)(v30 + 384), v31, v32);
    swift_endAccess();
    v33 = *(_OWORD *)(v9 - 232);
    *(_OWORD *)(v9 - 176) = *(_OWORD *)(v9 - 248);
    *(_OWORD *)(v9 - 160) = v33;
    sub_21421CC0C(v9 - 176, v9 - 128);
    sub_21421CC48(v9 - 128);
    *(_QWORD *)(v9 - 136) = *(_QWORD *)(v9 - 152);
    sub_2141F9244(v9 - 136);
    sub_2141EF1B0(v24, v25, v26);
    (*(void (**)(uint64_t, _QWORD))(v28 + 8))(v29, *(_QWORD *)(v9 - 408));
  }
  *(_OWORD *)(v9 - 272) = *(_OWORD *)(v9 - 336);
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v14 + 8) + 32))(*(_QWORD *)(v9 - 312), v9 - 272, v13);
}

void sub_214365B4C(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[17];
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v31 = a1;
  v28 = a8;
  v30 = a7;
  v14 = type metadata accessor for PlottableValue(0, a5, a7, a4);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v23[10] = (char *)v23 - v16;
  v23[12] = *(_QWORD *)(a5 - 8);
  v17 = MEMORY[0x24BDAC7A8](v15);
  v23[9] = (char *)v23 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v23[11] = (char *)v23 - v19;
  v24 = type metadata accessor for PlottableProjection.Storage(0, a4, a5, a7);
  v23[15] = *(_QWORD *)(v24 - 8);
  MEMORY[0x24BDAC7A8](v24);
  v23[16] = (char *)v23 - v20;
  v29 = a4;
  v33 = a5;
  v21 = type metadata accessor for PlottableProjection(0, a4, a5, a7);
  MEMORY[0x24BDAC7A8](v21);
  v32 = (char *)v23 - v22;
  v25 = *a2;
  v26 = a6;
  v27 = a3;
  v34 = a3;
  v35 = a4;
  v36 = a5;
  v37 = a6;
  v38 = a7;
  type metadata accessor for ModifiedChartContent_ForegroundStyles_Plottable();
}

uint64_t sub_214365CEC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t result;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  __int128 v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;

  v7 = *(_QWORD *)(v1 + 256) + *(int *)(a1 + 60);
  v8 = *(void (**)(uint64_t))(v2 + 16);
  *(_QWORD *)(v1 + 104) = v3;
  *(_QWORD *)(v1 + 112) = v7;
  v8(v5);
  v9 = OBJC_IVAR____TtC6Charts25ChartContentRenderContext_foregroundStyleScale;
  *(_QWORD *)(v1 + 280) = v4;
  v10 = v4 + v9;
  v12 = *(_QWORD *)v10;
  v11 = *(_QWORD *)(v10 + 8);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = *(_QWORD *)(v10 + 24);
  *(_QWORD *)(v1 + 240) = v13;
  *(_QWORD *)(v1 + 248) = v11;
  v15 = *(_QWORD *)(v10 + 32);
  v16 = *(_QWORD *)(v10 + 40);
  v17 = *(_QWORD *)(v10 + 48);
  v18 = *(_QWORD *)(v10 + 56);
  *(_QWORD *)(v1 + 224) = v18;
  *(_QWORD *)(v1 + 232) = v17;
  v19 = *(_QWORD *)(v10 + 64);
  v20 = *(_QWORD *)(v10 + 72);
  v21 = *(_QWORD *)(v10 + 80);
  v22 = *(_QWORD *)(v10 + 88);
  v23 = *(_BYTE *)(v10 + 96);
  *(_QWORD *)(v1 + 1992) = v12;
  *(_QWORD *)(v1 + 2000) = v11;
  *(_QWORD *)(v1 + 2008) = v13;
  *(_QWORD *)(v1 + 2016) = v14;
  *(_QWORD *)(v1 + 2024) = v15;
  *(_QWORD *)(v1 + 2032) = v16;
  *(_QWORD *)(v1 + 2040) = v17;
  *(_QWORD *)(v1 + 2048) = v18;
  *(_QWORD *)(v1 + 2056) = v19;
  *(_QWORD *)(v1 + 2064) = v20;
  *(_QWORD *)(v1 + 2072) = v21;
  *(_QWORD *)(v1 + 2080) = v22;
  *(_BYTE *)(v1 + 2088) = v23;
  swift_retain();
  v24 = v15;
  v25 = *(_QWORD *)(v1 + 176);
  sub_21424D78C(v12, *(_QWORD *)(v1 + 248), *(_QWORD *)(v1 + 240), v14, v24, v16, *(_QWORD *)(v1 + 232), *(_QWORD *)(v1 + 224), v19, v20, v21, v22, v23);
  *(_QWORD *)(v1 + 1272) = sub_2144249C8();
  *(_QWORD *)(v1 + 384) = sub_214423E10();
  sub_214252198(*(_QWORD *)(v1 + 264), v1 + 1992, v1 + 384, v25, MEMORY[0x24BDEBF80], (uint64_t *)(v1 + 1272));
  v26 = *(_QWORD *)(v1 + 1280);
  *(_QWORD *)(v1 + 224) = *(_QWORD *)(v1 + 1272);
  *(_QWORD *)(v1 + 232) = v26;
  *(_QWORD *)(v1 + 200) = *(_QWORD *)(v1 + 1288);
  v27 = *(_QWORD *)(v1 + 1304);
  *(_QWORD *)(v1 + 240) = *(_QWORD *)(v1 + 1296);
  *(_QWORD *)(v1 + 248) = v27;
  *(_QWORD *)(v1 + 216) = *(_QWORD *)(v1 + 1312);
  *(_DWORD *)(v1 + 212) = *(unsigned __int8 *)(v1 + 1320);
  v28 = *(_QWORD *)(v1 + 280) + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_environment;
  swift_beginAccess();
  v29 = type metadata accessor for ChartContentRenderContext.Environment(0);
  *(_QWORD *)(v1 + 264) = v29;
  v30 = *(int *)(v29 + 108);
  *(_QWORD *)(v1 + 192) = v28;
  if (*(_QWORD *)(v28 + v30 + 24))
  {
    sub_21427362C(v28 + v30, v1 + 384);
    sub_214253714(v25, (_QWORD *)(v1 + 1272));
    sub_21420D92C(v1 + 384);
    if (*(_QWORD *)(v1 + 1296) != 2)
    {
      memcpy((void *)(v1 + 1992), (const void *)(v1 + 1272), 0x2C9uLL);
      v33 = *(_QWORD *)(v1 + 2048);
      v34 = *(_QWORD *)(v1 + 2056);
      v35 = *(_DWORD *)(v1 + 212);
      v36 = *(_QWORD *)(v1 + 224);
      v37 = *(_QWORD *)(v1 + 232);
      *(_QWORD *)(v1 + 56) = *(_QWORD *)(v1 + 2064);
      *(_QWORD *)(v1 + 64) = v33;
      v38 = *(_QWORD *)(v1 + 216);
      v39 = *(_QWORD *)(v1 + 240);
      v40 = *(_QWORD *)(v1 + 248);
      v41 = *(_QWORD *)(v1 + 2072);
      v42 = *(_QWORD *)(v1 + 2080);
      *(_QWORD *)(v1 + 40) = *(_QWORD *)(v1 + 2088);
      *(_QWORD *)(v1 + 48) = v41;
      v43 = *(_QWORD *)(v1 + 200);
      *(_DWORD *)(v1 + 32) = *(unsigned __int8 *)(v1 + 2096);
      sub_2141EF2B4(v36, v37, v43, v39);
      sub_21427460C(v40, v38, v35);
      v44 = v42;
      v45 = *(_QWORD *)(v1 + 192);
      sub_2142745A8(*(_QWORD *)(v1 + 64), v34, *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 48), v44, *(_QWORD *)(v1 + 40), *(_DWORD *)(v1 + 32));
      *(_QWORD *)(v1 + 2048) = v36;
      *(_QWORD *)(v1 + 2056) = v37;
      *(_QWORD *)(v1 + 2064) = v43;
      *(_QWORD *)(v1 + 2072) = v39;
      *(_QWORD *)(v1 + 2080) = v40;
      *(_QWORD *)(v1 + 2088) = v38;
      *(_BYTE *)(v1 + 2096) = v35;
      v46 = *(_QWORD *)(v1 + 176);
      v49 = type metadata accessor for TypedVectorizedProperties(0, v46, v47, v48);
      v50 = *(_QWORD *)(v49 - 8);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v50 + 16))(v1 + 1272, v1 + 1992, v49);
      sub_2142536C0((const void *)(v1 + 1272), v46, v51, v52, (uint64_t *)(v1 + 384));
      swift_beginAccess();
      sub_2141FA160(v1 + 384, v45 + *(int *)(*(_QWORD *)(v1 + 264) + 108), &qword_254D69D18);
      swift_endAccess();
      (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v1 + 1992, v49);
      goto LABEL_6;
    }
  }
  else
  {
    *(_QWORD *)(v1 + 1280) = 0;
    *(_QWORD *)(v1 + 1272) = 0;
    *(_QWORD *)(v1 + 1288) = 0;
    *(_QWORD *)(v1 + 1296) = 2;
    bzero((void *)(v1 + 1304), 0x2A9uLL);
  }
  type metadata accessor for TypedVectorizedProperties(255, v25, v31, v32);
  v53 = sub_214425388();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 8))(v1 + 1272, v53);
  *(_QWORD *)(v1 + 2720) = 0;
  *(_QWORD *)(v1 + 2728) = 0;
  *(_QWORD *)(v1 + 2736) = 0;
  *(_QWORD *)(v1 + 2744) = 1;
  *(_QWORD *)(v1 + 2760) = 0;
  *(_QWORD *)(v1 + 2752) = 0;
  *(_BYTE *)(v1 + 2768) = 0;
  v54 = *(_QWORD *)(v1 + 224);
  v55 = *(_QWORD *)(v1 + 232);
  *(_QWORD *)(v1 + 2776) = v54;
  *(_QWORD *)(v1 + 2784) = v55;
  v56 = *(_QWORD *)(v1 + 200);
  *(_QWORD *)(v1 + 2792) = v56;
  v58 = *(_QWORD *)(v1 + 240);
  v57 = *(_QWORD *)(v1 + 248);
  *(_QWORD *)(v1 + 2800) = v58;
  *(_QWORD *)(v1 + 2808) = v57;
  v59 = *(_QWORD *)(v1 + 216);
  *(_QWORD *)(v1 + 2816) = v59;
  v60 = *(_DWORD *)(v1 + 212);
  *(_BYTE *)(v1 + 2824) = v60;
  *(_QWORD *)(v1 + 2832) = 0;
  *(_QWORD *)(v1 + 2840) = 0;
  *(_QWORD *)(v1 + 2848) = 0;
  *(_QWORD *)(v1 + 2856) = 1;
  *(_OWORD *)(v1 + 2864) = 0u;
  *(_OWORD *)(v1 + 2880) = 0u;
  *(_OWORD *)(v1 + 2889) = 0u;
  *(_QWORD *)(v1 + 304) = 0;
  *(_QWORD *)(v1 + 312) = 0;
  *(_QWORD *)(v1 + 320) = 0;
  *(_QWORD *)(v1 + 328) = 1;
  *(_OWORD *)(v1 + 336) = 0u;
  *(_OWORD *)(v1 + 352) = 0u;
  *(_OWORD *)(v1 + 361) = 0u;
  *(_OWORD *)(v1 + 2912) = 0u;
  *(_OWORD *)(v1 + 2928) = 0u;
  *(_OWORD *)(v1 + 2944) = 0u;
  *(_BYTE *)(v1 + 2960) = -4;
  sub_21427384C(v1 + 1112);
  type metadata accessor for TypedVectorizedProperties.Position(255, v25, v61, v62);
  v63 = sub_214425388();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v63 - 8) + 32))(v1 + 2976, v1 + 1112, v63);
  *(_QWORD *)(v1 + 3112) = 0;
  *(_QWORD *)(v1 + 3120) = 0;
  *(_QWORD *)(v1 + 3128) = 0;
  *(_QWORD *)(v1 + 3136) = 1;
  *(_QWORD *)(v1 + 3152) = 0;
  *(_QWORD *)(v1 + 3144) = 0;
  *(_BYTE *)(v1 + 3160) = 0;
  *(_QWORD *)(v6 - 224) = 0;
  *(_QWORD *)(v6 - 216) = 0;
  *(_QWORD *)(v6 - 208) = 0;
  *(_QWORD *)(v6 - 200) = 1;
  *(_QWORD *)(v6 - 192) = 0;
  *(_QWORD *)(v6 - 184) = 0;
  *(_BYTE *)(v6 - 176) = 0;
  *(_QWORD *)(v6 - 168) = 0;
  *(_QWORD *)(v6 - 160) = 0;
  *(_QWORD *)(v6 - 152) = 0;
  *(_QWORD *)(v6 - 144) = 1;
  *(_OWORD *)(v1 + 3256) = 0u;
  *(_OWORD *)(v1 + 3272) = 0u;
  *(_BYTE *)(v6 - 104) = 0;
  sub_214253428(v1 + 2720, v1 + 2776, v1 + 2832, v1 + 304, v1 + 2912, v1 + 2976, v1 + 3112, v6 - 224, v1 + 384, v6 - 168, v6 - 168, v25);
  sub_2142536C0((const void *)(v1 + 384), v25, v64, v65, (uint64_t *)(v1 + 304));
  v66 = *(_QWORD *)(v1 + 192);
  swift_beginAccess();
  v67 = v66 + *(int *)(*(_QWORD *)(v1 + 264) + 108);
  sub_2141EF2B4(v54, v55, v56, v58);
  sub_21427460C(v57, v59, v60);
  sub_2141FA160(v1 + 304, v67, &qword_254D69D18);
  swift_endAccess();
LABEL_6:
  v68 = *(_QWORD *)(v1 + 112);
  v69 = *(_QWORD *)(v1 + 120);
  v70 = *(_QWORD *)(v1 + 128);
  v71 = *(_QWORD *)(v1 + 136);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v69 + 16))(v70, v68 + *(int *)(*(_QWORD *)(v1 + 104) + 44), v71);
  if (swift_getEnumCaseMultiPayload())
  {
    *(_BYTE *)(v1 + 1992) = *(_DWORD *)(v1 + 148);
    *(_QWORD *)(v1 + 2000) = *(_QWORD *)(v1 + 280);
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(*(_QWORD *)(v1 + 152) + 8) + 40))(*(_QWORD *)(v1 + 256), v1 + 1992);
    swift_release();
    sub_21422F7F0(*(_QWORD *)(v1 + 224), *(_QWORD *)(v1 + 232), *(_QWORD *)(v1 + 200), *(_QWORD *)(v1 + 240));
    sub_2142745F0(*(_QWORD *)(v1 + 248), *(_QWORD *)(v1 + 216), *(_DWORD *)(v1 + 212));
    return (*(uint64_t (**)(uint64_t, uint64_t))(v69 + 8))(v70, v71);
  }
  else
  {
    v73 = *(_QWORD *)(v1 + 88);
    v74 = *(_QWORD *)(v1 + 96);
    (*(void (**)(uint64_t, uint64_t, _QWORD))(v74 + 32))(v73, v70, *(_QWORD *)(v1 + 272));
    v75 = *(_QWORD *)(v1 + 192);
    sub_2141E070C(v75, v1 + 1272, &qword_253F14460);
    v76 = (uint64_t *)(v75 + *(int *)(*(_QWORD *)(v1 + 264) + 72));
    v77 = *v76;
    v78 = v76[1];
    *(_QWORD *)(v1 + 176) = v76[2];
    v79 = v76[3];
    *(_QWORD *)(v1 + 128) = v76[4];
    *(_QWORD *)(v1 + 136) = v79;
    *(_QWORD *)(v1 + 120) = v76[5];
    *(_QWORD *)(v1 + 104) = v76[6];
    v80 = v76[7];
    v81 = v76[8];
    *(_QWORD *)(v1 + 56) = v77;
    *(_QWORD *)(v1 + 64) = v80;
    *(_QWORD *)(v1 + 40) = v78;
    *(_QWORD *)(v1 + 48) = v81;
    v83 = *(_QWORD *)v68;
    v82 = *(_QWORD *)(v68 + 8);
    v84 = *(_BYTE *)(v68 + 16);
    v85 = *(_QWORD *)(v68 + 24);
    v86 = *(_QWORD *)(v1 + 72);
    v87 = v73;
    v88 = *(_QWORD *)(v1 + 272);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v74 + 16))(v86, v87, v88);
    v89 = *(_QWORD *)(v1 + 184);
    sub_21437293C(v83, v82, v84, v85, v86, v88, v89, *(_QWORD *)(v1 + 80));
    sub_2141EF260(*(_QWORD *)(v1 + 56), v78, *(_QWORD *)(v1 + 176), *(_QWORD *)(v1 + 136), *(_QWORD *)(v1 + 128), *(_QWORD *)(v1 + 120), *(_QWORD *)(v1 + 104));
    sub_2141DD130(v83, v82, v84);
    swift_bridgeObjectRetain();
    sub_2143D046C(*(_QWORD *)(v1 + 80), v88, v89, v1 + 1992);
    *(_QWORD *)(v1 + 184) = *(_QWORD *)(v1 + 1992);
    *(_QWORD *)(v1 + 112) = *(_QWORD *)(v1 + 2000);
    *(_QWORD *)(v1 + 80) = *(unsigned __int8 *)(v1 + 2008);
    *(_QWORD *)(v1 + 72) = *(_QWORD *)(v1 + 2016);
    v90 = *(_QWORD *)(v1 + 2024);
    v91 = *(_QWORD *)(v1 + 2032);
    v92 = *(unsigned __int8 *)(v1 + 2040);
    v93 = sub_21421B624(v90, v91, *(_BYTE *)(v1 + 2040), 4);
    *(_QWORD *)(v1 + 416) = MEMORY[0x24BDEBF68];
    *(_QWORD *)(v1 + 408) = MEMORY[0x24BDEBF80];
    *(_QWORD *)(v1 + 384) = v93;
    *(_BYTE *)(v1 + 424) = 1;
    v94 = *(_QWORD *)(v1 + 192);
    swift_beginAccess();
    sub_2141FA160(v1 + 384, v94, &qword_253F14460);
    v95 = *(_OWORD *)(v1 + 2008);
    *(_OWORD *)(v1 + 384) = *(_OWORD *)(v1 + 1992);
    *(_OWORD *)(v1 + 400) = v95;
    sub_21421CC0C(v1 + 384, v1 + 304);
    *(_QWORD *)(v1 + 2712) = *(_QWORD *)(v1 + 408);
    v96 = (_QWORD *)(v94 + *(int *)(*(_QWORD *)(v1 + 264) + 72));
    v97 = *v96;
    v98 = v96[2];
    *(_QWORD *)(v1 + 24) = v96[1];
    *(_QWORD *)(v1 + 32) = v97;
    v99 = v96[3];
    v100 = v96[4];
    v101 = v96[5];
    *(_QWORD *)(v1 + 8) = v96[6];
    *(_QWORD *)(v1 + 16) = v101;
    *(_QWORD *)v1 = v96[7];
    v102 = *(_QWORD *)(v1 + 112);
    *v96 = *(_QWORD *)(v1 + 184);
    v96[1] = v102;
    v103 = *(_QWORD *)(v1 + 72);
    v96[2] = *(_QWORD *)(v1 + 80);
    v96[3] = v103;
    v96[4] = v90;
    v96[5] = v91;
    v96[6] = v92;
    *(_OWORD *)(v96 + 7) = *(_OWORD *)(v1 + 2048);
    swift_endAccess();
    sub_21421CE7C(v1 + 304);
    sub_2141F92E8(v1 + 2712);
    sub_2141DD140(v90, v91, v92);
    sub_21421C6D4(*(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 24), v98, v99, v100, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 8));
    *(_BYTE *)(v1 + 1112) = *(_DWORD *)(v1 + 148);
    *(_QWORD *)(v1 + 1120) = *(_QWORD *)(v1 + 280);
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(*(_QWORD *)(v1 + 152) + 8) + 40))(*(_QWORD *)(v1 + 256), v1 + 1112);
    sub_21421CC48(v1 + 304);
    sub_2141F9244(v1 + 2712);
    sub_2141EF1B0(v90, v91, v92);
    sub_21422F7F0(*(_QWORD *)(v1 + 224), *(_QWORD *)(v1 + 232), *(_QWORD *)(v1 + 200), *(_QWORD *)(v1 + 240));
    sub_2142745F0(*(_QWORD *)(v1 + 248), *(_QWORD *)(v1 + 216), *(_DWORD *)(v1 + 212));
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v1 + 96) + 8))(*(_QWORD *)(v1 + 88), *(_QWORD *)(v1 + 272));
    *(_QWORD *)(v1 + 272) = *(_QWORD *)(v1 + 288);
    swift_beginAccess();
    sub_2141FA160(v1 + 1272, v94, &qword_253F14460);
    v104 = (uint64_t *)(v94 + *(int *)(*(_QWORD *)(v1 + 264) + 72));
    v105 = *v104;
    v106 = v104[1];
    v107 = v104[2];
    v108 = v104[3];
    v109 = v104[4];
    v110 = v104[5];
    v111 = v104[6];
    v112 = *(_QWORD *)(v1 + 40);
    *v104 = *(_QWORD *)(v1 + 56);
    v104[1] = v112;
    v113 = *(_QWORD *)(v1 + 136);
    v104[2] = *(_QWORD *)(v1 + 176);
    v104[3] = v113;
    v114 = *(_QWORD *)(v1 + 120);
    v104[4] = *(_QWORD *)(v1 + 128);
    v104[5] = v114;
    v115 = *(_QWORD *)(v1 + 64);
    v104[6] = *(_QWORD *)(v1 + 104);
    v104[7] = v115;
    v104[8] = *(_QWORD *)(v1 + 48);
    swift_endAccess();
    sub_21421C6D4(v105, v106, v107, v108, v109, v110, v111);
    result = swift_release();
    **(_QWORD **)(v1 + 168) = *(_QWORD *)(v1 + 272);
  }
  return result;
}

uint64_t sub_214366670(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  return sub_21436746C(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_214365510);
}

uint64_t sub_21436667C(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  return sub_214367490(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_214365B4C);
}

void sub_214366688(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;

  v7 = type metadata accessor for PlottableProjection(0, a4, a5, a7);
  MEMORY[0x24BDAC7A8](v7);
  type metadata accessor for ModifiedChartContent_Symbols_Plottable();
}

uint64_t sub_21436671C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;

  v12 = v3 + *(int *)(a1 + 60);
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16);
  *(_OWORD *)(v11 - 192) = *v7;
  v13(v9, v12, v8);
  sub_214372AC8(v9, v6, v5, v4, (uint64_t *)(v11 - 144));
  v14 = *(_QWORD *)(v11 - 192);
  swift_beginAccess();
  sub_2141FA160(v11 - 144, v14 + 1000, &qword_254D69D00);
  swift_endAccess();
  *(_OWORD *)(v11 - 144) = *(_OWORD *)(v11 - 192);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v1 + 32))(v3, v11 - 144, v2, v1);
}

void sub_2143667CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;

  v7 = type metadata accessor for PlottableProjection(0, a4, a5, a7);
  MEMORY[0x24BDAC7A8](v7);
  type metadata accessor for ModifiedChartContent_Symbols_Plottable();
}

uint64_t sub_21436688C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v9 = *(int *)(a1 + 60);
  *(_QWORD *)(v1 + 32) = v4;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v2, v4 + v9, v6);
  v10 = v7 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_symbolScale;
  swift_beginAccess();
  sub_2141E070C(v10, v1 + 1720, &qword_253F149F0);
  if (qword_253F10448 != -1)
    swift_once();
  sub_2141F9E40((uint64_t)&unk_253F1C8C8, v1 + 1000);
  sub_214252198(v2, v1 + 1720, v1 + 1000, v3, (uint64_t)&type metadata for AnyChartSymbolShape, (uint64_t *)(v1 + 2464));
  v11 = v7 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_environment;
  swift_beginAccess();
  v12 = type metadata accessor for ChartContentRenderContext.Environment(0);
  v13 = v11 + *(int *)(v12 + 108);
  if (!*(_QWORD *)(v13 + 24))
  {
    *(_QWORD *)(v1 + 1008) = 0;
    *(_QWORD *)(v1 + 1000) = 0;
    *(_QWORD *)(v1 + 1016) = 0;
    *(_QWORD *)(v1 + 1024) = 2;
    bzero((void *)(v1 + 1032), 0x2A9uLL);
    goto LABEL_7;
  }
  sub_21427362C(v13, v1 + 120);
  sub_214253714(v3, (_QWORD *)(v1 + 1000));
  sub_21420D92C(v1 + 120);
  if (*(_QWORD *)(v1 + 1024) == 2)
  {
LABEL_7:
    type metadata accessor for TypedVectorizedProperties(255, v3, v14, v15);
    v25 = sub_214425388();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 8))(v1 + 1000, v25);
    *(_QWORD *)(v1 + 2544) = 0;
    *(_QWORD *)(v1 + 2552) = 0;
    *(_QWORD *)(v1 + 2560) = 0;
    *(_QWORD *)(v1 + 2568) = 1;
    *(_QWORD *)(v1 + 2584) = 0;
    *(_QWORD *)(v1 + 2576) = 0;
    *(_BYTE *)(v1 + 2592) = 0;
    *(_QWORD *)(v1 + 2600) = 0;
    *(_QWORD *)(v1 + 2608) = 0;
    *(_QWORD *)(v1 + 2616) = 0;
    *(_QWORD *)(v1 + 2624) = 1;
    *(_QWORD *)(v1 + 2640) = 0;
    *(_QWORD *)(v1 + 2632) = 0;
    *(_BYTE *)(v1 + 2648) = 0;
    *(_QWORD *)(v1 + 2656) = 0;
    *(_QWORD *)(v1 + 2664) = 0;
    *(_QWORD *)(v1 + 2672) = 0;
    *(_QWORD *)(v1 + 2680) = 1;
    *(_OWORD *)(v1 + 2688) = 0u;
    *(_OWORD *)(v1 + 2704) = 0u;
    *(_OWORD *)(v1 + 2713) = 0u;
    v27 = type metadata accessor for VisualMapper(0, v3, (uint64_t)&type metadata for AnyChartSymbolShape, v26);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v1 + 40, v1 + 2464, v27);
    *(_OWORD *)(v1 + 2736) = 0u;
    *(_OWORD *)(v1 + 2752) = 0u;
    *(_OWORD *)(v1 + 2768) = 0u;
    *(_BYTE *)(v1 + 2784) = -4;
    sub_21427384C(v1 + 840);
    type metadata accessor for TypedVectorizedProperties.Position(255, v3, v28, v29);
    v30 = sub_214425388();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 32))(v1 + 2800, v1 + 840, v30);
    *(_QWORD *)(v1 + 2936) = 0;
    *(_QWORD *)(v1 + 2944) = 0;
    *(_QWORD *)(v1 + 2952) = 0;
    *(_QWORD *)(v1 + 2960) = 1;
    *(_QWORD *)(v1 + 2976) = 0;
    *(_QWORD *)(v1 + 2968) = 0;
    *(_BYTE *)(v1 + 2984) = 0;
    *(_QWORD *)(v8 - 224) = 0;
    *(_QWORD *)(v8 - 216) = 0;
    *(_QWORD *)(v8 - 208) = 0;
    *(_QWORD *)(v8 - 200) = 1;
    *(_QWORD *)(v8 - 192) = 0;
    *(_QWORD *)(v8 - 184) = 0;
    *(_BYTE *)(v8 - 176) = 0;
    *(_QWORD *)(v8 - 168) = 0;
    *(_QWORD *)(v8 - 160) = 0;
    *(_QWORD *)(v8 - 152) = 0;
    *(_QWORD *)(v8 - 144) = 1;
    *(_OWORD *)(v8 - 136) = 0u;
    *(_OWORD *)(v8 - 120) = 0u;
    *(_BYTE *)(v8 - 104) = 0;
    sub_214253428(v1 + 2544, v1 + 2600, v1 + 2656, v1 + 40, v1 + 2736, v1 + 2800, v1 + 2936, v8 - 224, v1 + 120, v8 - 168, v8 - 168, v3);
    sub_2142536C0((const void *)(v1 + 120), v3, v31, v32, (uint64_t *)(v1 + 40));
    swift_beginAccess();
    sub_2141FA160(v1 + 40, v11 + *(int *)(v12 + 108), &qword_254D69D18);
    swift_endAccess();
    goto LABEL_8;
  }
  memcpy((void *)(v1 + 1720), (const void *)(v1 + 1000), 0x2C9uLL);
  v17 = type metadata accessor for VisualMapper(255, v3, (uint64_t)&type metadata for AnyChartSymbolShape, v16);
  v18 = sub_214425388();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v1 + 1912, v18);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v1 + 1912, v1 + 2464, v17);
  v21 = type metadata accessor for TypedVectorizedProperties(0, v3, v19, v20);
  v22 = *(_QWORD *)(v21 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 16))(v1 + 1000, v1 + 1720, v21);
  sub_2142536C0((const void *)(v1 + 1000), v3, v23, v24, (uint64_t *)(v1 + 120));
  swift_beginAccess();
  sub_2141FA160(v1 + 120, v11 + *(int *)(v12 + 108), &qword_254D69D18);
  swift_endAccess();
  (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v1 + 1720, v21);
LABEL_8:
  *(_BYTE *)(v1 + 1720) = *(_DWORD *)(v1 + 4);
  *(_QWORD *)(v1 + 1728) = v7;
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v1 + 24) + 40))(*(_QWORD *)(v1 + 32), v1 + 1720);
  v34 = type metadata accessor for VisualMapper(0, v3, (uint64_t)&type metadata for AnyChartSymbolShape, v33);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 8))(v1 + 2464, v34);
}

uint64_t sub_214366CEC(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  return sub_21436746C(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_214366688);
}

uint64_t sub_214366CF8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  return sub_214367490(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2143667CC);
}

void sub_214366D04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;

  v7 = type metadata accessor for PlottableProjection(0, a4, a5, a7);
  MEMORY[0x24BDAC7A8](v7);
  type metadata accessor for ModifiedChartContent_SymbolSizes_Plottable();
}

uint64_t sub_214366D98(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;

  v12 = v3 + *(int *)(a1 + 60);
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16);
  *(_OWORD *)(v11 - 192) = *v7;
  v13(v9, v12, v8);
  sub_214372AC8(v9, v6, v5, v4, (uint64_t *)(v11 - 144));
  v14 = *(_QWORD *)(v11 - 192);
  swift_beginAccess();
  sub_2141FA160(v11 - 144, v14 + 1056, &qword_254D69D00);
  swift_endAccess();
  *(_OWORD *)(v11 - 144) = *(_OWORD *)(v11 - 192);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v1 + 32))(v3, v11 - 144, v2, v1);
}

void sub_214366E48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;

  v7 = type metadata accessor for PlottableProjection(0, a4, a5, a7);
  MEMORY[0x24BDAC7A8](v7);
  type metadata accessor for ModifiedChartContent_SymbolSizes_Plottable();
}

uint64_t sub_214366F0C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v9 = *(int *)(a1 + 60);
  *(_QWORD *)(v1 + 96) = v7;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v2, v7 + v9, v4);
  v10 = OBJC_IVAR____TtC6Charts25ChartContentRenderContext_symbolSizeScale;
  *(_QWORD *)(v1 + 136) = v3;
  v11 = v3 + v10;
  v12 = *(_QWORD *)v11;
  v13 = *(_QWORD *)(v11 + 8);
  v14 = *(_QWORD *)(v11 + 16);
  v15 = *(_QWORD *)(v11 + 24);
  v16 = *(_QWORD *)(v11 + 32);
  v17 = *(_QWORD *)(v11 + 40);
  v18 = *(_QWORD *)(v11 + 48);
  v19 = *(_QWORD *)(v11 + 56);
  v20 = *(_QWORD *)(v11 + 64);
  v21 = *(_QWORD *)(v11 + 72);
  v22 = *(_QWORD *)(v11 + 80);
  v23 = *(_QWORD *)(v11 + 88);
  v24 = *(_QWORD *)(v11 + 96);
  LOBYTE(v11) = *(_BYTE *)(v11 + 104);
  *(_QWORD *)(v1 + 1840) = v12;
  *(_QWORD *)(v1 + 1848) = v13;
  *(_QWORD *)(v1 + 1856) = v14;
  *(_QWORD *)(v1 + 1864) = v15;
  *(_QWORD *)(v1 + 1872) = v16;
  *(_QWORD *)(v1 + 1880) = v17;
  *(_QWORD *)(v1 + 1888) = v18;
  *(_QWORD *)(v1 + 1896) = v19;
  *(_QWORD *)(v1 + 1904) = v20;
  *(_QWORD *)(v1 + 1912) = v21;
  *(_QWORD *)(v1 + 1920) = v22;
  *(_QWORD *)(v1 + 1928) = v23;
  *(_QWORD *)(v1 + 1936) = v24;
  *(_BYTE *)(v1 + 1944) = v11;
  sub_21421C7C0(v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v11);
  if (qword_253F10D28 != -1)
    swift_once();
  *(_QWORD *)(v1 + 240) = qword_253F1C948;
  sub_214252198(v2, v1 + 1840, v1 + 240, v5, MEMORY[0x24BEE50B0], (uint64_t *)(v1 + 1120));
  *(_QWORD *)(v1 + 144) = *(_QWORD *)(v1 + 1120);
  v25 = *(_QWORD *)(v1 + 1128);
  *(_QWORD *)(v1 + 72) = *(_QWORD *)(v1 + 1136);
  v26 = *(_QWORD *)(v1 + 1144);
  v27 = *(_QWORD *)(v1 + 1152);
  *(_QWORD *)(v1 + 120) = *(_QWORD *)(v1 + 1160);
  *(_QWORD *)(v1 + 128) = v27;
  *(_DWORD *)(v1 + 156) = *(unsigned __int8 *)(v1 + 1168);
  v28 = *(_QWORD *)(v1 + 136) + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_environment;
  swift_beginAccess();
  v29 = type metadata accessor for ChartContentRenderContext.Environment(0);
  *(_QWORD *)(v1 + 64) = v29;
  v30 = v28 + *(int *)(v29 + 108);
  if (!*(_QWORD *)(v30 + 24))
  {
    *(_QWORD *)(v1 + 1128) = 0;
    *(_QWORD *)(v1 + 1120) = 0;
    *(_QWORD *)(v1 + 1136) = 0;
    *(_QWORD *)(v1 + 1144) = 2;
    bzero((void *)(v1 + 1152), 0x2A9uLL);
    goto LABEL_7;
  }
  sub_21427362C(v30, v1 + 240);
  sub_214253714(v5, (_QWORD *)(v1 + 1120));
  sub_21420D92C(v1 + 240);
  if (*(_QWORD *)(v1 + 1144) == 2)
  {
LABEL_7:
    type metadata accessor for TypedVectorizedProperties(255, v5, v31, v32);
    v47 = sub_214425388();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 8))(v1 + 1120, v47);
    *(_QWORD *)(v1 + 2560) = 0;
    *(_QWORD *)(v1 + 2568) = 0;
    *(_QWORD *)(v1 + 2576) = 0;
    *(_QWORD *)(v1 + 2584) = 1;
    *(_QWORD *)(v1 + 2600) = 0;
    *(_QWORD *)(v1 + 2592) = 0;
    *(_BYTE *)(v1 + 2608) = 0;
    *(_QWORD *)(v1 + 2616) = 0;
    *(_QWORD *)(v1 + 2624) = 0;
    *(_QWORD *)(v1 + 2632) = 0;
    *(_QWORD *)(v1 + 2640) = 1;
    *(_QWORD *)(v1 + 2656) = 0;
    *(_QWORD *)(v1 + 2648) = 0;
    *(_BYTE *)(v1 + 2664) = 0;
    *(_QWORD *)(v1 + 2672) = 0;
    *(_QWORD *)(v1 + 2680) = 0;
    *(_QWORD *)(v1 + 2688) = 0;
    *(_QWORD *)(v1 + 2696) = 1;
    *(_OWORD *)(v1 + 2704) = 0u;
    *(_OWORD *)(v1 + 2720) = 0u;
    *(_OWORD *)(v1 + 2729) = 0u;
    *(_QWORD *)(v1 + 160) = 0;
    *(_QWORD *)(v1 + 168) = 0;
    *(_QWORD *)(v1 + 176) = 0;
    *(_QWORD *)(v1 + 184) = 1;
    *(_OWORD *)(v1 + 192) = 0u;
    *(_OWORD *)(v1 + 208) = 0u;
    *(_OWORD *)(v1 + 217) = 0u;
    v48 = *(_QWORD *)(v1 + 144);
    *(_QWORD *)(v1 + 2752) = v48;
    *(_QWORD *)(v1 + 2760) = v25;
    v49 = *(_QWORD *)(v1 + 72);
    *(_QWORD *)(v1 + 2768) = v49;
    *(_QWORD *)(v1 + 2776) = v26;
    v51 = *(_QWORD *)(v1 + 120);
    v50 = *(_QWORD *)(v1 + 128);
    *(_QWORD *)(v1 + 2784) = v50;
    *(_QWORD *)(v1 + 2792) = v51;
    *(_BYTE *)(v1 + 2800) = *(_DWORD *)(v1 + 156);
    sub_21427384C(v1 + 960);
    type metadata accessor for TypedVectorizedProperties.Position(255, v5, v52, v53);
    v54 = sub_214425388();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 32))(v1 + 2808, v1 + 960, v54);
    *(_QWORD *)(v1 + 2944) = 0;
    *(_QWORD *)(v1 + 2952) = 0;
    *(_QWORD *)(v1 + 2960) = 0;
    *(_QWORD *)(v1 + 2968) = 1;
    *(_QWORD *)(v1 + 2984) = 0;
    *(_QWORD *)(v1 + 2976) = 0;
    *(_BYTE *)(v1 + 2992) = 0;
    *(_QWORD *)(v8 - 216) = 0;
    *(_QWORD *)(v8 - 208) = 0;
    *(_QWORD *)(v8 - 200) = 0;
    *(_QWORD *)(v8 - 192) = 1;
    *(_QWORD *)(v8 - 184) = 0;
    *(_QWORD *)(v8 - 176) = 0;
    *(_BYTE *)(v8 - 168) = 0;
    *(_QWORD *)(v8 - 160) = 0;
    *(_QWORD *)(v8 - 152) = 0;
    *(_QWORD *)(v8 - 144) = 0;
    *(_QWORD *)(v8 - 136) = 1;
    *(_OWORD *)(v8 - 128) = 0u;
    *(_OWORD *)(v8 - 112) = 0u;
    *(_BYTE *)(v8 - 96) = 0;
    sub_214253428(v1 + 2560, v1 + 2616, v1 + 2672, v1 + 160, v1 + 2752, v1 + 2808, v1 + 2944, v8 - 216, v1 + 240, v8 - 160, v8 - 160, v5);
    v55 = v5;
    LOBYTE(v5) = v49;
    v39 = v26;
    sub_2142536C0((const void *)(v1 + 240), v55, v56, v57, (uint64_t *)(v1 + 160));
    swift_beginAccess();
    v58 = v28 + *(int *)(*(_QWORD *)(v1 + 64) + 108);
    sub_2141EF2B4(v48, v25, v5, v26);
    sub_214274628(v50, v51, *(_DWORD *)(v1 + 156));
    sub_2141FA160(v1 + 160, v58, &qword_254D69D18);
    swift_endAccess();
    goto LABEL_8;
  }
  memcpy((void *)(v1 + 1840), (const void *)(v1 + 1120), 0x2C9uLL);
  v33 = *(_QWORD *)(v1 + 2112);
  v35 = *(_QWORD *)(v1 + 120);
  v34 = *(_QWORD *)(v1 + 128);
  v36 = *(_QWORD *)(v1 + 2120);
  v37 = *(_DWORD *)(v1 + 156);
  *(_QWORD *)(v1 + 40) = *(_QWORD *)(v1 + 2128);
  *(_QWORD *)(v1 + 48) = v36;
  v38 = *(_QWORD *)(v1 + 2136);
  *(_QWORD *)(v1 + 24) = *(_QWORD *)(v1 + 2144);
  *(_QWORD *)(v1 + 32) = v38;
  *(_QWORD *)(v1 + 16) = *(_QWORD *)(v1 + 2152);
  *(_QWORD *)(v1 + 56) = v5;
  *(_DWORD *)(v1 + 12) = *(unsigned __int8 *)(v1 + 2160);
  v5 = *(_QWORD *)(v1 + 72);
  sub_2141EF2B4(*(_QWORD *)(v1 + 144), v25, v5, v26);
  sub_214274628(v34, v35, v37);
  v39 = v26;
  sub_2143683A4(v33, *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 16), *(unsigned int *)(v1 + 12));
  *(_QWORD *)(v1 + 2112) = *(_QWORD *)(v1 + 144);
  *(_QWORD *)(v1 + 2120) = v25;
  *(_QWORD *)(v1 + 2128) = v5;
  *(_QWORD *)(v1 + 2136) = v26;
  *(_QWORD *)(v1 + 2144) = v34;
  *(_QWORD *)(v1 + 2152) = v35;
  *(_BYTE *)(v1 + 2160) = v37;
  v40 = *(_QWORD *)(v1 + 56);
  v43 = type metadata accessor for TypedVectorizedProperties(0, v40, v41, v42);
  v44 = *(_QWORD *)(v43 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v44 + 16))(v1 + 1120, v1 + 1840, v43);
  sub_2142536C0((const void *)(v1 + 1120), v40, v45, v46, (uint64_t *)(v1 + 240));
  swift_beginAccess();
  sub_2141FA160(v1 + 240, v28 + *(int *)(*(_QWORD *)(v1 + 64) + 108), &qword_254D69D18);
  swift_endAccess();
  (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v1 + 1840, v43);
LABEL_8:
  v59 = *(_QWORD *)(v1 + 96);
  *(_BYTE *)(v1 + 1840) = *(_DWORD *)(v1 + 84);
  *(_QWORD *)(v1 + 1848) = *(_QWORD *)(v1 + 136);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 + 112) + 40))(v59, v1 + 1840);
  sub_21422F7F0(*(_QWORD *)(v1 + 144), v25, v5, v39);
  return sub_214274588(*(_QWORD *)(v1 + 128), *(_QWORD *)(v1 + 120), *(_DWORD *)(v1 + 156));
}

uint64_t sub_214367460(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  return sub_21436746C(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_214366D04);
}

uint64_t sub_21436746C(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  return a5(a1, a2, a3[2], a3[3], a3[4], a3[5], a3[6]);
}

uint64_t sub_214367484(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  return sub_214367490(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_214366E48);
}

uint64_t sub_214367490(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  return a5(a1, a2, a3[2], a3[3], a3[4], a3[5], a3[6]);
}

uint64_t sub_2143674A8(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(_QWORD *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48[4];
  __int128 v49;
  _BYTE v50[25];
  uint64_t v51[90];
  _BYTE v52[136];
  _QWORD __src[90];
  _QWORD __dst[90];
  _QWORD v55[6];
  char v56;
  _QWORD v57[6];
  char v58;
  _QWORD v59[4];
  __int128 v60;
  _BYTE v61[25];
  _OWORD v62[3];
  char v63;
  _BYTE v64[136];
  _QWORD v65[6];
  char v66;
  _QWORD v67[6];
  char v68;
  _QWORD v69[4];
  __int128 v70;
  __int128 v71;
  char v72;

  v45 = *a2;
  v7 = *((_QWORD *)a2 + 1);
  v8 = type metadata accessor for ModifiedChartContent_Opacities_KeyPath(0, a3, a4, a5);
  v47 = a1;
  sub_214252010(0, 0, 0, 0, *(uint64_t **)(a1 + *(int *)(v8 + 44)), __dst);
  v9 = __dst[0];
  v10 = __dst[1];
  v11 = __dst[2];
  v12 = __dst[3];
  v13 = __dst[4];
  v14 = __dst[5];
  v15 = __dst[6];
  v46 = v7;
  v16 = v7 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_environment;
  swift_beginAccess();
  v43 = type metadata accessor for ChartContentRenderContext.Environment(0);
  v17 = v16 + *(int *)(v43 + 108);
  if (!*(_QWORD *)(v17 + 24))
  {
    memset(__src, 0, 24);
    __src[3] = 2;
    bzero(&__src[4], 0x2A9uLL);
    swift_retain();
    goto LABEL_5;
  }
  sub_21427362C(v17, (uint64_t)v51);
  swift_retain();
  sub_214253714(a4, __src);
  sub_21420D92C((uint64_t)v51);
  if (__src[3] == 2)
  {
LABEL_5:
    type metadata accessor for TypedVectorizedProperties(255, a4, v18, v19);
    v29 = sub_214425388();
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v29 - 8) + 8))(__src, v29);
    v55[0] = v9;
    v55[1] = v10;
    v55[2] = v11;
    v55[3] = v12;
    v55[4] = v13;
    v55[5] = v14;
    v56 = v15;
    memset(v57, 0, 24);
    v57[3] = 1;
    v57[5] = 0;
    v57[4] = 0;
    v58 = 0;
    memset(v59, 0, 24);
    v59[3] = 1;
    v60 = 0u;
    memset(v61, 0, sizeof(v61));
    memset(v48, 0, 24);
    v48[3] = 1;
    v49 = 0u;
    memset(v50, 0, sizeof(v50));
    memset(v62, 0, sizeof(v62));
    v63 = -4;
    sub_21427384C((uint64_t)v52);
    type metadata accessor for TypedVectorizedProperties.Position(255, a4, v30, v31);
    v32 = sub_214425388();
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v32 - 8) + 32))(v64, v52, v32);
    memset(v65, 0, 24);
    v65[3] = 1;
    v65[5] = 0;
    v65[4] = 0;
    v66 = 0;
    memset(v67, 0, 24);
    v67[3] = 1;
    v67[4] = 0;
    v67[5] = 0;
    v68 = 0;
    memset(v69, 0, 24);
    v69[3] = 1;
    v70 = 0u;
    v71 = 0u;
    v72 = 0;
    sub_214253428((uint64_t)v55, (uint64_t)v57, (uint64_t)v59, (uint64_t)v48, (uint64_t)v62, (uint64_t)v64, (uint64_t)v65, (uint64_t)v67, (uint64_t)v51, (uint64_t)v69, (uint64_t)v69, a4);
    sub_2142536C0(v51, a4, v33, v34, v48);
    swift_beginAccess();
    v35 = v16 + *(int *)(v43 + 108);
    sub_2141EF2B4(v9, v10, v11, v12);
    sub_214274628(v13, v14, v15);
    sub_2141FA160((uint64_t)v48, v35, &qword_254D69D18);
    swift_endAccess();
    goto LABEL_6;
  }
  memcpy(__dst, __src, 0x2C9uLL);
  v20 = __dst[0];
  v40 = __dst[2];
  v41 = __dst[1];
  v42 = v13;
  v21 = __dst[4];
  v37 = __dst[5];
  v38 = __dst[3];
  v39 = __dst[6];
  sub_2141EF2B4(v9, v10, v11, v12);
  sub_214274628(v42, v14, v15);
  sub_214274540(v20, v41, v40, v38, v21, v37, v39);
  __dst[0] = v9;
  __dst[1] = v10;
  __dst[2] = v11;
  __dst[3] = v12;
  __dst[4] = v42;
  __dst[5] = v14;
  LOBYTE(__dst[6]) = v15;
  v24 = type metadata accessor for TypedVectorizedProperties(0, a4, v22, v23);
  v25 = *(_QWORD *)(v24 - 8);
  (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v25 + 16))(__src, __dst, v24);
  sub_2142536C0(__src, a4, v26, v27, v51);
  swift_beginAccess();
  sub_2141FA160((uint64_t)v51, v16 + *(int *)(v43 + 108), &qword_254D69D18);
  swift_endAccess();
  v28 = *(void (**)(_QWORD *, uint64_t))(v25 + 8);
  v13 = v42;
  v28(__dst, v24);
LABEL_6:
  LOBYTE(__dst[0]) = v45;
  __dst[1] = v46;
  (*(void (**)(uint64_t, _QWORD *))(a5 + 40))(v47, __dst);
  sub_21422F7F0(v9, v10, v11, v12);
  return sub_214274588(v13, v14, v15);
}

uint64_t sub_214367960(uint64_t a1, char *a2, uint64_t *a3)
{
  return sub_2143674A8(a1, a2, a3[2], a3[3], a3[4]);
}

uint64_t sub_214367970(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52[4];
  __int128 v53;
  _BYTE v54[25];
  uint64_t v55[90];
  _BYTE v56[136];
  _QWORD __src[90];
  _QWORD __dst[90];
  _QWORD v59[6];
  char v60;
  _QWORD v61[6];
  char v62;
  _QWORD v63[4];
  __int128 v64;
  _BYTE v65[25];
  _QWORD v66[6];
  char v67;
  _BYTE v68[136];
  _QWORD v69[6];
  char v70;
  _QWORD v71[6];
  char v72;
  _QWORD v73[4];
  __int128 v74;
  __int128 v75;
  char v76;

  v47 = *a2;
  v7 = *((_QWORD *)a2 + 1);
  v8 = type metadata accessor for ModifiedChartContent_SymbolAreas_KeyPath(0, a3, a4, a5);
  v49 = a1;
  sub_214252010(0, 0, 0, 0, *(uint64_t **)(a1 + *(int *)(v8 + 44)), __dst);
  v9 = __dst[0];
  v10 = __dst[1];
  v11 = __dst[2];
  v12 = __dst[3];
  v51 = __dst[4];
  v13 = __dst[5];
  v46 = __dst[6];
  v48 = v7;
  v14 = v7 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_environment;
  swift_beginAccess();
  v45 = type metadata accessor for ChartContentRenderContext.Environment(0);
  v15 = v14 + *(int *)(v45 + 108);
  if (!*(_QWORD *)(v15 + 24))
  {
    memset(__src, 0, 24);
    __src[3] = 2;
    bzero(&__src[4], 0x2A9uLL);
    swift_retain();
    goto LABEL_5;
  }
  sub_21427362C(v15, (uint64_t)v55);
  swift_retain();
  sub_214253714(a4, __src);
  sub_21420D92C((uint64_t)v55);
  if (__src[3] == 2)
  {
LABEL_5:
    type metadata accessor for TypedVectorizedProperties(255, a4, v16, v17);
    v30 = sub_214425388();
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v30 - 8) + 8))(__src, v30);
    memset(v59, 0, 24);
    v59[3] = 1;
    v59[5] = 0;
    v59[4] = 0;
    v60 = 0;
    memset(v61, 0, 24);
    v61[3] = 1;
    v61[5] = 0;
    v61[4] = 0;
    v62 = 0;
    memset(v63, 0, 24);
    v63[3] = 1;
    v64 = 0u;
    memset(v65, 0, sizeof(v65));
    memset(v52, 0, 24);
    v52[3] = 1;
    v53 = 0u;
    memset(v54, 0, sizeof(v54));
    v66[0] = v9;
    v66[1] = v10;
    v66[2] = v11;
    v29 = v12;
    v66[3] = v12;
    v66[4] = v51;
    v66[5] = v13;
    v22 = v46;
    v67 = v46;
    sub_21427384C((uint64_t)v56);
    type metadata accessor for TypedVectorizedProperties.Position(255, a4, v31, v32);
    v33 = sub_214425388();
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v33 - 8) + 32))(v68, v56, v33);
    memset(v69, 0, 24);
    v69[3] = 1;
    v69[5] = 0;
    v69[4] = 0;
    v70 = 0;
    memset(v71, 0, 24);
    v71[3] = 1;
    v71[4] = 0;
    v71[5] = 0;
    v72 = 0;
    memset(v73, 0, 24);
    v73[3] = 1;
    v74 = 0u;
    v75 = 0u;
    v76 = 0;
    sub_214253428((uint64_t)v59, (uint64_t)v61, (uint64_t)v63, (uint64_t)v52, (uint64_t)v66, (uint64_t)v68, (uint64_t)v69, (uint64_t)v71, (uint64_t)v55, (uint64_t)v73, (uint64_t)v73, a4);
    sub_2142536C0(v55, a4, v34, v35, v52);
    swift_beginAccess();
    v36 = v14 + *(int *)(v45 + 108);
    sub_2141EF2B4(v9, v10, v11, v29);
    sub_214274628(v51, v13, v46);
    sub_2141FA160((uint64_t)v52, v36, &qword_254D69D18);
    swift_endAccess();
    goto LABEL_6;
  }
  memcpy(__dst, __src, 0x2C9uLL);
  v42 = __dst[35];
  v43 = __dst[34];
  v40 = __dst[37];
  v41 = __dst[36];
  v18 = __dst[38];
  v39 = __dst[39];
  v38 = LOBYTE(__dst[40]);
  v19 = v9;
  v20 = v9;
  v44 = v9;
  v21 = v12;
  sub_2141EF2B4(v20, v10, v11, v12);
  v22 = v46;
  sub_214274628(v51, v13, v46);
  sub_2143683E0(v43, v42, v41, v40, v18, v39, v38);
  __dst[34] = v19;
  __dst[35] = v10;
  __dst[36] = v11;
  __dst[37] = v21;
  __dst[38] = v51;
  __dst[39] = v13;
  LOBYTE(__dst[40]) = v46;
  v25 = type metadata accessor for TypedVectorizedProperties(0, a4, v23, v24);
  v26 = *(_QWORD *)(v25 - 8);
  (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v26 + 16))(__src, __dst, v25);
  sub_2142536C0(__src, a4, v27, v28, v55);
  swift_beginAccess();
  v29 = v21;
  v9 = v44;
  sub_2141FA160((uint64_t)v55, v14 + *(int *)(v45 + 108), &qword_254D69D18);
  swift_endAccess();
  (*(void (**)(_QWORD *, uint64_t))(v26 + 8))(__dst, v25);
LABEL_6:
  LOBYTE(__dst[0]) = v47;
  __dst[1] = v48;
  (*(void (**)(uint64_t, _QWORD *))(a5 + 40))(v49, __dst);
  sub_21422F7F0(v9, v10, v11, v29);
  return sub_214274588(v51, v13, v22);
}

uint64_t sub_214367E3C(uint64_t a1, char *a2, uint64_t *a3)
{
  return sub_214367970(a1, a2, a3[2], a3[3], a3[4]);
}

uint64_t sub_214367E4C(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v55;
  uint64_t v56[4];
  __int128 v57;
  _BYTE v58[25];
  uint64_t v59[90];
  _BYTE v60[136];
  _QWORD __src[90];
  _QWORD __dst[90];
  _QWORD v63[6];
  char v64;
  _QWORD v65[6];
  char v66;
  _QWORD v67[4];
  __int128 v68;
  _BYTE v69[25];
  _QWORD v70[6];
  char v71;
  _BYTE v72[136];
  _QWORD v73[6];
  char v74;
  _QWORD v75[6];
  char v76;
  _QWORD v77[4];
  __int128 v78;
  __int128 v79;
  char v80;

  v51 = *a2;
  v7 = *((_QWORD *)a2 + 1);
  v8 = type metadata accessor for ModifiedChartContent_SymbolSizes_KeyPath(0, a3, a4, a5);
  v53 = a1;
  sub_214252010(0, 0, 0, 0, *(uint64_t **)(a1 + *(int *)(v8 + 44)), __dst);
  v9 = __dst[0];
  v48 = __dst[2];
  v49 = __dst[1];
  v47 = __dst[3];
  v55 = __dst[4];
  v50 = __dst[5];
  v10 = __dst[6];
  v52 = v7;
  v11 = v7 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_environment;
  swift_beginAccess();
  v46 = type metadata accessor for ChartContentRenderContext.Environment(0);
  v12 = v11 + *(int *)(v46 + 108);
  if (!*(_QWORD *)(v12 + 24))
  {
    memset(__src, 0, 24);
    __src[3] = 2;
    bzero(&__src[4], 0x2A9uLL);
    swift_retain();
    goto LABEL_5;
  }
  sub_21427362C(v12, (uint64_t)v59);
  swift_retain();
  sub_214253714(a4, __src);
  sub_21420D92C((uint64_t)v59);
  if (__src[3] == 2)
  {
LABEL_5:
    type metadata accessor for TypedVectorizedProperties(255, a4, v13, v14);
    v29 = sub_214425388();
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v29 - 8) + 8))(__src, v29);
    memset(v63, 0, 24);
    v63[3] = 1;
    v63[5] = 0;
    v63[4] = 0;
    v64 = 0;
    memset(v65, 0, 24);
    v65[3] = 1;
    v65[5] = 0;
    v65[4] = 0;
    v66 = 0;
    memset(v67, 0, 24);
    v67[3] = 1;
    v68 = 0u;
    memset(v69, 0, sizeof(v69));
    memset(v56, 0, 24);
    v56[3] = 1;
    v28 = v10;
    v30 = v10 | 0x80;
    v57 = 0u;
    memset(v58, 0, sizeof(v58));
    v17 = v9;
    v70[0] = v9;
    v26 = v48;
    v27 = v49;
    v70[1] = v49;
    v70[2] = v48;
    v25 = v47;
    v70[3] = v47;
    v70[4] = v55;
    v18 = v50;
    v70[5] = v50;
    v71 = v30;
    sub_21427384C((uint64_t)v60);
    type metadata accessor for TypedVectorizedProperties.Position(255, a4, v31, v32);
    v33 = sub_214425388();
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v33 - 8) + 32))(v72, v60, v33);
    memset(v73, 0, 24);
    v73[3] = 1;
    v73[5] = 0;
    v73[4] = 0;
    v74 = 0;
    memset(v75, 0, 24);
    v75[3] = 1;
    v75[4] = 0;
    v75[5] = 0;
    v76 = 0;
    memset(v77, 0, 24);
    v77[3] = 1;
    v78 = 0u;
    v79 = 0u;
    v80 = 0;
    sub_214253428((uint64_t)v63, (uint64_t)v65, (uint64_t)v67, (uint64_t)v56, (uint64_t)v70, (uint64_t)v72, (uint64_t)v73, (uint64_t)v75, (uint64_t)v59, (uint64_t)v77, (uint64_t)v77, a4);
    sub_2142536C0(v59, a4, v34, v35, v56);
    swift_beginAccess();
    v36 = v11 + *(int *)(v46 + 108);
    sub_2141EF2B4(v17, v49, v48, v47);
    sub_214274628(v55, v50, v28);
    sub_2141FA160((uint64_t)v56, v36, &qword_254D69D18);
    swift_endAccess();
    goto LABEL_6;
  }
  memcpy(__dst, __src, 0x2C9uLL);
  v15 = v10;
  v44 = v10 | 0x80;
  v45 = v10;
  v42 = __dst[35];
  v43 = __dst[34];
  v40 = __dst[37];
  v41 = __dst[36];
  v16 = __dst[38];
  v39 = __dst[39];
  v38 = LOBYTE(__dst[40]);
  v17 = v9;
  sub_2141EF2B4(v9, v49, v48, v47);
  v18 = v50;
  sub_214274628(v55, v50, v15);
  sub_2143683E0(v43, v42, v41, v40, v16, v39, v38);
  __dst[34] = v17;
  __dst[35] = v49;
  __dst[36] = v48;
  __dst[37] = v47;
  __dst[38] = v55;
  __dst[39] = v50;
  LOBYTE(__dst[40]) = v44;
  v21 = type metadata accessor for TypedVectorizedProperties(0, a4, v19, v20);
  v22 = *(_QWORD *)(v21 - 8);
  (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v22 + 16))(__src, __dst, v21);
  sub_2142536C0(__src, a4, v23, v24, v59);
  swift_beginAccess();
  v25 = v47;
  v26 = v48;
  v27 = v49;
  v28 = v45;
  sub_2141FA160((uint64_t)v59, v11 + *(int *)(v46 + 108), &qword_254D69D18);
  swift_endAccess();
  (*(void (**)(_QWORD *, uint64_t))(v22 + 8))(__dst, v21);
LABEL_6:
  LOBYTE(__dst[0]) = v51;
  __dst[1] = v52;
  (*(void (**)(uint64_t, _QWORD *))(a5 + 40))(v53, __dst);
  sub_21422F7F0(v17, v27, v26, v25);
  return sub_214274588(v55, v18, v28);
}

uint64_t sub_214368348(uint64_t a1, char *a2, uint64_t *a3)
{
  return sub_214367E4C(a1, a2, a3[2], a3[3], a3[4]);
}

uint64_t sub_214368360(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ChartContentRenderContext.Environment(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_2143683A4(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a7 <= 0xFBu)
    return sub_21436841C(result, a2, a3, a4, a5, a6, a7, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_214274588, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_214285A58);
  return result;
}

uint64_t sub_2143683E0(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a7 <= 0xFBu)
    return sub_21436841C(result, a2, a3, a4, a5, a6, a7, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_214285A58, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_214285A58);
  return result;
}

uint64_t sub_21436841C(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(uint64_t, uint64_t, uint64_t), uint64_t (*a9)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v9;

  v9 = a7;
  if ((a7 & 0x80) != 0)
  {
    a8 = a9;
    v9 = a7 & 0x7F;
  }
  sub_21422F7F0(a1, a2, a3, a4);
  return a8(a5, a6, v9);
}

uint64_t sub_21436847C(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  if (a4 != 1)
  {
    sub_21422F7F0(result, a2, a3, a4);
    return sub_214273B58(a5, a6, a7, a8, a9, a10);
  }
  return result;
}

uint64_t sub_2143684E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char a17)
{
  uint64_t result;

  if (a7 != 1)
  {
    sub_21422F7F0(a4, a5, a6, a7);
    return sub_214273B84(a8, a9, a10, a11, a12, a13, a14, a15, a16, a17);
  }
  return result;
}

uint64_t sub_21436857C(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for VectorizedPlottables.Position(a2, a1);
  return a2;
}

uint64_t sub_2143685B8(uint64_t a1)
{
  sub_21427460C(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  return a1;
}

uint64_t *sub_2143685E8(uint64_t *a1)
{
  sub_21422F7F0(*a1, a1[1], a1[2], a1[3]);
  return a1;
}

uint64_t sub_214368618(uint64_t a1)
{
  sub_2142745F0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  return a1;
}

unint64_t sub_21436864C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  char v6;
  _OWORD *v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  _OWORD v13[3];
  uint64_t v14;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  sub_2141D8BF8(&qword_253F15D00);
  v2 = (_QWORD *)sub_2144256D0();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  v4 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_2141E070C(v4, (uint64_t)v13, &qword_254D6C650);
    result = sub_214336C7C(v13);
    if ((v6 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v7 = (_OWORD *)(v2[6] + 48 * result);
    v8 = v13[0];
    v9 = v13[2];
    v7[1] = v13[1];
    v7[2] = v9;
    *v7 = v8;
    *(_QWORD *)(v2[7] + 8 * result) = v14;
    v10 = v2[2];
    v11 = __OFADD__(v10, 1);
    v12 = v10 + 1;
    if (v11)
      goto LABEL_11;
    v2[2] = v12;
    v4 += 56;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_214368778(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  unint64_t result;
  char v14;
  uint64_t v15;
  __int128 v16;
  _QWORD *v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  char v24;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  sub_2141D8BF8(&qword_253F10B98);
  v2 = (_QWORD *)sub_2144256D0();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (_QWORD *)(a1 + 96);
  while (1)
  {
    v5 = *((_BYTE *)v4 - 62);
    v6 = *(v4 - 7);
    v7 = *(v4 - 6);
    v8 = *(v4 - 4);
    v9 = *(v4 - 3);
    v10 = *(v4 - 1);
    v11 = *v4;
    LOWORD(v21) = *((_WORD *)v4 - 32);
    BYTE2(v21) = v5;
    *((_QWORD *)&v21 + 1) = v6;
    *(_QWORD *)&v22 = v7;
    BYTE8(v22) = *((_BYTE *)v4 - 40);
    *(_QWORD *)&v23 = v8;
    *((_QWORD *)&v23 + 1) = v9;
    v24 = *((_BYTE *)v4 - 16);
    v12 = v24;
    sub_2141DD164(v6, v7, SBYTE8(v22));
    sub_2141DD164(v8, v9, v12);
    result = sub_214336BCC((double *)&v21);
    if ((v14 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v15 = v2[6] + 56 * result;
    v16 = v22;
    *(_OWORD *)v15 = v21;
    *(_OWORD *)(v15 + 16) = v16;
    *(_OWORD *)(v15 + 32) = v23;
    *(_BYTE *)(v15 + 48) = v24;
    v17 = (_QWORD *)(v2[7] + 16 * result);
    *v17 = v10;
    v17[1] = v11;
    v18 = v2[2];
    v19 = __OFADD__(v18, 1);
    v20 = v18 + 1;
    if (v19)
      goto LABEL_11;
    v2[2] = v20;
    v4 += 9;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_2143688EC(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  sub_2141D8BF8(&qword_253F105D8);
  v2 = (_QWORD *)sub_2144256D0();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v5 = *(v4 - 2);
    v6 = *(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    result = sub_214336D1C(v5, v6);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = (uint64_t *)(v2[6] + 16 * result);
    *v10 = v5;
    v10[1] = v6;
    *(_QWORD *)(v2[7] + 8 * result) = v7;
    v11 = v2[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v2[2] = v13;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_2143689FC(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t *v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  sub_2141D8BF8(&qword_254D6A478);
  v2 = (_QWORD *)sub_2144256D0();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  v4 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_2141E070C(v4, (uint64_t)&v16, &qword_254D6C648);
    v5 = v16;
    v6 = v17;
    result = sub_214336D1C(v16, v17);
    if ((v8 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v9 = (uint64_t *)(v2[6] + 16 * result);
    *v9 = v5;
    v9[1] = v6;
    v10 = v2[7] + 40 * result;
    v11 = v18;
    v12 = v19;
    *(_QWORD *)(v10 + 32) = v20;
    *(_OWORD *)v10 = v11;
    *(_OWORD *)(v10 + 16) = v12;
    v13 = v2[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v2[2] = v15;
    v4 += 56;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_214368B44(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t result;
  char v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  sub_2141D8BF8(&qword_254D6A480);
  v2 = (_QWORD *)sub_2144256D0();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 80);
  while (1)
  {
    v5 = *(v4 - 6);
    v6 = *(v4 - 5);
    v7 = *(v4 - 4);
    v8 = *(v4 - 3);
    v9 = *(v4 - 2);
    v10 = *(v4 - 1);
    v11 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = sub_214336D1C(v5, v6);
    if ((v13 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v14 = (uint64_t *)(v2[6] + 16 * result);
    *v14 = v5;
    v14[1] = v6;
    v15 = (_QWORD *)(v2[7] + 40 * result);
    *v15 = v7;
    v15[1] = v8;
    v15[2] = v9;
    v15[3] = v10;
    v15[4] = v11;
    v16 = v2[2];
    v17 = __OFADD__(v16, 1);
    v18 = v16 + 1;
    if (v17)
      goto LABEL_11;
    v2[2] = v18;
    v4 += 7;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_214368C8C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  sub_2141D8BF8(&qword_253F105E0);
  v2 = (_QWORD *)sub_2144256D0();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v5 = *(v4 - 2);
    v6 = *(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    swift_retain();
    result = sub_214336D1C(v5, v6);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = (uint64_t *)(v2[6] + 16 * result);
    *v10 = v5;
    v10[1] = v6;
    *(_QWORD *)(v2[7] + 8 * result) = v7;
    v11 = v2[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v2[2] = v13;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_214368DA4(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  sub_2141D8BF8(&qword_254D6A470);
  v2 = (_QWORD *)sub_2144256D0();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v5 = *(v4 - 2);
    v6 = *(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    result = sub_214336D1C(v5, v6);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = (uint64_t *)(v2[6] + 16 * result);
    *v10 = v5;
    v10[1] = v6;
    *(_QWORD *)(v2[7] + 8 * result) = v7;
    v11 = v2[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v2[2] = v13;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_214368EB4(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t result;
  char v7;
  unint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  _BYTE v12[48];

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  sub_2141D8BF8(&qword_253F10758);
  v2 = (_QWORD *)sub_2144256D0();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 80);
  while (1)
  {
    sub_2142AB54C((uint64_t)(v4 - 6), (uint64_t)v12);
    v5 = *v4;
    sub_2142AB4D4((uint64_t)v12);
    swift_retain();
    result = sub_214336DE0((uint64_t)v12);
    if ((v7 & 1) != 0)
      break;
    v8 = result;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    result = sub_2142AB54C((uint64_t)v12, v2[6] + 48 * result);
    *(_QWORD *)(v2[7] + 8 * v8) = v5;
    v9 = v2[2];
    v10 = __OFADD__(v9, 1);
    v11 = v9 + 1;
    if (v10)
      goto LABEL_11;
    v2[2] = v11;
    v4 += 7;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_214368FE4(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t result;
  char v7;
  unint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  _BYTE v12[72];

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  sub_2141D8BF8(&qword_253F11C80);
  v2 = (_QWORD *)sub_2144256D0();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 104);
  while (1)
  {
    sub_2142AB498((uint64_t)(v4 - 9), (uint64_t)v12);
    v5 = *v4;
    sub_2142AB3E8((uint64_t)v12);
    swift_retain();
    result = sub_214336E38((uint64_t)v12);
    if ((v7 & 1) != 0)
      break;
    v8 = result;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    result = sub_2142AB498((uint64_t)v12, v2[6] + 72 * result);
    *(_QWORD *)(v2[7] + 8 * v8) = v5;
    v9 = v2[2];
    v10 = __OFADD__(v9, 1);
    v11 = v9 + 1;
    if (v10)
      goto LABEL_11;
    v2[2] = v11;
    v4 += 10;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_214369114(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t result;
  char v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  _QWORD v22[2];

  v2 = sub_2141D8BF8(&qword_253F11008);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(_QWORD *)(a1 + 16))
  {
    v7 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  sub_2141D8BF8(&qword_253F11960);
  v6 = sub_2144256D0();
  v7 = (_QWORD *)v6;
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  v9 = *(int *)(v2 + 48);
  v10 = v6 + 64;
  v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v22[1] = a1;
  v12 = a1 + v11;
  v13 = *(_QWORD *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_2141E070C(v12, (uint64_t)v5, &qword_253F11008);
    result = sub_214336EFC((uint64_t)v5);
    if ((v15 & 1) != 0)
      break;
    v16 = result;
    *(_QWORD *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v17 = v7[6];
    v18 = sub_214423C54();
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v17 + *(_QWORD *)(*(_QWORD *)(v18 - 8) + 72) * v16, v5, v18);
    *(_QWORD *)(v7[7] + 8 * v16) = *(_QWORD *)&v5[v9];
    v19 = v7[2];
    v20 = __OFADD__(v19, 1);
    v21 = v19 + 1;
    if (v20)
      goto LABEL_11;
    v7[2] = v21;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_2143692A8(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t result;
  char v14;
  unint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19[8];

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  sub_2141D8BF8(&qword_253F11FC0);
  v2 = (_QWORD *)sub_2144256D0();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v5 = *(v4 - 1);
    v6 = *v4;
    v7 = v4[1];
    v8 = v4[2];
    v9 = v4[3];
    v10 = v4[4];
    v11 = v4[5];
    v12 = v4[6];
    v19[0] = *(v4 - 2);
    v19[1] = v5;
    v19[2] = v6;
    v19[3] = v7;
    v19[4] = v8;
    v19[5] = v9;
    v19[6] = v10;
    v19[7] = v11;
    sub_21421C1D8(v19[0], v5, v6, v7, v8, v9, v10);
    result = sub_214336F60((uint64_t)v19);
    if ((v14 & 1) != 0)
      break;
    v15 = result;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    result = sub_21421C19C((uint64_t)v19, v2[6] + (result << 6));
    *(_QWORD *)(v2[7] + 8 * v15) = v12;
    v16 = v2[2];
    v17 = __OFADD__(v16, 1);
    v18 = v16 + 1;
    if (v17)
      goto LABEL_11;
    v4 += 9;
    v2[2] = v18;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_2143693D4(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  sub_2141D8BF8(&qword_253F10D10);
  v2 = (_QWORD *)sub_2144256D0();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 40);
  while (1)
  {
    v5 = *(v4 - 1);
    v6 = *v4;
    v7 = swift_bridgeObjectRetain();
    result = sub_214336FAC(v7);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = 8 * result;
    *(_QWORD *)(v2[6] + v10) = v5;
    *(_QWORD *)(v2[7] + v10) = v6;
    v11 = v2[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v4 += 2;
    v2[2] = v13;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

_QWORD *sub_2143694D0(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  char v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  char v12;
  _BYTE __dst[456];
  _BYTE v14[160];

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_11;
  }
  sub_2141D8BF8(&qword_253F12290);
  v2 = (_QWORD *)sub_2144256D0();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    return v2;
  }
  swift_retain();
  memcpy(__dst, (const void *)(a1 + 32), sizeof(__dst));
  sub_2141EF6B8((uint64_t)__dst, (uint64_t)v14);
  sub_21436E1B4((uint64_t)__dst);
  v4 = sub_214337634((uint64_t)v14);
  if ((v5 & 1) != 0)
  {
LABEL_8:
    __break(1u);
LABEL_9:
    swift_release();
    goto LABEL_11;
  }
  v6 = v4;
  v7 = 488;
  while (1)
  {
    *(_QWORD *)((char *)v2 + ((v6 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v6;
    sub_2141EF6B8((uint64_t)v14, v2[6] + 152 * v6);
    result = memcpy((void *)(v2[7] + 304 * v6), &__dst[152], 0x130uLL);
    v9 = v2[2];
    v10 = __OFADD__(v9, 1);
    v11 = v9 + 1;
    if (v10)
      break;
    v2[2] = v11;
    if (!--v3)
      goto LABEL_9;
    memcpy(__dst, (const void *)(a1 + v7), sizeof(__dst));
    sub_2141EF6B8((uint64_t)__dst, (uint64_t)v14);
    sub_21436E1B4((uint64_t)__dst);
    v6 = sub_214337634((uint64_t)v14);
    v7 += 456;
    if ((v12 & 1) != 0)
      goto LABEL_8;
  }
  __break(1u);
  return result;
}

unint64_t sub_214369658(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  __int128 v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  _OWORD *v9;
  __int128 v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  __int128 v14;
  _BYTE v15[25];
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  _BYTE v20[24];

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  sub_2141D8BF8(&qword_253F12298);
  v2 = (_QWORD *)sub_2144256D0();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (_QWORD *)(a1 + 80);
  while (1)
  {
    v5 = *((_OWORD *)v4 - 2);
    v14 = *((_OWORD *)v4 - 3);
    *(_OWORD *)v15 = v5;
    *(_OWORD *)&v15[9] = *(_OWORD *)((char *)v4 - 23);
    v6 = *v4;
    v17 = v14;
    v18 = v5;
    sub_21421CC0C((uint64_t)&v17, (uint64_t)v20);
    v19 = *((_QWORD *)&v18 + 1);
    v16 = *(_QWORD *)&v15[16];
    sub_21421CE7C((uint64_t)v20);
    sub_2141F92E8((uint64_t)&v19);
    sub_2141F92E8((uint64_t)&v16);
    result = sub_21433768C((uint64_t)&v14);
    if ((v8 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v9 = (_OWORD *)(v2[6] + 48 * result);
    v10 = *(_OWORD *)v15;
    *v9 = v14;
    v9[1] = v10;
    *(_OWORD *)((char *)v9 + 25) = *(_OWORD *)&v15[9];
    *(_QWORD *)(v2[7] + 8 * result) = v6;
    v11 = v2[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v4 += 7;
    v2[2] = v13;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_2143697B0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t result;
  char v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  _QWORD v22[2];

  v2 = sub_2141D8BF8(qword_253F11150);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(_QWORD *)(a1 + 16))
  {
    v7 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  sub_2141D8BF8(&qword_253F11968);
  v6 = sub_2144256D0();
  v7 = (_QWORD *)v6;
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  v9 = *(int *)(v2 + 48);
  v10 = v6 + 64;
  v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v22[1] = a1;
  v12 = a1 + v11;
  v13 = *(_QWORD *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_2141E070C(v12, (uint64_t)v5, qword_253F11150);
    result = sub_214336C24((uint64_t)v5);
    if ((v15 & 1) != 0)
      break;
    v16 = result;
    *(_QWORD *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v17 = v7[6];
    v18 = type metadata accessor for CalendarCache.Key(0);
    result = sub_2141FE1E0((uint64_t)v5, v17 + *(_QWORD *)(*(_QWORD *)(v18 - 8) + 72) * v16, type metadata accessor for CalendarCache.Key);
    *(_QWORD *)(v7[7] + 8 * v16) = *(_QWORD *)&v5[v9];
    v19 = v7[2];
    v20 = __OFADD__(v19, 1);
    v21 = v19 + 1;
    if (v20)
      goto LABEL_11;
    v7[2] = v21;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_214369948(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return sub_214369A68(a1, a2, a3, &qword_253F11908);
}

uint64_t *sub_214369964(uint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *result;
  v4 = (uint64_t *)(*result + 32 * a2);
  v5 = *v4;
  if ((*v4 & 0x8000000000000000) == 0)
    *(_QWORD *)(v3 + 32 * v5 + 8) = v4[1];
  v6 = v4[1];
  if ((v6 & 0x8000000000000000) == 0)
    *(_QWORD *)(v3 + 32 * v6) = v5;
  if (*(_QWORD *)(a3 + 24) == a2)
    *(_QWORD *)(a3 + 24) = *v4;
  *v4 = -1;
  *(_QWORD *)(v3 + 32 * *(_QWORD *)(a3 + 16)) = a2;
  v4[1] = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a3 + 16) = a2;
  return result;
}

uint64_t *sub_2143699CC(uint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *result;
  v4 = (uint64_t *)(*result + 40 * a2);
  v5 = *v4;
  if ((*v4 & 0x8000000000000000) == 0)
    *(_QWORD *)(v3 + 40 * v5 + 8) = *(_QWORD *)(v3 + 40 * a2 + 8);
  v6 = v3 + 40 * a2;
  v9 = *(_QWORD *)(v6 + 8);
  v7 = (_QWORD *)(v6 + 8);
  v8 = v9;
  if ((v9 & 0x8000000000000000) == 0)
    *(_QWORD *)(v3 + 40 * v8) = v5;
  if (*(_QWORD *)(a3 + 24) == a2)
    *(_QWORD *)(a3 + 24) = *v4;
  *v4 = -1;
  *(_QWORD *)(v3 + 40 * *(_QWORD *)(a3 + 16)) = a2;
  *v7 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a3 + 16) = a2;
  return result;
}

uint64_t sub_214369A4C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return sub_214369A68(a1, a2, a3, &qword_253F11900);
}

uint64_t sub_214369A68(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  v6 = *a1;
  result = sub_2141D8BF8(a4);
  v8 = *(_QWORD *)(*(_QWORD *)(result - 8) + 72);
  v9 = (_QWORD *)(v6 + v8 * a2);
  if ((*v9 & 0x8000000000000000) == 0)
    *(_QWORD *)(v6 + *v9 * v8 + 8) = v9[1];
  v10 = v9[1];
  if ((v10 & 0x8000000000000000) == 0)
    *(_QWORD *)(v6 + v10 * v8) = *v9;
  if (*(_QWORD *)(a3 + 24) == a2)
    *(_QWORD *)(a3 + 24) = *v9;
  *v9 = -1;
  *(_QWORD *)(v6 + *(_QWORD *)(a3 + 16) * v8) = a2;
  v9[1] = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a3 + 16) = a2;
  return result;
}

uint64_t sub_214369B0C(unint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  uint64_t v17;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE v31[16];
  uint64_t v32[2];

  v3 = v2;
  v6 = type metadata accessor for CalendarCache.Key(0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = &v31[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = sub_2141D8BF8(&qword_253F11908);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v13 = &v31[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v11);
  v15 = (unint64_t)&v31[-v14];
  v16 = v2[1];
  v17 = *(_QWORD *)(v16 + 16);
  if (v17 < *v3)
  {
    sub_2141FDEA0(a2, v15 + *(int *)(v9 + 48), type metadata accessor for CalendarCache.Key);
    sub_2141FDEA0(a1, v15 + *(int *)(v9 + 52), type metadata accessor for CalendarCache.Value);
    a1 = v3[2];
    *(_QWORD *)v15 = -1;
    *(_QWORD *)(v15 + 8) = a1;
    if ((a1 & 0x8000000000000000) != 0)
    {
LABEL_6:
      v3[2] = v17;
      if (v3[3] < 0)
        v3[3] = v17;
      sub_2141FDEA0(a2, (uint64_t)v8, type metadata accessor for CalendarCache.Key);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v32[0] = v3[4];
      v3[4] = 0x8000000000000000;
      sub_2142A20FC(v17, (uint64_t)v8, isUniquelyReferenced_nonNull_native);
      v3[4] = v32[0];
      swift_bridgeObjectRelease();
      sub_21436E338((uint64_t)v8);
      sub_2141E070C(v15, (uint64_t)v13, &qword_253F11908);
      v20 = (_QWORD *)v3[1];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v20 = (_QWORD *)sub_2142219C8(0, v20[2] + 1, 1, v20);
      v22 = v20[2];
      v21 = v20[3];
      if (v22 >= v21 >> 1)
        v20 = (_QWORD *)sub_2142219C8(v21 > 1, v22 + 1, 1, v20);
      v20[2] = v22 + 1;
      sub_2141E801C((uint64_t)v13, (uint64_t)v20+ ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))+ *(_QWORD *)(v10 + 72) * v22, &qword_253F11908);
      v3[1] = (uint64_t)v20;
      return sub_2141E0750(v15, &qword_253F11908);
    }
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) != 0)
    {
LABEL_4:
      if (a1 >= *(_QWORD *)(v16 + 16))
      {
        __break(1u);
        return result;
      }
      *(_QWORD *)(v16
                + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))
                + *(_QWORD *)(v10 + 72) * a1) = v17;
      v3[1] = v16;
      goto LABEL_6;
    }
LABEL_28:
    result = sub_21434EA94((_QWORD *)v16);
    v16 = result;
    goto LABEL_4;
  }
  v23 = v3[3];
  if (v23 >= v17)
  {
    __break(1u);
  }
  else
  {
    v13 = (_BYTE *)((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
    v17 = *(_QWORD *)(v10 + 72);
    sub_2141FDEA0((uint64_t)&v13[v16 + v17 * v23 + *(int *)(v9 + 48)], (uint64_t)v8, type metadata accessor for CalendarCache.Key);
    sub_21436B8F0((uint64_t)v8);
    sub_21436E338((uint64_t)v8);
    sub_2141FDEA0(a2, (uint64_t)v8, type metadata accessor for CalendarCache.Key);
    v15 = v3[3];
    v24 = swift_isUniquelyReferenced_nonNull_native();
    v32[0] = v3[4];
    v3[4] = 0x8000000000000000;
    sub_2142A20FC(v15, (uint64_t)v8, v24);
    v3[4] = v32[0];
    swift_bridgeObjectRelease();
    sub_21436E338((uint64_t)v8);
    v16 = v3[1];
    v25 = swift_isUniquelyReferenced_nonNull_native();
    v3[1] = v16;
    if ((v25 & 1) != 0)
    {
      if ((v15 & 0x8000000000000000) == 0)
        goto LABEL_16;
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
  }
  v16 = sub_21434EA94((_QWORD *)v16);
  v3[1] = v16;
  if ((v15 & 0x8000000000000000) != 0)
    goto LABEL_24;
LABEL_16:
  if (v15 >= *(_QWORD *)(v16 + 16))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  sub_21436E374(a2, (uint64_t)&v13[v16 + v15 * v17 + *(int *)(v9 + 48)], type metadata accessor for CalendarCache.Key);
  v26 = v3[3];
  if ((v26 & 0x8000000000000000) != 0)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v27 = v3[1];
  if (v26 >= *(_QWORD *)(v27 + 16))
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  result = sub_21436E374(a1, (uint64_t)&v13[v27 + v26 * v17 + *(int *)(v9 + 52)], type metadata accessor for CalendarCache.Value);
  v28 = v3[3];
  if (v28 != v3[2])
  {
    v29 = v3[1];
    v30 = *(_QWORD *)(v29 + 16);
    v32[0] = (uint64_t)&v13[v29];
    v32[1] = v30;
    result = sub_214369A68(v32, v28, (uint64_t)v3, &qword_253F11908);
    v3[1] = v29;
  }
  return result;
}

uint64_t sub_214369F28(uint64_t a1, unint64_t a2)
{
  _QWORD *v2;
  unint64_t v3;
  _QWORD *v4;
  _QWORD *v7;
  unint64_t v8;
  char v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t result;
  unint64_t v14;
  uint64_t v15;
  char v16;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21[2];

  v4 = v2;
  v7 = (_QWORD *)v2[1];
  v8 = v7[2];
  if ((int64_t)v8 >= *v4)
  {
    v14 = v4[3];
    if (v14 >= v8)
    {
      __break(1u);
      goto LABEL_27;
    }
    v15 = sub_21433AB28(v7[4 * v14 + 6]);
    if ((v16 & 1) == 0)
      goto LABEL_17;
    v8 = v15;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v18 = v4[4];
    v21[0] = v18;
    v4[4] = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      goto LABEL_34;
    goto LABEL_16;
  }
  v3 = v4[2];
  swift_retain();
  if ((v3 & 0x8000000000000000) == 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      goto LABEL_32;
    while (1)
    {
      if (v3 < v7[2])
      {
        v7[4 * v3 + 4] = v8;
        v4[1] = v7;
        break;
      }
      __break(1u);
LABEL_34:
      sub_2142A8CC4();
      v18 = v21[0];
LABEL_16:
      sub_21431FA70(v8, v18);
      v4[4] = v18;
      swift_bridgeObjectRelease();
LABEL_17:
      v8 = v4[3];
      v19 = swift_isUniquelyReferenced_nonNull_native();
      v21[0] = v4[4];
      v4[4] = 0x8000000000000000;
      sub_2142A2F3C(v8, a2, v19);
      v4[4] = v21[0];
      swift_bridgeObjectRelease();
      v7 = (_QWORD *)v4[1];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      {
        if ((v8 & 0x8000000000000000) != 0)
          goto LABEL_28;
      }
      else
      {
LABEL_27:
        v7 = sub_21434EAD0(v7);
        if ((v8 & 0x8000000000000000) != 0)
        {
LABEL_28:
          __break(1u);
LABEL_29:
          __break(1u);
LABEL_30:
          __break(1u);
          goto LABEL_31;
        }
      }
      if (v8 >= v7[2])
        goto LABEL_29;
      v3 = (unint64_t)(v7 + 4);
      v7[4 * v8 + 6] = a2;
      a2 = v4[3];
      if ((a2 & 0x8000000000000000) != 0)
        goto LABEL_30;
      if (a2 < v7[2])
      {
        swift_retain();
        result = swift_release();
        *(_QWORD *)(v3 + 32 * a2 + 24) = a1;
        v4[1] = v7;
        if (a2 != v4[2])
        {
          v20 = v7[2];
          v21[0] = (uint64_t)(v7 + 4);
          v21[1] = v20;
          result = (uint64_t)sub_214369964(v21, a2, (uint64_t)v4);
          goto LABEL_24;
        }
        return result;
      }
LABEL_31:
      __break(1u);
LABEL_32:
      v7 = sub_21434EAD0(v7);
    }
  }
  v4[2] = v8;
  if ((v4[3] & 0x8000000000000000) != 0)
    v4[3] = v8;
  v9 = swift_isUniquelyReferenced_nonNull_native();
  v21[0] = v4[4];
  v4[4] = 0x8000000000000000;
  sub_2142A2F3C(v8, a2, v9);
  v4[4] = v21[0];
  swift_bridgeObjectRelease();
  v7 = (_QWORD *)v4[1];
  swift_retain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v7 = sub_214223F08(0, v7[2] + 1, 1, v7);
  v11 = v7[2];
  v10 = v7[3];
  if (v11 >= v10 >> 1)
    v7 = sub_214223F08((_QWORD *)(v10 > 1), v11 + 1, 1, v7);
  v7[2] = v11 + 1;
  v12 = &v7[4 * v11];
  v12[4] = -1;
  v12[5] = v3;
  v12[6] = a2;
  v12[7] = a1;
  result = swift_release();
LABEL_24:
  v4[1] = v7;
  return result;
}

uint64_t sub_21436A1F0(uint64_t a1, double a2, double a3)
{
  _QWORD *v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v9;
  unint64_t v10;
  char v11;
  unint64_t v12;
  unint64_t v13;
  double *v14;
  uint64_t result;
  unint64_t v16;
  unint64_t v17;
  char v18;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v20;
  char v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25[2];

  v5 = v3;
  v9 = (_QWORD *)v3[1];
  v10 = v9[2];
  if ((int64_t)v10 >= *v5)
  {
    v16 = v5[3];
    if (v16 >= v10)
    {
      __break(1u);
      goto LABEL_26;
    }
    v17 = sub_214336D80(*(double *)&v9[5 * v16 + 6], *(double *)&v9[5 * v16 + 7]);
    if ((v18 & 1) == 0)
      goto LABEL_17;
    v10 = v17;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v20 = v5[4];
    v25[0] = v20;
    v5[4] = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      goto LABEL_32;
    goto LABEL_16;
  }
  v4 = v5[2];
  swift_bridgeObjectRetain();
  if ((v4 & 0x8000000000000000) == 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      goto LABEL_30;
    while (1)
    {
      if (v4 < v9[2])
      {
        v9[5 * v4 + 4] = v10;
        v5[1] = v9;
        break;
      }
      __break(1u);
LABEL_32:
      sub_2142A8E50();
      v20 = v25[0];
LABEL_16:
      sub_21431FC04(v10, v20);
      v5[4] = v20;
      swift_bridgeObjectRelease();
LABEL_17:
      v10 = v5[3];
      v21 = swift_isUniquelyReferenced_nonNull_native();
      v25[0] = v5[4];
      v5[4] = 0x8000000000000000;
      sub_2142A3068(v10, v21, a2, a3);
      v5[4] = v25[0];
      swift_bridgeObjectRelease();
      v9 = (_QWORD *)v5[1];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      {
        if ((v10 & 0x8000000000000000) != 0)
          goto LABEL_27;
      }
      else
      {
LABEL_26:
        v9 = sub_21434EAF8(v9);
        if ((v10 & 0x8000000000000000) != 0)
        {
LABEL_27:
          __break(1u);
LABEL_28:
          __break(1u);
          goto LABEL_29;
        }
      }
      v22 = v9[2];
      if (v10 >= v22)
        goto LABEL_28;
      v23 = (uint64_t)&v9[5 * v10 + 4];
      *(double *)(v23 + 16) = a2;
      *(double *)(v23 + 24) = a3;
      v10 = v5[3];
      if (v10 < v22)
      {
        swift_bridgeObjectRetain();
        result = swift_bridgeObjectRelease();
        v9[5 * v10 + 8] = a1;
        v5[1] = v9;
        if (v10 != v5[2])
        {
          v24 = v9[2];
          v25[0] = (uint64_t)(v9 + 4);
          v25[1] = v24;
          result = (uint64_t)sub_2143699CC(v25, v10, (uint64_t)v5);
          goto LABEL_23;
        }
        return result;
      }
LABEL_29:
      __break(1u);
LABEL_30:
      v9 = sub_21434EAF8(v9);
    }
  }
  v5[2] = v10;
  if ((v5[3] & 0x8000000000000000) != 0)
    v5[3] = v10;
  v11 = swift_isUniquelyReferenced_nonNull_native();
  v25[0] = v5[4];
  v5[4] = 0x8000000000000000;
  sub_2142A3068(v10, v11, a2, a3);
  v5[4] = v25[0];
  swift_bridgeObjectRelease();
  v9 = (_QWORD *)v5[1];
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v9 = sub_21422435C(0, v9[2] + 1, 1, v9);
  v13 = v9[2];
  v12 = v9[3];
  if (v13 >= v12 >> 1)
    v9 = sub_21422435C((_QWORD *)(v12 > 1), v13 + 1, 1, v9);
  v9[2] = v13 + 1;
  v14 = (double *)&v9[5 * v13];
  v14[4] = NAN;
  *((_QWORD *)v14 + 5) = v4;
  v14[6] = a2;
  v14[7] = a3;
  *((_QWORD *)v14 + 8) = a1;
  result = swift_bridgeObjectRelease();
LABEL_23:
  v5[1] = v9;
  return result;
}

uint64_t sub_21436A4D8(unint64_t a1, size_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  void (*v17)(char *, uint64_t);
  BOOL v18;
  size_t v19;
  void (*v20)(unint64_t, uint64_t, uint64_t);
  uint64_t result;
  char v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  void (*v30)(char *, size_t, uint64_t);
  char isUniquelyReferenced_nonNull_native;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  size_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(unint64_t, uint64_t, uint64_t);
  size_t v41;
  uint64_t v42;
  uint64_t v43[2];

  v3 = v2;
  v6 = sub_214423C54();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_2141D8BF8(&qword_253F11900);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v40 = (void (*)(unint64_t, uint64_t, uint64_t))((char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v11);
  v15 = (unint64_t)&v38 - v14;
  v16 = v2[1];
  v17 = *(void (**)(char *, uint64_t))(v16 + 16);
  v18 = (uint64_t)v17 < *v3;
  v41 = a2;
  v42 = v7;
  if (!v18)
  {
    v40 = (void (*)(unint64_t, uint64_t, uint64_t))a1;
    v28 = v3[3];
    if (v28 >= (unint64_t)v17)
    {
      __break(1u);
    }
    else
    {
      a1 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
      v7 = *(_QWORD *)(v13 + 72);
      v29 = v42;
      v30 = *(void (**)(char *, size_t, uint64_t))(v42 + 16);
      v30(v9, v16 + a1 + v7 * v28 + *(int *)(v10 + 48), v6);
      sub_21436B9CC((uint64_t)v9);
      v17 = *(void (**)(char *, uint64_t))(v29 + 8);
      v17(v9, v6);
      v30(v9, a2, v6);
      v15 = v3[3];
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v43[0] = v3[4];
      v3[4] = 0x8000000000000000;
      sub_2142A3508(v15, (uint64_t)v9, isUniquelyReferenced_nonNull_native);
      v3[4] = v43[0];
      swift_bridgeObjectRelease();
      v17(v9, v6);
      v16 = v3[1];
      v32 = swift_isUniquelyReferenced_nonNull_native();
      v3[1] = v16;
      if ((v32 & 1) != 0)
        goto LABEL_16;
    }
    v16 = sub_21434EBAC((_QWORD *)v16);
    v3[1] = v16;
LABEL_16:
    v20 = v40;
    if ((v15 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v15 < *(_QWORD *)(v16 + 16))
    {
      v9 = (char *)a1;
      (*(void (**)(size_t, size_t, uint64_t))(v42 + 24))(v16 + a1 + v15 * v7 + *(int *)(v10 + 48), v41, v6);
      v16 = v3[3];
      if ((v16 & 0x8000000000000000) == 0)
      {
        v33 = v3[1];
        if (v16 < *(_QWORD *)(v33 + 16))
        {
          v34 = (uint64_t)&v9[v33];
          v35 = *(int *)(v10 + 52);
          swift_retain();
          result = swift_release();
          *(_QWORD *)(v34 + v16 * v7 + v35) = v20;
          v3[1] = v33;
          if (v16 != v3[2])
          {
            v36 = *(_QWORD *)(v33 + 16);
            v43[0] = v34;
            v43[1] = v36;
            result = sub_214369A68(v43, v16, (uint64_t)v3, &qword_253F11900);
            v3[1] = v33;
          }
          return result;
        }
        goto LABEL_28;
      }
LABEL_27:
      __break(1u);
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }
    __break(1u);
    goto LABEL_27;
  }
  v39 = v13;
  v19 = a2;
  v20 = *(void (**)(unint64_t, uint64_t, uint64_t))(v7 + 16);
  v20(v15 + *(int *)(v10 + 48), v19, v6);
  *(_QWORD *)(v15 + *(int *)(v10 + 52)) = a1;
  v10 = v3[2];
  *(_QWORD *)v15 = -1;
  *(_QWORD *)(v15 + 8) = v10;
  swift_retain();
  if ((v10 & 0x8000000000000000) == 0)
  {
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) != 0)
    {
LABEL_5:
      if (v10 >= *(_QWORD *)(v16 + 16))
      {
        __break(1u);
        return result;
      }
      *(_QWORD *)(v16
                + ((*(unsigned __int8 *)(v39 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80))
                + *(_QWORD *)(v39 + 72) * v10) = v17;
      v3[1] = v16;
      goto LABEL_7;
    }
LABEL_29:
    result = sub_21434EBAC((_QWORD *)v16);
    v16 = result;
    goto LABEL_5;
  }
LABEL_7:
  v3[2] = v17;
  if ((v3[3] & 0x8000000000000000) != 0)
    v3[3] = v17;
  v20((unint64_t)v9, v41, v6);
  v22 = swift_isUniquelyReferenced_nonNull_native();
  v43[0] = v3[4];
  v3[4] = 0x8000000000000000;
  sub_2142A3508((uint64_t)v17, (uint64_t)v9, v22);
  v3[4] = v43[0];
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v42 + 8))(v9, v6);
  v23 = (uint64_t)v40;
  sub_2141E070C(v15, (uint64_t)v40, &qword_253F11900);
  v24 = (_QWORD *)v3[1];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v24 = (_QWORD *)sub_214225694(0, v24[2] + 1, 1, v24);
  v26 = v24[2];
  v25 = v24[3];
  v27 = v39;
  if (v26 >= v25 >> 1)
  {
    v37 = sub_214225694(v25 > 1, v26 + 1, 1, v24);
    v27 = v39;
    v24 = (_QWORD *)v37;
  }
  v24[2] = v26 + 1;
  sub_2141E801C(v23, (uint64_t)v24+ ((*(unsigned __int8 *)(v27 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80))+ *(_QWORD *)(v27 + 72) * v26, &qword_253F11900);
  v3[1] = v24;
  return sub_2141E0750(v15, &qword_253F11900);
}

uint64_t sub_21436A938()
{
  sub_214425874();
  sub_21436BBC8();
  return sub_2144258B0();
}

uint64_t sub_21436A988()
{
  return sub_21436BBC8();
}

uint64_t sub_21436A990()
{
  sub_214425874();
  sub_21436BBC8();
  return sub_2144258B0();
}

BOOL sub_21436A9DC(double *a1, double *a2)
{
  return a1[1] == a2[1] && *a1 == *a2;
}

uint64_t FunctionSampler.__allocating_init(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 72) = 0;
  *(_QWORD *)(v4 + 80) = 0;
  *(_BYTE *)(v4 + 88) = 1;
  *(_QWORD *)(v4 + 96) = 0;
  *(_QWORD *)(v4 + 104) = 0;
  *(_BYTE *)(v4 + 112) = 1;
  *(_BYTE *)(v4 + 144) = 1;
  *(_QWORD *)(v4 + 16) = a1;
  *(_QWORD *)(v4 + 24) = a2;
  v5 = MEMORY[0x24BEE4AF8];
  v6 = sub_21436D368(MEMORY[0x24BEE4AF8]);
  *(_QWORD *)(v4 + 32) = 100;
  *(_QWORD *)(v4 + 40) = v5;
  *(_QWORD *)(v4 + 48) = -1;
  *(_QWORD *)(v4 + 56) = -1;
  *(_QWORD *)(v4 + 64) = v6;
  *(_QWORD *)(v4 + 120) = 0x3FF8000000000000;
  *(_OWORD *)(v4 + 128) = xmmword_21442E800;
  return v4;
}

uint64_t FunctionSampler.init(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  *(_QWORD *)(v2 + 72) = 0;
  *(_QWORD *)(v2 + 80) = 0;
  *(_BYTE *)(v2 + 88) = 1;
  *(_QWORD *)(v2 + 96) = 0;
  *(_QWORD *)(v2 + 104) = 0;
  *(_BYTE *)(v2 + 112) = 1;
  *(_QWORD *)(v2 + 136) = 0;
  *(_BYTE *)(v2 + 144) = 1;
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  v3 = MEMORY[0x24BEE4AF8];
  v4 = sub_21436D368(MEMORY[0x24BEE4AF8]);
  *(_QWORD *)(v2 + 32) = 100;
  *(_QWORD *)(v2 + 40) = v3;
  *(_QWORD *)(v2 + 48) = -1;
  *(_QWORD *)(v2 + 56) = -1;
  *(_QWORD *)(v2 + 64) = v4;
  *(_QWORD *)(v2 + 120) = 0x3FF8000000000000;
  *(_QWORD *)(v2 + 128) = 5;
  return v2;
}

uint64_t sub_21436AAF8()
{
  uint64_t v0;

  swift_beginAccess();
  return *(_QWORD *)(v0 + 136);
}

uint64_t sub_21436AB2C(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_beginAccess();
  *(_QWORD *)(v2 + 136) = a1;
  *(_BYTE *)(v2 + 144) = a2 & 1;
  *(_QWORD *)(v2 + 96) = 0;
  *(_QWORD *)(v2 + 104) = 0;
  *(_BYTE *)(v2 + 112) = 1;
  return result;
}

uint64_t (*sub_21436AB88(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  swift_beginAccess();
  return sub_21436ABC8;
}

uint64_t sub_21436ABC8(uint64_t a1, char a2)
{
  uint64_t result;
  uint64_t v5;

  result = swift_endAccess();
  if ((a2 & 1) == 0)
  {
    v5 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(v5 + 96) = 0;
    *(_QWORD *)(v5 + 104) = 0;
    *(_BYTE *)(v5 + 112) = 1;
  }
  return result;
}

void sub_21436AC00()
{
  uint64_t v0;
  double (*v1)(double);
  double v2;
  char v3;
  double v4;
  double v5;
  double v6;
  double v7;
  char v8;
  char v9;
  double v10;
  char v11;
  __n128 v12;

  if ((*(_BYTE *)(v0 + 88) & 1) != 0)
  {
    v1 = *(double (**)(double))(v0 + 16);
    sub_21437F8AC(v1, 0.014959965, 659.734457, *(_QWORD *)(v0 + 24), 1000);
    if ((v3 & 1) == 0)
    {
      v4 = v2 * -1.5;
      v5 = v2 * 1.5;
      if (v2 * -1.5 > v2 * 1.5)
      {
        __break(1u);
        return;
      }
LABEL_18:
      *(double *)(v0 + 72) = v4;
      *(double *)(v0 + 80) = v5;
      *(_BYTE *)(v0 + 88) = 0;
      return;
    }
    sub_21437FEE0((double (*)(void))v1);
    v7 = v6;
    v9 = v8;
    sub_21438056C(v1);
    if ((v9 & 1) == 0)
    {
      v5 = v7;
      if ((v11 & 1) != 0)
      {
LABEL_15:
        if (v5 < 0.0)
        {
          __break(1u);
          return;
        }
        goto LABEL_16;
      }
      v12.n128_f64[0] = v10;
      if (v7 <= v10)
        v5 = v10;
      if (v5 >= 0.0)
      {
LABEL_16:
        v4 = -v5;
        goto LABEL_18;
      }
      __break(1u);
    }
    if ((v11 & 1) != 0)
    {
      sub_214380DA0((uint64_t (*)(__n128))v1, v12);
      goto LABEL_18;
    }
    v5 = v10;
    if (v10 >= 0.0)
      goto LABEL_16;
    __break(1u);
    goto LABEL_15;
  }
}

void sub_21436AD00()
{
  uint64_t v0;
  double (*v1)(double);
  double v2;
  char v3;
  double v4;
  double v5;
  double v6;
  double v7;
  char v8;
  char v9;
  double v10;
  char v11;
  __n128 v12;
  double v13;
  double v14;
  uint64_t v15;
  uint64_t v16;

  if ((*(_BYTE *)(v0 + 112) & 1) != 0)
  {
    if ((*(_BYTE *)(v0 + 88) & 1) == 0)
    {
      v4 = *(double *)(v0 + 72);
      v5 = *(double *)(v0 + 80);
LABEL_21:
      swift_beginAccess();
      sub_21437C100((char *)1, 1, *(_QWORD *)(v0 + 136), *(_BYTE *)(v0 + 144), *(double (**)(double))(v0 + 16), v4, v5);
      *(_QWORD *)(v0 + 96) = v15;
      *(_QWORD *)(v0 + 104) = v16;
      *(_BYTE *)(v0 + 112) = 0;
      return;
    }
    v1 = *(double (**)(double))(v0 + 16);
    sub_21437F8AC(v1, 0.014959965, 659.734457, *(_QWORD *)(v0 + 24), 1000);
    if ((v3 & 1) == 0)
    {
      v4 = v2 * -1.5;
      v5 = v2 * 1.5;
      if (v2 * -1.5 > v2 * 1.5)
      {
        __break(1u);
        return;
      }
      goto LABEL_20;
    }
    sub_21437FEE0((double (*)(void))v1);
    v7 = v6;
    v9 = v8;
    sub_21438056C(v1);
    if ((v9 & 1) == 0)
    {
      v5 = v7;
      if ((v11 & 1) != 0)
        goto LABEL_17;
      v12.n128_f64[0] = v10;
      if (v7 <= v10)
        v5 = v10;
      if (v5 >= 0.0)
      {
LABEL_18:
        v4 = -v5;
LABEL_20:
        *(double *)(v0 + 72) = v4;
        *(double *)(v0 + 80) = v5;
        *(_BYTE *)(v0 + 88) = 0;
        goto LABEL_21;
      }
      __break(1u);
    }
    if ((v11 & 1) != 0)
    {
      sub_214380DA0((uint64_t (*)(__n128))v1, v12);
      v4 = v13;
      v5 = v14;
      goto LABEL_20;
    }
    v5 = v10;
    if (v10 < 0.0)
    {
      __break(1u);
LABEL_17:
      if (v5 < 0.0)
      {
        __break(1u);
        return;
      }
      goto LABEL_18;
    }
    goto LABEL_18;
  }
}

uint64_t sub_21436AE64@<X0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float64x2_t v13;
  float64x2_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  float64x2_t v19;
  float64x2_t v20;
  uint64_t v21;
  double v22;
  double v23;
  double v24;
  float64x2_t v26;
  float64x2_t v27;
  double v29;
  float64x2_t v30;
  double v31;
  double v32;
  double v33;
  double v35;
  float64x2_t v37;
  float64x2_t v38;
  int64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  uint64_t result;
  unsigned __int8 v45;
  float64_t v46;
  float64_t v47;
  float64_t v48;
  float64_t v49;
  BOOL v50;
  float64_t v51;
  float64_t v52;
  float64_t v53;
  float64_t v54;
  float64x2_t v55;
  float64x2_t v56;

  v10 = sub_21436B118(0, 2u, 0, 2u, a2, a3, 1.0, 0.0, 1.0, 0.0);
  v11 = *(_QWORD *)(v10 + 16);
  if (!v11)
  {
    result = swift_bridgeObjectRelease();
    v51 = 0.0;
    v52 = 0.0;
    v53 = 0.0;
    v54 = 0.0;
    v50 = 1;
    goto LABEL_69;
  }
  v12 = 0;
  v13 = (float64x2_t)vdupq_n_s64(0xFFF0000000000000);
  v14 = (float64x2_t)vdupq_n_s64(0x7FF0000000000000uLL);
  do
  {
    v15 = *(_QWORD *)(v10 + 32 + 8 * v12);
    v16 = *(_QWORD *)(v15 + 16);
    if (v16)
      v17 = v16 == 1;
    else
      v17 = 1;
    if (!v17)
    {
      v19 = *(float64x2_t *)(v15 + 32);
      v18 = v15 + 32;
      v20 = v19;
      v21 = 1;
      while (1)
      {
        v26 = v20;
        v20 = *(float64x2_t *)(v18 + 16 * v21);
        v27 = vsubq_f64(v26, v20);
        if (fabs(v27.f64[0]) >= 0.00000001)
        {
          v31 = (a2 - v20.f64[0]) / v27.f64[0];
          v32 = (a3 - v20.f64[0]) / v27.f64[0];
          if (v32 >= v31)
            v33 = (a3 - v20.f64[0]) / v27.f64[0];
          else
            v33 = (a2 - v20.f64[0]) / v27.f64[0];
          if (v32 < v31)
            v31 = (a3 - v20.f64[0]) / v27.f64[0];
          if (v33 < 0.0 || v31 > 1.0)
            goto LABEL_18;
          if (v33 <= 1.0)
            v35 = v33;
          else
            v35 = 1.0;
          if (v31 < 0.0)
            v31 = 0.0;
          v30 = vaddq_f64(v20, vmulq_n_f64(v27, v31));
          v26 = vaddq_f64(v20, vmulq_n_f64(v27, v35));
          v29 = v30.f64[1];
          v27 = vsubq_f64(v26, v30);
          v27.f64[0] = v27.f64[1];
        }
        else
        {
          if (v20.f64[0] < a2 || v20.f64[0] > a3)
            goto LABEL_18;
          v29 = *(double *)(v18 + 16 * v21 + 8);
          v27.f64[0] = v27.f64[1];
          v30 = *(float64x2_t *)(v18 + 16 * v21);
        }
        if (fabs(v27.f64[0]) >= 0.00000001)
        {
          v22 = (a4 - v29) / v27.f64[0];
          v23 = (a5 - v29) / v27.f64[0];
          if (v23 >= v22)
            v24 = (a5 - v29) / v27.f64[0];
          else
            v24 = (a4 - v29) / v27.f64[0];
          if (v23 < v22)
            v22 = (a5 - v29) / v27.f64[0];
          if (v24 < 0.0 || v22 > 1.0)
            goto LABEL_18;
          v39 = (int64x2_t)vsubq_f64(v26, v30);
          if (v24 > 1.0)
            v24 = 1.0;
          if (v22 < 0.0)
            v22 = 0.0;
          v40 = (float64x2_t)vzip1q_s64((int64x2_t)v27, v39);
          v41 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v30.f64[0], 0);
          v41.f64[0] = v29;
          v38 = vaddq_f64(v41, vmulq_n_f64(v40, v22));
          v37 = vaddq_f64(v41, vmulq_n_f64(v40, v24));
LABEL_52:
          v42 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v14, v38), (int8x16_t)v38, (int8x16_t)v14);
          v14 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v42, v37), (int8x16_t)v37, (int8x16_t)v42);
          v43 = (float64x2_t)vbslq_s8((int8x16_t)vcgeq_f64(v38, v13), (int8x16_t)v38, (int8x16_t)v13);
          v13 = (float64x2_t)vbslq_s8((int8x16_t)vcgeq_f64(v37, v43), (int8x16_t)v37, (int8x16_t)v43);
          if (v16 - 1 == v21)
            break;
          ++v21;
        }
        else
        {
          if (v29 >= a4 && v29 <= a5)
          {
            v37 = (float64x2_t)vextq_s8((int8x16_t)v26, (int8x16_t)v26, 8uLL);
            v38 = (float64x2_t)vextq_s8((int8x16_t)v30, (int8x16_t)v30, 8uLL);
            goto LABEL_52;
          }
LABEL_18:
          if (v16 == ++v21)
            break;
        }
      }
    }
    ++v12;
  }
  while (v12 != v11);
  v55 = v14;
  v56 = v13;
  result = swift_bridgeObjectRelease();
  v45 = vmovn_s64((int64x2_t)vmvnq_s8((int8x16_t)vcgeq_f64(v56, v55))).u8[0];
  v46 = v55.f64[1];
  v47 = v56.f64[1];
  v48 = v55.f64[0];
  v49 = v56.f64[0];
  v50 = (v45 & 1) != 0;
  if ((v45 & 1) != 0)
  {
    v46 = 0.0;
    v47 = 0.0;
    v48 = 0.0;
    v49 = 0.0;
  }
  if (v55.f64[1] <= v56.f64[1])
  {
    v51 = v46;
  }
  else
  {
    v50 = 1;
    v51 = 0.0;
  }
  if (v55.f64[1] <= v56.f64[1])
    v52 = v47;
  else
    v52 = 0.0;
  if (v55.f64[1] <= v56.f64[1])
    v53 = v48;
  else
    v53 = 0.0;
  if (v55.f64[1] <= v56.f64[1])
    v54 = v49;
  else
    v54 = 0.0;
LABEL_69:
  *(float64_t *)a1 = v51;
  *(float64_t *)(a1 + 8) = v52;
  *(float64_t *)(a1 + 16) = v53;
  *(float64_t *)(a1 + 24) = v54;
  *(_BYTE *)(a1 + 32) = v50;
  return result;
}

uint64_t sub_21436B118(uint64_t a1, unsigned __int8 a2, uint64_t a3, unsigned __int8 a4, double a5, double a6, float64_t a7, float64_t a8, float64_t a9, float64_t a10)
{
  uint64_t v10;
  double v15;
  uint64_t v16;
  double v18;
  double v20;
  uint64_t v21;
  long double v22;
  long double v23;
  uint64_t v24;
  double v25;
  double v26;
  float64x2_t v27;
  float64x2_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  double v33;
  __n128 v34;
  __n128 v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  unint64_t v39;
  _QWORD *v40;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v42;
  uint64_t *v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  int64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  int64_t v65;
  int64_t v66;
  _QWORD *v67;
  int64_t v68;
  uint64_t v69;
  BOOL v70;
  uint64_t v71;
  uint64_t result;
  float64x2_t v73;
  uint64_t v74;
  char v75;
  _QWORD *v76;
  uint64_t v77;
  float64x2_t v79;
  float64x2_t v81;
  int64_t v83;
  _QWORD *v85;

  if (a2 < 2u || a1 != 0 || a4 < 2u || a3 != 0)
    goto LABEL_84;
  v15 = (a5 - a8) / a7;
  if ((~*(_QWORD *)&v15 & 0x7FF0000000000000) == 0)
    return MEMORY[0x24BEE4AF8];
  v18 = (a6 - a8) / a7;
  v16 = MEMORY[0x24BEE4AF8];
  if ((~*(_QWORD *)&v18 & 0x7FF0000000000000) == 0 || v15 == v18)
    return v16;
  if (v18 >= v15)
    v20 = v15;
  else
    v20 = v18;
  if (v15 <= v18)
    v15 = v18;
  if (v20 > v15)
    goto LABEL_83;
  v21 = v10;
  v22 = log(v15 - v20);
  v23 = pow(1.5, ceil(v22 / 0.405465108));
  v75 = 0;
  v24 = 0;
  v25 = v23 / 5.0;
  v26 = v23 / 5.0 * floor(v20 / (v23 / 5.0));
  v27.f64[0] = a7;
  v28.f64[0] = a8;
  v27.f64[1] = a9;
  v79 = v27;
  v28.f64[1] = a10;
  v29 = (_QWORD *)v16;
  v74 = v10;
  v81 = v28;
  while (1)
  {
    if (v24 >= 5)
    {
      if ((v24 != 5) | v75 & 1)
      {
        v16 = sub_21436D778((uint64_t)v29, a5, a6);
        swift_bridgeObjectRelease();
        return v16;
      }
      v75 = 1;
      v30 = 6;
      v31 = 5;
    }
    else
    {
      v30 = v24 + 1;
      v31 = v24 + 1;
    }
    v32 = v26 + v25 * (double)v24;
    v33 = v26 + v25 * (double)v30;
    if (v32 > v33)
      break;
    swift_beginAccess();
    v36 = *(_QWORD *)(v21 + 64);
    if (*(_QWORD *)(v36 + 16)
      && (v37 = sub_214336D80(v32, v33), (v38 & 1) != 0)
      && (v39 = *(_QWORD *)(*(_QWORD *)(v36 + 56) + 8 * v37), (v39 & 0x8000000000000000) == 0))
    {
      v40 = *(_QWORD **)(v21 + 40);
      if (v39 != *(_QWORD *)(v21 + 48))
      {
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v21 + 40) = v40;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v40 = sub_21434EAF8(v40);
          *(_QWORD *)(v21 + 40) = v40;
        }
        v42 = v40 + 4;
        v43 = &v40[5 * v39 + 4];
        v44 = *v43;
        if ((*v43 & 0x8000000000000000) == 0)
          v42[5 * v44 + 1] = v42[5 * v39 + 1];
        v45 = &v42[5 * v39];
        v48 = v45[1];
        v46 = v45 + 1;
        v47 = v48;
        if ((v48 & 0x8000000000000000) == 0)
          v42[5 * v47] = v44;
        if (v39 == *(_QWORD *)(v21 + 56))
          *(_QWORD *)(v21 + 56) = *v43;
        *v43 = -1;
        v42[5 * *(_QWORD *)(v21 + 48)] = v39;
        *v46 = *(_QWORD *)(v21 + 48);
        *(_QWORD *)(v21 + 40) = v40;
        *(_QWORD *)(v21 + 48) = v39;
      }
      if (v39 >= v40[2])
        goto LABEL_82;
      v49 = (_QWORD *)v40[5 * v39 + 8];
      swift_bridgeObjectRetain();
    }
    else
    {
      v34.n128_f64[0] = v32;
      v35.n128_f64[0] = v33;
      v49 = sub_21437D614(4, 7, 1, *(_QWORD *)(v21 + 16), *(_QWORD **)(v21 + 24), v34, v35);
      sub_21436A1F0((uint64_t)v49, v32, v33);
    }
    v77 = v31;
    swift_endAccess();
    v50 = v49[2];
    if (v50)
    {
      v76 = v29;
      sub_2141D3B88(0, v50, 0);
      v51 = 0;
      v52 = v16;
      v85 = v49 + 4;
      v83 = v50;
      do
      {
        v53 = v85[v51];
        v54 = *(_QWORD *)(v53 + 16);
        if (v54)
        {
          swift_bridgeObjectRetain();
          sub_2141D3BB4(0, v54, 0);
          v55 = 0;
          v56 = v16;
          v57 = *(_QWORD *)(v16 + 16);
          v59 = v79;
          v58 = v81;
          do
          {
            v60 = *(float64x2_t *)(v53 + 16 * v55 + 32);
            v61 = *(_QWORD *)(v16 + 24);
            if (v57 >= v61 >> 1)
            {
              v73 = *(float64x2_t *)(v53 + 16 * v55 + 32);
              sub_2141D3BB4((char *)(v61 > 1), v57 + 1, 1);
              v60 = v73;
              v59 = v79;
              v58 = v81;
            }
            ++v55;
            *(_QWORD *)(v16 + 16) = v57 + 1;
            *(float64x2_t *)(v16 + 16 * v57++ + 32) = vaddq_f64(vmulq_f64(v60, v59), v58);
          }
          while (v54 != v55);
          swift_bridgeObjectRelease();
          v50 = v83;
        }
        else
        {
          v56 = v16;
        }
        v63 = *(_QWORD *)(v16 + 16);
        v62 = *(_QWORD *)(v16 + 24);
        if (v63 >= v62 >> 1)
          sub_2141D3B88((_QWORD *)(v62 > 1), v63 + 1, 1);
        ++v51;
        *(_QWORD *)(v16 + 16) = v63 + 1;
        *(_QWORD *)(v16 + 8 * v63 + 32) = v56;
      }
      while (v51 != v50);
      swift_bridgeObjectRelease();
      v29 = v76;
    }
    else
    {
      swift_bridgeObjectRelease();
      v52 = v16;
    }
    v64 = *(_QWORD *)(v52 + 16);
    v65 = v29[2];
    v66 = v65 + v64;
    if (__OFADD__(v65, v64))
      goto LABEL_78;
    v67 = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
    if ((_DWORD)v67 && v66 <= v29[3] >> 1)
    {
      if (*(_QWORD *)(v52 + 16))
        goto LABEL_71;
    }
    else
    {
      if (v65 <= v66)
        v68 = v65 + v64;
      else
        v68 = v65;
      v29 = sub_21422423C(v67, v68, 1, v29);
      if (*(_QWORD *)(v52 + 16))
      {
LABEL_71:
        if ((v29[3] >> 1) - v29[2] < v64)
          goto LABEL_80;
        sub_2141D8BF8(&qword_254D690F8);
        swift_arrayInitWithCopy();
        if (v64)
        {
          v69 = v29[2];
          v70 = __OFADD__(v69, v64);
          v71 = v69 + v64;
          if (v70)
            goto LABEL_81;
          v29[2] = v71;
        }
        goto LABEL_26;
      }
    }
    if (v64)
      goto LABEL_79;
LABEL_26:
    swift_bridgeObjectRelease();
    v24 = v77;
    v21 = v74;
  }
  __break(1u);
LABEL_78:
  __break(1u);
LABEL_79:
  __break(1u);
LABEL_80:
  __break(1u);
LABEL_81:
  __break(1u);
LABEL_82:
  __break(1u);
LABEL_83:
  __break(1u);
LABEL_84:
  result = sub_214425628();
  __break(1u);
  return result;
}

uint64_t sub_21436B6BC(unint64_t a1, uint64_t a2, uint64_t *a3, double a4)
{
  uint64_t v4;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;

  v7 = *(_QWORD *)(a2 + 16);
  if (v7)
  {
    v8 = 0;
    v9 = *(_QWORD *)(a2 + 16);
    while (1)
    {
      v10 = v9 >> 1;
      v11 = v8 + (v9 >> 1);
      if (__OFADD__(v8, v9 >> 1))
        break;
      if (v11 >= v7)
        goto LABEL_16;
      v9 += ~v10;
      if (*(double *)(a2 + 32 + 16 * v11) < a4)
        v8 = v11 + 1;
      else
        v9 = v10;
      if ((uint64_t)v9 <= 0)
        goto LABEL_11;
    }
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    result = (uint64_t)sub_21434EC4C(v4);
    v4 = result;
    if ((a1 & 0x8000000000000000) != 0)
      goto LABEL_18;
    goto LABEL_13;
  }
  v8 = 0;
LABEL_11:
  v4 = *a3;
  result = swift_isUniquelyReferenced_nonNull_native();
  *a3 = v4;
  if ((result & 1) == 0)
    goto LABEL_17;
  if ((a1 & 0x8000000000000000) != 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
LABEL_13:
  if (*(_QWORD *)(v4 + 16) > a1)
  {
    v13 = v4 + 16 * a1;
    *(_QWORD *)(v13 + 32) = v8;
    *(_BYTE *)(v13 + 40) = 0;
    *a3 = v4;
    return v8 < (uint64_t)v7;
  }
LABEL_19:
  __break(1u);
  return result;
}

uint64_t sub_21436B79C(unint64_t a1, uint64_t a2, uint64_t *a3, double a4, double a5)
{
  uint64_t v5;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;

  v8 = *(_QWORD *)(a2 + 16);
  if (v8)
  {
    v9 = *(_QWORD *)(a2 + 16);
    v10 = v9;
    while (1)
    {
      v11 = (unint64_t)v9 >> 1;
      v12 = ~((unint64_t)v9 >> 1);
      if (v10 + v12 >= v8)
        break;
      v9 += v12;
      if (*(double *)(a2 + 32 + 16 * (v10 + v12)) > a5)
        v10 += v12;
      else
        v9 = v11;
      if (v9 <= 0)
        goto LABEL_10;
    }
    __break(1u);
    goto LABEL_17;
  }
  v10 = 0;
LABEL_10:
  v5 = *a3;
  result = swift_isUniquelyReferenced_nonNull_native();
  *a3 = v5;
  if ((result & 1) == 0)
  {
LABEL_17:
    result = (uint64_t)sub_21434EC4C(v5);
    v5 = result;
    if ((a1 & 0x8000000000000000) != 0)
      goto LABEL_18;
    goto LABEL_12;
  }
  if ((a1 & 0x8000000000000000) != 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
LABEL_12:
  if (*(_QWORD *)(v5 + 16) <= a1)
  {
LABEL_19:
    __break(1u);
    return result;
  }
  result = v10 > 0;
  v14 = v10 - 1;
  if (v10 < 1)
    v14 = 0;
  v15 = v5 + 16 * a1;
  *(_QWORD *)(v15 + 32) = v14;
  *(_BYTE *)(v15 + 40) = v10 < 1;
  *a3 = v5;
  return result;
}

uint64_t FunctionSampler.deinit()
{
  uint64_t v0;

  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t FunctionSampler.__deallocating_deinit()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_21436B8F0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  unint64_t v4;
  char v5;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v2 = v1;
  swift_bridgeObjectRetain();
  v4 = sub_214336C24(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v7 = *v1;
  v12 = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_2142A69C0();
    v7 = v12;
  }
  v8 = *(_QWORD *)(v7 + 48);
  v9 = type metadata accessor for CalendarCache.Key(0);
  sub_21436E338(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * v4);
  v10 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v4);
  sub_21431EF60(v4, v7);
  *v2 = v7;
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_21436B9CC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  unint64_t v4;
  char v5;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v2 = v1;
  swift_bridgeObjectRetain();
  v4 = sub_214336EFC(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v7 = *v1;
  v12 = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_2142A9DB4();
    v7 = v12;
  }
  v8 = *(_QWORD *)(v7 + 48);
  v9 = sub_214423C54();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * v4, v9);
  v10 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v4);
  sub_21431FDD4(v4, v7);
  *v2 = v7;
  swift_bridgeObjectRelease();
  return v10;
}

unint64_t sub_21436BAB0(unint64_t result, int64_t a2, __n128 a3)
{
  unint64_t *v3;
  unint64_t v5;
  int64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  int64_t v11;
  __n128 *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  __n128 *v16;
  uint64_t v17;
  uint64_t v18;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_21;
  }
  v5 = *v3;
  v6 = *(_QWORD *)(*v3 + 16);
  if (v6 < a2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v7 = result;
  v8 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = 1 - v8;
  if (__OFSUB__(1, v8))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v10 = v6 + v9;
  if (__OFADD__(v6, v9))
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  result = swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)result || v10 > *(_QWORD *)(v5 + 24) >> 1)
  {
    if (v6 <= v10)
      v11 = v6 + v9;
    else
      v11 = v6;
    result = (unint64_t)sub_214224144((char *)result, v11, 1, (char *)v5);
    v5 = result;
  }
  v12 = (__n128 *)(v5 + 32 + 16 * v7);
  if (!v9)
    goto LABEL_19;
  v13 = *(_QWORD *)(v5 + 16);
  v14 = __OFSUB__(v13, a2);
  v15 = v13 - a2;
  if (v14)
    goto LABEL_25;
  result = (unint64_t)v12[1].n128_u64;
  v16 = (__n128 *)(v5 + 32 + 16 * a2);
  if (&v12[1] != v16 || result >= (unint64_t)v16[v15].n128_u64)
    result = (unint64_t)memmove((void *)result, v16, 16 * v15);
  v17 = *(_QWORD *)(v5 + 16);
  v14 = __OFADD__(v17, v9);
  v18 = v17 + v9;
  if (!v14)
  {
    *(_QWORD *)(v5 + 16) = v18;
LABEL_19:
    *v12 = a3;
    *v3 = v5;
    return result;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_21436BBC8()
{
  sub_214425898();
  return sub_214425898();
}

unint64_t sub_21436BC10(_QWORD *a1)
{
  return sub_21436BC34(a1, &qword_253F10BA0);
}

unint64_t sub_21436BC1C(_QWORD *a1)
{
  return sub_21436BE44(a1, &qword_253F101A8);
}

unint64_t sub_21436BC28(_QWORD *a1)
{
  return sub_21436BC34(a1, &qword_254D6A468);
}

unint64_t sub_21436BC34(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  char v16;

  v2 = a1[2];
  if (!v2)
    return MEMORY[0x24BEE4B00];
  sub_2141D8BF8(a2);
  v4 = (_QWORD *)sub_2144256D0();
  v6 = a1[4];
  v5 = a1[5];
  result = sub_21433AB28(v6);
  if ((v8 & 1) != 0)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_bridgeObjectRetain();
    return (unint64_t)v4;
  }
  v9 = a1 + 7;
  while (1)
  {
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = 8 * result;
    *(_QWORD *)(v4[6] + v10) = v6;
    *(_QWORD *)(v4[7] + v10) = v5;
    v11 = v4[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      break;
    v4[2] = v13;
    if (!--v2)
      goto LABEL_8;
    v14 = v9 + 2;
    v6 = *(v9 - 1);
    v15 = *v9;
    swift_bridgeObjectRetain();
    result = sub_21433AB28(v6);
    v9 = v14;
    v5 = v15;
    if ((v16 & 1) != 0)
      goto LABEL_7;
  }
  __break(1u);
  return result;
}

unint64_t sub_21436BD2C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t i;
  uint64_t v5;
  unint64_t result;
  char v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_2141D8BF8(&qword_254D6A460);
    v3 = (_QWORD *)sub_2144256D0();
    for (i = a1 + 32; ; i += 56)
    {
      sub_2141E070C(i, (uint64_t)&v11, &qword_254D6C640);
      v5 = v11;
      result = sub_21433AB28(v11);
      if ((v7 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(_QWORD *)(v3[6] + 8 * result) = v5;
      result = sub_2142AAEF0((uint64_t)&v12, v3[7] + 48 * result);
      v8 = v3[2];
      v9 = __OFADD__(v8, 1);
      v10 = v8 + 1;
      if (v9)
        goto LABEL_10;
      v3[2] = v10;
      if (!--v1)
        return (unint64_t)v3;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4B00];
  }
  return result;
}

unint64_t sub_21436BE38(_QWORD *a1)
{
  return sub_21436BE44(a1, &qword_253F10410);
}

unint64_t sub_21436BE44(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  _QWORD *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  char v17;

  v2 = a1[2];
  if (!v2)
    return MEMORY[0x24BEE4B00];
  sub_2141D8BF8(a2);
  v4 = (_QWORD *)sub_2144256D0();
  v5 = a1[4];
  v6 = a1[5];
  v7 = a1[6];
  result = sub_21433AB28(v5);
  if ((v9 & 1) != 0)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_bridgeObjectRetain();
    return (unint64_t)v4;
  }
  v10 = a1 + 9;
  while (1)
  {
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_QWORD *)(v4[6] + 8 * result) = v5;
    v11 = (_QWORD *)(v4[7] + 16 * result);
    *v11 = v6;
    v11[1] = v7;
    v12 = v4[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      break;
    v4[2] = v14;
    if (!--v2)
      goto LABEL_8;
    v15 = v10 + 3;
    v5 = *(v10 - 2);
    v6 = *(v10 - 1);
    v16 = *v10;
    swift_bridgeObjectRetain();
    result = sub_21433AB28(v5);
    v10 = v15;
    v7 = v16;
    if ((v17 & 1) != 0)
      goto LABEL_7;
  }
  __break(1u);
  return result;
}

_QWORD *sub_21436BF4C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t v6;
  __int16 v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  unint64_t v11;
  char v12;
  unsigned __int8 *v13;
  uint64_t v14;
  _QWORD *result;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v22;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x24BEE4B00];
  sub_2141D8BF8(&qword_253F13570);
  v3 = (_QWORD *)sub_2144256D0();
  v4 = *(_BYTE *)(a1 + 32);
  v20 = *(_BYTE *)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 64);
  v21 = *(_QWORD *)(a1 + 40);
  v22 = *(_QWORD *)(a1 + 56);
  v6 = *(_QWORD *)(a1 + 72);
  v7 = *(_WORD *)(a1 + 80);
  v8 = *(_QWORD *)(a1 + 88);
  v9 = *(_QWORD *)(a1 + 96);
  v10 = *(_BYTE *)(a1 + 104);
  v11 = sub_214336B74(v4);
  if ((v12 & 1) != 0)
  {
LABEL_7:
    __break(1u);
    return (_QWORD *)MEMORY[0x24BEE4B00];
  }
  v13 = (unsigned __int8 *)(a1 + 184);
  while (1)
  {
    *(_QWORD *)((char *)v3 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v11;
    *(_BYTE *)(v3[6] + v11) = v4;
    v14 = v3[7] + 72 * v11;
    result = (_QWORD *)v22;
    *(_QWORD *)v14 = v21;
    *(_BYTE *)(v14 + 8) = v20;
    *(_QWORD *)(v14 + 16) = v22;
    *(_QWORD *)(v14 + 24) = v5;
    *(_QWORD *)(v14 + 32) = v6;
    *(_WORD *)(v14 + 40) = v7;
    *(_QWORD *)(v14 + 48) = v8;
    *(_QWORD *)(v14 + 56) = v9;
    *(_BYTE *)(v14 + 64) = v10;
    v16 = v3[2];
    v17 = __OFADD__(v16, 1);
    v18 = v16 + 1;
    if (v17)
      break;
    v3[2] = v18;
    sub_2141D8CE8(v22, v5, v6, v7);
    sub_2141D8CFC(v8, v9, v10);
    if (!--v1)
      return v3;
    v4 = *(v13 - 72);
    v20 = *(v13 - 56);
    v5 = *((_QWORD *)v13 - 5);
    v21 = *((_QWORD *)v13 - 8);
    v22 = *((_QWORD *)v13 - 6);
    v6 = *((_QWORD *)v13 - 4);
    v7 = *((_WORD *)v13 - 12);
    v8 = *((_QWORD *)v13 - 2);
    v9 = *((_QWORD *)v13 - 1);
    v10 = *v13;
    v11 = sub_214336B74(v4);
    v13 += 80;
    if ((v19 & 1) != 0)
      goto LABEL_7;
  }
  __break(1u);
  return result;
}

unint64_t sub_21436C0DC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t i;
  uint64_t v5;
  unint64_t result;
  char v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_2141D8BF8(&qword_253F13310);
    v3 = (_QWORD *)sub_2144256D0();
    for (i = a1 + 32; ; i += 48)
    {
      sub_2141E070C(i, (uint64_t)&v11, &qword_254D6C660);
      v5 = v11;
      result = sub_214336CE4(v11);
      if ((v7 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(_QWORD *)(v3[6] + 8 * result) = v5;
      result = sub_2141D8DC0(&v12, v3[7] + 40 * result);
      v8 = v3[2];
      v9 = __OFADD__(v8, 1);
      v10 = v8 + 1;
      if (v9)
        goto LABEL_10;
      v3[2] = v10;
      if (!--v1)
        return (unint64_t)v3;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4B00];
  }
  return result;
}

unint64_t sub_21436C1E8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t *v4;
  unsigned __int8 v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  unint64_t result;
  char v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_2141D8BF8(&qword_253F13560);
    v3 = (_QWORD *)sub_2144256D0();
    v4 = (uint64_t *)(a1 + 56);
    while (1)
    {
      v19 = v1;
      v5 = *((_BYTE *)v4 - 24);
      v6 = *(v4 - 2);
      v7 = *((_BYTE *)v4 - 8);
      v9 = *v4;
      v8 = v4[1];
      v10 = v4[2];
      v11 = *((_WORD *)v4 + 12);
      v12 = v4[4];
      v21 = v4[5];
      v20 = *((_BYTE *)v4 + 48);
      result = sub_214336B74(v5);
      if ((v14 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(_BYTE *)(v3[6] + result) = v5;
      v15 = v3[7] + 72 * result;
      *(_QWORD *)v15 = v6;
      *(_BYTE *)(v15 + 8) = v7;
      *(_QWORD *)(v15 + 16) = v9;
      *(_QWORD *)(v15 + 24) = v8;
      *(_QWORD *)(v15 + 32) = v10;
      *(_WORD *)(v15 + 40) = v11;
      *(_QWORD *)(v15 + 48) = v12;
      *(_QWORD *)(v15 + 56) = v21;
      *(_BYTE *)(v15 + 64) = v20;
      v16 = v3[2];
      v17 = __OFADD__(v16, 1);
      v18 = v16 + 1;
      if (v17)
        goto LABEL_10;
      v4 += 10;
      v3[2] = v18;
      v1 = v19 - 1;
      if (v19 == 1)
        return (unint64_t)v3;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4B00];
  }
  return result;
}

unint64_t sub_21436C324(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  char *i;
  unsigned __int8 v5;
  uint64_t v6;
  char v7;
  char v8;
  unint64_t result;
  char v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_2141D8BF8(&qword_253F13568);
    v3 = (_QWORD *)sub_2144256D0();
    for (i = (char *)(a1 + 49); ; i += 24)
    {
      v5 = *(i - 17);
      v6 = *(_QWORD *)(i - 9);
      v7 = *(i - 1);
      v8 = *i;
      result = sub_214336B74(v5);
      if ((v10 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(_BYTE *)(v3[6] + result) = v5;
      v11 = v3[7] + 16 * result;
      *(_QWORD *)v11 = v6;
      *(_BYTE *)(v11 + 8) = v7;
      *(_BYTE *)(v11 + 9) = v8;
      v12 = v3[2];
      v13 = __OFADD__(v12, 1);
      v14 = v12 + 1;
      if (v13)
        goto LABEL_10;
      v3[2] = v14;
      if (!--v1)
        return (unint64_t)v3;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4B00];
  }
  return result;
}

unint64_t sub_21436C414(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;
  unint64_t result;
  char v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_2141D8BF8(&qword_253F15D28);
    v3 = (_QWORD *)sub_2144256D0();
    v4 = a1 + 64;
    while (1)
    {
      v19 = v1;
      v5 = *(_BYTE *)(v4 - 32);
      v20 = *(_BYTE *)(v4 - 16);
      v6 = *(_QWORD *)(v4 - 8);
      v7 = *(_QWORD *)v4;
      v8 = *(_QWORD *)(v4 + 8);
      v9 = *(_QWORD *)(v4 + 16);
      v23 = *(_QWORD *)(v4 + 24);
      v10 = *(_QWORD *)(v4 + 40);
      v21 = *(_QWORD *)(v4 - 24);
      v22 = *(_QWORD *)(v4 + 32);
      v11 = *(_QWORD *)(v4 + 48);
      v12 = *(_BYTE *)(v4 + 56);
      result = sub_214336B74(v5);
      if ((v14 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(_BYTE *)(v3[6] + result) = v5;
      v15 = v3[7] + 88 * result;
      *(_QWORD *)v15 = v21;
      *(_BYTE *)(v15 + 8) = v20;
      *(_QWORD *)(v15 + 16) = v6;
      *(_QWORD *)(v15 + 24) = v7;
      *(_QWORD *)(v15 + 32) = v8;
      *(_QWORD *)(v15 + 40) = v9;
      *(_QWORD *)(v15 + 48) = v23;
      *(_QWORD *)(v15 + 56) = v22;
      *(_QWORD *)(v15 + 64) = v10;
      *(_QWORD *)(v15 + 72) = v11;
      *(_BYTE *)(v15 + 80) = v12;
      v16 = v3[2];
      v17 = __OFADD__(v16, 1);
      v18 = v16 + 1;
      if (v17)
        goto LABEL_10;
      v4 += 96;
      v3[2] = v18;
      sub_2142AB324(v6, v7, v8, v9, v23);
      sub_2142AB39C(v10, v11, v12);
      v1 = v19 - 1;
      if (v19 == 1)
        return (unint64_t)v3;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4B00];
  }
  return result;
}

unint64_t sub_21436C580(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  unint64_t result;
  __int128 v6;
  char v7;
  _OWORD *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  _OWORD *v12;
  char v13;
  __int128 v14;
  __int128 v15;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return MEMORY[0x24BEE4B00];
  sub_2141D8BF8(&qword_253F13308);
  v3 = (_QWORD *)sub_2144256D0();
  v4 = *(_QWORD *)(a1 + 32);
  v14 = *(_OWORD *)(a1 + 40);
  result = sub_214336CE4(v4);
  v6 = v14;
  if ((v7 & 1) != 0)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_retain();
    return (unint64_t)v3;
  }
  v8 = (_OWORD *)(a1 + 64);
  while (1)
  {
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_QWORD *)(v3[6] + 8 * result) = v4;
    *(_OWORD *)(v3[7] + 16 * result) = v6;
    v9 = v3[2];
    v10 = __OFADD__(v9, 1);
    v11 = v9 + 1;
    if (v10)
      break;
    v3[2] = v11;
    if (!--v1)
      goto LABEL_8;
    v12 = (_OWORD *)((char *)v8 + 24);
    v4 = *((_QWORD *)v8 - 1);
    v15 = *v8;
    swift_retain();
    result = sub_214336CE4(v4);
    v8 = v12;
    v6 = v15;
    if ((v13 & 1) != 0)
      goto LABEL_7;
  }
  __break(1u);
  return result;
}

unint64_t sub_21436C68C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  unsigned __int8 v4;
  uint64_t v5;
  unint64_t result;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  char v14;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return MEMORY[0x24BEE4B00];
  sub_2141D8BF8(&qword_253F11FD0);
  v3 = (_QWORD *)sub_2144256D0();
  v4 = *(_BYTE *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  result = sub_214336B74(v4);
  if ((v7 & 1) != 0)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_bridgeObjectRetain();
    return (unint64_t)v3;
  }
  v8 = (_QWORD *)(a1 + 56);
  while (1)
  {
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_BYTE *)(v3[6] + result) = v4;
    *(_QWORD *)(v3[7] + 8 * result) = v5;
    v9 = v3[2];
    v10 = __OFADD__(v9, 1);
    v11 = v9 + 1;
    if (v10)
      break;
    v3[2] = v11;
    if (!--v1)
      goto LABEL_8;
    v12 = v8 + 2;
    v4 = *((_BYTE *)v8 - 8);
    v13 = *v8;
    swift_bridgeObjectRetain();
    result = sub_214336B74(v4);
    v8 = v12;
    v5 = v13;
    if ((v14 & 1) != 0)
      goto LABEL_7;
  }
  __break(1u);
  return result;
}

unint64_t sub_21436C78C(uint64_t a1)
{
  return sub_21436C8B0(a1, &qword_253F11FC8);
}

unint64_t sub_21436C798(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  unsigned __int8 v4;
  uint64_t v5;
  unint64_t result;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  char v14;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return MEMORY[0x24BEE4B00];
  sub_2141D8BF8(&qword_253F15D08);
  v3 = (_QWORD *)sub_2144256D0();
  v4 = *(_BYTE *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  result = sub_214336B74(v4);
  if ((v7 & 1) != 0)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_retain();
    return (unint64_t)v3;
  }
  v8 = (_QWORD *)(a1 + 56);
  while (1)
  {
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_BYTE *)(v3[6] + result) = v4;
    *(_QWORD *)(v3[7] + 8 * result) = v5;
    v9 = v3[2];
    v10 = __OFADD__(v9, 1);
    v11 = v9 + 1;
    if (v10)
      break;
    v3[2] = v11;
    if (!--v1)
      goto LABEL_8;
    v12 = v8 + 2;
    v4 = *((_BYTE *)v8 - 8);
    v13 = *v8;
    swift_retain();
    result = sub_214336B74(v4);
    v8 = v12;
    v5 = v13;
    if ((v14 & 1) != 0)
      goto LABEL_7;
  }
  __break(1u);
  return result;
}

unint64_t sub_21436C898(uint64_t a1)
{
  return sub_21436C8B0(a1, &qword_253F132F8);
}

unint64_t sub_21436C8A4(uint64_t a1)
{
  return sub_21436C8B0(a1, &qword_253F13578);
}

unint64_t sub_21436C8B0(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v4;
  unsigned __int8 v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  _QWORD *v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  char v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    return MEMORY[0x24BEE4B00];
  sub_2141D8BF8(a2);
  v4 = (_QWORD *)sub_2144256D0();
  v5 = *(_BYTE *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 40);
  result = sub_214336B74(v5);
  if ((v8 & 1) != 0)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_retain();
    return (unint64_t)v4;
  }
  v9 = (_QWORD *)(a1 + 56);
  while (1)
  {
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_BYTE *)(v4[6] + result) = v5;
    *(_QWORD *)(v4[7] + 8 * result) = v6;
    v10 = v4[2];
    v11 = __OFADD__(v10, 1);
    v12 = v10 + 1;
    if (v11)
      break;
    v4[2] = v12;
    if (!--v2)
      goto LABEL_8;
    v13 = v9 + 2;
    v5 = *((_BYTE *)v9 - 8);
    v14 = *v9;
    swift_retain();
    result = sub_214336B74(v5);
    v9 = v13;
    v6 = v14;
    if ((v15 & 1) != 0)
      goto LABEL_7;
  }
  __break(1u);
  return result;
}

unint64_t sub_21436C9AC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  unsigned __int8 v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return MEMORY[0x24BEE4B00];
  sub_2141D8BF8(&qword_253F15D20);
  v3 = (_QWORD *)sub_2144256D0();
  v4 = *(_BYTE *)(a1 + 32);
  v5 = *(_BYTE *)(a1 + 40);
  v7 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 56);
  result = sub_214336B74(v4);
  if ((v9 & 1) != 0)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return (unint64_t)v3;
  }
  v10 = (_QWORD *)(a1 + 88);
  while (1)
  {
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_BYTE *)(v3[6] + result) = v4;
    v11 = v3[7] + 24 * result;
    *(_BYTE *)v11 = v5 & 1;
    *(_QWORD *)(v11 + 8) = v7;
    *(_QWORD *)(v11 + 16) = v6;
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      break;
    v3[2] = v14;
    if (!--v1)
      goto LABEL_8;
    v15 = v10 + 4;
    v4 = *((_BYTE *)v10 - 24);
    v5 = *((_BYTE *)v10 - 16);
    v16 = *(v10 - 1);
    v17 = *v10;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = sub_214336B74(v4);
    v10 = v15;
    v6 = v17;
    v7 = v16;
    if ((v18 & 1) != 0)
      goto LABEL_7;
  }
  __break(1u);
  return result;
}

unint64_t sub_21436CAE0(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  unsigned __int8 v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return MEMORY[0x24BEE4B00];
  sub_2141D8BF8(&qword_253F15D10);
  v3 = (_QWORD *)sub_2144256D0();
  v4 = *(_BYTE *)(a1 + 32);
  v5 = *(_BYTE *)(a1 + 40);
  v7 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 56);
  result = sub_214336B74(v4);
  if ((v9 & 1) != 0)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return (unint64_t)v3;
  }
  v10 = (_QWORD *)(a1 + 88);
  while (1)
  {
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_BYTE *)(v3[6] + result) = v4;
    v11 = v3[7] + 24 * result;
    *(_BYTE *)v11 = v5;
    *(_QWORD *)(v11 + 8) = v7;
    *(_QWORD *)(v11 + 16) = v6;
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      break;
    v3[2] = v14;
    if (!--v1)
      goto LABEL_8;
    v15 = v10 + 4;
    v4 = *((_BYTE *)v10 - 24);
    v5 = *((_BYTE *)v10 - 16);
    v16 = *(v10 - 1);
    v17 = *v10;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = sub_214336B74(v4);
    v10 = v15;
    v6 = v17;
    v7 = v16;
    if ((v18 & 1) != 0)
      goto LABEL_7;
  }
  __break(1u);
  return result;
}

unint64_t sub_21436CC10(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t *i;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_2141D8BF8(&qword_253F11978);
    v3 = (_QWORD *)sub_2144256D0();
    for (i = (uint64_t *)(a1 + 40); ; i += 2)
    {
      v5 = *(i - 1);
      v6 = *i;
      result = sub_21433AB28(v5);
      if ((v8 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      v9 = 8 * result;
      *(_QWORD *)(v3[6] + v9) = v5;
      *(_QWORD *)(v3[7] + v9) = v6;
      v10 = v3[2];
      v11 = __OFADD__(v10, 1);
      v12 = v10 + 1;
      if (v11)
        goto LABEL_10;
      v3[2] = v12;
      if (!--v1)
        return (unint64_t)v3;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4B00];
  }
  return result;
}

unint64_t sub_21436CCE8(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  char v16;

  v1 = a1[2];
  if (!v1)
    return MEMORY[0x24BEE4B00];
  sub_2141D8BF8(&qword_253F103B8);
  v3 = (_QWORD *)sub_2144256D0();
  v4 = a1[4];
  v5 = a1[5];
  v6 = a1[6];
  result = sub_214336E90(v4, v5);
  if ((v8 & 1) != 0)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_bridgeObjectRetain();
    return (unint64_t)v3;
  }
  v9 = a1 + 9;
  while (1)
  {
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = (uint64_t *)(v3[6] + 16 * result);
    *v10 = v4;
    v10[1] = v5;
    *(_QWORD *)(v3[7] + 8 * result) = v6;
    v11 = v3[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      break;
    v3[2] = v13;
    if (!--v1)
      goto LABEL_8;
    v14 = v9 + 3;
    v4 = *(v9 - 2);
    v5 = *(v9 - 1);
    v15 = *v9;
    swift_bridgeObjectRetain();
    result = sub_214336E90(v4, v5);
    v9 = v14;
    v6 = v15;
    if ((v16 & 1) != 0)
      goto LABEL_7;
  }
  __break(1u);
  return result;
}

unint64_t sub_21436CDFC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t i;
  uint64_t v5;
  unint64_t result;
  char v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[777];

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_2141D8BF8(&qword_253F13318);
    v3 = (_QWORD *)sub_2144256D0();
    for (i = a1 + 32; ; i += 792)
    {
      sub_2141E070C(i, (uint64_t)&v11, qword_253F12938);
      v5 = v11;
      result = sub_21433AB28(v11);
      if ((v7 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(_QWORD *)(v3[6] + 8 * result) = v5;
      result = (unint64_t)memcpy((void *)(v3[7] + 784 * result), v12, 0x309uLL);
      v8 = v3[2];
      v9 = __OFADD__(v8, 1);
      v10 = v8 + 1;
      if (v9)
        goto LABEL_10;
      v3[2] = v10;
      if (!--v1)
        return (unint64_t)v3;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4B00];
  }
  return result;
}

unint64_t sub_21436CF0C(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  char v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  char v15;

  v1 = a1[2];
  if (!v1)
    return MEMORY[0x24BEE4B00];
  sub_2141D8BF8(&qword_253F11FD8);
  v3 = (_QWORD *)sub_2144256D0();
  v5 = a1[4];
  v4 = a1[5];
  result = sub_21433AB28(v5);
  if ((v7 & 1) != 0)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_retain();
    return (unint64_t)v3;
  }
  v8 = a1 + 7;
  while (1)
  {
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v9 = 8 * result;
    *(_QWORD *)(v3[6] + v9) = v5;
    *(_QWORD *)(v3[7] + v9) = v4;
    v10 = v3[2];
    v11 = __OFADD__(v10, 1);
    v12 = v10 + 1;
    if (v11)
      break;
    v3[2] = v12;
    if (!--v1)
      goto LABEL_8;
    v13 = v8 + 2;
    v5 = *(v8 - 1);
    v14 = *v8;
    swift_retain();
    result = sub_21433AB28(v5);
    v8 = v13;
    v4 = v14;
    if ((v15 & 1) != 0)
      goto LABEL_7;
  }
  __break(1u);
  return result;
}

unint64_t sub_21436D008(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  unint64_t result;
  char v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;

  v2 = sub_2141D8BF8(&qword_253F14B68);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (unsigned __int8 *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    sub_2141D8BF8(&qword_253F12288);
    v7 = (_QWORD *)sub_2144256D0();
    v8 = (uint64_t)&v5[*(int *)(v2 + 48)];
    v9 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v10 = *(_QWORD *)(v3 + 72);
    while (1)
    {
      sub_2141E070C(v9, (uint64_t)v5, &qword_253F14B68);
      v11 = *v5;
      result = sub_214336B74(*v5);
      if ((v13 & 1) != 0)
        break;
      v14 = result;
      *(_QWORD *)((char *)v7 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(_BYTE *)(v7[6] + result) = v11;
      v15 = v7[7];
      v16 = type metadata accessor for ChartContentRenderContext.Bins(0);
      result = sub_2141FE1E0(v8, v15 + *(_QWORD *)(*(_QWORD *)(v16 - 8) + 72) * v14, type metadata accessor for ChartContentRenderContext.Bins);
      v17 = v7[2];
      v18 = __OFADD__(v17, 1);
      v19 = v17 + 1;
      if (v18)
        goto LABEL_10;
      v7[2] = v19;
      v9 += v10;
      if (!--v6)
        return (unint64_t)v7;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4B00];
  }
  return result;
}

unint64_t sub_21436D174(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t *i;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_2141D8BF8(&qword_253F11FE0);
    v3 = (_QWORD *)sub_2144256D0();
    for (i = (uint64_t *)(a1 + 40); ; i += 2)
    {
      v5 = *(i - 1);
      v6 = *i;
      result = sub_21433AB28(v5);
      if ((v8 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      v9 = 8 * result;
      *(_QWORD *)(v3[6] + v9) = v5;
      *(_QWORD *)(v3[7] + v9) = v6;
      v10 = v3[2];
      v11 = __OFADD__(v10, 1);
      v12 = v10 + 1;
      if (v11)
        goto LABEL_10;
      v3[2] = v12;
      if (!--v1)
        return (unint64_t)v3;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4B00];
  }
  return result;
}

unint64_t sub_21436D248(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return MEMORY[0x24BEE4B00];
  sub_2141D8BF8(&qword_253F11AA0);
  v3 = (_QWORD *)sub_2144256D0();
  v4 = *(_BYTE *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 48);
  result = sub_214336B74(v4);
  if ((v8 & 1) != 0)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_retain();
    swift_retain();
    return (unint64_t)v3;
  }
  v9 = (_QWORD *)(a1 + 72);
  while (1)
  {
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_BYTE *)(v3[6] + result) = v4;
    v10 = (_QWORD *)(v3[7] + 16 * result);
    *v10 = v6;
    v10[1] = v5;
    v11 = v3[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      break;
    v3[2] = v13;
    if (!--v1)
      goto LABEL_8;
    v14 = v9 + 3;
    v4 = *((_BYTE *)v9 - 16);
    v15 = *(v9 - 1);
    v16 = *v9;
    swift_retain();
    swift_retain();
    result = sub_214336B74(v4);
    v9 = v14;
    v5 = v16;
    v6 = v15;
    if ((v17 & 1) != 0)
      goto LABEL_7;
  }
  __break(1u);
  return result;
}

unint64_t sub_21436D368(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  double *i;
  double v5;
  double v6;
  double v7;
  unint64_t result;
  char v9;
  double *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_2141D8BF8(qword_254D6A488);
    v3 = (_QWORD *)sub_2144256D0();
    for (i = (double *)(a1 + 48); ; i += 3)
    {
      v5 = *(i - 2);
      v6 = *(i - 1);
      v7 = *i;
      result = sub_214336D80(v5, v6);
      if ((v9 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      v10 = (double *)(v3[6] + 16 * result);
      *v10 = v5;
      v10[1] = v6;
      *(double *)(v3[7] + 8 * result) = v7;
      v11 = v3[2];
      v12 = __OFADD__(v11, 1);
      v13 = v11 + 1;
      if (v12)
        goto LABEL_10;
      v3[2] = v13;
      if (!--v1)
        return (unint64_t)v3;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4B00];
  }
  return result;
}

unint64_t sub_21436D444(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  _OWORD *i;
  unsigned __int8 v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_2141D8BF8(&qword_253F11970);
    v3 = (_QWORD *)sub_2144256D0();
    for (i = (_OWORD *)(a1 + 80); ; i += 4)
    {
      v5 = *((_BYTE *)i - 48);
      v6 = *((_BYTE *)i - 40);
      v7 = *((_QWORD *)i - 2);
      v8 = *((_QWORD *)i - 1);
      v15 = *i;
      v16 = *(i - 2);
      result = sub_214336B74(v5);
      if ((v10 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(_BYTE *)(v3[6] + result) = v5;
      v11 = v3[7] + 56 * result;
      *(_BYTE *)v11 = v6;
      *(_OWORD *)(v11 + 8) = v16;
      *(_QWORD *)(v11 + 24) = v7;
      *(_QWORD *)(v11 + 32) = v8;
      *(_OWORD *)(v11 + 40) = v15;
      v12 = v3[2];
      v13 = __OFADD__(v12, 1);
      v14 = v12 + 1;
      if (v13)
        goto LABEL_10;
      v3[2] = v14;
      swift_bridgeObjectRetain();
      if (!--v1)
        return (unint64_t)v3;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4B00];
  }
  return result;
}

void sub_21436D56C(uint64_t a1, uint64_t a2, unint64_t a3)
{
  int64_t v3;
  uint64_t v4;
  _QWORD *v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;

  v3 = a3 >> 1;
  v4 = (a3 >> 1) - a2;
  if (__OFSUB__(a3 >> 1, a2))
    goto LABEL_13;
  if (!v4)
  {
    v6 = (_QWORD *)MEMORY[0x24BEE4AF8];
    if (v3 >= a2)
      goto LABEL_6;
    goto LABEL_12;
  }
  sub_2141D8BF8(&qword_254D690F0);
  v6 = (_QWORD *)swift_allocObject();
  v7 = j__malloc_size(v6);
  v8 = v7 - 32;
  if (v7 < 32)
    v8 = v7 - 25;
  v6[2] = v4;
  v6[3] = 2 * (v8 >> 3);
  if (v3 < a2)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
LABEL_6:
  sub_2141D8BF8(&qword_254D690F8);
  swift_arrayInitWithCopy();
  if (__OFSUB__(0, a2))
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v9 = v6[2];
  v10 = __OFADD__(a2, v9);
  v11 = a2 + v9;
  if (v10)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (v11 < a2)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (v11 < 0)
LABEL_17:
    __break(1u);
}

unint64_t sub_21436D674(unint64_t result, int64_t a2)
{
  unint64_t *v2;
  unint64_t v4;
  int64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int64_t v9;
  int64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v6 = result;
  v7 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v8 = result - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result && v9 <= *(_QWORD *)(v4 + 24) >> 1)
  {
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    if (v5 <= v9)
      v10 = v5 + v8;
    else
      v10 = v5;
    result = (unint64_t)sub_214224144((char *)result, v10, 1, (char *)v4);
    v4 = result;
    if (!v8)
      goto LABEL_20;
  }
  v11 = *(_QWORD *)(v4 + 16);
  v12 = __OFSUB__(v11, a2);
  v13 = v11 - a2;
  if (v12)
    goto LABEL_26;
  result = v4 + 32 + 16 * v6;
  v14 = (const void *)(v4 + 32 + 16 * a2);
  if (v6 != a2 || result >= (unint64_t)v14 + 16 * v13)
    result = (unint64_t)memmove((void *)result, v14, 16 * v13);
  v15 = *(_QWORD *)(v4 + 16);
  v12 = __OFADD__(v15, v8);
  v16 = v15 + v8;
  if (!v12)
  {
    *(_QWORD *)(v4 + 16) = v16;
LABEL_20:
    *v2 = v4;
    return result;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_21436D778(uint64_t a1, double a2, double a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float64x2_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  uint64_t v34;
  uint64_t result;
  unint64_t v36;
  float64_t v37;
  unint64_t v38;
  float64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  double v43;
  double v44;
  uint64_t v45;
  uint64_t v46;
  float64x2_t *v47;
  uint64_t v48;
  unint64_t v49;
  int64_t v50;
  uint64_t v51;
  uint64_t v52;
  float64x2_t *v53;
  uint64_t v54;
  unint64_t v55;
  int64_t v56;
  char *v57;
  int64_t v58;
  float64_t v59;
  float64x2_t v60;
  double v61;
  float64x2_t v62;
  __n128 v63;
  char *v64;
  float64x2_t *v65;
  uint64_t v66;
  unint64_t v67;
  char *v68;
  float64x2_t *v69;
  uint64_t v70;
  unint64_t v71;
  char isUniquelyReferenced_nonNull_native;
  float64_t v73;
  unint64_t v74;
  float64x2_t v75;
  double v76;
  float64x2_t v77;
  float64x2_t v78;
  char *v79;
  float64x2_t *v80;
  uint64_t v81;
  unint64_t v82;
  char v83;
  unint64_t v84;
  unint64_t v85;
  char *v86;
  float64x2_t *v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  float64x2_t v93;
  double v94;
  float64_t v95;
  float64_t v96;
  double v97;
  __n128 v98;
  uint64_t v99;
  uint64_t v100;
  float64x2_t v101;
  uint64_t v102;
  uint64_t v103;

  v7 = a1;
  v8 = *(_QWORD *)(a1 + 16);
  if (v8)
  {
    v9 = *(_QWORD *)(a1 + 32);
    if (*(_QWORD *)(v9 + 16) && *(double *)(v9 + 32) > a3)
      return MEMORY[0x24BEE4AF8];
    v10 = *(_QWORD *)(a1 + 32 + 8 * v8 - 8);
    v11 = *(_QWORD *)(v10 + 16);
    if (v11)
    {
      if (*(double *)(v10 + 16 * v11 + 16) < a2)
        return MEMORY[0x24BEE4AF8];
    }
    sub_2141D8BF8(&qword_254D6C658);
    v12 = sub_21442504C();
    *(_QWORD *)(v12 + 16) = v8;
    v13 = 32;
    v14 = v8;
    do
    {
      v15 = v12 + v13;
      *(_QWORD *)v15 = 0;
      *(_BYTE *)(v15 + 8) = 1;
      v13 += 16;
      --v14;
    }
    while (v14);
    v103 = v12;
    sub_2141D8BF8(&qword_254D6C658);
    v16 = sub_21442504C();
    *(_QWORD *)(v16 + 16) = v8;
    v17 = 32;
    v18 = v8;
    do
    {
      v19 = v16 + v17;
      *(_QWORD *)v19 = 0;
      *(_BYTE *)(v19 + 8) = 1;
      v17 += 16;
      --v18;
    }
    while (v18);
  }
  else
  {
    v16 = MEMORY[0x24BEE4AF8];
    v103 = MEMORY[0x24BEE4AF8];
  }
  v20 = &v93;
  v102 = v16;
  MEMORY[0x24BDAC7A8](v16);
  v21 = swift_bridgeObjectRetain();
  v22 = sub_2142C45FC(v21, sub_21436E320);
  v23 = swift_bridgeObjectRelease();
  if (v22 >= v8)
    goto LABEL_28;
  if (v22 < 0)
  {
    __break(1u);
    goto LABEL_109;
  }
  v3 = (unint64_t)&v93;
  v20 = (float64x2_t *)(v7 + 32);
  MEMORY[0x24BDAC7A8](v23);
  v24 = swift_bridgeObjectRetain();
  v25 = sub_2142C46C4(v24, v7 + 32, v22, (2 * v8) | 1, (uint64_t (*)(uint64_t, uint64_t))sub_21436E32C);
  v27 = v26;
  swift_bridgeObjectRelease();
  if ((v27 & 1) != 0)
  {
LABEL_28:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return MEMORY[0x24BEE4AF8];
  }
  if (v25 < v22)
  {
LABEL_109:
    __break(1u);
    goto LABEL_110;
  }
  v28 = v25 + 1;
  if (__OFADD__(v25, 1))
  {
LABEL_110:
    __break(1u);
    goto LABEL_111;
  }
  if (v8 < v28)
  {
LABEL_111:
    __break(1u);
    goto LABEL_112;
  }
  if (v28 < 0)
  {
LABEL_112:
    __break(1u);
    goto LABEL_113;
  }
  if ((unint64_t)v22 >= *(_QWORD *)(v103 + 16))
  {
LABEL_113:
    __break(1u);
LABEL_114:
    __break(1u);
    goto LABEL_115;
  }
  v29 = v103 + 16 * v22;
  if (*(_BYTE *)(v29 + 40))
    v30 = 0;
  else
    v30 = *(_QWORD *)(v29 + 32);
  if (v25 >= *(_QWORD *)(v102 + 16))
    goto LABEL_114;
  v31 = v102 + 16 * v25;
  if (*(_BYTE *)(v31 + 40) == 1)
  {
    if (v25 >= v28)
    {
LABEL_128:
      __break(1u);
      goto LABEL_129;
    }
    v32 = *(_QWORD *)(*(_QWORD *)&v20->f64[v25] + 16) - 1;
    if (!v30)
      goto LABEL_27;
  }
  else
  {
    v32 = *(_QWORD *)(v31 + 32);
    if (!v30)
    {
LABEL_27:
      v98.n128_u64[0] = 0;
      v33 = 0.0;
      goto LABEL_37;
    }
  }
  v36 = v30 - 1;
  if (__OFSUB__(v30, 1))
  {
LABEL_124:
    __break(1u);
    goto LABEL_125;
  }
  if (v22 >= (unint64_t)v28)
  {
LABEL_125:
    __break(1u);
    goto LABEL_126;
  }
  if ((v36 & 0x8000000000000000) != 0)
  {
LABEL_126:
    __break(1u);
    goto LABEL_127;
  }
  v37 = v20->f64[v22];
  if (v36 >= *(_QWORD *)(*(_QWORD *)&v37 + 16))
  {
LABEL_127:
    __break(1u);
    goto LABEL_128;
  }
  v38 = *(_QWORD *)&v37 + 16 * v36;
  v33 = *(double *)(v38 + 40);
  v98.n128_u64[0] = *(_QWORD *)(v38 + 32);
LABEL_37:
  if (v25 >= v28)
  {
LABEL_115:
    __break(1u);
LABEL_116:
    __break(1u);
    goto LABEL_117;
  }
  v39 = v20->f64[v25];
  v40 = *(_QWORD *)(*(_QWORD *)&v39 + 16);
  v99 = v102;
  v100 = v103;
  *(_QWORD *)&v101.f64[0] = v40 - 1;
  v96 = v33;
  if (v32 == v40 - 1)
  {
    v97 = 0.0;
    v95 = 0.0;
  }
  else
  {
    v41 = v32 + 1;
    if (__OFADD__(v32, 1))
    {
LABEL_129:
      __break(1u);
      goto LABEL_130;
    }
    if ((v41 & 0x8000000000000000) != 0)
    {
LABEL_130:
      __break(1u);
      goto LABEL_131;
    }
    if (v41 >= v40)
    {
LABEL_131:
      __break(1u);
      goto LABEL_132;
    }
    v42 = *(_QWORD *)&v39 + 16 * v41;
    v44 = *(double *)(v42 + 32);
    v43 = *(double *)(v42 + 40);
    v97 = v44;
    v95 = v43;
  }
  v3 = (2 * v28) | 1;
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull() & 1) != 0)
  {
    v4 = v22;
  }
  else
  {
    sub_21436D56C(v7 + 32, v22, v3);
    v46 = v45;
    v20 = v47;
    v4 = v48;
    v3 = v49;
    swift_unknownObjectRelease();
    v7 = v46;
  }
  if (v22 < v4)
    goto LABEL_116;
  v50 = v3 >> 1;
  if (v22 >= v3 >> 1)
    goto LABEL_116;
  if (v30 < 0)
  {
LABEL_117:
    __break(1u);
LABEL_118:
    __break(1u);
    goto LABEL_119;
  }
  sub_21436D674(0, v30);
  if ((v3 & 1) == 0)
  {
    sub_21436D56C((uint64_t)v20, v4, v3);
    v52 = v51;
    v20 = v53;
    v4 = v54;
    v3 = v55;
    swift_unknownObjectRelease();
    v50 = v3 >> 1;
    v7 = v52;
  }
  if (v25 < v4 || v25 >= v50)
    goto LABEL_118;
  v56 = v32 + 1;
  if (__OFADD__(v32, 1))
  {
LABEL_119:
    __break(1u);
LABEL_120:
    __break(1u);
    goto LABEL_121;
  }
  v57 = (char *)&v20->f64[v25];
  v58 = *(_QWORD *)(*(_QWORD *)v57 + 16);
  if (v56 < v58)
    sub_21436D674(v56, v58);
  if (v22 < v4)
    goto LABEL_120;
  v59 = v20->f64[v22];
  if (!*(_QWORD *)(*(_QWORD *)&v59 + 16))
  {
LABEL_121:
    __break(1u);
LABEL_122:
    __break(1u);
    goto LABEL_123;
  }
  if (v30)
  {
    v60 = *(float64x2_t *)(*(_QWORD *)&v59 + 32);
    v57 = (char *)v98.n128_u64[0];
    if (v60.f64[0] != v98.n128_f64[0])
    {
      v61 = vabdd_f64(v60.f64[0], v98.n128_f64[0]);
      if (qword_253F11F50 != -1)
      {
        v94 = v61;
        v93 = v60;
        swift_once();
        v60 = v93;
        v61 = v94;
      }
      if (*(double *)&qword_253F1C988 >= v61)
      {
        if ((v3 & 1) == 0)
        {
          sub_21436D56C((uint64_t)v20, v4, v3);
          v57 = v68;
          v20 = v69;
          v4 = v70;
          v3 = v71;
          swift_unknownObjectRelease();
          v50 = v3 >> 1;
          v7 = (uint64_t)v57;
        }
        if (v22 >= v4 && v22 < (unint64_t)v50)
        {
          v57 = *(char **)&v20->f64[v22];
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *(_QWORD *)&v20->f64[v22] = v57;
          if ((isUniquelyReferenced_nonNull_native & 1) != 0)
          {
            if (!*((_QWORD *)v57 + 2))
            {
LABEL_137:
              __break(1u);
              goto LABEL_138;
            }
LABEL_75:
            *((double *)v57 + 4) = a2;
            goto LABEL_76;
          }
LABEL_136:
          v57 = sub_21434EAE4((uint64_t)v57);
          *(_QWORD *)&v20->f64[v22] = v57;
          if (!*((_QWORD *)v57 + 2))
            goto LABEL_137;
          goto LABEL_75;
        }
      }
      else
      {
        *(_QWORD *)&v62.f64[0] = v57;
        v62.f64[1] = v96;
        v63.n128_f64[0] = sub_2143B1024(a2, v60, v62);
        if ((v3 & 1) == 0)
        {
          v98 = v63;
          sub_21436D56C((uint64_t)v20, v4, v3);
          v57 = v64;
          v20 = v65;
          v4 = v66;
          v3 = v67;
          swift_unknownObjectRelease();
          v63 = v98;
          v50 = v3 >> 1;
          v7 = (uint64_t)v57;
        }
        if (v22 >= v4 && v22 < (unint64_t)v50)
        {
          v57 = (char *)&v20->f64[v22];
          sub_21436BAB0(0, 0, v63);
          goto LABEL_76;
        }
        __break(1u);
      }
      __break(1u);
      goto LABEL_136;
    }
  }
LABEL_76:
  if (v25 < v4 || v25 >= v50)
    goto LABEL_122;
  v73 = v20->f64[v25];
  v74 = *(_QWORD *)(*(_QWORD *)&v73 + 16);
  if (!v74)
  {
LABEL_123:
    __break(1u);
    goto LABEL_124;
  }
  if (v32 == *(_QWORD *)&v101.f64[0])
    goto LABEL_99;
  v75 = *(float64x2_t *)(*(_QWORD *)&v73 + 16 * (v74 - 1) + 32);
  if (v75.f64[0] == v97)
    goto LABEL_99;
  v76 = vabdd_f64(v97, v75.f64[0]);
  if (qword_253F11F50 != -1)
  {
    v101 = *(float64x2_t *)(*(_QWORD *)&v73 + 16 * (v74 - 1) + 32);
    swift_once();
    v75 = v101;
  }
  if (*(double *)&qword_253F1C988 < v76)
  {
    v77.f64[0] = v97;
    v77.f64[1] = v95;
    v78.f64[0] = sub_2143B1024(a3, v77, v75);
    v101 = v78;
    if ((v3 & 1) == 0)
    {
      sub_21436D56C((uint64_t)v20, v4, v3);
      v57 = v79;
      v20 = v80;
      v4 = v81;
      v3 = v82;
      swift_unknownObjectRelease();
      v50 = v3 >> 1;
      v7 = (uint64_t)v57;
    }
    if (v25 >= v4 && v25 < v50)
    {
      v57 = *(char **)&v20->f64[v25];
      v83 = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)&v20->f64[v25] = v57;
      if ((v83 & 1) != 0)
      {
LABEL_89:
        v85 = *((_QWORD *)v57 + 2);
        v84 = *((_QWORD *)v57 + 3);
        if (v85 >= v84 >> 1)
        {
          v57 = sub_214224144((char *)(v84 > 1), v85 + 1, 1, v57);
          *(_QWORD *)&v20->f64[v25] = v57;
        }
        *((_QWORD *)v57 + 2) = v85 + 1;
        *(float64x2_t *)&v57[16 * v85 + 32] = v101;
LABEL_99:
        if ((v3 & 1) == 0)
        {
LABEL_100:
          sub_214397C6C(v7, (uint64_t)v20, v4, v3);
          v34 = v90;
          swift_bridgeObjectRelease();
LABEL_107:
          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();
          return v34;
        }
        sub_2144257A8();
        swift_unknownObjectRetain_n();
        v91 = swift_dynamicCastClass();
        if (!v91)
        {
          swift_unknownObjectRelease();
          v91 = MEMORY[0x24BEE4AF8];
        }
        v92 = *(_QWORD *)(v91 + 16);
        swift_release();
        if (!__OFSUB__(v3 >> 1, v4))
        {
          if (v92 == (v3 >> 1) - v4)
          {
            v34 = swift_dynamicCastClass();
            swift_bridgeObjectRelease();
            if (!v34)
            {
              swift_unknownObjectRelease();
              v34 = MEMORY[0x24BEE4AF8];
            }
            goto LABEL_107;
          }
          goto LABEL_133;
        }
LABEL_132:
        __break(1u);
LABEL_133:
        swift_unknownObjectRelease();
        goto LABEL_100;
      }
LABEL_139:
      v57 = sub_214224144(0, *((_QWORD *)v57 + 2) + 1, 1, v57);
      *(_QWORD *)&v20->f64[v25] = v57;
      goto LABEL_89;
    }
LABEL_138:
    __break(1u);
    goto LABEL_139;
  }
  if ((v3 & 1) == 0)
  {
    sub_21436D56C((uint64_t)v20, v4, v3);
    v57 = v86;
    v20 = v87;
    v4 = v88;
    v3 = v89;
    swift_unknownObjectRelease();
    v50 = v3 >> 1;
    v7 = (uint64_t)v57;
  }
  if (v25 < v4 || v25 >= v50)
  {
    __break(1u);
  }
  else
  {
    v57 = *(char **)&v20->f64[v25];
    result = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)&v20->f64[v25] = v57;
    if ((result & 1) != 0)
      goto LABEL_97;
  }
  result = (uint64_t)sub_21434EAE4((uint64_t)v57);
  v57 = (char *)result;
  *(_QWORD *)&v20->f64[v25] = result;
LABEL_97:
  if (v74 <= *((_QWORD *)v57 + 2))
  {
    *(double *)&v57[16 * v74 + 16] = a3;
    goto LABEL_99;
  }
  __break(1u);
  return result;
}

uint64_t sub_21436E018@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *a1;
  result = swift_beginAccess();
  v5 = *(_BYTE *)(v3 + 144);
  *(_QWORD *)a2 = *(_QWORD *)(v3 + 136);
  *(_BYTE *)(a2 + 8) = v5;
  return result;
}

uint64_t sub_21436E064(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t result;

  v2 = *a1;
  v3 = *((_BYTE *)a1 + 8);
  v4 = *a2;
  result = swift_beginAccess();
  *(_QWORD *)(v4 + 136) = v2;
  *(_BYTE *)(v4 + 144) = v3;
  *(_QWORD *)(v4 + 96) = 0;
  *(_QWORD *)(v4 + 104) = 0;
  *(_BYTE *)(v4 + 112) = 1;
  return result;
}

uint64_t type metadata accessor for FunctionSampler()
{
  return objc_opt_self();
}

uint64_t method lookup function for FunctionSampler()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of FunctionSampler.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 208))();
}

uint64_t dispatch thunk of FunctionSampler.defaultDomainAspectRatio.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t dispatch thunk of FunctionSampler.defaultDomainAspectRatio.setter(uint64_t a1, char a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 224))(a1, a2 & 1);
}

uint64_t dispatch thunk of FunctionSampler.defaultDomainAspectRatio.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))();
}

uint64_t dispatch thunk of FunctionSampler.defaultXDomain.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 240))();
}

uint64_t dispatch thunk of FunctionSampler.defaultYDomain.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 248))();
}

uint64_t dispatch thunk of FunctionSampler.bounds(xDomain:yDomain:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 256))();
}

ValueMetadata *type metadata accessor for FunctionSampler.CacheKey()
{
  return &type metadata for FunctionSampler.CacheKey;
}

unint64_t sub_21436E170()
{
  unint64_t result;

  result = qword_254D6C638;
  if (!qword_254D6C638)
  {
    result = MEMORY[0x2199CD934](&unk_21442E894, &type metadata for FunctionSampler.CacheKey);
    atomic_store(result, (unint64_t *)&qword_254D6C638);
  }
  return result;
}

uint64_t sub_21436E1B4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v2 = *(_QWORD *)(a1 + 216);
  v3 = *(_QWORD *)(a1 + 224);
  v4 = *(_QWORD *)(a1 + 232);
  v5 = *(_QWORD *)(a1 + 240);
  v15 = *(_QWORD *)(a1 + 248);
  v6 = *(_QWORD *)(a1 + 256);
  v7 = *(_QWORD *)(a1 + 264);
  v8 = *(_QWORD *)(a1 + 272);
  v23 = *(_QWORD *)(a1 + 288);
  v24 = *(_QWORD *)(a1 + 280);
  v21 = *(_QWORD *)(a1 + 304);
  v22 = *(_QWORD *)(a1 + 296);
  v19 = *(_QWORD *)(a1 + 320);
  v20 = *(_QWORD *)(a1 + 312);
  v17 = *(_QWORD *)(a1 + 336);
  v18 = *(_QWORD *)(a1 + 328);
  v16 = *(_OWORD *)(a1 + 344);
  v13 = *(_OWORD *)(a1 + 376);
  v14 = *(_OWORD *)(a1 + 360);
  v11 = *(_OWORD *)(a1 + 408);
  v12 = *(_OWORD *)(a1 + 392);
  v9 = *(_QWORD *)(a1 + 424);
  sub_21420B7DC(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_OWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_OWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144));
  swift_bridgeObjectRetain();
  sub_2141EF2B4(v2, v3, v4, v5);
  sub_2141EF2B4(v15, v6, v7, v8);
  sub_214326DB0(v24, v23, v22, v21, v20, v19, v18, v17, v16, *((uint64_t *)&v16 + 1), v14, *((uint64_t *)&v14 + 1), v13, *((uint64_t *)&v13 + 1), v12, *((uint64_t *)&v12 + 1), v11, *((uint64_t *)&v11 + 1), v9);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_21436E320(unint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_21436B6BC(a1, a2, *(uint64_t **)(v2 + 32), *(double *)(v2 + 16));
}

uint64_t sub_21436E32C(unint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_21436B79C(a1, a2, *(uint64_t **)(v2 + 32), *(double *)(v2 + 16), *(double *)(v2 + 24));
}

uint64_t sub_21436E338(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for CalendarCache.Key(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_21436E374(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 24))(a2, a1, v5);
  return a2;
}

uint64_t sub_21436E3B8@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>, double a6@<D2>, double a7@<D3>, double a8@<D4>, double a9@<D5>, double a10@<D6>, double a11@<D7>, double a12, uint64_t a13, uint64_t a14)
{
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  char *v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  long double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  long double v49;
  double v50;
  double v51;
  long double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  int v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  double v95;
  double v96;
  double v97;
  long double v98[2];
  double v99;
  double v100;
  double v101;
  double v102;
  double v103;
  double v104;
  double v105;
  double v106;
  uint64_t v107;
  double v108;
  double v109;
  double v110;
  double v111;
  double v112;
  double v113;
  uint64_t v114;
  double v115;
  double v116;
  double v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;

  v115 = a11;
  v116 = a9;
  v23 = sub_214424308();
  v24 = *(_QWORD *)(v23 - 8);
  result = MEMORY[0x24BDAC7A8](v23);
  v27 = (char *)v98 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = vabdd_f64(a7, a6);
  if (v28 + 2.22044605e-16 >= 6.28318531)
  {
    result = sub_21436EFB8((uint64_t)&v123, a4);
    goto LABEL_89;
  }
  v109 = a10;
  v112 = a7;
  if (a4 < 0.0)
    v29 = 0.0;
  else
    v29 = a4;
  if (v29 < a5)
    v30 = a5;
  else
    v30 = v29;
  v31 = fmax(v30 * 0.1 * 0.5, 1.0);
  if (v31 >= 0.0)
  {
    v111 = a6;
    v107 = a14;
    v114 = a13;
    v108 = a12;
    if (a8 > 0.0)
      v32 = a8;
    else
      v32 = 0.0;
    if (v31 >= v32)
      v33 = v32;
    else
      v33 = v31;
    if (v28 <= 3.14159265)
      v34 = v28;
    else
      v34 = 3.14159265;
    v117 = v28;
    v113 = v30 * 0.1;
    v35 = sin(v34 * 0.5);
    v36 = v33 / v35 - v29;
    if (v36 < 0.0)
      v36 = 0.0;
    v110 = v29;
    v106 = v36;
    v37 = v29 + v36;
    if (v37 >= v30)
      v38 = v30;
    else
      v38 = v37;
    v39 = v30;
    v40 = (v30 + v38) * 0.5;
    v41 = asin(v33 / v38);
    v42 = v117 * 0.5;
    if (v117 * 0.5 < v41)
      v41 = v117 * 0.5;
    if (v41 < 0.0)
      v41 = 0.0;
    v105 = v41;
    v102 = v40;
    v43 = v33 / v40;
    v44 = v39;
    v45 = asin(v43);
    if (v42 < v45)
      v45 = v42;
    if (v45 < 0.0)
      v45 = 0.0;
    v101 = v45;
    v46 = (v39 + v39) * v35;
    v47 = (v39 - v38) * 0.5;
    if (v47 >= v113)
      v47 = v113;
    v113 = v33;
    if (v39 * v35 - v33 * (v39 * v34 / v46) >= v47)
      v48 = v47;
    else
      v48 = v39 * v35 - v33 * (v39 * v34 / v46);
    v103 = 3.14159265;
    if (v117 >= 3.14159265)
    {
      if (v39 * 0.5 >= v48)
        v53 = v48;
      else
        v53 = v39 * 0.5;
    }
    else
    {
      v49 = sin(v42);
      v50 = v49 * (v39 - v106) / (v49 + 1.0);
      if (v50 >= v48)
        v51 = v48;
      else
        v51 = v50;
      v52 = sin(v42 - v105);
      v53 = v51;
      v54 = v38 * v52 / (v52 + 1.0);
      if (v54 < v48)
        v48 = v54;
    }
    v55 = v38;
    v56 = v44;
    v57 = v110;
    if (v110 >= v48)
      v58 = v48;
    else
      v58 = v110;
    v59 = v116;
    if (v116 <= 0.0)
      v59 = 0.0;
    if (v58 >= v59)
      v60 = v59;
    else
      v60 = v58;
    v61 = v109;
    if (v109 <= 0.0)
      v61 = 0.0;
    if (v58 < v61)
      v61 = v58;
    v62 = v108;
    if (v108 <= 0.0)
      v62 = 0.0;
    if (v53 >= v62)
      v63 = v62;
    else
      v63 = v53;
    v108 = v63;
    v64 = v115;
    if (v115 <= 0.0)
      v64 = 0.0;
    v98[1] = v53;
    if (v53 >= v64)
      v65 = v64;
    else
      v65 = v53;
    v115 = v61;
    if (v60 > v61)
      v66 = v60;
    else
      v66 = v61;
    v104 = v55;
    v67 = v113;
    v68 = asin(v113 / (v55 + v66));
    if (v68 <= 0.0)
      v68 = 0.0;
    if (v42 < v68)
      v68 = v42;
    v99 = v68;
    if (v63 > v65)
      v69 = v63;
    else
      v69 = v65;
    v106 = v56;
    v70 = asin(v67 / (v56 - v69));
    if (v70 <= 0.0)
      v70 = 0.0;
    if (v42 >= v70)
      v71 = v70;
    else
      v71 = v42;
    v100 = v65;
    if (v65 != 0.0 || v115 != 0.0 || v108 != 0.0 || v60 != 0.0)
    {
      v113 = v60;
      v98[0] = v42;
      sub_214424770();
      (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v27, a1, v23);
      v77 = (*(uint64_t (**)(char *, uint64_t))(v24 + 88))(v27, v23);
      if (v77 != *MEMORY[0x24BDEEB78] && v77 != *MEMORY[0x24BDEEB68])
        (*(void (**)(char *, uint64_t))(v24 + 8))(v27, v23);
      v78 = v111;
      v79 = v103;
      v101 = (v101 + v111) * 180.0 / v103;
      __sincos_stret(v101 * 0.0174532925);
      v80 = v102;
      sub_2144246F8();
      v81 = v112;
      if (v78 >= v112)
        v82 = -1.0;
      else
        v82 = 1.0;
      v83 = (v71 + v78) * 180.0 / v79;
      v84 = v106;
      v85 = sub_21436F0BC(0, v83, v106, v101, v80, v108, 1.0, v82);
      v86 = v81 - v71;
      v87 = v79;
      v90 = sub_21436F0BC(1, v86 * 180.0 / v79, v84, v85, v88, v100, 1.0, v82);
      v91 = v113;
      if (v113 > 0.0 || v115 > 0.0)
      {
        v94 = v99;
        v95 = v104;
        v96 = sub_21436F0BC(0, (v112 - v99) * 180.0 / v87, v104, v90, v89, v115, -1.0, v82);
        sub_21436F0BC(1, (v94 + v111) * 180.0 / v87, v95, v96, v97, v91, -1.0, v82);
      }
      else if (v117 < v79 && v110 == 0.0 && (a2 & 1) != 0)
      {
        v92 = v111;
        v93 = v112;
        tan(v98[0]);
        __sincos_stret((v92 + v93) * 0.5);
        v123 = 0x3FF0000000000000;
        v124 = 0;
        v125 = 0;
        v126 = 0x3FF0000000000000;
        v127 = 0;
        v128 = 0;
        sub_214424710();
      }
      else if (v104 <= 2.22044605e-16)
      {
        sub_21442471C();
      }
      else
      {
        v123 = 0x3FF0000000000000;
        v124 = 0;
        v125 = 0;
        v126 = 0x3FF0000000000000;
        v127 = 0;
        v128 = 0;
        sub_214424710();
      }
      result = sub_2144246E0();
      v72 = v118;
      v73 = v119;
      v74 = v120;
      v75 = v121;
      v76 = v122;
      goto LABEL_104;
    }
    result = sub_21436EE08((uint64_t)&v123, v57, v106, v111, v112, v113);
LABEL_89:
    v72 = v123;
    v73 = v124;
    v74 = v125;
    v75 = v126;
    v76 = v127;
LABEL_104:
    *(_QWORD *)a3 = v72;
    *(_QWORD *)(a3 + 8) = v73;
    *(_QWORD *)(a3 + 16) = v74;
    *(_QWORD *)(a3 + 24) = v75;
    *(_BYTE *)(a3 + 32) = v76;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t sub_21436EBF0()
{
  swift_getKeyPath();
  swift_getAtKeyPath();
  swift_release();
  swift_getKeyPath();
  swift_getAtKeyPath();
  swift_release();
  swift_getKeyPath();
  swift_getAtKeyPath();
  swift_release();
  swift_getKeyPath();
  swift_getAtKeyPath();
  swift_release();
  return sub_214424404();
}

double sub_21436EDEC(double a1, double a2, float64x2_t a3, double a4, float64x2_t a5, float64x2_t a6)
{
  double result;

  *(_QWORD *)&result = *(_OWORD *)&vaddq_f64(vmulq_n_f64(vaddq_f64(vmulq_n_f64(a5, a1), vmulq_n_f64(a6, a2)), a4), a3);
  return result;
}

uint64_t sub_21436EE08@<X0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>, double a6@<D6>)
{
  double v7;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  uint64_t result;
  __int128 v16;
  __int128 v17;
  char v18;
  __int128 v19;
  __int128 v20;
  char v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;

  v7 = vabdd_f64(a5, a4);
  if (v7 + 2.22044605e-16 >= 6.28318531)
  {
    result = sub_21436EFB8((uint64_t)&v22, a2);
    v16 = v22;
    v17 = v23;
    v18 = v24;
  }
  else
  {
    if (a2 < 0.0)
      v9 = 0.0;
    else
      v9 = a2;
    if (v9 < a3)
      v10 = a3;
    else
      v10 = v9;
    v11 = v7 * 0.5;
    if (v7 > 3.14159265)
      v11 = 1.57079633;
    v12 = a6 / sin(v11) - v9;
    if (v12 < 0.0)
      v12 = 0.0;
    v13 = v9 + v12;
    if (v13 >= v10)
      v14 = v10;
    else
      v14 = v13;
    asin(a6 / v10);
    sub_214424770();
    if (v14 <= 2.22044605e-16)
    {
      sub_2144246F8();
    }
    else
    {
      asin(a6 / v14);
      v22 = 0x3FF0000000000000uLL;
      *(_QWORD *)&v23 = 0;
      *((_QWORD *)&v23 + 1) = 0x3FF0000000000000;
      v24 = 0;
      v25 = 0;
      sub_214424710();
    }
    sub_214424710();
    result = sub_2144246E0();
    v16 = v19;
    v17 = v20;
    v18 = v21;
  }
  *(_OWORD *)a1 = v16;
  *(_OWORD *)(a1 + 16) = v17;
  *(_BYTE *)(a1 + 32) = v18;
  return result;
}

uint64_t sub_21436EFB8@<X0>(uint64_t a1@<X8>, double a2@<D0>)
{
  double v3;
  uint64_t result;
  __int128 v5;
  __int128 v6;
  char v7;
  __int128 v8;
  __int128 v9;
  char v10;
  __int128 v11;
  __int128 v12;
  char v13;

  if (a2 < 0.0)
    v3 = 0.0;
  else
    v3 = a2;
  if (v3 >= 2.22044605e-16)
  {
    sub_214424770();
    sub_214424710();
    result = sub_214424710();
    v5 = v8;
    v6 = v9;
    v7 = v10;
  }
  else
  {
    result = sub_214424764();
    v5 = v11;
    v6 = v12;
    v7 = v13;
  }
  *(_OWORD *)a1 = v5;
  *(_OWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 32) = v7;
  return result;
}

double sub_21436F0BC(char a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  double v15;
  double v16;
  double v17;
  double v19;
  double v20;

  if (qword_253F11F50 != -1)
  {
    v19 = a4;
    swift_once();
    a4 = v19;
  }
  if (*(double *)&qword_253F1C988 <= a3)
  {
    if (*(double *)&qword_253F1C988 <= a6)
    {
      v20 = a4;
      v15 = acos(fmax(fmin(sqrt((a3 - (a6 * a7 + a6 * a7)) * a3) / (a3 - a6 * a7), 1.0), 0.00001))
          / 0.0174532925
          * a7
          * a8;
      v16 = -v15;
      if ((a1 & 1) == 0)
        v16 = v15;
      v17 = v16 + a2;
      if ((a1 & 1) != 0)
      {
        sub_21436F2EC(v17, a3, v20, a5);
        __sincos_stret(a2 * 0.0174532925);
      }
      else
      {
        __sincos_stret(a2 * 0.0174532925);
        sub_21442471C();
        __sincos_stret(v17 * 0.0174532925);
        a2 = v17;
      }
      sub_214424704();
    }
    else if ((a1 & 1) != 0)
    {
      sub_21436F2EC(a2, a3, a4, a5);
    }
    else
    {
      __sincos_stret(a2 * 0.0174532925);
      sub_21442471C();
    }
  }
  else
  {
    sub_21442471C();
  }
  return a2;
}

uint64_t sub_21436F2EC(double a1, double a2, double a3, double a4)
{
  double v8;
  double v9;
  double v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  uint64_t result;

  v8 = vabdd_f64(a1, a3);
  if (qword_253F11F48 != -1)
    result = swift_once();
  if (v8 < *(double *)&qword_253F1C980 * 360.0)
  {
    __sincos_stret(a1 * 0.0174532925);
    return sub_21442471C();
  }
  v9 = fabs(a2 - a4);
  if (qword_253F11F50 != -1)
    result = swift_once();
  if (v9 < *(double *)&qword_253F1C988)
    return sub_214424710();
  v10 = ceil(v8 / 45.0);
  if ((~*(_QWORD *)&v10 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  if (v10 <= -9.22337204e18)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (v10 >= 9.22337204e18)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v11 = (uint64_t)v10;
  if ((uint64_t)v10 < 1)
  {
LABEL_20:
    __break(1u);
    return result;
  }
  v12 = a1 - a3;
  __sincos_stret((v12 * 0.0 + a3) * 0.0174532925);
  __sincos_stret((v12 * (1.0 / (double)v11) + a3) * 0.0174532925);
  result = sub_214424734();
  if (v11 != 1)
  {
    v13 = 1;
    do
    {
      __sincos_stret((v12 * ((double)++v13 / (double)v11) + a3) * 0.0174532925);
      result = sub_214424734();
    }
    while (v11 != v13);
  }
  return result;
}

uint64_t sub_21436F6CC(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  __int128 v6;

  v1 = *(_QWORD *)(result + 16);
  if (v1)
  {
    v2 = 0;
    v3 = 2;
    if ((unint64_t)(v1 - 1) < 2)
      v3 = v1 - 1;
    v4 = 0uLL;
    do
    {
      if ((unint64_t)(v1 - 1) > 1)
      {
        __break(1u);
        goto LABEL_10;
      }
      v5 = *(_QWORD *)(result + 32 + 8 * v2);
      v6 = v4;
      *(_QWORD *)((unint64_t)&v6 & 0xFFFFFFFFFFFFFFF7 | (8 * (v2 & 1))) = v5;
      v4 = v6;
      ++v2;
    }
    while (v1 != v2);
    if (!v3)
      goto LABEL_10;
  }
  else
  {
LABEL_10:
    __break(1u);
  }
  return result;
}

uint64_t BuilderPair<>.init(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;

  v14 = *(_QWORD *)(a3 - 8);
  (*(void (**)(uint64_t, uint64_t))(v14 + 16))(a7, a1);
  v15 = static ChartContent.conformanceToChartContent.getter(a3, a5);
  v17 = (int *)type metadata accessor for BuilderPair(0, a3, a4, v16);
  *(_QWORD *)(a7 + v17[9]) = v15;
  v18 = *(_QWORD *)(a4 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16))(a7 + v17[10], a2, a4);
  v19 = static ChartContent.conformanceToChartContent.getter(a4, a6);
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(a2, a4);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 8))(a1, a3);
  *(_QWORD *)(a7 + v17[11]) = v19;
  return result;
}

{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;

  v14 = *(_QWORD *)(a3 - 8);
  (*(void (**)(uint64_t, uint64_t))(v14 + 16))(a7, a1);
  v15 = static AxisContent.conformanceToAxisContent.getter(a3, a5);
  v17 = (int *)type metadata accessor for BuilderPair(0, a3, a4, v16);
  *(_QWORD *)(a7 + v17[9]) = v15;
  v18 = *(_QWORD *)(a4 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16))(a7 + v17[10], a2, a4);
  v19 = static AxisContent.conformanceToAxisContent.getter(a4, a6);
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(a2, a4);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 8))(a1, a3);
  *(_QWORD *)(a7 + v17[11]) = v19;
  return result;
}

{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;

  v14 = *(_QWORD *)(a3 - 8);
  (*(void (**)(uint64_t, uint64_t))(v14 + 16))(a7, a1);
  v15 = static AxisMark.conformanceToAxisMark.getter(a3, a5);
  v17 = (int *)type metadata accessor for BuilderPair(0, a3, a4, v16);
  *(_QWORD *)(a7 + v17[9]) = v15;
  v18 = *(_QWORD *)(a4 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16))(a7 + v17[10], a2, a4);
  v19 = static AxisMark.conformanceToAxisMark.getter(a4, a6);
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(a2, a4);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 8))(a1, a3);
  *(_QWORD *)(a7 + v17[11]) = v19;
  return result;
}

uint64_t sub_21436F848(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD **a4)
{
  return sub_21436F880(a1, a2, a3, a4, qword_253F0FFA0, &qword_253F1C740);
}

uint64_t sub_21436F864(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD **a4)
{
  return sub_21436F880(a1, a2, a3, a4, &qword_253F11460, &qword_253F1C978);
}

uint64_t sub_21436F880(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD **a4, _QWORD *a5, uint64_t *a6)
{
  uint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v17;
  uint64_t v18[3];

  if (*a5 != -1)
    swift_once();
  swift_beginAccess();
  v11 = *a6;
  if (*(_QWORD *)(*a6 + 16) && (v12 = sub_214336CE4(a1), (v13 & 1) != 0))
  {
    v14 = *(_QWORD *)(*(_QWORD *)(v11 + 56) + 8 * v12);
    swift_bridgeObjectRetain();
  }
  else
  {
    v18[0] = MEMORY[0x24BEE4AF8];
    sub_214232314(*a4, a3, 0, 0, a1, a2, (uint64_t)a3, (uint64_t)a4, v18);
    sub_214232314(a4[1], a3, 2, 0, a1, a2, (uint64_t)a3, (uint64_t)a4, v18);
    v14 = v18[0];
    swift_beginAccess();
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v17 = *a6;
    *a6 = 0x8000000000000000;
    sub_2142A2364(v14, a1, isUniquelyReferenced_nonNull_native);
    *a6 = v17;
    swift_bridgeObjectRelease();
    swift_endAccess();
  }
  return v14;
}

uint64_t static AnyChartContent._renderChartContent(_:_:)(_QWORD *a1, char *a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[16];
  __int128 v7;
  _QWORD *v8;
  char v9;
  uint64_t v10;

  v2 = *a2;
  v3 = *((_QWORD *)a2 + 1);
  v4 = a1[3];
  v7 = *(_OWORD *)(a1 + 3);
  v8 = sub_2141E88D0(a1, v4);
  v9 = v2;
  v10 = v3;
  return sub_21421FC24(v4, (void (*)(void))sub_214372464, (uint64_t)v6);
}

uint64_t BuilderConditional.init(storage:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;

  v7 = type metadata accessor for BuilderConditional.Storage(0, a2, a3, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a5, a1, v7);
}

uint64_t AnyChartContent.init(_:)@<X0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2141D8DC0(a1, a2);
}

void Never.body.getter()
{
  sub_214425628();
  __break(1u);
}

void sub_21436FB00()
{
  sub_214425628();
  __break(1u);
}

void Optional<A>.body.getter()
{
  sub_214425628();
  __break(1u);
}

uint64_t static Optional<A>._layoutChartContent(_:_:)(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  __int128 v17;
  __int128 v18;

  v8 = sub_214425388();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v17 - v11;
  v13 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v15 = (char *)&v17 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *a2;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, a1, v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v12, 1, a3) == 1)
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v15, v12, a3);
  v18 = v17;
  (*(void (**)(char *, __int128 *, uint64_t, uint64_t))(a4 + 32))(v15, &v18, a3, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, a3);
}

uint64_t static Optional<A>._renderChartContent(_:_:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  _QWORD *v21;
  _BYTE v22[8];
  uint64_t v23;

  v21 = a5;
  v9 = sub_214425388();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v20 - v12;
  v14 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v16 = (char *)&v20 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *a2;
  v18 = *((_QWORD *)a2 + 1);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, a1, v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v13, 1, a3) == 1)
  {
    result = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9);
    *v21 = 0xE000000000000000;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v16, v13, a3);
    v22[0] = v17;
    v23 = v18;
    (*(void (**)(char *, _BYTE *, uint64_t, uint64_t))(a4 + 40))(v16, v22, a3, a4);
    return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, a3);
  }
  return result;
}

void sub_21436FE2C()
{
  sub_214425628();
  __break(1u);
}

uint64_t sub_21436FE74(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  return static Optional<A>._layoutChartContent(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a4 - 8));
}

uint64_t sub_21436FE80@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  return static Optional<A>._renderChartContent(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a4 - 8), a5);
}

void BuilderEmpty.body.getter()
{
  sub_214425628();
  __break(1u);
}

void static BuilderEmpty._renderChartContent(_:_:)(_QWORD *a1@<X8>)
{
  *a1 = 0xE000000000000000;
}

void sub_21436FEE4()
{
  sub_214425628();
  __break(1u);
}

void sub_21436FF2C(_QWORD *a1@<X8>)
{
  *a1 = 0xE000000000000000;
}

uint64_t static BuilderEmpty._chartContentCount(inputs:)()
{
  return 0;
}

uint64_t BuilderConditional.storage.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;

  v5 = type metadata accessor for BuilderConditional.Storage(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a3, v3, v5);
}

void BuilderConditional<>.body.getter()
{
  sub_214425628();
  __break(1u);
}

uint64_t static BuilderConditional<>._layoutChartContent(_:_:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v33 = a5;
  v34 = a6;
  v32 = *(_QWORD *)(a4 - 8);
  v10 = MEMORY[0x24BDAC7A8](a1);
  v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v16 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for BuilderConditional.Storage(0, v17, v18, v18);
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)&v31 - v20;
  v22 = *a2;
  v23 = a2[1];
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))((char *)&v31 - v20, a1, v19);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v25 = v32;
    v26 = (*(uint64_t (**)(char *, char *, uint64_t))(v32 + 32))(v12, v21, a4);
    MEMORY[0x24BDAC7A8](v26);
    *(&v31 - 8) = a3;
    *(&v31 - 7) = a4;
    v27 = v34;
    *(&v31 - 6) = v33;
    *(&v31 - 5) = v27;
    *(&v31 - 4) = (uint64_t)v12;
    *(&v31 - 3) = v22;
    *(&v31 - 2) = v23;
    swift_retain();
    sub_21421FC18(0, (void (*)(void))sub_214370DFC, (uint64_t)(&v31 - 10));
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v12, a4);
  }
  else
  {
    v29 = (*(uint64_t (**)(char *, char *, uint64_t))(v14 + 32))(v16, v21, a3);
    MEMORY[0x24BDAC7A8](v29);
    *(&v31 - 8) = a3;
    *(&v31 - 7) = a4;
    v30 = v34;
    *(&v31 - 6) = v33;
    *(&v31 - 5) = v30;
    *(&v31 - 4) = (uint64_t)v16;
    *(&v31 - 3) = v22;
    *(&v31 - 2) = v23;
    swift_retain();
    sub_21421FC18(1, (void (*)(void))sub_2141ED18C, (uint64_t)(&v31 - 10));
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, a3);
  }
}

uint64_t static BuilderConditional<>._renderChartContent(_:_:)@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  _BYTE v31[4];
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v33 = a5;
  v34 = a6;
  v35 = a7;
  v11 = *(_QWORD *)(a4 - 8);
  v12 = MEMORY[0x24BDAC7A8](a1);
  v14 = &v31[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v18 = &v31[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v21 = type metadata accessor for BuilderConditional.Storage(0, v19, v20, v20);
  MEMORY[0x24BDAC7A8](v21);
  v23 = &v31[-v22];
  v32 = *a2;
  v24 = *((_QWORD *)a2 + 1);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v25 + 16))(&v31[-v22], a1, v21);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v26 = (*(uint64_t (**)(_BYTE *, _BYTE *, uint64_t))(v11 + 32))(v14, v23, a4);
    MEMORY[0x24BDAC7A8](v26);
    *(_QWORD *)&v31[-64] = a3;
    *(_QWORD *)&v31[-56] = a4;
    v27 = v34;
    *(_QWORD *)&v31[-48] = v33;
    *(_QWORD *)&v31[-40] = v27;
    *(_QWORD *)&v31[-32] = v14;
    v31[-24] = v32;
    *(_QWORD *)&v31[-16] = v24;
    sub_21421FC18(0, (void (*)(void))sub_214370E3C, (uint64_t)&v31[-80]);
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v11 + 8))(v14, a4);
  }
  else
  {
    v29 = (*(uint64_t (**)(_BYTE *, _BYTE *, uint64_t))(v16 + 32))(v18, v23, a3);
    MEMORY[0x24BDAC7A8](v29);
    *(_QWORD *)&v31[-64] = a3;
    *(_QWORD *)&v31[-56] = a4;
    v30 = v34;
    *(_QWORD *)&v31[-48] = v33;
    *(_QWORD *)&v31[-40] = v30;
    *(_QWORD *)&v31[-32] = v18;
    v31[-24] = v32;
    *(_QWORD *)&v31[-16] = v24;
    sub_21421FC18(1, (void (*)(void))sub_2141ECF3C, (uint64_t)&v31[-80]);
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v16 + 8))(v18, a3);
  }
}

void sub_214370420()
{
  sub_214425628();
  __break(1u);
}

uint64_t sub_214370468(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return static BuilderConditional<>._layoutChartContent(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), *(_QWORD *)(a4 - 8), *(_QWORD *)(a4 - 16));
}

uint64_t sub_214370478@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return static BuilderConditional<>._renderChartContent(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), *(_QWORD *)(a4 - 8), *(_QWORD *)(a4 - 16), a5);
}

uint64_t sub_214370488(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  __int128 v10;

  v6 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 16))(v8, *(_QWORD *)v3 + *(_QWORD *)(v3 + 24), a2);
  v10 = *(_OWORD *)(v3 + 8);
  (*(void (**)(char *, __int128 *, uint64_t, uint64_t))(a3 + 32))(v8, &v10, a2, a3);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, a2);
}

uint64_t sub_21437053C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;
  _BYTE v17[8];
  uint64_t v18;
  uint64_t v19;

  v4 = v3;
  v7 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v9 = &v17[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  (*(void (**)(char *, _QWORD, uint64_t))(v7 + 16))(v9, *(_QWORD *)v4 + *(_QWORD *)(v4 + 24), a2);
  v10 = *(_QWORD *)(v4 + 16);
  v17[0] = *(_BYTE *)(v4 + 8);
  v18 = v10;
  (*(void (**)(uint64_t *__return_ptr, char *, _BYTE *, uint64_t, uint64_t))(a3 + 40))(&v19, v9, v17, a2, a3);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, a2);
  v11 = v19;
  v12 = *(char **)(v4 + 32);
  swift_retain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v12 = sub_214224250(0, *((_QWORD *)v12 + 2) + 1, 1, v12);
  v14 = *((_QWORD *)v12 + 2);
  v13 = *((_QWORD *)v12 + 3);
  if (v14 >= v13 >> 1)
    v12 = sub_214224250((char *)(v13 > 1), v14 + 1, 1, v12);
  *((_QWORD *)v12 + 2) = v14 + 1;
  *(_QWORD *)&v12[8 * v14 + 32] = v11;
  result = swift_release();
  *(_QWORD *)(v4 + 32) = v12;
  return result;
}

uint64_t BuilderPair.first.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t BuilderPair.firstConformance.getter(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 36));
}

uint64_t BuilderPair.second.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 24) - 8) + 16))(a2, v2 + *(int *)(a1 + 40));
}

uint64_t BuilderPair.secondConformance.getter(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 44));
}

uint64_t type metadata accessor for BuilderPair(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2141D8E88(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for BuilderPair);
}

void BuilderPair<>.body.getter()
{
  sub_214425628();
  __break(1u);
}

uint64_t static BuilderPair<>._layoutChartContent(_:_:)(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v16;
  _BYTE v17[16];
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;

  v12 = type metadata accessor for BuilderPair(0, a3, a4, a4);
  v16 = *a2;
  v13 = sub_21436F880(v12, *(_QWORD *)(v12 + 8), (_QWORD *)(v12 + 8 * *(unsigned int *)(*(_QWORD *)(v12 + 8) + 24)), (_QWORD **)(v12 + 16), &qword_253F121E0, &qword_253F1C990);
  v18 = a3;
  v19 = a4;
  v20 = a5;
  v21 = a6;
  v22 = v16;
  v23 = v13;
  sub_2141DB52C(a1, (uint64_t)sub_214370E84, (uint64_t)v17, v12, MEMORY[0x24BEE4078], MEMORY[0x24BEE4AE0] + 8, MEMORY[0x24BEE40A8], v14);
  return swift_bridgeObjectRelease();
}

uint64_t sub_214370814(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v4 = *(_QWORD *)(a4 + 16);
  if (v4)
  {
    v6 = result;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v7 = 0;
    v8 = (uint64_t *)(a4 + 48);
    do
    {
      v9 = *(v8 - 2);
      v10 = *v8;
      v8 += 3;
      v18 = *(_QWORD *)(v6 + v10);
      v11 = *(_QWORD *)(a2 + 16);
      v12 = *(_QWORD *)(v11 + 16);
      v13 = *(_QWORD *)(v12 + 32);
      swift_retain();
      swift_retain();
      v14 = sub_21421F450(v7, v13);
      v15 = *(_QWORD *)(v12 + 32);
      *(_QWORD *)(v12 + 32) = v14;
      v16 = *(_QWORD *)(v11 + 24);
      *(_QWORD *)(v11 + 24) = v14;
      sub_214370488(v9, v9, v18);
      *(_QWORD *)(v11 + 24) = v16;
      *(_QWORD *)(v12 + 32) = v15;
      swift_release();
      swift_release();
      ++v7;
    }
    while (v4 != v7);
    swift_bridgeObjectRelease();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t static BuilderPair<>._renderChartContent(_:_:)(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v18[6];
  char v19;
  uint64_t v20;
  uint64_t v21;

  v12 = type metadata accessor for BuilderPair(0, a3, a4, a4);
  v13 = *((_QWORD *)a2 + 1);
  v14 = *a2;
  v15 = sub_21436F880(v12, *(_QWORD *)(v12 + 8), (_QWORD *)(v12 + 8 * *(unsigned int *)(*(_QWORD *)(v12 + 8) + 24)), (_QWORD **)(v12 + 16), &qword_253F121E0, &qword_253F1C990);
  v18[2] = a3;
  v18[3] = a4;
  v18[4] = a5;
  v18[5] = a6;
  v19 = v14;
  v20 = v13;
  v21 = v15;
  sub_2141DB52C(a1, (uint64_t)sub_214370EB8, (uint64_t)v18, v12, MEMORY[0x24BEE4078], (uint64_t)&type metadata for _ChartContentRenderOutputs, MEMORY[0x24BEE40A8], v16);
  return swift_bridgeObjectRelease();
}

uint64_t sub_214370A48@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v32;
  uint64_t v33;

  v4 = a2;
  v5 = a4;
  v6 = MEMORY[0x24BEE4AF8];
  v7 = *(_QWORD *)(a3 + 16);
  if (v7)
  {
    v32 = *(_QWORD *)(a2 + 16);
    swift_retain();
    swift_bridgeObjectRetain();
    v10 = 0;
    v11 = (uint64_t *)(a3 + 48);
    do
    {
      v12 = *(v11 - 2);
      v13 = *v11;
      v11 += 3;
      v33 = *(_QWORD *)(a1 + v13);
      v14 = *(_QWORD *)(v32 + 16);
      v15 = *(_QWORD *)(v14 + 32);
      swift_retain();
      v16 = sub_21421F450(v10, v15);
      v17 = a1;
      v18 = *(_QWORD *)(v14 + 32);
      *(_QWORD *)(v14 + 32) = v16;
      v19 = *(_QWORD *)(v32 + 24);
      *(_QWORD *)(v32 + 24) = v16;
      sub_21437053C(v12, v12, v33);
      *(_QWORD *)(v32 + 24) = v19;
      *(_QWORD *)(v14 + 32) = v18;
      a1 = v17;
      swift_release();
      ++v10;
    }
    while (v7 != v10);
    swift_bridgeObjectRelease();
    v5 = a4;
    v6 = MEMORY[0x24BEE4AF8];
    v4 = a2;
  }
  else
  {
    swift_retain();
  }
  v20 = (int *)type metadata accessor for SgGroup(0);
  v21 = swift_allocBox();
  v23 = v22;
  v24 = *(_QWORD *)(*(_QWORD *)(v4 + 16) + 24);
  v25 = swift_bridgeObjectRetain();
  v26 = sub_214251F48(v25);
  swift_bridgeObjectRelease();
  v27 = (char *)v23 + v20[6];
  v28 = type metadata accessor for SgClipRect(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v27, 1, 1, v28);
  *v23 = v24;
  v23[1] = v26;
  *(_QWORD *)((char *)v23 + v20[7]) = 0x3FF0000000000000;
  *(_QWORD *)((char *)v23 + v20[8]) = 0;
  *(_QWORD *)((char *)v23 + v20[9]) = v6;
  *((_BYTE *)v23 + v20[10]) = 0;
  *v5 = v21;
  swift_bridgeObjectRelease();
  return swift_release();
}

void sub_214370C5C()
{
  sub_214425628();
  __break(1u);
}

uint64_t sub_214370CA4(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  return static BuilderPair<>._layoutChartContent(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), *(_QWORD *)(a4 - 8), *(_QWORD *)(a4 - 16));
}

uint64_t sub_214370CB4(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  return static BuilderPair<>._renderChartContent(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), *(_QWORD *)(a4 - 8), *(_QWORD *)(a4 - 16));
}

uint64_t AnyChartContent.storage.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_2141D7878(v1, a1);
}

uint64_t AnyChartContent.init<A>(erasing:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t *v6;

  a4[3] = a2;
  a4[4] = a3;
  v6 = sub_2141D8DD8(a4);
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(v6, a1, a2);
}

uint64_t static AnyChartContent._layoutChartContent(_:_:)(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = *a2;
  v3 = a2[1];
  v4 = a1[3];
  v5 = a1[4];
  v6 = sub_2141E88D0(a1, v4);
  return sub_214370D4C((uint64_t)v6, v2, v3, v4, v5);
}

uint64_t sub_214370D4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v7[8];

  v7[2] = a4;
  v7[3] = a5;
  v7[4] = a1;
  v7[5] = a2;
  v7[6] = a3;
  swift_retain();
  sub_21421FC24(a4, (void (*)(void))sub_214372424, (uint64_t)v7);
  return swift_release();
}

uint64_t sub_214370DA4(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[5];
  char v7;
  uint64_t v8;

  v6[2] = a4;
  v6[3] = a5;
  v6[4] = a1;
  v7 = a2 & 1;
  v8 = a3;
  return sub_21421FC24(a4, (void (*)(void))sub_214372464, (uint64_t)v6);
}

uint64_t type metadata accessor for BuilderConditional.Storage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2141D8E88(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for BuilderConditional.Storage);
}

uint64_t sub_214370DFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v4;

  v2 = *(_QWORD *)(v0 + 40);
  v1 = *(_QWORD *)(v0 + 48);
  v4 = *(_OWORD *)(v0 + 56);
  return (*(uint64_t (**)(uint64_t, __int128 *))(v2 + 32))(v1, &v4);
}

uint64_t sub_214370E3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE v5[8];
  uint64_t v6;

  v2 = *(_QWORD *)(v0 + 40);
  v1 = *(_QWORD *)(v0 + 48);
  v3 = *(_QWORD *)(v0 + 64);
  v5[0] = *(_BYTE *)(v0 + 56);
  v6 = v3;
  return (*(uint64_t (**)(uint64_t, _BYTE *))(v2 + 40))(v1, v5);
}

uint64_t sub_214370E84(uint64_t a1)
{
  uint64_t *v1;

  return sub_214370814(a1, v1[6], v1[7], v1[8]);
}

uint64_t sub_214370EB8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_214370A48(a1, *(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 64), a2);
}

_UNKNOWN **sub_214370EEC()
{
  return &protocol witness table for Never;
}

uint64_t sub_214370EF8(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t result;
  __int128 v5;

  v5 = *a3;
  result = MEMORY[0x2199CD934](&unk_21442EB2C, a2, &v5);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_214370F38(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t result;
  __int128 v5;

  v5 = *a3;
  result = MEMORY[0x2199CD934](&protocol conformance descriptor for <> BuilderConditional<A, B>, a2, &v5);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_214370F78(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = *a2;
  v3 = a2[1];
  v4 = a1[3];
  v5 = a1[4];
  v6 = sub_2141E88D0(a1, v4);
  return sub_214370D4C((uint64_t)v6, v2, v3, v4, v5);
}

uint64_t sub_214370FB8(_QWORD *a1, uint64_t a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = a1[3];
  v5 = a1[4];
  v6 = sub_2141E88D0(a1, v4);
  return sub_214370DA4((uint64_t)v6, v2, v3, v4, v5);
}

ValueMetadata *type metadata accessor for ChartContentBuilder()
{
  return &type metadata for ChartContentBuilder;
}

ValueMetadata *type metadata accessor for BuilderEmpty()
{
  return &type metadata for BuilderEmpty;
}

uint64_t sub_21437102C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v5;

  result = type metadata accessor for BuilderConditional.Storage(319, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for BuilderConditional(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2141D8E88(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for BuilderConditional);
}

uint64_t sub_2143710C4()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_21437114C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  if (*(_QWORD *)(v5 + 64) <= *(_QWORD *)(v4 + 64))
    v6 = *(_QWORD *)(v4 + 64);
  else
    v6 = *(_QWORD *)(v5 + 64);
  v7 = (*(_BYTE *)(v5 + 80) | *(_BYTE *)(v4 + 80));
  if (v7 <= 7
    && (unint64_t)(v6 + 1) <= 0x18
    && ((*(_DWORD *)(v5 + 80) | *(_DWORD *)(v4 + 80)) & 0x100000) == 0)
  {
    v11 = *((unsigned __int8 *)a2 + v6);
    if (v11 >= 2)
    {
      if (v6 <= 3)
        v12 = v6;
      else
        v12 = 4;
      __asm { BR              X15 }
    }
    if (v11 == 1)
    {
      (*(void (**)(uint64_t *))(v5 + 16))(a1);
      *((_BYTE *)v3 + v6) = 1;
    }
    else
    {
      (*(void (**)(uint64_t *))(v4 + 16))(a1);
      *((_BYTE *)v3 + v6) = 0;
    }
  }
  else
  {
    v10 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v10 + ((v7 + 16) & ~v7));
    swift_retain();
  }
  return v3;
}

uint64_t sub_214371278(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a2 + 24);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v4 = *(_QWORD *)(v3 + 64);
  v5 = *(_QWORD *)(v2 - 8);
  if (*(_QWORD *)(v5 + 64) > v4)
    v4 = *(_QWORD *)(v5 + 64);
  v6 = *(unsigned __int8 *)(a1 + v4);
  if (v6 < 2)
  {
    if (v6 == 1)
      v3 = *(_QWORD *)(v2 - 8);
    return (*(uint64_t (**)(void))(v3 + 8))();
  }
  else
  {
    if (v4 <= 3)
      v7 = v4;
    else
      v7 = 4;
    return ((uint64_t (*)(void))((char *)&loc_2143712C4 + 4 * byte_21442EA25[v7]))();
  }
}

uint64_t sub_214371318(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  BOOL v10;

  v4 = *(_QWORD *)(a3 + 24);
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v4 - 8);
  if (*(_QWORD *)(v6 + 64) <= *(_QWORD *)(v5 + 64))
    v7 = *(_QWORD *)(v5 + 64);
  else
    v7 = *(_QWORD *)(v6 + 64);
  v8 = *(unsigned __int8 *)(a2 + v7);
  if (v8 >= 2)
  {
    if (v7 <= 3)
      v9 = v7;
    else
      v9 = 4;
    __asm { BR              X16 }
  }
  v10 = v8 == 1;
  if (v8 == 1)
    v5 = *(_QWORD *)(v4 - 8);
  (*(void (**)(uint64_t))(v5 + 16))(a1);
  *(_BYTE *)(a1 + v7) = v10;
  return a1;
}

uint64_t sub_2143713EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(a3 + 24);
    v7 = *(_QWORD *)(v5 - 8);
    v8 = *(_QWORD *)(v6 - 8);
    if (*(_QWORD *)(v8 + 64) <= *(_QWORD *)(v7 + 64))
      v9 = *(_QWORD *)(v7 + 64);
    else
      v9 = *(_QWORD *)(v8 + 64);
    v10 = *(unsigned __int8 *)(a1 + v9);
    if (v10 >= 2)
    {
      if (v9 <= 3)
        v11 = v9;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    if (v10 == 1)
      v12 = *(_QWORD *)(v6 - 8);
    else
      v12 = *(_QWORD *)(v5 - 8);
    if (v10 == 1)
      v13 = *(_QWORD *)(a3 + 24);
    else
      v13 = *(_QWORD *)(a3 + 16);
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a1, v13);
    v14 = *(unsigned __int8 *)(a2 + v9);
    if (v14 >= 2)
    {
      if (v9 <= 3)
        v15 = v9;
      else
        v15 = 4;
      __asm { BR              X12 }
    }
    v16 = v14 == 1;
    if (v14 == 1)
      v17 = v8;
    else
      v17 = v7;
    if (v14 == 1)
      v18 = v6;
    else
      v18 = v5;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(a1, a2, v18);
    *(_BYTE *)(a1 + v9) = v16;
  }
  return a1;
}

uint64_t sub_214371568(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  BOOL v10;

  v4 = *(_QWORD *)(a3 + 24);
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v4 - 8);
  if (*(_QWORD *)(v6 + 64) <= *(_QWORD *)(v5 + 64))
    v7 = *(_QWORD *)(v5 + 64);
  else
    v7 = *(_QWORD *)(v6 + 64);
  v8 = *(unsigned __int8 *)(a2 + v7);
  if (v8 >= 2)
  {
    if (v7 <= 3)
      v9 = v7;
    else
      v9 = 4;
    __asm { BR              X16 }
  }
  v10 = v8 == 1;
  if (v8 == 1)
    v5 = *(_QWORD *)(v4 - 8);
  (*(void (**)(uint64_t))(v5 + 32))(a1);
  *(_BYTE *)(a1 + v7) = v10;
  return a1;
}

uint64_t sub_21437163C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(a3 + 24);
    v7 = *(_QWORD *)(v5 - 8);
    v8 = *(_QWORD *)(v6 - 8);
    if (*(_QWORD *)(v8 + 64) <= *(_QWORD *)(v7 + 64))
      v9 = *(_QWORD *)(v7 + 64);
    else
      v9 = *(_QWORD *)(v8 + 64);
    v10 = *(unsigned __int8 *)(a1 + v9);
    if (v10 >= 2)
    {
      if (v9 <= 3)
        v11 = v9;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    if (v10 == 1)
      v12 = *(_QWORD *)(v6 - 8);
    else
      v12 = *(_QWORD *)(v5 - 8);
    if (v10 == 1)
      v13 = *(_QWORD *)(a3 + 24);
    else
      v13 = *(_QWORD *)(a3 + 16);
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a1, v13);
    v14 = *(unsigned __int8 *)(a2 + v9);
    if (v14 >= 2)
    {
      if (v9 <= 3)
        v15 = v9;
      else
        v15 = 4;
      __asm { BR              X12 }
    }
    v16 = v14 == 1;
    if (v14 == 1)
      v17 = v8;
    else
      v17 = v7;
    if (v14 == 1)
      v18 = v6;
    else
      v18 = v5;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 32))(a1, a2, v18);
    *(_BYTE *)(a1 + v9) = v16;
  }
  return a1;
}

uint64_t sub_2143717B8(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  char v5;
  int v6;
  unsigned int v8;
  int v9;
  unsigned int v10;

  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 64);
  if (v3 <= *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64))
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_21;
  v4 = v3 + 1;
  v5 = 8 * (v3 + 1);
  if ((v3 + 1) <= 3)
  {
    v8 = ((a2 + ~(-1 << v5) - 254) >> v5) + 1;
    if (HIWORD(v8))
    {
      v6 = *(_DWORD *)(a1 + v4);
      if (!v6)
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v8 > 0xFF)
    {
      v6 = *(unsigned __int16 *)(a1 + v4);
      if (!*(_WORD *)(a1 + v4))
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v8 < 2)
    {
LABEL_21:
      v10 = *(unsigned __int8 *)(a1 + v3);
      if (v10 >= 2)
        return (v10 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v6 = *(unsigned __int8 *)(a1 + v4);
  if (!*(_BYTE *)(a1 + v4))
    goto LABEL_21;
LABEL_14:
  v9 = (v6 - 1) << v5;
  if (v4 > 3)
    v9 = 0;
  if (!(_DWORD)v4)
    return (v9 + 255);
  if (v4 > 3)
    LODWORD(v4) = 4;
  return ((uint64_t (*)(void))((char *)&loc_214371880 + 4 * byte_21442EA48[(v4 - 1)]))();
}

void sub_2143718CC(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5;
  size_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 24) - 8) + 64) > v5)
    v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 24) - 8) + 64);
  v6 = v5 + 1;
  if (a3 < 0xFF)
  {
    v7 = 0;
  }
  else if (v6 <= 3)
  {
    v9 = ((a3 + ~(-1 << (8 * v6)) - 254) >> (8 * v6)) + 1;
    if (HIWORD(v9))
    {
      v7 = 4u;
    }
    else if (v9 >= 0x100)
    {
      v7 = 2;
    }
    else
    {
      v7 = v9 > 1;
    }
  }
  else
  {
    v7 = 1u;
  }
  if (a2 <= 0xFE)
    __asm { BR              X11 }
  v8 = a2 - 255;
  if (v6 < 4)
  {
    if ((_DWORD)v5 != -1)
    {
      v10 = v8 & ~(-1 << (8 * v6));
      bzero(a1, v6);
      if ((_DWORD)v6 == 3)
      {
        *a1 = v10;
        *((_BYTE *)a1 + 2) = BYTE2(v10);
      }
      else if ((_DWORD)v6 == 2)
      {
        *a1 = v10;
      }
      else
      {
        *(_BYTE *)a1 = v10;
      }
    }
  }
  else
  {
    bzero(a1, v5 + 1);
    *(_DWORD *)a1 = v8;
  }
  __asm { BR              X10 }
}

uint64_t sub_214371A78(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 64);
  if (v2 <= *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64))
    v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64);
  if (*(unsigned __int8 *)(a1 + v2) < 2u)
    return *(unsigned __int8 *)(a1 + v2);
  if (v2 <= 3)
    v3 = v2;
  else
    v3 = 4;
  return ((uint64_t (*)(void))((char *)&loc_214371AC4 + 4 * byte_21442EA56[v3]))();
}

void sub_214371B0C(_BYTE *a1, unsigned int a2, uint64_t a3)
{
  unint64_t v4;
  size_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;

  if (a2 > 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 64) <= *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16)
                                                                                              - 8)
                                                                                  + 64))
      v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
    else
      v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 64);
    v6 = a2 - 2;
    if (v5 < 4)
    {
      v7 = v6 >> (8 * v5);
      v8 = v6 & ~(-1 << (8 * v5));
      a1[v5] = v7 + 2;
      bzero(a1, v5);
      if ((_DWORD)v5 == 3)
      {
        *(_WORD *)a1 = v8;
        a1[2] = BYTE2(v8);
      }
      else if ((_DWORD)v5 == 2)
      {
        *(_WORD *)a1 = v8;
      }
      else
      {
        *a1 = v8;
      }
    }
    else
    {
      a1[v5] = 2;
      bzero(a1, v5);
      *(_DWORD *)a1 = v6;
    }
  }
  else
  {
    v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 64);
    if (v4 <= *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64))
      v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
    a1[v4] = a2;
  }
}

uint64_t sub_214371BF4()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_214371C8C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;

  v4 = a1;
  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(v5 - 8);
  v9 = *(_DWORD *)(v8 + 80);
  v10 = *(_QWORD *)(v8 + 64) + 7;
  v11 = v9 | *(_DWORD *)(v6 + 80) & 0xF8;
  if (v11 > 7
    || ((*(_DWORD *)(v6 + 80) | *(_DWORD *)(v8 + 80)) & 0x100000) != 0
    || ((v10 + ((v9 + ((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    v14 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v14 + (((v11 | 7) + 16) & ~(unint64_t)(v11 | 7)));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v6 + 16))(a1, a2);
    v15 = (_QWORD *)(((unint64_t)v4 + v7 + 7) & 0xFFFFFFFFFFFFFFF8);
    v16 = (_QWORD *)(((unint64_t)a2 + v7 + 7) & 0xFFFFFFFFFFFFFFF8);
    *v15 = *v16;
    v17 = ((unint64_t)v15 + v9 + 8) & ~v9;
    v18 = ((unint64_t)v16 + v9 + 8) & ~v9;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v17, v18, v5);
    *(_QWORD *)((v10 + v17) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v10 + v18) & 0xFFFFFFFFFFFFF8);
  }
  return v4;
}

uint64_t sub_214371DCC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v4 + 8))();
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 8))((((a1 + *(_QWORD *)(v4 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 80));
}

uint64_t sub_214371E30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 16))();
  v7 = *(_QWORD *)(v6 + 64) + 7;
  v8 = (_QWORD *)((v7 + a1) & 0xFFFFFFFFFFFFFFF8);
  v9 = (_QWORD *)((v7 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v8 = *v9;
  v10 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = ((unint64_t)v8 + v11 + 8) & ~v11;
  v13 = ((unint64_t)v9 + v11 + 8) & ~v11;
  (*(void (**)(uint64_t, uint64_t))(v10 + 16))(v12, v13);
  *(_QWORD *)((*(_QWORD *)(v10 + 64) + 7 + v12) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v10 + 64) + 7 + v13) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_214371EE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 24))();
  v7 = *(_QWORD *)(v6 + 64) + 7;
  v8 = (_QWORD *)((v7 + a1) & 0xFFFFFFFFFFFFFFF8);
  v9 = (_QWORD *)((v7 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v8 = *v9;
  v10 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = ((unint64_t)v8 + v11 + 8) & ~v11;
  v13 = ((unint64_t)v9 + v11 + 8) & ~v11;
  (*(void (**)(uint64_t, uint64_t))(v10 + 24))(v12, v13);
  *(_QWORD *)((*(_QWORD *)(v10 + 64) + 7 + v12) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v10 + 64) + 7 + v13) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_214371F90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 32))();
  v7 = *(_QWORD *)(v6 + 64) + 7;
  v8 = (_QWORD *)((v7 + a1) & 0xFFFFFFFFFFFFFFF8);
  v9 = (_QWORD *)((v7 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v8 = *v9;
  v10 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = ((unint64_t)v8 + v11 + 8) & ~v11;
  v13 = ((unint64_t)v9 + v11 + 8) & ~v11;
  (*(void (**)(uint64_t, uint64_t))(v10 + 32))(v12, v13);
  *(_QWORD *)((*(_QWORD *)(v10 + 64) + 7 + v12) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v10 + 64) + 7 + v13) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_214372040(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 40))();
  v7 = *(_QWORD *)(v6 + 64) + 7;
  v8 = (_QWORD *)((v7 + a1) & 0xFFFFFFFFFFFFFFF8);
  v9 = (_QWORD *)((v7 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v8 = *v9;
  v10 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = ((unint64_t)v8 + v11 + 8) & ~v11;
  v13 = ((unint64_t)v9 + v11 + 8) & ~v11;
  (*(void (**)(uint64_t, uint64_t))(v10 + 40))(v12, v13);
  *(_QWORD *)((*(_QWORD *)(v10 + 64) + 7 + v12) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v10 + 64) + 7 + v13) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_2143720F0(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  _QWORD *v15;

  v3 = *(_QWORD *)(a3 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  if (v5 <= *(_DWORD *)(v6 + 84))
    v7 = *(_DWORD *)(v6 + 84);
  else
    v7 = *(_DWORD *)(v4 + 84);
  if (v7 <= 1)
    v8 = 1;
  else
    v8 = v7;
  if (!a2)
    return 0;
  v9 = *(_QWORD *)(v4 + 64);
  v10 = *(unsigned __int8 *)(v6 + 80);
  if (v8 >= a2)
  {
    if (v5 == v8)
    {
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v4 + 48))(a1, *(unsigned int *)(v4 + 84), v3);
    }
    else
    {
      v15 = (_QWORD *)((a1 + v9 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v7 > 1)
        return (*(uint64_t (**)(unint64_t))(v6 + 48))(((unint64_t)v15 + v10 + 8) & ~v10);
      else
        return *v15 == 0;
    }
  }
  else
  {
    if (((((*(_QWORD *)(v6 + 64) + ((v10 + ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v10) + 7) & 0xFFFFFFFFFFFFFFF8)
         + 8) & 0xFFFFFFF8) != 0)
      v11 = 2;
    else
      v11 = a2 - v8 + 1;
    if (v11 >= 0x10000)
      v12 = 4;
    else
      v12 = 2;
    if (v11 < 0x100)
      v12 = 1;
    if (v11 >= 2)
      v13 = v12;
    else
      v13 = 0;
    return ((uint64_t (*)(void))((char *)&loc_214372198 + 4 * byte_21442EA5B[v13]))();
  }
}

void sub_214372240(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  int v12;
  unsigned int v13;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v5 + 84) <= *(_DWORD *)(v6 + 84))
    v7 = *(_DWORD *)(v6 + 84);
  else
    v7 = *(_DWORD *)(v5 + 84);
  if (v7 <= 1)
    v8 = 1;
  else
    v8 = v7;
  v9 = *(unsigned __int8 *)(v6 + 80);
  if (v8 >= a3)
  {
    v12 = 0;
    if (a2 <= v8)
      goto LABEL_20;
  }
  else
  {
    if (((*(_DWORD *)(v6 + 64) + (((_DWORD)v9 + ((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 8) & ~(_DWORD)v9) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v10 = a3 - v8 + 1;
    else
      v10 = 2;
    if (v10 >= 0x10000)
      v11 = 4;
    else
      v11 = 2;
    if (v10 < 0x100)
      v11 = 1;
    if (v10 >= 2)
      v12 = v11;
    else
      v12 = 0;
    if (a2 <= v8)
LABEL_20:
      __asm { BR              X4 }
  }
  if (((*(_DWORD *)(v6 + 64) + (((_DWORD)v9 + ((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 8) & ~(_DWORD)v9) + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    v13 = ~v8 + a2;
    bzero(a1, ((*(_QWORD *)(v6 + 64) + ((v9 + ((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v9) + 7) & 0xFFFFFFFFFFFFFFF8)+ 8);
    *a1 = v13;
  }
  __asm { BR              X10 }
}

void sub_214372364()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x2143723FCLL);
}

void sub_21437236C(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x214372374);
  JUMPOUT(0x2143723FCLL);
}

void sub_2143723B4()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x2143723FCLL);
}

void sub_2143723BC()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x2143723FCLL);
}

void sub_2143723C4(uint64_t a1, unsigned int a2)
{
  int v2;
  unsigned int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_WORD *)(v6 + v7) = 0;
  if (a2)
  {
    if (v2 == v4)
      JUMPOUT(0x2143723E0);
    if (v3 > 1)
      JUMPOUT(0x2143723D0);
    if (a2 > 1)
      JUMPOUT(0x2143723F4);
    *(_QWORD *)((v6 + v5 + 7) & 0xFFFFFFFFFFFFFFF8) = 0;
  }
  JUMPOUT(0x2143723FCLL);
}

ValueMetadata *type metadata accessor for AnyChartContent()
{
  return &type metadata for AnyChartContent;
}

uint64_t sub_214372424()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v4;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(v0 + 32);
  v4 = *(_OWORD *)(v0 + 40);
  return (*(uint64_t (**)(uint64_t, __int128 *))(v1 + 32))(v2, &v4);
}

uint64_t sub_214372464()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE v5[8];
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 48);
  v5[0] = *(_BYTE *)(v0 + 40);
  v6 = v3;
  return (*(uint64_t (**)(uint64_t, _BYTE *))(v1 + 40))(v2, v5);
}

uint64_t static PlottableValue.value(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  MEMORY[0x24BDAC7A8](a1);
  v15 = (char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v15, v17, v18);
  a3 &= 1u;
  sub_21437293C(a1, a2, a3, a4, (uint64_t)v15, a5, a6, a7);
  sub_2141DD130(a1, a2, a3);
  return swift_bridgeObjectRetain();
}

uint64_t sub_214372580(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v7 = v3[5];
  v8 = v3[6];
  v9 = v3[3];
  v10 = v3[4];
  v11 = sub_2141E88D0(v3, v9);
  return sub_21437A9F0(v7, (uint64_t)v11, a1, a2, v7, v9, a3, v8, v10);
}

uint64_t static PlottableValue.value(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X4>, uint64_t a3@<X5>, uint64_t a4@<X6>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  v9 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v12 = sub_21442480C();
  v14 = v13;
  v16 = v15;
  v18 = v17;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, a3);
  return sub_21437293C(v12, v14, v16 & 1, v18, (uint64_t)v11, a3, a4, a5);
}

uint64_t sub_21437271C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)a8 = a1;
  *(_QWORD *)(a8 + 8) = a2;
  *(_BYTE *)(a8 + 16) = a3 & 1;
  *(_QWORD *)(a8 + 24) = a4;
  v11 = a8 + *(int *)(type metadata accessor for PlottableValue(0, a6, a7, a4) + 36);
  v12 = v11 + *(int *)(swift_getTupleTypeMetadata2() + 48);
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a6 - 8) + 32);
  v13(v11, a5, a6);
  v14 = sub_2144252BC();
  v13(v12, a5 + *(int *)(v14 + 36), a6);
  type metadata accessor for PlottableValue.Storage(0, a6, a7, v15);
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_214372800(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;

  v15 = v8[5];
  v14 = v8[6];
  v16 = v8[3];
  v17 = v8[4];
  v18 = sub_2141E88D0(v8, v16);
  return sub_21437ADF4(v15, (uint64_t)v18, a2, a1, a3, a4, a5, v15, v16, a6, a7, a8, v14, v17);
}

double sub_21437289C@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  double result;

  v5 = v2[5];
  v6 = v2[6];
  v7 = v2[3];
  v8 = v2[4];
  v9 = sub_2141E88D0(v2, v7);
  if (sub_21437A7D0(v5, (uint64_t)v9, a1, v5, v7, v6, v8))
  {
    sub_21437B30C((uint64_t)v2, a2);
  }
  else
  {
    *(_QWORD *)(a2 + 48) = 0;
    result = 0.0;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)a2 = 0u;
  }
  return result;
}

uint64_t sub_21437293C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)a8 = a1;
  *(_QWORD *)(a8 + 8) = a2;
  *(_BYTE *)(a8 + 16) = a3 & 1;
  *(_QWORD *)(a8 + 24) = a4;
  v12 = type metadata accessor for PlottableValue(0, a6, a7, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a6 - 8) + 32))(a8 + *(int *)(v12 + 36), a5, a6);
  type metadata accessor for PlottableValue.Storage(0, a6, a7, v13);
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_2143729C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v14;

  v6 = *(_QWORD *)(a1 + 16);
  v7 = type metadata accessor for PlottableValue.Storage(0, v6, *(_QWORD *)(a1 + 24), a2);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v14 - v8;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)&v14 - v8, v3 + *(int *)(a1 + 36), v7);
  if (swift_getEnumCaseMultiPayload() != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a3, v9, v6);
  v11 = &v9[*(int *)(swift_getTupleTypeMetadata2() + 48)];
  v12 = *(_QWORD *)(v6 - 8);
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(a3, v9, v6);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v11, v6);
}

uint64_t sub_214372AC8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v9;
  uint64_t *v10;
  uint64_t result;

  v9 = type metadata accessor for PlottableProjection(0, a2, a3, a4);
  a5[3] = v9;
  a5[4] = MEMORY[0x2199CD934](&unk_21442EDD4, v9);
  v10 = sub_2141D8DD8(a5);
  result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v10, a1, v9);
  a5[5] = a3;
  a5[6] = a4;
  return result;
}

uint64_t static PlottableValue.value<A>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE v23[16];

  v9 = *(_QWORD *)(a3 - 8);
  v10 = MEMORY[0x24BDAC7A8](a1);
  v12 = &v23[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v10);
  (*(void (**)(_BYTE *))(v14 + 16))(&v23[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)]);
  v15 = sub_214424818();
  v17 = v16;
  v19 = v18;
  v21 = v20;
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v9 + 16))(v12, a2, a3);
  return sub_21437293C(v15, v17, v19 & 1, v21, (uint64_t)v12, a3, a4, a5);
}

uint64_t static PlottableValue.value<>(_:_:)@<X0>(uint64_t a1@<X4>, uint64_t a2@<X5>, uint64_t a3@<X6>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v19 = a4;
  v20 = a3;
  v6 = sub_2144252BC();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v18 - v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v10 = sub_21442480C();
  v12 = v11;
  v14 = v13;
  v16 = v15;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, v6);
  return sub_21437271C(v10, v12, v14 & 1, v16, (uint64_t)v9, a2, v20, v19);
}

uint64_t static PlottableValue.value<A>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v25 = a6;
  v26 = a5;
  v10 = sub_2144252BC();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v24 - v13;
  MEMORY[0x24BDAC7A8](v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))((char *)&v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a4);
  v17 = sub_214424818();
  v19 = v18;
  LOBYTE(a4) = v20;
  v22 = v21;
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, a2, v10);
  return sub_21437271C(v17, v19, a4 & 1, v22, (uint64_t)v14, a3, v26, v25);
}

uint64_t static PlottableValue.value<>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  _BYTE v21[16];

  v16 = sub_2144252BC();
  MEMORY[0x24BDAC7A8](v16);
  v18 = &v21[-v17];
  (*(void (**)(_BYTE *, uint64_t))(v19 + 16))(&v21[-v17], a5);
  sub_21437271C(a1, a2, a3 & 1, a4, (uint64_t)v18, a6, a7, a8);
  sub_2141DD130(a1, a2, a3 & 1);
  return swift_bridgeObjectRetain();
}

uint64_t static PlottableValue.value<>(_:_:unit:calendar:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, char *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t *a8@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t result;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  void (*v43)(char *, char *, uint64_t);
  char *v44;
  void (*v45)(char *, char *, uint64_t);
  uint64_t v46;
  void (*v47)(char *, uint64_t);
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;

  v71 = a7;
  v72 = a6;
  v73 = a5;
  v68 = a2;
  v69 = a4;
  v67 = a3;
  v66 = a1;
  v70 = a8;
  v62 = sub_2141D8BF8(&qword_253F15D60);
  v8 = MEMORY[0x24BDAC7A8](v62);
  v10 = (char *)&v59 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v60 = (char *)&v59 - v11;
  v12 = sub_214423B70();
  v59 = *(_QWORD *)(v12 - 8);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v59 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v59 - v16;
  v74 = sub_2141D8BF8(&qword_253F105C0);
  v18 = MEMORY[0x24BDAC7A8](v74);
  v64 = (char *)&v59 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v65 = (uint64_t)&v59 - v20;
  v21 = sub_2141D8BF8(&qword_253F10FC8);
  MEMORY[0x24BDAC7A8](v21);
  v23 = (char *)&v59 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = sub_214423900();
  v24 = *(_QWORD *)(v76 - 8);
  MEMORY[0x24BDAC7A8](v76);
  v75 = (char *)&v59 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = sub_2141D8BF8(&qword_253F13D88);
  MEMORY[0x24BDAC7A8](v26);
  v28 = (char *)&v59 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = sub_214423C54();
  v30 = *(_QWORD *)(v29 - 8);
  MEMORY[0x24BDAC7A8](v29);
  v32 = (char *)&v59 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = v33;
  sub_2141E070C(v71, (uint64_t)v28, &qword_253F13D88);
  v35 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v34);
  v63 = v34;
  v61 = v30;
  if (v35 == 1)
  {
    sub_214423C00();
    sub_2141E0750((uint64_t)v28, &qword_253F13D88);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v30 + 32))(v32, v28, v34);
  }
  v73 = v32;
  sub_214423BB8();
  v36 = v76;
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v24 + 48))(v23, 1, v76);
  if ((_DWORD)result != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v75, v23, v36);
    sub_2144238F4();
    sub_2144238E8();
    sub_21424CC2C();
    result = sub_214424E84();
    if ((result & 1) != 0)
    {
      v38 = v62;
      v39 = v60;
      v40 = &v60[*(int *)(v62 + 48)];
      v41 = v10;
      v42 = v59;
      v43 = *(void (**)(char *, char *, uint64_t))(v59 + 32);
      v43(v60, v17, v12);
      v43(v40, v15, v12);
      v44 = &v41[*(int *)(v38 + 48)];
      v45 = *(void (**)(char *, char *, uint64_t))(v42 + 16);
      v45(v41, v39, v12);
      v45(v44, v40, v12);
      v72 = v24;
      v46 = (uint64_t)v64;
      v43(v64, v41, v12);
      v47 = *(void (**)(char *, uint64_t))(v42 + 8);
      v47(v44, v12);
      v48 = &v41[*(int *)(v38 + 48)];
      v43(v41, v39, v12);
      v43(v48, v40, v12);
      v43((char *)(v46 + *(int *)(v74 + 36)), v48, v12);
      v47(v41, v12);
      v49 = v65;
      sub_214373510(v46, v65);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v50 = sub_21442480C();
      v52 = v51;
      LOBYTE(v42) = v53;
      v55 = v54;
      sub_2141E070C(v49, v46, &qword_253F105C0);
      v56 = v70;
      *v70 = v50;
      v56[1] = v52;
      *((_BYTE *)v56 + 16) = v42 & 1;
      v56[3] = v55;
      v57 = (char *)v56 + *(int *)(sub_2141D8BF8(&qword_253F12168) + 36);
      v58 = &v57[*(int *)(sub_2141D8BF8(&qword_253F10BF0) + 48)];
      v43(v57, (char *)v46, v12);
      v43(v58, (char *)(v46 + *(int *)(v74 + 36)), v12);
      sub_2141D8BF8(&qword_253F112C8);
      swift_storeEnumTagMultiPayload();
      sub_2141E0750(v49, &qword_253F105C0);
      (*(void (**)(char *, uint64_t))(v72 + 8))(v75, v76);
      return (*(uint64_t (**)(char *, uint64_t))(v61 + 8))(v73, v63);
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_214373510(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_2141D8BF8(&qword_253F105C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t static PlottableValue.value<A>(_:_:unit:calendar:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  char *v35;
  uint64_t result;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  void (*v44)(char *, char *, uint64_t);
  char *v45;
  void (*v46)(char *, char *, uint64_t);
  void (*v47)(char *, uint64_t);
  char *v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;

  v62 = a5;
  v63 = a6;
  v64 = a4;
  v65 = a3;
  v66 = a2;
  v60 = a7;
  v61 = a1;
  v59 = sub_2141D8BF8(&qword_253F15D60);
  v7 = MEMORY[0x24BDAC7A8](v59);
  v56 = (char *)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v51 = (char *)&v50 - v9;
  v10 = sub_214423B70();
  v58 = *(_QWORD *)(v10 - 8);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v50 - v14;
  v57 = sub_2141D8BF8(&qword_253F105C0);
  v16 = MEMORY[0x24BDAC7A8](v57);
  v55 = (char *)&v50 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v54 = (uint64_t)&v50 - v18;
  v19 = sub_2141D8BF8(&qword_253F10FC8);
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)&v50 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_214423900();
  v23 = *(_QWORD *)(v22 - 8);
  MEMORY[0x24BDAC7A8](v22);
  v67 = (char *)&v50 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_2141D8BF8(&qword_253F13D88);
  MEMORY[0x24BDAC7A8](v25);
  v27 = (char *)&v50 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = sub_214423C54();
  v29 = *(_QWORD *)(v28 - 8);
  MEMORY[0x24BDAC7A8](v28);
  v31 = (char *)&v50 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = v32;
  sub_2141E070C(v64, (uint64_t)v27, &qword_253F13D88);
  v34 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v33);
  v52 = v29;
  v53 = v33;
  if (v34 == 1)
  {
    sub_214423C00();
    sub_2141E0750((uint64_t)v27, &qword_253F13D88);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v31, v27, v33);
  }
  v35 = v31;
  sub_214423BB8();
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22);
  if ((_DWORD)result != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v67, v21, v22);
    sub_2144238F4();
    sub_2144238E8();
    v37 = sub_21424CC2C();
    result = sub_214424E84();
    if ((result & 1) != 0)
    {
      v50 = v37;
      v38 = v51;
      v64 = v23;
      v65 = v22;
      v39 = v58;
      v40 = v59;
      v41 = &v51[*(int *)(v59 + 48)];
      v66 = v35;
      v42 = (uint64_t)v55;
      v43 = v56;
      v44 = *(void (**)(char *, char *, uint64_t))(v58 + 32);
      v44(v51, v15, v10);
      v44(v41, v13, v10);
      v45 = &v43[*(int *)(v40 + 48)];
      v46 = *(void (**)(char *, char *, uint64_t))(v39 + 16);
      v46(v43, v38, v10);
      v46(v45, v41, v10);
      v44((char *)v42, v43, v10);
      v47 = *(void (**)(char *, uint64_t))(v39 + 8);
      v47(v45, v10);
      v48 = &v43[*(int *)(v40 + 48)];
      v44(v43, v38, v10);
      v44(v48, v41, v10);
      v44((char *)(v42 + *(int *)(v57 + 36)), v48, v10);
      v47(v43, v10);
      v49 = v54;
      sub_214373510(v42, v54);
      static PlottableValue.value<A>(_:_:)(v61, v49, v10, v62, (uint64_t)&protocol witness table for Date, v60);
      sub_2141E0750(v49, &qword_253F105C0);
      (*(void (**)(char *, uint64_t))(v64 + 8))(v67, v65);
      return (*(uint64_t (**)(char *, uint64_t))(v52 + 8))(v66, v53);
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t static PlottableValue.value<>(_:_:unit:calendar:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t *a8@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t result;
  char *v33;
  char *v34;
  char v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  void (*v41)(char *, char *, uint64_t);
  char *v42;
  char *v43;
  void (*v44)(char *, char *, uint64_t);
  uint64_t v45;
  void (*v46)(char *, uint64_t);
  char *v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  int v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;

  v69 = a7;
  v70 = a6;
  v71 = a5;
  v65 = a2;
  v66 = a4;
  v62 = a3;
  v63 = a8;
  v64 = a1;
  v59 = sub_2141D8BF8(&qword_253F15D60);
  v8 = MEMORY[0x24BDAC7A8](v59);
  v60 = (char *)&v55 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v58 = (char *)&v55 - v10;
  v11 = sub_214423B70();
  v57 = *(_QWORD *)(v11 - 8);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v68 = (char *)&v55 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v67 = (char *)&v55 - v14;
  v72 = sub_2141D8BF8(&qword_253F105C0);
  v15 = MEMORY[0x24BDAC7A8](v72);
  v56 = (char *)&v55 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v61 = (uint64_t)&v55 - v17;
  v18 = sub_2141D8BF8(&qword_253F10FC8);
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v55 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_214423900();
  v22 = *(_QWORD *)(v21 - 8);
  MEMORY[0x24BDAC7A8](v21);
  v24 = (char *)&v55 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_2141D8BF8(&qword_253F13D88);
  MEMORY[0x24BDAC7A8](v25);
  v27 = (char *)&v55 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = sub_214423C54();
  v29 = *(_QWORD *)(v28 - 8);
  MEMORY[0x24BDAC7A8](v28);
  v31 = (char *)&v55 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2141E070C(v69, (uint64_t)v27, &qword_253F13D88);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28) == 1)
  {
    sub_214423C00();
    sub_2141E0750((uint64_t)v27, &qword_253F13D88);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v31, v27, v28);
  }
  sub_214423BB8();
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21);
  if ((_DWORD)result != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v24, v20, v21);
    v33 = v67;
    sub_2144238F4();
    v34 = v68;
    sub_2144238E8();
    sub_21424CC2C();
    v35 = sub_214424E84();
    (*(void (**)(char *, uint64_t))(v22 + 8))(v24, v21);
    result = (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v31, v28);
    if ((v35 & 1) != 0)
    {
      v37 = v58;
      v36 = v59;
      v38 = &v58[*(int *)(v59 + 48)];
      v39 = v57;
      v40 = v34;
      v41 = *(void (**)(char *, char *, uint64_t))(v57 + 32);
      v41(v58, v33, v11);
      v41(v38, v40, v11);
      v42 = v60;
      v43 = &v60[*(int *)(v36 + 48)];
      v44 = *(void (**)(char *, char *, uint64_t))(v39 + 16);
      v44(v60, v37, v11);
      v44(v43, v38, v11);
      v45 = (uint64_t)v56;
      v41(v56, v42, v11);
      v46 = *(void (**)(char *, uint64_t))(v39 + 8);
      v46(v43, v11);
      v47 = &v42[*(int *)(v36 + 48)];
      v41(v42, v37, v11);
      v41(v47, v38, v11);
      v41((char *)(v45 + *(int *)(v72 + 36)), v47, v11);
      v46(v42, v11);
      v48 = v61;
      sub_214373510(v45, v61);
      sub_2141E070C(v48, v45, &qword_253F105C0);
      v49 = v63;
      v50 = v64;
      v52 = v65;
      v51 = v66;
      *v63 = v64;
      v49[1] = v52;
      LOBYTE(v47) = v62 & 1;
      *((_BYTE *)v49 + 16) = v62 & 1;
      v49[3] = v51;
      v53 = (char *)v49 + *(int *)(sub_2141D8BF8(&qword_253F12168) + 36);
      v54 = &v53[*(int *)(sub_2141D8BF8(&qword_253F10BF0) + 48)];
      v41(v53, (char *)v45, v11);
      v41(v54, (char *)(v45 + *(int *)(v72 + 36)), v11);
      sub_2141D8BF8(&qword_253F112C8);
      swift_storeEnumTagMultiPayload();
      sub_2141DD130(v50, v52, (char)v47);
      swift_bridgeObjectRetain();
      return sub_2141E0750(v48, &qword_253F105C0);
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_214373EE0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v14;

  *(_QWORD *)a9 = a1;
  *(_QWORD *)(a9 + 8) = a2;
  *(_BYTE *)(a9 + 16) = a3 & 1;
  *(_QWORD *)(a9 + 24) = a4;
  v14 = type metadata accessor for PlottableProjection(0, a6, a7, a8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a7 - 8) + 32))(a9 + *(int *)(v14 + 44), a5, a7);
  type metadata accessor for PlottableProjection.Storage(0, a6, a7, a8);
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_214373F80@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t result;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;

  v55 = a6;
  v46 = a2;
  v47 = a4;
  LODWORD(v45) = a3;
  v42 = a1;
  v53 = a9;
  v54 = a8;
  v51 = sub_214423B70();
  v52 = type metadata accessor for PlottableProjection.Storage(0, v54, v51, (uint64_t)&protocol witness table for Date);
  v50 = *(_QWORD *)(v52 - 8);
  MEMORY[0x24BDAC7A8](v52);
  v49 = (char *)&v40 - v11;
  v12 = sub_2141D8BF8(&qword_253F10FC8);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_214423900();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v40 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_2141D8BF8(&qword_253F13D88);
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)&v40 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_214423C54();
  v23 = *(_QWORD *)(v22 - 8);
  MEMORY[0x24BDAC7A8](v22);
  v25 = (char *)&v40 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = v26;
  sub_2141E070C(a7, (uint64_t)v21, &qword_253F13D88);
  v28 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v27);
  v48 = a7;
  v43 = v23;
  if (v28 == 1)
  {
    sub_214423C00();
    sub_2141E0750((uint64_t)v21, &qword_253F13D88);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v25, v21, v27);
  }
  v44 = v27;
  sub_214423BB8();
  v29 = v15;
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15);
  v41 = a5;
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v18, v14, v15);
    v31 = v53;
    v32 = v42;
    v33 = v46;
    *v53 = v42;
    v31[1] = v33;
    v34 = v45 & 1;
    *((_BYTE *)v31 + 16) = v45 & 1;
    v45 = v16;
    v31[3] = v47;
    sub_2141D8BF8(&qword_253F10BF0);
    v35 = v49;
    sub_2141DD130(v32, v33, v34);
    swift_bridgeObjectRetain();
    v40 = v29;
    sub_2144238F4();
    sub_2144238E8();
    sub_2141ED0BC(v32, v33, v34);
    swift_bridgeObjectRelease();
    sub_2141E0750(v48, &qword_253F13D88);
    v36 = sub_214423C48();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 8))(v55, v36);
    v37 = v51;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 8))(v41, v51);
    (*(void (**)(char *, uint64_t))(v45 + 8))(v18, v40);
    (*(void (**)(char *, uint64_t))(v43 + 8))(v25, v44);
    v38 = v52;
    swift_storeEnumTagMultiPayload();
    v39 = type metadata accessor for PlottableProjection(0, v54, v37, (uint64_t)&protocol witness table for Date);
    return (*(uint64_t (**)(char *, char *, uint64_t))(v50 + 32))((char *)v31 + *(int *)(v39 + 44), v35, v38);
  }
  return result;
}

uint64_t sub_214374318@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);

  *(_QWORD *)a9 = a1;
  *(_QWORD *)(a9 + 8) = a2;
  *(_BYTE *)(a9 + 16) = a3 & 1;
  *(_QWORD *)(a9 + 24) = a4;
  v14 = a9 + *(int *)(type metadata accessor for PlottableProjection(0, a7, a8, a10) + 44);
  v15 = v14 + *(int *)(swift_getTupleTypeMetadata2() + 48);
  v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a8 - 8) + 32);
  v16(v14, a5, a8);
  v16(v15, a6, a8);
  type metadata accessor for PlottableProjection.Storage(0, a7, a8, a10);
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_2143743F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;

  v9 = *a5;
  *(_QWORD *)a7 = a1;
  *(_QWORD *)(a7 + 8) = a2;
  *(_BYTE *)(a7 + 16) = a3 & 1;
  *(_QWORD *)(a7 + 24) = a4;
  v10 = (uint64_t *)(v9 + *MEMORY[0x24BEE46A8]);
  v11 = *v10;
  v12 = v10[1];
  *(_QWORD *)(a7 + *(int *)(type metadata accessor for PlottableProjection(0, *v10, v12, a6) + 44)) = a5;
  type metadata accessor for PlottableProjection.Storage(0, v11, v12, a6);
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_214374490@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t **v26;
  uint64_t v27;
  uint64_t TupleTypeMetadata3;
  char *v29;
  char *v30;
  _BYTE v32[12];
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v36 = a6;
  v37 = a8;
  v33 = a3;
  v34 = *a5;
  v35 = a4;
  v14 = sub_2141D8BF8(&qword_253F13D88);
  MEMORY[0x24BDAC7A8](v14);
  v16 = &v32[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v17 = sub_214423C54();
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v20 = &v32[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_2141E070C(a7, (uint64_t)v16, &qword_253F13D88);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) == 1)
  {
    sub_214423C00();
    sub_2141E0750(a7, &qword_253F13D88);
    sub_2141E0750((uint64_t)v16, &qword_253F13D88);
  }
  else
  {
    sub_2141E0750(a7, &qword_253F13D88);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v18 + 32))(v20, v16, v17);
  }
  *(_QWORD *)a9 = a1;
  *(_QWORD *)(a9 + 8) = a2;
  *(_BYTE *)(a9 + 16) = v33 & 1;
  v21 = v34;
  *(_QWORD *)(a9 + 24) = v35;
  v22 = (uint64_t *)(v21 + *MEMORY[0x24BEE46A8]);
  v23 = *v22;
  v24 = v22[1];
  v25 = v37;
  v26 = (uint64_t **)(a9 + *(int *)(type metadata accessor for PlottableProjection(0, *v22, v24, v37) + 44));
  sub_2144258E0();
  v27 = sub_214423C48();
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  v29 = (char *)v26 + *(int *)(TupleTypeMetadata3 + 48);
  v30 = (char *)v26 + *(int *)(TupleTypeMetadata3 + 64);
  *v26 = a5;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 32))(v29, v36, v27);
  (*(void (**)(char *, _BYTE *, uint64_t))(v18 + 32))(v30, v20, v17);
  type metadata accessor for PlottableProjection.Storage(0, v23, v24, v25);
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_2143746C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t **v16;

  v12 = *a5;
  *(_QWORD *)a8 = a1;
  *(_QWORD *)(a8 + 8) = a2;
  *(_BYTE *)(a8 + 16) = a3 & 1;
  *(_QWORD *)(a8 + 24) = a4;
  v13 = (uint64_t *)(v12 + *MEMORY[0x24BEE46A8]);
  v14 = *v13;
  v15 = v13[1];
  v16 = (uint64_t **)(a8 + *(int *)(type metadata accessor for PlottableProjection(0, *v13, v15, a7) + 44));
  *v16 = a5;
  v16[1] = a6;
  type metadata accessor for PlottableProjection.Storage(0, v14, v15, a7);
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_214374768@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;

  v3 = v2;
  v6 = *(_QWORD *)(a1 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(a2, v3, a1);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v6 + 56))(a2, 0, 1, a1);
}

uint64_t static PlottableProjection.value(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  char v9;

  v9 = a3 & 1;
  sub_2143743F4(a1, a2, a3 & 1, a4, a5, a6, a7);
  sub_2141DD130(a1, a2, v9);
  swift_bridgeObjectRetain();
  return swift_retain();
}

uint64_t static PlottableProjection.value<A>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  MEMORY[0x24BDAC7A8](a1);
  (*(void (**)(char *))(v8 + 16))((char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = sub_214424818();
  sub_2143743F4(v9, v11, v10 & 1, v12, a2, a3, a4);
  return swift_retain();
}

uint64_t static PlottableProjection.value(_:_:)@<X0>(uint64_t *a1@<X4>, uint64_t a2@<X5>, uint64_t a3@<X8>)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v6 = sub_21442480C();
  sub_2143743F4(v6, v8, v7 & 1, v9, a1, a2, a3);
  return swift_retain();
}

uint64_t static PlottableProjection.value<>(_:_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  char v10;

  v10 = a3 & 1;
  sub_2143746C8(a1, a2, a3 & 1, a4, a5, a6, a7, a8);
  sub_2141DD130(a1, a2, v10);
  swift_bridgeObjectRetain();
  swift_retain();
  return swift_retain();
}

uint64_t static PlottableProjection.value<A>(_:_:_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  MEMORY[0x24BDAC7A8](a1);
  (*(void (**)(char *))(v10 + 16))((char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = sub_214424818();
  sub_2143746C8(v11, v13, v12 & 1, v14, a2, a3, a4, a5);
  swift_retain();
  return swift_retain();
}

uint64_t static PlottableProjection.value<>(_:_:_:)@<X0>(uint64_t *a1@<X4>, uint64_t *a2@<X5>, uint64_t a3@<X6>, uint64_t a4@<X8>)
{
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v8 = sub_21442480C();
  sub_2143746C8(v8, v10, v9 & 1, v11, a1, a2, a3, a4);
  swift_retain();
  return swift_retain();
}

uint64_t static PlottableProjection<>.value(_:_:unit:calendar:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v25[2];

  v25[0] = a8;
  v17 = sub_2141D8BF8(&qword_253F13D88);
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)v25 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_214423C48();
  MEMORY[0x24BDAC7A8](v20);
  v22 = (char *)v25 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v23 + 16))(v22, a6);
  sub_2141E070C(a7, (uint64_t)v19, &qword_253F13D88);
  sub_2141DD130(a1, a2, a3 & 1);
  swift_bridgeObjectRetain();
  swift_retain();
  return sub_214374490(a1, a2, a3 & 1, a4, a5, (uint64_t)v22, (uint64_t)v19, v25[0], a9);
}

uint64_t static PlottableProjection<>.value<A>(_:_:unit:calendar:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v29 = a7;
  v30 = a6;
  v28 = a4;
  v11 = sub_2141D8BF8(&qword_253F13D88);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_214423C48();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v28 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))((char *)&v28 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a5);
  v21 = sub_214424818();
  v23 = v22;
  LOBYTE(a5) = v24;
  v26 = v25;
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v18, a3, v14);
  sub_2141E070C(v28, (uint64_t)v13, &qword_253F13D88);
  swift_retain();
  return sub_214374490(v21, v23, a5 & 1, v26, a2, (uint64_t)v18, (uint64_t)v13, v30, v29);
}

uint64_t static PlottableProjection<>.value(_:_:unit:calendar:)@<X0>(uint64_t *a1@<X4>, uint64_t a2@<X5>, uint64_t a3@<X6>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v23 = a5;
  v24 = a4;
  v22 = a3;
  v7 = sub_2141D8BF8(&qword_253F13D88);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_214423C48();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v14 = sub_21442480C();
  v16 = v15;
  v18 = v17;
  v20 = v19;
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a2, v10);
  sub_2141E070C(v22, (uint64_t)v9, &qword_253F13D88);
  swift_retain();
  return sub_214374490(v14, v16, v18 & 1, v20, a1, (uint64_t)v13, (uint64_t)v9, v24, v23);
}

uint64_t static PlottableProjection.value(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;

  MEMORY[0x24BDAC7A8](a1);
  v17 = (char *)&v22 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v17, v19, v20);
  a3 &= 1u;
  sub_214373EE0(a1, a2, a3, a4, (uint64_t)v17, a5, a6, a7, a8);
  sub_2141DD130(a1, a2, a3);
  return swift_bridgeObjectRetain();
}

uint64_t static PlottableProjection.value<A>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24[2];

  v24[0] = a5;
  v10 = *(_QWORD *)(a4 - 8);
  v11 = MEMORY[0x24BDAC7A8](a1);
  v13 = (char *)v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  (*(void (**)(char *))(v15 + 16))((char *)v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = sub_214424818();
  v18 = v17;
  v20 = v19;
  v22 = v21;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, a2, a4);
  return sub_214373EE0(v16, v18, v20 & 1, v22, (uint64_t)v13, a3, a4, v24[0], a6);
}

uint64_t static PlottableProjection.value(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X4>, uint64_t a3@<X5>, uint64_t a4@<X6>, uint64_t a5@<X7>, uint64_t a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  v21 = a5;
  v10 = *(_QWORD *)(a4 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v13 = sub_21442480C();
  v15 = v14;
  v17 = v16;
  v19 = v18;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a2, a4);
  return sub_214373EE0(v13, v15, v17 & 1, v19, (uint64_t)v12, a3, a4, v21, a6);
}

uint64_t static PlottableProjection.value<>(_:_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9)
{
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  void (*v21)(_BYTE *, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  _BYTE v25[12];
  int v26;
  uint64_t v27;

  v27 = a6;
  v26 = a3;
  v15 = MEMORY[0x24BDAC7A8](a1);
  v17 = &v25[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v15);
  v19 = &v25[-v18];
  v21 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v20 + 16);
  v21(&v25[-v18], v22, v23);
  v21(v17, a5, a7);
  LOBYTE(a5) = v26 & 1;
  sub_214374318(a1, a2, v26 & 1, a4, (uint64_t)v19, (uint64_t)v17, v27, a7, a8, a9);
  sub_2141DD130(a1, a2, a5);
  return swift_bridgeObjectRetain();
}

uint64_t static PlottableProjection.value<A>(_:_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v29 = a6;
  v30 = a4;
  v28 = a7;
  v10 = *(_QWORD *)(a5 - 8);
  v11 = MEMORY[0x24BDAC7A8](a1);
  v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x24BDAC7A8](v11);
  v16 = (char *)&v28 - v15;
  MEMORY[0x24BDAC7A8](v14);
  (*(void (**)(char *))(v18 + 16))((char *)&v28 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  v19 = sub_214424818();
  v21 = v20;
  v23 = v22;
  v25 = v24;
  v26 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v26(v16, a2, a5);
  v26(v13, a3, a5);
  return sub_214374318(v19, v21, v23 & 1, v25, (uint64_t)v16, (uint64_t)v13, v30, a5, v28, v29);
}

uint64_t static PlottableProjection.value<>(_:_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X4>, uint64_t a3@<X5>, uint64_t a4@<X6>, uint64_t a5@<X7>, uint64_t a6@<X8>, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v26 = a6;
  v27 = a4;
  v25 = a7;
  v10 = *(_QWORD *)(a5 - 8);
  v11 = MEMORY[0x24BDAC7A8](a1);
  v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v25 - v14;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v16 = sub_21442480C();
  v18 = v17;
  v20 = v19;
  v22 = v21;
  v23 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v23(v15, a2, a5);
  v23(v13, a3, a5);
  return sub_214374318(v16, v18, v20 & 1, v22, (uint64_t)v15, (uint64_t)v13, v27, a5, v26, v25);
}

uint64_t static PlottableProjection<>.value(_:_:unit:calendar:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t *v29;
  uint64_t v30;

  v29 = a9;
  v30 = a8;
  v27 = a7;
  v28 = a3;
  v14 = sub_2141D8BF8(&qword_253F13D88);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_214423C48();
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v20 = (char *)&v26 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_214423B70();
  MEMORY[0x24BDAC7A8](v21);
  v23 = (char *)&v26 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v24 + 16))(v23, a5);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v20, a6, v17);
  sub_2141E070C(v27, (uint64_t)v16, &qword_253F13D88);
  LODWORD(a5) = v28 & 1;
  sub_2141DD130(a1, a2, v28 & 1);
  swift_bridgeObjectRetain();
  return sub_214373F80(a1, a2, a5, a4, (uint64_t)v23, (uint64_t)v20, (uint64_t)v16, v30, v29);
}

uint64_t static PlottableProjection<>.value<A>(_:_:unit:calendar:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;

  v35 = a7;
  v36 = a5;
  v33 = a3;
  v34 = a4;
  v32 = a2;
  v9 = sub_2141D8BF8(&qword_253F13D88);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = sub_214423C48();
  v12 = *(_QWORD *)(v31 - 8);
  MEMORY[0x24BDAC7A8](v31);
  v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_214423B70();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v30 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))((char *)&v30 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a6);
  v22 = sub_214424818();
  v24 = v23;
  v26 = v25;
  v28 = v27;
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v19, v32, v15);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, v33, v31);
  sub_2141E070C(v34, (uint64_t)v11, &qword_253F13D88);
  return sub_214373F80(v22, v24, v26 & 1, v28, (uint64_t)v19, (uint64_t)v14, (uint64_t)v11, v36, v35);
}

uint64_t static PlottableProjection<>.value(_:_:unit:calendar:)@<X0>(uint64_t a1@<X4>, uint64_t a2@<X5>, uint64_t a3@<X6>, uint64_t a4@<X7>, uint64_t *a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;

  v28 = a5;
  v29 = a4;
  v26 = a2;
  v27 = a3;
  v25 = a1;
  v5 = sub_2141D8BF8(&qword_253F13D88);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_214423C48();
  v8 = *(_QWORD *)(v24 - 8);
  MEMORY[0x24BDAC7A8](v24);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_214423B70();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v15 = sub_21442480C();
  v17 = v16;
  v19 = v18;
  v21 = v20;
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, v25, v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v26, v24);
  sub_2141E070C(v27, (uint64_t)v7, &qword_253F13D88);
  return sub_214373F80(v15, v17, v19 & 1, v21, (uint64_t)v14, (uint64_t)v10, (uint64_t)v7, v29, v28);
}

uint64_t sub_214375BBC(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 32);
}

uint64_t sub_214375BC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v5;

  result = type metadata accessor for PlottableValue.Storage(319, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_214375C3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t, uint64_t);
  uint64_t v26;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  v8 = v7;
  v9 = *(_QWORD *)(v6 + 64);
  if (((v9 + v8) & ~v8) + v9 <= v9)
    v10 = *(_QWORD *)(v6 + 64);
  else
    v10 = ((v9 + v7) & ~(unint64_t)v7) + v9;
  v11 = v7 & 0x100000;
  if (v8 > 7 || v11 != 0 || ((v8 + 32) & (unint64_t)~v8) + v10 + 1 > 0x18)
  {
    v14 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = v14 + ((v8 & 0xF8 ^ 0x1F8) & (v8 + 16));
    swift_retain();
  }
  else
  {
    v26 = v9 + v8;
    v15 = ~v8;
    v16 = *(_QWORD *)a2;
    v17 = *(_QWORD *)(a2 + 8);
    v18 = *(_BYTE *)(a2 + 16);
    sub_2141DD130(*(_QWORD *)a2, v17, v18);
    *(_QWORD *)a1 = v16;
    *(_QWORD *)(a1 + 8) = v17;
    *(_BYTE *)(a1 + 16) = v18;
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    v19 = a2 + v8;
    v20 = (a1 + v8 + 32) & ~v8;
    v21 = (v19 + 32) & ~v8;
    v22 = *(unsigned __int8 *)(v21 + v10);
    swift_bridgeObjectRetain();
    if (v22 >= 2)
    {
      if (v10 <= 3)
        v23 = v10;
      else
        v23 = 4;
      __asm { BR              X11 }
    }
    v24 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
    v24((a1 + v8 + 32) & v15, v21, v5);
    if (v22 == 1)
    {
      v24((v26 + v20) & v15, (v26 + v21) & v15, v5);
      *(_BYTE *)(v20 + v10) = 1;
    }
    else
    {
      *(_BYTE *)(v20 + v10) = 0;
    }
  }
  return a1;
}

uint64_t sub_214375DFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t result;
  uint64_t (*v13)(uint64_t, uint64_t);

  sub_2141ED0BC(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (a1 + v6 + 32) & ~v6;
  v8 = *(_QWORD *)(v5 + 64);
  v9 = v8 + v6;
  if (((v8 + v6) & ~v6) + v8 > v8)
    v8 += (v8 + v6) & ~v6;
  v10 = *(unsigned __int8 *)(v7 + v8);
  if (v10 >= 2)
  {
    if (v8 <= 3)
      v11 = v8;
    else
      v11 = 4;
    __asm { BR              X13 }
  }
  v13 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
  result = v13(v7, v4);
  if (v10 == 1)
    return v13((v9 + v7) & ~v6, v4);
  return result;
}

uint64_t sub_214375F34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, uint64_t);
  char v20;

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_BYTE *)(a2 + 16);
  sub_2141DD130(*(_QWORD *)a2, v7, v8);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  *(_BYTE *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a3 + 16);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = (v11 + 32 + a1) & ~v11;
  v13 = (v11 + 32 + a2) & ~v11;
  v14 = *(_QWORD *)(v10 + 64);
  v15 = v14 + v11;
  if (((v14 + v11) & ~v11) + v14 <= v14)
    v16 = *(_QWORD *)(v10 + 64);
  else
    v16 = ((v14 + v11) & ~v11) + v14;
  v17 = *(unsigned __int8 *)(v13 + v16);
  swift_bridgeObjectRetain();
  if (v17 >= 2)
  {
    if (v16 <= 3)
      v18 = v16;
    else
      v18 = 4;
    __asm { BR              X11 }
  }
  v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16);
  v19((v11 + 32 + a1) & ~v11, v13, v9);
  if (v17 == 1)
  {
    v19((v15 + v12) & ~v11, (v15 + v13) & ~v11, v9);
    v20 = 1;
  }
  else
  {
    v20 = 0;
  }
  *(_BYTE *)(v12 + v16) = v20;
  return a1;
}

uint64_t sub_214376098(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t);
  unsigned int v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t, uint64_t);
  char v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_BYTE *)(a2 + 16);
  sub_2141DD130(*(_QWORD *)a2, v7, v8);
  v9 = *(_QWORD *)a1;
  v10 = *(_QWORD *)(a1 + 8);
  v11 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  *(_BYTE *)(a1 + 16) = v8;
  sub_2141ED0BC(v9, v10, v11);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v12 = *(_QWORD *)(a3 + 16);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v15 = (v14 + 32 + a1) & ~v14;
  v16 = v14 + 32 + a2;
  v17 = v16 & ~v14;
  if (v15 != v17)
  {
    v30 = v14 + 32 + a1;
    v28 = v16;
    v18 = *(_QWORD *)(v13 + 64);
    v29 = ~v14;
    if (((v18 + v14) & ~v14) + v18 <= v18)
      v19 = *(_QWORD *)(v13 + 64);
    else
      v19 = ((v18 + v14) & ~v14) + v18;
    v20 = *(unsigned __int8 *)(v15 + v19);
    if (v20 >= 2)
    {
      if (v19 <= 3)
        v21 = v19;
      else
        v21 = 4;
      __asm { BR              X11 }
    }
    v22 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v22(v15, v12);
    if (v20 == 1)
      v22(((v30 | v14) + v18) & v29, v12);
    v23 = *(unsigned __int8 *)(v17 + v19);
    if (v23 >= 2)
    {
      if (v19 <= 3)
        v24 = v19;
      else
        v24 = 4;
      __asm { BR              X11 }
    }
    v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16);
    v25(v15, v17, v12);
    if (v23 == 1)
    {
      v25(((v30 | v14) + v18) & v29, ((v28 | v14) + v18) & v29, v12);
      v26 = 1;
    }
    else
    {
      v26 = 0;
    }
    *(_BYTE *)(v15 + v19) = v26;
  }
  return a1;
}

_OWORD *sub_2143762E0(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  void (*v15)(unint64_t, unint64_t, uint64_t);
  char v16;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = ((unint64_t)a1 + v7 + 32) & ~v7;
  v9 = ((unint64_t)a2 + v7 + 32) & ~v7;
  v10 = *(_QWORD *)(v6 + 64);
  v11 = v10 + v7;
  if (((v10 + v7) & ~v7) + v10 <= v10)
    v12 = *(_QWORD *)(v6 + 64);
  else
    v12 = ((v10 + v7) & ~v7) + v10;
  v13 = *(unsigned __int8 *)(v9 + v12);
  if (v13 >= 2)
  {
    if (v12 <= 3)
      v14 = v12;
    else
      v14 = 4;
    __asm { BR              X12 }
  }
  v15 = *(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 32);
  v15(((unint64_t)a1 + v7 + 32) & ~v7, ((unint64_t)a2 + v7 + 32) & ~v7, *(_QWORD *)(a3 + 16));
  if (v13 == 1)
  {
    v15((v11 + v8) & ~v7, (v11 + v9) & ~v7, v5);
    v16 = 1;
  }
  else
  {
    v16 = 0;
  }
  *(_BYTE *)(v8 + v12) = v16;
  return a1;
}

uint64_t sub_214376418(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t);
  unsigned int v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t, uint64_t);
  char v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v6 = *(_BYTE *)(a2 + 16);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_BYTE *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v6;
  sub_2141ED0BC(v7, v8, v9);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  v10 = *(_QWORD *)(a3 + 16);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v13 = (v12 + 32 + a1) & ~v12;
  v14 = v12 + 32 + a2;
  v15 = v14 & ~v12;
  if (v13 != v15)
  {
    v28 = v12 + 32 + a1;
    v26 = v14;
    v16 = *(_QWORD *)(v11 + 64);
    v27 = ~v12;
    if (((v16 + v12) & ~v12) + v16 <= v16)
      v17 = *(_QWORD *)(v11 + 64);
    else
      v17 = ((v16 + v12) & ~v12) + v16;
    v18 = *(unsigned __int8 *)(v13 + v17);
    if (v18 >= 2)
    {
      if (v17 <= 3)
        v19 = v17;
      else
        v19 = 4;
      __asm { BR              X11 }
    }
    v20 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
    v20(v13, v10);
    if (v18 == 1)
      v20(((v28 | v12) + v16) & v27, v10);
    v21 = *(unsigned __int8 *)(v15 + v17);
    if (v21 >= 2)
    {
      if (v17 <= 3)
        v22 = v17;
      else
        v22 = 4;
      __asm { BR              X11 }
    }
    v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 32);
    v23(v13, v15, v10);
    if (v21 == 1)
    {
      v23(((v28 | v12) + v16) & v27, ((v26 | v12) + v16) & v27, v10);
      v24 = 1;
    }
    else
    {
      v24 = 0;
    }
    *(_BYTE *)(v13 + v17) = v24;
  }
  return a1;
}

uint64_t sub_21437664C(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;
  char v9;
  int v10;
  unsigned int v11;
  int v12;

  v3 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v4 = *(_QWORD *)(v3 + 64);
  v5 = *(unsigned __int8 *)(v3 + 80);
  if (((v4 + v5) & ~v5) + v4 > v4)
    v4 += (v4 + v5) & ~v5;
  if (!a2)
    return 0;
  if ((a2 & 0x80000000) == 0)
    goto LABEL_5;
  v8 = ((v5 + 32) & ~v5) + v4 + 1;
  v9 = 8 * v8;
  if (v8 > 3)
    goto LABEL_10;
  v11 = (a2 - 0x7FFFFFFF + ~(-1 << v9)) >> v9;
  if (v11 > 0xFFFE)
  {
    v10 = *(_DWORD *)(a1 + v8);
    if (!v10)
      goto LABEL_5;
    goto LABEL_19;
  }
  if (v11 <= 0xFE)
  {
    if (!v11)
      goto LABEL_5;
LABEL_10:
    v10 = *(unsigned __int8 *)(a1 + v8);
    if (!*(_BYTE *)(a1 + v8))
      goto LABEL_5;
    goto LABEL_19;
  }
  v10 = *(unsigned __int16 *)(a1 + v8);
  if (!*(_WORD *)(a1 + v8))
  {
LABEL_5:
    v6 = *(_QWORD *)(a1 + 24);
    if (v6 >= 0xFFFFFFFF)
      LODWORD(v6) = -1;
    return (v6 + 1);
  }
LABEL_19:
  v12 = (v10 - 1) << v9;
  if (v8 > 3)
    v12 = 0;
  if (!(_DWORD)v8)
    return v12 ^ 0x80000000;
  if (v8 > 3)
    LODWORD(v8) = 4;
  return ((uint64_t (*)(void))((char *)&loc_214376748 + 4 * byte_21442ECC8[(v8 - 1)]))();
}

void sub_214376778(_WORD *a1, int a2, int a3, uint64_t a4)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(unsigned __int8 *)(v5 + 80);
  if (((v6 + v7) & ~v7) + v6 > v6)
    v6 += (v6 + v7) & ~v7;
  v8 = ((v7 + 32) & ~v7) + v6 + 1;
  if (a3 < 0)
  {
    if (v8 <= 3)
    {
      v10 = (a3 - 0x7FFFFFFF + ~(-1 << (8 * v8))) >> (8 * v8);
      if (v10 > 0xFFFE)
      {
        v9 = 4u;
        if (a2 < 0)
          goto LABEL_14;
      }
      else
      {
        if (v10 >= 0xFF)
          v9 = 2;
        else
          v9 = v10 != 0;
        if (a2 < 0)
          goto LABEL_14;
      }
    }
    else
    {
      v9 = 1u;
      if (a2 < 0)
      {
LABEL_14:
        v11 = a2 ^ 0x80000000;
        if (v8 < 4)
        {
          if ((_DWORD)v8)
          {
            v12 = a2 & ~(-1 << (8 * v8));
            bzero(a1, v8);
            if ((_DWORD)v8 == 3)
            {
              *a1 = v12;
              *((_BYTE *)a1 + 2) = BYTE2(v12);
            }
            else if ((_DWORD)v8 == 2)
            {
              *a1 = v12;
            }
            else
            {
              *(_BYTE *)a1 = v12;
            }
          }
        }
        else
        {
          bzero(a1, v8);
          *(_DWORD *)a1 = v11;
        }
        __asm { BR              X10 }
      }
    }
  }
  else
  {
    v9 = 0;
    if (a2 < 0)
      goto LABEL_14;
  }
  __asm { BR              X10 }
}

void sub_214376920()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x2143768D0);
}

void sub_214376928()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x2143768D0);
}

void sub_214376930()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x2143768D0);
}

uint64_t type metadata accessor for PlottableValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2141D8E88(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PlottableValue);
}

uint64_t type metadata accessor for PlottableValue.Storage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2141D8E88(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PlottableValue.Storage);
}

uint64_t sub_214376954(uint64_t *a1)
{
  uint64_t result;
  unint64_t v2;

  result = type metadata accessor for PlottableProjection.Storage(319, a1[2], a1[3], a1[4]);
  if (v2 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t sub_2143769D0(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v20;
  unint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  void (*v36)(unint64_t, unint64_t, uint64_t);
  void (*v37)(_QWORD *, _QWORD *, uint64_t);
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v47 = *(_QWORD *)(a3 + 24);
  v4 = *(_QWORD *)(v47 - 8);
  v5 = *(_DWORD *)(v4 + 80);
  v44 = sub_214423C48();
  v6 = *(_QWORD *)(v44 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  v8 = sub_214423C54();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_DWORD *)(v9 + 80);
  v11 = v7 | v10 | v5;
  v12 = v11 | 7;
  v13 = ~(v11 | 7);
  v45 = v4;
  v46 = v5;
  v14 = *(_QWORD *)(v4 + 64);
  v15 = v14 + v5;
  if (((v14 + v46) & ~v46) + v14 > v14)
    v14 += (v14 + v5) & ~(unint64_t)v5;
  v43 = v6;
  v16 = *(_QWORD *)(v6 + 64) + v10;
  if (v14 <= ((v16 + ((v7 + 8) & ~(unint64_t)v7)) & ~v10)
            + *(_QWORD *)(v9 + 64))
    v14 = ((v16 + ((v7 + 8) & ~(unint64_t)v7)) & ~v10) + *(_QWORD *)(v9 + 64);
  if (v14 <= 0x10)
    v17 = 16;
  else
    v17 = v14;
  if (v11 <= 7 && ((v7 | *(_DWORD *)(v9 + 80) | v5) & 0x100000) == 0 && v17 + ((v11 + 32) & ~(v11 | 7)) + 1 <= 0x18)
  {
    v22 = v7;
    v41 = v8;
    v42 = v7 + 8;
    v38 = v15;
    v39 = *(_QWORD *)(v6 + 64) + v10;
    v40 = *(_QWORD *)(v8 - 8);
    v23 = *(_QWORD *)a2;
    v24 = *(_QWORD *)(a2 + 8);
    v25 = *(_BYTE *)(a2 + 16);
    sub_2141DD130(*(_QWORD *)a2, v24, v25);
    *(_QWORD *)a1 = v23;
    *(_QWORD *)(a1 + 8) = v24;
    *(_BYTE *)(a1 + 16) = v25;
    v26 = a1;
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    v27 = a2 + v12;
    v28 = (_QWORD *)((a1 + v12 + 32) & v13);
    v29 = (_QWORD *)((v27 + 32) & v13);
    v30 = *((unsigned __int8 *)v29 + v17);
    swift_bridgeObjectRetain();
    v31 = v17;
    v33 = ~v22;
    switch(v30)
    {
      case 0:
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v45 + 16))(v28, v29, v47);
        *((_BYTE *)v28 + v17) = 0;
        return v26;
      case 1:
        v37 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v45 + 16);
        v37(v28, v29, v47);
        v37((_QWORD *)(((unint64_t)v28 + v38) & ~v46), (_QWORD *)(((unint64_t)v29 + v38) & ~v46), v47);
        *((_BYTE *)v28 + v17) = 1;
        return v26;
      case 2:
        *v28 = *v29;
        *((_BYTE *)v28 + v17) = 2;
        goto LABEL_17;
      case 3:
        *v28 = *v29;
        v28[1] = v29[1];
        *((_BYTE *)v28 + v17) = 3;
        swift_retain();
        goto LABEL_17;
      case 4:
        *v28 = *v29;
        v34 = ((unint64_t)v28 + v42) & v33;
        v35 = ((unint64_t)v29 + v42) & v33;
        v36 = *(void (**)(unint64_t, unint64_t, uint64_t))(v43 + 16);
        swift_retain();
        v36(v34, v35, v44);
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v40 + 16))((v39 + v34) & ~v10, (v39 + v35) & ~v10, v41);
        *((_BYTE *)v28 + v31) = 4;
        return v26;
      default:
        if (v17 <= 3)
          v32 = v17;
        else
          v32 = 4;
        __asm { BR              X11 }
        return result;
    }
  }
  v20 = *(_QWORD *)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v26 = v20 + ((v11 + 16) & v13);
LABEL_17:
  swift_retain();
  return v26;
}

uint64_t sub_214376D0C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t);
  uint64_t v27;

  sub_2141ED0BC(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_bridgeObjectRelease();
  v27 = *(_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(v27 - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v25 = sub_214423C48();
  v6 = *(_QWORD *)(v25 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = sub_214423C54();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = (a1 + (v5 | v7 | v10 | 7) + 32) & ~(v5 | v7 | v10 | 7);
  v12 = *(_QWORD *)(v4 + 64);
  v13 = v12 + v5;
  if (((v12 + v5) & ~v5) + v12 > v12)
    v12 += (v12 + v5) & ~v5;
  v14 = v7 + 8;
  v15 = *(_QWORD *)(v6 + 64) + v10;
  if (v12 <= ((v15 + ((v7 + 8) & ~v7)) & (unint64_t)~v10) + *(_QWORD *)(v9 + 64))
    v12 = ((v15 + ((v7 + 8) & ~v7)) & ~v10) + *(_QWORD *)(v9 + 64);
  if (v12 <= 0x10)
    v12 = 16;
  v17 = ~v5;
  v18 = ~v7;
  v19 = ~v10;
  switch(*(_BYTE *)(v11 + v12))
  {
    case 0:
      v20 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8);
      v21 = v11;
      v22 = v27;
      goto LABEL_18;
    case 1:
      v26 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
      v26(v11, v27);
      v21 = (v13 + v11) & v17;
      v22 = v27;
      v20 = (uint64_t (*)(uint64_t, uint64_t))v26;
      goto LABEL_18;
    case 2:
      goto LABEL_16;
    case 3:
      swift_release();
LABEL_16:
      result = swift_release();
      break;
    case 4:
      v24 = v8;
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v6 + 8))((v14 + v11) & v18, v25);
      v21 = (v15 + ((v14 + v11) & v18)) & v19;
      v20 = *(uint64_t (**)(uint64_t, uint64_t))(v9 + 8);
      v22 = v24;
LABEL_18:
      result = v20(v21, v22);
      break;
    default:
      if (v12 <= 3)
        v16 = v12;
      else
        v16 = 4;
      __asm { BR              X14 }
      return result;
  }
  return result;
}

uint64_t sub_214376F40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(_QWORD *, _QWORD *, uint64_t);
  unint64_t v25;
  unint64_t v26;
  void (*v27)(unint64_t, unint64_t, uint64_t);
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_BYTE *)(a2 + 16);
  sub_2141DD130(*(_QWORD *)a2, v7, v8);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  *(_BYTE *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v35 = *(_QWORD *)(a3 + 24);
  v9 = *(_QWORD *)(v35 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v33 = sub_214423C48();
  v11 = *(_QWORD *)(v33 - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v34 = sub_214423C54();
  v13 = *(_QWORD *)(v34 - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v15 = v10 | v12 | v14 | 7;
  v36 = (_QWORD *)((v15 + 32 + a1) & ~v15);
  v16 = (_QWORD *)((v15 + 32 + a2) & ~v15);
  v17 = *(_QWORD *)(v9 + 64);
  v30 = v17 + v10;
  if (((v17 + v10) & ~v10) + v17 > v17)
    v17 += (v17 + v10) & ~v10;
  v29 = v12 + 8;
  v31 = *(_QWORD *)(v11 + 64) + v14;
  v32 = *(_QWORD *)(v34 - 8);
  if (v17 <= ((v31 + ((v12 + 8) & ~v12)) & (unint64_t)~v14) + *(_QWORD *)(v13 + 64))
    v17 = ((v31 + ((v12 + 8) & ~v12)) & ~v14) + *(_QWORD *)(v13 + 64);
  if (v17 <= 0x10)
    v18 = 16;
  else
    v18 = v17;
  v19 = *((unsigned __int8 *)v16 + v18);
  swift_bridgeObjectRetain();
  v21 = ~v10;
  v22 = ~v12;
  v23 = ~v14;
  switch(v19)
  {
    case 0:
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v9 + 16))(v36, v16, v35);
      *((_BYTE *)v36 + v18) = 0;
      break;
    case 1:
      v24 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v9 + 16);
      v24(v36, v16, v35);
      v24((_QWORD *)(((unint64_t)v36 + v30) & v21), (_QWORD *)(((unint64_t)v16 + v30) & v21), v35);
      *((_BYTE *)v36 + v18) = 1;
      break;
    case 2:
      *v36 = *v16;
      *((_BYTE *)v36 + v18) = 2;
      swift_retain();
      break;
    case 3:
      *v36 = *v16;
      v36[1] = v16[1];
      *((_BYTE *)v36 + v18) = 3;
      swift_retain();
      swift_retain();
      break;
    case 4:
      *v36 = *v16;
      v25 = ((unint64_t)v36 + v29) & v22;
      v26 = ((unint64_t)v16 + v29) & v22;
      v27 = *(void (**)(unint64_t, unint64_t, uint64_t))(v11 + 16);
      swift_retain();
      v27(v25, v26, v33);
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v32 + 16))((v31 + v25) & v23, (v31 + v26) & v23, v34);
      *((_BYTE *)v36 + v18) = 4;
      break;
    default:
      if (v18 <= 3)
        v20 = v18;
      else
        v20 = 4;
      __asm { BR              X11 }
      return result;
  }
  return a1;
}

uint64_t sub_214377214(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(_QWORD *, uint64_t);
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  void (*v33)(unint64_t, unint64_t, uint64_t);
  char v34;
  void (*v35)(_QWORD *, _QWORD *, uint64_t);
  uint64_t result;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_BYTE *)(a2 + 16);
  sub_2141DD130(*(_QWORD *)a2, v7, v8);
  v9 = *(_QWORD *)a1;
  v10 = *(_QWORD *)(a1 + 8);
  v11 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  *(_BYTE *)(a1 + 16) = v8;
  sub_2141ED0BC(v9, v10, v11);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v12 = *(_QWORD *)(a3 + 24);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v15 = sub_214423C48();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(unsigned __int8 *)(v16 + 80);
  v18 = sub_214423C54();
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(unsigned __int8 *)(v19 + 80);
  v21 = v14 | v17 | v20 | 7;
  v22 = (_QWORD *)((v21 + 32 + a1) & ~v21);
  v23 = (_QWORD *)((v21 + 32 + a2) & ~v21);
  if (v22 != v23)
  {
    v43 = v15;
    v45 = v12;
    v24 = *(_QWORD *)(v13 + 64);
    v25 = ((v24 + v14) & ~v14) + v24;
    if (v25 <= v24)
      v25 = *(_QWORD *)(v13 + 64);
    v40 = v17 + 8;
    v41 = *(_QWORD *)(v16 + 64);
    if (v25 <= ((((v17 + 8) & ~v17) + v20 + v41) & (unint64_t)~v20) + *(_QWORD *)(v19 + 64))
      v25 = ((((v17 + 8) & ~v17) + v20 + v41) & ~v20) + *(_QWORD *)(v19 + 64);
    if (v25 <= 0x10)
      v26 = 16;
    else
      v26 = v25;
    v38 = ~v14;
    v39 = ~v17;
    v28 = ~v20;
    v44 = v18;
    v42 = *(_QWORD *)(v18 - 8);
    switch(*((_BYTE *)v22 + v26))
    {
      case 0:
        (*(void (**)(_QWORD *, uint64_t))(v13 + 8))(v22, v45);
        break;
      case 1:
        v37 = v16;
        v29 = *(void (**)(_QWORD *, uint64_t))(v13 + 8);
        v29(v22, v45);
        v28 = ~v20;
        v29((_QWORD *)(((unint64_t)v22 + v14 + v24) & v38), v45);
        v16 = v37;
        break;
      case 2:
        swift_release();
        break;
      case 3:
        swift_release();
        swift_release();
        break;
      case 4:
        swift_release();
        (*(void (**)(unint64_t, uint64_t))(v16 + 8))(((unint64_t)v22 + v40) & v39, v43);
        v28 = ~v20;
        (*(void (**)(unint64_t, uint64_t))(v42 + 8))(((((unint64_t)v22 + v40) & v39) + v20 + v41) & ~v20, v44);
        break;
      default:
        if (v26 <= 3)
          v27 = v26;
        else
          v27 = 4;
        __asm { BR              X12 }
        return result;
    }
    switch(*((_BYTE *)v23 + v26))
    {
      case 0:
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v13 + 16))(v22, v23, v45);
        *((_BYTE *)v22 + v26) = 0;
        return a1;
      case 1:
        v35 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v13 + 16);
        v35(v22, v23, v45);
        v35((_QWORD *)(((unint64_t)v22 + v14 + v24) & v38), (_QWORD *)(((unint64_t)v23 + v14 + v24) & v38), v45);
        v34 = 1;
        goto LABEL_31;
      case 2:
        *v22 = *v23;
        *((_BYTE *)v22 + v26) = 2;
        swift_retain();
        return a1;
      case 3:
        *v22 = *v23;
        v22[1] = v23[1];
        *((_BYTE *)v22 + v26) = 3;
        swift_retain();
        swift_retain();
        return a1;
      case 4:
        *v22 = *v23;
        v31 = ((unint64_t)v22 + v40) & v39;
        v32 = ((unint64_t)v23 + v40) & v39;
        v33 = *(void (**)(unint64_t, unint64_t, uint64_t))(v16 + 16);
        swift_retain();
        v33(v31, v32, v43);
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v42 + 16))((v31 + v20 + v41) & v28, (v32 + v20 + v41) & v28, v44);
        v34 = 4;
LABEL_31:
        *((_BYTE *)v22 + v26) = v34;
        break;
      default:
        if (v26 <= 3)
          v30 = v26;
        else
          v30 = 4;
        __asm { BR              X12 }
        return result;
    }
  }
  return a1;
}

_OWORD *sub_21437764C(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  char v27;
  void (*v28)(_QWORD *, _QWORD *, uint64_t);
  _QWORD *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _OWORD *result;
  uint64_t v36;
  uint64_t v37;

  v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  v37 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(v37 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v36 = sub_214423C48();
  v8 = *(_QWORD *)(v36 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = sub_214423C54();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v13 = v7 | v9 | v12 | 7;
  v14 = (_QWORD *)(((unint64_t)a1 + v13 + 32) & ~v13);
  v15 = (_QWORD *)(((unint64_t)a2 + v13 + 32) & ~v13);
  v16 = *(_QWORD *)(v6 + 64);
  v17 = v16 + v7;
  v18 = ((v16 + v7) & ~v7) + v16;
  if (v18 <= v16)
    v18 = *(_QWORD *)(v6 + 64);
  v19 = v9 + 8;
  v20 = *(_QWORD *)(v8 + 64) + v12;
  if (v18 <= ((v20 + ((v9 + 8) & ~v9)) & (unint64_t)~v12) + *(_QWORD *)(v11 + 64))
    v18 = ((v20 + ((v9 + 8) & ~v9)) & ~v12) + *(_QWORD *)(v11 + 64);
  if (v18 <= 0x10)
    v21 = 16;
  else
    v21 = v18;
  v23 = ~v7;
  v24 = ~v9;
  v25 = ~v12;
  switch(*((_BYTE *)v15 + v21))
  {
    case 0:
      v26 = v14;
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v6 + 32))(v14, v15, v37);
      v14 = v26;
      v27 = 0;
      break;
    case 1:
      v28 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v6 + 32);
      v29 = v14;
      v30 = v17;
      v28(v14, v15, v37);
      v28((_QWORD *)(((unint64_t)v29 + v30) & v23), (_QWORD *)(((unint64_t)v15 + v30) & v23), v37);
      v14 = v29;
      v27 = 1;
      break;
    case 2:
      *v14 = *v15;
      v27 = 2;
      break;
    case 3:
      *(_OWORD *)v14 = *(_OWORD *)v15;
      v27 = 3;
      break;
    case 4:
      *v14 = *v15;
      v31 = ((unint64_t)v14 + v19) & v24;
      v32 = ((unint64_t)v15 + v19) & v24;
      v33 = v14;
      v34 = v10;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 32))(v31, v32, v36);
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v11 + 32))((v20 + v31) & v25, (v20 + v32) & v25, v34);
      v14 = v33;
      v27 = 4;
      break;
    default:
      if (v21 <= 3)
        v22 = v21;
      else
        v22 = 4;
      __asm { BR              X14 }
      return result;
  }
  *((_BYTE *)v14 + v21) = v27;
  return a1;
}

uint64_t sub_2143778BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(_QWORD *, uint64_t);
  uint64_t v28;
  char v29;
  unint64_t v30;
  void (*v31)(_QWORD *, _QWORD *, uint64_t);
  uint64_t result;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v6 = *(_BYTE *)(a2 + 16);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_BYTE *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v6;
  sub_2141ED0BC(v7, v8, v9);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  v10 = *(_QWORD *)(a3 + 24);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v13 = sub_214423C48();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(unsigned __int8 *)(v14 + 80);
  v16 = sub_214423C54();
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(unsigned __int8 *)(v17 + 80);
  v19 = v12 | v15 | v18 | 7;
  v20 = (_QWORD *)((v19 + 32 + a1) & ~v19);
  v21 = (_QWORD *)((v19 + 32 + a2) & ~v19);
  if (v20 != v21)
  {
    v39 = v13;
    v41 = v10;
    v22 = *(_QWORD *)(v11 + 64);
    v23 = ((v22 + v12) & ~v12) + v22;
    if (v23 <= v22)
      v23 = *(_QWORD *)(v11 + 64);
    v36 = v15 + 8;
    v37 = *(_QWORD *)(v14 + 64);
    if (v23 <= ((((v15 + 8) & ~v15) + v18 + v37) & (unint64_t)~v18) + *(_QWORD *)(v17 + 64))
      v23 = ((((v15 + 8) & ~v15) + v18 + v37) & ~v18) + *(_QWORD *)(v17 + 64);
    if (v23 <= 0x10)
      v24 = 16;
    else
      v24 = v23;
    v34 = ~v12;
    v35 = ~v15;
    v26 = ~v18;
    v40 = v16;
    v38 = *(_QWORD *)(v16 - 8);
    switch(*((_BYTE *)v20 + v24))
    {
      case 0:
        (*(void (**)(_QWORD *, uint64_t))(v11 + 8))(v20, v41);
        break;
      case 1:
        v33 = v14;
        v27 = *(void (**)(_QWORD *, uint64_t))(v11 + 8);
        v27(v20, v41);
        v26 = ~v18;
        v27((_QWORD *)(((unint64_t)v20 + v12 + v22) & v34), v41);
        v14 = v33;
        break;
      case 2:
        swift_release();
        break;
      case 3:
        swift_release();
        swift_release();
        break;
      case 4:
        swift_release();
        (*(void (**)(unint64_t, uint64_t))(v14 + 8))(((unint64_t)v20 + v36) & v35, v39);
        v26 = ~v18;
        (*(void (**)(unint64_t, uint64_t))(v38 + 8))(((((unint64_t)v20 + v36) & v35) + v18 + v37) & ~v18, v40);
        break;
      default:
        if (v24 <= 3)
          v25 = v24;
        else
          v25 = 4;
        __asm { BR              X12 }
        return result;
    }
    switch(*((_BYTE *)v21 + v24))
    {
      case 0:
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v11 + 32))(v20, v21, v41);
        v29 = 0;
        break;
      case 1:
        v31 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v11 + 32);
        v31(v20, v21, v41);
        v31((_QWORD *)(((unint64_t)v20 + v12 + v22) & v34), (_QWORD *)(((unint64_t)v21 + v12 + v22) & v34), v41);
        v29 = 1;
        break;
      case 2:
        *v20 = *v21;
        v29 = 2;
        break;
      case 3:
        *(_OWORD *)v20 = *(_OWORD *)v21;
        v29 = 3;
        break;
      case 4:
        *v20 = *v21;
        v30 = ((unint64_t)v21 + v36) & v35;
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v14 + 32))(((unint64_t)v20 + v36) & v35, v30, v39);
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v38 + 32))(((((unint64_t)v20 + v36) & v35) + v18 + v37) & v26, (v30 + v18 + v37) & v26, v40);
        v29 = 4;
        break;
      default:
        if (v24 <= 3)
          v28 = v24;
        else
          v28 = 4;
        __asm { BR              X12 }
        return result;
    }
    *((_BYTE *)v20 + v24) = v29;
  }
  return a1;
}

uint64_t sub_214377CBC(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v17;
  char v18;
  int v19;
  unsigned int v20;
  int v21;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(unsigned __int8 *)(v5 + 80);
  if (((v6 + v7) & ~v7) + v6 <= v6)
    v8 = *(_QWORD *)(v5 + 64);
  else
    v8 = ((v6 + v7) & ~v7) + v6;
  v9 = *(_QWORD *)(sub_214423C48() - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = *(_QWORD *)(v9 + 64);
  v12 = *(_QWORD *)(sub_214423C54() - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = ((((v10 + 8) & ~v10) + v11 + v13) & ~v13) + *(_QWORD *)(v12 + 64);
  if (v8 > v14)
    v14 = v8;
  if (v14 <= 0x10)
    v14 = 16;
  if (!a2)
    return 0;
  if ((a2 & 0x80000000) == 0)
    goto LABEL_10;
  v17 = v14
      + (((v10 | v13 | v7) & 0xF8 ^ 0x1F8) & ((v10 | v13 | v7) + 32))
      + 1;
  v18 = 8 * v17;
  if (v17 > 3)
    goto LABEL_15;
  v20 = (a2 - 0x7FFFFFFF + ~(-1 << v18)) >> v18;
  if (v20 > 0xFFFE)
  {
    v19 = *(_DWORD *)(a1 + v17);
    if (!v19)
      goto LABEL_10;
    goto LABEL_24;
  }
  if (v20 <= 0xFE)
  {
    if (!v20)
      goto LABEL_10;
LABEL_15:
    v19 = *(unsigned __int8 *)(a1 + v17);
    if (!*(_BYTE *)(a1 + v17))
      goto LABEL_10;
    goto LABEL_24;
  }
  v19 = *(unsigned __int16 *)(a1 + v17);
  if (!*(_WORD *)(a1 + v17))
  {
LABEL_10:
    v15 = *(_QWORD *)(a1 + 24);
    if (v15 >= 0xFFFFFFFF)
      LODWORD(v15) = -1;
    return (v15 + 1);
  }
LABEL_24:
  v21 = (v19 - 1) << v18;
  if (v17 > 3)
    v21 = 0;
  if ((_DWORD)v17)
  {
    if (v17 > 3)
      LODWORD(v17) = 4;
    __asm { BR              X11 }
  }
  return v21 ^ 0x80000000;
}

void sub_214377E80(_BYTE *a1, int a2, int a3, uint64_t a4)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  size_t v17;
  unsigned int v18;
  unsigned int v19;
  int v20;

  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v9 = *(unsigned __int8 *)(v7 + 80);
  if (((v8 + v9) & ~v9) + v8 <= v8)
    v10 = *(_QWORD *)(v7 + 64);
  else
    v10 = ((v8 + v9) & ~v9) + v8;
  v11 = *(_QWORD *)(sub_214423C48() - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v13 = *(_QWORD *)(v11 + 64);
  v14 = *(_QWORD *)(sub_214423C54() - 8);
  v15 = *(unsigned __int8 *)(v14 + 80);
  v16 = ((((v12 + 8) & ~v12) + v13 + v15) & ~v15) + *(_QWORD *)(v14 + 64);
  if (v10 > v16)
    v16 = v10;
  if (v16 <= 0x10)
    v16 = 16;
  v17 = v16
      + (((v12 | v15 | v9) & 0xF8 ^ 0x1F8) & ((v12 | v15 | v9) + 32))
      + 1;
  if (a3 < 0)
  {
    if (v17 <= 3)
    {
      v19 = (a3 - 0x7FFFFFFF + ~(-1 << (8 * v17))) >> (8 * v17);
      if (v19 > 0xFFFE)
      {
        v18 = 4u;
        if (a2 < 0)
          goto LABEL_19;
      }
      else
      {
        if (v19 >= 0xFF)
          v18 = 2;
        else
          v18 = v19 != 0;
        if (a2 < 0)
          goto LABEL_19;
      }
    }
    else
    {
      v18 = 1u;
      if (a2 < 0)
      {
LABEL_19:
        if (v17 < 4)
        {
          if ((_DWORD)v17)
          {
            v20 = a2 & ~(-1 << (8 * v17));
            bzero(a1, v17);
            if ((_DWORD)v17 == 3)
            {
              *(_WORD *)a1 = v20;
              a1[2] = BYTE2(v20);
            }
            else if ((_DWORD)v17 == 2)
            {
              *(_WORD *)a1 = v20;
            }
            else
            {
              *a1 = v20;
            }
          }
        }
        else
        {
          bzero(a1, v17);
          *(_DWORD *)a1 = a2 ^ 0x80000000;
        }
        __asm { BR              X10 }
      }
    }
  }
  else
  {
    v18 = 0;
    if (a2 < 0)
      goto LABEL_19;
  }
  __asm { BR              X10 }
}

void sub_21437809C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x214378048);
}

void sub_2143780A4()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x214378048);
}

void sub_2143780AC()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x214378048);
}

uint64_t type metadata accessor for PlottableProjection(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2141D8E88(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PlottableProjection);
}

uint64_t type metadata accessor for PlottableProjection.Storage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2141D8E88(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PlottableProjection.Storage);
}

uint64_t initializeWithCopy for AnyPlottableProjection(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  return a1;
}

uint64_t assignWithCopy for AnyPlottableProjection(uint64_t a1, uint64_t a2)
{
  sub_2141DEA14((uint64_t *)a1, (uint64_t *)a2);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  return a1;
}

uint64_t assignWithTake for AnyPlottableProjection(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  _s6Charts15AnyChartContentVwxx_0(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for AnyPlottableProjection(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AnyPlottableProjection(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AnyPlottableProjection()
{
  return &type metadata for AnyPlottableProjection;
}

uint64_t sub_214378228()
{
  uint64_t result;
  unint64_t v1;
  _QWORD v2[6];

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    v2[4] = *(_QWORD *)(result - 8) + 64;
    swift_getTupleTypeLayout2();
    v2[5] = v2;
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t *sub_2143782A4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  void (*v19)(uint64_t *, uint64_t *, uint64_t);

  v4 = a1;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_DWORD *)(v6 + 80);
  v9 = v8;
  v10 = ~(unint64_t)v8;
  v11 = v7 + v8;
  if (((v7 + v9) & ~v9) + v7 <= v7)
    v12 = *(_QWORD *)(v6 + 64);
  else
    v12 = ((v7 + v8) & ~(unint64_t)v8) + v7;
  v13 = v8 & 0x100000;
  if (v9 > 7 || v13 != 0 || (unint64_t)(v12 + 1) > 0x18)
  {
    v16 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v16 + ((v9 + 16) & v10));
    swift_retain();
  }
  else
  {
    v17 = *((unsigned __int8 *)a2 + v12);
    if (v17 >= 2)
    {
      if (v12 <= 3)
        v18 = v12;
      else
        v18 = 4;
      __asm { BR              X12 }
    }
    v19 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16);
    v19(a1, a2, *(_QWORD *)(a3 + 16));
    if (v17 == 1)
    {
      v19((uint64_t *)(((unint64_t)v4 + v11) & v10), (uint64_t *)(((unint64_t)a2 + v11) & v10), v5);
      *((_BYTE *)v4 + v12) = 1;
    }
    else
    {
      *((_BYTE *)v4 + v12) = 0;
    }
  }
  return v4;
}

uint64_t sub_2143783F4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t result;
  uint64_t (*v11)(uint64_t, uint64_t);

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = v5 + v6;
  if (((v5 + v6) & ~v6) + v5 > v5)
    v5 += (v5 + v6) & ~v6;
  v8 = *(unsigned __int8 *)(a1 + v5);
  if (v8 >= 2)
  {
    if (v5 <= 3)
      v9 = v5;
    else
      v9 = 4;
    __asm { BR              X13 }
  }
  v11 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8);
  result = v11(a1, *(_QWORD *)(a2 + 16));
  if (v8 == 1)
    return v11((v7 + a1) & ~v6, v3);
  return result;
}

uint64_t sub_214378504(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  char v14;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(unsigned __int8 *)(v6 + 80);
  v9 = v7 + v8;
  if (((v7 + v8) & ~v8) + v7 <= v7)
    v10 = *(_QWORD *)(v6 + 64);
  else
    v10 = ((v7 + v8) & ~v8) + v7;
  v11 = *(unsigned __int8 *)(a2 + v10);
  if (v11 >= 2)
  {
    if (v10 <= 3)
      v12 = v10;
    else
      v12 = 4;
    __asm { BR              X12 }
  }
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  v13(a1, a2, *(_QWORD *)(a3 + 16));
  if (v11 == 1)
  {
    v13((v9 + a1) & ~v8, (v9 + a2) & ~v8, v5);
    v14 = 1;
  }
  else
  {
    v14 = 0;
  }
  *(_BYTE *)(a1 + v10) = v14;
  return a1;
}

uint64_t sub_21437861C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  unsigned int v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  char v18;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    v7 = *(_QWORD *)(v6 + 64);
    v8 = *(unsigned __int8 *)(v6 + 80);
    v9 = v7 + v8;
    if (((v7 + v8) & ~v8) + v7 <= v7)
      v10 = *(_QWORD *)(v6 + 64);
    else
      v10 = ((v7 + v8) & ~v8) + v7;
    v11 = *(unsigned __int8 *)(a1 + v10);
    if (v11 >= 2)
    {
      if (v10 <= 3)
        v12 = v10;
      else
        v12 = 4;
      __asm { BR              X12 }
    }
    v13 = ~v8;
    v14 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
    v14(a1, *(_QWORD *)(a3 + 16));
    if (v11 == 1)
      v14((v9 + a1) & v13, v5);
    v15 = *(unsigned __int8 *)(a2 + v10);
    if (v15 >= 2)
    {
      if (v10 <= 3)
        v16 = v10;
      else
        v16 = 4;
      __asm { BR              X11 }
    }
    v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
    v17(a1, a2, v5);
    if (v15 == 1)
    {
      v17((v9 + a1) & v13, (v9 + a2) & v13, v5);
      v18 = 1;
    }
    else
    {
      v18 = 0;
    }
    *(_BYTE *)(a1 + v10) = v18;
  }
  return a1;
}

uint64_t sub_2143787DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  char v14;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(unsigned __int8 *)(v6 + 80);
  v9 = v7 + v8;
  if (((v7 + v8) & ~v8) + v7 <= v7)
    v10 = *(_QWORD *)(v6 + 64);
  else
    v10 = ((v7 + v8) & ~v8) + v7;
  v11 = *(unsigned __int8 *)(a2 + v10);
  if (v11 >= 2)
  {
    if (v10 <= 3)
      v12 = v10;
    else
      v12 = 4;
    __asm { BR              X12 }
  }
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32);
  v13(a1, a2, *(_QWORD *)(a3 + 16));
  if (v11 == 1)
  {
    v13((v9 + a1) & ~v8, (v9 + a2) & ~v8, v5);
    v14 = 1;
  }
  else
  {
    v14 = 0;
  }
  *(_BYTE *)(a1 + v10) = v14;
  return a1;
}

uint64_t sub_2143788F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  unsigned int v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  char v18;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    v7 = *(_QWORD *)(v6 + 64);
    v8 = *(unsigned __int8 *)(v6 + 80);
    v9 = v7 + v8;
    if (((v7 + v8) & ~v8) + v7 <= v7)
      v10 = *(_QWORD *)(v6 + 64);
    else
      v10 = ((v7 + v8) & ~v8) + v7;
    v11 = *(unsigned __int8 *)(a1 + v10);
    if (v11 >= 2)
    {
      if (v10 <= 3)
        v12 = v10;
      else
        v12 = 4;
      __asm { BR              X12 }
    }
    v13 = ~v8;
    v14 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
    v14(a1, *(_QWORD *)(a3 + 16));
    if (v11 == 1)
      v14((v9 + a1) & v13, v5);
    v15 = *(unsigned __int8 *)(a2 + v10);
    if (v15 >= 2)
    {
      if (v10 <= 3)
        v16 = v10;
      else
        v16 = 4;
      __asm { BR              X11 }
    }
    v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32);
    v17(a1, a2, v5);
    if (v15 == 1)
    {
      v17((v9 + a1) & v13, (v9 + a2) & v13, v5);
      v18 = 1;
    }
    else
    {
      v18 = 0;
    }
    *(_BYTE *)(a1 + v10) = v18;
  }
  return a1;
}

uint64_t sub_214378AB4(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v7;
  int v8;
  unsigned int v10;
  int v11;
  unsigned int v12;

  v3 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v4 = *(_QWORD *)(v3 + 64);
  v5 = ((v4 + *(unsigned __int8 *)(v3 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)) + v4;
  if (v5 > v4)
    v4 = v5;
  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_21;
  v6 = v4 + 1;
  v7 = 8 * (v4 + 1);
  if ((v4 + 1) <= 3)
  {
    v10 = ((a2 + ~(-1 << v7) - 254) >> v7) + 1;
    if (HIWORD(v10))
    {
      v8 = *(_DWORD *)(a1 + v6);
      if (!v8)
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v10 > 0xFF)
    {
      v8 = *(unsigned __int16 *)(a1 + v6);
      if (!*(_WORD *)(a1 + v6))
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v10 < 2)
    {
LABEL_21:
      v12 = *(unsigned __int8 *)(a1 + v4);
      if (v12 >= 2)
        return (v12 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v8 = *(unsigned __int8 *)(a1 + v6);
  if (!*(_BYTE *)(a1 + v6))
    goto LABEL_21;
LABEL_14:
  v11 = (v8 - 1) << v7;
  if (v6 > 3)
    v11 = 0;
  if (!(_DWORD)v6)
    return (v11 + 255);
  if (v6 > 3)
    LODWORD(v6) = 4;
  return ((uint64_t (*)(void))((char *)&loc_214378B84 + 4 * byte_21442ED5C[(v6 - 1)]))();
}

void sub_214378BD0(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = ((v6 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)) + v6;
  if (v7 <= v6)
    v7 = v6;
  v8 = v7 + 1;
  if (a3 < 0xFF)
  {
    v9 = 0;
  }
  else if (v8 <= 3)
  {
    v11 = ((a3 + ~(-1 << (8 * v8)) - 254) >> (8 * v8)) + 1;
    if (HIWORD(v11))
    {
      v9 = 4u;
    }
    else if (v11 >= 0x100)
    {
      v9 = 2;
    }
    else
    {
      v9 = v11 > 1;
    }
  }
  else
  {
    v9 = 1u;
  }
  if (a2 <= 0xFE)
    __asm { BR              X11 }
  v10 = a2 - 255;
  if (v8 < 4)
  {
    if ((_DWORD)v7 != -1)
    {
      v12 = v10 & ~(-1 << (8 * v8));
      bzero(a1, v8);
      if ((_DWORD)v8 == 3)
      {
        *a1 = v12;
        *((_BYTE *)a1 + 2) = BYTE2(v12);
      }
      else if ((_DWORD)v8 == 2)
      {
        *a1 = v12;
      }
      else
      {
        *(_BYTE *)a1 = v12;
      }
    }
  }
  else
  {
    bzero(a1, v7 + 1);
    *(_DWORD *)a1 = v10;
  }
  __asm { BR              X10 }
}

uint64_t sub_214378D84(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v3 = *(_QWORD *)(v2 + 64);
  v4 = ((v3 + *(unsigned __int8 *)(v2 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80)) + v3;
  if (v4 > v3)
    v3 = v4;
  if (*(unsigned __int8 *)(a1 + v3) < 2u)
    return *(unsigned __int8 *)(a1 + v3);
  if (v3 <= 3)
    v5 = v3;
  else
    v5 = 4;
  return ((uint64_t (*)(void))((char *)&loc_214378DD8 + 4 * byte_21442ED6A[v5]))();
}

void sub_214378E20(_BYTE *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  size_t v7;
  unsigned int v8;
  unsigned int v9;
  int v10;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_QWORD *)(v4 + 64);
  v6 = ((v5 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)) + v5;
  if (a2 > 1)
  {
    if (v6 <= v5)
      v7 = v5;
    else
      v7 = v6;
    v8 = a2 - 2;
    if (v7 < 4)
    {
      v9 = v8 >> (8 * v7);
      v10 = v8 & ~(-1 << (8 * v7));
      a1[v7] = v9 + 2;
      bzero(a1, v7);
      if ((_DWORD)v7 == 3)
      {
        *(_WORD *)a1 = v10;
        a1[2] = BYTE2(v10);
      }
      else if ((_DWORD)v7 == 2)
      {
        *(_WORD *)a1 = v10;
      }
      else
      {
        *a1 = v10;
      }
    }
    else
    {
      a1[v7] = 2;
      bzero(a1, v7);
      *(_DWORD *)a1 = v8;
    }
  }
  else
  {
    if (v6 > v5)
      v5 = v6;
    a1[v5] = a2;
  }
}

uint64_t sub_214378EFC()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v7;
  char v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void *v12;
  char *v13;

  v0 = swift_checkMetadataState();
  v1 = v0;
  if (v2 <= 0x3F)
  {
    v9 = *(_QWORD *)(v0 - 8) + 64;
    swift_getTupleTypeLayout2();
    v10 = &v8;
    v11 = MEMORY[0x24BEE0190] + 64;
    v12 = &unk_21442EEE0;
    v1 = sub_214423C48();
    if (v3 <= 0x3F)
    {
      v4 = sub_214423C54();
      if (v5 > 0x3F)
      {
        return v4;
      }
      else
      {
        swift_getTupleTypeLayout3();
        v13 = &v7;
        swift_initEnumMetadataMultiPayload();
        return 0;
      }
    }
  }
  return v1;
}

_QWORD *sub_214378FF4(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v20;
  _QWORD *result;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  void (*v30)(_QWORD *, _QWORD *, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v36 = *(_QWORD *)(a3 + 24);
  v5 = *(_QWORD *)(v36 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v35 = v5;
  v7 = *(_DWORD *)(v5 + 80);
  v31 = v6 + v7;
  if ((v31 & ~(unint64_t)v7) + v6 <= v6)
    v8 = *(_QWORD *)(v5 + 64);
  else
    v8 = ((v6 + v7) & ~(unint64_t)v7) + v6;
  v34 = sub_214423C48();
  v9 = *(_QWORD *)(v34 - 8);
  v10 = *(_DWORD *)(v9 + 80);
  v32 = v9;
  v11 = *(_QWORD *)(v9 + 64);
  v12 = sub_214423C54();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_DWORD *)(v13 + 80);
  v33 = v11;
  v15 = ((v11 + v14 + ((v10 + 8) & ~(unint64_t)v10)) & ~v14)
      + *(_QWORD *)(v13 + 64);
  if (v8 > v15)
    v15 = v8;
  if (v15 <= 0x10)
    v16 = 16;
  else
    v16 = v15;
  v17 = v10 | v14 | v7;
  if (v17 <= 7 && ((v10 | *(_DWORD *)(v13 + 80) | v7) & 0x100000) == 0 && (unint64_t)(v16 + 1) <= 0x18)
  {
    v23 = ~(unint64_t)v10;
    switch(*((_BYTE *)a2 + v16))
    {
      case 0:
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v35 + 16))(a1, a2, v36);
        *((_BYTE *)a1 + v16) = 0;
        return a1;
      case 1:
        v30 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v35 + 16);
        v30(a1, a2, v36);
        v30((_QWORD *)(((unint64_t)a1 + v31) & ~(unint64_t)v7), (_QWORD *)(((unint64_t)a2 + v31) & ~(unint64_t)v7), v36);
        *((_BYTE *)a1 + v16) = 1;
        return a1;
      case 2:
        *a1 = *a2;
        *((_BYTE *)a1 + v16) = 2;
        goto LABEL_18;
      case 3:
        v24 = a2[1];
        *a1 = *a2;
        a1[1] = v24;
        *((_BYTE *)a1 + v16) = 3;
        swift_retain();
        goto LABEL_18;
      case 4:
        v25 = v12;
        *a1 = *a2;
        v26 = ((unint64_t)a1 + v10 + 8) & v23;
        v27 = ((unint64_t)a2 + v10 + 8) & v23;
        v28 = *(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 16);
        v29 = v13;
        swift_retain();
        v28(v26, v27, v34);
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v29 + 16))((v26 + v33 + v14) & ~v14, (v27 + v33 + v14) & ~v14, v25);
        *((_BYTE *)a1 + v16) = 4;
        return a1;
      default:
        if (v16 <= 3)
          v22 = v16;
        else
          v22 = 4;
        __asm { BR              X12 }
        return result;
    }
  }
  v20 = *a2;
  *a1 = *a2;
  a1 = (_QWORD *)(v20 + ((v17 & 0xF8 ^ 0x1F8) & (v17 + 16)));
LABEL_18:
  swift_retain();
  return a1;
}

uint64_t sub_2143792D4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;

  v27 = *(_QWORD *)(a2 + 24);
  v3 = *(_QWORD *)(v27 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v26 = v4 + v5;
  if (((v4 + v5) & ~v5) + v4 <= v4)
    v6 = *(_QWORD *)(v3 + 64);
  else
    v6 = ((v4 + v5) & ~v5) + v4;
  v24 = sub_214423C48();
  v7 = *(_QWORD *)(v24 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v7 + 64);
  v10 = sub_214423C54();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v23 = v9;
  v13 = ((v9 + v12 + ((v8 + 8) & ~v8)) & ~v12) + *(_QWORD *)(v11 + 64);
  if (v6 > v13)
    v13 = v6;
  if (v13 <= 0x10)
    v13 = 16;
  v14 = *(unsigned __int8 *)(a1 + v13);
  v16 = *(unsigned __int8 *)(a1 + v13);
  switch(v14)
  {
    case 0:
      v17 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8);
      v18 = a1;
      v19 = v27;
      goto LABEL_20;
    case 1:
      v25 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
      v20 = v27;
      v25(a1, v27);
      v17 = (uint64_t (*)(uint64_t, uint64_t))v25;
      v18 = (v26 + a1) & ~v5;
      goto LABEL_19;
    case 2:
      goto LABEL_17;
    case 3:
      swift_release();
LABEL_17:
      result = swift_release();
      break;
    case 4:
      v20 = v10;
      swift_release();
      v22 = (a1 + v8 + 8) & ~v8;
      (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v22, v24);
      v18 = (v22 + v23 + v12) & ~v12;
      v17 = *(uint64_t (**)(uint64_t, uint64_t))(v11 + 8);
LABEL_19:
      v19 = v20;
LABEL_20:
      result = v17(v18, v19);
      break;
    default:
      if (v16 <= 3)
        v15 = v16;
      else
        v15 = 4;
      __asm { BR              X13 }
      return result;
  }
  return result;
}

_QWORD *sub_2143794E8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(_QWORD *, _QWORD *, uint64_t);
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  _QWORD *result;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v33 = *(_QWORD *)(a3 + 24);
  v5 = *(_QWORD *)(v33 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(unsigned __int8 *)(v5 + 80);
  v32 = v6 + v7;
  if (((v6 + v7) & ~v7) + v6 <= v6)
    v8 = *(_QWORD *)(v5 + 64);
  else
    v8 = ((v6 + v7) & ~v7) + v6;
  v31 = sub_214423C48();
  v9 = *(_QWORD *)(v31 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = *(_QWORD *)(v9 + 64);
  v12 = sub_214423C54();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v15 = ((v11 + v14 + ((v10 + 8) & ~v10)) & ~v14) + *(_QWORD *)(v13 + 64);
  if (v8 > v15)
    v15 = v8;
  if (v15 <= 0x10)
    v16 = 16;
  else
    v16 = v15;
  v18 = ~v7;
  v19 = ~v10;
  switch(*((_BYTE *)a2 + v16))
  {
    case 0:
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v5 + 16))(a1, a2, v33);
      *((_BYTE *)a1 + v16) = 0;
      return a1;
    case 1:
      v20 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v5 + 16);
      v20(a1, a2, v33);
      v20((_QWORD *)(((unint64_t)a1 + v32) & v18), (_QWORD *)(((unint64_t)a2 + v32) & v18), v33);
      v21 = 1;
      goto LABEL_19;
    case 2:
      *a1 = *a2;
      *((_BYTE *)a1 + v16) = 2;
      swift_retain();
      return a1;
    case 3:
      v22 = *a2;
      v23 = a2[1];
      *a1 = v22;
      a1[1] = v23;
      *((_BYTE *)a1 + v16) = 3;
      swift_retain();
      swift_retain();
      return a1;
    case 4:
      v24 = v12;
      *a1 = *a2;
      v25 = (char *)a2 + v10;
      v26 = ((unint64_t)a1 + v10 + 8) & v19;
      v27 = (unint64_t)(v25 + 8) & v19;
      v28 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16);
      v29 = v13;
      swift_retain();
      v28(v26, v27, v31);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 16))((v26 + v11 + v14) & ~v14, (v27 + v11 + v14) & ~v14, v24);
      v21 = 4;
LABEL_19:
      *((_BYTE *)a1 + v16) = v21;
      return a1;
    default:
      if (v16 <= 3)
        v17 = v16;
      else
        v17 = 4;
      __asm { BR              X12 }
      return result;
  }
}

_QWORD *sub_214379750(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(_QWORD *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  void (*v24)(unint64_t, uint64_t, uint64_t);
  char v25;
  void (*v26)(_QWORD *, _QWORD *, uint64_t);
  _QWORD *result;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  if (a1 != a2)
  {
    v34 = *(_QWORD *)(a3 + 24);
    v5 = *(_QWORD *)(v34 - 8);
    v6 = *(_QWORD *)(v5 + 64);
    v7 = *(unsigned __int8 *)(v5 + 80);
    v28 = v6 + v7;
    if (((v6 + v7) & ~v7) + v6 <= v6)
      v8 = *(_QWORD *)(v5 + 64);
    else
      v8 = ((v6 + v7) & ~v7) + v6;
    v32 = sub_214423C48();
    v9 = *(_QWORD *)(v32 - 8);
    v10 = *(unsigned __int8 *)(v9 + 80);
    v11 = *(_QWORD *)(v9 + 64);
    v33 = sub_214423C54();
    v12 = *(_QWORD *)(v33 - 8);
    v13 = *(unsigned __int8 *)(v12 + 80);
    v30 = v12;
    v31 = v11;
    v14 = ((v11 + v13 + ((v10 + 8) & ~v10)) & ~v13) + *(_QWORD *)(v12 + 64);
    if (v8 > v14)
      v14 = v8;
    if (v14 <= 0x10)
      v15 = 16;
    else
      v15 = v14;
    v17 = ~v7;
    v18 = ~v10;
    v29 = ~v13;
    switch(*((_BYTE *)a1 + v15))
    {
      case 0:
        (*(void (**)(_QWORD *, uint64_t))(v5 + 8))(a1, v34);
        break;
      case 1:
        v21 = *(void (**)(_QWORD *, uint64_t))(v5 + 8);
        v21(a1, v34);
        v18 = ~v10;
        v21((_QWORD *)(((unint64_t)a1 + v28) & v17), v34);
        break;
      case 2:
        swift_release();
        break;
      case 3:
        swift_release();
        swift_release();
        break;
      case 4:
        swift_release();
        v19 = ((unint64_t)a1 + v10 + 8) & v18;
        (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v19, v32);
        v20 = v19 + v31 + v13;
        v18 = ~v10;
        (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v20 & v29, v33);
        break;
      default:
        if (v15 <= 3)
          v16 = v15;
        else
          v16 = 4;
        __asm { BR              X12 }
        return result;
    }
    switch(*((_BYTE *)a2 + v15))
    {
      case 0:
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v5 + 16))(a1, a2, v34);
        *((_BYTE *)a1 + v15) = 0;
        return a1;
      case 1:
        v26 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v5 + 16);
        v26(a1, a2, v34);
        v26((_QWORD *)(((unint64_t)a1 + v28) & v17), (_QWORD *)(((unint64_t)a2 + v28) & v17), v34);
        v25 = 1;
        goto LABEL_32;
      case 2:
        *a1 = *a2;
        *((_BYTE *)a1 + v15) = 2;
        swift_retain();
        return a1;
      case 3:
        *a1 = *a2;
        a1[1] = a2[1];
        *((_BYTE *)a1 + v15) = 3;
        swift_retain();
        swift_retain();
        return a1;
      case 4:
        *a1 = *a2;
        v23 = ((unint64_t)a2 + v10 + 8) & v18;
        v24 = *(void (**)(unint64_t, uint64_t, uint64_t))(v9 + 16);
        swift_retain();
        v24(((unint64_t)a1 + v10 + 8) & v18, v23, v32);
        (*(void (**)(unint64_t, uint64_t, uint64_t))(v30 + 16))(((((unint64_t)a1 + v10 + 8) & v18) + v31 + v13) & v29, (v23 + v31 + v13) & v29, v33);
        v25 = 4;
LABEL_32:
        *((_BYTE *)a1 + v15) = v25;
        break;
      default:
        if (v15 <= 3)
          v22 = v15;
        else
          v22 = 4;
        __asm { BR              X12 }
        return result;
    }
  }
  return a1;
}

_QWORD *sub_214379B44(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  void (*v20)(_QWORD *, _QWORD *, uint64_t);
  char *v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  _QWORD *result;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *(_QWORD *)(a3 + 24);
  v4 = *(_QWORD *)(v29 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v28 = v5 + v6;
  if (((v5 + v6) & ~v6) + v5 <= v5)
    v7 = *(_QWORD *)(v4 + 64);
  else
    v7 = ((v5 + v6) & ~v6) + v5;
  v27 = sub_214423C48();
  v8 = *(_QWORD *)(v27 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = *(_QWORD *)(v8 + 64);
  v11 = sub_214423C54();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = ((v10 + v13 + ((v9 + 8) & ~v9)) & ~v13) + *(_QWORD *)(v12 + 64);
  if (v7 > v14)
    v14 = v7;
  if (v14 <= 0x10)
    v15 = 16;
  else
    v15 = v14;
  v17 = ~v6;
  v18 = ~v9;
  switch(*((_BYTE *)a2 + v15))
  {
    case 0:
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v4 + 32))(a1, a2, v29);
      v19 = 0;
      break;
    case 1:
      v20 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v4 + 32);
      v20(a1, a2, v29);
      v20((_QWORD *)(((unint64_t)a1 + v28) & v17), (_QWORD *)(((unint64_t)a2 + v28) & v17), v29);
      v19 = 1;
      break;
    case 2:
      *a1 = *a2;
      v19 = 2;
      break;
    case 3:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      v19 = 3;
      break;
    case 4:
      *a1 = *a2;
      v21 = (char *)a2 + v9;
      v22 = ((unint64_t)a1 + v9 + 8) & v18;
      v23 = (unint64_t)(v21 + 8) & v18;
      v24 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32);
      v25 = v11;
      v24(v22, v23, v27);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 32))((v22 + v10 + v13) & ~v13, (v23 + v10 + v13) & ~v13, v25);
      v19 = 4;
      break;
    default:
      if (v15 <= 3)
        v16 = v15;
      else
        v16 = 4;
      __asm { BR              X12 }
      return result;
  }
  *((_BYTE *)a1 + v15) = v19;
  return a1;
}

_QWORD *sub_214379D94(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(_QWORD *, uint64_t);
  uint64_t v22;
  char v23;
  void (*v24)(_QWORD *, _QWORD *, uint64_t);
  _QWORD *result;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  if (a1 != a2)
  {
    v32 = *(_QWORD *)(a3 + 24);
    v5 = *(_QWORD *)(v32 - 8);
    v6 = *(_QWORD *)(v5 + 64);
    v7 = *(unsigned __int8 *)(v5 + 80);
    v26 = v6 + v7;
    if (((v6 + v7) & ~v7) + v6 <= v6)
      v8 = *(_QWORD *)(v5 + 64);
    else
      v8 = ((v6 + v7) & ~v7) + v6;
    v30 = sub_214423C48();
    v9 = *(_QWORD *)(v30 - 8);
    v10 = *(unsigned __int8 *)(v9 + 80);
    v11 = *(_QWORD *)(v9 + 64);
    v31 = sub_214423C54();
    v12 = *(_QWORD *)(v31 - 8);
    v13 = *(unsigned __int8 *)(v12 + 80);
    v28 = v12;
    v29 = v11;
    v14 = ((v11 + v13 + ((v10 + 8) & ~v10)) & ~v13) + *(_QWORD *)(v12 + 64);
    if (v8 > v14)
      v14 = v8;
    if (v14 <= 0x10)
      v15 = 16;
    else
      v15 = v14;
    v17 = ~v7;
    v18 = ~v10;
    v27 = ~v13;
    switch(*((_BYTE *)a1 + v15))
    {
      case 0:
        (*(void (**)(_QWORD *, uint64_t))(v5 + 8))(a1, v32);
        break;
      case 1:
        v21 = *(void (**)(_QWORD *, uint64_t))(v5 + 8);
        v21(a1, v32);
        v18 = ~v10;
        v21((_QWORD *)(((unint64_t)a1 + v26) & v17), v32);
        break;
      case 2:
        swift_release();
        break;
      case 3:
        swift_release();
        swift_release();
        break;
      case 4:
        swift_release();
        v19 = ((unint64_t)a1 + v10 + 8) & v18;
        (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v19, v30);
        v20 = v19 + v29 + v13;
        v18 = ~v10;
        (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v20 & v27, v31);
        break;
      default:
        if (v15 <= 3)
          v16 = v15;
        else
          v16 = 4;
        __asm { BR              X12 }
        return result;
    }
    switch(*((_BYTE *)a2 + v15))
    {
      case 0:
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v5 + 32))(a1, a2, v32);
        v23 = 0;
        break;
      case 1:
        v24 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v5 + 32);
        v24(a1, a2, v32);
        v24((_QWORD *)(((unint64_t)a1 + v26) & v17), (_QWORD *)(((unint64_t)a2 + v26) & v17), v32);
        v23 = 1;
        break;
      case 2:
        *a1 = *a2;
        v23 = 2;
        break;
      case 3:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        v23 = 3;
        break;
      case 4:
        *a1 = *a2;
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 32))(((unint64_t)a1 + v10 + 8) & v18, ((unint64_t)a2 + v10 + 8) & v18, v30);
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v28 + 32))(((((unint64_t)a1 + v10 + 8) & v18) + v29 + v13) & v27, ((((unint64_t)a2 + v10 + 8) & v18) + v29 + v13) & v27, v31);
        v23 = 4;
        break;
      default:
        if (v15 <= 3)
          v22 = v15;
        else
          v22 = 4;
        __asm { BR              X12 }
        return result;
    }
    *((_BYTE *)a1 + v15) = v23;
  }
  return a1;
}

uint64_t sub_21437A164(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  int v17;
  unsigned int v19;
  int v20;
  unsigned int v21;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = ((v6 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)) + v6;
  if (v7 <= v6)
    v8 = v6;
  else
    v8 = v7;
  v9 = *(_QWORD *)(sub_214423C48() - 8);
  v10 = (*(unsigned __int8 *)(v9 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v11 = *(_QWORD *)(v9 + 64);
  v12 = sub_214423C54();
  v13 = ((v10 + v11 + *(unsigned __int8 *)(*(_QWORD *)(v12 - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v12 - 8) + 80))
      + *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64);
  if (v8 > v13)
    v13 = v8;
  v14 = 16;
  if (v13 > 0x10)
    v14 = v13;
  if (!a2)
    return 0;
  if (a2 < 0xFC)
    goto LABEL_26;
  v15 = v14 + 1;
  v16 = 8 * (v14 + 1);
  if ((v14 + 1) <= 3)
  {
    v19 = ((a2 + ~(-1 << v16) - 251) >> v16) + 1;
    if (HIWORD(v19))
    {
      v17 = *(_DWORD *)(a1 + v15);
      if (!v17)
        goto LABEL_26;
      goto LABEL_19;
    }
    if (v19 > 0xFF)
    {
      v17 = *(unsigned __int16 *)(a1 + v15);
      if (!*(_WORD *)(a1 + v15))
        goto LABEL_26;
      goto LABEL_19;
    }
    if (v19 < 2)
    {
LABEL_26:
      v21 = *(unsigned __int8 *)(a1 + v14);
      if (v21 >= 5)
        return (v21 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v17 = *(unsigned __int8 *)(a1 + v15);
  if (!*(_BYTE *)(a1 + v15))
    goto LABEL_26;
LABEL_19:
  v20 = (v17 - 1) << v16;
  if (v15 > 3)
    v20 = 0;
  if ((_DWORD)v15)
  {
    if (v15 > 3)
      LODWORD(v15) = 4;
    __asm { BR              X11 }
  }
  return (v20 + 252);
}

void sub_21437A300(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;

  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v9 = ((v8 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)) + v8;
  if (v9 <= v8)
    v10 = v8;
  else
    v10 = v9;
  v11 = *(_QWORD *)(sub_214423C48() - 8);
  v12 = (*(unsigned __int8 *)(v11 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v13 = *(_QWORD *)(v11 + 64);
  v14 = sub_214423C54();
  v15 = ((v12 + v13 + *(unsigned __int8 *)(*(_QWORD *)(v14 - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v14 - 8) + 80))
      + *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64);
  if (v10 > v15)
    v15 = v10;
  if (v15 <= 0x10)
    v15 = 16;
  v16 = v15 + 1;
  if (a3 < 0xFC)
  {
    v17 = 0;
  }
  else if (v16 <= 3)
  {
    v19 = ((a3 + ~(-1 << (8 * v16)) - 251) >> (8 * v16)) + 1;
    if (HIWORD(v19))
    {
      v17 = 4u;
    }
    else if (v19 >= 0x100)
    {
      v17 = 2;
    }
    else
    {
      v17 = v19 > 1;
    }
  }
  else
  {
    v17 = 1u;
  }
  if (a2 <= 0xFB)
    __asm { BR              X11 }
  v18 = a2 - 252;
  if (v16 < 4)
  {
    if ((_DWORD)v15 != -1)
    {
      v20 = v18 & ~(-1 << (8 * v16));
      bzero(a1, v16);
      if ((_DWORD)v16 == 3)
      {
        *(_WORD *)a1 = v20;
        a1[2] = BYTE2(v20);
      }
      else if ((_DWORD)v16 == 2)
      {
        *(_WORD *)a1 = v20;
      }
      else
      {
        *a1 = v20;
      }
    }
  }
  else
  {
    bzero(a1, v15 + 1);
    *(_DWORD *)a1 = v18;
  }
  __asm { BR              X10 }
}

uint64_t sub_21437A510(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) - 8);
  v4 = *(_QWORD *)(v3 + 64);
  v5 = ((v4 + *(unsigned __int8 *)(v3 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)) + v4;
  if (v5 <= v4)
    v6 = v4;
  else
    v6 = v5;
  v7 = *(_QWORD *)(sub_214423C48() - 8);
  v8 = (*(unsigned __int8 *)(v7 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v7 + 64);
  v10 = sub_214423C54();
  v11 = ((v8 + v9 + *(unsigned __int8 *)(*(_QWORD *)(v10 - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v10 - 8) + 80))
      + *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64);
  if (v6 > v11)
    v11 = v6;
  if (v11 <= 0x10)
    v11 = 16;
  result = *(unsigned __int8 *)(a1 + v11);
  if (result >= 5)
  {
    if (v11 <= 3)
      v13 = v11;
    else
      v13 = 4;
    __asm { BR              X12 }
  }
  return result;
}

void sub_21437A61C(_BYTE *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  size_t v20;
  unsigned int v21;
  unsigned int v22;
  int v23;

  if (a2 > 4)
  {
    v11 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
    v12 = *(_QWORD *)(v11 + 64);
    v13 = ((v12 + *(unsigned __int8 *)(v11 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80)) + v12;
    if (v13 <= v12)
      v14 = v12;
    else
      v14 = v13;
    v15 = *(_QWORD *)(sub_214423C48() - 8);
    v16 = (*(unsigned __int8 *)(v15 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
    v17 = *(_QWORD *)(v15 + 64);
    v18 = sub_214423C54();
    v19 = ((v16 + v17 + *(unsigned __int8 *)(*(_QWORD *)(v18 - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v18 - 8) + 80))
        + *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64);
    if (v14 > v19)
      v19 = v14;
    if (v19 <= 0x10)
      v20 = 16;
    else
      v20 = v19;
    v21 = a2 - 5;
    if (v20 < 4)
    {
      v22 = v21 >> (8 * v20);
      v23 = v21 & ~(-1 << (8 * v20));
      a1[v20] = v22 + 5;
      bzero(a1, v20);
      if ((_DWORD)v20 == 3)
      {
        *(_WORD *)a1 = v23;
        a1[2] = BYTE2(v23);
      }
      else if ((_DWORD)v20 == 2)
      {
        *(_WORD *)a1 = v23;
      }
      else
      {
        *a1 = v23;
      }
    }
    else
    {
      a1[v20] = 5;
      bzero(a1, v20);
      *(_DWORD *)a1 = v21;
    }
  }
  else
  {
    v6 = sub_214423C48();
    v7 = sub_214423C54();
    v8 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
    v9 = *(_QWORD *)(v8 + 64);
    v10 = ((v9 + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80)) + v9;
    if (v10 <= v9)
      v10 = v9;
    if (v10 <= ((((*(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80))
                + *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64)
                + *(unsigned __int8 *)(*(_QWORD *)(v7 - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v7 - 8) + 80))
              + *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64))
      v10 = ((((*(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80))
            + *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64)
            + *(unsigned __int8 *)(*(_QWORD *)(v7 - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v7 - 8) + 80))
          + *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64);
    if (v10 <= 0x10)
      v10 = 16;
    a1[v10] = a2;
  }
}

BOOL sub_21437A7D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t AssociatedConformanceWitness;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  int v26;
  char *v27;
  uint64_t v28;
  _BOOL8 v29;
  uint64_t v31;
  uint64_t v32;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v13 = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v15 = type metadata accessor for PlottableProjection(255, AssociatedTypeWitness, v13, AssociatedConformanceWitness);
  v16 = sub_214425388();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v31 - v18;
  v20 = type metadata accessor for PlottableProjection(255, a3, a4, a6);
  v32 = sub_214425388();
  v21 = *(_QWORD *)(v32 - 8);
  MEMORY[0x24BDAC7A8](v32);
  v23 = (char *)&v31 - v22;
  (*(void (**)(uint64_t, uint64_t))(a7 + 32))(a5, a7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 48))(v19, 1, v15) == 1)
  {
    (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
    v24 = *(_QWORD *)(v20 - 8);
    v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v24 + 56);
LABEL_5:
    v27 = v23;
    v28 = 1;
    goto LABEL_6;
  }
  v26 = swift_dynamicCast();
  v24 = *(_QWORD *)(v20 - 8);
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v24 + 56);
  if (!v26)
    goto LABEL_5;
  v27 = v23;
  v28 = 0;
LABEL_6:
  v25(v27, v28, 1, v20);
  v29 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v23, 1, v20) == 0;
  (*(void (**)(char *, uint64_t))(v21 + 8))(v23, v32);
  return v29;
}

uint64_t sub_21437A9F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t AssociatedConformanceWitness;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v41 = a5;
  v42 = a8;
  v39 = a3;
  v40 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v13 = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v15 = type metadata accessor for PlottableProjection(255, AssociatedTypeWitness, v13, AssociatedConformanceWitness);
  v16 = sub_214425388();
  v17 = MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v36 - v18;
  v20 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v22 = (char *)&v36 - v21;
  v36 = *(_QWORD *)(*(_QWORD *)(a7 + 8) + 8);
  v37 = a7;
  v38 = a4;
  v23 = swift_getAssociatedTypeWitness();
  v24 = type metadata accessor for PlottableProjection(0, v23, v41, v42);
  v25 = *(_QWORD *)(v24 - 8);
  MEMORY[0x24BDAC7A8](v24);
  v27 = (char *)&v36 - v26;
  (*(void (**)(uint64_t, uint64_t))(a9 + 32))(a6, a9);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48))(v19, 1, v15);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v22, v19, v15);
    v29 = swift_dynamicCast();
    MEMORY[0x24BDAC7A8](v29);
    v30 = v38;
    v31 = v41;
    *(&v36 - 8) = v38;
    *(&v36 - 7) = v31;
    v32 = v36;
    v33 = v37;
    *(&v36 - 6) = a6;
    *(&v36 - 5) = v33;
    *(&v36 - 4) = v42;
    *(&v36 - 3) = a9;
    *(&v36 - 2) = (uint64_t)v27;
    v35 = sub_2141D0320((void (*)(char *, char *))sub_21437ADC0, (uint64_t)(&v36 - 10), v30, (uint64_t)&type metadata for AnyPlottableValue, MEMORY[0x24BEE4078], v32, MEMORY[0x24BEE40A8], v34);
    (*(void (**)(char *, uint64_t))(v25 + 8))(v27, v24);
    return v35;
  }
  return result;
}

__n128 sub_21437AC74@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X6>, uint64_t a5@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  __int128 v18;
  __n128 result;
  uint64_t v20;
  _OWORD v21[4];
  uint64_t v22;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v13 = (char *)&v20 - v12;
  v14 = type metadata accessor for PlottableProjection(0, AssociatedTypeWitness, a3, a4);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v20 - v15;
  (*(void (**)(char *, uint64_t))(v17 + 16))((char *)&v20 - v15, a2);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a1, AssociatedTypeWitness);
  sub_2143D06EC((uint64_t)v16, (uint64_t)v13, AssociatedTypeWitness, a3, a4, (uint64_t)v21);
  v18 = v21[3];
  *(_OWORD *)(a5 + 32) = v21[2];
  *(_OWORD *)(a5 + 48) = v18;
  *(_QWORD *)(a5 + 64) = v22;
  result = (__n128)v21[1];
  *(_OWORD *)a5 = v21[0];
  *(__n128 *)(a5 + 16) = result;
  return result;
}

double sub_21437ADC0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  double result;

  *(_QWORD *)&result = sub_21437AC74(a1, v2[8], v2[3], v2[6], a2).n128_u64[0];
  return result;
}

uint64_t sub_21437ADF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD **v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t AssociatedConformanceWitness;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  int EnumCaseMultiPayload;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(char *, uint64_t);
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t result;
  _QWORD v58[2];
  uint64_t AssociatedTypeWitness;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;

  v73 = a3;
  v74 = a4;
  v77 = a2;
  v72 = a6;
  v66 = *(_QWORD *)(a6 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v65 = (char *)v58 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v18 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v58[0] = (char *)v58 - v19;
  v76 = a7;
  v64 = *(_QWORD *)(a7 - 8);
  v20 = MEMORY[0x24BDAC7A8](v18);
  v62 = (char *)v58 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = *(_QWORD *)(a8 - 8);
  MEMORY[0x24BDAC7A8](v20);
  v60 = a10;
  v61 = (char *)v58 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58[1] = *(_QWORD *)(*(_QWORD *)(a10 + 8) + 8);
  v75 = a5;
  v23 = swift_getAssociatedTypeWitness();
  v24 = type metadata accessor for PlottableProjection.Storage(0, v23, a8, a13);
  v68 = *(_QWORD *)(v24 - 8);
  v69 = v24;
  MEMORY[0x24BDAC7A8](v24);
  v26 = (_QWORD **)((char *)v58 - v25);
  v27 = swift_getAssociatedTypeWitness();
  v28 = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v30 = type metadata accessor for PlottableProjection(255, v27, v28, AssociatedConformanceWitness);
  v31 = sub_214425388();
  v32 = MEMORY[0x24BDAC7A8](v31);
  v34 = (char *)v58 - v33;
  v35 = *(_QWORD *)(v30 - 8);
  MEMORY[0x24BDAC7A8](v32);
  v37 = (char *)v58 - v36;
  v67 = a8;
  v71 = a13;
  v38 = type metadata accessor for PlottableProjection(0, v23, a8, a13);
  v70 = *(_QWORD *)(v38 - 8);
  MEMORY[0x24BDAC7A8](v38);
  v40 = (char *)v58 - v39;
  (*(void (**)(uint64_t, uint64_t))(a14 + 32))(a9, a14);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v34, 1, v30) == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v35 + 32))(v37, v34, v30);
    swift_dynamicCast();
    (*(void (**)(_QWORD **, char *, uint64_t))(v68 + 16))(v26, &v40[*(int *)(v38 + 44)], v69);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (!EnumCaseMultiPayload)
    {
      v77 = v38;
      v43 = v63;
      v44 = v61;
      v45 = v67;
      (*(void (**)(char *, _QWORD **, uint64_t))(v63 + 32))(v61, v26, v67);
      (*(void (**)(uint64_t))(v71 + 24))(v45);
      v46 = v65;
      v47 = v72;
      swift_dynamicCast();
      v48 = v76;
      type metadata accessor for ConcreteScale(0, v47, v76, v49);
      v50 = (uint64_t)v62;
      sub_2142E0FAC();
      (*(void (**)(char *, uint64_t))(v66 + 8))(v46, v47);
      v51 = sub_2144251A8();
      v52 = sub_214330EC0(v50, v51, v48);
      (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v50, v48);
      v53 = *(void (**)(char *, uint64_t))(v43 + 8);
      v38 = v77;
      v53(v44, v45);
LABEL_6:
      (*(void (**)(char *, uint64_t))(v70 + 8))(v40, v38);
      return v52;
    }
    if (EnumCaseMultiPayload == 2)
    {
      v54 = *v26;
      v55 = type metadata accessor for ConcreteScale(0, v72, v76, v42);
      sub_2142E27B4(v74, v54, v55, v75, a12, v71, v60);
      v52 = v56;
      swift_release();
      goto LABEL_6;
    }
  }
  result = sub_214425628();
  __break(1u);
  return result;
}

uint64_t sub_21437B30C(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  v4 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 24) = v4;
  (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a2, a1);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  return a2;
}

_UNKNOWN **sub_21437B358()
{
  return &protocol witness table for Never;
}

uint64_t sub_21437B364()
{
  return MEMORY[0x24BEE4090];
}

uint64_t dispatch thunk of LazyChartData.xRange.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

uint64_t dispatch thunk of LazyChartData.yRange.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 80))();
}

uint64_t dispatch thunk of LazyChartData.elements(xRange:yRange:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 88))();
}

uint64_t _s9MonotoneXVwcp(uint64_t a1, uint64_t a2)
{
  void *v3;
  id v4;

  v3 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v4 = v3;
  return a1;
}

uint64_t _s9MonotoneXVwca(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  return a1;
}

uint64_t _s9MonotoneXVwta(uint64_t a1, uint64_t a2)
{
  void *v4;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  return a1;
}

uint64_t _s9MonotoneXVwet(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t _s9MonotoneXVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *_s9MonotoneXVMa()
{
  return &_s9MonotoneXVN;
}

double sub_21437B548(double a1, double a2)
{
  double *v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;

  v3 = v2[5];
  v4 = v2[6];
  v5 = v3 - v2[3];
  if (v5 == 0.0)
    v6 = 0.0;
  else
    v6 = v3 - v2[3];
  v7 = a1 - v3;
  v8 = (v4 - v2[4]) / v6;
  if (v7 == 0.0)
    v9 = 0.0;
  else
    v9 = v7;
  v10 = (a2 - v4) / v9;
  v11 = 1.0;
  if (v8 >= 0.0)
    v12 = 1.0;
  else
    v12 = -1.0;
  if (v10 < 0.0)
    v11 = -1.0;
  v13 = (v5 * v10 + v7 * v8) / (v7 + v5);
  v14 = fabs(v8);
  v15 = fabs(v10);
  if (v15 >= v14)
    v15 = v14;
  v16 = fabs(v13) * 0.5;
  if (v16 >= v15)
    v16 = v15;
  return v16 * (v11 + v12);
}

void sub_21437B5D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = v0;
  v2 = *(_QWORD *)(v0 + 8);
  if (v2 == 3)
  {
    sub_214425328();
  }
  else if (v2 == 2)
  {
    sub_21442531C();
  }
  v3 = *(_QWORD *)(v0 + 16);
  if (v3 == 1 || !v3 && v2 == 1)
    CGPathCloseSubpath(*(CGMutablePathRef *)v1);
  if (__OFSUB__(0, v3))
    __break(1u);
  else
    *(_QWORD *)(v1 + 16) = -v3;
}

__n128 sub_21437B6E0(double a1, double a2)
{
  uint64_t v2;
  uint64_t v5;
  double v6;
  __n128 result;

  v5 = *(_QWORD *)(v2 + 8);
  switch(v5)
  {
    case 2:
      *(_QWORD *)(v2 + 8) = 3;
      v6 = sub_21437B548(a1, a2);
      break;
    case 1:
      *(_QWORD *)(v2 + 8) = 2;
LABEL_11:
      v6 = NAN;
      goto LABEL_12;
    case 0:
      *(_QWORD *)(v2 + 8) = 1;
      if (*(_QWORD *)(v2 + 16) == 1)
        sub_21442531C();
      else
        sub_214425310();
      goto LABEL_11;
    default:
      v6 = sub_21437B548(a1, a2);
      break;
  }
  sub_214425328();
LABEL_12:
  result = *(__n128 *)(v2 + 40);
  *(__n128 *)(v2 + 24) = result;
  *(double *)(v2 + 40) = a1;
  *(double *)(v2 + 48) = a2;
  *(double *)(v2 + 56) = v6;
  return result;
}

int64x2_t sub_21437B908()
{
  uint64_t v0;
  int64x2_t result;

  *(_QWORD *)(v0 + 8) = 0;
  result = vdupq_n_s64(0x7FF8000000000000uLL);
  *(int64x2_t *)(v0 + 24) = result;
  *(int64x2_t *)(v0 + 40) = result;
  *(_QWORD *)(v0 + 56) = 0x7FF8000000000000;
  return result;
}

void sub_21437B928()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 16) = -1;
}

void sub_21437B934()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 16) = 0;
}

uint64_t sub_21437B940(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_21434EAA8((uint64_t)v2);
  v3 = *((_QWORD *)v2 + 2);
  v5[0] = (uint64_t)(v2 + 32);
  v5[1] = v3;
  result = sub_21437B9AC(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_21437B9AC(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  double v14;
  double v15;
  double *v16;
  double v17;
  double v18;
  __int128 *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 *v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  BOOL v45;
  unint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  BOOL v55;
  uint64_t v56;
  char v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  BOOL v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  double v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  unint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  double *v103;

  v3 = a1[1];
  result = sub_214425730();
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_138;
    if ((unint64_t)v3 >= 2)
    {
      v80 = *a1;
      v81 = -1;
      v82 = 1;
      v83 = *a1;
      do
      {
        v84 = *(double *)(v80 + 16 * v82);
        v85 = v81;
        v86 = v83;
        do
        {
          if (v84 >= *(double *)v86)
            break;
          if (!v80)
            goto LABEL_142;
          v87 = *(_QWORD *)(v86 + 24);
          *(_OWORD *)(v86 + 16) = *(_OWORD *)v86;
          *(double *)v86 = v84;
          *(_QWORD *)(v86 + 8) = v87;
          v86 -= 16;
        }
        while (!__CFADD__(v85++, 1));
        ++v82;
        v83 += 16;
        --v81;
      }
      while (v82 != v3);
    }
  }
  else
  {
    if (v3 >= 0)
      v5 = v3;
    else
      v5 = v3 + 1;
    if (v3 < -1)
      goto LABEL_137;
    v6 = result;
    v96 = a1;
    if (v3 > 1)
    {
      v7 = v5 >> 1;
      sub_2141D8BF8(&qword_254D6C910);
      result = sub_21442504C();
      *(_QWORD *)(result + 16) = v7;
      v99 = result;
      v103 = (double *)(result + 32);
LABEL_13:
      v9 = 0;
      v10 = *a1;
      v97 = *a1 - 16;
      v98 = *a1 + 32;
      v11 = MEMORY[0x24BEE4AF8];
      v100 = v6;
      v101 = v3;
      v102 = v10;
      while (1)
      {
        v13 = v9++;
        if (v9 < v3)
        {
          v14 = *(double *)(v10 + 16 * v9);
          v15 = *(double *)(v10 + 16 * v13);
          v9 = v13 + 2;
          if (v13 + 2 < v3)
          {
            v16 = (double *)(v98 + 16 * v13);
            v17 = v14;
            while (1)
            {
              v18 = v17;
              v17 = *v16;
              if (v14 < v15 == *v16 >= v18)
                break;
              ++v9;
              v16 += 2;
              if (v3 == v9)
              {
                v9 = v3;
                break;
              }
            }
          }
          if (v14 < v15)
          {
            if (v9 < v13)
              goto LABEL_139;
            if (v13 < v9)
            {
              v19 = (__int128 *)(v97 + 16 * v9);
              v20 = v9;
              v21 = v13;
              v22 = (__int128 *)(v10 + 16 * v13);
              do
              {
                if (v21 != --v20)
                {
                  if (!v10)
                    goto LABEL_145;
                  v23 = *v22;
                  *v22 = *v19;
                  *v19 = v23;
                }
                ++v21;
                --v19;
                ++v22;
              }
              while (v21 < v20);
            }
          }
        }
        if (v9 < v3)
        {
          if (__OFSUB__(v9, v13))
            goto LABEL_136;
          if (v9 - v13 < v6)
          {
            v24 = v13 + v6;
            if (__OFADD__(v13, v6))
              goto LABEL_140;
            if (v24 >= v3)
              v24 = v3;
            if (v24 < v13)
            {
LABEL_141:
              __break(1u);
LABEL_142:
              __break(1u);
LABEL_143:
              __break(1u);
LABEL_144:
              __break(1u);
LABEL_145:
              __break(1u);
LABEL_146:
              __break(1u);
              return result;
            }
            if (v9 != v24)
            {
              v25 = v97 + 16 * v9;
              do
              {
                v26 = *(double *)(v10 + 16 * v9);
                v27 = v13;
                v28 = v25;
                do
                {
                  if (v26 >= *(double *)v28)
                    break;
                  if (!v10)
                    goto LABEL_143;
                  v29 = *(_QWORD *)(v28 + 24);
                  *(_OWORD *)(v28 + 16) = *(_OWORD *)v28;
                  *(double *)v28 = v26;
                  *(_QWORD *)(v28 + 8) = v29;
                  v28 -= 16;
                  ++v27;
                }
                while (v9 != v27);
                ++v9;
                v25 += 16;
              }
              while (v9 != v24);
              v9 = v24;
            }
          }
        }
        if (v9 < v13)
          goto LABEL_131;
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          result = (uint64_t)sub_214224E24(0, *(_QWORD *)(v11 + 16) + 1, 1, (char *)v11);
          v11 = result;
        }
        v31 = *(_QWORD *)(v11 + 16);
        v30 = *(_QWORD *)(v11 + 24);
        v12 = v31 + 1;
        v10 = v102;
        if (v31 >= v30 >> 1)
        {
          result = (uint64_t)sub_214224E24((char *)(v30 > 1), v31 + 1, 1, (char *)v11);
          v10 = v102;
          v11 = result;
        }
        *(_QWORD *)(v11 + 16) = v12;
        v32 = v11 + 32;
        v33 = (uint64_t *)(v11 + 32 + 16 * v31);
        *v33 = v13;
        v33[1] = v9;
        if (v31)
        {
          while (1)
          {
            v34 = v12 - 1;
            if (v12 >= 4)
            {
              v39 = v32 + 16 * v12;
              v40 = *(_QWORD *)(v39 - 64);
              v41 = *(_QWORD *)(v39 - 56);
              v45 = __OFSUB__(v41, v40);
              v42 = v41 - v40;
              if (v45)
                goto LABEL_120;
              v44 = *(_QWORD *)(v39 - 48);
              v43 = *(_QWORD *)(v39 - 40);
              v45 = __OFSUB__(v43, v44);
              v37 = v43 - v44;
              v38 = v45;
              if (v45)
                goto LABEL_121;
              v46 = v12 - 2;
              v47 = (uint64_t *)(v32 + 16 * (v12 - 2));
              v49 = *v47;
              v48 = v47[1];
              v45 = __OFSUB__(v48, v49);
              v50 = v48 - v49;
              if (v45)
                goto LABEL_122;
              v45 = __OFADD__(v37, v50);
              v51 = v37 + v50;
              if (v45)
                goto LABEL_124;
              if (v51 >= v42)
              {
                v69 = (uint64_t *)(v32 + 16 * v34);
                v71 = *v69;
                v70 = v69[1];
                v45 = __OFSUB__(v70, v71);
                v72 = v70 - v71;
                if (v45)
                  goto LABEL_130;
                v62 = v37 < v72;
                goto LABEL_83;
              }
            }
            else
            {
              if (v12 != 3)
              {
                v63 = *(_QWORD *)(v11 + 32);
                v64 = *(_QWORD *)(v11 + 40);
                v45 = __OFSUB__(v64, v63);
                v56 = v64 - v63;
                v57 = v45;
                goto LABEL_77;
              }
              v36 = *(_QWORD *)(v11 + 32);
              v35 = *(_QWORD *)(v11 + 40);
              v45 = __OFSUB__(v35, v36);
              v37 = v35 - v36;
              v38 = v45;
            }
            if ((v38 & 1) != 0)
              goto LABEL_123;
            v46 = v12 - 2;
            v52 = (uint64_t *)(v32 + 16 * (v12 - 2));
            v54 = *v52;
            v53 = v52[1];
            v55 = __OFSUB__(v53, v54);
            v56 = v53 - v54;
            v57 = v55;
            if (v55)
              goto LABEL_125;
            v58 = (uint64_t *)(v32 + 16 * v34);
            v60 = *v58;
            v59 = v58[1];
            v45 = __OFSUB__(v59, v60);
            v61 = v59 - v60;
            if (v45)
              goto LABEL_127;
            if (__OFADD__(v56, v61))
              goto LABEL_129;
            if (v56 + v61 >= v37)
            {
              v62 = v37 < v61;
LABEL_83:
              if (v62)
                v34 = v46;
              goto LABEL_85;
            }
LABEL_77:
            if ((v57 & 1) != 0)
              goto LABEL_126;
            v65 = (uint64_t *)(v32 + 16 * v34);
            v67 = *v65;
            v66 = v65[1];
            v45 = __OFSUB__(v66, v67);
            v68 = v66 - v67;
            if (v45)
              goto LABEL_128;
            if (v68 < v56)
              goto LABEL_15;
LABEL_85:
            v73 = v34 - 1;
            if (v34 - 1 >= v12)
            {
              __break(1u);
LABEL_117:
              __break(1u);
LABEL_118:
              __break(1u);
LABEL_119:
              __break(1u);
LABEL_120:
              __break(1u);
LABEL_121:
              __break(1u);
LABEL_122:
              __break(1u);
LABEL_123:
              __break(1u);
LABEL_124:
              __break(1u);
LABEL_125:
              __break(1u);
LABEL_126:
              __break(1u);
LABEL_127:
              __break(1u);
LABEL_128:
              __break(1u);
LABEL_129:
              __break(1u);
LABEL_130:
              __break(1u);
LABEL_131:
              __break(1u);
LABEL_132:
              __break(1u);
LABEL_133:
              __break(1u);
LABEL_134:
              __break(1u);
LABEL_135:
              __break(1u);
LABEL_136:
              __break(1u);
LABEL_137:
              __break(1u);
LABEL_138:
              __break(1u);
LABEL_139:
              __break(1u);
LABEL_140:
              __break(1u);
              goto LABEL_141;
            }
            if (!v10)
              goto LABEL_144;
            v74 = v11;
            v75 = (uint64_t *)(v32 + 16 * v73);
            v76 = *v75;
            v77 = (_QWORD *)(v32 + 16 * v34);
            v78 = v77[1];
            result = sub_2141FD20C((double *)(v10 + 16 * *v75), (double *)(v10 + 16 * *v77), v10 + 16 * v78, v103);
            if (v1)
              goto LABEL_93;
            if (v78 < v76)
              goto LABEL_117;
            if (v34 > *(_QWORD *)(v74 + 16))
              goto LABEL_118;
            *v75 = v76;
            *(_QWORD *)(v32 + 16 * v73 + 8) = v78;
            v79 = *(_QWORD *)(v74 + 16);
            if (v34 >= v79)
              goto LABEL_119;
            v11 = v74;
            v12 = v79 - 1;
            result = (uint64_t)memmove((void *)(v32 + 16 * v34), v77 + 2, 16 * (v79 - 1 - v34));
            *(_QWORD *)(v74 + 16) = v79 - 1;
            v10 = v102;
            if (v79 <= 2)
              goto LABEL_15;
          }
        }
        v12 = 1;
LABEL_15:
        v6 = v100;
        v3 = v101;
        if (v9 >= v101)
        {
          v8 = v99;
          goto LABEL_103;
        }
      }
    }
    v8 = MEMORY[0x24BEE4AF8];
    v103 = (double *)(MEMORY[0x24BEE4AF8] + 32);
    if (v3 == 1)
    {
      v99 = MEMORY[0x24BEE4AF8];
      goto LABEL_13;
    }
    v12 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
    v11 = MEMORY[0x24BEE4AF8];
LABEL_103:
    result = v11;
    v99 = v8;
    if (v12 >= 2)
    {
      v89 = *v96;
      do
      {
        v90 = v12 - 2;
        if (v12 < 2)
          goto LABEL_132;
        if (!v89)
          goto LABEL_146;
        v91 = result;
        v92 = *(_QWORD *)(result + 32 + 16 * v90);
        v93 = *(_QWORD *)(result + 32 + 16 * (v12 - 1) + 8);
        result = sub_2141FD20C((double *)(v89 + 16 * v92), (double *)(v89 + 16 * *(_QWORD *)(result + 32 + 16 * (v12 - 1))), v89 + 16 * v93, v103);
        if (v1)
          break;
        if (v93 < v92)
          goto LABEL_133;
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          result = (uint64_t)sub_21435010C(v91);
          v91 = result;
        }
        if (v90 >= *(_QWORD *)(v91 + 16))
          goto LABEL_134;
        v94 = (_QWORD *)(v91 + 32 + 16 * v90);
        *v94 = v92;
        v94[1] = v93;
        v95 = *(_QWORD *)(v91 + 16);
        if (v12 > v95)
          goto LABEL_135;
        memmove((void *)(v91 + 32 + 16 * (v12 - 1)), (const void *)(v91 + 32 + 16 * v12), 16 * (v95 - v12));
        result = v91;
        *(_QWORD *)(v91 + 16) = v95 - 1;
        v12 = v95 - 1;
      }
      while (v95 > 2);
    }
LABEL_93:
    swift_bridgeObjectRelease();
    *(_QWORD *)(v99 + 16) = 0;
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t sub_21437C038(unint64_t result)
{
  unint64_t *v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  if (result)
  {
    v2 = *v1;
    v3 = *v1 - 0x61C8864680B583EBLL;
    *v1 = v3;
    v4 = 0x94D049BB133111EBLL
       * ((0xBF58476D1CE4E5B9 * (v3 ^ (v3 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v3 ^ (v3 >> 30))) >> 27));
    v5 = v4 ^ (v4 >> 31);
    v6 = v5 * result;
    v7 = (v5 * (unsigned __int128)result) >> 64;
    if (v6 < result)
    {
      v8 = -(uint64_t)result % result;
      if (v8 > v6)
      {
        v9 = v2 + 0x3C6EF372FE94F82ALL;
        do
        {
          v3 -= 0x61C8864680B583EBLL;
          v10 = 0x94D049BB133111EBLL
              * ((0xBF58476D1CE4E5B9 * (v9 ^ (v9 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v9 ^ (v9 >> 30))) >> 27));
          v11 = v10 ^ (v10 >> 31);
          v9 -= 0x61C8864680B583EBLL;
        }
        while (v8 > v11 * result);
        v7 = (v11 * (unsigned __int128)result) >> 64;
        *v1 = v3;
      }
    }
    return v7;
  }
  else
  {
    __break(1u);
  }
  return result;
}

char *sub_21437C100(char *result, char a2, uint64_t a3, char a4, double (*a5)(double), double a6, double a7)
{
  double v7;
  uint64_t v11;
  double v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  int64_t v31;
  uint64_t v32;
  char *v33;
  BOOL v34;
  double v35;
  double v36;
  int64_t v37;
  double v38;
  double v39;
  BOOL v41;
  double v42;
  double v44;
  double v45;
  double v46;
  double v49;
  double v50;
  double v51;
  char v54;
  char *v56;

  v54 = (char)result;
  v7 = a7 - a6;
  if ((~COERCE__INT64(a7 - a6) & 0x7FF0000000000000) == 0)
  {
LABEL_87:
    __break(1u);
LABEL_88:
    __break(1u);
    goto LABEL_89;
  }
  v11 = 0;
  v12 = v7 / 12300.0;
  v13 = (char *)MEMORY[0x24BEE4AF8];
  v14 = 0x78ABBF7B5AEAE776;
  do
  {
    v16 = v14 - 0x61C8864680B583EBLL;
    v17 = 0xBF58476D1CE4E5B9 * ((v14 - 0x61C8864680B583EBLL) ^ ((unint64_t)(v14 - 0x61C8864680B583EBLL) >> 30));
    v18 = (0x94D049BB133111EBLL * (v17 ^ (v17 >> 27))) ^ ((0x94D049BB133111EBLL * (v17 ^ (v17 >> 27))) >> 31);
    if (0x20000000000001 * v18 >= 0x1FFFFFFFFFF801)
    {
      v22 = (v18 * (unsigned __int128)0x20000000000001uLL) >> 64;
    }
    else
    {
      v19 = v14 + 0x3C6EF372FE94F82ALL;
      do
      {
        v16 -= 0x61C8864680B583EBLL;
        v20 = 0x94D049BB133111EBLL
            * ((0xBF58476D1CE4E5B9 * (v19 ^ (v19 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v19 ^ (v19 >> 30))) >> 27));
        v21 = v20 ^ (v20 >> 31);
        v19 -= 0x61C8864680B583EBLL;
      }
      while (0x20000000000001 * v21 < 0x1FFFFFFFFFF801);
      v22 = (v21 * (unsigned __int128)0x20000000000001uLL) >> 64;
    }
    v14 = v16;
    if (v22 == 0x20000000000000)
      v23 = a7;
    else
      v23 = v7 * ((double)v22 * 1.11022302e-16) + a6;
    v24 = a5(v23);
    v25 = a5(v12 + v23);
    a5(v23 - v12);
    if ((~*(_QWORD *)&v24 & 0x7FF0000000000000) != 0)
    {
      v27 = (v25 - v26) / (v12 + v12);
      if ((~*(_QWORD *)&v27 & 0x7FF0000000000000) != 0)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v13 = sub_214221D0C(0, *((_QWORD *)v13 + 2) + 1, 1, v13);
        v29 = *((_QWORD *)v13 + 2);
        v28 = *((_QWORD *)v13 + 3);
        v30 = v13;
        if (v29 >= v28 >> 1)
          v30 = sub_214221D0C((char *)(v28 > 1), v29 + 1, 1, v13);
        *((_QWORD *)v30 + 2) = v29 + 1;
        v13 = v30;
        v15 = &v30[16 * v29];
        *((double *)v15 + 4) = v24;
        *((double *)v15 + 5) = v27;
      }
    }
    ++v11;
  }
  while (v11 != 200);
  v56 = v13;
  if (*((_QWORD *)v13 + 2) <= 1uLL)
    return (char *)swift_bridgeObjectRelease();
  sub_21437B940(&v56);
  result = v56;
  v31 = *((_QWORD *)v56 + 2);
  if (!v31)
    goto LABEL_88;
  v32 = v31 - 1;
  v33 = v56 + 32;
  v34 = *(double *)&v56[16 * v31 + 16] <= *((double *)v56 + 4) || v31 == 1;
  v35 = a7;
  v36 = a6;
  if (!v34)
  {
    v37 = 0;
    v35 = *(double *)&v56[16 * v31 + 16];
    v36 = *((double *)v56 + 4);
    while (1)
    {
      v38 = (v35 - v36) / v7;
      if (v38 <= 100000000.0)
      {
        if (v37 >= (unint64_t)v31)
          goto LABEL_86;
        v39 = fabs(*(double *)&v33[16 * v37 + 8]) / v38;
        if (v39 > 10.0)
          ++v37;
        if (fabs(*(double *)&v33[16 * v32 + 8]) / v38 <= 10.0)
        {
          if (v39 <= 10.0)
            goto LABEL_42;
        }
        else
        {
          --v32;
        }
      }
      else
      {
        ++v37;
        --v32;
      }
      if (v37 >= v31)
        break;
      if (v32 >= v31)
        goto LABEL_85;
      v36 = *(double *)&v33[16 * v37];
      v35 = *(double *)&v33[16 * v32];
      if (v35 <= v36 || v37 >= v32)
      {
        v35 = a7;
        v36 = a6;
        goto LABEL_42;
      }
    }
    __break(1u);
LABEL_85:
    __break(1u);
LABEL_86:
    __break(1u);
    goto LABEL_87;
  }
LABEL_42:
  result = (char *)swift_bridgeObjectRelease();
  if ((v54 & 1) == 0)
    goto LABEL_56;
  if (v35 > 0.0 && v36 < 0.0)
  {
    if (fabs(v35 / (v35 - v36) + -0.5) < 0.15)
    {
      if (v35 < -v36)
        v35 = -v36;
      v36 = -v35;
      if ((a2 & 1) == 0)
        goto LABEL_49;
      goto LABEL_57;
    }
LABEL_56:
    if ((a2 & 1) == 0)
      goto LABEL_49;
    goto LABEL_57;
  }
  if (v35 > 0.0 && v36 >= 0.0 && v36 < v35 * 0.5)
  {
    v36 = -v35;
    goto LABEL_56;
  }
  if (v36 * 0.5 < v35 && v35 <= 0.0 && v36 < 0.0)
    v35 = -v36;
  if ((a2 & 1) == 0)
  {
LABEL_49:
    v41 = v36 > v35;
    if (v36 >= v35)
      return result;
    goto LABEL_50;
  }
LABEL_57:
  v42 = (v35 - v36) / v7;
  if (v42 <= 0.1 || v42 >= 1.2)
  {
    if ((a4 & 1) != 0)
    {
      v44 = (v35 - v36) * 0.05;
      v45 = v36 - v44;
      v46 = v35 + v44;
      v41 = v45 > v46;
      if (v45 >= v46)
        return result;
      goto LABEL_50;
    }
LABEL_65:
    v7 = v7 / *(double *)&a3;
    if (v36 == 0.0)
      goto LABEL_66;
    goto LABEL_79;
  }
  if ((a4 & 1) == 0)
    goto LABEL_65;
  if (v36 == 0.0)
  {
LABEL_66:
    v41 = v36 > v7;
    if (v36 >= v7)
      return result;
    goto LABEL_50;
  }
LABEL_79:
  if (v35 == 0.0)
  {
    v41 = -v7 > v35;
    if (-v7 >= v35)
      return result;
  }
  else
  {
    v49 = (v35 + v36) * 0.5;
    v50 = v49 - v7 * 0.5;
    v51 = v49 + v7 * 0.5;
    v41 = v50 > v51;
    if (v50 >= v51)
      return result;
  }
LABEL_50:
  if (v41)
LABEL_89:
    __break(1u);
  return result;
}

uint64_t sub_21437C614(uint64_t a1, char a2, float64x2_t a3, double a4)
{
  uint64_t *v6;
  int64x2_t v7;
  uint64_t v8;
  _QWORD *v9;
  char v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t result;
  unint64_t v14;
  uint64_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  int64x2_t v20;
  int64x2_t v21;
  float64x2_t v22;
  uint64_t v23;
  _QWORD *v24;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  float64x2_t v31;

  v6 = (uint64_t *)(a1 + 16);
  v7 = (int64x2_t)vbicq_s8(vorrq_s8((int8x16_t)vcltzq_f64(a3), (int8x16_t)vcgezq_f64(a3)), (int8x16_t)vceqq_f64((float64x2_t)vandq_s8((int8x16_t)a3, (int8x16_t)vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL)), (float64x2_t)vdupq_n_s64(0x7FF0000000000000uLL)));
  if ((vandq_s8((int8x16_t)vdupq_laneq_s64(v7, 1), (int8x16_t)v7).u64[0] & 0x8000000000000000) != 0)
  {
    if ((a2 & 1) != 0)
    {
      swift_beginAccess();
      v14 = *(_QWORD *)(*v6 + 16);
      if (v14 >= 2)
      {
        v15 = *v6 + 16 * v14;
        v16 = *(float64x2_t *)(v15 + 16);
        v17 = vsubq_f64(*(float64x2_t *)v15, v16);
        v18 = vsubq_f64(a3, v16);
        v19 = vmulq_f64(v17, v18);
        v20 = (int64x2_t)vmulq_f64(v17, v17);
        v21 = (int64x2_t)vmulq_f64(v18, v18);
        v22 = vsqrtq_f64(vaddq_f64((float64x2_t)vzip1q_s64(v20, v21), (float64x2_t)vzip2q_s64(v20, v21)));
        if (fabs(vdivq_f64(vaddq_f64(v19, (float64x2_t)vdupq_laneq_s64((int64x2_t)v19, 1)), vmulq_laneq_f64(v22, v22, 1)).f64[0]+ 1.0) > a4)
        {
          swift_beginAccess();
          v23 = *v6;
          if (*(_QWORD *)(*v6 + 16))
          {
            v24 = *(_QWORD **)(a1 + 24);
            swift_bridgeObjectRetain();
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            *(_QWORD *)(a1 + 24) = v24;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              v24 = sub_21422423C(0, v24[2] + 1, 1, v24);
              *(_QWORD *)(a1 + 24) = v24;
            }
            v27 = v24[2];
            v26 = v24[3];
            if (v27 >= v26 >> 1)
            {
              v24 = sub_21422423C((_QWORD *)(v26 > 1), v27 + 1, 1, v24);
              *(_QWORD *)(a1 + 24) = v24;
            }
            v24[2] = v27 + 1;
            v24[v27 + 4] = v23;
          }
          *v6 = MEMORY[0x24BEE4AF8];
          swift_bridgeObjectRelease();
        }
      }
    }
    swift_beginAccess();
    v28 = *v6;
    result = swift_isUniquelyReferenced_nonNull_native();
    *v6 = v28;
    if ((result & 1) == 0)
    {
      result = (uint64_t)sub_214224144(0, *(_QWORD *)(v28 + 16) + 1, 1, (char *)v28);
      v28 = result;
      *v6 = result;
    }
    v30 = *(_QWORD *)(v28 + 16);
    v29 = *(_QWORD *)(v28 + 24);
    v31 = a3;
    if (v30 >= v29 >> 1)
    {
      result = (uint64_t)sub_214224144((char *)(v29 > 1), v30 + 1, 1, (char *)v28);
      v31 = a3;
      v28 = result;
      *v6 = result;
    }
    *(_QWORD *)(v28 + 16) = v30 + 1;
    *(float64x2_t *)(v28 + 16 * v30 + 32) = v31;
  }
  else
  {
    swift_beginAccess();
    v8 = *v6;
    if (*(_QWORD *)(*v6 + 16))
    {
      v9 = *(_QWORD **)(a1 + 24);
      swift_bridgeObjectRetain();
      v10 = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)(a1 + 24) = v9;
      if ((v10 & 1) == 0)
      {
        v9 = sub_21422423C(0, v9[2] + 1, 1, v9);
        *(_QWORD *)(a1 + 24) = v9;
      }
      v12 = v9[2];
      v11 = v9[3];
      if (v12 >= v11 >> 1)
      {
        v9 = sub_21422423C((_QWORD *)(v11 > 1), v12 + 1, 1, v9);
        *(_QWORD *)(a1 + 24) = v9;
      }
      v9[2] = v12 + 1;
      v9[v12 + 4] = v8;
    }
    *v6 = MEMORY[0x24BEE4AF8];
    return swift_bridgeObjectRelease();
  }
  return result;
}

void sub_21437C91C(double a1, uint64_t a2, void (*a3)(void))
{
  double v3;
  double v4;

  v3 = a1 + -0.03;
  v4 = a1 + 0.03;
  if (a1 + -0.03 > a1 + 0.03)
  {
    __break(1u);
  }
  else
  {
    swift_beginAccess();
    if ((~COERCE__INT64(v4 - v3) & 0x7FF0000000000000) != 0)
    {
      sub_21437C038(0x20000000000001uLL);
      a3();
      return;
    }
  }
  __break(1u);
}

BOOL sub_21437CA18(float64x2_t a1, float64x2_t a2, float64x2_t a3, double a4, float64_t a5)
{
  float64x2_t v5;
  int64x2_t v6;
  int64x2_t v8;
  int64x2_t v9;
  float64x2_t v10;
  float64x2_t v11;
  double v12;
  int64x2_t v13;
  int64x2_t v14;
  float64x2_t v15;
  _BOOL4 v16;

  v5 = (float64x2_t)vdupq_n_s64(0x7FF0000000000000uLL);
  v6 = (int64x2_t)vbicq_s8(vorrq_s8((int8x16_t)vcltzq_f64(a1), (int8x16_t)vcgezq_f64(a1)), (int8x16_t)vceqq_f64((float64x2_t)vandq_s8((int8x16_t)a1, (int8x16_t)vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL)), v5));
  if ((vandq_s8((int8x16_t)vdupq_laneq_s64(v6, 1), (int8x16_t)v6).u64[0] & 0x8000000000000000) == 0)
    return 0;
  v8 = (int64x2_t)vbicq_s8(vorrq_s8((int8x16_t)vcltzq_f64(a2), (int8x16_t)vcgezq_f64(a2)), (int8x16_t)vceqq_f64(vabsq_f64(a2), v5));
  if ((vandq_s8((int8x16_t)vdupq_laneq_s64(v8, 1), (int8x16_t)v8).u64[0] & 0x8000000000000000) == 0)
    return 0;
  v9 = (int64x2_t)vbicq_s8(vorrq_s8((int8x16_t)vcltzq_f64(a3), (int8x16_t)vcgezq_f64(a3)), (int8x16_t)vceqq_f64(vabsq_f64(a3), (float64x2_t)vdupq_n_s64(0x7FF0000000000000uLL)));
  if ((vandq_s8((int8x16_t)vdupq_laneq_s64(v9, 1), (int8x16_t)v9).u64[0] & 0x8000000000000000) == 0)
    return 0;
  v10 = vsubq_f64(a1, a2);
  v11 = vsubq_f64(a3, a2);
  v12 = vaddvq_f64(vmulq_f64(v10, v11));
  v13 = (int64x2_t)vmulq_f64(v10, v10);
  v14 = (int64x2_t)vmulq_f64(v11, v11);
  v15 = vsqrtq_f64(vaddq_f64((float64x2_t)vzip1q_s64(v13, v14), (float64x2_t)vzip2q_s64(v13, v14)));
  v16 = fabs(v12 / vmuld_lane_f64(v15.f64[0], v15, 1) + 1.0) < a4;
  if (v15.f64[0] >= a5)
    v16 = 0;
  return v15.f64[1] < a5 && v16;
}

uint64_t sub_21437CB1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, void (*a8)(void), double a9, float64x2_t a10, double a11, float64x2_t a12, double a13, float64_t a14, double a15, double a16, double a17, uint64_t a18)
{
  double v32;
  __n128 v33;
  double v34;
  double v35;
  __n128 v36;
  double v37;
  __n128 v38;
  float64x2_t v39;
  float64x2_t v40;
  _BOOL4 v41;
  float64x2_t v42;
  float64x2_t v43;
  __n128 v44;
  float64x2_t v45;
  int64x2_t v46;
  uint64_t v47;
  int64x2_t v48;
  uint64_t v49;
  int64x2_t v50;
  unint64_t v51;
  int64x2_t v52;
  unint64_t v53;
  int64x2_t v54;
  unint64_t v55;
  _BOOL4 v56;
  BOOL v57;
  BOOL v58;
  char v59;
  BOOL v60;
  BOOL v61;
  char v62;
  uint64_t v63;
  _BOOL4 v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  float64x2_t v68;
  _BOOL4 v69;
  double v70;
  double v71;
  uint64_t result;
  _QWORD *v73;
  uint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _BOOL4 v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  _BOOL4 v91;
  _BOOL4 v92;
  double v93;
  char v94;
  double v95;
  uint64_t v97;
  __n128 v99;
  __n128 v100;
  __n128 v101;

  sub_21437C91C(0.25, a2, a8);
  v95 = v32;
  v99 = v33;
  sub_21437C91C(0.5, a2, a8);
  v35 = v34;
  v101 = v36;
  sub_21437C91C(0.75, a2, a8);
  v93 = v37;
  v100 = v38;
  if (sub_21437CA18(a10, (float64x2_t)v99, (float64x2_t)v101, a13, a14))
  {
    sub_21437C91C(0.25, a2, a8);
    v91 = sub_21437CA18(a10, v39, (float64x2_t)v101, a13, a14);
  }
  else
  {
    v91 = 0;
  }
  if (sub_21437CA18((float64x2_t)v99, (float64x2_t)v101, (float64x2_t)v100, a13, a14))
  {
    sub_21437C91C(0.5, a2, a8);
    v41 = sub_21437CA18((float64x2_t)v99, v40, (float64x2_t)v100, a13, a14);
  }
  else
  {
    v41 = 0;
  }
  if (sub_21437CA18((float64x2_t)v101, (float64x2_t)v100, a12, a13, a14))
  {
    sub_21437C91C(0.75, a2, a8);
    v92 = sub_21437CA18((float64x2_t)v101, v42, a12, a13, a14);
  }
  else
  {
    v92 = 0;
  }
  v43 = (float64x2_t)v99;
  v44 = (__n128)a10;
  v45 = (float64x2_t)vdupq_n_s64(0x7FF0000000000000uLL);
  v46 = (int64x2_t)vbicq_s8(vorrq_s8((int8x16_t)vcltzq_f64(a10), (int8x16_t)vcgezq_f64(a10)), (int8x16_t)vceqq_f64(vabsq_f64(a10), v45));
  v47 = vandq_s8((int8x16_t)vdupq_laneq_s64(v46, 1), (int8x16_t)v46).u64[0];
  v48 = (int64x2_t)vbicq_s8(vorrq_s8((int8x16_t)vcltzq_f64((float64x2_t)v99), (int8x16_t)vcgezq_f64((float64x2_t)v99)), (int8x16_t)vceqq_f64(vabsq_f64((float64x2_t)v99), v45));
  v49 = vandq_s8((int8x16_t)vdupq_laneq_s64(v48, 1), (int8x16_t)v48).u64[0];
  v50 = (int64x2_t)vbicq_s8(vorrq_s8((int8x16_t)vcltzq_f64((float64x2_t)v101), (int8x16_t)vcgezq_f64((float64x2_t)v101)), (int8x16_t)vceqq_f64(vabsq_f64((float64x2_t)v101), v45));
  v51 = vandq_s8((int8x16_t)vdupq_laneq_s64(v50, 1), (int8x16_t)v50).u64[0];
  v52 = (int64x2_t)vbicq_s8(vorrq_s8((int8x16_t)vcltzq_f64((float64x2_t)v100), (int8x16_t)vcgezq_f64((float64x2_t)v100)), (int8x16_t)vceqq_f64(vabsq_f64((float64x2_t)v100), v45));
  v53 = vandq_s8((int8x16_t)vdupq_laneq_s64(v52, 1), (int8x16_t)v52).u64[0];
  v54 = (int64x2_t)vbicq_s8(vorrq_s8((int8x16_t)vcltzq_f64(a12), (int8x16_t)vcgezq_f64(a12)), (int8x16_t)vceqq_f64(vabsq_f64(a12), v45));
  v55 = vandq_s8((int8x16_t)vdupq_laneq_s64(v54, 1), (int8x16_t)v54).u64[0];
  v94 = a7;
  v90 = v53;
  v87 = v55;
  v88 = v49;
  v97 = v51;
  if (v47 < 0)
  {
    if ((v49 & 0x8000000000000000) == 0)
    {
      if ((v51 & 0x8000000000000000) == 0)
      {
        if ((v53 & 0x8000000000000000) == 0)
        {
          v89 = v55 >> 63;
          if (a1 >= a3)
          {
            if (a1 < a4)
            {
              v86 = 0;
              if (v91 && a1 >= a5)
                goto LABEL_82;
              goto LABEL_80;
            }
            if (a1 >= a5)
            {
LABEL_15:
              HIDWORD(v86) = 0;
              if (a9 != a15 || v91)
              {
                LODWORD(v86) = 0;
                goto LABEL_82;
              }
              LODWORD(v86) = 0;
              if (!v41)
                goto LABEL_82;
              goto LABEL_126;
            }
          }
          goto LABEL_22;
        }
        if (a1 >= a3)
        {
          if (a1 < a4)
          {
            LODWORD(v89) = 1;
            v86 = 0x100000000;
            if (v91 && a1 >= a5)
              goto LABEL_82;
            goto LABEL_80;
          }
          if (a1 >= a5)
            goto LABEL_120;
        }
LABEL_58:
        LODWORD(v89) = 1;
        v86 = 0x100000000;
        goto LABEL_80;
      }
      if ((v53 & 0x8000000000000000) != 0)
      {
        if (a1 < a3)
          goto LABEL_78;
        if (a1 >= a4)
        {
          if (a1 >= a5)
            goto LABEL_104;
          goto LABEL_78;
        }
        goto LABEL_41;
      }
      v89 = v55 >> 63;
      if (a1 < a3)
        goto LABEL_79;
      goto LABEL_49;
    }
LABEL_23:
    v89 = v55 >> 63;
    if ((v51 & 0x8000000000000000) == 0)
    {
      if ((v53 & 0x8000000000000000) == 0)
      {
        if (a1 >= a3)
        {
          if (a1 >= a4)
          {
            if (a1 >= a5 || v47 < 0 == v49 < 0)
            {
              v86 = 1;
              if (a9 != a15 || v91 || !v41)
                goto LABEL_82;
              goto LABEL_126;
            }
          }
          else if (v91)
          {
            v56 = v47 < 0;
            v86 = 1;
            if (a1 >= a5 || ((v56 ^ (v49 < 0)) & 1) == 0)
              goto LABEL_82;
            goto LABEL_80;
          }
        }
        v86 = 1;
        goto LABEL_80;
      }
LABEL_39:
      if (a1 < a3)
        goto LABEL_78;
      if (a1 >= a4)
      {
        if (a1 >= a5 || v47 < 0 == v49 < 0)
          goto LABEL_104;
        goto LABEL_78;
      }
LABEL_41:
      if (v91)
        goto LABEL_62;
      goto LABEL_78;
    }
    if ((v53 & 0x8000000000000000) != 0)
      goto LABEL_39;
    if (a1 < a3)
      goto LABEL_79;
LABEL_49:
    if (a1 < a4)
    {
      if (v91)
        goto LABEL_51;
      goto LABEL_79;
    }
LABEL_53:
    if (a1 >= a5 || v47 < 0 == v49 < 0)
    {
      HIDWORD(v86) = 1;
      if (a9 != a15 || v91)
        goto LABEL_117;
      v60 = !v41;
LABEL_106:
      LODWORD(v86) = 1;
      if (v60)
        goto LABEL_82;
      goto LABEL_126;
    }
LABEL_79:
    v86 = 0x100000001;
    goto LABEL_80;
  }
  if (v49 < 0)
    goto LABEL_23;
  if ((v51 & 0x8000000000000000) != 0)
  {
    if ((v53 & 0x8000000000000000) == 0)
    {
      v89 = v55 >> 63;
      if (a1 < a3)
        goto LABEL_79;
      if (a1 < a4)
      {
        if (!v91)
        {
          v57 = a9 == a15 && v41;
          goto LABEL_125;
        }
LABEL_51:
        v58 = v47 < 0;
        HIDWORD(v86) = 1;
        if (a1 < a5)
        {
          v59 = v58 ^ (v49 < 0);
          goto LABEL_64;
        }
LABEL_117:
        LODWORD(v86) = 1;
        goto LABEL_82;
      }
      goto LABEL_53;
    }
    if (a1 >= a3)
    {
      if (a1 < a4)
      {
        if (!v91)
        {
          v57 = a9 == a15 && v41;
          LODWORD(v89) = 1;
LABEL_125:
          v86 = 0x100000001;
          if (!v57)
            goto LABEL_82;
          goto LABEL_126;
        }
LABEL_62:
        v61 = v47 < 0;
        LODWORD(v89) = 1;
        if (a1 < a5)
        {
          v59 = v61 ^ (v49 < 0);
          HIDWORD(v86) = 1;
LABEL_64:
          LODWORD(v86) = 1;
          if ((v59 & 1) == 0)
            goto LABEL_82;
          goto LABEL_80;
        }
        goto LABEL_118;
      }
LABEL_104:
      LODWORD(v89) = 1;
      if (a9 == a15 && !v91)
      {
        v60 = !v41;
        HIDWORD(v86) = 1;
        goto LABEL_106;
      }
LABEL_118:
      v86 = 0x100000001;
      goto LABEL_82;
    }
LABEL_78:
    LODWORD(v89) = 1;
    goto LABEL_79;
  }
  if ((v53 & 0x8000000000000000) == 0)
  {
    v89 = v55 >> 63;
    if (a1 >= a3)
      goto LABEL_15;
LABEL_22:
    v86 = 0;
LABEL_80:
    sub_21437CB1C(a1 + 1, a2, a3, a4, a5, a6, a7 & 1, a8, a9, v44, v95, v99, a13, a14, a15, a16, *(_QWORD *)&a17, a18);
    goto LABEL_81;
  }
  if (a1 < a3)
    goto LABEL_58;
  if (a1 < a4)
  {
    LODWORD(v89) = 1;
    v86 = 0x100000000;
    if (((a9 == a15) & ~v91 & v41) == 0)
      goto LABEL_82;
LABEL_126:
    v85 = a3;
    v73 = (_QWORD *)(a6 + 16);
    swift_beginAccess();
    v74 = *(_QWORD *)(a6 + 16);
    if (*(_QWORD *)(v74 + 16))
    {
      v82 = v41;
      v84 = a5;
      v75 = (_QWORD *)(a6 + 24);
      v76 = *(_QWORD **)(a6 + 24);
      swift_bridgeObjectRetain();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)(a6 + 24) = v76;
      v83 = a4;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v76 = sub_21422423C(0, v76[2] + 1, 1, v76);
        *v75 = v76;
      }
      v79 = v76[2];
      v78 = v76[3];
      if (v79 >= v78 >> 1)
        *v75 = sub_21422423C((_QWORD *)(v78 > 1), v79 + 1, 1, v76);
      v80 = sub_2143DD2C0(v79, v74);
      nullsub_1(v80, v81);
      *v73 = MEMORY[0x24BEE4AF8];
      swift_bridgeObjectRelease();
      a4 = v83;
      a5 = v84;
      a3 = v85;
      a7 = v94;
      v43 = (float64x2_t)v99;
      v41 = v82;
      goto LABEL_82;
    }
    *v73 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRelease();
    a3 = v85;
    a7 = v94;
LABEL_81:
    v43 = (float64x2_t)v99;
    goto LABEL_82;
  }
LABEL_120:
  LODWORD(v86) = 0;
  LODWORD(v89) = 1;
  if (a9 != a15 || v91)
  {
    HIDWORD(v86) = 1;
    goto LABEL_82;
  }
  HIDWORD(v86) = 1;
  if (v41)
    goto LABEL_126;
LABEL_82:
  v62 = a7;
  v63 = a5;
  v64 = v41;
  v65 = v62 & 1;
  sub_21437C614(a6, v62 & 1, v43, a17);
  if (a1 >= a3)
  {
    v68 = (float64x2_t)v101;
    v69 = v64;
    v66 = v63;
    v67 = v94;
    if (a1 < a4 && (!v91 || !v69) && v86 == 1 || a1 < v66 && v88 < 0 != v97 < 0)
    {
      sub_21437CB1C(a1 + 1, a2, a3, a4, v66, a6, v94 & 1, a8, v95, v99, v35, v101, a13, a14, a15, a16, *(_QWORD *)&a17, a18);
      v68 = (float64x2_t)v101;
    }
    sub_21437C614(a6, v94 & 1, v68, a17);
    if ((a1 >= a4 || v69 && v92 || HIDWORD(v86) != 1) && (a1 >= v66 || v97 < 0 == v90 < 0))
    {
      result = sub_21437C614(a6, v94 & 1, (float64x2_t)v100, a17);
      v71 = v93;
      goto LABEL_98;
    }
  }
  else
  {
    v66 = v63;
    sub_21437CB1C(a1 + 1, a2, a3, a4, v63, a6, v65, a8, v95, v99, v35, v101, a13, a14, a15, a16, *(_QWORD *)&a17, a18);
    sub_21437C614(a6, v65, (float64x2_t)v101, a17);
    v67 = v94;
  }
  v70 = v35;
  v71 = v93;
  sub_21437CB1C(a1 + 1, a2, a3, a4, v66, a6, v67 & 1, a8, v70, v101, v93, v100, a13, a14, a15, a16, *(_QWORD *)&a17, a18);
  result = sub_21437C614(a6, v67 & 1, (float64x2_t)v100, a17);
  if (a1 < a3)
    return sub_21437CB1C(a1 + 1, a2, a3, a4, v66, a6, v67 & 1, a8, v71, v100, a11, (__n128)a12, a13, a14, a15, a16, *(_QWORD *)&a17, a18);
LABEL_98:
  if (a1 < a4 && !v92 && ((v89 ^ 1) & 1) == 0 || a1 < v66 && v87 < 0 != v90 < 0)
    return sub_21437CB1C(a1 + 1, a2, a3, a4, v66, a6, v67 & 1, a8, v71, v100, a11, (__n128)a12, a13, a14, a15, a16, *(_QWORD *)&a17, a18);
  return result;
}

_QWORD *sub_21437D614(uint64_t a1, uint64_t a2, char a3, uint64_t a4, _QWORD *a5, __n128 a6, __n128 a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  float64x2_t v17;
  double v18;
  float64x2_t v19;
  char v20;
  unint64_t v21;
  unint64_t v22;
  float64x2_t v24;
  float64x2_t v25;

  v12 = swift_allocObject();
  v13 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v12 + 16) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v12 + 24) = v13;
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = 0x78ABBF7B5AEAE776;
  if (__OFADD__(a2, 4))
  {
    __break(1u);
LABEL_9:
    a5 = sub_21422423C(0, a5[2] + 1, 1, a5);
    goto LABEL_4;
  }
  v15 = v14;
  v16 = ((double (*)(__n128))a4)(a6);
  *(_QWORD *)&v17.f64[0] = a6.n128_u64[0];
  v17.f64[1] = v16;
  v24 = v17;
  v18 = ((double (*)(__n128))a4)(a7);
  *(_QWORD *)&v19.f64[0] = a7.n128_u64[0];
  v19.f64[1] = v18;
  v25 = v19;
  v20 = a3 & 1;
  sub_21437C614(v12, v20, v24, 0.190983006);
  sub_21437CB1C(1, v15, a1, a2, a2 + 4, v12, v20, (void (*)(void))a4, a6.n128_f64[0], v24, a7.n128_f64[0], v25, 0.00137046525, 20.0, a6.n128_f64[0], a7.n128_f64[0], 0.190983006, (uint64_t)a5);
  sub_21437C614(v12, v20, v25, 0.190983006);
  swift_beginAccess();
  a4 = *(_QWORD *)(v12 + 16);
  a5 = *(_QWORD **)(v12 + 24);
  if (!*(_QWORD *)(a4 + 16))
    goto LABEL_7;
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    goto LABEL_9;
LABEL_4:
  v22 = a5[2];
  v21 = a5[3];
  if (v22 >= v21 >> 1)
    a5 = sub_21422423C((_QWORD *)(v21 > 1), v22 + 1, 1, a5);
  a5[2] = v22 + 1;
  a5[v22 + 4] = a4;
  *(_QWORD *)(v12 + 24) = a5;
LABEL_7:
  *(_QWORD *)(v12 + 16) = v13;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_release();
  swift_release();
  return a5;
}

void sub_21437D844(double a1, double a2, double a3, double a4, double a5, double a6, double a7, uint64_t a8, double (*a9)(double), uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14)
{
  double v15;
  double v16;
  unint64_t v26;
  double v27;
  long double v28;
  double v29;
  long double v30;

  v15 = a1 + -0.03;
  v16 = a1 + 0.03;
  if (a1 + -0.03 > a1 + 0.03)
  {
    __break(1u);
    goto LABEL_7;
  }
  swift_beginAccess();
  if ((~COERCE__INT64(v16 - v15) & 0x7FF0000000000000) == 0)
  {
LABEL_7:
    __break(1u);
    return;
  }
  v26 = sub_21437C038(0x20000000000001uLL);
  v27 = v15 + (v16 - v15) * ((double)v26 * 1.11022302e-16);
  if (v26 == 0x20000000000000)
    v27 = v16;
  v28 = a9((a3 - a2) * v27 + a2);
  v30 = v29;
  sub_21421EA28(a11, a12, v28, a4, a5);
  sub_21421EA28(a13, a14, v30, a6, a7);
}

uint64_t sub_21437D9A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, double (*a8)(double), double a9, float64x2_t a10, double a11, float64x2_t a12, double a13, float64_t a14, double a15, double a16, double a17, uint64_t a18, uint64_t a19, char a20,double a21,double a22,uint64_t a23,char a24,double a25,double a26)
{
  uint64_t v35;
  double v36;
  __n128 v37;
  double v38;
  __n128 v39;
  double v40;
  __n128 v41;
  float64x2_t v42;
  uint64_t v43;
  uint64_t v44;
  float64x2_t v45;
  _BOOL4 v46;
  float64x2_t v47;
  _BOOL4 v48;
  float64x2_t v49;
  float64x2_t v50;
  int64x2_t v51;
  uint64_t v52;
  int64x2_t v53;
  uint64_t v54;
  int64x2_t v55;
  unint64_t v56;
  int64x2_t v57;
  uint64_t v58;
  int64x2_t v59;
  unint64_t v60;
  uint64_t v61;
  _BOOL4 v62;
  BOOL v63;
  BOOL v64;
  char v65;
  BOOL v66;
  BOOL v67;
  double v68;
  uint64_t v69;
  _QWORD *v71;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  _QWORD *v75;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  _BOOL4 v86;
  uint64_t v87;
  double v88;
  double v89;
  double v90;
  uint64_t v92;
  char v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  uint64_t v99;
  double (*v102)(double);
  __n128 v104;
  __n128 v105;
  __n128 v106;

  v35 = a18;
  swift_retain_n();
  sub_21437D844(0.25, a9, a11, a21, a22, a25, a26, a2, a8, a18, a19, a20, a23, a24);
  v88 = v36;
  v104 = v37;
  sub_21437D844(0.5, a9, a11, a21, a22, a25, a26, a2, a8, a18, a19, a20, a23, a24);
  v89 = v38;
  v106 = v39;
  sub_21437D844(0.75, a9, a11, a21, a22, a25, a26, a2, a8, a18, a19, a20, a23, a24);
  v90 = v40;
  v105 = v41;
  v102 = a8;
  if (sub_21437CA18(a10, (float64x2_t)v104, (float64x2_t)v106, a13, a14))
  {
    swift_retain();
    sub_21437D844(0.25, a9, a11, a21, a22, a25, a26, a2, a8, a18, a19, a20, a23, a24);
    v96 = v42;
    swift_release();
    v86 = sub_21437CA18(a10, v96, (float64x2_t)v106, a13, a14);
  }
  else
  {
    v86 = 0;
  }
  v43 = a19;
  v44 = a6;
  if (sub_21437CA18((float64x2_t)v104, (float64x2_t)v106, (float64x2_t)v105, a13, a14))
  {
    swift_retain();
    sub_21437D844(0.5, a9, a11, a21, a22, a25, a26, a2, v102, a18, a19, a20, a23, a24);
    v97 = v45;
    swift_release();
    v46 = sub_21437CA18((float64x2_t)v104, v97, (float64x2_t)v105, a13, a14);
  }
  else
  {
    v46 = 0;
  }
  if (sub_21437CA18((float64x2_t)v106, (float64x2_t)v105, a12, a13, a14))
  {
    swift_retain();
    sub_21437D844(0.75, a9, a11, a21, a22, a25, a26, a2, v102, a18, a19, a20, a23, a24);
    v98 = v47;
    swift_release();
    v48 = sub_21437CA18((float64x2_t)v106, v98, a12, a13, a14);
  }
  else
  {
    v48 = 0;
  }
  v49 = (float64x2_t)v104;
  v50 = (float64x2_t)vdupq_n_s64(0x7FF0000000000000uLL);
  v51 = (int64x2_t)vbicq_s8(vorrq_s8((int8x16_t)vcltzq_f64(a10), (int8x16_t)vcgezq_f64(a10)), (int8x16_t)vceqq_f64(vabsq_f64(a10), v50));
  v52 = vandq_s8((int8x16_t)vdupq_laneq_s64(v51, 1), (int8x16_t)v51).u64[0];
  v53 = (int64x2_t)vbicq_s8(vorrq_s8((int8x16_t)vcltzq_f64((float64x2_t)v104), (int8x16_t)vcgezq_f64((float64x2_t)v104)), (int8x16_t)vceqq_f64(vabsq_f64((float64x2_t)v104), v50));
  v54 = vandq_s8((int8x16_t)vdupq_laneq_s64(v53, 1), (int8x16_t)v53).u64[0];
  v55 = (int64x2_t)vbicq_s8(vorrq_s8((int8x16_t)vcltzq_f64((float64x2_t)v106), (int8x16_t)vcgezq_f64((float64x2_t)v106)), (int8x16_t)vceqq_f64(vabsq_f64((float64x2_t)v106), v50));
  v56 = vandq_s8((int8x16_t)vdupq_laneq_s64(v55, 1), (int8x16_t)v55).u64[0];
  v57 = (int64x2_t)vbicq_s8(vorrq_s8((int8x16_t)vcltzq_f64((float64x2_t)v105), (int8x16_t)vcgezq_f64((float64x2_t)v105)), (int8x16_t)vceqq_f64(vabsq_f64((float64x2_t)v105), v50));
  v58 = vandq_s8((int8x16_t)vdupq_laneq_s64(v57, 1), (int8x16_t)v57).u64[0];
  v59 = (int64x2_t)vbicq_s8(vorrq_s8((int8x16_t)vcltzq_f64(a12), (int8x16_t)vcgezq_f64(a12)), (int8x16_t)vceqq_f64(vabsq_f64(a12), v50));
  v60 = vandq_s8((int8x16_t)vdupq_laneq_s64(v59, 1), (int8x16_t)v59).u64[0];
  v61 = v60;
  v99 = a3;
  v92 = v44;
  v87 = v56;
  v84 = v54;
  if (v52 < 0)
  {
    if ((v54 & 0x8000000000000000) == 0)
    {
      if ((v56 & 0x8000000000000000) == 0)
      {
        if (v58 < 0)
        {
          if (a1 < a3)
            goto LABEL_57;
          if (a1 >= a4)
          {
            if (a1 >= a5)
              goto LABEL_118;
LABEL_57:
            LODWORD(v85) = 1;
            v83 = 0x100000000;
            goto LABEL_79;
          }
          v83 = 0x100000000;
          LODWORD(v85) = 1;
          if (v86 && a1 >= a5)
            goto LABEL_80;
        }
        else
        {
          v85 = v60 >> 63;
          if (a1 < a3)
          {
LABEL_22:
            v83 = 0;
            goto LABEL_79;
          }
          if (a1 >= a4)
          {
            if (a1 >= a5)
            {
LABEL_15:
              HIDWORD(v83) = 0;
              if (a9 != a15 || v86)
              {
                LODWORD(v83) = 0;
                goto LABEL_80;
              }
              LODWORD(v83) = 0;
              if (!v46)
                goto LABEL_80;
LABEL_124:
              v95 = a7;
              v71 = (_QWORD *)(v44 + 16);
              swift_beginAccess();
              v72 = *(_QWORD *)(v44 + 16);
              if (*(_QWORD *)(v72 + 16))
              {
                v75 = *(_QWORD **)(v44 + 24);
                v74 = (_QWORD *)(v44 + 24);
                v73 = v75;
                swift_bridgeObjectRetain();
                isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                *v74 = v75;
                if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                {
                  v73 = sub_21422423C(0, v73[2] + 1, 1, v73);
                  *v74 = v73;
                }
                v78 = v73[2];
                v77 = v73[3];
                if (v78 >= v77 >> 1)
                  *v74 = sub_21422423C((_QWORD *)(v77 > 1), v78 + 1, 1, v73);
                v79 = sub_2143DD2C0(v78, v72);
                nullsub_1(v79, v80);
                *v71 = MEMORY[0x24BEE4AF8];
                swift_bridgeObjectRelease();
                v44 = v92;
                a3 = v99;
                a7 = v95;
                v43 = a19;
              }
              else
              {
                *v71 = MEMORY[0x24BEE4AF8];
                swift_bridgeObjectRelease();
                a7 = v95;
              }
              v35 = a18;
              v49 = (float64x2_t)v104;
              goto LABEL_80;
            }
            goto LABEL_22;
          }
          v83 = 0;
          if (v86 && a1 >= a5)
            goto LABEL_80;
        }
LABEL_79:
        swift_retain();
        sub_21437D9A8(a1 + 1, a2, a3, a4, a5, v44, a7 & 1, v102, a9, (__n128)a10, v88, v104, a13, a14, a15, a16, *(_QWORD *)&a17, a18, a19,
          a20,
          *(_QWORD *)&a21,
          *(_QWORD *)&a22,
          a23,
          a24,
          *(_QWORD *)&a25,
          *(_QWORD *)&a26);
        swift_release();
        v49 = (float64x2_t)v104;
        goto LABEL_80;
      }
      if (v58 < 0)
      {
        if (a1 < a3)
          goto LABEL_77;
        if (a1 >= a4)
        {
          if (a1 >= a5)
            goto LABEL_102;
          goto LABEL_77;
        }
        goto LABEL_39;
      }
      v85 = v60 >> 63;
      goto LABEL_47;
    }
LABEL_23:
    v85 = v60 >> 63;
    if ((v56 & 0x8000000000000000) == 0)
    {
      if ((v58 & 0x8000000000000000) == 0)
      {
        if (a1 >= a3)
        {
          if (a1 >= a4)
          {
            if (a1 >= a5 || v52 < 0 == v54 < 0)
            {
              v83 = 1;
              if (a9 != a15 || v86 || !v46)
                goto LABEL_80;
              goto LABEL_124;
            }
          }
          else if (v86)
          {
            v62 = v52 < 0;
            v83 = 1;
            if (a1 >= a5 || ((v62 ^ (v54 < 0)) & 1) == 0)
              goto LABEL_80;
            goto LABEL_79;
          }
        }
        v83 = 1;
        goto LABEL_79;
      }
      goto LABEL_37;
    }
    if (v58 < 0)
    {
LABEL_37:
      if (a1 < a3)
        goto LABEL_77;
      if (a1 >= a4)
      {
        if (a1 >= a5 || v52 < 0 == v54 < 0)
          goto LABEL_102;
        goto LABEL_77;
      }
LABEL_39:
      if (v86)
        goto LABEL_61;
      goto LABEL_77;
    }
LABEL_47:
    if (a1 < a3)
      goto LABEL_78;
    if (a1 < a4)
    {
      if (v86)
        goto LABEL_50;
      goto LABEL_78;
    }
LABEL_52:
    if (a1 >= a5 || v52 < 0 == v54 < 0)
    {
      HIDWORD(v83) = 1;
      if (a9 != a15 || v86)
        goto LABEL_115;
      v66 = !v46;
LABEL_104:
      LODWORD(v83) = 1;
      if (v66)
        goto LABEL_80;
      goto LABEL_124;
    }
LABEL_78:
    v83 = 0x100000001;
    goto LABEL_79;
  }
  if (v54 < 0)
    goto LABEL_23;
  if ((v56 & 0x8000000000000000) != 0)
  {
    if ((v58 & 0x8000000000000000) == 0)
    {
      v85 = v60 >> 63;
      if (a1 < a3)
        goto LABEL_78;
      if (a1 < a4)
      {
        if (!v86)
        {
          v63 = a9 == a15 && v46;
          goto LABEL_123;
        }
LABEL_50:
        v64 = v52 < 0;
        HIDWORD(v83) = 1;
        if (a1 < a5)
        {
          v65 = v64 ^ (v54 < 0);
          goto LABEL_63;
        }
LABEL_115:
        LODWORD(v83) = 1;
        goto LABEL_80;
      }
      goto LABEL_52;
    }
    if (a1 >= a3)
    {
      if (a1 < a4)
      {
        if (!v86)
        {
          v63 = a9 == a15 && v46;
          LODWORD(v85) = 1;
LABEL_123:
          v83 = 0x100000001;
          if (!v63)
            goto LABEL_80;
          goto LABEL_124;
        }
LABEL_61:
        v67 = v52 < 0;
        LODWORD(v85) = 1;
        if (a1 < a5)
        {
          v65 = v67 ^ (v54 < 0);
          HIDWORD(v83) = 1;
LABEL_63:
          LODWORD(v83) = 1;
          if ((v65 & 1) == 0)
            goto LABEL_80;
          goto LABEL_79;
        }
        goto LABEL_116;
      }
LABEL_102:
      LODWORD(v85) = 1;
      if (a9 == a15 && !v86)
      {
        v66 = !v46;
        HIDWORD(v83) = 1;
        goto LABEL_104;
      }
LABEL_116:
      v83 = 0x100000001;
      goto LABEL_80;
    }
LABEL_77:
    LODWORD(v85) = 1;
    goto LABEL_78;
  }
  if ((v58 & 0x8000000000000000) == 0)
  {
    v85 = v60 >> 63;
    if (a1 >= a3)
      goto LABEL_15;
    goto LABEL_22;
  }
  if (a1 < a3)
    goto LABEL_57;
  if (a1 < a4)
  {
    LODWORD(v85) = 1;
    v83 = 0x100000000;
    if (((a9 == a15) & ~v86 & v46) == 0)
      goto LABEL_80;
    goto LABEL_124;
  }
LABEL_118:
  LODWORD(v83) = 0;
  LODWORD(v85) = 1;
  if (a9 != a15 || v86)
  {
    HIDWORD(v83) = 1;
    goto LABEL_80;
  }
  HIDWORD(v83) = 1;
  if (v46)
    goto LABEL_124;
LABEL_80:
  sub_21437C614(v44, a7 & 1, v49, a17);
  if (a1 >= a3)
  {
    v68 = a16;
    if (a1 < a4 && (!v86 || !v46) && v83 == 1 || a1 < a5 && v84 < 0 != v87 < 0)
    {
      swift_retain();
      LOBYTE(v82) = a24;
      LOBYTE(v81) = a20;
      a3 = v99;
      sub_21437D9A8(a1 + 1, a2, v99, a4, a5, v92, a7 & 1, v102, v88, v104, v89, v106, a13, a14, a15, a16, *(_QWORD *)&a17, v35, v43,
        v81,
        *(_QWORD *)&a21,
        *(_QWORD *)&a22,
        a23,
        v82,
        *(_QWORD *)&a25,
        *(_QWORD *)&a26);
      swift_release();
    }
    sub_21437C614(v92, a7 & 1, (float64x2_t)v106, a17);
    if ((a1 >= a4 || v46 && v48 || HIDWORD(v83) != 1) && (a1 >= a5 || v87 < 0 == v58 < 0))
    {
      sub_21437C614(v92, a7 & 1, (float64x2_t)v105, a17);
      v69 = a4;
      goto LABEL_96;
    }
  }
  else
  {
    swift_retain();
    LOBYTE(v82) = a24;
    LOBYTE(v81) = a20;
    v68 = a16;
    sub_21437D9A8(a1 + 1, a2, v99, a4, a5, v44, a7 & 1, v102, v88, v104, v89, v106, a13, a14, a15, a16, *(_QWORD *)&a17, v35, v43,
      v81,
      *(_QWORD *)&a21,
      *(_QWORD *)&a22,
      a23,
      v82,
      *(_QWORD *)&a25,
      *(_QWORD *)&a26);
    swift_release();
    sub_21437C614(v44, a7 & 1, (float64x2_t)v106, a17);
  }
  swift_retain();
  LOBYTE(v82) = a24;
  LOBYTE(v81) = a20;
  sub_21437D9A8(a1 + 1, a2, v99, a4, a5, v92, a7 & 1, v102, v89, v106, v90, v105, a13, a14, a15, v68, *(_QWORD *)&a17, v35, v43,
    v81,
    *(_QWORD *)&a21,
    *(_QWORD *)&a22,
    a23,
    v82,
    *(_QWORD *)&a25,
    *(_QWORD *)&a26);
  swift_release();
  v69 = a4;
  a3 = v99;
  sub_21437C614(v92, a7 & 1, (float64x2_t)v105, a17);
  if (a1 < v99)
  {
LABEL_100:
    swift_retain();
    LOBYTE(v82) = a24;
    LOBYTE(v81) = a20;
    sub_21437D9A8(a1 + 1, a2, a3, v69, a5, v92, a7 & 1, v102, v90, v105, a11, (__n128)a12, a13, a14, a15, v68, *(_QWORD *)&a17, v35, v43,
      v81,
      *(_QWORD *)&a21,
      *(_QWORD *)&a22,
      a23,
      v82,
      *(_QWORD *)&a25,
      *(_QWORD *)&a26);
    swift_release();
    return swift_release_n();
  }
LABEL_96:
  if (a1 < v69 && !v48 && ((v85 ^ 1) & 1) == 0 || a1 < a5 && v61 < 0 != v58 < 0)
    goto LABEL_100;
  return swift_release_n();
}

_QWORD *sub_21437E808(uint64_t a1, uint64_t a2, char a3, uint64_t a4, _QWORD *a5, uint64_t a6, char a7, uint64_t a8, double a9, double a10, double a11, double a12, double a13, double a14, char a15)
{
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  long double v32;
  double v33;
  long double v34;
  long double v35;
  float64x2_t v36;
  long double v37;
  double v38;
  long double v39;
  long double v40;
  float64x2_t v41;
  char v42;
  double (*v43)(double);
  uint64_t v44;
  char v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v49;
  uint64_t v50;
  long double v51;
  float64x2_t v52;
  long double v53;
  float64x2_t v54;

  v29 = swift_allocObject();
  v30 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v29 + 16) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v29 + 24) = v30;
  v31 = swift_allocObject();
  *(_QWORD *)(v31 + 16) = 0x78ABBF7B5AEAE776;
  if (__OFADD__(a2, 4))
  {
    __break(1u);
LABEL_9:
    a5 = sub_21422423C(0, a5[2] + 1, 1, a5);
    goto LABEL_4;
  }
  v50 = v31;
  v49 = a2 + 4;
  v32 = ((double (*)(double))a4)(a9);
  v34 = v33;
  v53 = sub_21421EA28(a6, a7, v32, a11, a12);
  v35 = sub_21421EA28(a8, a15, v34, a13, a14);
  v36.f64[0] = v53;
  v36.f64[1] = v35;
  v54 = v36;
  v37 = ((double (*)(double))a4)(a10);
  v39 = v38;
  v51 = sub_21421EA28(a6, a7, v37, a11, a12);
  v40 = sub_21421EA28(a8, a15, v39, a13, a14);
  v41.f64[0] = v51;
  v41.f64[1] = v40;
  v52 = v41;
  v42 = a3;
  v43 = (double (*)(double))a4;
  v44 = a2;
  v45 = v42 & 1;
  sub_21437C614(v29, v42 & 1, v54, 0.190983006);
  sub_21437D9A8(1, v50, a1, v44, v49, v29, v45, v43, a9, v54, a10, v52, 0.00137046525, 20.0, a9, a10, 0.190983006, (uint64_t)a5, a6,
    a7,
    a11,
    a12,
    a8,
    a15,
    a13,
    a14);
  sub_21437C614(v29, v45, v52, 0.190983006);
  swift_beginAccess();
  a4 = *(_QWORD *)(v29 + 16);
  a5 = *(_QWORD **)(v29 + 24);
  if (!*(_QWORD *)(a4 + 16))
    goto LABEL_7;
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    goto LABEL_9;
LABEL_4:
  v47 = a5[2];
  v46 = a5[3];
  if (v47 >= v46 >> 1)
    a5 = sub_21422423C((_QWORD *)(v46 > 1), v47 + 1, 1, a5);
  a5[2] = v47 + 1;
  a5[v47 + 4] = a4;
  *(_QWORD *)(v29 + 24) = a5;
LABEL_7:
  *(_QWORD *)(v29 + 16) = MEMORY[0x24BEE4AF8];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_release();
  swift_release();
  return a5;
}

uint64_t sub_21437EB14()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_21437EB40()
{
  return swift_deallocObject();
}

void sub_21437EB50(uint64_t a1, uint64_t a2, double (*a3)(uint64_t, double, double))
{
  unint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  double *v9;
  double *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  double v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  int64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v33;

  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a2 + 16);
  if (v6 >= v5)
    v7 = *(_QWORD *)(a1 + 16);
  else
    v7 = *(_QWORD *)(a2 + 16);
  v33 = MEMORY[0x24BEE4AF8];
  sub_2141D3AA0(0, v7, 0);
  v27 = v6;
  v29 = a2;
  v30 = a1;
  v28 = v5;
  v26 = v7;
  if (v7)
  {
    v8 = v5;
    v9 = (double *)(a1 + 32);
    v10 = (double *)(a2 + 32);
    swift_bridgeObjectRetain();
    v11 = swift_bridgeObjectRetain();
    v12 = v6;
    v13 = v8;
    while (v13)
    {
      if (!v12)
        goto LABEL_26;
      v14 = a3(v11, *v9, *v10);
      v16 = *(_QWORD *)(v33 + 16);
      v15 = *(_QWORD *)(v33 + 24);
      if (v16 >= v15 >> 1)
        v11 = (uint64_t)sub_2141D3AA0((char *)(v15 > 1), v16 + 1, 1);
      --v12;
      *(_QWORD *)(v33 + 16) = v16 + 1;
      *(double *)(v33 + 8 * v16 + 32) = v14;
      --v13;
      ++v10;
      ++v9;
      if (!--v7)
        goto LABEL_13;
    }
    __break(1u);
LABEL_26:
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
    v11 = swift_bridgeObjectRetain();
LABEL_13:
    if (v28 <= v27)
    {
LABEL_24:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return;
    }
    v17 = 0;
    if (v26 <= v27)
      v18 = v27;
    else
      v18 = v26;
    v31 = v18 - v26;
    v19 = v28 - v26;
    v20 = 8 * v26 + 32;
    v21 = v30 + v20;
    v22 = v29 + v20;
    while (v19 != v17)
    {
      if (v27 - v26 == v17)
        goto LABEL_24;
      if (v31 == v17)
        goto LABEL_28;
      v23 = a3(v11, *(double *)(v21 + 8 * v17), *(double *)(v22 + 8 * v17));
      v25 = *(_QWORD *)(v33 + 16);
      v24 = *(_QWORD *)(v33 + 24);
      if (v25 >= v24 >> 1)
        v11 = (uint64_t)sub_2141D3AA0((char *)(v24 > 1), v25 + 1, 1);
      *(_QWORD *)(v33 + 16) = v25 + 1;
      *(double *)(v33 + 8 * v25 + 32) = v23;
      if (v19 == ++v17)
        goto LABEL_24;
    }
  }
  __break(1u);
LABEL_28:
  __break(1u);
}

char *sub_21437ED88(char *result, char a2, uint64_t a3, char a4, double (*a5)(double), double a6, double a7)
{
  double v7;
  uint64_t v11;
  double v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  int64_t v31;
  uint64_t v32;
  char *v33;
  BOOL v34;
  double v35;
  double v36;
  int64_t v37;
  double v38;
  double v39;
  double v41;
  double v43;
  double v44;
  double v45;
  BOOL v46;
  double v49;
  double v50;
  double v51;
  char v54;
  char *v56;

  v54 = (char)result;
  v7 = a7 - a6;
  if ((~COERCE__INT64(a7 - a6) & 0x7FF0000000000000) == 0)
    goto LABEL_86;
  v11 = 0;
  v12 = v7 / 12300.0;
  v13 = (char *)MEMORY[0x24BEE4AF8];
  v14 = 0x78ABBF7B5AEAE776;
  do
  {
    v16 = v14 - 0x61C8864680B583EBLL;
    v17 = 0xBF58476D1CE4E5B9 * ((v14 - 0x61C8864680B583EBLL) ^ ((unint64_t)(v14 - 0x61C8864680B583EBLL) >> 30));
    v18 = (0x94D049BB133111EBLL * (v17 ^ (v17 >> 27))) ^ ((0x94D049BB133111EBLL * (v17 ^ (v17 >> 27))) >> 31);
    if (0x20000000000001 * v18 >= 0x1FFFFFFFFFF801)
    {
      v22 = (v18 * (unsigned __int128)0x20000000000001uLL) >> 64;
    }
    else
    {
      v19 = v14 + 0x3C6EF372FE94F82ALL;
      do
      {
        v16 -= 0x61C8864680B583EBLL;
        v20 = 0x94D049BB133111EBLL
            * ((0xBF58476D1CE4E5B9 * (v19 ^ (v19 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v19 ^ (v19 >> 30))) >> 27));
        v21 = v20 ^ (v20 >> 31);
        v19 -= 0x61C8864680B583EBLL;
      }
      while (0x20000000000001 * v21 < 0x1FFFFFFFFFF801);
      v22 = (v21 * (unsigned __int128)0x20000000000001uLL) >> 64;
    }
    v14 = v16;
    if (v22 == 0x20000000000000)
      v23 = a7;
    else
      v23 = v7 * ((double)v22 * 1.11022302e-16) + a6;
    v24 = a5(v23);
    v25 = a5(v12 + v23);
    a5(v23 - v12);
    if ((~*(_QWORD *)&v24 & 0x7FF0000000000000) != 0)
    {
      v27 = (v25 - v26) / (v12 + v12);
      if ((~*(_QWORD *)&v27 & 0x7FF0000000000000) != 0)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v13 = sub_214221D0C(0, *((_QWORD *)v13 + 2) + 1, 1, v13);
        v29 = *((_QWORD *)v13 + 2);
        v28 = *((_QWORD *)v13 + 3);
        v30 = v13;
        if (v29 >= v28 >> 1)
          v30 = sub_214221D0C((char *)(v28 > 1), v29 + 1, 1, v13);
        *((_QWORD *)v30 + 2) = v29 + 1;
        v13 = v30;
        v15 = &v30[16 * v29];
        *((double *)v15 + 4) = v24;
        *((double *)v15 + 5) = v27;
      }
    }
    ++v11;
  }
  while (v11 != 200);
  v56 = v13;
  if (*((_QWORD *)v13 + 2) <= 1uLL)
    return (char *)swift_bridgeObjectRelease();
  sub_21437B940(&v56);
  result = v56;
  v31 = *((_QWORD *)v56 + 2);
  if (!v31)
    goto LABEL_87;
  v32 = v31 - 1;
  v33 = v56 + 32;
  v34 = *(double *)&v56[16 * v31 + 16] <= *((double *)v56 + 4) || v31 == 1;
  v35 = a7;
  v36 = a6;
  if (v34)
  {
LABEL_42:
    result = (char *)swift_bridgeObjectRelease();
    if ((v54 & 1) == 0)
      goto LABEL_53;
    if (v35 <= 0.0 || v36 >= 0.0)
    {
      if (v35 <= 0.0 || v36 < 0.0 || v36 >= v35 * 0.5)
      {
        if (v36 * 0.5 < v35 && v35 <= 0.0 && v36 < 0.0)
          v35 = -v36;
        if ((a2 & 1) != 0)
        {
LABEL_54:
          v41 = (v35 - v36) / v7;
          if (v41 > 0.1 && v41 < 1.2)
          {
            if ((a4 & 1) != 0)
            {
              if (v36 == 0.0)
              {
LABEL_63:
                v46 = v36 > v7;
                if (v36 >= v7)
                  return result;
                goto LABEL_79;
              }
              goto LABEL_76;
            }
          }
          else if ((a4 & 1) != 0)
          {
            v43 = (v35 - v36) * 0.05;
            v44 = v36 - v43;
            v45 = v35 + v43;
            v46 = v44 > v45;
            if (v44 >= v45)
              return result;
LABEL_79:
            if (v46)
              goto LABEL_88;
            return result;
          }
          v7 = v7 / *(double *)&a3;
          if (v36 == 0.0)
            goto LABEL_63;
LABEL_76:
          if (v35 != 0.0)
          {
            v49 = (v35 + v36) * 0.5;
            v50 = v49 - v7 * 0.5;
            v51 = v49 + v7 * 0.5;
            v46 = v50 > v51;
            if (v50 >= v51)
              return result;
            goto LABEL_79;
          }
          v36 = -v7;
        }
LABEL_78:
        v46 = v36 > v35;
        if (v36 >= v35)
          return result;
        goto LABEL_79;
      }
    }
    else
    {
      if (fabs(v35 / (v35 - v36) + -0.5) >= 0.15)
        goto LABEL_53;
      if (v35 < -v36)
        v35 = -v36;
    }
    v36 = -v35;
LABEL_53:
    if ((a2 & 1) != 0)
      goto LABEL_54;
    goto LABEL_78;
  }
  v37 = 0;
  v35 = *(double *)&v56[16 * v31 + 16];
  v36 = *((double *)v56 + 4);
  while (1)
  {
    v38 = (v35 - v36) / v7;
    if (v38 > 100000000.0)
    {
      ++v37;
LABEL_33:
      --v32;
      goto LABEL_35;
    }
    if (v37 >= (unint64_t)v31)
      goto LABEL_85;
    v39 = fabs(*(double *)&v33[16 * v37 + 8]) / v38;
    if (v39 > 10.0)
      ++v37;
    if (fabs(*(double *)&v33[16 * v32 + 8]) / v38 > 10.0)
      goto LABEL_33;
    if (v39 <= 10.0)
      goto LABEL_42;
LABEL_35:
    if (v37 >= v31)
      break;
    if (v32 >= v31)
      goto LABEL_84;
    v36 = *(double *)&v33[16 * v37];
    v35 = *(double *)&v33[16 * v32];
    if (v35 <= v36 || v37 >= v32)
    {
      v35 = a7;
      v36 = a6;
      goto LABEL_42;
    }
  }
  __break(1u);
LABEL_84:
  __break(1u);
LABEL_85:
  __break(1u);
LABEL_86:
  __break(1u);
LABEL_87:
  __break(1u);
LABEL_88:
  __break(1u);
  return result;
}

char *sub_21437F27C(char *result, char a2, uint64_t a3, char a4, uint64_t (*a5)(double), double a6, double a7)
{
  double v7;
  uint64_t v11;
  double v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  double v29;
  double v30;
  double v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  int64_t v35;
  uint64_t v36;
  char *v37;
  BOOL v38;
  double v39;
  double v40;
  int64_t v41;
  double v42;
  double v43;
  double v45;
  double v47;
  double v48;
  double v49;
  BOOL v50;
  double v53;
  double v54;
  double v55;
  char v58;
  char *v60;

  v58 = (char)result;
  v7 = a7 - a6;
  if ((~COERCE__INT64(a7 - a6) & 0x7FF0000000000000) == 0)
    goto LABEL_86;
  v11 = 0;
  v12 = v7 / 12300.0;
  v13 = (char *)MEMORY[0x24BEE4AF8];
  v14 = 0x78ABBF7B5AEAE776;
  do
  {
    v16 = v14 - 0x61C8864680B583EBLL;
    v17 = 0xBF58476D1CE4E5B9 * ((v14 - 0x61C8864680B583EBLL) ^ ((unint64_t)(v14 - 0x61C8864680B583EBLL) >> 30));
    v18 = (0x94D049BB133111EBLL * (v17 ^ (v17 >> 27))) ^ ((0x94D049BB133111EBLL * (v17 ^ (v17 >> 27))) >> 31);
    if (0x20000000000001 * v18 >= 0x1FFFFFFFFFF801)
    {
      v22 = (v18 * (unsigned __int128)0x20000000000001uLL) >> 64;
    }
    else
    {
      v19 = v14 + 0x3C6EF372FE94F82ALL;
      do
      {
        v16 -= 0x61C8864680B583EBLL;
        v20 = 0x94D049BB133111EBLL
            * ((0xBF58476D1CE4E5B9 * (v19 ^ (v19 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v19 ^ (v19 >> 30))) >> 27));
        v21 = v20 ^ (v20 >> 31);
        v19 -= 0x61C8864680B583EBLL;
      }
      while (0x20000000000001 * v21 < 0x1FFFFFFFFFF801);
      v22 = (v21 * (unsigned __int128)0x20000000000001uLL) >> 64;
    }
    v14 = v16;
    if (v22 == 0x20000000000000)
      v23 = a7;
    else
      v23 = v7 * ((double)v22 * 1.11022302e-16) + a6;
    v24 = a5(v23);
    v26 = v25;
    v27 = ((uint64_t (*)(uint64_t, double))a5)(v24, v12 + v23);
    v29 = v28;
    ((void (*)(uint64_t, double))a5)(v27, v23 - v12);
    if ((~v26 & 0x7FF0000000000000) != 0)
    {
      v31 = (v29 - v30) / (v12 + v12);
      if ((~*(_QWORD *)&v31 & 0x7FF0000000000000) != 0)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v13 = sub_214221D0C(0, *((_QWORD *)v13 + 2) + 1, 1, v13);
        v33 = *((_QWORD *)v13 + 2);
        v32 = *((_QWORD *)v13 + 3);
        v34 = v13;
        if (v33 >= v32 >> 1)
          v34 = sub_214221D0C((char *)(v32 > 1), v33 + 1, 1, v13);
        *((_QWORD *)v34 + 2) = v33 + 1;
        v13 = v34;
        v15 = &v34[16 * v33];
        *((_QWORD *)v15 + 4) = v26;
        *((double *)v15 + 5) = v31;
      }
    }
    ++v11;
  }
  while (v11 != 200);
  v60 = v13;
  if (*((_QWORD *)v13 + 2) <= 1uLL)
    return (char *)swift_bridgeObjectRelease();
  sub_21437B940(&v60);
  result = v60;
  v35 = *((_QWORD *)v60 + 2);
  if (!v35)
    goto LABEL_87;
  v36 = v35 - 1;
  v37 = v60 + 32;
  v38 = *(double *)&v60[16 * v35 + 16] <= *((double *)v60 + 4) || v35 == 1;
  v39 = a7;
  v40 = a6;
  if (v38)
  {
LABEL_42:
    result = (char *)swift_bridgeObjectRelease();
    if ((v58 & 1) == 0)
      goto LABEL_53;
    if (v39 <= 0.0 || v40 >= 0.0)
    {
      if (v39 <= 0.0 || v40 < 0.0 || v40 >= v39 * 0.5)
      {
        if (v40 * 0.5 < v39 && v39 <= 0.0 && v40 < 0.0)
          v39 = -v40;
        if ((a2 & 1) != 0)
        {
LABEL_54:
          v45 = (v39 - v40) / v7;
          if (v45 > 0.1 && v45 < 1.2)
          {
            if ((a4 & 1) != 0)
            {
              if (v40 == 0.0)
              {
LABEL_63:
                v50 = v40 > v7;
                if (v40 >= v7)
                  return result;
                goto LABEL_79;
              }
              goto LABEL_76;
            }
          }
          else if ((a4 & 1) != 0)
          {
            v47 = (v39 - v40) * 0.05;
            v48 = v40 - v47;
            v49 = v39 + v47;
            v50 = v48 > v49;
            if (v48 >= v49)
              return result;
LABEL_79:
            if (v50)
              goto LABEL_88;
            return result;
          }
          v7 = v7 / *(double *)&a3;
          if (v40 == 0.0)
            goto LABEL_63;
LABEL_76:
          if (v39 != 0.0)
          {
            v53 = (v39 + v40) * 0.5;
            v54 = v53 - v7 * 0.5;
            v55 = v53 + v7 * 0.5;
            v50 = v54 > v55;
            if (v54 >= v55)
              return result;
            goto LABEL_79;
          }
          v40 = -v7;
        }
LABEL_78:
        v50 = v40 > v39;
        if (v40 >= v39)
          return result;
        goto LABEL_79;
      }
    }
    else
    {
      if (fabs(v39 / (v39 - v40) + -0.5) >= 0.15)
        goto LABEL_53;
      if (v39 < -v40)
        v39 = -v40;
    }
    v40 = -v39;
LABEL_53:
    if ((a2 & 1) != 0)
      goto LABEL_54;
    goto LABEL_78;
  }
  v41 = 0;
  v39 = *(double *)&v60[16 * v35 + 16];
  v40 = *((double *)v60 + 4);
  while (1)
  {
    v42 = (v39 - v40) / v7;
    if (v42 > 100000000.0)
    {
      ++v41;
LABEL_33:
      --v36;
      goto LABEL_35;
    }
    if (v41 >= (unint64_t)v35)
      goto LABEL_85;
    v43 = fabs(*(double *)&v37[16 * v41 + 8]) / v42;
    if (v43 > 10.0)
      ++v41;
    if (fabs(*(double *)&v37[16 * v36 + 8]) / v42 > 10.0)
      goto LABEL_33;
    if (v43 <= 10.0)
      goto LABEL_42;
LABEL_35:
    if (v41 >= v35)
      break;
    if (v36 >= v35)
      goto LABEL_84;
    v40 = *(double *)&v37[16 * v41];
    v39 = *(double *)&v37[16 * v36];
    if (v39 <= v40 || v41 >= v36)
    {
      v39 = a7;
      v40 = a6;
      goto LABEL_42;
    }
  }
  __break(1u);
LABEL_84:
  __break(1u);
LABEL_85:
  __break(1u);
LABEL_86:
  __break(1u);
LABEL_87:
  __break(1u);
LABEL_88:
  __break(1u);
  return result;
}

uint64_t sub_21437F770(double (*a1)(double), double a2)
{
  double v4;
  double v5;
  uint64_t v6;
  double v7;
  double v8;
  double v9;
  double v10;

  v4 = 0.674730544;
  v5 = a1(a2 + 0.674730544);
  if (vabdd_f64(v5, a1(0.674730544)) < 0.000001)
  {
    v6 = 0;
    do
    {
      v7 = a1(a2 + a2 + v4);
      if (vabdd_f64(v7, a1(v4)) >= 0.000001)
        break;
      v8 = a1(a2 * 3.0 + v4);
      if (vabdd_f64(v8, a1(v4)) >= 0.000001)
        break;
      v9 = a1(a2 * 4.0 + v4);
      if (vabdd_f64(v9, a1(v4)) >= 0.000001)
        break;
      if (v6 == 24)
        return 1;
      v4 = *(double *)((char *)&unk_24D17AE48 + v6 + 40);
      v10 = a1(v4 + a2);
      v6 += 8;
    }
    while (vabdd_f64(v10, a1(v4)) < 0.000001);
  }
  return 0;
}

void sub_21437F8AC(double (*a1)(double), double a2, double a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  double v7;
  double v9;
  uint64_t v10;
  long double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  uint64_t v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;

  v5 = a5 - 1;
  if (__OFSUB__(a5, 1))
    goto LABEL_28;
  v7 = a2;
  v9 = a3 / a2;
  v30 = (double)v5;
  v29 = pow(a3 / a2, 2.0 / (double)v5);
  if (a5 < 0)
  {
LABEL_29:
    __break(1u);
  }
  else if (a5)
  {
    v10 = 0;
    v28 = v9;
    do
    {
      if (v10 == a5)
      {
        __break(1u);
LABEL_27:
        __break(1u);
LABEL_28:
        __break(1u);
        goto LABEL_29;
      }
      v11 = pow(v9, (double)v10 / v30) * v7;
      v12 = v11 / v29;
      v13 = v29 * v11;
      if (v11 / v29 > v29 * v11)
        goto LABEL_27;
      v14 = a1(v12 + 0.292048924);
      v15 = a1(0.292048924);
      if (vabdd_f64(v14, v15) >= 1.0e-10)
      {
        v17 = v7;
        v18 = a1(v13 + 0.292048924);
        v19 = a1(0.292048924);
        if (vabdd_f64(v18, v19) >= 1.0e-10)
        {
          v20 = v14 - v15;
          v21 = (v14 - v15) * (v18 - v19);
          v7 = v17;
          v9 = v28;
          if (v21 >= 0.0)
            goto LABEL_5;
          v16 = (v12 + v13) * 0.5;
          v22 = a1(v16 + 0.292048924);
          v23 = a1(0.292048924);
          if (vabdd_f64(v22, v23) >= 1.0e-10)
          {
            v24 = v22 - v23;
            v25 = 40;
            while (--v25)
            {
              if (v20 * v24 < 0.0)
                v13 = v16;
              else
                v12 = v16;
              if (v20 * v24 >= 0.0)
                v20 = v24;
              v16 = (v12 + v13) * 0.5;
              v26 = a1(v16 + 0.292048924);
              v27 = a1(0.292048924);
              v24 = v26 - v27;
              if (vabdd_f64(v26, v27) < 1.0e-10)
                goto LABEL_22;
            }
            goto LABEL_5;
          }
        }
        else
        {
          v16 = v13;
          v7 = v17;
          v9 = v28;
        }
      }
      else
      {
        v16 = v12;
      }
LABEL_22:
      if ((sub_21437F770(a1, v16) & 1) != 0 && (sub_21437F770(a1, v16 * 0.5) & 1) == 0)
        return;
LABEL_5:
      ++v10;
    }
    while (v10 != a5);
  }
}

uint64_t sub_21437FAF4(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  unint64_t v9;
  double *v10;
  double v11;
  uint64_t v12;
  double v13;
  double *v14;
  uint64_t v15;
  unint64_t v16;
  double *v17;
  double v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  double v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  double v29;
  double *v30;
  unint64_t v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  uint64_t v38;
  double *v39;
  uint64_t v40;
  uint64_t v41;
  double *v42;
  double v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  double v49;
  double *v50;
  uint64_t v51;
  uint64_t v52;
  double *v53;
  double v54;
  uint64_t v55;
  uint64_t v56;

  v2 = *(_QWORD *)(result + 16);
  if (v2 < 2 || v2 != *(_QWORD *)(a2 + 16))
  {
    __break(1u);
    return result;
  }
  v5 = result;
  v6 = 0;
  v7 = v2 & 0x7FFFFFFFFFFFFFFELL;
  v8 = 0.0;
  do
  {
    v8 = v8 + *(double *)(result + 8 * v6 + 32) + *(double *)(result + 8 * v6 + 40);
    v6 += 2;
  }
  while (v7 != v6);
  v9 = v2 - v7;
  if (v2 != v7)
  {
    v10 = (double *)(result + 16 * (v2 >> 1) + 32);
    do
    {
      v11 = *v10++;
      v8 = v8 + v11;
      --v9;
    }
    while (v9);
  }
  if (v2 >= 2)
  {
    v12 = v2 & 0x7FFFFFFFFFFFFFFELL;
    v14 = (double *)(a2 + 40);
    v13 = 0.0;
    v15 = v2 & 0x7FFFFFFFFFFFFFFELL;
    do
    {
      v13 = v13 + *(v14 - 1) + *v14;
      v14 += 2;
      v15 -= 2;
    }
    while (v15);
    if (v2 == v12)
      goto LABEL_18;
  }
  else
  {
    v12 = 0;
    v13 = 0.0;
  }
  v16 = v2 - v12;
  v17 = (double *)(a2 + 8 * v12 + 32);
  do
  {
    v18 = *v17++;
    v13 = v13 + v18;
    --v16;
  }
  while (v16);
LABEL_18:
  v55 = MEMORY[0x24BEE4AF8];
  v19 = v8 / (double)(uint64_t)v2;
  sub_2141D3AA0(0, v2, 0);
  v20 = 0;
  v21 = v55;
  v22 = *(_QWORD *)(v55 + 16);
  v23 = v22;
  do
  {
    v24 = *(double *)(v5 + 8 * v20 + 32);
    v56 = v21;
    v25 = *(_QWORD *)(v21 + 24);
    v26 = v23 + 1;
    if (v23 >= v25 >> 1)
    {
      sub_2141D3AA0((char *)(v25 > 1), v23 + 1, 1);
      v21 = v56;
    }
    ++v20;
    *(_QWORD *)(v21 + 16) = v26;
    *(double *)(v21 + 8 * v23++ + 32) = (v24 - v19) * (v24 - v19);
  }
  while (v2 != v20);
  v27 = v2 + v22;
  if (v2 + v22 < 2)
  {
    v28 = 0;
    v29 = 0.0;
    do
    {
LABEL_27:
      v32 = *(double *)(v21 + 32 + 8 * v28++);
      v29 = v29 + v32;
    }
    while (v26 != v28);
    goto LABEL_28;
  }
  v28 = v27 & 0xFFFFFFFFFFFFFFFELL;
  v30 = (double *)(v21 + 40);
  v29 = 0.0;
  v31 = v27 & 0xFFFFFFFFFFFFFFFELL;
  do
  {
    v29 = v29 + *(v30 - 1) + *v30;
    v30 += 2;
    v31 -= 2;
  }
  while (v31);
  if (v27 != v28)
    goto LABEL_27;
LABEL_28:
  v33 = swift_bridgeObjectRelease();
  MEMORY[0x24BDAC7A8](v33);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_21437EB50(v5, a2, (double (*)(uint64_t, double, double))sub_214380F68);
  v35 = v34;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v36 = *(_QWORD *)(v35 + 16);
  v37 = 0.0;
  if (!v36)
    goto LABEL_36;
  if (v36 == 1)
  {
    v38 = 0;
LABEL_34:
    v41 = v36 - v38;
    v42 = (double *)(v35 + 8 * v38 + 32);
    do
    {
      v43 = *v42++;
      v37 = v37 + v43;
      --v41;
    }
    while (v41);
    goto LABEL_36;
  }
  v38 = v36 & 0x7FFFFFFFFFFFFFFELL;
  v39 = (double *)(v35 + 40);
  v40 = v36 & 0x7FFFFFFFFFFFFFFELL;
  do
  {
    v37 = v37 + *(v39 - 1) + *v39;
    v39 += 2;
    v40 -= 2;
  }
  while (v40);
  if (v36 != v38)
    goto LABEL_34;
LABEL_36:
  v44 = swift_bridgeObjectRelease();
  MEMORY[0x24BDAC7A8](v44);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_21437EB50(v5, a2, (double (*)(uint64_t, double, double))sub_214380F7C);
  v46 = v45;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v47 = *(_QWORD *)(v46 + 16);
  if (v47)
  {
    if (v47 == 1)
    {
      v48 = 0;
      v49 = 0.0;
    }
    else
    {
      v48 = v47 & 0x7FFFFFFFFFFFFFFELL;
      v50 = (double *)(v46 + 40);
      v49 = 0.0;
      v51 = v47 & 0x7FFFFFFFFFFFFFFELL;
      do
      {
        v49 = v49 + *(v50 - 1) + *v50;
        v50 += 2;
        v51 -= 2;
      }
      while (v51);
      if (v47 == v48)
        return swift_bridgeObjectRelease();
    }
    v52 = v47 - v48;
    v53 = (double *)(v46 + 8 * v48 + 32);
    do
    {
      v54 = *v53++;
      v49 = v49 + v54;
      --v52;
    }
    while (v52);
  }
  return swift_bridgeObjectRelease();
}

void sub_21437FEE0(double (*a1)(void))
{
  double (*v1)(void);
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  double v12;
  long double v13;
  double v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  double v30;
  double v31;
  double v32;
  uint64_t v33;
  char *v34;
  double v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  double v43;
  double v44;
  double v45;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  double v53;
  char v54;
  uint64_t v55;
  double v56;
  uint64_t v57;
  char *v58;
  unint64_t v59;
  double v60;
  _QWORD v62[3];

  v1 = a1;
  v2 = 0;
  v3 = (char *)MEMORY[0x24BEE4AF8];
  v4 = 0x78ABBF7B5AEAE776;
  v58 = (char *)MEMORY[0x24BEE4AF8];
  do
  {
    v5 = v4 - 0x61C8864680B583EBLL;
    v6 = 0xBF58476D1CE4E5B9 * ((v4 - 0x61C8864680B583EBLL) ^ ((unint64_t)(v4 - 0x61C8864680B583EBLL) >> 30));
    v7 = (0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) ^ ((0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) >> 31);
    if (0x20000000000001 * v7 >= 0x1FFFFFFFFFF801)
    {
      v11 = (v7 * (unsigned __int128)0x20000000000001uLL) >> 64;
    }
    else
    {
      v8 = v4 + 0x3C6EF372FE94F82ALL;
      do
      {
        v5 -= 0x61C8864680B583EBLL;
        v9 = 0x94D049BB133111EBLL
           * ((0xBF58476D1CE4E5B9 * (v8 ^ (v8 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v8 ^ (v8 >> 30))) >> 27));
        v10 = v9 ^ (v9 >> 31);
        v8 -= 0x61C8864680B583EBLL;
      }
      while (0x20000000000001 * v10 < 0x1FFFFFFFFFF801);
      v11 = (v10 * (unsigned __int128)0x20000000000001uLL) >> 64;
    }
    v4 = v5;
    v12 = (double)v11 * 1.11022302e-16 * 0.6 + 0.2;
    if (v11 == 0x20000000000000)
      v12 = 0.8;
    v13 = exp((v12 + (double)v2) / 100.0 * 15.0 + 5.0);
    v14 = v1();
    if ((~*(_QWORD *)&v14 & 0x7FF0000000000000) != 0)
    {
      v15 = v58;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v15 = sub_214224AE0(0, *((_QWORD *)v58 + 2) + 1, 1, v58);
      v17 = *((_QWORD *)v15 + 2);
      v16 = *((_QWORD *)v15 + 3);
      v58 = v15;
      if (v17 >= v16 >> 1)
        v58 = sub_214224AE0((char *)(v16 > 1), v17 + 1, 1, v15);
      *((_QWORD *)v58 + 2) = v17 + 1;
      *(long double *)&v58[8 * v17 + 32] = v13;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v3 = sub_214224AE0(0, *((_QWORD *)v3 + 2) + 1, 1, v3);
      v19 = *((_QWORD *)v3 + 2);
      v18 = *((_QWORD *)v3 + 3);
      if (v19 >= v18 >> 1)
        v3 = sub_214224AE0((char *)(v18 > 1), v19 + 1, 1, v3);
      *((_QWORD *)v3 + 2) = v19 + 1;
      *(double *)&v3[8 * v19 + 32] = v14;
      v1 = a1;
    }
    ++v2;
  }
  while (v2 != 100);
  if (*((_QWORD *)v58 + 2) >= 0x14uLL)
  {
    sub_21437FAF4((uint64_t)v58, (uint64_t)v3);
    v60 = v20;
    v22 = v21;
    v24 = v23;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v24 <= 0.001)
    {
      v25 = 0;
      v54 = 1;
      v26 = 1;
      do
      {
        if ((v26 & 1) != 0)
          v27 = 4;
        else
          v27 = v25 - 1;
        v56 = __exp10((double)v27);
        v28 = 0;
        v55 = v27;
        while (2)
        {
          if (v28 <= 5)
            v29 = 5;
          else
            v29 = v28;
          v57 = v29;
          while (1)
          {
            if (v28 == v57)
            {
              __break(1u);
LABEL_71:
              __break(1u);
LABEL_72:
              __break(1u);
LABEL_73:
              __break(1u);
              return;
            }
            v30 = v56 * *((double *)&unk_24D17AE88 + v28 + 4);
            v31 = v30 * 0.7;
            v32 = v30 * 0.9;
            if (v30 * 0.7 > v30 * 0.9)
              goto LABEL_71;
            if ((~COERCE__INT64(v32 - v31) & 0x7FF0000000000000) == 0)
              goto LABEL_72;
            v33 = 0;
            v59 = v28 + 1;
            v34 = (char *)MEMORY[0x24BEE4AF8];
            do
            {
              v36 = v4 - 0x61C8864680B583EBLL;
              v37 = 0xBF58476D1CE4E5B9
                  * ((v4 - 0x61C8864680B583EBLL) ^ ((unint64_t)(v4 - 0x61C8864680B583EBLL) >> 30));
              v38 = (0x94D049BB133111EBLL * (v37 ^ (v37 >> 27))) ^ ((0x94D049BB133111EBLL * (v37 ^ (v37 >> 27))) >> 31);
              if (0x20000000000001 * v38 >= 0x1FFFFFFFFFF801)
              {
                v42 = (v38 * (unsigned __int128)0x20000000000001uLL) >> 64;
              }
              else
              {
                v39 = v4 + 0x3C6EF372FE94F82ALL;
                do
                {
                  v36 -= 0x61C8864680B583EBLL;
                  v40 = 0x94D049BB133111EBLL
                      * ((0xBF58476D1CE4E5B9 * (v39 ^ (v39 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v39 ^ (v39 >> 30))) >> 27));
                  v41 = v40 ^ (v40 >> 31);
                  v39 -= 0x61C8864680B583EBLL;
                }
                while (0x20000000000001 * v41 < 0x1FFFFFFFFFF801);
                v42 = (v41 * (unsigned __int128)0x20000000000001uLL) >> 64;
              }
              v4 = v36;
              if (v42 == 0x20000000000000)
                v43 = v32;
              else
                v43 = v31 + (v32 - v31) * ((double)v42 * 1.11022302e-16);
              v44 = ((double (*)(double))v1)(v43);
              if ((~*(_QWORD *)&v44 & 0x7FF0000000000000) != 0)
              {
                v45 = v22 + v60 * v43;
                v35 = vabdd_f64(v45, v44);
                isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                if (fabs(v45) >= 0.00000001)
                {
                  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                    v34 = sub_214224AE0(0, *((_QWORD *)v34 + 2) + 1, 1, v34);
                  v48 = *((_QWORD *)v34 + 2);
                  v50 = *((_QWORD *)v34 + 3);
                  v49 = v48 + 1;
                  if (v48 >= v50 >> 1)
                    v34 = sub_214224AE0((char *)(v50 > 1), v48 + 1, 1, v34);
                  v35 = v35 / v45;
                }
                else
                {
                  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                    v34 = sub_214224AE0(0, *((_QWORD *)v34 + 2) + 1, 1, v34);
                  v48 = *((_QWORD *)v34 + 2);
                  v47 = *((_QWORD *)v34 + 3);
                  v49 = v48 + 1;
                  if (v48 >= v47 >> 1)
                    v34 = sub_214224AE0((char *)(v47 > 1), v48 + 1, 1, v34);
                }
                *((_QWORD *)v34 + 2) = v49;
                *(double *)&v34[8 * v48 + 32] = v35;
                v1 = a1;
              }
              ++v33;
            }
            while (v33 != 100);
            if (*((_QWORD *)v34 + 2) >= 0x32uLL)
              break;
            swift_bridgeObjectRelease();
            v28 = v59;
            v25 = v55;
            if (v59 == 5)
              goto LABEL_25;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v34 = sub_21434EB70((uint64_t)v34);
          v51 = *((_QWORD *)v34 + 2);
          v62[0] = v34 + 32;
          v62[1] = v51;
          sub_21434F46C(v62);
          v52 = *((_QWORD *)v34 + 2);
          if (v52 >> 1 >= v52)
            goto LABEL_73;
          v53 = *(double *)&v34[8 * (v52 >> 1) + 32];
          swift_bridgeObjectRelease();
          if ((v54 & (v53 > 0.005)) != 0 || v53 > 0.005)
            return;
          v54 = 0;
          v28 = v59;
          v25 = v55;
          if (v59 != 5)
            continue;
          break;
        }
        v54 = 0;
LABEL_25:
        v26 = 0;
      }
      while (v25 != -1);
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
}

void sub_21438056C(double (*a1)(double))
{
  double (*v1)(double);
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  double v12;
  double v13;
  double v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  double v32;
  double v33;
  double v34;
  uint64_t v35;
  char *v36;
  double v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  double v45;
  double v46;
  double v47;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  double v55;
  char v56;
  uint64_t v57;
  double v58;
  uint64_t v59;
  char *v60;
  unint64_t v61;
  double v62;
  _QWORD v64[3];

  v1 = a1;
  v2 = 0;
  v3 = (char *)MEMORY[0x24BEE4AF8];
  v4 = 0x78ABBF7B5AEAE776;
  v60 = (char *)MEMORY[0x24BEE4AF8];
  do
  {
    v5 = v4 - 0x61C8864680B583EBLL;
    v6 = 0xBF58476D1CE4E5B9 * ((v4 - 0x61C8864680B583EBLL) ^ ((unint64_t)(v4 - 0x61C8864680B583EBLL) >> 30));
    v7 = (0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) ^ ((0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) >> 31);
    if (0x20000000000001 * v7 >= 0x1FFFFFFFFFF801)
    {
      v11 = (v7 * (unsigned __int128)0x20000000000001uLL) >> 64;
    }
    else
    {
      v8 = v4 + 0x3C6EF372FE94F82ALL;
      do
      {
        v5 -= 0x61C8864680B583EBLL;
        v9 = 0x94D049BB133111EBLL
           * ((0xBF58476D1CE4E5B9 * (v8 ^ (v8 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v8 ^ (v8 >> 30))) >> 27));
        v10 = v9 ^ (v9 >> 31);
        v8 -= 0x61C8864680B583EBLL;
      }
      while (0x20000000000001 * v10 < 0x1FFFFFFFFFF801);
      v11 = (v10 * (unsigned __int128)0x20000000000001uLL) >> 64;
    }
    v4 = v5;
    v12 = (double)v11 * 1.11022302e-16 * 0.6 + 0.2;
    if (v11 == 0x20000000000000)
      v12 = 0.8;
    v13 = exp((v12 + (double)v2) / 100.0 * 15.0 + 5.0);
    v14 = v1(-v13);
    if ((~*(_QWORD *)&v14 & 0x7FF0000000000000) != 0)
    {
      v15 = v60;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v15 = sub_214224AE0(0, *((_QWORD *)v60 + 2) + 1, 1, v60);
      v17 = *((_QWORD *)v15 + 2);
      v16 = *((_QWORD *)v15 + 3);
      v60 = v15;
      if (v17 >= v16 >> 1)
        v60 = sub_214224AE0((char *)(v16 > 1), v17 + 1, 1, v15);
      *((_QWORD *)v60 + 2) = v17 + 1;
      *(double *)&v60[8 * v17 + 32] = v13;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v3 = sub_214224AE0(0, *((_QWORD *)v3 + 2) + 1, 1, v3);
      v19 = *((_QWORD *)v3 + 2);
      v18 = *((_QWORD *)v3 + 3);
      if (v19 >= v18 >> 1)
        v3 = sub_214224AE0((char *)(v18 > 1), v19 + 1, 1, v3);
      *((_QWORD *)v3 + 2) = v19 + 1;
      *(double *)&v3[8 * v19 + 32] = v14;
      v1 = a1;
    }
    ++v2;
  }
  while (v2 != 100);
  if (*((_QWORD *)v60 + 2) > 0x13uLL)
  {
    sub_21437FAF4((uint64_t)v60, (uint64_t)v3);
    v62 = v20;
    v22 = v21;
    v24 = v23;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v24 <= 0.001)
    {
      v25 = 0;
      v56 = 1;
      v26 = 1;
      do
      {
        v27 = v25 - 1;
        v28 = (v26 & 1) == 0;
        v29 = 4;
        if (v28)
          v29 = v27;
        v57 = v29;
        v58 = __exp10((double)v29);
        v30 = 0;
        while (2)
        {
          if (v30 <= 5)
            v31 = 5;
          else
            v31 = v30;
          v59 = v31;
          while (1)
          {
            if (v30 == v59)
            {
              __break(1u);
LABEL_71:
              __break(1u);
LABEL_72:
              __break(1u);
LABEL_73:
              __break(1u);
              return;
            }
            v32 = v58 * *((double *)&unk_24D17AED0 + v30 + 4);
            v33 = v32 * 0.7;
            v34 = v32 * 0.9;
            if (v32 * 0.7 > v32 * 0.9)
              goto LABEL_71;
            if ((~COERCE__INT64(v34 - v33) & 0x7FF0000000000000) == 0)
              goto LABEL_72;
            v35 = 0;
            v61 = v30 + 1;
            v36 = (char *)MEMORY[0x24BEE4AF8];
            do
            {
              v38 = v4 - 0x61C8864680B583EBLL;
              v39 = 0xBF58476D1CE4E5B9
                  * ((v4 - 0x61C8864680B583EBLL) ^ ((unint64_t)(v4 - 0x61C8864680B583EBLL) >> 30));
              v40 = (0x94D049BB133111EBLL * (v39 ^ (v39 >> 27))) ^ ((0x94D049BB133111EBLL * (v39 ^ (v39 >> 27))) >> 31);
              if (0x20000000000001 * v40 >= 0x1FFFFFFFFFF801)
              {
                v44 = (v40 * (unsigned __int128)0x20000000000001uLL) >> 64;
              }
              else
              {
                v41 = v4 + 0x3C6EF372FE94F82ALL;
                do
                {
                  v38 -= 0x61C8864680B583EBLL;
                  v42 = 0x94D049BB133111EBLL
                      * ((0xBF58476D1CE4E5B9 * (v41 ^ (v41 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v41 ^ (v41 >> 30))) >> 27));
                  v43 = v42 ^ (v42 >> 31);
                  v41 -= 0x61C8864680B583EBLL;
                }
                while (0x20000000000001 * v43 < 0x1FFFFFFFFFF801);
                v44 = (v43 * (unsigned __int128)0x20000000000001uLL) >> 64;
              }
              v4 = v38;
              if (v44 == 0x20000000000000)
                v45 = v34;
              else
                v45 = v33 + (v34 - v33) * ((double)v44 * 1.11022302e-16);
              v46 = v1(-v45);
              if ((~*(_QWORD *)&v46 & 0x7FF0000000000000) != 0)
              {
                v47 = v22 + v62 * v45;
                v37 = vabdd_f64(v47, v46);
                isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                if (fabs(v47) >= 0.00000001)
                {
                  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                    v36 = sub_214224AE0(0, *((_QWORD *)v36 + 2) + 1, 1, v36);
                  v50 = *((_QWORD *)v36 + 2);
                  v52 = *((_QWORD *)v36 + 3);
                  v51 = v50 + 1;
                  if (v50 >= v52 >> 1)
                    v36 = sub_214224AE0((char *)(v52 > 1), v50 + 1, 1, v36);
                  v37 = v37 / v47;
                }
                else
                {
                  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                    v36 = sub_214224AE0(0, *((_QWORD *)v36 + 2) + 1, 1, v36);
                  v50 = *((_QWORD *)v36 + 2);
                  v49 = *((_QWORD *)v36 + 3);
                  v51 = v50 + 1;
                  if (v50 >= v49 >> 1)
                    v36 = sub_214224AE0((char *)(v49 > 1), v50 + 1, 1, v36);
                }
                *((_QWORD *)v36 + 2) = v51;
                *(double *)&v36[8 * v50 + 32] = v37;
                v1 = a1;
              }
              ++v35;
            }
            while (v35 != 100);
            if (*((_QWORD *)v36 + 2) > 0x31uLL)
              break;
            swift_bridgeObjectRelease();
            v30 = v61;
            if (v61 == 5)
              goto LABEL_25;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v36 = sub_21434EB70((uint64_t)v36);
          v53 = *((_QWORD *)v36 + 2);
          v64[0] = v36 + 32;
          v64[1] = v53;
          sub_21434F46C(v64);
          v54 = *((_QWORD *)v36 + 2);
          if (v54 >> 1 >= v54)
            goto LABEL_73;
          v55 = *(double *)&v36[8 * (v54 >> 1) + 32];
          swift_bridgeObjectRelease();
          if ((v56 & (v55 > 0.005)) != 0 || v55 > 0.005)
            return;
          v56 = 0;
          v30 = v61;
          if (v61 != 5)
            continue;
          break;
        }
        v56 = 0;
LABEL_25:
        v26 = 0;
        v25 = v57;
      }
      while (v57 != -1);
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
}

void sub_214380BFC(uint64_t (*a1)(__n128), __n128 a2, double a3)
{
  double v3;
  double v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;

  v3 = a3 - a2.n128_f64[0];
  if ((~COERCE__INT64(a3 - a2.n128_f64[0]) & 0x7FF0000000000000) != 0)
  {
    v5 = a2.n128_f64[0];
    v7 = 0;
    v8 = 0;
    v9 = 0x78ABBF7B5AEAE776;
    while (1)
    {
      v10 = v9 - 0x61C8864680B583EBLL;
      v11 = 0xBF58476D1CE4E5B9 * ((v9 - 0x61C8864680B583EBLL) ^ ((unint64_t)(v9 - 0x61C8864680B583EBLL) >> 30));
      v12 = (0x94D049BB133111EBLL * (v11 ^ (v11 >> 27))) ^ ((0x94D049BB133111EBLL * (v11 ^ (v11 >> 27))) >> 31);
      if (0x20000000000001 * v12 >= 0x1FFFFFFFFFF801)
      {
        v16 = (v12 * (unsigned __int128)0x20000000000001uLL) >> 64;
      }
      else
      {
        v13 = v9 + 0x3C6EF372FE94F82ALL;
        do
        {
          v10 -= 0x61C8864680B583EBLL;
          v14 = 0x94D049BB133111EBLL
              * ((0xBF58476D1CE4E5B9 * (v13 ^ (v13 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v13 ^ (v13 >> 30))) >> 27));
          v15 = v14 ^ (v14 >> 31);
          v13 -= 0x61C8864680B583EBLL;
        }
        while (0x20000000000001 * v15 < 0x1FFFFFFFFFF801);
        v16 = (v15 * (unsigned __int128)0x20000000000001uLL) >> 64;
      }
      v9 = v10;
      a2.n128_f64[0] = v3 * ((double)v16 * 1.11022302e-16) + v5;
      if (v16 == 0x20000000000000)
        a2.n128_f64[0] = a3;
      if ((~a1(a2) & 0x7FF0000000000000) != 0 && __OFADD__(v7++, 1))
        break;
      if (++v8 == 100)
        return;
    }
    __break(1u);
  }
  else
  {
    __break(1u);
  }
}

void sub_214380DA0(uint64_t (*a1)(__n128), __n128 a2)
{
  __n128 v3;
  __n128 v4;
  __n128 v5;
  __n128 v6;
  __n128 v7;
  __n128 v8;
  __n128 v9;

  a2.n128_u64[0] = 0xC0F86A0000000000;
  sub_214380BFC(a1, a2, 100000.0);
  if (v3.n128_f64[0] <= 0.1)
  {
    v3.n128_u64[0] = -10.0;
    sub_214380BFC(a1, v3, 10.0);
    if (v4.n128_f64[0] < 0.4)
    {
      if (8.0 < 0.0)
        goto LABEL_16;
      v4.n128_f64[0] = -8.0;
      sub_214380BFC(a1, v4, 8.0);
      if (v5.n128_f64[0] >= 0.4)
        return;
      if (6.0 < 0.0)
        goto LABEL_16;
      v5.n128_f64[0] = -6.0;
      sub_214380BFC(a1, v5, 6.0);
      if (v6.n128_f64[0] >= 0.4)
        return;
      if (4.0 < 0.0)
        goto LABEL_16;
      v6.n128_f64[0] = -4.0;
      sub_214380BFC(a1, v6, 4.0);
      if (v7.n128_f64[0] >= 0.4)
        return;
      if (2.0 < 0.0)
        goto LABEL_16;
      v7.n128_f64[0] = -2.0;
      sub_214380BFC(a1, v7, 2.0);
      if (v8.n128_f64[0] >= 0.4)
        return;
      if (1.0 < 0.0)
        goto LABEL_16;
      v8.n128_f64[0] = -1.0;
      sub_214380BFC(a1, v8, 1.0);
      if (v9.n128_f64[0] >= 0.4)
        return;
      if (0.5 < 0.0)
      {
LABEL_16:
        __break(1u);
        return;
      }
      v9.n128_f64[0] = -0.5;
      sub_214380BFC(a1, v9, 0.5);
    }
  }
}

double sub_214380F68(double a1, double a2)
{
  uint64_t v2;

  return (a1 - *(double *)(v2 + 16)) * (a2 - *(double *)(v2 + 24));
}

double sub_214380F7C(double a1, double a2)
{
  uint64_t v2;

  return (a2 - *(double *)(v2 + 16) * a1 - *(double *)(v2 + 24))
       * (a2 - *(double *)(v2 + 16) * a1 - *(double *)(v2 + 24));
}

uint64_t sub_214380F94(uint64_t (*a1)(double), double a2)
{
  double v4;
  uint64_t v5;
  double v6;
  double v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  double v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  double v17;
  double v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  double v22;
  double v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  double v27;
  double v28;
  double v29;

  v4 = 0.674730544;
  v5 = a1(a2 + 0.674730544);
  v7 = v6;
  v8 = ((uint64_t (*)(uint64_t, double))a1)(v5, 0.674730544);
  if (vabdd_f64(v7, v9) < 0.000001)
  {
    v10 = 0;
    do
    {
      v11 = ((uint64_t (*)(uint64_t, double))a1)(v8, a2 + a2 + v4);
      v13 = v12;
      v14 = ((uint64_t (*)(uint64_t, double))a1)(v11, v4);
      if (vabdd_f64(v13, v15) >= 0.000001)
        break;
      v16 = ((uint64_t (*)(uint64_t, double))a1)(v14, a2 * 3.0 + v4);
      v18 = v17;
      v19 = ((uint64_t (*)(uint64_t, double))a1)(v16, v4);
      if (vabdd_f64(v18, v20) >= 0.000001)
        break;
      v21 = ((uint64_t (*)(uint64_t, double))a1)(v19, a2 * 4.0 + v4);
      v23 = v22;
      v24 = ((uint64_t (*)(uint64_t, double))a1)(v21, v4);
      if (vabdd_f64(v23, v25) >= 0.000001)
        break;
      if (v10 == 24)
        return 1;
      v4 = *(double *)((char *)&unk_24D17AF70 + v10 + 40);
      v26 = ((uint64_t (*)(uint64_t, double))a1)(v24, v4 + a2);
      v28 = v27;
      v8 = ((uint64_t (*)(uint64_t, double))a1)(v26, v4);
      v10 += 8;
    }
    while (vabdd_f64(v28, v29) < 0.000001);
  }
  return 0;
}

void sub_2143810D0(uint64_t a1, uint64_t (*a2)(double), double a3, double a4)
{
  uint64_t v4;
  double v7;
  double v8;
  uint64_t v9;
  long double v10;
  double v11;
  double v12;
  uint64_t v13;
  double v14;
  double v15;
  uint64_t v16;
  double v17;
  double v18;
  double v19;
  double v20;
  uint64_t v21;
  double v22;
  double v23;
  uint64_t v24;
  double v25;
  double v26;
  double v27;
  uint64_t v28;
  double v29;
  double v30;
  uint64_t v31;
  double v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  double v37;
  double v38;
  char v39;
  char v40;
  double v41;
  double v42;
  double v43;

  v4 = a1 - 1;
  if (__OFSUB__(a1, 1))
    goto LABEL_28;
  v7 = a3;
  v8 = a4 / a3;
  v43 = (double)v4;
  v42 = pow(a4 / a3, 2.0 / (double)v4);
  if (a1 < 0)
  {
LABEL_29:
    __break(1u);
  }
  else if (a1)
  {
    v9 = 0;
    v41 = v8;
    do
    {
      if (v9 == a1)
      {
        __break(1u);
LABEL_27:
        __break(1u);
LABEL_28:
        __break(1u);
        goto LABEL_29;
      }
      v10 = pow(v8, (double)v9 / v43) * v7;
      v11 = v10 / v42;
      v12 = v42 * v10;
      if (v10 / v42 > v42 * v10)
        goto LABEL_27;
      v13 = a2(v11 + 0.292048924);
      v15 = v14;
      v16 = ((uint64_t (*)(uint64_t, double))a2)(v13, 0.292048924);
      if (vabdd_f64(v15, v17) >= 1.0e-10)
      {
        v19 = v17;
        v20 = v7;
        v21 = ((uint64_t (*)(uint64_t, double))a2)(v16, v12 + 0.292048924);
        v23 = v22;
        v24 = ((uint64_t (*)(uint64_t, double))a2)(v21, 0.292048924);
        if (vabdd_f64(v23, v25) >= 1.0e-10)
        {
          v26 = v15 - v19;
          v27 = (v15 - v19) * (v23 - v25);
          v7 = v20;
          v8 = v41;
          if (v27 >= 0.0)
            goto LABEL_5;
          v18 = (v11 + v12) * 0.5;
          v28 = ((uint64_t (*)(uint64_t, double))a2)(v24, v18 + 0.292048924);
          v30 = v29;
          v31 = ((uint64_t (*)(uint64_t, double))a2)(v28, 0.292048924);
          if (vabdd_f64(v30, v32) >= 1.0e-10)
          {
            v33 = v30 - v32;
            v34 = 40;
            while (--v34)
            {
              if (v26 * v33 < 0.0)
                v12 = v18;
              else
                v11 = v18;
              if (v26 * v33 >= 0.0)
                v26 = v33;
              v18 = (v11 + v12) * 0.5;
              v35 = ((uint64_t (*)(uint64_t, double))a2)(v31, v18 + 0.292048924);
              v37 = v36;
              v31 = ((uint64_t (*)(uint64_t, double))a2)(v35, 0.292048924);
              v33 = v37 - v38;
              if (vabdd_f64(v37, v38) < 1.0e-10)
                goto LABEL_22;
            }
            goto LABEL_5;
          }
        }
        else
        {
          v18 = v12;
          v7 = v20;
          v8 = v41;
        }
      }
      else
      {
        v18 = v11;
      }
LABEL_22:
      swift_retain();
      v39 = sub_214380F94(a2, v18);
      swift_release();
      if ((v39 & 1) != 0)
      {
        swift_retain();
        v40 = sub_214380F94(a2, v18 * 0.5);
        swift_release();
        if ((v40 & 1) == 0)
          return;
      }
LABEL_5:
      ++v9;
    }
    while (v9 != a1);
  }
}

void sub_214381344(void (*a1)(void))
{
  void (*v1)(void);
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  double v12;
  long double v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  double v33;
  double v34;
  double v35;
  uint64_t v36;
  char *v37;
  double v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  double v46;
  double v47;
  double v48;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  double v56;
  char v57;
  uint64_t v58;
  double v59;
  uint64_t v60;
  char *v61;
  unint64_t v62;
  double v63;
  _QWORD v65[3];

  v1 = a1;
  v2 = 0;
  v3 = (char *)MEMORY[0x24BEE4AF8];
  v4 = 0x78ABBF7B5AEAE776;
  v61 = (char *)MEMORY[0x24BEE4AF8];
  do
  {
    v5 = v4 - 0x61C8864680B583EBLL;
    v6 = 0xBF58476D1CE4E5B9 * ((v4 - 0x61C8864680B583EBLL) ^ ((unint64_t)(v4 - 0x61C8864680B583EBLL) >> 30));
    v7 = (0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) ^ ((0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) >> 31);
    if (0x20000000000001 * v7 >= 0x1FFFFFFFFFF801)
    {
      v11 = (v7 * (unsigned __int128)0x20000000000001uLL) >> 64;
    }
    else
    {
      v8 = v4 + 0x3C6EF372FE94F82ALL;
      do
      {
        v5 -= 0x61C8864680B583EBLL;
        v9 = 0x94D049BB133111EBLL
           * ((0xBF58476D1CE4E5B9 * (v8 ^ (v8 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v8 ^ (v8 >> 30))) >> 27));
        v10 = v9 ^ (v9 >> 31);
        v8 -= 0x61C8864680B583EBLL;
      }
      while (0x20000000000001 * v10 < 0x1FFFFFFFFFF801);
      v11 = (v10 * (unsigned __int128)0x20000000000001uLL) >> 64;
    }
    v4 = v5;
    v12 = (double)v11 * 1.11022302e-16 * 0.6 + 0.2;
    if (v11 == 0x20000000000000)
      v12 = 0.8;
    v13 = exp((v12 + (double)v2) / 100.0 * 15.0 + 5.0);
    v1();
    v15 = v14;
    if ((~v14 & 0x7FF0000000000000) != 0)
    {
      v16 = v61;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v16 = sub_214224AE0(0, *((_QWORD *)v61 + 2) + 1, 1, v61);
      v18 = *((_QWORD *)v16 + 2);
      v17 = *((_QWORD *)v16 + 3);
      v61 = v16;
      if (v18 >= v17 >> 1)
        v61 = sub_214224AE0((char *)(v17 > 1), v18 + 1, 1, v16);
      *((_QWORD *)v61 + 2) = v18 + 1;
      *(long double *)&v61[8 * v18 + 32] = v13;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v3 = sub_214224AE0(0, *((_QWORD *)v3 + 2) + 1, 1, v3);
      v20 = *((_QWORD *)v3 + 2);
      v19 = *((_QWORD *)v3 + 3);
      if (v20 >= v19 >> 1)
        v3 = sub_214224AE0((char *)(v19 > 1), v20 + 1, 1, v3);
      *((_QWORD *)v3 + 2) = v20 + 1;
      *(_QWORD *)&v3[8 * v20 + 32] = v15;
      v1 = a1;
    }
    ++v2;
  }
  while (v2 != 100);
  if (*((_QWORD *)v61 + 2) > 0x13uLL)
  {
    sub_21437FAF4((uint64_t)v61, (uint64_t)v3);
    v63 = v21;
    v23 = v22;
    v25 = v24;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v25 <= 0.001)
    {
      v26 = 0;
      v57 = 1;
      v27 = 1;
      do
      {
        v28 = v26 - 1;
        v29 = (v27 & 1) == 0;
        v30 = 4;
        if (v29)
          v30 = v28;
        v58 = v30;
        v59 = __exp10((double)v30);
        v31 = 0;
        while (2)
        {
          if (v31 <= 5)
            v32 = 5;
          else
            v32 = v31;
          v60 = v32;
          while (1)
          {
            if (v31 == v60)
            {
              __break(1u);
LABEL_71:
              __break(1u);
LABEL_72:
              __break(1u);
LABEL_73:
              __break(1u);
              return;
            }
            v33 = v59 * *((double *)&unk_24D17AFB0 + v31 + 4);
            v34 = v33 * 0.7;
            v35 = v33 * 0.9;
            if (v33 * 0.7 > v33 * 0.9)
              goto LABEL_71;
            if ((~COERCE__INT64(v35 - v34) & 0x7FF0000000000000) == 0)
              goto LABEL_72;
            v36 = 0;
            v62 = v31 + 1;
            v37 = (char *)MEMORY[0x24BEE4AF8];
            do
            {
              v39 = v4 - 0x61C8864680B583EBLL;
              v40 = 0xBF58476D1CE4E5B9
                  * ((v4 - 0x61C8864680B583EBLL) ^ ((unint64_t)(v4 - 0x61C8864680B583EBLL) >> 30));
              v41 = (0x94D049BB133111EBLL * (v40 ^ (v40 >> 27))) ^ ((0x94D049BB133111EBLL * (v40 ^ (v40 >> 27))) >> 31);
              if (0x20000000000001 * v41 >= 0x1FFFFFFFFFF801)
              {
                v45 = (v41 * (unsigned __int128)0x20000000000001uLL) >> 64;
              }
              else
              {
                v42 = v4 + 0x3C6EF372FE94F82ALL;
                do
                {
                  v39 -= 0x61C8864680B583EBLL;
                  v43 = 0x94D049BB133111EBLL
                      * ((0xBF58476D1CE4E5B9 * (v42 ^ (v42 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v42 ^ (v42 >> 30))) >> 27));
                  v44 = v43 ^ (v43 >> 31);
                  v42 -= 0x61C8864680B583EBLL;
                }
                while (0x20000000000001 * v44 < 0x1FFFFFFFFFF801);
                v45 = (v44 * (unsigned __int128)0x20000000000001uLL) >> 64;
              }
              v4 = v39;
              if (v45 == 0x20000000000000)
                v46 = v35;
              else
                v46 = v34 + (v35 - v34) * ((double)v45 * 1.11022302e-16);
              ((void (*)(double))v1)(v46);
              if ((~*(_QWORD *)&v47 & 0x7FF0000000000000) != 0)
              {
                v48 = v23 + v63 * v46;
                v38 = vabdd_f64(v48, v47);
                isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                if (fabs(v48) >= 0.00000001)
                {
                  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                    v37 = sub_214224AE0(0, *((_QWORD *)v37 + 2) + 1, 1, v37);
                  v51 = *((_QWORD *)v37 + 2);
                  v53 = *((_QWORD *)v37 + 3);
                  v52 = v51 + 1;
                  if (v51 >= v53 >> 1)
                    v37 = sub_214224AE0((char *)(v53 > 1), v51 + 1, 1, v37);
                  v38 = v38 / v48;
                }
                else
                {
                  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                    v37 = sub_214224AE0(0, *((_QWORD *)v37 + 2) + 1, 1, v37);
                  v51 = *((_QWORD *)v37 + 2);
                  v50 = *((_QWORD *)v37 + 3);
                  v52 = v51 + 1;
                  if (v51 >= v50 >> 1)
                    v37 = sub_214224AE0((char *)(v50 > 1), v51 + 1, 1, v37);
                }
                *((_QWORD *)v37 + 2) = v52;
                *(double *)&v37[8 * v51 + 32] = v38;
                v1 = a1;
              }
              ++v36;
            }
            while (v36 != 100);
            if (*((_QWORD *)v37 + 2) > 0x31uLL)
              break;
            swift_bridgeObjectRelease();
            v31 = v62;
            if (v62 == 5)
              goto LABEL_25;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v37 = sub_21434EB70((uint64_t)v37);
          v54 = *((_QWORD *)v37 + 2);
          v65[0] = v37 + 32;
          v65[1] = v54;
          sub_21434F46C(v65);
          v55 = *((_QWORD *)v37 + 2);
          if (v55 >> 1 >= v55)
            goto LABEL_73;
          v56 = *(double *)&v37[8 * (v55 >> 1) + 32];
          swift_bridgeObjectRelease();
          if ((v57 & (v56 > 0.005)) != 0 || v56 > 0.005)
            return;
          v57 = 0;
          v31 = v62;
          if (v62 != 5)
            continue;
          break;
        }
        v57 = 0;
LABEL_25:
        v27 = 0;
        v26 = v58;
      }
      while (v58 != -1);
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_2143819D0(uint64_t result, __n128 a2, double a3)
{
  double v3;
  uint64_t (*v4)(__n128);
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;

  v3 = a3 - a2.n128_f64[0];
  if ((~COERCE__INT64(a3 - a2.n128_f64[0]) & 0x7FF0000000000000) != 0)
  {
    v4 = (uint64_t (*)(__n128))result;
    v6 = a2.n128_f64[0];
    v7 = 0;
    v8 = 0;
    v9 = 0x78ABBF7B5AEAE776;
    while (1)
    {
      v10 = v9 - 0x61C8864680B583EBLL;
      v11 = 0xBF58476D1CE4E5B9 * ((v9 - 0x61C8864680B583EBLL) ^ ((unint64_t)(v9 - 0x61C8864680B583EBLL) >> 30));
      v12 = (0x94D049BB133111EBLL * (v11 ^ (v11 >> 27))) ^ ((0x94D049BB133111EBLL * (v11 ^ (v11 >> 27))) >> 31);
      if (0x20000000000001 * v12 >= 0x1FFFFFFFFFF801)
      {
        v16 = (v12 * (unsigned __int128)0x20000000000001uLL) >> 64;
      }
      else
      {
        v13 = v9 + 0x3C6EF372FE94F82ALL;
        do
        {
          v10 -= 0x61C8864680B583EBLL;
          v14 = 0x94D049BB133111EBLL
              * ((0xBF58476D1CE4E5B9 * (v13 ^ (v13 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v13 ^ (v13 >> 30))) >> 27));
          v15 = v14 ^ (v14 >> 31);
          v13 -= 0x61C8864680B583EBLL;
        }
        while (0x20000000000001 * v15 < 0x1FFFFFFFFFF801);
        v16 = (v15 * (unsigned __int128)0x20000000000001uLL) >> 64;
      }
      v9 = v10;
      a2.n128_f64[0] = v3 * ((double)v16 * 1.11022302e-16) + v6;
      if (v16 == 0x20000000000000)
        a2.n128_f64[0] = a3;
      result = v4(a2);
      if ((~v17 & 0x7FF0000000000000) != 0 && __OFADD__(v7++, 1))
        break;
      if (++v8 == 100)
        return result;
    }
    __break(1u);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_214381B74(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  long double *v4;
  long double v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v9 = MEMORY[0x24BEE4AF8];
    sub_2141D3AA0(0, v1, 0);
    v2 = v9;
    v4 = (long double *)(a1 + 32);
    do
    {
      v5 = log(*v4);
      v7 = *(_QWORD *)(v9 + 16);
      v6 = *(_QWORD *)(v9 + 24);
      if (v7 >= v6 >> 1)
        sub_2141D3AA0((char *)(v6 > 1), v7 + 1, 1);
      *(_QWORD *)(v9 + 16) = v7 + 1;
      *(long double *)(v9 + 8 * v7 + 32) = v5;
      ++v4;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_214381C40(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;
  char v8;
  char v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  char v15;
  uint64_t v16;
  double v17;
  double v18;
  uint64_t v19;

  v3 = swift_bridgeObjectRetain();
  v4 = sub_214231334(v3);
  swift_bridgeObjectRelease();
  v5 = COERCE_DOUBLE(sub_214331EB0(v4));
  v7 = v6;
  v9 = v8;
  swift_bridgeObjectRelease();
  if ((v9 & 1) != 0)
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    v10 = v5;
    v11 = v7;
    v12 = COERCE_DOUBLE(sub_214331EB0(a2));
    v14 = v13;
    if ((v15 & 1) != 0)
    {
      v14 = v7;
      v12 = v5;
    }
    v16 = *(_QWORD *)(a2 + 16);
    v17 = v14;
    v18 = v12;
    if (v16)
    {
      v18 = *(double *)(a2 + 32);
      v17 = *(double *)(a2 + 32 + 8 * v16 - 8);
    }
    if (v12 <= v5)
      v10 = v12;
    if (v14 > v7)
      v11 = v14;
    sub_2141D8BF8(&qword_253F15D48);
    v19 = swift_allocObject();
    a2 = v19;
    *(_OWORD *)(v19 + 16) = xmmword_2144271D0;
    if (v18 >= v17)
    {
      *(double *)(v19 + 32) = v11;
      *(double *)(v19 + 40) = v10;
    }
    else
    {
      *(double *)(v19 + 32) = v10;
      *(double *)(v19 + 40) = v11;
    }
  }
  return a2;
}

uint64_t sub_214381D5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t inited;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  CGFloat v11;
  CGFloat v12;
  CGFloat v13;
  CGFloat v14;
  CGFloat v15;
  CGFloat v16;
  CGFloat v17;
  CGFloat v18;
  CGFloat v20;
  CGFloat rect2;
  CGFloat v22;
  CGFloat v23;
  CGRect v24;
  CGRect v25;
  CGRect v26;
  CGRect v27;
  CGRect v28;
  CGRect v29;
  CGRect v30;
  CGRect v31;
  CGRect v32;
  CGRect v33;
  CGRect v34;
  CGRect v35;
  CGRect v36;
  CGRect v37;
  CGRect v38;
  CGRect v39;
  CGRect v40;
  CGRect v41;

  sub_2141D8BF8(&qword_253F15D40);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_214427810;
  *(_QWORD *)(inited + 32) = a1;
  *(_QWORD *)(inited + 40) = a2;
  *(_QWORD *)(inited + 48) = a3;
  swift_retain();
  swift_retain();
  swift_retain();
  sub_2143003C0(a1);
  x = v24.origin.x;
  y = v24.origin.y;
  width = v24.size.width;
  height = v24.size.height;
  v39 = *(CGRect *)*(_QWORD *)&MEMORY[0x24BDBF070];
  v20 = *MEMORY[0x24BDBF070];
  v22 = v39.size.width;
  v23 = v39.origin.y;
  rect2 = v39.size.height;
  if (!CGRectEqualToRect(v24, *MEMORY[0x24BDBF070]))
  {
    v25.origin.x = x;
    v25.origin.y = y;
    v25.size.width = width;
    v25.size.height = height;
    CGRectGetMinX(v25);
    v26.origin.x = x;
    v26.origin.y = y;
    v26.size.width = width;
    v26.size.height = height;
    CGRectGetMaxX(v26);
    v27.origin.x = x;
    v27.origin.y = y;
    v27.size.width = width;
    v27.size.height = height;
    CGRectGetMinY(v27);
    v28.origin.x = x;
    v28.origin.y = y;
    v28.size.width = width;
    v28.size.height = height;
    CGRectGetMaxY(v28);
  }
  swift_retain();
  sub_2143003C0(a2);
  v11 = v29.origin.x;
  v12 = v29.origin.y;
  v13 = v29.size.width;
  v14 = v29.size.height;
  v40.origin.x = v20;
  v40.size.width = v22;
  v40.origin.y = v23;
  v40.size.height = rect2;
  if (!CGRectEqualToRect(v29, v40))
  {
    v30.origin.x = v11;
    v30.origin.y = v12;
    v30.size.width = v13;
    v30.size.height = v14;
    CGRectGetMinX(v30);
    v31.origin.x = v11;
    v31.origin.y = v12;
    v31.size.width = v13;
    v31.size.height = v14;
    CGRectGetMaxX(v31);
    v32.origin.x = v11;
    v32.origin.y = v12;
    v32.size.width = v13;
    v32.size.height = v14;
    CGRectGetMinY(v32);
    v33.origin.x = v11;
    v33.origin.y = v12;
    v33.size.width = v13;
    v33.size.height = v14;
    CGRectGetMaxY(v33);
  }
  swift_release();
  swift_retain();
  sub_2143003C0(a3);
  v15 = v34.origin.x;
  v16 = v34.origin.y;
  v17 = v34.size.width;
  v18 = v34.size.height;
  v41.origin.x = v20;
  v41.size.width = v22;
  v41.origin.y = v23;
  v41.size.height = rect2;
  if (!CGRectEqualToRect(v34, v41))
  {
    v35.origin.x = v15;
    v35.origin.y = v16;
    v35.size.width = v17;
    v35.size.height = v18;
    CGRectGetMinX(v35);
    v36.origin.x = v15;
    v36.origin.y = v16;
    v36.size.width = v17;
    v36.size.height = v18;
    CGRectGetMaxX(v36);
    v37.origin.x = v15;
    v37.origin.y = v16;
    v37.size.width = v17;
    v37.size.height = v18;
    CGRectGetMinY(v37);
    v38.origin.x = v15;
    v38.origin.y = v16;
    v38.size.width = v17;
    v38.size.height = v18;
    CGRectGetMaxY(v38);
  }
  swift_release();
  return swift_release();
}

uint64_t sub_214382130(uint64_t a1, double (*a2)(uint64_t), double a3, uint64_t a4, uint64_t *a5)
{
  uint64_t result;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  double v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  _BYTE v25[2];
  char v26[2];

  sub_214382DAC(a1 + 160, (uint64_t)v25);
  result = sub_214382DAC((uint64_t)v25, (uint64_t)v26);
  if (v26[0] != 6 && v26[0] == 3)
  {
    v11 = a2(a1);
    v13 = v12;
    v15 = v14;
    v16 = *a5;
    result = swift_isUniquelyReferenced_nonNull_native();
    *a5 = v16;
    if ((result & 1) == 0)
    {
      result = (uint64_t)sub_214226990(0, *(_QWORD *)(v16 + 16) + 1, 1, (char *)v16);
      v16 = result;
      *a5 = result;
    }
    v18 = *(_QWORD *)(v16 + 16);
    v17 = *(_QWORD *)(v16 + 24);
    v19 = v18 + 1;
    if (v18 >= v17 >> 1)
    {
      result = (uint64_t)sub_214226990((char *)(v17 > 1), v18 + 1, 1, (char *)v16);
      v16 = result;
    }
    v20 = v11 / a3;
    *(_QWORD *)(v16 + 16) = v19;
    v21 = v16 + 16 * v18;
    *(double *)(v21 + 32) = v20;
    *(double *)(v21 + 40) = -(v15 * v13);
    *a5 = v16;
    v22 = *(_QWORD *)(v16 + 24);
    v23 = v18 + 2;
    if (v23 > (uint64_t)(v22 >> 1))
    {
      result = (uint64_t)sub_214226990((char *)(v22 > 1), v23, 1, (char *)v16);
      v16 = result;
    }
    *(_QWORD *)(v16 + 16) = v23;
    v24 = v16 + 16 * v19;
    *(double *)(v24 + 32) = v20;
    *(double *)(v24 + 40) = v13 * (1.0 - v15);
    *a5 = v16;
  }
  return result;
}

uint64_t sub_214382284(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v3 = *a2;
  if (v2)
  {
    if (v3 && sub_21420ED58(v2, v3))
      return 1;
  }
  else if (!v3)
  {
    return 1;
  }
  return 0;
}

uint64_t sub_2143822C0(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, double a6, double a7)
{
  uint64_t v7;
  double v10;
  double v11;
  double v13;
  double v14;
  double v15;
  uint64_t result;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  uint64_t v22;
  uint64_t v23;

  v7 = *(_QWORD *)(a1 + 16);
  if (!v7 || (a3 & 1) != 0 || (a5 & 1) != 0)
    return 0;
  v10 = *(double *)(a1 + 32);
  v11 = *(double *)(a1 + 32 + 8 * v7 - 8);
  if (qword_253F11F50 != -1)
  {
    v22 = a4;
    v23 = a2;
    swift_once();
    a4 = v22;
    a2 = v23;
  }
  if (*(double *)&qword_253F1C988 >= a6 && *(double *)&qword_253F1C988 >= a7)
    return 0;
  v13 = *(double *)&a4 - *(double *)&a2;
  if (*(double *)&a4 - *(double *)&a2 > 1.0)
  {
    v14 = fmin(v13 * 0.99 / (a6 + a7), 1.0);
    v15 = (v11 - v10) / (v13 - (a6 + a7) * v14);
    sub_2141D8BF8(&qword_253F15D48);
    result = swift_allocObject();
    *(_OWORD *)(result + 16) = xmmword_2144271D0;
    v17 = v10 - v14 * a6 * v15;
    v18 = v11 + v14 * a7 * v15;
LABEL_15:
    *(double *)(result + 32) = v17;
    *(double *)(result + 40) = v18;
    return result;
  }
  v19 = *(double *)&a2 - *(double *)&a4;
  if (*(double *)&a2 - *(double *)&a4 > 1.0)
  {
    v20 = fmin(v19 * 0.99 / (a6 + a7), 1.0);
    v21 = (v10 - v11) / (v19 - (a6 + a7) * v20);
    sub_2141D8BF8(&qword_253F15D48);
    result = swift_allocObject();
    *(_OWORD *)(result + 16) = xmmword_2144271D0;
    v17 = v10 + v20 * a7 * v21;
    v18 = v11 - v20 * a6 * v21;
    goto LABEL_15;
  }
  return 0;
}

uint64_t sub_21438245C(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, uint64_t a6, char a7, double a8, double a9)
{
  char v14;
  char v15;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  double *v20;
  double v21;
  double v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  double *v29;
  long double v30;
  unint64_t v31;
  unint64_t v32;
  long double v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  long double v38;
  double v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  int64_t v43;
  uint64_t v44;
  unint64_t v45;
  long double v46;
  unint64_t v47;
  long double v48;
  uint64_t v50;
  uint64_t v51;

  v14 = a3 & 1;
  v15 = a5 & 1;
  if (!a7)
  {
    v26 = *(_QWORD *)(a1 + 16);
    v27 = MEMORY[0x24BEE4AF8];
    if (v26)
    {
      v51 = MEMORY[0x24BEE4AF8];
      sub_2141D3AA0(0, v26, 0);
      v28 = v51;
      v29 = (double *)(a1 + 32);
      do
      {
        v30 = *v29;
        v32 = *(_QWORD *)(v51 + 16);
        v31 = *(_QWORD *)(v51 + 24);
        if (v32 >= v31 >> 1)
          sub_2141D3AA0((char *)(v31 > 1), v32 + 1, 1);
        v33 = pow(v30, *(long double *)&a6);
        *(_QWORD *)(v51 + 16) = v32 + 1;
        *(long double *)(v51 + 8 * v32 + 32) = v33;
        ++v29;
        --v26;
      }
      while (v26);
      v27 = MEMORY[0x24BEE4AF8];
    }
    else
    {
      v28 = MEMORY[0x24BEE4AF8];
    }
    v42 = sub_2143822C0(v28, a2, v14, a4, v15, a8, a9);
    swift_bridgeObjectRelease();
    if (v42)
    {
      v43 = *(_QWORD *)(v42 + 16);
      if (v43)
      {
        swift_bridgeObjectRetain();
        sub_2141D3AA0(0, v43, 0);
        v44 = 0;
        v37 = v27;
        v45 = *(_QWORD *)(v27 + 16);
        do
        {
          v46 = *(double *)(v42 + 8 * v44 + 32);
          v47 = *(_QWORD *)(v27 + 24);
          if (v45 >= v47 >> 1)
            sub_2141D3AA0((char *)(v47 > 1), v45 + 1, 1);
          ++v44;
          v48 = pow(v46, 1.0 / *(double *)&a6);
          *(_QWORD *)(v27 + 16) = v45 + 1;
          *(long double *)(v27 + 8 * v45++ + 32) = v48;
        }
        while (v43 != v44);
        goto LABEL_37;
      }
LABEL_39:
      swift_bridgeObjectRelease();
      return MEMORY[0x24BEE4AF8];
    }
    return 0;
  }
  if (a7 != 1)
    __asm { BR              X9 }
  v17 = *(_QWORD *)(a1 + 16);
  v18 = MEMORY[0x24BEE4AF8];
  if (v17)
  {
    v50 = MEMORY[0x24BEE4AF8];
    sub_2141D3AA0(0, v17, 0);
    v19 = v50;
    v20 = (double *)(a1 + 32);
    do
    {
      v21 = *v20 * *(double *)&a6;
      if ((*(_QWORD *)v20 & 0x8000000000000000) != 0)
        v22 = -log(1.0 - v21);
      else
        v22 = log(v21 + 1.0);
      v24 = *(_QWORD *)(v50 + 16);
      v23 = *(_QWORD *)(v50 + 24);
      if (v24 >= v23 >> 1)
        sub_2141D3AA0((char *)(v23 > 1), v24 + 1, 1);
      *(_QWORD *)(v50 + 16) = v24 + 1;
      *(double *)(v50 + 8 * v24 + 32) = v22;
      ++v20;
      --v17;
    }
    while (v17);
    v18 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    v19 = MEMORY[0x24BEE4AF8];
  }
  v34 = sub_2143822C0(v19, a2, v14, a4, v15, a8, a9);
  swift_bridgeObjectRelease();
  if (!v34)
    return 0;
  v35 = *(_QWORD *)(v34 + 16);
  if (!v35)
    goto LABEL_39;
  swift_bridgeObjectRetain();
  sub_2141D3AA0(0, v35, 0);
  v36 = 0;
  v37 = v18;
  do
  {
    v38 = *(double *)(v34 + 8 * v36 + 32);
    if ((*(_QWORD *)&v38 & 0x8000000000000000) != 0)
      v39 = 1.0 - exp(-v38);
    else
      v39 = exp(v38) + -1.0;
    v41 = *(_QWORD *)(v18 + 16);
    v40 = *(_QWORD *)(v18 + 24);
    if (v41 >= v40 >> 1)
      sub_2141D3AA0((char *)(v40 > 1), v41 + 1, 1);
    ++v36;
    *(_QWORD *)(v18 + 16) = v41 + 1;
    *(double *)(v18 + 8 * v41 + 32) = v39 / *(double *)&a6;
  }
  while (v35 != v36);
LABEL_37:
  swift_bridgeObjectRelease_n();
  return v37;
}

void sub_21438289C()
{
  uint64_t v0;
  char v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  unint64_t v11;
  long double v12;
  unint64_t v13;
  uint64_t v14;

  v7 = sub_214381B74(v4);
  v8 = sub_2143822C0(v7, v3, v2, v0, v1, v6, v5);
  swift_bridgeObjectRelease();
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 16);
    if (v9)
    {
      v14 = MEMORY[0x24BEE4AF8];
      swift_bridgeObjectRetain();
      sub_2141D3AA0(0, v9, 0);
      v10 = 0;
      v11 = *(_QWORD *)(v14 + 16);
      do
      {
        v12 = exp(*(long double *)(v8 + 8 * v10 + 32));
        v13 = *(_QWORD *)(v14 + 24);
        if (v11 >= v13 >> 1)
          sub_2141D3AA0((char *)(v13 > 1), v11 + 1, 1);
        ++v10;
        *(_QWORD *)(v14 + 16) = v11 + 1;
        *(long double *)(v14 + 8 * v11++ + 32) = v12;
      }
      while (v9 != v10);
      swift_bridgeObjectRelease_n();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  JUMPOUT(0x21438286CLL);
}

uint64_t sub_2143829A8(uint64_t result, uint64_t a2, char a3, uint64_t a4, double a5)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  double v12;
  double *v13;
  unint64_t v14;
  double *v15;
  double v16;
  double v17;
  unint64_t v18;
  double v19;
  double v20;
  double *v21;
  double v22;
  double v23;
  double v24;
  unint64_t v25;
  uint64_t v26;
  double v27;
  double v28;
  unint64_t v29;
  double *v30;
  double v31;
  double v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;

  v9 = result;
  if (qword_253F11F48 != -1)
    goto LABEL_46;
  v10 = *(_QWORD *)(a4 + 16);
  if (!v10)
  {
LABEL_47:
    v27 = 0.0;
    v23 = fmin(a5, 0.0);
LABEL_48:
    if (v27 <= 0.0)
      v27 = 0.0;
    if (a5 - v23 >= v27)
      v33 = v27;
    else
      v33 = a5 - v23;
    if ((*(_BYTE *)(v9 + 64) & 1) != 0 || (v34 = *(_QWORD *)(v9 + 56), (v35 = *(_QWORD *)(v34 + 16)) == 0))
    {
      v38 = 0;
      v37 = 0;
      v36 = 1;
    }
    else
    {
      v36 = 0;
      v37 = *(_QWORD *)(v34 + 32);
      v38 = *(_QWORD *)(v34 + 32 + 8 * v35 - 8);
    }
    v39 = *(_QWORD *)(v9 + 48);
    swift_bridgeObjectRetain();
    v40 = swift_bridgeObjectRetain();
    v41 = sub_21438245C(v40, v37, v36, v38, v36, a2, a3, v33, v23);
    swift_bridgeObjectRelease();
    if (v41)
    {
      v42 = sub_21420ED58(v41, v39);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      sub_214382D48(v9);
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      if (v42)
      {
        swift_bridgeObjectRelease();
        return 0;
      }
    }
    else
    {
      swift_bridgeObjectRetain();
      sub_214382D48(v9);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
    }
    return v41;
  }
  while (1)
  {
    v11 = a4 + 32;
    v12 = *(double *)(a4 + 32);
    v13 = (double *)(a4 + 40);
    if (*(double *)&qword_253F1C980 >= v12)
    {
      v15 = (double *)(a4 + 40);
      v14 = 1;
      while (v10 != v14)
      {
        ++v14;
        v16 = v15[1];
        v15 += 2;
        if (*(double *)&qword_253F1C980 < v16)
          goto LABEL_8;
      }
      v17 = 0.0;
    }
    else
    {
      v14 = 1;
      v15 = (double *)(a4 + 40);
      v16 = *(double *)(a4 + 32);
LABEL_8:
      v17 = (*v15 + (v16 + -1.0) * a5) / v16;
      if (v14 != v10)
      {
        while (1)
        {
          if (v14 >= v10)
          {
            __break(1u);
            goto LABEL_63;
          }
          v20 = *(double *)(v11 + 16 * v14);
          if (*(double *)&qword_253F1C980 >= v20)
            break;
LABEL_10:
          v18 = v14 + 1;
          v19 = (*(double *)(v11 + 16 * v14 + 8) + (v20 + -1.0) * a5) / v20;
          if (v17 < v19)
            v17 = v19;
          ++v14;
          if (v18 == v10)
            goto LABEL_20;
        }
        v21 = (double *)(a4 + 48 + 16 * v14);
        while (v10 - 1 != v14)
        {
          v22 = *v21;
          v21 += 2;
          v20 = v22;
          ++v14;
          if (*(double *)&qword_253F1C980 < v22)
            goto LABEL_10;
        }
      }
    }
LABEL_20:
    if (v17 <= 0.0)
      v17 = 0.0;
    v23 = v17 <= a5 ? v17 : a5;
    v24 = 1.0 - *(double *)&qword_253F1C980;
    if (v12 < 1.0 - *(double *)&qword_253F1C980)
      break;
    v13 = (double *)(a4 + 40);
    v26 = 1;
    while (1)
    {
      if (v10 == v26)
      {
        v27 = 0.0;
        goto LABEL_48;
      }
      v25 = v26 + 1;
      if (__OFADD__(v26, 1))
        break;
      v12 = v13[1];
      v13 += 2;
      ++v26;
      if (v12 < v24)
        goto LABEL_31;
    }
LABEL_45:
    __break(1u);
LABEL_46:
    result = swift_once();
    v10 = *(_QWORD *)(a4 + 16);
    if (!v10)
      goto LABEL_47;
  }
  v25 = 1;
LABEL_31:
  v27 = ((v23 - a5) * v12 - *v13) / (1.0 - v12);
  if (v25 == v10)
    goto LABEL_48;
  while (v25 < v10)
  {
    v28 = *(double *)(v11 + 16 * v25);
    if (v28 >= v24)
    {
      v30 = (double *)(a4 + 48 + 16 * v25);
      while (v10 - 1 != v25)
      {
        v29 = v25 + 2;
        if (__OFADD__(v25 + 1, 1))
        {
          __break(1u);
          goto LABEL_45;
        }
        v31 = *v30;
        v30 += 2;
        v28 = v31;
        ++v25;
        if (v31 < v24)
          goto LABEL_39;
      }
      goto LABEL_48;
    }
    v29 = v25 + 1;
LABEL_39:
    v32 = ((v23 - a5) * v28 - *(double *)(v11 + 16 * v25 + 8)) / (1.0 - v28);
    if (v27 < v32)
      v27 = v32;
    v25 = v29;
    if (v29 == v10)
      goto LABEL_48;
  }
LABEL_63:
  __break(1u);
  return result;
}

uint64_t sub_214382D48(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 v4;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 56);
  v4 = *(_BYTE *)(a1 + 64);
  swift_release();
  sub_2141FA1C4(v2);
  swift_bridgeObjectRelease();
  sub_21421BBC0(v3, v4);
  return a1;
}

uint64_t sub_214382DAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_2141D8BF8(&qword_253F0FF98);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_214382DF4()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_214382E60(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v14;
  void (*v15)(uint64_t *, uint64_t *, uint64_t);

  v4 = a1;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_DWORD *)(v6 + 80);
  v9 = ~v8;
  v10 = v7 + v8;
  v11 = ((v7 + v8) & ~v8) + v7;
  if (v8 > 7 || (*(_DWORD *)(v6 + 80) & 0x100000) != 0 || v11 > 0x18)
  {
    v14 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v14 + ((v8 + 16) & v9));
    swift_retain();
  }
  else
  {
    v15 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16);
    v15(a1, a2, *(_QWORD *)(a3 + 16));
    v15((uint64_t *)(((unint64_t)v4 + v10) & v9), (uint64_t *)(((unint64_t)a2 + v10) & v9), v5);
  }
  return v4;
}

unint64_t sub_214382F14(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void (*v7)(unint64_t, unint64_t, uint64_t);

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 16);
  v7(a1, a2, v5);
  v7((*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v6 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), (*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v6 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), v5);
  return a1;
}

unint64_t sub_214382F80(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void (*v7)(unint64_t, unint64_t, uint64_t);

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 24);
  v7(a1, a2, v5);
  v7((*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v6 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), (*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v6 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), v5);
  return a1;
}

unint64_t sub_214382FEC(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void (*v7)(unint64_t, unint64_t, uint64_t);

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 32);
  v7(a1, a2, v5);
  v7((*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v6 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), (*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v6 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), v5);
  return a1;
}

unint64_t sub_214383058(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void (*v7)(unint64_t, unint64_t, uint64_t);

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 40);
  v7(a1, a2, v5);
  v7((*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v6 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), (*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v6 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), v5);
  return a1;
}

uint64_t sub_2143830C4(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = ((*(_QWORD *)(v4 + 64) + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))
     + *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_214383184 + 4 * byte_21442F01D[(v7 - 1)]))();
}

void sub_2143831D4(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = ((*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
     + *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t type metadata accessor for Line(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2141D8E88(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Line);
}

_QWORD *initializeBufferWithCopyOfBuffer for DomainOverride(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for AnyPrimitivePlottableArray()
{
  return swift_bridgeObjectRelease();
}

_QWORD *assignWithCopy for DomainOverride(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for DomainOverride(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for DomainOverride(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for DomainOverride(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for DomainOverride()
{
  return &type metadata for DomainOverride;
}

uint64_t sub_2143834FC(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_21438353C + 4 * byte_21442F080[a1]))(0xD00000000000007ALL, 0x800000021445B0D0);
}

uint64_t sub_21438353C()
{
  uint64_t v0;

  return v0 + 58;
}

uint64_t sub_214383600()
{
  uint64_t result;

  sub_21438365C();
  result = sub_21442537C();
  qword_253F1CC08 = result;
  return result;
}

unint64_t sub_21438365C()
{
  unint64_t result;

  result = qword_253F15CF0;
  if (!qword_253F15CF0)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_253F15CF0);
  }
  return result;
}

void sub_214383698()
{
  qword_254D76040 = MEMORY[0x24BEE4B08];
}

uint64_t sub_2143836AC(uint64_t a1)
{
  char v2;
  uint64_t result;
  uint64_t v4;
  char v5;

  if (qword_254D68EB8 != -1)
    swift_once();
  swift_beginAccess();
  v2 = sub_21420FE74(&v5, a1);
  result = swift_endAccess();
  if ((v2 & 1) != 0)
  {
    sub_2141D8BF8(qword_254D6A8D0);
    v4 = swift_allocObject();
    *(_OWORD *)(v4 + 16) = xmmword_214426EF0;
    sub_2143834FC(a1);
    sub_214424F20();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v4 + 56) = MEMORY[0x24BEE0D00];
    *(_QWORD *)(v4 + 32) = 0x203A737472616843;
    *(_QWORD *)(v4 + 40) = 0xE800000000000000;
    sub_21442585C();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ExternalWarning(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF5)
    goto LABEL_17;
  if (a2 + 11 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 11) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 11;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 11;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 11;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xC;
  v8 = v6 - 12;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ExternalWarning(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 11 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 11) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF5)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF4)
    return ((uint64_t (*)(void))((char *)&loc_2143838A4 + 4 * byte_21442F091[v4]))();
  *a1 = a2 + 11;
  return ((uint64_t (*)(void))((char *)sub_2143838D8 + 4 * byte_21442F08C[v4]))();
}

uint64_t sub_2143838D8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2143838E0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2143838E8);
  return result;
}

uint64_t sub_2143838F4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2143838FCLL);
  *(_BYTE *)result = a2 + 11;
  return result;
}

uint64_t sub_214383900(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_214383908(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ExternalWarning()
{
  return &type metadata for ExternalWarning;
}

unint64_t sub_214383928()
{
  unint64_t result;

  result = qword_254D6C918;
  if (!qword_254D6C918)
  {
    result = MEMORY[0x2199CD934](&unk_21442F0EC, &type metadata for ExternalWarning);
    atomic_store(result, (unint64_t *)&qword_254D6C918);
  }
  return result;
}

double sub_21438396C()
{
  double result;

  qword_253F15390 = 0;
  result = 0.0;
  xmmword_253F15370 = 0u;
  unk_253F15380 = 0u;
  byte_253F15398 = -1;
  xmmword_253F153A0 = 0u;
  unk_253F153B0 = 0u;
  qword_253F153C0 = 0;
  byte_253F153C8 = -1;
  xmmword_253F153D0 = 0u;
  unk_253F153E0 = 0u;
  qword_253F153F0 = 0;
  byte_253F153F8 = -1;
  xmmword_253F15400 = 0u;
  unk_253F15410 = 0u;
  qword_253F15420 = 0;
  byte_253F15428 = -1;
  xmmword_253F15430 = 0u;
  unk_253F15440 = 0u;
  qword_253F15450 = 0;
  byte_253F15458 = -1;
  xmmword_253F15460 = 0u;
  unk_253F15470 = 0u;
  qword_253F15480 = 0;
  word_253F15488 = 255;
  byte_253F1548A = 0;
  return result;
}

uint64_t sub_2143839CC@<X0>(uint64_t a1@<X8>)
{
  if (qword_253F15490 != -1)
    swift_once();
  return sub_2142E00B4((uint64_t)&xmmword_253F15370, a1);
}

uint64_t sub_214383A1C()
{
  sub_2143861C0();
  return sub_214423EE8();
}

BOOL sub_214383A70(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2 | a2[1] ^ a1[1]) & 1) == 0;
}

uint64_t sub_214383A9C()
{
  sub_214385BAC();
  return sub_214424224();
}

uint64_t View.chartXSelection<A>(value:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return sub_214383DA4(a1, a2, a3, a4, a5, (uint64_t)sub_214383C84, a6);
}

uint64_t sub_214383AE4()
{
  sub_214385BAC();
  return sub_214424224();
}

uint64_t sub_214383B20()
{
  sub_214385BAC();
  return sub_214424224();
}

uint64_t sub_214383B5C(uint64_t a1)
{
  uint64_t v2;
  _BYTE v3[288];

  sub_2142E00B4(a1, (uint64_t)v3);
  sub_2142E00B4((uint64_t)v3, (uint64_t)&v2);
  sub_214385BAC();
  sub_214424230();
  return sub_2141E610C((uint64_t)v3);
}

uint64_t sub_214383BBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t result;
  _BYTE v15[48];

  sub_214425388();
  v10 = sub_214424B3C();
  MEMORY[0x24BDAC7A8](v10);
  v12 = &v15[-v11];
  (*(void (**)(_BYTE *, uint64_t))(v13 + 16))(&v15[-v11], a2);
  sub_2143FB4C0((uint64_t)v12, a4, a6, (uint64_t)v15);
  result = sub_2141FA160((uint64_t)v15, a1, &qword_253F13C28);
  *(_BYTE *)(a1 + 282) = 1;
  return result;
}

uint64_t sub_214383C84(uint64_t a1)
{
  return sub_214384520(a1, (uint64_t (*)(uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t))sub_214383BBC);
}

uint64_t View.chartXSelection<A>(range:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return sub_214383FC0(a1, a2, a3, a4, a5, a6, (uint64_t)&unk_24D188870, (uint64_t)sub_214383D84, a7);
}

uint64_t sub_214383CA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t result;
  _BYTE v17[48];

  sub_214424EC0();
  sub_214425388();
  v12 = sub_214424B3C();
  MEMORY[0x24BDAC7A8](v12);
  v14 = &v17[-v13];
  (*(void (**)(_BYTE *, uint64_t))(v15 + 16))(&v17[-v13], a2);
  sub_2143FB5FC((uint64_t)v14, a4, a6, a7, (uint64_t)v17);
  result = sub_2141FA160((uint64_t)v17, a1 + 48, &qword_253F154C0);
  *(_BYTE *)(a1 + 282) = 1;
  return result;
}

uint64_t sub_214383D84(uint64_t a1)
{
  return sub_2143842D8(a1, (uint64_t (*)(uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_214383CA4);
}

uint64_t View.chartYSelection<A>(value:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return sub_214383DA4(a1, a2, a3, a4, a5, (uint64_t)sub_214383FA0, a6);
}

uint64_t sub_214383DA4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  _QWORD v19[3];

  v19[2] = a6;
  v19[0] = a5;
  v19[1] = a7;
  sub_214425388();
  v11 = sub_214424B3C();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)v19 - v13;
  swift_getKeyPath();
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a1, v11);
  v15 = (*(unsigned __int8 *)(v12 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v16 = (char *)swift_allocObject();
  *((_QWORD *)v16 + 2) = a2;
  *((_QWORD *)v16 + 3) = a3;
  v17 = v19[0];
  *((_QWORD *)v16 + 4) = a4;
  *((_QWORD *)v16 + 5) = v17;
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(&v16[v15], v14, v11);
  sub_2144248FC();
  swift_release();
  return swift_release();
}

uint64_t sub_214383ED8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t result;
  _BYTE v15[48];

  sub_214425388();
  v10 = sub_214424B3C();
  MEMORY[0x24BDAC7A8](v10);
  v12 = &v15[-v11];
  (*(void (**)(_BYTE *, uint64_t))(v13 + 16))(&v15[-v11], a2);
  sub_2143FB4C0((uint64_t)v12, a4, a6, (uint64_t)v15);
  result = sub_2141FA160((uint64_t)v15, a1 + 96, &qword_253F13C28);
  *(_BYTE *)(a1 + 282) = 1;
  return result;
}

uint64_t sub_214383FA0(uint64_t a1)
{
  return sub_214384520(a1, (uint64_t (*)(uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t))sub_214383ED8);
}

uint64_t View.chartYSelection<A>(range:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return sub_214383FC0(a1, a2, a3, a4, a5, a6, (uint64_t)&unk_24D1888C0, (uint64_t)sub_2143842CC, a7);
}

uint64_t sub_214383FC0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  _QWORD v22[2];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v25 = a8;
  v22[1] = a7;
  v23 = a5;
  v24 = a9;
  sub_214424EC0();
  sub_214425388();
  v14 = sub_214424B3C();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)v22 - v16;
  swift_getKeyPath();
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, a1, v14);
  v18 = (*(unsigned __int8 *)(v15 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  v19 = (char *)swift_allocObject();
  *((_QWORD *)v19 + 2) = a2;
  *((_QWORD *)v19 + 3) = a3;
  v20 = v23;
  *((_QWORD *)v19 + 4) = a4;
  *((_QWORD *)v19 + 5) = v20;
  *((_QWORD *)v19 + 6) = a6;
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(&v19[v18], v17, v14);
  sub_2144248FC();
  swift_release();
  return swift_release();
}

uint64_t sub_21438410C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t result;
  _BYTE v17[48];

  sub_214424EC0();
  sub_214425388();
  v12 = sub_214424B3C();
  MEMORY[0x24BDAC7A8](v12);
  v14 = &v17[-v13];
  (*(void (**)(_BYTE *, uint64_t))(v15 + 16))(&v17[-v13], a2);
  sub_2143FB5FC((uint64_t)v14, a4, a6, a7, (uint64_t)v17);
  result = sub_2141FA160((uint64_t)v17, a1 + 144, &qword_253F154C0);
  *(_BYTE *)(a1 + 282) = 1;
  return result;
}

uint64_t sub_2143841EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 24);
  v2 = sub_214424EC0();
  sub_214425388();
  v3 = sub_214424B3C();
  v4 = *(unsigned __int8 *)(*(_QWORD *)(v3 - 8) + 80);
  swift_release();
  swift_release();
  v5 = v0 + ((v4 + 56) & ~v4) + *(int *)(v3 + 32);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(v5, 1, v2))
  {
    v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8);
    v6(v5, v1);
    v6(v5 + *(int *)(v2 + 36), v1);
  }
  return swift_deallocObject();
}

uint64_t sub_2143842CC(uint64_t a1)
{
  return sub_2143842D8(a1, (uint64_t (*)(uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_21438410C);
}

uint64_t sub_2143842D8(uint64_t a1, uint64_t (*a2)(uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  char *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *((_QWORD *)v2 + 2);
  v5 = *((_QWORD *)v2 + 3);
  v6 = *((_QWORD *)v2 + 4);
  v7 = *((_QWORD *)v2 + 5);
  v8 = *((_QWORD *)v2 + 6);
  sub_214424EC0();
  sub_214425388();
  v9 = *(unsigned __int8 *)(*(_QWORD *)(sub_214424B3C() - 8) + 80);
  return a2(a1, &v2[(v9 + 56) & ~v9], v4, v5, v6, v7, v8);
}

uint64_t View.chartAngleSelection<A>(value:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return sub_214383DA4(a1, a2, a3, a4, a5, (uint64_t)sub_214384514, a6);
}

uint64_t sub_214384394(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t result;
  _BYTE v15[48];

  sub_214425388();
  v10 = sub_214424B3C();
  MEMORY[0x24BDAC7A8](v10);
  v12 = &v15[-v11];
  (*(void (**)(_BYTE *, uint64_t))(v13 + 16))(&v15[-v11], a2);
  sub_2143FB4C0((uint64_t)v12, a4, a6, (uint64_t)v15);
  result = sub_2141FA160((uint64_t)v15, a1 + 192, &qword_253F13C28);
  *(_BYTE *)(a1 + 282) = 1;
  return result;
}

uint64_t sub_21438445C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 24);
  sub_214425388();
  v2 = sub_214424B3C();
  v3 = *(unsigned __int8 *)(*(_QWORD *)(v2 - 8) + 80);
  swift_release();
  swift_release();
  v4 = v0 + ((v3 + 48) & ~v3) + *(int *)(v2 + 32);
  v5 = *(_QWORD *)(v1 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v4, 1, v1))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v1);
  return swift_deallocObject();
}

uint64_t sub_214384514(uint64_t a1)
{
  return sub_214384520(a1, (uint64_t (*)(uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t))sub_214384394);
}

uint64_t sub_214384520(uint64_t a1, uint64_t (*a2)(uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t))
{
  char *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *((_QWORD *)v2 + 2);
  v5 = *((_QWORD *)v2 + 3);
  v6 = *((_QWORD *)v2 + 4);
  v7 = *((_QWORD *)v2 + 5);
  sub_214425388();
  v8 = *(unsigned __int8 *)(*(_QWORD *)(sub_214424B3C() - 8) + 80);
  return a2(a1, &v2[(v8 + 48) & ~v8], v4, v5, v6, v7);
}

uint64_t sub_2143845A4()
{
  sub_214386204();
  return sub_214423EE8();
}

uint64_t sub_2143845F4()
{
  return AGCompareValues();
}

uint64_t sub_21438465C()
{
  uint64_t v1;

  sub_2141DD258();
  sub_214424224();
  return v1;
}

uint64_t View.chartGesture<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[4];

  v20 = a1;
  v21 = a6;
  v22 = a7;
  sub_2141D7924(&qword_254D6C920);
  v11 = sub_214424110();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v19 - v13;
  swift_getKeyPath();
  sub_2144248FC();
  swift_release();
  swift_getKeyPath();
  v15 = (_QWORD *)swift_allocObject();
  v15[2] = a3;
  v15[3] = a4;
  v16 = v21;
  v15[4] = a5;
  v15[5] = v16;
  v15[6] = v20;
  v15[7] = a2;
  v23[2] = sub_214384A24;
  v23[3] = v15;
  v17 = sub_2141D9054(&qword_254D6C928, &qword_254D6C920, MEMORY[0x24BDF1248]);
  v23[0] = a5;
  v23[1] = v17;
  swift_retain();
  MEMORY[0x2199CD934](MEMORY[0x24BDED308], v11, v23);
  sub_214424878();
  swift_release();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
}

uint64_t sub_214384828(uint64_t result)
{
  *(_BYTE *)(result + 281) = 1;
  return result;
}

uint64_t sub_21438483C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t OpaqueTypeConformance2;
  uint64_t v22;
  uint64_t v23;
  _QWORD v25[6];
  __int128 v26;
  unint64_t v27;
  __int128 v28;
  __int128 v29;
  unint64_t v30;
  __int128 v31;

  v13 = (_QWORD *)swift_allocObject();
  v13[2] = a4;
  v13[3] = a5;
  v13[4] = a6;
  v13[5] = a7;
  v13[6] = a2;
  v13[7] = a3;
  swift_retain();
  v14 = sub_214424C44();
  v16 = v15;
  v17 = sub_2141D7924(&qword_254D6C940);
  v18 = sub_214385ACC();
  *(_QWORD *)&v29 = v17;
  *((_QWORD *)&v29 + 1) = a5;
  v30 = v18;
  *(_QWORD *)&v31 = a7;
  v19 = MEMORY[0x2199CD8C8](0, &v29, MEMORY[0x24BDF3770], 0);
  v20 = sub_214385B68();
  *(_QWORD *)&v29 = v17;
  *((_QWORD *)&v29 + 1) = a5;
  v30 = v18;
  *(_QWORD *)&v31 = a7;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  View.chartOverlay<A>(alignment:content:)(v14, v16, (uint64_t)sub_214385ABC, (uint64_t)v13, (uint64_t)&type metadata for ChartPlotContent, v19, v20, OpaqueTypeConformance2);
  swift_release();
  v26 = v29;
  v27 = v30;
  v28 = v31;
  v25[2] = &type metadata for ChartScenegraphKey;
  v25[3] = v19;
  v25[4] = sub_2142BABA8();
  v25[5] = OpaqueTypeConformance2;
  v22 = sub_2144245A8();
  v23 = sub_214424110();
  v25[0] = v20;
  v25[1] = MEMORY[0x2199CD934](MEMORY[0x24BDF0B70], v22);
  MEMORY[0x2199CD934](MEMORY[0x24BDED308], v23, v25);
  return sub_214424B18();
}

uint64_t sub_214384A00()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_214384A24(uint64_t a1)
{
  uint64_t *v1;

  return sub_21438483C(a1, v1[6], v1[7], v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_214384A34@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  void (*v20)(char *, uint64_t);
  uint64_t v22;
  void (*v23)(uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;

  v22 = a3;
  v23 = a2;
  v25 = a6;
  v24 = *(_QWORD *)(a4 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_2141D7924(&qword_254D6C940);
  v12 = sub_214385ACC();
  v26 = v11;
  v27 = a4;
  v28 = v12;
  v29 = a5;
  v13 = MEMORY[0x2199CD8C8](0, &v26, MEMORY[0x24BDF3770], 0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v22 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v22 - v18;
  v26 = sub_2144249C8();
  LOWORD(v27) = 256;
  BYTE2(v27) = 0;
  v23(a1);
  sub_214423D68();
  sub_21442492C();
  (*(void (**)(char *, uint64_t))(v24 + 8))(v10, a4);
  swift_release();
  v26 = v11;
  v27 = a4;
  v28 = v12;
  v29 = a5;
  swift_getOpaqueTypeConformance2();
  sub_2142D7304((uint64_t)v17, v13, (uint64_t)v19);
  v20 = *(void (**)(char *, uint64_t))(v14 + 8);
  v20(v17, v13);
  sub_2142D6BB0((uint64_t)v19, v13, v25);
  return ((uint64_t (*)(char *, uint64_t))v20)(v19, v13);
}

uint64_t sub_214384C10(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 16);
  sub_2141D7924(&qword_254D6C920);
  v2 = sub_214424110();
  v4[0] = v1;
  v4[1] = sub_2141D9054(&qword_254D6C928, &qword_254D6C920, MEMORY[0x24BDF1248]);
  return MEMORY[0x2199CD934](MEMORY[0x24BDED308], v2, v4);
}

uint64_t sub_214384C94(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];
  _QWORD v7[2];

  v1 = *(_QWORD *)(a1 + 16);
  sub_2141D7924(&qword_254D6C920);
  v2 = sub_214424110();
  sub_2141D7924(&qword_254D6C930);
  v3 = sub_214424110();
  v7[0] = v1;
  v7[1] = sub_2141D9054(&qword_254D6C928, &qword_254D6C920, MEMORY[0x24BDF1248]);
  v4 = MEMORY[0x24BDED308];
  v6[0] = MEMORY[0x2199CD934](MEMORY[0x24BDED308], v2, v7);
  v6[1] = sub_2141D9054(&qword_254D6C938, &qword_254D6C930, MEMORY[0x24BDF1028]);
  return MEMORY[0x2199CD934](v4, v3, v6);
}

uint64_t destroy for ChartSelectionConfiguration(uint64_t result)
{
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)result;
  if (*(unsigned __int8 *)(result + 40) != 255)
    result = _s6Charts15AnyChartContentVwxx_0(result);
  if (v1[88] != 255)
    result = _s6Charts15AnyChartContentVwxx_0((uint64_t)(v1 + 48));
  if (v1[136] != 255)
    result = _s6Charts15AnyChartContentVwxx_0((uint64_t)(v1 + 96));
  if (v1[184] != 255)
    result = _s6Charts15AnyChartContentVwxx_0((uint64_t)(v1 + 144));
  if (v1[232] != 255)
    result = _s6Charts15AnyChartContentVwxx_0((uint64_t)(v1 + 192));
  if (v1[280] != 255)
    return _s6Charts15AnyChartContentVwxx_0((uint64_t)(v1 + 240));
  return result;
}

uint64_t initializeWithCopy for ChartSelectionConfiguration(uint64_t a1, uint64_t a2)
{
  int v4;
  __int128 v5;
  __int128 v6;
  _OWORD *v7;
  _OWORD *v8;
  int v9;
  __int128 v10;
  __int128 v11;
  _OWORD *v12;
  _OWORD *v13;
  int v14;
  __int128 v15;
  __int128 v16;
  _OWORD *v17;
  _OWORD *v18;
  int v19;
  __int128 v20;
  __int128 v21;
  _OWORD *v22;
  _OWORD *v23;
  int v24;
  __int128 v25;
  __int128 v26;
  BOOL *v27;
  _OWORD *v28;
  _OWORD *v29;
  int v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;

  v4 = *(unsigned __int8 *)(a2 + 40);
  if (v4 == 255)
  {
    v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
    *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v6;
    if ((v4 & 1) != 0)
    {
      (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1, a2);
      *(_BYTE *)(a1 + 40) = 1;
    }
    else
    {
      (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1, a2);
      *(_BYTE *)(a1 + 40) = 0;
    }
  }
  v7 = (_OWORD *)(a1 + 48);
  v8 = (_OWORD *)(a2 + 48);
  v9 = *(unsigned __int8 *)(a2 + 88);
  if (v9 == 255)
  {
    v10 = *(_OWORD *)(a2 + 64);
    *v7 = *v8;
    *(_OWORD *)(a1 + 64) = v10;
    *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 + 73);
  }
  else
  {
    v11 = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 72) = v11;
    (**(void (***)(_OWORD *, _OWORD *))(v11 - 8))(v7, v8);
    *(_BYTE *)(a1 + 88) = (v9 & 1) != 0;
  }
  v12 = (_OWORD *)(a1 + 96);
  v13 = (_OWORD *)(a2 + 96);
  v14 = *(unsigned __int8 *)(a2 + 136);
  if (v14 == 255)
  {
    v15 = *(_OWORD *)(a2 + 112);
    *v12 = *v13;
    *(_OWORD *)(a1 + 112) = v15;
    *(_OWORD *)(a1 + 121) = *(_OWORD *)(a2 + 121);
  }
  else
  {
    v16 = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 120) = v16;
    (**(void (***)(_OWORD *, _OWORD *))(v16 - 8))(v12, v13);
    *(_BYTE *)(a1 + 136) = (v14 & 1) != 0;
  }
  v17 = (_OWORD *)(a1 + 144);
  v18 = (_OWORD *)(a2 + 144);
  v19 = *(unsigned __int8 *)(a2 + 184);
  if (v19 == 255)
  {
    v20 = *(_OWORD *)(a2 + 160);
    *v17 = *v18;
    *(_OWORD *)(a1 + 160) = v20;
    *(_OWORD *)(a1 + 169) = *(_OWORD *)(a2 + 169);
  }
  else
  {
    v21 = *(_OWORD *)(a2 + 168);
    *(_OWORD *)(a1 + 168) = v21;
    (**(void (***)(_OWORD *, _OWORD *))(v21 - 8))(v17, v18);
    *(_BYTE *)(a1 + 184) = (v19 & 1) != 0;
  }
  v22 = (_OWORD *)(a1 + 192);
  v23 = (_OWORD *)(a2 + 192);
  v24 = *(unsigned __int8 *)(a2 + 232);
  if (v24 == 255)
  {
    v25 = *(_OWORD *)(a2 + 208);
    *v22 = *v23;
    *(_OWORD *)(a1 + 208) = v25;
    *(_OWORD *)(a1 + 217) = *(_OWORD *)(a2 + 217);
  }
  else
  {
    v26 = *(_OWORD *)(a2 + 216);
    *(_OWORD *)(a1 + 216) = v26;
    (**(void (***)(_OWORD *, _OWORD *))(v26 - 8))(v22, v23);
    *(_BYTE *)(a1 + 232) = (v24 & 1) != 0;
  }
  v27 = (BOOL *)(a1 + 280);
  v28 = (_OWORD *)(a1 + 240);
  v29 = (_OWORD *)(a2 + 240);
  v30 = *(unsigned __int8 *)(a2 + 280);
  if (v30 == 255)
  {
    v31 = *(_OWORD *)(a2 + 256);
    *v28 = *v29;
    *(_OWORD *)(a1 + 256) = v31;
    *(_OWORD *)(a1 + 265) = *(_OWORD *)(a2 + 265);
  }
  else
  {
    v32 = *(_QWORD *)(a2 + 264);
    v33 = *(_QWORD *)(a2 + 272);
    *(_QWORD *)(a1 + 264) = v32;
    *(_QWORD *)(a1 + 272) = v33;
    (**(void (***)(_OWORD *, _OWORD *))(v32 - 8))(v28, v29);
    *v27 = (v30 & 1) != 0;
  }
  *(_WORD *)(a1 + 281) = *(_WORD *)(a2 + 281);
  return a1;
}

uint64_t assignWithCopy for ChartSelectionConfiguration(uint64_t a1, __int128 *a2)
{
  int v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;
  __int128 *v12;
  int v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  __int128 *v19;
  __int128 *v20;
  int v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  __int128 *v27;
  __int128 *v28;
  int v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  __int128 *v35;
  __int128 *v36;
  int v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  __int128 *v43;
  __int128 *v44;
  BOOL *v45;
  int v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;

  v4 = *((unsigned __int8 *)a2 + 40);
  if (*(unsigned __int8 *)(a1 + 40) == 255)
  {
    if (v4 == 255)
    {
      v7 = *a2;
      v8 = a2[1];
      *(_OWORD *)(a1 + 25) = *(__int128 *)((char *)a2 + 25);
      *(_OWORD *)a1 = v7;
      *(_OWORD *)(a1 + 16) = v8;
      goto LABEL_11;
    }
    if ((v4 & 1) != 0)
      goto LABEL_8;
LABEL_10:
    v10 = *((_QWORD *)a2 + 3);
    *(_QWORD *)(a1 + 24) = v10;
    *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
    (**(void (***)(uint64_t, __int128 *))(v10 - 8))(a1, a2);
    *(_BYTE *)(a1 + 40) = 0;
    goto LABEL_11;
  }
  if (v4 == 255)
  {
    sub_2141E61B0(a1);
    v5 = *(__int128 *)((char *)a2 + 25);
    v6 = a2[1];
    *(_OWORD *)a1 = *a2;
    *(_OWORD *)(a1 + 16) = v6;
    *(_OWORD *)(a1 + 25) = v5;
    goto LABEL_11;
  }
  if ((__int128 *)a1 != a2)
  {
    sub_2141E61B0(a1);
    if ((*((_BYTE *)a2 + 40) & 1) != 0)
    {
LABEL_8:
      v9 = *((_QWORD *)a2 + 3);
      *(_QWORD *)(a1 + 24) = v9;
      *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
      (**(void (***)(uint64_t, __int128 *))(v9 - 8))(a1, a2);
      *(_BYTE *)(a1 + 40) = 1;
      goto LABEL_11;
    }
    goto LABEL_10;
  }
LABEL_11:
  v11 = (__int128 *)(a1 + 48);
  v12 = a2 + 3;
  v13 = *((unsigned __int8 *)a2 + 88);
  if (*(unsigned __int8 *)(a1 + 88) == 255)
  {
    if (v13 == 255)
    {
      v16 = *v12;
      v17 = a2[4];
      *(_OWORD *)(a1 + 73) = *(__int128 *)((char *)a2 + 73);
      *v11 = v16;
      *(_OWORD *)(a1 + 64) = v17;
      goto LABEL_21;
    }
    goto LABEL_18;
  }
  if (v13 == 255)
  {
    sub_2141E625C(a1 + 48);
    v14 = *(__int128 *)((char *)a2 + 73);
    v15 = a2[4];
    *v11 = *v12;
    *(_OWORD *)(a1 + 64) = v15;
    *(_OWORD *)(a1 + 73) = v14;
    goto LABEL_21;
  }
  if ((__int128 *)a1 != a2)
  {
    sub_2141E625C(a1 + 48);
    LOBYTE(v13) = *((_BYTE *)a2 + 88);
LABEL_18:
    v18 = *((_QWORD *)a2 + 9);
    *(_QWORD *)(a1 + 72) = v18;
    *(_QWORD *)(a1 + 80) = *((_QWORD *)a2 + 10);
    (**(void (***)(uint64_t, uint64_t))(v18 - 8))(a1 + 48, (uint64_t)(a2 + 3));
    *(_BYTE *)(a1 + 88) = (v13 & 1) != 0;
  }
LABEL_21:
  v19 = (__int128 *)(a1 + 96);
  v20 = a2 + 6;
  v21 = *((unsigned __int8 *)a2 + 136);
  if (*(unsigned __int8 *)(a1 + 136) == 255)
  {
    if (v21 == 255)
    {
      v24 = *v20;
      v25 = a2[7];
      *(_OWORD *)(a1 + 121) = *(__int128 *)((char *)a2 + 121);
      *v19 = v24;
      *(_OWORD *)(a1 + 112) = v25;
      goto LABEL_31;
    }
    goto LABEL_28;
  }
  if (v21 == 255)
  {
    sub_2141E61B0(a1 + 96);
    v22 = *(__int128 *)((char *)a2 + 121);
    v23 = a2[7];
    *v19 = *v20;
    *(_OWORD *)(a1 + 112) = v23;
    *(_OWORD *)(a1 + 121) = v22;
    goto LABEL_31;
  }
  if ((__int128 *)a1 != a2)
  {
    sub_2141E61B0(a1 + 96);
    LOBYTE(v21) = *((_BYTE *)a2 + 136);
LABEL_28:
    v26 = *((_QWORD *)a2 + 15);
    *(_QWORD *)(a1 + 120) = v26;
    *(_QWORD *)(a1 + 128) = *((_QWORD *)a2 + 16);
    (**(void (***)(uint64_t, uint64_t))(v26 - 8))(a1 + 96, (uint64_t)(a2 + 6));
    *(_BYTE *)(a1 + 136) = (v21 & 1) != 0;
  }
LABEL_31:
  v27 = (__int128 *)(a1 + 144);
  v28 = a2 + 9;
  v29 = *((unsigned __int8 *)a2 + 184);
  if (*(unsigned __int8 *)(a1 + 184) == 255)
  {
    if (v29 == 255)
    {
      v32 = *v28;
      v33 = a2[10];
      *(_OWORD *)(a1 + 169) = *(__int128 *)((char *)a2 + 169);
      *v27 = v32;
      *(_OWORD *)(a1 + 160) = v33;
      goto LABEL_41;
    }
    goto LABEL_38;
  }
  if (v29 == 255)
  {
    sub_2141E625C(a1 + 144);
    v30 = *(__int128 *)((char *)a2 + 169);
    v31 = a2[10];
    *v27 = *v28;
    *(_OWORD *)(a1 + 160) = v31;
    *(_OWORD *)(a1 + 169) = v30;
    goto LABEL_41;
  }
  if ((__int128 *)a1 != a2)
  {
    sub_2141E625C(a1 + 144);
    LOBYTE(v29) = *((_BYTE *)a2 + 184);
LABEL_38:
    v34 = *((_QWORD *)a2 + 21);
    *(_QWORD *)(a1 + 168) = v34;
    *(_QWORD *)(a1 + 176) = *((_QWORD *)a2 + 22);
    (**(void (***)(uint64_t, uint64_t))(v34 - 8))(a1 + 144, (uint64_t)(a2 + 9));
    *(_BYTE *)(a1 + 184) = (v29 & 1) != 0;
  }
LABEL_41:
  v35 = (__int128 *)(a1 + 192);
  v36 = a2 + 12;
  v37 = *((unsigned __int8 *)a2 + 232);
  if (*(unsigned __int8 *)(a1 + 232) == 255)
  {
    if (v37 == 255)
    {
      v40 = *v36;
      v41 = a2[13];
      *(_OWORD *)(a1 + 217) = *(__int128 *)((char *)a2 + 217);
      *v35 = v40;
      *(_OWORD *)(a1 + 208) = v41;
      goto LABEL_51;
    }
    goto LABEL_48;
  }
  if (v37 == 255)
  {
    sub_2141E61B0(a1 + 192);
    v38 = *(__int128 *)((char *)a2 + 217);
    v39 = a2[13];
    *v35 = *v36;
    *(_OWORD *)(a1 + 208) = v39;
    *(_OWORD *)(a1 + 217) = v38;
    goto LABEL_51;
  }
  if ((__int128 *)a1 != a2)
  {
    sub_2141E61B0(a1 + 192);
    LOBYTE(v37) = *((_BYTE *)a2 + 232);
LABEL_48:
    v42 = *((_QWORD *)a2 + 27);
    *(_QWORD *)(a1 + 216) = v42;
    *(_QWORD *)(a1 + 224) = *((_QWORD *)a2 + 28);
    (**(void (***)(uint64_t, uint64_t))(v42 - 8))(a1 + 192, (uint64_t)(a2 + 12));
    *(_BYTE *)(a1 + 232) = (v37 & 1) != 0;
  }
LABEL_51:
  v43 = (__int128 *)(a1 + 240);
  v44 = a2 + 15;
  v45 = (BOOL *)(a1 + 280);
  v46 = *((unsigned __int8 *)a2 + 280);
  if (*(unsigned __int8 *)(a1 + 280) == 255)
  {
    if (v46 == 255)
    {
      v49 = *v44;
      v50 = a2[16];
      *(_OWORD *)(a1 + 265) = *(__int128 *)((char *)a2 + 265);
      *v43 = v49;
      *(_OWORD *)(a1 + 256) = v50;
      goto LABEL_61;
    }
  }
  else
  {
    if (v46 == 255)
    {
      sub_2141E625C(a1 + 240);
      v47 = *(__int128 *)((char *)a2 + 265);
      v48 = a2[16];
      *v43 = *v44;
      *(_OWORD *)(a1 + 256) = v48;
      *(_OWORD *)(a1 + 265) = v47;
      goto LABEL_61;
    }
    if ((__int128 *)a1 == a2)
      goto LABEL_61;
    sub_2141E625C(a1 + 240);
    LOBYTE(v46) = *((_BYTE *)a2 + 280);
  }
  v51 = *((_QWORD *)a2 + 33);
  *(_QWORD *)(a1 + 264) = v51;
  *(_QWORD *)(a1 + 272) = *((_QWORD *)a2 + 34);
  (**(void (***)(uint64_t, uint64_t))(v51 - 8))(a1 + 240, (uint64_t)(a2 + 15));
  *v45 = (v46 & 1) != 0;
LABEL_61:
  *(_BYTE *)(a1 + 281) = *((_BYTE *)a2 + 281);
  *(_BYTE *)(a1 + 282) = *((_BYTE *)a2 + 282);
  return a1;
}

void *initializeWithTake for ChartSelectionConfiguration(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x11BuLL);
}

uint64_t assignWithTake for ChartSelectionConfiguration(uint64_t a1, uint64_t a2)
{
  __int128 v5;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  if (*(unsigned __int8 *)(a1 + 40) == 255)
    goto LABEL_7;
  if (*(unsigned __int8 *)(a2 + 40) == 255 || a1 != a2)
  {
    sub_2141E61B0(a1);
LABEL_7:
    v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
    *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  }
  if (*(unsigned __int8 *)(a1 + 88) == 255)
  {
LABEL_14:
    v7 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v7;
    *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 + 73);
    goto LABEL_15;
  }
  if (*(unsigned __int8 *)(a2 + 88) == 255 || a1 != a2)
  {
    sub_2141E625C(a1 + 48);
    goto LABEL_14;
  }
LABEL_15:
  if (*(unsigned __int8 *)(a1 + 136) == 255)
  {
LABEL_19:
    v8 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v8;
    *(_OWORD *)(a1 + 121) = *(_OWORD *)(a2 + 121);
    goto LABEL_20;
  }
  if (*(unsigned __int8 *)(a2 + 136) == 255 || a1 != a2)
  {
    sub_2141E61B0(a1 + 96);
    goto LABEL_19;
  }
LABEL_20:
  if (*(unsigned __int8 *)(a1 + 184) == 255)
  {
LABEL_24:
    v9 = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 160) = v9;
    *(_OWORD *)(a1 + 169) = *(_OWORD *)(a2 + 169);
    goto LABEL_25;
  }
  if (*(unsigned __int8 *)(a2 + 184) == 255 || a1 != a2)
  {
    sub_2141E625C(a1 + 144);
    goto LABEL_24;
  }
LABEL_25:
  if (*(unsigned __int8 *)(a1 + 232) == 255)
  {
LABEL_29:
    v10 = *(_OWORD *)(a2 + 208);
    *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
    *(_OWORD *)(a1 + 208) = v10;
    *(_OWORD *)(a1 + 217) = *(_OWORD *)(a2 + 217);
    goto LABEL_30;
  }
  if (*(unsigned __int8 *)(a2 + 232) == 255 || a1 != a2)
  {
    sub_2141E61B0(a1 + 192);
    goto LABEL_29;
  }
LABEL_30:
  if (*(unsigned __int8 *)(a1 + 280) == 255)
  {
LABEL_34:
    v11 = *(_OWORD *)(a2 + 256);
    *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
    *(_OWORD *)(a1 + 256) = v11;
    *(_OWORD *)(a1 + 265) = *(_OWORD *)(a2 + 265);
    goto LABEL_35;
  }
  if (*(unsigned __int8 *)(a2 + 280) == 255 || a1 != a2)
  {
    sub_2141E625C(a1 + 240);
    goto LABEL_34;
  }
LABEL_35:
  *(_BYTE *)(a1 + 281) = *(_BYTE *)(a2 + 281);
  *(_BYTE *)(a1 + 282) = *(_BYTE *)(a2 + 282);
  return a1;
}

uint64_t getEnumTagSinglePayload for ChartSelectionConfiguration(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 283))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 281);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ChartSelectionConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 282) = 0;
    *(_WORD *)(result + 280) = 0;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 283) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 283) = 0;
    if (a2)
      *(_BYTE *)(result + 281) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for ChartSelectionConfiguration()
{
  return &type metadata for ChartSelectionConfiguration;
}

ValueMetadata *type metadata accessor for ChartGestureConfiguration()
{
  return &type metadata for ChartGestureConfiguration;
}

BOOL sub_214385774(uint64_t a1, uint64_t a2)
{
  char v4;
  char v5;
  uint64_t *v6;
  _BYTE v8[48];
  _BYTE v9[48];
  _BYTE v10[40];
  unsigned __int8 v11;
  _BYTE v12[40];
  unsigned __int8 v13;
  _BYTE v14[48];
  _BYTE v15[48];

  sub_2141E070C(a1, (uint64_t)v15, &qword_253F13C28);
  sub_2141E070C(a2, (uint64_t)v14, &qword_253F13C28);
  sub_2141E070C((uint64_t)v15, (uint64_t)v10, &qword_253F13C28);
  sub_2141E070C((uint64_t)v14, (uint64_t)v12, &qword_253F13C28);
  if (v11 != 255)
  {
    sub_2141E070C((uint64_t)v10, (uint64_t)v9, &qword_253F13C28);
    if (v13 != 255)
    {
      sub_2141E6174((uint64_t)v12, (uint64_t)v8);
      v4 = sub_214400374((uint64_t)v9, (uint64_t)v8);
      sub_2141E61B0((uint64_t)v8);
      sub_2141E0750((uint64_t)v14, &qword_253F13C28);
      sub_2141E0750((uint64_t)v15, &qword_253F13C28);
      sub_2141E61B0((uint64_t)v9);
      sub_2141E0750((uint64_t)v10, &qword_253F13C28);
      if ((v4 & 1) == 0)
        return 0;
      goto LABEL_7;
    }
    sub_2141E0750((uint64_t)v14, &qword_253F13C28);
    sub_2141E0750((uint64_t)v15, &qword_253F13C28);
    sub_2141E61B0((uint64_t)v9);
LABEL_12:
    v6 = (uint64_t *)&unk_253F12050;
    goto LABEL_18;
  }
  sub_2141E0750((uint64_t)v14, &qword_253F13C28);
  sub_2141E0750((uint64_t)v15, &qword_253F13C28);
  if (v13 != 255)
    goto LABEL_12;
  sub_2141E0750((uint64_t)v10, &qword_253F13C28);
LABEL_7:
  sub_2141E070C(a1 + 48, (uint64_t)v15, &qword_253F154C0);
  sub_2141E070C(a2 + 48, (uint64_t)v14, &qword_253F154C0);
  sub_2141E070C((uint64_t)v15, (uint64_t)v10, &qword_253F154C0);
  sub_2141E070C((uint64_t)v14, (uint64_t)v12, &qword_253F154C0);
  if (v11 == 255)
  {
    sub_2141E0750((uint64_t)v14, &qword_253F154C0);
    sub_2141E0750((uint64_t)v15, &qword_253F154C0);
    if (v13 == 255)
    {
      sub_2141E0750((uint64_t)v10, &qword_253F154C0);
      return 1;
    }
  }
  else
  {
    sub_2141E070C((uint64_t)v10, (uint64_t)v9, &qword_253F154C0);
    if (v13 != 255)
    {
      sub_2141E61E4((uint64_t)v12, (uint64_t)v8);
      v5 = sub_2144004B8((uint64_t)v9, (uint64_t)v8);
      sub_2141E625C((uint64_t)v8);
      sub_2141E0750((uint64_t)v14, &qword_253F154C0);
      sub_2141E0750((uint64_t)v15, &qword_253F154C0);
      sub_2141E625C((uint64_t)v9);
      sub_2141E0750((uint64_t)v10, &qword_253F154C0);
      return (v5 & 1) != 0;
    }
    sub_2141E0750((uint64_t)v14, &qword_253F154C0);
    sub_2141E0750((uint64_t)v15, &qword_253F154C0);
    sub_2141E625C((uint64_t)v9);
  }
  v6 = (uint64_t *)&unk_253F12048;
LABEL_18:
  sub_2141E0750((uint64_t)v10, v6);
  return 0;
}

uint64_t sub_214385A40(uint64_t a1, uint64_t a2)
{
  char v4;

  if (sub_214385774(a1, a2) && sub_214385774(a1 + 96, a2 + 96) && sub_214385774(a1 + 192, a2 + 192))
    v4 = (*(_BYTE *)(a1 + 281) ^ *(_BYTE *)(a2 + 281) | *(_BYTE *)(a1 + 282) ^ *(_BYTE *)(a2 + 282)) ^ 1;
  else
    v4 = 0;
  return v4 & 1;
}

uint64_t sub_214385ABC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_214384A34(a1, *(void (**)(uint64_t))(v2 + 48), *(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 40), a2);
}

unint64_t sub_214385ACC()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_254D6C948;
  if (!qword_254D6C948)
  {
    v1 = sub_2141D7924(&qword_254D6C940);
    v2[0] = sub_2141D9054(&qword_254D6C950, &qword_254D6C958, MEMORY[0x24BDEB358]);
    v2[1] = sub_2141D9054(&qword_253F15BB8, &qword_253F15BC0, MEMORY[0x24BDEFAD8]);
    result = MEMORY[0x2199CD934](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&qword_254D6C948);
  }
  return result;
}

unint64_t sub_214385B68()
{
  unint64_t result;

  result = qword_254D6C960;
  if (!qword_254D6C960)
  {
    result = MEMORY[0x2199CD934](&protocol conformance descriptor for ChartPlotContent, &type metadata for ChartPlotContent);
    atomic_store(result, (unint64_t *)&qword_254D6C960);
  }
  return result;
}

unint64_t sub_214385BAC()
{
  unint64_t result;

  result = qword_253F15498;
  if (!qword_253F15498)
  {
    result = MEMORY[0x2199CD934](&unk_21442F320, &type metadata for ChartSelectionConfigurationKey);
    atomic_store(result, (unint64_t *)&qword_253F15498);
  }
  return result;
}

ValueMetadata *type metadata accessor for ChartGestureConfigurationKey()
{
  return &type metadata for ChartGestureConfigurationKey;
}

ValueMetadata *type metadata accessor for ChartSelectionConfigurationKey()
{
  return &type metadata for ChartSelectionConfigurationKey;
}

uint64_t getEnumTagSinglePayload for ChartSelectionState(unsigned __int16 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 65281 <= 0xFFFEFFFF)
    v2 = 2;
  else
    v2 = 4;
  if (a2 + 65281 < 0xFF0000)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 16)) - 65281;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
      return (*a1 | (v4 << 16)) - 65281;
    }
    v4 = *((unsigned __int8 *)a1 + 2);
    if (*((_BYTE *)a1 + 2))
      return (*a1 | (v4 << 16)) - 65281;
  }
LABEL_17:
  v6 = *(unsigned __int8 *)a1;
  v7 = v6 >= 2;
  v8 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ChartSelectionState(_WORD *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 65281 <= 0xFFFEFFFF)
    v3 = 2;
  else
    v3 = 4;
  if (a3 + 65281 < 0xFF0000)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_214385D00 + 4 * byte_21442F125[v4]))();
  *a1 = a2 - 255;
  return ((uint64_t (*)(void))((char *)sub_214385D34 + 4 * byte_21442F120[v4]))();
}

uint64_t sub_214385D34(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_214385D3C(uint64_t result, int a2)
{
  *(_WORD *)(result + 2) = 0;
  if (a2)
    JUMPOUT(0x214385D44);
  return result;
}

uint64_t sub_214385D50(uint64_t result, int a2)
{
  *(_DWORD *)(result + 2) = 0;
  if (!a2)
    JUMPOUT(0x214385D58);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_214385D5C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_214385D64(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 2) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ChartSelectionState()
{
  return &type metadata for ChartSelectionState;
}

uint64_t destroy for ChartSelectionAxisConfiguration(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  if (*(unsigned __int8 *)(result + 40) != 255)
    result = _s6Charts15AnyChartContentVwxx_0(result);
  if (*(unsigned __int8 *)(v1 + 88) != 255)
    return _s6Charts15AnyChartContentVwxx_0(v1 + 48);
  return result;
}

uint64_t initializeWithCopy for ChartSelectionAxisConfiguration(uint64_t a1, uint64_t a2)
{
  int v4;
  __int128 v5;
  __int128 v6;
  _OWORD *v7;
  _OWORD *v8;
  int v9;
  __int128 v10;
  __int128 v11;

  v4 = *(unsigned __int8 *)(a2 + 40);
  if (v4 == 255)
  {
    v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
    *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v6;
    if ((v4 & 1) != 0)
    {
      (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1, a2);
      *(_BYTE *)(a1 + 40) = 1;
    }
    else
    {
      (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1, a2);
      *(_BYTE *)(a1 + 40) = 0;
    }
  }
  v7 = (_OWORD *)(a1 + 48);
  v8 = (_OWORD *)(a2 + 48);
  v9 = *(unsigned __int8 *)(a2 + 88);
  if (v9 == 255)
  {
    v10 = *(_OWORD *)(a2 + 64);
    *v7 = *v8;
    *(_OWORD *)(a1 + 64) = v10;
    *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 + 73);
  }
  else
  {
    v11 = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 72) = v11;
    (**(void (***)(_OWORD *, _OWORD *))(v11 - 8))(v7, v8);
    *(_BYTE *)(a1 + 88) = (v9 & 1) != 0;
  }
  return a1;
}

uint64_t assignWithCopy for ChartSelectionAxisConfiguration(uint64_t a1, __int128 *a2)
{
  int v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;
  __int128 *v12;
  int v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  v4 = *((unsigned __int8 *)a2 + 40);
  if (*(unsigned __int8 *)(a1 + 40) == 255)
  {
    if (v4 == 255)
    {
      v7 = *a2;
      v8 = a2[1];
      *(_OWORD *)(a1 + 25) = *(__int128 *)((char *)a2 + 25);
      *(_OWORD *)a1 = v7;
      *(_OWORD *)(a1 + 16) = v8;
      goto LABEL_11;
    }
    if ((v4 & 1) != 0)
      goto LABEL_8;
LABEL_10:
    v10 = *((_QWORD *)a2 + 3);
    *(_QWORD *)(a1 + 24) = v10;
    *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
    (**(void (***)(uint64_t, __int128 *))(v10 - 8))(a1, a2);
    *(_BYTE *)(a1 + 40) = 0;
    goto LABEL_11;
  }
  if (v4 == 255)
  {
    sub_2141E61B0(a1);
    v5 = *(__int128 *)((char *)a2 + 25);
    v6 = a2[1];
    *(_OWORD *)a1 = *a2;
    *(_OWORD *)(a1 + 16) = v6;
    *(_OWORD *)(a1 + 25) = v5;
    goto LABEL_11;
  }
  if ((__int128 *)a1 != a2)
  {
    sub_2141E61B0(a1);
    if ((*((_BYTE *)a2 + 40) & 1) != 0)
    {
LABEL_8:
      v9 = *((_QWORD *)a2 + 3);
      *(_QWORD *)(a1 + 24) = v9;
      *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
      (**(void (***)(uint64_t, __int128 *))(v9 - 8))(a1, a2);
      *(_BYTE *)(a1 + 40) = 1;
      goto LABEL_11;
    }
    goto LABEL_10;
  }
LABEL_11:
  v11 = (__int128 *)(a1 + 48);
  v12 = a2 + 3;
  v13 = *((unsigned __int8 *)a2 + 88);
  if (*(unsigned __int8 *)(a1 + 88) == 255)
  {
    if (v13 == 255)
    {
      v16 = *v12;
      v17 = a2[4];
      *(_OWORD *)(a1 + 73) = *(__int128 *)((char *)a2 + 73);
      *v11 = v16;
      *(_OWORD *)(a1 + 64) = v17;
      return a1;
    }
  }
  else
  {
    if (v13 == 255)
    {
      sub_2141E625C(a1 + 48);
      v14 = *(__int128 *)((char *)a2 + 73);
      v15 = a2[4];
      *v11 = *v12;
      *(_OWORD *)(a1 + 64) = v15;
      *(_OWORD *)(a1 + 73) = v14;
      return a1;
    }
    if ((__int128 *)a1 == a2)
      return a1;
    sub_2141E625C(a1 + 48);
    LOBYTE(v13) = *((_BYTE *)a2 + 88);
  }
  v18 = *((_QWORD *)a2 + 9);
  *(_QWORD *)(a1 + 72) = v18;
  *(_QWORD *)(a1 + 80) = *((_QWORD *)a2 + 10);
  (**(void (***)(uint64_t, uint64_t))(v18 - 8))(a1 + 48, (uint64_t)(a2 + 3));
  *(_BYTE *)(a1 + 88) = (v13 & 1) != 0;
  return a1;
}

uint64_t assignWithTake for ChartSelectionAxisConfiguration(uint64_t a1, uint64_t a2)
{
  __int128 v5;
  __int128 v7;

  if (*(unsigned __int8 *)(a1 + 40) == 255)
    goto LABEL_7;
  if (*(unsigned __int8 *)(a2 + 40) == 255 || a1 != a2)
  {
    sub_2141E61B0(a1);
LABEL_7:
    v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
    *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  }
  if (*(unsigned __int8 *)(a1 + 88) == 255)
  {
LABEL_14:
    v7 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v7;
    *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 + 73);
    return a1;
  }
  if (*(unsigned __int8 *)(a2 + 88) == 255 || a1 != a2)
  {
    sub_2141E625C(a1 + 48);
    goto LABEL_14;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for ChartSelectionAxisConfiguration(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 89))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = (v3 ^ 0xFF) - 1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ChartSelectionAxisConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 88) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 89) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 89) = 0;
    if (a2)
      *(_BYTE *)(result + 40) = ~(_BYTE)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ChartSelectionAxisConfiguration()
{
  return &type metadata for ChartSelectionAxisConfiguration;
}

ValueMetadata *type metadata accessor for ChartGestureConfiguration.Closure()
{
  return &type metadata for ChartGestureConfiguration.Closure;
}

unint64_t sub_2143861C0()
{
  unint64_t result;

  result = qword_254D6C968;
  if (!qword_254D6C968)
  {
    result = MEMORY[0x2199CD934](&unk_21442F1E4, &type metadata for ChartSelectionConfiguration);
    atomic_store(result, (unint64_t *)&qword_254D6C968);
  }
  return result;
}

unint64_t sub_214386204()
{
  unint64_t result;
  uint64_t v1;
  unint64_t v2;

  result = qword_254D6C970;
  if (!qword_254D6C970)
  {
    v1 = sub_2141D7924(&qword_254D6C978);
    v2 = sub_214386268();
    result = MEMORY[0x2199CD934](MEMORY[0x24BEE4AB8], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_254D6C970);
  }
  return result;
}

unint64_t sub_214386268()
{
  unint64_t result;

  result = qword_254D6C980;
  if (!qword_254D6C980)
  {
    result = MEMORY[0x2199CD934](&unk_21442F1BC, &type metadata for ChartGestureConfiguration);
    atomic_store(result, (unint64_t *)&qword_254D6C980);
  }
  return result;
}

uint64_t NumberBins.init<>(range:desiredCount:minimumStride:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v29 = a1;
  v30 = a2;
  v10 = sub_214424EC0();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v27 - v13;
  v15 = *(_QWORD *)(a4 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v17 = (char *)&v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for FloatingPointBinningUnit(0, a4, a5, v18);
  result = MEMORY[0x24BDAC7A8](v19);
  v23 = (char *)&v27 - v22;
  v24 = v30 + 1;
  if (__OFADD__(v30, 1))
  {
    __break(1u);
  }
  else
  {
    v27 = a6;
    v28 = v21;
    v25 = a3;
    v26 = v29;
    v30 = result;
    sub_2143876FC(v29, v24, v25, 1, 1, a4, a5, (uint64_t)v23);
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v17, v23, a4);
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, v26, v10);
    NumberBins.init<>(size:range:)(v17, (uint64_t)v14, a4, a5, v27);
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v25, a4);
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v26, v10);
    return (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v23, v30);
  }
  return result;
}

uint64_t type metadata accessor for FloatingPointBinningUnit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2141D8E88(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FloatingPointBinningUnit);
}

uint64_t NumberBins.index(for:)(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;

  v3 = v2;
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  v8 = type metadata accessor for NumberBins.UniformStorage(0, v5, v6, v7);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v20 - v10;
  v12 = type metadata accessor for NumberBins.Storage(0, v5, v6, v7);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (uint64_t *)((char *)&v20 - v13);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))((char *)&v20 - v13, v3, v12);
  result = swift_getEnumCaseMultiPayload();
  if (!(_DWORD)result)
    goto LABEL_5;
  if ((_DWORD)result == 1)
  {
    v8 = *v14;
    v17 = MEMORY[0x2199CC98C](*v14, v5);
    a1 = sub_214250720(a1, v17, v8, v5, v6);
    v19 = v18;
    swift_bridgeObjectRelease();
    if ((v19 & 1) == 0)
      return a1;
    __break(1u);
LABEL_5:
    (*(void (**)(char *, uint64_t *, uint64_t))(v9 + 32))(v11, v14, v8);
    a1 = (*(uint64_t (**)(uint64_t))&v11[*(int *)(v8 + 56)])(a1);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    return a1;
  }
  __break(1u);
  return result;
}

uint64_t NumberBins.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, char *, uint64_t);
  void (*v35)(char *, uint64_t);
  void (*v36)(uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(char *, char *, uint64_t);
  uint64_t v41;
  uint64_t v42;
  void (*v43)(char *, uint64_t);
  _QWORD v44[2];
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;

  v4 = v3;
  v50 = a1;
  v46 = a3;
  v6 = *(_QWORD *)(a2 + 16);
  v47 = *(_QWORD *)(v6 - 8);
  v7 = MEMORY[0x24BDAC7A8](a1);
  v49 = (char *)v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v48 = (char *)v44 - v10;
  v11 = MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)v44 - v12;
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)v44 - v14;
  v18 = *(_QWORD *)(v16 + 24);
  v17 = *(_QWORD *)(v16 + 32);
  v19 = type metadata accessor for NumberBins.UniformStorage(0, v6, v18, v17);
  v20 = *(_QWORD *)(v19 - 8);
  MEMORY[0x24BDAC7A8](v19);
  v22 = (char *)v44 - v21;
  v45 = v18;
  v23 = type metadata accessor for NumberBins.Storage(0, v6, v18, v17);
  MEMORY[0x24BDAC7A8](v23);
  v25 = (_QWORD *)((char *)v44 - v24);
  v27 = *(void (**)(char *, uint64_t, uint64_t))(v26 + 16);
  v44[1] = v4;
  v27((char *)v44 - v24, v4, v23);
  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result)
  {
    v29 = v50;
    if ((_DWORD)result != 1)
    {
LABEL_18:
      __break(1u);
      return result;
    }
    v31 = (uint64_t)v48;
    v30 = (uint64_t)v49;
    if ((v50 & 0x8000000000000000) == 0)
    {
      result = MEMORY[0x2199CC98C](*v25, v6);
      if (!__OFSUB__(result, 1))
      {
        if (result - 1 > v29)
        {
          v32 = result;
          sub_2144250B8();
          sub_2144250B8();
          v33 = v47;
          v34 = *(void (**)(uint64_t, char *, uint64_t))(v47 + 16);
          v34(v31, v15, v6);
          v34(v30, v13, v6);
          swift_bridgeObjectRelease();
          v35 = *(void (**)(char *, uint64_t))(v33 + 8);
          v35(v13, v6);
          result = ((uint64_t (*)(char *, uint64_t))v35)(v15, v6);
          if (!__OFSUB__(v32, 2))
            return sub_214232C20(v31, v30, v32 - 2 == v29, v6, v45, v46);
          goto LABEL_17;
        }
LABEL_16:
        __break(1u);
LABEL_17:
        __break(1u);
        goto LABEL_18;
      }
      goto LABEL_14;
    }
    __break(1u);
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v44[0] = v20;
  (*(void (**)(char *, _QWORD *, uint64_t))(v20 + 32))(v22, v25, v19);
  v36 = *(void (**)(uint64_t))&v22[*(int *)(v19 + 52)];
  v37 = v50;
  v36(v50);
  result = v37 + 1;
  if (__OFADD__(v37, 1))
    goto LABEL_13;
  v36(result);
  v39 = v47;
  v38 = (uint64_t)v48;
  v40 = *(void (**)(char *, char *, uint64_t))(v47 + 16);
  v40(v48, v15, v6);
  v41 = (uint64_t)v49;
  v40(v49, v13, v6);
  MEMORY[0x2199CD934](&protocol conformance descriptor for NumberBins<A>, a2);
  v42 = sub_21442522C();
  v43 = *(void (**)(char *, uint64_t))(v39 + 8);
  v43(v13, v6);
  result = ((uint64_t (*)(char *, uint64_t))v43)(v15, v6);
  if (__OFSUB__(v42, 1))
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  sub_214232C20(v38, v41, v42 - 1 == v50, v6, v45, v46);
  return (*(uint64_t (**)(char *, uint64_t))(v44[0] + 8))(v22, v19);
}

uint64_t NumberBins.thresholds.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  int EnumCaseMultiPayload;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t result;
  uint64_t *v33;
  void (*v34)(char *, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v2 = v1;
  v4 = *(_QWORD *)(a1 + 16);
  v50 = *(_QWORD *)(v4 - 8);
  v5 = MEMORY[0x24BDAC7A8](a1);
  v51 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(v5 + 24);
  v9 = type metadata accessor for ChartBinRange(0, v4, v7, v8);
  v48 = *(_QWORD *)(v9 - 8);
  v49 = v9;
  MEMORY[0x24BDAC7A8](v9);
  v41 = (char *)&v36 - v10;
  v40 = MEMORY[0x2199CD934](&protocol conformance descriptor for NumberBins<A>, a1);
  v11 = sub_214424E00();
  v39 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v38 = (char *)&v36 - v12;
  MEMORY[0x2199CD934](MEMORY[0x24BEE0670], v11);
  v13 = sub_214425604();
  v43 = *(_QWORD *)(v13 - 8);
  v14 = MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v36 - v17;
  v19 = *(_QWORD *)(a1 + 32);
  v52 = v4;
  v20 = type metadata accessor for NumberBins.Storage(0, v4, v7, v19);
  v21 = *(_QWORD *)(v20 - 8);
  MEMORY[0x24BDAC7A8](v20);
  v23 = (char *)&v36 - v22;
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))((char *)&v36 - v22, v2, v20);
  v42 = v23;
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
      return *(_QWORD *)v42;
    else
      return sub_214425040();
  }
  v36 = v21;
  v37 = v20;
  v54 = sub_214425040();
  v26 = v38;
  v46 = a1;
  v47 = v2;
  sub_214425280();
  v27 = v39;
  (*(void (**)(char *, char *, uint64_t))(v39 + 16))(v16, v26, v11);
  MEMORY[0x2199CC6F8](&v53, v11);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v26, v11);
  *(_QWORD *)&v16[*(int *)(v13 + 36)] = v53;
  (*(void (**)(char *, char *, uint64_t))(v43 + 32))(v18, v16, v13);
  v39 = v13;
  v28 = (uint64_t *)&v18[*(int *)(v13 + 36)];
  v29 = *v28;
  v30 = v18;
  sub_214424DE8();
  v31 = (uint64_t)v41;
  if (v29 == v53)
  {
LABEL_5:
    (*(void (**)(char *, uint64_t))(v43 + 8))(v30, v39);
    v25 = v54;
    (*(void (**)(char *, uint64_t))(v36 + 8))(v42, v37);
    return v25;
  }
  v44 = v11;
  v45 = v18;
  while (1)
  {
    v33 = v28;
    sub_214424DF4();
    NumberBins.subscript.getter(v29, v46, v31);
    v34 = *(void (**)(char *, uint64_t, uint64_t))(v50 + 16);
    v34(v51, v31, v52);
    sub_214425094();
    sub_21442507C();
    result = sub_21442522C();
    if (__OFSUB__(result, 1))
      break;
    v35 = v49;
    if (v29 == result - 1)
    {
      v34(v51, v31 + *(int *)(v49 + 36), v52);
      sub_21442507C();
    }
    (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v31, v35);
    v28 = v33;
    v29 = *v33;
    v30 = v45;
    sub_214424DE8();
    if (v29 == v53)
      goto LABEL_5;
  }
  __break(1u);
  return result;
}

uint64_t NumberBins.init<>(size:range:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t AssociatedTypeWitness;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, char *, uint64_t);
  void (*v26)(char *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  void (*v35)(char *, char *, uint64_t);
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t result;
  void (*v40)(char *, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  char *v43;
  void (*v44)(char *, char *, uint64_t);
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  unint64_t v58;

  v53 = a5;
  v48 = *(_QWORD *)(a4 + 16);
  v49 = a4;
  v8 = *(_QWORD *)(*(_QWORD *)(v48 + 24) + 8);
  v9 = *(_QWORD *)(*(_QWORD *)(v48 + 16) + 8);
  v10 = type metadata accessor for NumberBins.Storage(0, a3, v8, v9);
  v51 = *(_QWORD *)(v10 - 8);
  v52 = v10;
  MEMORY[0x24BDAC7A8](v10);
  v50 = (uint64_t)&v40 - v11;
  v46 = sub_214425760();
  v41 = *(_QWORD *)(v46 - 8);
  MEMORY[0x24BDAC7A8](v46);
  v43 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = v9;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v14 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v15 = *(_QWORD *)(a3 - 8);
  v16 = MEMORY[0x24BDAC7A8](v14);
  v47 = (char *)&v40 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x24BDAC7A8](v16);
  v55 = (char *)&v40 - v19;
  v20 = MEMORY[0x24BDAC7A8](v18);
  v22 = (char *)&v40 - v21;
  MEMORY[0x24BDAC7A8](v20);
  v24 = (char *)&v40 - v23;
  v25 = *(void (**)(char *, char *, uint64_t))(v15 + 16);
  v56 = a1;
  v44 = v25;
  v25((char *)&v40 - v23, a1, a3);
  swift_getAssociatedConformanceWitness();
  sub_2144257D8();
  sub_214425754();
  v42 = v8;
  LOBYTE(v9) = sub_214424E60();
  v26 = *(void (**)(char *, uint64_t))(v15 + 8);
  v26(v22, a3);
  v26(v24, a3);
  if ((v9 & 1) != 0)
  {
    v54 = a2;
    sub_214424D88();
    v27 = *MEMORY[0x24BEE38E8];
    v28 = v41;
    v40 = *(void (**)(char *, uint64_t, uint64_t))(v41 + 104);
    v29 = v43;
    v30 = v46;
    v40(v43, v27, v46);
    sub_214424D94();
    v41 = *(_QWORD *)(v28 + 8);
    ((void (*)(char *, uint64_t))v41)(v29, v30);
    v26(v22, a3);
    sub_214425160();
    v26(v24, a3);
    v42 = sub_214424EC0();
    sub_21442564C();
    sub_214424D88();
    v26(v22, a3);
    v40(v29, *MEMORY[0x24BEE38E0], v30);
    v31 = v47;
    sub_214424D94();
    ((void (*)(char *, uint64_t))v41)(v29, v30);
    v26(v24, a3);
    sub_214251E4C();
    v32 = v49;
    sub_21442561C();
    if ((v58 & 1) == 0)
    {
      v26(v31, a3);
      v34 = v56;
      v33 = v57;
      v35 = v44;
      v44(v24, v56, a3);
      v36 = v55;
      v35(v22, v55, a3);
      v37 = v50;
      sub_21438870C(v24, v22, v33, a3, v32, v50);
      (*(void (**)(uint64_t))(*(_QWORD *)(v42 - 8) + 8))(v54);
      v26(v34, a3);
      v26(v36, a3);
      v38 = v52;
      swift_storeEnumTagMultiPayload();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v51 + 32))(v53, v37, v38);
    }
  }
  else
  {
    __break(1u);
  }
  v57 = 0;
  v58 = 0xE000000000000000;
  sub_2144254D8();
  sub_214425904();
  sub_214424F20();
  swift_bridgeObjectRelease();
  sub_214424F20();
  sub_214424F20();
  sub_214424F20();
  result = sub_214425628();
  __break(1u);
  return result;
}

double sub_2143872F4(uint64_t a1, double a2, double a3, double a4, uint64_t a5, int a6)
{
  uint64_t v8;
  double v9;
  double v10;
  double v11;
  _OWORD *inited;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  double *v17;
  unint64_t v18;
  unint64_t v19;
  double v20;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  int64_t v25;
  uint64_t v26;
  char *v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  double v31;
  _BYTE v33[16];
  double *v34;
  int v35;
  char *v36;
  char *v37;
  double v38;
  double v39;

  v39 = a4;
  if (a1 <= 1)
    v8 = 1;
  else
    v8 = a1;
  v9 = (a3 - a2) / (double)v8;
  v10 = 1.0;
  if (v9 > 0.0 && (~*(_QWORD *)&v9 & 0x7FF0000000000000) != 0)
  {
    v35 = a6;
    if (v9 < a4)
      v9 = a4;
    v11 = log10(v9);
    v38 = __exp10(floor(v11));
    sub_2141D8BF8(&qword_253F15D48);
    inited = (_OWORD *)swift_initStackObject();
    inited[1] = xmmword_21442F360;
    inited[2] = xmmword_21442F370;
    inited[3] = xmmword_21442F380;
    inited[4] = xmmword_21442F390;
    MEMORY[0x24BDAC7A8](inited);
    v34 = &v38;
    v36 = (char *)sub_2142341C8((void (*)(uint64_t *__return_ptr, uint64_t *))sub_21438EC7C, (uint64_t)v33, (uint64_t)inited);
    swift_setDeallocating();
    v13 = swift_initStackObject();
    *(_OWORD *)(v13 + 16) = xmmword_2144271D0;
    *(_OWORD *)(v13 + 32) = xmmword_21442F3A0;
    MEMORY[0x24BDAC7A8](v13);
    v34 = &v38;
    v14 = sub_2142341C8((void (*)(uint64_t *__return_ptr, uint64_t *))sub_21438EA60, (uint64_t)v33, v13);
    swift_setDeallocating();
    v15 = *(_QWORD *)(v14 + 16);
    v16 = (char *)MEMORY[0x24BEE4AF8];
    if (v15)
    {
      v17 = (double *)(v14 + 32);
      do
      {
        v20 = *v17;
        if (*v17 > 10.0)
        {
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v37 = v16;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            sub_2141D3AA0(0, *((_QWORD *)v16 + 2) + 1, 1);
            v16 = v37;
          }
          v19 = *((_QWORD *)v16 + 2);
          v18 = *((_QWORD *)v16 + 3);
          if (v19 >= v18 >> 1)
          {
            sub_2141D3AA0((char *)(v18 > 1), v19 + 1, 1);
            v16 = v37;
          }
          *((_QWORD *)v16 + 2) = v19 + 1;
          *(double *)&v16[8 * v19 + 32] = v20;
        }
        ++v17;
        --v15;
      }
      while (v15);
    }
    swift_bridgeObjectRelease();
    v37 = v36;
    v22 = sub_2143EAEC0((uint64_t)v16);
    MEMORY[0x24BDAC7A8](v22);
    v34 = &v39;
    v37 = (char *)sub_2142CD4F4((uint64_t)sub_21438EA78, (uint64_t)v33, v23);
    swift_bridgeObjectRetain();
    sub_21434D0D4(&v37);
    swift_bridgeObjectRelease();
    v24 = v37;
    v25 = *((_QWORD *)v37 + 2);
    if (v25)
    {
      v37 = (char *)MEMORY[0x24BEE4AF8];
      sub_2141D4048(0, v25, 0);
      v26 = 0;
      v27 = v37;
      v28 = *((_QWORD *)v37 + 2);
      do
      {
        v29 = *(_QWORD *)&v24[8 * v26 + 32];
        v37 = v27;
        v30 = *((_QWORD *)v27 + 3);
        if (v28 >= v30 >> 1)
        {
          sub_2141D4048((char *)(v30 > 1), v28 + 1, 1);
          v27 = v37;
        }
        ++v26;
        *((_QWORD *)v27 + 2) = v28 + 1;
        *(_QWORD *)&v27[8 * v28++ + 32] = v29;
      }
      while (v25 != v26);
      swift_release();
      if (!*((_QWORD *)v27 + 2))
        goto LABEL_24;
    }
    else
    {
      swift_release();
      v27 = (char *)MEMORY[0x24BEE4AF8];
      if (!*(_QWORD *)(MEMORY[0x24BEE4AF8] + 16))
        goto LABEL_24;
    }
    sub_214332800((uint64_t)v27, v8, a2, a3);
    v10 = v31;
LABEL_24:
    swift_bridgeObjectRelease();
  }
  return v10;
}

uint64_t sub_2143876FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  void (*v40)(char *, uint64_t);
  uint64_t AssociatedConformanceWitness;
  char v42;
  uint64_t v43;
  double v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(char *, uint64_t);
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  char *v73;
  int64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(char *, uint64_t);
  char *v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  int v85;
  char *v86;
  char *v87;
  char *v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t AssociatedTypeWitness;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;

  v85 = a5;
  v83 = a4;
  v94 = a3;
  v97 = a8;
  v93 = *(_QWORD *)(a7 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v91 = (char *)&v76 - v12;
  v95 = a7;
  v13 = *(_QWORD *)(a7 + 16);
  v101 = *(_QWORD *)(*(_QWORD *)(v13 + 16) + 8);
  v14 = *(_QWORD *)(v101 + 16);
  v15 = swift_getAssociatedTypeWitness();
  v16 = MEMORY[0x24BDAC7A8](v15);
  v90 = (char *)&v76 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x24BDAC7A8](v16);
  v89 = (uint64_t)&v76 - v19;
  v20 = MEMORY[0x24BDAC7A8](v18);
  v88 = (char *)&v76 - v21;
  v22 = MEMORY[0x24BDAC7A8](v20);
  v87 = (char *)&v76 - v23;
  v24 = MEMORY[0x24BDAC7A8](v22);
  v86 = (char *)&v76 - v25;
  v26 = MEMORY[0x24BDAC7A8](v24);
  v103 = (char *)&v76 - v27;
  v28 = *(_QWORD *)(a6 - 8);
  v29 = MEMORY[0x24BDAC7A8](v26);
  v96 = (char *)&v76 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = MEMORY[0x24BDAC7A8](v29);
  v33 = (char *)&v76 - v32;
  v34 = MEMORY[0x24BDAC7A8](v31);
  v36 = (char *)&v76 - v35;
  MEMORY[0x24BDAC7A8](v34);
  v38 = (char *)&v76 - v37;
  if (a2 <= 1)
    a2 = 1;
  v102 = *(_QWORD *)(*(_QWORD *)(v13 + 24) + 8);
  sub_214424EC0();
  v84 = a1;
  sub_21442564C();
  v82 = a2;
  sub_214424DAC();
  sub_214424D88();
  v99 = v28;
  v39 = v33;
  v40 = *(void (**)(char *, uint64_t))(v28 + 8);
  v40(v39, a6);
  v40(v36, a6);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v101 = v15;
  sub_2144257D8();
  v98 = v14;
  sub_214425754();
  v42 = sub_214424E60();
  v100 = v36;
  v40(v36, a6);
  if ((v42 & 1) != 0 && (sub_214424DA0() & 1) != 0)
  {
    sub_2144257E4();
    sub_2142B585C();
    v80 = v40;
    v81 = v38;
    v43 = a6;
    sub_214424D10();
    v44 = log10(*(long double *)&v107);
    __exp10(floor(v44));
    sub_214424D28();
    sub_2141D38DC(a6, a6);
    v45 = *(_QWORD *)(v99 + 72);
    v79 = *(unsigned __int8 *)(v99 + 80);
    swift_allocObject();
    v77 = sub_214425004();
    sub_2144257D8();
    sub_214425754();
    sub_2144257D8();
    sub_214425754();
    v86 = (char *)(2 * v45);
    sub_2144257D8();
    sub_214425754();
    sub_2144257D8();
    sub_214425754();
    v78 = v45;
    sub_2144257D8();
    sub_214425754();
    sub_2144257D8();
    sub_214425754();
    v107 = sub_2141D08A8(v77);
    MEMORY[0x24BDAC7A8](v107);
    v46 = v95;
    *(&v76 - 4) = a6;
    *(&v76 - 3) = v46;
    *(&v76 - 2) = (uint64_t)v96;
    v47 = sub_214425094();
    v89 = MEMORY[0x2199CD934](MEMORY[0x24BEE12E0], v47);
    v90 = (char *)sub_2141D0320((void (*)(char *, char *))sub_21438EBB4, (uint64_t)(&v76 - 6), v47, a6, MEMORY[0x24BEE4078], v89, MEMORY[0x24BEE40A8], v48);
    v88 = 0;
    swift_bridgeObjectRelease();
    sub_2141D38DC(v43, v43);
    swift_allocObject();
    v49 = sub_214425004();
    swift_getAssociatedConformanceWitness();
    sub_2144257CC();
    sub_214425754();
    v93 = AssociatedConformanceWitness;
    sub_2144257D8();
    sub_214425754();
    v106 = sub_2141D08A8(v49);
    MEMORY[0x24BDAC7A8](v106);
    v51 = v95;
    v50 = v96;
    *(&v76 - 4) = a6;
    *(&v76 - 3) = v51;
    *(&v76 - 2) = (uint64_t)v50;
    v52 = v89;
    v54 = sub_2141D0320((void (*)(char *, char *))sub_21438EBB4, (uint64_t)(&v76 - 6), v47, a6, MEMORY[0x24BEE4078], v89, MEMORY[0x24BEE40A8], v53);
    v55 = swift_bridgeObjectRelease();
    v105 = v54;
    MEMORY[0x24BDAC7A8](v55);
    *(&v76 - 2) = a6;
    *(&v76 - 1) = v51;
    MEMORY[0x2199CD934](MEMORY[0x24BEE12F0], v47);
    sub_214425568();
    v56 = sub_214425034();
    swift_bridgeObjectRelease();
    v57 = swift_bridgeObjectRelease();
    v105 = v56;
    MEMORY[0x24BDAC7A8](v57);
    *(&v76 - 4) = v43;
    *(&v76 - 3) = v51;
    *(&v76 - 2) = v94;
    v104 = sub_214425568();
    MEMORY[0x2199CD934](MEMORY[0x24BEE12C8], v47);
    v58 = sub_214424F98();
    v59 = swift_bridgeObjectRelease();
    v104 = v58;
    MEMORY[0x24BDAC7A8](v59);
    *(&v76 - 2) = v43;
    *(&v76 - 1) = v51;
    v60 = v51;
    v102 = v43;
    v61 = v80;
    v63 = type metadata accessor for FloatingPointBinningUnit(0, v43, v60, v62);
    v65 = sub_2141D0320((void (*)(char *, char *))sub_21438EC60, (uint64_t)(&v76 - 4), v47, v63, MEMORY[0x24BEE4078], v52, MEMORY[0x24BEE40A8], v64);
    swift_bridgeObjectRelease();
    v66 = v81;
    v104 = v65;
    v67 = sub_214425094();
    MEMORY[0x2199CD934](MEMORY[0x24BEE12E0], v67);
    v68 = sub_21442525C();
    v69 = v97;
    if ((v68 & 1) != 0)
    {
      swift_bridgeObjectRelease();
      sub_2144257D8();
      v70 = v100;
      v71 = v102;
      sub_214425754();
      v61(v66, v71);
      (*(void (**)(uint64_t, char *, uint64_t))(v99 + 32))(v69, v70, v71);
      return ((uint64_t (*)(char *, uint64_t))v61)(v50, v71);
    }
    else
    {
      v74 = MEMORY[0x2199CD934](&unk_21442F628, v63);
      sub_2143E6C78(v84, v65, v83 & 1, v85 & 1, v63, v74, v69);
      swift_bridgeObjectRelease();
      v75 = v102;
      v61(v66, v102);
      return ((uint64_t (*)(char *, uint64_t))v61)(v50, v75);
    }
  }
  else
  {
    sub_2144257D8();
    v73 = v100;
    sub_214425754();
    v40(v38, a6);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v99 + 32))(v97, v73, a6);
  }
}

uint64_t type metadata accessor for NumberBins.UniformStorage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2141D8E88(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for NumberBins.UniformStorage);
}

uint64_t type metadata accessor for NumberBins.Storage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2141D8E88(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for NumberBins.Storage);
}

uint64_t sub_214388280@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char v22;
  uint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t);
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v5 = v4;
  v37 = a4;
  v36 = *(_QWORD *)(a3 + 24);
  v35 = *(_QWORD *)(v36 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v34 = (char *)&v32 - v10;
  v38 = *(_QWORD *)(a2 - 8);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x24BDAC7A8](v11);
  v16 = (char *)&v32 - v15;
  v17 = MEMORY[0x24BDAC7A8](v14);
  v19 = (char *)&v32 - v18;
  MEMORY[0x24BDAC7A8](v17);
  v21 = (char *)&v32 - v20;
  v33 = a1;
  sub_2144253B8();
  if ((sub_2144253E8() & 1) == 0)
  {
    v32 = v5;
    v22 = sub_2144253E8();
    v23 = sub_2144253DC();
    if ((v22 & 1) == 0)
    {
      if (v23 < 64 && sub_2144253D0() < 0)
        goto LABEL_16;
      goto LABEL_15;
    }
    if (v23 <= 64)
    {
      swift_getAssociatedConformanceWitness();
      sub_2144257D8();
      sub_214425754();
      v25 = sub_214424E6C();
      v26 = v38;
      v27 = *(void (**)(char *, uint64_t))(v38 + 8);
      v27(v16, a2);
      (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v13, v21, a2);
      if ((v25 & 1) != 0)
      {
        v27(v13, a2);
      }
      else
      {
        v28 = sub_2144253D0();
        v27(v13, a2);
        if ((v28 & 0x8000000000000000) == 0)
          goto LABEL_15;
      }
LABEL_16:
      v29 = v38;
      (*(void (**)(char *, uint64_t, uint64_t))(v38 + 16))(v19, v33, a2);
      goto LABEL_17;
    }
    goto LABEL_7;
  }
  if (sub_2144253DC() >= 64)
  {
LABEL_7:
    v39 = 0;
    sub_21438CED4();
    sub_2144253A0();
    v24 = sub_214424E6C();
    (*(void (**)(char *, uint64_t))(v38 + 8))(v16, a2);
    if ((v24 & 1) != 0)
      goto LABEL_16;
    goto LABEL_15;
  }
  if (sub_2144253D0() < 0)
    goto LABEL_16;
LABEL_15:
  swift_getAssociatedConformanceWitness();
  sub_2144257D8();
  sub_214425754();
  v29 = v38;
LABEL_17:
  sub_214425640();
  sub_21442564C();
  v30 = *(void (**)(char *, uint64_t))(v29 + 8);
  v30(v16, a2);
  v30(v19, a2);
  return ((uint64_t (*)(char *, uint64_t))v30)(v21, a2);
}

uint64_t sub_21438870C@<X0>(char *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void (*v16)(uint64_t, char *, uint64_t);
  uint64_t v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, char *, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t (**v30)(uint64_t);
  uint64_t v31;
  uint64_t result;
  uint64_t (**v33)(uint64_t);
  uint64_t v34;
  int *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;

  v39 = a3;
  v40 = a5;
  v38 = a6;
  v11 = *(_QWORD *)(a4 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  v13 = MEMORY[0x24BDAC7A8](a1);
  v37 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v34 - v14;
  v16 = *(void (**)(uint64_t, char *, uint64_t))(v11 + 16);
  v41 = a1;
  v16(a6, a1, v17);
  v18 = (int *)type metadata accessor for NumberBins.UniformStorage(0, a4, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a5 + 16) + 24) + 8), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a5 + 16) + 16) + 8));
  v19 = a6 + v18[11];
  v36 = a2;
  v16(v19, a2, a4);
  v20 = v18[12];
  v35 = v18;
  *(_QWORD *)(a6 + v20) = v39;
  v16((uint64_t)v15, a1, a4);
  v21 = v37;
  v16((uint64_t)v37, a2, a4);
  v22 = *(unsigned __int8 *)(v11 + 80);
  v23 = (v22 + 32) & ~v22;
  v39 = v22 | 7;
  v24 = (v12 + v22 + v23) & ~v22;
  v25 = swift_allocObject();
  v26 = v40;
  *(_QWORD *)(v25 + 16) = a4;
  *(_QWORD *)(v25 + 24) = v26;
  v27 = *(void (**)(uint64_t, char *, uint64_t))(v11 + 32);
  v27(v25 + v23, v15, a4);
  v27(v25 + v24, v21, a4);
  v28 = v18[13];
  v29 = v38;
  v30 = (uint64_t (**)(uint64_t))(v38 + v28);
  *v30 = sub_21438EAB4;
  v30[1] = (uint64_t (*)(uint64_t))v25;
  v27((uint64_t)v15, v36, a4);
  v27((uint64_t)v21, v41, a4);
  v31 = swift_allocObject();
  *(_QWORD *)(v31 + 16) = a4;
  *(_QWORD *)(v31 + 24) = v26;
  v27(v31 + v23, v15, a4);
  result = ((uint64_t (*)(uint64_t, char *, uint64_t))v27)(v31 + v24, v21, a4);
  v33 = (uint64_t (**)(uint64_t))(v29 + v35[14]);
  *v33 = sub_21438EB74;
  v33[1] = (uint64_t (*)(uint64_t))v31;
  return result;
}

uint64_t sub_214388928(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  void (*v11)(char *, uint64_t);
  uint64_t v13;

  v5 = *(_QWORD *)(a4 - 8);
  v6 = MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v13 - v9;
  sub_214424DAC();
  sub_214425160();
  v11 = *(void (**)(char *, uint64_t))(v5 + 8);
  v11(v8, a4);
  sub_214425640();
  return ((uint64_t (*)(char *, uint64_t))v11)(v10, a4);
}

uint64_t sub_214388A1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  void (*v20)(char *, uint64_t);
  uint64_t result;
  _QWORD v22[4];
  uint64_t v23;
  unint64_t v24;

  v22[2] = a3;
  v22[3] = a5;
  v22[0] = a1;
  v22[1] = a2;
  v6 = sub_214425760();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(a4 - 8);
  v12 = MEMORY[0x24BDAC7A8](v8);
  v14 = (char *)v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x24BDAC7A8](v12);
  v17 = (char *)v22 - v16;
  MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)v22 - v18;
  sub_21442564C();
  sub_214424D88();
  v20 = *(void (**)(char *, uint64_t))(v11 + 8);
  v20(v14, a4);
  (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v10, *MEMORY[0x24BEE38E8], v6);
  sub_214424D94();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  v20(v17, a4);
  sub_214251E4C();
  sub_21442561C();
  if ((v24 & 1) != 0)
  {
    v23 = 0;
    v24 = 0xE000000000000000;
    sub_2144254D8();
    sub_214425904();
    sub_214424F20();
    swift_bridgeObjectRelease();
    sub_214424F20();
    sub_214424F20();
    sub_214424F20();
    result = sub_214425628();
    __break(1u);
  }
  else
  {
    v20(v19, a4);
    return v23;
  }
  return result;
}

uint64_t sub_214388CA8@<X0>(char *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  void (*v16)(uint64_t, char *, uint64_t);
  uint64_t v17;
  int *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, char *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t (**v29)(uint64_t);
  uint64_t v30;
  uint64_t result;
  uint64_t (**v32)(uint64_t);
  int *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;

  v36 = a3;
  v38 = a2;
  v34 = a6;
  v10 = *(_QWORD *)(a4 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  v12 = MEMORY[0x24BDAC7A8](a1);
  v13 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v33 - v14;
  v16 = *(void (**)(uint64_t, char *, uint64_t))(v10 + 16);
  v37 = a1;
  v16(a6, a1, v17);
  v35 = a5;
  v18 = (int *)type metadata accessor for NumberBins.UniformStorage(0, a4, *(_QWORD *)(*(_QWORD *)(a5 + 32) + 8), *(_QWORD *)(a5 + 24));
  v19 = v38;
  v16(a6 + v18[11], v38, a4);
  v20 = v18[12];
  v33 = v18;
  *(_QWORD *)(a6 + v20) = v36;
  v16((uint64_t)v15, a1, a4);
  v16((uint64_t)v13, v19, a4);
  v21 = *(unsigned __int8 *)(v10 + 80);
  v22 = (v21 + 32) & ~v21;
  v36 = v21 | 7;
  v23 = (v11 + v21 + v22) & ~v21;
  v24 = swift_allocObject();
  v25 = v35;
  *(_QWORD *)(v24 + 16) = a4;
  *(_QWORD *)(v24 + 24) = v25;
  v26 = *(void (**)(uint64_t, char *, uint64_t))(v10 + 32);
  v26(v24 + v22, v15, a4);
  v26(v24 + v23, v13, a4);
  v27 = v18[13];
  v28 = v34;
  v29 = (uint64_t (**)(uint64_t))(v34 + v27);
  *v29 = sub_21438EA94;
  v29[1] = (uint64_t (*)(uint64_t))v24;
  v26((uint64_t)v15, v38, a4);
  v26((uint64_t)v13, v37, a4);
  v30 = swift_allocObject();
  *(_QWORD *)(v30 + 16) = a4;
  *(_QWORD *)(v30 + 24) = v25;
  v26(v30 + v22, v15, a4);
  result = ((uint64_t (*)(uint64_t, char *, uint64_t))v26)(v30 + v23, v13, a4);
  v32 = (uint64_t (**)(uint64_t))(v28 + v33[14]);
  *v32 = sub_21438EAA4;
  v32[1] = (uint64_t (*)(uint64_t))v30;
  return result;
}

uint64_t sub_214388EB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void (*v12)(char *, uint64_t);
  _QWORD v14[2];

  v5 = *(_QWORD *)(a4 - 8);
  v6 = MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x24BDAC7A8](v6);
  v11 = (char *)v14 - v10;
  v14[1] = v9;
  sub_21438CED4();
  sub_214425400();
  sub_214425160();
  v12 = *(void (**)(char *, uint64_t))(v5 + 8);
  v12(v8, a4);
  sub_214425640();
  return ((uint64_t (*)(char *, uint64_t))v12)(v11, a4);
}

uint64_t sub_214388FC4(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  void (*v30)(char *, uint64_t);
  char v31;
  void (*v32)(char *, char *, uint64_t);
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t result;
  char v48;
  uint64_t v49;
  char *v50;
  char v51;
  uint64_t v52;
  char *v53;
  int64_t v54;
  uint64_t AssociatedTypeWitness;
  char *v56;
  char *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  int64_t v66;

  v62 = a2;
  v58 = *(_QWORD *)(*(_QWORD *)(a5 + 24) + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v57 = (char *)&AssociatedTypeWitness - v9;
  v10 = *(_QWORD *)(a4 - 8);
  v11 = MEMORY[0x24BDAC7A8](v8);
  v56 = (char *)&AssociatedTypeWitness - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v64 = (char *)&AssociatedTypeWitness - v14;
  v15 = MEMORY[0x24BDAC7A8](v13);
  v63 = (char *)&AssociatedTypeWitness - v16;
  v17 = MEMORY[0x24BDAC7A8](v15);
  v61 = (char *)&AssociatedTypeWitness - v18;
  v19 = MEMORY[0x24BDAC7A8](v17);
  v21 = (char *)&AssociatedTypeWitness - v20;
  v22 = MEMORY[0x24BDAC7A8](v19);
  v24 = (char *)&AssociatedTypeWitness - v23;
  v25 = MEMORY[0x24BDAC7A8](v22);
  v27 = (char *)&AssociatedTypeWitness - v26;
  MEMORY[0x24BDAC7A8](v25);
  v29 = (char *)&AssociatedTypeWitness - v28;
  sub_21442564C();
  sub_214388280(a3, a4, a5, (uint64_t)v27);
  v30 = *(void (**)(char *, uint64_t))(v10 + 8);
  v59 = v24;
  v30(v24, a4);
  sub_2144253AC();
  v62 = v27;
  v30(v27, a4);
  v31 = sub_2144253E8();
  v60 = v10;
  v32 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
  v32(v21, v29, a4);
  if ((v31 & 1) == 0)
  {
    v30(v21, a4);
    v35 = v63;
    v34 = v64;
    goto LABEL_7;
  }
  v33 = sub_2144253DC();
  v30(v21, a4);
  v35 = v63;
  v34 = v64;
  if (v33 <= 64)
    goto LABEL_7;
  v36 = (uint64_t)v61;
  v32(v61, v29, a4);
  v66 = 0x8000000000000000;
  if ((sub_2144253E8() & 1) == 0)
  {
    v48 = sub_2144253E8();
    v49 = sub_2144253DC();
    if ((v48 & 1) == 0)
    {
      if (v49 >= 64)
      {
        v30((char *)v36, a4);
        goto LABEL_7;
      }
      goto LABEL_26;
    }
    if (v49 <= 64)
      goto LABEL_28;
LABEL_22:
    sub_21438CED4();
    v50 = v62;
    sub_2144253A0();
    v51 = sub_214424E6C();
    v30(v50, a4);
    v30((char *)v36, a4);
    if ((v51 & 1) != 0)
      goto LABEL_27;
    goto LABEL_7;
  }
  if (sub_2144253DC() >= 64)
    goto LABEL_22;
LABEL_26:
  v52 = sub_2144253D0();
  v30((char *)v36, a4);
  if (v52 < v66)
  {
LABEL_27:
    do
    {
      __break(1u);
LABEL_28:
      swift_getAssociatedConformanceWitness();
      sub_2144257D8();
      v53 = v62;
      sub_214425754();
      LODWORD(v58) = sub_214424E6C();
      v30(v53, a4);
      v41 = (uint64_t)v56;
      (*(void (**)(char *, uint64_t, uint64_t))(v60 + 32))(v56, v36, a4);
      if ((v58 & 1) != 0)
        goto LABEL_32;
      v54 = v66;
      v36 = sub_2144253D0();
      v30((char *)v41, a4);
    }
    while (v36 < v54);
  }
LABEL_7:
  v37 = sub_2144253DC();
  v32(v35, v29, a4);
  if (v37 < 65)
  {
    v43 = sub_2144253DC();
    v30(v35, a4);
    if (v43 != 64 || (sub_2144253E8() & 1) != 0)
      goto LABEL_19;
  }
  else
  {
    v30(v35, a4);
  }
  v32(v34, v29, a4);
  v66 = 0x7FFFFFFFFFFFFFFFLL;
  v38 = sub_2144253E8();
  v39 = sub_2144253DC();
  if ((v38 & 1) != 0)
  {
    if (v39 > 64)
    {
      sub_21438CED4();
      v40 = v62;
      sub_2144253A0();
      v41 = sub_214424E6C();
      v30(v40, a4);
      v42 = v34;
      goto LABEL_18;
    }
LABEL_16:
    sub_2144253D0();
    v30(v34, a4);
LABEL_19:
    v46 = sub_2144253D0();
    v30(v29, a4);
    return v46;
  }
  if (v39 <= 63)
    goto LABEL_16;
  v65 = 0x7FFFFFFFFFFFFFFFLL;
  v44 = v62;
  (*(void (**)(char *, char *, uint64_t))(v60 + 32))(v62, v34, a4);
  sub_21438CED4();
  v45 = v59;
  sub_2144253A0();
  v41 = sub_214424E6C();
  v30(v45, a4);
  v42 = v44;
LABEL_18:
  v30(v42, a4);
  if ((v41 & 1) == 0)
    goto LABEL_19;
  __break(1u);
LABEL_32:
  result = ((uint64_t (*)(uint64_t, uint64_t))v30)(v41, a4);
  __break(1u);
  return result;
}

BOOL sub_214389648(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char v18;
  void (*v19)(char *, uint64_t, uint64_t);
  char v20;
  void (*v21)(char *, uint64_t);
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;

  v7 = type metadata accessor for NumberBins.UniformStorage(0, a3, a4, a5);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v29 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v27 = (char *)&v27 - v12;
  v13 = MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v27 - v14;
  MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v27 - v16;
  v18 = sub_214424ED8();
  v19 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v28 = a1;
  v19(v17, a1, v7);
  v30 = a2;
  v19(v15, a2, v7);
  if ((v18 & 1) != 0)
    v20 = sub_214424ED8();
  else
    v20 = 0;
  v21 = *(void (**)(char *, uint64_t))(v8 + 8);
  v21(v15, v7);
  v21(v17, v7);
  v22 = v27;
  v19(v27, v28, v7);
  v23 = v29;
  v19(v29, v30, v7);
  if ((v20 & 1) != 0)
  {
    v24 = *(_QWORD *)&v22[*(int *)(v7 + 48)];
    v21(v22, v7);
    v25 = *(_QWORD *)&v23[*(int *)(v7 + 48)];
    v21(v23, v7);
    return v24 == v25;
  }
  else
  {
    v21(v23, v7);
    v21(v22, v7);
    return 0;
  }
}

uint64_t _s6Charts10NumberBinsV2eeoiySbACyxG_AEtFZ_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t TupleTypeMetadata2;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  void (*v23)(char *, uint64_t, uint64_t);
  int EnumCaseMultiPayload;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v39 = a1;
  v40 = a2;
  v8 = type metadata accessor for NumberBins.UniformStorage(0, a3, a4, a5);
  v36 = *(_QWORD *)(v8 - 8);
  v37 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v33 - v9;
  v34 = a4;
  v35 = a3;
  v11 = type metadata accessor for NumberBins.Storage(0, a3, a4, a5);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v33 - v16;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v38 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v19 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v21 = (char *)&v33 - v20;
  v22 = (char *)&v33 + *(int *)(v19 + 48) - v20;
  v23 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v23((char *)&v33 - v20, v39, v11);
  v23(v22, v40, v11);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    v40 = a5;
    v26 = v36;
    v27 = v37;
    v23(v17, (uint64_t)v21, v11);
    if (!swift_getEnumCaseMultiPayload())
    {
      v28 = v26;
      v29 = v22;
      v30 = v27;
      (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v10, v29, v27);
      v25 = sub_214389648((uint64_t)v17, (uint64_t)v10, v35, v34, v40);
      v31 = *(void (**)(char *, uint64_t))(v28 + 8);
      v31(v10, v30);
      v31(v17, v30);
      goto LABEL_12;
    }
    (*(void (**)(char *, uint64_t))(v26 + 8))(v17, v27);
    goto LABEL_10;
  }
  if (EnumCaseMultiPayload != 1)
  {
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      v25 = 1;
      goto LABEL_12;
    }
LABEL_10:
    v25 = 0;
    v12 = v38;
    v11 = TupleTypeMetadata2;
    goto LABEL_12;
  }
  v23(v15, (uint64_t)v21, v11);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  v25 = sub_2144250A0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_12:
  (*(void (**)(char *, uint64_t))(v12 + 8))(v21, v11);
  return v25 & 1;
}

BOOL sub_214389AE4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_214389648(a1, a2, a3[2], a3[3], a3[4]);
}

uint64_t sub_214389AF4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return _s6Charts10NumberBinsV2eeoiySbACyxG_AEtFZ_0(a1, a2, a3[2], a3[3], a3[4]);
}

uint64_t NumberBins.init(thresholds:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  *a5 = a1;
  type metadata accessor for NumberBins.Storage(0, a2, a3, a4);
  return swift_storeEnumTagMultiPayload();
}

uint64_t NumberBins.init<>(size:range:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char v41;
  uint64_t v42;
  char v43;
  void (*v44)(char *, uint64_t);
  uint64_t v45;
  char *v46;
  char *v47;
  char *v48;
  void (*v49)(char *, char *, uint64_t);
  char v50;
  uint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char v64;
  char *v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  char v69;
  char *v70;
  uint64_t v71;
  char v72;
  BOOL v73;
  uint64_t v74;
  uint64_t v75;
  void (*v76)(char *, uint64_t, uint64_t);
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t result;
  char v81;
  uint64_t v82;
  char *v83;
  char v84;
  char *v85;
  char v86;
  char *v87;
  char *v88;
  char v89;
  int64_t v90;
  uint64_t v91;
  BOOL v92;
  _QWORD v93[2];
  uint64_t AssociatedTypeWitness;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  char *v106;
  char *v107;
  uint64_t v108;
  void (*v109)(char *, uint64_t, uint64_t);
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  int64_t v116;

  v112 = a2;
  v103 = a5;
  v8 = *(_QWORD *)(a4 + 24);
  v108 = *(_QWORD *)(*(_QWORD *)(a4 + 32) + 8);
  v9 = type metadata accessor for NumberBins.Storage(0, a3, v108, v8);
  v101 = *(_QWORD *)(v9 - 8);
  v102 = v9;
  MEMORY[0x24BDAC7A8](v9);
  v100 = (uint64_t)v93 - v10;
  v95 = *(_QWORD *)(v8 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v93[1] = (char *)v93 - v12;
  v13 = *(_QWORD *)(a3 - 8);
  v14 = MEMORY[0x24BDAC7A8](v11);
  v96 = (char *)v93 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x24BDAC7A8](v14);
  v105 = (char *)v93 - v17;
  v18 = MEMORY[0x24BDAC7A8](v16);
  v107 = (char *)v93 - v19;
  v20 = MEMORY[0x24BDAC7A8](v18);
  v106 = (char *)v93 - v21;
  v22 = MEMORY[0x24BDAC7A8](v20);
  v98 = (char *)v93 - v23;
  v24 = MEMORY[0x24BDAC7A8](v22);
  v26 = (char *)v93 - v25;
  v27 = MEMORY[0x24BDAC7A8](v24);
  v29 = (char *)v93 - v28;
  v30 = MEMORY[0x24BDAC7A8](v27);
  v32 = (char *)v93 - v31;
  v33 = MEMORY[0x24BDAC7A8](v30);
  v114 = (char *)v93 - v34;
  v35 = MEMORY[0x24BDAC7A8](v33);
  v111 = (char *)v93 - v36;
  v37 = MEMORY[0x24BDAC7A8](v35);
  v110 = (uint64_t)v93 - v38;
  MEMORY[0x24BDAC7A8](v37);
  v40 = (char *)v93 - v39;
  v109 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v113 = a1;
  v109((char *)v93 - v39, a1, a3);
  v41 = sub_2144253E8();
  v42 = sub_2144253DC();
  v104 = v29;
  if ((v41 & 1) == 0)
    goto LABEL_5;
  if (v42 <= 64)
    goto LABEL_6;
  while (1)
  {
    v116 = 0;
    sub_21438CED4();
    sub_2144253A0();
    v43 = sub_214424E6C();
    v44 = *(void (**)(char *, uint64_t))(v13 + 8);
    v44(v32, a3);
    v42 = ((uint64_t (*)(char *, uint64_t))v44)(v40, a3);
    if ((v43 & 1) != 0)
      break;
    while (1)
    {
      __break(1u);
LABEL_5:
      if (v42 > 63)
        break;
LABEL_6:
      v45 = sub_2144253D0();
      v44 = *(void (**)(char *, uint64_t))(v13 + 8);
      v42 = ((uint64_t (*)(char *, uint64_t))v44)(v40, a3);
      if (v45 > 0)
        goto LABEL_7;
    }
  }
LABEL_7:
  v97 = v13;
  sub_214388280(v113, a3, a4, v110);
  v99 = sub_214424EC0();
  sub_21442564C();
  v46 = v111;
  sub_2144253C4();
  v44(v32, a3);
  v47 = v104;
  v48 = v46;
  v49 = (void (*)(char *, char *, uint64_t))v109;
  v109(v104, (uint64_t)v48, a3);
  v50 = sub_2144253E8();
  v49(v26, v47, a3);
  if ((v50 & 1) == 0)
  {
    v44(v26, a3);
    v53 = v105;
    v52 = v106;
    goto LABEL_13;
  }
  v51 = sub_2144253DC();
  v44(v26, a3);
  v53 = v105;
  v52 = v106;
  if (v51 <= 64)
    goto LABEL_13;
  v54 = v98;
  v49(v98, v47, a3);
  v116 = 0x8000000000000000;
  if ((sub_2144253E8() & 1) != 0)
  {
    if (sub_2144253DC() >= 64)
    {
      sub_21438CED4();
      sub_2144253A0();
      v85 = v54;
      v86 = sub_214424E6C();
      v44(v32, a3);
      v44(v85, a3);
      if ((v86 & 1) != 0)
        goto LABEL_42;
      goto LABEL_13;
    }
    v55 = sub_2144253D0();
    v56 = v54;
    v57 = v55;
    v58 = v56;
    goto LABEL_41;
  }
  v81 = sub_2144253E8();
  v82 = sub_2144253DC();
  if ((v81 & 1) == 0)
  {
    if (v82 >= 64)
    {
      v44(v98, a3);
      goto LABEL_13;
    }
    v87 = v98;
    v57 = sub_2144253D0();
    v58 = v87;
LABEL_41:
    v44(v58, a3);
    if (v57 < v116)
      goto LABEL_42;
    goto LABEL_13;
  }
  if (v82 <= 64)
    goto LABEL_43;
  sub_21438CED4();
  sub_2144253A0();
  v83 = v98;
  v84 = sub_214424E6C();
  v44(v32, a3);
  v44(v83, a3);
  if ((v84 & 1) != 0)
  {
LABEL_42:
    do
    {
      __break(1u);
LABEL_43:
      swift_getAssociatedConformanceWitness();
      sub_2144257D8();
      sub_214425754();
      v88 = v98;
      v89 = sub_214424E6C();
      v44(v32, a3);
      v62 = v96;
      (*(void (**)(char *, char *, uint64_t))(v97 + 32))(v96, v88, a3);
      if ((v89 & 1) != 0)
        goto LABEL_49;
      v90 = v116;
      v91 = sub_2144253D0();
      v44(v62, a3);
      v92 = v91 < v90;
      v52 = v106;
    }
    while (v92);
  }
LABEL_13:
  v59 = sub_2144253DC();
  v49(v52, v47, a3);
  if (v59 < 65)
  {
    v66 = sub_2144253DC();
    v44(v52, a3);
    if (v66 != 64 || (sub_2144253E8() & 1) != 0)
    {
LABEL_25:
      v68 = sub_2144253D0();
      v44(v47, a3);
      v69 = sub_2144253E8();
      v70 = v114;
      v71 = sub_2144253DC();
      if ((v69 & 1) != 0)
      {
        if (v71 >= 65)
        {
LABEL_27:
          v116 = 0;
          sub_21438CED4();
          v62 = (char *)a3;
          sub_2144253A0();
          v72 = sub_214424E6C();
          v44(v32, a3);
LABEL_30:
          v73 = __OFADD__(v68, v72 & 1);
          v74 = v68 + (v72 & 1);
          if (!v73)
          {
            v75 = v113;
            v76 = v109;
            v109(v32, v113, a3);
            v77 = v110;
            v76(v53, v110, a3);
            v78 = v100;
            sub_214388CA8(v32, v53, v74, a3, a4, v100);
            (*(void (**)(uint64_t))(*(_QWORD *)(v99 - 8) + 8))(v112);
            v44((char *)v75, a3);
            v44(v70, a3);
            v44(v111, a3);
            v44((char *)v77, a3);
            v79 = v102;
            swift_storeEnumTagMultiPayload();
            return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v101 + 32))(v103, v78, v79);
          }
          __break(1u);
          goto LABEL_48;
        }
      }
      else if (v71 > 63)
      {
        goto LABEL_27;
      }
      v62 = v70;
      v72 = sub_2144253D0() > 0;
      goto LABEL_30;
    }
  }
  else
  {
    v44(v52, a3);
  }
  v49(v107, v47, a3);
  v116 = 0x7FFFFFFFFFFFFFFFLL;
  v60 = sub_2144253E8();
  v61 = sub_2144253DC();
  if ((v60 & 1) != 0)
  {
    if (v61 > 64)
    {
      sub_21438CED4();
      v62 = (char *)a3;
      sub_2144253A0();
      v63 = v107;
      v64 = sub_214424E6C();
      v44(v32, a3);
      v65 = v63;
      goto LABEL_24;
    }
LABEL_22:
    v67 = v107;
    sub_2144253D0();
    v44(v67, a3);
    goto LABEL_25;
  }
  if (v61 <= 63)
    goto LABEL_22;
  v115 = 0x7FFFFFFFFFFFFFFFLL;
  (*(void (**)(char *, char *, uint64_t))(v97 + 32))(v32, v107, a3);
  sub_21438CED4();
  v62 = (char *)a3;
  sub_2144253A0();
  v64 = sub_214424E6C();
  v44(v53, a3);
  v65 = v32;
LABEL_24:
  v44(v65, a3);
  if ((v64 & 1) == 0)
    goto LABEL_25;
LABEL_48:
  __break(1u);
LABEL_49:
  result = ((uint64_t (*)(char *, uint64_t))v44)(v62, a3);
  __break(1u);
  return result;
}

uint64_t NumberBins.init<>(range:count:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t result;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t);
  void (*v28)(char *, uint64_t, uint64_t);
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v38 = a1;
  v39 = a5;
  v36 = a4;
  v7 = type metadata accessor for NumberBins.Storage(0, a3, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) + 24) + 8), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) + 16) + 8));
  v8 = MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v32 - v9;
  v11 = *(_QWORD *)(a3 - 8);
  v12 = MEMORY[0x24BDAC7A8](v8);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v32 - v14;
  v16 = MEMORY[0x24BDAC7A8](v13);
  v18 = (char *)&v32 - v17;
  result = MEMORY[0x24BDAC7A8](v16);
  v23 = (char *)&v32 - v22;
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    v34 = v21;
    v35 = v20;
    v37 = result;
    v24 = sub_214424EC0();
    v25 = v24;
    if (a2)
    {
      v33 = v10;
      v26 = v38;
      sub_21442564C();
      sub_214424DAC();
      sub_214424D88();
      v27 = *(void (**)(char *, uint64_t))(v11 + 8);
      v27(v15, a3);
      v27(v18, a3);
      v28 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
      v28(v18, v26, a3);
      v28(v15, (uint64_t)v23, a3);
      v29 = v34;
      v28(v34, (uint64_t)v18, a3);
      v30 = (uint64_t)v33;
      sub_21438870C(v15, v29, a2, a3, v36, (uint64_t)v33);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 8))(v26, v25);
      v27(v18, a3);
      v27(v23, a3);
      v31 = v37;
      swift_storeEnumTagMultiPayload();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v35 + 32))(v39, v30, v31);
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 8))(v38, v24);
      return swift_storeEnumTagMultiPayload();
    }
  }
  return result;
}

uint64_t NumberBins.init<>(range:count:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(_QWORD, _QWORD);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t result;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  char *v45;
  char v46;
  char *v47;
  char *v48;
  char *v49;
  void (*v50)(char *, uint64_t, uint64_t);
  char *v51;
  uint64_t v52;
  void (*v53)(char *, uint64_t);
  char *v54;
  uint64_t v55;
  void (*v56)(_QWORD, _QWORD);
  unint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t AssociatedTypeWitness;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(_QWORD, _QWORD);
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;

  v74 = a1;
  v71 = a4;
  v6 = *(_QWORD *)(a3 + 24);
  v62 = *(_QWORD *)(v6 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v59 = (char *)&v57 - v7;
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 32) + 8);
  v9 = sub_214424EC0();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v72 = (char *)&v57 - v11;
  v61 = v8;
  v12 = (void (*)(_QWORD, _QWORD))type metadata accessor for NumberBins.Storage(0, a2, v8, v6);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v73 = *(_QWORD *)(a2 - 8);
  v14 = MEMORY[0x24BDAC7A8](v13);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v57 - v16;
  MEMORY[0x24BDAC7A8](v15);
  v19 = MEMORY[0x24BDAC7A8]((char *)&v57 - v18);
  v21 = (char *)&v57 - v20;
  v22 = MEMORY[0x24BDAC7A8](v19);
  v24 = (char *)&v57 - v23;
  v25 = MEMORY[0x24BDAC7A8](v22);
  v31 = (char *)&v57 - v30;
  if (v27 < 0)
  {
    __break(1u);
    goto LABEL_21;
  }
  if (!v27)
  {
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v74, v9);
    return swift_storeEnumTagMultiPayload();
  }
  v58 = v26;
  v64 = (char *)v25;
  v65 = v29;
  v66 = v28;
  v67 = v12;
  v69 = v10;
  v32 = v27;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v72, v74, v9);
  v68 = v9;
  v63 = *(_QWORD *)(v6 + 8);
  sub_21442564C();
  v70 = v32;
  v75 = v32;
  v33 = sub_21438CED4();
  sub_214425400();
  sub_2144253B8();
  v12 = *(void (**)(_QWORD, _QWORD))(v73 + 8);
  v12(v24, a2);
  v12(v31, a2);
  if ((sub_2144253E8() & 1) != 0)
  {
    v34 = v21;
    if (sub_2144253DC() < 64)
    {
      v35 = sub_2144253D0();
      v12(v17, a2);
      v36 = v68;
      v37 = v72;
      v72 = *(char **)(v69 + 8);
      result = ((uint64_t (*)(char *, uint64_t))v72)(v37, v68);
      v39 = v74;
      if (v35)
        goto LABEL_22;
LABEL_19:
      sub_21442564C();
      sub_214425400();
      v75 = v70;
      sub_214425400();
      sub_2144253AC();
      v12(v34, a2);
      v12(v24, a2);
      v50 = *(void (**)(char *, uint64_t, uint64_t))(v73 + 16);
      v50(v24, v39, a2);
      v50(v34, (uint64_t)v31, a2);
      v51 = v31;
      v52 = v36;
      v53 = (void (*)(char *, uint64_t))v12;
      v54 = v64;
      v50(v64, (uint64_t)v24, a2);
      v55 = v65;
      sub_214388CA8(v34, v54, v70, a2, a3, v65);
      ((void (*)(uint64_t, uint64_t))v72)(v39, v52);
      v53(v24, a2);
      v53(v51, a2);
      v56 = v67;
      swift_storeEnumTagMultiPayload();
      return (*(uint64_t (**)(uint64_t, uint64_t, void (*)(_QWORD, _QWORD)))(v66 + 32))(v71, v55, v56);
    }
    v75 = 0;
    sub_2144253A0();
    v46 = sub_214424ED8();
    v12(v31, a2);
    v12(v17, a2);
    v47 = *(char **)(v69 + 8);
    goto LABEL_18;
  }
  v57 = v33;
  v40 = sub_2144253E8();
  v41 = sub_2144253DC();
  if ((v40 & 1) != 0)
  {
    v34 = v21;
    v42 = v69;
    if (v41 <= 64)
    {
      swift_getAssociatedConformanceWitness();
      sub_2144257D8();
      sub_214425754();
      v43 = sub_214424E78();
      v12(v31, a2);
      v10 = v58;
      (*(void (**)(uint64_t, char *, uint64_t))(v73 + 16))(v58, v17, a2);
      v39 = v74;
      if ((v43 & 1) != 0)
      {
        v44 = sub_2144253D0();
        v12(v10, a2);
        v12(v17, a2);
        v36 = v68;
        v45 = v72;
        v72 = *(char **)(v69 + 8);
        result = ((uint64_t (*)(char *, uint64_t))v72)(v45, v68);
        goto LABEL_15;
      }
LABEL_21:
      v12(v10, a2);
      v12(v17, a2);
      result = (*(uint64_t (**)(char *, uint64_t))(v69 + 8))(v72, v68);
      goto LABEL_22;
    }
  }
  else
  {
    v34 = v21;
    v42 = v69;
    if (v41 < 64)
    {
      v44 = sub_2144253D0();
      v12(v17, a2);
      v48 = v72;
      v36 = v68;
      v72 = *(char **)(v42 + 8);
      result = ((uint64_t (*)(char *, uint64_t))v72)(v48, v68);
      v39 = v74;
LABEL_15:
      if (v44)
        goto LABEL_22;
      goto LABEL_19;
    }
  }
  v75 = 0;
  sub_2144253A0();
  v46 = sub_214424ED8();
  v12(v31, a2);
  v12(v17, a2);
  v47 = *(char **)(v42 + 8);
LABEL_18:
  v49 = v72;
  v36 = v68;
  v72 = v47;
  result = ((uint64_t (*)(char *, uint64_t))v47)(v49, v68);
  v39 = v74;
  if ((v46 & 1) != 0)
    goto LABEL_19;
LABEL_22:
  __break(1u);
  return result;
}

uint64_t NumberBins.init<>(range:desiredCount:minimumStride:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  void (*v24)(char *, uint64_t);
  double v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  BOOL v32;
  uint64_t result;
  double v34;
  char v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  double v39;
  char *v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  void (*v51)(char *, uint64_t, uint64_t);
  double v52;

  v50 = a3;
  v48 = a6;
  v10 = sub_214424EC0();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v47 = (char *)&v45 - v13;
  v14 = *(_QWORD *)(a4 - 8);
  v15 = MEMORY[0x24BDAC7A8](v12);
  v46 = (char *)&v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x24BDAC7A8](v15);
  v49 = (char *)&v45 - v18;
  v19 = MEMORY[0x24BDAC7A8](v17);
  v21 = (char *)&v45 - v20;
  MEMORY[0x24BDAC7A8](v19);
  v23 = (char *)&v45 - v22;
  v51 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  v51((char *)&v45 - v22, a1, a4);
  if (sub_2144253DC() < 65)
  {
    v26 = sub_2144253E8();
    v45 = v11;
    v27 = v10;
    v28 = a2;
    v29 = a1;
    v30 = v26;
    v31 = sub_2144253D0();
    v24 = *(void (**)(char *, uint64_t))(v14 + 8);
    v24(v23, a4);
    v32 = (v30 & 1) == 0;
    a1 = v29;
    a2 = v28;
    v10 = v27;
    v11 = v45;
    if (v32)
      v25 = (double)(unint64_t)v31;
    else
      v25 = (double)v31;
  }
  else
  {
    sub_2142B585C();
    sub_21438CF18();
    sub_214424D1C();
    v24 = *(void (**)(char *, uint64_t))(v14 + 8);
    v24(v23, a4);
    v25 = v52;
  }
  v51(v21, a1 + *(int *)(v10 + 36), a4);
  if (sub_2144253DC() <= 64)
  {
    v35 = sub_2144253E8();
    v36 = sub_2144253D0();
    result = ((uint64_t (*)(char *, uint64_t))v24)(v21, a4);
    if ((v35 & 1) != 0)
      v34 = (double)v36;
    else
      v34 = (double)(unint64_t)v36;
  }
  else
  {
    sub_2142B585C();
    sub_21438CF18();
    sub_214424D1C();
    result = ((uint64_t (*)(char *, uint64_t))v24)(v21, a4);
    v34 = v52;
  }
  v37 = v49;
  if (v25 > v34)
  {
    __break(1u);
    goto LABEL_20;
  }
  v38 = a2 + 1;
  if (__OFADD__(a2, 1))
  {
LABEL_20:
    __break(1u);
    return result;
  }
  v51(v49, (uint64_t)v50, a4);
  if (sub_2144253DC() <= 64)
  {
    v40 = v37;
    v41 = sub_2144253E8();
    v42 = sub_2144253D0();
    v24(v40, a4);
    if ((v41 & 1) != 0)
      v39 = (double)v42;
    else
      v39 = (double)(unint64_t)v42;
  }
  else
  {
    sub_2142B585C();
    sub_21438CF18();
    sub_214424D1C();
    v24(v37, a4);
    v39 = v52;
  }
  v52 = sub_2143872F4(v38, v25, v34, fmax(v39, 1.0), 1, 1);
  sub_2142B585C();
  v43 = (uint64_t)v46;
  sub_214424D34();
  v44 = (uint64_t)v47;
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v47, a1, v10);
  NumberBins.init<>(size:range:)(v43, v44, a4, a5, v48);
  v24(v50, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8))(a1, v10);
}

uint64_t NumberBins.init<>(data:desiredCount:minimumStride:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t AssociatedTypeWitness;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  void (**v32)(char *, char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t result;
  char *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  void (*v55)(char *, char *, uint64_t);
  char *v56;
  char *v57;
  void (*v58)(char *, char *, uint64_t);
  char *v59;
  void (*v60)(char *, uint64_t);
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(char *, char *, uint64_t);
  void (*v66)(char *, char *, uint64_t);
  uint64_t v67;
  uint64_t v68;
  void (**v69)(char *, char *, uint64_t);
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  char *v77;
  char *v78;
  char *v79;
  uint64_t TupleTypeMetadata2;
  char *v81;
  char *v82;
  char *v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void (**v95)(char *, char *, uint64_t);
  uint64_t v96;
  char *v97;
  uint64_t v98;

  v96 = a6;
  v93 = a4;
  LODWORD(v87) = a3;
  v76 = a2;
  v92 = a7;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v10 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v81 = (char *)&v74 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v79 = (char *)&v74 - v13;
  v91 = *(_QWORD *)(a5 - 8);
  v14 = MEMORY[0x24BDAC7A8](v12);
  v88 = (char *)&v74 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x24BDAC7A8](v14);
  v90 = (char *)&v74 - v17;
  MEMORY[0x24BDAC7A8](v16);
  v97 = (char *)&v74 - v18;
  v19 = *(_QWORD *)(a6 + 16);
  v86 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v19 + 16) + 8) + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v21 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v85 = (char *)&v74 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = MEMORY[0x24BDAC7A8](v21);
  v83 = (char *)&v74 - v24;
  MEMORY[0x24BDAC7A8](v23);
  v82 = (char *)&v74 - v25;
  v84 = *(_QWORD *)(*(_QWORD *)(v19 + 24) + 8);
  v26 = sub_214424EC0();
  v89 = sub_214425388();
  v94 = *(_QWORD *)(v89 - 8);
  v27 = MEMORY[0x24BDAC7A8](v89);
  v75 = (char *)&v74 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = MEMORY[0x24BDAC7A8](v27);
  v31 = (char *)&v74 - v30;
  v32 = *(void (***)(char *, char *, uint64_t))(v26 - 8);
  v33 = MEMORY[0x24BDAC7A8](v29);
  v95 = (void (**)(char *, char *, uint64_t))((char *)&v74 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0));
  v35 = MEMORY[0x24BDAC7A8](v33);
  v37 = (char *)&v74 - v36;
  v38 = MEMORY[0x24BDAC7A8](v35);
  v78 = (char *)&v74 - v39;
  v40 = MEMORY[0x24BDAC7A8](v38);
  v77 = (char *)&v74 - v41;
  MEMORY[0x24BDAC7A8](v40);
  v43 = (char *)&v74 - v42;
  v44 = a1;
  v98 = a1;
  v45 = sub_214425094();
  v46 = MEMORY[0x2199CD934](MEMORY[0x24BEE12C8], v45);
  v47 = v45;
  v48 = v96;
  sub_21424E8D4(v47, v46, v96, (uint64_t)v31);
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v32[6])(v31, 1, v26) == 1)
  {
    v87 = v26;
    v95 = v32;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v94 + 8))(v31, v89);
    swift_getAssociatedConformanceWitness();
    sub_2144257D8();
    sub_214425754();
    sub_2144257D8();
    sub_214425754();
    sub_2144257D8();
    v49 = v88;
    sub_214425754();
    result = sub_214424E84();
    if ((result & 1) != 0)
    {
      v51 = v79;
      v52 = TupleTypeMetadata2;
      v53 = &v79[*(int *)(TupleTypeMetadata2 + 48)];
      v54 = v91;
      v55 = *(void (**)(char *, char *, uint64_t))(v91 + 32);
      v55(v79, v90, a5);
      v55(v53, v49, a5);
      v56 = v81;
      v57 = &v81[*(int *)(v52 + 48)];
      v58 = *(void (**)(char *, char *, uint64_t))(v54 + 16);
      v58(v81, v51, a5);
      v58(v57, v53, a5);
      v59 = v78;
      v55(v78, v56, a5);
      v60 = *(void (**)(char *, uint64_t))(v54 + 8);
      v60(v57, a5);
      v61 = &v56[*(int *)(v52 + 48)];
      v55(v56, v51, a5);
      v55(v61, v53, a5);
      v62 = v87;
      v55(&v59[*(int *)(v87 + 36)], v61, a5);
      v60(v56, a5);
      v63 = (uint64_t)v77;
      v95[4](v77, v59, v62);
      NumberBins.init<>(size:range:)(v97, v63, a5, v96, v92);
      return ((uint64_t (*)(uint64_t, uint64_t))v60)(v93, a5);
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    v64 = v94;
    v32[4](v43, v31, v26);
    v65 = v32[2];
    v65(v37, v43, v26);
    v65((char *)v95, v43, v26);
    v74 = v43;
    if ((v87 & 1) != 0)
    {
      v68 = (uint64_t)v75;
      v69 = v95;
      v65(v75, (char *)v95, v26);
      ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v32[7])(v68, 0, 1, v26);
      v70 = sub_2142513EC(v68, v44, a5, v48);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v68, v89);
      if (v70 >= 200)
        v67 = 200;
      else
        v67 = v70;
      v66 = v32[1];
      ((void (*)(void (**)(char *, char *, uint64_t), uint64_t))v66)(v69, v26);
    }
    else
    {
      v66 = v32[1];
      ((void (*)(void (**)(char *, char *, uint64_t), uint64_t))v66)(v95, v26);
      swift_bridgeObjectRelease();
      v67 = v76;
    }
    v71 = v91;
    v72 = v97;
    v73 = v93;
    (*(void (**)(char *, uint64_t, uint64_t))(v91 + 16))(v97, v93, a5);
    NumberBins.init<>(range:desiredCount:minimumStride:)((uint64_t)v37, v67, (uint64_t)v72, a5, v48, v92);
    (*(void (**)(uint64_t, uint64_t))(v71 + 8))(v73, a5);
    return ((uint64_t (*)(char *, uint64_t))v66)(v74, v26);
  }
  return result;
}

uint64_t NumberBins.init<>(data:desiredCount:minimumStride:)@<X0>(double a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t AssociatedTypeWitness;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  double v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t result;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  void (*v56)(char *, char *, uint64_t);
  char *v57;
  char *v58;
  void (*v59)(char *, char *, uint64_t);
  char *v60;
  void (*v61)(char *, uint64_t);
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(char *, char *, uint64_t);
  uint64_t v71;
  char *v72;
  uint64_t v73;
  void (*v74)(char *, uint64_t);
  uint64_t v75;
  void (*v76)(char *, uint64_t, uint64_t);
  char *v77;
  char *v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  void (*v82)(char *, uint64_t);
  double v83;
  char v84;
  uint64_t v85;
  char *v86;
  double v87;
  char *v88;
  char *v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  char *v96;
  char *v97;
  char *v98;
  char *v99;
  uint64_t TupleTypeMetadata2;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  char *v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  char *v110;
  char *v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  double v119;

  v115 = a4;
  LODWORD(v112) = a3;
  v95 = a2;
  v114 = a7;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v10 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v101 = (char *)&v94 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v99 = (char *)&v94 - v13;
  v116 = *(_QWORD *)(a5 - 8);
  v14 = MEMORY[0x24BDAC7A8](v12);
  v96 = (char *)&v94 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x24BDAC7A8](v14);
  v94 = (char *)&v94 - v17;
  v18 = MEMORY[0x24BDAC7A8](v16);
  v111 = (char *)&v94 - v19;
  v20 = MEMORY[0x24BDAC7A8](v18);
  v110 = (char *)&v94 - v21;
  MEMORY[0x24BDAC7A8](v20);
  v118 = (char *)&v94 - v22;
  v109 = *(_QWORD *)(*(_QWORD *)(a6 + 24) + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v24 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v108 = (char *)&v94 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = MEMORY[0x24BDAC7A8](v24);
  v106 = (char *)&v94 - v27;
  MEMORY[0x24BDAC7A8](v26);
  v105 = (char *)&v94 - v28;
  v117 = a6;
  v29 = *(_QWORD *)(*(_QWORD *)(a6 + 32) + 8);
  v30 = sub_214424EC0();
  v31 = sub_214425388();
  v102 = *(_QWORD *)(v31 - 8);
  v103 = v31;
  v32 = MEMORY[0x24BDAC7A8](v31);
  v34 = (char *)&v94 - v33;
  v35 = *(_QWORD *)(v30 - 8);
  v36 = MEMORY[0x24BDAC7A8](v32);
  v104 = (char *)&v94 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = MEMORY[0x24BDAC7A8](v36);
  v113 = (char *)&v94 - v39;
  v40 = MEMORY[0x24BDAC7A8](v38);
  v98 = (char *)&v94 - v41;
  v42 = MEMORY[0x24BDAC7A8](v40);
  v97 = (char *)&v94 - v43;
  MEMORY[0x24BDAC7A8](v42);
  v45 = (char *)&v94 - v44;
  v46 = a1;
  v119 = a1;
  v47 = sub_214425094();
  v48 = MEMORY[0x2199CD934](MEMORY[0x24BEE12C8], v47);
  v107 = v29;
  sub_21424FD54(v47, v48, v29, (uint64_t)v34);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v34, 1, v30) == 1)
  {
    v112 = v35;
    v113 = (char *)v30;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v102 + 8))(v34, v103);
    swift_getAssociatedConformanceWitness();
    sub_2144257D8();
    sub_214425754();
    sub_2144257D8();
    v49 = v110;
    sub_214425754();
    sub_2144257D8();
    v50 = v111;
    sub_214425754();
    result = sub_214424E84();
    if ((result & 1) != 0)
    {
      v52 = TupleTypeMetadata2;
      v53 = v99;
      v54 = &v99[*(int *)(TupleTypeMetadata2 + 48)];
      v55 = v116;
      v56 = *(void (**)(char *, char *, uint64_t))(v116 + 32);
      v56(v99, v49, a5);
      v56(v54, v50, a5);
      v57 = v101;
      v58 = &v101[*(int *)(v52 + 48)];
      v59 = *(void (**)(char *, char *, uint64_t))(v55 + 16);
      v59(v101, v53, a5);
      v59(v58, v54, a5);
      v60 = v98;
      v56(v98, v57, a5);
      v61 = *(void (**)(char *, uint64_t))(v55 + 8);
      v61(v58, a5);
      v62 = &v57[*(int *)(v52 + 48)];
      v56(v57, v53, a5);
      v56(v62, v54, a5);
      v63 = v113;
      v56(&v60[*((int *)v113 + 9)], v62, a5);
      v61(v57, a5);
      v64 = (uint64_t)v97;
      (*(void (**)(char *, char *, char *))(v112 + 32))(v97, v60, v63);
      NumberBins.init<>(size:range:)((uint64_t)v118, v64, a5, v117, v114);
      return ((uint64_t (*)(uint64_t, uint64_t))v61)(v115, a5);
    }
    __break(1u);
    goto LABEL_24;
  }
  v65 = (*(uint64_t (**)(char *, char *, uint64_t))(v35 + 32))(v45, v34, v30);
  v119 = v46;
  MEMORY[0x24BDAC7A8](v65);
  v66 = v117;
  *(&v94 - 2) = (char *)a5;
  *(&v94 - 1) = (char *)v66;
  v67 = MEMORY[0x2199CD934](MEMORY[0x24BEE12E0], v47);
  v69 = sub_2141D0320((void (*)(char *, char *))sub_21438CF5C, (uint64_t)(&v94 - 4), v47, MEMORY[0x24BEE13C8], MEMORY[0x24BEE4078], v67, MEMORY[0x24BEE40A8], v68);
  swift_bridgeObjectRelease();
  v70 = *(void (**)(char *, char *, uint64_t))(v35 + 16);
  v71 = (uint64_t)v113;
  v70(v113, v45, v30);
  v72 = v104;
  v111 = v45;
  v70(v104, v45, v30);
  v73 = v66;
  if ((v112 & 1) == 0)
  {
    v74 = *(void (**)(char *, uint64_t))(v35 + 8);
    v74(v72, v30);
    swift_bridgeObjectRelease();
    v75 = v116;
    v76 = *(void (**)(char *, uint64_t, uint64_t))(v116 + 16);
    v77 = v118;
    v78 = v111;
    v79 = v95;
LABEL_22:
    v93 = v115;
    v76(v77, v115, a5);
    NumberBins.init<>(range:desiredCount:minimumStride:)(v71, v79, v77, a5, v73, v114);
    (*(void (**)(uint64_t, uint64_t))(v75 + 8))(v93, a5);
    return ((uint64_t (*)(char *, uint64_t))v74)(v78, v30);
  }
  v109 = v69;
  v112 = v35;
  v75 = v116;
  v80 = v94;
  v110 = *(char **)(v116 + 16);
  ((void (*)(char *, char *, uint64_t))v110)(v94, v72, a5);
  v81 = sub_2144253DC();
  v77 = v118;
  if (v81 < 65)
  {
    v84 = sub_2144253E8();
    v85 = sub_2144253D0();
    v82 = *(void (**)(char *, uint64_t))(v75 + 8);
    v82(v80, a5);
    if ((v84 & 1) != 0)
      v83 = (double)v85;
    else
      v83 = (double)(unint64_t)v85;
  }
  else
  {
    sub_2142B585C();
    sub_21438CF18();
    sub_214424D1C();
    v82 = *(void (**)(char *, uint64_t))(v75 + 8);
    v82(v80, a5);
    v83 = v119;
  }
  v86 = v96;
  ((void (*)(char *, char *, uint64_t))v110)(v96, &v72[*(int *)(v30 + 36)], a5);
  if (sub_2144253DC() <= 64)
  {
    v88 = v72;
    v89 = v86;
    v90 = sub_2144253E8();
    v91 = sub_2144253D0();
    result = ((uint64_t (*)(char *, uint64_t))v82)(v89, a5);
    if ((v90 & 1) != 0)
      v87 = (double)v91;
    else
      v87 = (double)(unint64_t)v91;
    v78 = v111;
    v72 = v88;
  }
  else
  {
    sub_2142B585C();
    sub_21438CF18();
    sub_214424D1C();
    result = ((uint64_t (*)(char *, uint64_t))v82)(v86, a5);
    v87 = v119;
    v78 = v111;
  }
  v71 = (uint64_t)v113;
  if (v83 <= v87)
  {
    v92 = sub_214332410(*(uint64_t *)&v83, *(uint64_t *)&v87, 0, v109);
    swift_bridgeObjectRelease();
    if (v92 >= 200)
      v79 = 200;
    else
      v79 = v92;
    v74 = *(void (**)(char *, uint64_t))(v112 + 8);
    v74(v72, v30);
    v76 = (void (*)(char *, uint64_t, uint64_t))v110;
    goto LABEL_22;
  }
LABEL_24:
  __break(1u);
  return result;
}

uint64_t sub_21438C400@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, double *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t result;
  double v9;
  char v10;
  uint64_t v11;
  _QWORD v12[2];

  v5 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v5 + 16))(v7);
  if (sub_2144253DC() < 65)
  {
    v10 = sub_2144253E8();
    v11 = sub_2144253D0();
    result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, a2);
    if ((v10 & 1) != 0)
      v9 = (double)v11;
    else
      v9 = (double)(unint64_t)v11;
  }
  else
  {
    sub_2142B585C();
    sub_21438CF18();
    sub_214424D1C();
    result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, a2);
    v9 = *(double *)&v12[1];
  }
  *a3 = v9;
  return result;
}

Swift::Int __swiftcall NumberBins.index(after:)(Swift::Int after)
{
  BOOL v1;
  Swift::Int result;

  v1 = __OFADD__(after, 1);
  result = after + 1;
  if (v1)
    __break(1u);
  return result;
}

uint64_t NumberBins.startIndex.getter()
{
  return 0;
}

uint64_t NumberBins.endIndex.getter(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  int EnumCaseMultiPayload;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v2 = v1;
  v3 = a1[2];
  v4 = a1[3];
  v5 = a1[4];
  v6 = type metadata accessor for NumberBins.UniformStorage(0, v3, v4, v5);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v18 - v8;
  v10 = type metadata accessor for NumberBins.Storage(0, v3, v4, v5);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (uint64_t *)((char *)&v18 - v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))((char *)&v18 - v11, v2, v10);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
    goto LABEL_6;
  v15 = 0;
  if (EnumCaseMultiPayload == 1)
  {
    v6 = *v12;
    v16 = MEMORY[0x2199CC98C](*v12, v3);
    swift_bridgeObjectRelease();
    v15 = v16 - 1;
    if (__OFSUB__(v16, 1))
    {
      __break(1u);
LABEL_6:
      (*(void (**)(char *, uint64_t *, uint64_t))(v7 + 32))(v9, v12, v6);
      v15 = *(_QWORD *)&v9[*(int *)(v6 + 48)];
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    }
  }
  return v15;
}

uint64_t sub_21438C6A0(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  return static NumberBins.== infix(_:_:)(a1, a2, a3[2], a3[3], a3[4]);
}

uint64_t sub_21438C6B0@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = NumberBins.endIndex.getter(a1);
  *a2 = result;
  return result;
}

void (*sub_21438C6D4(uint64_t **a1, uint64_t *a2, uint64_t a3))(_QWORD *a1)
{
  uint64_t *v6;
  uint64_t v7;

  v6 = (uint64_t *)malloc(0x28uLL);
  *a1 = v6;
  v6[4] = (uint64_t)sub_21438C730(v6, *a2, a3, v7);
  return sub_2141FC880;
}

void (*sub_21438C730(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4))(_QWORD *a1)
{
  uint64_t v7;
  uint64_t v8;
  void *v9;

  v7 = type metadata accessor for ChartBinRange(0, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
  *a1 = v7;
  v8 = *(_QWORD *)(v7 - 8);
  a1[1] = v8;
  v9 = malloc(*(_QWORD *)(v8 + 64));
  a1[2] = (uint64_t)v9;
  NumberBins.subscript.getter(a2, a3, (uint64_t)v9);
  return sub_2142D5F70;
}

uint64_t sub_21438C7B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t result;

  v4 = v2;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 32))(a2, v4, a1);
  MEMORY[0x2199CD934](&protocol conformance descriptor for NumberBins<A>, a1);
  result = sub_214425604();
  *(_QWORD *)(a2 + *(int *)(result + 36)) = 0;
  return result;
}

uint64_t sub_21438C818(uint64_t a1)
{
  MEMORY[0x2199CD934](&protocol conformance descriptor for NumberBins<A>, a1);
  return sub_214425220();
}

uint64_t sub_21438C84C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = MEMORY[0x2199CD934](&protocol conformance descriptor for NumberBins<A>, a1);
  v4 = sub_2142D6850(v1, a1, v3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v1, a1);
  return v4;
}

uint64_t sub_21438C8AC(uint64_t a1, int a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t, uint64_t);
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t);
  char *v28;
  void (*v29)(char *, uint64_t);
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t result;
  _QWORD v38[2];
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  int v44;
  uint64_t v45;
  char *v46;
  int v47;
  uint64_t v48;
  unint64_t v49;

  v38[1] = a1;
  v47 = a3;
  v44 = a2;
  v5 = sub_214425760();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v46 = (char *)v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)v38 - v10;
  v12 = *(_QWORD *)(a4 + 16);
  v41 = *(_QWORD *)(v12 - 8);
  v13 = MEMORY[0x24BDAC7A8](v9);
  v40 = (char *)v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v42 = (char *)v38 - v16;
  v17 = MEMORY[0x24BDAC7A8](v15);
  v43 = (char *)v38 - v18;
  v19 = MEMORY[0x24BDAC7A8](v17);
  v21 = (char *)v38 - v20;
  MEMORY[0x24BDAC7A8](v19);
  v39 = (char *)v38 - v22;
  v45 = *(_QWORD *)(a4 + 24);
  sub_214424D88();
  v23 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 104);
  v38[0] = v23;
  v24 = *MEMORY[0x24BEE38E8];
  v25 = *MEMORY[0x24BEE38E0];
  if ((v44 & 1) != 0)
    v26 = v24;
  else
    v26 = v25;
  v23(v11, v26, v5);
  sub_214424D94();
  v27 = *(void (**)(char *, uint64_t))(v6 + 8);
  v27(v11, v5);
  v28 = v40;
  v29 = *(void (**)(char *, uint64_t))(v41 + 8);
  v29(v21, v12);
  sub_214424EC0();
  v30 = v42;
  sub_214424D88();
  if ((v47 & 1) != 0)
    v31 = v25;
  else
    v31 = v24;
  v32 = v43;
  v33 = v46;
  ((void (*)(char *, uint64_t, uint64_t))v38[0])(v46, v31, v5);
  sub_214424D94();
  v34 = v33;
  v35 = v39;
  v27(v34, v5);
  v29(v30, v12);
  sub_21442564C();
  sub_214251E4C();
  sub_21442561C();
  if ((v49 & 1) != 0)
    goto LABEL_11;
  v29(v28, v12);
  v36 = v48;
  v29(v32, v12);
  v29(v35, v12);
  result = v36 + 1;
  if (__OFADD__(v36, 1))
  {
    __break(1u);
LABEL_11:
    v48 = 0;
    v49 = 0xE000000000000000;
    sub_2144254D8();
    sub_214425904();
    sub_214424F20();
    swift_bridgeObjectRelease();
    sub_214424F20();
    sub_214424F20();
    sub_214424F20();
    result = sub_214425628();
    __break(1u);
  }
  return result;
}

uint64_t sub_21438CC8C(uint64_t a1, int a2, int a3, uint64_t a4)
{
  return sub_21438C8AC(a1, a2, a3, a4);
}

uint64_t sub_21438CCA4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t AssociatedTypeWitness;
  char v7;
  uint64_t v9;

  v3 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  swift_getAssociatedConformanceWitness();
  sub_2144257D8();
  sub_214425754();
  v7 = sub_214424E60();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, a2);
  return v7 & 1;
}

uint64_t sub_21438CE00@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;

  v5 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v5 + 16))(v7);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(a3, v7, a2);
}

uint64_t sub_21438CE90()
{
  return sub_214424ED8() & 1;
}

uint64_t sub_21438CEC8()
{
  return sub_21438CE90();
}

unint64_t sub_21438CED4()
{
  unint64_t result;

  result = qword_254D6C988;
  if (!qword_254D6C988)
  {
    result = MEMORY[0x2199CD934](MEMORY[0x24BEE17B0], MEMORY[0x24BEE1768]);
    atomic_store(result, (unint64_t *)&qword_254D6C988);
  }
  return result;
}

unint64_t sub_21438CF18()
{
  unint64_t result;

  result = qword_254D6C990;
  if (!qword_254D6C990)
  {
    result = MEMORY[0x2199CD934](MEMORY[0x24BEE45A8], MEMORY[0x24BEE4568]);
    atomic_store(result, (unint64_t *)&qword_254D6C990);
  }
  return result;
}

uint64_t sub_21438CF5C@<X0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  uint64_t v2;

  return sub_21438C400(a1, *(_QWORD *)(v2 + 16), a2);
}

uint64_t sub_21438CF78(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = MEMORY[0x2199CD934](&protocol conformance descriptor for NumberBins<A>);
  result = MEMORY[0x2199CD934](&protocol conformance descriptor for NumberBins<A>, a2);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

void sub_21438CFBC()
{
  JUMPOUT(0x2199CD934);
}

void sub_21438CFCC()
{
  JUMPOUT(0x2199CD934);
}

uint64_t sub_21438CFDC(uint64_t *a1)
{
  uint64_t result;
  unint64_t v2;

  result = type metadata accessor for NumberBins.Storage(319, a1[2], a1[3], a1[4]);
  if (v2 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_DWORD *sub_21438D050(_DWORD *result, uint64_t a2)
{
  _DWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v12;
  void (*v13)(_DWORD *, uint64_t);

  v2 = result;
  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = v5 + v6;
  v8 = ((((((v5 + 7 + ((v5 + v6) & ~v6)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
     + 16;
  if (!v8)
    v8 = 8;
  v9 = v8 & 0xFFFFFFF8;
  v10 = *((unsigned __int8 *)result + v8);
  if (v10 >= 2 && v9 != 0)
    v10 = *result + 2;
  if (v10 == 1)
    return (_DWORD *)swift_bridgeObjectRelease();
  if (!v10)
  {
    v12 = ~v6;
    v13 = *(void (**)(_DWORD *, uint64_t))(v4 + 8);
    v13(result, *(_QWORD *)(a2 + 16));
    v13((_DWORD *)(((unint64_t)v2 + v7) & v12), v3);
    swift_release();
    return (_DWORD *)swift_release();
  }
  return result;
}

_BYTE *sub_21438D15C(_BYTE *__dst, unsigned __int8 *__src, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v15;
  void (*v16)(_BYTE *, unsigned __int8 *, uint64_t);
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(unsigned __int8 *)(v6 + 80);
  v9 = v7 + v8;
  v10 = v7 + 7;
  v11 = ((((((v7 + 7 + ((v7 + v8) & ~v8)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  if (v11)
    v12 = v11;
  else
    v12 = 8;
  v13 = __src[v12];
  if (v13 >= 2 && (v12 & 0xFFFFFFF8) != 0)
    v13 = *(_DWORD *)__src + 2;
  if (v13 == 1)
  {
    *(_QWORD *)__dst = *(_QWORD *)__src;
    __dst[v12] = 1;
    swift_bridgeObjectRetain();
  }
  else if (v13)
  {
    memcpy(__dst, __src, v12 | 1);
  }
  else
  {
    v15 = ~v8;
    v16 = *(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v6 + 16);
    v16(__dst, __src, *(_QWORD *)(a3 + 16));
    v17 = (unint64_t)&__src[v9] & v15;
    v16((_BYTE *)((unint64_t)&__dst[v9] & v15), (unsigned __int8 *)v17, v5);
    v18 = (_QWORD *)((v10 + ((unint64_t)&__dst[v9] & v15)) & 0xFFFFFFFFFFFFF8);
    v19 = (_QWORD *)((v10 + v17) & 0xFFFFFFFFFFFFF8);
    *v18 = *v19;
    v20 = (_QWORD *)(((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8);
    v21 = (_QWORD *)(((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8);
    v22 = v21[1];
    *v20 = *v21;
    v20[1] = v22;
    v23 = (_QWORD *)(((unint64_t)v20 + 23) & 0xFFFFFFFFFFFFFFF8);
    v24 = (_QWORD *)(((unint64_t)v21 + 23) & 0xFFFFFFFFFFFFFFF8);
    v25 = v24[1];
    *v23 = *v24;
    v23[1] = v25;
    __dst[v12] = 0;
    swift_retain();
    swift_retain();
  }
  return __dst;
}

unsigned __int8 *sub_21438D2BC(unsigned __int8 *__dst, unsigned __int8 *__src, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v15;
  void (*v16)(unsigned __int8 *, uint64_t);
  unsigned int v17;
  void (*v19)(unsigned __int8 *, unsigned __int8 *, uint64_t);
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v30;

  if (__dst != __src)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    v7 = *(_QWORD *)(v6 + 64);
    v8 = *(unsigned __int8 *)(v6 + 80);
    v9 = v7 + v8;
    v10 = v7 + 7;
    v11 = ((((((v7 + 7 + ((v7 + v8) & ~v8)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
        + 16;
    if (v11)
      v12 = v11;
    else
      v12 = 8;
    v13 = __dst[v12];
    if (v13 >= 2 && (v12 & 0xFFFFFFF8) != 0)
      v13 = *(_DWORD *)__dst + 2;
    v15 = ~v8;
    if (v13 == 1)
    {
      swift_bridgeObjectRelease();
    }
    else if (!v13)
    {
      v30 = v10;
      v16 = *(void (**)(unsigned __int8 *, uint64_t))(v6 + 8);
      v16(__dst, v5);
      v16((unsigned __int8 *)((unint64_t)&__dst[v9] & v15), v5);
      v10 = v30;
      swift_release();
      swift_release();
    }
    v17 = __src[v12];
    if ((v12 & 0xFFFFFFF8) != 0 && v17 >= 2)
      v17 = *(_DWORD *)__src + 2;
    if (v17 == 1)
    {
      *(_QWORD *)__dst = *(_QWORD *)__src;
      __dst[v12] = 1;
      swift_bridgeObjectRetain();
    }
    else if (v17)
    {
      memcpy(__dst, __src, v12 | 1);
    }
    else
    {
      v19 = *(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16);
      v19(__dst, __src, v5);
      v20 = (unint64_t)&__src[v9] & v15;
      v19((unsigned __int8 *)((unint64_t)&__dst[v9] & v15), (unsigned __int8 *)v20, v5);
      v21 = (_QWORD *)((v10 + ((unint64_t)&__dst[v9] & v15)) & 0xFFFFFFFFFFFFF8);
      v22 = (_QWORD *)((v10 + v20) & 0xFFFFFFFFFFFFF8);
      *v21 = *v22;
      v23 = (_QWORD *)(((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8);
      v24 = (_QWORD *)(((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8);
      v25 = v24[1];
      *v23 = *v24;
      v23[1] = v25;
      v26 = (_QWORD *)(((unint64_t)v23 + 23) & 0xFFFFFFFFFFFFFFF8);
      v27 = (_QWORD *)(((unint64_t)v24 + 23) & 0xFFFFFFFFFFFFFFF8);
      v28 = v27[1];
      *v26 = *v27;
      v26[1] = v28;
      __dst[v12] = 0;
      swift_retain();
      swift_retain();
    }
  }
  return __dst;
}

_BYTE *sub_21438D4AC(_BYTE *__dst, unsigned __int8 *__src, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v15;
  void (*v16)(_BYTE *, unsigned __int8 *, uint64_t);
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _OWORD *v20;
  _OWORD *v21;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(unsigned __int8 *)(v6 + 80);
  v9 = v7 + v8;
  v10 = v7 + 7;
  v11 = ((((((v7 + 7 + ((v7 + v8) & ~v8)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  if (v11)
    v12 = v11;
  else
    v12 = 8;
  v13 = __src[v12];
  if (v13 >= 2 && (v12 & 0xFFFFFFF8) != 0)
    v13 = *(_DWORD *)__src + 2;
  if (v13 == 1)
  {
    *(_QWORD *)__dst = *(_QWORD *)__src;
    __dst[v12] = 1;
  }
  else if (v13)
  {
    memcpy(__dst, __src, v12 | 1);
  }
  else
  {
    v15 = ~v8;
    v16 = *(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v6 + 32);
    v16(__dst, __src, *(_QWORD *)(a3 + 16));
    v17 = (unint64_t)&__src[v9] & v15;
    v16((_BYTE *)((unint64_t)&__dst[v9] & v15), (unsigned __int8 *)v17, v5);
    v18 = (_QWORD *)((v10 + ((unint64_t)&__dst[v9] & v15)) & 0xFFFFFFFFFFFFF8);
    v19 = (_QWORD *)((v10 + v17) & 0xFFFFFFFFFFFFF8);
    *v18 = *v19;
    v20 = (_OWORD *)(((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFF8);
    v21 = (_OWORD *)(((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFF8);
    *v20 = *v21;
    *(_OWORD *)(((unint64_t)v20 + 23) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v21 + 23) & 0xFFFFFFFFFFFFF8);
    __dst[v12] = 0;
  }
  return __dst;
}

unsigned __int8 *sub_21438D5F4(unsigned __int8 *__dst, unsigned __int8 *__src, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v15;
  void (*v16)(unsigned __int8 *, uint64_t);
  unsigned int v17;
  void (*v19)(unsigned __int8 *, unsigned __int8 *, uint64_t);
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _OWORD *v23;
  _OWORD *v24;
  uint64_t v26;

  if (__dst != __src)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    v7 = *(_QWORD *)(v6 + 64);
    v8 = *(unsigned __int8 *)(v6 + 80);
    v9 = v7 + v8;
    v10 = v7 + 7;
    v11 = ((((((v7 + 7 + ((v7 + v8) & ~v8)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
        + 16;
    if (v11)
      v12 = v11;
    else
      v12 = 8;
    v13 = __dst[v12];
    if (v13 >= 2 && (v12 & 0xFFFFFFF8) != 0)
      v13 = *(_DWORD *)__dst + 2;
    v15 = ~v8;
    if (v13 == 1)
    {
      swift_bridgeObjectRelease();
    }
    else if (!v13)
    {
      v26 = v10;
      v16 = *(void (**)(unsigned __int8 *, uint64_t))(v6 + 8);
      v16(__dst, v5);
      v16((unsigned __int8 *)((unint64_t)&__dst[v9] & v15), v5);
      v10 = v26;
      swift_release();
      swift_release();
    }
    v17 = __src[v12];
    if ((v12 & 0xFFFFFFF8) != 0 && v17 >= 2)
      v17 = *(_DWORD *)__src + 2;
    if (v17 == 1)
    {
      *(_QWORD *)__dst = *(_QWORD *)__src;
      __dst[v12] = 1;
    }
    else if (v17)
    {
      memcpy(__dst, __src, v12 | 1);
    }
    else
    {
      v19 = *(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32);
      v19(__dst, __src, v5);
      v20 = (unint64_t)&__src[v9] & v15;
      v19((unsigned __int8 *)((unint64_t)&__dst[v9] & v15), (unsigned __int8 *)v20, v5);
      v21 = (_QWORD *)((v10 + ((unint64_t)&__dst[v9] & v15)) & 0xFFFFFFFFFFFFF8);
      v22 = (_QWORD *)((v10 + v20) & 0xFFFFFFFFFFFFF8);
      *v21 = *v22;
      v23 = (_OWORD *)(((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFF8);
      v24 = (_OWORD *)(((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFF8);
      *v23 = *v24;
      *(_OWORD *)(((unint64_t)v23 + 23) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v24 + 23) & 0xFFFFFFFFFFFFF8);
      __dst[v12] = 0;
    }
  }
  return __dst;
}

uint64_t sub_21438D7D0(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  char v6;
  unsigned int v7;
  int v8;
  int v10;
  int v11;
  unsigned int v12;

  v3 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v4 = ((((((*(_QWORD *)(v3 + 64)
           + ((*(_QWORD *)(v3 + 64) + *(unsigned __int8 *)(v3 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))
           + 7) & 0xFFFFFFFFFFFFFFF8)
         + 15) & 0xFFFFFFFFFFFFFFF8)
       + 23) & 0xFFFFFFFFFFFFFFF8)
     + 16;
  if (!v4)
    v4 = 8;
  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_20;
  v5 = v4 | 1;
  v6 = 8 * (v4 | 1);
  if ((v4 | 1) <= 3)
  {
    v7 = (a2 + ~(-1 << v6) - 253) >> v6;
    if (v7 > 0xFFFE)
    {
      v8 = *(_DWORD *)&a1[v5];
      if (!v8)
        goto LABEL_20;
      goto LABEL_13;
    }
    if (v7 > 0xFE)
    {
      v8 = *(unsigned __int16 *)&a1[v5];
      if (!*(_WORD *)&a1[v5])
        goto LABEL_20;
      goto LABEL_13;
    }
    if (!v7)
      goto LABEL_20;
  }
  v8 = a1[v5];
  if (!a1[v5])
  {
LABEL_20:
    v12 = a1[v4];
    if (v12 >= 3)
      return (v12 ^ 0xFF) + 1;
    else
      return 0;
  }
LABEL_13:
  v10 = (v8 - 1) << v6;
  if (v5 >= 4)
    v10 = 0;
  if ((_DWORD)v5 == 1)
    v11 = *a1;
  else
    v11 = *(_DWORD *)a1;
  return (v11 | v10) + 254;
}

void sub_21438D8C4(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unint64_t v6;
  size_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = ((((((*(_QWORD *)(v5 + 64)
           + ((*(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
           + 7) & 0xFFFFFFFFFFFFFFF8)
         + 15) & 0xFFFFFFFFFFFFFFF8)
       + 23) & 0xFFFFFFFFFFFFFFF8)
     + 16;
  if (!v6)
    v6 = 8;
  v7 = v6 | 1;
  if (a3 < 0xFE)
  {
    v8 = 0;
  }
  else if (v7 <= 3)
  {
    v10 = (a3 + ~(-1 << (8 * v7)) - 253) >> (8 * v7);
    if (v10 > 0xFFFE)
    {
      v8 = 4u;
    }
    else if (v10 >= 0xFF)
    {
      v8 = 2;
    }
    else
    {
      v8 = v10 != 0;
    }
  }
  else
  {
    v8 = 1u;
  }
  if (a2 <= 0xFD)
    __asm { BR              X11 }
  v9 = a2 - 254;
  if (v7 < 4)
  {
    v9 &= ~(-1 << (8 * v7));
    bzero(a1, v7);
    if ((_DWORD)v7 == 1)
    {
      *a1 = v9;
      goto LABEL_18;
    }
  }
  else
  {
    bzero(a1, v6 | 1);
  }
  *(_DWORD *)a1 = v9;
LABEL_18:
  __asm { BR              X10 }
}

uint64_t type metadata accessor for NumberBins(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2141D8E88(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for NumberBins);
}

uint64_t sub_21438DA80(uint64_t *a1)
{
  uint64_t result;
  unint64_t v2;

  result = type metadata accessor for NumberBins.UniformStorage(319, a1[2], a1[3], a1[4]);
  if (v2 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

_QWORD *sub_21438DAF8(_BYTE *__dst, unsigned __int8 *__src, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  size_t v13;
  uint64_t v16;
  unsigned int v17;
  unint64_t v19;
  void (*v20)(_BYTE *, unsigned __int8 *, uint64_t);
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;

  v4 = __dst;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_DWORD *)(v6 + 80);
  v9 = v7 + v8;
  v10 = v7 + 7;
  v11 = ((((((v7 + 7 + (v9 & ~(unint64_t)v8)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
        + 23) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  if (v11)
    v12 = v11;
  else
    v12 = 8;
  v13 = v12 | 1;
  if (v8 > 7u || (v8 & 0x100000) != 0 || v13 > 0x18)
  {
    v16 = *(_QWORD *)__src;
    *v4 = *(_QWORD *)__src;
    v4 = (_QWORD *)(v16 + ((v8 & 0xF8 ^ 0x1F8u) & (v8 + 16)));
  }
  else
  {
    v17 = __src[v12];
    if ((v12 & 0xFFFFFFF8) != 0 && v17 >= 2)
      v17 = *(_DWORD *)__src + 2;
    if (v17 == 1)
    {
      *(_QWORD *)__dst = *(_QWORD *)__src;
      __dst[v12] = 1;
      swift_bridgeObjectRetain();
      return v4;
    }
    if (v17)
    {
      memcpy(__dst, __src, v13);
      return v4;
    }
    v19 = ~(unint64_t)v8;
    v20 = *(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v6 + 16);
    v20(__dst, __src, v5);
    v21 = (unint64_t)&__src[v9] & v19;
    v20((_BYTE *)(((unint64_t)v4 + v9) & v19), (unsigned __int8 *)v21, v5);
    v22 = (_QWORD *)((v10 + (((unint64_t)v4 + v9) & v19)) & 0xFFFFFFFFFFFFF8);
    v23 = (_QWORD *)((v10 + v21) & 0xFFFFFFFFFFFFF8);
    *v22 = *v23;
    v24 = (_QWORD *)(((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8);
    v25 = (_QWORD *)(((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFF8);
    v26 = v25[1];
    *v24 = *v25;
    v24[1] = v26;
    v27 = (_QWORD *)(((unint64_t)v24 + 23) & 0xFFFFFFFFFFFFFFF8);
    v28 = (_QWORD *)(((unint64_t)v25 + 23) & 0xFFFFFFFFFFFFFFF8);
    v29 = v28[1];
    *v27 = *v28;
    v27[1] = v29;
    *((_BYTE *)v4 + v12) = 0;
    swift_retain();
  }
  swift_retain();
  return v4;
}

void sub_21438DC90(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unint64_t v6;
  size_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = ((((((*(_QWORD *)(v5 + 64)
           + ((*(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
           + 7) & 0xFFFFFFFFFFFFFFF8)
         + 15) & 0xFFFFFFFFFFFFFFF8)
       + 23) & 0xFFFFFFFFFFFFFFF8)
     + 16;
  if (!v6)
    v6 = 8;
  v7 = v6 | 1;
  if (a3 < 0xFE)
  {
    v8 = 0;
  }
  else if (v7 <= 3)
  {
    v10 = (a3 + ~(-1 << (8 * v7)) - 253) >> (8 * v7);
    if (v10 > 0xFFFE)
    {
      v8 = 4u;
    }
    else if (v10 >= 0xFF)
    {
      v8 = 2;
    }
    else
    {
      v8 = v10 != 0;
    }
  }
  else
  {
    v8 = 1u;
  }
  if (a2 <= 0xFD)
    __asm { BR              X11 }
  v9 = a2 - 254;
  if (v7 < 4)
  {
    v9 &= ~(-1 << (8 * v7));
    bzero(a1, v7);
    if ((_DWORD)v7 == 1)
    {
      *a1 = v9;
      goto LABEL_18;
    }
  }
  else
  {
    bzero(a1, v6 | 1);
  }
  *(_DWORD *)a1 = v9;
LABEL_18:
  __asm { BR              X10 }
}

uint64_t sub_21438DE40(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v3 = ((((((*(_QWORD *)(v2 + 64)
           + ((*(_QWORD *)(v2 + 64) + *(unsigned __int8 *)(v2 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80))
           + 7) & 0xFFFFFFFFFFFFFFF8)
         + 15) & 0xFFFFFFFFFFFFFFF8)
       + 23) & 0xFFFFFFFFFFFFFFF8)
     + 16;
  if (!v3)
    v3 = 8;
  v4 = v3 & 0xFFFFFFF8;
  v5 = *((unsigned __int8 *)a1 + v3);
  if (v5 >= 2 && v4 != 0)
    return (*a1 + 2);
  return v5;
}

void sub_21438DEA4(_BYTE *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  size_t v5;
  char v6;
  unsigned int v7;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = ((((((*(_QWORD *)(v4 + 64)
           + ((*(_QWORD *)(v4 + 64) + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))
           + 7) & 0xFFFFFFFFFFFFFFF8)
         + 15) & 0xFFFFFFFFFFFFFFF8)
       + 23) & 0xFFFFFFFFFFFFFFF8)
     + 16;
  if (!v5)
    v5 = 8;
  if (a2 > 1)
  {
    if ((_DWORD)v5)
      v6 = 2;
    else
      v6 = a2;
    if ((_DWORD)v5)
      v7 = a2 - 2;
    else
      v7 = 0;
    a1[v5] = v6;
    bzero(a1, v5);
    *(_DWORD *)a1 = v7;
  }
  else
  {
    a1[v5] = a2;
  }
}

uint64_t sub_21438DF38()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_21438DFC4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t *, uint64_t *, uint64_t);
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;

  v4 = a1;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_DWORD *)(v6 + 80);
  v9 = v7 + v8;
  v10 = v7 + 7;
  v11 = ((((((v7 + 7 + ((v7 + v8) & ~v8)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  if (v8 > 7 || (*(_DWORD *)(v6 + 80) & 0x100000) != 0 || v11 > 0x18)
  {
    v14 = *a2;
    *a1 = *a2;
    v4 = (uint64_t *)(v14 + ((v8 & 0xF8 ^ 0x1F8) & (v8 + 16)));
  }
  else
  {
    v15 = ~v8;
    v16 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16);
    v16(a1, a2, *(_QWORD *)(a3 + 16));
    v17 = ((unint64_t)a2 + v9) & v15;
    v16((uint64_t *)(((unint64_t)v4 + v9) & v15), (uint64_t *)v17, v5);
    v18 = (_QWORD *)((v10 + (((unint64_t)v4 + v9) & v15)) & 0xFFFFFFFFFFFFF8);
    v19 = (_QWORD *)((v10 + v17) & 0xFFFFFFFFFFFFF8);
    *v18 = *v19;
    v20 = (_QWORD *)(((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8);
    v21 = (_QWORD *)(((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8);
    v22 = v21[1];
    *v20 = *v21;
    v20[1] = v22;
    v23 = (_QWORD *)(((unint64_t)v20 + 23) & 0xFFFFFFFFFFFFFFF8);
    v24 = (_QWORD *)(((unint64_t)v21 + 23) & 0xFFFFFFFFFFFFFFF8);
    v25 = v24[1];
    *v23 = *v24;
    v23[1] = v25;
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t sub_21438E0F4(unint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void (*v5)(unint64_t, uint64_t);

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(void (**)(unint64_t, uint64_t))(v4 + 8);
  v5(a1, v3);
  v5((*(_QWORD *)(v4 + 64) + a1 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), v3);
  swift_release();
  return swift_release();
}

uint64_t sub_21438E17C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  v7(a1, a2, v5);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = (v8 + v9 + a1) & ~v9;
  v11 = (v8 + v9 + a2) & ~v9;
  v7(v10, v11, v5);
  v12 = (_QWORD *)((v8 + 7 + v10) & 0xFFFFFFFFFFFFF8);
  v13 = (_QWORD *)((v8 + 7 + v11) & 0xFFFFFFFFFFFFF8);
  *v12 = *v13;
  v14 = (_QWORD *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
  v15 = (_QWORD *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8);
  v16 = v15[1];
  *v14 = *v15;
  v14[1] = v16;
  v17 = (_QWORD *)(((unint64_t)v14 + 23) & 0xFFFFFFFFFFFFFFF8);
  v18 = (_QWORD *)(((unint64_t)v15 + 23) & 0xFFFFFFFFFFFFFFF8);
  v19 = v18[1];
  *v17 = *v18;
  v17[1] = v19;
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t sub_21438E240(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 24);
  v7(a1, a2, v5);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = (v8 + v9 + a1) & ~v9;
  v11 = (v8 + v9 + a2) & ~v9;
  v7(v10, v11, v5);
  v12 = (_QWORD *)((v8 + 7 + v10) & 0xFFFFFFFFFFFFF8);
  v13 = (_QWORD *)((v8 + 7 + v11) & 0xFFFFFFFFFFFFF8);
  *v12 = *v13;
  v14 = (_QWORD *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
  v15 = (_QWORD *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8);
  v16 = v15[1];
  *v14 = *v15;
  v14[1] = v16;
  swift_retain();
  swift_release();
  v17 = (_QWORD *)(((unint64_t)v14 + 23) & 0xFFFFFFFFFFFFFFF8);
  v18 = (_QWORD *)(((unint64_t)v15 + 23) & 0xFFFFFFFFFFFFFFF8);
  v19 = v18[1];
  *v17 = *v18;
  v17[1] = v19;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_21438E318(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _OWORD *v14;
  _OWORD *v15;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32);
  v7(a1, a2, v5);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = (v8 + v9 + a1) & ~v9;
  v11 = (v8 + v9 + a2) & ~v9;
  v7(v10, v11, v5);
  v12 = (_QWORD *)((v8 + 7 + v10) & 0xFFFFFFFFFFFFF8);
  v13 = (_QWORD *)((v8 + 7 + v11) & 0xFFFFFFFFFFFFF8);
  *v12 = *v13;
  v14 = (_OWORD *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFF8);
  v15 = (_OWORD *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFF8);
  *v14 = *v15;
  *(_OWORD *)(((unint64_t)v14 + 23) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v15 + 23) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_21438E3C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  uint64_t v16;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 40);
  v7(a1, a2, v5);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = (v8 + v9 + a1) & ~v9;
  v11 = (v8 + v9 + a2) & ~v9;
  v7(v10, v11, v5);
  v12 = (_QWORD *)((v8 + 7 + v10) & 0xFFFFFFFFFFFFF8);
  v13 = (v8 + 7 + v11) & 0xFFFFFFFFFFFFF8;
  v14 = *(_QWORD *)v13;
  v13 += 15;
  *v12 = v14;
  v15 = (_OWORD *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
  v16 = (v13 & 0xFFFFFFFFFFFFF8) + 23;
  *v15 = *(_OWORD *)(v13 & 0xFFFFFFFFFFFFF8);
  swift_release();
  *(_OWORD *)(((unint64_t)v15 + 23) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(v16 & 0xFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t sub_21438E48C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v15;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = *(unsigned __int8 *)(v4 + 80);
  v9 = v7 + v8;
  v10 = v7 + 7;
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v15 = *(_QWORD *)((((v10 + ((v9 + a1) & ~v8)) & 0xFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFF8);
      if (v15 >= 0xFFFFFFFF)
        LODWORD(v15) = -1;
      return (v15 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((((((v10 + (v9 & ~v8)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
         + 16) & 0xFFFFFFF8) != 0)
      v11 = 2;
    else
      v11 = a2 - v6 + 1;
    if (v11 >= 0x10000)
      v12 = 4;
    else
      v12 = 2;
    if (v11 < 0x100)
      v12 = 1;
    if (v11 >= 2)
      v13 = v12;
    else
      v13 = 0;
    return ((uint64_t (*)(void))((char *)&loc_21438E528 + 4 * byte_21442F3C4[v13]))();
  }
}

void sub_21438E5BC(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = *(unsigned __int8 *)(v5 + 80);
  if (v6 >= a3)
  {
    v11 = 0;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if ((((((((_DWORD)v7 + 7 + (((_DWORD)v7 + (_DWORD)v8) & ~(_DWORD)v8)) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v9 = a3 - v6 + 1;
    else
      v9 = 2;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X14 }
  }
  if ((((((((_DWORD)v7 + 7 + (((_DWORD)v7 + (_DWORD)v8) & ~(_DWORD)v8)) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v12 = ~v6 + a2;
    bzero(a1, ((((((v7 + 7 + ((v7 + v8) & ~v8)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)+ 16);
    *a1 = v12;
  }
  __asm { BR              X10 }
}

void sub_21438E6D4()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x21438E758);
}

void sub_21438E6DC(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x21438E6E4);
  JUMPOUT(0x21438E758);
}

void sub_21438E730()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x21438E758);
}

void sub_21438E738()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x21438E758);
}

uint64_t sub_21438E740(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_WORD *)(v5 + v6) = 0;
  if (!a2)
    JUMPOUT(0x21438E758);
  if (a3 < 0x7FFFFFFF)
  {
    if ((a2 & 0x80000000) == 0)
      JUMPOUT(0x21438E754);
    JUMPOUT(0x21438E74CLL);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v5);
}

uint64_t sub_21438E770(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_21438E820 + 4 * byte_21442F3D3[(v7 - 1)]))();
}

void sub_21438E870(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t sub_21438EA20(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 16) + 24) + 8);
}

uint64_t sub_21438EA34(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x2199CD934](&unk_21442F600);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

double sub_21438EA60@<D0>(double *a1@<X0>, double *a2@<X8>)
{
  uint64_t v2;
  double result;

  result = *a1 * **(double **)(v2 + 16);
  *a2 = result;
  return result;
}

BOOL sub_21438EA78(double *a1)
{
  uint64_t v1;

  return **(double **)(v1 + 16) <= *a1;
}

uint64_t sub_21438EA94(uint64_t a1)
{
  return sub_21438EAC0(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_214388EB8);
}

uint64_t sub_21438EAA4(uint64_t a1)
{
  return sub_21438EB80(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_214388FC4);
}

uint64_t sub_21438EAB4(uint64_t a1)
{
  return sub_21438EAC0(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_214388928);
}

uint64_t sub_21438EAC0(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(*(_QWORD *)(v2 + 16) - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  return a2(a1, v2 + ((v4 + 32) & ~v4), v2 + ((*(_QWORD *)(v3 + 64) + v4 + ((v4 + 32) & ~v4)) & ~v4));
}

uint64_t sub_21438EAF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = (*(_QWORD *)(v2 + 64) + v3 + v4) & ~v3;
  v6 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v6(v0 + v4, v1);
  v6(v0 + v5, v1);
  return swift_deallocObject();
}

uint64_t sub_21438EB74(uint64_t a1)
{
  return sub_21438EB80(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_214388A1C);
}

uint64_t sub_21438EB80(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(*(_QWORD *)(v2 + 16) - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  return a2(a1, v2 + ((v4 + 32) & ~v4), v2 + ((*(_QWORD *)(v3 + 64) + v4 + ((v4 + 32) & ~v4)) & ~v4));
}

uint64_t sub_21438EBB4()
{
  return sub_21438EBC8();
}

uint64_t sub_21438EBC8()
{
  return sub_214425160();
}

uint64_t sub_21438EC04(uint64_t a1)
{
  uint64_t v1;

  return sub_21438CCA4(a1, *(_QWORD *)(v1 + 16)) & 1;
}

uint64_t sub_21438EC20()
{
  return sub_214424E78() & 1;
}

uint64_t sub_21438EC60@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_21438CE00(a1, *(_QWORD *)(v2 + 16), a2);
}

double sub_21438EC7C@<D0>(double *a1@<X0>, double *a2@<X8>)
{
  return sub_21438EA60(a1, a2);
}

uint64_t sub_21438EC90()
{
  uint64_t v0;
  uint64_t ObjCClassFromMetadata;
  void *v2;
  id v3;
  uint64_t v4;

  v0 = sub_2144242C0();
  MEMORY[0x24BDAC7A8](v0);
  sub_2144242B4();
  sub_2144242A8();
  sub_214424284();
  sub_2144242A8();
  sub_21442429C();
  sub_2144242A8();
  sub_2144242D8();
  type metadata accessor for FindClass();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v2 = (void *)objc_opt_self();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v3 = objc_msgSend(v2, sel_bundleForClass_, ObjCClassFromMetadata);
  v4 = sub_21442480C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t type metadata accessor for FindClass()
{
  return objc_opt_self();
}

uint64_t sub_21438EEA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t ObjCClassFromMetadata;
  id v5;
  void *v6;
  id v7;
  uint64_t v8;

  type metadata accessor for FindClass();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v5 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
  v6 = (void *)sub_214424EE4();
  v7 = objc_msgSend(v5, sel_localizedStringForKey_value_table_, v6, 0, 0);

  v8 = sub_214424EF0();
  if (*(_QWORD *)(a3 + 16))
  {
    sub_214239160(a3);
    v8 = sub_214424EFC();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v8;
}

uint64_t _s6LinearVwCP(uint64_t a1, uint64_t a2)
{
  void *v3;
  id v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(void **)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v3;
  v4 = v3;
  return a1;
}

void _s6LinearVwxx(uint64_t a1)
{

}

_QWORD *_s6LinearVwca(_QWORD *a1, _QWORD *a2)
{
  void *v3;
  void *v4;
  id v5;

  *a1 = *a2;
  a1[1] = a2[1];
  v3 = (void *)a2[2];
  v4 = (void *)a1[2];
  a1[2] = v3;
  v5 = v3;

  return a1;
}

uint64_t _s6LinearVwta(uint64_t a1, uint64_t a2)
{
  void *v3;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);

  return a1;
}

ValueMetadata *_s6LinearVMa()
{
  return &_s6LinearVN;
}

uint64_t sub_21438F078()
{
  _QWORD *v0;

  if (*v0)
  {
    *v0 = 2;
    return sub_21442531C();
  }
  *v0 = 1;
  if (v0[1] == 1)
    return sub_21442531C();
  return sub_214425310();
}

void sub_21438F0F8()
{
  _QWORD *v0;

  *v0 = 0;
}

void sub_21438F100()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  if (v1)
  {
    if (v1 != 1)
      goto LABEL_4;
    goto LABEL_3;
  }
  if (*(_QWORD *)v0 == 1)
LABEL_3:
    CGPathCloseSubpath(*(CGMutablePathRef *)(v0 + 16));
LABEL_4:
  if (__OFSUB__(0, v1))
    __break(1u);
  else
    *(_QWORD *)(v0 + 8) = -v1;
}

void sub_21438F150()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 8) = -1;
}

void sub_21438F15C()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 8) = 0;
}

id sub_21438F168()
{
  uint64_t v0;

  return *(id *)(v0 + 16);
}

void *LineMark.init<A, B>(x:y:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v20[312];
  _BYTE v21[144];
  _BYTE v22[144];
  _BYTE v23[144];
  _BYTE v24[144];
  _QWORD __src[39];

  sub_2143D8C7C(a1, a3, a5, a4, (uint64_t)v21);
  sub_2141EDFD8((uint64_t)v21, (uint64_t)v20);
  sub_2143D8C7C(a2, a4, a6, v14, (uint64_t)v22);
  sub_2141EDFD8((uint64_t)v22, (uint64_t)v23);
  v16 = type metadata accessor for PlottableValue(0, a4, a6, v15);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(a2, v16);
  v18 = type metadata accessor for PlottableValue(0, a3, a5, v17);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(a1, v18);
  sub_2141EDFD8((uint64_t)v20, (uint64_t)v24);
  sub_2141EDFD8((uint64_t)v24, (uint64_t)__src);
  sub_2141EDFD8((uint64_t)v23, (uint64_t)&__src[18]);
  __src[37] = 0;
  __src[36] = 0;
  LOBYTE(__src[38]) = -1;
  return memcpy(a7, __src, 0x131uLL);
}

void *LineMark.init<A, B, C>(x:y:series:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10)
{
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  _BYTE v40[144];
  _BYTE v41[168];
  _BYTE v42[144];
  _BYTE v43[144];
  _BYTE v44[144];
  _BYTE v45[144];
  _QWORD v46[40];

  v36 = a4;
  v37 = a7;
  v33 = a2;
  v38 = a1;
  v39 = a9;
  v15 = *(_QWORD *)(a6 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v17 = (char *)&v33 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2143D8C7C(v18, v19, v20, v19, (uint64_t)v42);
  sub_2141EDFD8((uint64_t)v42, (uint64_t)v40);
  sub_2143D8C7C(a2, a5, a8, v21, (uint64_t)v43);
  sub_2141EDFD8((uint64_t)v43, (uint64_t)v41);
  v23 = type metadata accessor for PlottableValue(0, a6, a10, v22);
  sub_2143729C8(v23, v24, (uint64_t)v17);
  v25 = sub_214400B9C(v17, a6, a10);
  v35 = v26;
  v34 = v27;
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, a6);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 8))(a3, v23);
  v29 = type metadata accessor for PlottableValue(0, a5, a8, v28);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 8))(v33, v29);
  v31 = type metadata accessor for PlottableValue(0, v36, v37, v30);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 8))(v38, v31);
  sub_2141EDFD8((uint64_t)v40, (uint64_t)v44);
  sub_2141EDFD8((uint64_t)v41, (uint64_t)v45);
  sub_2141EDFD8((uint64_t)v44, (uint64_t)v46);
  sub_2141EDFD8((uint64_t)v45, (uint64_t)&v46[18]);
  v46[36] = v25;
  v46[37] = v35;
  LOBYTE(v46[38]) = v34;
  return memcpy(v39, v46, 0x131uLL);
}

void static LineMark._renderChartContent(_:_:)(uint64_t a1)
{
  uint64_t v1;
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  const void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[15];
  uint64_t v31;
  uint64_t v32;
  int v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  _BYTE v39[472];
  uint64_t v40;
  uint64_t v41;
  _BYTE v42[312];
  _BYTE v43[152];

  v1 = MEMORY[0x24BDAC7A8](a1);
  v3 = v2;
  v4 = (const void *)v1;
  v6 = v5;
  v7 = type metadata accessor for SgShapeStyle();
  MEMORY[0x24BDAC7A8](v7);
  v30[14] = (char *)v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = type metadata accessor for SgLine(0);
  MEMORY[0x24BDAC7A8](v31);
  v30[13] = (char *)v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for ChartContentRenderContext.Environment(0);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v30[12] = (char *)v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)v30 - v14;
  MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)v30 - v16;
  memcpy(v42, v4, 0x131uLL);
  v18 = *v3;
  v19 = *((_QWORD *)v3 + 1);
  v20 = v19 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_environment;
  swift_beginAccess();
  sub_2141EEEC4(v20, (uint64_t)v17);
  sub_2141EDFD8((uint64_t)v42, (uint64_t)&v40);
  sub_2141EDFD8((uint64_t)v42, (uint64_t)v43);
  v21 = sub_2141EF1D0((uint64_t)v43);
  v37 = v17;
  v38 = v19;
  v35 = v10;
  v36 = v6;
  if ((v21 - 2) >= 4)
  {
    if (v21)
    {
      sub_2141EF754((uint64_t)v43);
      swift_retain();
    }
    else
    {
      v23 = sub_2141EF754((uint64_t)v43);
      v24 = *(_QWORD *)v23;
      v25 = *(_QWORD *)(v23 + 8);
      v34 = v15;
      v26 = *(_BYTE *)(v23 + 16);
      v27 = *(_QWORD *)(v23 + 32);
      v32 = *(_QWORD *)(v23 + 24);
      v28 = *(_QWORD *)(v23 + 40);
      v29 = *(unsigned __int8 *)(v23 + 48);
      swift_retain_n();
      swift_bridgeObjectRetain();
      sub_2141DD130(v24, v25, v26);
      sub_2141DD140(v27, v28, v29);
      sub_21421BBD8(0, v38, v27, v28, v29);
      v33 = v18;
      swift_release();
      sub_2141ED0BC(v24, v25, v26);
      swift_bridgeObjectRelease();
      sub_2141EF1B0(v27, v28, v29);
    }
  }
  else
  {
    sub_2141EF754((uint64_t)v43);
    swift_retain();
  }
  sub_2141EDFD8((uint64_t)&v42[144], (uint64_t)&v41);
  sub_2141EDFD8((uint64_t)&v42[144], (uint64_t)v39);
  v22 = (char *)&loc_21438F664 + *((int *)qword_214390770 + sub_2141EF1D0((uint64_t)v39));
  __asm { BR              X10 }
}

uint64_t sub_214390788(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 v25;

  v2 = v1;
  sub_2142AB498(v2, (uint64_t)&v17);
  v4 = v22;
  if ((v22 & 0x8000000000000000) == 0)
  {
    v5 = v17;
    v6 = v18;
    v7 = v19;
    sub_214425880();
    return sub_2143FD1BC(a1, v5, v6, v7);
  }
  v22 &= ~0x8000000000000000;
  v10 = v17;
  v9 = v18;
  v11 = v19;
  v13 = v20;
  v12 = v21;
  v15 = v23;
  v14 = v24;
  v16 = v25;
  sub_214425880();
  if (v11 < 0xFC)
  {
    sub_21442588C();
    sub_214425880();
    if ((v11 & 0x80) != 0)
    {
      sub_2143FD828();
    }
    else
    {
      sub_2141DD14C(v10, v9, v11);
      sub_2143FD1BC(a1, v10, v9, v11);
    }
    sub_2141EF1BC(v10, v9, v11);
  }
  else
  {
    sub_21442588C();
  }
  if (v4 <= 0xFBu)
  {
    sub_21442588C();
    sub_214425880();
    if ((v4 & 0x80) != 0)
    {
      sub_2143FD828();
    }
    else
    {
      sub_2141DD14C(v13, v12, v4);
      sub_2143FD1BC(a1, v13, v12, v4);
    }
    sub_2141EF1BC(v13, v12, v4);
    if (v16 <= 0xFB)
      goto LABEL_11;
    return sub_21442588C();
  }
  sub_21442588C();
  if (v16 > 0xFB)
    return sub_21442588C();
LABEL_11:
  sub_21442588C();
  sub_214425880();
  if ((v16 & 0x80) != 0)
  {
    sub_2143FD828();
  }
  else
  {
    sub_2141DD14C(v15, v14, v16);
    sub_2143FD1BC(a1, v15, v14, v16);
  }
  return sub_2141EF1BC(v15, v14, v16);
}

uint64_t sub_2143909EC()
{
  uint64_t v0;
  uint64_t v2;
  _BYTE v3[72];

  sub_2142AB498(v0, (uint64_t)v3);
  sub_214425874();
  sub_214390788((uint64_t)&v2);
  return sub_2144258B0();
}

uint64_t sub_214390A38(uint64_t a1)
{
  uint64_t v1;
  _BYTE v4[72];

  sub_2142AB498(v1, (uint64_t)v4);
  return sub_214390788(a1);
}

uint64_t sub_214390A74()
{
  uint64_t v0;
  uint64_t v2;
  _BYTE v3[72];

  sub_2142AB498(v0, (uint64_t)v3);
  sub_214425874();
  sub_214390788((uint64_t)&v2);
  return sub_2144258B0();
}

uint64_t sub_214390AC4(uint64_t a1, uint64_t a2)
{
  _BYTE v4[72];
  _BYTE v5[72];

  sub_2142AB498(a1, (uint64_t)v4);
  sub_2142AB498(a2, (uint64_t)v5);
  return sub_214390B0C((uint64_t)v4, (uint64_t)v5) & 1;
}

uint64_t sub_214390B0C(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v3;
  double v4;
  __n128 v5;
  unsigned int v6;
  double v7;
  double v8;
  double v9;
  double v10;
  unsigned int v11;
  unsigned __int8 v12;
  double v13;
  double v14;
  double v15;
  double v16;
  unsigned int v17;
  uint64_t result;
  __n128 v19;
  double v20;
  double v21;
  double v22;
  unsigned int v23;
  double v24;
  char v25;
  char v26;
  double v27;
  double v28;
  double v29;
  double v30;
  unsigned int v31;
  char v32;
  char v33;
  double v34;
  double v35;
  __n128 v36;
  __n128 v37;
  char v38;
  __n128 v39;
  unsigned __int8 v40;
  double v41;
  double v42;
  uint64_t v43;
  double v44;
  double v45;
  unsigned __int8 v46;
  __n128 v47;
  unsigned __int8 v48;
  double v49;
  double v50;
  uint64_t v51;
  double v52;
  double v53;
  unsigned __int8 v54;
  __n128 v55;
  __n128 v56;
  char v57;

  sub_2142AB498(a1, (uint64_t)&v47);
  v3 = v51;
  if ((v51 & 0x8000000000000000) == 0)
  {
    sub_21421CFC8(&v47, &v55);
    sub_2142AB498(a2, (uint64_t)&v39);
    if (v43 < 0)
      return 0;
    sub_21421CFC8(&v39, &v36);
    sub_21421CFC8(&v55, &v56);
    if (!v57)
    {
      v4 = v56.n128_f64[0];
      sub_21421CFC8(&v36, &v37);
      if (v38)
        return 0;
      return v4 == v37.n128_f64[0];
    }
    if (v57 == 1)
    {
      v4 = v56.n128_f64[0];
      sub_21421CFC8(&v36, &v37);
      if (v38 != 1)
        return 0;
      return v4 == v37.n128_f64[0];
    }
    v19 = v56;
    sub_21421CFC8(&v36, &v37);
    if (v38 != 2)
      return 0;
    if (*(_OWORD *)&v19 == *(_OWORD *)&v37)
      return 1;
    return (sub_214425790() & 1) != 0;
  }
  v51 &= ~0x8000000000000000;
  v5 = v47;
  v6 = v48;
  v8 = v49;
  v7 = v50;
  v10 = v52;
  v9 = v53;
  v11 = v54;
  sub_2142AB498(a2, (uint64_t)&v39);
  v12 = v43;
  if ((v43 & 0x8000000000000000) == 0)
  {
    sub_21421CFC8(&v39, &v56);
    return 0;
  }
  v43 &= ~0x8000000000000000;
  v14 = v41;
  v13 = v42;
  v16 = v44;
  v15 = v45;
  v17 = v46;
  if (v6 > 0xFB)
  {
    if (v40 <= 0xFBu)
      return 0;
    goto LABEL_11;
  }
  if (v40 > 0xFBu)
    return 0;
  if ((v6 & 0x80) != 0)
  {
    if ((v40 & 0x80) == 0)
      return 0;
    if ((v6 & 1) != 0)
    {
      if ((v40 & 1) == 0)
        return 0;
    }
    else if ((v40 & 1) != 0)
    {
      return 0;
    }
    result = 0;
    if (v5.n128_f64[0] != v39.n128_f64[0])
      return result;
    v20 = v5.n128_f64[1];
    v21 = v39.n128_f64[1];
LABEL_61:
    if (v20 != v21)
      return result;
    goto LABEL_11;
  }
  if ((v40 & 0x80) != 0)
    return 0;
  if (!v6)
  {
    result = 0;
    if (v40)
      return result;
LABEL_49:
    v20 = v5.n128_f64[0];
    v21 = v39.n128_f64[0];
    goto LABEL_61;
  }
  if (v6 == 1)
  {
    result = 0;
    if (v40 != 1)
      return result;
    goto LABEL_49;
  }
  if (v40 != 2)
    return 0;
  if (*(_OWORD *)&v5 != *(_OWORD *)&v39)
  {
    v34 = v41;
    v35 = v45;
    v22 = v44;
    v23 = v46;
    v24 = v42;
    v25 = sub_214425790();
    v14 = v34;
    v15 = v35;
    v13 = v24;
    v17 = v23;
    v16 = v22;
    v26 = v25;
    result = 0;
    if ((v26 & 1) == 0)
      return result;
  }
LABEL_11:
  if (v3 > 0xFBu)
  {
    if (v12 <= 0xFBu)
      return 0;
LABEL_13:
    if (v11 <= 0xFB)
    {
      if (v17 > 0xFB)
        return 0;
      if ((v11 & 0x80) == 0)
      {
        if ((v17 & 0x80) != 0)
          return 0;
        if (v11)
        {
          if (v11 != 1)
          {
            if (v17 != 2)
              return 0;
            if (*(_QWORD *)&v10 == *(_QWORD *)&v16 && *(_QWORD *)&v9 == *(_QWORD *)&v15)
              return 1;
            return (sub_214425790() & 1) != 0;
          }
          if (v17 != 1)
            return 0;
        }
        else if (v17)
        {
          return 0;
        }
        return v10 == v16;
      }
      if ((v17 & 0x80) == 0)
        return 0;
      if ((v11 & 1) != 0)
      {
        if ((v17 & 1) == 0)
          return 0;
      }
      else if ((v17 & 1) != 0)
      {
        return 0;
      }
      if (v10 != v16 || v9 != v15)
        return 0;
    }
    else if (v17 <= 0xFB)
    {
      return 0;
    }
    return 1;
  }
  if (v12 > 0xFBu)
    return 0;
  if ((v3 & 0x80) != 0)
  {
    if ((v12 & 0x80) == 0)
      return 0;
    if ((v3 & 1) != 0)
    {
      if ((v12 & 1) == 0)
        return 0;
    }
    else if ((v12 & 1) != 0)
    {
      return 0;
    }
    result = 0;
    if (v8 != v14)
      return result;
    v27 = v7;
    v28 = v13;
LABEL_77:
    if (v27 == v28)
      goto LABEL_13;
    return result;
  }
  if ((v12 & 0x80) != 0)
    return 0;
  if (!v3)
  {
    result = 0;
    if (v12)
      return result;
LABEL_64:
    v27 = v8;
    v28 = v14;
    goto LABEL_77;
  }
  if (v3 == 1)
  {
    result = 0;
    if (v12 != 1)
      return result;
    goto LABEL_64;
  }
  if (v12 != 2)
    return 0;
  if (*(_QWORD *)&v8 == *(_QWORD *)&v14 && *(_QWORD *)&v7 == *(_QWORD *)&v13)
    goto LABEL_13;
  v29 = v15;
  v30 = v16;
  v31 = v17;
  v32 = sub_214425790();
  v17 = v31;
  v16 = v30;
  v15 = v29;
  v33 = v32;
  result = 0;
  if ((v33 & 1) != 0)
    goto LABEL_13;
  return result;
}

uint64_t _s6Charts8LineMarkV19_layoutChartContentyyAC_AA01_eF12LayoutInputsVtFZ_0(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  _BYTE v6[144];
  _BYTE v7[144];

  sub_2141EDFD8(a1, (uint64_t)v7);
  sub_2141EDFD8(a1 + 144, (uint64_t)v6);
  v4 = *a2;
  swift_beginAccess();
  swift_retain();
  sub_214200BC0((uint64_t)v7);
  sub_214200BC0((uint64_t)v6);
  sub_214202388((uint64_t)v7);
  sub_214202388((uint64_t)v6);
  if (*(_BYTE *)(v4 + 1192) == 1)
    *(_BYTE *)(v4 + 1193) = 1;
  return swift_release();
}

uint64_t sub_214390FE0()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;

  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v0 + 96))
  {
    sub_2141ED0BC(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_BYTE *)(v0 + 88));
    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(v0 + 128))
  {
    sub_2141ED0BC(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112), *(_BYTE *)(v0 + 120));
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  v1 = *(_QWORD *)(v0 + 144);
  v2 = *(_QWORD *)(v0 + 168);
  v3 = *(_QWORD *)(v0 + 200);
  v4 = *(_QWORD *)(v0 + 208);
  v5 = *(_QWORD *)(v0 + 216);
  v6 = *(_QWORD *)(v0 + 240);
  v7 = *(_QWORD *)(v0 + 272);
  v8 = *(_QWORD *)(v0 + 288);
  if (v6 > 1
    || (v1 & 0xFFFFFFFFFFFFFFF8) != 0x7FFFFFFF8
    || v2 > 1
    || (v5 | v4) & 0xF000000000000007 | v3 & 0xFFFFFFFFFFFFFF7CLL
    || (v8 | *(_QWORD *)(v0 + 280)) & 0xF000000000000007 | v7 & 0xFFFFFFFFFFFFFF7CLL)
  {
    sub_2141EF5D4(v1, *(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 160), v2, *(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 192), v3, v4, v5, *(_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 232), v6, *(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 256), *(_QWORD *)(v0 + 264), v7, *(_QWORD *)(v0 + 280), v8);
  }
  swift_bridgeObjectRelease();
  v9 = *(_QWORD *)(v0 + 304);
  v10 = *(_QWORD *)(v0 + 328);
  v11 = *(_QWORD *)(v0 + 360);
  v12 = *(_QWORD *)(v0 + 368);
  v13 = *(_QWORD *)(v0 + 376);
  v14 = *(_QWORD *)(v0 + 400);
  v15 = *(_QWORD *)(v0 + 432);
  v16 = *(_QWORD *)(v0 + 448);
  if (v14 > 1
    || (v9 & 0xFFFFFFFFFFFFFFF8) != 0x7FFFFFFF8
    || v10 > 1
    || (v13 | v12) & 0xF000000000000007 | v11 & 0xFFFFFFFFFFFFFF7CLL
    || (v16 | *(_QWORD *)(v0 + 440)) & 0xF000000000000007 | v15 & 0xFFFFFFFFFFFFFF7CLL)
  {
    sub_2141EF5D4(v9, *(_QWORD *)(v0 + 312), *(_QWORD *)(v0 + 320), v10, *(_QWORD *)(v0 + 336), *(_QWORD *)(v0 + 344), *(_QWORD *)(v0 + 352), v11, v12, v13, *(_QWORD *)(v0 + 384), *(_QWORD *)(v0 + 392), v14, *(_QWORD *)(v0 + 408), *(_QWORD *)(v0 + 416), *(_QWORD *)(v0 + 424), v15, *(_QWORD *)(v0 + 440), v16);
  }
  v17 = *(_QWORD *)(v0 + 456);
  v18 = *(_QWORD *)(v0 + 480);
  v19 = *(_QWORD *)(v0 + 512);
  v20 = *(_QWORD *)(v0 + 520);
  v21 = *(_QWORD *)(v0 + 528);
  v22 = *(_QWORD *)(v0 + 552);
  v23 = *(_QWORD *)(v0 + 584);
  v24 = *(_QWORD *)(v0 + 600);
  if (v22 > 1
    || (v17 & 0xFFFFFFFFFFFFFFF8) != 0x7FFFFFFF8
    || v18 > 1
    || (v21 | v20) & 0xF000000000000007 | v19 & 0xFFFFFFFFFFFFFF7CLL
    || (v24 | *(_QWORD *)(v0 + 592)) & 0xF000000000000007 | v23 & 0xFFFFFFFFFFFFFF7CLL)
  {
    sub_2141EF5D4(v17, *(_QWORD *)(v0 + 464), *(_QWORD *)(v0 + 472), v18, *(_QWORD *)(v0 + 488), *(_QWORD *)(v0 + 496), *(_QWORD *)(v0 + 504), v19, v20, v21, *(_QWORD *)(v0 + 536), *(_QWORD *)(v0 + 544), v22, *(_QWORD *)(v0 + 560), *(_QWORD *)(v0 + 568), *(_QWORD *)(v0 + 576), v23, *(_QWORD *)(v0 + 592), v24);
  }
  return swift_deallocObject();
}

uint64_t sub_214391238(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t (*a10)(void), void (*a11)(void))
{
  if (a6 < 0)
  {
    a11();
    ((void (*)(uint64_t, uint64_t, uint64_t))a11)(a4, a5, a6);
    a10 = (uint64_t (*)(void))a11;
  }
  return a10();
}

uint64_t sub_2143912BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_2141D8BF8(&qword_253F12208);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_214391304(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_2141D8BF8(&qword_253F12208);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

ValueMetadata *type metadata accessor for LineMark()
{
  return &type metadata for LineMark;
}

uint64_t destroy for LineSeriesKey(uint64_t a1)
{
  uint64_t v2;

  LOBYTE(v2) = *(_BYTE *)(a1 + 64);
  return sub_214391238(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), v2, (uint64_t (*)(void))sub_2141E60B8, (void (*)(void))sub_2141EF1BC);
}

uint64_t initializeWithCopy for LineSeriesKey(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v13;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_BYTE *)(a2 + 64);
  LOBYTE(v13) = v11;
  sub_214391238(*(_QWORD *)a2, v4, v5, v6, v7, v8, v9, v10, v13, (uint64_t (*)(void))sub_2141DD14C, (void (*)(void))sub_2141DD164);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  *(_BYTE *)(a1 + 64) = v11;
  return a1;
}

uint64_t assignWithCopy for LineSeriesKey(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v22;
  uint64_t v23;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_BYTE *)(a2 + 64);
  LOBYTE(v22) = v11;
  sub_214391238(*(_QWORD *)a2, v4, v5, v6, v7, v8, v9, v10, v22, (uint64_t (*)(void))sub_2141DD14C, (void (*)(void))sub_2141DD164);
  v12 = *(_QWORD *)a1;
  v13 = *(_QWORD *)(a1 + 8);
  v14 = *(_QWORD *)(a1 + 16);
  v15 = *(_QWORD *)(a1 + 24);
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 40);
  v18 = *(_QWORD *)(a1 + 48);
  v19 = *(_QWORD *)(a1 + 56);
  v20 = *(_BYTE *)(a1 + 64);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  *(_BYTE *)(a1 + 64) = v11;
  LOBYTE(v23) = v20;
  sub_214391238(v12, v13, v14, v15, v16, v17, v18, v19, v23, (uint64_t (*)(void))sub_2141E60B8, (void (*)(void))sub_2141EF1BC);
  return a1;
}

uint64_t assignWithTake for LineSeriesKey(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  __int128 v13;
  __int128 v14;
  uint64_t v16;

  v3 = *(_BYTE *)(a2 + 64);
  v4 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  v10 = *(_QWORD *)(a1 + 48);
  v11 = *(_QWORD *)(a1 + 56);
  v12 = *(_BYTE *)(a1 + 64);
  v13 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v13;
  v14 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v14;
  *(_BYTE *)(a1 + 64) = v3;
  LOBYTE(v16) = v12;
  sub_214391238(v4, v6, v5, v7, v8, v9, v10, v11, v16, (uint64_t (*)(void))sub_2141E60B8, (void (*)(void))sub_2141EF1BC);
  return a1;
}

uint64_t getEnumTagSinglePayload for LineSeriesKey(uint64_t a1, int a2)
{
  unsigned int v2;
  int v3;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 65))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_DWORD *)(a1 + 17);
  if (v2 > 0x80000000)
    v3 = ~v2;
  else
    v3 = -1;
  return (v3 + 1);
}

double storeEnumTagSinglePayload for LineSeriesKey(uint64_t a1, int a2, int a3)
{
  double result;

  if (a2 < 0)
  {
    *(_QWORD *)(a1 + 56) = 0;
    result = 0.0;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_BYTE *)(a1 + 64) = 0;
    *(_QWORD *)a1 = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(a1 + 65) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = (unint64_t)-a2 << 8;
      result = 0.0;
      *(_OWORD *)(a1 + 24) = 0u;
      *(_OWORD *)(a1 + 40) = 0u;
      *(_OWORD *)(a1 + 49) = 0u;
      return result;
    }
    *(_BYTE *)(a1 + 65) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t sub_214391658(uint64_t a1)
{
  return *(_QWORD *)(a1 + 40) >> 63;
}

uint64_t sub_214391664(uint64_t result)
{
  *(_QWORD *)(result + 40) &= ~0x8000000000000000;
  return result;
}

uint64_t sub_214391674(uint64_t result, uint64_t a2)
{
  unint64_t v2;

  v2 = *(unsigned __int8 *)(result + 40) | (unint64_t)(a2 << 63);
  *(_QWORD *)(result + 16) = *(unsigned __int8 *)(result + 16);
  *(_QWORD *)(result + 40) = v2;
  return result;
}

ValueMetadata *type metadata accessor for LineSeriesKey()
{
  return &type metadata for LineSeriesKey;
}

unint64_t sub_2143916A0()
{
  unint64_t result;

  result = qword_253F11C90;
  if (!qword_253F11C90)
  {
    result = MEMORY[0x2199CD934](&unk_21442F740, &type metadata for LineSeriesKey);
    atomic_store(result, (unint64_t *)&qword_253F11C90);
  }
  return result;
}

void sub_2143916E8(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_2143916F4()
{
  return sub_214423EE8();
}

uint64_t sub_214391700()
{
  uint64_t v1;

  sub_2141DD29C();
  sub_214424224();
  return v1;
}

uint64_t EnvironmentValues.chartIsCanvasAccelerated.getter()
{
  unsigned __int8 v1;

  sub_214391770();
  sub_214424224();
  return v1;
}

unint64_t sub_214391770()
{
  unint64_t result;

  result = qword_253F152B8;
  if (!qword_253F152B8)
  {
    result = MEMORY[0x2199CD934](&unk_21442F904, &type metadata for ChartIsCanvasAcceleratedKey);
    atomic_store(result, (unint64_t *)&qword_253F152B8);
  }
  return result;
}

uint64_t EnvironmentValues.chartIsCanvasAccelerated.setter()
{
  sub_214391770();
  return sub_214424230();
}

uint64_t (*EnvironmentValues.chartIsCanvasAccelerated.modify(uint64_t a1))(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_QWORD *)(a1 + 8) = sub_214391770();
  sub_214424224();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a1 + 17);
  return sub_21439184C;
}

uint64_t sub_21439184C(uint64_t a1)
{
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a1 + 16);
  return sub_214424230();
}

uint64_t sub_214391880@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t *v9;

  v6 = *v2;
  v5 = v2[1];
  KeyPath = swift_getKeyPath();
  v8 = sub_2141D8BF8(&qword_253F11F98);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a2, a1, v8);
  v9 = (uint64_t *)(a2 + *(int *)(sub_2141D8BF8(&qword_253F11F78) + 36));
  *v9 = KeyPath;
  v9[1] = v6;
  v9[2] = v5;
  return swift_retain();
}

uint64_t sub_214391908()
{
  return AGCompareValues();
}

uint64_t ChartPlotContent.body.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
  return swift_retain();
}

uint64_t View.chartPlotStyle<A>(content:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v12;
  _QWORD v14[2];

  v12 = (_QWORD *)swift_allocObject();
  v12[2] = a3;
  v12[3] = a4;
  v12[4] = a5;
  v12[5] = a6;
  v12[6] = a1;
  v12[7] = a2;
  v14[0] = sub_214391A58;
  v14[1] = v12;
  swift_retain();
  MEMORY[0x2199CC254](v14, a3, &type metadata for ChartPlotStyleModifier, a5);
  return swift_release();
}

uint64_t sub_214391A34()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_214391A58(uint64_t a1)
{
  return sub_2141D96A4(a1);
}

uint64_t sub_214391A68()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_214391A78@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;
  char v3;

  sub_214391770();
  result = sub_214424224();
  *a1 = v3;
  return result;
}

uint64_t sub_214391AC4()
{
  sub_214391770();
  return sub_214424230();
}

ValueMetadata *type metadata accessor for ChartPlotContent()
{
  return &type metadata for ChartPlotContent;
}

uint64_t sub_214391B1C()
{
  return MEMORY[0x24BDF4760];
}

uint64_t sub_214391B28(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 16);
  v2 = sub_214424110();
  v4[0] = v1;
  v4[1] = sub_214391B80();
  return MEMORY[0x2199CD934](MEMORY[0x24BDED308], v2, v4);
}

unint64_t sub_214391B80()
{
  unint64_t result;

  result = qword_253F11C88;
  if (!qword_253F11C88)
  {
    result = MEMORY[0x2199CD934](&unk_21442F8B4, &type metadata for ChartPlotStyleModifier);
    atomic_store(result, (unint64_t *)&qword_253F11C88);
  }
  return result;
}

ValueMetadata *type metadata accessor for ChartPlotStyleModifier()
{
  return &type metadata for ChartPlotStyleModifier;
}

ValueMetadata *type metadata accessor for ChartIsCanvasAcceleratedKey()
{
  return &type metadata for ChartIsCanvasAcceleratedKey;
}

ValueMetadata *type metadata accessor for ChartPlotStyleConfiguration()
{
  return &type metadata for ChartPlotStyleConfiguration;
}

uint64_t sub_214391BF4()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for ChartPlotStyleConfigurationKey()
{
  return &type metadata for ChartPlotStyleConfigurationKey;
}

unint64_t sub_214391C20()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_253F11F70;
  if (!qword_253F11F70)
  {
    v1 = sub_2141D7924(&qword_253F11F78);
    v2[0] = sub_2141D9054(&qword_253F11F90, &qword_253F11F98, MEMORY[0x24BDEFB78]);
    v2[1] = sub_2141D9054(&qword_253F11FA0, &qword_253F11FA8, MEMORY[0x24BDF1028]);
    result = MEMORY[0x2199CD934](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&qword_253F11F70);
  }
  return result;
}

ValueMetadata *type metadata accessor for AttributeGraphBasedDSLFeature()
{
  return &type metadata for AttributeGraphBasedDSLFeature;
}

const char *sub_214391CCC()
{
  return "Charts";
}

const char *sub_214391CE0()
{
  return "attributeGraphBasedDSL";
}

uint64_t PointPlot<A>.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2142D7304(v2, v4, (uint64_t)v7);
  sub_2142D6BB0((uint64_t)v7, v4, a2);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

void sub_214391D90()
{
  type metadata accessor for XYRenderer();
}

void sub_214391DE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;

  v13 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v15 = (char *)&a9 - v14;
  v17 = type metadata accessor for VectorizedPointPlotContent(0, v11, v9, v16);
  MEMORY[0x24BDAC7A8](v17);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v10, a1);
  sub_214391EC4();
}

uint64_t sub_214391E80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v4, v5);
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(v3 + 32))(*(_QWORD *)(v6 - 136), v1, v0);
}

void sub_214391EC4()
{
  type metadata accessor for XYRenderer();
}

double sub_214391EF8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double result;
  uint64_t v10;

  *(_QWORD *)(v1 + 24) = a1;
  *(_QWORD *)(v1 + 32) = &off_24D1814F0;
  v4 = sub_2141D8DD8((uint64_t *)v1);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 32))(v4, v2, a1);
  v5 = (int *)type metadata accessor for PointsRenderer(0);
  *(_OWORD *)(v1 + 40) = 0u;
  *(_OWORD *)(v1 + 56) = 0u;
  v6 = v1 + v5[8];
  v7 = type metadata accessor for ChartContentRenderContext.Environment(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  v8 = v1 + v5[9];
  *(_QWORD *)(v8 + 32) = 0;
  result = 0.0;
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_BYTE *)(v8 + 40) = -1;
  v10 = v1 + v5[10];
  *(_QWORD *)v10 = 0;
  *(_QWORD *)(v10 + 8) = 0;
  *(_BYTE *)(v10 + 16) = -1;
  return result;
}

uint64_t sub_214391FA8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return PointPlot<A>.body.getter(a1, a2);
}

void PointPlot.init<A, B, C>(_:x:y:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[4];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v24 = a3;
  v25 = a9;
  v26 = a1;
  v27 = a2;
  v20 = a7;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v23 = type metadata accessor for BoundingSectionSpecification(0, AssociatedTypeWitness, a6, a10);
  MEMORY[0x24BDAC7A8](v23);
  v22 = (char *)v18 - v16;
  v19 = type metadata accessor for BoundingSectionSpecification(0, AssociatedTypeWitness, a5, a8);
  v17 = MEMORY[0x24BDAC7A8](v19);
  v21 = *(_QWORD *)(a4 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v28 = a4;
  v29 = a5;
  v18[0] = a5;
  v18[1] = a8;
  v30 = a6;
  v31 = a7;
  v32 = a8;
  v33 = a10;
  type metadata accessor for XYRenderer();
}

void sub_2143920FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  MEMORY[0x24BDAC7A8](a1);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v9 + 16))(v5, *(_QWORD *)(v10 - 152), v1);
  v11 = type metadata accessor for PlottableProjection(0, v3, v2, v6);
  v12 = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(v10 - 224) = v11;
  *(_QWORD *)(v10 - 216) = v12;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v12 + 16))(v4, *(_QWORD *)(v10 - 144), v11);
  swift_storeEnumTagMultiPayload();
  v13 = type metadata accessor for PlottableProjection(0, v3, v7, v8);
  (*(void (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(*(_QWORD *)(v10 - 184), *(_QWORD *)(v10 - 168), v13);
  swift_storeEnumTagMultiPayload();
  sub_21426CC14();
}

void sub_2143921F8()
{
  sub_214391D90();
}

uint64_t sub_214392220()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v1);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v4 - 216) + 8))(*(_QWORD *)(v4 - 144), *(_QWORD *)(v4 - 224));
  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(v4 - 192) + 8))(*(_QWORD *)(v4 - 152), v0);
}

void PointPlot.init<A, B>(_:x:y:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v13 = type metadata accessor for BoundingSectionSpecification(0, AssociatedTypeWitness, MEMORY[0x24BEE13C8], (uint64_t)&protocol witness table for Double);
  MEMORY[0x24BDAC7A8](v13);
  v12 = type metadata accessor for BoundingSectionSpecification(0, AssociatedTypeWitness, a6, a8);
  v11 = MEMORY[0x24BDAC7A8](v12);
  MEMORY[0x24BDAC7A8](v11);
  type metadata accessor for XYRenderer();
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v13 = type metadata accessor for BoundingSectionSpecification(0, AssociatedTypeWitness, a6, a8);
  MEMORY[0x24BDAC7A8](v13);
  v11 = type metadata accessor for BoundingSectionSpecification(0, AssociatedTypeWitness, MEMORY[0x24BEE13C8], (uint64_t)&protocol witness table for Double);
  v12 = MEMORY[0x24BDAC7A8](v11);
  MEMORY[0x24BDAC7A8](v12);
  type metadata accessor for XYRenderer();
}

void sub_2143923CC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  MEMORY[0x24BDAC7A8](a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v3, v5, v1);
  v11 = type metadata accessor for PlottableProjection(0, v7, v6, v4);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v2, *(_QWORD *)(v10 - 160), v11);
  swift_storeEnumTagMultiPayload();
  *(_QWORD *)v9 = *(_QWORD *)(v10 - 152);
  *(_BYTE *)(v9 + 8) = *(_DWORD *)(v10 - 140) & 1;
  swift_storeEnumTagMultiPayload();
  sub_21426CC14();
}

void sub_2143924B4()
{
  sub_214391D90();
}

uint64_t sub_2143924DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v3, v2);
  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(v4 - 184) + 8))(*(_QWORD *)(v4 - 200), v0);
}

void PointPlot.init<A, B>(_:x:y:)(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v9 = *(_QWORD *)(*a3 + *MEMORY[0x24BEE46A8]);
  v12 = type metadata accessor for BoundingSectionSpecification(0, v9, MEMORY[0x24BEE13C8], (uint64_t)&protocol witness table for Double);
  MEMORY[0x24BDAC7A8](v12);
  v11 = type metadata accessor for BoundingSectionSpecification(0, v9, a5, a7);
  v10 = MEMORY[0x24BDAC7A8](v11);
  MEMORY[0x24BDAC7A8](v10);
  type metadata accessor for XYRenderer();
}

void sub_214392658(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  MEMORY[0x24BDAC7A8](a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v9, v3, v1);
  v11 = type metadata accessor for PlottableProjection(0, v8, v5, v4);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v2, *(_QWORD *)(v10 - 152), v11);
  swift_storeEnumTagMultiPayload();
  *v6 = *(_QWORD *)(v10 - 144);
  swift_storeEnumTagMultiPayload();
  sub_21426CC14();
}

void sub_214392730()
{
  sub_214391D90();
}

uint64_t sub_21439275C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v2, v3);
  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(v4 - 176) + 8))(*(_QWORD *)(v4 - 192), v0);
}

void sub_2143928F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  MEMORY[0x24BDAC7A8](a1);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v5 + 16))(v7, *(_QWORD *)(v9 - 136), v1);
  *(_QWORD *)v3 = *(_QWORD *)(v9 - 176);
  *(_BYTE *)(v3 + 8) = *(_DWORD *)(v9 - 156) & 1;
  swift_storeEnumTagMultiPayload();
  v10 = type metadata accessor for PlottableProjection(0, v2, v6, v4);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, *(_QWORD *)(v9 - 152), v10);
  swift_storeEnumTagMultiPayload();
  sub_21426CC14();
}

void sub_2143929D8()
{
  sub_214391D90();
}

uint64_t sub_214392A00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v1);
  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(v4 - 184) + 8))(*(_QWORD *)(v4 - 136), v0);
}

void PointPlot.init<A, B>(_:x:y:)(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v7 = *(_QWORD *)(*a2 + *MEMORY[0x24BEE46A8]);
  v10 = type metadata accessor for BoundingSectionSpecification(0, v7, a5, a7);
  MEMORY[0x24BDAC7A8](v10);
  v8 = type metadata accessor for BoundingSectionSpecification(0, v7, MEMORY[0x24BEE13C8], (uint64_t)&protocol witness table for Double);
  v9 = MEMORY[0x24BDAC7A8](v8);
  MEMORY[0x24BDAC7A8](v9);
  type metadata accessor for XYRenderer();
}

void sub_214392B7C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  MEMORY[0x24BDAC7A8](a1);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v3 + 16))(v7, *(_QWORD *)(v9 - 136), v1);
  *v6 = *(_QWORD *)(v9 - 168);
  swift_storeEnumTagMultiPayload();
  v10 = type metadata accessor for PlottableProjection(0, v2, v5, v4);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, *(_QWORD *)(v9 - 152), v10);
  swift_storeEnumTagMultiPayload();
  sub_21426CC14();
}

void sub_214392C54()
{
  sub_214391D90();
}

uint64_t sub_214392C7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v1);
  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(v4 - 176) + 8))(*(_QWORD *)(v4 - 136), v0);
}

uint64_t static VectorizedPointPlotContent._layoutChartContent(_:_:)(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;

  v4 = type metadata accessor for PointsRenderer(0);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (_QWORD *)((char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_214392D7C(a1, (uint64_t)v6);
  v7 = v6[3];
  v8 = v6[4];
  sub_2141E88D0(v6, v7);
  v10 = *a2;
  (*(void (**)(__int128 *, uint64_t, uint64_t))(v8 + 8))(&v10, v7, v8);
  return sub_2141DD370((uint64_t)v6, type metadata accessor for PointsRenderer);
}

uint64_t sub_214392D7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PointsRenderer(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t static VectorizedPointPlotContent._renderChartContent(_:_:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unsigned __int8 v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  unsigned __int8 v32[8];
  uint64_t v33;

  v6 = sub_2141D8BF8(&qword_253F14280);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for PointsRenderer(0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_BYTE *)a2;
  v13 = *(_QWORD *)(a2 + 8);
  sub_214392D7C((uint64_t)a1, (uint64_t)v11);
  v32[0] = v12;
  v33 = v13;
  sub_214301C58(v32);
  if ((v12 & 1) != 0)
  {
    v14 = type metadata accessor for SgGroup(0);
    v31 = a3;
    v15 = (int *)v14;
    v16 = swift_allocBox();
    v18 = v17;
    v30 = *(_QWORD *)(*(_QWORD *)(v13 + 16) + 24);
    v20 = a1[3];
    v19 = a1[4];
    sub_2141E88D0(a1, v20);
    v21 = (*(uint64_t (**)(ValueMetadata *, uint64_t, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t))(v19 + 32))(&type metadata for PointMark, v13, &type metadata for PointMark, &off_24D18CEE0, v20, v19);
    v22 = type metadata accessor for SgClipRect(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v8, 1, 1, v22);
    v23 = v13 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_environment;
    swift_beginAccess();
    v24 = *(_QWORD *)(v23 + *(int *)(type metadata accessor for ChartContentRenderContext.Environment(0) + 64));
    sub_2141DD370((uint64_t)v11, type metadata accessor for PointsRenderer);
    *v18 = v30;
    v18[1] = v21;
    result = sub_2141ED100((uint64_t)v8, (uint64_t)v18 + v15[6]);
    *(_QWORD *)((char *)v18 + v15[7]) = 0x3FF0000000000000;
    *(_QWORD *)((char *)v18 + v15[8]) = v24;
    *(_QWORD *)((char *)v18 + v15[9]) = MEMORY[0x24BEE4AF8];
    v26 = v15[10];
    a3 = v31;
    *((_BYTE *)v18 + v26) = 0;
  }
  else
  {
    type metadata accessor for AnyVectorizedRenderer(0);
    v27 = swift_allocBox();
    sub_214393004((uint64_t)v11, v28);
    type metadata accessor for AnyVectorizedRenderer.MarkRenderer(0);
    result = swift_storeEnumTagMultiPayload();
    v16 = v27 | 0xD000000000000000;
  }
  *a3 = v16;
  return result;
}

uint64_t sub_214393004(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PointsRenderer(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_214393048()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_214393080(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)a3 + 8);
  result = MEMORY[0x2199CD934](&protocol conformance descriptor for <A> PointPlot<A>, a2, &v5);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_2143930CC(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_21439317C + 4 * byte_21442FA30[(v7 - 1)]))();
}

void sub_2143931CC(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t type metadata accessor for PointPlot(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2141D8E88(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PointPlot);
}

uint64_t sub_214393388()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for PointsRenderer(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_2143933F0(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  int *v6;
  __int128 v7;
  uint64_t v8;
  _OWORD *v9;
  _OWORD *v10;
  int *v11;
  uint64_t v12;
  unsigned int (*v13)(_OWORD *, uint64_t, int *);
  uint64_t v14;
  uint64_t v15;
  int v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  int v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  __int128 v74;
  __int128 v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  __int128 v99;
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  __int128 v106;
  uint64_t v107;
  _QWORD *v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  __int128 v115;
  uint64_t v116;
  uint64_t v117;
  _OWORD *v118;
  int v119;
  __int128 v120;
  __int128 v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v126;
  int *v127;

  v4 = type metadata accessor for PointsRenderer(0);
  v5 = *(_DWORD *)(*(_QWORD *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v15 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    v6 = (int *)v4;
    v7 = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 24) = v7;
    (**(void (***)(uint64_t, uint64_t *))(v7 - 8))(a1, a2);
    *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
    *(_QWORD *)(a1 + 48) = a2[6];
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 7);
    v8 = v6[8];
    v9 = (_OWORD *)(a1 + v8);
    v10 = (_OWORD *)((char *)a2 + v8);
    v11 = (int *)type metadata accessor for ChartContentRenderContext.Environment(0);
    v12 = *((_QWORD *)v11 - 1);
    v13 = *(unsigned int (**)(_OWORD *, uint64_t, int *))(v12 + 48);
    swift_retain();
    if (v13(v10, 1, v11))
    {
      v14 = sub_2141D8BF8(qword_254D69B70);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      v16 = *((unsigned __int8 *)v10 + 40);
      v127 = v6;
      if (v16 == 255)
      {
        v17 = v10[1];
        *v9 = *v10;
        v9[1] = v17;
        *(_OWORD *)((char *)v9 + 25) = *(_OWORD *)((char *)v10 + 25);
      }
      else if ((v16 & 1) != 0)
      {
        v18 = *(_OWORD *)((char *)v10 + 24);
        *(_OWORD *)((char *)v9 + 24) = v18;
        (**(void (***)(_OWORD *, _OWORD *))(v18 - 8))(v9, v10);
        *((_BYTE *)v9 + 40) = 1;
      }
      else
      {
        *(_QWORD *)v9 = *(_QWORD *)v10;
        *((_BYTE *)v9 + 40) = 0;
        swift_retain();
      }
      *((_BYTE *)v9 + 41) = *((_BYTE *)v10 + 41);
      *((_QWORD *)v9 + 6) = *((_QWORD *)v10 + 6);
      *((_QWORD *)v9 + 7) = *((_QWORD *)v10 + 7);
      v19 = *((_QWORD *)v10 + 9);
      *((_QWORD *)v9 + 8) = *((_QWORD *)v10 + 8);
      *((_QWORD *)v9 + 9) = v19;
      *((_QWORD *)v9 + 10) = *((_QWORD *)v10 + 10);
      v20 = *((unsigned __int8 *)v10 + 128);
      swift_bridgeObjectRetain();
      v126 = v12;
      if (v20 == 255)
      {
        v21 = *(_OWORD *)((char *)v10 + 104);
        *(_OWORD *)((char *)v9 + 88) = *(_OWORD *)((char *)v10 + 88);
        *(_OWORD *)((char *)v9 + 104) = v21;
        *(_OWORD *)((char *)v9 + 113) = *(_OWORD *)((char *)v10 + 113);
      }
      else if ((v20 & 1) != 0)
      {
        *((_QWORD *)v9 + 11) = *((_QWORD *)v10 + 11);
        v9[6] = v10[6];
        *((_BYTE *)v9 + 128) = 1;
        swift_retain();
      }
      else
      {
        v22 = v10[7];
        v9[7] = v22;
        (**(void (***)(uint64_t, uint64_t))(v22 - 8))((uint64_t)v9 + 88, (uint64_t)v10 + 88);
        *((_BYTE *)v9 + 128) = 0;
      }
      *(_OWORD *)((char *)v9 + 136) = *(_OWORD *)((char *)v10 + 136);
      *((_BYTE *)v9 + 152) = *((_BYTE *)v10 + 152);
      *((_QWORD *)v9 + 20) = *((_QWORD *)v10 + 20);
      *((_BYTE *)v9 + 168) = *((_BYTE *)v10 + 168);
      v23 = v10[12];
      v9[11] = v10[11];
      v9[12] = v23;
      *((_BYTE *)v9 + 208) = *((_BYTE *)v10 + 208);
      v24 = v11[11];
      v25 = (char *)v9 + v24;
      v26 = (char *)v10 + v24;
      v27 = sub_214424308();
      v28 = *(_QWORD *)(v27 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
      {
        v29 = sub_2141D8BF8(&qword_253F134C8);
        memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v28 + 16))(v25, v26, v27);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
      }
      v30 = v11[12];
      v31 = (char *)v9 + v30;
      v32 = (char *)v10 + v30;
      *(_QWORD *)v31 = *(_QWORD *)v32;
      v31[8] = v32[8];
      *(_QWORD *)((char *)v9 + v11[13]) = *(_QWORD *)((char *)v10 + v11[13]);
      v33 = v11[14];
      v34 = (char *)v9 + v33;
      v35 = (char *)v10 + v33;
      v36 = sub_214424C68();
      v37 = *(_QWORD *)(v36 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v35, 1, v36))
      {
        v38 = sub_2141D8BF8(&qword_253F15C88);
        memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v37 + 16))(v34, v35, v36);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, v36);
      }
      v39 = v11[15];
      v40 = (char *)v9 + v39;
      v41 = (char *)v10 + v39;
      *(_QWORD *)v40 = *(_QWORD *)v41;
      *((_WORD *)v40 + 4) = *((_WORD *)v41 + 4);
      *(_QWORD *)((char *)v9 + v11[16]) = *(_QWORD *)((char *)v10 + v11[16]);
      *(_QWORD *)((char *)v9 + v11[17]) = *(_QWORD *)((char *)v10 + v11[17]);
      v42 = v11[18];
      v43 = (char *)v9 + v42;
      v44 = (char *)v10 + v42;
      v45 = *(_QWORD *)((char *)v10 + v42 + 24);
      swift_retain();
      if (v45)
      {
        v46 = *(_QWORD *)v44;
        v47 = *((_QWORD *)v44 + 1);
        v48 = v44[16];
        sub_2141DD130(*(_QWORD *)v44, v47, v48);
        *(_QWORD *)v43 = v46;
        *((_QWORD *)v43 + 1) = v47;
        v43[16] = v48;
        v49 = *((_QWORD *)v44 + 4);
        *((_QWORD *)v43 + 3) = *((_QWORD *)v44 + 3);
        v50 = *((_QWORD *)v44 + 5);
        v51 = v44[48];
        swift_bridgeObjectRetain();
        sub_2141DD140(v49, v50, v51);
        *((_QWORD *)v43 + 4) = v49;
        *((_QWORD *)v43 + 5) = v50;
        v43[48] = v51;
        *(_OWORD *)(v43 + 56) = *(_OWORD *)(v44 + 56);
      }
      else
      {
        v52 = *((_OWORD *)v44 + 3);
        *((_OWORD *)v43 + 2) = *((_OWORD *)v44 + 2);
        *((_OWORD *)v43 + 3) = v52;
        *((_QWORD *)v43 + 8) = *((_QWORD *)v44 + 8);
        v53 = *((_OWORD *)v44 + 1);
        *(_OWORD *)v43 = *(_OWORD *)v44;
        *((_OWORD *)v43 + 1) = v53;
      }
      v54 = v11[19];
      v55 = (char *)v9 + v54;
      v56 = (char *)v10 + v54;
      if (*(_QWORD *)((char *)v10 + v54 + 24))
      {
        v57 = *(_QWORD *)v56;
        v58 = *((_QWORD *)v56 + 1);
        v59 = v56[16];
        sub_2141DD130(*(_QWORD *)v56, v58, v59);
        *(_QWORD *)v55 = v57;
        *((_QWORD *)v55 + 1) = v58;
        v55[16] = v59;
        v60 = *((_QWORD *)v56 + 4);
        *((_QWORD *)v55 + 3) = *((_QWORD *)v56 + 3);
        v61 = *((_QWORD *)v56 + 5);
        v62 = v56[48];
        swift_bridgeObjectRetain();
        sub_2141DD140(v60, v61, v62);
        *((_QWORD *)v55 + 4) = v60;
        *((_QWORD *)v55 + 5) = v61;
        v55[48] = v62;
        *(_OWORD *)(v55 + 56) = *(_OWORD *)(v56 + 56);
      }
      else
      {
        v63 = *((_OWORD *)v56 + 3);
        *((_OWORD *)v55 + 2) = *((_OWORD *)v56 + 2);
        *((_OWORD *)v55 + 3) = v63;
        *((_QWORD *)v55 + 8) = *((_QWORD *)v56 + 8);
        v64 = *((_OWORD *)v56 + 1);
        *(_OWORD *)v55 = *(_OWORD *)v56;
        *((_OWORD *)v55 + 1) = v64;
      }
      v65 = v11[20];
      v66 = (char *)v9 + v65;
      v67 = (char *)v10 + v65;
      if (*(_QWORD *)((char *)v10 + v65 + 24))
      {
        v68 = *(_QWORD *)v67;
        v69 = *((_QWORD *)v67 + 1);
        v70 = v67[16];
        sub_2141DD130(*(_QWORD *)v67, v69, v70);
        *(_QWORD *)v66 = v68;
        *((_QWORD *)v66 + 1) = v69;
        v66[16] = v70;
        v71 = *((_QWORD *)v67 + 4);
        *((_QWORD *)v66 + 3) = *((_QWORD *)v67 + 3);
        v72 = *((_QWORD *)v67 + 5);
        v73 = v67[48];
        swift_bridgeObjectRetain();
        sub_2141DD140(v71, v72, v73);
        *((_QWORD *)v66 + 4) = v71;
        *((_QWORD *)v66 + 5) = v72;
        v66[48] = v73;
        *(_OWORD *)(v66 + 56) = *(_OWORD *)(v67 + 56);
      }
      else
      {
        v74 = *((_OWORD *)v67 + 3);
        *((_OWORD *)v66 + 2) = *((_OWORD *)v67 + 2);
        *((_OWORD *)v66 + 3) = v74;
        *((_QWORD *)v66 + 8) = *((_QWORD *)v67 + 8);
        v75 = *((_OWORD *)v67 + 1);
        *(_OWORD *)v66 = *(_OWORD *)v67;
        *((_OWORD *)v66 + 1) = v75;
      }
      v76 = v11[21];
      v77 = (char *)v9 + v76;
      v78 = (char *)v10 + v76;
      if (*(_QWORD *)((char *)v10 + v76 + 24))
      {
        v79 = *(_QWORD *)v78;
        v80 = *((_QWORD *)v78 + 1);
        v81 = v78[16];
        sub_2141DD130(*(_QWORD *)v78, v80, v81);
        *(_QWORD *)v77 = v79;
        *((_QWORD *)v77 + 1) = v80;
        v77[16] = v81;
        v82 = *((_QWORD *)v78 + 4);
        *((_QWORD *)v77 + 3) = *((_QWORD *)v78 + 3);
        v83 = *((_QWORD *)v78 + 5);
        v84 = v78[48];
        swift_bridgeObjectRetain();
        sub_2141DD140(v82, v83, v84);
        *((_QWORD *)v77 + 4) = v82;
        *((_QWORD *)v77 + 5) = v83;
        v77[48] = v84;
        *(_OWORD *)(v77 + 56) = *(_OWORD *)(v78 + 56);
      }
      else
      {
        v85 = *((_OWORD *)v78 + 3);
        *((_OWORD *)v77 + 2) = *((_OWORD *)v78 + 2);
        *((_OWORD *)v77 + 3) = v85;
        *((_QWORD *)v77 + 8) = *((_QWORD *)v78 + 8);
        v86 = *((_OWORD *)v78 + 1);
        *(_OWORD *)v77 = *(_OWORD *)v78;
        *((_OWORD *)v77 + 1) = v86;
      }
      v87 = v11[22];
      v88 = (char *)v9 + v87;
      v89 = (char *)v10 + v87;
      *(_OWORD *)v88 = *(_OWORD *)v89;
      *((_QWORD *)v88 + 2) = *((_QWORD *)v89 + 2);
      v90 = v11[23];
      v91 = (char *)v9 + v90;
      v92 = (char *)v10 + v90;
      *(_OWORD *)v91 = *(_OWORD *)v92;
      *((_QWORD *)v91 + 2) = *((_QWORD *)v92 + 2);
      v93 = v11[24];
      v94 = (char *)v9 + v93;
      v95 = (char *)v10 + v93;
      if (*(_QWORD *)((char *)v10 + v93 + 24))
      {
        v96 = *(_QWORD *)v95;
        v97 = *((_QWORD *)v95 + 1);
        v98 = v95[16];
        sub_2141DD130(*(_QWORD *)v95, v97, v98);
        *(_QWORD *)v94 = v96;
        *((_QWORD *)v94 + 1) = v97;
        v94[16] = v98;
        *((_QWORD *)v94 + 3) = *((_QWORD *)v95 + 3);
        swift_bridgeObjectRetain();
      }
      else
      {
        v99 = *((_OWORD *)v95 + 1);
        *(_OWORD *)v94 = *(_OWORD *)v95;
        *((_OWORD *)v94 + 1) = v99;
      }
      v100 = v11[25];
      v101 = (char *)v9 + v100;
      v102 = (char *)v10 + v100;
      if (*(_QWORD *)((char *)v10 + v100 + 24))
      {
        v103 = *(_QWORD *)v102;
        v104 = *((_QWORD *)v102 + 1);
        v105 = v102[16];
        sub_2141DD130(*(_QWORD *)v102, v104, v105);
        *(_QWORD *)v101 = v103;
        *((_QWORD *)v101 + 1) = v104;
        v101[16] = v105;
        *((_QWORD *)v101 + 3) = *((_QWORD *)v102 + 3);
        swift_bridgeObjectRetain();
      }
      else
      {
        v106 = *((_OWORD *)v102 + 1);
        *(_OWORD *)v101 = *(_OWORD *)v102;
        *((_OWORD *)v101 + 1) = v106;
      }
      v107 = v11[26];
      v108 = (_QWORD *)((char *)v9 + v107);
      v109 = (_QWORD *)((char *)v10 + v107);
      v110 = v109[1];
      *v108 = *v109;
      v108[1] = v110;
      v111 = v11[27];
      v112 = (char *)v9 + v111;
      v113 = (char *)v10 + v111;
      v114 = *((_QWORD *)v113 + 3);
      swift_bridgeObjectRetain();
      if (v114)
      {
        *((_QWORD *)v112 + 3) = v114;
        (**(void (***)(char *, char *, uint64_t))(v114 - 8))(v112, v113, v114);
      }
      else
      {
        v115 = *((_OWORD *)v113 + 1);
        *(_OWORD *)v112 = *(_OWORD *)v113;
        *((_OWORD *)v112 + 1) = v115;
      }
      v6 = v127;
      (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v126 + 56))(v9, 0, 1, v11);
    }
    v116 = v6[9];
    v117 = a1 + v116;
    v118 = (_OWORD *)((char *)a2 + v116);
    v119 = *((unsigned __int8 *)a2 + v116 + 40);
    if (v119 == 255)
    {
      v120 = v118[1];
      *(_OWORD *)v117 = *v118;
      *(_OWORD *)(v117 + 16) = v120;
      *(_OWORD *)(v117 + 25) = *(_OWORD *)((char *)v118 + 25);
    }
    else if ((v119 & 1) != 0)
    {
      *(_QWORD *)v117 = *(_QWORD *)v118;
      *(_OWORD *)(v117 + 8) = *(_OWORD *)((char *)v118 + 8);
      *(_BYTE *)(v117 + 40) = 1;
      swift_retain();
    }
    else
    {
      v121 = *(_OWORD *)((char *)v118 + 24);
      *(_OWORD *)(v117 + 24) = v121;
      (**(void (***)(uint64_t))(v121 - 8))(v117);
      *(_BYTE *)(v117 + 40) = 0;
    }
    v122 = v6[10];
    v123 = a1 + v122;
    v124 = (uint64_t)a2 + v122;
    *(_OWORD *)v123 = *(_OWORD *)v124;
    *(_BYTE *)(v123 + 16) = *(_BYTE *)(v124 + 16);
  }
  return a1;
}

uint64_t sub_214393B88(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int *v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  int v21;

  _s6Charts15AnyChartContentVwxx_0(a1);
  swift_release();
  v2 = type metadata accessor for PointsRenderer(0);
  v3 = a1 + *(int *)(v2 + 32);
  v4 = (int *)type metadata accessor for ChartContentRenderContext.Environment(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v4 - 1) + 48))(v3, 1, v4))
  {
    v5 = *(unsigned __int8 *)(v3 + 40);
    if (v5 != 255)
    {
      if ((v5 & 1) != 0)
        _s6Charts15AnyChartContentVwxx_0(v3);
      else
        swift_release();
    }
    swift_bridgeObjectRelease();
    v6 = *(unsigned __int8 *)(v3 + 128);
    if (v6 != 255)
    {
      if ((v6 & 1) != 0)
        swift_release();
      else
        _s6Charts15AnyChartContentVwxx_0(v3 + 88);
    }
    v7 = v3 + v4[11];
    v8 = sub_214424308();
    v9 = *(_QWORD *)(v8 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
    v10 = v3 + v4[14];
    v11 = sub_214424C68();
    v12 = *(_QWORD *)(v11 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
      (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
    swift_release();
    v13 = v3 + v4[18];
    if (*(_QWORD *)(v13 + 24))
    {
      sub_2141ED0BC(*(_QWORD *)v13, *(_QWORD *)(v13 + 8), *(_BYTE *)(v13 + 16));
      swift_bridgeObjectRelease();
      sub_2141EF1B0(*(_QWORD *)(v13 + 32), *(_QWORD *)(v13 + 40), *(_BYTE *)(v13 + 48));
    }
    v14 = v3 + v4[19];
    if (*(_QWORD *)(v14 + 24))
    {
      sub_2141ED0BC(*(_QWORD *)v14, *(_QWORD *)(v14 + 8), *(_BYTE *)(v14 + 16));
      swift_bridgeObjectRelease();
      sub_2141EF1B0(*(_QWORD *)(v14 + 32), *(_QWORD *)(v14 + 40), *(_BYTE *)(v14 + 48));
    }
    v15 = v3 + v4[20];
    if (*(_QWORD *)(v15 + 24))
    {
      sub_2141ED0BC(*(_QWORD *)v15, *(_QWORD *)(v15 + 8), *(_BYTE *)(v15 + 16));
      swift_bridgeObjectRelease();
      sub_2141EF1B0(*(_QWORD *)(v15 + 32), *(_QWORD *)(v15 + 40), *(_BYTE *)(v15 + 48));
    }
    v16 = v3 + v4[21];
    if (*(_QWORD *)(v16 + 24))
    {
      sub_2141ED0BC(*(_QWORD *)v16, *(_QWORD *)(v16 + 8), *(_BYTE *)(v16 + 16));
      swift_bridgeObjectRelease();
      sub_2141EF1B0(*(_QWORD *)(v16 + 32), *(_QWORD *)(v16 + 40), *(_BYTE *)(v16 + 48));
    }
    v17 = v3 + v4[24];
    if (*(_QWORD *)(v17 + 24))
    {
      sub_2141ED0BC(*(_QWORD *)v17, *(_QWORD *)(v17 + 8), *(_BYTE *)(v17 + 16));
      swift_bridgeObjectRelease();
    }
    v18 = v3 + v4[25];
    if (*(_QWORD *)(v18 + 24))
    {
      sub_2141ED0BC(*(_QWORD *)v18, *(_QWORD *)(v18 + 8), *(_BYTE *)(v18 + 16));
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    v19 = v3 + v4[27];
    if (*(_QWORD *)(v19 + 24))
      _s6Charts15AnyChartContentVwxx_0(v19);
  }
  result = a1 + *(int *)(v2 + 36);
  v21 = *(unsigned __int8 *)(result + 40);
  if (v21 != 255)
  {
    if ((v21 & 1) != 0)
      return swift_release();
    else
      return _s6Charts15AnyChartContentVwxx_0(result);
  }
  return result;
}

uint64_t sub_214393E44(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  int *v5;
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  int *v9;
  uint64_t v10;
  unsigned int (*v11)(_OWORD *, uint64_t, int *);
  uint64_t v12;
  int v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  int v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  __int128 v96;
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  char v102;
  __int128 v103;
  uint64_t v104;
  _QWORD *v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  __int128 v112;
  uint64_t v113;
  uint64_t v114;
  _OWORD *v115;
  int v116;
  __int128 v117;
  __int128 v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v123;
  int *v124;

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  v5 = (int *)type metadata accessor for PointsRenderer(0);
  v6 = v5[8];
  v7 = (_OWORD *)(a1 + v6);
  v8 = (_OWORD *)(a2 + v6);
  v9 = (int *)type metadata accessor for ChartContentRenderContext.Environment(0);
  v10 = *((_QWORD *)v9 - 1);
  v11 = *(unsigned int (**)(_OWORD *, uint64_t, int *))(v10 + 48);
  swift_retain();
  if (v11(v8, 1, v9))
  {
    v12 = sub_2141D8BF8(qword_254D69B70);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    v13 = *((unsigned __int8 *)v8 + 40);
    v123 = v10;
    if (v13 == 255)
    {
      v14 = v8[1];
      *v7 = *v8;
      v7[1] = v14;
      *(_OWORD *)((char *)v7 + 25) = *(_OWORD *)((char *)v8 + 25);
    }
    else if ((v13 & 1) != 0)
    {
      v15 = *(_OWORD *)((char *)v8 + 24);
      *(_OWORD *)((char *)v7 + 24) = v15;
      (**(void (***)(_OWORD *, _OWORD *))(v15 - 8))(v7, v8);
      *((_BYTE *)v7 + 40) = 1;
    }
    else
    {
      *(_QWORD *)v7 = *(_QWORD *)v8;
      *((_BYTE *)v7 + 40) = 0;
      swift_retain();
    }
    *((_BYTE *)v7 + 41) = *((_BYTE *)v8 + 41);
    *((_QWORD *)v7 + 6) = *((_QWORD *)v8 + 6);
    *((_QWORD *)v7 + 7) = *((_QWORD *)v8 + 7);
    v16 = *((_QWORD *)v8 + 9);
    *((_QWORD *)v7 + 8) = *((_QWORD *)v8 + 8);
    *((_QWORD *)v7 + 9) = v16;
    *((_QWORD *)v7 + 10) = *((_QWORD *)v8 + 10);
    v17 = *((unsigned __int8 *)v8 + 128);
    swift_bridgeObjectRetain();
    if (v17 == 255)
    {
      v18 = *(_OWORD *)((char *)v8 + 104);
      *(_OWORD *)((char *)v7 + 88) = *(_OWORD *)((char *)v8 + 88);
      *(_OWORD *)((char *)v7 + 104) = v18;
      *(_OWORD *)((char *)v7 + 113) = *(_OWORD *)((char *)v8 + 113);
    }
    else if ((v17 & 1) != 0)
    {
      *((_QWORD *)v7 + 11) = *((_QWORD *)v8 + 11);
      v7[6] = v8[6];
      *((_BYTE *)v7 + 128) = 1;
      swift_retain();
    }
    else
    {
      v19 = v8[7];
      v7[7] = v19;
      (**(void (***)(uint64_t, uint64_t))(v19 - 8))((uint64_t)v7 + 88, (uint64_t)v8 + 88);
      *((_BYTE *)v7 + 128) = 0;
    }
    *(_OWORD *)((char *)v7 + 136) = *(_OWORD *)((char *)v8 + 136);
    *((_BYTE *)v7 + 152) = *((_BYTE *)v8 + 152);
    *((_QWORD *)v7 + 20) = *((_QWORD *)v8 + 20);
    *((_BYTE *)v7 + 168) = *((_BYTE *)v8 + 168);
    v20 = v8[12];
    v7[11] = v8[11];
    v7[12] = v20;
    *((_BYTE *)v7 + 208) = *((_BYTE *)v8 + 208);
    v21 = v9[11];
    v22 = (char *)v7 + v21;
    v23 = (char *)v8 + v21;
    v24 = sub_214424308();
    v25 = *(_QWORD *)(v24 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
    {
      v26 = sub_2141D8BF8(&qword_253F134C8);
      memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v22, v23, v24);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
    }
    v27 = v9[12];
    v28 = (char *)v7 + v27;
    v29 = (char *)v8 + v27;
    *(_QWORD *)v28 = *(_QWORD *)v29;
    v28[8] = v29[8];
    *(_QWORD *)((char *)v7 + v9[13]) = *(_QWORD *)((char *)v8 + v9[13]);
    v30 = v9[14];
    v31 = (char *)v7 + v30;
    v32 = (char *)v8 + v30;
    v33 = sub_214424C68();
    v34 = *(_QWORD *)(v33 - 8);
    v124 = v5;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
    {
      v35 = sub_2141D8BF8(&qword_253F15C88);
      memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v34 + 16))(v31, v32, v33);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
    }
    v36 = v9[15];
    v37 = (char *)v7 + v36;
    v38 = (char *)v8 + v36;
    *(_QWORD *)v37 = *(_QWORD *)v38;
    *((_WORD *)v37 + 4) = *((_WORD *)v38 + 4);
    *(_QWORD *)((char *)v7 + v9[16]) = *(_QWORD *)((char *)v8 + v9[16]);
    *(_QWORD *)((char *)v7 + v9[17]) = *(_QWORD *)((char *)v8 + v9[17]);
    v39 = v9[18];
    v40 = (char *)v7 + v39;
    v41 = (char *)v8 + v39;
    v42 = *(_QWORD *)((char *)v8 + v39 + 24);
    swift_retain();
    if (v42)
    {
      v43 = *(_QWORD *)v41;
      v44 = *((_QWORD *)v41 + 1);
      v45 = v41[16];
      sub_2141DD130(*(_QWORD *)v41, v44, v45);
      *(_QWORD *)v40 = v43;
      *((_QWORD *)v40 + 1) = v44;
      v40[16] = v45;
      v46 = *((_QWORD *)v41 + 4);
      *((_QWORD *)v40 + 3) = *((_QWORD *)v41 + 3);
      v47 = *((_QWORD *)v41 + 5);
      v48 = v41[48];
      swift_bridgeObjectRetain();
      sub_2141DD140(v46, v47, v48);
      *((_QWORD *)v40 + 4) = v46;
      *((_QWORD *)v40 + 5) = v47;
      v40[48] = v48;
      *(_OWORD *)(v40 + 56) = *(_OWORD *)(v41 + 56);
    }
    else
    {
      v49 = *((_OWORD *)v41 + 3);
      *((_OWORD *)v40 + 2) = *((_OWORD *)v41 + 2);
      *((_OWORD *)v40 + 3) = v49;
      *((_QWORD *)v40 + 8) = *((_QWORD *)v41 + 8);
      v50 = *((_OWORD *)v41 + 1);
      *(_OWORD *)v40 = *(_OWORD *)v41;
      *((_OWORD *)v40 + 1) = v50;
    }
    v51 = v9[19];
    v52 = (char *)v7 + v51;
    v53 = (char *)v8 + v51;
    if (*(_QWORD *)((char *)v8 + v51 + 24))
    {
      v54 = *(_QWORD *)v53;
      v55 = *((_QWORD *)v53 + 1);
      v56 = v53[16];
      sub_2141DD130(*(_QWORD *)v53, v55, v56);
      *(_QWORD *)v52 = v54;
      *((_QWORD *)v52 + 1) = v55;
      v52[16] = v56;
      v57 = *((_QWORD *)v53 + 4);
      *((_QWORD *)v52 + 3) = *((_QWORD *)v53 + 3);
      v58 = *((_QWORD *)v53 + 5);
      v59 = v53[48];
      swift_bridgeObjectRetain();
      sub_2141DD140(v57, v58, v59);
      *((_QWORD *)v52 + 4) = v57;
      *((_QWORD *)v52 + 5) = v58;
      v52[48] = v59;
      *(_OWORD *)(v52 + 56) = *(_OWORD *)(v53 + 56);
    }
    else
    {
      v60 = *((_OWORD *)v53 + 3);
      *((_OWORD *)v52 + 2) = *((_OWORD *)v53 + 2);
      *((_OWORD *)v52 + 3) = v60;
      *((_QWORD *)v52 + 8) = *((_QWORD *)v53 + 8);
      v61 = *((_OWORD *)v53 + 1);
      *(_OWORD *)v52 = *(_OWORD *)v53;
      *((_OWORD *)v52 + 1) = v61;
    }
    v62 = v9[20];
    v63 = (char *)v7 + v62;
    v64 = (char *)v8 + v62;
    if (*(_QWORD *)((char *)v8 + v62 + 24))
    {
      v65 = *(_QWORD *)v64;
      v66 = *((_QWORD *)v64 + 1);
      v67 = v64[16];
      sub_2141DD130(*(_QWORD *)v64, v66, v67);
      *(_QWORD *)v63 = v65;
      *((_QWORD *)v63 + 1) = v66;
      v63[16] = v67;
      v68 = *((_QWORD *)v64 + 4);
      *((_QWORD *)v63 + 3) = *((_QWORD *)v64 + 3);
      v69 = *((_QWORD *)v64 + 5);
      v70 = v64[48];
      swift_bridgeObjectRetain();
      sub_2141DD140(v68, v69, v70);
      *((_QWORD *)v63 + 4) = v68;
      *((_QWORD *)v63 + 5) = v69;
      v63[48] = v70;
      *(_OWORD *)(v63 + 56) = *(_OWORD *)(v64 + 56);
    }
    else
    {
      v71 = *((_OWORD *)v64 + 3);
      *((_OWORD *)v63 + 2) = *((_OWORD *)v64 + 2);
      *((_OWORD *)v63 + 3) = v71;
      *((_QWORD *)v63 + 8) = *((_QWORD *)v64 + 8);
      v72 = *((_OWORD *)v64 + 1);
      *(_OWORD *)v63 = *(_OWORD *)v64;
      *((_OWORD *)v63 + 1) = v72;
    }
    v73 = v9[21];
    v74 = (char *)v7 + v73;
    v75 = (char *)v8 + v73;
    if (*(_QWORD *)((char *)v8 + v73 + 24))
    {
      v76 = *(_QWORD *)v75;
      v77 = *((_QWORD *)v75 + 1);
      v78 = v75[16];
      sub_2141DD130(*(_QWORD *)v75, v77, v78);
      *(_QWORD *)v74 = v76;
      *((_QWORD *)v74 + 1) = v77;
      v74[16] = v78;
      v79 = *((_QWORD *)v75 + 4);
      *((_QWORD *)v74 + 3) = *((_QWORD *)v75 + 3);
      v80 = *((_QWORD *)v75 + 5);
      v81 = v75[48];
      swift_bridgeObjectRetain();
      sub_2141DD140(v79, v80, v81);
      *((_QWORD *)v74 + 4) = v79;
      *((_QWORD *)v74 + 5) = v80;
      v74[48] = v81;
      *(_OWORD *)(v74 + 56) = *(_OWORD *)(v75 + 56);
    }
    else
    {
      v82 = *((_OWORD *)v75 + 3);
      *((_OWORD *)v74 + 2) = *((_OWORD *)v75 + 2);
      *((_OWORD *)v74 + 3) = v82;
      *((_QWORD *)v74 + 8) = *((_QWORD *)v75 + 8);
      v83 = *((_OWORD *)v75 + 1);
      *(_OWORD *)v74 = *(_OWORD *)v75;
      *((_OWORD *)v74 + 1) = v83;
    }
    v84 = v9[22];
    v85 = (char *)v7 + v84;
    v86 = (char *)v8 + v84;
    *(_OWORD *)v85 = *(_OWORD *)v86;
    *((_QWORD *)v85 + 2) = *((_QWORD *)v86 + 2);
    v87 = v9[23];
    v88 = (char *)v7 + v87;
    v89 = (char *)v8 + v87;
    *(_OWORD *)v88 = *(_OWORD *)v89;
    *((_QWORD *)v88 + 2) = *((_QWORD *)v89 + 2);
    v90 = v9[24];
    v91 = (char *)v7 + v90;
    v92 = (char *)v8 + v90;
    if (*(_QWORD *)((char *)v8 + v90 + 24))
    {
      v93 = *(_QWORD *)v92;
      v94 = *((_QWORD *)v92 + 1);
      v95 = v92[16];
      sub_2141DD130(*(_QWORD *)v92, v94, v95);
      *(_QWORD *)v91 = v93;
      *((_QWORD *)v91 + 1) = v94;
      v91[16] = v95;
      *((_QWORD *)v91 + 3) = *((_QWORD *)v92 + 3);
      swift_bridgeObjectRetain();
    }
    else
    {
      v96 = *((_OWORD *)v92 + 1);
      *(_OWORD *)v91 = *(_OWORD *)v92;
      *((_OWORD *)v91 + 1) = v96;
    }
    v97 = v9[25];
    v98 = (char *)v7 + v97;
    v99 = (char *)v8 + v97;
    if (*(_QWORD *)((char *)v8 + v97 + 24))
    {
      v100 = *(_QWORD *)v99;
      v101 = *((_QWORD *)v99 + 1);
      v102 = v99[16];
      sub_2141DD130(*(_QWORD *)v99, v101, v102);
      *(_QWORD *)v98 = v100;
      *((_QWORD *)v98 + 1) = v101;
      v98[16] = v102;
      *((_QWORD *)v98 + 3) = *((_QWORD *)v99 + 3);
      swift_bridgeObjectRetain();
    }
    else
    {
      v103 = *((_OWORD *)v99 + 1);
      *(_OWORD *)v98 = *(_OWORD *)v99;
      *((_OWORD *)v98 + 1) = v103;
    }
    v5 = v124;
    v104 = v9[26];
    v105 = (_QWORD *)((char *)v7 + v104);
    v106 = (_QWORD *)((char *)v8 + v104);
    v107 = v106[1];
    *v105 = *v106;
    v105[1] = v107;
    v108 = v9[27];
    v109 = (char *)v7 + v108;
    v110 = (char *)v8 + v108;
    v111 = *((_QWORD *)v110 + 3);
    swift_bridgeObjectRetain();
    if (v111)
    {
      *((_QWORD *)v109 + 3) = v111;
      (**(void (***)(char *, char *, uint64_t))(v111 - 8))(v109, v110, v111);
    }
    else
    {
      v112 = *((_OWORD *)v110 + 1);
      *(_OWORD *)v109 = *(_OWORD *)v110;
      *((_OWORD *)v109 + 1) = v112;
    }
    (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v123 + 56))(v7, 0, 1, v9);
  }
  v113 = v5[9];
  v114 = a1 + v113;
  v115 = (_OWORD *)(a2 + v113);
  v116 = *(unsigned __int8 *)(a2 + v113 + 40);
  if (v116 == 255)
  {
    v117 = v115[1];
    *(_OWORD *)v114 = *v115;
    *(_OWORD *)(v114 + 16) = v117;
    *(_OWORD *)(v114 + 25) = *(_OWORD *)((char *)v115 + 25);
  }
  else if ((v116 & 1) != 0)
  {
    *(_QWORD *)v114 = *(_QWORD *)v115;
    *(_OWORD *)(v114 + 8) = *(_OWORD *)((char *)v115 + 8);
    *(_BYTE *)(v114 + 40) = 1;
    swift_retain();
  }
  else
  {
    v118 = *(_OWORD *)((char *)v115 + 24);
    *(_OWORD *)(v114 + 24) = v118;
    (**(void (***)(uint64_t))(v118 - 8))(v114);
    *(_BYTE *)(v114 + 40) = 0;
  }
  v119 = v5[10];
  v120 = a1 + v119;
  v121 = a2 + v119;
  *(_OWORD *)v120 = *(_OWORD *)v121;
  *(_BYTE *)(v120 + 16) = *(_BYTE *)(v121 + 16);
  return a1;
}

uint64_t sub_2143945A8(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int *v8;
  _QWORD *v9;
  uint64_t (*v10)(uint64_t, uint64_t, int *);
  int v11;
  int v12;
  int v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  int v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  int v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  void *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  __int128 v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  __int128 v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  char v110;
  __int128 v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  char v117;
  __int128 v118;
  uint64_t v119;
  _QWORD *v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  __int128 v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  int v130;
  int v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  __int128 v140;
  __int128 v142;
  __int128 v143;
  uint64_t v144;
  __int128 *v145;
  __int128 *v146;
  int v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  uint64_t v152;
  __int128 v153;
  uint64_t v154;
  __int128 v155;
  __int128 v156;
  uint64_t v157;
  void *v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t (*v162)(void *, uint64_t, uint64_t);
  int v163;
  int v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  void *v171;
  char *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t (*v175)(void *, uint64_t, uint64_t);
  int v176;
  size_t v177;
  void *v178;
  uint64_t v179;
  uint64_t v180;
  char *v181;
  uint64_t v182;
  uint64_t v183;
  char *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  char v189;
  uint64_t v190;
  uint64_t v191;
  char v192;
  uint64_t v193;
  uint64_t v194;
  char v195;
  uint64_t v196;
  uint64_t v197;
  char v198;
  uint64_t v199;
  uint64_t v200;
  char v201;
  uint64_t v202;
  uint64_t v203;
  char v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  uint64_t v211;
  uint64_t v212;
  char *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  char v218;
  uint64_t v219;
  uint64_t v220;
  char v221;
  uint64_t v222;
  uint64_t v223;
  char v224;
  uint64_t v225;
  uint64_t v226;
  char v227;
  uint64_t v228;
  uint64_t v229;
  char v230;
  uint64_t v231;
  uint64_t v232;
  char v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  uint64_t v240;
  uint64_t v241;
  char *v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  char v247;
  uint64_t v248;
  uint64_t v249;
  char v250;
  uint64_t v251;
  uint64_t v252;
  char v253;
  uint64_t v254;
  uint64_t v255;
  char v256;
  uint64_t v257;
  uint64_t v258;
  char v259;
  uint64_t v260;
  uint64_t v261;
  char v262;
  __int128 v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  uint64_t v269;
  uint64_t v270;
  char *v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  char v276;
  uint64_t v277;
  uint64_t v278;
  char v279;
  uint64_t v280;
  uint64_t v281;
  char v282;
  uint64_t v283;
  uint64_t v284;
  char v285;
  uint64_t v286;
  uint64_t v287;
  char v288;
  uint64_t v289;
  uint64_t v290;
  char v291;
  __int128 v292;
  __int128 v293;
  __int128 v294;
  __int128 v295;
  __int128 v296;
  __int128 v297;
  uint64_t v298;
  _QWORD *v299;
  char *v300;
  uint64_t v301;
  _QWORD *v302;
  char *v303;
  uint64_t v304;
  uint64_t v305;
  char *v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  char v311;
  uint64_t v312;
  uint64_t v313;
  char v314;
  uint64_t v315;
  uint64_t v316;
  char v317;
  __int128 v318;
  __int128 v319;
  uint64_t v320;
  uint64_t v321;
  char *v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  char v327;
  uint64_t v328;
  uint64_t v329;
  char v330;
  uint64_t v331;
  uint64_t v332;
  char v333;
  __int128 v334;
  __int128 v335;
  uint64_t v336;
  _QWORD *v337;
  char *v338;
  uint64_t v339;
  uint64_t v340;
  char *v341;
  uint64_t v342;
  __int128 v343;
  __int128 v344;
  uint64_t *v345;
  void *v346;
  void (**__src)(uint64_t, _QWORD, uint64_t, int *);
  int *v348;
  int *v349;

  v2 = a2;
  sub_2141DEA14((uint64_t *)a1, a2);
  *(_BYTE *)(a1 + 40) = *((_BYTE *)v2 + 40);
  *(_QWORD *)(a1 + 48) = v2[6];
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 56) = v2[7];
  *(_QWORD *)(a1 + 64) = v2[8];
  v4 = (int *)type metadata accessor for PointsRenderer(0);
  v5 = v4[8];
  v6 = a1 + v5;
  v7 = (char *)v2 + v5;
  v8 = (int *)type metadata accessor for ChartContentRenderContext.Environment(0);
  v9 = (_QWORD *)*((_QWORD *)v8 - 1);
  v10 = (uint64_t (*)(uint64_t, uint64_t, int *))v9[6];
  v11 = v10(v6, 1, v8);
  v12 = v10((uint64_t)v7, 1, v8);
  if (v11)
  {
    if (!v12)
    {
      v13 = v7[40];
      v348 = v4;
      if (v13 == 255)
      {
        v14 = *(_OWORD *)v7;
        v15 = *((_OWORD *)v7 + 1);
        *(_OWORD *)(v6 + 25) = *(_OWORD *)(v7 + 25);
        *(_OWORD *)v6 = v14;
        *(_OWORD *)(v6 + 16) = v15;
      }
      else if ((v13 & 1) != 0)
      {
        v20 = *((_QWORD *)v7 + 3);
        *(_QWORD *)(v6 + 24) = v20;
        *(_QWORD *)(v6 + 32) = *((_QWORD *)v7 + 4);
        (**(void (***)(uint64_t, char *))(v20 - 8))(v6, v7);
        *(_BYTE *)(v6 + 40) = 1;
      }
      else
      {
        *(_QWORD *)v6 = *(_QWORD *)v7;
        *(_BYTE *)(v6 + 40) = 0;
        swift_retain();
      }
      *(_BYTE *)(v6 + 41) = v7[41];
      *(_QWORD *)(v6 + 48) = *((_QWORD *)v7 + 6);
      *(_DWORD *)(v6 + 56) = *((_DWORD *)v7 + 14);
      *(_DWORD *)(v6 + 60) = *((_DWORD *)v7 + 15);
      *(_QWORD *)(v6 + 64) = *((_QWORD *)v7 + 8);
      *(_QWORD *)(v6 + 72) = *((_QWORD *)v7 + 9);
      *(_QWORD *)(v6 + 80) = *((_QWORD *)v7 + 10);
      v21 = v7[128];
      swift_bridgeObjectRetain();
      __src = (void (**)(uint64_t, _QWORD, uint64_t, int *))v9;
      if (v21 == 255)
      {
        v22 = *(_OWORD *)(v7 + 88);
        v23 = *(_OWORD *)(v7 + 104);
        *(_OWORD *)(v6 + 113) = *(_OWORD *)(v7 + 113);
        *(_OWORD *)(v6 + 88) = v22;
        *(_OWORD *)(v6 + 104) = v23;
      }
      else if ((v21 & 1) != 0)
      {
        *(_QWORD *)(v6 + 88) = *((_QWORD *)v7 + 11);
        *(_OWORD *)(v6 + 96) = *((_OWORD *)v7 + 6);
        *(_BYTE *)(v6 + 128) = 1;
        swift_retain();
      }
      else
      {
        v24 = *((_QWORD *)v7 + 14);
        *(_QWORD *)(v6 + 112) = v24;
        *(_QWORD *)(v6 + 120) = *((_QWORD *)v7 + 15);
        (**(void (***)(uint64_t, uint64_t))(v24 - 8))(v6 + 88, (uint64_t)(v7 + 88));
        *(_BYTE *)(v6 + 128) = 0;
      }
      v25 = *(_OWORD *)(v7 + 136);
      *(_BYTE *)(v6 + 152) = v7[152];
      *(_OWORD *)(v6 + 136) = v25;
      v26 = *((_QWORD *)v7 + 20);
      *(_BYTE *)(v6 + 168) = v7[168];
      *(_QWORD *)(v6 + 160) = v26;
      v27 = *((_OWORD *)v7 + 11);
      v28 = *((_OWORD *)v7 + 12);
      *(_BYTE *)(v6 + 208) = v7[208];
      *(_OWORD *)(v6 + 176) = v27;
      *(_OWORD *)(v6 + 192) = v28;
      v29 = v8[11];
      v30 = (void *)(v6 + v29);
      v31 = &v7[v29];
      v32 = sub_214424308();
      v33 = *(_QWORD *)(v32 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32))
      {
        v34 = sub_2141D8BF8(&qword_253F134C8);
        memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, char *, uint64_t))(v33 + 16))(v30, v31, v32);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
      }
      v35 = v8[12];
      v36 = v6 + v35;
      v37 = &v7[v35];
      v38 = *(_QWORD *)v37;
      *(_BYTE *)(v36 + 8) = v37[8];
      *(_QWORD *)v36 = v38;
      *(_QWORD *)(v6 + v8[13]) = *(_QWORD *)&v7[v8[13]];
      v39 = v8[14];
      v40 = (void *)(v6 + v39);
      v41 = &v7[v39];
      v42 = sub_214424C68();
      v43 = *(_QWORD *)(v42 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v41, 1, v42))
      {
        v44 = sub_2141D8BF8(&qword_253F15C88);
        memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, char *, uint64_t))(v43 + 16))(v40, v41, v42);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v43 + 56))(v40, 0, 1, v42);
      }
      v45 = v8[15];
      v46 = v6 + v45;
      v47 = &v7[v45];
      *(_QWORD *)v46 = *(_QWORD *)v47;
      *(_WORD *)(v46 + 8) = *((_WORD *)v47 + 4);
      *(_QWORD *)(v6 + v8[16]) = *(_QWORD *)&v7[v8[16]];
      *(_QWORD *)(v6 + v8[17]) = *(_QWORD *)&v7[v8[17]];
      v48 = v8[18];
      v49 = v6 + v48;
      v50 = &v7[v48];
      v51 = *(_QWORD *)&v7[v48 + 24];
      swift_retain();
      if (v51)
      {
        v52 = *(_QWORD *)v50;
        v53 = *((_QWORD *)v50 + 1);
        v54 = v50[16];
        sub_2141DD130(*(_QWORD *)v50, v53, v54);
        *(_QWORD *)v49 = v52;
        *(_QWORD *)(v49 + 8) = v53;
        *(_BYTE *)(v49 + 16) = v54;
        *(_QWORD *)(v49 + 24) = *((_QWORD *)v50 + 3);
        v55 = *((_QWORD *)v50 + 4);
        v56 = *((_QWORD *)v50 + 5);
        v57 = v50[48];
        swift_bridgeObjectRetain();
        sub_2141DD140(v55, v56, v57);
        *(_QWORD *)(v49 + 32) = v55;
        *(_QWORD *)(v49 + 40) = v56;
        *(_BYTE *)(v49 + 48) = v57;
        *(_OWORD *)(v49 + 56) = *(_OWORD *)(v50 + 56);
      }
      else
      {
        *(_OWORD *)v49 = *(_OWORD *)v50;
        v58 = *((_OWORD *)v50 + 1);
        v59 = *((_OWORD *)v50 + 2);
        v60 = *((_OWORD *)v50 + 3);
        *(_QWORD *)(v49 + 64) = *((_QWORD *)v50 + 8);
        *(_OWORD *)(v49 + 32) = v59;
        *(_OWORD *)(v49 + 48) = v60;
        *(_OWORD *)(v49 + 16) = v58;
      }
      v61 = v8[19];
      v62 = v6 + v61;
      v63 = &v7[v61];
      if (*(_QWORD *)&v7[v61 + 24])
      {
        v64 = *(_QWORD *)v63;
        v65 = *((_QWORD *)v63 + 1);
        v66 = v63[16];
        sub_2141DD130(*(_QWORD *)v63, v65, v66);
        *(_QWORD *)v62 = v64;
        *(_QWORD *)(v62 + 8) = v65;
        *(_BYTE *)(v62 + 16) = v66;
        *(_QWORD *)(v62 + 24) = *((_QWORD *)v63 + 3);
        v67 = *((_QWORD *)v63 + 4);
        v68 = *((_QWORD *)v63 + 5);
        v69 = v63[48];
        swift_bridgeObjectRetain();
        sub_2141DD140(v67, v68, v69);
        *(_QWORD *)(v62 + 32) = v67;
        *(_QWORD *)(v62 + 40) = v68;
        *(_BYTE *)(v62 + 48) = v69;
        *(_OWORD *)(v62 + 56) = *(_OWORD *)(v63 + 56);
      }
      else
      {
        *(_OWORD *)v62 = *(_OWORD *)v63;
        v70 = *((_OWORD *)v63 + 1);
        v71 = *((_OWORD *)v63 + 2);
        v72 = *((_OWORD *)v63 + 3);
        *(_QWORD *)(v62 + 64) = *((_QWORD *)v63 + 8);
        *(_OWORD *)(v62 + 32) = v71;
        *(_OWORD *)(v62 + 48) = v72;
        *(_OWORD *)(v62 + 16) = v70;
      }
      v73 = v8[20];
      v74 = v6 + v73;
      v75 = &v7[v73];
      if (*(_QWORD *)&v7[v73 + 24])
      {
        v76 = *(_QWORD *)v75;
        v77 = *((_QWORD *)v75 + 1);
        v78 = v75[16];
        sub_2141DD130(*(_QWORD *)v75, v77, v78);
        *(_QWORD *)v74 = v76;
        *(_QWORD *)(v74 + 8) = v77;
        *(_BYTE *)(v74 + 16) = v78;
        *(_QWORD *)(v74 + 24) = *((_QWORD *)v75 + 3);
        v79 = *((_QWORD *)v75 + 4);
        v80 = *((_QWORD *)v75 + 5);
        v81 = v75[48];
        swift_bridgeObjectRetain();
        sub_2141DD140(v79, v80, v81);
        *(_QWORD *)(v74 + 32) = v79;
        *(_QWORD *)(v74 + 40) = v80;
        *(_BYTE *)(v74 + 48) = v81;
        *(_OWORD *)(v74 + 56) = *(_OWORD *)(v75 + 56);
      }
      else
      {
        *(_OWORD *)v74 = *(_OWORD *)v75;
        v82 = *((_OWORD *)v75 + 1);
        v83 = *((_OWORD *)v75 + 2);
        v84 = *((_OWORD *)v75 + 3);
        *(_QWORD *)(v74 + 64) = *((_QWORD *)v75 + 8);
        *(_OWORD *)(v74 + 32) = v83;
        *(_OWORD *)(v74 + 48) = v84;
        *(_OWORD *)(v74 + 16) = v82;
      }
      v85 = v8[21];
      v86 = v6 + v85;
      v87 = &v7[v85];
      if (*(_QWORD *)&v7[v85 + 24])
      {
        v88 = *(_QWORD *)v87;
        v89 = *((_QWORD *)v87 + 1);
        v90 = v87[16];
        sub_2141DD130(*(_QWORD *)v87, v89, v90);
        *(_QWORD *)v86 = v88;
        *(_QWORD *)(v86 + 8) = v89;
        *(_BYTE *)(v86 + 16) = v90;
        *(_QWORD *)(v86 + 24) = *((_QWORD *)v87 + 3);
        v91 = *((_QWORD *)v87 + 4);
        v92 = *((_QWORD *)v87 + 5);
        v93 = v87[48];
        swift_bridgeObjectRetain();
        sub_2141DD140(v91, v92, v93);
        *(_QWORD *)(v86 + 32) = v91;
        *(_QWORD *)(v86 + 40) = v92;
        *(_BYTE *)(v86 + 48) = v93;
        *(_OWORD *)(v86 + 56) = *(_OWORD *)(v87 + 56);
      }
      else
      {
        *(_OWORD *)v86 = *(_OWORD *)v87;
        v94 = *((_OWORD *)v87 + 1);
        v95 = *((_OWORD *)v87 + 2);
        v96 = *((_OWORD *)v87 + 3);
        *(_QWORD *)(v86 + 64) = *((_QWORD *)v87 + 8);
        *(_OWORD *)(v86 + 32) = v95;
        *(_OWORD *)(v86 + 48) = v96;
        *(_OWORD *)(v86 + 16) = v94;
      }
      v97 = v8[22];
      v98 = v6 + v97;
      v99 = &v7[v97];
      v100 = *(_OWORD *)v99;
      *(_QWORD *)(v98 + 16) = *((_QWORD *)v99 + 2);
      *(_OWORD *)v98 = v100;
      v101 = v8[23];
      v102 = v6 + v101;
      v103 = &v7[v101];
      v104 = *(_OWORD *)v103;
      *(_QWORD *)(v102 + 16) = *((_QWORD *)v103 + 2);
      *(_OWORD *)v102 = v104;
      v105 = v8[24];
      v106 = v6 + v105;
      v107 = &v7[v105];
      if (*(_QWORD *)&v7[v105 + 24])
      {
        v108 = *(_QWORD *)v107;
        v109 = *((_QWORD *)v107 + 1);
        v110 = v107[16];
        sub_2141DD130(*(_QWORD *)v107, v109, v110);
        *(_QWORD *)v106 = v108;
        *(_QWORD *)(v106 + 8) = v109;
        *(_BYTE *)(v106 + 16) = v110;
        *(_QWORD *)(v106 + 24) = *((_QWORD *)v107 + 3);
        swift_bridgeObjectRetain();
      }
      else
      {
        v111 = *((_OWORD *)v107 + 1);
        *(_OWORD *)v106 = *(_OWORD *)v107;
        *(_OWORD *)(v106 + 16) = v111;
      }
      v112 = v8[25];
      v113 = v6 + v112;
      v114 = &v7[v112];
      if (*(_QWORD *)&v7[v112 + 24])
      {
        v115 = *(_QWORD *)v114;
        v116 = *((_QWORD *)v114 + 1);
        v117 = v114[16];
        sub_2141DD130(*(_QWORD *)v114, v116, v117);
        *(_QWORD *)v113 = v115;
        *(_QWORD *)(v113 + 8) = v116;
        *(_BYTE *)(v113 + 16) = v117;
        *(_QWORD *)(v113 + 24) = *((_QWORD *)v114 + 3);
        swift_bridgeObjectRetain();
      }
      else
      {
        v118 = *((_OWORD *)v114 + 1);
        *(_OWORD *)v113 = *(_OWORD *)v114;
        *(_OWORD *)(v113 + 16) = v118;
      }
      v119 = v8[26];
      v120 = (_QWORD *)(v6 + v119);
      v121 = &v7[v119];
      *v120 = *(_QWORD *)v121;
      v120[1] = *((_QWORD *)v121 + 1);
      v122 = v8[27];
      v123 = v6 + v122;
      v124 = &v7[v122];
      v125 = *((_QWORD *)v124 + 3);
      swift_bridgeObjectRetain();
      if (v125)
      {
        *(_QWORD *)(v123 + 24) = v125;
        (**(void (***)(uint64_t, char *, uint64_t))(v125 - 8))(v123, v124, v125);
      }
      else
      {
        v126 = *((_OWORD *)v124 + 1);
        *(_OWORD *)v123 = *(_OWORD *)v124;
        *(_OWORD *)(v123 + 16) = v126;
      }
      v4 = v348;
      __src[7](v6, 0, 1, v8);
      goto LABEL_47;
    }
LABEL_7:
    v16 = sub_2141D8BF8(qword_254D69B70);
    memcpy((void *)v6, v7, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_47;
  }
  if (v12)
  {
    sub_2141DD370(v6, type metadata accessor for ChartContentRenderContext.Environment);
    goto LABEL_7;
  }
  v17 = v7[40];
  if (*(unsigned __int8 *)(v6 + 40) == 255)
  {
    if (v17 == 255)
    {
      v142 = *(_OWORD *)v7;
      v143 = *((_OWORD *)v7 + 1);
      *(_OWORD *)(v6 + 25) = *(_OWORD *)(v7 + 25);
      *(_OWORD *)v6 = v142;
      *(_OWORD *)(v6 + 16) = v143;
      goto LABEL_65;
    }
    if ((v17 & 1) != 0)
      goto LABEL_62;
LABEL_64:
    *(_QWORD *)v6 = *(_QWORD *)v7;
    *(_BYTE *)(v6 + 40) = 0;
    swift_retain();
    goto LABEL_65;
  }
  if (v17 == 255)
  {
    sub_21420D6FC(v6);
    v18 = *(_OWORD *)(v7 + 25);
    v19 = *((_OWORD *)v7 + 1);
    *(_OWORD *)v6 = *(_OWORD *)v7;
    *(_OWORD *)(v6 + 16) = v19;
    *(_OWORD *)(v6 + 25) = v18;
    goto LABEL_65;
  }
  if ((uint64_t *)a1 != v2)
  {
    sub_21420D6FC(v6);
    if ((v7[40] & 1) != 0)
    {
LABEL_62:
      v144 = *((_QWORD *)v7 + 3);
      *(_QWORD *)(v6 + 24) = v144;
      *(_QWORD *)(v6 + 32) = *((_QWORD *)v7 + 4);
      (**(void (***)(uint64_t, char *))(v144 - 8))(v6, v7);
      *(_BYTE *)(v6 + 40) = 1;
      goto LABEL_65;
    }
    goto LABEL_64;
  }
LABEL_65:
  v349 = v4;
  *(_BYTE *)(v6 + 41) = v7[41];
  *(_QWORD *)(v6 + 48) = *((_QWORD *)v7 + 6);
  *(_DWORD *)(v6 + 56) = *((_DWORD *)v7 + 14);
  *(_DWORD *)(v6 + 60) = *((_DWORD *)v7 + 15);
  *(_QWORD *)(v6 + 64) = *((_QWORD *)v7 + 8);
  *(_QWORD *)(v6 + 72) = *((_QWORD *)v7 + 9);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v6 + 80) = *((_QWORD *)v7 + 10);
  v145 = (__int128 *)(v6 + 88);
  v146 = (__int128 *)(v7 + 88);
  v147 = v7[128];
  if (*(unsigned __int8 *)(v6 + 128) == 255)
  {
    if (v147 == 255)
    {
      v150 = *v146;
      v151 = *(_OWORD *)(v7 + 104);
      *(_OWORD *)(v6 + 113) = *(_OWORD *)(v7 + 113);
      *v145 = v150;
      *(_OWORD *)(v6 + 104) = v151;
      goto LABEL_75;
    }
    if ((v147 & 1) != 0)
      goto LABEL_72;
LABEL_74:
    v152 = *((_QWORD *)v7 + 14);
    *(_QWORD *)(v6 + 112) = v152;
    *(_QWORD *)(v6 + 120) = *((_QWORD *)v7 + 15);
    (**(void (***)(uint64_t, uint64_t))(v152 - 8))(v6 + 88, (uint64_t)(v7 + 88));
    *(_BYTE *)(v6 + 128) = 0;
    goto LABEL_75;
  }
  if (v147 == 255)
  {
    sub_21420D730(v6 + 88);
    v148 = *(_OWORD *)(v7 + 113);
    v149 = *(_OWORD *)(v7 + 104);
    *v145 = *v146;
    *(_OWORD *)(v6 + 104) = v149;
    *(_OWORD *)(v6 + 113) = v148;
    goto LABEL_75;
  }
  if ((uint64_t *)a1 != v2)
  {
    sub_21420D730(v6 + 88);
    if ((v7[128] & 1) != 0)
    {
LABEL_72:
      *(_QWORD *)(v6 + 88) = *((_QWORD *)v7 + 11);
      *(_OWORD *)(v6 + 96) = *((_OWORD *)v7 + 6);
      *(_BYTE *)(v6 + 128) = 1;
      swift_retain();
      goto LABEL_75;
    }
    goto LABEL_74;
  }
LABEL_75:
  v345 = v2;
  v153 = *(_OWORD *)(v7 + 136);
  *(_BYTE *)(v6 + 152) = v7[152];
  *(_OWORD *)(v6 + 136) = v153;
  v154 = *((_QWORD *)v7 + 20);
  *(_BYTE *)(v6 + 168) = v7[168];
  *(_QWORD *)(v6 + 160) = v154;
  v155 = *((_OWORD *)v7 + 11);
  v156 = *((_OWORD *)v7 + 12);
  *(_BYTE *)(v6 + 208) = v7[208];
  *(_OWORD *)(v6 + 176) = v155;
  *(_OWORD *)(v6 + 192) = v156;
  v157 = v8[11];
  v158 = (void *)(v6 + v157);
  v159 = &v7[v157];
  v160 = sub_214424308();
  v161 = *(_QWORD *)(v160 - 8);
  v162 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v161 + 48);
  v163 = v162(v158, 1, v160);
  v164 = v162(v159, 1, v160);
  if (v163)
  {
    if (!v164)
    {
      (*(void (**)(void *, char *, uint64_t))(v161 + 16))(v158, v159, v160);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v161 + 56))(v158, 0, 1, v160);
      goto LABEL_81;
    }
    goto LABEL_80;
  }
  if (v164)
  {
    (*(void (**)(void *, uint64_t))(v161 + 8))(v158, v160);
LABEL_80:
    v165 = sub_2141D8BF8(&qword_253F134C8);
    memcpy(v158, v159, *(_QWORD *)(*(_QWORD *)(v165 - 8) + 64));
    goto LABEL_81;
  }
  (*(void (**)(void *, char *, uint64_t))(v161 + 24))(v158, v159, v160);
LABEL_81:
  v2 = v345;
  v166 = v8[12];
  v167 = v6 + v166;
  v168 = &v7[v166];
  v169 = *(_QWORD *)v168;
  *(_BYTE *)(v167 + 8) = v168[8];
  *(_QWORD *)v167 = v169;
  *(_QWORD *)(v6 + v8[13]) = *(_QWORD *)&v7[v8[13]];
  v170 = v8[14];
  v171 = (void *)(v6 + v170);
  v172 = &v7[v170];
  v173 = sub_214424C68();
  v174 = *(_QWORD *)(v173 - 8);
  v175 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v174 + 48);
  v346 = v171;
  LODWORD(v171) = v175(v171, 1, v173);
  v176 = v175(v172, 1, v173);
  if ((_DWORD)v171)
  {
    if (v176)
    {
      v177 = *(_QWORD *)(*(_QWORD *)(sub_2141D8BF8(&qword_253F15C88) - 8) + 64);
      v178 = v346;
LABEL_86:
      memcpy(v178, v172, v177);
      goto LABEL_90;
    }
    (*(void (**)(void *, char *, uint64_t))(v174 + 16))(v346, v172, v173);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v174 + 56))(v346, 0, 1, v173);
  }
  else
  {
    if (v176)
    {
      (*(void (**)(void *, uint64_t))(v174 + 8))(v346, v173);
      v177 = *(_QWORD *)(*(_QWORD *)(sub_2141D8BF8(&qword_253F15C88) - 8) + 64);
      v178 = v346;
      goto LABEL_86;
    }
    (*(void (**)(void *, char *, uint64_t))(v174 + 24))(v346, v172, v173);
  }
LABEL_90:
  v179 = v8[15];
  v180 = v6 + v179;
  v181 = &v7[v179];
  *(_QWORD *)(v6 + v179) = *(_QWORD *)&v7[v179];
  swift_retain();
  swift_release();
  *(_BYTE *)(v180 + 8) = v181[8];
  *(_BYTE *)(v180 + 9) = v181[9];
  *(_QWORD *)(v6 + v8[16]) = *(_QWORD *)&v7[v8[16]];
  *(_QWORD *)(v6 + v8[17]) = *(_QWORD *)&v7[v8[17]];
  v182 = v8[18];
  v183 = v6 + v182;
  v184 = &v7[v182];
  v185 = *(_QWORD *)(v6 + v182 + 24);
  v186 = *(_QWORD *)&v7[v182 + 24];
  if (v185)
  {
    if (v186)
    {
      v187 = *(_QWORD *)v184;
      v188 = *((_QWORD *)v184 + 1);
      v189 = v184[16];
      sub_2141DD130(*(_QWORD *)v184, v188, v189);
      v190 = *(_QWORD *)v183;
      v191 = *(_QWORD *)(v183 + 8);
      v192 = *(_BYTE *)(v183 + 16);
      *(_QWORD *)v183 = v187;
      *(_QWORD *)(v183 + 8) = v188;
      *(_BYTE *)(v183 + 16) = v189;
      sub_2141ED0BC(v190, v191, v192);
      *(_QWORD *)(v183 + 24) = *((_QWORD *)v184 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v193 = *((_QWORD *)v184 + 4);
      v194 = *((_QWORD *)v184 + 5);
      v195 = v184[48];
      sub_2141DD140(v193, v194, v195);
      v196 = *(_QWORD *)(v183 + 32);
      v197 = *(_QWORD *)(v183 + 40);
      *(_QWORD *)(v183 + 32) = v193;
      *(_QWORD *)(v183 + 40) = v194;
      v198 = *(_BYTE *)(v183 + 48);
      *(_BYTE *)(v183 + 48) = v195;
      sub_2141EF1B0(v196, v197, v198);
LABEL_95:
      *(_OWORD *)(v183 + 56) = *(_OWORD *)(v184 + 56);
      goto LABEL_98;
    }
    sub_21420D764(v183);
    *(_OWORD *)v183 = *(_OWORD *)v184;
    v206 = *((_OWORD *)v184 + 2);
    v205 = *((_OWORD *)v184 + 3);
    v207 = *((_OWORD *)v184 + 1);
    *(_QWORD *)(v183 + 64) = *((_QWORD *)v184 + 8);
    *(_OWORD *)(v183 + 32) = v206;
    *(_OWORD *)(v183 + 48) = v205;
    *(_OWORD *)(v183 + 16) = v207;
  }
  else
  {
    if (v186)
    {
      v199 = *(_QWORD *)v184;
      v200 = *((_QWORD *)v184 + 1);
      v201 = v184[16];
      sub_2141DD130(*(_QWORD *)v184, v200, v201);
      *(_QWORD *)v183 = v199;
      *(_QWORD *)(v183 + 8) = v200;
      *(_BYTE *)(v183 + 16) = v201;
      *(_QWORD *)(v183 + 24) = *((_QWORD *)v184 + 3);
      v202 = *((_QWORD *)v184 + 4);
      v203 = *((_QWORD *)v184 + 5);
      v204 = v184[48];
      swift_bridgeObjectRetain();
      sub_2141DD140(v202, v203, v204);
      *(_QWORD *)(v183 + 32) = v202;
      *(_QWORD *)(v183 + 40) = v203;
      *(_BYTE *)(v183 + 48) = v204;
      goto LABEL_95;
    }
    *(_OWORD *)v183 = *(_OWORD *)v184;
    v208 = *((_OWORD *)v184 + 1);
    v209 = *((_OWORD *)v184 + 2);
    v210 = *((_OWORD *)v184 + 3);
    *(_QWORD *)(v183 + 64) = *((_QWORD *)v184 + 8);
    *(_OWORD *)(v183 + 32) = v209;
    *(_OWORD *)(v183 + 48) = v210;
    *(_OWORD *)(v183 + 16) = v208;
  }
LABEL_98:
  v211 = v8[19];
  v212 = v6 + v211;
  v213 = &v7[v211];
  v214 = *(_QWORD *)(v6 + v211 + 24);
  v215 = *(_QWORD *)&v7[v211 + 24];
  if (v214)
  {
    if (v215)
    {
      v216 = *(_QWORD *)v213;
      v217 = *((_QWORD *)v213 + 1);
      v218 = v213[16];
      sub_2141DD130(*(_QWORD *)v213, v217, v218);
      v219 = *(_QWORD *)v212;
      v220 = *(_QWORD *)(v212 + 8);
      v221 = *(_BYTE *)(v212 + 16);
      *(_QWORD *)v212 = v216;
      *(_QWORD *)(v212 + 8) = v217;
      *(_BYTE *)(v212 + 16) = v218;
      sub_2141ED0BC(v219, v220, v221);
      *(_QWORD *)(v212 + 24) = *((_QWORD *)v213 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v222 = *((_QWORD *)v213 + 4);
      v223 = *((_QWORD *)v213 + 5);
      v224 = v213[48];
      sub_2141DD140(v222, v223, v224);
      v225 = *(_QWORD *)(v212 + 32);
      v226 = *(_QWORD *)(v212 + 40);
      *(_QWORD *)(v212 + 32) = v222;
      *(_QWORD *)(v212 + 40) = v223;
      v227 = *(_BYTE *)(v212 + 48);
      *(_BYTE *)(v212 + 48) = v224;
      sub_2141EF1B0(v225, v226, v227);
LABEL_103:
      *(_OWORD *)(v212 + 56) = *(_OWORD *)(v213 + 56);
      goto LABEL_106;
    }
    sub_21420D764(v212);
    *(_OWORD *)v212 = *(_OWORD *)v213;
    v235 = *((_OWORD *)v213 + 2);
    v234 = *((_OWORD *)v213 + 3);
    v236 = *((_OWORD *)v213 + 1);
    *(_QWORD *)(v212 + 64) = *((_QWORD *)v213 + 8);
    *(_OWORD *)(v212 + 32) = v235;
    *(_OWORD *)(v212 + 48) = v234;
    *(_OWORD *)(v212 + 16) = v236;
  }
  else
  {
    if (v215)
    {
      v228 = *(_QWORD *)v213;
      v229 = *((_QWORD *)v213 + 1);
      v230 = v213[16];
      sub_2141DD130(*(_QWORD *)v213, v229, v230);
      *(_QWORD *)v212 = v228;
      *(_QWORD *)(v212 + 8) = v229;
      *(_BYTE *)(v212 + 16) = v230;
      *(_QWORD *)(v212 + 24) = *((_QWORD *)v213 + 3);
      v231 = *((_QWORD *)v213 + 4);
      v232 = *((_QWORD *)v213 + 5);
      v233 = v213[48];
      swift_bridgeObjectRetain();
      sub_2141DD140(v231, v232, v233);
      *(_QWORD *)(v212 + 32) = v231;
      *(_QWORD *)(v212 + 40) = v232;
      *(_BYTE *)(v212 + 48) = v233;
      goto LABEL_103;
    }
    *(_OWORD *)v212 = *(_OWORD *)v213;
    v237 = *((_OWORD *)v213 + 1);
    v238 = *((_OWORD *)v213 + 2);
    v239 = *((_OWORD *)v213 + 3);
    *(_QWORD *)(v212 + 64) = *((_QWORD *)v213 + 8);
    *(_OWORD *)(v212 + 32) = v238;
    *(_OWORD *)(v212 + 48) = v239;
    *(_OWORD *)(v212 + 16) = v237;
  }
LABEL_106:
  v240 = v8[20];
  v241 = v6 + v240;
  v242 = &v7[v240];
  v243 = *(_QWORD *)(v6 + v240 + 24);
  v244 = *(_QWORD *)&v7[v240 + 24];
  if (v243)
  {
    if (v244)
    {
      v245 = *(_QWORD *)v242;
      v246 = *((_QWORD *)v242 + 1);
      v247 = v242[16];
      sub_2141DD130(*(_QWORD *)v242, v246, v247);
      v248 = *(_QWORD *)v241;
      v249 = *(_QWORD *)(v241 + 8);
      v250 = *(_BYTE *)(v241 + 16);
      *(_QWORD *)v241 = v245;
      *(_QWORD *)(v241 + 8) = v246;
      *(_BYTE *)(v241 + 16) = v247;
      sub_2141ED0BC(v248, v249, v250);
      *(_QWORD *)(v241 + 24) = *((_QWORD *)v242 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v251 = *((_QWORD *)v242 + 4);
      v252 = *((_QWORD *)v242 + 5);
      v253 = v242[48];
      sub_2141DD140(v251, v252, v253);
      v254 = *(_QWORD *)(v241 + 32);
      v255 = *(_QWORD *)(v241 + 40);
      *(_QWORD *)(v241 + 32) = v251;
      *(_QWORD *)(v241 + 40) = v252;
      v256 = *(_BYTE *)(v241 + 48);
      *(_BYTE *)(v241 + 48) = v253;
      sub_2141EF1B0(v254, v255, v256);
LABEL_111:
      *(_OWORD *)(v241 + 56) = *(_OWORD *)(v242 + 56);
      goto LABEL_114;
    }
    sub_21420D764(v241);
    *(_OWORD *)v241 = *(_OWORD *)v242;
    v264 = *((_OWORD *)v242 + 2);
    v263 = *((_OWORD *)v242 + 3);
    v265 = *((_OWORD *)v242 + 1);
    *(_QWORD *)(v241 + 64) = *((_QWORD *)v242 + 8);
    *(_OWORD *)(v241 + 32) = v264;
    *(_OWORD *)(v241 + 48) = v263;
    *(_OWORD *)(v241 + 16) = v265;
  }
  else
  {
    if (v244)
    {
      v257 = *(_QWORD *)v242;
      v258 = *((_QWORD *)v242 + 1);
      v259 = v242[16];
      sub_2141DD130(*(_QWORD *)v242, v258, v259);
      *(_QWORD *)v241 = v257;
      *(_QWORD *)(v241 + 8) = v258;
      *(_BYTE *)(v241 + 16) = v259;
      *(_QWORD *)(v241 + 24) = *((_QWORD *)v242 + 3);
      v260 = *((_QWORD *)v242 + 4);
      v261 = *((_QWORD *)v242 + 5);
      v262 = v242[48];
      swift_bridgeObjectRetain();
      sub_2141DD140(v260, v261, v262);
      *(_QWORD *)(v241 + 32) = v260;
      *(_QWORD *)(v241 + 40) = v261;
      *(_BYTE *)(v241 + 48) = v262;
      goto LABEL_111;
    }
    *(_OWORD *)v241 = *(_OWORD *)v242;
    v266 = *((_OWORD *)v242 + 1);
    v267 = *((_OWORD *)v242 + 2);
    v268 = *((_OWORD *)v242 + 3);
    *(_QWORD *)(v241 + 64) = *((_QWORD *)v242 + 8);
    *(_OWORD *)(v241 + 32) = v267;
    *(_OWORD *)(v241 + 48) = v268;
    *(_OWORD *)(v241 + 16) = v266;
  }
LABEL_114:
  v269 = v8[21];
  v270 = v6 + v269;
  v271 = &v7[v269];
  v272 = *(_QWORD *)(v6 + v269 + 24);
  v273 = *(_QWORD *)&v7[v269 + 24];
  if (v272)
  {
    if (!v273)
    {
      sub_21420D764(v270);
      *(_OWORD *)v270 = *(_OWORD *)v271;
      v293 = *((_OWORD *)v271 + 2);
      v292 = *((_OWORD *)v271 + 3);
      v294 = *((_OWORD *)v271 + 1);
      *(_QWORD *)(v270 + 64) = *((_QWORD *)v271 + 8);
      *(_OWORD *)(v270 + 32) = v293;
      *(_OWORD *)(v270 + 48) = v292;
      *(_OWORD *)(v270 + 16) = v294;
      goto LABEL_122;
    }
    v274 = *(_QWORD *)v271;
    v275 = *((_QWORD *)v271 + 1);
    v276 = v271[16];
    sub_2141DD130(*(_QWORD *)v271, v275, v276);
    v277 = *(_QWORD *)v270;
    v278 = *(_QWORD *)(v270 + 8);
    v279 = *(_BYTE *)(v270 + 16);
    *(_QWORD *)v270 = v274;
    *(_QWORD *)(v270 + 8) = v275;
    *(_BYTE *)(v270 + 16) = v276;
    sub_2141ED0BC(v277, v278, v279);
    *(_QWORD *)(v270 + 24) = *((_QWORD *)v271 + 3);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v280 = *((_QWORD *)v271 + 4);
    v281 = *((_QWORD *)v271 + 5);
    v282 = v271[48];
    sub_2141DD140(v280, v281, v282);
    v283 = *(_QWORD *)(v270 + 32);
    v284 = *(_QWORD *)(v270 + 40);
    *(_QWORD *)(v270 + 32) = v280;
    *(_QWORD *)(v270 + 40) = v281;
    v285 = *(_BYTE *)(v270 + 48);
    *(_BYTE *)(v270 + 48) = v282;
    sub_2141EF1B0(v283, v284, v285);
  }
  else
  {
    if (!v273)
    {
      *(_OWORD *)v270 = *(_OWORD *)v271;
      v295 = *((_OWORD *)v271 + 1);
      v296 = *((_OWORD *)v271 + 2);
      v297 = *((_OWORD *)v271 + 3);
      *(_QWORD *)(v270 + 64) = *((_QWORD *)v271 + 8);
      *(_OWORD *)(v270 + 32) = v296;
      *(_OWORD *)(v270 + 48) = v297;
      *(_OWORD *)(v270 + 16) = v295;
      goto LABEL_122;
    }
    v286 = *(_QWORD *)v271;
    v287 = *((_QWORD *)v271 + 1);
    v288 = v271[16];
    sub_2141DD130(*(_QWORD *)v271, v287, v288);
    *(_QWORD *)v270 = v286;
    *(_QWORD *)(v270 + 8) = v287;
    *(_BYTE *)(v270 + 16) = v288;
    *(_QWORD *)(v270 + 24) = *((_QWORD *)v271 + 3);
    v289 = *((_QWORD *)v271 + 4);
    v290 = *((_QWORD *)v271 + 5);
    v291 = v271[48];
    swift_bridgeObjectRetain();
    sub_2141DD140(v289, v290, v291);
    *(_QWORD *)(v270 + 32) = v289;
    *(_QWORD *)(v270 + 40) = v290;
    *(_BYTE *)(v270 + 48) = v291;
  }
  *(_OWORD *)(v270 + 56) = *(_OWORD *)(v271 + 56);
LABEL_122:
  v298 = v8[22];
  v299 = (_QWORD *)(v6 + v298);
  v300 = &v7[v298];
  *v299 = *(_QWORD *)v300;
  v299[1] = *((_QWORD *)v300 + 1);
  v299[2] = *((_QWORD *)v300 + 2);
  v301 = v8[23];
  v302 = (_QWORD *)(v6 + v301);
  v303 = &v7[v301];
  *v302 = *(_QWORD *)v303;
  v302[1] = *((_QWORD *)v303 + 1);
  v302[2] = *((_QWORD *)v303 + 2);
  v304 = v8[24];
  v305 = v6 + v304;
  v306 = &v7[v304];
  v307 = *(_QWORD *)(v6 + v304 + 24);
  v308 = *(_QWORD *)&v7[v304 + 24];
  if (v307)
  {
    if (v308)
    {
      v309 = *(_QWORD *)v306;
      v310 = *((_QWORD *)v306 + 1);
      v311 = v306[16];
      sub_2141DD130(*(_QWORD *)v306, v310, v311);
      v312 = *(_QWORD *)v305;
      v313 = *(_QWORD *)(v305 + 8);
      v314 = *(_BYTE *)(v305 + 16);
      *(_QWORD *)v305 = v309;
      *(_QWORD *)(v305 + 8) = v310;
      *(_BYTE *)(v305 + 16) = v311;
      sub_2141ED0BC(v312, v313, v314);
      *(_QWORD *)(v305 + 24) = *((_QWORD *)v306 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_21420D798(v305);
      v318 = *((_OWORD *)v306 + 1);
      *(_OWORD *)v305 = *(_OWORD *)v306;
      *(_OWORD *)(v305 + 16) = v318;
    }
  }
  else if (v308)
  {
    v315 = *(_QWORD *)v306;
    v316 = *((_QWORD *)v306 + 1);
    v317 = v306[16];
    sub_2141DD130(*(_QWORD *)v306, v316, v317);
    *(_QWORD *)v305 = v315;
    *(_QWORD *)(v305 + 8) = v316;
    *(_BYTE *)(v305 + 16) = v317;
    *(_QWORD *)(v305 + 24) = *((_QWORD *)v306 + 3);
    swift_bridgeObjectRetain();
  }
  else
  {
    v319 = *((_OWORD *)v306 + 1);
    *(_OWORD *)v305 = *(_OWORD *)v306;
    *(_OWORD *)(v305 + 16) = v319;
  }
  v320 = v8[25];
  v321 = v6 + v320;
  v322 = &v7[v320];
  v323 = *(_QWORD *)(v6 + v320 + 24);
  v324 = *(_QWORD *)&v7[v320 + 24];
  if (v323)
  {
    if (v324)
    {
      v325 = *(_QWORD *)v322;
      v326 = *((_QWORD *)v322 + 1);
      v327 = v322[16];
      sub_2141DD130(*(_QWORD *)v322, v326, v327);
      v328 = *(_QWORD *)v321;
      v329 = *(_QWORD *)(v321 + 8);
      v330 = *(_BYTE *)(v321 + 16);
      *(_QWORD *)v321 = v325;
      *(_QWORD *)(v321 + 8) = v326;
      *(_BYTE *)(v321 + 16) = v327;
      sub_2141ED0BC(v328, v329, v330);
      *(_QWORD *)(v321 + 24) = *((_QWORD *)v322 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_21420D798(v321);
      v334 = *((_OWORD *)v322 + 1);
      *(_OWORD *)v321 = *(_OWORD *)v322;
      *(_OWORD *)(v321 + 16) = v334;
    }
  }
  else if (v324)
  {
    v331 = *(_QWORD *)v322;
    v332 = *((_QWORD *)v322 + 1);
    v333 = v322[16];
    sub_2141DD130(*(_QWORD *)v322, v332, v333);
    *(_QWORD *)v321 = v331;
    *(_QWORD *)(v321 + 8) = v332;
    *(_BYTE *)(v321 + 16) = v333;
    *(_QWORD *)(v321 + 24) = *((_QWORD *)v322 + 3);
    swift_bridgeObjectRetain();
  }
  else
  {
    v335 = *((_OWORD *)v322 + 1);
    *(_OWORD *)v321 = *(_OWORD *)v322;
    *(_OWORD *)(v321 + 16) = v335;
  }
  v4 = v349;
  v336 = v8[26];
  v337 = (_QWORD *)(v6 + v336);
  v338 = &v7[v336];
  *v337 = *(_QWORD *)v338;
  v337[1] = *((_QWORD *)v338 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v339 = v8[27];
  v340 = v6 + v339;
  v341 = &v7[v339];
  v342 = *((_QWORD *)v341 + 3);
  if (*(_QWORD *)(v340 + 24))
  {
    if (v342)
    {
      sub_21420D7CC((uint64_t *)v340, (uint64_t *)v341);
    }
    else
    {
      sub_21420D92C(v340);
      v343 = *((_OWORD *)v341 + 1);
      *(_OWORD *)v340 = *(_OWORD *)v341;
      *(_OWORD *)(v340 + 16) = v343;
    }
  }
  else if (v342)
  {
    *(_QWORD *)(v340 + 24) = v342;
    (**(void (***)(uint64_t, char *))(v342 - 8))(v340, v341);
  }
  else
  {
    v344 = *((_OWORD *)v341 + 1);
    *(_OWORD *)v340 = *(_OWORD *)v341;
    *(_OWORD *)(v340 + 16) = v344;
  }
LABEL_47:
  v127 = v4[9];
  v128 = a1 + v127;
  v129 = (char *)v2 + v127;
  v130 = *(unsigned __int8 *)(a1 + v127 + 40);
  v131 = *((unsigned __int8 *)v2 + v127 + 40);
  if (v130 == 255)
  {
    if (v131 == 255)
    {
      v134 = *(_OWORD *)v129;
      v135 = *((_OWORD *)v129 + 1);
      *(_OWORD *)(v128 + 25) = *(_OWORD *)(v129 + 25);
      *(_OWORD *)v128 = v134;
      *(_OWORD *)(v128 + 16) = v135;
      goto LABEL_57;
    }
    if ((v131 & 1) != 0)
    {
LABEL_54:
      *(_QWORD *)v128 = *(_QWORD *)v129;
      *(_OWORD *)(v128 + 8) = *(_OWORD *)(v129 + 8);
      *(_BYTE *)(v128 + 40) = 1;
      swift_retain();
      goto LABEL_57;
    }
LABEL_56:
    v136 = *((_QWORD *)v129 + 3);
    *(_QWORD *)(v128 + 24) = v136;
    *(_QWORD *)(v128 + 32) = *((_QWORD *)v129 + 4);
    (**(void (***)(uint64_t, char *))(v136 - 8))(v128, v129);
    *(_BYTE *)(v128 + 40) = 0;
    goto LABEL_57;
  }
  if (v131 != 255)
  {
    if ((uint64_t *)a1 == v2)
      goto LABEL_57;
    sub_21420D730(v128);
    if ((v129[40] & 1) != 0)
      goto LABEL_54;
    goto LABEL_56;
  }
  sub_21420D730(v128);
  v132 = *(_OWORD *)(v129 + 25);
  v133 = *((_OWORD *)v129 + 1);
  *(_OWORD *)v128 = *(_OWORD *)v129;
  *(_OWORD *)(v128 + 16) = v133;
  *(_OWORD *)(v128 + 25) = v132;
LABEL_57:
  v137 = v4[10];
  v138 = a1 + v137;
  v139 = (char *)v2 + v137;
  v140 = *(_OWORD *)v139;
  *(_BYTE *)(v138 + 16) = v139[16];
  *(_OWORD *)v138 = v140;
  return a1;
}

uint64_t sub_214395908(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  int *v5;
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  char *v41;
  char *v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  char *v46;
  char *v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  char *v51;
  char *v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  _OWORD *v62;
  _OWORD *v63;
  __int128 v64;
  uint64_t v65;
  _OWORD *v66;
  _OWORD *v67;
  __int128 v68;
  uint64_t v69;
  _OWORD *v70;
  _OWORD *v71;
  __int128 v72;
  uint64_t v73;
  _OWORD *v74;
  _OWORD *v75;
  __int128 v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v81;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  v5 = (int *)type metadata accessor for PointsRenderer(0);
  v6 = v5[8];
  v7 = (_OWORD *)(a1 + v6);
  v8 = (_OWORD *)(a2 + v6);
  v9 = (int *)type metadata accessor for ChartContentRenderContext.Environment(0);
  v10 = *((_QWORD *)v9 - 1);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v10 + 48))(v8, 1, v9))
  {
    v11 = sub_2141D8BF8(qword_254D69B70);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    v81 = v10;
    v12 = v8[1];
    *v7 = *v8;
    v7[1] = v12;
    *(_OWORD *)((char *)v7 + 25) = *(_OWORD *)((char *)v8 + 25);
    *((_BYTE *)v7 + 41) = *((_BYTE *)v8 + 41);
    v13 = v8[4];
    v7[3] = v8[3];
    v7[4] = v13;
    *((_QWORD *)v7 + 10) = *((_QWORD *)v8 + 10);
    v14 = *(_OWORD *)((char *)v8 + 88);
    v15 = *(_OWORD *)((char *)v8 + 104);
    *(_OWORD *)((char *)v7 + 113) = *(_OWORD *)((char *)v8 + 113);
    *(_OWORD *)((char *)v7 + 104) = v15;
    *(_OWORD *)((char *)v7 + 88) = v14;
    *(_OWORD *)((char *)v7 + 136) = *(_OWORD *)((char *)v8 + 136);
    *((_BYTE *)v7 + 152) = *((_BYTE *)v8 + 152);
    *((_QWORD *)v7 + 20) = *((_QWORD *)v8 + 20);
    *((_BYTE *)v7 + 168) = *((_BYTE *)v8 + 168);
    v16 = v8[12];
    v7[11] = v8[11];
    v7[12] = v16;
    *((_BYTE *)v7 + 208) = *((_BYTE *)v8 + 208);
    v17 = v9[11];
    v18 = (char *)v7 + v17;
    v19 = (char *)v8 + v17;
    v20 = sub_214424308();
    v21 = *(_QWORD *)(v20 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
    {
      v22 = sub_2141D8BF8(&qword_253F134C8);
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v18, v19, v20);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
    }
    v23 = v9[12];
    v24 = (char *)v7 + v23;
    v25 = (char *)v8 + v23;
    *(_QWORD *)v24 = *(_QWORD *)v25;
    v24[8] = v25[8];
    *(_QWORD *)((char *)v7 + v9[13]) = *(_QWORD *)((char *)v8 + v9[13]);
    v26 = v9[14];
    v27 = (char *)v7 + v26;
    v28 = (char *)v8 + v26;
    v29 = sub_214424C68();
    v30 = *(_QWORD *)(v29 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
    {
      v31 = sub_2141D8BF8(&qword_253F15C88);
      memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v30 + 32))(v27, v28, v29);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
    }
    v32 = v9[15];
    v33 = (char *)v7 + v32;
    v34 = (char *)v8 + v32;
    *(_QWORD *)v33 = *(_QWORD *)v34;
    *((_WORD *)v33 + 4) = *((_WORD *)v34 + 4);
    *(_QWORD *)((char *)v7 + v9[16]) = *(_QWORD *)((char *)v8 + v9[16]);
    *(_QWORD *)((char *)v7 + v9[17]) = *(_QWORD *)((char *)v8 + v9[17]);
    v35 = v9[18];
    v36 = (char *)v7 + v35;
    v37 = (char *)v8 + v35;
    v38 = *((_OWORD *)v37 + 3);
    *((_OWORD *)v36 + 2) = *((_OWORD *)v37 + 2);
    *((_OWORD *)v36 + 3) = v38;
    *((_QWORD *)v36 + 8) = *((_QWORD *)v37 + 8);
    v39 = *((_OWORD *)v37 + 1);
    *(_OWORD *)v36 = *(_OWORD *)v37;
    *((_OWORD *)v36 + 1) = v39;
    v40 = v9[19];
    v41 = (char *)v7 + v40;
    v42 = (char *)v8 + v40;
    *((_QWORD *)v41 + 8) = *((_QWORD *)v42 + 8);
    v43 = *((_OWORD *)v42 + 3);
    *((_OWORD *)v41 + 2) = *((_OWORD *)v42 + 2);
    *((_OWORD *)v41 + 3) = v43;
    v44 = *((_OWORD *)v42 + 1);
    *(_OWORD *)v41 = *(_OWORD *)v42;
    *((_OWORD *)v41 + 1) = v44;
    v45 = v9[20];
    v46 = (char *)v7 + v45;
    v47 = (char *)v8 + v45;
    v48 = *((_OWORD *)v47 + 3);
    *((_OWORD *)v46 + 2) = *((_OWORD *)v47 + 2);
    *((_OWORD *)v46 + 3) = v48;
    *((_QWORD *)v46 + 8) = *((_QWORD *)v47 + 8);
    v49 = *((_OWORD *)v47 + 1);
    *(_OWORD *)v46 = *(_OWORD *)v47;
    *((_OWORD *)v46 + 1) = v49;
    v50 = v9[21];
    v51 = (char *)v7 + v50;
    v52 = (char *)v8 + v50;
    *((_QWORD *)v51 + 8) = *((_QWORD *)v52 + 8);
    v53 = *((_OWORD *)v52 + 3);
    *((_OWORD *)v51 + 2) = *((_OWORD *)v52 + 2);
    *((_OWORD *)v51 + 3) = v53;
    v54 = *((_OWORD *)v52 + 1);
    *(_OWORD *)v51 = *(_OWORD *)v52;
    *((_OWORD *)v51 + 1) = v54;
    v55 = v9[22];
    v56 = (char *)v7 + v55;
    v57 = (char *)v8 + v55;
    *(_OWORD *)v56 = *(_OWORD *)v57;
    *((_QWORD *)v56 + 2) = *((_QWORD *)v57 + 2);
    v58 = v9[23];
    v59 = (char *)v7 + v58;
    v60 = (char *)v8 + v58;
    *(_OWORD *)v59 = *(_OWORD *)v60;
    *((_QWORD *)v59 + 2) = *((_QWORD *)v60 + 2);
    v61 = v9[24];
    v62 = (_OWORD *)((char *)v7 + v61);
    v63 = (_OWORD *)((char *)v8 + v61);
    v64 = v63[1];
    *v62 = *v63;
    v62[1] = v64;
    v65 = v9[25];
    v66 = (_OWORD *)((char *)v7 + v65);
    v67 = (_OWORD *)((char *)v8 + v65);
    v68 = v67[1];
    *v66 = *v67;
    v66[1] = v68;
    *(_OWORD *)((char *)v7 + v9[26]) = *(_OWORD *)((char *)v8 + v9[26]);
    v69 = v9[27];
    v70 = (_OWORD *)((char *)v7 + v69);
    v71 = (_OWORD *)((char *)v8 + v69);
    v72 = v71[1];
    *v70 = *v71;
    v70[1] = v72;
    (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v81 + 56))(v7, 0, 1, v9);
  }
  v73 = v5[9];
  v74 = (_OWORD *)(a1 + v73);
  v75 = (_OWORD *)(a2 + v73);
  v76 = v75[1];
  *v74 = *v75;
  v74[1] = v76;
  *(_OWORD *)((char *)v74 + 25) = *(_OWORD *)((char *)v75 + 25);
  v77 = v5[10];
  v78 = a1 + v77;
  v79 = a2 + v77;
  *(_BYTE *)(v78 + 16) = *(_BYTE *)(v79 + 16);
  *(_OWORD *)v78 = *(_OWORD *)v79;
  return a1;
}

uint64_t sub_214395D14(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, int *);
  int v12;
  int v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  void *v20;
  const void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  void *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(void *, uint64_t, uint64_t);
  int v37;
  size_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  const void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _OWORD *v79;
  _OWORD *v80;
  __int128 v81;
  uint64_t v82;
  _OWORD *v83;
  _OWORD *v84;
  __int128 v85;
  uint64_t v86;
  _OWORD *v87;
  _OWORD *v88;
  __int128 v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t (*v98)(void *, uint64_t, uint64_t);
  int v99;
  size_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char v108;
  uint64_t v109;
  uint64_t v110;
  char v111;
  char v112;
  uint64_t v113;
  uint64_t v114;
  char v115;
  __int128 v116;
  __int128 v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char v121;
  uint64_t v122;
  uint64_t v123;
  char v124;
  char v125;
  uint64_t v126;
  uint64_t v127;
  char v128;
  __int128 v129;
  __int128 v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char v134;
  uint64_t v135;
  uint64_t v136;
  char v137;
  char v138;
  uint64_t v139;
  uint64_t v140;
  char v141;
  __int128 v142;
  __int128 v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char v147;
  uint64_t v148;
  uint64_t v149;
  char v150;
  char v151;
  uint64_t v152;
  uint64_t v153;
  char v154;
  __int128 v155;
  __int128 v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  char v166;
  uint64_t v167;
  uint64_t v168;
  char v169;
  __int128 v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  char v174;
  uint64_t v175;
  uint64_t v176;
  char v177;
  __int128 v178;
  uint64_t v179;
  _QWORD *v180;
  uint64_t *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  __int128 v187;
  uint64_t v188;
  _OWORD *v189;
  uint64_t v190;
  __int128 v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  void *v196;
  void *v197;
  int *v198;
  int *v199;

  _s6Charts15AnyChartContentVwxx_0(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_release();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v5 = (int *)type metadata accessor for PointsRenderer(0);
  v6 = v5[8];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = (int *)type metadata accessor for ChartContentRenderContext.Environment(0);
  v10 = *((_QWORD *)v9 - 1);
  v11 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      v198 = v5;
      v14 = *(_OWORD *)(v8 + 16);
      *(_OWORD *)v7 = *(_OWORD *)v8;
      *(_OWORD *)(v7 + 16) = v14;
      *(_OWORD *)(v7 + 25) = *(_OWORD *)(v8 + 25);
      *(_BYTE *)(v7 + 41) = *(_BYTE *)(v8 + 41);
      v15 = *(_OWORD *)(v8 + 64);
      *(_OWORD *)(v7 + 48) = *(_OWORD *)(v8 + 48);
      *(_OWORD *)(v7 + 64) = v15;
      *(_QWORD *)(v7 + 80) = *(_QWORD *)(v8 + 80);
      v16 = *(_OWORD *)(v8 + 88);
      v17 = *(_OWORD *)(v8 + 104);
      *(_OWORD *)(v7 + 113) = *(_OWORD *)(v8 + 113);
      *(_OWORD *)(v7 + 104) = v17;
      *(_OWORD *)(v7 + 88) = v16;
      *(_OWORD *)(v7 + 136) = *(_OWORD *)(v8 + 136);
      *(_BYTE *)(v7 + 152) = *(_BYTE *)(v8 + 152);
      *(_QWORD *)(v7 + 160) = *(_QWORD *)(v8 + 160);
      *(_BYTE *)(v7 + 168) = *(_BYTE *)(v8 + 168);
      v18 = *(_OWORD *)(v8 + 192);
      *(_OWORD *)(v7 + 176) = *(_OWORD *)(v8 + 176);
      *(_OWORD *)(v7 + 192) = v18;
      *(_BYTE *)(v7 + 208) = *(_BYTE *)(v8 + 208);
      v19 = v9[11];
      v20 = (void *)(v7 + v19);
      v21 = (const void *)(v8 + v19);
      v22 = sub_214424308();
      v23 = *(_QWORD *)(v22 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
      {
        v24 = sub_2141D8BF8(&qword_253F134C8);
        memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v23 + 32))(v20, v21, v22);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
      }
      v40 = v9[12];
      v41 = v7 + v40;
      v42 = v8 + v40;
      *(_QWORD *)v41 = *(_QWORD *)v42;
      *(_BYTE *)(v41 + 8) = *(_BYTE *)(v42 + 8);
      *(_QWORD *)(v7 + v9[13]) = *(_QWORD *)(v8 + v9[13]);
      v43 = v9[14];
      v44 = (void *)(v7 + v43);
      v45 = (const void *)(v8 + v43);
      v46 = sub_214424C68();
      v47 = *(_QWORD *)(v46 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v47 + 48))(v45, 1, v46))
      {
        v48 = sub_2141D8BF8(&qword_253F15C88);
        memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v47 + 32))(v44, v45, v46);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v47 + 56))(v44, 0, 1, v46);
      }
      v49 = v9[15];
      v50 = v7 + v49;
      v51 = v8 + v49;
      *(_QWORD *)v50 = *(_QWORD *)v51;
      *(_WORD *)(v50 + 8) = *(_WORD *)(v51 + 8);
      *(_QWORD *)(v7 + v9[16]) = *(_QWORD *)(v8 + v9[16]);
      *(_QWORD *)(v7 + v9[17]) = *(_QWORD *)(v8 + v9[17]);
      v52 = v9[18];
      v53 = v7 + v52;
      v54 = v8 + v52;
      v55 = *(_OWORD *)(v54 + 48);
      *(_OWORD *)(v53 + 32) = *(_OWORD *)(v54 + 32);
      *(_OWORD *)(v53 + 48) = v55;
      *(_QWORD *)(v53 + 64) = *(_QWORD *)(v54 + 64);
      v56 = *(_OWORD *)(v54 + 16);
      *(_OWORD *)v53 = *(_OWORD *)v54;
      *(_OWORD *)(v53 + 16) = v56;
      v57 = v9[19];
      v58 = v7 + v57;
      v59 = v8 + v57;
      *(_QWORD *)(v58 + 64) = *(_QWORD *)(v59 + 64);
      v60 = *(_OWORD *)(v59 + 48);
      *(_OWORD *)(v58 + 32) = *(_OWORD *)(v59 + 32);
      *(_OWORD *)(v58 + 48) = v60;
      v61 = *(_OWORD *)(v59 + 16);
      *(_OWORD *)v58 = *(_OWORD *)v59;
      *(_OWORD *)(v58 + 16) = v61;
      v62 = v9[20];
      v63 = v7 + v62;
      v64 = v8 + v62;
      v65 = *(_OWORD *)(v64 + 48);
      *(_OWORD *)(v63 + 32) = *(_OWORD *)(v64 + 32);
      *(_OWORD *)(v63 + 48) = v65;
      *(_QWORD *)(v63 + 64) = *(_QWORD *)(v64 + 64);
      v66 = *(_OWORD *)(v64 + 16);
      *(_OWORD *)v63 = *(_OWORD *)v64;
      *(_OWORD *)(v63 + 16) = v66;
      v67 = v9[21];
      v68 = v7 + v67;
      v69 = v8 + v67;
      *(_QWORD *)(v68 + 64) = *(_QWORD *)(v69 + 64);
      v70 = *(_OWORD *)(v69 + 48);
      *(_OWORD *)(v68 + 32) = *(_OWORD *)(v69 + 32);
      *(_OWORD *)(v68 + 48) = v70;
      v71 = *(_OWORD *)(v69 + 16);
      *(_OWORD *)v68 = *(_OWORD *)v69;
      *(_OWORD *)(v68 + 16) = v71;
      v72 = v9[22];
      v73 = v7 + v72;
      v74 = v8 + v72;
      *(_OWORD *)v73 = *(_OWORD *)v74;
      *(_QWORD *)(v73 + 16) = *(_QWORD *)(v74 + 16);
      v75 = v9[23];
      v76 = v7 + v75;
      v77 = v8 + v75;
      *(_OWORD *)v76 = *(_OWORD *)v77;
      *(_QWORD *)(v76 + 16) = *(_QWORD *)(v77 + 16);
      v78 = v9[24];
      v79 = (_OWORD *)(v7 + v78);
      v80 = (_OWORD *)(v8 + v78);
      v81 = v80[1];
      *v79 = *v80;
      v79[1] = v81;
      v82 = v9[25];
      v83 = (_OWORD *)(v7 + v82);
      v84 = (_OWORD *)(v8 + v82);
      v85 = v84[1];
      *v83 = *v84;
      v83[1] = v85;
      *(_OWORD *)(v7 + v9[26]) = *(_OWORD *)(v8 + v9[26]);
      v86 = v9[27];
      v87 = (_OWORD *)(v7 + v86);
      v88 = (_OWORD *)(v8 + v86);
      v89 = v88[1];
      *v87 = *v88;
      v87[1] = v89;
      (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v10 + 56))(v7, 0, 1, v9);
      v5 = v198;
      goto LABEL_76;
    }
LABEL_7:
    v25 = sub_2141D8BF8(qword_254D69B70);
    memcpy((void *)v7, (const void *)v8, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    goto LABEL_76;
  }
  if (v13)
  {
    sub_2141DD370(v7, type metadata accessor for ChartContentRenderContext.Environment);
    goto LABEL_7;
  }
  if (*(unsigned __int8 *)(v7 + 40) == 255)
    goto LABEL_14;
  if (*(unsigned __int8 *)(v8 + 40) == 255 || a1 != a2)
  {
    sub_21420D6FC(v7);
LABEL_14:
    v27 = *(_OWORD *)(v8 + 16);
    *(_OWORD *)v7 = *(_OWORD *)v8;
    *(_OWORD *)(v7 + 16) = v27;
    *(_OWORD *)(v7 + 25) = *(_OWORD *)(v8 + 25);
  }
  *(_BYTE *)(v7 + 41) = *(_BYTE *)(v8 + 41);
  v28 = *(_QWORD *)(v8 + 56);
  *(_QWORD *)(v7 + 48) = *(_QWORD *)(v8 + 48);
  *(_QWORD *)(v7 + 56) = v28;
  *(_QWORD *)(v7 + 64) = *(_QWORD *)(v8 + 64);
  *(_QWORD *)(v7 + 72) = *(_QWORD *)(v8 + 72);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v7 + 80) = *(_QWORD *)(v8 + 80);
  if (*(unsigned __int8 *)(v7 + 128) == 255)
  {
LABEL_19:
    v29 = *(_OWORD *)(v8 + 104);
    *(_OWORD *)(v7 + 88) = *(_OWORD *)(v8 + 88);
    *(_OWORD *)(v7 + 104) = v29;
    *(_OWORD *)(v7 + 113) = *(_OWORD *)(v8 + 113);
    goto LABEL_20;
  }
  if (*(unsigned __int8 *)(v8 + 128) == 255 || a1 != a2)
  {
    sub_21420D730(v7 + 88);
    goto LABEL_19;
  }
LABEL_20:
  v199 = v5;
  *(_OWORD *)(v7 + 136) = *(_OWORD *)(v8 + 136);
  *(_BYTE *)(v7 + 152) = *(_BYTE *)(v8 + 152);
  *(_QWORD *)(v7 + 160) = *(_QWORD *)(v8 + 160);
  *(_BYTE *)(v7 + 168) = *(_BYTE *)(v8 + 168);
  v30 = *(_OWORD *)(v8 + 192);
  *(_OWORD *)(v7 + 176) = *(_OWORD *)(v8 + 176);
  *(_OWORD *)(v7 + 192) = v30;
  *(_BYTE *)(v7 + 208) = *(_BYTE *)(v8 + 208);
  v31 = v9[11];
  v32 = (void *)(v7 + v31);
  v33 = (void *)(v8 + v31);
  v34 = sub_214424308();
  v35 = *(_QWORD *)(v34 - 8);
  v36 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v35 + 48);
  v196 = v32;
  LODWORD(v32) = v36(v32, 1, v34);
  v37 = v36(v33, 1, v34);
  if ((_DWORD)v32)
  {
    if (v37)
    {
      v38 = *(_QWORD *)(*(_QWORD *)(sub_2141D8BF8(&qword_253F134C8) - 8) + 64);
      v39 = v196;
LABEL_30:
      memcpy(v39, v33, v38);
      goto LABEL_33;
    }
    (*(void (**)(void *, void *, uint64_t))(v35 + 32))(v196, v33, v34);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v196, 0, 1, v34);
  }
  else
  {
    if (v37)
    {
      (*(void (**)(void *, uint64_t))(v35 + 8))(v196, v34);
      v38 = *(_QWORD *)(*(_QWORD *)(sub_2141D8BF8(&qword_253F134C8) - 8) + 64);
      v39 = v196;
      goto LABEL_30;
    }
    (*(void (**)(void *, void *, uint64_t))(v35 + 40))(v196, v33, v34);
  }
LABEL_33:
  v90 = v9[12];
  v91 = v7 + v90;
  v92 = v8 + v90;
  *(_QWORD *)v91 = *(_QWORD *)v92;
  *(_BYTE *)(v91 + 8) = *(_BYTE *)(v92 + 8);
  *(_QWORD *)(v7 + v9[13]) = *(_QWORD *)(v8 + v9[13]);
  v93 = v9[14];
  v94 = (void *)(v7 + v93);
  v95 = (void *)(v8 + v93);
  v96 = sub_214424C68();
  v97 = *(_QWORD *)(v96 - 8);
  v98 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v97 + 48);
  v197 = v94;
  LODWORD(v94) = v98(v94, 1, v96);
  v99 = v98(v95, 1, v96);
  if ((_DWORD)v94)
  {
    if (v99)
    {
      v100 = *(_QWORD *)(*(_QWORD *)(sub_2141D8BF8(&qword_253F15C88) - 8) + 64);
      v101 = v197;
LABEL_38:
      memcpy(v101, v95, v100);
      goto LABEL_41;
    }
    (*(void (**)(void *, void *, uint64_t))(v97 + 32))(v197, v95, v96);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v97 + 56))(v197, 0, 1, v96);
  }
  else
  {
    if (v99)
    {
      (*(void (**)(void *, uint64_t))(v97 + 8))(v197, v96);
      v100 = *(_QWORD *)(*(_QWORD *)(sub_2141D8BF8(&qword_253F15C88) - 8) + 64);
      v101 = v197;
      goto LABEL_38;
    }
    (*(void (**)(void *, void *, uint64_t))(v97 + 40))(v197, v95, v96);
  }
LABEL_41:
  v102 = v9[15];
  v103 = v7 + v102;
  v104 = v8 + v102;
  *(_QWORD *)(v7 + v102) = *(_QWORD *)(v8 + v102);
  swift_release();
  *(_BYTE *)(v103 + 8) = *(_BYTE *)(v104 + 8);
  *(_BYTE *)(v103 + 9) = *(_BYTE *)(v104 + 9);
  *(_QWORD *)(v7 + v9[16]) = *(_QWORD *)(v8 + v9[16]);
  *(_QWORD *)(v7 + v9[17]) = *(_QWORD *)(v8 + v9[17]);
  v105 = v9[18];
  v106 = v7 + v105;
  v107 = v8 + v105;
  if (*(_QWORD *)(v7 + v105 + 24))
  {
    if (*(_QWORD *)(v107 + 24))
    {
      v108 = *(_BYTE *)(v107 + 16);
      v109 = *(_QWORD *)v106;
      v110 = *(_QWORD *)(v106 + 8);
      v111 = *(_BYTE *)(v106 + 16);
      *(_OWORD *)v106 = *(_OWORD *)v107;
      *(_BYTE *)(v106 + 16) = v108;
      sub_2141ED0BC(v109, v110, v111);
      *(_QWORD *)(v106 + 24) = *(_QWORD *)(v107 + 24);
      swift_bridgeObjectRelease();
      v112 = *(_BYTE *)(v107 + 48);
      v113 = *(_QWORD *)(v106 + 32);
      v114 = *(_QWORD *)(v106 + 40);
      *(_OWORD *)(v106 + 32) = *(_OWORD *)(v107 + 32);
      v115 = *(_BYTE *)(v106 + 48);
      *(_BYTE *)(v106 + 48) = v112;
      sub_2141EF1B0(v113, v114, v115);
      *(_OWORD *)(v106 + 56) = *(_OWORD *)(v107 + 56);
      goto LABEL_46;
    }
    sub_21420D764(v106);
  }
  v116 = *(_OWORD *)(v107 + 48);
  *(_OWORD *)(v106 + 32) = *(_OWORD *)(v107 + 32);
  *(_OWORD *)(v106 + 48) = v116;
  *(_QWORD *)(v106 + 64) = *(_QWORD *)(v107 + 64);
  v117 = *(_OWORD *)(v107 + 16);
  *(_OWORD *)v106 = *(_OWORD *)v107;
  *(_OWORD *)(v106 + 16) = v117;
LABEL_46:
  v118 = v9[19];
  v119 = v7 + v118;
  v120 = v8 + v118;
  if (*(_QWORD *)(v7 + v118 + 24))
  {
    if (*(_QWORD *)(v120 + 24))
    {
      v121 = *(_BYTE *)(v120 + 16);
      v122 = *(_QWORD *)v119;
      v123 = *(_QWORD *)(v119 + 8);
      v124 = *(_BYTE *)(v119 + 16);
      *(_OWORD *)v119 = *(_OWORD *)v120;
      *(_BYTE *)(v119 + 16) = v121;
      sub_2141ED0BC(v122, v123, v124);
      *(_QWORD *)(v119 + 24) = *(_QWORD *)(v120 + 24);
      swift_bridgeObjectRelease();
      v125 = *(_BYTE *)(v120 + 48);
      v126 = *(_QWORD *)(v119 + 32);
      v127 = *(_QWORD *)(v119 + 40);
      *(_OWORD *)(v119 + 32) = *(_OWORD *)(v120 + 32);
      v128 = *(_BYTE *)(v119 + 48);
      *(_BYTE *)(v119 + 48) = v125;
      sub_2141EF1B0(v126, v127, v128);
      *(_OWORD *)(v119 + 56) = *(_OWORD *)(v120 + 56);
      goto LABEL_51;
    }
    sub_21420D764(v119);
  }
  v129 = *(_OWORD *)(v120 + 48);
  *(_OWORD *)(v119 + 32) = *(_OWORD *)(v120 + 32);
  *(_OWORD *)(v119 + 48) = v129;
  *(_QWORD *)(v119 + 64) = *(_QWORD *)(v120 + 64);
  v130 = *(_OWORD *)(v120 + 16);
  *(_OWORD *)v119 = *(_OWORD *)v120;
  *(_OWORD *)(v119 + 16) = v130;
LABEL_51:
  v131 = v9[20];
  v132 = v7 + v131;
  v133 = v8 + v131;
  if (*(_QWORD *)(v7 + v131 + 24))
  {
    if (*(_QWORD *)(v133 + 24))
    {
      v134 = *(_BYTE *)(v133 + 16);
      v135 = *(_QWORD *)v132;
      v136 = *(_QWORD *)(v132 + 8);
      v137 = *(_BYTE *)(v132 + 16);
      *(_OWORD *)v132 = *(_OWORD *)v133;
      *(_BYTE *)(v132 + 16) = v134;
      sub_2141ED0BC(v135, v136, v137);
      *(_QWORD *)(v132 + 24) = *(_QWORD *)(v133 + 24);
      swift_bridgeObjectRelease();
      v138 = *(_BYTE *)(v133 + 48);
      v139 = *(_QWORD *)(v132 + 32);
      v140 = *(_QWORD *)(v132 + 40);
      *(_OWORD *)(v132 + 32) = *(_OWORD *)(v133 + 32);
      v141 = *(_BYTE *)(v132 + 48);
      *(_BYTE *)(v132 + 48) = v138;
      sub_2141EF1B0(v139, v140, v141);
      *(_OWORD *)(v132 + 56) = *(_OWORD *)(v133 + 56);
      goto LABEL_56;
    }
    sub_21420D764(v132);
  }
  v142 = *(_OWORD *)(v133 + 48);
  *(_OWORD *)(v132 + 32) = *(_OWORD *)(v133 + 32);
  *(_OWORD *)(v132 + 48) = v142;
  *(_QWORD *)(v132 + 64) = *(_QWORD *)(v133 + 64);
  v143 = *(_OWORD *)(v133 + 16);
  *(_OWORD *)v132 = *(_OWORD *)v133;
  *(_OWORD *)(v132 + 16) = v143;
LABEL_56:
  v144 = v9[21];
  v145 = v7 + v144;
  v146 = v8 + v144;
  if (*(_QWORD *)(v7 + v144 + 24))
  {
    if (*(_QWORD *)(v146 + 24))
    {
      v147 = *(_BYTE *)(v146 + 16);
      v148 = *(_QWORD *)v145;
      v149 = *(_QWORD *)(v145 + 8);
      v150 = *(_BYTE *)(v145 + 16);
      *(_OWORD *)v145 = *(_OWORD *)v146;
      *(_BYTE *)(v145 + 16) = v147;
      sub_2141ED0BC(v148, v149, v150);
      *(_QWORD *)(v145 + 24) = *(_QWORD *)(v146 + 24);
      swift_bridgeObjectRelease();
      v151 = *(_BYTE *)(v146 + 48);
      v152 = *(_QWORD *)(v145 + 32);
      v153 = *(_QWORD *)(v145 + 40);
      *(_OWORD *)(v145 + 32) = *(_OWORD *)(v146 + 32);
      v154 = *(_BYTE *)(v145 + 48);
      *(_BYTE *)(v145 + 48) = v151;
      sub_2141EF1B0(v152, v153, v154);
      *(_OWORD *)(v145 + 56) = *(_OWORD *)(v146 + 56);
      goto LABEL_61;
    }
    sub_21420D764(v145);
  }
  v155 = *(_OWORD *)(v146 + 48);
  *(_OWORD *)(v145 + 32) = *(_OWORD *)(v146 + 32);
  *(_OWORD *)(v145 + 48) = v155;
  *(_QWORD *)(v145 + 64) = *(_QWORD *)(v146 + 64);
  v156 = *(_OWORD *)(v146 + 16);
  *(_OWORD *)v145 = *(_OWORD *)v146;
  *(_OWORD *)(v145 + 16) = v156;
LABEL_61:
  v157 = v9[22];
  v158 = v7 + v157;
  v159 = v8 + v157;
  *(_OWORD *)v158 = *(_OWORD *)v159;
  *(_QWORD *)(v158 + 16) = *(_QWORD *)(v159 + 16);
  v160 = v9[23];
  v161 = v7 + v160;
  v162 = v8 + v160;
  *(_OWORD *)v161 = *(_OWORD *)v162;
  *(_QWORD *)(v161 + 16) = *(_QWORD *)(v162 + 16);
  v163 = v9[24];
  v164 = v7 + v163;
  v165 = v8 + v163;
  v5 = v199;
  if (*(_QWORD *)(v7 + v163 + 24))
  {
    if (*(_QWORD *)(v165 + 24))
    {
      v166 = *(_BYTE *)(v165 + 16);
      v167 = *(_QWORD *)v164;
      v168 = *(_QWORD *)(v164 + 8);
      v169 = *(_BYTE *)(v164 + 16);
      *(_OWORD *)v164 = *(_OWORD *)v165;
      *(_BYTE *)(v164 + 16) = v166;
      sub_2141ED0BC(v167, v168, v169);
      *(_QWORD *)(v164 + 24) = *(_QWORD *)(v165 + 24);
      swift_bridgeObjectRelease();
      goto LABEL_66;
    }
    sub_21420D798(v164);
  }
  v170 = *(_OWORD *)(v165 + 16);
  *(_OWORD *)v164 = *(_OWORD *)v165;
  *(_OWORD *)(v164 + 16) = v170;
LABEL_66:
  v171 = v9[25];
  v172 = v7 + v171;
  v173 = v8 + v171;
  if (!*(_QWORD *)(v7 + v171 + 24))
  {
LABEL_70:
    v178 = *(_OWORD *)(v173 + 16);
    *(_OWORD *)v172 = *(_OWORD *)v173;
    *(_OWORD *)(v172 + 16) = v178;
    goto LABEL_71;
  }
  if (!*(_QWORD *)(v173 + 24))
  {
    sub_21420D798(v172);
    goto LABEL_70;
  }
  v174 = *(_BYTE *)(v173 + 16);
  v175 = *(_QWORD *)v172;
  v176 = *(_QWORD *)(v172 + 8);
  v177 = *(_BYTE *)(v172 + 16);
  *(_OWORD *)v172 = *(_OWORD *)v173;
  *(_BYTE *)(v172 + 16) = v174;
  sub_2141ED0BC(v175, v176, v177);
  *(_QWORD *)(v172 + 24) = *(_QWORD *)(v173 + 24);
  swift_bridgeObjectRelease();
LABEL_71:
  v179 = v9[26];
  v180 = (_QWORD *)(v7 + v179);
  v181 = (uint64_t *)(v8 + v179);
  v183 = *v181;
  v182 = v181[1];
  *v180 = v183;
  v180[1] = v182;
  swift_bridgeObjectRelease();
  v184 = v9[27];
  v185 = v7 + v184;
  v186 = v8 + v184;
  if (*(_QWORD *)(v185 + 24))
  {
    if (*(_QWORD *)(v186 + 24))
      _s6Charts15AnyChartContentVwxx_0(v185);
    else
      sub_21420D92C(v185);
  }
  v187 = *(_OWORD *)(v186 + 16);
  *(_OWORD *)v185 = *(_OWORD *)v186;
  *(_OWORD *)(v185 + 16) = v187;
LABEL_76:
  v188 = v5[9];
  v189 = (_OWORD *)(a1 + v188);
  v190 = a2 + v188;
  if (*(unsigned __int8 *)(a1 + v188 + 40) == 255)
  {
LABEL_80:
    v191 = *(_OWORD *)(v190 + 16);
    *v189 = *(_OWORD *)v190;
    v189[1] = v191;
    *(_OWORD *)((char *)v189 + 25) = *(_OWORD *)(v190 + 25);
    goto LABEL_81;
  }
  if (*(unsigned __int8 *)(v190 + 40) == 255 || a1 != a2)
  {
    sub_21420D730((uint64_t)v189);
    goto LABEL_80;
  }
LABEL_81:
  v192 = v5[10];
  v193 = a1 + v192;
  v194 = a2 + v192;
  *(_OWORD *)v193 = *(_OWORD *)v194;
  *(_BYTE *)(v193 + 16) = *(_BYTE *)(v194 + 16);
  return a1;
}

uint64_t sub_214396838()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_214396844(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PointsRenderer(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_214396880()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_21439688C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PointsRenderer(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for VectorizedPointPlotContent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2141D8E88(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for VectorizedPointPlotContent);
}

ValueMetadata *type metadata accessor for PointMarkChartContentKey()
{
  return &type metadata for PointMarkChartContentKey;
}

_QWORD *initializeBufferWithCopyOfBuffer for ChartContentList(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for ChartContentList(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  return a1;
}

_QWORD *assignWithTake for ChartContentList(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  return a1;
}

ValueMetadata *type metadata accessor for ChartContentList()
{
  return &type metadata for ChartContentList;
}

unint64_t sub_2143969AC(uint64_t a1)
{
  unint64_t result;

  result = sub_2141DD324();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_2143969D0()
{
  return sub_2141D9054(&qword_254D6CD70, &qword_254D6CD78, MEMORY[0x24BEE2C18]);
}

char *sub_2143969FC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v14;
  _BYTE v15[288];
  _BYTE v16[288];
  _BYTE v17[296];

  v2 = type metadata accessor for ChartContentList.Item();
  MEMORY[0x24BDAC7A8](v2);
  v5 = &v15[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
    return (char *)MEMORY[0x24BEE4AF8];
  v7 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
  v8 = *(_QWORD *)(v3 + 72);
  v14 = a1;
  swift_bridgeObjectRetain();
  v9 = v6 - 1;
  v10 = (char *)MEMORY[0x24BEE4AF8];
  while (1)
  {
    sub_2141FDEA0(v7, (uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for ChartContentList.Item);
    sub_21439775C(v5 + 16, v16);
    sub_21439775C(v16, v17);
    sub_21439775C(v16, v15);
    sub_2141DCED0((uint64_t)v15);
    sub_2141DD370((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for ChartContentList.Item);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v10 = sub_2142219DC(0, *((_QWORD *)v10 + 2) + 1, 1, v10);
    v12 = *((_QWORD *)v10 + 2);
    v11 = *((_QWORD *)v10 + 3);
    if (v12 >= v11 >> 1)
      v10 = sub_2142219DC((char *)(v11 > 1), v12 + 1, 1, v10);
    *((_QWORD *)v10 + 2) = v12 + 1;
    memcpy(&v10[288 * v12 + 32], v17, 0x120uLL);
    if (!v9)
      break;
    --v9;
    v7 += v8;
  }
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_214396BA0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v7 = (_QWORD *)result;
  if (!a2)
  {
    v8 = 0;
    goto LABEL_11;
  }
  v8 = a3;
  if (!a3)
  {
LABEL_11:
    *v7 = a4;
    v7[1] = a5;
    v7[2] = v8;
    return v8;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    v9 = *(_QWORD *)(a4 + 16);
    if (v9)
    {
      v10 = a2;
      v11 = 0;
      v12 = a3 - 1;
      while (v11 < *(_QWORD *)(a4 + 16))
      {
        v13 = *(_QWORD *)(type metadata accessor for ChartContentList.Item() - 8);
        v14 = *(_QWORD *)(v13 + 72);
        result = sub_2141FDEA0(a4+ ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80))+ v14 * v11, v10, (uint64_t (*)(_QWORD))type metadata accessor for ChartContentList.Item);
        if (v12 == v11)
          goto LABEL_11;
        v10 += v14;
        if (v9 == ++v11)
          goto LABEL_9;
      }
      __break(1u);
      goto LABEL_13;
    }
LABEL_9:
    v8 = v9;
    goto LABEL_11;
  }
LABEL_13:
  __break(1u);
  return result;
}

unint64_t sub_214396C84(unint64_t result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v6;
  BOOL v7;

  v4 = *(_QWORD *)(a4 + 16);
  if (v4 < result || v4 < a3)
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v6 = a3 - result;
  if (a2 >= 1)
  {
    if (v6 < 0 || v6 >= (unint64_t)a2)
      goto LABEL_13;
    return 0;
  }
  if (v6 <= 0 && v6 > a2)
    return 0;
LABEL_13:
  v7 = __OFADD__(result, a2);
  result += a2;
  if (v7)
    goto LABEL_16;
  if (result > v4)
LABEL_17:
    __break(1u);
  return result;
}

uint64_t sub_214396CF0()
{
  uint64_t v0;
  uint64_t v1;
  _OWORD v3[2];
  uint64_t v4;
  _OWORD v5[2];
  uint64_t v6;
  char v7;

  sub_214219DE0(v0, (uint64_t)v5);
  if ((v7 & 1) != 0)
  {
    v3[0] = v5[0];
    v3[1] = v5[1];
    v4 = v6;
    sub_214425454();
    sub_214424F20();
    swift_bridgeObjectRelease();
    sub_214424F20();
    v1 = 0x63696D616E79642ELL;
    sub_214219E1C((uint64_t)v3);
  }
  else
  {
    *((_QWORD *)&v3[0] + 1) = 0xE900000000000028;
    sub_21442573C();
    sub_214424F20();
    swift_bridgeObjectRelease();
    sub_214424F20();
    return 0x6C61636978656C2ELL;
  }
  return v1;
}

uint64_t sub_214396DF0()
{
  uint64_t v0;
  _OWORD v2[2];
  uint64_t v3;
  _OWORD v4[2];
  uint64_t v5;
  char v6;

  sub_214425874();
  sub_214219DE0(v0, (uint64_t)v4);
  if ((v6 & 1) != 0)
  {
    v2[0] = v4[0];
    v2[1] = v4[1];
    v3 = v5;
    sub_214425880();
    sub_21442546C();
    sub_214219E1C((uint64_t)v2);
  }
  else
  {
    sub_214425880();
    sub_214425880();
  }
  return sub_2144258B0();
}

uint64_t sub_214396E90()
{
  uint64_t v0;
  _OWORD v2[2];
  uint64_t v3;
  _OWORD v4[2];
  uint64_t v5;
  char v6;

  sub_214219DE0(v0, (uint64_t)v4);
  if ((v6 & 1) != 0)
  {
    v2[0] = v4[0];
    v2[1] = v4[1];
    v3 = v5;
    sub_214425880();
    sub_21442546C();
    return sub_214219E1C((uint64_t)v2);
  }
  else
  {
    sub_214425880();
    return sub_214425880();
  }
}

uint64_t sub_214396F1C()
{
  uint64_t v0;
  _OWORD v2[2];
  uint64_t v3;
  _OWORD v4[2];
  uint64_t v5;
  char v6;

  sub_214425874();
  sub_214219DE0(v0, (uint64_t)v4);
  if ((v6 & 1) != 0)
  {
    v2[0] = v4[0];
    v2[1] = v4[1];
    v3 = v5;
    sub_214425880();
    sub_21442546C();
    sub_214219E1C((uint64_t)v2);
  }
  else
  {
    sub_214425880();
    sub_214425880();
  }
  return sub_2144258B0();
}

void sub_214396FC4()
{
  JUMPOUT(0x2199CC944);
}

uint64_t sub_214396FD4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  _OWORD v6[2];
  uint64_t v7;
  _OWORD v8[2];
  uint64_t v9;
  char v10;
  _BYTE v11[48];

  v3 = *(_QWORD *)(a2 + 16);
  result = sub_214425880();
  if (v3)
  {
    v5 = a2 + 32;
    swift_bridgeObjectRetain();
    do
    {
      sub_214219DE0(v5, (uint64_t)v11);
      sub_214219DE0((uint64_t)v11, (uint64_t)v8);
      if ((v10 & 1) != 0)
      {
        v6[0] = v8[0];
        v6[1] = v8[1];
        v7 = v9;
        sub_214425880();
        sub_21442546C();
        sub_214219E1C((uint64_t)v6);
      }
      else
      {
        sub_214425880();
        sub_214425880();
      }
      sub_214219E50((uint64_t)v11);
      v5 += 48;
      --v3;
    }
    while (v3);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_2143970B8()
{
  uint64_t *v0;
  uint64_t v1;
  _BYTE v3[72];

  v1 = *v0;
  sub_214425874();
  swift_bridgeObjectRetain();
  sub_21420FA40((uint64_t)v3, v1);
  swift_bridgeObjectRelease();
  return sub_2144258B0();
}

uint64_t sub_21439710C(uint64_t a1)
{
  uint64_t *v1;

  return sub_214396FD4(a1, *v1);
}

uint64_t sub_214397124()
{
  uint64_t *v0;
  uint64_t v1;
  _BYTE v3[72];

  v1 = *v0;
  sub_214425874();
  swift_bridgeObjectRetain();
  sub_21420FA40((uint64_t)v3, v1);
  swift_bridgeObjectRelease();
  return sub_2144258B0();
}

uint64_t sub_214397174(uint64_t *a1, uint64_t *a2)
{
  return sub_21420F078(*a1, *a2);
}

uint64_t sub_214397180()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t result;
  _QWORD v16[2];
  _QWORD *v17;
  uint64_t v18;

  v1 = type metadata accessor for ChartContentList.Item();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (_QWORD *)((char *)v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = *v0;
  v6 = *(_QWORD *)(*v0 + 16);
  v7 = MEMORY[0x24BEE4AF8];
  if (v6)
  {
    v17 = v0;
    v18 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    sub_2141D3970(0, v6, 0);
    v8 = *(unsigned __int8 *)(v2 + 80);
    v16[1] = v5;
    v9 = v5 + ((v8 + 32) & ~v8);
    v10 = *(_QWORD *)(v2 + 72);
    v7 = v18;
    do
    {
      sub_2141FDEA0(v9, (uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for ChartContentList.Item);
      v11 = *v4;
      swift_bridgeObjectRetain();
      sub_2141DD370((uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for ChartContentList.Item);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_2141D3970(0, *(_QWORD *)(v7 + 16) + 1, 1);
        v7 = v18;
      }
      v13 = *(_QWORD *)(v7 + 16);
      v12 = *(_QWORD *)(v7 + 24);
      if (v13 >= v12 >> 1)
      {
        sub_2141D3970((char *)(v12 > 1), v13 + 1, 1);
        v7 = v18;
      }
      *(_QWORD *)(v7 + 16) = v13 + 1;
      *(_QWORD *)(v7 + 8 * v13 + 32) = v11;
      v9 += v10;
      --v6;
    }
    while (v6);
    swift_bridgeObjectRelease();
    v0 = v17;
  }
  sub_2143986E0(v7);
  swift_bridgeObjectRelease();
  sub_214398764();
  v14 = sub_214425130();
  result = swift_bridgeObjectRelease();
  v0[1] = v14;
  return result;
}

void sub_21439733C(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(*(_QWORD *)v1 + 16);
}

uint64_t (*sub_21439734C(uint64_t a1, _QWORD *a2))(_QWORD, _QWORD)
{
  uint64_t v2;
  uint64_t (*result)(_QWORD, _QWORD);

  if ((*a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*a2 < *(_QWORD *)(*(_QWORD *)v2 + 16))
  {
    type metadata accessor for ChartContentList.Item();
    return nullsub_1;
  }
  __break(1u);
  return result;
}

uint64_t *sub_2143973B0@<X0>(uint64_t *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;

  v3 = *result;
  if (*result < 0 || (v4 = result[1], result = *v2, (*v2)[2] < v4))
  {
    __break(1u);
  }
  else
  {
    v5 = v2[1];
    *a2 = v3;
    a2[1] = v4;
    a2[2] = result;
    a2[3] = v5;
    return (uint64_t *)swift_bridgeObjectRetain();
  }
  return result;
}

void sub_2143973E0(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  *a1 = 0;
  a1[1] = v2;
}

BOOL sub_2143973F0()
{
  uint64_t v0;

  return *(_QWORD *)(*(_QWORD *)v0 + 16) == 0;
}

_QWORD *sub_214397404@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  uint64_t v3;
  unint64_t v4;

  v4 = *result + a2;
  if (__OFADD__(*result, a2))
  {
    __break(1u);
  }
  else if (v4 <= *(_QWORD *)(*(_QWORD *)v3 + 16))
  {
    *a3 = v4;
    return result;
  }
  __break(1u);
  return result;
}

unint64_t sub_214397430@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v4;
  unint64_t result;
  char v7;

  result = sub_214396C84(*a1, a2, *a3, *v4);
  *(_QWORD *)a4 = result;
  *(_BYTE *)(a4 + 8) = v7 & 1;
  return result;
}

unint64_t *sub_214397468(unint64_t *result, unint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v3 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 16);
  if (*result <= v4 && v3 <= v4)
    return (unint64_t *)(v3 - *result);
  __break(1u);
  return result;
}

void sub_214397490(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;

  v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  a1[2] = 0;
}

uint64_t sub_2143974A0()
{
  uint64_t v0;

  return *(_QWORD *)(*(_QWORD *)v0 + 16);
}

size_t sub_2143974AC()
{
  uint64_t *v0;
  size_t v1;

  v1 = sub_214397770(*v0, v0[1]);
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_2143974E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;

  return sub_214396BA0(a1, a2, a3, *v3, v3[1]);
}

unint64_t sub_2143974EC()
{
  unint64_t result;

  result = qword_254D6CD80;
  if (!qword_254D6CD80)
  {
    result = MEMORY[0x2199CD934](&unk_21442FBB0, &type metadata for ChartContentList);
    atomic_store(result, (unint64_t *)&qword_254D6CD80);
  }
  return result;
}

uint64_t sub_214397530()
{
  return sub_2141D9054(&qword_254D6CD88, &qword_254D6CD90, MEMORY[0x24BEE4238]);
}

unint64_t sub_214397560()
{
  unint64_t result;

  result = qword_254D6CD98;
  if (!qword_254D6CD98)
  {
    result = MEMORY[0x2199CD934](&unk_21442FC18, &type metadata for ChartContentList);
    atomic_store(result, (unint64_t *)&qword_254D6CD98);
  }
  return result;
}

uint64_t sub_2143975A4()
{
  return sub_214398944(&qword_254D6CDA0, &qword_254D6CD90, (uint64_t (*)(void))sub_2143975D8, MEMORY[0x24BEE4218]);
}

unint64_t sub_2143975D8()
{
  unint64_t result;

  result = qword_254D6CDA8;
  if (!qword_254D6CDA8)
  {
    result = MEMORY[0x2199CD934](&unk_21442FCF8, &type metadata for ChartContentList);
    atomic_store(result, (unint64_t *)&qword_254D6CDA8);
  }
  return result;
}

uint64_t sub_214397620()
{
  return sub_214398944(&qword_254D6CDB0, &qword_254D6CD90, (uint64_t (*)(void))sub_214397654, MEMORY[0x24BEE4230]);
}

unint64_t sub_214397654()
{
  unint64_t result;

  result = qword_254D6CDB8;
  if (!qword_254D6CDB8)
  {
    result = MEMORY[0x2199CD934](&unk_21442FD58, &type metadata for ChartContentList);
    atomic_store(result, (unint64_t *)&qword_254D6CDB8);
  }
  return result;
}

uint64_t sub_214397698@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_2143987A8(MEMORY[0x24BEE4AF8]);
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_2143976C4(uint64_t a1, void (*a2)(uint64_t *__return_ptr))
{
  uint64_t v2;
  uint64_t v4;

  a2(&v4);
  v2 = swift_bridgeObjectRetain();
  sub_2143EB3F4(v2);
  sub_214397180();
  return swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for ChartContentList.Item()
{
  uint64_t result;

  result = qword_254D6CE28;
  if (!qword_254D6CE28)
    return swift_getSingletonMetadata();
  return result;
}

void *sub_21439775C(void *__src, void *__dst)
{
  return memcpy(__dst, __src, 0x120uLL);
}

size_t sub_214397770(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  size_t result;
  uint64_t v11;
  _QWORD v12[3];

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    return MEMORY[0x24BEE4AF8];
  sub_2141D8BF8(&qword_254D69808);
  v5 = *(_QWORD *)(type metadata accessor for ChartContentList.Item() - 8);
  v6 = *(_QWORD *)(v5 + 72);
  v7 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v8 = (_QWORD *)swift_allocObject();
  result = j__malloc_size(v8);
  if (v6)
  {
    if (result - v7 != 0x8000000000000000 || v6 != -1)
    {
      v8[2] = v2;
      v8[3] = 2 * ((uint64_t)(result - v7) / v6);
      v11 = sub_214396BA0((uint64_t)v12, (uint64_t)v8 + v7, v2, a1, a2);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v11 == v2)
        return (size_t)v8;
      __break(1u);
      return MEMORY[0x24BEE4AF8];
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

size_t sub_214397868(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t (*v11)(_QWORD);
  size_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v2 = type metadata accessor for DateBins(0);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_2141D8BF8(qword_254D6AD58);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DateBins.Storage(0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (uint64_t *)((char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_2141FDEA0(a1, (uint64_t)v10, v11);
  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result)
  {
    if ((_DWORD)result == 1)
    {
      v13 = *(_QWORD *)((char *)v10 + *(int *)(sub_2141D8BF8(&qword_253F11570) + 64));
      result = sub_2141DD370((uint64_t)v10, type metadata accessor for CalendarBinningUnit);
    }
    else
    {
      v14 = *(_QWORD *)(*v10 + 16);
      result = swift_bridgeObjectRelease();
      v13 = v14 - 1;
    }
  }
  else
  {
    v13 = v10[2];
  }
  if (v13 < 0)
  {
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (!v13)
    return MEMORY[0x24BEE4AF8];
  sub_2141D8BF8(&qword_254D6CDC8);
  v15 = *(_QWORD *)(sub_2141D8BF8(&qword_253F13358) - 8);
  v16 = *(_QWORD *)(v15 + 72);
  v17 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  v18 = (_QWORD *)swift_allocObject();
  result = j__malloc_size(v18);
  if (!v16)
    goto LABEL_18;
  if (result - v17 != 0x8000000000000000 || v16 != -1)
  {
    v18[2] = v13;
    v18[3] = 2 * ((uint64_t)(result - v17) / v16);
    v20 = *(unsigned __int8 *)(*(_QWORD *)(sub_2141D8BF8(&qword_253F13358) - 8) + 80);
    v21 = (uint64_t)v18 + ((v20 + 32) & ~v20);
    sub_2141FDEA0(a1, (uint64_t)v4, type metadata accessor for DateBins);
    v22 = sub_2143EB868((uint64_t)v7, v21, v13);
    sub_2141E0750((uint64_t)v7, qword_254D6AD58);
    if (v22 == v13)
      return (size_t)v18;
    __break(1u);
    return MEMORY[0x24BEE4AF8];
  }
LABEL_19:
  __break(1u);
  return result;
}

_QWORD *sub_214397AA0(uint64_t a1)
{
  return sub_214397AAC(a1, (uint64_t (*)(uint64_t *, _QWORD *, uint64_t, uint64_t))sub_2143EBAC8);
}

_QWORD *sub_214397AAC(uint64_t a1, uint64_t (*a2)(uint64_t *, _QWORD *, uint64_t, uint64_t))
{
  uint64_t v2;
  _QWORD *v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  sub_2141D8BF8(&qword_253F15D58);
  v5 = (_QWORD *)swift_allocObject();
  v6 = j__malloc_size(v5);
  v7 = v6 - 32;
  if (v6 < 32)
    v7 = v6 - 25;
  v5[2] = v2;
  v5[3] = (2 * (v7 >> 3)) | 1;
  v8 = a2(&v10, v5 + 4, v2, a1);
  swift_bridgeObjectRetain();
  sub_2141E9120();
  if (v8 != v2)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  return v5;
}

uint64_t sub_214397B98(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  size_t v4;
  _QWORD *v5;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return MEMORY[0x24BEE4AF8];
  sub_2141D8BF8(&qword_253F15D38);
  v3 = swift_allocObject();
  v4 = j__malloc_size((const void *)v3);
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = 2 * v4 - 64;
  v5 = sub_2143EBCC4(&v7, (_BYTE *)(v3 + 32), v1, a1);
  swift_bridgeObjectRetain();
  sub_2141E9120();
  if (v5 != (_QWORD *)v1)
  {
    __break(1u);
    return MEMORY[0x24BEE4AF8];
  }
  return v3;
}

void sub_214397C6C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  _QWORD *v7;
  int64_t v8;
  uint64_t v9;

  v4 = a4 >> 1;
  v5 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
LABEL_11:
    __break(1u);
    return;
  }
  if (v5)
  {
    if (v5 <= 0)
    {
      if (v4 != a3)
      {
LABEL_7:
        sub_2141D8BF8(&qword_254D690F8);
        swift_arrayInitWithCopy();
        return;
      }
    }
    else
    {
      sub_2141D8BF8(&qword_254D690F0);
      v7 = (_QWORD *)swift_allocObject();
      v8 = j__malloc_size(v7);
      v9 = v8 - 32;
      if (v8 < 32)
        v9 = v8 - 25;
      v7[2] = v5;
      v7[3] = 2 * (v9 >> 3);
      if (v4 != a3)
        goto LABEL_7;
    }
    __break(1u);
    goto LABEL_11;
  }
}

void sub_214397D48(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  size_t v11;

  v4 = a4 >> 1;
  v5 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
    goto LABEL_14;
  if (v5)
  {
    if (v5 <= 0)
    {
      if (v4 != a3)
        goto LABEL_10;
    }
    else
    {
      sub_2141D8BF8(&qword_254D690C0);
      v7 = *(_QWORD *)(type metadata accessor for AnyVectorizedRenderer(0) - 8);
      v8 = *(_QWORD *)(v7 + 72);
      v9 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
      v10 = (_QWORD *)swift_allocObject();
      v11 = j__malloc_size(v10);
      if (!v8)
      {
LABEL_15:
        __break(1u);
LABEL_16:
        __break(1u);
        return;
      }
      if (v11 - v9 == 0x8000000000000000 && v8 == -1)
        goto LABEL_16;
      v10[2] = v5;
      v10[3] = 2 * ((uint64_t)(v11 - v9) / v8);
      if (v4 != a3)
      {
LABEL_10:
        type metadata accessor for AnyVectorizedRenderer(0);
        swift_arrayInitWithCopy();
        return;
      }
    }
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
}

int64_t *sub_214397E68(int64_t *result, int64_t a2)
{
  int64_t v2;
  int64_t v4;
  int64_t *v5;
  int64_t v6;
  uint64_t v7;
  int64_t v8[3];

  v2 = a2 - (_QWORD)result;
  if (__OFSUB__(a2, result))
  {
    __break(1u);
  }
  else
  {
    if (!v2)
      return (int64_t *)MEMORY[0x24BEE4AF8];
    v4 = (int64_t)result;
    if (v2 <= 0)
    {
      v5 = (int64_t *)MEMORY[0x24BEE4AF8];
    }
    else
    {
      sub_2141D8BF8(&qword_253F15D50);
      v5 = (int64_t *)swift_allocObject();
      v6 = j__malloc_size(v5);
      v7 = v6 - 32;
      if (v6 < 32)
        v7 = v6 - 25;
      v5[2] = v2;
      v5[3] = 2 * (v7 >> 3);
    }
    result = sub_2143EBF24(v8, v5 + 4, v2, v4, a2);
    if (result == (int64_t *)v2)
      return v5;
  }
  __break(1u);
  return result;
}

uint64_t sub_214397F2C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  size_t v4;
  _QWORD *v5;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return MEMORY[0x24BEE4AF8];
  sub_2141D8BF8(&qword_253F10BD8);
  v3 = swift_allocObject();
  v4 = j__malloc_size((const void *)v3);
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = 2 * ((uint64_t)(v4 - 32) / 792);
  v5 = sub_2143EC054(&v7, (char *)(v3 + 32), v1, a1);
  swift_bridgeObjectRetain();
  sub_2141E9120();
  if (v5 != (_QWORD *)v1)
  {
    __break(1u);
    return MEMORY[0x24BEE4AF8];
  }
  return v3;
}

_QWORD *sub_214398028(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  sub_2141D8BF8(&qword_253F12020);
  v3 = (_QWORD *)swift_allocObject();
  v4 = j__malloc_size(v3);
  v5 = v4 - 32;
  if (v4 < 32)
    v5 = v4 - 17;
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 4);
  v6 = sub_2143EC278((uint64_t)&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  sub_2141E9120();
  if (v6 != v1)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  return v3;
}

uint64_t sub_21439810C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  size_t v4;
  _QWORD *v5;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return MEMORY[0x24BEE4AF8];
  sub_2141D8BF8(&qword_253F122E8);
  v3 = swift_allocObject();
  v4 = j__malloc_size((const void *)v3);
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = 2 * ((uint64_t)(v4 - 32) / 304);
  v5 = sub_2143EC478(&v7, (char *)(v3 + 32), v1, a1);
  swift_bridgeObjectRetain();
  sub_2141E9120();
  if (v5 != (_QWORD *)v1)
  {
    __break(1u);
    return MEMORY[0x24BEE4AF8];
  }
  return v3;
}

uint64_t sub_214398204(uint64_t a1, uint64_t a2)
{
  char v3;
  _OWORD v5[2];
  uint64_t v6;
  _QWORD v7[6];
  _BYTE v8[48];
  _OWORD v9[2];
  uint64_t v10;
  char v11;

  sub_214219DE0(a1, (uint64_t)v8);
  sub_214219DE0(a2, (uint64_t)v9);
  if ((v8[40] & 1) == 0)
  {
    sub_214219DE0((uint64_t)v8, (uint64_t)v7);
    if ((v11 & 1) == 0)
    {
      v3 = v7[0] == *(_QWORD *)&v9[0];
      goto LABEL_6;
    }
LABEL_8:
    sub_2141E0750((uint64_t)v8, &qword_254D695B8);
    v3 = 0;
    return v3 & 1;
  }
  sub_214219DE0((uint64_t)v8, (uint64_t)v7);
  if (v11 != 1)
  {
    sub_214219E1C((uint64_t)v7);
    goto LABEL_8;
  }
  v5[0] = v9[0];
  v5[1] = v9[1];
  v6 = v10;
  v3 = MEMORY[0x2199CCD7C](v7, v5);
  sub_214219E1C((uint64_t)v5);
  sub_214219E1C((uint64_t)v7);
LABEL_6:
  sub_214219E50((uint64_t)v8);
  return v3 & 1;
}

uint64_t sub_2143982E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  __int128 v15[3];

  v4 = sub_2141D8BF8(&qword_254D698D8);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_214424530();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_214399E1C(a1, (uint64_t)v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    sub_2141E0750((uint64_t)v6, &qword_254D698D8);
LABEL_10:
    sub_2141D8BF8(qword_254D69850);
    v11 = swift_allocObject();
    *(_OWORD *)(v11 + 16) = xmmword_214426EF0;
    sub_214219DE0(a2, v11 + 32);
    return v11;
  }
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v6, v7);
  sub_214226D28();
  sub_21442453C();
  v11 = *(_QWORD *)&v15[0];
  if (!*(_QWORD *)&v15[0])
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    goto LABEL_10;
  }
  sub_214219DE0(a2, (uint64_t)v15);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v11 = (uint64_t)sub_2142256A8(0, *(_QWORD *)(v11 + 16) + 1, 1, (char *)v11);
  v13 = *(_QWORD *)(v11 + 16);
  v12 = *(_QWORD *)(v11 + 24);
  if (v13 >= v12 >> 1)
    v11 = (uint64_t)sub_2142256A8((char *)(v12 > 1), v13 + 1, 1, (char *)v11);
  *(_QWORD *)(v11 + 16) = v13 + 1;
  sub_214399E64(v15, (_OWORD *)(v11 + 48 * v13 + 32));
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return v11;
}

uint64_t sub_2143984E0(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  _BYTE v5[152];
  _QWORD v6[19];
  uint64_t v7;
  _QWORD v8[19];

  v2 = *(_QWORD *)(a1 + 16);
  sub_2143989A8();
  result = sub_21442510C();
  v7 = result;
  if (v2)
  {
    v4 = a1 + 32;
    do
    {
      sub_2141EF6B8(v4, (uint64_t)v8);
      sub_21421C318(v8, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_21420B7DC);
      sub_2142117E0((uint64_t)v5, v8);
      sub_2141EF6B8((uint64_t)v5, (uint64_t)v6);
      sub_21421C318(v6, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2141EF5D4);
      v4 += 152;
      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

uint64_t sub_21439859C(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 16);
  sub_2141D8BF8(&qword_253F12240);
  sub_214398944(&qword_253F12248, &qword_253F12240, (uint64_t (*)(void))sub_2143989A8, MEMORY[0x24BEE12A8]);
  result = sub_21442510C();
  v7 = result;
  if (v2)
  {
    v4 = (uint64_t *)(a1 + 32);
    do
    {
      v5 = *v4++;
      swift_bridgeObjectRetain();
      sub_2142100B4(&v6, v5);
      swift_bridgeObjectRelease();
      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

uint64_t sub_21439864C(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 16);
  result = sub_21442510C();
  v8 = result;
  if (v2)
  {
    v4 = (uint64_t *)(a1 + 40);
    do
    {
      v5 = *(v4 - 1);
      v6 = *v4;
      swift_bridgeObjectRetain();
      sub_21420FCB4(&v7, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

uint64_t sub_2143986E0(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 16);
  sub_214398764();
  result = sub_21442510C();
  v7 = result;
  if (v2)
  {
    v4 = (uint64_t *)(a1 + 32);
    do
    {
      v5 = *v4++;
      swift_bridgeObjectRetain();
      sub_21420FB14(&v6, v5);
      swift_bridgeObjectRelease();
      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

unint64_t sub_214398764()
{
  unint64_t result;

  result = qword_254D6CDC0;
  if (!qword_254D6CDC0)
  {
    result = MEMORY[0x2199CD934](&unk_21442FF40, &type metadata for ChartContentList.ID);
    atomic_store(result, (unint64_t *)&qword_254D6CDC0);
  }
  return result;
}

uint64_t sub_2143987A8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;

  v2 = type metadata accessor for ChartContentList.Item();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (uint64_t *)((char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = *(_QWORD *)(a1 + 16);
  v7 = MEMORY[0x24BEE4AF8];
  if (v6)
  {
    v15 = MEMORY[0x24BEE4AF8];
    sub_2141D3970(0, v6, 0);
    v8 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v9 = *(_QWORD *)(v3 + 72);
    v7 = v15;
    do
    {
      sub_2141FDEA0(v8, (uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for ChartContentList.Item);
      v10 = *v5;
      swift_bridgeObjectRetain();
      sub_2141DD370((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for ChartContentList.Item);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_2141D3970(0, *(_QWORD *)(v7 + 16) + 1, 1);
        v7 = v15;
      }
      v12 = *(_QWORD *)(v7 + 16);
      v11 = *(_QWORD *)(v7 + 24);
      if (v12 >= v11 >> 1)
      {
        sub_2141D3970((char *)(v11 > 1), v12 + 1, 1);
        v7 = v15;
      }
      *(_QWORD *)(v7 + 16) = v12 + 1;
      *(_QWORD *)(v7 + 8 * v12 + 32) = v10;
      v8 += v9;
      --v6;
    }
    while (v6);
  }
  sub_2143986E0(v7);
  swift_bridgeObjectRelease();
  sub_214398764();
  sub_214425130();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_214398944(unint64_t *a1, uint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    v8 = sub_2141D7924(a2);
    v9 = a3();
    result = MEMORY[0x2199CD934](a4, v8, &v9);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_2143989A8()
{
  unint64_t result;

  result = qword_253F121E8;
  if (!qword_253F121E8)
  {
    result = MEMORY[0x2199CD934](&unk_21442BD14, &type metadata for SgAccessibilityDataField);
    atomic_store(result, (unint64_t *)&qword_253F121E8);
  }
  return result;
}

ValueMetadata *_s10ChildIDKeyVMa()
{
  return &_s10ChildIDKeyVN;
}

ValueMetadata *type metadata accessor for ChartContentList.ID()
{
  return &type metadata for ChartContentList.ID;
}

uint64_t destroy for ChartContentList.ID.Component(uint64_t a1)
{
  unsigned int v1;

  v1 = *(unsigned __int8 *)(a1 + 40);
  if (v1 >= 2)
    v1 = *(_DWORD *)a1 + 2;
  if (v1 == 1)
    return _s6Charts15AnyChartContentVwxx_0(a1);
  return a1;
}

uint64_t initializeWithCopy for ChartContentList.ID.Component(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  __int128 v4;
  char v5;

  v3 = *(unsigned __int8 *)(a2 + 40);
  if (v3 >= 2)
    v3 = *(_DWORD *)a2 + 2;
  if (v3 == 1)
  {
    v4 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v4;
    (**(void (***)(uint64_t))(v4 - 8))(a1);
    v5 = 1;
  }
  else
  {
    v5 = 0;
    *(_QWORD *)a1 = *(_QWORD *)a2;
  }
  *(_BYTE *)(a1 + 40) = v5;
  return a1;
}

uint64_t assignWithCopy for ChartContentList.ID.Component(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  char v7;

  if (a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 2)
      v4 = *(_DWORD *)a1 + 2;
    if (v4 == 1)
      _s6Charts15AnyChartContentVwxx_0(a1);
    v5 = *(unsigned __int8 *)(a2 + 40);
    if (v5 >= 2)
      v5 = *(_DWORD *)a2 + 2;
    if (v5 == 1)
    {
      v6 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 24) = v6;
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1, a2);
      v7 = 1;
    }
    else
    {
      v7 = 0;
      *(_QWORD *)a1 = *(_QWORD *)a2;
    }
    *(_BYTE *)(a1 + 40) = v7;
  }
  return a1;
}

uint64_t assignWithTake for ChartContentList.ID.Component(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  __int128 v6;
  char v7;

  if (a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 2)
      v4 = *(_DWORD *)a1 + 2;
    if (v4 == 1)
      _s6Charts15AnyChartContentVwxx_0(a1);
    v5 = *(unsigned __int8 *)(a2 + 40);
    if (v5 >= 2)
      v5 = *(_DWORD *)a2 + 2;
    if (v5 == 1)
    {
      v6 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v6;
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      v7 = 1;
    }
    else
    {
      v7 = 0;
      *(_QWORD *)a1 = *(_QWORD *)a2;
    }
    *(_BYTE *)(a1 + 40) = v7;
  }
  return a1;
}

ValueMetadata *type metadata accessor for ChartContentList.ID.Component()
{
  return &type metadata for ChartContentList.ID.Component;
}

uint64_t *initializeWithCopy for PointMark(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;

  v4 = *a2;
  v5 = a2[1];
  v6 = a2[2];
  v7 = a2[3];
  v8 = a2[4];
  v9 = a2[5];
  v10 = a2[6];
  v11 = a2[7];
  v22 = a2[8];
  v23 = a2[9];
  v25 = a2[10];
  v27 = a2[11];
  v29 = a2[12];
  v31 = a2[13];
  v33 = a2[14];
  v35 = a2[15];
  v37 = a2[16];
  v39 = a2[17];
  sub_2141DCFC0(*a2, v5, v6, v7, v8, v9, v10, v11, v22, v23, v25, v27, v29, v31, v33, v35, v37, v39);
  *a1 = v4;
  a1[1] = v5;
  a1[2] = v6;
  a1[3] = v7;
  a1[4] = v8;
  a1[5] = v9;
  a1[6] = v10;
  a1[7] = v11;
  a1[8] = v22;
  a1[9] = v23;
  a1[10] = v25;
  a1[11] = v27;
  a1[12] = v29;
  a1[13] = v31;
  a1[14] = v33;
  a1[15] = v35;
  a1[16] = v37;
  a1[17] = v39;
  v12 = a2[18];
  v13 = a2[19];
  v14 = a2[20];
  v15 = a2[21];
  v16 = a2[22];
  v17 = a2[23];
  v18 = a2[24];
  v19 = a2[25];
  v24 = a2[27];
  v26 = a2[28];
  v28 = a2[29];
  v30 = a2[30];
  v32 = a2[31];
  v34 = a2[32];
  v36 = a2[33];
  v38 = a2[34];
  v40 = a2[35];
  v20 = a2[26];
  sub_2141DCFC0(v12, v13, v14, v15, v16, v17, v18, v19, v20, v24, v26, v28, v30, v32, v34, v36, v38, v40);
  a1[18] = v12;
  a1[19] = v13;
  a1[20] = v14;
  a1[21] = v15;
  a1[22] = v16;
  a1[23] = v17;
  a1[24] = v18;
  a1[25] = v19;
  a1[26] = v20;
  a1[27] = v24;
  a1[28] = v26;
  a1[29] = v28;
  a1[30] = v30;
  a1[31] = v32;
  a1[32] = v34;
  a1[33] = v36;
  a1[34] = v38;
  a1[35] = v40;
  return a1;
}

uint64_t assignWithCopy for PointMark(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;

  v4 = *a2;
  v5 = a2[1];
  v6 = a2[2];
  v7 = a2[3];
  v8 = a2[4];
  v9 = a2[5];
  v10 = a2[6];
  v11 = a2[7];
  v52 = a2[8];
  v53 = a2[9];
  v55 = a2[10];
  v57 = a2[11];
  v59 = a2[12];
  v61 = a2[13];
  v63 = a2[14];
  v65 = a2[15];
  v67 = a2[16];
  v69 = a2[17];
  sub_2141DCFC0(*a2, v5, v6, v7, v8, v9, v10, v11, v52, v53, v55, v57, v59, v61, v63, v65, v67, v69);
  v12 = *(_QWORD *)a1;
  v13 = *(_QWORD *)(a1 + 8);
  v14 = *(_QWORD *)(a1 + 16);
  v15 = *(_QWORD *)(a1 + 24);
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 40);
  v18 = *(_QWORD *)(a1 + 48);
  v19 = *(_QWORD *)(a1 + 56);
  v20 = *(_OWORD *)(a1 + 64);
  v21 = *(_OWORD *)(a1 + 80);
  v22 = *(_OWORD *)(a1 + 96);
  v23 = *(_OWORD *)(a1 + 112);
  v24 = *(_QWORD *)(a1 + 128);
  v25 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v9;
  *(_QWORD *)(a1 + 48) = v10;
  *(_QWORD *)(a1 + 56) = v11;
  *(_QWORD *)(a1 + 64) = v52;
  *(_QWORD *)(a1 + 72) = v53;
  *(_QWORD *)(a1 + 80) = v55;
  *(_QWORD *)(a1 + 88) = v57;
  *(_QWORD *)(a1 + 96) = v59;
  *(_QWORD *)(a1 + 104) = v61;
  *(_QWORD *)(a1 + 112) = v63;
  *(_QWORD *)(a1 + 120) = v65;
  *(_QWORD *)(a1 + 128) = v67;
  *(_QWORD *)(a1 + 136) = v69;
  sub_2141EF040(v12, v13, v14, v15, v16, v17, v18, v19, v20, *((uint64_t *)&v20 + 1), v21, *((uint64_t *)&v21 + 1), v22, *((uint64_t *)&v22 + 1), v23, SBYTE8(v23), v24, v25);
  v26 = a2[18];
  v27 = a2[19];
  v28 = a2[20];
  v29 = a2[21];
  v30 = a2[22];
  v31 = a2[23];
  v32 = a2[24];
  v33 = a2[25];
  v54 = a2[26];
  v56 = a2[27];
  v58 = a2[28];
  v60 = a2[29];
  v62 = a2[30];
  v34 = a2[33];
  v64 = a2[31];
  v66 = a2[32];
  v35 = a2[34];
  v36 = a2[35];
  v68 = v34;
  v70 = v35;
  sub_2141DCFC0(v26, v27, v28, v29, v30, v31, v32, v33, v54, v56, v58, v60, v62, v64, v66, v34, v35, v36);
  v37 = *(_QWORD *)(a1 + 144);
  v38 = *(_QWORD *)(a1 + 152);
  v39 = *(_QWORD *)(a1 + 160);
  v40 = *(_QWORD *)(a1 + 168);
  v41 = *(_QWORD *)(a1 + 176);
  v42 = *(_QWORD *)(a1 + 184);
  v43 = *(_QWORD *)(a1 + 192);
  v44 = *(_QWORD *)(a1 + 200);
  v45 = *(_OWORD *)(a1 + 208);
  v46 = *(_OWORD *)(a1 + 224);
  v47 = *(_OWORD *)(a1 + 240);
  v48 = *(_OWORD *)(a1 + 256);
  v49 = *(_QWORD *)(a1 + 272);
  v50 = *(_QWORD *)(a1 + 280);
  *(_QWORD *)(a1 + 144) = v26;
  *(_QWORD *)(a1 + 152) = v27;
  *(_QWORD *)(a1 + 160) = v28;
  *(_QWORD *)(a1 + 168) = v29;
  *(_QWORD *)(a1 + 176) = v30;
  *(_QWORD *)(a1 + 184) = v31;
  *(_QWORD *)(a1 + 192) = v32;
  *(_QWORD *)(a1 + 200) = v33;
  *(_QWORD *)(a1 + 208) = v54;
  *(_QWORD *)(a1 + 216) = v56;
  *(_QWORD *)(a1 + 224) = v58;
  *(_QWORD *)(a1 + 232) = v60;
  *(_QWORD *)(a1 + 240) = v62;
  *(_QWORD *)(a1 + 248) = v64;
  *(_QWORD *)(a1 + 256) = v66;
  *(_QWORD *)(a1 + 264) = v68;
  *(_QWORD *)(a1 + 272) = v70;
  *(_QWORD *)(a1 + 280) = v36;
  sub_2141EF040(v37, v38, v39, v40, v41, v42, v43, v44, v45, *((uint64_t *)&v45 + 1), v46, *((uint64_t *)&v46 + 1), v47, *((uint64_t *)&v47 + 1), v48, SBYTE8(v48), v49, v50);
  return a1;
}

uint64_t assignWithTake for PointMark(uint64_t a1, _OWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  unint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  unint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;

  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  v10 = *(_QWORD *)(a1 + 48);
  v11 = *(_QWORD *)(a1 + 56);
  v12 = *(_OWORD *)(a1 + 64);
  v13 = *(_OWORD *)(a1 + 80);
  v14 = *(_OWORD *)(a1 + 96);
  v15 = *(_OWORD *)(a1 + 112);
  v16 = *(_QWORD *)(a1 + 128);
  v17 = *(_QWORD *)(a1 + 136);
  v18 = a2[1];
  *(_OWORD *)a1 = *a2;
  *(_OWORD *)(a1 + 16) = v18;
  v19 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v19;
  v20 = a2[5];
  *(_OWORD *)(a1 + 64) = a2[4];
  *(_OWORD *)(a1 + 80) = v20;
  v21 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v21;
  *(_OWORD *)(a1 + 128) = a2[8];
  sub_2141EF040(v4, v5, v6, v7, v8, v9, v10, v11, v12, *((uint64_t *)&v12 + 1), v13, *((uint64_t *)&v13 + 1), v14, *((uint64_t *)&v14 + 1), v15, SBYTE8(v15), v16, v17);
  v22 = *(_QWORD *)(a1 + 144);
  v23 = *(_QWORD *)(a1 + 152);
  v24 = *(_QWORD *)(a1 + 160);
  v25 = *(_QWORD *)(a1 + 168);
  v26 = *(_QWORD *)(a1 + 176);
  v27 = *(_QWORD *)(a1 + 184);
  v28 = *(_QWORD *)(a1 + 192);
  v29 = *(_QWORD *)(a1 + 200);
  v30 = *(_OWORD *)(a1 + 208);
  v31 = *(_OWORD *)(a1 + 224);
  v32 = *(_OWORD *)(a1 + 240);
  v33 = *(_OWORD *)(a1 + 256);
  v34 = *(_QWORD *)(a1 + 272);
  v35 = *(_QWORD *)(a1 + 280);
  v36 = a2[10];
  *(_OWORD *)(a1 + 144) = a2[9];
  *(_OWORD *)(a1 + 160) = v36;
  v37 = a2[12];
  *(_OWORD *)(a1 + 176) = a2[11];
  *(_OWORD *)(a1 + 192) = v37;
  v38 = a2[14];
  *(_OWORD *)(a1 + 208) = a2[13];
  *(_OWORD *)(a1 + 224) = v38;
  v39 = a2[16];
  *(_OWORD *)(a1 + 240) = a2[15];
  *(_OWORD *)(a1 + 256) = v39;
  *(_OWORD *)(a1 + 272) = a2[17];
  sub_2141EF040(v22, v23, v24, v25, v26, v27, v28, v29, v30, *((uint64_t *)&v30 + 1), v31, *((uint64_t *)&v31 + 1), v32, *((uint64_t *)&v32 + 1), v33, SBYTE8(v33), v34, v35);
  return a1;
}

uint64_t getEnumTagSinglePayload for PointMark(uint64_t a1, int a2)
{
  unsigned int v2;
  int v3;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 288))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = (*(_QWORD *)(a1 + 48) >> 3) & 0xFFFFFFE0 | (*(_QWORD *)(a1 + 48) >> 2) & 0x1F;
  if (v2 > 0x80000000)
    v3 = ~v2;
  else
    v3 = -1;
  return (v3 + 1);
}

double storeEnumTagSinglePayload for PointMark(uint64_t a1, int a2, int a3)
{
  double result;

  if (a2 < 0)
  {
    *(_QWORD *)(a1 + 280) = 0;
    result = 0.0;
    *(_OWORD *)(a1 + 248) = 0u;
    *(_OWORD *)(a1 + 232) = 0u;
    *(_OWORD *)(a1 + 216) = 0u;
    *(_OWORD *)(a1 + 200) = 0u;
    *(_OWORD *)(a1 + 184) = 0u;
    *(_OWORD *)(a1 + 168) = 0u;
    *(_OWORD *)(a1 + 152) = 0u;
    *(_OWORD *)(a1 + 136) = 0u;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_OWORD *)(a1 + 264) = 0u;
    *(_QWORD *)a1 = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(a1 + 288) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      result = 0.0;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)a1 = 0u;
      *(_QWORD *)(a1 + 48) = (8 * -a2) & 0x7FFFFFF00 | (4 * (-a2 & 0x1FLL));
      *(_OWORD *)(a1 + 56) = 0u;
      *(_OWORD *)(a1 + 72) = 0u;
      *(_OWORD *)(a1 + 88) = 0u;
      *(_OWORD *)(a1 + 104) = 0u;
      *(_OWORD *)(a1 + 120) = 0u;
      *(_QWORD *)(a1 + 136) = 0;
      return result;
    }
    *(_BYTE *)(a1 + 288) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ChartContentList.Item.Content()
{
  return &type metadata for ChartContentList.Item.Content;
}

uint64_t sub_214399208(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v5 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = v5 + ((v4 + 16) & ~(unint64_t)v4);
    swift_retain();
  }
  else
  {
    *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
    v40 = a2[2];
    v36 = a2[3];
    v32 = a2[5];
    v34 = a2[4];
    v29 = a2[7];
    v30 = a2[6];
    v28 = a2[8];
    v38 = a2[9];
    v7 = a2[12];
    v45 = a2[11];
    v47 = a2[10];
    v8 = a2[13];
    v9 = a2[14];
    v10 = a2[15];
    v11 = a2[16];
    v12 = a2[17];
    v13 = a2[18];
    v14 = a2[19];
    swift_bridgeObjectRetain();
    sub_2141DCFC0(v40, v36, v34, v32, v30, v29, v28, v38, v47, v45, v7, v8, v9, v10, v11, v12, v13, v14);
    *(_QWORD *)(a1 + 16) = v40;
    *(_QWORD *)(a1 + 24) = v36;
    *(_QWORD *)(a1 + 32) = v34;
    *(_QWORD *)(a1 + 40) = v32;
    *(_QWORD *)(a1 + 48) = v30;
    *(_QWORD *)(a1 + 56) = v29;
    *(_QWORD *)(a1 + 64) = v28;
    *(_QWORD *)(a1 + 72) = v38;
    *(_QWORD *)(a1 + 80) = v47;
    *(_QWORD *)(a1 + 88) = v45;
    *(_QWORD *)(a1 + 96) = v7;
    *(_QWORD *)(a1 + 104) = v8;
    *(_QWORD *)(a1 + 112) = v9;
    *(_QWORD *)(a1 + 120) = v10;
    *(_QWORD *)(a1 + 128) = v11;
    *(_QWORD *)(a1 + 136) = v12;
    *(_QWORD *)(a1 + 144) = v13;
    *(_QWORD *)(a1 + 152) = v14;
    v15 = a2[20];
    v16 = a2[21];
    v17 = a2[22];
    v18 = a2[23];
    v19 = a2[24];
    v20 = a2[25];
    v21 = a2[26];
    v22 = a2[27];
    v31 = a2[28];
    v33 = a2[29];
    v35 = a2[30];
    v37 = a2[31];
    v39 = a2[32];
    v41 = a2[33];
    v42 = a2[34];
    v43 = a2[35];
    v46 = a2[36];
    v48 = a2[37];
    sub_2141DCFC0(v15, v16, v17, v18, v19, v20, v21, v22, v31, v33, v35, v37, v39, v41, v42, v43, v46, v48);
    *(_QWORD *)(a1 + 160) = v15;
    *(_QWORD *)(a1 + 168) = v16;
    *(_QWORD *)(a1 + 176) = v17;
    *(_QWORD *)(a1 + 184) = v18;
    *(_QWORD *)(a1 + 192) = v19;
    *(_QWORD *)(a1 + 200) = v20;
    *(_QWORD *)(a1 + 208) = v21;
    *(_QWORD *)(a1 + 216) = v22;
    *(_QWORD *)(a1 + 224) = v31;
    *(_QWORD *)(a1 + 232) = v33;
    *(_QWORD *)(a1 + 240) = v35;
    *(_QWORD *)(a1 + 248) = v37;
    *(_QWORD *)(a1 + 256) = v39;
    *(_QWORD *)(a1 + 264) = v41;
    *(_QWORD *)(a1 + 272) = v42;
    *(_QWORD *)(a1 + 280) = v43;
    v23 = *(int *)(a3 + 28);
    v24 = a1 + v23;
    v25 = (uint64_t)a2 + v23;
    *(_QWORD *)(a1 + 288) = v46;
    *(_QWORD *)(a1 + 296) = v48;
    v26 = sub_214424530();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(v24, v25, v26);
  }
  return a1;
}

uint64_t sub_21439949C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  sub_2141EF040(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_OWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144), *(_QWORD *)(a1 + 152));
  sub_2141EF040(*(_QWORD *)(a1 + 160), *(_QWORD *)(a1 + 168), *(_QWORD *)(a1 + 176), *(_QWORD *)(a1 + 184), *(_QWORD *)(a1 + 192), *(_QWORD *)(a1 + 200), *(_QWORD *)(a1 + 208), *(_QWORD *)(a1 + 216), *(_QWORD *)(a1 + 224), *(_QWORD *)(a1 + 232), *(_QWORD *)(a1 + 240), *(_QWORD *)(a1 + 248), *(_OWORD *)(a1 + 256), *(_QWORD *)(a1 + 264), *(_QWORD *)(a1 + 272), *(_QWORD *)(a1 + 280), *(_QWORD *)(a1 + 288), *(_QWORD *)(a1 + 296));
  v4 = a1 + *(int *)(a2 + 28);
  v5 = sub_214424530();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t sub_214399544(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  v38 = *(_QWORD *)(a2 + 16);
  v34 = *(_QWORD *)(a2 + 24);
  v30 = *(_QWORD *)(a2 + 40);
  v32 = *(_QWORD *)(a2 + 32);
  v27 = *(_QWORD *)(a2 + 56);
  v28 = *(_QWORD *)(a2 + 48);
  v26 = *(_QWORD *)(a2 + 64);
  v36 = *(_QWORD *)(a2 + 72);
  v5 = *(_QWORD *)(a2 + 96);
  v43 = *(_QWORD *)(a2 + 88);
  v45 = *(_QWORD *)(a2 + 80);
  v6 = *(_QWORD *)(a2 + 104);
  v7 = *(_QWORD *)(a2 + 112);
  v8 = *(_QWORD *)(a2 + 120);
  v9 = *(_QWORD *)(a2 + 128);
  v10 = *(_QWORD *)(a2 + 136);
  v11 = *(_QWORD *)(a2 + 144);
  v12 = *(_QWORD *)(a2 + 152);
  swift_bridgeObjectRetain();
  sub_2141DCFC0(v38, v34, v32, v30, v28, v27, v26, v36, v45, v43, v5, v6, v7, v8, v9, v10, v11, v12);
  *(_QWORD *)(a1 + 16) = v38;
  *(_QWORD *)(a1 + 24) = v34;
  *(_QWORD *)(a1 + 32) = v32;
  *(_QWORD *)(a1 + 40) = v30;
  *(_QWORD *)(a1 + 48) = v28;
  *(_QWORD *)(a1 + 56) = v27;
  *(_QWORD *)(a1 + 64) = v26;
  *(_QWORD *)(a1 + 72) = v36;
  *(_QWORD *)(a1 + 80) = v45;
  *(_QWORD *)(a1 + 88) = v43;
  *(_QWORD *)(a1 + 96) = v5;
  *(_QWORD *)(a1 + 104) = v6;
  *(_QWORD *)(a1 + 112) = v7;
  *(_QWORD *)(a1 + 120) = v8;
  *(_QWORD *)(a1 + 128) = v9;
  *(_QWORD *)(a1 + 136) = v10;
  *(_QWORD *)(a1 + 144) = v11;
  *(_QWORD *)(a1 + 152) = v12;
  v13 = *(_QWORD *)(a2 + 160);
  v14 = *(_QWORD *)(a2 + 168);
  v15 = *(_QWORD *)(a2 + 176);
  v16 = *(_QWORD *)(a2 + 184);
  v17 = *(_QWORD *)(a2 + 192);
  v18 = *(_QWORD *)(a2 + 200);
  v19 = *(_QWORD *)(a2 + 208);
  v20 = *(_QWORD *)(a2 + 216);
  v29 = *(_QWORD *)(a2 + 224);
  v31 = *(_QWORD *)(a2 + 232);
  v33 = *(_QWORD *)(a2 + 240);
  v35 = *(_QWORD *)(a2 + 248);
  v37 = *(_QWORD *)(a2 + 256);
  v39 = *(_QWORD *)(a2 + 264);
  v40 = *(_QWORD *)(a2 + 272);
  v41 = *(_QWORD *)(a2 + 280);
  v44 = *(_QWORD *)(a2 + 288);
  v46 = *(_QWORD *)(a2 + 296);
  sub_2141DCFC0(v13, v14, v15, v16, v17, v18, v19, v20, v29, v31, v33, v35, v37, v39, v40, v41, v44, v46);
  *(_QWORD *)(a1 + 160) = v13;
  *(_QWORD *)(a1 + 168) = v14;
  *(_QWORD *)(a1 + 176) = v15;
  *(_QWORD *)(a1 + 184) = v16;
  *(_QWORD *)(a1 + 192) = v17;
  *(_QWORD *)(a1 + 200) = v18;
  *(_QWORD *)(a1 + 208) = v19;
  *(_QWORD *)(a1 + 216) = v20;
  *(_QWORD *)(a1 + 224) = v29;
  *(_QWORD *)(a1 + 232) = v31;
  *(_QWORD *)(a1 + 240) = v33;
  *(_QWORD *)(a1 + 248) = v35;
  *(_QWORD *)(a1 + 256) = v37;
  *(_QWORD *)(a1 + 264) = v39;
  *(_QWORD *)(a1 + 272) = v40;
  *(_QWORD *)(a1 + 280) = v41;
  v21 = *(int *)(a3 + 28);
  v22 = a1 + v21;
  v23 = a2 + v21;
  *(_QWORD *)(a1 + 288) = v44;
  *(_QWORD *)(a1 + 296) = v46;
  v24 = sub_214424530();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 16))(v22, v23, v24);
  return a1;
}

uint64_t sub_2143997B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v12 = *(_QWORD *)(a2 + 64);
  v11 = *(_QWORD *)(a2 + 72);
  v54 = *(_QWORD *)(a2 + 80);
  v56 = *(_QWORD *)(a2 + 88);
  v58 = *(_QWORD *)(a2 + 96);
  v60 = *(_QWORD *)(a2 + 104);
  v62 = *(_QWORD *)(a2 + 112);
  v64 = *(_QWORD *)(a2 + 120);
  v66 = *(_QWORD *)(a2 + 128);
  v68 = *(_QWORD *)(a2 + 136);
  v70 = *(_QWORD *)(a2 + 144);
  v72 = *(_QWORD *)(a2 + 152);
  sub_2141DCFC0(v5, v6, v7, v8, v9, v10, v12, v11, v54, v56, v58, v60, v62, v64, v66, v68, v70, v72);
  v13 = *(_QWORD *)(a1 + 16);
  v14 = *(_QWORD *)(a1 + 24);
  v15 = *(_QWORD *)(a1 + 32);
  v16 = *(_QWORD *)(a1 + 40);
  v17 = *(_QWORD *)(a1 + 48);
  v18 = *(_QWORD *)(a1 + 56);
  v19 = *(_QWORD *)(a1 + 64);
  v20 = *(_QWORD *)(a1 + 72);
  v21 = *(_OWORD *)(a1 + 80);
  v22 = *(_OWORD *)(a1 + 96);
  v23 = *(_OWORD *)(a1 + 112);
  v24 = *(_OWORD *)(a1 + 128);
  v25 = *(_QWORD *)(a1 + 144);
  v26 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  *(_QWORD *)(a1 + 64) = v12;
  *(_QWORD *)(a1 + 72) = v11;
  *(_QWORD *)(a1 + 80) = v54;
  *(_QWORD *)(a1 + 88) = v56;
  *(_QWORD *)(a1 + 96) = v58;
  *(_QWORD *)(a1 + 104) = v60;
  *(_QWORD *)(a1 + 112) = v62;
  *(_QWORD *)(a1 + 120) = v64;
  *(_QWORD *)(a1 + 128) = v66;
  *(_QWORD *)(a1 + 136) = v68;
  *(_QWORD *)(a1 + 144) = v70;
  *(_QWORD *)(a1 + 152) = v72;
  sub_2141EF040(v13, v14, v15, v16, v17, v18, v19, v20, v21, *((uint64_t *)&v21 + 1), v22, *((uint64_t *)&v22 + 1), v23, *((uint64_t *)&v23 + 1), v24, SBYTE8(v24), v25, v26);
  v27 = *(_QWORD *)(a2 + 160);
  v28 = *(_QWORD *)(a2 + 168);
  v29 = *(_QWORD *)(a2 + 176);
  v30 = *(_QWORD *)(a2 + 184);
  v31 = *(_QWORD *)(a2 + 192);
  v32 = *(_QWORD *)(a2 + 200);
  v33 = *(_QWORD *)(a2 + 208);
  v34 = *(_QWORD *)(a2 + 216);
  v55 = *(_QWORD *)(a2 + 224);
  v57 = *(_QWORD *)(a2 + 232);
  v59 = *(_QWORD *)(a2 + 240);
  v61 = *(_QWORD *)(a2 + 248);
  v63 = *(_QWORD *)(a2 + 256);
  v65 = *(_QWORD *)(a2 + 264);
  v67 = *(_QWORD *)(a2 + 272);
  v69 = *(_QWORD *)(a2 + 280);
  v71 = *(_QWORD *)(a2 + 288);
  v73 = *(_QWORD *)(a2 + 296);
  sub_2141DCFC0(v27, v28, v29, v30, v31, v32, v33, v34, v55, v57, v59, v61, v63, v65, v67, v69, v71, v73);
  v35 = *(_QWORD *)(a1 + 160);
  v36 = *(_QWORD *)(a1 + 168);
  v37 = *(_QWORD *)(a1 + 176);
  v38 = *(_QWORD *)(a1 + 184);
  v39 = *(_QWORD *)(a1 + 192);
  v40 = *(_QWORD *)(a1 + 200);
  v41 = *(_QWORD *)(a1 + 208);
  v42 = *(_QWORD *)(a1 + 216);
  v43 = *(_OWORD *)(a1 + 224);
  v44 = *(_OWORD *)(a1 + 240);
  v45 = *(_OWORD *)(a1 + 256);
  v46 = *(_OWORD *)(a1 + 272);
  v47 = *(_QWORD *)(a1 + 288);
  v48 = *(_QWORD *)(a1 + 296);
  *(_QWORD *)(a1 + 160) = v27;
  *(_QWORD *)(a1 + 168) = v28;
  *(_QWORD *)(a1 + 176) = v29;
  *(_QWORD *)(a1 + 184) = v30;
  *(_QWORD *)(a1 + 192) = v31;
  *(_QWORD *)(a1 + 200) = v32;
  *(_QWORD *)(a1 + 208) = v33;
  *(_QWORD *)(a1 + 216) = v34;
  *(_QWORD *)(a1 + 224) = v55;
  *(_QWORD *)(a1 + 232) = v57;
  *(_QWORD *)(a1 + 240) = v59;
  *(_QWORD *)(a1 + 248) = v61;
  *(_QWORD *)(a1 + 256) = v63;
  *(_QWORD *)(a1 + 264) = v65;
  *(_QWORD *)(a1 + 272) = v67;
  *(_QWORD *)(a1 + 280) = v69;
  *(_QWORD *)(a1 + 288) = v71;
  *(_QWORD *)(a1 + 296) = v73;
  sub_2141EF040(v35, v36, v37, v38, v39, v40, v41, v42, v43, *((uint64_t *)&v43 + 1), v44, *((uint64_t *)&v44 + 1), v45, *((uint64_t *)&v45 + 1), v46, SBYTE8(v46), v47, v48);
  v49 = *(int *)(a3 + 28);
  v50 = a1 + v49;
  v51 = a2 + v49;
  v52 = sub_214424530();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 24))(v50, v51, v52);
  return a1;
}

uint64_t sub_214399A54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  memcpy((void *)(a1 + 16), (const void *)(a2 + 16), 0x120uLL);
  v6 = *(int *)(a3 + 28);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = sub_214424530();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  return a1;
}

uint64_t sub_214399AD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  unint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  unint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  v10 = *(_QWORD *)(a1 + 48);
  v11 = *(_QWORD *)(a1 + 56);
  v12 = *(_QWORD *)(a1 + 64);
  v13 = *(_QWORD *)(a1 + 72);
  v14 = *(_OWORD *)(a1 + 80);
  v15 = *(_OWORD *)(a1 + 96);
  v16 = *(_OWORD *)(a1 + 112);
  v17 = *(_OWORD *)(a1 + 128);
  v18 = *(_QWORD *)(a1 + 144);
  v19 = *(_QWORD *)(a1 + 152);
  v20 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v20;
  v21 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v21;
  v22 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v22;
  v23 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v23;
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  sub_2141EF040(v6, v7, v8, v9, v10, v11, v12, v13, v14, *((uint64_t *)&v14 + 1), v15, *((uint64_t *)&v15 + 1), v16, *((uint64_t *)&v16 + 1), v17, SBYTE8(v17), v18, v19);
  v24 = *(_QWORD *)(a1 + 160);
  v25 = *(_QWORD *)(a1 + 168);
  v26 = *(_QWORD *)(a1 + 176);
  v27 = *(_QWORD *)(a1 + 184);
  v28 = *(_QWORD *)(a1 + 192);
  v29 = *(_QWORD *)(a1 + 200);
  v30 = *(_QWORD *)(a1 + 208);
  v31 = *(_QWORD *)(a1 + 216);
  v32 = *(_OWORD *)(a1 + 224);
  v33 = *(_OWORD *)(a1 + 240);
  v34 = *(_OWORD *)(a1 + 256);
  v35 = *(_OWORD *)(a1 + 272);
  v36 = *(_QWORD *)(a1 + 288);
  v37 = *(_QWORD *)(a1 + 296);
  v38 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v38;
  v39 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 208) = v39;
  v40 = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 240) = v40;
  v41 = *(_OWORD *)(a2 + 272);
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 272) = v41;
  *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
  sub_2141EF040(v24, v25, v26, v27, v28, v29, v30, v31, v32, *((uint64_t *)&v32 + 1), v33, *((uint64_t *)&v33 + 1), v34, *((uint64_t *)&v34 + 1), v35, SBYTE8(v35), v36, v37);
  v42 = *(int *)(a3 + 28);
  v43 = a1 + v42;
  v44 = a2 + v42;
  v45 = sub_214424530();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 40))(v43, v44, v45);
  return a1;
}

uint64_t sub_214399BF4()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_214399C00(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_214424530();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 28)], a2, v8);
  }
}

uint64_t sub_214399C7C()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_214399C88(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = sub_214424530();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 28)], a2, a2, v7);
  }
  return result;
}

uint64_t sub_214399CFC()
{
  uint64_t result;
  unint64_t v1;

  result = sub_214424530();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t sub_214399D90()
{
  unint64_t result;

  result = qword_254D6CE68;
  if (!qword_254D6CE68)
  {
    result = MEMORY[0x2199CD934](&unk_21442FE30, &type metadata for ChartContentList.ID.Component);
    atomic_store(result, (unint64_t *)&qword_254D6CE68);
  }
  return result;
}

unint64_t sub_214399DD8()
{
  unint64_t result;

  result = qword_254D6CE70;
  if (!qword_254D6CE70)
  {
    result = MEMORY[0x2199CD934](&unk_21442FEC0, &type metadata for ChartContentList.ID);
    atomic_store(result, (unint64_t *)&qword_254D6CE70);
  }
  return result;
}

uint64_t sub_214399E1C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_2141D8BF8(&qword_254D698D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

_OWORD *sub_214399E64(__int128 *a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_OWORD *)((char *)a2 + 25) = *(__int128 *)((char *)a1 + 25);
  *a2 = v2;
  a2[1] = v3;
  return a2;
}

ValueMetadata *type metadata accessor for ChartContentList.IDGenerator()
{
  return &type metadata for ChartContentList.IDGenerator;
}

unint64_t sub_214399E90()
{
  unint64_t result;

  result = qword_254D6CE78;
  if (!qword_254D6CE78)
  {
    result = MEMORY[0x2199CD934](&unk_21442FF8C, &type metadata for ChartContentList.IDGenerator);
    atomic_store(result, (unint64_t *)&qword_254D6CE78);
  }
  return result;
}

void *BarMark.init<A, B>(x:y:width:height:stacking:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, int a7@<W6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t);
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  _BYTE *v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  _BYTE v64[7];
  int v65;
  char v66;
  _BYTE v67[7];
  _BYTE v68[7];
  char v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  _BYTE v84[7];
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  _BYTE v89[7];
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  _BYTE v96[7];
  uint64_t v97;
  uint64_t v98;
  char v99;
  _BYTE v100[288];
  _QWORD v101[2];
  char v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD v109[2];
  char v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char v114;
  uint64_t v115;
  uint64_t v116;

  v41 = a7;
  v43 = a6;
  v42 = a5;
  v45 = a4;
  v44 = a3;
  v46 = a2;
  v63 = a9;
  v56 = a10;
  v14 = type metadata accessor for PlottableValue(0, a10, a12, a4);
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v40 - v16;
  v19 = type metadata accessor for PlottableValue(0, a8, a11, v18);
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)&v40 - v20;
  v59 = v22;
  v23 = *(void (**)(char *, uint64_t))(v22 + 16);
  v61 = v24;
  v62 = a1;
  v25 = a1;
  v26 = v46;
  v23(v21, v25);
  sub_2143D046C((uint64_t)v21, a8, a11, (uint64_t)v101);
  v48 = v101[0];
  v49 = v101[1];
  v27 = v102;
  v51 = v103;
  v52 = v104;
  v53 = v105;
  v54 = v106;
  v57 = v107;
  v58 = v108;
  v28 = v15;
  v29 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  v60 = v14;
  v29(v17, v26, v14);
  sub_2143D046C((uint64_t)v17, v56, a12, (uint64_t)v109);
  v30 = v109[0];
  v47 = v109[1];
  v31 = v110;
  v50 = v111;
  v32 = v112;
  v33 = v113;
  v34 = v114;
  v55 = v115;
  v56 = v116;
  if ((v114 & 0x80000000) == 0)
  {
    if (!v114)
    {
      v40 = v113;
      sub_2141EF1B0(v112, v113, 0);
      v37 = v104;
      v36 = v105;
      v70 = v48;
      v71 = v49;
      v72 = v27;
      v73 = v51;
      v74 = v52;
      v75 = v53;
      v76 = v54;
      v77 = v57;
      v78 = v58;
      v79 = v44;
      v80 = v45;
      v38 = v106;
      sub_21439A440((uint64_t)&v70);
      sub_2141EDFD8((uint64_t)&v70, (uint64_t)v100);
      sub_2141DD140(v37, v36, v38);
      (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v26, v60);
      (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v62, v61);
      v69 = v31;
      v81 = v30;
      v82 = v47;
      v83 = v31;
      *(_DWORD *)v84 = *(_DWORD *)v68;
      *(_DWORD *)&v84[3] = *(_DWORD *)&v68[3];
      v85 = v50;
      v86 = v32;
      v87 = v40;
      v88 = 0;
      *(_DWORD *)v89 = *(_DWORD *)v67;
      *(_DWORD *)&v89[3] = *(_DWORD *)&v67[3];
      v90 = v55;
      v91 = v56;
      LOBYTE(v92) = v41;
      *(_WORD *)((char *)&v92 + 1) = 1;
      HIBYTE(v92) = v66;
      *(_DWORD *)((char *)&v92 + 3) = v65;
      v93 = v37;
      v94 = v36;
      v95 = v38;
      *(_DWORD *)v96 = *(_DWORD *)v64;
      *(_DWORD *)&v96[3] = *(_DWORD *)&v64[3];
      v97 = 0;
      v98 = 0;
      v99 = -4;
      sub_2141EFEF4((uint64_t)&v81);
      v35 = &v100[144];
      goto LABEL_11;
    }
    if (v114 == 1)
      sub_2141EF1B0(v112, v113, 1);
  }
  if ((v106 & 0x80000000) == 0)
  {
    if (!v106)
    {
      sub_2141EF1B0(v104, v105, 0);
      v70 = v30;
      v71 = v47;
      v72 = v31;
      v73 = v50;
      v74 = v32;
      v75 = v33;
      v76 = v34;
      v77 = v55;
      v78 = v56;
      v79 = v42;
      v80 = v43;
      sub_21439A440((uint64_t)&v70);
      sub_2141EDFD8((uint64_t)&v70, (uint64_t)&v100[144]);
      sub_2141DD140(v32, v33, v34);
      (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v26, v60);
      (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v62, v61);
      v69 = v27;
      v81 = v48;
      v82 = v49;
      v83 = v27;
      *(_DWORD *)v84 = *(_DWORD *)v68;
      *(_DWORD *)&v84[3] = *(_DWORD *)&v68[3];
      v85 = v51;
      v86 = v52;
      v87 = v53;
      v88 = v54;
      *(_DWORD *)v89 = *(_DWORD *)v67;
      *(_DWORD *)&v89[3] = *(_DWORD *)&v67[3];
      v90 = v57;
      v91 = v58;
      LOBYTE(v92) = v41;
      *(_WORD *)((char *)&v92 + 1) = 0;
      *(_DWORD *)((char *)&v92 + 3) = v65;
      HIBYTE(v92) = v66;
      v93 = v32;
      v94 = v33;
      v95 = v34;
      *(_DWORD *)v96 = *(_DWORD *)v64;
      *(_DWORD *)&v96[3] = *(_DWORD *)&v64[3];
      v97 = 0;
      v98 = 0;
      v99 = -4;
      sub_2141EFEF4((uint64_t)&v81);
      v35 = v100;
      goto LABEL_11;
    }
    if (v106 == 1)
      sub_2141EF1B0(v104, v105, 1);
  }
  (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v26, v60);
  (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v62, v61);
  v70 = v48;
  v71 = v49;
  v72 = v27;
  v73 = v51;
  v74 = v52;
  v75 = v53;
  v76 = v54;
  v77 = v57;
  v78 = v58;
  v79 = v44;
  v80 = v45;
  sub_21439A440((uint64_t)&v70);
  sub_2141EDFD8((uint64_t)&v70, (uint64_t)v100);
  v81 = v30;
  v82 = v47;
  v83 = v31;
  v85 = v50;
  v86 = v32;
  v87 = v33;
  v88 = v34;
  v90 = v55;
  v91 = v56;
  v92 = v42;
  LOBYTE(v93) = v43;
  sub_21439A440((uint64_t)&v81);
  v35 = &v100[144];
LABEL_11:
  sub_2141EDFD8((uint64_t)&v81, (uint64_t)v35);
  return memcpy(v63, v100, 0x120uLL);
}

int8x16_t sub_21439A440(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int8x16_t result;

  v1 = *(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFFF8;
  v2 = *(_QWORD *)(a1 + 136) & 0xFFFFFFFFFFFFFF8 | 0x4000000000000000;
  *(int8x16_t *)(a1 + 48) = vandq_s8(*(int8x16_t *)(a1 + 48), (int8x16_t)xmmword_214427820);
  *(_QWORD *)(a1 + 64) = v1;
  result = vandq_s8(*(int8x16_t *)(a1 + 120), (int8x16_t)xmmword_214427830);
  *(int8x16_t *)(a1 + 120) = result;
  *(_QWORD *)(a1 + 136) = v2;
  return result;
}

void *BarMark.init<A, B>(xStart:xEnd:y:height:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10)
{
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t);
  _BYTE v25[288];
  _BYTE v26[144];
  _BYTE v27[144];
  _BYTE v28[144];
  _BYTE v29[144];
  _BYTE __src[296];

  sub_2143D8D5C(a1, a2, a6, a8, (uint64_t)v26);
  sub_2141EDFD8((uint64_t)v26, (uint64_t)v25);
  sub_2143D90EC(a3, a4, a5, a7, a10, (uint64_t)v27);
  sub_2141EDFD8((uint64_t)v27, (uint64_t)v28);
  v20 = type metadata accessor for PlottableValue(0, a7, a10, v19);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(a3, v20);
  v22 = type metadata accessor for PlottableValue(0, a6, a8, v21);
  v23 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 8);
  v23(a2, v22);
  v23(a1, v22);
  sub_2141EDFD8((uint64_t)v25, (uint64_t)v29);
  sub_2141EDFD8((uint64_t)v29, (uint64_t)__src);
  sub_2141EDFD8((uint64_t)v28, (uint64_t)&__src[144]);
  return memcpy(a9, __src, 0x120uLL);
}

void *BarMark.init<A, B>(x:yStart:yEnd:width:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10)
{
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  _BYTE v23[288];
  _BYTE v24[144];
  _BYTE v25[144];
  _BYTE v26[144];
  _BYTE v27[144];
  _BYTE __src[288];

  sub_2143D90EC(a1, a4, a5, a6, a8, (uint64_t)v24);
  sub_2141EDFD8((uint64_t)v24, (uint64_t)v23);
  sub_2143D8D5C(a2, a3, a7, a10, (uint64_t)v25);
  sub_2141EDFD8((uint64_t)v25, (uint64_t)v26);
  v18 = type metadata accessor for PlottableValue(0, a7, a10, v17);
  v19 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8);
  v19(a3, v18);
  v19(a2, v18);
  v21 = type metadata accessor for PlottableValue(0, a6, a8, v20);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(a1, v21);
  sub_2141EDFD8((uint64_t)v23, (uint64_t)v27);
  sub_2141EDFD8((uint64_t)v27, (uint64_t)__src);
  sub_2141EDFD8((uint64_t)v26, (uint64_t)&__src[144]);
  return memcpy(a9, __src, 0x120uLL);
}

void *BarMark.init<A>(x:yStart:yEnd:width:stacking:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, int a7@<W6>, int a8@<W7>, void *a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  _BYTE v22[12];
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  void *v34;
  _BYTE v35[12];
  _BYTE v36[7];
  _BYTE v37[7];
  char v38;
  _QWORD v39[36];
  uint64_t v40;
  uint64_t v41;
  char v42;
  _BYTE v43[7];
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  _BYTE v48[7];
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  _BYTE v55[7];
  uint64_t v56;
  uint64_t v57;
  char v58;
  _QWORD v59[2];
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  _BYTE v67[144];
  _BYTE v68[152];

  v23 = a8;
  v25 = a7;
  v24 = a6;
  v33 = a5;
  v32 = a4;
  v31 = a3;
  v30 = a2;
  v34 = a9;
  v12 = type metadata accessor for PlottableValue(0, a10, a11, a4);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = &v22[-v14];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v13 + 16))(&v22[-v14], a1, v12);
  sub_2143D046C((uint64_t)v15, a10, a11, (uint64_t)v59);
  v16 = v59[0];
  v17 = v60;
  v18 = v62;
  v26 = v59[1];
  v27 = v61;
  v19 = v63;
  v20 = v64;
  v28 = v65;
  v29 = v66;
  if ((v64 & 0x80000000) == 0)
  {
    if (!v64)
    {
      sub_2141EF1B0(v62, v63, 0);
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a1, v12);
      v38 = v17;
      v40 = v16;
      v41 = v26;
      v42 = v17;
      *(_DWORD *)v43 = *(_DWORD *)v37;
      *(_DWORD *)&v43[3] = *(_DWORD *)&v37[3];
      v44 = v27;
      v45 = v18;
      v46 = v19;
      v47 = 0;
      *(_DWORD *)v48 = *(_DWORD *)v36;
      *(_DWORD *)&v48[3] = *(_DWORD *)&v36[3];
      v49 = v28;
      v50 = v29;
      LOBYTE(v51) = v23;
      *(_WORD *)((char *)&v51 + 1) = 0;
      *(_DWORD *)((char *)&v51 + 3) = *(_DWORD *)&v35[7];
      HIBYTE(v51) = v35[11];
      v52 = 0;
      v53 = 0;
      v54 = -4;
      *(_DWORD *)v55 = *(_DWORD *)v35;
      *(_DWORD *)&v55[3] = *(_DWORD *)&v35[3];
      v56 = 0;
      v57 = 0;
      v58 = -4;
      sub_2141EFEF4((uint64_t)&v40);
      goto LABEL_7;
    }
    if (v64 == 1)
      sub_2141EF1B0(v62, v63, 1);
  }
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a1, v12);
  v40 = v16;
  v41 = v26;
  v42 = v17;
  v44 = v27;
  v45 = v18;
  v46 = v19;
  v47 = v20;
  v49 = v28;
  v50 = v29;
  v51 = v24;
  LOBYTE(v52) = v25;
  sub_21439A440((uint64_t)&v40);
LABEL_7:
  v39[0] = v30;
  LOBYTE(v39[1]) = v31 & 1;
  v39[2] = v32;
  LOBYTE(v39[3]) = v33 & 1;
  sub_2141EFF40((uint64_t)v39);
  sub_2141EDFD8((uint64_t)v39, (uint64_t)v67);
  sub_2141EDFD8((uint64_t)&v40, (uint64_t)v68);
  sub_2141EDFD8((uint64_t)v68, (uint64_t)v39);
  sub_2141EDFD8((uint64_t)v67, (uint64_t)&v39[18]);
  return memcpy(v34, v39, 0x120uLL);
}

void *BarMark.init<A>(xStart:xEnd:y:height:stacking:)@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, int a8@<W7>, void *a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  _BYTE v22[12];
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  void *v34;
  _BYTE v35[12];
  _BYTE v36[7];
  _BYTE v37[7];
  char v38;
  _QWORD v39[36];
  uint64_t v40;
  char v41;
  uint64_t v42;
  char v43;
  _QWORD v44[2];
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  _BYTE v52[144];
  _BYTE v53[152];

  v23 = a8;
  v25 = a7;
  v24 = a6;
  v33 = a4;
  v32 = a3;
  v31 = a2;
  v30 = a1;
  v34 = a9;
  v12 = type metadata accessor for PlottableValue(0, a10, a11, a4);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = &v22[-v14];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v13 + 16))(&v22[-v14], a5, v12);
  sub_2143D046C((uint64_t)v15, a10, a11, (uint64_t)v44);
  v16 = v44[0];
  v17 = v45;
  v18 = v47;
  v26 = v44[1];
  v27 = v46;
  v19 = v48;
  v20 = v49;
  v28 = v50;
  v29 = v51;
  if ((v49 & 0x80000000) == 0)
  {
    if (!v49)
    {
      sub_2141EF1B0(v47, v48, 0);
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a5, v12);
      v40 = v30;
      v41 = v31 & 1;
      v42 = v32;
      v43 = v33 & 1;
      sub_2141EFF40((uint64_t)&v40);
      v38 = v17;
      v39[0] = v16;
      v39[1] = v26;
      LOBYTE(v39[2]) = v17;
      *(_DWORD *)((char *)&v39[2] + 1) = *(_DWORD *)v37;
      HIDWORD(v39[2]) = *(_DWORD *)&v37[3];
      v39[3] = v27;
      v39[4] = v18;
      v39[5] = v19;
      LOBYTE(v39[6]) = 0;
      *(_DWORD *)((char *)&v39[6] + 1) = *(_DWORD *)v36;
      HIDWORD(v39[6]) = *(_DWORD *)&v36[3];
      v39[7] = v28;
      v39[8] = v29;
      LOBYTE(v39[9]) = v23;
      *(_WORD *)((char *)&v39[9] + 1) = 1;
      *(_DWORD *)((char *)&v39[9] + 3) = *(_DWORD *)&v35[7];
      HIBYTE(v39[9]) = v35[11];
      v39[10] = 0;
      v39[11] = 0;
      LOBYTE(v39[12]) = -4;
      *(_DWORD *)((char *)&v39[12] + 1) = *(_DWORD *)v35;
      HIDWORD(v39[12]) = *(_DWORD *)&v35[3];
      v39[13] = 0;
      v39[14] = 0;
      LOBYTE(v39[15]) = -4;
      sub_2141EFEF4((uint64_t)v39);
      goto LABEL_7;
    }
    if (v49 == 1)
      sub_2141EF1B0(v47, v48, 1);
  }
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a5, v12);
  v40 = v30;
  v41 = v31 & 1;
  v42 = v32;
  v43 = v33 & 1;
  sub_2141EFF40((uint64_t)&v40);
  v39[0] = v16;
  v39[1] = v26;
  LOBYTE(v39[2]) = v17;
  v39[3] = v27;
  v39[4] = v18;
  v39[5] = v19;
  LOBYTE(v39[6]) = v20;
  v39[7] = v28;
  v39[8] = v29;
  v39[9] = v24;
  LOBYTE(v39[10]) = v25;
  sub_21439A440((uint64_t)v39);
LABEL_7:
  sub_2141EDFD8((uint64_t)v39, (uint64_t)v52);
  sub_2141EDFD8((uint64_t)&v40, (uint64_t)v53);
  sub_2141EDFD8((uint64_t)v53, (uint64_t)v39);
  sub_2141EDFD8((uint64_t)v52, (uint64_t)&v39[18]);
  return memcpy(v34, v39, 0x120uLL);
}

void *BarMark.init<A>(xStart:xEnd:yStart:yEnd:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>)
{
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t);
  _BYTE v22[144];
  _BYTE v23[144];
  uint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  _BYTE __src[288];

  sub_2143D8D5C(a1, a2, a7, a8, (uint64_t)v22);
  sub_2141EDFD8((uint64_t)v22, (uint64_t)v23);
  v19 = type metadata accessor for PlottableValue(0, a7, a8, v18);
  v20 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 8);
  v20(a2, v19);
  v20(a1, v19);
  v24 = a3;
  v25 = a4 & 1;
  v26 = a5;
  v27 = a6 & 1;
  sub_2141EFF40((uint64_t)&v24);
  sub_2141EDFD8((uint64_t)v23, (uint64_t)__src);
  sub_2141EDFD8((uint64_t)&v24, (uint64_t)&__src[144]);
  return memcpy(a9, __src, 0x120uLL);
}

void *BarMark.init<A>(xStart:xEnd:yStart:yEnd:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  _BYTE v18[288];
  _BYTE v19[144];
  uint64_t v20;
  char v21;
  uint64_t v22;
  char v23;
  _BYTE v24[144];
  _BYTE v25[144];
  _BYTE __src[288];

  v20 = a1;
  v21 = a2 & 1;
  v22 = a3;
  v23 = a4 & 1;
  sub_2141EFF40((uint64_t)&v20);
  sub_2141EDFD8((uint64_t)&v20, (uint64_t)v18);
  sub_2143D8D5C(a5, a6, a7, a8, (uint64_t)v19);
  sub_2141EDFD8((uint64_t)v19, (uint64_t)v24);
  v15 = type metadata accessor for PlottableValue(0, a7, a8, v14);
  v16 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8);
  v16(a6, v15);
  v16(a5, v15);
  sub_2141EDFD8((uint64_t)v18, (uint64_t)v25);
  sub_2141EDFD8((uint64_t)v25, (uint64_t)__src);
  sub_2141EDFD8((uint64_t)v24, (uint64_t)&__src[144]);
  return memcpy(a9, __src, 0x120uLL);
}

void static BarMark._layoutChartContent(_:_:)(uint64_t a1)
{
  _BYTE v2[144];
  _BYTE v3[144];

  sub_2141EDFD8(a1, (uint64_t)v3);
  sub_2141EDFD8(a1 + 144, (uint64_t)v2);
  swift_beginAccess();
  sub_214200BC0((uint64_t)v3);
  sub_214200BC0((uint64_t)v2);
  sub_214202388((uint64_t)v3);
  sub_214202388((uint64_t)v2);
}

uint64_t static BarMark._renderChartContent(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  double *v21;
  uint64_t v22;
  double *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t result;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  double v33;
  double v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t, uint64_t);
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t *v70;
  int *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  int *v94;
  double v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  double *v99;
  double *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t *v104;
  double v105;
  double v106;
  double v107;
  double v108;
  double v109;
  double v110;
  double v111;
  double v112;
  _BYTE v113[144];
  _BYTE v114[152];
  CGRect v115;
  CGRect v116;

  v104 = a3;
  v5 = type metadata accessor for SgShapeStyle();
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v93 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_2141D8BF8(&qword_253F134C8);
  MEMORY[0x24BDAC7A8](v8);
  v97 = (uint64_t)&v93 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_214424308();
  v103 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v98 = (char *)&v93 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_2141D8BF8(&qword_253F14280);
  MEMORY[0x24BDAC7A8](v12);
  v99 = (double *)((char *)&v93 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = type metadata accessor for SgGroup(0);
  MEMORY[0x24BDAC7A8](v14);
  v100 = (double *)((char *)&v93 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v102 = type metadata accessor for ChartContentRenderContext.Environment(0);
  MEMORY[0x24BDAC7A8](v102);
  v17 = (char *)&v93 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = (int *)type metadata accessor for SgRectangle(0);
  v19 = MEMORY[0x24BDAC7A8](v18);
  v21 = (double *)((char *)&v93 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v19);
  v23 = (double *)((char *)&v93 - v22);
  sub_2141EDFD8(a1, (uint64_t)v114);
  sub_2141EDFD8(a1 + 144, (uint64_t)v113);
  v24 = *(_QWORD *)(a2 + 8);
  if ((*(_BYTE *)a2 & 1) != 0)
  {
    swift_retain();
    v25 = sub_21439B6EC((uint64_t)v114);
    result = swift_release();
LABEL_31:
    v70 = v104;
    goto LABEL_34;
  }
  v93 = v7;
  v27 = v24 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_environment;
  swift_beginAccess();
  v28 = *(_BYTE *)(v27 + 168);
  v101 = v10;
  v94 = (int *)v14;
  if ((v28 & 1) != 0)
  {
    v29 = qword_253F10930;
    swift_retain();
    if (v29 != -1)
      swift_once();
    v95 = *(double *)&qword_253F1C940;
  }
  else
  {
    v95 = *(double *)(v27 + 160);
    swift_retain();
  }
  sub_2141FF3BC((uint64_t)v114);
  sub_2141FF3BC((uint64_t)v113);
  v30 = *(_QWORD *)(v24 + 16);
  v31 = *(_QWORD *)(v30 + 24);
  if (v106 >= v105)
    v32 = v105;
  else
    v32 = v106;
  if (v110 >= v109)
    v33 = v109;
  else
    v33 = v110;
  v34 = vabdd_f64(v106, v105);
  v35 = vabdd_f64(v110, v109);
  v96 = v27;
  sub_2141FDEA0(v27, (uint64_t)v17, type metadata accessor for ChartContentRenderContext.Environment);
  sub_2141FFC88((uint64_t)v17, (uint64_t)v23 + v18[11]);
  sub_214424404();
  v37 = v36;
  v39 = v38;
  v41 = v40;
  v43 = v42;
  v44 = *MEMORY[0x24BDEEB68];
  v45 = *(void (**)(char *, uint64_t, uint64_t))(v103 + 104);
  v45((char *)v23 + v18[10], v44, v101);
  *(_QWORD *)v23 = v31;
  v23[1] = v32;
  v23[2] = v33;
  v23[3] = v34;
  v23[4] = v35;
  *((_QWORD *)v23 + 5) = v37;
  *((_QWORD *)v23 + 6) = v39;
  *((_QWORD *)v23 + 7) = v41;
  *((_QWORD *)v23 + 8) = v43;
  *(double *)((char *)v23 + v18[12]) = 0.0;
  if (v95 <= 2.22044605e-16)
  {
    v100 = *(double **)(v30 + 24);
    v74 = v96;
    sub_2141FDEA0(v96, (uint64_t)v17, type metadata accessor for ChartContentRenderContext.Environment);
    v75 = (uint64_t)v93;
    sub_2141FFC88((uint64_t)v17, (uint64_t)v93);
    v103 = *(_QWORD *)(v74 + *(int *)(v102 + 64));
    sub_214424404();
    v77 = v76;
    v79 = v78;
    v81 = v80;
    v83 = v82;
    swift_release();
    sub_21439BFF8((uint64_t)v23);
    v45((char *)v21 + v18[10], v44, v101);
    *(_QWORD *)v21 = v100;
    v21[1] = v32;
    v21[2] = v33;
    v21[3] = v34;
    v21[4] = v35;
    *((_QWORD *)v21 + 5) = v77;
    *((_QWORD *)v21 + 6) = v79;
    *((_QWORD *)v21 + 7) = v81;
    *((_QWORD *)v21 + 8) = v83;
    sub_2141FE1E0(v75, (uint64_t)v21 + v18[11], (uint64_t (*)(_QWORD))type metadata accessor for SgShapeStyle);
    *(_QWORD *)((char *)v21 + v18[12]) = v103;
    v84 = swift_allocBox();
    result = sub_2141FE1E0((uint64_t)v21, v85, type metadata accessor for SgRectangle);
    v25 = v84 | 0x4000000000000000;
    goto LABEL_31;
  }
  v46 = v107;
  v47 = v108;
  v48 = v111;
  v49 = v112;
  sub_214206AD0((uint64_t)v114);
  sub_214206AD0((uint64_t)v113);
  if (v47 >= v46)
    v50 = v47;
  else
    v50 = v46;
  if (v47 < v46)
    v46 = v47;
  if (v49 >= v48)
    v51 = v49;
  else
    v51 = v48;
  if (v49 >= v48)
    v52 = v48;
  else
    v52 = v49;
  v53 = v50 - v46;
  v54 = v51 - v52;
  v115.origin.x = v46;
  v115.origin.y = v52;
  v115.size.width = v53;
  v115.size.height = v54;
  CGRectGetWidth(v115);
  v116.origin.x = v46;
  v116.origin.y = v52;
  v116.size.width = v53;
  v116.size.height = v54;
  CGRectGetHeight(v116);
  sub_214424404();
  v56 = v55;
  v58 = v57;
  v60 = v59;
  v62 = v61;
  v63 = *(_QWORD *)(*(_QWORD *)(v30 + 16) + 32);
  swift_retain();
  swift_retain();
  v95 = COERCE_DOUBLE(sub_21421F450(0, v63));
  swift_release();
  swift_release();
  sub_2141D8BF8(&qword_253F15D40);
  v64 = swift_allocObject();
  *(_OWORD *)(v64 + 16) = xmmword_214426EF0;
  v65 = swift_allocBox();
  sub_2141FDEA0((uint64_t)v23, v66, type metadata accessor for SgRectangle);
  v93 = (char *)v64;
  *(_QWORD *)(v64 + 32) = v65 | 0x4000000000000000;
  v67 = v97;
  sub_2141EEE24(v96 + *(int *)(v102 + 44), v97);
  v68 = v103;
  v69 = v101;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v103 + 48))(v67, 1, v101) == 1)
  {
    v70 = v104;
    v71 = v94;
    v72 = v98;
    if (qword_253F121C8 != -1)
      swift_once();
    v73 = sub_2141EEE6C(v69, (uint64_t)qword_253F1C998);
    (*(void (**)(char *, uint64_t, uint64_t))(v68 + 16))(v72, v73, v69);
    sub_2141EEE84(v67);
  }
  else
  {
    v72 = v98;
    (*(void (**)(char *, uint64_t, uint64_t))(v68 + 32))(v98, v67, v69);
    v70 = v104;
    v71 = v94;
  }
  v86 = v68;
  v87 = (uint64_t)v99;
  *v99 = v46;
  *(double *)(v87 + 8) = v52;
  *(double *)(v87 + 16) = v53;
  *(double *)(v87 + 24) = v54;
  *(_QWORD *)(v87 + 32) = v56;
  *(_QWORD *)(v87 + 40) = v58;
  *(_QWORD *)(v87 + 48) = v60;
  *(_QWORD *)(v87 + 56) = v62;
  v88 = type metadata accessor for SgClipRect(0);
  (*(void (**)(uint64_t, char *, uint64_t))(v86 + 32))(v87 + *(int *)(v88 + 24), v72, v69);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v88 - 8) + 56))(v87, 0, 1, v88);
  v89 = *(_QWORD *)(v96 + *(int *)(v102 + 64));
  swift_release();
  sub_21439BFF8((uint64_t)v23);
  v90 = (uint64_t)v100;
  v91 = (uint64_t)v93;
  *v100 = v95;
  *(_QWORD *)(v90 + 8) = v91;
  sub_2141E801C(v87, v90 + v71[6], &qword_253F14280);
  *(_QWORD *)(v90 + v71[7]) = 0x3FF0000000000000;
  *(_QWORD *)(v90 + v71[8]) = v89;
  *(_QWORD *)(v90 + v71[9]) = MEMORY[0x24BEE4AF8];
  *(_BYTE *)(v90 + v71[10]) = 0;
  v25 = swift_allocBox();
  result = sub_2141FE1E0(v90, v92, type metadata accessor for SgGroup);
LABEL_34:
  *v70 = v25;
  return result;
}

unint64_t sub_21439B6EC(uint64_t a1)
{
  uint64_t v1;
  _OWORD *v2;
  _OWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  _BYTE *v60;
  double v61;
  double v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int *v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  _OWORD *v82;
  unsigned int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD __src[76];
  _BYTE v88[152];
  _BYTE v89[152];
  _BYTE v90[16];
  uint64_t v91;
  _BYTE v92[168];
  _BYTE v93[32];
  double v94;
  double v95;
  char v96[8];
  uint64_t v97;
  uint64_t v98;
  char v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char v103;
  __int128 v104;
  char v105;
  _BYTE v106[144];
  _BYTE v107[152];
  _BYTE v108[152];
  uint64_t v109[11];
  char v110[152];
  double v111;
  double v112;
  double v113;
  double v114;
  double v115;
  double v116;
  char v117[152];
  _BYTE v118[89];
  _BYTE v119[144];
  uint64_t v120;
  uint64_t v121;
  char v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char v126;
  __int128 v127;
  _BYTE v128[144];
  _BYTE v129[144];
  __int128 v130;
  char v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char v135;
  __int128 v136;
  _BYTE v137[144];
  _BYTE __dst[258];
  _BYTE v139[144];
  _BYTE v140[144];
  _BYTE v141[144];
  _BYTE v142[152];

  v1 = MEMORY[0x24BDAC7A8](a1);
  v3 = v2;
  v5 = v4;
  v6 = v1;
  sub_2141EDFD8(v1, (uint64_t)v119);
  v7 = v141;
  sub_2141EDFD8((uint64_t)v119, (uint64_t)v141);
  sub_2141EDFD8(v5, (uint64_t)v118);
  v8 = v142;
  sub_2141EDFD8((uint64_t)v118, (uint64_t)v142);
  v85 = v6;
  sub_2141EDFD8(v6, (uint64_t)v128);
  v9 = sub_2141EF1D0((uint64_t)v128);
  if (v9 == 5 || v9 == 3)
  {
    sub_2141EF754((uint64_t)v128);
    v10 = 0;
    v11 = 1;
    v12 = 3;
    v7 = v142;
    v8 = v141;
  }
  else
  {
    v11 = 0;
    v12 = 2;
    v10 = 1;
  }
  sub_2141EDFD8((uint64_t)v8, (uint64_t)v139);
  sub_2141EDFD8((uint64_t)v7, (uint64_t)v140);
  sub_2141EDFD8((uint64_t)v139, (uint64_t)v137);
  sub_2141EDFD8((uint64_t)v140, (uint64_t)v129);
  swift_beginAccess();
  memcpy(__dst, v3 + 5, sizeof(__dst));
  v83 = v11;
  sub_21420073C(v11, (uint64_t)v109);
  sub_2141E801C((uint64_t)v109, (uint64_t)&v120, &qword_253F12428);
  if (v123)
  {
    v13 = v120;
    v14 = v121;
    v15 = v124;
    v16 = v125;
    v17 = v122 & 1;
    v96[0] = v12;
    v97 = v120;
    v98 = v121;
    v99 = v122 & 1;
    v100 = v123;
    v101 = v124;
    v102 = v125;
    v18 = v126;
    v103 = v126;
    v104 = v127;
    v105 = 3;
    sub_2141EF6F4((uint64_t)v96);
    sub_21439C044(v85);
    sub_21439C044(v5);
    sub_2141DD130(v13, v14, v17);
    swift_bridgeObjectRetain();
    sub_2141DD140(v15, v16, v18);
    sub_21439C2F4(v109);
    sub_2141EF6B8((uint64_t)v96, (uint64_t)__src);
    nullsub_1(__src, v19);
  }
  else
  {
    sub_2141EF22C((uint64_t)__src);
    sub_21439C044(v85);
    sub_21439C044(v5);
  }
  sub_2141E801C((uint64_t)__src, (uint64_t)v108, &qword_253F13428);
  sub_2141D8BF8(&qword_253F13588);
  v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_2144271D0;
  sub_2143036C0(v10, (uint64_t)v137);
  sub_2141E801C((uint64_t)v110, v20 + 32, &qword_253F13428);
  v82 = v3;
  v21 = (char *)v3 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_environment;
  swift_beginAccess();
  v78 = (int *)type metadata accessor for ChartContentRenderContext.Environment(0);
  v80 = v21;
  v22 = (uint64_t *)&v21[v78[18]];
  v23 = *v22;
  v24 = v22[1];
  v26 = v22[2];
  v25 = v22[3];
  v28 = v22[4];
  v27 = v22[5];
  v30 = v22[6];
  v29 = v22[7];
  v31 = v22[8];
  if (v25)
  {
    v96[0] = 4;
    v97 = v23;
    v98 = v24;
    v99 = v26 & 1;
    v100 = v25;
    v101 = v28;
    v102 = v27;
    v103 = v30;
    *(_QWORD *)&v104 = v29;
    *((_QWORD *)&v104 + 1) = v31;
    v105 = 3;
    sub_2141EF6F4((uint64_t)v96);
    sub_2141EF6B8((uint64_t)v96, (uint64_t)__src);
    nullsub_1(__src, v32);
  }
  else
  {
    sub_2141EF22C((uint64_t)__src);
  }
  sub_2141E801C((uint64_t)__src, (uint64_t)v107, &qword_253F13428);
  sub_2141E801C((uint64_t)v107, v20 + 184, &qword_253F13428);
  sub_2141EF260(v23, v24, v26, v25, v28, v27, v30);
  v79 = sub_2142E91DC(v20);
  v81 = v33;
  swift_setDeallocating();
  sub_2141D8BF8(&qword_253F13428);
  swift_arrayDestroy();
  swift_deallocClassInstance();
  sub_2141EDFD8((uint64_t)v140, (uint64_t)v106);
  v34 = sub_2141EF1D0((uint64_t)v106);
  if (v34 == 2)
  {
    v45 = sub_2141EF754((uint64_t)v106);
    v47 = *(_QWORD *)(v45 + 8);
    v48 = *(_BYTE *)(v45 + 16);
    v50 = *(_QWORD *)(v45 + 24);
    v49 = *(_QWORD *)(v45 + 32);
    v51 = *(_QWORD *)(v45 + 40);
    *(_QWORD *)&v130 = *(_QWORD *)v45;
    v46 = v130;
    *((_QWORD *)&v130 + 1) = v47;
    v131 = v48;
    v132 = v50;
    v133 = v49;
    v134 = v51;
    v135 = *(_BYTE *)(v45 + 48);
    v52 = v135;
    v136 = *(_OWORD *)(v45 + 56);
    sub_2141DD130(v130, v47, v48);
    swift_bridgeObjectRetain();
    sub_2141DD140(v49, v51, v52);
    v35 = (uint64_t)v82;
    swift_retain();
    sub_2141DD130(v46, v47, v48);
    swift_bridgeObjectRetain();
    sub_2141DD140(v49, v51, v52);
    sub_214205DD8(v83, (_OWORD *)v35, v35, v83, &v130, (uint64_t)v96);
    sub_2141ED0BC(v46, v47, v48);
    swift_bridgeObjectRelease();
    sub_2141EF1B0(v49, v51, v52);
    sub_2141E801C((uint64_t)v96, (uint64_t)__src, qword_253F12398);
    sub_2141E801C((uint64_t)__src, (uint64_t)v92, qword_253F12398);
    v36 = v5;
  }
  else
  {
    v36 = v5;
    v35 = (uint64_t)v82;
    if (v34)
    {
      sub_2141EF1DC((uint64_t)__src);
      sub_2141E801C((uint64_t)__src, (uint64_t)v93, qword_253F12398);
      v53 = v83;
      goto LABEL_18;
    }
    v37 = sub_2141EF754((uint64_t)v106);
    v39 = *(_QWORD *)(v37 + 8);
    v40 = *(_BYTE *)(v37 + 16);
    v42 = *(_QWORD *)(v37 + 24);
    v41 = *(_QWORD *)(v37 + 32);
    v43 = *(_QWORD *)(v37 + 40);
    *(_QWORD *)&v130 = *(_QWORD *)v37;
    v38 = v130;
    *((_QWORD *)&v130 + 1) = v39;
    v131 = v40;
    v132 = v42;
    v133 = v41;
    v134 = v43;
    v135 = *(_BYTE *)(v37 + 48);
    v44 = v135;
    v136 = *(_OWORD *)(v37 + 56);
    sub_2141DD130(v130, v39, v40);
    swift_bridgeObjectRetain();
    sub_2141DD140(v41, v43, v44);
    sub_2141DD130(v38, v39, v40);
    swift_bridgeObjectRetain();
    sub_2141DD140(v41, v43, v44);
    swift_retain();
    sub_214205DD8(v83, v82, (uint64_t)v82, v83, &v130, (uint64_t)v96);
    sub_2141ED0BC(v38, v39, v40);
    swift_bridgeObjectRelease();
    sub_2141EF1B0(v41, v43, v44);
    sub_2141E801C((uint64_t)v96, (uint64_t)__src, qword_253F12398);
    sub_2141E801C((uint64_t)__src, (uint64_t)v92, qword_253F12398);
  }
  sub_2141E801C((uint64_t)v92, (uint64_t)__src, qword_253F12398);
  v53 = v83;
  if (sub_2141EF214((uint64_t)__src) == 1)
  {
    sub_2141E801C((uint64_t)v92, (uint64_t)v93, qword_253F12398);
LABEL_18:
    sub_2141FF3BC(v85);
    v54 = v111;
    v55 = v112;
    sub_2141FF3BC(v36);
    if (v55 >= v54)
      v56 = v54;
    else
      v56 = v55;
    if (v114 >= v113)
      v57 = v113;
    else
      v57 = v114;
    v58 = vabdd_f64(v55, v54);
    v59 = vabdd_f64(v114, v113);
    v60 = v93;
    goto LABEL_32;
  }
  sub_2141FF3BC(v85);
  v61 = v115;
  v62 = v116;
  sub_2141FF3BC(v36);
  if (v62 >= v61)
    v56 = v61;
  else
    v56 = v62;
  if (v95 >= v94)
    v57 = v94;
  else
    v57 = v95;
  v58 = vabdd_f64(v62, v61);
  v59 = vabdd_f64(v95, v94);
  v60 = v92;
LABEL_32:
  sub_2141E801C((uint64_t)v60, (uint64_t)v96, qword_253F12398);
  v84 = *(_QWORD *)(*(_QWORD *)(v35 + 16) + 24);
  v63 = (uint64_t *)&v80[v78[26]];
  v64 = v63[1];
  v86 = *v63;
  v65 = v78[25];
  v66 = (uint64_t *)&v80[v78[24]];
  v67 = *v66;
  v68 = v66[1];
  v70 = v66[2];
  v69 = v66[3];
  v71 = *(_QWORD *)&v80[v65];
  v72 = *(_QWORD *)&v80[v65 + 8];
  v73 = *(_QWORD *)&v80[v65 + 16];
  v74 = *(_QWORD *)&v80[v65 + 24];
  swift_bridgeObjectRetain();
  sub_2141EF2B4(v67, v68, v70, v69);
  sub_2141EF2B4(v71, v72, v73, v74);
  sub_2143036C0(v53, (uint64_t)v129);
  sub_2141E801C((uint64_t)v117, (uint64_t)v89, &qword_253F13428);
  sub_2141E801C((uint64_t)v96, (uint64_t)v90, qword_253F12398);
  if (sub_2141EF214((uint64_t)v90) == 1)
  {
    sub_2141EF22C((uint64_t)__src);
  }
  else
  {
    sub_2141EF6B8((uint64_t)&v91, (uint64_t)__src);
    nullsub_1(__src, v75);
  }
  sub_2141E801C((uint64_t)__src, (uint64_t)v88, &qword_253F13428);
  __src[0] = v84;
  *(double *)&__src[1] = v56;
  *(double *)&__src[2] = v57;
  *(double *)&__src[3] = v58;
  *(double *)&__src[4] = v59;
  __src[5] = v86;
  __src[6] = v64;
  __src[7] = v67;
  __src[8] = v68;
  __src[9] = v70;
  __src[10] = v69;
  __src[11] = v71;
  __src[12] = v72;
  __src[13] = v73;
  __src[14] = v74;
  __src[15] = v79;
  sub_2141E801C((uint64_t)v89, (uint64_t)&__src[16], &qword_253F13428);
  __src[35] = v81;
  sub_2141E801C((uint64_t)v88, (uint64_t)&__src[36], &qword_253F13428);
  sub_2141E801C((uint64_t)v108, (uint64_t)&__src[55], &qword_253F13428);
  LOWORD(__src[74]) = 256;
  __src[75] = 0;
  v76 = swift_allocObject();
  memcpy((void *)(v76 + 16), __src, 0x260uLL);
  return v76 | 0xC000000000000000;
}

uint64_t sub_21439BFF8(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for SgRectangle(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

ValueMetadata *type metadata accessor for BarMark()
{
  return &type metadata for BarMark;
}

uint64_t sub_21439C044(uint64_t a1)
{
  sub_2141DCFC0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_OWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136));
  return a1;
}

uint64_t sub_21439C09C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;

  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v0 + 96))
  {
    sub_2141ED0BC(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_BYTE *)(v0 + 88));
    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(v0 + 128))
  {
    sub_2141ED0BC(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112), *(_BYTE *)(v0 + 120));
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  v1 = *(_QWORD *)(v0 + 144);
  v2 = *(_QWORD *)(v0 + 168);
  v3 = *(_QWORD *)(v0 + 200);
  v4 = *(_QWORD *)(v0 + 208);
  v5 = *(_QWORD *)(v0 + 216);
  v6 = *(_QWORD *)(v0 + 240);
  v7 = *(_QWORD *)(v0 + 272);
  v8 = *(_QWORD *)(v0 + 288);
  if (v6 > 1
    || (v1 & 0xFFFFFFFFFFFFFFF8) != 0x7FFFFFFF8
    || v2 > 1
    || (v5 | v4) & 0xF000000000000007 | v3 & 0xFFFFFFFFFFFFFF7CLL
    || (v8 | *(_QWORD *)(v0 + 280)) & 0xF000000000000007 | v7 & 0xFFFFFFFFFFFFFF7CLL)
  {
    sub_2141EF5D4(v1, *(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 160), v2, *(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 192), v3, v4, v5, *(_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 232), v6, *(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 256), *(_QWORD *)(v0 + 264), v7, *(_QWORD *)(v0 + 280), v8);
  }
  swift_bridgeObjectRelease();
  v9 = *(_QWORD *)(v0 + 304);
  v10 = *(_QWORD *)(v0 + 328);
  v11 = *(_QWORD *)(v0 + 360);
  v12 = *(_QWORD *)(v0 + 368);
  v13 = *(_QWORD *)(v0 + 376);
  v14 = *(_QWORD *)(v0 + 400);
  v15 = *(_QWORD *)(v0 + 432);
  v16 = *(_QWORD *)(v0 + 448);
  if (v14 > 1
    || (v9 & 0xFFFFFFFFFFFFFFF8) != 0x7FFFFFFF8
    || v10 > 1
    || (v13 | v12) & 0xF000000000000007 | v11 & 0xFFFFFFFFFFFFFF7CLL
    || (v16 | *(_QWORD *)(v0 + 440)) & 0xF000000000000007 | v15 & 0xFFFFFFFFFFFFFF7CLL)
  {
    sub_2141EF5D4(v9, *(_QWORD *)(v0 + 312), *(_QWORD *)(v0 + 320), v10, *(_QWORD *)(v0 + 336), *(_QWORD *)(v0 + 344), *(_QWORD *)(v0 + 352), v11, v12, v13, *(_QWORD *)(v0 + 384), *(_QWORD *)(v0 + 392), v14, *(_QWORD *)(v0 + 408), *(_QWORD *)(v0 + 416), *(_QWORD *)(v0 + 424), v15, *(_QWORD *)(v0 + 440), v16);
  }
  v17 = *(_QWORD *)(v0 + 456);
  v18 = *(_QWORD *)(v0 + 480);
  v19 = *(_QWORD *)(v0 + 512);
  v20 = *(_QWORD *)(v0 + 520);
  v21 = *(_QWORD *)(v0 + 528);
  v22 = *(_QWORD *)(v0 + 552);
  v23 = *(_QWORD *)(v0 + 584);
  v24 = *(_QWORD *)(v0 + 600);
  if (v22 > 1
    || (v17 & 0xFFFFFFFFFFFFFFF8) != 0x7FFFFFFF8
    || v18 > 1
    || (v21 | v20) & 0xF000000000000007 | v19 & 0xFFFFFFFFFFFFFF7CLL
    || (v24 | *(_QWORD *)(v0 + 592)) & 0xF000000000000007 | v23 & 0xFFFFFFFFFFFFFF7CLL)
  {
    sub_2141EF5D4(v17, *(_QWORD *)(v0 + 464), *(_QWORD *)(v0 + 472), v18, *(_QWORD *)(v0 + 488), *(_QWORD *)(v0 + 496), *(_QWORD *)(v0 + 504), v19, v20, v21, *(_QWORD *)(v0 + 536), *(_QWORD *)(v0 + 544), v22, *(_QWORD *)(v0 + 560), *(_QWORD *)(v0 + 568), *(_QWORD *)(v0 + 576), v23, *(_QWORD *)(v0 + 592), v24);
  }
  return swift_deallocObject();
}

uint64_t *sub_21439C2F4(uint64_t *a1)
{
  sub_21421C6D4(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6]);
  return a1;
}

uint64_t RulePlot<A>.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2142D7304(v2, v4, (uint64_t)v7);
  sub_2142D6BB0((uint64_t)v7, v4, a2);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

void sub_21439C3E0()
{
  type metadata accessor for XYRenderer();
}

void sub_21439C434(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;

  v13 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v15 = (char *)&a9 - v14;
  v17 = type metadata accessor for VectorizedRulePlotContent(0, v11, v9, v16);
  MEMORY[0x24BDAC7A8](v17);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v10, a1);
  sub_21439C514();
}

uint64_t sub_21439C4D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v4, v5);
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(v3 + 32))(*(_QWORD *)(v6 - 136), v1, v0);
}

void sub_21439C514()
{
  type metadata accessor for XYRenderer();
}

uint64_t sub_21439C548(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v2 + 24) = a1;
  *(_QWORD *)(v2 + 32) = &off_24D1814F0;
  v4 = sub_2141D8DD8((uint64_t *)v2);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 32))(v4, v1, a1);
  v5 = type metadata accessor for RulesRenderer(0);
  *(_OWORD *)(v2 + 40) = 0u;
  *(_OWORD *)(v2 + 56) = 0u;
  v6 = v2 + *(int *)(v5 + 32);
  v7 = type metadata accessor for ChartContentRenderContext.Environment(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
}

uint64_t sub_21439C5C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return RulePlot<A>.body.getter(a1, a2);
}

void RulePlot.init<A, B, C>(_:xStart:xEnd:y:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[3];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v29 = a8;
  v30 = a1;
  v27 = a4;
  v28 = a9;
  v31 = a3;
  v32 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v18[2] = a7;
  v18[1] = a11;
  v26 = type metadata accessor for BoundingSectionSpecification(0, AssociatedTypeWitness, a7, a11);
  MEMORY[0x24BDAC7A8](v26);
  v24 = (char *)v18 - v15;
  v19 = type metadata accessor for BoundingSectionSpecification(0, AssociatedTypeWitness, a6, a10);
  v16 = MEMORY[0x24BDAC7A8](v19);
  v25 = *(_QWORD *)(a5 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v22 = (char *)v18 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = a5;
  v33 = a5;
  v34 = a6;
  v20 = a6;
  v21 = a10;
  v35 = a7;
  v36 = v29;
  v37 = a10;
  v38 = a11;
  type metadata accessor for XYRenderer();
}

void sub_21439C72C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, _QWORD, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t TupleTypeMetadata2;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  MEMORY[0x24BDAC7A8](a1);
  *(_QWORD *)(v16 - 216) = (char *)&a9 - v17;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v14 + 16))(v13, *(_QWORD *)(v16 - 160), v9);
  v18 = type metadata accessor for PlottableProjection(255, v10, v11, v15);
  v19 = v12 + *(int *)(swift_getTupleTypeMetadata2() + 48);
  v20 = *(_QWORD *)(v18 - 8);
  *(_QWORD *)(v16 - 224) = v20;
  v21 = *(void (**)(uint64_t, _QWORD, uint64_t))(v20 + 16);
  v21(v12, *(_QWORD *)(v16 - 144), v18);
  v21(v19, *(_QWORD *)(v16 - 152), v18);
  swift_storeEnumTagMultiPayload();
  v22 = type metadata accessor for PlottableProjection(255, v10, *(_QWORD *)(v16 - 272), *(_QWORD *)(v16 - 280));
  type metadata accessor for MarkDimensions(255, v10, v23, v24);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v26 = *(_QWORD *)(v16 - 208);
  v27 = v26 + *(int *)(TupleTypeMetadata2 + 48);
  v28 = *(_QWORD *)(v22 - 8);
  *(_QWORD *)(v16 - 264) = v28;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v28 + 16))(v26, *(_QWORD *)(v16 - 184), v22);
  MarkDimensions.init(integerLiteral:)(v27);
  swift_storeEnumTagMultiPayload();
  sub_21426CC14();
}

void sub_21439C8B8()
{
  sub_21439C3E0();
}

uint64_t sub_21439C8E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(_QWORD, uint64_t);

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 264) + 8))(v1, v3);
  v5 = *(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v4 - 224) + 8);
  v5(*(_QWORD *)(v4 - 152), v2);
  v5(*(_QWORD *)(v4 - 144), v2);
  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(v4 - 200) + 8))(*(_QWORD *)(v4 - 160), v0);
}

void RulePlot.init<A, B, C>(_:x:yStart:yEnd:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[4];
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v24 = a4;
  v25 = a9;
  v27 = a3;
  v28 = a2;
  v26 = a1;
  v18[1] = a10;
  v21 = a8;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v23 = type metadata accessor for BoundingSectionSpecification(0, AssociatedTypeWitness, a6, a10);
  MEMORY[0x24BDAC7A8](v23);
  v19 = type metadata accessor for BoundingSectionSpecification(0, AssociatedTypeWitness, a7, a11);
  v16 = MEMORY[0x24BDAC7A8](v19);
  v22 = *(_QWORD *)(a5 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)v18 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = a5;
  v30 = a7;
  v18[2] = a7;
  v18[0] = a6;
  v31 = a6;
  v32 = a8;
  v18[3] = a11;
  v33 = a11;
  v34 = a10;
  type metadata accessor for XYRenderer();
}

void sub_21439CAA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, _QWORD, uint64_t);

  MEMORY[0x24BDAC7A8](a1);
  *(_QWORD *)(v19 - 224) = (char *)&a9 - v20;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v14 + 16))(v18, *(_QWORD *)(v19 - 160), v9);
  v21 = type metadata accessor for PlottableProjection(0, v13, v15, v11);
  v22 = *(_QWORD *)(v21 - 8);
  *(_QWORD *)(v19 - 216) = v21;
  *(_QWORD *)(v19 - 208) = v22;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v22 + 16))(v12, *(_QWORD *)(v19 - 144), v21);
  swift_storeEnumTagMultiPayload();
  v23 = type metadata accessor for PlottableProjection(255, v13, v16, v17);
  v24 = v10 + *(int *)(swift_getTupleTypeMetadata2() + 48);
  v25 = *(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v23 - 8) + 16);
  v25(v10, *(_QWORD *)(v19 - 152), v23);
  v25(v24, *(_QWORD *)(v19 - 176), v23);
  swift_storeEnumTagMultiPayload();
  sub_21426CC14();
}

void sub_21439CBE4()
{
  sub_21439C3E0();
}

uint64_t sub_21439CC0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);

  v5 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v5(v2, v0);
  v5(*(_QWORD *)(v4 - 152), v0);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v4 - 208) + 8))(*(_QWORD *)(v4 - 144), *(_QWORD *)(v4 - 216));
  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(v4 - 192) + 8))(*(_QWORD *)(v4 - 160), v1);
}

void RulePlot.init<A, B>(_:xStart:xEnd:y:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v14 = type metadata accessor for BoundingSectionSpecification(0, AssociatedTypeWitness, a8, a10);
  MEMORY[0x24BDAC7A8](v14);
  v12 = type metadata accessor for BoundingSectionSpecification(0, AssociatedTypeWitness, MEMORY[0x24BEE13C8], (uint64_t)&protocol witness table for Double);
  v13 = MEMORY[0x24BDAC7A8](v12);
  MEMORY[0x24BDAC7A8](v13);
  type metadata accessor for XYRenderer();
}

void sub_21439CDCC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  MEMORY[0x24BDAC7A8](a1);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v3 + 16))(v7, *(_QWORD *)(v9 - 136), v1);
  *(_QWORD *)v2 = *(_QWORD *)(v9 - 200);
  *(_BYTE *)(v2 + 8) = *(_DWORD *)(v9 - 188) & 1;
  *(_QWORD *)(v2 + 16) = *(_QWORD *)(v9 - 184);
  *(_BYTE *)(v2 + 24) = *(_DWORD *)(v9 - 172) & 1;
  swift_storeEnumTagMultiPayload();
  v10 = type metadata accessor for PlottableProjection(255, v8, v5, v4);
  type metadata accessor for MarkDimensions(255, v8, v11, v12);
  v13 = v6 + *(int *)(swift_getTupleTypeMetadata2() + 48);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v6, *(_QWORD *)(v9 - 160), v10);
  MarkDimensions.init(integerLiteral:)(v13);
  swift_storeEnumTagMultiPayload();
  sub_21426CC14();
}

void sub_21439CF04()
{
  sub_21439C3E0();
}

uint64_t sub_21439CF2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v3, v1);
  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(v4 - 208) + 8))(*(_QWORD *)(v4 - 136), v0);
}

void RulePlot.init<A, B>(_:xStart:xEnd:y:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v13 = type metadata accessor for BoundingSectionSpecification(0, AssociatedTypeWitness, MEMORY[0x24BEE13C8], (uint64_t)&protocol witness table for Double);
  MEMORY[0x24BDAC7A8](v13);
  v12 = type metadata accessor for BoundingSectionSpecification(0, AssociatedTypeWitness, a7, a9);
  v11 = MEMORY[0x24BDAC7A8](v12);
  MEMORY[0x24BDAC7A8](v11);
  type metadata accessor for XYRenderer();
}

void sub_21439D0D8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, _QWORD, uint64_t);

  MEMORY[0x24BDAC7A8](a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v2, v4, v1);
  v11 = type metadata accessor for PlottableProjection(255, v3, v9, v5);
  v12 = v8 + *(int *)(swift_getTupleTypeMetadata2() + 48);
  v13 = *(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  v13(v8, *(_QWORD *)(v10 - 168), v11);
  v13(v12, *(_QWORD *)(v10 - 160), v11);
  swift_storeEnumTagMultiPayload();
  *(_QWORD *)v7 = *(_QWORD *)(v10 - 152);
  *(_BYTE *)(v7 + 8) = *(_DWORD *)(v10 - 140) & 1;
  swift_storeEnumTagMultiPayload();
  sub_21426CC14();
}

void sub_21439D1F4()
{
  sub_21439C3E0();
}

uint64_t sub_21439D220()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);

  v6 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v6(v2, v1);
  v6(v3, v1);
  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(v5 - 184) + 8))(*(_QWORD *)(v5 - 192), v0);
}

void RulePlot.init<A, B>(_:x:yStart:yEnd:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, int a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[2];
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _UNKNOWN **v34;

  v26 = a6;
  v25 = a5;
  v24 = a4;
  v22 = a2;
  v23 = a3;
  v27 = a9;
  v28 = a1;
  v19 = a10;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v14 = MEMORY[0x24BEE13C8];
  v21 = type metadata accessor for BoundingSectionSpecification(0, AssociatedTypeWitness, MEMORY[0x24BEE13C8], (uint64_t)&protocol witness table for Double);
  MEMORY[0x24BDAC7A8](v21);
  v18 = type metadata accessor for BoundingSectionSpecification(0, AssociatedTypeWitness, a8, a11);
  v15 = MEMORY[0x24BDAC7A8](v18);
  v20 = *(_QWORD *)(a7 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v17[0] = a11;
  v17[1] = (char *)v17 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = a7;
  v30 = a8;
  v31 = v14;
  v32 = a10;
  v33 = a11;
  v34 = &protocol witness table for Double;
  type metadata accessor for XYRenderer();
}

void sub_21439D3C4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  MEMORY[0x24BDAC7A8](a1);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v5 + 16))(v3, *(_QWORD *)(v9 - 144), v1);
  v10 = type metadata accessor for PlottableProjection(255, v6, v2, v4);
  type metadata accessor for MarkDimensions(255, v6, v11, v12);
  v13 = v7 + *(int *)(swift_getTupleTypeMetadata2() + 48);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v7, *(_QWORD *)(v9 - 192), v10);
  MarkDimensions.init(integerLiteral:)(v13);
  swift_storeEnumTagMultiPayload();
  *(_QWORD *)v8 = *(_QWORD *)(v9 - 184);
  *(_BYTE *)(v8 + 8) = *(_DWORD *)(v9 - 172) & 1;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v9 - 168);
  *(_BYTE *)(v8 + 24) = *(_DWORD *)(v9 - 156) & 1;
  swift_storeEnumTagMultiPayload();
  sub_21426CC14();
}

void sub_21439D4F8()
{
  sub_21439C3E0();
}

uint64_t sub_21439D524()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v2, v3);
  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(v4 - 208) + 8))(*(_QWORD *)(v4 - 144), v0);
}

void RulePlot.init<A, B>(_:x:yStart:yEnd:)(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[6];
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _UNKNOWN **v28;
  uint64_t v29;

  v20 = a5;
  v21 = a9;
  v22 = a1;
  v23 = a4;
  v18 = a3;
  v17[5] = a2;
  v17[3] = a8;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v19 = type metadata accessor for BoundingSectionSpecification(0, AssociatedTypeWitness, a7, a10);
  MEMORY[0x24BDAC7A8](v19);
  v14 = type metadata accessor for BoundingSectionSpecification(0, AssociatedTypeWitness, MEMORY[0x24BEE13C8], (uint64_t)&protocol witness table for Double);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v17[4] = *(_QWORD *)(a6 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v17[1] = (char *)v17 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = a6;
  v25 = MEMORY[0x24BEE13C8];
  v26 = a7;
  v17[0] = a7;
  v27 = a8;
  v28 = &protocol witness table for Double;
  v29 = a10;
  type metadata accessor for XYRenderer();
}

void sub_21439D6C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, _QWORD, uint64_t);

  MEMORY[0x24BDAC7A8](a1);
  *(_QWORD *)(v17 - 208) = (char *)&a9 - v18;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v13 + 16))(v12, *(_QWORD *)(v17 - 144), v9);
  *(_QWORD *)v10 = *(_QWORD *)(v17 - 184);
  *(_BYTE *)(v10 + 8) = *(_DWORD *)(v17 - 172) & 1;
  swift_storeEnumTagMultiPayload();
  v19 = type metadata accessor for PlottableProjection(255, v11, v16, v15);
  v20 = v14 + *(int *)(swift_getTupleTypeMetadata2() + 48);
  v21 = *(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v19 - 8) + 16);
  v21(v14, *(_QWORD *)(v17 - 136), v19);
  v21(v20, *(_QWORD *)(v17 - 160), v19);
  swift_storeEnumTagMultiPayload();
  sub_21426CC14();
}

void sub_21439D7EC()
{
  sub_21439C3E0();
}

uint64_t sub_21439D814()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);

  v5 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v5(v3, v1);
  v5(*(_QWORD *)(v4 - 136), v1);
  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(v4 - 192) + 8))(*(_QWORD *)(v4 - 144), v0);
}

void RulePlot.init<A, B>(_:xStart:xEnd:y:)(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v8 = *(_QWORD *)(*a2 + *MEMORY[0x24BEE46A8]);
  v11 = type metadata accessor for BoundingSectionSpecification(0, v8, a6, a8);
  MEMORY[0x24BDAC7A8](v11);
  v9 = type metadata accessor for BoundingSectionSpecification(0, v8, MEMORY[0x24BEE13C8], (uint64_t)&protocol witness table for Double);
  v10 = MEMORY[0x24BDAC7A8](v9);
  MEMORY[0x24BDAC7A8](v10);
  type metadata accessor for XYRenderer();
}

void sub_21439D998(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  MEMORY[0x24BDAC7A8](a1);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v3 + 16))(v6, *(_QWORD *)(v9 - 136), v1);
  v10 = *(_QWORD *)(v9 - 192);
  *v2 = *(_QWORD *)(v9 - 200);
  v2[1] = v10;
  swift_storeEnumTagMultiPayload();
  v11 = type metadata accessor for PlottableProjection(255, v8, v7, v4);
  type metadata accessor for MarkDimensions(255, v8, v12, v13);
  v14 = v5 + *(int *)(swift_getTupleTypeMetadata2() + 48);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v5, *(_QWORD *)(v9 - 160), v11);
  MarkDimensions.init(integerLiteral:)(v14);
  swift_storeEnumTagMultiPayload();
  sub_21426CC14();
}

void sub_21439DAB8()
{
  sub_21439C3E0();
}

uint64_t sub_21439DAE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v2, v3);
  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(v4 - 176) + 8))(*(_QWORD *)(v4 - 136), v0);
}

void RulePlot.init<A, B>(_:xStart:xEnd:y:)(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v10 = *(_QWORD *)(*a4 + *MEMORY[0x24BEE46A8]);
  v13 = type metadata accessor for BoundingSectionSpecification(0, v10, MEMORY[0x24BEE13C8], (uint64_t)&protocol witness table for Double);
  MEMORY[0x24BDAC7A8](v13);
  v12 = type metadata accessor for BoundingSectionSpecification(0, v10, a6, a8);
  v11 = MEMORY[0x24BDAC7A8](v12);
  MEMORY[0x24BDAC7A8](v11);
  type metadata accessor for XYRenderer();
}

void sub_21439DC5C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, _QWORD, uint64_t);

  MEMORY[0x24BDAC7A8](a1);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v6 + 16))(v7, *(_QWORD *)(v9 - 136), v3);
  v10 = type metadata accessor for PlottableProjection(255, v4, v2, v5);
  v11 = v1 + *(int *)(swift_getTupleTypeMetadata2() + 48);
  v12 = *(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  v12(v1, *(_QWORD *)(v9 - 176), v10);
  v12(v11, *(_QWORD *)(v9 - 160), v10);
  swift_storeEnumTagMultiPayload();
  *v8 = *(_QWORD *)(v9 - 152);
  swift_storeEnumTagMultiPayload();
  sub_21426CC14();
}

void sub_21439DD70()
{
  sub_21439C3E0();
}

uint64_t sub_21439DD9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);

  v6 = *(void (**)(uint64_t, uint64_t))(v1 + 8);
  v6(v3, v2);
  v6(v4, v2);
  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(v5 - 184) + 8))(*(_QWORD *)(v5 - 136), v0);
}

void RulePlot.init<A, B>(_:x:yStart:yEnd:)(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[5];
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _UNKNOWN **v30;

  v17[3] = a7;
  v21 = a3;
  v22 = a4;
  v19 = a2;
  v23 = a9;
  v24 = a1;
  v13 = *(_QWORD *)(*a3 + *MEMORY[0x24BEE46A8]);
  v14 = MEMORY[0x24BEE13C8];
  v20 = type metadata accessor for BoundingSectionSpecification(0, v13, MEMORY[0x24BEE13C8], (uint64_t)&protocol witness table for Double);
  MEMORY[0x24BDAC7A8](v20);
  v18 = type metadata accessor for BoundingSectionSpecification(0, v13, a6, a8);
  v15 = MEMORY[0x24BDAC7A8](v18);
  v17[4] = *(_QWORD *)(a5 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v17[1] = a6;
  v17[2] = (char *)v17 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = a5;
  v26 = a6;
  v27 = v14;
  v28 = a7;
  v29 = a8;
  v30 = &protocol witness table for Double;
  type metadata accessor for XYRenderer();
}

void sub_21439DF24(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  MEMORY[0x24BDAC7A8](a1);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v5 + 16))(v3, *(_QWORD *)(v9 - 136), v1);
  v10 = type metadata accessor for PlottableProjection(255, v7, v4, v2);
  type metadata accessor for MarkDimensions(255, v7, v11, v12);
  v13 = v6 + *(int *)(swift_getTupleTypeMetadata2() + 48);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v6, *(_QWORD *)(v9 - 176), v10);
  MarkDimensions.init(integerLiteral:)(v13);
  swift_storeEnumTagMultiPayload();
  v14 = *(_QWORD *)(v9 - 152);
  *v8 = *(_QWORD *)(v9 - 160);
  v8[1] = v14;
  swift_storeEnumTagMultiPayload();
  sub_21426CC14();
}

void sub_21439E038()
{
  sub_21439C3E0();
}

uint64_t sub_21439E060()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v3, v2);
  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(v4 - 192) + 8))(*(_QWORD *)(v4 - 136), v0);
}

void RulePlot.init<A, B>(_:x:yStart:yEnd:)(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v8 = *(_QWORD *)(*a2 + *MEMORY[0x24BEE46A8]);
  v11 = type metadata accessor for BoundingSectionSpecification(0, v8, a6, a8);
  MEMORY[0x24BDAC7A8](v11);
  v9 = type metadata accessor for BoundingSectionSpecification(0, v8, MEMORY[0x24BEE13C8], (uint64_t)&protocol witness table for Double);
  v10 = MEMORY[0x24BDAC7A8](v9);
  MEMORY[0x24BDAC7A8](v10);
  type metadata accessor for XYRenderer();
}

void sub_21439E1D4(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, _QWORD, uint64_t);

  MEMORY[0x24BDAC7A8](a1);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 16))(v8, *(_QWORD *)(v9 - 136), v1);
  *v2 = *(_QWORD *)(v9 - 200);
  swift_storeEnumTagMultiPayload();
  v10 = type metadata accessor for PlottableProjection(255, v3, v7, v5);
  v11 = v6 + *(int *)(swift_getTupleTypeMetadata2() + 48);
  v12 = *(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  v12(v6, *(_QWORD *)(v9 - 144), v10);
  v12(v11, *(_QWORD *)(v9 - 168), v10);
  swift_storeEnumTagMultiPayload();
  sub_21426CC14();
}

void sub_21439E2E0()
{
  sub_21439C3E0();
}

uint64_t sub_21439E308()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);

  v5 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v5(v2, v1);
  v5(*(_QWORD *)(v4 - 144), v1);
  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(v4 - 184) + 8))(*(_QWORD *)(v4 - 136), v0);
}

uint64_t static VectorizedRulePlotContent._layoutChartContent(_:_:)(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;

  v4 = type metadata accessor for RulesRenderer(0);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (_QWORD *)((char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_2141FDEA0(a1, (uint64_t)v6, type metadata accessor for RulesRenderer);
  v7 = v6[3];
  v8 = v6[4];
  sub_2141E88D0(v6, v7);
  v10 = *a2;
  (*(void (**)(__int128 *, uint64_t, uint64_t))(v8 + 8))(&v10, v7, v8);
  return sub_2141DD370((uint64_t)v6, type metadata accessor for RulesRenderer);
}

uint64_t static VectorizedRulePlotContent._renderChartContent(_:_:)@<X0>(_QWORD *a1@<X0>, unsigned __int8 *a2@<X1>, unint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(_QWORD);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t *v36;

  v6 = sub_2141D8BF8(&qword_253F14280);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for RulesRenderer(0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *a2;
  v13 = *((_QWORD *)a2 + 1);
  sub_2141FDEA0((uint64_t)a1, (uint64_t)v11, v14);
  swift_retain();
  swift_release();
  *((_QWORD *)v11 + 5) = v12;
  *((_QWORD *)v11 + 6) = v13;
  v15 = (uint64_t)&v11[*(int *)(v9 + 32)];
  sub_21439E6B0(v15);
  v16 = v13 + OBJC_IVAR____TtC6Charts25ChartContentRenderContext_environment;
  swift_beginAccess();
  sub_2141FDEA0(v16, v15, type metadata accessor for ChartContentRenderContext.Environment);
  v17 = type metadata accessor for ChartContentRenderContext.Environment(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v15, 0, 1, v17);
  if ((v12 & 1) != 0)
  {
    v18 = type metadata accessor for SgGroup(0);
    v36 = a3;
    v19 = (int *)v18;
    v20 = swift_allocBox();
    v22 = v21;
    v34 = *(_QWORD *)(*(_QWORD *)(v13 + 16) + 24);
    v35 = v20;
    v23 = (uint64_t)v8;
    v24 = a1[3];
    v25 = a1[4];
    sub_2141E88D0(a1, v24);
    v26 = (*(uint64_t (**)(ValueMetadata *, uint64_t, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t))(v25 + 32))(&type metadata for RuleMark, v13, &type metadata for RuleMark, &off_24D18DEE0, v24, v25);
    v27 = type metadata accessor for SgClipRect(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v23, 1, 1, v27);
    v28 = *(_QWORD *)(v16 + *(int *)(v17 + 64));
    sub_2141DD370((uint64_t)v11, type metadata accessor for RulesRenderer);
    *v22 = v34;
    v22[1] = v26;
    result = sub_2141ED100(v23, (uint64_t)v22 + v19[6]);
    *(_QWORD *)((char *)v22 + v19[7]) = 0x3FF0000000000000;
    *(_QWORD *)((char *)v22 + v19[8]) = v28;
    *(_QWORD *)((char *)v22 + v19[9]) = MEMORY[0x24BEE4AF8];
    v30 = v19[10];
    v31 = v35;
    a3 = v36;
    *((_BYTE *)v22 + v30) = 0;
  }
  else
  {
    type metadata accessor for AnyVectorizedRenderer(0);
    v32 = swift_allocBox();
    sub_21439E6F0((uint64_t)v11, v33);
    type metadata accessor for AnyVectorizedRenderer.MarkRenderer(0);
    result = swift_storeEnumTagMultiPayload();
    v31 = v32 | 0xD000000000000000;
  }
  *a3 = v31;
  return result;
}

uint64_t sub_21439E6B0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_2141D8BF8(qword_254D69B70);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_21439E6F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for RulesRenderer(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_21439E734()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_21439E76C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)a3 + 8);
  result = MEMORY[0x2199CD934](&protocol conformance descriptor for <A> RulePlot<A>, a2, &v5);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_21439E7B8(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_21439E868 + 4 * byte_214430040[(v7 - 1)]))();
}

void sub_21439E8B8(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t type metadata accessor for RulePlot(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2141D8E88(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for RulePlot);
}

uint64_t sub_21439EA74()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for RulesRenderer(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_21439EADC(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  _OWORD *v9;
  _OWORD *v10;
  int *v11;
  uint64_t v12;
  unsigned int (*v13)(_OWORD *, uint64_t, int *);
  uint64_t v14;
  uint64_t v15;
  int v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  int v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  __int128 v74;
  __int128 v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  __int128 v99;
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  __int128 v106;
  uint64_t v107;
  _QWORD *v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  __int128 v115;

  v4 = type metadata accessor for RulesRenderer(0);
  v5 = *(_DWORD *)(*(_QWORD *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v15 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    v6 = v4;
    v7 = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 24) = v7;
    (**(void (***)(uint64_t, uint64_t *))(v7 - 8))(a1, a2);
    *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
    *(_QWORD *)(a1 + 48) = a2[6];
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 7);
    v8 = *(int *)(v6 + 32);
    v9 = (_OWORD *)(a1 + v8);
    v10 = (_OWORD *)((char *)a2 + v8);
    v11 = (int *)type metadata accessor for ChartContentRenderContext.Environment(0);
    v12 = *((_QWORD *)v11 - 1);
    v13 = *(unsigned int (**)(_OWORD *, uint64_t, int *))(v12 + 48);
    swift_retain();
    if (v13(v10, 1, v11))
    {
      v14 = sub_2141D8BF8(qword_254D69B70);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      v16 = *((unsigned __int8 *)v10 + 40);
      if (v16 == 255)
      {
        v17 = v10[1];
        *v9 = *v10;
        v9[1] = v17;
        *(_OWORD *)((char *)v9 + 25) = *(_OWORD *)((char *)v10 + 25);
      }
      else if ((v16 & 1) != 0)
      {
        v18 = *(_OWORD *)((char *)v10 + 24);
        *(_OWORD *)((char *)v9 + 24) = v18;
        (**(void (***)(_OWORD *, _OWORD *))(v18 - 8))(v9, v10);
        *((_BYTE *)v9 + 40) = 1;
      }
      else
      {
        *(_QWORD *)v9 = *(_QWORD *)v10;
        *((_BYTE *)v9 + 40) = 0;
        swift_retain();
      }
      *((_BYTE *)v9 + 41) = *((_BYTE *)v10 + 41);
      *((_QWORD *)v9 + 6) = *((_QWORD *)v10 + 6);
      *((_QWORD *)v9 + 7) = *((_QWORD *)v10 + 7);
      v19 = *((_QWORD *)v10 + 9);
      *((_QWORD *)v9 + 8) = *((_QWORD *)v10 + 8);
      *((_QWORD *)v9 + 9) = v19;
      *((_QWORD *)v9 + 10) = *((_QWORD *)v10 + 10);
      v20 = *((unsigned __int8 *)v10 + 128);
      swift_bridgeObjectRetain();
      if (v20 == 255)
      {
        v21 = *(_OWORD *)((char *)v10 + 104);
        *(_OWORD *)((char *)v9 + 88) = *(_OWORD *)((char *)v10 + 88);
        *(_OWORD *)((char *)v9 + 104) = v21;
        *(_OWORD *)((char *)v9 + 113) = *(_OWORD *)((char *)v10 + 113);
      }
      else if ((v20 & 1) != 0)
      {
        *((_QWORD *)v9 + 11) = *((_QWORD *)v10 + 11);
        v9[6] = v10[6];
        *((_BYTE *)v9 + 128) = 1;
        swift_retain();
      }
      else
      {
        v22 = v10[7];
        v9[7] = v22;
        (**(void (***)(uint64_t, uint64_t))(v22 - 8))((uint64_t)v9 + 88, (uint64_t)v10 + 88);
        *((_BYTE *)v9 + 128) = 0;
      }
      *(_OWORD *)((char *)v9 + 136) = *(_OWORD *)((char *)v10 + 136);
      *((_BYTE *)v9 + 152) = *((_BYTE *)v10 + 152);
      *((_QWORD *)v9 + 20) = *((_QWORD *)v10 + 20);
      *((_BYTE *)v9 + 168) = *((_BYTE *)v10 + 168);
      v23 = v10[12];
      v9[11] = v10[11];
      v9[12] = v23;
      *((_BYTE *)v9 + 208) = *((_BYTE *)v10 + 208);
      v24 = v11[11];
      v25 = (char *)v9 + v24;
      v26 = (char *)v10 + v24;
      v27 = sub_214424308();
      v28 = *(_QWORD *)(v27 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
      {
        v29 = sub_2141D8BF8(&qword_253F134C8);
        memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v28 + 16))(v25, v26, v27);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
      }
      v30 = v11[12];
      v31 = (char *)v9 + v30;
      v32 = (char *)v10 + v30;
      *(_QWORD *)v31 = *(_QWORD *)v32;
      v31[8] = v32[8];
      *(_QWORD *)((char *)v9 + v11[13]) = *(_QWORD *)((char *)v10 + v11[13]);
      v33 = v11[14];
      v34 = (char *)v9 + v33;
      v35 = (char *)v10 + v33;
      v36 = sub_214424C68();
      v37 = *(_QWORD *)(v36 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v35, 1, v36))
      {
        v38 = sub_2141D8BF8(&qword_253F15C88);
        memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v37 + 16))(v34, v35, v36);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, v36);
      }
      v39 = v11[15];
      v40 = (char *)v9 + v39;
      v41 = (char *)v10 + v39;
      *(_QWORD *)v40 = *(_QWORD *)v41;
      *((_WORD *)v40 + 4) = *((_WORD *)v41 + 4);
      *(_QWORD *)((char *)v9 + v11[16]) = *(_QWORD *)((char *)v10 + v11[16]);
      *(_QWORD *)((char *)v9 + v11[17]) = *(_QWORD *)((char *)v10 + v11[17]);
      v42 = v11[18];
      v43 = (char *)v9 + v42;
      v44 = (char *)v10 + v42;
      v45 = *(_QWORD *)((char *)v10 + v42 + 24);
      swift_retain();
      if (v45)
      {
        v46 = *(_QWORD *)v44;
        v47 = *((_QWORD *)v44 + 1);
        v48 = v44[16];
        sub_2141DD130(*(_QWORD *)v44, v47, v48);
        *(_QWORD *)v43 = v46;
        *((_QWORD *)v43 + 1) = v47;
        v43[16] = v48;
        v49 = *((_QWORD *)v44 + 4);
        *((_QWORD *)v43 + 3) = *((_QWORD *)v44 + 3);
        v50 = *((_QWORD *)v44 + 5);
        v51 = v44[48];
        swift_bridgeObjectRetain();
        sub_2141DD140(v49, v50, v51);
        *((_QWORD *)v43 + 4) = v49;
        *((_QWORD *)v43 + 5) = v50;
        v43[48] = v51;
        *(_OWORD *)(v43 + 56) = *(_OWORD *)(v44 + 56);
      }
      else
      {
        v52 = *((_OWORD *)v44 + 3);
        *((_OWORD *)v43 + 2) = *((_OWORD *)v44 + 2);
        *((_OWORD *)v43 + 3) = v52;
        *((_QWORD *)v43 + 8) = *((_QWORD *)v44 + 8);
        v53 = *((_OWORD *)v44 + 1);
        *(_OWORD *)v43 = *(_OWORD *)v44;
        *((_OWORD *)v43 + 1) = v53;
      }
      v54 = v11[19];
      v55 = (char *)v9 + v54;
      v56 = (char *)v10 + v54;
      if (*(_QWORD *)((char *)v10 + v54 + 24))
      {
        v57 = *(_QWORD *)v56;
        v58 = *((_QWORD *)v56 + 1);
        v59 = v56[16];
        sub_2141DD130(*(_QWORD *)v56, v58, v59);
        *(_QWORD *)v55 = v57;
        *((_QWORD *)v55 + 1) = v58;
        v55[16] = v59;
        v60 = *((_QWORD *)v56 + 4);
        *((_QWORD *)v55 + 3) = *((_QWORD *)v56 + 3);
        v61 = *((_QWORD *)v56 + 5);
        v62 = v56[48];
        swift_bridgeObjectRetain();
        sub_2141DD140(v60, v61, v62);
        *((_QWORD *)v55 + 4) = v60;
        *((_QWORD *)v55 + 5) = v61;
        v55[48] = v62;
        *(_OWORD *)(v55 + 56) = *(_OWORD *)(v56 + 56);
      }
      else
      {
        v63 = *((_OWORD *)v56 + 3);
        *((_OWORD *)v55 + 2) = *((_OWORD *)v56 + 2);
        *((_OWORD *)v55 + 3) = v63;
        *((_QWORD *)v55 + 8) = *((_QWORD *)v56 + 8);
        v64 = *((_OWORD *)v56 + 1);
        *(_OWORD *)v55 = *(_OWORD *)v56;
        *((_OWORD *)v55 + 1) = v64;
      }
      v65 = v11[20];
      v66 = (char *)v9 + v65;
      v67 = (char *)v10 + v65;
      if (*(_QWORD *)((char *)v10 + v65 + 24))
      {
        v68 = *(_QWORD *)v67;
        v69 = *((_QWORD *)v67 + 1);
        v70 = v67[16];
        sub_2141DD130(*(_QWORD *)v67, v69, v70);
        *(_QWORD *)v66 = v68;
        *((_QWORD *)v66 + 1) = v69;
        v66[16] = v70;
        v71 = *((_QWORD *)v67 + 4);
        *((_QWORD *)v66 + 3) = *((_QWORD *)v67 + 3);
        v72 = *((_QWORD *)v67 + 5);
        v73 = v67[48];
        swift_bridgeObjectRetain();
        sub_2141DD140(v71, v72, v73);
        *((_QWORD *)v66 + 4) = v71;
        *((_QWORD *)v66 + 5) = v72;
        v66[48] = v73;
        *(_OWORD *)(v66 + 56) = *(_OWORD *)(v67 + 56);
      }
      else
      {
        v74 = *((_OWORD *)v67 + 3);
        *((_OWORD *)v66 + 2) = *((_OWORD *)v67 + 2);
        *((_OWORD *)v66 + 3) = v74;
        *((_QWORD *)v66 + 8) = *((_QWORD *)v67 + 8);
        v75 = *((_OWORD *)v67 + 1);
        *(_OWORD *)v66 = *(_OWORD *)v67;
        *((_OWORD *)v66 + 1) = v75;
      }
      v76 = v11[21];
      v77 = (char *)v9 + v76;
      v78 = (char *)v10 + v76;
      if (*(_QWORD *)((char *)v10 + v76 + 24))
      {
        v79 = *(_QWORD *)v78;
        v80 = *((_QWORD *)v78 + 1);
        v81 = v78[16];
        sub_2141DD130(*(_QWORD *)v78, v80, v81);
        *(_QWORD *)v77 = v79;
        *((_QWORD *)v77 + 1) = v80;
        v77[16] = v81;
        v82 = *((_QWORD *)v78 + 4);
        *((_QWORD *)v77 + 3) = *((_QWORD *)v78 + 3);
        v83 = *((_QWORD *)v78 + 5);
        v84 = v78[48];
        swift_bridgeObjectRetain();
        sub_2141DD140(v82, v83, v84);
        *((_QWORD *)v77 + 4) = v82;
        *((_QWORD *)v77 + 5) = v83;
        v77[48] = v84;
        *(_OWORD *)(v77 + 56) = *(_OWORD *)(v78 + 56);
      }
      else
      {
        v85 = *((_OWORD *)v78 + 3);
        *((_OWORD *)v77 + 2) = *((_OWORD *)v78 + 2);
        *((_OWORD *)v77 + 3) = v85;
        *((_QWORD *)v77 + 8) = *((_QWORD *)v78 + 8);
        v86 = *((_OWORD *)v78 + 1);
        *(_OWORD *)v77 = *(_OWORD *)v78;
        *((_OWORD *)v77 + 1) = v86;
      }
      v87 = v11[22];
      v88 = (char *)v9 + v87;
      v89 = (char *)v10 + v87;
      *(_OWORD *)v88 = *(_OWORD *)v89;
      *((_QWORD *)v88 + 2) = *((_QWORD *)v89 + 2);
      v90 = v11[23];
      v91 = (char *)v9 + v90;
      v92 = (char *)v10 + v90;
      *(_OWORD *)v91 = *(_OWORD *)v92;
      *((_QWORD *)v91 + 2) = *((_QWORD *)v92 + 2);
      v93 = v11[24];
      v94 = (char *)v9 + v93;
      v95 = (char *)v10 + v93;
      if (*(_QWORD *)((char *)v10 + v93 + 24))
      {
        v96 = *(_QWORD *)v95;
        v97 = *((_QWORD *)v95 + 1);
        v98 = v95[16];
        sub_2141DD130(*(_QWORD *)v95, v97, v98);
        *(_QWORD *)v94 = v96;
        *((_QWORD *)v94 + 1) = v97;
        v94[16] = v98;
        *((_QWORD *)v94 + 3) = *((_QWORD *)v95 + 3);
        swift_bridgeObjectRetain();
      }
      else
      {
        v99 = *((_OWORD *)v95 + 1);
        *(_OWORD *)v94 = *(_OWORD *)v95;
        *((_OWORD *)v94 + 1) = v99;
      }
      v100 = v11[25];
      v101 = (char *)v9 + v100;
      v102 = (char *)v10 + v100;
      if (*(_QWORD *)((char *)v10 + v100 + 24))
      {
        v103 = *(_QWORD *)v102;
        v104 = *((_QWORD *)v102 + 1);
        v105 = v102[16];
        sub_2141DD130(*(_QWORD *)v102, v104, v105);
        *(_QWORD *)v101 = v103;
        *((_QWORD *)v101 + 1) = v104;
        v101[16] = v105;
        *((_QWORD *)v101 + 3) = *((_QWORD *)v102 + 3);
        swift_bridgeObjectRetain();
      }
      else
      {
        v106 = *((_OWORD *)v102 + 1);
        *(_OWORD *)v101 = *(_OWORD *)v102;
        *((_OWORD *)v101 + 1) = v106;
      }
      v107 = v11[26];
      v108 = (_QWORD *)((char *)v9 + v107);
      v109 = (_QWORD *)((char *)v10 + v107);
      v110 = v109[1];
      *v108 = *v109;
      v108[1] = v110;
      v111 = v11[27];
      v112 = (char *)v9 + v111;
      v113 = (char *)v10 + v111;
      v114 = *((_QWORD *)v113 + 3);
      swift_bridgeObjectRetain();
      if (v114)
      {
        *((_QWORD *)v112 + 3) = v114;
        (**(void (***)(char *, char *, uint64_t))(v114 - 8))(v112, v113, v114);
      }
      else
      {
        v115 = *((_OWORD *)v113 + 1);
        *(_OWORD *)v112 = *(_OWORD *)v113;
        *((_OWORD *)v112 + 1) = v115;
      }
      (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
    }
  }
  return a1;
}

uint64_t sub_21439F1D0(uint64_t a1)
{
  uint64_t v2;
  int *v3;
  uint64_t result;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  _s6Charts15AnyChartContentVwxx_0(a1);
  swift_release();
  v2 = a1 + *(int *)(type metadata accessor for RulesRenderer(0) + 32);
  v3 = (int *)type metadata accessor for ChartContentRenderContext.Environment(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v3 - 1) + 48))(v2, 1, v3);
  if (!(_DWORD)result)
  {
    v5 = *(unsigned __int8 *)(v2 + 40);
    if (v5 != 255)
    {
      if ((v5 & 1) != 0)
        _s6Charts15AnyChartContentVwxx_0(v2);
      else
        swift_release();
    }
    swift_bridgeObjectRelease();
    v6 = *(unsigned __int8 *)(v2 + 128);
    if (v6 != 255)
    {
      if ((v6 & 1) != 0)
        swift_release();
      else
        _s6Charts15AnyChartContentVwxx_0(v2 + 88);
    }
    v7 = v2 + v3[11];
    v8 = sub_214424308();
    v9 = *(_QWORD *)(v8 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
    v10 = v2 + v3[14];
    v11 = sub_214424C68();
    v12 = *(_QWORD *)(v11 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
      (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
    swift_release();
    v13 = v2 + v3[18];
    if (*(_QWORD *)(v13 + 24))
    {
      sub_2141ED0BC(*(_QWORD *)v13, *(_QWORD *)(v13 + 8), *(_BYTE *)(v13 + 16));
      swift_bridgeObjectRelease();
      sub_2141EF1B0(*(_QWORD *)(v13 + 32), *(_QWORD *)(v13 + 40), *(_BYTE *)(v13 + 48));
    }
    v14 = v2 + v3[19];
    if (*(_QWORD *)(v14 + 24))
    {
      sub_2141ED0BC(*(_QWORD *)v14, *(_QWORD *)(v14 + 8), *(_BYTE *)(v14 + 16));
      swift_bridgeObjectRelease();
      sub_2141EF1B0(*(_QWORD *)(v14 + 32), *(_QWORD *)(v14 + 40), *(_BYTE *)(v14 + 48));
    }
    v15 = v2 + v3[20];
    if (*(_QWORD *)(v15 + 24))
    {
      sub_2141ED0BC(*(_QWORD *)v15, *(_QWORD *)(v15 + 8), *(_BYTE *)(v15 + 16));
      swift_bridgeObjectRelease();
      sub_2141EF1B0(*(_QWORD *)(v15 + 32), *(_QWORD *)(v15 + 40), *(_BYTE *)(v15 + 48));
    }
    v16 = v2 + v3[21];
    if (*(_QWORD *)(v16 + 24))
    {
      sub_2141ED0BC(*(_QWORD *)v16, *(_QWORD *)(v16 + 8), *(_BYTE *)(v16 + 16));
      swift_bridgeObjectRelease();
      sub_2141EF1B0(*(_QWORD *)(v16 + 32), *(_QWORD *)(v16 + 40), *(_BYTE *)(v16 + 48));
    }
    v17 = v2 + v3[24];
    if (*(_QWORD *)(v17 + 24))
    {
      sub_2141ED0BC(*(_QWORD *)v17, *(_QWORD *)(v17 + 8), *(_BYTE *)(v17 + 16));
      swift_bridgeObjectRelease();
    }
    v18 = v2 + v3[25];
    if (*(_QWORD *)(v18 + 24))
    {
      sub_2141ED0BC(*(_QWORD *)v18, *(_QWORD *)(v18 + 8), *(_BYTE *)(v18 + 16));
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    result = v2 + v3[27];
    if (*(_QWORD *)(result + 24))
      return _s6Charts15AnyChartContentVwxx_0(result);
  }
  return result;
}

uint64_t sub_21439F448(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  _OWORD *v6;
  _OWORD *v7;
  int *v8;
  uint64_t v9;
  unsigned int (*v10)(_OWORD *, uint64_t, int *);
  uint64_t v11;
  int v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  int v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  char v94;
  __int128 v95;
  uint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  char v101;
  __int128 v102;
  uint64_t v103;
  _QWORD *v104;
  _QWORD *v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  __int128 v111;

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  v5 = *(int *)(type metadata accessor for RulesRenderer(0) + 32);
  v6 = (_OWORD *)(a1 + v5);
  v7 = (_OWORD *)(a2 + v5);
  v8 = (int *)type metadata accessor for ChartContentRenderContext.Environment(0);
  v9 = *((_QWORD *)v8 - 1);
  v10 = *(unsigned int (**)(_OWORD *, uint64_t, int *))(v9 + 48);
  swift_retain();
  if (v10(v7, 1, v8))
  {
    v11 = sub_2141D8BF8(qword_254D69B70);
    memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    v12 = *((unsigned __int8 *)v7 + 40);
    if (v12 == 255)
    {
      v13 = v7[1];
      *v6 = *v7;
      v6[1] = v13;
      *(_OWORD *)((char *)v6 + 25) = *(_OWORD *)((char *)v7 + 25);
    }
    else if ((v12 & 1) != 0)
    {
      v14 = *(_OWORD *)((char *)v7 + 24);
      *(_OWORD *)((char *)v6 + 24) = v14;
      (**(void (***)(_OWORD *, _OWORD *))(v14 - 8))(v6, v7);
      *((_BYTE *)v6 + 40) = 1;
    }
    else
    {
      *(_QWORD *)v6 = *(_QWORD *)v7;
      *((_BYTE *)v6 + 40) = 0;
      swift_retain();
    }
    *((_BYTE *)v6 + 41) = *((_BYTE *)v7 + 41);
    *((_QWORD *)v6 + 6) = *((_QWORD *)v7 + 6);
    *((_QWORD *)v6 + 7) = *((_QWORD *)v7 + 7);
    v15 = *((_QWORD *)v7 + 9);
    *((_QWORD *)v6 + 8) = *((_QWORD *)v7 + 8);
    *((_QWORD *)v6 + 9) = v15;
    *((_QWORD *)v6 + 10) = *((_QWORD *)v7 + 10);
    v16 = *((unsigned __int8 *)v7 + 128);
    swift_bridgeObjectRetain();
    if (v16 == 255)
    {
      v17 = *(_OWORD *)((char *)v7 + 104);
      *(_OWORD *)((char *)v6 + 88) = *(_OWORD *)((char *)v7 + 88);
      *(_OWORD *)((char *)v6 + 104) = v17;
      *(_OWORD *)((char *)v6 + 113) = *(_OWORD *)((char *)v7 + 113);
    }
    else if ((v16 & 1) != 0)
    {
      *((_QWORD *)v6 + 11) = *((_QWORD *)v7 + 11);
      v6[6] = v7[6];
      *((_BYTE *)v6 + 128) = 1;
      swift_retain();
    }
    else
    {
      v18 = v7[7];
      v6[7] = v18;
      (**(void (***)(uint64_t, uint64_t))(v18 - 8))((uint64_t)v6 + 88, (uint64_t)v7 + 88);
      *((_BYTE *)v6 + 128) = 0;
    }
    *(_OWORD *)((char *)v6 + 136) = *(_OWORD *)((char *)v7 + 136);
    *((_BYTE *)v6 + 152) = *((_BYTE *)v7 + 152);
    *((_QWORD *)v6 + 20) = *((_QWORD *)v7 + 20);
    *((_BYTE *)v6 + 168) = *((_BYTE *)v7 + 168);
    v19 = v7[12];
    v6[11] = v7[11];
    v6[12] = v19;
    *((_BYTE *)v6 + 208) = *((_BYTE *)v7 + 208);
    v20 = v8[11];
    v21 = (char *)v6 + v20;
    v22 = (char *)v7 + v20;
    v23 = sub_214424308();
    v24 = *(_QWORD *)(v23 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
    {
      v25 = sub_2141D8BF8(&qword_253F134C8);
      memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v21, v22, v23);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
    }
    v26 = v8[12];
    v27 = (char *)v6 + v26;
    v28 = (char *)v7 + v26;
    *(_QWORD *)v27 = *(_QWORD *)v28;
    v27[8] = v28[8];
    *(_QWORD *)((char *)v6 + v8[13]) = *(_QWORD *)((char *)v7 + v8[13]);
    v29 = v8[14];
    v30 = (char *)v6 + v29;
    v31 = (char *)v7 + v29;
    v32 = sub_214424C68();
    v33 = *(_QWORD *)(v32 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32))
    {
      v34 = sub_2141D8BF8(&qword_253F15C88);
      memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v30, v31, v32);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
    }
    v35 = v8[15];
    v36 = (char *)v6 + v35;
    v37 = (char *)v7 + v35;
    *(_QWORD *)v36 = *(_QWORD *)v37;
    *((_WORD *)v36 + 4) = *((_WORD *)v37 + 4);
    *(_QWORD *)((char *)v6 + v8[16]) = *(_QWORD *)((char *)v7 + v8[16]);
    *(_QWORD *)((char *)v6 + v8[17]) = *(_QWORD *)((char *)v7 + v8[17]);
    v38 = v8[18];
    v39 = (char *)v6 + v38;
    v40 = (char *)v7 + v38;
    v41 = *(_QWORD *)((char *)v7 + v38 + 24);
    swift_retain();
    if (v41)
    {
      v42 = *(_QWORD *)v40;
      v43 = *((_QWORD *)v40 + 1);
      v44 = v40[16];
      sub_2141DD130(*(_QWORD *)v40, v43, v44);
      *(_QWORD *)v39 = v42;
      *((_QWORD *)v39 + 1) = v43;
      v39[16] = v44;
      v45 = *((_QWORD *)v40 + 4);
      *((_QWORD *)v39 + 3) = *((_QWORD *)v40 + 3);
      v46 = *((_QWORD *)v40 + 5);
      v47 = v40[48];
      swift_bridgeObjectRetain();
      sub_2141DD140(v45, v46, v47);
      *((_QWORD *)v39 + 4) = v45;
      *((_QWORD *)v39 + 5) = v46;
      v39[48] = v47;
      *(_OWORD *)(v39 + 56) = *(_OWORD *)(v40 + 56);
    }
    else
    {
      v48 = *((_OWORD *)v40 + 3);
      *((_OWORD *)v39 + 2) = *((_OWORD *)v40 + 2);
      *((_OWORD *)v39 + 3) = v48;
      *((_QWORD *)v39 + 8) = *((_QWORD *)v40 + 8);
      v49 = *((_OWORD *)v40 + 1);
      *(_OWORD *)v39 = *(_OWORD *)v40;
      *((_OWORD *)v39 + 1) = v49;
    }
    v50 = v8[19];
    v51 = (char *)v6 + v50;
    v52 = (char *)v7 + v50;
    if (*(_QWORD *)((char *)v7 + v50 + 24))
    {
      v53 = *(_QWORD *)v52;
      v54 = *((_QWORD *)v52 + 1);
      v55 = v52[16];
      sub_2141DD130(*(_QWORD *)v52, v54, v55);
      *(_QWORD *)v51 = v53;
      *((_QWORD *)v51 + 1) = v54;
      v51[16] = v55;
      v56 = *((_QWORD *)v52 + 4);
      *((_QWORD *)v51 + 3) = *((_QWORD *)v52 + 3);
      v57 = *((_QWORD *)v52 + 5);
      v58 = v52[48];
      swift_bridgeObjectRetain();
      sub_2141DD140(v56, v57, v58);
      *((_QWORD *)v51 + 4) = v56;
      *((_QWORD *)v51 + 5) = v57;
      v51[48] = v58;
      *(_OWORD *)(v51 + 56) = *(_OWORD *)(v52 + 56);
    }
    else
    {
      v59 = *((_OWORD *)v52 + 3);
      *((_OWORD *)v51 + 2) = *((_OWORD *)v52 + 2);
      *((_OWORD *)v51 + 3) = v59;
      *((_QWORD *)v51 + 8) = *((_QWORD *)v52 + 8);
      v60 = *((_OWORD *)v52 + 1);
      *(_OWORD *)v51 = *(_OWORD *)v52;
      *((_OWORD *)v51 + 1) = v60;
    }
    v61 = v8[20];
    v62 = (char *)v6 + v61;
    v63 = (char *)v7 + v61;
    if (*(_QWORD *)((char *)v7 + v61 + 24))
    {
      v64 = *(_QWORD *)v63;
      v65 = *((_QWORD *)v63 + 1);
      v66 = v63[16];
      sub_2141DD130(*(_QWORD *)v63, v65, v66);
      *(_QWORD *)v62 = v64;
      *((_QWORD *)v62 + 1) = v65;
      v62[16] = v66;
      v67 = *((_QWORD *)v63 + 4);
      *((_QWORD *)v62 + 3) = *((_QWORD *)v63 + 3);
      v68 = *((_QWORD *)v63 + 5);
      v69 = v63[48];
      swift_bridgeObjectRetain();
      sub_2141DD140(v67, v68, v69);
      *((_QWORD *)v62 + 4) = v67;
      *((_QWORD *)v62 + 5) = v68;
      v62[48] = v69;
      *(_OWORD *)(v62 + 56) = *(_OWORD *)(v63 + 56);
    }
    else
    {
      v70 = *((_OWORD *)v63 + 3);
      *((_OWORD *)v62 + 2) = *((_OWORD *)v63 + 2);
      *((_OWORD *)v62 + 3) = v70;
      *((_QWORD *)v62 + 8) = *((_QWORD *)v63 + 8);
      v71 = *((_OWORD *)v63 + 1);
      *(_OWORD *)v62 = *(_OWORD *)v63;
      *((_OWORD *)v62 + 1) = v71;
    }
    v72 = v8[21];
    v73 = (char *)v6 + v72;
    v74 = (char *)v7 + v72;
    if (*(_QWORD *)((char *)v7 + v72 + 24))
    {
      v75 = *(_QWORD *)v74;
      v76 = *((_QWORD *)v74 + 1);
      v77 = v74[16];
      sub_2141DD130(*(_QWORD *)v74, v76, v77);
      *(_QWORD *)v73 = v75;
      *((_QWORD *)v73 + 1) = v76;
      v73[16] = v77;
      v78 = *((_QWORD *)v74 + 4);
      *((_QWORD *)v73 + 3) = *((_QWORD *)v74 + 3);
      v79 = *((_QWORD *)v74 + 5);
      v80 = v74[48];
      swift_bridgeObjectRetain();
      sub_2141DD140(v78, v79, v80);
      *((_QWORD *)v73 + 4) = v78;
      *((_QWORD *)v73 + 5) = v79;
      v73[48] = v80;
      *(_OWORD *)(v73 + 56) = *(_OWORD *)(v74 + 56);
    }
    else
    {
      v81 = *((_OWORD *)v74 + 3);
      *((_OWORD *)v73 + 2) = *((_OWORD *)v74 + 2);
      *((_OWORD *)v73 + 3) = v81;
      *((_QWORD *)v73 + 8) = *((_QWORD *)v74 + 8);
      v82 = *((_OWORD *)v74 + 1);
      *(_OWORD *)v73 = *(_OWORD *)v74;
      *((_OWORD *)v73 + 1) = v82;
    }
    v83 = v8[22];
    v84 = (char *)v6 + v83;
    v85 = (char *)v7 + v83;
    *(_OWORD *)v84 = *(_OWORD *)v85;
    *((_QWORD *)v84 + 2) = *((_QWORD *)v85 + 2);
    v86 = v8[23];
    v87 = (char *)v6 + v86;
    v88 = (char *)v7 + v86;
    *(_OWORD *)v87 = *(_OWORD *)v88;
    *((_QWORD *)v87 + 2) = *((_QWORD *)v88 + 2);
    v89 = v8[24];
    v90 = (char *)v6 + v89;
    v91 = (char *)v7 + v89;
    if (*(_QWORD *)((char *)v7 + v89 + 24))
    {
      v92 = *(_QWORD *)v91;
      v93 = *((_QWORD *)v91 + 1);
      v94 = v91[16];
      sub_2141DD130(*(_QWORD *)v91, v93, v94);
      *(_QWORD *)v90 = v92;
      *((_QWORD *)v90 + 1) = v93;
      v90[16] = v94;
      *((_QWORD *)v90 + 3) = *((_QWORD *)v91 + 3);
      swift_bridgeObjectRetain();
    }
    else
    {
      v95 = *((_OWORD *)v91 + 1);
      *(_OWORD *)v90 = *(_OWORD *)v91;
      *((_OWORD *)v90 + 1) = v95;
    }
    v96 = v8[25];
    v97 = (char *)v6 + v96;
    v98 = (char *)v7 + v96;
    if (*(_QWORD *)((char *)v7 + v96 + 24))
    {
      v99 = *(_QWORD *)v98;
      v100 = *((_QWORD *)v98 + 1);
      v101 = v98[16];
      sub_2141DD130(*(_QWORD *)v98, v100, v101);
      *(_QWORD *)v97 = v99;
      *((_QWORD *)v97 + 1) = v100;
      v97[16] = v101;
      *((_QWORD *)v97 + 3) = *((_QWORD *)v98 + 3);
      swift_bridgeObjectRetain();
    }
    else
    {
      v102 = *((_OWORD *)v98 + 1);
      *(_OWORD *)v97 = *(_OWORD *)v98;
      *((_OWORD *)v97 + 1) = v102;
    }
    v103 = v8[26];
    v104 = (_QWORD *)((char *)v6 + v103);
    v105 = (_QWORD *)((char *)v7 + v103);
    v106 = v105[1];
    *v104 = *v105;
    v104[1] = v106;
    v107 = v8[27];
    v108 = (char *)v6 + v107;
    v109 = (char *)v7 + v107;
    v110 = *((_QWORD *)v109 + 3);
    swift_bridgeObjectRetain();
    if (v110)
    {
      *((_QWORD *)v108 + 3) = v110;
      (**(void (***)(char *, char *, uint64_t))(v110 - 8))(v108, v109, v110);
    }
    else
    {
      v111 = *((_OWORD *)v109 + 1);
      *(_OWORD *)v108 = *(_OWORD *)v109;
      *((_OWORD *)v108 + 1) = v111;
    }
    (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v9 + 56))(v6, 0, 1, v8);
  }
  return a1;
}

uint64_t sub_21439FB04(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, int *);
  int v10;
  int v11;
  int v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  int v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  int v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  void *v29;
  const void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  const void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  uint64_t v96;
  uint64_t v97;
  __int128 *v98;
  __int128 v99;
  uint64_t v100;
  uint64_t v101;
  __int128 *v102;
  __int128 v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char v109;
  __int128 v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char v116;
  __int128 v117;
  uint64_t v118;
  _QWORD *v119;
  _QWORD *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  __int128 v125;
  __int128 v127;
  __int128 v128;
  uint64_t v129;
  __int128 *v130;
  __int128 *v131;
  int v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  uint64_t v137;
  __int128 v138;
  uint64_t v139;
  __int128 v140;
  __int128 v141;
  uint64_t v142;
  void *v143;
  void *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t (*v147)(void *, uint64_t, uint64_t);
  int v148;
  int v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t *v153;
  uint64_t v154;
  uint64_t v155;
  void *v156;
  void *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t (*v160)(void *, uint64_t, uint64_t);
  int v161;
  int v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  char v174;
  uint64_t v175;
  uint64_t v176;
  char v177;
  uint64_t v178;
  uint64_t v179;
  char v180;
  uint64_t v181;
  uint64_t v182;
  char v183;
  uint64_t v184;
  uint64_t v185;
  char v186;
  uint64_t v187;
  uint64_t v188;
  char v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  char v203;
  uint64_t v204;
  uint64_t v205;
  char v206;
  uint64_t v207;
  uint64_t v208;
  char v209;
  uint64_t v210;
  uint64_t v211;
  char v212;
  uint64_t v213;
  uint64_t v214;
  char v215;
  uint64_t v216;
  uint64_t v217;
  char v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  char v232;
  uint64_t v233;
  uint64_t v234;
  char v235;
  uint64_t v236;
  uint64_t v237;
  char v238;
  uint64_t v239;
  uint64_t v240;
  char v241;
  uint64_t v242;
  uint64_t v243;
  char v244;
  uint64_t v245;
  uint64_t v246;
  char v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t *v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  char v261;
  uint64_t v262;
  uint64_t v263;
  char v264;
  uint64_t v265;
  uint64_t v266;
  char v267;
  uint64_t v268;
  uint64_t v269;
  char v270;
  uint64_t v271;
  uint64_t v272;
  char v273;
  uint64_t v274;
  uint64_t v275;
  char v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  __int128 v281;
  __int128 v282;
  uint64_t v283;
  _QWORD *v284;
  _QWORD *v285;
  uint64_t v286;
  _QWORD *v287;
  _QWORD *v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  char v296;
  uint64_t v297;
  uint64_t v298;
  char v299;
  uint64_t v300;
  uint64_t v301;
  char v302;
  __int128 v303;
  __int128 v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  char v312;
  uint64_t v313;
  uint64_t v314;
  char v315;
  uint64_t v316;
  uint64_t v317;
  char v318;
  __int128 v319;
  __int128 v320;
  uint64_t v321;
  _QWORD *v322;
  _QWORD *v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  __int128 v328;
  __int128 v329;

  sub_2141DEA14((uint64_t *)a1, (uint64_t *)a2);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v4 = *(int *)(type metadata accessor for RulesRenderer(0) + 32);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = (int *)type metadata accessor for ChartContentRenderContext.Environment(0);
  v8 = *((_QWORD *)v7 - 1);
  v9 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v8 + 48);
  v10 = v9(v5, 1, v7);
  v11 = v9(v6, 1, v7);
  if (v10)
  {
    if (!v11)
    {
      v12 = *(unsigned __int8 *)(v6 + 40);
      if (v12 == 255)
      {
        v13 = *(_OWORD *)v6;
        v14 = *(_OWORD *)(v6 + 16);
        *(_OWORD *)(v5 + 25) = *(_OWORD *)(v6 + 25);
        *(_OWORD *)v5 = v13;
        *(_OWORD *)(v5 + 16) = v14;
      }
      else if ((v12 & 1) != 0)
      {
        v19 = *(_QWORD *)(v6 + 24);
        *(_QWORD *)(v5 + 24) = v19;
        *(_QWORD *)(v5 + 32) = *(_QWORD *)(v6 + 32);
        (**(void (***)(uint64_t, uint64_t))(v19 - 8))(v5, v6);
        *(_BYTE *)(v5 + 40) = 1;
      }
      else
      {
        *(_QWORD *)v5 = *(_QWORD *)v6;
        *(_BYTE *)(v5 + 40) = 0;
        swift_retain();
      }
      *(_BYTE *)(v5 + 41) = *(_BYTE *)(v6 + 41);
      *(_QWORD *)(v5 + 48) = *(_QWORD *)(v6 + 48);
      *(_DWORD *)(v5 + 56) = *(_DWORD *)(v6 + 56);
      *(_DWORD *)(v5 + 60) = *(_DWORD *)(v6 + 60);
      *(_QWORD *)(v5 + 64) = *(_QWORD *)(v6 + 64);
      *(_QWORD *)(v5 + 72) = *(_QWORD *)(v6 + 72);
      *(_QWORD *)(v5 + 80) = *(_QWORD *)(v6 + 80);
      v20 = *(unsigned __int8 *)(v6 + 128);
      swift_bridgeObjectRetain();
      if (v20 == 255)
      {
        v21 = *(_OWORD *)(v6 + 88);
        v22 = *(_OWORD *)(v6 + 104);
        *(_OWORD *)(v5 + 113) = *(_OWORD *)(v6 + 113);
        *(_OWORD *)(v5 + 88) = v21;
        *(_OWORD *)(v5 + 104) = v22;
      }
      else if ((v20 & 1) != 0)
      {
        *(_QWORD *)(v5 + 88) = *(_QWORD *)(v6 + 88);
        *(_OWORD *)(v5 + 96) = *(_OWORD *)(v6 + 96);
        *(_BYTE *)(v5 + 128) = 1;
        swift_retain();
      }
      else
      {
        v23 = *(_QWORD *)(v6 + 112);
        *(_QWORD *)(v5 + 112) = v23;
        *(_QWORD *)(v5 + 120) = *(_QWORD *)(v6 + 120);
        (**(void (***)(uint64_t, uint64_t))(v23 - 8))(v5 + 88, v6 + 88);
        *(_BYTE *)(v5 + 128) = 0;
      }
      v24 = *(_OWORD *)(v6 + 136);
      *(_BYTE *)(v5 + 152) = *(_BYTE *)(v6 + 152);
      *(_OWORD *)(v5 + 136) = v24;
      v25 = *(_QWORD *)(v6 + 160);
      *(_BYTE *)(v5 + 168) = *(_BYTE *)(v6 + 168);
      *(_QWORD *)(v5 + 160) = v25;
      v26 = *(_OWORD *)(v6 + 176);
      v27 = *(_OWORD *)(v6 + 192);
      *(_BYTE *)(v5 + 208) = *(_BYTE *)(v6 + 208);
      *(_OWORD *)(v5 + 176) = v26;
      *(_OWORD *)(v5 + 192) = v27;
      v28 = v7[11];
      v29 = (void *)(v5 + v28);
      v30 = (const void *)(v6 + v28);
      v31 = sub_214424308();
      v32 = *(_QWORD *)(v31 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31))
      {
        v33 = sub_2141D8BF8(&qword_253F134C8);
        memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v32 + 16))(v29, v30, v31);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
      }
      v34 = v7[12];
      v35 = v5 + v34;
      v36 = (uint64_t *)(v6 + v34);
      v37 = *v36;
      *(_BYTE *)(v35 + 8) = *((_BYTE *)v36 + 8);
      *(_QWORD *)v35 = v37;
      *(_QWORD *)(v5 + v7[13]) = *(_QWORD *)(v6 + v7[13]);
      v38 = v7[14];
      v39 = (void *)(v5 + v38);
      v40 = (const void *)(v6 + v38);
      v41 = sub_214424C68();
      v42 = *(_QWORD *)(v41 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v42 + 48))(v40, 1, v41))
      {
        v43 = sub_2141D8BF8(&qword_253F15C88);
        memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v42 + 16))(v39, v40, v41);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v42 + 56))(v39, 0, 1, v41);
      }
      v44 = v7[15];
      v45 = v5 + v44;
      v46 = v6 + v44;
      *(_QWORD *)v45 = *(_QWORD *)v46;
      *(_WORD *)(v45 + 8) = *(_WORD *)(v46 + 8);
      *(_QWORD *)(v5 + v7[16]) = *(_QWORD *)(v6 + v7[16]);
      *(_QWORD *)(v5 + v7[17]) = *(_QWORD *)(v6 + v7[17]);
      v47 = v7[18];
      v48 = v5 + v47;
      v49 = v6 + v47;
      v50 = *(_QWORD *)(v6 + v47 + 24);
      swift_retain();
      if (v50)
      {
        v51 = *(_QWORD *)v49;
        v52 = *(_QWORD *)(v49 + 8);
        v53 = *(_BYTE *)(v49 + 16);
        sub_2141DD130(*(_QWORD *)v49, v52, v53);
        *(_QWORD *)v48 = v51;
        *(_QWORD *)(v48 + 8) = v52;
        *(_BYTE *)(v48 + 16) = v53;
        *(_QWORD *)(v48 + 24) = *(_QWORD *)(v49 + 24);
        v54 = *(_QWORD *)(v49 + 32);
        v55 = *(_QWORD *)(v49 + 40);
        v56 = *(_BYTE *)(v49 + 48);
        swift_bridgeObjectRetain();
        sub_2141DD140(v54, v55, v56);
        *(_QWORD *)(v48 + 32) = v54;
        *(_QWORD *)(v48 + 40) = v55;
        *(_BYTE *)(v48 + 48) = v56;
        *(_OWORD *)(v48 + 56) = *(_OWORD *)(v49 + 56);
      }
      else
      {
        *(_OWORD *)v48 = *(_OWORD *)v49;
        v57 = *(_OWORD *)(v49 + 16);
        v58 = *(_OWORD *)(v49 + 32);
        v59 = *(_OWORD *)(v49 + 48);
        *(_QWORD *)(v48 + 64) = *(_QWORD *)(v49 + 64);
        *(_OWORD *)(v48 + 32) = v58;
        *(_OWORD *)(v48 + 48) = v59;
        *(_OWORD *)(v48 + 16) = v57;
      }
      v60 = v7[19];
      v61 = v5 + v60;
      v62 = v6 + v60;
      if (*(_QWORD *)(v6 + v60 + 24))
      {
        v63 = *(_QWORD *)v62;
        v64 = *(_QWORD *)(v62 + 8);
        v65 = *(_BYTE *)(v62 + 16);
        sub_2141DD130(*(_QWORD *)v62, v64, v65);
        *(_QWORD *)v61 = v63;
        *(_QWORD *)(v61 + 8) = v64;
        *(_BYTE *)(v61 + 16) = v65;
        *(_QWORD *)(v61 + 24) = *(_QWORD *)(v62 + 24);
        v66 = *(_QWORD *)(v62 + 32);
        v67 = *(_QWORD *)(v62 + 40);
        v68 = *(_BYTE *)(v62 + 48);
        swift_bridgeObjectRetain();
        sub_2141DD140(v66, v67, v68);
        *(_QWORD *)(v61 + 32) = v66;
        *(_QWORD *)(v61 + 40) = v67;
        *(_BYTE *)(v61 + 48) = v68;
        *(_OWORD *)(v61 + 56) = *(_OWORD *)(v62 + 56);
      }
      else
      {
        *(_OWORD *)v61 = *(_OWORD *)v62;
        v69 = *(_OWORD *)(v62 + 16);
        v70 = *(_OWORD *)(v62 + 32);
        v71 = *(_OWORD *)(v62 + 48);
        *(_QWORD *)(v61 + 64) = *(_QWORD *)(v62 + 64);
        *(_OWORD *)(v61 + 32) = v70;
        *(_OWORD *)(v61 + 48) = v71;
        *(_OWORD *)(v61 + 16) = v69;
      }
      v72 = v7[20];
      v73 = v5 + v72;
      v74 = v6 + v72;
      if (*(_QWORD *)(v6 + v72 + 24))
      {
        v75 = *(_QWORD *)v74;
        v76 = *(_QWORD *)(v74 + 8);
        v77 = *(_BYTE *)(v74 + 16);
        sub_2141DD130(*(_QWORD *)v74, v76, v77);
        *(_QWORD *)v73 = v75;
        *(_QWORD *)(v73 + 8) = v76;
        *(_BYTE *)(v73 + 16) = v77;
        *(_QWORD *)(v73 + 24) = *(_QWORD *)(v74 + 24);
        v78 = *(_QWORD *)(v74 + 32);
        v79 = *(_QWORD *)(v74 + 40);
        v80 = *(_BYTE *)(v74 + 48);
        swift_bridgeObjectRetain();
        sub_2141DD140(v78, v79, v80);
        *(_QWORD *)(v73 + 32) = v78;
        *(_QWORD *)(v73 + 40) = v79;
        *(_BYTE *)(v73 + 48) = v80;
        *(_OWORD *)(v73 + 56) = *(_OWORD *)(v74 + 56);
      }
      else
      {
        *(_OWORD *)v73 = *(_OWORD *)v74;
        v81 = *(_OWORD *)(v74 + 16);
        v82 = *(_OWORD *)(v74 + 32);
        v83 = *(_OWORD *)(v74 + 48);
        *(_QWORD *)(v73 + 64) = *(_QWORD *)(v74 + 64);
        *(_OWORD *)(v73 + 32) = v82;
        *(_OWORD *)(v73 + 48) = v83;
        *(_OWORD *)(v73 + 16) = v81;
      }
      v84 = v7[21];
      v85 = v5 + v84;
      v86 = v6 + v84;
      if (*(_QWORD *)(v6 + v84 + 24))
      {
        v87 = *(_QWORD *)v86;
        v88 = *(_QWORD *)(v86 + 8);
        v89 = *(_BYTE *)(v86 + 16);
        sub_2141DD130(*(_QWORD *)v86, v88, v89);
        *(_QWORD *)v85 = v87;
        *(_QWORD *)(v85 + 8) = v88;
        *(_BYTE *)(v85 + 16) = v89;
        *(_QWORD *)(v85 + 24) = *(_QWORD *)(v86 + 24);
        v90 = *(_QWORD *)(v86 + 32);
        v91 = *(_QWORD *)(v86 + 40);
        v92 = *(_BYTE *)(v86 + 48);
        swift_bridgeObjectRetain();
        sub_2141DD140(v90, v91, v92);
        *(_QWORD *)(v85 + 32) = v90;
        *(_QWORD *)(v85 + 40) = v91;
        *(_BYTE *)(v85 + 48) = v92;
        *(_OWORD *)(v85 + 56) = *(_OWORD *)(v86 + 56);
      }
      else
      {
        *(_OWORD *)v85 = *(_OWORD *)v86;
        v93 = *(_OWORD *)(v86 + 16);
        v94 = *(_OWORD *)(v86 + 32);
        v95 = *(_OWORD *)(v86 + 48);
        *(_QWORD *)(v85 + 64) = *(_QWORD *)(v86 + 64);
        *(_OWORD *)(v85 + 32) = v94;
        *(_OWORD *)(v85 + 48) = v95;
        *(_OWORD *)(v85 + 16) = v93;
      }
      v96 = v7[22];
      v97 = v5 + v96;
      v98 = (__int128 *)(v6 + v96);
      v99 = *v98;
      *(_QWORD *)(v97 + 16) = *((_QWORD *)v98 + 2);
      *(_OWORD *)v97 = v99;
      v100 = v7[23];
      v101 = v5 + v100;
      v102 = (__int128 *)(v6 + v100);
      v103 = *v102;
      *(_QWORD *)(v101 + 16) = *((_QWORD *)v102 + 2);
      *(_OWORD *)v101 = v103;
      v104 = v7[24];
      v105 = v5 + v104;
      v106 = v6 + v104;
      if (*(_QWORD *)(v6 + v104 + 24))
      {
        v107 = *(_QWORD *)v106;
        v108 = *(_QWORD *)(v106 + 8);
        v109 = *(_BYTE *)(v106 + 16);
        sub_2141DD130(*(_QWORD *)v106, v108, v109);
        *(_QWORD *)v105 = v107;
        *(_QWORD *)(v105 + 8) = v108;
        *(_BYTE *)(v105 + 16) = v109;
        *(_QWORD *)(v105 + 24) = *(_QWORD *)(v106 + 24);
        swift_bridgeObjectRetain();
      }
      else
      {
        v110 = *(_OWORD *)(v106 + 16);
        *(_OWORD *)v105 = *(_OWORD *)v106;
        *(_OWORD *)(v105 + 16) = v110;
      }
      v111 = v7[25];
      v112 = v5 + v111;
      v113 = v6 + v111;
      if (*(_QWORD *)(v6 + v111 + 24))
      {
        v114 = *(_QWORD *)v113;
        v115 = *(_QWORD *)(v113 + 8);
        v116 = *(_BYTE *)(v113 + 16);
        sub_2141DD130(*(_QWORD *)v113, v115, v116);
        *(_QWORD *)v112 = v114;
        *(_QWORD *)(v112 + 8) = v115;
        *(_BYTE *)(v112 + 16) = v116;
        *(_QWORD *)(v112 + 24) = *(_QWORD *)(v113 + 24);
        swift_bridgeObjectRetain();
      }
      else
      {
        v117 = *(_OWORD *)(v113 + 16);
        *(_OWORD *)v112 = *(_OWORD *)v113;
        *(_OWORD *)(v112 + 16) = v117;
      }
      v118 = v7[26];
      v119 = (_QWORD *)(v5 + v118);
      v120 = (_QWORD *)(v6 + v118);
      *v119 = *v120;
      v119[1] = v120[1];
      v121 = v7[27];
      v122 = v5 + v121;
      v123 = v6 + v121;
      v124 = *(_QWORD *)(v123 + 24);
      swift_bridgeObjectRetain();
      if (v124)
      {
        *(_QWORD *)(v122 + 24) = v124;
        (**(void (***)(uint64_t, uint64_t, uint64_t))(v124 - 8))(v122, v123, v124);
      }
      else
      {
        v125 = *(_OWORD *)(v123 + 16);
        *(_OWORD *)v122 = *(_OWORD *)v123;
        *(_OWORD *)(v122 + 16) = v125;
      }
      (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v8 + 56))(v5, 0, 1, v7);
      return a1;
    }
LABEL_7:
    v15 = sub_2141D8BF8(qword_254D69B70);
    memcpy((void *)v5, (const void *)v6, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    return a1;
  }
  if (v11)
  {
    sub_2141DD370(v5, type metadata accessor for ChartContentRenderContext.Environment);
    goto LABEL_7;
  }
  v16 = *(unsigned __int8 *)(v6 + 40);
  if (*(unsigned __int8 *)(v5 + 40) == 255)
  {
    if (v16 == 255)
    {
      v127 = *(_OWORD *)v6;
      v128 = *(_OWORD *)(v6 + 16);
      *(_OWORD *)(v5 + 25) = *(_OWORD *)(v6 + 25);
      *(_OWORD *)v5 = v127;
      *(_OWORD *)(v5 + 16) = v128;
      goto LABEL_55;
    }
    if ((v16 & 1) != 0)
      goto LABEL_52;
LABEL_54:
    *(_QWORD *)v5 = *(_QWORD *)v6;
    *(_BYTE *)(v5 + 40) = 0;
    swift_retain();
    goto LABEL_55;
  }
  if (v16 == 255)
  {
    sub_21420D6FC(v5);
    v17 = *(_OWORD *)(v6 + 25);
    v18 = *(_OWORD *)(v6 + 16);
    *(_OWORD *)v5 = *(_OWORD *)v6;
    *(_OWORD *)(v5 + 16) = v18;
    *(_OWORD *)(v5 + 25) = v17;
    goto LABEL_55;
  }
  if (a1 != a2)
  {
    sub_21420D6FC(v5);
    if ((*(_BYTE *)(v6 + 40) & 1) != 0)
    {
LABEL_52:
      v129 = *(_QWORD *)(v6 + 24);
      *(_QWORD *)(v5 + 24) = v129;
      *(_QWORD *)(v5 + 32) = *(_QWORD *)(v6 + 32);
      (**(void (***)(uint64_t, uint64_t))(v129 - 8))(v5, v6);
      *(_BYTE *)(v5 + 40) = 1;
      goto LABEL_55;
    }
    goto LABEL_54;
  }
LABEL_55:
  *(_BYTE *)(v5 + 41) = *(_BYTE *)(v6 + 41);
  *(_QWORD *)(v5 + 48) = *(_QWORD *)(v6 + 48);
  *(_DWORD *)(v5 + 56) = *(_DWORD *)(v6 + 56);
  *(_DWORD *)(v5 + 60) = *(_DWORD *)(v6 + 60);
  *(_QWORD *)(v5 + 64) = *(_QWORD *)(v6 + 64);
  *(_QWORD *)(v5 + 72) = *(_QWORD *)(v6 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v5 + 80) = *(_QWORD *)(v6 + 80);
  v130 = (__int128 *)(v5 + 88);
  v131 = (__int128 *)(v6 + 88);
  v132 = *(unsigned __int8 *)(v6 + 128);
  if (*(unsigned __int8 *)(v5 + 128) == 255)
  {
    if (v132 == 255)
    {
      v135 = *v131;
      v136 = *(_OWORD *)(v6 + 104);
      *(_OWORD *)(v5 + 113) = *(_OWORD *)(v6 + 113);
      *v130 = v135;
      *(_OWORD *)(v5 + 104) = v136;
      goto LABEL_65;
    }
    if ((v132 & 1) != 0)
      goto LABEL_62;
LABEL_64:
    v137 = *(_QWORD *)(v6 + 112);
    *(_QWORD *)(v5 + 112) = v137;
    *(_QWORD *)(v5 + 120) = *(_QWORD *)(v6 + 120);
    (**(void (***)(uint64_t, uint64_t))(v137 - 8))(v5 + 88, v6 + 88);
    *(_BYTE *)(v5 + 128) = 0;
    goto LABEL_65;
  }
  if (v132 == 255)
  {
    sub_21420D730(v5 + 88);
    v133 = *(_OWORD *)(v6 + 113);
    v134 = *(_OWORD *)(v6 + 104);
    *v130 = *v131;
    *(_OWORD *)(v5 + 104) = v134;
    *(_OWORD *)(v5 + 113) = v133;
    goto LABEL_65;
  }
  if (a1 != a2)
  {
    sub_21420D730(v5 + 88);
    if ((*(_BYTE *)(v6 + 128) & 1) != 0)
    {
LABEL_62:
      *(_QWORD *)(v5 + 88) = *(_QWORD *)(v6 + 88);
      *(_OWORD *)(v5 + 96) = *(_OWORD *)(v6 + 96);
      *(_BYTE *)(v5 + 128) = 1;
      swift_retain();
      goto LABEL_65;
    }
    goto LABEL_64;
  }
LABEL_65:
  v138 = *(_OWORD *)(v6 + 136);
  *(_BYTE *)(v5 + 152) = *(_BYTE *)(v6 + 152);
  *(_OWORD *)(v5 + 136) = v138;
  v139 = *(_QWORD *)(v6 + 160);
  *(_BYTE *)(v5 + 168) = *(_BYTE *)(v6 + 168);
  *(_QWORD *)(v5 + 160) = v139;
  v140 = *(_OWORD *)(v6 + 176);
  v141 = *(_OWORD *)(v6 + 192);
  *(_BYTE *)(v5 + 208) = *(_BYTE *)(v6 + 208);
  *(_OWORD *)(v5 + 176) = v140;
  *(_OWORD *)(v5 + 192) = v141;
  v142 = v7[11];
  v143 = (void *)(v5 + v142);
  v144 = (void *)(v6 + v142);
  v145 = sub_214424308();
  v146 = *(_QWORD *)(v145 - 8);
  v147 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v146 + 48);
  v148 = v147(v143, 1, v145);
  v149 = v147(v144, 1, v145);
  if (v148)
  {
    if (!v149)
    {
      (*(void (**)(void *, void *, uint64_t))(v146 + 16))(v143, v144, v145);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v146 + 56))(v143, 0, 1, v145);
      goto LABEL_71;
    }
    goto LABEL_70;
  }
  if (v149)
  {
    (*(void (**)(void *, uint64_t))(v146 + 8))(v143, v145);
LABEL_70:
    v150 = sub_2141D8BF8(&qword_253F134C8);
    memcpy(v143, v144, *(_QWORD *)(*(_QWORD *)(v150 - 8) + 64));
    goto LABEL_71;
  }
  (*(void (**)(void *, void *, uint64_t))(v146 + 24))(v143, v144, v145);
LABEL_71:
  v151 = v7[12];
  v152 = v5 + v151;
  v153 = (uint64_t *)(v6 + v151);
  v154 = *v153;
  *(_BYTE *)(v152 + 8) = *((_BYTE *)v153 + 8);
  *(_QWORD *)v152 = v154;
  *(_QWORD *)(v5 + v7[13]) = *(_QWORD *)(v6 + v7[13]);
  v155 = v7[14];
  v156 = (void *)(v5 + v155);
  v157 = (void *)(v6 + v155);
  v158 = sub_214424C68();
  v159 = *(_QWORD *)(v158 - 8);
  v160 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v159 + 48);
  v161 = v160(v156, 1, v158);
  v162 = v160(v157, 1, v158);
  if (v161)
  {
    if (!v162)
    {
      (*(void (**)(void *, void *, uint64_t))(v159 + 16))(v156, v157, v158);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v159 + 56))(v156, 0, 1, v158);
      goto LABEL_77;
    }
    goto LABEL_76;
  }
  if (v162)
  {
    (*(void (**)(void *, uint64_t))(v159 + 8))(v156, v158);
LABEL_76:
    v163 = sub_2141D8BF8(&qword_253F15C88);
    memcpy(v156, v157, *(_QWORD *)(*(_QWORD *)(v163 - 8) + 64));
    goto LABEL_77;
  }
  (*(void (**)(void *, void *, uint64_t))(v159 + 24))(v156, v157, v158);
LABEL_77:
  v164 = v7[15];
  v165 = v5 + v164;
  v166 = v6 + v164;
  *(_QWORD *)(v5 + v164) = *(_QWORD *)(v6 + v164);
  swift_retain();
  swift_release();
  *(_BYTE *)(v165 + 8) = *(_BYTE *)(v166 + 8);
  *(_BYTE *)(v165 + 9) = *(_BYTE *)(v166 + 9);
  *(_QWORD *)(v5 + v7[16]) = *(_QWORD *)(v6 + v7[16]);
  *(_QWORD *)(v5 + v7[17]) = *(_QWORD *)(v6 + v7[17]);
  v167 = v7[18];
  v168 = v5 + v167;
  v169 = v6 + v167;
  v170 = *(_QWORD *)(v5 + v167 + 24);
  v171 = *(_QWORD *)(v6 + v167 + 24);
  if (v170)
  {
    if (v171)
    {
      v172 = *(_QWORD *)v169;
      v173 = *(_QWORD *)(v169 + 8);
      v174 = *(_BYTE *)(v169 + 16);
      sub_2141DD130(*(_QWORD *)v169, v173, v174);
      v175 = *(_QWORD *)v168;
      v176 = *(_QWORD *)(v168 + 8);
      v177 = *(_BYTE *)(v168 + 16);
      *(_QWORD *)v168 = v172;
      *(_QWORD *)(v168 + 8) = v173;
      *(_BYTE *)(v168 + 16) = v174;
      sub_2141ED0BC(v175, v176, v177);
      *(_QWORD *)(v168 + 24) = *(_QWORD *)(v169 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v178 = *(_QWORD *)(v169 + 32);
      v179 = *(_QWORD *)(v169 + 40);
      v180 = *(_BYTE *)(v169 + 48);
      sub_2141DD140(v178, v179, v180);
      v181 = *(_QWORD *)(v168 + 32);
      v182 = *(_QWORD *)(v168 + 40);
      *(_QWORD *)(v168 + 32) = v178;
      *(_QWORD *)(v168 + 40) = v179;
      v183 = *(_BYTE *)(v168 + 48);
      *(_BYTE *)(v168 + 48) = v180;
      sub_2141EF1B0(v181, v182, v183);
LABEL_82:
      *(_OWORD *)(v168 + 56) = *(_OWORD *)(v169 + 56);
      goto LABEL_87;
    }
    sub_21420D764(v168);
    *(_OWORD *)v168 = *(_OWORD *)v169;
    v191 = *(_OWORD *)(v169 + 32);
    v190 = *(_OWORD *)(v169 + 48);
    v192 = *(_OWORD *)(v169 + 16);
    *(_QWORD *)(v168 + 64) = *(_QWORD *)(v169 + 64);
    *(_OWORD *)(v168 + 32) = v191;
    *(_OWORD *)(v168 + 48) = v190;
    *(_OWORD *)(v168 + 16) = v192;
  }
  else
  {
    if (v171)
    {
      v184 = *(_QWORD *)v169;
      v185 = *(_QWORD *)(v169 + 8);
      v186 = *(_BYTE *)(v169 + 16);
      sub_2141DD130(*(_QWORD *)v169, v185, v186);
      *(_QWORD *)v168 = v184;
      *(_QWORD *)(v168 + 8) = v185;
      *(_BYTE *)(v168 + 16) = v186;
      *(_QWORD *)(v168 + 24) = *(_QWORD *)(v169 + 24);
      v187 = *(_QWORD *)(v169 + 32);
      v188 = *(_QWORD *)(v169 + 40);
      v189 = *(_BYTE *)(v169 + 48);
      swift_bridgeObjectRetain();
      sub_2141DD140(v187, v188, v189);
      *(_QWORD *)(v168 + 32) = v187;
      *(_QWORD *)(v168 + 40) = v188;
      *(_BYTE *)(v168 + 48) = v189;
      goto LABEL_82;
    }
    *(_OWORD *)v168 = *(_OWORD *)v169;
    v193 = *(_OWORD *)(v169 + 16);
    v194 = *(_OWORD *)(v169 + 32);
    v195 = *(_OWORD *)(v169 + 48);
    *(_QWORD *)(v168 + 64) = *(_QWORD *)(v169 + 64);
    *(_OWORD *)(v168 + 32) = v194;
    *(_OWORD *)(v168 + 48) = v195;
    *(_OWORD *)(v168 + 16) = v193;
  }
LABEL_87:
  v196 = v7[19];
  v197 = v5 + v196;
  v198 = v6 + v196;
  v199 = *(_QWORD *)(v5 + v196 + 24);
  v200 = *(_QWORD *)(v6 + v196 + 24);
  if (v199)
  {
    if (v200)
    {
      v201 = *(_QWORD *)v198;
      v202 = *(_QWORD *)(v198 + 8);
      v203 = *(_BYTE *)(v198 + 16);
      sub_2141DD130(*(_QWORD *)v198, v202, v203);
      v204 = *(_QWORD *)v197;
      v205 = *(_QWORD *)(v197 + 8);
      v206 = *(_BYTE *)(v197 + 16);
      *(_QWORD *)v197 = v201;
      *(_QWORD *)(v197 + 8) = v202;
      *(_BYTE *)(v197 + 16) = v203;
      sub_2141ED0BC(v204, v205, v206);
      *(_QWORD *)(v197 + 24) = *(_QWORD *)(v198 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v207 = *(_QWORD *)(v198 + 32);
      v208 = *(_QWORD *)(v198 + 40);
      v209 = *(_BYTE *)(v198 + 48);
      sub_2141DD140(v207, v208, v209);
      v210 = *(_QWORD *)(v197 + 32);
      v211 = *(_QWORD *)(v197 + 40);
      *(_QWORD *)(v197 + 32) = v207;
      *(_QWORD *)(v197 + 40) = v208;
      v212 = *(_BYTE *)(v197 + 48);
      *(_BYTE *)(v197 + 48) = v209;
      sub_2141EF1B0(v210, v211, v212);
LABEL_92:
      *(_OWORD *)(v197 + 56) = *(_OWORD *)(v198 + 56);
      goto LABEL_95;
    }
    sub_21420D764(v197);
    *(_OWORD *)v197 = *(_OWORD *)v198;
    v220 = *(_OWORD *)(v198 + 32);
    v219 = *(_OWORD *)(v198 + 48);
    v221 = *(_OWORD *)(v198 + 16);
    *(_QWORD *)(v197 + 64) = *(_QWORD *)(v198 + 64);
    *(_OWORD *)(v197 + 32) = v220;
    *(_OWORD *)(v197 + 48) = v219;
    *(_OWORD *)(v197 + 16) = v221;
  }
  else
  {
    if (v200)
    {
      v213 = *(_QWORD *)v198;
      v214 = *(_QWORD *)(v198 + 8);
      v215 = *(_BYTE *)(v198 + 16);
      sub_2141DD130(*(_QWORD *)v198, v214, v215);
      *(_QWORD *)v197 = v213;
      *(_QWORD *)(v197 + 8) = v214;
      *(_BYTE *)(v197 + 16) = v215;
      *(_QWORD *)(v197 + 24) = *(_QWORD *)(v198 + 24);
      v216 = *(_QWORD *)(v198 + 32);
      v217 = *(_QWORD *)(v198 + 40);
      v218 = *(_BYTE *)(v198 + 48);
      swift_bridgeObjectRetain();
      sub_2141DD140(v216, v217, v218);
      *(_QWORD *)(v197 + 32) = v216;
      *(_QWORD *)(v197 + 40) = v217;
      *(_BYTE *)(v197 + 48) = v218;
      goto LABEL_92;
    }
    *(_OWORD *)v197 = *(_OWORD *)v198;
    v222 = *(_OWORD *)(v198 + 16);
    v223 = *(_OWORD *)(v198 + 32);
    v224 = *(_OWORD *)(v198 + 48);
    *(_QWORD *)(v197 + 64) = *(_QWORD *)(v198 + 64);
    *(_OWORD *)(v197 + 32) = v223;
    *(_OWORD *)(v197 + 48) = v224;
    *(_OWORD *)(v197 + 16) = v222;
  }
LABEL_95:
  v225 = v7[20];
  v226 = v5 + v225;
  v227 = v6 + v225;
  v228 = *(_QWORD *)(v5 + v225 + 24);
  v229 = *(_QWORD *)(v6 + v225 + 24);
  if (v228)
  {
    if (v229)
    {
      v230 = *(_QWORD *)v227;
      v231 = *(_QWORD *)(v227 + 8);
      v232 = *(_BYTE *)(v227 + 16);
      sub_2141DD130(*(_QWORD *)v227, v231, v232);
      v233 = *(_QWORD *)v226;
      v234 = *(_QWORD *)(v226 + 8);
      v235 = *(_BYTE *)(v226 + 16);
      *(_QWORD *)v226 = v230;
      *(_QWORD *)(v226 + 8) = v231;
      *(_BYTE *)(v226 + 16) = v232;
      sub_2141ED0BC(v233, v234, v235);
      *(_QWORD *)(v226 + 24) = *(_QWORD *)(v227 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v236 = *(_QWORD *)(v227 + 32);
      v237 = *(_QWORD *)(v227 + 40);
      v238 = *(_BYTE *)(v227 + 48);
      sub_2141DD140(v236, v237, v238);
      v239 = *(_QWORD *)(v226 + 32);
      v240 = *(_QWORD *)(v226 + 40);
      *(_QWORD *)(v226 + 32) = v236;
      *(_QWORD *)(v226 + 40) = v237;
      v241 = *(_BYTE *)(v226 + 48);
      *(_BYTE *)(v226 + 48) = v238;
      sub_2141EF1B0(v239, v240, v241);
LABEL_100:
      *(_OWORD *)(v226 + 56) = *(_OWORD *)(v227 + 56);
      goto LABEL_103;
    }
    sub_21420D764(v226);
    *(_OWORD *)v226 = *(_OWORD *)v227;
    v249 = *(_OWORD *)(v227 + 32);
    v248 = *(_OWORD *)(v227 + 48);
    v250 = *(_OWORD *)(v227 + 16);
    *(_QWORD *)(v226 + 64) = *(_QWORD *)(v227 + 64);
    *(_OWORD *)(v226 + 32) = v249;
    *(_OWORD *)(v226 + 48) = v248;
    *(_OWORD *)(v226 + 16) = v250;
  }
  else
  {
    if (v229)
    {
      v242 = *(_QWORD *)v227;
      v243 = *(_QWORD *)(v227 + 8);
      v244 = *(_BYTE *)(v227 + 16);
      sub_2141DD130(*(_QWORD *)v227, v243, v244);
      *(_QWORD *)v226 = v242;
      *(_QWORD *)(v226 + 8) = v243;
      *(_BYTE *)(v226 + 16) = v244;
      *(_QWORD *)(v226 + 24) = *(_QWORD *)(v227 + 24);
      v245 = *(_QWORD *)(v227 + 32);
      v246 = *(_QWORD *)(v227 + 40);
      v247 = *(_BYTE *)(v227 + 48);
      swift_bridgeObjectRetain();
      sub_2141DD140(v245, v246, v247);
      *(_QWORD *)(v226 + 32) = v245;
      *(_QWORD *)(v226 + 40) = v246;
      *(_BYTE *)(v226 + 48) = v247;
      goto LABEL_100;
    }
    *(_OWORD *)v226 = *(_OWORD *)v227;
    v251 = *(_OWORD *)(v227 + 16);
    v252 = *(_OWORD *)(v227 + 32);
    v253 = *(_OWORD *)(v227 + 48);
    *(_QWORD *)(v226 + 64) = *(_QWORD *)(v227 + 64);
    *(_OWORD *)(v226 + 32) = v252;
    *(_OWORD *)(v226 + 48) = v253;
    *(_OWORD *)(v226 + 16) = v251;
  }
LABEL_103:
  v254 = v7[21];
  v255 = v5 + v254;
  v256 = (uint64_t *)(v6 + v254);
  v257 = *(_QWORD *)(v5 + v254 + 24);
  v258 = *(_QWORD *)(v6 + v254 + 24);
  if (v257)
  {
    if (!v258)
    {
      sub_21420D764(v255);
      *(_OWORD *)v255 = *(_OWORD *)v256;
      v278 = *((_OWORD *)v256 + 2);
      v277 = *((_OWORD *)v256 + 3);
      v279 = *((_OWORD *)v256 + 1);
      *(_QWORD *)(v255 + 64) = v256[8];
      *(_OWORD *)(v255 + 32) = v278;
      *(_OWORD *)(v255 + 48) = v277;
      *(_OWORD *)(v255 + 16) = v279;
      goto LABEL_111;
    }
    v259 = *v256;
    v260 = v256[1];
    v261 = *((_BYTE *)v256 + 16);
    sub_2141DD130(*v256, v260, v261);
    v262 = *(_QWORD *)v255;
    v263 = *(_QWORD *)(v255 + 8);
    v264 = *(_BYTE *)(v255 + 16);
    *(_QWORD *)v255 = v259;
    *(_QWORD *)(v255 + 8) = v260;
    *(_BYTE *)(v255 + 16) = v261;
    sub_2141ED0BC(v262, v263, v264);
    *(_QWORD *)(v255 + 24) = v256[3];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v265 = v256[4];
    v266 = v256[5];
    v267 = *((_BYTE *)v256 + 48);
    sub_2141DD140(v265, v266, v267);
    v268 = *(_QWORD *)(v255 + 32);
    v269 = *(_QWORD *)(v255 + 40);
    *(_QWORD *)(v255 + 32) = v265;
    *(_QWORD *)(v255 + 40) = v266;
    v270 = *(_BYTE *)(v255 + 48);
    *(_BYTE *)(v255 + 48) = v267;
    sub_2141EF1B0(v268, v269, v270);
  }
  else
  {
    if (!v258)
    {
      *(_OWORD *)v255 = *(_OWORD *)v256;
      v280 = *((_OWORD *)v256 + 1);
      v281 = *((_OWORD *)v256 + 2);
      v282 = *((_OWORD *)v256 + 3);
      *(_QWORD *)(v255 + 64) = v256[8];
      *(_OWORD *)(v255 + 32) = v281;
      *(_OWORD *)(v255 + 48) = v282;
      *(_OWORD *)(v255 + 16) = v280;
      goto LABEL_111;
    }
    v271 = *v256;
    v272 = v256[1];
    v273 = *((_BYTE *)v256 + 16);
    sub_2141DD130(*v256, v272, v273);
    *(_QWORD *)v255 = v271;
    *(_QWORD *)(v255 + 8) = v272;
    *(_BYTE *)(v255 + 16) = v273;
    *(_QWORD *)(v255 + 24) = v256[3];
    v274 = v256[4];
    v275 = v256[5];
    v276 = *((_BYTE *)v256 + 48);
    swift_bridgeObjectRetain();
    sub_2141DD140(v274, v275, v276);
    *(_QWORD *)(v255 + 32) = v274;
    *(_QWORD *)(v255 + 40) = v275;
    *(_BYTE *)(v255 + 48) = v276;
  }
  *(_OWORD *)(v255 + 56) = *(_OWORD *)(v256 + 7);
LABEL_111:
  v283 = v7[22];
  v284 = (_QWORD *)(v5 + v283);
  v285 = (_QWORD *)(v6 + v283);
  *v284 = *v285;
  v284[1] = v285[1];
  v284[2] = v285[2];
  v286 = v7[23];
  v287 = (_QWORD *)(v5 + v286);
  v288 = (_QWORD *)(v6 + v286);
  *v287 = *v288;
  v287[1] = v288[1];
  v287[2] = v288[2];
  v289 = v7[24];
  v290 = v5 + v289;
  v291 = v6 + v289;
  v292 = *(_QWORD *)(v5 + v289 + 24);
  v293 = *(_QWORD *)(v6 + v289 + 24);
  if (v292)
  {
    if (v293)
    {
      v294 = *(_QWORD *)v291;
      v295 = *(_QWORD *)(v291 + 8);
      v296 = *(_BYTE *)(v291 + 16);
      sub_2141DD130(*(_QWORD *)v291, v295, v296);
      v297 = *(_QWORD *)v290;
      v298 = *(_QWORD *)(v290 + 8);
      v299 = *(_BYTE *)(v290 + 16);
      *(_QWORD *)v290 = v294;
      *(_QWORD *)(v290 + 8) = v295;
      *(_BYTE *)(v290 + 16) = v296;
      sub_2141ED0BC(v297, v298, v299);
      *(_QWORD *)(v290 + 24) = *(_QWORD *)(v291 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_21420D798(v290);
      v303 = *(_OWORD *)(v291 + 16);
      *(_OWORD *)v290 = *(_OWORD *)v291;
      *(_OWORD *)(v290 + 16) = v303;
    }
  }
  else if (v293)
  {
    v300 = *(_QWORD *)v291;
    v301 = *(_QWORD *)(v291 + 8);
    v302 = *(_BYTE *)(v291 + 16);
    sub_2141DD130(*(_QWORD *)v291, v301, v302);
    *(_QWORD *)v290 = v300;
    *(_QWORD *)(v290 + 8) = v301;
    *(_BYTE *)(v290 + 16) = v302;
    *(_QWORD *)(v290 + 24) = *(_QWORD *)(v291 + 24);
    swift_bridgeObjectRetain();
  }
  else
  {
    v304 = *(_OWORD *)(v291 + 16);
    *(_OWORD *)v290 = *(_OWORD *)v291;
    *(_OWORD *)(v290 + 16) = v304;
  }
  v305 = v7[25];
  v306 = v5 + v305;
  v307 = v6 + v305;
  v308 = *(_QWORD *)(v5 + v305 + 24);
  v309 = *(_QWORD *)(v6 + v305 + 24);
  if (v308)
  {
    if (v309)
    {
      v310 = *(_QWORD *)v307;
      v311 = *(_QWORD *)(v307 + 8);
      v312 = *(_BYTE *)(v307 + 16);
      sub_2141DD130(*(_QWORD *)v307, v311, v312);
      v313 = *(_QWORD *)v306;
      v314 = *(_QWORD *)(v306 + 8);
      v315 = *(_BYTE *)(v306 + 16);
      *(_QWORD *)v306 = v310;
      *(_QWORD *)(v306 + 8) = v311;
      *(_BYTE *)(v306 + 16) = v312;
      sub_2141ED0BC(v313, v314, v315);
      *(_QWORD *)(v306 + 24) = *(_QWORD *)(v307 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_21420D798(v306);
      v319 = *(_OWORD *)(v307 + 16);
      *(_OWORD *)v306 = *(_OWORD *)v307;
      *(_OWORD *)(v306 + 16) = v319;
    }
  }
  else if (v309)
  {
    v316 = *(_QWORD *)v307;
    v317 = *(_QWORD *)(v307 + 8);
    v318 = *(_BYTE *)(v307 + 16);
    sub_2141DD130(*(_QWORD *)v307, v317, v318);
    *(_QWORD *)v306 = v316;
    *(_QWORD *)(v306 + 8) = v317;
    *(_BYTE *)(v306 + 16) = v318;
    *(_QWORD *)(v306 + 24) = *(_QWORD *)(v307 + 24);
    swift_bridgeObjectRetain();
  }
  else
  {
    v320 = *(_OWORD *)(v307 + 16);
    *(_OWORD *)v306 = *(_OWORD *)v307;
    *(_OWORD *)(v306 + 16) = v320;
  }
  v321 = v7[26];
  v322 = (_QWORD *)(v5 + v321);
  v323 = (_QWORD *)(v6 + v321);
  *v322 = *v323;
  v322[1] = v323[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v324 = v7[27];
  v325 = v5 + v324;
  v326 = v6 + v324;
  v327 = *(_QWORD *)(v326 + 24);
  if (*(_QWORD *)(v325 + 24))
  {
    if (v327)
    {
      sub_21420D7CC((uint64_t *)v325, (uint64_t *)v326);
    }
    else
    {
      sub_21420D92C(v325);
      v328 = *(_OWORD *)(v326 + 16);
      *(_OWORD *)v325 = *(_OWORD *)v326;
      *(_OWORD *)(v325 + 16) = v328;
    }
  }
  else if (v327)
  {
    *(_QWORD *)(v325 + 24) = v327;
    (**(void (***)(uint64_t, uint64_t))(v327 - 8))(v325, v326);
  }
  else
  {
    v329 = *(_OWORD *)(v326 + 16);
    *(_OWORD *)v325 = *(_OWORD *)v326;
    *(_OWORD *)(v325 + 16) = v329;
  }
  return a1;
}

uint64_t sub_2143A0D34(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  _OWORD *v6;
  _OWORD *v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  char *v40;
  char *v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  char *v45;
  char *v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  char *v50;
  char *v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  _OWORD *v61;
  _OWORD *v62;
  __int128 v63;
  uint64_t v64;
  _OWORD *v65;
  _OWORD *v66;
  __int128 v67;
  uint64_t v68;
  _OWORD *v69;
  _OWORD *v70;
  __int128 v71;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  v5 = *(int *)(type metadata accessor for RulesRenderer(0) + 32);
  v6 = (_OWORD *)(a1 + v5);
  v7 = (_OWORD *)(a2 + v5);
  v8 = (int *)type metadata accessor for ChartContentRenderContext.Environment(0);
  v9 = *((_QWORD *)v8 - 1);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v9 + 48))(v7, 1, v8))
  {
    v10 = sub_2141D8BF8(qword_254D69B70);
    memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  else
  {
    v11 = v7[1];
    *v6 = *v7;
    v6[1] = v11;
    *(_OWORD *)((char *)v6 + 25) = *(_OWORD *)((char *)v7 + 25);
    *((_BYTE *)v6 + 41) = *((_BYTE *)v7 + 41);
    v12 = v7[4];
    v6[3] = v7[3];
    v6[4] = v12;
    *((_QWORD *)v6 + 10) = *((_QWORD *)v7 + 10);
    v13 = *(_OWORD *)((char *)v7 + 88);
    v14 = *(_OWORD *)((char *)v7 + 104);
    *(_OWORD *)((char *)v6 + 113) = *(_OWORD *)((char *)v7 + 113);
    *(_OWORD *)((char *)v6 + 104) = v14;
    *(_OWORD *)((char *)v6 + 88) = v13;
    *(_OWORD *)((char *)v6 + 136) = *(_OWORD *)((char *)v7 + 136);
    *((_BYTE *)v6 + 152) = *((_BYTE *)v7 + 152);
    *((_QWORD *)v6 + 20) = *((_QWORD *)v7 + 20);
    *((_BYTE *)v6 + 168) = *((_BYTE *)v7 + 168);
    v15 = v7[12];
    v6[11] = v7[11];
    v6[12] = v15;
    *((_BYTE *)v6 + 208) = *((_BYTE *)v7 + 208);
    v16 = v8[11];
    v17 = (char *)v6 + v16;
    v18 = (char *)v7 + v16;
    v19 = sub_214424308();
    v20 = *(_QWORD *)(v19 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
    {
      v21 = sub_2141D8BF8(&qword_253F134C8);
      memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v17, v18, v19);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
    }
    v22 = v8[12];
    v23 = (char *)v6 + v22;
    v24 = (char *)v7 + v22;
    *(_QWORD *)v23 = *(_QWORD *)v24;
    v23[8] = v24[8];
    *(_QWORD *)((char *)v6 + v8[13]) = *(_QWORD *)((char *)v7 + v8[13]);
    v25 = v8[14];
    v26 = (char *)v6 + v25;
    v27 = (char *)v7 + v25;
    v28 = sub_214424C68();
    v29 = *(_QWORD *)(v28 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
    {
      v30 = sub_2141D8BF8(&qword_253F15C88);
      memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v26, v27, v28);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
    }
    v31 = v8[15];
    v32 = (char *)v6 + v31;
    v33 = (char *)v7 + v31;
    *(_QWORD *)v32 = *(_QWORD *)v33;
    *((_WORD *)v32 + 4) = *((_WORD *)v33 + 4);
    *(_QWORD *)((char *)v6 + v8[16]) = *(_QWORD *)((char *)v7 + v8[16]);
    *(_QWORD *)((char *)v6 + v8[17]) = *(_QWORD *)((char *)v7 + v8[17]);
    v34 = v8[18];
    v35 = (char *)v6 + v34;
    v36 = (char *)v7 + v34;
    v37 = *((_OWORD *)v36 + 3);
    *((_OWORD *)v35 + 2) = *((_OWORD *)v36 + 2);
    *((_OWORD *)v35 + 3) = v37;
    *((_QWORD *)v35 + 8) = *((_QWORD *)v36 + 8);
    v38 = *((_OWORD *)v36 + 1);
    *(_OWORD *)v35 = *(_OWORD *)v36;
    *((_OWORD *)v35 + 1) = v38;
    v39 = v8[19];
    v40 = (char *)v6 + v39;
    v41 = (char *)v7 + v39;
    *((_QWORD *)v40 + 8) = *((_QWORD *)v41 + 8);
    v42 = *((_OWORD *)v41 + 3);
    *((_OWORD *)v40 + 2) = *((_OWORD *)v41 + 2);
    *((_OWORD *)v40 + 3) = v42;
    v43 = *((_OWORD *)v41 + 1);
    *(_OWORD *)v40 = *(_OWORD *)v41;
    *((_OWORD *)v40 + 1) = v43;
    v44 = v8[20];
    v45 = (char *)v6 + v44;
    v46 = (char *)v7 + v44;
    v47 = *((_OWORD *)v46 + 3);
    *((_OWORD *)v45 + 2) = *((_OWORD *)v46 + 2);
    *((_OWORD *)v45 + 3) = v47;
    *((_QWORD *)v45 + 8) = *((_QWORD *)v46 + 8);
    v48 = *((_OWORD *)v46 + 1);
    *(_OWORD *)v45 = *(_OWORD *)v46;
    *((_OWORD *)v45 + 1) = v48;
    v49 = v8[21];
    v50 = (char *)v6 + v49;
    v51 = (char *)v7 + v49;
    *((_QWORD *)v50 + 8) = *((_QWORD *)v51 + 8);
    v52 = *((_OWORD *)v51 + 3);
    *((_OWORD *)v50 + 2) = *((_OWORD *)v51 + 2);
    *((_OWORD *)v50 + 3) = v52;
    v53 = *((_OWORD *)v51 + 1);
    *(_OWORD *)v50 = *(_OWORD *)v51;
    *((_OWORD *)v50 + 1) = v53;
    v54 = v8[22];
    v55 = (char *)v6 + v54;
    v56 = (char *)v7 + v54;
    *(_OWORD *)v55 = *(_OWORD *)v56;
    *((_QWORD *)v55 + 2) = *((_QWORD *)v56 + 2);
    v57 = v8[23];
    v58 = (char *)v6 + v57;
    v59 = (char *)v7 + v57;
    *(_OWORD *)v58 = *(_OWORD *)v59;
    *((_QWORD *)v58 + 2) = *((_QWORD *)v59 + 2);
    v60 = v8[24];
    v61 = (_OWORD *)((char *)v6 + v60);
    v62 = (_OWORD *)((char *)v7 + v60);
    v63 = v62[1];
    *v61 = *v62;
    v61[1] = v63;
    v64 = v8[25];
    v65 = (_OWORD *)((char *)v6 + v64);
    v66 = (_OWORD *)((char *)v7 + v64);
    v67 = v66[1];
    *v65 = *v66;
    v65[1] = v67;
    *(_OWORD *)((char *)v6 + v8[26]) = *(_OWORD *)((char *)v7 + v8[26]);
    v68 = v8[27];
    v69 = (_OWORD *)((char *)v6 + v68);
    v70 = (_OWORD *)((char *)v7 + v68);
    v71 = v70[1];
    *v69 = *v70;
    v69[1] = v71;
    (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v9 + 56))(v6, 0, 1, v8);
  }
  return a1;
}

uint64_t sub_2143A10F4(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, int *);
  int v11;
  int v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  void *v19;
  const void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  void *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(void *, uint64_t, uint64_t);
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  const void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _OWORD *v77;
  _OWORD *v78;
  __int128 v79;
  uint64_t v80;
  _OWORD *v81;
  _OWORD *v82;
  __int128 v83;
  uint64_t v84;
  _OWORD *v85;
  _OWORD *v86;
  __int128 v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t (*v97)(void *, uint64_t, uint64_t);
  int v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  uint64_t v108;
  uint64_t v109;
  char v110;
  char v111;
  uint64_t v112;
  uint64_t v113;
  char v114;
  __int128 v115;
  __int128 v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char v120;
  uint64_t v121;
  uint64_t v122;
  char v123;
  char v124;
  uint64_t v125;
  uint64_t v126;
  char v127;
  __int128 v128;
  __int128 v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char v133;
  uint64_t v134;
  uint64_t v135;
  char v136;
  char v137;
  uint64_t v138;
  uint64_t v139;
  char v140;
  __int128 v141;
  __int128 v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char v146;
  uint64_t v147;
  uint64_t v148;
  char v149;
  char v150;
  uint64_t v151;
  uint64_t v152;
  char v153;
  __int128 v154;
  __int128 v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  char v165;
  uint64_t v166;
  uint64_t v167;
  char v168;
  __int128 v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char v173;
  uint64_t v174;
  uint64_t v175;
  char v176;
  __int128 v177;
  uint64_t v178;
  _QWORD *v179;
  uint64_t *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  __int128 v186;

  _s6Charts15AnyChartContentVwxx_0(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_release();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v5 = *(int *)(type metadata accessor for RulesRenderer(0) + 32);
  v6 = a1 + v5;
  v7 = a2 + v5;
  v8 = (int *)type metadata accessor for ChartContentRenderContext.Environment(0);
  v9 = *((_QWORD *)v8 - 1);
  v10 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v9 + 48);
  v11 = v10(v6, 1, v8);
  v12 = v10(v7, 1, v8);
  if (v11)
  {
    if (!v12)
    {
      v13 = *(_OWORD *)(v7 + 16);
      *(_OWORD *)v6 = *(_OWORD *)v7;
      *(_OWORD *)(v6 + 16) = v13;
      *(_OWORD *)(v6 + 25) = *(_OWORD *)(v7 + 25);
      *(_BYTE *)(v6 + 41) = *(_BYTE *)(v7 + 41);
      v14 = *(_OWORD *)(v7 + 64);
      *(_OWORD *)(v6 + 48) = *(_OWORD *)(v7 + 48);
      *(_OWORD *)(v6 + 64) = v14;
      *(_QWORD *)(v6 + 80) = *(_QWORD *)(v7 + 80);
      v15 = *(_OWORD *)(v7 + 88);
      v16 = *(_OWORD *)(v7 + 104);
      *(_OWORD *)(v6 + 113) = *(_OWORD *)(v7 + 113);
      *(_OWORD *)(v6 + 104) = v16;
      *(_OWORD *)(v6 + 88) = v15;
      *(_OWORD *)(v6 + 136) = *(_OWORD *)(v7 + 136);
      *(_BYTE *)(v6 + 152) = *(_BYTE *)(v7 + 152);
      *(_QWORD *)(v6 + 160) = *(_QWORD *)(v7 + 160);
      *(_BYTE *)(v6 + 168) = *(_BYTE *)(v7 + 168);
      v17 = *(_OWORD *)(v7 + 192);
      *(_OWORD *)(v6 + 176) = *(_OWORD *)(v7 + 176);
      *(_OWORD *)(v6 + 192) = v17;
      *(_BYTE *)(v6 + 208) = *(_BYTE *)(v7 + 208);
      v18 = v8[11];
      v19 = (void *)(v6 + v18);
      v20 = (const void *)(v7 + v18);
      v21 = sub_214424308();
      v22 = *(_QWORD *)(v21 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
      {
        v23 = sub_2141D8BF8(&qword_253F134C8);
        memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v22 + 32))(v19, v20, v21);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
      }
      v38 = v8[12];
      v39 = v6 + v38;
      v40 = v7 + v38;
      *(_QWORD *)v39 = *(_QWORD *)v40;
      *(_BYTE *)(v39 + 8) = *(_BYTE *)(v40 + 8);
      *(_QWORD *)(v6 + v8[13]) = *(_QWORD *)(v7 + v8[13]);
      v41 = v8[14];
      v42 = (void *)(v6 + v41);
      v43 = (const void *)(v7 + v41);
      v44 = sub_214424C68();
      v45 = *(_QWORD *)(v44 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v45 + 48))(v43, 1, v44))
      {
        v46 = sub_2141D8BF8(&qword_253F15C88);
        memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v45 + 32))(v42, v43, v44);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v45 + 56))(v42, 0, 1, v44);
      }
      v47 = v8[15];
      v48 = v6 + v47;
      v49 = v7 + v47;
      *(_QWORD *)v48 = *(_QWORD *)v49;
      *(_WORD *)(v48 + 8) = *(_WORD *)(v49 + 8);
      *(_QWORD *)(v6 + v8[16]) = *(_QWORD *)(v7 + v8[16]);
      *(_QWORD *)(v6 + v8[17]) = *(_QWORD *)(v7 + v8[17]);
      v50 = v8[18];
      v51 = v6 + v50;
      v52 = v7 + v50;
      v53 = *(_OWORD *)(v52 + 48);
      *(_OWORD *)(v51 + 32) = *(_OWORD *)(v52 + 32);
      *(_OWORD *)(v51 + 48) = v53;
      *(_QWORD *)(v51 + 64) = *(_QWORD *)(v52 + 64);
      v54 = *(_OWORD *)(v52 + 16);
      *(_OWORD *)v51 = *(_OWORD *)v52;
      *(_OWORD *)(v51 + 16) = v54;
      v55 = v8[19];
      v56 = v6 + v55;
      v57 = v7 + v55;
      *(_QWORD *)(v56 + 64) = *(_QWORD *)(v57 + 64);
      v58 = *(_OWORD *)(v57 + 48);
      *(_OWORD *)(v56 + 32) = *(_OWORD *)(v57 + 32);
      *(_OWORD *)(v56 + 48) = v58;
      v59 = *(_OWORD *)(v57 + 16);
      *(_OWORD *)v56 = *(_OWORD *)v57;
      *(_OWORD *)(v56 + 16) = v59;
      v60 = v8[20];
      v61 = v6 + v60;
      v62 = v7 + v60;
      v63 = *(_OWORD *)(v62 + 48);
      *(_OWORD *)(v61 + 32) = *(_OWORD *)(v62 + 32);
      *(_OWORD *)(v61 + 48) = v63;
      *(_QWORD *)(v61 + 64) = *(_QWORD *)(v62 + 64);
      v64 = *(_OWORD *)(v62 + 16);
      *(_OWORD *)v61 = *(_OWORD *)v62;
      *(_OWORD *)(v61 + 16) = v64;
      v65 = v8[21];
      v66 = v6 + v65;
      v67 = v7 + v65;
      *(_QWORD *)(v66 + 64) = *(_QWORD *)(v67 + 64);
      v68 = *(_OWORD *)(v67 + 48);
      *(_OWORD *)(v66 + 32) = *(_OWORD *)(v67 + 32);
      *(_OWORD *)(v66 + 48) = v68;
      v69 = *(_OWORD *)(v67 + 16);
      *(_OWORD *)v66 = *(_OWORD *)v67;
      *(_OWORD *)(v66 + 16) = v69;
      v70 = v8[22];
      v71 = v6 + v70;
      v72 = v7 + v70;
      *(_OWORD *)v71 = *(_OWORD *)v72;
      *(_QWORD *)(v71 + 16) = *(_QWORD *)(v72 + 16);
      v73 = v8[23];
      v74 = v6 + v73;
      v75 = v7 + v73;
      *(_OWORD *)v74 = *(_OWORD *)v75;
      *(_QWORD *)(v74 + 16) = *(_QWORD *)(v75 + 16);
      v76 = v8[24];
      v77 = (_OWORD *)(v6 + v76);
      v78 = (_OWORD *)(v7 + v76);
      v79 = v78[1];
      *v77 = *v78;
      v77[1] = v79;
      v80 = v8[25];
      v81 = (_OWORD *)(v6 + v80);
      v82 = (_OWORD *)(v7 + v80);
      v83 = v82[1];
      *v81 = *v82;
      v81[1] = v83;
      *(_OWORD *)(v6 + v8[26]) = *(_OWORD *)(v7 + v8[26]);
      v84 = v8[27];
      v85 = (_OWORD *)(v6 + v84);
      v86 = (_OWORD *)(v7 + v84);
      v87 = v86[1];
      *v85 = *v86;
      v85[1] = v87;
      (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v9 + 56))(v6, 0, 1, v8);
      return a1;
    }
LABEL_7:
    v24 = sub_2141D8BF8(qword_254D69B70);
    memcpy((void *)v6, (const void *)v7, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    return a1;
  }
  if (v12)
  {
    sub_2141DD370(v6, type metadata accessor for ChartContentRenderContext.Environment);
    goto LABEL_7;
  }
  if (*(unsigned __int8 *)(v6 + 40) == 255)
    goto LABEL_14;
  if (*(unsigned __int8 *)(v7 + 40) == 255 || a1 != a2)
  {
    sub_21420D6FC(v6);
LABEL_14:
    v26 = *(_OWORD *)(v7 + 16);
    *(_OWORD *)v6 = *(_OWORD *)v7;
    *(_OWORD *)(v6 + 16) = v26;
    *(_OWORD *)(v6 + 25) = *(_OWORD *)(v7 + 25);
  }
  *(_BYTE *)(v6 + 41) = *(_BYTE *)(v7 + 41);
  v27 = *(_QWORD *)(v7 + 56);
  *(_QWORD *)(v6 + 48) = *(_QWORD *)(v7 + 48);
  *(_QWORD *)(v6 + 56) = v27;
  *(_QWORD *)(v6 + 64) = *(_QWORD *)(v7 + 64);
  *(_QWORD *)(v6 + 72) = *(_QWORD *)(v7 + 72);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v6 + 80) = *(_QWORD *)(v7 + 80);
  if (*(unsigned __int8 *)(v6 + 128) == 255)
  {
LABEL_19:
    v28 = *(_OWORD *)(v7 + 104);
    *(_OWORD *)(v6 + 88) = *(_OWORD *)(v7 + 88);
    *(_OWORD *)(v6 + 104) = v28;
    *(_OWORD *)(v6 + 113) = *(_OWORD *)(v7 + 113);
    goto LABEL_20;
  }
  if (*(unsigned __int8 *)(v7 + 128) == 255 || a1 != a2)
  {
    sub_21420D730(v6 + 88);
    goto LABEL_19;
  }
LABEL_20:
  *(_OWORD *)(v6 + 136) = *(_OWORD *)(v7 + 136);
  *(_BYTE *)(v6 + 152) = *(_BYTE *)(v7 + 152);
  *(_QWORD *)(v6 + 160) = *(_QWORD *)(v7 + 160);
  *(_BYTE *)(v6 + 168) = *(_BYTE *)(v7 + 168);
  v29 = *(_OWORD *)(v7 + 192);
  *(_OWORD *)(v6 + 176) = *(_OWORD *)(v7 + 176);
  *(_OWORD *)(v6 + 192) = v29;
  *(_BYTE *)(v6 + 208) = *(_BYTE *)(v7 + 208);
  v30 = v8[11];
  v31 = (void *)(v6 + v30);
  v32 = (void *)(v7 + v30);
  v33 = sub_214424308();
  v34 = *(_QWORD *)(v33 - 8);
  v35 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v34 + 48);
  v36 = v35(v31, 1, v33);
  v37 = v35(v32, 1, v33);
  if (v36)
  {
    if (!v37)
    {
      (*(void (**)(void *, void *, uint64_t))(v34 + 32))(v31, v32, v33);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  if (v37)
  {
    (*(void (**)(void *, uint64_t))(v34 + 8))(v31, v33);
LABEL_30:
    v88 = sub_2141D8BF8(&qword_253F134C8);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v88 - 8) + 64));
    goto LABEL_31;
  }
  (*(void (**)(void *, void *, uint64_t))(v34 + 40))(v31, v32, v33);
LABEL_31:
  v89 = v8[12];
  v90 = v6 + v89;
  v91 = v7 + v89;
  *(_QWORD *)v90 = *(_QWORD *)v91;
  *(_BYTE *)(v90 + 8) = *(_BYTE *)(v91 + 8);
  *(_QWORD *)(v6 + v8[13]) = *(_QWORD *)(v7 + v8[13]);
  v92 = v8[14];
  v93 = (void *)(v6 + v92);
  v94 = (void *)(v7 + v92);
  v95 = sub_214424C68();
  v96 = *(_QWORD *)(v95 - 8);
  v97 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v96 + 48);
  v98 = v97(v93, 1, v95);
  v99 = v97(v94, 1, v95);
  if (v98)
  {
    if (!v99)
    {
      (*(void (**)(void *, void *, uint64_t))(v96 + 32))(v93, v94, v95);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v96 + 56))(v93, 0, 1, v95);
      goto LABEL_37;
    }
    goto LABEL_36;
  }
  if (v99)
  {
    (*(void (**)(void *, uint64_t))(v96 + 8))(v93, v95);
LABEL_36:
    v100 = sub_2141D8BF8(&qword_253F15C88);
    memcpy(v93, v94, *(_QWORD *)(*(_QWORD *)(v100 - 8) + 64));
    goto LABEL_37;
  }
  (*(void (**)(void *, void *, uint64_t))(v96 + 40))(v93, v94, v95);
LABEL_37:
  v101 = v8[15];
  v102 = v6 + v101;
  v103 = v7 + v101;
  *(_QWORD *)(v6 + v101) = *(_QWORD *)(v7 + v101);
  swift_release();
  *(_BYTE *)(v102 + 8) = *(_BYTE *)(v103 + 8);
  *(_BYTE *)(v102 + 9) = *(_BYTE *)(v103 + 9);
  *(_QWORD *)(v6 + v8[16]) = *(_QWORD *)(v7 + v8[16]);
  *(_QWORD *)(v6 + v8[17]) = *(_QWORD *)(v7 + v8[17]);
  v104 = v8[18];
  v105 = v6 + v104;
  v106 = v7 + v104;
  if (*(_QWORD *)(v6 + v104 + 24))
  {
    if (*(_QWORD *)(v106 + 24))
    {
      v107 = *(_BYTE *)(v106 + 16);
      v108 = *(_QWORD *)v105;
      v109 = *(_QWORD *)(v105 + 8);
      v110 = *(_BYTE *)(v105 + 16);
      *(_OWORD *)v105 = *(_OWORD *)v106;
      *(_BYTE *)(v105 + 16) = v107;
      sub_2141ED0BC(v108, v109, v110);
      *(_QWORD *)(v105 + 24) = *(_QWORD *)(v106 + 24);
      swift_bridgeObjectRelease();
      v111 = *(_BYTE *)(v106 + 48);
      v112 = *(_QWORD *)(v105 + 32);
      v113 = *(_QWORD *)(v105 + 40);
      *(_OWORD *)(v105 + 32) = *(_OWORD *)(v106 + 32);
      v114 = *(_BYTE *)(v105 + 48);
      *(_BYTE *)(v105 + 48) = v111;
      sub_2141EF1B0(v112, v113, v114);
      *(_OWORD *)(v105 + 56) = *(_OWORD *)(v106 + 56);
      goto LABEL_42;
    }
    sub_21420D764(v105);
  }
  v115 = *(_OWORD *)(v106 + 48);
  *(_OWORD *)(v105 + 32) = *(_OWORD *)(v106 + 32);
  *(_OWORD *)(v105 + 48) = v115;
  *(_QWORD *)(v105 + 64) = *(_QWORD *)(v106 + 64);
  v116 = *(_OWORD *)(v106 + 16);
  *(_OWORD *)v105 = *(_OWORD *)v106;
  *(_OWORD *)(v105 + 16) = v116;
LABEL_42:
  v117 = v8[19];
  v118 = v6 + v117;
  v119 = v7 + v117;
  if (*(_QWORD *)(v6 + v117 + 24))
  {
    if (*(_QWORD *)(v119 + 24))
    {
      v120 = *(_BYTE *)(v119 + 16);
      v121 = *(_QWORD *)v118;
      v122 = *(_QWORD *)(v118 + 8);
      v123 = *(_BYTE *)(v118 + 16);
      *(_OWORD *)v118 = *(_OWORD *)v119;
      *(_BYTE *)(v118 + 16) = v120;
      sub_2141ED0BC(v121, v122, v123);
      *(_QWORD *)(v118 + 24) = *(_QWORD *)(v119 + 24);
      swift_bridgeObjectRelease();
      v124 = *(_BYTE *)(v119 + 48);
      v125 = *(_QWORD *)(v118 + 32);
      v126 = *(_QWORD *)(v118 + 40);
      *(_OWORD *)(v118 + 32) = *(_OWORD *)(v119 + 32);
      v127 = *(_BYTE *)(v118 + 48);
      *(_BYTE *)(v118 + 48) = v124;
      sub_2141EF1B0(v125, v126, v127);
      *(_OWORD *)(v118 + 56) = *(_OWORD *)(v119 + 56);
      goto LABEL_47;
    }
    sub_21420D764(v118);
  }
  v128 = *(_OWORD *)(v119 + 48);
  *(_OWORD *)(v118 + 32) = *(_OWORD *)(v119 + 32);
  *(_OWORD *)(v118 + 48) = v128;
  *(_QWORD *)(v118 + 64) = *(_QWORD *)(v119 + 64);
  v129 = *(_OWORD *)(v119 + 16);
  *(_OWORD *)v118 = *(_OWORD *)v119;
  *(_OWORD *)(v118 + 16) = v129;
LABEL_47:
  v130 = v8[20];
  v131 = v6 + v130;
  v132 = v7 + v130;
  if (*(_QWORD *)(v6 + v130 + 24))
  {
    if (*(_QWORD *)(v132 + 24))
    {
      v133 = *(_BYTE *)(v132 + 16);
      v134 = *(_QWORD *)v131;
      v135 = *(_QWORD *)(v131 + 8);
      v136 = *(_BYTE *)(v131 + 16);
      *(_OWORD *)v131 = *(_OWORD *)v132;
      *(_BYTE *)(v131 + 16) = v133;
      sub_2141ED0BC(v134, v135, v136);
      *(_QWORD *)(v131 + 24) = *(_QWORD *)(v132 + 24);
      swift_bridgeObjectRelease();
      v137 = *(_BYTE *)(v132 + 48);
      v138 = *(_QWORD *)(v131 + 32);
      v139 = *(_QWORD *)(v131 + 40);
      *(_OWORD *)(v131 + 32) = *(_OWORD *)(v132 + 32);
      v140 = *(_BYTE *)(v131 + 48);
      *(_BYTE *)(v131 + 48) = v137;
      sub_2141EF1B0(v138, v139, v140);
      *(_OWORD *)(v131 + 56) = *(_OWORD *)(v132 + 56);
      goto LABEL_52;
    }
    sub_21420D764(v131);
  }
  v141 = *(_OWORD *)(v132 + 48);
  *(_OWORD *)(v131 + 32) = *(_OWORD *)(v132 + 32);
  *(_OWORD *)(v131 + 48) = v141;
  *(_QWORD *)(v131 + 64) = *(_QWORD *)(v132 + 64);
  v142 = *(_OWORD *)(v132 + 16);
  *(_OWORD *)v131 = *(_OWORD *)v132;
  *(_OWORD *)(v131 + 16) = v142;
LABEL_52:
  v143 = v8[21];
  v144 = v6 + v143;
  v145 = v7 + v143;
  if (*(_QWORD *)(v6 + v143 + 24))
  {
    if (*(_QWORD *)(v145 + 24))
    {
      v146 = *(_BYTE *)(v145 + 16);
      v147 = *(_QWORD *)v144;
      v148 = *(_QWORD *)(v144 + 8);
      v149 = *(_BYTE *)(v144 + 16);
      *(_OWORD *)v144 = *(_OWORD *)v145;
      *(_BYTE *)(v144 + 16) = v146;
      sub_2141ED0BC(v147, v148, v149);
      *(_QWORD *)(v144 + 24) = *(_QWORD *)(v145 + 24);
      swift_bridgeObjectRelease();
      v150 = *(_BYTE *)(v145 + 48);
      v151 = *(_QWORD *)(v144 + 32);
      v152 = *(_QWORD *)(v144 + 40);
      *(_OWORD *)(v144 + 32) = *(_OWORD *)(v145 + 32);
      v153 = *(_BYTE *)(v144 + 48);
      *(_BYTE *)(v144 + 48) = v150;
      sub_2141EF1B0(v151, v152, v153);
      *(_OWORD *)(v144 + 56) = *(_OWORD *)(v145 + 56);
      goto LABEL_57;
    }
    sub_21420D764(v144);
  }
  v154 = *(_OWORD *)(v145 + 48);
  *(_OWORD *)(v144 + 32) = *(_OWORD *)(v145 + 32);
  *(_OWORD *)(v144 + 48) = v154;
  *(_QWORD *)(v144 + 64) = *(_QWORD *)(v145 + 64);
  v155 = *(_OWORD *)(v145 + 16);
  *(_OWORD *)v144 = *(_OWORD *)v145;
  *(_OWORD *)(v144 + 16) = v155;
LABEL_57:
  v156 = v8[22];
  v157 = v6 + v156;
  v158 = v7 + v156;
  *(_OWORD *)v157 = *(_OWORD *)v158;
  *(_QWORD *)(v157 + 16) = *(_QWORD *)(v158 + 16);
  v159 = v8[23];
  v160 = v6 + v159;
  v161 = v7 + v159;
  *(_OWORD *)v160 = *(_OWORD *)v161;
  *(_QWORD *)(v160 + 16) = *(_QWORD *)(v161 + 16);
  v162 = v8[24];
  v163 = v6 + v162;
  v164 = v7 + v162;
  if (*(_QWORD *)(v6 + v162 + 24))
  {
    if (*(_QWORD *)(v164 + 24))
    {
      v165 = *(_BYTE *)(v164 + 16);
      v166 = *(_QWORD *)v163;
      v167 = *(_QWORD *)(v163 + 8);
      v168 = *(_BYTE *)(v163 + 16);
      *(_OWORD *)v163 = *(_OWORD *)v164;
      *(_BYTE *)(v163 + 16) = v165;
      sub_2141ED0BC(v166, v167, v168);
      *(_QWORD *)(v163 + 24) = *(_QWORD *)(v164 + 24);
      swift_bridgeObjectRelease();
      goto LABEL_62;
    }
    sub_21420D798(v163);
  }
  v169 = *(_OWORD *)(v164 + 16);
  *(_OWORD *)v163 = *(_OWORD *)v164;
  *(_OWORD *)(v163 + 16) = v169;
LABEL_62:
  v170 = v8[25];
  v171 = v6 + v170;
  v172 = v7 + v170;
  if (!*(_QWORD *)(v6 + v170 + 24))
  {
LABEL_66:
    v177 = *(_OWORD *)(v172 + 16);
    *(_OWORD *)v171 = *(_OWORD *)v172;
    *(_OWORD *)(v171 + 16) = v177;
    goto LABEL_67;
  }
  if (!*(_QWORD *)(v172 + 24))
  {
    sub_21420D798(v171);
    goto LABEL_66;
  }
  v173 = *(_BYTE *)(v172 + 16);
  v174 = *(_QWORD *)v171;
  v175 = *(_QWORD *)(v171 + 8);
  v176 = *(_BYTE *)(v171 + 16);
  *(_OWORD *)v171 = *(_OWORD *)v172;
  *(_BYTE *)(v171 + 16) = v173;
  sub_2141ED0BC(v174, v175, v176);
  *(_QWORD *)(v171 + 24) = *(_QWORD *)(v172 + 24);
  swift_bridgeObjectRelease();
LABEL_67:
  v178 = v8[26];
  v179 = (_QWORD *)(v6 + v178);
  v180 = (uint64_t *)(v7 + v178);
  v182 = *v180;
  v181 = v180[1];
  *v179 = v182;
  v179[1] = v181;
  swift_bridgeObjectRelease();
  v183 = v8[27];
  v184 = v6 + v183;
  v185 = v7 + v183;
  if (*(_QWORD *)(v184 + 24))
  {
    if (*(_QWORD *)(v185 + 24))
      _s6Charts15AnyChartContentVwxx_0(v184);
    else
      sub_21420D92C(v184);
  }
  v186 = *(_OWORD *)(v185 + 16);
  *(_OWORD *)v184 = *(_OWORD *)v185;
  *(_OWORD *)(v184 + 16) = v186;
  return a1;
}

uint64_t sub_2143A1B54()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2143A1B60(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for RulesRenderer(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_2143A1B9C()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_2143A1BA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for RulesRenderer(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for VectorizedRulePlotContent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2141D8E88(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for VectorizedRulePlotContent);
}

double sub_2143A1BF4(uint64_t a1)
{
  uint64_t v1;
  float64x2_t *v2;
  float64x2_t v3;
  float64x2_t v4;
  float64x2_t v5;
  float64x2_t v6;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v2 = (float64x2_t *)(a1 + 32);
    v3 = 0uLL;
    v4 = 0uLL;
    do
    {
      v6 = *v2;
      v5 = v2[1];
      v2 += 2;
      v4 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v5, v4), (int8x16_t)v5, (int8x16_t)v4);
      v3 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v6, v3), (int8x16_t)v6, (int8x16_t)v3);
      --v1;
    }
    while (v1);
  }
  else
  {
    v3.f64[0] = 0.0;
  }
  return ceil(v3.f64[0]);
}

uint64_t sub_2143A1C4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t (*v41)(uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v46;
  char v47;
  unint64_t v48;
  uint64_t v49;
  _BOOL8 v50;
  uint64_t v51;
  char v52;
  unint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t (*v62)(uint64_t, uint64_t);
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  char v68;
  unint64_t v69;
  uint64_t v70;
  _BOOL8 v71;
  uint64_t v72;
  char v73;
  unint64_t v74;
  char v75;
  uint64_t v76;
  char v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  char v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  char v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  char v106;
  unint64_t v107;
  unint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  char v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  _QWORD *v126;
  char v127;
  unint64_t v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t *v135;
  uint64_t v136;
  _QWORD *v137;
  char v138;
  unint64_t v139;
  unint64_t v140;
  uint64_t result;
  uint64_t v142;
  uint64_t v143;
  int64_t v144;
  unint64_t v145;
  int64_t v146;
  uint64_t v147;
  char v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  void *v154;
  uint64_t v155;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  uint64_t v161;
  uint64_t v162;
  __int128 v163[2];
  _QWORD v164[3];
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  _DWORD v168[2];
  char v169;
  _DWORD v170[2];
  char v171;

  v9 = *(_QWORD *)(a4 + 64);
  v143 = a4 + 64;
  v167 = MEMORY[0x24BEE4AF8];
  v10 = 1 << *(_BYTE *)(a4 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & v9;
  v162 = a5 + 24;
  v144 = (unint64_t)(v10 + 63) >> 6;
  swift_bridgeObjectRetain();
  v13 = v12;
  v14 = a4;
  v15 = 0;
  v151 = a3;
  v152 = a2;
  v142 = a4;
  v153 = a1;
  do
  {
LABEL_4:
    if (v13)
    {
      v16 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v17 = v16 | (v15 << 6);
    }
    else
    {
      v18 = v15 + 1;
      if (__OFADD__(v15, 1))
        goto LABEL_121;
      if (v18 >= v144)
        goto LABEL_115;
      v19 = *(_QWORD *)(v143 + 8 * v18);
      ++v15;
      if (!v19)
      {
        v15 = v18 + 1;
        if (v18 + 1 >= v144)
          goto LABEL_115;
        v19 = *(_QWORD *)(v143 + 8 * v15);
        if (!v19)
        {
          v15 = v18 + 2;
          if (v18 + 2 >= v144)
            goto LABEL_115;
          v19 = *(_QWORD *)(v143 + 8 * v15);
          if (!v19)
          {
            v20 = v18 + 3;
            if (v20 >= v144)
              goto LABEL_115;
            v19 = *(_QWORD *)(v143 + 8 * v20);
            if (!v19)
            {
              while (1)
              {
                v15 = v20 + 1;
                if (__OFADD__(v20, 1))
                  goto LABEL_122;
                if (v15 >= v144)
                  break;
                v19 = *(_QWORD *)(v143 + 8 * v15);
                ++v20;
                if (v19)
                  goto LABEL_19;
              }
LABEL_115:
              swift_release();
              return v167;
            }
            v15 = v20;
          }
        }
      }
LABEL_19:
      v13 = (v19 - 1) & v19;
      v17 = __clz(__rbit64(v19)) + (v15 << 6);
    }
    v21 = *(_QWORD *)(*(_QWORD *)(v14 + 56) + 24 * v17 + 16);
    v150 = *(_QWORD *)(v21 + 16);
  }
  while (!v150);
  v145 = v13;
  v146 = v15;
  v148 = *(_BYTE *)(*(_QWORD *)(v14 + 48) + v17);
  v149 = v21 + 32;
  swift_bridgeObjectRetain();
  v22 = 0;
  v147 = v21;
  while (v22 < *(_QWORD *)(v21 + 16))
  {
    v23 = a3;
    v24 = (uint64_t *)(v149 + 48 * v22);
    v25 = v24[1];
    v155 = *v24;
    v171 = *((_BYTE *)v24 + 16);
    v170[0] = *(_DWORD *)((char *)v24 + 17);
    *(_DWORD *)((char *)v170 + 3) = *((_DWORD *)v24 + 5);
    v160 = v22;
    v161 = v24[3];
    v26 = *((_BYTE *)v24 + 32);
    v169 = v26;
    v168[0] = *(_DWORD *)((char *)v24 + 33);
    *(_DWORD *)((char *)v168 + 3) = *((_DWORD *)v24 + 9);
    v27 = v24[5];
    swift_beginAccess();
    v158 = v27;
    if (*(_QWORD *)(*(_QWORD *)v162 + 16) && (sub_214336CE4(v27), (v28 & 1) != 0))
    {
      swift_endAccess();
      sub_2141D8BF8(&qword_254D6D070);
      v29 = swift_dynamicCastClassUnconditional();
      swift_retain();
      if ((v26 & 1) != 0)
        goto LABEL_47;
    }
    else
    {
      swift_endAccess();
      v34 = *(_QWORD *)(a5 + 16);
      swift_beginAccess();
      v35 = *(_QWORD *)(v34 + 24);
      if (!*(_QWORD *)(v35 + 16))
        goto LABEL_123;
      v36 = sub_214336CE4(v27);
      if ((v37 & 1) == 0)
        goto LABEL_123;
      v38 = v25;
      sub_2141D7878(*(_QWORD *)(v35 + 56) + 40 * v36, (uint64_t)v163);
      sub_2141D8DC0(v163, (uint64_t)v164);
      swift_endAccess();
      v39 = v165;
      v40 = v166;
      sub_2141E88D0(v164, v165);
      v41 = *(uint64_t (**)(uint64_t, uint64_t))(v40 + 8);
      swift_retain();
      v42 = v41(v39, v40);
      v44 = v43;
      _s6Charts15AnyChartContentVwxx_0((uint64_t)v164);
      swift_release();
      swift_beginAccess();
      swift_retain();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)&v163[0] = *(_QWORD *)v162;
      v46 = *(_QWORD *)&v163[0];
      *(_QWORD *)v162 = 0x8000000000000000;
      v48 = sub_214336CE4(v27);
      v49 = *(_QWORD *)(v46 + 16);
      v50 = (v47 & 1) == 0;
      v51 = v49 + v50;
      if (__OFADD__(v49, v50))
        goto LABEL_117;
      v52 = v47;
      if (*(_QWORD *)(v46 + 24) >= v51)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          sub_2142A7BA0();
      }
      else
      {
        sub_21429C4A0(v51, isUniquelyReferenced_nonNull_native);
        v53 = sub_214336CE4(v158);
        if ((v52 & 1) != (v54 & 1))
          goto LABEL_126;
        v48 = v53;
      }
      v25 = v38;
      v76 = *(_QWORD *)&v163[0];
      if ((v52 & 1) != 0)
      {
        v77 = v26 & 1;
        v78 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)&v163[0] + 56) + 16 * v48);
        swift_release();
        *v78 = v42;
        v78[1] = v44;
      }
      else
      {
        sub_2142A6268(v48, v158, v42, v44, *(_QWORD **)&v163[0]);
        v77 = v169;
      }
      *(_QWORD *)v162 = v76;
      swift_bridgeObjectRelease();
      swift_endAccess();
      sub_2141D8BF8(&qword_254D6D070);
      v29 = swift_dynamicCastClassUnconditional();
      if ((v77 & 1) != 0)
      {
LABEL_47:
        v159 = v29;
        sub_2141D8BF8(&qword_253F157F8);
        v79 = swift_allocObject();
        *(_QWORD *)(v79 + 40) = 0;
        *(_BYTE *)(v79 + 48) = 1;
        *(_WORD *)(v79 + 16) = 256;
        *(_QWORD *)(v79 + 56) = 0;
        *(_QWORD *)(v79 + 64) = 0;
        v80 = MEMORY[0x24BEE4AF8];
        *(_QWORD *)(v79 + 24) = MEMORY[0x24BEE4AF8];
        *(_QWORD *)(v79 + 32) = v80;
        a3 = v23;
        v32 = v79;
        v33 = v152;
        if ((v80 & 0xC000000000000000) != 0)
        {
          v133 = sub_2144256AC();
          if (v133)
          {
            v134 = v133;
            if (v133 < 1)
              goto LABEL_125;
            v135 = (uint64_t *)(MEMORY[0x24BEE4AF8] + 32);
            do
            {
              v136 = *v135;
              swift_weakInit();
              v137 = *(_QWORD **)(v136 + 32);
              swift_retain();
              v138 = swift_isUniquelyReferenced_nonNull_native();
              *(_QWORD *)(v136 + 32) = v137;
              if ((v138 & 1) == 0)
              {
                v137 = sub_214221F04(0, v137[2] + 1, 1, v137);
                *(_QWORD *)(v136 + 32) = v137;
              }
              v140 = v137[2];
              v139 = v137[3];
              if (v140 >= v139 >> 1)
              {
                v137 = sub_214221F04((_QWORD *)(v139 > 1), v140 + 1, 1, v137);
                *(_QWORD *)(v136 + 32) = v137;
              }
              v137[2] = v140 + 1;
              sub_2143A485C((uint64_t)v164, (uint64_t)&v137[v140 + 4]);
              swift_release();
              ++v135;
              --v134;
            }
            while (v134);
          }
        }
        v81 = *(_QWORD *)(v32 + 56);
        *(_QWORD *)(v32 + 56) = sub_2143F8154;
        *(_QWORD *)(v32 + 64) = 0;
        sub_2141D972C(v81);
        goto LABEL_55;
      }
    }
    swift_beginAccess();
    v159 = v29;
    if (*(_QWORD *)(*(_QWORD *)v162 + 16) && (sub_214336CE4(v161), (v30 & 1) != 0))
    {
      swift_endAccess();
      sub_2141D8BF8(&qword_253F157F8);
      v31 = swift_dynamicCastClassUnconditional();
      swift_retain();
      a3 = v23;
      v32 = v31;
      v33 = v152;
    }
    else
    {
      swift_endAccess();
      v55 = *(_QWORD *)(a5 + 16);
      swift_beginAccess();
      v56 = *(_QWORD *)(v55 + 24);
      if (!*(_QWORD *)(v56 + 16))
        goto LABEL_124;
      v57 = sub_214336CE4(v161);
      if ((v58 & 1) == 0)
        goto LABEL_124;
      v59 = v25;
      sub_2141D7878(*(_QWORD *)(v56 + 56) + 40 * v57, (uint64_t)v163);
      sub_2141D8DC0(v163, (uint64_t)v164);
      swift_endAccess();
      v60 = v165;
      v61 = v166;
      sub_2141E88D0(v164, v165);
      v62 = *(uint64_t (**)(uint64_t, uint64_t))(v61 + 8);
      swift_retain();
      swift_retain();
      v63 = v62(v60, v61);
      v65 = v64;
      _s6Charts15AnyChartContentVwxx_0((uint64_t)v164);
      swift_release();
      swift_beginAccess();
      swift_retain();
      v66 = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)&v163[0] = *(_QWORD *)(a5 + 24);
      v67 = *(_QWORD *)&v163[0];
      *(_QWORD *)(a5 + 24) = 0x8000000000000000;
      v69 = sub_214336CE4(v161);
      v70 = *(_QWORD *)(v67 + 16);
      v71 = (v68 & 1) == 0;
      v72 = v70 + v71;
      if (__OFADD__(v70, v71))
        goto LABEL_120;
      v73 = v68;
      if (*(_QWORD *)(v67 + 24) >= v72)
      {
        a3 = v23;
        if ((v66 & 1) == 0)
          sub_2142A7BA0();
      }
      else
      {
        sub_21429C4A0(v72, v66);
        v74 = sub_214336CE4(v161);
        if ((v73 & 1) != (v75 & 1))
          goto LABEL_126;
        v69 = v74;
        a3 = v23;
      }
      v25 = v59;
      v33 = v152;
      v82 = *(_QWORD *)&v163[0];
      if ((v73 & 1) != 0)
      {
        v83 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)&v163[0] + 56) + 16 * v69);
        swift_release();
        *v83 = v63;
        v83[1] = v65;
      }
      else
      {
        sub_2142A6268(v69, v161, v63, v65, *(_QWORD **)&v163[0]);
      }
      *(_QWORD *)(a5 + 24) = v82;
      swift_bridgeObjectRelease();
      swift_endAccess();
      swift_release();
      sub_2141D8BF8(&qword_253F157F8);
      v32 = swift_dynamicCastClassUnconditional();
    }
LABEL_55:
    v84 = v153;
    v85 = MEMORY[0x24BEE4AF8];
    if ((v171 & 1) != 0)
    {
      v86 = 0;
      v154 = sub_2143A41B4;
      v87 = MEMORY[0x24BEE4AF8];
    }
    else
    {
      swift_beginAccess();
      if (*(_QWORD *)(*(_QWORD *)v162 + 16) && (sub_214336CE4(v25), (v88 & 1) != 0))
      {
        swift_endAccess();
        sub_2141D8BF8(&qword_254D6D088);
        v86 = swift_dynamicCastClassUnconditional();
        swift_retain();
      }
      else
      {
        swift_endAccess();
        swift_retain();
        swift_retain();
        v89 = sub_2142270B4(v25);
        v91 = v90;
        swift_release();
        swift_beginAccess();
        swift_retain();
        v92 = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)&v163[0] = *(_QWORD *)(a5 + 24);
        *(_QWORD *)(a5 + 24) = 0x8000000000000000;
        v93 = v91;
        v84 = v153;
        sub_2142A27BC(v89, v93, v25, v92);
        *(_QWORD *)(a5 + 24) = *(_QWORD *)&v163[0];
        swift_bridgeObjectRelease();
        swift_endAccess();
        swift_release();
        sub_2141D8BF8(&qword_254D6D088);
        v86 = swift_dynamicCastClassUnconditional();
      }
      sub_2141D8BF8(&qword_253F15D58);
      v94 = swift_allocObject();
      *(_OWORD *)(v94 + 16) = xmmword_2144271E0;
      *(_QWORD *)(v94 + 32) = v86;
      v164[0] = v94;
      sub_214424FF8();
      v87 = v164[0];
      v154 = sub_2143A4994;
      v85 = MEMORY[0x24BEE4AF8];
    }
    sub_2141D8BF8(&qword_254D6D078);
    v95 = swift_allocObject();
    *(_QWORD *)(v95 + 40) = 0;
    *(_QWORD *)(v95 + 48) = 0;
    *(_WORD *)(v95 + 56) = 256;
    *(_WORD *)(v95 + 16) = 256;
    *(_QWORD *)(v95 + 64) = 0;
    *(_QWORD *)(v95 + 72) = 0;
    *(_QWORD *)(v95 + 24) = v87;
    *(_QWORD *)(v95 + 32) = v85;
    if (v87 >> 62)
    {
      swift_retain();
      swift_bridgeObjectRetain();
      v96 = sub_2144256AC();
      v157 = v32;
      if (!v96)
      {
LABEL_81:
        swift_bridgeObjectRelease();
        goto LABEL_82;
      }
    }
    else
    {
      v96 = *(_QWORD *)((v87 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_retain();
      swift_bridgeObjectRetain();
      v157 = v32;
      if (!v96)
        goto LABEL_81;
    }
    if (v96 < 1)
      goto LABEL_118;
    if ((v87 & 0xC000000000000001) != 0)
    {
      v97 = 0;
      do
      {
        v98 = MEMORY[0x2199CCE3C](v97, v87);
        swift_weakInit();
        v99 = *(_QWORD **)(v98 + 32);
        v100 = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v98 + 32) = v99;
        if ((v100 & 1) == 0)
        {
          v99 = sub_214221F04(0, v99[2] + 1, 1, v99);
          *(_QWORD *)(v98 + 32) = v99;
        }
        v102 = v99[2];
        v101 = v99[3];
        if (v102 >= v101 >> 1)
        {
          v99 = sub_214221F04((_QWORD *)(v101 > 1), v102 + 1, 1, v99);
          *(_QWORD *)(v98 + 32) = v99;
        }
        ++v97;
        v99[2] = v102 + 1;
        sub_2143A485C((uint64_t)v164, (uint64_t)&v99[v102 + 4]);
        swift_unknownObjectRelease();
      }
      while (v96 != v97);
    }
    else
    {
      v103 = 0;
      do
      {
        v104 = *(_QWORD *)(v87 + 8 * v103 + 32);
        swift_weakInit();
        v105 = *(_QWORD **)(v104 + 32);
        swift_retain();
        v106 = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v104 + 32) = v105;
        if ((v106 & 1) == 0)
        {
          v105 = sub_214221F04(0, v105[2] + 1, 1, v105);
          *(_QWORD *)(v104 + 32) = v105;
        }
        v108 = v105[2];
        v107 = v105[3];
        if (v108 >= v107 >> 1)
        {
          v105 = sub_214221F04((_QWORD *)(v107 > 1), v108 + 1, 1, v105);
          *(_QWORD *)(v104 + 32) = v105;
        }
        ++v103;
        v105[2] = v108 + 1;
        sub_2143A485C((uint64_t)v164, (uint64_t)&v105[v108 + 4]);
        swift_release();
      }
      while (v96 != v103);
    }
    swift_bridgeObjectRelease();
    a3 = v151;
    v33 = v152;
    v84 = v153;
    v32 = v157;
LABEL_82:
    swift_unownedRetainStrong();
    swift_unownedRetain();
    swift_unownedRetain();
    swift_retain();
    swift_unownedRelease();
    swift_unownedRelease();
    swift_unownedRetain();
    swift_release();
    v109 = (_QWORD *)swift_allocObject();
    v109[2] = v154;
    v109[3] = v86;
    v109[4] = v95;
    v110 = *(_QWORD *)(v95 + 64);
    *(_QWORD *)(v95 + 64) = sub_2143A48B0;
    *(_QWORD *)(v95 + 72) = v109;
    sub_2141D972C(v110);
    swift_release();
    v111 = swift_allocObject();
    *(_BYTE *)(v111 + 16) = v148;
    *(_QWORD *)(v111 + 24) = v160;
    *(_QWORD *)(v111 + 32) = v155;
    *(_QWORD *)(v111 + 40) = v25;
    *(_BYTE *)(v111 + 48) = v171;
    *(_DWORD *)(v111 + 49) = v170[0];
    *(_DWORD *)(v111 + 52) = *(_DWORD *)((char *)v170 + 3);
    *(_QWORD *)(v111 + 56) = v161;
    *(_BYTE *)(v111 + 64) = v169;
    *(_DWORD *)(v111 + 65) = v168[0];
    *(_DWORD *)(v111 + 68) = *(_DWORD *)((char *)v168 + 3);
    *(_QWORD *)(v111 + 72) = v158;
    *(_QWORD *)(v111 + 80) = a3;
    sub_2141D8BF8(&qword_253F15D58);
    v112 = swift_allocObject();
    *(_OWORD *)(v112 + 16) = xmmword_2144271C0;
    *(_QWORD *)(v112 + 32) = v84;
    *(_QWORD *)(v112 + 40) = v33;
    *(_QWORD *)(v112 + 48) = v159;
    *(_QWORD *)(v112 + 56) = v32;
    *(_QWORD *)(v112 + 64) = v95;
    v164[0] = v112;
    sub_214424FF8();
    v113 = v164[0];
    v114 = (_QWORD *)swift_allocObject();
    v114[2] = sub_2143A48E0;
    v114[3] = v111;
    v114[4] = v84;
    v114[5] = v33;
    v114[6] = v159;
    v114[7] = v32;
    v114[8] = v95;
    sub_2141D8BF8(&qword_254D6D080);
    v115 = swift_allocObject();
    *(_OWORD *)(v115 + 40) = 0u;
    *(_OWORD *)(v115 + 56) = 0u;
    *(_OWORD *)(v115 + 72) = 0u;
    *(_QWORD *)(v115 + 88) = 0x1FFFFFFFELL;
    *(_WORD *)(v115 + 16) = 256;
    *(_OWORD *)(v115 + 96) = 0u;
    *(_OWORD *)(v115 + 112) = 0u;
    *(_OWORD *)(v115 + 128) = 0u;
    *(_BYTE *)(v115 + 144) = 0;
    *(_QWORD *)(v115 + 152) = 0;
    *(_QWORD *)(v115 + 160) = 0;
    v116 = MEMORY[0x24BEE4AF8];
    *(_QWORD *)(v115 + 24) = v113;
    *(_QWORD *)(v115 + 32) = v116;
    if (v113 >> 62)
    {
      swift_retain_n();
      swift_retain_n();
      swift_retain_n();
      swift_retain_n();
      swift_retain_n();
      swift_retain();
      swift_bridgeObjectRetain();
      v117 = sub_2144256AC();
      if (!v117)
      {
LABEL_101:
        swift_bridgeObjectRelease();
        goto LABEL_102;
      }
    }
    else
    {
      v117 = *(_QWORD *)((v113 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_retain_n();
      swift_retain_n();
      swift_retain_n();
      swift_retain_n();
      swift_retain_n();
      swift_retain();
      swift_bridgeObjectRetain();
      if (!v117)
        goto LABEL_101;
    }
    if (v117 < 1)
      goto LABEL_119;
    if ((v113 & 0xC000000000000001) != 0)
    {
      v118 = 0;
      do
      {
        v119 = MEMORY[0x2199CCE3C](v118, v113);
        swift_weakInit();
        v120 = *(_QWORD **)(v119 + 32);
        v121 = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v119 + 32) = v120;
        if ((v121 & 1) == 0)
        {
          v120 = sub_214221F04(0, v120[2] + 1, 1, v120);
          *(_QWORD *)(v119 + 32) = v120;
        }
        v123 = v120[2];
        v122 = v120[3];
        if (v123 >= v122 >> 1)
        {
          v120 = sub_214221F04((_QWORD *)(v122 > 1), v123 + 1, 1, v120);
          *(_QWORD *)(v119 + 32) = v120;
        }
        ++v118;
        v120[2] = v123 + 1;
        sub_2143A485C((uint64_t)v164, (uint64_t)&v120[v123 + 4]);
        swift_unknownObjectRelease();
      }
      while (v117 != v118);
    }
    else
    {
      v124 = 0;
      do
      {
        v125 = *(_QWORD *)(v113 + 8 * v124 + 32);
        swift_weakInit();
        v126 = *(_QWORD **)(v125 + 32);
        swift_retain();
        v127 = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v125 + 32) = v126;
        if ((v127 & 1) == 0)
        {
          v126 = sub_214221F04(0, v126[2] + 1, 1, v126);
          *(_QWORD *)(v125 + 32) = v126;
        }
        v129 = v126[2];
        v128 = v126[3];
        if (v129 >= v128 >> 1)
        {
          v126 = sub_214221F04((_QWORD *)(v128 > 1), v129 + 1, 1, v126);
          *(_QWORD *)(v125 + 32) = v126;
        }
        ++v124;
        v126[2] = v129 + 1;
        sub_2143A485C((uint64_t)v164, (uint64_t)&v126[v129 + 4]);
        swift_release();
      }
      while (v117 != v124);
    }
    swift_bridgeObjectRelease();
    a3 = v151;
LABEL_102:
    v130 = swift_allocObject();
    *(_QWORD *)(v130 + 16) = sub_2143A495C;
    *(_QWORD *)(v130 + 24) = v114;
    v131 = *(_QWORD *)(v115 + 152);
    *(_QWORD *)(v115 + 152) = sub_2141E7E10;
    *(_QWORD *)(v115 + 160) = v130;
    sub_2141D972C(v131);
    v132 = swift_retain();
    MEMORY[0x2199CC8E4](v132);
    if (*(_QWORD *)((v167 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v167 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      sub_21442501C();
    v22 = v160 + 1;
    sub_214425064();
    sub_214424FF8();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    v21 = v147;
    if (v160 + 1 == v150)
    {
      swift_bridgeObjectRelease();
      v14 = v142;
      v13 = v145;
      v15 = v146;
      goto LABEL_4;
    }
  }
  __break(1u);
LABEL_117:
  __break(1u);
LABEL_118:
  __break(1u);
LABEL_119:
  __break(1u);
LABEL_120:
  __break(1u);
LABEL_121:
  __break(1u);
LABEL_122:
  __break(1u);
LABEL_123:
  swift_endAccess();
  __break(1u);
LABEL_124:
  swift_endAccess();
  __break(1u);
LABEL_125:
  __break(1u);
LABEL_126:
  result = sub_214425820();
  __break(1u);
  return result;
}

